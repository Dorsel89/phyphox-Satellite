
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	200056c0 	.word	0x200056c0
}
   4:	000127d9 	.word	0x000127d9
   8:	0001db85 	.word	0x0001db85
   c:	0001282d 	.word	0x0001282d
  10:	0001282d 	.word	0x0001282d
  14:	0001282d 	.word	0x0001282d
  18:	0001282d 	.word	0x0001282d
	...
  2c:	000125b1 	.word	0x000125b1
  30:	0001282d 	.word	0x0001282d
  34:	00000000 	.word	0x00000000
  38:	0001255d 	.word	0x0001255d
  3c:	0001d7bb 	.word	0x0001d7bb

00000040 <_irq_vector_table>:
  40:	00012799 0001fe77 00012799 00012799     .'..w....'...'..
  50:	00012799 00012799 00012799 00012799     .'...'...'...'..
  60:	0001fe3f 00012799 00012799 0001fe5d     ?....'...'..]...
  70:	00012799 00012799 00012799 00012799     .'...'...'...'..
  80:	00012799 00012799 00012799 00012799     .'...'...'...'..
  90:	00012799 00012799 00012799 00012799     .'...'...'...'..
  a0:	00012799 00012799 00012799 00012799     .'...'...'...'..
  b0:	00012799 00012799 00012799 00012799     .'...'...'...'..
  c0:	00012799 00012799 00012799 00012799     .'...'...'...'..
  d0:	00012799 00012799 00012799 00012799     .'...'...'...'..
  e0:	00012799 00012799 00012799 00012799     .'...'...'...'..
  f0:	00012799 00012799 00012799 00012799     .'...'...'...'..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x106>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xf2>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_IDLE_STACK_SIZE+0x9c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x3c>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x24>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x158>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x24>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x86>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x82>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x9c>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xea>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xd2>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x166>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x12a>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x148>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x50>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x50>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x50>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_BT_HCI_TX_STACK_SIZE+0x54>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb0>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_BT_HCI_TX_STACK_SIZE+0x3e>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_BT_HCI_TX_STACK_SIZE+0x7e>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_BT_HCI_TX_STACK_SIZE+0x9a>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_BT_HCI_TX_STACK_SIZE+0x70>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_BT_HCI_TX_STACK_SIZE+0x70>
     89a:	e712      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>

0000089c <__aeabi_d2f>:
     89c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     8a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     8a4:	bf24      	itt	cs
     8a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     8aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     8ae:	d90d      	bls.n	8cc <__aeabi_d2f+0x30>
     8b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     8b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     8b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     8bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     8c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     8c4:	bf08      	it	eq
     8c6:	f020 0001 	biceq.w	r0, r0, #1
     8ca:	4770      	bx	lr
     8cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     8d0:	d121      	bne.n	916 <__aeabi_d2f+0x7a>
     8d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     8d6:	bfbc      	itt	lt
     8d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     8dc:	4770      	bxlt	lr
     8de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     8e6:	f1c2 0218 	rsb	r2, r2, #24
     8ea:	f1c2 0c20 	rsb	ip, r2, #32
     8ee:	fa10 f30c 	lsls.w	r3, r0, ip
     8f2:	fa20 f002 	lsr.w	r0, r0, r2
     8f6:	bf18      	it	ne
     8f8:	f040 0001 	orrne.w	r0, r0, #1
     8fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     900:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     904:	fa03 fc0c 	lsl.w	ip, r3, ip
     908:	ea40 000c 	orr.w	r0, r0, ip
     90c:	fa23 f302 	lsr.w	r3, r3, r2
     910:	ea4f 0343 	mov.w	r3, r3, lsl #1
     914:	e7cc      	b.n	8b0 <__aeabi_d2f+0x14>
     916:	ea7f 5362 	mvns.w	r3, r2, asr #21
     91a:	d107      	bne.n	92c <__aeabi_d2f+0x90>
     91c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     920:	bf1e      	ittt	ne
     922:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     926:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     92a:	4770      	bxne	lr
     92c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     930:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     934:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     938:	4770      	bx	lr
     93a:	bf00      	nop

0000093c <__aeabi_frsub>:
     93c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     940:	e002      	b.n	948 <__addsf3>
     942:	bf00      	nop

00000944 <__aeabi_fsub>:
     944:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000948 <__addsf3>:
     948:	0042      	lsls	r2, r0, #1
     94a:	bf1f      	itttt	ne
     94c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     950:	ea92 0f03 	teqne	r2, r3
     954:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     958:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     95c:	d06a      	beq.n	a34 <__addsf3+0xec>
     95e:	ea4f 6212 	mov.w	r2, r2, lsr #24
     962:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     966:	bfc1      	itttt	gt
     968:	18d2      	addgt	r2, r2, r3
     96a:	4041      	eorgt	r1, r0
     96c:	4048      	eorgt	r0, r1
     96e:	4041      	eorgt	r1, r0
     970:	bfb8      	it	lt
     972:	425b      	neglt	r3, r3
     974:	2b19      	cmp	r3, #25
     976:	bf88      	it	hi
     978:	4770      	bxhi	lr
     97a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     97e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     982:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     986:	bf18      	it	ne
     988:	4240      	negne	r0, r0
     98a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     98e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     992:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     996:	bf18      	it	ne
     998:	4249      	negne	r1, r1
     99a:	ea92 0f03 	teq	r2, r3
     99e:	d03f      	beq.n	a20 <__addsf3+0xd8>
     9a0:	f1a2 0201 	sub.w	r2, r2, #1
     9a4:	fa41 fc03 	asr.w	ip, r1, r3
     9a8:	eb10 000c 	adds.w	r0, r0, ip
     9ac:	f1c3 0320 	rsb	r3, r3, #32
     9b0:	fa01 f103 	lsl.w	r1, r1, r3
     9b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     9b8:	d502      	bpl.n	9c0 <__addsf3+0x78>
     9ba:	4249      	negs	r1, r1
     9bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     9c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     9c4:	d313      	bcc.n	9ee <__addsf3+0xa6>
     9c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     9ca:	d306      	bcc.n	9da <__addsf3+0x92>
     9cc:	0840      	lsrs	r0, r0, #1
     9ce:	ea4f 0131 	mov.w	r1, r1, rrx
     9d2:	f102 0201 	add.w	r2, r2, #1
     9d6:	2afe      	cmp	r2, #254	; 0xfe
     9d8:	d251      	bcs.n	a7e <__addsf3+0x136>
     9da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     9de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     9e2:	bf08      	it	eq
     9e4:	f020 0001 	biceq.w	r0, r0, #1
     9e8:	ea40 0003 	orr.w	r0, r0, r3
     9ec:	4770      	bx	lr
     9ee:	0049      	lsls	r1, r1, #1
     9f0:	eb40 0000 	adc.w	r0, r0, r0
     9f4:	3a01      	subs	r2, #1
     9f6:	bf28      	it	cs
     9f8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     9fc:	d2ed      	bcs.n	9da <__addsf3+0x92>
     9fe:	fab0 fc80 	clz	ip, r0
     a02:	f1ac 0c08 	sub.w	ip, ip, #8
     a06:	ebb2 020c 	subs.w	r2, r2, ip
     a0a:	fa00 f00c 	lsl.w	r0, r0, ip
     a0e:	bfaa      	itet	ge
     a10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     a14:	4252      	neglt	r2, r2
     a16:	4318      	orrge	r0, r3
     a18:	bfbc      	itt	lt
     a1a:	40d0      	lsrlt	r0, r2
     a1c:	4318      	orrlt	r0, r3
     a1e:	4770      	bx	lr
     a20:	f092 0f00 	teq	r2, #0
     a24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     a28:	bf06      	itte	eq
     a2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     a2e:	3201      	addeq	r2, #1
     a30:	3b01      	subne	r3, #1
     a32:	e7b5      	b.n	9a0 <__addsf3+0x58>
     a34:	ea4f 0341 	mov.w	r3, r1, lsl #1
     a38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     a3c:	bf18      	it	ne
     a3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     a42:	d021      	beq.n	a88 <__addsf3+0x140>
     a44:	ea92 0f03 	teq	r2, r3
     a48:	d004      	beq.n	a54 <__addsf3+0x10c>
     a4a:	f092 0f00 	teq	r2, #0
     a4e:	bf08      	it	eq
     a50:	4608      	moveq	r0, r1
     a52:	4770      	bx	lr
     a54:	ea90 0f01 	teq	r0, r1
     a58:	bf1c      	itt	ne
     a5a:	2000      	movne	r0, #0
     a5c:	4770      	bxne	lr
     a5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     a62:	d104      	bne.n	a6e <__addsf3+0x126>
     a64:	0040      	lsls	r0, r0, #1
     a66:	bf28      	it	cs
     a68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     a6c:	4770      	bx	lr
     a6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     a72:	bf3c      	itt	cc
     a74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     a78:	4770      	bxcc	lr
     a7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     a7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     a82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a86:	4770      	bx	lr
     a88:	ea7f 6222 	mvns.w	r2, r2, asr #24
     a8c:	bf16      	itet	ne
     a8e:	4608      	movne	r0, r1
     a90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     a94:	4601      	movne	r1, r0
     a96:	0242      	lsls	r2, r0, #9
     a98:	bf06      	itte	eq
     a9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     a9e:	ea90 0f01 	teqeq	r0, r1
     aa2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     aa6:	4770      	bx	lr

00000aa8 <__aeabi_ui2f>:
     aa8:	f04f 0300 	mov.w	r3, #0
     aac:	e004      	b.n	ab8 <__aeabi_i2f+0x8>
     aae:	bf00      	nop

00000ab0 <__aeabi_i2f>:
     ab0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     ab4:	bf48      	it	mi
     ab6:	4240      	negmi	r0, r0
     ab8:	ea5f 0c00 	movs.w	ip, r0
     abc:	bf08      	it	eq
     abe:	4770      	bxeq	lr
     ac0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     ac4:	4601      	mov	r1, r0
     ac6:	f04f 0000 	mov.w	r0, #0
     aca:	e01c      	b.n	b06 <__aeabi_l2f+0x2a>

00000acc <__aeabi_ul2f>:
     acc:	ea50 0201 	orrs.w	r2, r0, r1
     ad0:	bf08      	it	eq
     ad2:	4770      	bxeq	lr
     ad4:	f04f 0300 	mov.w	r3, #0
     ad8:	e00a      	b.n	af0 <__aeabi_l2f+0x14>
     ada:	bf00      	nop

00000adc <__aeabi_l2f>:
     adc:	ea50 0201 	orrs.w	r2, r0, r1
     ae0:	bf08      	it	eq
     ae2:	4770      	bxeq	lr
     ae4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     ae8:	d502      	bpl.n	af0 <__aeabi_l2f+0x14>
     aea:	4240      	negs	r0, r0
     aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     af0:	ea5f 0c01 	movs.w	ip, r1
     af4:	bf02      	ittt	eq
     af6:	4684      	moveq	ip, r0
     af8:	4601      	moveq	r1, r0
     afa:	2000      	moveq	r0, #0
     afc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     b00:	bf08      	it	eq
     b02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     b06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     b0a:	fabc f28c 	clz	r2, ip
     b0e:	3a08      	subs	r2, #8
     b10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     b14:	db10      	blt.n	b38 <__aeabi_l2f+0x5c>
     b16:	fa01 fc02 	lsl.w	ip, r1, r2
     b1a:	4463      	add	r3, ip
     b1c:	fa00 fc02 	lsl.w	ip, r0, r2
     b20:	f1c2 0220 	rsb	r2, r2, #32
     b24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     b28:	fa20 f202 	lsr.w	r2, r0, r2
     b2c:	eb43 0002 	adc.w	r0, r3, r2
     b30:	bf08      	it	eq
     b32:	f020 0001 	biceq.w	r0, r0, #1
     b36:	4770      	bx	lr
     b38:	f102 0220 	add.w	r2, r2, #32
     b3c:	fa01 fc02 	lsl.w	ip, r1, r2
     b40:	f1c2 0220 	rsb	r2, r2, #32
     b44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     b48:	fa21 f202 	lsr.w	r2, r1, r2
     b4c:	eb43 0002 	adc.w	r0, r3, r2
     b50:	bf08      	it	eq
     b52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     b56:	4770      	bx	lr

00000b58 <__aeabi_fmul>:
     b58:	f04f 0cff 	mov.w	ip, #255	; 0xff
     b5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     b60:	bf1e      	ittt	ne
     b62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     b66:	ea92 0f0c 	teqne	r2, ip
     b6a:	ea93 0f0c 	teqne	r3, ip
     b6e:	d06f      	beq.n	c50 <__aeabi_fmul+0xf8>
     b70:	441a      	add	r2, r3
     b72:	ea80 0c01 	eor.w	ip, r0, r1
     b76:	0240      	lsls	r0, r0, #9
     b78:	bf18      	it	ne
     b7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     b7e:	d01e      	beq.n	bbe <__aeabi_fmul+0x66>
     b80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     b84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     b88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     b8c:	fba0 3101 	umull	r3, r1, r0, r1
     b90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     b94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     b98:	bf3e      	ittt	cc
     b9a:	0049      	lslcc	r1, r1, #1
     b9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     ba0:	005b      	lslcc	r3, r3, #1
     ba2:	ea40 0001 	orr.w	r0, r0, r1
     ba6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     baa:	2afd      	cmp	r2, #253	; 0xfd
     bac:	d81d      	bhi.n	bea <__aeabi_fmul+0x92>
     bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     bb2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     bb6:	bf08      	it	eq
     bb8:	f020 0001 	biceq.w	r0, r0, #1
     bbc:	4770      	bx	lr
     bbe:	f090 0f00 	teq	r0, #0
     bc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     bc6:	bf08      	it	eq
     bc8:	0249      	lsleq	r1, r1, #9
     bca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     bce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     bd2:	3a7f      	subs	r2, #127	; 0x7f
     bd4:	bfc2      	ittt	gt
     bd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     bda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     bde:	4770      	bxgt	lr
     be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     be4:	f04f 0300 	mov.w	r3, #0
     be8:	3a01      	subs	r2, #1
     bea:	dc5d      	bgt.n	ca8 <__aeabi_fmul+0x150>
     bec:	f112 0f19 	cmn.w	r2, #25
     bf0:	bfdc      	itt	le
     bf2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     bf6:	4770      	bxle	lr
     bf8:	f1c2 0200 	rsb	r2, r2, #0
     bfc:	0041      	lsls	r1, r0, #1
     bfe:	fa21 f102 	lsr.w	r1, r1, r2
     c02:	f1c2 0220 	rsb	r2, r2, #32
     c06:	fa00 fc02 	lsl.w	ip, r0, r2
     c0a:	ea5f 0031 	movs.w	r0, r1, rrx
     c0e:	f140 0000 	adc.w	r0, r0, #0
     c12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     c16:	bf08      	it	eq
     c18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     c1c:	4770      	bx	lr
     c1e:	f092 0f00 	teq	r2, #0
     c22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     c26:	bf02      	ittt	eq
     c28:	0040      	lsleq	r0, r0, #1
     c2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     c2e:	3a01      	subeq	r2, #1
     c30:	d0f9      	beq.n	c26 <__aeabi_fmul+0xce>
     c32:	ea40 000c 	orr.w	r0, r0, ip
     c36:	f093 0f00 	teq	r3, #0
     c3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     c3e:	bf02      	ittt	eq
     c40:	0049      	lsleq	r1, r1, #1
     c42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     c46:	3b01      	subeq	r3, #1
     c48:	d0f9      	beq.n	c3e <__aeabi_fmul+0xe6>
     c4a:	ea41 010c 	orr.w	r1, r1, ip
     c4e:	e78f      	b.n	b70 <__aeabi_fmul+0x18>
     c50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     c54:	ea92 0f0c 	teq	r2, ip
     c58:	bf18      	it	ne
     c5a:	ea93 0f0c 	teqne	r3, ip
     c5e:	d00a      	beq.n	c76 <__aeabi_fmul+0x11e>
     c60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     c64:	bf18      	it	ne
     c66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     c6a:	d1d8      	bne.n	c1e <__aeabi_fmul+0xc6>
     c6c:	ea80 0001 	eor.w	r0, r0, r1
     c70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     c74:	4770      	bx	lr
     c76:	f090 0f00 	teq	r0, #0
     c7a:	bf17      	itett	ne
     c7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     c80:	4608      	moveq	r0, r1
     c82:	f091 0f00 	teqne	r1, #0
     c86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     c8a:	d014      	beq.n	cb6 <__aeabi_fmul+0x15e>
     c8c:	ea92 0f0c 	teq	r2, ip
     c90:	d101      	bne.n	c96 <__aeabi_fmul+0x13e>
     c92:	0242      	lsls	r2, r0, #9
     c94:	d10f      	bne.n	cb6 <__aeabi_fmul+0x15e>
     c96:	ea93 0f0c 	teq	r3, ip
     c9a:	d103      	bne.n	ca4 <__aeabi_fmul+0x14c>
     c9c:	024b      	lsls	r3, r1, #9
     c9e:	bf18      	it	ne
     ca0:	4608      	movne	r0, r1
     ca2:	d108      	bne.n	cb6 <__aeabi_fmul+0x15e>
     ca4:	ea80 0001 	eor.w	r0, r0, r1
     ca8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     cb4:	4770      	bx	lr
     cb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     cba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     cbe:	4770      	bx	lr

00000cc0 <__aeabi_fdiv>:
     cc0:	f04f 0cff 	mov.w	ip, #255	; 0xff
     cc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     cc8:	bf1e      	ittt	ne
     cca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     cce:	ea92 0f0c 	teqne	r2, ip
     cd2:	ea93 0f0c 	teqne	r3, ip
     cd6:	d069      	beq.n	dac <__aeabi_fdiv+0xec>
     cd8:	eba2 0203 	sub.w	r2, r2, r3
     cdc:	ea80 0c01 	eor.w	ip, r0, r1
     ce0:	0249      	lsls	r1, r1, #9
     ce2:	ea4f 2040 	mov.w	r0, r0, lsl #9
     ce6:	d037      	beq.n	d58 <__aeabi_fdiv+0x98>
     ce8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     cec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     cf0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     cf4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     cf8:	428b      	cmp	r3, r1
     cfa:	bf38      	it	cc
     cfc:	005b      	lslcc	r3, r3, #1
     cfe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     d02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     d06:	428b      	cmp	r3, r1
     d08:	bf24      	itt	cs
     d0a:	1a5b      	subcs	r3, r3, r1
     d0c:	ea40 000c 	orrcs.w	r0, r0, ip
     d10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     d14:	bf24      	itt	cs
     d16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     d1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     d1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     d22:	bf24      	itt	cs
     d24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     d28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     d2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     d30:	bf24      	itt	cs
     d32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     d36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     d3a:	011b      	lsls	r3, r3, #4
     d3c:	bf18      	it	ne
     d3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     d42:	d1e0      	bne.n	d06 <__aeabi_fdiv+0x46>
     d44:	2afd      	cmp	r2, #253	; 0xfd
     d46:	f63f af50 	bhi.w	bea <__aeabi_fmul+0x92>
     d4a:	428b      	cmp	r3, r1
     d4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     d50:	bf08      	it	eq
     d52:	f020 0001 	biceq.w	r0, r0, #1
     d56:	4770      	bx	lr
     d58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     d5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     d60:	327f      	adds	r2, #127	; 0x7f
     d62:	bfc2      	ittt	gt
     d64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     d68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     d6c:	4770      	bxgt	lr
     d6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     d72:	f04f 0300 	mov.w	r3, #0
     d76:	3a01      	subs	r2, #1
     d78:	e737      	b.n	bea <__aeabi_fmul+0x92>
     d7a:	f092 0f00 	teq	r2, #0
     d7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     d82:	bf02      	ittt	eq
     d84:	0040      	lsleq	r0, r0, #1
     d86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     d8a:	3a01      	subeq	r2, #1
     d8c:	d0f9      	beq.n	d82 <__aeabi_fdiv+0xc2>
     d8e:	ea40 000c 	orr.w	r0, r0, ip
     d92:	f093 0f00 	teq	r3, #0
     d96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     d9a:	bf02      	ittt	eq
     d9c:	0049      	lsleq	r1, r1, #1
     d9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     da2:	3b01      	subeq	r3, #1
     da4:	d0f9      	beq.n	d9a <__aeabi_fdiv+0xda>
     da6:	ea41 010c 	orr.w	r1, r1, ip
     daa:	e795      	b.n	cd8 <__aeabi_fdiv+0x18>
     dac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     db0:	ea92 0f0c 	teq	r2, ip
     db4:	d108      	bne.n	dc8 <__aeabi_fdiv+0x108>
     db6:	0242      	lsls	r2, r0, #9
     db8:	f47f af7d 	bne.w	cb6 <__aeabi_fmul+0x15e>
     dbc:	ea93 0f0c 	teq	r3, ip
     dc0:	f47f af70 	bne.w	ca4 <__aeabi_fmul+0x14c>
     dc4:	4608      	mov	r0, r1
     dc6:	e776      	b.n	cb6 <__aeabi_fmul+0x15e>
     dc8:	ea93 0f0c 	teq	r3, ip
     dcc:	d104      	bne.n	dd8 <__aeabi_fdiv+0x118>
     dce:	024b      	lsls	r3, r1, #9
     dd0:	f43f af4c 	beq.w	c6c <__aeabi_fmul+0x114>
     dd4:	4608      	mov	r0, r1
     dd6:	e76e      	b.n	cb6 <__aeabi_fmul+0x15e>
     dd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     ddc:	bf18      	it	ne
     dde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     de2:	d1ca      	bne.n	d7a <__aeabi_fdiv+0xba>
     de4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     de8:	f47f af5c 	bne.w	ca4 <__aeabi_fmul+0x14c>
     dec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     df0:	f47f af3c 	bne.w	c6c <__aeabi_fmul+0x114>
     df4:	e75f      	b.n	cb6 <__aeabi_fmul+0x15e>
     df6:	bf00      	nop

00000df8 <__aeabi_f2uiz>:
     df8:	0042      	lsls	r2, r0, #1
     dfa:	d20e      	bcs.n	e1a <__aeabi_f2uiz+0x22>
     dfc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     e00:	d30b      	bcc.n	e1a <__aeabi_f2uiz+0x22>
     e02:	f04f 039e 	mov.w	r3, #158	; 0x9e
     e06:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     e0a:	d409      	bmi.n	e20 <__aeabi_f2uiz+0x28>
     e0c:	ea4f 2300 	mov.w	r3, r0, lsl #8
     e10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     e14:	fa23 f002 	lsr.w	r0, r3, r2
     e18:	4770      	bx	lr
     e1a:	f04f 0000 	mov.w	r0, #0
     e1e:	4770      	bx	lr
     e20:	f112 0f61 	cmn.w	r2, #97	; 0x61
     e24:	d101      	bne.n	e2a <__aeabi_f2uiz+0x32>
     e26:	0242      	lsls	r2, r0, #9
     e28:	d102      	bne.n	e30 <__aeabi_f2uiz+0x38>
     e2a:	f04f 30ff 	mov.w	r0, #4294967295
     e2e:	4770      	bx	lr
     e30:	f04f 0000 	mov.w	r0, #0
     e34:	4770      	bx	lr
     e36:	bf00      	nop

00000e38 <__aeabi_uldivmod>:
     e38:	b953      	cbnz	r3, e50 <__aeabi_uldivmod+0x18>
     e3a:	b94a      	cbnz	r2, e50 <__aeabi_uldivmod+0x18>
     e3c:	2900      	cmp	r1, #0
     e3e:	bf08      	it	eq
     e40:	2800      	cmpeq	r0, #0
     e42:	bf1c      	itt	ne
     e44:	f04f 31ff 	movne.w	r1, #4294967295
     e48:	f04f 30ff 	movne.w	r0, #4294967295
     e4c:	f000 b96c 	b.w	1128 <__aeabi_idiv0>
     e50:	f1ad 0c08 	sub.w	ip, sp, #8
     e54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     e58:	f000 f806 	bl	e68 <__udivmoddi4>
     e5c:	f8dd e004 	ldr.w	lr, [sp, #4]
     e60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     e64:	b004      	add	sp, #16
     e66:	4770      	bx	lr

00000e68 <__udivmoddi4>:
     e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     e6c:	9e08      	ldr	r6, [sp, #32]
     e6e:	460d      	mov	r5, r1
     e70:	4604      	mov	r4, r0
     e72:	468e      	mov	lr, r1
     e74:	2b00      	cmp	r3, #0
     e76:	f040 8082 	bne.w	f7e <__udivmoddi4+0x116>
     e7a:	428a      	cmp	r2, r1
     e7c:	4617      	mov	r7, r2
     e7e:	d946      	bls.n	f0e <__udivmoddi4+0xa6>
     e80:	fab2 f282 	clz	r2, r2
     e84:	b14a      	cbz	r2, e9a <__udivmoddi4+0x32>
     e86:	f1c2 0120 	rsb	r1, r2, #32
     e8a:	fa05 f302 	lsl.w	r3, r5, r2
     e8e:	fa20 f101 	lsr.w	r1, r0, r1
     e92:	4097      	lsls	r7, r2
     e94:	ea41 0e03 	orr.w	lr, r1, r3
     e98:	4094      	lsls	r4, r2
     e9a:	ea4f 4817 	mov.w	r8, r7, lsr #16
     e9e:	0c23      	lsrs	r3, r4, #16
     ea0:	fbbe fcf8 	udiv	ip, lr, r8
     ea4:	b2b9      	uxth	r1, r7
     ea6:	fb08 ee1c 	mls	lr, r8, ip, lr
     eaa:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     eae:	fb0c f001 	mul.w	r0, ip, r1
     eb2:	4298      	cmp	r0, r3
     eb4:	d90a      	bls.n	ecc <__udivmoddi4+0x64>
     eb6:	18fb      	adds	r3, r7, r3
     eb8:	f10c 35ff 	add.w	r5, ip, #4294967295
     ebc:	f080 8116 	bcs.w	10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>
     ec0:	4298      	cmp	r0, r3
     ec2:	f240 8113 	bls.w	10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>
     ec6:	f1ac 0c02 	sub.w	ip, ip, #2
     eca:	443b      	add	r3, r7
     ecc:	1a1b      	subs	r3, r3, r0
     ece:	b2a4      	uxth	r4, r4
     ed0:	fbb3 f0f8 	udiv	r0, r3, r8
     ed4:	fb08 3310 	mls	r3, r8, r0, r3
     ed8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     edc:	fb00 f101 	mul.w	r1, r0, r1
     ee0:	42a1      	cmp	r1, r4
     ee2:	d909      	bls.n	ef8 <__udivmoddi4+0x90>
     ee4:	193c      	adds	r4, r7, r4
     ee6:	f100 33ff 	add.w	r3, r0, #4294967295
     eea:	f080 8101 	bcs.w	10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>
     eee:	42a1      	cmp	r1, r4
     ef0:	f240 80fe 	bls.w	10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>
     ef4:	3802      	subs	r0, #2
     ef6:	443c      	add	r4, r7
     ef8:	1a64      	subs	r4, r4, r1
     efa:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     efe:	2100      	movs	r1, #0
     f00:	b11e      	cbz	r6, f0a <__udivmoddi4+0xa2>
     f02:	40d4      	lsrs	r4, r2
     f04:	2300      	movs	r3, #0
     f06:	e9c6 4300 	strd	r4, r3, [r6]
     f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     f0e:	b902      	cbnz	r2, f12 <__udivmoddi4+0xaa>
     f10:	deff      	udf	#255	; 0xff
     f12:	fab2 f282 	clz	r2, r2
     f16:	2a00      	cmp	r2, #0
     f18:	d14f      	bne.n	fba <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x1a>
     f1a:	1bcb      	subs	r3, r1, r7
     f1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     f20:	fa1f f887 	uxth.w	r8, r7
     f24:	2101      	movs	r1, #1
     f26:	fbb3 fcfe 	udiv	ip, r3, lr
     f2a:	0c25      	lsrs	r5, r4, #16
     f2c:	fb0e 331c 	mls	r3, lr, ip, r3
     f30:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     f34:	fb08 f30c 	mul.w	r3, r8, ip
     f38:	42ab      	cmp	r3, r5
     f3a:	d907      	bls.n	f4c <__udivmoddi4+0xe4>
     f3c:	197d      	adds	r5, r7, r5
     f3e:	f10c 30ff 	add.w	r0, ip, #4294967295
     f42:	d202      	bcs.n	f4a <__udivmoddi4+0xe2>
     f44:	42ab      	cmp	r3, r5
     f46:	f200 80e7 	bhi.w	1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>
     f4a:	4684      	mov	ip, r0
     f4c:	1aed      	subs	r5, r5, r3
     f4e:	b2a3      	uxth	r3, r4
     f50:	fbb5 f0fe 	udiv	r0, r5, lr
     f54:	fb0e 5510 	mls	r5, lr, r0, r5
     f58:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     f5c:	fb08 f800 	mul.w	r8, r8, r0
     f60:	45a0      	cmp	r8, r4
     f62:	d907      	bls.n	f74 <__udivmoddi4+0x10c>
     f64:	193c      	adds	r4, r7, r4
     f66:	f100 33ff 	add.w	r3, r0, #4294967295
     f6a:	d202      	bcs.n	f72 <__udivmoddi4+0x10a>
     f6c:	45a0      	cmp	r8, r4
     f6e:	f200 80d7 	bhi.w	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
     f72:	4618      	mov	r0, r3
     f74:	eba4 0408 	sub.w	r4, r4, r8
     f78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     f7c:	e7c0      	b.n	f00 <__udivmoddi4+0x98>
     f7e:	428b      	cmp	r3, r1
     f80:	d908      	bls.n	f94 <__udivmoddi4+0x12c>
     f82:	2e00      	cmp	r6, #0
     f84:	f000 80af 	beq.w	10e6 <CONFIG_FPROTECT_BLOCK_SIZE+0xe6>
     f88:	2100      	movs	r1, #0
     f8a:	e9c6 0500 	strd	r0, r5, [r6]
     f8e:	4608      	mov	r0, r1
     f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     f94:	fab3 f183 	clz	r1, r3
     f98:	2900      	cmp	r1, #0
     f9a:	d14b      	bne.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
     f9c:	42ab      	cmp	r3, r5
     f9e:	d302      	bcc.n	fa6 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x6>
     fa0:	4282      	cmp	r2, r0
     fa2:	f200 80b7 	bhi.w	1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
     fa6:	1a84      	subs	r4, r0, r2
     fa8:	eb65 0303 	sbc.w	r3, r5, r3
     fac:	2001      	movs	r0, #1
     fae:	469e      	mov	lr, r3
     fb0:	2e00      	cmp	r6, #0
     fb2:	d0aa      	beq.n	f0a <__udivmoddi4+0xa2>
     fb4:	e9c6 4e00 	strd	r4, lr, [r6]
     fb8:	e7a7      	b.n	f0a <__udivmoddi4+0xa2>
     fba:	f1c2 0c20 	rsb	ip, r2, #32
     fbe:	fa01 f302 	lsl.w	r3, r1, r2
     fc2:	4097      	lsls	r7, r2
     fc4:	fa20 f00c 	lsr.w	r0, r0, ip
     fc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     fcc:	fa21 fc0c 	lsr.w	ip, r1, ip
     fd0:	4318      	orrs	r0, r3
     fd2:	fbbc f1fe 	udiv	r1, ip, lr
     fd6:	0c05      	lsrs	r5, r0, #16
     fd8:	fb0e cc11 	mls	ip, lr, r1, ip
     fdc:	fa1f f887 	uxth.w	r8, r7
     fe0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     fe4:	fb01 f308 	mul.w	r3, r1, r8
     fe8:	42ab      	cmp	r3, r5
     fea:	fa04 f402 	lsl.w	r4, r4, r2
     fee:	d909      	bls.n	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
     ff0:	197d      	adds	r5, r7, r5
     ff2:	f101 3cff 	add.w	ip, r1, #4294967295
     ff6:	f080 808b 	bcs.w	1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>
     ffa:	42ab      	cmp	r3, r5
     ffc:	f240 8088 	bls.w	1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>
    1000:	3902      	subs	r1, #2
    1002:	443d      	add	r5, r7
    1004:	1aeb      	subs	r3, r5, r3
    1006:	b285      	uxth	r5, r0
    1008:	fbb3 f0fe 	udiv	r0, r3, lr
    100c:	fb0e 3310 	mls	r3, lr, r0, r3
    1010:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1014:	fb00 f308 	mul.w	r3, r0, r8
    1018:	42ab      	cmp	r3, r5
    101a:	d907      	bls.n	102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
    101c:	197d      	adds	r5, r7, r5
    101e:	f100 3cff 	add.w	ip, r0, #4294967295
    1022:	d271      	bcs.n	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
    1024:	42ab      	cmp	r3, r5
    1026:	d96f      	bls.n	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
    1028:	3802      	subs	r0, #2
    102a:	443d      	add	r5, r7
    102c:	1aeb      	subs	r3, r5, r3
    102e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    1032:	e778      	b.n	f26 <__udivmoddi4+0xbe>
    1034:	f1c1 0c20 	rsb	ip, r1, #32
    1038:	408b      	lsls	r3, r1
    103a:	fa22 f70c 	lsr.w	r7, r2, ip
    103e:	431f      	orrs	r7, r3
    1040:	fa20 f40c 	lsr.w	r4, r0, ip
    1044:	fa05 f301 	lsl.w	r3, r5, r1
    1048:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    104c:	fa25 f50c 	lsr.w	r5, r5, ip
    1050:	431c      	orrs	r4, r3
    1052:	0c23      	lsrs	r3, r4, #16
    1054:	fbb5 f9fe 	udiv	r9, r5, lr
    1058:	fa1f f887 	uxth.w	r8, r7
    105c:	fb0e 5519 	mls	r5, lr, r9, r5
    1060:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    1064:	fb09 fa08 	mul.w	sl, r9, r8
    1068:	45aa      	cmp	sl, r5
    106a:	fa02 f201 	lsl.w	r2, r2, r1
    106e:	fa00 f301 	lsl.w	r3, r0, r1
    1072:	d908      	bls.n	1086 <CONFIG_FPROTECT_BLOCK_SIZE+0x86>
    1074:	197d      	adds	r5, r7, r5
    1076:	f109 30ff 	add.w	r0, r9, #4294967295
    107a:	d247      	bcs.n	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
    107c:	45aa      	cmp	sl, r5
    107e:	d945      	bls.n	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
    1080:	f1a9 0902 	sub.w	r9, r9, #2
    1084:	443d      	add	r5, r7
    1086:	eba5 050a 	sub.w	r5, r5, sl
    108a:	b2a4      	uxth	r4, r4
    108c:	fbb5 f0fe 	udiv	r0, r5, lr
    1090:	fb0e 5510 	mls	r5, lr, r0, r5
    1094:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    1098:	fb00 f808 	mul.w	r8, r0, r8
    109c:	45a0      	cmp	r8, r4
    109e:	d907      	bls.n	10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
    10a0:	193c      	adds	r4, r7, r4
    10a2:	f100 35ff 	add.w	r5, r0, #4294967295
    10a6:	d22d      	bcs.n	1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
    10a8:	45a0      	cmp	r8, r4
    10aa:	d92b      	bls.n	1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
    10ac:	3802      	subs	r0, #2
    10ae:	443c      	add	r4, r7
    10b0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    10b4:	eba4 0408 	sub.w	r4, r4, r8
    10b8:	fba0 8902 	umull	r8, r9, r0, r2
    10bc:	454c      	cmp	r4, r9
    10be:	46c6      	mov	lr, r8
    10c0:	464d      	mov	r5, r9
    10c2:	d319      	bcc.n	10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>
    10c4:	d016      	beq.n	10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>
    10c6:	b15e      	cbz	r6, 10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>
    10c8:	ebb3 020e 	subs.w	r2, r3, lr
    10cc:	eb64 0405 	sbc.w	r4, r4, r5
    10d0:	fa04 fc0c 	lsl.w	ip, r4, ip
    10d4:	40ca      	lsrs	r2, r1
    10d6:	ea4c 0202 	orr.w	r2, ip, r2
    10da:	40cc      	lsrs	r4, r1
    10dc:	e9c6 2400 	strd	r2, r4, [r6]
    10e0:	2100      	movs	r1, #0
    10e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    10e6:	4631      	mov	r1, r6
    10e8:	4630      	mov	r0, r6
    10ea:	e70e      	b.n	f0a <__udivmoddi4+0xa2>
    10ec:	46ac      	mov	ip, r5
    10ee:	e6ed      	b.n	ecc <__udivmoddi4+0x64>
    10f0:	4618      	mov	r0, r3
    10f2:	e701      	b.n	ef8 <__udivmoddi4+0x90>
    10f4:	4543      	cmp	r3, r8
    10f6:	d2e6      	bcs.n	10c6 <CONFIG_FPROTECT_BLOCK_SIZE+0xc6>
    10f8:	ebb8 0e02 	subs.w	lr, r8, r2
    10fc:	eb69 0507 	sbc.w	r5, r9, r7
    1100:	3801      	subs	r0, #1
    1102:	e7e0      	b.n	10c6 <CONFIG_FPROTECT_BLOCK_SIZE+0xc6>
    1104:	4628      	mov	r0, r5
    1106:	e7d3      	b.n	10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
    1108:	4660      	mov	r0, ip
    110a:	e78f      	b.n	102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
    110c:	4681      	mov	r9, r0
    110e:	e7ba      	b.n	1086 <CONFIG_FPROTECT_BLOCK_SIZE+0x86>
    1110:	4661      	mov	r1, ip
    1112:	e777      	b.n	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
    1114:	4608      	mov	r0, r1
    1116:	e74b      	b.n	fb0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x10>
    1118:	f1ac 0c02 	sub.w	ip, ip, #2
    111c:	443d      	add	r5, r7
    111e:	e715      	b.n	f4c <__udivmoddi4+0xe4>
    1120:	3802      	subs	r0, #2
    1122:	443c      	add	r4, r7
    1124:	e726      	b.n	f74 <__udivmoddi4+0x10c>
    1126:	bf00      	nop

00001128 <__aeabi_idiv0>:
    1128:	4770      	bx	lr
    112a:	bf00      	nop

0000112c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
    112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    112e:	4615      	mov	r5, r2
    1130:	4a0a      	ldr	r2, [pc, #40]	; (115c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x30>)
    1132:	461c      	mov	r4, r3
    1134:	6856      	ldr	r6, [r2, #4]
    1136:	b12e      	cbz	r6, 1144 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
    1138:	b001      	add	sp, #4
    113a:	462a      	mov	r2, r5
    113c:	46b4      	mov	ip, r6
    113e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1142:	4760      	bx	ip
    1144:	2000      	movs	r0, #0
    1146:	f88d 0000 	strb.w	r0, [sp]
    114a:	4668      	mov	r0, sp
    114c:	f00b f844 	bl	c1d8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
    1150:	f89d 0000 	ldrb.w	r0, [sp]
    1154:	1a28      	subs	r0, r5, r0
    1156:	7020      	strb	r0, [r4, #0]
    1158:	2000      	movs	r0, #0
    115a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    115c:	20000000 	.word	0x20000000

00001160 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    1160:	4801      	ldr	r0, [pc, #4]	; (1168 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    1162:	7800      	ldrb	r0, [r0, #0]
    1164:	4770      	bx	lr
    1166:	0000      	.short	0x0000
    1168:	20000008 	.word	0x20000008

0000116c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    116c:	4905      	ldr	r1, [pc, #20]	; (1184 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    116e:	780a      	ldrb	r2, [r1, #0]
    1170:	4290      	cmp	r0, r2
    1172:	d301      	bcc.n	1178 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    1174:	2000      	movs	r0, #0
    1176:	4770      	bx	lr
    1178:	6849      	ldr	r1, [r1, #4]
    117a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    117e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1182:	4770      	bx	lr
    1184:	20000008 	.word	0x20000008
    1188:	b570      	push	{r4, r5, r6, lr}
    118a:	4605      	mov	r5, r0
    118c:	2a20      	cmp	r2, #32
    118e:	d027      	beq.n	11e0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
    1190:	4819      	ldr	r0, [pc, #100]	; (11f8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
    1192:	4c1a      	ldr	r4, [pc, #104]	; (11fc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
    1194:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    1198:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    119c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    11a0:	2920      	cmp	r1, #32
    11a2:	d022      	beq.n	11ea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
    11a4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    11a8:	7840      	ldrb	r0, [r0, #1]
    11aa:	784c      	ldrb	r4, [r1, #1]
    11ac:	7048      	strb	r0, [r1, #1]
    11ae:	4620      	mov	r0, r4
    11b0:	4601      	mov	r1, r0
    11b2:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    11b6:	4291      	cmp	r1, r2
    11b8:	7005      	strb	r5, [r0, #0]
    11ba:	7840      	ldrb	r0, [r0, #1]
    11bc:	d1f8      	bne.n	11b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
    11be:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    11c2:	2a20      	cmp	r2, #32
    11c4:	bf1a      	itte	ne
    11c6:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    11ca:	7054      	strbne	r4, [r2, #1]
    11cc:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    11d0:	2220      	movs	r2, #32
    11d2:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    11d6:	f88c 2001 	strb.w	r2, [ip, #1]
    11da:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    11de:	bd70      	pop	{r4, r5, r6, pc}
    11e0:	f240 2191 	movw	r1, #657	; 0x291
    11e4:	2070      	movs	r0, #112	; 0x70
    11e6:	f003 f8e5 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11ea:	f893 4020 	ldrb.w	r4, [r3, #32]
    11ee:	7840      	ldrb	r0, [r0, #1]
    11f0:	f883 0020 	strb.w	r0, [r3, #32]
    11f4:	e7db      	b.n	11ae <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
    11f6:	0000      	.short	0x0000
    11f8:	20000dec 	.word	0x20000dec
    11fc:	20000e6c 	.word	0x20000e6c
    1200:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1204:	460c      	mov	r4, r1
    1206:	8949      	ldrh	r1, [r1, #10]
    1208:	b087      	sub	sp, #28
    120a:	f501 61e1 	add.w	r1, r1, #1800	; 0x708
    120e:	4615      	mov	r5, r2
    1210:	4281      	cmp	r1, r0
    1212:	f200 80da 	bhi.w	13ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x42>
    1216:	aa05      	add	r2, sp, #20
    1218:	a902      	add	r1, sp, #8
    121a:	f002 f89f 	bl	335c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    121e:	9802      	ldr	r0, [sp, #8]
    1220:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    1222:	4428      	add	r0, r5
    1224:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1228:	9004      	str	r0, [sp, #16]
    122a:	48a9      	ldr	r0, [pc, #676]	; (14d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x148>)
    122c:	4ea9      	ldr	r6, [pc, #676]	; (14d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14c>)
    122e:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    1232:	9003      	str	r0, [sp, #12]
    1234:	f890 5020 	ldrb.w	r5, [r0, #32]
    1238:	2020      	movs	r0, #32
    123a:	46e9      	mov	r9, sp
    123c:	f10d 0804 	add.w	r8, sp, #4
    1240:	f88d 0000 	strb.w	r0, [sp]
    1244:	f506 7a40 	add.w	sl, r6, #768	; 0x300
    1248:	2d20      	cmp	r5, #32
    124a:	bf18      	it	ne
    124c:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
    1250:	d026      	beq.n	12a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    1252:	bf00      	nop
    1254:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1258:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    125c:	6821      	ldr	r1, [r4, #0]
    125e:	68c2      	ldr	r2, [r0, #12]
    1260:	1a89      	subs	r1, r1, r2
    1262:	0209      	lsls	r1, r1, #8
    1264:	17ca      	asrs	r2, r1, #31
    1266:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    126a:	3008      	adds	r0, #8
    126c:	1209      	asrs	r1, r1, #8
    126e:	d417      	bmi.n	12a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    1270:	8961      	ldrh	r1, [r4, #10]
    1272:	b171      	cbz	r1, 1292 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    1274:	8941      	ldrh	r1, [r0, #10]
    1276:	b961      	cbnz	r1, 1292 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    1278:	f000 fdb4 	bl	1de4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    127c:	f002 f852 	bl	3324 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1280:	6821      	ldr	r1, [r4, #0]
    1282:	1a08      	subs	r0, r1, r0
    1284:	0200      	lsls	r0, r0, #8
    1286:	17c1      	asrs	r1, r0, #31
    1288:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    128c:	1200      	asrs	r0, r0, #8
    128e:	2833      	cmp	r0, #51	; 0x33
    1290:	db06      	blt.n	12a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    1292:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1296:	f889 5000 	strb.w	r5, [r9]
    129a:	7845      	ldrb	r5, [r0, #1]
    129c:	2d20      	cmp	r5, #32
    129e:	d1d9      	bne.n	1254 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe8>
    12a0:	f899 0000 	ldrb.w	r0, [r9]
    12a4:	f888 0000 	strb.w	r0, [r8]
    12a8:	46a1      	mov	r9, r4
    12aa:	2d20      	cmp	r5, #32
    12ac:	bf1c      	itt	ne
    12ae:	488a      	ldrne	r0, [pc, #552]	; (14d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x150>)
    12b0:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    12b4:	f000 8108 	beq.w	14c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x140>
    12b8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    12bc:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
    12c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
    12c4:	f8da 2008 	ldr.w	r2, [sl, #8]
    12c8:	4648      	mov	r0, r9
    12ca:	1a51      	subs	r1, r2, r1
    12cc:	0209      	lsls	r1, r1, #8
    12ce:	17ca      	asrs	r2, r1, #31
    12d0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    12d4:	f10a 0708 	add.w	r7, sl, #8
    12d8:	1209      	asrs	r1, r1, #8
    12da:	d415      	bmi.n	1308 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x19c>
    12dc:	8979      	ldrh	r1, [r7, #10]
    12de:	2900      	cmp	r1, #0
    12e0:	f000 80f2 	beq.w	14c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x140>
    12e4:	8941      	ldrh	r1, [r0, #10]
    12e6:	2900      	cmp	r1, #0
    12e8:	f040 80ee 	bne.w	14c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x140>
    12ec:	f000 fd7a 	bl	1de4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    12f0:	f002 f818 	bl	3324 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    12f4:	6839      	ldr	r1, [r7, #0]
    12f6:	1a08      	subs	r0, r1, r0
    12f8:	0200      	lsls	r0, r0, #8
    12fa:	17c1      	asrs	r1, r0, #31
    12fc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1300:	1200      	asrs	r0, r0, #8
    1302:	2833      	cmp	r0, #51	; 0x33
    1304:	f280 80e0 	bge.w	14c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x140>
    1308:	f888 5000 	strb.w	r5, [r8]
    130c:	f89a 1014 	ldrb.w	r1, [sl, #20]
    1310:	f899 000c 	ldrb.w	r0, [r9, #12]
    1314:	4281      	cmp	r1, r0
    1316:	d906      	bls.n	1326 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    1318:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    131c:	7845      	ldrb	r5, [r0, #1]
    131e:	2d20      	cmp	r5, #32
    1320:	d1ca      	bne.n	12b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14c>
    1322:	f000 b8d1 	b.w	14c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x140>
    1326:	f89d 0004 	ldrb.w	r0, [sp, #4]
    132a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    132e:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
    1332:	8a68      	ldrh	r0, [r5, #18]
    1334:	68ef      	ldr	r7, [r5, #12]
    1336:	2800      	cmp	r0, #0
    1338:	d13f      	bne.n	13ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x32>
    133a:	8960      	ldrh	r0, [r4, #10]
    133c:	b3e8      	cbz	r0, 13ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x32>
    133e:	68a8      	ldr	r0, [r5, #8]
    1340:	f00a ff75 	bl	c22e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1344:	8a69      	ldrh	r1, [r5, #18]
    1346:	7c2a      	ldrb	r2, [r5, #16]
    1348:	4411      	add	r1, r2
    134a:	1c49      	adds	r1, r1, #1
    134c:	4a63      	ldr	r2, [pc, #396]	; (14dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x154>)
    134e:	1843      	adds	r3, r0, r1
    1350:	4290      	cmp	r0, r2
    1352:	d904      	bls.n	135e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f2>
    1354:	f240 6116 	movw	r1, #1558	; 0x616
    1358:	2070      	movs	r0, #112	; 0x70
    135a:	f003 f82b 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    135e:	4860      	ldr	r0, [pc, #384]	; (14e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x158>)
    1360:	4281      	cmp	r1, r0
    1362:	dd04      	ble.n	136e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x202>
    1364:	f240 6117 	movw	r1, #1559	; 0x617
    1368:	2070      	movs	r0, #112	; 0x70
    136a:	f003 f823 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    136e:	485d      	ldr	r0, [pc, #372]	; (14e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15c>)
    1370:	4281      	cmp	r1, r0
    1372:	da04      	bge.n	137e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x212>
    1374:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    1378:	2070      	movs	r0, #112	; 0x70
    137a:	f003 f81b 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    137e:	485a      	ldr	r0, [pc, #360]	; (14e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x160>)
    1380:	4298      	cmp	r0, r3
    1382:	bfdc      	itt	le
    1384:	f503 03f7 	addle.w	r3, r3, #8093696	; 0x7b8000
    1388:	f1a3 53f8 	suble.w	r3, r3, #520093696	; 0x1f000000
    138c:	dd05      	ble.n	139a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12>
    138e:	2b00      	cmp	r3, #0
    1390:	bfbc      	itt	lt
    1392:	f5a3 03f7 	sublt.w	r3, r3, #8093696	; 0x7b8000
    1396:	f103 53f8 	addlt.w	r3, r3, #520093696	; 0x1f000000
    139a:	4618      	mov	r0, r3
    139c:	f001 ffc2 	bl	3324 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    13a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    13a4:	1a39      	subs	r1, r7, r0
    13a6:	0209      	lsls	r1, r1, #8
    13a8:	17ca      	asrs	r2, r1, #31
    13aa:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    13ae:	1209      	asrs	r1, r1, #8
    13b0:	2933      	cmp	r1, #51	; 0x33
    13b2:	bfbc      	itt	lt
    13b4:	3033      	addlt	r0, #51	; 0x33
    13b6:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
    13ba:	9804      	ldr	r0, [sp, #16]
    13bc:	1a38      	subs	r0, r7, r0
    13be:	0200      	lsls	r0, r0, #8
    13c0:	17c1      	asrs	r1, r0, #31
    13c2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    13c6:	1200      	asrs	r0, r0, #8
    13c8:	d403      	bmi.n	13d2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a>
    13ca:	b00b      	add	sp, #44	; 0x2c
    13cc:	2000      	movs	r0, #0
    13ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13d2:	e9d4 1000 	ldrd	r1, r0, [r4]
    13d6:	1a40      	subs	r0, r0, r1
    13d8:	4438      	add	r0, r7
    13da:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
    13de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    13e2:	e9c4 1000 	strd	r1, r0, [r4]
    13e6:	9803      	ldr	r0, [sp, #12]
    13e8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    13ec:	466f      	mov	r7, sp
    13ee:	f890 5020 	ldrb.w	r5, [r0, #32]
    13f2:	2020      	movs	r0, #32
    13f4:	f10d 0a04 	add.w	sl, sp, #4
    13f8:	f88d 0000 	strb.w	r0, [sp]
    13fc:	2d20      	cmp	r5, #32
    13fe:	bf1c      	itt	ne
    1400:	4835      	ldrne	r0, [pc, #212]	; (14d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x150>)
    1402:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
    1406:	d024      	beq.n	1452 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xca>
    1408:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    140c:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1410:	6822      	ldr	r2, [r4, #0]
    1412:	68c1      	ldr	r1, [r0, #12]
    1414:	1a51      	subs	r1, r2, r1
    1416:	0209      	lsls	r1, r1, #8
    1418:	17ca      	asrs	r2, r1, #31
    141a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    141e:	3008      	adds	r0, #8
    1420:	1209      	asrs	r1, r1, #8
    1422:	d416      	bmi.n	1452 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xca>
    1424:	8961      	ldrh	r1, [r4, #10]
    1426:	b171      	cbz	r1, 1446 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbe>
    1428:	8941      	ldrh	r1, [r0, #10]
    142a:	b961      	cbnz	r1, 1446 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbe>
    142c:	f000 fcda 	bl	1de4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1430:	f001 ff78 	bl	3324 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1434:	6821      	ldr	r1, [r4, #0]
    1436:	1a08      	subs	r0, r1, r0
    1438:	0200      	lsls	r0, r0, #8
    143a:	17c1      	asrs	r1, r0, #31
    143c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1440:	1200      	asrs	r0, r0, #8
    1442:	2833      	cmp	r0, #51	; 0x33
    1444:	db05      	blt.n	1452 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xca>
    1446:	eb09 0045 	add.w	r0, r9, r5, lsl #1
    144a:	703d      	strb	r5, [r7, #0]
    144c:	7845      	ldrb	r5, [r0, #1]
    144e:	2d20      	cmp	r5, #32
    1450:	d1da      	bne.n	1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>
    1452:	7838      	ldrb	r0, [r7, #0]
    1454:	f88a 0000 	strb.w	r0, [sl]
    1458:	4627      	mov	r7, r4
    145a:	2d20      	cmp	r5, #32
    145c:	bf1c      	itt	ne
    145e:	481e      	ldrne	r0, [pc, #120]	; (14d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x150>)
    1460:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    1464:	d030      	beq.n	14c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x140>
    1466:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    146a:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
    146e:	6879      	ldr	r1, [r7, #4]
    1470:	f8d9 2008 	ldr.w	r2, [r9, #8]
    1474:	4638      	mov	r0, r7
    1476:	1a51      	subs	r1, r2, r1
    1478:	0209      	lsls	r1, r1, #8
    147a:	17ca      	asrs	r2, r1, #31
    147c:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1480:	f109 0808 	add.w	r8, r9, #8
    1484:	1209      	asrs	r1, r1, #8
    1486:	d412      	bmi.n	14ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x126>
    1488:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    148c:	b1e1      	cbz	r1, 14c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x140>
    148e:	8941      	ldrh	r1, [r0, #10]
    1490:	b9d1      	cbnz	r1, 14c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x140>
    1492:	f000 fca7 	bl	1de4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1496:	f001 ff45 	bl	3324 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    149a:	f8d8 1000 	ldr.w	r1, [r8]
    149e:	1a08      	subs	r0, r1, r0
    14a0:	0200      	lsls	r0, r0, #8
    14a2:	17c1      	asrs	r1, r0, #31
    14a4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    14a8:	1200      	asrs	r0, r0, #8
    14aa:	2833      	cmp	r0, #51	; 0x33
    14ac:	da0c      	bge.n	14c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x140>
    14ae:	f88a 5000 	strb.w	r5, [sl]
    14b2:	f899 0014 	ldrb.w	r0, [r9, #20]
    14b6:	7b39      	ldrb	r1, [r7, #12]
    14b8:	4288      	cmp	r0, r1
    14ba:	f67f af34 	bls.w	1326 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    14be:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    14c2:	7845      	ldrb	r5, [r0, #1]
    14c4:	2d20      	cmp	r5, #32
    14c6:	d1ce      	bne.n	1466 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xde>
    14c8:	b00b      	add	sp, #44	; 0x2c
    14ca:	2001      	movs	r0, #1
    14cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14d0:	20000e6c 	.word	0x20000e6c
    14d4:	20000aec 	.word	0x20000aec
    14d8:	20000dec 	.word	0x20000dec
    14dc:	1e847fff 	.word	0x1e847fff
    14e0:	07a12000 	.word	0x07a12000
    14e4:	f85ee000 	.word	0xf85ee000
    14e8:	1e848000 	.word	0x1e848000
    14ec:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    14f0:	4604      	mov	r4, r0
    14f2:	483c      	ldr	r0, [pc, #240]	; (15e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x25c>)
    14f4:	460e      	mov	r6, r1
    14f6:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    14fa:	4f3b      	ldr	r7, [pc, #236]	; (15e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x260>)
    14fc:	f890 5020 	ldrb.w	r5, [r0, #32]
    1500:	2020      	movs	r0, #32
    1502:	4698      	mov	r8, r3
    1504:	4692      	mov	sl, r2
    1506:	7010      	strb	r0, [r2, #0]
    1508:	f507 7940 	add.w	r9, r7, #768	; 0x300
    150c:	2d20      	cmp	r5, #32
    150e:	bf18      	it	ne
    1510:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
    1514:	d028      	beq.n	1568 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1e0>
    1516:	bf00      	nop
    1518:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    151c:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    1520:	f100 0108 	add.w	r1, r0, #8
    1524:	68c0      	ldr	r0, [r0, #12]
    1526:	6822      	ldr	r2, [r4, #0]
    1528:	1a10      	subs	r0, r2, r0
    152a:	0200      	lsls	r0, r0, #8
    152c:	17c2      	asrs	r2, r0, #31
    152e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1532:	1200      	asrs	r0, r0, #8
    1534:	d418      	bmi.n	1568 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1e0>
    1536:	8960      	ldrh	r0, [r4, #10]
    1538:	b178      	cbz	r0, 155a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d2>
    153a:	8948      	ldrh	r0, [r1, #10]
    153c:	b968      	cbnz	r0, 155a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d2>
    153e:	4608      	mov	r0, r1
    1540:	f000 fc50 	bl	1de4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1544:	f001 feee 	bl	3324 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1548:	6821      	ldr	r1, [r4, #0]
    154a:	1a08      	subs	r0, r1, r0
    154c:	0200      	lsls	r0, r0, #8
    154e:	17c1      	asrs	r1, r0, #31
    1550:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1554:	1200      	asrs	r0, r0, #8
    1556:	2833      	cmp	r0, #51	; 0x33
    1558:	db06      	blt.n	1568 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1e0>
    155a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    155e:	f88a 5000 	strb.w	r5, [sl]
    1562:	7845      	ldrb	r5, [r0, #1]
    1564:	2d20      	cmp	r5, #32
    1566:	d1d7      	bne.n	1518 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x190>
    1568:	f89a 0000 	ldrb.w	r0, [sl]
    156c:	f888 0000 	strb.w	r0, [r8]
    1570:	2d20      	cmp	r5, #32
    1572:	bf18      	it	ne
    1574:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
    1578:	d030      	beq.n	15dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x254>
    157a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    157e:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
    1582:	6861      	ldr	r1, [r4, #4]
    1584:	f8d9 2008 	ldr.w	r2, [r9, #8]
    1588:	4620      	mov	r0, r4
    158a:	1a51      	subs	r1, r2, r1
    158c:	0209      	lsls	r1, r1, #8
    158e:	17ca      	asrs	r2, r1, #31
    1590:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1594:	f109 0608 	add.w	r6, r9, #8
    1598:	1209      	asrs	r1, r1, #8
    159a:	d410      	bmi.n	15be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x236>
    159c:	8971      	ldrh	r1, [r6, #10]
    159e:	b1e9      	cbz	r1, 15dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x254>
    15a0:	8941      	ldrh	r1, [r0, #10]
    15a2:	b9d9      	cbnz	r1, 15dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x254>
    15a4:	f000 fc1e 	bl	1de4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    15a8:	f001 febc 	bl	3324 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    15ac:	6831      	ldr	r1, [r6, #0]
    15ae:	1a08      	subs	r0, r1, r0
    15b0:	0200      	lsls	r0, r0, #8
    15b2:	17c1      	asrs	r1, r0, #31
    15b4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    15b8:	1200      	asrs	r0, r0, #8
    15ba:	2833      	cmp	r0, #51	; 0x33
    15bc:	da0e      	bge.n	15dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x254>
    15be:	f888 5000 	strb.w	r5, [r8]
    15c2:	f899 0014 	ldrb.w	r0, [r9, #20]
    15c6:	7b21      	ldrb	r1, [r4, #12]
    15c8:	4288      	cmp	r0, r1
    15ca:	d802      	bhi.n	15d2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x24a>
    15cc:	2000      	movs	r0, #0
    15ce:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    15d2:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    15d6:	7845      	ldrb	r5, [r0, #1]
    15d8:	2d20      	cmp	r5, #32
    15da:	d1ce      	bne.n	157a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1f2>
    15dc:	2001      	movs	r0, #1
    15de:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    15e2:	0000      	.short	0x0000
    15e4:	20000e6c 	.word	0x20000e6c
    15e8:	20000aec 	.word	0x20000aec
    15ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15f0:	f04f 0800 	mov.w	r8, #0
    15f4:	b098      	sub	sp, #96	; 0x60
    15f6:	4616      	mov	r6, r2
    15f8:	460d      	mov	r5, r1
    15fa:	46c3      	mov	fp, r8
    15fc:	f002 f90a 	bl	3814 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    1600:	4604      	mov	r4, r0
    1602:	2d01      	cmp	r5, #1
    1604:	bf18      	it	ne
    1606:	2d02      	cmpne	r5, #2
    1608:	d005      	beq.n	1616 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x28e>
    160a:	f640 1193 	movw	r1, #2451	; 0x993
    160e:	f04f 0070 	mov.w	r0, #112	; 0x70
    1612:	f002 fecf 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1616:	49fd      	ldr	r1, [pc, #1012]	; (1a0c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x684>)
    1618:	2001      	movs	r0, #1
    161a:	6008      	str	r0, [r1, #0]
    161c:	49fc      	ldr	r1, [pc, #1008]	; (1a10 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x688>)
    161e:	6889      	ldr	r1, [r1, #8]
    1620:	6008      	str	r0, [r1, #0]
    1622:	2000      	movs	r0, #0
    1624:	900c      	str	r0, [sp, #48]	; 0x30
    1626:	1e40      	subs	r0, r0, #1
    1628:	900e      	str	r0, [sp, #56]	; 0x38
    162a:	49fa      	ldr	r1, [pc, #1000]	; (1a14 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x68c>)
    162c:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    1630:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    1634:	3308      	adds	r3, #8
    1636:	af0f      	add	r7, sp, #60	; 0x3c
    1638:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    163a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    163e:	a80f      	add	r0, sp, #60	; 0x3c
    1640:	f000 fbd0 	bl	1de4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1644:	900d      	str	r0, [sp, #52]	; 0x34
    1646:	48f3      	ldr	r0, [pc, #972]	; (1a14 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x68c>)
    1648:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
    164c:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
    1650:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    1654:	f1b9 0f00 	cmp.w	r9, #0
    1658:	bf14      	ite	ne
    165a:	f04f 0a01 	movne.w	sl, #1
    165e:	f04f 0a00 	moveq.w	sl, #0
    1662:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1664:	9014      	str	r0, [sp, #80]	; 0x50
    1666:	f1ba 0f00 	cmp.w	sl, #0
    166a:	d009      	beq.n	1680 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2f8>
    166c:	48ea      	ldr	r0, [pc, #936]	; (1a18 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x690>)
    166e:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    1672:	b928      	cbnz	r0, 1680 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2f8>
    1674:	f002 fe3a 	bl	42ec <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1678:	2800      	cmp	r0, #0
    167a:	bf08      	it	eq
    167c:	2701      	moveq	r7, #1
    167e:	d000      	beq.n	1682 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2fa>
    1680:	2700      	movs	r7, #0
    1682:	48e6      	ldr	r0, [pc, #920]	; (1a1c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x694>)
    1684:	2200      	movs	r2, #0
    1686:	9215      	str	r2, [sp, #84]	; 0x54
    1688:	7800      	ldrb	r0, [r0, #0]
    168a:	4616      	mov	r6, r2
    168c:	2801      	cmp	r0, #1
    168e:	bf18      	it	ne
    1690:	2803      	cmpne	r0, #3
    1692:	d140      	bne.n	1716 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38e>
    1694:	48e1      	ldr	r0, [pc, #900]	; (1a1c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x694>)
    1696:	f8b0 8002 	ldrh.w	r8, [r0, #2]
    169a:	eba8 0009 	sub.w	r0, r8, r9
    169e:	9015      	str	r0, [sp, #84]	; 0x54
    16a0:	45c8      	cmp	r8, r9
    16a2:	d938      	bls.n	1716 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38e>
    16a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    16a6:	ea6f 0108 	mvn.w	r1, r8
    16aa:	f8df e374 	ldr.w	lr, [pc, #884]	; 1a20 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x698>
    16ae:	1858      	adds	r0, r3, r1
    16b0:	f10d 0c0c 	add.w	ip, sp, #12
    16b4:	aa17      	add	r2, sp, #92	; 0x5c
    16b6:	4573      	cmp	r3, lr
    16b8:	d904      	bls.n	16c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x33c>
    16ba:	f240 6116 	movw	r1, #1558	; 0x616
    16be:	2070      	movs	r0, #112	; 0x70
    16c0:	f002 fe78 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16c4:	4bd7      	ldr	r3, [pc, #860]	; (1a24 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x69c>)
    16c6:	4299      	cmp	r1, r3
    16c8:	dd04      	ble.n	16d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x34c>
    16ca:	f240 6117 	movw	r1, #1559	; 0x617
    16ce:	2070      	movs	r0, #112	; 0x70
    16d0:	f002 fe70 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16d4:	4bd4      	ldr	r3, [pc, #848]	; (1a28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a0>)
    16d6:	4299      	cmp	r1, r3
    16d8:	da04      	bge.n	16e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x35c>
    16da:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    16de:	2070      	movs	r0, #112	; 0x70
    16e0:	f002 fe68 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16e4:	49d1      	ldr	r1, [pc, #836]	; (1a2c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a4>)
    16e6:	4281      	cmp	r1, r0
    16e8:	bfdc      	itt	le
    16ea:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    16ee:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    16f2:	dd05      	ble.n	1700 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x378>
    16f4:	2800      	cmp	r0, #0
    16f6:	bfbc      	itt	lt
    16f8:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    16fc:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1700:	4661      	mov	r1, ip
    1702:	f001 fe2b 	bl	335c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1706:	9803      	ldr	r0, [sp, #12]
    1708:	990f      	ldr	r1, [sp, #60]	; 0x3c
    170a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    170e:	9003      	str	r0, [sp, #12]
    1710:	1a08      	subs	r0, r1, r0
    1712:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1716:	2f00      	cmp	r7, #0
    1718:	bf18      	it	ne
    171a:	2632      	movne	r6, #50	; 0x32
    171c:	d104      	bne.n	1728 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a0>
    171e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1722:	2800      	cmp	r0, #0
    1724:	bf18      	it	ne
    1726:	2602      	movne	r6, #2
    1728:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    172c:	d008      	beq.n	1740 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b8>
    172e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1730:	1b00      	subs	r0, r0, r4
    1732:	0200      	lsls	r0, r0, #8
    1734:	17c1      	asrs	r1, r0, #31
    1736:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    173a:	1200      	asrs	r0, r0, #8
    173c:	2801      	cmp	r0, #1
    173e:	da02      	bge.n	1746 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3be>
    1740:	2104      	movs	r1, #4
    1742:	9818      	ldr	r0, [sp, #96]	; 0x60
    1744:	e00b      	b.n	175e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3d6>
    1746:	b147      	cbz	r7, 175a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3d2>
    1748:	48b3      	ldr	r0, [pc, #716]	; (1a18 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x690>)
    174a:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    174e:	b120      	cbz	r0, 175a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3d2>
    1750:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1754:	1c06      	adds	r6, r0, #0
    1756:	bf18      	it	ne
    1758:	2602      	movne	r6, #2
    175a:	4620      	mov	r0, r4
    175c:	2101      	movs	r1, #1
    175e:	f1b9 0f00 	cmp.w	r9, #0
    1762:	d002      	beq.n	176a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3e2>
    1764:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1766:	2b1e      	cmp	r3, #30
    1768:	da02      	bge.n	1770 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3e8>
    176a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
    176e:	b113      	cbz	r3, 1776 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3ee>
    1770:	f04f 0b01 	mov.w	fp, #1
    1774:	1e49      	subs	r1, r1, #1
    1776:	198b      	adds	r3, r1, r6
    1778:	49a8      	ldr	r1, [pc, #672]	; (1a1c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x694>)
    177a:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
    177e:	7809      	ldrb	r1, [r1, #0]
    1780:	9115      	str	r1, [sp, #84]	; 0x54
    1782:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1784:	1a89      	subs	r1, r1, r2
    1786:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
    178a:	ebac 0100 	sub.w	r1, ip, r0
    178e:	0209      	lsls	r1, r1, #8
    1790:	17ce      	asrs	r6, r1, #31
    1792:	eb01 6116 	add.w	r1, r1, r6, lsr #24
    1796:	1209      	asrs	r1, r1, #8
    1798:	4299      	cmp	r1, r3
    179a:	db18      	blt.n	17ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x446>
    179c:	2a00      	cmp	r2, #0
    179e:	bf18      	it	ne
    17a0:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
    17a4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    17a6:	9705      	str	r7, [sp, #20]
    17a8:	2700      	movs	r7, #0
    17aa:	f001 ff2d 	bl	3608 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    17ae:	1a30      	subs	r0, r6, r0
    17b0:	0200      	lsls	r0, r0, #8
    17b2:	17c1      	asrs	r1, r0, #31
    17b4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    17b8:	1200      	asrs	r0, r0, #8
    17ba:	283e      	cmp	r0, #62	; 0x3e
    17bc:	da3f      	bge.n	183e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b6>
    17be:	2d01      	cmp	r5, #1
    17c0:	d020      	beq.n	1804 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x47c>
    17c2:	1e70      	subs	r0, r6, #1
    17c4:	9905      	ldr	r1, [sp, #20]
    17c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    17ca:	b319      	cbz	r1, 1814 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48c>
    17cc:	e02d      	b.n	182a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a2>
    17ce:	b182      	cbz	r2, 17f2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x46a>
    17d0:	f1be 0f00 	cmp.w	lr, #0
    17d4:	bf04      	itt	eq
    17d6:	9915      	ldreq	r1, [sp, #84]	; 0x54
    17d8:	2903      	cmpeq	r1, #3
    17da:	d00a      	beq.n	17f2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x46a>
    17dc:	b927      	cbnz	r7, 17e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x460>
    17de:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    17e2:	2900      	cmp	r1, #0
    17e4:	bf18      	it	ne
    17e6:	1e9b      	subne	r3, r3, #2
    17e8:	2200      	movs	r2, #0
    17ea:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
    17ee:	4690      	mov	r8, r2
    17f0:	e7c7      	b.n	1782 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3fa>
    17f2:	bb07      	cbnz	r7, 1836 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4ae>
    17f4:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    17f8:	b1e9      	cbz	r1, 1836 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4ae>
    17fa:	2100      	movs	r1, #0
    17fc:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    1800:	1e9b      	subs	r3, r3, #2
    1802:	e7be      	b.n	1782 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3fa>
    1804:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1808:	d120      	bne.n	184c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c4>
    180a:	f640 110c 	movw	r1, #2316	; 0x90c
    180e:	2070      	movs	r0, #112	; 0x70
    1810:	f002 fdd0 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1814:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1818:	d007      	beq.n	182a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a2>
    181a:	1a21      	subs	r1, r4, r0
    181c:	0209      	lsls	r1, r1, #8
    181e:	17ca      	asrs	r2, r1, #31
    1820:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1824:	1209      	asrs	r1, r1, #8
    1826:	2904      	cmp	r1, #4
    1828:	dd03      	ble.n	1832 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4aa>
    182a:	4604      	mov	r4, r0
    182c:	f001 fef2 	bl	3614 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1830:	e00c      	b.n	184c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c4>
    1832:	2900      	cmp	r1, #0
    1834:	dd0a      	ble.n	184c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c4>
    1836:	b01b      	add	sp, #108	; 0x6c
    1838:	2000      	movs	r0, #0
    183a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    183e:	1e70      	subs	r0, r6, #1
    1840:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    1844:	4620      	mov	r0, r4
    1846:	f001 fee5 	bl	3614 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    184a:	4657      	mov	r7, sl
    184c:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1850:	d028      	beq.n	18a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x51c>
    1852:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1854:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    1858:	1b00      	subs	r0, r0, r4
    185a:	f08b 0301 	eor.w	r3, fp, #1
    185e:	4a74      	ldr	r2, [pc, #464]	; (1a30 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a8>)
    1860:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1864:	ebac 0c04 	sub.w	ip, ip, r4
    1868:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    186c:	4283      	cmp	r3, r0
    186e:	bf98      	it	ls
    1870:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    1874:	d2df      	bcs.n	1836 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4ae>
    1876:	4562      	cmp	r2, ip
    1878:	d3dd      	bcc.n	1836 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4ae>
    187a:	4620      	mov	r0, r4
    187c:	f00a fcd7 	bl	c22e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1880:	4967      	ldr	r1, [pc, #412]	; (1a20 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x698>)
    1882:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1884:	1c4b      	adds	r3, r1, #1
    1886:	1a16      	subs	r6, r2, r0
    1888:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
    188c:	bf24      	itt	cs
    188e:	eba0 0c02 	subcs.w	ip, r0, r2
    1892:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    1896:	d310      	bcc.n	18ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x532>
    1898:	42b1      	cmp	r1, r6
    189a:	d208      	bcs.n	18ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x526>
    189c:	1a08      	subs	r0, r1, r0
    189e:	4410      	add	r0, r2
    18a0:	1c46      	adds	r6, r0, #1
    18a2:	e00a      	b.n	18ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x532>
    18a4:	f640 212b 	movw	r1, #2603	; 0xa2b
    18a8:	2070      	movs	r0, #112	; 0x70
    18aa:	f002 fd83 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18ae:	4561      	cmp	r1, ip
    18b0:	d22c      	bcs.n	190c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x584>
    18b2:	1a89      	subs	r1, r1, r2
    18b4:	4408      	add	r0, r1
    18b6:	1c40      	adds	r0, r0, #1
    18b8:	4246      	negs	r6, r0
    18ba:	4857      	ldr	r0, [pc, #348]	; (1a18 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x690>)
    18bc:	7f80      	ldrb	r0, [r0, #30]
    18be:	b350      	cbz	r0, 1916 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58e>
    18c0:	4628      	mov	r0, r5
    18c2:	4645      	mov	r5, r8
    18c4:	f04f 0b00 	mov.w	fp, #0
    18c8:	46d8      	mov	r8, fp
    18ca:	2801      	cmp	r0, #1
    18cc:	d005      	beq.n	18da <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x552>
    18ce:	2002      	movs	r0, #2
    18d0:	f002 f8e8 	bl	3aa4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    18d4:	2001      	movs	r0, #1
    18d6:	f002 f8e5 	bl	3aa4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    18da:	45a9      	cmp	r9, r5
    18dc:	d22c      	bcs.n	1938 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5b0>
    18de:	eba6 0105 	sub.w	r1, r6, r5
    18e2:	f04f 0301 	mov.w	r3, #1
    18e6:	f04f 0203 	mov.w	r2, #3
    18ea:	f04f 0002 	mov.w	r0, #2
    18ee:	f002 f811 	bl	3914 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    18f2:	2800      	cmp	r0, #0
    18f4:	bf08      	it	eq
    18f6:	f04f 0801 	moveq.w	r8, #1
    18fa:	f1b9 0f00 	cmp.w	r9, #0
    18fe:	d035      	beq.n	196c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5e4>
    1900:	2301      	movs	r3, #1
    1902:	eba6 0109 	sub.w	r1, r6, r9
    1906:	2203      	movs	r2, #3
    1908:	4618      	mov	r0, r3
    190a:	e023      	b.n	1954 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5cc>
    190c:	f640 310b 	movw	r1, #2827	; 0xb0b
    1910:	2070      	movs	r0, #112	; 0x70
    1912:	f002 fd4f 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1916:	45c1      	cmp	r9, r8
    1918:	bf34      	ite	cc
    191a:	4640      	movcc	r0, r8
    191c:	4648      	movcs	r0, r9
    191e:	f1bb 0f00 	cmp.w	fp, #0
    1922:	bf14      	ite	ne
    1924:	2100      	movne	r1, #0
    1926:	211e      	moveq	r1, #30
    1928:	4408      	add	r0, r1
    192a:	42b0      	cmp	r0, r6
    192c:	dbc8      	blt.n	18c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x538>
    192e:	f640 213e 	movw	r1, #2622	; 0xa3e
    1932:	2070      	movs	r0, #112	; 0x70
    1934:	f002 fd3e 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1938:	d910      	bls.n	195c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5d4>
    193a:	2301      	movs	r3, #1
    193c:	eba6 0109 	sub.w	r1, r6, r9
    1940:	2203      	movs	r2, #3
    1942:	4618      	mov	r0, r3
    1944:	f001 ffe6 	bl	3914 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1948:	b328      	cbz	r0, 1996 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60e>
    194a:	b17d      	cbz	r5, 196c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5e4>
    194c:	1b71      	subs	r1, r6, r5
    194e:	2301      	movs	r3, #1
    1950:	2203      	movs	r2, #3
    1952:	2002      	movs	r0, #2
    1954:	f001 ffde 	bl	3914 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1958:	b1e8      	cbz	r0, 1996 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60e>
    195a:	e007      	b.n	196c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5e4>
    195c:	ea55 0009 	orrs.w	r0, r5, r9
    1960:	d004      	beq.n	196c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5e4>
    1962:	f640 1176 	movw	r1, #2422	; 0x976
    1966:	2070      	movs	r0, #112	; 0x70
    1968:	f002 fd24 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    196c:	2301      	movs	r3, #1
    196e:	2203      	movs	r2, #3
    1970:	4631      	mov	r1, r6
    1972:	2000      	movs	r0, #0
    1974:	f001 ffce 	bl	3914 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1978:	b168      	cbz	r0, 1996 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60e>
    197a:	2501      	movs	r5, #1
    197c:	f1b8 0f00 	cmp.w	r8, #0
    1980:	d003      	beq.n	198a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x602>
    1982:	9814      	ldr	r0, [sp, #80]	; 0x50
    1984:	900f      	str	r0, [sp, #60]	; 0x3c
    1986:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
    198a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1a34 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6ac>
    198e:	f1ba 0f00 	cmp.w	sl, #0
    1992:	d10e      	bne.n	19b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x62a>
    1994:	e009      	b.n	19aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x622>
    1996:	2002      	movs	r0, #2
    1998:	f002 f884 	bl	3aa4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    199c:	2001      	movs	r0, #1
    199e:	f002 f881 	bl	3aa4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    19a2:	b01b      	add	sp, #108	; 0x6c
    19a4:	2000      	movs	r0, #0
    19a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19aa:	481b      	ldr	r0, [pc, #108]	; (1a18 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x690>)
    19ac:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    19b0:	b100      	cbz	r0, 19b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x62c>
    19b2:	b34f      	cbz	r7, 1a08 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x680>
    19b4:	f8df a060 	ldr.w	sl, [pc, #96]	; 1a18 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x690>
    19b8:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    19bc:	b118      	cbz	r0, 19c6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x63e>
    19be:	f002 fb3f 	bl	4040 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    19c2:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
    19c6:	b307      	cbz	r7, 1a0a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x682>
    19c8:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    19cc:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    19d0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    19d4:	f8c8 0000 	str.w	r0, [r8]
    19d8:	2300      	movs	r3, #0
    19da:	2203      	movs	r2, #3
    19dc:	2005      	movs	r0, #5
    19de:	f001 ff99 	bl	3914 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    19e2:	b368      	cbz	r0, 1a40 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6b8>
    19e4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    19e8:	2005      	movs	r0, #5
    19ea:	f002 f921 	bl	3c30 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    19ee:	4912      	ldr	r1, [pc, #72]	; (1a38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6b0>)
    19f0:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    19f4:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
    19f8:	4910      	ldr	r1, [pc, #64]	; (1a3c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6b4>)
    19fa:	12e0      	asrs	r0, r4, #11
    19fc:	6008      	str	r0, [r1, #0]
    19fe:	4c06      	ldr	r4, [pc, #24]	; (1a18 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x690>)
    1a00:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1a04:	b3f0      	cbz	r0, 1a84 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6fc>
    1a06:	e05b      	b.n	1ac0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x738>
    1a08:	e01b      	b.n	1a42 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6ba>
    1a0a:	e01f      	b.n	1a4c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c4>
    1a0c:	40000508 	.word	0x40000508
    1a10:	20000010 	.word	0x20000010
    1a14:	20000aec 	.word	0x20000aec
    1a18:	20000e6c 	.word	0x20000e6c
    1a1c:	20000012 	.word	0x20000012
    1a20:	1e847fff 	.word	0x1e847fff
    1a24:	07a12000 	.word	0x07a12000
    1a28:	f85ee000 	.word	0xf85ee000
    1a2c:	1e848000 	.word	0x1e848000
    1a30:	003fffff 	.word	0x003fffff
    1a34:	4001f508 	.word	0x4001f508
    1a38:	4001f098 	.word	0x4001f098
    1a3c:	4001f504 	.word	0x4001f504
    1a40:	e035      	b.n	1aae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x726>
    1a42:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1afc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x774>
    1a46:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    1a4a:	b358      	cbz	r0, 1aa4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x71c>
    1a4c:	4c2b      	ldr	r4, [pc, #172]	; (1afc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x774>)
    1a4e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1a52:	b150      	cbz	r0, 1a6a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6e2>
    1a54:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1a58:	f8c8 0000 	str.w	r0, [r8]
    1a5c:	2005      	movs	r0, #5
    1a5e:	f002 f821 	bl	3aa4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1a62:	f002 fb55 	bl	4110 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1a66:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
    1a6a:	ac0c      	add	r4, sp, #48	; 0x30
    1a6c:	4824      	ldr	r0, [pc, #144]	; (1b00 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x778>)
    1a6e:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1a72:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
    1a76:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
    1a7a:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
    1a7e:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
    1a82:	e000      	b.n	1a86 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6fe>
    1a84:	e018      	b.n	1ab8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x730>
    1a86:	ac10      	add	r4, sp, #64	; 0x40
    1a88:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1a8c:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
    1a90:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
    1a94:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
    1a98:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
    1a9c:	b01b      	add	sp, #108	; 0x6c
    1a9e:	2001      	movs	r0, #1
    1aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1aa4:	f002 fae8 	bl	4078 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1aa8:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
    1aac:	e78b      	b.n	19c6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x63e>
    1aae:	f240 3151 	movw	r1, #849	; 0x351
    1ab2:	2070      	movs	r0, #112	; 0x70
    1ab4:	f002 fc7e 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ab8:	f002 fb1c 	bl	40f4 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
    1abc:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    1ac0:	eba6 0009 	sub.w	r0, r6, r9
    1ac4:	f1a0 0119 	sub.w	r1, r0, #25
    1ac8:	2900      	cmp	r1, #0
    1aca:	dc04      	bgt.n	1ad6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74e>
    1acc:	f640 2168 	movw	r1, #2664	; 0xa68
    1ad0:	2070      	movs	r0, #112	; 0x70
    1ad2:	f002 fc6f 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ad6:	2203      	movs	r2, #3
    1ad8:	2301      	movs	r3, #1
    1ada:	4610      	mov	r0, r2
    1adc:	f001 ff1a 	bl	3914 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1ae0:	b138      	cbz	r0, 1af2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x76a>
    1ae2:	4808      	ldr	r0, [pc, #32]	; (1b04 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x77c>)
    1ae4:	6880      	ldr	r0, [r0, #8]
    1ae6:	f8c0 b000 	str.w	fp, [r0]
    1aea:	4807      	ldr	r0, [pc, #28]	; (1b08 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x780>)
    1aec:	f8c0 b000 	str.w	fp, [r0]
    1af0:	e7bb      	b.n	1a6a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6e2>
    1af2:	f640 2173 	movw	r1, #2675	; 0xa73
    1af6:	2070      	movs	r0, #112	; 0x70
    1af8:	f002 fc5c 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1afc:	20000e6c 	.word	0x20000e6c
    1b00:	20000aec 	.word	0x20000aec
    1b04:	20000010 	.word	0x20000010
    1b08:	40000508 	.word	0x40000508
    1b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1b10:	4606      	mov	r6, r0
    1b12:	b083      	sub	sp, #12
    1b14:	7808      	ldrb	r0, [r1, #0]
    1b16:	7390      	strb	r0, [r2, #14]
    1b18:	7acf      	ldrb	r7, [r1, #11]
    1b1a:	7357      	strb	r7, [r2, #13]
    1b1c:	7a88      	ldrb	r0, [r1, #10]
    1b1e:	7310      	strb	r0, [r2, #12]
    1b20:	8908      	ldrh	r0, [r1, #8]
    1b22:	4614      	mov	r4, r2
    1b24:	8150      	strh	r0, [r2, #10]
    1b26:	460d      	mov	r5, r1
    1b28:	780a      	ldrb	r2, [r1, #0]
    1b2a:	495f      	ldr	r1, [pc, #380]	; (1ca8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x920>)
    1b2c:	4699      	mov	r9, r3
    1b2e:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    1b32:	424b      	negs	r3, r1
    1b34:	f1ac 0801 	sub.w	r8, ip, #1
    1b38:	b15a      	cbz	r2, 1b52 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7ca>
    1b3a:	43c0      	mvns	r0, r0
    1b3c:	f8d5 8004 	ldr.w	r8, [r5, #4]
    1b40:	f104 0208 	add.w	r2, r4, #8
    1b44:	4288      	cmp	r0, r1
    1b46:	dd3d      	ble.n	1bc4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x83c>
    1b48:	f240 6117 	movw	r1, #1559	; 0x617
    1b4c:	2070      	movs	r0, #112	; 0x70
    1b4e:	f002 fc31 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b52:	68ee      	ldr	r6, [r5, #12]
    1b54:	686d      	ldr	r5, [r5, #4]
    1b56:	ea6f 0900 	mvn.w	r9, r0
    1b5a:	f104 0208 	add.w	r2, r4, #8
    1b5e:	eb06 0009 	add.w	r0, r6, r9
    1b62:	4546      	cmp	r6, r8
    1b64:	d904      	bls.n	1b70 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7e8>
    1b66:	f240 6116 	movw	r1, #1558	; 0x616
    1b6a:	2070      	movs	r0, #112	; 0x70
    1b6c:	f002 fc22 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b70:	4589      	cmp	r9, r1
    1b72:	dce9      	bgt.n	1b48 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7c0>
    1b74:	4599      	cmp	r9, r3
    1b76:	db28      	blt.n	1bca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x842>
    1b78:	4584      	cmp	ip, r0
    1b7a:	bfdc      	itt	le
    1b7c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1b80:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1b84:	dd05      	ble.n	1b92 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80a>
    1b86:	2800      	cmp	r0, #0
    1b88:	bfbc      	itt	lt
    1b8a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1b8e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1b92:	4621      	mov	r1, r4
    1b94:	f001 fbe2 	bl	335c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1b98:	6820      	ldr	r0, [r4, #0]
    1b9a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1b9e:	1970      	adds	r0, r6, r5
    1ba0:	1c40      	adds	r0, r0, #1
    1ba2:	6021      	str	r1, [r4, #0]
    1ba4:	2f00      	cmp	r7, #0
    1ba6:	bf08      	it	eq
    1ba8:	307a      	addeq	r0, #122	; 0x7a
    1baa:	d003      	beq.n	1bb4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x82c>
    1bac:	2f01      	cmp	r7, #1
    1bae:	bf08      	it	eq
    1bb0:	3044      	addeq	r0, #68	; 0x44
    1bb2:	d12d      	bne.n	1c10 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x888>
    1bb4:	f001 fbb6 	bl	3324 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1bb8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1bbc:	6060      	str	r0, [r4, #4]
    1bbe:	b003      	add	sp, #12
    1bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1bc4:	4601      	mov	r1, r0
    1bc6:	4298      	cmp	r0, r3
    1bc8:	da04      	bge.n	1bd4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84c>
    1bca:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    1bce:	2070      	movs	r0, #112	; 0x70
    1bd0:	f002 fbf0 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1bd4:	4584      	cmp	ip, r0
    1bd6:	bfdc      	itt	le
    1bd8:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    1bdc:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    1be0:	dd05      	ble.n	1bee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x866>
    1be2:	2800      	cmp	r0, #0
    1be4:	bfbc      	itt	lt
    1be6:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    1bea:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    1bee:	4621      	mov	r1, r4
    1bf0:	f001 fbb4 	bl	335c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1bf4:	6820      	ldr	r0, [r4, #0]
    1bf6:	2f00      	cmp	r7, #0
    1bf8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1bfc:	f108 0001 	add.w	r0, r8, #1
    1c00:	6021      	str	r1, [r4, #0]
    1c02:	bf08      	it	eq
    1c04:	307a      	addeq	r0, #122	; 0x7a
    1c06:	d008      	beq.n	1c1a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x892>
    1c08:	2f01      	cmp	r7, #1
    1c0a:	bf08      	it	eq
    1c0c:	3044      	addeq	r0, #68	; 0x44
    1c0e:	d004      	beq.n	1c1a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x892>
    1c10:	f240 61be 	movw	r1, #1726	; 0x6be
    1c14:	2070      	movs	r0, #112	; 0x70
    1c16:	f002 fbcd 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c1a:	f001 fb83 	bl	3324 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1c1e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1c22:	6061      	str	r1, [r4, #4]
    1c24:	8960      	ldrh	r0, [r4, #10]
    1c26:	aa01      	add	r2, sp, #4
    1c28:	4669      	mov	r1, sp
    1c2a:	f001 fb97 	bl	335c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1c2e:	481f      	ldr	r0, [pc, #124]	; (1cac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x924>)
    1c30:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    1c34:	2920      	cmp	r1, #32
    1c36:	d023      	beq.n	1c80 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8f8>
    1c38:	6900      	ldr	r0, [r0, #16]
    1c3a:	1d40      	adds	r0, r0, #5
    1c3c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c40:	e9d4 2100 	ldrd	r2, r1, [r4]
    1c44:	1a89      	subs	r1, r1, r2
    1c46:	6020      	str	r0, [r4, #0]
    1c48:	4408      	add	r0, r1
    1c4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c4e:	6060      	str	r0, [r4, #4]
    1c50:	464b      	mov	r3, r9
    1c52:	4632      	mov	r2, r6
    1c54:	4621      	mov	r1, r4
    1c56:	68e8      	ldr	r0, [r5, #12]
    1c58:	f7ff fad2 	bl	1200 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    1c5c:	2800      	cmp	r0, #0
    1c5e:	bf1c      	itt	ne
    1c60:	b003      	addne	sp, #12
    1c62:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1c66:	e9d4 1000 	ldrd	r1, r0, [r4]
    1c6a:	1a40      	subs	r0, r0, r1
    1c6c:	4430      	add	r0, r6
    1c6e:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    1c72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c76:	e9c4 1000 	strd	r1, r0, [r4]
    1c7a:	b003      	add	sp, #12
    1c7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1c80:	8960      	ldrh	r0, [r4, #10]
    1c82:	f106 0709 	add.w	r7, r6, #9
    1c86:	b120      	cbz	r0, 1c92 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x90a>
    1c88:	f002 fb30 	bl	42ec <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1c8c:	2800      	cmp	r0, #0
    1c8e:	bf08      	it	eq
    1c90:	3732      	addeq	r7, #50	; 0x32
    1c92:	4807      	ldr	r0, [pc, #28]	; (1cb0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x928>)
    1c94:	7841      	ldrb	r1, [r0, #1]
    1c96:	9800      	ldr	r0, [sp, #0]
    1c98:	4281      	cmp	r1, r0
    1c9a:	bf84      	itt	hi
    1c9c:	1a08      	subhi	r0, r1, r0
    1c9e:	4407      	addhi	r7, r0
    1ca0:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    1ca4:	e7cc      	b.n	1c40 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8b8>
    1ca6:	0000      	.short	0x0000
    1ca8:	07a12000 	.word	0x07a12000
    1cac:	20000e6c 	.word	0x20000e6c
    1cb0:	20000012 	.word	0x20000012
    1cb4:	b510      	push	{r4, lr}
    1cb6:	4c15      	ldr	r4, [pc, #84]	; (1d0c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x984>)
    1cb8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1cbc:	2820      	cmp	r0, #32
    1cbe:	bf18      	it	ne
    1cc0:	bd10      	popne	{r4, pc}
    1cc2:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1cc6:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    1cca:	f890 1020 	ldrb.w	r1, [r0, #32]
    1cce:	2920      	cmp	r1, #32
    1cd0:	d017      	beq.n	1d02 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x97a>
    1cd2:	f8df c03c 	ldr.w	ip, [pc, #60]	; 1d10 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x988>
    1cd6:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    1cda:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    1cde:	785b      	ldrb	r3, [r3, #1]
    1ce0:	f880 3020 	strb.w	r3, [r0, #32]
    1ce4:	2301      	movs	r3, #1
    1ce6:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    1cea:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    1cee:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    1cf2:	2002      	movs	r0, #2
    1cf4:	f000 f8b0 	bl	1e58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    1cf8:	2000      	movs	r0, #0
    1cfa:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    1cfe:	77a0      	strb	r0, [r4, #30]
    1d00:	bd10      	pop	{r4, pc}
    1d02:	f240 319e 	movw	r1, #926	; 0x39e
    1d06:	2070      	movs	r0, #112	; 0x70
    1d08:	f002 fb54 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d0c:	20000e6c 	.word	0x20000e6c
    1d10:	20000dec 	.word	0x20000dec
    1d14:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1d18:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1dd4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x88>
    1d1c:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    1d20:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1d24:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1d28:	2c20      	cmp	r4, #32
    1d2a:	bf08      	it	eq
    1d2c:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1d30:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 1dd8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8c>
    1d34:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 1ddc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x90>
    1d38:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    1d3c:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    1d40:	2607      	movs	r6, #7
    1d42:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    1d46:	2801      	cmp	r0, #1
    1d48:	d00e      	beq.n	1d68 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c>
    1d4a:	2804      	cmp	r0, #4
    1d4c:	bf08      	it	eq
    1d4e:	2602      	moveq	r6, #2
    1d50:	d00a      	beq.n	1d68 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c>
    1d52:	2805      	cmp	r0, #5
    1d54:	bf0c      	ite	eq
    1d56:	2603      	moveq	r6, #3
    1d58:	2806      	cmpne	r0, #6
    1d5a:	d005      	beq.n	1d68 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c>
    1d5c:	f640 01d8 	movw	r1, #2264	; 0x8d8
    1d60:	f04f 0070 	mov.w	r0, #112	; 0x70
    1d64:	f002 fb26 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d68:	f1bb 0f00 	cmp.w	fp, #0
    1d6c:	bf18      	it	ne
    1d6e:	f3af 8000 	nopne.w
    1d72:	f3ef 8010 	mrs	r0, PRIMASK
    1d76:	b672      	cpsid	i
    1d78:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1d7c:	784a      	ldrb	r2, [r1, #1]
    1d7e:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    1d82:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    1d86:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1d8a:	42a2      	cmp	r2, r4
    1d8c:	bf04      	itt	eq
    1d8e:	2220      	moveq	r2, #32
    1d90:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1d94:	b1b8      	cbz	r0, 1dc6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7a>
    1d96:	462a      	mov	r2, r5
    1d98:	4621      	mov	r1, r4
    1d9a:	2001      	movs	r0, #1
    1d9c:	f000 f85c 	bl	1e58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    1da0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1da4:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    1da8:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    1dac:	6840      	ldr	r0, [r0, #4]
    1dae:	4631      	mov	r1, r6
    1db0:	4790      	blx	r2
    1db2:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    1db6:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1dba:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1dbe:	2c20      	cmp	r4, #32
    1dc0:	d1bc      	bne.n	1d3c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9b4>
    1dc2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1dc6:	4806      	ldr	r0, [pc, #24]	; (1de0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x94>)
    1dc8:	2800      	cmp	r0, #0
    1dca:	bf18      	it	ne
    1dcc:	f3af 8000 	nopne.w
    1dd0:	b662      	cpsie	i
    1dd2:	e7e0      	b.n	1d96 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4a>
    1dd4:	20000e6c 	.word	0x20000e6c
    1dd8:	00000000 	.word	0x00000000
    1ddc:	20000dec 	.word	0x20000dec
    1de0:	00000000 	.word	0x00000000
    1de4:	b510      	push	{r4, lr}
    1de6:	4604      	mov	r4, r0
    1de8:	6800      	ldr	r0, [r0, #0]
    1dea:	f00a fa20 	bl	c22e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1dee:	4602      	mov	r2, r0
    1df0:	8960      	ldrh	r0, [r4, #10]
    1df2:	7a21      	ldrb	r1, [r4, #8]
    1df4:	4b14      	ldr	r3, [pc, #80]	; (1e48 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfc>)
    1df6:	4408      	add	r0, r1
    1df8:	1c41      	adds	r1, r0, #1
    1dfa:	1850      	adds	r0, r2, r1
    1dfc:	429a      	cmp	r2, r3
    1dfe:	d904      	bls.n	1e0a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xbe>
    1e00:	f240 6116 	movw	r1, #1558	; 0x616
    1e04:	2070      	movs	r0, #112	; 0x70
    1e06:	f002 fad5 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e0a:	4a10      	ldr	r2, [pc, #64]	; (1e4c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x100>)
    1e0c:	4291      	cmp	r1, r2
    1e0e:	dd04      	ble.n	1e1a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xce>
    1e10:	f240 6117 	movw	r1, #1559	; 0x617
    1e14:	2070      	movs	r0, #112	; 0x70
    1e16:	f002 facd 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e1a:	4a0d      	ldr	r2, [pc, #52]	; (1e50 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x104>)
    1e1c:	4291      	cmp	r1, r2
    1e1e:	da04      	bge.n	1e2a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xde>
    1e20:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    1e24:	2070      	movs	r0, #112	; 0x70
    1e26:	f002 fac5 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e2a:	490a      	ldr	r1, [pc, #40]	; (1e54 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x108>)
    1e2c:	4281      	cmp	r1, r0
    1e2e:	bfde      	ittt	le
    1e30:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1e34:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1e38:	bd10      	pople	{r4, pc}
    1e3a:	2800      	cmp	r0, #0
    1e3c:	bfbc      	itt	lt
    1e3e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1e42:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1e46:	bd10      	pop	{r4, pc}
    1e48:	1e847fff 	.word	0x1e847fff
    1e4c:	07a12000 	.word	0x07a12000
    1e50:	f85ee000 	.word	0xf85ee000
    1e54:	1e848000 	.word	0x1e848000
    1e58:	f8df c054 	ldr.w	ip, [pc, #84]	; 1eb0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x164>
    1e5c:	b510      	push	{r4, lr}
    1e5e:	2300      	movs	r3, #0
    1e60:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1e64:	2807      	cmp	r0, #7
    1e66:	d21e      	bcs.n	1ea6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15a>
    1e68:	e8df f000 	tbb	[pc, r0]
    1e6c:	05050505 	.word	0x05050505
    1e70:	00040404 	.word	0x00040404
    1e74:	2301      	movs	r3, #1
    1e76:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1e7a:	2b00      	cmp	r3, #0
    1e7c:	bf08      	it	eq
    1e7e:	bd10      	popeq	{r4, pc}
    1e80:	480c      	ldr	r0, [pc, #48]	; (1eb4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x168>)
    1e82:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    1e86:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    1e8a:	2820      	cmp	r0, #32
    1e8c:	bf0e      	itee	eq
    1e8e:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1e92:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    1e96:	7041      	strbne	r1, [r0, #1]
    1e98:	2020      	movs	r0, #32
    1e9a:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1e9e:	7058      	strb	r0, [r3, #1]
    1ea0:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1ea4:	bd10      	pop	{r4, pc}
    1ea6:	f240 2167 	movw	r1, #615	; 0x267
    1eaa:	2070      	movs	r0, #112	; 0x70
    1eac:	f002 fa82 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1eb0:	20000dec 	.word	0x20000dec
    1eb4:	20000e6c 	.word	0x20000e6c
    1eb8:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ebc:	b083      	sub	sp, #12
    1ebe:	485c      	ldr	r0, [pc, #368]	; (2030 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2e4>)
    1ec0:	9904      	ldr	r1, [sp, #16]
    1ec2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1ec6:	9001      	str	r0, [sp, #4]
    1ec8:	f890 4020 	ldrb.w	r4, [r0, #32]
    1ecc:	9803      	ldr	r0, [sp, #12]
    1ece:	4625      	mov	r5, r4
    1ed0:	2801      	cmp	r0, #1
    1ed2:	bf18      	it	ne
    1ed4:	2802      	cmpne	r0, #2
    1ed6:	d005      	beq.n	1ee4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x198>
    1ed8:	f640 21af 	movw	r1, #2735	; 0xaaf
    1edc:	f04f 0070 	mov.w	r0, #112	; 0x70
    1ee0:	f002 fa68 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ee4:	2700      	movs	r7, #0
    1ee6:	2d20      	cmp	r5, #32
    1ee8:	d04a      	beq.n	1f80 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x234>
    1eea:	4851      	ldr	r0, [pc, #324]	; (2030 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2e4>)
    1eec:	9100      	str	r1, [sp, #0]
    1eee:	2600      	movs	r6, #0
    1ef0:	7f80      	ldrb	r0, [r0, #30]
    1ef2:	2800      	cmp	r0, #0
    1ef4:	bf08      	it	eq
    1ef6:	2602      	moveq	r6, #2
    1ef8:	f001 fb86 	bl	3608 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1efc:	f8df a138 	ldr.w	sl, [pc, #312]	; 2038 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ec>
    1f00:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1f04:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    1f08:	f8df 9128 	ldr.w	r9, [pc, #296]	; 2034 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2e8>
    1f0c:	688a      	ldr	r2, [r1, #8]
    1f0e:	68c9      	ldr	r1, [r1, #12]
    1f10:	1a12      	subs	r2, r2, r0
    1f12:	1a09      	subs	r1, r1, r0
    1f14:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1f18:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1f1c:	4296      	cmp	r6, r2
    1f1e:	bf98      	it	ls
    1f20:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    1f24:	d201      	bcs.n	1f2a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1de>
    1f26:	4589      	cmp	r9, r1
    1f28:	d228      	bcs.n	1f7c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x230>
    1f2a:	4a44      	ldr	r2, [pc, #272]	; (203c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f0>)
    1f2c:	9900      	ldr	r1, [sp, #0]
    1f2e:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    1f32:	4622      	mov	r2, r4
    1f34:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    1f38:	784c      	ldrb	r4, [r1, #1]
    1f3a:	2c20      	cmp	r4, #32
    1f3c:	d016      	beq.n	1f6c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x220>
    1f3e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1f42:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    1f46:	f8dc 8008 	ldr.w	r8, [ip, #8]
    1f4a:	f8dc c00c 	ldr.w	ip, [ip, #12]
    1f4e:	eba8 0800 	sub.w	r8, r8, r0
    1f52:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    1f56:	ebac 0100 	sub.w	r1, ip, r0
    1f5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1f5e:	4546      	cmp	r6, r8
    1f60:	bf98      	it	ls
    1f62:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    1f66:	d2e4      	bcs.n	1f32 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e6>
    1f68:	4589      	cmp	r9, r1
    1f6a:	d3e2      	bcc.n	1f32 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e6>
    1f6c:	2a20      	cmp	r2, #32
    1f6e:	d005      	beq.n	1f7c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x230>
    1f70:	2120      	movs	r1, #32
    1f72:	2004      	movs	r0, #4
    1f74:	9b00      	ldr	r3, [sp, #0]
    1f76:	f7ff f907 	bl	1188 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1f7a:	4604      	mov	r4, r0
    1f7c:	42ac      	cmp	r4, r5
    1f7e:	d115      	bne.n	1fac <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x260>
    1f80:	482f      	ldr	r0, [pc, #188]	; (2040 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f4>)
    1f82:	2800      	cmp	r0, #0
    1f84:	bf18      	it	ne
    1f86:	f3af 8000 	nopne.w
    1f8a:	f001 fb3d 	bl	3608 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1f8e:	4c28      	ldr	r4, [pc, #160]	; (2030 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2e4>)
    1f90:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    1f94:	2920      	cmp	r1, #32
    1f96:	d00d      	beq.n	1fb4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x268>
    1f98:	68e1      	ldr	r1, [r4, #12]
    1f9a:	1c82      	adds	r2, r0, #2
    1f9c:	1a51      	subs	r1, r2, r1
    1f9e:	0209      	lsls	r1, r1, #8
    1fa0:	17ca      	asrs	r2, r1, #31
    1fa2:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1fa6:	1209      	asrs	r1, r1, #8
    1fa8:	2900      	cmp	r1, #0
    1faa:	dd03      	ble.n	1fb4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x268>
    1fac:	b005      	add	sp, #20
    1fae:	2000      	movs	r0, #0
    1fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1fb4:	2d20      	cmp	r5, #32
    1fb6:	d00d      	beq.n	1fd4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x288>
    1fb8:	462a      	mov	r2, r5
    1fba:	9903      	ldr	r1, [sp, #12]
    1fbc:	f7ff fb16 	bl	15ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x264>
    1fc0:	b358      	cbz	r0, 201a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ce>
    1fc2:	9801      	ldr	r0, [sp, #4]
    1fc4:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    1fc8:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    1fcc:	b005      	add	sp, #20
    1fce:	2001      	movs	r0, #1
    1fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1fd4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1fd8:	b118      	cbz	r0, 1fe2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1fda:	f002 f831 	bl	4040 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1fde:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    1fe2:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1fe6:	b150      	cbz	r0, 1ffe <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2b2>
    1fe8:	4916      	ldr	r1, [pc, #88]	; (2044 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f8>)
    1fea:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1fee:	6008      	str	r0, [r1, #0]
    1ff0:	2005      	movs	r0, #5
    1ff2:	f001 fd57 	bl	3aa4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1ff6:	f002 f88b 	bl	4110 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1ffa:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    1ffe:	2004      	movs	r0, #4
    2000:	f001 fd50 	bl	3aa4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2004:	f001 fdb6 	bl	3b74 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2008:	2020      	movs	r0, #32
    200a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    200e:	480e      	ldr	r0, [pc, #56]	; (2048 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2fc>)
    2010:	6880      	ldr	r0, [r0, #8]
    2012:	6007      	str	r7, [r0, #0]
    2014:	480d      	ldr	r0, [pc, #52]	; (204c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x300>)
    2016:	6007      	str	r7, [r0, #0]
    2018:	e7d8      	b.n	1fcc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x280>
    201a:	462a      	mov	r2, r5
    201c:	2120      	movs	r1, #32
    201e:	2004      	movs	r0, #4
    2020:	9b04      	ldr	r3, [sp, #16]
    2022:	f7ff f8b1 	bl	1188 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    2026:	b005      	add	sp, #20
    2028:	2000      	movs	r0, #0
    202a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    202e:	0000      	.short	0x0000
    2030:	20000e6c 	.word	0x20000e6c
    2034:	003fffff 	.word	0x003fffff
    2038:	20000aec 	.word	0x20000aec
    203c:	20000dec 	.word	0x20000dec
    2040:	00000000 	.word	0x00000000
    2044:	4001f508 	.word	0x4001f508
    2048:	20000010 	.word	0x20000010
    204c:	40000508 	.word	0x40000508

00002050 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    2050:	4906      	ldr	r1, [pc, #24]	; (206c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    2052:	b510      	push	{r4, lr}
    2054:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    2058:	2a20      	cmp	r2, #32
    205a:	bf1c      	itt	ne
    205c:	7788      	strbne	r0, [r1, #30]
    205e:	bd10      	popne	{r4, pc}
    2060:	f240 31fd 	movw	r1, #1021	; 0x3fd
    2064:	2070      	movs	r0, #112	; 0x70
    2066:	f002 f9a5 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    206a:	0000      	.short	0x0000
    206c:	20000e6c 	.word	0x20000e6c

00002070 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    2070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2074:	4e5b      	ldr	r6, [pc, #364]	; (21e4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    2076:	4681      	mov	r9, r0
    2078:	b085      	sub	sp, #20
    207a:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    207e:	468a      	mov	sl, r1
    2080:	2820      	cmp	r0, #32
    2082:	d04d      	beq.n	2120 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    2084:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    2088:	f106 040c 	add.w	r4, r6, #12
    208c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2090:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    2094:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    2098:	2020      	movs	r0, #32
    209a:	f88d 0000 	strb.w	r0, [sp]
    209e:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    20a2:	aa03      	add	r2, sp, #12
    20a4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    20a8:	a901      	add	r1, sp, #4
    20aa:	f890 5020 	ldrb.w	r5, [r0, #32]
    20ae:	6930      	ldr	r0, [r6, #16]
    20b0:	9002      	str	r0, [sp, #8]
    20b2:	6830      	ldr	r0, [r6, #0]
    20b4:	4448      	add	r0, r9
    20b6:	f001 f951 	bl	335c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    20ba:	68f8      	ldr	r0, [r7, #12]
    20bc:	9901      	ldr	r1, [sp, #4]
    20be:	4a4a      	ldr	r2, [pc, #296]	; (21e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    20c0:	4408      	add	r0, r1
    20c2:	f1a9 0164 	sub.w	r1, r9, #100	; 0x64
    20c6:	4291      	cmp	r1, r2
    20c8:	d82f      	bhi.n	212a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    20ca:	68b9      	ldr	r1, [r7, #8]
    20cc:	1a41      	subs	r1, r0, r1
    20ce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    20d2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    20d6:	d228      	bcs.n	212a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    20d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    20dc:	6060      	str	r0, [r4, #4]
    20de:	4630      	mov	r0, r6
    20e0:	f884 a00c 	strb.w	sl, [r4, #12]
    20e4:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    20e8:	46ea      	mov	sl, sp
    20ea:	2d20      	cmp	r5, #32
    20ec:	bf1c      	itt	ne
    20ee:	493f      	ldrne	r1, [pc, #252]	; (21ec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    20f0:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    20f4:	d03c      	beq.n	2170 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    20f6:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    20fa:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    20fe:	6860      	ldr	r0, [r4, #4]
    2100:	68ba      	ldr	r2, [r7, #8]
    2102:	4621      	mov	r1, r4
    2104:	1a10      	subs	r0, r2, r0
    2106:	0200      	lsls	r0, r0, #8
    2108:	17c2      	asrs	r2, r0, #31
    210a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    210e:	f107 0608 	add.w	r6, r7, #8
    2112:	1200      	asrs	r0, r0, #8
    2114:	d41b      	bmi.n	214e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    2116:	8970      	ldrh	r0, [r6, #10]
    2118:	b350      	cbz	r0, 2170 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    211a:	8948      	ldrh	r0, [r1, #10]
    211c:	b148      	cbz	r0, 2132 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    211e:	e027      	b.n	2170 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    2120:	f640 3173 	movw	r1, #2931	; 0xb73
    2124:	2070      	movs	r0, #112	; 0x70
    2126:	f002 f945 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    212a:	b005      	add	sp, #20
    212c:	2001      	movs	r0, #1
    212e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2132:	4620      	mov	r0, r4
    2134:	f7ff fe56 	bl	1de4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    2138:	f001 f8f4 	bl	3324 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    213c:	6831      	ldr	r1, [r6, #0]
    213e:	1a08      	subs	r0, r1, r0
    2140:	0200      	lsls	r0, r0, #8
    2142:	17c1      	asrs	r1, r0, #31
    2144:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2148:	1200      	asrs	r0, r0, #8
    214a:	2833      	cmp	r0, #51	; 0x33
    214c:	da10      	bge.n	2170 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    214e:	f88a 5000 	strb.w	r5, [sl]
    2152:	7d39      	ldrb	r1, [r7, #20]
    2154:	7b20      	ldrb	r0, [r4, #12]
    2156:	4281      	cmp	r1, r0
    2158:	d805      	bhi.n	2166 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    215a:	9802      	ldr	r0, [sp, #8]
    215c:	6060      	str	r0, [r4, #4]
    215e:	b005      	add	sp, #20
    2160:	2002      	movs	r0, #2
    2162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2166:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    216a:	7845      	ldrb	r5, [r0, #1]
    216c:	2d20      	cmp	r5, #32
    216e:	d1c2      	bne.n	20f6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    2170:	2005      	movs	r0, #5
    2172:	f001 fc97 	bl	3aa4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2176:	4c1b      	ldr	r4, [pc, #108]	; (21e4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    2178:	f04f 30ff 	mov.w	r0, #4294967295
    217c:	60a0      	str	r0, [r4, #8]
    217e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    2182:	f89d 2000 	ldrb.w	r2, [sp]
    2186:	2120      	movs	r1, #32
    2188:	2a20      	cmp	r2, #32
    218a:	bf13      	iteet	ne
    218c:	2005      	movne	r0, #5
    218e:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    2192:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    2196:	f7fe fff7 	blne	1188 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    219a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    219e:	4913      	ldr	r1, [pc, #76]	; (21ec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    21a0:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    21a4:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    21a8:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    21ac:	7048      	strb	r0, [r1, #1]
    21ae:	6820      	ldr	r0, [r4, #0]
    21b0:	4448      	add	r0, r9
    21b2:	6020      	str	r0, [r4, #0]
    21b4:	2001      	movs	r0, #1
    21b6:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    21ba:	7e60      	ldrb	r0, [r4, #25]
    21bc:	2801      	cmp	r0, #1
    21be:	d105      	bne.n	21cc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    21c0:	6920      	ldr	r0, [r4, #16]
    21c2:	1e40      	subs	r0, r0, #1
    21c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    21c8:	f001 fabe 	bl	3748 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    21cc:	f89d 0000 	ldrb.w	r0, [sp]
    21d0:	2820      	cmp	r0, #32
    21d2:	d003      	beq.n	21dc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    21d4:	4806      	ldr	r0, [pc, #24]	; (21f0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    21d6:	7840      	ldrb	r0, [r0, #1]
    21d8:	f002 f9bc 	bl	4554 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    21dc:	b005      	add	sp, #20
    21de:	2000      	movs	r0, #0
    21e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21e4:	20000e6c 	.word	0x20000e6c
    21e8:	07a11f9c 	.word	0x07a11f9c
    21ec:	20000dec 	.word	0x20000dec
    21f0:	20000010 	.word	0x20000010

000021f4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    21f4:	4602      	mov	r2, r0
    21f6:	4b14      	ldr	r3, [pc, #80]	; (2248 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    21f8:	b510      	push	{r4, lr}
    21fa:	4408      	add	r0, r1
    21fc:	429a      	cmp	r2, r3
    21fe:	d904      	bls.n	220a <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    2200:	f240 6116 	movw	r1, #1558	; 0x616
    2204:	2070      	movs	r0, #112	; 0x70
    2206:	f002 f8d5 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    220a:	4a10      	ldr	r2, [pc, #64]	; (224c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    220c:	4291      	cmp	r1, r2
    220e:	dd04      	ble.n	221a <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    2210:	f240 6117 	movw	r1, #1559	; 0x617
    2214:	2070      	movs	r0, #112	; 0x70
    2216:	f002 f8cd 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    221a:	4a0d      	ldr	r2, [pc, #52]	; (2250 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    221c:	4291      	cmp	r1, r2
    221e:	da04      	bge.n	222a <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    2220:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    2224:	2070      	movs	r0, #112	; 0x70
    2226:	f002 f8c5 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    222a:	490a      	ldr	r1, [pc, #40]	; (2254 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    222c:	4281      	cmp	r1, r0
    222e:	bfde      	ittt	le
    2230:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2234:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2238:	bd10      	pople	{r4, pc}
    223a:	2800      	cmp	r0, #0
    223c:	bfbc      	itt	lt
    223e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2242:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2246:	bd10      	pop	{r4, pc}
    2248:	1e847fff 	.word	0x1e847fff
    224c:	07a12000 	.word	0x07a12000
    2250:	f85ee000 	.word	0xf85ee000
    2254:	1e848000 	.word	0x1e848000

00002258 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    2258:	4a10      	ldr	r2, [pc, #64]	; (229c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    225a:	1a0b      	subs	r3, r1, r0
    225c:	f102 0c01 	add.w	ip, r2, #1
    2260:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    2264:	bf3c      	itt	cc
    2266:	4618      	movcc	r0, r3
    2268:	4770      	bxcc	lr
    226a:	b510      	push	{r4, lr}
    226c:	1a44      	subs	r4, r0, r1
    226e:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    2272:	bf3c      	itt	cc
    2274:	4618      	movcc	r0, r3
    2276:	bd10      	popcc	{r4, pc}
    2278:	429a      	cmp	r2, r3
    227a:	d203      	bcs.n	2284 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    227c:	1a10      	subs	r0, r2, r0
    227e:	4408      	add	r0, r1
    2280:	1c40      	adds	r0, r0, #1
    2282:	bd10      	pop	{r4, pc}
    2284:	42a2      	cmp	r2, r4
    2286:	d204      	bcs.n	2292 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    2288:	1a51      	subs	r1, r2, r1
    228a:	4408      	add	r0, r1
    228c:	1c40      	adds	r0, r0, #1
    228e:	4240      	negs	r0, r0
    2290:	bd10      	pop	{r4, pc}
    2292:	f640 310b 	movw	r1, #2827	; 0xb0b
    2296:	2070      	movs	r0, #112	; 0x70
    2298:	f002 f88c 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    229c:	1e847fff 	.word	0x1e847fff

000022a0 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    22a0:	490e      	ldr	r1, [pc, #56]	; (22dc <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    22a2:	b510      	push	{r4, lr}
    22a4:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    22a8:	2820      	cmp	r0, #32
    22aa:	d012      	beq.n	22d2 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    22ac:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    22b0:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    22b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    22b8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    22bc:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    22c0:	6840      	ldr	r0, [r0, #4]
    22c2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    22c6:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    22ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    22ce:	2104      	movs	r1, #4
    22d0:	4710      	bx	r2
    22d2:	f640 01bb 	movw	r1, #2235	; 0x8bb
    22d6:	2070      	movs	r0, #112	; 0x70
    22d8:	f002 f86c 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22dc:	20000e6c 	.word	0x20000e6c

000022e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    22e0:	b570      	push	{r4, r5, r6, lr}
    22e2:	4d6a      	ldr	r5, [pc, #424]	; (248c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ac>)
    22e4:	496a      	ldr	r1, [pc, #424]	; (2490 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b0>)
    22e6:	2601      	movs	r6, #1
    22e8:	f505 7460 	add.w	r4, r5, #896	; 0x380
    22ec:	2808      	cmp	r0, #8
    22ee:	d27d      	bcs.n	23ec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    22f0:	e8df f000 	tbb	[pc, r0]
    22f4:	a9976104 	.word	0xa9976104
    22f8:	b3ae43c6 	.word	0xb3ae43c6
    22fc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    2300:	b918      	cbnz	r0, 230a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    2302:	f001 feb9 	bl	4078 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2306:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    230a:	8ae0      	ldrh	r0, [r4, #22]
    230c:	b110      	cbz	r0, 2314 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    230e:	f001 ffed 	bl	42ec <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2312:	b188      	cbz	r0, 2338 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    2314:	f7ff fcce 	bl	1cb4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x92c>
    2318:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    231c:	68a1      	ldr	r1, [r4, #8]
    231e:	f1b1 3fff 	cmp.w	r1, #4294967295
    2322:	d005      	beq.n	2330 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    2324:	2301      	movs	r3, #1
    2326:	2203      	movs	r2, #3
    2328:	2005      	movs	r0, #5
    232a:	f001 faf3 	bl	3914 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    232e:	b140      	cbz	r0, 2342 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    2330:	7e60      	ldrb	r0, [r4, #25]
    2332:	2801      	cmp	r0, #1
    2334:	d110      	bne.n	2358 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    2336:	e009      	b.n	234c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    2338:	f640 016f 	movw	r1, #2159	; 0x86f
    233c:	2070      	movs	r0, #112	; 0x70
    233e:	f002 f839 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2342:	f640 0174 	movw	r1, #2164	; 0x874
    2346:	2070      	movs	r0, #112	; 0x70
    2348:	f002 f834 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    234c:	6920      	ldr	r0, [r4, #16]
    234e:	1e40      	subs	r0, r0, #1
    2350:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2354:	f001 f9f8 	bl	3748 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    2358:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    235c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2360:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2364:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2368:	6840      	ldr	r0, [r0, #4]
    236a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    236e:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2372:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2376:	2101      	movs	r1, #1
    2378:	4710      	bx	r2
    237a:	f7ff fc9b 	bl	1cb4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x92c>
    237e:	f04f 30ff 	mov.w	r0, #4294967295
    2382:	60a0      	str	r0, [r4, #8]
    2384:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2388:	b180      	cbz	r0, 23ac <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xcc>
    238a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    238e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2392:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2396:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    239a:	6840      	ldr	r0, [r0, #4]
    239c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    23a0:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    23a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    23a8:	2106      	movs	r1, #6
    23aa:	4710      	bx	r2
    23ac:	f640 0185 	movw	r1, #2181	; 0x885
    23b0:	2070      	movs	r0, #112	; 0x70
    23b2:	f001 ffff 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23b6:	f7ff fc7d 	bl	1cb4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x92c>
    23ba:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    23be:	f001 ff95 	bl	42ec <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    23c2:	b118      	cbz	r0, 23cc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xec>
    23c4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    23c8:	b128      	cbz	r0, 23d6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf6>
    23ca:	e008      	b.n	23de <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    23cc:	f640 0195 	movw	r1, #2197	; 0x895
    23d0:	2070      	movs	r0, #112	; 0x70
    23d2:	f001 ffef 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23d6:	f001 fe4f 	bl	4078 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    23da:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    23de:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    23e2:	b168      	cbz	r0, 2400 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x120>
    23e4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    23e8:	492a      	ldr	r1, [pc, #168]	; (2494 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    23ea:	e000      	b.n	23ee <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    23ec:	e048      	b.n	2480 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a0>
    23ee:	6008      	str	r0, [r1, #0]
    23f0:	2005      	movs	r0, #5
    23f2:	f001 fb57 	bl	3aa4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    23f6:	f001 fe8b 	bl	4110 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    23fa:	2000      	movs	r0, #0
    23fc:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    2400:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2404:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2408:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    240c:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2410:	6840      	ldr	r0, [r0, #4]
    2412:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2416:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    241a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    241e:	2100      	movs	r1, #0
    2420:	4710      	bx	r2
    2422:	f001 fbf1 	bl	3c08 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    2426:	8ae0      	ldrh	r0, [r4, #22]
    2428:	b110      	cbz	r0, 2430 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x150>
    242a:	f001 ff5f 	bl	42ec <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    242e:	b128      	cbz	r0, 243c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    2430:	4819      	ldr	r0, [pc, #100]	; (2498 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    2432:	7800      	ldrb	r0, [r0, #0]
    2434:	2803      	cmp	r0, #3
    2436:	bf08      	it	eq
    2438:	7766      	strbeq	r6, [r4, #29]
    243a:	bd70      	pop	{r4, r5, r6, pc}
    243c:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    2440:	2070      	movs	r0, #112	; 0x70
    2442:	f001 ffb7 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2446:	4815      	ldr	r0, [pc, #84]	; (249c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    2448:	6006      	str	r6, [r0, #0]
    244a:	6888      	ldr	r0, [r1, #8]
    244c:	6006      	str	r6, [r0, #0]
    244e:	bd70      	pop	{r4, r5, r6, pc}
    2450:	7808      	ldrb	r0, [r1, #0]
    2452:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2456:	f002 b87d 	b.w	4554 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    245a:	f7ff fc2b 	bl	1cb4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x92c>
    245e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2462:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2466:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    246a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    246e:	6840      	ldr	r0, [r0, #4]
    2470:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2474:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2478:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    247c:	2105      	movs	r1, #5
    247e:	4710      	bx	r2
    2480:	f640 01b3 	movw	r1, #2227	; 0x8b3
    2484:	2070      	movs	r0, #112	; 0x70
    2486:	f001 ff95 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    248a:	0000      	.short	0x0000
    248c:	20000aec 	.word	0x20000aec
    2490:	20000010 	.word	0x20000010
    2494:	4001f508 	.word	0x4001f508
    2498:	20000012 	.word	0x20000012
    249c:	40000508 	.word	0x40000508

000024a0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    24a0:	4803      	ldr	r0, [pc, #12]	; (24b0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    24a2:	b510      	push	{r4, lr}
    24a4:	7840      	ldrb	r0, [r0, #1]
    24a6:	f009 fec2 	bl	c22e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    24aa:	b280      	uxth	r0, r0
    24ac:	bd10      	pop	{r4, pc}
    24ae:	0000      	.short	0x0000
    24b0:	20000012 	.word	0x20000012

000024b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    24b4:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24b8:	4682      	mov	sl, r0
    24ba:	48d1      	ldr	r0, [pc, #836]	; (2800 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>)
    24bc:	b08b      	sub	sp, #44	; 0x2c
    24be:	6800      	ldr	r0, [r0, #0]
    24c0:	4dd0      	ldr	r5, [pc, #832]	; (2804 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x350>)
    24c2:	05c0      	lsls	r0, r0, #23
    24c4:	0dc0      	lsrs	r0, r0, #23
    24c6:	d00e      	beq.n	24e6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    24c8:	3810      	subs	r0, #16
    24ca:	b240      	sxtb	r0, r0
    24cc:	2800      	cmp	r0, #0
    24ce:	bfb8      	it	lt
    24d0:	f000 000f 	andlt.w	r0, r0, #15
    24d4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    24d8:	bfac      	ite	ge
    24da:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    24de:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    24e2:	0940      	lsrs	r0, r0, #5
    24e4:	d00d      	beq.n	2502 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    24e6:	980c      	ldr	r0, [sp, #48]	; 0x30
    24e8:	f04f 0b00 	mov.w	fp, #0
    24ec:	7800      	ldrb	r0, [r0, #0]
    24ee:	2800      	cmp	r0, #0
    24f0:	bf18      	it	ne
    24f2:	2801      	cmpne	r0, #1
    24f4:	d018      	beq.n	2528 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    24f6:	f240 715c 	movw	r1, #1884	; 0x75c
    24fa:	f04f 0070 	mov.w	r0, #112	; 0x70
    24fe:	f001 ff59 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2502:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2506:	f04f 0b01 	mov.w	fp, #1
    250a:	2820      	cmp	r0, #32
    250c:	d007      	beq.n	251e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    250e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2510:	7800      	ldrb	r0, [r0, #0]
    2512:	b148      	cbz	r0, 2528 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2514:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    2518:	2070      	movs	r0, #112	; 0x70
    251a:	f001 ff4b 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    251e:	f240 7155 	movw	r1, #1877	; 0x755
    2522:	2070      	movs	r0, #112	; 0x70
    2524:	f001 ff46 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2528:	4cb7      	ldr	r4, [pc, #732]	; (2808 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x354>)
    252a:	b124      	cbz	r4, 2536 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    252c:	2100      	movs	r1, #0
    252e:	f240 705f 	movw	r0, #1887	; 0x75f
    2532:	f3af 8000 	nop.w
    2536:	49b5      	ldr	r1, [pc, #724]	; (280c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x358>)
    2538:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    253c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    2540:	f04f 0801 	mov.w	r8, #1
    2544:	9000      	str	r0, [sp, #0]
    2546:	b124      	cbz	r4, 2552 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    2548:	2100      	movs	r1, #0
    254a:	f240 7067 	movw	r0, #1895	; 0x767
    254e:	f3af 8000 	nop.w
    2552:	f1b8 0f00 	cmp.w	r8, #0
    2556:	d009      	beq.n	256c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    2558:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    255c:	f04f 0900 	mov.w	r9, #0
    2560:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    2564:	f1bb 0f00 	cmp.w	fp, #0
    2568:	d007      	beq.n	257a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    256a:	e02e      	b.n	25ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    256c:	48a8      	ldr	r0, [pc, #672]	; (2810 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>)
    256e:	2800      	cmp	r0, #0
    2570:	bf18      	it	ne
    2572:	f3af 8000 	nopne.w
    2576:	b662      	cpsie	i
    2578:	e7ee      	b.n	2558 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    257a:	4637      	mov	r7, r6
    257c:	2001      	movs	r0, #1
    257e:	ea20 0607 	bic.w	r6, r0, r7
    2582:	48a4      	ldr	r0, [pc, #656]	; (2814 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x360>)
    2584:	2240      	movs	r2, #64	; 0x40
    2586:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    258a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    258e:	f009 ffbc 	bl	c50a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2592:	b124      	cbz	r4, 259e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    2594:	2100      	movs	r1, #0
    2596:	f240 50da 	movw	r0, #1498	; 0x5da
    259a:	f3af 8000 	nop.w
    259e:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    25a2:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    25a6:	6a09      	ldr	r1, [r1, #32]
    25a8:	6201      	str	r1, [r0, #32]
    25aa:	b124      	cbz	r4, 25b6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    25ac:	2100      	movs	r1, #0
    25ae:	f240 50de 	movw	r0, #1502	; 0x5de
    25b2:	f3af 8000 	nop.w
    25b6:	b124      	cbz	r4, 25c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    25b8:	2100      	movs	r1, #0
    25ba:	f240 7071 	movw	r0, #1905	; 0x771
    25be:	f3af 8000 	nop.w
    25c2:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    25c6:	2800      	cmp	r0, #0
    25c8:	d1bd      	bne.n	2546 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    25ca:	b124      	cbz	r4, 25d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    25cc:	2100      	movs	r1, #0
    25ce:	f240 707b 	movw	r0, #1915	; 0x77b
    25d2:	f3af 8000 	nop.w
    25d6:	f001 f817 	bl	3608 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    25da:	4680      	mov	r8, r0
    25dc:	4633      	mov	r3, r6
    25de:	aa06      	add	r2, sp, #24
    25e0:	990c      	ldr	r1, [sp, #48]	; 0x30
    25e2:	f7ff fa93 	bl	1b0c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x784>
    25e6:	b124      	cbz	r4, 25f2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    25e8:	2100      	movs	r1, #0
    25ea:	f240 7082 	movw	r0, #1922	; 0x782
    25ee:	f3af 8000 	nop.w
    25f2:	4988      	ldr	r1, [pc, #544]	; (2814 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x360>)
    25f4:	a806      	add	r0, sp, #24
    25f6:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    25fa:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    25fe:	2901      	cmp	r1, #1
    2600:	bf18      	it	ne
    2602:	2902      	cmpne	r1, #2
    2604:	d13e      	bne.n	2684 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    2606:	9906      	ldr	r1, [sp, #24]
    2608:	9b07      	ldr	r3, [sp, #28]
    260a:	eba1 0108 	sub.w	r1, r1, r8
    260e:	4a82      	ldr	r2, [pc, #520]	; (2818 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>)
    2610:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2614:	eba3 0308 	sub.w	r3, r3, r8
    2618:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    261c:	2902      	cmp	r1, #2
    261e:	d36a      	bcc.n	26f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x242>
    2620:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    2624:	d267      	bcs.n	26f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x242>
    2626:	429a      	cmp	r2, r3
    2628:	d365      	bcc.n	26f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x242>
    262a:	f04f 0901 	mov.w	r9, #1
    262e:	ab01      	add	r3, sp, #4
    2630:	aa05      	add	r2, sp, #20
    2632:	4631      	mov	r1, r6
    2634:	f7fe ff5a 	bl	14ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x164>
    2638:	2800      	cmp	r0, #0
    263a:	d064      	beq.n	2706 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x252>
    263c:	f89d 1014 	ldrb.w	r1, [sp, #20]
    2640:	f89d 2004 	ldrb.w	r2, [sp, #4]
    2644:	4633      	mov	r3, r6
    2646:	428a      	cmp	r2, r1
    2648:	d061      	beq.n	270e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x25a>
    264a:	2005      	movs	r0, #5
    264c:	f7fe fd9c 	bl	1188 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    2650:	ea4f 0100 	mov.w	r1, r0
    2654:	eb07 004a 	add.w	r0, r7, sl, lsl #1
    2658:	7041      	strb	r1, [r0, #1]
    265a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    265e:	2820      	cmp	r0, #32
    2660:	bf03      	ittte	eq
    2662:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    2666:	f880 a020 	strbeq.w	sl, [r0, #32]
    266a:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    266e:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    2672:	bf18      	it	ne
    2674:	f880 a001 	strbne.w	sl, [r0, #1]
    2678:	4632      	mov	r2, r6
    267a:	4651      	mov	r1, sl
    267c:	f05f 0003 	movs.w	r0, #3
    2680:	f7ff fbea 	bl	1e58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    2684:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2688:	f890 7023 	ldrb.w	r7, [r0, #35]	; 0x23
    268c:	b124      	cbz	r4, 2698 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e4>
    268e:	2100      	movs	r1, #0
    2690:	f240 7089 	movw	r0, #1929	; 0x789
    2694:	f3af 8000 	nop.w
    2698:	4860      	ldr	r0, [pc, #384]	; (281c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x368>)
    269a:	2800      	cmp	r0, #0
    269c:	bf18      	it	ne
    269e:	f3af 8000 	nopne.w
    26a2:	f3ef 8810 	mrs	r8, PRIMASK
    26a6:	b672      	cpsid	i
    26a8:	b124      	cbz	r4, 26b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x200>
    26aa:	2100      	movs	r1, #0
    26ac:	f240 708f 	movw	r0, #1935	; 0x78f
    26b0:	f3af 8000 	nop.w
    26b4:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    26b8:	2800      	cmp	r0, #0
    26ba:	f47f af44 	bne.w	2546 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    26be:	b124      	cbz	r4, 26ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x216>
    26c0:	2100      	movs	r1, #0
    26c2:	f240 7097 	movw	r0, #1943	; 0x797
    26c6:	f3af 8000 	nop.w
    26ca:	f10d 0e18 	add.w	lr, sp, #24
    26ce:	9800      	ldr	r0, [sp, #0]
    26d0:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    26d4:	f100 0008 	add.w	r0, r0, #8
    26d8:	f1b9 0f00 	cmp.w	r9, #0
    26dc:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    26e0:	d042      	beq.n	2768 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2b4>
    26e2:	b124      	cbz	r4, 26ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x23a>
    26e4:	2100      	movs	r1, #0
    26e6:	f240 70a4 	movw	r0, #1956	; 0x7a4
    26ea:	f3af 8000 	nop.w
    26ee:	f1bb 0f00 	cmp.w	fp, #0
    26f2:	d12b      	bne.n	274c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    26f4:	e015      	b.n	2722 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26e>
    26f6:	4632      	mov	r2, r6
    26f8:	4651      	mov	r1, sl
    26fa:	2004      	movs	r0, #4
    26fc:	f7ff fbac 	bl	1e58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    2700:	f04f 0901 	mov.w	r9, #1
    2704:	e7be      	b.n	2684 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    2706:	4632      	mov	r2, r6
    2708:	4651      	mov	r1, sl
    270a:	2004      	movs	r0, #4
    270c:	e7b8      	b.n	2680 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1cc>
    270e:	2920      	cmp	r1, #32
    2710:	bf19      	ittee	ne
    2712:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    2716:	7841      	ldrbne	r1, [r0, #1]
    2718:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    271c:	f890 1020 	ldrbeq.w	r1, [r0, #32]
    2720:	e798      	b.n	2654 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a0>
    2722:	b19f      	cbz	r7, 274c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    2724:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2728:	2820      	cmp	r0, #32
    272a:	d10f      	bne.n	274c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    272c:	b124      	cbz	r4, 2738 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    272e:	2100      	movs	r1, #0
    2730:	f240 70a9 	movw	r0, #1961	; 0x7a9
    2734:	f3af 8000 	nop.w
    2738:	4631      	mov	r1, r6
    273a:	2002      	movs	r0, #2
    273c:	f7ff fbbc 	bl	1eb8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x16c>
    2740:	b920      	cbnz	r0, 274c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    2742:	980c      	ldr	r0, [sp, #48]	; 0x30
    2744:	7800      	ldrb	r0, [r0, #0]
    2746:	b3e8      	cbz	r0, 27c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x310>
    2748:	2801      	cmp	r0, #1
    274a:	d049      	beq.n	27e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    274c:	b124      	cbz	r4, 2758 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a4>
    274e:	2100      	movs	r1, #0
    2750:	f240 70c6 	movw	r0, #1990	; 0x7c6
    2754:	f3af 8000 	nop.w
    2758:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    275c:	2001      	movs	r0, #1
    275e:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    2762:	bf00      	nop
    2764:	f04f 0901 	mov.w	r9, #1
    2768:	b124      	cbz	r4, 2774 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c0>
    276a:	2100      	movs	r1, #0
    276c:	f240 70cf 	movw	r0, #1999	; 0x7cf
    2770:	f3af 8000 	nop.w
    2774:	f1b8 0f00 	cmp.w	r8, #0
    2778:	d03b      	beq.n	27f2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33e>
    277a:	b124      	cbz	r4, 2786 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    277c:	2100      	movs	r1, #0
    277e:	f240 70d3 	movw	r0, #2003	; 0x7d3
    2782:	f3af 8000 	nop.w
    2786:	f1b9 0f00 	cmp.w	r9, #0
    278a:	d011      	beq.n	27b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    278c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2790:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2794:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    2798:	2820      	cmp	r0, #32
    279a:	d009      	beq.n	27b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    279c:	b124      	cbz	r4, 27a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    279e:	2100      	movs	r1, #0
    27a0:	f240 70da 	movw	r0, #2010	; 0x7da
    27a4:	f3af 8000 	nop.w
    27a8:	481d      	ldr	r0, [pc, #116]	; (2820 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36c>)
    27aa:	7840      	ldrb	r0, [r0, #1]
    27ac:	f001 fed2 	bl	4554 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    27b0:	b124      	cbz	r4, 27bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x308>
    27b2:	2100      	movs	r1, #0
    27b4:	f240 70df 	movw	r0, #2015	; 0x7df
    27b8:	f3af 8000 	nop.w
    27bc:	b00d      	add	sp, #52	; 0x34
    27be:	4648      	mov	r0, r9
    27c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27c4:	e7ff      	b.n	27c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x312>
    27c6:	b124      	cbz	r4, 27d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x31e>
    27c8:	2100      	movs	r1, #0
    27ca:	f240 70b1 	movw	r0, #1969	; 0x7b1
    27ce:	f3af 8000 	nop.w
    27d2:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    27d6:	4651      	mov	r1, sl
    27d8:	2004      	movs	r0, #4
    27da:	f7ff fb3d 	bl	1e58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    27de:	e7c1      	b.n	2764 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2b0>
    27e0:	2c00      	cmp	r4, #0
    27e2:	f43f aeb0 	beq.w	2546 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    27e6:	2100      	movs	r1, #0
    27e8:	f240 70bc 	movw	r0, #1980	; 0x7bc
    27ec:	f3af 8000 	nop.w
    27f0:	e6a9      	b.n	2546 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    27f2:	4807      	ldr	r0, [pc, #28]	; (2810 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>)
    27f4:	2800      	cmp	r0, #0
    27f6:	bf18      	it	ne
    27f8:	f3af 8000 	nopne.w
    27fc:	b662      	cpsie	i
    27fe:	e7bc      	b.n	277a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c6>
    2800:	e000ed04 	.word	0xe000ed04
    2804:	20000e6c 	.word	0x20000e6c
    2808:	00000000 	.word	0x00000000
    280c:	20000aec 	.word	0x20000aec
    2810:	00000000 	.word	0x00000000
    2814:	20000dec 	.word	0x20000dec
    2818:	003fffff 	.word	0x003fffff
    281c:	00000000 	.word	0x00000000
    2820:	20000010 	.word	0x20000010

00002824 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    2824:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2828:	48a3      	ldr	r0, [pc, #652]	; (2ab8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x294>)
    282a:	b086      	sub	sp, #24
    282c:	6800      	ldr	r0, [r0, #0]
    282e:	05c0      	lsls	r0, r0, #23
    2830:	0dc0      	lsrs	r0, r0, #23
    2832:	d011      	beq.n	2858 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    2834:	3810      	subs	r0, #16
    2836:	b240      	sxtb	r0, r0
    2838:	2800      	cmp	r0, #0
    283a:	bfb8      	it	lt
    283c:	f000 000f 	andlt.w	r0, r0, #15
    2840:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2844:	bfac      	ite	ge
    2846:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    284a:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    284e:	0940      	lsrs	r0, r0, #5
    2850:	bf08      	it	eq
    2852:	f04f 0901 	moveq.w	r9, #1
    2856:	d001      	beq.n	285c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    2858:	f04f 0900 	mov.w	r9, #0
    285c:	9806      	ldr	r0, [sp, #24]
    285e:	7800      	ldrb	r0, [r0, #0]
    2860:	2800      	cmp	r0, #0
    2862:	f04f 0000 	mov.w	r0, #0
    2866:	bf1c      	itt	ne
    2868:	b007      	addne	sp, #28
    286a:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    286e:	f8df a24c 	ldr.w	sl, [pc, #588]	; 2abc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x298>
    2872:	4d93      	ldr	r5, [pc, #588]	; (2ac0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x29c>)
    2874:	4c93      	ldr	r4, [pc, #588]	; (2ac4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a0>)
    2876:	f04f 0b00 	mov.w	fp, #0
    287a:	9004      	str	r0, [sp, #16]
    287c:	b125      	cbz	r5, 2888 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    287e:	2100      	movs	r1, #0
    2880:	f240 6065 	movw	r0, #1637	; 0x665
    2884:	f3af 8000 	nop.w
    2888:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    288c:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    2890:	f04f 0800 	mov.w	r8, #0
    2894:	b125      	cbz	r5, 28a0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    2896:	2100      	movs	r1, #0
    2898:	f240 606a 	movw	r0, #1642	; 0x66a
    289c:	f3af 8000 	nop.w
    28a0:	f1b9 0f00 	cmp.w	r9, #0
    28a4:	d11d      	bne.n	28e2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    28a6:	4637      	mov	r7, r6
    28a8:	2001      	movs	r0, #1
    28aa:	ea20 0607 	bic.w	r6, r0, r7
    28ae:	4886      	ldr	r0, [pc, #536]	; (2ac8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a4>)
    28b0:	2240      	movs	r2, #64	; 0x40
    28b2:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    28b6:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    28ba:	f009 fe26 	bl	c50a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    28be:	b125      	cbz	r5, 28ca <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    28c0:	2100      	movs	r1, #0
    28c2:	f240 50da 	movw	r0, #1498	; 0x5da
    28c6:	f3af 8000 	nop.w
    28ca:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    28ce:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    28d2:	6a09      	ldr	r1, [r1, #32]
    28d4:	6201      	str	r1, [r0, #32]
    28d6:	b125      	cbz	r5, 28e2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    28d8:	2100      	movs	r1, #0
    28da:	f240 50de 	movw	r0, #1502	; 0x5de
    28de:	f3af 8000 	nop.w
    28e2:	b125      	cbz	r5, 28ee <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    28e4:	2100      	movs	r1, #0
    28e6:	f240 6072 	movw	r0, #1650	; 0x672
    28ea:	f3af 8000 	nop.w
    28ee:	f000 fe8b 	bl	3608 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    28f2:	4607      	mov	r7, r0
    28f4:	4633      	mov	r3, r6
    28f6:	466a      	mov	r2, sp
    28f8:	9906      	ldr	r1, [sp, #24]
    28fa:	f7ff f907 	bl	1b0c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x784>
    28fe:	b125      	cbz	r5, 290a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    2900:	2100      	movs	r1, #0
    2902:	f44f 60cf 	mov.w	r0, #1656	; 0x678
    2906:	f3af 8000 	nop.w
    290a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    290e:	2820      	cmp	r0, #32
    2910:	d014      	beq.n	293c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    2912:	6920      	ldr	r0, [r4, #16]
    2914:	9900      	ldr	r1, [sp, #0]
    2916:	1a09      	subs	r1, r1, r0
    2918:	0209      	lsls	r1, r1, #8
    291a:	17ca      	asrs	r2, r1, #31
    291c:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    2920:	1209      	asrs	r1, r1, #8
    2922:	d50b      	bpl.n	293c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    2924:	e9dd 2100 	ldrd	r2, r1, [sp]
    2928:	1a89      	subs	r1, r1, r2
    292a:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    292e:	4408      	add	r0, r1
    2930:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2934:	e9cd 2000 	strd	r2, r0, [sp]
    2938:	f04f 0801 	mov.w	r8, #1
    293c:	b14d      	cbz	r5, 2952 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    293e:	2100      	movs	r1, #0
    2940:	f240 6082 	movw	r0, #1666	; 0x682
    2944:	f3af 8000 	nop.w
    2948:	2100      	movs	r1, #0
    294a:	f44f 60d1 	mov.w	r0, #1672	; 0x688
    294e:	f3af 8000 	nop.w
    2952:	9800      	ldr	r0, [sp, #0]
    2954:	9901      	ldr	r1, [sp, #4]
    2956:	1bc0      	subs	r0, r0, r7
    2958:	1bc9      	subs	r1, r1, r7
    295a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    295e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2962:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2966:	d205      	bcs.n	2974 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    2968:	458a      	cmp	sl, r1
    296a:	d303      	bcc.n	2974 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    296c:	f1b9 0f00 	cmp.w	r9, #0
    2970:	d10c      	bne.n	298c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    2972:	e003      	b.n	297c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    2974:	f1b9 0f00 	cmp.w	r9, #0
    2978:	d038      	beq.n	29ec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    297a:	e094      	b.n	2aa6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    297c:	4633      	mov	r3, r6
    297e:	463a      	mov	r2, r7
    2980:	4669      	mov	r1, sp
    2982:	4852      	ldr	r0, [pc, #328]	; (2acc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    2984:	f7fe fc3c 	bl	1200 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    2988:	ea48 0800 	orr.w	r8, r8, r0
    298c:	f1b8 0f00 	cmp.w	r8, #0
    2990:	d022      	beq.n	29d8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b4>
    2992:	9800      	ldr	r0, [sp, #0]
    2994:	f009 fc4b 	bl	c22e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2998:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    299c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    29a0:	4b4b      	ldr	r3, [pc, #300]	; (2ad0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    29a2:	4411      	add	r1, r2
    29a4:	1c49      	adds	r1, r1, #1
    29a6:	1842      	adds	r2, r0, r1
    29a8:	4298      	cmp	r0, r3
    29aa:	d841      	bhi.n	2a30 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20c>
    29ac:	4847      	ldr	r0, [pc, #284]	; (2acc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    29ae:	4281      	cmp	r1, r0
    29b0:	dc5a      	bgt.n	2a68 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    29b2:	4240      	negs	r0, r0
    29b4:	4281      	cmp	r1, r0
    29b6:	db5f      	blt.n	2a78 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    29b8:	1c58      	adds	r0, r3, #1
    29ba:	4290      	cmp	r0, r2
    29bc:	bfdc      	itt	le
    29be:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    29c2:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    29c6:	dd05      	ble.n	29d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    29c8:	2a00      	cmp	r2, #0
    29ca:	bfbc      	itt	lt
    29cc:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    29d0:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    29d4:	9806      	ldr	r0, [sp, #24]
    29d6:	60c2      	str	r2, [r0, #12]
    29d8:	2001      	movs	r0, #1
    29da:	9004      	str	r0, [sp, #16]
    29dc:	2d00      	cmp	r5, #0
    29de:	d062      	beq.n	2aa6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    29e0:	2100      	movs	r1, #0
    29e2:	f240 609b 	movw	r0, #1691	; 0x69b
    29e6:	f3af 8000 	nop.w
    29ea:	e05c      	b.n	2aa6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    29ec:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    29f0:	aa05      	add	r2, sp, #20
    29f2:	a904      	add	r1, sp, #16
    29f4:	f000 fcb2 	bl	335c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    29f8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    29fc:	2820      	cmp	r0, #32
    29fe:	d01c      	beq.n	2a3a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x216>
    2a00:	6920      	ldr	r0, [r4, #16]
    2a02:	1d40      	adds	r0, r0, #5
    2a04:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2a08:	e9dd 2100 	ldrd	r2, r1, [sp]
    2a0c:	1a89      	subs	r1, r1, r2
    2a0e:	4401      	add	r1, r0
    2a10:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2a14:	e9cd 0100 	strd	r0, r1, [sp]
    2a18:	f009 fc09 	bl	c22e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2a1c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2a20:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2a24:	4b2a      	ldr	r3, [pc, #168]	; (2ad0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    2a26:	4411      	add	r1, r2
    2a28:	1c49      	adds	r1, r1, #1
    2a2a:	1842      	adds	r2, r0, r1
    2a2c:	4298      	cmp	r0, r3
    2a2e:	d918      	bls.n	2a62 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x23e>
    2a30:	f240 6116 	movw	r1, #1558	; 0x616
    2a34:	2070      	movs	r0, #112	; 0x70
    2a36:	f001 fcbd 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a3a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    2a3e:	f107 0609 	add.w	r6, r7, #9
    2a42:	b120      	cbz	r0, 2a4e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x22a>
    2a44:	f001 fc52 	bl	42ec <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2a48:	2800      	cmp	r0, #0
    2a4a:	bf08      	it	eq
    2a4c:	3632      	addeq	r6, #50	; 0x32
    2a4e:	4821      	ldr	r0, [pc, #132]	; (2ad4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2a50:	7841      	ldrb	r1, [r0, #1]
    2a52:	9804      	ldr	r0, [sp, #16]
    2a54:	4281      	cmp	r1, r0
    2a56:	bf84      	itt	hi
    2a58:	1a08      	subhi	r0, r1, r0
    2a5a:	4406      	addhi	r6, r0
    2a5c:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    2a60:	e7d2      	b.n	2a08 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e4>
    2a62:	481a      	ldr	r0, [pc, #104]	; (2acc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    2a64:	4281      	cmp	r1, r0
    2a66:	dd04      	ble.n	2a72 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24e>
    2a68:	f240 6117 	movw	r1, #1559	; 0x617
    2a6c:	2070      	movs	r0, #112	; 0x70
    2a6e:	f001 fca1 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a72:	4819      	ldr	r0, [pc, #100]	; (2ad8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    2a74:	4281      	cmp	r1, r0
    2a76:	da04      	bge.n	2a82 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    2a78:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    2a7c:	2070      	movs	r0, #112	; 0x70
    2a7e:	f001 fc99 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a82:	4816      	ldr	r0, [pc, #88]	; (2adc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>)
    2a84:	4290      	cmp	r0, r2
    2a86:	bfdc      	itt	le
    2a88:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    2a8c:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    2a90:	dd05      	ble.n	2a9e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27a>
    2a92:	2a00      	cmp	r2, #0
    2a94:	bfbc      	itt	lt
    2a96:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    2a9a:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    2a9e:	9806      	ldr	r0, [sp, #24]
    2aa0:	60c2      	str	r2, [r0, #12]
    2aa2:	2001      	movs	r0, #1
    2aa4:	9004      	str	r0, [sp, #16]
    2aa6:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    2aaa:	2800      	cmp	r0, #0
    2aac:	f47f aee6 	bne.w	287c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    2ab0:	9804      	ldr	r0, [sp, #16]
    2ab2:	b007      	add	sp, #28
    2ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ab8:	e000ed04 	.word	0xe000ed04
    2abc:	003fffff 	.word	0x003fffff
    2ac0:	00000000 	.word	0x00000000
    2ac4:	20000e6c 	.word	0x20000e6c
    2ac8:	20000dec 	.word	0x20000dec
    2acc:	07a12000 	.word	0x07a12000
    2ad0:	1e847fff 	.word	0x1e847fff
    2ad4:	20000012 	.word	0x20000012
    2ad8:	f85ee000 	.word	0xf85ee000
    2adc:	1e848000 	.word	0x1e848000

00002ae0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    2ae0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ae4:	4d80      	ldr	r5, [pc, #512]	; (2ce8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x208>)
    2ae6:	b08c      	sub	sp, #48	; 0x30
    2ae8:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2aec:	2000      	movs	r0, #0
    2aee:	9009      	str	r0, [sp, #36]	; 0x24
    2af0:	2001      	movs	r0, #1
    2af2:	4c7e      	ldr	r4, [pc, #504]	; (2cec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>)
    2af4:	f04f 0800 	mov.w	r8, #0
    2af8:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    2afc:	4683      	mov	fp, r0
    2afe:	9008      	str	r0, [sp, #32]
    2b00:	b124      	cbz	r4, 2b0c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    2b02:	2100      	movs	r1, #0
    2b04:	f240 70ee 	movw	r0, #2030	; 0x7ee
    2b08:	f3af 8000 	nop.w
    2b0c:	9808      	ldr	r0, [sp, #32]
    2b0e:	b390      	cbz	r0, 2b76 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    2b10:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    2b14:	b124      	cbz	r4, 2b20 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x40>
    2b16:	2100      	movs	r1, #0
    2b18:	f240 70f3 	movw	r0, #2035	; 0x7f3
    2b1c:	f3af 8000 	nop.w
    2b20:	f895 902e 	ldrb.w	r9, [r5, #46]	; 0x2e
    2b24:	2240      	movs	r2, #64	; 0x40
    2b26:	ea2b 0609 	bic.w	r6, fp, r9
    2b2a:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    2b2e:	eb07 1189 	add.w	r1, r7, r9, lsl #6
    2b32:	4682      	mov	sl, r0
    2b34:	f009 fce9 	bl	c50a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2b38:	b124      	cbz	r4, 2b44 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x64>
    2b3a:	2100      	movs	r1, #0
    2b3c:	f240 50da 	movw	r0, #1498	; 0x5da
    2b40:	f3af 8000 	nop.w
    2b44:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2b48:	eb05 0189 	add.w	r1, r5, r9, lsl #2
    2b4c:	9000      	str	r0, [sp, #0]
    2b4e:	6a09      	ldr	r1, [r1, #32]
    2b50:	6201      	str	r1, [r0, #32]
    2b52:	b124      	cbz	r4, 2b5e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x7e>
    2b54:	2100      	movs	r1, #0
    2b56:	f240 50de 	movw	r0, #1502	; 0x5de
    2b5a:	f3af 8000 	nop.w
    2b5e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2b62:	b180      	cbz	r0, 2b86 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa6>
    2b64:	2c00      	cmp	r4, #0
    2b66:	bf1c      	itt	ne
    2b68:	2100      	movne	r1, #0
    2b6a:	f240 70f9 	movwne	r0, #2041	; 0x7f9
    2b6e:	d0c7      	beq.n	2b00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2b70:	f3af 8000 	nop.w
    2b74:	e7c4      	b.n	2b00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2b76:	e7ff      	b.n	2b78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x98>
    2b78:	485d      	ldr	r0, [pc, #372]	; (2cf0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    2b7a:	2800      	cmp	r0, #0
    2b7c:	bf18      	it	ne
    2b7e:	f3af 8000 	nopne.w
    2b82:	b662      	cpsie	i
    2b84:	e7c4      	b.n	2b10 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x30>
    2b86:	b124      	cbz	r4, 2b92 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb2>
    2b88:	2100      	movs	r1, #0
    2b8a:	f240 70fd 	movw	r0, #2045	; 0x7fd
    2b8e:	f3af 8000 	nop.w
    2b92:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b94:	f81a 0010 	ldrb.w	r0, [sl, r0, lsl #1]
    2b98:	2803      	cmp	r0, #3
    2b9a:	d178      	bne.n	2c8e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    2b9c:	f8dd 9000 	ldr.w	r9, [sp]
    2ba0:	f8cd 9018 	str.w	r9, [sp, #24]
    2ba4:	990c      	ldr	r1, [sp, #48]	; 0x30
    2ba6:	f899 0020 	ldrb.w	r0, [r9, #32]
    2baa:	4288      	cmp	r0, r1
    2bac:	bf14      	ite	ne
    2bae:	f04f 0a00 	movne.w	sl, #0
    2bb2:	f04f 0a01 	moveq.w	sl, #1
    2bb6:	f109 0c20 	add.w	ip, r9, #32
    2bba:	4686      	mov	lr, r0
    2bbc:	2220      	movs	r2, #32
    2bbe:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    2bc2:	e003      	b.n	2bcc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xec>
    2bc4:	4602      	mov	r2, r0
    2bc6:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2bca:	7840      	ldrb	r0, [r0, #1]
    2bcc:	4288      	cmp	r0, r1
    2bce:	d002      	beq.n	2bd6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    2bd0:	2820      	cmp	r0, #32
    2bd2:	d00a      	beq.n	2bea <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    2bd4:	e7f6      	b.n	2bc4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xe4>
    2bd6:	2820      	cmp	r0, #32
    2bd8:	d007      	beq.n	2bea <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    2bda:	4586      	cmp	lr, r0
    2bdc:	d107      	bne.n	2bee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    2bde:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    2be2:	7840      	ldrb	r0, [r0, #1]
    2be4:	f88c 0000 	strb.w	r0, [ip]
    2be8:	e007      	b.n	2bfa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    2bea:	4640      	mov	r0, r8
    2bec:	e00c      	b.n	2c08 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x128>
    2bee:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2bf2:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2bf6:	7840      	ldrb	r0, [r0, #1]
    2bf8:	7048      	strb	r0, [r1, #1]
    2bfa:	b124      	cbz	r4, 2c06 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x126>
    2bfc:	2100      	movs	r1, #0
    2bfe:	f240 5044 	movw	r0, #1348	; 0x544
    2c02:	f3af 8000 	nop.w
    2c06:	4658      	mov	r0, fp
    2c08:	ea10 0f0a 	tst.w	r0, sl
    2c0c:	bf18      	it	ne
    2c0e:	f889 b023 	strbne.w	fp, [r9, #35]	; 0x23
    2c12:	b3e0      	cbz	r0, 2c8e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    2c14:	b124      	cbz	r4, 2c20 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x140>
    2c16:	2100      	movs	r1, #0
    2c18:	f640 0002 	movw	r0, #2050	; 0x802
    2c1c:	f3af 8000 	nop.w
    2c20:	4632      	mov	r2, r6
    2c22:	2001      	movs	r0, #1
    2c24:	990c      	ldr	r1, [sp, #48]	; 0x30
    2c26:	f7ff f917 	bl	1e58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    2c2a:	9806      	ldr	r0, [sp, #24]
    2c2c:	f890 9023 	ldrb.w	r9, [r0, #35]	; 0x23
    2c30:	b124      	cbz	r4, 2c3c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x15c>
    2c32:	2100      	movs	r1, #0
    2c34:	f640 000d 	movw	r0, #2061	; 0x80d
    2c38:	f3af 8000 	nop.w
    2c3c:	482d      	ldr	r0, [pc, #180]	; (2cf4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x214>)
    2c3e:	2800      	cmp	r0, #0
    2c40:	bf18      	it	ne
    2c42:	f3af 8000 	nopne.w
    2c46:	f3ef 8010 	mrs	r0, PRIMASK
    2c4a:	b672      	cpsid	i
    2c4c:	9008      	str	r0, [sp, #32]
    2c4e:	b124      	cbz	r4, 2c5a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x17a>
    2c50:	2100      	movs	r1, #0
    2c52:	f640 0012 	movw	r0, #2066	; 0x812
    2c56:	f3af 8000 	nop.w
    2c5a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2c5e:	b138      	cbz	r0, 2c70 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x190>
    2c60:	2c00      	cmp	r4, #0
    2c62:	bf1c      	itt	ne
    2c64:	2100      	movne	r1, #0
    2c66:	f640 0016 	movwne	r0, #2070	; 0x816
    2c6a:	f43f af49 	beq.w	2b00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2c6e:	e77f      	b.n	2b70 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x90>
    2c70:	f1b9 0f00 	cmp.w	r9, #0
    2c74:	d008      	beq.n	2c88 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    2c76:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2c7a:	2820      	cmp	r0, #32
    2c7c:	d104      	bne.n	2c88 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    2c7e:	4631      	mov	r1, r6
    2c80:	2002      	movs	r0, #2
    2c82:	f7ff f919 	bl	1eb8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x16c>
    2c86:	b1f8      	cbz	r0, 2cc8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    2c88:	b134      	cbz	r4, 2c98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b8>
    2c8a:	2100      	movs	r1, #0
    2c8c:	e000      	b.n	2c90 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b0>
    2c8e:	e009      	b.n	2ca4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c4>
    2c90:	f640 002a 	movw	r0, #2090	; 0x82a
    2c94:	f3af 8000 	nop.w
    2c98:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    2c9c:	f885 b02b 	strb.w	fp, [r5, #43]	; 0x2b
    2ca0:	2001      	movs	r0, #1
    2ca2:	9009      	str	r0, [sp, #36]	; 0x24
    2ca4:	b124      	cbz	r4, 2cb0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    2ca6:	2100      	movs	r1, #0
    2ca8:	f640 0033 	movw	r0, #2099	; 0x833
    2cac:	f3af 8000 	nop.w
    2cb0:	9808      	ldr	r0, [sp, #32]
    2cb2:	b188      	cbz	r0, 2cd8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f8>
    2cb4:	b124      	cbz	r4, 2cc0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e0>
    2cb6:	2100      	movs	r1, #0
    2cb8:	f640 0037 	movw	r0, #2103	; 0x837
    2cbc:	f3af 8000 	nop.w
    2cc0:	9809      	ldr	r0, [sp, #36]	; 0x24
    2cc2:	b00d      	add	sp, #52	; 0x34
    2cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2cc8:	2c00      	cmp	r4, #0
    2cca:	d0f1      	beq.n	2cb0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    2ccc:	2100      	movs	r1, #0
    2cce:	f640 0025 	movw	r0, #2085	; 0x825
    2cd2:	f3af 8000 	nop.w
    2cd6:	e7e6      	b.n	2ca6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2cd8:	4805      	ldr	r0, [pc, #20]	; (2cf0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    2cda:	2800      	cmp	r0, #0
    2cdc:	bf18      	it	ne
    2cde:	f3af 8000 	nopne.w
    2ce2:	b662      	cpsie	i
    2ce4:	e7e6      	b.n	2cb4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d4>
    2ce6:	0000      	.short	0x0000
    2ce8:	20000e6c 	.word	0x20000e6c
	...

00002cf8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    2cf8:	2820      	cmp	r0, #32
    2cfa:	bf24      	itt	cs
    2cfc:	2000      	movcs	r0, #0
    2cfe:	4770      	bxcs	lr
    2d00:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2d04:	4b03      	ldr	r3, [pc, #12]	; (2d14 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    2d06:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
    2d0a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2d0e:	6042      	str	r2, [r0, #4]
    2d10:	2001      	movs	r0, #1
    2d12:	4770      	bx	lr
    2d14:	20000aec 	.word	0x20000aec

00002d18 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    2d18:	b510      	push	{r4, lr}
    2d1a:	2820      	cmp	r0, #32
    2d1c:	d211      	bcs.n	2d42 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2d1e:	490e      	ldr	r1, [pc, #56]	; (2d58 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2d20:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    2d24:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    2d28:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2d2c:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2d30:	b13b      	cbz	r3, 2d42 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2d32:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    2d36:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    2d3a:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    2d3e:	2a01      	cmp	r2, #1
    2d40:	d001      	beq.n	2d46 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2d42:	2000      	movs	r0, #0
    2d44:	bd10      	pop	{r4, pc}
    2d46:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    2d4a:	4601      	mov	r1, r0
    2d4c:	2000      	movs	r0, #0
    2d4e:	f7ff f883 	bl	1e58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    2d52:	2001      	movs	r0, #1
    2d54:	bd10      	pop	{r4, pc}
    2d56:	0000      	.short	0x0000
    2d58:	20000e6c 	.word	0x20000e6c

00002d5c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2d5c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2d60:	4e7e      	ldr	r6, [pc, #504]	; (2f5c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x200>)
    2d62:	4680      	mov	r8, r0
    2d64:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2d68:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2d6c:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2d70:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2d74:	2800      	cmp	r0, #0
    2d76:	d065      	beq.n	2e44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    2d78:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    2d7c:	4d78      	ldr	r5, [pc, #480]	; (2f60 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x204>)
    2d7e:	b125      	cbz	r5, 2d8a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2d80:	2100      	movs	r1, #0
    2d82:	f640 30b9 	movw	r0, #3001	; 0xbb9
    2d86:	f3af 8000 	nop.w
    2d8a:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    2d8e:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2d92:	2801      	cmp	r0, #1
    2d94:	d018      	beq.n	2dc8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2d96:	b2c0      	uxtb	r0, r0
    2d98:	2804      	cmp	r0, #4
    2d9a:	bf1c      	itt	ne
    2d9c:	2805      	cmpne	r0, #5
    2d9e:	2806      	cmpne	r0, #6
    2da0:	d055      	beq.n	2e4e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf2>
    2da2:	b12d      	cbz	r5, 2db0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2da4:	f04f 0100 	mov.w	r1, #0
    2da8:	f640 30c5 	movw	r0, #3013	; 0xbc5
    2dac:	f3af 8000 	nop.w
    2db0:	f001 fc26 	bl	4600 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2db4:	b125      	cbz	r5, 2dc0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    2db6:	2100      	movs	r1, #0
    2db8:	f640 30c9 	movw	r0, #3017	; 0xbc9
    2dbc:	f3af 8000 	nop.w
    2dc0:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2dc4:	2801      	cmp	r0, #1
    2dc6:	d1e6      	bne.n	2d96 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2dc8:	2401      	movs	r4, #1
    2dca:	b125      	cbz	r5, 2dd6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2dcc:	2100      	movs	r1, #0
    2dce:	f44f 603d 	mov.w	r0, #3024	; 0xbd0
    2dd2:	f3af 8000 	nop.w
    2dd6:	b3a4      	cbz	r4, 2e42 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe6>
    2dd8:	2000      	movs	r0, #0
    2dda:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2dde:	b125      	cbz	r5, 2dea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x8e>
    2de0:	2100      	movs	r1, #0
    2de2:	f640 30d5 	movw	r0, #3029	; 0xbd5
    2de6:	f3af 8000 	nop.w
    2dea:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    2dee:	2001      	movs	r0, #1
    2df0:	ea20 090b 	bic.w	r9, r0, fp
    2df4:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    2df8:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2dfc:	2240      	movs	r2, #64	; 0x40
    2dfe:	f009 fb84 	bl	c50a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2e02:	b125      	cbz	r5, 2e0e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb2>
    2e04:	2100      	movs	r1, #0
    2e06:	f240 50da 	movw	r0, #1498	; 0x5da
    2e0a:	f3af 8000 	nop.w
    2e0e:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    2e12:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    2e16:	6a00      	ldr	r0, [r0, #32]
    2e18:	f8ca 0020 	str.w	r0, [sl, #32]
    2e1c:	b125      	cbz	r5, 2e28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xcc>
    2e1e:	2100      	movs	r1, #0
    2e20:	f240 50de 	movw	r0, #1502	; 0x5de
    2e24:	f3af 8000 	nop.w
    2e28:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2e2c:	b1e0      	cbz	r0, 2e68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10c>
    2e2e:	2d00      	cmp	r5, #0
    2e30:	bf1c      	itt	ne
    2e32:	2100      	movne	r1, #0
    2e34:	f640 30db 	movwne	r0, #3035	; 0xbdb
    2e38:	d0c7      	beq.n	2dca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2e3a:	bf00      	nop
    2e3c:	f3af 8000 	nop.w
    2e40:	e7c3      	b.n	2dca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2e42:	e00a      	b.n	2e5a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xfe>
    2e44:	f44f 613b 	mov.w	r1, #2992	; 0xbb0
    2e48:	2070      	movs	r0, #112	; 0x70
    2e4a:	f001 fab3 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e4e:	464a      	mov	r2, r9
    2e50:	4641      	mov	r1, r8
    2e52:	2001      	movs	r0, #1
    2e54:	f7ff f800 	bl	1e58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    2e58:	e7ac      	b.n	2db4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    2e5a:	4842      	ldr	r0, [pc, #264]	; (2f64 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    2e5c:	2800      	cmp	r0, #0
    2e5e:	bf18      	it	ne
    2e60:	f3af 8000 	nopne.w
    2e64:	b662      	cpsie	i
    2e66:	e7b7      	b.n	2dd8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7c>
    2e68:	b125      	cbz	r5, 2e74 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x118>
    2e6a:	2100      	movs	r1, #0
    2e6c:	f640 30df 	movw	r0, #3039	; 0xbdf
    2e70:	f3af 8000 	nop.w
    2e74:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    2e78:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2e7c:	4640      	mov	r0, r8
    2e7e:	461c      	mov	r4, r3
    2e80:	f04f 0b20 	mov.w	fp, #32
    2e84:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    2e88:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2e8c:	e004      	b.n	2e98 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13c>
    2e8e:	46a3      	mov	fp, r4
    2e90:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    2e94:	f89c 4001 	ldrb.w	r4, [ip, #1]
    2e98:	4284      	cmp	r4, r0
    2e9a:	d002      	beq.n	2ea2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x146>
    2e9c:	2c20      	cmp	r4, #32
    2e9e:	d02b      	beq.n	2ef8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    2ea0:	e7f5      	b.n	2e8e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x132>
    2ea2:	2c20      	cmp	r4, #32
    2ea4:	d028      	beq.n	2ef8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    2ea6:	42a3      	cmp	r3, r4
    2ea8:	d104      	bne.n	2eb4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x158>
    2eaa:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    2eae:	7840      	ldrb	r0, [r0, #1]
    2eb0:	7008      	strb	r0, [r1, #0]
    2eb2:	e005      	b.n	2ec0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x164>
    2eb4:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    2eb8:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    2ebc:	7840      	ldrb	r0, [r0, #1]
    2ebe:	7048      	strb	r0, [r1, #1]
    2ec0:	f1ba 0f00 	cmp.w	sl, #0
    2ec4:	d011      	beq.n	2eea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    2ec6:	b125      	cbz	r5, 2ed2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x176>
    2ec8:	2100      	movs	r1, #0
    2eca:	f240 503c 	movw	r0, #1340	; 0x53c
    2ece:	f3af 8000 	nop.w
    2ed2:	f89a 0000 	ldrb.w	r0, [sl]
    2ed6:	42a0      	cmp	r0, r4
    2ed8:	d107      	bne.n	2eea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    2eda:	b125      	cbz	r5, 2ee6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18a>
    2edc:	2100      	movs	r1, #0
    2ede:	f240 503f 	movw	r0, #1343	; 0x53f
    2ee2:	f3af 8000 	nop.w
    2ee6:	f88a b000 	strb.w	fp, [sl]
    2eea:	b15d      	cbz	r5, 2f04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    2eec:	2100      	movs	r1, #0
    2eee:	f240 5044 	movw	r0, #1348	; 0x544
    2ef2:	f3af 8000 	nop.w
    2ef6:	e000      	b.n	2efa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2ef8:	b125      	cbz	r5, 2f04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    2efa:	2100      	movs	r1, #0
    2efc:	f640 30e3 	movw	r0, #3043	; 0xbe3
    2f00:	f3af 8000 	nop.w
    2f04:	4818      	ldr	r0, [pc, #96]	; (2f68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    2f06:	2800      	cmp	r0, #0
    2f08:	bf18      	it	ne
    2f0a:	f3af 8000 	nopne.w
    2f0e:	f3ef 8410 	mrs	r4, PRIMASK
    2f12:	b672      	cpsid	i
    2f14:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2f18:	b138      	cbz	r0, 2f2a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ce>
    2f1a:	2d00      	cmp	r5, #0
    2f1c:	bf1c      	itt	ne
    2f1e:	2100      	movne	r1, #0
    2f20:	f640 30e9 	movwne	r0, #3049	; 0xbe9
    2f24:	f43f af51 	beq.w	2dca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2f28:	e788      	b.n	2e3c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe0>
    2f2a:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    2f2e:	2001      	movs	r0, #1
    2f30:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2f34:	b154      	cbz	r4, 2f4c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1f0>
    2f36:	2d00      	cmp	r5, #0
    2f38:	bf08      	it	eq
    2f3a:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2f3e:	2100      	movs	r1, #0
    2f40:	f640 30f6 	movw	r0, #3062	; 0xbf6
    2f44:	f3af 8000 	nop.w
    2f48:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2f4c:	4805      	ldr	r0, [pc, #20]	; (2f64 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    2f4e:	2800      	cmp	r0, #0
    2f50:	bf18      	it	ne
    2f52:	f3af 8000 	nopne.w
    2f56:	b662      	cpsie	i
    2f58:	e7ed      	b.n	2f36 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1da>
    2f5a:	0000      	.short	0x0000
    2f5c:	20000e6c 	.word	0x20000e6c
	...

00002f6c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2f6c:	b570      	push	{r4, r5, r6, lr}
    2f6e:	460d      	mov	r5, r1
    2f70:	4606      	mov	r6, r0
    2f72:	f001 f9a9 	bl	42c8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    2f76:	480f      	ldr	r0, [pc, #60]	; (2fb4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    2f78:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    2f7c:	2400      	movs	r4, #0
    2f7e:	3880      	subs	r0, #128	; 0x80
    2f80:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2f84:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2f88:	b129      	cbz	r1, 2f96 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    2f8a:	1c61      	adds	r1, r4, #1
    2f8c:	b2cc      	uxtb	r4, r1
    2f8e:	2c20      	cmp	r4, #32
    2f90:	d3f8      	bcc.n	2f84 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    2f92:	2020      	movs	r0, #32
    2f94:	bd70      	pop	{r4, r5, r6, pc}
    2f96:	4808      	ldr	r0, [pc, #32]	; (2fb8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    2f98:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2f9c:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    2fa0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    2fa4:	4621      	mov	r1, r4
    2fa6:	6045      	str	r5, [r0, #4]
    2fa8:	2001      	movs	r0, #1
    2faa:	f7fe ff55 	bl	1e58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    2fae:	4620      	mov	r0, r4
    2fb0:	bd70      	pop	{r4, r5, r6, pc}
    2fb2:	0000      	.short	0x0000
    2fb4:	20000e6c 	.word	0x20000e6c
    2fb8:	20000aec 	.word	0x20000aec

00002fbc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2fc0:	b083      	sub	sp, #12
    2fc2:	f000 fb21 	bl	3608 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2fc6:	4605      	mov	r5, r0
    2fc8:	f000 fdd4 	bl	3b74 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2fcc:	4c63      	ldr	r4, [pc, #396]	; (315c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a0>)
    2fce:	68a0      	ldr	r0, [r4, #8]
    2fd0:	f1b0 3fff 	cmp.w	r0, #4294967295
    2fd4:	bf1c      	itt	ne
    2fd6:	f04f 30ff 	movne.w	r0, #4294967295
    2fda:	60a0      	strne	r0, [r4, #8]
    2fdc:	7fa0      	ldrb	r0, [r4, #30]
    2fde:	f8df b180 	ldr.w	fp, [pc, #384]	; 3160 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a4>
    2fe2:	b9a8      	cbnz	r0, 3010 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    2fe4:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    2fe8:	1a08      	subs	r0, r1, r0
    2fea:	0200      	lsls	r0, r0, #8
    2fec:	17c1      	asrs	r1, r0, #31
    2fee:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2ff2:	1200      	asrs	r0, r0, #8
    2ff4:	f44f 710c 	mov.w	r1, #560	; 0x230
    2ff8:	f009 f946 	bl	c288 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2ffc:	6921      	ldr	r1, [r4, #16]
    2ffe:	4408      	add	r0, r1
    3000:	1a28      	subs	r0, r5, r0
    3002:	0200      	lsls	r0, r0, #8
    3004:	17c1      	asrs	r1, r0, #31
    3006:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    300a:	1200      	asrs	r0, r0, #8
    300c:	0fc0      	lsrs	r0, r0, #31
    300e:	d00b      	beq.n	3028 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    3010:	7e60      	ldrb	r0, [r4, #25]
    3012:	b1e8      	cbz	r0, 3050 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x94>
    3014:	f000 fc04 	bl	3820 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    3018:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    301c:	b1f0      	cbz	r0, 305c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa0>
    301e:	f240 4154 	movw	r1, #1108	; 0x454
    3022:	2070      	movs	r0, #112	; 0x70
    3024:	f001 f9c6 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3028:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    302c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    3030:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3034:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    3038:	6840      	ldr	r0, [r0, #4]
    303a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    303e:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    3042:	2108      	movs	r1, #8
    3044:	4790      	blx	r2
    3046:	f240 4143 	movw	r1, #1091	; 0x443
    304a:	2070      	movs	r0, #112	; 0x70
    304c:	f001 f9b2 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3050:	1ce8      	adds	r0, r5, #3
    3052:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3056:	f000 fadd 	bl	3614 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    305a:	e7dd      	b.n	3018 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x5c>
    305c:	f04f 0a01 	mov.w	sl, #1
    3060:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    3064:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    3068:	2820      	cmp	r0, #32
    306a:	d024      	beq.n	30b6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    306c:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    3070:	2020      	movs	r0, #32
    3072:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    3076:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    307a:	2600      	movs	r6, #0
    307c:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    3080:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    3084:	4837      	ldr	r0, [pc, #220]	; (3164 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a8>)
    3086:	6026      	str	r6, [r4, #0]
    3088:	7800      	ldrb	r0, [r0, #0]
    308a:	2802      	cmp	r0, #2
    308c:	bf16      	itet	ne
    308e:	2803      	cmpne	r0, #3
    3090:	2001      	moveq	r0, #1
    3092:	2000      	movne	r0, #0
    3094:	7720      	strb	r0, [r4, #28]
    3096:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    309a:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    309e:	f899 0020 	ldrb.w	r0, [r9, #32]
    30a2:	2820      	cmp	r0, #32
    30a4:	d031      	beq.n	310a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    30a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    30aa:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    30ae:	7d81      	ldrb	r1, [r0, #22]
    30b0:	2901      	cmp	r1, #1
    30b2:	d005      	beq.n	30c0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    30b4:	e029      	b.n	310a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    30b6:	f240 4157 	movw	r1, #1111	; 0x457
    30ba:	2070      	movs	r0, #112	; 0x70
    30bc:	f001 f97a 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    30c0:	46ab      	mov	fp, r5
    30c2:	f100 0508 	add.w	r5, r0, #8
    30c6:	8a40      	ldrh	r0, [r0, #18]
    30c8:	aa01      	add	r2, sp, #4
    30ca:	4669      	mov	r1, sp
    30cc:	f000 f946 	bl	335c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    30d0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    30d4:	2820      	cmp	r0, #32
    30d6:	d004      	beq.n	30e2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x126>
    30d8:	6920      	ldr	r0, [r4, #16]
    30da:	1d40      	adds	r0, r0, #5
    30dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    30e0:	e00b      	b.n	30fa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x13e>
    30e2:	8968      	ldrh	r0, [r5, #10]
    30e4:	f10b 0b09 	add.w	fp, fp, #9
    30e8:	b128      	cbz	r0, 30f6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x13a>
    30ea:	f001 f8ff 	bl	42ec <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    30ee:	2800      	cmp	r0, #0
    30f0:	bf08      	it	eq
    30f2:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    30f6:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    30fa:	e9d5 2100 	ldrd	r2, r1, [r5]
    30fe:	1a89      	subs	r1, r1, r2
    3100:	6028      	str	r0, [r5, #0]
    3102:	4408      	add	r0, r1
    3104:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3108:	6068      	str	r0, [r5, #4]
    310a:	4639      	mov	r1, r7
    310c:	2001      	movs	r0, #1
    310e:	f7fe fed3 	bl	1eb8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x16c>
    3112:	2800      	cmp	r0, #0
    3114:	d0f9      	beq.n	310a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    3116:	4814      	ldr	r0, [pc, #80]	; (3168 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>)
    3118:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    311c:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    3120:	2802      	cmp	r0, #2
    3122:	d104      	bne.n	312e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x172>
    3124:	463a      	mov	r2, r7
    3126:	4641      	mov	r1, r8
    3128:	2006      	movs	r0, #6
    312a:	f7fe fe95 	bl	1e58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    312e:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    3132:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    3136:	2820      	cmp	r0, #32
    3138:	d003      	beq.n	3142 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x186>
    313a:	480c      	ldr	r0, [pc, #48]	; (316c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    313c:	7840      	ldrb	r0, [r0, #1]
    313e:	f001 fa09 	bl	4554 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    3142:	7f20      	ldrb	r0, [r4, #28]
    3144:	2800      	cmp	r0, #0
    3146:	bf04      	itt	eq
    3148:	b003      	addeq	sp, #12
    314a:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    314e:	f000 fd5b 	bl	3c08 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    3152:	7726      	strb	r6, [r4, #28]
    3154:	7766      	strb	r6, [r4, #29]
    3156:	b003      	add	sp, #12
    3158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    315c:	20000e6c 	.word	0x20000e6c
    3160:	20000aec 	.word	0x20000aec
    3164:	20000012 	.word	0x20000012
    3168:	20000dec 	.word	0x20000dec
    316c:	20000010 	.word	0x20000010

00003170 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    3170:	b510      	push	{r4, lr}
    3172:	4c30      	ldr	r4, [pc, #192]	; (3234 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc4>)
    3174:	b082      	sub	sp, #8
    3176:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    317a:	2920      	cmp	r1, #32
    317c:	d008      	beq.n	3190 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    317e:	68a1      	ldr	r1, [r4, #8]
    3180:	f1b1 3fff 	cmp.w	r1, #4294967295
    3184:	d009      	beq.n	319a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    3186:	f640 21e8 	movw	r1, #2792	; 0xae8
    318a:	2070      	movs	r0, #112	; 0x70
    318c:	f001 f912 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3190:	f640 21e7 	movw	r1, #2791	; 0xae7
    3194:	2070      	movs	r0, #112	; 0x70
    3196:	f001 f90d 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    319a:	6862      	ldr	r2, [r4, #4]
    319c:	4601      	mov	r1, r0
    319e:	4b26      	ldr	r3, [pc, #152]	; (3238 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc8>)
    31a0:	1850      	adds	r0, r2, r1
    31a2:	429a      	cmp	r2, r3
    31a4:	d904      	bls.n	31b0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    31a6:	f240 6116 	movw	r1, #1558	; 0x616
    31aa:	2070      	movs	r0, #112	; 0x70
    31ac:	f001 f902 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31b0:	4a22      	ldr	r2, [pc, #136]	; (323c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    31b2:	4291      	cmp	r1, r2
    31b4:	dd04      	ble.n	31c0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    31b6:	f240 6117 	movw	r1, #1559	; 0x617
    31ba:	2070      	movs	r0, #112	; 0x70
    31bc:	f001 f8fa 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31c0:	4a1f      	ldr	r2, [pc, #124]	; (3240 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    31c2:	4291      	cmp	r1, r2
    31c4:	da04      	bge.n	31d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    31c6:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    31ca:	2070      	movs	r0, #112	; 0x70
    31cc:	f001 f8f2 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31d0:	491c      	ldr	r1, [pc, #112]	; (3244 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    31d2:	4281      	cmp	r1, r0
    31d4:	bfdc      	itt	le
    31d6:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    31da:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    31de:	dd05      	ble.n	31ec <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    31e0:	2800      	cmp	r0, #0
    31e2:	bfbc      	itt	lt
    31e4:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    31e8:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    31ec:	aa01      	add	r2, sp, #4
    31ee:	4669      	mov	r1, sp
    31f0:	f000 f8b4 	bl	335c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    31f4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    31f8:	280f      	cmp	r0, #15
    31fa:	bf8c      	ite	hi
    31fc:	2001      	movhi	r0, #1
    31fe:	2000      	movls	r0, #0
    3200:	9900      	ldr	r1, [sp, #0]
    3202:	4408      	add	r0, r1
    3204:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    3208:	60a1      	str	r1, [r4, #8]
    320a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    320e:	2800      	cmp	r0, #0
    3210:	bf04      	itt	eq
    3212:	b002      	addeq	sp, #8
    3214:	bd10      	popeq	{r4, pc}
    3216:	2301      	movs	r3, #1
    3218:	2203      	movs	r2, #3
    321a:	2005      	movs	r0, #5
    321c:	f000 fb7a 	bl	3914 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    3220:	2800      	cmp	r0, #0
    3222:	bf1c      	itt	ne
    3224:	b002      	addne	sp, #8
    3226:	bd10      	popne	{r4, pc}
    3228:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
    322c:	2070      	movs	r0, #112	; 0x70
    322e:	f001 f8c1 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3232:	0000      	.short	0x0000
    3234:	20000e6c 	.word	0x20000e6c
    3238:	1e847fff 	.word	0x1e847fff
    323c:	07a12000 	.word	0x07a12000
    3240:	f85ee000 	.word	0xf85ee000
    3244:	1e848000 	.word	0x1e848000

00003248 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    3248:	b570      	push	{r4, r5, r6, lr}
    324a:	4c1e      	ldr	r4, [pc, #120]	; (32c4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    324c:	2120      	movs	r1, #32
    324e:	f884 1020 	strb.w	r1, [r4, #32]
    3252:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    3256:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    325a:	2000      	movs	r0, #0
    325c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    3260:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3264:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    3268:	1e42      	subs	r2, r0, #1
    326a:	60a2      	str	r2, [r4, #8]
    326c:	6020      	str	r0, [r4, #0]
    326e:	77a0      	strb	r0, [r4, #30]
    3270:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    3274:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    3278:	7720      	strb	r0, [r4, #28]
    327a:	7760      	strb	r0, [r4, #29]
    327c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    3280:	4911      	ldr	r1, [pc, #68]	; (32c8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    3282:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    3286:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    328a:	7008      	strb	r0, [r1, #0]
    328c:	7048      	strb	r0, [r1, #1]
    328e:	8048      	strh	r0, [r1, #2]
    3290:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    3294:	2210      	movs	r2, #16
    3296:	7088      	strb	r0, [r1, #2]
    3298:	f801 0f04 	strb.w	r0, [r1, #4]!
    329c:	1e52      	subs	r2, r2, #1
    329e:	d1fa      	bne.n	3296 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    32a0:	4d0a      	ldr	r5, [pc, #40]	; (32cc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    32a2:	2601      	movs	r6, #1
    32a4:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    32a8:	20ff      	movs	r0, #255	; 0xff
    32aa:	7028      	strb	r0, [r5, #0]
    32ac:	4808      	ldr	r0, [pc, #32]	; (32d0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    32ae:	f001 f933 	bl	4518 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    32b2:	7068      	strb	r0, [r5, #1]
    32b4:	f001 f98e 	bl	45d4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    32b8:	60a8      	str	r0, [r5, #8]
    32ba:	f000 fcd3 	bl	3c64 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    32be:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    32c2:	bd70      	pop	{r4, r5, r6, pc}
    32c4:	20000e6c 	.word	0x20000e6c
    32c8:	20000012 	.word	0x20000012
    32cc:	20000010 	.word	0x20000010
    32d0:	00001d15 	.word	0x00001d15

000032d4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    32d4:	b570      	push	{r4, r5, r6, lr}
    32d6:	4604      	mov	r4, r0
    32d8:	4615      	mov	r5, r2
    32da:	4608      	mov	r0, r1
    32dc:	f008 ff9c 	bl	c218 <sym_BE2HGIHF5RDQALAHNCCVX54XTGKEN4KZFXFBHBQ>
    32e0:	4a0f      	ldr	r2, [pc, #60]	; (3320 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    32e2:	1b01      	subs	r1, r0, r4
    32e4:	f102 0c01 	add.w	ip, r2, #1
    32e8:	ebb1 0f9c 	cmp.w	r1, ip, lsr #2
    32ec:	bf24      	itt	cs
    32ee:	1a23      	subcs	r3, r4, r0
    32f0:	ebb3 0f9c 	cmpcs.w	r3, ip, lsr #2
    32f4:	d30b      	bcc.n	330e <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    32f6:	428a      	cmp	r2, r1
    32f8:	d203      	bcs.n	3302 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    32fa:	1b11      	subs	r1, r2, r4
    32fc:	4408      	add	r0, r1
    32fe:	1c41      	adds	r1, r0, #1
    3300:	e005      	b.n	330e <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    3302:	429a      	cmp	r2, r3
    3304:	d207      	bcs.n	3316 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    3306:	1a10      	subs	r0, r2, r0
    3308:	4420      	add	r0, r4
    330a:	1c40      	adds	r0, r0, #1
    330c:	4241      	negs	r1, r0
    330e:	f101 000f 	add.w	r0, r1, #15
    3312:	1a28      	subs	r0, r5, r0
    3314:	bd70      	pop	{r4, r5, r6, pc}
    3316:	f640 310b 	movw	r1, #2827	; 0xb0b
    331a:	2070      	movs	r0, #112	; 0x70
    331c:	f001 f84a 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3320:	1e847fff 	.word	0x1e847fff

00003324 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    3324:	0b41      	lsrs	r1, r0, #13
    3326:	f248 6237 	movw	r2, #34359	; 0x8637
    332a:	4351      	muls	r1, r2
    332c:	0c0a      	lsrs	r2, r1, #16
    332e:	4b09      	ldr	r3, [pc, #36]	; (3354 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    3330:	0251      	lsls	r1, r2, #9
    3332:	fb02 0203 	mla	r2, r2, r3, r0
    3336:	4808      	ldr	r0, [pc, #32]	; (3358 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    3338:	4350      	muls	r0, r2
    333a:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    333e:	306e      	adds	r0, #110	; 0x6e
    3340:	0d40      	lsrs	r0, r0, #21
    3342:	425b      	negs	r3, r3
    3344:	fb10 f303 	smulbb	r3, r0, r3
    3348:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    334c:	bf88      	it	hi
    334e:	1c49      	addhi	r1, r1, #1
    3350:	4408      	add	r0, r1
    3352:	4770      	bx	lr
    3354:	ffffc2f7 	.word	0xffffc2f7
    3358:	00010c6f 	.word	0x00010c6f

0000335c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    335c:	0b43      	lsrs	r3, r0, #13
    335e:	f248 6c37 	movw	ip, #34359	; 0x8637
    3362:	fb03 f30c 	mul.w	r3, r3, ip
    3366:	b430      	push	{r4, r5}
    3368:	0c1b      	lsrs	r3, r3, #16
    336a:	f8df c044 	ldr.w	ip, [pc, #68]	; 33b0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    336e:	025c      	lsls	r4, r3, #9
    3370:	fb03 030c 	mla	r3, r3, ip, r0
    3374:	480f      	ldr	r0, [pc, #60]	; (33b4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    3376:	4358      	muls	r0, r3
    3378:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    337c:	eb04 000c 	add.w	r0, r4, ip
    3380:	f643 5409 	movw	r4, #15625	; 0x3d09
    3384:	fb1c f404 	smulbb	r4, ip, r4
    3388:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    338c:	f643 5508 	movw	r5, #15624	; 0x3d08
    3390:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    3394:	442c      	add	r4, r5
    3396:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    339a:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    339e:	bf84      	itt	hi
    33a0:	f04f 0c00 	movhi.w	ip, #0
    33a4:	1c40      	addhi	r0, r0, #1
    33a6:	6008      	str	r0, [r1, #0]
    33a8:	f882 c000 	strb.w	ip, [r2]
    33ac:	bc30      	pop	{r4, r5}
    33ae:	4770      	bx	lr
    33b0:	ffffc2f7 	.word	0xffffc2f7
    33b4:	00010c6f 	.word	0x00010c6f

000033b8 <MPSL_IRQ_RTC0_Handler>:
    33b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33bc:	4c38      	ldr	r4, [pc, #224]	; (34a0 <MPSL_IRQ_RTC0_Handler+0xe8>)
    33be:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    33c2:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 34a4 <MPSL_IRQ_RTC0_Handler+0xec>
    33c6:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    33ca:	f44f 6600 	mov.w	r6, #2048	; 0x800
    33ce:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    33d2:	f04f 0500 	mov.w	r5, #0
    33d6:	bf1c      	itt	ne
    33d8:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    33dc:	2800      	cmpne	r0, #0
    33de:	d017      	beq.n	3410 <MPSL_IRQ_RTC0_Handler+0x58>
    33e0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    33e4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    33e8:	482f      	ldr	r0, [pc, #188]	; (34a8 <MPSL_IRQ_RTC0_Handler+0xf0>)
    33ea:	6800      	ldr	r0, [r0, #0]
    33ec:	f8d8 1000 	ldr.w	r1, [r8]
    33f0:	eba0 0001 	sub.w	r0, r0, r1
    33f4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    33f8:	2802      	cmp	r0, #2
    33fa:	d302      	bcc.n	3402 <MPSL_IRQ_RTC0_Handler+0x4a>
    33fc:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3400:	d306      	bcc.n	3410 <MPSL_IRQ_RTC0_Handler+0x58>
    3402:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3406:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    340a:	2004      	movs	r0, #4
    340c:	f7fe ff68 	bl	22e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3410:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3414:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3418:	bf1c      	itt	ne
    341a:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    341e:	2800      	cmpne	r0, #0
    3420:	d017      	beq.n	3452 <MPSL_IRQ_RTC0_Handler+0x9a>
    3422:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    3426:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    342a:	4820      	ldr	r0, [pc, #128]	; (34ac <MPSL_IRQ_RTC0_Handler+0xf4>)
    342c:	6800      	ldr	r0, [r0, #0]
    342e:	f8d8 1000 	ldr.w	r1, [r8]
    3432:	eba0 0001 	sub.w	r0, r0, r1
    3436:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    343a:	2802      	cmp	r0, #2
    343c:	d302      	bcc.n	3444 <MPSL_IRQ_RTC0_Handler+0x8c>
    343e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3442:	d306      	bcc.n	3452 <MPSL_IRQ_RTC0_Handler+0x9a>
    3444:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3448:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    344c:	2005      	movs	r0, #5
    344e:	f7fe ff47 	bl	22e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3452:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3456:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    345a:	bf1a      	itte	ne
    345c:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    3460:	2800      	cmpne	r0, #0
    3462:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3466:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    346a:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    346e:	4810      	ldr	r0, [pc, #64]	; (34b0 <MPSL_IRQ_RTC0_Handler+0xf8>)
    3470:	6800      	ldr	r0, [r0, #0]
    3472:	f8d8 1000 	ldr.w	r1, [r8]
    3476:	eba0 0001 	sub.w	r0, r0, r1
    347a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    347e:	2802      	cmp	r0, #2
    3480:	d304      	bcc.n	348c <MPSL_IRQ_RTC0_Handler+0xd4>
    3482:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3486:	bf38      	it	cc
    3488:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    348c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3490:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3498:	2006      	movs	r0, #6
    349a:	f7fe bf21 	b.w	22e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    349e:	0000      	.short	0x0000
    34a0:	4000b000 	.word	0x4000b000
    34a4:	4000b504 	.word	0x4000b504
    34a8:	4000b540 	.word	0x4000b540
    34ac:	4000b544 	.word	0x4000b544
    34b0:	4000b548 	.word	0x4000b548

000034b4 <MPSL_IRQ_TIMER0_Handler>:
    34b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34b8:	4d3a      	ldr	r5, [pc, #232]	; (35a4 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    34ba:	7828      	ldrb	r0, [r5, #0]
    34bc:	2804      	cmp	r0, #4
    34be:	d06c      	beq.n	359a <MPSL_IRQ_TIMER0_Handler+0xe6>
    34c0:	1ce8      	adds	r0, r5, #3
    34c2:	2201      	movs	r2, #1
    34c4:	7801      	ldrb	r1, [r0, #0]
    34c6:	b159      	cbz	r1, 34e0 <MPSL_IRQ_TIMER0_Handler+0x2c>
    34c8:	2901      	cmp	r1, #1
    34ca:	bf08      	it	eq
    34cc:	706a      	strbeq	r2, [r5, #1]
    34ce:	d002      	beq.n	34d6 <MPSL_IRQ_TIMER0_Handler+0x22>
    34d0:	7869      	ldrb	r1, [r5, #1]
    34d2:	2900      	cmp	r1, #0
    34d4:	d05c      	beq.n	3590 <MPSL_IRQ_TIMER0_Handler+0xdc>
    34d6:	2102      	movs	r1, #2
    34d8:	7001      	strb	r1, [r0, #0]
    34da:	7840      	ldrb	r0, [r0, #1]
    34dc:	f000 fae2 	bl	3aa4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    34e0:	4c31      	ldr	r4, [pc, #196]	; (35a8 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    34e2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    34e6:	f04f 0800 	mov.w	r8, #0
    34ea:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    34ee:	f44f 7680 	mov.w	r6, #256	; 0x100
    34f2:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    34f6:	bf1c      	itt	ne
    34f8:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    34fc:	2800      	cmpne	r0, #0
    34fe:	d008      	beq.n	3512 <MPSL_IRQ_TIMER0_Handler+0x5e>
    3500:	f04f 0003 	mov.w	r0, #3
    3504:	f000 face 	bl	3aa4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3508:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    350c:	2003      	movs	r0, #3
    350e:	f7fe fee7 	bl	22e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3512:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3516:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    351a:	bf1c      	itt	ne
    351c:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    3520:	2800      	cmpne	r0, #0
    3522:	d008      	beq.n	3536 <MPSL_IRQ_TIMER0_Handler+0x82>
    3524:	f04f 0002 	mov.w	r0, #2
    3528:	f000 fabc 	bl	3aa4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    352c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3530:	2002      	movs	r0, #2
    3532:	f7fe fed5 	bl	22e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3536:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    353a:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    353e:	bf1c      	itt	ne
    3540:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    3544:	2800      	cmpne	r0, #0
    3546:	d008      	beq.n	355a <MPSL_IRQ_TIMER0_Handler+0xa6>
    3548:	f04f 0001 	mov.w	r0, #1
    354c:	f000 faaa 	bl	3aa4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3550:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3554:	2001      	movs	r0, #1
    3556:	f7fe fec3 	bl	22e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    355a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    355e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    3562:	bf1a      	itte	ne
    3564:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    3568:	2800      	cmpne	r0, #0
    356a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    356e:	f04f 0000 	mov.w	r0, #0
    3572:	f000 fa97 	bl	3aa4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3576:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    357a:	2004      	movs	r0, #4
    357c:	7028      	strb	r0, [r5, #0]
    357e:	f8c5 8008 	str.w	r8, [r5, #8]
    3582:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    3586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    358a:	2000      	movs	r0, #0
    358c:	f7fe bea8 	b.w	22e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3590:	f240 3166 	movw	r1, #870	; 0x366
    3594:	206c      	movs	r0, #108	; 0x6c
    3596:	f000 ff0d 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    359a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    359e:	2007      	movs	r0, #7
    35a0:	f7fe be9e 	b.w	22e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    35a4:	2000001c 	.word	0x2000001c
    35a8:	40008000 	.word	0x40008000
    35ac:	2201      	movs	r2, #1
    35ae:	0213      	lsls	r3, r2, #8
    35b0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    35b4:	2000      	movs	r0, #0
    35b6:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    35ba:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    35be:	f3bf 8f4f 	dsb	sy
    35c2:	f3bf 8f6f 	isb	sy
    35c6:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    35ca:	490c      	ldr	r1, [pc, #48]	; (35fc <MPSL_IRQ_TIMER0_Handler+0x148>)
    35cc:	604a      	str	r2, [r1, #4]
    35ce:	1e43      	subs	r3, r0, #1
    35d0:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    35d4:	4b0a      	ldr	r3, [pc, #40]	; (3600 <MPSL_IRQ_TIMER0_Handler+0x14c>)
    35d6:	6018      	str	r0, [r3, #0]
    35d8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    35dc:	1d1b      	adds	r3, r3, #4
    35de:	6018      	str	r0, [r3, #0]
    35e0:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    35e4:	1d1b      	adds	r3, r3, #4
    35e6:	6018      	str	r0, [r3, #0]
    35e8:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    35ec:	1d1b      	adds	r3, r3, #4
    35ee:	6018      	str	r0, [r3, #0]
    35f0:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    35f4:	610a      	str	r2, [r1, #16]
    35f6:	4903      	ldr	r1, [pc, #12]	; (3604 <MPSL_IRQ_TIMER0_Handler+0x150>)
    35f8:	7048      	strb	r0, [r1, #1]
    35fa:	4770      	bx	lr
    35fc:	40008000 	.word	0x40008000
    3600:	40008540 	.word	0x40008540
    3604:	2000001c 	.word	0x2000001c

00003608 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    3608:	4801      	ldr	r0, [pc, #4]	; (3610 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    360a:	6800      	ldr	r0, [r0, #0]
    360c:	4770      	bx	lr
    360e:	0000      	.short	0x0000
    3610:	4000b504 	.word	0x4000b504

00003614 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    3614:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    3618:	4e41      	ldr	r6, [pc, #260]	; (3720 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    361a:	4604      	mov	r4, r0
    361c:	1ef7      	subs	r7, r6, #3
    361e:	f896 c000 	ldrb.w	ip, [r6]
    3622:	68f8      	ldr	r0, [r7, #12]
    3624:	f1bc 0f01 	cmp.w	ip, #1
    3628:	bf04      	itt	eq
    362a:	42a0      	cmpeq	r0, r4
    362c:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    3630:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    3634:	4a3b      	ldr	r2, [pc, #236]	; (3724 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    3636:	6011      	str	r1, [r2, #0]
    3638:	493b      	ldr	r1, [pc, #236]	; (3728 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    363a:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    363e:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    3642:	4a3a      	ldr	r2, [pc, #232]	; (372c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    3644:	f04f 0500 	mov.w	r5, #0
    3648:	f1bc 0f00 	cmp.w	ip, #0
    364c:	d057      	beq.n	36fe <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    364e:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    3652:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3656:	6015      	str	r5, [r2, #0]
    3658:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    365c:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    3660:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    3664:	f04f 0801 	mov.w	r8, #1
    3668:	2a00      	cmp	r2, #0
    366a:	bf04      	itt	eq
    366c:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    3670:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    3674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3678:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    367c:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3680:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    3684:	4a2a      	ldr	r2, [pc, #168]	; (3730 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    3686:	f8d2 a000 	ldr.w	sl, [r2]
    368a:	eba4 0a0a 	sub.w	sl, r4, sl
    368e:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    3692:	f1bb 0f02 	cmp.w	fp, #2
    3696:	d33c      	bcc.n	3712 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    3698:	f04f 0a02 	mov.w	sl, #2
    369c:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    36a0:	d237      	bcs.n	3712 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    36a2:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    36a6:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    36aa:	f1bc 0f00 	cmp.w	ip, #0
    36ae:	d005      	beq.n	36bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    36b0:	6811      	ldr	r1, [r2, #0]
    36b2:	1a41      	subs	r1, r0, r1
    36b4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    36b8:	2902      	cmp	r1, #2
    36ba:	d3f9      	bcc.n	36b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    36bc:	f8c7 8008 	str.w	r8, [r7, #8]
    36c0:	703d      	strb	r5, [r7, #0]
    36c2:	f7ff ff73 	bl	35ac <MPSL_IRQ_TIMER0_Handler+0xf8>
    36c6:	481b      	ldr	r0, [pc, #108]	; (3734 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    36c8:	6005      	str	r5, [r0, #0]
    36ca:	1d00      	adds	r0, r0, #4
    36cc:	f8c0 a000 	str.w	sl, [r0]
    36d0:	4919      	ldr	r1, [pc, #100]	; (3738 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    36d2:	2004      	movs	r0, #4
    36d4:	6008      	str	r0, [r1, #0]
    36d6:	4919      	ldr	r1, [pc, #100]	; (373c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    36d8:	f8c1 800c 	str.w	r8, [r1, #12]
    36dc:	68ba      	ldr	r2, [r7, #8]
    36de:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    36e2:	0181      	lsls	r1, r0, #6
    36e4:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    36e8:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    36ec:	4a14      	ldr	r2, [pc, #80]	; (3740 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    36ee:	0741      	lsls	r1, r0, #29
    36f0:	6011      	str	r1, [r2, #0]
    36f2:	60fc      	str	r4, [r7, #12]
    36f4:	7070      	strb	r0, [r6, #1]
    36f6:	f886 8000 	strb.w	r8, [r6]
    36fa:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    36fe:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3702:	4b10      	ldr	r3, [pc, #64]	; (3744 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    3704:	601d      	str	r5, [r3, #0]
    3706:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    370a:	6015      	str	r5, [r2, #0]
    370c:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    3710:	e7a4      	b.n	365c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    3712:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    3716:	f240 11ef 	movw	r1, #495	; 0x1ef
    371a:	206c      	movs	r0, #108	; 0x6c
    371c:	f000 fe4a 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3720:	2000001f 	.word	0x2000001f
    3724:	4001f508 	.word	0x4001f508
    3728:	4000b000 	.word	0x4000b000
    372c:	4000b544 	.word	0x4000b544
    3730:	4000b504 	.word	0x4000b504
    3734:	40008504 	.word	0x40008504
    3738:	40008510 	.word	0x40008510
    373c:	40008000 	.word	0x40008000
    3740:	4001f504 	.word	0x4001f504
    3744:	4000b540 	.word	0x4000b540

00003748 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    3748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    374c:	4c2b      	ldr	r4, [pc, #172]	; (37fc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    374e:	68e1      	ldr	r1, [r4, #12]
    3750:	4281      	cmp	r1, r0
    3752:	bf14      	ite	ne
    3754:	2201      	movne	r2, #1
    3756:	2200      	moveq	r2, #0
    3758:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 3800 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    375c:	f89c 7000 	ldrb.w	r7, [ip]
    3760:	2f02      	cmp	r7, #2
    3762:	d002      	beq.n	376a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    3764:	2a00      	cmp	r2, #0
    3766:	d038      	beq.n	37da <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    3768:	e003      	b.n	3772 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    376a:	2a00      	cmp	r2, #0
    376c:	bf08      	it	eq
    376e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3772:	7862      	ldrb	r2, [r4, #1]
    3774:	b382      	cbz	r2, 37d8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    3776:	4b23      	ldr	r3, [pc, #140]	; (3804 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    3778:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    377c:	601a      	str	r2, [r3, #0]
    377e:	4b22      	ldr	r3, [pc, #136]	; (3808 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    3780:	1395      	asrs	r5, r2, #14
    3782:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    3786:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    378a:	2600      	movs	r6, #0
    378c:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    3790:	4a1e      	ldr	r2, [pc, #120]	; (380c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    3792:	f8d2 8000 	ldr.w	r8, [r2]
    3796:	eba0 0808 	sub.w	r8, r0, r8
    379a:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    379e:	f1b8 0f02 	cmp.w	r8, #2
    37a2:	d324      	bcc.n	37ee <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    37a4:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    37a8:	d221      	bcs.n	37ee <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    37aa:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    37ae:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    37b2:	b12f      	cbz	r7, 37c0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    37b4:	6813      	ldr	r3, [r2, #0]
    37b6:	1acb      	subs	r3, r1, r3
    37b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    37bc:	2b02      	cmp	r3, #2
    37be:	d3f9      	bcc.n	37b4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    37c0:	4b13      	ldr	r3, [pc, #76]	; (3810 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    37c2:	2102      	movs	r1, #2
    37c4:	074a      	lsls	r2, r1, #29
    37c6:	601a      	str	r2, [r3, #0]
    37c8:	60e0      	str	r0, [r4, #12]
    37ca:	2004      	movs	r0, #4
    37cc:	f88c 0001 	strb.w	r0, [ip, #1]
    37d0:	f88c 1000 	strb.w	r1, [ip]
    37d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    37d8:	e004      	b.n	37e4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    37da:	f240 11fd 	movw	r1, #509	; 0x1fd
    37de:	206c      	movs	r0, #108	; 0x6c
    37e0:	f000 fde8 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    37e4:	f240 2101 	movw	r1, #513	; 0x201
    37e8:	206c      	movs	r0, #108	; 0x6c
    37ea:	f000 fde3 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    37ee:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    37f2:	f240 210d 	movw	r1, #525	; 0x20d
    37f6:	206c      	movs	r0, #108	; 0x6c
    37f8:	f000 fddc 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    37fc:	2000001c 	.word	0x2000001c
    3800:	2000001f 	.word	0x2000001f
    3804:	4001f508 	.word	0x4001f508
    3808:	4000b000 	.word	0x4000b000
    380c:	4000b504 	.word	0x4000b504
    3810:	4001f504 	.word	0x4001f504

00003814 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    3814:	4801      	ldr	r0, [pc, #4]	; (381c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    3816:	68c0      	ldr	r0, [r0, #12]
    3818:	4770      	bx	lr
    381a:	0000      	.short	0x0000
    381c:	2000001c 	.word	0x2000001c

00003820 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    3820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3824:	4833      	ldr	r0, [pc, #204]	; (38f4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    3826:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    382a:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    382e:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 38f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    3832:	4a32      	ldr	r2, [pc, #200]	; (38fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    3834:	2100      	movs	r1, #0
    3836:	f89c 3000 	ldrb.w	r3, [ip]
    383a:	b163      	cbz	r3, 3856 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    383c:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    3840:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    3844:	6011      	str	r1, [r2, #0]
    3846:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    384a:	bf00      	nop
    384c:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    3850:	2201      	movs	r2, #1
    3852:	b980      	cbnz	r0, 3876 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    3854:	e009      	b.n	386a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    3856:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    385a:	4c29      	ldr	r4, [pc, #164]	; (3900 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    385c:	6021      	str	r1, [r4, #0]
    385e:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3862:	6011      	str	r1, [r2, #0]
    3864:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3868:	e7f0      	b.n	384c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    386a:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    386e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3872:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    3876:	2b02      	cmp	r3, #2
    3878:	d004      	beq.n	3884 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    387a:	f240 2119 	movw	r1, #537	; 0x219
    387e:	206c      	movs	r0, #108	; 0x6c
    3880:	f000 fd98 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3884:	4e1f      	ldr	r6, [pc, #124]	; (3904 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    3886:	6830      	ldr	r0, [r6, #0]
    3888:	4c1f      	ldr	r4, [pc, #124]	; (3908 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    388a:	1cc0      	adds	r0, r0, #3
    388c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3890:	68e3      	ldr	r3, [r4, #12]
    3892:	4d1e      	ldr	r5, [pc, #120]	; (390c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    3894:	4298      	cmp	r0, r3
    3896:	d00b      	beq.n	38b0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    3898:	6837      	ldr	r7, [r6, #0]
    389a:	1bdf      	subs	r7, r3, r7
    389c:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    38a0:	2f04      	cmp	r7, #4
    38a2:	d305      	bcc.n	38b0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    38a4:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    38a8:	d202      	bcs.n	38b0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    38aa:	f7ff feb3 	bl	3614 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    38ae:	e01b      	b.n	38e8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    38b0:	6830      	ldr	r0, [r6, #0]
    38b2:	1a18      	subs	r0, r3, r0
    38b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    38b8:	2802      	cmp	r0, #2
    38ba:	d313      	bcc.n	38e4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    38bc:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    38c0:	d210      	bcs.n	38e4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    38c2:	4b13      	ldr	r3, [pc, #76]	; (3910 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    38c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    38c8:	6018      	str	r0, [r3, #0]
    38ca:	60a2      	str	r2, [r4, #8]
    38cc:	7021      	strb	r1, [r4, #0]
    38ce:	606a      	str	r2, [r5, #4]
    38d0:	60ea      	str	r2, [r5, #12]
    38d2:	0040      	lsls	r0, r0, #1
    38d4:	1f19      	subs	r1, r3, #4
    38d6:	6008      	str	r0, [r1, #0]
    38d8:	2004      	movs	r0, #4
    38da:	f88c 0001 	strb.w	r0, [ip, #1]
    38de:	f88c 2000 	strb.w	r2, [ip]
    38e2:	e001      	b.n	38e8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    38e4:	60a2      	str	r2, [r4, #8]
    38e6:	7021      	strb	r1, [r4, #0]
    38e8:	68a0      	ldr	r0, [r4, #8]
    38ea:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    38ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    38f2:	0000      	.short	0x0000
    38f4:	4000b000 	.word	0x4000b000
    38f8:	2000001f 	.word	0x2000001f
    38fc:	4000b544 	.word	0x4000b544
    3900:	4000b540 	.word	0x4000b540
    3904:	4000b504 	.word	0x4000b504
    3908:	2000001c 	.word	0x2000001c
    390c:	40008000 	.word	0x40008000
    3910:	4001f508 	.word	0x4001f508

00003914 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    3914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3918:	f8df c174 	ldr.w	ip, [pc, #372]	; 3a90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    391c:	2701      	movs	r7, #1
    391e:	f04f 0800 	mov.w	r8, #0
    3922:	f89c 5000 	ldrb.w	r5, [ip]
    3926:	f89c c001 	ldrb.w	ip, [ip, #1]
    392a:	2807      	cmp	r0, #7
    392c:	d27e      	bcs.n	3a2c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    392e:	e8df f000 	tbb	[pc, r0]
    3932:	0404      	.short	0x0404
    3934:	6a6a0404 	.word	0x6a6a0404
    3938:	006a      	.short	0x006a
    393a:	4c56      	ldr	r4, [pc, #344]	; (3a94 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    393c:	68e6      	ldr	r6, [r4, #12]
    393e:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    3942:	bf04      	itt	eq
    3944:	7864      	ldrbeq	r4, [r4, #1]
    3946:	2c00      	cmpeq	r4, #0
    3948:	d002      	beq.n	3950 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    394a:	2d02      	cmp	r5, #2
    394c:	d005      	beq.n	395a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    394e:	e03c      	b.n	39ca <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    3950:	f44f 7113 	mov.w	r1, #588	; 0x24c
    3954:	206c      	movs	r0, #108	; 0x6c
    3956:	f000 fd2d 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    395a:	ea4f 048c 	mov.w	r4, ip, lsl #2
    395e:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    3962:	f1ac 0404 	sub.w	r4, ip, #4
    3966:	0624      	lsls	r4, r4, #24
    3968:	0da4      	lsrs	r4, r4, #22
    396a:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    396e:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    3972:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    3976:	2400      	movs	r4, #0
    3978:	2d01      	cmp	r5, #1
    397a:	d002      	beq.n	3982 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    397c:	2d02      	cmp	r5, #2
    397e:	d011      	beq.n	39a4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    3980:	e020      	b.n	39c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3982:	f1bc 0f04 	cmp.w	ip, #4
    3986:	d205      	bcs.n	3994 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    3988:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    398c:	f1ba 0f00 	cmp.w	sl, #0
    3990:	d118      	bne.n	39c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3992:	e004      	b.n	399e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    3994:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    3998:	f1ba 0f00 	cmp.w	sl, #0
    399c:	d112      	bne.n	39c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    399e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    39a2:	e00f      	b.n	39c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    39a4:	f1bc 0f04 	cmp.w	ip, #4
    39a8:	d205      	bcs.n	39b6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    39aa:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    39ae:	f1ba 0f00 	cmp.w	sl, #0
    39b2:	d107      	bne.n	39c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    39b4:	e004      	b.n	39c0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    39b6:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    39ba:	f1ba 0f00 	cmp.w	sl, #0
    39be:	d101      	bne.n	39c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    39c0:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    39c4:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    39c8:	d1d5      	bne.n	3976 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    39ca:	4c33      	ldr	r4, [pc, #204]	; (3a98 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    39cc:	f100 0c10 	add.w	ip, r0, #16
    39d0:	fa07 fc0c 	lsl.w	ip, r7, ip
    39d4:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    39d8:	0080      	lsls	r0, r0, #2
    39da:	4420      	add	r0, r4
    39dc:	b152      	cbz	r2, 39f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    39de:	6407      	str	r7, [r0, #64]	; 0x40
    39e0:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    39e4:	1b8d      	subs	r5, r1, r6
    39e6:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    39ea:	42aa      	cmp	r2, r5
    39ec:	bf98      	it	ls
    39ee:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    39f2:	d243      	bcs.n	3a7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    39f4:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    39f8:	2b01      	cmp	r3, #1
    39fa:	bf08      	it	eq
    39fc:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    3a00:	2001      	movs	r0, #1
    3a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3a06:	b135      	cbz	r5, 3a16 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    3a08:	4584      	cmp	ip, r0
    3a0a:	d104      	bne.n	3a16 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    3a0c:	f240 216f 	movw	r1, #623	; 0x26f
    3a10:	206c      	movs	r0, #108	; 0x6c
    3a12:	f000 fccf 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a16:	1f00      	subs	r0, r0, #4
    3a18:	b2c0      	uxtb	r0, r0
    3a1a:	2b01      	cmp	r3, #1
    3a1c:	bf0c      	ite	eq
    3a1e:	2401      	moveq	r4, #1
    3a20:	2400      	movne	r4, #0
    3a22:	2803      	cmp	r0, #3
    3a24:	d306      	bcc.n	3a34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    3a26:	f240 1149 	movw	r1, #329	; 0x149
    3a2a:	e000      	b.n	3a2e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    3a2c:	e02b      	b.n	3a86 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    3a2e:	206c      	movs	r0, #108	; 0x6c
    3a30:	f000 fcc0 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a34:	f8df c064 	ldr.w	ip, [pc, #100]	; 3a9c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    3a38:	f100 0310 	add.w	r3, r0, #16
    3a3c:	fa07 f303 	lsl.w	r3, r7, r3
    3a40:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    3a44:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    3a48:	0080      	lsls	r0, r0, #2
    3a4a:	4460      	add	r0, ip
    3a4c:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    3a50:	b14a      	cbz	r2, 3a66 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    3a52:	4d13      	ldr	r5, [pc, #76]	; (3aa0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    3a54:	682e      	ldr	r6, [r5, #0]
    3a56:	1b8d      	subs	r5, r1, r6
    3a58:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    3a5c:	42aa      	cmp	r2, r5
    3a5e:	bf98      	it	ls
    3a60:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    3a64:	d20a      	bcs.n	3a7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    3a66:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3a6a:	2c00      	cmp	r4, #0
    3a6c:	bf18      	it	ne
    3a6e:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    3a72:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    3a76:	2001      	movs	r0, #1
    3a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3a7c:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    3a80:	2000      	movs	r0, #0
    3a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3a86:	f44f 711d 	mov.w	r1, #628	; 0x274
    3a8a:	206c      	movs	r0, #108	; 0x6c
    3a8c:	f000 fc92 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a90:	2000001f 	.word	0x2000001f
    3a94:	2000001c 	.word	0x2000001c
    3a98:	40008000 	.word	0x40008000
    3a9c:	4000b000 	.word	0x4000b000
    3aa0:	4000b504 	.word	0x4000b504

00003aa4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    3aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3aa6:	2701      	movs	r7, #1
    3aa8:	2400      	movs	r4, #0
    3aaa:	2807      	cmp	r0, #7
    3aac:	d24c      	bcs.n	3b48 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    3aae:	e8df f000 	tbb	[pc, r0]
    3ab2:	0404      	.short	0x0404
    3ab4:	16160404 	.word	0x16160404
    3ab8:	0016      	.short	0x0016
    3aba:	4a26      	ldr	r2, [pc, #152]	; (3b54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    3abc:	f100 0110 	add.w	r1, r0, #16
    3ac0:	fa07 f101 	lsl.w	r1, r7, r1
    3ac4:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    3ac8:	0081      	lsls	r1, r0, #2
    3aca:	4411      	add	r1, r2
    3acc:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3ad0:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    3ad4:	4920      	ldr	r1, [pc, #128]	; (3b58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    3ad6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3ada:	9000      	str	r0, [sp, #0]
    3adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ade:	4d1f      	ldr	r5, [pc, #124]	; (3b5c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    3ae0:	1f01      	subs	r1, r0, #4
    3ae2:	b2ce      	uxtb	r6, r1
    3ae4:	7829      	ldrb	r1, [r5, #0]
    3ae6:	b179      	cbz	r1, 3b08 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    3ae8:	786a      	ldrb	r2, [r5, #1]
    3aea:	4282      	cmp	r2, r0
    3aec:	d10c      	bne.n	3b08 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    3aee:	4a1c      	ldr	r2, [pc, #112]	; (3b60 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    3af0:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3af4:	6010      	str	r0, [r2, #0]
    3af6:	2901      	cmp	r1, #1
    3af8:	bf08      	it	eq
    3afa:	f7ff fd57 	bleq	35ac <MPSL_IRQ_TIMER0_Handler+0xf8>
    3afe:	702c      	strb	r4, [r5, #0]
    3b00:	4918      	ldr	r1, [pc, #96]	; (3b64 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    3b02:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3b06:	60c8      	str	r0, [r1, #12]
    3b08:	f106 0010 	add.w	r0, r6, #16
    3b0c:	fa07 f100 	lsl.w	r1, r7, r0
    3b10:	4815      	ldr	r0, [pc, #84]	; (3b68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    3b12:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3b16:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3b1a:	00b0      	lsls	r0, r6, #2
    3b1c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    3b20:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    3b24:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    3b28:	4a10      	ldr	r2, [pc, #64]	; (3b6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    3b2a:	6812      	ldr	r2, [r2, #0]
    3b2c:	1a89      	subs	r1, r1, r2
    3b2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    3b32:	2902      	cmp	r1, #2
    3b34:	bf24      	itt	cs
    3b36:	f8c0 4540 	strcs.w	r4, [r0, #1344]	; 0x540
    3b3a:	f8c0 4140 	strcs.w	r4, [r0, #320]	; 0x140
    3b3e:	480c      	ldr	r0, [pc, #48]	; (3b70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    3b40:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    3b44:	9000      	str	r0, [sp, #0]
    3b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b48:	f240 21ed 	movw	r1, #749	; 0x2ed
    3b4c:	206c      	movs	r0, #108	; 0x6c
    3b4e:	f000 fc31 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b52:	0000      	.short	0x0000
    3b54:	40008000 	.word	0x40008000
    3b58:	40008140 	.word	0x40008140
    3b5c:	2000001f 	.word	0x2000001f
    3b60:	4001f508 	.word	0x4001f508
    3b64:	2000001c 	.word	0x2000001c
    3b68:	4000b000 	.word	0x4000b000
    3b6c:	4000b504 	.word	0x4000b504
    3b70:	4000b140 	.word	0x4000b140

00003b74 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3b74:	491e      	ldr	r1, [pc, #120]	; (3bf0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    3b76:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    3b7a:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    3b7e:	481d      	ldr	r0, [pc, #116]	; (3bf4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    3b80:	4a1d      	ldr	r2, [pc, #116]	; (3bf8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    3b82:	f890 c000 	ldrb.w	ip, [r0]
    3b86:	2000      	movs	r0, #0
    3b88:	f1bc 0f00 	cmp.w	ip, #0
    3b8c:	d00a      	beq.n	3ba4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    3b8e:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    3b92:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3b96:	6010      	str	r0, [r2, #0]
    3b98:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3b9c:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    3ba0:	b981      	cbnz	r1, 3bc4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    3ba2:	e009      	b.n	3bb8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    3ba4:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3ba8:	4b14      	ldr	r3, [pc, #80]	; (3bfc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    3baa:	6018      	str	r0, [r3, #0]
    3bac:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3bb0:	6010      	str	r0, [r2, #0]
    3bb2:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3bb6:	e7f1      	b.n	3b9c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    3bb8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3bbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3bc0:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    3bc4:	490e      	ldr	r1, [pc, #56]	; (3c00 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    3bc6:	f04f 32ff 	mov.w	r2, #4294967295
    3bca:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3bce:	4a0d      	ldr	r2, [pc, #52]	; (3c04 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    3bd0:	6010      	str	r0, [r2, #0]
    3bd2:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3bd6:	1d12      	adds	r2, r2, #4
    3bd8:	6010      	str	r0, [r2, #0]
    3bda:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3bde:	1d12      	adds	r2, r2, #4
    3be0:	6010      	str	r0, [r2, #0]
    3be2:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3be6:	1d12      	adds	r2, r2, #4
    3be8:	6010      	str	r0, [r2, #0]
    3bea:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    3bee:	4770      	bx	lr
    3bf0:	4000b000 	.word	0x4000b000
    3bf4:	2000001f 	.word	0x2000001f
    3bf8:	4000b544 	.word	0x4000b544
    3bfc:	4000b540 	.word	0x4000b540
    3c00:	40008000 	.word	0x40008000
    3c04:	40008540 	.word	0x40008540

00003c08 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    3c08:	4808      	ldr	r0, [pc, #32]	; (3c2c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    3c0a:	f990 0002 	ldrsb.w	r0, [r0, #2]
    3c0e:	2800      	cmp	r0, #0
    3c10:	bfb8      	it	lt
    3c12:	4770      	bxlt	lr
    3c14:	f000 011f 	and.w	r1, r0, #31
    3c18:	2201      	movs	r2, #1
    3c1a:	fa02 f101 	lsl.w	r1, r2, r1
    3c1e:	0940      	lsrs	r0, r0, #5
    3c20:	0080      	lsls	r0, r0, #2
    3c22:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3c26:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3c2a:	4770      	bx	lr
    3c2c:	2000001c 	.word	0x2000001c

00003c30 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3c30:	b510      	push	{r4, lr}
    3c32:	2807      	cmp	r0, #7
    3c34:	d20d      	bcs.n	3c52 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    3c36:	e8df f000 	tbb	[pc, r0]
    3c3a:	0404      	.short	0x0404
    3c3c:	06060404 	.word	0x06060404
    3c40:	0006      	.short	0x0006
    3c42:	4906      	ldr	r1, [pc, #24]	; (3c5c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3c44:	e002      	b.n	3c4c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    3c46:	1f00      	subs	r0, r0, #4
    3c48:	4905      	ldr	r1, [pc, #20]	; (3c60 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    3c4a:	b2c0      	uxtb	r0, r0
    3c4c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3c50:	bd10      	pop	{r4, pc}
    3c52:	f44f 7126 	mov.w	r1, #664	; 0x298
    3c56:	206c      	movs	r0, #108	; 0x6c
    3c58:	f000 fbac 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c5c:	40008140 	.word	0x40008140
    3c60:	4000b140 	.word	0x4000b140

00003c64 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3c64:	b570      	push	{r4, r5, r6, lr}
    3c66:	4819      	ldr	r0, [pc, #100]	; (3ccc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    3c68:	2400      	movs	r4, #0
    3c6a:	2104      	movs	r1, #4
    3c6c:	7004      	strb	r4, [r0, #0]
    3c6e:	1ec0      	subs	r0, r0, #3
    3c70:	7001      	strb	r1, [r0, #0]
    3c72:	0589      	lsls	r1, r1, #22
    3c74:	60c1      	str	r1, [r0, #12]
    3c76:	f7ff fc99 	bl	35ac <MPSL_IRQ_TIMER0_Handler+0xf8>
    3c7a:	2501      	movs	r5, #1
    3c7c:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    3c80:	02eb      	lsls	r3, r5, #11
    3c82:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    3c86:	f3bf 8f4f 	dsb	sy
    3c8a:	f3bf 8f6f 	isb	sy
    3c8e:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    3c92:	4a0f      	ldr	r2, [pc, #60]	; (3cd0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    3c94:	6055      	str	r5, [r2, #4]
    3c96:	6095      	str	r5, [r2, #8]
    3c98:	480e      	ldr	r0, [pc, #56]	; (3cd4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    3c9a:	6801      	ldr	r1, [r0, #0]
    3c9c:	2900      	cmp	r1, #0
    3c9e:	d1fc      	bne.n	3c9a <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    3ca0:	1e48      	subs	r0, r1, #1
    3ca2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    3ca6:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    3caa:	480b      	ldr	r0, [pc, #44]	; (3cd8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    3cac:	6004      	str	r4, [r0, #0]
    3cae:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    3cb2:	1d00      	adds	r0, r0, #4
    3cb4:	6004      	str	r4, [r0, #0]
    3cb6:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    3cba:	1d00      	adds	r0, r0, #4
    3cbc:	6004      	str	r4, [r0, #0]
    3cbe:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    3cc2:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    3cc6:	6015      	str	r5, [r2, #0]
    3cc8:	bd70      	pop	{r4, r5, r6, pc}
    3cca:	0000      	.short	0x0000
    3ccc:	2000001f 	.word	0x2000001f
    3cd0:	4000b000 	.word	0x4000b000
    3cd4:	4000b504 	.word	0x4000b504
    3cd8:	4000b540 	.word	0x4000b540

00003cdc <MPSL_IRQ_CLOCK_Handler>:
    3cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ce0:	4c16      	ldr	r4, [pc, #88]	; (3d3c <MPSL_IRQ_CLOCK_Handler+0x60>)
    3ce2:	7a60      	ldrb	r0, [r4, #9]
    3ce4:	2800      	cmp	r0, #0
    3ce6:	d027      	beq.n	3d38 <MPSL_IRQ_CLOCK_Handler+0x5c>
    3ce8:	f44f 7180 	mov.w	r1, #256	; 0x100
    3cec:	058d      	lsls	r5, r1, #22
    3cee:	4628      	mov	r0, r5
    3cf0:	f008 faee 	bl	c2d0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3cf4:	4680      	mov	r8, r0
    3cf6:	f44f 7182 	mov.w	r1, #260	; 0x104
    3cfa:	4628      	mov	r0, r5
    3cfc:	f008 fae8 	bl	c2d0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3d00:	2600      	movs	r6, #0
    3d02:	4607      	mov	r7, r0
    3d04:	f1b8 0f00 	cmp.w	r8, #0
    3d08:	d009      	beq.n	3d1e <MPSL_IRQ_CLOCK_Handler+0x42>
    3d0a:	2001      	movs	r0, #1
    3d0c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3d10:	7920      	ldrb	r0, [r4, #4]
    3d12:	b120      	cbz	r0, 3d1e <MPSL_IRQ_CLOCK_Handler+0x42>
    3d14:	7126      	strb	r6, [r4, #4]
    3d16:	69e0      	ldr	r0, [r4, #28]
    3d18:	b108      	cbz	r0, 3d1e <MPSL_IRQ_CLOCK_Handler+0x42>
    3d1a:	4780      	blx	r0
    3d1c:	61e6      	str	r6, [r4, #28]
    3d1e:	b137      	cbz	r7, 3d2e <MPSL_IRQ_CLOCK_Handler+0x52>
    3d20:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3d24:	2002      	movs	r0, #2
    3d26:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3d2a:	f000 fa8b 	bl	4244 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3d2e:	4640      	mov	r0, r8
    3d30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3d34:	f000 b85a 	b.w	3dec <MPSL_IRQ_CLOCK_Handler+0x110>
    3d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d3c:	2000002c 	.word	0x2000002c
    3d40:	b510      	push	{r4, lr}
    3d42:	f008 fb6f 	bl	c424 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3d46:	b930      	cbnz	r0, 3d56 <MPSL_IRQ_CLOCK_Handler+0x7a>
    3d48:	f008 fb8d 	bl	c466 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3d4c:	b918      	cbnz	r0, 3d56 <MPSL_IRQ_CLOCK_Handler+0x7a>
    3d4e:	f008 fbc0 	bl	c4d2 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3d52:	2800      	cmp	r0, #0
    3d54:	d002      	beq.n	3d5c <MPSL_IRQ_CLOCK_Handler+0x80>
    3d56:	4902      	ldr	r1, [pc, #8]	; (3d60 <MPSL_IRQ_CLOCK_Handler+0x84>)
    3d58:	2002      	movs	r0, #2
    3d5a:	6008      	str	r0, [r1, #0]
    3d5c:	bd10      	pop	{r4, pc}
    3d5e:	0000      	.short	0x0000
    3d60:	40000c34 	.word	0x40000c34
    3d64:	b570      	push	{r4, r5, r6, lr}
    3d66:	f000 f987 	bl	4078 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3d6a:	f000 fabf 	bl	42ec <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3d6e:	4c09      	ldr	r4, [pc, #36]	; (3d94 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    3d70:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3d74:	b130      	cbz	r0, 3d84 <MPSL_IRQ_CLOCK_Handler+0xa8>
    3d76:	f7ff ffe3 	bl	3d40 <MPSL_IRQ_CLOCK_Handler+0x64>
    3d7a:	2001      	movs	r0, #1
    3d7c:	6128      	str	r0, [r5, #16]
    3d7e:	2004      	movs	r0, #4
    3d80:	72a0      	strb	r0, [r4, #10]
    3d82:	e004      	b.n	3d8e <MPSL_IRQ_CLOCK_Handler+0xb2>
    3d84:	2003      	movs	r0, #3
    3d86:	72a0      	strb	r0, [r4, #10]
    3d88:	2001      	movs	r0, #1
    3d8a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3d8e:	2000      	movs	r0, #0
    3d90:	71e0      	strb	r0, [r4, #7]
    3d92:	bd70      	pop	{r4, r5, r6, pc}
    3d94:	2000002c 	.word	0x2000002c
    3d98:	b570      	push	{r4, r5, r6, lr}
    3d9a:	4c13      	ldr	r4, [pc, #76]	; (3de8 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    3d9c:	79a0      	ldrb	r0, [r4, #6]
    3d9e:	b1f0      	cbz	r0, 3dde <MPSL_IRQ_CLOCK_Handler+0x102>
    3da0:	2801      	cmp	r0, #1
    3da2:	d003      	beq.n	3dac <MPSL_IRQ_CLOCK_Handler+0xd0>
    3da4:	79e1      	ldrb	r1, [r4, #7]
    3da6:	1e40      	subs	r0, r0, #1
    3da8:	4281      	cmp	r1, r0
    3daa:	da18      	bge.n	3dde <MPSL_IRQ_CLOCK_Handler+0x102>
    3dac:	f000 fa9e 	bl	42ec <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3db0:	4605      	mov	r5, r0
    3db2:	f000 fb6f 	bl	4494 <mpsl_temperature_get>
    3db6:	79a1      	ldrb	r1, [r4, #6]
    3db8:	2901      	cmp	r1, #1
    3dba:	d902      	bls.n	3dc2 <MPSL_IRQ_CLOCK_Handler+0xe6>
    3dbc:	79e1      	ldrb	r1, [r4, #7]
    3dbe:	1c49      	adds	r1, r1, #1
    3dc0:	71e1      	strb	r1, [r4, #7]
    3dc2:	b10d      	cbz	r5, 3dc8 <MPSL_IRQ_CLOCK_Handler+0xec>
    3dc4:	6961      	ldr	r1, [r4, #20]
    3dc6:	e000      	b.n	3dca <MPSL_IRQ_CLOCK_Handler+0xee>
    3dc8:	6921      	ldr	r1, [r4, #16]
    3dca:	1a41      	subs	r1, r0, r1
    3dcc:	2902      	cmp	r1, #2
    3dce:	da02      	bge.n	3dd6 <MPSL_IRQ_CLOCK_Handler+0xfa>
    3dd0:	f111 0f02 	cmn.w	r1, #2
    3dd4:	dc07      	bgt.n	3de6 <MPSL_IRQ_CLOCK_Handler+0x10a>
    3dd6:	b10d      	cbz	r5, 3ddc <MPSL_IRQ_CLOCK_Handler+0x100>
    3dd8:	6160      	str	r0, [r4, #20]
    3dda:	e000      	b.n	3dde <MPSL_IRQ_CLOCK_Handler+0x102>
    3ddc:	6120      	str	r0, [r4, #16]
    3dde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3de2:	f7ff bfbf 	b.w	3d64 <MPSL_IRQ_CLOCK_Handler+0x88>
    3de6:	bd70      	pop	{r4, r5, r6, pc}
    3de8:	2000002c 	.word	0x2000002c
    3dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3df0:	4606      	mov	r6, r0
    3df2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3df6:	f44f 7186 	mov.w	r1, #268	; 0x10c
    3dfa:	4628      	mov	r0, r5
    3dfc:	f008 fa68 	bl	c2d0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3e00:	4680      	mov	r8, r0
    3e02:	f44f 7188 	mov.w	r1, #272	; 0x110
    3e06:	4628      	mov	r0, r5
    3e08:	f008 fa62 	bl	c2d0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3e0c:	4c27      	ldr	r4, [pc, #156]	; (3eac <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3e0e:	4682      	mov	sl, r0
    3e10:	7827      	ldrb	r7, [r4, #0]
    3e12:	f104 0008 	add.w	r0, r4, #8
    3e16:	f008 facf 	bl	c3b8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3e1a:	b110      	cbz	r0, 3e22 <MPSL_IRQ_CLOCK_Handler+0x146>
    3e1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3e20:	e016      	b.n	3e50 <MPSL_IRQ_CLOCK_Handler+0x174>
    3e22:	f04f 0901 	mov.w	r9, #1
    3e26:	b146      	cbz	r6, 3e3a <MPSL_IRQ_CLOCK_Handler+0x15e>
    3e28:	7aa0      	ldrb	r0, [r4, #10]
    3e2a:	2803      	cmp	r0, #3
    3e2c:	d105      	bne.n	3e3a <MPSL_IRQ_CLOCK_Handler+0x15e>
    3e2e:	2004      	movs	r0, #4
    3e30:	72a0      	strb	r0, [r4, #10]
    3e32:	f7ff ff85 	bl	3d40 <MPSL_IRQ_CLOCK_Handler+0x64>
    3e36:	f8c5 9010 	str.w	r9, [r5, #16]
    3e3a:	2600      	movs	r6, #0
    3e3c:	f1b8 0f00 	cmp.w	r8, #0
    3e40:	d018      	beq.n	3e74 <MPSL_IRQ_CLOCK_Handler+0x198>
    3e42:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    3e46:	7aa0      	ldrb	r0, [r4, #10]
    3e48:	2804      	cmp	r0, #4
    3e4a:	d004      	beq.n	3e56 <MPSL_IRQ_CLOCK_Handler+0x17a>
    3e4c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    3e50:	206d      	movs	r0, #109	; 0x6d
    3e52:	f000 faaf 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3e56:	f008 fae5 	bl	c424 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3e5a:	b928      	cbnz	r0, 3e68 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3e5c:	f008 fb03 	bl	c466 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3e60:	b910      	cbnz	r0, 3e68 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3e62:	f008 fb36 	bl	c4d2 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3e66:	b108      	cbz	r0, 3e6c <MPSL_IRQ_CLOCK_Handler+0x190>
    3e68:	4811      	ldr	r0, [pc, #68]	; (3eb0 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    3e6a:	6006      	str	r6, [r0, #0]
    3e6c:	2002      	movs	r0, #2
    3e6e:	72a0      	strb	r0, [r4, #10]
    3e70:	f000 f8e6 	bl	4040 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3e74:	f1ba 0f00 	cmp.w	sl, #0
    3e78:	d008      	beq.n	3e8c <MPSL_IRQ_CLOCK_Handler+0x1b0>
    3e7a:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3e7e:	7aa0      	ldrb	r0, [r4, #10]
    3e80:	2802      	cmp	r0, #2
    3e82:	d101      	bne.n	3e88 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    3e84:	f7ff ff88 	bl	3d98 <MPSL_IRQ_CLOCK_Handler+0xbc>
    3e88:	f8c5 9014 	str.w	r9, [r5, #20]
    3e8c:	b13f      	cbz	r7, 3e9e <MPSL_IRQ_CLOCK_Handler+0x1c2>
    3e8e:	7026      	strb	r6, [r4, #0]
    3e90:	7aa0      	ldrb	r0, [r4, #10]
    3e92:	2802      	cmp	r0, #2
    3e94:	d101      	bne.n	3e9a <MPSL_IRQ_CLOCK_Handler+0x1be>
    3e96:	f7ff ff65 	bl	3d64 <MPSL_IRQ_CLOCK_Handler+0x88>
    3e9a:	f000 f8d1 	bl	4040 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3e9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ea2:	4802      	ldr	r0, [pc, #8]	; (3eac <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3ea4:	3008      	adds	r0, #8
    3ea6:	f008 ba9e 	b.w	c3e6 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3eaa:	0000      	.short	0x0000
    3eac:	2000002c 	.word	0x2000002c
    3eb0:	40000c34 	.word	0x40000c34
    3eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3eb8:	4c5c      	ldr	r4, [pc, #368]	; (402c <MPSL_IRQ_CLOCK_Handler+0x350>)
    3eba:	f04f 0800 	mov.w	r8, #0
    3ebe:	4606      	mov	r6, r0
    3ec0:	f8c4 8018 	str.w	r8, [r4, #24]
    3ec4:	7843      	ldrb	r3, [r0, #1]
    3ec6:	7882      	ldrb	r2, [r0, #2]
    3ec8:	7800      	ldrb	r0, [r0, #0]
    3eca:	72e0      	strb	r0, [r4, #11]
    3ecc:	7163      	strb	r3, [r4, #5]
    3ece:	2701      	movs	r7, #1
    3ed0:	71a2      	strb	r2, [r4, #6]
    3ed2:	07bd      	lsls	r5, r7, #30
    3ed4:	f884 8007 	strb.w	r8, [r4, #7]
    3ed8:	2805      	cmp	r0, #5
    3eda:	d224      	bcs.n	3f26 <MPSL_IRQ_CLOCK_Handler+0x24a>
    3edc:	e8df f000 	tbb	[pc, r0]
    3ee0:	1f05030f 	.word	0x1f05030f
    3ee4:	0021      	.short	0x0021
    3ee6:	61a7      	str	r7, [r4, #24]
    3ee8:	e009      	b.n	3efe <MPSL_IRQ_CLOCK_Handler+0x222>
    3eea:	f000 f8c5 	bl	4078 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3eee:	2101      	movs	r1, #1
    3ef0:	4628      	mov	r0, r5
    3ef2:	f008 f9f2 	bl	c2da <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3ef6:	2800      	cmp	r0, #0
    3ef8:	d0f9      	beq.n	3eee <MPSL_IRQ_CLOCK_Handler+0x212>
    3efa:	2002      	movs	r0, #2
    3efc:	61a0      	str	r0, [r4, #24]
    3efe:	f008 fa18 	bl	c332 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3f02:	b1b0      	cbz	r0, 3f32 <MPSL_IRQ_CLOCK_Handler+0x256>
    3f04:	f000 fa0c 	bl	4320 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    3f08:	7e21      	ldrb	r1, [r4, #24]
    3f0a:	f001 0103 	and.w	r1, r1, #3
    3f0e:	4288      	cmp	r0, r1
    3f10:	d10f      	bne.n	3f32 <MPSL_IRQ_CLOCK_Handler+0x256>
    3f12:	79b0      	ldrb	r0, [r6, #6]
    3f14:	b150      	cbz	r0, 3f2c <MPSL_IRQ_CLOCK_Handler+0x250>
    3f16:	2002      	movs	r0, #2
    3f18:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3f1c:	e06a      	b.n	3ff4 <MPSL_IRQ_CLOCK_Handler+0x318>
    3f1e:	4844      	ldr	r0, [pc, #272]	; (4030 <MPSL_IRQ_CLOCK_Handler+0x354>)
    3f20:	e7ec      	b.n	3efc <MPSL_IRQ_CLOCK_Handler+0x220>
    3f22:	4844      	ldr	r0, [pc, #272]	; (4034 <MPSL_IRQ_CLOCK_Handler+0x358>)
    3f24:	e7ea      	b.n	3efc <MPSL_IRQ_CLOCK_Handler+0x220>
    3f26:	f44f 714c 	mov.w	r1, #816	; 0x330
    3f2a:	e049      	b.n	3fc0 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    3f2c:	f000 f9cc 	bl	42c8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3f30:	e060      	b.n	3ff4 <MPSL_IRQ_CLOCK_Handler+0x318>
    3f32:	60ef      	str	r7, [r5, #12]
    3f34:	f44f 7a82 	mov.w	sl, #260	; 0x104
    3f38:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3f3c:	69a0      	ldr	r0, [r4, #24]
    3f3e:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    3f42:	f008 fa5b 	bl	c3fc <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3f46:	b940      	cbnz	r0, 3f5a <MPSL_IRQ_CLOCK_Handler+0x27e>
    3f48:	f008 fa62 	bl	c410 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3f4c:	b928      	cbnz	r0, 3f5a <MPSL_IRQ_CLOCK_Handler+0x27e>
    3f4e:	f008 fa76 	bl	c43e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3f52:	b910      	cbnz	r0, 3f5a <MPSL_IRQ_CLOCK_Handler+0x27e>
    3f54:	f008 fa87 	bl	c466 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3f58:	b138      	cbz	r0, 3f6a <MPSL_IRQ_CLOCK_Handler+0x28e>
    3f5a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3f5e:	4836      	ldr	r0, [pc, #216]	; (4038 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3f60:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    3f64:	f3c1 3142 	ubfx	r1, r1, #13, #3
    3f68:	6001      	str	r1, [r0, #0]
    3f6a:	f008 fa47 	bl	c3fc <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3f6e:	b940      	cbnz	r0, 3f82 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3f70:	f008 fa4e 	bl	c410 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3f74:	b928      	cbnz	r0, 3f82 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3f76:	f008 fa62 	bl	c43e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3f7a:	b910      	cbnz	r0, 3f82 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3f7c:	f008 fa73 	bl	c466 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3f80:	b110      	cbz	r0, 3f88 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    3f82:	482d      	ldr	r0, [pc, #180]	; (4038 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3f84:	3010      	adds	r0, #16
    3f86:	6007      	str	r7, [r0, #0]
    3f88:	60af      	str	r7, [r5, #8]
    3f8a:	2002      	movs	r0, #2
    3f8c:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3f90:	79b0      	ldrb	r0, [r6, #6]
    3f92:	bb78      	cbnz	r0, 3ff4 <MPSL_IRQ_CLOCK_Handler+0x318>
    3f94:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3f98:	f010 0f02 	tst.w	r0, #2
    3f9c:	d00e      	beq.n	3fbc <MPSL_IRQ_CLOCK_Handler+0x2e0>
    3f9e:	f8df 909c 	ldr.w	r9, [pc, #156]	; 403c <MPSL_IRQ_CLOCK_Handler+0x360>
    3fa2:	f8d9 1000 	ldr.w	r1, [r9]
    3fa6:	43c9      	mvns	r1, r1
    3fa8:	f341 1700 	sbfx	r7, r1, #4, #1
    3fac:	f8d9 1000 	ldr.w	r1, [r9]
    3fb0:	f041 0110 	orr.w	r1, r1, #16
    3fb4:	f8c9 1000 	str.w	r1, [r9]
    3fb8:	1c7f      	adds	r7, r7, #1
    3fba:	e007      	b.n	3fcc <MPSL_IRQ_CLOCK_Handler+0x2f0>
    3fbc:	f240 21f1 	movw	r1, #753	; 0x2f1
    3fc0:	206d      	movs	r0, #109	; 0x6d
    3fc2:	f000 f9f7 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3fc6:	bf00      	nop
    3fc8:	f000 fb1a 	bl	4600 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3fcc:	4651      	mov	r1, sl
    3fce:	4628      	mov	r0, r5
    3fd0:	f008 f97e 	bl	c2d0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3fd4:	2800      	cmp	r0, #0
    3fd6:	d0f7      	beq.n	3fc8 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    3fd8:	f000 f976 	bl	42c8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3fdc:	b92f      	cbnz	r7, 3fea <MPSL_IRQ_CLOCK_Handler+0x30e>
    3fde:	f8d9 1000 	ldr.w	r1, [r9]
    3fe2:	f021 0110 	bic.w	r1, r1, #16
    3fe6:	f8c9 1000 	str.w	r1, [r9]
    3fea:	2002      	movs	r0, #2
    3fec:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3ff0:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3ff4:	79a0      	ldrb	r0, [r4, #6]
    3ff6:	b170      	cbz	r0, 4016 <MPSL_IRQ_CLOCK_Handler+0x33a>
    3ff8:	7830      	ldrb	r0, [r6, #0]
    3ffa:	b960      	cbnz	r0, 4016 <MPSL_IRQ_CLOCK_Handler+0x33a>
    3ffc:	f000 f976 	bl	42ec <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4000:	4606      	mov	r6, r0
    4002:	f000 fa47 	bl	4494 <mpsl_temperature_get>
    4006:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    400a:	b116      	cbz	r6, 4012 <MPSL_IRQ_CLOCK_Handler+0x336>
    400c:	e9c4 2004 	strd	r2, r0, [r4, #16]
    4010:	e001      	b.n	4016 <MPSL_IRQ_CLOCK_Handler+0x33a>
    4012:	e9c4 0204 	strd	r0, r2, [r4, #16]
    4016:	2101      	movs	r1, #1
    4018:	4628      	mov	r0, r5
    401a:	f008 f95e 	bl	c2da <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    401e:	b108      	cbz	r0, 4024 <MPSL_IRQ_CLOCK_Handler+0x348>
    4020:	f000 f95e 	bl	42e0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    4024:	f884 800a 	strb.w	r8, [r4, #10]
    4028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    402c:	2000002c 	.word	0x2000002c
    4030:	00020001 	.word	0x00020001
    4034:	00030001 	.word	0x00030001
    4038:	4000053c 	.word	0x4000053c
    403c:	e000ed10 	.word	0xe000ed10

00004040 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    4040:	b510      	push	{r4, lr}
    4042:	f3ef 8410 	mrs	r4, PRIMASK
    4046:	b672      	cpsid	i
    4048:	480a      	ldr	r0, [pc, #40]	; (4074 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    404a:	7841      	ldrb	r1, [r0, #1]
    404c:	b129      	cbz	r1, 405a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    404e:	7841      	ldrb	r1, [r0, #1]
    4050:	1e49      	subs	r1, r1, #1
    4052:	7041      	strb	r1, [r0, #1]
    4054:	7841      	ldrb	r1, [r0, #1]
    4056:	b129      	cbz	r1, 4064 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    4058:	e008      	b.n	406c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    405a:	f240 110d 	movw	r1, #269	; 0x10d
    405e:	206d      	movs	r0, #109	; 0x6d
    4060:	f000 f9a8 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4064:	7880      	ldrb	r0, [r0, #2]
    4066:	b908      	cbnz	r0, 406c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4068:	f000 f94e 	bl	4308 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    406c:	2c00      	cmp	r4, #0
    406e:	d100      	bne.n	4072 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    4070:	b662      	cpsie	i
    4072:	bd10      	pop	{r4, pc}
    4074:	2000002c 	.word	0x2000002c

00004078 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    4078:	b510      	push	{r4, lr}
    407a:	f3ef 8410 	mrs	r4, PRIMASK
    407e:	b672      	cpsid	i
    4080:	4806      	ldr	r0, [pc, #24]	; (409c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    4082:	7841      	ldrb	r1, [r0, #1]
    4084:	1c49      	adds	r1, r1, #1
    4086:	7041      	strb	r1, [r0, #1]
    4088:	7840      	ldrb	r0, [r0, #1]
    408a:	2801      	cmp	r0, #1
    408c:	d101      	bne.n	4092 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    408e:	f008 f93b 	bl	c308 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    4092:	2c00      	cmp	r4, #0
    4094:	d100      	bne.n	4098 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    4096:	b662      	cpsie	i
    4098:	bd10      	pop	{r4, pc}
    409a:	0000      	.short	0x0000
    409c:	2000002c 	.word	0x2000002c

000040a0 <mpsl_clock_hfclk_release>:
    40a0:	4805      	ldr	r0, [pc, #20]	; (40b8 <mpsl_clock_hfclk_release+0x18>)
    40a2:	b510      	push	{r4, lr}
    40a4:	78c1      	ldrb	r1, [r0, #3]
    40a6:	b121      	cbz	r1, 40b2 <mpsl_clock_hfclk_release+0x12>
    40a8:	2100      	movs	r1, #0
    40aa:	7101      	strb	r1, [r0, #4]
    40ac:	70c1      	strb	r1, [r0, #3]
    40ae:	f7ff ffc7 	bl	4040 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    40b2:	2000      	movs	r0, #0
    40b4:	bd10      	pop	{r4, pc}
    40b6:	0000      	.short	0x0000
    40b8:	2000002c 	.word	0x2000002c

000040bc <mpsl_clock_hfclk_request>:
    40bc:	b570      	push	{r4, r5, r6, lr}
    40be:	4c0c      	ldr	r4, [pc, #48]	; (40f0 <mpsl_clock_hfclk_request+0x34>)
    40c0:	78e1      	ldrb	r1, [r4, #3]
    40c2:	b961      	cbnz	r1, 40de <mpsl_clock_hfclk_request+0x22>
    40c4:	2501      	movs	r5, #1
    40c6:	70e5      	strb	r5, [r4, #3]
    40c8:	61e0      	str	r0, [r4, #28]
    40ca:	f7ff ffd5 	bl	4078 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    40ce:	f000 f90d 	bl	42ec <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    40d2:	b130      	cbz	r0, 40e2 <mpsl_clock_hfclk_request+0x26>
    40d4:	69e0      	ldr	r0, [r4, #28]
    40d6:	b110      	cbz	r0, 40de <mpsl_clock_hfclk_request+0x22>
    40d8:	4780      	blx	r0
    40da:	2000      	movs	r0, #0
    40dc:	61e0      	str	r0, [r4, #28]
    40de:	2000      	movs	r0, #0
    40e0:	bd70      	pop	{r4, r5, r6, pc}
    40e2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    40e6:	7125      	strb	r5, [r4, #4]
    40e8:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    40ec:	e7f7      	b.n	40de <mpsl_clock_hfclk_request+0x22>
    40ee:	0000      	.short	0x0000
    40f0:	2000002c 	.word	0x2000002c

000040f4 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    40f4:	f3ef 8010 	mrs	r0, PRIMASK
    40f8:	b672      	cpsid	i
    40fa:	4904      	ldr	r1, [pc, #16]	; (410c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    40fc:	788a      	ldrb	r2, [r1, #2]
    40fe:	1c52      	adds	r2, r2, #1
    4100:	708a      	strb	r2, [r1, #2]
    4102:	2800      	cmp	r0, #0
    4104:	d100      	bne.n	4108 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    4106:	b662      	cpsie	i
    4108:	4770      	bx	lr
    410a:	0000      	.short	0x0000
    410c:	2000002c 	.word	0x2000002c

00004110 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    4110:	b510      	push	{r4, lr}
    4112:	f3ef 8410 	mrs	r4, PRIMASK
    4116:	b672      	cpsid	i
    4118:	480a      	ldr	r0, [pc, #40]	; (4144 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    411a:	7881      	ldrb	r1, [r0, #2]
    411c:	b129      	cbz	r1, 412a <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    411e:	7881      	ldrb	r1, [r0, #2]
    4120:	1e49      	subs	r1, r1, #1
    4122:	7081      	strb	r1, [r0, #2]
    4124:	7841      	ldrb	r1, [r0, #1]
    4126:	b129      	cbz	r1, 4134 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    4128:	e008      	b.n	413c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    412a:	f240 1125 	movw	r1, #293	; 0x125
    412e:	206d      	movs	r0, #109	; 0x6d
    4130:	f000 f940 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4134:	7880      	ldrb	r0, [r0, #2]
    4136:	b908      	cbnz	r0, 413c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    4138:	f000 f8e6 	bl	4308 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    413c:	2c00      	cmp	r4, #0
    413e:	d100      	bne.n	4142 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    4140:	b662      	cpsie	i
    4142:	bd10      	pop	{r4, pc}
    4144:	2000002c 	.word	0x2000002c

00004148 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    4148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    414c:	0004      	movs	r4, r0
    414e:	f06f 0015 	mvn.w	r0, #21
    4152:	d03c      	beq.n	41ce <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4154:	7821      	ldrb	r1, [r4, #0]
    4156:	2904      	cmp	r1, #4
    4158:	d839      	bhi.n	41ce <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    415a:	2900      	cmp	r1, #0
    415c:	7861      	ldrb	r1, [r4, #1]
    415e:	d038      	beq.n	41d2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    4160:	2900      	cmp	r1, #0
    4162:	d134      	bne.n	41ce <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4164:	78a1      	ldrb	r1, [r4, #2]
    4166:	2900      	cmp	r1, #0
    4168:	d131      	bne.n	41ce <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    416a:	2000      	movs	r0, #0
    416c:	f008 f87b 	bl	c266 <MPSL_IRQ_RADIO_Handler+0x1e>
    4170:	2000      	movs	r0, #0
    4172:	f008 f86b 	bl	c24c <MPSL_IRQ_RADIO_Handler+0x4>
    4176:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    417a:	f04f 31ff 	mov.w	r1, #4294967295
    417e:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    4182:	2600      	movs	r6, #0
    4184:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    4188:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    418c:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    4190:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    4194:	4f14      	ldr	r7, [pc, #80]	; (41e8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    4196:	707e      	strb	r6, [r7, #1]
    4198:	88a0      	ldrh	r0, [r4, #4]
    419a:	81b8      	strh	r0, [r7, #12]
    419c:	f008 f8ab 	bl	c2f6 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    41a0:	2501      	movs	r5, #1
    41a2:	b108      	cbz	r0, 41a8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    41a4:	70fd      	strb	r5, [r7, #3]
    41a6:	707d      	strb	r5, [r7, #1]
    41a8:	2101      	movs	r1, #1
    41aa:	4640      	mov	r0, r8
    41ac:	f008 f895 	bl	c2da <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    41b0:	b108      	cbz	r0, 41b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    41b2:	f000 f895 	bl	42e0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    41b6:	4620      	mov	r0, r4
    41b8:	f7ff fe7c 	bl	3eb4 <MPSL_IRQ_CLOCK_Handler+0x1d8>
    41bc:	727d      	strb	r5, [r7, #9]
    41be:	2000      	movs	r0, #0
    41c0:	f008 f844 	bl	c24c <MPSL_IRQ_RADIO_Handler+0x4>
    41c4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    41c8:	4630      	mov	r0, r6
    41ca:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    41ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41d2:	2900      	cmp	r1, #0
    41d4:	d0fb      	beq.n	41ce <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    41d6:	2920      	cmp	r1, #32
    41d8:	d8f9      	bhi.n	41ce <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    41da:	78a1      	ldrb	r1, [r4, #2]
    41dc:	2921      	cmp	r1, #33	; 0x21
    41de:	d8f6      	bhi.n	41ce <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    41e0:	2901      	cmp	r1, #1
    41e2:	d1c2      	bne.n	416a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    41e4:	e7f3      	b.n	41ce <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    41e6:	0000      	.short	0x0000
    41e8:	2000002c 	.word	0x2000002c

000041ec <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    41ec:	4801      	ldr	r0, [pc, #4]	; (41f4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    41ee:	8980      	ldrh	r0, [r0, #12]
    41f0:	4770      	bx	lr
    41f2:	0000      	.short	0x0000
    41f4:	2000002c 	.word	0x2000002c

000041f8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    41f8:	b510      	push	{r4, lr}
    41fa:	480d      	ldr	r0, [pc, #52]	; (4230 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    41fc:	f008 f8dc 	bl	c3b8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4200:	490b      	ldr	r1, [pc, #44]	; (4230 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4202:	3908      	subs	r1, #8
    4204:	b148      	cbz	r0, 421a <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    4206:	2001      	movs	r0, #1
    4208:	7008      	strb	r0, [r1, #0]
    420a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    420e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    4212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4216:	f7ff bf2f 	b.w	4078 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    421a:	7a88      	ldrb	r0, [r1, #10]
    421c:	2802      	cmp	r0, #2
    421e:	d101      	bne.n	4224 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    4220:	f7ff fda0 	bl	3d64 <MPSL_IRQ_CLOCK_Handler+0x88>
    4224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4228:	4801      	ldr	r0, [pc, #4]	; (4230 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    422a:	f008 b8dc 	b.w	c3e6 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    422e:	0000      	.short	0x0000
    4230:	20000034 	.word	0x20000034

00004234 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    4234:	4802      	ldr	r0, [pc, #8]	; (4240 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    4236:	7a80      	ldrb	r0, [r0, #10]
    4238:	2800      	cmp	r0, #0
    423a:	d000      	beq.n	423e <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    423c:	2001      	movs	r0, #1
    423e:	4770      	bx	lr
    4240:	2000002c 	.word	0x2000002c

00004244 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    4244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4246:	4d1f      	ldr	r5, [pc, #124]	; (42c4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4248:	7ae8      	ldrb	r0, [r5, #11]
    424a:	2800      	cmp	r0, #0
    424c:	d10f      	bne.n	426e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    424e:	7e28      	ldrb	r0, [r5, #24]
    4250:	f000 0003 	and.w	r0, r0, #3
    4254:	f008 f85d 	bl	c312 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4258:	2800      	cmp	r0, #0
    425a:	d008      	beq.n	426e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    425c:	f3ef 8110 	mrs	r1, PRIMASK
    4260:	b672      	cpsid	i
    4262:	f7ff ffe7 	bl	4234 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    4266:	b118      	cbz	r0, 4270 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    4268:	2900      	cmp	r1, #0
    426a:	d100      	bne.n	426e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    426c:	b662      	cpsie	i
    426e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4270:	2601      	movs	r6, #1
    4272:	72ae      	strb	r6, [r5, #10]
    4274:	b901      	cbnz	r1, 4278 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    4276:	b662      	cpsie	i
    4278:	2018      	movs	r0, #24
    427a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    427e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4282:	61a6      	str	r6, [r4, #24]
    4284:	f44f 7020 	mov.w	r0, #640	; 0x280
    4288:	f8ad 0000 	strh.w	r0, [sp]
    428c:	f8bd 0000 	ldrh.w	r0, [sp]
    4290:	1e41      	subs	r1, r0, #1
    4292:	f8ad 1000 	strh.w	r1, [sp]
    4296:	d2f9      	bcs.n	428c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    4298:	2700      	movs	r7, #0
    429a:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    429e:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    42a2:	4808      	ldr	r0, [pc, #32]	; (42c4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    42a4:	3008      	adds	r0, #8
    42a6:	f008 f89a 	bl	c3de <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    42aa:	702f      	strb	r7, [r5, #0]
    42ac:	f7ff fd5a 	bl	3d64 <MPSL_IRQ_CLOCK_Handler+0x88>
    42b0:	6166      	str	r6, [r4, #20]
    42b2:	7968      	ldrb	r0, [r5, #5]
    42b4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    42b8:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    42bc:	2018      	movs	r0, #24
    42be:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    42c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42c4:	2000002c 	.word	0x2000002c

000042c8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    42c8:	b510      	push	{r4, lr}
    42ca:	4c04      	ldr	r4, [pc, #16]	; (42dc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    42cc:	7e20      	ldrb	r0, [r4, #24]
    42ce:	f000 0003 	and.w	r0, r0, #3
    42d2:	f008 f81e 	bl	c312 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    42d6:	2800      	cmp	r0, #0
    42d8:	d0f8      	beq.n	42cc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    42da:	bd10      	pop	{r4, pc}
    42dc:	2000002c 	.word	0x2000002c

000042e0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    42e0:	4901      	ldr	r1, [pc, #4]	; (42e8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    42e2:	2001      	movs	r0, #1
    42e4:	7008      	strb	r0, [r1, #0]
    42e6:	4770      	bx	lr
    42e8:	20000298 	.word	0x20000298

000042ec <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    42ec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    42f0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    42f4:	b918      	cbnz	r0, 42fe <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    42f6:	4803      	ldr	r0, [pc, #12]	; (4304 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    42f8:	7800      	ldrb	r0, [r0, #0]
    42fa:	2800      	cmp	r0, #0
    42fc:	d000      	beq.n	4300 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    42fe:	2001      	movs	r0, #1
    4300:	4770      	bx	lr
    4302:	0000      	.short	0x0000
    4304:	20000298 	.word	0x20000298

00004308 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    4308:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    430c:	2101      	movs	r1, #1
    430e:	6041      	str	r1, [r0, #4]
    4310:	2100      	movs	r1, #0
    4312:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    4316:	4801      	ldr	r0, [pc, #4]	; (431c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    4318:	7001      	strb	r1, [r0, #0]
    431a:	4770      	bx	lr
    431c:	20000298 	.word	0x20000298

00004320 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    4320:	4802      	ldr	r0, [pc, #8]	; (432c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    4322:	6800      	ldr	r0, [r0, #0]
    4324:	f000 0003 	and.w	r0, r0, #3
    4328:	4770      	bx	lr
    432a:	0000      	.short	0x0000
    432c:	4000041c 	.word	0x4000041c
    4330:	b510      	push	{r4, lr}
    4332:	b131      	cbz	r1, 4342 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    4334:	2901      	cmp	r1, #1
    4336:	d007      	beq.n	4348 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    4338:	f44f 7142 	mov.w	r1, #776	; 0x308
    433c:	a005      	add	r0, pc, #20	; (adr r0, 4354 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    433e:	f000 f80f 	bl	4360 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    4342:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    4346:	e001      	b.n	434c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    4348:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    434c:	f000 0001 	and.w	r0, r0, #1
    4350:	bd10      	pop	{r4, pc}
    4352:	0000      	.short	0x0000
    4354:	5f66726e 	.word	0x5f66726e
    4358:	636f6c63 	.word	0x636f6c63
    435c:	00682e6b 	.word	0x00682e6b

00004360 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    4360:	4a02      	ldr	r2, [pc, #8]	; (436c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    4362:	6852      	ldr	r2, [r2, #4]
    4364:	b102      	cbz	r2, 4368 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    4366:	4710      	bx	r2
    4368:	e7fe      	b.n	4368 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    436a:	0000      	.short	0x0000
    436c:	2000004c 	.word	0x2000004c
    4370:	4806      	ldr	r0, [pc, #24]	; (438c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    4372:	b510      	push	{r4, lr}
    4374:	2100      	movs	r1, #0
    4376:	6001      	str	r1, [r0, #0]
    4378:	2101      	movs	r1, #1
    437a:	6001      	str	r1, [r0, #0]
    437c:	4608      	mov	r0, r1
    437e:	f007 ffef 	bl	c360 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    4382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4386:	2001      	movs	r0, #1
    4388:	f007 bfdd 	b.w	c346 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    438c:	40001ffc 	.word	0x40001ffc
    4390:	4807      	ldr	r0, [pc, #28]	; (43b0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    4392:	b510      	push	{r4, lr}
    4394:	2101      	movs	r1, #1
    4396:	6041      	str	r1, [r0, #4]
    4398:	1e89      	subs	r1, r1, #2
    439a:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    439e:	200c      	movs	r0, #12
    43a0:	f007 ffde 	bl	c360 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    43a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    43a8:	200c      	movs	r0, #12
    43aa:	f007 bfcc 	b.w	c346 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    43ae:	0000      	.short	0x0000
    43b0:	4000c000 	.word	0x4000c000

000043b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    43b4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    43b6:	4a10      	ldr	r2, [pc, #64]	; (43f8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    43b8:	6855      	ldr	r5, [r2, #4]
    43ba:	b1e5      	cbz	r5, 43f6 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    43bc:	2200      	movs	r2, #0
    43be:	4603      	mov	r3, r0
    43c0:	466e      	mov	r6, sp
    43c2:	240a      	movs	r4, #10
    43c4:	e003      	b.n	43ce <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    43c6:	fbb0 f0f4 	udiv	r0, r0, r4
    43ca:	1c52      	adds	r2, r2, #1
    43cc:	b2d2      	uxtb	r2, r2
    43ce:	2800      	cmp	r0, #0
    43d0:	d1f9      	bne.n	43c6 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    43d2:	54b0      	strb	r0, [r6, r2]
    43d4:	e00a      	b.n	43ec <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    43d6:	bf00      	nop
    43d8:	fbb3 f0f4 	udiv	r0, r3, r4
    43dc:	fb04 3010 	mls	r0, r4, r0, r3
    43e0:	fbb3 f3f4 	udiv	r3, r3, r4
    43e4:	1e52      	subs	r2, r2, #1
    43e6:	b2d2      	uxtb	r2, r2
    43e8:	3030      	adds	r0, #48	; 0x30
    43ea:	54b0      	strb	r0, [r6, r2]
    43ec:	2a00      	cmp	r2, #0
    43ee:	d1f3      	bne.n	43d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    43f0:	4630      	mov	r0, r6
    43f2:	47a8      	blx	r5
    43f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    43f6:	e7fe      	b.n	43f6 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    43f8:	2000004c 	.word	0x2000004c

000043fc <mpsl_init>:
    43fc:	b570      	push	{r4, r5, r6, lr}
    43fe:	4c17      	ldr	r4, [pc, #92]	; (445c <mpsl_init+0x60>)
    4400:	4606      	mov	r6, r0
    4402:	460d      	mov	r5, r1
    4404:	7860      	ldrb	r0, [r4, #1]
    4406:	b110      	cbz	r0, 440e <mpsl_init+0x12>
    4408:	f04f 30ff 	mov.w	r0, #4294967295
    440c:	bd70      	pop	{r4, r5, r6, pc}
    440e:	b906      	cbnz	r6, 4412 <mpsl_init+0x16>
    4410:	4e13      	ldr	r6, [pc, #76]	; (4460 <mpsl_init+0x64>)
    4412:	6062      	str	r2, [r4, #4]
    4414:	7025      	strb	r5, [r4, #0]
    4416:	f7ff ffab 	bl	4370 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    441a:	f7ff ffb9 	bl	4390 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    441e:	4630      	mov	r0, r6
    4420:	f7ff fe92 	bl	4148 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    4424:	0006      	movs	r6, r0
    4426:	d1f1      	bne.n	440c <mpsl_init+0x10>
    4428:	f7fe ff0e 	bl	3248 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    442c:	f7ff ff0a 	bl	4244 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    4430:	f007 fed8 	bl	c1e4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    4434:	4628      	mov	r0, r5
    4436:	f007 ff86 	bl	c346 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    443a:	2001      	movs	r0, #1
    443c:	2d00      	cmp	r5, #0
    443e:	db09      	blt.n	4454 <mpsl_init+0x58>
    4440:	f005 011f 	and.w	r1, r5, #31
    4444:	fa00 f101 	lsl.w	r1, r0, r1
    4448:	096a      	lsrs	r2, r5, #5
    444a:	0092      	lsls	r2, r2, #2
    444c:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4450:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    4454:	7060      	strb	r0, [r4, #1]
    4456:	4630      	mov	r0, r6
    4458:	bd70      	pop	{r4, r5, r6, pc}
    445a:	0000      	.short	0x0000
    445c:	2000004c 	.word	0x2000004c
    4460:	0000c382 	.word	0x0000c382

00004464 <mpsl_is_initialized>:
    4464:	4801      	ldr	r0, [pc, #4]	; (446c <mpsl_is_initialized+0x8>)
    4466:	7840      	ldrb	r0, [r0, #1]
    4468:	4770      	bx	lr
    446a:	0000      	.short	0x0000
    446c:	2000004c 	.word	0x2000004c

00004470 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    4470:	4807      	ldr	r0, [pc, #28]	; (4490 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    4472:	f990 0000 	ldrsb.w	r0, [r0]
    4476:	2800      	cmp	r0, #0
    4478:	db09      	blt.n	448e <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    447a:	f000 021f 	and.w	r2, r0, #31
    447e:	2101      	movs	r1, #1
    4480:	4091      	lsls	r1, r2
    4482:	0940      	lsrs	r0, r0, #5
    4484:	0080      	lsls	r0, r0, #2
    4486:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    448a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    448e:	4770      	bx	lr
    4490:	2000004c 	.word	0x2000004c

00004494 <mpsl_temperature_get>:
    4494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4498:	2601      	movs	r6, #1
    449a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    449e:	0331      	lsls	r1, r6, #12
    44a0:	f04f 0800 	mov.w	r8, #0
    44a4:	4640      	mov	r0, r8
    44a6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    44aa:	f3bf 8f4f 	dsb	sy
    44ae:	f3bf 8f6f 	isb	sy
    44b2:	4c16      	ldr	r4, [pc, #88]	; (450c <mpsl_temperature_get+0x78>)
    44b4:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    44b8:	200c      	movs	r0, #12
    44ba:	f007 ff70 	bl	c39e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    44be:	4d14      	ldr	r5, [pc, #80]	; (4510 <mpsl_temperature_get+0x7c>)
    44c0:	6828      	ldr	r0, [r5, #0]
    44c2:	43c0      	mvns	r0, r0
    44c4:	f340 1700 	sbfx	r7, r0, #4, #1
    44c8:	6828      	ldr	r0, [r5, #0]
    44ca:	f040 0010 	orr.w	r0, r0, #16
    44ce:	6028      	str	r0, [r5, #0]
    44d0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    44d4:	6026      	str	r6, [r4, #0]
    44d6:	1c7f      	adds	r7, r7, #1
    44d8:	e002      	b.n	44e0 <mpsl_temperature_get+0x4c>
    44da:	bf00      	nop
    44dc:	f000 f890 	bl	4600 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    44e0:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    44e4:	2800      	cmp	r0, #0
    44e6:	d0f9      	beq.n	44dc <mpsl_temperature_get+0x48>
    44e8:	b91f      	cbnz	r7, 44f2 <mpsl_temperature_get+0x5e>
    44ea:	6828      	ldr	r0, [r5, #0]
    44ec:	f020 0010 	bic.w	r0, r0, #16
    44f0:	6028      	str	r0, [r5, #0]
    44f2:	4808      	ldr	r0, [pc, #32]	; (4514 <mpsl_temperature_get+0x80>)
    44f4:	6805      	ldr	r5, [r0, #0]
    44f6:	6066      	str	r6, [r4, #4]
    44f8:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    44fc:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4500:	200c      	movs	r0, #12
    4502:	f007 ff4c 	bl	c39e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    4506:	4628      	mov	r0, r5
    4508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    450c:	4000c000 	.word	0x4000c000
    4510:	e000ed10 	.word	0xe000ed10
    4514:	4000c508 	.word	0x4000c508

00004518 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    4518:	b510      	push	{r4, lr}
    451a:	4602      	mov	r2, r0
    451c:	2005      	movs	r0, #5
    451e:	490c      	ldr	r1, [pc, #48]	; (4550 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    4520:	e004      	b.n	452c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    4522:	bf00      	nop
    4524:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    4528:	791b      	ldrb	r3, [r3, #4]
    452a:	b133      	cbz	r3, 453a <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    452c:	1e40      	subs	r0, r0, #1
    452e:	b2c0      	uxtb	r0, r0
    4530:	d2f8      	bcs.n	4524 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    4532:	214b      	movs	r1, #75	; 0x4b
    4534:	2069      	movs	r0, #105	; 0x69
    4536:	f7ff ff3d 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    453a:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    453e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    4542:	2200      	movs	r2, #0
    4544:	714a      	strb	r2, [r1, #5]
    4546:	718a      	strb	r2, [r1, #6]
    4548:	2201      	movs	r2, #1
    454a:	710a      	strb	r2, [r1, #4]
    454c:	bd10      	pop	{r4, pc}
    454e:	0000      	.short	0x0000
    4550:	20000ea0 	.word	0x20000ea0

00004554 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    4554:	b510      	push	{r4, lr}
    4556:	2805      	cmp	r0, #5
    4558:	d301      	bcc.n	455e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    455a:	215a      	movs	r1, #90	; 0x5a
    455c:	e006      	b.n	456c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    455e:	490a      	ldr	r1, [pc, #40]	; (4588 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    4560:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    4564:	7901      	ldrb	r1, [r0, #4]
    4566:	2901      	cmp	r1, #1
    4568:	d003      	beq.n	4572 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    456a:	215b      	movs	r1, #91	; 0x5b
    456c:	2069      	movs	r0, #105	; 0x69
    456e:	f7ff ff21 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4572:	7941      	ldrb	r1, [r0, #5]
    4574:	7982      	ldrb	r2, [r0, #6]
    4576:	1c49      	adds	r1, r1, #1
    4578:	b2c9      	uxtb	r1, r1
    457a:	428a      	cmp	r2, r1
    457c:	d000      	beq.n	4580 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    457e:	7141      	strb	r1, [r0, #5]
    4580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4584:	f7ff bf74 	b.w	4470 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    4588:	20000ea0 	.word	0x20000ea0

0000458c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    458c:	b570      	push	{r4, r5, r6, lr}
    458e:	2505      	movs	r5, #5
    4590:	4e0e      	ldr	r6, [pc, #56]	; (45cc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    4592:	4c0f      	ldr	r4, [pc, #60]	; (45d0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    4594:	e016      	b.n	45c4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4596:	7821      	ldrb	r1, [r4, #0]
    4598:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    459c:	7902      	ldrb	r2, [r0, #4]
    459e:	2a01      	cmp	r2, #1
    45a0:	d108      	bne.n	45b4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    45a2:	7942      	ldrb	r2, [r0, #5]
    45a4:	7983      	ldrb	r3, [r0, #6]
    45a6:	429a      	cmp	r2, r3
    45a8:	d004      	beq.n	45b4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    45aa:	7942      	ldrb	r2, [r0, #5]
    45ac:	7182      	strb	r2, [r0, #6]
    45ae:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    45b2:	4780      	blx	r0
    45b4:	7820      	ldrb	r0, [r4, #0]
    45b6:	1c40      	adds	r0, r0, #1
    45b8:	b2c0      	uxtb	r0, r0
    45ba:	7020      	strb	r0, [r4, #0]
    45bc:	2805      	cmp	r0, #5
    45be:	d301      	bcc.n	45c4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    45c0:	2000      	movs	r0, #0
    45c2:	7020      	strb	r0, [r4, #0]
    45c4:	1e6d      	subs	r5, r5, #1
    45c6:	b2ed      	uxtb	r5, r5
    45c8:	d2e5      	bcs.n	4596 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    45ca:	bd70      	pop	{r4, r5, r6, pc}
    45cc:	20000ea0 	.word	0x20000ea0
    45d0:	20000299 	.word	0x20000299

000045d4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    45d4:	b500      	push	{lr}
    45d6:	f007 ff11 	bl	c3fc <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    45da:	b940      	cbnz	r0, 45ee <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    45dc:	f007 ff18 	bl	c410 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    45e0:	b928      	cbnz	r0, 45ee <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    45e2:	f007 ff2c 	bl	c43e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    45e6:	b910      	cbnz	r0, 45ee <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    45e8:	f007 ff3d 	bl	c466 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    45ec:	b108      	cbz	r0, 45f2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    45ee:	4802      	ldr	r0, [pc, #8]	; (45f8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    45f0:	bd00      	pop	{pc}
    45f2:	4802      	ldr	r0, [pc, #8]	; (45fc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    45f4:	bd00      	pop	{pc}
    45f6:	0000      	.short	0x0000
    45f8:	4000050c 	.word	0x4000050c
    45fc:	4001e700 	.word	0x4001e700

00004600 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    4600:	b510      	push	{r4, lr}
    4602:	f007 ff30 	bl	c466 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4606:	b330      	cbz	r0, 4656 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    4608:	f3ef 8010 	mrs	r0, PRIMASK
    460c:	b1c8      	cbz	r0, 4642 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    460e:	2100      	movs	r1, #0
    4610:	b672      	cpsid	i
    4612:	4812      	ldr	r0, [pc, #72]	; (465c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    4614:	6802      	ldr	r2, [r0, #0]
    4616:	6803      	ldr	r3, [r0, #0]
    4618:	f3c2 1200 	ubfx	r2, r2, #4, #1
    461c:	f043 0310 	orr.w	r3, r3, #16
    4620:	6003      	str	r3, [r0, #0]
    4622:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4626:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    462a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    462e:	431c      	orrs	r4, r3
    4630:	d000      	beq.n	4634 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    4632:	bf40      	sev
    4634:	bf20      	wfe
    4636:	bf00      	nop
    4638:	bf00      	nop
    463a:	bf00      	nop
    463c:	bf00      	nop
    463e:	b112      	cbz	r2, 4646 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    4640:	e005      	b.n	464e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    4642:	2101      	movs	r1, #1
    4644:	e7e4      	b.n	4610 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    4646:	6802      	ldr	r2, [r0, #0]
    4648:	f022 0210 	bic.w	r2, r2, #16
    464c:	6002      	str	r2, [r0, #0]
    464e:	2900      	cmp	r1, #0
    4650:	d000      	beq.n	4654 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    4652:	b662      	cpsie	i
    4654:	bd10      	pop	{r4, pc}
    4656:	bf20      	wfe
    4658:	bd10      	pop	{r4, pc}
    465a:	0000      	.short	0x0000
    465c:	e000ed10 	.word	0xe000ed10

00004660 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    4660:	0000c6d7 0000c6f3 0000c6e1 0000c6ed     ................
    4670:	0000c6db 0000c6d5 0000c6d3 0000c6f9     ................
    4680:	0000c6e7 0000c6cd 0000c6c5 0000c6c9     ................
    4690:	0000c6bf                                ....

00004694 <mpsl_fem_disable>:
    4694:	4801      	ldr	r0, [pc, #4]	; (469c <mpsl_fem_disable+0x8>)
    4696:	6800      	ldr	r0, [r0, #0]
    4698:	6800      	ldr	r0, [r0, #0]
    469a:	4700      	bx	r0
    469c:	20000054 	.word	0x20000054

000046a0 <mpsl_fem_lna_configuration_clear>:
    46a0:	4801      	ldr	r0, [pc, #4]	; (46a8 <mpsl_fem_lna_configuration_clear+0x8>)
    46a2:	6800      	ldr	r0, [r0, #0]
    46a4:	6900      	ldr	r0, [r0, #16]
    46a6:	4700      	bx	r0
    46a8:	20000054 	.word	0x20000054

000046ac <mpsl_fem_lna_configuration_set>:
    46ac:	4a01      	ldr	r2, [pc, #4]	; (46b4 <mpsl_fem_lna_configuration_set+0x8>)
    46ae:	6812      	ldr	r2, [r2, #0]
    46b0:	6892      	ldr	r2, [r2, #8]
    46b2:	4710      	bx	r2
    46b4:	20000054 	.word	0x20000054

000046b8 <mpsl_fem_pa_configuration_clear>:
    46b8:	4801      	ldr	r0, [pc, #4]	; (46c0 <mpsl_fem_pa_configuration_clear+0x8>)
    46ba:	6800      	ldr	r0, [r0, #0]
    46bc:	68c0      	ldr	r0, [r0, #12]
    46be:	4700      	bx	r0
    46c0:	20000054 	.word	0x20000054

000046c4 <mpsl_fem_pa_configuration_set>:
    46c4:	4a01      	ldr	r2, [pc, #4]	; (46cc <mpsl_fem_pa_configuration_set+0x8>)
    46c6:	6812      	ldr	r2, [r2, #0]
    46c8:	6852      	ldr	r2, [r2, #4]
    46ca:	4710      	bx	r2
    46cc:	20000054 	.word	0x20000054

000046d0 <mpsl_fem_pa_is_configured>:
    46d0:	4901      	ldr	r1, [pc, #4]	; (46d8 <mpsl_fem_pa_is_configured+0x8>)
    46d2:	6809      	ldr	r1, [r1, #0]
    46d4:	6a09      	ldr	r1, [r1, #32]
    46d6:	4708      	bx	r1
    46d8:	20000054 	.word	0x20000054

000046dc <mpsl_fem_device_config_254_apply_get>:
    46dc:	4801      	ldr	r0, [pc, #4]	; (46e4 <mpsl_fem_device_config_254_apply_get+0x8>)
    46de:	7800      	ldrb	r0, [r0, #0]
    46e0:	4770      	bx	lr
    46e2:	0000      	.short	0x0000
    46e4:	2000029a 	.word	0x2000029a
    46e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    46ea:	4c17      	ldr	r4, [pc, #92]	; (4748 <mpsl_fem_device_config_254_apply_get+0x6c>)
    46ec:	79a0      	ldrb	r0, [r4, #6]
    46ee:	2802      	cmp	r0, #2
    46f0:	d200      	bcs.n	46f4 <mpsl_fem_device_config_254_apply_get+0x18>
    46f2:	2002      	movs	r0, #2
    46f4:	f88d 0001 	strb.w	r0, [sp, #1]
    46f8:	7960      	ldrb	r0, [r4, #5]
    46fa:	2803      	cmp	r0, #3
    46fc:	d200      	bcs.n	4700 <mpsl_fem_device_config_254_apply_get+0x24>
    46fe:	2003      	movs	r0, #3
    4700:	f88d 0000 	strb.w	r0, [sp]
    4704:	7920      	ldrb	r0, [r4, #4]
    4706:	f8ad 0004 	strh.w	r0, [sp, #4]
    470a:	78e0      	ldrb	r0, [r4, #3]
    470c:	f8ad 0002 	strh.w	r0, [sp, #2]
    4710:	4668      	mov	r0, sp
    4712:	f006 f8fb 	bl	a90c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    4716:	b108      	cbz	r0, 471c <mpsl_fem_device_config_254_apply_get+0x40>
    4718:	21ae      	movs	r1, #174	; 0xae
    471a:	e010      	b.n	473e <mpsl_fem_device_config_254_apply_get+0x62>
    471c:	68a0      	ldr	r0, [r4, #8]
    471e:	9002      	str	r0, [sp, #8]
    4720:	a802      	add	r0, sp, #8
    4722:	f006 f909 	bl	a938 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    4726:	b108      	cbz	r0, 472c <mpsl_fem_device_config_254_apply_get+0x50>
    4728:	21b2      	movs	r1, #178	; 0xb2
    472a:	e008      	b.n	473e <mpsl_fem_device_config_254_apply_get+0x62>
    472c:	4807      	ldr	r0, [pc, #28]	; (474c <mpsl_fem_device_config_254_apply_get+0x70>)
    472e:	6800      	ldr	r0, [r0, #0]
    4730:	9003      	str	r0, [sp, #12]
    4732:	a803      	add	r0, sp, #12
    4734:	f00a fef4 	bl	f520 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    4738:	2800      	cmp	r0, #0
    473a:	d003      	beq.n	4744 <mpsl_fem_device_config_254_apply_get+0x68>
    473c:	21b6      	movs	r1, #182	; 0xb6
    473e:	2003      	movs	r0, #3
    4740:	f000 f8ce 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4744:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    4746:	0000      	.short	0x0000
    4748:	20000064 	.word	0x20000064
    474c:	000049c8 	.word	0x000049c8

00004750 <sdc_build_revision_get>:
    4750:	b510      	push	{r4, lr}
    4752:	b128      	cbz	r0, 4760 <sdc_build_revision_get+0x10>
    4754:	2214      	movs	r2, #20
    4756:	4904      	ldr	r1, [pc, #16]	; (4768 <sdc_build_revision_get+0x18>)
    4758:	f007 fed7 	bl	c50a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    475c:	2000      	movs	r0, #0
    475e:	bd10      	pop	{r4, pc}
    4760:	f06f 0015 	mvn.w	r0, #21
    4764:	bd10      	pop	{r4, pc}
    4766:	0000      	.short	0x0000
    4768:	000049fa 	.word	0x000049fa

0000476c <sdc_cfg_set>:
    476c:	b570      	push	{r4, r5, r6, lr}
    476e:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    4772:	bbb0      	cbnz	r0, 47e2 <sdc_cfg_set+0x76>
    4774:	4c1d      	ldr	r4, [pc, #116]	; (47ec <sdc_cfg_set+0x80>)
    4776:	78a0      	ldrb	r0, [r4, #2]
    4778:	b108      	cbz	r0, 477e <sdc_cfg_set+0x12>
    477a:	11a8      	asrs	r0, r5, #6
    477c:	bd70      	pop	{r4, r5, r6, pc}
    477e:	b321      	cbz	r1, 47ca <sdc_cfg_set+0x5e>
    4780:	f06f 0015 	mvn.w	r0, #21
    4784:	2a00      	cmp	r2, #0
    4786:	d0f9      	beq.n	477c <sdc_cfg_set+0x10>
    4788:	2908      	cmp	r1, #8
    478a:	d22a      	bcs.n	47e2 <sdc_cfg_set+0x76>
    478c:	e8df f001 	tbb	[pc, r1]
    4790:	0a070429 	.word	0x0a070429
    4794:	1e14110e 	.word	0x1e14110e
    4798:	7810      	ldrb	r0, [r2, #0]
    479a:	7320      	strb	r0, [r4, #12]
    479c:	e018      	b.n	47d0 <sdc_cfg_set+0x64>
    479e:	7810      	ldrb	r0, [r2, #0]
    47a0:	7360      	strb	r0, [r4, #13]
    47a2:	e015      	b.n	47d0 <sdc_cfg_set+0x64>
    47a4:	6810      	ldr	r0, [r2, #0]
    47a6:	f8c4 000f 	str.w	r0, [r4, #15]
    47aa:	e011      	b.n	47d0 <sdc_cfg_set+0x64>
    47ac:	6810      	ldr	r0, [r2, #0]
    47ae:	6160      	str	r0, [r4, #20]
    47b0:	e00e      	b.n	47d0 <sdc_cfg_set+0x64>
    47b2:	7810      	ldrb	r0, [r2, #0]
    47b4:	73a0      	strb	r0, [r4, #14]
    47b6:	e00b      	b.n	47d0 <sdc_cfg_set+0x64>
    47b8:	7921      	ldrb	r1, [r4, #4]
    47ba:	b111      	cbz	r1, 47c2 <sdc_cfg_set+0x56>
    47bc:	7811      	ldrb	r1, [r2, #0]
    47be:	2902      	cmp	r1, #2
    47c0:	d3dc      	bcc.n	477c <sdc_cfg_set+0x10>
    47c2:	490a      	ldr	r1, [pc, #40]	; (47ec <sdc_cfg_set+0x80>)
    47c4:	7810      	ldrb	r0, [r2, #0]
    47c6:	310c      	adds	r1, #12
    47c8:	7308      	strb	r0, [r1, #12]
    47ca:	e001      	b.n	47d0 <sdc_cfg_set+0x64>
    47cc:	8810      	ldrh	r0, [r2, #0]
    47ce:	8360      	strh	r0, [r4, #26]
    47d0:	4906      	ldr	r1, [pc, #24]	; (47ec <sdc_cfg_set+0x80>)
    47d2:	2201      	movs	r2, #1
    47d4:	310c      	adds	r1, #12
    47d6:	2000      	movs	r0, #0
    47d8:	f007 ff90 	bl	c6fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    47dc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    47e0:	db01      	blt.n	47e6 <sdc_cfg_set+0x7a>
    47e2:	4628      	mov	r0, r5
    47e4:	bd70      	pop	{r4, r5, r6, pc}
    47e6:	2101      	movs	r1, #1
    47e8:	70e1      	strb	r1, [r4, #3]
    47ea:	bd70      	pop	{r4, r5, r6, pc}
    47ec:	20000058 	.word	0x20000058

000047f0 <sdc_enable>:
    47f0:	b538      	push	{r3, r4, r5, lr}
    47f2:	460d      	mov	r5, r1
    47f4:	0004      	movs	r4, r0
    47f6:	d020      	beq.n	483a <sdc_enable+0x4a>
    47f8:	b1fd      	cbz	r5, 483a <sdc_enable+0x4a>
    47fa:	f000 f933 	bl	4a64 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    47fe:	b1f8      	cbz	r0, 4840 <sdc_enable+0x50>
    4800:	4620      	mov	r0, r4
    4802:	f7ff fe89 	bl	4518 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4806:	4c10      	ldr	r4, [pc, #64]	; (4848 <sdc_enable+0x58>)
    4808:	2200      	movs	r2, #0
    480a:	f104 010c 	add.w	r1, r4, #12
    480e:	7020      	strb	r0, [r4, #0]
    4810:	4628      	mov	r0, r5
    4812:	f007 ff73 	bl	c6fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    4816:	f00b fa72 	bl	fcfe <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    481a:	2100      	movs	r1, #0
    481c:	7820      	ldrb	r0, [r4, #0]
    481e:	f006 fae3 	bl	ade8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4822:	7860      	ldrb	r0, [r4, #1]
    4824:	f88d 0000 	strb.w	r0, [sp]
    4828:	4668      	mov	r0, sp
    482a:	f00a fe6d 	bl	f508 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>
    482e:	f7ff ff5b 	bl	46e8 <mpsl_fem_device_config_254_apply_get+0xc>
    4832:	2001      	movs	r0, #1
    4834:	70a0      	strb	r0, [r4, #2]
    4836:	2000      	movs	r0, #0
    4838:	bd38      	pop	{r3, r4, r5, pc}
    483a:	f06f 0015 	mvn.w	r0, #21
    483e:	bd38      	pop	{r3, r4, r5, pc}
    4840:	f04f 30ff 	mov.w	r0, #4294967295
    4844:	bd38      	pop	{r3, r4, r5, pc}
    4846:	0000      	.short	0x0000
    4848:	20000058 	.word	0x20000058

0000484c <sdc_init>:
    484c:	b570      	push	{r4, r5, r6, lr}
    484e:	0005      	movs	r5, r0
    4850:	d00b      	beq.n	486a <sdc_init+0x1e>
    4852:	f7ff fe07 	bl	4464 <mpsl_is_initialized>
    4856:	f04f 34ff 	mov.w	r4, #4294967295
    485a:	b120      	cbz	r0, 4866 <sdc_init+0x1a>
    485c:	f7ff fcc6 	bl	41ec <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    4860:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    4864:	d904      	bls.n	4870 <sdc_init+0x24>
    4866:	4620      	mov	r0, r4
    4868:	bd70      	pop	{r4, r5, r6, pc}
    486a:	f06f 0015 	mvn.w	r0, #21
    486e:	bd70      	pop	{r4, r5, r6, pc}
    4870:	2200      	movs	r2, #0
    4872:	4b16      	ldr	r3, [pc, #88]	; (48cc <sdc_init+0x80>)
    4874:	4611      	mov	r1, r2
    4876:	bf00      	nop
    4878:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    487c:	4284      	cmp	r4, r0
    487e:	d303      	bcc.n	4888 <sdc_init+0x3c>
    4880:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    4884:	7882      	ldrb	r2, [r0, #2]
    4886:	e003      	b.n	4890 <sdc_init+0x44>
    4888:	1c49      	adds	r1, r1, #1
    488a:	b2c9      	uxtb	r1, r1
    488c:	290c      	cmp	r1, #12
    488e:	d3f3      	bcc.n	4878 <sdc_init+0x2c>
    4890:	4c0f      	ldr	r4, [pc, #60]	; (48d0 <sdc_init+0x84>)
    4892:	4810      	ldr	r0, [pc, #64]	; (48d4 <sdc_init+0x88>)
    4894:	7062      	strb	r2, [r4, #1]
    4896:	60a5      	str	r5, [r4, #8]
    4898:	f000 f9f6 	bl	4c88 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    489c:	2000      	movs	r0, #0
    489e:	70a0      	strb	r0, [r4, #2]
    48a0:	70e0      	strb	r0, [r4, #3]
    48a2:	7120      	strb	r0, [r4, #4]
    48a4:	f3ef 8410 	mrs	r4, PRIMASK
    48a8:	b672      	cpsid	i
    48aa:	480b      	ldr	r0, [pc, #44]	; (48d8 <sdc_init+0x8c>)
    48ac:	f06f 010c 	mvn.w	r1, #12
    48b0:	f000 fd6c 	bl	538c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    48b4:	4809      	ldr	r0, [pc, #36]	; (48dc <sdc_init+0x90>)
    48b6:	f000 fe2d 	bl	5514 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    48ba:	b118      	cbz	r0, 48c4 <sdc_init+0x78>
    48bc:	21c4      	movs	r1, #196	; 0xc4
    48be:	2003      	movs	r0, #3
    48c0:	f000 f80e 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48c4:	b904      	cbnz	r4, 48c8 <sdc_init+0x7c>
    48c6:	b662      	cpsie	i
    48c8:	2000      	movs	r0, #0
    48ca:	bd70      	pop	{r4, r5, r6, pc}
    48cc:	000049ca 	.word	0x000049ca
    48d0:	20000058 	.word	0x20000058
    48d4:	000046e9 	.word	0x000046e9
    48d8:	4000c000 	.word	0x4000c000
    48dc:	00004a91 	.word	0x00004a91

000048e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    48e0:	b50e      	push	{r1, r2, r3, lr}
    48e2:	b672      	cpsid	i
    48e4:	4a15      	ldr	r2, [pc, #84]	; (493c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    48e6:	6895      	ldr	r5, [r2, #8]
    48e8:	b1d5      	cbz	r5, 4920 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    48ea:	2200      	movs	r2, #0
    48ec:	4603      	mov	r3, r0
    48ee:	466e      	mov	r6, sp
    48f0:	240a      	movs	r4, #10
    48f2:	e003      	b.n	48fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    48f4:	fbb0 f0f4 	udiv	r0, r0, r4
    48f8:	1c52      	adds	r2, r2, #1
    48fa:	b2d2      	uxtb	r2, r2
    48fc:	2800      	cmp	r0, #0
    48fe:	d1f9      	bne.n	48f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    4900:	54b0      	strb	r0, [r6, r2]
    4902:	e009      	b.n	4918 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    4904:	fbb3 f0f4 	udiv	r0, r3, r4
    4908:	fb04 3010 	mls	r0, r4, r0, r3
    490c:	fbb3 f3f4 	udiv	r3, r3, r4
    4910:	1e52      	subs	r2, r2, #1
    4912:	b2d2      	uxtb	r2, r2
    4914:	3030      	adds	r0, #48	; 0x30
    4916:	54b0      	strb	r0, [r6, r2]
    4918:	2a00      	cmp	r2, #0
    491a:	d1f3      	bne.n	4904 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    491c:	4630      	mov	r0, r6
    491e:	47a8      	blx	r5
    4920:	f3bf 8f4f 	dsb	sy
    4924:	4806      	ldr	r0, [pc, #24]	; (4940 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    4926:	6801      	ldr	r1, [r0, #0]
    4928:	4a06      	ldr	r2, [pc, #24]	; (4944 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    492a:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    492e:	4311      	orrs	r1, r2
    4930:	6001      	str	r1, [r0, #0]
    4932:	f3bf 8f4f 	dsb	sy
    4936:	bf00      	nop
    4938:	e7fd      	b.n	4936 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    493a:	0000      	.short	0x0000
    493c:	20000058 	.word	0x20000058
    4940:	e000ed0c 	.word	0xe000ed0c
    4944:	05fa0004 	.word	0x05fa0004

00004948 <sdc_support_adv>:
    4948:	4806      	ldr	r0, [pc, #24]	; (4964 <sdc_support_adv+0x1c>)
    494a:	b510      	push	{r4, lr}
    494c:	78c1      	ldrb	r1, [r0, #3]
    494e:	7880      	ldrb	r0, [r0, #2]
    4950:	4301      	orrs	r1, r0
    4952:	d002      	beq.n	495a <sdc_support_adv+0x12>
    4954:	f04f 30ff 	mov.w	r0, #4294967295
    4958:	bd10      	pop	{r4, pc}
    495a:	f006 fa65 	bl	ae28 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    495e:	2000      	movs	r0, #0
    4960:	bd10      	pop	{r4, pc}
    4962:	0000      	.short	0x0000
    4964:	20000058 	.word	0x20000058

00004968 <sdc_support_dle>:
    4968:	4806      	ldr	r0, [pc, #24]	; (4984 <sdc_support_dle+0x1c>)
    496a:	b510      	push	{r4, lr}
    496c:	78c1      	ldrb	r1, [r0, #3]
    496e:	7880      	ldrb	r0, [r0, #2]
    4970:	4301      	orrs	r1, r0
    4972:	d002      	beq.n	497a <sdc_support_dle+0x12>
    4974:	f04f 30ff 	mov.w	r0, #4294967295
    4978:	bd10      	pop	{r4, pc}
    497a:	f005 fff5 	bl	a968 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    497e:	2000      	movs	r0, #0
    4980:	bd10      	pop	{r4, pc}
    4982:	0000      	.short	0x0000
    4984:	20000058 	.word	0x20000058

00004988 <sdc_support_le_2m_phy>:
    4988:	4806      	ldr	r0, [pc, #24]	; (49a4 <sdc_support_le_2m_phy+0x1c>)
    498a:	b510      	push	{r4, lr}
    498c:	78c1      	ldrb	r1, [r0, #3]
    498e:	7880      	ldrb	r0, [r0, #2]
    4990:	4301      	orrs	r1, r0
    4992:	d002      	beq.n	499a <sdc_support_le_2m_phy+0x12>
    4994:	f04f 30ff 	mov.w	r0, #4294967295
    4998:	bd10      	pop	{r4, pc}
    499a:	f00a ff26 	bl	f7ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    499e:	2000      	movs	r0, #0
    49a0:	bd10      	pop	{r4, pc}
    49a2:	0000      	.short	0x0000
    49a4:	20000058 	.word	0x20000058

000049a8 <sdc_support_slave>:
    49a8:	4806      	ldr	r0, [pc, #24]	; (49c4 <sdc_support_slave+0x1c>)
    49aa:	b510      	push	{r4, lr}
    49ac:	78c1      	ldrb	r1, [r0, #3]
    49ae:	7880      	ldrb	r0, [r0, #2]
    49b0:	4301      	orrs	r1, r0
    49b2:	d002      	beq.n	49ba <sdc_support_slave+0x12>
    49b4:	f04f 30ff 	mov.w	r0, #4294967295
    49b8:	bd10      	pop	{r4, pc}
    49ba:	f006 fa47 	bl	ae4c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    49be:	2000      	movs	r0, #0
    49c0:	bd10      	pop	{r4, pc}
    49c2:	0000      	.short	0x0000
    49c4:	20000058 	.word	0x20000058
    49c8:	00010001 	.word	0x00010001
    49cc:	0002000b 	.word	0x0002000b
    49d0:	0005000a 	.word	0x0005000a
    49d4:	000a0009 	.word	0x000a0009
    49d8:	00140008 	.word	0x00140008
    49dc:	001e0007 	.word	0x001e0007
    49e0:	00320006 	.word	0x00320006
    49e4:	004b0005 	.word	0x004b0005
    49e8:	00640004 	.word	0x00640004
    49ec:	00960003 	.word	0x00960003
    49f0:	00fa0002 	.word	0x00fa0002
    49f4:	01f40001 	.word	0x01f40001
    49f8:	473f0000 	.word	0x473f0000
    49fc:	95818e70 	.word	0x95818e70
    4a00:	d39d864e 	.word	0xd39d864e
    4a04:	f68895a2 	.word	0xf68895a2
    4a08:	537f0a30 	.word	0x537f0a30
    4a0c:	0000fd49 	.word	0x0000fd49

00004a10 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    4a10:	4a05      	ldr	r2, [pc, #20]	; (4a28 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    4a12:	b510      	push	{r4, lr}
    4a14:	6852      	ldr	r2, [r2, #4]
    4a16:	b112      	cbz	r2, 4a1e <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    4a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4a1c:	4710      	bx	r2
    4a1e:	2183      	movs	r1, #131	; 0x83
    4a20:	2004      	movs	r0, #4
    4a22:	f7ff ff5d 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a26:	0000      	.short	0x0000
    4a28:	20000ec8 	.word	0x20000ec8

00004a2c <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    4a2c:	4a05      	ldr	r2, [pc, #20]	; (4a44 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    4a2e:	b510      	push	{r4, lr}
    4a30:	6812      	ldr	r2, [r2, #0]
    4a32:	b112      	cbz	r2, 4a3a <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    4a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4a38:	4710      	bx	r2
    4a3a:	217d      	movs	r1, #125	; 0x7d
    4a3c:	2004      	movs	r0, #4
    4a3e:	f7ff ff4f 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a42:	0000      	.short	0x0000
    4a44:	20000ec8 	.word	0x20000ec8

00004a48 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    4a48:	4a05      	ldr	r2, [pc, #20]	; (4a60 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    4a4a:	b510      	push	{r4, lr}
    4a4c:	6892      	ldr	r2, [r2, #8]
    4a4e:	b112      	cbz	r2, 4a56 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    4a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4a54:	4710      	bx	r2
    4a56:	2189      	movs	r1, #137	; 0x89
    4a58:	2004      	movs	r0, #4
    4a5a:	f7ff ff41 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a5e:	0000      	.short	0x0000
    4a60:	20000ec8 	.word	0x20000ec8

00004a64 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    4a64:	4805      	ldr	r0, [pc, #20]	; (4a7c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    4a66:	6801      	ldr	r1, [r0, #0]
    4a68:	b129      	cbz	r1, 4a76 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4a6a:	6841      	ldr	r1, [r0, #4]
    4a6c:	b119      	cbz	r1, 4a76 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4a6e:	6880      	ldr	r0, [r0, #8]
    4a70:	b108      	cbz	r0, 4a76 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4a72:	2001      	movs	r0, #1
    4a74:	4770      	bx	lr
    4a76:	2000      	movs	r0, #0
    4a78:	4770      	bx	lr
    4a7a:	0000      	.short	0x0000
    4a7c:	20000ec8 	.word	0x20000ec8

00004a80 <sdc_rand_source_register>:
    4a80:	4902      	ldr	r1, [pc, #8]	; (4a8c <sdc_rand_source_register+0xc>)
    4a82:	c80d      	ldmia	r0, {r0, r2, r3}
    4a84:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4a88:	2000      	movs	r0, #0
    4a8a:	4770      	bx	lr
    4a8c:	20000ec8 	.word	0x20000ec8

00004a90 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a92:	4c12      	ldr	r4, [pc, #72]	; (4adc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4a94:	2600      	movs	r6, #0
    4a96:	6825      	ldr	r5, [r4, #0]
    4a98:	e011      	b.n	4abe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4a9a:	9800      	ldr	r0, [sp, #0]
    4a9c:	2802      	cmp	r0, #2
    4a9e:	d002      	beq.n	4aa6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4aa0:	2803      	cmp	r0, #3
    4aa2:	d10c      	bne.n	4abe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4aa4:	e006      	b.n	4ab4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4aa6:	6820      	ldr	r0, [r4, #0]
    4aa8:	b110      	cbz	r0, 4ab0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    4aaa:	2000      	movs	r0, #0
    4aac:	6026      	str	r6, [r4, #0]
    4aae:	e005      	b.n	4abc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4ab0:	2128      	movs	r1, #40	; 0x28
    4ab2:	e00c      	b.n	4ace <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4ab4:	6820      	ldr	r0, [r4, #0]
    4ab6:	b168      	cbz	r0, 4ad4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4ab8:	2001      	movs	r0, #1
    4aba:	6026      	str	r6, [r4, #0]
    4abc:	47a8      	blx	r5
    4abe:	4668      	mov	r0, sp
    4ac0:	f000 fcfa 	bl	54b8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4ac4:	2800      	cmp	r0, #0
    4ac6:	d0e8      	beq.n	4a9a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4ac8:	2805      	cmp	r0, #5
    4aca:	d005      	beq.n	4ad8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    4acc:	2135      	movs	r1, #53	; 0x35
    4ace:	2004      	movs	r0, #4
    4ad0:	f7ff ff06 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ad4:	212d      	movs	r1, #45	; 0x2d
    4ad6:	e7fa      	b.n	4ace <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ada:	0000      	.short	0x0000
    4adc:	20000074 	.word	0x20000074
    4ae0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    4ae2:	4c21      	ldr	r4, [pc, #132]	; (4b68 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    4ae4:	4605      	mov	r5, r0
    4ae6:	7820      	ldrb	r0, [r4, #0]
    4ae8:	b140      	cbz	r0, 4afc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    4aea:	78a2      	ldrb	r2, [r4, #2]
    4aec:	1c61      	adds	r1, r4, #1
    4aee:	4628      	mov	r0, r5
    4af0:	1c92      	adds	r2, r2, #2
    4af2:	f007 fd0a 	bl	c50a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4af6:	2000      	movs	r0, #0
    4af8:	7020      	strb	r0, [r4, #0]
    4afa:	e025      	b.n	4b48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb8>
    4afc:	481a      	ldr	r0, [pc, #104]	; (4b68 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    4afe:	3844      	subs	r0, #68	; 0x44
    4b00:	f005 ff68 	bl	a9d4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    4b04:	2800      	cmp	r0, #0
    4b06:	d020      	beq.n	4b4a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    4b08:	4c17      	ldr	r4, [pc, #92]	; (4b68 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    4b0a:	3c44      	subs	r4, #68	; 0x44
    4b0c:	7820      	ldrb	r0, [r4, #0]
    4b0e:	2811      	cmp	r0, #17
    4b10:	d104      	bne.n	4b1c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x8c>
    4b12:	210a      	movs	r1, #10
    4b14:	203e      	movs	r0, #62	; 0x3e
    4b16:	f007 fe71 	bl	c7fc <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4b1a:	b118      	cbz	r0, 4b24 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    4b1c:	7820      	ldrb	r0, [r4, #0]
    4b1e:	2808      	cmp	r0, #8
    4b20:	d006      	beq.n	4b30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa0>
    4b22:	e00a      	b.n	4b3a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xaa>
    4b24:	4910      	ldr	r1, [pc, #64]	; (4b68 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    4b26:	4628      	mov	r0, r5
    4b28:	3944      	subs	r1, #68	; 0x44
    4b2a:	f008 f870 	bl	cc0e <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    4b2e:	e00b      	b.n	4b48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb8>
    4b30:	2105      	movs	r1, #5
    4b32:	203e      	movs	r0, #62	; 0x3e
    4b34:	f007 fe62 	bl	c7fc <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4b38:	b140      	cbz	r0, 4b4c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xbc>
    4b3a:	490b      	ldr	r1, [pc, #44]	; (4b68 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    4b3c:	4628      	mov	r0, r5
    4b3e:	3944      	subs	r1, #68	; 0x44
    4b40:	f007 feba 	bl	c8b8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    4b44:	2800      	cmp	r0, #0
    4b46:	d000      	beq.n	4b4a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    4b48:	2001      	movs	r0, #1
    4b4a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4b4c:	88a0      	ldrh	r0, [r4, #4]
    4b4e:	f8ad 0000 	strh.w	r0, [sp]
    4b52:	a901      	add	r1, sp, #4
    4b54:	4668      	mov	r0, sp
    4b56:	f008 f974 	bl	ce42 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    4b5a:	2800      	cmp	r0, #0
    4b5c:	d0f5      	beq.n	4b4a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    4b5e:	2198      	movs	r1, #152	; 0x98
    4b60:	2008      	movs	r0, #8
    4b62:	f7ff febd 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b66:	0000      	.short	0x0000
    4b68:	20000fa8 	.word	0x20000fa8
    4b6c:	b570      	push	{r4, r5, r6, lr}
    4b6e:	780a      	ldrb	r2, [r1, #0]
    4b70:	7082      	strb	r2, [r0, #2]
    4b72:	b33a      	cbz	r2, 4bc4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x134>
    4b74:	2a01      	cmp	r2, #1
    4b76:	d825      	bhi.n	4bc4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x134>
    4b78:	2313      	movs	r3, #19
    4b7a:	7003      	strb	r3, [r0, #0]
    4b7c:	2300      	movs	r3, #0
    4b7e:	e00a      	b.n	4b96 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x106>
    4b80:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4b84:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4b88:	78a6      	ldrb	r6, [r4, #2]
    4b8a:	70ee      	strb	r6, [r5, #3]
    4b8c:	8864      	ldrh	r4, [r4, #2]
    4b8e:	0a24      	lsrs	r4, r4, #8
    4b90:	1c5b      	adds	r3, r3, #1
    4b92:	712c      	strb	r4, [r5, #4]
    4b94:	b2db      	uxtb	r3, r3
    4b96:	4293      	cmp	r3, r2
    4b98:	d3f2      	bcc.n	4b80 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf0>
    4b9a:	2300      	movs	r3, #0
    4b9c:	e00b      	b.n	4bb6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x126>
    4b9e:	bf00      	nop
    4ba0:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4ba4:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4ba8:	792e      	ldrb	r6, [r5, #4]
    4baa:	7166      	strb	r6, [r4, #5]
    4bac:	88ad      	ldrh	r5, [r5, #4]
    4bae:	0a2d      	lsrs	r5, r5, #8
    4bb0:	1c5b      	adds	r3, r3, #1
    4bb2:	71a5      	strb	r5, [r4, #6]
    4bb4:	b2db      	uxtb	r3, r3
    4bb6:	4293      	cmp	r3, r2
    4bb8:	d3f2      	bcc.n	4ba0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x110>
    4bba:	2101      	movs	r1, #1
    4bbc:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4bc0:	b2c0      	uxtb	r0, r0
    4bc2:	bd70      	pop	{r4, r5, r6, pc}
    4bc4:	2000      	movs	r0, #0
    4bc6:	bd70      	pop	{r4, r5, r6, pc}

00004bc8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4bc8:	2101      	movs	r1, #1
    4bca:	4a0c      	ldr	r2, [pc, #48]	; (4bfc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    4bcc:	2840      	cmp	r0, #64	; 0x40
    4bce:	d20c      	bcs.n	4bea <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    4bd0:	2820      	cmp	r0, #32
    4bd2:	d803      	bhi.n	4bdc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    4bd4:	1e40      	subs	r0, r0, #1
    4bd6:	4081      	lsls	r1, r0
    4bd8:	6810      	ldr	r0, [r2, #0]
    4bda:	e002      	b.n	4be2 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4bdc:	3821      	subs	r0, #33	; 0x21
    4bde:	4081      	lsls	r1, r0
    4be0:	6850      	ldr	r0, [r2, #4]
    4be2:	4201      	tst	r1, r0
    4be4:	d107      	bne.n	4bf6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4be6:	2000      	movs	r0, #0
    4be8:	4770      	bx	lr
    4bea:	28ff      	cmp	r0, #255	; 0xff
    4bec:	d003      	beq.n	4bf6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4bee:	3840      	subs	r0, #64	; 0x40
    4bf0:	4081      	lsls	r1, r0
    4bf2:	6890      	ldr	r0, [r2, #8]
    4bf4:	e7f5      	b.n	4be2 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4bf6:	2001      	movs	r0, #1
    4bf8:	4770      	bx	lr
    4bfa:	0000      	.short	0x0000
    4bfc:	20000078 	.word	0x20000078

00004c00 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4c00:	2101      	movs	r1, #1
    4c02:	1e40      	subs	r0, r0, #1
    4c04:	4081      	lsls	r1, r0
    4c06:	4804      	ldr	r0, [pc, #16]	; (4c18 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    4c08:	68c0      	ldr	r0, [r0, #12]
    4c0a:	4201      	tst	r1, r0
    4c0c:	d001      	beq.n	4c12 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    4c0e:	2001      	movs	r0, #1
    4c10:	4770      	bx	lr
    4c12:	2000      	movs	r0, #0
    4c14:	4770      	bx	lr
    4c16:	0000      	.short	0x0000
    4c18:	20000078 	.word	0x20000078

00004c1c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4c1c:	4901      	ldr	r1, [pc, #4]	; (4c24 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    4c1e:	6800      	ldr	r0, [r0, #0]
    4c20:	60c8      	str	r0, [r1, #12]
    4c22:	4770      	bx	lr
    4c24:	20000078 	.word	0x20000078

00004c28 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    4c28:	4904      	ldr	r1, [pc, #16]	; (4c3c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    4c2a:	6802      	ldr	r2, [r0, #0]
    4c2c:	6840      	ldr	r0, [r0, #4]
    4c2e:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    4c32:	600a      	str	r2, [r1, #0]
    4c34:	4a02      	ldr	r2, [pc, #8]	; (4c40 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    4c36:	4310      	orrs	r0, r2
    4c38:	6048      	str	r0, [r1, #4]
    4c3a:	4770      	bx	lr
    4c3c:	20000078 	.word	0x20000078
    4c40:	024007f8 	.word	0x024007f8

00004c44 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    4c44:	4901      	ldr	r1, [pc, #4]	; (4c4c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    4c46:	6800      	ldr	r0, [r0, #0]
    4c48:	6088      	str	r0, [r1, #8]
    4c4a:	4770      	bx	lr
    4c4c:	20000078 	.word	0x20000078

00004c50 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4c50:	4805      	ldr	r0, [pc, #20]	; (4c68 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    4c52:	f04f 31ff 	mov.w	r1, #4294967295
    4c56:	6001      	str	r1, [r0, #0]
    4c58:	0cc9      	lsrs	r1, r1, #19
    4c5a:	6041      	str	r1, [r0, #4]
    4c5c:	2100      	movs	r1, #0
    4c5e:	6081      	str	r1, [r0, #8]
    4c60:	211f      	movs	r1, #31
    4c62:	60c1      	str	r1, [r0, #12]
    4c64:	4770      	bx	lr
    4c66:	0000      	.short	0x0000
    4c68:	20000078 	.word	0x20000078

00004c6c <sdc_hci_cmd_cb_reset>:
    4c6c:	b510      	push	{r4, lr}
    4c6e:	f7ff ffef 	bl	4c50 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    4c72:	f00a fd2f 	bl	f6d4 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    4c76:	4604      	mov	r4, r0
    4c78:	4802      	ldr	r0, [pc, #8]	; (4c84 <sdc_hci_cmd_cb_reset+0x18>)
    4c7a:	6800      	ldr	r0, [r0, #0]
    4c7c:	b100      	cbz	r0, 4c80 <sdc_hci_cmd_cb_reset+0x14>
    4c7e:	4780      	blx	r0
    4c80:	4620      	mov	r0, r4
    4c82:	bd10      	pop	{r4, pc}
    4c84:	20000088 	.word	0x20000088

00004c88 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4c88:	4901      	ldr	r1, [pc, #4]	; (4c90 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    4c8a:	6008      	str	r0, [r1, #0]
    4c8c:	4770      	bx	lr
    4c8e:	0000      	.short	0x0000
    4c90:	20000088 	.word	0x20000088

00004c94 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4c94:	2102      	movs	r1, #2
    4c96:	8001      	strh	r1, [r0, #0]
    4c98:	8041      	strh	r1, [r0, #2]
    4c9a:	2100      	movs	r1, #0
    4c9c:	7101      	strb	r1, [r0, #4]
    4c9e:	213f      	movs	r1, #63	; 0x3f
    4ca0:	7141      	strb	r1, [r0, #5]
    4ca2:	f247 0147 	movw	r1, #28743	; 0x7047
    4ca6:	80c1      	strh	r1, [r0, #6]
    4ca8:	4901      	ldr	r1, [pc, #4]	; (4cb0 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    4caa:	6081      	str	r1, [r0, #8]
    4cac:	2000      	movs	r0, #0
    4cae:	4770      	bx	lr
    4cb0:	4e95818e 	.word	0x4e95818e

00004cb4 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    4cb4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    4cb6:	4604      	mov	r4, r0
    4cb8:	4669      	mov	r1, sp
    4cba:	f008 fc28 	bl	d50e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    4cbe:	b170      	cbz	r0, 4cde <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4cc0:	f240 2112 	movw	r1, #530	; 0x212
    4cc4:	e008      	b.n	4cd8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    4cc6:	bf00      	nop
    4cc8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    4ccc:	4621      	mov	r1, r4
    4cce:	f000 f8a9 	bl	4e24 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    4cd2:	b120      	cbz	r0, 4cde <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4cd4:	f240 2117 	movw	r1, #535	; 0x217
    4cd8:	2017      	movs	r0, #23
    4cda:	f7ff fe01 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cde:	4668      	mov	r0, sp
    4ce0:	f000 f850 	bl	4d84 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4ce4:	2800      	cmp	r0, #0
    4ce6:	d0ef      	beq.n	4cc8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    4ce8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00004cec <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4cec:	b510      	push	{r4, lr}
    4cee:	2802      	cmp	r0, #2
    4cf0:	d304      	bcc.n	4cfc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    4cf2:	f240 116b 	movw	r1, #363	; 0x16b
    4cf6:	2017      	movs	r0, #23
    4cf8:	f7ff fdf2 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cfc:	4901      	ldr	r1, [pc, #4]	; (4d04 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    4cfe:	5c08      	ldrb	r0, [r1, r0]
    4d00:	bd10      	pop	{r4, pc}
    4d02:	0000      	.short	0x0000
    4d04:	20000ed4 	.word	0x20000ed4

00004d08 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    4d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d0a:	4605      	mov	r5, r0
    4d0c:	9000      	str	r0, [sp, #0]
    4d0e:	4291      	cmp	r1, r2
    4d10:	d201      	bcs.n	4d16 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
    4d12:	4614      	mov	r4, r2
    4d14:	e000      	b.n	4d18 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x10>
    4d16:	460c      	mov	r4, r1
    4d18:	b155      	cbz	r5, 4d30 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    4d1a:	2700      	movs	r7, #0
    4d1c:	1ce8      	adds	r0, r5, #3
    4d1e:	f020 0003 	bic.w	r0, r0, #3
    4d22:	42a8      	cmp	r0, r5
    4d24:	d006      	beq.n	4d34 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
    4d26:	f240 113f 	movw	r1, #319	; 0x13f
    4d2a:	2017      	movs	r0, #23
    4d2c:	f7ff fdd8 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d30:	2701      	movs	r7, #1
    4d32:	e7f3      	b.n	4d1c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x14>
    4d34:	4e12      	ldr	r6, [pc, #72]	; (4d80 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
    4d36:	4668      	mov	r0, sp
    4d38:	7031      	strb	r1, [r6, #0]
    4d3a:	7072      	strb	r2, [r6, #1]
    4d3c:	4639      	mov	r1, r7
    4d3e:	f000 f8ed 	bl	4f1c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    4d42:	2000      	movs	r0, #0
    4d44:	4603      	mov	r3, r0
    4d46:	9900      	ldr	r1, [sp, #0]
    4d48:	1cc9      	adds	r1, r1, #3
    4d4a:	f021 0103 	bic.w	r1, r1, #3
    4d4e:	9100      	str	r1, [sp, #0]
    4d50:	b967      	cbnz	r7, 4d6c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    4d52:	eb06 0280 	add.w	r2, r6, r0, lsl #2
    4d56:	60d1      	str	r1, [r2, #12]
    4d58:	2100      	movs	r1, #0
    4d5a:	e005      	b.n	4d68 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
    4d5c:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    4d60:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    4d64:	1c49      	adds	r1, r1, #1
    4d66:	b2c9      	uxtb	r1, r1
    4d68:	42a1      	cmp	r1, r4
    4d6a:	d3f7      	bcc.n	4d5c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x54>
    4d6c:	9900      	ldr	r1, [sp, #0]
    4d6e:	1c40      	adds	r0, r0, #1
    4d70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    4d74:	b2c0      	uxtb	r0, r0
    4d76:	9100      	str	r1, [sp, #0]
    4d78:	2802      	cmp	r0, #2
    4d7a:	d3e4      	bcc.n	4d46 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3e>
    4d7c:	1b48      	subs	r0, r1, r5
    4d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d80:	20000ed4 	.word	0x20000ed4

00004d84 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    4d84:	b570      	push	{r4, r5, r6, lr}
    4d86:	4604      	mov	r4, r0
    4d88:	f008 fc2b 	bl	d5e2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    4d8c:	b108      	cbz	r0, 4d92 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    4d8e:	2010      	movs	r0, #16
    4d90:	bd70      	pop	{r4, r5, r6, pc}
    4d92:	7825      	ldrb	r5, [r4, #0]
    4d94:	f000 f8fe 	bl	4f94 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    4d98:	4602      	mov	r2, r0
    4d9a:	480c      	ldr	r0, [pc, #48]	; (4dcc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    4d9c:	8861      	ldrh	r1, [r4, #2]
    4d9e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4da2:	e00e      	b.n	4dc2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    4da4:	68c3      	ldr	r3, [r0, #12]
    4da6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    4daa:	b143      	cbz	r3, 4dbe <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    4dac:	1c4a      	adds	r2, r1, #1
    4dae:	8062      	strh	r2, [r4, #2]
    4db0:	80a1      	strh	r1, [r4, #4]
    4db2:	68c0      	ldr	r0, [r0, #12]
    4db4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4db8:	60a0      	str	r0, [r4, #8]
    4dba:	2000      	movs	r0, #0
    4dbc:	bd70      	pop	{r4, r5, r6, pc}
    4dbe:	1c49      	adds	r1, r1, #1
    4dc0:	b289      	uxth	r1, r1
    4dc2:	4291      	cmp	r1, r2
    4dc4:	d3ee      	bcc.n	4da4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    4dc6:	8061      	strh	r1, [r4, #2]
    4dc8:	2005      	movs	r0, #5
    4dca:	bd70      	pop	{r4, r5, r6, pc}
    4dcc:	20000ed4 	.word	0x20000ed4

00004dd0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4dd4:	b121      	cbz	r1, 4de0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    4dd6:	2901      	cmp	r1, #1
    4dd8:	d002      	beq.n	4de0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    4dda:	2000      	movs	r0, #0
    4ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4de0:	4c0f      	ldr	r4, [pc, #60]	; (4e20 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    4de2:	2700      	movs	r7, #0
    4de4:	463b      	mov	r3, r7
    4de6:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4dea:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    4dee:	f814 c001 	ldrb.w	ip, [r4, r1]
    4df2:	e00a      	b.n	4e0a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    4df4:	19dc      	adds	r4, r3, r7
    4df6:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    4dfa:	b2a4      	uxth	r4, r4
    4dfc:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    4e00:	f1be 0f00 	cmp.w	lr, #0
    4e04:	d004      	beq.n	4e10 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    4e06:	1c5b      	adds	r3, r3, #1
    4e08:	b29b      	uxth	r3, r3
    4e0a:	459c      	cmp	ip, r3
    4e0c:	d8f2      	bhi.n	4df4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    4e0e:	4634      	mov	r4, r6
    4e10:	8004      	strh	r4, [r0, #0]
    4e12:	4620      	mov	r0, r4
    4e14:	42b4      	cmp	r4, r6
    4e16:	d0e0      	beq.n	4dda <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    4e18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4e1c:	f000 b834 	b.w	4e88 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    4e20:	20000ed4 	.word	0x20000ed4

00004e24 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e28:	4606      	mov	r6, r0
    4e2a:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4e2e:	460c      	mov	r4, r1
    4e30:	f243 0702 	movw	r7, #12290	; 0x3002
    4e34:	38ff      	subs	r0, #255	; 0xff
    4e36:	d020      	beq.n	4e7a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4e38:	2c02      	cmp	r4, #2
    4e3a:	d302      	bcc.n	4e42 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4e3c:	2007      	movs	r0, #7
    4e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4e42:	4630      	mov	r0, r6
    4e44:	f000 f85a 	bl	4efc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    4e48:	0005      	movs	r5, r0
    4e4a:	d016      	beq.n	4e7a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4e4c:	480c      	ldr	r0, [pc, #48]	; (4e80 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    4e4e:	4629      	mov	r1, r5
    4e50:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4e54:	4630      	mov	r0, r6
    4e56:	4790      	blx	r2
    4e58:	480a      	ldr	r0, [pc, #40]	; (4e84 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4e5a:	2100      	movs	r1, #0
    4e5c:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    4e60:	68f8      	ldr	r0, [r7, #12]
    4e62:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    4e66:	4620      	mov	r0, r4
    4e68:	f000 f88a 	bl	4f80 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4e6c:	4602      	mov	r2, r0
    4e6e:	4629      	mov	r1, r5
    4e70:	6878      	ldr	r0, [r7, #4]
    4e72:	f008 fb19 	bl	d4a8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4e76:	2000      	movs	r0, #0
    4e78:	e7e1      	b.n	4e3e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4e7a:	4638      	mov	r0, r7
    4e7c:	e7df      	b.n	4e3e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4e7e:	0000      	.short	0x0000
    4e80:	00004fb4 	.word	0x00004fb4
    4e84:	20000ed4 	.word	0x20000ed4
    4e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e8c:	4690      	mov	r8, r2
    4e8e:	460d      	mov	r5, r1
    4e90:	4607      	mov	r7, r0
    4e92:	f008 fb4d 	bl	d530 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    4e96:	b148      	cbz	r0, 4eac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    4e98:	4816      	ldr	r0, [pc, #88]	; (4ef4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    4e9a:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4e9e:	68f0      	ldr	r0, [r6, #12]
    4ea0:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    4ea4:	b128      	cbz	r0, 4eb2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    4ea6:	f240 1109 	movw	r1, #265	; 0x109
    4eaa:	e015      	b.n	4ed8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4eac:	f44f 7184 	mov.w	r1, #264	; 0x108
    4eb0:	e012      	b.n	4ed8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4eb2:	6870      	ldr	r0, [r6, #4]
    4eb4:	2800      	cmp	r0, #0
    4eb6:	d01a      	beq.n	4eee <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    4eb8:	4628      	mov	r0, r5
    4eba:	f000 f861 	bl	4f80 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4ebe:	4601      	mov	r1, r0
    4ec0:	6870      	ldr	r0, [r6, #4]
    4ec2:	f008 faa3 	bl	d40c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4ec6:	0004      	movs	r4, r0
    4ec8:	d010      	beq.n	4eec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    4eca:	68f0      	ldr	r0, [r6, #12]
    4ecc:	2d02      	cmp	r5, #2
    4ece:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    4ed2:	d304      	bcc.n	4ede <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    4ed4:	f44f 718a 	mov.w	r1, #276	; 0x114
    4ed8:	2017      	movs	r0, #23
    4eda:	f7ff fd01 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ede:	4806      	ldr	r0, [pc, #24]	; (4ef8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    4ee0:	4642      	mov	r2, r8
    4ee2:	4621      	mov	r1, r4
    4ee4:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    4ee8:	4638      	mov	r0, r7
    4eea:	4798      	blx	r3
    4eec:	4620      	mov	r0, r4
    4eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ef2:	0000      	.short	0x0000
    4ef4:	20000ed4 	.word	0x20000ed4
    4ef8:	00004fac 	.word	0x00004fac
    4efc:	b570      	push	{r4, r5, r6, lr}
    4efe:	460c      	mov	r4, r1
    4f00:	4605      	mov	r5, r0
    4f02:	f008 fb15 	bl	d530 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    4f06:	2800      	cmp	r0, #0
    4f08:	d005      	beq.n	4f16 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    4f0a:	4803      	ldr	r0, [pc, #12]	; (4f18 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    4f0c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4f10:	68c0      	ldr	r0, [r0, #12]
    4f12:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    4f16:	bd70      	pop	{r4, r5, r6, pc}
    4f18:	20000ed4 	.word	0x20000ed4
    4f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4f20:	4e16      	ldr	r6, [pc, #88]	; (4f7c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    4f22:	4688      	mov	r8, r1
    4f24:	4605      	mov	r5, r0
    4f26:	2400      	movs	r4, #0
    4f28:	6828      	ldr	r0, [r5, #0]
    4f2a:	1cc0      	adds	r0, r0, #3
    4f2c:	f020 0003 	bic.w	r0, r0, #3
    4f30:	6028      	str	r0, [r5, #0]
    4f32:	4620      	mov	r0, r4
    4f34:	f000 f824 	bl	4f80 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4f38:	5d31      	ldrb	r1, [r6, r4]
    4f3a:	4348      	muls	r0, r1
    4f3c:	f1b8 0f00 	cmp.w	r8, #0
    4f40:	d001      	beq.n	4f46 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    4f42:	2200      	movs	r2, #0
    4f44:	e000      	b.n	4f48 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    4f46:	682a      	ldr	r2, [r5, #0]
    4f48:	4601      	mov	r1, r0
    4f4a:	9200      	str	r2, [sp, #0]
    4f4c:	b132      	cbz	r2, 4f5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4f4e:	2700      	movs	r7, #0
    4f50:	ea4f 000d 	mov.w	r0, sp
    4f54:	f008 fa87 	bl	d466 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4f58:	b11f      	cbz	r7, 4f62 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    4f5a:	e006      	b.n	4f6a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    4f5c:	2701      	movs	r7, #1
    4f5e:	2000      	movs	r0, #0
    4f60:	e7f8      	b.n	4f54 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    4f62:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    4f66:	9a00      	ldr	r2, [sp, #0]
    4f68:	604a      	str	r2, [r1, #4]
    4f6a:	6829      	ldr	r1, [r5, #0]
    4f6c:	1c64      	adds	r4, r4, #1
    4f6e:	4408      	add	r0, r1
    4f70:	b2e4      	uxtb	r4, r4
    4f72:	6028      	str	r0, [r5, #0]
    4f74:	2c02      	cmp	r4, #2
    4f76:	d3d7      	bcc.n	4f28 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    4f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4f7c:	20000ed4 	.word	0x20000ed4
    4f80:	4903      	ldr	r1, [pc, #12]	; (4f90 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    4f82:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4f86:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4f8a:	1cc0      	adds	r0, r0, #3
    4f8c:	4008      	ands	r0, r1
    4f8e:	4770      	bx	lr
    4f90:	00004fa8 	.word	0x00004fa8
    4f94:	4803      	ldr	r0, [pc, #12]	; (4fa4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    4f96:	7801      	ldrb	r1, [r0, #0]
    4f98:	7840      	ldrb	r0, [r0, #1]
    4f9a:	4281      	cmp	r1, r0
    4f9c:	d300      	bcc.n	4fa0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    4f9e:	4608      	mov	r0, r1
    4fa0:	4770      	bx	lr
    4fa2:	0000      	.short	0x0000
    4fa4:	20000ed4 	.word	0x20000ed4
    4fa8:	00e80210 	.word	0x00e80210
    4fac:	0000d545 	.word	0x0000d545
    4fb0:	0000d545 	.word	0x0000d545
    4fb4:	0000ed21 	.word	0x0000ed21
    4fb8:	0000e2c3 	.word	0x0000e2c3

00004fbc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4fbc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4fc0:	4c26      	ldr	r4, [pc, #152]	; (505c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    4fc2:	4680      	mov	r8, r0
    4fc4:	b081      	sub	sp, #4
    4fc6:	6820      	ldr	r0, [r4, #0]
    4fc8:	469a      	mov	sl, r3
    4fca:	4693      	mov	fp, r2
    4fcc:	b158      	cbz	r0, 4fe6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    4fce:	7a02      	ldrb	r2, [r0, #8]
    4fd0:	4542      	cmp	r2, r8
    4fd2:	d903      	bls.n	4fdc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    4fd4:	6841      	ldr	r1, [r0, #4]
    4fd6:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    4fda:	b140      	cbz	r0, 4fee <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4fdc:	f243 0002 	movw	r0, #12290	; 0x3002
    4fe0:	b005      	add	sp, #20
    4fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4fe6:	21a5      	movs	r1, #165	; 0xa5
    4fe8:	2018      	movs	r0, #24
    4fea:	f7ff fc79 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4fee:	4619      	mov	r1, r3
    4ff0:	9802      	ldr	r0, [sp, #8]
    4ff2:	f008 fabf 	bl	d574 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    4ff6:	b286      	uxth	r6, r0
    4ff8:	4658      	mov	r0, fp
    4ffa:	990e      	ldr	r1, [sp, #56]	; 0x38
    4ffc:	f008 fab1 	bl	d562 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    5000:	b285      	uxth	r5, r0
    5002:	1970      	adds	r0, r6, r5
    5004:	1d00      	adds	r0, r0, #4
    5006:	b287      	uxth	r7, r0
    5008:	6820      	ldr	r0, [r4, #0]
    500a:	46a1      	mov	r9, r4
    500c:	4639      	mov	r1, r7
    500e:	6800      	ldr	r0, [r0, #0]
    5010:	f008 f9fc 	bl	d40c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5014:	0004      	movs	r4, r0
    5016:	d01f      	beq.n	5058 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    5018:	8067      	strh	r7, [r4, #2]
    501a:	8025      	strh	r5, [r4, #0]
    501c:	4629      	mov	r1, r5
    501e:	1d20      	adds	r0, r4, #4
    5020:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    5022:	4607      	mov	r7, r0
    5024:	465a      	mov	r2, fp
    5026:	2301      	movs	r3, #1
    5028:	9500      	str	r5, [sp, #0]
    502a:	f008 f94e 	bl	d2ca <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    502e:	8820      	ldrh	r0, [r4, #0]
    5030:	4631      	mov	r1, r6
    5032:	4438      	add	r0, r7
    5034:	2301      	movs	r3, #1
    5036:	9a02      	ldr	r2, [sp, #8]
    5038:	f8cd a000 	str.w	sl, [sp]
    503c:	f008 f945 	bl	d2ca <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    5040:	8820      	ldrh	r0, [r4, #0]
    5042:	19c1      	adds	r1, r0, r7
    5044:	4638      	mov	r0, r7
    5046:	f008 f971 	bl	d32c <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    504a:	f8d9 0000 	ldr.w	r0, [r9]
    504e:	6841      	ldr	r1, [r0, #4]
    5050:	2000      	movs	r0, #0
    5052:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    5056:	e7c3      	b.n	4fe0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5058:	2004      	movs	r0, #4
    505a:	e7c1      	b.n	4fe0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    505c:	2000008c 	.word	0x2000008c

00005060 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    5060:	b570      	push	{r4, r5, r6, lr}
    5062:	4c14      	ldr	r4, [pc, #80]	; (50b4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    5064:	6823      	ldr	r3, [r4, #0]
    5066:	b18b      	cbz	r3, 508c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    5068:	7a19      	ldrb	r1, [r3, #8]
    506a:	4281      	cmp	r1, r0
    506c:	d912      	bls.n	5094 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    506e:	685a      	ldr	r2, [r3, #4]
    5070:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    5074:	b171      	cbz	r1, 5094 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    5076:	2500      	movs	r5, #0
    5078:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    507c:	884a      	ldrh	r2, [r1, #2]
    507e:	6818      	ldr	r0, [r3, #0]
    5080:	f008 fa12 	bl	d4a8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5084:	6821      	ldr	r1, [r4, #0]
    5086:	2000      	movs	r0, #0
    5088:	7a0a      	ldrb	r2, [r1, #8]
    508a:	e00c      	b.n	50a6 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    508c:	21c8      	movs	r1, #200	; 0xc8
    508e:	2018      	movs	r0, #24
    5090:	f7ff fc26 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5094:	f243 0002 	movw	r0, #12290	; 0x3002
    5098:	bd70      	pop	{r4, r5, r6, pc}
    509a:	684b      	ldr	r3, [r1, #4]
    509c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    50a0:	b933      	cbnz	r3, 50b0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    50a2:	1c40      	adds	r0, r0, #1
    50a4:	b2c0      	uxtb	r0, r0
    50a6:	4282      	cmp	r2, r0
    50a8:	d8f7      	bhi.n	509a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    50aa:	6808      	ldr	r0, [r1, #0]
    50ac:	f008 f9f1 	bl	d492 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    50b0:	2000      	movs	r0, #0
    50b2:	bd70      	pop	{r4, r5, r6, pc}
    50b4:	2000008c 	.word	0x2000008c

000050b8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    50b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    50bc:	460d      	mov	r5, r1
    50be:	0004      	movs	r4, r0
    50c0:	4690      	mov	r8, r2
    50c2:	f04f 0600 	mov.w	r6, #0
    50c6:	d009      	beq.n	50dc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    50c8:	2700      	movs	r7, #0
    50ca:	1ce0      	adds	r0, r4, #3
    50cc:	f020 0003 	bic.w	r0, r0, #3
    50d0:	42a0      	cmp	r0, r4
    50d2:	d005      	beq.n	50e0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    50d4:	2186      	movs	r1, #134	; 0x86
    50d6:	2018      	movs	r0, #24
    50d8:	f7ff fc02 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50dc:	2701      	movs	r7, #1
    50de:	e7f4      	b.n	50ca <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    50e0:	b1cd      	cbz	r5, 5116 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    50e2:	4611      	mov	r1, r2
    50e4:	2000      	movs	r0, #0
    50e6:	f008 f9be 	bl	d466 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    50ea:	300c      	adds	r0, #12
    50ec:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    50f0:	b98f      	cbnz	r7, 5116 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    50f2:	4f0a      	ldr	r7, [pc, #40]	; (511c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    50f4:	f104 000c 	add.w	r0, r4, #12
    50f8:	00aa      	lsls	r2, r5, #2
    50fa:	603c      	str	r4, [r7, #0]
    50fc:	7225      	strb	r5, [r4, #8]
    50fe:	6060      	str	r0, [r4, #4]
    5100:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5104:	6020      	str	r0, [r4, #0]
    5106:	2100      	movs	r1, #0
    5108:	6860      	ldr	r0, [r4, #4]
    510a:	f007 fa78 	bl	c5fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    510e:	4641      	mov	r1, r8
    5110:	6838      	ldr	r0, [r7, #0]
    5112:	f008 f9a8 	bl	d466 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5116:	4630      	mov	r0, r6
    5118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    511c:	2000008c 	.word	0x2000008c

00005120 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    5120:	b570      	push	{r4, r5, r6, lr}
    5122:	4d08      	ldr	r5, [pc, #32]	; (5144 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    5124:	6828      	ldr	r0, [r5, #0]
    5126:	2800      	cmp	r0, #0
    5128:	d00a      	beq.n	5140 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    512a:	2400      	movs	r4, #0
    512c:	e004      	b.n	5138 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    512e:	4620      	mov	r0, r4
    5130:	f7ff ff96 	bl	5060 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    5134:	1c64      	adds	r4, r4, #1
    5136:	b2e4      	uxtb	r4, r4
    5138:	6828      	ldr	r0, [r5, #0]
    513a:	7a00      	ldrb	r0, [r0, #8]
    513c:	42a0      	cmp	r0, r4
    513e:	d8f6      	bhi.n	512e <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    5140:	bd70      	pop	{r4, r5, r6, pc}
    5142:	0000      	.short	0x0000
    5144:	2000008c 	.word	0x2000008c

00005148 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    5148:	4909      	ldr	r1, [pc, #36]	; (5170 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    514a:	b510      	push	{r4, lr}
    514c:	4602      	mov	r2, r0
    514e:	6809      	ldr	r1, [r1, #0]
    5150:	2000      	movs	r0, #0
    5152:	b149      	cbz	r1, 5168 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    5154:	7a0b      	ldrb	r3, [r1, #8]
    5156:	4293      	cmp	r3, r2
    5158:	d905      	bls.n	5166 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    515a:	6849      	ldr	r1, [r1, #4]
    515c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    5160:	2900      	cmp	r1, #0
    5162:	d000      	beq.n	5166 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    5164:	1d08      	adds	r0, r1, #4
    5166:	bd10      	pop	{r4, pc}
    5168:	21ee      	movs	r1, #238	; 0xee
    516a:	2018      	movs	r0, #24
    516c:	f7ff fbb8 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5170:	2000008c 	.word	0x2000008c

00005174 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    5174:	490a      	ldr	r1, [pc, #40]	; (51a0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    5176:	b510      	push	{r4, lr}
    5178:	4602      	mov	r2, r0
    517a:	6809      	ldr	r1, [r1, #0]
    517c:	2000      	movs	r0, #0
    517e:	b159      	cbz	r1, 5198 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    5180:	7a0b      	ldrb	r3, [r1, #8]
    5182:	4293      	cmp	r3, r2
    5184:	d907      	bls.n	5196 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5186:	6849      	ldr	r1, [r1, #4]
    5188:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    518c:	2900      	cmp	r1, #0
    518e:	d002      	beq.n	5196 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5190:	f831 0b04 	ldrh.w	r0, [r1], #4
    5194:	4408      	add	r0, r1
    5196:	bd10      	pop	{r4, pc}
    5198:	21fc      	movs	r1, #252	; 0xfc
    519a:	2018      	movs	r0, #24
    519c:	f7ff fba0 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51a0:	2000008c 	.word	0x2000008c

000051a4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    51a4:	b570      	push	{r4, r5, r6, lr}
    51a6:	4606      	mov	r6, r0
    51a8:	4809      	ldr	r0, [pc, #36]	; (51d0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x2c>)
    51aa:	460d      	mov	r5, r1
    51ac:	8800      	ldrh	r0, [r0, #0]
    51ae:	b10a      	cbz	r2, 51b4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x10>
    51b0:	0844      	lsrs	r4, r0, #1
    51b2:	e000      	b.n	51b6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x12>
    51b4:	0884      	lsrs	r4, r0, #2
    51b6:	4621      	mov	r1, r4
    51b8:	6828      	ldr	r0, [r5, #0]
    51ba:	f008 f927 	bl	d40c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    51be:	2100      	movs	r1, #0
    51c0:	792a      	ldrb	r2, [r5, #4]
    51c2:	f364 411f 	bfi	r1, r4, #16, #16
    51c6:	1c52      	adds	r2, r2, #1
    51c8:	712a      	strb	r2, [r5, #4]
    51ca:	e9c6 0100 	strd	r0, r1, [r6]
    51ce:	bd70      	pop	{r4, r5, r6, pc}
    51d0:	20000090 	.word	0x20000090

000051d4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    51d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    51d8:	4688      	mov	r8, r1
    51da:	0005      	movs	r5, r0
    51dc:	d00a      	beq.n	51f4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x20>
    51de:	2700      	movs	r7, #0
    51e0:	1ce9      	adds	r1, r5, #3
    51e2:	2000      	movs	r0, #0
    51e4:	f021 0103 	bic.w	r1, r1, #3
    51e8:	42a9      	cmp	r1, r5
    51ea:	d005      	beq.n	51f8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    51ec:	212e      	movs	r1, #46	; 0x2e
    51ee:	2009      	movs	r0, #9
    51f0:	f7ff fb76 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51f4:	2701      	movs	r7, #1
    51f6:	e7f3      	b.n	51e0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xc>
    51f8:	491d      	ldr	r1, [pc, #116]	; (5270 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    51fa:	eb00 06c8 	add.w	r6, r0, r8, lsl #3
    51fe:	b907      	cbnz	r7, 5202 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x2e>
    5200:	604d      	str	r5, [r1, #4]
    5202:	2a1f      	cmp	r2, #31
    5204:	d804      	bhi.n	5210 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x3c>
    5206:	f64f 70ff 	movw	r0, #65535	; 0xffff
    520a:	ea00 0082 	and.w	r0, r0, r2, lsl #2
    520e:	e007      	b.n	5220 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4c>
    5210:	207c      	movs	r0, #124	; 0x7c
    5212:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
    5216:	d201      	bcs.n	521c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5218:	0050      	lsls	r0, r2, #1
    521a:	e000      	b.n	521e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    521c:	207c      	movs	r0, #124	; 0x7c
    521e:	b280      	uxth	r0, r0
    5220:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    5224:	1cc0      	adds	r0, r0, #3
    5226:	4010      	ands	r0, r2
    5228:	2400      	movs	r4, #0
    522a:	8008      	strh	r0, [r1, #0]
    522c:	46a2      	mov	sl, r4
    522e:	4689      	mov	r9, r1
    5230:	e016      	b.n	5260 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8c>
    5232:	19a8      	adds	r0, r5, r6
    5234:	9000      	str	r0, [sp, #0]
    5236:	b10f      	cbz	r7, 523c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x68>
    5238:	2000      	movs	r0, #0
    523a:	e000      	b.n	523e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x6a>
    523c:	4668      	mov	r0, sp
    523e:	f8b9 1000 	ldrh.w	r1, [r9]
    5242:	f008 f910 	bl	d466 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5246:	b947      	cbnz	r7, 525a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x86>
    5248:	f8d9 1004 	ldr.w	r1, [r9, #4]
    524c:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
    5250:	f883 a004 	strb.w	sl, [r3, #4]
    5254:	9a00      	ldr	r2, [sp, #0]
    5256:	f841 2034 	str.w	r2, [r1, r4, lsl #3]
    525a:	1c64      	adds	r4, r4, #1
    525c:	4406      	add	r6, r0
    525e:	b2e4      	uxtb	r4, r4
    5260:	4544      	cmp	r4, r8
    5262:	d3e6      	bcc.n	5232 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5e>
    5264:	1df6      	adds	r6, r6, #7
    5266:	f026 0007 	bic.w	r0, r6, #7
    526a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    526e:	0000      	.short	0x0000
    5270:	20000090 	.word	0x20000090

00005274 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    5274:	4906      	ldr	r1, [pc, #24]	; (5290 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x1c>)
    5276:	b510      	push	{r4, lr}
    5278:	684a      	ldr	r2, [r1, #4]
    527a:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
    527e:	2000      	movs	r0, #0
    5280:	7120      	strb	r0, [r4, #4]
    5282:	8809      	ldrh	r1, [r1, #0]
    5284:	4620      	mov	r0, r4
    5286:	f008 f8ee 	bl	d466 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    528a:	4620      	mov	r0, r4
    528c:	bd10      	pop	{r4, pc}
    528e:	0000      	.short	0x0000
    5290:	20000090 	.word	0x20000090
    5294:	4909      	ldr	r1, [pc, #36]	; (52bc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x48>)
    5296:	b510      	push	{r4, lr}
    5298:	4807      	ldr	r0, [pc, #28]	; (52b8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    529a:	6008      	str	r0, [r1, #0]
    529c:	4b08      	ldr	r3, [pc, #32]	; (52c0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x4c>)
    529e:	2011      	movs	r0, #17
    52a0:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    52a4:	2200      	movs	r2, #0
    52a6:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    52aa:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    52ae:	1c40      	adds	r0, r0, #1
    52b0:	b2c0      	uxtb	r0, r0
    52b2:	2814      	cmp	r0, #20
    52b4:	d3f4      	bcc.n	52a0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x2c>
    52b6:	bd10      	pop	{r4, pc}
    52b8:	fffe0000 	.word	0xfffe0000
    52bc:	4001f508 	.word	0x4001f508
    52c0:	4001f000 	.word	0x4001f000
    52c4:	b570      	push	{r4, r5, r6, lr}
    52c6:	2420      	movs	r4, #32
    52c8:	2100      	movs	r1, #0
    52ca:	2301      	movs	r3, #1
    52cc:	fa20 f201 	lsr.w	r2, r0, r1
    52d0:	07d2      	lsls	r2, r2, #31
    52d2:	d020      	beq.n	5316 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xa2>
    52d4:	b24a      	sxtb	r2, r1
    52d6:	2a00      	cmp	r2, #0
    52d8:	db10      	blt.n	52fc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x88>
    52da:	bf00      	nop
    52dc:	ea4f 1652 	mov.w	r6, r2, lsr #5
    52e0:	ea4f 0686 	mov.w	r6, r6, lsl #2
    52e4:	f002 051f 	and.w	r5, r2, #31
    52e8:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    52ec:	fa03 f505 	lsl.w	r5, r3, r5
    52f0:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    52f4:	f3bf 8f4f 	dsb	sy
    52f8:	f3bf 8f6f 	isb	sy
    52fc:	db0b      	blt.n	5316 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xa2>
    52fe:	f002 051f 	and.w	r5, r2, #31
    5302:	ea4f 1252 	mov.w	r2, r2, lsr #5
    5306:	ea4f 0282 	mov.w	r2, r2, lsl #2
    530a:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    530e:	fa03 f505 	lsl.w	r5, r3, r5
    5312:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    5316:	f101 0101 	add.w	r1, r1, #1
    531a:	42a1      	cmp	r1, r4
    531c:	d3d6      	bcc.n	52cc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x58>
    531e:	bd70      	pop	{r4, r5, r6, pc}
    5320:	b570      	push	{r4, r5, r6, lr}
    5322:	0042      	lsls	r2, r0, #1
    5324:	f04f 0100 	mov.w	r1, #0
    5328:	d501      	bpl.n	532e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xba>
    532a:	4a14      	ldr	r2, [pc, #80]	; (537c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x108>)
    532c:	6011      	str	r1, [r2, #0]
    532e:	f3c0 3280 	ubfx	r2, r0, #14, #1
    5332:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    5336:	429a      	cmp	r2, r3
    5338:	d003      	beq.n	5342 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xce>
    533a:	2164      	movs	r1, #100	; 0x64
    533c:	201b      	movs	r0, #27
    533e:	f7ff facf 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5342:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    5346:	d014      	beq.n	5372 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xfe>
    5348:	4a0d      	ldr	r2, [pc, #52]	; (5380 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x10c>)
    534a:	2001      	movs	r0, #1
    534c:	6050      	str	r0, [r2, #4]
    534e:	1e83      	subs	r3, r0, #2
    5350:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    5354:	4a0b      	ldr	r2, [pc, #44]	; (5384 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x110>)
    5356:	6090      	str	r0, [r2, #8]
    5358:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    535c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    5360:	4c09      	ldr	r4, [pc, #36]	; (5388 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x114>)
    5362:	6021      	str	r1, [r4, #0]
    5364:	1d25      	adds	r5, r4, #4
    5366:	6028      	str	r0, [r5, #0]
    5368:	6090      	str	r0, [r2, #8]
    536a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    536e:	6021      	str	r1, [r4, #0]
    5370:	6028      	str	r0, [r5, #0]
    5372:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5376:	f7ff bf8d 	b.w	5294 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x20>
    537a:	0000      	.short	0x0000
    537c:	4001e504 	.word	0x4001e504
    5380:	4000e000 	.word	0x4000e000
    5384:	4000f000 	.word	0x4000f000
    5388:	4000f500 	.word	0x4000f500

0000538c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    538c:	b570      	push	{r4, r5, r6, lr}
    538e:	4c0a      	ldr	r4, [pc, #40]	; (53b8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    5390:	460d      	mov	r5, r1
    5392:	6020      	str	r0, [r4, #0]
    5394:	f7ff ffc4 	bl	5320 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xac>
    5398:	6820      	ldr	r0, [r4, #0]
    539a:	f7ff ff93 	bl	52c4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x50>
    539e:	f000 f877 	bl	5490 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    53a2:	f7ff ff77 	bl	5294 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x20>
    53a6:	f008 f911 	bl	d5cc <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    53aa:	4628      	mov	r0, r5
    53ac:	f000 f8aa 	bl	5504 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    53b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53b4:	f000 b8c2 	b.w	553c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    53b8:	20000098 	.word	0x20000098

000053bc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    53bc:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    53c0:	4e2f      	ldr	r6, [pc, #188]	; (5480 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    53c2:	4683      	mov	fp, r0
    53c4:	6830      	ldr	r0, [r6, #0]
    53c6:	9001      	str	r0, [sp, #4]
    53c8:	2701      	movs	r7, #1
    53ca:	482e      	ldr	r0, [pc, #184]	; (5484 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    53cc:	f006 fff4 	bl	c3b8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    53d0:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 5484 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    53d4:	b920      	cbnz	r0, 53e0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    53d6:	2700      	movs	r7, #0
    53d8:	f108 0001 	add.w	r0, r8, #1
    53dc:	f007 f803 	bl	c3e6 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    53e0:	4c29      	ldr	r4, [pc, #164]	; (5488 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    53e2:	2500      	movs	r5, #0
    53e4:	f04f 0903 	mov.w	r9, #3
    53e8:	2001      	movs	r0, #1
    53ea:	6060      	str	r0, [r4, #4]
    53ec:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    53f0:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    53f4:	f8c6 b000 	str.w	fp, [r6]
    53f8:	6020      	str	r0, [r4, #0]
    53fa:	f8df a090 	ldr.w	sl, [pc, #144]	; 548c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    53fe:	e017      	b.n	5430 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    5400:	f8da 0000 	ldr.w	r0, [sl]
    5404:	06c0      	lsls	r0, r0, #27
    5406:	d513      	bpl.n	5430 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    5408:	200e      	movs	r0, #14
    540a:	f008 f8d0 	bl	d5ae <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x28>
    540e:	f3ef 8010 	mrs	r0, PRIMASK
    5412:	9000      	str	r0, [sp, #0]
    5414:	b672      	cpsid	i
    5416:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    541a:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    541e:	b920      	cbnz	r0, 542a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    5420:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    5424:	b908      	cbnz	r0, 542a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    5426:	f7ff f8eb 	bl	4600 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    542a:	9800      	ldr	r0, [sp, #0]
    542c:	b900      	cbnz	r0, 5430 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    542e:	b662      	cpsie	i
    5430:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    5434:	b918      	cbnz	r0, 543e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    5436:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    543a:	2800      	cmp	r0, #0
    543c:	d0e0      	beq.n	5400 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    543e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    5442:	2800      	cmp	r0, #0
    5444:	d1d0      	bne.n	53e8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    5446:	b137      	cbz	r7, 5456 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    5448:	9801      	ldr	r0, [sp, #4]
    544a:	6030      	str	r0, [r6, #0]
    544c:	f108 0001 	add.w	r0, r8, #1
    5450:	f006 ffb2 	bl	c3b8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5454:	e011      	b.n	547a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    5456:	f108 0001 	add.w	r0, r8, #1
    545a:	f006 ffad 	bl	c3b8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    545e:	2800      	cmp	r0, #0
    5460:	d1ba      	bne.n	53d8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    5462:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    5466:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    546a:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    546e:	200e      	movs	r0, #14
    5470:	f008 f89d 	bl	d5ae <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x28>
    5474:	4803      	ldr	r0, [pc, #12]	; (5484 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    5476:	f006 ffb6 	bl	c3e6 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    547a:	2000      	movs	r0, #0
    547c:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5480:	4000e504 	.word	0x4000e504
    5484:	2000029b 	.word	0x2000029b
    5488:	4000e000 	.word	0x4000e000
    548c:	e000ed10 	.word	0xe000ed10

00005490 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    5490:	b510      	push	{r4, lr}
    5492:	4808      	ldr	r0, [pc, #32]	; (54b4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    5494:	f006 ffa3 	bl	c3de <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    5498:	b108      	cbz	r0, 549e <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    549a:	2124      	movs	r1, #36	; 0x24
    549c:	e006      	b.n	54ac <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    549e:	4805      	ldr	r0, [pc, #20]	; (54b4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    54a0:	1c40      	adds	r0, r0, #1
    54a2:	f006 ff9c 	bl	c3de <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    54a6:	2800      	cmp	r0, #0
    54a8:	d003      	beq.n	54b2 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    54aa:	2128      	movs	r1, #40	; 0x28
    54ac:	201d      	movs	r0, #29
    54ae:	f7ff fa17 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54b2:	bd10      	pop	{r4, pc}
    54b4:	2000029b 	.word	0x2000029b

000054b8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    54b8:	b570      	push	{r4, r5, r6, lr}
    54ba:	4911      	ldr	r1, [pc, #68]	; (5500 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    54bc:	680a      	ldr	r2, [r1, #0]
    54be:	b1ea      	cbz	r2, 54fc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    54c0:	2300      	movs	r3, #0
    54c2:	461d      	mov	r5, r3
    54c4:	2401      	movs	r4, #1
    54c6:	684a      	ldr	r2, [r1, #4]
    54c8:	1c52      	adds	r2, r2, #1
    54ca:	604a      	str	r2, [r1, #4]
    54cc:	2a09      	cmp	r2, #9
    54ce:	d300      	bcc.n	54d2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    54d0:	604d      	str	r5, [r1, #4]
    54d2:	790e      	ldrb	r6, [r1, #4]
    54d4:	fa04 f206 	lsl.w	r2, r4, r6
    54d8:	680e      	ldr	r6, [r1, #0]
    54da:	4216      	tst	r6, r2
    54dc:	d00b      	beq.n	54f6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    54de:	f3ef 8310 	mrs	r3, PRIMASK
    54e2:	b672      	cpsid	i
    54e4:	680c      	ldr	r4, [r1, #0]
    54e6:	4394      	bics	r4, r2
    54e8:	600c      	str	r4, [r1, #0]
    54ea:	b903      	cbnz	r3, 54ee <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    54ec:	b662      	cpsie	i
    54ee:	6849      	ldr	r1, [r1, #4]
    54f0:	6001      	str	r1, [r0, #0]
    54f2:	2000      	movs	r0, #0
    54f4:	bd70      	pop	{r4, r5, r6, pc}
    54f6:	1c5b      	adds	r3, r3, #1
    54f8:	2b09      	cmp	r3, #9
    54fa:	d3e4      	bcc.n	54c6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    54fc:	2005      	movs	r0, #5
    54fe:	bd70      	pop	{r4, r5, r6, pc}
    5500:	2000009c 	.word	0x2000009c

00005504 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    5504:	4802      	ldr	r0, [pc, #8]	; (5510 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    5506:	2100      	movs	r1, #0
    5508:	6001      	str	r1, [r0, #0]
    550a:	6041      	str	r1, [r0, #4]
    550c:	4770      	bx	lr
    550e:	0000      	.short	0x0000
    5510:	2000009c 	.word	0x2000009c

00005514 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    5514:	b510      	push	{r4, lr}
    5516:	4c08      	ldr	r4, [pc, #32]	; (5538 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    5518:	7861      	ldrb	r1, [r4, #1]
    551a:	b109      	cbz	r1, 5520 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    551c:	200f      	movs	r0, #15
    551e:	bd10      	pop	{r4, pc}
    5520:	f7fe fffa 	bl	4518 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    5524:	7020      	strb	r0, [r4, #0]
    5526:	28ff      	cmp	r0, #255	; 0xff
    5528:	d001      	beq.n	552e <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    552a:	2000      	movs	r0, #0
    552c:	bd10      	pop	{r4, pc}
    552e:	2176      	movs	r1, #118	; 0x76
    5530:	201f      	movs	r0, #31
    5532:	f7ff f9d5 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5536:	0000      	.short	0x0000
    5538:	200000a4 	.word	0x200000a4

0000553c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    553c:	4901      	ldr	r1, [pc, #4]	; (5544 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    553e:	2000      	movs	r0, #0
    5540:	7048      	strb	r0, [r1, #1]
    5542:	4770      	bx	lr
    5544:	200000a4 	.word	0x200000a4

00005548 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    5548:	4806      	ldr	r0, [pc, #24]	; (5564 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    554a:	4a07      	ldr	r2, [pc, #28]	; (5568 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    554c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    554e:	8852      	ldrh	r2, [r2, #2]
    5550:	4291      	cmp	r1, r2
    5552:	d104      	bne.n	555e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5554:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    5558:	b108      	cbz	r0, 555e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    555a:	2000      	movs	r0, #0
    555c:	4770      	bx	lr
    555e:	2001      	movs	r0, #1
    5560:	4770      	bx	lr
    5562:	0000      	.short	0x0000
    5564:	200010aa 	.word	0x200010aa
    5568:	20000288 	.word	0x20000288

0000556c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    556c:	4901      	ldr	r1, [pc, #4]	; (5574 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    556e:	8048      	strh	r0, [r1, #2]
    5570:	4770      	bx	lr
    5572:	0000      	.short	0x0000
    5574:	20000288 	.word	0x20000288

00005578 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    5578:	4808      	ldr	r0, [pc, #32]	; (559c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    557a:	4a09      	ldr	r2, [pc, #36]	; (55a0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    557c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    557e:	8852      	ldrh	r2, [r2, #2]
    5580:	4291      	cmp	r1, r2
    5582:	d109      	bne.n	5598 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5584:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5588:	8481      	strh	r1, [r0, #36]	; 0x24
    558a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    558e:	b119      	cbz	r1, 5598 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5590:	2100      	movs	r1, #0
    5592:	7001      	strb	r1, [r0, #0]
    5594:	2001      	movs	r0, #1
    5596:	4770      	bx	lr
    5598:	2000      	movs	r0, #0
    559a:	4770      	bx	lr
    559c:	200010aa 	.word	0x200010aa
    55a0:	20000288 	.word	0x20000288

000055a4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    55a4:	4807      	ldr	r0, [pc, #28]	; (55c4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    55a6:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    55aa:	2901      	cmp	r1, #1
    55ac:	d007      	beq.n	55be <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    55ae:	2101      	movs	r1, #1
    55b0:	7001      	strb	r1, [r0, #0]
    55b2:	4805      	ldr	r0, [pc, #20]	; (55c8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    55b4:	4903      	ldr	r1, [pc, #12]	; (55c4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    55b6:	8800      	ldrh	r0, [r0, #0]
    55b8:	8488      	strh	r0, [r1, #36]	; 0x24
    55ba:	2001      	movs	r0, #1
    55bc:	4770      	bx	lr
    55be:	2000      	movs	r0, #0
    55c0:	4770      	bx	lr
    55c2:	0000      	.short	0x0000
    55c4:	200010aa 	.word	0x200010aa
    55c8:	20000288 	.word	0x20000288

000055cc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    55cc:	4906      	ldr	r1, [pc, #24]	; (55e8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    55ce:	4b07      	ldr	r3, [pc, #28]	; (55ec <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    55d0:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    55d2:	885b      	ldrh	r3, [r3, #2]
    55d4:	429a      	cmp	r2, r3
    55d6:	d105      	bne.n	55e4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    55d8:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    55dc:	b112      	cbz	r2, 55e4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    55de:	6001      	str	r1, [r0, #0]
    55e0:	2001      	movs	r0, #1
    55e2:	4770      	bx	lr
    55e4:	2000      	movs	r0, #0
    55e6:	4770      	bx	lr
    55e8:	200010aa 	.word	0x200010aa
    55ec:	20000288 	.word	0x20000288

000055f0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    55f0:	4909      	ldr	r1, [pc, #36]	; (5618 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    55f2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    55f4:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    55f8:	3bff      	subs	r3, #255	; 0xff
    55fa:	d002      	beq.n	5602 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    55fc:	2100      	movs	r1, #0
    55fe:	6001      	str	r1, [r0, #0]
    5600:	e007      	b.n	5612 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5602:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5606:	4904      	ldr	r1, [pc, #16]	; (5618 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5608:	2a01      	cmp	r2, #1
    560a:	d002      	beq.n	5612 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    560c:	6001      	str	r1, [r0, #0]
    560e:	2001      	movs	r0, #1
    5610:	4770      	bx	lr
    5612:	2000      	movs	r0, #0
    5614:	4770      	bx	lr
    5616:	0000      	.short	0x0000
    5618:	200010aa 	.word	0x200010aa

0000561c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    561c:	4901      	ldr	r1, [pc, #4]	; (5624 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    561e:	8008      	strh	r0, [r1, #0]
    5620:	4770      	bx	lr
    5622:	0000      	.short	0x0000
    5624:	20000288 	.word	0x20000288

00005628 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    5628:	4905      	ldr	r1, [pc, #20]	; (5640 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    562a:	2000      	movs	r0, #0
    562c:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5630:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5634:	8488      	strh	r0, [r1, #36]	; 0x24
    5636:	4903      	ldr	r1, [pc, #12]	; (5644 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    5638:	8008      	strh	r0, [r1, #0]
    563a:	8048      	strh	r0, [r1, #2]
    563c:	4770      	bx	lr
    563e:	0000      	.short	0x0000
    5640:	200010aa 	.word	0x200010aa
    5644:	20000288 	.word	0x20000288
    5648:	4905      	ldr	r1, [pc, #20]	; (5660 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    564a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    564c:	4282      	cmp	r2, r0
    564e:	d105      	bne.n	565c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    5650:	2000      	movs	r0, #0
    5652:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5656:	f64f 70ff 	movw	r0, #65535	; 0xffff
    565a:	8488      	strh	r0, [r1, #36]	; 0x24
    565c:	4770      	bx	lr
    565e:	0000      	.short	0x0000
    5660:	200010aa 	.word	0x200010aa

00005664 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    5664:	4a0a      	ldr	r2, [pc, #40]	; (5690 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    5666:	b110      	cbz	r0, 566e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    5668:	2801      	cmp	r0, #1
    566a:	d007      	beq.n	567c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    566c:	e00e      	b.n	568c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    566e:	7850      	ldrb	r0, [r2, #1]
    5670:	b160      	cbz	r0, 568c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5672:	f8d2 0002 	ldr.w	r0, [r2, #2]
    5676:	6008      	str	r0, [r1, #0]
    5678:	88d0      	ldrh	r0, [r2, #6]
    567a:	e004      	b.n	5686 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    567c:	7810      	ldrb	r0, [r2, #0]
    567e:	b128      	cbz	r0, 568c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5680:	6890      	ldr	r0, [r2, #8]
    5682:	6008      	str	r0, [r1, #0]
    5684:	8990      	ldrh	r0, [r2, #12]
    5686:	8088      	strh	r0, [r1, #4]
    5688:	2001      	movs	r0, #1
    568a:	4770      	bx	lr
    568c:	2000      	movs	r0, #0
    568e:	4770      	bx	lr
    5690:	2000029d 	.word	0x2000029d

00005694 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    5694:	4a08      	ldr	r2, [pc, #32]	; (56b8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    5696:	2301      	movs	r3, #1
    5698:	b138      	cbz	r0, 56aa <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    569a:	2801      	cmp	r0, #1
    569c:	d104      	bne.n	56a8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    569e:	7013      	strb	r3, [r2, #0]
    56a0:	6808      	ldr	r0, [r1, #0]
    56a2:	6090      	str	r0, [r2, #8]
    56a4:	8888      	ldrh	r0, [r1, #4]
    56a6:	8190      	strh	r0, [r2, #12]
    56a8:	4770      	bx	lr
    56aa:	7053      	strb	r3, [r2, #1]
    56ac:	6808      	ldr	r0, [r1, #0]
    56ae:	f8c2 0002 	str.w	r0, [r2, #2]
    56b2:	8888      	ldrh	r0, [r1, #4]
    56b4:	80d0      	strh	r0, [r2, #6]
    56b6:	4770      	bx	lr
    56b8:	2000029d 	.word	0x2000029d

000056bc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    56bc:	4906      	ldr	r1, [pc, #24]	; (56d8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    56be:	b110      	cbz	r0, 56c6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    56c0:	2801      	cmp	r0, #1
    56c2:	d002      	beq.n	56ca <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    56c4:	e005      	b.n	56d2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    56c6:	7848      	ldrb	r0, [r1, #1]
    56c8:	e000      	b.n	56cc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    56ca:	7808      	ldrb	r0, [r1, #0]
    56cc:	b108      	cbz	r0, 56d2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    56ce:	2001      	movs	r0, #1
    56d0:	4770      	bx	lr
    56d2:	2000      	movs	r0, #0
    56d4:	4770      	bx	lr
    56d6:	0000      	.short	0x0000
    56d8:	2000029d 	.word	0x2000029d

000056dc <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    56dc:	4901      	ldr	r1, [pc, #4]	; (56e4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    56de:	7448      	strb	r0, [r1, #17]
    56e0:	4770      	bx	lr
    56e2:	0000      	.short	0x0000
    56e4:	20000ada 	.word	0x20000ada

000056e8 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    56e8:	4801      	ldr	r0, [pc, #4]	; (56f0 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    56ea:	78c0      	ldrb	r0, [r0, #3]
    56ec:	4770      	bx	lr
    56ee:	0000      	.short	0x0000
    56f0:	200000c0 	.word	0x200000c0

000056f4 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    56f4:	4801      	ldr	r0, [pc, #4]	; (56fc <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    56f6:	7900      	ldrb	r0, [r0, #4]
    56f8:	4770      	bx	lr
    56fa:	0000      	.short	0x0000
    56fc:	200000c0 	.word	0x200000c0

00005700 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    5700:	b578      	push	{r3, r4, r5, r6, lr}
    5702:	4913      	ldr	r1, [pc, #76]	; (5750 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    5704:	7c4a      	ldrb	r2, [r1, #17]
    5706:	b30a      	cbz	r2, 574c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    5708:	7c0a      	ldrb	r2, [r1, #16]
    570a:	f88d 2000 	strb.w	r2, [sp]
    570e:	9a00      	ldr	r2, [sp, #0]
    5710:	9200      	str	r2, [sp, #0]
    5712:	f89d 2000 	ldrb.w	r2, [sp]
    5716:	b1ca      	cbz	r2, 574c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    5718:	2300      	movs	r3, #0
    571a:	f101 0210 	add.w	r2, r1, #16
    571e:	241a      	movs	r4, #26
    5720:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    5724:	7c0e      	ldrb	r6, [r1, #16]
    5726:	f88d 6000 	strb.w	r6, [sp]
    572a:	9e00      	ldr	r6, [sp, #0]
    572c:	9600      	str	r6, [sp, #0]
    572e:	f89d 6000 	ldrb.w	r6, [sp]
    5732:	b14e      	cbz	r6, 5748 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    5734:	7013      	strb	r3, [r2, #0]
    5736:	7043      	strb	r3, [r0, #1]
    5738:	7004      	strb	r4, [r0, #0]
    573a:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    573e:	6046      	str	r6, [r0, #4]
    5740:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    5744:	6086      	str	r6, [r0, #8]
    5746:	e7ed      	b.n	5724 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    5748:	2001      	movs	r0, #1
    574a:	bd78      	pop	{r3, r4, r5, r6, pc}
    574c:	2000      	movs	r0, #0
    574e:	bd78      	pop	{r3, r4, r5, r6, pc}
    5750:	20000ada 	.word	0x20000ada

00005754 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5754:	b510      	push	{r4, lr}
    5756:	4604      	mov	r4, r0
    5758:	f000 f946 	bl	59e8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    575c:	b118      	cbz	r0, 5766 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    575e:	21bd      	movs	r1, #189	; 0xbd
    5760:	2027      	movs	r0, #39	; 0x27
    5762:	f7ff f8bd 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5766:	4803      	ldr	r0, [pc, #12]	; (5774 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    5768:	2101      	movs	r1, #1
    576a:	f008 fb0c 	bl	dd86 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    576e:	4802      	ldr	r0, [pc, #8]	; (5778 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    5770:	62c4      	str	r4, [r0, #44]	; 0x2c
    5772:	bd10      	pop	{r4, pc}
    5774:	20000ab8 	.word	0x20000ab8
    5778:	200000c0 	.word	0x200000c0

0000577c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    577c:	4901      	ldr	r1, [pc, #4]	; (5784 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    577e:	2001      	movs	r0, #1
    5780:	7188      	strb	r0, [r1, #6]
    5782:	4770      	bx	lr
    5784:	200000c0 	.word	0x200000c0

00005788 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    578c:	4d57      	ldr	r5, [pc, #348]	; (58ec <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x164>)
    578e:	9c08      	ldr	r4, [sp, #32]
    5790:	782e      	ldrb	r6, [r5, #0]
    5792:	2e00      	cmp	r6, #0
    5794:	d16e      	bne.n	5874 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    5796:	2a00      	cmp	r2, #0
    5798:	d06c      	beq.n	5874 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    579a:	2b00      	cmp	r3, #0
    579c:	d06a      	beq.n	5874 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    579e:	2c00      	cmp	r4, #0
    57a0:	d068      	beq.n	5874 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    57a2:	f105 0614 	add.w	r6, r5, #20
    57a6:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    57aa:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    57ae:	2700      	movs	r7, #0
    57b0:	71af      	strb	r7, [r5, #6]
    57b2:	716f      	strb	r7, [r5, #5]
    57b4:	70ef      	strb	r7, [r5, #3]
    57b6:	70af      	strb	r7, [r5, #2]
    57b8:	712f      	strb	r7, [r5, #4]
    57ba:	81af      	strh	r7, [r5, #12]
    57bc:	81ef      	strh	r7, [r5, #14]
    57be:	f000 f94b 	bl	5a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    57c2:	4606      	mov	r6, r0
    57c4:	f000 f942 	bl	5a4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    57c8:	4604      	mov	r4, r0
    57ca:	f005 ffd1 	bl	b770 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    57ce:	f005 fca9 	bl	b124 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    57d2:	f994 0066 	ldrsb.w	r0, [r4, #102]	; 0x66
    57d6:	f006 f853 	bl	b880 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    57da:	f104 0010 	add.w	r0, r4, #16
    57de:	f006 f93d 	bl	ba5c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    57e2:	f104 000c 	add.w	r0, r4, #12
    57e6:	f006 f92d 	bl	ba44 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    57ea:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    57ee:	f006 f94f 	bl	ba90 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    57f2:	f105 0038 	add.w	r0, r5, #56	; 0x38
    57f6:	6840      	ldr	r0, [r0, #4]
    57f8:	f890 016c 	ldrb.w	r0, [r0, #364]	; 0x16c
    57fc:	b108      	cbz	r0, 5802 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x7a>
    57fe:	f005 ff05 	bl	b60c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    5802:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
    5806:	2001      	movs	r0, #1
    5808:	f005 fe30 	bl	b46c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    580c:	2800      	cmp	r0, #0
    580e:	d066      	beq.n	58de <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x156>
    5810:	46ba      	mov	sl, r7
    5812:	2001      	movs	r0, #1
    5814:	f005 ff3a 	bl	b68c <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    5818:	4835      	ldr	r0, [pc, #212]	; (58f0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x168>)
    581a:	f005 fea3 	bl	b564 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    581e:	8820      	ldrh	r0, [r4, #0]
    5820:	f7ff fca8 	bl	5174 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5824:	6328      	str	r0, [r5, #48]	; 0x30
    5826:	8820      	ldrh	r0, [r4, #0]
    5828:	f7ff fc8e 	bl	5148 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    582c:	f106 0160 	add.w	r1, r6, #96	; 0x60
    5830:	6368      	str	r0, [r5, #52]	; 0x34
    5832:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 58f4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16c>
    5836:	c98e      	ldmia	r1, {r1, r2, r3, r7}
    5838:	f109 0808 	add.w	r8, r9, #8
    583c:	e888 008e 	stmia.w	r8, {r1, r2, r3, r7}
    5840:	6f31      	ldr	r1, [r6, #112]	; 0x70
    5842:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    5846:	6f71      	ldr	r1, [r6, #116]	; 0x74
    5848:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    584c:	f000 f976 	bl	5b3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    5850:	4601      	mov	r1, r0
    5852:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    5854:	f008 f81a 	bl	d88c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5858:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    585a:	4281      	cmp	r1, r0
    585c:	d200      	bcs.n	5860 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd8>
    585e:	4608      	mov	r0, r1
    5860:	7228      	strb	r0, [r5, #8]
    5862:	46a8      	mov	r8, r5
    5864:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
    5868:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
    586a:	7cf7      	ldrb	r7, [r6, #19]
    586c:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
    586e:	2908      	cmp	r1, #8
    5870:	d104      	bne.n	587c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf4>
    5872:	e002      	b.n	587a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf2>
    5874:	f44f 718a 	mov.w	r1, #276	; 0x114
    5878:	e035      	b.n	58e6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x15e>
    587a:	2104      	movs	r1, #4
    587c:	f008 f806 	bl	d88c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5880:	b90f      	cbnz	r7, 5886 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    5882:	1d00      	adds	r0, r0, #4
    5884:	b280      	uxth	r0, r0
    5886:	4285      	cmp	r5, r0
    5888:	d200      	bcs.n	588c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x104>
    588a:	4628      	mov	r0, r5
    588c:	b2c0      	uxtb	r0, r0
    588e:	f888 0009 	strb.w	r0, [r8, #9]
    5892:	7cf2      	ldrb	r2, [r6, #19]
    5894:	b102      	cbz	r2, 5898 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    5896:	2204      	movs	r2, #4
    5898:	4410      	add	r0, r2
    589a:	b2c0      	uxtb	r0, r0
    589c:	f888 0007 	strb.w	r0, [r8, #7]
    58a0:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
    58a4:	1d09      	adds	r1, r1, #4
    58a6:	4281      	cmp	r1, r0
    58a8:	d202      	bcs.n	58b0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x128>
    58aa:	f240 11a1 	movw	r1, #417	; 0x1a1
    58ae:	e01a      	b.n	58e6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x15e>
    58b0:	4655      	mov	r5, sl
    58b2:	2001      	movs	r0, #1
    58b4:	f000 fb46 	bl	5f44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    58b8:	480f      	ldr	r0, [pc, #60]	; (58f8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x170>)
    58ba:	6800      	ldr	r0, [r0, #0]
    58bc:	2803      	cmp	r0, #3
    58be:	d010      	beq.n	58e2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x15a>
    58c0:	280b      	cmp	r0, #11
    58c2:	d00e      	beq.n	58e2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x15a>
    58c4:	4648      	mov	r0, r9
    58c6:	f840 5f52 	str.w	r5, [r0, #82]!
    58ca:	6045      	str	r5, [r0, #4]
    58cc:	4809      	ldr	r0, [pc, #36]	; (58f4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16c>)
    58ce:	88b1      	ldrh	r1, [r6, #4]
    58d0:	3052      	adds	r0, #82	; 0x52
    58d2:	8041      	strh	r1, [r0, #2]
    58d4:	8821      	ldrh	r1, [r4, #0]
    58d6:	8001      	strh	r1, [r0, #0]
    58d8:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    58dc:	7101      	strb	r1, [r0, #4]
    58de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    58e2:	f240 11b1 	movw	r1, #433	; 0x1b1
    58e6:	2027      	movs	r0, #39	; 0x27
    58e8:	f7fe fffa 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    58ec:	200000c0 	.word	0x200000c0
    58f0:	00006170 	.word	0x00006170
    58f4:	20000a88 	.word	0x20000a88
    58f8:	40001550 	.word	0x40001550

000058fc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    58fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5900:	4605      	mov	r5, r0
    5902:	f000 f8a9 	bl	5a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5906:	4e33      	ldr	r6, [pc, #204]	; (59d4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    5908:	4604      	mov	r4, r0
    590a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    590c:	7847      	ldrb	r7, [r0, #1]
    590e:	b10d      	cbz	r5, 5914 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    5910:	2d01      	cmp	r5, #1
    5912:	d103      	bne.n	591c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    5914:	6b71      	ldr	r1, [r6, #52]	; 0x34
    5916:	f006 ff49 	bl	c7ac <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    591a:	7070      	strb	r0, [r6, #1]
    591c:	7870      	ldrb	r0, [r6, #1]
    591e:	f04f 0800 	mov.w	r8, #0
    5922:	f04f 0901 	mov.w	r9, #1
    5926:	b150      	cbz	r0, 593e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    5928:	2801      	cmp	r0, #1
    592a:	d01a      	beq.n	5962 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    592c:	2802      	cmp	r0, #2
    592e:	d034      	beq.n	599a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    5930:	2803      	cmp	r0, #3
    5932:	d048      	beq.n	59c6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    5934:	f240 31f1 	movw	r1, #1009	; 0x3f1
    5938:	2027      	movs	r0, #39	; 0x27
    593a:	f7fe ffd1 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    593e:	2d01      	cmp	r5, #1
    5940:	d032      	beq.n	59a8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5942:	f000 f8e7 	bl	5b14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    5946:	4639      	mov	r1, r7
    5948:	2201      	movs	r2, #1
    594a:	6b70      	ldr	r0, [r6, #52]	; 0x34
    594c:	f007 fb52 	bl	cff4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5950:	e028      	b.n	59a4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    5952:	bf00      	nop
    5954:	f884 8008 	strb.w	r8, [r4, #8]
    5958:	e031      	b.n	59be <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    595a:	bf00      	nop
    595c:	f884 9008 	strb.w	r9, [r4, #8]
    5960:	e02d      	b.n	59be <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5962:	2d01      	cmp	r5, #1
    5964:	d008      	beq.n	5978 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    5966:	f000 f8d5 	bl	5b14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    596a:	4639      	mov	r1, r7
    596c:	2200      	movs	r2, #0
    596e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5970:	f007 fb40 	bl	cff4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5974:	2d02      	cmp	r5, #2
    5976:	d00b      	beq.n	5990 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5978:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    597c:	1c40      	adds	r0, r0, #1
    597e:	f141 0100 	adc.w	r1, r1, #0
    5982:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    5986:	7a20      	ldrb	r0, [r4, #8]
    5988:	2801      	cmp	r0, #1
    598a:	d003      	beq.n	5994 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    598c:	f884 9008 	strb.w	r9, [r4, #8]
    5990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5994:	f884 8008 	strb.w	r8, [r4, #8]
    5998:	e7fa      	b.n	5990 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    599a:	2d01      	cmp	r5, #1
    599c:	d004      	beq.n	59a8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    599e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    59a0:	f007 fd2e 	bl	d400 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    59a4:	2d02      	cmp	r5, #2
    59a6:	d0f3      	beq.n	5990 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    59a8:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    59ac:	1c40      	adds	r0, r0, #1
    59ae:	f141 0100 	adc.w	r1, r1, #0
    59b2:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    59b6:	7a20      	ldrb	r0, [r4, #8]
    59b8:	2801      	cmp	r0, #1
    59ba:	d1cf      	bne.n	595c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    59bc:	e7ca      	b.n	5954 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    59be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    59c2:	f004 bee9 	b.w	a798 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    59c6:	2d01      	cmp	r5, #1
    59c8:	d0e2      	beq.n	5990 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    59ca:	6b70      	ldr	r0, [r6, #52]	; 0x34
    59cc:	f007 fd18 	bl	d400 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    59d0:	e7f5      	b.n	59be <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    59d2:	0000      	.short	0x0000
    59d4:	200000c0 	.word	0x200000c0

000059d8 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    59d8:	4802      	ldr	r0, [pc, #8]	; (59e4 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    59da:	89c0      	ldrh	r0, [r0, #14]
    59dc:	f3c0 2080 	ubfx	r0, r0, #10, #1
    59e0:	4770      	bx	lr
    59e2:	0000      	.short	0x0000
    59e4:	200000c0 	.word	0x200000c0

000059e8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    59e8:	4804      	ldr	r0, [pc, #16]	; (59fc <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    59ea:	7800      	ldrb	r0, [r0, #0]
    59ec:	b108      	cbz	r0, 59f2 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    59ee:	200c      	movs	r0, #12
    59f0:	4770      	bx	lr
    59f2:	4903      	ldr	r1, [pc, #12]	; (5a00 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    59f4:	2000      	movs	r0, #0
    59f6:	7448      	strb	r0, [r1, #17]
    59f8:	4770      	bx	lr
    59fa:	0000      	.short	0x0000
    59fc:	200000c0 	.word	0x200000c0
    5a00:	20000ada 	.word	0x20000ada

00005a04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    5a04:	480c      	ldr	r0, [pc, #48]	; (5a38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    5a06:	b510      	push	{r4, lr}
    5a08:	7801      	ldrb	r1, [r0, #0]
    5a0a:	b149      	cbz	r1, 5a20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    5a0c:	f100 0138 	add.w	r1, r0, #56	; 0x38
    5a10:	7800      	ldrb	r0, [r0, #0]
    5a12:	2802      	cmp	r0, #2
    5a14:	d008      	beq.n	5a28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    5a16:	f240 11cd 	movw	r1, #461	; 0x1cd
    5a1a:	2027      	movs	r0, #39	; 0x27
    5a1c:	f7fe ff60 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5a24:	f000 b9a6 	b.w	5d74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    5a28:	6848      	ldr	r0, [r1, #4]
    5a2a:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    5a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5a32:	f005 bd9f 	b.w	b574 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    5a36:	0000      	.short	0x0000
    5a38:	200000c0 	.word	0x200000c0
    5a3c:	4a02      	ldr	r2, [pc, #8]	; (5a48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    5a3e:	8993      	ldrh	r3, [r2, #12]
    5a40:	4303      	orrs	r3, r0
    5a42:	8193      	strh	r3, [r2, #12]
    5a44:	6952      	ldr	r2, [r2, #20]
    5a46:	4710      	bx	r2
    5a48:	200000c0 	.word	0x200000c0
    5a4c:	4801      	ldr	r0, [pc, #4]	; (5a54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    5a4e:	6840      	ldr	r0, [r0, #4]
    5a50:	4770      	bx	lr
    5a52:	0000      	.short	0x0000
    5a54:	200000f8 	.word	0x200000f8
    5a58:	4801      	ldr	r0, [pc, #4]	; (5a60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    5a5a:	6840      	ldr	r0, [r0, #4]
    5a5c:	3068      	adds	r0, #104	; 0x68
    5a5e:	4770      	bx	lr
    5a60:	200000f8 	.word	0x200000f8
    5a64:	4a01      	ldr	r2, [pc, #4]	; (5a6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    5a66:	2100      	movs	r1, #0
    5a68:	6952      	ldr	r2, [r2, #20]
    5a6a:	4710      	bx	r2
    5a6c:	200000c0 	.word	0x200000c0
    5a70:	b570      	push	{r4, r5, r6, lr}
    5a72:	f7ff fff1 	bl	5a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5a76:	4604      	mov	r4, r0
    5a78:	f7ff ffe8 	bl	5a4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5a7c:	4605      	mov	r5, r0
    5a7e:	4621      	mov	r1, r4
    5a80:	f007 ff87 	bl	d992 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5a84:	7fa9      	ldrb	r1, [r5, #30]
    5a86:	2901      	cmp	r1, #1
    5a88:	d114      	bne.n	5ab4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>
    5a8a:	2800      	cmp	r0, #0
    5a8c:	d012      	beq.n	5ab4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>
    5a8e:	480a      	ldr	r0, [pc, #40]	; (5ab8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    5a90:	6842      	ldr	r2, [r0, #4]
    5a92:	8828      	ldrh	r0, [r5, #0]
    5a94:	f8a2 01ee 	strh.w	r0, [r2, #494]	; 0x1ee
    5a98:	7a60      	ldrb	r0, [r4, #9]
    5a9a:	f882 01f0 	strb.w	r0, [r2, #496]	; 0x1f0
    5a9e:	7aa0      	ldrb	r0, [r4, #10]
    5aa0:	f882 01f1 	strb.w	r0, [r2, #497]	; 0x1f1
    5aa4:	f502 72f6 	add.w	r2, r2, #492	; 0x1ec
    5aa8:	2001      	movs	r0, #1
    5aaa:	7010      	strb	r0, [r2, #0]
    5aac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5ab0:	f004 be72 	b.w	a798 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5ab4:	bd70      	pop	{r4, r5, r6, pc}
    5ab6:	0000      	.short	0x0000
    5ab8:	200000f8 	.word	0x200000f8
    5abc:	b570      	push	{r4, r5, r6, lr}
    5abe:	4605      	mov	r5, r0
    5ac0:	2901      	cmp	r1, #1
    5ac2:	d818      	bhi.n	5af6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5ac4:	4c12      	ldr	r4, [pc, #72]	; (5b10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>)
    5ac6:	69a1      	ldr	r1, [r4, #24]
    5ac8:	4788      	blx	r1
    5aca:	b1a0      	cbz	r0, 5af6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5acc:	7960      	ldrb	r0, [r4, #5]
    5ace:	b990      	cbnz	r0, 5af6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5ad0:	b9e5      	cbnz	r5, 5b0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    5ad2:	f104 0010 	add.w	r0, r4, #16
    5ad6:	7801      	ldrb	r1, [r0, #0]
    5ad8:	06c8      	lsls	r0, r1, #27
    5ada:	d405      	bmi.n	5ae8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    5adc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5ade:	7800      	ldrb	r0, [r0, #0]
    5ae0:	06c0      	lsls	r0, r0, #27
    5ae2:	d401      	bmi.n	5ae8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    5ae4:	2001      	movs	r0, #1
    5ae6:	e000      	b.n	5aea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    5ae8:	2000      	movs	r0, #0
    5aea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5aec:	b92a      	cbnz	r2, 5afa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    5aee:	8962      	ldrh	r2, [r4, #10]
    5af0:	b11a      	cbz	r2, 5afa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    5af2:	06c9      	lsls	r1, r1, #27
    5af4:	d401      	bmi.n	5afa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    5af6:	2001      	movs	r0, #1
    5af8:	bd70      	pop	{r4, r5, r6, pc}
    5afa:	89a1      	ldrh	r1, [r4, #12]
    5afc:	078a      	lsls	r2, r1, #30
    5afe:	d503      	bpl.n	5b08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    5b00:	6a22      	ldr	r2, [r4, #32]
    5b02:	78d2      	ldrb	r2, [r2, #3]
    5b04:	2a02      	cmp	r2, #2
    5b06:	d001      	beq.n	5b0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    5b08:	4308      	orrs	r0, r1
    5b0a:	d1f4      	bne.n	5af6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5b0c:	2000      	movs	r0, #0
    5b0e:	bd70      	pop	{r4, r5, r6, pc}
    5b10:	200000c0 	.word	0x200000c0
    5b14:	b510      	push	{r4, lr}
    5b16:	4c08      	ldr	r4, [pc, #32]	; (5b38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>)
    5b18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5b1a:	b138      	cbz	r0, 5b2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    5b1c:	8962      	ldrh	r2, [r4, #10]
    5b1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5b20:	1cd2      	adds	r2, r2, #3
    5b22:	f006 fcf2 	bl	c50a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5b26:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5b28:	6260      	str	r0, [r4, #36]	; 0x24
    5b2a:	bd10      	pop	{r4, pc}
    5b2c:	f44f 6187 	mov.w	r1, #1080	; 0x438
    5b30:	2027      	movs	r0, #39	; 0x27
    5b32:	f7fe fed5 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b36:	0000      	.short	0x0000
    5b38:	200000c0 	.word	0x200000c0
    5b3c:	b510      	push	{r4, lr}
    5b3e:	f7ff ff85 	bl	5a4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5b42:	4604      	mov	r4, r0
    5b44:	f7ff ff88 	bl	5a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5b48:	4601      	mov	r1, r0
    5b4a:	7b42      	ldrb	r2, [r0, #13]
    5b4c:	4815      	ldr	r0, [pc, #84]	; (5ba4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a0>)
    5b4e:	2a24      	cmp	r2, #36	; 0x24
    5b50:	d00e      	beq.n	5b70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5b52:	7b89      	ldrb	r1, [r1, #14]
    5b54:	2924      	cmp	r1, #36	; 0x24
    5b56:	d00b      	beq.n	5b70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5b58:	2a1f      	cmp	r2, #31
    5b5a:	d00d      	beq.n	5b78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    5b5c:	2a20      	cmp	r2, #32
    5b5e:	d00b      	beq.n	5b78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    5b60:	2922      	cmp	r1, #34	; 0x22
    5b62:	d00f      	beq.n	5b84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    5b64:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    5b68:	2804      	cmp	r0, #4
    5b6a:	d100      	bne.n	5b6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16a>
    5b6c:	2008      	movs	r0, #8
    5b6e:	bd10      	pop	{r4, pc}
    5b70:	6840      	ldr	r0, [r0, #4]
    5b72:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    5b76:	e00e      	b.n	5b96 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x192>
    5b78:	2922      	cmp	r1, #34	; 0x22
    5b7a:	d003      	beq.n	5b84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    5b7c:	6840      	ldr	r0, [r0, #4]
    5b7e:	f890 01a8 	ldrb.w	r0, [r0, #424]	; 0x1a8
    5b82:	e005      	b.n	5b90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    5b84:	6841      	ldr	r1, [r0, #4]
    5b86:	f891 01a8 	ldrb.w	r0, [r1, #424]	; 0x1a8
    5b8a:	f891 105b 	ldrb.w	r1, [r1, #91]	; 0x5b
    5b8e:	4008      	ands	r0, r1
    5b90:	f007 fd78 	bl	d684 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5b94:	4601      	mov	r1, r0
    5b96:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    5b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5b9e:	f007 bd89 	b.w	d6b4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5ba2:	0000      	.short	0x0000
    5ba4:	200000f8 	.word	0x200000f8
    5ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5bac:	4688      	mov	r8, r1
    5bae:	4606      	mov	r6, r0
    5bb0:	f7ff ff52 	bl	5a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5bb4:	4c4a      	ldr	r4, [pc, #296]	; (5ce0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2dc>)
    5bb6:	2700      	movs	r7, #0
    5bb8:	4605      	mov	r5, r0
    5bba:	f88d 7000 	strb.w	r7, [sp]
    5bbe:	7820      	ldrb	r0, [r4, #0]
    5bc0:	2802      	cmp	r0, #2
    5bc2:	d004      	beq.n	5bce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ca>
    5bc4:	f240 4189 	movw	r1, #1161	; 0x489
    5bc8:	2027      	movs	r0, #39	; 0x27
    5bca:	f7fe fe89 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bce:	7ba0      	ldrb	r0, [r4, #14]
    5bd0:	0640      	lsls	r0, r0, #25
    5bd2:	d406      	bmi.n	5be2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1de>
    5bd4:	2040      	movs	r0, #64	; 0x40
    5bd6:	f7ff ff45 	bl	5a64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5bda:	89e0      	ldrh	r0, [r4, #14]
    5bdc:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5be0:	81e0      	strh	r0, [r4, #14]
    5be2:	7ce8      	ldrb	r0, [r5, #19]
    5be4:	b3c6      	cbz	r6, 5c58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x254>
    5be6:	f005 fb15 	bl	b214 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    5bea:	f005 faf9 	bl	b1e0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    5bee:	b968      	cbnz	r0, 5c0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5bf0:	7ce8      	ldrb	r0, [r5, #19]
    5bf2:	b158      	cbz	r0, 5c0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5bf4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5bf6:	7841      	ldrb	r1, [r0, #1]
    5bf8:	b141      	cbz	r1, 5c0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5bfa:	7800      	ldrb	r0, [r0, #0]
    5bfc:	7a29      	ldrb	r1, [r5, #8]
    5bfe:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5c02:	4288      	cmp	r0, r1
    5c04:	d102      	bne.n	5c0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5c06:	2001      	movs	r0, #1
    5c08:	70a0      	strb	r0, [r4, #2]
    5c0a:	e04a      	b.n	5ca2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29e>
    5c0c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5c0e:	7841      	ldrb	r1, [r0, #1]
    5c10:	8161      	strh	r1, [r4, #10]
    5c12:	b121      	cbz	r1, 5c1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21a>
    5c14:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5c16:	f007 fbc0 	bl	d39a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    5c1a:	62a0      	str	r0, [r4, #40]	; 0x28
    5c1c:	e000      	b.n	5c20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21c>
    5c1e:	62a7      	str	r7, [r4, #40]	; 0x28
    5c20:	89e0      	ldrh	r0, [r4, #14]
    5c22:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    5c26:	81e0      	strh	r0, [r4, #14]
    5c28:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5c2a:	79e9      	ldrb	r1, [r5, #7]
    5c2c:	7800      	ldrb	r0, [r0, #0]
    5c2e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    5c32:	4288      	cmp	r0, r1
    5c34:	d005      	beq.n	5c42 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23e>
    5c36:	f000 f937 	bl	5ea8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a4>
    5c3a:	89e0      	ldrh	r0, [r4, #14]
    5c3c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    5c40:	81e0      	strh	r0, [r4, #14]
    5c42:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5c44:	7a29      	ldrb	r1, [r5, #8]
    5c46:	7800      	ldrb	r0, [r0, #0]
    5c48:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5c4c:	4288      	cmp	r0, r1
    5c4e:	d10e      	bne.n	5c6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    5c50:	4668      	mov	r0, sp
    5c52:	f000 f8e5 	bl	5e20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41c>
    5c56:	e00a      	b.n	5c6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    5c58:	e7ff      	b.n	5c5a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x256>
    5c5a:	b108      	cbz	r0, 5c60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25c>
    5c5c:	f005 fad4 	bl	b208 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5c60:	78e0      	ldrb	r0, [r4, #3]
    5c62:	1c40      	adds	r0, r0, #1
    5c64:	70e0      	strb	r0, [r4, #3]
    5c66:	89e0      	ldrh	r0, [r4, #14]
    5c68:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5c6c:	81e0      	strh	r0, [r4, #14]
    5c6e:	4d1d      	ldr	r5, [pc, #116]	; (5ce4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>)
    5c70:	f1b8 0f00 	cmp.w	r8, #0
    5c74:	d104      	bne.n	5c80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27c>
    5c76:	78e1      	ldrb	r1, [r4, #3]
    5c78:	2001      	movs	r0, #1
    5c7a:	f7ff ff1f 	bl	5abc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    5c7e:	b1a0      	cbz	r0, 5caa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a6>
    5c80:	f89d 0000 	ldrb.w	r0, [sp]
    5c84:	b110      	cbz	r0, 5c8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x288>
    5c86:	2000      	movs	r0, #0
    5c88:	f7ff fe38 	bl	58fc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5c8c:	b136      	cbz	r6, 5c9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x298>
    5c8e:	70e7      	strb	r7, [r4, #3]
    5c90:	7968      	ldrb	r0, [r5, #5]
    5c92:	1c40      	adds	r0, r0, #1
    5c94:	7168      	strb	r0, [r5, #5]
    5c96:	f7ff feeb 	bl	5a70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5c9a:	e002      	b.n	5ca2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29e>
    5c9c:	79a8      	ldrb	r0, [r5, #6]
    5c9e:	1c40      	adds	r0, r0, #1
    5ca0:	71a8      	strb	r0, [r5, #6]
    5ca2:	f000 f867 	bl	5d74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    5ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5caa:	f89d 0000 	ldrb.w	r0, [sp]
    5cae:	b110      	cbz	r0, 5cb6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b2>
    5cb0:	2001      	movs	r0, #1
    5cb2:	f7ff fe23 	bl	58fc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5cb6:	2000      	movs	r0, #0
    5cb8:	f000 f98e 	bl	5fd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d4>
    5cbc:	f89d 0000 	ldrb.w	r0, [sp]
    5cc0:	b110      	cbz	r0, 5cc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c4>
    5cc2:	2002      	movs	r0, #2
    5cc4:	f7ff fe1a 	bl	58fc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5cc8:	b136      	cbz	r6, 5cd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    5cca:	70e7      	strb	r7, [r4, #3]
    5ccc:	7968      	ldrb	r0, [r5, #5]
    5cce:	1c40      	adds	r0, r0, #1
    5cd0:	7168      	strb	r0, [r5, #5]
    5cd2:	f7ff fecd 	bl	5a70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5cd6:	e7e6      	b.n	5ca6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a2>
    5cd8:	79a8      	ldrb	r0, [r5, #6]
    5cda:	1c40      	adds	r0, r0, #1
    5cdc:	71a8      	strb	r0, [r5, #6]
    5cde:	e7e2      	b.n	5ca6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a2>
    5ce0:	200000c0 	.word	0x200000c0
    5ce4:	20000ada 	.word	0x20000ada
    5ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5cec:	460e      	mov	r6, r1
    5cee:	4680      	mov	r8, r0
    5cf0:	f7ff feb2 	bl	5a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5cf4:	4d1e      	ldr	r5, [pc, #120]	; (5d70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36c>)
    5cf6:	4604      	mov	r4, r0
    5cf8:	7828      	ldrb	r0, [r5, #0]
    5cfa:	2801      	cmp	r0, #1
    5cfc:	d004      	beq.n	5d08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x304>
    5cfe:	f240 4147 	movw	r1, #1095	; 0x447
    5d02:	2027      	movs	r0, #39	; 0x27
    5d04:	f7fe fdec 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d08:	7860      	ldrb	r0, [r4, #1]
    5d0a:	2701      	movs	r7, #1
    5d0c:	b130      	cbz	r0, 5d1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x318>
    5d0e:	2000      	movs	r0, #0
    5d10:	7060      	strb	r0, [r4, #1]
    5d12:	4601      	mov	r1, r0
    5d14:	2004      	movs	r0, #4
    5d16:	f7ff fe91 	bl	5a3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5d1a:	70e7      	strb	r7, [r4, #3]
    5d1c:	6a29      	ldr	r1, [r5, #32]
    5d1e:	7808      	ldrb	r0, [r1, #0]
    5d20:	43c0      	mvns	r0, r0
    5d22:	0780      	lsls	r0, r0, #30
    5d24:	d109      	bne.n	5d3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x336>
    5d26:	79a0      	ldrb	r0, [r4, #6]
    5d28:	b9d0      	cbnz	r0, 5d60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35c>
    5d2a:	2002      	movs	r0, #2
    5d2c:	f7ff fe86 	bl	5a3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5d30:	6a28      	ldr	r0, [r5, #32]
    5d32:	7800      	ldrb	r0, [r0, #0]
    5d34:	43c0      	mvns	r0, r0
    5d36:	0780      	lsls	r0, r0, #30
    5d38:	d012      	beq.n	5d60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35c>
    5d3a:	6a28      	ldr	r0, [r5, #32]
    5d3c:	7840      	ldrb	r0, [r0, #1]
    5d3e:	b110      	cbz	r0, 5d46 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x342>
    5d40:	2002      	movs	r0, #2
    5d42:	71a0      	strb	r0, [r4, #6]
    5d44:	e000      	b.n	5d48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x344>
    5d46:	71a7      	strb	r7, [r4, #6]
    5d48:	ea36 0608 	bics.w	r6, r6, r8
    5d4c:	d004      	beq.n	5d58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
    5d4e:	2100      	movs	r1, #0
    5d50:	4608      	mov	r0, r1
    5d52:	f7ff feb3 	bl	5abc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    5d56:	b128      	cbz	r0, 5d64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>
    5d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5d5c:	f000 b80a 	b.w	5d74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    5d60:	2003      	movs	r0, #3
    5d62:	e7ee      	b.n	5d42 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x33e>
    5d64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5d68:	2000      	movs	r0, #0
    5d6a:	f000 b8eb 	b.w	5f44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    5d6e:	0000      	.short	0x0000
    5d70:	200000c0 	.word	0x200000c0
    5d74:	b510      	push	{r4, lr}
    5d76:	f005 fae5 	bl	b344 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    5d7a:	f005 f9d3 	bl	b124 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5d7e:	4c0d      	ldr	r4, [pc, #52]	; (5db4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>)
    5d80:	89e0      	ldrh	r0, [r4, #14]
    5d82:	f7ff fe6f 	bl	5a64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5d86:	69e2      	ldr	r2, [r4, #28]
    5d88:	7961      	ldrb	r1, [r4, #5]
    5d8a:	78a0      	ldrb	r0, [r4, #2]
    5d8c:	4790      	blx	r2
    5d8e:	480a      	ldr	r0, [pc, #40]	; (5db8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    5d90:	7c40      	ldrb	r0, [r0, #17]
    5d92:	b158      	cbz	r0, 5dac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a8>
    5d94:	4808      	ldr	r0, [pc, #32]	; (5db8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    5d96:	3852      	subs	r0, #82	; 0x52
    5d98:	f850 1f52 	ldr.w	r1, [r0, #82]!
    5d9c:	6081      	str	r1, [r0, #8]
    5d9e:	6841      	ldr	r1, [r0, #4]
    5da0:	60c1      	str	r1, [r0, #12]
    5da2:	4805      	ldr	r0, [pc, #20]	; (5db8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    5da4:	2101      	movs	r1, #1
    5da6:	7401      	strb	r1, [r0, #16]
    5da8:	f004 fcf6 	bl	a798 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5dac:	2000      	movs	r0, #0
    5dae:	7020      	strb	r0, [r4, #0]
    5db0:	bd10      	pop	{r4, pc}
    5db2:	0000      	.short	0x0000
    5db4:	200000c0 	.word	0x200000c0
    5db8:	20000ada 	.word	0x20000ada
    5dbc:	4808      	ldr	r0, [pc, #32]	; (5de0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3dc>)
    5dbe:	b510      	push	{r4, lr}
    5dc0:	7800      	ldrb	r0, [r0, #0]
    5dc2:	2802      	cmp	r0, #2
    5dc4:	d004      	beq.n	5dd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>
    5dc6:	f240 2101 	movw	r1, #513	; 0x201
    5dca:	2027      	movs	r0, #39	; 0x27
    5dcc:	f7fe fd88 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5dd0:	4904      	ldr	r1, [pc, #16]	; (5de4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e0>)
    5dd2:	2001      	movs	r0, #1
    5dd4:	71c8      	strb	r0, [r1, #7]
    5dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5dda:	f7ff bfcb 	b.w	5d74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    5dde:	0000      	.short	0x0000
    5de0:	200000c0 	.word	0x200000c0
    5de4:	20000ada 	.word	0x20000ada
    5de8:	b430      	push	{r4, r5}
    5dea:	4b0c      	ldr	r3, [pc, #48]	; (5e1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    5dec:	b942      	cbnz	r2, 5e00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>
    5dee:	79da      	ldrb	r2, [r3, #7]
    5df0:	2aff      	cmp	r2, #255	; 0xff
    5df2:	d105      	bne.n	5e00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>
    5df4:	f890 2063 	ldrb.w	r2, [r0, #99]	; 0x63
    5df8:	f890 4062 	ldrb.w	r4, [r0, #98]	; 0x62
    5dfc:	42a2      	cmp	r2, r4
    5dfe:	d00b      	beq.n	5e18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    5e00:	b131      	cbz	r1, 5e10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40c>
    5e02:	79da      	ldrb	r2, [r3, #7]
    5e04:	f890 1063 	ldrb.w	r1, [r0, #99]	; 0x63
    5e08:	bc30      	pop	{r4, r5}
    5e0a:	4610      	mov	r0, r2
    5e0c:	f005 be2e 	b.w	ba6c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    5e10:	22ff      	movs	r2, #255	; 0xff
    5e12:	f890 1062 	ldrb.w	r1, [r0, #98]	; 0x62
    5e16:	e7f7      	b.n	5e08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x404>
    5e18:	bc30      	pop	{r4, r5}
    5e1a:	4770      	bx	lr
    5e1c:	200000c0 	.word	0x200000c0
    5e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e24:	4607      	mov	r7, r0
    5e26:	f7ff fe17 	bl	5a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5e2a:	4604      	mov	r4, r0
    5e2c:	481d      	ldr	r0, [pc, #116]	; (5ea4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a0>)
    5e2e:	2600      	movs	r6, #0
    5e30:	2501      	movs	r5, #1
    5e32:	6a41      	ldr	r1, [r0, #36]	; 0x24
    5e34:	780a      	ldrb	r2, [r1, #0]
    5e36:	f002 0203 	and.w	r2, r2, #3
    5e3a:	2a01      	cmp	r2, #1
    5e3c:	d015      	beq.n	5e6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    5e3e:	2a02      	cmp	r2, #2
    5e40:	d013      	beq.n	5e6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    5e42:	2a03      	cmp	r2, #3
    5e44:	d003      	beq.n	5e4e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44a>
    5e46:	7941      	ldrb	r1, [r0, #5]
    5e48:	f041 0104 	orr.w	r1, r1, #4
    5e4c:	e024      	b.n	5e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x494>
    5e4e:	7065      	strb	r5, [r4, #1]
    5e50:	89c2      	ldrh	r2, [r0, #14]
    5e52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    5e56:	81c2      	strh	r2, [r0, #14]
    5e58:	2001      	movs	r0, #1
    5e5a:	f7ff fdef 	bl	5a3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5e5e:	e01d      	b.n	5e9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    5e60:	7226      	strb	r6, [r4, #8]
    5e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e66:	7225      	strb	r5, [r4, #8]
    5e68:	e7fb      	b.n	5e62 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45e>
    5e6a:	7849      	ldrb	r1, [r1, #1]
    5e6c:	b1b1      	cbz	r1, 5e9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    5e6e:	89c2      	ldrh	r2, [r0, #14]
    5e70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    5e74:	81c2      	strh	r2, [r0, #14]
    5e76:	6a82      	ldr	r2, [r0, #40]	; 0x28
    5e78:	2a00      	cmp	r2, #0
    5e7a:	d0f2      	beq.n	5e62 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45e>
    5e7c:	29fb      	cmp	r1, #251	; 0xfb
    5e7e:	d808      	bhi.n	5e92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48e>
    5e80:	7980      	ldrb	r0, [r0, #6]
    5e82:	b120      	cbz	r0, 5e8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48a>
    5e84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5e88:	2020      	movs	r0, #32
    5e8a:	f7ff bdeb 	b.w	5a64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5e8e:	703d      	strb	r5, [r7, #0]
    5e90:	e7e7      	b.n	5e62 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45e>
    5e92:	7941      	ldrb	r1, [r0, #5]
    5e94:	f041 0110 	orr.w	r1, r1, #16
    5e98:	7141      	strb	r1, [r0, #5]
    5e9a:	e7e2      	b.n	5e62 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45e>
    5e9c:	7a20      	ldrb	r0, [r4, #8]
    5e9e:	2801      	cmp	r0, #1
    5ea0:	d1e1      	bne.n	5e66 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x462>
    5ea2:	e7dd      	b.n	5e60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    5ea4:	200000c0 	.word	0x200000c0
    5ea8:	b570      	push	{r4, r5, r6, lr}
    5eaa:	f7ff fdd5 	bl	5a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5eae:	4604      	mov	r4, r0
    5eb0:	7980      	ldrb	r0, [r0, #6]
    5eb2:	2800      	cmp	r0, #0
    5eb4:	d02e      	beq.n	5f14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x510>
    5eb6:	2802      	cmp	r0, #2
    5eb8:	d10d      	bne.n	5ed6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d2>
    5eba:	481c      	ldr	r0, [pc, #112]	; (5f2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x528>)
    5ebc:	6b00      	ldr	r0, [r0, #48]	; 0x30
    5ebe:	f007 f872 	bl	cfa6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    5ec2:	b340      	cbz	r0, 5f16 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x512>
    5ec4:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    5ec8:	1c40      	adds	r0, r0, #1
    5eca:	f141 0100 	adc.w	r1, r1, #0
    5ece:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    5ed2:	f004 fc61 	bl	a798 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5ed6:	2500      	movs	r5, #0
    5ed8:	71a5      	strb	r5, [r4, #6]
    5eda:	78e0      	ldrb	r0, [r4, #3]
    5edc:	b120      	cbz	r0, 5ee8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e4>
    5ede:	70e5      	strb	r5, [r4, #3]
    5ee0:	2100      	movs	r1, #0
    5ee2:	2010      	movs	r0, #16
    5ee4:	f7ff fdaa 	bl	5a3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5ee8:	78a0      	ldrb	r0, [r4, #2]
    5eea:	b170      	cbz	r0, 5f0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x506>
    5eec:	70a5      	strb	r5, [r4, #2]
    5eee:	f7ff fb43 	bl	5578 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    5ef2:	b198      	cbz	r0, 5f1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x518>
    5ef4:	2100      	movs	r1, #0
    5ef6:	2008      	movs	r0, #8
    5ef8:	f7ff fda0 	bl	5a3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5efc:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    5f00:	1c40      	adds	r0, r0, #1
    5f02:	f141 0100 	adc.w	r1, r1, #0
    5f06:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    5f0a:	79e0      	ldrb	r0, [r4, #7]
    5f0c:	2801      	cmp	r0, #1
    5f0e:	d00a      	beq.n	5f26 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x522>
    5f10:	2001      	movs	r0, #1
    5f12:	71e0      	strb	r0, [r4, #7]
    5f14:	bd70      	pop	{r4, r5, r6, pc}
    5f16:	f44f 7163 	mov.w	r1, #908	; 0x38c
    5f1a:	e001      	b.n	5f20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51c>
    5f1c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
    5f20:	2027      	movs	r0, #39	; 0x27
    5f22:	f7fe fcdd 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f26:	71e5      	strb	r5, [r4, #7]
    5f28:	bd70      	pop	{r4, r5, r6, pc}
    5f2a:	0000      	.short	0x0000
    5f2c:	200000c0 	.word	0x200000c0
    5f30:	4803      	ldr	r0, [pc, #12]	; (5f40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53c>)
    5f32:	7800      	ldrb	r0, [r0, #0]
    5f34:	2800      	cmp	r0, #0
    5f36:	d001      	beq.n	5f3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x538>
    5f38:	f7ff bf1c 	b.w	5d74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    5f3c:	4770      	bx	lr
    5f3e:	0000      	.short	0x0000
    5f40:	200000c0 	.word	0x200000c0
    5f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f48:	4681      	mov	r9, r0
    5f4a:	f7ff fd7f 	bl	5a4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5f4e:	4606      	mov	r6, r0
    5f50:	f7ff fd82 	bl	5a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5f54:	4c1d      	ldr	r4, [pc, #116]	; (5fcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c8>)
    5f56:	4605      	mov	r5, r0
    5f58:	464a      	mov	r2, r9
    5f5a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5f5c:	6260      	str	r0, [r4, #36]	; 0x24
    5f5e:	2101      	movs	r1, #1
    5f60:	4630      	mov	r0, r6
    5f62:	f7ff ff41 	bl	5de8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e4>
    5f66:	7ce8      	ldrb	r0, [r5, #19]
    5f68:	f04f 0800 	mov.w	r8, #0
    5f6c:	b1c0      	cbz	r0, 5fa0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x59c>
    5f6e:	7a67      	ldrb	r7, [r4, #9]
    5f70:	4817      	ldr	r0, [pc, #92]	; (5fd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5cc>)
    5f72:	f005 fc8b 	bl	b88c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5f76:	4817      	ldr	r0, [pc, #92]	; (5fd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d0>)
    5f78:	2101      	movs	r1, #1
    5f7a:	7601      	strb	r1, [r0, #24]
    5f7c:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    5f80:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5f84:	4a12      	ldr	r2, [pc, #72]	; (5fd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5cc>)
    5f86:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5f88:	f005 f8bc 	bl	b104 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    5f8c:	f896 0063 	ldrb.w	r0, [r6, #99]	; 0x63
    5f90:	f007 fb82 	bl	d698 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5f94:	4602      	mov	r2, r0
    5f96:	4639      	mov	r1, r7
    5f98:	2001      	movs	r0, #1
    5f9a:	f005 f8e1 	bl	b160 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    5f9e:	e004      	b.n	5faa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5a6>
    5fa0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5fa2:	f005 fc73 	bl	b88c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5fa6:	f005 f8bd 	bl	b124 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5faa:	f1b9 0f00 	cmp.w	r9, #0
    5fae:	d102      	bne.n	5fb6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b2>
    5fb0:	4640      	mov	r0, r8
    5fb2:	f005 fb03 	bl	b5bc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    5fb6:	2100      	movs	r1, #0
    5fb8:	f896 3062 	ldrb.w	r3, [r6, #98]	; 0x62
    5fbc:	2201      	movs	r2, #1
    5fbe:	4608      	mov	r0, r1
    5fc0:	f005 fcee 	bl	b9a0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5fc4:	2002      	movs	r0, #2
    5fc6:	7020      	strb	r0, [r4, #0]
    5fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5fcc:	200000c0 	.word	0x200000c0
    5fd0:	20000988 	.word	0x20000988
    5fd4:	20000a90 	.word	0x20000a90
    5fd8:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5fdc:	4604      	mov	r4, r0
    5fde:	f7ff fd3b 	bl	5a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5fe2:	4605      	mov	r5, r0
    5fe4:	f7ff fd32 	bl	5a4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5fe8:	4606      	mov	r6, r0
    5fea:	f8df 9178 	ldr.w	r9, [pc, #376]	; 6164 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    5fee:	4622      	mov	r2, r4
    5ff0:	2100      	movs	r1, #0
    5ff2:	f7ff fef9 	bl	5de8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e4>
    5ff6:	79a8      	ldrb	r0, [r5, #6]
    5ff8:	2701      	movs	r7, #1
    5ffa:	f04f 0800 	mov.w	r8, #0
    5ffe:	f1a9 0420 	sub.w	r4, r9, #32
    6002:	b140      	cbz	r0, 6016 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x612>
    6004:	2801      	cmp	r0, #1
    6006:	d01f      	beq.n	6048 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    6008:	2802      	cmp	r0, #2
    600a:	d030      	beq.n	606e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x66a>
    600c:	2803      	cmp	r0, #3
    600e:	d03c      	beq.n	608a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x686>
    6010:	f240 219e 	movw	r1, #670	; 0x29e
    6014:	e058      	b.n	60c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c4>
    6016:	7a20      	ldrb	r0, [r4, #8]
    6018:	2148      	movs	r1, #72	; 0x48
    601a:	f8ad 0004 	strh.w	r0, [sp, #4]
    601e:	5388      	strh	r0, [r1, r6]
    6020:	4648      	mov	r0, r9
    6022:	f7ff fad3 	bl	55cc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6026:	b128      	cbz	r0, 6034 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x630>
    6028:	2080      	movs	r0, #128	; 0x80
    602a:	6a21      	ldr	r1, [r4, #32]
    602c:	f7ff fd06 	bl	5a3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6030:	70af      	strb	r7, [r5, #2]
    6032:	e02e      	b.n	6092 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68e>
    6034:	466a      	mov	r2, sp
    6036:	a901      	add	r1, sp, #4
    6038:	6b20      	ldr	r0, [r4, #48]	; 0x30
    603a:	f007 fb45 	bl	d6c8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    603e:	6220      	str	r0, [r4, #32]
    6040:	b110      	cbz	r0, 6048 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    6042:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
    6046:	b111      	cbz	r1, 604e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x64a>
    6048:	4847      	ldr	r0, [pc, #284]	; (6168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    604a:	6220      	str	r0, [r4, #32]
    604c:	e021      	b.n	6092 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68e>
    604e:	f89d 1000 	ldrb.w	r1, [sp]
    6052:	b931      	cbnz	r1, 6062 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65e>
    6054:	f8a0 8000 	strh.w	r8, [r0]
    6058:	f880 8002 	strb.w	r8, [r0, #2]
    605c:	2101      	movs	r1, #1
    605e:	f007 fe92 	bl	dd86 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6062:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6066:	6a20      	ldr	r0, [r4, #32]
    6068:	f007 fe51 	bl	dd0e <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    606c:	e011      	b.n	6092 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68e>
    606e:	f8b6 0048 	ldrh.w	r0, [r6, #72]	; 0x48
    6072:	f8ad 0004 	strh.w	r0, [sp, #4]
    6076:	466a      	mov	r2, sp
    6078:	a901      	add	r1, sp, #4
    607a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    607c:	f007 fb24 	bl	d6c8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    6080:	6220      	str	r0, [r4, #32]
    6082:	b930      	cbnz	r0, 6092 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68e>
    6084:	f240 218f 	movw	r1, #655	; 0x28f
    6088:	e01e      	b.n	60c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c4>
    608a:	4648      	mov	r0, r9
    608c:	f7ff fa9e 	bl	55cc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6090:	b1c0      	cbz	r0, 60c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c0>
    6092:	6a20      	ldr	r0, [r4, #32]
    6094:	2308      	movs	r3, #8
    6096:	7801      	ldrb	r1, [r0, #0]
    6098:	f021 0108 	bic.w	r1, r1, #8
    609c:	7001      	strb	r1, [r0, #0]
    609e:	79ea      	ldrb	r2, [r5, #7]
    60a0:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    60a4:	4311      	orrs	r1, r2
    60a6:	f021 0104 	bic.w	r1, r1, #4
    60aa:	7001      	strb	r1, [r0, #0]
    60ac:	7a2a      	ldrb	r2, [r5, #8]
    60ae:	2304      	movs	r3, #4
    60b0:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    60b4:	4311      	orrs	r1, r2
    60b6:	f021 0110 	bic.w	r1, r1, #16
    60ba:	7001      	strb	r1, [r0, #0]
    60bc:	43c9      	mvns	r1, r1
    60be:	0789      	lsls	r1, r1, #30
    60c0:	d005      	beq.n	60ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ca>
    60c2:	e007      	b.n	60d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d0>
    60c4:	f44f 7126 	mov.w	r1, #664	; 0x298
    60c8:	2027      	movs	r0, #39	; 0x27
    60ca:	f7fe fc09 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    60ce:	78c0      	ldrb	r0, [r0, #3]
    60d0:	2802      	cmp	r0, #2
    60d2:	d00f      	beq.n	60f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    60d4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    60d6:	f007 f88b 	bl	d1f0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    60da:	b108      	cbz	r0, 60e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6dc>
    60dc:	2101      	movs	r1, #1
    60de:	e00a      	b.n	60f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f2>
    60e0:	6a20      	ldr	r0, [r4, #32]
    60e2:	7800      	ldrb	r0, [r0, #0]
    60e4:	43c0      	mvns	r0, r0
    60e6:	0780      	lsls	r0, r0, #30
    60e8:	d004      	beq.n	60f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    60ea:	f7ff fa2d 	bl	5548 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    60ee:	f080 0101 	eor.w	r1, r0, #1
    60f2:	e000      	b.n	60f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f2>
    60f4:	2100      	movs	r1, #0
    60f6:	6a20      	ldr	r0, [r4, #32]
    60f8:	7802      	ldrb	r2, [r0, #0]
    60fa:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    60fe:	7001      	strb	r1, [r0, #0]
    6100:	7ca9      	ldrb	r1, [r5, #18]
    6102:	b1d1      	cbz	r1, 613a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x736>
    6104:	7841      	ldrb	r1, [r0, #1]
    6106:	b1c1      	cbz	r1, 613a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x736>
    6108:	4818      	ldr	r0, [pc, #96]	; (616c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    610a:	f005 fbbf 	bl	b88c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    610e:	4816      	ldr	r0, [pc, #88]	; (6168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    6110:	3828      	subs	r0, #40	; 0x28
    6112:	f880 8018 	strb.w	r8, [r0, #24]
    6116:	e9d5 1214 	ldrd	r1, r2, [r5, #80]	; 0x50
    611a:	e9c0 1204 	strd	r1, r2, [r0, #16]
    611e:	4913      	ldr	r1, [pc, #76]	; (616c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    6120:	6a22      	ldr	r2, [r4, #32]
    6122:	f004 ffef 	bl	b104 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    6126:	f896 0062 	ldrb.w	r0, [r6, #98]	; 0x62
    612a:	f007 fab5 	bl	d698 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    612e:	4602      	mov	r2, r0
    6130:	21fb      	movs	r1, #251	; 0xfb
    6132:	2000      	movs	r0, #0
    6134:	f005 f814 	bl	b160 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    6138:	e003      	b.n	6142 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73e>
    613a:	f005 fba7 	bl	b88c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    613e:	f004 fff1 	bl	b124 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6142:	2201      	movs	r2, #1
    6144:	f896 3063 	ldrb.w	r3, [r6, #99]	; 0x63
    6148:	4611      	mov	r1, r2
    614a:	2000      	movs	r0, #0
    614c:	f005 fc28 	bl	b9a0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6150:	7127      	strb	r7, [r4, #4]
    6152:	6a20      	ldr	r0, [r4, #32]
    6154:	8801      	ldrh	r1, [r0, #0]
    6156:	8221      	strh	r1, [r4, #16]
    6158:	7880      	ldrb	r0, [r0, #2]
    615a:	74a0      	strb	r0, [r4, #18]
    615c:	7027      	strb	r7, [r4, #0]
    615e:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    6162:	0000      	.short	0x0000
    6164:	200000e0 	.word	0x200000e0
    6168:	20000ab8 	.word	0x20000ab8
    616c:	20000988 	.word	0x20000988
    6170:	00005dbd 	.word	0x00005dbd
    6174:	00005ba9 	.word	0x00005ba9
    6178:	00005ce9 	.word	0x00005ce9
    617c:	00005f31 	.word	0x00005f31

00006180 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    6180:	4800      	ldr	r0, [pc, #0]	; (6184 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    6182:	4770      	bx	lr
    6184:	200012a3 	.word	0x200012a3

00006188 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    6188:	4904      	ldr	r1, [pc, #16]	; (619c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    618a:	788a      	ldrb	r2, [r1, #2]
    618c:	4282      	cmp	r2, r0
    618e:	d903      	bls.n	6198 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    6190:	4408      	add	r0, r1
    6192:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    6196:	4770      	bx	lr
    6198:	2000      	movs	r0, #0
    619a:	4770      	bx	lr
    619c:	200010d0 	.word	0x200010d0

000061a0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    61a0:	4904      	ldr	r1, [pc, #16]	; (61b4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    61a2:	788a      	ldrb	r2, [r1, #2]
    61a4:	4282      	cmp	r2, r0
    61a6:	d903      	bls.n	61b0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    61a8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    61ac:	3083      	adds	r0, #131	; 0x83
    61ae:	4770      	bx	lr
    61b0:	2000      	movs	r0, #0
    61b2:	4770      	bx	lr
    61b4:	200010d0 	.word	0x200010d0

000061b8 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    61b8:	4a05      	ldr	r2, [pc, #20]	; (61d0 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    61ba:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    61be:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    61c2:	6802      	ldr	r2, [r0, #0]
    61c4:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    61c8:	8880      	ldrh	r0, [r0, #4]
    61ca:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    61ce:	4770      	bx	lr
    61d0:	200010d0 	.word	0x200010d0

000061d4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    61d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    61d8:	460e      	mov	r6, r1
    61da:	4607      	mov	r7, r0
    61dc:	4615      	mov	r5, r2
    61de:	2106      	movs	r1, #6
    61e0:	4630      	mov	r0, r6
    61e2:	f007 fc5f 	bl	daa4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    61e6:	4c0d      	ldr	r4, [pc, #52]	; (621c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    61e8:	b160      	cbz	r0, 6204 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    61ea:	2000      	movs	r0, #0
    61ec:	e004      	b.n	61f8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    61ee:	1821      	adds	r1, r4, r0
    61f0:	1c40      	adds	r0, r0, #1
    61f2:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    61f6:	b2c0      	uxtb	r0, r0
    61f8:	78a1      	ldrb	r1, [r4, #2]
    61fa:	4281      	cmp	r1, r0
    61fc:	d8f7      	bhi.n	61ee <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    61fe:	2001      	movs	r0, #1
    6200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6204:	4631      	mov	r1, r6
    6206:	4638      	mov	r0, r7
    6208:	f007 fa6d 	bl	d6e6 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    620c:	2808      	cmp	r0, #8
    620e:	d003      	beq.n	6218 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    6210:	4420      	add	r0, r4
    6212:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    6216:	e7f2      	b.n	61fe <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    6218:	2000      	movs	r0, #0
    621a:	e7f1      	b.n	6200 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    621c:	200010d0 	.word	0x200010d0

00006220 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    6220:	4904      	ldr	r1, [pc, #16]	; (6234 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    6222:	788a      	ldrb	r2, [r1, #2]
    6224:	4282      	cmp	r2, r0
    6226:	d903      	bls.n	6230 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    6228:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    622c:	1cc0      	adds	r0, r0, #3
    622e:	4770      	bx	lr
    6230:	2000      	movs	r0, #0
    6232:	4770      	bx	lr
    6234:	200010d0 	.word	0x200010d0

00006238 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    6238:	b510      	push	{r4, lr}
    623a:	f240 12d3 	movw	r2, #467	; 0x1d3
    623e:	2100      	movs	r1, #0
    6240:	4808      	ldr	r0, [pc, #32]	; (6264 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    6242:	f006 f9dc 	bl	c5fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6246:	2208      	movs	r2, #8
    6248:	21ff      	movs	r1, #255	; 0xff
    624a:	4807      	ldr	r0, [pc, #28]	; (6268 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    624c:	f006 f9d7 	bl	c5fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6250:	4805      	ldr	r0, [pc, #20]	; (6268 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    6252:	2100      	movs	r1, #0
    6254:	1f00      	subs	r0, r0, #4
    6256:	7001      	strb	r1, [r0, #0]
    6258:	7041      	strb	r1, [r0, #1]
    625a:	f44f 7161 	mov.w	r1, #900	; 0x384
    625e:	8041      	strh	r1, [r0, #2]
    6260:	bd10      	pop	{r4, pc}
    6262:	0000      	.short	0x0000
    6264:	200010d0 	.word	0x200010d0
    6268:	20000290 	.word	0x20000290

0000626c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    626c:	4901      	ldr	r1, [pc, #4]	; (6274 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    626e:	7008      	strb	r0, [r1, #0]
    6270:	4770      	bx	lr
    6272:	0000      	.short	0x0000
    6274:	2000028c 	.word	0x2000028c

00006278 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    6278:	4801      	ldr	r0, [pc, #4]	; (6280 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    627a:	7800      	ldrb	r0, [r0, #0]
    627c:	4770      	bx	lr
    627e:	0000      	.short	0x0000
    6280:	2000028c 	.word	0x2000028c

00006284 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    6284:	4b0b      	ldr	r3, [pc, #44]	; (62b4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    6286:	b510      	push	{r4, lr}
    6288:	789c      	ldrb	r4, [r3, #2]
    628a:	4284      	cmp	r4, r0
    628c:	d90f      	bls.n	62ae <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    628e:	4418      	add	r0, r3
    6290:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    6294:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6298:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    629c:	700b      	strb	r3, [r1, #0]
    629e:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    62a2:	6011      	str	r1, [r2, #0]
    62a4:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    62a8:	8090      	strh	r0, [r2, #4]
    62aa:	2001      	movs	r0, #1
    62ac:	bd10      	pop	{r4, pc}
    62ae:	2000      	movs	r0, #0
    62b0:	bd10      	pop	{r4, pc}
    62b2:	0000      	.short	0x0000
    62b4:	200010d0 	.word	0x200010d0

000062b8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    62b8:	4907      	ldr	r1, [pc, #28]	; (62d8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    62ba:	788a      	ldrb	r2, [r1, #2]
    62bc:	4282      	cmp	r2, r0
    62be:	d909      	bls.n	62d4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    62c0:	4408      	add	r0, r1
    62c2:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    62c6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    62ca:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    62ce:	f000 0001 	and.w	r0, r0, #1
    62d2:	4770      	bx	lr
    62d4:	2000      	movs	r0, #0
    62d6:	4770      	bx	lr
    62d8:	200010d0 	.word	0x200010d0

000062dc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    62dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    62e0:	4698      	mov	r8, r3
    62e2:	4691      	mov	r9, r2
    62e4:	460c      	mov	r4, r1
    62e6:	4605      	mov	r5, r0
    62e8:	f000 f938 	bl	655c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    62ec:	4606      	mov	r6, r0
    62ee:	2810      	cmp	r0, #16
    62f0:	d006      	beq.n	6300 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    62f2:	f000 f903 	bl	64fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    62f6:	2810      	cmp	r0, #16
    62f8:	d002      	beq.n	6300 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    62fa:	2012      	movs	r0, #18
    62fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6300:	4f18      	ldr	r7, [pc, #96]	; (6364 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    6302:	78b8      	ldrb	r0, [r7, #2]
    6304:	2808      	cmp	r0, #8
    6306:	d22a      	bcs.n	635e <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    6308:	2e10      	cmp	r6, #16
    630a:	d105      	bne.n	6318 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    630c:	2200      	movs	r2, #0
    630e:	4621      	mov	r1, r4
    6310:	4628      	mov	r0, r5
    6312:	f000 f907 	bl	6524 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd0>
    6316:	4606      	mov	r6, r0
    6318:	78bc      	ldrb	r4, [r7, #2]
    631a:	2210      	movs	r2, #16
    631c:	1c60      	adds	r0, r4, #1
    631e:	70b8      	strb	r0, [r7, #2]
    6320:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    6324:	1ce8      	adds	r0, r5, #3
    6326:	4649      	mov	r1, r9
    6328:	f007 fb26 	bl	d978 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    632c:	f105 0083 	add.w	r0, r5, #131	; 0x83
    6330:	2210      	movs	r2, #16
    6332:	4641      	mov	r1, r8
    6334:	f007 fb20 	bl	d978 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6338:	2110      	movs	r1, #16
    633a:	4640      	mov	r0, r8
    633c:	f007 fbb2 	bl	daa4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6340:	443c      	add	r4, r7
    6342:	2110      	movs	r1, #16
    6344:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    6348:	4648      	mov	r0, r9
    634a:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    634e:	f007 fba9 	bl	daa4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6352:	77e0      	strb	r0, [r4, #31]
    6354:	f804 6c29 	strb.w	r6, [r4, #-41]
    6358:	2000      	movs	r0, #0
    635a:	73e0      	strb	r0, [r4, #15]
    635c:	e7ce      	b.n	62fc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    635e:	2007      	movs	r0, #7
    6360:	e7cc      	b.n	62fc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    6362:	0000      	.short	0x0000
    6364:	200010d0 	.word	0x200010d0

00006368 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    6368:	4806      	ldr	r0, [pc, #24]	; (6384 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    636a:	b510      	push	{r4, lr}
    636c:	7880      	ldrb	r0, [r0, #2]
    636e:	1e40      	subs	r0, r0, #1
    6370:	b244      	sxtb	r4, r0
    6372:	e004      	b.n	637e <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    6374:	b2e0      	uxtb	r0, r4
    6376:	f000 f939 	bl	65ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    637a:	1e64      	subs	r4, r4, #1
    637c:	b264      	sxtb	r4, r4
    637e:	2c00      	cmp	r4, #0
    6380:	daf8      	bge.n	6374 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    6382:	bd10      	pop	{r4, pc}
    6384:	200010d0 	.word	0x200010d0

00006388 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    6388:	4801      	ldr	r0, [pc, #4]	; (6390 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    638a:	8840      	ldrh	r0, [r0, #2]
    638c:	4770      	bx	lr
    638e:	0000      	.short	0x0000
    6390:	2000028c 	.word	0x2000028c

00006394 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    6394:	b138      	cbz	r0, 63a6 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    6396:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    639a:	4288      	cmp	r0, r1
    639c:	d803      	bhi.n	63a6 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    639e:	4903      	ldr	r1, [pc, #12]	; (63ac <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    63a0:	8048      	strh	r0, [r1, #2]
    63a2:	2001      	movs	r0, #1
    63a4:	4770      	bx	lr
    63a6:	2000      	movs	r0, #0
    63a8:	4770      	bx	lr
    63aa:	0000      	.short	0x0000
    63ac:	2000028c 	.word	0x2000028c

000063b0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    63b0:	4905      	ldr	r1, [pc, #20]	; (63c8 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    63b2:	788a      	ldrb	r2, [r1, #2]
    63b4:	4282      	cmp	r2, r0
    63b6:	d903      	bls.n	63c0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    63b8:	4408      	add	r0, r1
    63ba:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    63be:	b108      	cbz	r0, 63c4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    63c0:	2000      	movs	r0, #0
    63c2:	4770      	bx	lr
    63c4:	2001      	movs	r0, #1
    63c6:	4770      	bx	lr
    63c8:	200010d0 	.word	0x200010d0

000063cc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    63cc:	b570      	push	{r4, r5, r6, lr}
    63ce:	460d      	mov	r5, r1
    63d0:	4606      	mov	r6, r0
    63d2:	f000 f8c3 	bl	655c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    63d6:	4c10      	ldr	r4, [pc, #64]	; (6418 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    63d8:	2810      	cmp	r0, #16
    63da:	d007      	beq.n	63ec <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    63dc:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    63e0:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    63e4:	07c9      	lsls	r1, r1, #31
    63e6:	d001      	beq.n	63ec <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    63e8:	2001      	movs	r0, #1
    63ea:	bd70      	pop	{r4, r5, r6, pc}
    63ec:	7861      	ldrb	r1, [r4, #1]
    63ee:	2908      	cmp	r1, #8
    63f0:	d210      	bcs.n	6414 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    63f2:	2810      	cmp	r0, #16
    63f4:	d008      	beq.n	6408 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    63f6:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    63fa:	2101      	movs	r1, #1
    63fc:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    6400:	7860      	ldrb	r0, [r4, #1]
    6402:	1c40      	adds	r0, r0, #1
    6404:	7060      	strb	r0, [r4, #1]
    6406:	e7ef      	b.n	63e8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    6408:	2201      	movs	r2, #1
    640a:	4629      	mov	r1, r5
    640c:	4630      	mov	r0, r6
    640e:	f000 f889 	bl	6524 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd0>
    6412:	e7f5      	b.n	6400 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    6414:	2000      	movs	r0, #0
    6416:	bd70      	pop	{r4, r5, r6, pc}
    6418:	200010d0 	.word	0x200010d0

0000641c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    641c:	b570      	push	{r4, r5, r6, lr}
    641e:	4d0b      	ldr	r5, [pc, #44]	; (644c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    6420:	7828      	ldrb	r0, [r5, #0]
    6422:	1e40      	subs	r0, r0, #1
    6424:	b244      	sxtb	r4, r0
    6426:	e00a      	b.n	643e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    6428:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    642c:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6430:	07c0      	lsls	r0, r0, #31
    6432:	d002      	beq.n	643a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    6434:	b2e0      	uxtb	r0, r4
    6436:	f000 f921 	bl	667c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x228>
    643a:	1e64      	subs	r4, r4, #1
    643c:	b264      	sxtb	r4, r4
    643e:	2c00      	cmp	r4, #0
    6440:	daf2      	bge.n	6428 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    6442:	4903      	ldr	r1, [pc, #12]	; (6450 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    6444:	2000      	movs	r0, #0
    6446:	7048      	strb	r0, [r1, #1]
    6448:	bd70      	pop	{r4, r5, r6, pc}
    644a:	0000      	.short	0x0000
    644c:	200010d0 	.word	0x200010d0
    6450:	2000028c 	.word	0x2000028c

00006454 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    6454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6458:	2400      	movs	r4, #0
    645a:	4625      	mov	r5, r4
    645c:	4e18      	ldr	r6, [pc, #96]	; (64c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    645e:	e029      	b.n	64b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    6460:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    6464:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    6468:	07c0      	lsls	r0, r0, #31
    646a:	d021      	beq.n	64b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    646c:	4628      	mov	r0, r5
    646e:	f000 f845 	bl	64fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    6472:	4603      	mov	r3, r0
    6474:	f7ff fed4 	bl	6220 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6478:	4601      	mov	r1, r0
    647a:	2000      	movs	r0, #0
    647c:	2b10      	cmp	r3, #16
    647e:	d009      	beq.n	6494 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6480:	18f2      	adds	r2, r6, r3
    6482:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    6486:	f1bc 0f01 	cmp.w	ip, #1
    648a:	d002      	beq.n	6492 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    648c:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    6490:	b102      	cbz	r2, 6494 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6492:	2001      	movs	r0, #1
    6494:	1e40      	subs	r0, r0, #1
    6496:	4201      	tst	r1, r0
    6498:	d10a      	bne.n	64b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    649a:	480a      	ldr	r0, [pc, #40]	; (64c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    649c:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    64a0:	5503      	strb	r3, [r0, r4]
    64a2:	4620      	mov	r0, r4
    64a4:	1c64      	adds	r4, r4, #1
    64a6:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    64aa:	b2e4      	uxtb	r4, r4
    64ac:	f005 fbea 	bl	bc84 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    64b0:	1c6d      	adds	r5, r5, #1
    64b2:	b2ed      	uxtb	r5, r5
    64b4:	7830      	ldrb	r0, [r6, #0]
    64b6:	42a8      	cmp	r0, r5
    64b8:	d8d2      	bhi.n	6460 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    64ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64be:	0000      	.short	0x0000
    64c0:	200010d0 	.word	0x200010d0
    64c4:	20000290 	.word	0x20000290
    64c8:	b570      	push	{r4, r5, r6, lr}
    64ca:	4b0a      	ldr	r3, [pc, #40]	; (64f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    64cc:	781b      	ldrb	r3, [r3, #0]
    64ce:	b173      	cbz	r3, 64ee <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9a>
    64d0:	4b09      	ldr	r3, [pc, #36]	; (64f8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>)
    64d2:	789c      	ldrb	r4, [r3, #2]
    64d4:	b15c      	cbz	r4, 64ee <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9a>
    64d6:	1845      	adds	r5, r0, r1
    64d8:	4621      	mov	r1, r4
    64da:	b10a      	cbz	r2, 64e0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    64dc:	1cd8      	adds	r0, r3, #3
    64de:	e001      	b.n	64e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    64e0:	4805      	ldr	r0, [pc, #20]	; (64f8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>)
    64e2:	3083      	adds	r0, #131	; 0x83
    64e4:	462a      	mov	r2, r5
    64e6:	f004 fd2f 	bl	af48 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    64ea:	2001      	movs	r0, #1
    64ec:	bd70      	pop	{r4, r5, r6, pc}
    64ee:	2000      	movs	r0, #0
    64f0:	bd70      	pop	{r4, r5, r6, pc}
    64f2:	0000      	.short	0x0000
    64f4:	2000028c 	.word	0x2000028c
    64f8:	200010d0 	.word	0x200010d0
    64fc:	4908      	ldr	r1, [pc, #32]	; (6520 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>)
    64fe:	b510      	push	{r4, lr}
    6500:	4603      	mov	r3, r0
    6502:	2000      	movs	r0, #0
    6504:	788a      	ldrb	r2, [r1, #2]
    6506:	e006      	b.n	6516 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc2>
    6508:	180c      	adds	r4, r1, r0
    650a:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    650e:	429c      	cmp	r4, r3
    6510:	d004      	beq.n	651c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>
    6512:	1c40      	adds	r0, r0, #1
    6514:	b2c0      	uxtb	r0, r0
    6516:	4282      	cmp	r2, r0
    6518:	d8f6      	bhi.n	6508 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb4>
    651a:	2010      	movs	r0, #16
    651c:	bd10      	pop	{r4, pc}
    651e:	0000      	.short	0x0000
    6520:	200010d0 	.word	0x200010d0
    6524:	b570      	push	{r4, r5, r6, lr}
    6526:	4b0c      	ldr	r3, [pc, #48]	; (6558 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>)
    6528:	4604      	mov	r4, r0
    652a:	7818      	ldrb	r0, [r3, #0]
    652c:	1c45      	adds	r5, r0, #1
    652e:	701d      	strb	r5, [r3, #0]
    6530:	2810      	cmp	r0, #16
    6532:	d303      	bcc.n	653c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe8>
    6534:	2146      	movs	r1, #70	; 0x46
    6536:	2028      	movs	r0, #40	; 0x28
    6538:	f7fe f9d2 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    653c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    6540:	680d      	ldr	r5, [r1, #0]
    6542:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    6546:	8889      	ldrh	r1, [r1, #4]
    6548:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    654c:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    6550:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    6554:	bd70      	pop	{r4, r5, r6, pc}
    6556:	0000      	.short	0x0000
    6558:	200010d0 	.word	0x200010d0
    655c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6560:	460f      	mov	r7, r1
    6562:	4606      	mov	r6, r0
    6564:	2400      	movs	r4, #0
    6566:	4d0d      	ldr	r5, [pc, #52]	; (659c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>)
    6568:	e00f      	b.n	658a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x136>
    656a:	bf00      	nop
    656c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    6570:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    6574:	42b1      	cmp	r1, r6
    6576:	d106      	bne.n	6586 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    6578:	2206      	movs	r2, #6
    657a:	4639      	mov	r1, r7
    657c:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    6580:	f005 ffb1 	bl	c4e6 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6584:	b138      	cbz	r0, 6596 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x142>
    6586:	1c64      	adds	r4, r4, #1
    6588:	b2e4      	uxtb	r4, r4
    658a:	7828      	ldrb	r0, [r5, #0]
    658c:	42a0      	cmp	r0, r4
    658e:	d8ed      	bhi.n	656c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x118>
    6590:	2010      	movs	r0, #16
    6592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6596:	4620      	mov	r0, r4
    6598:	e7fb      	b.n	6592 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    659a:	0000      	.short	0x0000
    659c:	200010d0 	.word	0x200010d0
    65a0:	b570      	push	{r4, r5, r6, lr}
    65a2:	4605      	mov	r5, r0
    65a4:	f7ff ffaa 	bl	64fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    65a8:	2810      	cmp	r0, #16
    65aa:	d11c      	bne.n	65e6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    65ac:	4c0e      	ldr	r4, [pc, #56]	; (65e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>)
    65ae:	7820      	ldrb	r0, [r4, #0]
    65b0:	1e40      	subs	r0, r0, #1
    65b2:	b2c0      	uxtb	r0, r0
    65b4:	7020      	strb	r0, [r4, #0]
    65b6:	42a8      	cmp	r0, r5
    65b8:	d015      	beq.n	65e6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    65ba:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    65be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    65c2:	f502 7080 	add.w	r0, r2, #256	; 0x100
    65c6:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    65ca:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    65ce:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    65d2:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    65d6:	7820      	ldrb	r0, [r4, #0]
    65d8:	f7ff ff90 	bl	64fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    65dc:	2810      	cmp	r0, #16
    65de:	d002      	beq.n	65e6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    65e0:	4420      	add	r0, r4
    65e2:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    65e6:	bd70      	pop	{r4, r5, r6, pc}
    65e8:	200010d0 	.word	0x200010d0
    65ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    65f0:	4c21      	ldr	r4, [pc, #132]	; (6678 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>)
    65f2:	4606      	mov	r6, r0
    65f4:	19a7      	adds	r7, r4, r6
    65f6:	78a0      	ldrb	r0, [r4, #2]
    65f8:	1e40      	subs	r0, r0, #1
    65fa:	b2c5      	uxtb	r5, r0
    65fc:	70a5      	strb	r5, [r4, #2]
    65fe:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    6602:	42ae      	cmp	r6, r5
    6604:	d02a      	beq.n	665c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x208>
    6606:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    660a:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    660e:	f10a 0103 	add.w	r1, sl, #3
    6612:	f109 0003 	add.w	r0, r9, #3
    6616:	2210      	movs	r2, #16
    6618:	f005 ff77 	bl	c50a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    661c:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    6620:	f109 0083 	add.w	r0, r9, #131	; 0x83
    6624:	2210      	movs	r2, #16
    6626:	f005 ff70 	bl	c50a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    662a:	1960      	adds	r0, r4, r5
    662c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    6630:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    6634:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    6638:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    663c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6640:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    6644:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    6648:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    664c:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    6650:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    6654:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6658:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    665c:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    6660:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6664:	07c0      	lsls	r0, r0, #31
    6666:	d104      	bne.n	6672 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21e>
    6668:	4640      	mov	r0, r8
    666a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    666e:	f7ff bf97 	b.w	65a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14c>
    6672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6676:	0000      	.short	0x0000
    6678:	200010d0 	.word	0x200010d0
    667c:	4905      	ldr	r1, [pc, #20]	; (6694 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x240>)
    667e:	784a      	ldrb	r2, [r1, #1]
    6680:	1e52      	subs	r2, r2, #1
    6682:	704a      	strb	r2, [r1, #1]
    6684:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    6688:	2200      	movs	r2, #0
    668a:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    668e:	f7ff bf87 	b.w	65a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14c>
    6692:	0000      	.short	0x0000
    6694:	200010d0 	.word	0x200010d0

00006698 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ>:
    6698:	b5f0      	push	{r4, r5, r6, r7, lr}
    669a:	f06f 021f 	mvn.w	r2, #31
    669e:	0c01      	lsrs	r1, r0, #16
    66a0:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    66a4:	251f      	movs	r5, #31
    66a6:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    66aa:	3854      	subs	r0, #84	; 0x54
    66ac:	d00d      	beq.n	66ca <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    66ae:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    66b2:	3855      	subs	r0, #85	; 0x55
    66b4:	d009      	beq.n	66ca <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    66b6:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    66ba:	38aa      	subs	r0, #170	; 0xaa
    66bc:	d005      	beq.n	66ca <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    66be:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    66c2:	38aa      	subs	r0, #170	; 0xaa
    66c4:	d001      	beq.n	66ca <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    66c6:	2001      	movs	r0, #1
    66c8:	e000      	b.n	66cc <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x34>
    66ca:	2000      	movs	r0, #0
    66cc:	2200      	movs	r2, #0
    66ce:	4613      	mov	r3, r2
    66d0:	ea4f 0402 	mov.w	r4, r2
    66d4:	ea82 0701 	eor.w	r7, r2, r1
    66d8:	43ff      	mvns	r7, r7
    66da:	431f      	orrs	r7, r3
    66dc:	1c7f      	adds	r7, r7, #1
    66de:	d00f      	beq.n	6700 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x68>
    66e0:	f006 0701 	and.w	r7, r6, #1
    66e4:	0852      	lsrs	r2, r2, #1
    66e6:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    66ea:	f005 0701 	and.w	r7, r5, #1
    66ee:	085b      	lsrs	r3, r3, #1
    66f0:	0876      	lsrs	r6, r6, #1
    66f2:	086d      	lsrs	r5, r5, #1
    66f4:	1c64      	adds	r4, r4, #1
    66f6:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    66fa:	2c16      	cmp	r4, #22
    66fc:	d3ea      	bcc.n	66d4 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x3c>
    66fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6700:	2000      	movs	r0, #0
    6702:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006704 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    6704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6708:	4604      	mov	r4, r0
    670a:	f100 0568 	add.w	r5, r0, #104	; 0x68
    670e:	f04f 0901 	mov.w	r9, #1
    6712:	b171      	cbz	r1, 6732 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    6714:	f104 077e 	add.w	r7, r4, #126	; 0x7e
    6718:	1e7e      	subs	r6, r7, #1
    671a:	2901      	cmp	r1, #1
    671c:	d021      	beq.n	6762 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5e>
    671e:	2902      	cmp	r1, #2
    6720:	d046      	beq.n	67b0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xac>
    6722:	2903      	cmp	r1, #3
    6724:	d11b      	bne.n	675e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    6726:	4639      	mov	r1, r7
    6728:	4630      	mov	r0, r6
    672a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    672e:	f007 ba40 	b.w	dbb2 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6732:	f44f 7204 	mov.w	r2, #528	; 0x210
    6736:	2100      	movs	r1, #0
    6738:	f005 ff61 	bl	c5fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    673c:	f004 fbf4 	bl	af28 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6740:	f644 112b 	movw	r1, #18731	; 0x492b
    6744:	4008      	ands	r0, r1
    6746:	f885 9015 	strb.w	r9, [r5, #21]
    674a:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
    674e:	0a00      	lsrs	r0, r0, #8
    6750:	f885 004d 	strb.w	r0, [r5, #77]	; 0x4d
    6754:	20fe      	movs	r0, #254	; 0xfe
    6756:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
    675a:	207f      	movs	r0, #127	; 0x7f
    675c:	7268      	strb	r0, [r5, #9]
    675e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6762:	f04f 0800 	mov.w	r8, #0
    6766:	f8a4 8106 	strh.w	r8, [r4, #262]	; 0x106
    676a:	f884 80fb 	strb.w	r8, [r4, #251]	; 0xfb
    676e:	6861      	ldr	r1, [r4, #4]
    6770:	4814      	ldr	r0, [pc, #80]	; (67c4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
    6772:	460a      	mov	r2, r1
    6774:	4408      	add	r0, r1
    6776:	fbb0 f0f1 	udiv	r0, r0, r1
    677a:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
    677e:	f640 30b8 	movw	r0, #3000	; 0xbb8
    6782:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    6786:	8963      	ldrh	r3, [r4, #10]
    6788:	4628      	mov	r0, r5
    678a:	f000 f81d 	bl	67c8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    678e:	4639      	mov	r1, r7
    6790:	4630      	mov	r0, r6
    6792:	f007 fa0e 	bl	dbb2 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6796:	f005 fe82 	bl	c49e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    679a:	b118      	cbz	r0, 67a4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa0>
    679c:	68e0      	ldr	r0, [r4, #12]
    679e:	f7ff ff7b 	bl	6698 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ>
    67a2:	b110      	cbz	r0, 67aa <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa6>
    67a4:	f884 816c 	strb.w	r8, [r4, #364]	; 0x16c
    67a8:	e7d9      	b.n	675e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    67aa:	f884 916c 	strb.w	r9, [r4, #364]	; 0x16c
    67ae:	e7d6      	b.n	675e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    67b0:	6841      	ldr	r1, [r0, #4]
    67b2:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
    67b6:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    67ba:	4628      	mov	r0, r5
    67bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    67c0:	f000 b802 	b.w	67c8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    67c4:	01c9c37f 	.word	0x01c9c37f
    67c8:	b530      	push	{r4, r5, lr}
    67ca:	2400      	movs	r4, #0
    67cc:	8684      	strh	r4, [r0, #52]	; 0x34
    67ce:	8f04      	ldrh	r4, [r0, #56]	; 0x38
    67d0:	4d13      	ldr	r5, [pc, #76]	; (6820 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x11c>)
    67d2:	434c      	muls	r4, r1
    67d4:	fbb4 f4f2 	udiv	r4, r4, r2
    67d8:	8704      	strh	r4, [r0, #56]	; 0x38
    67da:	f242 7410 	movw	r4, #10000	; 0x2710
    67de:	4363      	muls	r3, r4
    67e0:	fbb3 f3f2 	udiv	r3, r3, r2
    67e4:	1c5b      	adds	r3, r3, #1
    67e6:	b29b      	uxth	r3, r3
    67e8:	fb03 f402 	mul.w	r4, r3, r2
    67ec:	86c3      	strh	r3, [r0, #54]	; 0x36
    67ee:	42ac      	cmp	r4, r5
    67f0:	d901      	bls.n	67f6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
    67f2:	1e5b      	subs	r3, r3, #1
    67f4:	86c3      	strh	r3, [r0, #54]	; 0x36
    67f6:	4b0b      	ldr	r3, [pc, #44]	; (6824 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    67f8:	f240 2471 	movw	r4, #625	; 0x271
    67fc:	fbb3 f3f2 	udiv	r3, r3, r2
    6800:	1c5b      	adds	r3, r3, #1
    6802:	8783      	strh	r3, [r0, #60]	; 0x3c
    6804:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    6806:	4363      	muls	r3, r4
    6808:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    680c:	1e5b      	subs	r3, r3, #1
    680e:	fbb3 f3f2 	udiv	r3, r3, r2
    6812:	62c3      	str	r3, [r0, #44]	; 0x2c
    6814:	6a83      	ldr	r3, [r0, #40]	; 0x28
    6816:	434b      	muls	r3, r1
    6818:	fbb3 f1f2 	udiv	r1, r3, r2
    681c:	6281      	str	r1, [r0, #40]	; 0x28
    681e:	bd30      	pop	{r4, r5, pc}
    6820:	01e84800 	.word	0x01e84800
    6824:	02625a00 	.word	0x02625a00
    6828:	b570      	push	{r4, r5, r6, lr}
    682a:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    682e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    6832:	2401      	movs	r4, #1
    6834:	fb03 2101 	mla	r1, r3, r1, r2
    6838:	2225      	movs	r2, #37	; 0x25
    683a:	fbb1 f3f2 	udiv	r3, r1, r2
    683e:	fb02 1113 	mls	r1, r2, r3, r1
    6842:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    6846:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    684a:	f001 0307 	and.w	r3, r1, #7
    684e:	7d92      	ldrb	r2, [r2, #22]
    6850:	fa04 f303 	lsl.w	r3, r4, r3
    6854:	421a      	tst	r2, r3
    6856:	d003      	beq.n	6860 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x15c>
    6858:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    685c:	2000      	movs	r0, #0
    685e:	bd70      	pop	{r4, r5, r6, pc}
    6860:	f890 2020 	ldrb.w	r2, [r0, #32]
    6864:	fbb1 f3f2 	udiv	r3, r1, r2
    6868:	fb02 1113 	mls	r1, r2, r3, r1
    686c:	1c49      	adds	r1, r1, #1
    686e:	b2c9      	uxtb	r1, r1
    6870:	2300      	movs	r3, #0
    6872:	18c5      	adds	r5, r0, r3
    6874:	7eea      	ldrb	r2, [r5, #27]
    6876:	428a      	cmp	r2, r1
    6878:	d311      	bcc.n	689e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x19a>
    687a:	f895 5016 	ldrb.w	r5, [r5, #22]
    687e:	2200      	movs	r2, #0
    6880:	fa04 f602 	lsl.w	r6, r4, r2
    6884:	4235      	tst	r5, r6
    6886:	d001      	beq.n	688c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x188>
    6888:	1e49      	subs	r1, r1, #1
    688a:	b2c9      	uxtb	r1, r1
    688c:	b121      	cbz	r1, 6898 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x194>
    688e:	1c52      	adds	r2, r2, #1
    6890:	b2d2      	uxtb	r2, r2
    6892:	2a08      	cmp	r2, #8
    6894:	d3f4      	bcc.n	6880 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x17c>
    6896:	e004      	b.n	68a2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x19e>
    6898:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    689c:	e7dc      	b.n	6858 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x154>
    689e:	1a89      	subs	r1, r1, r2
    68a0:	b2c9      	uxtb	r1, r1
    68a2:	1c5b      	adds	r3, r3, #1
    68a4:	b2db      	uxtb	r3, r3
    68a6:	2b05      	cmp	r3, #5
    68a8:	d3e3      	bcc.n	6872 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x16e>
    68aa:	201f      	movs	r0, #31
    68ac:	bd70      	pop	{r4, r5, r6, pc}
	...

000068b0 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    68b0:	7841      	ldrb	r1, [r0, #1]
    68b2:	b141      	cbz	r1, 68c6 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    68b4:	78c0      	ldrb	r0, [r0, #3]
    68b6:	2819      	cmp	r0, #25
    68b8:	d203      	bcs.n	68c2 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    68ba:	4a04      	ldr	r2, [pc, #16]	; (68cc <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    68bc:	5c10      	ldrb	r0, [r2, r0]
    68be:	4288      	cmp	r0, r1
    68c0:	d101      	bne.n	68c6 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    68c2:	2001      	movs	r0, #1
    68c4:	4770      	bx	lr
    68c6:	2000      	movs	r0, #0
    68c8:	4770      	bx	lr
    68ca:	0000      	.short	0x0000
    68cc:	0000ff58 	.word	0x0000ff58

000068d0 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    68d0:	b50c      	push	{r2, r3, lr}
    68d2:	a20b      	add	r2, pc, #44	; (adr r2, 6900 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    68d4:	e9d2 1200 	ldrd	r1, r2, [r2]
    68d8:	e9cd 1200 	strd	r1, r2, [sp]
    68dc:	7901      	ldrb	r1, [r0, #4]
    68de:	7940      	ldrb	r0, [r0, #5]
    68e0:	f001 0207 	and.w	r2, r1, #7
    68e4:	4669      	mov	r1, sp
    68e6:	f81d 2002 	ldrb.w	r2, [sp, r2]
    68ea:	2a01      	cmp	r2, #1
    68ec:	d804      	bhi.n	68f8 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    68ee:	f000 0007 	and.w	r0, r0, #7
    68f2:	5c08      	ldrb	r0, [r1, r0]
    68f4:	2801      	cmp	r0, #1
    68f6:	d901      	bls.n	68fc <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    68f8:	2000      	movs	r0, #0
    68fa:	bd0c      	pop	{r2, r3, pc}
    68fc:	2001      	movs	r0, #1
    68fe:	bd0c      	pop	{r2, r3, pc}
    6900:	02010100 	.word	0x02010100
    6904:	03020201 	.word	0x03020201

00006908 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    6908:	b510      	push	{r4, lr}
    690a:	2201      	movs	r2, #1
    690c:	70c1      	strb	r1, [r0, #3]
    690e:	2919      	cmp	r1, #25
    6910:	d202      	bcs.n	6918 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    6912:	4a06      	ldr	r2, [pc, #24]	; (692c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    6914:	5c52      	ldrb	r2, [r2, r1]
    6916:	e006      	b.n	6926 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6918:	29ff      	cmp	r1, #255	; 0xff
    691a:	d004      	beq.n	6926 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    691c:	f44f 716e 	mov.w	r1, #952	; 0x3b8
    6920:	202a      	movs	r0, #42	; 0x2a
    6922:	f7fd ffdd 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6926:	7042      	strb	r2, [r0, #1]
    6928:	bd10      	pop	{r4, pc}
    692a:	0000      	.short	0x0000
    692c:	0000ff58 	.word	0x0000ff58

00006930 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    6930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6934:	ea5f 0900 	movs.w	r9, r0
    6938:	d006      	beq.n	6948 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x18>
    693a:	4d21      	ldr	r5, [pc, #132]	; (69c0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x90>)
    693c:	f105 0010 	add.w	r0, r5, #16
    6940:	7b69      	ldrb	r1, [r5, #13]
    6942:	4682      	mov	sl, r0
    6944:	b119      	cbz	r1, 694e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x1e>
    6946:	e00b      	b.n	6960 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    6948:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    694c:	e005      	b.n	695a <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2a>
    694e:	2100      	movs	r1, #0
    6950:	f007 fb18 	bl	df84 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    6954:	b120      	cbz	r0, 6960 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    6956:	f240 31d3 	movw	r1, #979	; 0x3d3
    695a:	202b      	movs	r0, #43	; 0x2b
    695c:	f7fd ffc0 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6960:	8a2e      	ldrh	r6, [r5, #16]
    6962:	2000      	movs	r0, #0
    6964:	f7fe f9c2 	bl	4cec <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6968:	4f16      	ldr	r7, [pc, #88]	; (69c4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x94>)
    696a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 69c8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x98>
    696e:	4604      	mov	r4, r0
    6970:	6838      	ldr	r0, [r7, #0]
    6972:	b158      	cbz	r0, 698c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    6974:	8a28      	ldrh	r0, [r5, #16]
    6976:	42a0      	cmp	r0, r4
    6978:	d308      	bcc.n	698c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    697a:	1b00      	subs	r0, r0, r4
    697c:	b2c0      	uxtb	r0, r0
    697e:	2101      	movs	r1, #1
    6980:	f006 fdbb 	bl	d4fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6984:	b148      	cbz	r0, 699a <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    6986:	4649      	mov	r1, r9
    6988:	683a      	ldr	r2, [r7, #0]
    698a:	e004      	b.n	6996 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x66>
    698c:	f8d8 2000 	ldr.w	r2, [r8]
    6990:	b11a      	cbz	r2, 699a <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    6992:	8a28      	ldrh	r0, [r5, #16]
    6994:	4649      	mov	r1, r9
    6996:	4790      	blx	r2
    6998:	b968      	cbnz	r0, 69b6 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    699a:	2100      	movs	r1, #0
    699c:	4650      	mov	r0, sl
    699e:	f007 faf1 	bl	df84 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    69a2:	b910      	cbnz	r0, 69aa <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x7a>
    69a4:	8a28      	ldrh	r0, [r5, #16]
    69a6:	42b0      	cmp	r0, r6
    69a8:	d1e2      	bne.n	6970 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x40>
    69aa:	4808      	ldr	r0, [pc, #32]	; (69cc <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x9c>)
    69ac:	6801      	ldr	r1, [r0, #0]
    69ae:	b129      	cbz	r1, 69bc <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    69b0:	4648      	mov	r0, r9
    69b2:	4788      	blx	r1
    69b4:	b110      	cbz	r0, 69bc <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    69b6:	2001      	movs	r0, #1
    69b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    69bc:	2000      	movs	r0, #0
    69be:	e7fb      	b.n	69b8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    69c0:	20000ee8 	.word	0x20000ee8
    69c4:	2000023c 	.word	0x2000023c
    69c8:	20000240 	.word	0x20000240
    69cc:	20000248 	.word	0x20000248

000069d0 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI>:
    69d0:	b570      	push	{r4, r5, r6, lr}
    69d2:	0005      	movs	r5, r0
    69d4:	460c      	mov	r4, r1
    69d6:	d02e      	beq.n	6a36 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    69d8:	4818      	ldr	r0, [pc, #96]	; (6a3c <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x6c>)
    69da:	6802      	ldr	r2, [r0, #0]
    69dc:	b35a      	cbz	r2, 6a36 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    69de:	4628      	mov	r0, r5
    69e0:	4790      	blx	r2
    69e2:	b340      	cbz	r0, 6a36 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    69e4:	7820      	ldrb	r0, [r4, #0]
    69e6:	2811      	cmp	r0, #17
    69e8:	d002      	beq.n	69f0 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x20>
    69ea:	2814      	cmp	r0, #20
    69ec:	d003      	beq.n	69f6 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x26>
    69ee:	e020      	b.n	6a32 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    69f0:	7920      	ldrb	r0, [r4, #4]
    69f2:	b1f0      	cbz	r0, 6a32 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    69f4:	e00a      	b.n	6a0c <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    69f6:	7920      	ldrb	r0, [r4, #4]
    69f8:	b120      	cbz	r0, 6a04 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x34>
    69fa:	4628      	mov	r0, r5
    69fc:	f007 fcba 	bl	e374 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6a00:	b120      	cbz	r0, 6a0c <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    6a02:	e016      	b.n	6a32 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6a04:	490e      	ldr	r1, [pc, #56]	; (6a40 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x70>)
    6a06:	2000      	movs	r0, #0
    6a08:	7348      	strb	r0, [r1, #13]
    6a0a:	e012      	b.n	6a32 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6a0c:	88e4      	ldrh	r4, [r4, #6]
    6a0e:	2100      	movs	r1, #0
    6a10:	4620      	mov	r0, r4
    6a12:	f006 fd72 	bl	d4fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6a16:	b160      	cbz	r0, 6a32 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6a18:	8800      	ldrh	r0, [r0, #0]
    6a1a:	f006 fde7 	bl	d5ec <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6a1e:	2100      	movs	r1, #0
    6a20:	4620      	mov	r0, r4
    6a22:	f7fe f9ff 	bl	4e24 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6a26:	b120      	cbz	r0, 6a32 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6a28:	f44f 719a 	mov.w	r1, #308	; 0x134
    6a2c:	202b      	movs	r0, #43	; 0x2b
    6a2e:	f7fd ff57 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a32:	2001      	movs	r0, #1
    6a34:	bd70      	pop	{r4, r5, r6, pc}
    6a36:	2000      	movs	r0, #0
    6a38:	bd70      	pop	{r4, r5, r6, pc}
    6a3a:	0000      	.short	0x0000
    6a3c:	20000238 	.word	0x20000238
    6a40:	20000ee8 	.word	0x20000ee8

00006a44 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    6a44:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a48:	b087      	sub	sp, #28
    6a4a:	460c      	mov	r4, r1
    6a4c:	a902      	add	r1, sp, #8
    6a4e:	9807      	ldr	r0, [sp, #28]
    6a50:	f006 fe8c 	bl	d76c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6a54:	2800      	cmp	r0, #0
    6a56:	d17d      	bne.n	6b54 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    6a58:	f8df 9120 	ldr.w	r9, [pc, #288]	; 6b7c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x138>
    6a5c:	f04f 0a01 	mov.w	sl, #1
    6a60:	4680      	mov	r8, r0
    6a62:	9803      	ldr	r0, [sp, #12]
    6a64:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    6a68:	2800      	cmp	r0, #0
    6a6a:	d00c      	beq.n	6a86 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    6a6c:	f8d9 2000 	ldr.w	r2, [r9]
    6a70:	b162      	cbz	r2, 6a8c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    6a72:	4621      	mov	r1, r4
    6a74:	9807      	ldr	r0, [sp, #28]
    6a76:	4790      	blx	r2
    6a78:	b140      	cbz	r0, 6a8c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    6a7a:	4620      	mov	r0, r4
    6a7c:	f000 f91a 	bl	6cb4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe0>
    6a80:	2800      	cmp	r0, #0
    6a82:	d1ee      	bne.n	6a62 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1e>
    6a84:	2001      	movs	r0, #1
    6a86:	b009      	add	sp, #36	; 0x24
    6a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6a8c:	9d03      	ldr	r5, [sp, #12]
    6a8e:	f895 012c 	ldrb.w	r0, [r5, #300]	; 0x12c
    6a92:	3568      	adds	r5, #104	; 0x68
    6a94:	b950      	cbnz	r0, 6aac <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    6a96:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    6a9a:	f88d 0004 	strb.w	r0, [sp, #4]
    6a9e:	9801      	ldr	r0, [sp, #4]
    6aa0:	9001      	str	r0, [sp, #4]
    6aa2:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6aa6:	b108      	cbz	r0, 6aac <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    6aa8:	2001      	movs	r0, #1
    6aaa:	e000      	b.n	6aae <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    6aac:	2000      	movs	r0, #0
    6aae:	4683      	mov	fp, r0
    6ab0:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
    6ab4:	b1c0      	cbz	r0, 6ae8 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    6ab6:	f895 0046 	ldrb.w	r0, [r5, #70]	; 0x46
    6aba:	0780      	lsls	r0, r0, #30
    6abc:	d514      	bpl.n	6ae8 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    6abe:	f884 8001 	strb.w	r8, [r4, #1]
    6ac2:	f884 a000 	strb.w	sl, [r4]
    6ac6:	f884 8004 	strb.w	r8, [r4, #4]
    6aca:	9907      	ldr	r1, [sp, #28]
    6acc:	f8a4 1005 	strh.w	r1, [r4, #5]
    6ad0:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
    6ad4:	71e1      	strb	r1, [r4, #7]
    6ad6:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
    6ada:	8121      	strh	r1, [r4, #8]
    6adc:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    6ae0:	8161      	strh	r1, [r4, #10]
    6ae2:	f885 8045 	strb.w	r8, [r5, #69]	; 0x45
    6ae6:	e7c8      	b.n	6a7a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    6ae8:	9807      	ldr	r0, [sp, #28]
    6aea:	f7fe fb43 	bl	5174 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6aee:	0007      	movs	r7, r0
    6af0:	d00d      	beq.n	6b0e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xca>
    6af2:	f006 fb10 	bl	d116 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    6af6:	0006      	movs	r6, r0
    6af8:	d015      	beq.n	6b26 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xe2>
    6afa:	f884 8001 	strb.w	r8, [r4, #1]
    6afe:	200d      	movs	r0, #13
    6b00:	7020      	strb	r0, [r4, #0]
    6b02:	9807      	ldr	r0, [sp, #28]
    6b04:	80e0      	strh	r0, [r4, #6]
    6b06:	8126      	strh	r6, [r4, #8]
    6b08:	f884 a004 	strb.w	sl, [r4, #4]
    6b0c:	e007      	b.n	6b1e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xda>
    6b0e:	f240 213a 	movw	r1, #570	; 0x23a
    6b12:	e02d      	b.n	6b70 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x12c>
    6b14:	2100      	movs	r1, #0
    6b16:	4638      	mov	r0, r7
    6b18:	460a      	mov	r2, r1
    6b1a:	f006 fc0a 	bl	d332 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6b1e:	1e76      	subs	r6, r6, #1
    6b20:	b2b6      	uxth	r6, r6
    6b22:	d2f7      	bcs.n	6b14 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd0>
    6b24:	e7a9      	b.n	6a7a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    6b26:	9807      	ldr	r0, [sp, #28]
    6b28:	f7fe fb0e 	bl	5148 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6b2c:	b1f0      	cbz	r0, 6b6c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x128>
    6b2e:	f1bb 0f00 	cmp.w	fp, #0
    6b32:	d020      	beq.n	6b76 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    6b34:	f006 fa27 	bl	cf86 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6b38:	b160      	cbz	r0, 6b54 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    6b3a:	9807      	ldr	r0, [sp, #28]
    6b3c:	f006 fd56 	bl	d5ec <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6b40:	2100      	movs	r1, #0
    6b42:	9807      	ldr	r0, [sp, #28]
    6b44:	f7fe f96e 	bl	4e24 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6b48:	f884 8001 	strb.w	r8, [r4, #1]
    6b4c:	210a      	movs	r1, #10
    6b4e:	4640      	mov	r0, r8
    6b50:	7021      	strb	r1, [r4, #0]
    6b52:	e000      	b.n	6b56 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x112>
    6b54:	e00f      	b.n	6b76 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    6b56:	f884 8004 	strb.w	r8, [r4, #4]
    6b5a:	9907      	ldr	r1, [sp, #28]
    6b5c:	f8a4 1005 	strh.w	r1, [r4, #5]
    6b60:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    6b64:	71e1      	strb	r1, [r4, #7]
    6b66:	3524      	adds	r5, #36	; 0x24
    6b68:	7028      	strb	r0, [r5, #0]
    6b6a:	e786      	b.n	6a7a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    6b6c:	f44f 7116 	mov.w	r1, #600	; 0x258
    6b70:	202b      	movs	r0, #43	; 0x2b
    6b72:	f7fd feb5 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b76:	2000      	movs	r0, #0
    6b78:	e785      	b.n	6a86 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    6b7a:	0000      	.short	0x0000
    6b7c:	20000244 	.word	0x20000244

00006b80 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    6b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b84:	4c12      	ldr	r4, [pc, #72]	; (6bd0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6b86:	4607      	mov	r7, r0
    6b88:	460e      	mov	r6, r1
    6b8a:	7de0      	ldrb	r0, [r4, #23]
    6b8c:	b110      	cbz	r0, 6b94 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    6b8e:	8b20      	ldrh	r0, [r4, #24]
    6b90:	2800      	cmp	r0, #0
    6b92:	d012      	beq.n	6bba <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6b94:	480e      	ldr	r0, [pc, #56]	; (6bd0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6b96:	300e      	adds	r0, #14
    6b98:	4680      	mov	r8, r0
    6b9a:	f007 f99d 	bl	ded8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6b9e:	b9a8      	cbnz	r0, 6bcc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6ba0:	89e5      	ldrh	r5, [r4, #14]
    6ba2:	89e0      	ldrh	r0, [r4, #14]
    6ba4:	4632      	mov	r2, r6
    6ba6:	4639      	mov	r1, r7
    6ba8:	f007 f9a5 	bl	def6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x18>
    6bac:	b138      	cbz	r0, 6bbe <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    6bae:	7de0      	ldrb	r0, [r4, #23]
    6bb0:	b110      	cbz	r0, 6bb8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    6bb2:	8b20      	ldrh	r0, [r4, #24]
    6bb4:	1e40      	subs	r0, r0, #1
    6bb6:	8320      	strh	r0, [r4, #24]
    6bb8:	2001      	movs	r0, #1
    6bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6bbe:	4640      	mov	r0, r8
    6bc0:	f007 f98a 	bl	ded8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6bc4:	b910      	cbnz	r0, 6bcc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6bc6:	89e0      	ldrh	r0, [r4, #14]
    6bc8:	42a8      	cmp	r0, r5
    6bca:	d1ea      	bne.n	6ba2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    6bcc:	2000      	movs	r0, #0
    6bce:	e7f4      	b.n	6bba <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6bd0:	20000ee8 	.word	0x20000ee8

00006bd4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    6bd4:	b510      	push	{r4, lr}
    6bd6:	7901      	ldrb	r1, [r0, #4]
    6bd8:	b119      	cbz	r1, 6be2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    6bda:	2901      	cmp	r1, #1
    6bdc:	d006      	beq.n	6bec <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    6bde:	2000      	movs	r0, #0
    6be0:	bd10      	pop	{r4, pc}
    6be2:	8842      	ldrh	r2, [r0, #2]
    6be4:	6883      	ldr	r3, [r0, #8]
    6be6:	8800      	ldrh	r0, [r0, #0]
    6be8:	2102      	movs	r1, #2
    6bea:	e003      	b.n	6bf4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    6bec:	8842      	ldrh	r2, [r0, #2]
    6bee:	6883      	ldr	r3, [r0, #8]
    6bf0:	8800      	ldrh	r0, [r0, #0]
    6bf2:	2101      	movs	r1, #1
    6bf4:	f000 f808 	bl	6c08 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>
    6bf8:	b910      	cbnz	r0, 6c00 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2c>
    6bfa:	4902      	ldr	r1, [pc, #8]	; (6c04 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>)
    6bfc:	2001      	movs	r0, #1
    6bfe:	7008      	strb	r0, [r1, #0]
    6c00:	2001      	movs	r0, #1
    6c02:	bd10      	pop	{r4, pc}
    6c04:	20000ee8 	.word	0x20000ee8
    6c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6c0c:	468a      	mov	sl, r1
    6c0e:	4699      	mov	r9, r3
    6c10:	4615      	mov	r5, r2
    6c12:	4604      	mov	r4, r0
    6c14:	a901      	add	r1, sp, #4
    6c16:	f006 fda9 	bl	d76c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6c1a:	bbe0      	cbnz	r0, 6c96 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc2>
    6c1c:	9f02      	ldr	r7, [sp, #8]
    6c1e:	f04f 0800 	mov.w	r8, #0
    6c22:	3768      	adds	r7, #104	; 0x68
    6c24:	b18d      	cbz	r5, 6c4a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x76>
    6c26:	4620      	mov	r0, r4
    6c28:	f7fe faa4 	bl	5174 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6c2c:	0004      	movs	r4, r0
    6c2e:	d00f      	beq.n	6c50 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x7c>
    6c30:	4629      	mov	r1, r5
    6c32:	f006 faaf 	bl	d194 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    6c36:	0006      	movs	r6, r0
    6c38:	d003      	beq.n	6c42 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    6c3a:	481d      	ldr	r0, [pc, #116]	; (6cb0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xdc>)
    6c3c:	8880      	ldrh	r0, [r0, #4]
    6c3e:	42a8      	cmp	r0, r5
    6c40:	d208      	bcs.n	6c54 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x80>
    6c42:	2000      	movs	r0, #0
    6c44:	b004      	add	sp, #16
    6c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6c4a:	2001      	movs	r0, #1
    6c4c:	7538      	strb	r0, [r7, #20]
    6c4e:	e029      	b.n	6ca4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    6c50:	2189      	movs	r1, #137	; 0x89
    6c52:	e02a      	b.n	6caa <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd6>
    6c54:	4620      	mov	r0, r4
    6c56:	4631      	mov	r1, r6
    6c58:	aa03      	add	r2, sp, #12
    6c5a:	f006 fa94 	bl	d186 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6c5e:	9803      	ldr	r0, [sp, #12]
    6c60:	f8a0 8000 	strh.w	r8, [r0]
    6c64:	f880 8002 	strb.w	r8, [r0, #2]
    6c68:	7d39      	ldrb	r1, [r7, #20]
    6c6a:	b109      	cbz	r1, 6c70 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x9c>
    6c6c:	f04f 0a02 	mov.w	sl, #2
    6c70:	4651      	mov	r1, sl
    6c72:	f007 f888 	bl	dd86 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6c76:	4631      	mov	r1, r6
    6c78:	2603      	movs	r6, #3
    6c7a:	4620      	mov	r0, r4
    6c7c:	464a      	mov	r2, r9
    6c7e:	462b      	mov	r3, r5
    6c80:	9600      	str	r6, [sp, #0]
    6c82:	f006 f969 	bl	cf58 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    6c86:	4620      	mov	r0, r4
    6c88:	4629      	mov	r1, r5
    6c8a:	f006 fa20 	bl	d0ce <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    6c8e:	b158      	cbz	r0, 6ca8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd4>
    6c90:	4644      	mov	r4, r8
    6c92:	a801      	add	r0, sp, #4
    6c94:	e000      	b.n	6c98 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc4>
    6c96:	e005      	b.n	6ca4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    6c98:	f007 f921 	bl	dede <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    6c9c:	9802      	ldr	r0, [sp, #8]
    6c9e:	f8a0 40f2 	strh.w	r4, [r0, #242]	; 0xf2
    6ca2:	753c      	strb	r4, [r7, #20]
    6ca4:	2001      	movs	r0, #1
    6ca6:	e7cd      	b.n	6c44 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x70>
    6ca8:	219f      	movs	r1, #159	; 0x9f
    6caa:	202b      	movs	r0, #43	; 0x2b
    6cac:	f7fd fe18 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cb0:	20000ee8 	.word	0x20000ee8
    6cb4:	b510      	push	{r4, lr}
    6cb6:	492c      	ldr	r1, [pc, #176]	; (6d68 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x194>)
    6cb8:	b086      	sub	sp, #24
    6cba:	7d8a      	ldrb	r2, [r1, #22]
    6cbc:	7801      	ldrb	r1, [r0, #0]
    6cbe:	07d3      	lsls	r3, r2, #31
    6cc0:	d101      	bne.n	6cc6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf2>
    6cc2:	2919      	cmp	r1, #25
    6cc4:	d004      	beq.n	6cd0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xfc>
    6cc6:	2918      	cmp	r1, #24
    6cc8:	d01e      	beq.n	6d08 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x134>
    6cca:	2912      	cmp	r1, #18
    6ccc:	d045      	beq.n	6d5a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x186>
    6cce:	e049      	b.n	6d64 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6cd0:	8880      	ldrh	r0, [r0, #4]
    6cd2:	f8ad 0000 	strh.w	r0, [sp]
    6cd6:	a902      	add	r1, sp, #8
    6cd8:	f006 fd48 	bl	d76c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6cdc:	b108      	cbz	r0, 6ce2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x10e>
    6cde:	2158      	movs	r1, #88	; 0x58
    6ce0:	e035      	b.n	6d4e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    6ce2:	9803      	ldr	r0, [sp, #12]
    6ce4:	f810 1f5e 	ldrb.w	r1, [r0, #94]!
    6ce8:	f88d 1002 	strb.w	r1, [sp, #2]
    6cec:	7841      	ldrb	r1, [r0, #1]
    6cee:	f88d 1003 	strb.w	r1, [sp, #3]
    6cf2:	8840      	ldrh	r0, [r0, #2]
    6cf4:	f8ad 0004 	strh.w	r0, [sp, #4]
    6cf8:	2102      	movs	r1, #2
    6cfa:	4668      	mov	r0, sp
    6cfc:	f008 fd10 	bl	f720 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    6d00:	b340      	cbz	r0, 6d54 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    6d02:	f240 114d 	movw	r1, #333	; 0x14d
    6d06:	e022      	b.n	6d4e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    6d08:	0791      	lsls	r1, r2, #30
    6d0a:	d42b      	bmi.n	6d64 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6d0c:	8884      	ldrh	r4, [r0, #4]
    6d0e:	a903      	add	r1, sp, #12
    6d10:	4620      	mov	r0, r4
    6d12:	f008 fb70 	bl	f3f6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    6d16:	b110      	cbz	r0, 6d1e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14a>
    6d18:	f44f 71aa 	mov.w	r1, #340	; 0x154
    6d1c:	e017      	b.n	6d4e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    6d1e:	f8ad 4000 	strh.w	r4, [sp]
    6d22:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    6d26:	f8ad 0002 	strh.w	r0, [sp, #2]
    6d2a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6d2e:	f8ad 0004 	strh.w	r0, [sp, #4]
    6d32:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    6d36:	f8ad 0006 	strh.w	r0, [sp, #6]
    6d3a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6d3e:	f8ad 0008 	strh.w	r0, [sp, #8]
    6d42:	4668      	mov	r0, sp
    6d44:	f008 fbf4 	bl	f530 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    6d48:	b120      	cbz	r0, 6d54 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    6d4a:	f240 115d 	movw	r1, #349	; 0x15d
    6d4e:	202b      	movs	r0, #43	; 0x2b
    6d50:	f7fd fdc6 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d54:	2001      	movs	r0, #1
    6d56:	b006      	add	sp, #24
    6d58:	bd10      	pop	{r4, pc}
    6d5a:	0751      	lsls	r1, r2, #29
    6d5c:	d402      	bmi.n	6d64 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6d5e:	7b80      	ldrb	r0, [r0, #14]
    6d60:	07c0      	lsls	r0, r0, #31
    6d62:	d0f7      	beq.n	6d54 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    6d64:	2000      	movs	r0, #0
    6d66:	e7f6      	b.n	6d56 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x182>
    6d68:	20000ee8 	.word	0x20000ee8

00006d6c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    6d6c:	b570      	push	{r4, r5, r6, lr}
    6d6e:	4604      	mov	r4, r0
    6d70:	7c00      	ldrb	r0, [r0, #16]
    6d72:	b300      	cbz	r0, 6db6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    6d74:	2802      	cmp	r0, #2
    6d76:	d01e      	beq.n	6db6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    6d78:	f05f 0001 	movs.w	r0, #1
    6d7c:	f104 0149 	add.w	r1, r4, #73	; 0x49
    6d80:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    6d84:	460d      	mov	r5, r1
    6d86:	b1c0      	cbz	r0, 6dba <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    6d88:	7de0      	ldrb	r0, [r4, #23]
    6d8a:	b1f0      	cbz	r0, 6dca <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    6d8c:	f8d4 0011 	ldr.w	r0, [r4, #17]
    6d90:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    6d94:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    6d98:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    6d9c:	7c20      	ldrb	r0, [r4, #16]
    6d9e:	f007 fa57 	bl	e250 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    6da2:	7620      	strb	r0, [r4, #24]
    6da4:	2008      	movs	r0, #8
    6da6:	7660      	strb	r0, [r4, #25]
    6da8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6dac:	4629      	mov	r1, r5
    6dae:	f007 fa3b 	bl	e228 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa4>
    6db2:	b9a8      	cbnz	r0, 6de0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    6db4:	e00e      	b.n	6dd4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    6db6:	2000      	movs	r0, #0
    6db8:	e7e0      	b.n	6d7c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    6dba:	2000      	movs	r0, #0
    6dbc:	f7fe fc52 	bl	5664 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    6dc0:	2800      	cmp	r0, #0
    6dc2:	d1eb      	bne.n	6d9c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    6dc4:	f240 417f 	movw	r1, #1151	; 0x47f
    6dc8:	e001      	b.n	6dce <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    6dca:	f240 4183 	movw	r1, #1155	; 0x483
    6dce:	202d      	movs	r0, #45	; 0x2d
    6dd0:	f7fd fd86 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dd4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6dd8:	4629      	mov	r1, r5
    6dda:	f007 fa2e 	bl	e23a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    6dde:	b100      	cbz	r0, 6de2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    6de0:	2001      	movs	r0, #1
    6de2:	76a0      	strb	r0, [r4, #26]
    6de4:	7e20      	ldrb	r0, [r4, #24]
    6de6:	b910      	cbnz	r0, 6dee <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x82>
    6de8:	78a0      	ldrb	r0, [r4, #2]
    6dea:	0740      	lsls	r0, r0, #29
    6dec:	d506      	bpl.n	6dfc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x90>
    6dee:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    6df2:	f104 0150 	add.w	r1, r4, #80	; 0x50
    6df6:	f006 fc76 	bl	d6e6 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6dfa:	7660      	strb	r0, [r4, #25]
    6dfc:	2500      	movs	r5, #0
    6dfe:	6425      	str	r5, [r4, #64]	; 0x40
    6e00:	f005 fa03 	bl	c20a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6e04:	6460      	str	r0, [r4, #68]	; 0x44
    6e06:	2100      	movs	r1, #0
    6e08:	4620      	mov	r0, r4
    6e0a:	f007 fb6f 	bl	e4ec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    6e0e:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
    6e12:	78a0      	ldrb	r0, [r4, #2]
    6e14:	0740      	lsls	r0, r0, #29
    6e16:	d508      	bpl.n	6e2a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    6e18:	7e20      	ldrb	r0, [r4, #24]
    6e1a:	2800      	cmp	r0, #0
    6e1c:	d005      	beq.n	6e2a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    6e1e:	4620      	mov	r0, r4
    6e20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6e24:	2100      	movs	r1, #0
    6e26:	f000 bdcd 	b.w	79c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x600>
    6e2a:	bd70      	pop	{r4, r5, r6, pc}

00006e2c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    6e2c:	b508      	push	{r3, lr}
    6e2e:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
    6e32:	f88d 2000 	strb.w	r2, [sp]
    6e36:	9a00      	ldr	r2, [sp, #0]
    6e38:	9200      	str	r2, [sp, #0]
    6e3a:	f89d 3000 	ldrb.w	r3, [sp]
    6e3e:	2200      	movs	r2, #0
    6e40:	b163      	cbz	r3, 6e5c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    6e42:	704a      	strb	r2, [r1, #1]
    6e44:	2317      	movs	r3, #23
    6e46:	700b      	strb	r3, [r1, #0]
    6e48:	f850 3fa9 	ldr.w	r3, [r0, #169]!
    6e4c:	604b      	str	r3, [r1, #4]
    6e4e:	6843      	ldr	r3, [r0, #4]
    6e50:	608b      	str	r3, [r1, #8]
    6e52:	7a03      	ldrb	r3, [r0, #8]
    6e54:	730b      	strb	r3, [r1, #12]
    6e56:	f800 2c01 	strb.w	r2, [r0, #-1]
    6e5a:	e03b      	b.n	6ed4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6e5c:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    6e60:	f88d 3000 	strb.w	r3, [sp]
    6e64:	9b00      	ldr	r3, [sp, #0]
    6e66:	9300      	str	r3, [sp, #0]
    6e68:	f89d 3000 	ldrb.w	r3, [sp]
    6e6c:	b143      	cbz	r3, 6e80 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    6e6e:	704a      	strb	r2, [r1, #1]
    6e70:	2305      	movs	r3, #5
    6e72:	700b      	strb	r3, [r1, #0]
    6e74:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    6e78:	604b      	str	r3, [r1, #4]
    6e7a:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    6e7e:	e029      	b.n	6ed4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6e80:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
    6e84:	f88d 3000 	strb.w	r3, [sp]
    6e88:	9b00      	ldr	r3, [sp, #0]
    6e8a:	9300      	str	r3, [sp, #0]
    6e8c:	f89d 3000 	ldrb.w	r3, [sp]
    6e90:	b11b      	cbz	r3, 6e9a <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    6e92:	bf00      	nop
    6e94:	f007 fb01 	bl	e49a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    6e98:	e01c      	b.n	6ed4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6e9a:	f890 309a 	ldrb.w	r3, [r0, #154]	; 0x9a
    6e9e:	f88d 3000 	strb.w	r3, [sp]
    6ea2:	9b00      	ldr	r3, [sp, #0]
    6ea4:	9300      	str	r3, [sp, #0]
    6ea6:	f89d 3000 	ldrb.w	r3, [sp]
    6eaa:	b1ab      	cbz	r3, 6ed8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    6eac:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
    6eb0:	f88d 3000 	strb.w	r3, [sp]
    6eb4:	9b00      	ldr	r3, [sp, #0]
    6eb6:	9300      	str	r3, [sp, #0]
    6eb8:	f89d 3000 	ldrb.w	r3, [sp]
    6ebc:	2b00      	cmp	r3, #0
    6ebe:	d1e9      	bne.n	6e94 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    6ec0:	704a      	strb	r2, [r1, #1]
    6ec2:	2314      	movs	r3, #20
    6ec4:	700b      	strb	r3, [r1, #0]
    6ec6:	f850 3f9c 	ldr.w	r3, [r0, #156]!
    6eca:	604b      	str	r3, [r1, #4]
    6ecc:	8883      	ldrh	r3, [r0, #4]
    6ece:	810b      	strh	r3, [r1, #8]
    6ed0:	f800 2c02 	strb.w	r2, [r0, #-2]
    6ed4:	2001      	movs	r0, #1
    6ed6:	bd08      	pop	{r3, pc}
    6ed8:	2000      	movs	r0, #0
    6eda:	bd08      	pop	{r3, pc}

00006edc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    6edc:	b530      	push	{r4, r5, lr}
    6ede:	460c      	mov	r4, r1
    6ee0:	b08d      	sub	sp, #52	; 0x34
    6ee2:	4605      	mov	r5, r0
    6ee4:	4601      	mov	r1, r0
    6ee6:	2220      	movs	r2, #32
    6ee8:	a802      	add	r0, sp, #8
    6eea:	f005 fb0e 	bl	c50a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6eee:	a80a      	add	r0, sp, #40	; 0x28
    6ef0:	f007 fba9 	bl	e646 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    6ef4:	7aa0      	ldrb	r0, [r4, #10]
    6ef6:	f88d 0018 	strb.w	r0, [sp, #24]
    6efa:	7820      	ldrb	r0, [r4, #0]
    6efc:	f88d 0008 	strb.w	r0, [sp, #8]
    6f00:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    6f04:	f8ad 0000 	strh.w	r0, [sp]
    6f08:	f89d 0000 	ldrb.w	r0, [sp]
    6f0c:	f000 0101 	and.w	r1, r0, #1
    6f10:	f3c0 0240 	ubfx	r2, r0, #1, #1
    6f14:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    6f18:	f3c0 0280 	ubfx	r2, r0, #2, #1
    6f1c:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    6f20:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    6f24:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    6f28:	f3c0 1200 	ubfx	r2, r0, #4, #1
    6f2c:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    6f30:	f3c0 1240 	ubfx	r2, r0, #5, #1
    6f34:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    6f38:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6f3c:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    6f40:	f8ad 000a 	strh.w	r0, [sp, #10]
    6f44:	7d20      	ldrb	r0, [r4, #20]
    6f46:	2801      	cmp	r0, #1
    6f48:	d006      	beq.n	6f58 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6f4a:	2802      	cmp	r0, #2
    6f4c:	d004      	beq.n	6f58 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6f4e:	f240 2185 	movw	r1, #645	; 0x285
    6f52:	2006      	movs	r0, #6
    6f54:	f7fd fcc4 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f58:	f88d 000c 	strb.w	r0, [sp, #12]
    6f5c:	7a61      	ldrb	r1, [r4, #9]
    6f5e:	a80a      	add	r0, sp, #40	; 0x28
    6f60:	f007 fb58 	bl	e614 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    6f64:	7d20      	ldrb	r0, [r4, #20]
    6f66:	2101      	movs	r1, #1
    6f68:	2802      	cmp	r0, #2
    6f6a:	d102      	bne.n	6f72 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    6f6c:	7d60      	ldrb	r0, [r4, #21]
    6f6e:	1c40      	adds	r0, r0, #1
    6f70:	b2c1      	uxtb	r1, r0
    6f72:	7ea0      	ldrb	r0, [r4, #26]
    6f74:	1c40      	adds	r0, r0, #1
    6f76:	b2c2      	uxtb	r2, r0
    6f78:	a80a      	add	r0, sp, #40	; 0x28
    6f7a:	f007 fb12 	bl	e5a2 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    6f7e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    6f82:	0700      	lsls	r0, r0, #28
    6f84:	d501      	bpl.n	6f8a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    6f86:	2000      	movs	r0, #0
    6f88:	e020      	b.n	6fcc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    6f8a:	a80a      	add	r0, sp, #40	; 0x28
    6f8c:	f007 fb1b 	bl	e5c6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6f90:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    6f94:	2228      	movs	r2, #40	; 0x28
    6f96:	f000 fdbd 	bl	7b14 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    6f9a:	f240 2171 	movw	r1, #625	; 0x271
    6f9e:	f200 20d5 	addw	r0, r0, #725	; 0x2d5
    6fa2:	fbb0 f0f1 	udiv	r0, r0, r1
    6fa6:	4348      	muls	r0, r1
    6fa8:	f8d4 1002 	ldr.w	r1, [r4, #2]
    6fac:	f240 2371 	movw	r3, #625	; 0x271
    6fb0:	0a0a      	lsrs	r2, r1, #8
    6fb2:	f240 2171 	movw	r1, #625	; 0x271
    6fb6:	434a      	muls	r2, r1
    6fb8:	f8d4 1005 	ldr.w	r1, [r4, #5]
    6fbc:	0a09      	lsrs	r1, r1, #8
    6fbe:	4359      	muls	r1, r3
    6fc0:	4290      	cmp	r0, r2
    6fc2:	d801      	bhi.n	6fc8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    6fc4:	9204      	str	r2, [sp, #16]
    6fc6:	e004      	b.n	6fd2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6fc8:	4288      	cmp	r0, r1
    6fca:	d801      	bhi.n	6fd0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    6fcc:	9004      	str	r0, [sp, #16]
    6fce:	e000      	b.n	6fd2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6fd0:	9104      	str	r1, [sp, #16]
    6fd2:	7ca0      	ldrb	r0, [r4, #18]
    6fd4:	f88d 0017 	strb.w	r0, [sp, #23]
    6fd8:	7e20      	ldrb	r0, [r4, #24]
    6fda:	2801      	cmp	r0, #1
    6fdc:	d000      	beq.n	6fe0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    6fde:	2000      	movs	r0, #0
    6fe0:	f88d 0014 	strb.w	r0, [sp, #20]
    6fe4:	f895 0074 	ldrb.w	r0, [r5, #116]	; 0x74
    6fe8:	f895 0075 	ldrb.w	r0, [r5, #117]	; 0x75
    6fec:	2220      	movs	r2, #32
    6fee:	a902      	add	r1, sp, #8
    6ff0:	4628      	mov	r0, r5
    6ff2:	f005 fa8a 	bl	c50a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6ff6:	980a      	ldr	r0, [sp, #40]	; 0x28
    6ff8:	6228      	str	r0, [r5, #32]
    6ffa:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    6ffe:	84a8      	strh	r0, [r5, #36]	; 0x24
    7000:	7ae0      	ldrb	r0, [r4, #11]
    7002:	b168      	cbz	r0, 7020 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x144>
    7004:	2802      	cmp	r0, #2
    7006:	d00b      	beq.n	7020 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x144>
    7008:	f05f 0001 	movs.w	r0, #1
    700c:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    7010:	68e0      	ldr	r0, [r4, #12]
    7012:	6528      	str	r0, [r5, #80]	; 0x50
    7014:	8a20      	ldrh	r0, [r4, #16]
    7016:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    701a:	b00d      	add	sp, #52	; 0x34
    701c:	2000      	movs	r0, #0
    701e:	bd30      	pop	{r4, r5, pc}
    7020:	2000      	movs	r0, #0
    7022:	e7f3      	b.n	700c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x130>

00007024 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    7024:	4a0a      	ldr	r2, [pc, #40]	; (7050 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    7026:	b510      	push	{r4, lr}
    7028:	2100      	movs	r1, #0
    702a:	7011      	strb	r1, [r2, #0]
    702c:	4c09      	ldr	r4, [pc, #36]	; (7054 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    702e:	6060      	str	r0, [r4, #4]
    7030:	f000 f822 	bl	7078 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    7034:	b110      	cbz	r0, 703c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    7036:	f44f 7148 	mov.w	r1, #800	; 0x320
    703a:	e004      	b.n	7046 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    703c:	68a0      	ldr	r0, [r4, #8]
    703e:	2800      	cmp	r0, #0
    7040:	d104      	bne.n	704c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    7042:	f240 3123 	movw	r1, #803	; 0x323
    7046:	202d      	movs	r0, #45	; 0x2d
    7048:	f7fd fc4a 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    704c:	bd10      	pop	{r4, pc}
    704e:	0000      	.short	0x0000
    7050:	20000f04 	.word	0x20000f04
    7054:	20000100 	.word	0x20000100

00007058 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    7058:	4902      	ldr	r1, [pc, #8]	; (7064 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    705a:	4801      	ldr	r0, [pc, #4]	; (7060 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    705c:	6088      	str	r0, [r1, #8]
    705e:	4770      	bx	lr
    7060:	00007afc 	.word	0x00007afc
    7064:	20000100 	.word	0x20000100

00007068 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    7068:	4902      	ldr	r1, [pc, #8]	; (7074 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    706a:	6008      	str	r0, [r1, #0]
    706c:	6889      	ldr	r1, [r1, #8]
    706e:	6809      	ldr	r1, [r1, #0]
    7070:	4708      	bx	r1
    7072:	0000      	.short	0x0000
    7074:	20000100 	.word	0x20000100

00007078 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    7078:	4808      	ldr	r0, [pc, #32]	; (709c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    707a:	b510      	push	{r4, lr}
    707c:	7801      	ldrb	r1, [r0, #0]
    707e:	b111      	cbz	r1, 7086 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    7080:	240c      	movs	r4, #12
    7082:	4620      	mov	r0, r4
    7084:	bd10      	pop	{r4, pc}
    7086:	2400      	movs	r4, #0
    7088:	6004      	str	r4, [r0, #0]
    708a:	6044      	str	r4, [r0, #4]
    708c:	6084      	str	r4, [r0, #8]
    708e:	60c4      	str	r4, [r0, #12]
    7090:	f004 f92e 	bl	b2f0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7094:	f003 ff70 	bl	af78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7098:	e7f3      	b.n	7082 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    709a:	0000      	.short	0x0000
    709c:	20000f04 	.word	0x20000f04

000070a0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    70a0:	4904      	ldr	r1, [pc, #16]	; (70b4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    70a2:	b510      	push	{r4, lr}
    70a4:	7809      	ldrb	r1, [r1, #0]
    70a6:	2901      	cmp	r1, #1
    70a8:	d101      	bne.n	70ae <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    70aa:	f000 fb77 	bl	779c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    70ae:	2000      	movs	r0, #0
    70b0:	bd10      	pop	{r4, pc}
    70b2:	0000      	.short	0x0000
    70b4:	20000f04 	.word	0x20000f04

000070b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    70b8:	4902      	ldr	r1, [pc, #8]	; (70c4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    70ba:	4801      	ldr	r0, [pc, #4]	; (70c0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    70bc:	6008      	str	r0, [r1, #0]
    70be:	4770      	bx	lr
    70c0:	000078e9 	.word	0x000078e9
    70c4:	2000010c 	.word	0x2000010c
    70c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70cc:	000f      	movs	r7, r1
    70ce:	4604      	mov	r4, r0
    70d0:	d023      	beq.n	711a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    70d2:	f104 0020 	add.w	r0, r4, #32
    70d6:	4605      	mov	r5, r0
    70d8:	f007 fa9e 	bl	e618 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    70dc:	b9b0      	cbnz	r0, 710c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    70de:	78a0      	ldrb	r0, [r4, #2]
    70e0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    70e4:	b350      	cbz	r0, 713c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    70e6:	4628      	mov	r0, r5
    70e8:	f007 fa6d 	bl	e5c6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    70ec:	4606      	mov	r6, r0
    70ee:	4628      	mov	r0, r5
    70f0:	f007 fa92 	bl	e618 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    70f4:	1a30      	subs	r0, r6, r0
    70f6:	b2c0      	uxtb	r0, r0
    70f8:	f007 fae3 	bl	e6c2 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    70fc:	4601      	mov	r1, r0
    70fe:	4835      	ldr	r0, [pc, #212]	; (71d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    7100:	6842      	ldr	r2, [r0, #4]
    7102:	4411      	add	r1, r2
    7104:	6041      	str	r1, [r0, #4]
    7106:	4628      	mov	r0, r5
    7108:	f007 faa4 	bl	e654 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    710c:	4628      	mov	r0, r5
    710e:	f007 fa66 	bl	e5de <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7112:	4601      	mov	r1, r0
    7114:	4620      	mov	r0, r4
    7116:	f007 fa25 	bl	e564 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    711a:	4d2f      	ldr	r5, [pc, #188]	; (71d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    711c:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    7120:	2100      	movs	r1, #0
    7122:	6868      	ldr	r0, [r5, #4]
    7124:	8001      	strh	r1, [r0, #0]
    7126:	f007 fa33 	bl	e590 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    712a:	8860      	ldrh	r0, [r4, #2]
    712c:	2813      	cmp	r0, #19
    712e:	d013      	beq.n	7158 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    7130:	dc09      	bgt.n	7146 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    7132:	2810      	cmp	r0, #16
    7134:	d036      	beq.n	71a4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    7136:	2812      	cmp	r0, #18
    7138:	d109      	bne.n	714e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    713a:	e031      	b.n	71a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    713c:	4620      	mov	r0, r4
    713e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7142:	f000 bb2b 	b.w	779c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    7146:	2815      	cmp	r0, #21
    7148:	d00f      	beq.n	716a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    714a:	281d      	cmp	r0, #29
    714c:	d00d      	beq.n	716a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    714e:	f240 6196 	movw	r1, #1686	; 0x696
    7152:	202d      	movs	r0, #45	; 0x2d
    7154:	f7fd fbc4 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7158:	2100      	movs	r1, #0
    715a:	6868      	ldr	r0, [r5, #4]
    715c:	f006 fe75 	bl	de4a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7160:	2101      	movs	r1, #1
    7162:	6868      	ldr	r0, [r5, #4]
    7164:	f007 fa14 	bl	e590 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    7168:	e020      	b.n	71ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    716a:	2101      	movs	r1, #1
    716c:	6868      	ldr	r0, [r5, #4]
    716e:	f006 fe6c 	bl	de4a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7172:	2101      	movs	r1, #1
    7174:	6868      	ldr	r0, [r5, #4]
    7176:	f007 fa0b 	bl	e590 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    717a:	b136      	cbz	r6, 718a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    717c:	f104 0157 	add.w	r1, r4, #87	; 0x57
    7180:	6868      	ldr	r0, [r5, #4]
    7182:	f006 fe7d 	bl	de80 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7186:	2101      	movs	r1, #1
    7188:	e006      	b.n	7198 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    718a:	f104 0150 	add.w	r1, r4, #80	; 0x50
    718e:	6868      	ldr	r0, [r5, #4]
    7190:	f006 fe76 	bl	de80 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7194:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    7198:	6868      	ldr	r0, [r5, #4]
    719a:	f006 fe77 	bl	de8c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    719e:	e005      	b.n	71ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    71a0:	2106      	movs	r1, #6
    71a2:	e000      	b.n	71a6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    71a4:	2102      	movs	r1, #2
    71a6:	6868      	ldr	r0, [r5, #4]
    71a8:	f006 fe4f 	bl	de4a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    71ac:	4620      	mov	r0, r4
    71ae:	f000 fc7f 	bl	7ab0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ec>
    71b2:	8860      	ldrh	r0, [r4, #2]
    71b4:	281d      	cmp	r0, #29
    71b6:	d006      	beq.n	71c6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    71b8:	2815      	cmp	r0, #21
    71ba:	d004      	beq.n	71c6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    71bc:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    71be:	6b21      	ldr	r1, [r4, #48]	; 0x30
    71c0:	6868      	ldr	r0, [r5, #4]
    71c2:	f006 fe32 	bl	de2a <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    71c6:	4639      	mov	r1, r7
    71c8:	4620      	mov	r0, r4
    71ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    71ce:	f000 b9e5 	b.w	759c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d8>
    71d2:	0000      	.short	0x0000
    71d4:	20000f04 	.word	0x20000f04
    71d8:	20000100 	.word	0x20000100
    71dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71e0:	4d28      	ldr	r5, [pc, #160]	; (7284 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1cc>)
    71e2:	4680      	mov	r8, r0
    71e4:	7828      	ldrb	r0, [r5, #0]
    71e6:	2802      	cmp	r0, #2
    71e8:	d005      	beq.n	71f6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    71ea:	7828      	ldrb	r0, [r5, #0]
    71ec:	2803      	cmp	r0, #3
    71ee:	d002      	beq.n	71f6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    71f0:	f640 4191 	movw	r1, #3217	; 0xc91
    71f4:	e01f      	b.n	7236 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x17e>
    71f6:	4c24      	ldr	r4, [pc, #144]	; (7288 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d0>)
    71f8:	6820      	ldr	r0, [r4, #0]
    71fa:	7b01      	ldrb	r1, [r0, #12]
    71fc:	b109      	cbz	r1, 7202 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    71fe:	f007 f9bc 	bl	e57a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    7202:	6860      	ldr	r0, [r4, #4]
    7204:	2700      	movs	r7, #0
    7206:	f1b8 0f00 	cmp.w	r8, #0
    720a:	7800      	ldrb	r0, [r0, #0]
    720c:	f000 060f 	and.w	r6, r0, #15
    7210:	d01f      	beq.n	7252 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    7212:	f004 fa7b 	bl	b70c <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>
    7216:	b1e0      	cbz	r0, 7252 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    7218:	4639      	mov	r1, r7
    721a:	6860      	ldr	r0, [r4, #4]
    721c:	f006 fdcb 	bl	ddb6 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    7220:	b1b8      	cbz	r0, 7252 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    7222:	782a      	ldrb	r2, [r5, #0]
    7224:	6820      	ldr	r0, [r4, #0]
    7226:	4631      	mov	r1, r6
    7228:	2a02      	cmp	r2, #2
    722a:	d007      	beq.n	723c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x184>
    722c:	782a      	ldrb	r2, [r5, #0]
    722e:	2a03      	cmp	r2, #3
    7230:	d004      	beq.n	723c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x184>
    7232:	f640 416a 	movw	r1, #3178	; 0xc6a
    7236:	202d      	movs	r0, #45	; 0x2d
    7238:	f7fd fb52 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    723c:	68a2      	ldr	r2, [r4, #8]
    723e:	782b      	ldrb	r3, [r5, #0]
    7240:	6952      	ldr	r2, [r2, #20]
    7242:	f06f 0607 	mvn.w	r6, #7
    7246:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    724a:	58d2      	ldr	r2, [r2, r3]
    724c:	4790      	blx	r2
    724e:	4606      	mov	r6, r0
    7250:	e000      	b.n	7254 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19c>
    7252:	2601      	movs	r6, #1
    7254:	7ba8      	ldrb	r0, [r5, #14]
    7256:	b118      	cbz	r0, 7260 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1a8>
    7258:	f004 f84a 	bl	b2f0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    725c:	f003 fe8c 	bl	af78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7260:	2e00      	cmp	r6, #0
    7262:	d00d      	beq.n	7280 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1c8>
    7264:	6820      	ldr	r0, [r4, #0]
    7266:	f007 fa42 	bl	e6ee <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    726a:	b120      	cbz	r0, 7276 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1be>
    726c:	68a0      	ldr	r0, [r4, #8]
    726e:	6880      	ldr	r0, [r0, #8]
    7270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7274:	4700      	bx	r0
    7276:	6820      	ldr	r0, [r4, #0]
    7278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    727c:	f000 ba8e 	b.w	779c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    7280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7284:	20000f04 	.word	0x20000f04
    7288:	20000100 	.word	0x20000100
    728c:	b510      	push	{r4, lr}
    728e:	2903      	cmp	r1, #3
    7290:	d002      	beq.n	7298 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e0>
    7292:	2905      	cmp	r1, #5
    7294:	d10a      	bne.n	72ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f4>
    7296:	e002      	b.n	729e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e6>
    7298:	f000 fb5a 	bl	7950 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x58c>
    729c:	e003      	b.n	72a6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ee>
    729e:	4904      	ldr	r1, [pc, #16]	; (72b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>)
    72a0:	6809      	ldr	r1, [r1, #0]
    72a2:	b109      	cbz	r1, 72a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f0>
    72a4:	4788      	blx	r1
    72a6:	b108      	cbz	r0, 72ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f4>
    72a8:	2000      	movs	r0, #0
    72aa:	bd10      	pop	{r4, pc}
    72ac:	2001      	movs	r0, #1
    72ae:	bd10      	pop	{r4, pc}
    72b0:	2000010c 	.word	0x2000010c
    72b4:	4a09      	ldr	r2, [pc, #36]	; (72dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x224>)
    72b6:	0003      	movs	r3, r0
    72b8:	6810      	ldr	r0, [r2, #0]
    72ba:	d001      	beq.n	72c0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    72bc:	f000 ba6e 	b.w	779c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    72c0:	2900      	cmp	r1, #0
    72c2:	d009      	beq.n	72d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    72c4:	6891      	ldr	r1, [r2, #8]
    72c6:	4a06      	ldr	r2, [pc, #24]	; (72e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x228>)
    72c8:	6909      	ldr	r1, [r1, #16]
    72ca:	7812      	ldrb	r2, [r2, #0]
    72cc:	f06f 030f 	mvn.w	r3, #15
    72d0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    72d4:	5889      	ldr	r1, [r1, r2]
    72d6:	4708      	bx	r1
    72d8:	4770      	bx	lr
    72da:	0000      	.short	0x0000
    72dc:	20000100 	.word	0x20000100
    72e0:	20000f04 	.word	0x20000f04
    72e4:	b570      	push	{r4, r5, r6, lr}
    72e6:	4604      	mov	r4, r0
    72e8:	8840      	ldrh	r0, [r0, #2]
    72ea:	2500      	movs	r5, #0
    72ec:	2810      	cmp	r0, #16
    72ee:	d014      	beq.n	731a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x262>
    72f0:	4e14      	ldr	r6, [pc, #80]	; (7344 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x28c>)
    72f2:	7bb0      	ldrb	r0, [r6, #14]
    72f4:	b120      	cbz	r0, 7300 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x248>
    72f6:	f003 fe5f 	bl	afb8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    72fa:	2040      	movs	r0, #64	; 0x40
    72fc:	f004 f808 	bl	b310 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    7300:	4811      	ldr	r0, [pc, #68]	; (7348 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    7302:	6840      	ldr	r0, [r0, #4]
    7304:	f004 fac2 	bl	b88c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7308:	78a0      	ldrb	r0, [r4, #2]
    730a:	0740      	lsls	r0, r0, #29
    730c:	d413      	bmi.n	7336 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x27e>
    730e:	7be0      	ldrb	r0, [r4, #15]
    7310:	2801      	cmp	r0, #1
    7312:	d008      	beq.n	7326 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x26e>
    7314:	2803      	cmp	r0, #3
    7316:	d006      	beq.n	7326 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x26e>
    7318:	e006      	b.n	7328 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x270>
    731a:	4620      	mov	r0, r4
    731c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7320:	2101      	movs	r1, #1
    7322:	f7ff bed1 	b.w	70c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7326:	2510      	movs	r5, #16
    7328:	2100      	movs	r1, #0
    732a:	f045 020e 	orr.w	r2, r5, #14
    732e:	7923      	ldrb	r3, [r4, #4]
    7330:	4608      	mov	r0, r1
    7332:	f004 fb35 	bl	b9a0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7336:	2000      	movs	r0, #0
    7338:	f004 f940 	bl	b5bc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    733c:	2002      	movs	r0, #2
    733e:	7030      	strb	r0, [r6, #0]
    7340:	bd70      	pop	{r4, r5, r6, pc}
    7342:	0000      	.short	0x0000
    7344:	20000f04 	.word	0x20000f04
    7348:	20000100 	.word	0x20000100
    734c:	b510      	push	{r4, lr}
    734e:	4c12      	ldr	r4, [pc, #72]	; (7398 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e0>)
    7350:	6820      	ldr	r0, [r4, #0]
    7352:	f000 f825 	bl	73a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>
    7356:	6820      	ldr	r0, [r4, #0]
    7358:	f007 f9c9 	bl	e6ee <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    735c:	2800      	cmp	r0, #0
    735e:	6820      	ldr	r0, [r4, #0]
    7360:	d00b      	beq.n	737a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c2>
    7362:	490e      	ldr	r1, [pc, #56]	; (739c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    7364:	780a      	ldrb	r2, [r1, #0]
    7366:	2a02      	cmp	r2, #2
    7368:	d00b      	beq.n	7382 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ca>
    736a:	780a      	ldrb	r2, [r1, #0]
    736c:	2a03      	cmp	r2, #3
    736e:	d008      	beq.n	7382 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ca>
    7370:	f640 31a5 	movw	r1, #2981	; 0xba5
    7374:	202d      	movs	r0, #45	; 0x2d
    7376:	f7fd fab3 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    737a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    737e:	f000 ba0d 	b.w	779c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    7382:	68a2      	ldr	r2, [r4, #8]
    7384:	7809      	ldrb	r1, [r1, #0]
    7386:	68d2      	ldr	r2, [r2, #12]
    7388:	f06f 0307 	mvn.w	r3, #7
    738c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    7390:	5851      	ldr	r1, [r2, r1]
    7392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7396:	4708      	bx	r1
    7398:	20000100 	.word	0x20000100
    739c:	20000f04 	.word	0x20000f04
    73a0:	b510      	push	{r4, lr}
    73a2:	7b01      	ldrb	r1, [r0, #12]
    73a4:	b109      	cbz	r1, 73aa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f2>
    73a6:	f007 f8e8 	bl	e57a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    73aa:	4805      	ldr	r0, [pc, #20]	; (73c0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x308>)
    73ac:	7b80      	ldrb	r0, [r0, #14]
    73ae:	2800      	cmp	r0, #0
    73b0:	d005      	beq.n	73be <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x306>
    73b2:	f003 ff9d 	bl	b2f0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    73b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    73ba:	f003 bddd 	b.w	af78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    73be:	bd10      	pop	{r4, pc}
    73c0:	20000f04 	.word	0x20000f04

000073c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    73c4:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    73c8:	4d5a      	ldr	r5, [pc, #360]	; (7534 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>)
    73ca:	4604      	mov	r4, r0
    73cc:	7828      	ldrb	r0, [r5, #0]
    73ce:	bbe8      	cbnz	r0, 744c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x88>
    73d0:	7820      	ldrb	r0, [r4, #0]
    73d2:	28ff      	cmp	r0, #255	; 0xff
    73d4:	d049      	beq.n	746a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    73d6:	f04f 0900 	mov.w	r9, #0
    73da:	f8a5 900c 	strh.w	r9, [r5, #12]
    73de:	f8c5 9004 	str.w	r9, [r5, #4]
    73e2:	f885 9001 	strb.w	r9, [r5, #1]
    73e6:	f885 9002 	strb.w	r9, [r5, #2]
    73ea:	f884 9061 	strb.w	r9, [r4, #97]	; 0x61
    73ee:	4648      	mov	r0, r9
    73f0:	f004 f94c 	bl	b68c <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    73f4:	4b50      	ldr	r3, [pc, #320]	; (7538 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    73f6:	f8df a144 	ldr.w	sl, [pc, #324]	; 753c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    73fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    73fc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    7400:	f8da 0008 	ldr.w	r0, [sl, #8]
    7404:	6840      	ldr	r0, [r0, #4]
    7406:	9003      	str	r0, [sp, #12]
    7408:	4668      	mov	r0, sp
    740a:	f004 f8ab 	bl	b564 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    740e:	f004 f9af 	bl	b770 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    7412:	f003 ff6d 	bl	b2f0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7416:	f003 fdaf 	bl	af78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    741a:	4847      	ldr	r0, [pc, #284]	; (7538 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    741c:	1f40      	subs	r0, r0, #5
    741e:	f004 fb11 	bl	ba44 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    7422:	4845      	ldr	r0, [pc, #276]	; (7538 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    7424:	3808      	subs	r0, #8
    7426:	f004 fb19 	bl	ba5c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    742a:	f104 0020 	add.w	r0, r4, #32
    742e:	4606      	mov	r6, r0
    7430:	f007 f910 	bl	e654 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7434:	4630      	mov	r0, r6
    7436:	f007 f8d2 	bl	e5de <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    743a:	4601      	mov	r1, r0
    743c:	4620      	mov	r0, r4
    743e:	f007 f891 	bl	e564 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    7442:	f994 000e 	ldrsb.w	r0, [r4, #14]
    7446:	f004 fa1b 	bl	b880 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    744a:	e000      	b.n	744e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    744c:	e00d      	b.n	746a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    744e:	7921      	ldrb	r1, [r4, #4]
    7450:	2000      	movs	r0, #0
    7452:	f004 f80b 	bl	b46c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    7456:	2601      	movs	r6, #1
    7458:	60a8      	str	r0, [r5, #8]
    745a:	b150      	cbz	r0, 7472 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    745c:	210f      	movs	r1, #15
    745e:	2005      	movs	r0, #5
    7460:	f003 ff6a 	bl	b338 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>
    7464:	7ea0      	ldrb	r0, [r4, #26]
    7466:	b958      	cbnz	r0, 7480 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc>
    7468:	e005      	b.n	7476 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb2>
    746a:	200c      	movs	r0, #12
    746c:	b004      	add	sp, #16
    746e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    7472:	702e      	strb	r6, [r5, #0]
    7474:	e05b      	b.n	752e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16a>
    7476:	7e20      	ldrb	r0, [r4, #24]
    7478:	b910      	cbnz	r0, 7480 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc>
    747a:	78a0      	ldrb	r0, [r4, #2]
    747c:	0740      	lsls	r0, r0, #29
    747e:	d52b      	bpl.n	74d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    7480:	f004 fec3 	bl	c20a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7484:	4683      	mov	fp, r0
    7486:	4659      	mov	r1, fp
    7488:	6c60      	ldr	r0, [r4, #68]	; 0x44
    748a:	f7fa fee5 	bl	2258 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    748e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 7540 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>
    7492:	4607      	mov	r7, r0
    7494:	fb90 f1f8 	sdiv	r1, r0, r8
    7498:	fb08 7011 	mls	r0, r8, r1, r7
    749c:	4241      	negs	r1, r0
    749e:	4658      	mov	r0, fp
    74a0:	f7fa fea8 	bl	21f4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    74a4:	6460      	str	r0, [r4, #68]	; 0x44
    74a6:	fb97 f0f8 	sdiv	r0, r7, r8
    74aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
    74ac:	4408      	add	r0, r1
    74ae:	6420      	str	r0, [r4, #64]	; 0x40
    74b0:	f7fe ff6a 	bl	6388 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    74b4:	6c21      	ldr	r1, [r4, #64]	; 0x40
    74b6:	4288      	cmp	r0, r1
    74b8:	d80e      	bhi.n	74d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    74ba:	e9c4 9b10 	strd	r9, fp, [r4, #64]	; 0x40
    74be:	2101      	movs	r1, #1
    74c0:	4620      	mov	r0, r4
    74c2:	f007 f813 	bl	e4ec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    74c6:	78a0      	ldrb	r0, [r4, #2]
    74c8:	0740      	lsls	r0, r0, #29
    74ca:	d505      	bpl.n	74d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    74cc:	7e20      	ldrb	r0, [r4, #24]
    74ce:	b118      	cbz	r0, 74d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    74d0:	2101      	movs	r1, #1
    74d2:	4620      	mov	r0, r4
    74d4:	f000 fa76 	bl	79c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x600>
    74d8:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    74dc:	f104 0049 	add.w	r0, r4, #73	; 0x49
    74e0:	f004 faa4 	bl	ba2c <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>
    74e4:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
    74e8:	2802      	cmp	r0, #2
    74ea:	d10a      	bne.n	7502 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13e>
    74ec:	4622      	mov	r2, r4
    74ee:	e9d2 3719 	ldrd	r3, r7, [r2, #100]	; 0x64
    74f2:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    74f6:	e9c4 370c 	strd	r3, r7, [r4, #48]	; 0x30
    74fa:	e9c4 0119 	strd	r0, r1, [r4, #100]	; 0x64
    74fe:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
    7502:	f894 0075 	ldrb.w	r0, [r4, #117]	; 0x75
    7506:	2802      	cmp	r0, #2
    7508:	d109      	bne.n	751e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15a>
    750a:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    750e:	e9d4 231b 	ldrd	r2, r3, [r4, #108]	; 0x6c
    7512:	e9c4 101b 	strd	r1, r0, [r4, #108]	; 0x6c
    7516:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    751a:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
    751e:	f7fe ff99 	bl	6454 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    7522:	2103      	movs	r1, #3
    7524:	f8da 0004 	ldr.w	r0, [sl, #4]
    7528:	f006 f8d0 	bl	d6cc <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    752c:	73a8      	strb	r0, [r5, #14]
    752e:	2000      	movs	r0, #0
    7530:	e79c      	b.n	746c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa8>
    7532:	0000      	.short	0x0000
    7534:	20000f04 	.word	0x20000f04
    7538:	00007adc 	.word	0x00007adc
    753c:	20000100 	.word	0x20000100
    7540:	000f4240 	.word	0x000f4240
    7544:	b510      	push	{r4, lr}
    7546:	4604      	mov	r4, r0
    7548:	f7ff ff3c 	bl	73c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    754c:	2800      	cmp	r0, #0
    754e:	d108      	bne.n	7562 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19e>
    7550:	4804      	ldr	r0, [pc, #16]	; (7564 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1a0>)
    7552:	7800      	ldrb	r0, [r0, #0]
    7554:	2801      	cmp	r0, #1
    7556:	d003      	beq.n	7560 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>
    7558:	2100      	movs	r1, #0
    755a:	4620      	mov	r0, r4
    755c:	f7ff fdb4 	bl	70c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7560:	2000      	movs	r0, #0
    7562:	bd10      	pop	{r4, pc}
    7564:	20000f04 	.word	0x20000f04
    7568:	480a      	ldr	r0, [pc, #40]	; (7594 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
    756a:	b510      	push	{r4, lr}
    756c:	490a      	ldr	r1, [pc, #40]	; (7598 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>)
    756e:	6804      	ldr	r4, [r0, #0]
    7570:	7808      	ldrb	r0, [r1, #0]
    7572:	2800      	cmp	r0, #0
    7574:	d00d      	beq.n	7592 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ce>
    7576:	7808      	ldrb	r0, [r1, #0]
    7578:	2802      	cmp	r0, #2
    757a:	d002      	beq.n	7582 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1be>
    757c:	7808      	ldrb	r0, [r1, #0]
    757e:	2803      	cmp	r0, #3
    7580:	d102      	bne.n	7588 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c4>
    7582:	4620      	mov	r0, r4
    7584:	f7ff ff0c 	bl	73a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>
    7588:	4620      	mov	r0, r4
    758a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    758e:	f000 b905 	b.w	779c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    7592:	bd10      	pop	{r4, pc}
    7594:	20000100 	.word	0x20000100
    7598:	20000f04 	.word	0x20000f04
    759c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75a0:	4604      	mov	r4, r0
    75a2:	4827      	ldr	r0, [pc, #156]	; (7640 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
    75a4:	460d      	mov	r5, r1
    75a6:	6840      	ldr	r0, [r0, #4]
    75a8:	f004 f970 	bl	b88c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    75ac:	4e25      	ldr	r6, [pc, #148]	; (7644 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>)
    75ae:	2004      	movs	r0, #4
    75b0:	7030      	strb	r0, [r6, #0]
    75b2:	b325      	cbz	r5, 75fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x23a>
    75b4:	8860      	ldrh	r0, [r4, #2]
    75b6:	2810      	cmp	r0, #16
    75b8:	d02a      	beq.n	7610 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24c>
    75ba:	f104 0020 	add.w	r0, r4, #32
    75be:	4680      	mov	r8, r0
    75c0:	68b5      	ldr	r5, [r6, #8]
    75c2:	f007 f800 	bl	e5c6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    75c6:	4607      	mov	r7, r0
    75c8:	4640      	mov	r0, r8
    75ca:	f007 f825 	bl	e618 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    75ce:	1a38      	subs	r0, r7, r0
    75d0:	1e40      	subs	r0, r0, #1
    75d2:	b2c0      	uxtb	r0, r0
    75d4:	8861      	ldrh	r1, [r4, #2]
    75d6:	2228      	movs	r2, #40	; 0x28
    75d8:	f000 fabc 	bl	7b54 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    75dc:	4405      	add	r5, r0
    75de:	78a0      	ldrb	r0, [r4, #2]
    75e0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    75e4:	b130      	cbz	r0, 75f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x230>
    75e6:	6870      	ldr	r0, [r6, #4]
    75e8:	4405      	add	r5, r0
    75ea:	f007 f86e 	bl	e6ca <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    75ee:	4428      	add	r0, r5
    75f0:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    75f4:	7922      	ldrb	r2, [r4, #4]
    75f6:	4629      	mov	r1, r5
    75f8:	2000      	movs	r0, #0
    75fa:	f004 f955 	bl	b8a8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    75fe:	8860      	ldrh	r0, [r4, #2]
    7600:	2813      	cmp	r0, #19
    7602:	d013      	beq.n	762c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    7604:	dc09      	bgt.n	761a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    7606:	2810      	cmp	r0, #16
    7608:	d018      	beq.n	763c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x278>
    760a:	2812      	cmp	r0, #18
    760c:	d109      	bne.n	7622 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25e>
    760e:	e00d      	b.n	762c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    7610:	7921      	ldrb	r1, [r4, #4]
    7612:	2000      	movs	r0, #0
    7614:	f003 fede 	bl	b3d4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    7618:	e7f1      	b.n	75fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x23a>
    761a:	2815      	cmp	r0, #21
    761c:	d006      	beq.n	762c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    761e:	281d      	cmp	r0, #29
    7620:	d004      	beq.n	762c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    7622:	f640 511c 	movw	r1, #3356	; 0xd1c
    7626:	202d      	movs	r0, #45	; 0x2d
    7628:	f7fd f95a 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    762c:	7923      	ldrb	r3, [r4, #4]
    762e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7632:	2201      	movs	r2, #1
    7634:	4611      	mov	r1, r2
    7636:	2000      	movs	r0, #0
    7638:	f004 b9b2 	b.w	b9a0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    763c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7640:	20000100 	.word	0x20000100
    7644:	20000f04 	.word	0x20000f04
    7648:	b510      	push	{r4, lr}
    764a:	4604      	mov	r4, r0
    764c:	7800      	ldrb	r0, [r0, #0]
    764e:	460b      	mov	r3, r1
    7650:	f884 00a9 	strb.w	r0, [r4, #169]	; 0xa9
    7654:	29ff      	cmp	r1, #255	; 0xff
    7656:	d010      	beq.n	767a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b6>
    7658:	f104 02ab 	add.w	r2, r4, #171	; 0xab
    765c:	1e51      	subs	r1, r2, #1
    765e:	4618      	mov	r0, r3
    7660:	f7fe fe10 	bl	6284 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7664:	b130      	cbz	r0, 7674 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b0>
    7666:	f894 00aa 	ldrb.w	r0, [r4, #170]	; 0xaa
    766a:	f040 0002 	orr.w	r0, r0, #2
    766e:	f884 00aa 	strb.w	r0, [r4, #170]	; 0xaa
    7672:	e011      	b.n	7698 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d4>
    7674:	f640 712c 	movw	r1, #3884	; 0xf2c
    7678:	e01d      	b.n	76b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f2>
    767a:	4810      	ldr	r0, [pc, #64]	; (76bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f8>)
    767c:	6840      	ldr	r0, [r0, #4]
    767e:	7801      	ldrb	r1, [r0, #0]
    7680:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7684:	f884 10aa 	strb.w	r1, [r4, #170]	; 0xaa
    7688:	f8d0 1003 	ldr.w	r1, [r0, #3]
    768c:	f8c4 10ab 	str.w	r1, [r4, #171]	; 0xab
    7690:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    7694:	f8a4 00af 	strh.w	r0, [r4, #175]	; 0xaf
    7698:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    769c:	287f      	cmp	r0, #127	; 0x7f
    769e:	d008      	beq.n	76b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ee>
    76a0:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
    76a4:	207f      	movs	r0, #127	; 0x7f
    76a6:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    76aa:	3492      	adds	r4, #146	; 0x92
    76ac:	2001      	movs	r0, #1
    76ae:	75a0      	strb	r0, [r4, #22]
    76b0:	bd10      	pop	{r4, pc}
    76b2:	f640 51ce 	movw	r1, #3534	; 0xdce
    76b6:	202d      	movs	r0, #45	; 0x2d
    76b8:	f7fd f912 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    76bc:	20000100 	.word	0x20000100
    76c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    76c4:	4604      	mov	r4, r0
    76c6:	8840      	ldrh	r0, [r0, #2]
    76c8:	4617      	mov	r7, r2
    76ca:	4688      	mov	r8, r1
    76cc:	2903      	cmp	r1, #3
    76ce:	d006      	beq.n	76de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31a>
    76d0:	f000 0501 	and.w	r5, r0, #1
    76d4:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    76d8:	b118      	cbz	r0, 76e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31e>
    76da:	2001      	movs	r0, #1
    76dc:	e002      	b.n	76e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x320>
    76de:	f3c0 0540 	ubfx	r5, r0, #1, #1
    76e2:	2000      	movs	r0, #0
    76e4:	4681      	mov	r9, r0
    76e6:	f003 fe21 	bl	b32c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    76ea:	4606      	mov	r6, r0
    76ec:	f1b8 0f03 	cmp.w	r8, #3
    76f0:	d025      	beq.n	773e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37a>
    76f2:	2001      	movs	r0, #1
    76f4:	4680      	mov	r8, r0
    76f6:	ea35 0509 	bics.w	r5, r5, r9
    76fa:	d046      	beq.n	778a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c6>
    76fc:	4825      	ldr	r0, [pc, #148]	; (7794 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d0>)
    76fe:	7b80      	ldrb	r0, [r0, #14]
    7700:	b138      	cbz	r0, 7712 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    7702:	f005 ffe6 	bl	d6d2 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    7706:	7038      	strb	r0, [r7, #0]
    7708:	28ff      	cmp	r0, #255	; 0xff
    770a:	d002      	beq.n	7712 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    770c:	f7fe fdd4 	bl	62b8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    7710:	4306      	orrs	r6, r0
    7712:	4d21      	ldr	r5, [pc, #132]	; (7798 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>)
    7714:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    7718:	6868      	ldr	r0, [r5, #4]
    771a:	7801      	ldrb	r1, [r0, #0]
    771c:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7720:	4291      	cmp	r1, r2
    7722:	d106      	bne.n	7732 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36e>
    7724:	2206      	movs	r2, #6
    7726:	f104 0150 	add.w	r1, r4, #80	; 0x50
    772a:	1cc0      	adds	r0, r0, #3
    772c:	f004 fedb 	bl	c4e6 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    7730:	b138      	cbz	r0, 7742 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37e>
    7732:	2000      	movs	r0, #0
    7734:	7839      	ldrb	r1, [r7, #0]
    7736:	29ff      	cmp	r1, #255	; 0xff
    7738:	d009      	beq.n	774e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38a>
    773a:	b9b8      	cbnz	r0, 776c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    773c:	e003      	b.n	7746 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x382>
    773e:	2002      	movs	r0, #2
    7740:	e7d8      	b.n	76f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    7742:	2001      	movs	r0, #1
    7744:	e7f6      	b.n	7734 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x370>
    7746:	7e60      	ldrb	r0, [r4, #25]
    7748:	4288      	cmp	r0, r1
    774a:	d00f      	beq.n	776c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    774c:	e008      	b.n	7760 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39c>
    774e:	b138      	cbz	r0, 7760 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39c>
    7750:	6869      	ldr	r1, [r5, #4]
    7752:	f811 0b03 	ldrb.w	r0, [r1], #3
    7756:	f3c0 1080 	ubfx	r0, r0, #6, #1
    775a:	f006 fe85 	bl	e468 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    775e:	b128      	cbz	r0, 776c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    7760:	2000      	movs	r0, #0
    7762:	78a1      	ldrb	r1, [r4, #2]
    7764:	0749      	lsls	r1, r1, #29
    7766:	d503      	bpl.n	7770 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ac>
    7768:	b990      	cbnz	r0, 7790 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    776a:	e00e      	b.n	778a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c6>
    776c:	2001      	movs	r0, #1
    776e:	e7f8      	b.n	7762 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39e>
    7770:	b976      	cbnz	r6, 7790 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    7772:	7be0      	ldrb	r0, [r4, #15]
    7774:	b108      	cbz	r0, 777a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    7776:	4540      	cmp	r0, r8
    7778:	d107      	bne.n	778a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c6>
    777a:	6869      	ldr	r1, [r5, #4]
    777c:	f811 0b03 	ldrb.w	r0, [r1], #3
    7780:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7784:	f006 fe70 	bl	e468 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    7788:	b110      	cbz	r0, 7790 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    778a:	2000      	movs	r0, #0
    778c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7790:	2001      	movs	r0, #1
    7792:	e7fb      	b.n	778c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    7794:	20000f04 	.word	0x20000f04
    7798:	20000100 	.word	0x20000100
    779c:	b570      	push	{r4, r5, r6, lr}
    779e:	4604      	mov	r4, r0
    77a0:	6a80      	ldr	r0, [r0, #40]	; 0x28
    77a2:	4d10      	ldr	r5, [pc, #64]	; (77e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x420>)
    77a4:	1c40      	adds	r0, r0, #1
    77a6:	62a0      	str	r0, [r4, #40]	; 0x28
    77a8:	7ba8      	ldrb	r0, [r5, #14]
    77aa:	2600      	movs	r6, #0
    77ac:	b120      	cbz	r0, 77b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f4>
    77ae:	f003 fd9f 	bl	b2f0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    77b2:	f003 fbe1 	bl	af78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    77b6:	73ae      	strb	r6, [r5, #14]
    77b8:	702e      	strb	r6, [r5, #0]
    77ba:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    77be:	b108      	cbz	r0, 77c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    77c0:	2101      	movs	r1, #1
    77c2:	e00a      	b.n	77da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x416>
    77c4:	7b60      	ldrb	r0, [r4, #13]
    77c6:	b138      	cbz	r0, 77d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    77c8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    77ca:	4288      	cmp	r0, r1
    77cc:	d804      	bhi.n	77d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    77ce:	2101      	movs	r1, #1
    77d0:	4620      	mov	r0, r4
    77d2:	f006 ffa1 	bl	e718 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    77d6:	bd70      	pop	{r4, r5, r6, pc}
    77d8:	2100      	movs	r1, #0
    77da:	4620      	mov	r0, r4
    77dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    77e0:	f006 bf9a 	b.w	e718 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    77e4:	20000f04 	.word	0x20000f04
    77e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    77ec:	4604      	mov	r4, r0
    77ee:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    77f2:	4690      	mov	r8, r2
    77f4:	460d      	mov	r5, r1
    77f6:	f88d 0000 	strb.w	r0, [sp]
    77fa:	9800      	ldr	r0, [sp, #0]
    77fc:	9000      	str	r0, [sp, #0]
    77fe:	f89d 0000 	ldrb.w	r0, [sp]
    7802:	b110      	cbz	r0, 780a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x446>
    7804:	f640 31d9 	movw	r1, #3033	; 0xbd9
    7808:	e058      	b.n	78bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4f8>
    780a:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
    780e:	8828      	ldrh	r0, [r5, #0]
    7810:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    7814:	2b00      	cmp	r3, #0
    7816:	d163      	bne.n	78e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51c>
    7818:	6868      	ldr	r0, [r5, #4]
    781a:	f005 ffb8 	bl	d78e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    781e:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    7822:	8928      	ldrh	r0, [r5, #8]
    7824:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    7828:	8968      	ldrh	r0, [r5, #10]
    782a:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
    782e:	f895 016d 	ldrb.w	r0, [r5, #365]	; 0x16d
    7832:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
    7836:	7e21      	ldrb	r1, [r4, #24]
    7838:	f104 0649 	add.w	r6, r4, #73	; 0x49
    783c:	2700      	movs	r7, #0
    783e:	f104 0980 	add.w	r9, r4, #128	; 0x80
    7842:	b129      	cbz	r1, 7850 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x48c>
    7844:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7848:	4631      	mov	r1, r6
    784a:	f006 fcf6 	bl	e23a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    784e:	b940      	cbnz	r0, 7862 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49e>
    7850:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    7854:	b170      	cbz	r0, 7874 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b0>
    7856:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    785a:	4631      	mov	r1, r6
    785c:	f006 fce4 	bl	e228 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa4>
    7860:	b140      	cbz	r0, 7874 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b0>
    7862:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    7866:	f8c4 0086 	str.w	r0, [r4, #134]	; 0x86
    786a:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    786e:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    7872:	e003      	b.n	787c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b8>
    7874:	f8c4 7086 	str.w	r7, [r4, #134]	; 0x86
    7878:	f8a4 708a 	strh.w	r7, [r4, #138]	; 0x8a
    787c:	4819      	ldr	r0, [pc, #100]	; (78e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x520>)
    787e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    7882:	6840      	ldr	r0, [r0, #4]
    7884:	7801      	ldrb	r1, [r0, #0]
    7886:	f3c1 1180 	ubfx	r1, r1, #6, #1
    788a:	f884 107f 	strb.w	r1, [r4, #127]	; 0x7f
    788e:	f850 1f03 	ldr.w	r1, [r0, #3]!
    7892:	d016      	beq.n	78c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fe>
    7894:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    7898:	8880      	ldrh	r0, [r0, #4]
    789a:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    789e:	464a      	mov	r2, r9
    78a0:	f104 017f 	add.w	r1, r4, #127	; 0x7f
    78a4:	4640      	mov	r0, r8
    78a6:	f7fe fced 	bl	6284 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    78aa:	b128      	cbz	r0, 78b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4f4>
    78ac:	f814 0f7f 	ldrb.w	r0, [r4, #127]!
    78b0:	f040 0002 	orr.w	r0, r0, #2
    78b4:	7020      	strb	r0, [r4, #0]
    78b6:	e00c      	b.n	78d2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50e>
    78b8:	f640 31fa 	movw	r1, #3066	; 0xbfa
    78bc:	202d      	movs	r0, #45	; 0x2d
    78be:	f7fd f80f 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    78c2:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    78c6:	8880      	ldrh	r0, [r0, #4]
    78c8:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    78cc:	f844 7f8c 	str.w	r7, [r4, #140]!
    78d0:	80a7      	strh	r7, [r4, #4]
    78d2:	8828      	ldrh	r0, [r5, #0]
    78d4:	f7fd fc38 	bl	5148 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    78d8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    78dc:	f005 bce3 	b.w	d2a6 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    78e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    78e4:	20000100 	.word	0x20000100
    78e8:	b538      	push	{r3, r4, r5, lr}
    78ea:	4604      	mov	r4, r0
    78ec:	20ff      	movs	r0, #255	; 0xff
    78ee:	f88d 0000 	strb.w	r0, [sp]
    78f2:	2501      	movs	r5, #1
    78f4:	466a      	mov	r2, sp
    78f6:	2105      	movs	r1, #5
    78f8:	4620      	mov	r0, r4
    78fa:	f7ff fee1 	bl	76c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>
    78fe:	b300      	cbz	r0, 7942 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x57e>
    7900:	4a11      	ldr	r2, [pc, #68]	; (7948 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x584>)
    7902:	69e0      	ldr	r0, [r4, #28]
    7904:	6852      	ldr	r2, [r2, #4]
    7906:	f810 1f7d 	ldrb.w	r1, [r0, #125]!
    790a:	7812      	ldrb	r2, [r2, #0]
    790c:	f3c2 1240 	ubfx	r2, r2, #5, #1
    7910:	4011      	ands	r1, r2
    7912:	7001      	strb	r1, [r0, #0]
    7914:	2201      	movs	r2, #1
    7916:	4620      	mov	r0, r4
    7918:	69e1      	ldr	r1, [r4, #28]
    791a:	f000 f881 	bl	7a20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    791e:	2300      	movs	r3, #0
    7920:	f89d 2000 	ldrb.w	r2, [sp]
    7924:	4620      	mov	r0, r4
    7926:	69e1      	ldr	r1, [r4, #28]
    7928:	f7ff ff5e 	bl	77e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    792c:	2001      	movs	r0, #1
    792e:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
    7932:	4a06      	ldr	r2, [pc, #24]	; (794c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x588>)
    7934:	2100      	movs	r1, #0
    7936:	69e0      	ldr	r0, [r4, #28]
    7938:	7011      	strb	r1, [r2, #0]
    793a:	2105      	movs	r1, #5
    793c:	f000 fa1a 	bl	7d74 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    7940:	e000      	b.n	7944 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x580>
    7942:	2500      	movs	r5, #0
    7944:	4628      	mov	r0, r5
    7946:	bd38      	pop	{r3, r4, r5, pc}
    7948:	20000100 	.word	0x20000100
    794c:	20000f04 	.word	0x20000f04
    7950:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    7952:	4604      	mov	r4, r0
    7954:	20ff      	movs	r0, #255	; 0xff
    7956:	f88d 0000 	strb.w	r0, [sp]
    795a:	2501      	movs	r5, #1
    795c:	466a      	mov	r2, sp
    795e:	2103      	movs	r1, #3
    7960:	4620      	mov	r0, r4
    7962:	f7ff fead 	bl	76c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>
    7966:	b328      	cbz	r0, 79b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f0>
    7968:	7b20      	ldrb	r0, [r4, #12]
    796a:	b168      	cbz	r0, 7988 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5c4>
    796c:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    7970:	f88d 0004 	strb.w	r0, [sp, #4]
    7974:	9801      	ldr	r0, [sp, #4]
    7976:	9001      	str	r0, [sp, #4]
    7978:	f89d 0004 	ldrb.w	r0, [sp, #4]
    797c:	b920      	cbnz	r0, 7988 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5c4>
    797e:	f89d 1000 	ldrb.w	r1, [sp]
    7982:	4620      	mov	r0, r4
    7984:	f7ff fe60 	bl	7648 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    7988:	4e0c      	ldr	r6, [pc, #48]	; (79bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f8>)
    798a:	2100      	movs	r1, #0
    798c:	6870      	ldr	r0, [r6, #4]
    798e:	8001      	strh	r1, [r0, #0]
    7990:	2104      	movs	r1, #4
    7992:	f006 fa5a 	bl	de4a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7996:	4620      	mov	r0, r4
    7998:	f000 f88a 	bl	7ab0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ec>
    799c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    799e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    79a0:	6870      	ldr	r0, [r6, #4]
    79a2:	f006 fa89 	bl	deb8 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    79a6:	4906      	ldr	r1, [pc, #24]	; (79c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5fc>)
    79a8:	2005      	movs	r0, #5
    79aa:	7008      	strb	r0, [r1, #0]
    79ac:	6870      	ldr	r0, [r6, #4]
    79ae:	f003 ff6d 	bl	b88c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    79b2:	e000      	b.n	79b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f2>
    79b4:	2500      	movs	r5, #0
    79b6:	4628      	mov	r0, r5
    79b8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    79ba:	0000      	.short	0x0000
    79bc:	20000100 	.word	0x20000100
    79c0:	20000f04 	.word	0x20000f04
    79c4:	b570      	push	{r4, r5, r6, lr}
    79c6:	4604      	mov	r4, r0
    79c8:	460e      	mov	r6, r1
    79ca:	7e40      	ldrb	r0, [r0, #25]
    79cc:	f7fe fc28 	bl	6220 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    79d0:	0005      	movs	r5, r0
    79d2:	d019      	beq.n	7a08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x644>
    79d4:	2110      	movs	r1, #16
    79d6:	f006 f865 	bl	daa4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    79da:	2800      	cmp	r0, #0
    79dc:	d114      	bne.n	7a08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x644>
    79de:	2001      	movs	r0, #1
    79e0:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    79e4:	f104 0157 	add.w	r1, r4, #87	; 0x57
    79e8:	4632      	mov	r2, r6
    79ea:	460c      	mov	r4, r1
    79ec:	4628      	mov	r0, r5
    79ee:	f005 fe12 	bl	d616 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    79f2:	4621      	mov	r1, r4
    79f4:	4c05      	ldr	r4, [pc, #20]	; (7a0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x648>)
    79f6:	6860      	ldr	r0, [r4, #4]
    79f8:	f006 fa42 	bl	de80 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    79fc:	6860      	ldr	r0, [r4, #4]
    79fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7a02:	2101      	movs	r1, #1
    7a04:	f006 ba42 	b.w	de8c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7a08:	bd70      	pop	{r4, r5, r6, pc}
    7a0a:	0000      	.short	0x0000
    7a0c:	20000100 	.word	0x20000100
    7a10:	4802      	ldr	r0, [pc, #8]	; (7a1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>)
    7a12:	2101      	movs	r1, #1
    7a14:	6800      	ldr	r0, [r0, #0]
    7a16:	f7ff bb57 	b.w	70c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7a1a:	0000      	.short	0x0000
    7a1c:	20000100 	.word	0x20000100
    7a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a24:	4e21      	ldr	r6, [pc, #132]	; (7aac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6e8>)
    7a26:	4680      	mov	r8, r0
    7a28:	460c      	mov	r4, r1
    7a2a:	6870      	ldr	r0, [r6, #4]
    7a2c:	4615      	mov	r5, r2
    7a2e:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    7a32:	60e1      	str	r1, [r4, #12]
    7a34:	8881      	ldrh	r1, [r0, #4]
    7a36:	8221      	strh	r1, [r4, #16]
    7a38:	7981      	ldrb	r1, [r0, #6]
    7a3a:	74a1      	strb	r1, [r4, #18]
    7a3c:	8940      	ldrh	r0, [r0, #10]
    7a3e:	f005 fea2 	bl	d786 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    7a42:	4607      	mov	r7, r0
    7a44:	6060      	str	r0, [r4, #4]
    7a46:	6870      	ldr	r0, [r6, #4]
    7a48:	4639      	mov	r1, r7
    7a4a:	7d80      	ldrb	r0, [r0, #22]
    7a4c:	f006 f825 	bl	da9a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    7a50:	82a0      	strh	r0, [r4, #20]
    7a52:	6870      	ldr	r0, [r6, #4]
    7a54:	4639      	mov	r1, r7
    7a56:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    7a5a:	f006 f81a 	bl	da92 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    7a5e:	61a0      	str	r0, [r4, #24]
    7a60:	6870      	ldr	r0, [r6, #4]
    7a62:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    7a66:	8121      	strh	r1, [r4, #8]
    7a68:	8841      	ldrh	r1, [r0, #2]
    7a6a:	8161      	strh	r1, [r4, #10]
    7a6c:	6841      	ldr	r1, [r0, #4]
    7a6e:	f8c4 107e 	str.w	r1, [r4, #126]	; 0x7e
    7a72:	7a01      	ldrb	r1, [r0, #8]
    7a74:	f884 1082 	strb.w	r1, [r4, #130]	; 0x82
    7a78:	7a41      	ldrb	r1, [r0, #9]
    7a7a:	f001 011f 	and.w	r1, r1, #31
    7a7e:	f884 1089 	strb.w	r1, [r4, #137]	; 0x89
    7a82:	7a40      	ldrb	r0, [r0, #9]
    7a84:	0940      	lsrs	r0, r0, #5
    7a86:	f884 016d 	strb.w	r0, [r4, #365]	; 0x16d
    7a8a:	f104 005a 	add.w	r0, r4, #90	; 0x5a
    7a8e:	2101      	movs	r1, #1
    7a90:	7205      	strb	r5, [r0, #8]
    7a92:	7245      	strb	r5, [r0, #9]
    7a94:	7281      	strb	r1, [r0, #10]
    7a96:	2100      	movs	r1, #0
    7a98:	3836      	subs	r0, #54	; 0x36
    7a9a:	f006 fb48 	bl	e12e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    7a9e:	f898 000e 	ldrb.w	r0, [r8, #14]
    7aa2:	f884 0066 	strb.w	r0, [r4, #102]	; 0x66
    7aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7aaa:	0000      	.short	0x0000
    7aac:	20000100 	.word	0x20000100
    7ab0:	b570      	push	{r4, r5, r6, lr}
    7ab2:	4d07      	ldr	r5, [pc, #28]	; (7ad0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x70c>)
    7ab4:	4604      	mov	r4, r0
    7ab6:	f100 0149 	add.w	r1, r0, #73	; 0x49
    7aba:	6868      	ldr	r0, [r5, #4]
    7abc:	f006 f9ed 	bl	de9a <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7ac0:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    7ac4:	6868      	ldr	r0, [r5, #4]
    7ac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7aca:	f006 b9ec 	b.w	dea6 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    7ace:	0000      	.short	0x0000
    7ad0:	20000100 	.word	0x20000100
    7ad4:	d6555555 	.word	0xd6555555
    7ad8:	008e89be 	.word	0x008e89be
    7adc:	0000734d 	.word	0x0000734d
    7ae0:	000071dd 	.word	0x000071dd
    7ae4:	000072b5 	.word	0x000072b5
    7ae8:	00000000 	.word	0x00000000
    7aec:	0000728d 	.word	0x0000728d
    7af0:	000072e5 	.word	0x000072e5
    7af4:	0000e48f 	.word	0x0000e48f
    7af8:	0000e495 	.word	0x0000e495
    7afc:	00007545 	.word	0x00007545
    7b00:	00007569 	.word	0x00007569
    7b04:	00007a11 	.word	0x00007a11
    7b08:	00007af8 	.word	0x00007af8
    7b0c:	00007af0 	.word	0x00007af0
    7b10:	00007aec 	.word	0x00007aec

00007b14 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    7b14:	b510      	push	{r4, lr}
    7b16:	1e42      	subs	r2, r0, #1
    7b18:	2a02      	cmp	r2, #2
    7b1a:	d901      	bls.n	7b20 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    7b1c:	21ca      	movs	r1, #202	; 0xca
    7b1e:	e009      	b.n	7b34 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    7b20:	1e40      	subs	r0, r0, #1
    7b22:	2910      	cmp	r1, #16
    7b24:	d009      	beq.n	7b3a <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    7b26:	2912      	cmp	r1, #18
    7b28:	d00c      	beq.n	7b44 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    7b2a:	2913      	cmp	r1, #19
    7b2c:	d00a      	beq.n	7b44 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    7b2e:	2915      	cmp	r1, #21
    7b30:	d005      	beq.n	7b3e <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    7b32:	21d8      	movs	r1, #216	; 0xd8
    7b34:	202f      	movs	r0, #47	; 0x2f
    7b36:	f7fc fed3 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b3a:	4905      	ldr	r1, [pc, #20]	; (7b50 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7b3c:	e004      	b.n	7b48 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    7b3e:	4904      	ldr	r1, [pc, #16]	; (7b50 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7b40:	1d89      	adds	r1, r1, #6
    7b42:	e001      	b.n	7b48 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    7b44:	4902      	ldr	r1, [pc, #8]	; (7b50 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7b46:	1f89      	subs	r1, r1, #6
    7b48:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7b4c:	bd10      	pop	{r4, pc}
    7b4e:	0000      	.short	0x0000
    7b50:	0000e6e2 	.word	0x0000e6e2

00007b54 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    7b54:	1e42      	subs	r2, r0, #1
    7b56:	b510      	push	{r4, lr}
    7b58:	b2d2      	uxtb	r2, r2
    7b5a:	2a01      	cmp	r2, #1
    7b5c:	d903      	bls.n	7b66 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    7b5e:	291d      	cmp	r1, #29
    7b60:	d001      	beq.n	7b66 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    7b62:	21ee      	movs	r1, #238	; 0xee
    7b64:	e00d      	b.n	7b82 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    7b66:	2913      	cmp	r1, #19
    7b68:	d013      	beq.n	7b92 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    7b6a:	dc04      	bgt.n	7b76 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    7b6c:	2910      	cmp	r1, #16
    7b6e:	d00b      	beq.n	7b88 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    7b70:	2912      	cmp	r1, #18
    7b72:	d104      	bne.n	7b7e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    7b74:	e00d      	b.n	7b92 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    7b76:	2915      	cmp	r1, #21
    7b78:	d008      	beq.n	7b8c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    7b7a:	291d      	cmp	r1, #29
    7b7c:	d00e      	beq.n	7b9c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    7b7e:	f44f 7181 	mov.w	r1, #258	; 0x102
    7b82:	202f      	movs	r0, #47	; 0x2f
    7b84:	f7fc feac 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b88:	4807      	ldr	r0, [pc, #28]	; (7ba8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7b8a:	e004      	b.n	7b96 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    7b8c:	4806      	ldr	r0, [pc, #24]	; (7ba8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7b8e:	3008      	adds	r0, #8
    7b90:	e001      	b.n	7b96 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    7b92:	4805      	ldr	r0, [pc, #20]	; (7ba8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7b94:	1d00      	adds	r0, r0, #4
    7b96:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    7b9a:	bd10      	pop	{r4, pc}
    7b9c:	f240 315a 	movw	r1, #858	; 0x35a
    7ba0:	fb10 f001 	smulbb	r0, r0, r1
    7ba4:	bd10      	pop	{r4, pc}
    7ba6:	0000      	.short	0x0000
    7ba8:	0000e6d0 	.word	0x0000e6d0

00007bac <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>:
    7bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7bb0:	4604      	mov	r4, r0
    7bb2:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    7bb6:	4615      	mov	r5, r2
    7bb8:	460f      	mov	r7, r1
    7bba:	2800      	cmp	r0, #0
    7bbc:	d15d      	bne.n	7c7a <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xce>
    7bbe:	4621      	mov	r1, r4
    7bc0:	4844      	ldr	r0, [pc, #272]	; (7cd4 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x128>)
    7bc2:	f7fb f9d3 	bl	2f6c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7bc6:	4606      	mov	r6, r0
    7bc8:	2820      	cmp	r0, #32
    7bca:	d056      	beq.n	7c7a <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xce>
    7bcc:	2234      	movs	r2, #52	; 0x34
    7bce:	2100      	movs	r1, #0
    7bd0:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    7bd4:	f004 fd13 	bl	c5fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7bd8:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
    7bdc:	2601      	movs	r6, #1
    7bde:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
    7be2:	f884 60c8 	strb.w	r6, [r4, #200]	; 0xc8
    7be6:	b15f      	cbz	r7, 7c00 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x54>
    7be8:	2101      	movs	r1, #1
    7bea:	f507 708e 	add.w	r0, r7, #284	; 0x11c
    7bee:	f7fc ff2b 	bl	4a48 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    7bf2:	f897 011c 	ldrb.w	r0, [r7, #284]	; 0x11c
    7bf6:	f000 0007 	and.w	r0, r0, #7
    7bfa:	1c40      	adds	r0, r0, #1
    7bfc:	f887 011c 	strb.w	r0, [r7, #284]	; 0x11c
    7c00:	4620      	mov	r0, r4
    7c02:	f006 ff13 	bl	ea2c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x22a>
    7c06:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    7c0a:	2003      	movs	r0, #3
    7c0c:	f884 00d6 	strb.w	r0, [r4, #214]	; 0xd6
    7c10:	f884 60d7 	strb.w	r6, [r4, #215]	; 0xd7
    7c14:	2700      	movs	r7, #0
    7c16:	f804 7fcc 	strb.w	r7, [r4, #204]!
    7c1a:	f7fa fc41 	bl	24a0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7c1e:	8921      	ldrh	r1, [r4, #8]
    7c20:	3ccc      	subs	r4, #204	; 0xcc
    7c22:	4288      	cmp	r0, r1
    7c24:	d800      	bhi.n	7c28 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x7c>
    7c26:	4608      	mov	r0, r1
    7c28:	f200 60bf 	addw	r0, r0, #1727	; 0x6bf
    7c2c:	fa1f f880 	uxth.w	r8, r0
    7c30:	4620      	mov	r0, r4
    7c32:	f006 fb9f 	bl	e374 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    7c36:	b318      	cbz	r0, 7c80 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xd4>
    7c38:	4827      	ldr	r0, [pc, #156]	; (7cd8 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x12c>)
    7c3a:	7800      	ldrb	r0, [r0, #0]
    7c3c:	f000 f8e4 	bl	7e08 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    7c40:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    7c44:	b281      	uxth	r1, r0
    7c46:	4628      	mov	r0, r5
    7c48:	f004 fb1e 	bl	c288 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7c4c:	4428      	add	r0, r5
    7c4e:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
    7c52:	34b8      	adds	r4, #184	; 0xb8
    7c54:	f004 fad9 	bl	c20a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7c58:	4641      	mov	r1, r8
    7c5a:	f7fa facb 	bl	21f4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7c5e:	6220      	str	r0, [r4, #32]
    7c60:	f804 7c03 	strb.w	r7, [r4, #-3]
    7c64:	7126      	strb	r6, [r4, #4]
    7c66:	2001      	movs	r0, #1
    7c68:	f006 fd2b 	bl	e6c2 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7c6c:	f200 1007 	addw	r0, r0, #263	; 0x107
    7c70:	1a28      	subs	r0, r5, r0
    7c72:	62a7      	str	r7, [r4, #40]	; 0x28
    7c74:	60a0      	str	r0, [r4, #8]
    7c76:	3cb8      	subs	r4, #184	; 0xb8
    7c78:	e017      	b.n	7caa <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xfe>
    7c7a:	200c      	movs	r0, #12
    7c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c80:	4620      	mov	r0, r4
    7c82:	f006 fe81 	bl	e988 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x186>
    7c86:	f844 0fd0 	str.w	r0, [r4, #208]!
    7c8a:	f804 6c1b 	strb.w	r6, [r4, #-27]
    7c8e:	f004 fabc 	bl	c20a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7c92:	4606      	mov	r6, r0
    7c94:	2000      	movs	r0, #0
    7c96:	f006 ff78 	bl	eb8a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x388>
    7c9a:	eb00 0108 	add.w	r1, r0, r8
    7c9e:	4630      	mov	r0, r6
    7ca0:	f7fa faa8 	bl	21f4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7ca4:	6125      	str	r5, [r4, #16]
    7ca6:	60a0      	str	r0, [r4, #8]
    7ca8:	3cd0      	subs	r4, #208	; 0xd0
    7caa:	f104 01cc 	add.w	r1, r4, #204	; 0xcc
    7cae:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    7cb2:	f006 feb9 	bl	ea28 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x226>
    7cb6:	b138      	cbz	r0, 7cc8 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x11c>
    7cb8:	f8a4 70dc 	strh.w	r7, [r4, #220]	; 0xdc
    7cbc:	2100      	movs	r1, #0
    7cbe:	4620      	mov	r0, r4
    7cc0:	f006 fbb8 	bl	e434 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    7cc4:	2000      	movs	r0, #0
    7cc6:	e7d9      	b.n	7c7c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xd0>
    7cc8:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
    7ccc:	2030      	movs	r0, #48	; 0x30
    7cce:	f7fc fe07 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cd2:	0000      	.short	0x0000
    7cd4:	000084c1 	.word	0x000084c1
    7cd8:	20000110 	.word	0x20000110

00007cdc <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>:
    7cdc:	4804      	ldr	r0, [pc, #16]	; (7cf0 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x14>)
    7cde:	2101      	movs	r1, #1
    7ce0:	2200      	movs	r2, #0
    7ce2:	7001      	strb	r1, [r0, #0]
    7ce4:	7042      	strb	r2, [r0, #1]
    7ce6:	70c1      	strb	r1, [r0, #3]
    7ce8:	7082      	strb	r2, [r0, #2]
    7cea:	f006 bd57 	b.w	e79c <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    7cee:	0000      	.short	0x0000
    7cf0:	20000110 	.word	0x20000110

00007cf4 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>:
    7cf4:	4901      	ldr	r1, [pc, #4]	; (7cfc <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI+0x8>)
    7cf6:	7008      	strb	r0, [r1, #0]
    7cf8:	4770      	bx	lr
    7cfa:	0000      	.short	0x0000
    7cfc:	20000110 	.word	0x20000110

00007d00 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>:
    7d00:	4901      	ldr	r1, [pc, #4]	; (7d08 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x8>)
    7d02:	7048      	strb	r0, [r1, #1]
    7d04:	4770      	bx	lr
    7d06:	0000      	.short	0x0000
    7d08:	20000110 	.word	0x20000110

00007d0c <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>:
    7d0c:	4905      	ldr	r1, [pc, #20]	; (7d24 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ+0x18>)
    7d0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7d12:	fbb1 f1f2 	udiv	r1, r1, r2
    7d16:	b510      	push	{r4, lr}
    7d18:	f201 218b 	addw	r1, r1, #651	; 0x28b
    7d1c:	f006 fa20 	bl	e160 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    7d20:	b280      	uxth	r0, r0
    7d22:	bd10      	pop	{r4, pc}
    7d24:	0001527d 	.word	0x0001527d

00007d28 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    7d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d2c:	4c10      	ldr	r4, [pc, #64]	; (7d70 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    7d2e:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    7d32:	f003 fcb1 	bl	b698 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7d36:	4606      	mov	r6, r0
    7d38:	7860      	ldrb	r0, [r4, #1]
    7d3a:	b128      	cbz	r0, 7d48 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    7d3c:	4632      	mov	r2, r6
    7d3e:	4639      	mov	r1, r7
    7d40:	4628      	mov	r0, r5
    7d42:	f005 fd2a 	bl	d79a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    7d46:	4605      	mov	r5, r0
    7d48:	6860      	ldr	r0, [r4, #4]
    7d4a:	4285      	cmp	r5, r0
    7d4c:	d005      	beq.n	7d5a <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    7d4e:	68e1      	ldr	r1, [r4, #12]
    7d50:	1a28      	subs	r0, r5, r0
    7d52:	4408      	add	r0, r1
    7d54:	60e0      	str	r0, [r4, #12]
    7d56:	f7fb fa0b 	bl	3170 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7d5a:	6065      	str	r5, [r4, #4]
    7d5c:	42ae      	cmp	r6, r5
    7d5e:	d801      	bhi.n	7d64 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    7d60:	78a0      	ldrb	r0, [r4, #2]
    7d62:	b110      	cbz	r0, 7d6a <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    7d64:	2000      	movs	r0, #0
    7d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d6a:	2001      	movs	r0, #1
    7d6c:	e7fb      	b.n	7d66 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    7d6e:	0000      	.short	0x0000
    7d70:	20000110 	.word	0x20000110

00007d74 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    7d74:	b570      	push	{r4, r5, r6, lr}
    7d76:	4c22      	ldr	r4, [pc, #136]	; (7e00 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c>)
    7d78:	4605      	mov	r5, r0
    7d7a:	2906      	cmp	r1, #6
    7d7c:	d23c      	bcs.n	7df8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x84>
    7d7e:	e8df f001 	tbb	[pc, r1]
    7d82:	0b05      	.short	0x0b05
    7d84:	250f0e03 	.word	0x250f0e03
    7d88:	2100      	movs	r1, #0
    7d8a:	e000      	b.n	7d8e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1a>
    7d8c:	2101      	movs	r1, #1
    7d8e:	4628      	mov	r0, r5
    7d90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7d94:	f000 b94c 	b.w	8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>
    7d98:	2003      	movs	r0, #3
    7d9a:	f885 012c 	strb.w	r0, [r5, #300]	; 0x12c
    7d9e:	bd70      	pop	{r4, r5, r6, pc}
    7da0:	f003 fcae 	bl	b700 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    7da4:	f8c5 0168 	str.w	r0, [r5, #360]	; 0x168
    7da8:	f895 0063 	ldrb.w	r0, [r5, #99]	; 0x63
    7dac:	f008 f826 	bl	fdfc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7db0:	f8d5 1168 	ldr.w	r1, [r5, #360]	; 0x168
    7db4:	1a08      	subs	r0, r1, r0
    7db6:	6861      	ldr	r1, [r4, #4]
    7db8:	4401      	add	r1, r0
    7dba:	6061      	str	r1, [r4, #4]
    7dbc:	68a1      	ldr	r1, [r4, #8]
    7dbe:	4408      	add	r0, r1
    7dc0:	60a0      	str	r0, [r4, #8]
    7dc2:	4628      	mov	r0, r5
    7dc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7dc8:	f000 b8d2 	b.w	7f70 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1fc>
    7dcc:	f003 fc64 	bl	b698 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7dd0:	4601      	mov	r1, r0
    7dd2:	2200      	movs	r2, #0
    7dd4:	69a0      	ldr	r0, [r4, #24]
    7dd6:	f006 fe8d 	bl	eaf4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2f2>
    7dda:	69a0      	ldr	r0, [r4, #24]
    7ddc:	4909      	ldr	r1, [pc, #36]	; (7e04 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x90>)
    7dde:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    7de2:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    7de6:	f7fa ff87 	bl	2cf8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    7dea:	2800      	cmp	r0, #0
    7dec:	d1d7      	bne.n	7d9e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2a>
    7dee:	f240 717a 	movw	r1, #1914	; 0x77a
    7df2:	2030      	movs	r0, #48	; 0x30
    7df4:	f7fc fd74 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7df8:	f240 7191 	movw	r1, #1937	; 0x791
    7dfc:	e7f9      	b.n	7df2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e>
    7dfe:	0000      	.short	0x0000
    7e00:	20000110 	.word	0x20000110
    7e04:	0000ebb5 	.word	0x0000ebb5
    7e08:	b510      	push	{r4, lr}
    7e0a:	280c      	cmp	r0, #12
    7e0c:	d304      	bcc.n	7e18 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa4>
    7e0e:	f44f 7140 	mov.w	r1, #768	; 0x300
    7e12:	2006      	movs	r0, #6
    7e14:	f7fc fd64 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e18:	4901      	ldr	r1, [pc, #4]	; (7e20 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac>)
    7e1a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7e1e:	bd10      	pop	{r4, pc}
    7e20:	0000ec96 	.word	0x0000ec96
    7e24:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    7e26:	4c18      	ldr	r4, [pc, #96]	; (7e88 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x114>)
    7e28:	2001      	movs	r0, #1
    7e2a:	70a0      	strb	r0, [r4, #2]
    7e2c:	f64f 75ff 	movw	r5, #65535	; 0xffff
    7e30:	e00b      	b.n	7e4a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd6>
    7e32:	2100      	movs	r1, #0
    7e34:	f005 fb61 	bl	d4fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7e38:	0006      	movs	r6, r0
    7e3a:	d010      	beq.n	7e5e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xea>
    7e3c:	f896 0160 	ldrb.w	r0, [r6, #352]	; 0x160
    7e40:	f7fa ff8c 	bl	2d5c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7e44:	4630      	mov	r0, r6
    7e46:	f006 fe48 	bl	eada <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    7e4a:	4669      	mov	r1, sp
    7e4c:	2000      	movs	r0, #0
    7e4e:	f005 fb5e 	bl	d50e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7e52:	b180      	cbz	r0, 7e76 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    7e54:	f240 1111 	movw	r1, #273	; 0x111
    7e58:	2030      	movs	r0, #48	; 0x30
    7e5a:	f7fc fd41 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e5e:	f240 1131 	movw	r1, #305	; 0x131
    7e62:	e7f9      	b.n	7e58 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xe4>
    7e64:	9802      	ldr	r0, [sp, #8]
    7e66:	b130      	cbz	r0, 7e76 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    7e68:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    7e6c:	b119      	cbz	r1, 7e76 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    7e6e:	8800      	ldrh	r0, [r0, #0]
    7e70:	42a8      	cmp	r0, r5
    7e72:	d1de      	bne.n	7e32 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbe>
    7e74:	e004      	b.n	7e80 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x10c>
    7e76:	4668      	mov	r0, sp
    7e78:	f7fc ff84 	bl	4d84 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7e7c:	2800      	cmp	r0, #0
    7e7e:	d0f1      	beq.n	7e64 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xf0>
    7e80:	2000      	movs	r0, #0
    7e82:	70a0      	strb	r0, [r4, #2]
    7e84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7e86:	0000      	.short	0x0000
    7e88:	20000110 	.word	0x20000110
    7e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7e90:	4604      	mov	r4, r0
    7e92:	4836      	ldr	r0, [pc, #216]	; (7f6c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1f8>)
    7e94:	461e      	mov	r6, r3
    7e96:	4690      	mov	r8, r2
    7e98:	78c0      	ldrb	r0, [r0, #3]
    7e9a:	4689      	mov	r9, r1
    7e9c:	2500      	movs	r5, #0
    7e9e:	b368      	cbz	r0, 7efc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    7ea0:	f7fc f9c8 	bl	4234 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    7ea4:	b350      	cbz	r0, 7efc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    7ea6:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
    7eaa:	2802      	cmp	r0, #2
    7eac:	d326      	bcc.n	7efc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    7eae:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7eb2:	2802      	cmp	r0, #2
    7eb4:	d022      	beq.n	7efc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    7eb6:	f894 0142 	ldrb.w	r0, [r4, #322]	; 0x142
    7eba:	b9f8      	cbnz	r0, 7efc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    7ebc:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    7ec0:	f7ff ffa2 	bl	7e08 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    7ec4:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    7ec8:	b281      	uxth	r1, r0
    7eca:	8031      	strh	r1, [r6, #0]
    7ecc:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7ed0:	2700      	movs	r7, #0
    7ed2:	2801      	cmp	r0, #1
    7ed4:	d015      	beq.n	7f02 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18e>
    7ed6:	6860      	ldr	r0, [r4, #4]
    7ed8:	f004 f9d6 	bl	c288 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7edc:	f8b4 2106 	ldrh.w	r2, [r4, #262]	; 0x106
    7ee0:	b280      	uxth	r0, r0
    7ee2:	4442      	add	r2, r8
    7ee4:	eba2 0109 	sub.w	r1, r2, r9
    7ee8:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    7eec:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    7ef0:	1a82      	subs	r2, r0, r2
    7ef2:	fb01 7502 	mla	r5, r1, r2, r7
    7ef6:	2001      	movs	r0, #1
    7ef8:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
    7efc:	4628      	mov	r0, r5
    7efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7f02:	f894 0079 	ldrb.w	r0, [r4, #121]	; 0x79
    7f06:	2803      	cmp	r0, #3
    7f08:	d02c      	beq.n	7f64 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1f0>
    7f0a:	2101      	movs	r1, #1
    7f0c:	2000      	movs	r0, #0
    7f0e:	f005 fcfe 	bl	d90e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7f12:	69a1      	ldr	r1, [r4, #24]
    7f14:	1847      	adds	r7, r0, r1
    7f16:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    7f1a:	8831      	ldrh	r1, [r6, #0]
    7f1c:	34c8      	adds	r4, #200	; 0xc8
    7f1e:	f004 f9b3 	bl	c288 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7f22:	6da2      	ldr	r2, [r4, #88]	; 0x58
    7f24:	6e21      	ldr	r1, [r4, #96]	; 0x60
    7f26:	1a82      	subs	r2, r0, r2
    7f28:	fb01 5502 	mla	r5, r1, r2, r5
    7f2c:	65a0      	str	r0, [r4, #88]	; 0x58
    7f2e:	8831      	ldrh	r1, [r6, #0]
    7f30:	4638      	mov	r0, r7
    7f32:	f004 f9a9 	bl	c288 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7f36:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    7f38:	66a0      	str	r0, [r4, #104]	; 0x68
    7f3a:	1a41      	subs	r1, r0, r1
    7f3c:	440d      	add	r5, r1
    7f3e:	8831      	ldrh	r1, [r6, #0]
    7f40:	f854 0cc4 	ldr.w	r0, [r4, #-196]
    7f44:	f004 f9a0 	bl	c288 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7f48:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    7f4a:	4442      	add	r2, r8
    7f4c:	eba2 0109 	sub.w	r1, r2, r9
    7f50:	6e22      	ldr	r2, [r4, #96]	; 0x60
    7f52:	1a89      	subs	r1, r1, r2
    7f54:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    7f56:	1e49      	subs	r1, r1, #1
    7f58:	1a82      	subs	r2, r0, r2
    7f5a:	fb01 5502 	mla	r5, r1, r2, r5
    7f5e:	66e0      	str	r0, [r4, #108]	; 0x6c
    7f60:	3cc8      	subs	r4, #200	; 0xc8
    7f62:	e7c8      	b.n	7ef6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x182>
    7f64:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    7f68:	e7d3      	b.n	7f12 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x19e>
    7f6a:	0000      	.short	0x0000
    7f6c:	20000110 	.word	0x20000110
    7f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7f74:	4604      	mov	r4, r0
    7f76:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    7f7a:	2800      	cmp	r0, #0
    7f7c:	d053      	beq.n	8026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
    7f7e:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7f82:	2803      	cmp	r0, #3
    7f84:	d14f      	bne.n	8026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
    7f86:	4829      	ldr	r0, [pc, #164]	; (802c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>)
    7f88:	f894 9063 	ldrb.w	r9, [r4, #99]	; 0x63
    7f8c:	7800      	ldrb	r0, [r0, #0]
    7f8e:	f7ff ff3b 	bl	7e08 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    7f92:	4605      	mov	r5, r0
    7f94:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    7f98:	f7ff ff36 	bl	7e08 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    7f9c:	4428      	add	r0, r5
    7f9e:	b286      	uxth	r6, r0
    7fa0:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    7fa4:	f7ff ff30 	bl	7e08 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    7fa8:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    7fac:	fa1f f880 	uxth.w	r8, r0
    7fb0:	4648      	mov	r0, r9
    7fb2:	f007 ff23 	bl	fdfc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7fb6:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    7fba:	1a0d      	subs	r5, r1, r0
    7fbc:	4648      	mov	r0, r9
    7fbe:	f007 ff2b 	bl	fe18 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7fc2:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    7fc6:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    7fca:	fbb0 f0fa 	udiv	r0, r0, sl
    7fce:	1a2d      	subs	r5, r5, r0
    7fd0:	4648      	mov	r0, r9
    7fd2:	f007 ff13 	bl	fdfc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7fd6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    7fda:	1a0f      	subs	r7, r1, r0
    7fdc:	4648      	mov	r0, r9
    7fde:	f007 ff1b 	bl	fe18 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7fe2:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7fe6:	4401      	add	r1, r0
    7fe8:	fbb1 f0fa 	udiv	r0, r1, sl
    7fec:	1a39      	subs	r1, r7, r0
    7fee:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    7ff2:	4370      	muls	r0, r6
    7ff4:	fbb0 f2f8 	udiv	r2, r0, r8
    7ff8:	2029      	movs	r0, #41	; 0x29
    7ffa:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    7ffe:	3260      	adds	r2, #96	; 0x60
    8000:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    8004:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    8008:	42a9      	cmp	r1, r5
    800a:	d801      	bhi.n	8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
    800c:	4285      	cmp	r5, r0
    800e:	d901      	bls.n	8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
    8010:	f7fc f8f2 	bl	41f8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    8014:	4631      	mov	r1, r6
    8016:	6860      	ldr	r0, [r4, #4]
    8018:	f004 f936 	bl	c288 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    801c:	2100      	movs	r1, #0
    801e:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    8022:	f884 1142 	strb.w	r1, [r4, #322]	; 0x142
    8026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    802a:	0000      	.short	0x0000
    802c:	20000110 	.word	0x20000110
    8030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8032:	460e      	mov	r6, r1
    8034:	4604      	mov	r4, r0
    8036:	f003 fb2f 	bl	b698 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    803a:	2500      	movs	r5, #0
    803c:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
    8040:	2e01      	cmp	r6, #1
    8042:	d102      	bne.n	804a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a>
    8044:	480f      	ldr	r0, [pc, #60]	; (8084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>)
    8046:	7880      	ldrb	r0, [r0, #2]
    8048:	b168      	cbz	r0, 8066 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x66>
    804a:	2004      	movs	r0, #4
    804c:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    8050:	f006 fcd1 	bl	e9f6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f4>
    8054:	f8a4 515e 	strh.w	r5, [r4, #350]	; 0x15e
    8058:	f8b4 006c 	ldrh.w	r0, [r4, #108]	; 0x6c
    805c:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    8060:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    8064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8066:	9500      	str	r5, [sp, #0]
    8068:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    806c:	2301      	movs	r3, #1
    806e:	2200      	movs	r2, #0
    8070:	4620      	mov	r0, r4
    8072:	f000 f809 	bl	8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>
    8076:	2800      	cmp	r0, #0
    8078:	d0ea      	beq.n	8050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>
    807a:	f240 61e2 	movw	r1, #1762	; 0x6e2
    807e:	2030      	movs	r0, #48	; 0x30
    8080:	f7fc fc2e 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8084:	20000110 	.word	0x20000110
    8088:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    808c:	4604      	mov	r4, r0
    808e:	b085      	sub	sp, #20
    8090:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    8094:	f8df b424 	ldr.w	fp, [pc, #1060]	; 84bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4bc>
    8098:	e9cd 3000 	strd	r3, r0, [sp]
    809c:	4699      	mov	r9, r3
    809e:	460f      	mov	r7, r1
    80a0:	f89b 0000 	ldrb.w	r0, [fp]
    80a4:	f7ff feb0 	bl	7e08 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    80a8:	4605      	mov	r5, r0
    80aa:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    80ae:	f7ff feab 	bl	7e08 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    80b2:	4428      	add	r0, r5
    80b4:	f8ad 0008 	strh.w	r0, [sp, #8]
    80b8:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    80bc:	280d      	cmp	r0, #13
    80be:	d004      	beq.n	80ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xca>
    80c0:	2000      	movs	r0, #0
    80c2:	9003      	str	r0, [sp, #12]
    80c4:	9807      	ldr	r0, [sp, #28]
    80c6:	b110      	cbz	r0, 80ce <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xce>
    80c8:	e02e      	b.n	8128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>
    80ca:	2001      	movs	r0, #1
    80cc:	e7f9      	b.n	80c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc2>
    80ce:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    80d2:	2803      	cmp	r0, #3
    80d4:	d128      	bne.n	8128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>
    80d6:	9803      	ldr	r0, [sp, #12]
    80d8:	b330      	cbz	r0, 8128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>
    80da:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    80de:	42b8      	cmp	r0, r7
    80e0:	d122      	bne.n	8128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>
    80e2:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
    80e6:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
    80ea:	6860      	ldr	r0, [r4, #4]
    80ec:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
    80f0:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
    80f4:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
    80f8:	4408      	add	r0, r1
    80fa:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    80fe:	4620      	mov	r0, r4
    8100:	f006 fddf 	bl	ecc2 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    8104:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
    8108:	61a0      	str	r0, [r4, #24]
    810a:	f8b4 018e 	ldrh.w	r0, [r4, #398]	; 0x18e
    810e:	82a0      	strh	r0, [r4, #20]
    8110:	f8d4 0194 	ldr.w	r0, [r4, #404]	; 0x194
    8114:	6060      	str	r0, [r4, #4]
    8116:	f8b4 0198 	ldrh.w	r0, [r4, #408]	; 0x198
    811a:	8120      	strh	r0, [r4, #8]
    811c:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
    8120:	8160      	strh	r0, [r4, #10]
    8122:	2002      	movs	r0, #2
    8124:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    8128:	f8b4 006c 	ldrh.w	r0, [r4, #108]	; 0x6c
    812c:	f504 75a2 	add.w	r5, r4, #324	; 0x144
    8130:	1a38      	subs	r0, r7, r0
    8132:	fa0f fa80 	sxth.w	sl, r0
    8136:	f8b4 015c 	ldrh.w	r0, [r4, #348]	; 0x15c
    813a:	1a38      	subs	r0, r7, r0
    813c:	fa0f f880 	sxth.w	r8, r0
    8140:	f1b8 0f00 	cmp.w	r8, #0
    8144:	da06      	bge.n	8154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
    8146:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    814a:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
    814e:	2001      	movs	r0, #1
    8150:	46d0      	mov	r8, sl
    8152:	9000      	str	r0, [sp, #0]
    8154:	ab02      	add	r3, sp, #8
    8156:	4652      	mov	r2, sl
    8158:	4641      	mov	r1, r8
    815a:	4620      	mov	r0, r4
    815c:	f7ff fe96 	bl	7e8c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x118>
    8160:	9004      	str	r0, [sp, #16]
    8162:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    8166:	b140      	cbz	r0, 817a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17a>
    8168:	2801      	cmp	r0, #1
    816a:	d07c      	beq.n	8266 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x266>
    816c:	2802      	cmp	r0, #2
    816e:	d05a      	beq.n	8226 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x226>
    8170:	2803      	cmp	r0, #3
    8172:	d079      	beq.n	8268 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x268>
    8174:	f44f 61ac 	mov.w	r1, #1376	; 0x560
    8178:	e19c      	b.n	84b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4b4>
    817a:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    817e:	b3e8      	cbz	r0, 81fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1fc>
    8180:	2101      	movs	r1, #1
    8182:	2000      	movs	r0, #0
    8184:	f005 fbc3 	bl	d90e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    8188:	4606      	mov	r6, r0
    818a:	69a0      	ldr	r0, [r4, #24]
    818c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    8190:	4430      	add	r0, r6
    8192:	f004 f879 	bl	c288 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8196:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    819a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    819e:	6860      	ldr	r0, [r4, #4]
    81a0:	f004 f872 	bl	c288 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    81a4:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    81a8:	a901      	add	r1, sp, #4
    81aa:	4668      	mov	r0, sp
    81ac:	f003 f9d2 	bl	b554 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    81b0:	e9dd 1200 	ldrd	r1, r2, [sp]
    81b4:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    81b8:	f7fb f88c 	bl	32d4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    81bc:	4682      	mov	sl, r0
    81be:	4620      	mov	r0, r4
    81c0:	f006 fc0b 	bl	e9da <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d8>
    81c4:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    81c8:	f8d4 8164 	ldr.w	r8, [r4, #356]	; 0x164
    81cc:	f007 fe24 	bl	fe18 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    81d0:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    81d4:	4401      	add	r1, r0
    81d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    81da:	fbb1 f0f0 	udiv	r0, r1, r0
    81de:	69a1      	ldr	r1, [r4, #24]
    81e0:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    81e4:	4431      	add	r1, r6
    81e6:	1a08      	subs	r0, r1, r0
    81e8:	1a81      	subs	r1, r0, r2
    81ea:	4441      	add	r1, r8
    81ec:	3920      	subs	r1, #32
    81ee:	eba1 060a 	sub.w	r6, r1, sl
    81f2:	0050      	lsls	r0, r2, #1
    81f4:	8aa1      	ldrh	r1, [r4, #20]
    81f6:	3060      	adds	r0, #96	; 0x60
    81f8:	4401      	add	r1, r0
    81fa:	e000      	b.n	81fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1fe>
    81fc:	e010      	b.n	8220 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x220>
    81fe:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    8202:	f006 fbff 	bl	ea04 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x202>
    8206:	3020      	adds	r0, #32
    8208:	f8cb 0010 	str.w	r0, [fp, #16]
    820c:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    8210:	4659      	mov	r1, fp
    8212:	1a30      	subs	r0, r6, r0
    8214:	f5b0 7fd7 	cmp.w	r0, #430	; 0x1ae
    8218:	d85c      	bhi.n	82d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d4>
    821a:	f240 41f9 	movw	r1, #1273	; 0x4f9
    821e:	e149      	b.n	84b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4b4>
    8220:	f240 41d7 	movw	r1, #1239	; 0x4d7
    8224:	e146      	b.n	84b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4b4>
    8226:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    822a:	69a0      	ldr	r0, [r4, #24]
    822c:	4408      	add	r0, r1
    822e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    8232:	f004 f829 	bl	c288 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8236:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    823a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    823e:	6860      	ldr	r0, [r4, #4]
    8240:	f004 f822 	bl	c288 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8244:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    8248:	4620      	mov	r0, r4
    824a:	f006 fbc6 	bl	e9da <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d8>
    824e:	f8b4 0106 	ldrh.w	r0, [r4, #262]	; 0x106
    8252:	bb10      	cbnz	r0, 829a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x29a>
    8254:	f1b9 0f00 	cmp.w	r9, #0
    8258:	d01f      	beq.n	829a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x29a>
    825a:	f894 8063 	ldrb.w	r8, [r4, #99]	; 0x63
    825e:	4640      	mov	r0, r8
    8260:	f007 fdda 	bl	fe18 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8264:	e001      	b.n	826a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26a>
    8266:	e036      	b.n	82d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d6>
    8268:	e052      	b.n	8310 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x310>
    826a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    826e:	4401      	add	r1, r0
    8270:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8274:	fbb1 f0f0 	udiv	r0, r1, r0
    8278:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    827c:	69a2      	ldr	r2, [r4, #24]
    827e:	4408      	add	r0, r1
    8280:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    8284:	4411      	add	r1, r2
    8286:	1a0e      	subs	r6, r1, r0
    8288:	4640      	mov	r0, r8
    828a:	f007 fdb7 	bl	fdfc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    828e:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    8292:	1a08      	subs	r0, r1, r0
    8294:	4406      	add	r6, r0
    8296:	3e20      	subs	r6, #32
    8298:	e006      	b.n	82a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a8>
    829a:	69a1      	ldr	r1, [r4, #24]
    829c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    82a0:	4408      	add	r0, r1
    82a2:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    82a6:	1a46      	subs	r6, r0, r1
    82a8:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    82ac:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    82b0:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
    82b4:	fb01 0002 	mla	r0, r1, r2, r0
    82b8:	0040      	lsls	r0, r0, #1
    82ba:	8aa1      	ldrh	r1, [r4, #20]
    82bc:	3060      	adds	r0, #96	; 0x60
    82be:	4401      	add	r1, r0
    82c0:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    82c4:	f006 fb9e 	bl	ea04 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x202>
    82c8:	f8cb 0010 	str.w	r0, [fp, #16]
    82cc:	2001      	movs	r0, #1
    82ce:	4659      	mov	r1, fp
    82d0:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    82d4:	e066      	b.n	83a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a4>
    82d6:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    82da:	6860      	ldr	r0, [r4, #4]
    82dc:	f8b4 2106 	ldrh.w	r2, [r4, #262]	; 0x106
    82e0:	1a46      	subs	r6, r0, r1
    82e2:	eb02 000a 	add.w	r0, r2, sl
    82e6:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    82ea:	f8d4 c120 	ldr.w	ip, [r4, #288]	; 0x120
    82ee:	1a80      	subs	r0, r0, r2
    82f0:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    82f4:	1e40      	subs	r0, r0, #1
    82f6:	fb0c 3202 	mla	r2, ip, r2, r3
    82fa:	fb00 2001 	mla	r0, r0, r1, r2
    82fe:	0040      	lsls	r0, r0, #1
    8300:	8aa1      	ldrh	r1, [r4, #20]
    8302:	3060      	adds	r0, #96	; 0x60
    8304:	4401      	add	r1, r0
    8306:	fb06 f608 	mul.w	r6, r6, r8
    830a:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    830e:	e044      	b.n	839a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x39a>
    8310:	6860      	ldr	r0, [r4, #4]
    8312:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    8316:	fb00 f008 	mul.w	r0, r0, r8
    831a:	fb08 0611 	mls	r6, r8, r1, r0
    831e:	f894 0075 	ldrb.w	r0, [r4, #117]	; 0x75
    8322:	2824      	cmp	r0, #36	; 0x24
    8324:	d003      	beq.n	832e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32e>
    8326:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    832a:	2824      	cmp	r0, #36	; 0x24
    832c:	d109      	bne.n	8342 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x342>
    832e:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    8332:	1a38      	subs	r0, r7, r0
    8334:	b200      	sxth	r0, r0
    8336:	2800      	cmp	r0, #0
    8338:	db03      	blt.n	8342 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x342>
    833a:	f894 018f 	ldrb.w	r0, [r4, #399]	; 0x18f
    833e:	b100      	cbz	r0, 8342 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x342>
    8340:	9001      	str	r0, [sp, #4]
    8342:	9800      	ldr	r0, [sp, #0]
    8344:	b1f8      	cbz	r0, 8386 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x386>
    8346:	f8b4 0106 	ldrh.w	r0, [r4, #262]	; 0x106
    834a:	b9e0      	cbnz	r0, 8386 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x386>
    834c:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
    8350:	2800      	cmp	r0, #0
    8352:	d07d      	beq.n	8450 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x450>
    8354:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    8358:	2800      	cmp	r0, #0
    835a:	d079      	beq.n	8450 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x450>
    835c:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    8360:	f007 fd5a 	bl	fe18 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8364:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8368:	4401      	add	r1, r0
    836a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    836e:	fbb1 f0f0 	udiv	r0, r1, r0
    8372:	1a36      	subs	r6, r6, r0
    8374:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    8378:	f007 fd40 	bl	fdfc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    837c:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    8380:	1a08      	subs	r0, r1, r0
    8382:	4406      	add	r6, r0
    8384:	3e20      	subs	r6, #32
    8386:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
    838a:	eb01 000a 	add.w	r0, r1, sl
    838e:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    8392:	4348      	muls	r0, r1
    8394:	0041      	lsls	r1, r0, #1
    8396:	3160      	adds	r1, #96	; 0x60
    8398:	9801      	ldr	r0, [sp, #4]
    839a:	f006 fb33 	bl	ea04 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x202>
    839e:	4659      	mov	r1, fp
    83a0:	f8cb 0010 	str.w	r0, [fp, #16]
    83a4:	9804      	ldr	r0, [sp, #16]
    83a6:	6909      	ldr	r1, [r1, #16]
    83a8:	1a33      	subs	r3, r6, r0
    83aa:	f8d4 6134 	ldr.w	r6, [r4, #308]	; 0x134
    83ae:	6860      	ldr	r0, [r4, #4]
    83b0:	1b80      	subs	r0, r0, r6
    83b2:	f2a0 203d 	subw	r0, r0, #573	; 0x23d
    83b6:	f8cb 0014 	str.w	r0, [fp, #20]
    83ba:	4281      	cmp	r1, r0
    83bc:	d800      	bhi.n	83c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c0>
    83be:	4608      	mov	r0, r1
    83c0:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    83c4:	2000      	movs	r0, #0
    83c6:	7028      	strb	r0, [r5, #0]
    83c8:	2064      	movs	r0, #100	; 0x64
    83ca:	8128      	strh	r0, [r5, #8]
    83cc:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    83d0:	4619      	mov	r1, r3
    83d2:	34dc      	adds	r4, #220	; 0xdc
    83d4:	f7f9 ff0e 	bl	21f4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    83d8:	60e8      	str	r0, [r5, #12]
    83da:	f854 0cb4 	ldr.w	r0, [r4, #-180]
    83de:	6a61      	ldr	r1, [r4, #36]	; 0x24
    83e0:	4408      	add	r0, r1
    83e2:	6068      	str	r0, [r5, #4]
    83e4:	68e8      	ldr	r0, [r5, #12]
    83e6:	67e0      	str	r0, [r4, #124]	; 0x7c
    83e8:	f8a4 7080 	strh.w	r7, [r4, #128]	; 0x80
    83ec:	2001      	movs	r0, #1
    83ee:	72a8      	strb	r0, [r5, #10]
    83f0:	8aa1      	ldrh	r1, [r4, #20]
    83f2:	3cdc      	subs	r4, #220	; 0xdc
    83f4:	1bc9      	subs	r1, r1, r7
    83f6:	b209      	sxth	r1, r1
    83f8:	2900      	cmp	r1, #0
    83fa:	dd01      	ble.n	8400 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x400>
    83fc:	2103      	movs	r1, #3
    83fe:	72a9      	strb	r1, [r5, #10]
    8400:	9903      	ldr	r1, [sp, #12]
    8402:	b331      	cbz	r1, 8452 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x452>
    8404:	f1b9 0f00 	cmp.w	r9, #0
    8408:	d027      	beq.n	845a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x45a>
    840a:	bf00      	nop
    840c:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    8410:	b392      	cbz	r2, 8478 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x478>
    8412:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    8416:	bf00      	nop
    8418:	f8a4 111a 	strh.w	r1, [r4, #282]	; 0x11a
    841c:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
    8420:	1c49      	adds	r1, r1, #1
    8422:	434b      	muls	r3, r1
    8424:	4293      	cmp	r3, r2
    8426:	d218      	bcs.n	845a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x45a>
    8428:	7aa9      	ldrb	r1, [r5, #10]
    842a:	1e49      	subs	r1, r1, #1
    842c:	2900      	cmp	r1, #0
    842e:	dd14      	ble.n	845a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x45a>
    8430:	72a8      	strb	r0, [r5, #10]
    8432:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    8436:	2101      	movs	r1, #1
    8438:	1c40      	adds	r0, r0, #1
    843a:	f8a4 011a 	strh.w	r0, [r4, #282]	; 0x11a
    843e:	f504 708e 	add.w	r0, r4, #284	; 0x11c
    8442:	f7fc fae5 	bl	4a10 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    8446:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    844a:	f000 0007 	and.w	r0, r0, #7
    844e:	e001      	b.n	8454 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x454>
    8450:	e013      	b.n	847a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x47a>
    8452:	e015      	b.n	8480 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x480>
    8454:	1c40      	adds	r0, r0, #1
    8456:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
    845a:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    845e:	4629      	mov	r1, r5
    8460:	f006 fae2 	bl	ea28 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x226>
    8464:	b320      	cbz	r0, 84b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4b0>
    8466:	9807      	ldr	r0, [sp, #28]
    8468:	f080 0001 	eor.w	r0, r0, #1
    846c:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
    8470:	2000      	movs	r0, #0
    8472:	b009      	add	sp, #36	; 0x24
    8474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8478:	e018      	b.n	84ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ac>
    847a:	f240 514b 	movw	r1, #1355	; 0x54b
    847e:	e019      	b.n	84b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4b4>
    8480:	f1b9 0f00 	cmp.w	r9, #0
    8484:	d1c2      	bne.n	840c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40c>
    8486:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    848a:	2800      	cmp	r0, #0
    848c:	d0e5      	beq.n	845a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x45a>
    848e:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    8492:	6860      	ldr	r0, [r4, #4]
    8494:	1a41      	subs	r1, r0, r1
    8496:	4628      	mov	r0, r5
    8498:	f005 fa4b 	bl	d932 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    849c:	0400      	lsls	r0, r0, #16
    849e:	0c00      	lsrs	r0, r0, #16
    84a0:	d0db      	beq.n	845a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x45a>
    84a2:	9912      	ldr	r1, [sp, #72]	; 0x48
    84a4:	b101      	cbz	r1, 84a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a8>
    84a6:	8008      	strh	r0, [r1, #0]
    84a8:	2001      	movs	r0, #1
    84aa:	e7e2      	b.n	8472 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x472>
    84ac:	2100      	movs	r1, #0
    84ae:	e7b3      	b.n	8418 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x418>
    84b0:	f240 51ab 	movw	r1, #1451	; 0x5ab
    84b4:	2030      	movs	r0, #48	; 0x30
    84b6:	f7fc fa13 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84ba:	0000      	.short	0x0000
    84bc:	20000110 	.word	0x20000110
    84c0:	b570      	push	{r4, r5, r6, lr}
    84c2:	b140      	cbz	r0, 84d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d6>
    84c4:	2909      	cmp	r1, #9
    84c6:	d24a      	bcs.n	855e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x55e>
    84c8:	e8df f001 	tbb	[pc, r1]
    84cc:	3d3d1707 	.word	0x3d3d1707
    84d0:	412b4939 	.word	0x412b4939
    84d4:	0045      	.short	0x0045
    84d6:	21d5      	movs	r1, #213	; 0xd5
    84d8:	e03e      	b.n	8558 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x558>
    84da:	4922      	ldr	r1, [pc, #136]	; (8564 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x564>)
    84dc:	4604      	mov	r4, r0
    84de:	6188      	str	r0, [r1, #24]
    84e0:	f7fe fdc2 	bl	7068 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    84e4:	b110      	cbz	r0, 84ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ec>
    84e6:	f240 2187 	movw	r1, #647	; 0x287
    84ea:	e035      	b.n	8558 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x558>
    84ec:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
    84f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    84f4:	38f6      	subs	r0, #246	; 0xf6
    84f6:	f7fa be3b 	b.w	3170 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    84fa:	4605      	mov	r5, r0
    84fc:	f005 ff3a 	bl	e374 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    8500:	b9a8      	cbnz	r0, 852e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x52e>
    8502:	4628      	mov	r0, r5
    8504:	f006 fa40 	bl	e988 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x186>
    8508:	4604      	mov	r4, r0
    850a:	f8d5 00d0 	ldr.w	r0, [r5, #208]	; 0xd0
    850e:	42a0      	cmp	r0, r4
    8510:	d20b      	bcs.n	852a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x52a>
    8512:	1a20      	subs	r0, r4, r0
    8514:	2104      	movs	r1, #4
    8516:	f7f9 fdab 	bl	2070 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    851a:	b130      	cbz	r0, 852a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x52a>
    851c:	4628      	mov	r0, r5
    851e:	f8c5 40d0 	str.w	r4, [r5, #208]	; 0xd0
    8522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8526:	f005 bef6 	b.w	e316 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    852a:	f8c5 40d0 	str.w	r4, [r5, #208]	; 0xd0
    852e:	4628      	mov	r0, r5
    8530:	f7fe fdb6 	bl	70a0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    8534:	2800      	cmp	r0, #0
    8536:	d014      	beq.n	8562 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x562>
    8538:	f240 21bb 	movw	r1, #699	; 0x2bb
    853c:	e00c      	b.n	8558 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x558>
    853e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8542:	f003 baab 	b.w	ba9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    8546:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    854a:	f006 b9b7 	b.w	e8bc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xba>
    854e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8552:	f006 ba10 	b.w	e976 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x174>
    8556:	21f7      	movs	r1, #247	; 0xf7
    8558:	2030      	movs	r0, #48	; 0x30
    855a:	f7fc f9c1 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    855e:	21fb      	movs	r1, #251	; 0xfb
    8560:	e7fa      	b.n	8558 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x558>
    8562:	bd70      	pop	{r4, r5, r6, pc}
    8564:	20000110 	.word	0x20000110
    8568:	b570      	push	{r4, r5, r6, lr}
    856a:	4604      	mov	r4, r0
    856c:	f7f9 ff98 	bl	24a0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    8570:	2864      	cmp	r0, #100	; 0x64
    8572:	d901      	bls.n	8578 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x578>
    8574:	4605      	mov	r5, r0
    8576:	e000      	b.n	857a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x57a>
    8578:	2564      	movs	r5, #100	; 0x64
    857a:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    857e:	2128      	movs	r1, #40	; 0x28
    8580:	f006 f99a 	bl	e8b8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    8584:	4428      	add	r0, r5
    8586:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    858a:	f200 2037 	addw	r0, r0, #567	; 0x237
    858e:	180e      	adds	r6, r1, r0
    8590:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    8594:	2128      	movs	r1, #40	; 0x28
    8596:	f006 f98f 	bl	e8b8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    859a:	f200 229b 	addw	r2, r0, #667	; 0x29b
    859e:	4620      	mov	r0, r4
    85a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    85a2:	f005 fd51 	bl	e048 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    85a6:	4605      	mov	r5, r0
    85a8:	4632      	mov	r2, r6
    85aa:	4620      	mov	r0, r4
    85ac:	6861      	ldr	r1, [r4, #4]
    85ae:	f005 fd4b 	bl	e048 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    85b2:	4907      	ldr	r1, [pc, #28]	; (85d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5d0>)
    85b4:	4285      	cmp	r5, r0
    85b6:	6088      	str	r0, [r1, #8]
    85b8:	d200      	bcs.n	85bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5bc>
    85ba:	4628      	mov	r0, r5
    85bc:	6048      	str	r0, [r1, #4]
    85be:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    85c2:	f5a0 70b2 	sub.w	r0, r0, #356	; 0x164
    85c6:	60c8      	str	r0, [r1, #12]
    85c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    85cc:	f7fa bdd0 	b.w	3170 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    85d0:	20000110 	.word	0x20000110
    85d4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    85d6:	4604      	mov	r4, r0
    85d8:	f003 fe17 	bl	c20a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    85dc:	4601      	mov	r1, r0
    85de:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    85e2:	f7f9 fe39 	bl	2258 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    85e6:	6861      	ldr	r1, [r4, #4]
    85e8:	b111      	cbz	r1, 85f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5f0>
    85ea:	fbb0 f0f1 	udiv	r0, r0, r1
    85ee:	e000      	b.n	85f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5f2>
    85f0:	2000      	movs	r0, #0
    85f2:	f894 1076 	ldrb.w	r1, [r4, #118]	; 0x76
    85f6:	290d      	cmp	r1, #13
    85f8:	d00c      	beq.n	8614 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x614>
    85fa:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
    85fe:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    8602:	1813      	adds	r3, r2, r0
    8604:	1acb      	subs	r3, r1, r3
    8606:	b21b      	sxth	r3, r3
    8608:	2b00      	cmp	r3, #0
    860a:	db06      	blt.n	861a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x61a>
    860c:	1c49      	adds	r1, r1, #1
    860e:	f8a4 113e 	strh.w	r1, [r4, #318]	; 0x13e
    8612:	e006      	b.n	8622 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x622>
    8614:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    8618:	e00c      	b.n	8634 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x634>
    861a:	1c40      	adds	r0, r0, #1
    861c:	4410      	add	r0, r2
    861e:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    8622:	f894 0141 	ldrb.w	r0, [r4, #321]	; 0x141
    8626:	b940      	cbnz	r0, 863a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x63a>
    8628:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    862c:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    8630:	4288      	cmp	r0, r1
    8632:	d102      	bne.n	863a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x63a>
    8634:	1c40      	adds	r0, r0, #1
    8636:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    863a:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
    863e:	1c40      	adds	r0, r0, #1
    8640:	f8a4 015e 	strh.w	r0, [r4, #350]	; 0x15e
    8644:	f8b4 009e 	ldrh.w	r0, [r4, #158]	; 0x9e
    8648:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    864c:	1a40      	subs	r0, r0, r1
    864e:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
    8652:	1e40      	subs	r0, r0, #1
    8654:	4408      	add	r0, r1
    8656:	b285      	uxth	r5, r0
    8658:	e023      	b.n	86a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6a2>
    865a:	a801      	add	r0, sp, #4
    865c:	2300      	movs	r3, #0
    865e:	9000      	str	r0, [sp, #0]
    8660:	461a      	mov	r2, r3
    8662:	4620      	mov	r0, r4
    8664:	f7ff fd10 	bl	8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>
    8668:	2800      	cmp	r0, #0
    866a:	d036      	beq.n	86da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6da>
    866c:	2801      	cmp	r0, #1
    866e:	d004      	beq.n	867a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x67a>
    8670:	f240 6162 	movw	r1, #1634	; 0x662
    8674:	2030      	movs	r0, #48	; 0x30
    8676:	f7fc f933 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    867a:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    867e:	f8b4 00f0 	ldrh.w	r0, [r4, #240]	; 0xf0
    8682:	1a0a      	subs	r2, r1, r0
    8684:	b212      	sxth	r2, r2
    8686:	2a00      	cmp	r2, #0
    8688:	da06      	bge.n	8698 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x698>
    868a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    868e:	440a      	add	r2, r1
    8690:	1aaa      	subs	r2, r5, r2
    8692:	b212      	sxth	r2, r2
    8694:	2a00      	cmp	r2, #0
    8696:	db02      	blt.n	869e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x69e>
    8698:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    869c:	4408      	add	r0, r1
    869e:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    86a2:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    86a6:	1a68      	subs	r0, r5, r1
    86a8:	b200      	sxth	r0, r0
    86aa:	2800      	cmp	r0, #0
    86ac:	dad5      	bge.n	865a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x65a>
    86ae:	f894 0079 	ldrb.w	r0, [r4, #121]	; 0x79
    86b2:	b180      	cbz	r0, 86d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6d6>
    86b4:	f05f 0008 	movs.w	r0, #8
    86b8:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
    86bc:	2001      	movs	r0, #1
    86be:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
    86c2:	4620      	mov	r0, r4
    86c4:	f006 fb32 	bl	ed2c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    86c8:	4620      	mov	r0, r4
    86ca:	f006 fa06 	bl	eada <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    86ce:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    86d2:	f002 b861 	b.w	a798 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    86d6:	203e      	movs	r0, #62	; 0x3e
    86d8:	e7ee      	b.n	86b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6b8>
    86da:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

000086dc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    86dc:	4806      	ldr	r0, [pc, #24]	; (86f8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    86de:	4905      	ldr	r1, [pc, #20]	; (86f4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    86e0:	6501      	str	r1, [r0, #80]	; 0x50
    86e2:	4906      	ldr	r1, [pc, #24]	; (86fc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    86e4:	6541      	str	r1, [r0, #84]	; 0x54
    86e6:	4807      	ldr	r0, [pc, #28]	; (8704 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    86e8:	4905      	ldr	r1, [pc, #20]	; (8700 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    86ea:	6501      	str	r1, [r0, #80]	; 0x50
    86ec:	4906      	ldr	r1, [pc, #24]	; (8708 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    86ee:	6541      	str	r1, [r0, #84]	; 0x54
    86f0:	4770      	bx	lr
    86f2:	0000      	.short	0x0000
    86f4:	00009b81 	.word	0x00009b81
    86f8:	20000140 	.word	0x20000140
    86fc:	00009c41 	.word	0x00009c41
    8700:	0000a28d 	.word	0x0000a28d
    8704:	200001a4 	.word	0x200001a4
    8708:	0000a2bd 	.word	0x0000a2bd

0000870c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    870c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    870e:	460d      	mov	r5, r1
    8710:	4607      	mov	r7, r0
    8712:	2100      	movs	r1, #0
    8714:	f004 fef1 	bl	d4fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8718:	1e04      	subs	r4, r0, #0
    871a:	d04f      	beq.n	87bc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    871c:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    8720:	2800      	cmp	r0, #0
    8722:	d04b      	beq.n	87bc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    8724:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    8728:	f88d 0000 	strb.w	r0, [sp]
    872c:	9800      	ldr	r0, [sp, #0]
    872e:	9000      	str	r0, [sp, #0]
    8730:	f89d 0000 	ldrb.w	r0, [sp]
    8734:	2600      	movs	r6, #0
    8736:	b1d8      	cbz	r0, 8770 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x64>
    8738:	706e      	strb	r6, [r5, #1]
    873a:	2007      	movs	r0, #7
    873c:	7028      	strb	r0, [r5, #0]
    873e:	e00b      	b.n	8758 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4c>
    8740:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
    8744:	83a6      	strh	r6, [r4, #28]
    8746:	f8d4 01b2 	ldr.w	r0, [r4, #434]	; 0x1b2
    874a:	6068      	str	r0, [r5, #4]
    874c:	f8d4 01b6 	ldr.w	r0, [r4, #438]	; 0x1b6
    8750:	60a8      	str	r0, [r5, #8]
    8752:	f8b4 01ba 	ldrh.w	r0, [r4, #442]	; 0x1ba
    8756:	81a8      	strh	r0, [r5, #12]
    8758:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    875c:	f88d 0000 	strb.w	r0, [sp]
    8760:	9800      	ldr	r0, [sp, #0]
    8762:	9000      	str	r0, [sp, #0]
    8764:	f89d 0000 	ldrb.w	r0, [sp]
    8768:	2800      	cmp	r0, #0
    876a:	d1e9      	bne.n	8740 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
    876c:	712e      	strb	r6, [r5, #4]
    876e:	e10b      	b.n	8988 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8770:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    8774:	b3a0      	cbz	r0, 87e0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd4>
    8776:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    877a:	280b      	cmp	r0, #11
    877c:	d016      	beq.n	87ac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
    877e:	280c      	cmp	r0, #12
    8780:	d004      	beq.n	878c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
    8782:	f640 21ce 	movw	r1, #2766	; 0xace
    8786:	2031      	movs	r0, #49	; 0x31
    8788:	f7fc f8aa 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    878c:	8820      	ldrh	r0, [r4, #0]
    878e:	f7fc fcdb 	bl	5148 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8792:	4607      	mov	r7, r0
    8794:	f004 fd6c 	bl	d270 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    8798:	b978      	cbnz	r0, 87ba <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xae>
    879a:	706e      	strb	r6, [r5, #1]
    879c:	200c      	movs	r0, #12
    879e:	7028      	strb	r0, [r5, #0]
    87a0:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
    87a4:	7128      	strb	r0, [r5, #4]
    87a6:	8820      	ldrh	r0, [r4, #0]
    87a8:	80e8      	strh	r0, [r5, #6]
    87aa:	e013      	b.n	87d4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xc8>
    87ac:	8820      	ldrh	r0, [r4, #0]
    87ae:	f7fc fccb 	bl	5148 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    87b2:	4607      	mov	r7, r0
    87b4:	f004 fd5c 	bl	d270 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    87b8:	b108      	cbz	r0, 87be <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    87ba:	2000      	movs	r0, #0
    87bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    87be:	706e      	strb	r6, [r5, #1]
    87c0:	200b      	movs	r0, #11
    87c2:	7028      	strb	r0, [r5, #0]
    87c4:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
    87c8:	7128      	strb	r0, [r5, #4]
    87ca:	8820      	ldrh	r0, [r4, #0]
    87cc:	80e8      	strh	r0, [r5, #6]
    87ce:	f894 01c2 	ldrb.w	r0, [r4, #450]	; 0x1c2
    87d2:	7228      	strb	r0, [r5, #8]
    87d4:	f884 61bc 	strb.w	r6, [r4, #444]	; 0x1bc
    87d8:	4638      	mov	r0, r7
    87da:	f004 fd5e 	bl	d29a <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    87de:	e0d3      	b.n	8988 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    87e0:	e7ff      	b.n	87e2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
    87e2:	f894 01f2 	ldrb.w	r0, [r4, #498]	; 0x1f2
    87e6:	f88d 0000 	strb.w	r0, [sp]
    87ea:	9800      	ldr	r0, [sp, #0]
    87ec:	9000      	str	r0, [sp, #0]
    87ee:	f89d 0000 	ldrb.w	r0, [sp]
    87f2:	b130      	cbz	r0, 8802 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
    87f4:	706e      	strb	r6, [r5, #1]
    87f6:	200e      	movs	r0, #14
    87f8:	7028      	strb	r0, [r5, #0]
    87fa:	80af      	strh	r7, [r5, #4]
    87fc:	f884 61f2 	strb.w	r6, [r4, #498]	; 0x1f2
    8800:	e0c2      	b.n	8988 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8802:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    8806:	f88d 0000 	strb.w	r0, [sp]
    880a:	9800      	ldr	r0, [sp, #0]
    880c:	9000      	str	r0, [sp, #0]
    880e:	f89d 0000 	ldrb.w	r0, [sp]
    8812:	b198      	cbz	r0, 883c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
    8814:	706e      	strb	r6, [r5, #1]
    8816:	2008      	movs	r0, #8
    8818:	7028      	strb	r0, [r5, #0]
    881a:	8820      	ldrh	r0, [r4, #0]
    881c:	80a8      	strh	r0, [r5, #4]
    881e:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    8822:	f8c5 1006 	str.w	r1, [r5, #6]
    8826:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
    882a:	f8c5 100a 	str.w	r1, [r5, #10]
    882e:	f8b4 01d0 	ldrh.w	r0, [r4, #464]	; 0x1d0
    8832:	81e8      	strh	r0, [r5, #14]
    8834:	f504 74e2 	add.w	r4, r4, #452	; 0x1c4
    8838:	7026      	strb	r6, [r4, #0]
    883a:	e0a5      	b.n	8988 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    883c:	f894 01ec 	ldrb.w	r0, [r4, #492]	; 0x1ec
    8840:	f88d 0000 	strb.w	r0, [sp]
    8844:	9800      	ldr	r0, [sp, #0]
    8846:	9000      	str	r0, [sp, #0]
    8848:	f89d 0000 	ldrb.w	r0, [sp]
    884c:	b1a0      	cbz	r0, 8878 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
    884e:	706e      	strb	r6, [r5, #1]
    8850:	2016      	movs	r0, #22
    8852:	7028      	strb	r0, [r5, #0]
    8854:	e005      	b.n	8862 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x156>
    8856:	bf00      	nop
    8858:	f884 61ec 	strb.w	r6, [r4, #492]	; 0x1ec
    885c:	f8d4 01ee 	ldr.w	r0, [r4, #494]	; 0x1ee
    8860:	6068      	str	r0, [r5, #4]
    8862:	f894 01ec 	ldrb.w	r0, [r4, #492]	; 0x1ec
    8866:	f88d 0000 	strb.w	r0, [sp]
    886a:	9800      	ldr	r0, [sp, #0]
    886c:	9000      	str	r0, [sp, #0]
    886e:	f89d 0000 	ldrb.w	r0, [sp]
    8872:	2800      	cmp	r0, #0
    8874:	d1f0      	bne.n	8858 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x14c>
    8876:	e087      	b.n	8988 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8878:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    887c:	f88d 0000 	strb.w	r0, [sp]
    8880:	9800      	ldr	r0, [sp, #0]
    8882:	9000      	str	r0, [sp, #0]
    8884:	f89d 0000 	ldrb.w	r0, [sp]
    8888:	b170      	cbz	r0, 88a8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x19c>
    888a:	706e      	strb	r6, [r5, #1]
    888c:	2006      	movs	r0, #6
    888e:	7028      	strb	r0, [r5, #0]
    8890:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
    8894:	6068      	str	r0, [r5, #4]
    8896:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    889a:	60a8      	str	r0, [r5, #8]
    889c:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    88a0:	60e8      	str	r0, [r5, #12]
    88a2:	f504 7401 	add.w	r4, r4, #516	; 0x204
    88a6:	e03a      	b.n	891e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x212>
    88a8:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    88ac:	f88d 0000 	strb.w	r0, [sp]
    88b0:	9800      	ldr	r0, [sp, #0]
    88b2:	9000      	str	r0, [sp, #0]
    88b4:	f89d 0000 	ldrb.w	r0, [sp]
    88b8:	b1d0      	cbz	r0, 88f0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e4>
    88ba:	706e      	strb	r6, [r5, #1]
    88bc:	2012      	movs	r0, #18
    88be:	7028      	strb	r0, [r5, #0]
    88c0:	e00b      	b.n	88da <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ce>
    88c2:	bf00      	nop
    88c4:	f884 61d2 	strb.w	r6, [r4, #466]	; 0x1d2
    88c8:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    88cc:	6068      	str	r0, [r5, #4]
    88ce:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
    88d2:	60a8      	str	r0, [r5, #8]
    88d4:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
    88d8:	60e8      	str	r0, [r5, #12]
    88da:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    88de:	f88d 0000 	strb.w	r0, [sp]
    88e2:	9800      	ldr	r0, [sp, #0]
    88e4:	9000      	str	r0, [sp, #0]
    88e6:	f89d 0000 	ldrb.w	r0, [sp]
    88ea:	2800      	cmp	r0, #0
    88ec:	d1ea      	bne.n	88c4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1b8>
    88ee:	e04b      	b.n	8988 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    88f0:	f894 01e0 	ldrb.w	r0, [r4, #480]	; 0x1e0
    88f4:	f88d 0000 	strb.w	r0, [sp]
    88f8:	9800      	ldr	r0, [sp, #0]
    88fa:	9000      	str	r0, [sp, #0]
    88fc:	f89d 0000 	ldrb.w	r0, [sp]
    8900:	b180      	cbz	r0, 8924 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x218>
    8902:	706e      	strb	r6, [r5, #1]
    8904:	2018      	movs	r0, #24
    8906:	7028      	strb	r0, [r5, #0]
    8908:	f8d4 01e2 	ldr.w	r0, [r4, #482]	; 0x1e2
    890c:	6068      	str	r0, [r5, #4]
    890e:	f8d4 01e6 	ldr.w	r0, [r4, #486]	; 0x1e6
    8912:	60a8      	str	r0, [r5, #8]
    8914:	f8b4 01ea 	ldrh.w	r0, [r4, #490]	; 0x1ea
    8918:	81a8      	strh	r0, [r5, #12]
    891a:	f504 74f1 	add.w	r4, r4, #482	; 0x1e2
    891e:	f804 6c02 	strb.w	r6, [r4, #-2]
    8922:	e031      	b.n	8988 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8924:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    8928:	f88d 0000 	strb.w	r0, [sp]
    892c:	9800      	ldr	r0, [sp, #0]
    892e:	9000      	str	r0, [sp, #0]
    8930:	f89d 0000 	ldrb.w	r0, [sp]
    8934:	b138      	cbz	r0, 8946 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x23a>
    8936:	2019      	movs	r0, #25
    8938:	7028      	strb	r0, [r5, #0]
    893a:	f8d4 01f6 	ldr.w	r0, [r4, #502]	; 0x1f6
    893e:	6068      	str	r0, [r5, #4]
    8940:	f884 61f4 	strb.w	r6, [r4, #500]	; 0x1f4
    8944:	e020      	b.n	8988 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8946:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    894a:	f88d 0000 	strb.w	r0, [sp]
    894e:	9800      	ldr	r0, [sp, #0]
    8950:	9000      	str	r0, [sp, #0]
    8952:	f89d 0000 	ldrb.w	r0, [sp]
    8956:	2800      	cmp	r0, #0
    8958:	f43f af30 	beq.w	87bc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    895c:	706e      	strb	r6, [r5, #1]
    895e:	2013      	movs	r0, #19
    8960:	7028      	strb	r0, [r5, #0]
    8962:	e007      	b.n	8974 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x268>
    8964:	f884 61fa 	strb.w	r6, [r4, #506]	; 0x1fa
    8968:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    896c:	6068      	str	r0, [r5, #4]
    896e:	f8b4 0200 	ldrh.w	r0, [r4, #512]	; 0x200
    8972:	8128      	strh	r0, [r5, #8]
    8974:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    8978:	f88d 0000 	strb.w	r0, [sp]
    897c:	9800      	ldr	r0, [sp, #0]
    897e:	9000      	str	r0, [sp, #0]
    8980:	f89d 0000 	ldrb.w	r0, [sp]
    8984:	2800      	cmp	r0, #0
    8986:	d1ed      	bne.n	8964 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x258>
    8988:	2001      	movs	r0, #1
    898a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000898c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    898c:	481b      	ldr	r0, [pc, #108]	; (89fc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x70>)
    898e:	491a      	ldr	r1, [pc, #104]	; (89f8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x6c>)
    8990:	6081      	str	r1, [r0, #8]
    8992:	491b      	ldr	r1, [pc, #108]	; (8a00 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
    8994:	6041      	str	r1, [r0, #4]
    8996:	491b      	ldr	r1, [pc, #108]	; (8a04 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    8998:	6001      	str	r1, [r0, #0]
    899a:	491b      	ldr	r1, [pc, #108]	; (8a08 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    899c:	6281      	str	r1, [r0, #40]	; 0x28
    899e:	491b      	ldr	r1, [pc, #108]	; (8a0c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    89a0:	62c1      	str	r1, [r0, #44]	; 0x2c
    89a2:	491b      	ldr	r1, [pc, #108]	; (8a10 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    89a4:	60c1      	str	r1, [r0, #12]
    89a6:	491b      	ldr	r1, [pc, #108]	; (8a14 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    89a8:	6181      	str	r1, [r0, #24]
    89aa:	491b      	ldr	r1, [pc, #108]	; (8a18 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    89ac:	6301      	str	r1, [r0, #48]	; 0x30
    89ae:	491b      	ldr	r1, [pc, #108]	; (8a1c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    89b0:	6201      	str	r1, [r0, #32]
    89b2:	491b      	ldr	r1, [pc, #108]	; (8a20 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    89b4:	64c1      	str	r1, [r0, #76]	; 0x4c
    89b6:	491b      	ldr	r1, [pc, #108]	; (8a24 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    89b8:	6481      	str	r1, [r0, #72]	; 0x48
    89ba:	491b      	ldr	r1, [pc, #108]	; (8a28 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    89bc:	6441      	str	r1, [r0, #68]	; 0x44
    89be:	491b      	ldr	r1, [pc, #108]	; (8a2c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    89c0:	6341      	str	r1, [r0, #52]	; 0x34
    89c2:	491b      	ldr	r1, [pc, #108]	; (8a30 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    89c4:	61c1      	str	r1, [r0, #28]
    89c6:	481c      	ldr	r0, [pc, #112]	; (8a38 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    89c8:	491a      	ldr	r1, [pc, #104]	; (8a34 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    89ca:	6081      	str	r1, [r0, #8]
    89cc:	491b      	ldr	r1, [pc, #108]	; (8a3c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    89ce:	61c1      	str	r1, [r0, #28]
    89d0:	491b      	ldr	r1, [pc, #108]	; (8a40 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    89d2:	6241      	str	r1, [r0, #36]	; 0x24
    89d4:	491b      	ldr	r1, [pc, #108]	; (8a44 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    89d6:	62c1      	str	r1, [r0, #44]	; 0x2c
    89d8:	491b      	ldr	r1, [pc, #108]	; (8a48 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    89da:	6101      	str	r1, [r0, #16]
    89dc:	491b      	ldr	r1, [pc, #108]	; (8a4c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    89de:	6141      	str	r1, [r0, #20]
    89e0:	491b      	ldr	r1, [pc, #108]	; (8a50 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    89e2:	6441      	str	r1, [r0, #68]	; 0x44
    89e4:	6341      	str	r1, [r0, #52]	; 0x34
    89e6:	491b      	ldr	r1, [pc, #108]	; (8a54 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    89e8:	6181      	str	r1, [r0, #24]
    89ea:	491b      	ldr	r1, [pc, #108]	; (8a58 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    89ec:	6301      	str	r1, [r0, #48]	; 0x30
    89ee:	491b      	ldr	r1, [pc, #108]	; (8a5c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    89f0:	6481      	str	r1, [r0, #72]	; 0x48
    89f2:	491b      	ldr	r1, [pc, #108]	; (8a60 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    89f4:	64c1      	str	r1, [r0, #76]	; 0x4c
    89f6:	4770      	bx	lr
    89f8:	00009fe1 	.word	0x00009fe1
    89fc:	20000140 	.word	0x20000140
    8a00:	00009949 	.word	0x00009949
    8a04:	000099a5 	.word	0x000099a5
    8a08:	00009d09 	.word	0x00009d09
    8a0c:	00009d4d 	.word	0x00009d4d
    8a10:	00009a51 	.word	0x00009a51
    8a14:	00009fb9 	.word	0x00009fb9
    8a18:	0000a0fd 	.word	0x0000a0fd
    8a1c:	00009afd 	.word	0x00009afd
    8a20:	00009cdd 	.word	0x00009cdd
    8a24:	00009cb1 	.word	0x00009cb1
    8a28:	00009f79 	.word	0x00009f79
    8a2c:	00009fa9 	.word	0x00009fa9
    8a30:	0000a015 	.word	0x0000a015
    8a34:	0000a475 	.word	0x0000a475
    8a38:	200001a4 	.word	0x200001a4
    8a3c:	0000a49d 	.word	0x0000a49d
    8a40:	0000a25d 	.word	0x0000a25d
    8a44:	0000a335 	.word	0x0000a335
    8a48:	0000a231 	.word	0x0000a231
    8a4c:	0000a3dd 	.word	0x0000a3dd
    8a50:	0000a3b9 	.word	0x0000a3b9
    8a54:	0000a401 	.word	0x0000a401
    8a58:	0000a4f5 	.word	0x0000a4f5
    8a5c:	0000a2ed 	.word	0x0000a2ed
    8a60:	0000a31d 	.word	0x0000a31d

00008a64 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    8a64:	4806      	ldr	r0, [pc, #24]	; (8a80 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    8a66:	4905      	ldr	r1, [pc, #20]	; (8a7c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    8a68:	6581      	str	r1, [r0, #88]	; 0x58
    8a6a:	4906      	ldr	r1, [pc, #24]	; (8a84 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    8a6c:	6601      	str	r1, [r0, #96]	; 0x60
    8a6e:	4807      	ldr	r0, [pc, #28]	; (8a8c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    8a70:	4905      	ldr	r1, [pc, #20]	; (8a88 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    8a72:	6581      	str	r1, [r0, #88]	; 0x58
    8a74:	4906      	ldr	r1, [pc, #24]	; (8a90 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    8a76:	65c1      	str	r1, [r0, #92]	; 0x5c
    8a78:	4770      	bx	lr
    8a7a:	0000      	.short	0x0000
    8a7c:	00009d6d 	.word	0x00009d6d
    8a80:	20000140 	.word	0x20000140
    8a84:	00009e35 	.word	0x00009e35
    8a88:	0000a361 	.word	0x0000a361
    8a8c:	200001a4 	.word	0x200001a4
    8a90:	0000a391 	.word	0x0000a391

00008a94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    8a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8a98:	2701      	movs	r7, #1
    8a9a:	4c73      	ldr	r4, [pc, #460]	; (8c68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d4>)
    8a9c:	2500      	movs	r5, #0
    8a9e:	f367 0107 	bfi	r1, r7, #0, #8
    8aa2:	8065      	strh	r5, [r4, #2]
    8aa4:	7065      	strb	r5, [r4, #1]
    8aa6:	7025      	strb	r5, [r4, #0]
    8aa8:	60a0      	str	r0, [r4, #8]
    8aaa:	4689      	mov	r9, r1
    8aac:	4680      	mov	r8, r0
    8aae:	f880 70fb 	strb.w	r7, [r0, #251]	; 0xfb
    8ab2:	8800      	ldrh	r0, [r0, #0]
    8ab4:	f7fc fb5e 	bl	5174 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    8ab8:	b180      	cbz	r0, 8adc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
    8aba:	68a0      	ldr	r0, [r4, #8]
    8abc:	8800      	ldrh	r0, [r0, #0]
    8abe:	f7fc fdad 	bl	561c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    8ac2:	68a0      	ldr	r0, [r4, #8]
    8ac4:	8800      	ldrh	r0, [r0, #0]
    8ac6:	f7fc fd51 	bl	556c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    8aca:	68a0      	ldr	r0, [r4, #8]
    8acc:	f8b0 10f2 	ldrh.w	r1, [r0, #242]	; 0xf2
    8ad0:	b1a9      	cbz	r1, 8afe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    8ad2:	3068      	adds	r0, #104	; 0x68
    8ad4:	f006 f939 	bl	ed4a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8ad8:	b128      	cbz	r0, 8ae6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52>
    8ada:	e010      	b.n	8afe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    8adc:	f640 31a9 	movw	r1, #2985	; 0xba9
    8ae0:	2031      	movs	r0, #49	; 0x31
    8ae2:	f7fb fefd 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ae6:	68a0      	ldr	r0, [r4, #8]
    8ae8:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    8aec:	b139      	cbz	r1, 8afe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    8aee:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    8af2:	2301      	movs	r3, #1
    8af4:	4619      	mov	r1, r3
    8af6:	3068      	adds	r0, #104	; 0x68
    8af8:	f004 fe62 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8afc:	b180      	cbz	r0, 8b20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c>
    8afe:	68a0      	ldr	r0, [r4, #8]
    8b00:	3068      	adds	r0, #104	; 0x68
    8b02:	f006 f922 	bl	ed4a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8b06:	b128      	cbz	r0, 8b14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    8b08:	68a0      	ldr	r0, [r4, #8]
    8b0a:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    8b0e:	bf00      	nop
    8b10:	f000 fb88 	bl	9224 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x790>
    8b14:	68a0      	ldr	r0, [r4, #8]
    8b16:	f890 10fd 	ldrb.w	r1, [r0, #253]	; 0xfd
    8b1a:	b189      	cbz	r1, 8b40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac>
    8b1c:	80a5      	strh	r5, [r4, #4]
    8b1e:	e01e      	b.n	8b5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    8b20:	68a0      	ldr	r0, [r4, #8]
    8b22:	f8a0 50a0 	strh.w	r5, [r0, #160]	; 0xa0
    8b26:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
    8b2a:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    8b2e:	2100      	movs	r1, #0
    8b30:	2002      	movs	r0, #2
    8b32:	f000 fe03 	bl	973c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8b36:	68a0      	ldr	r0, [r4, #8]
    8b38:	f880 50fa 	strb.w	r5, [r0, #250]	; 0xfa
    8b3c:	2002      	movs	r0, #2
    8b3e:	e7e7      	b.n	8b10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c>
    8b40:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
    8b44:	f88d 1000 	strb.w	r1, [sp]
    8b48:	9900      	ldr	r1, [sp, #0]
    8b4a:	9100      	str	r1, [sp, #0]
    8b4c:	f89d 1000 	ldrb.w	r1, [sp]
    8b50:	b919      	cbnz	r1, 8b5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6>
    8b52:	8b81      	ldrh	r1, [r0, #28]
    8b54:	8902      	ldrh	r2, [r0, #8]
    8b56:	4291      	cmp	r1, r2
    8b58:	d800      	bhi.n	8b5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8>
    8b5a:	8901      	ldrh	r1, [r0, #8]
    8b5c:	80a1      	strh	r1, [r4, #4]
    8b5e:	f830 1ff6 	ldrh.w	r1, [r0, #246]!
    8b62:	1e49      	subs	r1, r1, #1
    8b64:	b28e      	uxth	r6, r1
    8b66:	f830 1f02 	ldrh.w	r1, [r0, #2]!
    8b6a:	4431      	add	r1, r6
    8b6c:	f820 195c 	strh.w	r1, [r0], #-92
    8b70:	8801      	ldrh	r1, [r0, #0]
    8b72:	4431      	add	r1, r6
    8b74:	8001      	strh	r1, [r0, #0]
    8b76:	f001 fceb 	bl	a550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1abc>
    8b7a:	b120      	cbz	r0, 8b86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf2>
    8b7c:	68a0      	ldr	r0, [r4, #8]
    8b7e:	f850 1f90 	ldr.w	r1, [r0, #144]!
    8b82:	4431      	add	r1, r6
    8b84:	6001      	str	r1, [r0, #0]
    8b86:	68a0      	ldr	r0, [r4, #8]
    8b88:	f8b0 10f2 	ldrh.w	r1, [r0, #242]	; 0xf2
    8b8c:	2901      	cmp	r1, #1
    8b8e:	d802      	bhi.n	8b96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x102>
    8b90:	1c49      	adds	r1, r1, #1
    8b92:	f8a0 10f2 	strh.w	r1, [r0, #242]	; 0xf2
    8b96:	b10e      	cbz	r6, 8b9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    8b98:	f880 5104 	strb.w	r5, [r0, #260]	; 0x104
    8b9c:	f880 50fa 	strb.w	r5, [r0, #250]	; 0xfa
    8ba0:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8ba4:	290b      	cmp	r1, #11
    8ba6:	d001      	beq.n	8bac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x118>
    8ba8:	290c      	cmp	r1, #12
    8baa:	d118      	bne.n	8bde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a>
    8bac:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
    8bb0:	f8b0 318c 	ldrh.w	r3, [r0, #396]	; 0x18c
    8bb4:	1ad2      	subs	r2, r2, r3
    8bb6:	b212      	sxth	r2, r2
    8bb8:	2a00      	cmp	r2, #0
    8bba:	db10      	blt.n	8bde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a>
    8bbc:	f8d0 118e 	ldr.w	r1, [r0, #398]	; 0x18e
    8bc0:	f8c0 107e 	str.w	r1, [r0, #126]	; 0x7e
    8bc4:	f890 1192 	ldrb.w	r1, [r0, #402]	; 0x192
    8bc8:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
    8bcc:	2103      	movs	r1, #3
    8bce:	f7fd fd99 	bl	6704 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    8bd2:	68a0      	ldr	r0, [r4, #8]
    8bd4:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
    8bd8:	f880 70b6 	strb.w	r7, [r0, #182]	; 0xb6
    8bdc:	e024      	b.n	8c28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    8bde:	2924      	cmp	r1, #36	; 0x24
    8be0:	d10f      	bne.n	8c02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e>
    8be2:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
    8be6:	f8b0 218c 	ldrh.w	r2, [r0, #396]	; 0x18c
    8bea:	1a89      	subs	r1, r1, r2
    8bec:	b209      	sxth	r1, r1
    8bee:	2900      	cmp	r1, #0
    8bf0:	db07      	blt.n	8c02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e>
    8bf2:	f000 fe4f 	bl	9894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe00>
    8bf6:	68a0      	ldr	r0, [r4, #8]
    8bf8:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
    8bfc:	f880 51a6 	strb.w	r5, [r0, #422]	; 0x1a6
    8c00:	e012      	b.n	8c28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    8c02:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    8c06:	2924      	cmp	r1, #36	; 0x24
    8c08:	d001      	beq.n	8c0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17a>
    8c0a:	2925      	cmp	r1, #37	; 0x25
    8c0c:	d10c      	bne.n	8c28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    8c0e:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
    8c12:	f8b0 018c 	ldrh.w	r0, [r0, #396]	; 0x18c
    8c16:	1a08      	subs	r0, r1, r0
    8c18:	b200      	sxth	r0, r0
    8c1a:	2800      	cmp	r0, #0
    8c1c:	db04      	blt.n	8c28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    8c1e:	f000 fe39 	bl	9894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe00>
    8c22:	68a0      	ldr	r0, [r4, #8]
    8c24:	f880 5075 	strb.w	r5, [r0, #117]	; 0x75
    8c28:	68a0      	ldr	r0, [r4, #8]
    8c2a:	4601      	mov	r1, r0
    8c2c:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
    8c30:	3068      	adds	r0, #104	; 0x68
    8c32:	f004 ff9d 	bl	db70 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    8c36:	480d      	ldr	r0, [pc, #52]	; (8c6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d8>)
    8c38:	9000      	str	r0, [sp, #0]
    8c3a:	4b0d      	ldr	r3, [pc, #52]	; (8c70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc>)
    8c3c:	4a0d      	ldr	r2, [pc, #52]	; (8c74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e0>)
    8c3e:	4641      	mov	r1, r8
    8c40:	4648      	mov	r0, r9
    8c42:	f7fc fda1 	bl	5788 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8c46:	68a0      	ldr	r0, [r4, #8]
    8c48:	2301      	movs	r3, #1
    8c4a:	2105      	movs	r1, #5
    8c4c:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8c50:	3068      	adds	r0, #104	; 0x68
    8c52:	f004 fdb5 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c56:	2800      	cmp	r0, #0
    8c58:	d003      	beq.n	8c62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ce>
    8c5a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8c5e:	f7fc bd8d 	b.w	577c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8c66:	0000      	.short	0x0000
    8c68:	2000012c 	.word	0x2000012c
    8c6c:	000093d5 	.word	0x000093d5
    8c70:	00008eed 	.word	0x00008eed
    8c74:	000097e1 	.word	0x000097e1
    8c78:	b570      	push	{r4, r5, r6, lr}
    8c7a:	4c0f      	ldr	r4, [pc, #60]	; (8cb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>)
    8c7c:	68a5      	ldr	r5, [r4, #8]
    8c7e:	f895 1075 	ldrb.w	r1, [r5, #117]	; 0x75
    8c82:	2920      	cmp	r1, #32
    8c84:	d002      	beq.n	8c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>
    8c86:	2926      	cmp	r1, #38	; 0x26
    8c88:	d003      	beq.n	8c92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe>
    8c8a:	e011      	b.n	8cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    8c8c:	f000 fe38 	bl	9900 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    8c90:	e008      	b.n	8ca4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x210>
    8c92:	f895 2076 	ldrb.w	r2, [r5, #118]	; 0x76
    8c96:	2301      	movs	r3, #1
    8c98:	210b      	movs	r1, #11
    8c9a:	f105 0068 	add.w	r0, r5, #104	; 0x68
    8c9e:	f004 fd8f 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ca2:	b138      	cbz	r0, 8cb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x220>
    8ca4:	68a1      	ldr	r1, [r4, #8]
    8ca6:	2000      	movs	r0, #0
    8ca8:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    8cac:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    8cb0:	2000      	movs	r0, #0
    8cb2:	bd70      	pop	{r4, r5, r6, pc}
    8cb4:	202a      	movs	r0, #42	; 0x2a
    8cb6:	e7e9      	b.n	8c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>
    8cb8:	2000012c 	.word	0x2000012c
    8cbc:	4804      	ldr	r0, [pc, #16]	; (8cd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>)
    8cbe:	2100      	movs	r1, #0
    8cc0:	6880      	ldr	r0, [r0, #8]
    8cc2:	f820 1fa8 	strh.w	r1, [r0, #168]!
    8cc6:	7881      	ldrb	r1, [r0, #2]
    8cc8:	1c49      	adds	r1, r1, #1
    8cca:	7081      	strb	r1, [r0, #2]
    8ccc:	4770      	bx	lr
    8cce:	0000      	.short	0x0000
    8cd0:	2000012c 	.word	0x2000012c
    8cd4:	4807      	ldr	r0, [pc, #28]	; (8cf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x260>)
    8cd6:	b510      	push	{r4, lr}
    8cd8:	6881      	ldr	r1, [r0, #8]
    8cda:	f811 0faa 	ldrb.w	r0, [r1, #170]!
    8cde:	1e40      	subs	r0, r0, #1
    8ce0:	b240      	sxtb	r0, r0
    8ce2:	7008      	strb	r0, [r1, #0]
    8ce4:	2800      	cmp	r0, #0
    8ce6:	da04      	bge.n	8cf2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25e>
    8ce8:	f240 118f 	movw	r1, #399	; 0x18f
    8cec:	2031      	movs	r0, #49	; 0x31
    8cee:	f7fb fdf7 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cf2:	bd10      	pop	{r4, pc}
    8cf4:	2000012c 	.word	0x2000012c
    8cf8:	4917      	ldr	r1, [pc, #92]	; (8d58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>)
    8cfa:	b510      	push	{r4, lr}
    8cfc:	6889      	ldr	r1, [r1, #8]
    8cfe:	f891 2076 	ldrb.w	r2, [r1, #118]	; 0x76
    8d02:	b1b8      	cbz	r0, 8d34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2a0>
    8d04:	2a10      	cmp	r2, #16
    8d06:	d006      	beq.n	8d16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x282>
    8d08:	2a14      	cmp	r2, #20
    8d0a:	d007      	beq.n	8d1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x288>
    8d0c:	2a15      	cmp	r2, #21
    8d0e:	d008      	beq.n	8d22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28e>
    8d10:	2a1b      	cmp	r2, #27
    8d12:	d11c      	bne.n	8d4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ba>
    8d14:	e008      	b.n	8d28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x294>
    8d16:	2101      	movs	r1, #1
    8d18:	200b      	movs	r0, #11
    8d1a:	e007      	b.n	8d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    8d1c:	f001 fa4a 	bl	a1b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1720>
    8d20:	e006      	b.n	8d30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x29c>
    8d22:	f000 fd29 	bl	9778 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce4>
    8d26:	e003      	b.n	8d30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x29c>
    8d28:	2101      	movs	r1, #1
    8d2a:	2006      	movs	r0, #6
    8d2c:	f000 fd06 	bl	973c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8d30:	2001      	movs	r0, #1
    8d32:	bd10      	pop	{r4, pc}
    8d34:	2a21      	cmp	r2, #33	; 0x21
    8d36:	d10a      	bne.n	8d4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ba>
    8d38:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    8d3c:	2802      	cmp	r0, #2
    8d3e:	d008      	beq.n	8d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2be>
    8d40:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    8d44:	2801      	cmp	r0, #1
    8d46:	d102      	bne.n	8d4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ba>
    8d48:	f891 01a7 	ldrb.w	r0, [r1, #423]	; 0x1a7
    8d4c:	b108      	cbz	r0, 8d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2be>
    8d4e:	2000      	movs	r0, #0
    8d50:	bd10      	pop	{r4, pc}
    8d52:	2101      	movs	r1, #1
    8d54:	2017      	movs	r0, #23
    8d56:	e7e9      	b.n	8d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    8d58:	2000012c 	.word	0x2000012c
    8d5c:	b510      	push	{r4, lr}
    8d5e:	bbe8      	cbnz	r0, 8ddc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    8d60:	4c31      	ldr	r4, [pc, #196]	; (8e28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x394>)
    8d62:	68a0      	ldr	r0, [r4, #8]
    8d64:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    8d68:	07ca      	lsls	r2, r1, #31
    8d6a:	d002      	beq.n	8d72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2de>
    8d6c:	2101      	movs	r1, #1
    8d6e:	2009      	movs	r0, #9
    8d70:	e052      	b.n	8e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x384>
    8d72:	078a      	lsls	r2, r1, #30
    8d74:	d50a      	bpl.n	8d8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
    8d76:	2101      	movs	r1, #1
    8d78:	200c      	movs	r0, #12
    8d7a:	f000 fcdf 	bl	973c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8d7e:	68a0      	ldr	r0, [r4, #8]
    8d80:	f810 1fae 	ldrb.w	r1, [r0, #174]!
    8d84:	f041 0101 	orr.w	r1, r1, #1
    8d88:	7001      	strb	r1, [r0, #0]
    8d8a:	e047      	b.n	8e1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x388>
    8d8c:	074a      	lsls	r2, r1, #29
    8d8e:	d502      	bpl.n	8d96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x302>
    8d90:	2101      	movs	r1, #1
    8d92:	2013      	movs	r0, #19
    8d94:	e040      	b.n	8e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x384>
    8d96:	070a      	lsls	r2, r1, #28
    8d98:	d505      	bpl.n	8da6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x312>
    8d9a:	f810 1fe1 	ldrb.w	r1, [r0, #225]!
    8d9e:	7141      	strb	r1, [r0, #5]
    8da0:	2101      	movs	r1, #1
    8da2:	2007      	movs	r0, #7
    8da4:	e038      	b.n	8e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x384>
    8da6:	f011 0f30 	tst.w	r1, #48	; 0x30
    8daa:	d03b      	beq.n	8e24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    8dac:	f890 119d 	ldrb.w	r1, [r0, #413]	; 0x19d
    8db0:	b9a1      	cbnz	r1, 8ddc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    8db2:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    8db6:	b1e1      	cbz	r1, 8df2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35e>
    8db8:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8dbc:	2924      	cmp	r1, #36	; 0x24
    8dbe:	d02f      	beq.n	8e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x38c>
    8dc0:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    8dc4:	2924      	cmp	r1, #36	; 0x24
    8dc6:	d02b      	beq.n	8e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x38c>
    8dc8:	f05f 0300 	movs.w	r3, #0
    8dcc:	f500 72c7 	add.w	r2, r0, #398	; 0x18e
    8dd0:	f500 71ce 	add.w	r1, r0, #412	; 0x19c
    8dd4:	f005 f92a 	bl	e02c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8dd8:	68a1      	ldr	r1, [r4, #8]
    8dda:	e000      	b.n	8dde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x34a>
    8ddc:	e022      	b.n	8e24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    8dde:	f811 0f77 	ldrb.w	r0, [r1, #119]!
    8de2:	f020 0020 	bic.w	r0, r0, #32
    8de6:	f040 0010 	orr.w	r0, r0, #16
    8dea:	7008      	strb	r0, [r1, #0]
    8dec:	2000      	movs	r0, #0
    8dee:	f881 0125 	strb.w	r0, [r1, #293]	; 0x125
    8df2:	68a0      	ldr	r0, [r4, #8]
    8df4:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    8df8:	06c9      	lsls	r1, r1, #27
    8dfa:	d513      	bpl.n	8e24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    8dfc:	f005 f931 	bl	e062 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8e00:	f000 f906 	bl	9010 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57c>
    8e04:	68a1      	ldr	r1, [r4, #8]
    8e06:	f101 0024 	add.w	r0, r1, #36	; 0x24
    8e0a:	8bc2      	ldrh	r2, [r0, #30]
    8e0c:	f821 2fe6 	strh.w	r2, [r1, #230]!
    8e10:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8e12:	8048      	strh	r0, [r1, #2]
    8e14:	2101      	movs	r1, #1
    8e16:	2015      	movs	r0, #21
    8e18:	f000 fc90 	bl	973c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8e1c:	2001      	movs	r0, #1
    8e1e:	bd10      	pop	{r4, pc}
    8e20:	2301      	movs	r3, #1
    8e22:	e7d3      	b.n	8dcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x338>
    8e24:	2000      	movs	r0, #0
    8e26:	bd10      	pop	{r4, pc}
    8e28:	2000012c 	.word	0x2000012c
    8e2c:	b570      	push	{r4, r5, r6, lr}
    8e2e:	460d      	mov	r5, r1
    8e30:	4606      	mov	r6, r0
    8e32:	f004 ff48 	bl	dcc6 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    8e36:	4604      	mov	r4, r0
    8e38:	4630      	mov	r0, r6
    8e3a:	f004 ff50 	bl	dcde <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    8e3e:	4629      	mov	r1, r5
    8e40:	f000 f81e 	bl	8e80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ec>
    8e44:	b1b8      	cbz	r0, 8e76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e2>
    8e46:	4620      	mov	r0, r4
    8e48:	f004 fd53 	bl	d8f2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8e4c:	0001      	movs	r1, r0
    8e4e:	d00d      	beq.n	8e6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d8>
    8e50:	480a      	ldr	r0, [pc, #40]	; (8e7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e8>)
    8e52:	6880      	ldr	r0, [r0, #8]
    8e54:	f890 2063 	ldrb.w	r2, [r0, #99]	; 0x63
    8e58:	428a      	cmp	r2, r1
    8e5a:	d007      	beq.n	8e6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d8>
    8e5c:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    8e60:	2901      	cmp	r1, #1
    8e62:	d005      	beq.n	8e70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3dc>
    8e64:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
    8e68:	4220      	tst	r0, r4
    8e6a:	d004      	beq.n	8e76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e2>
    8e6c:	2001      	movs	r0, #1
    8e6e:	bd70      	pop	{r4, r5, r6, pc}
    8e70:	f890 01a9 	ldrb.w	r0, [r0, #425]	; 0x1a9
    8e74:	e7f8      	b.n	8e68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d4>
    8e76:	2000      	movs	r0, #0
    8e78:	bd70      	pop	{r4, r5, r6, pc}
    8e7a:	0000      	.short	0x0000
    8e7c:	2000012c 	.word	0x2000012c
    8e80:	b570      	push	{r4, r5, r6, lr}
    8e82:	460d      	mov	r5, r1
    8e84:	4604      	mov	r4, r0
    8e86:	f004 fd34 	bl	d8f2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8e8a:	b350      	cbz	r0, 8ee2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44e>
    8e8c:	4916      	ldr	r1, [pc, #88]	; (8ee8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x454>)
    8e8e:	6889      	ldr	r1, [r1, #8]
    8e90:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    8e94:	4282      	cmp	r2, r0
    8e96:	d024      	beq.n	8ee2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44e>
    8e98:	f891 31a6 	ldrb.w	r3, [r1, #422]	; 0x1a6
    8e9c:	2b01      	cmp	r3, #1
    8e9e:	d005      	beq.n	8eac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x418>
    8ea0:	f891 305e 	ldrb.w	r3, [r1, #94]	; 0x5e
    8ea4:	4223      	tst	r3, r4
    8ea6:	d013      	beq.n	8ed0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43c>
    8ea8:	b11d      	cbz	r5, 8eb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41e>
    8eaa:	e01a      	b.n	8ee2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44e>
    8eac:	f891 31a8 	ldrb.w	r3, [r1, #424]	; 0x1a8
    8eb0:	e7f8      	b.n	8ea4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x410>
    8eb2:	f891 105b 	ldrb.w	r1, [r1, #91]	; 0x5b
    8eb6:	4221      	tst	r1, r4
    8eb8:	d113      	bne.n	8ee2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44e>
    8eba:	b15a      	cbz	r2, 8ed4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x440>
    8ebc:	2a04      	cmp	r2, #4
    8ebe:	d00e      	beq.n	8ede <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    8ec0:	2804      	cmp	r0, #4
    8ec2:	d00c      	beq.n	8ede <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    8ec4:	2a08      	cmp	r2, #8
    8ec6:	d00a      	beq.n	8ede <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    8ec8:	2808      	cmp	r0, #8
    8eca:	d008      	beq.n	8ede <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    8ecc:	4282      	cmp	r2, r0
    8ece:	d908      	bls.n	8ee2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44e>
    8ed0:	2000      	movs	r0, #0
    8ed2:	bd70      	pop	{r4, r5, r6, pc}
    8ed4:	f240 1165 	movw	r1, #357	; 0x165
    8ed8:	2006      	movs	r0, #6
    8eda:	f7fb fd01 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ede:	4282      	cmp	r2, r0
    8ee0:	d3f6      	bcc.n	8ed0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43c>
    8ee2:	2001      	movs	r0, #1
    8ee4:	bd70      	pop	{r4, r5, r6, pc}
    8ee6:	0000      	.short	0x0000
    8ee8:	2000012c 	.word	0x2000012c
    8eec:	490c      	ldr	r1, [pc, #48]	; (8f20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48c>)
    8eee:	4602      	mov	r2, r0
    8ef0:	7848      	ldrb	r0, [r1, #1]
    8ef2:	b998      	cbnz	r0, 8f1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x488>
    8ef4:	4608      	mov	r0, r1
    8ef6:	6880      	ldr	r0, [r0, #8]
    8ef8:	b142      	cbz	r2, 8f0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x478>
    8efa:	7889      	ldrb	r1, [r1, #2]
    8efc:	0709      	lsls	r1, r1, #28
    8efe:	d503      	bpl.n	8f08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x474>
    8f00:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    8f04:	2808      	cmp	r0, #8
    8f06:	d009      	beq.n	8f1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x488>
    8f08:	2001      	movs	r0, #1
    8f0a:	4770      	bx	lr
    8f0c:	f100 0124 	add.w	r1, r0, #36	; 0x24
    8f10:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    8f12:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
    8f14:	428a      	cmp	r2, r1
    8f16:	d801      	bhi.n	8f1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x488>
    8f18:	f7fe bf06 	b.w	7d28 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    8f1c:	2000      	movs	r0, #0
    8f1e:	4770      	bx	lr
    8f20:	2000012c 	.word	0x2000012c
    8f24:	b570      	push	{r4, r5, r6, lr}
    8f26:	4c39      	ldr	r4, [pc, #228]	; (900c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x578>)
    8f28:	4605      	mov	r5, r0
    8f2a:	68a0      	ldr	r0, [r4, #8]
    8f2c:	3068      	adds	r0, #104	; 0x68
    8f2e:	f005 ff0c 	bl	ed4a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8f32:	2800      	cmp	r0, #0
    8f34:	d169      	bne.n	900a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x576>
    8f36:	2d00      	cmp	r5, #0
    8f38:	d167      	bne.n	900a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x576>
    8f3a:	68a0      	ldr	r0, [r4, #8]
    8f3c:	2301      	movs	r3, #1
    8f3e:	4619      	mov	r1, r3
    8f40:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    8f44:	3068      	adds	r0, #104	; 0x68
    8f46:	f004 fc3b 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f4a:	2800      	cmp	r0, #0
    8f4c:	d15d      	bne.n	900a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x576>
    8f4e:	68a0      	ldr	r0, [r4, #8]
    8f50:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    8f54:	b149      	cbz	r1, 8f6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d6>
    8f56:	2100      	movs	r1, #0
    8f58:	f8a0 10a0 	strh.w	r1, [r0, #160]	; 0xa0
    8f5c:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
    8f60:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    8f64:	2100      	movs	r1, #0
    8f66:	2002      	movs	r0, #2
    8f68:	e045      	b.n	8ff6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x562>
    8f6a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8f6e:	2301      	movs	r3, #1
    8f70:	2104      	movs	r1, #4
    8f72:	3068      	adds	r0, #104	; 0x68
    8f74:	f004 fc24 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f78:	4605      	mov	r5, r0
    8f7a:	f7ff feef 	bl	8d5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c8>
    8f7e:	2800      	cmp	r0, #0
    8f80:	d143      	bne.n	900a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x576>
    8f82:	4628      	mov	r0, r5
    8f84:	f7ff feb8 	bl	8cf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    8f88:	2800      	cmp	r0, #0
    8f8a:	d13e      	bne.n	900a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x576>
    8f8c:	68a0      	ldr	r0, [r4, #8]
    8f8e:	2301      	movs	r3, #1
    8f90:	2100      	movs	r1, #0
    8f92:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    8f96:	3068      	adds	r0, #104	; 0x68
    8f98:	f004 fc12 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f9c:	b178      	cbz	r0, 8fbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52a>
    8f9e:	68a0      	ldr	r0, [r4, #8]
    8fa0:	2301      	movs	r3, #1
    8fa2:	2104      	movs	r1, #4
    8fa4:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8fa8:	3068      	adds	r0, #104	; 0x68
    8faa:	f004 fc09 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8fae:	b930      	cbnz	r0, 8fbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52a>
    8fb0:	68a0      	ldr	r0, [r4, #8]
    8fb2:	f890 009a 	ldrb.w	r0, [r0, #154]	; 0x9a
    8fb6:	b110      	cbz	r0, 8fbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52a>
    8fb8:	2100      	movs	r1, #0
    8fba:	2012      	movs	r0, #18
    8fbc:	e01b      	b.n	8ff6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x562>
    8fbe:	68a0      	ldr	r0, [r4, #8]
    8fc0:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    8fc4:	290a      	cmp	r1, #10
    8fc6:	d01a      	beq.n	8ffe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x56a>
    8fc8:	2d00      	cmp	r5, #0
    8fca:	d11e      	bne.n	900a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x576>
    8fcc:	f000 fb16 	bl	95fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb68>
    8fd0:	2800      	cmp	r0, #0
    8fd2:	d11a      	bne.n	900a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x576>
    8fd4:	68a0      	ldr	r0, [r4, #8]
    8fd6:	2301      	movs	r3, #1
    8fd8:	2100      	movs	r1, #0
    8fda:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    8fde:	3068      	adds	r0, #104	; 0x68
    8fe0:	f004 fbee 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8fe4:	2800      	cmp	r0, #0
    8fe6:	d010      	beq.n	900a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x576>
    8fe8:	68a0      	ldr	r0, [r4, #8]
    8fea:	f890 0184 	ldrb.w	r0, [r0, #388]	; 0x184
    8fee:	2800      	cmp	r0, #0
    8ff0:	d00b      	beq.n	900a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x576>
    8ff2:	2100      	movs	r1, #0
    8ff4:	20ff      	movs	r0, #255	; 0xff
    8ff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8ffa:	f000 bb9f 	b.w	973c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8ffe:	f810 1fe2 	ldrb.w	r1, [r0, #226]!
    9002:	7101      	strb	r1, [r0, #4]
    9004:	2100      	movs	r1, #0
    9006:	2007      	movs	r0, #7
    9008:	e7f5      	b.n	8ff6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x562>
    900a:	bd70      	pop	{r4, r5, r6, pc}
    900c:	2000012c 	.word	0x2000012c
    9010:	480a      	ldr	r0, [pc, #40]	; (903c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5a8>)
    9012:	b510      	push	{r4, lr}
    9014:	6881      	ldr	r1, [r0, #8]
    9016:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    901a:	2801      	cmp	r0, #1
    901c:	d009      	beq.n	9032 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x59e>
    901e:	8808      	ldrh	r0, [r1, #0]
    9020:	f501 72e9 	add.w	r2, r1, #466	; 0x1d2
    9024:	3124      	adds	r1, #36	; 0x24
    9026:	f004 ffdd 	bl	dfe4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    902a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    902e:	f001 bbb3 	b.w	a798 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9032:	2002      	movs	r0, #2
    9034:	f881 0058 	strb.w	r0, [r1, #88]	; 0x58
    9038:	bd10      	pop	{r4, pc}
    903a:	0000      	.short	0x0000
    903c:	2000012c 	.word	0x2000012c
    9040:	b570      	push	{r4, r5, r6, lr}
    9042:	4c25      	ldr	r4, [pc, #148]	; (90d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>)
    9044:	0005      	movs	r5, r0
    9046:	d12f      	bne.n	90a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x614>
    9048:	f000 f8a4 	bl	9194 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x700>
    904c:	f000 f848 	bl	90e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64c>
    9050:	0005      	movs	r5, r0
    9052:	d129      	bne.n	90a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x614>
    9054:	8860      	ldrh	r0, [r4, #2]
    9056:	0741      	lsls	r1, r0, #29
    9058:	d506      	bpl.n	9068 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    905a:	68a1      	ldr	r1, [r4, #8]
    905c:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    9060:	2907      	cmp	r1, #7
    9062:	d101      	bne.n	9068 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    9064:	2101      	movs	r1, #1
    9066:	7021      	strb	r1, [r4, #0]
    9068:	0780      	lsls	r0, r0, #30
    906a:	d512      	bpl.n	9092 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fe>
    906c:	68e0      	ldr	r0, [r4, #12]
    906e:	78c0      	ldrb	r0, [r0, #3]
    9070:	2819      	cmp	r0, #25
    9072:	d205      	bcs.n	9080 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ec>
    9074:	4919      	ldr	r1, [pc, #100]	; (90dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x648>)
    9076:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    907a:	b109      	cbz	r1, 9080 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ec>
    907c:	4788      	blx	r1
    907e:	e008      	b.n	9092 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fe>
    9080:	28ff      	cmp	r0, #255	; 0xff
    9082:	d004      	beq.n	908e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fa>
    9084:	f240 713c 	movw	r1, #1852	; 0x73c
    9088:	2031      	movs	r0, #49	; 0x31
    908a:	f7fb fc29 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    908e:	f001 f8c3 	bl	a218 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1784>
    9092:	78a0      	ldrb	r0, [r4, #2]
    9094:	06c0      	lsls	r0, r0, #27
    9096:	d507      	bpl.n	90a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x614>
    9098:	68a0      	ldr	r0, [r4, #8]
    909a:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    909e:	290b      	cmp	r1, #11
    90a0:	d102      	bne.n	90a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x614>
    90a2:	210c      	movs	r1, #12
    90a4:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    90a8:	7860      	ldrb	r0, [r4, #1]
    90aa:	0700      	lsls	r0, r0, #28
    90ac:	d511      	bpl.n	90d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63e>
    90ae:	68a0      	ldr	r0, [r4, #8]
    90b0:	2301      	movs	r3, #1
    90b2:	2105      	movs	r1, #5
    90b4:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    90b8:	3068      	adds	r0, #104	; 0x68
    90ba:	f004 fb81 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    90be:	b128      	cbz	r0, 90cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    90c0:	68a1      	ldr	r1, [r4, #8]
    90c2:	2508      	movs	r5, #8
    90c4:	2000      	movs	r0, #0
    90c6:	f881 01bc 	strb.w	r0, [r1, #444]	; 0x1bc
    90ca:	e002      	b.n	90d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63e>
    90cc:	2000      	movs	r0, #0
    90ce:	f7fc fc15 	bl	58fc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    90d2:	4628      	mov	r0, r5
    90d4:	bd70      	pop	{r4, r5, r6, pc}
    90d6:	0000      	.short	0x0000
    90d8:	2000012c 	.word	0x2000012c
    90dc:	200001a4 	.word	0x200001a4
    90e0:	b570      	push	{r4, r5, r6, lr}
    90e2:	4c2a      	ldr	r4, [pc, #168]	; (918c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f8>)
    90e4:	2000      	movs	r0, #0
    90e6:	78a1      	ldrb	r1, [r4, #2]
    90e8:	07c9      	lsls	r1, r1, #31
    90ea:	d015      	beq.n	9118 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x684>
    90ec:	6920      	ldr	r0, [r4, #16]
    90ee:	2301      	movs	r3, #1
    90f0:	2105      	movs	r1, #5
    90f2:	78c5      	ldrb	r5, [r0, #3]
    90f4:	68a0      	ldr	r0, [r4, #8]
    90f6:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    90fa:	3068      	adds	r0, #104	; 0x68
    90fc:	f004 fb60 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9100:	b158      	cbz	r0, 911a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x686>
    9102:	1ead      	subs	r5, r5, #2
    9104:	2d0a      	cmp	r5, #10
    9106:	d206      	bcs.n	9116 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x682>
    9108:	e8df f005 	tbb	[pc, r5]
    910c:	05050707 	.word	0x05050707
    9110:	05050707 	.word	0x05050707
    9114:	0707      	.short	0x0707
    9116:	2008      	movs	r0, #8
    9118:	bd70      	pop	{r4, r5, r6, pc}
    911a:	6920      	ldr	r0, [r4, #16]
    911c:	f7fd fbc8 	bl	68b0 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    9120:	b138      	cbz	r0, 9132 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69e>
    9122:	6920      	ldr	r0, [r4, #16]
    9124:	78c5      	ldrb	r5, [r0, #3]
    9126:	b145      	cbz	r5, 913a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a6>
    9128:	2d01      	cmp	r5, #1
    912a:	d006      	beq.n	913a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a6>
    912c:	2d16      	cmp	r5, #22
    912e:	d118      	bne.n	9162 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ce>
    9130:	e003      	b.n	913a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a6>
    9132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9136:	f000 bd0b 	b.w	9b50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10bc>
    913a:	68a0      	ldr	r0, [r4, #8]
    913c:	f890 0075 	ldrb.w	r0, [r0, #117]	; 0x75
    9140:	f004 fb8c 	bl	d85c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9144:	b168      	cbz	r0, 9162 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ce>
    9146:	68a1      	ldr	r1, [r4, #8]
    9148:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    914c:	281f      	cmp	r0, #31
    914e:	d008      	beq.n	9162 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ce>
    9150:	2820      	cmp	r0, #32
    9152:	d003      	beq.n	915c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c8>
    9154:	2d16      	cmp	r5, #22
    9156:	d00c      	beq.n	9172 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6de>
    9158:	2002      	movs	r0, #2
    915a:	bd70      	pop	{r4, r5, r6, pc}
    915c:	2026      	movs	r0, #38	; 0x26
    915e:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    9162:	2d19      	cmp	r5, #25
    9164:	d207      	bcs.n	9176 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e2>
    9166:	480a      	ldr	r0, [pc, #40]	; (9190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fc>)
    9168:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    916c:	b118      	cbz	r0, 9176 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e2>
    916e:	4780      	blx	r0
    9170:	e003      	b.n	917a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e6>
    9172:	2020      	movs	r0, #32
    9174:	bd70      	pop	{r4, r5, r6, pc}
    9176:	f000 fceb 	bl	9b50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10bc>
    917a:	68a2      	ldr	r2, [r4, #8]
    917c:	e9f2 1330 	ldrd	r1, r3, [r2, #192]!	; 0xc0
    9180:	1c49      	adds	r1, r1, #1
    9182:	f143 0300 	adc.w	r3, r3, #0
    9186:	e9c2 1300 	strd	r1, r3, [r2]
    918a:	bd70      	pop	{r4, r5, r6, pc}
    918c:	2000012c 	.word	0x2000012c
    9190:	20000140 	.word	0x20000140
    9194:	b570      	push	{r4, r5, r6, lr}
    9196:	4c22      	ldr	r4, [pc, #136]	; (9220 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78c>)
    9198:	78a0      	ldrb	r0, [r4, #2]
    919a:	0700      	lsls	r0, r0, #28
    919c:	d53e      	bpl.n	921c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>
    919e:	68a0      	ldr	r0, [r4, #8]
    91a0:	3068      	adds	r0, #104	; 0x68
    91a2:	f005 fdd2 	bl	ed4a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    91a6:	b148      	cbz	r0, 91bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    91a8:	68a0      	ldr	r0, [r4, #8]
    91aa:	21fe      	movs	r1, #254	; 0xfe
    91ac:	2500      	movs	r5, #0
    91ae:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    91b2:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    91b6:	2919      	cmp	r1, #25
    91b8:	d10c      	bne.n	91d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x740>
    91ba:	e004      	b.n	91c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x732>
    91bc:	f240 7146 	movw	r1, #1862	; 0x746
    91c0:	2031      	movs	r0, #49	; 0x31
    91c2:	f7fb fb8d 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91c6:	f880 50ab 	strb.w	r5, [r0, #171]	; 0xab
    91ca:	f7ff fd83 	bl	8cd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    91ce:	68a0      	ldr	r0, [r4, #8]
    91d0:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
    91d4:	68a0      	ldr	r0, [r4, #8]
    91d6:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    91da:	291f      	cmp	r1, #31
    91dc:	d002      	beq.n	91e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>
    91de:	2927      	cmp	r1, #39	; 0x27
    91e0:	d113      	bne.n	920a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x776>
    91e2:	e00b      	b.n	91fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x768>
    91e4:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    91e8:	f004 fb38 	bl	d85c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    91ec:	b108      	cbz	r0, 91f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75e>
    91ee:	2026      	movs	r0, #38	; 0x26
    91f0:	e000      	b.n	91f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>
    91f2:	2020      	movs	r0, #32
    91f4:	68a1      	ldr	r1, [r4, #8]
    91f6:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    91fa:	e006      	b.n	920a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x776>
    91fc:	2101      	movs	r1, #1
    91fe:	f880 1185 	strb.w	r1, [r0, #389]	; 0x185
    9202:	f880 5075 	strb.w	r5, [r0, #117]	; 0x75
    9206:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    920a:	68a0      	ldr	r0, [r4, #8]
    920c:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    9210:	2908      	cmp	r1, #8
    9212:	d103      	bne.n	921c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>
    9214:	2102      	movs	r1, #2
    9216:	7021      	strb	r1, [r4, #0]
    9218:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    921c:	bd70      	pop	{r4, r5, r6, pc}
    921e:	0000      	.short	0x0000
    9220:	2000012c 	.word	0x2000012c
    9224:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    9226:	4605      	mov	r5, r0
    9228:	4668      	mov	r0, sp
    922a:	f7fc f9e1 	bl	55f0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    922e:	b318      	cbz	r0, 9278 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>
    9230:	2222      	movs	r2, #34	; 0x22
    9232:	2100      	movs	r1, #0
    9234:	9800      	ldr	r0, [sp, #0]
    9236:	f003 f9e2 	bl	c5fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    923a:	2103      	movs	r1, #3
    923c:	9800      	ldr	r0, [sp, #0]
    923e:	f004 fda2 	bl	dd86 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    9242:	9800      	ldr	r0, [sp, #0]
    9244:	7801      	ldrb	r1, [r0, #0]
    9246:	f021 0110 	bic.w	r1, r1, #16
    924a:	7001      	strb	r1, [r0, #0]
    924c:	4629      	mov	r1, r5
    924e:	f7fd fb5b 	bl	6908 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    9252:	2100      	movs	r1, #0
    9254:	4c5e      	ldr	r4, [pc, #376]	; (93d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x93c>)
    9256:	f644 162f 	movw	r6, #18735	; 0x492f
    925a:	2d0e      	cmp	r5, #14
    925c:	d07e      	beq.n	935c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c8>
    925e:	dc0e      	bgt.n	927e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ea>
    9260:	f1a5 0502 	sub.w	r5, r5, #2
    9264:	2d0c      	cmp	r5, #12
    9266:	d21c      	bcs.n	92a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80e>
    9268:	e8df f005 	tbb	[pc, r5]
    926c:	a7451b1e 	.word	0xa7451b1e
    9270:	511b1ea7 	.word	0x511b1ea7
    9274:	3723a71b 	.word	0x3723a71b
    9278:	f640 116b 	movw	r1, #2411	; 0x96b
    927c:	e0a3      	b.n	93c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x932>
    927e:	2d15      	cmp	r5, #21
    9280:	d058      	beq.n	9334 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8a0>
    9282:	dc08      	bgt.n	9296 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x802>
    9284:	2d11      	cmp	r5, #17
    9286:	d01f      	beq.n	92c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x834>
    9288:	2d12      	cmp	r5, #18
    928a:	d01c      	beq.n	92c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x832>
    928c:	2d13      	cmp	r5, #19
    928e:	d01a      	beq.n	92c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x832>
    9290:	2d14      	cmp	r5, #20
    9292:	d106      	bne.n	92a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80e>
    9294:	e04e      	b.n	9334 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8a0>
    9296:	2d16      	cmp	r5, #22
    9298:	d023      	beq.n	92e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84e>
    929a:	2d17      	cmp	r5, #23
    929c:	d065      	beq.n	936a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d6>
    929e:	2dff      	cmp	r5, #255	; 0xff
    92a0:	d07e      	beq.n	93a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90c>
    92a2:	f640 11dd 	movw	r1, #2525	; 0x9dd
    92a6:	e08e      	b.n	93c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x932>
    92a8:	68a1      	ldr	r1, [r4, #8]
    92aa:	9800      	ldr	r0, [sp, #0]
    92ac:	f891 10e6 	ldrb.w	r1, [r1, #230]	; 0xe6
    92b0:	e015      	b.n	92de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84a>
    92b2:	9800      	ldr	r0, [sp, #0]
    92b4:	220b      	movs	r2, #11
    92b6:	7102      	strb	r2, [r0, #4]
    92b8:	2259      	movs	r2, #89	; 0x59
    92ba:	7142      	strb	r2, [r0, #5]
    92bc:	7181      	strb	r1, [r0, #6]
    92be:	215b      	movs	r1, #91	; 0x5b
    92c0:	71c1      	strb	r1, [r0, #7]
    92c2:	2112      	movs	r1, #18
    92c4:	7201      	strb	r1, [r0, #8]
    92c6:	e078      	b.n	93ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    92c8:	2103      	movs	r1, #3
    92ca:	9800      	ldr	r0, [sp, #0]
    92cc:	f004 fd37 	bl	dd3e <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    92d0:	2106      	movs	r1, #6
    92d2:	9800      	ldr	r0, [sp, #0]
    92d4:	f004 fd35 	bl	dd42 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    92d8:	e06f      	b.n	93ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    92da:	9800      	ldr	r0, [sp, #0]
    92dc:	2106      	movs	r1, #6
    92de:	7101      	strb	r1, [r0, #4]
    92e0:	e06b      	b.n	93ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    92e2:	9800      	ldr	r0, [sp, #0]
    92e4:	f8d4 1008 	ldr.w	r1, [r4, #8]
    92e8:	f891 21a8 	ldrb.w	r2, [r1, #424]	; 0x1a8
    92ec:	7102      	strb	r2, [r0, #4]
    92ee:	f891 11a9 	ldrb.w	r1, [r1, #425]	; 0x1a9
    92f2:	7141      	strb	r1, [r0, #5]
    92f4:	e061      	b.n	93ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    92f6:	68a1      	ldr	r1, [r4, #8]
    92f8:	9800      	ldr	r0, [sp, #0]
    92fa:	f501 7188 	add.w	r1, r1, #272	; 0x110
    92fe:	f004 fd33 	bl	dd68 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    9302:	68a1      	ldr	r1, [r4, #8]
    9304:	9800      	ldr	r0, [sp, #0]
    9306:	31dc      	adds	r1, #220	; 0xdc
    9308:	f004 fd2b 	bl	dd62 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    930c:	e055      	b.n	93ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    930e:	9101      	str	r1, [sp, #4]
    9310:	9102      	str	r1, [sp, #8]
    9312:	f001 fe09 	bl	af28 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9316:	68a1      	ldr	r1, [r4, #8]
    9318:	4030      	ands	r0, r6
    931a:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
    931e:	4001      	ands	r1, r0
    9320:	f88d 1004 	strb.w	r1, [sp, #4]
    9324:	0a00      	lsrs	r0, r0, #8
    9326:	f88d 0005 	strb.w	r0, [sp, #5]
    932a:	a901      	add	r1, sp, #4
    932c:	9800      	ldr	r0, [sp, #0]
    932e:	f004 fd25 	bl	dd7c <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    9332:	e042      	b.n	93ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    9334:	68a0      	ldr	r0, [r4, #8]
    9336:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
    933a:	9800      	ldr	r0, [sp, #0]
    933c:	f004 fd2b 	bl	dd96 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    9340:	68a0      	ldr	r0, [r4, #8]
    9342:	f8b0 10e8 	ldrh.w	r1, [r0, #232]	; 0xe8
    9346:	9800      	ldr	r0, [sp, #0]
    9348:	f004 fd29 	bl	dd9e <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    934c:	68a0      	ldr	r0, [r4, #8]
    934e:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
    9352:	9800      	ldr	r0, [sp, #0]
    9354:	f004 fd27 	bl	dda6 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    9358:	68a0      	ldr	r0, [r4, #8]
    935a:	e000      	b.n	935e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8ca>
    935c:	e010      	b.n	9380 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8ec>
    935e:	f8b0 10e6 	ldrh.w	r1, [r0, #230]	; 0xe6
    9362:	9800      	ldr	r0, [sp, #0]
    9364:	f004 fd23 	bl	ddae <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    9368:	e027      	b.n	93ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    936a:	68a1      	ldr	r1, [r4, #8]
    936c:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    9370:	2801      	cmp	r0, #1
    9372:	9800      	ldr	r0, [sp, #0]
    9374:	d0b8      	beq.n	92e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x854>
    9376:	f811 2f5e 	ldrb.w	r2, [r1, #94]!
    937a:	7102      	strb	r2, [r0, #4]
    937c:	7849      	ldrb	r1, [r1, #1]
    937e:	e7b8      	b.n	92f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x85e>
    9380:	9101      	str	r1, [sp, #4]
    9382:	9102      	str	r1, [sp, #8]
    9384:	f001 fdd0 	bl	af28 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9388:	68a1      	ldr	r1, [r4, #8]
    938a:	4030      	ands	r0, r6
    938c:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
    9390:	4001      	ands	r1, r0
    9392:	f88d 1004 	strb.w	r1, [sp, #4]
    9396:	0a00      	lsrs	r0, r0, #8
    9398:	f88d 0005 	strb.w	r0, [sp, #5]
    939c:	a901      	add	r1, sp, #4
    939e:	e000      	b.n	93a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90e>
    93a0:	e003      	b.n	93aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x916>
    93a2:	9800      	ldr	r0, [sp, #0]
    93a4:	f004 fce5 	bl	dd72 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    93a8:	e007      	b.n	93ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    93aa:	68a0      	ldr	r0, [r4, #8]
    93ac:	f890 2187 	ldrb.w	r2, [r0, #391]	; 0x187
    93b0:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    93b4:	9800      	ldr	r0, [sp, #0]
    93b6:	f004 fcc6 	bl	dd46 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    93ba:	f7fc f8f3 	bl	55a4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    93be:	2800      	cmp	r0, #0
    93c0:	d104      	bne.n	93cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x938>
    93c2:	f640 11e1 	movw	r1, #2529	; 0x9e1
    93c6:	2031      	movs	r0, #49	; 0x31
    93c8:	f7fb fa8a 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    93cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    93ce:	0000      	.short	0x0000
    93d0:	2000012c 	.word	0x2000012c
    93d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    93d8:	4c87      	ldr	r4, [pc, #540]	; (95f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>)
    93da:	4682      	mov	sl, r0
    93dc:	4689      	mov	r9, r1
    93de:	68a0      	ldr	r0, [r4, #8]
    93e0:	8800      	ldrh	r0, [r0, #0]
    93e2:	f7fb fec7 	bl	5174 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    93e6:	0006      	movs	r6, r0
    93e8:	d00a      	beq.n	9400 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96c>
    93ea:	8860      	ldrh	r0, [r4, #2]
    93ec:	f04f 0500 	mov.w	r5, #0
    93f0:	05c0      	lsls	r0, r0, #23
    93f2:	68a0      	ldr	r0, [r4, #8]
    93f4:	d509      	bpl.n	940a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x976>
    93f6:	f8a0 509c 	strh.w	r5, [r0, #156]	; 0x9c
    93fa:	f880 5104 	strb.w	r5, [r0, #260]	; 0x104
    93fe:	e008      	b.n	9412 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97e>
    9400:	f640 5181 	movw	r1, #3457	; 0xd81
    9404:	2031      	movs	r0, #49	; 0x31
    9406:	f7fb fa6b 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    940a:	f830 1f9c 	ldrh.w	r1, [r0, #156]!
    940e:	1c49      	adds	r1, r1, #1
    9410:	8001      	strh	r1, [r0, #0]
    9412:	f001 f89d 	bl	a550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1abc>
    9416:	f04f 0801 	mov.w	r8, #1
    941a:	b320      	cbz	r0, 9466 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    941c:	8860      	ldrh	r0, [r4, #2]
    941e:	0500      	lsls	r0, r0, #20
    9420:	d506      	bpl.n	9430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x99c>
    9422:	68a0      	ldr	r0, [r4, #8]
    9424:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
    9428:	b111      	cbz	r1, 9430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x99c>
    942a:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    942e:	e01a      	b.n	9466 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    9430:	68a0      	ldr	r0, [r4, #8]
    9432:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
    9436:	1c49      	adds	r1, r1, #1
    9438:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    943c:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    9440:	428b      	cmp	r3, r1
    9442:	d301      	bcc.n	9448 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9b4>
    9444:	1a5a      	subs	r2, r3, r1
    9446:	e000      	b.n	944a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9b6>
    9448:	2200      	movs	r2, #0
    944a:	88a7      	ldrh	r7, [r4, #4]
    944c:	1d7f      	adds	r7, r7, #5
    944e:	42ba      	cmp	r2, r7
    9450:	d801      	bhi.n	9456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9c2>
    9452:	f880 809a 	strb.w	r8, [r0, #154]	; 0x9a
    9456:	4299      	cmp	r1, r3
    9458:	d305      	bcc.n	9466 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    945a:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    945e:	f880 81f2 	strb.w	r8, [r0, #498]	; 0x1f2
    9462:	f001 f999 	bl	a798 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9466:	8860      	ldrh	r0, [r4, #2]
    9468:	f04f 0702 	mov.w	r7, #2
    946c:	f410 7f40 	tst.w	r0, #768	; 0x300
    9470:	d00e      	beq.n	9490 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9fc>
    9472:	68a0      	ldr	r0, [r4, #8]
    9474:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    9478:	b111      	cbz	r1, 9480 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ec>
    947a:	2903      	cmp	r1, #3
    947c:	d108      	bne.n	9490 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9fc>
    947e:	e002      	b.n	9486 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f2>
    9480:	f880 8079 	strb.w	r8, [r0, #121]	; 0x79
    9484:	e001      	b.n	948a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f6>
    9486:	f880 7079 	strb.w	r7, [r0, #121]	; 0x79
    948a:	2101      	movs	r1, #1
    948c:	f7fe fc72 	bl	7d74 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9490:	68a0      	ldr	r0, [r4, #8]
    9492:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    9496:	2901      	cmp	r1, #1
    9498:	d104      	bne.n	94a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa10>
    949a:	8861      	ldrh	r1, [r4, #2]
    949c:	0549      	lsls	r1, r1, #21
    949e:	d501      	bpl.n	94a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa10>
    94a0:	f880 7079 	strb.w	r7, [r0, #121]	; 0x79
    94a4:	f1ba 0f00 	cmp.w	sl, #0
    94a8:	d175      	bne.n	9596 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb02>
    94aa:	78a1      	ldrb	r1, [r4, #2]
    94ac:	0649      	lsls	r1, r1, #25
    94ae:	d502      	bpl.n	94b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa22>
    94b0:	f8a0 5118 	strh.w	r5, [r0, #280]	; 0x118
    94b4:	e004      	b.n	94c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2c>
    94b6:	f8b0 1118 	ldrh.w	r1, [r0, #280]	; 0x118
    94ba:	1c49      	adds	r1, r1, #1
    94bc:	f8a0 1118 	strh.w	r1, [r0, #280]	; 0x118
    94c0:	4648      	mov	r0, r9
    94c2:	f7ff fdbd 	bl	9040 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ac>
    94c6:	ea40 0009 	orr.w	r0, r0, r9
    94ca:	4681      	mov	r9, r0
    94cc:	f7ff fd2a 	bl	8f24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x490>
    94d0:	68a7      	ldr	r7, [r4, #8]
    94d2:	f8b7 00f8 	ldrh.w	r0, [r7, #248]	; 0xf8
    94d6:	1c40      	adds	r0, r0, #1
    94d8:	f8a7 00f8 	strh.w	r0, [r7, #248]	; 0xf8
    94dc:	f897 00fc 	ldrb.w	r0, [r7, #252]	; 0xfc
    94e0:	b128      	cbz	r0, 94ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    94e2:	f7fc fa79 	bl	59d8 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    94e6:	b1a8      	cbz	r0, 9514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa80>
    94e8:	f8a7 50f8 	strh.w	r5, [r7, #248]	; 0xf8
    94ec:	e012      	b.n	9514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa80>
    94ee:	f7fc f901 	bl	56f4 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    94f2:	b108      	cbz	r0, 94f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa64>
    94f4:	f8a7 50f8 	strh.w	r5, [r7, #248]	; 0xf8
    94f8:	f7fc f8f6 	bl	56e8 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    94fc:	b150      	cbz	r0, 9514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa80>
    94fe:	f897 0104 	ldrb.w	r0, [r7, #260]	; 0x104
    9502:	1c40      	adds	r0, r0, #1
    9504:	b2c0      	uxtb	r0, r0
    9506:	f887 0104 	strb.w	r0, [r7, #260]	; 0x104
    950a:	2802      	cmp	r0, #2
    950c:	d902      	bls.n	9514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa80>
    950e:	f827 5ff8 	strh.w	r5, [r7, #248]!
    9512:	733d      	strb	r5, [r7, #12]
    9514:	68a0      	ldr	r0, [r4, #8]
    9516:	2301      	movs	r3, #1
    9518:	2100      	movs	r1, #0
    951a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    951e:	3068      	adds	r0, #104	; 0x68
    9520:	f004 f94e 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9524:	b920      	cbnz	r0, 9530 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa9c>
    9526:	68a0      	ldr	r0, [r4, #8]
    9528:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    952c:	280c      	cmp	r0, #12
    952e:	d15f      	bne.n	95f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5c>
    9530:	68a0      	ldr	r0, [r4, #8]
    9532:	2301      	movs	r3, #1
    9534:	2100      	movs	r1, #0
    9536:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    953a:	3068      	adds	r0, #104	; 0x68
    953c:	f004 f940 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9540:	b350      	cbz	r0, 9598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb04>
    9542:	68a0      	ldr	r0, [r4, #8]
    9544:	2301      	movs	r3, #1
    9546:	2100      	movs	r1, #0
    9548:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    954c:	3068      	adds	r0, #104	; 0x68
    954e:	f004 f937 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9552:	b308      	cbz	r0, 9598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb04>
    9554:	68a0      	ldr	r0, [r4, #8]
    9556:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    955a:	2902      	cmp	r1, #2
    955c:	d148      	bne.n	95f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5c>
    955e:	f890 0104 	ldrb.w	r0, [r0, #260]	; 0x104
    9562:	b9c8      	cbnz	r0, 9598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb04>
    9564:	4630      	mov	r0, r6
    9566:	f003 fd0e 	bl	cf86 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    956a:	b1a8      	cbz	r0, 9598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb04>
    956c:	68a0      	ldr	r0, [r4, #8]
    956e:	3068      	adds	r0, #104	; 0x68
    9570:	f005 fbeb 	bl	ed4a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9574:	b980      	cbnz	r0, 9598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb04>
    9576:	68a1      	ldr	r1, [r4, #8]
    9578:	f8b1 00f2 	ldrh.w	r0, [r1, #242]	; 0xf2
    957c:	2801      	cmp	r0, #1
    957e:	d937      	bls.n	95f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5c>
    9580:	f881 80fa 	strb.w	r8, [r1, #250]	; 0xfa
    9584:	f8b1 209e 	ldrh.w	r2, [r1, #158]	; 0x9e
    9588:	f8b1 009c 	ldrh.w	r0, [r1, #156]	; 0x9c
    958c:	1e93      	subs	r3, r2, #2
    958e:	4298      	cmp	r0, r3
    9590:	db03      	blt.n	959a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb06>
    9592:	2001      	movs	r0, #1
    9594:	e004      	b.n	95a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0c>
    9596:	e01d      	b.n	95d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb40>
    9598:	e02a      	b.n	95f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5c>
    959a:	1a10      	subs	r0, r2, r0
    959c:	1e40      	subs	r0, r0, #1
    959e:	b280      	uxth	r0, r0
    95a0:	f8b1 20f8 	ldrh.w	r2, [r1, #248]	; 0xf8
    95a4:	88a3      	ldrh	r3, [r4, #4]
    95a6:	429a      	cmp	r2, r3
    95a8:	d301      	bcc.n	95ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb1a>
    95aa:	2201      	movs	r2, #1
    95ac:	e002      	b.n	95b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb20>
    95ae:	1a9a      	subs	r2, r3, r2
    95b0:	1c52      	adds	r2, r2, #1
    95b2:	b292      	uxth	r2, r2
    95b4:	4290      	cmp	r0, r2
    95b6:	d900      	bls.n	95ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb26>
    95b8:	4610      	mov	r0, r2
    95ba:	2801      	cmp	r0, #1
    95bc:	d102      	bne.n	95c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb30>
    95be:	bf00      	nop
    95c0:	f881 50fa 	strb.w	r5, [r1, #250]	; 0xfa
    95c4:	68a1      	ldr	r1, [r4, #8]
    95c6:	f8b1 206c 	ldrh.w	r2, [r1, #108]	; 0x6c
    95ca:	4410      	add	r0, r2
    95cc:	f8a1 00f4 	strh.w	r0, [r1, #244]	; 0xf4
    95d0:	f001 f87e 	bl	a6d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c3c>
    95d4:	78a0      	ldrb	r0, [r4, #2]
    95d6:	464a      	mov	r2, r9
    95d8:	f3c0 1180 	ubfx	r1, r0, #6, #1
    95dc:	4650      	mov	r0, sl
    95de:	f000 ffcb 	bl	a578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae4>
    95e2:	68a0      	ldr	r0, [r4, #8]
    95e4:	f880 50fb 	strb.w	r5, [r0, #251]	; 0xfb
    95e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    95ec:	f7fb bfc4 	b.w	5578 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    95f0:	2001      	movs	r0, #1
    95f2:	68a1      	ldr	r1, [r4, #8]
    95f4:	e7e4      	b.n	95c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2c>
    95f6:	0000      	.short	0x0000
    95f8:	2000012c 	.word	0x2000012c
    95fc:	b570      	push	{r4, r5, r6, lr}
    95fe:	4c4e      	ldr	r4, [pc, #312]	; (9738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca4>)
    9600:	2301      	movs	r3, #1
    9602:	2100      	movs	r1, #0
    9604:	68a0      	ldr	r0, [r4, #8]
    9606:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    960a:	3068      	adds	r0, #104	; 0x68
    960c:	f004 f8d8 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9610:	2800      	cmp	r0, #0
    9612:	d076      	beq.n	9702 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6e>
    9614:	68a0      	ldr	r0, [r4, #8]
    9616:	f890 11ad 	ldrb.w	r1, [r0, #429]	; 0x1ad
    961a:	2500      	movs	r5, #0
    961c:	b139      	cbz	r1, 962e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb9a>
    961e:	2100      	movs	r1, #0
    9620:	200e      	movs	r0, #14
    9622:	f000 f88b 	bl	973c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    9626:	68a0      	ldr	r0, [r4, #8]
    9628:	f880 51ad 	strb.w	r5, [r0, #429]	; 0x1ad
    962c:	e082      	b.n	9734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca0>
    962e:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
    9632:	b119      	cbz	r1, 963c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba8>
    9634:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    9638:	0789      	lsls	r1, r1, #30
    963a:	d00a      	beq.n	9652 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbe>
    963c:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    9640:	b111      	cbz	r1, 9648 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb4>
    9642:	f890 119d 	ldrb.w	r1, [r0, #413]	; 0x19d
    9646:	b189      	cbz	r1, 966c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbd8>
    9648:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    964c:	2901      	cmp	r1, #1
    964e:	d02f      	beq.n	96b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc1c>
    9650:	e06a      	b.n	9728 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc94>
    9652:	2100      	movs	r1, #0
    9654:	200c      	movs	r0, #12
    9656:	f000 f871 	bl	973c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    965a:	68a0      	ldr	r0, [r4, #8]
    965c:	f810 1fae 	ldrb.w	r1, [r0, #174]!
    9660:	f041 0101 	orr.w	r1, r1, #1
    9664:	7001      	strb	r1, [r0, #0]
    9666:	f880 50fe 	strb.w	r5, [r0, #254]	; 0xfe
    966a:	e063      	b.n	9734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca0>
    966c:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9670:	2924      	cmp	r1, #36	; 0x24
    9672:	d01b      	beq.n	96ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc18>
    9674:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    9678:	2924      	cmp	r1, #36	; 0x24
    967a:	d017      	beq.n	96ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc18>
    967c:	f05f 0300 	movs.w	r3, #0
    9680:	f500 72c7 	add.w	r2, r0, #398	; 0x18e
    9684:	f500 71ce 	add.w	r1, r0, #412	; 0x19c
    9688:	f004 fcd0 	bl	e02c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    968c:	68a0      	ldr	r0, [r4, #8]
    968e:	f880 519c 	strb.w	r5, [r0, #412]	; 0x19c
    9692:	2100      	movs	r1, #0
    9694:	2014      	movs	r0, #20
    9696:	f000 f851 	bl	973c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    969a:	68a1      	ldr	r1, [r4, #8]
    969c:	f101 0024 	add.w	r0, r1, #36	; 0x24
    96a0:	8bc2      	ldrh	r2, [r0, #30]
    96a2:	f821 2fe6 	strh.w	r2, [r1, #230]!
    96a6:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    96a8:	8048      	strh	r0, [r1, #2]
    96aa:	e043      	b.n	9734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca0>
    96ac:	2301      	movs	r3, #1
    96ae:	e7e7      	b.n	9680 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbec>
    96b0:	f890 11a7 	ldrb.w	r1, [r0, #423]	; 0x1a7
    96b4:	bb21      	cbnz	r1, 9700 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6c>
    96b6:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    96ba:	2301      	movs	r3, #1
    96bc:	210b      	movs	r1, #11
    96be:	3068      	adds	r0, #104	; 0x68
    96c0:	f004 f87e 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    96c4:	b9e0      	cbnz	r0, 9700 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6c>
    96c6:	68a0      	ldr	r0, [r4, #8]
    96c8:	f890 0062 	ldrb.w	r0, [r0, #98]	; 0x62
    96cc:	f005 fb45 	bl	ed5a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    96d0:	4605      	mov	r5, r0
    96d2:	68a0      	ldr	r0, [r4, #8]
    96d4:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    96d8:	f005 fb3f 	bl	ed5a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    96dc:	4606      	mov	r6, r0
    96de:	68a0      	ldr	r0, [r4, #8]
    96e0:	f890 11a8 	ldrb.w	r1, [r0, #424]	; 0x1a8
    96e4:	4628      	mov	r0, r5
    96e6:	f005 fb43 	bl	ed70 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    96ea:	b158      	cbz	r0, 9704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc70>
    96ec:	68a0      	ldr	r0, [r4, #8]
    96ee:	f890 11a9 	ldrb.w	r1, [r0, #425]	; 0x1a9
    96f2:	4630      	mov	r0, r6
    96f4:	f005 fb3c 	bl	ed70 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    96f8:	b120      	cbz	r0, 9704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc70>
    96fa:	2000      	movs	r0, #0
    96fc:	f000 f900 	bl	9900 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    9700:	e012      	b.n	9728 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc94>
    9702:	e012      	b.n	972a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc96>
    9704:	68a0      	ldr	r0, [r4, #8]
    9706:	2301      	movs	r3, #1
    9708:	2103      	movs	r1, #3
    970a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    970e:	3068      	adds	r0, #104	; 0x68
    9710:	f004 f856 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9714:	b940      	cbnz	r0, 9728 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc94>
    9716:	68a0      	ldr	r0, [r4, #8]
    9718:	2301      	movs	r3, #1
    971a:	2102      	movs	r1, #2
    971c:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9720:	3068      	adds	r0, #104	; 0x68
    9722:	f004 f84d 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9726:	b108      	cbz	r0, 972c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc98>
    9728:	2000      	movs	r0, #0
    972a:	bd70      	pop	{r4, r5, r6, pc}
    972c:	2100      	movs	r1, #0
    972e:	2016      	movs	r0, #22
    9730:	f000 f804 	bl	973c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    9734:	2001      	movs	r0, #1
    9736:	bd70      	pop	{r4, r5, r6, pc}
    9738:	2000012c 	.word	0x2000012c
    973c:	b570      	push	{r4, r5, r6, lr}
    973e:	4c0d      	ldr	r4, [pc, #52]	; (9774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>)
    9740:	4606      	mov	r6, r0
    9742:	460d      	mov	r5, r1
    9744:	68a0      	ldr	r0, [r4, #8]
    9746:	3068      	adds	r0, #104	; 0x68
    9748:	f005 faff 	bl	ed4a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    974c:	b120      	cbz	r0, 9758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc4>
    974e:	f640 11f4 	movw	r1, #2548	; 0x9f4
    9752:	2031      	movs	r0, #49	; 0x31
    9754:	f7fb f8c4 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9758:	68a2      	ldr	r2, [r4, #8]
    975a:	2000      	movs	r0, #0
    975c:	f882 60e4 	strb.w	r6, [r2, #228]	; 0xe4
    9760:	b115      	cbz	r5, 9768 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd4>
    9762:	f8a2 00a8 	strh.w	r0, [r2, #168]	; 0xa8
    9766:	bd70      	pop	{r4, r5, r6, pc}
    9768:	f822 0fa2 	strh.w	r0, [r2, #162]!
    976c:	2001      	movs	r0, #1
    976e:	7110      	strb	r0, [r2, #4]
    9770:	bd70      	pop	{r4, r5, r6, pc}
    9772:	0000      	.short	0x0000
    9774:	2000012c 	.word	0x2000012c
    9778:	b570      	push	{r4, r5, r6, lr}
    977a:	4c18      	ldr	r4, [pc, #96]	; (97dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd48>)
    977c:	2500      	movs	r5, #0
    977e:	68a0      	ldr	r0, [r4, #8]
    9780:	f890 1173 	ldrb.w	r1, [r0, #371]	; 0x173
    9784:	2901      	cmp	r1, #1
    9786:	d00a      	beq.n	979e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0a>
    9788:	2902      	cmp	r1, #2
    978a:	d125      	bne.n	97d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    978c:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
    9790:	b1a9      	cbz	r1, 97be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2a>
    9792:	2106      	movs	r1, #6
    9794:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    9798:	2101      	movs	r1, #1
    979a:	2002      	movs	r0, #2
    979c:	e017      	b.n	97ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3a>
    979e:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
    97a2:	2900      	cmp	r1, #0
    97a4:	d118      	bne.n	97d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    97a6:	f100 03c8 	add.w	r3, r0, #200	; 0xc8
    97aa:	f500 7184 	add.w	r1, r0, #264	; 0x108
    97ae:	2200      	movs	r2, #0
    97b0:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    97b4:	f003 ffbc 	bl	d730 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    97b8:	2101      	movs	r1, #1
    97ba:	2005      	movs	r0, #5
    97bc:	e007      	b.n	97ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3a>
    97be:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    97c2:	0740      	lsls	r0, r0, #29
    97c4:	d501      	bpl.n	97ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd36>
    97c6:	2011      	movs	r0, #17
    97c8:	e000      	b.n	97cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    97ca:	200d      	movs	r0, #13
    97cc:	2101      	movs	r1, #1
    97ce:	f7ff ffb5 	bl	973c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    97d2:	68a0      	ldr	r0, [r4, #8]
    97d4:	f880 5173 	strb.w	r5, [r0, #371]	; 0x173
    97d8:	bd70      	pop	{r4, r5, r6, pc}
    97da:	0000      	.short	0x0000
    97dc:	2000012c 	.word	0x2000012c
    97e0:	b570      	push	{r4, r5, r6, lr}
    97e2:	4a2b      	ldr	r2, [pc, #172]	; (9890 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfc>)
    97e4:	4603      	mov	r3, r0
    97e6:	8850      	ldrh	r0, [r2, #2]
    97e8:	4318      	orrs	r0, r3
    97ea:	8050      	strh	r0, [r2, #2]
    97ec:	4610      	mov	r0, r2
    97ee:	2b40      	cmp	r3, #64	; 0x40
    97f0:	6880      	ldr	r0, [r0, #8]
    97f2:	d00d      	beq.n	9810 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd7c>
    97f4:	079e      	lsls	r6, r3, #30
    97f6:	f04f 0500 	mov.w	r5, #0
    97fa:	f04f 0401 	mov.w	r4, #1
    97fe:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    9802:	d50c      	bpl.n	981e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd8a>
    9804:	b14e      	cbz	r6, 981a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd86>
    9806:	f640 41ee 	movw	r1, #3310	; 0xcee
    980a:	2031      	movs	r0, #49	; 0x31
    980c:	f7fb f868 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9814:	2104      	movs	r1, #4
    9816:	f7fe baad 	b.w	7d74 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    981a:	60d1      	str	r1, [r2, #12]
    981c:	e01c      	b.n	9858 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc4>
    981e:	b1c6      	cbz	r6, 9852 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    9820:	6111      	str	r1, [r2, #16]
    9822:	78c9      	ldrb	r1, [r1, #3]
    9824:	2906      	cmp	r1, #6
    9826:	d002      	beq.n	982e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd9a>
    9828:	290b      	cmp	r1, #11
    982a:	d112      	bne.n	9852 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    982c:	e009      	b.n	9842 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
    982e:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9832:	2917      	cmp	r1, #23
    9834:	d10d      	bne.n	9852 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    9836:	2100      	movs	r1, #0
    9838:	e9c0 112e 	strd	r1, r1, [r0, #184]	; 0xb8
    983c:	f880 407a 	strb.w	r4, [r0, #122]	; 0x7a
    9840:	e007      	b.n	9852 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    9842:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9846:	2911      	cmp	r1, #17
    9848:	d103      	bne.n	9852 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    984a:	f880 507a 	strb.w	r5, [r0, #122]	; 0x7a
    984e:	f880 40ac 	strb.w	r4, [r0, #172]	; 0xac
    9852:	0799      	lsls	r1, r3, #30
    9854:	d516      	bpl.n	9884 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    9856:	68d1      	ldr	r1, [r2, #12]
    9858:	78c9      	ldrb	r1, [r1, #3]
    985a:	2905      	cmp	r1, #5
    985c:	d002      	beq.n	9864 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    985e:	290b      	cmp	r1, #11
    9860:	d110      	bne.n	9884 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    9862:	e009      	b.n	9878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xde4>
    9864:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9868:	2915      	cmp	r1, #21
    986a:	d10b      	bne.n	9884 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    986c:	2100      	movs	r1, #0
    986e:	e9e0 1130 	strd	r1, r1, [r0, #192]!	; 0xc0
    9872:	f800 4c45 	strb.w	r4, [r0, #-69]
    9876:	e005      	b.n	9884 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    9878:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    987c:	2910      	cmp	r1, #16
    987e:	d101      	bne.n	9884 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    9880:	f880 507b 	strb.w	r5, [r0, #123]	; 0x7b
    9884:	0698      	lsls	r0, r3, #26
    9886:	d501      	bpl.n	988c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf8>
    9888:	2008      	movs	r0, #8
    988a:	7050      	strb	r0, [r2, #1]
    988c:	bd70      	pop	{r4, r5, r6, pc}
    988e:	0000      	.short	0x0000
    9890:	2000012c 	.word	0x2000012c
    9894:	b570      	push	{r4, r5, r6, lr}
    9896:	4c19      	ldr	r4, [pc, #100]	; (98fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe68>)
    9898:	68a0      	ldr	r0, [r4, #8]
    989a:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    989e:	b109      	cbz	r1, 98a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe10>
    98a0:	2601      	movs	r6, #1
    98a2:	e000      	b.n	98a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe12>
    98a4:	2600      	movs	r6, #0
    98a6:	f890 218f 	ldrb.w	r2, [r0, #399]	; 0x18f
    98aa:	b10a      	cbz	r2, 98b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1c>
    98ac:	2501      	movs	r5, #1
    98ae:	e000      	b.n	98b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1e>
    98b0:	2500      	movs	r5, #0
    98b2:	b90e      	cbnz	r6, 98b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe24>
    98b4:	f890 1062 	ldrb.w	r1, [r0, #98]	; 0x62
    98b8:	b90d      	cbnz	r5, 98be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe2a>
    98ba:	f890 2063 	ldrb.w	r2, [r0, #99]	; 0x63
    98be:	f100 035a 	add.w	r3, r0, #90	; 0x5a
    98c2:	7219      	strb	r1, [r3, #8]
    98c4:	725a      	strb	r2, [r3, #9]
    98c6:	2101      	movs	r1, #1
    98c8:	7299      	strb	r1, [r3, #10]
    98ca:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    98ce:	2801      	cmp	r0, #1
    98d0:	d001      	beq.n	98d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe42>
    98d2:	b906      	cbnz	r6, 98d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe42>
    98d4:	b115      	cbz	r5, 98dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe48>
    98d6:	2000      	movs	r0, #0
    98d8:	f000 f812 	bl	9900 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    98dc:	68a0      	ldr	r0, [r4, #8]
    98de:	f004 fbc0 	bl	e062 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    98e2:	2800      	cmp	r0, #0
    98e4:	d008      	beq.n	98f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe64>
    98e6:	68a1      	ldr	r1, [r4, #8]
    98e8:	f501 72e9 	add.w	r2, r1, #466	; 0x1d2
    98ec:	8808      	ldrh	r0, [r1, #0]
    98ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    98f2:	3124      	adds	r1, #36	; 0x24
    98f4:	f004 bb76 	b.w	dfe4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    98f8:	bd70      	pop	{r4, r5, r6, pc}
    98fa:	0000      	.short	0x0000
    98fc:	2000012c 	.word	0x2000012c
    9900:	b510      	push	{r4, lr}
    9902:	4c10      	ldr	r4, [pc, #64]	; (9944 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb0>)
    9904:	68a1      	ldr	r1, [r4, #8]
    9906:	880a      	ldrh	r2, [r1, #0]
    9908:	f8a1 21fe 	strh.w	r2, [r1, #510]	; 0x1fe
    990c:	f881 01fc 	strb.w	r0, [r1, #508]	; 0x1fc
    9910:	f891 0062 	ldrb.w	r0, [r1, #98]	; 0x62
    9914:	f005 fa21 	bl	ed5a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9918:	68a1      	ldr	r1, [r4, #8]
    991a:	f881 0200 	strb.w	r0, [r1, #512]	; 0x200
    991e:	f891 0063 	ldrb.w	r0, [r1, #99]	; 0x63
    9922:	f005 fa1a 	bl	ed5a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9926:	68a2      	ldr	r2, [r4, #8]
    9928:	f502 71fd 	add.w	r1, r2, #506	; 0x1fa
    992c:	f882 0201 	strb.w	r0, [r2, #513]	; 0x201
    9930:	2001      	movs	r0, #1
    9932:	7008      	strb	r0, [r1, #0]
    9934:	2000      	movs	r0, #0
    9936:	f882 01a6 	strb.w	r0, [r2, #422]	; 0x1a6
    993a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    993e:	f000 bf2b 	b.w	a798 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9942:	0000      	.short	0x0000
    9944:	2000012c 	.word	0x2000012c
    9948:	b510      	push	{r4, lr}
    994a:	4c15      	ldr	r4, [pc, #84]	; (99a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0c>)
    994c:	2301      	movs	r3, #1
    994e:	2100      	movs	r1, #0
    9950:	68a0      	ldr	r0, [r4, #8]
    9952:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9956:	3068      	adds	r0, #104	; 0x68
    9958:	f003 ff32 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    995c:	b190      	cbz	r0, 9984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xef0>
    995e:	6920      	ldr	r0, [r4, #16]
    9960:	f004 f98a 	bl	dc78 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    9964:	68a1      	ldr	r1, [r4, #8]
    9966:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    996a:	f8b1 106c 	ldrh.w	r1, [r1, #108]	; 0x6c
    996e:	f005 fa0d 	bl	ed8c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9972:	b148      	cbz	r0, 9988 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xef4>
    9974:	68a0      	ldr	r0, [r4, #8]
    9976:	2128      	movs	r1, #40	; 0x28
    9978:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    997c:	306e      	adds	r0, #110	; 0x6e
    997e:	2101      	movs	r1, #1
    9980:	7781      	strb	r1, [r0, #30]
    9982:	e00b      	b.n	999c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf08>
    9984:	2001      	movs	r0, #1
    9986:	bd10      	pop	{r4, pc}
    9988:	68a1      	ldr	r1, [r4, #8]
    998a:	6920      	ldr	r0, [r4, #16]
    998c:	f501 71c7 	add.w	r1, r1, #398	; 0x18e
    9990:	f004 f96d 	bl	dc6e <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    9994:	68a1      	ldr	r1, [r4, #8]
    9996:	200b      	movs	r0, #11
    9998:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    999c:	2000      	movs	r0, #0
    999e:	bd10      	pop	{r4, pc}
    99a0:	2000012c 	.word	0x2000012c
    99a4:	b570      	push	{r4, r5, r6, lr}
    99a6:	4c29      	ldr	r4, [pc, #164]	; (9a4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb8>)
    99a8:	2301      	movs	r3, #1
    99aa:	2100      	movs	r1, #0
    99ac:	68a0      	ldr	r0, [r4, #8]
    99ae:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    99b2:	3068      	adds	r0, #104	; 0x68
    99b4:	f003 ff04 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    99b8:	b1b8      	cbz	r0, 99ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf56>
    99ba:	2100      	movs	r1, #0
    99bc:	6920      	ldr	r0, [r4, #16]
    99be:	f004 f92e 	bl	dc1e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    99c2:	b1a0      	cbz	r0, 99ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf5a>
    99c4:	6920      	ldr	r0, [r4, #16]
    99c6:	68a1      	ldr	r1, [r4, #8]
    99c8:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    99cc:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    99d0:	f8b1 106c 	ldrh.w	r1, [r1, #108]	; 0x6c
    99d4:	f005 f9da 	bl	ed8c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    99d8:	b168      	cbz	r0, 99f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf62>
    99da:	68a0      	ldr	r0, [r4, #8]
    99dc:	2128      	movs	r1, #40	; 0x28
    99de:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    99e2:	306e      	adds	r0, #110	; 0x6e
    99e4:	2101      	movs	r1, #1
    99e6:	7781      	strb	r1, [r0, #30]
    99e8:	e02e      	b.n	9a48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb4>
    99ea:	2001      	movs	r0, #1
    99ec:	bd70      	pop	{r4, r5, r6, pc}
    99ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    99f2:	f000 b8ad 	b.w	9b50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10bc>
    99f6:	6920      	ldr	r0, [r4, #16]
    99f8:	f004 f941 	bl	dc7e <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    99fc:	f003 fec3 	bl	d786 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    9a00:	4605      	mov	r5, r0
    9a02:	68a0      	ldr	r0, [r4, #8]
    9a04:	4629      	mov	r1, r5
    9a06:	f8c0 5194 	str.w	r5, [r0, #404]	; 0x194
    9a0a:	6920      	ldr	r0, [r4, #16]
    9a0c:	7900      	ldrb	r0, [r0, #4]
    9a0e:	f004 f844 	bl	da9a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    9a12:	68a1      	ldr	r1, [r4, #8]
    9a14:	f8a1 018e 	strh.w	r0, [r1, #398]	; 0x18e
    9a18:	6920      	ldr	r0, [r4, #16]
    9a1a:	4629      	mov	r1, r5
    9a1c:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    9a20:	f004 f837 	bl	da92 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    9a24:	68a1      	ldr	r1, [r4, #8]
    9a26:	f8c1 0190 	str.w	r0, [r1, #400]	; 0x190
    9a2a:	6920      	ldr	r0, [r4, #16]
    9a2c:	f004 f92a 	bl	dc84 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    9a30:	68a1      	ldr	r1, [r4, #8]
    9a32:	f8a1 0198 	strh.w	r0, [r1, #408]	; 0x198
    9a36:	6920      	ldr	r0, [r4, #16]
    9a38:	f004 f927 	bl	dc8a <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    9a3c:	68a1      	ldr	r1, [r4, #8]
    9a3e:	f8a1 019a 	strh.w	r0, [r1, #410]	; 0x19a
    9a42:	200d      	movs	r0, #13
    9a44:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    9a48:	2000      	movs	r0, #0
    9a4a:	bd70      	pop	{r4, r5, r6, pc}
    9a4c:	2000012c 	.word	0x2000012c
    9a50:	b538      	push	{r3, r4, r5, lr}
    9a52:	4c29      	ldr	r4, [pc, #164]	; (9af8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1064>)
    9a54:	2301      	movs	r3, #1
    9a56:	2100      	movs	r1, #0
    9a58:	68a0      	ldr	r0, [r4, #8]
    9a5a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9a5e:	3068      	adds	r0, #104	; 0x68
    9a60:	f003 feae 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a64:	b970      	cbnz	r0, 9a84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    9a66:	68a0      	ldr	r0, [r4, #8]
    9a68:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9a6c:	2a12      	cmp	r2, #18
    9a6e:	d009      	beq.n	9a84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    9a70:	2301      	movs	r3, #1
    9a72:	2105      	movs	r1, #5
    9a74:	3068      	adds	r0, #104	; 0x68
    9a76:	f003 fea3 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a7a:	b108      	cbz	r0, 9a80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfec>
    9a7c:	2008      	movs	r0, #8
    9a7e:	bd38      	pop	{r3, r4, r5, pc}
    9a80:	2001      	movs	r0, #1
    9a82:	bd38      	pop	{r3, r4, r5, pc}
    9a84:	68a0      	ldr	r0, [r4, #8]
    9a86:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    9a8a:	b908      	cbnz	r0, 9a90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xffc>
    9a8c:	f7ff f916 	bl	8cbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    9a90:	68a1      	ldr	r1, [r4, #8]
    9a92:	6920      	ldr	r0, [r4, #16]
    9a94:	f501 7184 	add.w	r1, r1, #264	; 0x108
    9a98:	f004 f906 	bl	dca8 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    9a9c:	68a1      	ldr	r1, [r4, #8]
    9a9e:	6920      	ldr	r0, [r4, #16]
    9aa0:	31d8      	adds	r1, #216	; 0xd8
    9aa2:	f004 f8f8 	bl	dc96 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    9aa6:	68a1      	ldr	r1, [r4, #8]
    9aa8:	f891 01c4 	ldrb.w	r0, [r1, #452]	; 0x1c4
    9aac:	f88d 0000 	strb.w	r0, [sp]
    9ab0:	9800      	ldr	r0, [sp, #0]
    9ab2:	9000      	str	r0, [sp, #0]
    9ab4:	f89d 0000 	ldrb.w	r0, [sp]
    9ab8:	b120      	cbz	r0, 9ac4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1030>
    9aba:	f240 219d 	movw	r1, #669	; 0x29d
    9abe:	2031      	movs	r0, #49	; 0x31
    9ac0:	f7fa ff0e 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ac4:	8808      	ldrh	r0, [r1, #0]
    9ac6:	f8a1 01c6 	strh.w	r0, [r1, #454]	; 0x1c6
    9aca:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
    9ace:	6920      	ldr	r0, [r4, #16]
    9ad0:	f004 f8e5 	bl	dc9e <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    9ad4:	68a1      	ldr	r1, [r4, #8]
    9ad6:	6920      	ldr	r0, [r4, #16]
    9ad8:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
    9adc:	f004 f8d8 	bl	dc90 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    9ae0:	68a0      	ldr	r0, [r4, #8]
    9ae2:	4601      	mov	r1, r0
    9ae4:	2201      	movs	r2, #1
    9ae6:	f880 21c4 	strb.w	r2, [r0, #452]	; 0x1c4
    9aea:	2014      	movs	r0, #20
    9aec:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    9af0:	f000 fe52 	bl	a798 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9af4:	2000      	movs	r0, #0
    9af6:	bd38      	pop	{r3, r4, r5, pc}
    9af8:	2000012c 	.word	0x2000012c
    9afc:	b51c      	push	{r2, r3, r4, lr}
    9afe:	4c13      	ldr	r4, [pc, #76]	; (9b4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b8>)
    9b00:	68a0      	ldr	r0, [r4, #8]
    9b02:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    9b06:	07c0      	lsls	r0, r0, #31
    9b08:	d001      	beq.n	9b0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x107a>
    9b0a:	2001      	movs	r0, #1
    9b0c:	bd1c      	pop	{r2, r3, r4, pc}
    9b0e:	4669      	mov	r1, sp
    9b10:	6920      	ldr	r0, [r4, #16]
    9b12:	f004 f8cf 	bl	dcb4 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    9b16:	f001 fa07 	bl	af28 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9b1a:	f644 112f 	movw	r1, #18735	; 0x492f
    9b1e:	4008      	ands	r0, r1
    9b20:	f89d 2000 	ldrb.w	r2, [sp]
    9b24:	68a1      	ldr	r1, [r4, #8]
    9b26:	4002      	ands	r2, r0
    9b28:	f801 2fb4 	strb.w	r2, [r1, #180]!
    9b2c:	f89d 2001 	ldrb.w	r2, [sp, #1]
    9b30:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    9b34:	7048      	strb	r0, [r1, #1]
    9b36:	f7ff f8c1 	bl	8cbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    9b3a:	68a0      	ldr	r0, [r4, #8]
    9b3c:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    9b40:	f041 0101 	orr.w	r1, r1, #1
    9b44:	7001      	strb	r1, [r0, #0]
    9b46:	2000      	movs	r0, #0
    9b48:	bd1c      	pop	{r2, r3, r4, pc}
    9b4a:	0000      	.short	0x0000
    9b4c:	2000012c 	.word	0x2000012c
    9b50:	4a0a      	ldr	r2, [pc, #40]	; (9b7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e8>)
    9b52:	b510      	push	{r4, lr}
    9b54:	6890      	ldr	r0, [r2, #8]
    9b56:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    9b5a:	070b      	lsls	r3, r1, #28
    9b5c:	d501      	bpl.n	9b62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ce>
    9b5e:	2001      	movs	r0, #1
    9b60:	bd10      	pop	{r4, pc}
    9b62:	f041 0108 	orr.w	r1, r1, #8
    9b66:	f880 1077 	strb.w	r1, [r0, #119]	; 0x77
    9b6a:	6911      	ldr	r1, [r2, #16]
    9b6c:	78c9      	ldrb	r1, [r1, #3]
    9b6e:	f880 10e1 	strb.w	r1, [r0, #225]	; 0xe1
    9b72:	f7ff f8a3 	bl	8cbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    9b76:	2000      	movs	r0, #0
    9b78:	bd10      	pop	{r4, pc}
    9b7a:	0000      	.short	0x0000
    9b7c:	2000012c 	.word	0x2000012c
    9b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b82:	4c2e      	ldr	r4, [pc, #184]	; (9c3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a8>)
    9b84:	68a0      	ldr	r0, [r4, #8]
    9b86:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    9b8a:	f010 0f30 	tst.w	r0, #48	; 0x30
    9b8e:	d001      	beq.n	9b94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1100>
    9b90:	2001      	movs	r0, #1
    9b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9b94:	6920      	ldr	r0, [r4, #16]
    9b96:	f004 f8a8 	bl	dcea <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9b9a:	b350      	cbz	r0, 9bf2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x115e>
    9b9c:	6920      	ldr	r0, [r4, #16]
    9b9e:	f004 f896 	bl	dcce <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9ba2:	4607      	mov	r7, r0
    9ba4:	6920      	ldr	r0, [r4, #16]
    9ba6:	f004 f896 	bl	dcd6 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9baa:	4606      	mov	r6, r0
    9bac:	6920      	ldr	r0, [r4, #16]
    9bae:	f004 f88c 	bl	dcca <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9bb2:	4605      	mov	r5, r0
    9bb4:	6920      	ldr	r0, [r4, #16]
    9bb6:	f004 f88c 	bl	dcd2 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9bba:	4601      	mov	r1, r0
    9bbc:	9700      	str	r7, [sp, #0]
    9bbe:	68a0      	ldr	r0, [r4, #8]
    9bc0:	4633      	mov	r3, r6
    9bc2:	462a      	mov	r2, r5
    9bc4:	3024      	adds	r0, #36	; 0x24
    9bc6:	f004 fad6 	bl	e176 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9bca:	78a0      	ldrb	r0, [r4, #2]
    9bcc:	0780      	lsls	r0, r0, #30
    9bce:	d503      	bpl.n	9bd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1144>
    9bd0:	68e0      	ldr	r0, [r4, #12]
    9bd2:	78c0      	ldrb	r0, [r0, #3]
    9bd4:	2814      	cmp	r0, #20
    9bd6:	d010      	beq.n	9bfa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1166>
    9bd8:	68a1      	ldr	r1, [r4, #8]
    9bda:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    9bde:	281c      	cmp	r0, #28
    9be0:	d00b      	beq.n	9bfa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1166>
    9be2:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    9be6:	2801      	cmp	r0, #1
    9be8:	d00f      	beq.n	9c0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1176>
    9bea:	f891 019d 	ldrb.w	r0, [r1, #413]	; 0x19d
    9bee:	b960      	cbnz	r0, 9c0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1176>
    9bf0:	e008      	b.n	9c04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1170>
    9bf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9bf6:	f7ff bfab 	b.w	9b50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10bc>
    9bfa:	68a1      	ldr	r1, [r4, #8]
    9bfc:	2001      	movs	r0, #1
    9bfe:	f881 0058 	strb.w	r0, [r1, #88]	; 0x58
    9c02:	e002      	b.n	9c0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1176>
    9c04:	f891 019c 	ldrb.w	r0, [r1, #412]	; 0x19c
    9c08:	b130      	cbz	r0, 9c18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1184>
    9c0a:	68a0      	ldr	r0, [r4, #8]
    9c0c:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    9c10:	f041 0110 	orr.w	r1, r1, #16
    9c14:	7001      	strb	r1, [r0, #0]
    9c16:	e00d      	b.n	9c34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a0>
    9c18:	f891 0077 	ldrb.w	r0, [r1, #119]	; 0x77
    9c1c:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
    9c20:	f040 0020 	orr.w	r0, r0, #32
    9c24:	f881 0077 	strb.w	r0, [r1, #119]	; 0x77
    9c28:	f831 0b24 	ldrh.w	r0, [r1], #36
    9c2c:	f004 faaa 	bl	e184 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    9c30:	f000 fdb2 	bl	a798 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9c34:	f7ff f842 	bl	8cbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    9c38:	2000      	movs	r0, #0
    9c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9c3c:	2000012c 	.word	0x2000012c
    9c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9c42:	4c1a      	ldr	r4, [pc, #104]	; (9cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>)
    9c44:	2301      	movs	r3, #1
    9c46:	210a      	movs	r1, #10
    9c48:	68a0      	ldr	r0, [r4, #8]
    9c4a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    9c4e:	3068      	adds	r0, #104	; 0x68
    9c50:	f003 fdb6 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c54:	b338      	cbz	r0, 9ca6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1212>
    9c56:	6920      	ldr	r0, [r4, #16]
    9c58:	f004 f847 	bl	dcea <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9c5c:	b1c8      	cbz	r0, 9c92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11fe>
    9c5e:	6920      	ldr	r0, [r4, #16]
    9c60:	f004 f835 	bl	dcce <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9c64:	4607      	mov	r7, r0
    9c66:	6920      	ldr	r0, [r4, #16]
    9c68:	f004 f835 	bl	dcd6 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9c6c:	4606      	mov	r6, r0
    9c6e:	6920      	ldr	r0, [r4, #16]
    9c70:	f004 f82b 	bl	dcca <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9c74:	4605      	mov	r5, r0
    9c76:	6920      	ldr	r0, [r4, #16]
    9c78:	f004 f82b 	bl	dcd2 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9c7c:	4601      	mov	r1, r0
    9c7e:	9700      	str	r7, [sp, #0]
    9c80:	68a0      	ldr	r0, [r4, #8]
    9c82:	4633      	mov	r3, r6
    9c84:	462a      	mov	r2, r5
    9c86:	3024      	adds	r0, #36	; 0x24
    9c88:	f004 fa75 	bl	e176 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9c8c:	68a0      	ldr	r0, [r4, #8]
    9c8e:	f004 f9e8 	bl	e062 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9c92:	68a1      	ldr	r1, [r4, #8]
    9c94:	2000      	movs	r0, #0
    9c96:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    9c9a:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    9c9e:	f7ff f9b7 	bl	9010 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57c>
    9ca2:	2000      	movs	r0, #0
    9ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9ca6:	2001      	movs	r0, #1
    9ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9caa:	0000      	.short	0x0000
    9cac:	2000012c 	.word	0x2000012c
    9cb0:	b510      	push	{r4, lr}
    9cb2:	4c09      	ldr	r4, [pc, #36]	; (9cd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1244>)
    9cb4:	68a0      	ldr	r0, [r4, #8]
    9cb6:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    9cba:	0740      	lsls	r0, r0, #29
    9cbc:	d501      	bpl.n	9cc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x122e>
    9cbe:	2001      	movs	r0, #1
    9cc0:	bd10      	pop	{r4, pc}
    9cc2:	f7fe fffb 	bl	8cbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    9cc6:	68a0      	ldr	r0, [r4, #8]
    9cc8:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    9ccc:	f041 0104 	orr.w	r1, r1, #4
    9cd0:	7001      	strb	r1, [r0, #0]
    9cd2:	2000      	movs	r0, #0
    9cd4:	bd10      	pop	{r4, pc}
    9cd6:	0000      	.short	0x0000
    9cd8:	2000012c 	.word	0x2000012c
    9cdc:	b510      	push	{r4, lr}
    9cde:	4c09      	ldr	r4, [pc, #36]	; (9d04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1270>)
    9ce0:	2301      	movs	r3, #1
    9ce2:	2109      	movs	r1, #9
    9ce4:	68a0      	ldr	r0, [r4, #8]
    9ce6:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    9cea:	3068      	adds	r0, #104	; 0x68
    9cec:	f003 fd68 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9cf0:	2800      	cmp	r0, #0
    9cf2:	d006      	beq.n	9d02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x126e>
    9cf4:	68a1      	ldr	r1, [r4, #8]
    9cf6:	2000      	movs	r0, #0
    9cf8:	f801 0f9a 	strb.w	r0, [r1, #154]!
    9cfc:	7308      	strb	r0, [r1, #12]
    9cfe:	f801 0c25 	strb.w	r0, [r1, #-37]
    9d02:	bd10      	pop	{r4, pc}
    9d04:	2000012c 	.word	0x2000012c
    9d08:	b510      	push	{r4, lr}
    9d0a:	4c0f      	ldr	r4, [pc, #60]	; (9d48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12b4>)
    9d0c:	2301      	movs	r3, #1
    9d0e:	2100      	movs	r1, #0
    9d10:	68a0      	ldr	r0, [r4, #8]
    9d12:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9d16:	3068      	adds	r0, #104	; 0x68
    9d18:	f003 fd52 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d1c:	b138      	cbz	r0, 9d2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129a>
    9d1e:	f7fe ffcd 	bl	8cbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    9d22:	68a1      	ldr	r1, [r4, #8]
    9d24:	2010      	movs	r0, #16
    9d26:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    9d2a:	2000      	movs	r0, #0
    9d2c:	bd10      	pop	{r4, pc}
    9d2e:	68a0      	ldr	r0, [r4, #8]
    9d30:	2301      	movs	r3, #1
    9d32:	2105      	movs	r1, #5
    9d34:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9d38:	3068      	adds	r0, #104	; 0x68
    9d3a:	f003 fd41 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d3e:	b108      	cbz	r0, 9d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12b0>
    9d40:	2008      	movs	r0, #8
    9d42:	bd10      	pop	{r4, pc}
    9d44:	2001      	movs	r0, #1
    9d46:	bd10      	pop	{r4, pc}
    9d48:	2000012c 	.word	0x2000012c
    9d4c:	4806      	ldr	r0, [pc, #24]	; (9d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d4>)
    9d4e:	6880      	ldr	r0, [r0, #8]
    9d50:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9d54:	2911      	cmp	r1, #17
    9d56:	d001      	beq.n	9d5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12c8>
    9d58:	2002      	movs	r0, #2
    9d5a:	4770      	bx	lr
    9d5c:	2112      	movs	r1, #18
    9d5e:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    9d62:	2000      	movs	r0, #0
    9d64:	4770      	bx	lr
    9d66:	0000      	.short	0x0000
    9d68:	2000012c 	.word	0x2000012c
    9d6c:	b570      	push	{r4, r5, r6, lr}
    9d6e:	4c30      	ldr	r4, [pc, #192]	; (9e30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x139c>)
    9d70:	2301      	movs	r3, #1
    9d72:	210b      	movs	r1, #11
    9d74:	68a0      	ldr	r0, [r4, #8]
    9d76:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9d7a:	3068      	adds	r0, #104	; 0x68
    9d7c:	f003 fd20 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d80:	bb48      	cbnz	r0, 9dd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1342>
    9d82:	68a0      	ldr	r0, [r4, #8]
    9d84:	2301      	movs	r3, #1
    9d86:	2100      	movs	r1, #0
    9d88:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9d8c:	3068      	adds	r0, #104	; 0x68
    9d8e:	f003 fd17 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d92:	b1f0      	cbz	r0, 9dd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x133e>
    9d94:	68a0      	ldr	r0, [r4, #8]
    9d96:	f890 0075 	ldrb.w	r0, [r0, #117]	; 0x75
    9d9a:	2824      	cmp	r0, #36	; 0x24
    9d9c:	d01b      	beq.n	9dd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1342>
    9d9e:	6920      	ldr	r0, [r4, #16]
    9da0:	f003 ffbf 	bl	dd22 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    9da4:	b1c8      	cbz	r0, 9dda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1346>
    9da6:	68a0      	ldr	r0, [r4, #8]
    9da8:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    9dac:	f041 0104 	orr.w	r1, r1, #4
    9db0:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    9db4:	6921      	ldr	r1, [r4, #16]
    9db6:	794a      	ldrb	r2, [r1, #5]
    9db8:	f002 0207 	and.w	r2, r2, #7
    9dbc:	f880 205b 	strb.w	r2, [r0, #91]	; 0x5b
    9dc0:	7909      	ldrb	r1, [r1, #4]
    9dc2:	f001 0107 	and.w	r1, r1, #7
    9dc6:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
    9dca:	f890 31a7 	ldrb.w	r3, [r0, #423]	; 0x1a7
    9dce:	bb3b      	cbnz	r3, 9e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138c>
    9dd0:	e007      	b.n	9de2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134e>
    9dd2:	2001      	movs	r0, #1
    9dd4:	bd70      	pop	{r4, r5, r6, pc}
    9dd6:	2020      	movs	r0, #32
    9dd8:	bd70      	pop	{r4, r5, r6, pc}
    9dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9dde:	f7ff beb7 	b.w	9b50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10bc>
    9de2:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
    9de6:	2b01      	cmp	r3, #1
    9de8:	d01a      	beq.n	9e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138c>
    9dea:	f100 0362 	add.w	r3, r0, #98	; 0x62
    9dee:	2501      	movs	r5, #1
    9df0:	785e      	ldrb	r6, [r3, #1]
    9df2:	428e      	cmp	r6, r1
    9df4:	d106      	bne.n	9e04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1370>
    9df6:	7819      	ldrb	r1, [r3, #0]
    9df8:	4291      	cmp	r1, r2
    9dfa:	d103      	bne.n	9e04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1370>
    9dfc:	2102      	movs	r1, #2
    9dfe:	f880 11a6 	strb.w	r1, [r0, #422]	; 0x1a6
    9e02:	e00d      	b.n	9e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138c>
    9e04:	f500 71fb 	add.w	r1, r0, #502	; 0x1f6
    9e08:	8802      	ldrh	r2, [r0, #0]
    9e0a:	f821 2902 	strh.w	r2, [r1], #-2
    9e0e:	f890 205a 	ldrb.w	r2, [r0, #90]	; 0x5a
    9e12:	710a      	strb	r2, [r1, #4]
    9e14:	f890 005b 	ldrb.w	r0, [r0, #91]	; 0x5b
    9e18:	7148      	strb	r0, [r1, #5]
    9e1a:	700d      	strb	r5, [r1, #0]
    9e1c:	f000 fcbc 	bl	a798 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9e20:	68a1      	ldr	r1, [r4, #8]
    9e22:	2021      	movs	r0, #33	; 0x21
    9e24:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    9e28:	f7fe ff48 	bl	8cbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    9e2c:	2000      	movs	r0, #0
    9e2e:	bd70      	pop	{r4, r5, r6, pc}
    9e30:	2000012c 	.word	0x2000012c
    9e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9e38:	4c4e      	ldr	r4, [pc, #312]	; (9f74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e0>)
    9e3a:	68a0      	ldr	r0, [r4, #8]
    9e3c:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    9e40:	2920      	cmp	r1, #32
    9e42:	d009      	beq.n	9e58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c4>
    9e44:	f05f 0700 	movs.w	r7, #0
    9e48:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9e4c:	2922      	cmp	r1, #34	; 0x22
    9e4e:	d005      	beq.n	9e5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>
    9e50:	b387      	cbz	r7, 9eb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1420>
    9e52:	f100 0575 	add.w	r5, r0, #117	; 0x75
    9e56:	e003      	b.n	9e60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13cc>
    9e58:	2701      	movs	r7, #1
    9e5a:	e7f5      	b.n	9e48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    9e5c:	f100 0576 	add.w	r5, r0, #118	; 0x76
    9e60:	f810 1fb4 	ldrb.w	r1, [r0, #180]!
    9e64:	f041 0104 	orr.w	r1, r1, #4
    9e68:	7001      	strb	r1, [r0, #0]
    9e6a:	6920      	ldr	r0, [r4, #16]
    9e6c:	f7fc fd30 	bl	68d0 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    9e70:	f04f 0801 	mov.w	r8, #1
    9e74:	2600      	movs	r6, #0
    9e76:	b308      	cbz	r0, 9ebc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>
    9e78:	4639      	mov	r1, r7
    9e7a:	6920      	ldr	r0, [r4, #16]
    9e7c:	f7fe ffd6 	bl	8e2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x398>
    9e80:	b1e0      	cbz	r0, 9ebc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>
    9e82:	466a      	mov	r2, sp
    9e84:	6921      	ldr	r1, [r4, #16]
    9e86:	68a0      	ldr	r0, [r4, #8]
    9e88:	f003 fdbd 	bl	da06 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    9e8c:	b388      	cbz	r0, 9ef2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    9e8e:	6920      	ldr	r0, [r4, #16]
    9e90:	f003 ff23 	bl	dcda <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    9e94:	68a1      	ldr	r1, [r4, #8]
    9e96:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    9e9a:	f8b1 106c 	ldrh.w	r1, [r1, #108]	; 0x6c
    9e9e:	f004 ff75 	bl	ed8c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9ea2:	b338      	cbz	r0, 9ef4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1460>
    9ea4:	68a0      	ldr	r0, [r4, #8]
    9ea6:	2128      	movs	r1, #40	; 0x28
    9ea8:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    9eac:	306e      	adds	r0, #110	; 0x6e
    9eae:	f880 801e 	strb.w	r8, [r0, #30]
    9eb2:	e053      	b.n	9f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>
    9eb4:	e7ff      	b.n	9eb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1422>
    9eb6:	2002      	movs	r0, #2
    9eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9ebc:	68a0      	ldr	r0, [r4, #8]
    9ebe:	f04f 0900 	mov.w	r9, #0
    9ec2:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    9ec6:	2901      	cmp	r1, #1
    9ec8:	d015      	beq.n	9ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1462>
    9eca:	f880 61a6 	strb.w	r6, [r0, #422]	; 0x1a6
    9ece:	b1f7      	cbz	r7, 9f0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x147a>
    9ed0:	6920      	ldr	r0, [r4, #16]
    9ed2:	68a1      	ldr	r1, [r4, #8]
    9ed4:	78c0      	ldrb	r0, [r0, #3]
    9ed6:	f881 00e2 	strb.w	r0, [r1, #226]	; 0xe2
    9eda:	fa08 f200 	lsl.w	r2, r8, r0
    9ede:	f3c2 6000 	ubfx	r0, r2, #24, #1
    9ee2:	b160      	cbz	r0, 9efe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x146a>
    9ee4:	200a      	movs	r0, #10
    9ee6:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    9eea:	f891 00a6 	ldrb.w	r0, [r1, #166]	; 0xa6
    9eee:	b9a0      	cbnz	r0, 9f1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1486>
    9ef0:	e008      	b.n	9f04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1470>
    9ef2:	e014      	b.n	9f1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x148a>
    9ef4:	e027      	b.n	9f46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b2>
    9ef6:	201e      	movs	r0, #30
    9ef8:	f7ff fd02 	bl	9900 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    9efc:	e7e7      	b.n	9ece <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x143a>
    9efe:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    9f02:	e001      	b.n	9f08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1474>
    9f04:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    9f08:	2031      	movs	r0, #49	; 0x31
    9f0a:	f7fa fce9 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f0e:	702e      	strb	r6, [r5, #0]
    9f10:	f7fe fee0 	bl	8cd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    9f14:	f7ff fe1c 	bl	9b50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10bc>
    9f18:	4681      	mov	r9, r0
    9f1a:	4648      	mov	r0, r9
    9f1c:	e7cc      	b.n	9eb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
    9f1e:	68a0      	ldr	r0, [r4, #8]
    9f20:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    9f24:	2901      	cmp	r1, #1
    9f26:	d009      	beq.n	9f3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a8>
    9f28:	f880 61a6 	strb.w	r6, [r0, #422]	; 0x1a6
    9f2c:	68a0      	ldr	r0, [r4, #8]
    9f2e:	f100 0176 	add.w	r1, r0, #118	; 0x76
    9f32:	428d      	cmp	r5, r1
    9f34:	d112      	bne.n	9f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>
    9f36:	f880 6076 	strb.w	r6, [r0, #118]	; 0x76
    9f3a:	e00f      	b.n	9f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>
    9f3c:	2000      	movs	r0, #0
    9f3e:	f7ff fcdf 	bl	9900 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    9f42:	702e      	strb	r6, [r5, #0]
    9f44:	e7f2      	b.n	9f2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1498>
    9f46:	68a0      	ldr	r0, [r4, #8]
    9f48:	f89d 1000 	ldrb.w	r1, [sp]
    9f4c:	f880 118e 	strb.w	r1, [r0, #398]	; 0x18e
    9f50:	f89d 1001 	ldrb.w	r1, [sp, #1]
    9f54:	f880 118f 	strb.w	r1, [r0, #399]	; 0x18f
    9f58:	2024      	movs	r0, #36	; 0x24
    9f5a:	7028      	strb	r0, [r5, #0]
    9f5c:	68a0      	ldr	r0, [r4, #8]
    9f5e:	f100 0176 	add.w	r1, r0, #118	; 0x76
    9f62:	428d      	cmp	r5, r1
    9f64:	d102      	bne.n	9f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14d8>
    9f66:	f7fe feb5 	bl	8cd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    9f6a:	e001      	b.n	9f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14dc>
    9f6c:	f880 60a6 	strb.w	r6, [r0, #166]	; 0xa6
    9f70:	2000      	movs	r0, #0
    9f72:	e7a1      	b.n	9eb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
    9f74:	2000012c 	.word	0x2000012c
    9f78:	b510      	push	{r4, lr}
    9f7a:	4c0a      	ldr	r4, [pc, #40]	; (9fa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1510>)
    9f7c:	68a0      	ldr	r0, [r4, #8]
    9f7e:	f810 1fb4 	ldrb.w	r1, [r0, #180]!
    9f82:	f041 0104 	orr.w	r1, r1, #4
    9f86:	7001      	strb	r1, [r0, #0]
    9f88:	6920      	ldr	r0, [r4, #16]
    9f8a:	f003 fed4 	bl	dd36 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    9f8e:	2816      	cmp	r0, #22
    9f90:	d001      	beq.n	9f96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1502>
    9f92:	2000      	movs	r0, #0
    9f94:	bd10      	pop	{r4, pc}
    9f96:	6920      	ldr	r0, [r4, #16]
    9f98:	f003 fecf 	bl	dd3a <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    9f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9fa0:	f7fe be6a 	b.w	8c78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e4>
    9fa4:	2000012c 	.word	0x2000012c
    9fa8:	4802      	ldr	r0, [pc, #8]	; (9fb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1520>)
    9faa:	6900      	ldr	r0, [r0, #16]
    9fac:	7900      	ldrb	r0, [r0, #4]
    9fae:	f7fe be63 	b.w	8c78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e4>
    9fb2:	0000      	.short	0x0000
    9fb4:	2000012c 	.word	0x2000012c
    9fb8:	b510      	push	{r4, lr}
    9fba:	4c08      	ldr	r4, [pc, #32]	; (9fdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1548>)
    9fbc:	68a0      	ldr	r0, [r4, #8]
    9fbe:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    9fc2:	2817      	cmp	r0, #23
    9fc4:	d001      	beq.n	9fca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1536>
    9fc6:	2002      	movs	r0, #2
    9fc8:	bd10      	pop	{r4, pc}
    9fca:	f7fe fe83 	bl	8cd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    9fce:	68a1      	ldr	r1, [r4, #8]
    9fd0:	201b      	movs	r0, #27
    9fd2:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    9fd6:	2000      	movs	r0, #0
    9fd8:	bd10      	pop	{r4, pc}
    9fda:	0000      	.short	0x0000
    9fdc:	2000012c 	.word	0x2000012c
    9fe0:	b510      	push	{r4, lr}
    9fe2:	4c0b      	ldr	r4, [pc, #44]	; (a010 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x157c>)
    9fe4:	2301      	movs	r3, #1
    9fe6:	4619      	mov	r1, r3
    9fe8:	68a0      	ldr	r0, [r4, #8]
    9fea:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    9fee:	3068      	adds	r0, #104	; 0x68
    9ff0:	f003 fbe6 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ff4:	b108      	cbz	r0, 9ffa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1566>
    9ff6:	2000      	movs	r0, #0
    9ff8:	bd10      	pop	{r4, pc}
    9ffa:	6920      	ldr	r0, [r4, #16]
    9ffc:	f003 fe71 	bl	dce2 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    a000:	68a1      	ldr	r1, [r4, #8]
    a002:	f881 0172 	strb.w	r0, [r1, #370]	; 0x172
    a006:	2007      	movs	r0, #7
    a008:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    a00c:	e7f3      	b.n	9ff6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1562>
    a00e:	0000      	.short	0x0000
    a010:	2000012c 	.word	0x2000012c
    a014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a018:	4d37      	ldr	r5, [pc, #220]	; (a0f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1664>)
    a01a:	2600      	movs	r6, #0
    a01c:	4628      	mov	r0, r5
    a01e:	68a9      	ldr	r1, [r5, #8]
    a020:	6900      	ldr	r0, [r0, #16]
    a022:	2701      	movs	r7, #1
    a024:	f891 3075 	ldrb.w	r3, [r1, #117]	; 0x75
    a028:	7900      	ldrb	r0, [r0, #4]
    a02a:	2b0e      	cmp	r3, #14
    a02c:	d101      	bne.n	a032 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x159e>
    a02e:	2812      	cmp	r0, #18
    a030:	d006      	beq.n	a040 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    a032:	4a31      	ldr	r2, [pc, #196]	; (a0f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1664>)
    a034:	2400      	movs	r4, #0
    a036:	6892      	ldr	r2, [r2, #8]
    a038:	32b4      	adds	r2, #180	; 0xb4
    a03a:	2b1c      	cmp	r3, #28
    a03c:	d004      	beq.n	a048 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b4>
    a03e:	e005      	b.n	a04c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b8>
    a040:	f7ff fe4c 	bl	9cdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1248>
    a044:	4606      	mov	r6, r0
    a046:	e053      	b.n	a0f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    a048:	2814      	cmp	r0, #20
    a04a:	d002      	beq.n	a052 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15be>
    a04c:	2b04      	cmp	r3, #4
    a04e:	d00b      	beq.n	a068 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15d4>
    a050:	e00c      	b.n	a06c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15d8>
    a052:	f881 4075 	strb.w	r4, [r1, #117]	; 0x75
    a056:	f881 40a6 	strb.w	r4, [r1, #166]	; 0xa6
    a05a:	2105      	movs	r1, #5
    a05c:	4610      	mov	r0, r2
    a05e:	f004 fe26 	bl	ecae <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4ac>
    a062:	f7fe ffd5 	bl	9010 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57c>
    a066:	e043      	b.n	a0f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    a068:	280e      	cmp	r0, #14
    a06a:	d002      	beq.n	a072 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15de>
    a06c:	2b20      	cmp	r3, #32
    a06e:	d00f      	beq.n	a090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15fc>
    a070:	e010      	b.n	a094 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1600>
    a072:	f881 4075 	strb.w	r4, [r1, #117]	; 0x75
    a076:	f881 40a6 	strb.w	r4, [r1, #166]	; 0xa6
    a07a:	8808      	ldrh	r0, [r1, #0]
    a07c:	f8a1 0206 	strh.w	r0, [r1, #518]	; 0x206
    a080:	201a      	movs	r0, #26
    a082:	f881 0204 	strb.w	r0, [r1, #516]	; 0x204
    a086:	f881 7202 	strb.w	r7, [r1, #514]	; 0x202
    a08a:	f000 fb85 	bl	a798 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a08e:	e02f      	b.n	a0f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    a090:	2816      	cmp	r0, #22
    a092:	d006      	beq.n	a0a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x160e>
    a094:	2b26      	cmp	r3, #38	; 0x26
    a096:	d101      	bne.n	a09c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1608>
    a098:	2816      	cmp	r0, #22
    a09a:	d002      	beq.n	a0a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x160e>
    a09c:	2817      	cmp	r0, #23
    a09e:	d014      	beq.n	a0ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1636>
    a0a0:	e026      	b.n	a0f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    a0a2:	f801 4f75 	strb.w	r4, [r1, #117]!
    a0a6:	f881 4031 	strb.w	r4, [r1, #49]	; 0x31
    a0aa:	7848      	ldrb	r0, [r1, #1]
    a0ac:	2821      	cmp	r0, #33	; 0x21
    a0ae:	d01f      	beq.n	a0f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    a0b0:	2108      	movs	r1, #8
    a0b2:	4610      	mov	r0, r2
    a0b4:	f004 fdfb 	bl	ecae <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4ac>
    a0b8:	68a8      	ldr	r0, [r5, #8]
    a0ba:	210b      	movs	r1, #11
    a0bc:	30b4      	adds	r0, #180	; 0xb4
    a0be:	f004 fdf6 	bl	ecae <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4ac>
    a0c2:	201a      	movs	r0, #26
    a0c4:	f7ff fc1c 	bl	9900 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    a0c8:	e012      	b.n	a0f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    a0ca:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
    a0ce:	2822      	cmp	r0, #34	; 0x22
    a0d0:	d10e      	bne.n	a0f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    a0d2:	f881 4076 	strb.w	r4, [r1, #118]	; 0x76
    a0d6:	f7fe fdfd 	bl	8cd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    a0da:	68a8      	ldr	r0, [r5, #8]
    a0dc:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    a0e0:	2801      	cmp	r0, #1
    a0e2:	d102      	bne.n	a0ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1656>
    a0e4:	2000      	movs	r0, #0
    a0e6:	f7ff fc0b 	bl	9900 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    a0ea:	68a8      	ldr	r0, [r5, #8]
    a0ec:	f880 41a6 	strb.w	r4, [r0, #422]	; 0x1a6
    a0f0:	4630      	mov	r0, r6
    a0f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a0f6:	0000      	.short	0x0000
    a0f8:	2000012c 	.word	0x2000012c
    a0fc:	b570      	push	{r4, r5, r6, lr}
    a0fe:	4c2c      	ldr	r4, [pc, #176]	; (a1b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x171c>)
    a100:	68a0      	ldr	r0, [r4, #8]
    a102:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    a106:	0789      	lsls	r1, r1, #30
    a108:	d507      	bpl.n	a11a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1686>
    a10a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    a10e:	2301      	movs	r3, #1
    a110:	2108      	movs	r1, #8
    a112:	3068      	adds	r0, #104	; 0x68
    a114:	f003 fb54 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a118:	b1e8      	cbz	r0, a156 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c2>
    a11a:	68a0      	ldr	r0, [r4, #8]
    a11c:	f890 00ae 	ldrb.w	r0, [r0, #174]	; 0xae
    a120:	0780      	lsls	r0, r0, #30
    a122:	d412      	bmi.n	a14a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b6>
    a124:	6920      	ldr	r0, [r4, #16]
    a126:	f003 fdde 	bl	dce6 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    a12a:	68a1      	ldr	r1, [r4, #8]
    a12c:	f881 00af 	strb.w	r0, [r1, #175]	; 0xaf
    a130:	6920      	ldr	r0, [r4, #16]
    a132:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    a136:	f8a1 20b0 	strh.w	r2, [r1, #176]	; 0xb0
    a13a:	8840      	ldrh	r0, [r0, #2]
    a13c:	f8a1 00b2 	strh.w	r0, [r1, #178]	; 0xb2
    a140:	f811 0fae 	ldrb.w	r0, [r1, #174]!
    a144:	f040 0002 	orr.w	r0, r0, #2
    a148:	7008      	strb	r0, [r1, #0]
    a14a:	68a0      	ldr	r0, [r4, #8]
    a14c:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    a150:	07c9      	lsls	r1, r1, #31
    a152:	d002      	beq.n	a15a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c6>
    a154:	e010      	b.n	a178 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e4>
    a156:	2001      	movs	r0, #1
    a158:	bd70      	pop	{r4, r5, r6, pc}
    a15a:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    a15e:	078a      	lsls	r2, r1, #30
    a160:	d504      	bpl.n	a16c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    a162:	f240 21d9 	movw	r1, #729	; 0x2d9
    a166:	2031      	movs	r0, #49	; 0x31
    a168:	f7fa fbba 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a16c:	f041 0102 	orr.w	r1, r1, #2
    a170:	f880 1077 	strb.w	r1, [r0, #119]	; 0x77
    a174:	f7fe fda2 	bl	8cbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    a178:	68a0      	ldr	r0, [r4, #8]
    a17a:	2500      	movs	r5, #0
    a17c:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    a180:	2906      	cmp	r1, #6
    a182:	d105      	bne.n	a190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16fc>
    a184:	f880 5075 	strb.w	r5, [r0, #117]	; 0x75
    a188:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    a18c:	f000 fb04 	bl	a798 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a190:	68a0      	ldr	r0, [r4, #8]
    a192:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
    a196:	b149      	cbz	r1, a1ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1718>
    a198:	f880 51ac 	strb.w	r5, [r0, #428]	; 0x1ac
    a19c:	f000 fafc 	bl	a798 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a1a0:	68a0      	ldr	r0, [r4, #8]
    a1a2:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    a1a6:	b909      	cbnz	r1, a1ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1718>
    a1a8:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    a1ac:	2000      	movs	r0, #0
    a1ae:	bd70      	pop	{r4, r5, r6, pc}
    a1b0:	2000012c 	.word	0x2000012c
    a1b4:	b510      	push	{r4, lr}
    a1b6:	4c17      	ldr	r4, [pc, #92]	; (a214 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1780>)
    a1b8:	68a3      	ldr	r3, [r4, #8]
    a1ba:	f893 00ea 	ldrb.w	r0, [r3, #234]	; 0xea
    a1be:	2808      	cmp	r0, #8
    a1c0:	d20e      	bcs.n	a1e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174c>
    a1c2:	f100 0208 	add.w	r2, r0, #8
    a1c6:	f1c0 0008 	rsb	r0, r0, #8
    a1ca:	b2c1      	uxtb	r1, r0
    a1cc:	1898      	adds	r0, r3, r2
    a1ce:	f500 7084 	add.w	r0, r0, #264	; 0x108
    a1d2:	f7fa fc1d 	bl	4a10 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a1d6:	68a1      	ldr	r1, [r4, #8]
    a1d8:	f811 2fea 	ldrb.w	r2, [r1, #234]!
    a1dc:	4410      	add	r0, r2
    a1de:	7008      	strb	r0, [r1, #0]
    a1e0:	68a3      	ldr	r3, [r4, #8]
    a1e2:	f893 00ea 	ldrb.w	r0, [r3, #234]	; 0xea
    a1e6:	3808      	subs	r0, #8
    a1e8:	2804      	cmp	r0, #4
    a1ea:	d211      	bcs.n	a210 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x177c>
    a1ec:	1d02      	adds	r2, r0, #4
    a1ee:	f1c0 0004 	rsb	r0, r0, #4
    a1f2:	b2c1      	uxtb	r1, r0
    a1f4:	1898      	adds	r0, r3, r2
    a1f6:	30d8      	adds	r0, #216	; 0xd8
    a1f8:	f7fa fc0a 	bl	4a10 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a1fc:	68a0      	ldr	r0, [r4, #8]
    a1fe:	2100      	movs	r1, #0
    a200:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
    a204:	2101      	movs	r1, #1
    a206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a20a:	2004      	movs	r0, #4
    a20c:	f7ff ba96 	b.w	973c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    a210:	bd10      	pop	{r4, pc}
    a212:	0000      	.short	0x0000
    a214:	2000012c 	.word	0x2000012c
    a218:	4804      	ldr	r0, [pc, #16]	; (a22c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1798>)
    a21a:	2127      	movs	r1, #39	; 0x27
    a21c:	6880      	ldr	r0, [r0, #8]
    a21e:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    a222:	2100      	movs	r1, #0
    a224:	f880 1184 	strb.w	r1, [r0, #388]	; 0x184
    a228:	4770      	bx	lr
    a22a:	0000      	.short	0x0000
    a22c:	2000012c 	.word	0x2000012c
    a230:	4809      	ldr	r0, [pc, #36]	; (a258 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c4>)
    a232:	b510      	push	{r4, lr}
    a234:	6880      	ldr	r0, [r0, #8]
    a236:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    a23a:	2914      	cmp	r1, #20
    a23c:	d004      	beq.n	a248 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b4>
    a23e:	f240 6189 	movw	r1, #1673	; 0x689
    a242:	2031      	movs	r0, #49	; 0x31
    a244:	f7fa fb4c 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a248:	2101      	movs	r1, #1
    a24a:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    a24e:	2115      	movs	r1, #21
    a250:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    a254:	bd10      	pop	{r4, pc}
    a256:	0000      	.short	0x0000
    a258:	2000012c 	.word	0x2000012c
    a25c:	b510      	push	{r4, lr}
    a25e:	4c0a      	ldr	r4, [pc, #40]	; (a288 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f4>)
    a260:	68a0      	ldr	r0, [r4, #8]
    a262:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    a266:	07c0      	lsls	r0, r0, #31
    a268:	d008      	beq.n	a27c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17e8>
    a26a:	f7fe fd33 	bl	8cd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    a26e:	68a0      	ldr	r0, [r4, #8]
    a270:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    a274:	f021 0101 	bic.w	r1, r1, #1
    a278:	7001      	strb	r1, [r0, #0]
    a27a:	bd10      	pop	{r4, pc}
    a27c:	f240 6172 	movw	r1, #1650	; 0x672
    a280:	2031      	movs	r0, #49	; 0x31
    a282:	f7fa fb2d 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a286:	0000      	.short	0x0000
    a288:	2000012c 	.word	0x2000012c
    a28c:	b510      	push	{r4, lr}
    a28e:	4c0a      	ldr	r4, [pc, #40]	; (a2b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1824>)
    a290:	2301      	movs	r3, #1
    a292:	2100      	movs	r1, #0
    a294:	68a0      	ldr	r0, [r4, #8]
    a296:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    a29a:	3068      	adds	r0, #104	; 0x68
    a29c:	f003 fa90 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a2a0:	b120      	cbz	r0, a2ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1818>
    a2a2:	68a1      	ldr	r1, [r4, #8]
    a2a4:	201c      	movs	r0, #28
    a2a6:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    a2aa:	bd10      	pop	{r4, pc}
    a2ac:	f240 61f7 	movw	r1, #1783	; 0x6f7
    a2b0:	2031      	movs	r0, #49	; 0x31
    a2b2:	f7fa fb15 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a2b6:	0000      	.short	0x0000
    a2b8:	2000012c 	.word	0x2000012c
    a2bc:	480a      	ldr	r0, [pc, #40]	; (a2e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1854>)
    a2be:	b510      	push	{r4, lr}
    a2c0:	6880      	ldr	r0, [r0, #8]
    a2c2:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    a2c6:	f3c1 1201 	ubfx	r2, r1, #4, #2
    a2ca:	2a01      	cmp	r2, #1
    a2cc:	d004      	beq.n	a2d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1844>
    a2ce:	f240 61fe 	movw	r1, #1790	; 0x6fe
    a2d2:	2031      	movs	r0, #49	; 0x31
    a2d4:	f7fa fb04 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a2d8:	f021 0110 	bic.w	r1, r1, #16
    a2dc:	f880 1077 	strb.w	r1, [r0, #119]	; 0x77
    a2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a2e4:	f7fe bcf6 	b.w	8cd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    a2e8:	2000012c 	.word	0x2000012c
    a2ec:	b510      	push	{r4, lr}
    a2ee:	4c0a      	ldr	r4, [pc, #40]	; (a318 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1884>)
    a2f0:	2301      	movs	r3, #1
    a2f2:	2100      	movs	r1, #0
    a2f4:	68a0      	ldr	r0, [r4, #8]
    a2f6:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    a2fa:	3068      	adds	r0, #104	; 0x68
    a2fc:	f003 fa60 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a300:	b120      	cbz	r0, a30c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1878>
    a302:	68a1      	ldr	r1, [r4, #8]
    a304:	200e      	movs	r0, #14
    a306:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    a30a:	bd10      	pop	{r4, pc}
    a30c:	f240 61ea 	movw	r1, #1770	; 0x6ea
    a310:	2031      	movs	r0, #49	; 0x31
    a312:	f7fa fae5 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a316:	0000      	.short	0x0000
    a318:	2000012c 	.word	0x2000012c
    a31c:	4804      	ldr	r0, [pc, #16]	; (a330 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x189c>)
    a31e:	6880      	ldr	r0, [r0, #8]
    a320:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    a324:	f021 0104 	bic.w	r1, r1, #4
    a328:	7001      	strb	r1, [r0, #0]
    a32a:	f7fe bcd3 	b.w	8cd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    a32e:	0000      	.short	0x0000
    a330:	2000012c 	.word	0x2000012c
    a334:	4809      	ldr	r0, [pc, #36]	; (a35c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c8>)
    a336:	b510      	push	{r4, lr}
    a338:	6880      	ldr	r0, [r0, #8]
    a33a:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    a33e:	2910      	cmp	r1, #16
    a340:	d004      	beq.n	a34c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18b8>
    a342:	f240 6181 	movw	r1, #1665	; 0x681
    a346:	2031      	movs	r0, #49	; 0x31
    a348:	f7fa faca 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a34c:	2101      	movs	r1, #1
    a34e:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    a352:	2111      	movs	r1, #17
    a354:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    a358:	bd10      	pop	{r4, pc}
    a35a:	0000      	.short	0x0000
    a35c:	2000012c 	.word	0x2000012c
    a360:	b510      	push	{r4, lr}
    a362:	4c0a      	ldr	r4, [pc, #40]	; (a38c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f8>)
    a364:	2301      	movs	r3, #1
    a366:	2100      	movs	r1, #0
    a368:	68a0      	ldr	r0, [r4, #8]
    a36a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    a36e:	3068      	adds	r0, #104	; 0x68
    a370:	f003 fa26 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a374:	b120      	cbz	r0, a380 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ec>
    a376:	68a1      	ldr	r1, [r4, #8]
    a378:	201f      	movs	r0, #31
    a37a:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    a37e:	bd10      	pop	{r4, pc}
    a380:	f240 710a 	movw	r1, #1802	; 0x70a
    a384:	2031      	movs	r0, #49	; 0x31
    a386:	f7fa faab 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a38a:	0000      	.short	0x0000
    a38c:	2000012c 	.word	0x2000012c
    a390:	4808      	ldr	r0, [pc, #32]	; (a3b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1920>)
    a392:	b510      	push	{r4, lr}
    a394:	6880      	ldr	r0, [r0, #8]
    a396:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    a39a:	2921      	cmp	r1, #33	; 0x21
    a39c:	d005      	beq.n	a3aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1916>
    a39e:	b121      	cbz	r1, a3aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1916>
    a3a0:	f240 7111 	movw	r1, #1809	; 0x711
    a3a4:	2031      	movs	r0, #49	; 0x31
    a3a6:	f7fa fa9b 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a3aa:	2122      	movs	r1, #34	; 0x22
    a3ac:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    a3b0:	bd10      	pop	{r4, pc}
    a3b2:	0000      	.short	0x0000
    a3b4:	2000012c 	.word	0x2000012c
    a3b8:	4807      	ldr	r0, [pc, #28]	; (a3d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1944>)
    a3ba:	b510      	push	{r4, lr}
    a3bc:	6880      	ldr	r0, [r0, #8]
    a3be:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    a3c2:	2915      	cmp	r1, #21
    a3c4:	d004      	beq.n	a3d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x193c>
    a3c6:	f240 6196 	movw	r1, #1686	; 0x696
    a3ca:	2031      	movs	r0, #49	; 0x31
    a3cc:	f7fa fa88 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a3d0:	2119      	movs	r1, #25
    a3d2:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    a3d6:	bd10      	pop	{r4, pc}
    a3d8:	2000012c 	.word	0x2000012c
    a3dc:	4807      	ldr	r0, [pc, #28]	; (a3fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>)
    a3de:	b510      	push	{r4, lr}
    a3e0:	6880      	ldr	r0, [r0, #8]
    a3e2:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    a3e6:	2915      	cmp	r1, #21
    a3e8:	d004      	beq.n	a3f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1960>
    a3ea:	f44f 61d2 	mov.w	r1, #1680	; 0x690
    a3ee:	2031      	movs	r0, #49	; 0x31
    a3f0:	f7fa fa76 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a3f4:	2117      	movs	r1, #23
    a3f6:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    a3fa:	bd10      	pop	{r4, pc}
    a3fc:	2000012c 	.word	0x2000012c
    a400:	b570      	push	{r4, r5, r6, lr}
    a402:	4d1b      	ldr	r5, [pc, #108]	; (a470 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19dc>)
    a404:	68a8      	ldr	r0, [r5, #8]
    a406:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    a40a:	291b      	cmp	r1, #27
    a40c:	d002      	beq.n	a414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1980>
    a40e:	f44f 61d6 	mov.w	r1, #1712	; 0x6b0
    a412:	e007      	b.n	a424 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1990>
    a414:	2400      	movs	r4, #0
    a416:	f880 40ab 	strb.w	r4, [r0, #171]	; 0xab
    a41a:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
    a41e:	b121      	cbz	r1, a42a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1996>
    a420:	f240 61b4 	movw	r1, #1716	; 0x6b4
    a424:	2031      	movs	r0, #49	; 0x31
    a426:	f7fa fa5b 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a42a:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
    a42e:	b141      	cbz	r1, a442 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ae>
    a430:	f880 40ac 	strb.w	r4, [r0, #172]	; 0xac
    a434:	8801      	ldrh	r1, [r0, #0]
    a436:	f8a0 11c0 	strh.w	r1, [r0, #448]	; 0x1c0
    a43a:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    a43e:	210c      	movs	r1, #12
    a440:	e008      	b.n	a454 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c0>
    a442:	8801      	ldrh	r1, [r0, #0]
    a444:	f8a0 11c0 	strh.w	r1, [r0, #448]	; 0x1c0
    a448:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    a44c:	2101      	movs	r1, #1
    a44e:	f880 11c2 	strb.w	r1, [r0, #450]	; 0x1c2
    a452:	210b      	movs	r1, #11
    a454:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
    a458:	8800      	ldrh	r0, [r0, #0]
    a45a:	f7fa fe75 	bl	5148 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    a45e:	f002 ff22 	bl	d2a6 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    a462:	f000 f999 	bl	a798 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a466:	68a8      	ldr	r0, [r5, #8]
    a468:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
    a46c:	bd70      	pop	{r4, r5, r6, pc}
    a46e:	0000      	.short	0x0000
    a470:	2000012c 	.word	0x2000012c
    a474:	b510      	push	{r4, lr}
    a476:	4c08      	ldr	r4, [pc, #32]	; (a498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a04>)
    a478:	2301      	movs	r3, #1
    a47a:	4619      	mov	r1, r3
    a47c:	68a0      	ldr	r0, [r4, #8]
    a47e:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    a482:	3068      	adds	r0, #104	; 0x68
    a484:	f003 f99c 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a488:	2800      	cmp	r0, #0
    a48a:	d103      	bne.n	a494 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a00>
    a48c:	68a1      	ldr	r1, [r4, #8]
    a48e:	2008      	movs	r0, #8
    a490:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    a494:	bd10      	pop	{r4, pc}
    a496:	0000      	.short	0x0000
    a498:	2000012c 	.word	0x2000012c
    a49c:	4814      	ldr	r0, [pc, #80]	; (a4f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a5c>)
    a49e:	b510      	push	{r4, lr}
    a4a0:	68c1      	ldr	r1, [r0, #12]
    a4a2:	6880      	ldr	r0, [r0, #8]
    a4a4:	7909      	ldrb	r1, [r1, #4]
    a4a6:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    a4aa:	2a0a      	cmp	r2, #10
    a4ac:	d109      	bne.n	a4c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2e>
    a4ae:	f890 20e2 	ldrb.w	r2, [r0, #226]	; 0xe2
    a4b2:	428a      	cmp	r2, r1
    a4b4:	d105      	bne.n	a4c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2e>
    a4b6:	2100      	movs	r1, #0
    a4b8:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    a4bc:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    a4c0:	bd10      	pop	{r4, pc}
    a4c2:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
    a4c6:	0713      	lsls	r3, r2, #28
    a4c8:	d507      	bpl.n	a4da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    a4ca:	f022 0108 	bic.w	r1, r2, #8
    a4ce:	f880 1077 	strb.w	r1, [r0, #119]	; 0x77
    a4d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a4d6:	f7fe bbfd 	b.w	8cd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    a4da:	29ff      	cmp	r1, #255	; 0xff
    a4dc:	d004      	beq.n	a4e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a54>
    a4de:	f240 616c 	movw	r1, #1644	; 0x66c
    a4e2:	2031      	movs	r0, #49	; 0x31
    a4e4:	f7fa f9fc 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a4ec:	f7ff be94 	b.w	a218 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1784>
    a4f0:	2000012c 	.word	0x2000012c
    a4f4:	b510      	push	{r4, lr}
    a4f6:	4c15      	ldr	r4, [pc, #84]	; (a54c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ab8>)
    a4f8:	68a0      	ldr	r0, [r4, #8]
    a4fa:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    a4fe:	0789      	lsls	r1, r1, #30
    a500:	d411      	bmi.n	a526 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a92>
    a502:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    a506:	2301      	movs	r3, #1
    a508:	2100      	movs	r1, #0
    a50a:	3068      	adds	r0, #104	; 0x68
    a50c:	f003 f958 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a510:	b120      	cbz	r0, a51c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
    a512:	68a1      	ldr	r1, [r4, #8]
    a514:	2006      	movs	r0, #6
    a516:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    a51a:	e009      	b.n	a530 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a9c>
    a51c:	f240 61d6 	movw	r1, #1750	; 0x6d6
    a520:	2031      	movs	r0, #49	; 0x31
    a522:	f7fa f9dd 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a526:	2100      	movs	r1, #0
    a528:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    a52c:	f880 11ac 	strb.w	r1, [r0, #428]	; 0x1ac
    a530:	68a0      	ldr	r0, [r4, #8]
    a532:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    a536:	0780      	lsls	r0, r0, #30
    a538:	d507      	bpl.n	a54a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ab6>
    a53a:	f7fe fbcb 	bl	8cd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    a53e:	68a0      	ldr	r0, [r4, #8]
    a540:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    a544:	f021 0102 	bic.w	r1, r1, #2
    a548:	7001      	strb	r1, [r0, #0]
    a54a:	bd10      	pop	{r4, pc}
    a54c:	2000012c 	.word	0x2000012c
    a550:	4808      	ldr	r0, [pc, #32]	; (a574 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae0>)
    a552:	b510      	push	{r4, lr}
    a554:	6880      	ldr	r0, [r0, #8]
    a556:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
    a55a:	b941      	cbnz	r1, a56e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ada>
    a55c:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    a560:	2301      	movs	r3, #1
    a562:	2106      	movs	r1, #6
    a564:	3068      	adds	r0, #104	; 0x68
    a566:	f003 f92b 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a56a:	2800      	cmp	r0, #0
    a56c:	d000      	beq.n	a570 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1adc>
    a56e:	2001      	movs	r0, #1
    a570:	bd10      	pop	{r4, pc}
    a572:	0000      	.short	0x0000
    a574:	2000012c 	.word	0x2000012c
    a578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a57a:	4c54      	ldr	r4, [pc, #336]	; (a6cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c38>)
    a57c:	4606      	mov	r6, r0
    a57e:	4615      	mov	r5, r2
    a580:	68a0      	ldr	r0, [r4, #8]
    a582:	b109      	cbz	r1, a588 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af4>
    a584:	2100      	movs	r1, #0
    a586:	e004      	b.n	a592 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afe>
    a588:	f8b0 1106 	ldrh.w	r1, [r0, #262]	; 0x106
    a58c:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
    a590:	4411      	add	r1, r2
    a592:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    a596:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    a59a:	b939      	cbnz	r1, a5ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b18>
    a59c:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    a5a0:	2301      	movs	r3, #1
    a5a2:	4619      	mov	r1, r3
    a5a4:	3068      	adds	r0, #104	; 0x68
    a5a6:	f003 f90b 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a5aa:	b130      	cbz	r0, a5ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b26>
    a5ac:	68a0      	ldr	r0, [r4, #8]
    a5ae:	f830 1fa0 	ldrh.w	r1, [r0, #160]!
    a5b2:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
    a5b6:	4411      	add	r1, r2
    a5b8:	8001      	strh	r1, [r0, #0]
    a5ba:	68a0      	ldr	r0, [r4, #8]
    a5bc:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    a5c0:	b132      	cbz	r2, a5d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b3c>
    a5c2:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    a5c6:	f8b0 30f6 	ldrh.w	r3, [r0, #246]	; 0xf6
    a5ca:	4419      	add	r1, r3
    a5cc:	f8a0 10a2 	strh.w	r1, [r0, #162]	; 0xa2
    a5d0:	f990 70aa 	ldrsb.w	r7, [r0, #170]	; 0xaa
    a5d4:	2f00      	cmp	r7, #0
    a5d6:	dd06      	ble.n	a5e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b52>
    a5d8:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
    a5dc:	f8b0 30f6 	ldrh.w	r3, [r0, #246]	; 0xf6
    a5e0:	4419      	add	r1, r3
    a5e2:	f8a0 10a8 	strh.w	r1, [r0, #168]	; 0xa8
    a5e6:	2101      	movs	r1, #1
    a5e8:	233d      	movs	r3, #61	; 0x3d
    a5ea:	b116      	cbz	r6, a5f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b5e>
    a5ec:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
    a5f0:	e013      	b.n	a61a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b86>
    a5f2:	7824      	ldrb	r4, [r4, #0]
    a5f4:	2c02      	cmp	r4, #2
    a5f6:	d00a      	beq.n	a60e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b7a>
    a5f8:	2c01      	cmp	r4, #1
    a5fa:	d012      	beq.n	a622 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8e>
    a5fc:	b345      	cbz	r5, a650 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbc>
    a5fe:	f100 028c 	add.w	r2, r0, #140	; 0x8c
    a602:	7011      	strb	r1, [r2, #0]
    a604:	f015 0f14 	tst.w	r5, #20
    a608:	d00e      	beq.n	a628 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b94>
    a60a:	211e      	movs	r1, #30
    a60c:	e018      	b.n	a640 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bac>
    a60e:	f890 20e6 	ldrb.w	r2, [r0, #230]	; 0xe6
    a612:	2a06      	cmp	r2, #6
    a614:	d03e      	beq.n	a694 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c00>
    a616:	2216      	movs	r2, #22
    a618:	e03c      	b.n	a694 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c00>
    a61a:	f100 028c 	add.w	r2, r0, #140	; 0x8c
    a61e:	7011      	strb	r1, [r2, #0]
    a620:	e041      	b.n	a6a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c12>
    a622:	f890 2172 	ldrb.w	r2, [r0, #370]	; 0x172
    a626:	e035      	b.n	a694 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c00>
    a628:	0729      	lsls	r1, r5, #28
    a62a:	d502      	bpl.n	a632 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b9e>
    a62c:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
    a630:	e039      	b.n	a6a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c12>
    a632:	06a9      	lsls	r1, r5, #26
    a634:	d501      	bpl.n	a63a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba6>
    a636:	2123      	movs	r1, #35	; 0x23
    a638:	e002      	b.n	a640 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bac>
    a63a:	07a9      	lsls	r1, r5, #30
    a63c:	d003      	beq.n	a646 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bb2>
    a63e:	212a      	movs	r1, #42	; 0x2a
    a640:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    a644:	e02f      	b.n	a6a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c12>
    a646:	f640 419b 	movw	r1, #3227	; 0xc9b
    a64a:	2031      	movs	r0, #49	; 0x31
    a64c:	f7fa f948 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a650:	b12a      	cbz	r2, a65e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bca>
    a652:	f8b0 20a2 	ldrh.w	r2, [r0, #162]	; 0xa2
    a656:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    a65a:	429a      	cmp	r2, r3
    a65c:	d210      	bcs.n	a680 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bec>
    a65e:	2f00      	cmp	r7, #0
    a660:	dd05      	ble.n	a66e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bda>
    a662:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
    a666:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    a66a:	429a      	cmp	r2, r3
    a66c:	d208      	bcs.n	a680 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bec>
    a66e:	f8b0 30a0 	ldrh.w	r3, [r0, #160]	; 0xa0
    a672:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    a676:	4293      	cmp	r3, r2
    a678:	d304      	bcc.n	a684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bf0>
    a67a:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
    a67e:	b10b      	cbz	r3, a684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bf0>
    a680:	2222      	movs	r2, #34	; 0x22
    a682:	e007      	b.n	a694 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c00>
    a684:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
    a688:	b13b      	cbz	r3, a69a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c06>
    a68a:	f8b0 309c 	ldrh.w	r3, [r0, #156]	; 0x9c
    a68e:	4293      	cmp	r3, r2
    a690:	d309      	bcc.n	a6a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c12>
    a692:	2208      	movs	r2, #8
    a694:	f880 208d 	strb.w	r2, [r0, #141]	; 0x8d
    a698:	e7bf      	b.n	a61a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b86>
    a69a:	f8b0 209c 	ldrh.w	r2, [r0, #156]	; 0x9c
    a69e:	2a06      	cmp	r2, #6
    a6a0:	d301      	bcc.n	a6a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c12>
    a6a2:	223e      	movs	r2, #62	; 0x3e
    a6a4:	e7f6      	b.n	a694 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c00>
    a6a6:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    a6aa:	f88d 1000 	strb.w	r1, [sp]
    a6ae:	9900      	ldr	r1, [sp, #0]
    a6b0:	9100      	str	r1, [sp, #0]
    a6b2:	f89d 1000 	ldrb.w	r1, [sp]
    a6b6:	b119      	cbz	r1, a6c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c2c>
    a6b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a6bc:	f004 bb36 	b.w	ed2c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    a6c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a6c4:	2100      	movs	r1, #0
    a6c6:	f7fd bb55 	b.w	7d74 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a6ca:	0000      	.short	0x0000
    a6cc:	2000012c 	.word	0x2000012c
    a6d0:	b570      	push	{r4, r5, r6, lr}
    a6d2:	4d2d      	ldr	r5, [pc, #180]	; (a788 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cf4>)
    a6d4:	68a8      	ldr	r0, [r5, #8]
    a6d6:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    a6da:	b151      	cbz	r1, a6f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c5e>
    a6dc:	2901      	cmp	r1, #1
    a6de:	d008      	beq.n	a6f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c5e>
    a6e0:	2902      	cmp	r1, #2
    a6e2:	d009      	beq.n	a6f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c64>
    a6e4:	2903      	cmp	r1, #3
    a6e6:	d007      	beq.n	a6f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c64>
    a6e8:	f640 215f 	movw	r1, #2655	; 0xa5f
    a6ec:	2031      	movs	r0, #49	; 0x31
    a6ee:	f7fa f8f7 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6f2:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	; 0xf4
    a6f6:	e035      	b.n	a764 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cd0>
    a6f8:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    a6fc:	2908      	cmp	r1, #8
    a6fe:	d034      	beq.n	a76a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cd6>
    a700:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    a704:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    a708:	2400      	movs	r4, #0
    a70a:	1c8b      	adds	r3, r1, #2
    a70c:	429a      	cmp	r2, r3
    a70e:	d306      	bcc.n	a71e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c8a>
    a710:	1a51      	subs	r1, r2, r1
    a712:	1e89      	subs	r1, r1, #2
    a714:	040c      	lsls	r4, r1, #16
    a716:	0c24      	lsrs	r4, r4, #16
    a718:	d001      	beq.n	a71e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c8a>
    a71a:	1e64      	subs	r4, r4, #1
    a71c:	b2a4      	uxth	r4, r4
    a71e:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
    a722:	b139      	cbz	r1, a734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca0>
    a724:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    a728:	2301      	movs	r3, #1
    a72a:	2109      	movs	r1, #9
    a72c:	3068      	adds	r0, #104	; 0x68
    a72e:	f003 f847 	bl	d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a732:	b330      	cbz	r0, a782 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cee>
    a734:	f7ff ff0c 	bl	a550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1abc>
    a738:	b168      	cbz	r0, a756 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc2>
    a73a:	68a9      	ldr	r1, [r5, #8]
    a73c:	2000      	movs	r0, #0
    a73e:	3190      	adds	r1, #144	; 0x90
    a740:	c906      	ldmia	r1, {r1, r2}
    a742:	1c8b      	adds	r3, r1, #2
    a744:	429a      	cmp	r2, r3
    a746:	d303      	bcc.n	a750 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cbc>
    a748:	1a50      	subs	r0, r2, r1
    a74a:	1e80      	subs	r0, r0, #2
    a74c:	d000      	beq.n	a750 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cbc>
    a74e:	1e40      	subs	r0, r0, #1
    a750:	42a0      	cmp	r0, r4
    a752:	d200      	bcs.n	a756 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc2>
    a754:	b284      	uxth	r4, r0
    a756:	b10c      	cbz	r4, a75c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc8>
    a758:	1e64      	subs	r4, r4, #1
    a75a:	b2a4      	uxth	r4, r4
    a75c:	68a8      	ldr	r0, [r5, #8]
    a75e:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	; 0xf4
    a762:	4421      	add	r1, r4
    a764:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
    a768:	bd70      	pop	{r4, r5, r6, pc}
    a76a:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    a76e:	2903      	cmp	r1, #3
    a770:	d3bf      	bcc.n	a6f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c5e>
    a772:	f830 1f6c 	ldrh.w	r1, [r0, #108]!
    a776:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    a778:	4411      	add	r1, r2
    a77a:	1c49      	adds	r1, r1, #1
    a77c:	f8a0 1084 	strh.w	r1, [r0, #132]	; 0x84
    a780:	bd70      	pop	{r4, r5, r6, pc}
    a782:	2400      	movs	r4, #0
    a784:	e7ea      	b.n	a75c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc8>
    a786:	0000      	.short	0x0000
    a788:	2000012c 	.word	0x2000012c

0000a78c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    a78c:	4901      	ldr	r1, [pc, #4]	; (a794 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    a78e:	7008      	strb	r0, [r1, #0]
    a790:	4770      	bx	lr
    a792:	0000      	.short	0x0000
    a794:	200002ab 	.word	0x200002ab

0000a798 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    a798:	4801      	ldr	r0, [pc, #4]	; (a7a0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    a79a:	7800      	ldrb	r0, [r0, #0]
    a79c:	f7f9 beda 	b.w	4554 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a7a0:	200002ab 	.word	0x200002ab

0000a7a4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    a7a4:	4903      	ldr	r1, [pc, #12]	; (a7b4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    a7a6:	888a      	ldrh	r2, [r1, #4]
    a7a8:	8002      	strh	r2, [r0, #0]
    a7aa:	7889      	ldrb	r1, [r1, #2]
    a7ac:	7081      	strb	r1, [r0, #2]
    a7ae:	2000      	movs	r0, #0
    a7b0:	4770      	bx	lr
    a7b2:	0000      	.short	0x0000
    a7b4:	20000ee8 	.word	0x20000ee8

0000a7b8 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    a7b8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a7ba:	460c      	mov	r4, r1
    a7bc:	4605      	mov	r5, r0
    a7be:	8800      	ldrh	r0, [r0, #0]
    a7c0:	4669      	mov	r1, sp
    a7c2:	f002 ffd3 	bl	d76c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a7c6:	2200      	movs	r2, #0
    a7c8:	b128      	cbz	r0, a7d6 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    a7ca:	f8c4 2002 	str.w	r2, [r4, #2]
    a7ce:	71a2      	strb	r2, [r4, #6]
    a7d0:	8022      	strh	r2, [r4, #0]
    a7d2:	2002      	movs	r0, #2
    a7d4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a7d6:	9901      	ldr	r1, [sp, #4]
    a7d8:	f111 0168 	adds.w	r1, r1, #104	; 0x68
    a7dc:	f881 204e 	strb.w	r2, [r1, #78]	; 0x4e
    a7e0:	f8d1 0016 	ldr.w	r0, [r1, #22]
    a7e4:	f8c4 0002 	str.w	r0, [r4, #2]
    a7e8:	7e88      	ldrb	r0, [r1, #26]
    a7ea:	71a0      	strb	r0, [r4, #6]
    a7ec:	8828      	ldrh	r0, [r5, #0]
    a7ee:	8020      	strh	r0, [r4, #0]
    a7f0:	f891 004e 	ldrb.w	r0, [r1, #78]	; 0x4e
    a7f4:	2800      	cmp	r0, #0
    a7f6:	d1f1      	bne.n	a7dc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    a7f8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
	...

0000a7fc <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    a7fc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a800:	460d      	mov	r5, r1
    a802:	4606      	mov	r6, r0
    a804:	f000 fb90 	bl	af28 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a808:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a80c:	b1e0      	cbz	r0, a848 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x4c>
    a80e:	8830      	ldrh	r0, [r6, #0]
    a810:	4669      	mov	r1, sp
    a812:	f002 ffab 	bl	d76c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a816:	2800      	cmp	r0, #0
    a818:	d114      	bne.n	a844 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    a81a:	f8dd 4004 	ldr.w	r4, [sp, #4]
    a81e:	2700      	movs	r7, #0
    a820:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    a824:	f814 0f62 	ldrb.w	r0, [r4, #98]!
    a828:	f004 fffb 	bl	f822 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    a82c:	70a8      	strb	r0, [r5, #2]
    a82e:	7860      	ldrb	r0, [r4, #1]
    a830:	f004 fff7 	bl	f822 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    a834:	70e8      	strb	r0, [r5, #3]
    a836:	78a0      	ldrb	r0, [r4, #2]
    a838:	3c62      	subs	r4, #98	; 0x62
    a83a:	2800      	cmp	r0, #0
    a83c:	d1f0      	bne.n	a820 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x24>
    a83e:	8830      	ldrh	r0, [r6, #0]
    a840:	8028      	strh	r0, [r5, #0]
    a842:	2000      	movs	r0, #0
    a844:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a848:	2001      	movs	r0, #1
    a84a:	e7fb      	b.n	a844 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>

0000a84c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    a84c:	b51c      	push	{r2, r3, r4, lr}
    a84e:	8800      	ldrh	r0, [r0, #0]
    a850:	4669      	mov	r1, sp
    a852:	f002 ff8b 	bl	d76c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a856:	2800      	cmp	r0, #0
    a858:	d10b      	bne.n	a872 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x26>
    a85a:	480b      	ldr	r0, [pc, #44]	; (a888 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3c>)
    a85c:	7800      	ldrb	r0, [r0, #0]
    a85e:	b188      	cbz	r0, a884 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
    a860:	9801      	ldr	r0, [sp, #4]
    a862:	f005 f95c 	bl	fb1e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    a866:	b128      	cbz	r0, a874 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    a868:	9801      	ldr	r0, [sp, #4]
    a86a:	f890 01ad 	ldrb.w	r0, [r0, #429]	; 0x1ad
    a86e:	b118      	cbz	r0, a878 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    a870:	203a      	movs	r0, #58	; 0x3a
    a872:	bd1c      	pop	{r2, r3, r4, pc}
    a874:	2002      	movs	r0, #2
    a876:	bd1c      	pop	{r2, r3, r4, pc}
    a878:	9901      	ldr	r1, [sp, #4]
    a87a:	2001      	movs	r0, #1
    a87c:	f881 01ad 	strb.w	r0, [r1, #429]	; 0x1ad
    a880:	2000      	movs	r0, #0
    a882:	bd1c      	pop	{r2, r3, r4, pc}
    a884:	2011      	movs	r0, #17
    a886:	bd1c      	pop	{r2, r3, r4, pc}
    a888:	20000208 	.word	0x20000208

0000a88c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    a88c:	b510      	push	{r4, lr}
    a88e:	4604      	mov	r4, r0
    a890:	f005 f93c 	bl	fb0c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    a894:	b130      	cbz	r0, a8a4 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    a896:	4804      	ldr	r0, [pc, #16]	; (a8a8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    a898:	8881      	ldrh	r1, [r0, #4]
    a89a:	8021      	strh	r1, [r4, #0]
    a89c:	88c0      	ldrh	r0, [r0, #6]
    a89e:	8060      	strh	r0, [r4, #2]
    a8a0:	2000      	movs	r0, #0
    a8a2:	bd10      	pop	{r4, pc}
    a8a4:	2001      	movs	r0, #1
    a8a6:	bd10      	pop	{r4, pc}
    a8a8:	20000210 	.word	0x20000210

0000a8ac <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    a8ac:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a8ae:	4605      	mov	r5, r0
    a8b0:	f000 fb3a 	bl	af28 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a8b4:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a8b8:	b310      	cbz	r0, a900 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    a8ba:	2400      	movs	r4, #0
    a8bc:	a802      	add	r0, sp, #8
    a8be:	f88d 4004 	strb.w	r4, [sp, #4]
    a8c2:	f88d 4008 	strb.w	r4, [sp, #8]
    a8c6:	9000      	str	r0, [sp, #0]
    a8c8:	78aa      	ldrb	r2, [r5, #2]
    a8ca:	7869      	ldrb	r1, [r5, #1]
    a8cc:	7828      	ldrb	r0, [r5, #0]
    a8ce:	ab01      	add	r3, sp, #4
    a8d0:	f005 f977 	bl	fbc2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d8>
    a8d4:	2800      	cmp	r0, #0
    a8d6:	d112      	bne.n	a8fe <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    a8d8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a8dc:	f005 f877 	bl	f9ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e4>
    a8e0:	b180      	cbz	r0, a904 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a8e2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a8e6:	f005 f872 	bl	f9ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e4>
    a8ea:	b158      	cbz	r0, a904 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a8ec:	4806      	ldr	r0, [pc, #24]	; (a908 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    a8ee:	f89d 1004 	ldrb.w	r1, [sp, #4]
    a8f2:	7481      	strb	r1, [r0, #18]
    a8f4:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a8f8:	74c1      	strb	r1, [r0, #19]
    a8fa:	8284      	strh	r4, [r0, #20]
    a8fc:	2000      	movs	r0, #0
    a8fe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a900:	2001      	movs	r0, #1
    a902:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a904:	2011      	movs	r0, #17
    a906:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a908:	20000ee8 	.word	0x20000ee8

0000a90c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    a90c:	7801      	ldrb	r1, [r0, #0]
    a90e:	b179      	cbz	r1, a930 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    a910:	7841      	ldrb	r1, [r0, #1]
    a912:	b169      	cbz	r1, a930 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    a914:	8841      	ldrh	r1, [r0, #2]
    a916:	291b      	cmp	r1, #27
    a918:	d30a      	bcc.n	a930 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    a91a:	8881      	ldrh	r1, [r0, #4]
    a91c:	291b      	cmp	r1, #27
    a91e:	d307      	bcc.n	a930 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    a920:	4904      	ldr	r1, [pc, #16]	; (a934 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    a922:	6802      	ldr	r2, [r0, #0]
    a924:	f8c1 2002 	str.w	r2, [r1, #2]
    a928:	8880      	ldrh	r0, [r0, #4]
    a92a:	80c8      	strh	r0, [r1, #6]
    a92c:	2000      	movs	r0, #0
    a92e:	4770      	bx	lr
    a930:	2012      	movs	r0, #18
    a932:	4770      	bx	lr
    a934:	20000ee8 	.word	0x20000ee8

0000a938 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    a938:	6800      	ldr	r0, [r0, #0]
    a93a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    a93e:	4288      	cmp	r0, r1
    a940:	d303      	bcc.n	a94a <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    a942:	4903      	ldr	r1, [pc, #12]	; (a950 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    a944:	6088      	str	r0, [r1, #8]
    a946:	2000      	movs	r0, #0
    a948:	4770      	bx	lr
    a94a:	2012      	movs	r0, #18
    a94c:	4770      	bx	lr
    a94e:	0000      	.short	0x0000
    a950:	20000ee8 	.word	0x20000ee8

0000a954 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    a954:	4a03      	ldr	r2, [pc, #12]	; (a964 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    a956:	e9d2 1200 	ldrd	r1, r2, [r2]
    a95a:	6001      	str	r1, [r0, #0]
    a95c:	6042      	str	r2, [r0, #4]
    a95e:	2000      	movs	r0, #0
    a960:	4770      	bx	lr
    a962:	0000      	.short	0x0000
    a964:	0000adc8 	.word	0x0000adc8

0000a968 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    a968:	b510      	push	{r4, lr}
    a96a:	2005      	movs	r0, #5
    a96c:	f000 fad2 	bl	af14 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    a970:	f7fd feb4 	bl	86dc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    a974:	4902      	ldr	r1, [pc, #8]	; (a980 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    a976:	4801      	ldr	r0, [pc, #4]	; (a97c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    a978:	6048      	str	r0, [r1, #4]
    a97a:	bd10      	pop	{r4, pc}
    a97c:	0000aa09 	.word	0x0000aa09
    a980:	20000208 	.word	0x20000208

0000a984 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    a984:	b510      	push	{r4, lr}
    a986:	f002 fe45 	bl	d614 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    a98a:	f7fb fc55 	bl	6238 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    a98e:	480f      	ldr	r0, [pc, #60]	; (a9cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x48>)
    a990:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a994:	4b0e      	ldr	r3, [pc, #56]	; (a9d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>)
    a996:	81c1      	strh	r1, [r0, #14]
    a998:	8201      	strh	r1, [r0, #16]
    a99a:	2100      	movs	r1, #0
    a99c:	75c1      	strb	r1, [r0, #23]
    a99e:	8301      	strh	r1, [r0, #24]
    a9a0:	8001      	strh	r1, [r0, #0]
    a9a2:	221b      	movs	r2, #27
    a9a4:	801a      	strh	r2, [r3, #0]
    a9a6:	f44f 74a4 	mov.w	r4, #328	; 0x148
    a9aa:	805c      	strh	r4, [r3, #2]
    a9ac:	809a      	strh	r2, [r3, #4]
    a9ae:	80dc      	strh	r4, [r3, #6]
    a9b0:	7481      	strb	r1, [r0, #18]
    a9b2:	74c1      	strb	r1, [r0, #19]
    a9b4:	2303      	movs	r3, #3
    a9b6:	7083      	strb	r3, [r0, #2]
    a9b8:	2302      	movs	r3, #2
    a9ba:	70c3      	strb	r3, [r0, #3]
    a9bc:	8082      	strh	r2, [r0, #4]
    a9be:	80c2      	strh	r2, [r0, #6]
    a9c0:	f640 62a6 	movw	r2, #3750	; 0xea6
    a9c4:	6082      	str	r2, [r0, #8]
    a9c6:	7581      	strb	r1, [r0, #22]
    a9c8:	7301      	strb	r1, [r0, #12]
    a9ca:	bd10      	pop	{r4, pc}
    a9cc:	20000ee8 	.word	0x20000ee8
    a9d0:	20000210 	.word	0x20000210

0000a9d4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    a9d4:	b510      	push	{r4, lr}
    a9d6:	b158      	cbz	r0, a9f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c>
    a9d8:	490a      	ldr	r1, [pc, #40]	; (aa04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>)
    a9da:	780a      	ldrb	r2, [r1, #0]
    a9dc:	b16a      	cbz	r2, a9fa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26>
    a9de:	2200      	movs	r2, #0
    a9e0:	7042      	strb	r2, [r0, #1]
    a9e2:	2303      	movs	r3, #3
    a9e4:	7003      	strb	r3, [r0, #0]
    a9e6:	2301      	movs	r3, #1
    a9e8:	7103      	strb	r3, [r0, #4]
    a9ea:	700a      	strb	r2, [r1, #0]
    a9ec:	4618      	mov	r0, r3
    a9ee:	bd10      	pop	{r4, pc}
    a9f0:	f44f 51be 	mov.w	r1, #6080	; 0x17c0
    a9f4:	2039      	movs	r0, #57	; 0x39
    a9f6:	f7f9 ff73 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a9fe:	f7fb bf97 	b.w	6930 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    aa02:	0000      	.short	0x0000
    aa04:	20000ee8 	.word	0x20000ee8
    aa08:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa0c:	4692      	mov	sl, r2
    aa0e:	460f      	mov	r7, r1
    aa10:	4681      	mov	r9, r0
    aa12:	f005 f87b 	bl	fb0c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    aa16:	2800      	cmp	r0, #0
    aa18:	d063      	beq.n	aae2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    aa1a:	4933      	ldr	r1, [pc, #204]	; (aae8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>)
    aa1c:	f8b9 204c 	ldrh.w	r2, [r9, #76]	; 0x4c
    aa20:	f8b9 604a 	ldrh.w	r6, [r9, #74]	; 0x4a
    aa24:	8808      	ldrh	r0, [r1, #0]
    aa26:	4290      	cmp	r0, r2
    aa28:	d300      	bcc.n	aa2c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    aa2a:	4610      	mov	r0, r2
    aa2c:	4680      	mov	r8, r0
    aa2e:	8888      	ldrh	r0, [r1, #4]
    aa30:	42b0      	cmp	r0, r6
    aa32:	d200      	bcs.n	aa36 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    aa34:	4606      	mov	r6, r0
    aa36:	884c      	ldrh	r4, [r1, #2]
    aa38:	f640 0048 	movw	r0, #2120	; 0x848
    aa3c:	4284      	cmp	r4, r0
    aa3e:	d300      	bcc.n	aa42 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6e>
    aa40:	4604      	mov	r4, r0
    aa42:	88cd      	ldrh	r5, [r1, #6]
    aa44:	4285      	cmp	r5, r0
    aa46:	d300      	bcc.n	aa4a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x76>
    aa48:	4605      	mov	r5, r0
    aa4a:	4284      	cmp	r4, r0
    aa4c:	d300      	bcc.n	aa50 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7c>
    aa4e:	4604      	mov	r4, r0
    aa50:	f44f 71a4 	mov.w	r1, #328	; 0x148
    aa54:	2e1b      	cmp	r6, #27
    aa56:	d001      	beq.n	aa5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    aa58:	428d      	cmp	r5, r1
    aa5a:	d104      	bne.n	aa66 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x92>
    aa5c:	f1b8 0f1b 	cmp.w	r8, #27
    aa60:	d03f      	beq.n	aae2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    aa62:	428c      	cmp	r4, r1
    aa64:	d03d      	beq.n	aae2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    aa66:	466a      	mov	r2, sp
    aa68:	4651      	mov	r1, sl
    aa6a:	4648      	mov	r0, r9
    aa6c:	f004 ffd2 	bl	fa14 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22a>
    aa70:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    aa74:	4641      	mov	r1, r8
    aa76:	4540      	cmp	r0, r8
    aa78:	d900      	bls.n	aa7c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    aa7a:	4608      	mov	r0, r1
    aa7c:	80f8      	strh	r0, [r7, #6]
    aa7e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    aa82:	42a1      	cmp	r1, r4
    aa84:	d800      	bhi.n	aa88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>
    aa86:	460c      	mov	r4, r1
    aa88:	813c      	strh	r4, [r7, #8]
    aa8a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    aa8e:	42b1      	cmp	r1, r6
    aa90:	d800      	bhi.n	aa94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    aa92:	460e      	mov	r6, r1
    aa94:	807e      	strh	r6, [r7, #2]
    aa96:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    aa9a:	42a9      	cmp	r1, r5
    aa9c:	d900      	bls.n	aaa0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    aa9e:	4629      	mov	r1, r5
    aaa0:	80b9      	strh	r1, [r7, #4]
    aaa2:	2201      	movs	r2, #1
    aaa4:	703a      	strb	r2, [r7, #0]
    aaa6:	381b      	subs	r0, #27
    aaa8:	28e0      	cmp	r0, #224	; 0xe0
    aaaa:	d902      	bls.n	aab2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xde>
    aaac:	f640 419b 	movw	r1, #3227	; 0xc9b
    aab0:	e014      	b.n	aadc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    aab2:	3e1b      	subs	r6, #27
    aab4:	2ee0      	cmp	r6, #224	; 0xe0
    aab6:	d902      	bls.n	aabe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    aab8:	f640 419d 	movw	r1, #3229	; 0xc9d
    aabc:	e00e      	b.n	aadc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    aabe:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    aac2:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    aac6:	4284      	cmp	r4, r0
    aac8:	d902      	bls.n	aad0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfc>
    aaca:	f640 419f 	movw	r1, #3231	; 0xc9f
    aace:	e005      	b.n	aadc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    aad0:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    aad4:	4281      	cmp	r1, r0
    aad6:	d904      	bls.n	aae2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    aad8:	f640 41a1 	movw	r1, #3233	; 0xca1
    aadc:	2039      	movs	r0, #57	; 0x39
    aade:	f7f9 feff 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aae2:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aae6:	0000      	.short	0x0000
    aae8:	20000210 	.word	0x20000210

0000aaec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    aaec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aaf0:	b088      	sub	sp, #32
    aaf2:	460c      	mov	r4, r1
    aaf4:	4606      	mov	r6, r0
    aaf6:	f003 fc4a 	bl	e38e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    aafa:	b198      	cbz	r0, ab24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    aafc:	4630      	mov	r0, r6
    aafe:	f003 fc39 	bl	e374 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    ab02:	b130      	cbz	r0, ab12 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    ab04:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    ab08:	2012      	movs	r0, #18
    ab0a:	2900      	cmp	r1, #0
    ab0c:	d00b      	beq.n	ab26 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ab0e:	2980      	cmp	r1, #128	; 0x80
    ab10:	d809      	bhi.n	ab26 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ab12:	4630      	mov	r0, r6
    ab14:	f003 fc19 	bl	e34a <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    ab18:	b140      	cbz	r0, ab2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    ab1a:	4630      	mov	r0, r6
    ab1c:	f003 fba0 	bl	e260 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    ab20:	b130      	cbz	r0, ab30 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    ab22:	e009      	b.n	ab38 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    ab24:	2042      	movs	r0, #66	; 0x42
    ab26:	b008      	add	sp, #32
    ab28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ab2c:	200c      	movs	r0, #12
    ab2e:	e7fa      	b.n	ab26 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ab30:	4630      	mov	r0, r6
    ab32:	f003 fc19 	bl	e368 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    ab36:	b3a8      	cbz	r0, aba4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    ab38:	4630      	mov	r0, r6
    ab3a:	f003 fe2c 	bl	e796 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    ab3e:	2800      	cmp	r0, #0
    ab40:	d1f4      	bne.n	ab2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    ab42:	4630      	mov	r0, r6
    ab44:	f003 fba7 	bl	e296 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    ab48:	2800      	cmp	r0, #0
    ab4a:	d1ef      	bne.n	ab2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    ab4c:	4630      	mov	r0, r6
    ab4e:	f7fc f90d 	bl	6d6c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    ab52:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    ab56:	f242 7110 	movw	r1, #10000	; 0x2710
    ab5a:	fb00 f801 	mul.w	r8, r0, r1
    ab5e:	78e1      	ldrb	r1, [r4, #3]
    ab60:	4630      	mov	r0, r6
    ab62:	f003 fbe9 	bl	e338 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    ab66:	4630      	mov	r0, r6
    ab68:	f003 fc00 	bl	e36c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    ab6c:	b1e8      	cbz	r0, abaa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    ab6e:	2200      	movs	r2, #0
    ab70:	4611      	mov	r1, r2
    ab72:	a801      	add	r0, sp, #4
    ab74:	f7fa f92c 	bl	4dd0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    ab78:	0004      	movs	r4, r0
    ab7a:	d06a      	beq.n	ac52 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    ab7c:	2100      	movs	r1, #0
    ab7e:	f7fb fdc1 	bl	6704 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    ab82:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    ab86:	8020      	strh	r0, [r4, #0]
    ab88:	4621      	mov	r1, r4
    ab8a:	4630      	mov	r0, r6
    ab8c:	f003 fc12 	bl	e3b4 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    ab90:	f004 ffbc 	bl	fb0c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    ab94:	4d3a      	ldr	r5, [pc, #232]	; (ac80 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    ab96:	2800      	cmp	r0, #0
    ab98:	f104 0024 	add.w	r0, r4, #36	; 0x24
    ab9c:	d00f      	beq.n	abbe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    ab9e:	88aa      	ldrh	r2, [r5, #4]
    aba0:	88e9      	ldrh	r1, [r5, #6]
    aba2:	e00e      	b.n	abc2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    aba4:	e7ff      	b.n	aba6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    aba6:	2012      	movs	r0, #18
    aba8:	e7bd      	b.n	ab26 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    abaa:	4642      	mov	r2, r8
    abac:	2100      	movs	r1, #0
    abae:	4630      	mov	r0, r6
    abb0:	f7fc fffc 	bl	7bac <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    abb4:	2800      	cmp	r0, #0
    abb6:	d0b6      	beq.n	ab26 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    abb8:	f241 31fd 	movw	r1, #5117	; 0x13fd
    abbc:	e053      	b.n	ac66 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    abbe:	221b      	movs	r2, #27
    abc0:	4611      	mov	r1, r2
    abc2:	84c2      	strh	r2, [r0, #38]	; 0x26
    abc4:	8501      	strh	r1, [r0, #40]	; 0x28
    abc6:	68a8      	ldr	r0, [r5, #8]
    abc8:	6260      	str	r0, [r4, #36]	; 0x24
    abca:	f641 574c 	movw	r7, #7500	; 0x1d4c
    abce:	4630      	mov	r0, r6
    abd0:	f003 fbd4 	bl	e37c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    abd4:	b910      	cbnz	r0, abdc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    abd6:	4630      	mov	r0, r6
    abd8:	f003 fbea 	bl	e3b0 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    abdc:	6067      	str	r7, [r4, #4]
    abde:	8821      	ldrh	r1, [r4, #0]
    abe0:	f8ad 1008 	strh.w	r1, [sp, #8]
    abe4:	7ca9      	ldrb	r1, [r5, #18]
    abe6:	f88d 100a 	strb.w	r1, [sp, #10]
    abea:	7ce9      	ldrb	r1, [r5, #19]
    abec:	f88d 100b 	strb.w	r1, [sp, #11]
    abf0:	8aa9      	ldrh	r1, [r5, #20]
    abf2:	f8ad 100c 	strh.w	r1, [sp, #12]
    abf6:	a905      	add	r1, sp, #20
    abf8:	9100      	str	r1, [sp, #0]
    abfa:	2001      	movs	r0, #1
    abfc:	ab04      	add	r3, sp, #16
    abfe:	aa02      	add	r2, sp, #8
    ac00:	4621      	mov	r1, r4
    ac02:	f004 ff44 	bl	fa8e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a4>
    ac06:	b140      	cbz	r0, ac1a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    ac08:	2100      	movs	r1, #0
    ac0a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    ac0e:	f7fa f909 	bl	4e24 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ac12:	b1f0      	cbz	r0, ac52 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    ac14:	f241 4148 	movw	r1, #5192	; 0x1448
    ac18:	e025      	b.n	ac66 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    ac1a:	f89d 0010 	ldrb.w	r0, [sp, #16]
    ac1e:	f88d 0018 	strb.w	r0, [sp, #24]
    ac22:	f89d 0014 	ldrb.w	r0, [sp, #20]
    ac26:	f88d 0019 	strb.w	r0, [sp, #25]
    ac2a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    ac2e:	f8ad 001a 	strh.w	r0, [sp, #26]
    ac32:	a906      	add	r1, sp, #24
    ac34:	4620      	mov	r0, r4
    ac36:	f002 fe58 	bl	d8ea <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    ac3a:	78e8      	ldrb	r0, [r5, #3]
    ac3c:	9000      	str	r0, [sp, #0]
    ac3e:	78ab      	ldrb	r3, [r5, #2]
    ac40:	88ea      	ldrh	r2, [r5, #6]
    ac42:	88a9      	ldrh	r1, [r5, #4]
    ac44:	8820      	ldrh	r0, [r4, #0]
    ac46:	f7fa f9b9 	bl	4fbc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    ac4a:	b120      	cbz	r0, ac56 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    ac4c:	f241 4153 	movw	r1, #5203	; 0x1453
    ac50:	e009      	b.n	ac66 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    ac52:	2009      	movs	r0, #9
    ac54:	e767      	b.n	ab26 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ac56:	4642      	mov	r2, r8
    ac58:	4621      	mov	r1, r4
    ac5a:	4630      	mov	r0, r6
    ac5c:	f7fc ffa6 	bl	7bac <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    ac60:	b120      	cbz	r0, ac6c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    ac62:	f241 4155 	movw	r1, #5205	; 0x1455
    ac66:	2039      	movs	r0, #57	; 0x39
    ac68:	f7f9 fe3a 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac6c:	4805      	ldr	r0, [pc, #20]	; (ac84 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    ac6e:	6843      	ldr	r3, [r0, #4]
    ac70:	b123      	cbz	r3, ac7c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    ac72:	2200      	movs	r2, #0
    ac74:	f504 71ce 	add.w	r1, r4, #412	; 0x19c
    ac78:	4620      	mov	r0, r4
    ac7a:	4798      	blx	r3
    ac7c:	2000      	movs	r0, #0
    ac7e:	e752      	b.n	ab26 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ac80:	20000ee8 	.word	0x20000ee8
    ac84:	20000208 	.word	0x20000208
    ac88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac8c:	b088      	sub	sp, #32
    ac8e:	4604      	mov	r4, r0
    ac90:	8800      	ldrh	r0, [r0, #0]
    ac92:	a906      	add	r1, sp, #24
    ac94:	f002 fd6a 	bl	d76c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ac98:	2800      	cmp	r0, #0
    ac9a:	d147      	bne.n	ad2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    ac9c:	9807      	ldr	r0, [sp, #28]
    ac9e:	2700      	movs	r7, #0
    aca0:	f890 11e0 	ldrb.w	r1, [r0, #480]	; 0x1e0
    aca4:	f88d 1008 	strb.w	r1, [sp, #8]
    aca8:	9902      	ldr	r1, [sp, #8]
    acaa:	9102      	str	r1, [sp, #8]
    acac:	f89d 1008 	ldrb.w	r1, [sp, #8]
    acb0:	f88d 100c 	strb.w	r1, [sp, #12]
    acb4:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    acb8:	3068      	adds	r0, #104	; 0x68
    acba:	0689      	lsls	r1, r1, #26
    acbc:	d502      	bpl.n	acc4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d8>
    acbe:	f89d 100c 	ldrb.w	r1, [sp, #12]
    acc2:	b149      	cbz	r1, acd8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    acc4:	f05f 0100 	movs.w	r1, #0
    acc8:	f88d 1004 	strb.w	r1, [sp, #4]
    accc:	2105      	movs	r1, #5
    acce:	304c      	adds	r0, #76	; 0x4c
    acd0:	f004 f868 	bl	eda4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    acd4:	b110      	cbz	r0, acdc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f0>
    acd6:	e004      	b.n	ace2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f6>
    acd8:	2101      	movs	r1, #1
    acda:	e7f5      	b.n	acc8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>
    acdc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ace0:	b318      	cbz	r0, ad2a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x23e>
    ace2:	8921      	ldrh	r1, [r4, #8]
    ace4:	88e0      	ldrh	r0, [r4, #6]
    ace6:	f004 fe87 	bl	f9f8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    acea:	2800      	cmp	r0, #0
    acec:	d11e      	bne.n	ad2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    acee:	88a1      	ldrh	r1, [r4, #4]
    acf0:	8860      	ldrh	r0, [r4, #2]
    acf2:	f004 fe81 	bl	f9f8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    acf6:	2800      	cmp	r0, #0
    acf8:	d118      	bne.n	ad2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    acfa:	8921      	ldrh	r1, [r4, #8]
    acfc:	88e0      	ldrh	r0, [r4, #6]
    acfe:	f004 fe71 	bl	f9e4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    ad02:	2800      	cmp	r0, #0
    ad04:	d112      	bne.n	ad2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    ad06:	88a1      	ldrh	r1, [r4, #4]
    ad08:	8860      	ldrh	r0, [r4, #2]
    ad0a:	f004 fe6b 	bl	f9e4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    ad0e:	0006      	movs	r6, r0
    ad10:	d10c      	bne.n	ad2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    ad12:	9807      	ldr	r0, [sp, #28]
    ad14:	f04f 0801 	mov.w	r8, #1
    ad18:	f500 75ce 	add.w	r5, r0, #412	; 0x19c
    ad1c:	f880 819d 	strb.w	r8, [r0, #413]	; 0x19d
    ad20:	f89d 100c 	ldrb.w	r1, [sp, #12]
    ad24:	b129      	cbz	r1, ad32 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    ad26:	263a      	movs	r6, #58	; 0x3a
    ad28:	e02f      	b.n	ad8a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29e>
    ad2a:	201a      	movs	r0, #26
    ad2c:	b008      	add	sp, #32
    ad2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ad32:	4639      	mov	r1, r7
    ad34:	aa03      	add	r2, sp, #12
    ad36:	f004 fe6d 	bl	fa14 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22a>
    ad3a:	8861      	ldrh	r1, [r4, #2]
    ad3c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    ad40:	4281      	cmp	r1, r0
    ad42:	d200      	bcs.n	ad46 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x25a>
    ad44:	4608      	mov	r0, r1
    ad46:	80e8      	strh	r0, [r5, #6]
    ad48:	88a1      	ldrh	r1, [r4, #4]
    ad4a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    ad4e:	4281      	cmp	r1, r0
    ad50:	d200      	bcs.n	ad54 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x268>
    ad52:	4608      	mov	r0, r1
    ad54:	8128      	strh	r0, [r5, #8]
    ad56:	88e2      	ldrh	r2, [r4, #6]
    ad58:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    ad5c:	428a      	cmp	r2, r1
    ad5e:	d200      	bcs.n	ad62 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x276>
    ad60:	4611      	mov	r1, r2
    ad62:	8069      	strh	r1, [r5, #2]
    ad64:	8922      	ldrh	r2, [r4, #8]
    ad66:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    ad6a:	428a      	cmp	r2, r1
    ad6c:	d200      	bcs.n	ad70 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x284>
    ad6e:	4611      	mov	r1, r2
    ad70:	f640 0248 	movw	r2, #2120	; 0x848
    ad74:	80a9      	strh	r1, [r5, #4]
    ad76:	4291      	cmp	r1, r2
    ad78:	d300      	bcc.n	ad7c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x290>
    ad7a:	4611      	mov	r1, r2
    ad7c:	80a9      	strh	r1, [r5, #4]
    ad7e:	4290      	cmp	r0, r2
    ad80:	d200      	bcs.n	ad84 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    ad82:	4602      	mov	r2, r0
    ad84:	812a      	strh	r2, [r5, #8]
    ad86:	f885 8000 	strb.w	r8, [r5]
    ad8a:	706f      	strb	r7, [r5, #1]
    ad8c:	4630      	mov	r0, r6
    ad8e:	e7cd      	b.n	ad2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    ad90:	b510      	push	{r4, lr}
    ad92:	4604      	mov	r4, r0
    ad94:	88c1      	ldrh	r1, [r0, #6]
    ad96:	8880      	ldrh	r0, [r0, #4]
    ad98:	f004 fe2e 	bl	f9f8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    ad9c:	2800      	cmp	r0, #0
    ad9e:	d10f      	bne.n	adc0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    ada0:	8861      	ldrh	r1, [r4, #2]
    ada2:	8820      	ldrh	r0, [r4, #0]
    ada4:	f004 fe28 	bl	f9f8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    ada8:	2800      	cmp	r0, #0
    adaa:	d109      	bne.n	adc0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    adac:	4805      	ldr	r0, [pc, #20]	; (adc4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d8>)
    adae:	88a1      	ldrh	r1, [r4, #4]
    adb0:	8081      	strh	r1, [r0, #4]
    adb2:	8821      	ldrh	r1, [r4, #0]
    adb4:	8001      	strh	r1, [r0, #0]
    adb6:	88e1      	ldrh	r1, [r4, #6]
    adb8:	80c1      	strh	r1, [r0, #6]
    adba:	8861      	ldrh	r1, [r4, #2]
    adbc:	8041      	strh	r1, [r0, #2]
    adbe:	2000      	movs	r0, #0
    adc0:	bd10      	pop	{r4, pc}
    adc2:	0000      	.short	0x0000
    adc4:	20000210 	.word	0x20000210
    adc8:	0b125b0b 	.word	0x0b125b0b
    adcc:	125b0059 	.word	0x125b0059
    add0:	05060708 	.word	0x05060708
    add4:	00020304 	.word	0x00020304
    add8:	f0f4f8fc 	.word	0xf0f4f8fc
    addc:	0304d8ec 	.word	0x0304d8ec
    ade0:	f4f8fc00 	.word	0xf4f8fc00
    ade4:	00d8ecf0 	.word	0x00d8ecf0

0000ade8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    ade8:	b510      	push	{r4, lr}
    adea:	f7ff fccf 	bl	a78c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    adee:	4804      	ldr	r0, [pc, #16]	; (ae00 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    adf0:	6840      	ldr	r0, [r0, #4]
    adf2:	f004 ff5e 	bl	fcb2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    adf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    adfa:	f004 bc8f 	b.w	f71c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    adfe:	0000      	.short	0x0000
    ae00:	20000218 	.word	0x20000218

0000ae04 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    ae04:	b510      	push	{r4, lr}
    ae06:	4c07      	ldr	r4, [pc, #28]	; (ae24 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    ae08:	68a0      	ldr	r0, [r4, #8]
    ae0a:	f004 ff52 	bl	fcb2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    ae0e:	68e0      	ldr	r0, [r4, #12]
    ae10:	f004 ff4f 	bl	fcb2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    ae14:	f002 fbfe 	bl	d614 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    ae18:	f7fb fa0e 	bl	6238 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    ae1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ae20:	f7ff bdb0 	b.w	a984 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    ae24:	20000218 	.word	0x20000218

0000ae28 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    ae28:	b500      	push	{lr}
    ae2a:	4905      	ldr	r1, [pc, #20]	; (ae40 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    ae2c:	4805      	ldr	r0, [pc, #20]	; (ae44 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    ae2e:	f004 ff21 	bl	fc74 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    ae32:	4804      	ldr	r0, [pc, #16]	; (ae44 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    ae34:	4904      	ldr	r1, [pc, #16]	; (ae48 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    ae36:	1d00      	adds	r0, r0, #4
    ae38:	f85d eb04 	ldr.w	lr, [sp], #4
    ae3c:	f004 bf1a 	b.w	fc74 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    ae40:	20000228 	.word	0x20000228
    ae44:	2000021c 	.word	0x2000021c
    ae48:	20000230 	.word	0x20000230

0000ae4c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    ae4c:	b500      	push	{lr}
    ae4e:	4908      	ldr	r1, [pc, #32]	; (ae70 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    ae50:	4808      	ldr	r0, [pc, #32]	; (ae74 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    ae52:	f004 ff0f 	bl	fc74 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    ae56:	4807      	ldr	r0, [pc, #28]	; (ae74 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    ae58:	4907      	ldr	r1, [pc, #28]	; (ae78 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    ae5a:	1d00      	adds	r0, r0, #4
    ae5c:	f004 ff0a 	bl	fc74 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    ae60:	4804      	ldr	r0, [pc, #16]	; (ae74 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    ae62:	4906      	ldr	r1, [pc, #24]	; (ae7c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    ae64:	3008      	adds	r0, #8
    ae66:	f85d eb04 	ldr.w	lr, [sp], #4
    ae6a:	f004 bf03 	b.w	fc74 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    ae6e:	0000      	.short	0x0000
    ae70:	20000254 	.word	0x20000254
    ae74:	2000021c 	.word	0x2000021c
    ae78:	2000025c 	.word	0x2000025c
    ae7c:	2000024c 	.word	0x2000024c

0000ae80 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    ae80:	4801      	ldr	r0, [pc, #4]	; (ae88 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    ae82:	7800      	ldrb	r0, [r0, #0]
    ae84:	4770      	bx	lr
    ae86:	0000      	.short	0x0000
    ae88:	20000218 	.word	0x20000218
    ae8c:	b510      	push	{r4, lr}
    ae8e:	f7fc f8e3 	bl	7058 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    ae92:	f7fc ff23 	bl	7cdc <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>
    ae96:	4805      	ldr	r0, [pc, #20]	; (aeac <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x2c>)
    ae98:	f7fc f8c4 	bl	7024 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    ae9c:	4905      	ldr	r1, [pc, #20]	; (aeb4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x34>)
    ae9e:	4804      	ldr	r0, [pc, #16]	; (aeb0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x30>)
    aea0:	6008      	str	r0, [r1, #0]
    aea2:	4906      	ldr	r1, [pc, #24]	; (aebc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x3c>)
    aea4:	4804      	ldr	r0, [pc, #16]	; (aeb8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x38>)
    aea6:	6008      	str	r0, [r1, #0]
    aea8:	bd10      	pop	{r4, pc}
    aeaa:	0000      	.short	0x0000
    aeac:	200012b3 	.word	0x200012b3
    aeb0:	00006e2d 	.word	0x00006e2d
    aeb4:	20000238 	.word	0x20000238
    aeb8:	000069d1 	.word	0x000069d1
    aebc:	2000023c 	.word	0x2000023c
    aec0:	490c      	ldr	r1, [pc, #48]	; (aef4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x74>)
    aec2:	b510      	push	{r4, lr}
    aec4:	2001      	movs	r0, #1
    aec6:	7008      	strb	r0, [r1, #0]
    aec8:	f7fc f8f6 	bl	70b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    aecc:	f7fd fd5e 	bl	898c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    aed0:	f002 fb8e 	bl	d5f0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    aed4:	4808      	ldr	r0, [pc, #32]	; (aef8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x78>)
    aed6:	f7fa fc3d 	bl	5754 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    aeda:	2000      	movs	r0, #0
    aedc:	f7f9 feea 	bl	4cb4 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    aee0:	4907      	ldr	r1, [pc, #28]	; (af00 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x80>)
    aee2:	4806      	ldr	r0, [pc, #24]	; (aefc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x7c>)
    aee4:	6008      	str	r0, [r1, #0]
    aee6:	4908      	ldr	r1, [pc, #32]	; (af08 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x88>)
    aee8:	4806      	ldr	r0, [pc, #24]	; (af04 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x84>)
    aeea:	6008      	str	r0, [r1, #0]
    aeec:	4908      	ldr	r1, [pc, #32]	; (af10 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x90>)
    aeee:	4807      	ldr	r0, [pc, #28]	; (af0c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8c>)
    aef0:	6008      	str	r0, [r1, #0]
    aef2:	bd10      	pop	{r4, pc}
    aef4:	20000218 	.word	0x20000218
    aef8:	200012b3 	.word	0x200012b3
    aefc:	00005701 	.word	0x00005701
    af00:	20000248 	.word	0x20000248
    af04:	0000870d 	.word	0x0000870d
    af08:	20000244 	.word	0x20000244
    af0c:	00006a45 	.word	0x00006a45
    af10:	20000240 	.word	0x20000240

0000af14 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    af14:	2101      	movs	r1, #1
    af16:	4081      	lsls	r1, r0
    af18:	4802      	ldr	r0, [pc, #8]	; (af24 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    af1a:	6802      	ldr	r2, [r0, #0]
    af1c:	4311      	orrs	r1, r2
    af1e:	6001      	str	r1, [r0, #0]
    af20:	4770      	bx	lr
    af22:	0000      	.short	0x0000
    af24:	20000264 	.word	0x20000264

0000af28 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    af28:	4801      	ldr	r0, [pc, #4]	; (af30 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    af2a:	6800      	ldr	r0, [r0, #0]
    af2c:	4770      	bx	lr
    af2e:	0000      	.short	0x0000
    af30:	20000264 	.word	0x20000264

0000af34 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    af34:	4803      	ldr	r0, [pc, #12]	; (af44 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    af36:	8800      	ldrh	r0, [r0, #0]
    af38:	f3c0 2000 	ubfx	r0, r0, #8, #1
    af3c:	0040      	lsls	r0, r0, #1
    af3e:	1c40      	adds	r0, r0, #1
    af40:	4770      	bx	lr
    af42:	0000      	.short	0x0000
    af44:	20000264 	.word	0x20000264

0000af48 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    af48:	b570      	push	{r4, r5, r6, lr}
    af4a:	4605      	mov	r5, r0
    af4c:	4616      	mov	r6, r2
    af4e:	460c      	mov	r4, r1
    af50:	2002      	movs	r0, #2
    af52:	f000 f999 	bl	b288 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    af56:	4906      	ldr	r1, [pc, #24]	; (af70 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    af58:	2001      	movs	r0, #1
    af5a:	1ef6      	subs	r6, r6, #3
    af5c:	7008      	strb	r0, [r1, #0]
    af5e:	4805      	ldr	r0, [pc, #20]	; (af74 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    af60:	6006      	str	r6, [r0, #0]
    af62:	4804      	ldr	r0, [pc, #16]	; (af74 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    af64:	3808      	subs	r0, #8
    af66:	6005      	str	r5, [r0, #0]
    af68:	1f00      	subs	r0, r0, #4
    af6a:	6004      	str	r4, [r0, #0]
    af6c:	bd70      	pop	{r4, r5, r6, pc}
    af6e:	0000      	.short	0x0000
    af70:	200002ac 	.word	0x200002ac
    af74:	4000f510 	.word	0x4000f510

0000af78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    af78:	b510      	push	{r4, lr}
    af7a:	4c0c      	ldr	r4, [pc, #48]	; (afac <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    af7c:	7820      	ldrb	r0, [r4, #0]
    af7e:	b180      	cbz	r0, afa2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    af80:	490b      	ldr	r1, [pc, #44]	; (afb0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    af82:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    af86:	6008      	str	r0, [r1, #0]
    af88:	f000 f86a 	bl	b060 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    af8c:	2100      	movs	r1, #0
    af8e:	b120      	cbz	r0, af9a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    af90:	2001      	movs	r0, #1
    af92:	7060      	strb	r0, [r4, #1]
    af94:	4807      	ldr	r0, [pc, #28]	; (afb4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    af96:	6800      	ldr	r0, [r0, #0]
    af98:	e001      	b.n	af9e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    af9a:	7061      	strb	r1, [r4, #1]
    af9c:	2010      	movs	r0, #16
    af9e:	70a0      	strb	r0, [r4, #2]
    afa0:	7021      	strb	r1, [r4, #0]
    afa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    afa6:	2000      	movs	r0, #0
    afa8:	f000 b96e 	b.w	b288 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    afac:	200002ac 	.word	0x200002ac
    afb0:	4001f508 	.word	0x4001f508
    afb4:	4000f400 	.word	0x4000f400

0000afb8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    afb8:	b510      	push	{r4, lr}
    afba:	2002      	movs	r0, #2
    afbc:	f000 f964 	bl	b288 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    afc0:	4904      	ldr	r1, [pc, #16]	; (afd4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    afc2:	2001      	movs	r0, #1
    afc4:	7008      	strb	r0, [r1, #0]
    afc6:	f000 f859 	bl	b07c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    afca:	4903      	ldr	r1, [pc, #12]	; (afd8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    afcc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    afd0:	6008      	str	r0, [r1, #0]
    afd2:	bd10      	pop	{r4, pc}
    afd4:	200002ac 	.word	0x200002ac
    afd8:	4001f504 	.word	0x4001f504

0000afdc <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    afdc:	4803      	ldr	r0, [pc, #12]	; (afec <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    afde:	2100      	movs	r1, #0
    afe0:	7001      	strb	r1, [r0, #0]
    afe2:	7041      	strb	r1, [r0, #1]
    afe4:	2110      	movs	r1, #16
    afe6:	7081      	strb	r1, [r0, #2]
    afe8:	4770      	bx	lr
    afea:	0000      	.short	0x0000
    afec:	200002ac 	.word	0x200002ac

0000aff0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    aff0:	4807      	ldr	r0, [pc, #28]	; (b010 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    aff2:	b510      	push	{r4, lr}
    aff4:	7801      	ldrb	r1, [r0, #0]
    aff6:	b141      	cbz	r1, b00a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    aff8:	f000 f832 	bl	b060 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    affc:	b118      	cbz	r0, b006 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    affe:	4805      	ldr	r0, [pc, #20]	; (b014 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    b000:	6800      	ldr	r0, [r0, #0]
    b002:	b2c0      	uxtb	r0, r0
    b004:	bd10      	pop	{r4, pc}
    b006:	2010      	movs	r0, #16
    b008:	bd10      	pop	{r4, pc}
    b00a:	7880      	ldrb	r0, [r0, #2]
    b00c:	bd10      	pop	{r4, pc}
    b00e:	0000      	.short	0x0000
    b010:	200002ac 	.word	0x200002ac
    b014:	4000f400 	.word	0x4000f400

0000b018 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    b018:	4808      	ldr	r0, [pc, #32]	; (b03c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    b01a:	b510      	push	{r4, lr}
    b01c:	7801      	ldrb	r1, [r0, #0]
    b01e:	b159      	cbz	r1, b038 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    b020:	4807      	ldr	r0, [pc, #28]	; (b040 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    b022:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b026:	b128      	cbz	r0, b034 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    b028:	f000 f80c 	bl	b044 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b02c:	2800      	cmp	r0, #0
    b02e:	d000      	beq.n	b032 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    b030:	2001      	movs	r0, #1
    b032:	bd10      	pop	{r4, pc}
    b034:	2002      	movs	r0, #2
    b036:	bd10      	pop	{r4, pc}
    b038:	7840      	ldrb	r0, [r0, #1]
    b03a:	bd10      	pop	{r4, pc}
    b03c:	200002ac 	.word	0x200002ac
    b040:	4000f000 	.word	0x4000f000
    b044:	4805      	ldr	r0, [pc, #20]	; (b05c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    b046:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    b04a:	b111      	cbz	r1, b052 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    b04c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b050:	b108      	cbz	r0, b056 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    b052:	2000      	movs	r0, #0
    b054:	4770      	bx	lr
    b056:	2001      	movs	r0, #1
    b058:	4770      	bx	lr
    b05a:	0000      	.short	0x0000
    b05c:	4000f000 	.word	0x4000f000
    b060:	4805      	ldr	r0, [pc, #20]	; (b078 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    b062:	b510      	push	{r4, lr}
    b064:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b068:	b120      	cbz	r0, b074 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b06a:	f7ff ffeb 	bl	b044 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b06e:	b108      	cbz	r0, b074 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b070:	2001      	movs	r0, #1
    b072:	bd10      	pop	{r4, pc}
    b074:	2000      	movs	r0, #0
    b076:	bd10      	pop	{r4, pc}
    b078:	4000f000 	.word	0x4000f000
    b07c:	4804      	ldr	r0, [pc, #16]	; (b090 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    b07e:	2100      	movs	r1, #0
    b080:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b084:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b088:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b08c:	4770      	bx	lr
    b08e:	0000      	.short	0x0000
    b090:	4000f000 	.word	0x4000f000

0000b094 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    b094:	4a08      	ldr	r2, [pc, #32]	; (b0b8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    b096:	b510      	push	{r4, lr}
    b098:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b09c:	4907      	ldr	r1, [pc, #28]	; (b0bc <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    b09e:	4610      	mov	r0, r2
    b0a0:	f7f9 fb04 	bl	46ac <mpsl_fem_lna_configuration_set>
    b0a4:	2800      	cmp	r0, #0
    b0a6:	d005      	beq.n	b0b4 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b0a8:	1c40      	adds	r0, r0, #1
    b0aa:	d003      	beq.n	b0b4 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b0ac:	217d      	movs	r1, #125	; 0x7d
    b0ae:	2040      	movs	r0, #64	; 0x40
    b0b0:	f7f9 fc16 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0b4:	bd10      	pop	{r4, pc}
    b0b6:	0000      	.short	0x0000
    b0b8:	20000268 	.word	0x20000268
    b0bc:	0000b0ec 	.word	0x0000b0ec

0000b0c0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    b0c0:	4a08      	ldr	r2, [pc, #32]	; (b0e4 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    b0c2:	b510      	push	{r4, lr}
    b0c4:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b0c8:	4907      	ldr	r1, [pc, #28]	; (b0e8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    b0ca:	4610      	mov	r0, r2
    b0cc:	f7f9 fafa 	bl	46c4 <mpsl_fem_pa_configuration_set>
    b0d0:	2800      	cmp	r0, #0
    b0d2:	d005      	beq.n	b0e0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b0d4:	1c40      	adds	r0, r0, #1
    b0d6:	d003      	beq.n	b0e0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b0d8:	2172      	movs	r1, #114	; 0x72
    b0da:	2040      	movs	r0, #64	; 0x40
    b0dc:	f7f9 fc00 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0e0:	bd10      	pop	{r4, pc}
    b0e2:	0000      	.short	0x0000
    b0e4:	20000268 	.word	0x20000268
    b0e8:	0000b0ec 	.word	0x0000b0ec
    b0ec:	00000001 	.word	0x00000001
    b0f0:	40001110 	.word	0x40001110
	...

0000b104 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>:
    b104:	b570      	push	{r4, r5, r6, lr}
    b106:	4606      	mov	r6, r0
    b108:	4614      	mov	r4, r2
    b10a:	460d      	mov	r5, r1
    b10c:	2001      	movs	r0, #1
    b10e:	f000 f8bb 	bl	b288 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b112:	4803      	ldr	r0, [pc, #12]	; (b120 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ+0x1c>)
    b114:	6006      	str	r6, [r0, #0]
    b116:	1d00      	adds	r0, r0, #4
    b118:	6004      	str	r4, [r0, #0]
    b11a:	1d00      	adds	r0, r0, #4
    b11c:	6005      	str	r5, [r0, #0]
    b11e:	bd70      	pop	{r4, r5, r6, pc}
    b120:	4000f508 	.word	0x4000f508

0000b124 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    b124:	480a      	ldr	r0, [pc, #40]	; (b150 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x2c>)
    b126:	7801      	ldrb	r1, [r0, #0]
    b128:	b171      	cbz	r1, b148 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x24>
    b12a:	4a0a      	ldr	r2, [pc, #40]	; (b154 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    b12c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    b130:	6011      	str	r1, [r2, #0]
    b132:	4909      	ldr	r1, [pc, #36]	; (b158 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    b134:	f8d1 2104 	ldr.w	r2, [r1, #260]	; 0x104
    b138:	2100      	movs	r1, #0
    b13a:	b11a      	cbz	r2, b144 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    b13c:	4a07      	ldr	r2, [pc, #28]	; (b15c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    b13e:	6812      	ldr	r2, [r2, #0]
    b140:	7042      	strb	r2, [r0, #1]
    b142:	e000      	b.n	b146 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    b144:	7041      	strb	r1, [r0, #1]
    b146:	7001      	strb	r1, [r0, #0]
    b148:	2000      	movs	r0, #0
    b14a:	f000 b89d 	b.w	b288 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b14e:	0000      	.short	0x0000
    b150:	200002af 	.word	0x200002af
    b154:	4001f508 	.word	0x4001f508
    b158:	4000f000 	.word	0x4000f000
    b15c:	4000f400 	.word	0x4000f400

0000b160 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>:
    b160:	b570      	push	{r4, r5, r6, lr}
    b162:	4604      	mov	r4, r0
    b164:	4816      	ldr	r0, [pc, #88]	; (b1c0 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x60>)
    b166:	460e      	mov	r6, r1
    b168:	2501      	movs	r5, #1
    b16a:	7005      	strb	r5, [r0, #0]
    b16c:	4915      	ldr	r1, [pc, #84]	; (b1c4 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    b16e:	ea44 4002 	orr.w	r0, r4, r2, lsl #16
    b172:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    b176:	6008      	str	r0, [r1, #0]
    b178:	f001 f975 	bl	c466 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b17c:	b930      	cbnz	r0, b18c <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x2c>
    b17e:	4811      	ldr	r0, [pc, #68]	; (b1c4 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    b180:	3014      	adds	r0, #20
    b182:	6801      	ldr	r1, [r0, #0]
    b184:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    b188:	4331      	orrs	r1, r6
    b18a:	6001      	str	r1, [r0, #0]
    b18c:	490e      	ldr	r1, [pc, #56]	; (b1c8 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x68>)
    b18e:	2200      	movs	r2, #0
    b190:	f8c1 2104 	str.w	r2, [r1, #260]	; 0x104
    b194:	4b0d      	ldr	r3, [pc, #52]	; (b1cc <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    b196:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    b19a:	6018      	str	r0, [r3, #0]
    b19c:	b12c      	cbz	r4, b1aa <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x4a>
    b19e:	2c01      	cmp	r4, #1
    b1a0:	d007      	beq.n	b1b2 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x52>
    b1a2:	2185      	movs	r1, #133	; 0x85
    b1a4:	203c      	movs	r0, #60	; 0x3c
    b1a6:	f7f9 fb9b 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1aa:	f8c1 5200 	str.w	r5, [r1, #512]	; 0x200
    b1ae:	600d      	str	r5, [r1, #0]
    b1b0:	bd70      	pop	{r4, r5, r6, pc}
    b1b2:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    b1b6:	600d      	str	r5, [r1, #0]
    b1b8:	4904      	ldr	r1, [pc, #16]	; (b1cc <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    b1ba:	1f09      	subs	r1, r1, #4
    b1bc:	6008      	str	r0, [r1, #0]
    b1be:	bd70      	pop	{r4, r5, r6, pc}
    b1c0:	200002af 	.word	0x200002af
    b1c4:	4000f504 	.word	0x4000f504
    b1c8:	4000f000 	.word	0x4000f000
    b1cc:	4001f508 	.word	0x4001f508

0000b1d0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    b1d0:	4802      	ldr	r0, [pc, #8]	; (b1dc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    b1d2:	2100      	movs	r1, #0
    b1d4:	7001      	strb	r1, [r0, #0]
    b1d6:	7041      	strb	r1, [r0, #1]
    b1d8:	4770      	bx	lr
    b1da:	0000      	.short	0x0000
    b1dc:	200002af 	.word	0x200002af

0000b1e0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    b1e0:	4806      	ldr	r0, [pc, #24]	; (b1fc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    b1e2:	7801      	ldrb	r1, [r0, #0]
    b1e4:	b141      	cbz	r1, b1f8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    b1e6:	4806      	ldr	r0, [pc, #24]	; (b200 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    b1e8:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b1ec:	2800      	cmp	r0, #0
    b1ee:	d002      	beq.n	b1f6 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    b1f0:	4804      	ldr	r0, [pc, #16]	; (b204 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    b1f2:	6800      	ldr	r0, [r0, #0]
    b1f4:	b2c0      	uxtb	r0, r0
    b1f6:	4770      	bx	lr
    b1f8:	7840      	ldrb	r0, [r0, #1]
    b1fa:	4770      	bx	lr
    b1fc:	200002af 	.word	0x200002af
    b200:	4000f000 	.word	0x4000f000
    b204:	4000f400 	.word	0x4000f400

0000b208 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    b208:	4901      	ldr	r1, [pc, #4]	; (b210 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    b20a:	2001      	movs	r0, #1
    b20c:	6088      	str	r0, [r1, #8]
    b20e:	4770      	bx	lr
    b210:	4000f000 	.word	0x4000f000

0000b214 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    b214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b218:	2800      	cmp	r0, #0
    b21a:	d02c      	beq.n	b276 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    b21c:	4817      	ldr	r0, [pc, #92]	; (b27c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x68>)
    b21e:	7800      	ldrb	r0, [r0, #0]
    b220:	b1b0      	cbz	r0, b250 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    b222:	4d17      	ldr	r5, [pc, #92]	; (b280 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    b224:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b228:	2800      	cmp	r0, #0
    b22a:	d124      	bne.n	b276 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    b22c:	2702      	movs	r7, #2
    b22e:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    b232:	4c14      	ldr	r4, [pc, #80]	; (b284 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    b234:	6820      	ldr	r0, [r4, #0]
    b236:	43c0      	mvns	r0, r0
    b238:	f340 1600 	sbfx	r6, r0, #4, #1
    b23c:	6820      	ldr	r0, [r4, #0]
    b23e:	f040 0010 	orr.w	r0, r0, #16
    b242:	6020      	str	r0, [r4, #0]
    b244:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    b248:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b24c:	1c76      	adds	r6, r6, #1
    b24e:	e007      	b.n	b260 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    b250:	21fd      	movs	r1, #253	; 0xfd
    b252:	203c      	movs	r0, #60	; 0x3c
    b254:	f7f9 fb44 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b258:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    b25c:	f7f9 f9d0 	bl	4600 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    b260:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b264:	2800      	cmp	r0, #0
    b266:	d0f7      	beq.n	b258 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x44>
    b268:	b91e      	cbnz	r6, b272 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x5e>
    b26a:	6820      	ldr	r0, [r4, #0]
    b26c:	f020 0010 	bic.w	r0, r0, #16
    b270:	6020      	str	r0, [r4, #0]
    b272:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    b276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b27a:	0000      	.short	0x0000
    b27c:	200002af 	.word	0x200002af
    b280:	4000f000 	.word	0x4000f000
    b284:	e000ed10 	.word	0xe000ed10

0000b288 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    b288:	b510      	push	{r4, lr}
    b28a:	4604      	mov	r4, r0
    b28c:	f000 f822 	bl	b2d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    b290:	2c00      	cmp	r4, #0
    b292:	d017      	beq.n	b2c4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    b294:	4a0c      	ldr	r2, [pc, #48]	; (b2c8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b296:	480c      	ldr	r0, [pc, #48]	; (b2c8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b298:	490c      	ldr	r1, [pc, #48]	; (b2cc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    b29a:	3214      	adds	r2, #20
    b29c:	4b0c      	ldr	r3, [pc, #48]	; (b2d0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    b29e:	2c01      	cmp	r4, #1
    b2a0:	d005      	beq.n	b2ae <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    b2a2:	2c02      	cmp	r4, #2
    b2a4:	d008      	beq.n	b2b8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    b2a6:	217d      	movs	r1, #125	; 0x7d
    b2a8:	203d      	movs	r0, #61	; 0x3d
    b2aa:	f7f9 fb19 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2ae:	2402      	movs	r4, #2
    b2b0:	6004      	str	r4, [r0, #0]
    b2b2:	6011      	str	r1, [r2, #0]
    b2b4:	0620      	lsls	r0, r4, #24
    b2b6:	e004      	b.n	b2c2 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    b2b8:	2403      	movs	r4, #3
    b2ba:	6004      	str	r4, [r0, #0]
    b2bc:	6011      	str	r1, [r2, #0]
    b2be:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b2c2:	6018      	str	r0, [r3, #0]
    b2c4:	bd10      	pop	{r4, pc}
    b2c6:	0000      	.short	0x0000
    b2c8:	4000f500 	.word	0x4000f500
    b2cc:	200013b5 	.word	0x200013b5
    b2d0:	4001f504 	.word	0x4001f504
    b2d4:	4804      	ldr	r0, [pc, #16]	; (b2e8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    b2d6:	2100      	movs	r1, #0
    b2d8:	6001      	str	r1, [r0, #0]
    b2da:	6001      	str	r1, [r0, #0]
    b2dc:	4903      	ldr	r1, [pc, #12]	; (b2ec <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    b2de:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    b2e2:	6008      	str	r0, [r1, #0]
    b2e4:	4770      	bx	lr
    b2e6:	0000      	.short	0x0000
    b2e8:	4000f500 	.word	0x4000f500
    b2ec:	4001f508 	.word	0x4001f508

0000b2f0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    b2f0:	4805      	ldr	r0, [pc, #20]	; (b308 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    b2f2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b2f6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    b2fa:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b2fe:	4903      	ldr	r1, [pc, #12]	; (b30c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    b300:	2000      	movs	r0, #0
    b302:	6008      	str	r0, [r1, #0]
    b304:	4770      	bx	lr
    b306:	0000      	.short	0x0000
    b308:	40001000 	.word	0x40001000
    b30c:	40001560 	.word	0x40001560

0000b310 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    b310:	4904      	ldr	r1, [pc, #16]	; (b324 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    b312:	6008      	str	r0, [r1, #0]
    b314:	4804      	ldr	r0, [pc, #16]	; (b328 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    b316:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b31a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    b31e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b322:	4770      	bx	lr
    b324:	40001560 	.word	0x40001560
    b328:	40001000 	.word	0x40001000

0000b32c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    b32c:	4801      	ldr	r0, [pc, #4]	; (b334 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    b32e:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    b332:	4770      	bx	lr
    b334:	20000f24 	.word	0x20000f24

0000b338 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>:
    b338:	4a01      	ldr	r2, [pc, #4]	; (b340 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y+0x8>)
    b33a:	7051      	strb	r1, [r2, #1]
    b33c:	7010      	strb	r0, [r2, #0]
    b33e:	4770      	bx	lr
    b340:	20000f24 	.word	0x20000f24

0000b344 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    b344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b346:	4c1e      	ldr	r4, [pc, #120]	; (b3c0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7c>)
    b348:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b34c:	2710      	movs	r7, #16
    b34e:	f3c0 1600 	ubfx	r6, r0, #4, #1
    b352:	f8c4 7308 	str.w	r7, [r4, #776]	; 0x308
    b356:	2002      	movs	r0, #2
    b358:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b35c:	4819      	ldr	r0, [pc, #100]	; (b3c4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x80>)
    b35e:	2500      	movs	r5, #0
    b360:	491a      	ldr	r1, [pc, #104]	; (b3cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>)
    b362:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    b366:	4818      	ldr	r0, [pc, #96]	; (b3c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>)
    b368:	6008      	str	r0, [r1, #0]
    b36a:	4819      	ldr	r0, [pc, #100]	; (b3d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8c>)
    b36c:	6800      	ldr	r0, [r0, #0]
    b36e:	b1b0      	cbz	r0, b39e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    b370:	20ff      	movs	r0, #255	; 0xff
    b372:	f88d 0000 	strb.w	r0, [sp]
    b376:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b37a:	2001      	movs	r0, #1
    b37c:	6120      	str	r0, [r4, #16]
    b37e:	e004      	b.n	b38a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    b380:	f89d 0000 	ldrb.w	r0, [sp]
    b384:	1e40      	subs	r0, r0, #1
    b386:	f88d 0000 	strb.w	r0, [sp]
    b38a:	f89d 0000 	ldrb.w	r0, [sp]
    b38e:	b118      	cbz	r0, b398 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x54>
    b390:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    b394:	2800      	cmp	r0, #0
    b396:	d0f3      	beq.n	b380 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x3c>
    b398:	f89d 0000 	ldrb.w	r0, [sp]
    b39c:	b150      	cbz	r0, b3b4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    b39e:	f000 fd07 	bl	bdb0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x12c>
    b3a2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b3a6:	f000 fe9f 	bl	c0e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    b3aa:	2e00      	cmp	r6, #0
    b3ac:	d001      	beq.n	b3b2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    b3ae:	f8c4 7304 	str.w	r7, [r4, #772]	; 0x304
    b3b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b3b4:	f240 71c3 	movw	r1, #1987	; 0x7c3
    b3b8:	203e      	movs	r0, #62	; 0x3e
    b3ba:	f7f9 fa91 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b3be:	0000      	.short	0x0000
    b3c0:	40001000 	.word	0x40001000
    b3c4:	20000f24 	.word	0x20000f24
    b3c8:	0c0e0000 	.word	0x0c0e0000
    b3cc:	4001f508 	.word	0x4001f508
    b3d0:	40001550 	.word	0x40001550

0000b3d4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    b3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3d8:	4c1f      	ldr	r4, [pc, #124]	; (b458 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>)
    b3da:	4607      	mov	r7, r0
    b3dc:	4688      	mov	r8, r1
    b3de:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    b3e2:	07c1      	lsls	r1, r0, #31
    b3e4:	d018      	beq.n	b418 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    b3e6:	4a1d      	ldr	r2, [pc, #116]	; (b45c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    b3e8:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    b3ec:	6011      	str	r1, [r2, #0]
    b3ee:	4d1c      	ldr	r5, [pc, #112]	; (b460 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    b3f0:	f8d5 1200 	ldr.w	r1, [r5, #512]	; 0x200
    b3f4:	f041 0101 	orr.w	r1, r1, #1
    b3f8:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
    b3fc:	f040 0002 	orr.w	r0, r0, #2
    b400:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    b404:	4640      	mov	r0, r8
    b406:	f000 fed5 	bl	c1b4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b40a:	f000 fc7f 	bl	bd0c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    b40e:	2601      	movs	r6, #1
    b410:	b13f      	cbz	r7, b422 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    b412:	2f01      	cmp	r7, #1
    b414:	d00e      	beq.n	b434 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    b416:	e016      	b.n	b446 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b418:	f240 6155 	movw	r1, #1621	; 0x655
    b41c:	203e      	movs	r0, #62	; 0x3e
    b41e:	f7f9 fa5f 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b422:	4640      	mov	r0, r8
    b424:	f000 fc92 	bl	bd4c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    b428:	4640      	mov	r0, r8
    b42a:	f000 fc53 	bl	bcd4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    b42e:	72e6      	strb	r6, [r4, #11]
    b430:	602e      	str	r6, [r5, #0]
    b432:	e008      	b.n	b446 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b434:	f000 fcb2 	bl	bd9c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    b438:	f000 fe20 	bl	c07c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f8>
    b43c:	2002      	movs	r0, #2
    b43e:	72e0      	strb	r0, [r4, #11]
    b440:	f000 fd28 	bl	be94 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x210>
    b444:	606e      	str	r6, [r5, #4]
    b446:	4807      	ldr	r0, [pc, #28]	; (b464 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    b448:	64c6      	str	r6, [r0, #76]	; 0x4c
    b44a:	4807      	ldr	r0, [pc, #28]	; (b468 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b44c:	6801      	ldr	r1, [r0, #0]
    b44e:	4638      	mov	r0, r7
    b450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b454:	f004 bcf2 	b.w	fe3c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b458:	20000f24 	.word	0x20000f24
    b45c:	4001f504 	.word	0x4001f504
    b460:	40001000 	.word	0x40001000
    b464:	40008000 	.word	0x40008000
    b468:	4000854c 	.word	0x4000854c

0000b46c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    b46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b470:	4d35      	ldr	r5, [pc, #212]	; (b548 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    b472:	4606      	mov	r6, r0
    b474:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b478:	4689      	mov	r9, r1
    b47a:	6028      	str	r0, [r5, #0]
    b47c:	4c33      	ldr	r4, [pc, #204]	; (b54c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    b47e:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    b482:	f040 0002 	orr.w	r0, r0, #2
    b486:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    b48a:	4608      	mov	r0, r1
    b48c:	f000 fe92 	bl	c1b4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b490:	f000 fc3c 	bl	bd0c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    b494:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b550 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    b498:	2700      	movs	r7, #0
    b49a:	b116      	cbz	r6, b4a2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    b49c:	2e01      	cmp	r6, #1
    b49e:	d027      	beq.n	b4f0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    b4a0:	e03f      	b.n	b522 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b4a2:	4648      	mov	r0, r9
    b4a4:	f000 fc52 	bl	bd4c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    b4a8:	7a60      	ldrb	r0, [r4, #9]
    b4aa:	2801      	cmp	r0, #1
    b4ac:	d105      	bne.n	b4ba <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    b4ae:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b4b2:	f041 0108 	orr.w	r1, r1, #8
    b4b6:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b4ba:	4648      	mov	r0, r9
    b4bc:	f000 fc0a 	bl	bcd4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    b4c0:	2001      	movs	r0, #1
    b4c2:	72e0      	strb	r0, [r4, #11]
    b4c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    b4c6:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    b4ca:	6320      	str	r0, [r4, #48]	; 0x30
    b4cc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b4d0:	6028      	str	r0, [r5, #0]
    b4d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b4d6:	f1b9 0f02 	cmp.w	r9, #2
    b4da:	d007      	beq.n	b4ec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    b4dc:	f640 0034 	movw	r0, #2100	; 0x834
    b4e0:	f649 72ec 	movw	r2, #40940	; 0x9fec
    b4e4:	4410      	add	r0, r2
    b4e6:	fbb0 f7f1 	udiv	r7, r0, r1
    b4ea:	e01a      	b.n	b522 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b4ec:	4608      	mov	r0, r1
    b4ee:	e7f7      	b.n	b4e0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    b4f0:	f000 fc54 	bl	bd9c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    b4f4:	f000 fdc2 	bl	c07c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f8>
    b4f8:	7a60      	ldrb	r0, [r4, #9]
    b4fa:	2801      	cmp	r0, #1
    b4fc:	d105      	bne.n	b50a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    b4fe:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b502:	f041 0104 	orr.w	r1, r1, #4
    b506:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b50a:	2002      	movs	r0, #2
    b50c:	72e0      	strb	r0, [r4, #11]
    b50e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    b510:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    b514:	6320      	str	r0, [r4, #48]	; 0x30
    b516:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    b51a:	6028      	str	r0, [r5, #0]
    b51c:	2729      	movs	r7, #41	; 0x29
    b51e:	f000 fcb9 	bl	be94 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x210>
    b522:	f000 fca3 	bl	be6c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e8>
    b526:	f000 fe6d 	bl	c204 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    b52a:	6800      	ldr	r0, [r0, #0]
    b52c:	2801      	cmp	r0, #1
    b52e:	d006      	beq.n	b53e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    b530:	2100      	movs	r1, #0
    b532:	4630      	mov	r0, r6
    b534:	f004 fc82 	bl	fe3c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b538:	4638      	mov	r0, r7
    b53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b53e:	f7ff ff01 	bl	b344 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b542:	2000      	movs	r0, #0
    b544:	e7f9      	b.n	b53a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    b546:	0000      	.short	0x0000
    b548:	4001f504 	.word	0x4001f504
    b54c:	20000f24 	.word	0x20000f24
    b550:	40001000 	.word	0x40001000

0000b554 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    b554:	4a02      	ldr	r2, [pc, #8]	; (b560 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    b556:	6b93      	ldr	r3, [r2, #56]	; 0x38
    b558:	6003      	str	r3, [r0, #0]
    b55a:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    b55c:	6008      	str	r0, [r1, #0]
    b55e:	4770      	bx	lr
    b560:	20000f24 	.word	0x20000f24

0000b564 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    b564:	b510      	push	{r4, lr}
    b566:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    b568:	4901      	ldr	r1, [pc, #4]	; (b570 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    b56a:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    b56e:	bd10      	pop	{r4, pc}
    b570:	20000f14 	.word	0x20000f14

0000b574 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    b574:	490e      	ldr	r1, [pc, #56]	; (b5b0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3c>)
    b576:	b510      	push	{r4, lr}
    b578:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    b57a:	4282      	cmp	r2, r0
    b57c:	d302      	bcc.n	b584 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    b57e:	f640 0143 	movw	r1, #2115	; 0x843
    b582:	e00a      	b.n	b59a <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x26>
    b584:	2201      	movs	r2, #1
    b586:	740a      	strb	r2, [r1, #16]
    b588:	6148      	str	r0, [r1, #20]
    b58a:	490a      	ldr	r1, [pc, #40]	; (b5b4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    b58c:	644a      	str	r2, [r1, #68]	; 0x44
    b58e:	4a0a      	ldr	r2, [pc, #40]	; (b5b8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    b590:	6813      	ldr	r3, [r2, #0]
    b592:	4283      	cmp	r3, r0
    b594:	d304      	bcc.n	b5a0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2c>
    b596:	f640 014c 	movw	r1, #2124	; 0x84c
    b59a:	203e      	movs	r0, #62	; 0x3e
    b59c:	f7f9 f9a0 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5a0:	2300      	movs	r3, #0
    b5a2:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    b5a6:	6010      	str	r0, [r2, #0]
    b5a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b5ac:	f000 bd74 	b.w	c098 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x414>
    b5b0:	20000f24 	.word	0x20000f24
    b5b4:	40008000 	.word	0x40008000
    b5b8:	40008544 	.word	0x40008544

0000b5bc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    b5bc:	b570      	push	{r4, r5, r6, lr}
    b5be:	4c10      	ldr	r4, [pc, #64]	; (b600 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    b5c0:	4606      	mov	r6, r0
    b5c2:	2002      	movs	r0, #2
    b5c4:	7420      	strb	r0, [r4, #16]
    b5c6:	2596      	movs	r5, #150	; 0x96
    b5c8:	f000 f86c 	bl	b6a4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    b5cc:	4602      	mov	r2, r0
    b5ce:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    b5d2:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    b5d6:	2801      	cmp	r0, #1
    b5d8:	d00d      	beq.n	b5f6 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3a>
    b5da:	4628      	mov	r0, r5
    b5dc:	f004 fc46 	bl	fe6c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    b5e0:	4908      	ldr	r1, [pc, #32]	; (b604 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    b5e2:	6160      	str	r0, [r4, #20]
    b5e4:	2000      	movs	r0, #0
    b5e6:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b5ea:	6961      	ldr	r1, [r4, #20]
    b5ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b5ee:	4408      	add	r0, r1
    b5f0:	4905      	ldr	r1, [pc, #20]	; (b608 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    b5f2:	6008      	str	r0, [r1, #0]
    b5f4:	bd70      	pop	{r4, r5, r6, pc}
    b5f6:	4633      	mov	r3, r6
    b5f8:	4628      	mov	r0, r5
    b5fa:	f004 fc53 	bl	fea4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    b5fe:	e7ef      	b.n	b5e0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    b600:	20000f24 	.word	0x20000f24
    b604:	40008000 	.word	0x40008000
    b608:	40008544 	.word	0x40008544

0000b60c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    b60c:	b510      	push	{r4, lr}
    b60e:	f000 ff46 	bl	c49e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b612:	2800      	cmp	r0, #0
    b614:	d006      	beq.n	b624 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    b616:	4804      	ldr	r0, [pc, #16]	; (b628 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    b618:	6801      	ldr	r1, [r0, #0]
    b61a:	f021 0101 	bic.w	r1, r1, #1
    b61e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    b622:	6001      	str	r1, [r0, #0]
    b624:	bd10      	pop	{r4, pc}
    b626:	0000      	.short	0x0000
    b628:	40001774 	.word	0x40001774

0000b62c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    b62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b630:	2240      	movs	r2, #64	; 0x40
    b632:	2100      	movs	r1, #0
    b634:	4813      	ldr	r0, [pc, #76]	; (b684 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    b636:	f000 ffe2 	bl	c5fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b63a:	f000 fd55 	bl	c0e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    b63e:	f000 fee7 	bl	c410 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b642:	4d11      	ldr	r5, [pc, #68]	; (b688 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b644:	4e10      	ldr	r6, [pc, #64]	; (b688 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b646:	2400      	movs	r4, #0
    b648:	4f0f      	ldr	r7, [pc, #60]	; (b688 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b64a:	3508      	adds	r5, #8
    b64c:	3610      	adds	r6, #16
    b64e:	b928      	cbnz	r0, b65c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b650:	f000 fef5 	bl	c43e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    b654:	b910      	cbnz	r0, b65c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b656:	f000 fefc 	bl	c452 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    b65a:	b108      	cbz	r0, b660 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    b65c:	2224      	movs	r2, #36	; 0x24
    b65e:	e006      	b.n	b66e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b660:	f000 ff37 	bl	c4d2 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b664:	b910      	cbnz	r0, b66c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    b666:	f000 ff2a 	bl	c4be <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    b66a:	b140      	cbz	r0, b67e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    b66c:	2240      	movs	r2, #64	; 0x40
    b66e:	21ff      	movs	r1, #255	; 0xff
    b670:	4638      	mov	r0, r7
    b672:	f000 ffc4 	bl	c5fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b676:	602c      	str	r4, [r5, #0]
    b678:	6034      	str	r4, [r6, #0]
    b67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b67e:	2238      	movs	r2, #56	; 0x38
    b680:	e7f5      	b.n	b66e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b682:	0000      	.short	0x0000
    b684:	20000f24 	.word	0x20000f24
    b688:	40000e00 	.word	0x40000e00

0000b68c <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>:
    b68c:	4901      	ldr	r1, [pc, #4]	; (b694 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA+0x8>)
    b68e:	7008      	strb	r0, [r1, #0]
    b690:	4770      	bx	lr
    b692:	0000      	.short	0x0000
    b694:	20000280 	.word	0x20000280

0000b698 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    b698:	4801      	ldr	r0, [pc, #4]	; (b6a0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    b69a:	6a40      	ldr	r0, [r0, #36]	; 0x24
    b69c:	4770      	bx	lr
    b69e:	0000      	.short	0x0000
    b6a0:	20000f24 	.word	0x20000f24

0000b6a4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    b6a4:	4814      	ldr	r0, [pc, #80]	; (b6f8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    b6a6:	b510      	push	{r4, lr}
    b6a8:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
    b6ac:	7ac0      	ldrb	r0, [r0, #11]
    b6ae:	b141      	cbz	r1, b6c2 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    b6b0:	2902      	cmp	r1, #2
    b6b2:	d00b      	beq.n	b6cc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b6b4:	2802      	cmp	r0, #2
    b6b6:	d009      	beq.n	b6cc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b6b8:	2901      	cmp	r1, #1
    b6ba:	d00b      	beq.n	b6d4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b6bc:	2801      	cmp	r0, #1
    b6be:	d009      	beq.n	b6d4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b6c0:	e015      	b.n	b6ee <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    b6c2:	2800      	cmp	r0, #0
    b6c4:	d1f6      	bne.n	b6b4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    b6c6:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    b6ca:	e00d      	b.n	b6e8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x44>
    b6cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b6d0:	f000 bc6e 	b.w	bfb0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x32c>
    b6d4:	4809      	ldr	r0, [pc, #36]	; (b6fc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    b6d6:	6800      	ldr	r0, [r0, #0]
    b6d8:	f000 000f 	and.w	r0, r0, #15
    b6dc:	2803      	cmp	r0, #3
    b6de:	d006      	beq.n	b6ee <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    b6e0:	2804      	cmp	r0, #4
    b6e2:	d006      	beq.n	b6f2 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4e>
    b6e4:	f240 210b 	movw	r1, #523	; 0x20b
    b6e8:	203e      	movs	r0, #62	; 0x3e
    b6ea:	f7f9 f8f9 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b6ee:	2001      	movs	r0, #1
    b6f0:	bd10      	pop	{r4, pc}
    b6f2:	2002      	movs	r0, #2
    b6f4:	bd10      	pop	{r4, pc}
    b6f6:	0000      	.short	0x0000
    b6f8:	20000f24 	.word	0x20000f24
    b6fc:	40001510 	.word	0x40001510

0000b700 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    b700:	4801      	ldr	r0, [pc, #4]	; (b708 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    b702:	6a00      	ldr	r0, [r0, #32]
    b704:	4770      	bx	lr
    b706:	0000      	.short	0x0000
    b708:	20000f24 	.word	0x20000f24

0000b70c <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>:
    b70c:	4801      	ldr	r0, [pc, #4]	; (b714 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA+0x8>)
    b70e:	7f40      	ldrb	r0, [r0, #29]
    b710:	4770      	bx	lr
    b712:	0000      	.short	0x0000
    b714:	20000f24 	.word	0x20000f24

0000b718 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    b718:	b510      	push	{r4, lr}
    b71a:	f000 fccb 	bl	c0b4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x430>
    b71e:	f7ff fe11 	bl	b344 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b722:	f004 fb21 	bl	fd68 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    b726:	480f      	ldr	r0, [pc, #60]	; (b764 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    b728:	4a0f      	ldr	r2, [pc, #60]	; (b768 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    b72a:	6b01      	ldr	r1, [r0, #48]	; 0x30
    b72c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b730:	6011      	str	r1, [r2, #0]
    b732:	2400      	movs	r4, #0
    b734:	6304      	str	r4, [r0, #48]	; 0x30
    b736:	7404      	strb	r4, [r0, #16]
    b738:	6244      	str	r4, [r0, #36]	; 0x24
    b73a:	6204      	str	r4, [r0, #32]
    b73c:	f000 fcba 	bl	c0b4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x430>
    b740:	480a      	ldr	r0, [pc, #40]	; (b76c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    b742:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    b746:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    b74a:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    b74e:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    b752:	2001      	movs	r0, #1
    b754:	f004 fb41 	bl	fdda <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b75c:	2001      	movs	r0, #1
    b75e:	f004 bb2f 	b.w	fdc0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b762:	0000      	.short	0x0000
    b764:	20000f24 	.word	0x20000f24
    b768:	4001f508 	.word	0x4001f508
    b76c:	40008000 	.word	0x40008000

0000b770 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    b770:	b570      	push	{r4, r5, r6, lr}
    b772:	2001      	movs	r0, #1
    b774:	f004 fb31 	bl	fdda <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b778:	4837      	ldr	r0, [pc, #220]	; (b858 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    b77a:	2400      	movs	r4, #0
    b77c:	6004      	str	r4, [r0, #0]
    b77e:	2601      	movs	r6, #1
    b780:	6006      	str	r6, [r0, #0]
    b782:	f000 fe7c 	bl	c47e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b786:	4d35      	ldr	r5, [pc, #212]	; (b85c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b788:	b118      	cbz	r0, b792 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x22>
    b78a:	6828      	ldr	r0, [r5, #0]
    b78c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    b790:	6028      	str	r0, [r5, #0]
    b792:	f000 fe68 	bl	c466 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b796:	b128      	cbz	r0, b7a4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x34>
    b798:	6828      	ldr	r0, [r5, #0]
    b79a:	4931      	ldr	r1, [pc, #196]	; (b860 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    b79c:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    b7a0:	4308      	orrs	r0, r1
    b7a2:	6028      	str	r0, [r5, #0]
    b7a4:	f000 fe7b 	bl	c49e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b7a8:	b138      	cbz	r0, b7ba <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4a>
    b7aa:	482c      	ldr	r0, [pc, #176]	; (b85c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b7ac:	1d00      	adds	r0, r0, #4
    b7ae:	6801      	ldr	r1, [r0, #0]
    b7b0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    b7b4:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    b7b8:	6001      	str	r1, [r0, #0]
    b7ba:	4928      	ldr	r1, [pc, #160]	; (b85c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b7bc:	4829      	ldr	r0, [pc, #164]	; (b864 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    b7be:	313c      	adds	r1, #60	; 0x3c
    b7c0:	6008      	str	r0, [r1, #0]
    b7c2:	f7f8 ff8b 	bl	46dc <mpsl_fem_device_config_254_apply_get>
    b7c6:	b140      	cbz	r0, b7da <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6a>
    b7c8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b7cc:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    b7d0:	1c41      	adds	r1, r0, #1
    b7d2:	d002      	beq.n	b7da <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6a>
    b7d4:	4921      	ldr	r1, [pc, #132]	; (b85c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b7d6:	3110      	adds	r1, #16
    b7d8:	6008      	str	r0, [r1, #0]
    b7da:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    b7de:	6e00      	ldr	r0, [r0, #96]	; 0x60
    b7e0:	1c41      	adds	r1, r0, #1
    b7e2:	d004      	beq.n	b7ee <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x7e>
    b7e4:	4920      	ldr	r1, [pc, #128]	; (b868 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    b7e6:	680a      	ldr	r2, [r1, #0]
    b7e8:	f360 4217 	bfi	r2, r0, #16, #8
    b7ec:	600a      	str	r2, [r1, #0]
    b7ee:	491e      	ldr	r1, [pc, #120]	; (b868 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    b7f0:	f240 605b 	movw	r0, #1627	; 0x65b
    b7f4:	3954      	subs	r1, #84	; 0x54
    b7f6:	6008      	str	r0, [r1, #0]
    b7f8:	1f09      	subs	r1, r1, #4
    b7fa:	f240 1003 	movw	r0, #259	; 0x103
    b7fe:	6008      	str	r0, [r1, #0]
    b800:	1f08      	subs	r0, r1, #4
    b802:	6006      	str	r6, [r0, #0]
    b804:	2001      	movs	r0, #1
    b806:	f000 fcd5 	bl	c1b4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b80a:	4917      	ldr	r1, [pc, #92]	; (b868 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    b80c:	f240 1001 	movw	r0, #257	; 0x101
    b810:	31c4      	adds	r1, #196	; 0xc4
    b812:	6008      	str	r0, [r1, #0]
    b814:	4e15      	ldr	r6, [pc, #84]	; (b86c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    b816:	2502      	movs	r5, #2
    b818:	f8c6 5200 	str.w	r5, [r6, #512]	; 0x200
    b81c:	4915      	ldr	r1, [pc, #84]	; (b874 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    b81e:	4814      	ldr	r0, [pc, #80]	; (b870 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    b820:	6008      	str	r0, [r1, #0]
    b822:	4815      	ldr	r0, [pc, #84]	; (b878 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    b824:	f506 7600 	add.w	r6, r6, #512	; 0x200
    b828:	8704      	strh	r4, [r0, #56]	; 0x38
    b82a:	3010      	adds	r0, #16
    b82c:	6244      	str	r4, [r0, #36]	; 0x24
    b82e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
    b832:	2001      	movs	r0, #1
    b834:	f004 fac4 	bl	fdc0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b838:	2010      	movs	r0, #16
    b83a:	f8c6 0104 	str.w	r0, [r6, #260]	; 0x104
    b83e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b842:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    b846:	480d      	ldr	r0, [pc, #52]	; (b87c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    b848:	6840      	ldr	r0, [r0, #4]
    b84a:	2800      	cmp	r0, #0
    b84c:	d002      	beq.n	b854 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    b84e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b852:	4700      	bx	r0
    b854:	bd70      	pop	{r4, r5, r6, pc}
    b856:	0000      	.short	0x0000
    b858:	40001ffc 	.word	0x40001ffc
    b85c:	4000173c 	.word	0x4000173c
    b860:	80000096 	.word	0x80000096
    b864:	8900002c 	.word	0x8900002c
    b868:	4000158c 	.word	0x4000158c
    b86c:	40001000 	.word	0x40001000
    b870:	0c0e0000 	.word	0x0c0e0000
    b874:	4001f508 	.word	0x4001f508
    b878:	20000f14 	.word	0x20000f14
    b87c:	20000280 	.word	0x20000280

0000b880 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    b880:	4901      	ldr	r1, [pc, #4]	; (b888 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    b882:	7608      	strb	r0, [r1, #24]
    b884:	4770      	bx	lr
    b886:	0000      	.short	0x0000
    b888:	20000f24 	.word	0x20000f24

0000b88c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    b88c:	4904      	ldr	r1, [pc, #16]	; (b8a0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x14>)
    b88e:	6008      	str	r0, [r1, #0]
    b890:	4804      	ldr	r0, [pc, #16]	; (b8a4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    b892:	f810 1f34 	ldrb.w	r1, [r0, #52]!
    b896:	f041 0101 	orr.w	r1, r1, #1
    b89a:	7001      	strb	r1, [r0, #0]
    b89c:	f000 baae 	b.w	bdfc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x178>
    b8a0:	40001504 	.word	0x40001504
    b8a4:	20000f24 	.word	0x20000f24

0000b8a8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    b8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b8ac:	4e35      	ldr	r6, [pc, #212]	; (b984 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>)
    b8ae:	4607      	mov	r7, r0
    b8b0:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b8b4:	468a      	mov	sl, r1
    b8b6:	4614      	mov	r4, r2
    b8b8:	6030      	str	r0, [r6, #0]
    b8ba:	4610      	mov	r0, r2
    b8bc:	f000 fc7a 	bl	c1b4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b8c0:	f000 fa24 	bl	bd0c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    b8c4:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b988 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>
    b8c8:	4d30      	ldr	r5, [pc, #192]	; (b98c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    b8ca:	f04f 0801 	mov.w	r8, #1
    b8ce:	b127      	cbz	r7, b8da <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    b8d0:	2f01      	cmp	r7, #1
    b8d2:	d01d      	beq.n	b910 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    b8d4:	f240 7144 	movw	r1, #1860	; 0x744
    b8d8:	e04a      	b.n	b970 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>
    b8da:	4620      	mov	r0, r4
    b8dc:	f000 fa36 	bl	bd4c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    b8e0:	4620      	mov	r0, r4
    b8e2:	f000 f9f7 	bl	bcd4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    b8e6:	2c02      	cmp	r4, #2
    b8e8:	d00f      	beq.n	b90a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    b8ea:	f640 0034 	movw	r0, #2100	; 0x834
    b8ee:	bf00      	nop
    b8f0:	f649 51f8 	movw	r1, #40440	; 0x9df8
    b8f4:	4401      	add	r1, r0
    b8f6:	4650      	mov	r0, sl
    b8f8:	f000 fc00 	bl	c0fc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x478>
    b8fc:	4604      	mov	r4, r0
    b8fe:	4648      	mov	r0, r9
    b900:	f000 fbe6 	bl	c0d0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44c>
    b904:	f885 800b 	strb.w	r8, [r5, #11]
    b908:	e014      	b.n	b934 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    b90a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    b90e:	e7ef      	b.n	b8f0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    b910:	f000 fa44 	bl	bd9c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    b914:	f000 fbb2 	bl	c07c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f8>
    b918:	f000 fabc 	bl	be94 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x210>
    b91c:	f649 71ba 	movw	r1, #40890	; 0x9fba
    b920:	4650      	mov	r0, sl
    b922:	f000 fbeb 	bl	c0fc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x478>
    b926:	4604      	mov	r4, r0
    b928:	4817      	ldr	r0, [pc, #92]	; (b988 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    b92a:	1d00      	adds	r0, r0, #4
    b92c:	f000 fbd0 	bl	c0d0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44c>
    b930:	2002      	movs	r0, #2
    b932:	72e8      	strb	r0, [r5, #11]
    b934:	4816      	ldr	r0, [pc, #88]	; (b990 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    b936:	6004      	str	r4, [r0, #0]
    b938:	4917      	ldr	r1, [pc, #92]	; (b998 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    b93a:	4816      	ldr	r0, [pc, #88]	; (b994 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    b93c:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    b940:	6b28      	ldr	r0, [r5, #48]	; 0x30
    b942:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    b946:	6328      	str	r0, [r5, #48]	; 0x30
    b948:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    b94c:	6030      	str	r0, [r6, #0]
    b94e:	2110      	movs	r1, #16
    b950:	f8c9 1304 	str.w	r1, [r9, #772]	; 0x304
    b954:	1200      	asrs	r0, r0, #8
    b956:	6030      	str	r0, [r6, #0]
    b958:	f000 fa88 	bl	be6c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e8>
    b95c:	490f      	ldr	r1, [pc, #60]	; (b99c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    b95e:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    b962:	480b      	ldr	r0, [pc, #44]	; (b990 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    b964:	300c      	adds	r0, #12
    b966:	6800      	ldr	r0, [r0, #0]
    b968:	42a0      	cmp	r0, r4
    b96a:	d304      	bcc.n	b976 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xce>
    b96c:	f240 7169 	movw	r1, #1897	; 0x769
    b970:	203e      	movs	r0, #62	; 0x3e
    b972:	f7f8 ffb5 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b976:	4621      	mov	r1, r4
    b978:	4638      	mov	r0, r7
    b97a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b97e:	f004 ba5d 	b.w	fe3c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b982:	0000      	.short	0x0000
    b984:	4001f504 	.word	0x4001f504
    b988:	40001000 	.word	0x40001000
    b98c:	20000f24 	.word	0x20000f24
    b990:	40008540 	.word	0x40008540
    b994:	40008140 	.word	0x40008140
    b998:	4001f098 	.word	0x4001f098
    b99c:	40008000 	.word	0x40008000

0000b9a0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    b9a0:	b510      	push	{r4, lr}
    b9a2:	b14a      	cbz	r2, b9b8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x18>
    b9a4:	4c12      	ldr	r4, [pc, #72]	; (b9f0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x50>)
    b9a6:	7260      	strb	r0, [r4, #9]
    b9a8:	7363      	strb	r3, [r4, #13]
    b9aa:	07d0      	lsls	r0, r2, #31
    b9ac:	d007      	beq.n	b9be <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x1e>
    b9ae:	2a01      	cmp	r2, #1
    b9b0:	d005      	beq.n	b9be <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x1e>
    b9b2:	f640 113e 	movw	r1, #2366	; 0x93e
    b9b6:	e00c      	b.n	b9d2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x32>
    b9b8:	f640 1137 	movw	r1, #2359	; 0x937
    b9bc:	e009      	b.n	b9d2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x32>
    b9be:	b159      	cbz	r1, b9d8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>
    b9c0:	2002      	movs	r0, #2
    b9c2:	72a0      	strb	r0, [r4, #10]
    b9c4:	7322      	strb	r2, [r4, #12]
    b9c6:	2801      	cmp	r0, #1
    b9c8:	d008      	beq.n	b9dc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x3c>
    b9ca:	2802      	cmp	r0, #2
    b9cc:	d00f      	beq.n	b9ee <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4e>
    b9ce:	f640 1155 	movw	r1, #2389	; 0x955
    b9d2:	203e      	movs	r0, #62	; 0x3e
    b9d4:	f7f8 ff84 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b9d8:	2001      	movs	r0, #1
    b9da:	e7f2      	b.n	b9c2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x22>
    b9dc:	7ae0      	ldrb	r0, [r4, #11]
    b9de:	2802      	cmp	r0, #2
    b9e0:	d105      	bne.n	b9ee <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4e>
    b9e2:	f000 f9db 	bl	bd9c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    b9e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b9ea:	f000 bb47 	b.w	c07c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f8>
    b9ee:	bd10      	pop	{r4, pc}
    b9f0:	20000f24 	.word	0x20000f24

0000b9f4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    b9f4:	490a      	ldr	r1, [pc, #40]	; (ba20 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2c>)
    b9f6:	b508      	push	{r3, lr}
    b9f8:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    b9fc:	2a01      	cmp	r2, #1
    b9fe:	d001      	beq.n	ba04 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>
    ba00:	2000      	movs	r0, #0
    ba02:	bd08      	pop	{r3, pc}
    ba04:	4a07      	ldr	r2, [pc, #28]	; (ba24 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    ba06:	6812      	ldr	r2, [r2, #0]
    ba08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    ba0c:	4252      	negs	r2, r2
    ba0e:	7002      	strb	r2, [r0, #0]
    ba10:	2000      	movs	r0, #0
    ba12:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    ba16:	4804      	ldr	r0, [pc, #16]	; (ba28 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    ba18:	6800      	ldr	r0, [r0, #0]
    ba1a:	9000      	str	r0, [sp, #0]
    ba1c:	2001      	movs	r0, #1
    ba1e:	bd08      	pop	{r3, pc}
    ba20:	40001000 	.word	0x40001000
    ba24:	40001548 	.word	0x40001548
    ba28:	4000111c 	.word	0x4000111c

0000ba2c <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>:
    ba2c:	4a04      	ldr	r2, [pc, #16]	; (ba40 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ+0x14>)
    ba2e:	6803      	ldr	r3, [r0, #0]
    ba30:	f8c2 3012 	str.w	r3, [r2, #18]
    ba34:	8880      	ldrh	r0, [r0, #4]
    ba36:	82d0      	strh	r0, [r2, #22]
    ba38:	f102 0010 	add.w	r0, r2, #16
    ba3c:	7201      	strb	r1, [r0, #8]
    ba3e:	4770      	bx	lr
    ba40:	20000f14 	.word	0x20000f14

0000ba44 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    ba44:	4a04      	ldr	r2, [pc, #16]	; (ba58 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    ba46:	78c1      	ldrb	r1, [r0, #3]
    ba48:	6011      	str	r1, [r2, #0]
    ba4a:	6800      	ldr	r0, [r0, #0]
    ba4c:	4902      	ldr	r1, [pc, #8]	; (ba58 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    ba4e:	0200      	lsls	r0, r0, #8
    ba50:	3908      	subs	r1, #8
    ba52:	6008      	str	r0, [r1, #0]
    ba54:	4770      	bx	lr
    ba56:	0000      	.short	0x0000
    ba58:	40001524 	.word	0x40001524

0000ba5c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    ba5c:	6800      	ldr	r0, [r0, #0]
    ba5e:	4902      	ldr	r1, [pc, #8]	; (ba68 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    ba60:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ba64:	6008      	str	r0, [r1, #0]
    ba66:	4770      	bx	lr
    ba68:	4000153c 	.word	0x4000153c

0000ba6c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    ba6c:	b510      	push	{r4, lr}
    ba6e:	f000 fb7d 	bl	c16c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e8>
    ba72:	4806      	ldr	r0, [pc, #24]	; (ba8c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>)
    ba74:	6800      	ldr	r0, [r0, #0]
    ba76:	2803      	cmp	r0, #3
    ba78:	d001      	beq.n	ba7e <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x12>
    ba7a:	280b      	cmp	r0, #11
    ba7c:	d104      	bne.n	ba88 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    ba7e:	f240 21a5 	movw	r1, #677	; 0x2a5
    ba82:	203e      	movs	r0, #62	; 0x3e
    ba84:	f7f8 ff2c 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba88:	bd10      	pop	{r4, pc}
    ba8a:	0000      	.short	0x0000
    ba8c:	40001550 	.word	0x40001550

0000ba90 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    ba90:	4901      	ldr	r1, [pc, #4]	; (ba98 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    ba92:	7648      	strb	r0, [r1, #25]
    ba94:	4770      	bx	lr
    ba96:	0000      	.short	0x0000
    ba98:	20000f24 	.word	0x20000f24

0000ba9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    ba9c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    baa0:	4d6f      	ldr	r5, [pc, #444]	; (bc60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c4>)
    baa2:	2701      	movs	r7, #1
    baa4:	64ef      	str	r7, [r5, #76]	; 0x4c
    baa6:	486f      	ldr	r0, [pc, #444]	; (bc64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c8>)
    baa8:	f8d0 a000 	ldr.w	sl, [r0]
    baac:	486e      	ldr	r0, [pc, #440]	; (bc68 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    baae:	6800      	ldr	r0, [r0, #0]
    bab0:	4c6e      	ldr	r4, [pc, #440]	; (bc6c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>)
    bab2:	f8df 81bc 	ldr.w	r8, [pc, #444]	; bc70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d4>
    bab6:	e9c4 0a0e 	strd	r0, sl, [r4, #56]	; 0x38
    baba:	f898 0000 	ldrb.w	r0, [r8]
    babe:	2804      	cmp	r0, #4
    bac0:	d302      	bcc.n	bac8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2c>
    bac2:	f44f 612d 	mov.w	r1, #2768	; 0xad0
    bac6:	e0c0      	b.n	bc4a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ae>
    bac8:	f000 f972 	bl	bdb0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x12c>
    bacc:	4969      	ldr	r1, [pc, #420]	; (bc74 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d8>)
    bace:	6b20      	ldr	r0, [r4, #48]	; 0x30
    bad0:	6008      	str	r0, [r1, #0]
    bad2:	f8df b1a4 	ldr.w	fp, [pc, #420]	; bc78 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1dc>
    bad6:	2600      	movs	r6, #0
    bad8:	6326      	str	r6, [r4, #48]	; 0x30
    bada:	f8db 1200 	ldr.w	r1, [fp, #512]	; 0x200
    bade:	f240 121d 	movw	r2, #285	; 0x11d
    bae2:	4391      	bics	r1, r2
    bae4:	f8cb 1200 	str.w	r1, [fp, #512]	; 0x200
    bae8:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    baec:	f8db 010c 	ldr.w	r0, [fp, #268]	; 0x10c
    baf0:	b900      	cbnz	r0, baf4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x58>
    baf2:	64af      	str	r7, [r5, #72]	; 0x48
    baf4:	f000 f9e0 	bl	beb8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x234>
    baf8:	4605      	mov	r5, r0
    bafa:	485a      	ldr	r0, [pc, #360]	; (bc64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c8>)
    bafc:	1f00      	subs	r0, r0, #4
    bafe:	6800      	ldr	r0, [r0, #0]
    bb00:	6260      	str	r0, [r4, #36]	; 0x24
    bb02:	f7ff fdcf 	bl	b6a4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    bb06:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    bb0a:	7ae0      	ldrb	r0, [r4, #11]
    bb0c:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    bb10:	495a      	ldr	r1, [pc, #360]	; (bc7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    bb12:	6226      	str	r6, [r4, #32]
    bb14:	2802      	cmp	r0, #2
    bb16:	d107      	bne.n	bb28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    bb18:	7860      	ldrb	r0, [r4, #1]
    bb1a:	b128      	cbz	r0, bb28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    bb1c:	680a      	ldr	r2, [r1, #0]
    bb1e:	7812      	ldrb	r2, [r2, #0]
    bb20:	4002      	ands	r2, r0
    bb22:	7820      	ldrb	r0, [r4, #0]
    bb24:	4390      	bics	r0, r2
    bb26:	d011      	beq.n	bb4c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xb0>
    bb28:	7726      	strb	r6, [r4, #28]
    bb2a:	f8df 9154 	ldr.w	r9, [pc, #340]	; bc80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    bb2e:	07a8      	lsls	r0, r5, #30
    bb30:	d502      	bpl.n	bb38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x9c>
    bb32:	f8d9 0000 	ldr.w	r0, [r9]
    bb36:	6220      	str	r0, [r4, #32]
    bb38:	0728      	lsls	r0, r5, #28
    bb3a:	d502      	bpl.n	bb42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa6>
    bb3c:	f8d9 0000 	ldr.w	r0, [r9]
    bb40:	6220      	str	r0, [r4, #32]
    bb42:	f898 0000 	ldrb.w	r0, [r8]
    bb46:	07c0      	lsls	r0, r0, #31
    bb48:	d002      	beq.n	bb50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xb4>
    bb4a:	e01c      	b.n	bb86 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    bb4c:	7727      	strb	r7, [r4, #28]
    bb4e:	e7ec      	b.n	bb2a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8e>
    bb50:	f8d1 8000 	ldr.w	r8, [r1]
    bb54:	f898 0000 	ldrb.w	r0, [r8]
    bb58:	f000 000f 	and.w	r0, r0, #15
    bb5c:	2807      	cmp	r0, #7
    bb5e:	d211      	bcs.n	bb84 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bb60:	2206      	movs	r2, #6
    bb62:	f108 0109 	add.w	r1, r8, #9
    bb66:	1ca0      	adds	r0, r4, #2
    bb68:	f000 fcbd 	bl	c4e6 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    bb6c:	b938      	cbnz	r0, bb7e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bb6e:	7a20      	ldrb	r0, [r4, #8]
    bb70:	f898 1000 	ldrb.w	r1, [r8]
    bb74:	ebb0 1fd1 	cmp.w	r0, r1, lsr #7
    bb78:	d101      	bne.n	bb7e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bb7a:	2001      	movs	r0, #1
    bb7c:	e000      	b.n	bb80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe4>
    bb7e:	2000      	movs	r0, #0
    bb80:	7760      	strb	r0, [r4, #29]
    bb82:	e000      	b.n	bb86 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    bb84:	7766      	strb	r6, [r4, #29]
    bb86:	f04f 0800 	mov.w	r8, #0
    bb8a:	4651      	mov	r1, sl
    bb8c:	4628      	mov	r0, r5
    bb8e:	f000 fa23 	bl	bfd8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x354>
    bb92:	b918      	cbnz	r0, bb9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    bb94:	f8cb 7010 	str.w	r7, [fp, #16]
    bb98:	f04f 0801 	mov.w	r8, #1
    bb9c:	4e33      	ldr	r6, [pc, #204]	; (bc6c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>)
    bb9e:	07e8      	lsls	r0, r5, #31
    bba0:	f1a6 0610 	sub.w	r6, r6, #16
    bba4:	d002      	beq.n	bbac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x110>
    bba6:	6830      	ldr	r0, [r6, #0]
    bba8:	4780      	blx	r0
    bbaa:	e031      	b.n	bc10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x174>
    bbac:	07a8      	lsls	r0, r5, #30
    bbae:	d526      	bpl.n	bbfe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x162>
    bbb0:	0768      	lsls	r0, r5, #29
    bbb2:	d41e      	bmi.n	bbf2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    bbb4:	f000 fc73 	bl	c49e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bbb8:	b9d8      	cbnz	r0, bbf2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    bbba:	f000 fc60 	bl	c47e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bbbe:	b9c0      	cbnz	r0, bbf2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    bbc0:	482e      	ldr	r0, [pc, #184]	; (bc7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    bbc2:	38b4      	subs	r0, #180	; 0xb4
    bbc4:	6800      	ldr	r0, [r0, #0]
    bbc6:	f3c0 5742 	ubfx	r7, r0, #21, #3
    bbca:	f3c0 6300 	ubfx	r3, r0, #24, #1
    bbce:	f000 020f 	and.w	r2, r0, #15
    bbd2:	f3c0 1103 	ubfx	r1, r0, #4, #4
    bbd6:	f3c0 2003 	ubfx	r0, r0, #8, #4
    bbda:	b153      	cbz	r3, bbf2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    bbdc:	b10a      	cbz	r2, bbe2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    bbde:	b101      	cbz	r1, bbe2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    bbe0:	b938      	cbnz	r0, bbf2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    bbe2:	4826      	ldr	r0, [pc, #152]	; (bc7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    bbe4:	38b0      	subs	r0, #176	; 0xb0
    bbe6:	6800      	ldr	r0, [r0, #0]
    bbe8:	b118      	cbz	r0, bbf2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    bbea:	2f03      	cmp	r7, #3
    bbec:	d201      	bcs.n	bbf2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    bbee:	f045 0504 	orr.w	r5, r5, #4
    bbf2:	f345 0080 	sbfx	r0, r5, #2, #1
    bbf6:	4641      	mov	r1, r8
    bbf8:	1c40      	adds	r0, r0, #1
    bbfa:	6872      	ldr	r2, [r6, #4]
    bbfc:	e007      	b.n	bc0e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x172>
    bbfe:	f015 0f28 	tst.w	r5, #40	; 0x28
    bc02:	d005      	beq.n	bc10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x174>
    bc04:	f345 1140 	sbfx	r1, r5, #5, #1
    bc08:	68b2      	ldr	r2, [r6, #8]
    bc0a:	4640      	mov	r0, r8
    bc0c:	1c49      	adds	r1, r1, #1
    bc0e:	4790      	blx	r2
    bc10:	06e8      	lsls	r0, r5, #27
    bc12:	d501      	bpl.n	bc18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    bc14:	68f0      	ldr	r0, [r6, #12]
    bc16:	4780      	blx	r0
    bc18:	7ae0      	ldrb	r0, [r4, #11]
    bc1a:	2802      	cmp	r0, #2
    bc1c:	d11e      	bne.n	bc5c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c0>
    bc1e:	7c20      	ldrb	r0, [r4, #16]
    bc20:	2800      	cmp	r0, #0
    bc22:	d01b      	beq.n	bc5c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c0>
    bc24:	2802      	cmp	r0, #2
    bc26:	d004      	beq.n	bc32 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x196>
    bc28:	2801      	cmp	r0, #1
    bc2a:	d008      	beq.n	bc3e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a2>
    bc2c:	f640 3166 	movw	r1, #2918	; 0xb66
    bc30:	e00b      	b.n	bc4a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ae>
    bc32:	6961      	ldr	r1, [r4, #20]
    bc34:	6a60      	ldr	r0, [r4, #36]	; 0x24
    bc36:	4401      	add	r1, r0
    bc38:	f8c9 1000 	str.w	r1, [r9]
    bc3c:	e00a      	b.n	bc54 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b8>
    bc3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    bc40:	6960      	ldr	r0, [r4, #20]
    bc42:	4288      	cmp	r0, r1
    bc44:	d804      	bhi.n	bc50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b4>
    bc46:	f640 3167 	movw	r1, #2919	; 0xb67
    bc4a:	203e      	movs	r0, #62	; 0x3e
    bc4c:	f7f8 fe48 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc50:	f8c9 0000 	str.w	r0, [r9]
    bc54:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bc58:	f000 ba1e 	b.w	c098 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x414>
    bc5c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    bc60:	40008000 	.word	0x40008000
    bc64:	4000854c 	.word	0x4000854c
    bc68:	4000b504 	.word	0x4000b504
    bc6c:	20000f24 	.word	0x20000f24
    bc70:	20000280 	.word	0x20000280
    bc74:	4001f508 	.word	0x4001f508
    bc78:	40001000 	.word	0x40001000
    bc7c:	40001504 	.word	0x40001504
    bc80:	40008544 	.word	0x40008544

0000bc84 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    bc84:	b570      	push	{r4, r5, r6, lr}
    bc86:	4b11      	ldr	r3, [pc, #68]	; (bccc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48>)
    bc88:	888c      	ldrh	r4, [r1, #4]
    bc8a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    bc8e:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
    bc92:	780c      	ldrb	r4, [r1, #0]
    bc94:	f8d1 1001 	ldr.w	r1, [r1, #1]
    bc98:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    bc9c:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    bca0:	4d0b      	ldr	r5, [pc, #44]	; (bcd0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c>)
    bca2:	6829      	ldr	r1, [r5, #0]
    bca4:	f100 0608 	add.w	r6, r0, #8
    bca8:	2401      	movs	r4, #1
    bcaa:	fa04 f306 	lsl.w	r3, r4, r6
    bcae:	b132      	cbz	r2, bcbe <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    bcb0:	2a01      	cmp	r2, #1
    bcb2:	d006      	beq.n	bcc2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e>
    bcb4:	f240 41f1 	movw	r1, #1265	; 0x4f1
    bcb8:	203e      	movs	r0, #62	; 0x3e
    bcba:	f7f8 fe11 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bcbe:	4399      	bics	r1, r3
    bcc0:	e000      	b.n	bcc4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x40>
    bcc2:	4319      	orrs	r1, r3
    bcc4:	4084      	lsls	r4, r0
    bcc6:	430c      	orrs	r4, r1
    bcc8:	602c      	str	r4, [r5, #0]
    bcca:	bd70      	pop	{r4, r5, r6, pc}
    bccc:	40001000 	.word	0x40001000
    bcd0:	40001640 	.word	0x40001640
    bcd4:	b510      	push	{r4, lr}
    bcd6:	4604      	mov	r4, r0
    bcd8:	f000 fbe1 	bl	c49e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bcdc:	2800      	cmp	r0, #0
    bcde:	d00e      	beq.n	bcfe <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7a>
    bce0:	4a09      	ldr	r2, [pc, #36]	; (bd08 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x84>)
    bce2:	6811      	ldr	r1, [r2, #0]
    bce4:	0650      	lsls	r0, r2, #25
    bce6:	2c02      	cmp	r4, #2
    bce8:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    bcec:	d008      	beq.n	bd00 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7c>
    bcee:	f3c0 2006 	ubfx	r0, r0, #8, #7
    bcf2:	bf00      	nop
    bcf4:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    bcf8:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    bcfc:	6010      	str	r0, [r2, #0]
    bcfe:	bd10      	pop	{r4, pc}
    bd00:	f3c0 6006 	ubfx	r0, r0, #24, #7
    bd04:	e7f6      	b.n	bcf4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x70>
    bd06:	0000      	.short	0x0000
    bd08:	40001588 	.word	0x40001588
    bd0c:	480d      	ldr	r0, [pc, #52]	; (bd44 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc0>)
    bd0e:	7e40      	ldrb	r0, [r0, #25]
    bd10:	2825      	cmp	r0, #37	; 0x25
    bd12:	d007      	beq.n	bd24 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa0>
    bd14:	2826      	cmp	r0, #38	; 0x26
    bd16:	d007      	beq.n	bd28 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa4>
    bd18:	2827      	cmp	r0, #39	; 0x27
    bd1a:	d007      	beq.n	bd2c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa8>
    bd1c:	280a      	cmp	r0, #10
    bd1e:	d807      	bhi.n	bd30 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xac>
    bd20:	2204      	movs	r2, #4
    bd22:	e006      	b.n	bd32 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xae>
    bd24:	2102      	movs	r1, #2
    bd26:	e007      	b.n	bd38 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    bd28:	211a      	movs	r1, #26
    bd2a:	e005      	b.n	bd38 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    bd2c:	2150      	movs	r1, #80	; 0x50
    bd2e:	e003      	b.n	bd38 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    bd30:	2206      	movs	r2, #6
    bd32:	eb02 0140 	add.w	r1, r2, r0, lsl #1
    bd36:	b2c9      	uxtb	r1, r1
    bd38:	4a03      	ldr	r2, [pc, #12]	; (bd48 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc4>)
    bd3a:	6011      	str	r1, [r2, #0]
    bd3c:	4902      	ldr	r1, [pc, #8]	; (bd48 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc4>)
    bd3e:	314c      	adds	r1, #76	; 0x4c
    bd40:	6008      	str	r0, [r1, #0]
    bd42:	4770      	bx	lr
    bd44:	20000f24 	.word	0x20000f24
    bd48:	40001508 	.word	0x40001508
    bd4c:	4912      	ldr	r1, [pc, #72]	; (bd98 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x114>)
    bd4e:	b508      	push	{r3, lr}
    bd50:	f991 2018 	ldrsb.w	r2, [r1, #24]
    bd54:	7e49      	ldrb	r1, [r1, #25]
    bd56:	2801      	cmp	r0, #1
    bd58:	d00a      	beq.n	bd70 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xec>
    bd5a:	2802      	cmp	r0, #2
    bd5c:	d00a      	beq.n	bd74 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xf0>
    bd5e:	2804      	cmp	r0, #4
    bd60:	d00a      	beq.n	bd78 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xf4>
    bd62:	2808      	cmp	r0, #8
    bd64:	d00a      	beq.n	bd7c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xf8>
    bd66:	f240 31d7 	movw	r1, #983	; 0x3d7
    bd6a:	2006      	movs	r0, #6
    bd6c:	f7f8 fdb8 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd70:	2000      	movs	r0, #0
    bd72:	e004      	b.n	bd7e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfa>
    bd74:	2001      	movs	r0, #1
    bd76:	e002      	b.n	bd7e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfa>
    bd78:	2003      	movs	r0, #3
    bd7a:	e000      	b.n	bd7e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfa>
    bd7c:	2002      	movs	r0, #2
    bd7e:	466b      	mov	r3, sp
    bd80:	f7f5 f9d4 	bl	112c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    bd84:	b118      	cbz	r0, bd8e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x10a>
    bd86:	f44f 61a4 	mov.w	r1, #1312	; 0x520
    bd8a:	203e      	movs	r0, #62	; 0x3e
    bd8c:	e7ee      	b.n	bd6c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xe8>
    bd8e:	f99d 0000 	ldrsb.w	r0, [sp]
    bd92:	f000 fa09 	bl	c1a8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    bd96:	bd08      	pop	{r3, pc}
    bd98:	20000f24 	.word	0x20000f24
    bd9c:	4803      	ldr	r0, [pc, #12]	; (bdac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x128>)
    bd9e:	7a81      	ldrb	r1, [r0, #10]
    bda0:	2901      	cmp	r1, #1
    bda2:	d102      	bne.n	bdaa <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x126>
    bda4:	7b40      	ldrb	r0, [r0, #13]
    bda6:	f7ff bfd1 	b.w	bd4c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    bdaa:	4770      	bx	lr
    bdac:	20000f24 	.word	0x20000f24
    bdb0:	4805      	ldr	r0, [pc, #20]	; (bdc8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x144>)
    bdb2:	7ac0      	ldrb	r0, [r0, #11]
    bdb4:	2801      	cmp	r0, #1
    bdb6:	d003      	beq.n	bdc0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x13c>
    bdb8:	2802      	cmp	r0, #2
    bdba:	d103      	bne.n	bdc4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x140>
    bdbc:	f003 bfbc 	b.w	fd38 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    bdc0:	f003 bfc6 	b.w	fd50 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    bdc4:	4770      	bx	lr
    bdc6:	0000      	.short	0x0000
    bdc8:	20000f24 	.word	0x20000f24
    bdcc:	4809      	ldr	r0, [pc, #36]	; (bdf4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x170>)
    bdce:	b508      	push	{r3, lr}
    bdd0:	2100      	movs	r1, #0
    bdd2:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    bdd6:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    bdda:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    bdde:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    bde2:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    bde6:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    bdea:	4803      	ldr	r0, [pc, #12]	; (bdf8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x174>)
    bdec:	6800      	ldr	r0, [r0, #0]
    bdee:	9000      	str	r0, [sp, #0]
    bdf0:	bd08      	pop	{r3, pc}
    bdf2:	0000      	.short	0x0000
    bdf4:	40001000 	.word	0x40001000
    bdf8:	40001118 	.word	0x40001118
    bdfc:	4816      	ldr	r0, [pc, #88]	; (be58 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d4>)
    bdfe:	b510      	push	{r4, lr}
    be00:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    be04:	07c1      	lsls	r1, r0, #31
    be06:	d026      	beq.n	be56 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    be08:	0781      	lsls	r1, r0, #30
    be0a:	d513      	bpl.n	be34 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1b0>
    be0c:	4813      	ldr	r0, [pc, #76]	; (be5c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d8>)
    be0e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    be12:	f041 0101 	orr.w	r1, r1, #1
    be16:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    be1a:	4811      	ldr	r0, [pc, #68]	; (be60 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1dc>)
    be1c:	6800      	ldr	r0, [r0, #0]
    be1e:	280b      	cmp	r0, #11
    be20:	d005      	beq.n	be2e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1aa>
    be22:	280a      	cmp	r0, #10
    be24:	d003      	beq.n	be2e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1aa>
    be26:	2803      	cmp	r0, #3
    be28:	d001      	beq.n	be2e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1aa>
    be2a:	2802      	cmp	r0, #2
    be2c:	d113      	bne.n	be56 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    be2e:	f240 514b 	movw	r1, #1355	; 0x54b
    be32:	e00d      	b.n	be50 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1cc>
    be34:	0740      	lsls	r0, r0, #29
    be36:	d50e      	bpl.n	be56 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    be38:	4808      	ldr	r0, [pc, #32]	; (be5c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d8>)
    be3a:	490a      	ldr	r1, [pc, #40]	; (be64 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e0>)
    be3c:	3008      	adds	r0, #8
    be3e:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    be42:	4809      	ldr	r0, [pc, #36]	; (be68 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e4>)
    be44:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    be48:	2801      	cmp	r0, #1
    be4a:	d104      	bne.n	be56 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    be4c:	f240 5152 	movw	r1, #1362	; 0x552
    be50:	203e      	movs	r0, #62	; 0x3e
    be52:	f7f8 fd45 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be56:	bd10      	pop	{r4, pc}
    be58:	20000f24 	.word	0x20000f24
    be5c:	40001000 	.word	0x40001000
    be60:	40001550 	.word	0x40001550
    be64:	4001f098 	.word	0x4001f098
    be68:	40008000 	.word	0x40008000
    be6c:	4808      	ldr	r0, [pc, #32]	; (be90 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x20c>)
    be6e:	4601      	mov	r1, r0
    be70:	7a42      	ldrb	r2, [r0, #9]
    be72:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    be76:	b112      	cbz	r2, be7e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1fa>
    be78:	2a01      	cmp	r2, #1
    be7a:	d003      	beq.n	be84 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x200>
    be7c:	e006      	b.n	be8c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x208>
    be7e:	f041 0102 	orr.w	r1, r1, #2
    be82:	e001      	b.n	be88 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x204>
    be84:	f041 0104 	orr.w	r1, r1, #4
    be88:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
    be8c:	f7ff bfb6 	b.w	bdfc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x178>
    be90:	20000f24 	.word	0x20000f24
    be94:	b510      	push	{r4, lr}
    be96:	f000 fb02 	bl	c49e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    be9a:	2800      	cmp	r0, #0
    be9c:	d108      	bne.n	beb0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x22c>
    be9e:	f000 faee 	bl	c47e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bea2:	2800      	cmp	r0, #0
    bea4:	d104      	bne.n	beb0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x22c>
    bea6:	4803      	ldr	r0, [pc, #12]	; (beb4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x230>)
    bea8:	6801      	ldr	r1, [r0, #0]
    beaa:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    beae:	6001      	str	r1, [r0, #0]
    beb0:	bd10      	pop	{r4, pc}
    beb2:	0000      	.short	0x0000
    beb4:	40001568 	.word	0x40001568
    beb8:	b538      	push	{r3, r4, r5, lr}
    beba:	4d36      	ldr	r5, [pc, #216]	; (bf94 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x310>)
    bebc:	2400      	movs	r4, #0
    bebe:	7c28      	ldrb	r0, [r5, #16]
    bec0:	b120      	cbz	r0, becc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x248>
    bec2:	4835      	ldr	r0, [pc, #212]	; (bf98 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x314>)
    bec4:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
    bec8:	2801      	cmp	r0, #1
    beca:	d007      	beq.n	bedc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x258>
    becc:	2200      	movs	r2, #0
    bece:	7ae9      	ldrb	r1, [r5, #11]
    bed0:	4832      	ldr	r0, [pc, #200]	; (bf9c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x318>)
    bed2:	2901      	cmp	r1, #1
    bed4:	d004      	beq.n	bee0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x25c>
    bed6:	2902      	cmp	r1, #2
    bed8:	d00a      	beq.n	bef0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x26c>
    beda:	e019      	b.n	bf10 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x28c>
    bedc:	2201      	movs	r2, #1
    bede:	e7f6      	b.n	bece <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x24a>
    bee0:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    bee4:	2901      	cmp	r1, #1
    bee6:	d001      	beq.n	beec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x268>
    bee8:	2400      	movs	r4, #0
    beea:	e011      	b.n	bf10 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x28c>
    beec:	2408      	movs	r4, #8
    beee:	e00f      	b.n	bf10 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x28c>
    bef0:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    bef4:	2901      	cmp	r1, #1
    bef6:	d006      	beq.n	bf06 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x282>
    bef8:	2100      	movs	r1, #0
    befa:	4b29      	ldr	r3, [pc, #164]	; (bfa0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x31c>)
    befc:	681b      	ldr	r3, [r3, #0]
    befe:	2b01      	cmp	r3, #1
    bf00:	d003      	beq.n	bf0a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x286>
    bf02:	2404      	movs	r4, #4
    bf04:	e002      	b.n	bf0c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x288>
    bf06:	2102      	movs	r1, #2
    bf08:	e7f7      	b.n	befa <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x276>
    bf0a:	2400      	movs	r4, #0
    bf0c:	430c      	orrs	r4, r1
    bf0e:	4314      	orrs	r4, r2
    bf10:	f014 0f0b 	tst.w	r4, #11
    bf14:	d105      	bne.n	bf22 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x29e>
    bf16:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    bf1a:	2901      	cmp	r1, #1
    bf1c:	d006      	beq.n	bf2c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2a8>
    bf1e:	2100      	movs	r1, #0
    bf20:	430c      	orrs	r4, r1
    bf22:	4920      	ldr	r1, [pc, #128]	; (bfa4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x320>)
    bf24:	7809      	ldrb	r1, [r1, #0]
    bf26:	07c9      	lsls	r1, r1, #31
    bf28:	d002      	beq.n	bf30 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2ac>
    bf2a:	e023      	b.n	bf74 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2f0>
    bf2c:	2110      	movs	r1, #16
    bf2e:	e7f7      	b.n	bf20 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x29c>
    bf30:	491d      	ldr	r1, [pc, #116]	; (bfa8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x324>)
    bf32:	6809      	ldr	r1, [r1, #0]
    bf34:	f011 0fff 	tst.w	r1, #255	; 0xff
    bf38:	d003      	beq.n	bf42 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2be>
    bf3a:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    bf3e:	2a01      	cmp	r2, #1
    bf40:	d000      	beq.n	bf44 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2c0>
    bf42:	2200      	movs	r2, #0
    bf44:	f885 202a 	strb.w	r2, [r5, #42]	; 0x2a
    bf48:	f011 0fff 	tst.w	r1, #255	; 0xff
    bf4c:	d003      	beq.n	bf56 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d2>
    bf4e:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    bf52:	2801      	cmp	r0, #1
    bf54:	d000      	beq.n	bf58 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d4>
    bf56:	2000      	movs	r0, #0
    bf58:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    bf5c:	4810      	ldr	r0, [pc, #64]	; (bfa0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x31c>)
    bf5e:	3010      	adds	r0, #16
    bf60:	6800      	ldr	r0, [r0, #0]
    bf62:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    bf66:	f7ff f857 	bl	b018 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    bf6a:	2801      	cmp	r0, #1
    bf6c:	d000      	beq.n	bf70 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2ec>
    bf6e:	2000      	movs	r0, #0
    bf70:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
    bf74:	f7ff ff2a 	bl	bdcc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x148>
    bf78:	06e0      	lsls	r0, r4, #27
    bf7a:	d506      	bpl.n	bf8a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x306>
    bf7c:	0720      	lsls	r0, r4, #28
    bf7e:	d404      	bmi.n	bf8a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x306>
    bf80:	7ae8      	ldrb	r0, [r5, #11]
    bf82:	2801      	cmp	r0, #1
    bf84:	d101      	bne.n	bf8a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x306>
    bf86:	f044 0420 	orr.w	r4, r4, #32
    bf8a:	4808      	ldr	r0, [pc, #32]	; (bfac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x328>)
    bf8c:	6800      	ldr	r0, [r0, #0]
    bf8e:	9000      	str	r0, [sp, #0]
    bf90:	4620      	mov	r0, r4
    bf92:	bd38      	pop	{r3, r4, r5, pc}
    bf94:	20000f24 	.word	0x20000f24
    bf98:	40008000 	.word	0x40008000
    bf9c:	40001000 	.word	0x40001000
    bfa0:	40001400 	.word	0x40001400
    bfa4:	20000280 	.word	0x20000280
    bfa8:	40001640 	.word	0x40001640
    bfac:	40008144 	.word	0x40008144
    bfb0:	4808      	ldr	r0, [pc, #32]	; (bfd4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x350>)
    bfb2:	b510      	push	{r4, lr}
    bfb4:	6800      	ldr	r0, [r0, #0]
    bfb6:	f000 000f 	and.w	r0, r0, #15
    bfba:	2803      	cmp	r0, #3
    bfbc:	d006      	beq.n	bfcc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x348>
    bfbe:	2804      	cmp	r0, #4
    bfc0:	d006      	beq.n	bfd0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x34c>
    bfc2:	f240 2136 	movw	r1, #566	; 0x236
    bfc6:	203e      	movs	r0, #62	; 0x3e
    bfc8:	f7f8 fc8a 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bfcc:	2001      	movs	r0, #1
    bfce:	bd10      	pop	{r4, pc}
    bfd0:	2002      	movs	r0, #2
    bfd2:	bd10      	pop	{r4, pc}
    bfd4:	40001510 	.word	0x40001510
    bfd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bfdc:	4c25      	ldr	r4, [pc, #148]	; (c074 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f0>)
    bfde:	460d      	mov	r5, r1
    bfe0:	7aa2      	ldrb	r2, [r4, #10]
    bfe2:	b19a      	cbz	r2, c00c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x388>
    bfe4:	7b21      	ldrb	r1, [r4, #12]
    bfe6:	078b      	lsls	r3, r1, #30
    bfe8:	d503      	bpl.n	bff2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x36e>
    bfea:	0783      	lsls	r3, r0, #30
    bfec:	d501      	bpl.n	bff2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x36e>
    bfee:	0743      	lsls	r3, r0, #29
    bff0:	d41c      	bmi.n	c02c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a8>
    bff2:	06cb      	lsls	r3, r1, #27
    bff4:	d505      	bpl.n	c002 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x37e>
    bff6:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    bffa:	b113      	cbz	r3, c002 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x37e>
    bffc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    c000:	b1a3      	cbz	r3, c02c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a8>
    c002:	070b      	lsls	r3, r1, #28
    c004:	d50b      	bpl.n	c01e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x39a>
    c006:	7f23      	ldrb	r3, [r4, #28]
    c008:	b983      	cbnz	r3, c02c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a8>
    c00a:	e008      	b.n	c01e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x39a>
    c00c:	491a      	ldr	r1, [pc, #104]	; (c078 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f4>)
    c00e:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c012:	6008      	str	r0, [r1, #0]
    c014:	f000 f868 	bl	c0e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    c018:	2000      	movs	r0, #0
    c01a:	7420      	strb	r0, [r4, #16]
    c01c:	e028      	b.n	c070 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ec>
    c01e:	0749      	lsls	r1, r1, #29
    c020:	d501      	bpl.n	c026 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a2>
    c022:	7f61      	ldrb	r1, [r4, #29]
    c024:	b111      	cbz	r1, c02c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a8>
    c026:	f010 0f11 	tst.w	r0, #17
    c02a:	d002      	beq.n	c032 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ae>
    c02c:	f7ff f98a 	bl	b344 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c030:	e01e      	b.n	c070 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ec>
    c032:	2a01      	cmp	r2, #1
    c034:	d001      	beq.n	c03a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b6>
    c036:	2601      	movs	r6, #1
    c038:	e000      	b.n	c03c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b8>
    c03a:	2600      	movs	r6, #0
    c03c:	7a60      	ldrb	r0, [r4, #9]
    c03e:	2801      	cmp	r0, #1
    c040:	d00e      	beq.n	c060 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3dc>
    c042:	2700      	movs	r7, #0
    c044:	f000 f850 	bl	c0e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    c048:	2196      	movs	r1, #150	; 0x96
    c04a:	4630      	mov	r0, r6
    c04c:	f000 f864 	bl	c118 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x494>
    c050:	4601      	mov	r1, r0
    c052:	b14f      	cbz	r7, c068 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e4>
    c054:	353b      	adds	r5, #59	; 0x3b
    c056:	428d      	cmp	r5, r1
    c058:	d904      	bls.n	c064 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e0>
    c05a:	2000      	movs	r0, #0
    c05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c060:	2701      	movs	r7, #1
    c062:	e7ef      	b.n	c044 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3c0>
    c064:	2001      	movs	r0, #1
    c066:	7260      	strb	r0, [r4, #9]
    c068:	7b62      	ldrb	r2, [r4, #13]
    c06a:	4630      	mov	r0, r6
    c06c:	f7ff fc1c 	bl	b8a8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    c070:	2001      	movs	r0, #1
    c072:	e7f3      	b.n	c05c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3d8>
    c074:	20000f24 	.word	0x20000f24
    c078:	4001f508 	.word	0x4001f508
    c07c:	4805      	ldr	r0, [pc, #20]	; (c094 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x410>)
    c07e:	2100      	movs	r1, #0
    c080:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    c084:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c088:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    c08c:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c090:	4770      	bx	lr
    c092:	0000      	.short	0x0000
    c094:	40001000 	.word	0x40001000
    c098:	4804      	ldr	r0, [pc, #16]	; (c0ac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x428>)
    c09a:	6b01      	ldr	r1, [r0, #48]	; 0x30
    c09c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c0a0:	6301      	str	r1, [r0, #48]	; 0x30
    c0a2:	4903      	ldr	r1, [pc, #12]	; (c0b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x42c>)
    c0a4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c0a8:	6008      	str	r0, [r1, #0]
    c0aa:	4770      	bx	lr
    c0ac:	20000f24 	.word	0x20000f24
    c0b0:	4001f504 	.word	0x4001f504
    c0b4:	4905      	ldr	r1, [pc, #20]	; (c0cc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x448>)
    c0b6:	2000      	movs	r0, #0
    c0b8:	6008      	str	r0, [r1, #0]
    c0ba:	1f09      	subs	r1, r1, #4
    c0bc:	6008      	str	r0, [r1, #0]
    c0be:	1f09      	subs	r1, r1, #4
    c0c0:	6008      	str	r0, [r1, #0]
    c0c2:	4902      	ldr	r1, [pc, #8]	; (c0cc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x448>)
    c0c4:	1d09      	adds	r1, r1, #4
    c0c6:	6008      	str	r0, [r1, #0]
    c0c8:	4770      	bx	lr
    c0ca:	0000      	.short	0x0000
    c0cc:	40008548 	.word	0x40008548
    c0d0:	4903      	ldr	r1, [pc, #12]	; (c0e0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x45c>)
    c0d2:	7a49      	ldrb	r1, [r1, #9]
    c0d4:	2900      	cmp	r1, #0
    c0d6:	d102      	bne.n	c0de <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x45a>
    c0d8:	4902      	ldr	r1, [pc, #8]	; (c0e4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x460>)
    c0da:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c0de:	4770      	bx	lr
    c0e0:	20000f24 	.word	0x20000f24
    c0e4:	4001f098 	.word	0x4001f098
    c0e8:	4803      	ldr	r0, [pc, #12]	; (c0f8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x474>)
    c0ea:	2100      	movs	r1, #0
    c0ec:	7241      	strb	r1, [r0, #9]
    c0ee:	7281      	strb	r1, [r0, #10]
    c0f0:	72c1      	strb	r1, [r0, #11]
    c0f2:	2101      	movs	r1, #1
    c0f4:	7301      	strb	r1, [r0, #12]
    c0f6:	4770      	bx	lr
    c0f8:	20000f24 	.word	0x20000f24
    c0fc:	4a05      	ldr	r2, [pc, #20]	; (c114 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x490>)
    c0fe:	7a52      	ldrb	r2, [r2, #9]
    c100:	2a01      	cmp	r2, #1
    c102:	d006      	beq.n	c112 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48e>
    c104:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c108:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    c10c:	fbb1 f1f2 	udiv	r1, r1, r2
    c110:	1a40      	subs	r0, r0, r1
    c112:	4770      	bx	lr
    c114:	20000f24 	.word	0x20000f24
    c118:	b570      	push	{r4, r5, r6, lr}
    c11a:	4c13      	ldr	r4, [pc, #76]	; (c168 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e4>)
    c11c:	4603      	mov	r3, r0
    c11e:	460d      	mov	r5, r1
    c120:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    c124:	2000      	movs	r0, #0
    c126:	b15a      	cbz	r2, c140 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4bc>
    c128:	4621      	mov	r1, r4
    c12a:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    c12e:	b163      	cbz	r3, c14a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c6>
    c130:	2b01      	cmp	r3, #1
    c132:	d111      	bne.n	c158 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d4>
    c134:	2a01      	cmp	r2, #1
    c136:	4628      	mov	r0, r5
    c138:	d012      	beq.n	c160 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4dc>
    c13a:	f003 fed7 	bl	feec <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    c13e:	e009      	b.n	c154 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d0>
    c140:	f240 7186 	movw	r1, #1926	; 0x786
    c144:	203e      	movs	r0, #62	; 0x3e
    c146:	f7f8 fbcb 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c14a:	2a01      	cmp	r2, #1
    c14c:	4628      	mov	r0, r5
    c14e:	d004      	beq.n	c15a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d6>
    c150:	f003 feda 	bl	ff08 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    c154:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c156:	4408      	add	r0, r1
    c158:	bd70      	pop	{r4, r5, r6, pc}
    c15a:	f003 feef 	bl	ff3c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    c15e:	e7f9      	b.n	c154 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d0>
    c160:	f003 fedd 	bl	ff1e <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    c164:	e7f6      	b.n	c154 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d0>
    c166:	0000      	.short	0x0000
    c168:	20000f24 	.word	0x20000f24
    c16c:	b510      	push	{r4, lr}
    c16e:	2200      	movs	r2, #0
    c170:	2901      	cmp	r1, #1
    c172:	d008      	beq.n	c186 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x502>
    c174:	2902      	cmp	r1, #2
    c176:	d004      	beq.n	c182 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4fe>
    c178:	f44f 7121 	mov.w	r1, #644	; 0x284
    c17c:	203e      	movs	r0, #62	; 0x3e
    c17e:	f7f8 fbaf 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c182:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c186:	4905      	ldr	r1, [pc, #20]	; (c19c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x518>)
    c188:	430a      	orrs	r2, r1
    c18a:	4905      	ldr	r1, [pc, #20]	; (c1a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x51c>)
    c18c:	600a      	str	r2, [r1, #0]
    c18e:	4905      	ldr	r1, [pc, #20]	; (c1a4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x520>)
    c190:	4308      	orrs	r0, r1
    c192:	4903      	ldr	r1, [pc, #12]	; (c1a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x51c>)
    c194:	1d09      	adds	r1, r1, #4
    c196:	6008      	str	r0, [r1, #0]
    c198:	bd10      	pop	{r4, pc}
    c19a:	0000      	.short	0x0000
    c19c:	00100108 	.word	0x00100108
    c1a0:	40001514 	.word	0x40001514
    c1a4:	02030000 	.word	0x02030000

0000c1a8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    c1a8:	4901      	ldr	r1, [pc, #4]	; (c1b0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    c1aa:	b2c0      	uxtb	r0, r0
    c1ac:	6008      	str	r0, [r1, #0]
    c1ae:	4770      	bx	lr
    c1b0:	4000150c 	.word	0x4000150c

0000c1b4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    c1b4:	b510      	push	{r4, lr}
    c1b6:	4907      	ldr	r1, [pc, #28]	; (c1d4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    c1b8:	2801      	cmp	r0, #1
    c1ba:	d005      	beq.n	c1c8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    c1bc:	2802      	cmp	r0, #2
    c1be:	d005      	beq.n	c1cc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    c1c0:	2197      	movs	r1, #151	; 0x97
    c1c2:	203f      	movs	r0, #63	; 0x3f
    c1c4:	f7f8 fb8c 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1c8:	2003      	movs	r0, #3
    c1ca:	e000      	b.n	c1ce <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    c1cc:	2004      	movs	r0, #4
    c1ce:	6008      	str	r0, [r1, #0]
    c1d0:	bd10      	pop	{r4, pc}
    c1d2:	0000      	.short	0x0000
    c1d4:	40001510 	.word	0x40001510

0000c1d8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    c1d8:	4770      	bx	lr
    c1da:	2100      	movs	r1, #0
    c1dc:	7081      	strb	r1, [r0, #2]
    c1de:	7001      	strb	r1, [r0, #0]
    c1e0:	7041      	strb	r1, [r0, #1]
    c1e2:	4770      	bx	lr

0000c1e4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    c1e4:	b570      	push	{r4, r5, r6, lr}
    c1e6:	f7f4 ffbb 	bl	1160 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    c1ea:	4605      	mov	r5, r0
    c1ec:	2400      	movs	r4, #0
    c1ee:	e006      	b.n	c1fe <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    c1f0:	4620      	mov	r0, r4
    c1f2:	f7f4 ffbb 	bl	116c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c1f6:	f7ff fff0 	bl	c1da <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    c1fa:	1c64      	adds	r4, r4, #1
    c1fc:	b2e4      	uxtb	r4, r4
    c1fe:	42ac      	cmp	r4, r5
    c200:	d3f6      	bcc.n	c1f0 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    c202:	bd70      	pop	{r4, r5, r6, pc}

0000c204 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    c204:	2000      	movs	r0, #0
    c206:	f7f7 bd13 	b.w	3c30 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000c20a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    c20a:	b510      	push	{r4, lr}
    c20c:	f7f7 f9fc 	bl	3608 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    c210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c214:	f000 b80b 	b.w	c22e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000c218 <sym_BE2HGIHF5RDQALAHNCCVX54XTGKEN4KZFXFBHBQ>:
    c218:	0a41      	lsrs	r1, r0, #9
    c21a:	f643 5209 	movw	r2, #15625	; 0x3d09
    c21e:	4351      	muls	r1, r2
    c220:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c224:	fb10 f002 	smulbb	r0, r0, r2
    c228:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    c22c:	4770      	bx	lr

0000c22e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    c22e:	0a41      	lsrs	r1, r0, #9
    c230:	f643 5209 	movw	r2, #15625	; 0x3d09
    c234:	4351      	muls	r1, r2
    c236:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c23a:	fb10 f002 	smulbb	r0, r0, r2
    c23e:	f500 7080 	add.w	r0, r0, #256	; 0x100
    c242:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    c246:	4770      	bx	lr

0000c248 <MPSL_IRQ_RADIO_Handler>:
    c248:	f7f6 b82a 	b.w	22a0 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    c24c:	2800      	cmp	r0, #0
    c24e:	db09      	blt.n	c264 <MPSL_IRQ_RADIO_Handler+0x1c>
    c250:	f000 021f 	and.w	r2, r0, #31
    c254:	2101      	movs	r1, #1
    c256:	4091      	lsls	r1, r2
    c258:	0940      	lsrs	r0, r0, #5
    c25a:	0080      	lsls	r0, r0, #2
    c25c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c260:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c264:	4770      	bx	lr
    c266:	2800      	cmp	r0, #0
    c268:	db0d      	blt.n	c286 <MPSL_IRQ_RADIO_Handler+0x3e>
    c26a:	f000 021f 	and.w	r2, r0, #31
    c26e:	2101      	movs	r1, #1
    c270:	4091      	lsls	r1, r2
    c272:	0940      	lsrs	r0, r0, #5
    c274:	0080      	lsls	r0, r0, #2
    c276:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c27a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c27e:	f3bf 8f4f 	dsb	sy
    c282:	f3bf 8f6f 	isb	sy
    c286:	4770      	bx	lr

0000c288 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c288:	b570      	push	{r4, r5, r6, lr}
    c28a:	4602      	mov	r2, r0
    c28c:	2000      	movs	r0, #0
    c28e:	2900      	cmp	r1, #0
    c290:	d01d      	beq.n	c2ce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    c292:	fba2 0101 	umull	r0, r1, r2, r1
    c296:	0a40      	lsrs	r0, r0, #9
    c298:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    c29c:	0a49      	lsrs	r1, r1, #9
    c29e:	1c40      	adds	r0, r0, #1
    c2a0:	f141 0100 	adc.w	r1, r1, #0
    c2a4:	f240 72a1 	movw	r2, #1953	; 0x7a1
    c2a8:	1883      	adds	r3, r0, r2
    c2aa:	f141 0100 	adc.w	r1, r1, #0
    c2ae:	1c5b      	adds	r3, r3, #1
    c2b0:	f141 0400 	adc.w	r4, r1, #0
    c2b4:	2100      	movs	r1, #0
    c2b6:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    c2ba:	41a1      	sbcs	r1, r4
    c2bc:	d203      	bcs.n	c2c6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    c2be:	2171      	movs	r1, #113	; 0x71
    c2c0:	206d      	movs	r0, #109	; 0x6d
    c2c2:	f7f8 f877 	bl	43b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c2c6:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    c2ca:	fbb0 f0f2 	udiv	r0, r0, r2
    c2ce:	bd70      	pop	{r4, r5, r6, pc}
    c2d0:	5840      	ldr	r0, [r0, r1]
    c2d2:	2800      	cmp	r0, #0
    c2d4:	d000      	beq.n	c2d8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    c2d6:	2001      	movs	r0, #1
    c2d8:	4770      	bx	lr
    c2da:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    c2de:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    c2e2:	f002 0201 	and.w	r2, r2, #1
    c2e6:	03c0      	lsls	r0, r0, #15
    c2e8:	d503      	bpl.n	c2f2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c2ea:	428a      	cmp	r2, r1
    c2ec:	d101      	bne.n	c2f2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c2ee:	2001      	movs	r0, #1
    c2f0:	4770      	bx	lr
    c2f2:	2000      	movs	r0, #0
    c2f4:	4770      	bx	lr

0000c2f6 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    c2f6:	b510      	push	{r4, lr}
    c2f8:	2101      	movs	r1, #1
    c2fa:	0788      	lsls	r0, r1, #30
    c2fc:	f7f8 f818 	bl	4330 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c300:	2800      	cmp	r0, #0
    c302:	d000      	beq.n	c306 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    c304:	2001      	movs	r0, #1
    c306:	bd10      	pop	{r4, pc}

0000c308 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    c308:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c30c:	2101      	movs	r1, #1
    c30e:	6001      	str	r1, [r0, #0]
    c310:	4770      	bx	lr

0000c312 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    c312:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c316:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    c31a:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    c31e:	f002 0203 	and.w	r2, r2, #3
    c322:	03c9      	lsls	r1, r1, #15
    c324:	d503      	bpl.n	c32e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c326:	4282      	cmp	r2, r0
    c328:	d101      	bne.n	c32e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c32a:	2001      	movs	r0, #1
    c32c:	4770      	bx	lr
    c32e:	2000      	movs	r0, #0
    c330:	4770      	bx	lr

0000c332 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    c332:	b510      	push	{r4, lr}
    c334:	2100      	movs	r1, #0
    c336:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c33a:	f7f7 fff9 	bl	4330 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c33e:	2800      	cmp	r0, #0
    c340:	d000      	beq.n	c344 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    c342:	2001      	movs	r0, #1
    c344:	bd10      	pop	{r4, pc}
    c346:	2800      	cmp	r0, #0
    c348:	db09      	blt.n	c35e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    c34a:	f000 021f 	and.w	r2, r0, #31
    c34e:	2101      	movs	r1, #1
    c350:	4091      	lsls	r1, r2
    c352:	0940      	lsrs	r0, r0, #5
    c354:	0080      	lsls	r0, r0, #2
    c356:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c35a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c35e:	4770      	bx	lr
    c360:	2800      	cmp	r0, #0
    c362:	db0d      	blt.n	c380 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    c364:	f000 021f 	and.w	r2, r0, #31
    c368:	2101      	movs	r1, #1
    c36a:	4091      	lsls	r1, r2
    c36c:	0940      	lsrs	r0, r0, #5
    c36e:	0080      	lsls	r0, r0, #2
    c370:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c374:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c378:	f3bf 8f4f 	dsb	sy
    c37c:	f3bf 8f6f 	isb	sy
    c380:	4770      	bx	lr
    c382:	1000      	.short	0x1000
    c384:	00fa0002 	.word	0x00fa0002
    c388:	8aac0000 	.word	0x8aac0000
    c38c:	6d0bcd32 	.word	0x6d0bcd32
    c390:	d80b09dd 	.word	0xd80b09dd
    c394:	2eb78494 	.word	0x2eb78494
    c398:	1808bff3 	.word	0x1808bff3
    c39c:	7bd8      	.short	0x7bd8
    c39e:	2800      	cmp	r0, #0
    c3a0:	db09      	blt.n	c3b6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    c3a2:	f000 021f 	and.w	r2, r0, #31
    c3a6:	2101      	movs	r1, #1
    c3a8:	4091      	lsls	r1, r2
    c3aa:	0940      	lsrs	r0, r0, #5
    c3ac:	0080      	lsls	r0, r0, #2
    c3ae:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c3b2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c3b6:	4770      	bx	lr

0000c3b8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    c3b8:	f3ef 8110 	mrs	r1, PRIMASK
    c3bc:	b672      	cpsid	i
    c3be:	7802      	ldrb	r2, [r0, #0]
    c3c0:	2a01      	cmp	r2, #1
    c3c2:	d001      	beq.n	c3c8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    c3c4:	2201      	movs	r2, #1
    c3c6:	e000      	b.n	c3ca <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    c3c8:	2200      	movs	r2, #0
    c3ca:	2301      	movs	r3, #1
    c3cc:	7003      	strb	r3, [r0, #0]
    c3ce:	b901      	cbnz	r1, c3d2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    c3d0:	b662      	cpsie	i
    c3d2:	b10a      	cbz	r2, c3d8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    c3d4:	2000      	movs	r0, #0
    c3d6:	4770      	bx	lr
    c3d8:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c3dc:	4770      	bx	lr

0000c3de <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    c3de:	2100      	movs	r1, #0
    c3e0:	7001      	strb	r1, [r0, #0]
    c3e2:	4608      	mov	r0, r1
    c3e4:	4770      	bx	lr

0000c3e6 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    c3e6:	f3ef 8110 	mrs	r1, PRIMASK
    c3ea:	b672      	cpsid	i
    c3ec:	2200      	movs	r2, #0
    c3ee:	7002      	strb	r2, [r0, #0]
    c3f0:	b901      	cbnz	r1, c3f4 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    c3f2:	b662      	cpsie	i
    c3f4:	2000      	movs	r0, #0
    c3f6:	4770      	bx	lr

0000c3f8 <mpsl_low_priority_process>:
    c3f8:	f7f8 b8c8 	b.w	458c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000c3fc <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    c3fc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c400:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c404:	280f      	cmp	r0, #15
    c406:	d001      	beq.n	c40c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    c408:	2000      	movs	r0, #0
    c40a:	4770      	bx	lr
    c40c:	2001      	movs	r0, #1
    c40e:	4770      	bx	lr

0000c410 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    c410:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c414:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c418:	280a      	cmp	r0, #10
    c41a:	d001      	beq.n	c420 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    c41c:	2000      	movs	r0, #0
    c41e:	4770      	bx	lr
    c420:	2001      	movs	r0, #1
    c422:	4770      	bx	lr

0000c424 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    c424:	b500      	push	{lr}
    c426:	f7ff fff3 	bl	c410 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c42a:	b120      	cbz	r0, c436 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    c42c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c430:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c434:	b108      	cbz	r0, c43a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    c436:	2000      	movs	r0, #0
    c438:	bd00      	pop	{pc}
    c43a:	2001      	movs	r0, #1
    c43c:	bd00      	pop	{pc}

0000c43e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    c43e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c442:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c446:	280e      	cmp	r0, #14
    c448:	d001      	beq.n	c44e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    c44a:	2000      	movs	r0, #0
    c44c:	4770      	bx	lr
    c44e:	2001      	movs	r0, #1
    c450:	4770      	bx	lr

0000c452 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    c452:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c456:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c45a:	2810      	cmp	r0, #16
    c45c:	d001      	beq.n	c462 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    c45e:	2000      	movs	r0, #0
    c460:	4770      	bx	lr
    c462:	2001      	movs	r0, #1
    c464:	4770      	bx	lr

0000c466 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    c466:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c46a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c46e:	2806      	cmp	r0, #6
    c470:	d003      	beq.n	c47a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c472:	1c40      	adds	r0, r0, #1
    c474:	d001      	beq.n	c47a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c476:	2000      	movs	r0, #0
    c478:	4770      	bx	lr
    c47a:	2001      	movs	r0, #1
    c47c:	4770      	bx	lr

0000c47e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    c47e:	b500      	push	{lr}
    c480:	f7ff fff1 	bl	c466 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c484:	b148      	cbz	r0, c49a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c486:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c48a:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c48e:	2806      	cmp	r0, #6
    c490:	d303      	bcc.n	c49a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c492:	1c40      	adds	r0, r0, #1
    c494:	d001      	beq.n	c49a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c496:	2001      	movs	r0, #1
    c498:	bd00      	pop	{pc}
    c49a:	2000      	movs	r0, #0
    c49c:	bd00      	pop	{pc}

0000c49e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    c49e:	b500      	push	{lr}
    c4a0:	f7ff ffe1 	bl	c466 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c4a4:	b138      	cbz	r0, c4b6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    c4a6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4aa:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c4ae:	2806      	cmp	r0, #6
    c4b0:	d303      	bcc.n	c4ba <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c4b2:	1c40      	adds	r0, r0, #1
    c4b4:	d001      	beq.n	c4ba <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c4b6:	2000      	movs	r0, #0
    c4b8:	bd00      	pop	{pc}
    c4ba:	2001      	movs	r0, #1
    c4bc:	bd00      	pop	{pc}

0000c4be <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    c4be:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4c2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c4c6:	280d      	cmp	r0, #13
    c4c8:	d001      	beq.n	c4ce <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    c4ca:	2000      	movs	r0, #0
    c4cc:	4770      	bx	lr
    c4ce:	2001      	movs	r0, #1
    c4d0:	4770      	bx	lr

0000c4d2 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    c4d2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4d6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c4da:	2808      	cmp	r0, #8
    c4dc:	d001      	beq.n	c4e2 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    c4de:	2000      	movs	r0, #0
    c4e0:	4770      	bx	lr
    c4e2:	2001      	movs	r0, #1
    c4e4:	4770      	bx	lr

0000c4e6 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    c4e6:	2a00      	cmp	r2, #0
    c4e8:	bf04      	itt	eq
    c4ea:	2000      	moveq	r0, #0
    c4ec:	4770      	bxeq	lr
    c4ee:	1e52      	subs	r2, r2, #1
    c4f0:	d007      	beq.n	c502 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    c4f2:	7803      	ldrb	r3, [r0, #0]
    c4f4:	f891 c000 	ldrb.w	ip, [r1]
    c4f8:	4563      	cmp	r3, ip
    c4fa:	bf04      	itt	eq
    c4fc:	1c40      	addeq	r0, r0, #1
    c4fe:	1c49      	addeq	r1, r1, #1
    c500:	d0f5      	beq.n	c4ee <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    c502:	7800      	ldrb	r0, [r0, #0]
    c504:	7809      	ldrb	r1, [r1, #0]
    c506:	1a40      	subs	r0, r0, r1
    c508:	4770      	bx	lr

0000c50a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    c50a:	b4f0      	push	{r4, r5, r6, r7}
    c50c:	ea80 0c01 	eor.w	ip, r0, r1
    c510:	4603      	mov	r3, r0
    c512:	f01c 0f03 	tst.w	ip, #3
    c516:	d13c      	bne.n	c592 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c518:	f013 0f03 	tst.w	r3, #3
    c51c:	d00b      	beq.n	c536 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    c51e:	2a00      	cmp	r2, #0
    c520:	bf04      	itt	eq
    c522:	bcf0      	popeq	{r4, r5, r6, r7}
    c524:	4770      	bxeq	lr
    c526:	f811 cb01 	ldrb.w	ip, [r1], #1
    c52a:	f803 cb01 	strb.w	ip, [r3], #1
    c52e:	1e52      	subs	r2, r2, #1
    c530:	f013 0f03 	tst.w	r3, #3
    c534:	d1f3      	bne.n	c51e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    c536:	2a03      	cmp	r2, #3
    c538:	d94f      	bls.n	c5da <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c53a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c53e:	d24c      	bcs.n	c5da <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c540:	f1c2 0c00 	rsb	ip, r2, #0
    c544:	ea4f 74ec 	mov.w	r4, ip, asr #31
    c548:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    c54c:	ea4f 0cac 	mov.w	ip, ip, asr #2
    c550:	f1cc 0c00 	rsb	ip, ip, #0
    c554:	f1bc 0f00 	cmp.w	ip, #0
    c558:	dd1b      	ble.n	c592 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c55a:	1f0d      	subs	r5, r1, #4
    c55c:	1f1c      	subs	r4, r3, #4
    c55e:	f01c 0f01 	tst.w	ip, #1
    c562:	d003      	beq.n	c56c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    c564:	f855 6f04 	ldr.w	r6, [r5, #4]!
    c568:	f844 6f04 	str.w	r6, [r4, #4]!
    c56c:	ea5f 066c 	movs.w	r6, ip, asr #1
    c570:	d007      	beq.n	c582 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    c572:	686f      	ldr	r7, [r5, #4]
    c574:	6067      	str	r7, [r4, #4]
    c576:	f855 7f08 	ldr.w	r7, [r5, #8]!
    c57a:	f844 7f08 	str.w	r7, [r4, #8]!
    c57e:	1e76      	subs	r6, r6, #1
    c580:	d1f7      	bne.n	c572 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    c582:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    c586:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    c58a:	f1cc 0c00 	rsb	ip, ip, #0
    c58e:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    c592:	2a00      	cmp	r2, #0
    c594:	bf04      	itt	eq
    c596:	bcf0      	popeq	{r4, r5, r6, r7}
    c598:	4770      	bxeq	lr
    c59a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c59e:	d226      	bcs.n	c5ee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c5a0:	2a00      	cmp	r2, #0
    c5a2:	bfdc      	itt	le
    c5a4:	bcf0      	pople	{r4, r5, r6, r7}
    c5a6:	4770      	bxle	lr
    c5a8:	1e49      	subs	r1, r1, #1
    c5aa:	1e5b      	subs	r3, r3, #1
    c5ac:	f012 0f01 	tst.w	r2, #1
    c5b0:	d003      	beq.n	c5ba <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    c5b2:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    c5b6:	f803 cf01 	strb.w	ip, [r3, #1]!
    c5ba:	1052      	asrs	r2, r2, #1
    c5bc:	bf04      	itt	eq
    c5be:	bcf0      	popeq	{r4, r5, r6, r7}
    c5c0:	4770      	bxeq	lr
    c5c2:	f891 c001 	ldrb.w	ip, [r1, #1]
    c5c6:	f883 c001 	strb.w	ip, [r3, #1]
    c5ca:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    c5ce:	f803 cf02 	strb.w	ip, [r3, #2]!
    c5d2:	1e52      	subs	r2, r2, #1
    c5d4:	d1f5      	bne.n	c5c2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    c5d6:	bcf0      	pop	{r4, r5, r6, r7}
    c5d8:	4770      	bx	lr
    c5da:	2a04      	cmp	r2, #4
    c5dc:	d3d9      	bcc.n	c592 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c5de:	f851 cb04 	ldr.w	ip, [r1], #4
    c5e2:	1f12      	subs	r2, r2, #4
    c5e4:	f843 cb04 	str.w	ip, [r3], #4
    c5e8:	2a04      	cmp	r2, #4
    c5ea:	d2f8      	bcs.n	c5de <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    c5ec:	e7d1      	b.n	c592 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c5ee:	f811 cb01 	ldrb.w	ip, [r1], #1
    c5f2:	f803 cb01 	strb.w	ip, [r3], #1
    c5f6:	1e52      	subs	r2, r2, #1
    c5f8:	d1f9      	bne.n	c5ee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c5fa:	bcf0      	pop	{r4, r5, r6, r7}
    c5fc:	4770      	bx	lr

0000c5fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    c5fe:	b470      	push	{r4, r5, r6}
    c600:	4603      	mov	r3, r0
    c602:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    c606:	f010 0f03 	tst.w	r0, #3
    c60a:	d009      	beq.n	c620 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    c60c:	2a00      	cmp	r2, #0
    c60e:	bf04      	itt	eq
    c610:	bc70      	popeq	{r4, r5, r6}
    c612:	4770      	bxeq	lr
    c614:	f803 cb01 	strb.w	ip, [r3], #1
    c618:	1e52      	subs	r2, r2, #1
    c61a:	f013 0f03 	tst.w	r3, #3
    c61e:	d1f5      	bne.n	c60c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    c620:	b2c9      	uxtb	r1, r1
    c622:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c626:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    c62a:	2a03      	cmp	r2, #3
    c62c:	d939      	bls.n	c6a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c62e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c632:	d236      	bcs.n	c6a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c634:	4251      	negs	r1, r2
    c636:	17cc      	asrs	r4, r1, #31
    c638:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    c63c:	1089      	asrs	r1, r1, #2
    c63e:	424e      	negs	r6, r1
    c640:	2e00      	cmp	r6, #0
    c642:	dd11      	ble.n	c668 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c644:	1f19      	subs	r1, r3, #4
    c646:	f016 0f01 	tst.w	r6, #1
    c64a:	bf18      	it	ne
    c64c:	f841 5f04 	strne.w	r5, [r1, #4]!
    c650:	1074      	asrs	r4, r6, #1
    c652:	d004      	beq.n	c65e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    c654:	604d      	str	r5, [r1, #4]
    c656:	f841 5f08 	str.w	r5, [r1, #8]!
    c65a:	1e64      	subs	r4, r4, #1
    c65c:	d1fa      	bne.n	c654 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    c65e:	4271      	negs	r1, r6
    c660:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c664:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    c668:	2a00      	cmp	r2, #0
    c66a:	bf04      	itt	eq
    c66c:	bc70      	popeq	{r4, r5, r6}
    c66e:	4770      	bxeq	lr
    c670:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c674:	d21d      	bcs.n	c6b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c676:	2a00      	cmp	r2, #0
    c678:	bfdc      	itt	le
    c67a:	bc70      	pople	{r4, r5, r6}
    c67c:	4770      	bxle	lr
    c67e:	1e59      	subs	r1, r3, #1
    c680:	f012 0f01 	tst.w	r2, #1
    c684:	bf18      	it	ne
    c686:	f801 cf01 	strbne.w	ip, [r1, #1]!
    c68a:	1052      	asrs	r2, r2, #1
    c68c:	bf04      	itt	eq
    c68e:	bc70      	popeq	{r4, r5, r6}
    c690:	4770      	bxeq	lr
    c692:	f881 c001 	strb.w	ip, [r1, #1]
    c696:	f801 cf02 	strb.w	ip, [r1, #2]!
    c69a:	1e52      	subs	r2, r2, #1
    c69c:	d1f9      	bne.n	c692 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    c69e:	bc70      	pop	{r4, r5, r6}
    c6a0:	4770      	bx	lr
    c6a2:	2a04      	cmp	r2, #4
    c6a4:	d3e0      	bcc.n	c668 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c6a6:	1f12      	subs	r2, r2, #4
    c6a8:	f843 5b04 	str.w	r5, [r3], #4
    c6ac:	2a04      	cmp	r2, #4
    c6ae:	d2fa      	bcs.n	c6a6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    c6b0:	e7da      	b.n	c668 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c6b2:	f803 cb01 	strb.w	ip, [r3], #1
    c6b6:	1e52      	subs	r2, r2, #1
    c6b8:	d1fb      	bne.n	c6b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c6ba:	bc70      	pop	{r4, r5, r6}
    c6bc:	4770      	bx	lr
    c6be:	f04f 30ff 	mov.w	r0, #4294967295
    c6c2:	4770      	bx	lr
    c6c4:	2000      	movs	r0, #0
    c6c6:	4770      	bx	lr
    c6c8:	2000      	movs	r0, #0
    c6ca:	4770      	bx	lr
    c6cc:	f04f 30ff 	mov.w	r0, #4294967295
    c6d0:	4770      	bx	lr
    c6d2:	4770      	bx	lr
    c6d4:	4770      	bx	lr
    c6d6:	2000      	movs	r0, #0
    c6d8:	4770      	bx	lr
    c6da:	f04f 30ff 	mov.w	r0, #4294967295
    c6de:	4770      	bx	lr
    c6e0:	f04f 30ff 	mov.w	r0, #4294967295
    c6e4:	4770      	bx	lr
    c6e6:	2100      	movs	r1, #0
    c6e8:	7001      	strb	r1, [r0, #0]
    c6ea:	4770      	bx	lr
    c6ec:	f04f 30ff 	mov.w	r0, #4294967295
    c6f0:	4770      	bx	lr
    c6f2:	f04f 30ff 	mov.w	r0, #4294967295
    c6f6:	4770      	bx	lr
    c6f8:	2000      	movs	r0, #0
    c6fa:	4770      	bx	lr
    c6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c6fe:	4604      	mov	r4, r0
    c700:	f100 0003 	add.w	r0, r0, #3
    c704:	f020 0003 	bic.w	r0, r0, #3
    c708:	0016      	movs	r6, r2
    c70a:	9000      	str	r0, [sp, #0]
    c70c:	460d      	mov	r5, r1
    c70e:	788a      	ldrb	r2, [r1, #2]
    c710:	7849      	ldrb	r1, [r1, #1]
    c712:	d000      	beq.n	c716 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x118>
    c714:	2000      	movs	r0, #0
    c716:	f7f8 faf7 	bl	4d08 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    c71a:	9900      	ldr	r1, [sp, #0]
    c71c:	4408      	add	r0, r1
    c71e:	9000      	str	r0, [sp, #0]
    c720:	78a9      	ldrb	r1, [r5, #2]
    c722:	b139      	cbz	r1, c734 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x136>
    c724:	89ea      	ldrh	r2, [r5, #14]
    c726:	b106      	cbz	r6, c72a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x12c>
    c728:	2000      	movs	r0, #0
    c72a:	f7f8 fd53 	bl	51d4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    c72e:	9900      	ldr	r1, [sp, #0]
    c730:	4408      	add	r0, r1
    c732:	9000      	str	r0, [sp, #0]
    c734:	4632      	mov	r2, r6
    c736:	4629      	mov	r1, r5
    c738:	4668      	mov	r0, sp
    c73a:	f000 f807 	bl	c74c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x14e>
    c73e:	9800      	ldr	r0, [sp, #0]
    c740:	1dc0      	adds	r0, r0, #7
    c742:	f020 0007 	bic.w	r0, r0, #7
    c746:	9000      	str	r0, [sp, #0]
    c748:	1b00      	subs	r0, r0, r4
    c74a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c750:	4606      	mov	r6, r0
    c752:	460c      	mov	r4, r1
    c754:	7808      	ldrb	r0, [r1, #0]
    c756:	7849      	ldrb	r1, [r1, #1]
    c758:	2700      	movs	r7, #0
    c75a:	4408      	add	r0, r1
    c75c:	4691      	mov	r9, r2
    c75e:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    c762:	463d      	mov	r5, r7
    c764:	e00e      	b.n	c784 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x186>
    c766:	79a3      	ldrb	r3, [r4, #6]
    c768:	2b02      	cmp	r3, #2
    c76a:	d200      	bcs.n	c76e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x170>
    c76c:	2302      	movs	r3, #2
    c76e:	7962      	ldrb	r2, [r4, #5]
    c770:	2a03      	cmp	r2, #3
    c772:	d200      	bcs.n	c776 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x178>
    c774:	2203      	movs	r2, #3
    c776:	7921      	ldrb	r1, [r4, #4]
    c778:	78e0      	ldrb	r0, [r4, #3]
    c77a:	f000 fee4 	bl	d546 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c77e:	1c6d      	adds	r5, r5, #1
    c780:	4407      	add	r7, r0
    c782:	b2ed      	uxtb	r5, r5
    c784:	4545      	cmp	r5, r8
    c786:	d3ee      	bcc.n	c766 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x168>
    c788:	6830      	ldr	r0, [r6, #0]
    c78a:	1cc0      	adds	r0, r0, #3
    c78c:	f020 0003 	bic.w	r0, r0, #3
    c790:	6030      	str	r0, [r6, #0]
    c792:	f1b9 0f00 	cmp.w	r9, #0
    c796:	d000      	beq.n	c79a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x19c>
    c798:	2000      	movs	r0, #0
    c79a:	463a      	mov	r2, r7
    c79c:	4641      	mov	r1, r8
    c79e:	f7f8 fc8b 	bl	50b8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c7a2:	6831      	ldr	r1, [r6, #0]
    c7a4:	4408      	add	r0, r1
    c7a6:	6030      	str	r0, [r6, #0]
    c7a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c7ac <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    c7ac:	2000      	movs	r0, #0
    c7ae:	4770      	bx	lr

0000c7b0 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    c7b0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    c7b2:	4604      	mov	r4, r0
    c7b4:	1d01      	adds	r1, r0, #4
    c7b6:	4668      	mov	r0, sp
    c7b8:	f7fa f9e2 	bl	6b80 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    c7bc:	2800      	cmp	r0, #0
    c7be:	d004      	beq.n	c7ca <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    c7c0:	4669      	mov	r1, sp
    c7c2:	4620      	mov	r0, r4
    c7c4:	f000 f848 	bl	c858 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    c7c8:	2001      	movs	r0, #1
    c7ca:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000c7cc <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c7cc:	b50e      	push	{r1, r2, r3, lr}
    c7ce:	4601      	mov	r1, r0
    c7d0:	4668      	mov	r0, sp
    c7d2:	f000 f827 	bl	c824 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c7d6:	4668      	mov	r0, sp
    c7d8:	f7fa f9fc 	bl	6bd4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c7dc:	bd0e      	pop	{r1, r2, r3, pc}

0000c7de <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    c7de:	b510      	push	{r4, lr}
    c7e0:	4604      	mov	r4, r0
    c7e2:	4620      	mov	r0, r4
    c7e4:	f7f8 f97c 	bl	4ae0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    c7e8:	2800      	cmp	r0, #0
    c7ea:	d006      	beq.n	c7fa <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    c7ec:	78a1      	ldrb	r1, [r4, #2]
    c7ee:	7820      	ldrb	r0, [r4, #0]
    c7f0:	f000 f804 	bl	c7fc <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    c7f4:	2800      	cmp	r0, #0
    c7f6:	d0f4      	beq.n	c7e2 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    c7f8:	2001      	movs	r0, #1
    c7fa:	bd10      	pop	{r4, pc}
    c7fc:	b570      	push	{r4, r5, r6, lr}
    c7fe:	460c      	mov	r4, r1
    c800:	4605      	mov	r5, r0
    c802:	f7f8 f9e1 	bl	4bc8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c806:	2800      	cmp	r0, #0
    c808:	d002      	beq.n	c810 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    c80a:	2d3e      	cmp	r5, #62	; 0x3e
    c80c:	d001      	beq.n	c812 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    c80e:	2001      	movs	r0, #1
    c810:	bd70      	pop	{r4, r5, r6, pc}
    c812:	2c12      	cmp	r4, #18
    c814:	d004      	beq.n	c820 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    c816:	4620      	mov	r0, r4
    c818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c81c:	f7f8 b9f0 	b.w	4c00 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c820:	2000      	movs	r0, #0
    c822:	bd70      	pop	{r4, r5, r6, pc}

0000c824 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c824:	880a      	ldrh	r2, [r1, #0]
    c826:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c82a:	8002      	strh	r2, [r0, #0]
    c82c:	884a      	ldrh	r2, [r1, #2]
    c82e:	8042      	strh	r2, [r0, #2]
    c830:	784a      	ldrb	r2, [r1, #1]
    c832:	0993      	lsrs	r3, r2, #6
    c834:	2200      	movs	r2, #0
    c836:	7142      	strb	r2, [r0, #5]
    c838:	784b      	ldrb	r3, [r1, #1]
    c83a:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c83e:	b11b      	cbz	r3, c848 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c840:	2b01      	cmp	r3, #1
    c842:	d005      	beq.n	c850 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c844:	2b02      	cmp	r3, #2
    c846:	d005      	beq.n	c854 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c848:	7102      	strb	r2, [r0, #4]
    c84a:	1d09      	adds	r1, r1, #4
    c84c:	6081      	str	r1, [r0, #8]
    c84e:	4770      	bx	lr
    c850:	2201      	movs	r2, #1
    c852:	e7f9      	b.n	c848 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c854:	2202      	movs	r2, #2
    c856:	e7f7      	b.n	c848 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c858 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c858:	b510      	push	{r4, lr}
    c85a:	460c      	mov	r4, r1
    c85c:	7809      	ldrb	r1, [r1, #0]
    c85e:	7001      	strb	r1, [r0, #0]
    c860:	7841      	ldrb	r1, [r0, #1]
    c862:	f021 010f 	bic.w	r1, r1, #15
    c866:	7041      	strb	r1, [r0, #1]
    c868:	8822      	ldrh	r2, [r4, #0]
    c86a:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c86e:	4311      	orrs	r1, r2
    c870:	7041      	strb	r1, [r0, #1]
    c872:	78a2      	ldrb	r2, [r4, #2]
    c874:	7082      	strb	r2, [r0, #2]
    c876:	8862      	ldrh	r2, [r4, #2]
    c878:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    c87c:	0a12      	lsrs	r2, r2, #8
    c87e:	70c2      	strb	r2, [r0, #3]
    c880:	7041      	strb	r1, [r0, #1]
    c882:	7922      	ldrb	r2, [r4, #4]
    c884:	f002 0203 	and.w	r2, r2, #3
    c888:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c88c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    c890:	7041      	strb	r1, [r0, #1]
    c892:	7962      	ldrb	r2, [r4, #5]
    c894:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c898:	7041      	strb	r1, [r0, #1]
    c89a:	68a1      	ldr	r1, [r4, #8]
    c89c:	1d02      	adds	r2, r0, #4
    c89e:	4291      	cmp	r1, r2
    c8a0:	d006      	beq.n	c8b0 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    c8a2:	8862      	ldrh	r2, [r4, #2]
    c8a4:	2afb      	cmp	r2, #251	; 0xfb
    c8a6:	d300      	bcc.n	c8aa <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    c8a8:	22fb      	movs	r2, #251	; 0xfb
    c8aa:	1d00      	adds	r0, r0, #4
    c8ac:	f7ff fe2d 	bl	c50a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c8b0:	78a0      	ldrb	r0, [r4, #2]
    c8b2:	1d00      	adds	r0, r0, #4
    c8b4:	b2c0      	uxtb	r0, r0
    c8b6:	bd10      	pop	{r4, pc}

0000c8b8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c8bc:	4604      	mov	r4, r0
    c8be:	780f      	ldrb	r7, [r1, #0]
    c8c0:	2000      	movs	r0, #0
    c8c2:	250c      	movs	r5, #12
    c8c4:	2605      	movs	r6, #5
    c8c6:	223e      	movs	r2, #62	; 0x3e
    c8c8:	23ff      	movs	r3, #255	; 0xff
    c8ca:	2f1b      	cmp	r7, #27
    c8cc:	d27d      	bcs.n	c9ca <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    c8ce:	e8df f007 	tbb	[pc, r7]
    c8d2:	0eeb      	.short	0x0eeb
    c8d4:	632d2725 	.word	0x632d2725
    c8d8:	af9b816d 	.word	0xaf9b816d
    c8dc:	e2c7bcb1 	.word	0xe2c7bcb1
    c8e0:	31ebebf5 	.word	0x31ebebf5
    c8e4:	f2fed5d2 	.word	0xf2fed5d2
    c8e8:	eeeff0f1 	.word	0xeeeff0f1
    c8ec:	00ed      	.short	0x00ed
    c8ee:	7025      	strb	r5, [r4, #0]
    c8f0:	7908      	ldrb	r0, [r1, #4]
    c8f2:	70a0      	strb	r0, [r4, #2]
    c8f4:	7948      	ldrb	r0, [r1, #5]
    c8f6:	70e0      	strb	r0, [r4, #3]
    c8f8:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c8fc:	0a00      	lsrs	r0, r0, #8
    c8fe:	7120      	strb	r0, [r4, #4]
    c900:	79c8      	ldrb	r0, [r1, #7]
    c902:	7160      	strb	r0, [r4, #5]
    c904:	7a08      	ldrb	r0, [r1, #8]
    c906:	71a0      	strb	r0, [r4, #6]
    c908:	8908      	ldrh	r0, [r1, #8]
    c90a:	0a00      	lsrs	r0, r0, #8
    c90c:	71e0      	strb	r0, [r4, #7]
    c90e:	7a88      	ldrb	r0, [r1, #10]
    c910:	7220      	strb	r0, [r4, #8]
    c912:	8948      	ldrh	r0, [r1, #10]
    c914:	0a00      	lsrs	r0, r0, #8
    c916:	7260      	strb	r0, [r4, #9]
    c918:	2008      	movs	r0, #8
    c91a:	e0c2      	b.n	caa2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c91c:	2010      	movs	r0, #16
    c91e:	e000      	b.n	c922 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    c920:	201a      	movs	r0, #26
    c922:	7020      	strb	r0, [r4, #0]
    c924:	7908      	ldrb	r0, [r1, #4]
    c926:	70a0      	strb	r0, [r4, #2]
    c928:	2001      	movs	r0, #1
    c92a:	e0ba      	b.n	caa2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c92c:	4620      	mov	r0, r4
    c92e:	f000 f947 	bl	cbc0 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    c932:	e0b4      	b.n	ca9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e6>
    c934:	7022      	strb	r2, [r4, #0]
    c936:	200a      	movs	r0, #10
    c938:	70a0      	strb	r0, [r4, #2]
    c93a:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    c93e:	70e0      	strb	r0, [r4, #3]
    c940:	7888      	ldrb	r0, [r1, #2]
    c942:	7120      	strb	r0, [r4, #4]
    c944:	8848      	ldrh	r0, [r1, #2]
    c946:	0a00      	lsrs	r0, r0, #8
    c948:	7160      	strb	r0, [r4, #5]
    c94a:	7908      	ldrb	r0, [r1, #4]
    c94c:	71a0      	strb	r0, [r4, #6]
    c94e:	7948      	ldrb	r0, [r1, #5]
    c950:	71e0      	strb	r0, [r4, #7]
    c952:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c956:	60a0      	str	r0, [r4, #8]
    c958:	8948      	ldrh	r0, [r1, #10]
    c95a:	81a0      	strh	r0, [r4, #12]
    c95c:	68c8      	ldr	r0, [r1, #12]
    c95e:	f8c4 000e 	str.w	r0, [r4, #14]
    c962:	8a08      	ldrh	r0, [r1, #16]
    c964:	8260      	strh	r0, [r4, #18]
    c966:	f8d1 0012 	ldr.w	r0, [r1, #18]
    c96a:	6160      	str	r0, [r4, #20]
    c96c:	8ac8      	ldrh	r0, [r1, #22]
    c96e:	8320      	strh	r0, [r4, #24]
    c970:	7e08      	ldrb	r0, [r1, #24]
    c972:	76a0      	strb	r0, [r4, #26]
    c974:	8b08      	ldrh	r0, [r1, #24]
    c976:	0a00      	lsrs	r0, r0, #8
    c978:	76e0      	strb	r0, [r4, #27]
    c97a:	7e88      	ldrb	r0, [r1, #26]
    c97c:	7720      	strb	r0, [r4, #28]
    c97e:	8b48      	ldrh	r0, [r1, #26]
    c980:	0a00      	lsrs	r0, r0, #8
    c982:	7760      	strb	r0, [r4, #29]
    c984:	7f08      	ldrb	r0, [r1, #28]
    c986:	77a0      	strb	r0, [r4, #30]
    c988:	8b88      	ldrh	r0, [r1, #28]
    c98a:	0a00      	lsrs	r0, r0, #8
    c98c:	77e0      	strb	r0, [r4, #31]
    c98e:	7f88      	ldrb	r0, [r1, #30]
    c990:	f884 0020 	strb.w	r0, [r4, #32]
    c994:	201f      	movs	r0, #31
    c996:	e084      	b.n	caa2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c998:	7022      	strb	r2, [r4, #0]
    c99a:	2014      	movs	r0, #20
    c99c:	70a0      	strb	r0, [r4, #2]
    c99e:	7908      	ldrb	r0, [r1, #4]
    c9a0:	70e0      	strb	r0, [r4, #3]
    c9a2:	8888      	ldrh	r0, [r1, #4]
    c9a4:	0a00      	lsrs	r0, r0, #8
    c9a6:	7120      	strb	r0, [r4, #4]
    c9a8:	7988      	ldrb	r0, [r1, #6]
    c9aa:	e0a8      	b.n	cafe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    c9ac:	7022      	strb	r2, [r4, #0]
    c9ae:	2004      	movs	r0, #4
    c9b0:	70a0      	strb	r0, [r4, #2]
    c9b2:	7908      	ldrb	r0, [r1, #4]
    c9b4:	70e0      	strb	r0, [r4, #3]
    c9b6:	7988      	ldrb	r0, [r1, #6]
    c9b8:	7120      	strb	r0, [r4, #4]
    c9ba:	88c8      	ldrh	r0, [r1, #6]
    c9bc:	0a00      	lsrs	r0, r0, #8
    c9be:	7160      	strb	r0, [r4, #5]
    c9c0:	6888      	ldr	r0, [r1, #8]
    c9c2:	f8c4 0006 	str.w	r0, [r4, #6]
    c9c6:	68c8      	ldr	r0, [r1, #12]
    c9c8:	e000      	b.n	c9cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    c9ca:	e06d      	b.n	caa8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    c9cc:	f8c4 000a 	str.w	r0, [r4, #10]
    c9d0:	200c      	movs	r0, #12
    c9d2:	e066      	b.n	caa2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c9d4:	7022      	strb	r2, [r4, #0]
    c9d6:	2003      	movs	r0, #3
    c9d8:	70a0      	strb	r0, [r4, #2]
    c9da:	7908      	ldrb	r0, [r1, #4]
    c9dc:	70e0      	strb	r0, [r4, #3]
    c9de:	7988      	ldrb	r0, [r1, #6]
    c9e0:	7120      	strb	r0, [r4, #4]
    c9e2:	88c8      	ldrh	r0, [r1, #6]
    c9e4:	0a00      	lsrs	r0, r0, #8
    c9e6:	7160      	strb	r0, [r4, #5]
    c9e8:	7a08      	ldrb	r0, [r1, #8]
    c9ea:	71a0      	strb	r0, [r4, #6]
    c9ec:	8908      	ldrh	r0, [r1, #8]
    c9ee:	0a00      	lsrs	r0, r0, #8
    c9f0:	71e0      	strb	r0, [r4, #7]
    c9f2:	7a88      	ldrb	r0, [r1, #10]
    c9f4:	7220      	strb	r0, [r4, #8]
    c9f6:	8948      	ldrh	r0, [r1, #10]
    c9f8:	0a00      	lsrs	r0, r0, #8
    c9fa:	7260      	strb	r0, [r4, #9]
    c9fc:	7b08      	ldrb	r0, [r1, #12]
    c9fe:	72a0      	strb	r0, [r4, #10]
    ca00:	8988      	ldrh	r0, [r1, #12]
    ca02:	0a00      	lsrs	r0, r0, #8
    ca04:	72e0      	strb	r0, [r4, #11]
    ca06:	e0d9      	b.n	cbbc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    ca08:	7022      	strb	r2, [r4, #0]
    ca0a:	70a6      	strb	r6, [r4, #2]
    ca0c:	7908      	ldrb	r0, [r1, #4]
    ca0e:	70e0      	strb	r0, [r4, #3]
    ca10:	8888      	ldrh	r0, [r1, #4]
    ca12:	0a00      	lsrs	r0, r0, #8
    ca14:	7120      	strb	r0, [r4, #4]
    ca16:	f8d1 0006 	ldr.w	r0, [r1, #6]
    ca1a:	f8c4 0005 	str.w	r0, [r4, #5]
    ca1e:	f8d1 000a 	ldr.w	r0, [r1, #10]
    ca22:	f8c4 0009 	str.w	r0, [r4, #9]
    ca26:	89c8      	ldrh	r0, [r1, #14]
    ca28:	f8a4 000d 	strh.w	r0, [r4, #13]
    ca2c:	200d      	movs	r0, #13
    ca2e:	e038      	b.n	caa2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    ca30:	2011      	movs	r0, #17
    ca32:	e044      	b.n	cabe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x206>
    ca34:	7026      	strb	r6, [r4, #0]
    ca36:	7908      	ldrb	r0, [r1, #4]
    ca38:	70a0      	strb	r0, [r4, #2]
    ca3a:	7948      	ldrb	r0, [r1, #5]
    ca3c:	70e0      	strb	r0, [r4, #3]
    ca3e:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    ca42:	0a00      	lsrs	r0, r0, #8
    ca44:	7120      	strb	r0, [r4, #4]
    ca46:	79c8      	ldrb	r0, [r1, #7]
    ca48:	e059      	b.n	cafe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    ca4a:	2008      	movs	r0, #8
    ca4c:	7020      	strb	r0, [r4, #0]
    ca4e:	7908      	ldrb	r0, [r1, #4]
    ca50:	70a0      	strb	r0, [r4, #2]
    ca52:	7988      	ldrb	r0, [r1, #6]
    ca54:	70e0      	strb	r0, [r4, #3]
    ca56:	88c8      	ldrh	r0, [r1, #6]
    ca58:	0a00      	lsrs	r0, r0, #8
    ca5a:	7120      	strb	r0, [r4, #4]
    ca5c:	7a08      	ldrb	r0, [r1, #8]
    ca5e:	e04e      	b.n	cafe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    ca60:	2030      	movs	r0, #48	; 0x30
    ca62:	7020      	strb	r0, [r4, #0]
    ca64:	7908      	ldrb	r0, [r1, #4]
    ca66:	70a0      	strb	r0, [r4, #2]
    ca68:	7988      	ldrb	r0, [r1, #6]
    ca6a:	70e0      	strb	r0, [r4, #3]
    ca6c:	88c8      	ldrh	r0, [r1, #6]
    ca6e:	0a00      	lsrs	r0, r0, #8
    ca70:	7120      	strb	r0, [r4, #4]
    ca72:	2003      	movs	r0, #3
    ca74:	e015      	b.n	caa2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    ca76:	7022      	strb	r2, [r4, #0]
    ca78:	2007      	movs	r0, #7
    ca7a:	e045      	b.n	cb08 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    ca7c:	7022      	strb	r2, [r4, #0]
    ca7e:	70a5      	strb	r5, [r4, #2]
    ca80:	7908      	ldrb	r0, [r1, #4]
    ca82:	70e0      	strb	r0, [r4, #3]
    ca84:	7988      	ldrb	r0, [r1, #6]
    ca86:	7120      	strb	r0, [r4, #4]
    ca88:	88c8      	ldrh	r0, [r1, #6]
    ca8a:	0a00      	lsrs	r0, r0, #8
    ca8c:	7160      	strb	r0, [r4, #5]
    ca8e:	7a08      	ldrb	r0, [r1, #8]
    ca90:	71a0      	strb	r0, [r4, #6]
    ca92:	7a48      	ldrb	r0, [r1, #9]
    ca94:	e028      	b.n	cae8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x230>
    ca96:	4620      	mov	r0, r4
    ca98:	1d09      	adds	r1, r1, #4
    ca9a:	f7f8 f867 	bl	4b6c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xdc>
    ca9e:	2800      	cmp	r0, #0
    caa0:	d002      	beq.n	caa8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    caa2:	7060      	strb	r0, [r4, #1]
    caa4:	1c80      	adds	r0, r0, #2
    caa6:	b2c0      	uxtb	r0, r0
    caa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    caac:	e073      	b.n	cb96 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2de>
    caae:	e047      	b.n	cb40 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    cab0:	e028      	b.n	cb04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24c>
    cab2:	e053      	b.n	cb5c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a4>
    cab4:	e061      	b.n	cb7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c2>
    cab6:	e01a      	b.n	caee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x236>
    cab8:	e009      	b.n	cace <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x216>
    caba:	e7ff      	b.n	cabc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    cabc:	2057      	movs	r0, #87	; 0x57
    cabe:	7020      	strb	r0, [r4, #0]
    cac0:	7908      	ldrb	r0, [r1, #4]
    cac2:	70a0      	strb	r0, [r4, #2]
    cac4:	8888      	ldrh	r0, [r1, #4]
    cac6:	0a00      	lsrs	r0, r0, #8
    cac8:	70e0      	strb	r0, [r4, #3]
    caca:	2002      	movs	r0, #2
    cacc:	e7e9      	b.n	caa2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cace:	7022      	strb	r2, [r4, #0]
    cad0:	2012      	movs	r0, #18
    cad2:	70a0      	strb	r0, [r4, #2]
    cad4:	7908      	ldrb	r0, [r1, #4]
    cad6:	70e0      	strb	r0, [r4, #3]
    cad8:	7948      	ldrb	r0, [r1, #5]
    cada:	7120      	strb	r0, [r4, #4]
    cadc:	7988      	ldrb	r0, [r1, #6]
    cade:	7160      	strb	r0, [r4, #5]
    cae0:	88c8      	ldrh	r0, [r1, #6]
    cae2:	0a00      	lsrs	r0, r0, #8
    cae4:	71a0      	strb	r0, [r4, #6]
    cae6:	7a08      	ldrb	r0, [r1, #8]
    cae8:	71e0      	strb	r0, [r4, #7]
    caea:	2006      	movs	r0, #6
    caec:	e7d9      	b.n	caa2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    caee:	7023      	strb	r3, [r4, #0]
    caf0:	20a1      	movs	r0, #161	; 0xa1
    caf2:	70a0      	strb	r0, [r4, #2]
    caf4:	7908      	ldrb	r0, [r1, #4]
    caf6:	70e0      	strb	r0, [r4, #3]
    caf8:	7948      	ldrb	r0, [r1, #5]
    cafa:	7120      	strb	r0, [r4, #4]
    cafc:	2000      	movs	r0, #0
    cafe:	7160      	strb	r0, [r4, #5]
    cb00:	2004      	movs	r0, #4
    cb02:	e7ce      	b.n	caa2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cb04:	7023      	strb	r3, [r4, #0]
    cb06:	20a2      	movs	r0, #162	; 0xa2
    cb08:	70a0      	strb	r0, [r4, #2]
    cb0a:	7908      	ldrb	r0, [r1, #4]
    cb0c:	70e0      	strb	r0, [r4, #3]
    cb0e:	8888      	ldrh	r0, [r1, #4]
    cb10:	0a00      	lsrs	r0, r0, #8
    cb12:	7120      	strb	r0, [r4, #4]
    cb14:	7988      	ldrb	r0, [r1, #6]
    cb16:	7160      	strb	r0, [r4, #5]
    cb18:	88c8      	ldrh	r0, [r1, #6]
    cb1a:	0a00      	lsrs	r0, r0, #8
    cb1c:	71a0      	strb	r0, [r4, #6]
    cb1e:	7a08      	ldrb	r0, [r1, #8]
    cb20:	71e0      	strb	r0, [r4, #7]
    cb22:	8908      	ldrh	r0, [r1, #8]
    cb24:	0a00      	lsrs	r0, r0, #8
    cb26:	7220      	strb	r0, [r4, #8]
    cb28:	7a88      	ldrb	r0, [r1, #10]
    cb2a:	7260      	strb	r0, [r4, #9]
    cb2c:	8948      	ldrh	r0, [r1, #10]
    cb2e:	0a00      	lsrs	r0, r0, #8
    cb30:	72a0      	strb	r0, [r4, #10]
    cb32:	7b08      	ldrb	r0, [r1, #12]
    cb34:	72e0      	strb	r0, [r4, #11]
    cb36:	8988      	ldrh	r0, [r1, #12]
    cb38:	0a00      	lsrs	r0, r0, #8
    cb3a:	7320      	strb	r0, [r4, #12]
    cb3c:	200b      	movs	r0, #11
    cb3e:	e7b0      	b.n	caa2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cb40:	7023      	strb	r3, [r4, #0]
    cb42:	20a3      	movs	r0, #163	; 0xa3
    cb44:	70a0      	strb	r0, [r4, #2]
    cb46:	7908      	ldrb	r0, [r1, #4]
    cb48:	70e0      	strb	r0, [r4, #3]
    cb4a:	8888      	ldrh	r0, [r1, #4]
    cb4c:	0a00      	lsrs	r0, r0, #8
    cb4e:	7120      	strb	r0, [r4, #4]
    cb50:	7988      	ldrb	r0, [r1, #6]
    cb52:	7160      	strb	r0, [r4, #5]
    cb54:	79c8      	ldrb	r0, [r1, #7]
    cb56:	71a0      	strb	r0, [r4, #6]
    cb58:	2005      	movs	r0, #5
    cb5a:	e7a2      	b.n	caa2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cb5c:	7022      	strb	r2, [r4, #0]
    cb5e:	2013      	movs	r0, #19
    cb60:	70a0      	strb	r0, [r4, #2]
    cb62:	7908      	ldrb	r0, [r1, #4]
    cb64:	70e0      	strb	r0, [r4, #3]
    cb66:	7948      	ldrb	r0, [r1, #5]
    cb68:	7120      	strb	r0, [r4, #4]
    cb6a:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cb6e:	f8c4 0005 	str.w	r0, [r4, #5]
    cb72:	8948      	ldrh	r0, [r1, #10]
    cb74:	f8a4 0009 	strh.w	r0, [r4, #9]
    cb78:	e020      	b.n	cbbc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    cb7a:	7023      	strb	r3, [r4, #0]
    cb7c:	20a4      	movs	r0, #164	; 0xa4
    cb7e:	70a0      	strb	r0, [r4, #2]
    cb80:	7908      	ldrb	r0, [r1, #4]
    cb82:	70e0      	strb	r0, [r4, #3]
    cb84:	8888      	ldrh	r0, [r1, #4]
    cb86:	0a00      	lsrs	r0, r0, #8
    cb88:	7120      	strb	r0, [r4, #4]
    cb8a:	7988      	ldrb	r0, [r1, #6]
    cb8c:	7160      	strb	r0, [r4, #5]
    cb8e:	79c8      	ldrb	r0, [r1, #7]
    cb90:	71a0      	strb	r0, [r4, #6]
    cb92:	2007      	movs	r0, #7
    cb94:	e785      	b.n	caa2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cb96:	7023      	strb	r3, [r4, #0]
    cb98:	2080      	movs	r0, #128	; 0x80
    cb9a:	70a0      	strb	r0, [r4, #2]
    cb9c:	888a      	ldrh	r2, [r1, #4]
    cb9e:	f8a4 2003 	strh.w	r2, [r4, #3]
    cba2:	88ca      	ldrh	r2, [r1, #6]
    cba4:	f8a4 2005 	strh.w	r2, [r4, #5]
    cba8:	7a0a      	ldrb	r2, [r1, #8]
    cbaa:	71e2      	strb	r2, [r4, #7]
    cbac:	7a4a      	ldrb	r2, [r1, #9]
    cbae:	8122      	strh	r2, [r4, #8]
    cbb0:	7a8a      	ldrb	r2, [r1, #10]
    cbb2:	72a2      	strb	r2, [r4, #10]
    cbb4:	7ac9      	ldrb	r1, [r1, #11]
    cbb6:	f001 0101 	and.w	r1, r1, #1
    cbba:	72e1      	strb	r1, [r4, #11]
    cbbc:	200a      	movs	r0, #10
    cbbe:	e770      	b.n	caa2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>

0000cbc0 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    cbc0:	223e      	movs	r2, #62	; 0x3e
    cbc2:	7002      	strb	r2, [r0, #0]
    cbc4:	2201      	movs	r2, #1
    cbc6:	7082      	strb	r2, [r0, #2]
    cbc8:	790a      	ldrb	r2, [r1, #4]
    cbca:	70c2      	strb	r2, [r0, #3]
    cbcc:	798a      	ldrb	r2, [r1, #6]
    cbce:	7102      	strb	r2, [r0, #4]
    cbd0:	88ca      	ldrh	r2, [r1, #6]
    cbd2:	0a12      	lsrs	r2, r2, #8
    cbd4:	7142      	strb	r2, [r0, #5]
    cbd6:	7a0a      	ldrb	r2, [r1, #8]
    cbd8:	7182      	strb	r2, [r0, #6]
    cbda:	7a4a      	ldrb	r2, [r1, #9]
    cbdc:	71c2      	strb	r2, [r0, #7]
    cbde:	f8d1 200a 	ldr.w	r2, [r1, #10]
    cbe2:	6082      	str	r2, [r0, #8]
    cbe4:	89ca      	ldrh	r2, [r1, #14]
    cbe6:	8182      	strh	r2, [r0, #12]
    cbe8:	7c0a      	ldrb	r2, [r1, #16]
    cbea:	7382      	strb	r2, [r0, #14]
    cbec:	8a0a      	ldrh	r2, [r1, #16]
    cbee:	0a12      	lsrs	r2, r2, #8
    cbf0:	73c2      	strb	r2, [r0, #15]
    cbf2:	7c8a      	ldrb	r2, [r1, #18]
    cbf4:	7402      	strb	r2, [r0, #16]
    cbf6:	8a4a      	ldrh	r2, [r1, #18]
    cbf8:	0a12      	lsrs	r2, r2, #8
    cbfa:	7442      	strb	r2, [r0, #17]
    cbfc:	7d0a      	ldrb	r2, [r1, #20]
    cbfe:	7482      	strb	r2, [r0, #18]
    cc00:	8a8a      	ldrh	r2, [r1, #20]
    cc02:	0a12      	lsrs	r2, r2, #8
    cc04:	74c2      	strb	r2, [r0, #19]
    cc06:	7d89      	ldrb	r1, [r1, #22]
    cc08:	7501      	strb	r1, [r0, #20]
    cc0a:	2013      	movs	r0, #19
    cc0c:	4770      	bx	lr

0000cc0e <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    cc0e:	223e      	movs	r2, #62	; 0x3e
    cc10:	7002      	strb	r2, [r0, #0]
    cc12:	2201      	movs	r2, #1
    cc14:	7082      	strb	r2, [r0, #2]
    cc16:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    cc1a:	70c2      	strb	r2, [r0, #3]
    cc1c:	788a      	ldrb	r2, [r1, #2]
    cc1e:	7102      	strb	r2, [r0, #4]
    cc20:	884a      	ldrh	r2, [r1, #2]
    cc22:	0a12      	lsrs	r2, r2, #8
    cc24:	7142      	strb	r2, [r0, #5]
    cc26:	790a      	ldrb	r2, [r1, #4]
    cc28:	7182      	strb	r2, [r0, #6]
    cc2a:	794a      	ldrb	r2, [r1, #5]
    cc2c:	71c2      	strb	r2, [r0, #7]
    cc2e:	f8d1 2006 	ldr.w	r2, [r1, #6]
    cc32:	6082      	str	r2, [r0, #8]
    cc34:	894a      	ldrh	r2, [r1, #10]
    cc36:	8182      	strh	r2, [r0, #12]
    cc38:	7e0a      	ldrb	r2, [r1, #24]
    cc3a:	7382      	strb	r2, [r0, #14]
    cc3c:	8b0a      	ldrh	r2, [r1, #24]
    cc3e:	0a12      	lsrs	r2, r2, #8
    cc40:	73c2      	strb	r2, [r0, #15]
    cc42:	7e8a      	ldrb	r2, [r1, #26]
    cc44:	7402      	strb	r2, [r0, #16]
    cc46:	8b4a      	ldrh	r2, [r1, #26]
    cc48:	0a12      	lsrs	r2, r2, #8
    cc4a:	7442      	strb	r2, [r0, #17]
    cc4c:	7f0a      	ldrb	r2, [r1, #28]
    cc4e:	7482      	strb	r2, [r0, #18]
    cc50:	8b8a      	ldrh	r2, [r1, #28]
    cc52:	0a12      	lsrs	r2, r2, #8
    cc54:	74c2      	strb	r2, [r0, #19]
    cc56:	7f89      	ldrb	r1, [r1, #30]
    cc58:	7501      	strb	r1, [r0, #20]
    cc5a:	2113      	movs	r1, #19
    cc5c:	7041      	strb	r1, [r0, #1]
    cc5e:	4608      	mov	r0, r1
    cc60:	4770      	bx	lr

0000cc62 <sdc_hci_data_get>:
    cc62:	b510      	push	{r4, lr}
    cc64:	b120      	cbz	r0, cc70 <sdc_hci_data_get+0xe>
    cc66:	f7ff fda3 	bl	c7b0 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    cc6a:	b120      	cbz	r0, cc76 <sdc_hci_data_get+0x14>
    cc6c:	2000      	movs	r0, #0
    cc6e:	bd10      	pop	{r4, pc}
    cc70:	f06f 0015 	mvn.w	r0, #21
    cc74:	bd10      	pop	{r4, pc}
    cc76:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cc7a:	bd10      	pop	{r4, pc}

0000cc7c <sdc_hci_data_put>:
    cc7c:	b510      	push	{r4, lr}
    cc7e:	f06f 0415 	mvn.w	r4, #21
    cc82:	b120      	cbz	r0, cc8e <sdc_hci_data_put+0x12>
    cc84:	f7ff fda2 	bl	c7cc <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    cc88:	b108      	cbz	r0, cc8e <sdc_hci_data_put+0x12>
    cc8a:	2000      	movs	r0, #0
    cc8c:	bd10      	pop	{r4, pc}
    cc8e:	4620      	mov	r0, r4
    cc90:	bd10      	pop	{r4, pc}

0000cc92 <sdc_hci_evt_get>:
    cc92:	b510      	push	{r4, lr}
    cc94:	b120      	cbz	r0, cca0 <sdc_hci_evt_get+0xe>
    cc96:	f7ff fda2 	bl	c7de <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    cc9a:	b120      	cbz	r0, cca6 <sdc_hci_evt_get+0x14>
    cc9c:	2000      	movs	r0, #0
    cc9e:	bd10      	pop	{r4, pc}
    cca0:	f06f 0015 	mvn.w	r0, #21
    cca4:	bd10      	pop	{r4, pc}
    cca6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    ccaa:	bd10      	pop	{r4, pc}

0000ccac <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    ccac:	f002 bcb7 	b.w	f61e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000ccb0 <sdc_hci_cmd_cb_read_transmit_power_level>:
    ccb0:	f002 bcf9 	b.w	f6a6 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000ccb4 <sdc_hci_cmd_cb_set_event_mask>:
    ccb4:	b510      	push	{r4, lr}
    ccb6:	f7f7 ffb7 	bl	4c28 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    ccba:	2000      	movs	r0, #0
    ccbc:	bd10      	pop	{r4, pc}

0000ccbe <sdc_hci_cmd_cb_set_event_mask_page_2>:
    ccbe:	b510      	push	{r4, lr}
    ccc0:	f7f7 ffc0 	bl	4c44 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    ccc4:	2000      	movs	r0, #0
    ccc6:	bd10      	pop	{r4, pc}

0000ccc8 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    ccc8:	f002 bd09 	b.w	f6de <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000cccc <sdc_hci_cmd_vs_conn_event_extend>:
    cccc:	b508      	push	{r3, lr}
    ccce:	7800      	ldrb	r0, [r0, #0]
    ccd0:	f88d 0000 	strb.w	r0, [sp]
    ccd4:	4668      	mov	r0, sp
    ccd6:	f002 fc23 	bl	f520 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    ccda:	bd08      	pop	{r3, pc}

0000ccdc <sdc_hci_cmd_vs_conn_update>:
    ccdc:	2001      	movs	r0, #1
    ccde:	4770      	bx	lr

0000cce0 <sdc_hci_cmd_vs_event_length_set>:
    cce0:	f7fd be2a 	b.w	a938 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000cce4 <sdc_hci_cmd_vs_llpm_mode_set>:
    cce4:	2001      	movs	r0, #1
    cce6:	4770      	bx	lr

0000cce8 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    cce8:	7800      	ldrb	r0, [r0, #0]
    ccea:	b100      	cbz	r0, ccee <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    ccec:	2001      	movs	r0, #1
    ccee:	f002 bb7d 	b.w	f3ec <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000ccf2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    ccf2:	b570      	push	{r4, r5, r6, lr}
    ccf4:	4605      	mov	r5, r0
    ccf6:	2210      	movs	r2, #16
    ccf8:	2100      	movs	r1, #0
    ccfa:	f7ff fc80 	bl	c5fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ccfe:	2210      	movs	r2, #16
    cd00:	2100      	movs	r1, #0
    cd02:	f105 0010 	add.w	r0, r5, #16
    cd06:	f7ff fc7a 	bl	c5fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cd0a:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    cd0e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    cd12:	1c40      	adds	r0, r0, #1
    cd14:	d10b      	bne.n	cd2e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cd16:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    cd1a:	1c40      	adds	r0, r0, #1
    cd1c:	d107      	bne.n	cd2e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cd1e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    cd22:	1c40      	adds	r0, r0, #1
    cd24:	d103      	bne.n	cd2e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cd26:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    cd2a:	1c40      	adds	r0, r0, #1
    cd2c:	d00b      	beq.n	cd46 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    cd2e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    cd32:	6128      	str	r0, [r5, #16]
    cd34:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    cd38:	6168      	str	r0, [r5, #20]
    cd3a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    cd3e:	61a8      	str	r0, [r5, #24]
    cd40:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    cd44:	61e8      	str	r0, [r5, #28]
    cd46:	2000      	movs	r0, #0
    cd48:	f7f8 fcb8 	bl	56bc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    cd4c:	b918      	cbnz	r0, cd56 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    cd4e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    cd52:	07c0      	lsls	r0, r0, #31
    cd54:	d118      	bne.n	cd88 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    cd56:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    cd5a:	1c40      	adds	r0, r0, #1
    cd5c:	d10b      	bne.n	cd76 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cd5e:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    cd62:	1c40      	adds	r0, r0, #1
    cd64:	d107      	bne.n	cd76 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cd66:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    cd6a:	1c40      	adds	r0, r0, #1
    cd6c:	d103      	bne.n	cd76 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cd6e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    cd72:	1c40      	adds	r0, r0, #1
    cd74:	d008      	beq.n	cd88 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    cd76:	f854 0f90 	ldr.w	r0, [r4, #144]!
    cd7a:	6028      	str	r0, [r5, #0]
    cd7c:	6860      	ldr	r0, [r4, #4]
    cd7e:	6068      	str	r0, [r5, #4]
    cd80:	68a0      	ldr	r0, [r4, #8]
    cd82:	60a8      	str	r0, [r5, #8]
    cd84:	68e0      	ldr	r0, [r4, #12]
    cd86:	60e8      	str	r0, [r5, #12]
    cd88:	2000      	movs	r0, #0
    cd8a:	bd70      	pop	{r4, r5, r6, pc}

0000cd8c <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    cd8c:	b570      	push	{r4, r5, r6, lr}
    cd8e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    cd92:	4604      	mov	r4, r0
    cd94:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    cd98:	1c40      	adds	r0, r0, #1
    cd9a:	d105      	bne.n	cda8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    cd9c:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    cda0:	43c0      	mvns	r0, r0
    cda2:	0400      	lsls	r0, r0, #16
    cda4:	0c00      	lsrs	r0, r0, #16
    cda6:	d03a      	beq.n	ce1e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    cda8:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    cdac:	07c0      	lsls	r0, r0, #31
    cdae:	d036      	beq.n	ce1e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    cdb0:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    cdb4:	f8c4 0001 	str.w	r0, [r4, #1]
    cdb8:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    cdbc:	f8a4 0005 	strh.w	r0, [r4, #5]
    cdc0:	79a0      	ldrb	r0, [r4, #6]
    cdc2:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    cdc6:	71a0      	strb	r0, [r4, #6]
    cdc8:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    cdcc:	1c40      	adds	r0, r0, #1
    cdce:	d00f      	beq.n	cdf0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    cdd0:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    cdd4:	1c40      	adds	r0, r0, #1
    cdd6:	d00b      	beq.n	cdf0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    cdd8:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    cddc:	1c40      	adds	r0, r0, #1
    cdde:	d007      	beq.n	cdf0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    cde0:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    cde4:	1c40      	adds	r0, r0, #1
    cde6:	d003      	beq.n	cdf0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    cde8:	2000      	movs	r0, #0
    cdea:	f7f8 fc67 	bl	56bc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    cdee:	b140      	cbz	r0, ce02 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    cdf0:	2210      	movs	r2, #16
    cdf2:	2100      	movs	r1, #0
    cdf4:	1de0      	adds	r0, r4, #7
    cdf6:	f7ff fc02 	bl	c5fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cdfa:	2001      	movs	r0, #1
    cdfc:	7020      	strb	r0, [r4, #0]
    cdfe:	2000      	movs	r0, #0
    ce00:	bd70      	pop	{r4, r5, r6, pc}
    ce02:	f855 0f90 	ldr.w	r0, [r5, #144]!
    ce06:	f8c4 0007 	str.w	r0, [r4, #7]
    ce0a:	6868      	ldr	r0, [r5, #4]
    ce0c:	f8c4 000b 	str.w	r0, [r4, #11]
    ce10:	68a8      	ldr	r0, [r5, #8]
    ce12:	f8c4 000f 	str.w	r0, [r4, #15]
    ce16:	68e8      	ldr	r0, [r5, #12]
    ce18:	f8c4 0013 	str.w	r0, [r4, #19]
    ce1c:	e7ed      	b.n	cdfa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    ce1e:	2000      	movs	r0, #0
    ce20:	e7ec      	b.n	cdfc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x70>

0000ce22 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    ce22:	f002 bb63 	b.w	f4ec <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000ce26 <sdc_hci_cmd_ip_read_bd_addr>:
    ce26:	f002 bc0b 	b.w	f640 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000ce2a <sdc_hci_cmd_ip_read_local_version_information>:
    ce2a:	f7fd bd93 	b.w	a954 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000ce2e <sdc_hci_cmd_le_add_device_to_resolving_list>:
    ce2e:	f002 b81a 	b.w	ee66 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000ce32 <sdc_hci_cmd_le_add_device_to_white_list>:
    ce32:	f002 b833 	b.w	ee9c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000ce36 <sdc_hci_cmd_le_clear_resolving_list>:
    ce36:	f002 b848 	b.w	eeca <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000ce3a <sdc_hci_cmd_le_clear_white_list>:
    ce3a:	f002 b853 	b.w	eee4 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000ce3e <sdc_hci_cmd_le_encrypt>:
    ce3e:	f002 b85b 	b.w	eef8 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000ce42 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    ce42:	8802      	ldrh	r2, [r0, #0]
    ce44:	800a      	strh	r2, [r1, #0]
    ce46:	f002 b860 	b.w	ef0a <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000ce4a <sdc_hci_cmd_le_long_term_key_request_reply>:
    ce4a:	8802      	ldrh	r2, [r0, #0]
    ce4c:	800a      	strh	r2, [r1, #0]
    ce4e:	f002 b875 	b.w	ef3c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000ce52 <sdc_hci_cmd_le_rand>:
    ce52:	f002 b89d 	b.w	ef90 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000ce56 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    ce56:	f002 b8a1 	b.w	ef9c <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000ce5a <sdc_hci_cmd_le_read_buffer_size>:
    ce5a:	f7fd bca3 	b.w	a7a4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000ce5e <sdc_hci_cmd_le_read_channel_map>:
    ce5e:	f7fd bcab 	b.w	a7b8 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000ce62 <sdc_hci_cmd_le_read_max_data_length>:
    ce62:	f002 b8a4 	b.w	efae <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000ce66 <sdc_hci_cmd_le_read_phy>:
    ce66:	f7fd bcc9 	b.w	a7fc <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000ce6a <sdc_hci_cmd_le_read_remote_features>:
    ce6a:	f7fd bcef 	b.w	a84c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000ce6e <sdc_hci_cmd_le_read_resolving_list_size>:
    ce6e:	f002 b8ae 	b.w	efce <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000ce72 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    ce72:	f7fd bd0b 	b.w	a88c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000ce76 <sdc_hci_cmd_le_read_transmit_power>:
    ce76:	f002 b8ae 	b.w	efd6 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000ce7a <sdc_hci_cmd_le_read_white_list_size>:
    ce7a:	f002 b8b5 	b.w	efe8 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000ce7e <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    ce7e:	f002 b8b7 	b.w	eff0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000ce82 <sdc_hci_cmd_le_remove_device_from_white_list>:
    ce82:	f002 b8ce 	b.w	f022 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000ce86 <sdc_hci_cmd_le_set_address_resolution_enable>:
    ce86:	f002 b8e1 	b.w	f04c <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000ce8a <sdc_hci_cmd_le_set_adv_data>:
    ce8a:	f002 b8ed 	b.w	f068 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000ce8e <sdc_hci_cmd_le_set_adv_enable>:
    ce8e:	f002 b927 	b.w	f0e0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000ce92 <sdc_hci_cmd_le_set_adv_params>:
    ce92:	f002 b958 	b.w	f146 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000ce96 <sdc_hci_cmd_le_set_data_length>:
    ce96:	f002 b9e8 	b.w	f26a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000ce9a <sdc_hci_cmd_le_set_default_phy>:
    ce9a:	f7fd bd07 	b.w	a8ac <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000ce9e <sdc_hci_cmd_le_set_event_mask>:
    ce9e:	b510      	push	{r4, lr}
    cea0:	f7f7 febc 	bl	4c1c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    cea4:	2000      	movs	r0, #0
    cea6:	bd10      	pop	{r4, pc}

0000cea8 <sdc_hci_cmd_le_set_phy>:
    cea8:	f002 ba06 	b.w	f2b8 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000ceac <sdc_hci_cmd_le_set_privacy_mode>:
    ceac:	f002 ba24 	b.w	f2f8 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000ceb0 <sdc_hci_cmd_le_set_random_address>:
    ceb0:	f002 ba38 	b.w	f324 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000ceb4 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    ceb4:	f002 ba44 	b.w	f340 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000ceb8 <sdc_hci_cmd_le_set_scan_response_data>:
    ceb8:	f002 ba4b 	b.w	f352 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000cebc <sdc_hci_cmd_le_write_suggested_default_data_length>:
    cebc:	f002 ba7f 	b.w	f3be <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000cec0 <sdc_hci_cmd_lc_disconnect>:
    cec0:	f001 bf81 	b.w	edc6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000cec4 <sdc_hci_cmd_lc_read_remote_version_information>:
    cec4:	f002 bbc8 	b.w	f658 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    cec8:	b570      	push	{r4, r5, r6, lr}
    ceca:	880b      	ldrh	r3, [r1, #0]
    cecc:	7f04      	ldrb	r4, [r0, #28]
    cece:	f100 0524 	add.w	r5, r0, #36	; 0x24
    ced2:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    ced6:	8802      	ldrh	r2, [r0, #0]
    ced8:	4435      	add	r5, r6
    ceda:	1da4      	adds	r4, r4, #6
    cedc:	882d      	ldrh	r5, [r5, #0]
    cede:	4422      	add	r2, r4
    cee0:	b292      	uxth	r2, r2
    cee2:	4425      	add	r5, r4
    cee4:	1e54      	subs	r4, r2, #1
    cee6:	442c      	add	r4, r5
    cee8:	fb94 f4f2 	sdiv	r4, r4, r2
    ceec:	fb02 6204 	mla	r2, r2, r4, r6
    cef0:	8840      	ldrh	r0, [r0, #2]
    cef2:	b292      	uxth	r2, r2
    cef4:	4290      	cmp	r0, r2
    cef6:	d903      	bls.n	cf00 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    cef8:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    cefc:	4310      	orrs	r0, r2
    cefe:	e002      	b.n	cf06 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    cf00:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    cf04:	4398      	bics	r0, r3
    cf06:	8008      	strh	r0, [r1, #0]
    cf08:	bd70      	pop	{r4, r5, r6, pc}
    cf0a:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    cf0e:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    cf12:	429a      	cmp	r2, r3
    cf14:	d107      	bne.n	cf26 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    cf16:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    cf1a:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    cf1e:	4288      	cmp	r0, r1
    cf20:	d001      	beq.n	cf26 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    cf22:	2001      	movs	r0, #1
    cf24:	4770      	bx	lr
    cf26:	2000      	movs	r0, #0
    cf28:	4770      	bx	lr

0000cf2a <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    cf2a:	b570      	push	{r4, r5, r6, lr}
    cf2c:	7f00      	ldrb	r0, [r0, #28]
    cf2e:	461c      	mov	r4, r3
    cf30:	1d80      	adds	r0, r0, #6
    cf32:	4408      	add	r0, r1
    cf34:	4613      	mov	r3, r2
    cf36:	8809      	ldrh	r1, [r1, #0]
    cf38:	9a04      	ldr	r2, [sp, #16]
    cf3a:	1cc9      	adds	r1, r1, #3
    cf3c:	b289      	uxth	r1, r1
    cf3e:	1915      	adds	r5, r2, r4
    cf40:	1ec0      	subs	r0, r0, #3
    cf42:	428d      	cmp	r5, r1
    cf44:	d805      	bhi.n	cf52 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    cf46:	1881      	adds	r1, r0, r2
    cf48:	4622      	mov	r2, r4
    cf4a:	4618      	mov	r0, r3
    cf4c:	f7ff fadd 	bl	c50a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cf50:	e000      	b.n	cf54 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    cf52:	2400      	movs	r4, #0
    cf54:	4620      	mov	r0, r4
    cf56:	bd70      	pop	{r4, r5, r6, pc}

0000cf58 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    cf58:	b570      	push	{r4, r5, r6, lr}
    cf5a:	7f00      	ldrb	r0, [r0, #28]
    cf5c:	461c      	mov	r4, r3
    cf5e:	1d80      	adds	r0, r0, #6
    cf60:	4408      	add	r0, r1
    cf62:	4613      	mov	r3, r2
    cf64:	8809      	ldrh	r1, [r1, #0]
    cf66:	9a04      	ldr	r2, [sp, #16]
    cf68:	1cc9      	adds	r1, r1, #3
    cf6a:	b289      	uxth	r1, r1
    cf6c:	1915      	adds	r5, r2, r4
    cf6e:	1ec0      	subs	r0, r0, #3
    cf70:	428d      	cmp	r5, r1
    cf72:	d805      	bhi.n	cf80 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    cf74:	4410      	add	r0, r2
    cf76:	4622      	mov	r2, r4
    cf78:	4619      	mov	r1, r3
    cf7a:	f7ff fac6 	bl	c50a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cf7e:	e000      	b.n	cf82 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    cf80:	2400      	movs	r4, #0
    cf82:	4620      	mov	r0, r4
    cf84:	bd70      	pop	{r4, r5, r6, pc}

0000cf86 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    cf86:	8881      	ldrh	r1, [r0, #4]
    cf88:	88c0      	ldrh	r0, [r0, #6]
    cf8a:	4288      	cmp	r0, r1
    cf8c:	d101      	bne.n	cf92 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    cf8e:	2001      	movs	r0, #1
    cf90:	4770      	bx	lr
    cf92:	2000      	movs	r0, #0
    cf94:	4770      	bx	lr

0000cf96 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    cf96:	8881      	ldrh	r1, [r0, #4]
    cf98:	8900      	ldrh	r0, [r0, #8]
    cf9a:	4288      	cmp	r0, r1
    cf9c:	d101      	bne.n	cfa2 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    cf9e:	2001      	movs	r0, #1
    cfa0:	4770      	bx	lr
    cfa2:	2000      	movs	r0, #0
    cfa4:	4770      	bx	lr

0000cfa6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    cfa6:	b570      	push	{r4, r5, r6, lr}
    cfa8:	4604      	mov	r4, r0
    cfaa:	f100 0124 	add.w	r1, r0, #36	; 0x24
    cfae:	8880      	ldrh	r0, [r0, #4]
    cfb0:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    cfb4:	4401      	add	r1, r0
    cfb6:	8a20      	ldrh	r0, [r4, #16]
    cfb8:	2800      	cmp	r0, #0
    cfba:	d01a      	beq.n	cff2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    cfbc:	89a2      	ldrh	r2, [r4, #12]
    cfbe:	2500      	movs	r5, #0
    cfc0:	4410      	add	r0, r2
    cfc2:	b280      	uxth	r0, r0
    cfc4:	81a0      	strh	r0, [r4, #12]
    cfc6:	880a      	ldrh	r2, [r1, #0]
    cfc8:	4290      	cmp	r0, r2
    cfca:	d905      	bls.n	cfd8 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    cfcc:	f44f 71a5 	mov.w	r1, #330	; 0x14a
    cfd0:	f04f 0014 	mov.w	r0, #20
    cfd4:	f7f7 fc84 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cfd8:	d109      	bne.n	cfee <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    cfda:	69a0      	ldr	r0, [r4, #24]
    cfdc:	b108      	cbz	r0, cfe2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    cfde:	7f40      	ldrb	r0, [r0, #29]
    cfe0:	7088      	strb	r0, [r1, #2]
    cfe2:	f104 0104 	add.w	r1, r4, #4
    cfe6:	4620      	mov	r0, r4
    cfe8:	f7ff ff6e 	bl	cec8 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cfec:	81a5      	strh	r5, [r4, #12]
    cfee:	8225      	strh	r5, [r4, #16]
    cff0:	2001      	movs	r0, #1
    cff2:	bd70      	pop	{r4, r5, r6, pc}

0000cff4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    cff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cff8:	4604      	mov	r4, r0
    cffa:	f100 0324 	add.w	r3, r0, #36	; 0x24
    cffe:	88c0      	ldrh	r0, [r0, #6]
    d000:	460e      	mov	r6, r1
    d002:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d006:	8a60      	ldrh	r0, [r4, #18]
    d008:	19d9      	adds	r1, r3, r7
    d00a:	b108      	cbz	r0, d010 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    d00c:	42b0      	cmp	r0, r6
    d00e:	d202      	bcs.n	d016 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    d010:	2000      	movs	r0, #0
    d012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d016:	89e0      	ldrh	r0, [r4, #14]
    d018:	2500      	movs	r5, #0
    d01a:	b140      	cbz	r0, d02e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    d01c:	f8b1 c000 	ldrh.w	ip, [r1]
    d020:	4560      	cmp	r0, ip
    d022:	d008      	beq.n	d036 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x42>
    d024:	f240 211f 	movw	r1, #543	; 0x21f
    d028:	2014      	movs	r0, #20
    d02a:	f7f7 fc59 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d02e:	7f60      	ldrb	r0, [r4, #29]
    d030:	7088      	strb	r0, [r1, #2]
    d032:	800d      	strh	r5, [r1, #0]
    d034:	e00e      	b.n	d054 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x60>
    d036:	f894 c01c 	ldrb.w	ip, [r4, #28]
    d03a:	4418      	add	r0, r3
    d03c:	f10c 0c06 	add.w	ip, ip, #6
    d040:	44bc      	add	ip, r7
    d042:	4460      	add	r0, ip
    d044:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    d048:	f820 cc03 	strh.w	ip, [r0, #-3]
    d04c:	f894 c020 	ldrb.w	ip, [r4, #32]
    d050:	f800 cc01 	strb.w	ip, [r0, #-1]
    d054:	89e0      	ldrh	r0, [r4, #14]
    d056:	4430      	add	r0, r6
    d058:	81e0      	strh	r0, [r4, #14]
    d05a:	8808      	ldrh	r0, [r1, #0]
    d05c:	4430      	add	r0, r6
    d05e:	8008      	strh	r0, [r1, #0]
    d060:	b16a      	cbz	r2, d07e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8a>
    d062:	1da1      	adds	r1, r4, #6
    d064:	4620      	mov	r0, r4
    d066:	f7ff ff2f 	bl	cec8 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d06a:	81e5      	strh	r5, [r4, #14]
    d06c:	7f60      	ldrb	r0, [r4, #29]
    d06e:	1c40      	adds	r0, r0, #1
    d070:	7760      	strb	r0, [r4, #29]
    d072:	7da0      	ldrb	r0, [r4, #22]
    d074:	b108      	cbz	r0, d07a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x86>
    d076:	88e0      	ldrh	r0, [r4, #6]
    d078:	82a0      	strh	r0, [r4, #20]
    d07a:	75a5      	strb	r5, [r4, #22]
    d07c:	e00b      	b.n	d096 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xa2>
    d07e:	7f20      	ldrb	r0, [r4, #28]
    d080:	89e1      	ldrh	r1, [r4, #14]
    d082:	1d80      	adds	r0, r0, #6
    d084:	4438      	add	r0, r7
    d086:	4419      	add	r1, r3
    d088:	4408      	add	r0, r1
    d08a:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d08e:	83e1      	strh	r1, [r4, #30]
    d090:	7880      	ldrb	r0, [r0, #2]
    d092:	f884 0020 	strb.w	r0, [r4, #32]
    d096:	8265      	strh	r5, [r4, #18]
    d098:	75e5      	strb	r5, [r4, #23]
    d09a:	2001      	movs	r0, #1
    d09c:	e7b9      	b.n	d012 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d09e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d09e:	b510      	push	{r4, lr}
    d0a0:	4604      	mov	r4, r0
    d0a2:	88c0      	ldrh	r0, [r0, #6]
    d0a4:	88a1      	ldrh	r1, [r4, #4]
    d0a6:	4281      	cmp	r1, r0
    d0a8:	d007      	beq.n	d0ba <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d0aa:	89a0      	ldrh	r0, [r4, #12]
    d0ac:	b928      	cbnz	r0, d0ba <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d0ae:	8a20      	ldrh	r0, [r4, #16]
    d0b0:	b918      	cbnz	r0, d0ba <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d0b2:	88a0      	ldrh	r0, [r4, #4]
    d0b4:	8aa1      	ldrh	r1, [r4, #20]
    d0b6:	4288      	cmp	r0, r1
    d0b8:	d101      	bne.n	d0be <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    d0ba:	2000      	movs	r0, #0
    d0bc:	bd10      	pop	{r4, pc}
    d0be:	1d21      	adds	r1, r4, #4
    d0c0:	4620      	mov	r0, r4
    d0c2:	f7ff ff01 	bl	cec8 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d0c6:	2000      	movs	r0, #0
    d0c8:	8220      	strh	r0, [r4, #16]
    d0ca:	2001      	movs	r0, #1
    d0cc:	bd10      	pop	{r4, pc}

0000d0ce <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d0ce:	b510      	push	{r4, lr}
    d0d0:	4604      	mov	r4, r0
    d0d2:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d0d6:	88c0      	ldrh	r0, [r0, #6]
    d0d8:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d0dc:	4402      	add	r2, r0
    d0de:	8820      	ldrh	r0, [r4, #0]
    d0e0:	2845      	cmp	r0, #69	; 0x45
    d0e2:	d200      	bcs.n	d0e6 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d0e4:	2045      	movs	r0, #69	; 0x45
    d0e6:	4288      	cmp	r0, r1
    d0e8:	d204      	bcs.n	d0f4 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d0ea:	f44f 7180 	mov.w	r1, #256	; 0x100
    d0ee:	2014      	movs	r0, #20
    d0f0:	f7f7 fbf6 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d0f4:	7de0      	ldrb	r0, [r4, #23]
    d0f6:	2800      	cmp	r0, #0
    d0f8:	d003      	beq.n	d102 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d0fa:	8810      	ldrh	r0, [r2, #0]
    d0fc:	4288      	cmp	r0, r1
    d0fe:	d201      	bcs.n	d104 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d100:	2000      	movs	r0, #0
    d102:	bd10      	pop	{r4, pc}
    d104:	8011      	strh	r1, [r2, #0]
    d106:	1da1      	adds	r1, r4, #6
    d108:	4620      	mov	r0, r4
    d10a:	f7ff fedd 	bl	cec8 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d10e:	2000      	movs	r0, #0
    d110:	75e0      	strb	r0, [r4, #23]
    d112:	2001      	movs	r0, #1
    d114:	bd10      	pop	{r4, pc}

0000d116 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    d116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d11a:	8941      	ldrh	r1, [r0, #10]
    d11c:	8886      	ldrh	r6, [r0, #4]
    d11e:	4604      	mov	r4, r0
    d120:	2500      	movs	r5, #0
    d122:	f100 070a 	add.w	r7, r0, #10
    d126:	e006      	b.n	d136 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    d128:	4639      	mov	r1, r7
    d12a:	4620      	mov	r0, r4
    d12c:	f7ff fecc 	bl	cec8 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d130:	1c6d      	adds	r5, r5, #1
    d132:	8961      	ldrh	r1, [r4, #10]
    d134:	b2ad      	uxth	r5, r5
    d136:	42b1      	cmp	r1, r6
    d138:	d1f6      	bne.n	d128 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    d13a:	4628      	mov	r0, r5
    d13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d140 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d140:	b530      	push	{r4, r5, lr}
    d142:	88c4      	ldrh	r4, [r0, #6]
    d144:	8881      	ldrh	r1, [r0, #4]
    d146:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d14a:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d14e:	4413      	add	r3, r2
    d150:	8882      	ldrh	r2, [r0, #4]
    d152:	8a85      	ldrh	r5, [r0, #20]
    d154:	42aa      	cmp	r2, r5
    d156:	d012      	beq.n	d17e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d158:	42a1      	cmp	r1, r4
    d15a:	d010      	beq.n	d17e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d15c:	8981      	ldrh	r1, [r0, #12]
    d15e:	b971      	cbnz	r1, d17e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d160:	6982      	ldr	r2, [r0, #24]
    d162:	b172      	cbz	r2, d182 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d164:	4610      	mov	r0, r2
    d166:	f7ff ff16 	bl	cf96 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    d16a:	b950      	cbnz	r0, d182 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d16c:	8910      	ldrh	r0, [r2, #8]
    d16e:	3224      	adds	r2, #36	; 0x24
    d170:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d174:	4410      	add	r0, r2
    d176:	7899      	ldrb	r1, [r3, #2]
    d178:	7880      	ldrb	r0, [r0, #2]
    d17a:	4288      	cmp	r0, r1
    d17c:	d101      	bne.n	d182 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d17e:	2000      	movs	r0, #0
    d180:	bd30      	pop	{r4, r5, pc}
    d182:	4618      	mov	r0, r3
    d184:	bd30      	pop	{r4, r5, pc}

0000d186 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d186:	7f00      	ldrb	r0, [r0, #28]
    d188:	1d80      	adds	r0, r0, #6
    d18a:	4408      	add	r0, r1
    d18c:	1ec0      	subs	r0, r0, #3
    d18e:	6010      	str	r0, [r2, #0]
    d190:	8808      	ldrh	r0, [r1, #0]
    d192:	4770      	bx	lr

0000d194 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d198:	460e      	mov	r6, r1
    d19a:	88c1      	ldrh	r1, [r0, #6]
    d19c:	8902      	ldrh	r2, [r0, #8]
    d19e:	4604      	mov	r4, r0
    d1a0:	f100 0824 	add.w	r8, r0, #36	; 0x24
    d1a4:	8800      	ldrh	r0, [r0, #0]
    d1a6:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    d1aa:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    d1ae:	2845      	cmp	r0, #69	; 0x45
    d1b0:	d200      	bcs.n	d1b4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d1b2:	2045      	movs	r0, #69	; 0x45
    d1b4:	42b0      	cmp	r0, r6
    d1b6:	d203      	bcs.n	d1c0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d1b8:	21c2      	movs	r1, #194	; 0xc2
    d1ba:	2014      	movs	r0, #20
    d1bc:	f7f7 fb90 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d1c0:	4610      	mov	r0, r2
    d1c2:	f7ff fea2 	bl	cf0a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d1c6:	b110      	cbz	r0, d1ce <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d1c8:	2000      	movs	r0, #0
    d1ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d1ce:	42af      	cmp	r7, r5
    d1d0:	d908      	bls.n	d1e4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d1d2:	7f21      	ldrb	r1, [r4, #28]
    d1d4:	1b78      	subs	r0, r7, r5
    d1d6:	1a40      	subs	r0, r0, r1
    d1d8:	1f80      	subs	r0, r0, #6
    d1da:	4286      	cmp	r6, r0
    d1dc:	dd02      	ble.n	d1e4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d1de:	2000      	movs	r0, #0
    d1e0:	75e0      	strb	r0, [r4, #23]
    d1e2:	e7f1      	b.n	d1c8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d1e4:	eb08 0005 	add.w	r0, r8, r5
    d1e8:	2101      	movs	r1, #1
    d1ea:	8006      	strh	r6, [r0, #0]
    d1ec:	75e1      	strb	r1, [r4, #23]
    d1ee:	e7ec      	b.n	d1ca <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d1f0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d1f0:	b538      	push	{r3, r4, r5, lr}
    d1f2:	88c4      	ldrh	r4, [r0, #6]
    d1f4:	8881      	ldrh	r1, [r0, #4]
    d1f6:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d1fa:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d1fe:	441a      	add	r2, r3
    d200:	42a1      	cmp	r1, r4
    d202:	d010      	beq.n	d226 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d204:	8983      	ldrh	r3, [r0, #12]
    d206:	8a05      	ldrh	r5, [r0, #16]
    d208:	8812      	ldrh	r2, [r2, #0]
    d20a:	442b      	add	r3, r5
    d20c:	4293      	cmp	r3, r2
    d20e:	d308      	bcc.n	d222 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d210:	f8ad 1000 	strh.w	r1, [sp]
    d214:	4669      	mov	r1, sp
    d216:	f7ff fe57 	bl	cec8 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d21a:	f8bd 0000 	ldrh.w	r0, [sp]
    d21e:	42a0      	cmp	r0, r4
    d220:	d001      	beq.n	d226 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d222:	2001      	movs	r0, #1
    d224:	bd38      	pop	{r3, r4, r5, pc}
    d226:	2000      	movs	r0, #0
    d228:	bd38      	pop	{r3, r4, r5, pc}

0000d22a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d22a:	b570      	push	{r4, r5, r6, lr}
    d22c:	88c6      	ldrh	r6, [r0, #6]
    d22e:	8885      	ldrh	r5, [r0, #4]
    d230:	4603      	mov	r3, r0
    d232:	f100 0424 	add.w	r4, r0, #36	; 0x24
    d236:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    d23a:	4420      	add	r0, r4
    d23c:	42b5      	cmp	r5, r6
    d23e:	d102      	bne.n	d246 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d240:	2000      	movs	r0, #0
    d242:	8218      	strh	r0, [r3, #16]
    d244:	bd70      	pop	{r4, r5, r6, pc}
    d246:	8804      	ldrh	r4, [r0, #0]
    d248:	899d      	ldrh	r5, [r3, #12]
    d24a:	7f1e      	ldrb	r6, [r3, #28]
    d24c:	1b64      	subs	r4, r4, r5
    d24e:	4435      	add	r5, r6
    d250:	4428      	add	r0, r5
    d252:	880d      	ldrh	r5, [r1, #0]
    d254:	b2a4      	uxth	r4, r4
    d256:	1cc0      	adds	r0, r0, #3
    d258:	42a5      	cmp	r5, r4
    d25a:	d900      	bls.n	d25e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d25c:	800c      	strh	r4, [r1, #0]
    d25e:	899c      	ldrh	r4, [r3, #12]
    d260:	b124      	cbz	r4, d26c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d262:	2400      	movs	r4, #0
    d264:	7014      	strb	r4, [r2, #0]
    d266:	8809      	ldrh	r1, [r1, #0]
    d268:	8219      	strh	r1, [r3, #16]
    d26a:	bd70      	pop	{r4, r5, r6, pc}
    d26c:	2401      	movs	r4, #1
    d26e:	e7f9      	b.n	d264 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d270 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    d270:	b510      	push	{r4, lr}
    d272:	8a81      	ldrh	r1, [r0, #20]
    d274:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d278:	3aff      	subs	r2, #255	; 0xff
    d27a:	d002      	beq.n	d282 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x12>
    d27c:	7d82      	ldrb	r2, [r0, #22]
    d27e:	b952      	cbnz	r2, d296 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x26>
    d280:	e004      	b.n	d28c <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1c>
    d282:	f240 3155 	movw	r1, #853	; 0x355
    d286:	2014      	movs	r0, #20
    d288:	f7f7 fb2a 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d28c:	8880      	ldrh	r0, [r0, #4]
    d28e:	4281      	cmp	r1, r0
    d290:	d101      	bne.n	d296 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x26>
    d292:	2000      	movs	r0, #0
    d294:	bd10      	pop	{r4, pc}
    d296:	2001      	movs	r0, #1
    d298:	bd10      	pop	{r4, pc}

0000d29a <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    d29a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d29e:	8281      	strh	r1, [r0, #20]
    d2a0:	2100      	movs	r1, #0
    d2a2:	7581      	strb	r1, [r0, #22]
    d2a4:	4770      	bx	lr

0000d2a6 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    d2a6:	b510      	push	{r4, lr}
    d2a8:	8a81      	ldrh	r1, [r0, #20]
    d2aa:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d2ae:	3aff      	subs	r2, #255	; 0xff
    d2b0:	d004      	beq.n	d2bc <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    d2b2:	f44f 714e 	mov.w	r1, #824	; 0x338
    d2b6:	2014      	movs	r0, #20
    d2b8:	f7f7 fb12 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d2bc:	88c1      	ldrh	r1, [r0, #6]
    d2be:	8281      	strh	r1, [r0, #20]
    d2c0:	89c1      	ldrh	r1, [r0, #14]
    d2c2:	b101      	cbz	r1, d2c6 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x20>
    d2c4:	2101      	movs	r1, #1
    d2c6:	7581      	strb	r1, [r0, #22]
    d2c8:	bd10      	pop	{r4, pc}

0000d2ca <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d2ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2ce:	461d      	mov	r5, r3
    d2d0:	4616      	mov	r6, r2
    d2d2:	9f06      	ldr	r7, [sp, #24]
    d2d4:	460b      	mov	r3, r1
    d2d6:	4604      	mov	r4, r0
    d2d8:	463a      	mov	r2, r7
    d2da:	4629      	mov	r1, r5
    d2dc:	4630      	mov	r0, r6
    d2de:	f000 f84f 	bl	d380 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d2e2:	4283      	cmp	r3, r0
    d2e4:	d201      	bcs.n	d2ea <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d2e6:	21a1      	movs	r1, #161	; 0xa1
    d2e8:	e018      	b.n	d31c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d2ea:	1ce0      	adds	r0, r4, #3
    d2ec:	f020 0103 	bic.w	r1, r0, #3
    d2f0:	4620      	mov	r0, r4
    d2f2:	42a1      	cmp	r1, r4
    d2f4:	d001      	beq.n	d2fa <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    d2f6:	21a2      	movs	r1, #162	; 0xa2
    d2f8:	e010      	b.n	d31c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d2fa:	2224      	movs	r2, #36	; 0x24
    d2fc:	2100      	movs	r1, #0
    d2fe:	f7ff f97e 	bl	c5fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d302:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d306:	82a0      	strh	r0, [r4, #20]
    d308:	19a8      	adds	r0, r5, r6
    d30a:	1d80      	adds	r0, r0, #6
    d30c:	4378      	muls	r0, r7
    d30e:	b280      	uxth	r0, r0
    d310:	7725      	strb	r5, [r4, #28]
    d312:	8060      	strh	r0, [r4, #2]
    d314:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d318:	d903      	bls.n	d322 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    d31a:	21a8      	movs	r1, #168	; 0xa8
    d31c:	2014      	movs	r0, #20
    d31e:	f7f7 fadf 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d322:	8026      	strh	r6, [r4, #0]
    d324:	2000      	movs	r0, #0
    d326:	7760      	strb	r0, [r4, #29]
    d328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d32c <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    d32c:	6181      	str	r1, [r0, #24]
    d32e:	6188      	str	r0, [r1, #24]
    d330:	4770      	bx	lr

0000d332 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d336:	460b      	mov	r3, r1
    d338:	4604      	mov	r4, r0
    d33a:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d33e:	8905      	ldrh	r5, [r0, #8]
    d340:	8946      	ldrh	r6, [r0, #10]
    d342:	8880      	ldrh	r0, [r0, #4]
    d344:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    d348:	4439      	add	r1, r7
    d34a:	460f      	mov	r7, r1
    d34c:	4285      	cmp	r5, r0
    d34e:	d102      	bne.n	d356 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    d350:	2000      	movs	r0, #0
    d352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d356:	b10a      	cbz	r2, d35c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    d358:	1cc8      	adds	r0, r1, #3
    d35a:	6010      	str	r0, [r2, #0]
    d35c:	b123      	cbz	r3, d368 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    d35e:	7f22      	ldrb	r2, [r4, #28]
    d360:	1cf9      	adds	r1, r7, #3
    d362:	4618      	mov	r0, r3
    d364:	f7ff f8d1 	bl	c50a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d368:	883f      	ldrh	r7, [r7, #0]
    d36a:	f104 0108 	add.w	r1, r4, #8
    d36e:	4620      	mov	r0, r4
    d370:	f7ff fdaa 	bl	cec8 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d374:	42b5      	cmp	r5, r6
    d376:	d101      	bne.n	d37c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    d378:	8920      	ldrh	r0, [r4, #8]
    d37a:	8160      	strh	r0, [r4, #10]
    d37c:	4638      	mov	r0, r7
    d37e:	e7e8      	b.n	d352 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000d380 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d380:	4401      	add	r1, r0
    d382:	1d89      	adds	r1, r1, #6
    d384:	4351      	muls	r1, r2
    d386:	b28a      	uxth	r2, r1
    d388:	2100      	movs	r1, #0
    d38a:	2845      	cmp	r0, #69	; 0x45
    d38c:	d201      	bcs.n	d392 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    d38e:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    d392:	3224      	adds	r2, #36	; 0x24
    d394:	1850      	adds	r0, r2, r1
    d396:	b280      	uxth	r0, r0
    d398:	4770      	bx	lr

0000d39a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d39a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d39e:	4688      	mov	r8, r1
    d3a0:	88c1      	ldrh	r1, [r0, #6]
    d3a2:	4604      	mov	r4, r0
    d3a4:	8900      	ldrh	r0, [r0, #8]
    d3a6:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    d3aa:	f104 0524 	add.w	r5, r4, #36	; 0x24
    d3ae:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d3b2:	eb05 0906 	add.w	r9, r5, r6
    d3b6:	f7ff fda8 	bl	cf0a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d3ba:	2200      	movs	r2, #0
    d3bc:	b998      	cbnz	r0, d3e6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d3be:	8820      	ldrh	r0, [r4, #0]
    d3c0:	2845      	cmp	r0, #69	; 0x45
    d3c2:	d200      	bcs.n	d3c6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d3c4:	2045      	movs	r0, #69	; 0x45
    d3c6:	42b7      	cmp	r7, r6
    d3c8:	d906      	bls.n	d3d8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d3ca:	7f23      	ldrb	r3, [r4, #28]
    d3cc:	1bb9      	subs	r1, r7, r6
    d3ce:	1ac9      	subs	r1, r1, r3
    d3d0:	1f89      	subs	r1, r1, #6
    d3d2:	4281      	cmp	r1, r0
    d3d4:	da00      	bge.n	d3d8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d3d6:	4608      	mov	r0, r1
    d3d8:	89e1      	ldrh	r1, [r4, #14]
    d3da:	b111      	cbz	r1, d3e2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d3dc:	f8b9 3000 	ldrh.w	r3, [r9]
    d3e0:	1ac0      	subs	r0, r0, r3
    d3e2:	4540      	cmp	r0, r8
    d3e4:	da03      	bge.n	d3ee <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d3e6:	8262      	strh	r2, [r4, #18]
    d3e8:	2000      	movs	r0, #0
    d3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d3ee:	7f20      	ldrb	r0, [r4, #28]
    d3f0:	4429      	add	r1, r5
    d3f2:	1d80      	adds	r0, r0, #6
    d3f4:	4430      	add	r0, r6
    d3f6:	4408      	add	r0, r1
    d3f8:	f8a4 8012 	strh.w	r8, [r4, #18]
    d3fc:	1ec0      	subs	r0, r0, #3
    d3fe:	e7f4      	b.n	d3ea <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d400 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    d400:	2100      	movs	r1, #0
    d402:	81c1      	strh	r1, [r0, #14]
    d404:	8241      	strh	r1, [r0, #18]
    d406:	75c1      	strb	r1, [r0, #23]
    d408:	7581      	strb	r1, [r0, #22]
    d40a:	4770      	bx	lr

0000d40c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d40c:	b570      	push	{r4, r5, r6, lr}
    d40e:	2300      	movs	r3, #0
    d410:	2908      	cmp	r1, #8
    d412:	d204      	bcs.n	d41e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    d414:	f240 11cb 	movw	r1, #459	; 0x1cb
    d418:	2015      	movs	r0, #21
    d41a:	f7f7 fa61 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d41e:	6802      	ldr	r2, [r0, #0]
    d420:	b90a      	cbnz	r2, d426 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d422:	e01e      	b.n	d462 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d424:	4610      	mov	r0, r2
    d426:	6802      	ldr	r2, [r0, #0]
    d428:	8893      	ldrh	r3, [r2, #4]
    d42a:	428b      	cmp	r3, r1
    d42c:	d002      	beq.n	d434 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    d42e:	6813      	ldr	r3, [r2, #0]
    d430:	2b00      	cmp	r3, #0
    d432:	d1f7      	bne.n	d424 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    d434:	8894      	ldrh	r4, [r2, #4]
    d436:	4613      	mov	r3, r2
    d438:	428c      	cmp	r4, r1
    d43a:	d101      	bne.n	d440 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    d43c:	6811      	ldr	r1, [r2, #0]
    d43e:	e00d      	b.n	d45c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    d440:	f101 0508 	add.w	r5, r1, #8
    d444:	b2ae      	uxth	r6, r5
    d446:	2500      	movs	r5, #0
    d448:	42b4      	cmp	r4, r6
    d44a:	d309      	bcc.n	d460 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    d44c:	1a64      	subs	r4, r4, r1
    d44e:	4411      	add	r1, r2
    d450:	600d      	str	r5, [r1, #0]
    d452:	808c      	strh	r4, [r1, #4]
    d454:	6802      	ldr	r2, [r0, #0]
    d456:	6812      	ldr	r2, [r2, #0]
    d458:	6002      	str	r2, [r0, #0]
    d45a:	600a      	str	r2, [r1, #0]
    d45c:	6001      	str	r1, [r0, #0]
    d45e:	e000      	b.n	d462 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d460:	2300      	movs	r3, #0
    d462:	4618      	mov	r0, r3
    d464:	bd70      	pop	{r4, r5, r6, pc}

0000d466 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d466:	b510      	push	{r4, lr}
    d468:	000c      	movs	r4, r1
    d46a:	d006      	beq.n	d47a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    d46c:	2c08      	cmp	r4, #8
    d46e:	d209      	bcs.n	d484 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    d470:	f240 1195 	movw	r1, #405	; 0x195
    d474:	2015      	movs	r0, #21
    d476:	f7f7 fa33 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d47a:	b108      	cbz	r0, d480 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d47c:	2100      	movs	r1, #0
    d47e:	6001      	str	r1, [r0, #0]
    d480:	2000      	movs	r0, #0
    d482:	bd10      	pop	{r4, pc}
    d484:	b118      	cbz	r0, d48e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    d486:	b2a1      	uxth	r1, r4
    d488:	6800      	ldr	r0, [r0, #0]
    d48a:	f000 f814 	bl	d4b6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d48e:	1d20      	adds	r0, r4, #4
    d490:	bd10      	pop	{r4, pc}

0000d492 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d492:	2100      	movs	r1, #0
    d494:	6802      	ldr	r2, [r0, #0]
    d496:	e003      	b.n	d4a0 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d498:	8893      	ldrh	r3, [r2, #4]
    d49a:	6812      	ldr	r2, [r2, #0]
    d49c:	4419      	add	r1, r3
    d49e:	b289      	uxth	r1, r1
    d4a0:	2a00      	cmp	r2, #0
    d4a2:	d1f9      	bne.n	d498 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d4a4:	f000 b807 	b.w	d4b6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d4a8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d4a8:	2300      	movs	r3, #0
    d4aa:	600b      	str	r3, [r1, #0]
    d4ac:	808a      	strh	r2, [r1, #4]
    d4ae:	6802      	ldr	r2, [r0, #0]
    d4b0:	600a      	str	r2, [r1, #0]
    d4b2:	6001      	str	r1, [r0, #0]
    d4b4:	4770      	bx	lr
    d4b6:	2300      	movs	r3, #0
    d4b8:	6043      	str	r3, [r0, #4]
    d4ba:	1d02      	adds	r2, r0, #4
    d4bc:	8101      	strh	r1, [r0, #8]
    d4be:	6002      	str	r2, [r0, #0]
    d4c0:	4770      	bx	lr

0000d4c2 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    d4c2:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    d4c6:	3bff      	subs	r3, #255	; 0xff
    d4c8:	d001      	beq.n	d4ce <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    d4ca:	2902      	cmp	r1, #2
    d4cc:	d301      	bcc.n	d4d2 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    d4ce:	2000      	movs	r0, #0
    d4d0:	4770      	bx	lr
    d4d2:	f7f7 bcd9 	b.w	4e88 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000d4d6 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>:
    d4d6:	b50e      	push	{r1, r2, r3, lr}
    d4d8:	4669      	mov	r1, sp
    d4da:	f000 f818 	bl	d50e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    d4de:	b120      	cbz	r0, d4ea <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x14>
    d4e0:	f44f 71b2 	mov.w	r1, #356	; 0x164
    d4e4:	2017      	movs	r0, #23
    d4e6:	f7f7 f9fb 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4ea:	4668      	mov	r0, sp
    d4ec:	f7f7 fc4a 	bl	4d84 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d4f0:	b108      	cbz	r0, d4f6 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x20>
    d4f2:	2000      	movs	r0, #0
    d4f4:	bd0e      	pop	{r1, r2, r3, pc}
    d4f6:	2001      	movs	r0, #1
    d4f8:	bd0e      	pop	{r1, r2, r3, pc}

0000d4fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d4fa:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d4fe:	3aff      	subs	r2, #255	; 0xff
    d500:	d001      	beq.n	d506 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    d502:	2902      	cmp	r1, #2
    d504:	d301      	bcc.n	d50a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    d506:	2000      	movs	r0, #0
    d508:	4770      	bx	lr
    d50a:	f7f7 bcf7 	b.w	4efc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000d50e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    d50e:	b570      	push	{r4, r5, r6, lr}
    d510:	4605      	mov	r5, r0
    d512:	460c      	mov	r4, r1
    d514:	4608      	mov	r0, r1
    d516:	f000 f864 	bl	d5e2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    d51a:	b108      	cbz	r0, d520 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    d51c:	2010      	movs	r0, #16
    d51e:	bd70      	pop	{r4, r5, r6, pc}
    d520:	2d02      	cmp	r5, #2
    d522:	d301      	bcc.n	d528 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    d524:	2007      	movs	r0, #7
    d526:	bd70      	pop	{r4, r5, r6, pc}
    d528:	7025      	strb	r5, [r4, #0]
    d52a:	2000      	movs	r0, #0
    d52c:	8060      	strh	r0, [r4, #2]
    d52e:	bd70      	pop	{r4, r5, r6, pc}
    d530:	b510      	push	{r4, lr}
    d532:	4604      	mov	r4, r0
    d534:	f7f7 fd2e 	bl	4f94 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    d538:	42a0      	cmp	r0, r4
    d53a:	d901      	bls.n	d540 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    d53c:	2001      	movs	r0, #1
    d53e:	bd10      	pop	{r4, pc}
    d540:	2000      	movs	r0, #0
    d542:	bd10      	pop	{r4, pc}
    d544:	4770      	bx	lr

0000d546 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d546:	b570      	push	{r4, r5, r6, lr}
    d548:	460e      	mov	r6, r1
    d54a:	461d      	mov	r5, r3
    d54c:	4611      	mov	r1, r2
    d54e:	f000 f811 	bl	d574 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    d552:	4604      	mov	r4, r0
    d554:	4629      	mov	r1, r5
    d556:	4630      	mov	r0, r6
    d558:	f000 f803 	bl	d562 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    d55c:	4420      	add	r0, r4
    d55e:	1d00      	adds	r0, r0, #4
    d560:	bd70      	pop	{r4, r5, r6, pc}
    d562:	b510      	push	{r4, lr}
    d564:	460a      	mov	r2, r1
    d566:	2101      	movs	r1, #1
    d568:	f7ff ff0a 	bl	d380 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d56c:	1cc0      	adds	r0, r0, #3
    d56e:	f020 0003 	bic.w	r0, r0, #3
    d572:	bd10      	pop	{r4, pc}
    d574:	b510      	push	{r4, lr}
    d576:	460a      	mov	r2, r1
    d578:	2101      	movs	r1, #1
    d57a:	f7ff ff01 	bl	d380 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d57e:	1cc0      	adds	r0, r0, #3
    d580:	f020 0003 	bic.w	r0, r0, #3
    d584:	bd10      	pop	{r4, pc}

0000d586 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>:
    d586:	b510      	push	{r4, lr}
    d588:	680b      	ldr	r3, [r1, #0]
    d58a:	4604      	mov	r4, r0
    d58c:	2b00      	cmp	r3, #0
    d58e:	d00d      	beq.n	d5ac <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x26>
    d590:	88ca      	ldrh	r2, [r1, #6]
    d592:	4619      	mov	r1, r3
    d594:	6820      	ldr	r0, [r4, #0]
    d596:	f7ff ff87 	bl	d4a8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    d59a:	7920      	ldrb	r0, [r4, #4]
    d59c:	2801      	cmp	r0, #1
    d59e:	d102      	bne.n	d5a6 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x20>
    d5a0:	6820      	ldr	r0, [r4, #0]
    d5a2:	f7ff ff76 	bl	d492 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    d5a6:	7920      	ldrb	r0, [r4, #4]
    d5a8:	1e40      	subs	r0, r0, #1
    d5aa:	7120      	strb	r0, [r4, #4]
    d5ac:	bd10      	pop	{r4, pc}
    d5ae:	2800      	cmp	r0, #0
    d5b0:	db09      	blt.n	d5c6 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x40>
    d5b2:	f000 021f 	and.w	r2, r0, #31
    d5b6:	2101      	movs	r1, #1
    d5b8:	4091      	lsls	r1, r2
    d5ba:	0940      	lsrs	r0, r0, #5
    d5bc:	0080      	lsls	r0, r0, #2
    d5be:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d5c2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d5c6:	4770      	bx	lr

0000d5c8 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d5c8:	f7f7 bef8 	b.w	53bc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000d5cc <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    d5cc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d5d0:	2000      	movs	r0, #0
    d5d2:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    d5d6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    d5da:	2001      	movs	r0, #1
    d5dc:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    d5e0:	4770      	bx	lr

0000d5e2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    d5e2:	b108      	cbz	r0, d5e8 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    d5e4:	2000      	movs	r0, #0
    d5e6:	4770      	bx	lr
    d5e8:	2001      	movs	r0, #1
    d5ea:	4770      	bx	lr

0000d5ec <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d5ec:	f7f8 b82c 	b.w	5648 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d5f0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d5f0:	f7f8 b81a 	b.w	5628 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d5f4 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d5f4:	b510      	push	{r4, lr}
    d5f6:	2900      	cmp	r1, #0
    d5f8:	4604      	mov	r4, r0
    d5fa:	f04f 0106 	mov.w	r1, #6
    d5fe:	d002      	beq.n	d606 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d600:	f7f7 fa06 	bl	4a10 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d604:	e001      	b.n	d60a <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d606:	f7f7 fa1f 	bl	4a48 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d60a:	7960      	ldrb	r0, [r4, #5]
    d60c:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d610:	7160      	strb	r0, [r4, #5]
    d612:	bd10      	pop	{r4, pc}

0000d614 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d614:	4770      	bx	lr

0000d616 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d616:	b530      	push	{r4, r5, lr}
    d618:	460c      	mov	r4, r1
    d61a:	4605      	mov	r5, r0
    d61c:	b08d      	sub	sp, #52	; 0x34
    d61e:	f04f 0103 	mov.w	r1, #3
    d622:	f104 0003 	add.w	r0, r4, #3
    d626:	b112      	cbz	r2, d62e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d628:	f7f7 f9f2 	bl	4a10 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d62c:	e001      	b.n	d632 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d62e:	f7f7 fa0b 	bl	4a48 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d632:	7960      	ldrb	r0, [r4, #5]
    d634:	220d      	movs	r2, #13
    d636:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d63a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d63e:	7160      	strb	r0, [r4, #5]
    d640:	2100      	movs	r1, #0
    d642:	a804      	add	r0, sp, #16
    d644:	f7fe ffdb 	bl	c5fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d648:	78e0      	ldrb	r0, [r4, #3]
    d64a:	f88d 001f 	strb.w	r0, [sp, #31]
    d64e:	7920      	ldrb	r0, [r4, #4]
    d650:	f88d 001e 	strb.w	r0, [sp, #30]
    d654:	7960      	ldrb	r0, [r4, #5]
    d656:	f88d 001d 	strb.w	r0, [sp, #29]
    d65a:	2210      	movs	r2, #16
    d65c:	4629      	mov	r1, r5
    d65e:	4668      	mov	r0, sp
    d660:	f7fe ff53 	bl	c50a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d664:	4668      	mov	r0, sp
    d666:	f7ff ffaf 	bl	d5c8 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d66a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d66e:	7020      	strb	r0, [r4, #0]
    d670:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d674:	7060      	strb	r0, [r4, #1]
    d676:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d67a:	70a0      	strb	r0, [r4, #2]
    d67c:	b00d      	add	sp, #52	; 0x34
    d67e:	bd30      	pop	{r4, r5, pc}

0000d680 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d680:	f7f8 bb78 	b.w	5d74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    d684:	07c1      	lsls	r1, r0, #31
    d686:	d001      	beq.n	d68c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    d688:	2001      	movs	r0, #1
    d68a:	4770      	bx	lr
    d68c:	0780      	lsls	r0, r0, #30
    d68e:	d501      	bpl.n	d694 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    d690:	2002      	movs	r0, #2
    d692:	4770      	bx	lr
    d694:	2000      	movs	r0, #0
    d696:	4770      	bx	lr
    d698:	b510      	push	{r4, lr}
    d69a:	2801      	cmp	r0, #1
    d69c:	d008      	beq.n	d6b0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d69e:	2802      	cmp	r0, #2
    d6a0:	d004      	beq.n	d6ac <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    d6a2:	f240 3197 	movw	r1, #919	; 0x397
    d6a6:	2006      	movs	r0, #6
    d6a8:	f7f7 f91a 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d6ac:	2001      	movs	r0, #1
    d6ae:	bd10      	pop	{r4, pc}
    d6b0:	2000      	movs	r0, #0
    d6b2:	bd10      	pop	{r4, pc}
    d6b4:	2900      	cmp	r1, #0
    d6b6:	d004      	beq.n	d6c2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    d6b8:	2801      	cmp	r0, #1
    d6ba:	d003      	beq.n	d6c4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d6bc:	2901      	cmp	r1, #1
    d6be:	d001      	beq.n	d6c4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d6c0:	2002      	movs	r0, #2
    d6c2:	4770      	bx	lr
    d6c4:	2001      	movs	r0, #1
    d6c6:	4770      	bx	lr
    d6c8:	f7ff bdaf 	b.w	d22a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d6cc <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d6cc:	2201      	movs	r2, #1
    d6ce:	f7f8 befb 	b.w	64c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000d6d2 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d6d2:	b510      	push	{r4, lr}
    d6d4:	f002 fb1e 	bl	fd14 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d6d8:	b118      	cbz	r0, d6e2 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d6da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d6de:	f7fd bc87 	b.w	aff0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    d6e2:	20ff      	movs	r0, #255	; 0xff
    d6e4:	bd10      	pop	{r4, pc}

0000d6e6 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    d6e6:	b510      	push	{r4, lr}
    d6e8:	f7f8 ff38 	bl	655c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    d6ec:	2810      	cmp	r0, #16
    d6ee:	d003      	beq.n	d6f8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    d6f0:	f7f8 ff04 	bl	64fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    d6f4:	2810      	cmp	r0, #16
    d6f6:	d100      	bne.n	d6fa <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    d6f8:	2008      	movs	r0, #8
    d6fa:	bd10      	pop	{r4, pc}

0000d6fc <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    d6fc:	b510      	push	{r4, lr}
    d6fe:	f7f8 ff2d 	bl	655c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    d702:	2810      	cmp	r0, #16
    d704:	d007      	beq.n	d716 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d706:	f7f8 fef9 	bl	64fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    d70a:	2810      	cmp	r0, #16
    d70c:	d003      	beq.n	d716 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d70e:	f7f8 ff6d 	bl	65ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    d712:	2001      	movs	r0, #1
    d714:	bd10      	pop	{r4, pc}
    d716:	2000      	movs	r0, #0
    d718:	bd10      	pop	{r4, pc}

0000d71a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    d71a:	b510      	push	{r4, lr}
    d71c:	f7f8 ff1e 	bl	655c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    d720:	2810      	cmp	r0, #16
    d722:	d003      	beq.n	d72c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    d724:	f7f8 ffaa 	bl	667c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x228>
    d728:	2001      	movs	r0, #1
    d72a:	bd10      	pop	{r4, pc}
    d72c:	2000      	movs	r0, #0
    d72e:	bd10      	pop	{r4, pc}

0000d730 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    d730:	b570      	push	{r4, r5, r6, lr}
    d732:	460e      	mov	r6, r1
    d734:	b08c      	sub	sp, #48	; 0x30
    d736:	4614      	mov	r4, r2
    d738:	4601      	mov	r1, r0
    d73a:	461d      	mov	r5, r3
    d73c:	2210      	movs	r2, #16
    d73e:	4668      	mov	r0, sp
    d740:	f000 f91a 	bl	d978 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d744:	2210      	movs	r2, #16
    d746:	4631      	mov	r1, r6
    d748:	a804      	add	r0, sp, #16
    d74a:	f000 f915 	bl	d978 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d74e:	4668      	mov	r0, sp
    d750:	f7ff ff3a 	bl	d5c8 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d754:	a908      	add	r1, sp, #32
    d756:	f04f 0210 	mov.w	r2, #16
    d75a:	4628      	mov	r0, r5
    d75c:	b11c      	cbz	r4, d766 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    d75e:	f000 f90b 	bl	d978 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d762:	b00c      	add	sp, #48	; 0x30
    d764:	bd70      	pop	{r4, r5, r6, pc}
    d766:	f7fe fed0 	bl	c50a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d76a:	e7fa      	b.n	d762 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000d76c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d76c:	b510      	push	{r4, lr}
    d76e:	460c      	mov	r4, r1
    d770:	2100      	movs	r1, #0
    d772:	f7ff fec2 	bl	d4fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d776:	6060      	str	r0, [r4, #4]
    d778:	b118      	cbz	r0, d782 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    d77a:	2001      	movs	r0, #1
    d77c:	7020      	strb	r0, [r4, #0]
    d77e:	2000      	movs	r0, #0
    d780:	bd10      	pop	{r4, pc}
    d782:	2002      	movs	r0, #2
    d784:	bd10      	pop	{r4, pc}

0000d786 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d786:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d78a:	4348      	muls	r0, r1
    d78c:	4770      	bx	lr

0000d78e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d78e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d792:	fbb0 f0f1 	udiv	r0, r0, r1
    d796:	b280      	uxth	r0, r0
    d798:	4770      	bx	lr

0000d79a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    d79a:	b570      	push	{r4, r5, r6, lr}
    d79c:	4604      	mov	r4, r0
    d79e:	4290      	cmp	r0, r2
    d7a0:	d20b      	bcs.n	d7ba <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    d7a2:	1b10      	subs	r0, r2, r4
    d7a4:	2864      	cmp	r0, #100	; 0x64
    d7a6:	d200      	bcs.n	d7aa <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    d7a8:	2064      	movs	r0, #100	; 0x64
    d7aa:	1825      	adds	r5, r4, r0
    d7ac:	428d      	cmp	r5, r1
    d7ae:	d803      	bhi.n	d7b8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    d7b0:	2104      	movs	r1, #4
    d7b2:	f7f4 fc5d 	bl	2070 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d7b6:	b108      	cbz	r0, d7bc <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    d7b8:	4620      	mov	r0, r4
    d7ba:	bd70      	pop	{r4, r5, r6, pc}
    d7bc:	4628      	mov	r0, r5
    d7be:	bd70      	pop	{r4, r5, r6, pc}

0000d7c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    d7c0:	b510      	push	{r4, lr}
    d7c2:	f1a2 030f 	sub.w	r3, r2, #15
    d7c6:	290c      	cmp	r1, #12
    d7c8:	d244      	bcs.n	d854 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d7ca:	e8df f001 	tbb	[pc, r1]
    d7ce:	0806      	.short	0x0806
    d7d0:	1815120d 	.word	0x1815120d
    d7d4:	4127241c 	.word	0x4127241c
    d7d8:	312a      	.short	0x312a
    d7da:	b3c2      	cbz	r2, d84e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    d7dc:	e03a      	b.n	d854 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d7de:	2a07      	cmp	r2, #7
    d7e0:	d03a      	beq.n	d858 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d7e2:	2a08      	cmp	r2, #8
    d7e4:	d038      	beq.n	d858 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d7e6:	e035      	b.n	d854 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d7e8:	2a0c      	cmp	r2, #12
    d7ea:	d035      	beq.n	d858 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d7ec:	2a0b      	cmp	r2, #11
    d7ee:	d033      	beq.n	d858 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d7f0:	e030      	b.n	d854 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d7f2:	2a0d      	cmp	r2, #13
    d7f4:	d030      	beq.n	d858 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d7f6:	e02d      	b.n	d854 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d7f8:	2b0c      	cmp	r3, #12
    d7fa:	d92d      	bls.n	d858 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d7fc:	e02a      	b.n	d854 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d7fe:	3a10      	subs	r2, #16
    d800:	2a0b      	cmp	r2, #11
    d802:	d929      	bls.n	d858 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d804:	e026      	b.n	d854 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d806:	2b03      	cmp	r3, #3
    d808:	d926      	bls.n	d858 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d80a:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    d80e:	b308      	cbz	r0, d854 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d810:	2a1b      	cmp	r2, #27
    d812:	d921      	bls.n	d858 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d814:	e01e      	b.n	d854 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d816:	2a04      	cmp	r2, #4
    d818:	d01e      	beq.n	d858 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d81a:	e01b      	b.n	d854 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d81c:	2a06      	cmp	r2, #6
    d81e:	d01b      	beq.n	d858 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d820:	e018      	b.n	d854 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d822:	2a1c      	cmp	r2, #28
    d824:	d018      	beq.n	d858 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d826:	2a1d      	cmp	r2, #29
    d828:	d016      	beq.n	d858 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d82a:	2a1e      	cmp	r2, #30
    d82c:	d014      	beq.n	d858 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d82e:	e011      	b.n	d854 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d830:	2a1f      	cmp	r2, #31
    d832:	d011      	beq.n	d858 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d834:	2a20      	cmp	r2, #32
    d836:	d00f      	beq.n	d858 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d838:	2a21      	cmp	r2, #33	; 0x21
    d83a:	d00d      	beq.n	d858 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d83c:	2a22      	cmp	r2, #34	; 0x22
    d83e:	d00b      	beq.n	d858 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d840:	2a23      	cmp	r2, #35	; 0x23
    d842:	d009      	beq.n	d858 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d844:	2a24      	cmp	r2, #36	; 0x24
    d846:	d007      	beq.n	d858 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d848:	2a26      	cmp	r2, #38	; 0x26
    d84a:	d005      	beq.n	d858 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d84c:	e002      	b.n	d854 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d84e:	e003      	b.n	d858 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d850:	2a0e      	cmp	r2, #14
    d852:	d001      	beq.n	d858 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d854:	2000      	movs	r0, #0
    d856:	bd10      	pop	{r4, pc}
    d858:	2001      	movs	r0, #1
    d85a:	bd10      	pop	{r4, pc}

0000d85c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    d85c:	280c      	cmp	r0, #12
    d85e:	d013      	beq.n	d888 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d860:	280b      	cmp	r0, #11
    d862:	d011      	beq.n	d888 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d864:	280d      	cmp	r0, #13
    d866:	d00f      	beq.n	d888 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d868:	281f      	cmp	r0, #31
    d86a:	d00d      	beq.n	d888 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d86c:	2820      	cmp	r0, #32
    d86e:	d00b      	beq.n	d888 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d870:	2821      	cmp	r0, #33	; 0x21
    d872:	d009      	beq.n	d888 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d874:	2822      	cmp	r0, #34	; 0x22
    d876:	d007      	beq.n	d888 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d878:	2823      	cmp	r0, #35	; 0x23
    d87a:	d005      	beq.n	d888 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d87c:	2824      	cmp	r0, #36	; 0x24
    d87e:	d003      	beq.n	d888 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d880:	2826      	cmp	r0, #38	; 0x26
    d882:	d001      	beq.n	d888 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d884:	2000      	movs	r0, #0
    d886:	4770      	bx	lr
    d888:	2001      	movs	r0, #1
    d88a:	4770      	bx	lr

0000d88c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    d88c:	f011 0f0c 	tst.w	r1, #12
    d890:	d016      	beq.n	d8c0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    d892:	074a      	lsls	r2, r1, #29
    d894:	f44f 7116 	mov.w	r1, #600	; 0x258
    d898:	2a00      	cmp	r2, #0
    d89a:	da02      	bge.n	d8a2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    d89c:	f04f 0210 	mov.w	r2, #16
    d8a0:	e001      	b.n	d8a6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    d8a2:	f04f 0240 	mov.w	r2, #64	; 0x40
    d8a6:	da01      	bge.n	d8ac <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    d8a8:	f04f 0196 	mov.w	r1, #150	; 0x96
    d8ac:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    d8b0:	eba0 0301 	sub.w	r3, r0, r1
    d8b4:	4288      	cmp	r0, r1
    d8b6:	d910      	bls.n	d8da <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d8b8:	fb93 f0f2 	sdiv	r0, r3, r2
    d8bc:	b280      	uxth	r0, r0
    d8be:	4770      	bx	lr
    d8c0:	2902      	cmp	r1, #2
    d8c2:	d002      	beq.n	d8ca <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    d8c4:	2870      	cmp	r0, #112	; 0x70
    d8c6:	d80a      	bhi.n	d8de <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    d8c8:	e007      	b.n	d8da <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d8ca:	283c      	cmp	r0, #60	; 0x3c
    d8cc:	d905      	bls.n	d8da <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d8ce:	383c      	subs	r0, #60	; 0x3c
    d8d0:	17c1      	asrs	r1, r0, #31
    d8d2:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d8d6:	1080      	asrs	r0, r0, #2
    d8d8:	e7f0      	b.n	d8bc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    d8da:	2000      	movs	r0, #0
    d8dc:	e7ee      	b.n	d8bc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    d8de:	3870      	subs	r0, #112	; 0x70
    d8e0:	17c1      	asrs	r1, r0, #31
    d8e2:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    d8e6:	10c0      	asrs	r0, r0, #3
    d8e8:	e7e8      	b.n	d8bc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000d8ea <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    d8ea:	6809      	ldr	r1, [r1, #0]
    d8ec:	f8c0 105e 	str.w	r1, [r0, #94]	; 0x5e
    d8f0:	4770      	bx	lr

0000d8f2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    d8f2:	07c1      	lsls	r1, r0, #31
    d8f4:	d001      	beq.n	d8fa <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    d8f6:	2001      	movs	r0, #1
    d8f8:	4770      	bx	lr
    d8fa:	0781      	lsls	r1, r0, #30
    d8fc:	d501      	bpl.n	d902 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    d8fe:	2002      	movs	r0, #2
    d900:	4770      	bx	lr
    d902:	0740      	lsls	r0, r0, #29
    d904:	d501      	bpl.n	d90a <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    d906:	2008      	movs	r0, #8
    d908:	4770      	bx	lr
    d90a:	2000      	movs	r0, #0
    d90c:	4770      	bx	lr

0000d90e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    d90e:	b510      	push	{r4, lr}
    d910:	f640 12c4 	movw	r2, #2500	; 0x9c4
    d914:	2901      	cmp	r1, #1
    d916:	d006      	beq.n	d926 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    d918:	2902      	cmp	r1, #2
    d91a:	d005      	beq.n	d928 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    d91c:	f240 4129 	movw	r1, #1065	; 0x429
    d920:	2029      	movs	r0, #41	; 0x29
    d922:	f7f6 ffdd 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d926:	b108      	cbz	r0, d92c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    d928:	4610      	mov	r0, r2
    d92a:	bd10      	pop	{r4, pc}
    d92c:	f240 40e2 	movw	r0, #1250	; 0x4e2
    d930:	bd10      	pop	{r4, pc}

0000d932 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    d932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d936:	460c      	mov	r4, r1
    d938:	4605      	mov	r5, r0
    d93a:	68c6      	ldr	r6, [r0, #12]
    d93c:	f7f4 ff72 	bl	2824 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    d940:	b198      	cbz	r0, d96a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    d942:	b1bc      	cbz	r4, d974 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    d944:	4630      	mov	r0, r6
    d946:	68e9      	ldr	r1, [r5, #12]
    d948:	f7f4 fc86 	bl	2258 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    d94c:	2800      	cmp	r0, #0
    d94e:	dd11      	ble.n	d974 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    d950:	4420      	add	r0, r4
    d952:	1e40      	subs	r0, r0, #1
    d954:	fbb0 f7f4 	udiv	r7, r0, r4
    d958:	fb07 f104 	mul.w	r1, r7, r4
    d95c:	4630      	mov	r0, r6
    d95e:	f7f4 fc49 	bl	21f4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    d962:	60e8      	str	r0, [r5, #12]
    d964:	4638      	mov	r0, r7
    d966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d96a:	f240 21ae 	movw	r1, #686	; 0x2ae
    d96e:	2029      	movs	r0, #41	; 0x29
    d970:	f7f6 ffb6 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d974:	2000      	movs	r0, #0
    d976:	e7f6      	b.n	d966 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000d978 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    d978:	b530      	push	{r4, r5, lr}
    d97a:	4613      	mov	r3, r2
    d97c:	e006      	b.n	d98c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    d97e:	18cc      	adds	r4, r1, r3
    d980:	1ad5      	subs	r5, r2, r3
    d982:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    d986:	1e5b      	subs	r3, r3, #1
    d988:	5544      	strb	r4, [r0, r5]
    d98a:	b2db      	uxtb	r3, r3
    d98c:	2b00      	cmp	r3, #0
    d98e:	d1f6      	bne.n	d97e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    d990:	bd30      	pop	{r4, r5, pc}

0000d992 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    d992:	b538      	push	{r3, r4, r5, lr}
    d994:	4605      	mov	r5, r0
    d996:	460c      	mov	r4, r1
    d998:	4668      	mov	r0, sp
    d99a:	f7fe f82b 	bl	b9f4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    d99e:	b308      	cbz	r0, d9e4 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x52>
    d9a0:	f99d 0000 	ldrsb.w	r0, [sp]
    d9a4:	7260      	strb	r0, [r4, #9]
    d9a6:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    d9aa:	72a1      	strb	r1, [r4, #10]
    d9ac:	f994 100b 	ldrsb.w	r1, [r4, #11]
    d9b0:	2200      	movs	r2, #0
    d9b2:	1a41      	subs	r1, r0, r1
    d9b4:	d500      	bpl.n	d9b8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    d9b6:	4249      	negs	r1, r1
    d9b8:	7feb      	ldrb	r3, [r5, #31]
    d9ba:	428b      	cmp	r3, r1
    d9bc:	dc10      	bgt.n	d9e0 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    d9be:	2bff      	cmp	r3, #255	; 0xff
    d9c0:	d00e      	beq.n	d9e0 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    d9c2:	7b21      	ldrb	r1, [r4, #12]
    d9c4:	1c49      	adds	r1, r1, #1
    d9c6:	b2c9      	uxtb	r1, r1
    d9c8:	7321      	strb	r1, [r4, #12]
    d9ca:	f895 3020 	ldrb.w	r3, [r5, #32]
    d9ce:	4299      	cmp	r1, r3
    d9d0:	d802      	bhi.n	d9d8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x46>
    d9d2:	7ae1      	ldrb	r1, [r4, #11]
    d9d4:	297f      	cmp	r1, #127	; 0x7f
    d9d6:	d103      	bne.n	d9e0 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    d9d8:	72e0      	strb	r0, [r4, #11]
    d9da:	2000      	movs	r0, #0
    d9dc:	7320      	strb	r0, [r4, #12]
    d9de:	2201      	movs	r2, #1
    d9e0:	4610      	mov	r0, r2
    d9e2:	bd38      	pop	{r3, r4, r5, pc}
    d9e4:	207f      	movs	r0, #127	; 0x7f
    d9e6:	7260      	strb	r0, [r4, #9]
    d9e8:	2000      	movs	r0, #0
    d9ea:	bd38      	pop	{r3, r4, r5, pc}

0000d9ec <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    d9ec:	2300      	movs	r3, #0
    d9ee:	6283      	str	r3, [r0, #40]	; 0x28
    d9f0:	8602      	strh	r2, [r0, #48]	; 0x30
    d9f2:	f240 2371 	movw	r3, #625	; 0x271
    d9f6:	435a      	muls	r2, r3
    d9f8:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    d9fc:	1e52      	subs	r2, r2, #1
    d9fe:	fbb2 f1f1 	udiv	r1, r2, r1
    da02:	62c1      	str	r1, [r0, #44]	; 0x2c
    da04:	4770      	bx	lr

0000da06 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    da06:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    da0a:	4607      	mov	r7, r0
    da0c:	4690      	mov	r8, r2
    da0e:	468b      	mov	fp, r1
    da10:	2601      	movs	r6, #1
    da12:	4608      	mov	r0, r1
    da14:	f000 f957 	bl	dcc6 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    da18:	4682      	mov	sl, r0
    da1a:	4658      	mov	r0, fp
    da1c:	f000 f95f 	bl	dcde <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    da20:	4681      	mov	r9, r0
    da22:	f7ff ff66 	bl	d8f2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    da26:	4604      	mov	r4, r0
    da28:	4650      	mov	r0, sl
    da2a:	f7ff ff62 	bl	d8f2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    da2e:	4605      	mov	r5, r0
    da30:	ea54 0005 	orrs.w	r0, r4, r5
    da34:	d100      	bne.n	da38 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    da36:	2600      	movs	r6, #0
    da38:	f7fd fa7c 	bl	af34 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    da3c:	ea10 0f09 	tst.w	r0, r9
    da40:	d100      	bne.n	da44 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    da42:	2400      	movs	r4, #0
    da44:	f7fd fa76 	bl	af34 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    da48:	ea10 0f0a 	tst.w	r0, sl
    da4c:	d100      	bne.n	da50 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    da4e:	2500      	movs	r5, #0
    da50:	f897 0062 	ldrb.w	r0, [r7, #98]	; 0x62
    da54:	42a0      	cmp	r0, r4
    da56:	d100      	bne.n	da5a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    da58:	2400      	movs	r4, #0
    da5a:	f888 4000 	strb.w	r4, [r8]
    da5e:	f897 0063 	ldrb.w	r0, [r7, #99]	; 0x63
    da62:	42a8      	cmp	r0, r5
    da64:	d100      	bne.n	da68 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    da66:	2500      	movs	r5, #0
    da68:	f888 5001 	strb.w	r5, [r8, #1]
    da6c:	b974      	cbnz	r4, da8c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    da6e:	b96d      	cbnz	r5, da8c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    da70:	4658      	mov	r0, fp
    da72:	f000 f932 	bl	dcda <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    da76:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
    da7a:	1a40      	subs	r0, r0, r1
    da7c:	b200      	sxth	r0, r0
    da7e:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    da82:	4288      	cmp	r0, r1
    da84:	dc01      	bgt.n	da8a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    da86:	2800      	cmp	r0, #0
    da88:	dc00      	bgt.n	da8c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    da8a:	2600      	movs	r6, #0
    da8c:	4630      	mov	r0, r6
    da8e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000da92 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    da92:	f240 41e2 	movw	r1, #1250	; 0x4e2
    da96:	4348      	muls	r0, r1
    da98:	4770      	bx	lr

0000da9a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    da9a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    da9e:	fb10 f001 	smulbb	r0, r0, r1
    daa2:	4770      	bx	lr

0000daa4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    daa4:	b510      	push	{r4, lr}
    daa6:	2300      	movs	r3, #0
    daa8:	461a      	mov	r2, r3
    daaa:	e003      	b.n	dab4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    daac:	5c84      	ldrb	r4, [r0, r2]
    daae:	4323      	orrs	r3, r4
    dab0:	1c52      	adds	r2, r2, #1
    dab2:	b2d2      	uxtb	r2, r2
    dab4:	428a      	cmp	r2, r1
    dab6:	d3f9      	bcc.n	daac <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    dab8:	b10b      	cbz	r3, dabe <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    daba:	2000      	movs	r0, #0
    dabc:	bd10      	pop	{r4, pc}
    dabe:	2001      	movs	r0, #1
    dac0:	bd10      	pop	{r4, pc}

0000dac2 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    dac2:	b570      	push	{r4, r5, r6, lr}
    dac4:	788b      	ldrb	r3, [r1, #2]
    dac6:	780c      	ldrb	r4, [r1, #0]
    dac8:	7ac5      	ldrb	r5, [r0, #11]
    daca:	4063      	eors	r3, r4
    dacc:	78cc      	ldrb	r4, [r1, #3]
    dace:	7849      	ldrb	r1, [r1, #1]
    dad0:	404c      	eors	r4, r1
    dad2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    dad6:	ea83 0102 	eor.w	r1, r3, r2
    dada:	2200      	movs	r2, #0
    dadc:	b2cc      	uxtb	r4, r1
    dade:	0a09      	lsrs	r1, r1, #8
    dae0:	fa94 f4a4 	rbit	r4, r4
    dae4:	fa91 f1a1 	rbit	r1, r1
    dae8:	0e24      	lsrs	r4, r4, #24
    daea:	0e09      	lsrs	r1, r1, #24
    daec:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    daf0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    daf4:	1c52      	adds	r2, r2, #1
    daf6:	4419      	add	r1, r3
    daf8:	b2d2      	uxtb	r2, r2
    dafa:	b289      	uxth	r1, r1
    dafc:	2a03      	cmp	r2, #3
    dafe:	d3ed      	bcc.n	dadc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x1a>
    db00:	4059      	eors	r1, r3
    db02:	2225      	movs	r2, #37	; 0x25
    db04:	fbb1 f3f2 	udiv	r3, r1, r2
    db08:	fb02 1213 	mls	r2, r2, r3, r1
    db0c:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    db10:	f002 0607 	and.w	r6, r2, #7
    db14:	785b      	ldrb	r3, [r3, #1]
    db16:	2401      	movs	r4, #1
    db18:	fa04 f606 	lsl.w	r6, r4, r6
    db1c:	4233      	tst	r3, r6
    db1e:	d001      	beq.n	db24 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    db20:	4610      	mov	r0, r2
    db22:	bd70      	pop	{r4, r5, r6, pc}
    db24:	434d      	muls	r5, r1
    db26:	0c29      	lsrs	r1, r5, #16
    db28:	1c49      	adds	r1, r1, #1
    db2a:	b2c9      	uxtb	r1, r1
    db2c:	2300      	movs	r3, #0
    db2e:	18c5      	adds	r5, r0, r3
    db30:	79aa      	ldrb	r2, [r5, #6]
    db32:	428a      	cmp	r2, r1
    db34:	d311      	bcc.n	db5a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x98>
    db36:	786d      	ldrb	r5, [r5, #1]
    db38:	2200      	movs	r2, #0
    db3a:	fa04 f602 	lsl.w	r6, r4, r2
    db3e:	4235      	tst	r5, r6
    db40:	d001      	beq.n	db46 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x84>
    db42:	1e49      	subs	r1, r1, #1
    db44:	b2c9      	uxtb	r1, r1
    db46:	b121      	cbz	r1, db52 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    db48:	1c52      	adds	r2, r2, #1
    db4a:	b2d2      	uxtb	r2, r2
    db4c:	2a08      	cmp	r2, #8
    db4e:	d3f4      	bcc.n	db3a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x78>
    db50:	e005      	b.n	db5e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x9c>
    db52:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    db56:	b2c0      	uxtb	r0, r0
    db58:	bd70      	pop	{r4, r5, r6, pc}
    db5a:	1a89      	subs	r1, r1, r2
    db5c:	b2c9      	uxtb	r1, r1
    db5e:	1c5b      	adds	r3, r3, #1
    db60:	b2db      	uxtb	r3, r3
    db62:	2b05      	cmp	r3, #5
    db64:	d3e3      	bcc.n	db2e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x6c>
    db66:	f44f 7187 	mov.w	r1, #270	; 0x10e
    db6a:	2046      	movs	r0, #70	; 0x46
    db6c:	f7f6 feb8 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000db70 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    db70:	b510      	push	{r4, lr}
    db72:	4604      	mov	r4, r0
    db74:	f890 0020 	ldrb.w	r0, [r0, #32]
    db78:	b108      	cbz	r0, db7e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    db7a:	2825      	cmp	r0, #37	; 0x25
    db7c:	d901      	bls.n	db82 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    db7e:	2012      	movs	r0, #18
    db80:	bd10      	pop	{r4, pc}
    db82:	b12a      	cbz	r2, db90 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    db84:	7d60      	ldrb	r0, [r4, #21]
    db86:	b128      	cbz	r0, db94 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    db88:	2801      	cmp	r0, #1
    db8a:	d009      	beq.n	dba0 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    db8c:	201f      	movs	r0, #31
    db8e:	bd10      	pop	{r4, pc}
    db90:	2000      	movs	r0, #0
    db92:	bd10      	pop	{r4, pc}
    db94:	4620      	mov	r0, r4
    db96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    db9a:	4611      	mov	r1, r2
    db9c:	f7f8 be44 	b.w	6828 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x124>
    dba0:	88a2      	ldrh	r2, [r4, #4]
    dba2:	f104 0015 	add.w	r0, r4, #21
    dba6:	310c      	adds	r1, #12
    dba8:	f7ff ff8b 	bl	dac2 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    dbac:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    dbb0:	e7ee      	b.n	db90 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000dbb2 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    dbb2:	b530      	push	{r4, r5, lr}
    dbb4:	1c42      	adds	r2, r0, #1
    dbb6:	428a      	cmp	r2, r1
    dbb8:	d004      	beq.n	dbc4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    dbba:	680a      	ldr	r2, [r1, #0]
    dbbc:	f8c0 2001 	str.w	r2, [r0, #1]
    dbc0:	7909      	ldrb	r1, [r1, #4]
    dbc2:	7141      	strb	r1, [r0, #5]
    dbc4:	7941      	ldrb	r1, [r0, #5]
    dbc6:	f001 011f 	and.w	r1, r1, #31
    dbca:	7141      	strb	r1, [r0, #5]
    dbcc:	2100      	movs	r1, #0
    dbce:	72c1      	strb	r1, [r0, #11]
    dbd0:	1843      	adds	r3, r0, r1
    dbd2:	1c49      	adds	r1, r1, #1
    dbd4:	785c      	ldrb	r4, [r3, #1]
    dbd6:	b2c9      	uxtb	r1, r1
    dbd8:	f004 0201 	and.w	r2, r4, #1
    dbdc:	0864      	lsrs	r4, r4, #1
    dbde:	f004 0501 	and.w	r5, r4, #1
    dbe2:	4415      	add	r5, r2
    dbe4:	0862      	lsrs	r2, r4, #1
    dbe6:	f002 0401 	and.w	r4, r2, #1
    dbea:	442c      	add	r4, r5
    dbec:	0852      	lsrs	r2, r2, #1
    dbee:	f002 0501 	and.w	r5, r2, #1
    dbf2:	442c      	add	r4, r5
    dbf4:	0852      	lsrs	r2, r2, #1
    dbf6:	f002 0501 	and.w	r5, r2, #1
    dbfa:	442c      	add	r4, r5
    dbfc:	0852      	lsrs	r2, r2, #1
    dbfe:	f002 0501 	and.w	r5, r2, #1
    dc02:	442c      	add	r4, r5
    dc04:	0852      	lsrs	r2, r2, #1
    dc06:	f002 0501 	and.w	r5, r2, #1
    dc0a:	442c      	add	r4, r5
    dc0c:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    dc10:	719a      	strb	r2, [r3, #6]
    dc12:	7ac3      	ldrb	r3, [r0, #11]
    dc14:	2905      	cmp	r1, #5
    dc16:	441a      	add	r2, r3
    dc18:	72c2      	strb	r2, [r0, #11]
    dc1a:	d3d9      	bcc.n	dbd0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    dc1c:	bd30      	pop	{r4, r5, pc}

0000dc1e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    dc1e:	b570      	push	{r4, r5, r6, lr}
    dc20:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    dc24:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    dc28:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    dc2c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    dc30:	88c0      	ldrh	r0, [r0, #6]
    dc32:	b131      	cbz	r1, dc42 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    dc34:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    dc38:	d903      	bls.n	dc42 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    dc3a:	f640 5107 	movw	r1, #3335	; 0xd07
    dc3e:	428a      	cmp	r2, r1
    dc40:	d90b      	bls.n	dc5a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    dc42:	1f91      	subs	r1, r2, #6
    dc44:	f640 467a 	movw	r6, #3194	; 0xc7a
    dc48:	42b1      	cmp	r1, r6
    dc4a:	d80e      	bhi.n	dc6a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    dc4c:	b16b      	cbz	r3, dc6a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    dc4e:	2b08      	cmp	r3, #8
    dc50:	d80b      	bhi.n	dc6a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    dc52:	4293      	cmp	r3, r2
    dc54:	d209      	bcs.n	dc6a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    dc56:	4294      	cmp	r4, r2
    dc58:	d807      	bhi.n	dc6a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    dc5a:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    dc5e:	d204      	bcs.n	dc6a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    dc60:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    dc64:	d801      	bhi.n	dc6a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    dc66:	2001      	movs	r0, #1
    dc68:	bd70      	pop	{r4, r5, r6, pc}
    dc6a:	2000      	movs	r0, #0
    dc6c:	bd70      	pop	{r4, r5, r6, pc}

0000dc6e <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    dc6e:	6842      	ldr	r2, [r0, #4]
    dc70:	600a      	str	r2, [r1, #0]
    dc72:	7a00      	ldrb	r0, [r0, #8]
    dc74:	7108      	strb	r0, [r1, #4]
    dc76:	4770      	bx	lr

0000dc78 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    dc78:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    dc7c:	4770      	bx	lr

0000dc7e <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    dc7e:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    dc82:	4770      	bx	lr

0000dc84 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    dc84:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    dc88:	4770      	bx	lr

0000dc8a <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    dc8a:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    dc8e:	4770      	bx	lr

0000dc90 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    dc90:	8980      	ldrh	r0, [r0, #12]
    dc92:	8008      	strh	r0, [r1, #0]
    dc94:	4770      	bx	lr

0000dc96 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    dc96:	f8d0 0016 	ldr.w	r0, [r0, #22]
    dc9a:	6008      	str	r0, [r1, #0]
    dc9c:	4770      	bx	lr

0000dc9e <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    dc9e:	6842      	ldr	r2, [r0, #4]
    dca0:	600a      	str	r2, [r1, #0]
    dca2:	6880      	ldr	r0, [r0, #8]
    dca4:	6048      	str	r0, [r1, #4]
    dca6:	4770      	bx	lr

0000dca8 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    dca8:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    dcac:	600a      	str	r2, [r1, #0]
    dcae:	6840      	ldr	r0, [r0, #4]
    dcb0:	6048      	str	r0, [r1, #4]
    dcb2:	4770      	bx	lr

0000dcb4 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    dcb4:	6842      	ldr	r2, [r0, #4]
    dcb6:	600a      	str	r2, [r1, #0]
    dcb8:	6880      	ldr	r0, [r0, #8]
    dcba:	6048      	str	r0, [r1, #4]
    dcbc:	4770      	bx	lr

0000dcbe <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    dcbe:	7800      	ldrb	r0, [r0, #0]
    dcc0:	f000 0003 	and.w	r0, r0, #3
    dcc4:	4770      	bx	lr

0000dcc6 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    dcc6:	7900      	ldrb	r0, [r0, #4]
    dcc8:	4770      	bx	lr

0000dcca <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    dcca:	8880      	ldrh	r0, [r0, #4]
    dccc:	4770      	bx	lr

0000dcce <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    dcce:	88c0      	ldrh	r0, [r0, #6]
    dcd0:	4770      	bx	lr

0000dcd2 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    dcd2:	8900      	ldrh	r0, [r0, #8]
    dcd4:	4770      	bx	lr

0000dcd6 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    dcd6:	8940      	ldrh	r0, [r0, #10]
    dcd8:	4770      	bx	lr

0000dcda <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    dcda:	88c0      	ldrh	r0, [r0, #6]
    dcdc:	4770      	bx	lr

0000dcde <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    dcde:	7940      	ldrb	r0, [r0, #5]
    dce0:	4770      	bx	lr

0000dce2 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    dce2:	7900      	ldrb	r0, [r0, #4]
    dce4:	4770      	bx	lr

0000dce6 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    dce6:	7900      	ldrb	r0, [r0, #4]
    dce8:	4770      	bx	lr

0000dcea <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    dcea:	8901      	ldrh	r1, [r0, #8]
    dcec:	291b      	cmp	r1, #27
    dcee:	d30c      	bcc.n	dd0a <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    dcf0:	8941      	ldrh	r1, [r0, #10]
    dcf2:	f44f 72a4 	mov.w	r2, #328	; 0x148
    dcf6:	4291      	cmp	r1, r2
    dcf8:	d307      	bcc.n	dd0a <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    dcfa:	8881      	ldrh	r1, [r0, #4]
    dcfc:	291b      	cmp	r1, #27
    dcfe:	d304      	bcc.n	dd0a <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    dd00:	88c0      	ldrh	r0, [r0, #6]
    dd02:	4290      	cmp	r0, r2
    dd04:	d301      	bcc.n	dd0a <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    dd06:	2001      	movs	r0, #1
    dd08:	4770      	bx	lr
    dd0a:	2000      	movs	r0, #0
    dd0c:	4770      	bx	lr

0000dd0e <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    dd0e:	b510      	push	{r4, lr}
    dd10:	29fb      	cmp	r1, #251	; 0xfb
    dd12:	d904      	bls.n	dd1e <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    dd14:	f240 515b 	movw	r1, #1371	; 0x55b
    dd18:	202a      	movs	r0, #42	; 0x2a
    dd1a:	f7f6 fde1 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd1e:	7041      	strb	r1, [r0, #1]
    dd20:	bd10      	pop	{r4, pc}

0000dd22 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    dd22:	7901      	ldrb	r1, [r0, #4]
    dd24:	0749      	lsls	r1, r1, #29
    dd26:	d004      	beq.n	dd32 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    dd28:	7940      	ldrb	r0, [r0, #5]
    dd2a:	0740      	lsls	r0, r0, #29
    dd2c:	d001      	beq.n	dd32 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    dd2e:	2001      	movs	r0, #1
    dd30:	4770      	bx	lr
    dd32:	2000      	movs	r0, #0
    dd34:	4770      	bx	lr

0000dd36 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    dd36:	7900      	ldrb	r0, [r0, #4]
    dd38:	4770      	bx	lr

0000dd3a <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    dd3a:	7940      	ldrb	r0, [r0, #5]
    dd3c:	4770      	bx	lr

0000dd3e <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    dd3e:	7101      	strb	r1, [r0, #4]
    dd40:	4770      	bx	lr

0000dd42 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    dd42:	7141      	strb	r1, [r0, #5]
    dd44:	4770      	bx	lr

0000dd46 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    dd46:	b510      	push	{r4, lr}
    dd48:	2a1b      	cmp	r2, #27
    dd4a:	d904      	bls.n	dd56 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    dd4c:	f240 31c2 	movw	r1, #962	; 0x3c2
    dd50:	202a      	movs	r0, #42	; 0x2a
    dd52:	f7f6 fdc5 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd56:	7042      	strb	r2, [r0, #1]
    dd58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dd5c:	1cc0      	adds	r0, r0, #3
    dd5e:	f7fe bbd4 	b.w	c50a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000dd62 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    dd62:	6809      	ldr	r1, [r1, #0]
    dd64:	60c1      	str	r1, [r0, #12]
    dd66:	4770      	bx	lr

0000dd68 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    dd68:	680a      	ldr	r2, [r1, #0]
    dd6a:	6042      	str	r2, [r0, #4]
    dd6c:	6849      	ldr	r1, [r1, #4]
    dd6e:	6081      	str	r1, [r0, #8]
    dd70:	4770      	bx	lr

0000dd72 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    dd72:	680a      	ldr	r2, [r1, #0]
    dd74:	6042      	str	r2, [r0, #4]
    dd76:	6849      	ldr	r1, [r1, #4]
    dd78:	6081      	str	r1, [r0, #8]
    dd7a:	4770      	bx	lr

0000dd7c <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    dd7c:	680a      	ldr	r2, [r1, #0]
    dd7e:	6042      	str	r2, [r0, #4]
    dd80:	6849      	ldr	r1, [r1, #4]
    dd82:	6081      	str	r1, [r0, #8]
    dd84:	4770      	bx	lr

0000dd86 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    dd86:	7802      	ldrb	r2, [r0, #0]
    dd88:	f001 0103 	and.w	r1, r1, #3
    dd8c:	f022 0203 	bic.w	r2, r2, #3
    dd90:	430a      	orrs	r2, r1
    dd92:	7002      	strb	r2, [r0, #0]
    dd94:	4770      	bx	lr

0000dd96 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    dd96:	7101      	strb	r1, [r0, #4]
    dd98:	0a09      	lsrs	r1, r1, #8
    dd9a:	7141      	strb	r1, [r0, #5]
    dd9c:	4770      	bx	lr

0000dd9e <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    dd9e:	7181      	strb	r1, [r0, #6]
    dda0:	0a09      	lsrs	r1, r1, #8
    dda2:	71c1      	strb	r1, [r0, #7]
    dda4:	4770      	bx	lr

0000dda6 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    dda6:	7201      	strb	r1, [r0, #8]
    dda8:	0a09      	lsrs	r1, r1, #8
    ddaa:	7241      	strb	r1, [r0, #9]
    ddac:	4770      	bx	lr

0000ddae <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    ddae:	7281      	strb	r1, [r0, #10]
    ddb0:	0a09      	lsrs	r1, r1, #8
    ddb2:	72c1      	strb	r1, [r0, #11]
    ddb4:	4770      	bx	lr

0000ddb6 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    ddb6:	b570      	push	{r4, r5, r6, lr}
    ddb8:	7802      	ldrb	r2, [r0, #0]
    ddba:	f002 020f 	and.w	r2, r2, #15
    ddbe:	2a03      	cmp	r2, #3
    ddc0:	d02c      	beq.n	de1c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x66>
    ddc2:	2a05      	cmp	r2, #5
    ddc4:	d12d      	bne.n	de22 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    ddc6:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    ddca:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    ddce:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    ddd2:	7d83      	ldrb	r3, [r0, #22]
    ddd4:	b141      	cbz	r1, dde8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    ddd6:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    ddda:	d905      	bls.n	dde8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    dddc:	f640 5107 	movw	r1, #3335	; 0xd07
    dde0:	428a      	cmp	r2, r1
    dde2:	d801      	bhi.n	dde8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    dde4:	2101      	movs	r1, #1
    dde6:	e000      	b.n	ddea <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x34>
    dde8:	2100      	movs	r1, #0
    ddea:	7846      	ldrb	r6, [r0, #1]
    ddec:	2e22      	cmp	r6, #34	; 0x22
    ddee:	d118      	bne.n	de22 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    ddf0:	b959      	cbnz	r1, de0a <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x54>
    ddf2:	1f91      	subs	r1, r2, #6
    ddf4:	f640 467a 	movw	r6, #3194	; 0xc7a
    ddf8:	42b1      	cmp	r1, r6
    ddfa:	d812      	bhi.n	de22 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    ddfc:	b18b      	cbz	r3, de22 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    ddfe:	2b08      	cmp	r3, #8
    de00:	d80f      	bhi.n	de22 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    de02:	4293      	cmp	r3, r2
    de04:	d20d      	bcs.n	de22 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    de06:	4294      	cmp	r4, r2
    de08:	d80b      	bhi.n	de22 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    de0a:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    de0e:	d208      	bcs.n	de22 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    de10:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    de14:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    de18:	d905      	bls.n	de26 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x70>
    de1a:	e002      	b.n	de22 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    de1c:	7840      	ldrb	r0, [r0, #1]
    de1e:	280c      	cmp	r0, #12
    de20:	d001      	beq.n	de26 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x70>
    de22:	2000      	movs	r0, #0
    de24:	bd70      	pop	{r4, r5, r6, pc}
    de26:	2001      	movs	r0, #1
    de28:	bd70      	pop	{r4, r5, r6, pc}

0000de2a <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    de2a:	b570      	push	{r4, r5, r6, lr}
    de2c:	4614      	mov	r4, r2
    de2e:	4605      	mov	r5, r0
    de30:	2a1f      	cmp	r2, #31
    de32:	d903      	bls.n	de3c <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    de34:	21b2      	movs	r1, #178	; 0xb2
    de36:	202a      	movs	r0, #42	; 0x2a
    de38:	f7f6 fd52 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de3c:	f105 0009 	add.w	r0, r5, #9
    de40:	f7fe fb63 	bl	c50a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    de44:	1da4      	adds	r4, r4, #6
    de46:	706c      	strb	r4, [r5, #1]
    de48:	bd70      	pop	{r4, r5, r6, pc}

0000de4a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    de4a:	b510      	push	{r4, lr}
    de4c:	7802      	ldrb	r2, [r0, #0]
    de4e:	f001 030f 	and.w	r3, r1, #15
    de52:	f022 020f 	bic.w	r2, r2, #15
    de56:	431a      	orrs	r2, r3
    de58:	7002      	strb	r2, [r0, #0]
    de5a:	2907      	cmp	r1, #7
    de5c:	d20c      	bcs.n	de78 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    de5e:	e8df f001 	tbb	[pc, r1]
    de62:	0604      	.short	0x0604
    de64:	08040604 	.word	0x08040604
    de68:	0004      	.short	0x0004
    de6a:	2106      	movs	r1, #6
    de6c:	e002      	b.n	de74 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    de6e:	210c      	movs	r1, #12
    de70:	e000      	b.n	de74 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    de72:	2122      	movs	r1, #34	; 0x22
    de74:	7041      	strb	r1, [r0, #1]
    de76:	bd10      	pop	{r4, pc}
    de78:	216e      	movs	r1, #110	; 0x6e
    de7a:	202a      	movs	r0, #42	; 0x2a
    de7c:	f7f6 fd30 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000de80 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    de80:	680a      	ldr	r2, [r1, #0]
    de82:	f840 2f09 	str.w	r2, [r0, #9]!
    de86:	8889      	ldrh	r1, [r1, #4]
    de88:	8081      	strh	r1, [r0, #4]
    de8a:	4770      	bx	lr

0000de8c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    de8c:	7802      	ldrb	r2, [r0, #0]
    de8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    de92:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    de96:	7002      	strb	r2, [r0, #0]
    de98:	4770      	bx	lr

0000de9a <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    de9a:	680a      	ldr	r2, [r1, #0]
    de9c:	f840 2f03 	str.w	r2, [r0, #3]!
    dea0:	8889      	ldrh	r1, [r1, #4]
    dea2:	8081      	strh	r1, [r0, #4]
    dea4:	4770      	bx	lr

0000dea6 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    dea6:	7802      	ldrb	r2, [r0, #0]
    dea8:	2340      	movs	r3, #64	; 0x40
    deaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    deae:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    deb2:	430a      	orrs	r2, r1
    deb4:	7002      	strb	r2, [r0, #0]
    deb6:	4770      	bx	lr

0000deb8 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    deb8:	b570      	push	{r4, r5, r6, lr}
    deba:	4614      	mov	r4, r2
    debc:	4605      	mov	r5, r0
    debe:	2a1f      	cmp	r2, #31
    dec0:	d903      	bls.n	deca <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    dec2:	21d4      	movs	r1, #212	; 0xd4
    dec4:	202a      	movs	r0, #42	; 0x2a
    dec6:	f7f6 fd0b 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    deca:	f105 0009 	add.w	r0, r5, #9
    dece:	f7fe fb1c 	bl	c50a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ded2:	1da4      	adds	r4, r4, #6
    ded4:	706c      	strb	r4, [r5, #1]
    ded6:	bd70      	pop	{r4, r5, r6, pc}

0000ded8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    ded8:	2101      	movs	r1, #1
    deda:	f000 b853 	b.w	df84 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>

0000dede <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    dede:	6841      	ldr	r1, [r0, #4]
    dee0:	2200      	movs	r2, #0
    dee2:	f891 30fa 	ldrb.w	r3, [r1, #250]	; 0xfa
    dee6:	2b00      	cmp	r3, #0
    dee8:	d004      	beq.n	def4 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    deea:	f881 20fa 	strb.w	r2, [r1, #250]	; 0xfa
    deee:	6840      	ldr	r0, [r0, #4]
    def0:	f000 bc87 	b.w	e802 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>
    def4:	4770      	bx	lr
    def6:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    defa:	460e      	mov	r6, r1
    defc:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    df00:	4617      	mov	r7, r2
    df02:	39ff      	subs	r1, #255	; 0xff
    df04:	d014      	beq.n	df30 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    df06:	8030      	strh	r0, [r6, #0]
    df08:	2100      	movs	r1, #0
    df0a:	7171      	strb	r1, [r6, #5]
    df0c:	f7f7 f91c 	bl	5148 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    df10:	4604      	mov	r4, r0
    df12:	f7ff f915 	bl	d140 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    df16:	0005      	movs	r5, r0
    df18:	d00a      	beq.n	df30 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    df1a:	4620      	mov	r0, r4
    df1c:	4629      	mov	r1, r5
    df1e:	aa01      	add	r2, sp, #4
    df20:	f7ff f931 	bl	d186 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    df24:	8070      	strh	r0, [r6, #2]
    df26:	b130      	cbz	r0, df36 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x58>
    df28:	28fb      	cmp	r0, #251	; 0xfb
    df2a:	d906      	bls.n	df3a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x5c>
    df2c:	21c9      	movs	r1, #201	; 0xc9
    df2e:	e026      	b.n	df7e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    df30:	2000      	movs	r0, #0
    df32:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    df36:	21c8      	movs	r1, #200	; 0xc8
    df38:	e021      	b.n	df7e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    df3a:	9801      	ldr	r0, [sp, #4]
    df3c:	f7ff febf 	bl	dcbe <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    df40:	2801      	cmp	r0, #1
    df42:	d003      	beq.n	df4c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    df44:	2802      	cmp	r0, #2
    df46:	d001      	beq.n	df4c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    df48:	21d8      	movs	r1, #216	; 0xd8
    df4a:	e018      	b.n	df7e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    df4c:	7130      	strb	r0, [r6, #4]
    df4e:	4629      	mov	r1, r5
    df50:	8873      	ldrh	r3, [r6, #2]
    df52:	2503      	movs	r5, #3
    df54:	4620      	mov	r0, r4
    df56:	463a      	mov	r2, r7
    df58:	9500      	str	r5, [sp, #0]
    df5a:	f7fe ffe6 	bl	cf2a <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    df5e:	4620      	mov	r0, r4
    df60:	60b7      	str	r7, [r6, #8]
    df62:	f7ff f89c 	bl	d09e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    df66:	b138      	cbz	r0, df78 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9a>
    df68:	2100      	movs	r1, #0
    df6a:	4620      	mov	r0, r4
    df6c:	460a      	mov	r2, r1
    df6e:	f7ff f9e0 	bl	d332 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    df72:	b118      	cbz	r0, df7c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9e>
    df74:	2001      	movs	r0, #1
    df76:	e7dc      	b.n	df32 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x54>
    df78:	21e8      	movs	r1, #232	; 0xe8
    df7a:	e000      	b.n	df7e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    df7c:	21ed      	movs	r1, #237	; 0xed
    df7e:	202b      	movs	r0, #43	; 0x2b
    df80:	f7f6 fcae 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df84:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    df88:	4604      	mov	r4, r0
    df8a:	460e      	mov	r6, r1
    df8c:	2000      	movs	r0, #0
    df8e:	f7f6 fead 	bl	4cec <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    df92:	4605      	mov	r5, r0
    df94:	2000      	movs	r0, #0
    df96:	b916      	cbnz	r6, df9e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc0>
    df98:	2001      	movs	r0, #1
    df9a:	f7f6 fea7 	bl	4cec <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    df9e:	2600      	movs	r6, #0
    dfa0:	46b0      	mov	r8, r6
    dfa2:	182f      	adds	r7, r5, r0
    dfa4:	e017      	b.n	dfd6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xf8>
    dfa6:	8820      	ldrh	r0, [r4, #0]
    dfa8:	1c40      	adds	r0, r0, #1
    dfaa:	b280      	uxth	r0, r0
    dfac:	8020      	strh	r0, [r4, #0]
    dfae:	42b8      	cmp	r0, r7
    dfb0:	d302      	bcc.n	dfb8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xda>
    dfb2:	4640      	mov	r0, r8
    dfb4:	f8a4 8000 	strh.w	r8, [r4]
    dfb8:	b280      	uxth	r0, r0
    dfba:	42a8      	cmp	r0, r5
    dfbc:	d304      	bcc.n	dfc8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    dfbe:	42b8      	cmp	r0, r7
    dfc0:	d202      	bcs.n	dfc8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    dfc2:	2000      	movs	r0, #0
    dfc4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    dfc8:	4669      	mov	r1, sp
    dfca:	f7ff fbcf 	bl	d76c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    dfce:	2800      	cmp	r0, #0
    dfd0:	d0f8      	beq.n	dfc4 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>
    dfd2:	1c76      	adds	r6, r6, #1
    dfd4:	b2f6      	uxtb	r6, r6
    dfd6:	42b7      	cmp	r7, r6
    dfd8:	d8e5      	bhi.n	dfa6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc8>
    dfda:	f64f 70ff 	movw	r0, #65535	; 0xffff
    dfde:	8020      	strh	r0, [r4, #0]
    dfe0:	2012      	movs	r0, #18
    dfe2:	e7ef      	b.n	dfc4 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>

0000dfe4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    dfe4:	b570      	push	{r4, r5, r6, lr}
    dfe6:	8050      	strh	r0, [r2, #2]
    dfe8:	890c      	ldrh	r4, [r1, #8]
    dfea:	8094      	strh	r4, [r2, #4]
    dfec:	898b      	ldrh	r3, [r1, #12]
    dfee:	80d3      	strh	r3, [r2, #6]
    dff0:	8948      	ldrh	r0, [r1, #10]
    dff2:	8110      	strh	r0, [r2, #8]
    dff4:	89cd      	ldrh	r5, [r1, #14]
    dff6:	8155      	strh	r5, [r2, #10]
    dff8:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    dffa:	42ae      	cmp	r6, r5
    dffc:	d108      	bne.n	e010 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    dffe:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    e000:	4285      	cmp	r5, r0
    e002:	d105      	bne.n	e010 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e004:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    e006:	429d      	cmp	r5, r3
    e008:	d102      	bne.n	e010 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e00a:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    e00c:	42a3      	cmp	r3, r4
    e00e:	d001      	beq.n	e014 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    e010:	2301      	movs	r3, #1
    e012:	e000      	b.n	e016 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    e014:	2300      	movs	r3, #0
    e016:	7313      	strb	r3, [r2, #12]
    e018:	8548      	strh	r0, [r1, #42]	; 0x2a
    e01a:	8950      	ldrh	r0, [r2, #10]
    e01c:	85c8      	strh	r0, [r1, #46]	; 0x2e
    e01e:	8890      	ldrh	r0, [r2, #4]
    e020:	8588      	strh	r0, [r1, #44]	; 0x2c
    e022:	88d0      	ldrh	r0, [r2, #6]
    e024:	8608      	strh	r0, [r1, #48]	; 0x30
    e026:	2001      	movs	r0, #1
    e028:	7010      	strb	r0, [r2, #0]
    e02a:	bd70      	pop	{r4, r5, r6, pc}

0000e02c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e02c:	b510      	push	{r4, lr}
    e02e:	888c      	ldrh	r4, [r1, #4]
    e030:	890a      	ldrh	r2, [r1, #8]
    e032:	884b      	ldrh	r3, [r1, #2]
    e034:	88c9      	ldrh	r1, [r1, #6]
    e036:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    e03a:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    e03e:	f8a0 4042 	strh.w	r4, [r0, #66]	; 0x42
    e042:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
    e046:	bd10      	pop	{r4, pc}

0000e048 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e048:	b570      	push	{r4, r5, r6, lr}
    e04a:	4615      	mov	r5, r2
    e04c:	460c      	mov	r4, r1
    e04e:	f000 f8c1 	bl	e1d4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x50>
    e052:	3096      	adds	r0, #150	; 0x96
    e054:	4428      	add	r0, r5
    e056:	42a0      	cmp	r0, r4
    e058:	d801      	bhi.n	e05e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e05a:	1a20      	subs	r0, r4, r0
    e05c:	bd70      	pop	{r4, r5, r6, pc}
    e05e:	2000      	movs	r0, #0
    e060:	bd70      	pop	{r4, r5, r6, pc}

0000e062 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e062:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e066:	4604      	mov	r4, r0
    e068:	8dc7      	ldrh	r7, [r0, #46]	; 0x2e
    e06a:	8e46      	ldrh	r6, [r0, #50]	; 0x32
    e06c:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
    e070:	8f00      	ldrh	r0, [r0, #56]	; 0x38
    e072:	4285      	cmp	r5, r0
    e074:	d300      	bcc.n	e078 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x16>
    e076:	4605      	mov	r5, r0
    e078:	4620      	mov	r0, r4
    e07a:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
    e07e:	f000 f89b 	bl	e1b8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e082:	4601      	mov	r1, r0
    e084:	85e5      	strh	r5, [r4, #46]	; 0x2e
    e086:	8661      	strh	r1, [r4, #50]	; 0x32
    e088:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    e08a:	f104 0024 	add.w	r0, r4, #36	; 0x24
    e08e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    e090:	4680      	mov	r8, r0
    e092:	42aa      	cmp	r2, r5
    e094:	d200      	bcs.n	e098 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
    e096:	462a      	mov	r2, r5
    e098:	428b      	cmp	r3, r1
    e09a:	d200      	bcs.n	e09e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    e09c:	460b      	mov	r3, r1
    e09e:	8202      	strh	r2, [r0, #16]
    e0a0:	f8a8 3012 	strh.w	r3, [r8, #18]
    e0a4:	42bd      	cmp	r5, r7
    e0a6:	d101      	bne.n	e0ac <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4a>
    e0a8:	42b1      	cmp	r1, r6
    e0aa:	d001      	beq.n	e0b0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4e>
    e0ac:	2001      	movs	r0, #1
    e0ae:	e000      	b.n	e0b2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e0b0:	2000      	movs	r0, #0
    e0b2:	4681      	mov	r9, r0
    e0b4:	f8b4 5040 	ldrh.w	r5, [r4, #64]	; 0x40
    e0b8:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    e0ba:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
    e0bc:	8e26      	ldrh	r6, [r4, #48]	; 0x30
    e0be:	4285      	cmp	r5, r0
    e0c0:	d300      	bcc.n	e0c4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x62>
    e0c2:	4605      	mov	r5, r0
    e0c4:	f894 1062 	ldrb.w	r1, [r4, #98]	; 0x62
    e0c8:	4620      	mov	r0, r4
    e0ca:	f000 f87c 	bl	e1c6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    e0ce:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    e0d2:	2902      	cmp	r1, #2
    e0d4:	d108      	bne.n	e0e8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x86>
    e0d6:	42af      	cmp	r7, r5
    e0d8:	d200      	bcs.n	e0dc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7a>
    e0da:	463d      	mov	r5, r7
    e0dc:	4286      	cmp	r6, r0
    e0de:	d200      	bcs.n	e0e2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x80>
    e0e0:	4630      	mov	r0, r6
    e0e2:	2100      	movs	r1, #0
    e0e4:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
    e0e8:	f8a8 5008 	strh.w	r5, [r8, #8]
    e0ec:	f8a8 000c 	strh.w	r0, [r8, #12]
    e0f0:	42bd      	cmp	r5, r7
    e0f2:	d101      	bne.n	e0f8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x96>
    e0f4:	42b0      	cmp	r0, r6
    e0f6:	d001      	beq.n	e0fc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e0f8:	2001      	movs	r0, #1
    e0fa:	e000      	b.n	e0fe <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9c>
    e0fc:	2000      	movs	r0, #0
    e0fe:	ea40 0009 	orr.w	r0, r0, r9
    e102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e106 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e10a:	4616      	mov	r6, r2
    e10c:	460f      	mov	r7, r1
    e10e:	4604      	mov	r4, r0
    e110:	f000 f860 	bl	e1d4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x50>
    e114:	4605      	mov	r5, r0
    e116:	463a      	mov	r2, r7
    e118:	6861      	ldr	r1, [r4, #4]
    e11a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    e11c:	f000 f847 	bl	e1ae <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    e120:	19a9      	adds	r1, r5, r6
    e122:	4281      	cmp	r1, r0
    e124:	d300      	bcc.n	e128 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e126:	4608      	mov	r0, r1
    e128:	62a0      	str	r0, [r4, #40]	; 0x28
    e12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e12e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e12e:	221b      	movs	r2, #27
    e130:	8402      	strh	r2, [r0, #32]
    e132:	8382      	strh	r2, [r0, #28]
    e134:	82c2      	strh	r2, [r0, #22]
    e136:	8282      	strh	r2, [r0, #20]
    e138:	8142      	strh	r2, [r0, #10]
    e13a:	8202      	strh	r2, [r0, #16]
    e13c:	8102      	strh	r2, [r0, #8]
    e13e:	8542      	strh	r2, [r0, #42]	; 0x2a
    e140:	8582      	strh	r2, [r0, #44]	; 0x2c
    e142:	8482      	strh	r2, [r0, #36]	; 0x24
    e144:	2900      	cmp	r1, #0
    e146:	d10a      	bne.n	e15e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e148:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e14c:	8441      	strh	r1, [r0, #34]	; 0x22
    e14e:	83c1      	strh	r1, [r0, #30]
    e150:	8341      	strh	r1, [r0, #26]
    e152:	8301      	strh	r1, [r0, #24]
    e154:	81c1      	strh	r1, [r0, #14]
    e156:	8241      	strh	r1, [r0, #18]
    e158:	8181      	strh	r1, [r0, #12]
    e15a:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e15c:	8601      	strh	r1, [r0, #48]	; 0x30
    e15e:	4770      	bx	lr

0000e160 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e160:	6800      	ldr	r0, [r0, #0]
    e162:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e166:	4290      	cmp	r0, r2
    e168:	d903      	bls.n	e172 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e16a:	1a40      	subs	r0, r0, r1
    e16c:	389c      	subs	r0, #156	; 0x9c
    e16e:	0840      	lsrs	r0, r0, #1
    e170:	4770      	bx	lr
    e172:	2000      	movs	r0, #0
    e174:	4770      	bx	lr

0000e176 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e176:	b510      	push	{r4, lr}
    e178:	9c02      	ldr	r4, [sp, #8]
    e17a:	8281      	strh	r1, [r0, #20]
    e17c:	82c2      	strh	r2, [r0, #22]
    e17e:	8303      	strh	r3, [r0, #24]
    e180:	8344      	strh	r4, [r0, #26]
    e182:	bd10      	pop	{r4, pc}

0000e184 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    e184:	8050      	strh	r0, [r2, #2]
    e186:	8a88      	ldrh	r0, [r1, #20]
    e188:	8090      	strh	r0, [r2, #4]
    e18a:	8ac8      	ldrh	r0, [r1, #22]
    e18c:	80d0      	strh	r0, [r2, #6]
    e18e:	8b08      	ldrh	r0, [r1, #24]
    e190:	8110      	strh	r0, [r2, #8]
    e192:	8b48      	ldrh	r0, [r1, #26]
    e194:	8150      	strh	r0, [r2, #10]
    e196:	2001      	movs	r0, #1
    e198:	7010      	strb	r0, [r2, #0]
    e19a:	4770      	bx	lr
    e19c:	2902      	cmp	r1, #2
    e19e:	d003      	beq.n	e1a8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    e1a0:	00c0      	lsls	r0, r0, #3
    e1a2:	3070      	adds	r0, #112	; 0x70
    e1a4:	b280      	uxth	r0, r0
    e1a6:	4770      	bx	lr
    e1a8:	0080      	lsls	r0, r0, #2
    e1aa:	303c      	adds	r0, #60	; 0x3c
    e1ac:	e7fa      	b.n	e1a4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    e1ae:	4288      	cmp	r0, r1
    e1b0:	d300      	bcc.n	e1b4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    e1b2:	4608      	mov	r0, r1
    e1b4:	1a80      	subs	r0, r0, r2
    e1b6:	4770      	bx	lr
    e1b8:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    e1bc:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
    e1be:	4281      	cmp	r1, r0
    e1c0:	d200      	bcs.n	e1c4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x40>
    e1c2:	4608      	mov	r0, r1
    e1c4:	4770      	bx	lr
    e1c6:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
    e1ca:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
    e1cc:	4281      	cmp	r1, r0
    e1ce:	d200      	bcs.n	e1d2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    e1d0:	4608      	mov	r0, r1
    e1d2:	4770      	bx	lr
    e1d4:	2196      	movs	r1, #150	; 0x96
    e1d6:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    e1da:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    e1de:	f000 b800 	b.w	e1e2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    e1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e1e6:	460d      	mov	r5, r1
    e1e8:	4606      	mov	r6, r0
    e1ea:	4698      	mov	r8, r3
    e1ec:	4617      	mov	r7, r2
    e1ee:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
    e1f0:	4611      	mov	r1, r2
    e1f2:	f7ff ffd3 	bl	e19c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e1f6:	4604      	mov	r4, r0
    e1f8:	4639      	mov	r1, r7
    e1fa:	4630      	mov	r0, r6
    e1fc:	f7ff ffe3 	bl	e1c6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    e200:	42a0      	cmp	r0, r4
    e202:	d200      	bcs.n	e206 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x82>
    e204:	4604      	mov	r4, r0
    e206:	8eb0      	ldrh	r0, [r6, #52]	; 0x34
    e208:	4641      	mov	r1, r8
    e20a:	f7ff ffc7 	bl	e19c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e20e:	4607      	mov	r7, r0
    e210:	4641      	mov	r1, r8
    e212:	4630      	mov	r0, r6
    e214:	f7ff ffd0 	bl	e1b8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e218:	42b8      	cmp	r0, r7
    e21a:	d300      	bcc.n	e21e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9a>
    e21c:	4638      	mov	r0, r7
    e21e:	4420      	add	r0, r4
    e220:	4428      	add	r0, r5
    e222:	1d80      	adds	r0, r0, #6
    e224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e228:	2801      	cmp	r0, #1
    e22a:	d102      	bne.n	e232 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xae>
    e22c:	7948      	ldrb	r0, [r1, #5]
    e22e:	0980      	lsrs	r0, r0, #6
    e230:	d001      	beq.n	e236 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    e232:	2000      	movs	r0, #0
    e234:	4770      	bx	lr
    e236:	2001      	movs	r0, #1
    e238:	4770      	bx	lr
    e23a:	2801      	cmp	r0, #1
    e23c:	d106      	bne.n	e24c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc8>
    e23e:	7948      	ldrb	r0, [r1, #5]
    e240:	2101      	movs	r1, #1
    e242:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e246:	d101      	bne.n	e24c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc8>
    e248:	2001      	movs	r0, #1
    e24a:	4770      	bx	lr
    e24c:	2000      	movs	r0, #0
    e24e:	4770      	bx	lr
    e250:	2802      	cmp	r0, #2
    e252:	d003      	beq.n	e25c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd8>
    e254:	2803      	cmp	r0, #3
    e256:	d001      	beq.n	e25c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd8>
    e258:	2000      	movs	r0, #0
    e25a:	4770      	bx	lr
    e25c:	2001      	movs	r0, #1
    e25e:	4770      	bx	lr

0000e260 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    e260:	b510      	push	{r4, lr}
    e262:	4604      	mov	r4, r0
    e264:	7c00      	ldrb	r0, [r0, #16]
    e266:	f7ff fff3 	bl	e250 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    e26a:	b148      	cbz	r0, e280 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e26c:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    e270:	f104 0150 	add.w	r1, r4, #80	; 0x50
    e274:	f7ff fa37 	bl	d6e6 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e278:	2808      	cmp	r0, #8
    e27a:	d001      	beq.n	e280 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e27c:	2001      	movs	r0, #1
    e27e:	bd10      	pop	{r4, pc}
    e280:	7c20      	ldrb	r0, [r4, #16]
    e282:	b118      	cbz	r0, e28c <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e284:	2802      	cmp	r0, #2
    e286:	d001      	beq.n	e28c <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e288:	7de0      	ldrb	r0, [r4, #23]
    e28a:	bd10      	pop	{r4, pc}
    e28c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e290:	2000      	movs	r0, #0
    e292:	f7f7 ba13 	b.w	56bc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000e296 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    e296:	b508      	push	{r3, lr}
    e298:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    e29c:	f88d 1000 	strb.w	r1, [sp]
    e2a0:	9900      	ldr	r1, [sp, #0]
    e2a2:	9100      	str	r1, [sp, #0]
    e2a4:	f89d 1000 	ldrb.w	r1, [sp]
    e2a8:	b109      	cbz	r1, e2ae <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    e2aa:	2001      	movs	r0, #1
    e2ac:	bd08      	pop	{r3, pc}
    e2ae:	f890 009a 	ldrb.w	r0, [r0, #154]	; 0x9a
    e2b2:	f88d 0000 	strb.w	r0, [sp]
    e2b6:	9800      	ldr	r0, [sp, #0]
    e2b8:	9000      	str	r0, [sp, #0]
    e2ba:	f89d 0000 	ldrb.w	r0, [sp]
    e2be:	2000      	movs	r0, #0
    e2c0:	bd08      	pop	{r3, pc}

0000e2c2 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    e2c2:	20ff      	movs	r0, #255	; 0xff
    e2c4:	7008      	strb	r0, [r1, #0]
    e2c6:	4770      	bx	lr

0000e2c8 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    e2c8:	b570      	push	{r4, r5, r6, lr}
    e2ca:	460d      	mov	r5, r1
    e2cc:	4604      	mov	r4, r0
    e2ce:	22e8      	movs	r2, #232	; 0xe8
    e2d0:	2100      	movs	r1, #0
    e2d2:	f7fe f994 	bl	c5fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e2d6:	20ff      	movs	r0, #255	; 0xff
    e2d8:	7020      	strb	r0, [r4, #0]
    e2da:	207f      	movs	r0, #127	; 0x7f
    e2dc:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    e2e0:	2013      	movs	r0, #19
    e2e2:	8060      	strh	r0, [r4, #2]
    e2e4:	4628      	mov	r0, r5
    e2e6:	f7f6 ffc5 	bl	5274 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    e2ea:	62e0      	str	r0, [r4, #44]	; 0x2c
    e2ec:	2002      	movs	r0, #2
    e2ee:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
    e2f2:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
    e2f6:	2000      	movs	r0, #0
    e2f8:	73a0      	strb	r0, [r4, #14]
    e2fa:	f104 0020 	add.w	r0, r4, #32
    e2fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e302:	f000 b9a0 	b.w	e646 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000e306 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    e306:	7880      	ldrb	r0, [r0, #2]
    e308:	f3c0 0080 	ubfx	r0, r0, #2, #1
    e30c:	b108      	cbz	r0, e312 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    e30e:	2000      	movs	r0, #0
    e310:	4770      	bx	lr
    e312:	201f      	movs	r0, #31
    e314:	4770      	bx	lr

0000e316 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    e316:	f7f9 ba41 	b.w	779c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>

0000e31a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    e31a:	6880      	ldr	r0, [r0, #8]
    e31c:	4770      	bx	lr

0000e31e <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    e31e:	2001      	movs	r0, #1
    e320:	4770      	bx	lr

0000e322 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    e322:	b510      	push	{r4, lr}
    e324:	4604      	mov	r4, r0
    e326:	3020      	adds	r0, #32
    e328:	f000 f94d 	bl	e5c6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    e32c:	8861      	ldrh	r1, [r4, #2]
    e32e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e332:	2228      	movs	r2, #40	; 0x28
    e334:	f7f9 bbee 	b.w	7b14 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000e338 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    e338:	2200      	movs	r2, #0
    e33a:	6282      	str	r2, [r0, #40]	; 0x28
    e33c:	8843      	ldrh	r3, [r0, #2]
    e33e:	2b1d      	cmp	r3, #29
    e340:	d001      	beq.n	e346 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    e342:	7341      	strb	r1, [r0, #13]
    e344:	4770      	bx	lr
    e346:	7342      	strb	r2, [r0, #13]
    e348:	4770      	bx	lr

0000e34a <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    e34a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    e34e:	2100      	movs	r1, #0
    e350:	2a02      	cmp	r2, #2
    e352:	d104      	bne.n	e35e <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x14>
    e354:	f8b0 0070 	ldrh.w	r0, [r0, #112]	; 0x70
    e358:	b108      	cbz	r0, e35e <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x14>
    e35a:	2001      	movs	r0, #1
    e35c:	e000      	b.n	e360 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x16>
    e35e:	2000      	movs	r0, #0
    e360:	4381      	bics	r1, r0
    e362:	f081 0001 	eor.w	r0, r1, #1
    e366:	4770      	bx	lr

0000e368 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    e368:	2000      	movs	r0, #0
    e36a:	4770      	bx	lr

0000e36c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    e36c:	7880      	ldrb	r0, [r0, #2]
    e36e:	f000 0001 	and.w	r0, r0, #1
    e372:	4770      	bx	lr

0000e374 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    e374:	7880      	ldrb	r0, [r0, #2]
    e376:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e37a:	4770      	bx	lr

0000e37c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    e37c:	2001      	movs	r0, #1
    e37e:	4770      	bx	lr

0000e380 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    e380:	7880      	ldrb	r0, [r0, #2]
    e382:	f3c0 0040 	ubfx	r0, r0, #1, #1
    e386:	4770      	bx	lr

0000e388 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    e388:	f990 000e 	ldrsb.w	r0, [r0, #14]
    e38c:	4770      	bx	lr

0000e38e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    e38e:	7800      	ldrb	r0, [r0, #0]
    e390:	28ff      	cmp	r0, #255	; 0xff
    e392:	d001      	beq.n	e398 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    e394:	2001      	movs	r0, #1
    e396:	4770      	bx	lr
    e398:	2000      	movs	r0, #0
    e39a:	4770      	bx	lr

0000e39c <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    e39c:	680a      	ldr	r2, [r1, #0]
    e39e:	f840 2f11 	str.w	r2, [r0, #17]!
    e3a2:	8889      	ldrh	r1, [r1, #4]
    e3a4:	8081      	strh	r1, [r0, #4]
    e3a6:	2101      	movs	r1, #1
    e3a8:	7181      	strb	r1, [r0, #6]
    e3aa:	4770      	bx	lr

0000e3ac <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    e3ac:	7b00      	ldrb	r0, [r0, #12]
    e3ae:	4770      	bx	lr

0000e3b0 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    e3b0:	2001      	movs	r0, #1
    e3b2:	4770      	bx	lr

0000e3b4 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    e3b4:	61c1      	str	r1, [r0, #28]
    e3b6:	4770      	bx	lr

0000e3b8 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI>:
    e3b8:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    e3bc:	b102      	cbz	r2, e3c0 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI+0x8>
    e3be:	2201      	movs	r2, #1
    e3c0:	2300      	movs	r3, #0
    e3c2:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    e3c6:	b119      	cbz	r1, e3d0 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI+0x18>
    e3c8:	e9d0 3019 	ldrd	r3, r0, [r0, #100]	; 0x64
    e3cc:	e9c1 3000 	strd	r3, r0, [r1]
    e3d0:	4610      	mov	r0, r2
    e3d2:	4770      	bx	lr

0000e3d4 <sym_6SMKGRHQAIZHR6JTRBTFU3LNEOI457UCNN7L2SY>:
    e3d4:	2102      	movs	r1, #2
    e3d6:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
    e3da:	4770      	bx	lr

0000e3dc <sym_UVJC3XBQQLDGXNDNKXZFSW7F5OWZWJU7FTAZXEI>:
    e3dc:	e9d0 2019 	ldrd	r2, r0, [r0, #100]	; 0x64
    e3e0:	e9c1 2000 	strd	r2, r0, [r1]
    e3e4:	4770      	bx	lr

0000e3e6 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>:
    e3e6:	2201      	movs	r2, #1
    e3e8:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
    e3ec:	e9d1 2100 	ldrd	r2, r1, [r1]
    e3f0:	e9c0 2119 	strd	r2, r1, [r0, #100]	; 0x64
    e3f4:	4770      	bx	lr

0000e3f6 <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA>:
    e3f6:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    e3fa:	b102      	cbz	r2, e3fe <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA+0x8>
    e3fc:	2201      	movs	r2, #1
    e3fe:	2300      	movs	r3, #0
    e400:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    e404:	b119      	cbz	r1, e40e <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA+0x18>
    e406:	e9d0 301b 	ldrd	r3, r0, [r0, #108]	; 0x6c
    e40a:	e9c1 3000 	strd	r3, r0, [r1]
    e40e:	4610      	mov	r0, r2
    e410:	4770      	bx	lr

0000e412 <sym_57N4MHGOTN6SE7ESLAUPVT5Z7CNKRRVGNPONZCI>:
    e412:	2102      	movs	r1, #2
    e414:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    e418:	4770      	bx	lr

0000e41a <sym_ECJZL6MVN4B4UZUQDXL2OTZMAL25BOLWE4F7TMI>:
    e41a:	e9d0 201b 	ldrd	r2, r0, [r0, #108]	; 0x6c
    e41e:	e9c1 2000 	strd	r2, r0, [r1]
    e422:	4770      	bx	lr

0000e424 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>:
    e424:	2201      	movs	r2, #1
    e426:	f880 2075 	strb.w	r2, [r0, #117]	; 0x75
    e42a:	e9d1 2100 	ldrd	r2, r1, [r1]
    e42e:	e9c0 211b 	strd	r2, r1, [r0, #108]	; 0x6c
    e432:	4770      	bx	lr

0000e434 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    e434:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    e438:	4770      	bx	lr

0000e43a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    e43a:	b570      	push	{r4, r5, r6, lr}
    e43c:	4604      	mov	r4, r0
    e43e:	7880      	ldrb	r0, [r0, #2]
    e440:	2501      	movs	r5, #1
    e442:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e446:	b138      	cbz	r0, e458 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    e448:	233c      	movs	r3, #60	; 0x3c
    e44a:	22ff      	movs	r2, #255	; 0xff
    e44c:	4620      	mov	r0, r4
    e44e:	69e1      	ldr	r1, [r4, #28]
    e450:	f7f9 f9ca 	bl	77e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    e454:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
    e458:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    e45c:	bd70      	pop	{r4, r5, r6, pc}

0000e45e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    e45e:	7bc0      	ldrb	r0, [r0, #15]
    e460:	2800      	cmp	r0, #0
    e462:	d000      	beq.n	e466 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    e464:	2001      	movs	r0, #1
    e466:	4770      	bx	lr
    e468:	b510      	push	{r4, lr}
    e46a:	f7ff f93c 	bl	d6e6 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e46e:	4604      	mov	r4, r0
    e470:	f7f7 ff9e 	bl	63b0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    e474:	b138      	cbz	r0, e486 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    e476:	4620      	mov	r0, r4
    e478:	f7f7 fed2 	bl	6220 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    e47c:	b118      	cbz	r0, e486 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    e47e:	2110      	movs	r1, #16
    e480:	f7ff fb10 	bl	daa4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    e484:	b108      	cbz	r0, e48a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    e486:	2000      	movs	r0, #0
    e488:	bd10      	pop	{r4, pc}
    e48a:	2001      	movs	r0, #1
    e48c:	bd10      	pop	{r4, pc}
    e48e:	2101      	movs	r1, #1
    e490:	f7f8 be1a 	b.w	70c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e494:	2101      	movs	r1, #1
    e496:	f7f8 be17 	b.w	70c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e49a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e49e:	4604      	mov	r4, r0
    e4a0:	2700      	movs	r7, #0
    e4a2:	704f      	strb	r7, [r1, #1]
    e4a4:	2011      	movs	r0, #17
    e4a6:	460d      	mov	r5, r1
    e4a8:	7008      	strb	r0, [r1, #0]
    e4aa:	2220      	movs	r2, #32
    e4ac:	f104 017a 	add.w	r1, r4, #122	; 0x7a
    e4b0:	1d28      	adds	r0, r5, #4
    e4b2:	f7fe f82a 	bl	c50a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e4b6:	2601      	movs	r6, #1
    e4b8:	722e      	strb	r6, [r5, #8]
    e4ba:	f884 7078 	strb.w	r7, [r4, #120]	; 0x78
    e4be:	7928      	ldrb	r0, [r5, #4]
    e4c0:	2800      	cmp	r0, #0
    e4c2:	d111      	bne.n	e4e8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8a>
    e4c4:	88e8      	ldrh	r0, [r5, #6]
    e4c6:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
    e4ca:	69e0      	ldr	r0, [r4, #28]
    e4cc:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    e4d0:	f884 10a6 	strb.w	r1, [r4, #166]	; 0xa6
    e4d4:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
    e4d8:	8800      	ldrh	r0, [r0, #0]
    e4da:	f7f6 fe35 	bl	5148 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e4de:	f7fe fedc 	bl	d29a <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    e4e2:	69e0      	ldr	r0, [r4, #28]
    e4e4:	f880 6068 	strb.w	r6, [r0, #104]	; 0x68
    e4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e4f0:	4604      	mov	r4, r0
    e4f2:	460f      	mov	r7, r1
    e4f4:	7e40      	ldrb	r0, [r0, #25]
    e4f6:	f7f7 fe53 	bl	61a0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    e4fa:	4606      	mov	r6, r0
    e4fc:	7e20      	ldrb	r0, [r4, #24]
    e4fe:	f104 0549 	add.w	r5, r4, #73	; 0x49
    e502:	b120      	cbz	r0, e50e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    e504:	b11e      	cbz	r6, e50e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    e506:	7e60      	ldrb	r0, [r4, #25]
    e508:	f7f7 fe3e 	bl	6188 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    e50c:	b1a0      	cbz	r0, e538 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xda>
    e50e:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    e512:	2800      	cmp	r0, #0
    e514:	d024      	beq.n	e560 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    e516:	7ea0      	ldrb	r0, [r4, #26]
    e518:	2800      	cmp	r0, #0
    e51a:	d021      	beq.n	e560 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    e51c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    e520:	4629      	mov	r1, r5
    e522:	f7ff fe8a 	bl	e23a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    e526:	b1a8      	cbz	r0, e554 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    e528:	f7f7 fe2a 	bl	6180 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    e52c:	463a      	mov	r2, r7
    e52e:	4629      	mov	r1, r5
    e530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e534:	f7ff b86f 	b.w	d616 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e538:	2001      	movs	r0, #1
    e53a:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    e53e:	463a      	mov	r2, r7
    e540:	4629      	mov	r1, r5
    e542:	4630      	mov	r0, r6
    e544:	f7ff f867 	bl	d616 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e548:	7e61      	ldrb	r1, [r4, #25]
    e54a:	4628      	mov	r0, r5
    e54c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e550:	f7f7 be32 	b.w	61b8 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    e554:	4639      	mov	r1, r7
    e556:	4628      	mov	r0, r5
    e558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e55c:	f7ff b84a 	b.w	d5f4 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    e560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e564:	b510      	push	{r4, lr}
    e566:	4604      	mov	r4, r0
    e568:	4608      	mov	r0, r1
    e56a:	f7fd fa91 	bl	ba90 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    e56e:	7921      	ldrb	r1, [r4, #4]
    e570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e574:	2025      	movs	r0, #37	; 0x25
    e576:	f001 bc5f 	b.w	fe38 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    e57a:	b510      	push	{r4, lr}
    e57c:	4604      	mov	r4, r0
    e57e:	3026      	adds	r0, #38	; 0x26
    e580:	f7fd fa38 	bl	b9f4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e584:	2800      	cmp	r0, #0
    e586:	d102      	bne.n	e58e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    e588:	207f      	movs	r0, #127	; 0x7f
    e58a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    e58e:	bd10      	pop	{r4, pc}
    e590:	7802      	ldrb	r2, [r0, #0]
    e592:	2320      	movs	r3, #32
    e594:	f022 0220 	bic.w	r2, r2, #32
    e598:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    e59c:	430a      	orrs	r2, r1
    e59e:	7002      	strb	r2, [r0, #0]
    e5a0:	4770      	bx	lr

0000e5a2 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    e5a2:	b570      	push	{r4, r5, r6, lr}
    e5a4:	7001      	strb	r1, [r0, #0]
    e5a6:	7042      	strb	r2, [r0, #1]
    e5a8:	4614      	mov	r4, r2
    e5aa:	460d      	mov	r5, r1
    e5ac:	7880      	ldrb	r0, [r0, #2]
    e5ae:	f000 f87f 	bl	e6b0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e5b2:	fb10 f005 	smulbb	r0, r0, r5
    e5b6:	4360      	muls	r0, r4
    e5b8:	28ff      	cmp	r0, #255	; 0xff
    e5ba:	d303      	bcc.n	e5c4 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    e5bc:	215c      	movs	r1, #92	; 0x5c
    e5be:	202e      	movs	r0, #46	; 0x2e
    e5c0:	f7f6 f98e 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5c4:	bd70      	pop	{r4, r5, r6, pc}

0000e5c6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    e5c6:	b510      	push	{r4, lr}
    e5c8:	4604      	mov	r4, r0
    e5ca:	7880      	ldrb	r0, [r0, #2]
    e5cc:	f000 f870 	bl	e6b0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e5d0:	7861      	ldrb	r1, [r4, #1]
    e5d2:	7822      	ldrb	r2, [r4, #0]
    e5d4:	fb11 f102 	smulbb	r1, r1, r2
    e5d8:	4348      	muls	r0, r1
    e5da:	b2c0      	uxtb	r0, r0
    e5dc:	bd10      	pop	{r4, pc}

0000e5de <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    e5de:	b510      	push	{r4, lr}
    e5e0:	4604      	mov	r4, r0
    e5e2:	f000 f84d 	bl	e680 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    e5e6:	7961      	ldrb	r1, [r4, #5]
    e5e8:	1c49      	adds	r1, r1, #1
    e5ea:	b2c9      	uxtb	r1, r1
    e5ec:	7161      	strb	r1, [r4, #5]
    e5ee:	7862      	ldrb	r2, [r4, #1]
    e5f0:	4291      	cmp	r1, r2
    e5f2:	d10b      	bne.n	e60c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e5f4:	2200      	movs	r2, #0
    e5f6:	7162      	strb	r2, [r4, #5]
    e5f8:	78e1      	ldrb	r1, [r4, #3]
    e5fa:	4301      	orrs	r1, r0
    e5fc:	70e1      	strb	r1, [r4, #3]
    e5fe:	78a3      	ldrb	r3, [r4, #2]
    e600:	4299      	cmp	r1, r3
    e602:	d103      	bne.n	e60c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e604:	70e2      	strb	r2, [r4, #3]
    e606:	7921      	ldrb	r1, [r4, #4]
    e608:	1c49      	adds	r1, r1, #1
    e60a:	7121      	strb	r1, [r4, #4]
    e60c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e610:	f000 b825 	b.w	e65e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000e614 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    e614:	7081      	strb	r1, [r0, #2]
    e616:	4770      	bx	lr

0000e618 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    e618:	b570      	push	{r4, r5, r6, lr}
    e61a:	4604      	mov	r4, r0
    e61c:	7880      	ldrb	r0, [r0, #2]
    e61e:	f000 f847 	bl	e6b0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e622:	7861      	ldrb	r1, [r4, #1]
    e624:	fb11 f500 	smulbb	r5, r1, r0
    e628:	78e0      	ldrb	r0, [r4, #3]
    e62a:	f000 f841 	bl	e6b0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e62e:	7861      	ldrb	r1, [r4, #1]
    e630:	7962      	ldrb	r2, [r4, #5]
    e632:	fb10 2001 	smlabb	r0, r0, r1, r2
    e636:	7821      	ldrb	r1, [r4, #0]
    e638:	7922      	ldrb	r2, [r4, #4]
    e63a:	1a89      	subs	r1, r1, r2
    e63c:	fb11 f105 	smulbb	r1, r1, r5
    e640:	1a08      	subs	r0, r1, r0
    e642:	b2c0      	uxtb	r0, r0
    e644:	bd70      	pop	{r4, r5, r6, pc}

0000e646 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    e646:	2100      	movs	r1, #0
    e648:	6001      	str	r1, [r0, #0]
    e64a:	8081      	strh	r1, [r0, #4]
    e64c:	2101      	movs	r1, #1
    e64e:	7041      	strb	r1, [r0, #1]
    e650:	7001      	strb	r1, [r0, #0]
    e652:	4770      	bx	lr

0000e654 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    e654:	2100      	movs	r1, #0
    e656:	70c1      	strb	r1, [r0, #3]
    e658:	7141      	strb	r1, [r0, #5]
    e65a:	7101      	strb	r1, [r0, #4]
    e65c:	4770      	bx	lr
    e65e:	b510      	push	{r4, lr}
    e660:	2801      	cmp	r0, #1
    e662:	d007      	beq.n	e674 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    e664:	2802      	cmp	r0, #2
    e666:	d007      	beq.n	e678 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    e668:	2804      	cmp	r0, #4
    e66a:	d007      	beq.n	e67c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    e66c:	2139      	movs	r1, #57	; 0x39
    e66e:	202e      	movs	r0, #46	; 0x2e
    e670:	f7f6 f936 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e674:	2025      	movs	r0, #37	; 0x25
    e676:	bd10      	pop	{r4, pc}
    e678:	2026      	movs	r0, #38	; 0x26
    e67a:	bd10      	pop	{r4, pc}
    e67c:	2027      	movs	r0, #39	; 0x27
    e67e:	bd10      	pop	{r4, pc}
    e680:	4601      	mov	r1, r0
    e682:	2000      	movs	r0, #0
    e684:	788a      	ldrb	r2, [r1, #2]
    e686:	07d3      	lsls	r3, r2, #31
    e688:	d002      	beq.n	e690 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    e68a:	78cb      	ldrb	r3, [r1, #3]
    e68c:	07db      	lsls	r3, r3, #31
    e68e:	d006      	beq.n	e69e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    e690:	0793      	lsls	r3, r2, #30
    e692:	d506      	bpl.n	e6a2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e694:	78cb      	ldrb	r3, [r1, #3]
    e696:	079b      	lsls	r3, r3, #30
    e698:	d403      	bmi.n	e6a2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e69a:	2002      	movs	r0, #2
    e69c:	4770      	bx	lr
    e69e:	2001      	movs	r0, #1
    e6a0:	4770      	bx	lr
    e6a2:	0752      	lsls	r2, r2, #29
    e6a4:	d5fc      	bpl.n	e6a0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e6a6:	78c9      	ldrb	r1, [r1, #3]
    e6a8:	0749      	lsls	r1, r1, #29
    e6aa:	d4f9      	bmi.n	e6a0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e6ac:	2004      	movs	r0, #4
    e6ae:	4770      	bx	lr
    e6b0:	f3c0 0180 	ubfx	r1, r0, #2, #1
    e6b4:	f3c0 0240 	ubfx	r2, r0, #1, #1
    e6b8:	4411      	add	r1, r2
    e6ba:	f000 0001 	and.w	r0, r0, #1
    e6be:	4408      	add	r0, r1
    e6c0:	4770      	bx	lr

0000e6c2 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    e6c2:	f240 315a 	movw	r1, #858	; 0x35a
    e6c6:	4348      	muls	r0, r1
    e6c8:	4770      	bx	lr

0000e6ca <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    e6ca:	f240 20ef 	movw	r0, #751	; 0x2ef
    e6ce:	4770      	bx	lr
    e6d0:	041c020e 	.word	0x041c020e
    e6d4:	0c600630 	.word	0x0c600630
    e6d8:	06b4035a 	.word	0x06b4035a
    e6dc:	0bf505c5 	.word	0x0bf505c5
    e6e0:	01a31225 	.word	0x01a31225
    e6e4:	05bf03b1 	.word	0x05bf03b1
    e6e8:	064902ef 	.word	0x064902ef
    e6ec:	09a3      	.short	0x09a3

0000e6ee <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    e6ee:	b510      	push	{r4, lr}
    e6f0:	f890 10e4 	ldrb.w	r1, [r0, #228]	; 0xe4
    e6f4:	b109      	cbz	r1, e6fa <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    e6f6:	2000      	movs	r0, #0
    e6f8:	bd10      	pop	{r4, pc}
    e6fa:	f8d0 10e0 	ldr.w	r1, [r0, #224]	; 0xe0
    e6fe:	b949      	cbnz	r1, e714 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    e700:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    e704:	b131      	cbz	r1, e714 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    e706:	e9d0 1230 	ldrd	r1, r2, [r0, #192]	; 0xc0
    e70a:	428a      	cmp	r2, r1
    e70c:	d902      	bls.n	e714 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    e70e:	f7ff fe94 	bl	e43a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    e712:	e7f0      	b.n	e6f6 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    e714:	2001      	movs	r0, #1
    e716:	bd10      	pop	{r4, pc}

0000e718 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    e718:	b510      	push	{r4, lr}
    e71a:	b131      	cbz	r1, e72a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    e71c:	2901      	cmp	r1, #1
    e71e:	d008      	beq.n	e732 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    e720:	f240 71a3 	movw	r1, #1955	; 0x7a3
    e724:	2030      	movs	r0, #48	; 0x30
    e726:	f7f6 f8db 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e72a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e72e:	f000 b999 	b.w	ea64 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x262>
    e732:	2100      	movs	r1, #0
    e734:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    e738:	f000 f95d 	bl	e9f6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f4>
    e73c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e740:	f7fc b82a 	b.w	a798 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>

0000e744 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>:
    e744:	b510      	push	{r4, lr}
    e746:	4604      	mov	r4, r0
    e748:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    e74c:	2800      	cmp	r0, #0
    e74e:	d019      	beq.n	e784 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x40>
    e750:	2001      	movs	r0, #1
    e752:	f884 00e4 	strb.w	r0, [r4, #228]	; 0xe4
    e756:	4601      	mov	r1, r0
    e758:	4620      	mov	r0, r4
    e75a:	f7ff fe6b 	bl	e434 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    e75e:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    e762:	b170      	cbz	r0, e782 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x3e>
    e764:	f814 0fb4 	ldrb.w	r0, [r4, #180]!
    e768:	f7f4 f9ba 	bl	2ae0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e76c:	7820      	ldrb	r0, [r4, #0]
    e76e:	f7f4 faf5 	bl	2d5c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    e772:	f814 09b4 	ldrb.w	r0, [r4], #-180
    e776:	f7f4 facf 	bl	2d18 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e77a:	b120      	cbz	r0, e786 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x42>
    e77c:	2000      	movs	r0, #0
    e77e:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
    e782:	2000      	movs	r0, #0
    e784:	bd10      	pop	{r4, pc}
    e786:	f240 2117 	movw	r1, #535	; 0x217
    e78a:	2030      	movs	r0, #48	; 0x30
    e78c:	f7f6 f8a8 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e790 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>:
    e790:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
    e794:	4770      	bx	lr

0000e796 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>:
    e796:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    e79a:	4770      	bx	lr

0000e79c <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>:
    e79c:	b50e      	push	{r1, r2, r3, lr}
    e79e:	4669      	mov	r1, sp
    e7a0:	2001      	movs	r0, #1
    e7a2:	f7fe feb4 	bl	d50e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    e7a6:	b138      	cbz	r0, e7b8 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x1c>
    e7a8:	f240 1145 	movw	r1, #325	; 0x145
    e7ac:	2030      	movs	r0, #48	; 0x30
    e7ae:	f7f6 f897 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7b2:	9802      	ldr	r0, [sp, #8]
    e7b4:	f7ff ffc6 	bl	e744 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    e7b8:	4668      	mov	r0, sp
    e7ba:	f7f6 fae3 	bl	4d84 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e7be:	2800      	cmp	r0, #0
    e7c0:	d0f7      	beq.n	e7b2 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x16>
    e7c2:	f7f9 fb2f 	bl	7e24 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb0>
    e7c6:	2000      	movs	r0, #0
    e7c8:	bd0e      	pop	{r1, r2, r3, pc}

0000e7ca <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>:
    e7ca:	b50e      	push	{r1, r2, r3, lr}
    e7cc:	4669      	mov	r1, sp
    e7ce:	2001      	movs	r0, #1
    e7d0:	f7fe fe9d 	bl	d50e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    e7d4:	b150      	cbz	r0, e7ec <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x22>
    e7d6:	f240 71ae 	movw	r1, #1966	; 0x7ae
    e7da:	2030      	movs	r0, #48	; 0x30
    e7dc:	f7f6 f880 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7e0:	9802      	ldr	r0, [sp, #8]
    e7e2:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    e7e6:	b108      	cbz	r0, e7ec <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x22>
    e7e8:	2000      	movs	r0, #0
    e7ea:	bd0e      	pop	{r1, r2, r3, pc}
    e7ec:	4668      	mov	r0, sp
    e7ee:	f7f6 fac9 	bl	4d84 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e7f2:	2800      	cmp	r0, #0
    e7f4:	d0f4      	beq.n	e7e0 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x16>
    e7f6:	2000      	movs	r0, #0
    e7f8:	f7fe fe6d 	bl	d4d6 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>
    e7fc:	f080 0001 	eor.w	r0, r0, #1
    e800:	bd0e      	pop	{r1, r2, r3, pc}

0000e802 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>:
    e802:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e804:	4604      	mov	r4, r0
    e806:	f890 00fb 	ldrb.w	r0, [r0, #251]	; 0xfb
    e80a:	2800      	cmp	r0, #0
    e80c:	d153      	bne.n	e8b6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e80e:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    e812:	2803      	cmp	r0, #3
    e814:	d14f      	bne.n	e8b6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e816:	f7fd fcf8 	bl	c20a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    e81a:	4601      	mov	r1, r0
    e81c:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    e820:	f7f3 fd1a 	bl	2258 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    e824:	2800      	cmp	r0, #0
    e826:	dd46      	ble.n	e8b6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e828:	6861      	ldr	r1, [r4, #4]
    e82a:	b111      	cbz	r1, e832 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x30>
    e82c:	fbb0 f0f1 	udiv	r0, r0, r1
    e830:	e000      	b.n	e834 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x32>
    e832:	2000      	movs	r0, #0
    e834:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
    e838:	1c40      	adds	r0, r0, #1
    e83a:	4408      	add	r0, r1
    e83c:	f8a4 013c 	strh.w	r0, [r4, #316]	; 0x13c
    e840:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    e844:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    e848:	1a08      	subs	r0, r1, r0
    e84a:	b200      	sxth	r0, r0
    e84c:	2800      	cmp	r0, #0
    e84e:	dd32      	ble.n	e8b6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e850:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    e854:	f7f4 f944 	bl	2ae0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e858:	2800      	cmp	r0, #0
    e85a:	d02c      	beq.n	e8b6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e85c:	2001      	movs	r0, #1
    e85e:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
    e862:	f8b4 009e 	ldrh.w	r0, [r4, #158]	; 0x9e
    e866:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    e86a:	ae01      	add	r6, sp, #4
    e86c:	1a40      	subs	r0, r0, r1
    e86e:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
    e872:	1e40      	subs	r0, r0, #1
    e874:	4408      	add	r0, r1
    e876:	b285      	uxth	r5, r0
    e878:	e017      	b.n	e8aa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xa8>
    e87a:	9600      	str	r6, [sp, #0]
    e87c:	f8b4 113c 	ldrh.w	r1, [r4, #316]	; 0x13c
    e880:	2300      	movs	r3, #0
    e882:	2201      	movs	r2, #1
    e884:	4620      	mov	r0, r4
    e886:	f7f9 fbff 	bl	8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>
    e88a:	2800      	cmp	r0, #0
    e88c:	d013      	beq.n	e8b6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e88e:	2801      	cmp	r0, #1
    e890:	d004      	beq.n	e89c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x9a>
    e892:	f240 6115 	movw	r1, #1557	; 0x615
    e896:	2030      	movs	r0, #48	; 0x30
    e898:	f7f6 f822 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e89c:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    e8a0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    e8a4:	4408      	add	r0, r1
    e8a6:	f8a4 013c 	strh.w	r0, [r4, #316]	; 0x13c
    e8aa:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    e8ae:	1a28      	subs	r0, r5, r0
    e8b0:	b200      	sxth	r0, r0
    e8b2:	2800      	cmp	r0, #0
    e8b4:	dae1      	bge.n	e87a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x78>
    e8b6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e8b8:	2000      	movs	r0, #0
    e8ba:	4770      	bx	lr
    e8bc:	b570      	push	{r4, r5, r6, lr}
    e8be:	4604      	mov	r4, r0
    e8c0:	2601      	movs	r6, #1
    e8c2:	f000 f8b3 	bl	ea2c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x22a>
    e8c6:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    e8ca:	2000      	movs	r0, #0
    e8cc:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
    e8d0:	2001      	movs	r0, #1
    e8d2:	f884 00d7 	strb.w	r0, [r4, #215]	; 0xd7
    e8d6:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    e8da:	f104 05cc 	add.w	r5, r4, #204	; 0xcc
    e8de:	b160      	cbz	r0, e8fa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xf8>
    e8e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e8e4:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    e8e8:	f7f3 fc84 	bl	21f4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e8ec:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    e8f0:	2100      	movs	r1, #0
    e8f2:	4628      	mov	r0, r5
    e8f4:	f7ff f81d 	bl	d932 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    e8f8:	e00f      	b.n	e91a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x118>
    e8fa:	4620      	mov	r0, r4
    e8fc:	f7ff fd0d 	bl	e31a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    e900:	4606      	mov	r6, r0
    e902:	4631      	mov	r1, r6
    e904:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    e908:	f7f3 fc74 	bl	21f4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e90c:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    e910:	4631      	mov	r1, r6
    e912:	4628      	mov	r0, r5
    e914:	f7ff f80d 	bl	d932 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    e918:	1c46      	adds	r6, r0, #1
    e91a:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	; 0xdc
    e91e:	1c41      	adds	r1, r0, #1
    e920:	290a      	cmp	r1, #10
    e922:	d202      	bcs.n	e92a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x128>
    e924:	4430      	add	r0, r6
    e926:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
    e92a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
    e92e:	b130      	cbz	r0, e93e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13c>
    e930:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	; 0xdc
    e934:	1c40      	adds	r0, r0, #1
    e936:	280a      	cmp	r0, #10
    e938:	d301      	bcc.n	e93e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13c>
    e93a:	2002      	movs	r0, #2
    e93c:	e000      	b.n	e940 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13e>
    e93e:	2003      	movs	r0, #3
    e940:	f884 00d6 	strb.w	r0, [r4, #214]	; 0xd6
    e944:	2100      	movs	r1, #0
    e946:	4620      	mov	r0, r4
    e948:	f000 f824 	bl	e994 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x192>
    e94c:	b130      	cbz	r0, e95c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x15a>
    e94e:	4620      	mov	r0, r4
    e950:	f000 f811 	bl	e976 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x174>
    e954:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e958:	f7fb bf1e 	b.w	a798 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e95c:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    e960:	4629      	mov	r1, r5
    e962:	f000 f861 	bl	ea28 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x226>
    e966:	2800      	cmp	r0, #0
    e968:	d104      	bne.n	e974 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x172>
    e96a:	f240 61b6 	movw	r1, #1718	; 0x6b6
    e96e:	2030      	movs	r0, #48	; 0x30
    e970:	f7f5 ffb6 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e974:	bd70      	pop	{r4, r5, r6, pc}
    e976:	b510      	push	{r4, lr}
    e978:	4604      	mov	r4, r0
    e97a:	f814 0fb4 	ldrb.w	r0, [r4, #180]!
    e97e:	f7f4 f9cb 	bl	2d18 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e982:	2000      	movs	r0, #0
    e984:	7520      	strb	r0, [r4, #20]
    e986:	bd10      	pop	{r4, pc}
    e988:	b510      	push	{r4, lr}
    e98a:	f7ff fcca 	bl	e322 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    e98e:	f200 1007 	addw	r0, r0, #263	; 0x107
    e992:	bd10      	pop	{r4, pc}
    e994:	b570      	push	{r4, r5, r6, lr}
    e996:	4604      	mov	r4, r0
    e998:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    e99c:	460d      	mov	r5, r1
    e99e:	b108      	cbz	r0, e9a4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a2>
    e9a0:	2001      	movs	r0, #1
    e9a2:	bd70      	pop	{r4, r5, r6, pc}
    e9a4:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    e9a8:	b1a8      	cbz	r0, e9d6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d4>
    e9aa:	4620      	mov	r0, r4
    e9ac:	f7ff fcb5 	bl	e31a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    e9b0:	4405      	add	r5, r0
    e9b2:	4620      	mov	r0, r4
    e9b4:	f7ff ffe8 	bl	e988 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x186>
    e9b8:	1941      	adds	r1, r0, r5
    e9ba:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    e9be:	4288      	cmp	r0, r1
    e9c0:	d206      	bcs.n	e9d0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1ce>
    e9c2:	2001      	movs	r0, #1
    e9c4:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    e9c8:	4620      	mov	r0, r4
    e9ca:	f7ff fd36 	bl	e43a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    e9ce:	e7e7      	b.n	e9a0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x19e>
    e9d0:	1b40      	subs	r0, r0, r5
    e9d2:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    e9d6:	2000      	movs	r0, #0
    e9d8:	bd70      	pop	{r4, r5, r6, pc}
    e9da:	b510      	push	{r4, lr}
    e9dc:	4604      	mov	r4, r0
    e9de:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    e9e2:	f000 f94b 	bl	ec7c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x47a>
    e9e6:	4602      	mov	r2, r0
    e9e8:	4620      	mov	r0, r4
    e9ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e9ee:	f240 1117 	movw	r1, #279	; 0x117
    e9f2:	f7ff bb88 	b.w	e106 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    e9f6:	b510      	push	{r4, lr}
    e9f8:	f7fc fe8e 	bl	b718 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    e9fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ea00:	f7f4 badc 	b.w	2fbc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    ea04:	b570      	push	{r4, r5, r6, lr}
    ea06:	460c      	mov	r4, r1
    ea08:	4605      	mov	r5, r0
    ea0a:	f001 fa05 	bl	fe18 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ea0e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    ea12:	4408      	add	r0, r1
    ea14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ea18:	fbb0 f6f1 	udiv	r6, r0, r1
    ea1c:	4628      	mov	r0, r5
    ea1e:	f001 f9ed 	bl	fdfc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ea22:	4430      	add	r0, r6
    ea24:	4420      	add	r0, r4
    ea26:	bd70      	pop	{r4, r5, r6, pc}
    ea28:	f7f3 bd44 	b.w	24b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    ea2c:	b510      	push	{r4, lr}
    ea2e:	4604      	mov	r4, r0
    ea30:	f7ff fca4 	bl	e37c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ea34:	b1a0      	cbz	r0, ea60 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x25e>
    ea36:	4620      	mov	r0, r4
    ea38:	f7ff fc98 	bl	e36c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    ea3c:	b918      	cbnz	r0, ea46 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x244>
    ea3e:	4620      	mov	r0, r4
    ea40:	f7ff fc9e 	bl	e380 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ea44:	b120      	cbz	r0, ea50 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x24e>
    ea46:	2449      	movs	r4, #73	; 0x49
    ea48:	f001 f9a4 	bl	fd94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    ea4c:	b928      	cbnz	r0, ea5a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x258>
    ea4e:	e001      	b.n	ea54 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x252>
    ea50:	2442      	movs	r4, #66	; 0x42
    ea52:	e7f9      	b.n	ea48 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x246>
    ea54:	f001 f994 	bl	fd80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    ea58:	b100      	cbz	r0, ea5c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x25a>
    ea5a:	1de4      	adds	r4, r4, #7
    ea5c:	4620      	mov	r0, r4
    ea5e:	bd10      	pop	{r4, pc}
    ea60:	206b      	movs	r0, #107	; 0x6b
    ea62:	bd10      	pop	{r4, pc}
    ea64:	b570      	push	{r4, r5, r6, lr}
    ea66:	4604      	mov	r4, r0
    ea68:	f890 00b5 	ldrb.w	r0, [r0, #181]	; 0xb5
    ea6c:	2500      	movs	r5, #0
    ea6e:	b118      	cbz	r0, ea78 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x276>
    ea70:	2001      	movs	r0, #1
    ea72:	f000 f88a 	bl	eb8a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x388>
    ea76:	4605      	mov	r5, r0
    ea78:	4620      	mov	r0, r4
    ea7a:	f7ff fc4e 	bl	e31a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    ea7e:	1941      	adds	r1, r0, r5
    ea80:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    ea84:	34cc      	adds	r4, #204	; 0xcc
    ea86:	f7f3 fbb5 	bl	21f4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    ea8a:	2600      	movs	r6, #0
    ea8c:	60e0      	str	r0, [r4, #12]
    ea8e:	f804 6b0b 	strb.w	r6, [r4], #11
    ea92:	2001      	movs	r0, #1
    ea94:	f804 0901 	strb.w	r0, [r4], #-1
    ea98:	2003      	movs	r0, #3
    ea9a:	f804 09d6 	strb.w	r0, [r4], #-214
    ea9e:	4620      	mov	r0, r4
    eaa0:	f7ff ffc4 	bl	ea2c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x22a>
    eaa4:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    eaa8:	4629      	mov	r1, r5
    eaaa:	4620      	mov	r0, r4
    eaac:	f7ff ff72 	bl	e994 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x192>
    eab0:	b930      	cbnz	r0, eac0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2be>
    eab2:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    eab6:	f104 01cc 	add.w	r1, r4, #204	; 0xcc
    eaba:	f7ff ffb5 	bl	ea28 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x226>
    eabe:	b138      	cbz	r0, ead0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2ce>
    eac0:	f8a4 60dc 	strh.w	r6, [r4, #220]	; 0xdc
    eac4:	f7ff ff97 	bl	e9f6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f4>
    eac8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    eacc:	f7fb be64 	b.w	a798 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ead0:	f240 7104 	movw	r1, #1796	; 0x704
    ead4:	2030      	movs	r0, #48	; 0x30
    ead6:	f7f5 ff03 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eada:	b510      	push	{r4, lr}
    eadc:	4604      	mov	r4, r0
    eade:	2000      	movs	r0, #0
    eae0:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    eae4:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    eae8:	f7f4 f916 	bl	2d18 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    eaec:	2020      	movs	r0, #32
    eaee:	f884 0160 	strb.w	r0, [r4, #352]	; 0x160
    eaf2:	bd10      	pop	{r4, pc}
    eaf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    eaf8:	2500      	movs	r5, #0
    eafa:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    eafe:	f8d0 60d8 	ldr.w	r6, [r0, #216]	; 0xd8
    eb02:	4688      	mov	r8, r1
    eb04:	4604      	mov	r4, r0
    eb06:	f880 50c8 	strb.w	r5, [r0, #200]	; 0xc8
    eb0a:	2701      	movs	r7, #1
    eb0c:	f880 70c9 	strb.w	r7, [r0, #201]	; 0xc9
    eb10:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
    eb14:	4639      	mov	r1, r7
    eb16:	34b4      	adds	r4, #180	; 0xb4
    eb18:	f7f7 fdf4 	bl	6704 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    eb1c:	6860      	ldr	r0, [r4, #4]
    eb1e:	f8c0 6154 	str.w	r6, [r0, #340]	; 0x154
    eb22:	6861      	ldr	r1, [r4, #4]
    eb24:	7820      	ldrb	r0, [r4, #0]
    eb26:	f881 0160 	strb.w	r0, [r1, #352]	; 0x160
    eb2a:	6861      	ldr	r1, [r4, #4]
    eb2c:	f8c1 8164 	str.w	r8, [r1, #356]	; 0x164
    eb30:	6860      	ldr	r0, [r4, #4]
    eb32:	f8c0 6158 	str.w	r6, [r0, #344]	; 0x158
    eb36:	6864      	ldr	r4, [r4, #4]
    eb38:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
    eb3c:	2300      	movs	r3, #0
    eb3e:	f8a4 515c 	strh.w	r5, [r4, #348]	; 0x15c
    eb42:	461a      	mov	r2, r3
    eb44:	4619      	mov	r1, r3
    eb46:	4620      	mov	r0, r4
    eb48:	9500      	str	r5, [sp, #0]
    eb4a:	f7f9 fa9d 	bl	8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>
    eb4e:	b120      	cbz	r0, eb5a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x358>
    eb50:	f240 212b 	movw	r1, #555	; 0x22b
    eb54:	2030      	movs	r0, #48	; 0x30
    eb56:	f7f5 fec3 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb5a:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    eb5e:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
    eb62:	f884 712c 	strb.w	r7, [r4, #300]	; 0x12c
    eb66:	f8a4 513e 	strh.w	r5, [r4, #318]	; 0x13e
    eb6a:	f8a4 513c 	strh.w	r5, [r4, #316]	; 0x13c
    eb6e:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    eb72:	f834 0f6c 	ldrh.w	r0, [r4, #108]!
    eb76:	1e40      	subs	r0, r0, #1
    eb78:	f824 0bbc 	strh.w	r0, [r4], #188
    eb7c:	86e5      	strh	r5, [r4, #54]	; 0x36
    eb7e:	f7ff ff3a 	bl	e9f6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f4>
    eb82:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    eb86:	f7fb be07 	b.w	a798 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    eb8a:	b508      	push	{r3, lr}
    eb8c:	2800      	cmp	r0, #0
    eb8e:	f04f 0101 	mov.w	r1, #1
    eb92:	4668      	mov	r0, sp
    eb94:	d002      	beq.n	eb9c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x39a>
    eb96:	f7f5 ff3b 	bl	4a10 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    eb9a:	e001      	b.n	eba0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x39e>
    eb9c:	f7f5 ff46 	bl	4a2c <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    eba0:	f89d 0000 	ldrb.w	r0, [sp]
    eba4:	f242 7110 	movw	r1, #10000	; 0x2710
    eba8:	0200      	lsls	r0, r0, #8
    ebaa:	fbb0 f2f1 	udiv	r2, r0, r1
    ebae:	fb01 0012 	mls	r0, r1, r2, r0
    ebb2:	bd08      	pop	{r3, pc}
    ebb4:	b510      	push	{r4, lr}
    ebb6:	0004      	movs	r4, r0
    ebb8:	d008      	beq.n	ebcc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x3ca>
    ebba:	2909      	cmp	r1, #9
    ebbc:	d25c      	bcs.n	ec78 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x476>
    ebbe:	e8df f001 	tbb	[pc, r1]
    ebc2:	3607      	.short	0x3607
    ebc4:	5b3a3e3e 	.word	0x5b3a3e3e
    ebc8:	00574a43 	.word	0x00574a43
    ebcc:	219e      	movs	r1, #158	; 0x9e
    ebce:	e050      	b.n	ec72 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x470>
    ebd0:	2100      	movs	r1, #0
    ebd2:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
    ebd6:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    ebda:	4620      	mov	r0, r4
    ebdc:	b189      	cbz	r1, ec02 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x400>
    ebde:	f8b0 213e 	ldrh.w	r2, [r0, #318]	; 0x13e
    ebe2:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
    ebe6:	428a      	cmp	r2, r1
    ebe8:	d106      	bne.n	ebf8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x3f6>
    ebea:	f8b0 20f4 	ldrh.w	r2, [r0, #244]	; 0xf4
    ebee:	1a51      	subs	r1, r2, r1
    ebf0:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    ebf4:	4611      	mov	r1, r2
    ebf6:	e00d      	b.n	ec14 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x412>
    ebf8:	1a51      	subs	r1, r2, r1
    ebfa:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    ebfe:	b291      	uxth	r1, r2
    ec00:	e008      	b.n	ec14 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x412>
    ec02:	f8b0 113c 	ldrh.w	r1, [r0, #316]	; 0x13c
    ec06:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
    ec0a:	1a89      	subs	r1, r1, r2
    ec0c:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    ec10:	f8b0 113c 	ldrh.w	r1, [r0, #316]	; 0x13c
    ec14:	f8a0 106c 	strh.w	r1, [r0, #108]	; 0x6c
    ec18:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    ec1c:	f8c0 1154 	str.w	r1, [r0, #340]	; 0x154
    ec20:	f7f9 ff38 	bl	8a94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    ec24:	4620      	mov	r0, r4
    ec26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ec2a:	f7f9 bc9d 	b.w	8568 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x568>
    ec2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ec32:	f000 b879 	b.w	ed28 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    ec36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ec3a:	f7fc bf2f 	b.w	ba9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    ec3e:	4620      	mov	r0, r4
    ec40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ec44:	f7f9 bcc6 	b.w	85d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5d4>
    ec48:	2001      	movs	r0, #1
    ec4a:	f7f3 fa01 	bl	2050 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    ec4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ec52:	f7fe bd15 	b.w	d680 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    ec56:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    ec5a:	2804      	cmp	r0, #4
    ec5c:	d001      	beq.n	ec62 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x460>
    ec5e:	21c0      	movs	r1, #192	; 0xc0
    ec60:	e007      	b.n	ec72 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x470>
    ec62:	4620      	mov	r0, r4
    ec64:	f7ff ff39 	bl	eada <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    ec68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ec6c:	f7fb bd94 	b.w	a798 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ec70:	21c9      	movs	r1, #201	; 0xc9
    ec72:	2030      	movs	r0, #48	; 0x30
    ec74:	f7f5 fe34 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec78:	21cd      	movs	r1, #205	; 0xcd
    ec7a:	e7fa      	b.n	ec72 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x470>
    ec7c:	b510      	push	{r4, lr}
    ec7e:	f001 f8cb 	bl	fe18 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ec82:	f64d 7141 	movw	r1, #57153	; 0xdf41
    ec86:	4408      	add	r0, r1
    ec88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ec8c:	fbb0 f0f1 	udiv	r0, r0, r1
    ec90:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    ec94:	bd10      	pop	{r4, pc}
    ec96:	01f4      	.short	0x01f4
    ec98:	009600fa 	.word	0x009600fa
    ec9c:	004b0064 	.word	0x004b0064
    eca0:	001e0032 	.word	0x001e0032
    eca4:	000a0014 	.word	0x000a0014
    eca8:	00020005 	.word	0x00020005
    ecac:	0001      	.short	0x0001
    ecae:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ecb2:	f001 0307 	and.w	r3, r1, #7
    ecb6:	7802      	ldrb	r2, [r0, #0]
    ecb8:	2101      	movs	r1, #1
    ecba:	4099      	lsls	r1, r3
    ecbc:	438a      	bics	r2, r1
    ecbe:	7002      	strb	r2, [r0, #0]
    ecc0:	4770      	bx	lr

0000ecc2 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    ecc2:	b510      	push	{r4, lr}
    ecc4:	4604      	mov	r4, r0
    ecc6:	f8d0 0194 	ldr.w	r0, [r0, #404]	; 0x194
    ecca:	6861      	ldr	r1, [r4, #4]
    eccc:	4288      	cmp	r0, r1
    ecce:	d109      	bne.n	ece4 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    ecd0:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
    ecd4:	8922      	ldrh	r2, [r4, #8]
    ecd6:	4291      	cmp	r1, r2
    ecd8:	d104      	bne.n	ece4 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    ecda:	f8b4 119a 	ldrh.w	r1, [r4, #410]	; 0x19a
    ecde:	8962      	ldrh	r2, [r4, #10]
    ece0:	4291      	cmp	r1, r2
    ece2:	d013      	beq.n	ed0c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4a>
    ece4:	8821      	ldrh	r1, [r4, #0]
    ece6:	f8a4 11b4 	strh.w	r1, [r4, #436]	; 0x1b4
    ecea:	f7fe fd50 	bl	d78e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    ecee:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
    ecf2:	f8b4 0198 	ldrh.w	r0, [r4, #408]	; 0x198
    ecf6:	f8a4 01b8 	strh.w	r0, [r4, #440]	; 0x1b8
    ecfa:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
    ecfe:	f8a4 01ba 	strh.w	r0, [r4, #442]	; 0x1ba
    ed02:	2001      	movs	r0, #1
    ed04:	f884 01b0 	strb.w	r0, [r4, #432]	; 0x1b0
    ed08:	f7fb fd46 	bl	a798 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ed0c:	2102      	movs	r1, #2
    ed0e:	4620      	mov	r0, r4
    ed10:	f7f7 fcf8 	bl	6704 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    ed14:	2000      	movs	r0, #0
    ed16:	f804 0f76 	strb.w	r0, [r4, #118]!
    ed1a:	2003      	movs	r0, #3
    ed1c:	70e0      	strb	r0, [r4, #3]
    ed1e:	bd10      	pop	{r4, pc}

0000ed20 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    ed20:	f7f6 b99e 	b.w	5060 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000ed24 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    ed24:	2000      	movs	r0, #0
    ed26:	4770      	bx	lr

0000ed28 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    ed28:	f7f6 be6c 	b.w	5a04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000ed2c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    ed2c:	2100      	movs	r1, #0
    ed2e:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    ed32:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    ed36:	f880 1079 	strb.w	r1, [r0, #121]	; 0x79
    ed3a:	f890 10fb 	ldrb.w	r1, [r0, #251]	; 0xfb
    ed3e:	b109      	cbz	r1, ed44 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    ed40:	2102      	movs	r1, #2
    ed42:	e000      	b.n	ed46 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    ed44:	2103      	movs	r1, #3
    ed46:	f7f9 b815 	b.w	7d74 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    ed4a:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    ed4e:	28fe      	cmp	r0, #254	; 0xfe
    ed50:	d001      	beq.n	ed56 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    ed52:	2001      	movs	r0, #1
    ed54:	4770      	bx	lr
    ed56:	2000      	movs	r0, #0
    ed58:	4770      	bx	lr
    ed5a:	b510      	push	{r4, lr}
    ed5c:	2801      	cmp	r0, #1
    ed5e:	d006      	beq.n	ed6e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    ed60:	2802      	cmp	r0, #2
    ed62:	d004      	beq.n	ed6e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    ed64:	f240 2173 	movw	r1, #627	; 0x273
    ed68:	2006      	movs	r0, #6
    ed6a:	f7f5 fdb9 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed6e:	bd10      	pop	{r4, pc}
    ed70:	2801      	cmp	r0, #1
    ed72:	d002      	beq.n	ed7a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    ed74:	2802      	cmp	r0, #2
    ed76:	d105      	bne.n	ed84 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    ed78:	e002      	b.n	ed80 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    ed7a:	2901      	cmp	r1, #1
    ed7c:	d004      	beq.n	ed88 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    ed7e:	e001      	b.n	ed84 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    ed80:	2902      	cmp	r1, #2
    ed82:	d001      	beq.n	ed88 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    ed84:	2000      	movs	r0, #0
    ed86:	4770      	bx	lr
    ed88:	2001      	movs	r0, #1
    ed8a:	4770      	bx	lr
    ed8c:	1a40      	subs	r0, r0, r1
    ed8e:	b200      	sxth	r0, r0
    ed90:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    ed94:	4288      	cmp	r0, r1
    ed96:	dc01      	bgt.n	ed9c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    ed98:	2800      	cmp	r0, #0
    ed9a:	dc01      	bgt.n	eda0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    ed9c:	2001      	movs	r0, #1
    ed9e:	4770      	bx	lr
    eda0:	2000      	movs	r0, #0
    eda2:	4770      	bx	lr
    eda4:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    eda8:	f001 0107 	and.w	r1, r1, #7
    edac:	7800      	ldrb	r0, [r0, #0]
    edae:	2201      	movs	r2, #1
    edb0:	408a      	lsls	r2, r1
    edb2:	4010      	ands	r0, r2
    edb4:	40c8      	lsrs	r0, r1
    edb6:	4770      	bx	lr
    edb8:	b118      	cbz	r0, edc2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    edba:	2802      	cmp	r0, #2
    edbc:	d001      	beq.n	edc2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    edbe:	2001      	movs	r0, #1
    edc0:	4770      	bx	lr
    edc2:	2000      	movs	r0, #0
    edc4:	4770      	bx	lr

0000edc6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    edc6:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    edca:	7881      	ldrb	r1, [r0, #2]
    edcc:	4604      	mov	r4, r0
    edce:	291a      	cmp	r1, #26
    edd0:	d025      	beq.n	ee1e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x58>
    edd2:	dc0e      	bgt.n	edf2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    edd4:	2916      	cmp	r1, #22
    edd6:	d22e      	bcs.n	ee36 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    edd8:	e8df f001 	tbb	[pc, r1]
    eddc:	2d2d2d2d 	.word	0x2d2d2d2d
    ede0:	2d2d212d 	.word	0x2d2d212d
    ede4:	2d2d2d2d 	.word	0x2d2d2d2d
    ede8:	2d2d2d2d 	.word	0x2d2d2d2d
    edec:	212d2d2d 	.word	0x212d2d2d
    edf0:	2121      	.short	0x2121
    edf2:	292a      	cmp	r1, #42	; 0x2a
    edf4:	d01f      	beq.n	ee36 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    edf6:	dc0b      	bgt.n	ee10 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    edf8:	f1a1 011e 	sub.w	r1, r1, #30
    edfc:	290c      	cmp	r1, #12
    edfe:	d21a      	bcs.n	ee36 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    ee00:	e8df f001 	tbb	[pc, r1]
    ee04:	19191919 	.word	0x19191919
    ee08:	19191919 	.word	0x19191919
    ee0c:	0d191919 	.word	0x0d191919
    ee10:	393a      	subs	r1, #58	; 0x3a
    ee12:	2904      	cmp	r1, #4
    ee14:	d20f      	bcs.n	ee36 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    ee16:	e8df f001 	tbb	[pc, r1]
    ee1a:	020e      	.short	0x020e
    ee1c:	020e      	.short	0x020e
    ee1e:	8820      	ldrh	r0, [r4, #0]
    ee20:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    ee24:	d207      	bcs.n	ee36 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    ee26:	2701      	movs	r7, #1
    ee28:	4669      	mov	r1, sp
    ee2a:	f7fe fc9f 	bl	d76c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ee2e:	b120      	cbz	r0, ee3a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x74>
    ee30:	2002      	movs	r0, #2
    ee32:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ee36:	2012      	movs	r0, #18
    ee38:	e7fb      	b.n	ee32 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    ee3a:	9d01      	ldr	r5, [sp, #4]
    ee3c:	4668      	mov	r0, sp
    ee3e:	462e      	mov	r6, r5
    ee40:	f505 75b8 	add.w	r5, r5, #368	; 0x170
    ee44:	f206 1671 	addw	r6, r6, #369	; 0x171
    ee48:	f000 fe66 	bl	fb18 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x32e>
    ee4c:	b108      	cbz	r0, ee52 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    ee4e:	7828      	ldrb	r0, [r5, #0]
    ee50:	b108      	cbz	r0, ee56 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x90>
    ee52:	200c      	movs	r0, #12
    ee54:	e7ed      	b.n	ee32 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    ee56:	702f      	strb	r7, [r5, #0]
    ee58:	78a0      	ldrb	r0, [r4, #2]
    ee5a:	7030      	strb	r0, [r6, #0]
    ee5c:	4668      	mov	r0, sp
    ee5e:	f7ff f83e 	bl	dede <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    ee62:	2000      	movs	r0, #0
    ee64:	e7e5      	b.n	ee32 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>

0000ee66 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    ee66:	b510      	push	{r4, lr}
    ee68:	4604      	mov	r4, r0
    ee6a:	7800      	ldrb	r0, [r0, #0]
    ee6c:	b118      	cbz	r0, ee76 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    ee6e:	2801      	cmp	r0, #1
    ee70:	d001      	beq.n	ee76 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    ee72:	2012      	movs	r0, #18
    ee74:	bd10      	pop	{r4, pc}
    ee76:	f000 fe03 	bl	fa80 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    ee7a:	b120      	cbz	r0, ee86 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    ee7c:	f7f7 f9fc 	bl	6278 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ee80:	b108      	cbz	r0, ee86 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    ee82:	200c      	movs	r0, #12
    ee84:	bd10      	pop	{r4, pc}
    ee86:	7820      	ldrb	r0, [r4, #0]
    ee88:	f7ff ff96 	bl	edb8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    ee8c:	1de2      	adds	r2, r4, #7
    ee8e:	f104 0317 	add.w	r3, r4, #23
    ee92:	1c61      	adds	r1, r4, #1
    ee94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee98:	f7f7 ba20 	b.w	62dc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000ee9c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    ee9c:	b510      	push	{r4, lr}
    ee9e:	4604      	mov	r4, r0
    eea0:	f000 fecb 	bl	fc3a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
    eea4:	b108      	cbz	r0, eeaa <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    eea6:	200c      	movs	r0, #12
    eea8:	bd10      	pop	{r4, pc}
    eeaa:	7820      	ldrb	r0, [r4, #0]
    eeac:	b118      	cbz	r0, eeb6 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    eeae:	2801      	cmp	r0, #1
    eeb0:	d001      	beq.n	eeb6 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    eeb2:	2012      	movs	r0, #18
    eeb4:	bd10      	pop	{r4, pc}
    eeb6:	f7ff ff7f 	bl	edb8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    eeba:	1c61      	adds	r1, r4, #1
    eebc:	f7f7 fa86 	bl	63cc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    eec0:	b108      	cbz	r0, eec6 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    eec2:	2000      	movs	r0, #0
    eec4:	bd10      	pop	{r4, pc}
    eec6:	2007      	movs	r0, #7
    eec8:	bd10      	pop	{r4, pc}

0000eeca <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    eeca:	b510      	push	{r4, lr}
    eecc:	f000 fdd8 	bl	fa80 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    eed0:	b120      	cbz	r0, eedc <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    eed2:	f7f7 f9d1 	bl	6278 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    eed6:	b108      	cbz	r0, eedc <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    eed8:	200c      	movs	r0, #12
    eeda:	bd10      	pop	{r4, pc}
    eedc:	f7f7 fa44 	bl	6368 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    eee0:	2000      	movs	r0, #0
    eee2:	bd10      	pop	{r4, pc}

0000eee4 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    eee4:	b510      	push	{r4, lr}
    eee6:	f000 fea8 	bl	fc3a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
    eeea:	b108      	cbz	r0, eef0 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    eeec:	200c      	movs	r0, #12
    eeee:	bd10      	pop	{r4, pc}
    eef0:	f7f7 fa94 	bl	641c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    eef4:	2000      	movs	r0, #0
    eef6:	bd10      	pop	{r4, pc}

0000eef8 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    eef8:	b510      	push	{r4, lr}
    eefa:	460b      	mov	r3, r1
    eefc:	2201      	movs	r2, #1
    eefe:	f100 0110 	add.w	r1, r0, #16
    ef02:	f7fe fc15 	bl	d730 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    ef06:	2000      	movs	r0, #0
    ef08:	bd10      	pop	{r4, pc}

0000ef0a <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    ef0a:	b510      	push	{r4, lr}
    ef0c:	8800      	ldrh	r0, [r0, #0]
    ef0e:	2100      	movs	r1, #0
    ef10:	f7fe faf3 	bl	d4fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ef14:	b118      	cbz	r0, ef1e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    ef16:	f890 1173 	ldrb.w	r1, [r0, #371]	; 0x173
    ef1a:	b111      	cbz	r1, ef22 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    ef1c:	e007      	b.n	ef2e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    ef1e:	2002      	movs	r0, #2
    ef20:	bd10      	pop	{r4, pc}
    ef22:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    ef26:	2914      	cmp	r1, #20
    ef28:	d003      	beq.n	ef32 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    ef2a:	2915      	cmp	r1, #21
    ef2c:	d001      	beq.n	ef32 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    ef2e:	200c      	movs	r0, #12
    ef30:	bd10      	pop	{r4, pc}
    ef32:	2102      	movs	r1, #2
    ef34:	f880 1173 	strb.w	r1, [r0, #371]	; 0x173
    ef38:	2000      	movs	r0, #0
    ef3a:	bd10      	pop	{r4, pc}

0000ef3c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    ef3c:	b538      	push	{r3, r4, r5, lr}
    ef3e:	4605      	mov	r5, r0
    ef40:	8800      	ldrh	r0, [r0, #0]
    ef42:	2100      	movs	r1, #0
    ef44:	f7fe fad9 	bl	d4fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ef48:	0004      	movs	r4, r0
    ef4a:	d003      	beq.n	ef54 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    ef4c:	f894 0173 	ldrb.w	r0, [r4, #371]	; 0x173
    ef50:	b110      	cbz	r0, ef58 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    ef52:	e010      	b.n	ef76 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    ef54:	2002      	movs	r0, #2
    ef56:	bd38      	pop	{r3, r4, r5, pc}
    ef58:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    ef5c:	2814      	cmp	r0, #20
    ef5e:	d001      	beq.n	ef64 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    ef60:	2815      	cmp	r0, #21
    ef62:	d108      	bne.n	ef76 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    ef64:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    ef68:	f88d 0000 	strb.w	r0, [sp]
    ef6c:	9800      	ldr	r0, [sp, #0]
    ef6e:	9000      	str	r0, [sp, #0]
    ef70:	f89d 0000 	ldrb.w	r0, [sp]
    ef74:	b108      	cbz	r0, ef7a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3e>
    ef76:	200c      	movs	r0, #12
    ef78:	bd38      	pop	{r3, r4, r5, pc}
    ef7a:	2210      	movs	r2, #16
    ef7c:	1ca9      	adds	r1, r5, #2
    ef7e:	f504 70ba 	add.w	r0, r4, #372	; 0x174
    ef82:	f7fd fac2 	bl	c50a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ef86:	2001      	movs	r0, #1
    ef88:	f884 0173 	strb.w	r0, [r4, #371]	; 0x173
    ef8c:	2000      	movs	r0, #0
    ef8e:	bd38      	pop	{r3, r4, r5, pc}

0000ef90 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    ef90:	b510      	push	{r4, lr}
    ef92:	2108      	movs	r1, #8
    ef94:	f7f5 fd58 	bl	4a48 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ef98:	2000      	movs	r0, #0
    ef9a:	bd10      	pop	{r4, pc}

0000ef9c <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    ef9c:	b510      	push	{r4, lr}
    ef9e:	4604      	mov	r4, r0
    efa0:	f000 fdd1 	bl	fb46 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    efa4:	f7ff f9f0 	bl	e388 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    efa8:	7020      	strb	r0, [r4, #0]
    efaa:	2000      	movs	r0, #0
    efac:	bd10      	pop	{r4, pc}

0000efae <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    efae:	b510      	push	{r4, lr}
    efb0:	4604      	mov	r4, r0
    efb2:	f000 fdab 	bl	fb0c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    efb6:	b140      	cbz	r0, efca <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    efb8:	20fb      	movs	r0, #251	; 0xfb
    efba:	8020      	strh	r0, [r4, #0]
    efbc:	f640 0148 	movw	r1, #2120	; 0x848
    efc0:	8061      	strh	r1, [r4, #2]
    efc2:	80a0      	strh	r0, [r4, #4]
    efc4:	80e1      	strh	r1, [r4, #6]
    efc6:	2000      	movs	r0, #0
    efc8:	bd10      	pop	{r4, pc}
    efca:	2001      	movs	r0, #1
    efcc:	bd10      	pop	{r4, pc}

0000efce <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    efce:	2108      	movs	r1, #8
    efd0:	7001      	strb	r1, [r0, #0]
    efd2:	2000      	movs	r0, #0
    efd4:	4770      	bx	lr

0000efd6 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    efd6:	b510      	push	{r4, lr}
    efd8:	4604      	mov	r4, r0
    efda:	20d8      	movs	r0, #216	; 0xd8
    efdc:	7020      	strb	r0, [r4, #0]
    efde:	f000 fd76 	bl	face <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e4>
    efe2:	7060      	strb	r0, [r4, #1]
    efe4:	2000      	movs	r0, #0
    efe6:	bd10      	pop	{r4, pc}

0000efe8 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    efe8:	2108      	movs	r1, #8
    efea:	7001      	strb	r1, [r0, #0]
    efec:	2000      	movs	r0, #0
    efee:	4770      	bx	lr

0000eff0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    eff0:	b510      	push	{r4, lr}
    eff2:	4604      	mov	r4, r0
    eff4:	7800      	ldrb	r0, [r0, #0]
    eff6:	b108      	cbz	r0, effc <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    eff8:	2801      	cmp	r0, #1
    effa:	d110      	bne.n	f01e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    effc:	f000 fd40 	bl	fa80 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    f000:	b120      	cbz	r0, f00c <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    f002:	f7f7 f939 	bl	6278 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f006:	b108      	cbz	r0, f00c <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    f008:	200c      	movs	r0, #12
    f00a:	bd10      	pop	{r4, pc}
    f00c:	7820      	ldrb	r0, [r4, #0]
    f00e:	f7ff fed3 	bl	edb8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f012:	1c61      	adds	r1, r4, #1
    f014:	f7fe fb72 	bl	d6fc <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    f018:	b108      	cbz	r0, f01e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    f01a:	2000      	movs	r0, #0
    f01c:	bd10      	pop	{r4, pc}
    f01e:	2012      	movs	r0, #18
    f020:	bd10      	pop	{r4, pc}

0000f022 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    f022:	b510      	push	{r4, lr}
    f024:	4604      	mov	r4, r0
    f026:	f000 fe08 	bl	fc3a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
    f02a:	b108      	cbz	r0, f030 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    f02c:	200c      	movs	r0, #12
    f02e:	bd10      	pop	{r4, pc}
    f030:	7820      	ldrb	r0, [r4, #0]
    f032:	b108      	cbz	r0, f038 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    f034:	2801      	cmp	r0, #1
    f036:	d107      	bne.n	f048 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f038:	f7ff febe 	bl	edb8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f03c:	1c61      	adds	r1, r4, #1
    f03e:	f7fe fb6c 	bl	d71a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    f042:	b108      	cbz	r0, f048 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f044:	2000      	movs	r0, #0
    f046:	bd10      	pop	{r4, pc}
    f048:	2012      	movs	r0, #18
    f04a:	bd10      	pop	{r4, pc}

0000f04c <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    f04c:	b510      	push	{r4, lr}
    f04e:	4604      	mov	r4, r0
    f050:	f000 fd16 	bl	fa80 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    f054:	b108      	cbz	r0, f05a <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    f056:	200c      	movs	r0, #12
    f058:	bd10      	pop	{r4, pc}
    f05a:	7820      	ldrb	r0, [r4, #0]
    f05c:	f000 0001 	and.w	r0, r0, #1
    f060:	f7f7 f904 	bl	626c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    f064:	2000      	movs	r0, #0
    f066:	bd10      	pop	{r4, pc}

0000f068 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    f068:	b570      	push	{r4, r5, r6, lr}
    f06a:	b086      	sub	sp, #24
    f06c:	4605      	mov	r5, r0
    f06e:	f000 fd6a 	bl	fb46 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    f072:	4604      	mov	r4, r0
    f074:	4669      	mov	r1, sp
    f076:	f7ff f99f 	bl	e3b8 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI>
    f07a:	b118      	cbz	r0, f084 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x1c>
    f07c:	4669      	mov	r1, sp
    f07e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f080:	f7fe fa81 	bl	d586 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    f084:	2200      	movs	r2, #0
    f086:	a804      	add	r0, sp, #16
    f088:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f08a:	f7f6 f88b 	bl	51a4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f08e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    f092:	e9cd 0100 	strd	r0, r1, [sp]
    f096:	b168      	cbz	r0, f0b4 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x4c>
    f098:	7829      	ldrb	r1, [r5, #0]
    f09a:	466a      	mov	r2, sp
    f09c:	1c68      	adds	r0, r5, #1
    f09e:	f000 fbf5 	bl	f88c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    f0a2:	0006      	movs	r6, r0
    f0a4:	d00c      	beq.n	f0c0 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x58>
    f0a6:	4669      	mov	r1, sp
    f0a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f0aa:	f7fe fa6c 	bl	d586 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    f0ae:	4630      	mov	r0, r6
    f0b0:	b006      	add	sp, #24
    f0b2:	bd70      	pop	{r4, r5, r6, pc}
    f0b4:	4669      	mov	r1, sp
    f0b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f0b8:	f7fe fa65 	bl	d586 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    f0bc:	2007      	movs	r0, #7
    f0be:	e7f7      	b.n	f0b0 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x48>
    f0c0:	4669      	mov	r1, sp
    f0c2:	4620      	mov	r0, r4
    f0c4:	f7ff f98f 	bl	e3e6 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    f0c8:	9800      	ldr	r0, [sp, #0]
    f0ca:	9003      	str	r0, [sp, #12]
    f0cc:	7828      	ldrb	r0, [r5, #0]
    f0ce:	f8ad 000a 	strh.w	r0, [sp, #10]
    f0d2:	2000      	movs	r0, #0
    f0d4:	f88d 0008 	strb.w	r0, [sp, #8]
    f0d8:	a802      	add	r0, sp, #8
    f0da:	f000 fa35 	bl	f548 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    f0de:	e7e7      	b.n	f0b0 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x48>

0000f0e0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    f0e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f0e2:	4605      	mov	r5, r0
    f0e4:	f000 fd2f 	bl	fb46 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    f0e8:	4606      	mov	r6, r0
    f0ea:	7828      	ldrb	r0, [r5, #0]
    f0ec:	2400      	movs	r4, #0
    f0ee:	b160      	cbz	r0, f10a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    f0f0:	f88d 4000 	strb.w	r4, [sp]
    f0f4:	2001      	movs	r0, #1
    f0f6:	f10d 0101 	add.w	r1, sp, #1
    f0fa:	f7f6 fab3 	bl	5664 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f0fe:	b120      	cbz	r0, f10a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    f100:	4668      	mov	r0, sp
    f102:	f000 f894 	bl	f22e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    f106:	2800      	cmp	r0, #0
    f108:	d112      	bne.n	f130 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    f10a:	f88d 400c 	strb.w	r4, [sp, #12]
    f10e:	4630      	mov	r0, r6
    f110:	f7ff f930 	bl	e374 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f114:	b118      	cbz	r0, f11e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    f116:	2080      	movs	r0, #128	; 0x80
    f118:	f8ad 000d 	strh.w	r0, [sp, #13]
    f11c:	e001      	b.n	f122 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    f11e:	f8ad 400d 	strh.w	r4, [sp, #13]
    f122:	f88d 400f 	strb.w	r4, [sp, #15]
    f126:	7828      	ldrb	r0, [r5, #0]
    f128:	2801      	cmp	r0, #1
    f12a:	d003      	beq.n	f134 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    f12c:	b138      	cbz	r0, f13e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    f12e:	2012      	movs	r0, #18
    f130:	b004      	add	sp, #16
    f132:	bd70      	pop	{r4, r5, r6, pc}
    f134:	a903      	add	r1, sp, #12
    f136:	4630      	mov	r0, r6
    f138:	f7fb fcd8 	bl	aaec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    f13c:	e7f8      	b.n	f130 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    f13e:	4630      	mov	r0, r6
    f140:	f000 fd19 	bl	fb76 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38c>
    f144:	e7f4      	b.n	f130 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000f146 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    f146:	b530      	push	{r4, r5, lr}
    f148:	b08b      	sub	sp, #44	; 0x2c
    f14a:	4604      	mov	r4, r0
    f14c:	f000 fcfb 	bl	fb46 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    f150:	4602      	mov	r2, r0
    f152:	8860      	ldrh	r0, [r4, #2]
    f154:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    f158:	d902      	bls.n	f160 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    f15a:	2012      	movs	r0, #18
    f15c:	b00b      	add	sp, #44	; 0x2c
    f15e:	bd30      	pop	{r4, r5, pc}
    f160:	2500      	movs	r5, #0
    f162:	f88d 5004 	strb.w	r5, [sp, #4]
    f166:	7921      	ldrb	r1, [r4, #4]
    f168:	9500      	str	r5, [sp, #0]
    f16a:	f89d 0000 	ldrb.w	r0, [sp]
    f16e:	2905      	cmp	r1, #5
    f170:	f040 0010 	orr.w	r0, r0, #16
    f174:	f88d 0000 	strb.w	r0, [sp]
    f178:	d254      	bcs.n	f224 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xde>
    f17a:	e8df f001 	tbb	[pc, r1]
    f17e:	0803      	.short	0x0803
    f180:	000b1105 	.word	0x000b1105
    f184:	f040 0001 	orr.w	r0, r0, #1
    f188:	f040 0002 	orr.w	r0, r0, #2
    f18c:	e006      	b.n	f19c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x56>
    f18e:	f040 0009 	orr.w	r0, r0, #9
    f192:	e001      	b.n	f198 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x52>
    f194:	f040 0001 	orr.w	r0, r0, #1
    f198:	f040 0004 	orr.w	r0, r0, #4
    f19c:	f88d 0000 	strb.w	r0, [sp]
    f1a0:	f8bd 0000 	ldrh.w	r0, [sp]
    f1a4:	9000      	str	r0, [sp, #0]
    f1a6:	f8bd 0000 	ldrh.w	r0, [sp]
    f1aa:	f8ad 0005 	strh.w	r0, [sp, #5]
    f1ae:	8821      	ldrh	r1, [r4, #0]
    f1b0:	f8dd 0006 	ldr.w	r0, [sp, #6]
    f1b4:	f361 201f 	bfi	r0, r1, #8, #24
    f1b8:	f8cd 0006 	str.w	r0, [sp, #6]
    f1bc:	8861      	ldrh	r1, [r4, #2]
    f1be:	f8dd 0009 	ldr.w	r0, [sp, #9]
    f1c2:	f361 201f 	bfi	r0, r1, #8, #24
    f1c6:	f8cd 0009 	str.w	r0, [sp, #9]
    f1ca:	7b60      	ldrb	r0, [r4, #13]
    f1cc:	f88d 000d 	strb.w	r0, [sp, #13]
    f1d0:	7960      	ldrb	r0, [r4, #5]
    f1d2:	f88d 000e 	strb.w	r0, [sp, #14]
    f1d6:	79a0      	ldrb	r0, [r4, #6]
    f1d8:	f88d 000f 	strb.w	r0, [sp, #15]
    f1dc:	f8d4 0007 	ldr.w	r0, [r4, #7]
    f1e0:	9004      	str	r0, [sp, #16]
    f1e2:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    f1e6:	f8ad 0014 	strh.w	r0, [sp, #20]
    f1ea:	7ba0      	ldrb	r0, [r4, #14]
    f1ec:	f88d 0016 	strb.w	r0, [sp, #22]
    f1f0:	207f      	movs	r0, #127	; 0x7f
    f1f2:	f88d 0017 	strb.w	r0, [sp, #23]
    f1f6:	2001      	movs	r0, #1
    f1f8:	f88d 0018 	strb.w	r0, [sp, #24]
    f1fc:	f88d 5019 	strb.w	r5, [sp, #25]
    f200:	f88d 001a 	strb.w	r0, [sp, #26]
    f204:	f88d 501b 	strb.w	r5, [sp, #27]
    f208:	4610      	mov	r0, r2
    f20a:	f7ff f8cf 	bl	e3ac <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    f20e:	f88d 001c 	strb.w	r0, [sp, #28]
    f212:	f88d 501d 	strb.w	r5, [sp, #29]
    f216:	f88d 501e 	strb.w	r5, [sp, #30]
    f21a:	a909      	add	r1, sp, #36	; 0x24
    f21c:	a801      	add	r0, sp, #4
    f21e:	f000 f8ff 	bl	f420 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    f222:	e79b      	b.n	f15c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x16>
    f224:	f241 01a9 	movw	r1, #4265	; 0x10a9
    f228:	2039      	movs	r0, #57	; 0x39
    f22a:	f7f5 fb59 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f22e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    f22e:	b570      	push	{r4, r5, r6, lr}
    f230:	4604      	mov	r4, r0
    f232:	7800      	ldrb	r0, [r0, #0]
    f234:	2101      	movs	r1, #1
    f236:	f7fe f960 	bl	d4fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f23a:	0005      	movs	r5, r0
    f23c:	d007      	beq.n	f24e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    f23e:	f7ff faaa 	bl	e796 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f242:	b160      	cbz	r0, f25e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f244:	4628      	mov	r0, r5
    f246:	f7ff f89b 	bl	e380 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f24a:	b110      	cbz	r0, f252 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    f24c:	e005      	b.n	f25a <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    f24e:	2042      	movs	r0, #66	; 0x42
    f250:	bd70      	pop	{r4, r5, r6, pc}
    f252:	4628      	mov	r0, r5
    f254:	f7ff f88a 	bl	e36c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f258:	b108      	cbz	r0, f25e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f25a:	200c      	movs	r0, #12
    f25c:	bd70      	pop	{r4, r5, r6, pc}
    f25e:	1c61      	adds	r1, r4, #1
    f260:	4628      	mov	r0, r5
    f262:	f7ff f89b 	bl	e39c <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    f266:	2000      	movs	r0, #0
    f268:	bd70      	pop	{r4, r5, r6, pc}

0000f26a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    f26a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f26c:	460d      	mov	r5, r1
    f26e:	4604      	mov	r4, r0
    f270:	f000 fc4c 	bl	fb0c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    f274:	b130      	cbz	r0, f284 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    f276:	88a2      	ldrh	r2, [r4, #4]
    f278:	f244 2090 	movw	r0, #17040	; 0x4290
    f27c:	4282      	cmp	r2, r0
    f27e:	d903      	bls.n	f288 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    f280:	2012      	movs	r0, #18
    f282:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f284:	2001      	movs	r0, #1
    f286:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f288:	f640 0048 	movw	r0, #2120	; 0x848
    f28c:	4282      	cmp	r2, r0
    f28e:	d300      	bcc.n	f292 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    f290:	4602      	mov	r2, r0
    f292:	8820      	ldrh	r0, [r4, #0]
    f294:	f8ad 0000 	strh.w	r0, [sp]
    f298:	8860      	ldrh	r0, [r4, #2]
    f29a:	f8ad 0002 	strh.w	r0, [sp, #2]
    f29e:	f8ad 2004 	strh.w	r2, [sp, #4]
    f2a2:	8860      	ldrh	r0, [r4, #2]
    f2a4:	f8ad 0006 	strh.w	r0, [sp, #6]
    f2a8:	f8ad 2008 	strh.w	r2, [sp, #8]
    f2ac:	8820      	ldrh	r0, [r4, #0]
    f2ae:	8028      	strh	r0, [r5, #0]
    f2b0:	4668      	mov	r0, sp
    f2b2:	f7fb fce9 	bl	ac88 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    f2b6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f2b8 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    f2b8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f2ba:	4604      	mov	r4, r0
    f2bc:	f7fb fe34 	bl	af28 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f2c0:	f3c0 2000 	ubfx	r0, r0, #8, #1
    f2c4:	b1b0      	cbz	r0, f2f4 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    f2c6:	f10d 0007 	add.w	r0, sp, #7
    f2ca:	9000      	str	r0, [sp, #0]
    f2cc:	7922      	ldrb	r2, [r4, #4]
    f2ce:	78e1      	ldrb	r1, [r4, #3]
    f2d0:	78a0      	ldrb	r0, [r4, #2]
    f2d2:	f10d 0306 	add.w	r3, sp, #6
    f2d6:	f000 fc74 	bl	fbc2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d8>
    f2da:	2800      	cmp	r0, #0
    f2dc:	d109      	bne.n	f2f2 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    f2de:	8820      	ldrh	r0, [r4, #0]
    f2e0:	f8ad 0004 	strh.w	r0, [sp, #4]
    f2e4:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    f2e8:	f8ad 0008 	strh.w	r0, [sp, #8]
    f2ec:	a801      	add	r0, sp, #4
    f2ee:	f000 f97c 	bl	f5ea <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    f2f2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f2f4:	2001      	movs	r0, #1
    f2f6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f2f8 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    f2f8:	b510      	push	{r4, lr}
    f2fa:	4604      	mov	r4, r0
    f2fc:	f000 fbc0 	bl	fa80 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    f300:	b120      	cbz	r0, f30c <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    f302:	f7f6 ffb9 	bl	6278 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f306:	b108      	cbz	r0, f30c <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    f308:	200c      	movs	r0, #12
    f30a:	bd10      	pop	{r4, pc}
    f30c:	7820      	ldrb	r0, [r4, #0]
    f30e:	f7ff fd53 	bl	edb8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f312:	79e2      	ldrb	r2, [r4, #7]
    f314:	1c61      	adds	r1, r4, #1
    f316:	f7f6 ff5d 	bl	61d4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    f31a:	b108      	cbz	r0, f320 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    f31c:	2000      	movs	r0, #0
    f31e:	bd10      	pop	{r4, pc}
    f320:	2002      	movs	r0, #2
    f322:	bd10      	pop	{r4, pc}

0000f324 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    f324:	b510      	push	{r4, lr}
    f326:	4604      	mov	r4, r0
    f328:	2001      	movs	r0, #1
    f32a:	f000 fa9d 	bl	f868 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    f32e:	b128      	cbz	r0, f33c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    f330:	4621      	mov	r1, r4
    f332:	2001      	movs	r0, #1
    f334:	f7f6 f9ae 	bl	5694 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f338:	2000      	movs	r0, #0
    f33a:	bd10      	pop	{r4, pc}
    f33c:	200c      	movs	r0, #12
    f33e:	bd10      	pop	{r4, pc}

0000f340 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    f340:	b510      	push	{r4, lr}
    f342:	8800      	ldrh	r0, [r0, #0]
    f344:	f7f7 f826 	bl	6394 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    f348:	b108      	cbz	r0, f34e <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    f34a:	2000      	movs	r0, #0
    f34c:	bd10      	pop	{r4, pc}
    f34e:	2030      	movs	r0, #48	; 0x30
    f350:	bd10      	pop	{r4, pc}

0000f352 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    f352:	b530      	push	{r4, r5, lr}
    f354:	b087      	sub	sp, #28
    f356:	4605      	mov	r5, r0
    f358:	f000 fbf5 	bl	fb46 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    f35c:	4604      	mov	r4, r0
    f35e:	4669      	mov	r1, sp
    f360:	f7ff f849 	bl	e3f6 <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA>
    f364:	b118      	cbz	r0, f36e <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x1c>
    f366:	4669      	mov	r1, sp
    f368:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f36a:	f7fe f90c 	bl	d586 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    f36e:	2200      	movs	r2, #0
    f370:	a805      	add	r0, sp, #20
    f372:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f374:	f7f5 ff16 	bl	51a4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f378:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
    f37c:	e9cd 0100 	strd	r0, r1, [sp]
    f380:	7829      	ldrb	r1, [r5, #0]
    f382:	466a      	mov	r2, sp
    f384:	1c68      	adds	r0, r5, #1
    f386:	f000 fa81 	bl	f88c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    f38a:	0005      	movs	r5, r0
    f38c:	d006      	beq.n	f39c <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x4a>
    f38e:	4669      	mov	r1, sp
    f390:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f392:	f7fe f8f8 	bl	d586 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    f396:	4628      	mov	r0, r5
    f398:	b007      	add	sp, #28
    f39a:	bd30      	pop	{r4, r5, pc}
    f39c:	4669      	mov	r1, sp
    f39e:	4620      	mov	r0, r4
    f3a0:	f7ff f840 	bl	e424 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    f3a4:	2000      	movs	r0, #0
    f3a6:	f88d 000c 	strb.w	r0, [sp, #12]
    f3aa:	9800      	ldr	r0, [sp, #0]
    f3ac:	9004      	str	r0, [sp, #16]
    f3ae:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    f3b2:	f8ad 000e 	strh.w	r0, [sp, #14]
    f3b6:	a803      	add	r0, sp, #12
    f3b8:	f000 f8ef 	bl	f59a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    f3bc:	e7ec      	b.n	f398 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x46>

0000f3be <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    f3be:	b51c      	push	{r2, r3, r4, lr}
    f3c0:	4604      	mov	r4, r0
    f3c2:	f000 fba3 	bl	fb0c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    f3c6:	b178      	cbz	r0, f3e8 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    f3c8:	8820      	ldrh	r0, [r4, #0]
    f3ca:	f8ad 0000 	strh.w	r0, [sp]
    f3ce:	8860      	ldrh	r0, [r4, #2]
    f3d0:	f8ad 0002 	strh.w	r0, [sp, #2]
    f3d4:	8820      	ldrh	r0, [r4, #0]
    f3d6:	f8ad 0004 	strh.w	r0, [sp, #4]
    f3da:	8860      	ldrh	r0, [r4, #2]
    f3dc:	f8ad 0006 	strh.w	r0, [sp, #6]
    f3e0:	4668      	mov	r0, sp
    f3e2:	f7fb fcd5 	bl	ad90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    f3e6:	bd1c      	pop	{r2, r3, r4, pc}
    f3e8:	2001      	movs	r0, #1
    f3ea:	bd1c      	pop	{r2, r3, r4, pc}

0000f3ec <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    f3ec:	b510      	push	{r4, lr}
    f3ee:	f7f6 f975 	bl	56dc <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    f3f2:	2000      	movs	r0, #0
    f3f4:	bd10      	pop	{r4, pc}

0000f3f6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    f3f6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f3f8:	460c      	mov	r4, r1
    f3fa:	4605      	mov	r5, r0
    f3fc:	f000 fb86 	bl	fb0c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    f400:	b160      	cbz	r0, f41c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    f402:	4669      	mov	r1, sp
    f404:	4628      	mov	r0, r5
    f406:	f7fe f9b1 	bl	d76c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f40a:	2800      	cmp	r0, #0
    f40c:	d105      	bne.n	f41a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    f40e:	2100      	movs	r1, #0
    f410:	4622      	mov	r2, r4
    f412:	9801      	ldr	r0, [sp, #4]
    f414:	f000 fafe 	bl	fa14 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22a>
    f418:	2000      	movs	r0, #0
    f41a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f41c:	2001      	movs	r0, #1
    f41e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f420 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    f420:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f424:	460f      	mov	r7, r1
    f426:	4605      	mov	r5, r0
    f428:	7806      	ldrb	r6, [r0, #0]
    f42a:	f000 fa7f 	bl	f92c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x142>
    f42e:	2800      	cmp	r0, #0
    f430:	d10a      	bne.n	f448 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    f432:	4628      	mov	r0, r5
    f434:	f000 fa5e 	bl	f8f4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10a>
    f438:	2800      	cmp	r0, #0
    f43a:	d105      	bne.n	f448 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    f43c:	2001      	movs	r0, #1
    f43e:	f7f5 fc55 	bl	4cec <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    f442:	4286      	cmp	r6, r0
    f444:	d302      	bcc.n	f44c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    f446:	2007      	movs	r0, #7
    f448:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f44c:	2101      	movs	r1, #1
    f44e:	4630      	mov	r0, r6
    f450:	f7fe f853 	bl	d4fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f454:	0004      	movs	r4, r0
    f456:	d004      	beq.n	f462 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    f458:	f7ff f99d 	bl	e796 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f45c:	b158      	cbz	r0, f476 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x56>
    f45e:	200c      	movs	r0, #12
    f460:	e7f2      	b.n	f448 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    f462:	2200      	movs	r2, #0
    f464:	2101      	movs	r1, #1
    f466:	4630      	mov	r0, r6
    f468:	f7fe f82b 	bl	d4c2 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    f46c:	0004      	movs	r4, r0
    f46e:	d010      	beq.n	f492 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x72>
    f470:	4631      	mov	r1, r6
    f472:	f7fe ff29 	bl	e2c8 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    f476:	4620      	mov	r0, r4
    f478:	f7fe ff86 	bl	e388 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    f47c:	7038      	strb	r0, [r7, #0]
    f47e:	74e8      	strb	r0, [r5, #19]
    f480:	4629      	mov	r1, r5
    f482:	4620      	mov	r0, r4
    f484:	f7f7 fd2a 	bl	6edc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    f488:	4606      	mov	r6, r0
    f48a:	7e68      	ldrb	r0, [r5, #25]
    f48c:	b360      	cbz	r0, f4e8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xc8>
    f48e:	b12e      	cbz	r6, f49c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7c>
    f490:	e02a      	b.n	f4e8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xc8>
    f492:	f241 212b 	movw	r1, #4651	; 0x122b
    f496:	2039      	movs	r0, #57	; 0x39
    f498:	f7f5 fa22 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f49c:	4669      	mov	r1, sp
    f49e:	4620      	mov	r0, r4
    f4a0:	f7fe ff8a 	bl	e3b8 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI>
    f4a4:	b118      	cbz	r0, f4ae <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x8e>
    f4a6:	4669      	mov	r1, sp
    f4a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f4aa:	f7fe f86c 	bl	d586 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    f4ae:	4669      	mov	r1, sp
    f4b0:	4620      	mov	r0, r4
    f4b2:	f7fe ffa0 	bl	e3f6 <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA>
    f4b6:	b118      	cbz	r0, f4c0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>
    f4b8:	4669      	mov	r1, sp
    f4ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f4bc:	f7fe f863 	bl	d586 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    f4c0:	2000      	movs	r0, #0
    f4c2:	f8ad 0004 	strh.w	r0, [sp, #4]
    f4c6:	9000      	str	r0, [sp, #0]
    f4c8:	f8ad 0006 	strh.w	r0, [sp, #6]
    f4cc:	4669      	mov	r1, sp
    f4ce:	4620      	mov	r0, r4
    f4d0:	f7fe ff89 	bl	e3e6 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    f4d4:	4669      	mov	r1, sp
    f4d6:	4620      	mov	r0, r4
    f4d8:	f7fe ffa4 	bl	e424 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    f4dc:	4620      	mov	r0, r4
    f4de:	f7fe ff79 	bl	e3d4 <sym_6SMKGRHQAIZHR6JTRBTFU3LNEOI457UCNN7L2SY>
    f4e2:	4620      	mov	r0, r4
    f4e4:	f7fe ff95 	bl	e412 <sym_57N4MHGOTN6SE7ESLAUPVT5Z7CNKRRVGNPONZCI>
    f4e8:	4630      	mov	r0, r6
    f4ea:	e7ad      	b.n	f448 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>

0000f4ec <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    f4ec:	b510      	push	{r4, lr}
    f4ee:	4604      	mov	r4, r0
    f4f0:	2000      	movs	r0, #0
    f4f2:	f000 f9b9 	bl	f868 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    f4f6:	b128      	cbz	r0, f504 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    f4f8:	4621      	mov	r1, r4
    f4fa:	2000      	movs	r0, #0
    f4fc:	f7f6 f8ca 	bl	5694 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f500:	2000      	movs	r0, #0
    f502:	bd10      	pop	{r4, pc}
    f504:	200c      	movs	r0, #12
    f506:	bd10      	pop	{r4, pc}

0000f508 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>:
    f508:	b510      	push	{r4, lr}
    f50a:	4604      	mov	r4, r0
    f50c:	f7ff f95d 	bl	e7ca <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>
    f510:	b120      	cbz	r0, f51c <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY+0x14>
    f512:	7820      	ldrb	r0, [r4, #0]
    f514:	f7f8 fbee 	bl	7cf4 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>
    f518:	2000      	movs	r0, #0
    f51a:	bd10      	pop	{r4, pc}
    f51c:	200c      	movs	r0, #12
    f51e:	bd10      	pop	{r4, pc}

0000f520 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    f520:	b510      	push	{r4, lr}
    f522:	7800      	ldrb	r0, [r0, #0]
    f524:	f000 0001 	and.w	r0, r0, #1
    f528:	f7f8 fbea 	bl	7d00 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>
    f52c:	2000      	movs	r0, #0
    f52e:	bd10      	pop	{r4, pc}

0000f530 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    f530:	b510      	push	{r4, lr}
    f532:	4604      	mov	r4, r0
    f534:	f000 faea 	bl	fb0c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    f538:	b120      	cbz	r0, f544 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    f53a:	4620      	mov	r0, r4
    f53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f540:	f7fb bba2 	b.w	ac88 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    f544:	2001      	movs	r0, #1
    f546:	bd10      	pop	{r4, pc}

0000f548 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    f548:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f54a:	4605      	mov	r5, r0
    f54c:	7800      	ldrb	r0, [r0, #0]
    f54e:	2101      	movs	r1, #1
    f550:	f7fd ffd3 	bl	d4fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f554:	0006      	movs	r6, r0
    f556:	d01e      	beq.n	f596 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4e>
    f558:	2201      	movs	r2, #1
    f55a:	8869      	ldrh	r1, [r5, #2]
    f55c:	f000 f9ab 	bl	f8b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    f560:	2800      	cmp	r0, #0
    f562:	d117      	bne.n	f594 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4c>
    f564:	4630      	mov	r0, r6
    f566:	f7fe fece 	bl	e306 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    f56a:	4604      	mov	r4, r0
    f56c:	8868      	ldrh	r0, [r5, #2]
    f56e:	42a0      	cmp	r0, r4
    f570:	d800      	bhi.n	f574 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2c>
    f572:	4604      	mov	r4, r0
    f574:	4669      	mov	r1, sp
    f576:	4630      	mov	r0, r6
    f578:	f7fe ff30 	bl	e3dc <sym_UVJC3XBQQLDGXNDNKXZFSW7F5OWZWJU7FTAZXEI>
    f57c:	6868      	ldr	r0, [r5, #4]
    f57e:	9000      	str	r0, [sp, #0]
    f580:	f8ad 4004 	strh.w	r4, [sp, #4]
    f584:	4669      	mov	r1, sp
    f586:	4630      	mov	r0, r6
    f588:	f7fe ff2d 	bl	e3e6 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    f58c:	4630      	mov	r0, r6
    f58e:	f7fe ff21 	bl	e3d4 <sym_6SMKGRHQAIZHR6JTRBTFU3LNEOI457UCNN7L2SY>
    f592:	2000      	movs	r0, #0
    f594:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f596:	2042      	movs	r0, #66	; 0x42
    f598:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f59a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    f59a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f59c:	4604      	mov	r4, r0
    f59e:	7800      	ldrb	r0, [r0, #0]
    f5a0:	2101      	movs	r1, #1
    f5a2:	f7fd ffaa 	bl	d4fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f5a6:	0005      	movs	r5, r0
    f5a8:	d00b      	beq.n	f5c2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
    f5aa:	2201      	movs	r2, #1
    f5ac:	8861      	ldrh	r1, [r4, #2]
    f5ae:	f000 f982 	bl	f8b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    f5b2:	2800      	cmp	r0, #0
    f5b4:	d106      	bne.n	f5c4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2a>
    f5b6:	8866      	ldrh	r6, [r4, #2]
    f5b8:	4628      	mov	r0, r5
    f5ba:	f7fe fee1 	bl	e380 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f5be:	b110      	cbz	r0, f5c6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2c>
    f5c0:	e002      	b.n	f5c8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2e>
    f5c2:	2042      	movs	r0, #66	; 0x42
    f5c4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f5c6:	2600      	movs	r6, #0
    f5c8:	4669      	mov	r1, sp
    f5ca:	4628      	mov	r0, r5
    f5cc:	f7fe ff25 	bl	e41a <sym_ECJZL6MVN4B4UZUQDXL2OTZMAL25BOLWE4F7TMI>
    f5d0:	6860      	ldr	r0, [r4, #4]
    f5d2:	9000      	str	r0, [sp, #0]
    f5d4:	f8ad 6004 	strh.w	r6, [sp, #4]
    f5d8:	4669      	mov	r1, sp
    f5da:	4628      	mov	r0, r5
    f5dc:	f7fe ff22 	bl	e424 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    f5e0:	4628      	mov	r0, r5
    f5e2:	f7fe ff16 	bl	e412 <sym_57N4MHGOTN6SE7ESLAUPVT5Z7CNKRRVGNPONZCI>
    f5e6:	2000      	movs	r0, #0
    f5e8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f5ea <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    f5ea:	b510      	push	{r4, lr}
    f5ec:	4604      	mov	r4, r0
    f5ee:	8880      	ldrh	r0, [r0, #4]
    f5f0:	b128      	cbz	r0, f5fe <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f5f2:	2801      	cmp	r0, #1
    f5f4:	d003      	beq.n	f5fe <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f5f6:	2802      	cmp	r0, #2
    f5f8:	d001      	beq.n	f5fe <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f5fa:	2012      	movs	r0, #18
    f5fc:	bd10      	pop	{r4, pc}
    f5fe:	78e0      	ldrb	r0, [r4, #3]
    f600:	f000 f9e5 	bl	f9ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e4>
    f604:	b148      	cbz	r0, f61a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f606:	78a0      	ldrb	r0, [r4, #2]
    f608:	f000 f9e1 	bl	f9ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e4>
    f60c:	b128      	cbz	r0, f61a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f60e:	4620      	mov	r0, r4
    f610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f614:	2101      	movs	r1, #1
    f616:	f000 b883 	b.w	f720 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    f61a:	2011      	movs	r0, #17
    f61c:	bd10      	pop	{r4, pc}

0000f61e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    f61e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f620:	460c      	mov	r4, r1
    f622:	4605      	mov	r5, r0
    f624:	8800      	ldrh	r0, [r0, #0]
    f626:	4669      	mov	r1, sp
    f628:	f7fe f8a0 	bl	d76c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f62c:	2800      	cmp	r0, #0
    f62e:	d106      	bne.n	f63e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    f630:	9801      	ldr	r0, [sp, #4]
    f632:	8829      	ldrh	r1, [r5, #0]
    f634:	8021      	strh	r1, [r4, #0]
    f636:	f8b0 0098 	ldrh.w	r0, [r0, #152]	; 0x98
    f63a:	8060      	strh	r0, [r4, #2]
    f63c:	2000      	movs	r0, #0
    f63e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f640 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    f640:	b510      	push	{r4, lr}
    f642:	4604      	mov	r4, r0
    f644:	4601      	mov	r1, r0
    f646:	2000      	movs	r0, #0
    f648:	f7f6 f80c 	bl	5664 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f64c:	b910      	cbnz	r0, f654 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    f64e:	2000      	movs	r0, #0
    f650:	6020      	str	r0, [r4, #0]
    f652:	80a0      	strh	r0, [r4, #4]
    f654:	2000      	movs	r0, #0
    f656:	bd10      	pop	{r4, pc}

0000f658 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    f658:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f65a:	8800      	ldrh	r0, [r0, #0]
    f65c:	4669      	mov	r1, sp
    f65e:	f7fe f885 	bl	d76c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f662:	b958      	cbnz	r0, f67c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    f664:	4668      	mov	r0, sp
    f666:	f000 fa57 	bl	fb18 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x32e>
    f66a:	b138      	cbz	r0, f67c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    f66c:	9c01      	ldr	r4, [sp, #4]
    f66e:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
    f672:	f504 70d6 	add.w	r0, r4, #428	; 0x1ac
    f676:	3468      	adds	r4, #104	; 0x68
    f678:	b929      	cbnz	r1, f686 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
    f67a:	e001      	b.n	f680 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    f67c:	2002      	movs	r0, #2
    f67e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    f684:	b109      	cbz	r1, f68a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    f686:	203a      	movs	r0, #58	; 0x3a
    f688:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f68a:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
    f68e:	f04f 0501 	mov.w	r5, #1
    f692:	0789      	lsls	r1, r1, #30
    f694:	d103      	bne.n	f69e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
    f696:	7005      	strb	r5, [r0, #0]
    f698:	4668      	mov	r0, sp
    f69a:	f7fe fc20 	bl	dede <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    f69e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
    f6a2:	2000      	movs	r0, #0
    f6a4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f6a6 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    f6a6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f6a8:	460c      	mov	r4, r1
    f6aa:	4605      	mov	r5, r0
    f6ac:	8800      	ldrh	r0, [r0, #0]
    f6ae:	4669      	mov	r1, sp
    f6b0:	f7fe f85c 	bl	d76c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f6b4:	b108      	cbz	r0, f6ba <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    f6b6:	2002      	movs	r0, #2
    f6b8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f6ba:	78a8      	ldrb	r0, [r5, #2]
    f6bc:	b130      	cbz	r0, f6cc <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    f6be:	f000 fa06 	bl	face <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e4>
    f6c2:	70a0      	strb	r0, [r4, #2]
    f6c4:	8828      	ldrh	r0, [r5, #0]
    f6c6:	8020      	strh	r0, [r4, #0]
    f6c8:	2000      	movs	r0, #0
    f6ca:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f6cc:	9801      	ldr	r0, [sp, #4]
    f6ce:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    f6d2:	e7f6      	b.n	f6c2 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000f6d4 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    f6d4:	b510      	push	{r4, lr}
    f6d6:	f7fb fb95 	bl	ae04 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    f6da:	2000      	movs	r0, #0
    f6dc:	bd10      	pop	{r4, pc}

0000f6de <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    f6de:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f6e2:	4604      	mov	r4, r0
    f6e4:	8840      	ldrh	r0, [r0, #2]
    f6e6:	460d      	mov	r5, r1
    f6e8:	b1b0      	cbz	r0, f718 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3a>
    f6ea:	8820      	ldrh	r0, [r4, #0]
    f6ec:	4669      	mov	r1, sp
    f6ee:	f7fe f83d 	bl	d76c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f6f2:	2800      	cmp	r0, #0
    f6f4:	d10e      	bne.n	f714 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>
    f6f6:	8820      	ldrh	r0, [r4, #0]
    f6f8:	8028      	strh	r0, [r5, #0]
    f6fa:	9e01      	ldr	r6, [sp, #4]
    f6fc:	1d35      	adds	r5, r6, #4
    f6fe:	3668      	adds	r6, #104	; 0x68
    f700:	682f      	ldr	r7, [r5, #0]
    f702:	8862      	ldrh	r2, [r4, #2]
    f704:	4639      	mov	r1, r7
    f706:	4630      	mov	r0, r6
    f708:	f7fe f970 	bl	d9ec <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    f70c:	6828      	ldr	r0, [r5, #0]
    f70e:	42b8      	cmp	r0, r7
    f710:	d1f6      	bne.n	f700 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x22>
    f712:	2000      	movs	r0, #0
    f714:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f718:	2012      	movs	r0, #18
    f71a:	e7fb      	b.n	f714 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>

0000f71c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    f71c:	f7fb b932 	b.w	a984 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000f720 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    f720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f724:	b086      	sub	sp, #24
    f726:	468a      	mov	sl, r1
    f728:	4606      	mov	r6, r0
    f72a:	8800      	ldrh	r0, [r0, #0]
    f72c:	a901      	add	r1, sp, #4
    f72e:	f7fe f81d 	bl	d76c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f732:	2800      	cmp	r0, #0
    f734:	d138      	bne.n	f7a8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    f736:	9802      	ldr	r0, [sp, #8]
    f738:	f04f 0800 	mov.w	r8, #0
    f73c:	4601      	mov	r1, r0
    f73e:	4689      	mov	r9, r1
    f740:	f890 11f4 	ldrb.w	r1, [r0, #500]	; 0x1f4
    f744:	f88d 1000 	strb.w	r1, [sp]
    f748:	9900      	ldr	r1, [sp, #0]
    f74a:	9100      	str	r1, [sp, #0]
    f74c:	f89d 5000 	ldrb.w	r5, [sp]
    f750:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    f754:	3068      	adds	r0, #104	; 0x68
    f756:	2921      	cmp	r1, #33	; 0x21
    f758:	d100      	bne.n	f75c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    f75a:	b13d      	cbz	r5, f76c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    f75c:	2400      	movs	r4, #0
    f75e:	304c      	adds	r0, #76	; 0x4c
    f760:	2108      	movs	r1, #8
    f762:	4607      	mov	r7, r0
    f764:	f7ff fb1e 	bl	eda4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f768:	b110      	cbz	r0, f770 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    f76a:	e007      	b.n	f77c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    f76c:	2401      	movs	r4, #1
    f76e:	e7f6      	b.n	f75e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    f770:	210b      	movs	r1, #11
    f772:	4638      	mov	r0, r7
    f774:	f7ff fb16 	bl	eda4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f778:	b900      	cbnz	r0, f77c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    f77a:	b1a4      	cbz	r4, f7a6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x86>
    f77c:	a804      	add	r0, sp, #16
    f77e:	9000      	str	r0, [sp, #0]
    f780:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f784:	ab03      	add	r3, sp, #12
    f786:	4632      	mov	r2, r6
    f788:	4649      	mov	r1, r9
    f78a:	f000 f980 	bl	fa8e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a4>
    f78e:	0007      	movs	r7, r0
    f790:	d10a      	bne.n	f7a8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    f792:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f796:	9c02      	ldr	r4, [sp, #8]
    f798:	b148      	cbz	r0, f7ae <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    f79a:	f504 74d3 	add.w	r4, r4, #422	; 0x1a6
    f79e:	2001      	movs	r0, #1
    f7a0:	7060      	strb	r0, [r4, #1]
    f7a2:	b94d      	cbnz	r5, f7b8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
    f7a4:	e006      	b.n	f7b4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
    f7a6:	201a      	movs	r0, #26
    f7a8:	b006      	add	sp, #24
    f7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f7ae:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    f7b2:	e7f4      	b.n	f79e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7e>
    f7b4:	7820      	ldrb	r0, [r4, #0]
    f7b6:	b108      	cbz	r0, f7bc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
    f7b8:	273a      	movs	r7, #58	; 0x3a
    f7ba:	e012      	b.n	f7e2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
    f7bc:	f884 a000 	strb.w	sl, [r4]
    f7c0:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f7c4:	70a0      	strb	r0, [r4, #2]
    f7c6:	f89d 1010 	ldrb.w	r1, [sp, #16]
    f7ca:	70e1      	strb	r1, [r4, #3]
    f7cc:	f88d 0000 	strb.w	r0, [sp]
    f7d0:	f88d 1001 	strb.w	r1, [sp, #1]
    f7d4:	88b0      	ldrh	r0, [r6, #4]
    f7d6:	f8ad 0002 	strh.w	r0, [sp, #2]
    f7da:	4669      	mov	r1, sp
    f7dc:	4648      	mov	r0, r9
    f7de:	f7fe f884 	bl	d8ea <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    f7e2:	f884 8001 	strb.w	r8, [r4, #1]
    f7e6:	4638      	mov	r0, r7
    f7e8:	e7de      	b.n	f7a8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>

0000f7ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    f7ea:	b510      	push	{r4, lr}
    f7ec:	2008      	movs	r0, #8
    f7ee:	f7fb fb91 	bl	af14 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    f7f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f7f6:	f7f9 b935 	b.w	8a64 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    f7fa:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f7fe:	4288      	cmp	r0, r1
    f800:	d303      	bcc.n	f80a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
    f802:	f640 0148 	movw	r1, #2120	; 0x848
    f806:	4288      	cmp	r0, r1
    f808:	d300      	bcc.n	f80c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
    f80a:	4608      	mov	r0, r1
    f80c:	4770      	bx	lr
    f80e:	07c1      	lsls	r1, r0, #31
    f810:	d001      	beq.n	f816 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
    f812:	2001      	movs	r0, #1
    f814:	4770      	bx	lr
    f816:	0780      	lsls	r0, r0, #30
    f818:	d501      	bpl.n	f81e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
    f81a:	2002      	movs	r0, #2
    f81c:	4770      	bx	lr
    f81e:	2000      	movs	r0, #0
    f820:	4770      	bx	lr
    f822:	b510      	push	{r4, lr}
    f824:	2801      	cmp	r0, #1
    f826:	d006      	beq.n	f836 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    f828:	2802      	cmp	r0, #2
    f82a:	d004      	beq.n	f836 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    f82c:	f240 2173 	movw	r1, #627	; 0x273
    f830:	2006      	movs	r0, #6
    f832:	f7f5 f855 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f836:	bd10      	pop	{r4, pc}
    f838:	b50e      	push	{r1, r2, r3, lr}
    f83a:	4669      	mov	r1, sp
    f83c:	2001      	movs	r0, #1
    f83e:	f7fd fe66 	bl	d50e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f842:	b150      	cbz	r0, f85a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    f844:	f240 1131 	movw	r1, #305	; 0x131
    f848:	2039      	movs	r0, #57	; 0x39
    f84a:	f7f5 f849 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f84e:	9802      	ldr	r0, [sp, #8]
    f850:	f7fe ffa1 	bl	e796 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f854:	b108      	cbz	r0, f85a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    f856:	2001      	movs	r0, #1
    f858:	bd0e      	pop	{r1, r2, r3, pc}
    f85a:	4668      	mov	r0, sp
    f85c:	f7f5 fa92 	bl	4d84 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f860:	2800      	cmp	r0, #0
    f862:	d0f4      	beq.n	f84e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
    f864:	2000      	movs	r0, #0
    f866:	bd0e      	pop	{r1, r2, r3, pc}
    f868:	b510      	push	{r4, lr}
    f86a:	f7ff ffe5 	bl	f838 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    f86e:	b158      	cbz	r0, f888 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    f870:	f000 f969 	bl	fb46 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    f874:	4604      	mov	r4, r0
    f876:	f7fe fd83 	bl	e380 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f87a:	b918      	cbnz	r0, f884 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
    f87c:	4620      	mov	r0, r4
    f87e:	f7fe fd75 	bl	e36c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f882:	b108      	cbz	r0, f888 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    f884:	2000      	movs	r0, #0
    f886:	bd10      	pop	{r4, pc}
    f888:	2001      	movs	r0, #1
    f88a:	bd10      	pop	{r4, pc}
    f88c:	b570      	push	{r4, r5, r6, lr}
    f88e:	460d      	mov	r5, r1
    f890:	4614      	mov	r4, r2
    f892:	4601      	mov	r1, r0
    f894:	8890      	ldrh	r0, [r2, #4]
    f896:	88e3      	ldrh	r3, [r4, #6]
    f898:	1942      	adds	r2, r0, r5
    f89a:	429a      	cmp	r2, r3
    f89c:	d901      	bls.n	f8a2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb8>
    f89e:	2007      	movs	r0, #7
    f8a0:	bd70      	pop	{r4, r5, r6, pc}
    f8a2:	6822      	ldr	r2, [r4, #0]
    f8a4:	4410      	add	r0, r2
    f8a6:	462a      	mov	r2, r5
    f8a8:	f7fc fe2f 	bl	c50a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f8ac:	88a0      	ldrh	r0, [r4, #4]
    f8ae:	4428      	add	r0, r5
    f8b0:	80a0      	strh	r0, [r4, #4]
    f8b2:	2000      	movs	r0, #0
    f8b4:	bd70      	pop	{r4, r5, r6, pc}
    f8b6:	b570      	push	{r4, r5, r6, lr}
    f8b8:	460c      	mov	r4, r1
    f8ba:	4605      	mov	r5, r0
    f8bc:	b112      	cbz	r2, f8c4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xda>
    f8be:	291f      	cmp	r1, #31
    f8c0:	d807      	bhi.n	f8d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe8>
    f8c2:	e011      	b.n	f8e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xfe>
    f8c4:	2cff      	cmp	r4, #255	; 0xff
    f8c6:	d804      	bhi.n	f8d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe8>
    f8c8:	f7fe fd58 	bl	e37c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f8cc:	b118      	cbz	r0, f8d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xec>
    f8ce:	2c1f      	cmp	r4, #31
    f8d0:	d901      	bls.n	f8d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xec>
    f8d2:	2012      	movs	r0, #18
    f8d4:	bd70      	pop	{r4, r5, r6, pc}
    f8d6:	4628      	mov	r0, r5
    f8d8:	f7fe fd59 	bl	e38e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    f8dc:	b130      	cbz	r0, f8ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x102>
    f8de:	4621      	mov	r1, r4
    f8e0:	4628      	mov	r0, r5
    f8e2:	f7fe fd1c 	bl	e31e <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    f8e6:	b118      	cbz	r0, f8f0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x106>
    f8e8:	2000      	movs	r0, #0
    f8ea:	bd70      	pop	{r4, r5, r6, pc}
    f8ec:	2042      	movs	r0, #66	; 0x42
    f8ee:	bd70      	pop	{r4, r5, r6, pc}
    f8f0:	2045      	movs	r0, #69	; 0x45
    f8f2:	bd70      	pop	{r4, r5, r6, pc}
    f8f4:	b510      	push	{r4, lr}
    f8f6:	4604      	mov	r4, r0
    f8f8:	7840      	ldrb	r0, [r0, #1]
    f8fa:	06c1      	lsls	r1, r0, #27
    f8fc:	d512      	bpl.n	f924 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13a>
    f8fe:	07c0      	lsls	r0, r0, #31
    f900:	d00b      	beq.n	f91a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x130>
    f902:	f7fb fabd 	bl	ae80 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    f906:	b168      	cbz	r0, f924 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13a>
    f908:	7860      	ldrb	r0, [r4, #1]
    f90a:	06c1      	lsls	r1, r0, #27
    f90c:	d405      	bmi.n	f91a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x130>
    f90e:	0700      	lsls	r0, r0, #28
    f910:	d503      	bpl.n	f91a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x130>
    f912:	7d20      	ldrb	r0, [r4, #20]
    f914:	2802      	cmp	r0, #2
    f916:	d105      	bne.n	f924 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13a>
    f918:	e006      	b.n	f928 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13e>
    f91a:	7d20      	ldrb	r0, [r4, #20]
    f91c:	2802      	cmp	r0, #2
    f91e:	d003      	beq.n	f928 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13e>
    f920:	7ea0      	ldrb	r0, [r4, #26]
    f922:	b108      	cbz	r0, f928 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13e>
    f924:	2011      	movs	r0, #17
    f926:	bd10      	pop	{r4, pc}
    f928:	2000      	movs	r0, #0
    f92a:	bd10      	pop	{r4, pc}
    f92c:	b538      	push	{r3, r4, r5, lr}
    f92e:	4604      	mov	r4, r0
    f930:	7800      	ldrb	r0, [r0, #0]
    f932:	28ef      	cmp	r0, #239	; 0xef
    f934:	d847      	bhi.n	f9c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f936:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    f93a:	f8ad 0000 	strh.w	r0, [sp]
    f93e:	9800      	ldr	r0, [sp, #0]
    f940:	f000 f956 	bl	fbf0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x406>
    f944:	b3c0      	cbz	r0, f9b8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ce>
    f946:	7861      	ldrb	r1, [r4, #1]
    f948:	0708      	lsls	r0, r1, #28
    f94a:	d40f      	bmi.n	f96c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x182>
    f94c:	f8d4 2002 	ldr.w	r2, [r4, #2]
    f950:	f8d4 0005 	ldr.w	r0, [r4, #5]
    f954:	0a13      	lsrs	r3, r2, #8
    f956:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
    f95a:	d834      	bhi.n	f9c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f95c:	2320      	movs	r3, #32
    f95e:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
    f962:	d830      	bhi.n	f9c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f964:	025a      	lsls	r2, r3, #9
    f966:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    f96a:	d32c      	bcc.n	f9c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f96c:	7a60      	ldrb	r0, [r4, #9]
    f96e:	b318      	cbz	r0, f9b8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ce>
    f970:	2807      	cmp	r0, #7
    f972:	d828      	bhi.n	f9c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f974:	7aa0      	ldrb	r0, [r4, #10]
    f976:	b128      	cbz	r0, f984 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    f978:	2801      	cmp	r0, #1
    f97a:	d003      	beq.n	f984 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    f97c:	2802      	cmp	r0, #2
    f97e:	d001      	beq.n	f984 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    f980:	2803      	cmp	r0, #3
    f982:	d120      	bne.n	f9c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f984:	074a      	lsls	r2, r1, #29
    f986:	d403      	bmi.n	f990 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1a6>
    f988:	2802      	cmp	r0, #2
    f98a:	d001      	beq.n	f990 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1a6>
    f98c:	2803      	cmp	r0, #3
    f98e:	d105      	bne.n	f99c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1b2>
    f990:	7ae0      	ldrb	r0, [r4, #11]
    f992:	b108      	cbz	r0, f998 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    f994:	2801      	cmp	r0, #1
    f996:	d116      	bne.n	f9c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f998:	0748      	lsls	r0, r1, #29
    f99a:	d407      	bmi.n	f9ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c2>
    f99c:	7ca0      	ldrb	r0, [r4, #18]
    f99e:	b128      	cbz	r0, f9ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c2>
    f9a0:	2801      	cmp	r0, #1
    f9a2:	d003      	beq.n	f9ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c2>
    f9a4:	2802      	cmp	r0, #2
    f9a6:	d001      	beq.n	f9ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c2>
    f9a8:	2803      	cmp	r0, #3
    f9aa:	d10c      	bne.n	f9c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f9ac:	06c8      	lsls	r0, r1, #27
    f9ae:	7d20      	ldrb	r0, [r4, #20]
    f9b0:	d503      	bpl.n	f9ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    f9b2:	2801      	cmp	r0, #1
    f9b4:	d107      	bne.n	f9c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f9b6:	e002      	b.n	f9be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d4>
    f9b8:	e005      	b.n	f9c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f9ba:	2802      	cmp	r0, #2
    f9bc:	d003      	beq.n	f9c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f9be:	7e20      	ldrb	r0, [r4, #24]
    f9c0:	b118      	cbz	r0, f9ca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e0>
    f9c2:	2801      	cmp	r0, #1
    f9c4:	d001      	beq.n	f9ca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e0>
    f9c6:	2012      	movs	r0, #18
    f9c8:	bd38      	pop	{r3, r4, r5, pc}
    f9ca:	2000      	movs	r0, #0
    f9cc:	bd38      	pop	{r3, r4, r5, pc}
    f9ce:	b510      	push	{r4, lr}
    f9d0:	0004      	movs	r4, r0
    f9d2:	d005      	beq.n	f9e0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    f9d4:	f7fb faae 	bl	af34 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f9d8:	4384      	bics	r4, r0
    f9da:	d001      	beq.n	f9e0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    f9dc:	2000      	movs	r0, #0
    f9de:	bd10      	pop	{r4, pc}
    f9e0:	2001      	movs	r0, #1
    f9e2:	bd10      	pop	{r4, pc}
    f9e4:	28fb      	cmp	r0, #251	; 0xfb
    f9e6:	d803      	bhi.n	f9f0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x206>
    f9e8:	f640 0048 	movw	r0, #2120	; 0x848
    f9ec:	4281      	cmp	r1, r0
    f9ee:	d901      	bls.n	f9f4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20a>
    f9f0:	2011      	movs	r0, #17
    f9f2:	4770      	bx	lr
    f9f4:	2000      	movs	r0, #0
    f9f6:	4770      	bx	lr
    f9f8:	381b      	subs	r0, #27
    f9fa:	28e1      	cmp	r0, #225	; 0xe1
    f9fc:	d206      	bcs.n	fa0c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x222>
    f9fe:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    fa02:	d303      	bcc.n	fa0c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x222>
    fa04:	f244 2090 	movw	r0, #17040	; 0x4290
    fa08:	4281      	cmp	r1, r0
    fa0a:	d901      	bls.n	fa10 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x226>
    fa0c:	2012      	movs	r0, #18
    fa0e:	4770      	bx	lr
    fa10:	2000      	movs	r0, #0
    fa12:	4770      	bx	lr
    fa14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fa18:	4606      	mov	r6, r0
    fa1a:	f8b0 704a 	ldrh.w	r7, [r0, #74]	; 0x4a
    fa1e:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
    fa22:	4615      	mov	r5, r2
    fa24:	3024      	adds	r0, #36	; 0x24
    fa26:	f7f8 f971 	bl	7d0c <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>
    fa2a:	4680      	mov	r8, r0
    fa2c:	2102      	movs	r1, #2
    fa2e:	f7fd ff2d 	bl	d88c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    fa32:	4287      	cmp	r7, r0
    fa34:	d200      	bcs.n	fa38 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24e>
    fa36:	4638      	mov	r0, r7
    fa38:	4607      	mov	r7, r0
    fa3a:	2102      	movs	r1, #2
    fa3c:	4640      	mov	r0, r8
    fa3e:	f7fd ff25 	bl	d88c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    fa42:	4284      	cmp	r4, r0
    fa44:	d200      	bcs.n	fa48 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x25e>
    fa46:	4620      	mov	r0, r4
    fa48:	8831      	ldrh	r1, [r6, #0]
    fa4a:	8029      	strh	r1, [r5, #0]
    fa4c:	2f1b      	cmp	r7, #27
    fa4e:	d913      	bls.n	fa78 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x28e>
    fa50:	2ffb      	cmp	r7, #251	; 0xfb
    fa52:	d300      	bcc.n	fa56 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x26c>
    fa54:	27fb      	movs	r7, #251	; 0xfb
    fa56:	806f      	strh	r7, [r5, #2]
    fa58:	281b      	cmp	r0, #27
    fa5a:	d90f      	bls.n	fa7c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x292>
    fa5c:	28fb      	cmp	r0, #251	; 0xfb
    fa5e:	d300      	bcc.n	fa62 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x278>
    fa60:	20fb      	movs	r0, #251	; 0xfb
    fa62:	80e8      	strh	r0, [r5, #6]
    fa64:	4640      	mov	r0, r8
    fa66:	f7ff fec8 	bl	f7fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    fa6a:	80a8      	strh	r0, [r5, #4]
    fa6c:	4640      	mov	r0, r8
    fa6e:	f7ff fec4 	bl	f7fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    fa72:	8128      	strh	r0, [r5, #8]
    fa74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa78:	271b      	movs	r7, #27
    fa7a:	e7ec      	b.n	fa56 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x26c>
    fa7c:	201b      	movs	r0, #27
    fa7e:	e7f0      	b.n	fa62 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x278>
    fa80:	b510      	push	{r4, lr}
    fa82:	f7ff fed9 	bl	f838 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    fa86:	2800      	cmp	r0, #0
    fa88:	d000      	beq.n	fa8c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a2>
    fa8a:	2001      	movs	r0, #1
    fa8c:	bd10      	pop	{r4, pc}
    fa8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fa92:	7890      	ldrb	r0, [r2, #2]
    fa94:	9e06      	ldr	r6, [sp, #24]
    fa96:	461d      	mov	r5, r3
    fa98:	4614      	mov	r4, r2
    fa9a:	b908      	cbnz	r0, faa0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b6>
    fa9c:	f7fb fa4a 	bl	af34 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    faa0:	78e4      	ldrb	r4, [r4, #3]
    faa2:	4607      	mov	r7, r0
    faa4:	b914      	cbnz	r4, faac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
    faa6:	f7fb fa45 	bl	af34 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    faaa:	4604      	mov	r4, r0
    faac:	b16f      	cbz	r7, faca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    faae:	b164      	cbz	r4, faca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    fab0:	4638      	mov	r0, r7
    fab2:	f7ff feac 	bl	f80e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    fab6:	4620      	mov	r0, r4
    fab8:	f7ff fea9 	bl	f80e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    fabc:	b12f      	cbz	r7, faca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    fabe:	b124      	cbz	r4, faca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    fac0:	702f      	strb	r7, [r5, #0]
    fac2:	7034      	strb	r4, [r6, #0]
    fac4:	2000      	movs	r0, #0
    fac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    faca:	2009      	movs	r0, #9
    facc:	e7fb      	b.n	fac6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2dc>
    face:	b510      	push	{r4, lr}
    fad0:	f7fc fcbf 	bl	c452 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    fad4:	b928      	cbnz	r0, fae2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f8>
    fad6:	f7fc fcf2 	bl	c4be <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    fada:	b910      	cbnz	r0, fae2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f8>
    fadc:	f7fc fcf9 	bl	c4d2 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    fae0:	b108      	cbz	r0, fae6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2fc>
    fae2:	2008      	movs	r0, #8
    fae4:	bd10      	pop	{r4, pc}
    fae6:	f7fc fc89 	bl	c3fc <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    faea:	b940      	cbnz	r0, fafe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x314>
    faec:	f7fc fc90 	bl	c410 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    faf0:	b928      	cbnz	r0, fafe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x314>
    faf2:	f7fc fca4 	bl	c43e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    faf6:	b910      	cbnz	r0, fafe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x314>
    faf8:	f7fc fcb5 	bl	c466 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    fafc:	b108      	cbz	r0, fb02 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x318>
    fafe:	2004      	movs	r0, #4
    fb00:	bd10      	pop	{r4, pc}
    fb02:	f240 5197 	movw	r1, #1431	; 0x597
    fb06:	2039      	movs	r0, #57	; 0x39
    fb08:	f7f4 feea 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb0c:	b510      	push	{r4, lr}
    fb0e:	f7fb fa0b 	bl	af28 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    fb12:	f3c0 1040 	ubfx	r0, r0, #5, #1
    fb16:	bd10      	pop	{r4, pc}
    fb18:	6840      	ldr	r0, [r0, #4]
    fb1a:	f000 b800 	b.w	fb1e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    fb1e:	b508      	push	{r3, lr}
    fb20:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    fb24:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    fb28:	f88d 0000 	strb.w	r0, [sp]
    fb2c:	9800      	ldr	r0, [sp, #0]
    fb2e:	9000      	str	r0, [sp, #0]
    fb30:	f89d 0000 	ldrb.w	r0, [sp]
    fb34:	1e40      	subs	r0, r0, #1
    fb36:	4208      	tst	r0, r1
    fb38:	d003      	beq.n	fb42 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x358>
    fb3a:	2904      	cmp	r1, #4
    fb3c:	d001      	beq.n	fb42 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x358>
    fb3e:	2001      	movs	r0, #1
    fb40:	bd08      	pop	{r3, pc}
    fb42:	2000      	movs	r0, #0
    fb44:	bd08      	pop	{r3, pc}
    fb46:	b510      	push	{r4, lr}
    fb48:	2101      	movs	r1, #1
    fb4a:	2000      	movs	r0, #0
    fb4c:	f7fd fcd5 	bl	d4fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fb50:	0004      	movs	r4, r0
    fb52:	d109      	bne.n	fb68 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x37e>
    fb54:	2200      	movs	r2, #0
    fb56:	2101      	movs	r1, #1
    fb58:	4610      	mov	r0, r2
    fb5a:	f7fd fcb2 	bl	d4c2 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    fb5e:	0004      	movs	r4, r0
    fb60:	d004      	beq.n	fb6c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x382>
    fb62:	2100      	movs	r1, #0
    fb64:	f7fe fbb0 	bl	e2c8 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    fb68:	4620      	mov	r0, r4
    fb6a:	bd10      	pop	{r4, pc}
    fb6c:	f240 2126 	movw	r1, #550	; 0x226
    fb70:	2039      	movs	r0, #57	; 0x39
    fb72:	f7f4 feb5 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb76:	b570      	push	{r4, r5, r6, lr}
    fb78:	4605      	mov	r5, r0
    fb7a:	f7fe fc08 	bl	e38e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    fb7e:	b170      	cbz	r0, fb9e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b4>
    fb80:	4628      	mov	r0, r5
    fb82:	f7fe fe08 	bl	e796 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    fb86:	2800      	cmp	r0, #0
    fb88:	d008      	beq.n	fb9c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b2>
    fb8a:	4628      	mov	r0, r5
    fb8c:	f7fe fe00 	bl	e790 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>
    fb90:	4604      	mov	r4, r0
    fb92:	4628      	mov	r0, r5
    fb94:	f7fe fdd6 	bl	e744 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    fb98:	b118      	cbz	r0, fba2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b8>
    fb9a:	200c      	movs	r0, #12
    fb9c:	bd70      	pop	{r4, r5, r6, pc}
    fb9e:	2042      	movs	r0, #66	; 0x42
    fba0:	bd70      	pop	{r4, r5, r6, pc}
    fba2:	b164      	cbz	r4, fbbe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d4>
    fba4:	8820      	ldrh	r0, [r4, #0]
    fba6:	f7fd fd21 	bl	d5ec <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    fbaa:	8820      	ldrh	r0, [r4, #0]
    fbac:	2100      	movs	r1, #0
    fbae:	f7f5 f939 	bl	4e24 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    fbb2:	b120      	cbz	r0, fbbe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d4>
    fbb4:	f241 417a 	movw	r1, #5242	; 0x147a
    fbb8:	2039      	movs	r0, #57	; 0x39
    fbba:	f7f4 fe91 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fbbe:	2000      	movs	r0, #0
    fbc0:	bd70      	pop	{r4, r5, r6, pc}
    fbc2:	b530      	push	{r4, r5, lr}
    fbc4:	f340 0400 	sbfx	r4, r0, #0, #1
    fbc8:	f340 0040 	sbfx	r0, r0, #1, #1
    fbcc:	1c40      	adds	r0, r0, #1
    fbce:	9d03      	ldr	r5, [sp, #12]
    fbd0:	1c64      	adds	r4, r4, #1
    fbd2:	d000      	beq.n	fbd6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ec>
    fbd4:	b119      	cbz	r1, fbde <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f4>
    fbd6:	b100      	cbz	r0, fbda <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f0>
    fbd8:	b10a      	cbz	r2, fbde <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f4>
    fbda:	b91c      	cbnz	r4, fbe4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3fa>
    fbdc:	e001      	b.n	fbe2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f8>
    fbde:	2011      	movs	r0, #17
    fbe0:	bd30      	pop	{r4, r5, pc}
    fbe2:	2100      	movs	r1, #0
    fbe4:	7019      	strb	r1, [r3, #0]
    fbe6:	b900      	cbnz	r0, fbea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x400>
    fbe8:	2200      	movs	r2, #0
    fbea:	702a      	strb	r2, [r5, #0]
    fbec:	2000      	movs	r0, #0
    fbee:	bd30      	pop	{r4, r5, pc}
    fbf0:	b2c0      	uxtb	r0, r0
    fbf2:	06c1      	lsls	r1, r0, #27
    fbf4:	d40c      	bmi.n	fc10 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x426>
    fbf6:	0681      	lsls	r1, r0, #26
    fbf8:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    fbfc:	d503      	bpl.n	fc06 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x41c>
    fbfe:	b9d1      	cbnz	r1, fc36 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    fc00:	0781      	lsls	r1, r0, #30
    fc02:	d418      	bmi.n	fc36 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    fc04:	e001      	b.n	fc0a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x420>
    fc06:	2900      	cmp	r1, #0
    fc08:	d1fa      	bne.n	fc00 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x416>
    fc0a:	0700      	lsls	r0, r0, #28
    fc0c:	d413      	bmi.n	fc36 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    fc0e:	e010      	b.n	fc32 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x448>
    fc10:	0641      	lsls	r1, r0, #25
    fc12:	d410      	bmi.n	fc36 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    fc14:	0681      	lsls	r1, r0, #26
    fc16:	d40e      	bmi.n	fc36 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    fc18:	07c1      	lsls	r1, r0, #31
    fc1a:	ea4f 7180 	mov.w	r1, r0, lsl #30
    fc1e:	d004      	beq.n	fc2a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x440>
    fc20:	2900      	cmp	r1, #0
    fc22:	db02      	blt.n	fc2a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x440>
    fc24:	0740      	lsls	r0, r0, #29
    fc26:	d404      	bmi.n	fc32 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x448>
    fc28:	e005      	b.n	fc36 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    fc2a:	0701      	lsls	r1, r0, #28
    fc2c:	d403      	bmi.n	fc36 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    fc2e:	0740      	lsls	r0, r0, #29
    fc30:	d401      	bmi.n	fc36 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    fc32:	2001      	movs	r0, #1
    fc34:	4770      	bx	lr
    fc36:	2000      	movs	r0, #0
    fc38:	4770      	bx	lr
    fc3a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fc3c:	4669      	mov	r1, sp
    fc3e:	2001      	movs	r0, #1
    fc40:	f7fd fc65 	bl	d50e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    fc44:	b178      	cbz	r0, fc66 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x47c>
    fc46:	f240 114f 	movw	r1, #335	; 0x14f
    fc4a:	2039      	movs	r0, #57	; 0x39
    fc4c:	f7f4 fe48 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc50:	9c02      	ldr	r4, [sp, #8]
    fc52:	4620      	mov	r0, r4
    fc54:	f7fe fd9f 	bl	e796 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    fc58:	b128      	cbz	r0, fc66 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x47c>
    fc5a:	4620      	mov	r0, r4
    fc5c:	f7fe fbff 	bl	e45e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    fc60:	b108      	cbz	r0, fc66 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x47c>
    fc62:	2001      	movs	r0, #1
    fc64:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fc66:	4668      	mov	r0, sp
    fc68:	f7f5 f88c 	bl	4d84 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    fc6c:	2800      	cmp	r0, #0
    fc6e:	d0ef      	beq.n	fc50 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
    fc70:	2000      	movs	r0, #0
    fc72:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fc74 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    fc74:	6802      	ldr	r2, [r0, #0]
    fc76:	b912      	cbnz	r2, fc7e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    fc78:	6001      	str	r1, [r0, #0]
    fc7a:	4770      	bx	lr
    fc7c:	4602      	mov	r2, r0
    fc7e:	6850      	ldr	r0, [r2, #4]
    fc80:	b108      	cbz	r0, fc86 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    fc82:	428a      	cmp	r2, r1
    fc84:	d1fa      	bne.n	fc7c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    fc86:	428a      	cmp	r2, r1
    fc88:	d0f7      	beq.n	fc7a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    fc8a:	6051      	str	r1, [r2, #4]
    fc8c:	4770      	bx	lr
    fc8e:	b510      	push	{r4, lr}
    fc90:	f7fe fd84 	bl	e79c <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    fc94:	b108      	cbz	r0, fc9a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    fc96:	21d8      	movs	r1, #216	; 0xd8
    fc98:	e003      	b.n	fca2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x2e>
    fc9a:	f7f7 f9ed 	bl	7078 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    fc9e:	b118      	cbz	r0, fca8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x34>
    fca0:	21dd      	movs	r1, #221	; 0xdd
    fca2:	2001      	movs	r0, #1
    fca4:	f7f4 fe1c 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fcac:	2001      	movs	r0, #1
    fcae:	f7f5 b801 	b.w	4cb4 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    fcb2:	b510      	push	{r4, lr}
    fcb4:	4604      	mov	r4, r0
    fcb6:	e002      	b.n	fcbe <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4a>
    fcb8:	6820      	ldr	r0, [r4, #0]
    fcba:	4780      	blx	r0
    fcbc:	6864      	ldr	r4, [r4, #4]
    fcbe:	2c00      	cmp	r4, #0
    fcc0:	d1fa      	bne.n	fcb8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x44>
    fcc2:	bd10      	pop	{r4, pc}
    fcc4:	b510      	push	{r4, lr}
    fcc6:	2000      	movs	r0, #0
    fcc8:	f7f4 fff4 	bl	4cb4 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    fccc:	f7f5 fa28 	bl	5120 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    fcd0:	f7f5 fcaa 	bl	5628 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    fcd4:	f7f5 fe88 	bl	59e8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    fcd8:	2800      	cmp	r0, #0
    fcda:	d003      	beq.n	fce4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x70>
    fcdc:	21b5      	movs	r1, #181	; 0xb5
    fcde:	2001      	movs	r0, #1
    fce0:	f7f4 fdfe 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fce4:	bd10      	pop	{r4, pc}
    fce6:	b510      	push	{r4, lr}
    fce8:	f7ff ffd1 	bl	fc8e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    fcec:	f7ff f81a 	bl	ed24 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
    fcf0:	2800      	cmp	r0, #0
    fcf2:	d003      	beq.n	fcfc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x88>
    fcf4:	21f6      	movs	r1, #246	; 0xf6
    fcf6:	2001      	movs	r0, #1
    fcf8:	f7f4 fdf2 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fcfc:	bd10      	pop	{r4, pc}

0000fcfe <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    fcfe:	b510      	push	{r4, lr}
    fd00:	f7fb fc94 	bl	b62c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    fd04:	f000 f850 	bl	fda8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    fd08:	f7fb f968 	bl	afdc <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    fd0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fd10:	f7fb ba5e 	b.w	b1d0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000fd14 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    fd14:	b510      	push	{r4, lr}
    fd16:	24c8      	movs	r4, #200	; 0xc8
    fd18:	1e64      	subs	r4, r4, #1
    fd1a:	b2e4      	uxtb	r4, r4
    fd1c:	f7fb f97c 	bl	b018 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    fd20:	2802      	cmp	r0, #2
    fd22:	d003      	beq.n	fd2c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    fd24:	2801      	cmp	r0, #1
    fd26:	d000      	beq.n	fd2a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    fd28:	2000      	movs	r0, #0
    fd2a:	bd10      	pop	{r4, pc}
    fd2c:	2c00      	cmp	r4, #0
    fd2e:	d1f3      	bne.n	fd18 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    fd30:	218f      	movs	r1, #143	; 0x8f
    fd32:	203b      	movs	r0, #59	; 0x3b
    fd34:	f7f4 fdd4 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fd38 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    fd38:	b510      	push	{r4, lr}
    fd3a:	f7f4 fcb1 	bl	46a0 <mpsl_fem_lna_configuration_clear>
    fd3e:	2800      	cmp	r0, #0
    fd40:	d005      	beq.n	fd4e <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    fd42:	1c40      	adds	r0, r0, #1
    fd44:	d003      	beq.n	fd4e <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    fd46:	2150      	movs	r1, #80	; 0x50
    fd48:	2040      	movs	r0, #64	; 0x40
    fd4a:	f7f4 fdc9 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fd4e:	bd10      	pop	{r4, pc}

0000fd50 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    fd50:	b510      	push	{r4, lr}
    fd52:	f7f4 fcb1 	bl	46b8 <mpsl_fem_pa_configuration_clear>
    fd56:	2800      	cmp	r0, #0
    fd58:	d005      	beq.n	fd66 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    fd5a:	1c40      	adds	r0, r0, #1
    fd5c:	d003      	beq.n	fd66 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    fd5e:	2149      	movs	r1, #73	; 0x49
    fd60:	2040      	movs	r0, #64	; 0x40
    fd62:	f7f4 fdbd 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fd66:	bd10      	pop	{r4, pc}

0000fd68 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
    fd68:	b510      	push	{r4, lr}
    fd6a:	f7f4 fc93 	bl	4694 <mpsl_fem_disable>
    fd6e:	2800      	cmp	r0, #0
    fd70:	d005      	beq.n	fd7e <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    fd72:	1c40      	adds	r0, r0, #1
    fd74:	d003      	beq.n	fd7e <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    fd76:	2157      	movs	r1, #87	; 0x57
    fd78:	2040      	movs	r0, #64	; 0x40
    fd7a:	f7f4 fdb1 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fd7e:	bd10      	pop	{r4, pc}

0000fd80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    fd80:	b510      	push	{r4, lr}
    fd82:	2100      	movs	r1, #0
    fd84:	4608      	mov	r0, r1
    fd86:	f7f4 fc91 	bl	46ac <mpsl_fem_lna_configuration_set>
    fd8a:	b108      	cbz	r0, fd90 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    fd8c:	2000      	movs	r0, #0
    fd8e:	bd10      	pop	{r4, pc}
    fd90:	2001      	movs	r0, #1
    fd92:	bd10      	pop	{r4, pc}

0000fd94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    fd94:	b508      	push	{r3, lr}
    fd96:	4668      	mov	r0, sp
    fd98:	f7f4 fc9a 	bl	46d0 <mpsl_fem_pa_is_configured>
    fd9c:	f89d 0000 	ldrb.w	r0, [sp]
    fda0:	2800      	cmp	r0, #0
    fda2:	d000      	beq.n	fda6 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    fda4:	2001      	movs	r0, #1
    fda6:	bd08      	pop	{r3, pc}

0000fda8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    fda8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    fdac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    fdb0:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    fdb4:	f3bf 8f4f 	dsb	sy
    fdb8:	f3bf 8f6f 	isb	sy
    fdbc:	f7fb ba8a 	b.w	b2d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    fdc0:	2800      	cmp	r0, #0
    fdc2:	db09      	blt.n	fdd8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    fdc4:	f000 021f 	and.w	r2, r0, #31
    fdc8:	2101      	movs	r1, #1
    fdca:	4091      	lsls	r1, r2
    fdcc:	0940      	lsrs	r0, r0, #5
    fdce:	0080      	lsls	r0, r0, #2
    fdd0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fdd4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    fdd8:	4770      	bx	lr
    fdda:	2800      	cmp	r0, #0
    fddc:	db0d      	blt.n	fdfa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    fdde:	f000 021f 	and.w	r2, r0, #31
    fde2:	2101      	movs	r1, #1
    fde4:	4091      	lsls	r1, r2
    fde6:	0940      	lsrs	r0, r0, #5
    fde8:	0080      	lsls	r0, r0, #2
    fdea:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fdee:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    fdf2:	f3bf 8f4f 	dsb	sy
    fdf6:	f3bf 8f6f 	isb	sy
    fdfa:	4770      	bx	lr

0000fdfc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    fdfc:	b510      	push	{r4, lr}
    fdfe:	2801      	cmp	r0, #1
    fe00:	d006      	beq.n	fe10 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    fe02:	2802      	cmp	r0, #2
    fe04:	d006      	beq.n	fe14 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    fe06:	f640 31c5 	movw	r1, #3013	; 0xbc5
    fe0a:	203e      	movs	r0, #62	; 0x3e
    fe0c:	f7f4 fd68 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe10:	2028      	movs	r0, #40	; 0x28
    fe12:	bd10      	pop	{r4, pc}
    fe14:	2018      	movs	r0, #24
    fe16:	bd10      	pop	{r4, pc}

0000fe18 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    fe18:	b510      	push	{r4, lr}
    fe1a:	2801      	cmp	r0, #1
    fe1c:	d006      	beq.n	fe2c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    fe1e:	2802      	cmp	r0, #2
    fe20:	d007      	beq.n	fe32 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    fe22:	f640 31d9 	movw	r1, #3033	; 0xbd9
    fe26:	203e      	movs	r0, #62	; 0x3e
    fe28:	f7f4 fd5a 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe2c:	f641 6014 	movw	r0, #7700	; 0x1e14
    fe30:	bd10      	pop	{r4, pc}
    fe32:	f241 1030 	movw	r0, #4400	; 0x1130
    fe36:	bd10      	pop	{r4, pc}

0000fe38 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    fe38:	f7fc b998 	b.w	c16c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e8>
    fe3c:	b510      	push	{r4, lr}
    fe3e:	460a      	mov	r2, r1
    fe40:	b130      	cbz	r0, fe50 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    fe42:	2801      	cmp	r0, #1
    fe44:	d00b      	beq.n	fe5e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    fe46:	f240 614f 	movw	r1, #1615	; 0x64f
    fe4a:	203e      	movs	r0, #62	; 0x3e
    fe4c:	f7f4 fd48 	bl	48e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fe54:	f102 0128 	add.w	r1, r2, #40	; 0x28
    fe58:	4610      	mov	r0, r2
    fe5a:	f7fb b931 	b.w	b0c0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    fe5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fe62:	f102 0129 	add.w	r1, r2, #41	; 0x29
    fe66:	4610      	mov	r0, r2
    fe68:	f7fb b914 	b.w	b094 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>

0000fe6c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    fe6c:	b570      	push	{r4, r5, r6, lr}
    fe6e:	4605      	mov	r5, r0
    fe70:	4614      	mov	r4, r2
    fe72:	4608      	mov	r0, r1
    fe74:	f7ff ffd0 	bl	fe18 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fe78:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    fe7c:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    fe80:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    fe84:	4620      	mov	r0, r4
    fe86:	f7ff ffc7 	bl	fe18 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fe8a:	4428      	add	r0, r5
    fe8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fe90:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    fe94:	fbb0 f5f1 	udiv	r5, r0, r1
    fe98:	4620      	mov	r0, r4
    fe9a:	f7ff ffaf 	bl	fdfc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    fe9e:	4428      	add	r0, r5
    fea0:	1d40      	adds	r0, r0, #5
    fea2:	bd70      	pop	{r4, r5, r6, pc}

0000fea4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    fea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fea8:	4607      	mov	r7, r0
    feaa:	461d      	mov	r5, r3
    feac:	460e      	mov	r6, r1
    feae:	4614      	mov	r4, r2
    feb0:	4610      	mov	r0, r2
    feb2:	f7ff ffb1 	bl	fe18 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    feb6:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    feba:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    febe:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    fec2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    fec6:	2e02      	cmp	r6, #2
    fec8:	d00e      	beq.n	fee8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    feca:	f240 52dc 	movw	r2, #1500	; 0x5dc
    fece:	4411      	add	r1, r2
    fed0:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
    fed4:	fbb1 f6f0 	udiv	r6, r1, r0
    fed8:	4620      	mov	r0, r4
    feda:	f7ff ff8f 	bl	fdfc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    fede:	4430      	add	r0, r6
    fee0:	4428      	add	r0, r5
    fee2:	1d40      	adds	r0, r0, #5
    fee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fee8:	4602      	mov	r2, r0
    feea:	e7f0      	b.n	fece <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0000feec <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    feec:	b510      	push	{r4, lr}
    feee:	4604      	mov	r4, r0
    fef0:	4608      	mov	r0, r1
    fef2:	f7ff ff91 	bl	fe18 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fef6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fefa:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    fefe:	fbb0 f0f1 	udiv	r0, r0, r1
    ff02:	1a20      	subs	r0, r4, r0
    ff04:	1e80      	subs	r0, r0, #2
    ff06:	bd10      	pop	{r4, pc}

0000ff08 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    ff08:	b510      	push	{r4, lr}
    ff0a:	4604      	mov	r4, r0
    ff0c:	4608      	mov	r0, r1
    ff0e:	f7ff ff83 	bl	fe18 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ff12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ff16:	fbb0 f0f1 	udiv	r0, r0, r1
    ff1a:	1a20      	subs	r0, r4, r0
    ff1c:	bd10      	pop	{r4, pc}

0000ff1e <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    ff1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ff22:	2902      	cmp	r1, #2
    ff24:	d008      	beq.n	ff38 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
    ff26:	f240 51dc 	movw	r1, #1500	; 0x5dc
    ff2a:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    ff2e:	fbb1 f1f2 	udiv	r1, r1, r2
    ff32:	4408      	add	r0, r1
    ff34:	1e80      	subs	r0, r0, #2
    ff36:	4770      	bx	lr
    ff38:	4611      	mov	r1, r2
    ff3a:	e7f6      	b.n	ff2a <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0000ff3c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    ff3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ff40:	2902      	cmp	r1, #2
    ff42:	d007      	beq.n	ff54 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
    ff44:	f240 51dc 	movw	r1, #1500	; 0x5dc
    ff48:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    ff4c:	fbb1 f1f2 	udiv	r1, r1, r2
    ff50:	4408      	add	r0, r1
    ff52:	4770      	bx	lr
    ff54:	4611      	mov	r1, r2
    ff56:	e7f7      	b.n	ff48 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
    ff58:	1702080c 	.word	0x1702080c
    ff5c:	0201010d 	.word	0x0201010d
    ff60:	01010909 	.word	0x01010909
    ff64:	18090206 	.word	0x18090206
    ff68:	01010318 	.word	0x01010318
    ff6c:	03030909 	.word	0x03030909
    ff70:	00000005 	.word	0x00000005

0000ff74 <bmp_config_notification>:
extern void initBLE();
extern void sendData(uint8_t, float* ,uint8_t);

static void bmp_config_notification(const struct bt_gatt_attr *attr,uint8_t value)
{
	printk("config set");
    ff74:	4801      	ldr	r0, [pc, #4]	; (ff7c <bmp_config_notification+0x8>)
    ff76:	f00c bf3e 	b.w	1cdf6 <printk>
    ff7a:	bf00      	nop
    ff7c:	0002185b 	.word	0x0002185b

0000ff80 <disconnected>:
	}
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
	printk("Disconnected (reason 0x%02x)\n", reason);
    ff80:	4801      	ldr	r0, [pc, #4]	; (ff88 <disconnected+0x8>)
    ff82:	f00c bf38 	b.w	1cdf6 <printk>
    ff86:	bf00      	nop
    ff88:	00021866 	.word	0x00021866

0000ff8c <connected>:
	if (err) {
    ff8c:	b111      	cbz	r1, ff94 <connected+0x8>
		printk("Connection failed (err 0x%02x)\n", err);
    ff8e:	4803      	ldr	r0, [pc, #12]	; (ff9c <connected+0x10>)
    ff90:	f00c bf31 	b.w	1cdf6 <printk>
		printk("Connected\n");
    ff94:	4802      	ldr	r0, [pc, #8]	; (ffa0 <connected+0x14>)
    ff96:	f00c bf2e 	b.w	1cdf6 <printk>
    ff9a:	bf00      	nop
    ff9c:	00021884 	.word	0x00021884
    ffa0:	000218a4 	.word	0x000218a4

0000ffa4 <dataWritten>:
{
    ffa4:	b570      	push	{r4, r5, r6, lr}
    ffa6:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    ffaa:	460d      	mov	r5, r1
	if (offset + len > sizeof(config_data)) {
    ffac:	461c      	mov	r4, r3
    ffae:	18c3      	adds	r3, r0, r3
    ffb0:	2b14      	cmp	r3, #20
	uint8_t *value = attr->user_data;
    ffb2:	68ee      	ldr	r6, [r5, #12]
{
    ffb4:	4611      	mov	r1, r2
	if (offset + len > sizeof(config_data)) {
    ffb6:	dc0b      	bgt.n	ffd0 <dataWritten+0x2c>
	memcpy(value + offset, buf, len);
    ffb8:	4622      	mov	r2, r4
    ffba:	4430      	add	r0, r6
    ffbc:	f00d fe49 	bl	1dc52 <memcpy>
	if(attr->uuid == &bmp_cnfg.uuid){
    ffc0:	682a      	ldr	r2, [r5, #0]
    ffc2:	4b05      	ldr	r3, [pc, #20]	; (ffd8 <dataWritten+0x34>)
    ffc4:	429a      	cmp	r2, r3
    ffc6:	d101      	bne.n	ffcc <dataWritten+0x28>
		submitConfigBMP();
    ffc8:	f000 fcce 	bl	10968 <submitConfigBMP>
}
    ffcc:	4620      	mov	r0, r4
    ffce:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    ffd0:	f06f 0406 	mvn.w	r4, #6
    ffd4:	e7fa      	b.n	ffcc <dataWritten+0x28>
    ffd6:	bf00      	nop
    ffd8:	20000761 	.word	0x20000761

0000ffdc <read_u16>:
{
    ffdc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    ffe0:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    ffe4:	460c      	mov	r4, r1
    ffe6:	4606      	mov	r6, r0
    printk("len: %i\n",len);
    ffe8:	4619      	mov	r1, r3
    ffea:	480b      	ldr	r0, [pc, #44]	; (10018 <read_u16+0x3c>)
{
    ffec:	461d      	mov	r5, r3
    ffee:	4617      	mov	r7, r2
    printk("len: %i\n",len);
    fff0:	f00c ff01 	bl	1cdf6 <printk>
	printk("offset: %i\n",offset);
    fff4:	4641      	mov	r1, r8
    fff6:	4809      	ldr	r0, [pc, #36]	; (1001c <read_u16+0x40>)
    fff8:	f00c fefd 	bl	1cdf6 <printk>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value, 12);
    fffc:	230c      	movs	r3, #12
    fffe:	9302      	str	r3, [sp, #8]
   10000:	68e3      	ldr	r3, [r4, #12]
   10002:	463a      	mov	r2, r7
   10004:	e9cd 8300 	strd	r8, r3, [sp]
   10008:	4621      	mov	r1, r4
   1000a:	462b      	mov	r3, r5
   1000c:	4630      	mov	r0, r6
   1000e:	f00f fc02 	bl	1f816 <bt_gatt_attr_read>
}
   10012:	b004      	add	sp, #16
   10014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10018:	000218af 	.word	0x000218af
   1001c:	000218b8 	.word	0x000218b8

00010020 <initBLE>:
		battery_level = 100U;
	}

	bt_bas_set_battery_level(battery_level);
}
extern void initBLE(){
   10020:	b530      	push	{r4, r5, lr}
     bt_enable(NULL);
   10022:	2000      	movs	r0, #0
extern void initBLE(){
   10024:	b089      	sub	sp, #36	; 0x24
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
   10026:	4d10      	ldr	r5, [pc, #64]	; (10068 <initBLE+0x48>)
     bt_enable(NULL);
   10028:	f003 fd7c 	bl	13b24 <bt_enable>
	printk("Bluetooth initialized\n");
   1002c:	480f      	ldr	r0, [pc, #60]	; (1006c <initBLE+0x4c>)
   1002e:	f00c fee2 	bl	1cdf6 <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
   10032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   10034:	ac03      	add	r4, sp, #12
   10036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10038:	682b      	ldr	r3, [r5, #0]
   1003a:	6023      	str	r3, [r4, #0]
   1003c:	2300      	movs	r3, #0
   1003e:	490c      	ldr	r1, [pc, #48]	; (10070 <initBLE+0x50>)
   10040:	9300      	str	r3, [sp, #0]
   10042:	2203      	movs	r2, #3
   10044:	a803      	add	r0, sp, #12
   10046:	f004 f969 	bl	1431c <bt_le_adv_start>
	if (err) {
   1004a:	4601      	mov	r1, r0
   1004c:	b138      	cbz	r0, 1005e <initBLE+0x3e>
		printk("Advertising failed to start (err %d)\n", err);
   1004e:	4809      	ldr	r0, [pc, #36]	; (10074 <initBLE+0x54>)
   10050:	f00c fed1 	bl	1cdf6 <printk>
     bt_ready();
     bt_conn_cb_register(&conn_callbacks);
   10054:	4808      	ldr	r0, [pc, #32]	; (10078 <initBLE+0x58>)
   10056:	f004 fc91 	bl	1497c <bt_conn_cb_register>
};
   1005a:	b009      	add	sp, #36	; 0x24
   1005c:	bd30      	pop	{r4, r5, pc}
	printk("Advertising successfully started\n");
   1005e:	4807      	ldr	r0, [pc, #28]	; (1007c <initBLE+0x5c>)
   10060:	f00c fec9 	bl	1cdf6 <printk>
   10064:	e7f6      	b.n	10054 <initBLE+0x34>
   10066:	bf00      	nop
   10068:	00020e80 	.word	0x00020e80
   1006c:	000218c4 	.word	0x000218c4
   10070:	00020f48 	.word	0x00020f48
   10074:	000218db 	.word	0x000218db
   10078:	200004a8 	.word	0x200004a8
   1007c:	00021901 	.word	0x00021901

00010080 <sendData>:


extern void sendData(uint8_t ID, float* DATA,uint8_t LEN){
	bt_gatt_notify(NULL, &phyphoxGATT.attrs[ID], DATA, LEN);
   10080:	4b03      	ldr	r3, [pc, #12]	; (10090 <sendData+0x10>)
   10082:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   10086:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1008a:	f00c ba56 	b.w	1c53a <bt_gatt_notify.constprop.0>
   1008e:	bf00      	nop
   10090:	00020f60 	.word	0x00020f60

00010094 <printMLX>:
	k_work_submit(&work_mlx);

}
extern void printMLX(){
    float x,y,z;
    mlx_readMeasurement(&mlxData.x,&mlxData.y,&mlxData.z,mlxdev);
   10094:	4a03      	ldr	r2, [pc, #12]	; (100a4 <printMLX+0x10>)
   10096:	4b04      	ldr	r3, [pc, #16]	; (100a8 <printMLX+0x14>)
   10098:	1f11      	subs	r1, r2, #4
   1009a:	681b      	ldr	r3, [r3, #0]
   1009c:	f1a2 0008 	sub.w	r0, r2, #8
   100a0:	f000 bcf4 	b.w	10a8c <mlx_readMeasurement>
   100a4:	20001cc0 	.word	0x20001cc0
   100a8:	20001cd4 	.word	0x20001cd4

000100ac <mlx_int1_triggered>:
	k_work_submit(&work_mlx);
   100ac:	4801      	ldr	r0, [pc, #4]	; (100b4 <mlx_int1_triggered+0x8>)
   100ae:	f008 bfb7 	b.w	19020 <k_work_submit>
   100b2:	bf00      	nop
   100b4:	20001cd8 	.word	0x20001cd8

000100b8 <initMLX>:
extern void initMLX(struct device *i2c_dev){
   100b8:	b510      	push	{r4, lr}
   100ba:	4604      	mov	r4, r0
    	mlx_init(i2c_dev);
   100bc:	f00c fe35 	bl	1cd2a <mlx_init>
        mlxdev = i2c_dev;
   100c0:	4b01      	ldr	r3, [pc, #4]	; (100c8 <initMLX+0x10>)
   100c2:	601c      	str	r4, [r3, #0]
}
   100c4:	bd10      	pop	{r4, pc}
   100c6:	bf00      	nop
   100c8:	20001cd4 	.word	0x20001cd4

000100cc <init_Interrupt_MLX>:
	if(PRINT_SENSOR_DATA){
    	//printk("MLX: x: %f y: %f z: %f \n",mlxData.x,mlxData.y,mlxData.z);
	}
}

int8_t init_Interrupt_MLX(){
   100cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int8_t returnValue;

	k_work_init(&work_mlx, printMLX);
   100ce:	4923      	ldr	r1, [pc, #140]	; (1015c <init_Interrupt_MLX+0x90>)
   100d0:	4823      	ldr	r0, [pc, #140]	; (10160 <init_Interrupt_MLX+0x94>)
   100d2:	f010 f9c4 	bl	2045e <k_work_init>
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   100d6:	4d23      	ldr	r5, [pc, #140]	; (10164 <init_Interrupt_MLX+0x98>)
   100d8:	4628      	mov	r0, r5
   100da:	f00f ff8e 	bl	1fffa <z_device_ready>
   100de:	462f      	mov	r7, r5
   100e0:	b1a0      	cbz	r0, 1010c <init_Interrupt_MLX+0x40>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   100e2:	692a      	ldr	r2, [r5, #16]
	const struct gpio_driver_api *api =
   100e4:	68ae      	ldr	r6, [r5, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   100e6:	6813      	ldr	r3, [r2, #0]
   100e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   100ec:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
   100ee:	210f      	movs	r1, #15
   100f0:	6833      	ldr	r3, [r6, #0]
   100f2:	f44f 7280 	mov.w	r2, #256	; 0x100
   100f6:	4628      	mov	r0, r5
   100f8:	4798      	blx	r3
		printk("Error: button device %s is not ready\n",
		       mlx_int1.port->name);
		return 1;
	}

	returnValue = gpio_pin_configure_dt(&mlx_int1, GPIO_INPUT);
   100fa:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   100fc:	b16c      	cbz	r4, 1011a <init_Interrupt_MLX+0x4e>
		printk("Error %d: failed to configure %s pin %d\n",
   100fe:	682a      	ldr	r2, [r5, #0]
   10100:	4819      	ldr	r0, [pc, #100]	; (10168 <init_Interrupt_MLX+0x9c>)
   10102:	230f      	movs	r3, #15
   10104:	4621      	mov	r1, r4
		return returnValue;
	}

	returnValue = gpio_pin_interrupt_configure_dt(&mlx_int1,GPIO_INT_EDGE_RISING);
	if (returnValue != 0) {
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   10106:	f00c fe76 	bl	1cdf6 <printk>
			returnValue, mlx_int1.port->name, mlx_int1.pin);
		return returnValue;
   1010a:	e004      	b.n	10116 <init_Interrupt_MLX+0x4a>
		printk("Error: button device %s is not ready\n",
   1010c:	6829      	ldr	r1, [r5, #0]
   1010e:	4817      	ldr	r0, [pc, #92]	; (1016c <init_Interrupt_MLX+0xa0>)
   10110:	f00c fe71 	bl	1cdf6 <printk>
		return 1;
   10114:	2401      	movs	r4, #1
	gpio_init_callback(&mlx_int1_cb_data, mlx_int1_triggered, BIT(mlx_int1.pin));
	gpio_add_callback(mlx_int1.port, &mlx_int1_cb_data);
	printk("Set up mlx_int1 at %s pin %d\n", mlx_int1.port->name, mlx_int1.pin);

    return returnValue;
}
   10116:	4620      	mov	r0, r4
   10118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1011a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1011e:	69b4      	ldr	r4, [r6, #24]
   10120:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
   10124:	210f      	movs	r1, #15
   10126:	4628      	mov	r0, r5
   10128:	47a0      	blx	r4
	returnValue = gpio_pin_interrupt_configure_dt(&mlx_int1,GPIO_INT_EDGE_RISING);
   1012a:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   1012c:	b124      	cbz	r4, 10138 <init_Interrupt_MLX+0x6c>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   1012e:	682a      	ldr	r2, [r5, #0]
   10130:	480f      	ldr	r0, [pc, #60]	; (10170 <init_Interrupt_MLX+0xa4>)
   10132:	230f      	movs	r3, #15
   10134:	4621      	mov	r1, r4
   10136:	e7e6      	b.n	10106 <init_Interrupt_MLX+0x3a>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   10138:	490e      	ldr	r1, [pc, #56]	; (10174 <init_Interrupt_MLX+0xa8>)
   1013a:	4b0f      	ldr	r3, [pc, #60]	; (10178 <init_Interrupt_MLX+0xac>)
   1013c:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   1013e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   10142:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   10144:	69f3      	ldr	r3, [r6, #28]
   10146:	b113      	cbz	r3, 1014e <init_Interrupt_MLX+0x82>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   10148:	2201      	movs	r2, #1
   1014a:	4628      	mov	r0, r5
   1014c:	4798      	blx	r3
	printk("Set up mlx_int1 at %s pin %d\n", mlx_int1.port->name, mlx_int1.pin);
   1014e:	6839      	ldr	r1, [r7, #0]
   10150:	480a      	ldr	r0, [pc, #40]	; (1017c <init_Interrupt_MLX+0xb0>)
   10152:	220f      	movs	r2, #15
   10154:	f00c fe4f 	bl	1cdf6 <printk>
    return returnValue;
   10158:	e7dd      	b.n	10116 <init_Interrupt_MLX+0x4a>
   1015a:	bf00      	nop
   1015c:	00010095 	.word	0x00010095
   10160:	20001cd8 	.word	0x20001cd8
   10164:	00020bf8 	.word	0x00020bf8
   10168:	00021949 	.word	0x00021949
   1016c:	00021923 	.word	0x00021923
   10170:	00021972 	.word	0x00021972
   10174:	20001cc8 	.word	0x20001cc8
   10178:	000100ad 	.word	0x000100ad
   1017c:	000219a8 	.word	0x000219a8

00010180 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_dev *dev)
{
   10180:	b570      	push	{r4, r5, r6, lr}
   10182:	4605      	mov	r5, r0
   10184:	b092      	sub	sp, #72	; 0x48
     * be considered in the sum. */
    uint32_t meas_t = 234;
    uint32_t meas_t_p = 0;

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
   10186:	4921      	ldr	r1, [pc, #132]	; (1020c <validate_osr_and_odr_settings+0x8c>)
   10188:	2248      	movs	r2, #72	; 0x48
   1018a:	4668      	mov	r0, sp
   1018c:	f00d fd61 	bl	1dc52 <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (dev->settings.press_en)
   10190:	f895 40b1 	ldrb.w	r4, [r5, #177]	; 0xb1
   10194:	b16c      	cbz	r4, 101b2 <validate_osr_and_odr_settings+0x32>
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_dev *dev)
{
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = dev->settings.odr_filter;
   10196:	f895 40b3 	ldrb.w	r4, [r5, #179]	; 0xb3
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
    float pow_output = 1;
   1019a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000

    while (power != 0)
   1019e:	bb44      	cbnz	r4, 101f2 <validate_osr_and_odr_settings+0x72>
    press_meas_t = (BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
   101a0:	491b      	ldr	r1, [pc, #108]	; (10210 <validate_osr_and_odr_settings+0x90>)
   101a2:	f7f0 fcd9 	bl	b58 <__aeabi_fmul>
   101a6:	491b      	ldr	r1, [pc, #108]	; (10214 <validate_osr_and_odr_settings+0x94>)
   101a8:	f7f0 fbce 	bl	948 <__addsf3>
   101ac:	f7f0 fe24 	bl	df8 <__aeabi_f2uiz>
   101b0:	4604      	mov	r4, r0
    if (dev->settings.temp_en)
   101b2:	f895 30b2 	ldrb.w	r3, [r5, #178]	; 0xb2
   101b6:	b16b      	cbz	r3, 101d4 <validate_osr_and_odr_settings+0x54>
    struct bmp3_odr_filter_settings odr_filter = dev->settings.odr_filter;
   101b8:	f895 60b4 	ldrb.w	r6, [r5, #180]	; 0xb4
    float pow_output = 1;
   101bc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    while (power != 0)
   101c0:	b9ee      	cbnz	r6, 101fe <validate_osr_and_odr_settings+0x7e>
    temp_meas_t = (BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
   101c2:	4913      	ldr	r1, [pc, #76]	; (10210 <validate_osr_and_odr_settings+0x90>)
   101c4:	f7f0 fcc8 	bl	b58 <__aeabi_fmul>
   101c8:	4913      	ldr	r1, [pc, #76]	; (10218 <validate_osr_and_odr_settings+0x98>)
   101ca:	f7f0 fbbd 	bl	948 <__addsf3>
   101ce:	f7f0 fe13 	bl	df8 <__aeabi_f2uiz>
        meas_t_p += calculate_temp_meas_time(dev);
   101d2:	4404      	add	r4, r0
    rslt = verify_meas_time_and_odr_duration(meas_t, odr[dev->settings.odr_filter.odr]);
   101d4:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
   101d8:	aa12      	add	r2, sp, #72	; 0x48
   101da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    meas_t += meas_t_p;
   101de:	34ea      	adds	r4, #234	; 0xea
    if (meas_t < odr_duration)
   101e0:	f853 3c48 	ldr.w	r3, [r3, #-72]
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
   101e4:	42a3      	cmp	r3, r4
}
   101e6:	bf94      	ite	ls
   101e8:	f06f 0002 	mvnls.w	r0, #2
   101ec:	2000      	movhi	r0, #0
   101ee:	b012      	add	sp, #72	; 0x48
   101f0:	bd70      	pop	{r4, r5, r6, pc}
    {
        pow_output = (float) base * pow_output;
   101f2:	4601      	mov	r1, r0
        power--;
   101f4:	3c01      	subs	r4, #1
        pow_output = (float) base * pow_output;
   101f6:	f7f0 fba7 	bl	948 <__addsf3>
        power--;
   101fa:	b2e4      	uxtb	r4, r4
   101fc:	e7cf      	b.n	1019e <validate_osr_and_odr_settings+0x1e>
        pow_output = (float) base * pow_output;
   101fe:	4601      	mov	r1, r0
        power--;
   10200:	3e01      	subs	r6, #1
        pow_output = (float) base * pow_output;
   10202:	f7f0 fba1 	bl	948 <__addsf3>
        power--;
   10206:	b2f6      	uxtb	r6, r6
   10208:	e7da      	b.n	101c0 <validate_osr_and_odr_settings+0x40>
   1020a:	bf00      	nop
   1020c:	00020e94 	.word	0x00020e94
   10210:	44fa0000 	.word	0x44fa0000
   10214:	43c40000 	.word	0x43c40000
   10218:	439c8000 	.word	0x439c8000

0001021c <bmp3_set_sensor_settings>:
{
   1021c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1021e:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
   10220:	4608      	mov	r0, r1
{
   10222:	460d      	mov	r5, r1
    rslt = null_ptr_check(dev);
   10224:	f00c f99f 	bl	1c566 <null_ptr_check>
    if (rslt == BMP3_OK)
   10228:	2800      	cmp	r0, #0
   1022a:	f040 811d 	bne.w	10468 <bmp3_set_sensor_settings+0x24c>
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
    uint8_t settings_changed = FALSE;

    if (sub_settings & desired_settings)
   1022e:	f014 0f06 	tst.w	r4, #6
   10232:	d029      	beq.n	10288 <bmp3_set_sensor_settings+0x6c>
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   10234:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   10236:	460b      	mov	r3, r1
   10238:	2201      	movs	r2, #1
   1023a:	a901      	add	r1, sp, #4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1023c:	f88d 0000 	strb.w	r0, [sp]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   10240:	f00c fa8d 	bl	1c75e <bmp3_get_regs>
    if (rslt == BMP3_OK)
   10244:	bb00      	cbnz	r0, 10288 <bmp3_set_sensor_settings+0x6c>
        if (desired_settings & BMP3_SEL_PRESS_EN)
   10246:	07a7      	lsls	r7, r4, #30
   10248:	d50a      	bpl.n	10260 <bmp3_set_sensor_settings+0x44>
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, dev->settings.press_en);
   1024a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1024e:	f895 20b1 	ldrb.w	r2, [r5, #177]	; 0xb1
   10252:	f023 0301 	bic.w	r3, r3, #1
   10256:	f002 0201 	and.w	r2, r2, #1
   1025a:	4313      	orrs	r3, r2
   1025c:	f88d 3004 	strb.w	r3, [sp, #4]
        if (desired_settings & BMP3_SEL_TEMP_EN)
   10260:	0766      	lsls	r6, r4, #29
   10262:	d50b      	bpl.n	1027c <bmp3_set_sensor_settings+0x60>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, dev->settings.temp_en);
   10264:	f895 30b2 	ldrb.w	r3, [r5, #178]	; 0xb2
   10268:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1026c:	005b      	lsls	r3, r3, #1
   1026e:	f003 0302 	and.w	r3, r3, #2
   10272:	f022 0202 	bic.w	r2, r2, #2
   10276:	4313      	orrs	r3, r2
   10278:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
   1027c:	462b      	mov	r3, r5
   1027e:	2201      	movs	r2, #1
   10280:	a901      	add	r1, sp, #4
   10282:	4668      	mov	r0, sp
   10284:	f00c faab 	bl	1c7de <bmp3_set_regs>
    if (sub_settings & desired_settings)
   10288:	f014 0ff0 	tst.w	r4, #240	; 0xf0
   1028c:	d071      	beq.n	10372 <bmp3_set_sensor_settings+0x156>
        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings) && (!rslt))
   1028e:	2800      	cmp	r0, #0
   10290:	d16f      	bne.n	10372 <bmp3_set_sensor_settings+0x156>
    uint8_t reg_addr[3] = { 0 };
   10292:	4b77      	ldr	r3, [pc, #476]	; (10470 <bmp3_set_sensor_settings+0x254>)
   10294:	f88d 0002 	strb.w	r0, [sp, #2]
   10298:	881b      	ldrh	r3, [r3, #0]
   1029a:	f8ad 3000 	strh.w	r3, [sp]
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
   1029e:	2204      	movs	r2, #4
   102a0:	462b      	mov	r3, r5
   102a2:	eb0d 0102 	add.w	r1, sp, r2
   102a6:	201c      	movs	r0, #28
   102a8:	f00c fa59 	bl	1c75e <bmp3_get_regs>
    if (rslt == BMP3_OK)
   102ac:	2800      	cmp	r0, #0
   102ae:	d160      	bne.n	10372 <bmp3_set_sensor_settings+0x156>
    if (sub_settings & desired_settings)
   102b0:	f014 0f30 	tst.w	r4, #48	; 0x30
   102b4:	f000 80da 	beq.w	1046c <bmp3_set_sensor_settings+0x250>
        if (settings & BMP3_SEL_PRESS_OS)
   102b8:	06e0      	lsls	r0, r4, #27
    struct bmp3_odr_filter_settings osr_settings = dev->settings.odr_filter;
   102ba:	f895 20b4 	ldrb.w	r2, [r5, #180]	; 0xb4
        if (settings & BMP3_SEL_PRESS_OS)
   102be:	d50a      	bpl.n	102d6 <bmp3_set_sensor_settings+0xba>
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
   102c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   102c4:	f895 10b3 	ldrb.w	r1, [r5, #179]	; 0xb3
   102c8:	f023 0307 	bic.w	r3, r3, #7
   102cc:	f001 0107 	and.w	r1, r1, #7
   102d0:	430b      	orrs	r3, r1
   102d2:	f88d 3004 	strb.w	r3, [sp, #4]
        if (settings & BMP3_SEL_TEMP_OS)
   102d6:	06a1      	lsls	r1, r4, #26
   102d8:	d509      	bpl.n	102ee <bmp3_set_sensor_settings+0xd2>
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
   102da:	f89d 3004 	ldrb.w	r3, [sp, #4]
   102de:	00d2      	lsls	r2, r2, #3
   102e0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
   102e4:	f002 0238 	and.w	r2, r2, #56	; 0x38
   102e8:	4313      	orrs	r3, r2
   102ea:	f88d 3004 	strb.w	r3, [sp, #4]
        addr[*len] = BMP3_REG_OSR;
   102ee:	231c      	movs	r3, #28
   102f0:	f88d 3000 	strb.w	r3, [sp]
}
   102f4:	2601      	movs	r6, #1
    if (sub_settings & desired_settings)
   102f6:	0622      	lsls	r2, r4, #24
   102f8:	d518      	bpl.n	1032c <bmp3_set_sensor_settings+0x110>
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
   102fa:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
   102fe:	2b11      	cmp	r3, #17
        osr_settings->odr = BMP3_ODR_0_001_HZ;
   10300:	bf84      	itt	hi
   10302:	2311      	movhi	r3, #17
   10304:	f885 30b6 	strbhi.w	r3, [r5, #182]	; 0xb6
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
   10308:	ab02      	add	r3, sp, #8
   1030a:	1999      	adds	r1, r3, r6
   1030c:	f895 20b6 	ldrb.w	r2, [r5, #182]	; 0xb6
   10310:	f89d 3005 	ldrb.w	r3, [sp, #5]
   10314:	f002 021f 	and.w	r2, r2, #31
   10318:	f023 031f 	bic.w	r3, r3, #31
   1031c:	4313      	orrs	r3, r2
   1031e:	f801 3c04 	strb.w	r3, [r1, #-4]
    (*len)++;
   10322:	3601      	adds	r6, #1
    addr[*len] = BMP3_REG_ODR;
   10324:	231d      	movs	r3, #29
   10326:	f801 3c08 	strb.w	r3, [r1, #-8]
    (*len)++;
   1032a:	b2f6      	uxtb	r6, r6
    if (sub_settings & desired_settings)
   1032c:	0663      	lsls	r3, r4, #25
   1032e:	d512      	bpl.n	10356 <bmp3_set_sensor_settings+0x13a>
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
   10330:	ab02      	add	r3, sp, #8
   10332:	1999      	adds	r1, r3, r6
   10334:	f895 30b5 	ldrb.w	r3, [r5, #181]	; 0xb5
   10338:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1033c:	005b      	lsls	r3, r3, #1
   1033e:	f003 030e 	and.w	r3, r3, #14
   10342:	f022 020e 	bic.w	r2, r2, #14
   10346:	4313      	orrs	r3, r2
   10348:	f801 3c04 	strb.w	r3, [r1, #-4]
    (*len)++;
   1034c:	3601      	adds	r6, #1
    addr[*len] = BMP3_REG_CONFIG;
   1034e:	231f      	movs	r3, #31
   10350:	f801 3c08 	strb.w	r3, [r1, #-8]
    (*len)++;
   10354:	b2f6      	uxtb	r6, r6
        if (dev->settings.op_mode == BMP3_MODE_NORMAL)
   10356:	f895 30b0 	ldrb.w	r3, [r5, #176]	; 0xb0
   1035a:	2b03      	cmp	r3, #3
   1035c:	d103      	bne.n	10366 <bmp3_set_sensor_settings+0x14a>
            rslt = validate_osr_and_odr_settings(dev);
   1035e:	4628      	mov	r0, r5
   10360:	f7ff ff0e 	bl	10180 <validate_osr_and_odr_settings>
        if (rslt == BMP3_OK)
   10364:	b928      	cbnz	r0, 10372 <bmp3_set_sensor_settings+0x156>
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
   10366:	462b      	mov	r3, r5
   10368:	4632      	mov	r2, r6
   1036a:	a901      	add	r1, sp, #4
   1036c:	4668      	mov	r0, sp
   1036e:	f00c fa36 	bl	1c7de <bmp3_set_regs>
    if (sub_settings & desired_settings)
   10372:	f414 6fe1 	tst.w	r4, #1800	; 0x708
   10376:	d048      	beq.n	1040a <bmp3_set_sensor_settings+0x1ee>
        if (are_settings_changed(BMP3_INT_CTRL, desired_settings) && (!rslt))
   10378:	2800      	cmp	r0, #0
   1037a:	d146      	bne.n	1040a <bmp3_set_sensor_settings+0x1ee>
    reg_addr = BMP3_REG_INT_CTRL;
   1037c:	2019      	movs	r0, #25
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   1037e:	462b      	mov	r3, r5
   10380:	2201      	movs	r2, #1
   10382:	4669      	mov	r1, sp
    reg_addr = BMP3_REG_INT_CTRL;
   10384:	f88d 0004 	strb.w	r0, [sp, #4]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   10388:	f00c f9e9 	bl	1c75e <bmp3_get_regs>
    if (rslt == BMP3_OK)
   1038c:	2800      	cmp	r0, #0
   1038e:	d13c      	bne.n	1040a <bmp3_set_sensor_settings+0x1ee>
        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
   10390:	05e7      	lsls	r7, r4, #23
        int_settings = dev->settings.int_settings;
   10392:	f895 00b8 	ldrb.w	r0, [r5, #184]	; 0xb8
   10396:	f895 10b9 	ldrb.w	r1, [r5, #185]	; 0xb9
   1039a:	f895 20ba 	ldrb.w	r2, [r5, #186]	; 0xba
        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
   1039e:	d50a      	bpl.n	103b6 <bmp3_set_sensor_settings+0x19a>
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
   103a0:	f89d 3000 	ldrb.w	r3, [sp]
   103a4:	f895 60b7 	ldrb.w	r6, [r5, #183]	; 0xb7
   103a8:	f023 0301 	bic.w	r3, r3, #1
   103ac:	f006 0601 	and.w	r6, r6, #1
   103b0:	4333      	orrs	r3, r6
   103b2:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_LEVEL)
   103b6:	05a6      	lsls	r6, r4, #22
   103b8:	d509      	bpl.n	103ce <bmp3_set_sensor_settings+0x1b2>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
   103ba:	f89d 3000 	ldrb.w	r3, [sp]
   103be:	0040      	lsls	r0, r0, #1
   103c0:	f023 0302 	bic.w	r3, r3, #2
   103c4:	f000 0002 	and.w	r0, r0, #2
   103c8:	4303      	orrs	r3, r0
   103ca:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_LATCH)
   103ce:	0560      	lsls	r0, r4, #21
   103d0:	d509      	bpl.n	103e6 <bmp3_set_sensor_settings+0x1ca>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
   103d2:	f89d 3000 	ldrb.w	r3, [sp]
   103d6:	0089      	lsls	r1, r1, #2
   103d8:	f023 0304 	bic.w	r3, r3, #4
   103dc:	f001 0104 	and.w	r1, r1, #4
   103e0:	430b      	orrs	r3, r1
   103e2:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_DRDY_EN)
   103e6:	0721      	lsls	r1, r4, #28
   103e8:	d509      	bpl.n	103fe <bmp3_set_sensor_settings+0x1e2>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
   103ea:	f89d 3000 	ldrb.w	r3, [sp]
   103ee:	0192      	lsls	r2, r2, #6
   103f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   103f4:	f002 0240 	and.w	r2, r2, #64	; 0x40
   103f8:	4313      	orrs	r3, r2
   103fa:	f88d 3000 	strb.w	r3, [sp]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
   103fe:	462b      	mov	r3, r5
   10400:	2201      	movs	r2, #1
   10402:	4669      	mov	r1, sp
   10404:	a801      	add	r0, sp, #4
   10406:	f00c f9ea 	bl	1c7de <bmp3_set_regs>
    if (sub_settings & desired_settings)
   1040a:	f414 5fc0 	tst.w	r4, #6144	; 0x1800
   1040e:	d02b      	beq.n	10468 <bmp3_set_sensor_settings+0x24c>
        if (are_settings_changed(BMP3_ADV_SETT, desired_settings) && (!rslt))
   10410:	bb50      	cbnz	r0, 10468 <bmp3_set_sensor_settings+0x24c>
    reg_addr = BMP3_REG_IF_CONF;
   10412:	201a      	movs	r0, #26
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   10414:	462b      	mov	r3, r5
   10416:	2201      	movs	r2, #1
   10418:	a901      	add	r1, sp, #4
    struct bmp3_adv_settings adv_settings = dev->settings.adv_settings;
   1041a:	f895 70bb 	ldrb.w	r7, [r5, #187]	; 0xbb
   1041e:	f895 60bc 	ldrb.w	r6, [r5, #188]	; 0xbc
    reg_addr = BMP3_REG_IF_CONF;
   10422:	f88d 0000 	strb.w	r0, [sp]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   10426:	f00c f99a 	bl	1c75e <bmp3_get_regs>
    if (rslt == BMP3_OK)
   1042a:	b9e8      	cbnz	r0, 10468 <bmp3_set_sensor_settings+0x24c>
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
   1042c:	0522      	lsls	r2, r4, #20
   1042e:	d509      	bpl.n	10444 <bmp3_set_sensor_settings+0x228>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
   10430:	f89d 3004 	ldrb.w	r3, [sp, #4]
   10434:	007f      	lsls	r7, r7, #1
   10436:	f023 0302 	bic.w	r3, r3, #2
   1043a:	f007 0702 	and.w	r7, r7, #2
   1043e:	433b      	orrs	r3, r7
   10440:	f88d 3004 	strb.w	r3, [sp, #4]
        if (desired_settings & BMP3_SEL_I2C_WDT)
   10444:	04e3      	lsls	r3, r4, #19
   10446:	d509      	bpl.n	1045c <bmp3_set_sensor_settings+0x240>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
   10448:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1044c:	00b6      	lsls	r6, r6, #2
   1044e:	f023 0304 	bic.w	r3, r3, #4
   10452:	f006 0604 	and.w	r6, r6, #4
   10456:	4333      	orrs	r3, r6
   10458:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
   1045c:	462b      	mov	r3, r5
   1045e:	2201      	movs	r2, #1
   10460:	a901      	add	r1, sp, #4
   10462:	4668      	mov	r0, sp
   10464:	f00c f9bb 	bl	1c7de <bmp3_set_regs>
}
   10468:	b003      	add	sp, #12
   1046a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t len = 0;
   1046c:	4606      	mov	r6, r0
   1046e:	e742      	b.n	102f6 <bmp3_set_sensor_settings+0xda>
   10470:	00020edc 	.word	0x00020edc

00010474 <bmp3_init>:
{
   10474:	b530      	push	{r4, r5, lr}
   10476:	b089      	sub	sp, #36	; 0x24
    uint8_t chip_id = 0;
   10478:	2300      	movs	r3, #0
{
   1047a:	4604      	mov	r4, r0
    uint8_t chip_id = 0;
   1047c:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_ptr_check(dev);
   10480:	f00c f871 	bl	1c566 <null_ptr_check>
    if (rslt == BMP3_OK)
   10484:	4605      	mov	r5, r0
   10486:	2800      	cmp	r0, #0
   10488:	f040 80f6 	bne.w	10678 <bmp3_init+0x204>
        if (dev->intf != BMP3_I2C_INTF)
   1048c:	7a23      	ldrb	r3, [r4, #8]
   1048e:	3b01      	subs	r3, #1
   10490:	bf18      	it	ne
   10492:	2301      	movne	r3, #1
   10494:	72a3      	strb	r3, [r4, #10]
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
   10496:	2201      	movs	r2, #1
   10498:	4623      	mov	r3, r4
   1049a:	f10d 0107 	add.w	r1, sp, #7
   1049e:	f00c f95e 	bl	1c75e <bmp3_get_regs>
        if (rslt == BMP3_OK)
   104a2:	4605      	mov	r5, r0
   104a4:	2800      	cmp	r0, #0
   104a6:	f040 80e7 	bne.w	10678 <bmp3_init+0x204>
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
   104aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   104ae:	2b50      	cmp	r3, #80	; 0x50
   104b0:	d002      	beq.n	104b8 <bmp3_init+0x44>
   104b2:	2b60      	cmp	r3, #96	; 0x60
   104b4:	f040 80e3 	bne.w	1067e <bmp3_init+0x20a>
                dev->chip_id = chip_id;
   104b8:	7023      	strb	r3, [r4, #0]
                rslt = bmp3_soft_reset(dev);
   104ba:	4620      	mov	r0, r4
   104bc:	f00c f9fd 	bl	1c8ba <bmp3_soft_reset>
                if (rslt == BMP3_OK)
   104c0:	4605      	mov	r5, r0
   104c2:	2800      	cmp	r0, #0
   104c4:	f040 80d8 	bne.w	10678 <bmp3_init+0x204>
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
   104c8:	4601      	mov	r1, r0
   104ca:	9002      	str	r0, [sp, #8]
   104cc:	2211      	movs	r2, #17
   104ce:	a803      	add	r0, sp, #12
   104d0:	f00d fbca 	bl	1dc68 <memset>
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
   104d4:	2215      	movs	r2, #21
   104d6:	4623      	mov	r3, r4
   104d8:	a902      	add	r1, sp, #8
   104da:	2031      	movs	r0, #49	; 0x31
   104dc:	f00c f93f 	bl	1c75e <bmp3_get_regs>
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
   104e0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
   104e4:	4605      	mov	r5, r0
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
   104e6:	f89d 0009 	ldrb.w	r0, [sp, #9]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
   104ea:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   104ee:	f7ef ff49 	bl	384 <__aeabi_ui2d>
   104f2:	4b64      	ldr	r3, [pc, #400]	; (10684 <bmp3_init+0x210>)
   104f4:	2200      	movs	r2, #0
   104f6:	f7ef ffbf 	bl	478 <__aeabi_dmul>
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
   104fa:	f89d 300a 	ldrb.w	r3, [sp, #10]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
   104fe:	9a02      	ldr	r2, [sp, #8]
   10500:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
   10504:	e9c4 0106 	strd	r0, r1, [r4, #24]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
   10508:	f89d 000b 	ldrb.w	r0, [sp, #11]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
   1050c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   10510:	f7ef ff38 	bl	384 <__aeabi_ui2d>
   10514:	4b5c      	ldr	r3, [pc, #368]	; (10688 <bmp3_init+0x214>)
   10516:	2200      	movs	r2, #0
   10518:	f7ef ffae 	bl	478 <__aeabi_dmul>
   1051c:	e9c4 0108 	strd	r0, r1, [r4, #32]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
   10520:	f99d 000c 	ldrsb.w	r0, [sp, #12]
   10524:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
   10528:	f7ef ff3c 	bl	3a4 <__aeabi_i2d>
   1052c:	2200      	movs	r2, #0
   1052e:	4b57      	ldr	r3, [pc, #348]	; (1068c <bmp3_init+0x218>)
   10530:	f7ef ffa2 	bl	478 <__aeabi_dmul>
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
   10534:	f89d 300e 	ldrb.w	r3, [sp, #14]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
   10538:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
   1053c:	f89d 000d 	ldrb.w	r0, [sp, #13]
   10540:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   10544:	b200      	sxth	r0, r0
   10546:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
   1054a:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
   1054e:	f7ef ff29 	bl	3a4 <__aeabi_i2d>
   10552:	2200      	movs	r2, #0
   10554:	4b4e      	ldr	r3, [pc, #312]	; (10690 <bmp3_init+0x21c>)
   10556:	f7ef ff8f 	bl	478 <__aeabi_dmul>
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
   1055a:	f89d 3010 	ldrb.w	r3, [sp, #16]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
   1055e:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
   10562:	f89d 000f 	ldrb.w	r0, [sp, #15]
   10566:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   1056a:	b200      	sxth	r0, r0
   1056c:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
   10570:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
   10574:	f7ef ff16 	bl	3a4 <__aeabi_i2d>
   10578:	4b46      	ldr	r3, [pc, #280]	; (10694 <bmp3_init+0x220>)
   1057a:	2200      	movs	r2, #0
   1057c:	f7ef ff7c 	bl	478 <__aeabi_dmul>
   10580:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
   10584:	f99d 0011 	ldrsb.w	r0, [sp, #17]
   10588:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
   1058c:	f7ef ff0a 	bl	3a4 <__aeabi_i2d>
   10590:	4b41      	ldr	r3, [pc, #260]	; (10698 <bmp3_init+0x224>)
   10592:	2200      	movs	r2, #0
   10594:	f7ef ff70 	bl	478 <__aeabi_dmul>
   10598:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
   1059c:	f99d 0012 	ldrsb.w	r0, [sp, #18]
   105a0:	f884 009b 	strb.w	r0, [r4, #155]	; 0x9b
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
   105a4:	f7ef fefe 	bl	3a4 <__aeabi_i2d>
   105a8:	2200      	movs	r2, #0
   105aa:	4b3c      	ldr	r3, [pc, #240]	; (1069c <bmp3_init+0x228>)
   105ac:	f7ef ff64 	bl	478 <__aeabi_dmul>
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
   105b0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
   105b4:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
   105b8:	f89d 0013 	ldrb.w	r0, [sp, #19]
   105bc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   105c0:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
   105c4:	f7ef fede 	bl	384 <__aeabi_ui2d>
   105c8:	2200      	movs	r2, #0
   105ca:	4b35      	ldr	r3, [pc, #212]	; (106a0 <bmp3_init+0x22c>)
   105cc:	f7ef ff54 	bl	478 <__aeabi_dmul>
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
   105d0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
   105d4:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
   105d8:	f89d 0015 	ldrb.w	r0, [sp, #21]
   105dc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   105e0:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
   105e4:	f7ef fece 	bl	384 <__aeabi_ui2d>
   105e8:	4b2e      	ldr	r3, [pc, #184]	; (106a4 <bmp3_init+0x230>)
   105ea:	2200      	movs	r2, #0
   105ec:	f7ef ff44 	bl	478 <__aeabi_dmul>
   105f0:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
   105f4:	f99d 0017 	ldrsb.w	r0, [sp, #23]
   105f8:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
   105fc:	f7ef fed2 	bl	3a4 <__aeabi_i2d>
   10600:	4b29      	ldr	r3, [pc, #164]	; (106a8 <bmp3_init+0x234>)
   10602:	2200      	movs	r2, #0
   10604:	f7ef ff38 	bl	478 <__aeabi_dmul>
   10608:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
   1060c:	f99d 0018 	ldrsb.w	r0, [sp, #24]
   10610:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
   10614:	f7ef fec6 	bl	3a4 <__aeabi_i2d>
   10618:	2200      	movs	r2, #0
   1061a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
   1061e:	f7ef ff2b 	bl	478 <__aeabi_dmul>
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
   10622:	f89d 301a 	ldrb.w	r3, [sp, #26]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
   10626:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
   1062a:	f89d 0019 	ldrb.w	r0, [sp, #25]
   1062e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   10632:	b200      	sxth	r0, r0
   10634:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
   10638:	f7ef feb4 	bl	3a4 <__aeabi_i2d>
   1063c:	4b13      	ldr	r3, [pc, #76]	; (1068c <bmp3_init+0x218>)
   1063e:	2200      	movs	r2, #0
   10640:	f7ef ff1a 	bl	478 <__aeabi_dmul>
   10644:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
   10648:	f99d 001b 	ldrsb.w	r0, [sp, #27]
   1064c:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
   10650:	f7ef fea8 	bl	3a4 <__aeabi_i2d>
   10654:	4b0d      	ldr	r3, [pc, #52]	; (1068c <bmp3_init+0x218>)
   10656:	2200      	movs	r2, #0
   10658:	f7ef ff0e 	bl	478 <__aeabi_dmul>
   1065c:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
   10660:	f99d 001c 	ldrsb.w	r0, [sp, #28]
   10664:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
   10668:	f7ef fe9c 	bl	3a4 <__aeabi_i2d>
   1066c:	4b0f      	ldr	r3, [pc, #60]	; (106ac <bmp3_init+0x238>)
   1066e:	2200      	movs	r2, #0
   10670:	f7ef ff02 	bl	478 <__aeabi_dmul>
   10674:	e9c4 0120 	strd	r0, r1, [r4, #128]	; 0x80
}
   10678:	4628      	mov	r0, r5
   1067a:	b009      	add	sp, #36	; 0x24
   1067c:	bd30      	pop	{r4, r5, pc}
                rslt = BMP3_E_DEV_NOT_FOUND;
   1067e:	f06f 0501 	mvn.w	r5, #1
   10682:	e7f9      	b.n	10678 <bmp3_init+0x204>
   10684:	40700000 	.word	0x40700000
   10688:	3e100000 	.word	0x3e100000
   1068c:	3cf00000 	.word	0x3cf00000
   10690:	3eb00000 	.word	0x3eb00000
   10694:	3e200000 	.word	0x3e200000
   10698:	3df00000 	.word	0x3df00000
   1069c:	3da00000 	.word	0x3da00000
   106a0:	40200000 	.word	0x40200000
   106a4:	3f900000 	.word	0x3f900000
   106a8:	3f700000 	.word	0x3f700000
   106ac:	3be00000 	.word	0x3be00000

000106b0 <sendDataBMP>:

static void app_us_delay(uint32_t period, void *intf_ptr) {
	return k_busy_wait(period);
}

extern void sendDataBMP(void){
   106b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    bmpResult = bmp3_get_sensor_data(sensor_comp, &myData, &bmp388_dev);
   106b2:	4b20      	ldr	r3, [pc, #128]	; (10734 <sendDataBMP+0x84>)
   106b4:	4c20      	ldr	r4, [pc, #128]	; (10738 <sendDataBMP+0x88>)
   106b6:	4a21      	ldr	r2, [pc, #132]	; (1073c <sendDataBMP+0x8c>)
   106b8:	7818      	ldrb	r0, [r3, #0]
extern void sendDataBMP(void){
   106ba:	b087      	sub	sp, #28
    bmpResult = bmp3_get_sensor_data(sensor_comp, &myData, &bmp388_dev);
   106bc:	4621      	mov	r1, r4
   106be:	f00c f9c3 	bl	1ca48 <bmp3_get_sensor_data>
   106c2:	4b1f      	ldr	r3, [pc, #124]	; (10740 <sendDataBMP+0x90>)
   106c4:	7018      	strb	r0, [r3, #0]
	if(PRINT_SENSOR_DATA){
		printk("BMP: pressure: %f temp: %f\n", myData.pressure,myData.temperature);
   106c6:	e9d4 2300 	ldrd	r2, r3, [r4]
   106ca:	481e      	ldr	r0, [pc, #120]	; (10744 <sendDataBMP+0x94>)
   106cc:	e9cd 2300 	strd	r2, r3, [sp]
   106d0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   106d4:	f00c fb8f 	bl	1cdf6 <printk>
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   106d8:	f010 f86e 	bl	207b8 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   106dc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   106e0:	fba0 2305 	umull	r2, r3, r0, r5
   106e4:	fb05 3301 	mla	r3, r5, r1, r3
   106e8:	0bd0      	lsrs	r0, r2, #15
	}
	float timestamp = k_uptime_get() /1000.0;
   106ea:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   106ee:	0bd9      	lsrs	r1, r3, #15
   106f0:	f7ef fe94 	bl	41c <__aeabi_l2d>
   106f4:	4b14      	ldr	r3, [pc, #80]	; (10748 <sendDataBMP+0x98>)
	bmpData.pressure = myData.pressure;
   106f6:	4f15      	ldr	r7, [pc, #84]	; (1074c <sendDataBMP+0x9c>)
	float timestamp = k_uptime_get() /1000.0;
   106f8:	2200      	movs	r2, #0
   106fa:	f7ef ffe7 	bl	6cc <__aeabi_ddiv>
   106fe:	f7f0 f8cd 	bl	89c <__aeabi_d2f>
   10702:	4605      	mov	r5, r0
	bmpData.pressure = myData.pressure;
   10704:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   10708:	f7f0 f8c8 	bl	89c <__aeabi_d2f>
   1070c:	4606      	mov	r6, r0
   1070e:	6038      	str	r0, [r7, #0]
	bmpData.temperature = myData.temperature;
   10710:	e9d4 0100 	ldrd	r0, r1, [r4]
   10714:	f7f0 f8c2 	bl	89c <__aeabi_d2f>
	bmpData.timestamp=timestamp;
	
	float myArray[3] = {myData.pressure,myData.temperature,timestamp};
	sendData(SENSOR_BMP384_ID, &myArray, 4*3);
   10718:	220c      	movs	r2, #12
	bmpData.temperature = myData.temperature;
   1071a:	6078      	str	r0, [r7, #4]
	float myArray[3] = {myData.pressure,myData.temperature,timestamp};
   1071c:	9004      	str	r0, [sp, #16]
	sendData(SENSOR_BMP384_ID, &myArray, 4*3);
   1071e:	eb0d 0102 	add.w	r1, sp, r2
   10722:	2002      	movs	r0, #2
	bmpData.timestamp=timestamp;
   10724:	60bd      	str	r5, [r7, #8]
	float myArray[3] = {myData.pressure,myData.temperature,timestamp};
   10726:	9603      	str	r6, [sp, #12]
   10728:	9505      	str	r5, [sp, #20]
	sendData(SENSOR_BMP384_ID, &myArray, 4*3);
   1072a:	f7ff fca9 	bl	10080 <sendData>
}
   1072e:	b007      	add	sp, #28
   10730:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10732:	bf00      	nop
   10734:	20000794 	.word	0x20000794
   10738:	20001590 	.word	0x20001590
   1073c:	200014c0 	.word	0x200014c0
   10740:	20002ee8 	.word	0x20002ee8
   10744:	000219c6 	.word	0x000219c6
   10748:	408f4000 	.word	0x408f4000
   1074c:	20001c98 	.word	0x20001c98

00010750 <bmpDataReady>:
static const struct gpio_dt_spec bmpInt = GPIO_DT_SPEC_GET_OR(BMP_INT, gpios,{0});
static struct gpio_callback bmpInt_cb_data;

static void bmpDataReady(const struct device *dev, struct gpio_callback *cb,uint32_t pins)
{
	k_work_submit(&work_data);
   10750:	4801      	ldr	r0, [pc, #4]	; (10758 <bmpDataReady+0x8>)
   10752:	f008 bc65 	b.w	19020 <k_work_submit>
   10756:	bf00      	nop
   10758:	20001d04 	.word	0x20001d04

0001075c <setConfigBMP>:
	}else{
		bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL;
		return bmp3_set_op_mode(&bmp388_dev);
	}
};
static void setConfigBMP(){
   1075c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t oversampling = bmpData.config[1];
   1075e:	4d1b      	ldr	r5, [pc, #108]	; (107cc <setConfigBMP+0x70>)
	uint8_t filter = bmpData.config[2];
	uint8_t rate = bmpData.config[3];
	uint16_t settings_sel;

    bmp388_dev.settings.press_en = BMP3_ENABLE;
   10760:	4c1b      	ldr	r4, [pc, #108]	; (107d0 <setConfigBMP+0x74>)
	uint8_t oversampling = bmpData.config[1];
   10762:	7b68      	ldrb	r0, [r5, #13]
	uint8_t filter = bmpData.config[2];
   10764:	7ba9      	ldrb	r1, [r5, #14]
    bmp388_dev.settings.temp_en = BMP3_ENABLE;
    bmp388_dev.settings.odr_filter.press_os = oversampling;
   10766:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
        bmp388_dev.settings.odr_filter.temp_os = BMP3_OVERSAMPLING_2X;
    }else {
        bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
    }
    
    bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
   1076a:	2000      	movs	r0, #0
    bmp388_dev.settings.press_en = BMP3_ENABLE;
   1076c:	2301      	movs	r3, #1
	uint8_t rate = bmpData.config[3];
   1076e:	7bea      	ldrb	r2, [r5, #15]
    bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
   10770:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
    bmp388_dev.settings.int_settings.drdy_en =BMP3_ENABLE;
    bmp388_dev.settings.odr_filter.iir_filter = filter;
   10774:	f884 10b5 	strb.w	r1, [r4, #181]	; 0xb5
    bmp388_dev.settings.odr_filter.odr =rate;//BMP3_ODR_25_HZ;
	settings_sel = BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR | BMP3_SEL_IIR_FILTER;
    bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev);           
   10778:	20f0      	movs	r0, #240	; 0xf0
   1077a:	4621      	mov	r1, r4
    bmp388_dev.settings.press_en = BMP3_ENABLE;
   1077c:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
    bmp388_dev.settings.temp_en = BMP3_ENABLE;
   10780:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
    bmp388_dev.settings.int_settings.drdy_en =BMP3_ENABLE;
   10784:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
    bmp388_dev.settings.odr_filter.odr =rate;//BMP3_ODR_25_HZ;
   10788:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
    bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev);           
   1078c:	f7ff fd46 	bl	1021c <bmp3_set_sensor_settings>
   10790:	4f10      	ldr	r7, [pc, #64]	; (107d4 <setConfigBMP+0x78>)
   10792:	7038      	strb	r0, [r7, #0]
     if (bmpResult == BMP3_SENSOR_OK){
   10794:	b970      	cbnz	r0, 107b4 <setConfigBMP+0x58>
        bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL; 
   10796:	2603      	movs	r6, #3
        bmpResult = bmp3_set_op_mode(&bmp388_dev);
   10798:	4620      	mov	r0, r4
        bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL; 
   1079a:	f884 60b0 	strb.w	r6, [r4, #176]	; 0xb0
        bmpResult = bmp3_set_op_mode(&bmp388_dev);
   1079e:	f00c f8de 	bl	1c95e <bmp3_set_op_mode>
   107a2:	7038      	strb	r0, [r7, #0]
        if (bmpResult == BMP3_SENSOR_OK)
   107a4:	b930      	cbnz	r0, 107b4 <setConfigBMP+0x58>
        {
            bmp388_dev.delay_us(40000, bmp388_dev.intf_ptr);
   107a6:	6963      	ldr	r3, [r4, #20]
   107a8:	6861      	ldr	r1, [r4, #4]
   107aa:	f649 4040 	movw	r0, #40000	; 0x9c40
   107ae:	4798      	blx	r3
            /* Sensor component selection */
            sensor_comp = BMP3_PRESS | BMP3_TEMP;
   107b0:	4b09      	ldr	r3, [pc, #36]	; (107d8 <setConfigBMP+0x7c>)
   107b2:	701e      	strb	r6, [r3, #0]
	if(SLEEP){
   107b4:	7b2b      	ldrb	r3, [r5, #12]
   107b6:	b933      	cbnz	r3, 107c6 <setConfigBMP+0x6a>
		bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL;
   107b8:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
		return bmp3_set_op_mode(&bmp388_dev);
   107bc:	4804      	ldr	r0, [pc, #16]	; (107d0 <setConfigBMP+0x74>)
            /* Temperature and Pressure data are read and stored in the bmp3_data instance */
        }
    }
	sleepBMP(!bmpData.config[0]);
}
   107be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bmp3_set_op_mode(&bmp388_dev);
   107c2:	f00c b8cc 	b.w	1c95e <bmp3_set_op_mode>
		bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL;
   107c6:	2303      	movs	r3, #3
   107c8:	e7f6      	b.n	107b8 <setConfigBMP+0x5c>
   107ca:	bf00      	nop
   107cc:	20001c98 	.word	0x20001c98
   107d0:	200014c0 	.word	0x200014c0
   107d4:	20002ee8 	.word	0x20002ee8
   107d8:	20000794 	.word	0x20000794

000107dc <initBMP384>:
void initBMP384(struct device *i2c_dev){
   107dc:	b570      	push	{r4, r5, r6, lr}
	bmp388_dev.intf = BMP3_I2C_INTF;
   107de:	4c29      	ldr	r4, [pc, #164]	; (10884 <initBMP384+0xa8>)
	bmp388_dev.intf_rslt = bmpResult;
   107e0:	4d29      	ldr	r5, [pc, #164]	; (10888 <initBMP384+0xac>)
	bmp388_dev.intf_ptr = i2c_dev;
   107e2:	6060      	str	r0, [r4, #4]
	bmp388_dev.intf = BMP3_I2C_INTF;
   107e4:	2301      	movs	r3, #1
   107e6:	7223      	strb	r3, [r4, #8]
	bmp388_dev.intf_rslt = bmpResult;
   107e8:	782b      	ldrb	r3, [r5, #0]
   107ea:	7263      	strb	r3, [r4, #9]
	bmp388_dev.dummy_byte = dByte;
   107ec:	2300      	movs	r3, #0
   107ee:	72a3      	strb	r3, [r4, #10]
	bmp388_dev.read = app_i2c_read;
   107f0:	4b26      	ldr	r3, [pc, #152]	; (1088c <initBMP384+0xb0>)
   107f2:	60e3      	str	r3, [r4, #12]
	bmp388_dev.write = app_i2c_write;
   107f4:	4b26      	ldr	r3, [pc, #152]	; (10890 <initBMP384+0xb4>)
   107f6:	6123      	str	r3, [r4, #16]
	bmpResult = bmp3_init(&bmp388_dev);
   107f8:	4620      	mov	r0, r4
	bmp388_dev.delay_us = app_us_delay;
   107fa:	4b26      	ldr	r3, [pc, #152]	; (10894 <initBMP384+0xb8>)
   107fc:	6163      	str	r3, [r4, #20]
	bmpResult = bmp3_init(&bmp388_dev);
   107fe:	f7ff fe39 	bl	10474 <bmp3_init>
   10802:	4601      	mov	r1, r0
   10804:	7028      	strb	r0, [r5, #0]
	if(bmpResult != 0){
   10806:	b110      	cbz	r0, 1080e <initBMP384+0x32>
		printk("init error: %i \n",bmpResult);
   10808:	4823      	ldr	r0, [pc, #140]	; (10898 <initBMP384+0xbc>)
   1080a:	f00c faf4 	bl	1cdf6 <printk>
    bmp388_dev.settings.int_settings.drdy_en =BMP3_ENABLE;
   1080e:	2301      	movs	r3, #1
   10810:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
    bmp388_dev.settings.int_settings.level = BMP3_INT_PIN_ACTIVE_HIGH;
   10814:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
    bmp388_dev.settings.press_en = BMP3_ENABLE;
   10818:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
    bmp388_dev.settings.temp_en = BMP3_ENABLE;
   1081c:	f240 1301 	movw	r3, #257	; 0x101
   10820:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
    bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
   10824:	f44f 7300 	mov.w	r3, #512	; 0x200
	bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev); 
   10828:	4916      	ldr	r1, [pc, #88]	; (10884 <initBMP384+0xa8>)
    bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
   1082a:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
	bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev); 
   1082e:	f240 20fe 	movw	r0, #766	; 0x2fe
    bmp388_dev.settings.odr_filter.odr = BMP3_ODR_1_5_HZ;
   10832:	2307      	movs	r3, #7
   10834:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
	bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev); 
   10838:	f7ff fcf0 	bl	1021c <bmp3_set_sensor_settings>
   1083c:	4601      	mov	r1, r0
   1083e:	7028      	strb	r0, [r5, #0]
	if(bmpResult != 0){
   10840:	b978      	cbnz	r0, 10862 <initBMP384+0x86>
        bmpResult = bmp3_set_op_mode(&bmp388_dev);
   10842:	4810      	ldr	r0, [pc, #64]	; (10884 <initBMP384+0xa8>)
        bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL;
   10844:	2603      	movs	r6, #3
   10846:	f884 60b0 	strb.w	r6, [r4, #176]	; 0xb0
        bmpResult = bmp3_set_op_mode(&bmp388_dev);
   1084a:	f00c f888 	bl	1c95e <bmp3_set_op_mode>
   1084e:	7028      	strb	r0, [r5, #0]
        if (bmpResult == BMP3_SENSOR_OK)
   10850:	b178      	cbz	r0, 10872 <initBMP384+0x96>
		bmp388_dev.settings.op_mode = BMP3_MODE_SLEEP;
   10852:	2300      	movs	r3, #0
		return bmp3_set_op_mode(&bmp388_dev);
   10854:	480b      	ldr	r0, [pc, #44]	; (10884 <initBMP384+0xa8>)
		bmp388_dev.settings.op_mode = BMP3_MODE_SLEEP;
   10856:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
		return bmp3_set_op_mode(&bmp388_dev);
   1085a:	f00c f880 	bl	1c95e <bmp3_set_op_mode>
	bmpResult = sleepBMP(true);
   1085e:	7028      	strb	r0, [r5, #0]
}
   10860:	bd70      	pop	{r4, r5, r6, pc}
		printk("set settings error: %i \n",bmpResult);
   10862:	480e      	ldr	r0, [pc, #56]	; (1089c <initBMP384+0xc0>)
   10864:	f00c fac7 	bl	1cdf6 <printk>
	if (bmpResult == BMP3_SENSOR_OK){
   10868:	f995 3000 	ldrsb.w	r3, [r5]
   1086c:	2b00      	cmp	r3, #0
   1086e:	d1f0      	bne.n	10852 <initBMP384+0x76>
   10870:	e7e7      	b.n	10842 <initBMP384+0x66>
            bmp388_dev.delay_us(40000, bmp388_dev.intf_ptr);
   10872:	6963      	ldr	r3, [r4, #20]
   10874:	6861      	ldr	r1, [r4, #4]
   10876:	f649 4040 	movw	r0, #40000	; 0x9c40
   1087a:	4798      	blx	r3
            sensor_comp = BMP3_PRESS | BMP3_TEMP;
   1087c:	4b08      	ldr	r3, [pc, #32]	; (108a0 <initBMP384+0xc4>)
   1087e:	701e      	strb	r6, [r3, #0]
   10880:	e7e7      	b.n	10852 <initBMP384+0x76>
   10882:	bf00      	nop
   10884:	200014c0 	.word	0x200014c0
   10888:	20002ee8 	.word	0x20002ee8
   1088c:	0001cac9 	.word	0x0001cac9
   10890:	0001cb19 	.word	0x0001cb19
   10894:	0001cac5 	.word	0x0001cac5
   10898:	000219e2 	.word	0x000219e2
   1089c:	000219f3 	.word	0x000219f3
   108a0:	20000794 	.word	0x20000794

000108a4 <init_Interrupt_BMP>:
int8_t init_Interrupt_BMP(){
   108a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	k_work_init(&work_data, sendDataBMP);
   108a6:	4925      	ldr	r1, [pc, #148]	; (1093c <init_Interrupt_BMP+0x98>)
   108a8:	4825      	ldr	r0, [pc, #148]	; (10940 <init_Interrupt_BMP+0x9c>)
   108aa:	f00f fdd8 	bl	2045e <k_work_init>
	k_work_init(&work_config, setConfigBMP);
   108ae:	4925      	ldr	r1, [pc, #148]	; (10944 <init_Interrupt_BMP+0xa0>)
   108b0:	4825      	ldr	r0, [pc, #148]	; (10948 <init_Interrupt_BMP+0xa4>)
   108b2:	f00f fdd4 	bl	2045e <k_work_init>
   108b6:	4d25      	ldr	r5, [pc, #148]	; (1094c <init_Interrupt_BMP+0xa8>)
   108b8:	4628      	mov	r0, r5
   108ba:	f00f fb9e 	bl	1fffa <z_device_ready>
   108be:	462f      	mov	r7, r5
   108c0:	b1a0      	cbz	r0, 108ec <init_Interrupt_BMP+0x48>
	struct gpio_driver_data *data =
   108c2:	692a      	ldr	r2, [r5, #16]
	const struct gpio_driver_api *api =
   108c4:	68ae      	ldr	r6, [r5, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   108c6:	6813      	ldr	r3, [r2, #0]
   108c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   108cc:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   108ce:	2111      	movs	r1, #17
   108d0:	6833      	ldr	r3, [r6, #0]
   108d2:	f44f 7280 	mov.w	r2, #256	; 0x100
   108d6:	4628      	mov	r0, r5
   108d8:	4798      	blx	r3
	returnValue = gpio_pin_configure_dt(&bmpInt, GPIO_INPUT);
   108da:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   108dc:	b16c      	cbz	r4, 108fa <init_Interrupt_BMP+0x56>
		printk("Error %d: failed to configure %s pin %d\n",
   108de:	682a      	ldr	r2, [r5, #0]
   108e0:	481b      	ldr	r0, [pc, #108]	; (10950 <init_Interrupt_BMP+0xac>)
   108e2:	2311      	movs	r3, #17
   108e4:	4621      	mov	r1, r4
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   108e6:	f00c fa86 	bl	1cdf6 <printk>
		return returnValue;
   108ea:	e004      	b.n	108f6 <init_Interrupt_BMP+0x52>
		printk("Error: bmp interrupt %s is not ready\n",
   108ec:	6829      	ldr	r1, [r5, #0]
   108ee:	4819      	ldr	r0, [pc, #100]	; (10954 <init_Interrupt_BMP+0xb0>)
   108f0:	f00c fa81 	bl	1cdf6 <printk>
		return 1;
   108f4:	2401      	movs	r4, #1
}
   108f6:	4620      	mov	r0, r4
   108f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   108fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   108fe:	69b4      	ldr	r4, [r6, #24]
   10900:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
   10904:	2111      	movs	r1, #17
   10906:	4628      	mov	r0, r5
   10908:	47a0      	blx	r4
	returnValue = gpio_pin_interrupt_configure_dt(&bmpInt,GPIO_INT_EDGE_RISING);
   1090a:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   1090c:	b124      	cbz	r4, 10918 <init_Interrupt_BMP+0x74>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   1090e:	682a      	ldr	r2, [r5, #0]
   10910:	4811      	ldr	r0, [pc, #68]	; (10958 <init_Interrupt_BMP+0xb4>)
   10912:	2311      	movs	r3, #17
   10914:	4621      	mov	r1, r4
   10916:	e7e6      	b.n	108e6 <init_Interrupt_BMP+0x42>
	callback->handler = handler;
   10918:	4910      	ldr	r1, [pc, #64]	; (1095c <init_Interrupt_BMP+0xb8>)
   1091a:	4b11      	ldr	r3, [pc, #68]	; (10960 <init_Interrupt_BMP+0xbc>)
   1091c:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   1091e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   10922:	608b      	str	r3, [r1, #8]
	if (api->manage_callback == NULL) {
   10924:	69f3      	ldr	r3, [r6, #28]
   10926:	b113      	cbz	r3, 1092e <init_Interrupt_BMP+0x8a>
	return api->manage_callback(port, callback, true);
   10928:	2201      	movs	r2, #1
   1092a:	4628      	mov	r0, r5
   1092c:	4798      	blx	r3
	printk("Set up button at %s pin %d\n", bmpInt.port->name, bmpInt.pin);
   1092e:	6839      	ldr	r1, [r7, #0]
   10930:	480c      	ldr	r0, [pc, #48]	; (10964 <init_Interrupt_BMP+0xc0>)
   10932:	2211      	movs	r2, #17
   10934:	f00c fa5f 	bl	1cdf6 <printk>
    return returnValue;
   10938:	e7dd      	b.n	108f6 <init_Interrupt_BMP+0x52>
   1093a:	bf00      	nop
   1093c:	000106b1 	.word	0x000106b1
   10940:	20001d04 	.word	0x20001d04
   10944:	0001075d 	.word	0x0001075d
   10948:	20001cf4 	.word	0x20001cf4
   1094c:	00020bf8 	.word	0x00020bf8
   10950:	00021949 	.word	0x00021949
   10954:	00021a0c 	.word	0x00021a0c
   10958:	00021972 	.word	0x00021972
   1095c:	20001ce8 	.word	0x20001ce8
   10960:	00010751 	.word	0x00010751
   10964:	00021a32 	.word	0x00021a32

00010968 <submitConfigBMP>:
	k_work_submit(&work_config);
   10968:	4801      	ldr	r0, [pc, #4]	; (10970 <submitConfigBMP+0x8>)
   1096a:	f008 bb59 	b.w	19020 <k_work_submit>
   1096e:	bf00      	nop
   10970:	20001cf4 	.word	0x20001cf4

00010974 <mlx_setGain>:
/**
 * Sets the sensor gain to the specified level.
 * @param gain  The gain level to set.
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_setGain(mlx90393_gain_t gain, struct device *mlx_device_t) {
   10974:	b537      	push	{r0, r1, r2, r4, r5, lr}
  _gain = gain;
   10976:	4b0c      	ldr	r3, [pc, #48]	; (109a8 <mlx_setGain+0x34>)
bool mlx_setGain(mlx90393_gain_t gain, struct device *mlx_device_t) {
   10978:	4605      	mov	r5, r0
   1097a:	460c      	mov	r4, r1
  _gain = gain;
   1097c:	7018      	strb	r0, [r3, #0]

  uint16_t data;
  readRegister(MLX90393_CONF1, &data, mlx_device_t);
   1097e:	460a      	mov	r2, r1
   10980:	2000      	movs	r0, #0
   10982:	f10d 0106 	add.w	r1, sp, #6
   10986:	f00c f95b 	bl	1cc40 <readRegister>

  // mask off gain bits
  data &= ~0x0070;
   1098a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1098e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  // set gain bits
  data |= gain << MLX90393_GAIN_SHIFT;
   10992:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   10996:	b281      	uxth	r1, r0

  return writeRegister(MLX90393_CONF1, data, mlx_device_t);
   10998:	4622      	mov	r2, r4
   1099a:	2000      	movs	r0, #0
  data |= gain << MLX90393_GAIN_SHIFT;
   1099c:	f8ad 1006 	strh.w	r1, [sp, #6]
  return writeRegister(MLX90393_CONF1, data, mlx_device_t);
   109a0:	f00c f934 	bl	1cc0c <writeRegister>
}
   109a4:	b003      	add	sp, #12
   109a6:	bd30      	pop	{r4, r5, pc}
   109a8:	20002eea 	.word	0x20002eea

000109ac <mlx_setResolution>:
 * @param axis  The axis to set.
 * @param resolution  The resolution level to set.
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_setResolution(enum mlx90393_axis axis,
                                      enum mlx90393_resolution resolution, struct device *mlx_device_t) {
   109ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   109ae:	4606      	mov	r6, r0
   109b0:	460c      	mov	r4, r1

  uint16_t data;
  readRegister(MLX90393_CONF3, &data, mlx_device_t);
   109b2:	2002      	movs	r0, #2
   109b4:	f10d 0106 	add.w	r1, sp, #6
                                      enum mlx90393_resolution resolution, struct device *mlx_device_t) {
   109b8:	4615      	mov	r5, r2
  readRegister(MLX90393_CONF3, &data, mlx_device_t);
   109ba:	f00c f941 	bl	1cc40 <readRegister>

  switch (axis) {
   109be:	2e01      	cmp	r6, #1
   109c0:	d014      	beq.n	109ec <mlx_setResolution+0x40>
   109c2:	2e02      	cmp	r6, #2
   109c4:	d01b      	beq.n	109fe <mlx_setResolution+0x52>
   109c6:	b94e      	cbnz	r6, 109dc <mlx_setResolution+0x30>
  case MLX90393_X:
    _res_x = resolution;
    data &= ~0x0060;
   109c8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    _res_x = resolution;
   109cc:	4b10      	ldr	r3, [pc, #64]	; (10a10 <mlx_setResolution+0x64>)
    data &= ~0x0060;
   109ce:	f021 0160 	bic.w	r1, r1, #96	; 0x60
    _res_x = resolution;
   109d2:	701c      	strb	r4, [r3, #0]
    data |= resolution << 5;
   109d4:	ea41 1444 	orr.w	r4, r1, r4, lsl #5
    data |= resolution << 7;
    break;
  case MLX90393_Z:
    _res_z = resolution;
    data &= ~0x0600;
    data |= resolution << 9;
   109d8:	f8ad 4006 	strh.w	r4, [sp, #6]
    break;
  }

  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   109dc:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   109e0:	462a      	mov	r2, r5
   109e2:	2002      	movs	r0, #2
   109e4:	f00c f912 	bl	1cc0c <writeRegister>
}
   109e8:	b002      	add	sp, #8
   109ea:	bd70      	pop	{r4, r5, r6, pc}
    data &= ~0x0180;
   109ec:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    _res_y = resolution;
   109f0:	4b08      	ldr	r3, [pc, #32]	; (10a14 <mlx_setResolution+0x68>)
    data &= ~0x0180;
   109f2:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
    _res_y = resolution;
   109f6:	701c      	strb	r4, [r3, #0]
    data |= resolution << 7;
   109f8:	ea41 14c4 	orr.w	r4, r1, r4, lsl #7
   109fc:	e7ec      	b.n	109d8 <mlx_setResolution+0x2c>
    data &= ~0x0600;
   109fe:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    _res_z = resolution;
   10a02:	4b05      	ldr	r3, [pc, #20]	; (10a18 <mlx_setResolution+0x6c>)
    data &= ~0x0600;
   10a04:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
    _res_z = resolution;
   10a08:	701c      	strb	r4, [r3, #0]
    data |= resolution << 9;
   10a0a:	ea41 2444 	orr.w	r4, r1, r4, lsl #9
   10a0e:	e7e3      	b.n	109d8 <mlx_setResolution+0x2c>
   10a10:	20002eec 	.word	0x20002eec
   10a14:	20002eed 	.word	0x20002eed
   10a18:	20002eee 	.word	0x20002eee

00010a1c <mlx_setFilter>:
/**
 * Sets the digital filter.
 * @param filter The digital filter setting.
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_setFilter(enum mlx90393_filter filter, struct device *mlx_device_t) {
   10a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  _dig_filt = filter;
   10a1e:	4b0c      	ldr	r3, [pc, #48]	; (10a50 <mlx_setFilter+0x34>)
bool mlx_setFilter(enum mlx90393_filter filter, struct device *mlx_device_t) {
   10a20:	4605      	mov	r5, r0
   10a22:	460c      	mov	r4, r1
  _dig_filt = filter;
   10a24:	7018      	strb	r0, [r3, #0]

  uint16_t data;
  readRegister(MLX90393_CONF3, &data, mlx_device_t);
   10a26:	460a      	mov	r2, r1
   10a28:	2002      	movs	r0, #2
   10a2a:	f10d 0106 	add.w	r1, sp, #6
   10a2e:	f00c f907 	bl	1cc40 <readRegister>

  data &= ~0x1C;
   10a32:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   10a36:	f023 031c 	bic.w	r3, r3, #28
  data |= filter << 2;
   10a3a:	ea43 0085 	orr.w	r0, r3, r5, lsl #2
   10a3e:	b281      	uxth	r1, r0

  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   10a40:	4622      	mov	r2, r4
   10a42:	2002      	movs	r0, #2
  data |= filter << 2;
   10a44:	f8ad 1006 	strh.w	r1, [sp, #6]
  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   10a48:	f00c f8e0 	bl	1cc0c <writeRegister>
}
   10a4c:	b003      	add	sp, #12
   10a4e:	bd30      	pop	{r4, r5, pc}
   10a50:	20002ee9 	.word	0x20002ee9

00010a54 <mlx_setOversampling>:
 * Sets the oversampling.
 * @param oversampling The oversampling value to use.
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_setOversampling(
    enum mlx90393_oversampling oversampling, struct device *mlx_device_t) {
   10a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
  _osr = oversampling;
   10a56:	4b0c      	ldr	r3, [pc, #48]	; (10a88 <mlx_setOversampling+0x34>)
    enum mlx90393_oversampling oversampling, struct device *mlx_device_t) {
   10a58:	4605      	mov	r5, r0
   10a5a:	460c      	mov	r4, r1
  _osr = oversampling;
   10a5c:	7018      	strb	r0, [r3, #0]

  uint16_t data;
  readRegister(MLX90393_CONF3, &data, mlx_device_t);
   10a5e:	460a      	mov	r2, r1
   10a60:	2002      	movs	r0, #2
   10a62:	f10d 0106 	add.w	r1, sp, #6
   10a66:	f00c f8eb 	bl	1cc40 <readRegister>

  data &= ~0x03;
   10a6a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   10a6e:	f023 0303 	bic.w	r3, r3, #3
  data |= oversampling;
   10a72:	ea43 0005 	orr.w	r0, r3, r5
   10a76:	b281      	uxth	r1, r0

  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   10a78:	4622      	mov	r2, r4
   10a7a:	2002      	movs	r0, #2
  data |= oversampling;
   10a7c:	f8ad 1006 	strh.w	r1, [sp, #6]
  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   10a80:	f00c f8c4 	bl	1cc0c <writeRegister>
}
   10a84:	b003      	add	sp, #12
   10a86:	bd30      	pop	{r4, r5, pc}
   10a88:	20002eeb 	.word	0x20002eeb

00010a8c <mlx_readMeasurement>:
 * @param y     Pointer to where the 'y' value should be stored.
 * @param z     Pointer to where the 'z' value should be stored.
 *
 * @return True on command success
 */
bool mlx_readMeasurement(float *x, float *y, float *z, struct device *mlx_device_t) {
   10a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a90:	b08b      	sub	sp, #44	; 0x2c
   10a92:	4691      	mov	r9, r2
  uint8_t tx[1] = {MLX90393_REG_RM | MLX90393_AXIS_ALL};
   10a94:	224e      	movs	r2, #78	; 0x4e
   10a96:	f88d 201c 	strb.w	r2, [sp, #28]
  uint8_t rx[6] = {0};
   10a9a:	2200      	movs	r2, #0

  /* Read a single data sample. */


  
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {  
   10a9c:	e9cd 2300 	strd	r2, r3, [sp]
  uint8_t rx[6] = {0};
   10aa0:	9208      	str	r2, [sp, #32]
   10aa2:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {  
   10aa6:	2306      	movs	r3, #6
bool mlx_readMeasurement(float *x, float *y, float *z, struct device *mlx_device_t) {
   10aa8:	4683      	mov	fp, r0
   10aaa:	468a      	mov	sl, r1
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {  
   10aac:	aa08      	add	r2, sp, #32
   10aae:	2101      	movs	r1, #1
   10ab0:	a807      	add	r0, sp, #28
   10ab2:	f00c f852 	bl	1cb5a <transceive>
  

  int16_t xi, yi, zi;

  /* Convert data to uT and float. */
  xi = (rx[0] << 8) | rx[1];
   10ab6:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10aba:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
  yi = (rx[2] << 8) | rx[3];
   10abe:	f89d 5023 	ldrb.w	r5, [sp, #35]	; 0x23
  zi = (rx[4] << 8) | rx[5];
   10ac2:	f89d 4025 	ldrb.w	r4, [sp, #37]	; 0x25
  xi = (rx[0] << 8) | rx[1];
   10ac6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  yi = (rx[2] << 8) | rx[3];
   10aca:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10ace:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  zi = (rx[4] << 8) | rx[5];
   10ad2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   10ad6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8

  if (_res_x == MLX90393_RES_18)
   10ada:	4b2a      	ldr	r3, [pc, #168]	; (10b84 <mlx_readMeasurement+0xf8>)
   10adc:	781b      	ldrb	r3, [r3, #0]
   10ade:	2b02      	cmp	r3, #2
  xi = (rx[0] << 8) | rx[1];
   10ae0:	b200      	sxth	r0, r0
  yi = (rx[2] << 8) | rx[3];
   10ae2:	b22d      	sxth	r5, r5
  zi = (rx[4] << 8) | rx[5];
   10ae4:	b224      	sxth	r4, r4
  if (_res_x == MLX90393_RES_18)
   10ae6:	d13e      	bne.n	10b66 <mlx_readMeasurement+0xda>
    xi -= 0x8000;
   10ae8:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
  if (_res_x == MLX90393_RES_19)
    xi -= 0x4000;
   10aec:	b200      	sxth	r0, r0
  if (_res_y == MLX90393_RES_18)
   10aee:	4a26      	ldr	r2, [pc, #152]	; (10b88 <mlx_readMeasurement+0xfc>)
   10af0:	7817      	ldrb	r7, [r2, #0]
   10af2:	2f02      	cmp	r7, #2
   10af4:	d13c      	bne.n	10b70 <mlx_readMeasurement+0xe4>
    yi -= 0x8000;
   10af6:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
  if (_res_y == MLX90393_RES_19)
    yi -= 0x4000;
   10afa:	b22d      	sxth	r5, r5
  if (_res_z == MLX90393_RES_18)
   10afc:	4a23      	ldr	r2, [pc, #140]	; (10b8c <mlx_readMeasurement+0x100>)
   10afe:	7812      	ldrb	r2, [r2, #0]
   10b00:	2a02      	cmp	r2, #2
   10b02:	d13a      	bne.n	10b7a <mlx_readMeasurement+0xee>
    zi -= 0x8000;
   10b04:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
  if (_res_z == MLX90393_RES_19)
    zi -= 0x4000;
   10b08:	b224      	sxth	r4, r4

  *x = (float)xi * mlx90393_lsb_lookup[0][_gain][_res_x][0];
   10b0a:	4921      	ldr	r1, [pc, #132]	; (10b90 <mlx_readMeasurement+0x104>)
   10b0c:	4e21      	ldr	r6, [pc, #132]	; (10b94 <mlx_readMeasurement+0x108>)
   10b0e:	7809      	ldrb	r1, [r1, #0]
   10b10:	9103      	str	r1, [sp, #12]
   10b12:	e9cd 3204 	strd	r3, r2, [sp, #16]
   10b16:	f7ef ffcb 	bl	ab0 <__aeabi_i2f>
   10b1a:	9903      	ldr	r1, [sp, #12]
   10b1c:	9b04      	ldr	r3, [sp, #16]
   10b1e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   10b22:	ea4f 0881 	mov.w	r8, r1, lsl #2
   10b26:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
   10b2a:	f7f0 f815 	bl	b58 <__aeabi_fmul>
  *y = (float)yi * mlx90393_lsb_lookup[0][_gain][_res_y][0];
   10b2e:	4447      	add	r7, r8
  *x = (float)xi * mlx90393_lsb_lookup[0][_gain][_res_x][0];
   10b30:	f8cb 0000 	str.w	r0, [fp]
  *y = (float)yi * mlx90393_lsb_lookup[0][_gain][_res_y][0];
   10b34:	4628      	mov	r0, r5
   10b36:	f7ef ffbb 	bl	ab0 <__aeabi_i2f>
   10b3a:	f856 1037 	ldr.w	r1, [r6, r7, lsl #3]
   10b3e:	f7f0 f80b 	bl	b58 <__aeabi_fmul>
   10b42:	f8ca 0000 	str.w	r0, [sl]
  *z = (float)zi * mlx90393_lsb_lookup[0][_gain][_res_z][1];
   10b46:	4620      	mov	r0, r4
   10b48:	f7ef ffb2 	bl	ab0 <__aeabi_i2f>
   10b4c:	9a05      	ldr	r2, [sp, #20]
   10b4e:	4490      	add	r8, r2
   10b50:	eb06 06c8 	add.w	r6, r6, r8, lsl #3
   10b54:	6871      	ldr	r1, [r6, #4]
   10b56:	f7ef ffff 	bl	b58 <__aeabi_fmul>
   10b5a:	f8c9 0000 	str.w	r0, [r9]

  return true;
}
   10b5e:	2001      	movs	r0, #1
   10b60:	b00b      	add	sp, #44	; 0x2c
   10b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_res_x == MLX90393_RES_19)
   10b66:	2b03      	cmp	r3, #3
   10b68:	d1c1      	bne.n	10aee <mlx_readMeasurement+0x62>
    xi -= 0x4000;
   10b6a:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
   10b6e:	e7bd      	b.n	10aec <mlx_readMeasurement+0x60>
  if (_res_y == MLX90393_RES_19)
   10b70:	2f03      	cmp	r7, #3
   10b72:	d1c3      	bne.n	10afc <mlx_readMeasurement+0x70>
    yi -= 0x4000;
   10b74:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
   10b78:	e7bf      	b.n	10afa <mlx_readMeasurement+0x6e>
  if (_res_z == MLX90393_RES_19)
   10b7a:	2a03      	cmp	r2, #3
   10b7c:	d1c5      	bne.n	10b0a <mlx_readMeasurement+0x7e>
    zi -= 0x4000;
   10b7e:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
   10b82:	e7c1      	b.n	10b08 <mlx_readMeasurement+0x7c>
   10b84:	20002eec 	.word	0x20002eec
   10b88:	20002eed 	.word	0x20002eed
   10b8c:	20002eee 	.word	0x20002eee
   10b90:	20002eea 	.word	0x20002eea
   10b94:	00020fec 	.word	0x00020fec

00010b98 <main>:
void btn1_handle(struct k_work * work) {
    printk("test");
}

void main(void)
{
   10b98:	b538      	push	{r3, r4, r5, lr}
	printk("Hello World!!! %s\n", CONFIG_BOARD);
   10b9a:	4915      	ldr	r1, [pc, #84]	; (10bf0 <main+0x58>)
   10b9c:	4815      	ldr	r0, [pc, #84]	; (10bf4 <main+0x5c>)
   10b9e:	f00c f92a 	bl	1cdf6 <printk>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   10ba2:	4815      	ldr	r0, [pc, #84]	; (10bf8 <main+0x60>)
   10ba4:	f007 fdc0 	bl	18728 <z_impl_device_get_binding>
	//k_work_init(&some_work, btn1_handle);
	

	struct device *i2c_dev;
	i2c_dev = device_get_binding("myi2c");
	if (!i2c_dev) {
   10ba8:	4604      	mov	r4, r0
   10baa:	b920      	cbnz	r0, 10bb6 <main+0x1e>
		k_sleep(K_SECONDS(2));
	
	}
	

}
   10bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printk("I2C: Device driver not found.\n");
   10bb0:	4812      	ldr	r0, [pc, #72]	; (10bfc <main+0x64>)
   10bb2:	f00c b920 	b.w	1cdf6 <printk>
	error = init_Interrupt_BMP();
   10bb6:	f7ff fe75 	bl	108a4 <init_Interrupt_BMP>
   10bba:	4d11      	ldr	r5, [pc, #68]	; (10c00 <main+0x68>)
   10bbc:	7028      	strb	r0, [r5, #0]
	error = initBMP384(i2c_dev);
   10bbe:	4620      	mov	r0, r4
   10bc0:	f7ff fe0c 	bl	107dc <initBMP384>
   10bc4:	7028      	strb	r0, [r5, #0]
	initMLX(i2c_dev);
   10bc6:	4620      	mov	r0, r4
   10bc8:	f7ff fa76 	bl	100b8 <initMLX>
	init_Interrupt_MLX();
   10bcc:	f7ff fa7e 	bl	100cc <init_Interrupt_MLX>
	return z_impl_k_sleep(timeout);
   10bd0:	2100      	movs	r1, #0
   10bd2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10bd6:	f008 fdb1 	bl	1973c <z_impl_k_sleep>
	enableMLX(i2c_dev);
   10bda:	4620      	mov	r0, r4
   10bdc:	f00b fcc1 	bl	1c562 <enableMLX>
	initBLE();
   10be0:	f7ff fa1e 	bl	10020 <initBLE>
   10be4:	2100      	movs	r1, #0
   10be6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   10bea:	f008 fda7 	bl	1973c <z_impl_k_sleep>
	while (1)
   10bee:	e7f9      	b.n	10be4 <main+0x4c>
   10bf0:	00021a4e 	.word	0x00021a4e
   10bf4:	00021a60 	.word	0x00021a60
   10bf8:	00021a73 	.word	0x00021a73
   10bfc:	00021a79 	.word	0x00021a79
   10c00:	20002eef 	.word	0x20002eef

00010c04 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   10c04:	680b      	ldr	r3, [r1, #0]
   10c06:	3301      	adds	r3, #1
   10c08:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   10c0a:	4b01      	ldr	r3, [pc, #4]	; (10c10 <char_out+0xc>)
   10c0c:	681b      	ldr	r3, [r3, #0]
   10c0e:	4718      	bx	r3
   10c10:	200004bc 	.word	0x200004bc

00010c14 <__printk_hook_install>:
	_char_out = fn;
   10c14:	4b01      	ldr	r3, [pc, #4]	; (10c1c <__printk_hook_install+0x8>)
   10c16:	6018      	str	r0, [r3, #0]
}
   10c18:	4770      	bx	lr
   10c1a:	bf00      	nop
   10c1c:	200004bc 	.word	0x200004bc

00010c20 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   10c20:	b507      	push	{r0, r1, r2, lr}
   10c22:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   10c24:	2100      	movs	r1, #0
{
   10c26:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   10c28:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   10c2a:	4803      	ldr	r0, [pc, #12]	; (10c38 <vprintk+0x18>)
   10c2c:	a901      	add	r1, sp, #4
   10c2e:	f000 f8eb 	bl	10e08 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   10c32:	b003      	add	sp, #12
   10c34:	f85d fb04 	ldr.w	pc, [sp], #4
   10c38:	00010c05 	.word	0x00010c05

00010c3c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   10c3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10c40:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   10c44:	f019 0808 	ands.w	r8, r9, #8
{
   10c48:	4604      	mov	r4, r0
   10c4a:	4693      	mov	fp, r2
	if (processing) {
   10c4c:	d00d      	beq.n	10c6a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   10c4e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   10c50:	bf0c      	ite	eq
   10c52:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   10c56:	f049 0920 	orrne.w	r9, r9, #32
   10c5a:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   10c5e:	f38b 8811 	msr	BASEPRI, fp
   10c62:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   10c66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10c6a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   10c6e:	2902      	cmp	r1, #2
   10c70:	d107      	bne.n	10c82 <process_event+0x46>
			evt = process_recheck(mgr);
   10c72:	4620      	mov	r0, r4
   10c74:	f00c f8cc 	bl	1ce10 <process_recheck>
		if (evt == EVT_NOP) {
   10c78:	2800      	cmp	r0, #0
   10c7a:	d0f0      	beq.n	10c5e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   10c7c:	2801      	cmp	r0, #1
   10c7e:	8b23      	ldrh	r3, [r4, #24]
   10c80:	d150      	bne.n	10d24 <process_event+0xe8>
			res = mgr->last_res;
   10c82:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10c84:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   10c86:	2f00      	cmp	r7, #0
   10c88:	da15      	bge.n	10cb6 <process_event+0x7a>
		*clients = mgr->clients;
   10c8a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10c8c:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   10c90:	e9c4 8800 	strd	r8, r8, [r4]
   10c94:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   10c98:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   10c9a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10c9c:	8b21      	ldrh	r1, [r4, #24]
   10c9e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   10ca2:	45ca      	cmp	sl, r9
   10ca4:	d002      	beq.n	10cac <process_event+0x70>
		if (do_monitors
   10ca6:	68a3      	ldr	r3, [r4, #8]
   10ca8:	2b00      	cmp	r3, #0
   10caa:	d15c      	bne.n	10d66 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   10cac:	b90d      	cbnz	r5, 10cb2 <process_event+0x76>
		    || (transit != NULL)) {
   10cae:	2e00      	cmp	r6, #0
   10cb0:	d074      	beq.n	10d9c <process_event+0x160>
   10cb2:	2300      	movs	r3, #0
   10cb4:	e058      	b.n	10d68 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10cb6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   10cba:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   10cbc:	2a01      	cmp	r2, #1
   10cbe:	d820      	bhi.n	10d02 <process_event+0xc6>
		*clients = mgr->clients;
   10cc0:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   10cc4:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   10cc6:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   10cc8:	b289      	uxth	r1, r1
	list->tail = NULL;
   10cca:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   10cce:	d10c      	bne.n	10cea <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   10cd0:	2d00      	cmp	r5, #0
   10cd2:	462b      	mov	r3, r5
   10cd4:	bf38      	it	cc
   10cd6:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10cd8:	b12b      	cbz	r3, 10ce6 <process_event+0xaa>
				mgr->refs += 1U;
   10cda:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10cdc:	681b      	ldr	r3, [r3, #0]
   10cde:	3201      	adds	r2, #1
   10ce0:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10ce2:	2b00      	cmp	r3, #0
   10ce4:	d1f8      	bne.n	10cd8 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10ce6:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   10cea:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   10cec:	4620      	mov	r0, r4
   10cee:	f00c f88f 	bl	1ce10 <process_recheck>
   10cf2:	4606      	mov	r6, r0
   10cf4:	2800      	cmp	r0, #0
   10cf6:	d0d1      	beq.n	10c9c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10cf8:	8b23      	ldrh	r3, [r4, #24]
   10cfa:	f043 0320 	orr.w	r3, r3, #32
   10cfe:	8323      	strh	r3, [r4, #24]
   10d00:	e7cb      	b.n	10c9a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   10d02:	2b04      	cmp	r3, #4
   10d04:	d10c      	bne.n	10d20 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10d06:	f021 0107 	bic.w	r1, r1, #7
   10d0a:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   10d0c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   10d0e:	4620      	mov	r0, r4
   10d10:	f00c f87e 	bl	1ce10 <process_recheck>
   10d14:	4605      	mov	r5, r0
   10d16:	2800      	cmp	r0, #0
   10d18:	d0bf      	beq.n	10c9a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10d1a:	f041 0120 	orr.w	r1, r1, #32
   10d1e:	8321      	strh	r1, [r4, #24]
   10d20:	2500      	movs	r5, #0
   10d22:	e7ba      	b.n	10c9a <process_event+0x5e>
		} else if (evt == EVT_START) {
   10d24:	2803      	cmp	r0, #3
   10d26:	d109      	bne.n	10d3c <process_event+0x100>
			transit = mgr->transitions->start;
   10d28:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10d2a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   10d2e:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10d30:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   10d34:	8323      	strh	r3, [r4, #24]
}
   10d36:	2500      	movs	r5, #0
		res = 0;
   10d38:	462f      	mov	r7, r5
   10d3a:	e7af      	b.n	10c9c <process_event+0x60>
		} else if (evt == EVT_STOP) {
   10d3c:	2804      	cmp	r0, #4
   10d3e:	d106      	bne.n	10d4e <process_event+0x112>
			transit = mgr->transitions->stop;
   10d40:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10d42:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   10d46:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10d48:	f043 0304 	orr.w	r3, r3, #4
   10d4c:	e7f2      	b.n	10d34 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   10d4e:	2805      	cmp	r0, #5
   10d50:	d106      	bne.n	10d60 <process_event+0x124>
			transit = mgr->transitions->reset;
   10d52:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10d54:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   10d58:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10d5a:	f043 0305 	orr.w	r3, r3, #5
   10d5e:	e7e9      	b.n	10d34 <process_event+0xf8>
   10d60:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   10d62:	462e      	mov	r6, r5
   10d64:	e7e8      	b.n	10d38 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   10d66:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   10d68:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   10d6c:	8321      	strh	r1, [r4, #24]
   10d6e:	f38b 8811 	msr	BASEPRI, fp
   10d72:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   10d76:	bb03      	cbnz	r3, 10dba <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   10d78:	2d00      	cmp	r5, #0
   10d7a:	d133      	bne.n	10de4 <process_event+0x1a8>
			if (transit != NULL) {
   10d7c:	b116      	cbz	r6, 10d84 <process_event+0x148>
				transit(mgr, transition_complete);
   10d7e:	4921      	ldr	r1, [pc, #132]	; (10e04 <process_event+0x1c8>)
   10d80:	4620      	mov	r0, r4
   10d82:	47b0      	blx	r6
	__asm__ volatile(
   10d84:	f04f 0340 	mov.w	r3, #64	; 0x40
   10d88:	f3ef 8b11 	mrs	fp, BASEPRI
   10d8c:	f383 8811 	msr	BASEPRI, r3
   10d90:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   10d94:	8b23      	ldrh	r3, [r4, #24]
   10d96:	f023 0308 	bic.w	r3, r3, #8
   10d9a:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   10d9c:	8b23      	ldrh	r3, [r4, #24]
   10d9e:	06da      	lsls	r2, r3, #27
   10da0:	d528      	bpl.n	10df4 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   10da2:	f023 0310 	bic.w	r3, r3, #16
   10da6:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   10da8:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   10daa:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   10dae:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   10db2:	2900      	cmp	r1, #0
   10db4:	f47f af5b 	bne.w	10c6e <process_event+0x32>
out:
   10db8:	e751      	b.n	10c5e <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10dba:	68a1      	ldr	r1, [r4, #8]
   10dbc:	2900      	cmp	r1, #0
   10dbe:	d0db      	beq.n	10d78 <process_event+0x13c>
	return node->next;
   10dc0:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
   10dc2:	f8d1 b004 	ldr.w	fp, [r1, #4]
   10dc6:	2b00      	cmp	r3, #0
   10dc8:	bf38      	it	cc
   10dca:	2300      	movcc	r3, #0
   10dcc:	4699      	mov	r9, r3
   10dce:	4652      	mov	r2, sl
   10dd0:	463b      	mov	r3, r7
   10dd2:	4620      	mov	r0, r4
   10dd4:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10dd6:	f1b9 0f00 	cmp.w	r9, #0
   10dda:	d0cd      	beq.n	10d78 <process_event+0x13c>
   10ddc:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10de0:	4649      	mov	r1, r9
   10de2:	e7ee      	b.n	10dc2 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10de4:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   10de6:	463b      	mov	r3, r7
   10de8:	4652      	mov	r2, sl
   10dea:	4620      	mov	r0, r4
   10dec:	682d      	ldr	r5, [r5, #0]
   10dee:	f00c f82b 	bl	1ce48 <notify_one>
   10df2:	e7c1      	b.n	10d78 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   10df4:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   10df8:	bf1e      	ittt	ne
   10dfa:	f023 0320 	bicne.w	r3, r3, #32
   10dfe:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   10e00:	2102      	movne	r1, #2
   10e02:	e7d2      	b.n	10daa <process_event+0x16e>
   10e04:	0001ce75 	.word	0x0001ce75

00010e08 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   10e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e0c:	b0a5      	sub	sp, #148	; 0x94
   10e0e:	4688      	mov	r8, r1
   10e10:	9003      	str	r0, [sp, #12]
   10e12:	4691      	mov	r9, r2
   10e14:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   10e16:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   10e18:	f899 0000 	ldrb.w	r0, [r9]
   10e1c:	b910      	cbnz	r0, 10e24 <cbvprintf+0x1c>
			OUTC(' ');
			--width;
		}
	}

	return count;
   10e1e:	4628      	mov	r0, r5
   10e20:	f000 be15 	b.w	11a4e <cbvprintf+0xc46>
		if (*fp != '%') {
   10e24:	f109 0301 	add.w	r3, r9, #1
   10e28:	2825      	cmp	r0, #37	; 0x25
   10e2a:	9309      	str	r3, [sp, #36]	; 0x24
   10e2c:	d007      	beq.n	10e3e <cbvprintf+0x36>
			OUTC(*fp++);
   10e2e:	4641      	mov	r1, r8
			OUTC('%');
   10e30:	9b03      	ldr	r3, [sp, #12]
   10e32:	4798      	blx	r3
   10e34:	2800      	cmp	r0, #0
   10e36:	f2c0 860a 	blt.w	11a4e <cbvprintf+0xc46>
   10e3a:	3501      	adds	r5, #1
		if (bps == NULL) {
   10e3c:	e245      	b.n	112ca <cbvprintf+0x4c2>
		} state = {
   10e3e:	2218      	movs	r2, #24
   10e40:	2100      	movs	r1, #0
   10e42:	a816      	add	r0, sp, #88	; 0x58
   10e44:	f00c ff10 	bl	1dc68 <memset>
	if (*sp == '%') {
   10e48:	f899 3001 	ldrb.w	r3, [r9, #1]
   10e4c:	2b25      	cmp	r3, #37	; 0x25
   10e4e:	d079      	beq.n	10f44 <cbvprintf+0x13c>
   10e50:	2200      	movs	r2, #0
   10e52:	9809      	ldr	r0, [sp, #36]	; 0x24
   10e54:	4616      	mov	r6, r2
   10e56:	4696      	mov	lr, r2
   10e58:	4617      	mov	r7, r2
   10e5a:	4694      	mov	ip, r2
   10e5c:	4601      	mov	r1, r0
		switch (*sp) {
   10e5e:	f810 3b01 	ldrb.w	r3, [r0], #1
   10e62:	2b2b      	cmp	r3, #43	; 0x2b
   10e64:	f000 809e 	beq.w	10fa4 <cbvprintf+0x19c>
   10e68:	f200 8095 	bhi.w	10f96 <cbvprintf+0x18e>
   10e6c:	2b20      	cmp	r3, #32
   10e6e:	f000 809b 	beq.w	10fa8 <cbvprintf+0x1a0>
   10e72:	2b23      	cmp	r3, #35	; 0x23
   10e74:	f000 809b 	beq.w	10fae <cbvprintf+0x1a6>
   10e78:	f1bc 0f00 	cmp.w	ip, #0
   10e7c:	d005      	beq.n	10e8a <cbvprintf+0x82>
   10e7e:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   10e82:	f040 0004 	orr.w	r0, r0, #4
   10e86:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   10e8a:	b12f      	cbz	r7, 10e98 <cbvprintf+0x90>
   10e8c:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   10e90:	f040 0008 	orr.w	r0, r0, #8
   10e94:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   10e98:	f1be 0f00 	cmp.w	lr, #0
   10e9c:	d005      	beq.n	10eaa <cbvprintf+0xa2>
   10e9e:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   10ea2:	f040 0010 	orr.w	r0, r0, #16
   10ea6:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   10eaa:	b12e      	cbz	r6, 10eb8 <cbvprintf+0xb0>
   10eac:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   10eb0:	f040 0020 	orr.w	r0, r0, #32
   10eb4:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   10eb8:	b12a      	cbz	r2, 10ec6 <cbvprintf+0xbe>
   10eba:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   10ebe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10ec2:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	if (conv->flag_zero && conv->flag_dash) {
   10ec6:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   10eca:	f002 0044 	and.w	r0, r2, #68	; 0x44
   10ece:	2844      	cmp	r0, #68	; 0x44
   10ed0:	d103      	bne.n	10eda <cbvprintf+0xd2>
		conv->flag_zero = false;
   10ed2:	f36f 1286 	bfc	r2, #6, #1
   10ed6:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	conv->width_present = true;
   10eda:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
	if (*sp == '*') {
   10ede:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   10ee0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   10ee4:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	if (*sp == '*') {
   10ee8:	d17c      	bne.n	10fe4 <cbvprintf+0x1dc>
		conv->width_star = true;
   10eea:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
   10eee:	f042 0201 	orr.w	r2, r2, #1
   10ef2:	1c4b      	adds	r3, r1, #1
   10ef4:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
	conv->prec_present = (*sp == '.');
   10ef8:	781a      	ldrb	r2, [r3, #0]
   10efa:	2a2e      	cmp	r2, #46	; 0x2e
   10efc:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
   10f00:	bf0c      	ite	eq
   10f02:	2101      	moveq	r1, #1
   10f04:	2100      	movne	r1, #0
   10f06:	f361 0241 	bfi	r2, r1, #1, #1
   10f0a:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
	if (!conv->prec_present) {
   10f0e:	d175      	bne.n	10ffc <cbvprintf+0x1f4>
	if (*sp == '*') {
   10f10:	785a      	ldrb	r2, [r3, #1]
   10f12:	2a2a      	cmp	r2, #42	; 0x2a
   10f14:	d06b      	beq.n	10fee <cbvprintf+0x1e6>
   10f16:	3301      	adds	r3, #1
	size_t val = 0;
   10f18:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   10f1a:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   10f1c:	4618      	mov	r0, r3
   10f1e:	f810 2b01 	ldrb.w	r2, [r0], #1
   10f22:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   10f26:	2f09      	cmp	r7, #9
   10f28:	f240 80aa 	bls.w	11080 <cbvprintf+0x278>
	conv->unsupported |= ((conv->prec_value < 0)
   10f2c:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
	conv->prec_value = prec;
   10f30:	911a      	str	r1, [sp, #104]	; 0x68
	conv->unsupported |= ((conv->prec_value < 0)
   10f32:	f3c2 0040 	ubfx	r0, r2, #1, #1
   10f36:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   10f3a:	f361 0241 	bfi	r2, r1, #1, #1
   10f3e:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	return sp;
   10f42:	e05b      	b.n	10ffc <cbvprintf+0x1f4>
		conv->specifier = *sp++;
   10f44:	f109 0202 	add.w	r2, r9, #2
   10f48:	9209      	str	r2, [sp, #36]	; 0x24
   10f4a:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
		if (conv->width_star) {
   10f4e:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   10f52:	07de      	lsls	r6, r3, #31
   10f54:	f140 816f 	bpl.w	11236 <cbvprintf+0x42e>
			width = va_arg(ap, int);
   10f58:	f854 2b04 	ldr.w	r2, [r4], #4
   10f5c:	9208      	str	r2, [sp, #32]
			if (width < 0) {
   10f5e:	2a00      	cmp	r2, #0
   10f60:	da08      	bge.n	10f74 <cbvprintf+0x16c>
				conv->flag_dash = true;
   10f62:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   10f66:	f042 0204 	orr.w	r2, r2, #4
   10f6a:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
				width = -width;
   10f6e:	9a08      	ldr	r2, [sp, #32]
   10f70:	4252      	negs	r2, r2
		int width = -1;
   10f72:	9208      	str	r2, [sp, #32]
		if (conv->prec_star) {
   10f74:	0758      	lsls	r0, r3, #29
   10f76:	f140 8166 	bpl.w	11246 <cbvprintf+0x43e>
			int arg = va_arg(ap, int);
   10f7a:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   10f7e:	2f00      	cmp	r7, #0
   10f80:	f280 8165 	bge.w	1124e <cbvprintf+0x446>
				conv->prec_present = false;
   10f84:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   10f88:	f36f 0341 	bfc	r3, #1, #1
   10f8c:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
		int precision = -1;
   10f90:	f04f 37ff 	mov.w	r7, #4294967295
   10f94:	e15b      	b.n	1124e <cbvprintf+0x446>
		switch (*sp) {
   10f96:	2b2d      	cmp	r3, #45	; 0x2d
   10f98:	d00b      	beq.n	10fb2 <cbvprintf+0x1aa>
   10f9a:	2b30      	cmp	r3, #48	; 0x30
   10f9c:	f47f af6c 	bne.w	10e78 <cbvprintf+0x70>
			conv->flag_zero = true;
   10fa0:	2201      	movs	r2, #1
	} while (loop);
   10fa2:	e75b      	b.n	10e5c <cbvprintf+0x54>
			conv->flag_plus = true;
   10fa4:	2701      	movs	r7, #1
   10fa6:	e759      	b.n	10e5c <cbvprintf+0x54>
			conv->flag_space = true;
   10fa8:	f04f 0e01 	mov.w	lr, #1
   10fac:	e756      	b.n	10e5c <cbvprintf+0x54>
			conv->flag_hash = true;
   10fae:	2601      	movs	r6, #1
   10fb0:	e754      	b.n	10e5c <cbvprintf+0x54>
		switch (*sp) {
   10fb2:	f04f 0c01 	mov.w	ip, #1
   10fb6:	e751      	b.n	10e5c <cbvprintf+0x54>
		val = 10U * val + *sp++ - '0';
   10fb8:	fb0c 0202 	mla	r2, ip, r2, r0
   10fbc:	3a30      	subs	r2, #48	; 0x30
   10fbe:	4633      	mov	r3, r6
   10fc0:	461e      	mov	r6, r3
   10fc2:	f816 0b01 	ldrb.w	r0, [r6], #1
   10fc6:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   10fca:	2f09      	cmp	r7, #9
   10fcc:	d9f4      	bls.n	10fb8 <cbvprintf+0x1b0>
	if (sp != wp) {
   10fce:	4299      	cmp	r1, r3
   10fd0:	d092      	beq.n	10ef8 <cbvprintf+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
   10fd2:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
		conv->width_value = width;
   10fd6:	9219      	str	r2, [sp, #100]	; 0x64
				      || (width != (size_t)conv->width_value));
   10fd8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   10fda:	f362 0141 	bfi	r1, r2, #1, #1
   10fde:	f88d 1060 	strb.w	r1, [sp, #96]	; 0x60
   10fe2:	e789      	b.n	10ef8 <cbvprintf+0xf0>
   10fe4:	460b      	mov	r3, r1
	size_t val = 0;
   10fe6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   10fe8:	f04f 0c0a 	mov.w	ip, #10
   10fec:	e7e8      	b.n	10fc0 <cbvprintf+0x1b8>
		conv->prec_star = true;
   10fee:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
   10ff2:	f042 0204 	orr.w	r2, r2, #4
   10ff6:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
		return ++sp;
   10ffa:	3302      	adds	r3, #2
	switch (*sp) {
   10ffc:	4619      	mov	r1, r3
   10ffe:	f811 2b01 	ldrb.w	r2, [r1], #1
   11002:	2a6c      	cmp	r2, #108	; 0x6c
   11004:	d05c      	beq.n	110c0 <cbvprintf+0x2b8>
   11006:	d840      	bhi.n	1108a <cbvprintf+0x282>
   11008:	2a68      	cmp	r2, #104	; 0x68
   1100a:	d046      	beq.n	1109a <cbvprintf+0x292>
   1100c:	2a6a      	cmp	r2, #106	; 0x6a
   1100e:	d061      	beq.n	110d4 <cbvprintf+0x2cc>
   11010:	2a4c      	cmp	r2, #76	; 0x4c
   11012:	d067      	beq.n	110e4 <cbvprintf+0x2dc>
   11014:	4619      	mov	r1, r3
	conv->specifier = *sp++;
   11016:	460b      	mov	r3, r1
   11018:	f813 2b01 	ldrb.w	r2, [r3], #1
   1101c:	9309      	str	r3, [sp, #36]	; 0x24
	switch (conv->specifier) {
   1101e:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   11020:	f88d 2063 	strb.w	r2, [sp, #99]	; 0x63
	switch (conv->specifier) {
   11024:	f200 80df 	bhi.w	111e6 <cbvprintf+0x3de>
   11028:	2a57      	cmp	r2, #87	; 0x57
   1102a:	d868      	bhi.n	110fe <cbvprintf+0x2f6>
   1102c:	2a41      	cmp	r2, #65	; 0x41
   1102e:	d004      	beq.n	1103a <cbvprintf+0x232>
   11030:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   11034:	2b02      	cmp	r3, #2
   11036:	f200 80d6 	bhi.w	111e6 <cbvprintf+0x3de>
		conv->specifier_cat = SPECIFIER_FP;
   1103a:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
			|| (conv->specifier == 'A');
   1103e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
   11042:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
   11044:	f1a2 0a41 	sub.w	sl, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
   11048:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
   1104c:	f1da 0200 	rsbs	r2, sl, #0
		conv->specifier_a = (conv->specifier == 'a')
   11050:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
		conv->specifier_cat = SPECIFIER_FP;
   11054:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
			|| (conv->specifier == 'A');
   11058:	eb42 020a 	adc.w	r2, r2, sl
		conv->specifier_a = (conv->specifier == 'a')
   1105c:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
   11060:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
   11062:	f88d 1061 	strb.w	r1, [sp, #97]	; 0x61
		if (conv->specifier_a
   11066:	b2cb      	uxtb	r3, r1
   11068:	f100 80e3 	bmi.w	11232 <cbvprintf+0x42a>
		if (conv->length_mod == LENGTH_L) {
   1106c:	f003 0278 	and.w	r2, r3, #120	; 0x78
   11070:	2a18      	cmp	r2, #24
   11072:	f040 80b5 	bne.w	111e0 <cbvprintf+0x3d8>
			conv->length_mod = LENGTH_NONE;
   11076:	f36f 03c6 	bfc	r3, #3, #4
   1107a:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
   1107e:	e09c      	b.n	111ba <cbvprintf+0x3b2>
		val = 10U * val + *sp++ - '0';
   11080:	fb06 2101 	mla	r1, r6, r1, r2
   11084:	3930      	subs	r1, #48	; 0x30
   11086:	4603      	mov	r3, r0
   11088:	e748      	b.n	10f1c <cbvprintf+0x114>
	switch (*sp) {
   1108a:	2a74      	cmp	r2, #116	; 0x74
   1108c:	d026      	beq.n	110dc <cbvprintf+0x2d4>
   1108e:	2a7a      	cmp	r2, #122	; 0x7a
   11090:	d1c0      	bne.n	11014 <cbvprintf+0x20c>
		conv->length_mod = LENGTH_Z;
   11092:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   11096:	2206      	movs	r2, #6
   11098:	e00d      	b.n	110b6 <cbvprintf+0x2ae>
		if (*++sp == 'h') {
   1109a:	785a      	ldrb	r2, [r3, #1]
   1109c:	2a68      	cmp	r2, #104	; 0x68
   1109e:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
   110a2:	d106      	bne.n	110b2 <cbvprintf+0x2aa>
			conv->length_mod = LENGTH_HH;
   110a4:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   110a6:	f361 02c6 	bfi	r2, r1, #3, #4
   110aa:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
			++sp;
   110ae:	1c99      	adds	r1, r3, #2
   110b0:	e7b1      	b.n	11016 <cbvprintf+0x20e>
			conv->length_mod = LENGTH_H;
   110b2:	4613      	mov	r3, r2
   110b4:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   110b6:	f362 03c6 	bfi	r3, r2, #3, #4
   110ba:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
		break;
   110be:	e7aa      	b.n	11016 <cbvprintf+0x20e>
		if (*++sp == 'l') {
   110c0:	785a      	ldrb	r2, [r3, #1]
   110c2:	2a6c      	cmp	r2, #108	; 0x6c
   110c4:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
   110c8:	d101      	bne.n	110ce <cbvprintf+0x2c6>
			conv->length_mod = LENGTH_LL;
   110ca:	2104      	movs	r1, #4
   110cc:	e7eb      	b.n	110a6 <cbvprintf+0x29e>
			conv->length_mod = LENGTH_L;
   110ce:	4613      	mov	r3, r2
   110d0:	2203      	movs	r2, #3
   110d2:	e7f0      	b.n	110b6 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
   110d4:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   110d8:	2205      	movs	r2, #5
   110da:	e7ec      	b.n	110b6 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
   110dc:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   110e0:	2207      	movs	r2, #7
   110e2:	e7e8      	b.n	110b6 <cbvprintf+0x2ae>
		conv->unsupported = true;
   110e4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
   110e8:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   110ec:	f023 0302 	bic.w	r3, r3, #2
   110f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   110f4:	f043 0302 	orr.w	r3, r3, #2
   110f8:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
		break;
   110fc:	e78b      	b.n	11016 <cbvprintf+0x20e>
   110fe:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
   11102:	2b20      	cmp	r3, #32
   11104:	d86f      	bhi.n	111e6 <cbvprintf+0x3de>
   11106:	a101      	add	r1, pc, #4	; (adr r1, 1110c <cbvprintf+0x304>)
   11108:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1110c:	000111bf 	.word	0x000111bf
   11110:	000111e7 	.word	0x000111e7
   11114:	000111e7 	.word	0x000111e7
   11118:	000111e7 	.word	0x000111e7
   1111c:	000111e7 	.word	0x000111e7
   11120:	000111e7 	.word	0x000111e7
   11124:	000111e7 	.word	0x000111e7
   11128:	000111e7 	.word	0x000111e7
   1112c:	000111e7 	.word	0x000111e7
   11130:	0001103b 	.word	0x0001103b
   11134:	000111e7 	.word	0x000111e7
   11138:	000111bf 	.word	0x000111bf
   1113c:	00011191 	.word	0x00011191
   11140:	0001103b 	.word	0x0001103b
   11144:	0001103b 	.word	0x0001103b
   11148:	0001103b 	.word	0x0001103b
   1114c:	000111e7 	.word	0x000111e7
   11150:	00011191 	.word	0x00011191
   11154:	000111e7 	.word	0x000111e7
   11158:	000111e7 	.word	0x000111e7
   1115c:	000111e7 	.word	0x000111e7
   11160:	000111e7 	.word	0x000111e7
   11164:	000111f5 	.word	0x000111f5
   11168:	000111bf 	.word	0x000111bf
   1116c:	00011215 	.word	0x00011215
   11170:	000111e7 	.word	0x000111e7
   11174:	000111e7 	.word	0x000111e7
   11178:	00011215 	.word	0x00011215
   1117c:	000111e7 	.word	0x000111e7
   11180:	000111bf 	.word	0x000111bf
   11184:	000111e7 	.word	0x000111e7
   11188:	000111e7 	.word	0x000111e7
   1118c:	000111bf 	.word	0x000111bf
		conv->specifier_cat = SPECIFIER_SINT;
   11190:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
   11194:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
   11196:	f361 0302 	bfi	r3, r1, #0, #3
   1119a:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		if (conv->length_mod == LENGTH_UPPER_L) {
   1119e:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   111a2:	f003 0378 	and.w	r3, r3, #120	; 0x78
   111a6:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
   111a8:	bf02      	ittt	eq
   111aa:	f89d 1060 	ldrbeq.w	r1, [sp, #96]	; 0x60
   111ae:	f041 0101 	orreq.w	r1, r1, #1
   111b2:	f88d 1060 	strbeq.w	r1, [sp, #96]	; 0x60
		if (conv->specifier == 'c') {
   111b6:	2a63      	cmp	r2, #99	; 0x63
   111b8:	d005      	beq.n	111c6 <cbvprintf+0x3be>
	bool unsupported = false;
   111ba:	2300      	movs	r3, #0
   111bc:	e006      	b.n	111cc <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_UINT;
   111be:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
   111c2:	2102      	movs	r1, #2
   111c4:	e7e7      	b.n	11196 <cbvprintf+0x38e>
			unsupported = (conv->length_mod != LENGTH_NONE);
   111c6:	3b00      	subs	r3, #0
   111c8:	bf18      	it	ne
   111ca:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   111cc:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   111d0:	f3c2 0140 	ubfx	r1, r2, #1, #1
   111d4:	430b      	orrs	r3, r1
   111d6:	f363 0241 	bfi	r2, r3, #1, #1
   111da:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	return sp;
   111de:	e6b6      	b.n	10f4e <cbvprintf+0x146>
		} else if ((conv->length_mod != LENGTH_NONE)
   111e0:	f013 0f38 	tst.w	r3, #56	; 0x38
   111e4:	d0e9      	beq.n	111ba <cbvprintf+0x3b2>
			conv->invalid = true;
   111e6:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   111ea:	f043 0301 	orr.w	r3, r3, #1
   111ee:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
   111f2:	e7e2      	b.n	111ba <cbvprintf+0x3b2>
		conv->specifier_cat = SPECIFIER_PTR;
   111f4:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
   111f8:	2203      	movs	r2, #3
   111fa:	f362 0302 	bfi	r3, r2, #0, #3
   111fe:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		if (conv->length_mod == LENGTH_UPPER_L) {
   11202:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   11206:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1120a:	f1a3 0740 	sub.w	r7, r3, #64	; 0x40
   1120e:	427b      	negs	r3, r7
   11210:	417b      	adcs	r3, r7
   11212:	e7db      	b.n	111cc <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_PTR;
   11214:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
   11218:	2203      	movs	r2, #3
   1121a:	f362 0302 	bfi	r3, r2, #0, #3
   1121e:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		if (conv->length_mod != LENGTH_NONE) {
   11222:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   11226:	f013 0f78 	tst.w	r3, #120	; 0x78
   1122a:	bf14      	ite	ne
   1122c:	2301      	movne	r3, #1
   1122e:	2300      	moveq	r3, #0
   11230:	e7cc      	b.n	111cc <cbvprintf+0x3c4>
			unsupported = true;
   11232:	2301      	movs	r3, #1
   11234:	e7ca      	b.n	111cc <cbvprintf+0x3c4>
		} else if (conv->width_present) {
   11236:	f99d 2060 	ldrsb.w	r2, [sp, #96]	; 0x60
   1123a:	2a00      	cmp	r2, #0
			width = conv->width_value;
   1123c:	bfb4      	ite	lt
   1123e:	9a19      	ldrlt	r2, [sp, #100]	; 0x64
		int width = -1;
   11240:	f04f 32ff 	movge.w	r2, #4294967295
   11244:	e695      	b.n	10f72 <cbvprintf+0x16a>
		} else if (conv->prec_present) {
   11246:	0799      	lsls	r1, r3, #30
   11248:	f57f aea2 	bpl.w	10f90 <cbvprintf+0x188>
			precision = conv->prec_value;
   1124c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
		conv->pad0_value = 0;
   1124e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   11250:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
		    && (conv->specifier_cat == SPECIFIER_FP)
   11254:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   11258:	f003 0307 	and.w	r3, r3, #7
   1125c:	2b04      	cmp	r3, #4
   1125e:	d109      	bne.n	11274 <cbvprintf+0x46c>
		    && !conv->prec_present) {
   11260:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   11264:	079a      	lsls	r2, r3, #30
   11266:	d405      	bmi.n	11274 <cbvprintf+0x46c>
			if (conv->specifier_a) {
   11268:	f99d 3061 	ldrsb.w	r3, [sp, #97]	; 0x61
				precision = 6;
   1126c:	2b00      	cmp	r3, #0
   1126e:	bfb4      	ite	lt
   11270:	270d      	movlt	r7, #13
   11272:	2706      	movge	r7, #6
			= (enum specifier_cat_enum)conv->specifier_cat;
   11274:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
			= (enum length_mod_enum)conv->length_mod;
   11278:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
		enum specifier_cat_enum specifier_cat
   1127c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   11280:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   11282:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   11286:	d136      	bne.n	112f6 <cbvprintf+0x4ee>
			switch (length_mod) {
   11288:	1ecb      	subs	r3, r1, #3
   1128a:	2b04      	cmp	r3, #4
   1128c:	d820      	bhi.n	112d0 <cbvprintf+0x4c8>
   1128e:	e8df f003 	tbb	[pc, r3]
   11292:	0703      	.short	0x0703
   11294:	1f07      	.short	0x1f07
   11296:	1f          	.byte	0x1f
   11297:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   11298:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
   1129c:	17d3      	asrs	r3, r2, #31
   1129e:	e004      	b.n	112aa <cbvprintf+0x4a2>
					(sint_value_type)va_arg(ap, intmax_t);
   112a0:	3407      	adds	r4, #7
   112a2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   112a6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
   112aa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		if (conv->invalid || conv->unsupported) {
   112ae:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
   112b2:	07b3      	lsls	r3, r6, #30
   112b4:	d055      	beq.n	11362 <cbvprintf+0x55a>
			OUTS(sp, fp);
   112b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   112b8:	9803      	ldr	r0, [sp, #12]
   112ba:	464a      	mov	r2, r9
   112bc:	4641      	mov	r1, r8
   112be:	f00c f9af 	bl	1d620 <outs>
   112c2:	2800      	cmp	r0, #0
   112c4:	f2c0 83c3 	blt.w	11a4e <cbvprintf+0xc46>
   112c8:	4405      	add	r5, r0
			while (pad_len-- > 0) {
   112ca:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   112ce:	e5a3      	b.n	10e18 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   112d0:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
   112d4:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   112d6:	ea4f 73e2 	mov.w	r3, r2, asr #31
   112da:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
			if (length_mod == LENGTH_HH) {
   112de:	d105      	bne.n	112ec <cbvprintf+0x4e4>
				value->uint = (unsigned char)value->uint;
   112e0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
				value->uint = (unsigned short)value->uint;
   112e4:	9316      	str	r3, [sp, #88]	; 0x58
   112e6:	2300      	movs	r3, #0
   112e8:	9317      	str	r3, [sp, #92]	; 0x5c
   112ea:	e7e0      	b.n	112ae <cbvprintf+0x4a6>
			} else if (length_mod == LENGTH_H) {
   112ec:	2902      	cmp	r1, #2
   112ee:	d1de      	bne.n	112ae <cbvprintf+0x4a6>
				value->sint = (short)value->sint;
   112f0:	f9bd 2058 	ldrsh.w	r2, [sp, #88]	; 0x58
   112f4:	e7d2      	b.n	1129c <cbvprintf+0x494>
		} else if (specifier_cat == SPECIFIER_UINT) {
   112f6:	2b02      	cmp	r3, #2
   112f8:	d123      	bne.n	11342 <cbvprintf+0x53a>
			switch (length_mod) {
   112fa:	1ecb      	subs	r3, r1, #3
   112fc:	2b04      	cmp	r3, #4
   112fe:	d813      	bhi.n	11328 <cbvprintf+0x520>
   11300:	e8df f003 	tbb	[pc, r3]
   11304:	120a0a03 	.word	0x120a0a03
   11308:	12          	.byte	0x12
   11309:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   1130a:	6822      	ldr	r2, [r4, #0]
   1130c:	9216      	str	r2, [sp, #88]	; 0x58
   1130e:	2300      	movs	r3, #0
   11310:	1d20      	adds	r0, r4, #4
   11312:	9317      	str	r3, [sp, #92]	; 0x5c
					(uint_value_type)va_arg(ap, size_t);
   11314:	4604      	mov	r4, r0
   11316:	e7ca      	b.n	112ae <cbvprintf+0x4a6>
					(uint_value_type)va_arg(ap,
   11318:	3407      	adds	r4, #7
   1131a:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
   1131e:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   11322:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
				break;
   11326:	e7f5      	b.n	11314 <cbvprintf+0x50c>
					(uint_value_type)va_arg(ap, size_t);
   11328:	f854 3b04 	ldr.w	r3, [r4], #4
   1132c:	9316      	str	r3, [sp, #88]	; 0x58
			if (length_mod == LENGTH_HH) {
   1132e:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   11330:	f04f 0300 	mov.w	r3, #0
   11334:	9317      	str	r3, [sp, #92]	; 0x5c
			if (length_mod == LENGTH_HH) {
   11336:	d0d3      	beq.n	112e0 <cbvprintf+0x4d8>
			} else if (length_mod == LENGTH_H) {
   11338:	2902      	cmp	r1, #2
   1133a:	d1b8      	bne.n	112ae <cbvprintf+0x4a6>
				value->uint = (unsigned short)value->uint;
   1133c:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   11340:	e7d0      	b.n	112e4 <cbvprintf+0x4dc>
		} else if (specifier_cat == SPECIFIER_FP) {
   11342:	2b04      	cmp	r3, #4
   11344:	d107      	bne.n	11356 <cbvprintf+0x54e>
			if (length_mod == LENGTH_UPPER_L) {
   11346:	3407      	adds	r4, #7
   11348:	f024 0407 	bic.w	r4, r4, #7
   1134c:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
   11350:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   11354:	e7ab      	b.n	112ae <cbvprintf+0x4a6>
		} else if (specifier_cat == SPECIFIER_PTR) {
   11356:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   11358:	bf04      	itt	eq
   1135a:	f854 3b04 	ldreq.w	r3, [r4], #4
   1135e:	9316      	streq	r3, [sp, #88]	; 0x58
   11360:	e7a5      	b.n	112ae <cbvprintf+0x4a6>
		switch (conv->specifier) {
   11362:	f89d 9063 	ldrb.w	r9, [sp, #99]	; 0x63
   11366:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
   1136a:	d8ae      	bhi.n	112ca <cbvprintf+0x4c2>
   1136c:	f1b9 0f57 	cmp.w	r9, #87	; 0x57
   11370:	f200 80a6 	bhi.w	114c0 <cbvprintf+0x6b8>
   11374:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
   11378:	f000 80ec 	beq.w	11554 <cbvprintf+0x74c>
   1137c:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
   11380:	d9a3      	bls.n	112ca <cbvprintf+0x4c2>
   11382:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
   11386:	d003      	beq.n	11390 <cbvprintf+0x588>
   11388:	f1a9 0345 	sub.w	r3, r9, #69	; 0x45
   1138c:	2b02      	cmp	r3, #2
   1138e:	d89c      	bhi.n	112ca <cbvprintf+0x4c2>
	} u = {
   11390:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
	if ((u.u64 & SIGN_MASK) != 0U) {
   11394:	2a00      	cmp	r2, #0
   11396:	f173 0100 	sbcs.w	r1, r3, #0
   1139a:	f2c0 81d3 	blt.w	11744 <cbvprintf+0x93c>
	} else if (conv->flag_plus) {
   1139e:	0731      	lsls	r1, r6, #28
   113a0:	f100 81d2 	bmi.w	11748 <cbvprintf+0x940>
		*sign = ' ';
   113a4:	f016 0610 	ands.w	r6, r6, #16
   113a8:	bf18      	it	ne
   113aa:	2620      	movne	r6, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   113ac:	f3c3 5b0a 	ubfx	fp, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   113b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
   113b4:	9206      	str	r2, [sp, #24]
   113b6:	9307      	str	r3, [sp, #28]
   113b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   113bc:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	bool is_subnormal = (expo == 0) && (fract != 0);
   113c0:	f1bb 0f00 	cmp.w	fp, #0
   113c4:	f040 81c2 	bne.w	1174c <cbvprintf+0x944>
   113c8:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   113cc:	4313      	orrs	r3, r2
   113ce:	bf14      	ite	ne
   113d0:	f04f 0c01 	movne.w	ip, #1
   113d4:	f04f 0c00 	moveq.w	ip, #0
	fract <<= EXPONENT_BITS;
   113d8:	9907      	ldr	r1, [sp, #28]
   113da:	02cb      	lsls	r3, r1, #11
   113dc:	9906      	ldr	r1, [sp, #24]
   113de:	02ca      	lsls	r2, r1, #11
   113e0:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
	if ((expo | fract) != 0) {
   113e4:	4658      	mov	r0, fp
   113e6:	ea4b 0102 	orr.w	r1, fp, r2
   113ea:	910c      	str	r1, [sp, #48]	; 0x30
   113ec:	17c1      	asrs	r1, r0, #31
   113ee:	4319      	orrs	r1, r3
   113f0:	910d      	str	r1, [sp, #52]	; 0x34
   113f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
		c = 'f';
   113f6:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
   113fa:	bf08      	it	eq
   113fc:	f04f 0966 	moveq.w	r9, #102	; 0x66
	if ((expo | fract) != 0) {
   11400:	4301      	orrs	r1, r0
	fract &= ~SIGN_MASK;
   11402:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	if ((expo | fract) != 0) {
   11406:	f000 8214 	beq.w	11832 <cbvprintf+0xa2a>
		if (is_subnormal) {
   1140a:	f1bc 0f00 	cmp.w	ip, #0
   1140e:	f040 81d4 	bne.w	117ba <cbvprintf+0x9b2>
		fract |= BIT_63;
   11412:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11414:	9304      	str	r3, [sp, #16]
   11416:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11418:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1141c:	9305      	str	r3, [sp, #20]
   1141e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11422:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   11426:	2300      	movs	r3, #0
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   11428:	f2ab 3bfe 	subw	fp, fp, #1022	; 0x3fe
		fract |= BIT_63;
   1142c:	461a      	mov	r2, r3
		fract *= 5U;
   1142e:	2105      	movs	r1, #5
	while (expo < -2) {
   11430:	f11b 0f02 	cmn.w	fp, #2
   11434:	f2c0 81ca 	blt.w	117cc <cbvprintf+0x9c4>
   11438:	b11b      	cbz	r3, 11442 <cbvprintf+0x63a>
   1143a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1143e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	while (expo > 0) {
   11442:	f1bb 0f00 	cmp.w	fp, #0
   11446:	e9dd 3112 	ldrd	r3, r1, [sp, #72]	; 0x48
   1144a:	f300 81da 	bgt.w	11802 <cbvprintf+0x9fa>
	fract >>= (4 - expo);
   1144e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11450:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11452:	f1cb 0004 	rsb	r0, fp, #4
   11456:	f10b 0b1c 	add.w	fp, fp, #28
   1145a:	fa01 fb0b 	lsl.w	fp, r1, fp
   1145e:	f1a0 0c20 	sub.w	ip, r0, #32
   11462:	40c3      	lsrs	r3, r0
   11464:	fa21 fc0c 	lsr.w	ip, r1, ip
   11468:	ea43 030b 	orr.w	r3, r3, fp
   1146c:	ea43 030c 	orr.w	r3, r3, ip
   11470:	40c1      	lsrs	r1, r0
   11472:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
	if ((c == 'g') || (c == 'G')) {
   11476:	f009 03df 	and.w	r3, r9, #223	; 0xdf
   1147a:	2b47      	cmp	r3, #71	; 0x47
   1147c:	f040 81e0 	bne.w	11840 <cbvprintf+0xa38>
		if (decexp < (-4 + 1) || decexp > precision) {
   11480:	1cd0      	adds	r0, r2, #3
   11482:	db02      	blt.n	1148a <cbvprintf+0x682>
   11484:	4297      	cmp	r7, r2
   11486:	f280 81d7 	bge.w	11838 <cbvprintf+0xa30>
			c += 'e' - 'g';  /* e or E */
   1148a:	f1a9 0902 	sub.w	r9, r9, #2
			if (precision > 0) {
   1148e:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
   11490:	fa5f f989 	uxtb.w	r9, r9
			if (precision > 0) {
   11494:	dd00      	ble.n	11498 <cbvprintf+0x690>
				precision--;
   11496:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
   11498:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   1149c:	0699      	lsls	r1, r3, #26
   1149e:	f100 81cf 	bmi.w	11840 <cbvprintf+0xa38>
   114a2:	2f00      	cmp	r7, #0
   114a4:	bfd4      	ite	le
   114a6:	2300      	movle	r3, #0
   114a8:	2301      	movgt	r3, #1
	if (c == 'f') {
   114aa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
	bool prune_zero = false;
   114ae:	930e      	str	r3, [sp, #56]	; 0x38
	if (c == 'f') {
   114b0:	f040 81c8 	bne.w	11844 <cbvprintf+0xa3c>
		if (decimals < 0) {
   114b4:	18bb      	adds	r3, r7, r2
   114b6:	f140 81c6 	bpl.w	11846 <cbvprintf+0xa3e>
			decimals = 0;
   114ba:	f04f 0a00 	mov.w	sl, #0
   114be:	e1c6      	b.n	1184e <cbvprintf+0xa46>
   114c0:	f1a9 0358 	sub.w	r3, r9, #88	; 0x58
   114c4:	2b20      	cmp	r3, #32
   114c6:	f63f af00 	bhi.w	112ca <cbvprintf+0x4c2>
   114ca:	a201      	add	r2, pc, #4	; (adr r2, 114d0 <cbvprintf+0x6c8>)
   114cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   114d0:	000116e5 	.word	0x000116e5
   114d4:	000112cb 	.word	0x000112cb
   114d8:	000112cb 	.word	0x000112cb
   114dc:	000112cb 	.word	0x000112cb
   114e0:	000112cb 	.word	0x000112cb
   114e4:	000112cb 	.word	0x000112cb
   114e8:	000112cb 	.word	0x000112cb
   114ec:	000112cb 	.word	0x000112cb
   114f0:	000112cb 	.word	0x000112cb
   114f4:	00011391 	.word	0x00011391
   114f8:	000112cb 	.word	0x000112cb
   114fc:	00011581 	.word	0x00011581
   11500:	00011685 	.word	0x00011685
   11504:	00011391 	.word	0x00011391
   11508:	00011391 	.word	0x00011391
   1150c:	00011391 	.word	0x00011391
   11510:	000112cb 	.word	0x000112cb
   11514:	00011685 	.word	0x00011685
   11518:	000112cb 	.word	0x000112cb
   1151c:	000112cb 	.word	0x000112cb
   11520:	000112cb 	.word	0x000112cb
   11524:	000112cb 	.word	0x000112cb
   11528:	0001171b 	.word	0x0001171b
   1152c:	000116e5 	.word	0x000116e5
   11530:	000116e9 	.word	0x000116e9
   11534:	000112cb 	.word	0x000112cb
   11538:	000112cb 	.word	0x000112cb
   1153c:	0001155b 	.word	0x0001155b
   11540:	000112cb 	.word	0x000112cb
   11544:	000116e5 	.word	0x000116e5
   11548:	000112cb 	.word	0x000112cb
   1154c:	000112cb 	.word	0x000112cb
   11550:	000116e5 	.word	0x000116e5
			OUTC('%');
   11554:	4641      	mov	r1, r8
   11556:	4648      	mov	r0, r9
   11558:	e46a      	b.n	10e30 <cbvprintf+0x28>
			if (precision >= 0) {
   1155a:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   1155c:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
			if (precision >= 0) {
   11560:	db0a      	blt.n	11578 <cbvprintf+0x770>
				len = strnlen(bps, precision);
   11562:	4639      	mov	r1, r7
   11564:	4648      	mov	r0, r9
   11566:	f00c fb38 	bl	1dbda <strnlen>
			bpe = bps + len;
   1156a:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
   1156e:	2600      	movs	r6, #0
		if (bps == NULL) {
   11570:	f1b9 0f00 	cmp.w	r9, #0
   11574:	d10c      	bne.n	11590 <cbvprintf+0x788>
   11576:	e6a8      	b.n	112ca <cbvprintf+0x4c2>
				len = strlen(bps);
   11578:	4648      	mov	r0, r9
   1157a:	f00c fb27 	bl	1dbcc <strlen>
   1157e:	e7f4      	b.n	1156a <cbvprintf+0x762>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   11580:	9b16      	ldr	r3, [sp, #88]	; 0x58
   11582:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
		char sign = 0;
   11586:	2600      	movs	r6, #0
			bpe = buf + 1;
   11588:	f10d 0a75 	add.w	sl, sp, #117	; 0x75
				bps = encode_float(value->dbl, conv, precision,
   1158c:	f10d 0974 	add.w	r9, sp, #116	; 0x74
		size_t nj_len = (bpe - bps);
   11590:	ebaa 0209 	sub.w	r2, sl, r9
		if (sign != 0) {
   11594:	b106      	cbz	r6, 11598 <cbvprintf+0x790>
			nj_len += 1U;
   11596:	3201      	adds	r2, #1
		if (conv->altform_0c) {
   11598:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
   1159c:	06c3      	lsls	r3, r0, #27
   1159e:	f140 824b 	bpl.w	11a38 <cbvprintf+0xc30>
			nj_len += 2U;
   115a2:	3202      	adds	r2, #2
		nj_len += conv->pad0_value;
   115a4:	9919      	ldr	r1, [sp, #100]	; 0x64
		if (width > 0) {
   115a6:	9b08      	ldr	r3, [sp, #32]
		if (conv->pad_fp) {
   115a8:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
   115aa:	440a      	add	r2, r1
			nj_len += conv->pad0_pre_exp;
   115ac:	bf44      	itt	mi
   115ae:	991a      	ldrmi	r1, [sp, #104]	; 0x68
   115b0:	1852      	addmi	r2, r2, r1
		if (width > 0) {
   115b2:	2b00      	cmp	r3, #0
   115b4:	dd25      	ble.n	11602 <cbvprintf+0x7fa>
			width -= (int)nj_len;
   115b6:	1a9b      	subs	r3, r3, r2
			if (!conv->flag_dash) {
   115b8:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   115bc:	0751      	lsls	r1, r2, #29
   115be:	f3c2 0b80 	ubfx	fp, r2, #2, #1
   115c2:	f100 824b 	bmi.w	11a5c <cbvprintf+0xc54>
				if (conv->flag_zero) {
   115c6:	0657      	lsls	r7, r2, #25
   115c8:	f140 8244 	bpl.w	11a54 <cbvprintf+0xc4c>
					if (sign != 0) {
   115cc:	2e00      	cmp	r6, #0
   115ce:	f000 8243 	beq.w	11a58 <cbvprintf+0xc50>
   115d2:	9308      	str	r3, [sp, #32]
						OUTC(sign);
   115d4:	4641      	mov	r1, r8
   115d6:	9b03      	ldr	r3, [sp, #12]
   115d8:	4630      	mov	r0, r6
   115da:	4798      	blx	r3
   115dc:	2800      	cmp	r0, #0
   115de:	f2c0 8236 	blt.w	11a4e <cbvprintf+0xc46>
   115e2:	9b08      	ldr	r3, [sp, #32]
   115e4:	3501      	adds	r5, #1
						sign = 0;
   115e6:	465e      	mov	r6, fp
					pad = '0';
   115e8:	2730      	movs	r7, #48	; 0x30
   115ea:	9308      	str	r3, [sp, #32]
   115ec:	eb03 0b05 	add.w	fp, r3, r5
   115f0:	9b08      	ldr	r3, [sp, #32]
   115f2:	ebab 0503 	sub.w	r5, fp, r3
				while (width-- > 0) {
   115f6:	2b00      	cmp	r3, #0
   115f8:	f103 33ff 	add.w	r3, r3, #4294967295
   115fc:	9308      	str	r3, [sp, #32]
   115fe:	f300 821f 	bgt.w	11a40 <cbvprintf+0xc38>
		if (sign != 0) {
   11602:	b13e      	cbz	r6, 11614 <cbvprintf+0x80c>
			OUTC(sign);
   11604:	9b03      	ldr	r3, [sp, #12]
   11606:	4641      	mov	r1, r8
   11608:	4630      	mov	r0, r6
   1160a:	4798      	blx	r3
   1160c:	2800      	cmp	r0, #0
   1160e:	f2c0 821e 	blt.w	11a4e <cbvprintf+0xc46>
   11612:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   11614:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
   11618:	0656      	lsls	r6, r2, #25
   1161a:	f140 827d 	bpl.w	11b18 <cbvprintf+0xd10>
			if (conv->specifier_a) {
   1161e:	f99d 2061 	ldrsb.w	r2, [sp, #97]	; 0x61
   11622:	2a00      	cmp	r2, #0
   11624:	f2c0 821c 	blt.w	11a60 <cbvprintf+0xc58>
   11628:	eba5 0509 	sub.w	r5, r5, r9
				while (isdigit((int)*cp)) {
   1162c:	f899 0000 	ldrb.w	r0, [r9]
   11630:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   11634:	2a09      	cmp	r2, #9
   11636:	464f      	mov	r7, r9
   11638:	eb05 0b09 	add.w	fp, r5, r9
   1163c:	f109 0901 	add.w	r9, r9, #1
   11640:	f240 823e 	bls.w	11ac0 <cbvprintf+0xcb8>
				if (!conv->pad_postdp) {
   11644:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
				pad_len = conv->pad0_value;
   11648:	9e19      	ldr	r6, [sp, #100]	; 0x64
				if (!conv->pad_postdp) {
   1164a:	0690      	lsls	r0, r2, #26
   1164c:	d408      	bmi.n	11660 <cbvprintf+0x858>
   1164e:	eb06 090b 	add.w	r9, r6, fp
					while (pad_len-- > 0) {
   11652:	2e00      	cmp	r6, #0
   11654:	eba9 0b06 	sub.w	fp, r9, r6
   11658:	f106 36ff 	add.w	r6, r6, #4294967295
   1165c:	f300 8237 	bgt.w	11ace <cbvprintf+0xcc6>
				if (*cp == '.') {
   11660:	7838      	ldrb	r0, [r7, #0]
   11662:	282e      	cmp	r0, #46	; 0x2e
   11664:	d10b      	bne.n	1167e <cbvprintf+0x876>
					OUTC(*cp++);
   11666:	9b03      	ldr	r3, [sp, #12]
   11668:	4641      	mov	r1, r8
   1166a:	4798      	blx	r3
						OUTC('0');
   1166c:	2800      	cmp	r0, #0
   1166e:	f2c0 81ee 	blt.w	11a4e <cbvprintf+0xc46>
					while (pad_len-- > 0) {
   11672:	2e00      	cmp	r6, #0
						OUTC('0');
   11674:	f10b 0b01 	add.w	fp, fp, #1
					while (pad_len-- > 0) {
   11678:	f300 8231 	bgt.w	11ade <cbvprintf+0xcd6>
					OUTC(*cp++);
   1167c:	3701      	adds	r7, #1
   1167e:	ebab 0b07 	sub.w	fp, fp, r7
   11682:	e237      	b.n	11af4 <cbvprintf+0xcec>
			if (conv->flag_plus) {
   11684:	0730      	lsls	r0, r6, #28
   11686:	d42b      	bmi.n	116e0 <cbvprintf+0x8d8>
				sign = ' ';
   11688:	f016 0610 	ands.w	r6, r6, #16
   1168c:	bf18      	it	ne
   1168e:	2620      	movne	r6, #32
			sint = value->sint;
   11690:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
			if (sint < 0) {
   11694:	2a00      	cmp	r2, #0
   11696:	f173 0100 	sbcs.w	r1, r3, #0
   1169a:	da05      	bge.n	116a8 <cbvprintf+0x8a0>
				value->uint = (uint_value_type)-sint;
   1169c:	4252      	negs	r2, r2
   1169e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   116a2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
				sign = '-';
   116a6:	262d      	movs	r6, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
   116a8:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
   116ac:	9300      	str	r3, [sp, #0]
   116ae:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   116b2:	ab1d      	add	r3, sp, #116	; 0x74
   116b4:	aa18      	add	r2, sp, #96	; 0x60
   116b6:	f00b ff68 	bl	1d58a <encode_uint>
   116ba:	4681      	mov	r9, r0
			if (precision >= 0) {
   116bc:	2f00      	cmp	r7, #0
   116be:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
   116c2:	db0b      	blt.n	116dc <cbvprintf+0x8d4>
				conv->flag_zero = false;
   116c4:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
				size_t len = bpe - bps;
   116c8:	eba3 0209 	sub.w	r2, r3, r9
				conv->flag_zero = false;
   116cc:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
   116d0:	4297      	cmp	r7, r2
				conv->flag_zero = false;
   116d2:	f88d 1060 	strb.w	r1, [sp, #96]	; 0x60
				if (len < (size_t)precision) {
   116d6:	d901      	bls.n	116dc <cbvprintf+0x8d4>
					conv->pad0_value = precision - (int)len;
   116d8:	1abf      	subs	r7, r7, r2
   116da:	9719      	str	r7, [sp, #100]	; 0x64
		const char *bpe = buf + sizeof(buf);
   116dc:	469a      	mov	sl, r3
   116de:	e747      	b.n	11570 <cbvprintf+0x768>
				sign = '+';
   116e0:	262b      	movs	r6, #43	; 0x2b
   116e2:	e7d5      	b.n	11690 <cbvprintf+0x888>
		switch (conv->specifier) {
   116e4:	2600      	movs	r6, #0
   116e6:	e7df      	b.n	116a8 <cbvprintf+0x8a0>
			if (value->ptr != NULL) {
   116e8:	9816      	ldr	r0, [sp, #88]	; 0x58
   116ea:	2800      	cmp	r0, #0
   116ec:	f000 819e 	beq.w	11a2c <cbvprintf+0xc24>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   116f0:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
   116f4:	9300      	str	r3, [sp, #0]
   116f6:	aa18      	add	r2, sp, #96	; 0x60
   116f8:	ab1d      	add	r3, sp, #116	; 0x74
   116fa:	2100      	movs	r1, #0
   116fc:	f00b ff45 	bl	1d58a <encode_uint>
				conv->altform_0c = true;
   11700:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
   11704:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   11708:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1170c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11710:	4681      	mov	r9, r0
				conv->altform_0c = true;
   11712:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
		char sign = 0;
   11716:	2600      	movs	r6, #0
				goto prec_int_pad0;
   11718:	e7d0      	b.n	116bc <cbvprintf+0x8b4>
				store_count(conv, value->ptr, count);
   1171a:	9b16      	ldr	r3, [sp, #88]	; 0x58
	switch ((enum length_mod_enum)conv->length_mod) {
   1171c:	2907      	cmp	r1, #7
   1171e:	f63f add4 	bhi.w	112ca <cbvprintf+0x4c2>
   11722:	e8df f001 	tbb	[pc, r1]
   11726:	040d      	.short	0x040d
   11728:	08080d06 	.word	0x08080d06
   1172c:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   1172e:	701d      	strb	r5, [r3, #0]
		break;
   11730:	e5cb      	b.n	112ca <cbvprintf+0x4c2>
		*(short *)dp = (short)count;
   11732:	801d      	strh	r5, [r3, #0]
		break;
   11734:	e5c9      	b.n	112ca <cbvprintf+0x4c2>
		*(intmax_t *)dp = (intmax_t)count;
   11736:	4628      	mov	r0, r5
   11738:	17e9      	asrs	r1, r5, #31
   1173a:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   1173e:	e5c4      	b.n	112ca <cbvprintf+0x4c2>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   11740:	601d      	str	r5, [r3, #0]
		break;
   11742:	e5c2      	b.n	112ca <cbvprintf+0x4c2>
		*sign = '-';
   11744:	262d      	movs	r6, #45	; 0x2d
   11746:	e631      	b.n	113ac <cbvprintf+0x5a4>
		*sign = '+';
   11748:	262b      	movs	r6, #43	; 0x2b
   1174a:	e62f      	b.n	113ac <cbvprintf+0x5a4>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   1174c:	f240 73ff 	movw	r3, #2047	; 0x7ff
   11750:	459b      	cmp	fp, r3
   11752:	d12d      	bne.n	117b0 <cbvprintf+0x9a8>
		if (fract == 0) {
   11754:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   11758:	4313      	orrs	r3, r2
   1175a:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
   1175e:	d118      	bne.n	11792 <cbvprintf+0x98a>
			if (isupper((int)c)) {
   11760:	f1b9 0f19 	cmp.w	r9, #25
				*buf++ = 'I';
   11764:	bf95      	itete	ls
   11766:	f644 6349 	movwls	r3, #20041	; 0x4e49
				*buf++ = 'i';
   1176a:	f646 6369 	movwhi	r3, #28265	; 0x6e69
				*buf++ = 'I';
   1176e:	f8ad 3074 	strhls.w	r3, [sp, #116]	; 0x74
				*buf++ = 'i';
   11772:	f8ad 3074 	strhhi.w	r3, [sp, #116]	; 0x74
				*buf++ = 'F';
   11776:	bf94      	ite	ls
   11778:	2346      	movls	r3, #70	; 0x46
				*buf++ = 'f';
   1177a:	2366      	movhi	r3, #102	; 0x66
				*buf++ = 'n';
   1177c:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
		conv->flag_zero = false;
   11780:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   11784:	f36f 1386 	bfc	r3, #6, #1
   11788:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
		*bpe = buf;
   1178c:	f10d 0a77 	add.w	sl, sp, #119	; 0x77
		return bps;
   11790:	e6fc      	b.n	1158c <cbvprintf+0x784>
			if (isupper((int)c)) {
   11792:	f1b9 0f19 	cmp.w	r9, #25
				*buf++ = 'N';
   11796:	bf95      	itete	ls
   11798:	f244 134e 	movwls	r3, #16718	; 0x414e
				*buf++ = 'n';
   1179c:	f246 136e 	movwhi	r3, #24942	; 0x616e
				*buf++ = 'N';
   117a0:	f8ad 3074 	strhls.w	r3, [sp, #116]	; 0x74
				*buf++ = 'n';
   117a4:	f8ad 3074 	strhhi.w	r3, [sp, #116]	; 0x74
				*buf++ = 'N';
   117a8:	bf94      	ite	ls
   117aa:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'n';
   117ac:	236e      	movhi	r3, #110	; 0x6e
   117ae:	e7e5      	b.n	1177c <cbvprintf+0x974>
	bool is_subnormal = (expo == 0) && (fract != 0);
   117b0:	f04f 0c00 	mov.w	ip, #0
   117b4:	e610      	b.n	113d8 <cbvprintf+0x5d0>
				expo--;
   117b6:	f10b 3bff 	add.w	fp, fp, #4294967295
			while (((fract <<= 1) & BIT_63) == 0) {
   117ba:	1892      	adds	r2, r2, r2
   117bc:	415b      	adcs	r3, r3
   117be:	2a00      	cmp	r2, #0
   117c0:	f173 0100 	sbcs.w	r1, r3, #0
   117c4:	daf7      	bge.n	117b6 <cbvprintf+0x9ae>
   117c6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   117ca:	e622      	b.n	11412 <cbvprintf+0x60a>
			fract >>= 1;
   117cc:	9b04      	ldr	r3, [sp, #16]
   117ce:	9805      	ldr	r0, [sp, #20]
   117d0:	085b      	lsrs	r3, r3, #1
   117d2:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
   117d6:	0840      	lsrs	r0, r0, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   117d8:	f1b0 3f33 	cmp.w	r0, #858993459	; 0x33333333
   117dc:	46dc      	mov	ip, fp
			fract >>= 1;
   117de:	e9cd 3004 	strd	r3, r0, [sp, #16]
			expo++;
   117e2:	f10b 0b01 	add.w	fp, fp, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   117e6:	d2f1      	bcs.n	117cc <cbvprintf+0x9c4>
		fract *= 5U;
   117e8:	fba3 ab01 	umull	sl, fp, r3, r1
   117ec:	e9cd ab04 	strd	sl, fp, [sp, #16]
   117f0:	9b05      	ldr	r3, [sp, #20]
   117f2:	4348      	muls	r0, r1
   117f4:	18c3      	adds	r3, r0, r3
   117f6:	9305      	str	r3, [sp, #20]
		expo++;
   117f8:	f10c 0b02 	add.w	fp, ip, #2
		decexp--;
   117fc:	3a01      	subs	r2, #1
   117fe:	2301      	movs	r3, #1
   11800:	e616      	b.n	11430 <cbvprintf+0x628>
		fract += 2;
   11802:	3302      	adds	r3, #2
   11804:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
   11808:	a812      	add	r0, sp, #72	; 0x48
		fract += 2;
   1180a:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
   1180e:	920e      	str	r2, [sp, #56]	; 0x38
		_ldiv5(&fract);
   11810:	f00b fe84 	bl	1d51c <_ldiv5>
		decexp++;
   11814:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11816:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
		expo--;
   1181a:	f10b 3bff 	add.w	fp, fp, #4294967295
		decexp++;
   1181e:	3201      	adds	r2, #1
			fract <<= 1;
   11820:	1800      	adds	r0, r0, r0
   11822:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
   11824:	2800      	cmp	r0, #0
   11826:	f171 0300 	sbcs.w	r3, r1, #0
			expo--;
   1182a:	f10b 3bff 	add.w	fp, fp, #4294967295
		} while (!(fract & BIT_63));
   1182e:	daf7      	bge.n	11820 <cbvprintf+0xa18>
   11830:	e605      	b.n	1143e <cbvprintf+0x636>
   11832:	2200      	movs	r2, #0
   11834:	4693      	mov	fp, r2
   11836:	e60a      	b.n	1144e <cbvprintf+0x646>
			precision -= decexp;
   11838:	1abf      	subs	r7, r7, r2
			c = 'f';
   1183a:	f04f 0966 	mov.w	r9, #102	; 0x66
   1183e:	e62b      	b.n	11498 <cbvprintf+0x690>
	bool prune_zero = false;
   11840:	2300      	movs	r3, #0
   11842:	e632      	b.n	114aa <cbvprintf+0x6a2>
		decimals = precision + 1;
   11844:	1c7b      	adds	r3, r7, #1
	if (decimals > 16) {
   11846:	2b10      	cmp	r3, #16
   11848:	bfa8      	it	ge
   1184a:	2310      	movge	r3, #16
   1184c:	469a      	mov	sl, r3
   1184e:	2110      	movs	r1, #16
   11850:	9111      	str	r1, [sp, #68]	; 0x44
	uint64_t round = BIT64(59); /* 0.5 */
   11852:	2000      	movs	r0, #0
   11854:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   11858:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	while (decimals--) {
   1185c:	f10a 3aff 	add.w	sl, sl, #4294967295
   11860:	f1ba 3fff 	cmp.w	sl, #4294967295
   11864:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
   11868:	d11f      	bne.n	118aa <cbvprintf+0xaa2>
	fract += round;
   1186a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1186c:	18cb      	adds	r3, r1, r3
   1186e:	930a      	str	r3, [sp, #40]	; 0x28
   11870:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11872:	eb40 0303 	adc.w	r3, r0, r3
   11876:	930b      	str	r3, [sp, #44]	; 0x2c
	if (fract >= BIT64(60)) {
   11878:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
   1187c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
   11880:	f04f 30ff 	mov.w	r0, #4294967295
   11884:	4559      	cmp	r1, fp
   11886:	bf08      	it	eq
   11888:	4550      	cmpeq	r0, sl
   1188a:	d31a      	bcc.n	118c2 <cbvprintf+0xaba>
	fract += round;
   1188c:	4650      	mov	r0, sl
   1188e:	4659      	mov	r1, fp
   11890:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	if (c == 'f') {
   11894:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   11898:	d153      	bne.n	11942 <cbvprintf+0xb3a>
		if (decexp > 0) {
   1189a:	2a00      	cmp	r2, #0
   1189c:	dc20      	bgt.n	118e0 <cbvprintf+0xad8>
			*buf++ = '0';
   1189e:	2330      	movs	r3, #48	; 0x30
   118a0:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   118a4:	f10d 0a75 	add.w	sl, sp, #117	; 0x75
   118a8:	e02b      	b.n	11902 <cbvprintf+0xafa>
	*v >>= 1;
   118aa:	0849      	lsrs	r1, r1, #1
   118ac:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
   118b0:	0840      	lsrs	r0, r0, #1
   118b2:	e9cd 1014 	strd	r1, r0, [sp, #80]	; 0x50
	_ldiv5(v);
   118b6:	a814      	add	r0, sp, #80	; 0x50
   118b8:	920f      	str	r2, [sp, #60]	; 0x3c
   118ba:	f00b fe2f 	bl	1d51c <_ldiv5>
   118be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
}
   118c0:	e7cc      	b.n	1185c <cbvprintf+0xa54>
	*v >>= 1;
   118c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   118c4:	920f      	str	r2, [sp, #60]	; 0x3c
   118c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   118c8:	085b      	lsrs	r3, r3, #1
   118ca:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   118ce:	0851      	lsrs	r1, r2, #1
	_ldiv5(v);
   118d0:	a812      	add	r0, sp, #72	; 0x48
	*v >>= 1;
   118d2:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
	_ldiv5(v);
   118d6:	f00b fe21 	bl	1d51c <_ldiv5>
		decexp++;
   118da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   118dc:	3201      	adds	r2, #1
   118de:	e7d9      	b.n	11894 <cbvprintf+0xa8c>
	char *buf = bps;
   118e0:	f10d 0a74 	add.w	sl, sp, #116	; 0x74
			while (decexp > 0 && digit_count > 0) {
   118e4:	9911      	ldr	r1, [sp, #68]	; 0x44
   118e6:	2900      	cmp	r1, #0
   118e8:	dd09      	ble.n	118fe <cbvprintf+0xaf6>
				*buf++ = _get_digit(&fract, &digit_count);
   118ea:	a911      	add	r1, sp, #68	; 0x44
   118ec:	a812      	add	r0, sp, #72	; 0x48
   118ee:	920f      	str	r2, [sp, #60]	; 0x3c
   118f0:	f00b fe34 	bl	1d55c <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   118f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
				*buf++ = _get_digit(&fract, &digit_count);
   118f6:	f80a 0b01 	strb.w	r0, [sl], #1
			while (decexp > 0 && digit_count > 0) {
   118fa:	3a01      	subs	r2, #1
   118fc:	d1f2      	bne.n	118e4 <cbvprintf+0xadc>
			conv->pad0_value = decexp;
   118fe:	9219      	str	r2, [sp, #100]	; 0x64
			decexp = 0;
   11900:	2200      	movs	r2, #0
		if (conv->flag_hash || (precision > 0)) {
   11902:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
   11906:	0688      	lsls	r0, r1, #26
   11908:	d401      	bmi.n	1190e <cbvprintf+0xb06>
   1190a:	2f00      	cmp	r7, #0
   1190c:	dd3f      	ble.n	1198e <cbvprintf+0xb86>
			*buf++ = '.';
   1190e:	4653      	mov	r3, sl
   11910:	212e      	movs	r1, #46	; 0x2e
   11912:	f803 1b01 	strb.w	r1, [r3], #1
		if (decexp < 0 && precision > 0) {
   11916:	b192      	cbz	r2, 1193e <cbvprintf+0xb36>
   11918:	2f00      	cmp	r7, #0
   1191a:	dd75      	ble.n	11a08 <cbvprintf+0xc00>
			conv->pad0_value = -decexp;
   1191c:	4251      	negs	r1, r2
   1191e:	42b9      	cmp	r1, r7
   11920:	bfa8      	it	ge
   11922:	4639      	movge	r1, r7
			conv->pad_postdp = (conv->pad0_value > 0);
   11924:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
			conv->pad0_value = -decexp;
   11928:	9119      	str	r1, [sp, #100]	; 0x64
			conv->pad_postdp = (conv->pad0_value > 0);
   1192a:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
   1192c:	eba7 0701 	sub.w	r7, r7, r1
			conv->pad_postdp = (conv->pad0_value > 0);
   11930:	bfd4      	ite	le
   11932:	2100      	movle	r1, #0
   11934:	2101      	movgt	r1, #1
   11936:	f361 1045 	bfi	r0, r1, #5, #1
   1193a:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
			*buf++ = '.';
   1193e:	469a      	mov	sl, r3
   11940:	e020      	b.n	11984 <cbvprintf+0xb7c>
		*buf = _get_digit(&fract, &digit_count);
   11942:	a911      	add	r1, sp, #68	; 0x44
   11944:	a812      	add	r0, sp, #72	; 0x48
   11946:	920f      	str	r2, [sp, #60]	; 0x3c
   11948:	f00b fe08 	bl	1d55c <_get_digit>
		if (*buf++ != '0') {
   1194c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		if (conv->flag_hash || (precision > 0)) {
   1194e:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
		*buf = _get_digit(&fract, &digit_count);
   11952:	f88d 0074 	strb.w	r0, [sp, #116]	; 0x74
		if (*buf++ != '0') {
   11956:	2830      	cmp	r0, #48	; 0x30
			decexp--;
   11958:	bf18      	it	ne
   1195a:	f102 32ff 	addne.w	r2, r2, #4294967295
		if (conv->flag_hash || (precision > 0)) {
   1195e:	0699      	lsls	r1, r3, #26
   11960:	d401      	bmi.n	11966 <cbvprintf+0xb5e>
   11962:	2f00      	cmp	r7, #0
   11964:	dd52      	ble.n	11a0c <cbvprintf+0xc04>
			*buf++ = '.';
   11966:	232e      	movs	r3, #46	; 0x2e
   11968:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
   1196c:	f10d 0376 	add.w	r3, sp, #118	; 0x76
   11970:	e7e5      	b.n	1193e <cbvprintf+0xb36>
		*buf++ = _get_digit(&fract, &digit_count);
   11972:	a911      	add	r1, sp, #68	; 0x44
   11974:	a812      	add	r0, sp, #72	; 0x48
   11976:	920f      	str	r2, [sp, #60]	; 0x3c
   11978:	f00b fdf0 	bl	1d55c <_get_digit>
   1197c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1197e:	f80a 0b01 	strb.w	r0, [sl], #1
		precision--;
   11982:	3f01      	subs	r7, #1
	while (precision > 0 && digit_count > 0) {
   11984:	2f00      	cmp	r7, #0
   11986:	dd02      	ble.n	1198e <cbvprintf+0xb86>
   11988:	9911      	ldr	r1, [sp, #68]	; 0x44
   1198a:	2900      	cmp	r1, #0
   1198c:	dcf1      	bgt.n	11972 <cbvprintf+0xb6a>
	if (prune_zero) {
   1198e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11990:	2b00      	cmp	r3, #0
   11992:	d13e      	bne.n	11a12 <cbvprintf+0xc0a>
	conv->pad0_pre_exp = precision;
   11994:	971a      	str	r7, [sp, #104]	; 0x68
	if ((c == 'e') || (c == 'E')) {
   11996:	f009 01df 	and.w	r1, r9, #223	; 0xdf
   1199a:	2945      	cmp	r1, #69	; 0x45
   1199c:	d122      	bne.n	119e4 <cbvprintf+0xbdc>
		if (decexp < 0) {
   1199e:	2a00      	cmp	r2, #0
		*buf++ = c;
   119a0:	4650      	mov	r0, sl
			decexp = -decexp;
   119a2:	bfba      	itte	lt
   119a4:	4252      	neglt	r2, r2
			*buf++ = '-';
   119a6:	212d      	movlt	r1, #45	; 0x2d
			*buf++ = '+';
   119a8:	212b      	movge	r1, #43	; 0x2b
		if (decexp >= 100) {
   119aa:	2a63      	cmp	r2, #99	; 0x63
		*buf++ = c;
   119ac:	f800 9b02 	strb.w	r9, [r0], #2
			*buf++ = '-';
   119b0:	f88a 1001 	strb.w	r1, [sl, #1]
		if (decexp >= 100) {
   119b4:	dd0a      	ble.n	119cc <cbvprintf+0xbc4>
			*buf++ = (decexp / 100) + '0';
   119b6:	2764      	movs	r7, #100	; 0x64
   119b8:	fb92 f1f7 	sdiv	r1, r2, r7
   119bc:	f101 0c30 	add.w	ip, r1, #48	; 0x30
   119c0:	f10a 0003 	add.w	r0, sl, #3
   119c4:	f88a c002 	strb.w	ip, [sl, #2]
			decexp %= 100;
   119c8:	fb07 2211 	mls	r2, r7, r1, r2
		*buf++ = (decexp / 10) + '0';
   119cc:	270a      	movs	r7, #10
   119ce:	4682      	mov	sl, r0
   119d0:	fb92 f1f7 	sdiv	r1, r2, r7
		*buf++ = (decexp % 10) + '0';
   119d4:	fb07 2211 	mls	r2, r7, r1, r2
		*buf++ = (decexp / 10) + '0';
   119d8:	f101 0c30 	add.w	ip, r1, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   119dc:	3230      	adds	r2, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   119de:	f80a cb02 	strb.w	ip, [sl], #2
		*buf++ = (decexp % 10) + '0';
   119e2:	7042      	strb	r2, [r0, #1]
		|| (conv->pad0_pre_exp > 0);
   119e4:	9a19      	ldr	r2, [sp, #100]	; 0x64
   119e6:	2a00      	cmp	r2, #0
   119e8:	dc1e      	bgt.n	11a28 <cbvprintf+0xc20>
   119ea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   119ec:	2a00      	cmp	r2, #0
   119ee:	bfd4      	ite	le
   119f0:	2200      	movle	r2, #0
   119f2:	2201      	movgt	r2, #1
	conv->pad_fp = (conv->pad0_value > 0)
   119f4:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
   119f8:	f362 1186 	bfi	r1, r2, #6, #1
	*buf = 0;
   119fc:	2200      	movs	r2, #0
	conv->pad_fp = (conv->pad0_value > 0)
   119fe:	f88d 1062 	strb.w	r1, [sp, #98]	; 0x62
	*buf = 0;
   11a02:	f88a 2000 	strb.w	r2, [sl]
	return bps;
   11a06:	e5c1      	b.n	1158c <cbvprintf+0x784>
			*buf++ = '.';
   11a08:	469a      	mov	sl, r3
   11a0a:	e7c0      	b.n	1198e <cbvprintf+0xb86>
		if (*buf++ != '0') {
   11a0c:	f10d 0a75 	add.w	sl, sp, #117	; 0x75
   11a10:	e7bd      	b.n	1198e <cbvprintf+0xb86>
		conv->pad0_pre_exp = 0;
   11a12:	2100      	movs	r1, #0
   11a14:	911a      	str	r1, [sp, #104]	; 0x68
		while (*--buf == '0') {
   11a16:	4650      	mov	r0, sl
   11a18:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
   11a1c:	2930      	cmp	r1, #48	; 0x30
   11a1e:	d0fa      	beq.n	11a16 <cbvprintf+0xc0e>
		if (*buf != '.') {
   11a20:	292e      	cmp	r1, #46	; 0x2e
   11a22:	bf18      	it	ne
   11a24:	4682      	movne	sl, r0
   11a26:	e7b6      	b.n	11996 <cbvprintf+0xb8e>
		|| (conv->pad0_pre_exp > 0);
   11a28:	2201      	movs	r2, #1
   11a2a:	e7e3      	b.n	119f4 <cbvprintf+0xbec>
			bpe = bps + 5;
   11a2c:	f8df a138 	ldr.w	sl, [pc, #312]	; 11b68 <cbvprintf+0xd60>
		char sign = 0;
   11a30:	4606      	mov	r6, r0
			bps = "(nil)";
   11a32:	f1aa 0905 	sub.w	r9, sl, #5
   11a36:	e5ab      	b.n	11590 <cbvprintf+0x788>
		} else if (conv->altform_0) {
   11a38:	0707      	lsls	r7, r0, #28
			nj_len += 1U;
   11a3a:	bf48      	it	mi
   11a3c:	3201      	addmi	r2, #1
   11a3e:	e5b1      	b.n	115a4 <cbvprintf+0x79c>
					OUTC(pad);
   11a40:	9b03      	ldr	r3, [sp, #12]
   11a42:	4641      	mov	r1, r8
   11a44:	4638      	mov	r0, r7
   11a46:	4798      	blx	r3
   11a48:	2800      	cmp	r0, #0
   11a4a:	f6bf add1 	bge.w	115f0 <cbvprintf+0x7e8>
#undef OUTS
#undef OUTC
}
   11a4e:	b025      	add	sp, #148	; 0x94
   11a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   11a54:	2720      	movs	r7, #32
   11a56:	e5c8      	b.n	115ea <cbvprintf+0x7e2>
					pad = '0';
   11a58:	2730      	movs	r7, #48	; 0x30
   11a5a:	e5c6      	b.n	115ea <cbvprintf+0x7e2>
			width -= (int)nj_len;
   11a5c:	9308      	str	r3, [sp, #32]
   11a5e:	e5d0      	b.n	11602 <cbvprintf+0x7fa>
   11a60:	eba5 0b09 	sub.w	fp, r5, r9
   11a64:	464e      	mov	r6, r9
   11a66:	eb0b 0509 	add.w	r5, fp, r9
				while (*cp != 'p') {
   11a6a:	f819 0b01 	ldrb.w	r0, [r9], #1
   11a6e:	2870      	cmp	r0, #112	; 0x70
   11a70:	d120      	bne.n	11ab4 <cbvprintf+0xcac>
			while (pad_len-- > 0) {
   11a72:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   11a74:	eb02 0905 	add.w	r9, r2, r5
   11a78:	eba9 0205 	sub.w	r2, r9, r5
   11a7c:	2a00      	cmp	r2, #0
   11a7e:	dc43      	bgt.n	11b08 <cbvprintf+0xd00>
			OUTS(cp, bpe);
   11a80:	4653      	mov	r3, sl
   11a82:	4632      	mov	r2, r6
			OUTS(bps, bpe);
   11a84:	9803      	ldr	r0, [sp, #12]
   11a86:	4641      	mov	r1, r8
   11a88:	f00b fdca 	bl	1d620 <outs>
   11a8c:	2800      	cmp	r0, #0
   11a8e:	dbde      	blt.n	11a4e <cbvprintf+0xc46>
   11a90:	9b08      	ldr	r3, [sp, #32]
   11a92:	4428      	add	r0, r5
   11a94:	4403      	add	r3, r0
			while (pad_len-- > 0) {
   11a96:	4605      	mov	r5, r0
   11a98:	469a      	mov	sl, r3
		while (width > 0) {
   11a9a:	ebaa 0305 	sub.w	r3, sl, r5
   11a9e:	2b00      	cmp	r3, #0
   11aa0:	f77f ac13 	ble.w	112ca <cbvprintf+0x4c2>
			OUTC(' ');
   11aa4:	9b03      	ldr	r3, [sp, #12]
   11aa6:	4641      	mov	r1, r8
   11aa8:	2020      	movs	r0, #32
   11aaa:	4798      	blx	r3
   11aac:	2800      	cmp	r0, #0
   11aae:	dbce      	blt.n	11a4e <cbvprintf+0xc46>
   11ab0:	3501      	adds	r5, #1
			--width;
   11ab2:	e7f2      	b.n	11a9a <cbvprintf+0xc92>
					OUTC(*cp++);
   11ab4:	9b03      	ldr	r3, [sp, #12]
   11ab6:	4641      	mov	r1, r8
   11ab8:	4798      	blx	r3
   11aba:	2800      	cmp	r0, #0
   11abc:	dad2      	bge.n	11a64 <cbvprintf+0xc5c>
   11abe:	e7c6      	b.n	11a4e <cbvprintf+0xc46>
					OUTC(*cp++);
   11ac0:	9b03      	ldr	r3, [sp, #12]
   11ac2:	4641      	mov	r1, r8
   11ac4:	4798      	blx	r3
   11ac6:	2800      	cmp	r0, #0
   11ac8:	f6bf adb0 	bge.w	1162c <cbvprintf+0x824>
   11acc:	e7bf      	b.n	11a4e <cbvprintf+0xc46>
						OUTC('0');
   11ace:	9b03      	ldr	r3, [sp, #12]
   11ad0:	4641      	mov	r1, r8
   11ad2:	2030      	movs	r0, #48	; 0x30
   11ad4:	4798      	blx	r3
   11ad6:	2800      	cmp	r0, #0
   11ad8:	f6bf adbb 	bge.w	11652 <cbvprintf+0x84a>
   11adc:	e7b7      	b.n	11a4e <cbvprintf+0xc46>
						OUTC('0');
   11ade:	9b03      	ldr	r3, [sp, #12]
   11ae0:	4641      	mov	r1, r8
   11ae2:	2030      	movs	r0, #48	; 0x30
   11ae4:	4798      	blx	r3
   11ae6:	3e01      	subs	r6, #1
   11ae8:	e5c0      	b.n	1166c <cbvprintf+0x864>
					OUTC(*cp++);
   11aea:	9b03      	ldr	r3, [sp, #12]
   11aec:	4641      	mov	r1, r8
   11aee:	4798      	blx	r3
   11af0:	2800      	cmp	r0, #0
   11af2:	dbac      	blt.n	11a4e <cbvprintf+0xc46>
   11af4:	463e      	mov	r6, r7
   11af6:	eb0b 0507 	add.w	r5, fp, r7
				while (isdigit((int)*cp)) {
   11afa:	f817 0b01 	ldrb.w	r0, [r7], #1
   11afe:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   11b02:	2a09      	cmp	r2, #9
   11b04:	d9f1      	bls.n	11aea <cbvprintf+0xce2>
   11b06:	e7b4      	b.n	11a72 <cbvprintf+0xc6a>
				OUTC('0');
   11b08:	9b03      	ldr	r3, [sp, #12]
   11b0a:	4641      	mov	r1, r8
   11b0c:	2030      	movs	r0, #48	; 0x30
   11b0e:	4798      	blx	r3
   11b10:	2800      	cmp	r0, #0
   11b12:	db9c      	blt.n	11a4e <cbvprintf+0xc46>
   11b14:	3501      	adds	r5, #1
   11b16:	e7af      	b.n	11a78 <cbvprintf+0xc70>
			if (conv->altform_0c | conv->altform_0) {
   11b18:	06d1      	lsls	r1, r2, #27
   11b1a:	d401      	bmi.n	11b20 <cbvprintf+0xd18>
   11b1c:	0712      	lsls	r2, r2, #28
   11b1e:	d506      	bpl.n	11b2e <cbvprintf+0xd26>
				OUTC('0');
   11b20:	9b03      	ldr	r3, [sp, #12]
   11b22:	4641      	mov	r1, r8
   11b24:	2030      	movs	r0, #48	; 0x30
   11b26:	4798      	blx	r3
   11b28:	2800      	cmp	r0, #0
   11b2a:	db90      	blt.n	11a4e <cbvprintf+0xc46>
   11b2c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   11b2e:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
   11b32:	06d3      	lsls	r3, r2, #27
   11b34:	d507      	bpl.n	11b46 <cbvprintf+0xd3e>
				OUTC(conv->specifier);
   11b36:	f89d 0063 	ldrb.w	r0, [sp, #99]	; 0x63
   11b3a:	9b03      	ldr	r3, [sp, #12]
   11b3c:	4641      	mov	r1, r8
   11b3e:	4798      	blx	r3
   11b40:	2800      	cmp	r0, #0
   11b42:	db84      	blt.n	11a4e <cbvprintf+0xc46>
   11b44:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11b46:	9e19      	ldr	r6, [sp, #100]	; 0x64
   11b48:	442e      	add	r6, r5
   11b4a:	1b72      	subs	r2, r6, r5
   11b4c:	2a00      	cmp	r2, #0
   11b4e:	dc02      	bgt.n	11b56 <cbvprintf+0xd4e>
			OUTS(bps, bpe);
   11b50:	4653      	mov	r3, sl
   11b52:	464a      	mov	r2, r9
   11b54:	e796      	b.n	11a84 <cbvprintf+0xc7c>
				OUTC('0');
   11b56:	9b03      	ldr	r3, [sp, #12]
   11b58:	4641      	mov	r1, r8
   11b5a:	2030      	movs	r0, #48	; 0x30
   11b5c:	4798      	blx	r3
   11b5e:	2800      	cmp	r0, #0
   11b60:	f6ff af75 	blt.w	11a4e <cbvprintf+0xc46>
   11b64:	3501      	adds	r5, #1
   11b66:	e7f0      	b.n	11b4a <cbvprintf+0xd42>
   11b68:	00021a9d 	.word	0x00021a9d

00011b6c <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   11b6c:	b508      	push	{r3, lr}
   11b6e:	4604      	mov	r4, r0
   11b70:	f04f 0240 	mov.w	r2, #64	; 0x40
   11b74:	f3ef 8311 	mrs	r3, BASEPRI
   11b78:	f382 8811 	msr	BASEPRI, r2
   11b7c:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   11b80:	f00b fe1d 	bl	1d7be <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   11b84:	4620      	mov	r0, r4
   11b86:	f001 f883 	bl	12c90 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   11b8a:	4803      	ldr	r0, [pc, #12]	; (11b98 <sys_reboot+0x2c>)
   11b8c:	f00b f933 	bl	1cdf6 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   11b90:	f000 fdca 	bl	12728 <arch_cpu_idle>
   11b94:	e7fc      	b.n	11b90 <sys_reboot+0x24>
   11b96:	bf00      	nop
   11b98:	00021a9e 	.word	0x00021a9e

00011b9c <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   11b9c:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   11b9e:	4c08      	ldr	r4, [pc, #32]	; (11bc0 <read_blvl+0x24>)
{
   11ba0:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   11ba2:	7824      	ldrb	r4, [r4, #0]
   11ba4:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   11ba8:	2401      	movs	r4, #1
   11baa:	9402      	str	r4, [sp, #8]
   11bac:	f10d 0417 	add.w	r4, sp, #23
   11bb0:	9401      	str	r4, [sp, #4]
   11bb2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   11bb6:	9400      	str	r4, [sp, #0]
   11bb8:	f00d fe2d 	bl	1f816 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   11bbc:	b006      	add	sp, #24
   11bbe:	bd10      	pop	{r4, pc}
   11bc0:	20000795 	.word	0x20000795

00011bc4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   11bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11bc6:	4605      	mov	r5, r0
   11bc8:	f04f 0340 	mov.w	r3, #64	; 0x40
   11bcc:	f3ef 8611 	mrs	r6, BASEPRI
   11bd0:	f383 8811 	msr	BASEPRI, r3
   11bd4:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   11bd8:	4b0b      	ldr	r3, [pc, #44]	; (11c08 <pm_state_notify+0x44>)
   11bda:	681c      	ldr	r4, [r3, #0]
   11bdc:	2c00      	cmp	r4, #0
   11bde:	bf38      	it	cc
   11be0:	2400      	movcc	r4, #0
   11be2:	b15c      	cbz	r4, 11bfc <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
   11be4:	4f09      	ldr	r7, [pc, #36]	; (11c0c <pm_state_notify+0x48>)
			callback = notifier->state_exit;
   11be6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   11bea:	2d00      	cmp	r5, #0
   11bec:	bf08      	it	eq
   11bee:	4613      	moveq	r3, r2
		if (callback) {
   11bf0:	b10b      	cbz	r3, 11bf6 <pm_state_notify+0x32>
			callback(z_power_state.state);
   11bf2:	7838      	ldrb	r0, [r7, #0]
   11bf4:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11bf6:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   11bf8:	2c00      	cmp	r4, #0
   11bfa:	d1f4      	bne.n	11be6 <pm_state_notify+0x22>
	__asm__ volatile(
   11bfc:	f386 8811 	msr	BASEPRI, r6
   11c00:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   11c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11c06:	bf00      	nop
   11c08:	20001d14 	.word	0x20001d14
   11c0c:	20001d1c 	.word	0x20001d1c

00011c10 <pm_system_resume>:

void pm_system_resume(void)
{
   11c10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   11c12:	4b0f      	ldr	r3, [pc, #60]	; (11c50 <pm_system_resume+0x40>)
   11c14:	681a      	ldr	r2, [r3, #0]
   11c16:	b9ba      	cbnz	r2, 11c48 <pm_system_resume+0x38>
		post_ops_done = 1;
   11c18:	2201      	movs	r2, #1
   11c1a:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
   11c1c:	4a0d      	ldr	r2, [pc, #52]	; (11c54 <pm_system_resume+0x44>)
   11c1e:	ca07      	ldmia	r2, {r0, r1, r2}
   11c20:	ab01      	add	r3, sp, #4
   11c22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   11c26:	4a0c      	ldr	r2, [pc, #48]	; (11c58 <pm_system_resume+0x48>)
   11c28:	b14a      	cbz	r2, 11c3e <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
   11c2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   11c2e:	f00c f83a 	bl	1dca6 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   11c32:	2000      	movs	r0, #0
	}
}
   11c34:	b005      	add	sp, #20
   11c36:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
   11c3a:	f7ff bfc3 	b.w	11bc4 <pm_state_notify>
   11c3e:	f382 8811 	msr	BASEPRI, r2
   11c42:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   11c46:	e7f4      	b.n	11c32 <pm_system_resume+0x22>
}
   11c48:	b005      	add	sp, #20
   11c4a:	f85d fb04 	ldr.w	pc, [sp], #4
   11c4e:	bf00      	nop
   11c50:	200004f0 	.word	0x200004f0
   11c54:	20001d1c 	.word	0x20001d1c
   11c58:	0001dca7 	.word	0x0001dca7

00011c5c <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   11c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c5e:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
   11c60:	466e      	mov	r6, sp
   11c62:	4601      	mov	r1, r0
{
   11c64:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
   11c66:	4630      	mov	r0, r6
   11c68:	f00b fd0e 	bl	1d688 <pm_policy_next_state>
   11c6c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   11c70:	4c17      	ldr	r4, [pc, #92]	; (11cd0 <pm_system_suspend+0x74>)
   11c72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   11c76:	7820      	ldrb	r0, [r4, #0]
   11c78:	b340      	cbz	r0, 11ccc <pm_system_suspend+0x70>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
   11c7a:	4b16      	ldr	r3, [pc, #88]	; (11cd4 <pm_system_suspend+0x78>)
   11c7c:	2100      	movs	r1, #0
   11c7e:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   11c80:	1c6b      	adds	r3, r5, #1
   11c82:	d00e      	beq.n	11ca2 <pm_system_suspend+0x46>
			return (uint32_t)((t * to_hz + off) / from_hz);
   11c84:	4814      	ldr	r0, [pc, #80]	; (11cd8 <pm_system_suspend+0x7c>)
   11c86:	4617      	mov	r7, r2
   11c88:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   11c8c:	2100      	movs	r1, #0
   11c8e:	4a13      	ldr	r2, [pc, #76]	; (11cdc <pm_system_suspend+0x80>)
   11c90:	2300      	movs	r3, #0
   11c92:	fbe6 0107 	umlal	r0, r1, r6, r7
   11c96:	f7ef f8cf 	bl	e38 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   11c9a:	2101      	movs	r1, #1
   11c9c:	1a28      	subs	r0, r5, r0
   11c9e:	f00e fd6d 	bl	2077c <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   11ca2:	f007 fabb 	bl	1921c <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
   11ca6:	2001      	movs	r0, #1
   11ca8:	f7ff ff8c 	bl	11bc4 <pm_state_notify>
	pm_state_set(z_power_state);
   11cac:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   11cb0:	ab05      	add	r3, sp, #20
   11cb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   11cb6:	4a0a      	ldr	r2, [pc, #40]	; (11ce0 <pm_system_suspend+0x84>)
   11cb8:	b11a      	cbz	r2, 11cc2 <pm_system_suspend+0x66>
		pm_power_state_set(info);
   11cba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   11cbe:	f00b ffdf 	bl	1dc80 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   11cc2:	f7ff ffa5 	bl	11c10 <pm_system_resume>
	k_sched_unlock();
   11cc6:	f007 fb61 	bl	1938c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
   11cca:	7820      	ldrb	r0, [r4, #0]
}
   11ccc:	b009      	add	sp, #36	; 0x24
   11cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11cd0:	20001d1c 	.word	0x20001d1c
   11cd4:	200004f0 	.word	0x200004f0
   11cd8:	000f423f 	.word	0x000f423f
   11cdc:	000f4240 	.word	0x000f4240
   11ce0:	0001dc81 	.word	0x0001dc81

00011ce4 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   11ce4:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   11ce6:	4c04      	ldr	r4, [pc, #16]	; (11cf8 <rtt_console_init+0x14>)
   11ce8:	4620      	mov	r0, r4
   11cea:	f7fe ff93 	bl	10c14 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   11cee:	4620      	mov	r0, r4
   11cf0:	f000 ffb4 	bl	12c5c <__stdout_hook_install>

	return 0;
}
   11cf4:	2000      	movs	r0, #0
   11cf6:	bd10      	pop	{r4, pc}
   11cf8:	00011cfd 	.word	0x00011cfd

00011cfc <rtt_console_out>:
{
   11cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11cfe:	4e14      	ldr	r6, [pc, #80]	; (11d50 <rtt_console_out+0x54>)
	char c = (char)character;
   11d00:	f88d 0007 	strb.w	r0, [sp, #7]
{
   11d04:	4604      	mov	r4, r0
	char c = (char)character;
   11d06:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
   11d08:	f3ef 8711 	mrs	r7, BASEPRI
   11d0c:	f04f 0120 	mov.w	r1, #32
   11d10:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   11d14:	2201      	movs	r2, #1
   11d16:	f10d 0107 	add.w	r1, sp, #7
   11d1a:	2000      	movs	r0, #0
   11d1c:	f006 fcb0 	bl	18680 <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
   11d20:	f387 8811 	msr	BASEPRI, r7
		if (cnt) {
   11d24:	b120      	cbz	r0, 11d30 <rtt_console_out+0x34>
			host_present = true;
   11d26:	2301      	movs	r3, #1
   11d28:	7033      	strb	r3, [r6, #0]
}
   11d2a:	4620      	mov	r0, r4
   11d2c:	b003      	add	sp, #12
   11d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
   11d30:	7833      	ldrb	r3, [r6, #0]
   11d32:	2b00      	cmp	r3, #0
   11d34:	d0f9      	beq.n	11d2a <rtt_console_out+0x2e>
			if (max_cnt) {
   11d36:	3d01      	subs	r5, #1
   11d38:	d008      	beq.n	11d4c <rtt_console_out+0x50>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   11d3a:	f00e fa33 	bl	201a4 <k_is_in_isr>
   11d3e:	2800      	cmp	r0, #0
   11d40:	d1e2      	bne.n	11d08 <rtt_console_out+0xc>
   11d42:	2100      	movs	r1, #0
   11d44:	2042      	movs	r0, #66	; 0x42
   11d46:	f007 fcf9 	bl	1973c <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
   11d4a:	e7dd      	b.n	11d08 <rtt_console_out+0xc>
				host_present = false;
   11d4c:	7035      	strb	r5, [r6, #0]
   11d4e:	e7ec      	b.n	11d2a <rtt_console_out+0x2e>
   11d50:	20002ef0 	.word	0x20002ef0

00011d54 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   11d54:	4a0e      	ldr	r2, [pc, #56]	; (11d90 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   11d56:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   11d58:	1a84      	subs	r4, r0, r2
   11d5a:	10a3      	asrs	r3, r4, #2
   11d5c:	4c0d      	ldr	r4, [pc, #52]	; (11d94 <onoff_stop+0x40>)
   11d5e:	435c      	muls	r4, r3
{
   11d60:	4605      	mov	r5, r0
   11d62:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
   11d64:	200c      	movs	r0, #12
   11d66:	fb00 2004 	mla	r0, r0, r4, r2
{
   11d6a:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
   11d6c:	2140      	movs	r1, #64	; 0x40
   11d6e:	4408      	add	r0, r1
   11d70:	f00b fc98 	bl	1d6a4 <set_off_state>
	if (err < 0) {
   11d74:	1e01      	subs	r1, r0, #0
   11d76:	db05      	blt.n	11d84 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   11d78:	4b07      	ldr	r3, [pc, #28]	; (11d98 <onoff_stop+0x44>)
   11d7a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   11d7e:	6863      	ldr	r3, [r4, #4]
   11d80:	4798      	blx	r3
	return 0;
   11d82:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   11d84:	4628      	mov	r0, r5
   11d86:	4633      	mov	r3, r6
}
   11d88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   11d8c:	4718      	bx	r3
   11d8e:	bf00      	nop
   11d90:	20001d3c 	.word	0x20001d3c
   11d94:	b6db6db7 	.word	0xb6db6db7
   11d98:	000212b4 	.word	0x000212b4

00011d9c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   11d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   11da0:	4e10      	ldr	r6, [pc, #64]	; (11de4 <onoff_start+0x48>)
   11da2:	1b84      	subs	r4, r0, r6
   11da4:	10a3      	asrs	r3, r4, #2
   11da6:	4c10      	ldr	r4, [pc, #64]	; (11de8 <onoff_start+0x4c>)
   11da8:	435c      	muls	r4, r3
   11daa:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
   11dac:	250c      	movs	r5, #12
   11dae:	4365      	muls	r5, r4
{
   11db0:	4680      	mov	r8, r0
	err = set_starting_state(&subdata->flags, ctx);
   11db2:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   11db6:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
   11db8:	4430      	add	r0, r6
   11dba:	2140      	movs	r1, #64	; 0x40
   11dbc:	f00b fc8b 	bl	1d6d6 <set_starting_state>
	if (err < 0) {
   11dc0:	1e01      	subs	r1, r0, #0
   11dc2:	db09      	blt.n	11dd8 <onoff_start+0x3c>
	subdata->cb = cb;
   11dc4:	4a09      	ldr	r2, [pc, #36]	; (11dec <onoff_start+0x50>)
   11dc6:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
   11dc8:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   11dcc:	4b08      	ldr	r3, [pc, #32]	; (11df0 <onoff_start+0x54>)
   11dce:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   11dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   11dd6:	4718      	bx	r3
		notify(mgr, err);
   11dd8:	4640      	mov	r0, r8
   11dda:	463b      	mov	r3, r7
}
   11ddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   11de0:	4718      	bx	r3
   11de2:	bf00      	nop
   11de4:	20001d3c 	.word	0x20001d3c
   11de8:	b6db6db7 	.word	0xb6db6db7
   11dec:	0001d739 	.word	0x0001d739
   11df0:	000212b4 	.word	0x000212b4

00011df4 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   11df4:	2200      	movs	r2, #0
{
   11df6:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   11df8:	2101      	movs	r1, #1
{
   11dfa:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   11dfc:	4610      	mov	r0, r2
   11dfe:	f000 fc19 	bl	12634 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   11e02:	2000      	movs	r0, #0
   11e04:	f000 fbe4 	bl	125d0 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   11e08:	480f      	ldr	r0, [pc, #60]	; (11e48 <clk_init+0x54>)
   11e0a:	f005 ff1f 	bl	17c4c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   11e0e:	4b0f      	ldr	r3, [pc, #60]	; (11e4c <clk_init+0x58>)
   11e10:	4298      	cmp	r0, r3
   11e12:	d115      	bne.n	11e40 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   11e14:	f00e f843 	bl	1fe9e <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   11e18:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   11e1a:	490d      	ldr	r1, [pc, #52]	; (11e50 <clk_init+0x5c>)
   11e1c:	4630      	mov	r0, r6
   11e1e:	f00b f846 	bl	1ceae <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   11e22:	2800      	cmp	r0, #0
   11e24:	db0b      	blt.n	11e3e <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   11e26:	2501      	movs	r5, #1
   11e28:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   11e2a:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   11e2c:	4908      	ldr	r1, [pc, #32]	; (11e50 <clk_init+0x5c>)
   11e2e:	f104 001c 	add.w	r0, r4, #28
   11e32:	f00b f83c 	bl	1ceae <onoff_manager_init>
		if (err < 0) {
   11e36:	2800      	cmp	r0, #0
   11e38:	db01      	blt.n	11e3e <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   11e3a:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   11e3c:	2000      	movs	r0, #0
}
   11e3e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   11e40:	f06f 0004 	mvn.w	r0, #4
   11e44:	e7fb      	b.n	11e3e <clk_init+0x4a>
   11e46:	bf00      	nop
   11e48:	00011e89 	.word	0x00011e89
   11e4c:	0bad0000 	.word	0x0bad0000
   11e50:	000212c4 	.word	0x000212c4

00011e54 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   11e54:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   11e56:	230c      	movs	r3, #12
   11e58:	4809      	ldr	r0, [pc, #36]	; (11e80 <clkstarted_handle.constprop.0+0x2c>)
   11e5a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   11e5c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   11e5e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   11e60:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   11e64:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   11e66:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   11e68:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   11e6a:	4418      	add	r0, r3
   11e6c:	f00b fc51 	bl	1d712 <set_on_state>
	if (callback) {
   11e70:	b12d      	cbz	r5, 11e7e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   11e72:	4632      	mov	r2, r6
   11e74:	462b      	mov	r3, r5
   11e76:	4803      	ldr	r0, [pc, #12]	; (11e84 <clkstarted_handle.constprop.0+0x30>)
}
   11e78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   11e7c:	4718      	bx	r3
}
   11e7e:	bd70      	pop	{r4, r5, r6, pc}
   11e80:	20001d3c 	.word	0x20001d3c
   11e84:	00020b80 	.word	0x00020b80

00011e88 <clock_event_handler>:
	switch (event) {
   11e88:	b110      	cbz	r0, 11e90 <clock_event_handler+0x8>
   11e8a:	2801      	cmp	r0, #1
   11e8c:	d004      	beq.n	11e98 <clock_event_handler+0x10>
   11e8e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   11e90:	4b03      	ldr	r3, [pc, #12]	; (11ea0 <clock_event_handler+0x18>)
   11e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   11e94:	075b      	lsls	r3, r3, #29
   11e96:	d101      	bne.n	11e9c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   11e98:	f7ff bfdc 	b.w	11e54 <clkstarted_handle.constprop.0>
}
   11e9c:	4770      	bx	lr
   11e9e:	bf00      	nop
   11ea0:	20001d3c 	.word	0x20001d3c

00011ea4 <generic_hfclk_start>:
{
   11ea4:	b508      	push	{r3, lr}
	__asm__ volatile(
   11ea6:	f04f 0340 	mov.w	r3, #64	; 0x40
   11eaa:	f3ef 8111 	mrs	r1, BASEPRI
   11eae:	f383 8811 	msr	BASEPRI, r3
   11eb2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   11eb6:	4a12      	ldr	r2, [pc, #72]	; (11f00 <generic_hfclk_start+0x5c>)
   11eb8:	6813      	ldr	r3, [r2, #0]
   11eba:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   11ebe:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   11ec2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   11ec4:	d00c      	beq.n	11ee0 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   11ec6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   11eca:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   11ece:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   11ed2:	f013 0301 	ands.w	r3, r3, #1
   11ed6:	d003      	beq.n	11ee0 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   11ed8:	480a      	ldr	r0, [pc, #40]	; (11f04 <generic_hfclk_start+0x60>)
   11eda:	f00b fc1a 	bl	1d712 <set_on_state>
			already_started = true;
   11ede:	2301      	movs	r3, #1
	__asm__ volatile(
   11ee0:	f381 8811 	msr	BASEPRI, r1
   11ee4:	f3bf 8f6f 	isb	sy
	if (already_started) {
   11ee8:	b123      	cbz	r3, 11ef4 <generic_hfclk_start+0x50>
}
   11eea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   11eee:	2000      	movs	r0, #0
   11ef0:	f7ff bfb0 	b.w	11e54 <clkstarted_handle.constprop.0>
}
   11ef4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   11ef8:	2001      	movs	r0, #1
   11efa:	f005 be97 	b.w	17c2c <nrfx_clock_start>
   11efe:	bf00      	nop
   11f00:	20001d8c 	.word	0x20001d8c
   11f04:	20001d7c 	.word	0x20001d7c

00011f08 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11f08:	4b09      	ldr	r3, [pc, #36]	; (11f30 <generic_hfclk_stop+0x28>)
   11f0a:	f3bf 8f5b 	dmb	ish
   11f0e:	e853 2f00 	ldrex	r2, [r3]
   11f12:	f022 0102 	bic.w	r1, r2, #2
   11f16:	e843 1000 	strex	r0, r1, [r3]
   11f1a:	2800      	cmp	r0, #0
   11f1c:	d1f7      	bne.n	11f0e <generic_hfclk_stop+0x6>
   11f1e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   11f22:	07d3      	lsls	r3, r2, #31
   11f24:	d402      	bmi.n	11f2c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   11f26:	2001      	movs	r0, #1
   11f28:	f00d bfb4 	b.w	1fe94 <nrfx_clock_stop>
}
   11f2c:	4770      	bx	lr
   11f2e:	bf00      	nop
   11f30:	20001d8c 	.word	0x20001d8c

00011f34 <api_blocking_start>:
{
   11f34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   11f36:	2200      	movs	r2, #0
   11f38:	2301      	movs	r3, #1
   11f3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   11f3e:	ab04      	add	r3, sp, #16
   11f40:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   11f44:	4a09      	ldr	r2, [pc, #36]	; (11f6c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   11f46:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   11f4a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   11f4c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   11f50:	f00b fc18 	bl	1d784 <api_start>
	if (err < 0) {
   11f54:	2800      	cmp	r0, #0
   11f56:	db05      	blt.n	11f64 <api_blocking_start+0x30>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   11f58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   11f5c:	2300      	movs	r3, #0
   11f5e:	4668      	mov	r0, sp
   11f60:	f006 ff0e 	bl	18d80 <z_impl_k_sem_take>
}
   11f64:	b007      	add	sp, #28
   11f66:	f85d fb04 	ldr.w	pc, [sp], #4
   11f6a:	bf00      	nop
   11f6c:	0001d757 	.word	0x0001d757

00011f70 <z_nrf_clock_control_get_onoff>:
}
   11f70:	4a02      	ldr	r2, [pc, #8]	; (11f7c <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   11f72:	b2c3      	uxtb	r3, r0
}
   11f74:	201c      	movs	r0, #28
   11f76:	fb03 2000 	mla	r0, r3, r0, r2
   11f7a:	4770      	bx	lr
   11f7c:	20001d3c 	.word	0x20001d3c

00011f80 <z_nrf_clock_control_lf_on>:
{
   11f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11f82:	4928      	ldr	r1, [pc, #160]	; (12024 <z_nrf_clock_control_lf_on+0xa4>)
   11f84:	f3bf 8f5b 	dmb	ish
   11f88:	4606      	mov	r6, r0
   11f8a:	2201      	movs	r2, #1
   11f8c:	e851 3f00 	ldrex	r3, [r1]
   11f90:	e841 2000 	strex	r0, r2, [r1]
   11f94:	2800      	cmp	r0, #0
   11f96:	d1f9      	bne.n	11f8c <z_nrf_clock_control_lf_on+0xc>
   11f98:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   11f9c:	b933      	cbnz	r3, 11fac <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   11f9e:	4922      	ldr	r1, [pc, #136]	; (12028 <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
   11fa0:	4822      	ldr	r0, [pc, #136]	; (1202c <z_nrf_clock_control_lf_on+0xac>)
   11fa2:	604b      	str	r3, [r1, #4]
   11fa4:	60cb      	str	r3, [r1, #12]
   11fa6:	608a      	str	r2, [r1, #8]
   11fa8:	f00a ff94 	bl	1ced4 <onoff_request>
	switch (start_mode) {
   11fac:	1e73      	subs	r3, r6, #1
   11fae:	2b01      	cmp	r3, #1
   11fb0:	d820      	bhi.n	11ff4 <z_nrf_clock_control_lf_on+0x74>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   11fb2:	f00e f8f7 	bl	201a4 <k_is_in_isr>
   11fb6:	4604      	mov	r4, r0
   11fb8:	b910      	cbnz	r0, 11fc0 <z_nrf_clock_control_lf_on+0x40>
	return !z_sys_post_kernel;
   11fba:	4b1d      	ldr	r3, [pc, #116]	; (12030 <z_nrf_clock_control_lf_on+0xb0>)
	int key = isr_mode ? irq_lock() : 0;
   11fbc:	781b      	ldrb	r3, [r3, #0]
   11fbe:	bb53      	cbnz	r3, 12016 <z_nrf_clock_control_lf_on+0x96>
	__asm__ volatile(
   11fc0:	f04f 0340 	mov.w	r3, #64	; 0x40
   11fc4:	f3ef 8511 	mrs	r5, BASEPRI
   11fc8:	f383 8811 	msr	BASEPRI, r3
   11fcc:	f3bf 8f6f 	isb	sy
   11fd0:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   11fd2:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
   11fd6:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   11fda:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
   11fde:	03d2      	lsls	r2, r2, #15
   11fe0:	d509      	bpl.n	11ff6 <z_nrf_clock_control_lf_on+0x76>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   11fe2:	079b      	lsls	r3, r3, #30
   11fe4:	d001      	beq.n	11fea <z_nrf_clock_control_lf_on+0x6a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   11fe6:	2e01      	cmp	r6, #1
   11fe8:	d105      	bne.n	11ff6 <z_nrf_clock_control_lf_on+0x76>
	if (isr_mode) {
   11fea:	b174      	cbz	r4, 1200a <z_nrf_clock_control_lf_on+0x8a>
	__asm__ volatile(
   11fec:	f385 8811 	msr	BASEPRI, r5
   11ff0:	f3bf 8f6f 	isb	sy
}
   11ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   11ff6:	b11c      	cbz	r4, 12000 <z_nrf_clock_control_lf_on+0x80>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   11ff8:	4628      	mov	r0, r5
   11ffa:	f000 fba3 	bl	12744 <arch_cpu_atomic_idle>
}
   11ffe:	e7ea      	b.n	11fd6 <z_nrf_clock_control_lf_on+0x56>
	return z_impl_k_sleep(timeout);
   12000:	2100      	movs	r1, #0
   12002:	2021      	movs	r0, #33	; 0x21
   12004:	f007 fb9a 	bl	1973c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   12008:	e7e5      	b.n	11fd6 <z_nrf_clock_control_lf_on+0x56>
    p_reg->INTENSET = mask;
   1200a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1200e:	2202      	movs	r2, #2
   12010:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   12014:	e7ee      	b.n	11ff4 <z_nrf_clock_control_lf_on+0x74>
    p_reg->INTENCLR = mask;
   12016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1201a:	2202      	movs	r2, #2
   1201c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   12020:	4605      	mov	r5, r0
}
   12022:	e7d6      	b.n	11fd2 <z_nrf_clock_control_lf_on+0x52>
   12024:	20001d90 	.word	0x20001d90
   12028:	20001d2c 	.word	0x20001d2c
   1202c:	20001d58 	.word	0x20001d58
   12030:	20003a77 	.word	0x20003a77

00012034 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   12034:	4a04      	ldr	r2, [pc, #16]	; (12048 <sys_clock_timeout_handler+0x14>)
   12036:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   12038:	1ac8      	subs	r0, r1, r3
   1203a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   1203e:	4403      	add	r3, r0
   12040:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   12042:	f007 bd01 	b.w	19a48 <sys_clock_announce>
   12046:	bf00      	nop
   12048:	20001da4 	.word	0x20001da4

0001204c <set_absolute_alarm>:
{
   1204c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12050:	0086      	lsls	r6, r0, #2
   12052:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   12056:	f100 0450 	add.w	r4, r0, #80	; 0x50
   1205a:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
   1205e:	00a4      	lsls	r4, r4, #2
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   12060:	f8df 807c 	ldr.w	r8, [pc, #124]	; 120e0 <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
   12064:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12068:	b2a4      	uxth	r4, r4
   1206a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1206e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   12072:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
   12076:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1207a:	4087      	lsls	r7, r0
   1207c:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
   1207e:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   12082:	eba3 030a 	sub.w	r3, r3, sl
   12086:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1208a:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1208e:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   12090:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   12094:	d102      	bne.n	1209c <set_absolute_alarm+0x50>
	z_impl_k_busy_wait(usec_to_wait);
   12096:	2013      	movs	r0, #19
   12098:	f00e fb90 	bl	207bc <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1209c:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
   120a0:	1aab      	subs	r3, r5, r2
   120a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   120a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   120aa:	bf88      	it	hi
   120ac:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   120ae:	2300      	movs	r3, #0
   120b0:	6023      	str	r3, [r4, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   120b2:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   120b4:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   120b8:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   120bc:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   120c0:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   120c4:	459a      	cmp	sl, r3
   120c6:	d006      	beq.n	120d6 <set_absolute_alarm+0x8a>
	return (a - b) & COUNTER_MAX;
   120c8:	1aeb      	subs	r3, r5, r3
   120ca:	3b02      	subs	r3, #2
   120cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   120d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   120d4:	d801      	bhi.n	120da <set_absolute_alarm+0x8e>
}
   120d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
   120da:	462b      	mov	r3, r5
   120dc:	e7cf      	b.n	1207e <set_absolute_alarm+0x32>
   120de:	bf00      	nop
   120e0:	40011000 	.word	0x40011000

000120e4 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   120e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
   120e6:	4c15      	ldr	r4, [pc, #84]	; (1213c <rtc_nrf_isr+0x58>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   120e8:	4f15      	ldr	r7, [pc, #84]	; (12140 <rtc_nrf_isr+0x5c>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   120ea:	2600      	movs	r6, #0
   120ec:	4b15      	ldr	r3, [pc, #84]	; (12144 <rtc_nrf_isr+0x60>)
   120ee:	2000      	movs	r0, #0
   120f0:	681d      	ldr	r5, [r3, #0]
   120f2:	469c      	mov	ip, r3
   120f4:	b106      	cbz	r6, 120f8 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   120f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
   120f8:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   120fc:	03d2      	lsls	r2, r2, #15
   120fe:	d5fa      	bpl.n	120f6 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12100:	683a      	ldr	r2, [r7, #0]
   12102:	2a00      	cmp	r2, #0
   12104:	d0f7      	beq.n	120f6 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12106:	603e      	str	r6, [r7, #0]
   12108:	683a      	ldr	r2, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1210a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1210e:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
   12112:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
   12116:	f8d4 6504 	ldr.w	r6, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1211a:	1a72      	subs	r2, r6, r1
   1211c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				cc_val = now;
   12120:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   12124:	bf88      	it	hi
   12126:	4631      	movhi	r1, r6
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   12128:	2601      	movs	r6, #1
			if (handler) {
   1212a:	b11d      	cbz	r5, 12134 <rtc_nrf_isr+0x50>
				handler(chan, cc_val,
   1212c:	685a      	ldr	r2, [r3, #4]
   1212e:	6018      	str	r0, [r3, #0]
   12130:	47a8      	blx	r5
   12132:	e7db      	b.n	120ec <rtc_nrf_isr+0x8>
   12134:	f8cc 5000 	str.w	r5, [ip]
}
   12138:	e7dd      	b.n	120f6 <rtc_nrf_isr+0x12>
   1213a:	bf00      	nop
   1213c:	40011000 	.word	0x40011000
   12140:	40011140 	.word	0x40011140
   12144:	20001d98 	.word	0x20001d98

00012148 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   12148:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   1214a:	4d10      	ldr	r5, [pc, #64]	; (1218c <sys_clock_driver_init+0x44>)
   1214c:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
   1214e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
   12152:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
   12156:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1215a:	4b0d      	ldr	r3, [pc, #52]	; (12190 <sys_clock_driver_init+0x48>)
   1215c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   12160:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   12164:	2101      	movs	r1, #1
   12166:	4622      	mov	r2, r4
   12168:	2011      	movs	r0, #17
   1216a:	f000 fa63 	bl	12634 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1216e:	2011      	movs	r0, #17
   12170:	f000 fa2e 	bl	125d0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   12174:	4a07      	ldr	r2, [pc, #28]	; (12194 <sys_clock_driver_init+0x4c>)
   12176:	2301      	movs	r3, #1
   12178:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1217a:	4a07      	ldr	r2, [pc, #28]	; (12198 <sys_clock_driver_init+0x50>)
   1217c:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   1217e:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
   12180:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   12182:	f7ff fefd 	bl	11f80 <z_nrf_clock_control_lf_on>

	return 0;
}
   12186:	4620      	mov	r0, r4
   12188:	bd38      	pop	{r3, r4, r5, pc}
   1218a:	bf00      	nop
   1218c:	40011000 	.word	0x40011000
   12190:	e000e100 	.word	0xe000e100
   12194:	40011008 	.word	0x40011008
   12198:	20001da0 	.word	0x20001da0

0001219c <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1219c:	4b13      	ldr	r3, [pc, #76]	; (121ec <sys_clock_set_timeout+0x50>)
   1219e:	f1b0 3fff 	cmp.w	r0, #4294967295
   121a2:	bf08      	it	eq
   121a4:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   121a6:	3801      	subs	r0, #1
   121a8:	2800      	cmp	r0, #0
   121aa:	dd1c      	ble.n	121e6 <sys_clock_set_timeout+0x4a>
   121ac:	4298      	cmp	r0, r3
   121ae:	bfa8      	it	ge
   121b0:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   121b2:	4b0f      	ldr	r3, [pc, #60]	; (121f0 <sys_clock_set_timeout+0x54>)
   121b4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
   121b8:	4b0e      	ldr	r3, [pc, #56]	; (121f4 <sys_clock_set_timeout+0x58>)
   121ba:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   121bc:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   121be:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
   121c2:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
   121c6:	bf18      	it	ne
   121c8:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
   121ca:	4a0b      	ldr	r2, [pc, #44]	; (121f8 <sys_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   121cc:	3301      	adds	r3, #1
   121ce:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
   121d0:	480a      	ldr	r0, [pc, #40]	; (121fc <sys_clock_set_timeout+0x60>)
   121d2:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   121d4:	2000      	movs	r0, #0
   121d6:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   121d8:	4a04      	ldr	r2, [pc, #16]	; (121ec <sys_clock_set_timeout+0x50>)
   121da:	4293      	cmp	r3, r2
   121dc:	bf94      	ite	ls
   121de:	18c9      	addls	r1, r1, r3
   121e0:	1889      	addhi	r1, r1, r2
   121e2:	f7ff bf33 	b.w	1204c <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   121e6:	2000      	movs	r0, #0
   121e8:	e7e3      	b.n	121b2 <sys_clock_set_timeout+0x16>
   121ea:	bf00      	nop
   121ec:	007fffff 	.word	0x007fffff
   121f0:	40011000 	.word	0x40011000
   121f4:	20001da4 	.word	0x20001da4
   121f8:	20001d98 	.word	0x20001d98
   121fc:	00012035 	.word	0x00012035

00012200 <sys_clock_elapsed>:
   12200:	4b04      	ldr	r3, [pc, #16]	; (12214 <sys_clock_elapsed+0x14>)
   12202:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
   12206:	4b04      	ldr	r3, [pc, #16]	; (12218 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
   12208:	681b      	ldr	r3, [r3, #0]
   1220a:	1ac0      	subs	r0, r0, r3
}
   1220c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   12210:	4770      	bx	lr
   12212:	bf00      	nop
   12214:	40011000 	.word	0x40011000
   12218:	20001da4 	.word	0x20001da4

0001221c <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   1221c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   1221e:	4e26      	ldr	r6, [pc, #152]	; (122b8 <tc_aes128_set_encrypt_key+0x9c>)
{
   12220:	4607      	mov	r7, r0
   12222:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   12224:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   12226:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   12228:	ad01      	add	r5, sp, #4
   1222a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1222c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1222e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12230:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   12234:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   12238:	4638      	mov	r0, r7
   1223a:	2f00      	cmp	r7, #0
   1223c:	d038      	beq.n	122b0 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   1223e:	2c00      	cmp	r4, #0
   12240:	d038      	beq.n	122b4 <tc_aes128_set_encrypt_key+0x98>
   12242:	1f38      	subs	r0, r7, #4
   12244:	4621      	mov	r1, r4
   12246:	4602      	mov	r2, r0
   12248:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1224a:	784b      	ldrb	r3, [r1, #1]
   1224c:	780d      	ldrb	r5, [r1, #0]
   1224e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   12250:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   12254:	78cd      	ldrb	r5, [r1, #3]
   12256:	432b      	orrs	r3, r5
   12258:	788d      	ldrb	r5, [r1, #2]
   1225a:	3104      	adds	r1, #4
   1225c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   12260:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12262:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   12266:	d1f0      	bne.n	1224a <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   12268:	4c14      	ldr	r4, [pc, #80]	; (122bc <tc_aes128_set_encrypt_key+0xa0>)
   1226a:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   1226c:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   1226e:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   12270:	d116      	bne.n	122a0 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   12272:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12276:	5ca5      	ldrb	r5, [r4, r2]
   12278:	0e1a      	lsrs	r2, r3, #24
   1227a:	5ca2      	ldrb	r2, [r4, r2]
   1227c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   12280:	f3c3 2507 	ubfx	r5, r3, #8, #8
   12284:	b2db      	uxtb	r3, r3
   12286:	5d65      	ldrb	r5, [r4, r5]
   12288:	5ce3      	ldrb	r3, [r4, r3]
   1228a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   1228e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   12292:	ad0c      	add	r5, sp, #48	; 0x30
   12294:	f021 0303 	bic.w	r3, r1, #3
   12298:	442b      	add	r3, r5
   1229a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   1229e:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   122a0:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   122a4:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   122a6:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   122a8:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   122aa:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   122ac:	d1de      	bne.n	1226c <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   122ae:	2001      	movs	r0, #1
}
   122b0:	b00d      	add	sp, #52	; 0x34
   122b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   122b4:	4620      	mov	r0, r4
   122b6:	e7fb      	b.n	122b0 <tc_aes128_set_encrypt_key+0x94>
   122b8:	00020ee0 	.word	0x00020ee0
   122bc:	00021af2 	.word	0x00021af2

000122c0 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   122c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   122c4:	4615      	mov	r5, r2
   122c6:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   122c8:	4606      	mov	r6, r0
   122ca:	2800      	cmp	r0, #0
   122cc:	d058      	beq.n	12380 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   122ce:	2900      	cmp	r1, #0
   122d0:	d059      	beq.n	12386 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   122d2:	2a00      	cmp	r2, #0
   122d4:	d059      	beq.n	1238a <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   122d6:	2310      	movs	r3, #16
   122d8:	460a      	mov	r2, r1
   122da:	4668      	mov	r0, sp
   122dc:	4619      	mov	r1, r3
   122de:	f00b fa6f 	bl	1d7c0 <_copy>
	add_round_key(state, s->words);
   122e2:	4629      	mov	r1, r5
   122e4:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   122e6:	4c2a      	ldr	r4, [pc, #168]	; (12390 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   122e8:	f00b fa82 	bl	1d7f0 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   122ec:	f105 0710 	add.w	r7, r5, #16
   122f0:	46a1      	mov	r9, r4
   122f2:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   122f4:	46e8      	mov	r8, sp
{
   122f6:	466a      	mov	r2, sp
   122f8:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   122fa:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   122fc:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   122fe:	5c61      	ldrb	r1, [r4, r1]
   12300:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   12304:	d1f9      	bne.n	122fa <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   12306:	4668      	mov	r0, sp
   12308:	f00b fab7 	bl	1d87a <shift_rows>
	mult_row_column(t, s);
   1230c:	4669      	mov	r1, sp
   1230e:	a804      	add	r0, sp, #16
   12310:	f00b faec 	bl	1d8ec <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   12314:	a901      	add	r1, sp, #4
   12316:	a805      	add	r0, sp, #20
   12318:	f00b fae8 	bl	1d8ec <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1231c:	a902      	add	r1, sp, #8
   1231e:	a806      	add	r0, sp, #24
   12320:	f00b fae4 	bl	1d8ec <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   12324:	a903      	add	r1, sp, #12
   12326:	a807      	add	r0, sp, #28
   12328:	f00b fae0 	bl	1d8ec <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1232c:	2310      	movs	r3, #16
   1232e:	4619      	mov	r1, r3
   12330:	eb0d 0203 	add.w	r2, sp, r3
   12334:	4668      	mov	r0, sp
   12336:	f00b fa43 	bl	1d7c0 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1233a:	4639      	mov	r1, r7
   1233c:	4668      	mov	r0, sp
   1233e:	3710      	adds	r7, #16
   12340:	f00b fa56 	bl	1d7f0 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   12344:	42af      	cmp	r7, r5
   12346:	d1d5      	bne.n	122f4 <tc_aes_encrypt+0x34>
   12348:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   1234a:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   1234e:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   12350:	f819 3003 	ldrb.w	r3, [r9, r3]
   12354:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   12358:	d1f7      	bne.n	1234a <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   1235a:	4668      	mov	r0, sp
   1235c:	f00b fa8d 	bl	1d87a <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   12360:	4629      	mov	r1, r5
   12362:	4668      	mov	r0, sp
   12364:	f00b fa44 	bl	1d7f0 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   12368:	2310      	movs	r3, #16
   1236a:	4619      	mov	r1, r3
   1236c:	466a      	mov	r2, sp
   1236e:	4630      	mov	r0, r6
   12370:	f00b fa26 	bl	1d7c0 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   12374:	4668      	mov	r0, sp
   12376:	2210      	movs	r2, #16
   12378:	4621      	mov	r1, r4
   1237a:	f00b fa2e 	bl	1d7da <_set>

	return TC_CRYPTO_SUCCESS;
   1237e:	2001      	movs	r0, #1
}
   12380:	b009      	add	sp, #36	; 0x24
   12382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   12386:	4608      	mov	r0, r1
   12388:	e7fa      	b.n	12380 <tc_aes_encrypt+0xc0>
   1238a:	4610      	mov	r0, r2
   1238c:	e7f8      	b.n	12380 <tc_aes_encrypt+0xc0>
   1238e:	bf00      	nop
   12390:	00021af2 	.word	0x00021af2

00012394 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   12394:	4801      	ldr	r0, [pc, #4]	; (1239c <nrf_cc3xx_platform_abort_init+0x8>)
   12396:	f007 bce1 	b.w	19d5c <nrf_cc3xx_platform_set_abort>
   1239a:	bf00      	nop
   1239c:	000212d0 	.word	0x000212d0

000123a0 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   123a0:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   123a2:	b1d0      	cbz	r0, 123da <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   123a4:	6843      	ldr	r3, [r0, #4]
   123a6:	2b04      	cmp	r3, #4
   123a8:	d111      	bne.n	123ce <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   123aa:	2200      	movs	r2, #0
   123ac:	6803      	ldr	r3, [r0, #0]
   123ae:	f3bf 8f5b 	dmb	ish
   123b2:	e853 1f00 	ldrex	r1, [r3]
   123b6:	2901      	cmp	r1, #1
   123b8:	d103      	bne.n	123c2 <mutex_unlock_platform+0x22>
   123ba:	e843 2000 	strex	r0, r2, [r3]
   123be:	2800      	cmp	r0, #0
   123c0:	d1f7      	bne.n	123b2 <mutex_unlock_platform+0x12>
   123c2:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   123c6:	4807      	ldr	r0, [pc, #28]	; (123e4 <mutex_unlock_platform+0x44>)
   123c8:	bf08      	it	eq
   123ca:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   123cc:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   123ce:	b13b      	cbz	r3, 123e0 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
   123d0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   123d2:	f006 fc35 	bl	18c40 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   123d6:	2000      	movs	r0, #0
   123d8:	e7f8      	b.n	123cc <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   123da:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   123de:	e7f5      	b.n	123cc <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   123e0:	4801      	ldr	r0, [pc, #4]	; (123e8 <mutex_unlock_platform+0x48>)
   123e2:	e7f3      	b.n	123cc <mutex_unlock_platform+0x2c>
   123e4:	ffff8fe9 	.word	0xffff8fe9
   123e8:	ffff8fea 	.word	0xffff8fea

000123ec <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   123ec:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   123ee:	4604      	mov	r4, r0
   123f0:	b918      	cbnz	r0, 123fa <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   123f2:	4b0d      	ldr	r3, [pc, #52]	; (12428 <mutex_free_platform+0x3c>)
   123f4:	480d      	ldr	r0, [pc, #52]	; (1242c <mutex_free_platform+0x40>)
   123f6:	685b      	ldr	r3, [r3, #4]
   123f8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   123fa:	6861      	ldr	r1, [r4, #4]
   123fc:	2908      	cmp	r1, #8
   123fe:	d00d      	beq.n	1241c <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12400:	f031 0304 	bics.w	r3, r1, #4
   12404:	d00a      	beq.n	1241c <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   12406:	f011 0102 	ands.w	r1, r1, #2
   1240a:	d008      	beq.n	1241e <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   1240c:	4808      	ldr	r0, [pc, #32]	; (12430 <mutex_free_platform+0x44>)
   1240e:	4621      	mov	r1, r4
   12410:	f00d fe9f 	bl	20152 <k_mem_slab_free>
        mutex->mutex = NULL;
   12414:	2300      	movs	r3, #0
   12416:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   12418:	2300      	movs	r3, #0
   1241a:	6063      	str	r3, [r4, #4]
}
   1241c:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   1241e:	6820      	ldr	r0, [r4, #0]
   12420:	2214      	movs	r2, #20
   12422:	f00b fc21 	bl	1dc68 <memset>
   12426:	e7f7      	b.n	12418 <mutex_free_platform+0x2c>
   12428:	20000634 	.word	0x20000634
   1242c:	00021bf2 	.word	0x00021bf2
   12430:	20001da8 	.word	0x20001da8

00012434 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12434:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   12436:	4604      	mov	r4, r0
   12438:	b918      	cbnz	r0, 12442 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   1243a:	4b16      	ldr	r3, [pc, #88]	; (12494 <mutex_init_platform+0x60>)
   1243c:	4816      	ldr	r0, [pc, #88]	; (12498 <mutex_init_platform+0x64>)
   1243e:	685b      	ldr	r3, [r3, #4]
   12440:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   12442:	6863      	ldr	r3, [r4, #4]
   12444:	2b04      	cmp	r3, #4
   12446:	d023      	beq.n	12490 <mutex_init_platform+0x5c>
   12448:	2b08      	cmp	r3, #8
   1244a:	d021      	beq.n	12490 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   1244c:	b9cb      	cbnz	r3, 12482 <mutex_init_platform+0x4e>
   1244e:	6823      	ldr	r3, [r4, #0]
   12450:	b9bb      	cbnz	r3, 12482 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   12452:	4812      	ldr	r0, [pc, #72]	; (1249c <mutex_init_platform+0x68>)
   12454:	f04f 32ff 	mov.w	r2, #4294967295
   12458:	f04f 33ff 	mov.w	r3, #4294967295
   1245c:	4621      	mov	r1, r4
   1245e:	f006 fa6f 	bl	18940 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   12462:	b908      	cbnz	r0, 12468 <mutex_init_platform+0x34>
   12464:	6823      	ldr	r3, [r4, #0]
   12466:	b91b      	cbnz	r3, 12470 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   12468:	4b0a      	ldr	r3, [pc, #40]	; (12494 <mutex_init_platform+0x60>)
   1246a:	480d      	ldr	r0, [pc, #52]	; (124a0 <mutex_init_platform+0x6c>)
   1246c:	685b      	ldr	r3, [r3, #4]
   1246e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   12470:	6820      	ldr	r0, [r4, #0]
   12472:	2214      	movs	r2, #20
   12474:	2100      	movs	r1, #0
   12476:	f00b fbf7 	bl	1dc68 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   1247a:	6863      	ldr	r3, [r4, #4]
   1247c:	f043 0302 	orr.w	r3, r3, #2
   12480:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   12482:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   12484:	f00d fea0 	bl	201c8 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   12488:	6863      	ldr	r3, [r4, #4]
   1248a:	f043 0301 	orr.w	r3, r3, #1
   1248e:	6063      	str	r3, [r4, #4]
}
   12490:	bd10      	pop	{r4, pc}
   12492:	bf00      	nop
   12494:	20000634 	.word	0x20000634
   12498:	00021bf2 	.word	0x00021bf2
   1249c:	20001da8 	.word	0x20001da8
   124a0:	00021c18 	.word	0x00021c18

000124a4 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   124a4:	b508      	push	{r3, lr}
    if(mutex == NULL) {
   124a6:	b308      	cbz	r0, 124ec <mutex_lock_platform+0x48>
    switch (mutex->flags) {
   124a8:	6843      	ldr	r3, [r0, #4]
   124aa:	2b04      	cmp	r3, #4
   124ac:	d110      	bne.n	124d0 <mutex_lock_platform+0x2c>
   124ae:	2201      	movs	r2, #1
   124b0:	6803      	ldr	r3, [r0, #0]
   124b2:	f3bf 8f5b 	dmb	ish
   124b6:	e853 1f00 	ldrex	r1, [r3]
   124ba:	2900      	cmp	r1, #0
   124bc:	d103      	bne.n	124c6 <mutex_lock_platform+0x22>
   124be:	e843 2000 	strex	r0, r2, [r3]
   124c2:	2800      	cmp	r0, #0
   124c4:	d1f7      	bne.n	124b6 <mutex_lock_platform+0x12>
   124c6:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   124ca:	d10b      	bne.n	124e4 <mutex_lock_platform+0x40>
   124cc:	2000      	movs	r0, #0
}
   124ce:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   124d0:	b153      	cbz	r3, 124e8 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
   124d2:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   124d4:	f04f 32ff 	mov.w	r2, #4294967295
   124d8:	f04f 33ff 	mov.w	r3, #4294967295
   124dc:	f006 fb32 	bl	18b44 <z_impl_k_mutex_lock>
        if (ret == 0) {
   124e0:	2800      	cmp	r0, #0
   124e2:	d0f3      	beq.n	124cc <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   124e4:	4803      	ldr	r0, [pc, #12]	; (124f4 <mutex_lock_platform+0x50>)
   124e6:	e7f2      	b.n	124ce <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   124e8:	4803      	ldr	r0, [pc, #12]	; (124f8 <mutex_lock_platform+0x54>)
   124ea:	e7f0      	b.n	124ce <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   124ec:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   124f0:	e7ed      	b.n	124ce <mutex_lock_platform+0x2a>
   124f2:	bf00      	nop
   124f4:	ffff8fe9 	.word	0xffff8fe9
   124f8:	ffff8fea 	.word	0xffff8fea

000124fc <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   124fc:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   124fe:	4906      	ldr	r1, [pc, #24]	; (12518 <nrf_cc3xx_platform_mutex_init+0x1c>)
   12500:	4806      	ldr	r0, [pc, #24]	; (1251c <nrf_cc3xx_platform_mutex_init+0x20>)
   12502:	2340      	movs	r3, #64	; 0x40
   12504:	2214      	movs	r2, #20
   12506:	f00d fe09 	bl	2011c <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   1250a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   1250e:	4904      	ldr	r1, [pc, #16]	; (12520 <nrf_cc3xx_platform_mutex_init+0x24>)
   12510:	4804      	ldr	r0, [pc, #16]	; (12524 <nrf_cc3xx_platform_mutex_init+0x28>)
   12512:	f007 bcdb 	b.w	19ecc <nrf_cc3xx_platform_set_mutexes>
   12516:	bf00      	nop
   12518:	20001dc4 	.word	0x20001dc4
   1251c:	20001da8 	.word	0x20001da8
   12520:	000212e8 	.word	0x000212e8
   12524:	000212d8 	.word	0x000212d8

00012528 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   12528:	4a09      	ldr	r2, [pc, #36]	; (12550 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1252a:	490a      	ldr	r1, [pc, #40]	; (12554 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   1252c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1252e:	6809      	ldr	r1, [r1, #0]
   12530:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12532:	4909      	ldr	r1, [pc, #36]	; (12558 <arch_swap+0x30>)
	_current->arch.basepri = key;
   12534:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12536:	684b      	ldr	r3, [r1, #4]
   12538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1253c:	604b      	str	r3, [r1, #4]
   1253e:	2300      	movs	r3, #0
   12540:	f383 8811 	msr	BASEPRI, r3
   12544:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   12548:	6893      	ldr	r3, [r2, #8]
}
   1254a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   1254c:	4770      	bx	lr
   1254e:	bf00      	nop
   12550:	20002590 	.word	0x20002590
   12554:	000216d0 	.word	0x000216d0
   12558:	e000ed00 	.word	0xe000ed00

0001255c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1255c:	4912      	ldr	r1, [pc, #72]	; (125a8 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1255e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   12560:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   12564:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   12566:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1256a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1256e:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   12570:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   12574:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   12578:	4f0c      	ldr	r7, [pc, #48]	; (125ac <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1257a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1257e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   12580:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   12582:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   12584:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   12586:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   12588:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1258a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1258e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   12590:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   12592:	f000 fab3 	bl	12afc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   12596:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1259a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1259e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   125a2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   125a6:	4770      	bx	lr
    ldr r1, =_kernel
   125a8:	20002590 	.word	0x20002590
    ldr v4, =_SCS_ICSR
   125ac:	e000ed04 	.word	0xe000ed04

000125b0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   125b0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   125b4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   125b6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   125ba:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   125be:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   125c0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   125c4:	2902      	cmp	r1, #2
    beq _oops
   125c6:	d0ff      	beq.n	125c8 <_oops>

000125c8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   125c8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   125ca:	f00b fad7 	bl	1db7c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   125ce:	bd01      	pop	{r0, pc}

000125d0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   125d0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   125d2:	2b00      	cmp	r3, #0
   125d4:	db08      	blt.n	125e8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   125d6:	2201      	movs	r2, #1
   125d8:	f000 001f 	and.w	r0, r0, #31
   125dc:	fa02 f000 	lsl.w	r0, r2, r0
   125e0:	095b      	lsrs	r3, r3, #5
   125e2:	4a02      	ldr	r2, [pc, #8]	; (125ec <arch_irq_enable+0x1c>)
   125e4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   125e8:	4770      	bx	lr
   125ea:	bf00      	nop
   125ec:	e000e100 	.word	0xe000e100

000125f0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   125f0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   125f2:	2b00      	cmp	r3, #0
   125f4:	db0d      	blt.n	12612 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   125f6:	2201      	movs	r2, #1
   125f8:	095b      	lsrs	r3, r3, #5
   125fa:	f000 001f 	and.w	r0, r0, #31
   125fe:	fa02 f000 	lsl.w	r0, r2, r0
   12602:	3320      	adds	r3, #32
   12604:	4a03      	ldr	r2, [pc, #12]	; (12614 <arch_irq_disable+0x24>)
   12606:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1260a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1260e:	f3bf 8f6f 	isb	sy
}
   12612:	4770      	bx	lr
   12614:	e000e100 	.word	0xe000e100

00012618 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   12618:	4b05      	ldr	r3, [pc, #20]	; (12630 <arch_irq_is_enabled+0x18>)
   1261a:	0942      	lsrs	r2, r0, #5
   1261c:	f000 001f 	and.w	r0, r0, #31
   12620:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12624:	2301      	movs	r3, #1
   12626:	fa03 f000 	lsl.w	r0, r3, r0
}
   1262a:	4010      	ands	r0, r2
   1262c:	4770      	bx	lr
   1262e:	bf00      	nop
   12630:	e000e100 	.word	0xe000e100

00012634 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   12634:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   12636:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   12638:	bf54      	ite	pl
   1263a:	3102      	addpl	r1, #2
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   1263c:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1263e:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12640:	bfac      	ite	ge
   12642:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12646:	4a07      	ldrlt	r2, [pc, #28]	; (12664 <z_arm_irq_priority_set+0x30>)
   12648:	ea4f 1341 	mov.w	r3, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1264c:	bfac      	ite	ge
   1264e:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12652:	f000 000f 	andlt.w	r0, r0, #15
   12656:	b2db      	uxtb	r3, r3
   12658:	bfb4      	ite	lt
   1265a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1265c:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   12660:	4770      	bx	lr
   12662:	bf00      	nop
   12664:	e000ed14 	.word	0xe000ed14

00012668 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   12668:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1266a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   1266c:	4b04      	ldr	r3, [pc, #16]	; (12680 <_arch_isr_direct_pm+0x18>)
   1266e:	6a18      	ldr	r0, [r3, #32]
   12670:	b118      	cbz	r0, 1267a <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   12672:	2200      	movs	r2, #0
   12674:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
   12676:	f00d fda0 	bl	201ba <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   1267a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   1267c:	bd08      	pop	{r3, pc}
   1267e:	bf00      	nop
   12680:	20002590 	.word	0x20002590

00012684 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   12684:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   12688:	9b00      	ldr	r3, [sp, #0]
   1268a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   1268e:	490a      	ldr	r1, [pc, #40]	; (126b8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   12690:	9b01      	ldr	r3, [sp, #4]
   12692:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   12696:	9b02      	ldr	r3, [sp, #8]
   12698:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   1269c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   126a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   126a4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   126a8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   126ac:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   126ae:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   126b0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   126b2:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   126b4:	4770      	bx	lr
   126b6:	bf00      	nop
   126b8:	0001cfb1 	.word	0x0001cfb1

000126bc <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   126bc:	4a0b      	ldr	r2, [pc, #44]	; (126ec <z_check_thread_stack_fail+0x30>)
{
   126be:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   126c0:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   126c2:	b190      	cbz	r0, 126ea <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   126c4:	f113 0f16 	cmn.w	r3, #22
   126c8:	6e80      	ldr	r0, [r0, #104]	; 0x68
   126ca:	d005      	beq.n	126d8 <z_check_thread_stack_fail+0x1c>
   126cc:	f1a0 0220 	sub.w	r2, r0, #32
   126d0:	429a      	cmp	r2, r3
   126d2:	d806      	bhi.n	126e2 <z_check_thread_stack_fail+0x26>
   126d4:	4283      	cmp	r3, r0
   126d6:	d204      	bcs.n	126e2 <z_check_thread_stack_fail+0x26>
   126d8:	4281      	cmp	r1, r0
   126da:	bf2c      	ite	cs
   126dc:	2100      	movcs	r1, #0
   126de:	2101      	movcc	r1, #1
   126e0:	e000      	b.n	126e4 <z_check_thread_stack_fail+0x28>
   126e2:	2100      	movs	r1, #0
   126e4:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   126e6:	bf08      	it	eq
   126e8:	2000      	moveq	r0, #0
}
   126ea:	4770      	bx	lr
   126ec:	20002590 	.word	0x20002590

000126f0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   126f0:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   126f2:	4b09      	ldr	r3, [pc, #36]	; (12718 <arch_switch_to_main_thread+0x28>)
   126f4:	6098      	str	r0, [r3, #8]
{
   126f6:	460d      	mov	r5, r1
   126f8:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   126fa:	f000 f9ff 	bl	12afc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   126fe:	4620      	mov	r0, r4
   12700:	f385 8809 	msr	PSP, r5
   12704:	2100      	movs	r1, #0
   12706:	b663      	cpsie	if
   12708:	f381 8811 	msr	BASEPRI, r1
   1270c:	f3bf 8f6f 	isb	sy
   12710:	2200      	movs	r2, #0
   12712:	2300      	movs	r3, #0
   12714:	f00a fc4c 	bl	1cfb0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   12718:	20002590 	.word	0x20002590

0001271c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1271c:	4901      	ldr	r1, [pc, #4]	; (12724 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1271e:	2210      	movs	r2, #16
	str	r2, [r1]
   12720:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   12722:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   12724:	e000ed10 	.word	0xe000ed10

00012728 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   12728:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1272a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1272c:	f380 8811 	msr	BASEPRI, r0
	isb
   12730:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   12734:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   12738:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1273a:	b662      	cpsie	i
	isb
   1273c:	f3bf 8f6f 	isb	sy

	bx	lr
   12740:	4770      	bx	lr
   12742:	bf00      	nop

00012744 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   12744:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   12746:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   12748:	f381 8811 	msr	BASEPRI, r1

	wfe
   1274c:	bf20      	wfe

	msr	BASEPRI, r0
   1274e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   12752:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   12754:	4770      	bx	lr
   12756:	bf00      	nop

00012758 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   12758:	bf30      	wfi
    b z_SysNmiOnReset
   1275a:	f7ff bffd 	b.w	12758 <z_SysNmiOnReset>
   1275e:	bf00      	nop

00012760 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12760:	4a0b      	ldr	r2, [pc, #44]	; (12790 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   12762:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12764:	4b0b      	ldr	r3, [pc, #44]	; (12794 <z_arm_prep_c+0x34>)
   12766:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1276a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   1276c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12770:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   12774:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   12778:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1277c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   12780:	f005 fffe 	bl	18780 <z_bss_zero>
	z_data_copy();
   12784:	f007 f86e 	bl	19864 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   12788:	f000 f98e 	bl	12aa8 <z_arm_interrupt_init>
	z_cstart();
   1278c:	f006 f81c 	bl	187c8 <z_cstart>
   12790:	00000000 	.word	0x00000000
   12794:	e000ed00 	.word	0xe000ed00

00012798 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   12798:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1279a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1279c:	4a0b      	ldr	r2, [pc, #44]	; (127cc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1279e:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   127a0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   127a2:	bf1e      	ittt	ne
	movne	r1, #0
   127a4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   127a6:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
   127a8:	f00d fd07 	blne	201ba <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   127ac:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   127ae:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   127b2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   127b6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   127ba:	4905      	ldr	r1, [pc, #20]	; (127d0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   127bc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   127be:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   127c0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   127c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   127c6:	4903      	ldr	r1, [pc, #12]	; (127d4 <_isr_wrapper+0x3c>)
	bx r1
   127c8:	4708      	bx	r1
   127ca:	0000      	.short	0x0000
	ldr r2, =_kernel
   127cc:	20002590 	.word	0x20002590
	ldr r1, =_sw_isr_table
   127d0:	00020c58 	.word	0x00020c58
	ldr r1, =z_arm_int_exit
   127d4:	00012a09 	.word	0x00012a09

000127d8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   127d8:	2000      	movs	r0, #0
    msr CONTROL, r0
   127da:	f380 8814 	msr	CONTROL, r0
    isb
   127de:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   127e2:	f00e f973 	bl	20acc <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   127e6:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   127e8:	490d      	ldr	r1, [pc, #52]	; (12820 <__start+0x48>)
    str r0, [r1]
   127ea:	6008      	str	r0, [r1, #0]
    dsb
   127ec:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   127f0:	480c      	ldr	r0, [pc, #48]	; (12824 <__start+0x4c>)
    msr msp, r0
   127f2:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   127f6:	f000 f925 	bl	12a44 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   127fa:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   127fc:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   12800:	4809      	ldr	r0, [pc, #36]	; (12828 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   12802:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   12806:	1840      	adds	r0, r0, r1
    msr PSP, r0
   12808:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1280c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   12810:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   12812:	4308      	orrs	r0, r1
    msr CONTROL, r0
   12814:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   12818:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1281c:	f7ff ffa0 	bl	12760 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   12820:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   12824:	200056c0 	.word	0x200056c0
    ldr r0, =z_interrupt_stacks
   12828:	20005840 	.word	0x20005840

0001282c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1282c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   12830:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   12834:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   12836:	4672      	mov	r2, lr
	bl z_arm_fault
   12838:	f000 f868 	bl	1290c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1283c:	bd01      	pop	{r0, pc}
   1283e:	bf00      	nop

00012840 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   12840:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   12842:	4b19      	ldr	r3, [pc, #100]	; (128a8 <mem_manage_fault+0x68>)
{
   12844:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   12846:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   12848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1284a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
   1284c:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1284e:	0790      	lsls	r0, r2, #30
   12850:	d519      	bpl.n	12886 <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   12852:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   12854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12856:	0612      	lsls	r2, r2, #24
   12858:	d515      	bpl.n	12886 <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
   1285a:	b119      	cbz	r1, 12864 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1285c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1285e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   12862:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   12864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   12866:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   12868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1286a:	06d1      	lsls	r1, r2, #27
   1286c:	d40e      	bmi.n	1288c <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   12870:	079a      	lsls	r2, r3, #30
   12872:	d40b      	bmi.n	1288c <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12874:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   12876:	4a0c      	ldr	r2, [pc, #48]	; (128a8 <mem_manage_fault+0x68>)
   12878:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1287a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   1287e:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   12880:	2300      	movs	r3, #0
   12882:	7023      	strb	r3, [r4, #0]

	return reason;
}
   12884:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
   12886:	f06f 0015 	mvn.w	r0, #21
   1288a:	e7eb      	b.n	12864 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   1288c:	4b06      	ldr	r3, [pc, #24]	; (128a8 <mem_manage_fault+0x68>)
   1288e:	685b      	ldr	r3, [r3, #4]
   12890:	051b      	lsls	r3, r3, #20
   12892:	d5ef      	bpl.n	12874 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   12894:	4629      	mov	r1, r5
   12896:	f7ff ff11 	bl	126bc <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   1289a:	2800      	cmp	r0, #0
   1289c:	d0ea      	beq.n	12874 <mem_manage_fault+0x34>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1289e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   128a2:	2002      	movs	r0, #2
   128a4:	e7e7      	b.n	12876 <mem_manage_fault+0x36>
   128a6:	bf00      	nop
   128a8:	e000ed00 	.word	0xe000ed00

000128ac <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   128ac:	4b0d      	ldr	r3, [pc, #52]	; (128e4 <bus_fault.isra.0+0x38>)
   128ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   128b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   128b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   128b4:	0592      	lsls	r2, r2, #22
   128b6:	d508      	bpl.n	128ca <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   128b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   128ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   128bc:	0412      	lsls	r2, r2, #16
   128be:	d504      	bpl.n	128ca <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   128c0:	b118      	cbz	r0, 128ca <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   128c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   128c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   128c8:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   128ca:	4b06      	ldr	r3, [pc, #24]	; (128e4 <bus_fault.isra.0+0x38>)
   128cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   128ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   128d0:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   128d2:	bf58      	it	pl
   128d4:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   128d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   128d8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   128da:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   128de:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   128e0:	7008      	strb	r0, [r1, #0]

	return reason;
}
   128e2:	4770      	bx	lr
   128e4:	e000ed00 	.word	0xe000ed00

000128e8 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   128e8:	4b07      	ldr	r3, [pc, #28]	; (12908 <usage_fault.isra.0+0x20>)
   128ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   128ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   128ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   128f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   128f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   128f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   128f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   128f8:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   128fc:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   12900:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   12902:	2000      	movs	r0, #0
   12904:	4770      	bx	lr
   12906:	bf00      	nop
   12908:	e000ed00 	.word	0xe000ed00

0001290c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   1290c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1290e:	4b37      	ldr	r3, [pc, #220]	; (129ec <z_arm_fault+0xe0>)
   12910:	685b      	ldr	r3, [r3, #4]
{
   12912:	b08a      	sub	sp, #40	; 0x28
   12914:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   12916:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1291a:	2500      	movs	r5, #0
   1291c:	f385 8811 	msr	BASEPRI, r5
   12920:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   12924:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
   12928:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
   1292c:	d111      	bne.n	12952 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   1292e:	f002 010c 	and.w	r1, r2, #12
   12932:	2908      	cmp	r1, #8
   12934:	d00d      	beq.n	12952 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   12936:	0711      	lsls	r1, r2, #28
   12938:	d401      	bmi.n	1293e <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   1293a:	4606      	mov	r6, r0
			*nested_exc = true;
   1293c:	2501      	movs	r5, #1
	*recoverable = false;
   1293e:	2200      	movs	r2, #0
   12940:	3b03      	subs	r3, #3
   12942:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   12946:	2b03      	cmp	r3, #3
   12948:	d848      	bhi.n	129dc <z_arm_fault+0xd0>
   1294a:	e8df f003 	tbb	[pc, r3]
   1294e:	3f04      	.short	0x3f04
   12950:	3c43      	.short	0x3c43
		return NULL;
   12952:	462e      	mov	r6, r5
   12954:	e7f3      	b.n	1293e <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   12956:	4b25      	ldr	r3, [pc, #148]	; (129ec <z_arm_fault+0xe0>)
   12958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1295a:	0792      	lsls	r2, r2, #30
   1295c:	d43e      	bmi.n	129dc <z_arm_fault+0xd0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1295e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   12960:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   12964:	d009      	beq.n	1297a <z_arm_fault+0x6e>
		if (SCB_MMFSR != 0) {
   12966:	3328      	adds	r3, #40	; 0x28
   12968:	781b      	ldrb	r3, [r3, #0]
   1296a:	b1f3      	cbz	r3, 129aa <z_arm_fault+0x9e>
			reason = mem_manage_fault(esf, 1, recoverable);
   1296c:	f10d 0207 	add.w	r2, sp, #7
   12970:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   12972:	4630      	mov	r0, r6
   12974:	f7ff ff64 	bl	12840 <mem_manage_fault>
		reason = usage_fault(esf);
   12978:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1297a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1297e:	b993      	cbnz	r3, 129a6 <z_arm_fault+0x9a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   12980:	2220      	movs	r2, #32
   12982:	4631      	mov	r1, r6
   12984:	a802      	add	r0, sp, #8
   12986:	f00b f964 	bl	1dc52 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1298a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1298c:	b345      	cbz	r5, 129e0 <z_arm_fault+0xd4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1298e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   12992:	b922      	cbnz	r2, 1299e <z_arm_fault+0x92>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   12994:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   12998:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1299c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1299e:	a902      	add	r1, sp, #8
   129a0:	4620      	mov	r0, r4
   129a2:	f00b f8e9 	bl	1db78 <z_arm_fatal_error>
}
   129a6:	b00a      	add	sp, #40	; 0x28
   129a8:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
   129aa:	4b11      	ldr	r3, [pc, #68]	; (129f0 <z_arm_fault+0xe4>)
   129ac:	781b      	ldrb	r3, [r3, #0]
   129ae:	b12b      	cbz	r3, 129bc <z_arm_fault+0xb0>
			reason = bus_fault(esf, 1, recoverable);
   129b0:	f10d 0107 	add.w	r1, sp, #7
   129b4:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   129b6:	f7ff ff79 	bl	128ac <bus_fault.isra.0>
   129ba:	e7dd      	b.n	12978 <z_arm_fault+0x6c>
		} else if (SCB_UFSR != 0) {
   129bc:	4b0d      	ldr	r3, [pc, #52]	; (129f4 <z_arm_fault+0xe8>)
   129be:	8818      	ldrh	r0, [r3, #0]
   129c0:	b284      	uxth	r4, r0
   129c2:	2c00      	cmp	r4, #0
   129c4:	d0d9      	beq.n	1297a <z_arm_fault+0x6e>
		reason = usage_fault(esf);
   129c6:	f7ff ff8f 	bl	128e8 <usage_fault.isra.0>
   129ca:	e7d5      	b.n	12978 <z_arm_fault+0x6c>
		reason = mem_manage_fault(esf, 0, recoverable);
   129cc:	f10d 0207 	add.w	r2, sp, #7
   129d0:	2100      	movs	r1, #0
   129d2:	e7ce      	b.n	12972 <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
   129d4:	f10d 0107 	add.w	r1, sp, #7
   129d8:	2000      	movs	r0, #0
   129da:	e7ec      	b.n	129b6 <z_arm_fault+0xaa>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   129dc:	2400      	movs	r4, #0
   129de:	e7cc      	b.n	1297a <z_arm_fault+0x6e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   129e0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   129e4:	f023 0301 	bic.w	r3, r3, #1
   129e8:	e7d8      	b.n	1299c <z_arm_fault+0x90>
   129ea:	bf00      	nop
   129ec:	e000ed00 	.word	0xe000ed00
   129f0:	e000ed29 	.word	0xe000ed29
   129f4:	e000ed2a 	.word	0xe000ed2a

000129f8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   129f8:	4a02      	ldr	r2, [pc, #8]	; (12a04 <z_arm_fault_init+0xc>)
   129fa:	6953      	ldr	r3, [r2, #20]
   129fc:	f043 0310 	orr.w	r3, r3, #16
   12a00:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   12a02:	4770      	bx	lr
   12a04:	e000ed00 	.word	0xe000ed00

00012a08 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   12a08:	4b04      	ldr	r3, [pc, #16]	; (12a1c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   12a0a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   12a0c:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   12a0e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   12a10:	d003      	beq.n	12a1a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   12a12:	4903      	ldr	r1, [pc, #12]	; (12a20 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   12a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   12a18:	600a      	str	r2, [r1, #0]

00012a1a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   12a1a:	4770      	bx	lr
	ldr r3, =_kernel
   12a1c:	20002590 	.word	0x20002590
	ldr r1, =_SCS_ICSR
   12a20:	e000ed04 	.word	0xe000ed04

00012a24 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   12a24:	4a06      	ldr	r2, [pc, #24]	; (12a40 <z_arm_clear_arm_mpu_config+0x1c>)
   12a26:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
   12a28:	2300      	movs	r3, #0
	int num_regions =
   12a2a:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   12a2e:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   12a30:	428b      	cmp	r3, r1
   12a32:	d100      	bne.n	12a36 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   12a34:	4770      	bx	lr
  MPU->RNR = rnr;
   12a36:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   12a38:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   12a3a:	3301      	adds	r3, #1
   12a3c:	e7f8      	b.n	12a30 <z_arm_clear_arm_mpu_config+0xc>
   12a3e:	bf00      	nop
   12a40:	e000ed90 	.word	0xe000ed90

00012a44 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   12a44:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   12a46:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   12a48:	2300      	movs	r3, #0
   12a4a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   12a4e:	f7ff ffe9 	bl	12a24 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   12a52:	4b14      	ldr	r3, [pc, #80]	; (12aa4 <z_arm_init_arch_hw_at_boot+0x60>)
   12a54:	f04f 32ff 	mov.w	r2, #4294967295
   12a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   12a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   12a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   12a64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   12a68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   12a6c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   12a70:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   12a74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   12a78:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   12a7c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   12a80:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   12a84:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   12a88:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   12a8c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   12a90:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   12a94:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   12a98:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   12a9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12a9e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   12aa2:	bd08      	pop	{r3, pc}
   12aa4:	e000e100 	.word	0xe000e100

00012aa8 <z_arm_interrupt_init>:
   12aa8:	4804      	ldr	r0, [pc, #16]	; (12abc <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   12aaa:	2300      	movs	r3, #0
   12aac:	2140      	movs	r1, #64	; 0x40
   12aae:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   12ab0:	3301      	adds	r3, #1
   12ab2:	2b30      	cmp	r3, #48	; 0x30
   12ab4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   12ab8:	d1f9      	bne.n	12aae <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   12aba:	4770      	bx	lr
   12abc:	e000e100 	.word	0xe000e100

00012ac0 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   12ac0:	4b06      	ldr	r3, [pc, #24]	; (12adc <z_impl_k_thread_abort+0x1c>)
   12ac2:	689b      	ldr	r3, [r3, #8]
   12ac4:	4283      	cmp	r3, r0
   12ac6:	d107      	bne.n	12ad8 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   12ac8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   12acc:	b123      	cbz	r3, 12ad8 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12ace:	4a04      	ldr	r2, [pc, #16]	; (12ae0 <z_impl_k_thread_abort+0x20>)
   12ad0:	6853      	ldr	r3, [r2, #4]
   12ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   12ad6:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   12ad8:	f006 be60 	b.w	1979c <z_thread_abort>
   12adc:	20002590 	.word	0x20002590
   12ae0:	e000ed00 	.word	0xe000ed00

00012ae4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   12ae4:	4b02      	ldr	r3, [pc, #8]	; (12af0 <z_arm_configure_static_mpu_regions+0xc>)
   12ae6:	4a03      	ldr	r2, [pc, #12]	; (12af4 <z_arm_configure_static_mpu_regions+0x10>)
   12ae8:	4803      	ldr	r0, [pc, #12]	; (12af8 <z_arm_configure_static_mpu_regions+0x14>)
   12aea:	2101      	movs	r1, #1
   12aec:	f000 b868 	b.w	12bc0 <arm_core_mpu_configure_static_mpu_regions>
   12af0:	20040000 	.word	0x20040000
   12af4:	20000000 	.word	0x20000000
   12af8:	000212fc 	.word	0x000212fc

00012afc <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   12afc:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   12afe:	4b05      	ldr	r3, [pc, #20]	; (12b14 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   12b00:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   12b02:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   12b04:	4a04      	ldr	r2, [pc, #16]	; (12b18 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   12b06:	2120      	movs	r1, #32
   12b08:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   12b0c:	4618      	mov	r0, r3
   12b0e:	2101      	movs	r1, #1
   12b10:	f000 b860 	b.w	12bd4 <arm_core_mpu_configure_dynamic_mpu_regions>
   12b14:	200022c4 	.word	0x200022c4
   12b18:	150b0000 	.word	0x150b0000

00012b1c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   12b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
   12b1e:	4f1e      	ldr	r7, [pc, #120]	; (12b98 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   12b20:	2600      	movs	r6, #0
   12b22:	428e      	cmp	r6, r1
   12b24:	db01      	blt.n	12b2a <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   12b26:	4610      	mov	r0, r2
   12b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   12b2a:	6844      	ldr	r4, [r0, #4]
   12b2c:	b384      	cbz	r4, 12b90 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
   12b2e:	b153      	cbz	r3, 12b46 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   12b30:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   12b34:	ea14 0f0c 	tst.w	r4, ip
   12b38:	d118      	bne.n	12b6c <mpu_configure_regions+0x50>
		&&
   12b3a:	2c1f      	cmp	r4, #31
   12b3c:	d916      	bls.n	12b6c <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
   12b3e:	6805      	ldr	r5, [r0, #0]
		&&
   12b40:	ea1c 0f05 	tst.w	ip, r5
   12b44:	d112      	bne.n	12b6c <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   12b46:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   12b48:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   12b4a:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   12b4e:	b2d2      	uxtb	r2, r2
   12b50:	d90f      	bls.n	12b72 <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   12b52:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   12b56:	d80e      	bhi.n	12b76 <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   12b58:	3c01      	subs	r4, #1
   12b5a:	fab4 f484 	clz	r4, r4
   12b5e:	f1c4 041f 	rsb	r4, r4, #31
   12b62:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   12b64:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   12b66:	ea4c 0404 	orr.w	r4, ip, r4
   12b6a:	d906      	bls.n	12b7a <mpu_configure_regions+0x5e>
			return -EINVAL;
   12b6c:	f06f 0215 	mvn.w	r2, #21
   12b70:	e7d9      	b.n	12b26 <mpu_configure_regions+0xa>
		return REGION_32B;
   12b72:	2408      	movs	r4, #8
   12b74:	e7f6      	b.n	12b64 <mpu_configure_regions+0x48>
		return REGION_4G;
   12b76:	243e      	movs	r4, #62	; 0x3e
   12b78:	e7f4      	b.n	12b64 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12b7a:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
   12b7e:	4315      	orrs	r5, r2
   12b80:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   12b84:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
   12b88:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12b8a:	60fd      	str	r5, [r7, #12]
		reg_index++;
   12b8c:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   12b8e:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
   12b90:	3601      	adds	r6, #1
   12b92:	300c      	adds	r0, #12
   12b94:	e7c5      	b.n	12b22 <mpu_configure_regions+0x6>
   12b96:	bf00      	nop
   12b98:	e000ed90 	.word	0xe000ed90

00012b9c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   12b9c:	4b03      	ldr	r3, [pc, #12]	; (12bac <arm_core_mpu_enable+0x10>)
   12b9e:	2205      	movs	r2, #5
   12ba0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   12ba2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12ba6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   12baa:	4770      	bx	lr
   12bac:	e000ed90 	.word	0xe000ed90

00012bb0 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   12bb0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   12bb4:	4b01      	ldr	r3, [pc, #4]	; (12bbc <arm_core_mpu_disable+0xc>)
   12bb6:	2200      	movs	r2, #0
   12bb8:	605a      	str	r2, [r3, #4]
}
   12bba:	4770      	bx	lr
   12bbc:	e000ed90 	.word	0xe000ed90

00012bc0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   12bc0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   12bc2:	4c03      	ldr	r4, [pc, #12]	; (12bd0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   12bc4:	2301      	movs	r3, #1
   12bc6:	7822      	ldrb	r2, [r4, #0]
   12bc8:	f7ff ffa8 	bl	12b1c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   12bcc:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   12bce:	bd10      	pop	{r4, pc}
   12bd0:	20002ef1 	.word	0x20002ef1

00012bd4 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   12bd4:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   12bd6:	4a08      	ldr	r2, [pc, #32]	; (12bf8 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
   12bd8:	2300      	movs	r3, #0
   12bda:	7812      	ldrb	r2, [r2, #0]
   12bdc:	f7ff ff9e 	bl	12b1c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   12be0:	f110 0f16 	cmn.w	r0, #22
   12be4:	d003      	beq.n	12bee <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
   12be6:	4b05      	ldr	r3, [pc, #20]	; (12bfc <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
   12be8:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   12bea:	2807      	cmp	r0, #7
   12bec:	dd00      	ble.n	12bf0 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   12bee:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   12bf0:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   12bf2:	611a      	str	r2, [r3, #16]
   12bf4:	3001      	adds	r0, #1
   12bf6:	e7f8      	b.n	12bea <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   12bf8:	20002ef1 	.word	0x20002ef1
   12bfc:	e000ed90 	.word	0xe000ed90

00012c00 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   12c00:	4913      	ldr	r1, [pc, #76]	; (12c50 <z_arm_mpu_init+0x50>)
   12c02:	6808      	ldr	r0, [r1, #0]
   12c04:	2808      	cmp	r0, #8
{
   12c06:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   12c08:	d81e      	bhi.n	12c48 <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   12c0a:	f7ff ffd1 	bl	12bb0 <arm_core_mpu_disable>
	MPU->RNR = index;
   12c0e:	4c11      	ldr	r4, [pc, #68]	; (12c54 <z_arm_mpu_init+0x54>)
   12c10:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12c12:	2200      	movs	r2, #0
   12c14:	4290      	cmp	r0, r2
   12c16:	f101 010c 	add.w	r1, r1, #12
   12c1a:	d105      	bne.n	12c28 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   12c1c:	4b0e      	ldr	r3, [pc, #56]	; (12c58 <z_arm_mpu_init+0x58>)
   12c1e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   12c20:	f7ff ffbc 	bl	12b9c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   12c24:	2000      	movs	r0, #0
}
   12c26:	bd10      	pop	{r4, pc}
   12c28:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12c2a:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   12c2e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   12c32:	4313      	orrs	r3, r2
   12c34:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12c38:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   12c3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
   12c3e:	f043 0301 	orr.w	r3, r3, #1
   12c42:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12c44:	3201      	adds	r2, #1
   12c46:	e7e5      	b.n	12c14 <z_arm_mpu_init+0x14>
		return -1;
   12c48:	f04f 30ff 	mov.w	r0, #4294967295
   12c4c:	e7eb      	b.n	12c26 <z_arm_mpu_init+0x26>
   12c4e:	bf00      	nop
   12c50:	00021308 	.word	0x00021308
   12c54:	e000ed90 	.word	0xe000ed90
   12c58:	20002ef1 	.word	0x20002ef1

00012c5c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   12c5c:	4b01      	ldr	r3, [pc, #4]	; (12c64 <__stdout_hook_install+0x8>)
   12c5e:	6018      	str	r0, [r3, #0]
}
   12c60:	4770      	bx	lr
   12c62:	bf00      	nop
   12c64:	20000514 	.word	0x20000514

00012c68 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   12c68:	f04f 0240 	mov.w	r2, #64	; 0x40
   12c6c:	f3ef 8311 	mrs	r3, BASEPRI
   12c70:	f382 8811 	msr	BASEPRI, r2
   12c74:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   12c78:	4a04      	ldr	r2, [pc, #16]	; (12c8c <nordicsemi_nrf52_init+0x24>)
   12c7a:	2101      	movs	r1, #1
   12c7c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   12c80:	f383 8811 	msr	BASEPRI, r3
   12c84:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   12c88:	2000      	movs	r0, #0
   12c8a:	4770      	bx	lr
   12c8c:	4001e000 	.word	0x4001e000

00012c90 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
   12c90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12c94:	b2c0      	uxtb	r0, r0
   12c96:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   12c9a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   12c9e:	4905      	ldr	r1, [pc, #20]	; (12cb4 <sys_arch_reboot+0x24>)
   12ca0:	4b05      	ldr	r3, [pc, #20]	; (12cb8 <sys_arch_reboot+0x28>)
   12ca2:	68ca      	ldr	r2, [r1, #12]
   12ca4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   12ca8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   12caa:	60cb      	str	r3, [r1, #12]
   12cac:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   12cb0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   12cb2:	e7fd      	b.n	12cb0 <sys_arch_reboot+0x20>
   12cb4:	e000ed00 	.word	0xe000ed00
   12cb8:	05fa0004 	.word	0x05fa0004

00012cbc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   12cbc:	b120      	cbz	r0, 12cc8 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   12cbe:	4b03      	ldr	r3, [pc, #12]	; (12ccc <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   12cc0:	0180      	lsls	r0, r0, #6
   12cc2:	f043 0301 	orr.w	r3, r3, #1
   12cc6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   12cc8:	4770      	bx	lr
   12cca:	bf00      	nop
   12ccc:	00020f40 	.word	0x00020f40

00012cd0 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   12cd0:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
   12cd2:	7802      	ldrb	r2, [r0, #0]
   12cd4:	2a01      	cmp	r2, #1
{
   12cd6:	4604      	mov	r4, r0
   12cd8:	460b      	mov	r3, r1
	switch (src->type) {
   12cda:	d016      	beq.n	12d0a <uuid_to_uuid128+0x3a>
   12cdc:	2a02      	cmp	r2, #2
   12cde:	d02c      	beq.n	12d3a <uuid_to_uuid128+0x6a>
   12ce0:	b98a      	cbnz	r2, 12d06 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   12ce2:	4a19      	ldr	r2, [pc, #100]	; (12d48 <uuid_to_uuid128+0x78>)
   12ce4:	460d      	mov	r5, r1
   12ce6:	f102 0710 	add.w	r7, r2, #16
   12cea:	6810      	ldr	r0, [r2, #0]
   12cec:	6851      	ldr	r1, [r2, #4]
   12cee:	462e      	mov	r6, r5
   12cf0:	c603      	stmia	r6!, {r0, r1}
   12cf2:	3208      	adds	r2, #8
   12cf4:	42ba      	cmp	r2, r7
   12cf6:	4635      	mov	r5, r6
   12cf8:	d1f7      	bne.n	12cea <uuid_to_uuid128+0x1a>
   12cfa:	7812      	ldrb	r2, [r2, #0]
   12cfc:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   12cfe:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   12d00:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   12d02:	0a12      	lsrs	r2, r2, #8
   12d04:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   12d06:	bcf0      	pop	{r4, r5, r6, r7}
   12d08:	4770      	bx	lr
		*dst = uuid128_base;
   12d0a:	4a0f      	ldr	r2, [pc, #60]	; (12d48 <uuid_to_uuid128+0x78>)
   12d0c:	460d      	mov	r5, r1
   12d0e:	f102 0710 	add.w	r7, r2, #16
   12d12:	6810      	ldr	r0, [r2, #0]
   12d14:	6851      	ldr	r1, [r2, #4]
   12d16:	462e      	mov	r6, r5
   12d18:	c603      	stmia	r6!, {r0, r1}
   12d1a:	3208      	adds	r2, #8
   12d1c:	42ba      	cmp	r2, r7
   12d1e:	4635      	mov	r5, r6
   12d20:	d1f7      	bne.n	12d12 <uuid_to_uuid128+0x42>
   12d22:	7812      	ldrb	r2, [r2, #0]
   12d24:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   12d26:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
   12d28:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   12d2a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   12d2e:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   12d30:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   12d32:	0a12      	lsrs	r2, r2, #8
   12d34:	7399      	strb	r1, [r3, #14]
   12d36:	741a      	strb	r2, [r3, #16]
}
   12d38:	e7e5      	b.n	12d06 <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
   12d3a:	4601      	mov	r1, r0
}
   12d3c:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
   12d3e:	2211      	movs	r2, #17
   12d40:	4618      	mov	r0, r3
   12d42:	f00a bf86 	b.w	1dc52 <memcpy>
   12d46:	bf00      	nop
   12d48:	00021c54 	.word	0x00021c54

00012d4c <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   12d4c:	b538      	push	{r3, r4, r5, lr}
   12d4e:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf *net_buf_alloc(struct net_buf_pool *pool,
					    k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   12d50:	4805      	ldr	r0, [pc, #20]	; (12d68 <bt_buf_get_rx+0x1c>)
   12d52:	f00c fe86 	bl	1fa62 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   12d56:	4604      	mov	r4, r0
   12d58:	b120      	cbz	r0, 12d64 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   12d5a:	2100      	movs	r1, #0
   12d5c:	3008      	adds	r0, #8
   12d5e:	f00c fe9f 	bl	1faa0 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   12d62:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   12d64:	4620      	mov	r0, r4
   12d66:	bd38      	pop	{r3, r4, r5, pc}
   12d68:	20000938 	.word	0x20000938

00012d6c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   12d6c:	b570      	push	{r4, r5, r6, lr}
   12d6e:	4602      	mov	r2, r0
   12d70:	460b      	mov	r3, r1
	__asm__ volatile(
   12d72:	f04f 0140 	mov.w	r1, #64	; 0x40
   12d76:	f3ef 8511 	mrs	r5, BASEPRI
   12d7a:	f381 8811 	msr	BASEPRI, r1
   12d7e:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
   12d82:	480c      	ldr	r0, [pc, #48]	; (12db4 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
   12d84:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
   12d86:	f8d0 4130 	ldr.w	r4, [r0, #304]	; 0x130
	bt_dev.sent_cmd = NULL;
   12d8a:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
	__asm__ volatile(
   12d8e:	f385 8811 	msr	BASEPRI, r5
   12d92:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
   12d96:	b924      	cbnz	r4, 12da2 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   12d98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   12d9c:	2001      	movs	r0, #1
   12d9e:	f7ff bfd5 	b.w	12d4c <bt_buf_get_rx>
   12da2:	2301      	movs	r3, #1
   12da4:	f104 0008 	add.w	r0, r4, #8
   12da8:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
   12daa:	81a1      	strh	r1, [r4, #12]
   12dac:	f00c fe78 	bl	1faa0 <net_buf_simple_reserve>
}
   12db0:	4620      	mov	r0, r4
   12db2:	bd70      	pop	{r4, r5, r6, pc}
   12db4:	200002b8 	.word	0x200002b8

00012db8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   12db8:	b570      	push	{r4, r5, r6, lr}
   12dba:	4604      	mov	r4, r0
	switch (evt) {
   12dbc:	2c0f      	cmp	r4, #15
{
   12dbe:	460d      	mov	r5, r1
   12dc0:	4610      	mov	r0, r2
   12dc2:	4619      	mov	r1, r3
	switch (evt) {
   12dc4:	d805      	bhi.n	12dd2 <bt_buf_get_evt+0x1a>
   12dc6:	2c0d      	cmp	r4, #13
   12dc8:	d912      	bls.n	12df0 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   12dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   12dce:	f7ff bfcd 	b.w	12d6c <bt_buf_get_cmd_complete>
	switch (evt) {
   12dd2:	2c13      	cmp	r4, #19
   12dd4:	d10c      	bne.n	12df0 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   12dd6:	480b      	ldr	r0, [pc, #44]	; (12e04 <bt_buf_get_evt+0x4c>)
   12dd8:	f00c fe43 	bl	1fa62 <net_buf_alloc_fixed>
			if (buf) {
   12ddc:	4604      	mov	r4, r0
   12dde:	b128      	cbz	r0, 12dec <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   12de0:	2100      	movs	r1, #0
   12de2:	3008      	adds	r0, #8
   12de4:	f00c fe5c 	bl	1faa0 <net_buf_simple_reserve>
   12de8:	2301      	movs	r3, #1
   12dea:	7523      	strb	r3, [r4, #20]
}
   12dec:	4620      	mov	r0, r4
   12dee:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   12df0:	4602      	mov	r2, r0
   12df2:	460b      	mov	r3, r1
		if (discardable) {
   12df4:	b10d      	cbz	r5, 12dfa <bt_buf_get_evt+0x42>
   12df6:	4804      	ldr	r0, [pc, #16]	; (12e08 <bt_buf_get_evt+0x50>)
   12df8:	e7ee      	b.n	12dd8 <bt_buf_get_evt+0x20>
}
   12dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   12dfe:	2001      	movs	r0, #1
   12e00:	f7ff bfa4 	b.w	12d4c <bt_buf_get_rx>
   12e04:	20000960 	.word	0x20000960
   12e08:	200008c0 	.word	0x200008c0

00012e0c <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   12e0c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   12e0e:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
   12e10:	781a      	ldrb	r2, [r3, #0]
   12e12:	b972      	cbnz	r2, 12e32 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12e14:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   12e18:	4620      	mov	r0, r4
   12e1a:	f001 fc95 	bl	14748 <bt_conn_lookup_handle>
	if (!conn) {
   12e1e:	4605      	mov	r5, r0
   12e20:	b940      	cbnz	r0, 12e34 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   12e22:	4b08      	ldr	r3, [pc, #32]	; (12e44 <hci_disconn_complete_prio+0x38>)
   12e24:	881a      	ldrh	r2, [r3, #0]
   12e26:	b922      	cbnz	r2, 12e32 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   12e28:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   12e2c:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   12e30:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   12e32:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   12e34:	2101      	movs	r1, #1
   12e36:	f001 fc93 	bl	14760 <bt_conn_set_state>
	bt_conn_unref(conn);
   12e3a:	4628      	mov	r0, r5
}
   12e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   12e40:	f00b bc2c 	b.w	1e69c <bt_conn_unref>
   12e44:	20002ed8 	.word	0x20002ed8

00012e48 <hci_le_meta_event>:
		      sizeof(struct bt_hci_evt_le_connectionless_iq_report)),
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
};

static void hci_le_meta_event(struct net_buf *buf)
{
   12e48:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   12e4a:	2101      	movs	r1, #1
   12e4c:	4604      	mov	r4, r0
   12e4e:	3008      	adds	r0, #8
   12e50:	f00c fe84 	bl	1fb5c <net_buf_simple_pull_mem>

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   12e54:	4621      	mov	r1, r4
   12e56:	4a03      	ldr	r2, [pc, #12]	; (12e64 <hci_le_meta_event+0x1c>)
   12e58:	7800      	ldrb	r0, [r0, #0]
}
   12e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   12e5e:	2307      	movs	r3, #7
   12e60:	f00a bf9e 	b.w	1dda0 <handle_event>
   12e64:	00021358 	.word	0x00021358

00012e68 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   12e68:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   12e6a:	4c0c      	ldr	r4, [pc, #48]	; (12e9c <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   12e6c:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   12e6e:	2205      	movs	r2, #5
   12e70:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   12e74:	f001 fdc2 	bl	149fc <bt_conn_lookup_state_le>
		if (!conn) {
   12e78:	b970      	cbnz	r0, 12e98 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   12e7a:	4b09      	ldr	r3, [pc, #36]	; (12ea0 <find_pending_connect.part.0+0x38>)
   12e7c:	6818      	ldr	r0, [r3, #0]
   12e7e:	889a      	ldrh	r2, [r3, #4]
   12e80:	9000      	str	r0, [sp, #0]
   12e82:	799b      	ldrb	r3, [r3, #6]
   12e84:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   12e88:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   12e8c:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   12e90:	2204      	movs	r2, #4
   12e92:	4669      	mov	r1, sp
   12e94:	f001 fdb2 	bl	149fc <bt_conn_lookup_state_le>
}
   12e98:	b002      	add	sp, #8
   12e9a:	bd10      	pop	{r4, pc}
   12e9c:	200002b8 	.word	0x200002b8
   12ea0:	00020f20 	.word	0x00020f20

00012ea4 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   12ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   12ea8:	4f3b      	ldr	r7, [pc, #236]	; (12f98 <hci_rx_thread+0xf4>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   12eaa:	f8df 8100 	ldr.w	r8, [pc, #256]	; 12fac <hci_rx_thread+0x108>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   12eae:	4e3b      	ldr	r6, [pc, #236]	; (12f9c <hci_rx_thread+0xf8>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   12eb0:	f04f 33ff 	mov.w	r3, #4294967295
   12eb4:	f04f 32ff 	mov.w	r2, #4294967295
   12eb8:	4638      	mov	r0, r7
   12eba:	f00c fdd7 	bl	1fa6c <net_buf_get>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   12ebe:	7d03      	ldrb	r3, [r0, #20]

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
   12ec0:	2b01      	cmp	r3, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   12ec2:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   12ec4:	d039      	beq.n	12f3a <hci_rx_thread+0x96>
   12ec6:	2b03      	cmp	r3, #3
   12ec8:	d120      	bne.n	12f0c <hci_rx_thread+0x68>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   12eca:	8983      	ldrh	r3, [r0, #12]
   12ecc:	2b03      	cmp	r3, #3
   12ece:	d80c      	bhi.n	12eea <hci_rx_thread+0x46>
   12ed0:	4933      	ldr	r1, [pc, #204]	; (12fa0 <hci_rx_thread+0xfc>)
   12ed2:	4834      	ldr	r0, [pc, #208]	; (12fa4 <hci_rx_thread+0x100>)
   12ed4:	f240 1377 	movw	r3, #375	; 0x177
   12ed8:	4632      	mov	r2, r6
   12eda:	f009 ff8c 	bl	1cdf6 <printk>
   12ede:	4040      	eors	r0, r0
   12ee0:	f380 8811 	msr	BASEPRI, r0
   12ee4:	f04f 0003 	mov.w	r0, #3
   12ee8:	df02      	svc	2
   12eea:	2104      	movs	r1, #4
   12eec:	f104 0008 	add.w	r0, r4, #8
   12ef0:	f00c fe34 	bl	1fb5c <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   12ef4:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   12ef6:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   12ef8:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   12efc:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   12efe:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   12f00:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
   12f04:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   12f06:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   12f08:	d003      	beq.n	12f12 <hci_rx_thread+0x6e>
	net_buf_unref(buf);
   12f0a:	4620      	mov	r0, r4
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
   12f0c:	f003 fa78 	bl	16400 <net_buf_unref>
			break;
   12f10:	e010      	b.n	12f34 <hci_rx_thread+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   12f12:	f001 fc19 	bl	14748 <bt_conn_lookup_handle>
	if (!conn) {
   12f16:	4605      	mov	r5, r0
   12f18:	2800      	cmp	r0, #0
   12f1a:	d0f6      	beq.n	12f0a <hci_rx_thread+0x66>
	acl(buf)->index = bt_conn_index(conn);
   12f1c:	f001 fcca 	bl	148b4 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   12f20:	ea4f 3219 	mov.w	r2, r9, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   12f24:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   12f26:	4621      	mov	r1, r4
   12f28:	4628      	mov	r0, r5
   12f2a:	f00b fb55 	bl	1e5d8 <bt_conn_recv>
	bt_conn_unref(conn);
   12f2e:	4628      	mov	r0, r5
   12f30:	f00b fbb4 	bl	1e69c <bt_conn_unref>
	z_impl_k_yield();
   12f34:	f006 fb74 	bl	19620 <z_impl_k_yield>
	while (1) {
   12f38:	e7ba      	b.n	12eb0 <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   12f3a:	8983      	ldrh	r3, [r0, #12]
   12f3c:	2b01      	cmp	r3, #1
   12f3e:	d80c      	bhi.n	12f5a <hci_rx_thread+0xb6>
   12f40:	4917      	ldr	r1, [pc, #92]	; (12fa0 <hci_rx_thread+0xfc>)
   12f42:	4818      	ldr	r0, [pc, #96]	; (12fa4 <hci_rx_thread+0x100>)
   12f44:	f640 1309 	movw	r3, #2313	; 0x909
   12f48:	4632      	mov	r2, r6
   12f4a:	f009 ff54 	bl	1cdf6 <printk>
   12f4e:	4040      	eors	r0, r0
   12f50:	f380 8811 	msr	BASEPRI, r0
   12f54:	f04f 0003 	mov.w	r0, #3
   12f58:	df02      	svc	2
   12f5a:	2102      	movs	r1, #2
   12f5c:	f104 0008 	add.w	r0, r4, #8
   12f60:	f00c fdfc 	bl	1fb5c <net_buf_simple_pull_mem>
   12f64:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   12f66:	7800      	ldrb	r0, [r0, #0]
   12f68:	f00a ff08 	bl	1dd7c <bt_hci_evt_get_flags>
   12f6c:	0783      	lsls	r3, r0, #30
   12f6e:	d40c      	bmi.n	12f8a <hci_rx_thread+0xe6>
   12f70:	490d      	ldr	r1, [pc, #52]	; (12fa8 <hci_rx_thread+0x104>)
   12f72:	480c      	ldr	r0, [pc, #48]	; (12fa4 <hci_rx_thread+0x100>)
   12f74:	f640 130d 	movw	r3, #2317	; 0x90d
   12f78:	4632      	mov	r2, r6
   12f7a:	f009 ff3c 	bl	1cdf6 <printk>
   12f7e:	4040      	eors	r0, r0
   12f80:	f380 8811 	msr	BASEPRI, r0
   12f84:	f04f 0003 	mov.w	r0, #3
   12f88:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   12f8a:	7828      	ldrb	r0, [r5, #0]
   12f8c:	2304      	movs	r3, #4
   12f8e:	4642      	mov	r2, r8
   12f90:	4621      	mov	r1, r4
   12f92:	f00a ff05 	bl	1dda0 <handle_event>
   12f96:	e7b8      	b.n	12f0a <hci_rx_thread+0x66>
   12f98:	200003ec 	.word	0x200003ec
   12f9c:	00021c65 	.word	0x00021c65
   12fa0:	00021c99 	.word	0x00021c99
   12fa4:	00021cb2 	.word	0x00021cb2
   12fa8:	00021ccf 	.word	0x00021ccf
   12fac:	000213a0 	.word	0x000213a0

00012fb0 <hci_cmd_done.isra.0>:
static void hci_cmd_done(uint16_t opcode, uint8_t status, struct net_buf *buf)
   12fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12fb2:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   12fb4:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(uint16_t opcode, uint8_t status, struct net_buf *buf)
   12fb6:	460c      	mov	r4, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   12fb8:	f003 f966 	bl	16288 <net_buf_pool_get>
   12fbc:	4b28      	ldr	r3, [pc, #160]	; (13060 <hci_cmd_done.isra.0+0xb0>)
   12fbe:	4283      	cmp	r3, r0
   12fc0:	d14c      	bne.n	1305c <hci_cmd_done.isra.0+0xac>
	if (cmd(buf)->opcode != opcode) {
   12fc2:	4620      	mov	r0, r4
   12fc4:	f003 f968 	bl	16298 <net_buf_id>
	if (cmd(buf)->state && !status) {
   12fc8:	4620      	mov	r0, r4
   12fca:	f003 f965 	bl	16298 <net_buf_id>
   12fce:	4d25      	ldr	r5, [pc, #148]	; (13064 <hci_cmd_done.isra.0+0xb4>)
   12fd0:	270c      	movs	r7, #12
   12fd2:	fb07 5300 	mla	r3, r7, r0, r5
   12fd6:	685b      	ldr	r3, [r3, #4]
   12fd8:	b1e3      	cbz	r3, 13014 <hci_cmd_done.isra.0+0x64>
   12fda:	b9de      	cbnz	r6, 13014 <hci_cmd_done.isra.0+0x64>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   12fdc:	4620      	mov	r0, r4
   12fde:	f003 f95b 	bl	16298 <net_buf_id>
   12fe2:	fb07 5000 	mla	r0, r7, r0, r5
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   12fe6:	2201      	movs	r2, #1
   12fe8:	6840      	ldr	r0, [r0, #4]
   12fea:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
   12fee:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   12ff0:	f001 071f 	and.w	r7, r1, #31
   12ff4:	40ba      	lsls	r2, r7
	if (val) {
   12ff6:	0949      	lsrs	r1, r1, #5
   12ff8:	b318      	cbz	r0, 13042 <hci_cmd_done.isra.0+0x92>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12ffa:	f3bf 8f5b 	dmb	ish
   12ffe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13002:	e853 1f00 	ldrex	r1, [r3]
   13006:	4311      	orrs	r1, r2
   13008:	e843 1000 	strex	r0, r1, [r3]
   1300c:	2800      	cmp	r0, #0
   1300e:	d1f8      	bne.n	13002 <hci_cmd_done.isra.0+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13010:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
   13014:	4620      	mov	r0, r4
   13016:	f003 f93f 	bl	16298 <net_buf_id>
   1301a:	270c      	movs	r7, #12
   1301c:	fb07 5000 	mla	r0, r7, r0, r5
   13020:	6883      	ldr	r3, [r0, #8]
   13022:	b1db      	cbz	r3, 1305c <hci_cmd_done.isra.0+0xac>
		cmd(buf)->status = status;
   13024:	4620      	mov	r0, r4
   13026:	f003 f937 	bl	16298 <net_buf_id>
   1302a:	4378      	muls	r0, r7
   1302c:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   1302e:	4620      	mov	r0, r4
   13030:	f003 f932 	bl	16298 <net_buf_id>
   13034:	fb07 5500 	mla	r5, r7, r0, r5
   13038:	68a8      	ldr	r0, [r5, #8]
}
   1303a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1303e:	f005 be79 	b.w	18d34 <z_impl_k_sem_give>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13042:	43d2      	mvns	r2, r2
   13044:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13048:	f3bf 8f5b 	dmb	ish
   1304c:	e853 1f00 	ldrex	r1, [r3]
   13050:	4011      	ands	r1, r2
   13052:	e843 1000 	strex	r0, r1, [r3]
   13056:	2800      	cmp	r0, #0
   13058:	d0da      	beq.n	13010 <hci_cmd_done.isra.0+0x60>
   1305a:	e7f7      	b.n	1304c <hci_cmd_done.isra.0+0x9c>
   1305c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1305e:	bf00      	nop
   13060:	20000910 	.word	0x20000910
   13064:	200022d0 	.word	0x200022d0

00013068 <hci_cmd_complete>:
{
   13068:	b538      	push	{r3, r4, r5, lr}
   1306a:	2103      	movs	r1, #3
   1306c:	4604      	mov	r4, r0
   1306e:	3008      	adds	r0, #8
   13070:	f00c fd74 	bl	1fb5c <net_buf_simple_pull_mem>
	status = buf->data[0];
   13074:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   13076:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   13078:	7818      	ldrb	r0, [r3, #0]
   1307a:	4621      	mov	r1, r4
   1307c:	f7ff ff98 	bl	12fb0 <hci_cmd_done.isra.0>
	if (ncmd) {
   13080:	b125      	cbz	r5, 1308c <hci_cmd_complete+0x24>
   13082:	4803      	ldr	r0, [pc, #12]	; (13090 <hci_cmd_complete+0x28>)
}
   13084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13088:	f005 be54 	b.w	18d34 <z_impl_k_sem_give>
   1308c:	bd38      	pop	{r3, r4, r5, pc}
   1308e:	bf00      	nop
   13090:	200003d0 	.word	0x200003d0

00013094 <hci_cmd_status>:
{
   13094:	b538      	push	{r3, r4, r5, lr}
   13096:	2104      	movs	r1, #4
   13098:	4604      	mov	r4, r0
   1309a:	3008      	adds	r0, #8
   1309c:	f00c fd5e 	bl	1fb5c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   130a0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   130a2:	7800      	ldrb	r0, [r0, #0]
   130a4:	4621      	mov	r1, r4
   130a6:	f7ff ff83 	bl	12fb0 <hci_cmd_done.isra.0>
	if (ncmd) {
   130aa:	b125      	cbz	r5, 130b6 <hci_cmd_status+0x22>
   130ac:	4802      	ldr	r0, [pc, #8]	; (130b8 <hci_cmd_status+0x24>)
}
   130ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   130b2:	f005 be3f 	b.w	18d34 <z_impl_k_sem_give>
   130b6:	bd38      	pop	{r3, r4, r5, pc}
   130b8:	200003d0 	.word	0x200003d0

000130bc <bt_hci_cmd_state_set_init>:
{
   130bc:	b510      	push	{r4, lr}
	state->bit = bit;
   130be:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   130c2:	f89d 3008 	ldrb.w	r3, [sp, #8]
   130c6:	720b      	strb	r3, [r1, #8]
{
   130c8:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   130ca:	f003 f8e5 	bl	16298 <net_buf_id>
   130ce:	4b03      	ldr	r3, [pc, #12]	; (130dc <bt_hci_cmd_state_set_init+0x20>)
   130d0:	220c      	movs	r2, #12
   130d2:	fb02 3000 	mla	r0, r2, r0, r3
   130d6:	6044      	str	r4, [r0, #4]
}
   130d8:	bd10      	pop	{r4, pc}
   130da:	bf00      	nop
   130dc:	200022d0 	.word	0x200022d0

000130e0 <bt_hci_cmd_create>:
{
   130e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   130e4:	f04f 32ff 	mov.w	r2, #4294967295
   130e8:	f04f 33ff 	mov.w	r3, #4294967295
   130ec:	4605      	mov	r5, r0
   130ee:	4816      	ldr	r0, [pc, #88]	; (13148 <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
   130f0:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1314c <bt_hci_cmd_create+0x6c>
{
   130f4:	460e      	mov	r6, r1
   130f6:	f00c fcb4 	bl	1fa62 <net_buf_alloc_fixed>
   130fa:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   130fc:	f100 0b08 	add.w	fp, r0, #8
   13100:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13102:	2700      	movs	r7, #0
   13104:	4658      	mov	r0, fp
   13106:	f00c fccb 	bl	1faa0 <net_buf_simple_reserve>
   1310a:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   1310c:	4620      	mov	r0, r4
   1310e:	f003 f8c3 	bl	16298 <net_buf_id>
   13112:	f04f 0a0c 	mov.w	sl, #12
   13116:	fb0a 8000 	mla	r0, sl, r0, r8
   1311a:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   1311c:	4620      	mov	r0, r4
   1311e:	f003 f8bb 	bl	16298 <net_buf_id>
   13122:	fb0a 8000 	mla	r0, sl, r0, r8
   13126:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   13128:	4620      	mov	r0, r4
   1312a:	f003 f8b5 	bl	16298 <net_buf_id>
   1312e:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   13132:	2103      	movs	r1, #3
   13134:	6047      	str	r7, [r0, #4]
   13136:	4658      	mov	r0, fp
   13138:	f00c fce9 	bl	1fb0e <net_buf_simple_add>
	hdr->param_len = param_len;
   1313c:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   1313e:	8005      	strh	r5, [r0, #0]
}
   13140:	4620      	mov	r0, r4
   13142:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13146:	bf00      	nop
   13148:	20000910 	.word	0x20000910
   1314c:	200022d0 	.word	0x200022d0

00013150 <bt_hci_cmd_send_sync>:
{
   13150:	b5f0      	push	{r4, r5, r6, r7, lr}
   13152:	4615      	mov	r5, r2
   13154:	b087      	sub	sp, #28
	if (!buf) {
   13156:	460c      	mov	r4, r1
   13158:	b921      	cbnz	r1, 13164 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   1315a:	f7ff ffc1 	bl	130e0 <bt_hci_cmd_create>
		if (!buf) {
   1315e:	4604      	mov	r4, r0
   13160:	2800      	cmp	r0, #0
   13162:	d048      	beq.n	131f6 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   13164:	2201      	movs	r2, #1
   13166:	2100      	movs	r1, #0
   13168:	4668      	mov	r0, sp
   1316a:	f00d f901 	bl	20370 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   1316e:	4620      	mov	r0, r4
   13170:	f003 f892 	bl	16298 <net_buf_id>
   13174:	4e21      	ldr	r6, [pc, #132]	; (131fc <bt_hci_cmd_send_sync+0xac>)
   13176:	230c      	movs	r3, #12
   13178:	fb03 6000 	mla	r0, r3, r0, r6
   1317c:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   13180:	4620      	mov	r0, r4
   13182:	f00c fc9e 	bl	1fac2 <net_buf_ref>
   13186:	4601      	mov	r1, r0
   13188:	481d      	ldr	r0, [pc, #116]	; (13200 <bt_hci_cmd_send_sync+0xb0>)
   1318a:	f00c fc8d 	bl	1faa8 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   1318e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   13192:	2300      	movs	r3, #0
   13194:	4668      	mov	r0, sp
   13196:	f005 fdf3 	bl	18d80 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   1319a:	4607      	mov	r7, r0
   1319c:	b180      	cbz	r0, 131c0 <bt_hci_cmd_send_sync+0x70>
   1319e:	4a19      	ldr	r2, [pc, #100]	; (13204 <bt_hci_cmd_send_sync+0xb4>)
   131a0:	4919      	ldr	r1, [pc, #100]	; (13208 <bt_hci_cmd_send_sync+0xb8>)
   131a2:	481a      	ldr	r0, [pc, #104]	; (1320c <bt_hci_cmd_send_sync+0xbc>)
   131a4:	f240 1331 	movw	r3, #305	; 0x131
   131a8:	f009 fe25 	bl	1cdf6 <printk>
   131ac:	4818      	ldr	r0, [pc, #96]	; (13210 <bt_hci_cmd_send_sync+0xc0>)
   131ae:	4639      	mov	r1, r7
   131b0:	f009 fe21 	bl	1cdf6 <printk>
   131b4:	4040      	eors	r0, r0
   131b6:	f380 8811 	msr	BASEPRI, r0
   131ba:	f04f 0003 	mov.w	r0, #3
   131be:	df02      	svc	2
	status = cmd(buf)->status;
   131c0:	4620      	mov	r0, r4
   131c2:	f003 f869 	bl	16298 <net_buf_id>
   131c6:	230c      	movs	r3, #12
   131c8:	4343      	muls	r3, r0
   131ca:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   131cc:	b156      	cbz	r6, 131e4 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   131ce:	4620      	mov	r0, r4
   131d0:	f003 f916 	bl	16400 <net_buf_unref>
			return -EIO;
   131d4:	2e09      	cmp	r6, #9
   131d6:	bf0c      	ite	eq
   131d8:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   131dc:	f06f 0004 	mvnne.w	r0, #4
}
   131e0:	b007      	add	sp, #28
   131e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   131e4:	b115      	cbz	r5, 131ec <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   131e6:	602c      	str	r4, [r5, #0]
	return 0;
   131e8:	4630      	mov	r0, r6
   131ea:	e7f9      	b.n	131e0 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   131ec:	4620      	mov	r0, r4
   131ee:	f003 f907 	bl	16400 <net_buf_unref>
	return 0;
   131f2:	4628      	mov	r0, r5
   131f4:	e7f4      	b.n	131e0 <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
   131f6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   131fa:	e7f1      	b.n	131e0 <bt_hci_cmd_send_sync+0x90>
   131fc:	200022d0 	.word	0x200022d0
   13200:	20000404 	.word	0x20000404
   13204:	00021c65 	.word	0x00021c65
   13208:	00021cfd 	.word	0x00021cfd
   1320c:	00021cb2 	.word	0x00021cb2
   13210:	00021d06 	.word	0x00021d06

00013214 <hci_init>:
{
   13214:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   13216:	4d3e      	ldr	r5, [pc, #248]	; (13310 <hci_init+0xfc>)
   13218:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   1321c:	6899      	ldr	r1, [r3, #8]
   1321e:	f011 0101 	ands.w	r1, r1, #1
   13222:	d121      	bne.n	13268 <hci_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   13224:	aa01      	add	r2, sp, #4
   13226:	f640 4003 	movw	r0, #3075	; 0xc03
   1322a:	f7ff ff91 	bl	13150 <bt_hci_cmd_send_sync>
		if (err) {
   1322e:	4604      	mov	r4, r0
   13230:	2800      	cmp	r0, #0
   13232:	d169      	bne.n	13308 <hci_init+0xf4>
		hci_reset_complete(rsp);
   13234:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
   13236:	689b      	ldr	r3, [r3, #8]
	if (status) {
   13238:	781b      	ldrb	r3, [r3, #0]
   1323a:	b993      	cbnz	r3, 13262 <hci_init+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1323c:	f3bf 8f5b 	dmb	ish
   13240:	462b      	mov	r3, r5
   13242:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   13246:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   1324a:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1324e:	f3bf 8f5b 	dmb	ish
   13252:	e853 1f00 	ldrex	r1, [r3]
   13256:	e843 2000 	strex	r0, r2, [r3]
   1325a:	2800      	cmp	r0, #0
   1325c:	d1f9      	bne.n	13252 <hci_init+0x3e>
   1325e:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   13262:	9801      	ldr	r0, [sp, #4]
   13264:	f003 f8cc 	bl	16400 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   13268:	aa01      	add	r2, sp, #4
   1326a:	2100      	movs	r1, #0
   1326c:	f241 0003 	movw	r0, #4099	; 0x1003
   13270:	f7ff ff6e 	bl	13150 <bt_hci_cmd_send_sync>
	if (err) {
   13274:	4604      	mov	r4, r0
   13276:	2800      	cmp	r0, #0
   13278:	d146      	bne.n	13308 <hci_init+0xf4>
	read_local_features_complete(rsp);
   1327a:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   1327c:	4825      	ldr	r0, [pc, #148]	; (13314 <hci_init+0x100>)
   1327e:	6899      	ldr	r1, [r3, #8]
   13280:	2208      	movs	r2, #8
   13282:	3101      	adds	r1, #1
   13284:	f00a fce5 	bl	1dc52 <memcpy>
	net_buf_unref(rsp);
   13288:	9801      	ldr	r0, [sp, #4]
   1328a:	f003 f8b9 	bl	16400 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   1328e:	4621      	mov	r1, r4
   13290:	aa01      	add	r2, sp, #4
   13292:	f241 0001 	movw	r0, #4097	; 0x1001
   13296:	f7ff ff5b 	bl	13150 <bt_hci_cmd_send_sync>
	if (err) {
   1329a:	4604      	mov	r4, r0
   1329c:	2800      	cmp	r0, #0
   1329e:	d133      	bne.n	13308 <hci_init+0xf4>
	read_local_ver_complete(rsp);
   132a0:	9801      	ldr	r0, [sp, #4]
   132a2:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   132a4:	785a      	ldrb	r2, [r3, #1]
   132a6:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   132aa:	78d9      	ldrb	r1, [r3, #3]
   132ac:	789a      	ldrb	r2, [r3, #2]
   132ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   132b2:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   132b6:	791a      	ldrb	r2, [r3, #4]
   132b8:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   132bc:	7a19      	ldrb	r1, [r3, #8]
   132be:	79da      	ldrb	r2, [r3, #7]
   132c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   132c4:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   132c8:	795a      	ldrb	r2, [r3, #5]
   132ca:	799b      	ldrb	r3, [r3, #6]
   132cc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   132d0:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   132d4:	f003 f894 	bl	16400 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   132d8:	4621      	mov	r1, r4
   132da:	aa01      	add	r2, sp, #4
   132dc:	f241 0002 	movw	r0, #4098	; 0x1002
   132e0:	f7ff ff36 	bl	13150 <bt_hci_cmd_send_sync>
	if (err) {
   132e4:	4604      	mov	r4, r0
   132e6:	b978      	cbnz	r0, 13308 <hci_init+0xf4>
	read_supported_commands_complete(rsp);
   132e8:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   132ea:	480b      	ldr	r0, [pc, #44]	; (13318 <hci_init+0x104>)
   132ec:	6899      	ldr	r1, [r3, #8]
   132ee:	2240      	movs	r2, #64	; 0x40
   132f0:	3101      	adds	r1, #1
   132f2:	f00a fcae 	bl	1dc52 <memcpy>
	net_buf_unref(rsp);
   132f6:	9801      	ldr	r0, [sp, #4]
   132f8:	f003 f882 	bl	16400 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   132fc:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   13300:	065e      	lsls	r6, r3, #25
   13302:	d40b      	bmi.n	1331c <hci_init+0x108>
		return -ENODEV;
   13304:	f06f 0412 	mvn.w	r4, #18
}
   13308:	4620      	mov	r0, r4
   1330a:	b002      	add	sp, #8
   1330c:	bd70      	pop	{r4, r5, r6, pc}
   1330e:	bf00      	nop
   13310:	200002b8 	.word	0x200002b8
   13314:	20000328 	.word	0x20000328
   13318:	20000330 	.word	0x20000330
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   1331c:	4621      	mov	r1, r4
   1331e:	aa01      	add	r2, sp, #4
   13320:	f242 0003 	movw	r0, #8195	; 0x2003
   13324:	f7ff ff14 	bl	13150 <bt_hci_cmd_send_sync>
	if (err) {
   13328:	4604      	mov	r4, r0
   1332a:	2800      	cmp	r0, #0
   1332c:	d1ec      	bne.n	13308 <hci_init+0xf4>
	read_le_features_complete(rsp);
   1332e:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   13330:	4897      	ldr	r0, [pc, #604]	; (13590 <hci_init+0x37c>)
   13332:	6899      	ldr	r1, [r3, #8]
   13334:	2208      	movs	r2, #8
   13336:	3101      	adds	r1, #1
   13338:	f00a fc8b 	bl	1dc52 <memcpy>
	net_buf_unref(rsp);
   1333c:	9801      	ldr	r0, [sp, #4]
   1333e:	f003 f85f 	bl	16400 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   13342:	4621      	mov	r1, r4
   13344:	aa01      	add	r2, sp, #4
   13346:	f242 0002 	movw	r0, #8194	; 0x2002
   1334a:	f7ff ff01 	bl	13150 <bt_hci_cmd_send_sync>
		if (err) {
   1334e:	4604      	mov	r4, r0
   13350:	2800      	cmp	r0, #0
   13352:	d1d9      	bne.n	13308 <hci_init+0xf4>
		le_read_buffer_size_complete(rsp);
   13354:	9b01      	ldr	r3, [sp, #4]
   13356:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   13358:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1335c:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   13360:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   13362:	b121      	cbz	r1, 1336e <hci_init+0x15a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   13364:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   13366:	488b      	ldr	r0, [pc, #556]	; (13594 <hci_init+0x380>)
   13368:	4611      	mov	r1, r2
   1336a:	f00d f801 	bl	20370 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   1336e:	9801      	ldr	r0, [sp, #4]
   13370:	f003 f846 	bl	16400 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   13374:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   13378:	f016 0620 	ands.w	r6, r6, #32
   1337c:	f000 80ec 	beq.w	13558 <hci_init+0x344>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   13380:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   13384:	071c      	lsls	r4, r3, #28
   13386:	d511      	bpl.n	133ac <hci_init+0x198>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   13388:	aa01      	add	r2, sp, #4
   1338a:	2100      	movs	r1, #0
   1338c:	f242 001c 	movw	r0, #8220	; 0x201c
   13390:	f7ff fede 	bl	13150 <bt_hci_cmd_send_sync>
		if (err) {
   13394:	4604      	mov	r4, r0
   13396:	2800      	cmp	r0, #0
   13398:	d1b6      	bne.n	13308 <hci_init+0xf4>
		le_read_supp_states_complete(rsp);
   1339a:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1339c:	6883      	ldr	r3, [r0, #8]
   1339e:	f853 2f01 	ldr.w	r2, [r3, #1]!
   133a2:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   133a4:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   133a8:	f003 f82a 	bl	16400 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   133ac:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   133b0:	0698      	lsls	r0, r3, #26
   133b2:	d523      	bpl.n	133fc <hci_init+0x1e8>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   133b4:	f10d 0102 	add.w	r1, sp, #2
   133b8:	4668      	mov	r0, sp
   133ba:	f00a fdcb 	bl	1df54 <hci_le_read_max_data_len>
		if (err) {
   133be:	4604      	mov	r4, r0
   133c0:	2800      	cmp	r0, #0
   133c2:	d1a1      	bne.n	13308 <hci_init+0xf4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   133c4:	2104      	movs	r1, #4
   133c6:	f242 0024 	movw	r0, #8228	; 0x2024
   133ca:	f7ff fe89 	bl	130e0 <bt_hci_cmd_create>
		if (!buf) {
   133ce:	4606      	mov	r6, r0
   133d0:	2800      	cmp	r0, #0
   133d2:	f000 80c8 	beq.w	13566 <hci_init+0x352>
   133d6:	2104      	movs	r1, #4
   133d8:	3008      	adds	r0, #8
   133da:	f00c fb98 	bl	1fb0e <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   133de:	f8bd 3000 	ldrh.w	r3, [sp]
   133e2:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   133e4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   133e8:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   133ea:	4622      	mov	r2, r4
   133ec:	4631      	mov	r1, r6
   133ee:	f242 0024 	movw	r0, #8228	; 0x2024
   133f2:	f7ff fead 	bl	13150 <bt_hci_cmd_send_sync>
		if (err) {
   133f6:	4604      	mov	r4, r0
   133f8:	2800      	cmp	r0, #0
   133fa:	d185      	bne.n	13308 <hci_init+0xf4>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   133fc:	2108      	movs	r1, #8
   133fe:	f242 0001 	movw	r0, #8193	; 0x2001
   13402:	f7ff fe6d 	bl	130e0 <bt_hci_cmd_create>
	if (!buf) {
   13406:	4604      	mov	r4, r0
   13408:	2800      	cmp	r0, #0
   1340a:	f000 80ac 	beq.w	13566 <hci_init+0x352>
   1340e:	2108      	movs	r1, #8
   13410:	4408      	add	r0, r1
   13412:	f00c fb7c 	bl	1fb0e <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   13416:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   1341a:	f012 0f02 	tst.w	r2, #2
   1341e:	bf14      	ite	ne
   13420:	232f      	movne	r3, #47	; 0x2f
   13422:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   13424:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   13426:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   1342a:	bf48      	it	mi
   1342c:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   13430:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   13434:	bf18      	it	ne
   13436:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   1343a:	2200      	movs	r2, #0
   1343c:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1343e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   13442:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   13444:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   13446:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   13448:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1344a:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1344c:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1344e:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   13450:	4621      	mov	r1, r4
   13452:	f242 0001 	movw	r0, #8193	; 0x2001
   13456:	f7ff fe7b 	bl	13150 <bt_hci_cmd_send_sync>
	if (err) {
   1345a:	4604      	mov	r4, r0
   1345c:	2800      	cmp	r0, #0
   1345e:	f47f af53 	bne.w	13308 <hci_init+0xf4>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   13462:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   13466:	069a      	lsls	r2, r3, #26
   13468:	d41e      	bmi.n	134a8 <hci_init+0x294>
	if (bt_dev.le.acl_mtu) {
   1346a:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
   1346e:	b9d9      	cbnz	r1, 134a8 <hci_init+0x294>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   13470:	aa01      	add	r2, sp, #4
   13472:	f241 0005 	movw	r0, #4101	; 0x1005
   13476:	f7ff fe6b 	bl	13150 <bt_hci_cmd_send_sync>
	if (err) {
   1347a:	4604      	mov	r4, r0
   1347c:	2800      	cmp	r0, #0
   1347e:	f47f af43 	bne.w	13308 <hci_init+0xf4>
	if (bt_dev.le.acl_mtu) {
   13482:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   13486:	b963      	cbnz	r3, 134a2 <hci_init+0x28e>
	read_buffer_size_complete(rsp);
   13488:	9b01      	ldr	r3, [sp, #4]
   1348a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1348c:	785a      	ldrb	r2, [r3, #1]
   1348e:	7899      	ldrb	r1, [r3, #2]
   13490:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   13494:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   13498:	889a      	ldrh	r2, [r3, #4]
   1349a:	483e      	ldr	r0, [pc, #248]	; (13594 <hci_init+0x380>)
   1349c:	4611      	mov	r1, r2
   1349e:	f00c ff67 	bl	20370 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   134a2:	9801      	ldr	r0, [sp, #4]
   134a4:	f002 ffac 	bl	16400 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   134a8:	2108      	movs	r1, #8
   134aa:	f640 4001 	movw	r0, #3073	; 0xc01
   134ae:	f7ff fe17 	bl	130e0 <bt_hci_cmd_create>
	if (!buf) {
   134b2:	4604      	mov	r4, r0
   134b4:	2800      	cmp	r0, #0
   134b6:	d056      	beq.n	13566 <hci_init+0x352>
   134b8:	2108      	movs	r1, #8
   134ba:	4408      	add	r0, r1
   134bc:	f00c fb27 	bl	1fb0e <net_buf_simple_add>
	dst[0] = val;
   134c0:	2310      	movs	r3, #16
   134c2:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   134c4:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   134c6:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   134c8:	7043      	strb	r3, [r0, #1]
   134ca:	2602      	movs	r6, #2
   134cc:	2320      	movs	r3, #32
	dst[0] = val;
   134ce:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   134d0:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   134d2:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   134d4:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   134d6:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   134d8:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   134da:	4621      	mov	r1, r4
   134dc:	f640 4001 	movw	r0, #3073	; 0xc01
   134e0:	f7ff fe36 	bl	13150 <bt_hci_cmd_send_sync>
	if (err) {
   134e4:	4604      	mov	r4, r0
   134e6:	2800      	cmp	r0, #0
   134e8:	f47f af0e 	bne.w	13308 <hci_init+0xf4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   134ec:	4601      	mov	r1, r0
   134ee:	aa01      	add	r2, sp, #4
   134f0:	f64f 4001 	movw	r0, #64513	; 0xfc01
   134f4:	f7ff fe2c 	bl	13150 <bt_hci_cmd_send_sync>
	if (err) {
   134f8:	4604      	mov	r4, r0
   134fa:	bb48      	cbnz	r0, 13550 <hci_init+0x33c>
	net_buf_unref(rsp);
   134fc:	9801      	ldr	r0, [sp, #4]
   134fe:	f002 ff7f 	bl	16400 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   13502:	4621      	mov	r1, r4
   13504:	aa01      	add	r2, sp, #4
   13506:	f64f 4002 	movw	r0, #64514	; 0xfc02
   1350a:	f7ff fe21 	bl	13150 <bt_hci_cmd_send_sync>
	if (err) {
   1350e:	4604      	mov	r4, r0
   13510:	b9f0      	cbnz	r0, 13550 <hci_init+0x33c>
	rp.cmds = (void *)rsp->data;
   13512:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   13514:	4820      	ldr	r0, [pc, #128]	; (13598 <hci_init+0x384>)
   13516:	6899      	ldr	r1, [r3, #8]
   13518:	4632      	mov	r2, r6
   1351a:	3101      	adds	r1, #1
   1351c:	f00a fb99 	bl	1dc52 <memcpy>
	net_buf_unref(rsp);
   13520:	9801      	ldr	r0, [sp, #4]
   13522:	f002 ff6d 	bl	16400 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   13526:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   1352a:	075b      	lsls	r3, r3, #29
   1352c:	d510      	bpl.n	13550 <hci_init+0x33c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   1352e:	aa01      	add	r2, sp, #4
   13530:	4621      	mov	r1, r4
   13532:	f64f 4003 	movw	r0, #64515	; 0xfc03
   13536:	f7ff fe0b 	bl	13150 <bt_hci_cmd_send_sync>
		if (err) {
   1353a:	b948      	cbnz	r0, 13550 <hci_init+0x33c>
		rp.feat = (void *)rsp->data;
   1353c:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   1353e:	4817      	ldr	r0, [pc, #92]	; (1359c <hci_init+0x388>)
   13540:	6899      	ldr	r1, [r3, #8]
   13542:	2201      	movs	r2, #1
   13544:	4411      	add	r1, r2
   13546:	f00a fb84 	bl	1dc52 <memcpy>
		net_buf_unref(rsp);
   1354a:	9801      	ldr	r0, [sp, #4]
   1354c:	f002 ff58 	bl	16400 <net_buf_unref>
	err = bt_id_init();
   13550:	f000 fd22 	bl	13f98 <bt_id_init>
   13554:	4604      	mov	r4, r0
	if (err) {
   13556:	e6d7      	b.n	13308 <hci_init+0xf4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   13558:	2102      	movs	r1, #2
   1355a:	f640 406d 	movw	r0, #3181	; 0xc6d
   1355e:	f7ff fdbf 	bl	130e0 <bt_hci_cmd_create>
		if (!buf) {
   13562:	4604      	mov	r4, r0
   13564:	b910      	cbnz	r0, 1356c <hci_init+0x358>
		return -ENOBUFS;
   13566:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1356a:	e6cd      	b.n	13308 <hci_init+0xf4>
   1356c:	2102      	movs	r1, #2
   1356e:	3008      	adds	r0, #8
   13570:	f00c facd 	bl	1fb0e <net_buf_simple_add>
		cp_le->le = 0x01;
   13574:	2301      	movs	r3, #1
   13576:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   13578:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   1357a:	4621      	mov	r1, r4
   1357c:	4632      	mov	r2, r6
   1357e:	f640 406d 	movw	r0, #3181	; 0xc6d
   13582:	f7ff fde5 	bl	13150 <bt_hci_cmd_send_sync>
		if (err) {
   13586:	4604      	mov	r4, r0
   13588:	2800      	cmp	r0, #0
   1358a:	f43f aef9 	beq.w	13380 <hci_init+0x16c>
   1358e:	e6bb      	b.n	13308 <hci_init+0xf4>
   13590:	20000388 	.word	0x20000388
   13594:	200003b8 	.word	0x200003b8
   13598:	20000371 	.word	0x20000371
   1359c:	20000370 	.word	0x20000370

000135a0 <bt_send>:
	return bt_dev.drv->send(buf);
   135a0:	4b02      	ldr	r3, [pc, #8]	; (135ac <bt_send+0xc>)
   135a2:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   135a6:	691b      	ldr	r3, [r3, #16]
   135a8:	4718      	bx	r3
   135aa:	bf00      	nop
   135ac:	200002b8 	.word	0x200002b8

000135b0 <bt_hci_cmd_send>:
{
   135b0:	b538      	push	{r3, r4, r5, lr}
   135b2:	4605      	mov	r5, r0
	if (!buf) {
   135b4:	460c      	mov	r4, r1
   135b6:	b919      	cbnz	r1, 135c0 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   135b8:	f7ff fd92 	bl	130e0 <bt_hci_cmd_create>
		if (!buf) {
   135bc:	4604      	mov	r4, r0
   135be:	b198      	cbz	r0, 135e8 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   135c0:	f640 4335 	movw	r3, #3125	; 0xc35
   135c4:	429d      	cmp	r5, r3
   135c6:	d109      	bne.n	135dc <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
   135c8:	4620      	mov	r0, r4
   135ca:	f7ff ffe9 	bl	135a0 <bt_send>
		if (err) {
   135ce:	4605      	mov	r5, r0
   135d0:	b110      	cbz	r0, 135d8 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
   135d2:	4620      	mov	r0, r4
   135d4:	f002 ff14 	bl	16400 <net_buf_unref>
}
   135d8:	4628      	mov	r0, r5
   135da:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   135dc:	4804      	ldr	r0, [pc, #16]	; (135f0 <bt_hci_cmd_send+0x40>)
   135de:	4621      	mov	r1, r4
   135e0:	f00c fa62 	bl	1faa8 <net_buf_put>
	return 0;
   135e4:	2500      	movs	r5, #0
   135e6:	e7f7      	b.n	135d8 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   135e8:	f06f 0568 	mvn.w	r5, #104	; 0x68
   135ec:	e7f4      	b.n	135d8 <bt_hci_cmd_send+0x28>
   135ee:	bf00      	nop
   135f0:	20000404 	.word	0x20000404

000135f4 <conn_auto_initiate>:
{
   135f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   135f6:	7a83      	ldrb	r3, [r0, #10]
   135f8:	2b07      	cmp	r3, #7
{
   135fa:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   135fc:	d121      	bne.n	13642 <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   135fe:	f3bf 8f5b 	dmb	ish
   13602:	6843      	ldr	r3, [r0, #4]
   13604:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   13608:	049b      	lsls	r3, r3, #18
   1360a:	f100 0604 	add.w	r6, r0, #4
   1360e:	d41a      	bmi.n	13646 <conn_auto_initiate+0x52>
   13610:	78c3      	ldrb	r3, [r0, #3]
   13612:	b123      	cbz	r3, 1361e <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
   13614:	4b29      	ldr	r3, [pc, #164]	; (136bc <conn_auto_initiate+0xc8>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
   13616:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1361a:	071d      	lsls	r5, r3, #28
   1361c:	d513      	bpl.n	13646 <conn_auto_initiate+0x52>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   1361e:	2102      	movs	r1, #2
   13620:	f242 0016 	movw	r0, #8214	; 0x2016
   13624:	f7ff fd5c 	bl	130e0 <bt_hci_cmd_create>
	if (!buf) {
   13628:	4605      	mov	r5, r0
   1362a:	b160      	cbz	r0, 13646 <conn_auto_initiate+0x52>
   1362c:	2102      	movs	r1, #2
   1362e:	3008      	adds	r0, #8
   13630:	f00c fa6d 	bl	1fb0e <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   13634:	8823      	ldrh	r3, [r4, #0]
   13636:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   13638:	4629      	mov	r1, r5
   1363a:	f242 0016 	movw	r0, #8214	; 0x2016
   1363e:	f7ff ffb7 	bl	135b0 <bt_hci_cmd_send>
}
   13642:	b004      	add	sp, #16
   13644:	bd70      	pop	{r4, r5, r6, pc}
   13646:	f3bf 8f5b 	dmb	ish
   1364a:	6863      	ldr	r3, [r4, #4]
   1364c:	4d1b      	ldr	r5, [pc, #108]	; (136bc <conn_auto_initiate+0xc8>)
   1364e:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   13652:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   13656:	f3c3 3100 	ubfx	r1, r3, #12, #1
   1365a:	d117      	bne.n	1368c <conn_auto_initiate+0x98>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   1365c:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   13660:	07d8      	lsls	r0, r3, #31
   13662:	d513      	bpl.n	1368c <conn_auto_initiate+0x98>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   13664:	2302      	movs	r3, #2
   13666:	9100      	str	r1, [sp, #0]
   13668:	461a      	mov	r2, r3
   1366a:	4620      	mov	r0, r4
   1366c:	f00a fce2 	bl	1e034 <bt_le_set_phy>
		if (!err) {
   13670:	b960      	cbnz	r0, 1368c <conn_auto_initiate+0x98>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13672:	f3bf 8f5b 	dmb	ish
   13676:	e856 3f00 	ldrex	r3, [r6]
   1367a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1367e:	e846 3200 	strex	r2, r3, [r6]
   13682:	2a00      	cmp	r2, #0
   13684:	d1f7      	bne.n	13676 <conn_auto_initiate+0x82>
   13686:	f3bf 8f5b 	dmb	ish
			return;
   1368a:	e7da      	b.n	13642 <conn_auto_initiate+0x4e>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   1368c:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   13690:	069a      	lsls	r2, r3, #26
   13692:	d5d6      	bpl.n	13642 <conn_auto_initiate+0x4e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   13694:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   13698:	689b      	ldr	r3, [r3, #8]
   1369a:	079b      	lsls	r3, r3, #30
   1369c:	d5d1      	bpl.n	13642 <conn_auto_initiate+0x4e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1369e:	f10d 010e 	add.w	r1, sp, #14
   136a2:	a803      	add	r0, sp, #12
   136a4:	f00a fc56 	bl	1df54 <hci_le_read_max_data_len>
			if (!err) {
   136a8:	2800      	cmp	r0, #0
   136aa:	d1ca      	bne.n	13642 <conn_auto_initiate+0x4e>
				err = bt_le_set_data_len(conn,
   136ac:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   136b0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   136b4:	4620      	mov	r0, r4
   136b6:	f00a fca0 	bl	1dffa <bt_le_set_data_len>
		}
   136ba:	e7c2      	b.n	13642 <conn_auto_initiate+0x4e>
   136bc:	200002b8 	.word	0x200002b8

000136c0 <bt_hci_le_enh_conn_complete>:
{
   136c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   136c4:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
   136c8:	4a66      	ldr	r2, [pc, #408]	; (13864 <bt_hci_le_enh_conn_complete+0x1a4>)
	if (evt->status) {
   136ca:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
   136cc:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   136ce:	ea6f 5307 	mvn.w	r3, r7, lsl #20
   136d2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   136d6:	b29b      	uxth	r3, r3
   136d8:	4299      	cmp	r1, r3
   136da:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   136de:	bf08      	it	eq
   136e0:	8016      	strheq	r6, [r2, #0]
{
   136e2:	b085      	sub	sp, #20
   136e4:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   136e6:	fa1f f887 	uxth.w	r8, r7
			return true;
   136ea:	bf08      	it	eq
   136ec:	2601      	moveq	r6, #1
	if (evt->status) {
   136ee:	b1f4      	cbz	r4, 1372e <bt_hci_le_enh_conn_complete+0x6e>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   136f0:	2c3c      	cmp	r4, #60	; 0x3c
   136f2:	d154      	bne.n	1379e <bt_hci_le_enh_conn_complete+0xde>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   136f4:	f000 fcee 	bl	140d4 <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   136f8:	f3bf 8f5b 	dmb	ish
   136fc:	3010      	adds	r0, #16
   136fe:	e850 3f00 	ldrex	r3, [r0]
   13702:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   13706:	e840 3200 	strex	r2, r3, [r0]
   1370a:	2a00      	cmp	r2, #0
   1370c:	d1f7      	bne.n	136fe <bt_hci_le_enh_conn_complete+0x3e>
   1370e:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   13712:	2000      	movs	r0, #0
   13714:	f7ff fba8 	bl	12e68 <find_pending_connect.part.0>
		if (!conn) {
   13718:	4605      	mov	r5, r0
   1371a:	2800      	cmp	r0, #0
   1371c:	d03f      	beq.n	1379e <bt_hci_le_enh_conn_complete+0xde>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   1371e:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13720:	2100      	movs	r1, #0
   13722:	f001 f81d 	bl	14760 <bt_conn_set_state>
		bt_conn_unref(conn);
   13726:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   13728:	f00a ffb8 	bl	1e69c <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1372c:	e037      	b.n	1379e <bt_hci_le_enh_conn_complete+0xde>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   1372e:	7903      	ldrb	r3, [r0, #4]
   13730:	3b02      	subs	r3, #2
   13732:	2b01      	cmp	r3, #1
   13734:	f100 0904 	add.w	r9, r0, #4
   13738:	d834      	bhi.n	137a4 <bt_hci_le_enh_conn_complete+0xe4>
 *  @param dst Bluetooth LE device address destination buffer.
 *  @param src Bluetooth LE device address source buffer.
 */
static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
   1373a:	2207      	movs	r2, #7
   1373c:	4649      	mov	r1, r9
   1373e:	a802      	add	r0, sp, #8
   13740:	f00a fa87 	bl	1dc52 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   13744:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
   13748:	2206      	movs	r2, #6
   1374a:	3b02      	subs	r3, #2
   1374c:	f105 0111 	add.w	r1, r5, #17
   13750:	f10d 0001 	add.w	r0, sp, #1
   13754:	f88d 3008 	strb.w	r3, [sp, #8]
   13758:	f00a fa7b 	bl	1dc52 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   1375c:	2301      	movs	r3, #1
   1375e:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   13762:	78eb      	ldrb	r3, [r5, #3]
   13764:	2b01      	cmp	r3, #1
   13766:	d116      	bne.n	13796 <bt_hci_le_enh_conn_complete+0xd6>
   13768:	a802      	add	r0, sp, #8
   1376a:	f7ff fb7d 	bl	12e68 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1376e:	78eb      	ldrb	r3, [r5, #3]
   13770:	2b01      	cmp	r3, #1
   13772:	4604      	mov	r4, r0
   13774:	d10e      	bne.n	13794 <bt_hci_le_enh_conn_complete+0xd4>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   13776:	f000 fcad 	bl	140d4 <bt_le_adv_lookup_legacy>
   1377a:	f3bf 8f5b 	dmb	ish
   1377e:	3010      	adds	r0, #16
   13780:	e850 3f00 	ldrex	r3, [r0]
   13784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   13788:	e840 3200 	strex	r2, r3, [r0]
   1378c:	2a00      	cmp	r2, #0
   1378e:	d1f7      	bne.n	13780 <bt_hci_le_enh_conn_complete+0xc0>
   13790:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   13794:	b9dc      	cbnz	r4, 137ce <bt_hci_le_enh_conn_complete+0x10e>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   13796:	211f      	movs	r1, #31
   13798:	4640      	mov	r0, r8
   1379a:	f00a fbf3 	bl	1df84 <bt_hci_disconnect>
}
   1379e:	b005      	add	sp, #20
   137a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   137a4:	78c3      	ldrb	r3, [r0, #3]
   137a6:	2b01      	cmp	r3, #1
   137a8:	bf04      	itt	eq
   137aa:	4b2f      	ldreq	r3, [pc, #188]	; (13868 <bt_hci_le_enh_conn_complete+0x1a8>)
   137ac:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   137b0:	4649      	mov	r1, r9
   137b2:	4620      	mov	r0, r4
   137b4:	f00a fd66 	bl	1e284 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   137b8:	2207      	movs	r2, #7
   137ba:	4601      	mov	r1, r0
   137bc:	a802      	add	r0, sp, #8
   137be:	f00a fa48 	bl	1dc52 <memcpy>
   137c2:	2207      	movs	r2, #7
   137c4:	4649      	mov	r1, r9
   137c6:	4668      	mov	r0, sp
   137c8:	f00a fa43 	bl	1dc52 <memcpy>
}
   137cc:	e7c9      	b.n	13762 <bt_hci_le_enh_conn_complete+0xa2>
	conn->handle = handle;
   137ce:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
   137d0:	2207      	movs	r2, #7
   137d2:	f820 7b88 	strh.w	r7, [r0], #136
   137d6:	a902      	add	r1, sp, #8
   137d8:	f00a fa3b 	bl	1dc52 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   137dc:	7e2a      	ldrb	r2, [r5, #24]
   137de:	7deb      	ldrb	r3, [r5, #23]
   137e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   137e4:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   137e8:	7eaa      	ldrb	r2, [r5, #26]
   137ea:	7e6b      	ldrb	r3, [r5, #25]
   137ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   137f0:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   137f4:	7eeb      	ldrb	r3, [r5, #27]
   137f6:	7f2a      	ldrb	r2, [r5, #28]
   137f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   137fc:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   13800:	78eb      	ldrb	r3, [r5, #3]
   13802:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   13804:	2500      	movs	r5, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13806:	2b01      	cmp	r3, #1
	conn->err = 0U;
   13808:	7265      	strb	r5, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1380a:	d11a      	bne.n	13842 <bt_hci_le_enh_conn_complete+0x182>
   1380c:	2207      	movs	r2, #7
   1380e:	4669      	mov	r1, sp
   13810:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   13814:	f00a fa1d 	bl	1dc52 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   13818:	f000 fc5c 	bl	140d4 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   1381c:	7a21      	ldrb	r1, [r4, #8]
   1381e:	4f12      	ldr	r7, [pc, #72]	; (13868 <bt_hci_le_enh_conn_complete+0x1a8>)
   13820:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   13824:	2207      	movs	r2, #7
   13826:	4439      	add	r1, r7
   13828:	f104 0096 	add.w	r0, r4, #150	; 0x96
   1382c:	f00a fa11 	bl	1dc52 <memcpy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   13830:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
   13834:	462a      	mov	r2, r5
   13836:	f001 0340 	and.w	r3, r1, #64	; 0x40
   1383a:	4313      	orrs	r3, r2
   1383c:	d001      	beq.n	13842 <bt_hci_le_enh_conn_complete+0x182>
			bt_le_adv_resume();
   1383e:	f000 fded 	bl	1441c <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   13842:	2107      	movs	r1, #7
   13844:	4620      	mov	r0, r4
   13846:	f000 ff8b 	bl	14760 <bt_conn_set_state>
	if (is_disconnected) {
   1384a:	b11e      	cbz	r6, 13854 <bt_hci_le_enh_conn_complete+0x194>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1384c:	2101      	movs	r1, #1
   1384e:	4620      	mov	r0, r4
   13850:	f000 ff86 	bl	14760 <bt_conn_set_state>
	bt_conn_connected(conn);
   13854:	4620      	mov	r0, r4
   13856:	f00a ff5d 	bl	1e714 <bt_conn_connected>
	conn_auto_initiate(conn);
   1385a:	4620      	mov	r0, r4
   1385c:	f7ff feca 	bl	135f4 <conn_auto_initiate>
	bt_conn_unref(conn);
   13860:	4620      	mov	r0, r4
   13862:	e761      	b.n	13728 <bt_hci_le_enh_conn_complete+0x68>
   13864:	20002ed8 	.word	0x20002ed8
   13868:	200002b8 	.word	0x200002b8

0001386c <hci_tx_thread>:
{
   1386c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   13870:	f8df 8104 	ldr.w	r8, [pc, #260]	; 13978 <hci_tx_thread+0x10c>
		BT_ASSERT(err == 0);
   13874:	f8df a114 	ldr.w	sl, [pc, #276]	; 1398c <hci_tx_thread+0x120>
		events[0].state = K_POLL_STATE_NOT_READY;
   13878:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1387c:	483d      	ldr	r0, [pc, #244]	; (13974 <hci_tx_thread+0x108>)
		events[0].state = K_POLL_STATE_NOT_READY;
   1387e:	f36f 3352 	bfc	r3, #13, #6
   13882:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   13886:	f000 ff21 	bl	146cc <bt_conn_prepare_events>
   1388a:	1c45      	adds	r5, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1388c:	483a      	ldr	r0, [pc, #232]	; (13978 <hci_tx_thread+0x10c>)
   1388e:	f04f 32ff 	mov.w	r2, #4294967295
   13892:	f04f 33ff 	mov.w	r3, #4294967295
   13896:	4629      	mov	r1, r5
   13898:	f006 f95c 	bl	19b54 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1389c:	b160      	cbz	r0, 138b8 <hci_tx_thread+0x4c>
   1389e:	4937      	ldr	r1, [pc, #220]	; (1397c <hci_tx_thread+0x110>)
   138a0:	4837      	ldr	r0, [pc, #220]	; (13980 <hci_tx_thread+0x114>)
   138a2:	f640 137f 	movw	r3, #2431	; 0x97f
   138a6:	4652      	mov	r2, sl
   138a8:	f009 faa5 	bl	1cdf6 <printk>
   138ac:	4040      	eors	r0, r0
   138ae:	f380 8811 	msr	BASEPRI, r0
   138b2:	f04f 0003 	mov.w	r0, #3
   138b6:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   138b8:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 13990 <hci_tx_thread+0x124>
{
   138bc:	4e2e      	ldr	r6, [pc, #184]	; (13978 <hci_tx_thread+0x10c>)
	return z_impl_k_sem_take(sem, timeout);
   138be:	f5a9 77a6 	sub.w	r7, r9, #332	; 0x14c
   138c2:	f1a9 0b34 	sub.w	fp, r9, #52	; 0x34
	for (; count; ev++, count--) {
   138c6:	b915      	cbnz	r5, 138ce <hci_tx_thread+0x62>
	z_impl_k_yield();
   138c8:	f005 feaa 	bl	19620 <z_impl_k_yield>
	while (1) {
   138cc:	e7d4      	b.n	13878 <hci_tx_thread+0xc>
		switch (ev->state) {
   138ce:	68f3      	ldr	r3, [r6, #12]
   138d0:	f3c3 3345 	ubfx	r3, r3, #13, #6
   138d4:	2b04      	cmp	r3, #4
   138d6:	d142      	bne.n	1395e <hci_tx_thread+0xf2>
			if (ev->tag == BT_EVENT_CMD_TX) {
   138d8:	7b33      	ldrb	r3, [r6, #12]
   138da:	2b00      	cmp	r3, #0
   138dc:	d142      	bne.n	13964 <hci_tx_thread+0xf8>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   138de:	2200      	movs	r2, #0
   138e0:	2300      	movs	r3, #0
   138e2:	4648      	mov	r0, r9
   138e4:	f00c f8c2 	bl	1fa6c <net_buf_get>
	BT_ASSERT(buf);
   138e8:	4604      	mov	r4, r0
   138ea:	b960      	cbnz	r0, 13906 <hci_tx_thread+0x9a>
   138ec:	4925      	ldr	r1, [pc, #148]	; (13984 <hci_tx_thread+0x118>)
   138ee:	4824      	ldr	r0, [pc, #144]	; (13980 <hci_tx_thread+0x114>)
   138f0:	f640 131c 	movw	r3, #2332	; 0x91c
   138f4:	4652      	mov	r2, sl
   138f6:	f009 fa7e 	bl	1cdf6 <printk>
   138fa:	4040      	eors	r0, r0
   138fc:	f380 8811 	msr	BASEPRI, r0
   13900:	f04f 0003 	mov.w	r0, #3
   13904:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   13906:	f04f 32ff 	mov.w	r2, #4294967295
   1390a:	f04f 33ff 	mov.w	r3, #4294967295
   1390e:	4658      	mov	r0, fp
   13910:	f005 fa36 	bl	18d80 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   13914:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   13918:	b120      	cbz	r0, 13924 <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
   1391a:	f002 fd71 	bl	16400 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1391e:	2300      	movs	r3, #0
   13920:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   13924:	4620      	mov	r0, r4
   13926:	f00c f8cc 	bl	1fac2 <net_buf_ref>
   1392a:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	err = bt_send(buf);
   1392e:	4620      	mov	r0, r4
   13930:	f7ff fe36 	bl	135a0 <bt_send>
	if (err) {
   13934:	b198      	cbz	r0, 1395e <hci_tx_thread+0xf2>
	z_impl_k_sem_give(sem);
   13936:	4814      	ldr	r0, [pc, #80]	; (13988 <hci_tx_thread+0x11c>)
   13938:	f005 f9fc 	bl	18d34 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1393c:	4620      	mov	r0, r4
   1393e:	f002 fcab 	bl	16298 <net_buf_id>
   13942:	4621      	mov	r1, r4
   13944:	201f      	movs	r0, #31
   13946:	f7ff fb33 	bl	12fb0 <hci_cmd_done.isra.0>
		net_buf_unref(bt_dev.sent_cmd);
   1394a:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   1394e:	f002 fd57 	bl	16400 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   13952:	2300      	movs	r3, #0
		net_buf_unref(buf);
   13954:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   13956:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		net_buf_unref(buf);
   1395a:	f002 fd51 	bl	16400 <net_buf_unref>
	for (; count; ev++, count--) {
   1395e:	3614      	adds	r6, #20
   13960:	3d01      	subs	r5, #1
   13962:	e7b0      	b.n	138c6 <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   13964:	2b01      	cmp	r3, #1
   13966:	d1fa      	bne.n	1395e <hci_tx_thread+0xf2>
					conn = CONTAINER_OF(ev->fifo,
   13968:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   1396a:	3838      	subs	r0, #56	; 0x38
   1396c:	f001 f934 	bl	14bd8 <bt_conn_process_tx>
   13970:	e7f5      	b.n	1395e <hci_tx_thread+0xf2>
   13972:	bf00      	nop
   13974:	2000052c 	.word	0x2000052c
   13978:	20000518 	.word	0x20000518
   1397c:	00021cfd 	.word	0x00021cfd
   13980:	00021cb2 	.word	0x00021cb2
   13984:	00021d26 	.word	0x00021d26
   13988:	200003d0 	.word	0x200003d0
   1398c:	00021c65 	.word	0x00021c65
   13990:	20000404 	.word	0x20000404

00013994 <hci_event_prio>:
{
   13994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13998:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   1399a:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   1399e:	4630      	mov	r0, r6
   139a0:	f00c f8ec 	bl	1fb7c <net_buf_simple_headroom>
	state->len = buf->len;
   139a4:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   139a8:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   139ac:	4605      	mov	r5, r0
   139ae:	d80c      	bhi.n	139ca <hci_event_prio+0x36>
   139b0:	4a1c      	ldr	r2, [pc, #112]	; (13a24 <hci_event_prio+0x90>)
   139b2:	491d      	ldr	r1, [pc, #116]	; (13a28 <hci_event_prio+0x94>)
   139b4:	481d      	ldr	r0, [pc, #116]	; (13a2c <hci_event_prio+0x98>)
   139b6:	f640 530c 	movw	r3, #3340	; 0xd0c
   139ba:	f009 fa1c 	bl	1cdf6 <printk>
   139be:	4040      	eors	r0, r0
   139c0:	f380 8811 	msr	BASEPRI, r0
   139c4:	f04f 0003 	mov.w	r0, #3
   139c8:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   139ca:	2102      	movs	r1, #2
   139cc:	4630      	mov	r0, r6
   139ce:	f00c f8c5 	bl	1fb5c <net_buf_simple_pull_mem>
   139d2:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   139d4:	7800      	ldrb	r0, [r0, #0]
   139d6:	f00a f9d1 	bl	1dd7c <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   139da:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   139dc:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   139de:	d40c      	bmi.n	139fa <hci_event_prio+0x66>
   139e0:	4a10      	ldr	r2, [pc, #64]	; (13a24 <hci_event_prio+0x90>)
   139e2:	4913      	ldr	r1, [pc, #76]	; (13a30 <hci_event_prio+0x9c>)
   139e4:	4811      	ldr	r0, [pc, #68]	; (13a2c <hci_event_prio+0x98>)
   139e6:	f44f 6351 	mov.w	r3, #3344	; 0xd10
   139ea:	f009 fa04 	bl	1cdf6 <printk>
   139ee:	4040      	eors	r0, r0
   139f0:	f380 8811 	msr	BASEPRI, r0
   139f4:	f04f 0003 	mov.w	r0, #3
   139f8:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   139fa:	2305      	movs	r3, #5
   139fc:	4a0d      	ldr	r2, [pc, #52]	; (13a34 <hci_event_prio+0xa0>)
   139fe:	7838      	ldrb	r0, [r7, #0]
   13a00:	4621      	mov	r1, r4
   13a02:	f00a f9cd 	bl	1dda0 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   13a06:	07b3      	lsls	r3, r6, #30
   13a08:	d507      	bpl.n	13a1a <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   13a0a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   13a0c:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   13a10:	fa10 f585 	uxtah	r5, r0, r5
   13a14:	60a5      	str	r5, [r4, #8]
}
   13a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   13a1a:	4620      	mov	r0, r4
}
   13a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   13a20:	f002 bcee 	b.w	16400 <net_buf_unref>
   13a24:	00021c65 	.word	0x00021c65
   13a28:	00021c99 	.word	0x00021c99
   13a2c:	00021cb2 	.word	0x00021cb2
   13a30:	00021d2a 	.word	0x00021d2a
   13a34:	000213c0 	.word	0x000213c0

00013a38 <bt_recv>:
{
   13a38:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   13a3a:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   13a3c:	2b01      	cmp	r3, #1
{
   13a3e:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   13a40:	d007      	beq.n	13a52 <bt_recv+0x1a>
   13a42:	2b03      	cmp	r3, #3
   13a44:	d113      	bne.n	13a6e <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   13a46:	480c      	ldr	r0, [pc, #48]	; (13a78 <bt_recv+0x40>)
   13a48:	4629      	mov	r1, r5
   13a4a:	f00c f82d 	bl	1faa8 <net_buf_put>
		return 0;
   13a4e:	2000      	movs	r0, #0
   13a50:	e00c      	b.n	13a6c <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13a52:	6883      	ldr	r3, [r0, #8]
   13a54:	7818      	ldrb	r0, [r3, #0]
   13a56:	f00a f991 	bl	1dd7c <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   13a5a:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13a5c:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   13a5e:	d502      	bpl.n	13a66 <bt_recv+0x2e>
			hci_event_prio(buf);
   13a60:	4628      	mov	r0, r5
   13a62:	f7ff ff97 	bl	13994 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   13a66:	f014 0002 	ands.w	r0, r4, #2
   13a6a:	d1ec      	bne.n	13a46 <bt_recv+0xe>
}
   13a6c:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   13a6e:	f002 fcc7 	bl	16400 <net_buf_unref>
		return -EINVAL;
   13a72:	f06f 0015 	mvn.w	r0, #21
   13a76:	e7f9      	b.n	13a6c <bt_recv+0x34>
   13a78:	200003ec 	.word	0x200003ec

00013a7c <bt_hci_driver_register>:
	if (bt_dev.drv) {
   13a7c:	4a08      	ldr	r2, [pc, #32]	; (13aa0 <bt_hci_driver_register+0x24>)
{
   13a7e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   13a80:	f8d2 0164 	ldr.w	r0, [r2, #356]	; 0x164
   13a84:	b930      	cbnz	r0, 13a94 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   13a86:	68d9      	ldr	r1, [r3, #12]
   13a88:	b139      	cbz	r1, 13a9a <bt_hci_driver_register+0x1e>
   13a8a:	6919      	ldr	r1, [r3, #16]
   13a8c:	b129      	cbz	r1, 13a9a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   13a8e:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
	return 0;
   13a92:	4770      	bx	lr
		return -EALREADY;
   13a94:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13a98:	4770      	bx	lr
		return -EINVAL;
   13a9a:	f06f 0015 	mvn.w	r0, #21
}
   13a9e:	4770      	bx	lr
   13aa0:	200002b8 	.word	0x200002b8

00013aa4 <bt_finalize_init>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13aa4:	4b06      	ldr	r3, [pc, #24]	; (13ac0 <bt_finalize_init+0x1c>)
   13aa6:	f3bf 8f5b 	dmb	ish
   13aaa:	e853 2f00 	ldrex	r2, [r3]
   13aae:	f042 0202 	orr.w	r2, r2, #2
   13ab2:	e843 2100 	strex	r1, r2, [r3]
   13ab6:	2900      	cmp	r1, #0
   13ab8:	d1f7      	bne.n	13aaa <bt_finalize_init+0x6>
   13aba:	f3bf 8f5b 	dmb	ish
}
   13abe:	4770      	bx	lr
   13ac0:	20000384 	.word	0x20000384

00013ac4 <init_work>:
{
   13ac4:	b510      	push	{r4, lr}
	err = hci_init();
   13ac6:	f7ff fba5 	bl	13214 <hci_init>
	if (err) {
   13aca:	b920      	cbnz	r0, 13ad6 <init_work+0x12>
		err = bt_conn_init();
   13acc:	f001 f8ec 	bl	14ca8 <bt_conn_init>
		if (err) {
   13ad0:	b908      	cbnz	r0, 13ad6 <init_work+0x12>
	bt_finalize_init();
   13ad2:	f7ff ffe7 	bl	13aa4 <bt_finalize_init>
	if (ready_cb) {
   13ad6:	4b03      	ldr	r3, [pc, #12]	; (13ae4 <init_work+0x20>)
   13ad8:	681b      	ldr	r3, [r3, #0]
   13ada:	b113      	cbz	r3, 13ae2 <init_work+0x1e>
}
   13adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   13ae0:	4718      	bx	r3
}
   13ae2:	bd10      	pop	{r4, pc}
   13ae4:	200022e8 	.word	0x200022e8

00013ae8 <bt_set_name>:
	k_work_submit(&bt_dev.init);
	return 0;
}

int bt_set_name(const char *name)
{
   13ae8:	b570      	push	{r4, r5, r6, lr}
   13aea:	4606      	mov	r6, r0
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	size_t len = strlen(name);
   13aec:	f00a f86e 	bl	1dbcc <strlen>
	int err;

	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   13af0:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
   13af2:	4605      	mov	r5, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   13af4:	d811      	bhi.n	13b1a <bt_set_name+0x32>
		return -ENOMEM;
	}

	if (!strcmp(bt_dev.name, name)) {
   13af6:	4c0a      	ldr	r4, [pc, #40]	; (13b20 <bt_set_name+0x38>)
   13af8:	4631      	mov	r1, r6
   13afa:	f504 70b4 	add.w	r0, r4, #360	; 0x168
   13afe:	f00a f875 	bl	1dbec <strcmp>
   13b02:	b148      	cbz	r0, 13b18 <bt_set_name+0x30>
		return 0;
	}

	strncpy(bt_dev.name, name, len);
   13b04:	f504 70b4 	add.w	r0, r4, #360	; 0x168
   13b08:	462a      	mov	r2, r5
   13b0a:	4631      	mov	r1, r6
	bt_dev.name[len] = '\0';
   13b0c:	442c      	add	r4, r5
	strncpy(bt_dev.name, name, len);
   13b0e:	f00a f84a 	bl	1dba6 <strncpy>
	bt_dev.name[len] = '\0';
   13b12:	2000      	movs	r0, #0
   13b14:	f884 0168 	strb.w	r0, [r4, #360]	; 0x168

	return 0;
#else
	return -ENOMEM;
#endif
}
   13b18:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   13b1a:	f06f 000b 	mvn.w	r0, #11
   13b1e:	e7fb      	b.n	13b18 <bt_set_name+0x30>
   13b20:	200002b8 	.word	0x200002b8

00013b24 <bt_enable>:
{
   13b24:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
   13b28:	4d34      	ldr	r5, [pc, #208]	; (13bfc <bt_enable+0xd8>)
   13b2a:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
{
   13b2e:	b088      	sub	sp, #32
   13b30:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   13b32:	2b00      	cmp	r3, #0
   13b34:	d05b      	beq.n	13bee <bt_enable+0xca>
   13b36:	f3bf 8f5b 	dmb	ish
   13b3a:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   13b3e:	e853 4f00 	ldrex	r4, [r3]
   13b42:	f044 0201 	orr.w	r2, r4, #1
   13b46:	e843 2100 	strex	r1, r2, [r3]
   13b4a:	2900      	cmp	r1, #0
   13b4c:	d1f7      	bne.n	13b3e <bt_enable+0x1a>
   13b4e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13b52:	f014 0401 	ands.w	r4, r4, #1
   13b56:	d14d      	bne.n	13bf4 <bt_enable+0xd0>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
   13b58:	4829      	ldr	r0, [pc, #164]	; (13c00 <bt_enable+0xdc>)
   13b5a:	f7ff ffc5 	bl	13ae8 <bt_set_name>
	ready_cb = cb;
   13b5e:	4b29      	ldr	r3, [pc, #164]	; (13c04 <bt_enable+0xe0>)
   13b60:	f04f 0800 	mov.w	r8, #0
   13b64:	601e      	str	r6, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
   13b66:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13b6a:	f06f 0308 	mvn.w	r3, #8
   13b6e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   13b72:	e9cd 8906 	strd	r8, r9, [sp, #24]
   13b76:	e9cd 4400 	strd	r4, r4, [sp]
   13b7a:	4b23      	ldr	r3, [pc, #140]	; (13c08 <bt_enable+0xe4>)
   13b7c:	4923      	ldr	r1, [pc, #140]	; (13c0c <bt_enable+0xe8>)
   13b7e:	9404      	str	r4, [sp, #16]
   13b80:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   13b84:	4822      	ldr	r0, [pc, #136]	; (13c10 <bt_enable+0xec>)
   13b86:	f004 ff3d 	bl	18a04 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13b8a:	4922      	ldr	r1, [pc, #136]	; (13c14 <bt_enable+0xf0>)
   13b8c:	4820      	ldr	r0, [pc, #128]	; (13c10 <bt_enable+0xec>)
   13b8e:	f00c fb0f 	bl	201b0 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13b92:	f06f 0307 	mvn.w	r3, #7
   13b96:	e9cd 4302 	strd	r4, r3, [sp, #8]
   13b9a:	e9cd 8906 	strd	r8, r9, [sp, #24]
   13b9e:	e9cd 4400 	strd	r4, r4, [sp]
   13ba2:	4b1d      	ldr	r3, [pc, #116]	; (13c18 <bt_enable+0xf4>)
   13ba4:	491d      	ldr	r1, [pc, #116]	; (13c1c <bt_enable+0xf8>)
   13ba6:	9404      	str	r4, [sp, #16]
   13ba8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13bac:	481c      	ldr	r0, [pc, #112]	; (13c20 <bt_enable+0xfc>)
   13bae:	f004 ff29 	bl	18a04 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13bb2:	491c      	ldr	r1, [pc, #112]	; (13c24 <bt_enable+0x100>)
   13bb4:	481a      	ldr	r0, [pc, #104]	; (13c20 <bt_enable+0xfc>)
   13bb6:	f00c fafb 	bl	201b0 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   13bba:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   13bbe:	68db      	ldr	r3, [r3, #12]
   13bc0:	4798      	blx	r3
	if (err) {
   13bc2:	4604      	mov	r4, r0
   13bc4:	b950      	cbnz	r0, 13bdc <bt_enable+0xb8>
	if (!cb) {
   13bc6:	b96e      	cbnz	r6, 13be4 <bt_enable+0xc0>
	err = hci_init();
   13bc8:	f7ff fb24 	bl	13214 <hci_init>
	if (err) {
   13bcc:	4604      	mov	r4, r0
   13bce:	b928      	cbnz	r0, 13bdc <bt_enable+0xb8>
		err = bt_conn_init();
   13bd0:	f001 f86a 	bl	14ca8 <bt_conn_init>
		if (err) {
   13bd4:	4604      	mov	r4, r0
   13bd6:	b908      	cbnz	r0, 13bdc <bt_enable+0xb8>
	bt_finalize_init();
   13bd8:	f7ff ff64 	bl	13aa4 <bt_finalize_init>
}
   13bdc:	4620      	mov	r0, r4
   13bde:	b008      	add	sp, #32
   13be0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	k_work_submit(&bt_dev.init);
   13be4:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   13be8:	f005 fa1a 	bl	19020 <k_work_submit>
	return 0;
   13bec:	e7f6      	b.n	13bdc <bt_enable+0xb8>
		return -ENODEV;
   13bee:	f06f 0412 	mvn.w	r4, #18
   13bf2:	e7f3      	b.n	13bdc <bt_enable+0xb8>
		return -EALREADY;
   13bf4:	f06f 0477 	mvn.w	r4, #119	; 0x77
   13bf8:	e7f0      	b.n	13bdc <bt_enable+0xb8>
   13bfa:	bf00      	nop
   13bfc:	200002b8 	.word	0x200002b8
   13c00:	00021d43 	.word	0x00021d43
   13c04:	200022e8 	.word	0x200022e8
   13c08:	0001386d 	.word	0x0001386d
   13c0c:	20004060 	.word	0x20004060
   13c10:	20001620 	.word	0x20001620
   13c14:	00021d49 	.word	0x00021d49
   13c18:	00012ea5 	.word	0x00012ea5
   13c1c:	20003c40 	.word	0x20003c40
   13c20:	200015a0 	.word	0x200015a0
   13c24:	00021d4f 	.word	0x00021d4f

00013c28 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   13c28:	4800      	ldr	r0, [pc, #0]	; (13c2c <bt_get_name+0x4>)
   13c2a:	4770      	bx	lr
   13c2c:	20000420 	.word	0x20000420

00013c30 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   13c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   13c32:	4f0b      	ldr	r7, [pc, #44]	; (13c60 <id_find+0x30>)
{
   13c34:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   13c36:	2500      	movs	r5, #0
   13c38:	79fb      	ldrb	r3, [r7, #7]
   13c3a:	b2ec      	uxtb	r4, r5
   13c3c:	42a3      	cmp	r3, r4
   13c3e:	d802      	bhi.n	13c46 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   13c40:	f06f 0401 	mvn.w	r4, #1
   13c44:	e009      	b.n	13c5a <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   13c46:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   13c4a:	2207      	movs	r2, #7
   13c4c:	4439      	add	r1, r7
   13c4e:	4630      	mov	r0, r6
   13c50:	f009 ffd8 	bl	1dc04 <memcmp>
   13c54:	3501      	adds	r5, #1
   13c56:	2800      	cmp	r0, #0
   13c58:	d1ee      	bne.n	13c38 <id_find+0x8>
}
   13c5a:	4620      	mov	r0, r4
   13c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13c5e:	bf00      	nop
   13c60:	200002b8 	.word	0x200002b8

00013c64 <set_random_address>:
{
   13c64:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   13c66:	4914      	ldr	r1, [pc, #80]	; (13cb8 <set_random_address+0x54>)
   13c68:	2206      	movs	r2, #6
   13c6a:	4605      	mov	r5, r0
   13c6c:	f009 ffca 	bl	1dc04 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   13c70:	4604      	mov	r4, r0
   13c72:	b1e0      	cbz	r0, 13cae <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   13c74:	2106      	movs	r1, #6
   13c76:	f242 0005 	movw	r0, #8197	; 0x2005
   13c7a:	f7ff fa31 	bl	130e0 <bt_hci_cmd_create>
	if (!buf) {
   13c7e:	4604      	mov	r4, r0
   13c80:	b1b8      	cbz	r0, 13cb2 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   13c82:	2206      	movs	r2, #6
   13c84:	4629      	mov	r1, r5
   13c86:	3008      	adds	r0, #8
   13c88:	f00b ff47 	bl	1fb1a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   13c8c:	4621      	mov	r1, r4
   13c8e:	2200      	movs	r2, #0
   13c90:	f242 0005 	movw	r0, #8197	; 0x2005
   13c94:	f7ff fa5c 	bl	13150 <bt_hci_cmd_send_sync>
	if (err) {
   13c98:	4604      	mov	r4, r0
   13c9a:	b940      	cbnz	r0, 13cae <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   13c9c:	2206      	movs	r2, #6
   13c9e:	4806      	ldr	r0, [pc, #24]	; (13cb8 <set_random_address+0x54>)
   13ca0:	4629      	mov	r1, r5
   13ca2:	f009 ffd6 	bl	1dc52 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   13ca6:	4b05      	ldr	r3, [pc, #20]	; (13cbc <set_random_address+0x58>)
   13ca8:	2201      	movs	r2, #1
   13caa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
   13cae:	4620      	mov	r0, r4
   13cb0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   13cb2:	f06f 0468 	mvn.w	r4, #104	; 0x68
   13cb6:	e7fa      	b.n	13cae <set_random_address+0x4a>
   13cb8:	20000319 	.word	0x20000319
   13cbc:	200002b8 	.word	0x200002b8

00013cc0 <id_create.isra.0>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   13cc0:	b530      	push	{r4, r5, lr}
   13cc2:	4c15      	ldr	r4, [pc, #84]	; (13d18 <id_create.isra.0+0x58>)
   13cc4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   13cc8:	b085      	sub	sp, #20
   13cca:	4404      	add	r4, r0
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   13ccc:	460d      	mov	r5, r1
   13cce:	b181      	cbz	r1, 13cf2 <id_create.isra.0+0x32>
   13cd0:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   13cd2:	2207      	movs	r2, #7
   13cd4:	4669      	mov	r1, sp
   13cd6:	4628      	mov	r0, r5
   13cd8:	9300      	str	r3, [sp, #0]
   13cda:	f8cd 3003 	str.w	r3, [sp, #3]
   13cde:	f009 ff91 	bl	1dc04 <memcmp>
   13ce2:	b130      	cbz	r0, 13cf2 <id_create.isra.0+0x32>
	memcpy(dst, src, sizeof(*dst));
   13ce4:	2207      	movs	r2, #7
   13ce6:	4629      	mov	r1, r5
   13ce8:	4620      	mov	r0, r4
   13cea:	f009 ffb2 	bl	1dc52 <memcpy>
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
   13cee:	b005      	add	sp, #20
   13cf0:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
   13cf2:	a802      	add	r0, sp, #8
   13cf4:	f00a f834 	bl	1dd60 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
   13cf8:	a802      	add	r0, sp, #8
   13cfa:	f7ff ff99 	bl	13c30 <id_find>
   13cfe:	2800      	cmp	r0, #0
   13d00:	daf7      	bge.n	13cf2 <id_create.isra.0+0x32>
   13d02:	2207      	movs	r2, #7
   13d04:	a902      	add	r1, sp, #8
   13d06:	4620      	mov	r0, r4
   13d08:	f009 ffa3 	bl	1dc52 <memcpy>
		if (addr) {
   13d0c:	2d00      	cmp	r5, #0
   13d0e:	d0ee      	beq.n	13cee <id_create.isra.0+0x2e>
   13d10:	2207      	movs	r2, #7
   13d12:	4621      	mov	r1, r4
   13d14:	4628      	mov	r0, r5
   13d16:	e7e8      	b.n	13cea <id_create.isra.0+0x2a>
   13d18:	200002b8 	.word	0x200002b8

00013d1c <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   13d1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13d1e:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   13d20:	4605      	mov	r5, r0
   13d22:	b918      	cbnz	r0, 13d2c <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   13d24:	b1f4      	cbz	r4, 13d64 <bt_id_create+0x48>
		return -EINVAL;
   13d26:	f06f 0415 	mvn.w	r4, #21
   13d2a:	e018      	b.n	13d5e <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   13d2c:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   13d2e:	2207      	movs	r2, #7
   13d30:	4669      	mov	r1, sp
   13d32:	9300      	str	r3, [sp, #0]
   13d34:	f8cd 3003 	str.w	r3, [sp, #3]
   13d38:	f009 ff64 	bl	1dc04 <memcmp>
   13d3c:	2800      	cmp	r0, #0
   13d3e:	d0f1      	beq.n	13d24 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   13d40:	782b      	ldrb	r3, [r5, #0]
   13d42:	2b01      	cmp	r3, #1
   13d44:	d1ef      	bne.n	13d26 <bt_id_create+0xa>
   13d46:	79ab      	ldrb	r3, [r5, #6]
   13d48:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   13d4c:	2bc0      	cmp	r3, #192	; 0xc0
   13d4e:	d1ea      	bne.n	13d26 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   13d50:	4628      	mov	r0, r5
   13d52:	f7ff ff6d 	bl	13c30 <id_find>
   13d56:	2800      	cmp	r0, #0
   13d58:	dbe4      	blt.n	13d24 <bt_id_create+0x8>
			return -EALREADY;
   13d5a:	f06f 0477 	mvn.w	r4, #119	; 0x77

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
   13d5e:	4620      	mov	r0, r4
   13d60:	b002      	add	sp, #8
   13d62:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   13d64:	4e11      	ldr	r6, [pc, #68]	; (13dac <bt_id_create+0x90>)
   13d66:	79f3      	ldrb	r3, [r6, #7]
   13d68:	2b01      	cmp	r3, #1
   13d6a:	d01b      	beq.n	13da4 <bt_id_create+0x88>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13d6c:	f3bf 8f5b 	dmb	ish
   13d70:	f8d6 30cc 	ldr.w	r3, [r6, #204]	; 0xcc
   13d74:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13d78:	07db      	lsls	r3, r3, #31
   13d7a:	d40b      	bmi.n	13d94 <bt_id_create+0x78>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   13d7c:	2d00      	cmp	r5, #0
   13d7e:	d0d2      	beq.n	13d26 <bt_id_create+0xa>
   13d80:	2207      	movs	r2, #7
   13d82:	4669      	mov	r1, sp
   13d84:	4628      	mov	r0, r5
   13d86:	9400      	str	r4, [sp, #0]
   13d88:	f8cd 4003 	str.w	r4, [sp, #3]
   13d8c:	f009 ff3a 	bl	1dc04 <memcmp>
   13d90:	2800      	cmp	r0, #0
   13d92:	d0c8      	beq.n	13d26 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   13d94:	79f4      	ldrb	r4, [r6, #7]
	id_create(new_id, addr, irk);
   13d96:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   13d98:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
   13d9a:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   13d9c:	71f3      	strb	r3, [r6, #7]
	id_create(new_id, addr, irk);
   13d9e:	f7ff ff8f 	bl	13cc0 <id_create.isra.0>
	return new_id;
   13da2:	e7dc      	b.n	13d5e <bt_id_create+0x42>
		return -ENOMEM;
   13da4:	f06f 040b 	mvn.w	r4, #11
   13da8:	e7d9      	b.n	13d5e <bt_id_create+0x42>
   13daa:	bf00      	nop
   13dac:	200002b8 	.word	0x200002b8

00013db0 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   13db0:	b570      	push	{r4, r5, r6, lr}
   13db2:	b086      	sub	sp, #24
   13db4:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   13db6:	aa01      	add	r2, sp, #4
   13db8:	2100      	movs	r1, #0
   13dba:	f241 0009 	movw	r0, #4105	; 0x1009
   13dbe:	f7ff f9c7 	bl	13150 <bt_hci_cmd_send_sync>
	if (err) {
   13dc2:	4604      	mov	r4, r0
   13dc4:	b970      	cbnz	r0, 13de4 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   13dc6:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13dc8:	9002      	str	r0, [sp, #8]
   13dca:	689d      	ldr	r5, [r3, #8]
   13dcc:	f8ad 000c 	strh.w	r0, [sp, #12]
   13dd0:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   13dd2:	2206      	movs	r2, #6
   13dd4:	a902      	add	r1, sp, #8
   13dd6:	4628      	mov	r0, r5
   13dd8:	f009 ff14 	bl	1dc04 <memcmp>
   13ddc:	b920      	cbnz	r0, 13de8 <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   13dde:	9801      	ldr	r0, [sp, #4]
   13de0:	f002 fb0e 	bl	16400 <net_buf_unref>
		return 0U;
   13de4:	2000      	movs	r0, #0
   13de6:	e016      	b.n	13e16 <bt_id_read_public_addr+0x66>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   13de8:	4b0c      	ldr	r3, [pc, #48]	; (13e1c <bt_id_read_public_addr+0x6c>)
   13dea:	6818      	ldr	r0, [r3, #0]
   13dec:	9004      	str	r0, [sp, #16]
   13dee:	889b      	ldrh	r3, [r3, #4]
   13df0:	f8ad 3014 	strh.w	r3, [sp, #20]
   13df4:	2206      	movs	r2, #6
   13df6:	a904      	add	r1, sp, #16
   13df8:	4628      	mov	r0, r5
   13dfa:	f009 ff03 	bl	1dc04 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13dfe:	2800      	cmp	r0, #0
   13e00:	d0ed      	beq.n	13dde <bt_id_read_public_addr+0x2e>
	memcpy(dst, src, sizeof(*dst));
   13e02:	2206      	movs	r2, #6
   13e04:	4629      	mov	r1, r5
   13e06:	1c70      	adds	r0, r6, #1
   13e08:	f009 ff23 	bl	1dc52 <memcpy>
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
   13e0c:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   13e0e:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   13e10:	f002 faf6 	bl	16400 <net_buf_unref>
	return 1U;
   13e14:	2001      	movs	r0, #1
}
   13e16:	b006      	add	sp, #24
   13e18:	bd70      	pop	{r4, r5, r6, pc}
   13e1a:	bf00      	nop
   13e1c:	00020f27 	.word	0x00020f27

00013e20 <bt_setup_public_id_addr>:

void bt_setup_public_id_addr(void)
{
   13e20:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   13e22:	4668      	mov	r0, sp
   13e24:	f7ff ffc4 	bl	13db0 <bt_id_read_public_addr>
   13e28:	4b04      	ldr	r3, [pc, #16]	; (13e3c <bt_setup_public_id_addr+0x1c>)
   13e2a:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   13e2c:	b118      	cbz	r0, 13e36 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
   13e2e:	4669      	mov	r1, sp
   13e30:	2000      	movs	r0, #0
   13e32:	f7ff ff45 	bl	13cc0 <id_create.isra.0>
}
   13e36:	b003      	add	sp, #12
   13e38:	f85d fb04 	ldr.w	pc, [sp], #4
   13e3c:	200002b8 	.word	0x200002b8

00013e40 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   13e40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13e44:	4b15      	ldr	r3, [pc, #84]	; (13e9c <bt_read_static_addr+0x5c>)
   13e46:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   13e4a:	f014 0401 	ands.w	r4, r4, #1
{
   13e4e:	4607      	mov	r7, r0
   13e50:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13e52:	d015      	beq.n	13e80 <bt_read_static_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   13e54:	aa01      	add	r2, sp, #4
   13e56:	2100      	movs	r1, #0
   13e58:	f64f 4009 	movw	r0, #64521	; 0xfc09
   13e5c:	f7ff f978 	bl	13150 <bt_hci_cmd_send_sync>
	if (err) {
   13e60:	4605      	mov	r5, r0
   13e62:	b9c8      	cbnz	r0, 13e98 <bt_read_static_addr+0x58>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   13e64:	9b01      	ldr	r3, [sp, #4]
   13e66:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   13e68:	785c      	ldrb	r4, [r3, #1]
   13e6a:	42b4      	cmp	r4, r6
   13e6c:	bf28      	it	cs
   13e6e:	4634      	movcs	r4, r6
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   13e70:	f04f 0816 	mov.w	r8, #22
   13e74:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   13e76:	42a5      	cmp	r5, r4
   13e78:	db06      	blt.n	13e88 <bt_read_static_addr+0x48>
	}

	net_buf_unref(rsp);
   13e7a:	9801      	ldr	r0, [sp, #4]
   13e7c:	f002 fac0 	bl	16400 <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   13e80:	4620      	mov	r0, r4
   13e82:	b002      	add	sp, #8
   13e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   13e88:	fb08 7005 	mla	r0, r8, r5, r7
   13e8c:	2216      	movs	r2, #22
   13e8e:	4631      	mov	r1, r6
   13e90:	f009 fedf 	bl	1dc52 <memcpy>
	for (i = 0; i < cnt; i++) {
   13e94:	3501      	adds	r5, #1
   13e96:	e7ee      	b.n	13e76 <bt_read_static_addr+0x36>
		return 0;
   13e98:	2400      	movs	r4, #0
   13e9a:	e7f1      	b.n	13e80 <bt_read_static_addr+0x40>
   13e9c:	200002b8 	.word	0x200002b8

00013ea0 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   13ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   13ea2:	4d14      	ldr	r5, [pc, #80]	; (13ef4 <bt_setup_random_id_addr+0x54>)
   13ea4:	79ec      	ldrb	r4, [r5, #7]
{
   13ea6:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   13ea8:	b9f4      	cbnz	r4, 13ee8 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   13eaa:	2101      	movs	r1, #1
   13eac:	a802      	add	r0, sp, #8
   13eae:	f7ff ffc7 	bl	13e40 <bt_read_static_addr>
   13eb2:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   13eb4:	b1c0      	cbz	r0, 13ee8 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13eb6:	2716      	movs	r7, #22
   13eb8:	e00f      	b.n	13eda <bt_setup_random_id_addr+0x3a>
   13eba:	ab02      	add	r3, sp, #8
   13ebc:	fb07 3106 	mla	r1, r7, r6, r3
   13ec0:	2206      	movs	r2, #6
   13ec2:	f10d 0001 	add.w	r0, sp, #1
   13ec6:	f009 fec4 	bl	1dc52 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   13eca:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
   13ecc:	4669      	mov	r1, sp
   13ece:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   13ed0:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
   13ed4:	f7ff fef4 	bl	13cc0 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   13ed8:	3401      	adds	r4, #1
   13eda:	79eb      	ldrb	r3, [r5, #7]
   13edc:	b2e6      	uxtb	r6, r4
   13ede:	42b3      	cmp	r3, r6
   13ee0:	d8eb      	bhi.n	13eba <bt_setup_random_id_addr+0x1a>
			}

			return 0;
   13ee2:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   13ee4:	b009      	add	sp, #36	; 0x24
   13ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   13ee8:	2100      	movs	r1, #0
   13eea:	4608      	mov	r0, r1
   13eec:	f7ff ff16 	bl	13d1c <bt_id_create>
   13ef0:	e7f8      	b.n	13ee4 <bt_setup_random_id_addr+0x44>
   13ef2:	bf00      	nop
   13ef4:	200002b8 	.word	0x200002b8

00013ef8 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   13ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13efc:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   13f00:	7805      	ldrb	r5, [r0, #0]
{
   13f02:	460e      	mov	r6, r1
   13f04:	4690      	mov	r8, r2
   13f06:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13f08:	d026      	beq.n	13f58 <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   13f0a:	4c22      	ldr	r4, [pc, #136]	; (13f94 <bt_id_set_adv_own_addr+0x9c>)
   13f0c:	b12a      	cbz	r2, 13f1a <bt_id_set_adv_own_addr+0x22>
   13f0e:	0688      	lsls	r0, r1, #26
   13f10:	d503      	bpl.n	13f1a <bt_id_set_adv_own_addr+0x22>
   13f12:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   13f16:	0659      	lsls	r1, r3, #25
   13f18:	d539      	bpl.n	13f8e <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13f1a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   13f1e:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   13f22:	5ce3      	ldrb	r3, [r4, r3]
   13f24:	2b01      	cmp	r3, #1
   13f26:	d008      	beq.n	13f3a <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   13f28:	eba9 0505 	sub.w	r5, r9, r5
   13f2c:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   13f2e:	f1b8 0f00 	cmp.w	r8, #0
   13f32:	d10c      	bne.n	13f4e <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   13f34:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   13f36:	2000      	movs	r0, #0
   13f38:	e007      	b.n	13f4a <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   13f3a:	2007      	movs	r0, #7
   13f3c:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   13f40:	4420      	add	r0, r4
   13f42:	f7ff fe8f 	bl	13c64 <set_random_address>
				if (err) {
   13f46:	2800      	cmp	r0, #0
   13f48:	d0ee      	beq.n	13f28 <bt_id_set_adv_own_addr+0x30>
}
   13f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   13f4e:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   13f50:	bf48      	it	mi
   13f52:	f043 0302 	orrmi.w	r3, r3, #2
   13f56:	e7ed      	b.n	13f34 <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   13f58:	074b      	lsls	r3, r1, #29
   13f5a:	d514      	bpl.n	13f86 <bt_id_set_adv_own_addr+0x8e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13f5c:	4e0d      	ldr	r6, [pc, #52]	; (13f94 <bt_id_set_adv_own_addr+0x9c>)
   13f5e:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   13f62:	ea4f 08c5 	mov.w	r8, r5, lsl #3
   13f66:	5cf3      	ldrb	r3, [r6, r3]
   13f68:	2b01      	cmp	r3, #1
   13f6a:	d10a      	bne.n	13f82 <bt_id_set_adv_own_addr+0x8a>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   13f6c:	2007      	movs	r0, #7
   13f6e:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   13f72:	4430      	add	r0, r6
   13f74:	f7ff fe76 	bl	13c64 <set_random_address>
			*own_addr_type = id_addr->type;
   13f78:	eba8 0505 	sub.w	r5, r8, r5
   13f7c:	5d73      	ldrb	r3, [r6, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   13f7e:	703b      	strb	r3, [r7, #0]
		if (err) {
   13f80:	e7e3      	b.n	13f4a <bt_id_set_adv_own_addr+0x52>
	int err = 0;
   13f82:	4620      	mov	r0, r4
   13f84:	e7f8      	b.n	13f78 <bt_id_set_adv_own_addr+0x80>
			err = bt_id_set_adv_private_addr(adv);
   13f86:	f00a f97f 	bl	1e288 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   13f8a:	2301      	movs	r3, #1
   13f8c:	e7f7      	b.n	13f7e <bt_id_set_adv_own_addr+0x86>
			return -ENOTSUP;
   13f8e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13f92:	e7da      	b.n	13f4a <bt_id_set_adv_own_addr+0x52>
   13f94:	200002b8 	.word	0x200002b8

00013f98 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   13f98:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   13f9a:	4c09      	ldr	r4, [pc, #36]	; (13fc0 <bt_id_init+0x28>)
   13f9c:	79e3      	ldrb	r3, [r4, #7]
   13f9e:	b10b      	cbz	r3, 13fa4 <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   13fa0:	2000      	movs	r0, #0
}
   13fa2:	bd10      	pop	{r4, pc}
		bt_setup_public_id_addr();
   13fa4:	f7ff ff3c 	bl	13e20 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   13fa8:	79e3      	ldrb	r3, [r4, #7]
   13faa:	2b00      	cmp	r3, #0
   13fac:	d1f8      	bne.n	13fa0 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   13fae:	f7ff ff77 	bl	13ea0 <bt_setup_random_id_addr>
		if (err) {
   13fb2:	2800      	cmp	r0, #0
   13fb4:	d1f5      	bne.n	13fa2 <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
   13fb6:	1c60      	adds	r0, r4, #1
}
   13fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
   13fbc:	f7ff be52 	b.w	13c64 <set_random_address>
   13fc0:	200002b8 	.word	0x200002b8

00013fc4 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   13fc4:	6843      	ldr	r3, [r0, #4]
{
   13fc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13fc8:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   13fca:	0558      	lsls	r0, r3, #21
   13fcc:	d502      	bpl.n	13fd4 <valid_adv_param+0x10>
		return false;
   13fce:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   13fd0:	b003      	add	sp, #12
   13fd2:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   13fd4:	6922      	ldr	r2, [r4, #16]
   13fd6:	b10a      	cbz	r2, 13fdc <valid_adv_param+0x18>
   13fd8:	07d9      	lsls	r1, r3, #31
   13fda:	d5f8      	bpl.n	13fce <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   13fdc:	4d1a      	ldr	r5, [pc, #104]	; (14048 <valid_adv_param+0x84>)
   13fde:	7820      	ldrb	r0, [r4, #0]
   13fe0:	79eb      	ldrb	r3, [r5, #7]
   13fe2:	4283      	cmp	r3, r0
   13fe4:	d9f3      	bls.n	13fce <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   13fe6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   13fea:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   13fec:	2207      	movs	r2, #7
   13fee:	4669      	mov	r1, sp
   13ff0:	4428      	add	r0, r5
   13ff2:	9300      	str	r3, [sp, #0]
   13ff4:	f8cd 3003 	str.w	r3, [sp, #3]
   13ff8:	f009 fe04 	bl	1dc04 <memcmp>
	if (param->id >= bt_dev.id_count ||
   13ffc:	2800      	cmp	r0, #0
   13ffe:	d0e6      	beq.n	13fce <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   14000:	6860      	ldr	r0, [r4, #4]
   14002:	07c2      	lsls	r2, r0, #31
   14004:	d406      	bmi.n	14014 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   14006:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   1400a:	2b08      	cmp	r3, #8
   1400c:	d802      	bhi.n	14014 <valid_adv_param+0x50>
   1400e:	68a3      	ldr	r3, [r4, #8]
   14010:	2b9f      	cmp	r3, #159	; 0x9f
   14012:	d9dc      	bls.n	13fce <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   14014:	f010 0f30 	tst.w	r0, #48	; 0x30
   14018:	d002      	beq.n	14020 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   1401a:	6923      	ldr	r3, [r4, #16]
   1401c:	2b00      	cmp	r3, #0
   1401e:	d0d6      	beq.n	13fce <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   14020:	06c3      	lsls	r3, r0, #27
   14022:	d401      	bmi.n	14028 <valid_adv_param+0x64>
   14024:	6923      	ldr	r3, [r4, #16]
   14026:	b943      	cbnz	r3, 1403a <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   14028:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   1402c:	429a      	cmp	r2, r3
   1402e:	d8ce      	bhi.n	13fce <valid_adv_param+0xa>
   14030:	2a1f      	cmp	r2, #31
   14032:	d9cc      	bls.n	13fce <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   14034:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   14038:	d8c9      	bhi.n	13fce <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   1403a:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   1403e:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   14042:	bf18      	it	ne
   14044:	2001      	movne	r0, #1
   14046:	e7c3      	b.n	13fd0 <valid_adv_param+0xc>
   14048:	200002b8 	.word	0x200002b8

0001404c <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   1404c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   1404e:	4606      	mov	r6, r0
   14050:	4b1e      	ldr	r3, [pc, #120]	; (140cc <le_adv_start_add_conn+0x80>)
   14052:	f816 2b09 	ldrb.w	r2, [r6], #9
   14056:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   1405a:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1405c:	2300      	movs	r3, #0
{
   1405e:	4605      	mov	r5, r0
   14060:	2207      	movs	r2, #7
   14062:	460f      	mov	r7, r1
   14064:	4630      	mov	r0, r6
   14066:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   14068:	9300      	str	r3, [sp, #0]
   1406a:	f8cd 3003 	str.w	r3, [sp, #3]
   1406e:	f009 fdc9 	bl	1dc04 <memcmp>
   14072:	782a      	ldrb	r2, [r5, #0]
   14074:	4604      	mov	r4, r0
   14076:	b9a8      	cbnz	r0, 140a4 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   14078:	4b15      	ldr	r3, [pc, #84]	; (140d0 <le_adv_start_add_conn+0x84>)
   1407a:	6818      	ldr	r0, [r3, #0]
   1407c:	8899      	ldrh	r1, [r3, #4]
   1407e:	9002      	str	r0, [sp, #8]
   14080:	799b      	ldrb	r3, [r3, #6]
   14082:	f8ad 100c 	strh.w	r1, [sp, #12]
   14086:	4610      	mov	r0, r2
   14088:	a902      	add	r1, sp, #8
   1408a:	f88d 300e 	strb.w	r3, [sp, #14]
   1408e:	f000 fc7d 	bl	1498c <bt_conn_add_le>
		if (!conn) {
   14092:	4605      	mov	r5, r0
   14094:	b1b8      	cbz	r0, 140c6 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   14096:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   14098:	f000 fb62 	bl	14760 <bt_conn_set_state>
	*out_conn = conn;
   1409c:	603d      	str	r5, [r7, #0]
	return 0;
}
   1409e:	4620      	mov	r0, r4
   140a0:	b005      	add	sp, #20
   140a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   140a4:	4631      	mov	r1, r6
   140a6:	4610      	mov	r0, r2
   140a8:	f00a fb5f 	bl	1e76a <bt_conn_exists_le>
   140ac:	4604      	mov	r4, r0
   140ae:	b938      	cbnz	r0, 140c0 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   140b0:	7828      	ldrb	r0, [r5, #0]
   140b2:	4631      	mov	r1, r6
   140b4:	f000 fc6a 	bl	1498c <bt_conn_add_le>
	if (!conn) {
   140b8:	4605      	mov	r5, r0
   140ba:	b120      	cbz	r0, 140c6 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   140bc:	2105      	movs	r1, #5
   140be:	e7eb      	b.n	14098 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   140c0:	f06f 0415 	mvn.w	r4, #21
   140c4:	e7eb      	b.n	1409e <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   140c6:	f06f 040b 	mvn.w	r4, #11
   140ca:	e7e8      	b.n	1409e <le_adv_start_add_conn+0x52>
   140cc:	200002b8 	.word	0x200002b8
   140d0:	00020f2d 	.word	0x00020f2d

000140d4 <bt_le_adv_lookup_legacy>:
}
   140d4:	4800      	ldr	r0, [pc, #0]	; (140d8 <bt_le_adv_lookup_legacy+0x4>)
   140d6:	4770      	bx	lr
   140d8:	200002d0 	.word	0x200002d0

000140dc <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   140dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   140e0:	690e      	ldr	r6, [r1, #16]
{
   140e2:	b08f      	sub	sp, #60	; 0x3c
   140e4:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   140e6:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
   140e8:	ebb6 0b03 	subs.w	fp, r6, r3
{
   140ec:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   140ee:	4889      	ldr	r0, [pc, #548]	; (14314 <bt_le_adv_start_legacy+0x238>)
	struct bt_conn *conn = NULL;
   140f0:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable;
   140f2:	bf18      	it	ne
   140f4:	f04f 0b01 	movne.w	fp, #1
{
   140f8:	460c      	mov	r4, r1
   140fa:	4691      	mov	r9, r2
   140fc:	f00a f8e7 	bl	1e2ce <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14100:	0787      	lsls	r7, r0, #30
   14102:	f140 80fc 	bpl.w	142fe <bt_le_adv_start_legacy+0x222>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   14106:	4608      	mov	r0, r1
   14108:	f7ff ff5c 	bl	13fc4 <valid_adv_param>
   1410c:	b928      	cbnz	r0, 1411a <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   1410e:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   14112:	4658      	mov	r0, fp
   14114:	b00f      	add	sp, #60	; 0x3c
   14116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   1411a:	4620      	mov	r0, r4
   1411c:	f00a f8c6 	bl	1e2ac <bt_id_adv_random_addr_check>
   14120:	4680      	mov	r8, r0
   14122:	2800      	cmp	r0, #0
   14124:	d0f3      	beq.n	1410e <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   14126:	f105 0710 	add.w	r7, r5, #16
   1412a:	4638      	mov	r0, r7
   1412c:	f00a f8cf 	bl	1e2ce <atomic_get>
   14130:	f3c0 1180 	ubfx	r1, r0, #6, #1
   14134:	0640      	lsls	r0, r0, #25
   14136:	f100 80e5 	bmi.w	14304 <bt_le_adv_start_legacy+0x228>
	(void)memset(&set_param, 0, sizeof(set_param));
   1413a:	220f      	movs	r2, #15
   1413c:	a80a      	add	r0, sp, #40	; 0x28
   1413e:	9105      	str	r1, [sp, #20]
   14140:	f009 fd92 	bl	1dc68 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   14144:	68a3      	ldr	r3, [r4, #8]
   14146:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   1414a:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   1414c:	68e3      	ldr	r3, [r4, #12]
   1414e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   14152:	f00a f8ad 	bl	1e2b0 <get_adv_channel_map>
	if (adv->id != param->id) {
   14156:	782a      	ldrb	r2, [r5, #0]
   14158:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   1415a:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
   1415c:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   14160:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   14162:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   14166:	d004      	beq.n	14172 <bt_le_adv_start_legacy+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14168:	486a      	ldr	r0, [pc, #424]	; (14314 <bt_le_adv_start_legacy+0x238>)
   1416a:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   1416e:	f00a f8b4 	bl	1e2da <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   14172:	4a69      	ldr	r2, [pc, #420]	; (14318 <bt_le_adv_start_legacy+0x23c>)
	adv->id = param->id;
   14174:	7823      	ldrb	r3, [r4, #0]
   14176:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   14178:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   1417c:	6861      	ldr	r1, [r4, #4]
   1417e:	465a      	mov	r2, fp
   14180:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   14184:	4628      	mov	r0, r5
   14186:	f7ff feb7 	bl	13ef8 <bt_id_set_adv_own_addr>
	if (err) {
   1418a:	4683      	mov	fp, r0
   1418c:	2800      	cmp	r0, #0
   1418e:	d1c0      	bne.n	14112 <bt_le_adv_start_legacy+0x36>
	if (dir_adv) {
   14190:	f105 0009 	add.w	r0, r5, #9
   14194:	2e00      	cmp	r6, #0
   14196:	d042      	beq.n	1421e <bt_le_adv_start_legacy+0x142>
	memcpy(dst, src, sizeof(*dst));
   14198:	6921      	ldr	r1, [r4, #16]
   1419a:	2207      	movs	r2, #7
   1419c:	f009 fd59 	bl	1dc52 <memcpy>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   141a0:	6860      	ldr	r0, [r4, #4]
   141a2:	07c1      	lsls	r1, r0, #31
   141a4:	d544      	bpl.n	14230 <bt_le_adv_start_legacy+0x154>
		if (dir_adv) {
   141a6:	2e00      	cmp	r6, #0
   141a8:	d03f      	beq.n	1422a <bt_le_adv_start_legacy+0x14e>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   141aa:	f010 0f10 	tst.w	r0, #16
   141ae:	bf14      	ite	ne
   141b0:	2304      	movne	r3, #4
   141b2:	2301      	moveq	r3, #1
   141b4:	6921      	ldr	r1, [r4, #16]
   141b6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   141ba:	2207      	movs	r2, #7
   141bc:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   141c0:	f009 fd47 	bl	1dc52 <memcpy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   141c4:	210f      	movs	r1, #15
   141c6:	f242 0006 	movw	r0, #8198	; 0x2006
   141ca:	f7fe ff89 	bl	130e0 <bt_hci_cmd_create>
	if (!buf) {
   141ce:	4683      	mov	fp, r0
   141d0:	2800      	cmp	r0, #0
   141d2:	f000 809a 	beq.w	1430a <bt_le_adv_start_legacy+0x22e>
   141d6:	220f      	movs	r2, #15
   141d8:	a90a      	add	r1, sp, #40	; 0x28
   141da:	3008      	adds	r0, #8
   141dc:	f00b fc9d 	bl	1fb1a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   141e0:	2200      	movs	r2, #0
   141e2:	4659      	mov	r1, fp
   141e4:	f242 0006 	movw	r0, #8198	; 0x2006
   141e8:	f7fe ffb2 	bl	13150 <bt_hci_cmd_send_sync>
	if (err) {
   141ec:	2800      	cmp	r0, #0
   141ee:	f040 808f 	bne.w	14310 <bt_le_adv_start_legacy+0x234>
	if (!dir_adv) {
   141f2:	b34e      	cbz	r6, 14248 <bt_le_adv_start_legacy+0x16c>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   141f4:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   141f6:	07da      	lsls	r2, r3, #31
   141f8:	d43a      	bmi.n	14270 <bt_le_adv_start_legacy+0x194>
	return bt_le_adv_set_enable_legacy(adv, enable);
   141fa:	2101      	movs	r1, #1
   141fc:	4628      	mov	r0, r5
   141fe:	f00a f974 	bl	1e4ea <bt_le_adv_set_enable_legacy>
	if (err) {
   14202:	4683      	mov	fp, r0
   14204:	9807      	ldr	r0, [sp, #28]
   14206:	f1bb 0f00 	cmp.w	fp, #0
   1420a:	d072      	beq.n	142f2 <bt_le_adv_start_legacy+0x216>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1420c:	2800      	cmp	r0, #0
   1420e:	d080      	beq.n	14112 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14210:	2100      	movs	r1, #0
   14212:	f000 faa5 	bl	14760 <bt_conn_set_state>
			bt_conn_unref(conn);
   14216:	9807      	ldr	r0, [sp, #28]
   14218:	f00a fa40 	bl	1e69c <bt_conn_unref>
   1421c:	e779      	b.n	14112 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   1421e:	9608      	str	r6, [sp, #32]
   14220:	2207      	movs	r2, #7
   14222:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
   14226:	a908      	add	r1, sp, #32
   14228:	e7b8      	b.n	1419c <bt_le_adv_start_legacy+0xc0>
			set_param.type = BT_HCI_ADV_IND;
   1422a:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   1422e:	e7c9      	b.n	141c4 <bt_le_adv_start_legacy+0xe8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   14230:	9b18      	ldr	r3, [sp, #96]	; 0x60
   14232:	b933      	cbnz	r3, 14242 <bt_le_adv_start_legacy+0x166>
   14234:	f3c0 08c0 	ubfx	r8, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   14238:	f1c8 0303 	rsb	r3, r8, #3
   1423c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   14240:	e7c0      	b.n	141c4 <bt_le_adv_start_legacy+0xe8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   14242:	f04f 0801 	mov.w	r8, #1
   14246:	e7f7      	b.n	14238 <bt_le_adv_start_legacy+0x15c>
   14248:	6863      	ldr	r3, [r4, #4]
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   1424a:	f3c3 4280 	ubfx	r2, r3, #18, #1
   1424e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   14252:	e9cd 8301 	strd	r8, r3, [sp, #4]
   14256:	9b19      	ldr	r3, [sp, #100]	; 0x64
   14258:	9203      	str	r2, [sp, #12]
   1425a:	9300      	str	r3, [sp, #0]
   1425c:	4652      	mov	r2, sl
   1425e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   14260:	4649      	mov	r1, r9
   14262:	4628      	mov	r0, r5
   14264:	f00a f8c0 	bl	1e3e8 <le_adv_update.constprop.0>
		if (err) {
   14268:	4683      	mov	fp, r0
   1426a:	2800      	cmp	r0, #0
   1426c:	d0c2      	beq.n	141f4 <bt_le_adv_start_legacy+0x118>
   1426e:	e750      	b.n	14112 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   14270:	a907      	add	r1, sp, #28
   14272:	4628      	mov	r0, r5
   14274:	f7ff feea 	bl	1404c <le_adv_start_add_conn>
		if (err) {
   14278:	4683      	mov	fp, r0
   1427a:	2800      	cmp	r0, #0
   1427c:	d0bd      	beq.n	141fa <bt_le_adv_start_legacy+0x11e>
			if (err == -ENOMEM && !dir_adv &&
   1427e:	f110 0f0c 	cmn.w	r0, #12
   14282:	f47f af46 	bne.w	14112 <bt_le_adv_start_legacy+0x36>
   14286:	2e00      	cmp	r6, #0
   14288:	f47f af43 	bne.w	14112 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   1428c:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   1428e:	079b      	lsls	r3, r3, #30
   14290:	f53f af3f 	bmi.w	14112 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   14294:	6860      	ldr	r0, [r4, #4]
   14296:	f080 0002 	eor.w	r0, r0, #2
   1429a:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   1429e:	f00b 0201 	and.w	r2, fp, #1
   142a2:	210c      	movs	r1, #12
   142a4:	4638      	mov	r0, r7
   142a6:	f00a f888 	bl	1e3ba <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   142aa:	6862      	ldr	r2, [r4, #4]
   142ac:	2107      	movs	r1, #7
   142ae:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   142b2:	4638      	mov	r0, r7
   142b4:	f00a f881 	bl	1e3ba <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_FORCE_NAME_IN_AD,
   142b8:	6862      	ldr	r2, [r4, #4]
   142ba:	2112      	movs	r1, #18
   142bc:	f3c2 4280 	ubfx	r2, r2, #18, #1
   142c0:	4638      	mov	r0, r7
   142c2:	f00a f87a 	bl	1e3ba <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   142c6:	6862      	ldr	r2, [r4, #4]
   142c8:	2108      	movs	r1, #8
   142ca:	f002 0201 	and.w	r2, r2, #1
   142ce:	4638      	mov	r0, r7
   142d0:	f00a f873 	bl	1e3ba <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   142d4:	4642      	mov	r2, r8
   142d6:	2109      	movs	r1, #9
   142d8:	4638      	mov	r0, r7
   142da:	f00a f86e 	bl	1e3ba <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   142de:	6862      	ldr	r2, [r4, #4]
   142e0:	210b      	movs	r1, #11
   142e2:	f3c2 0280 	ubfx	r2, r2, #2, #1
   142e6:	4638      	mov	r0, r7
   142e8:	f00a f867 	bl	1e3ba <atomic_set_bit_to>
	return 0;
   142ec:	f04f 0b00 	mov.w	fp, #0
   142f0:	e70f      	b.n	14112 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   142f2:	b108      	cbz	r0, 142f8 <bt_le_adv_start_legacy+0x21c>
		bt_conn_unref(conn);
   142f4:	f00a f9d2 	bl	1e69c <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   142f8:	2e00      	cmp	r6, #0
   142fa:	d1d0      	bne.n	1429e <bt_le_adv_start_legacy+0x1c2>
   142fc:	e7ca      	b.n	14294 <bt_le_adv_start_legacy+0x1b8>
		return -EAGAIN;
   142fe:	f06f 0b0a 	mvn.w	fp, #10
   14302:	e706      	b.n	14112 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   14304:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   14308:	e703      	b.n	14112 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   1430a:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   1430e:	e700      	b.n	14112 <bt_le_adv_start_legacy+0x36>
   14310:	4683      	mov	fp, r0
   14312:	e6fe      	b.n	14112 <bt_le_adv_start_legacy+0x36>
   14314:	20000384 	.word	0x20000384
   14318:	200002b8 	.word	0x200002b8

0001431c <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   1431c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1431e:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   14320:	9a06      	ldr	r2, [sp, #24]
{
   14322:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   14324:	e9cd 3200 	strd	r3, r2, [sp]
   14328:	462b      	mov	r3, r5
   1432a:	460a      	mov	r2, r1
   1432c:	4601      	mov	r1, r0
   1432e:	4811      	ldr	r0, [pc, #68]	; (14374 <bt_le_adv_start+0x58>)
   14330:	f7ff fed4 	bl	140dc <bt_le_adv_start_legacy>
   14334:	4621      	mov	r1, r4
   14336:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   14338:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   1433a:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   1433e:	429d      	cmp	r5, r3
   14340:	d102      	bne.n	14348 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   14342:	4630      	mov	r0, r6
   14344:	b002      	add	sp, #8
   14346:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   14348:	880a      	ldrh	r2, [r1, #0]
   1434a:	4282      	cmp	r2, r0
   1434c:	d104      	bne.n	14358 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   1434e:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   14350:	b112      	cbz	r2, 14358 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   14352:	7812      	ldrb	r2, [r2, #0]
   14354:	07d2      	lsls	r2, r2, #31
   14356:	d402      	bmi.n	1435e <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   14358:	3301      	adds	r3, #1
   1435a:	3108      	adds	r1, #8
   1435c:	e7ef      	b.n	1433e <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   1435e:	4906      	ldr	r1, [pc, #24]	; (14378 <bt_le_adv_start+0x5c>)
   14360:	4806      	ldr	r0, [pc, #24]	; (1437c <bt_le_adv_start+0x60>)
   14362:	f00c f8a2 	bl	204aa <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   14366:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1436a:	2300      	movs	r3, #0
   1436c:	4803      	ldr	r0, [pc, #12]	; (1437c <bt_le_adv_start+0x60>)
   1436e:	f004 fef5 	bl	1915c <k_work_reschedule>
   14372:	e7e6      	b.n	14342 <bt_le_adv_start+0x26>
   14374:	200002d0 	.word	0x200002d0
   14378:	0001e53b 	.word	0x0001e53b
   1437c:	200002e8 	.word	0x200002e8

00014380 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   14380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   14382:	4821      	ldr	r0, [pc, #132]	; (14408 <bt_le_adv_stop+0x88>)
   14384:	f00a f8d6 	bl	1e534 <bt_le_lim_adv_cancel_timeout>
   14388:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   1438c:	481f      	ldr	r0, [pc, #124]	; (1440c <bt_le_adv_stop+0x8c>)
   1438e:	f009 ffa4 	bl	1e2da <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14392:	481e      	ldr	r0, [pc, #120]	; (1440c <bt_le_adv_stop+0x8c>)
   14394:	f009 ff9b 	bl	1e2ce <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   14398:	0642      	lsls	r2, r0, #25
   1439a:	f3c0 1380 	ubfx	r3, r0, #6, #1
   1439e:	d530      	bpl.n	14402 <bt_le_adv_stop+0x82>
   143a0:	481a      	ldr	r0, [pc, #104]	; (1440c <bt_le_adv_stop+0x8c>)
   143a2:	f009 ff94 	bl	1e2ce <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   143a6:	05c3      	lsls	r3, r0, #23
   143a8:	d521      	bpl.n	143ee <bt_le_adv_stop+0x6e>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   143aa:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   143ac:	4818      	ldr	r0, [pc, #96]	; (14410 <bt_le_adv_stop+0x90>)
   143ae:	9300      	str	r3, [sp, #0]
   143b0:	2207      	movs	r2, #7
   143b2:	4669      	mov	r1, sp
   143b4:	f8cd 3003 	str.w	r3, [sp, #3]
   143b8:	f009 fc24 	bl	1dc04 <memcmp>
   143bc:	4b15      	ldr	r3, [pc, #84]	; (14414 <bt_le_adv_stop+0x94>)
   143be:	b9e0      	cbnz	r0, 143fa <bt_le_adv_stop+0x7a>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   143c0:	4a15      	ldr	r2, [pc, #84]	; (14418 <bt_le_adv_stop+0x98>)
   143c2:	8891      	ldrh	r1, [r2, #4]
   143c4:	6810      	ldr	r0, [r2, #0]
   143c6:	7992      	ldrb	r2, [r2, #6]
   143c8:	f8ad 100c 	strh.w	r1, [sp, #12]
   143cc:	f88d 200e 	strb.w	r2, [sp, #14]
   143d0:	9002      	str	r0, [sp, #8]
   143d2:	2204      	movs	r2, #4
   143d4:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   143d6:	7e18      	ldrb	r0, [r3, #24]
   143d8:	f000 fb10 	bl	149fc <bt_conn_lookup_state_le>
   143dc:	4604      	mov	r4, r0
	if (conn) {
   143de:	b130      	cbz	r0, 143ee <bt_le_adv_stop+0x6e>
		conn->err = status;
   143e0:	2100      	movs	r1, #0
   143e2:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   143e4:	f000 f9bc 	bl	14760 <bt_conn_set_state>
		bt_conn_unref(conn);
   143e8:	4620      	mov	r0, r4
   143ea:	f00a f957 	bl	1e69c <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   143ee:	4806      	ldr	r0, [pc, #24]	; (14408 <bt_le_adv_stop+0x88>)
   143f0:	2100      	movs	r1, #0
   143f2:	f00a f87a 	bl	1e4ea <bt_le_adv_set_enable_legacy>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   143f6:	b004      	add	sp, #16
   143f8:	bd10      	pop	{r4, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   143fa:	2205      	movs	r2, #5
   143fc:	f103 0121 	add.w	r1, r3, #33	; 0x21
   14400:	e7e9      	b.n	143d6 <bt_le_adv_stop+0x56>
		return 0;
   14402:	4618      	mov	r0, r3
   14404:	e7f7      	b.n	143f6 <bt_le_adv_stop+0x76>
   14406:	bf00      	nop
   14408:	200002d0 	.word	0x200002d0
   1440c:	200002e0 	.word	0x200002e0
   14410:	200002d9 	.word	0x200002d9
   14414:	200002b8 	.word	0x200002b8
   14418:	00020f2d 	.word	0x00020f2d

0001441c <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   1441c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1441e:	481e      	ldr	r0, [pc, #120]	; (14498 <bt_le_adv_resume+0x7c>)
   14420:	4c1d      	ldr	r4, [pc, #116]	; (14498 <bt_le_adv_resume+0x7c>)
   14422:	f009 ff54 	bl	1e2ce <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   14426:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   1442a:	d032      	beq.n	14492 <bt_le_adv_resume+0x76>
   1442c:	4620      	mov	r0, r4
   1442e:	f009 ff4e 	bl	1e2ce <atomic_get>
   14432:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14434:	f3c0 1580 	ubfx	r5, r0, #6, #1
   14438:	d42b      	bmi.n	14492 <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1443a:	4620      	mov	r0, r4
   1443c:	f009 ff47 	bl	1e2ce <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   14440:	05c3      	lsls	r3, r0, #23
   14442:	d526      	bpl.n	14492 <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   14444:	a901      	add	r1, sp, #4
   14446:	f1a4 0010 	sub.w	r0, r4, #16
   1444a:	f7ff fdff 	bl	1404c <le_adv_start_add_conn>
	if (err) {
   1444e:	bb00      	cbnz	r0, 14492 <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
   14450:	2101      	movs	r1, #1
   14452:	f1a4 0010 	sub.w	r0, r4, #16
   14456:	f00a f848 	bl	1e4ea <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
   1445a:	b150      	cbz	r0, 14472 <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1445c:	4629      	mov	r1, r5
   1445e:	9801      	ldr	r0, [sp, #4]
   14460:	f000 f97e 	bl	14760 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14464:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   14468:	4620      	mov	r0, r4
   1446a:	f009 ff36 	bl	1e2da <atomic_and>
	return (old & mask) != 0;
   1446e:	f3c0 3500 	ubfx	r5, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   14472:	9801      	ldr	r0, [sp, #4]
   14474:	f00a f912 	bl	1e69c <bt_conn_unref>
	if (persist_paused) {
   14478:	b15d      	cbz	r5, 14492 <bt_le_adv_resume+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1447a:	f3bf 8f5b 	dmb	ish
   1447e:	e854 3f00 	ldrex	r3, [r4]
   14482:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   14486:	e844 3200 	strex	r2, r3, [r4]
   1448a:	2a00      	cmp	r2, #0
   1448c:	d1f7      	bne.n	1447e <bt_le_adv_resume+0x62>
   1448e:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   14492:	b003      	add	sp, #12
   14494:	bd30      	pop	{r4, r5, pc}
   14496:	bf00      	nop
   14498:	200002e0 	.word	0x200002e0

0001449c <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   1449c:	2300      	movs	r3, #0
	tx->user_data = NULL;
   1449e:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   144a2:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   144a4:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   144a6:	4801      	ldr	r0, [pc, #4]	; (144ac <tx_free+0x10>)
   144a8:	f00b bf11 	b.w	202ce <k_queue_append>
   144ac:	20000880 	.word	0x20000880

000144b0 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   144b0:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   144b2:	4b09      	ldr	r3, [pc, #36]	; (144d8 <notify_connected+0x28>)
   144b4:	681d      	ldr	r5, [r3, #0]
{
   144b6:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   144b8:	7a61      	ldrb	r1, [r4, #9]
   144ba:	b92d      	cbnz	r5, 144c8 <notify_connected+0x18>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	if (!conn->err) {
   144bc:	b951      	cbnz	r1, 144d4 <notify_connected+0x24>
		bt_gatt_connected(conn);
   144be:	4620      	mov	r0, r4
	}
}
   144c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   144c4:	f001 be4a 	b.w	1615c <bt_gatt_connected>
		if (cb->connected) {
   144c8:	682b      	ldr	r3, [r5, #0]
   144ca:	b10b      	cbz	r3, 144d0 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   144cc:	4620      	mov	r0, r4
   144ce:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   144d0:	692d      	ldr	r5, [r5, #16]
   144d2:	e7f1      	b.n	144b8 <notify_connected+0x8>
}
   144d4:	bd38      	pop	{r3, r4, r5, pc}
   144d6:	bf00      	nop
   144d8:	200022ec 	.word	0x200022ec

000144dc <send_frag>:
{
   144dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   144e0:	694d      	ldr	r5, [r1, #20]
{
   144e2:	4604      	mov	r4, r0
   144e4:	460e      	mov	r6, r1
   144e6:	4690      	mov	r8, r2
   144e8:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   144ea:	f04f 33ff 	mov.w	r3, #4294967295
   144ee:	483f      	ldr	r0, [pc, #252]	; (145ec <send_frag+0x110>)
   144f0:	f04f 32ff 	mov.w	r2, #4294967295
   144f4:	f004 fc44 	bl	18d80 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   144f8:	7aa3      	ldrb	r3, [r4, #10]
   144fa:	2b07      	cmp	r3, #7
   144fc:	d146      	bne.n	1458c <send_frag+0xb0>
	__asm__ volatile(
   144fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   14502:	f3ef 8211 	mrs	r2, BASEPRI
   14506:	f383 8811 	msr	BASEPRI, r3
   1450a:	f3bf 8f6f 	isb	sy
	if (tx) {
   1450e:	2d00      	cmp	r5, #0
   14510:	d04e      	beq.n	145b0 <send_frag+0xd4>
	parent->next = child;
   14512:	2300      	movs	r3, #0
   14514:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   14516:	69a3      	ldr	r3, [r4, #24]
   14518:	2b00      	cmp	r3, #0
   1451a:	d146      	bne.n	145aa <send_frag+0xce>
	list->head = node;
   1451c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   14520:	f382 8811 	msr	BASEPRI, r2
   14524:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   14528:	2104      	movs	r1, #4
   1452a:	f106 0008 	add.w	r0, r6, #8
   1452e:	f00b fb05 	bl	1fb3c <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   14532:	8823      	ldrh	r3, [r4, #0]
   14534:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   14538:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1453c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1453e:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   14542:	3b04      	subs	r3, #4
   14544:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14546:	2302      	movs	r3, #2
   14548:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   1454a:	4630      	mov	r0, r6
   1454c:	f7ff f828 	bl	135a0 <bt_send>
	if (err) {
   14550:	2800      	cmp	r0, #0
   14552:	d049      	beq.n	145e8 <send_frag+0x10c>
	__asm__ volatile(
   14554:	f04f 0340 	mov.w	r3, #64	; 0x40
   14558:	f3ef 8111 	mrs	r1, BASEPRI
   1455c:	f383 8811 	msr	BASEPRI, r3
   14560:	f3bf 8f6f 	isb	sy
		if (tx) {
   14564:	2d00      	cmp	r5, #0
   14566:	d039      	beq.n	145dc <send_frag+0x100>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14568:	6963      	ldr	r3, [r4, #20]
   1456a:	2200      	movs	r2, #0
   1456c:	b153      	cbz	r3, 14584 <send_frag+0xa8>
   1456e:	429d      	cmp	r5, r3
   14570:	d131      	bne.n	145d6 <send_frag+0xfa>
Z_GENLIST_REMOVE(slist, snode)
   14572:	682b      	ldr	r3, [r5, #0]
   14574:	bb4a      	cbnz	r2, 145ca <send_frag+0xee>
   14576:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   14578:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   1457a:	4295      	cmp	r5, r2
   1457c:	d100      	bne.n	14580 <send_frag+0xa4>
	list->tail = node;
   1457e:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   14580:	2300      	movs	r3, #0
   14582:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   14584:	f381 8811 	msr	BASEPRI, r1
   14588:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1458c:	4817      	ldr	r0, [pc, #92]	; (145ec <send_frag+0x110>)
   1458e:	f004 fbd1 	bl	18d34 <z_impl_k_sem_give>
	if (tx) {
   14592:	b115      	cbz	r5, 1459a <send_frag+0xbe>
		tx_free(tx);
   14594:	4628      	mov	r0, r5
   14596:	f7ff ff81 	bl	1449c <tx_free>
	if (always_consume) {
   1459a:	b11f      	cbz	r7, 145a4 <send_frag+0xc8>
		net_buf_unref(buf);
   1459c:	4630      	mov	r0, r6
   1459e:	f001 ff2f 	bl	16400 <net_buf_unref>
	return false;
   145a2:	2700      	movs	r7, #0
}
   145a4:	4638      	mov	r0, r7
   145a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   145aa:	601d      	str	r5, [r3, #0]
	list->tail = node;
   145ac:	61a5      	str	r5, [r4, #24]
}
   145ae:	e7b7      	b.n	14520 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   145b0:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   145b2:	b133      	cbz	r3, 145c2 <send_frag+0xe6>
			pending_no_cb = &tail_tx->pending_no_cb;
   145b4:	f103 090c 	add.w	r9, r3, #12
   145b8:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   145ba:	3301      	adds	r3, #1
   145bc:	f8c9 3000 	str.w	r3, [r9]
   145c0:	e7ae      	b.n	14520 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   145c2:	69e3      	ldr	r3, [r4, #28]
   145c4:	f104 091c 	add.w	r9, r4, #28
   145c8:	e7f7      	b.n	145ba <send_frag+0xde>
	parent->next = child;
   145ca:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   145cc:	69a3      	ldr	r3, [r4, #24]
   145ce:	429d      	cmp	r5, r3
	list->tail = node;
   145d0:	bf08      	it	eq
   145d2:	61a2      	streq	r2, [r4, #24]
}
   145d4:	e7d4      	b.n	14580 <send_frag+0xa4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   145d6:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   145d8:	681b      	ldr	r3, [r3, #0]
   145da:	e7c7      	b.n	1456c <send_frag+0x90>
			(*pending_no_cb)--;
   145dc:	f8d9 3000 	ldr.w	r3, [r9]
   145e0:	3b01      	subs	r3, #1
   145e2:	f8c9 3000 	str.w	r3, [r9]
   145e6:	e7cd      	b.n	14584 <send_frag+0xa8>
	return true;
   145e8:	2701      	movs	r7, #1
   145ea:	e7db      	b.n	145a4 <send_frag+0xc8>
   145ec:	200003b8 	.word	0x200003b8

000145f0 <bt_conn_get_pkts>:
}
   145f0:	4800      	ldr	r0, [pc, #0]	; (145f4 <bt_conn_get_pkts+0x4>)
   145f2:	4770      	bx	lr
   145f4:	200003b8 	.word	0x200003b8

000145f8 <bt_conn_new>:
{
   145f8:	b538      	push	{r3, r4, r5, lr}
   145fa:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   145fc:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   145fe:	2501      	movs	r5, #1
   14600:	428b      	cmp	r3, r1
   14602:	d102      	bne.n	1460a <bt_conn_new+0x12>
		return NULL;
   14604:	2400      	movs	r4, #0
}
   14606:	4620      	mov	r0, r4
   14608:	bd38      	pop	{r3, r4, r5, pc}
   1460a:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   1460e:	f3bf 8f5b 	dmb	ish
   14612:	e852 0f00 	ldrex	r0, [r2]
   14616:	2800      	cmp	r0, #0
   14618:	d104      	bne.n	14624 <bt_conn_new+0x2c>
   1461a:	e842 5c00 	strex	ip, r5, [r2]
   1461e:	f1bc 0f00 	cmp.w	ip, #0
   14622:	d1f6      	bne.n	14612 <bt_conn_new+0x1a>
   14624:	f3bf 8f5b 	dmb	ish
   14628:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1462c:	d002      	beq.n	14634 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   1462e:	3301      	adds	r3, #1
   14630:	4604      	mov	r4, r0
   14632:	e7e5      	b.n	14600 <bt_conn_new+0x8>
	if (!conn) {
   14634:	2c00      	cmp	r4, #0
   14636:	d0e6      	beq.n	14606 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   14638:	22b8      	movs	r2, #184	; 0xb8
   1463a:	2100      	movs	r1, #0
   1463c:	4620      	mov	r0, r4
   1463e:	f009 fb13 	bl	1dc68 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   14642:	f104 0058 	add.w	r0, r4, #88	; 0x58
   14646:	4904      	ldr	r1, [pc, #16]	; (14658 <bt_conn_new+0x60>)
   14648:	f00b ff2f 	bl	204aa <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   1464c:	4903      	ldr	r1, [pc, #12]	; (1465c <bt_conn_new+0x64>)
   1464e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   14652:	f00b ff04 	bl	2045e <k_work_init>
	return conn;
   14656:	e7d6      	b.n	14606 <bt_conn_new+0xe>
   14658:	00014aa1 	.word	0x00014aa1
   1465c:	0001e585 	.word	0x0001e585

00014660 <bt_conn_send_cb>:
{
   14660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14662:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   14664:	7a83      	ldrb	r3, [r0, #10]
   14666:	2b07      	cmp	r3, #7
{
   14668:	4604      	mov	r4, r0
   1466a:	460d      	mov	r5, r1
   1466c:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   1466e:	d114      	bne.n	1469a <bt_conn_send_cb+0x3a>
	if (cb) {
   14670:	b312      	cbz	r2, 146b8 <bt_conn_send_cb+0x58>
	return z_impl_k_current_get();
   14672:	f005 f87d 	bl	19770 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   14676:	4b13      	ldr	r3, [pc, #76]	; (146c4 <bt_conn_send_cb+0x64>)
   14678:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1467a:	4813      	ldr	r0, [pc, #76]	; (146c8 <bt_conn_send_cb+0x68>)
   1467c:	bf07      	ittee	eq
   1467e:	2200      	moveq	r2, #0
   14680:	2300      	moveq	r3, #0
   14682:	f04f 32ff 	movne.w	r2, #4294967295
   14686:	f04f 33ff 	movne.w	r3, #4294967295
   1468a:	f004 fb1f 	bl	18ccc <z_impl_k_queue_get>
		if (!tx) {
   1468e:	b1a8      	cbz	r0, 146bc <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
   14690:	7aa3      	ldrb	r3, [r4, #10]
   14692:	2b07      	cmp	r3, #7
   14694:	d004      	beq.n	146a0 <bt_conn_send_cb+0x40>
			tx_free(tx);
   14696:	f7ff ff01 	bl	1449c <tx_free>
		return -ENOTCONN;
   1469a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1469e:	e00a      	b.n	146b6 <bt_conn_send_cb+0x56>
		tx->pending_no_cb = 0U;
   146a0:	2300      	movs	r3, #0
		tx->user_data = user_data;
   146a2:	e9c0 6701 	strd	r6, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   146a6:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   146a8:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   146aa:	f104 0038 	add.w	r0, r4, #56	; 0x38
   146ae:	4629      	mov	r1, r5
   146b0:	f00b f9fa 	bl	1faa8 <net_buf_put>
	return 0;
   146b4:	2000      	movs	r0, #0
}
   146b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_data(buf)->tx = NULL;
   146b8:	614a      	str	r2, [r1, #20]
   146ba:	e7f6      	b.n	146aa <bt_conn_send_cb+0x4a>
			return -ENOBUFS;
   146bc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   146c0:	e7f9      	b.n	146b6 <bt_conn_send_cb+0x56>
   146c2:	bf00      	nop
   146c4:	20001bf0 	.word	0x20001bf0
   146c8:	20000880 	.word	0x20000880

000146cc <bt_conn_prepare_events>:
{
   146cc:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0U;
   146ce:	4b1b      	ldr	r3, [pc, #108]	; (1473c <bt_conn_prepare_events+0x70>)
   146d0:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   146d2:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
   146d4:	609a      	str	r2, [r3, #8]
{
   146d6:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   146d8:	f00c f9d2 	bl	20a80 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   146dc:	f3bf 8f5b 	dmb	ish
   146e0:	4b17      	ldr	r3, [pc, #92]	; (14740 <bt_conn_prepare_events+0x74>)
   146e2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   146e6:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   146ea:	f104 0014 	add.w	r0, r4, #20
   146ee:	4619      	mov	r1, r3
	if (!atomic_get(&conn->ref)) {
   146f0:	b90a      	cbnz	r2, 146f6 <bt_conn_prepare_events+0x2a>
		conn_cleanup(conn);
   146f2:	2001      	movs	r0, #1
}
   146f4:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   146f6:	7a9a      	ldrb	r2, [r3, #10]
   146f8:	b99a      	cbnz	r2, 14722 <bt_conn_prepare_events+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   146fa:	f3bf 8f5b 	dmb	ish
   146fe:	1d1a      	adds	r2, r3, #4
   14700:	e852 5f00 	ldrex	r5, [r2]
   14704:	f025 0c40 	bic.w	ip, r5, #64	; 0x40
   14708:	e842 ce00 	strex	lr, ip, [r2]
   1470c:	f1be 0f00 	cmp.w	lr, #0
   14710:	d1f6      	bne.n	14700 <bt_conn_prepare_events+0x34>
   14712:	f3bf 8f5b 	dmb	ish
   14716:	066a      	lsls	r2, r5, #25
   14718:	d503      	bpl.n	14722 <bt_conn_prepare_events+0x56>
		conn_cleanup(conn);
   1471a:	4618      	mov	r0, r3
   1471c:	f009 ff3e 	bl	1e59c <conn_cleanup>
   14720:	e7e7      	b.n	146f2 <bt_conn_prepare_events+0x26>
	if (conn->state != BT_CONN_CONNECTED) {
   14722:	7a8b      	ldrb	r3, [r1, #10]
   14724:	2b07      	cmp	r3, #7
   14726:	d1e4      	bne.n	146f2 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[0],
   14728:	4b06      	ldr	r3, [pc, #24]	; (14744 <bt_conn_prepare_events+0x78>)
   1472a:	2200      	movs	r2, #0
   1472c:	2104      	movs	r1, #4
   1472e:	f00c f9a7 	bl	20a80 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   14732:	2301      	movs	r3, #1
   14734:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   14738:	2002      	movs	r0, #2
	return ev_count;
   1473a:	e7db      	b.n	146f4 <bt_conn_prepare_events+0x28>
   1473c:	20000554 	.word	0x20000554
   14740:	200016a0 	.word	0x200016a0
   14744:	200016d8 	.word	0x200016d8

00014748 <bt_conn_lookup_handle>:
{
   14748:	4602      	mov	r2, r0
   1474a:	b508      	push	{r3, lr}
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1474c:	2101      	movs	r1, #1
   1474e:	4803      	ldr	r0, [pc, #12]	; (1475c <bt_conn_lookup_handle+0x14>)
   14750:	f009 ffbe 	bl	1e6d0 <conn_lookup_handle>
}
   14754:	2800      	cmp	r0, #0
   14756:	bf38      	it	cc
   14758:	2000      	movcc	r0, #0
   1475a:	bd08      	pop	{r3, pc}
   1475c:	200016a0 	.word	0x200016a0

00014760 <bt_conn_set_state>:
{
   14760:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   14762:	7a85      	ldrb	r5, [r0, #10]
   14764:	428d      	cmp	r5, r1
{
   14766:	4604      	mov	r4, r0
	if (conn->state == state) {
   14768:	f000 809f 	beq.w	148aa <bt_conn_set_state+0x14a>
	conn->state = state;
   1476c:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   1476e:	b925      	cbnz	r5, 1477a <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
   14770:	7883      	ldrb	r3, [r0, #2]
   14772:	2b08      	cmp	r3, #8
   14774:	d001      	beq.n	1477a <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
   14776:	f009 ff76 	bl	1e666 <bt_conn_ref>
	switch (conn->state) {
   1477a:	7aa3      	ldrb	r3, [r4, #10]
   1477c:	2b01      	cmp	r3, #1
   1477e:	d116      	bne.n	147ae <bt_conn_set_state+0x4e>
	z_impl_k_sem_give(sem);
   14780:	4d4a      	ldr	r5, [pc, #296]	; (148ac <bt_conn_set_state+0x14c>)
		tx->pending_no_cb = 0U;
   14782:	2600      	movs	r6, #0
	__asm__ volatile(
   14784:	f04f 0340 	mov.w	r3, #64	; 0x40
   14788:	f3ef 8211 	mrs	r2, BASEPRI
   1478c:	f383 8811 	msr	BASEPRI, r3
   14790:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   14794:	69e3      	ldr	r3, [r4, #28]
   14796:	2b00      	cmp	r3, #0
   14798:	d068      	beq.n	1486c <bt_conn_set_state+0x10c>
			conn->pending_no_cb--;
   1479a:	3b01      	subs	r3, #1
   1479c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1479e:	f382 8811 	msr	BASEPRI, r2
   147a2:	f3bf 8f6f 	isb	sy
   147a6:	4628      	mov	r0, r5
   147a8:	f004 fac4 	bl	18d34 <z_impl_k_sem_give>
}
   147ac:	e7ea      	b.n	14784 <bt_conn_set_state+0x24>
	switch (conn->state) {
   147ae:	2b07      	cmp	r3, #7
   147b0:	d00b      	beq.n	147ca <bt_conn_set_state+0x6a>
   147b2:	2b00      	cmp	r3, #0
   147b4:	d179      	bne.n	148aa <bt_conn_set_state+0x14a>
		if (conn->type == BT_CONN_TYPE_ISO) {
   147b6:	78a3      	ldrb	r3, [r4, #2]
   147b8:	2b08      	cmp	r3, #8
   147ba:	d076      	beq.n	148aa <bt_conn_set_state+0x14a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   147bc:	2b04      	cmp	r3, #4
   147be:	d11e      	bne.n	147fe <bt_conn_set_state+0x9e>
			bt_conn_unref(conn);
   147c0:	4620      	mov	r0, r4
}
   147c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   147c6:	f009 bf69 	b.w	1e69c <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
   147ca:	78a3      	ldrb	r3, [r4, #2]
   147cc:	2b04      	cmp	r3, #4
   147ce:	d06c      	beq.n	148aa <bt_conn_set_state+0x14a>
	z_impl_k_queue_init(queue);
   147d0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   147d4:	f00b fd6f 	bl	202b6 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   147d8:	4835      	ldr	r0, [pc, #212]	; (148b0 <bt_conn_set_state+0x150>)
   147da:	2100      	movs	r1, #0
   147dc:	f005 fa16 	bl	19c0c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   147e0:	2300      	movs	r3, #0
	list->tail = NULL;
   147e2:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   147e6:	78e3      	ldrb	r3, [r4, #3]
   147e8:	2b01      	cmp	r3, #1
   147ea:	d15e      	bne.n	148aa <bt_conn_set_state+0x14a>
			k_work_schedule(&conn->deferred_work,
   147ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
   147f0:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   147f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   147f8:	2300      	movs	r3, #0
   147fa:	f004 bc7b 	b.w	190f4 <k_work_schedule>
		switch (old_state) {
   147fe:	3d01      	subs	r5, #1
   14800:	2d05      	cmp	r5, #5
   14802:	d852      	bhi.n	148aa <bt_conn_set_state+0x14a>
   14804:	a301      	add	r3, pc, #4	; (adr r3, 1480c <bt_conn_set_state+0xac>)
   14806:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   1480a:	bf00      	nop
   1480c:	00014825 	.word	0x00014825
   14810:	0001485f 	.word	0x0001485f
   14814:	000147c1 	.word	0x000147c1
   14818:	000147c1 	.word	0x000147c1
   1481c:	0001485f 	.word	0x0001485f
   14820:	0001485f 	.word	0x0001485f
			tx_notify(conn);
   14824:	4620      	mov	r0, r4
   14826:	f009 fe8a 	bl	1e53e <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   1482a:	78a3      	ldrb	r3, [r4, #2]
   1482c:	2b01      	cmp	r3, #1
   1482e:	d103      	bne.n	14838 <bt_conn_set_state+0xd8>
				k_work_cancel_delayable(&conn->deferred_work);
   14830:	f104 0058 	add.w	r0, r4, #88	; 0x58
   14834:	f00b fe45 	bl	204c2 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14838:	f3bf 8f5b 	dmb	ish
   1483c:	3404      	adds	r4, #4
   1483e:	e854 3f00 	ldrex	r3, [r4]
   14842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14846:	e844 3200 	strex	r2, r3, [r4]
   1484a:	2a00      	cmp	r2, #0
   1484c:	d1f7      	bne.n	1483e <bt_conn_set_state+0xde>
   1484e:	f3bf 8f5b 	dmb	ish
   14852:	4817      	ldr	r0, [pc, #92]	; (148b0 <bt_conn_set_state+0x150>)
}
   14854:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14858:	2100      	movs	r1, #0
   1485a:	f005 b9d7 	b.w	19c0c <z_impl_k_poll_signal_raise>
			if (conn->err) {
   1485e:	7a63      	ldrb	r3, [r4, #9]
   14860:	2b00      	cmp	r3, #0
   14862:	d0ad      	beq.n	147c0 <bt_conn_set_state+0x60>
				notify_connected(conn);
   14864:	4620      	mov	r0, r4
   14866:	f7ff fe23 	bl	144b0 <notify_connected>
   1486a:	e7a9      	b.n	147c0 <bt_conn_set_state+0x60>
Z_GENLIST_IS_EMPTY(slist)
   1486c:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1486e:	b128      	cbz	r0, 1487c <bt_conn_set_state+0x11c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14870:	69a1      	ldr	r1, [r4, #24]
   14872:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   14874:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14876:	4288      	cmp	r0, r1
	list->tail = node;
   14878:	bf08      	it	eq
   1487a:	61a3      	streq	r3, [r4, #24]
   1487c:	f382 8811 	msr	BASEPRI, r2
   14880:	f3bf 8f6f 	isb	sy
		if (!node) {
   14884:	b188      	cbz	r0, 148aa <bt_conn_set_state+0x14a>
	__asm__ volatile(
   14886:	f04f 0240 	mov.w	r2, #64	; 0x40
   1488a:	f3ef 8311 	mrs	r3, BASEPRI
   1488e:	f382 8811 	msr	BASEPRI, r2
   14892:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   14896:	68c2      	ldr	r2, [r0, #12]
   14898:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   1489a:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   1489c:	f383 8811 	msr	BASEPRI, r3
   148a0:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   148a4:	f7ff fdfa 	bl	1449c <tx_free>
   148a8:	e77d      	b.n	147a6 <bt_conn_set_state+0x46>
}
   148aa:	bd70      	pop	{r4, r5, r6, pc}
   148ac:	200003b8 	.word	0x200003b8
   148b0:	20000554 	.word	0x20000554

000148b4 <bt_conn_index>:
		index = conn - acl_conns;
   148b4:	4b03      	ldr	r3, [pc, #12]	; (148c4 <bt_conn_index+0x10>)
   148b6:	1ac0      	subs	r0, r0, r3
   148b8:	4b03      	ldr	r3, [pc, #12]	; (148c8 <bt_conn_index+0x14>)
   148ba:	1180      	asrs	r0, r0, #6
   148bc:	4358      	muls	r0, r3
}
   148be:	b2c0      	uxtb	r0, r0
   148c0:	4770      	bx	lr
   148c2:	bf00      	nop
   148c4:	200016a0 	.word	0x200016a0
   148c8:	aaaaaaab 	.word	0xaaaaaaab

000148cc <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   148cc:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   148ce:	f3bf 8f5b 	dmb	ish
   148d2:	6842      	ldr	r2, [r0, #4]
   148d4:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send slave conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   148d8:	0592      	lsls	r2, r2, #22
{
   148da:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   148dc:	f100 0304 	add.w	r3, r0, #4
   148e0:	d519      	bpl.n	14916 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   148e2:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   148e6:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
   148ea:	4291      	cmp	r1, r2
   148ec:	d813      	bhi.n	14916 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   148ee:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
   148f2:	4291      	cmp	r1, r2
   148f4:	d30f      	bcc.n	14916 <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   148f6:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
   148fa:	4291      	cmp	r1, r2
   148fc:	d10b      	bne.n	14916 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   148fe:	f3bf 8f5b 	dmb	ish
   14902:	e853 2f00 	ldrex	r2, [r3]
   14906:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   1490a:	e843 2100 	strex	r1, r2, [r3]
   1490e:	2900      	cmp	r1, #0
   14910:	d1f7      	bne.n	14902 <notify_le_param_updated+0x36>
   14912:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   14916:	4b08      	ldr	r3, [pc, #32]	; (14938 <notify_le_param_updated+0x6c>)
   14918:	681d      	ldr	r5, [r3, #0]
   1491a:	b905      	cbnz	r5, 1491e <notify_le_param_updated+0x52>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   1491c:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   1491e:	68ee      	ldr	r6, [r5, #12]
   14920:	b13e      	cbz	r6, 14932 <notify_le_param_updated+0x66>
			cb->le_param_updated(conn, conn->le.interval,
   14922:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   14926:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1492a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1492e:	4620      	mov	r0, r4
   14930:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   14932:	692d      	ldr	r5, [r5, #16]
   14934:	e7f1      	b.n	1491a <notify_le_param_updated+0x4e>
   14936:	bf00      	nop
   14938:	200022ec 	.word	0x200022ec

0001493c <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   1493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1493e:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   14940:	4608      	mov	r0, r1
{
   14942:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   14944:	f009 fb39 	bl	1dfba <bt_le_conn_params_valid>
   14948:	4604      	mov	r4, r0
   1494a:	b910      	cbnz	r0, 14952 <le_param_req+0x16>
		return false;
   1494c:	2400      	movs	r4, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   1494e:	4620      	mov	r0, r4
   14950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   14952:	4b09      	ldr	r3, [pc, #36]	; (14978 <le_param_req+0x3c>)
   14954:	681e      	ldr	r6, [r3, #0]
   14956:	2e00      	cmp	r6, #0
   14958:	d0f9      	beq.n	1494e <le_param_req+0x12>
		if (!cb->le_param_req) {
   1495a:	68b3      	ldr	r3, [r6, #8]
   1495c:	b90b      	cbnz	r3, 14962 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   1495e:	6936      	ldr	r6, [r6, #16]
   14960:	e7f9      	b.n	14956 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   14962:	4629      	mov	r1, r5
   14964:	4638      	mov	r0, r7
   14966:	4798      	blx	r3
   14968:	2800      	cmp	r0, #0
   1496a:	d0ef      	beq.n	1494c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   1496c:	4628      	mov	r0, r5
   1496e:	f009 fb24 	bl	1dfba <bt_le_conn_params_valid>
   14972:	2800      	cmp	r0, #0
   14974:	d1f3      	bne.n	1495e <le_param_req+0x22>
   14976:	e7e9      	b.n	1494c <le_param_req+0x10>
   14978:	200022ec 	.word	0x200022ec

0001497c <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   1497c:	4b02      	ldr	r3, [pc, #8]	; (14988 <bt_conn_cb_register+0xc>)
   1497e:	681a      	ldr	r2, [r3, #0]
   14980:	6102      	str	r2, [r0, #16]
	callback_list = cb;
   14982:	6018      	str	r0, [r3, #0]
}
   14984:	4770      	bx	lr
   14986:	bf00      	nop
   14988:	200022ec 	.word	0x200022ec

0001498c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   1498c:	b570      	push	{r4, r5, r6, lr}
   1498e:	4606      	mov	r6, r0
   14990:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   14992:	4809      	ldr	r0, [pc, #36]	; (149b8 <bt_conn_add_le+0x2c>)
   14994:	2101      	movs	r1, #1
   14996:	f7ff fe2f 	bl	145f8 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   1499a:	4604      	mov	r4, r0
   1499c:	b150      	cbz	r0, 149b4 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
   1499e:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   149a0:	2207      	movs	r2, #7
   149a2:	4629      	mov	r1, r5
   149a4:	3088      	adds	r0, #136	; 0x88
   149a6:	f009 f954 	bl	1dc52 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   149aa:	2301      	movs	r3, #1
   149ac:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   149ae:	4b03      	ldr	r3, [pc, #12]	; (149bc <bt_conn_add_le+0x30>)
   149b0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   149b4:	4620      	mov	r0, r4
   149b6:	bd70      	pop	{r4, r5, r6, pc}
   149b8:	200016a0 	.word	0x200016a0
   149bc:	00280018 	.word	0x00280018

000149c0 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   149c0:	b570      	push	{r4, r5, r6, lr}
   149c2:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   149c4:	480c      	ldr	r0, [pc, #48]	; (149f8 <bt_conn_lookup_addr_le+0x38>)
{
   149c6:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   149c8:	f009 fe4d 	bl	1e666 <bt_conn_ref>

		if (!conn) {
   149cc:	4604      	mov	r4, r0
   149ce:	b128      	cbz	r0, 149dc <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   149d0:	7883      	ldrb	r3, [r0, #2]
   149d2:	2b01      	cmp	r3, #1
   149d4:	d004      	beq.n	149e0 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   149d6:	f009 fe61 	bl	1e69c <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   149da:	2400      	movs	r4, #0
}
   149dc:	4620      	mov	r0, r4
   149de:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   149e0:	4629      	mov	r1, r5
   149e2:	4632      	mov	r2, r6
   149e4:	f009 fea1 	bl	1e72a <bt_conn_is_peer_addr_le>
   149e8:	4605      	mov	r5, r0
   149ea:	2800      	cmp	r0, #0
   149ec:	d1f6      	bne.n	149dc <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   149ee:	4620      	mov	r0, r4
   149f0:	f009 fe54 	bl	1e69c <bt_conn_unref>
	return NULL;
   149f4:	462c      	mov	r4, r5
			continue;
   149f6:	e7f1      	b.n	149dc <bt_conn_lookup_addr_le+0x1c>
   149f8:	200016a0 	.word	0x200016a0

000149fc <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   149fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   149fe:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   14a00:	480e      	ldr	r0, [pc, #56]	; (14a3c <bt_conn_lookup_state_le+0x40>)
{
   14a02:	460e      	mov	r6, r1
   14a04:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   14a06:	f009 fe2e 	bl	1e666 <bt_conn_ref>

		if (!conn) {
   14a0a:	4604      	mov	r4, r0
   14a0c:	b1a0      	cbz	r0, 14a38 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   14a0e:	7883      	ldrb	r3, [r0, #2]
   14a10:	2b01      	cmp	r3, #1
   14a12:	d003      	beq.n	14a1c <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   14a14:	f009 fe42 	bl	1e69c <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   14a18:	2400      	movs	r4, #0
			continue;
   14a1a:	e00d      	b.n	14a38 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   14a1c:	b136      	cbz	r6, 14a2c <bt_conn_lookup_state_le+0x30>
   14a1e:	4632      	mov	r2, r6
   14a20:	4629      	mov	r1, r5
   14a22:	f009 fe82 	bl	1e72a <bt_conn_is_peer_addr_le>
   14a26:	b908      	cbnz	r0, 14a2c <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   14a28:	4620      	mov	r0, r4
   14a2a:	e7f3      	b.n	14a14 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   14a2c:	7aa3      	ldrb	r3, [r4, #10]
   14a2e:	42bb      	cmp	r3, r7
   14a30:	d1fa      	bne.n	14a28 <bt_conn_lookup_state_le+0x2c>
   14a32:	7a23      	ldrb	r3, [r4, #8]
   14a34:	42ab      	cmp	r3, r5
   14a36:	d1f7      	bne.n	14a28 <bt_conn_lookup_state_le+0x2c>
}
   14a38:	4620      	mov	r0, r4
   14a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14a3c:	200016a0 	.word	0x200016a0

00014a40 <send_conn_le_param_update>:
{
   14a40:	b538      	push	{r3, r4, r5, lr}
   14a42:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   14a44:	4608      	mov	r0, r1
{
   14a46:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   14a48:	f009 fab7 	bl	1dfba <bt_le_conn_params_valid>
   14a4c:	b318      	cbz	r0, 14a96 <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   14a4e:	4b13      	ldr	r3, [pc, #76]	; (14a9c <send_conn_le_param_update+0x5c>)
   14a50:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   14a54:	0799      	lsls	r1, r3, #30
   14a56:	d407      	bmi.n	14a68 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   14a58:	78e3      	ldrb	r3, [r4, #3]
   14a5a:	b183      	cbz	r3, 14a7e <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   14a5c:	4629      	mov	r1, r5
   14a5e:	4620      	mov	r0, r4
}
   14a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   14a64:	f000 b9aa 	b.w	14dbc <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   14a68:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   14a6c:	079a      	lsls	r2, r3, #30
   14a6e:	d5f3      	bpl.n	14a58 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14a70:	f3bf 8f5b 	dmb	ish
   14a74:	6863      	ldr	r3, [r4, #4]
   14a76:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   14a7a:	055b      	lsls	r3, r3, #21
   14a7c:	d4ec      	bmi.n	14a58 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   14a7e:	4629      	mov	r1, r5
   14a80:	4620      	mov	r0, r4
   14a82:	f009 fe7a 	bl	1e77a <bt_conn_le_conn_update>
		if (rc == 0) {
   14a86:	b928      	cbnz	r0, 14a94 <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
   14a88:	88ab      	ldrh	r3, [r5, #4]
   14a8a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   14a8e:	88eb      	ldrh	r3, [r5, #6]
   14a90:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   14a94:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   14a96:	f06f 0015 	mvn.w	r0, #21
   14a9a:	e7fb      	b.n	14a94 <send_conn_le_param_update+0x54>
   14a9c:	200002b8 	.word	0x200002b8

00014aa0 <deferred_work>:
{
   14aa0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   14aa2:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   14aa6:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   14aa8:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   14aac:	b993      	cbnz	r3, 14ad4 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
   14aae:	4630      	mov	r0, r6
   14ab0:	f009 fee8 	bl	1e884 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   14ab4:	4b1f      	ldr	r3, [pc, #124]	; (14b34 <deferred_work+0x94>)
   14ab6:	681d      	ldr	r5, [r3, #0]
   14ab8:	b925      	cbnz	r5, 14ac4 <deferred_work+0x24>
		bt_conn_unref(conn);
   14aba:	4630      	mov	r0, r6
   14abc:	f009 fdee 	bl	1e69c <bt_conn_unref>
}
   14ac0:	b002      	add	sp, #8
   14ac2:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
   14ac4:	686b      	ldr	r3, [r5, #4]
   14ac6:	b11b      	cbz	r3, 14ad0 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
   14ac8:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   14acc:	4630      	mov	r0, r6
   14ace:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14ad0:	692d      	ldr	r5, [r5, #16]
   14ad2:	e7f1      	b.n	14ab8 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   14ad4:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   14ad8:	2b01      	cmp	r3, #1
   14ada:	d1f1      	bne.n	14ac0 <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14adc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   14ae0:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
   14ae4:	e855 3f00 	ldrex	r3, [r5]
   14ae8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   14aec:	e845 2100 	strex	r1, r2, [r5]
   14af0:	2900      	cmp	r1, #0
   14af2:	d1f7      	bne.n	14ae4 <deferred_work+0x44>
   14af4:	f3bf 8f5b 	dmb	ish
   14af8:	059b      	lsls	r3, r3, #22
   14afa:	d514      	bpl.n	14b26 <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   14afc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   14afe:	9300      	str	r3, [sp, #0]
   14b00:	6d23      	ldr	r3, [r4, #80]	; 0x50
   14b02:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   14b04:	4669      	mov	r1, sp
   14b06:	4630      	mov	r0, r6
   14b08:	f7ff ff9a 	bl	14a40 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14b0c:	f3bf 8f5b 	dmb	ish
   14b10:	e855 3f00 	ldrex	r3, [r5]
   14b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   14b18:	e845 3200 	strex	r2, r3, [r5]
   14b1c:	2a00      	cmp	r2, #0
   14b1e:	d1f7      	bne.n	14b10 <deferred_work+0x70>
   14b20:	f3bf 8f5b 	dmb	ish
   14b24:	e7cc      	b.n	14ac0 <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
   14b26:	4a04      	ldr	r2, [pc, #16]	; (14b38 <deferred_work+0x98>)
   14b28:	6810      	ldr	r0, [r2, #0]
   14b2a:	6851      	ldr	r1, [r2, #4]
   14b2c:	466b      	mov	r3, sp
   14b2e:	c303      	stmia	r3!, {r0, r1}
   14b30:	e7e8      	b.n	14b04 <deferred_work+0x64>
   14b32:	bf00      	nop
   14b34:	200022ec 	.word	0x200022ec
   14b38:	00020f18 	.word	0x00020f18

00014b3c <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   14b3c:	b538      	push	{r3, r4, r5, lr}
   14b3e:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   14b40:	4906      	ldr	r1, [pc, #24]	; (14b5c <bt_conn_create_pdu_timeout+0x20>)
   14b42:	2800      	cmp	r0, #0
   14b44:	bf08      	it	eq
   14b46:	4608      	moveq	r0, r1
   14b48:	f00a ff8b 	bl	1fa62 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   14b4c:	4604      	mov	r4, r0
   14b4e:	b118      	cbz	r0, 14b58 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
   14b50:	1d29      	adds	r1, r5, #4
   14b52:	3008      	adds	r0, #8
   14b54:	f00a ffa4 	bl	1faa0 <net_buf_simple_reserve>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   14b58:	4620      	mov	r0, r4
   14b5a:	bd38      	pop	{r3, r4, r5, pc}
   14b5c:	20000898 	.word	0x20000898

00014b60 <bt_conn_create_frag_timeout>:
{
   14b60:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   14b62:	4801      	ldr	r0, [pc, #4]	; (14b68 <bt_conn_create_frag_timeout+0x8>)
   14b64:	f7ff bfea 	b.w	14b3c <bt_conn_create_pdu_timeout>
   14b68:	200008e8 	.word	0x200008e8

00014b6c <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   14b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b70:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   14b72:	f04f 33ff 	mov.w	r3, #4294967295
   14b76:	f04f 32ff 	mov.w	r2, #4294967295
   14b7a:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   14b7c:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   14b7e:	f7ff ffef 	bl	14b60 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   14b82:	7833      	ldrb	r3, [r6, #0]
   14b84:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   14b86:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   14b88:	f04f 0600 	mov.w	r6, #0
   14b8c:	d005      	beq.n	14b9a <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   14b8e:	f001 fc37 	bl	16400 <net_buf_unref>
		return NULL;
   14b92:	4635      	mov	r5, r6
}
   14b94:	4628      	mov	r0, r5
   14b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   14b9a:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   14b9c:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   14ba0:	4e0c      	ldr	r6, [pc, #48]	; (14bd4 <create_frag.isra.0+0x68>)
   14ba2:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   14ba4:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   14ba8:	f00a ffec 	bl	1fb84 <net_buf_simple_tailroom>
   14bac:	4580      	cmp	r8, r0
   14bae:	d20c      	bcs.n	14bca <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   14bb0:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14bb4:	f854 1f08 	ldr.w	r1, [r4, #8]!
   14bb8:	4632      	mov	r2, r6
   14bba:	4638      	mov	r0, r7
   14bbc:	f00a ffad 	bl	1fb1a <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   14bc0:	4631      	mov	r1, r6
   14bc2:	4620      	mov	r0, r4
   14bc4:	f00a ffc2 	bl	1fb4c <net_buf_simple_pull>
   14bc8:	e7e4      	b.n	14b94 <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
   14bca:	4638      	mov	r0, r7
   14bcc:	f00a ffda 	bl	1fb84 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   14bd0:	b286      	uxth	r6, r0
   14bd2:	e7ef      	b.n	14bb4 <create_frag.isra.0+0x48>
   14bd4:	200002b8 	.word	0x200002b8

00014bd8 <bt_conn_process_tx>:
{
   14bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   14bda:	7a83      	ldrb	r3, [r0, #10]
{
   14bdc:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   14bde:	b993      	cbnz	r3, 14c06 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14be0:	f3bf 8f5b 	dmb	ish
   14be4:	1d03      	adds	r3, r0, #4
   14be6:	e853 2f00 	ldrex	r2, [r3]
   14bea:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   14bee:	e843 1400 	strex	r4, r1, [r3]
   14bf2:	2c00      	cmp	r4, #0
   14bf4:	d1f7      	bne.n	14be6 <bt_conn_process_tx+0xe>
   14bf6:	f3bf 8f5b 	dmb	ish
   14bfa:	0653      	lsls	r3, r2, #25
   14bfc:	d503      	bpl.n	14c06 <bt_conn_process_tx+0x2e>
}
   14bfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   14c02:	f009 bccb 	b.w	1e59c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   14c06:	2200      	movs	r2, #0
   14c08:	2300      	movs	r3, #0
   14c0a:	f105 0038 	add.w	r0, r5, #56	; 0x38
   14c0e:	f00a ff2d 	bl	1fa6c <net_buf_get>
	BT_ASSERT(buf);
   14c12:	4604      	mov	r4, r0
   14c14:	b960      	cbnz	r0, 14c30 <bt_conn_process_tx+0x58>
   14c16:	4a20      	ldr	r2, [pc, #128]	; (14c98 <bt_conn_process_tx+0xc0>)
   14c18:	4920      	ldr	r1, [pc, #128]	; (14c9c <bt_conn_process_tx+0xc4>)
   14c1a:	4821      	ldr	r0, [pc, #132]	; (14ca0 <bt_conn_process_tx+0xc8>)
   14c1c:	f240 23c6 	movw	r3, #710	; 0x2c6
   14c20:	f008 f8e9 	bl	1cdf6 <printk>
   14c24:	4040      	eors	r0, r0
   14c26:	f380 8811 	msr	BASEPRI, r0
   14c2a:	f04f 0003 	mov.w	r0, #3
   14c2e:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   14c30:	4f1c      	ldr	r7, [pc, #112]	; (14ca4 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   14c32:	89a1      	ldrh	r1, [r4, #12]
   14c34:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
   14c38:	4291      	cmp	r1, r2
   14c3a:	d807      	bhi.n	14c4c <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   14c3c:	2300      	movs	r3, #0
   14c3e:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   14c40:	4621      	mov	r1, r4
   14c42:	4628      	mov	r0, r5
   14c44:	f7ff fc4a 	bl	144dc <send_frag>
	if (!send_buf(conn, buf)) {
   14c48:	b140      	cbz	r0, 14c5c <bt_conn_process_tx+0x84>
}
   14c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   14c4c:	f105 060a 	add.w	r6, r5, #10
   14c50:	4621      	mov	r1, r4
   14c52:	4630      	mov	r0, r6
   14c54:	f7ff ff8a 	bl	14b6c <create_frag.isra.0>
	if (!frag) {
   14c58:	4601      	mov	r1, r0
   14c5a:	b920      	cbnz	r0, 14c66 <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   14c5c:	4620      	mov	r0, r4
}
   14c5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   14c62:	f001 bbcd 	b.w	16400 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   14c66:	2301      	movs	r3, #1
   14c68:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   14c6a:	4628      	mov	r0, r5
   14c6c:	f7ff fc36 	bl	144dc <send_frag>
   14c70:	2800      	cmp	r0, #0
   14c72:	d0f3      	beq.n	14c5c <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   14c74:	89a2      	ldrh	r2, [r4, #12]
   14c76:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
   14c7a:	429a      	cmp	r2, r3
   14c7c:	d802      	bhi.n	14c84 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   14c7e:	2300      	movs	r3, #0
   14c80:	2203      	movs	r2, #3
   14c82:	e7dd      	b.n	14c40 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   14c84:	4621      	mov	r1, r4
   14c86:	4630      	mov	r0, r6
   14c88:	f7ff ff70 	bl	14b6c <create_frag.isra.0>
		if (!frag) {
   14c8c:	4601      	mov	r1, r0
   14c8e:	2800      	cmp	r0, #0
   14c90:	d0e4      	beq.n	14c5c <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   14c92:	2301      	movs	r3, #1
   14c94:	461a      	mov	r2, r3
   14c96:	e7e8      	b.n	14c6a <bt_conn_process_tx+0x92>
   14c98:	00021d55 	.word	0x00021d55
   14c9c:	00021d26 	.word	0x00021d26
   14ca0:	00021cb2 	.word	0x00021cb2
   14ca4:	200002b8 	.word	0x200002b8

00014ca8 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   14ca8:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   14caa:	490b      	ldr	r1, [pc, #44]	; (14cd8 <bt_conn_init+0x30>)
   14cac:	480b      	ldr	r0, [pc, #44]	; (14cdc <bt_conn_init+0x34>)
   14cae:	f00b fb0e 	bl	202ce <k_queue_append>
   14cb2:	490b      	ldr	r1, [pc, #44]	; (14ce0 <bt_conn_init+0x38>)
   14cb4:	4809      	ldr	r0, [pc, #36]	; (14cdc <bt_conn_init+0x34>)
   14cb6:	f00b fb0a 	bl	202ce <k_queue_append>
   14cba:	490a      	ldr	r1, [pc, #40]	; (14ce4 <bt_conn_init+0x3c>)
   14cbc:	4807      	ldr	r0, [pc, #28]	; (14cdc <bt_conn_init+0x34>)
   14cbe:	f00b fb06 	bl	202ce <k_queue_append>
	}

	bt_att_init();
   14cc2:	f00a fabc 	bl	1f23e <bt_att_init>

	err = bt_smp_init();
   14cc6:	f00a fec9 	bl	1fa5c <bt_smp_init>
	if (err) {
   14cca:	4604      	mov	r4, r0
   14ccc:	b908      	cbnz	r0, 14cd2 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   14cce:	f009 fe77 	bl	1e9c0 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   14cd2:	4620      	mov	r0, r4
   14cd4:	bd10      	pop	{r4, pc}
   14cd6:	bf00      	nop
   14cd8:	200022f0 	.word	0x200022f0
   14cdc:	20000880 	.word	0x20000880
   14ce0:	20002300 	.word	0x20002300
   14ce4:	20002310 	.word	0x20002310

00014ce8 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   14ce8:	4b04      	ldr	r3, [pc, #16]	; (14cfc <l2cap_accept+0x14>)
   14cea:	6818      	ldr	r0, [r3, #0]
   14cec:	b918      	cbnz	r0, 14cf6 <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   14cee:	4a04      	ldr	r2, [pc, #16]	; (14d00 <l2cap_accept+0x18>)
   14cf0:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   14cf2:	600b      	str	r3, [r1, #0]

		return 0;
   14cf4:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   14cf6:	f06f 000b 	mvn.w	r0, #11
}
   14cfa:	4770      	bx	lr
   14cfc:	20001760 	.word	0x20001760
   14d00:	00021408 	.word	0x00021408

00014d04 <bt_l2cap_connected>:
{
   14d04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   14d08:	4e29      	ldr	r6, [pc, #164]	; (14db0 <bt_l2cap_connected+0xac>)
   14d0a:	4f2a      	ldr	r7, [pc, #168]	; (14db4 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   14d0c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 14db8 <bt_l2cap_connected+0xb4>
{
   14d10:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   14d12:	42be      	cmp	r6, r7
   14d14:	d302      	bcc.n	14d1c <bt_l2cap_connected+0x18>
}
   14d16:	b003      	add	sp, #12
   14d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   14d1c:	6873      	ldr	r3, [r6, #4]
   14d1e:	a901      	add	r1, sp, #4
   14d20:	4620      	mov	r0, r4
   14d22:	4798      	blx	r3
   14d24:	2800      	cmp	r0, #0
   14d26:	db3d      	blt.n	14da4 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   14d28:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   14d2a:	8833      	ldrh	r3, [r6, #0]
   14d2c:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   14d30:	f8a5 307c 	strh.w	r3, [r5, #124]	; 0x7c
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   14d34:	4641      	mov	r1, r8
   14d36:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   14d3a:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   14d3e:	f00b fbb4 	bl	204aa <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14d42:	f3bf 8f5b 	dmb	ish
   14d46:	f105 0368 	add.w	r3, r5, #104	; 0x68
   14d4a:	2200      	movs	r2, #0
   14d4c:	e853 1f00 	ldrex	r1, [r3]
   14d50:	e843 2000 	strex	r0, r2, [r3]
   14d54:	2800      	cmp	r0, #0
   14d56:	d1f9      	bne.n	14d4c <bt_l2cap_connected+0x48>
   14d58:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   14d5c:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   14d5e:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   14d60:	f105 0308 	add.w	r3, r5, #8
   14d64:	bb02      	cbnz	r2, 14da8 <bt_l2cap_connected+0xa4>
	list->head = node;
   14d66:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   14d6a:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   14d6c:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   14d6e:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   14d70:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   14d74:	681b      	ldr	r3, [r3, #0]
   14d76:	b103      	cbz	r3, 14d7a <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   14d78:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14d7a:	9b01      	ldr	r3, [sp, #4]
   14d7c:	f3bf 8f5b 	dmb	ish
   14d80:	3368      	adds	r3, #104	; 0x68
   14d82:	e853 2f00 	ldrex	r2, [r3]
   14d86:	f042 0201 	orr.w	r2, r2, #1
   14d8a:	e843 2100 	strex	r1, r2, [r3]
   14d8e:	2900      	cmp	r1, #0
   14d90:	d1f7      	bne.n	14d82 <bt_l2cap_connected+0x7e>
   14d92:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   14d96:	9801      	ldr	r0, [sp, #4]
   14d98:	6843      	ldr	r3, [r0, #4]
   14d9a:	699b      	ldr	r3, [r3, #24]
   14d9c:	b113      	cbz	r3, 14da4 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   14d9e:	f100 0168 	add.w	r1, r0, #104	; 0x68
   14da2:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   14da4:	360c      	adds	r6, #12
   14da6:	e7b4      	b.n	14d12 <bt_l2cap_connected+0xe>
	parent->next = child;
   14da8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   14daa:	6563      	str	r3, [r4, #84]	; 0x54
}
   14dac:	e7dd      	b.n	14d6a <bt_l2cap_connected+0x66>
   14dae:	bf00      	nop
   14db0:	00020dd8 	.word	0x00020dd8
   14db4:	00020dfc 	.word	0x00020dfc
   14db8:	0001e86d 	.word	0x0001e86d

00014dbc <bt_l2cap_update_conn_param>:
{
   14dbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   14dbe:	4b17      	ldr	r3, [pc, #92]	; (14e1c <bt_l2cap_update_conn_param+0x60>)
   14dc0:	781a      	ldrb	r2, [r3, #0]
   14dc2:	3201      	adds	r2, #1
	if (!ident) {
   14dc4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   14dc8:	bf08      	it	eq
   14dca:	2201      	moveq	r2, #1
   14dcc:	701a      	strb	r2, [r3, #0]
{
   14dce:	4606      	mov	r6, r0
   14dd0:	460d      	mov	r5, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   14dd2:	2208      	movs	r2, #8
   14dd4:	7819      	ldrb	r1, [r3, #0]
   14dd6:	2012      	movs	r0, #18
   14dd8:	f009 fcfb 	bl	1e7d2 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   14ddc:	4604      	mov	r4, r0
   14dde:	b1d0      	cbz	r0, 14e16 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   14de0:	2108      	movs	r1, #8
   14de2:	4408      	add	r0, r1
   14de4:	f00a fe93 	bl	1fb0e <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   14de8:	882b      	ldrh	r3, [r5, #0]
   14dea:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   14dec:	886b      	ldrh	r3, [r5, #2]
   14dee:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   14df0:	88ab      	ldrh	r3, [r5, #4]
   14df2:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   14df4:	88eb      	ldrh	r3, [r5, #6]
   14df6:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   14df8:	2300      	movs	r3, #0
   14dfa:	9300      	str	r3, [sp, #0]
   14dfc:	4622      	mov	r2, r4
   14dfe:	2105      	movs	r1, #5
   14e00:	4630      	mov	r0, r6
   14e02:	f009 fd58 	bl	1e8b6 <bt_l2cap_send_cb>
	if (err) {
   14e06:	4605      	mov	r5, r0
   14e08:	b110      	cbz	r0, 14e10 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   14e0a:	4620      	mov	r0, r4
   14e0c:	f001 faf8 	bl	16400 <net_buf_unref>
}
   14e10:	4628      	mov	r0, r5
   14e12:	b002      	add	sp, #8
   14e14:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   14e16:	f06f 050b 	mvn.w	r5, #11
   14e1a:	e7f9      	b.n	14e10 <bt_l2cap_update_conn_param+0x54>
   14e1c:	20002ef2 	.word	0x20002ef2

00014e20 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   14e20:	4b02      	ldr	r3, [pc, #8]	; (14e2c <att_cfm_sent+0xc>)
   14e22:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   14e26:	f009 bdf9 	b.w	1ea1c <att_sent>
   14e2a:	bf00      	nop
   14e2c:	0001eec5 	.word	0x0001eec5

00014e30 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   14e30:	4b02      	ldr	r3, [pc, #8]	; (14e3c <att_rsp_sent+0xc>)
   14e32:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   14e36:	f009 bdf1 	b.w	1ea1c <att_sent>
   14e3a:	bf00      	nop
   14e3c:	0001eea9 	.word	0x0001eea9

00014e40 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   14e40:	4b02      	ldr	r3, [pc, #8]	; (14e4c <att_req_sent+0xc>)
   14e42:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   14e46:	f009 bde9 	b.w	1ea1c <att_sent>
   14e4a:	bf00      	nop
   14e4c:	0001ee8f 	.word	0x0001ee8f

00014e50 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   14e50:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   14e52:	3808      	subs	r0, #8
   14e54:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   14e56:	a901      	add	r1, sp, #4
   14e58:	4802      	ldr	r0, [pc, #8]	; (14e64 <bt_att_released+0x14>)
   14e5a:	f00b f97a 	bl	20152 <k_mem_slab_free>
}
   14e5e:	b003      	add	sp, #12
   14e60:	f85d fb04 	ldr.w	pc, [sp], #4
   14e64:	200007b4 	.word	0x200007b4

00014e68 <read_group_cb>:
{
   14e68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   14e6c:	4606      	mov	r6, r0
   14e6e:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14e70:	f04f 0800 	mov.w	r8, #0
   14e74:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14e78:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   14e7a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14e7c:	f88d 8008 	strb.w	r8, [sp, #8]
   14e80:	a902      	add	r1, sp, #8
{
   14e82:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14e84:	f8ad 300a 	strh.w	r3, [sp, #10]
   14e88:	f008 ff18 	bl	1dcbc <bt_uuid_cmp>
   14e8c:	b1a0      	cbz	r0, 14eb8 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   14e8e:	f642 0301 	movw	r3, #10241	; 0x2801
   14e92:	6830      	ldr	r0, [r6, #0]
   14e94:	f88d 800c 	strb.w	r8, [sp, #12]
   14e98:	a903      	add	r1, sp, #12
   14e9a:	f8ad 300e 	strh.w	r3, [sp, #14]
   14e9e:	f008 ff0d 	bl	1dcbc <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14ea2:	b148      	cbz	r0, 14eb8 <read_group_cb+0x50>
		if (data->group &&
   14ea4:	6923      	ldr	r3, [r4, #16]
   14ea6:	b11b      	cbz	r3, 14eb0 <read_group_cb+0x48>
   14ea8:	885a      	ldrh	r2, [r3, #2]
   14eaa:	42aa      	cmp	r2, r5
   14eac:	d200      	bcs.n	14eb0 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   14eae:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   14eb0:	2001      	movs	r0, #1
}
   14eb2:	b004      	add	sp, #16
   14eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   14eb8:	6861      	ldr	r1, [r4, #4]
   14eba:	6830      	ldr	r0, [r6, #0]
   14ebc:	f008 fefe 	bl	1dcbc <bt_uuid_cmp>
   14ec0:	b110      	cbz	r0, 14ec8 <read_group_cb+0x60>
		data->group = NULL;
   14ec2:	2300      	movs	r3, #0
   14ec4:	6123      	str	r3, [r4, #16]
   14ec6:	e7f3      	b.n	14eb0 <read_group_cb+0x48>
	if (data->rsp->len &&
   14ec8:	68e3      	ldr	r3, [r4, #12]
   14eca:	68a0      	ldr	r0, [r4, #8]
   14ecc:	781a      	ldrb	r2, [r3, #0]
   14ece:	b13a      	cbz	r2, 14ee0 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   14ed0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
   14ed4:	8981      	ldrh	r1, [r0, #12]
   14ed6:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   14ed8:	4293      	cmp	r3, r2
   14eda:	da01      	bge.n	14ee0 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   14edc:	2000      	movs	r0, #0
   14ede:	e7e8      	b.n	14eb2 <read_group_cb+0x4a>
   14ee0:	2104      	movs	r1, #4
   14ee2:	3008      	adds	r0, #8
   14ee4:	f00a fe13 	bl	1fb0e <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   14ee8:	4b09      	ldr	r3, [pc, #36]	; (14f10 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   14eea:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   14eec:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   14eee:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   14ef0:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   14ef2:	4631      	mov	r1, r6
   14ef4:	9300      	str	r3, [sp, #0]
   14ef6:	9401      	str	r4, [sp, #4]
   14ef8:	2300      	movs	r3, #0
   14efa:	4638      	mov	r0, r7
   14efc:	f009 fdde 	bl	1eabc <att_chan_read>
	if (read < 0) {
   14f00:	2800      	cmp	r0, #0
   14f02:	dbeb      	blt.n	14edc <read_group_cb+0x74>
	if (!data->group) {
   14f04:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   14f06:	3800      	subs	r0, #0
   14f08:	bf18      	it	ne
   14f0a:	2001      	movne	r0, #1
   14f0c:	e7d1      	b.n	14eb2 <read_group_cb+0x4a>
   14f0e:	bf00      	nop
   14f10:	0001ee09 	.word	0x0001ee09

00014f14 <read_type_cb>:
{
   14f14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   14f18:	f8d2 8000 	ldr.w	r8, [r2]
{
   14f1c:	4606      	mov	r6, r0
   14f1e:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   14f20:	6800      	ldr	r0, [r0, #0]
   14f22:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   14f24:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   14f28:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   14f2a:	f008 fec7 	bl	1dcbc <bt_uuid_cmp>
   14f2e:	4607      	mov	r7, r0
   14f30:	2800      	cmp	r0, #0
   14f32:	d13e      	bne.n	14fb2 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   14f34:	4628      	mov	r0, r5
   14f36:	2215      	movs	r2, #21
   14f38:	4631      	mov	r1, r6
   14f3a:	f00a fcde 	bl	1f8fa <bt_gatt_check_perm>
   14f3e:	4605      	mov	r5, r0
   14f40:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   14f42:	b148      	cbz	r0, 14f58 <read_type_cb+0x44>
		if (data->rsp->len) {
   14f44:	68e3      	ldr	r3, [r4, #12]
   14f46:	781b      	ldrb	r3, [r3, #0]
   14f48:	b923      	cbnz	r3, 14f54 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   14f4a:	2500      	movs	r5, #0
}
   14f4c:	4628      	mov	r0, r5
   14f4e:	b003      	add	sp, #12
   14f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   14f54:	7527      	strb	r7, [r4, #20]
   14f56:	e7f8      	b.n	14f4a <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   14f58:	68a0      	ldr	r0, [r4, #8]
   14f5a:	f00a fdb6 	bl	1faca <net_buf_frag_last>
   14f5e:	2102      	movs	r1, #2
   14f60:	3008      	adds	r0, #8
   14f62:	f00a fdd4 	bl	1fb0e <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   14f66:	4b14      	ldr	r3, [pc, #80]	; (14fb8 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   14f68:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   14f6a:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   14f6c:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   14f70:	4631      	mov	r1, r6
   14f72:	9300      	str	r3, [sp, #0]
   14f74:	9401      	str	r4, [sp, #4]
   14f76:	462b      	mov	r3, r5
   14f78:	4640      	mov	r0, r8
   14f7a:	f009 fd9f 	bl	1eabc <att_chan_read>
	if (read < 0) {
   14f7e:	2800      	cmp	r0, #0
   14f80:	da07      	bge.n	14f92 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   14f82:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   14f86:	bf26      	itte	cs
   14f88:	4240      	negcs	r0, r0
   14f8a:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   14f8c:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   14f8e:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   14f90:	e7dc      	b.n	14f4c <read_type_cb+0x38>
	if (!data->item) {
   14f92:	6923      	ldr	r3, [r4, #16]
   14f94:	2b00      	cmp	r3, #0
   14f96:	d0d8      	beq.n	14f4a <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   14f98:	68a0      	ldr	r0, [r4, #8]
   14f9a:	f009 fd37 	bl	1ea0c <net_buf_frags_len>
   14f9e:	f8b8 5086 	ldrh.w	r5, [r8, #134]	; 0x86
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   14fa2:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   14fa4:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   14fa6:	7818      	ldrb	r0, [r3, #0]
   14fa8:	4285      	cmp	r5, r0
   14faa:	bf94      	ite	ls
   14fac:	2500      	movls	r5, #0
   14fae:	2501      	movhi	r5, #1
   14fb0:	e7cc      	b.n	14f4c <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   14fb2:	2501      	movs	r5, #1
   14fb4:	e7ca      	b.n	14f4c <read_type_cb+0x38>
   14fb6:	bf00      	nop
   14fb8:	0001ea29 	.word	0x0001ea29

00014fbc <chan_send>:
{
   14fbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   14fc0:	688b      	ldr	r3, [r1, #8]
   14fc2:	781b      	ldrb	r3, [r3, #0]
   14fc4:	2bd2      	cmp	r3, #210	; 0xd2
{
   14fc6:	4606      	mov	r6, r0
   14fc8:	460c      	mov	r4, r1
   14fca:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   14fcc:	d10c      	bne.n	14fe8 <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
   14fce:	6803      	ldr	r3, [r0, #0]
   14fd0:	6818      	ldr	r0, [r3, #0]
   14fd2:	f00a fd40 	bl	1fa56 <bt_smp_sign>
		if (err) {
   14fd6:	4605      	mov	r5, r0
   14fd8:	b130      	cbz	r0, 14fe8 <chan_send+0x2c>
			net_buf_unref(buf);
   14fda:	4620      	mov	r0, r4
   14fdc:	f001 fa10 	bl	16400 <net_buf_unref>
}
   14fe0:	4628      	mov	r0, r5
   14fe2:	b003      	add	sp, #12
   14fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   14fe8:	f104 0008 	add.w	r0, r4, #8
   14fec:	f00a fdc6 	bl	1fb7c <net_buf_simple_headroom>
	state->len = buf->len;
   14ff0:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   14ff4:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   14ff6:	b957      	cbnz	r7, 1500e <chan_send+0x52>
	switch (att_op_get_type(buf->data[0])) {
   14ff8:	68a3      	ldr	r3, [r4, #8]
   14ffa:	7818      	ldrb	r0, [r3, #0]
   14ffc:	f009 fd26 	bl	1ea4c <att_op_get_type>
   15000:	3801      	subs	r0, #1
   15002:	b2c0      	uxtb	r0, r0
   15004:	2804      	cmp	r0, #4
   15006:	bf9c      	itt	ls
   15008:	4b13      	ldrls	r3, [pc, #76]	; (15058 <chan_send+0x9c>)
   1500a:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1500e:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   15010:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15014:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   15016:	4b11      	ldr	r3, [pc, #68]	; (1505c <chan_send+0xa0>)
   15018:	429f      	cmp	r7, r3
   1501a:	d018      	beq.n	1504e <chan_send+0x92>
	} else if (cb == chan_cfm_sent) {
   1501c:	4b10      	ldr	r3, [pc, #64]	; (15060 <chan_send+0xa4>)
   1501e:	429f      	cmp	r7, r3
   15020:	d017      	beq.n	15052 <chan_send+0x96>
		return att_sent;
   15022:	4910      	ldr	r1, [pc, #64]	; (15064 <chan_send+0xa8>)
   15024:	4b10      	ldr	r3, [pc, #64]	; (15068 <chan_send+0xac>)
   15026:	4a11      	ldr	r2, [pc, #68]	; (1506c <chan_send+0xb0>)
   15028:	428f      	cmp	r7, r1
   1502a:	bf18      	it	ne
   1502c:	4613      	movne	r3, r2
			       &chan->chan.chan);
   1502e:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15030:	9600      	str	r6, [sp, #0]
   15032:	4622      	mov	r2, r4
   15034:	2104      	movs	r1, #4
   15036:	f009 fc3e 	bl	1e8b6 <bt_l2cap_send_cb>
	if (err) {
   1503a:	4605      	mov	r5, r0
   1503c:	2800      	cmp	r0, #0
   1503e:	d0cf      	beq.n	14fe0 <chan_send+0x24>
	buf->data = buf->__buf + state->offset;
   15040:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   15042:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   15046:	fa10 f088 	uxtah	r0, r0, r8
   1504a:	60a0      	str	r0, [r4, #8]
}
   1504c:	e7c8      	b.n	14fe0 <chan_send+0x24>
		return att_rsp_sent;
   1504e:	4b08      	ldr	r3, [pc, #32]	; (15070 <chan_send+0xb4>)
   15050:	e7ed      	b.n	1502e <chan_send+0x72>
		return att_cfm_sent;
   15052:	4b08      	ldr	r3, [pc, #32]	; (15074 <chan_send+0xb8>)
   15054:	e7eb      	b.n	1502e <chan_send+0x72>
   15056:	bf00      	nop
   15058:	00021428 	.word	0x00021428
   1505c:	0001eea9 	.word	0x0001eea9
   15060:	0001eec5 	.word	0x0001eec5
   15064:	0001ee8f 	.word	0x0001ee8f
   15068:	00014e41 	.word	0x00014e41
   1506c:	0001ea1d 	.word	0x0001ea1d
   15070:	00014e31 	.word	0x00014e31
   15074:	00014e21 	.word	0x00014e21

00015078 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   15078:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   1507a:	4a07      	ldr	r2, [pc, #28]	; (15098 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   1507c:	4604      	mov	r4, r0
   1507e:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   15080:	f7ff ff9c 	bl	14fbc <chan_send>
	if (err) {
   15084:	b130      	cbz	r0, 15094 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   15086:	4629      	mov	r1, r5
   15088:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   1508c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   15090:	f00a bd0a 	b.w	1faa8 <net_buf_put>
}
   15094:	bd38      	pop	{r3, r4, r5, pc}
   15096:	bf00      	nop
   15098:	0001eea9 	.word	0x0001eea9

0001509c <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1509c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1509e:	2300      	movs	r3, #0
{
   150a0:	4607      	mov	r7, r0
   150a2:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   150a4:	481e      	ldr	r0, [pc, #120]	; (15120 <bt_att_accept+0x84>)
   150a6:	2200      	movs	r2, #0
   150a8:	4669      	mov	r1, sp
   150aa:	f003 fc49 	bl	18940 <k_mem_slab_alloc>
   150ae:	4604      	mov	r4, r0
   150b0:	b120      	cbz	r0, 150bc <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   150b2:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   150b6:	4620      	mov	r0, r4
   150b8:	b003      	add	sp, #12
   150ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   150bc:	4601      	mov	r1, r0
   150be:	222c      	movs	r2, #44	; 0x2c
   150c0:	9800      	ldr	r0, [sp, #0]
   150c2:	f008 fdd1 	bl	1dc68 <memset>
	att->conn = conn;
   150c6:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   150c8:	4816      	ldr	r0, [pc, #88]	; (15124 <bt_att_accept+0x88>)
	list->tail = NULL;
   150ca:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   150cc:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
   150d0:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   150d4:	2200      	movs	r2, #0
   150d6:	2300      	movs	r3, #0
   150d8:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   150da:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   150dc:	f003 fc30 	bl	18940 <k_mem_slab_alloc>
   150e0:	4604      	mov	r4, r0
   150e2:	2800      	cmp	r0, #0
   150e4:	d1e5      	bne.n	150b2 <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
   150e6:	4601      	mov	r1, r0
   150e8:	f44f 72a4 	mov.w	r2, #328	; 0x148
   150ec:	9801      	ldr	r0, [sp, #4]
   150ee:	f008 fdbb 	bl	1dc68 <memset>
	chan->chan.chan.ops = &ops;
   150f2:	9801      	ldr	r0, [sp, #4]
   150f4:	4b0c      	ldr	r3, [pc, #48]	; (15128 <bt_att_accept+0x8c>)
   150f6:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   150f8:	30f8      	adds	r0, #248	; 0xf8
   150fa:	f00b f8dc 	bl	202b6 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   150fe:	9b01      	ldr	r3, [sp, #4]
   15100:	f3bf 8f5b 	dmb	ish
   15104:	33f0      	adds	r3, #240	; 0xf0
   15106:	e853 2f00 	ldrex	r2, [r3]
   1510a:	e843 4100 	strex	r1, r4, [r3]
   1510e:	2900      	cmp	r1, #0
   15110:	d1f9      	bne.n	15106 <bt_att_accept+0x6a>
   15112:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   15116:	9b01      	ldr	r3, [sp, #4]
   15118:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   1511c:	6033      	str	r3, [r6, #0]
	return 0;
   1511e:	e7ca      	b.n	150b6 <bt_att_accept+0x1a>
   15120:	20000798 	.word	0x20000798
   15124:	200007b4 	.word	0x200007b4
   15128:	20000564 	.word	0x20000564

0001512c <bt_att_connected>:
{
   1512c:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1512e:	4606      	mov	r6, r0
{
   15130:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   15132:	2104      	movs	r1, #4
   15134:	f856 0908 	ldr.w	r0, [r6], #-8
   15138:	f009 fc07 	bl	1e94a <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   1513c:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   15140:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   15142:	b91b      	cbnz	r3, 1514c <bt_att_connected+0x20>
   15144:	f105 000c 	add.w	r0, r5, #12
   15148:	f00b f8b5 	bl	202b6 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   1514c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	parent->next = child;
   1514e:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
   15152:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   15154:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
   15158:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   1515a:	b902      	cbnz	r2, 1515e <bt_att_connected+0x32>
	list->tail = node;
   1515c:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1515e:	f3bf 8f5b 	dmb	ish
   15162:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   15166:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   1516a:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1516c:	bf58      	it	pl
   1516e:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   15170:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15172:	bf5c      	itt	pl
   15174:	f8a4 307e 	strhpl.w	r3, [r4, #126]	; 0x7e
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15178:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   1517c:	f009 fe09 	bl	1ed92 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   15180:	f504 7084 	add.w	r0, r4, #264	; 0x108
   15184:	4902      	ldr	r1, [pc, #8]	; (15190 <bt_att_connected+0x64>)
}
   15186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1518a:	f00b b98e 	b.w	204aa <k_work_init_delayable>
   1518e:	bf00      	nop
   15190:	0001f24d 	.word	0x0001f24d

00015194 <att_write_cmd>:
{
   15194:	b5f0      	push	{r4, r5, r6, r7, lr}
   15196:	4604      	mov	r4, r0
   15198:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   1519a:	f101 0008 	add.w	r0, r1, #8
   1519e:	460d      	mov	r5, r1
   151a0:	f00a fce4 	bl	1fb6c <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   151a4:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   151a6:	68af      	ldr	r7, [r5, #8]
   151a8:	89ad      	ldrh	r5, [r5, #12]
   151aa:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   151ac:	2100      	movs	r1, #0
   151ae:	6818      	ldr	r0, [r3, #0]
   151b0:	f00a fbf9 	bl	1f9a6 <bt_gatt_change_aware>
   151b4:	b320      	cbz	r0, 15200 <att_write_cmd+0x6c>
	if (!handle) {
   151b6:	b32e      	cbz	r6, 15204 <att_write_cmd+0x70>
	(void)memset(&data, 0, sizeof(data));
   151b8:	2218      	movs	r2, #24
   151ba:	2100      	movs	r1, #0
   151bc:	4668      	mov	r0, sp
   151be:	f008 fd53 	bl	1dc68 <memset>
	data.conn = chan->att->conn;
   151c2:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   151c4:	4a10      	ldr	r2, [pc, #64]	; (15208 <att_write_cmd+0x74>)
	data.conn = chan->att->conn;
   151c6:	681b      	ldr	r3, [r3, #0]
   151c8:	9300      	str	r3, [sp, #0]
	data.req = req;
   151ca:	2300      	movs	r3, #0
   151cc:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   151d0:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   151d4:	2301      	movs	r3, #1
   151d6:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   151da:	4631      	mov	r1, r6
   151dc:	466b      	mov	r3, sp
   151de:	4630      	mov	r0, r6
	data.value = value;
   151e0:	9703      	str	r7, [sp, #12]
	data.len = len;
   151e2:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   151e6:	f009 fc5e 	bl	1eaa6 <bt_gatt_foreach_attr>
	if (data.err) {
   151ea:	f89d 3014 	ldrb.w	r3, [sp, #20]
   151ee:	b923      	cbnz	r3, 151fa <att_write_cmd+0x66>
	if (data.buf) {
   151f0:	9901      	ldr	r1, [sp, #4]
   151f2:	b111      	cbz	r1, 151fa <att_write_cmd+0x66>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   151f4:	4620      	mov	r0, r4
   151f6:	f7ff ff3f 	bl	15078 <bt_att_chan_send_rsp.constprop.0>
   151fa:	2000      	movs	r0, #0
}
   151fc:	b007      	add	sp, #28
   151fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15200:	2012      	movs	r0, #18
   15202:	e7fb      	b.n	151fc <att_write_cmd+0x68>
		return BT_ATT_ERR_INVALID_HANDLE;
   15204:	2001      	movs	r0, #1
   15206:	e7f9      	b.n	151fc <att_write_cmd+0x68>
   15208:	0001efad 	.word	0x0001efad

0001520c <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   1520c:	898b      	ldrh	r3, [r1, #12]
{
   1520e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15212:	4604      	mov	r4, r0
   15214:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   15216:	2b00      	cmp	r3, #0
   15218:	d05e      	beq.n	152d8 <bt_att_recv+0xcc>
	return net_buf_simple_pull_mem(&buf->b, len);
   1521a:	2101      	movs	r1, #1
   1521c:	f105 0008 	add.w	r0, r5, #8
   15220:	f00a fc9c 	bl	1fb5c <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   15224:	f854 3c08 	ldr.w	r3, [r4, #-8]
   15228:	4607      	mov	r7, r0
   1522a:	2b00      	cmp	r3, #0
   1522c:	d054      	beq.n	152d8 <bt_att_recv+0xcc>
		if (hdr->code == handlers[i].op) {
   1522e:	4a2e      	ldr	r2, [pc, #184]	; (152e8 <bt_att_recv+0xdc>)
   15230:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   15232:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   15236:	2300      	movs	r3, #0
   15238:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   1523a:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   1523e:	4288      	cmp	r0, r1
   15240:	d11a      	bne.n	15278 <bt_att_recv+0x6c>
		if (handler->type == ATT_REQUEST &&
   15242:	00d9      	lsls	r1, r3, #3
   15244:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   15248:	f893 8002 	ldrb.w	r8, [r3, #2]
   1524c:	f1b8 0f01 	cmp.w	r8, #1
   15250:	d020      	beq.n	15294 <bt_att_recv+0x88>
		} else if (handler->type == ATT_INDICATION &&
   15252:	f1b8 0f05 	cmp.w	r8, #5
   15256:	d12d      	bne.n	152b4 <bt_att_recv+0xa8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15258:	f3bf 8f5b 	dmb	ish
   1525c:	34e8      	adds	r4, #232	; 0xe8
   1525e:	e854 2f00 	ldrex	r2, [r4]
   15262:	f042 0302 	orr.w	r3, r2, #2
   15266:	e844 3000 	strex	r0, r3, [r4]
   1526a:	2800      	cmp	r0, #0
   1526c:	d1f7      	bne.n	1525e <bt_att_recv+0x52>
   1526e:	f3bf 8f5b 	dmb	ish
   15272:	f012 0f02 	tst.w	r2, #2
   15276:	e01c      	b.n	152b2 <bt_att_recv+0xa6>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   15278:	3301      	adds	r3, #1
   1527a:	2b0d      	cmp	r3, #13
   1527c:	d1dd      	bne.n	1523a <bt_att_recv+0x2e>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   1527e:	4608      	mov	r0, r1
   15280:	f009 fbe4 	bl	1ea4c <att_op_get_type>
   15284:	b340      	cbz	r0, 152d8 <bt_att_recv+0xcc>
	if (!req) {
   15286:	b339      	cbz	r1, 152d8 <bt_att_recv+0xcc>
   15288:	2306      	movs	r3, #6
   1528a:	2200      	movs	r2, #0
   1528c:	4630      	mov	r0, r6
   1528e:	f009 ff47 	bl	1f120 <send_err_rsp.part.0>
   15292:	e021      	b.n	152d8 <bt_att_recv+0xcc>
   15294:	34e8      	adds	r4, #232	; 0xe8
   15296:	f3bf 8f5b 	dmb	ish
   1529a:	e854 3f00 	ldrex	r3, [r4]
   1529e:	f043 0201 	orr.w	r2, r3, #1
   152a2:	e844 2000 	strex	r0, r2, [r4]
   152a6:	2800      	cmp	r0, #0
   152a8:	d1f7      	bne.n	1529a <bt_att_recv+0x8e>
   152aa:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   152ae:	f013 0f01 	tst.w	r3, #1
   152b2:	d111      	bne.n	152d8 <bt_att_recv+0xcc>
	if (buf->len < handler->expect_len) {
   152b4:	eb0c 0301 	add.w	r3, ip, r1
   152b8:	89a9      	ldrh	r1, [r5, #12]
   152ba:	785a      	ldrb	r2, [r3, #1]
   152bc:	4291      	cmp	r1, r2
   152be:	d30e      	bcc.n	152de <bt_att_recv+0xd2>
		err = handler->func(att_chan, buf);
   152c0:	685b      	ldr	r3, [r3, #4]
   152c2:	4629      	mov	r1, r5
   152c4:	4630      	mov	r0, r6
   152c6:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   152c8:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   152cc:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   152ce:	d103      	bne.n	152d8 <bt_att_recv+0xcc>
   152d0:	b110      	cbz	r0, 152d8 <bt_att_recv+0xcc>
		send_err_rsp(att_chan, hdr->code, 0, err);
   152d2:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   152d4:	2900      	cmp	r1, #0
   152d6:	d1d8      	bne.n	1528a <bt_att_recv+0x7e>
}
   152d8:	2000      	movs	r0, #0
   152da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
   152de:	f1b8 0f01 	cmp.w	r8, #1
   152e2:	d1f9      	bne.n	152d8 <bt_att_recv+0xcc>
		err = BT_ATT_ERR_INVALID_PDU;
   152e4:	2304      	movs	r3, #4
   152e6:	e7f4      	b.n	152d2 <bt_att_recv+0xc6>
   152e8:	0002143c 	.word	0x0002143c

000152ec <att_write_req>:
{
   152ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   152f0:	4604      	mov	r4, r0
   152f2:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   152f4:	f101 0008 	add.w	r0, r1, #8
   152f8:	460d      	mov	r5, r1
   152fa:	f00a fc37 	bl	1fb6c <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   152fe:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   15300:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   15304:	89ad      	ldrh	r5, [r5, #12]
   15306:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15308:	2101      	movs	r1, #1
   1530a:	6818      	ldr	r0, [r3, #0]
   1530c:	f00a fb4b 	bl	1f9a6 <bt_gatt_change_aware>
   15310:	2800      	cmp	r0, #0
   15312:	d03f      	beq.n	15394 <att_write_req+0xa8>
	if (!handle) {
   15314:	2e00      	cmp	r6, #0
   15316:	d03f      	beq.n	15398 <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
   15318:	2218      	movs	r2, #24
   1531a:	2100      	movs	r1, #0
   1531c:	4668      	mov	r0, sp
   1531e:	f008 fca3 	bl	1dc68 <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   15322:	2200      	movs	r2, #0
   15324:	2113      	movs	r1, #19
   15326:	4620      	mov	r0, r4
   15328:	f009 fed5 	bl	1f0d6 <bt_att_chan_create_pdu>
   1532c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1532e:	b378      	cbz	r0, 15390 <att_write_req+0xa4>
	data.conn = chan->att->conn;
   15330:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15332:	4a1a      	ldr	r2, [pc, #104]	; (1539c <att_write_req+0xb0>)
	data.conn = chan->att->conn;
   15334:	681b      	ldr	r3, [r3, #0]
   15336:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15338:	2301      	movs	r3, #1
   1533a:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   1533e:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   15342:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15344:	466b      	mov	r3, sp
   15346:	4631      	mov	r1, r6
   15348:	4630      	mov	r0, r6
	data.len = len;
   1534a:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   1534e:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   15352:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   15356:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1535a:	f009 fba4 	bl	1eaa6 <bt_gatt_foreach_attr>
	if (data.err) {
   1535e:	f89d 5014 	ldrb.w	r5, [sp, #20]
   15362:	b175      	cbz	r5, 15382 <att_write_req+0x96>
			net_buf_unref(data.buf);
   15364:	9801      	ldr	r0, [sp, #4]
   15366:	f001 f84b 	bl	16400 <net_buf_unref>
	if (!req) {
   1536a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1536e:	4632      	mov	r2, r6
   15370:	4641      	mov	r1, r8
   15372:	4620      	mov	r0, r4
   15374:	f009 fed4 	bl	1f120 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   15378:	463d      	mov	r5, r7
}
   1537a:	4628      	mov	r0, r5
   1537c:	b007      	add	sp, #28
   1537e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   15382:	9901      	ldr	r1, [sp, #4]
   15384:	2900      	cmp	r1, #0
   15386:	d0f8      	beq.n	1537a <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15388:	4620      	mov	r0, r4
   1538a:	f7ff fe75 	bl	15078 <bt_att_chan_send_rsp.constprop.0>
   1538e:	e7f4      	b.n	1537a <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   15390:	250e      	movs	r5, #14
   15392:	e7f2      	b.n	1537a <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15394:	2512      	movs	r5, #18
   15396:	e7f0      	b.n	1537a <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   15398:	2501      	movs	r5, #1
   1539a:	e7ee      	b.n	1537a <att_write_req+0x8e>
   1539c:	0001efad 	.word	0x0001efad

000153a0 <att_read_group_req>:
{
   153a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   153a4:	7b0c      	ldrb	r4, [r1, #12]
   153a6:	3c04      	subs	r4, #4
   153a8:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   153aa:	2c02      	cmp	r4, #2
{
   153ac:	4605      	mov	r5, r0
   153ae:	b08c      	sub	sp, #48	; 0x30
   153b0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   153b2:	d001      	beq.n	153b8 <att_read_group_req+0x18>
   153b4:	2c10      	cmp	r4, #16
   153b6:	d16e      	bne.n	15496 <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
   153b8:	2104      	movs	r1, #4
   153ba:	3008      	adds	r0, #8
   153bc:	f00a fbce 	bl	1fb5c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   153c0:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   153c4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   153c6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   153c8:	1d01      	adds	r1, r0, #4
   153ca:	4622      	mov	r2, r4
   153cc:	4640      	mov	r0, r8
   153ce:	f008 fc9f 	bl	1dd10 <bt_uuid_create>
   153d2:	2800      	cmp	r0, #0
   153d4:	d061      	beq.n	1549a <att_read_group_req+0xfa>
	if (!start || !end) {
   153d6:	2e00      	cmp	r6, #0
   153d8:	d03a      	beq.n	15450 <att_read_group_req+0xb0>
   153da:	2400      	movs	r4, #0
   153dc:	2f00      	cmp	r7, #0
   153de:	d036      	beq.n	1544e <att_read_group_req+0xae>
	if (start > end) {
   153e0:	42be      	cmp	r6, r7
   153e2:	d835      	bhi.n	15450 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   153e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   153e8:	a901      	add	r1, sp, #4
   153ea:	4640      	mov	r0, r8
   153ec:	f88d 4004 	strb.w	r4, [sp, #4]
   153f0:	f8ad 3006 	strh.w	r3, [sp, #6]
   153f4:	f008 fc62 	bl	1dcbc <bt_uuid_cmp>
   153f8:	2800      	cmp	r0, #0
   153fa:	d134      	bne.n	15466 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   153fc:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   153fe:	2214      	movs	r2, #20
   15400:	2100      	movs	r1, #0
   15402:	a807      	add	r0, sp, #28
   15404:	f008 fc30 	bl	1dc68 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   15408:	2201      	movs	r2, #1
   1540a:	2111      	movs	r1, #17
   1540c:	4620      	mov	r0, r4
   1540e:	f009 fea4 	bl	1f15a <bt_att_create_pdu>
   15412:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   15414:	2800      	cmp	r0, #0
   15416:	d040      	beq.n	1549a <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   15418:	2101      	movs	r1, #1
   1541a:	3008      	adds	r0, #8
	data.uuid = uuid;
   1541c:	e9cd 5807 	strd	r5, r8, [sp, #28]
   15420:	f00a fb75 	bl	1fb0e <net_buf_simple_add>
	data.rsp->len = 0U;
   15424:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   15428:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1542a:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   1542c:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15430:	4a1b      	ldr	r2, [pc, #108]	; (154a0 <att_read_group_req+0x100>)
	data.group = NULL;
   15432:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15436:	4639      	mov	r1, r7
   15438:	4630      	mov	r0, r6
   1543a:	f009 fb34 	bl	1eaa6 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1543e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15440:	781c      	ldrb	r4, [r3, #0]
   15442:	bb1c      	cbnz	r4, 1548c <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   15444:	9809      	ldr	r0, [sp, #36]	; 0x24
   15446:	f000 ffdb 	bl	16400 <net_buf_unref>
	if (!req) {
   1544a:	230a      	movs	r3, #10
   1544c:	e018      	b.n	15480 <att_read_group_req+0xe0>
			*err = 0U;
   1544e:	463e      	mov	r6, r7
	if (!req) {
   15450:	2301      	movs	r3, #1
   15452:	4632      	mov	r2, r6
   15454:	2110      	movs	r1, #16
   15456:	4628      	mov	r0, r5
   15458:	f009 fe62 	bl	1f120 <send_err_rsp.part.0>
		return 0;
   1545c:	2400      	movs	r4, #0
}
   1545e:	4620      	mov	r0, r4
   15460:	b00c      	add	sp, #48	; 0x30
   15462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   15466:	f642 0301 	movw	r3, #10241	; 0x2801
   1546a:	a907      	add	r1, sp, #28
   1546c:	4640      	mov	r0, r8
   1546e:	f88d 401c 	strb.w	r4, [sp, #28]
   15472:	f8ad 301e 	strh.w	r3, [sp, #30]
   15476:	f008 fc21 	bl	1dcbc <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1547a:	2800      	cmp	r0, #0
   1547c:	d0be      	beq.n	153fc <att_read_group_req+0x5c>
	if (!req) {
   1547e:	2310      	movs	r3, #16
   15480:	4632      	mov	r2, r6
   15482:	2110      	movs	r1, #16
   15484:	4628      	mov	r0, r5
   15486:	f009 fe4b 	bl	1f120 <send_err_rsp.part.0>
		return 0;
   1548a:	e7e8      	b.n	1545e <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1548c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1548e:	4628      	mov	r0, r5
   15490:	f7ff fdf2 	bl	15078 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   15494:	e7e2      	b.n	1545c <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   15496:	2404      	movs	r4, #4
   15498:	e7e1      	b.n	1545e <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   1549a:	240e      	movs	r4, #14
   1549c:	e7df      	b.n	1545e <att_read_group_req+0xbe>
   1549e:	bf00      	nop
   154a0:	00014e69 	.word	0x00014e69

000154a4 <att_read_mult_req>:
{
   154a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   154a8:	6886      	ldr	r6, [r0, #8]
{
   154aa:	b085      	sub	sp, #20
   154ac:	4604      	mov	r4, r0
   154ae:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   154b0:	4630      	mov	r0, r6
   154b2:	2101      	movs	r1, #1
   154b4:	f00a fa77 	bl	1f9a6 <bt_gatt_change_aware>
   154b8:	b3b8      	cbz	r0, 1552a <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
   154ba:	2210      	movs	r2, #16
   154bc:	2100      	movs	r1, #0
   154be:	4668      	mov	r0, sp
   154c0:	f008 fbd2 	bl	1dc68 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   154c4:	2200      	movs	r2, #0
   154c6:	210f      	movs	r1, #15
   154c8:	4630      	mov	r0, r6
   154ca:	f009 fe46 	bl	1f15a <bt_att_create_pdu>
   154ce:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   154d0:	b368      	cbz	r0, 1552e <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   154d2:	f8df 9060 	ldr.w	r9, [pc, #96]	; 15534 <att_read_mult_req+0x90>
	data.chan = chan;
   154d6:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   154d8:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   154dc:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   154e0:	89ab      	ldrh	r3, [r5, #12]
   154e2:	2b01      	cmp	r3, #1
   154e4:	d804      	bhi.n	154f0 <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   154e6:	9902      	ldr	r1, [sp, #8]
   154e8:	4620      	mov	r0, r4
   154ea:	f7ff fdc5 	bl	15078 <bt_att_chan_send_rsp.constprop.0>
   154ee:	e018      	b.n	15522 <att_read_mult_req+0x7e>
   154f0:	4638      	mov	r0, r7
   154f2:	f00a fb3b 	bl	1fb6c <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   154f6:	466b      	mov	r3, sp
   154f8:	464a      	mov	r2, r9
   154fa:	4601      	mov	r1, r0
   154fc:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   154fe:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15502:	f009 fad0 	bl	1eaa6 <bt_gatt_foreach_attr>
		if (data.err) {
   15506:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1550a:	2b00      	cmp	r3, #0
   1550c:	d0e8      	beq.n	154e0 <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
   1550e:	9802      	ldr	r0, [sp, #8]
   15510:	f000 ff76 	bl	16400 <net_buf_unref>
	if (!req) {
   15514:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15518:	4632      	mov	r2, r6
   1551a:	210e      	movs	r1, #14
   1551c:	4620      	mov	r0, r4
   1551e:	f009 fdff 	bl	1f120 <send_err_rsp.part.0>
	return 0;
   15522:	2000      	movs	r0, #0
}
   15524:	b005      	add	sp, #20
   15526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1552a:	2012      	movs	r0, #18
   1552c:	e7fa      	b.n	15524 <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
   1552e:	200e      	movs	r0, #14
   15530:	e7f8      	b.n	15524 <att_read_mult_req+0x80>
   15532:	bf00      	nop
   15534:	0001f083 	.word	0x0001f083

00015538 <att_read_rsp>:
{
   15538:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1553c:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   15540:	4605      	mov	r5, r0
   15542:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   15544:	4640      	mov	r0, r8
   15546:	2101      	movs	r1, #1
{
   15548:	4614      	mov	r4, r2
   1554a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1554c:	f00a fa2b 	bl	1f9a6 <bt_gatt_change_aware>
   15550:	b388      	cbz	r0, 155b6 <att_read_rsp+0x7e>
	if (!handle) {
   15552:	b396      	cbz	r6, 155ba <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   15554:	2210      	movs	r2, #16
   15556:	2100      	movs	r1, #0
   15558:	4668      	mov	r0, sp
   1555a:	f008 fb85 	bl	1dc68 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1555e:	2200      	movs	r2, #0
   15560:	4621      	mov	r1, r4
   15562:	4640      	mov	r0, r8
   15564:	f009 fdf9 	bl	1f15a <bt_att_create_pdu>
   15568:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1556a:	b340      	cbz	r0, 155be <att_read_rsp+0x86>
	data.offset = offset;
   1556c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   15570:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15574:	2301      	movs	r3, #1
   15576:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1557a:	4a12      	ldr	r2, [pc, #72]	; (155c4 <att_read_rsp+0x8c>)
	data.chan = chan;
   1557c:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1557e:	466b      	mov	r3, sp
   15580:	4631      	mov	r1, r6
   15582:	4630      	mov	r0, r6
   15584:	f009 fa8f 	bl	1eaa6 <bt_gatt_foreach_attr>
	if (data.err) {
   15588:	f89d 400c 	ldrb.w	r4, [sp, #12]
   1558c:	b174      	cbz	r4, 155ac <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   1558e:	9802      	ldr	r0, [sp, #8]
   15590:	f000 ff36 	bl	16400 <net_buf_unref>
	if (!req) {
   15594:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15598:	4632      	mov	r2, r6
   1559a:	4639      	mov	r1, r7
   1559c:	4628      	mov	r0, r5
   1559e:	f009 fdbf 	bl	1f120 <send_err_rsp.part.0>
		return 0;
   155a2:	2400      	movs	r4, #0
}
   155a4:	4620      	mov	r0, r4
   155a6:	b004      	add	sp, #16
   155a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   155ac:	9902      	ldr	r1, [sp, #8]
   155ae:	4628      	mov	r0, r5
   155b0:	f7ff fd62 	bl	15078 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   155b4:	e7f6      	b.n	155a4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   155b6:	2412      	movs	r4, #18
   155b8:	e7f4      	b.n	155a4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   155ba:	2401      	movs	r4, #1
   155bc:	e7f2      	b.n	155a4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   155be:	240e      	movs	r4, #14
   155c0:	e7f0      	b.n	155a4 <att_read_rsp+0x6c>
   155c2:	bf00      	nop
   155c4:	0001f083 	.word	0x0001f083

000155c8 <att_read_type_req>:
{
   155c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   155cc:	7b0c      	ldrb	r4, [r1, #12]
   155ce:	3c04      	subs	r4, #4
   155d0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   155d2:	2c02      	cmp	r4, #2
{
   155d4:	4605      	mov	r5, r0
   155d6:	b08c      	sub	sp, #48	; 0x30
   155d8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   155da:	d001      	beq.n	155e0 <att_read_type_req+0x18>
   155dc:	2c10      	cmp	r4, #16
   155de:	d14f      	bne.n	15680 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   155e0:	2104      	movs	r1, #4
   155e2:	3008      	adds	r0, #8
   155e4:	f00a faba 	bl	1fb5c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   155e8:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   155ec:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   155ee:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   155f0:	1d01      	adds	r1, r0, #4
   155f2:	4622      	mov	r2, r4
   155f4:	4640      	mov	r0, r8
   155f6:	f008 fb8b 	bl	1dd10 <bt_uuid_create>
   155fa:	b188      	cbz	r0, 15620 <att_read_type_req+0x58>
	if (!start || !end) {
   155fc:	b19e      	cbz	r6, 15626 <att_read_type_req+0x5e>
   155fe:	b18f      	cbz	r7, 15624 <att_read_type_req+0x5c>
	if (start > end) {
   15600:	42b7      	cmp	r7, r6
   15602:	d310      	bcc.n	15626 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   15604:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   15606:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   15608:	2100      	movs	r1, #0
   1560a:	eb0d 0002 	add.w	r0, sp, r2
   1560e:	f008 fb2b 	bl	1dc68 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   15612:	2201      	movs	r2, #1
   15614:	2109      	movs	r1, #9
   15616:	4620      	mov	r0, r4
   15618:	f009 fd9f 	bl	1f15a <bt_att_create_pdu>
   1561c:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1561e:	b968      	cbnz	r0, 1563c <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   15620:	240e      	movs	r4, #14
   15622:	e007      	b.n	15634 <att_read_type_req+0x6c>
			*err = 0U;
   15624:	463e      	mov	r6, r7
	if (!req) {
   15626:	2301      	movs	r3, #1
   15628:	4632      	mov	r2, r6
   1562a:	2108      	movs	r1, #8
   1562c:	4628      	mov	r0, r5
   1562e:	f009 fd77 	bl	1f120 <send_err_rsp.part.0>
		return 0;
   15632:	2400      	movs	r4, #0
}
   15634:	4620      	mov	r0, r4
   15636:	b00c      	add	sp, #48	; 0x30
   15638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1563c:	2101      	movs	r1, #1
   1563e:	3008      	adds	r0, #8
	data.uuid = uuid;
   15640:	e9cd 5806 	strd	r5, r8, [sp, #24]
   15644:	f00a fa63 	bl	1fb0e <net_buf_simple_add>
	data.rsp->len = 0U;
   15648:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1564c:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1564e:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   15650:	4a0c      	ldr	r2, [pc, #48]	; (15684 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   15652:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   15656:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   15658:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1565c:	4630      	mov	r0, r6
   1565e:	ab06      	add	r3, sp, #24
   15660:	f009 fa21 	bl	1eaa6 <bt_gatt_foreach_attr>
	if (data.err) {
   15664:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   15668:	b12c      	cbz	r4, 15676 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   1566a:	9808      	ldr	r0, [sp, #32]
   1566c:	f000 fec8 	bl	16400 <net_buf_unref>
	if (!req) {
   15670:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   15674:	e7d8      	b.n	15628 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15676:	9908      	ldr	r1, [sp, #32]
   15678:	4628      	mov	r0, r5
   1567a:	f7ff fcfd 	bl	15078 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   1567e:	e7d9      	b.n	15634 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   15680:	2404      	movs	r4, #4
   15682:	e7d7      	b.n	15634 <att_read_type_req+0x6c>
   15684:	00014f15 	.word	0x00014f15

00015688 <att_find_type_req>:
{
   15688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1568c:	4688      	mov	r8, r1
   1568e:	b086      	sub	sp, #24
   15690:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   15692:	2106      	movs	r1, #6
   15694:	f108 0008 	add.w	r0, r8, #8
   15698:	f00a fa60 	bl	1fb5c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1569c:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   1569e:	b317      	cbz	r7, 156e6 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   156a0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   156a4:	f1b9 0f00 	cmp.w	r9, #0
   156a8:	d01c      	beq.n	156e4 <att_find_type_req+0x5c>
	if (start > end) {
   156aa:	454f      	cmp	r7, r9
   156ac:	d81b      	bhi.n	156e6 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   156ae:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   156b0:	f8ad 3002 	strh.w	r3, [sp, #2]
   156b4:	2400      	movs	r4, #0
   156b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   156ba:	a901      	add	r1, sp, #4
   156bc:	4668      	mov	r0, sp
	value = buf->data;
   156be:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   156c2:	f88d 4000 	strb.w	r4, [sp]
   156c6:	f88d 4004 	strb.w	r4, [sp, #4]
   156ca:	f8ad 3006 	strh.w	r3, [sp, #6]
   156ce:	f008 faf5 	bl	1dcbc <bt_uuid_cmp>
   156d2:	4606      	mov	r6, r0
   156d4:	b190      	cbz	r0, 156fc <att_find_type_req+0x74>
	if (!req) {
   156d6:	230a      	movs	r3, #10
   156d8:	463a      	mov	r2, r7
   156da:	2106      	movs	r1, #6
   156dc:	4628      	mov	r0, r5
   156de:	f009 fd1f 	bl	1f120 <send_err_rsp.part.0>
		return 0;
   156e2:	e007      	b.n	156f4 <att_find_type_req+0x6c>
			*err = 0U;
   156e4:	464f      	mov	r7, r9
	if (!req) {
   156e6:	2301      	movs	r3, #1
   156e8:	463a      	mov	r2, r7
   156ea:	2106      	movs	r1, #6
   156ec:	4628      	mov	r0, r5
   156ee:	f009 fd17 	bl	1f120 <send_err_rsp.part.0>
		return 0;
   156f2:	2400      	movs	r4, #0
}
   156f4:	4620      	mov	r0, r4
   156f6:	b006      	add	sp, #24
   156f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   156fc:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   15700:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   15704:	4601      	mov	r1, r0
   15706:	2214      	movs	r2, #20
   15708:	a801      	add	r0, sp, #4
   1570a:	f008 faad 	bl	1dc68 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1570e:	4632      	mov	r2, r6
   15710:	2107      	movs	r1, #7
   15712:	4640      	mov	r0, r8
   15714:	f009 fd21 	bl	1f15a <bt_att_create_pdu>
   15718:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1571a:	b1d8      	cbz	r0, 15754 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1571c:	230a      	movs	r3, #10
   1571e:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   15722:	4a0d      	ldr	r2, [pc, #52]	; (15758 <att_find_type_req+0xd0>)
	data.value_len = value_len;
   15724:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   15728:	ab01      	add	r3, sp, #4
   1572a:	4649      	mov	r1, r9
   1572c:	4638      	mov	r0, r7
	data.value = value;
   1572e:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   15732:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   15734:	f009 f9b7 	bl	1eaa6 <bt_gatt_foreach_attr>
	if (data.err) {
   15738:	f89d 4015 	ldrb.w	r4, [sp, #21]
   1573c:	b12c      	cbz	r4, 1574a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   1573e:	9802      	ldr	r0, [sp, #8]
   15740:	f000 fe5e 	bl	16400 <net_buf_unref>
	if (!req) {
   15744:	f89d 3015 	ldrb.w	r3, [sp, #21]
   15748:	e7ce      	b.n	156e8 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1574a:	9902      	ldr	r1, [sp, #8]
   1574c:	4628      	mov	r0, r5
   1574e:	f7ff fc93 	bl	15078 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   15752:	e7cf      	b.n	156f4 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   15754:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   15756:	e7cd      	b.n	156f4 <att_find_type_req+0x6c>
   15758:	0001ebd3 	.word	0x0001ebd3

0001575c <att_find_info_req>:
{
   1575c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1575e:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   15760:	881e      	ldrh	r6, [r3, #0]
{
   15762:	b085      	sub	sp, #20
   15764:	4605      	mov	r5, r0
	if (!start || !end) {
   15766:	b19e      	cbz	r6, 15790 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   15768:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   1576a:	b184      	cbz	r4, 1578e <att_find_info_req+0x32>
	if (start > end) {
   1576c:	42b4      	cmp	r4, r6
   1576e:	d30f      	bcc.n	15790 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   15770:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   15772:	2210      	movs	r2, #16
   15774:	2100      	movs	r1, #0
   15776:	4668      	mov	r0, sp
   15778:	f008 fa76 	bl	1dc68 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1577c:	2200      	movs	r2, #0
   1577e:	2105      	movs	r1, #5
   15780:	4638      	mov	r0, r7
   15782:	f009 fcea 	bl	1f15a <bt_att_create_pdu>
   15786:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   15788:	b958      	cbnz	r0, 157a2 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1578a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1578c:	e007      	b.n	1579e <att_find_info_req+0x42>
			*err = 0U;
   1578e:	4626      	mov	r6, r4
	if (!req) {
   15790:	2301      	movs	r3, #1
   15792:	4632      	mov	r2, r6
   15794:	2104      	movs	r1, #4
   15796:	4628      	mov	r0, r5
   15798:	f009 fcc2 	bl	1f120 <send_err_rsp.part.0>
	return 0;
   1579c:	2000      	movs	r0, #0
}
   1579e:	b005      	add	sp, #20
   157a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   157a2:	4621      	mov	r1, r4
   157a4:	4a08      	ldr	r2, [pc, #32]	; (157c8 <att_find_info_req+0x6c>)
	data.chan = chan;
   157a6:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   157a8:	466b      	mov	r3, sp
   157aa:	4630      	mov	r0, r6
   157ac:	f009 f97b 	bl	1eaa6 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   157b0:	9c02      	ldr	r4, [sp, #8]
   157b2:	b924      	cbnz	r4, 157be <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   157b4:	9801      	ldr	r0, [sp, #4]
   157b6:	f000 fe23 	bl	16400 <net_buf_unref>
	if (!req) {
   157ba:	230a      	movs	r3, #10
   157bc:	e7e9      	b.n	15792 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   157be:	9901      	ldr	r1, [sp, #4]
   157c0:	4628      	mov	r0, r5
   157c2:	f7ff fc59 	bl	15078 <bt_att_chan_send_rsp.constprop.0>
   157c6:	e7e9      	b.n	1579c <att_find_info_req+0x40>
   157c8:	0001ecfb 	.word	0x0001ecfb

000157cc <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   157cc:	b513      	push	{r0, r1, r4, lr}
   157ce:	4602      	mov	r2, r0
   157d0:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   157d2:	4808      	ldr	r0, [pc, #32]	; (157f4 <bt_att_req_alloc+0x28>)
   157d4:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   157d6:	2400      	movs	r4, #0
   157d8:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   157da:	f003 f8b1 	bl	18940 <k_mem_slab_alloc>
   157de:	4601      	mov	r1, r0
   157e0:	b930      	cbnz	r0, 157f0 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   157e2:	9801      	ldr	r0, [sp, #4]
   157e4:	2210      	movs	r2, #16
   157e6:	f008 fa3f 	bl	1dc68 <memset>

	return req;
   157ea:	9801      	ldr	r0, [sp, #4]
}
   157ec:	b002      	add	sp, #8
   157ee:	bd10      	pop	{r4, pc}
		return NULL;
   157f0:	4620      	mov	r0, r4
   157f2:	e7fb      	b.n	157ec <bt_att_req_alloc+0x20>
   157f4:	200007d0 	.word	0x200007d0

000157f8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   157f8:	b507      	push	{r0, r1, r2, lr}
   157fa:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   157fc:	6880      	ldr	r0, [r0, #8]
   157fe:	b120      	cbz	r0, 1580a <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   15800:	f000 fdfe 	bl	16400 <net_buf_unref>
		req->buf = NULL;
   15804:	9b01      	ldr	r3, [sp, #4]
   15806:	2200      	movs	r2, #0
   15808:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1580a:	4803      	ldr	r0, [pc, #12]	; (15818 <bt_att_req_free+0x20>)
   1580c:	a901      	add	r1, sp, #4
   1580e:	f00a fca0 	bl	20152 <k_mem_slab_free>
}
   15812:	b003      	add	sp, #12
   15814:	f85d fb04 	ldr.w	pc, [sp], #4
   15818:	200007d0 	.word	0x200007d0

0001581c <att_handle_rsp>:
{
   1581c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   15820:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   15822:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   15826:	4688      	mov	r8, r1
   15828:	4691      	mov	r9, r2
   1582a:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1582c:	f00a fe49 	bl	204c2 <k_work_cancel_delayable>
	if (!chan->req) {
   15830:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   15834:	2600      	movs	r6, #0
   15836:	b1f0      	cbz	r0, 15876 <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
   15838:	4b10      	ldr	r3, [pc, #64]	; (1587c <att_handle_rsp+0x60>)
   1583a:	4298      	cmp	r0, r3
   1583c:	d112      	bne.n	15864 <att_handle_rsp+0x48>
		chan->req = NULL;
   1583e:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
   15842:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
   15844:	6820      	ldr	r0, [r4, #0]
   15846:	f009 fb85 	bl	1ef54 <att_req_send_process>
	if (func) {
   1584a:	b13d      	cbz	r5, 1585c <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
   1584c:	6820      	ldr	r0, [r4, #0]
   1584e:	f8cd a000 	str.w	sl, [sp]
   15852:	6800      	ldr	r0, [r0, #0]
   15854:	464b      	mov	r3, r9
   15856:	4642      	mov	r2, r8
   15858:	4639      	mov	r1, r7
   1585a:	47a8      	blx	r5
}
   1585c:	2000      	movs	r0, #0
   1585e:	b002      	add	sp, #8
   15860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
   15864:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   15866:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
   15868:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   1586c:	f7ff ffc4 	bl	157f8 <bt_att_req_free>
	chan->req = NULL;
   15870:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
   15874:	e7e6      	b.n	15844 <att_handle_rsp+0x28>
	bt_att_func_t func = NULL;
   15876:	4605      	mov	r5, r0
   15878:	e7e4      	b.n	15844 <att_handle_rsp+0x28>
   1587a:	bf00      	nop
   1587c:	20002320 	.word	0x20002320

00015880 <bt_att_disconnected>:
{
   15880:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   15882:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   15886:	b085      	sub	sp, #20
   15888:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1588a:	b385      	cbz	r5, 158ee <bt_att_disconnected+0x6e>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1588c:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   15890:	f105 0024 	add.w	r0, r5, #36	; 0x24
   15894:	f009 f89f 	bl	1e9d6 <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   15898:	f1a4 0608 	sub.w	r6, r4, #8
   1589c:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   158a0:	2200      	movs	r2, #0
   158a2:	2300      	movs	r3, #0
   158a4:	4638      	mov	r0, r7
   158a6:	f00a f8e1 	bl	1fa6c <net_buf_get>
   158aa:	4602      	mov	r2, r0
   158ac:	bb08      	cbnz	r0, 158f2 <bt_att_disconnected+0x72>
	if (chan->req) {
   158ae:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   158b2:	b123      	cbz	r3, 158be <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   158b4:	4601      	mov	r1, r0
   158b6:	230e      	movs	r3, #14
   158b8:	4630      	mov	r0, r6
   158ba:	f7ff ffaf 	bl	1581c <att_handle_rsp>
	chan->att = NULL;
   158be:	2300      	movs	r3, #0
   158c0:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   158c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   158c6:	b993      	cbnz	r3, 158ee <bt_att_disconnected+0x6e>
	att_reset(att);
   158c8:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   158ca:	9803      	ldr	r0, [sp, #12]
   158cc:	2200      	movs	r2, #0
   158ce:	2300      	movs	r3, #0
   158d0:	300c      	adds	r0, #12
   158d2:	f00a f8cb 	bl	1fa6c <net_buf_get>
   158d6:	b978      	cbnz	r0, 158f8 <bt_att_disconnected+0x78>
	att->conn = NULL;
   158d8:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   158da:	6856      	ldr	r6, [r2, #4]
	att->conn = NULL;
   158dc:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   158de:	b976      	cbnz	r6, 158fe <bt_att_disconnected+0x7e>
	k_mem_slab_free(&att_slab, (void **)&att);
   158e0:	4813      	ldr	r0, [pc, #76]	; (15930 <bt_att_disconnected+0xb0>)
   158e2:	a903      	add	r1, sp, #12
   158e4:	f00a fc35 	bl	20152 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   158e8:	6820      	ldr	r0, [r4, #0]
   158ea:	f000 fc8f 	bl	1620c <bt_gatt_disconnected>
}
   158ee:	b005      	add	sp, #20
   158f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   158f2:	f000 fd85 	bl	16400 <net_buf_unref>
   158f6:	e7d3      	b.n	158a0 <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   158f8:	f000 fd82 	bl	16400 <net_buf_unref>
   158fc:	e7e5      	b.n	158ca <bt_att_disconnected+0x4a>
	return node->next;
   158fe:	6835      	ldr	r5, [r6, #0]
   15900:	2d00      	cmp	r5, #0
   15902:	bf38      	it	cc
   15904:	2500      	movcc	r5, #0
		if (req->func) {
   15906:	6877      	ldr	r7, [r6, #4]
   15908:	b137      	cbz	r7, 15918 <bt_att_disconnected+0x98>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1590a:	68f3      	ldr	r3, [r6, #12]
   1590c:	9300      	str	r3, [sp, #0]
   1590e:	2300      	movs	r3, #0
   15910:	461a      	mov	r2, r3
   15912:	210e      	movs	r1, #14
   15914:	4618      	mov	r0, r3
   15916:	47b8      	blx	r7
		bt_att_req_free(req);
   15918:	4630      	mov	r0, r6
   1591a:	f7ff ff6d 	bl	157f8 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1591e:	2d00      	cmp	r5, #0
   15920:	d0de      	beq.n	158e0 <bt_att_disconnected+0x60>
   15922:	682b      	ldr	r3, [r5, #0]
   15924:	2b00      	cmp	r3, #0
   15926:	bf38      	it	cc
   15928:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1592a:	462e      	mov	r6, r5
   1592c:	461d      	mov	r5, r3
   1592e:	e7ea      	b.n	15906 <bt_att_disconnected+0x86>
   15930:	20000798 	.word	0x20000798

00015934 <find_sc_cfg>:
	struct k_work_sync sync;
} db_hash;
#endif

static struct gatt_sc_cfg *find_sc_cfg(uint8_t id, bt_addr_le_t *addr)
{
   15934:	b510      	push	{r4, lr}
	BT_DBG("id: %u, addr: %s", id, bt_addr_le_str(addr));

	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
		if (id == sc_cfg[i].id &&
   15936:	4c06      	ldr	r4, [pc, #24]	; (15950 <find_sc_cfg+0x1c>)
   15938:	7823      	ldrb	r3, [r4, #0]
   1593a:	4283      	cmp	r3, r0
   1593c:	d104      	bne.n	15948 <find_sc_cfg+0x14>
	return memcmp(a, b, sizeof(*a));
   1593e:	2207      	movs	r2, #7
   15940:	1c60      	adds	r0, r4, #1
   15942:	f008 f95f 	bl	1dc04 <memcmp>
   15946:	b108      	cbz	r0, 1594c <find_sc_cfg+0x18>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
			return &sc_cfg[i];
		}
	}

	return NULL;
   15948:	2000      	movs	r0, #0
}
   1594a:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   1594c:	4620      	mov	r0, r4
   1594e:	e7fc      	b.n	1594a <find_sc_cfg+0x16>
   15950:	20002edc 	.word	0x20002edc

00015954 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   15954:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15956:	4d0d      	ldr	r5, [pc, #52]	; (1598c <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   15958:	4604      	mov	r4, r0
   1595a:	b968      	cbnz	r0, 15978 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1595c:	9000      	str	r0, [sp, #0]
   1595e:	2207      	movs	r2, #7
   15960:	f8cd 0003 	str.w	r0, [sp, #3]
   15964:	4669      	mov	r1, sp
   15966:	1c68      	adds	r0, r5, #1
   15968:	f008 f94c 	bl	1dc04 <memcmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1596c:	2800      	cmp	r0, #0
   1596e:	bf08      	it	eq
   15970:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
   15972:	4620      	mov	r0, r4
   15974:	b003      	add	sp, #12
   15976:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   15978:	462a      	mov	r2, r5
   1597a:	f812 1b01 	ldrb.w	r1, [r2], #1
   1597e:	f008 fed4 	bl	1e72a <bt_conn_is_peer_addr_le>
   15982:	2800      	cmp	r0, #0
	return NULL;
   15984:	bf14      	ite	ne
   15986:	462c      	movne	r4, r5
   15988:	2400      	moveq	r4, #0
   1598a:	e7f2      	b.n	15972 <find_cf_cfg+0x1e>
   1598c:	20002338 	.word	0x20002338

00015990 <sc_indicate_rsp>:
}

#if defined(CONFIG_BT_GATT_SERVICE_CHANGED)
static void sc_indicate_rsp(struct bt_conn *conn,
			    struct bt_gatt_indicate_params *params, uint8_t err)
{
   15990:	b510      	push	{r4, lr}
   15992:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15994:	4814      	ldr	r0, [pc, #80]	; (159e8 <sc_indicate_rsp+0x58>)
   15996:	f3bf 8f5b 	dmb	ish
   1599a:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1599e:	e853 2f00 	ldrex	r2, [r3]
   159a2:	f022 0202 	bic.w	r2, r2, #2
   159a6:	e843 2100 	strex	r1, r2, [r3]
   159aa:	2900      	cmp	r1, #0
   159ac:	d1f7      	bne.n	1599e <sc_indicate_rsp+0xe>
   159ae:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   159b2:	f3bf 8f5b 	dmb	ish
   159b6:	6d03      	ldr	r3, [r0, #80]	; 0x50
   159b8:	f3bf 8f5b 	dmb	ish
	BT_DBG("err 0x%02x", err);

	atomic_clear_bit(gatt_sc.flags, SC_INDICATE_PENDING);

	/* Check if there is new change in the meantime */
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   159bc:	07da      	lsls	r2, r3, #31
   159be:	d504      	bpl.n	159ca <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
   159c0:	2200      	movs	r2, #0
   159c2:	2300      	movs	r3, #0
   159c4:	3020      	adds	r0, #32
   159c6:	f003 fbc9 	bl	1915c <k_work_reschedule>
	/* BLUETOOTH CORE SPECIFICATION Version 5.1 | Vol 3, Part G page 2347:
	 * 2.5.2.1 Robust Caching
	 * A connected client becomes change-aware when...
	 * The client receives and confirms a Service Changed indication.
	 */
	cfg = find_cf_cfg(conn);
   159ca:	4620      	mov	r0, r4
   159cc:	f7ff ffc2 	bl	15954 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   159d0:	b140      	cbz	r0, 159e4 <sc_indicate_rsp+0x54>
   159d2:	7a03      	ldrb	r3, [r0, #8]
   159d4:	07db      	lsls	r3, r3, #31
   159d6:	d505      	bpl.n	159e4 <sc_indicate_rsp+0x54>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
		BT_DBG("%s change-aware", bt_addr_le_str(&cfg->peer));
	}
#endif
}
   159d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   159dc:	2100      	movs	r1, #0
   159de:	300c      	adds	r0, #12
   159e0:	f009 bd31 	b.w	1f446 <atomic_set_bit>
}
   159e4:	bd10      	pop	{r4, pc}
   159e6:	bf00      	nop
   159e8:	200018b0 	.word	0x200018b0

000159ec <read_ppcp>:
{
   159ec:	b513      	push	{r0, r1, r4, lr}
   159ee:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   159f2:	4c0b      	ldr	r4, [pc, #44]	; (15a20 <read_ppcp+0x34>)
{
   159f4:	4610      	mov	r0, r2
			  void *buf, uint16_t buf_len, uint16_t offset,
			  const void *value, uint16_t value_len)
{
	uint16_t len;

	if (offset > value_len) {
   159f6:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   159f8:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   159fc:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   15a00:	d80b      	bhi.n	15a1a <read_ppcp+0x2e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	len = MIN(buf_len, value_len - offset);
   15a02:	f1c1 0408 	rsb	r4, r1, #8
   15a06:	429c      	cmp	r4, r3
   15a08:	bfa8      	it	ge
   15a0a:	461c      	movge	r4, r3

	BT_DBG("handle 0x%04x offset %u length %u", attr->handle, offset,
	       len);

	memcpy(buf, (uint8_t *)value + offset, len);
   15a0c:	4622      	mov	r2, r4
   15a0e:	4469      	add	r1, sp
   15a10:	f008 f91f 	bl	1dc52 <memcpy>
}
   15a14:	4620      	mov	r0, r4
   15a16:	b002      	add	sp, #8
   15a18:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   15a1a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   15a1e:	e7f9      	b.n	15a14 <read_ppcp+0x28>
   15a20:	00280018 	.word	0x00280018

00015a24 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   15a24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   15a28:	4b24      	ldr	r3, [pc, #144]	; (15abc <disconnected_cb+0x98>)
{
   15a2a:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   15a2c:	6882      	ldr	r2, [r0, #8]
   15a2e:	429a      	cmp	r2, r3
{
   15a30:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   15a32:	d102      	bne.n	15a3a <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   15a34:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   15a36:	8963      	ldrh	r3, [r4, #10]
   15a38:	bb13      	cbnz	r3, 15a80 <disconnected_cb+0x5c>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   15a3a:	2001      	movs	r0, #1
   15a3c:	b002      	add	sp, #8
   15a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   15a42:	f105 0888 	add.w	r8, r5, #136	; 0x88
   15a46:	7a28      	ldrb	r0, [r5, #8]
   15a48:	4641      	mov	r1, r8
   15a4a:	f008 fc19 	bl	1e280 <bt_addr_le_is_bonded>
   15a4e:	b988      	cbnz	r0, 15a74 <disconnected_cb+0x50>
				if (ccc == &sc_ccc) {
   15a50:	4b1b      	ldr	r3, [pc, #108]	; (15ac0 <disconnected_cb+0x9c>)
   15a52:	429c      	cmp	r4, r3
   15a54:	d102      	bne.n	15a5c <disconnected_cb+0x38>
					sc_clear(conn);
   15a56:	4628      	mov	r0, r5
   15a58:	f009 feba 	bl	1f7d0 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   15a5c:	2500      	movs	r5, #0
	memcpy(dst, src, sizeof(*dst));
   15a5e:	2207      	movs	r2, #7
   15a60:	4669      	mov	r1, sp
   15a62:	4630      	mov	r0, r6
   15a64:	9500      	str	r5, [sp, #0]
   15a66:	f8cd 5003 	str.w	r5, [sp, #3]
   15a6a:	f008 f8f2 	bl	1dc52 <memcpy>
	cfg->id = 0U;
   15a6e:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   15a70:	8125      	strh	r5, [r4, #8]
	if (!value_used) {
   15a72:	e01a      	b.n	15aaa <disconnected_cb+0x86>
   15a74:	2207      	movs	r2, #7
   15a76:	4641      	mov	r1, r8
   15a78:	4630      	mov	r0, r6
   15a7a:	f008 f8ea 	bl	1dc52 <memcpy>
   15a7e:	e014      	b.n	15aaa <disconnected_cb+0x86>
		if (!cfg->value) {
   15a80:	8923      	ldrh	r3, [r4, #8]
   15a82:	b193      	cbz	r3, 15aaa <disconnected_cb+0x86>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   15a84:	4626      	mov	r6, r4
   15a86:	4628      	mov	r0, r5
   15a88:	f816 1b01 	ldrb.w	r1, [r6], #1
   15a8c:	4632      	mov	r2, r6
   15a8e:	f008 fe4c 	bl	1e72a <bt_conn_is_peer_addr_le>
   15a92:	2800      	cmp	r0, #0
   15a94:	d1d5      	bne.n	15a42 <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   15a96:	7820      	ldrb	r0, [r4, #0]
   15a98:	4631      	mov	r1, r6
   15a9a:	f7fe ff91 	bl	149c0 <bt_conn_lookup_addr_le>
			if (tmp) {
   15a9e:	b120      	cbz	r0, 15aaa <disconnected_cb+0x86>
				if (tmp->state == BT_CONN_CONNECTED) {
   15aa0:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
   15aa2:	f008 fdfb 	bl	1e69c <bt_conn_unref>
	if (!value_used) {
   15aa6:	2d07      	cmp	r5, #7
   15aa8:	d0c7      	beq.n	15a3a <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   15aaa:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   15aac:	2100      	movs	r1, #0
   15aae:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   15ab0:	2b00      	cmp	r3, #0
   15ab2:	d0c2      	beq.n	15a3a <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   15ab4:	4638      	mov	r0, r7
   15ab6:	4798      	blx	r3
   15ab8:	e7bf      	b.n	15a3a <disconnected_cb+0x16>
   15aba:	bf00      	nop
   15abc:	0001f4b3 	.word	0x0001f4b3
   15ac0:	200005b4 	.word	0x200005b4

00015ac4 <bt_gatt_init>:
{
   15ac4:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   15ac6:	4b20      	ldr	r3, [pc, #128]	; (15b48 <bt_gatt_init+0x84>)
   15ac8:	f3bf 8f5b 	dmb	ish
   15acc:	2201      	movs	r2, #1
   15ace:	e853 1f00 	ldrex	r1, [r3]
   15ad2:	2900      	cmp	r1, #0
   15ad4:	d103      	bne.n	15ade <bt_gatt_init+0x1a>
   15ad6:	e843 2000 	strex	r0, r2, [r3]
   15ada:	2800      	cmp	r0, #0
   15adc:	d1f7      	bne.n	15ace <bt_gatt_init+0xa>
   15ade:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   15ae2:	d130      	bne.n	15b46 <bt_gatt_init+0x82>
   15ae4:	f3bf 8f5b 	dmb	ish
   15ae8:	4b18      	ldr	r3, [pc, #96]	; (15b4c <bt_gatt_init+0x88>)
   15aea:	e853 1f00 	ldrex	r1, [r3]
   15aee:	2900      	cmp	r1, #0
   15af0:	d103      	bne.n	15afa <bt_gatt_init+0x36>
   15af2:	e843 2000 	strex	r0, r2, [r3]
   15af6:	2800      	cmp	r0, #0
   15af8:	d1f7      	bne.n	15aea <bt_gatt_init+0x26>
   15afa:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   15afe:	d108      	bne.n	15b12 <bt_gatt_init+0x4e>
   15b00:	4a13      	ldr	r2, [pc, #76]	; (15b50 <bt_gatt_init+0x8c>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   15b02:	4914      	ldr	r1, [pc, #80]	; (15b54 <bt_gatt_init+0x90>)
   15b04:	8813      	ldrh	r3, [r2, #0]
   15b06:	4c14      	ldr	r4, [pc, #80]	; (15b58 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
   15b08:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   15b0a:	42a1      	cmp	r1, r4
   15b0c:	d315      	bcc.n	15b3a <bt_gatt_init+0x76>
   15b0e:	b100      	cbz	r0, 15b12 <bt_gatt_init+0x4e>
   15b10:	8013      	strh	r3, [r2, #0]
	list->head = NULL;
   15b12:	4b12      	ldr	r3, [pc, #72]	; (15b5c <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   15b14:	4912      	ldr	r1, [pc, #72]	; (15b60 <bt_gatt_init+0x9c>)
   15b16:	4813      	ldr	r0, [pc, #76]	; (15b64 <bt_gatt_init+0xa0>)
   15b18:	2200      	movs	r2, #0
	list->tail = NULL;
   15b1a:	e9c3 2200 	strd	r2, r2, [r3]
   15b1e:	f00a fcc4 	bl	204aa <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   15b22:	4810      	ldr	r0, [pc, #64]	; (15b64 <bt_gatt_init+0xa0>)
   15b24:	f44f 72a4 	mov.w	r2, #328	; 0x148
   15b28:	2300      	movs	r3, #0
   15b2a:	f003 fae3 	bl	190f4 <k_work_schedule>
}
   15b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   15b32:	490d      	ldr	r1, [pc, #52]	; (15b68 <bt_gatt_init+0xa4>)
   15b34:	480d      	ldr	r0, [pc, #52]	; (15b6c <bt_gatt_init+0xa8>)
   15b36:	f00a bcb8 	b.w	204aa <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   15b3a:	6848      	ldr	r0, [r1, #4]
   15b3c:	4403      	add	r3, r0
   15b3e:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   15b40:	3108      	adds	r1, #8
   15b42:	2001      	movs	r0, #1
   15b44:	e7e1      	b.n	15b0a <bt_gatt_init+0x46>
}
   15b46:	bd10      	pop	{r4, pc}
   15b48:	20002348 	.word	0x20002348
   15b4c:	20002364 	.word	0x20002364
   15b50:	20002eda 	.word	0x20002eda
   15b54:	00020dfc 	.word	0x00020dfc
   15b58:	00020e24 	.word	0x00020e24
   15b5c:	20002330 	.word	0x20002330
   15b60:	0001f8f7 	.word	0x0001f8f7
   15b64:	20001858 	.word	0x20001858
   15b68:	00015e7d 	.word	0x00015e7d
   15b6c:	200018d0 	.word	0x200018d0

00015b70 <bt_gatt_attr_get_handle>:
{
   15b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   15b74:	4603      	mov	r3, r0
   15b76:	b148      	cbz	r0, 15b8c <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   15b78:	8a00      	ldrh	r0, [r0, #16]
   15b7a:	b938      	cbnz	r0, 15b8c <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   15b7c:	4912      	ldr	r1, [pc, #72]	; (15bc8 <bt_gatt_attr_get_handle+0x58>)
   15b7e:	f8df e04c 	ldr.w	lr, [pc, #76]	; 15bcc <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   15b82:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   15b84:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   15b88:	4571      	cmp	r1, lr
   15b8a:	d301      	bcc.n	15b90 <bt_gatt_attr_get_handle+0x20>
}
   15b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
   15b90:	e9d1 7600 	ldrd	r7, r6, [r1]
   15b94:	42bb      	cmp	r3, r7
   15b96:	d304      	bcc.n	15ba2 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   15b98:	fb0c 7206 	mla	r2, ip, r6, r7
   15b9c:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   15b9e:	4293      	cmp	r3, r2
   15ba0:	d90e      	bls.n	15bc0 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   15ba2:	19a2      	adds	r2, r4, r6
   15ba4:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   15ba6:	3108      	adds	r1, #8
   15ba8:	4614      	mov	r4, r2
   15baa:	e7ed      	b.n	15b88 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   15bac:	fb0c 7805 	mla	r8, ip, r5, r7
   15bb0:	4543      	cmp	r3, r8
   15bb2:	d007      	beq.n	15bc4 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   15bb4:	3501      	adds	r5, #1
   15bb6:	1962      	adds	r2, r4, r5
   15bb8:	42b5      	cmp	r5, r6
   15bba:	b292      	uxth	r2, r2
   15bbc:	d1f6      	bne.n	15bac <bt_gatt_attr_get_handle+0x3c>
   15bbe:	e7f2      	b.n	15ba6 <bt_gatt_attr_get_handle+0x36>
   15bc0:	2500      	movs	r5, #0
   15bc2:	e7f8      	b.n	15bb6 <bt_gatt_attr_get_handle+0x46>
   15bc4:	4610      	mov	r0, r2
   15bc6:	e7e1      	b.n	15b8c <bt_gatt_attr_get_handle+0x1c>
   15bc8:	00020dfc 	.word	0x00020dfc
   15bcc:	00020e24 	.word	0x00020e24

00015bd0 <bt_gatt_foreach_attr_type>:
{
   15bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bd4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   15bd8:	9100      	str	r1, [sp, #0]
   15bda:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   15bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15be0:	2d00      	cmp	r5, #0
   15be2:	bf08      	it	eq
   15be4:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   15be6:	4b24      	ldr	r3, [pc, #144]	; (15c78 <bt_gatt_foreach_attr_type+0xa8>)
   15be8:	881b      	ldrh	r3, [r3, #0]
   15bea:	4283      	cmp	r3, r0
{
   15bec:	4607      	mov	r7, r0
   15bee:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   15bf0:	d23c      	bcs.n	15c6c <bt_gatt_foreach_attr_type+0x9c>
}
   15bf2:	b003      	add	sp, #12
   15bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   15bf8:	6873      	ldr	r3, [r6, #4]
   15bfa:	4423      	add	r3, r4
   15bfc:	42bb      	cmp	r3, r7
   15bfe:	d232      	bcs.n	15c66 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   15c00:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   15c02:	3608      	adds	r6, #8
   15c04:	4b1d      	ldr	r3, [pc, #116]	; (15c7c <bt_gatt_foreach_attr_type+0xac>)
   15c06:	429e      	cmp	r6, r3
   15c08:	d3f6      	bcc.n	15bf8 <bt_gatt_foreach_attr_type+0x28>
   15c0a:	e7f2      	b.n	15bf2 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   15c0c:	5889      	ldr	r1, [r1, r2]
   15c0e:	9301      	str	r3, [sp, #4]
   15c10:	4640      	mov	r0, r8
   15c12:	f008 f853 	bl	1dcbc <bt_uuid_cmp>
   15c16:	9b01      	ldr	r3, [sp, #4]
   15c18:	b190      	cbz	r0, 15c40 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   15c1a:	3401      	adds	r4, #1
   15c1c:	f10a 0a01 	add.w	sl, sl, #1
   15c20:	b2a4      	uxth	r4, r4
   15c22:	6873      	ldr	r3, [r6, #4]
   15c24:	4553      	cmp	r3, sl
   15c26:	d9ec      	bls.n	15c02 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   15c28:	9b00      	ldr	r3, [sp, #0]
   15c2a:	429c      	cmp	r4, r3
   15c2c:	d8e1      	bhi.n	15bf2 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   15c2e:	42bc      	cmp	r4, r7
   15c30:	d3f3      	bcc.n	15c1a <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   15c32:	6831      	ldr	r1, [r6, #0]
   15c34:	fb0b f20a 	mul.w	r2, fp, sl
   15c38:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   15c3a:	f1b8 0f00 	cmp.w	r8, #0
   15c3e:	d1e5      	bne.n	15c0c <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   15c40:	f1b9 0f00 	cmp.w	r9, #0
   15c44:	d10b      	bne.n	15c5e <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   15c46:	3d01      	subs	r5, #1
   15c48:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   15c4a:	4618      	mov	r0, r3
   15c4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   15c4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15c50:	4621      	mov	r1, r4
   15c52:	4798      	blx	r3
	if (!*num_matches) {
   15c54:	2d00      	cmp	r5, #0
   15c56:	d0cc      	beq.n	15bf2 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   15c58:	2800      	cmp	r0, #0
   15c5a:	d1de      	bne.n	15c1a <bt_gatt_foreach_attr_type+0x4a>
   15c5c:	e7c9      	b.n	15bf2 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   15c5e:	68da      	ldr	r2, [r3, #12]
   15c60:	4591      	cmp	r9, r2
   15c62:	d1da      	bne.n	15c1a <bt_gatt_foreach_attr_type+0x4a>
   15c64:	e7ef      	b.n	15c46 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   15c66:	f04f 0a00 	mov.w	sl, #0
   15c6a:	e7da      	b.n	15c22 <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   15c6c:	4e04      	ldr	r6, [pc, #16]	; (15c80 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   15c6e:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   15c70:	f04f 0b14 	mov.w	fp, #20
   15c74:	e7c6      	b.n	15c04 <bt_gatt_foreach_attr_type+0x34>
   15c76:	bf00      	nop
   15c78:	20002eda 	.word	0x20002eda
   15c7c:	00020e24 	.word	0x00020e24
   15c80:	00020dfc 	.word	0x00020dfc

00015c84 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
   15c84:	b510      	push	{r4, lr}
   15c86:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   15c88:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   15c8a:	aa1c      	add	r2, sp, #112	; 0x70
   15c8c:	4669      	mov	r1, sp
   15c8e:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   15c90:	e9cd 3300 	strd	r3, r3, [sp]
   15c94:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   15c98:	f007 fe9b 	bl	1d9d2 <tc_cmac_setup>
   15c9c:	b320      	cbz	r0, 15ce8 <db_hash_gen.isra.0+0x64>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   15c9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15ca2:	2001      	movs	r0, #1
   15ca4:	4a11      	ldr	r2, [pc, #68]	; (15cec <db_hash_gen.isra.0+0x68>)
   15ca6:	ab04      	add	r3, sp, #16
   15ca8:	f009 fe1a 	bl	1f8e0 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   15cac:	4810      	ldr	r0, [pc, #64]	; (15cf0 <db_hash_gen.isra.0+0x6c>)
   15cae:	a904      	add	r1, sp, #16
   15cb0:	f007 ff26 	bl	1db00 <tc_cmac_final>
   15cb4:	b1c0      	cbz	r0, 15ce8 <db_hash_gen.isra.0+0x64>
   15cb6:	4b0e      	ldr	r3, [pc, #56]	; (15cf0 <db_hash_gen.isra.0+0x6c>)
   15cb8:	2208      	movs	r2, #8
   15cba:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   15cbe:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   15cc0:	780c      	ldrb	r4, [r1, #0]
   15cc2:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   15cc6:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   15cc8:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   15ccc:	d1f7      	bne.n	15cbe <db_hash_gen.isra.0+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15cce:	f3bf 8f5b 	dmb	ish
   15cd2:	4b08      	ldr	r3, [pc, #32]	; (15cf4 <db_hash_gen.isra.0+0x70>)
   15cd4:	e853 2f00 	ldrex	r2, [r3]
   15cd8:	f042 0204 	orr.w	r2, r2, #4
   15cdc:	e843 2100 	strex	r1, r2, [r3]
   15ce0:	2900      	cmp	r1, #0
   15ce2:	d1f7      	bne.n	15cd4 <db_hash_gen.isra.0+0x50>
   15ce4:	f3bf 8f5b 	dmb	ish
}
   15ce8:	b048      	add	sp, #288	; 0x120
   15cea:	bd10      	pop	{r4, pc}
   15cec:	0001f39b 	.word	0x0001f39b
   15cf0:	20001848 	.word	0x20001848
   15cf4:	20001900 	.word	0x20001900

00015cf8 <gatt_indicate>:
{
   15cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15cfc:	4615      	mov	r5, r2
   15cfe:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   15d00:	2214      	movs	r2, #20
   15d02:	6869      	ldr	r1, [r5, #4]
{
   15d04:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   15d06:	f009 fdf8 	bl	1f8fa <bt_gatt_check_perm>
   15d0a:	2800      	cmp	r0, #0
   15d0c:	d139      	bne.n	15d82 <gatt_indicate+0x8a>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   15d0e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   15d12:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   15d14:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   15d16:	f7ff fd59 	bl	157cc <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   15d1a:	3602      	adds	r6, #2
	if (!req) {
   15d1c:	4604      	mov	r4, r0
   15d1e:	b920      	cbnz	r0, 15d2a <gatt_indicate+0x32>
		return -ENOMEM;
   15d20:	f06f 050b 	mvn.w	r5, #11
}
   15d24:	4628      	mov	r0, r5
   15d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
   15d2a:	4b17      	ldr	r3, [pc, #92]	; (15d88 <gatt_indicate+0x90>)
   15d2c:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   15d2e:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   15d30:	4632      	mov	r2, r6
   15d32:	211d      	movs	r1, #29
   15d34:	4640      	mov	r0, r8
   15d36:	f009 fa10 	bl	1f15a <bt_att_create_pdu>
	if (!buf) {
   15d3a:	4606      	mov	r6, r0
   15d3c:	b918      	cbnz	r0, 15d46 <gatt_indicate+0x4e>
		bt_att_req_free(req);
   15d3e:	4620      	mov	r0, r4
   15d40:	f7ff fd5a 	bl	157f8 <bt_att_req_free>
   15d44:	e7ec      	b.n	15d20 <gatt_indicate+0x28>
	return net_buf_simple_add(&buf->b, len);
   15d46:	f100 0a08 	add.w	sl, r0, #8
   15d4a:	2102      	movs	r1, #2
   15d4c:	4650      	mov	r0, sl
   15d4e:	f009 fede 	bl	1fb0e <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   15d52:	4607      	mov	r7, r0
   15d54:	8aa9      	ldrh	r1, [r5, #20]
   15d56:	f827 9b02 	strh.w	r9, [r7], #2
   15d5a:	4650      	mov	r0, sl
   15d5c:	f009 fed7 	bl	1fb0e <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   15d60:	8aaa      	ldrh	r2, [r5, #20]
   15d62:	6929      	ldr	r1, [r5, #16]
   15d64:	4638      	mov	r0, r7
   15d66:	f007 ff74 	bl	1dc52 <memcpy>
	req->buf = buf;
   15d6a:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   15d6c:	4621      	mov	r1, r4
   15d6e:	4640      	mov	r0, r8
   15d70:	f009 fabb 	bl	1f2ea <bt_att_req_send>
	if (err) {
   15d74:	4605      	mov	r5, r0
   15d76:	2800      	cmp	r0, #0
   15d78:	d0d4      	beq.n	15d24 <gatt_indicate+0x2c>
		bt_att_req_free(req);
   15d7a:	4620      	mov	r0, r4
   15d7c:	f7ff fd3c 	bl	157f8 <bt_att_req_free>
   15d80:	e7d0      	b.n	15d24 <gatt_indicate+0x2c>
		return -EPERM;
   15d82:	f04f 35ff 	mov.w	r5, #4294967295
   15d86:	e7cd      	b.n	15d24 <gatt_indicate+0x2c>
   15d88:	0001f329 	.word	0x0001f329

00015d8c <bt_gatt_indicate>:
{
   15d8c:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15d8e:	4b38      	ldr	r3, [pc, #224]	; (15e70 <bt_gatt_indicate+0xe4>)
   15d90:	f3bf 8f5b 	dmb	ish
   15d94:	681b      	ldr	r3, [r3, #0]
   15d96:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15d9a:	079a      	lsls	r2, r3, #30
{
   15d9c:	b08b      	sub	sp, #44	; 0x2c
   15d9e:	4604      	mov	r4, r0
   15da0:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15da2:	d55f      	bpl.n	15e64 <bt_gatt_indicate+0xd8>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   15da4:	b110      	cbz	r0, 15dac <bt_gatt_indicate+0x20>
   15da6:	7a83      	ldrb	r3, [r0, #10]
   15da8:	2b07      	cmp	r3, #7
   15daa:	d15e      	bne.n	15e6a <bt_gatt_indicate+0xde>
	data.attr = params->attr;
   15dac:	6868      	ldr	r0, [r5, #4]
   15dae:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   15db0:	f7ff fede 	bl	15b70 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   15db4:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   15db6:	f8ad 0018 	strh.w	r0, [sp, #24]
   15dba:	4603      	mov	r3, r0
	if (params->uuid) {
   15dbc:	b162      	cbz	r2, 15dd8 <bt_gatt_indicate+0x4c>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   15dbe:	a905      	add	r1, sp, #20
   15dc0:	9102      	str	r1, [sp, #8]
   15dc2:	492c      	ldr	r1, [pc, #176]	; (15e74 <bt_gatt_indicate+0xe8>)
   15dc4:	9101      	str	r1, [sp, #4]
   15dc6:	2101      	movs	r1, #1
	found->attr = NULL;
   15dc8:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   15dca:	9100      	str	r1, [sp, #0]
   15dcc:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   15dd0:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   15dd2:	f7ff fefd 	bl	15bd0 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   15dd6:	9b05      	ldr	r3, [sp, #20]
   15dd8:	b1bb      	cbz	r3, 15e0a <bt_gatt_indicate+0x7e>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   15dda:	9b05      	ldr	r3, [sp, #20]
   15ddc:	6818      	ldr	r0, [r3, #0]
   15dde:	2300      	movs	r3, #0
   15de0:	f88d 3010 	strb.w	r3, [sp, #16]
   15de4:	a904      	add	r1, sp, #16
   15de6:	f642 0303 	movw	r3, #10243	; 0x2803
   15dea:	f8ad 3012 	strh.w	r3, [sp, #18]
   15dee:	f007 ff65 	bl	1dcbc <bt_uuid_cmp>
   15df2:	b170      	cbz	r0, 15e12 <bt_gatt_indicate+0x86>
	if (conn) {
   15df4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   15df8:	b1c4      	cbz	r4, 15e2c <bt_gatt_indicate+0xa0>
		params->_ref = 1;
   15dfa:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   15dfc:	4601      	mov	r1, r0
		params->_ref = 1;
   15dfe:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   15e00:	462a      	mov	r2, r5
   15e02:	4620      	mov	r0, r4
   15e04:	f7ff ff78 	bl	15cf8 <gatt_indicate>
   15e08:	e001      	b.n	15e0e <bt_gatt_indicate+0x82>
			return -ENOENT;
   15e0a:	f06f 0001 	mvn.w	r0, #1
}
   15e0e:	b00b      	add	sp, #44	; 0x2c
   15e10:	bd30      	pop	{r4, r5, pc}
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   15e12:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   15e14:	68c3      	ldr	r3, [r0, #12]
   15e16:	799b      	ldrb	r3, [r3, #6]
   15e18:	069b      	lsls	r3, r3, #26
   15e1a:	d402      	bmi.n	15e22 <bt_gatt_indicate+0x96>
			return -EINVAL;
   15e1c:	f06f 0015 	mvn.w	r0, #21
   15e20:	e7f5      	b.n	15e0e <bt_gatt_indicate+0x82>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   15e22:	f009 fd0f 	bl	1f844 <bt_gatt_attr_value_handle>
   15e26:	f8ad 0018 	strh.w	r0, [sp, #24]
   15e2a:	e7e3      	b.n	15df4 <bt_gatt_indicate+0x68>
	data.err = -ENOTCONN;
   15e2c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   15e30:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   15e32:	2302      	movs	r3, #2
   15e34:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15e38:	f642 1302 	movw	r3, #10498	; 0x2902
   15e3c:	f8ad 3012 	strh.w	r3, [sp, #18]
   15e40:	ab05      	add	r3, sp, #20
   15e42:	9302      	str	r3, [sp, #8]
   15e44:	4b0c      	ldr	r3, [pc, #48]	; (15e78 <bt_gatt_indicate+0xec>)
   15e46:	9301      	str	r3, [sp, #4]
   15e48:	2301      	movs	r3, #1
   15e4a:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   15e4c:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15e4e:	4623      	mov	r3, r4
   15e50:	aa04      	add	r2, sp, #16
   15e52:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   15e56:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15e58:	f88d 4010 	strb.w	r4, [sp, #16]
   15e5c:	f7ff feb8 	bl	15bd0 <bt_gatt_foreach_attr_type>
	return data.err;
   15e60:	9807      	ldr	r0, [sp, #28]
   15e62:	e7d4      	b.n	15e0e <bt_gatt_indicate+0x82>
		return -EAGAIN;
   15e64:	f06f 000a 	mvn.w	r0, #10
   15e68:	e7d1      	b.n	15e0e <bt_gatt_indicate+0x82>
		return -ENOTCONN;
   15e6a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   15e6e:	e7ce      	b.n	15e0e <bt_gatt_indicate+0x82>
   15e70:	20000384 	.word	0x20000384
   15e74:	0001f34f 	.word	0x0001f34f
   15e78:	00015fcd 	.word	0x00015fcd

00015e7c <sc_process>:
{
   15e7c:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   15e7e:	f850 2c08 	ldr.w	r2, [r0, #-8]
   15e82:	9201      	str	r2, [sp, #4]
{
   15e84:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   15e86:	f1a0 0120 	sub.w	r1, r0, #32
   15e8a:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15e8e:	f3bf 8f5b 	dmb	ish
   15e92:	e854 2f00 	ldrex	r2, [r4]
   15e96:	f022 0201 	bic.w	r2, r2, #1
   15e9a:	e844 2000 	strex	r0, r2, [r4]
   15e9e:	2800      	cmp	r0, #0
   15ea0:	d1f7      	bne.n	15e92 <sc_process+0x16>
   15ea2:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   15ea6:	4a0d      	ldr	r2, [pc, #52]	; (15edc <sc_process+0x60>)
   15ea8:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   15eac:	4a0c      	ldr	r2, [pc, #48]	; (15ee0 <sc_process+0x64>)
   15eae:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   15eb2:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   15eb4:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   15eb6:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   15eba:	2204      	movs	r2, #4
	sc->start = 0U;
   15ebc:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   15ec0:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   15ec4:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   15ec8:	f7ff ff60 	bl	15d8c <bt_gatt_indicate>
   15ecc:	b918      	cbnz	r0, 15ed6 <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   15ece:	2101      	movs	r1, #1
   15ed0:	4620      	mov	r0, r4
   15ed2:	f009 fab8 	bl	1f446 <atomic_set_bit>
}
   15ed6:	b002      	add	sp, #8
   15ed8:	bd10      	pop	{r4, pc}
   15eda:	bf00      	nop
   15edc:	000214cc 	.word	0x000214cc
   15ee0:	00015991 	.word	0x00015991

00015ee4 <bt_gatt_notify_cb>:
{
   15ee4:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15ee6:	4b36      	ldr	r3, [pc, #216]	; (15fc0 <bt_gatt_notify_cb+0xdc>)
   15ee8:	f3bf 8f5b 	dmb	ish
   15eec:	681b      	ldr	r3, [r3, #0]
   15eee:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15ef2:	079a      	lsls	r2, r3, #30
{
   15ef4:	b08b      	sub	sp, #44	; 0x2c
   15ef6:	4604      	mov	r4, r0
   15ef8:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15efa:	d55b      	bpl.n	15fb4 <bt_gatt_notify_cb+0xd0>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   15efc:	b110      	cbz	r0, 15f04 <bt_gatt_notify_cb+0x20>
   15efe:	7a83      	ldrb	r3, [r0, #10]
   15f00:	2b07      	cmp	r3, #7
   15f02:	d15a      	bne.n	15fba <bt_gatt_notify_cb+0xd6>
	data.attr = params->attr;
   15f04:	6868      	ldr	r0, [r5, #4]
   15f06:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   15f08:	f7ff fe32 	bl	15b70 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   15f0c:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   15f0e:	f8ad 0018 	strh.w	r0, [sp, #24]
   15f12:	4603      	mov	r3, r0
	if (params->uuid) {
   15f14:	b162      	cbz	r2, 15f30 <bt_gatt_notify_cb+0x4c>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   15f16:	a905      	add	r1, sp, #20
   15f18:	9102      	str	r1, [sp, #8]
   15f1a:	492a      	ldr	r1, [pc, #168]	; (15fc4 <bt_gatt_notify_cb+0xe0>)
   15f1c:	9101      	str	r1, [sp, #4]
   15f1e:	2101      	movs	r1, #1
	found->attr = NULL;
   15f20:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   15f22:	9100      	str	r1, [sp, #0]
   15f24:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   15f28:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   15f2a:	f7ff fe51 	bl	15bd0 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   15f2e:	9b05      	ldr	r3, [sp, #20]
   15f30:	b1ab      	cbz	r3, 15f5e <bt_gatt_notify_cb+0x7a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   15f32:	9b05      	ldr	r3, [sp, #20]
   15f34:	6818      	ldr	r0, [r3, #0]
   15f36:	2300      	movs	r3, #0
   15f38:	f88d 3010 	strb.w	r3, [sp, #16]
   15f3c:	a904      	add	r1, sp, #16
   15f3e:	f642 0303 	movw	r3, #10243	; 0x2803
   15f42:	f8ad 3012 	strh.w	r3, [sp, #18]
   15f46:	f007 feb9 	bl	1dcbc <bt_uuid_cmp>
   15f4a:	b160      	cbz	r0, 15f66 <bt_gatt_notify_cb+0x82>
	if (conn) {
   15f4c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   15f50:	b1b4      	cbz	r4, 15f80 <bt_gatt_notify_cb+0x9c>
		return gatt_notify(conn, data.handle, params);
   15f52:	4601      	mov	r1, r0
   15f54:	462a      	mov	r2, r5
   15f56:	4620      	mov	r0, r4
   15f58:	f009 fcf2 	bl	1f940 <gatt_notify>
   15f5c:	e001      	b.n	15f62 <bt_gatt_notify_cb+0x7e>
			return -ENOENT;
   15f5e:	f06f 0001 	mvn.w	r0, #1
}
   15f62:	b00b      	add	sp, #44	; 0x2c
   15f64:	bd30      	pop	{r4, r5, pc}
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   15f66:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   15f68:	68c3      	ldr	r3, [r0, #12]
   15f6a:	799b      	ldrb	r3, [r3, #6]
   15f6c:	06db      	lsls	r3, r3, #27
   15f6e:	d402      	bmi.n	15f76 <bt_gatt_notify_cb+0x92>
			return -EINVAL;
   15f70:	f06f 0015 	mvn.w	r0, #21
   15f74:	e7f5      	b.n	15f62 <bt_gatt_notify_cb+0x7e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   15f76:	f009 fc65 	bl	1f844 <bt_gatt_attr_value_handle>
   15f7a:	f8ad 0018 	strh.w	r0, [sp, #24]
   15f7e:	e7e5      	b.n	15f4c <bt_gatt_notify_cb+0x68>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15f80:	f642 1202 	movw	r2, #10498	; 0x2902
   15f84:	f8ad 2012 	strh.w	r2, [sp, #18]
   15f88:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   15f8a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15f8e:	9202      	str	r2, [sp, #8]
   15f90:	4a0d      	ldr	r2, [pc, #52]	; (15fc8 <bt_gatt_notify_cb+0xe4>)
	data.err = -ENOTCONN;
   15f92:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   15f94:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15f96:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   15f9a:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15f9e:	aa04      	add	r2, sp, #16
   15fa0:	4623      	mov	r3, r4
   15fa2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   15fa6:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15fa8:	f88d 4010 	strb.w	r4, [sp, #16]
   15fac:	f7ff fe10 	bl	15bd0 <bt_gatt_foreach_attr_type>
	return data.err;
   15fb0:	9807      	ldr	r0, [sp, #28]
   15fb2:	e7d6      	b.n	15f62 <bt_gatt_notify_cb+0x7e>
		return -EAGAIN;
   15fb4:	f06f 000a 	mvn.w	r0, #10
   15fb8:	e7d3      	b.n	15f62 <bt_gatt_notify_cb+0x7e>
		return -ENOTCONN;
   15fba:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   15fbe:	e7d0      	b.n	15f62 <bt_gatt_notify_cb+0x7e>
   15fc0:	20000384 	.word	0x20000384
   15fc4:	0001f34f 	.word	0x0001f34f
   15fc8:	00015fcd 	.word	0x00015fcd

00015fcc <notify_cb>:
{
   15fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   15fce:	4b32      	ldr	r3, [pc, #200]	; (16098 <notify_cb+0xcc>)
{
   15fd0:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   15fd2:	6882      	ldr	r2, [r0, #8]
   15fd4:	429a      	cmp	r2, r3
{
   15fd6:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   15fd8:	d12e      	bne.n	16038 <notify_cb+0x6c>
	ccc = attr->user_data;
   15fda:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   15fdc:	4b2f      	ldr	r3, [pc, #188]	; (1609c <notify_cb+0xd0>)
   15fde:	429f      	cmp	r7, r3
   15fe0:	d11a      	bne.n	16018 <notify_cb+0x4c>
	return memcmp(a, b, sizeof(*a));
   15fe2:	4d2f      	ldr	r5, [pc, #188]	; (160a0 <notify_cb+0xd4>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   15fe4:	2300      	movs	r3, #0
   15fe6:	2207      	movs	r2, #7
   15fe8:	4669      	mov	r1, sp
   15fea:	1c68      	adds	r0, r5, #1
   15fec:	9300      	str	r3, [sp, #0]
   15fee:	f8cd 3003 	str.w	r3, [sp, #3]
   15ff2:	f007 fe07 	bl	1dc04 <memcmp>
   15ff6:	b178      	cbz	r0, 16018 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   15ff8:	4629      	mov	r1, r5
   15ffa:	2207      	movs	r2, #7
   15ffc:	f811 0b01 	ldrb.w	r0, [r1], #1
   16000:	f7fe fcfc 	bl	149fc <bt_conn_lookup_state_le>
			if (!conn) {
   16004:	b9e0      	cbnz	r0, 16040 <notify_cb+0x74>
				sc = (struct sc_data *)data->ind_params->data;
   16006:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   16008:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   1600a:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1600c:	f811 0b01 	ldrb.w	r0, [r1], #1
   16010:	8853      	ldrh	r3, [r2, #2]
   16012:	8812      	ldrh	r2, [r2, #0]
   16014:	f009 fbb4 	bl	1f780 <sc_save>
		if (cfg->value != data->type) {
   16018:	893a      	ldrh	r2, [r7, #8]
   1601a:	89a3      	ldrh	r3, [r4, #12]
   1601c:	429a      	cmp	r2, r3
   1601e:	d10b      	bne.n	16038 <notify_cb+0x6c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   16020:	4639      	mov	r1, r7
   16022:	f811 0b01 	ldrb.w	r0, [r1], #1
   16026:	f7fe fccb 	bl	149c0 <bt_conn_lookup_addr_le>
		if (!conn) {
   1602a:	4605      	mov	r5, r0
   1602c:	b120      	cbz	r0, 16038 <notify_cb+0x6c>
		if (conn->state != BT_CONN_CONNECTED) {
   1602e:	7a83      	ldrb	r3, [r0, #10]
   16030:	2b07      	cmp	r3, #7
   16032:	d008      	beq.n	16046 <notify_cb+0x7a>
			bt_conn_unref(conn);
   16034:	f008 fb32 	bl	1e69c <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   16038:	2701      	movs	r7, #1
}
   1603a:	4638      	mov	r0, r7
   1603c:	b003      	add	sp, #12
   1603e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   16040:	f008 fb2c 	bl	1e69c <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16044:	e7e8      	b.n	16018 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   16046:	697b      	ldr	r3, [r7, #20]
   16048:	b123      	cbz	r3, 16054 <notify_cb+0x88>
   1604a:	4631      	mov	r1, r6
   1604c:	4798      	blx	r3
   1604e:	b908      	cbnz	r0, 16054 <notify_cb+0x88>
			bt_conn_unref(conn);
   16050:	4628      	mov	r0, r5
   16052:	e7ef      	b.n	16034 <notify_cb+0x68>
		if (bt_gatt_check_perm(conn, attr,
   16054:	2214      	movs	r2, #20
   16056:	4631      	mov	r1, r6
   16058:	4628      	mov	r0, r5
   1605a:	f009 fc4e 	bl	1f8fa <bt_gatt_check_perm>
   1605e:	4607      	mov	r7, r0
   16060:	2800      	cmp	r0, #0
   16062:	d1e9      	bne.n	16038 <notify_cb+0x6c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   16064:	89a3      	ldrh	r3, [r4, #12]
   16066:	88a1      	ldrh	r1, [r4, #4]
   16068:	6922      	ldr	r2, [r4, #16]
   1606a:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   1606c:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   1606e:	d10f      	bne.n	16090 <notify_cb+0xc4>
			err = gatt_indicate(conn, data->handle,
   16070:	f7ff fe42 	bl	15cf8 <gatt_indicate>
			if (err == 0) {
   16074:	4606      	mov	r6, r0
   16076:	b918      	cbnz	r0, 16080 <notify_cb+0xb4>
				data->ind_params->_ref++;
   16078:	6922      	ldr	r2, [r4, #16]
   1607a:	7d93      	ldrb	r3, [r2, #22]
   1607c:	3301      	adds	r3, #1
   1607e:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   16080:	4628      	mov	r0, r5
   16082:	f008 fb0b 	bl	1e69c <bt_conn_unref>
		if (err < 0) {
   16086:	2e00      	cmp	r6, #0
   16088:	dbd7      	blt.n	1603a <notify_cb+0x6e>
		data->err = 0;
   1608a:	2300      	movs	r3, #0
   1608c:	60a3      	str	r3, [r4, #8]
   1608e:	e7d3      	b.n	16038 <notify_cb+0x6c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   16090:	f009 fc56 	bl	1f940 <gatt_notify>
   16094:	4606      	mov	r6, r0
   16096:	e7f3      	b.n	16080 <notify_cb+0xb4>
   16098:	0001f4b3 	.word	0x0001f4b3
   1609c:	200005b4 	.word	0x200005b4
   160a0:	20002edc 	.word	0x20002edc

000160a4 <update_ccc>:
{
   160a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   160a6:	4b28      	ldr	r3, [pc, #160]	; (16148 <update_ccc+0xa4>)
	struct bt_conn *conn = data->conn;
   160a8:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   160aa:	6882      	ldr	r2, [r0, #8]
   160ac:	429a      	cmp	r2, r3
{
   160ae:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   160b0:	d146      	bne.n	16140 <update_ccc+0x9c>
	ccc = attr->user_data;
   160b2:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   160b4:	8933      	ldrh	r3, [r6, #8]
   160b6:	2b00      	cmp	r3, #0
   160b8:	d042      	beq.n	16140 <update_ccc+0x9c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   160ba:	4632      	mov	r2, r6
   160bc:	4628      	mov	r0, r5
   160be:	f812 1b01 	ldrb.w	r1, [r2], #1
   160c2:	f008 fb32 	bl	1e72a <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   160c6:	2800      	cmp	r0, #0
   160c8:	d03a      	beq.n	16140 <update_ccc+0x9c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   160ca:	222a      	movs	r2, #42	; 0x2a
   160cc:	4621      	mov	r1, r4
   160ce:	4628      	mov	r0, r5
   160d0:	f009 fc13 	bl	1f8fa <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   160d4:	2803      	cmp	r0, #3
   160d6:	d033      	beq.n	16140 <update_ccc+0x9c>
		gatt_ccc_changed(attr, ccc);
   160d8:	4631      	mov	r1, r6
   160da:	4620      	mov	r0, r4
   160dc:	f009 f91a 	bl	1f314 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   160e0:	4b1a      	ldr	r3, [pc, #104]	; (1614c <update_ccc+0xa8>)
   160e2:	429e      	cmp	r6, r3
   160e4:	d12c      	bne.n	16140 <update_ccc+0x9c>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   160e6:	7a28      	ldrb	r0, [r5, #8]
   160e8:	f105 0188 	add.w	r1, r5, #136	; 0x88
   160ec:	f7ff fc22 	bl	15934 <find_sc_cfg>
	if (!cfg) {
   160f0:	4604      	mov	r4, r0
   160f2:	b328      	cbz	r0, 16140 <update_ccc+0x9c>
	if (!(cfg->data.start || cfg->data.end)) {
   160f4:	8902      	ldrh	r2, [r0, #8]
   160f6:	8943      	ldrh	r3, [r0, #10]
   160f8:	ea53 0102 	orrs.w	r1, r3, r2
   160fc:	d020      	beq.n	16140 <update_ccc+0x9c>
	index = bt_conn_index(conn);
   160fe:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   16100:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   16104:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   16108:	f7fe fbd4 	bl	148b4 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1610c:	4910      	ldr	r1, [pc, #64]	; (16150 <update_ccc+0xac>)
   1610e:	4a11      	ldr	r2, [pc, #68]	; (16154 <update_ccc+0xb0>)
   16110:	2318      	movs	r3, #24
   16112:	fb03 1300 	mla	r3, r3, r0, r1
	sc_restore_params[index].len = sizeof(sc_range);
   16116:	2604      	movs	r6, #4
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   16118:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1611a:	4a0f      	ldr	r2, [pc, #60]	; (16158 <update_ccc+0xb4>)
   1611c:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1611e:	aa01      	add	r2, sp, #4
   16120:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   16122:	829e      	strh	r6, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16124:	b203      	sxth	r3, r0
   16126:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1612a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1612e:	4628      	mov	r0, r5
   16130:	f7ff fe2c 	bl	15d8c <bt_gatt_indicate>
	memset(&cfg->data, 0, sizeof(cfg->data));
   16134:	4632      	mov	r2, r6
   16136:	2100      	movs	r1, #0
   16138:	f104 0008 	add.w	r0, r4, #8
   1613c:	f007 fd94 	bl	1dc68 <memset>
}
   16140:	2001      	movs	r0, #1
   16142:	b002      	add	sp, #8
   16144:	bd70      	pop	{r4, r5, r6, pc}
   16146:	bf00      	nop
   16148:	0001f4b3 	.word	0x0001f4b3
   1614c:	200005b4 	.word	0x200005b4
   16150:	2000234c 	.word	0x2000234c
   16154:	000214cc 	.word	0x000214cc
   16158:	0001f497 	.word	0x0001f497

0001615c <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1615c:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1615e:	4a06      	ldr	r2, [pc, #24]	; (16178 <bt_gatt_connected+0x1c>)
	data.conn = conn;
   16160:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16162:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   16164:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16166:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1616a:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1616e:	f009 fbb7 	bl	1f8e0 <bt_gatt_foreach_attr>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   16172:	b003      	add	sp, #12
   16174:	f85d fb04 	ldr.w	pc, [sp], #4
   16178:	000160a5 	.word	0x000160a5

0001617c <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1617c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1617e:	4b09      	ldr	r3, [pc, #36]	; (161a4 <bt_gatt_att_max_mtu_changed+0x28>)
   16180:	681c      	ldr	r4, [r3, #0]
{
   16182:	4605      	mov	r5, r0
   16184:	460e      	mov	r6, r1
   16186:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16188:	b10c      	cbz	r4, 1618e <bt_gatt_att_max_mtu_changed+0x12>
   1618a:	3c04      	subs	r4, #4
   1618c:	b904      	cbnz	r4, 16190 <bt_gatt_att_max_mtu_changed+0x14>
		if (cb->att_mtu_updated) {
			cb->att_mtu_updated(conn, tx, rx);
		}
	}
}
   1618e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->att_mtu_updated) {
   16190:	6823      	ldr	r3, [r4, #0]
   16192:	b11b      	cbz	r3, 1619c <bt_gatt_att_max_mtu_changed+0x20>
			cb->att_mtu_updated(conn, tx, rx);
   16194:	463a      	mov	r2, r7
   16196:	4631      	mov	r1, r6
   16198:	4628      	mov	r0, r5
   1619a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1619c:	1d23      	adds	r3, r4, #4
   1619e:	d0f6      	beq.n	1618e <bt_gatt_att_max_mtu_changed+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   161a0:	6864      	ldr	r4, [r4, #4]
   161a2:	e7f1      	b.n	16188 <bt_gatt_att_max_mtu_changed+0xc>
   161a4:	20002330 	.word	0x20002330

000161a8 <db_hash_read>:
{
   161a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   161aa:	4915      	ldr	r1, [pc, #84]	; (16200 <db_hash_read+0x58>)
{
   161ac:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   161b0:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   161b2:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   161b6:	461f      	mov	r7, r3
   161b8:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   161ba:	f00a f996 	bl	204ea <k_work_cancel_delayable_sync>
   161be:	f3bf 8f5b 	dmb	ish
   161c2:	4b10      	ldr	r3, [pc, #64]	; (16204 <db_hash_read+0x5c>)
   161c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   161c6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   161ca:	075b      	lsls	r3, r3, #29
   161cc:	d401      	bmi.n	161d2 <db_hash_read+0x2a>
		db_hash_gen(true);
   161ce:	f7ff fd59 	bl	15c84 <db_hash_gen.isra.0>
	bt_gatt_change_aware(conn, true);
   161d2:	2101      	movs	r1, #1
   161d4:	4620      	mov	r0, r4
   161d6:	f009 fbe6 	bl	1f9a6 <bt_gatt_change_aware>
	if (offset > value_len) {
   161da:	2e10      	cmp	r6, #16
   161dc:	d80c      	bhi.n	161f8 <db_hash_read+0x50>
	len = MIN(buf_len, value_len - offset);
   161de:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   161e2:	4909      	ldr	r1, [pc, #36]	; (16208 <db_hash_read+0x60>)
	len = MIN(buf_len, value_len - offset);
   161e4:	42bc      	cmp	r4, r7
   161e6:	bfa8      	it	ge
   161e8:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   161ea:	4622      	mov	r2, r4
   161ec:	4431      	add	r1, r6
   161ee:	4628      	mov	r0, r5
   161f0:	f007 fd2f 	bl	1dc52 <memcpy>
}
   161f4:	4620      	mov	r0, r4
   161f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   161f8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   161fc:	e7fa      	b.n	161f4 <db_hash_read+0x4c>
   161fe:	bf00      	nop
   16200:	20001888 	.word	0x20001888
   16204:	200018b0 	.word	0x200018b0
   16208:	20001848 	.word	0x20001848

0001620c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1620c:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1620e:	4603      	mov	r3, r0
   16210:	4a15      	ldr	r2, [pc, #84]	; (16268 <bt_gatt_disconnected+0x5c>)
{
   16212:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   16214:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16218:	2001      	movs	r0, #1
   1621a:	f009 fb61 	bl	1f8e0 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1621e:	4628      	mov	r0, r5
   16220:	f7ff fb98 	bl	15954 <find_cf_cfg>
	if (!cfg) {
   16224:	4604      	mov	r4, r0
   16226:	b1e8      	cbz	r0, 16264 <bt_gatt_disconnected+0x58>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   16228:	f105 0688 	add.w	r6, r5, #136	; 0x88
   1622c:	7a28      	ldrb	r0, [r5, #8]
   1622e:	4631      	mov	r1, r6
   16230:	f008 f826 	bl	1e280 <bt_addr_le_is_bonded>
   16234:	b920      	cbnz	r0, 16240 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   16236:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   16238:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   1623c:	f009 b994 	b.w	1f568 <clear_cf_cfg>
	memcpy(dst, src, sizeof(*dst));
   16240:	1c60      	adds	r0, r4, #1
   16242:	2207      	movs	r2, #7
   16244:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16246:	340c      	adds	r4, #12
   16248:	f007 fd03 	bl	1dc52 <memcpy>
   1624c:	f3bf 8f5b 	dmb	ish
   16250:	e854 3f00 	ldrex	r3, [r4]
   16254:	f023 0302 	bic.w	r3, r3, #2
   16258:	e844 3200 	strex	r2, r3, [r4]
   1625c:	2a00      	cmp	r2, #0
   1625e:	d1f7      	bne.n	16250 <bt_gatt_disconnected+0x44>
   16260:	f3bf 8f5b 	dmb	ish
}
   16264:	bd70      	pop	{r4, r5, r6, pc}
   16266:	bf00      	nop
   16268:	00015a25 	.word	0x00015a25

0001626c <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   1626c:	4b04      	ldr	r3, [pc, #16]	; (16280 <bt_smp_accept+0x14>)
   1626e:	6818      	ldr	r0, [r3, #0]
   16270:	b918      	cbnz	r0, 1627a <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
   16272:	4a04      	ldr	r2, [pc, #16]	; (16284 <bt_smp_accept+0x18>)
   16274:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
   16276:	600b      	str	r3, [r1, #0]

		return 0;
   16278:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   1627a:	f06f 000b 	mvn.w	r0, #11
}
   1627e:	4770      	bx	lr
   16280:	20001908 	.word	0x20001908
   16284:	000215d0 	.word	0x000215d0

00016288 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   16288:	4b02      	ldr	r3, [pc, #8]	; (16294 <net_buf_pool_get+0xc>)
   1628a:	2228      	movs	r2, #40	; 0x28
   1628c:	fb02 3000 	mla	r0, r2, r0, r3
   16290:	4770      	bx	lr
   16292:	bf00      	nop
   16294:	20000898 	.word	0x20000898

00016298 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16298:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   1629a:	4a05      	ldr	r2, [pc, #20]	; (162b0 <net_buf_id+0x18>)
   1629c:	2128      	movs	r1, #40	; 0x28
   1629e:	fb01 2303 	mla	r3, r1, r3, r2
   162a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   162a4:	1ac0      	subs	r0, r0, r3
}
   162a6:	4b03      	ldr	r3, [pc, #12]	; (162b4 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   162a8:	10c0      	asrs	r0, r0, #3
}
   162aa:	4358      	muls	r0, r3
   162ac:	4770      	bx	lr
   162ae:	bf00      	nop
   162b0:	20000898 	.word	0x20000898
   162b4:	aaaaaaab 	.word	0xaaaaaaab

000162b8 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   162b8:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   162ba:	4a0a      	ldr	r2, [pc, #40]	; (162e4 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   162bc:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   162be:	2428      	movs	r4, #40	; 0x28
   162c0:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   162c4:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   162c6:	6a1b      	ldr	r3, [r3, #32]
   162c8:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   162ca:	6823      	ldr	r3, [r4, #0]
   162cc:	429a      	cmp	r2, r3
   162ce:	bf94      	ite	ls
   162d0:	600a      	strls	r2, [r1, #0]
   162d2:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   162d4:	f7ff ffe0 	bl	16298 <net_buf_id>
   162d8:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   162dc:	fb02 3000 	mla	r0, r2, r0, r3
   162e0:	bd10      	pop	{r4, pc}
   162e2:	bf00      	nop
   162e4:	20000898 	.word	0x20000898

000162e8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   162e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   162ec:	4605      	mov	r5, r0
   162ee:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   162f0:	4610      	mov	r0, r2
   162f2:	4619      	mov	r1, r3
{
   162f4:	4616      	mov	r6, r2
   162f6:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   162f8:	f00a fa64 	bl	207c4 <sys_clock_timeout_end_calc>
   162fc:	4680      	mov	r8, r0
   162fe:	4689      	mov	r9, r1
	__asm__ volatile(
   16300:	f04f 0340 	mov.w	r3, #64	; 0x40
   16304:	f3ef 8a11 	mrs	sl, BASEPRI
   16308:	f383 8811 	msr	BASEPRI, r3
   1630c:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   16310:	8b6b      	ldrh	r3, [r5, #26]
   16312:	2b00      	cmp	r3, #0
   16314:	d054      	beq.n	163c0 <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   16316:	8b2a      	ldrh	r2, [r5, #24]
   16318:	429a      	cmp	r2, r3
   1631a:	d93d      	bls.n	16398 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   1631c:	2200      	movs	r2, #0
   1631e:	2300      	movs	r3, #0
   16320:	4628      	mov	r0, r5
   16322:	f002 fcd3 	bl	18ccc <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   16326:	4604      	mov	r4, r0
   16328:	2800      	cmp	r0, #0
   1632a:	d035      	beq.n	16398 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   1632c:	f38a 8811 	msr	BASEPRI, sl
   16330:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   16334:	9b01      	ldr	r3, [sp, #4]
   16336:	2b00      	cmp	r3, #0
   16338:	d052      	beq.n	163e0 <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1633a:	ea56 0307 	orrs.w	r3, r6, r7
   1633e:	d010      	beq.n	16362 <net_buf_alloc_len+0x7a>
   16340:	1c7b      	adds	r3, r7, #1
   16342:	bf08      	it	eq
   16344:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   16348:	d00b      	beq.n	16362 <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1634a:	f003 fbe9 	bl	19b20 <sys_clock_tick_get>
   1634e:	ebb8 0600 	subs.w	r6, r8, r0
   16352:	eb69 0701 	sbc.w	r7, r9, r1
   16356:	2e00      	cmp	r6, #0
   16358:	f177 0300 	sbcs.w	r3, r7, #0
   1635c:	bfbc      	itt	lt
   1635e:	2600      	movlt	r6, #0
   16360:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16362:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   16364:	f8df 8090 	ldr.w	r8, [pc, #144]	; 163f8 <net_buf_alloc_len+0x110>
   16368:	2228      	movs	r2, #40	; 0x28
   1636a:	fb02 8303 	mla	r3, r2, r3, r8
   1636e:	a901      	add	r1, sp, #4
   16370:	6a1b      	ldr	r3, [r3, #32]
   16372:	681b      	ldr	r3, [r3, #0]
   16374:	4632      	mov	r2, r6
   16376:	681d      	ldr	r5, [r3, #0]
   16378:	4620      	mov	r0, r4
   1637a:	463b      	mov	r3, r7
   1637c:	47a8      	blx	r5
   1637e:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   16380:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   16382:	bb70      	cbnz	r0, 163e2 <net_buf_alloc_len+0xfa>
	k_lifo_put(&pool->free, buf);
   16384:	79a0      	ldrb	r0, [r4, #6]
   16386:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1638a:	4621      	mov	r1, r4
   1638c:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   16390:	f009 ffa8 	bl	202e4 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   16394:	462c      	mov	r4, r5
}
   16396:	e01f      	b.n	163d8 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   16398:	8b68      	ldrh	r0, [r5, #26]
   1639a:	1e43      	subs	r3, r0, #1
   1639c:	836b      	strh	r3, [r5, #26]
   1639e:	f38a 8811 	msr	BASEPRI, sl
   163a2:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   163a6:	8b2c      	ldrh	r4, [r5, #24]
   163a8:	1a24      	subs	r4, r4, r0
   163aa:	6a68      	ldr	r0, [r5, #36]	; 0x24
   163ac:	2318      	movs	r3, #24
   163ae:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   163b2:	4811      	ldr	r0, [pc, #68]	; (163f8 <net_buf_alloc_len+0x110>)
   163b4:	4b11      	ldr	r3, [pc, #68]	; (163fc <net_buf_alloc_len+0x114>)
   163b6:	1a2d      	subs	r5, r5, r0
   163b8:	10ed      	asrs	r5, r5, #3
   163ba:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   163bc:	71a5      	strb	r5, [r4, #6]
		goto success;
   163be:	e7b9      	b.n	16334 <net_buf_alloc_len+0x4c>
   163c0:	f38a 8811 	msr	BASEPRI, sl
   163c4:	f3bf 8f6f 	isb	sy
   163c8:	4632      	mov	r2, r6
   163ca:	463b      	mov	r3, r7
   163cc:	4628      	mov	r0, r5
   163ce:	f002 fc7d 	bl	18ccc <z_impl_k_queue_get>
	if (!buf) {
   163d2:	4604      	mov	r4, r0
   163d4:	2800      	cmp	r0, #0
   163d6:	d1ad      	bne.n	16334 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   163d8:	4620      	mov	r0, r4
   163da:	b002      	add	sp, #8
   163dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   163e0:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   163e2:	2300      	movs	r3, #0
	buf->ref   = 1U;
   163e4:	2201      	movs	r2, #1
	buf->frags = NULL;
   163e6:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   163e8:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   163ea:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   163ec:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   163ee:	6923      	ldr	r3, [r4, #16]
   163f0:	81e2      	strh	r2, [r4, #14]
   163f2:	60a3      	str	r3, [r4, #8]
	return buf;
   163f4:	e7f0      	b.n	163d8 <net_buf_alloc_len+0xf0>
   163f6:	bf00      	nop
   163f8:	20000898 	.word	0x20000898
   163fc:	cccccccd 	.word	0xcccccccd

00016400 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   16400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16404:	4d17      	ldr	r5, [pc, #92]	; (16464 <net_buf_unref+0x64>)
   16406:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   16408:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1640a:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   1640c:	b90c      	cbnz	r4, 16412 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1640e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   16412:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   16414:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   16418:	3b01      	subs	r3, #1
   1641a:	b2db      	uxtb	r3, r3
   1641c:	7123      	strb	r3, [r4, #4]
   1641e:	2b00      	cmp	r3, #0
   16420:	d1f5      	bne.n	1640e <net_buf_unref+0xe>
		if (buf->__buf) {
   16422:	6921      	ldr	r1, [r4, #16]
   16424:	b159      	cbz	r1, 1643e <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   16426:	7963      	ldrb	r3, [r4, #5]
   16428:	079b      	lsls	r3, r3, #30
   1642a:	d407      	bmi.n	1643c <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   1642c:	79a3      	ldrb	r3, [r4, #6]
   1642e:	fb07 5303 	mla	r3, r7, r3, r5
   16432:	4620      	mov	r0, r4
   16434:	6a1b      	ldr	r3, [r3, #32]
   16436:	681b      	ldr	r3, [r3, #0]
   16438:	689b      	ldr	r3, [r3, #8]
   1643a:	4798      	blx	r3
			buf->__buf = NULL;
   1643c:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1643e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   16440:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   16442:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   16446:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   16448:	69db      	ldr	r3, [r3, #28]
   1644a:	b11b      	cbz	r3, 16454 <net_buf_unref+0x54>
			pool->destroy(buf);
   1644c:	4620      	mov	r0, r4
   1644e:	4798      	blx	r3
{
   16450:	4644      	mov	r4, r8
   16452:	e7db      	b.n	1640c <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   16454:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16458:	4621      	mov	r1, r4
   1645a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   1645e:	f009 ff41 	bl	202e4 <k_queue_prepend>
}
   16462:	e7f5      	b.n	16450 <net_buf_unref+0x50>
   16464:	20000898 	.word	0x20000898

00016468 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   16468:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1646a:	4b09      	ldr	r3, [pc, #36]	; (16490 <gpio_nrfx_init+0x28>)
   1646c:	781a      	ldrb	r2, [r3, #0]
   1646e:	b96a      	cbnz	r2, 1648c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   16470:	2101      	movs	r1, #1
   16472:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   16474:	2006      	movs	r0, #6
   16476:	2105      	movs	r1, #5
   16478:	f7fc f8dc 	bl	12634 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1647c:	2006      	movs	r0, #6
   1647e:	f7fc f8a7 	bl	125d0 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   16482:	4b04      	ldr	r3, [pc, #16]	; (16494 <gpio_nrfx_init+0x2c>)
   16484:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   16488:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1648c:	2000      	movs	r0, #0
   1648e:	bd08      	pop	{r3, pc}
   16490:	20002ef3 	.word	0x20002ef3
   16494:	40006000 	.word	0x40006000

00016498 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16498:	4b2b      	ldr	r3, [pc, #172]	; (16548 <gpio_nrfx_config+0xb0>)
{
   1649a:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1649c:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1649e:	482b      	ldr	r0, [pc, #172]	; (1654c <gpio_nrfx_config+0xb4>)
   164a0:	4013      	ands	r3, r2
   164a2:	4283      	cmp	r3, r0
   164a4:	d041      	beq.n	1652a <gpio_nrfx_config+0x92>
   164a6:	d80d      	bhi.n	164c4 <gpio_nrfx_config+0x2c>
   164a8:	2b06      	cmp	r3, #6
   164aa:	d015      	beq.n	164d8 <gpio_nrfx_config+0x40>
   164ac:	d805      	bhi.n	164ba <gpio_nrfx_config+0x22>
   164ae:	b19b      	cbz	r3, 164d8 <gpio_nrfx_config+0x40>
   164b0:	2b02      	cmp	r3, #2
   164b2:	d03c      	beq.n	1652e <gpio_nrfx_config+0x96>
   164b4:	f06f 0015 	mvn.w	r0, #21
   164b8:	e036      	b.n	16528 <gpio_nrfx_config+0x90>
   164ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   164be:	d1f9      	bne.n	164b4 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   164c0:	2301      	movs	r3, #1
   164c2:	e009      	b.n	164d8 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   164c4:	4822      	ldr	r0, [pc, #136]	; (16550 <gpio_nrfx_config+0xb8>)
   164c6:	4283      	cmp	r3, r0
   164c8:	d033      	beq.n	16532 <gpio_nrfx_config+0x9a>
   164ca:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   164ce:	d032      	beq.n	16536 <gpio_nrfx_config+0x9e>
   164d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   164d4:	d1ee      	bne.n	164b4 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   164d6:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   164d8:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   164da:	bf54      	ite	pl
   164dc:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   164e0:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   164e2:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   164e6:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   164e8:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   164ec:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   164f0:	d507      	bpl.n	16502 <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   164f2:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   164f6:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   164f8:	d01f      	beq.n	1653a <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
   164fa:	2201      	movs	r2, #1
   164fc:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   164fe:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   16502:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
   16504:	4c13      	ldr	r4, [pc, #76]	; (16554 <gpio_nrfx_config+0xbc>)
   16506:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   16508:	f001 011f 	and.w	r1, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1650c:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
   16510:	bf18      	it	ne
   16512:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   16516:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   1651a:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1651e:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   16522:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
   16526:	2000      	movs	r0, #0
}
   16528:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1652a:	2307      	movs	r3, #7
   1652c:	e7d4      	b.n	164d8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1652e:	2304      	movs	r3, #4
   16530:	e7d2      	b.n	164d8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   16532:	2305      	movs	r3, #5
   16534:	e7d0      	b.n	164d8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   16536:	2303      	movs	r3, #3
   16538:	e7ce      	b.n	164d8 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1653a:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1653c:	bf42      	ittt	mi
   1653e:	2201      	movmi	r2, #1
   16540:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   16542:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   16546:	e7dc      	b.n	16502 <gpio_nrfx_config+0x6a>
   16548:	00f00006 	.word	0x00f00006
   1654c:	00100006 	.word	0x00100006
   16550:	00400002 	.word	0x00400002
   16554:	50000300 	.word	0x50000300

00016558 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   16558:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   1655c:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   1655e:	4b08      	ldr	r3, [pc, #32]	; (16580 <nrf_gpio_cfg_sense_set+0x28>)
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   16560:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   16562:	bf18      	it	ne
   16564:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   16568:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1656c:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
   16570:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   16574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   16578:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
   1657c:	4770      	bx	lr
   1657e:	bf00      	nop
   16580:	50000300 	.word	0x50000300

00016584 <check_level_trigger_pins>:
{
   16584:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   16588:	6903      	ldr	r3, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1658a:	f8d0 a004 	ldr.w	sl, [r0, #4]
	uint32_t out = data->pin_int_en;
   1658e:	68de      	ldr	r6, [r3, #12]
        case 1: return NRF_P1;
   16590:	f8df b07c 	ldr.w	fp, [pc, #124]	; 16610 <check_level_trigger_pins+0x8c>
{
   16594:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
   16596:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   1659a:	430a      	orrs	r2, r1
   1659c:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   165a0:	f8da 2004 	ldr.w	r2, [sl, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   165a4:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   165a6:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
   165aa:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   165ac:	ea26 0505 	bic.w	r5, r6, r5
	uint32_t check_pins = level_pins;
   165b0:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
   165b2:	2401      	movs	r4, #1
	uint32_t pin = 0U;
   165b4:	f04f 0900 	mov.w	r9, #0
	while (check_pins) {
   165b8:	b917      	cbnz	r7, 165c0 <check_level_trigger_pins+0x3c>
}
   165ba:	4628      	mov	r0, r5
   165bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
   165c0:	423c      	tst	r4, r7
   165c2:	d021      	beq.n	16608 <check_level_trigger_pins+0x84>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   165c4:	f89a 3008 	ldrb.w	r3, [sl, #8]
   165c8:	f009 001f 	and.w	r0, r9, #31
			if (!(level_pins & bit)) {
   165cc:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   165ce:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
			if (!(level_pins & bit)) {
   165d2:	d114      	bne.n	165fe <check_level_trigger_pins+0x7a>
    return pin_number >> 5;
   165d4:	0942      	lsrs	r2, r0, #5
        case 1: return NRF_P1;
   165d6:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   165d8:	f000 031f 	and.w	r3, r0, #31
        case 1: return NRF_P1;
   165dc:	bf14      	ite	ne
   165de:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
   165e2:	465a      	moveq	r2, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   165e4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   165e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   165ec:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
   165f0:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
   165f2:	bf02      	ittt	eq
   165f4:	f8d8 3000 	ldreq.w	r3, [r8]
   165f8:	4323      	orreq	r3, r4
   165fa:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   165fe:	2100      	movs	r1, #0
   16600:	f7ff ffaa 	bl	16558 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   16604:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
   16608:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   1660c:	0064      	lsls	r4, r4, #1
   1660e:	e7d3      	b.n	165b8 <check_level_trigger_pins+0x34>
   16610:	50000300 	.word	0x50000300

00016614 <gpio_nrfx_pin_interrupt_configure>:
{
   16614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16616:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   16618:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   1661a:	6907      	ldr	r7, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1661c:	7a09      	ldrb	r1, [r1, #8]
   1661e:	f006 051f 	and.w	r5, r6, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   16622:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   16626:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
   1662a:	d110      	bne.n	1664e <gpio_nrfx_pin_interrupt_configure+0x3a>
    return pin_number >> 5;
   1662c:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
   1662e:	2801      	cmp	r0, #1
    *p_pin = pin_number & 0x1F;
   16630:	f005 011f 	and.w	r1, r5, #31
        case 1: return NRF_P1;
   16634:	485d      	ldr	r0, [pc, #372]	; (167ac <gpio_nrfx_pin_interrupt_configure+0x198>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   16636:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
        case 1: return NRF_P1;
   1663a:	bf18      	it	ne
   1663c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   16640:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   16644:	07c8      	lsls	r0, r1, #31
   16646:	d507      	bpl.n	16658 <gpio_nrfx_pin_interrupt_configure+0x44>
		return -ENOTSUP;
   16648:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1664c:	e093      	b.n	16776 <gpio_nrfx_pin_interrupt_configure+0x162>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1664e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   16652:	68f9      	ldr	r1, [r7, #12]
   16654:	f000 8091 	beq.w	1677a <gpio_nrfx_pin_interrupt_configure+0x166>
   16658:	68f8      	ldr	r0, [r7, #12]
   1665a:	2101      	movs	r1, #1
   1665c:	40b1      	lsls	r1, r6
   1665e:	4301      	orrs	r1, r0
   16660:	6978      	ldr	r0, [r7, #20]
   16662:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   16664:	2101      	movs	r1, #1
   16666:	40b1      	lsls	r1, r6
   16668:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1666c:	69ba      	ldr	r2, [r7, #24]
   1666e:	bf0c      	ite	eq
   16670:	4308      	orreq	r0, r1
   16672:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   16674:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   16678:	bf0c      	ite	eq
   1667a:	430a      	orreq	r2, r1
   1667c:	438a      	bicne	r2, r1
   1667e:	61ba      	str	r2, [r7, #24]
   16680:	693a      	ldr	r2, [r7, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   16682:	6178      	str	r0, [r7, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   16684:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   16688:	bf0c      	ite	eq
   1668a:	4311      	orreq	r1, r2
   1668c:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   16690:	4a47      	ldr	r2, [pc, #284]	; (167b0 <gpio_nrfx_pin_interrupt_configure+0x19c>)
   16692:	6139      	str	r1, [r7, #16]
   16694:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   16698:	2000      	movs	r0, #0
   1669a:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1669c:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   166a0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   166a4:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   166a8:	428d      	cmp	r5, r1
   166aa:	d16b      	bne.n	16784 <gpio_nrfx_pin_interrupt_configure+0x170>
		    && (intenset & BIT(i))) {
   166ac:	fa23 f100 	lsr.w	r1, r3, r0
   166b0:	07c9      	lsls	r1, r1, #31
   166b2:	d567      	bpl.n	16784 <gpio_nrfx_pin_interrupt_configure+0x170>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   166b4:	0083      	lsls	r3, r0, #2
   166b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   166ba:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   166be:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   166c2:	f021 0101 	bic.w	r1, r1, #1
   166c6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   166ca:	2301      	movs	r3, #1
   166cc:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   166ce:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   166d2:	b2c0      	uxtb	r0, r0
   166d4:	f001 fbd0 	bl	17e78 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   166d8:	4628      	mov	r0, r5
   166da:	2100      	movs	r1, #0
   166dc:	f7ff ff3c 	bl	16558 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   166e0:	68f8      	ldr	r0, [r7, #12]
   166e2:	40f0      	lsrs	r0, r6
   166e4:	f010 0001 	ands.w	r0, r0, #1
   166e8:	d045      	beq.n	16776 <gpio_nrfx_pin_interrupt_configure+0x162>
		if (data->trig_edge & BIT(pin)) {
   166ea:	6978      	ldr	r0, [r7, #20]
   166ec:	40f0      	lsrs	r0, r6
   166ee:	f010 0401 	ands.w	r4, r0, #1
   166f2:	d04e      	beq.n	16792 <gpio_nrfx_pin_interrupt_configure+0x17e>
				if (data->double_edge & BIT(pin)) {
   166f4:	69bb      	ldr	r3, [r7, #24]
   166f6:	40f3      	lsrs	r3, r6
   166f8:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   166fa:	bf5f      	itttt	pl
   166fc:	6939      	ldrpl	r1, [r7, #16]
   166fe:	fa21 f606 	lsrpl.w	r6, r1, r6
   16702:	f006 0601 	andpl.w	r6, r6, #1
   16706:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1670a:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1670e:	bf54      	ite	pl
   16710:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   16712:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   16714:	f001 fbd2 	bl	17ebc <nrfx_gpiote_channel_alloc>
   16718:	4b26      	ldr	r3, [pc, #152]	; (167b4 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
   1671a:	4298      	cmp	r0, r3
   1671c:	d136      	bne.n	1678c <gpio_nrfx_pin_interrupt_configure+0x178>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   1671e:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   16722:	008b      	lsls	r3, r1, #2
   16724:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16728:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1672c:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1672e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16732:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   16736:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   1673a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1673e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16742:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
   16746:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
   16748:	008a      	lsls	r2, r1, #2
   1674a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1674e:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16752:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16756:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16758:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1675c:	6010      	str	r0, [r2, #0]
   1675e:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   16760:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16764:	f042 0201 	orr.w	r2, r2, #1
   16768:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1676c:	4a10      	ldr	r2, [pc, #64]	; (167b0 <gpio_nrfx_pin_interrupt_configure+0x19c>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1676e:	2301      	movs	r3, #1
   16770:	408b      	lsls	r3, r1
   16772:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   16776:	b003      	add	sp, #12
   16778:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1677a:	2001      	movs	r0, #1
   1677c:	40b0      	lsls	r0, r6
   1677e:	ea21 0100 	bic.w	r1, r1, r0
   16782:	e76d      	b.n	16660 <gpio_nrfx_pin_interrupt_configure+0x4c>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   16784:	3001      	adds	r0, #1
   16786:	2808      	cmp	r0, #8
   16788:	d188      	bne.n	1669c <gpio_nrfx_pin_interrupt_configure+0x88>
   1678a:	e7a5      	b.n	166d8 <gpio_nrfx_pin_interrupt_configure+0xc4>
		return -ENODEV;
   1678c:	f06f 0012 	mvn.w	r0, #18
   16790:	e7f1      	b.n	16776 <gpio_nrfx_pin_interrupt_configure+0x162>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   16792:	6939      	ldr	r1, [r7, #16]
   16794:	40f1      	lsrs	r1, r6
   16796:	f001 0101 	and.w	r1, r1, #1
   1679a:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1679e:	4628      	mov	r0, r5
   167a0:	b2c9      	uxtb	r1, r1
   167a2:	f7ff fed9 	bl	16558 <nrf_gpio_cfg_sense_set>
	int res = 0;
   167a6:	4620      	mov	r0, r4
   167a8:	e7e5      	b.n	16776 <gpio_nrfx_pin_interrupt_configure+0x162>
   167aa:	bf00      	nop
   167ac:	50000300 	.word	0x50000300
   167b0:	40006000 	.word	0x40006000
   167b4:	0bad0000 	.word	0x0bad0000

000167b8 <gpiote_event_handler>:
{
   167b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   167ba:	2400      	movs	r4, #0
{
   167bc:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   167be:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
   167c2:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   167c6:	4e26      	ldr	r6, [pc, #152]	; (16860 <gpiote_event_handler+0xa8>)
   167c8:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
   167ca:	b15d      	cbz	r5, 167e4 <gpiote_event_handler+0x2c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
   167cc:	a902      	add	r1, sp, #8
   167ce:	4825      	ldr	r0, [pc, #148]	; (16864 <gpiote_event_handler+0xac>)
   167d0:	f7ff fed8 	bl	16584 <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   167d4:	a903      	add	r1, sp, #12
		fired_triggers[0] =
   167d6:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   167d8:	4823      	ldr	r0, [pc, #140]	; (16868 <gpiote_event_handler+0xb0>)
   167da:	f7ff fed3 	bl	16584 <check_level_trigger_pins>
		fired_triggers[1] =
   167de:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   167e0:	6034      	str	r4, [r6, #0]
   167e2:	6833      	ldr	r3, [r6, #0]
    return p_reg->INTENSET & mask;
   167e4:	4c21      	ldr	r4, [pc, #132]	; (1686c <gpiote_event_handler+0xb4>)
{
   167e6:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   167e8:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   167ea:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   167ec:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
   167f0:	fa06 f102 	lsl.w	r1, r6, r2
   167f4:	4219      	tst	r1, r3
   167f6:	d01b      	beq.n	16830 <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   167f8:	0091      	lsls	r1, r2, #2
   167fa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   167fe:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
   16802:	680b      	ldr	r3, [r1, #0]
   16804:	b1a3      	cbz	r3, 16830 <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   16806:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1680a:	af04      	add	r7, sp, #16
   1680c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16810:	f8c1 c000 	str.w	ip, [r1]
   16814:	f3c3 3040 	ubfx	r0, r3, #13, #1
   16818:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1681c:	f3c3 2304 	ubfx	r3, r3, #8, #5
   16820:	f850 7c10 	ldr.w	r7, [r0, #-16]
   16824:	fa06 f303 	lsl.w	r3, r6, r3
   16828:	433b      	orrs	r3, r7
   1682a:	f840 3c10 	str.w	r3, [r0, #-16]
   1682e:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   16830:	3201      	adds	r2, #1
   16832:	2a08      	cmp	r2, #8
   16834:	d1da      	bne.n	167ec <gpiote_event_handler+0x34>
	if (fired_triggers[0]) {
   16836:	9a00      	ldr	r2, [sp, #0]
   16838:	b11a      	cbz	r2, 16842 <gpiote_event_handler+0x8a>
	gpio_fire_callbacks(list, port, pins);
   1683a:	490a      	ldr	r1, [pc, #40]	; (16864 <gpiote_event_handler+0xac>)
   1683c:	480c      	ldr	r0, [pc, #48]	; (16870 <gpiote_event_handler+0xb8>)
   1683e:	f009 f9a9 	bl	1fb94 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   16842:	9a01      	ldr	r2, [sp, #4]
   16844:	b11a      	cbz	r2, 1684e <gpiote_event_handler+0x96>
	gpio_fire_callbacks(list, port, pins);
   16846:	4908      	ldr	r1, [pc, #32]	; (16868 <gpiote_event_handler+0xb0>)
   16848:	480a      	ldr	r0, [pc, #40]	; (16874 <gpiote_event_handler+0xbc>)
   1684a:	f009 f9a3 	bl	1fb94 <gpio_fire_callbacks>
	if (port_event) {
   1684e:	b12d      	cbz	r5, 1685c <gpiote_event_handler+0xa4>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   16850:	4804      	ldr	r0, [pc, #16]	; (16864 <gpiote_event_handler+0xac>)
   16852:	f009 fa09 	bl	1fc68 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   16856:	4804      	ldr	r0, [pc, #16]	; (16868 <gpiote_event_handler+0xb0>)
   16858:	f009 fa06 	bl	1fc68 <cfg_level_pins>
}
   1685c:	b005      	add	sp, #20
   1685e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16860:	4000617c 	.word	0x4000617c
   16864:	00020bf8 	.word	0x00020bf8
   16868:	00020c10 	.word	0x00020c10
   1686c:	40006000 	.word	0x40006000
   16870:	20002374 	.word	0x20002374
   16874:	20002390 	.word	0x20002390

00016878 <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
   16878:	b510      	push	{r4, lr}
   1687a:	4604      	mov	r4, r0
   1687c:	2200      	movs	r2, #0
   1687e:	2101      	movs	r1, #1
   16880:	2003      	movs	r0, #3
   16882:	f7fb fed7 	bl	12634 <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
   16886:	6860      	ldr	r0, [r4, #4]
   16888:	6923      	ldr	r3, [r4, #16]
   1688a:	4a06      	ldr	r2, [pc, #24]	; (168a4 <twim_0_init+0x2c>)
   1688c:	f100 0108 	add.w	r1, r0, #8
   16890:	f001 fb86 	bl	17fa0 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   16894:	4b04      	ldr	r3, [pc, #16]	; (168a8 <twim_0_init+0x30>)
   16896:	4298      	cmp	r0, r3
I2C_NRFX_TWIM_DEVICE(0);
   16898:	bf14      	ite	ne
   1689a:	f06f 000f 	mvnne.w	r0, #15
   1689e:	2000      	moveq	r0, #0
   168a0:	bd10      	pop	{r4, pc}
   168a2:	bf00      	nop
   168a4:	000168ad 	.word	0x000168ad
   168a8:	0bad0000 	.word	0x0bad0000

000168ac <event_handler>:
	switch (p_event->type) {
   168ac:	7803      	ldrb	r3, [r0, #0]
   168ae:	2b01      	cmp	r3, #1
   168b0:	d008      	beq.n	168c4 <event_handler+0x18>
   168b2:	2b02      	cmp	r3, #2
   168b4:	d008      	beq.n	168c8 <event_handler+0x1c>
   168b6:	b94b      	cbnz	r3, 168cc <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   168b8:	4b05      	ldr	r3, [pc, #20]	; (168d0 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   168ba:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   168bc:	f101 0018 	add.w	r0, r1, #24
   168c0:	f002 ba38 	b.w	18d34 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   168c4:	4b03      	ldr	r3, [pc, #12]	; (168d4 <event_handler+0x28>)
   168c6:	e7f8      	b.n	168ba <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   168c8:	4b03      	ldr	r3, [pc, #12]	; (168d8 <event_handler+0x2c>)
   168ca:	e7f6      	b.n	168ba <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   168cc:	4b03      	ldr	r3, [pc, #12]	; (168dc <event_handler+0x30>)
   168ce:	e7f4      	b.n	168ba <event_handler+0xe>
   168d0:	0bad0000 	.word	0x0bad0000
   168d4:	0bae0001 	.word	0x0bae0001
   168d8:	0bae0002 	.word	0x0bae0002
   168dc:	0bad0001 	.word	0x0bad0001

000168e0 <i2c_nrfx_twim_transfer>:
{
   168e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
   168e4:	6904      	ldr	r4, [r0, #16]
{
   168e6:	b089      	sub	sp, #36	; 0x24
   168e8:	461e      	mov	r6, r3
   168ea:	4605      	mov	r5, r0
	uint16_t concat_buf_size = get_dev_data(dev)->concat_buf_size;
   168ec:	8f23      	ldrh	r3, [r4, #56]	; 0x38
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
   168ee:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	uint16_t concat_buf_size = get_dev_data(dev)->concat_buf_size;
   168f2:	9300      	str	r3, [sp, #0]
{
   168f4:	4689      	mov	r9, r1
   168f6:	4692      	mov	sl, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
   168f8:	2100      	movs	r1, #0
   168fa:	2214      	movs	r2, #20
   168fc:	a803      	add	r0, sp, #12
   168fe:	f007 f9b3 	bl	1dc68 <memset>
   16902:	f88d 600d 	strb.w	r6, [sp, #13]
	return z_impl_k_sem_take(sem, timeout);
   16906:	f04f 32ff 	mov.w	r2, #4294967295
   1690a:	f04f 33ff 	mov.w	r3, #4294967295
   1690e:	4620      	mov	r0, r4
   16910:	f002 fa36 	bl	18d80 <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
   16914:	6928      	ldr	r0, [r5, #16]
   16916:	3018      	adds	r0, #24
   16918:	2200      	movs	r2, #0
   1691a:	2300      	movs	r3, #0
   1691c:	f002 fa30 	bl	18d80 <z_impl_k_sem_take>
	nrfx_twim_enable(&get_dev_config(dev)->twim);
   16920:	6868      	ldr	r0, [r5, #4]
		if (res != NRFX_SUCCESS) {
   16922:	f8df b134 	ldr.w	fp, [pc, #308]	; 16a58 <i2c_nrfx_twim_transfer+0x178>
	nrfx_twim_enable(&get_dev_config(dev)->twim);
   16926:	f001 fb95 	bl	18054 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   1692a:	2700      	movs	r7, #0
   1692c:	464e      	mov	r6, r9
	uint32_t concat_len = 0;
   1692e:	463c      	mov	r4, r7
	for (size_t i = 0; i < num_msgs; i++) {
   16930:	4557      	cmp	r7, sl
   16932:	d301      	bcc.n	16938 <i2c_nrfx_twim_transfer+0x58>
   16934:	2400      	movs	r4, #0
   16936:	e02f      	b.n	16998 <i2c_nrfx_twim_transfer+0xb8>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   16938:	7a31      	ldrb	r1, [r6, #8]
   1693a:	070b      	lsls	r3, r1, #28
   1693c:	f100 8081 	bmi.w	16a42 <i2c_nrfx_twim_transfer+0x162>
			&& ((msgs[i].flags & I2C_MSG_READ)
   16940:	9b00      	ldr	r3, [sp, #0]
   16942:	b16b      	cbz	r3, 16960 <i2c_nrfx_twim_transfer+0x80>
			&& ((i + 1) < num_msgs)
   16944:	1c7b      	adds	r3, r7, #1
   16946:	4553      	cmp	r3, sl
   16948:	d20a      	bcs.n	16960 <i2c_nrfx_twim_transfer+0x80>
			&& !(msgs[i].flags & I2C_MSG_STOP)
   1694a:	0788      	lsls	r0, r1, #30
   1694c:	d408      	bmi.n	16960 <i2c_nrfx_twim_transfer+0x80>
			&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   1694e:	7d33      	ldrb	r3, [r6, #20]
			    == (msgs[i + 1].flags & I2C_MSG_READ));
   16950:	ea81 0203 	eor.w	r2, r1, r3
			&& ((msgs[i].flags & I2C_MSG_READ)
   16954:	f002 0201 	and.w	r2, r2, #1
   16958:	f003 0304 	and.w	r3, r3, #4
   1695c:	4313      	orrs	r3, r2
   1695e:	d025      	beq.n	169ac <i2c_nrfx_twim_transfer+0xcc>
		if (concat_next || (concat_len != 0)) {
   16960:	2c00      	cmp	r4, #0
   16962:	d13c      	bne.n	169de <i2c_nrfx_twim_transfer+0xfe>
			cur_xfer.p_primary_buf = msgs[i].buf;
   16964:	6833      	ldr	r3, [r6, #0]
   16966:	9306      	str	r3, [sp, #24]
			cur_xfer.primary_length = msgs[i].len;
   16968:	6873      	ldr	r3, [r6, #4]
   1696a:	9304      	str	r3, [sp, #16]
   1696c:	2400      	movs	r4, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1696e:	7a33      	ldrb	r3, [r6, #8]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   16970:	6868      	ldr	r0, [r5, #4]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   16972:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   16976:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1697a:	f88d 200c 	strb.w	r2, [sp, #12]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   1697e:	a903      	add	r1, sp, #12
   16980:	bf0c      	ite	eq
   16982:	2220      	moveq	r2, #32
   16984:	2200      	movne	r2, #0
   16986:	f001 fb93 	bl	180b0 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   1698a:	4558      	cmp	r0, fp
   1698c:	d029      	beq.n	169e2 <i2c_nrfx_twim_transfer+0x102>
			if (res == NRFX_ERROR_BUSY) {
   1698e:	4b31      	ldr	r3, [pc, #196]	; (16a54 <i2c_nrfx_twim_transfer+0x174>)
   16990:	4298      	cmp	r0, r3
   16992:	d05c      	beq.n	16a4e <i2c_nrfx_twim_transfer+0x16e>
			ret = -EIO;
   16994:	f06f 0404 	mvn.w	r4, #4
	nrfx_twim_disable(&get_dev_config(dev)->twim);
   16998:	6868      	ldr	r0, [r5, #4]
   1699a:	f001 fb6b 	bl	18074 <nrfx_twim_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   1699e:	6928      	ldr	r0, [r5, #16]
	z_impl_k_sem_give(sem);
   169a0:	f002 f9c8 	bl	18d34 <z_impl_k_sem_give>
}
   169a4:	4620      	mov	r0, r4
   169a6:	b009      	add	sp, #36	; 0x24
   169a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& ((msgs[i].flags & I2C_MSG_READ)
   169ac:	2301      	movs	r3, #1
			if ((concat_len + msgs[i].len) > concat_buf_size) {
   169ae:	6872      	ldr	r2, [r6, #4]
   169b0:	9800      	ldr	r0, [sp, #0]
   169b2:	eb02 0c04 	add.w	ip, r2, r4
   169b6:	4584      	cmp	ip, r0
   169b8:	d846      	bhi.n	16a48 <i2c_nrfx_twim_transfer+0x168>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   169ba:	07c9      	lsls	r1, r1, #31
   169bc:	d406      	bmi.n	169cc <i2c_nrfx_twim_transfer+0xec>
				memcpy(concat_buf + concat_len,
   169be:	6831      	ldr	r1, [r6, #0]
   169c0:	9301      	str	r3, [sp, #4]
   169c2:	eb08 0004 	add.w	r0, r8, r4
   169c6:	f007 f944 	bl	1dc52 <memcpy>
   169ca:	9b01      	ldr	r3, [sp, #4]
			concat_len += msgs[i].len;
   169cc:	6872      	ldr	r2, [r6, #4]
   169ce:	4414      	add	r4, r2
		if (concat_next) {
   169d0:	bb03      	cbnz	r3, 16a14 <i2c_nrfx_twim_transfer+0x134>
		if (concat_len == 0) {
   169d2:	2c00      	cmp	r4, #0
   169d4:	d0c6      	beq.n	16964 <i2c_nrfx_twim_transfer+0x84>
			cur_xfer.p_primary_buf = concat_buf;
   169d6:	f8cd 8018 	str.w	r8, [sp, #24]
			cur_xfer.primary_length = concat_len;
   169da:	9404      	str	r4, [sp, #16]
   169dc:	e7c7      	b.n	1696e <i2c_nrfx_twim_transfer+0x8e>
			&& ((msgs[i].flags & I2C_MSG_READ)
   169de:	2300      	movs	r3, #0
   169e0:	e7e5      	b.n	169ae <i2c_nrfx_twim_transfer+0xce>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
   169e2:	6928      	ldr	r0, [r5, #16]
   169e4:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   169e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   169ea:	2300      	movs	r3, #0
   169ec:	f002 f9c8 	bl	18d80 <z_impl_k_sem_take>
		if (ret != 0) {
   169f0:	b140      	cbz	r0, 16a04 <i2c_nrfx_twim_transfer+0x124>
			nrfx_twim_disable(&get_dev_config(dev)->twim);
   169f2:	6868      	ldr	r0, [r5, #4]
   169f4:	f001 fb3e 	bl	18074 <nrfx_twim_disable>
			nrfx_twim_bus_recover(get_dev_config(dev)->config.scl,
   169f8:	686b      	ldr	r3, [r5, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   169fa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   169fe:	f001 fda5 	bl	1854c <nrfx_twi_twim_bus_recover>
   16a02:	e7c7      	b.n	16994 <i2c_nrfx_twim_transfer+0xb4>
		res = get_dev_data(dev)->res;
   16a04:	692b      	ldr	r3, [r5, #16]
   16a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   16a08:	455b      	cmp	r3, fp
   16a0a:	d1c3      	bne.n	16994 <i2c_nrfx_twim_transfer+0xb4>
		if ((msgs[i].flags & I2C_MSG_READ)
   16a0c:	7a33      	ldrb	r3, [r6, #8]
   16a0e:	07db      	lsls	r3, r3, #31
   16a10:	d403      	bmi.n	16a1a <i2c_nrfx_twim_transfer+0x13a>
		concat_len = 0;
   16a12:	2400      	movs	r4, #0
	for (size_t i = 0; i < num_msgs; i++) {
   16a14:	3701      	adds	r7, #1
   16a16:	360c      	adds	r6, #12
   16a18:	e78a      	b.n	16930 <i2c_nrfx_twim_transfer+0x50>
		    && cur_xfer.p_primary_buf == concat_buf) {
   16a1a:	9b06      	ldr	r3, [sp, #24]
   16a1c:	4598      	cmp	r8, r3
   16a1e:	d1f8      	bne.n	16a12 <i2c_nrfx_twim_transfer+0x132>
			while (concat_len >= msgs[j].len) {
   16a20:	230c      	movs	r3, #12
   16a22:	fb03 9307 	mla	r3, r3, r7, r9
   16a26:	685a      	ldr	r2, [r3, #4]
   16a28:	4294      	cmp	r4, r2
   16a2a:	f1a3 030c 	sub.w	r3, r3, #12
   16a2e:	d3f0      	bcc.n	16a12 <i2c_nrfx_twim_transfer+0x132>
				concat_len -= msgs[j].len;
   16a30:	1aa4      	subs	r4, r4, r2
				memcpy(msgs[j].buf,
   16a32:	68d8      	ldr	r0, [r3, #12]
   16a34:	9301      	str	r3, [sp, #4]
   16a36:	eb08 0104 	add.w	r1, r8, r4
   16a3a:	f007 f90a 	bl	1dc52 <memcpy>
   16a3e:	9b01      	ldr	r3, [sp, #4]
				j--;
   16a40:	e7f1      	b.n	16a26 <i2c_nrfx_twim_transfer+0x146>
			ret = -ENOTSUP;
   16a42:	f06f 0485 	mvn.w	r4, #133	; 0x85
   16a46:	e7a7      	b.n	16998 <i2c_nrfx_twim_transfer+0xb8>
				ret = -ENOSPC;
   16a48:	f06f 041b 	mvn.w	r4, #27
   16a4c:	e7a4      	b.n	16998 <i2c_nrfx_twim_transfer+0xb8>
				ret = -EBUSY;
   16a4e:	f06f 040f 	mvn.w	r4, #15
   16a52:	e7a1      	b.n	16998 <i2c_nrfx_twim_transfer+0xb8>
   16a54:	0bad000b 	.word	0x0bad000b
   16a58:	0bad0000 	.word	0x0bad0000

00016a5c <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
   16a5c:	4b01      	ldr	r3, [pc, #4]	; (16a64 <hfclk_on_callback+0x8>)
   16a5e:	2201      	movs	r2, #1
   16a60:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
   16a62:	4770      	bx	lr
   16a64:	4000c000 	.word	0x4000c000

00016a68 <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
   16a68:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
   16a6a:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
   16a6c:	d10b      	bne.n	16a86 <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
   16a6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   16a70:	4b06      	ldr	r3, [pc, #24]	; (16a8c <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
   16a72:	4807      	ldr	r0, [pc, #28]	; (16a90 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
   16a74:	4359      	muls	r1, r3
	val->val1 = uval / 1000000;
   16a76:	fb91 f3f0 	sdiv	r3, r1, r0
   16a7a:	6013      	str	r3, [r2, #0]
	val->val2 = uval % 1000000;
   16a7c:	fb00 1313 	mls	r3, r0, r3, r1
   16a80:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
   16a82:	2000      	movs	r0, #0
   16a84:	4770      	bx	lr
		return -ENOTSUP;
   16a86:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   16a8a:	4770      	bx	lr
   16a8c:	0003d090 	.word	0x0003d090
   16a90:	000f4240 	.word	0x000f4240

00016a94 <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   16a94:	4b03      	ldr	r3, [pc, #12]	; (16aa4 <temp_nrf5_isr+0x10>)

static void temp_nrf5_isr(void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
   16a96:	6900      	ldr	r0, [r0, #16]
   16a98:	2200      	movs	r2, #0
   16a9a:	601a      	str	r2, [r3, #0]
   16a9c:	681b      	ldr	r3, [r3, #0]
	z_impl_k_sem_give(sem);
   16a9e:	f002 b949 	b.w	18d34 <z_impl_k_sem_give>
   16aa2:	bf00      	nop
   16aa4:	4000c100 	.word	0x4000c100

00016aa8 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
   16aa8:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
   16aaa:	6904      	ldr	r4, [r0, #16]

	LOG_DBG("");

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   16aac:	2000      	movs	r0, #0
   16aae:	f7fb fa5f 	bl	11f70 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
   16ab2:	6320      	str	r0, [r4, #48]	; 0x30
	return z_impl_k_sem_init(sem, initial_count, limit);
   16ab4:	f04f 32ff 	mov.w	r2, #4294967295
   16ab8:	2100      	movs	r1, #0
   16aba:	4620      	mov	r0, r4
   16abc:	f009 fc58 	bl	20370 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
   16ac0:	f104 0018 	add.w	r0, r4, #24
   16ac4:	f009 fb80 	bl	201c8 <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
   16ac8:	2200      	movs	r2, #0
   16aca:	2101      	movs	r1, #1
   16acc:	200c      	movs	r0, #12
   16ace:	f7fb fdb1 	bl	12634 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
   16ad2:	200c      	movs	r0, #12
   16ad4:	f7fb fd7c 	bl	125d0 <arch_irq_enable>
    p_reg->INTENSET = mask;
   16ad8:	4b02      	ldr	r3, [pc, #8]	; (16ae4 <temp_nrf5_init+0x3c>)
   16ada:	2201      	movs	r2, #1
   16adc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
   16ae0:	2000      	movs	r0, #0
   16ae2:	bd10      	pop	{r4, pc}
   16ae4:	4000c000 	.word	0x4000c000

00016ae8 <temp_nrf5_sample_fetch>:
{
   16ae8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
   16aea:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
   16aec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16aee:	b36b      	cbz	r3, 16b4c <temp_nrf5_sample_fetch+0x64>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   16af0:	2938      	cmp	r1, #56	; 0x38
   16af2:	d001      	beq.n	16af8 <temp_nrf5_sample_fetch+0x10>
   16af4:	290c      	cmp	r1, #12
   16af6:	d12c      	bne.n	16b52 <temp_nrf5_sample_fetch+0x6a>
	k_mutex_lock(&data->mutex, K_FOREVER);
   16af8:	f105 0618 	add.w	r6, r5, #24
	return z_impl_k_mutex_lock(mutex, timeout);
   16afc:	f04f 32ff 	mov.w	r2, #4294967295
   16b00:	f04f 33ff 	mov.w	r3, #4294967295
   16b04:	4630      	mov	r0, r6
   16b06:	f002 f81d 	bl	18b44 <z_impl_k_mutex_lock>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   16b0a:	4b13      	ldr	r3, [pc, #76]	; (16b58 <temp_nrf5_sample_fetch+0x70>)
   16b0c:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
   16b0e:	6b28      	ldr	r0, [r5, #48]	; 0x30
   16b10:	2303      	movs	r3, #3
   16b12:	2400      	movs	r4, #0
   16b14:	4669      	mov	r1, sp
   16b16:	9403      	str	r4, [sp, #12]
   16b18:	9302      	str	r3, [sp, #8]
   16b1a:	f006 f9db 	bl	1ced4 <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
   16b1e:	f04f 32ff 	mov.w	r2, #4294967295
   16b22:	f04f 33ff 	mov.w	r3, #4294967295
   16b26:	4628      	mov	r0, r5
   16b28:	f002 f92a 	bl	18d80 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
   16b2c:	6b28      	ldr	r0, [r5, #48]	; 0x30
   16b2e:	f006 fa1a 	bl	1cf66 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
   16b32:	4b0a      	ldr	r3, [pc, #40]	; (16b5c <temp_nrf5_sample_fetch+0x74>)
   16b34:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
   16b38:	62eb      	str	r3, [r5, #44]	; 0x2c
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
   16b3a:	4b09      	ldr	r3, [pc, #36]	; (16b60 <temp_nrf5_sample_fetch+0x78>)
   16b3c:	2201      	movs	r2, #1
   16b3e:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   16b40:	4630      	mov	r0, r6
   16b42:	f002 f87d 	bl	18c40 <z_impl_k_mutex_unlock>
	return 0;
   16b46:	4620      	mov	r0, r4
}
   16b48:	b004      	add	sp, #16
   16b4a:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   16b4c:	f06f 000a 	mvn.w	r0, #10
   16b50:	e7fa      	b.n	16b48 <temp_nrf5_sample_fetch+0x60>
		return -ENOTSUP;
   16b52:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16b56:	e7f7      	b.n	16b48 <temp_nrf5_sample_fetch+0x60>
   16b58:	00016a5d 	.word	0x00016a5d
   16b5c:	4000c000 	.word	0x4000c000
   16b60:	4000c004 	.word	0x4000c004

00016b64 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   16b64:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   16b66:	794b      	ldrb	r3, [r1, #5]
   16b68:	2b01      	cmp	r3, #1
   16b6a:	d02a      	beq.n	16bc2 <uarte_nrfx_configure+0x5e>
   16b6c:	2b03      	cmp	r3, #3
   16b6e:	d125      	bne.n	16bbc <uarte_nrfx_configure+0x58>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   16b70:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   16b72:	798b      	ldrb	r3, [r1, #6]
   16b74:	2b03      	cmp	r3, #3
   16b76:	d121      	bne.n	16bbc <uarte_nrfx_configure+0x58>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   16b78:	79cc      	ldrb	r4, [r1, #7]
   16b7a:	b12c      	cbz	r4, 16b88 <uarte_nrfx_configure+0x24>
   16b7c:	2c01      	cmp	r4, #1
   16b7e:	d11d      	bne.n	16bbc <uarte_nrfx_configure+0x58>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   16b80:	6843      	ldr	r3, [r0, #4]
   16b82:	685b      	ldr	r3, [r3, #4]
   16b84:	079b      	lsls	r3, r3, #30
   16b86:	d019      	beq.n	16bbc <uarte_nrfx_configure+0x58>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   16b88:	790a      	ldrb	r2, [r1, #4]
   16b8a:	b112      	cbz	r2, 16b92 <uarte_nrfx_configure+0x2e>
   16b8c:	2a02      	cmp	r2, #2
   16b8e:	d115      	bne.n	16bbc <uarte_nrfx_configure+0x58>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   16b90:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   16b92:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   16b94:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   16b96:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   16b9a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   16b9c:	d065      	beq.n	16c6a <uarte_nrfx_configure+0x106>
   16b9e:	d82d      	bhi.n	16bfc <uarte_nrfx_configure+0x98>
   16ba0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16ba4:	d064      	beq.n	16c70 <uarte_nrfx_configure+0x10c>
   16ba6:	d816      	bhi.n	16bd6 <uarte_nrfx_configure+0x72>
   16ba8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   16bac:	d062      	beq.n	16c74 <uarte_nrfx_configure+0x110>
   16bae:	d80a      	bhi.n	16bc6 <uarte_nrfx_configure+0x62>
   16bb0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   16bb4:	d061      	beq.n	16c7a <uarte_nrfx_configure+0x116>
   16bb6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   16bba:	d061      	beq.n	16c80 <uarte_nrfx_configure+0x11c>
   16bbc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16bc0:	e052      	b.n	16c68 <uarte_nrfx_configure+0x104>
	switch (cfg->stop_bits) {
   16bc2:	2600      	movs	r6, #0
   16bc4:	e7d5      	b.n	16b72 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   16bc6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   16bca:	d05c      	beq.n	16c86 <uarte_nrfx_configure+0x122>
   16bcc:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   16bd0:	d1f4      	bne.n	16bbc <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   16bd2:	4b37      	ldr	r3, [pc, #220]	; (16cb0 <uarte_nrfx_configure+0x14c>)
   16bd4:	e03c      	b.n	16c50 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   16bd6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   16bda:	d057      	beq.n	16c8c <uarte_nrfx_configure+0x128>
   16bdc:	d807      	bhi.n	16bee <uarte_nrfx_configure+0x8a>
   16bde:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   16be2:	d055      	beq.n	16c90 <uarte_nrfx_configure+0x12c>
   16be4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   16be8:	d1e8      	bne.n	16bbc <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   16bea:	4b32      	ldr	r3, [pc, #200]	; (16cb4 <uarte_nrfx_configure+0x150>)
   16bec:	e030      	b.n	16c50 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   16bee:	f647 2712 	movw	r7, #31250	; 0x7a12
   16bf2:	42bb      	cmp	r3, r7
   16bf4:	d1e2      	bne.n	16bbc <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   16bf6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   16bfa:	e029      	b.n	16c50 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   16bfc:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   16c00:	d048      	beq.n	16c94 <uarte_nrfx_configure+0x130>
   16c02:	d813      	bhi.n	16c2c <uarte_nrfx_configure+0xc8>
   16c04:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   16c08:	d047      	beq.n	16c9a <uarte_nrfx_configure+0x136>
   16c0a:	d809      	bhi.n	16c20 <uarte_nrfx_configure+0xbc>
   16c0c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   16c10:	42bb      	cmp	r3, r7
   16c12:	d044      	beq.n	16c9e <uarte_nrfx_configure+0x13a>
   16c14:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   16c18:	d1d0      	bne.n	16bbc <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   16c1a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   16c1e:	e017      	b.n	16c50 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   16c20:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   16c24:	d1ca      	bne.n	16bbc <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   16c26:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   16c2a:	e011      	b.n	16c50 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   16c2c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   16c30:	d038      	beq.n	16ca4 <uarte_nrfx_configure+0x140>
   16c32:	d808      	bhi.n	16c46 <uarte_nrfx_configure+0xe2>
   16c34:	4f20      	ldr	r7, [pc, #128]	; (16cb8 <uarte_nrfx_configure+0x154>)
   16c36:	42bb      	cmp	r3, r7
   16c38:	d037      	beq.n	16caa <uarte_nrfx_configure+0x146>
   16c3a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   16c3e:	d1bd      	bne.n	16bbc <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   16c40:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   16c44:	e004      	b.n	16c50 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   16c46:	4f1d      	ldr	r7, [pc, #116]	; (16cbc <uarte_nrfx_configure+0x158>)
   16c48:	42bb      	cmp	r3, r7
   16c4a:	d1b7      	bne.n	16bbc <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   16c4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   16c50:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   16c54:	6903      	ldr	r3, [r0, #16]
   16c56:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   16c58:	4334      	orrs	r4, r6
   16c5a:	4322      	orrs	r2, r4
   16c5c:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   16c5e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   16c62:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   16c66:	2000      	movs	r0, #0
}
   16c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   16c6a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   16c6e:	e7ef      	b.n	16c50 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   16c70:	4b13      	ldr	r3, [pc, #76]	; (16cc0 <uarte_nrfx_configure+0x15c>)
   16c72:	e7ed      	b.n	16c50 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   16c74:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   16c78:	e7ea      	b.n	16c50 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
   16c7a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   16c7e:	e7e7      	b.n	16c50 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   16c80:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   16c84:	e7e4      	b.n	16c50 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   16c86:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   16c8a:	e7e1      	b.n	16c50 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   16c8c:	4b0d      	ldr	r3, [pc, #52]	; (16cc4 <uarte_nrfx_configure+0x160>)
   16c8e:	e7df      	b.n	16c50 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   16c90:	4b0d      	ldr	r3, [pc, #52]	; (16cc8 <uarte_nrfx_configure+0x164>)
   16c92:	e7dd      	b.n	16c50 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   16c94:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   16c98:	e7da      	b.n	16c50 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   16c9a:	4b0c      	ldr	r3, [pc, #48]	; (16ccc <uarte_nrfx_configure+0x168>)
   16c9c:	e7d8      	b.n	16c50 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   16c9e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   16ca2:	e7d5      	b.n	16c50 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   16ca4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   16ca8:	e7d2      	b.n	16c50 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   16caa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   16cae:	e7cf      	b.n	16c50 <uarte_nrfx_configure+0xec>
   16cb0:	0013b000 	.word	0x0013b000
   16cb4:	004ea000 	.word	0x004ea000
   16cb8:	0003d090 	.word	0x0003d090
   16cbc:	000f4240 	.word	0x000f4240
   16cc0:	00275000 	.word	0x00275000
   16cc4:	0075c000 	.word	0x0075c000
   16cc8:	003af000 	.word	0x003af000
   16ccc:	013a9000 	.word	0x013a9000

00016cd0 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   16cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   16cd2:	6906      	ldr	r6, [r0, #16]
{
   16cd4:	4605      	mov	r5, r0
   16cd6:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   16cd8:	f009 fa64 	bl	201a4 <k_is_in_isr>
   16cdc:	b910      	cbnz	r0, 16ce4 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   16cde:	4b2c      	ldr	r3, [pc, #176]	; (16d90 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
   16ce0:	781b      	ldrb	r3, [r3, #0]
   16ce2:	b983      	cbnz	r3, 16d06 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   16ce4:	f04f 0340 	mov.w	r3, #64	; 0x40
   16ce8:	f3ef 8411 	mrs	r4, BASEPRI
   16cec:	f383 8811 	msr	BASEPRI, r3
   16cf0:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   16cf4:	4628      	mov	r0, r5
   16cf6:	f009 f83f 	bl	1fd78 <is_tx_ready>
   16cfa:	bb28      	cbnz	r0, 16d48 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   16cfc:	f384 8811 	msr	BASEPRI, r4
   16d00:	f3bf 8f6f 	isb	sy
}
   16d04:	e7ee      	b.n	16ce4 <uarte_nrfx_poll_out+0x14>
{
   16d06:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   16d08:	4628      	mov	r0, r5
   16d0a:	f009 f835 	bl	1fd78 <is_tx_ready>
   16d0e:	b970      	cbnz	r0, 16d2e <uarte_nrfx_poll_out+0x5e>
   16d10:	2001      	movs	r0, #1
   16d12:	f009 f8d3 	bl	1febc <nrfx_busy_wait>
   16d16:	3c01      	subs	r4, #1
   16d18:	d1f6      	bne.n	16d08 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   16d1a:	2100      	movs	r1, #0
   16d1c:	2021      	movs	r0, #33	; 0x21
   16d1e:	f002 fd0d 	bl	1973c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   16d22:	e7f0      	b.n	16d06 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   16d24:	f384 8811 	msr	BASEPRI, r4
   16d28:	f3bf 8f6f 	isb	sy
}
   16d2c:	e7f5      	b.n	16d1a <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   16d2e:	f04f 0340 	mov.w	r3, #64	; 0x40
   16d32:	f3ef 8411 	mrs	r4, BASEPRI
   16d36:	f383 8811 	msr	BASEPRI, r3
   16d3a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   16d3e:	4628      	mov	r0, r5
   16d40:	f009 f81a 	bl	1fd78 <is_tx_ready>
   16d44:	2800      	cmp	r0, #0
   16d46:	d0ed      	beq.n	16d24 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   16d48:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   16d4c:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   16d4e:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   16d50:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   16d52:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   16d56:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16d5a:	2200      	movs	r2, #0
   16d5c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   16d60:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   16d64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   16d68:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   16d6c:	684a      	ldr	r2, [r1, #4]
   16d6e:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   16d70:	bf41      	itttt	mi
   16d72:	2208      	movmi	r2, #8
   16d74:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   16d78:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   16d7c:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16d80:	2201      	movs	r2, #1
   16d82:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   16d84:	f384 8811 	msr	BASEPRI, r4
   16d88:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
   16d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16d8e:	bf00      	nop
   16d90:	20003a77 	.word	0x20003a77

00016d94 <nrf_gpio_cfg_output>:
    *p_pin = pin_number & 0x1F;
   16d94:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   16d98:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   16d9a:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   16d9c:	4b04      	ldr	r3, [pc, #16]	; (16db0 <nrf_gpio_cfg_output+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
   16d9e:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   16da2:	bf18      	it	ne
   16da4:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   16da8:	2103      	movs	r1, #3
   16daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   16dae:	4770      	bx	lr
   16db0:	50000300 	.word	0x50000300

00016db4 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
   16db4:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   16db8:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   16dba:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   16dbc:	4b04      	ldr	r3, [pc, #16]	; (16dd0 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   16dbe:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   16dc2:	bf18      	it	ne
   16dc4:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   16dc8:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   16dca:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   16dce:	4770      	bx	lr
   16dd0:	50000300 	.word	0x50000300

00016dd4 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   16dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16dd6:	2200      	movs	r2, #0
   16dd8:	4605      	mov	r5, r0
   16dda:	2101      	movs	r1, #1
   16ddc:	2002      	movs	r0, #2
   16dde:	f7fb fc29 	bl	12634 <z_arm_irq_priority_set>
   16de2:	2002      	movs	r0, #2
   16de4:	f7fb fbf4 	bl	125d0 <arch_irq_enable>
	return config->uarte_regs;
   16de8:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   16dea:	692e      	ldr	r6, [r5, #16]
	return config->uarte_regs;
   16dec:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   16dee:	2300      	movs	r3, #0
   16df0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        nrf_gpio_pin_set(pin_number);
   16df4:	2006      	movs	r0, #6
	data->dev = dev;
   16df6:	6035      	str	r5, [r6, #0]
   16df8:	f7ff ffdc 	bl	16db4 <nrf_gpio_pin_set>
	nrf_gpio_cfg_output(config->pseltxd);
   16dfc:	2006      	movs	r0, #6
   16dfe:	f7ff ffc9 	bl	16d94 <nrf_gpio_cfg_output>
    reg->PIN_CNF[pin_number] = cnf;
   16e02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   16e06:	220c      	movs	r2, #12
    p_reg->PSEL.TXD = pseltxd;
   16e08:	2106      	movs	r1, #6
   16e0a:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
   16e0e:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   16e12:	2108      	movs	r1, #8
   16e14:	f8c4 1514 	str.w	r1, [r4, #1300]	; 0x514
        nrf_gpio_pin_set(pin_number);
   16e18:	2005      	movs	r0, #5
    reg->PIN_CNF[pin_number] = cnf;
   16e1a:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
        nrf_gpio_pin_set(pin_number);
   16e1e:	f7ff ffc9 	bl	16db4 <nrf_gpio_pin_set>
		nrf_gpio_cfg_output(config->pselrts);
   16e22:	2005      	movs	r0, #5
   16e24:	f7ff ffb6 	bl	16d94 <nrf_gpio_cfg_output>
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   16e28:	6929      	ldr	r1, [r5, #16]
    p_reg->PSEL.RTS = pselrts;
   16e2a:	2305      	movs	r3, #5
   16e2c:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   16e30:	2307      	movs	r3, #7
   16e32:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   16e36:	3104      	adds	r1, #4
   16e38:	4628      	mov	r0, r5
   16e3a:	f7ff fe93 	bl	16b64 <uarte_nrfx_configure>
	if (err) {
   16e3e:	4607      	mov	r7, r0
   16e40:	2800      	cmp	r0, #0
   16e42:	d144      	bne.n	16ece <uarte_0_init+0xfa>
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   16e44:	686b      	ldr	r3, [r5, #4]
   16e46:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   16e48:	0719      	lsls	r1, r3, #28
   16e4a:	d519      	bpl.n	16e80 <uarte_0_init+0xac>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   16e4c:	f106 0012 	add.w	r0, r6, #18
   16e50:	f001 f86c 	bl	17f2c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   16e54:	4b20      	ldr	r3, [pc, #128]	; (16ed8 <uarte_0_init+0x104>)
   16e56:	4298      	cmp	r0, r3
   16e58:	d13b      	bne.n	16ed2 <uarte_0_init+0xfe>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   16e5a:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   16e5c:	00c3      	lsls	r3, r0, #3
   16e5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16e62:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   16e66:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   16e6a:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   16e6e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   16e72:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   16e76:	4a19      	ldr	r2, [pc, #100]	; (16edc <uarte_0_init+0x108>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   16e78:	2301      	movs	r3, #1
   16e7a:	4083      	lsls	r3, r0
   16e7c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   16e80:	2308      	movs	r3, #8
   16e82:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16e86:	2300      	movs	r3, #0
   16e88:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   16e8c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   16e90:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   16e94:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   16e98:	2301      	movs	r3, #1
   16e9a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16e9e:	6023      	str	r3, [r4, #0]
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   16ea0:	686b      	ldr	r3, [r5, #4]
   16ea2:	685b      	ldr	r3, [r3, #4]
   16ea4:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
   16ea6:	bf5c      	itt	pl
   16ea8:	f44f 7280 	movpl.w	r2, #256	; 0x100
   16eac:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   16eb0:	06db      	lsls	r3, r3, #27
   16eb2:	bf44      	itt	mi
   16eb4:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   16eb8:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   16ebc:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
   16ebe:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   16ec0:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   16ec4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16ec8:	2301      	movs	r3, #1
   16eca:	60a3      	str	r3, [r4, #8]
   16ecc:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   16ece:	4638      	mov	r0, r7
   16ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EIO;
   16ed2:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   16ed6:	e7fa      	b.n	16ece <uarte_0_init+0xfa>
   16ed8:	0bad0000 	.word	0x0bad0000
   16edc:	4001f000 	.word	0x4001f000

00016ee0 <random_byte_get>:
	__asm__ volatile(
   16ee0:	f04f 0340 	mov.w	r3, #64	; 0x40
   16ee4:	f3ef 8211 	mrs	r2, BASEPRI
   16ee8:	f383 8811 	msr	BASEPRI, r3
   16eec:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   16ef0:	4b08      	ldr	r3, [pc, #32]	; (16f14 <random_byte_get+0x34>)
   16ef2:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   16ef4:	b159      	cbz	r1, 16f0e <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   16ef6:	4908      	ldr	r1, [pc, #32]	; (16f18 <random_byte_get+0x38>)
   16ef8:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   16efc:	2100      	movs	r1, #0
   16efe:	6019      	str	r1, [r3, #0]
   16f00:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   16f02:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   16f04:	f382 8811 	msr	BASEPRI, r2
   16f08:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   16f0c:	4770      	bx	lr
	int retval = -EAGAIN;
   16f0e:	f06f 000a 	mvn.w	r0, #10
   16f12:	e7f7      	b.n	16f04 <random_byte_get+0x24>
   16f14:	4000d100 	.word	0x4000d100
   16f18:	4000d000 	.word	0x4000d000

00016f1c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   16f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16f1e:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   16f20:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   16f22:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   16f24:	f04f 0540 	mov.w	r5, #64	; 0x40
   16f28:	f3ef 8011 	mrs	r0, BASEPRI
   16f2c:	f385 8811 	msr	BASEPRI, r5
   16f30:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   16f34:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   16f36:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   16f3a:	1ba4      	subs	r4, r4, r6
   16f3c:	403c      	ands	r4, r7
	if (available < len) {
   16f3e:	42a2      	cmp	r2, r4
		len = available;
   16f40:	bf88      	it	hi
   16f42:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   16f44:	eb06 0c02 	add.w	ip, r6, r2
   16f48:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   16f4c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   16f4e:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   16f52:	f380 8811 	msr	BASEPRI, r0
   16f56:	f3bf 8f6f 	isb	sy
   16f5a:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   16f5c:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   16f5e:	4282      	cmp	r2, r0
   16f60:	d119      	bne.n	16f96 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   16f62:	4576      	cmp	r6, lr
   16f64:	d10d      	bne.n	16f82 <rng_pool_get+0x66>
	__asm__ volatile(
   16f66:	f04f 0540 	mov.w	r5, #64	; 0x40
   16f6a:	f3ef 8211 	mrs	r2, BASEPRI
   16f6e:	f385 8811 	msr	BASEPRI, r5
   16f72:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   16f76:	781d      	ldrb	r5, [r3, #0]
   16f78:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   16f7a:	f382 8811 	msr	BASEPRI, r2
   16f7e:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   16f82:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   16f84:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   16f86:	b288      	uxth	r0, r1
	available = available - len;
   16f88:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   16f8a:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   16f8c:	bf22      	ittt	cs
   16f8e:	4b06      	ldrcs	r3, [pc, #24]	; (16fa8 <rng_pool_get+0x8c>)
   16f90:	2201      	movcs	r2, #1
   16f92:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   16f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   16f96:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   16f9a:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   16f9c:	f89c c005 	ldrb.w	ip, [ip, #5]
   16fa0:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   16fa4:	403d      	ands	r5, r7
   16fa6:	e7da      	b.n	16f5e <rng_pool_get+0x42>
   16fa8:	4000d000 	.word	0x4000d000

00016fac <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   16fac:	43db      	mvns	r3, r3
{
   16fae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   16fb2:	f013 0501 	ands.w	r5, r3, #1
{
   16fb6:	460e      	mov	r6, r1
   16fb8:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   16fba:	d004      	beq.n	16fc6 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   16fbc:	4821      	ldr	r0, [pc, #132]	; (17044 <entropy_nrf5_get_entropy_isr+0x98>)
   16fbe:	f7ff ffad 	bl	16f1c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   16fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   16fc6:	2a00      	cmp	r2, #0
   16fc8:	d033      	beq.n	17032 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   16fca:	f04f 0340 	mov.w	r3, #64	; 0x40
   16fce:	f3ef 8811 	mrs	r8, BASEPRI
   16fd2:	f383 8811 	msr	BASEPRI, r3
   16fd6:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   16fda:	200d      	movs	r0, #13
   16fdc:	f7fb fb1c 	bl	12618 <arch_irq_is_enabled>
   16fe0:	4607      	mov	r7, r0
		irq_disable(IRQN);
   16fe2:	200d      	movs	r0, #13
   16fe4:	f7fb fb04 	bl	125f0 <arch_irq_disable>
	__asm__ volatile(
   16fe8:	f388 8811 	msr	BASEPRI, r8
   16fec:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   16ff0:	4a15      	ldr	r2, [pc, #84]	; (17048 <entropy_nrf5_get_entropy_isr+0x9c>)
   16ff2:	6015      	str	r5, [r2, #0]
   16ff4:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   16ff6:	4b15      	ldr	r3, [pc, #84]	; (1704c <entropy_nrf5_get_entropy_isr+0xa0>)
   16ff8:	2101      	movs	r1, #1
   16ffa:	6019      	str	r1, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16ffc:	4914      	ldr	r1, [pc, #80]	; (17050 <entropy_nrf5_get_entropy_isr+0xa4>)
   16ffe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   17002:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   17006:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   17008:	4691      	mov	r9, r2
   1700a:	468a      	mov	sl, r1
   1700c:	4698      	mov	r8, r3
   1700e:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   17012:	b183      	cbz	r3, 17036 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   17014:	f7ff ff64 	bl	16ee0 <random_byte_get>
			if (byte < 0) {
   17018:	1e03      	subs	r3, r0, #0
   1701a:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   1701e:	dbf6      	blt.n	1700e <entropy_nrf5_get_entropy_isr+0x62>
   17020:	3d01      	subs	r5, #1
   17022:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   17024:	5573      	strb	r3, [r6, r5]
		} while (len);
   17026:	2d00      	cmp	r5, #0
   17028:	d1f1      	bne.n	1700e <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1702a:	b117      	cbz	r7, 17032 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1702c:	200d      	movs	r0, #13
   1702e:	f7fb facf 	bl	125d0 <arch_irq_enable>
	return cnt;
   17032:	4620      	mov	r0, r4
   17034:	e7c5      	b.n	16fc2 <entropy_nrf5_get_entropy_isr+0x16>
   17036:	f3bf 8f4f 	dsb	sy
				__WFE();
   1703a:	bf20      	wfe
				__SEV();
   1703c:	bf40      	sev
				__WFE();
   1703e:	bf20      	wfe
   17040:	e7e5      	b.n	1700e <entropy_nrf5_get_entropy_isr+0x62>
   17042:	bf00      	nop
   17044:	2000241c 	.word	0x2000241c
   17048:	4000d100 	.word	0x4000d100
   1704c:	4000d000 	.word	0x4000d000
   17050:	e000e100 	.word	0xe000e100

00017054 <entropy_nrf5_get_entropy>:
{
   17054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   17058:	4f13      	ldr	r7, [pc, #76]	; (170a8 <entropy_nrf5_get_entropy+0x54>)
   1705a:	460d      	mov	r5, r1
   1705c:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1705e:	f107 0845 	add.w	r8, r7, #69	; 0x45
   17062:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   17066:	b914      	cbnz	r4, 1706e <entropy_nrf5_get_entropy+0x1a>
}
   17068:	4620      	mov	r0, r4
   1706a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1706e:	f04f 33ff 	mov.w	r3, #4294967295
   17072:	f04f 32ff 	mov.w	r2, #4294967295
   17076:	4638      	mov	r0, r7
   17078:	f001 fe82 	bl	18d80 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1707c:	4622      	mov	r2, r4
   1707e:	4629      	mov	r1, r5
   17080:	4640      	mov	r0, r8
   17082:	f7ff ff4b 	bl	16f1c <rng_pool_get>
   17086:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   17088:	4638      	mov	r0, r7
   1708a:	f001 fe53 	bl	18d34 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1708e:	b93e      	cbnz	r6, 170a0 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   17090:	f04f 32ff 	mov.w	r2, #4294967295
   17094:	f04f 33ff 	mov.w	r3, #4294967295
   17098:	4648      	mov	r0, r9
   1709a:	f001 fe71 	bl	18d80 <z_impl_k_sem_take>
			continue;
   1709e:	e7e2      	b.n	17066 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   170a0:	1ba4      	subs	r4, r4, r6
   170a2:	b2a4      	uxth	r4, r4
		buf += bytes;
   170a4:	4435      	add	r5, r6
   170a6:	e7de      	b.n	17066 <entropy_nrf5_get_entropy+0x12>
   170a8:	200023ec 	.word	0x200023ec

000170ac <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   170ac:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   170ae:	4c19      	ldr	r4, [pc, #100]	; (17114 <entropy_nrf5_init+0x68>)
   170b0:	2201      	movs	r2, #1
   170b2:	4611      	mov	r1, r2
   170b4:	4620      	mov	r0, r4
   170b6:	f009 f95b 	bl	20370 <z_impl_k_sem_init>
   170ba:	2201      	movs	r2, #1
   170bc:	2100      	movs	r1, #0
   170be:	f104 0018 	add.w	r0, r4, #24
   170c2:	f009 f955 	bl	20370 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   170c6:	f240 4307 	movw	r3, #1031	; 0x407
   170ca:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   170ce:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   170d2:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   170d4:	230c      	movs	r3, #12
   170d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   170da:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   170dc:	4b0e      	ldr	r3, [pc, #56]	; (17118 <entropy_nrf5_init+0x6c>)
   170de:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   170e2:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   170e6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   170ea:	f022 0201 	bic.w	r2, r2, #1
   170ee:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   170f2:	4a0a      	ldr	r2, [pc, #40]	; (1711c <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   170f4:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   170f6:	6015      	str	r5, [r2, #0]
   170f8:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   170fa:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   170fe:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   17100:	6019      	str	r1, [r3, #0]
   17102:	200d      	movs	r0, #13
   17104:	f7fb fa96 	bl	12634 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   17108:	200d      	movs	r0, #13
   1710a:	f7fb fa61 	bl	125d0 <arch_irq_enable>

	return 0;
}
   1710e:	4628      	mov	r0, r5
   17110:	bd38      	pop	{r3, r4, r5, pc}
   17112:	bf00      	nop
   17114:	200023ec 	.word	0x200023ec
   17118:	4000d000 	.word	0x4000d000
   1711c:	4000d100 	.word	0x4000d100

00017120 <isr>:
{
   17120:	b510      	push	{r4, lr}
	byte = random_byte_get();
   17122:	f7ff fedd 	bl	16ee0 <random_byte_get>
	if (byte < 0) {
   17126:	2800      	cmp	r0, #0
   17128:	db20      	blt.n	1716c <isr+0x4c>
	uint8_t last  = rngp->last;
   1712a:	4b17      	ldr	r3, [pc, #92]	; (17188 <isr+0x68>)
   1712c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   17130:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   17134:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   17138:	1a51      	subs	r1, r2, r1
   1713a:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1713e:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   17140:	d10d      	bne.n	1715e <isr+0x3e>
	uint8_t last  = rngp->last;
   17142:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   17146:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1714a:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1714e:	1a51      	subs	r1, r2, r1
   17150:	ea34 0101 	bics.w	r1, r4, r1
   17154:	d10b      	bne.n	1716e <isr+0x4e>
   17156:	4b0d      	ldr	r3, [pc, #52]	; (1718c <isr+0x6c>)
   17158:	2201      	movs	r2, #1
   1715a:	601a      	str	r2, [r3, #0]
}
   1715c:	e00e      	b.n	1717c <isr+0x5c>
	rngp->buffer[last] = byte;
   1715e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   17160:	3201      	adds	r2, #1
   17162:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   17164:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   17168:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1716c:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1716e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   17170:	3201      	adds	r2, #1
   17172:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   17174:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   17178:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1717c:	4804      	ldr	r0, [pc, #16]	; (17190 <isr+0x70>)
}
   1717e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17182:	f001 bdd7 	b.w	18d34 <z_impl_k_sem_give>
   17186:	bf00      	nop
   17188:	200023ec 	.word	0x200023ec
   1718c:	4000d004 	.word	0x4000d004
   17190:	20002404 	.word	0x20002404

00017194 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   17194:	4602      	mov	r2, r0
   17196:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   17198:	4801      	ldr	r0, [pc, #4]	; (171a0 <multithreading_lock_acquire+0xc>)
   1719a:	f001 bcd3 	b.w	18b44 <z_impl_k_mutex_lock>
   1719e:	bf00      	nop
   171a0:	20000800 	.word	0x20000800

000171a4 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   171a4:	4801      	ldr	r0, [pc, #4]	; (171ac <multithreading_lock_release+0x8>)
   171a6:	f001 bd4b 	b.w	18c40 <z_impl_k_mutex_unlock>
   171aa:	bf00      	nop
   171ac:	20000800 	.word	0x20000800

000171b0 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   171b0:	460a      	mov	r2, r1
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   171b2:	4905      	ldr	r1, [pc, #20]	; (171c8 <rand_prio_low_vector_get_blocking+0x18>)
{
   171b4:	b410      	push	{r4}
   171b6:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   171b8:	6808      	ldr	r0, [r1, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   171ba:	6881      	ldr	r1, [r0, #8]
   171bc:	680c      	ldr	r4, [r1, #0]
   171be:	4619      	mov	r1, r3
   171c0:	4623      	mov	r3, r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   171c2:	bc10      	pop	{r4}
   171c4:	4718      	bx	r3
   171c6:	bf00      	nop
   171c8:	20002444 	.word	0x20002444

000171cc <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   171cc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   171ce:	4804      	ldr	r0, [pc, #16]	; (171e0 <hci_driver_init+0x14>)
   171d0:	f7fc fc54 	bl	13a7c <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   171d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   171d8:	4802      	ldr	r0, [pc, #8]	; (171e4 <hci_driver_init+0x18>)
   171da:	f7ed bb37 	b.w	484c <sdc_init>
   171de:	bf00      	nop
   171e0:	000216a4 	.word	0x000216a4
   171e4:	0001fe1f 	.word	0x0001fe1f

000171e8 <rand_prio_low_vector_get>:
{
   171e8:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   171ea:	4b08      	ldr	r3, [pc, #32]	; (1720c <rand_prio_low_vector_get+0x24>)
{
   171ec:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   171ee:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   171f0:	6883      	ldr	r3, [r0, #8]
   171f2:	685d      	ldr	r5, [r3, #4]
   171f4:	460a      	mov	r2, r1
   171f6:	b135      	cbz	r5, 17206 <rand_prio_low_vector_get+0x1e>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   171f8:	2300      	movs	r3, #0
   171fa:	4621      	mov	r1, r4
   171fc:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   171fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   17202:	b2c0      	uxtb	r0, r0
   17204:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   17206:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1720a:	e7f8      	b.n	171fe <rand_prio_low_vector_get+0x16>
   1720c:	20002444 	.word	0x20002444

00017210 <hci_driver_open>:
{
   17210:	b570      	push	{r4, r5, r6, lr}
   17212:	b090      	sub	sp, #64	; 0x40
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17214:	2200      	movs	r2, #0
   17216:	2300      	movs	r3, #0
   17218:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1721c:	2300      	movs	r3, #0
   1721e:	f06f 0209 	mvn.w	r2, #9
   17222:	e9cd 2303 	strd	r2, r3, [sp, #12]
   17226:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1722a:	9300      	str	r3, [sp, #0]
   1722c:	4941      	ldr	r1, [pc, #260]	; (17334 <hci_driver_open+0x124>)
   1722e:	4b42      	ldr	r3, [pc, #264]	; (17338 <hci_driver_open+0x128>)
   17230:	4842      	ldr	r0, [pc, #264]	; (1733c <hci_driver_open+0x12c>)
   17232:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17236:	f001 fbe5 	bl	18a04 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1723a:	4941      	ldr	r1, [pc, #260]	; (17340 <hci_driver_open+0x130>)
   1723c:	483f      	ldr	r0, [pc, #252]	; (1733c <hci_driver_open+0x12c>)
   1723e:	f008 ffb7 	bl	201b0 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   17242:	a80b      	add	r0, sp, #44	; 0x2c
   17244:	f7ed fa84 	bl	4750 <sdc_build_revision_get>
			err = sdc_support_adv();
   17248:	f7ed fb7e 	bl	4948 <sdc_support_adv>
			if (err) {
   1724c:	b110      	cbz	r0, 17254 <hci_driver_open+0x44>
		return -err;
   1724e:	2086      	movs	r0, #134	; 0x86
}
   17250:	b010      	add	sp, #64	; 0x40
   17252:	bd70      	pop	{r4, r5, r6, pc}
		err = sdc_support_slave();
   17254:	f7ed fba8 	bl	49a8 <sdc_support_slave>
		if (err) {
   17258:	2800      	cmp	r0, #0
   1725a:	d1f8      	bne.n	1724e <hci_driver_open+0x3e>
		err = sdc_support_dle();
   1725c:	f7ed fb84 	bl	4968 <sdc_support_dle>
		if (err) {
   17260:	2800      	cmp	r0, #0
   17262:	d1f4      	bne.n	1724e <hci_driver_open+0x3e>
		err = sdc_support_le_2m_phy();
   17264:	f7ed fb90 	bl	4988 <sdc_support_le_2m_phy>
		if (err) {
   17268:	4605      	mov	r5, r0
   1726a:	2800      	cmp	r0, #0
   1726c:	d1ef      	bne.n	1724e <hci_driver_open+0x3e>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1726e:	ac08      	add	r4, sp, #32
   17270:	4622      	mov	r2, r4
   17272:	2101      	movs	r1, #1
	cfg.master_count.count = SDC_MASTER_COUNT;
   17274:	f88d 0020 	strb.w	r0, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17278:	f7ed fa78 	bl	476c <sdc_cfg_set>
	if (required_memory < 0) {
   1727c:	2800      	cmp	r0, #0
   1727e:	dbe7      	blt.n	17250 <hci_driver_open+0x40>
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   17280:	2601      	movs	r6, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17282:	4622      	mov	r2, r4
   17284:	2102      	movs	r1, #2
   17286:	4628      	mov	r0, r5
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   17288:	f88d 6020 	strb.w	r6, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1728c:	f7ed fa6e 	bl	476c <sdc_cfg_set>
	if (required_memory < 0) {
   17290:	2800      	cmp	r0, #0
   17292:	dbdd      	blt.n	17250 <hci_driver_open+0x40>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   17294:	4b2b      	ldr	r3, [pc, #172]	; (17344 <hci_driver_open+0x134>)
   17296:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17298:	4622      	mov	r2, r4
   1729a:	2103      	movs	r1, #3
   1729c:	4628      	mov	r0, r5
   1729e:	f7ed fa65 	bl	476c <sdc_cfg_set>
	if (required_memory < 0) {
   172a2:	2800      	cmp	r0, #0
   172a4:	dbd4      	blt.n	17250 <hci_driver_open+0x40>
	cfg.event_length.event_length_us =
   172a6:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   172aa:	4622      	mov	r2, r4
   172ac:	2104      	movs	r1, #4
   172ae:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   172b0:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   172b2:	f7ed fa5b 	bl	476c <sdc_cfg_set>
	if (required_memory < 0) {
   172b6:	2800      	cmp	r0, #0
   172b8:	dbca      	blt.n	17250 <hci_driver_open+0x40>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   172ba:	4622      	mov	r2, r4
   172bc:	2105      	movs	r1, #5
   172be:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   172c0:	f88d 6020 	strb.w	r6, [sp, #32]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   172c4:	f7ed fa52 	bl	476c <sdc_cfg_set>
	if (required_memory < 0) {
   172c8:	2800      	cmp	r0, #0
   172ca:	dbc1      	blt.n	17250 <hci_driver_open+0x40>
	if (required_memory > sizeof(sdc_mempool)) {
   172cc:	f240 63e6 	movw	r3, #1766	; 0x6e6
   172d0:	4298      	cmp	r0, r3
   172d2:	dd08      	ble.n	172e6 <hci_driver_open+0xd6>
		k_panic();
   172d4:	4040      	eors	r0, r0
   172d6:	f380 8811 	msr	BASEPRI, r0
   172da:	f04f 0004 	mov.w	r0, #4
   172de:	df02      	svc	2
		return -ENOMEM;
   172e0:	f06f 000b 	mvn.w	r0, #11
   172e4:	e7b4      	b.n	17250 <hci_driver_open+0x40>
   172e6:	4818      	ldr	r0, [pc, #96]	; (17348 <hci_driver_open+0x138>)
   172e8:	f001 fa1e 	bl	18728 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   172ec:	4b17      	ldr	r3, [pc, #92]	; (1734c <hci_driver_open+0x13c>)
   172ee:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   172f0:	b1e8      	cbz	r0, 1732e <hci_driver_open+0x11e>
	sdc_rand_source_t rand_functions = {
   172f2:	4b17      	ldr	r3, [pc, #92]	; (17350 <hci_driver_open+0x140>)
   172f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   172f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   172fc:	4620      	mov	r0, r4
   172fe:	f7ed fbbf 	bl	4a80 <sdc_rand_source_register>
	if (err) {
   17302:	b988      	cbnz	r0, 17328 <hci_driver_open+0x118>
	err = MULTITHREADING_LOCK_ACQUIRE();
   17304:	f04f 30ff 	mov.w	r0, #4294967295
   17308:	f04f 31ff 	mov.w	r1, #4294967295
   1730c:	f7ff ff42 	bl	17194 <multithreading_lock_acquire>
	if (!err) {
   17310:	4604      	mov	r4, r0
   17312:	b930      	cbnz	r0, 17322 <hci_driver_open+0x112>
		err = sdc_enable(host_signal, sdc_mempool);
   17314:	490f      	ldr	r1, [pc, #60]	; (17354 <hci_driver_open+0x144>)
   17316:	4810      	ldr	r0, [pc, #64]	; (17358 <hci_driver_open+0x148>)
   17318:	f7ed fa6a 	bl	47f0 <sdc_enable>
   1731c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1731e:	f7ff ff41 	bl	171a4 <multithreading_lock_release>
	if (err < 0) {
   17322:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   17326:	e793      	b.n	17250 <hci_driver_open+0x40>
		return -EINVAL;
   17328:	f06f 0015 	mvn.w	r0, #21
   1732c:	e790      	b.n	17250 <hci_driver_open+0x40>
		return -ENODEV;
   1732e:	f06f 0012 	mvn.w	r0, #18
   17332:	e78d      	b.n	17250 <hci_driver_open+0x40>
   17334:	20004680 	.word	0x20004680
   17338:	0001735d 	.word	0x0001735d
   1733c:	200019f0 	.word	0x200019f0
   17340:	00021db0 	.word	0x00021db0
   17344:	02031b1b 	.word	0x02031b1b
   17348:	00021da1 	.word	0x00021da1
   1734c:	20002444 	.word	0x20002444
   17350:	00020f0c 	.word	0x00020f0c
   17354:	20002f3a 	.word	0x20002f3a
   17358:	0001743d 	.word	0x0001743d

0001735c <recv_thread>:
{
   1735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool received_data = false;
   1735e:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
   17360:	4f34      	ldr	r7, [pc, #208]	; (17434 <recv_thread+0xd8>)
		errcode = hci_internal_evt_get(p_hci_buffer);
   17362:	4c35      	ldr	r4, [pc, #212]	; (17438 <recv_thread+0xdc>)
	bool received_evt = false;
   17364:	462e      	mov	r6, r5
		if (!received_evt && !received_data) {
   17366:	b93e      	cbnz	r6, 17378 <recv_thread+0x1c>
   17368:	b935      	cbnz	r5, 17378 <recv_thread+0x1c>
   1736a:	f04f 32ff 	mov.w	r2, #4294967295
   1736e:	f04f 33ff 	mov.w	r3, #4294967295
   17372:	4638      	mov	r0, r7
   17374:	f001 fd04 	bl	18d80 <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   17378:	f04f 30ff 	mov.w	r0, #4294967295
   1737c:	f04f 31ff 	mov.w	r1, #4294967295
   17380:	f7ff ff08 	bl	17194 <multithreading_lock_acquire>
	if (!errcode) {
   17384:	b158      	cbz	r0, 1739e <recv_thread+0x42>
		return false;
   17386:	2600      	movs	r6, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   17388:	f04f 30ff 	mov.w	r0, #4294967295
   1738c:	f04f 31ff 	mov.w	r1, #4294967295
   17390:	f7ff ff00 	bl	17194 <multithreading_lock_acquire>
	if (!errcode) {
   17394:	b380      	cbz	r0, 173f8 <recv_thread+0x9c>
		return false;
   17396:	2500      	movs	r5, #0
	z_impl_k_yield();
   17398:	f002 f942 	bl	19620 <z_impl_k_yield>
}
   1739c:	e7e3      	b.n	17366 <recv_thread+0xa>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1739e:	4826      	ldr	r0, [pc, #152]	; (17438 <recv_thread+0xdc>)
   173a0:	f000 fb9e 	bl	17ae0 <hci_internal_evt_get>
   173a4:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   173a6:	f7ff fefd 	bl	171a4 <multithreading_lock_release>
	if (errcode) {
   173aa:	2d00      	cmp	r5, #0
   173ac:	d1eb      	bne.n	17386 <recv_thread+0x2a>
	switch (hdr->evt) {
   173ae:	7820      	ldrb	r0, [r4, #0]
   173b0:	283e      	cmp	r0, #62	; 0x3e
   173b2:	d007      	beq.n	173c4 <recv_thread+0x68>
   173b4:	28ff      	cmp	r0, #255	; 0xff
   173b6:	d01c      	beq.n	173f2 <recv_thread+0x96>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   173b8:	f04f 32ff 	mov.w	r2, #4294967295
   173bc:	f04f 33ff 	mov.w	r3, #4294967295
   173c0:	2100      	movs	r1, #0
   173c2:	e007      	b.n	173d4 <recv_thread+0x78>
		switch (me->subevent) {
   173c4:	78a3      	ldrb	r3, [r4, #2]
   173c6:	2b02      	cmp	r3, #2
   173c8:	d001      	beq.n	173ce <recv_thread+0x72>
   173ca:	2b0d      	cmp	r3, #13
		switch (subevent) {
   173cc:	d1f4      	bne.n	173b8 <recv_thread+0x5c>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   173ce:	2200      	movs	r2, #0
   173d0:	2300      	movs	r3, #0
   173d2:	2101      	movs	r1, #1
   173d4:	f7fb fcf0 	bl	12db8 <bt_buf_get_evt>
	if (!evt_buf) {
   173d8:	4605      	mov	r5, r0
   173da:	b140      	cbz	r0, 173ee <recv_thread+0x92>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   173dc:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   173de:	4621      	mov	r1, r4
   173e0:	3202      	adds	r2, #2
   173e2:	3008      	adds	r0, #8
   173e4:	f008 fb99 	bl	1fb1a <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   173e8:	4628      	mov	r0, r5
   173ea:	f7fc fb25 	bl	13a38 <bt_recv>
	return true;
   173ee:	2601      	movs	r6, #1
   173f0:	e7ca      	b.n	17388 <recv_thread+0x2c>
		switch (subevent) {
   173f2:	78a3      	ldrb	r3, [r4, #2]
   173f4:	2b80      	cmp	r3, #128	; 0x80
   173f6:	e7e9      	b.n	173cc <recv_thread+0x70>
		errcode = sdc_hci_data_get(p_hci_buffer);
   173f8:	480f      	ldr	r0, [pc, #60]	; (17438 <recv_thread+0xdc>)
   173fa:	f7f5 fc32 	bl	cc62 <sdc_hci_data_get>
   173fe:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   17400:	f7ff fed0 	bl	171a4 <multithreading_lock_release>
	if (errcode) {
   17404:	2d00      	cmp	r5, #0
   17406:	d1c6      	bne.n	17396 <recv_thread+0x3a>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   17408:	f04f 32ff 	mov.w	r2, #4294967295
   1740c:	f04f 33ff 	mov.w	r3, #4294967295
   17410:	2003      	movs	r0, #3
   17412:	f7fb fc9b 	bl	12d4c <bt_buf_get_rx>
	if (!data_buf) {
   17416:	4605      	mov	r5, r0
   17418:	b908      	cbnz	r0, 1741e <recv_thread+0xc2>
	return true;
   1741a:	2501      	movs	r5, #1
   1741c:	e7bc      	b.n	17398 <recv_thread+0x3c>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1741e:	8862      	ldrh	r2, [r4, #2]
   17420:	4621      	mov	r1, r4
   17422:	3204      	adds	r2, #4
   17424:	3008      	adds	r0, #8
   17426:	f008 fb78 	bl	1fb1a <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1742a:	4628      	mov	r0, r5
   1742c:	f7fc fb04 	bl	13a38 <bt_recv>
   17430:	e7f3      	b.n	1741a <recv_thread+0xbe>
   17432:	bf00      	nop
   17434:	20000850 	.word	0x20000850
   17438:	20002ef4 	.word	0x20002ef4

0001743c <host_signal>:
	z_impl_k_sem_give(sem);
   1743c:	4801      	ldr	r0, [pc, #4]	; (17444 <host_signal+0x8>)
   1743e:	f001 bc79 	b.w	18d34 <z_impl_k_sem_give>
   17442:	bf00      	nop
   17444:	20000850 	.word	0x20000850

00017448 <hci_driver_send>:
{
   17448:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   1744a:	8983      	ldrh	r3, [r0, #12]
{
   1744c:	4605      	mov	r5, r0
	if (!buf->len) {
   1744e:	b383      	cbz	r3, 174b2 <hci_driver_send+0x6a>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   17450:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   17452:	b1ab      	cbz	r3, 17480 <hci_driver_send+0x38>
   17454:	2b02      	cmp	r3, #2
   17456:	d12c      	bne.n	174b2 <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   17458:	f04f 30ff 	mov.w	r0, #4294967295
   1745c:	f04f 31ff 	mov.w	r1, #4294967295
   17460:	f7ff fe98 	bl	17194 <multithreading_lock_acquire>
	if (!errcode) {
   17464:	4604      	mov	r4, r0
   17466:	b948      	cbnz	r0, 1747c <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   17468:	68a8      	ldr	r0, [r5, #8]
   1746a:	f7f5 fc07 	bl	cc7c <sdc_hci_data_put>
   1746e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   17470:	f7ff fe98 	bl	171a4 <multithreading_lock_release>
		if (errcode) {
   17474:	b1c4      	cbz	r4, 174a8 <hci_driver_send+0x60>
   17476:	4810      	ldr	r0, [pc, #64]	; (174b8 <hci_driver_send+0x70>)
   17478:	f001 fc5c 	bl	18d34 <z_impl_k_sem_give>
}
   1747c:	4620      	mov	r0, r4
   1747e:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   17480:	f04f 30ff 	mov.w	r0, #4294967295
   17484:	f04f 31ff 	mov.w	r1, #4294967295
   17488:	f7ff fe84 	bl	17194 <multithreading_lock_acquire>
	if (!errcode) {
   1748c:	4604      	mov	r4, r0
   1748e:	2800      	cmp	r0, #0
   17490:	d1f4      	bne.n	1747c <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   17492:	68a8      	ldr	r0, [r5, #8]
   17494:	f000 f812 	bl	174bc <hci_internal_cmd_put>
   17498:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1749a:	f7ff fe83 	bl	171a4 <multithreading_lock_release>
	if (errcode) {
   1749e:	2c00      	cmp	r4, #0
   174a0:	d1ec      	bne.n	1747c <hci_driver_send+0x34>
   174a2:	4805      	ldr	r0, [pc, #20]	; (174b8 <hci_driver_send+0x70>)
   174a4:	f001 fc46 	bl	18d34 <z_impl_k_sem_give>
		net_buf_unref(buf);
   174a8:	4628      	mov	r0, r5
   174aa:	f7fe ffa9 	bl	16400 <net_buf_unref>
   174ae:	2400      	movs	r4, #0
   174b0:	e7e4      	b.n	1747c <hci_driver_send+0x34>
	switch (type) {
   174b2:	f06f 0415 	mvn.w	r4, #21
   174b6:	e7e1      	b.n	1747c <hci_driver_send+0x34>
   174b8:	20000850 	.word	0x20000850

000174bc <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   174bc:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   174be:	4c8e      	ldr	r4, [pc, #568]	; (176f8 <hci_internal_cmd_put+0x23c>)
   174c0:	7823      	ldrb	r3, [r4, #0]
   174c2:	2b00      	cmp	r3, #0
   174c4:	f040 82f7 	bne.w	17ab6 <hci_internal_cmd_put+0x5fa>
	return ((uint16_t)src[1] << 8) | src[0];
   174c8:	7843      	ldrb	r3, [r0, #1]
   174ca:	7805      	ldrb	r5, [r0, #0]
   174cc:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   174d0:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   174d4:	b22e      	sxth	r6, r5
   174d6:	ea4f 2395 	mov.w	r3, r5, lsr #10
   174da:	d20d      	bcs.n	174f8 <hci_internal_cmd_put+0x3c>
   174dc:	b17b      	cbz	r3, 174fe <hci_internal_cmd_put+0x42>
   174de:	3b01      	subs	r3, #1
   174e0:	2b07      	cmp	r3, #7
   174e2:	d80c      	bhi.n	174fe <hci_internal_cmd_put+0x42>
   174e4:	e8df f013 	tbh	[pc, r3, lsl #1]
   174e8:	000b000e 	.word	0x000b000e
   174ec:	0060002c 	.word	0x0060002c
   174f0:	000b000b 	.word	0x000b000b
   174f4:	010c000b 	.word	0x010c000b
   174f8:	2b3f      	cmp	r3, #63	; 0x3f
   174fa:	f000 8233 	beq.w	17964 <hci_internal_cmd_put+0x4a8>
   174fe:	2304      	movs	r3, #4
   17500:	2001      	movs	r0, #1
   17502:	e26b      	b.n	179dc <hci_internal_cmd_put+0x520>
	switch (opcode)	{
   17504:	f240 4306 	movw	r3, #1030	; 0x406
   17508:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1750a:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1750e:	d005      	beq.n	1751c <hci_internal_cmd_put+0x60>
   17510:	f240 431d 	movw	r3, #1053	; 0x41d
   17514:	429e      	cmp	r6, r3
   17516:	d010      	beq.n	1753a <hci_internal_cmd_put+0x7e>
	switch (opcode)	{
   17518:	2001      	movs	r0, #1
   1751a:	e001      	b.n	17520 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1751c:	f7f5 fcd0 	bl	cec0 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   17520:	230f      	movs	r3, #15
   17522:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   17524:	2304      	movs	r3, #4
   17526:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   17528:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1752a:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1752c:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1752e:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   17532:	2301      	movs	r3, #1
   17534:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   17536:	2000      	movs	r0, #0
}
   17538:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1753a:	f7f5 fcc3 	bl	cec4 <sdc_hci_cmd_lc_read_remote_version_information>
   1753e:	e7ef      	b.n	17520 <hci_internal_cmd_put+0x64>
	switch (opcode)	{
   17540:	f640 4363 	movw	r3, #3171	; 0xc63
   17544:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   17546:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1754a:	d025      	beq.n	17598 <hci_internal_cmd_put+0xdc>
   1754c:	dc0f      	bgt.n	1756e <hci_internal_cmd_put+0xb2>
   1754e:	f640 4303 	movw	r3, #3075	; 0xc03
   17552:	429e      	cmp	r6, r3
   17554:	d018      	beq.n	17588 <hci_internal_cmd_put+0xcc>
   17556:	f640 432d 	movw	r3, #3117	; 0xc2d
   1755a:	429e      	cmp	r6, r3
   1755c:	d017      	beq.n	1758e <hci_internal_cmd_put+0xd2>
   1755e:	f640 4301 	movw	r3, #3073	; 0xc01
   17562:	429e      	cmp	r6, r3
   17564:	d1d8      	bne.n	17518 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   17566:	f7f5 fba5 	bl	ccb4 <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1756a:	2304      	movs	r3, #4
   1756c:	e0b8      	b.n	176e0 <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   1756e:	f640 437b 	movw	r3, #3195	; 0xc7b
   17572:	429e      	cmp	r6, r3
   17574:	d013      	beq.n	1759e <hci_internal_cmd_put+0xe2>
   17576:	f640 437c 	movw	r3, #3196	; 0xc7c
   1757a:	429e      	cmp	r6, r3
   1757c:	d1cc      	bne.n	17518 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1757e:	495f      	ldr	r1, [pc, #380]	; (176fc <hci_internal_cmd_put+0x240>)
   17580:	f7f5 fba2 	bl	ccc8 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   17584:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   17586:	e0ab      	b.n	176e0 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_reset();
   17588:	f7ed fb70 	bl	4c6c <sdc_hci_cmd_cb_reset>
   1758c:	e7ed      	b.n	1756a <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1758e:	495b      	ldr	r1, [pc, #364]	; (176fc <hci_internal_cmd_put+0x240>)
   17590:	f7f5 fb8e 	bl	ccb0 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   17594:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   17596:	e0a3      	b.n	176e0 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   17598:	f7f5 fb91 	bl	ccbe <sdc_hci_cmd_cb_set_event_mask_page_2>
   1759c:	e7e5      	b.n	1756a <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1759e:	4957      	ldr	r1, [pc, #348]	; (176fc <hci_internal_cmd_put+0x240>)
   175a0:	f7f5 fb84 	bl	ccac <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   175a4:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   175a6:	e09b      	b.n	176e0 <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   175a8:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   175ac:	3e01      	subs	r6, #1
   175ae:	2e08      	cmp	r6, #8
   175b0:	d8b2      	bhi.n	17518 <hci_internal_cmd_put+0x5c>
   175b2:	a301      	add	r3, pc, #4	; (adr r3, 175b8 <hci_internal_cmd_put+0xfc>)
   175b4:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   175b8:	000175dd 	.word	0x000175dd
   175bc:	000175e7 	.word	0x000175e7
   175c0:	000176c1 	.word	0x000176c1
   175c4:	00017519 	.word	0x00017519
   175c8:	00017519 	.word	0x00017519
   175cc:	00017519 	.word	0x00017519
   175d0:	00017519 	.word	0x00017519
   175d4:	00017519 	.word	0x00017519
   175d8:	000176d9 	.word	0x000176d9
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   175dc:	4847      	ldr	r0, [pc, #284]	; (176fc <hci_internal_cmd_put+0x240>)
   175de:	f7f5 fc24 	bl	ce2a <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   175e2:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   175e4:	e07c      	b.n	176e0 <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   175e6:	4845      	ldr	r0, [pc, #276]	; (176fc <hci_internal_cmd_put+0x240>)
   175e8:	222e      	movs	r2, #46	; 0x2e
   175ea:	2100      	movs	r1, #0
   175ec:	f006 fb3c 	bl	1dc68 <memset>
	cmds->hci_disconnect = 1;
   175f0:	79e3      	ldrb	r3, [r4, #7]
   175f2:	f043 0320 	orr.w	r3, r3, #32
   175f6:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   175f8:	7a63      	ldrb	r3, [r4, #9]
   175fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   175fe:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   17600:	7b23      	ldrb	r3, [r4, #12]
   17602:	f063 033f 	orn	r3, r3, #63	; 0x3f
   17606:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   17608:	7c63      	ldrb	r3, [r4, #17]
   1760a:	f043 0304 	orr.w	r3, r3, #4
   1760e:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   17610:	7d63      	ldrb	r3, [r4, #21]
   17612:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   17616:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1761a:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1761c:	7da3      	ldrb	r3, [r4, #22]
   1761e:	f043 0302 	orr.w	r3, r3, #2
   17622:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   17624:	7f63      	ldrb	r3, [r4, #29]
   17626:	f043 0304 	orr.w	r3, r3, #4
   1762a:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1762c:	f894 3020 	ldrb.w	r3, [r4, #32]
   17630:	f063 0308 	orn	r3, r3, #8
   17634:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   17638:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1763c:	f063 033c 	orn	r3, r3, #60	; 0x3c
   17640:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   17644:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   17648:	f063 030c 	orn	r3, r3, #12
   1764c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   17650:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   17654:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   17658:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   1765c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   17660:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   17664:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   17668:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1766c:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   17670:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   17674:	f063 033f 	orn	r3, r3, #63	; 0x3f
   17678:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1767c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   17680:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   17684:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   17688:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   1768c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   17690:	f063 0301 	orn	r3, r3, #1
   17694:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   17698:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1769c:	f043 0301 	orr.w	r3, r3, #1
   176a0:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   176a4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   176a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   176ac:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   176b0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   176b4:	f043 0304 	orr.w	r3, r3, #4
   176b8:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	switch (hci_opcode) {
   176bc:	2344      	movs	r3, #68	; 0x44
   176be:	e0de      	b.n	1787e <hci_internal_cmd_put+0x3c2>
	memset(features, 0, sizeof(*features));
   176c0:	480e      	ldr	r0, [pc, #56]	; (176fc <hci_internal_cmd_put+0x240>)
   176c2:	2208      	movs	r2, #8
   176c4:	2100      	movs	r1, #0
   176c6:	f006 facf 	bl	1dc68 <memset>
	features->bdedr_not_supported = 1;
   176ca:	7ae3      	ldrb	r3, [r4, #11]
   176cc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   176d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	*(buf + 4) = states2;
   176d4:	72e3      	strb	r3, [r4, #11]
   176d6:	e0d1      	b.n	1787c <hci_internal_cmd_put+0x3c0>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   176d8:	4808      	ldr	r0, [pc, #32]	; (176fc <hci_internal_cmd_put+0x240>)
   176da:	f7f5 fba4 	bl	ce26 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   176de:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   176e0:	2801      	cmp	r0, #1
   176e2:	f43f af1d 	beq.w	17520 <hci_internal_cmd_put+0x64>
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   176e6:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   176e8:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   176ea:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   176ec:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   176ee:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   176f0:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   176f2:	71a0      	strb	r0, [r4, #6]
}
   176f4:	e71d      	b.n	17532 <hci_internal_cmd_put+0x76>
   176f6:	bf00      	nop
   176f8:	20003620 	.word	0x20003620
   176fc:	20003627 	.word	0x20003627
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   17700:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   17704:	3e01      	subs	r6, #1
   17706:	3003      	adds	r0, #3
	switch (opcode)	{
   17708:	2e4d      	cmp	r6, #77	; 0x4d
   1770a:	f63f af05 	bhi.w	17518 <hci_internal_cmd_put+0x5c>
   1770e:	a301      	add	r3, pc, #4	; (adr r3, 17714 <hci_internal_cmd_put+0x258>)
   17710:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   17714:	0001784d 	.word	0x0001784d
   17718:	00017853 	.word	0x00017853
   1771c:	0001785b 	.word	0x0001785b
   17720:	00017519 	.word	0x00017519
   17724:	00017883 	.word	0x00017883
   17728:	00017889 	.word	0x00017889
   1772c:	0001788f 	.word	0x0001788f
   17730:	00017899 	.word	0x00017899
   17734:	0001789f 	.word	0x0001789f
   17738:	000178a5 	.word	0x000178a5
   1773c:	00017519 	.word	0x00017519
   17740:	00017519 	.word	0x00017519
   17744:	00017519 	.word	0x00017519
   17748:	00017519 	.word	0x00017519
   1774c:	000178ab 	.word	0x000178ab
   17750:	000178b3 	.word	0x000178b3
   17754:	000178b9 	.word	0x000178b9
   17758:	000178bf 	.word	0x000178bf
   1775c:	00017519 	.word	0x00017519
   17760:	00017519 	.word	0x00017519
   17764:	000178c5 	.word	0x000178c5
   17768:	000178cf 	.word	0x000178cf
   1776c:	000178d5 	.word	0x000178d5
   17770:	000178df 	.word	0x000178df
   17774:	00017519 	.word	0x00017519
   17778:	000178e7 	.word	0x000178e7
   1777c:	000178ef 	.word	0x000178ef
   17780:	000178f7 	.word	0x000178f7
   17784:	00017519 	.word	0x00017519
   17788:	00017519 	.word	0x00017519
   1778c:	00017519 	.word	0x00017519
   17790:	00017519 	.word	0x00017519
   17794:	00017519 	.word	0x00017519
   17798:	000178ff 	.word	0x000178ff
   1779c:	00017907 	.word	0x00017907
   177a0:	0001790f 	.word	0x0001790f
   177a4:	00017519 	.word	0x00017519
   177a8:	00017519 	.word	0x00017519
   177ac:	00017915 	.word	0x00017915
   177b0:	0001791b 	.word	0x0001791b
   177b4:	00017921 	.word	0x00017921
   177b8:	00017927 	.word	0x00017927
   177bc:	00017519 	.word	0x00017519
   177c0:	00017519 	.word	0x00017519
   177c4:	0001792f 	.word	0x0001792f
   177c8:	00017935 	.word	0x00017935
   177cc:	0001793b 	.word	0x0001793b
   177d0:	00017943 	.word	0x00017943
   177d4:	0001794b 	.word	0x0001794b
   177d8:	00017951 	.word	0x00017951
   177dc:	00017519 	.word	0x00017519
   177e0:	00017519 	.word	0x00017519
   177e4:	00017519 	.word	0x00017519
   177e8:	00017519 	.word	0x00017519
   177ec:	00017519 	.word	0x00017519
   177f0:	00017519 	.word	0x00017519
   177f4:	00017519 	.word	0x00017519
   177f8:	00017519 	.word	0x00017519
   177fc:	00017519 	.word	0x00017519
   17800:	00017519 	.word	0x00017519
   17804:	00017519 	.word	0x00017519
   17808:	00017519 	.word	0x00017519
   1780c:	00017519 	.word	0x00017519
   17810:	00017519 	.word	0x00017519
   17814:	00017519 	.word	0x00017519
   17818:	00017519 	.word	0x00017519
   1781c:	00017519 	.word	0x00017519
   17820:	00017519 	.word	0x00017519
   17824:	00017519 	.word	0x00017519
   17828:	00017519 	.word	0x00017519
   1782c:	00017519 	.word	0x00017519
   17830:	00017519 	.word	0x00017519
   17834:	00017519 	.word	0x00017519
   17838:	00017519 	.word	0x00017519
   1783c:	00017957 	.word	0x00017957
   17840:	00017519 	.word	0x00017519
   17844:	00017519 	.word	0x00017519
   17848:	0001795f 	.word	0x0001795f
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1784c:	f7f5 fb27 	bl	ce9e <sdc_hci_cmd_le_set_event_mask>
   17850:	e68b      	b.n	1756a <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   17852:	48a2      	ldr	r0, [pc, #648]	; (17adc <hci_internal_cmd_put+0x620>)
   17854:	f7f5 fb01 	bl	ce5a <sdc_hci_cmd_le_read_buffer_size>
   17858:	e69c      	b.n	17594 <hci_internal_cmd_put+0xd8>
	memset(features, 0, sizeof(*features));
   1785a:	48a0      	ldr	r0, [pc, #640]	; (17adc <hci_internal_cmd_put+0x620>)
   1785c:	2205      	movs	r2, #5
   1785e:	2100      	movs	r1, #0
   17860:	f006 fa02 	bl	1dc68 <memset>
	features->le_encryption = 1;
   17864:	79e3      	ldrb	r3, [r4, #7]
   17866:	f023 0375 	bic.w	r3, r3, #117	; 0x75
   1786a:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   1786e:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   17870:	7a23      	ldrb	r3, [r4, #8]
   17872:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   17876:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1787a:	7223      	strb	r3, [r4, #8]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1787c:	230c      	movs	r3, #12
	switch (hci_opcode) {
   1787e:	2000      	movs	r0, #0
   17880:	e731      	b.n	176e6 <hci_internal_cmd_put+0x22a>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   17882:	f7f5 fb15 	bl	ceb0 <sdc_hci_cmd_le_set_random_address>
   17886:	e670      	b.n	1756a <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   17888:	f7f5 fb03 	bl	ce92 <sdc_hci_cmd_le_set_adv_params>
   1788c:	e66d      	b.n	1756a <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1788e:	4893      	ldr	r0, [pc, #588]	; (17adc <hci_internal_cmd_put+0x620>)
   17890:	f7f5 fae1 	bl	ce56 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   17894:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   17896:	e723      	b.n	176e0 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   17898:	f7f5 faf7 	bl	ce8a <sdc_hci_cmd_le_set_adv_data>
   1789c:	e665      	b.n	1756a <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1789e:	f7f5 fb0b 	bl	ceb8 <sdc_hci_cmd_le_set_scan_response_data>
   178a2:	e662      	b.n	1756a <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   178a4:	f7f5 faf3 	bl	ce8e <sdc_hci_cmd_le_set_adv_enable>
   178a8:	e65f      	b.n	1756a <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   178aa:	488c      	ldr	r0, [pc, #560]	; (17adc <hci_internal_cmd_put+0x620>)
   178ac:	f7f5 fae5 	bl	ce7a <sdc_hci_cmd_le_read_white_list_size>
   178b0:	e7f0      	b.n	17894 <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_le_clear_white_list();
   178b2:	f7f5 fac2 	bl	ce3a <sdc_hci_cmd_le_clear_white_list>
   178b6:	e658      	b.n	1756a <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   178b8:	f7f5 fabb 	bl	ce32 <sdc_hci_cmd_le_add_device_to_white_list>
   178bc:	e655      	b.n	1756a <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   178be:	f7f5 fae0 	bl	ce82 <sdc_hci_cmd_le_remove_device_from_white_list>
   178c2:	e652      	b.n	1756a <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   178c4:	4985      	ldr	r1, [pc, #532]	; (17adc <hci_internal_cmd_put+0x620>)
   178c6:	f7f5 faca 	bl	ce5e <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   178ca:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   178cc:	e708      	b.n	176e0 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   178ce:	f7f5 facc 	bl	ce6a <sdc_hci_cmd_le_read_remote_features>
   178d2:	e625      	b.n	17520 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   178d4:	4981      	ldr	r1, [pc, #516]	; (17adc <hci_internal_cmd_put+0x620>)
   178d6:	f7f5 fab2 	bl	ce3e <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   178da:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   178dc:	e700      	b.n	176e0 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   178de:	487f      	ldr	r0, [pc, #508]	; (17adc <hci_internal_cmd_put+0x620>)
   178e0:	f7f5 fab7 	bl	ce52 <sdc_hci_cmd_le_rand>
   178e4:	e67d      	b.n	175e2 <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   178e6:	497d      	ldr	r1, [pc, #500]	; (17adc <hci_internal_cmd_put+0x620>)
   178e8:	f7f5 faaf 	bl	ce4a <sdc_hci_cmd_le_long_term_key_request_reply>
   178ec:	e64a      	b.n	17584 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   178ee:	497b      	ldr	r1, [pc, #492]	; (17adc <hci_internal_cmd_put+0x620>)
   178f0:	f7f5 faa7 	bl	ce42 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   178f4:	e646      	b.n	17584 <hci_internal_cmd_put+0xc8>
	*buf = states1;
   178f6:	238f      	movs	r3, #143	; 0x8f
   178f8:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   178fa:	23c0      	movs	r3, #192	; 0xc0
   178fc:	e6ea      	b.n	176d4 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   178fe:	4977      	ldr	r1, [pc, #476]	; (17adc <hci_internal_cmd_put+0x620>)
   17900:	f7f5 fac9 	bl	ce96 <sdc_hci_cmd_le_set_data_length>
   17904:	e63e      	b.n	17584 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   17906:	4875      	ldr	r0, [pc, #468]	; (17adc <hci_internal_cmd_put+0x620>)
   17908:	f7f5 fab3 	bl	ce72 <sdc_hci_cmd_le_read_suggested_default_data_length>
   1790c:	e64a      	b.n	175a4 <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1790e:	f7f5 fad5 	bl	cebc <sdc_hci_cmd_le_write_suggested_default_data_length>
   17912:	e62a      	b.n	1756a <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   17914:	f7f5 fa8b 	bl	ce2e <sdc_hci_cmd_le_add_device_to_resolving_list>
   17918:	e627      	b.n	1756a <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   1791a:	f7f5 fab0 	bl	ce7e <sdc_hci_cmd_le_remove_device_from_resolving_list>
   1791e:	e624      	b.n	1756a <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_clear_resolving_list();
   17920:	f7f5 fa89 	bl	ce36 <sdc_hci_cmd_le_clear_resolving_list>
   17924:	e621      	b.n	1756a <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   17926:	486d      	ldr	r0, [pc, #436]	; (17adc <hci_internal_cmd_put+0x620>)
   17928:	f7f5 faa1 	bl	ce6e <sdc_hci_cmd_le_read_resolving_list_size>
   1792c:	e7b2      	b.n	17894 <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   1792e:	f7f5 faaa 	bl	ce86 <sdc_hci_cmd_le_set_address_resolution_enable>
   17932:	e61a      	b.n	1756a <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   17934:	f7f5 fabe 	bl	ceb4 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   17938:	e617      	b.n	1756a <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1793a:	4868      	ldr	r0, [pc, #416]	; (17adc <hci_internal_cmd_put+0x620>)
   1793c:	f7f5 fa91 	bl	ce62 <sdc_hci_cmd_le_read_max_data_length>
   17940:	e64f      	b.n	175e2 <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   17942:	4966      	ldr	r1, [pc, #408]	; (17adc <hci_internal_cmd_put+0x620>)
   17944:	f7f5 fa8f 	bl	ce66 <sdc_hci_cmd_le_read_phy>
   17948:	e62c      	b.n	175a4 <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1794a:	f7f5 faa6 	bl	ce9a <sdc_hci_cmd_le_set_default_phy>
   1794e:	e60c      	b.n	1756a <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   17950:	f7f5 faaa 	bl	cea8 <sdc_hci_cmd_le_set_phy>
   17954:	e5e4      	b.n	17520 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   17956:	4861      	ldr	r0, [pc, #388]	; (17adc <hci_internal_cmd_put+0x620>)
   17958:	f7f5 fa8d 	bl	ce76 <sdc_hci_cmd_le_read_transmit_power>
   1795c:	e612      	b.n	17584 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   1795e:	f7f5 faa5 	bl	ceac <sdc_hci_cmd_le_set_privacy_mode>
   17962:	e602      	b.n	1756a <hci_internal_cmd_put+0xae>
	switch (opcode)	{
   17964:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   17968:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1796a:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1796e:	d821      	bhi.n	179b4 <hci_internal_cmd_put+0x4f8>
   17970:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   17974:	f43f add0 	beq.w	17518 <hci_internal_cmd_put+0x5c>
   17978:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   1797c:	3b01      	subs	r3, #1
   1797e:	2b09      	cmp	r3, #9
   17980:	f63f adca 	bhi.w	17518 <hci_internal_cmd_put+0x5c>
   17984:	a201      	add	r2, pc, #4	; (adr r2, 1798c <hci_internal_cmd_put+0x4d0>)
   17986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1798a:	bf00      	nop
   1798c:	000179d5 	.word	0x000179d5
   17990:	00017a03 	.word	0x00017a03
   17994:	00017519 	.word	0x00017519
   17998:	00017519 	.word	0x00017519
   1799c:	00017519 	.word	0x00017519
   179a0:	00017a4f 	.word	0x00017a4f
   179a4:	00017519 	.word	0x00017519
   179a8:	00017519 	.word	0x00017519
   179ac:	00017a3b 	.word	0x00017a3b
   179b0:	00017a45 	.word	0x00017a45
   179b4:	f505 7340 	add.w	r3, r5, #768	; 0x300
   179b8:	b29b      	uxth	r3, r3
   179ba:	2b05      	cmp	r3, #5
   179bc:	f63f adac 	bhi.w	17518 <hci_internal_cmd_put+0x5c>
   179c0:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   179c4:	2b05      	cmp	r3, #5
   179c6:	f63f ada7 	bhi.w	17518 <hci_internal_cmd_put+0x5c>
   179ca:	e8df f003 	tbb	[pc, r3]
   179ce:	5044      	.short	0x5044
   179d0:	5c595653 	.word	0x5c595653
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   179d4:	4841      	ldr	r0, [pc, #260]	; (17adc <hci_internal_cmd_put+0x620>)
   179d6:	f7ed f95d 	bl	4c94 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   179da:	2310      	movs	r3, #16
	switch (hci_opcode) {
   179dc:	f242 0219 	movw	r2, #8217	; 0x2019
   179e0:	4296      	cmp	r6, r2
   179e2:	dc60      	bgt.n	17aa6 <hci_internal_cmd_put+0x5ea>
   179e4:	f242 020c 	movw	r2, #8204	; 0x200c
   179e8:	4296      	cmp	r6, r2
   179ea:	dc4f      	bgt.n	17a8c <hci_internal_cmd_put+0x5d0>
   179ec:	f240 4206 	movw	r2, #1030	; 0x406
   179f0:	4296      	cmp	r6, r2
   179f2:	f43f ad95 	beq.w	17520 <hci_internal_cmd_put+0x64>
   179f6:	f240 421d 	movw	r2, #1053	; 0x41d
   179fa:	4296      	cmp	r6, r2
   179fc:	f43f ad90 	beq.w	17520 <hci_internal_cmd_put+0x64>
   17a00:	e66e      	b.n	176e0 <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   17a02:	4836      	ldr	r0, [pc, #216]	; (17adc <hci_internal_cmd_put+0x620>)
   17a04:	2202      	movs	r2, #2
   17a06:	2100      	movs	r1, #0
   17a08:	f006 f92e 	bl	1dc68 <memset>
	cmds->read_version_info = 1;
   17a0c:	79e3      	ldrb	r3, [r4, #7]
   17a0e:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   17a12:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   17a16:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   17a18:	7a23      	ldrb	r3, [r4, #8]
   17a1a:	f023 0307 	bic.w	r3, r3, #7
   17a1e:	f043 0307 	orr.w	r3, r3, #7
   17a22:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   17a24:	f242 0319 	movw	r3, #8217	; 0x2019
   17a28:	429e      	cmp	r6, r3
   17a2a:	dd47      	ble.n	17abc <hci_internal_cmd_put+0x600>
   17a2c:	f242 0332 	movw	r3, #8242	; 0x2032
   17a30:	429e      	cmp	r6, r3
   17a32:	d051      	beq.n	17ad8 <hci_internal_cmd_put+0x61c>
   17a34:	f242 0343 	movw	r3, #8259	; 0x2043
   17a38:	e04b      	b.n	17ad2 <hci_internal_cmd_put+0x616>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   17a3a:	4828      	ldr	r0, [pc, #160]	; (17adc <hci_internal_cmd_put+0x620>)
   17a3c:	f7f5 f9a6 	bl	cd8c <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   17a40:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   17a42:	e7cb      	b.n	179dc <hci_internal_cmd_put+0x520>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   17a44:	4825      	ldr	r0, [pc, #148]	; (17adc <hci_internal_cmd_put+0x620>)
   17a46:	f7f5 f954 	bl	ccf2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   17a4a:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   17a4c:	e7c6      	b.n	179dc <hci_internal_cmd_put+0x520>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   17a4e:	f7f5 f9e8 	bl	ce22 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   17a52:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   17a54:	e7c2      	b.n	179dc <hci_internal_cmd_put+0x520>
	memset(cmds, 0, sizeof(*cmds));
   17a56:	4821      	ldr	r0, [pc, #132]	; (17adc <hci_internal_cmd_put+0x620>)
   17a58:	2201      	movs	r2, #1
   17a5a:	2100      	movs	r1, #0
   17a5c:	f006 f904 	bl	1dc68 <memset>
	cmds->read_supported_vs_commands = 1;
   17a60:	79e3      	ldrb	r3, [r4, #7]
   17a62:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   17a66:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   17a6a:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   17a6c:	e626      	b.n	176bc <hci_internal_cmd_put+0x200>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   17a6e:	f7f5 f939 	bl	cce4 <sdc_hci_cmd_vs_llpm_mode_set>
   17a72:	e57a      	b.n	1756a <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   17a74:	f7f5 f932 	bl	ccdc <sdc_hci_cmd_vs_conn_update>
   17a78:	e577      	b.n	1756a <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   17a7a:	f7f5 f927 	bl	cccc <sdc_hci_cmd_vs_conn_event_extend>
   17a7e:	e574      	b.n	1756a <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   17a80:	f7f5 f932 	bl	cce8 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   17a84:	e571      	b.n	1756a <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   17a86:	f7f5 f92b 	bl	cce0 <sdc_hci_cmd_vs_event_length_set>
   17a8a:	e56e      	b.n	1756a <hci_internal_cmd_put+0xae>
   17a8c:	f5a5 5200 	sub.w	r2, r5, #8192	; 0x2000
   17a90:	3a0d      	subs	r2, #13
   17a92:	2101      	movs	r1, #1
   17a94:	b292      	uxth	r2, r2
   17a96:	fa01 f202 	lsl.w	r2, r1, r2
   17a9a:	f241 2141 	movw	r1, #4673	; 0x1241
   17a9e:	420a      	tst	r2, r1
   17aa0:	f43f ae1e 	beq.w	176e0 <hci_internal_cmd_put+0x224>
   17aa4:	e53c      	b.n	17520 <hci_internal_cmd_put+0x64>
	switch (hci_opcode) {
   17aa6:	f242 0232 	movw	r2, #8242	; 0x2032
   17aaa:	4296      	cmp	r6, r2
   17aac:	f43f ad38 	beq.w	17520 <hci_internal_cmd_put+0x64>
   17ab0:	f242 0243 	movw	r2, #8259	; 0x2043
   17ab4:	e7a1      	b.n	179fa <hci_internal_cmd_put+0x53e>
		return -NRF_EPERM;
   17ab6:	f04f 30ff 	mov.w	r0, #4294967295
   17aba:	e53d      	b.n	17538 <hci_internal_cmd_put+0x7c>
	switch (hci_opcode) {
   17abc:	f242 030c 	movw	r3, #8204	; 0x200c
   17ac0:	429e      	cmp	r6, r3
   17ac2:	f73f adfb 	bgt.w	176bc <hci_internal_cmd_put+0x200>
   17ac6:	f240 4306 	movw	r3, #1030	; 0x406
   17aca:	429e      	cmp	r6, r3
   17acc:	d004      	beq.n	17ad8 <hci_internal_cmd_put+0x61c>
   17ace:	f240 431d 	movw	r3, #1053	; 0x41d
   17ad2:	429e      	cmp	r6, r3
   17ad4:	f47f adf2 	bne.w	176bc <hci_internal_cmd_put+0x200>
   17ad8:	2000      	movs	r0, #0
   17ada:	e521      	b.n	17520 <hci_internal_cmd_put+0x64>
   17adc:	20003627 	.word	0x20003627

00017ae0 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   17ae0:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   17ae2:	4c07      	ldr	r4, [pc, #28]	; (17b00 <hci_internal_evt_get+0x20>)
   17ae4:	7823      	ldrb	r3, [r4, #0]
   17ae6:	b13b      	cbz	r3, 17af8 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   17ae8:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   17aea:	1c61      	adds	r1, r4, #1
   17aec:	3202      	adds	r2, #2
   17aee:	f006 f8b0 	bl	1dc52 <memcpy>
		cmd_complete_or_status.occurred = false;
   17af2:	2000      	movs	r0, #0
   17af4:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   17af6:	bd10      	pop	{r4, pc}
   17af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   17afc:	f7f5 b8c9 	b.w	cc92 <sdc_hci_evt_get>
   17b00:	20003620 	.word	0x20003620

00017b04 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   17b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   17b08:	4c0b      	ldr	r4, [pc, #44]	; (17b38 <bt_rand+0x34>)
   17b0a:	6823      	ldr	r3, [r4, #0]
{
   17b0c:	4605      	mov	r5, r0
   17b0e:	460e      	mov	r6, r1
   17b10:	4627      	mov	r7, r4
	if (unlikely(!dev)) {
   17b12:	b13b      	cbz	r3, 17b24 <bt_rand+0x20>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   17b14:	6838      	ldr	r0, [r7, #0]
	return api->get_entropy(dev, buffer, length);
   17b16:	6883      	ldr	r3, [r0, #8]
   17b18:	b2b2      	uxth	r2, r6
   17b1a:	4629      	mov	r1, r5
   17b1c:	681b      	ldr	r3, [r3, #0]
}
   17b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   17b22:	4718      	bx	r3
   17b24:	4805      	ldr	r0, [pc, #20]	; (17b3c <bt_rand+0x38>)
   17b26:	f000 fdff 	bl	18728 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   17b2a:	6020      	str	r0, [r4, #0]
		if (!dev) {
   17b2c:	2800      	cmp	r0, #0
   17b2e:	d1f1      	bne.n	17b14 <bt_rand+0x10>
}
   17b30:	f06f 0012 	mvn.w	r0, #18
   17b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17b38:	20002448 	.word	0x20002448
   17b3c:	00021da1 	.word	0x00021da1

00017b40 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   17b40:	b513      	push	{r0, r1, r4, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   17b42:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   17b46:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   17b4a:	2300      	movs	r3, #0
   17b4c:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   17b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   17b54:	f8ad 3000 	strh.w	r3, [sp]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   17b58:	4a0d      	ldr	r2, [pc, #52]	; (17b90 <mpsl_lib_init+0x50>)
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   17b5a:	2302      	movs	r3, #2
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   17b5c:	2119      	movs	r1, #25
   17b5e:	4668      	mov	r0, sp
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   17b60:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   17b64:	f7ec fc4a 	bl	43fc <mpsl_init>
	if (err) {
   17b68:	4604      	mov	r4, r0
   17b6a:	b970      	cbnz	r0, 17b8a <mpsl_lib_init+0x4a>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   17b6c:	4601      	mov	r1, r0
   17b6e:	2201      	movs	r2, #1
   17b70:	2008      	movs	r0, #8
   17b72:	f7fa fd5f 	bl	12634 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   17b76:	2201      	movs	r2, #1
   17b78:	4621      	mov	r1, r4
   17b7a:	200b      	movs	r0, #11
   17b7c:	f7fa fd5a 	bl	12634 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   17b80:	2201      	movs	r2, #1
   17b82:	4621      	mov	r1, r4
   17b84:	4610      	mov	r0, r2
   17b86:	f7fa fd55 	bl	12634 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   17b8a:	4620      	mov	r0, r4
   17b8c:	b002      	add	sp, #8
   17b8e:	bd10      	pop	{r4, pc}
   17b90:	0001fe31 	.word	0x0001fe31

00017b94 <mpsl_low_prio_irq_handler>:
   17b94:	4801      	ldr	r0, [pc, #4]	; (17b9c <mpsl_low_prio_irq_handler+0x8>)
   17b96:	f001 b8cd 	b.w	18d34 <z_impl_k_sem_give>
   17b9a:	bf00      	nop
   17b9c:	20000868 	.word	0x20000868

00017ba0 <signal_thread>:
{
   17ba0:	b510      	push	{r4, lr}
	return z_impl_k_sem_take(sem, timeout);
   17ba2:	4c09      	ldr	r4, [pc, #36]	; (17bc8 <signal_thread+0x28>)
   17ba4:	f04f 32ff 	mov.w	r2, #4294967295
   17ba8:	f04f 33ff 	mov.w	r3, #4294967295
   17bac:	4620      	mov	r0, r4
   17bae:	f001 f8e7 	bl	18d80 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   17bb2:	f04f 31ff 	mov.w	r1, #4294967295
   17bb6:	f04f 30ff 	mov.w	r0, #4294967295
   17bba:	f7ff faeb 	bl	17194 <multithreading_lock_acquire>
		mpsl_low_priority_process();
   17bbe:	f7f4 fc1b 	bl	c3f8 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   17bc2:	f7ff faef 	bl	171a4 <multithreading_lock_release>
	while (true) {
   17bc6:	e7ed      	b.n	17ba4 <signal_thread+0x4>
   17bc8:	20000868 	.word	0x20000868

00017bcc <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   17bcc:	b530      	push	{r4, r5, lr}
   17bce:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17bd0:	4d0f      	ldr	r5, [pc, #60]	; (17c10 <mpsl_signal_thread_init+0x44>)
   17bd2:	4910      	ldr	r1, [pc, #64]	; (17c14 <mpsl_signal_thread_init+0x48>)
   17bd4:	2200      	movs	r2, #0
   17bd6:	2300      	movs	r3, #0
   17bd8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   17bdc:	2400      	movs	r4, #0
   17bde:	f06f 0309 	mvn.w	r3, #9
   17be2:	e9cd 3403 	strd	r3, r4, [sp, #12]
   17be6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   17bea:	4b0b      	ldr	r3, [pc, #44]	; (17c18 <mpsl_signal_thread_init+0x4c>)
   17bec:	9400      	str	r4, [sp, #0]
   17bee:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17bf2:	4628      	mov	r0, r5
   17bf4:	f000 ff06 	bl	18a04 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   17bf8:	4908      	ldr	r1, [pc, #32]	; (17c1c <mpsl_signal_thread_init+0x50>)
   17bfa:	4628      	mov	r0, r5
   17bfc:	f008 fad8 	bl	201b0 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   17c00:	4622      	mov	r2, r4
   17c02:	2104      	movs	r1, #4
   17c04:	2019      	movs	r0, #25
   17c06:	f7fa fd15 	bl	12634 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   17c0a:	4620      	mov	r0, r4
   17c0c:	b009      	add	sp, #36	; 0x24
   17c0e:	bd30      	pop	{r4, r5, pc}
   17c10:	20001a70 	.word	0x20001a70
   17c14:	20004aa0 	.word	0x20004aa0
   17c18:	00017ba1 	.word	0x00017ba1
   17c1c:	00021dcd 	.word	0x00021dcd

00017c20 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   17c20:	4b01      	ldr	r3, [pc, #4]	; (17c28 <mpsl_hfclk_callback+0x8>)
   17c22:	2000      	movs	r0, #0
   17c24:	681b      	ldr	r3, [r3, #0]
   17c26:	4718      	bx	r3
   17c28:	2000244c 	.word	0x2000244c

00017c2c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   17c2c:	b120      	cbz	r0, 17c38 <nrfx_clock_start+0xc>
   17c2e:	2801      	cmp	r0, #1
   17c30:	d106      	bne.n	17c40 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   17c32:	4804      	ldr	r0, [pc, #16]	; (17c44 <nrfx_clock_start+0x18>)
   17c34:	f7ec ba42 	b.w	40bc <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   17c38:	4b03      	ldr	r3, [pc, #12]	; (17c48 <nrfx_clock_start+0x1c>)
   17c3a:	2001      	movs	r0, #1
   17c3c:	681b      	ldr	r3, [r3, #0]
   17c3e:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   17c40:	4770      	bx	lr
   17c42:	bf00      	nop
   17c44:	00017c21 	.word	0x00017c21
   17c48:	2000244c 	.word	0x2000244c

00017c4c <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   17c4c:	4b01      	ldr	r3, [pc, #4]	; (17c54 <nrfx_clock_init+0x8>)
   17c4e:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   17c50:	4801      	ldr	r0, [pc, #4]	; (17c58 <nrfx_clock_init+0xc>)
   17c52:	4770      	bx	lr
   17c54:	2000244c 	.word	0x2000244c
   17c58:	0bad0000 	.word	0x0bad0000

00017c5c <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   17c5c:	4b03      	ldr	r3, [pc, #12]	; (17c6c <nrf52_errata_136+0x10>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   17c5e:	6818      	ldr	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
   17c60:	f1a0 0308 	sub.w	r3, r0, #8
   17c64:	4258      	negs	r0, r3
   17c66:	4158      	adcs	r0, r3
   17c68:	4770      	bx	lr
   17c6a:	bf00      	nop
   17c6c:	10000130 	.word	0x10000130

00017c70 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   17c70:	4b06      	ldr	r3, [pc, #24]	; (17c8c <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   17c72:	681b      	ldr	r3, [r3, #0]
   17c74:	2b08      	cmp	r3, #8
   17c76:	d106      	bne.n	17c86 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   17c78:	4b05      	ldr	r3, [pc, #20]	; (17c90 <nrf52_errata_103+0x20>)
   17c7a:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   17c7c:	2b05      	cmp	r3, #5
   17c7e:	d802      	bhi.n	17c86 <nrf52_errata_103+0x16>
   17c80:	4a04      	ldr	r2, [pc, #16]	; (17c94 <nrf52_errata_103+0x24>)
   17c82:	5cd0      	ldrb	r0, [r2, r3]
   17c84:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   17c86:	2000      	movs	r0, #0
    #endif
}
   17c88:	4770      	bx	lr
   17c8a:	bf00      	nop
   17c8c:	10000130 	.word	0x10000130
   17c90:	10000134 	.word	0x10000134
   17c94:	00021ddf 	.word	0x00021ddf

00017c98 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   17c98:	4a02      	ldr	r2, [pc, #8]	; (17ca4 <nvmc_wait+0xc>)
   17c9a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   17c9e:	2b00      	cmp	r3, #0
   17ca0:	d0fb      	beq.n	17c9a <nvmc_wait+0x2>
}
   17ca2:	4770      	bx	lr
   17ca4:	4001e000 	.word	0x4001e000

00017ca8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   17ca8:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   17caa:	f7ff ffd7 	bl	17c5c <nrf52_errata_136>
   17cae:	b140      	cbz	r0, 17cc2 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   17cb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17cb4:	2200      	movs	r2, #0
   17cb6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   17cba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   17cbe:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   17cc2:	f7ff ffcb 	bl	17c5c <nrf52_errata_136>
   17cc6:	2800      	cmp	r0, #0
   17cc8:	d046      	beq.n	17d58 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   17cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   17cce:	4b5b      	ldr	r3, [pc, #364]	; (17e3c <SystemInit+0x194>)
   17cd0:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   17cd4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   17cd8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   17cdc:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   17ce0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   17ce4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   17ce8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   17cec:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   17cf0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   17cf4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   17cf8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   17cfc:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   17d00:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   17d04:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   17d08:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   17d0c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   17d10:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   17d14:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   17d18:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   17d1c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   17d20:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   17d24:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   17d28:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   17d2c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   17d30:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   17d34:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   17d38:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   17d3c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   17d40:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   17d44:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   17d48:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   17d4c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   17d50:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   17d54:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   17d58:	f7ff ff8a 	bl	17c70 <nrf52_errata_103>
   17d5c:	b110      	cbz	r0, 17d64 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   17d5e:	4b38      	ldr	r3, [pc, #224]	; (17e40 <SystemInit+0x198>)
   17d60:	4a38      	ldr	r2, [pc, #224]	; (17e44 <SystemInit+0x19c>)
   17d62:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   17d64:	f7ff ff84 	bl	17c70 <nrf52_errata_103>
   17d68:	b118      	cbz	r0, 17d72 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   17d6a:	4b37      	ldr	r3, [pc, #220]	; (17e48 <SystemInit+0x1a0>)
   17d6c:	22fb      	movs	r2, #251	; 0xfb
   17d6e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   17d72:	f7ff ff7d 	bl	17c70 <nrf52_errata_103>
   17d76:	b148      	cbz	r0, 17d8c <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   17d78:	4934      	ldr	r1, [pc, #208]	; (17e4c <SystemInit+0x1a4>)
   17d7a:	4b35      	ldr	r3, [pc, #212]	; (17e50 <SystemInit+0x1a8>)
   17d7c:	680a      	ldr	r2, [r1, #0]
   17d7e:	681b      	ldr	r3, [r3, #0]
   17d80:	f022 020f 	bic.w	r2, r2, #15
   17d84:	f003 030f 	and.w	r3, r3, #15
   17d88:	4313      	orrs	r3, r2
   17d8a:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   17d8c:	f7ff ff70 	bl	17c70 <nrf52_errata_103>
   17d90:	b118      	cbz	r0, 17d9a <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   17d92:	4b30      	ldr	r3, [pc, #192]	; (17e54 <SystemInit+0x1ac>)
   17d94:	f44f 7200 	mov.w	r2, #512	; 0x200
   17d98:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   17d9a:	f7ff ff5f 	bl	17c5c <nrf52_errata_136>
   17d9e:	b148      	cbz	r0, 17db4 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   17da0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17da4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   17da8:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   17daa:	bf44      	itt	mi
   17dac:	f06f 0201 	mvnmi.w	r2, #1
   17db0:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   17db4:	4b28      	ldr	r3, [pc, #160]	; (17e58 <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   17db6:	681b      	ldr	r3, [r3, #0]
   17db8:	2b08      	cmp	r3, #8
   17dba:	d10e      	bne.n	17dda <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   17dbc:	4b27      	ldr	r3, [pc, #156]	; (17e5c <SystemInit+0x1b4>)
   17dbe:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   17dc0:	2b05      	cmp	r3, #5
   17dc2:	d802      	bhi.n	17dca <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   17dc4:	4a26      	ldr	r2, [pc, #152]	; (17e60 <SystemInit+0x1b8>)
   17dc6:	5cd3      	ldrb	r3, [r2, r3]
   17dc8:	b13b      	cbz	r3, 17dda <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   17dca:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   17dce:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   17dd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17dd6:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   17dda:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   17dde:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   17de2:	2a00      	cmp	r2, #0
   17de4:	db03      	blt.n	17dee <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   17de6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   17dea:	2b00      	cmp	r3, #0
   17dec:	da22      	bge.n	17e34 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   17dee:	491d      	ldr	r1, [pc, #116]	; (17e64 <SystemInit+0x1bc>)
   17df0:	2301      	movs	r3, #1
   17df2:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   17df6:	f7ff ff4f 	bl	17c98 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   17dfa:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   17dfe:	2412      	movs	r4, #18
   17e00:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   17e04:	f7ff ff48 	bl	17c98 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   17e08:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   17e0c:	f7ff ff44 	bl	17c98 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   17e10:	2300      	movs	r3, #0
   17e12:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   17e16:	f7ff ff3f 	bl	17c98 <nvmc_wait>
   17e1a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   17e1e:	4912      	ldr	r1, [pc, #72]	; (17e68 <SystemInit+0x1c0>)
   17e20:	4b12      	ldr	r3, [pc, #72]	; (17e6c <SystemInit+0x1c4>)
   17e22:	68ca      	ldr	r2, [r1, #12]
   17e24:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   17e28:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   17e2a:	60cb      	str	r3, [r1, #12]
   17e2c:	f3bf 8f4f 	dsb	sy
    __NOP();
   17e30:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   17e32:	e7fd      	b.n	17e30 <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   17e34:	4b0e      	ldr	r3, [pc, #56]	; (17e70 <SystemInit+0x1c8>)
   17e36:	4a0f      	ldr	r2, [pc, #60]	; (17e74 <SystemInit+0x1cc>)
   17e38:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   17e3a:	bd10      	pop	{r4, pc}
   17e3c:	4000c000 	.word	0x4000c000
   17e40:	4000568c 	.word	0x4000568c
   17e44:	00038148 	.word	0x00038148
   17e48:	4000f000 	.word	0x4000f000
   17e4c:	40000ee4 	.word	0x40000ee4
   17e50:	10000258 	.word	0x10000258
   17e54:	40029640 	.word	0x40029640
   17e58:	10000130 	.word	0x10000130
   17e5c:	10000134 	.word	0x10000134
   17e60:	00021dd9 	.word	0x00021dd9
   17e64:	4001e000 	.word	0x4001e000
   17e68:	e000ed00 	.word	0xe000ed00
   17e6c:	05fa0004 	.word	0x05fa0004
   17e70:	20000620 	.word	0x20000620
   17e74:	03d09000 	.word	0x03d09000

00017e78 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   17e78:	2301      	movs	r3, #1
   17e7a:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   17e7e:	f010 0fff 	tst.w	r0, #255	; 0xff
   17e82:	d012      	beq.n	17eaa <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   17e84:	f04f 0340 	mov.w	r3, #64	; 0x40
   17e88:	f3ef 8111 	mrs	r1, BASEPRI
   17e8c:	f383 8811 	msr	BASEPRI, r3
   17e90:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   17e94:	4a06      	ldr	r2, [pc, #24]	; (17eb0 <nrfx_gpiote_channel_free+0x38>)
   17e96:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   17e98:	ea23 0000 	bic.w	r0, r3, r0
   17e9c:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   17e9e:	f381 8811 	msr	BASEPRI, r1
   17ea2:	f3bf 8f6f 	isb	sy
   17ea6:	4803      	ldr	r0, [pc, #12]	; (17eb4 <nrfx_gpiote_channel_free+0x3c>)
   17ea8:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   17eaa:	4803      	ldr	r0, [pc, #12]	; (17eb8 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   17eac:	4770      	bx	lr
   17eae:	bf00      	nop
   17eb0:	20002450 	.word	0x20002450
   17eb4:	0bad0000 	.word	0x0bad0000
   17eb8:	0bad0004 	.word	0x0bad0004

00017ebc <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   17ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17ec0:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   17ec2:	f8df e060 	ldr.w	lr, [pc, #96]	; 17f24 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   17ec6:	4816      	ldr	r0, [pc, #88]	; (17f20 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   17ec8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 17f28 <nrfx_gpiote_channel_alloc+0x6c>
{
   17ecc:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   17ece:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   17ed0:	2601      	movs	r6, #1
   17ed2:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   17ed4:	f04f 0140 	mov.w	r1, #64	; 0x40
   17ed8:	f3ef 8c11 	mrs	ip, BASEPRI
   17edc:	f381 8811 	msr	BASEPRI, r1
   17ee0:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   17ee4:	fa22 f103 	lsr.w	r1, r2, r3
   17ee8:	07c9      	lsls	r1, r1, #31
   17eea:	d50a      	bpl.n	17f02 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   17eec:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   17ef0:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   17ef4:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   17ef6:	bf01      	itttt	eq
   17ef8:	4339      	orreq	r1, r7
   17efa:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
   17efe:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   17f00:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   17f02:	f38c 8811 	msr	BASEPRI, ip
   17f06:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   17f0a:	4540      	cmp	r0, r8
   17f0c:	d005      	beq.n	17f1a <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   17f0e:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   17f12:	439a      	bics	r2, r3
   17f14:	f104 0401 	add.w	r4, r4, #1
   17f18:	d1db      	bne.n	17ed2 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   17f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17f1e:	bf00      	nop
   17f20:	0bad0002 	.word	0x0bad0002
   17f24:	20002450 	.word	0x20002450
   17f28:	0bad0000 	.word	0x0bad0000

00017f2c <nrfx_ppi_channel_alloc>:


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   17f2c:	4b18      	ldr	r3, [pc, #96]	; (17f90 <nrfx_ppi_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   17f2e:	f8df c06c 	ldr.w	ip, [pc, #108]	; 17f9c <nrfx_ppi_channel_alloc+0x70>
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   17f32:	681b      	ldr	r3, [r3, #0]
{
   17f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   17f38:	43db      	mvns	r3, r3
{
   17f3a:	4605      	mov	r5, r0
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   17f3c:	4f15      	ldr	r7, [pc, #84]	; (17f94 <nrfx_ppi_channel_alloc+0x68>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   17f3e:	4816      	ldr	r0, [pc, #88]	; (17f98 <nrfx_ppi_channel_alloc+0x6c>)
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   17f40:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   17f44:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   17f46:	f04f 0e01 	mov.w	lr, #1
   17f4a:	b2e6      	uxtb	r6, r4
   17f4c:	b90b      	cbnz	r3, 17f52 <nrfx_ppi_channel_alloc+0x26>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   17f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   17f52:	f04f 0240 	mov.w	r2, #64	; 0x40
   17f56:	f3ef 8811 	mrs	r8, BASEPRI
   17f5a:	f382 8811 	msr	BASEPRI, r2
   17f5e:	f3bf 8f6f 	isb	sy
   17f62:	fa0e f206 	lsl.w	r2, lr, r6
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   17f66:	421a      	tst	r2, r3
   17f68:	d006      	beq.n	17f78 <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   17f6a:	6839      	ldr	r1, [r7, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   17f6c:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   17f6e:	bf01      	itttt	eq
   17f70:	4311      	orreq	r1, r2
   17f72:	6039      	streq	r1, [r7, #0]
            *p_channel = channel;
   17f74:	702e      	strbeq	r6, [r5, #0]
            err_code   = NRFX_SUCCESS;
   17f76:	4660      	moveq	r0, ip
	__asm__ volatile(
   17f78:	f388 8811 	msr	BASEPRI, r8
   17f7c:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   17f80:	4560      	cmp	r0, ip
   17f82:	f104 0401 	add.w	r4, r4, #1
   17f86:	d0e2      	beq.n	17f4e <nrfx_ppi_channel_alloc+0x22>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   17f88:	ea23 0302 	bic.w	r3, r3, r2
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   17f8c:	e7dd      	b.n	17f4a <nrfx_ppi_channel_alloc+0x1e>
   17f8e:	bf00      	nop
   17f90:	000216b8 	.word	0x000216b8
   17f94:	200024b0 	.word	0x200024b0
   17f98:	0bad0002 	.word	0x0bad0002
   17f9c:	0bad0000 	.word	0x0bad0000

00017fa0 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   17fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(p_config->scl != p_config->sda);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   17fa4:	7906      	ldrb	r6, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   17fa6:	4d27      	ldr	r5, [pc, #156]	; (18044 <nrfx_twim_init+0xa4>)
   17fa8:	f04f 0c34 	mov.w	ip, #52	; 0x34
   17fac:	fb0c fc06 	mul.w	ip, ip, r6
   17fb0:	eb05 040c 	add.w	r4, r5, ip
   17fb4:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
   17fb8:	2f00      	cmp	r7, #0
   17fba:	d140      	bne.n	1803e <nrfx_twim_init+0x9e>
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
   17fbc:	60a7      	str	r7, [r4, #8]
    p_cb->repeated        = false;
   17fbe:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
   17fc2:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    TWIM_PIN_INIT(p_config->scl, drive);
   17fc6:	680f      	ldr	r7, [r1, #0]
    p_cb->p_context       = p_context;
   17fc8:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   17fca:	7b4b      	ldrb	r3, [r1, #13]
   17fcc:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->handler         = event_handler;
   17fd0:	f845 200c 	str.w	r2, [r5, ip]
        case 1: return NRF_P1;
   17fd4:	4b1c      	ldr	r3, [pc, #112]	; (18048 <nrfx_twim_init+0xa8>)
#if NRFX_CHECK(NRFX_TWIM_NRF52_ANOMALY_109_WORKAROUND_ENABLED)
    p_cb->bus_frequency   = (nrf_twim_frequency_t)p_config->frequency;
#endif

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   17fd6:	6800      	ldr	r0, [r0, #0]
    return pin_number >> 5;
   17fd8:	ea4f 1c57 	mov.w	ip, r7, lsr #5
        case 1: return NRF_P1;
   17fdc:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
   17fe0:	f007 041f 	and.w	r4, r7, #31
        case 1: return NRF_P1;
   17fe4:	bf0c      	ite	eq
   17fe6:	469c      	moveq	ip, r3
   17fe8:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   17fec:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   17ff0:	f240 6e0c 	movw	lr, #1548	; 0x60c
   17ff4:	f84c e024 	str.w	lr, [ip, r4, lsl #2]
    TWIM_PIN_INIT(p_config->sda, drive);
   17ff8:	684c      	ldr	r4, [r1, #4]
    return pin_number >> 5;
   17ffa:	ea4f 1854 	mov.w	r8, r4, lsr #5
    *p_pin = pin_number & 0x1F;
   17ffe:	f004 0c1f 	and.w	ip, r4, #31
        case 1: return NRF_P1;
   18002:	f1b8 0f01 	cmp.w	r8, #1
   18006:	bf18      	it	ne
   18008:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1800c:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
   18010:	f843 e02c 	str.w	lr, [r3, ip, lsl #2]
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   18014:	688b      	ldr	r3, [r1, #8]

NRF_STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                         uint32_t scl_pin,
                                         uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
   18016:	f8c0 7508 	str.w	r7, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   1801a:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1801e:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524

    if (p_cb->handler)
   18022:	b11a      	cbz	r2, 1802c <nrfx_twim_init+0x8c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   18024:	f340 3007 	sbfx	r0, r0, #12, #8
   18028:	f7fa fad2 	bl	125d0 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1802c:	2334      	movs	r3, #52	; 0x34
   1802e:	fb03 5506 	mla	r5, r3, r6, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   18032:	4806      	ldr	r0, [pc, #24]	; (1804c <nrfx_twim_init+0xac>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   18034:	2301      	movs	r3, #1
   18036:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   1803a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   1803e:	4804      	ldr	r0, [pc, #16]	; (18050 <nrfx_twim_init+0xb0>)
   18040:	e7fb      	b.n	1803a <nrfx_twim_init+0x9a>
   18042:	bf00      	nop
   18044:	200024b4 	.word	0x200024b4
   18048:	50000300 	.word	0x50000300
   1804c:	0bad0000 	.word	0x0bad0000
   18050:	0bad0005 	.word	0x0bad0005

00018054 <nrfx_twim_enable>:
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
   18054:	6802      	ldr	r2, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   18056:	7903      	ldrb	r3, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   18058:	2106      	movs	r1, #6
   1805a:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1805e:	4a04      	ldr	r2, [pc, #16]	; (18070 <nrfx_twim_enable+0x1c>)
   18060:	2134      	movs	r1, #52	; 0x34
   18062:	fb01 2303 	mla	r3, r1, r3, r2
   18066:	2202      	movs	r2, #2
   18068:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   1806c:	4770      	bx	lr
   1806e:	bf00      	nop
   18070:	200024b4 	.word	0x200024b4

00018074 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   18074:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
   18076:	490c      	ldr	r1, [pc, #48]	; (180a8 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   18078:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   1807a:	2034      	movs	r0, #52	; 0x34
   1807c:	fb00 1303 	mla	r3, r0, r3, r1
   18080:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   18082:	480a      	ldr	r0, [pc, #40]	; (180ac <nrfx_twim_disable+0x38>)
   18084:	6099      	str	r1, [r3, #8]
   18086:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   1808a:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   1808e:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   18092:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   18096:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1809a:	2201      	movs	r2, #1
   1809c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
   180a0:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   180a4:	4770      	bx	lr
   180a6:	bf00      	nop
   180a8:	200024b4 	.word	0x200024b4
   180ac:	019c0202 	.word	0x019c0202

000180b0 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   180b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
   180b4:	4fb4      	ldr	r7, [pc, #720]	; (18388 <nrfx_twim_xfer+0x2d8>)
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   180b6:	f890 e004 	ldrb.w	lr, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   180ba:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   180bc:	2334      	movs	r3, #52	; 0x34
   180be:	fb03 730e 	mla	r3, r3, lr, r7
{
   180c2:	4694      	mov	ip, r2
    p_cb->error = false;
   180c4:	2200      	movs	r2, #0
   180c6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   180ca:	684b      	ldr	r3, [r1, #4]
{
   180cc:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   180ce:	b14b      	cbz	r3, 180e4 <nrfx_twim_xfer+0x34>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   180d0:	68cb      	ldr	r3, [r1, #12]
   180d2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   180d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   180da:	d003      	beq.n	180e4 <nrfx_twim_xfer+0x34>
        return err_code;
   180dc:	4eab      	ldr	r6, [pc, #684]	; (1838c <nrfx_twim_xfer+0x2dc>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   180de:	4630      	mov	r0, r6
   180e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   180e4:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
   180e6:	4baa      	ldr	r3, [pc, #680]	; (18390 <nrfx_twim_xfer+0x2e0>)
   180e8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   180ec:	fb06 760e 	mla	r6, r6, lr, r7
   180f0:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   180f4:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   180f8:	b123      	cbz	r3, 18104 <nrfx_twim_xfer+0x54>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   180fa:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   180fc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
   18100:	4ea4      	ldr	r6, [pc, #656]	; (18394 <nrfx_twim_xfer+0x2e4>)
   18102:	e7ec      	b.n	180de <nrfx_twim_xfer+0x2e>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   18104:	f01c 0f14 	tst.w	ip, #20
   18108:	bf0c      	ite	eq
   1810a:	2301      	moveq	r3, #1
   1810c:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   1810e:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   18112:	46a9      	mov	r9, r5
   18114:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   18118:	f106 080c 	add.w	r8, r6, #12
   1811c:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   18120:	f8d9 3000 	ldr.w	r3, [r9]
   18124:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   18128:	f3cc 1300 	ubfx	r3, ip, #4, #1
   1812c:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
   18130:	f8c6 c020 	str.w	ip, [r6, #32]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   18134:	786b      	ldrb	r3, [r5, #1]
   18136:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1813a:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   1813e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   18142:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   18146:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1814a:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   1814e:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   18152:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   18156:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   1815a:	f01c 0301 	ands.w	r3, ip, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   1815e:	bf18      	it	ne
   18160:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   18162:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   18166:	f01c 0302 	ands.w	r3, ip, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   1816a:	bf18      	it	ne
   1816c:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   1816e:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   18172:	782b      	ldrb	r3, [r5, #0]
   18174:	2b03      	cmp	r3, #3
   18176:	f200 80b5 	bhi.w	182e4 <nrfx_twim_xfer+0x234>
   1817a:	e8df f003 	tbb	[pc, r3]
   1817e:	a084      	.short	0xa084
   18180:	0269      	.short	0x0269
   18182:	692a      	ldr	r2, [r5, #16]
   18184:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   18188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1818c:	d1a6      	bne.n	180dc <nrfx_twim_xfer+0x2c>
    p_reg->SHORTS = mask;
   1818e:	f44f 7380 	mov.w	r3, #256	; 0x100
   18192:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   18196:	68e9      	ldr	r1, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   18198:	686b      	ldr	r3, [r5, #4]
   1819a:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1819e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   181a2:	2300      	movs	r3, #0
   181a4:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   181a8:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   181ac:	2101      	movs	r1, #1
   181ae:	6221      	str	r1, [r4, #32]
   181b0:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   181b2:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   181b6:	2900      	cmp	r1, #0
   181b8:	d0fb      	beq.n	181b2 <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   181ba:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   181be:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   181c2:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   181c4:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   181c8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   181cc:	2334      	movs	r3, #52	; 0x34
   181ce:	fb03 730e 	mla	r3, r3, lr, r7
   181d2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   181d6:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   181d8:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   181da:	4e6f      	ldr	r6, [pc, #444]	; (18398 <nrfx_twim_xfer+0x2e8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   181dc:	f01c 0f08 	tst.w	ip, #8
   181e0:	d107      	bne.n	181f2 <nrfx_twim_xfer+0x142>
   181e2:	782a      	ldrb	r2, [r5, #0]
   181e4:	2a03      	cmp	r2, #3
   181e6:	d004      	beq.n	181f2 <nrfx_twim_xfer+0x142>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   181e8:	2201      	movs	r2, #1
   181ea:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   181ec:	686b      	ldr	r3, [r5, #4]
   181ee:	b903      	cbnz	r3, 181f2 <nrfx_twim_xfer+0x142>
   181f0:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   181f2:	2334      	movs	r3, #52	; 0x34
   181f4:	fb03 f30e 	mul.w	r3, r3, lr
   181f8:	18fa      	adds	r2, r7, r3
   181fa:	58fb      	ldr	r3, [r7, r3]
   181fc:	2b00      	cmp	r3, #0
   181fe:	d174      	bne.n	182ea <nrfx_twim_xfer+0x23a>
                transmission_finished = true;
   18200:	2501      	movs	r5, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18202:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   18206:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1820a:	2900      	cmp	r1, #0
   1820c:	f040 8087 	bne.w	1831e <nrfx_twim_xfer+0x26e>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   18210:	3a00      	subs	r2, #0
   18212:	bf18      	it	ne
   18214:	2201      	movne	r2, #1
   18216:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   1821a:	2900      	cmp	r1, #0
   1821c:	f000 8085 	beq.w	1832a <nrfx_twim_xfer+0x27a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18220:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18224:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18228:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   1822c:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   18230:	b110      	cbz	r0, 18238 <nrfx_twim_xfer+0x188>
   18232:	f411 7f00 	tst.w	r1, #512	; 0x200
   18236:	d104      	bne.n	18242 <nrfx_twim_xfer+0x192>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18238:	6225      	str	r5, [r4, #32]
   1823a:	6165      	str	r5, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   1823c:	2800      	cmp	r0, #0
   1823e:	d0e0      	beq.n	18202 <nrfx_twim_xfer+0x152>
                    transmission_finished = false;
   18240:	2200      	movs	r2, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   18242:	05c9      	lsls	r1, r1, #23
   18244:	d571      	bpl.n	1832a <nrfx_twim_xfer+0x27a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18246:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1824a:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
        } while (!transmission_finished);
   1824e:	e7d8      	b.n	18202 <nrfx_twim_xfer+0x152>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   18250:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   18252:	68ea      	ldr	r2, [r5, #12]
   18254:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   18258:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   1825c:	692b      	ldr	r3, [r5, #16]
   1825e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   18262:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   18266:	f47f af39 	bne.w	180dc <nrfx_twim_xfer+0x2c>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   1826a:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1826c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   18270:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   18274:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   18278:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1827c:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1827e:	fb03 730e 	mla	r3, r3, lr, r7
   18282:	2202      	movs	r2, #2
   18284:	e012      	b.n	182ac <nrfx_twim_xfer+0x1fc>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   18286:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   18288:	68ea      	ldr	r2, [r5, #12]
   1828a:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   1828e:	f01c 0f20 	tst.w	ip, #32
    p_reg->TXD.MAXCNT = length;
   18292:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   18296:	f04f 0334 	mov.w	r3, #52	; 0x34
   1829a:	d00b      	beq.n	182b4 <nrfx_twim_xfer+0x204>
    p_reg->SHORTS = mask;
   1829c:	f44f 7280 	mov.w	r2, #256	; 0x100
   182a0:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   182a4:	fb03 730e 	mla	r3, r3, lr, r7
   182a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   182ac:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   182ae:	2301      	movs	r3, #1
   182b0:	6223      	str	r3, [r4, #32]
   182b2:	e791      	b.n	181d8 <nrfx_twim_xfer+0x128>
    p_reg->SHORTS = mask;
   182b4:	f44f 7200 	mov.w	r2, #512	; 0x200
   182b8:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   182bc:	e7df      	b.n	1827e <nrfx_twim_xfer+0x1ce>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   182be:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   182c0:	68ea      	ldr	r2, [r5, #12]
   182c2:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   182c6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   182ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   182ce:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   182d2:	2334      	movs	r3, #52	; 0x34
   182d4:	fb03 730e 	mla	r3, r3, lr, r7
   182d8:	2202      	movs	r2, #2
   182da:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   182dc:	2301      	movs	r3, #1
   182de:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   182e0:	2300      	movs	r3, #0
   182e2:	e77a      	b.n	181da <nrfx_twim_xfer+0x12a>
    switch (p_xfer_desc->type)
   182e4:	4e2d      	ldr	r6, [pc, #180]	; (1839c <nrfx_twim_xfer+0x2ec>)
   182e6:	2308      	movs	r3, #8
   182e8:	e778      	b.n	181dc <nrfx_twim_xfer+0x12c>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   182ea:	f01c 0f04 	tst.w	ip, #4
            p_cb->int_mask = 0;
   182ee:	bf1c      	itt	ne
   182f0:	2300      	movne	r3, #0
   182f2:	6093      	strne	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   182f4:	f01c 0f40 	tst.w	ip, #64	; 0x40
   182f8:	d106      	bne.n	18308 <nrfx_twim_xfer+0x258>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   182fa:	2334      	movs	r3, #52	; 0x34
   182fc:	fb03 730e 	mla	r3, r3, lr, r7
   18300:	689a      	ldr	r2, [r3, #8]
   18302:	f042 0202 	orr.w	r2, r2, #2
   18306:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   18308:	2334      	movs	r3, #52	; 0x34
   1830a:	fb03 770e 	mla	r7, r3, lr, r7
   1830e:	68bb      	ldr	r3, [r7, #8]
   18310:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   18314:	60bb      	str	r3, [r7, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   18316:	68bb      	ldr	r3, [r7, #8]
    p_reg->INTENSET = mask;
   18318:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   1831c:	e6df      	b.n	180de <nrfx_twim_xfer+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1831e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   18322:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
                transmission_finished = true;
   18326:	2201      	movs	r2, #1
   18328:	e775      	b.n	18216 <nrfx_twim_xfer+0x166>
        } while (!transmission_finished);
   1832a:	2a00      	cmp	r2, #0
   1832c:	f43f af69 	beq.w	18202 <nrfx_twim_xfer+0x152>
        p_cb->busy = false;
   18330:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
   18332:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   18336:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   1833a:	fb01 720e 	mla	r2, r1, lr, r7
   1833e:	2000      	movs	r0, #0
   18340:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   18344:	b18b      	cbz	r3, 1836a <nrfx_twim_xfer+0x2ba>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   18346:	4a16      	ldr	r2, [pc, #88]	; (183a0 <nrfx_twim_xfer+0x2f0>)
   18348:	4e16      	ldr	r6, [pc, #88]	; (183a4 <nrfx_twim_xfer+0x2f4>)
   1834a:	f013 0f01 	tst.w	r3, #1
   1834e:	bf18      	it	ne
   18350:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   18352:	f013 0f02 	tst.w	r3, #2
   18356:	f102 0201 	add.w	r2, r2, #1
   1835a:	bf18      	it	ne
   1835c:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1835e:	f013 0f04 	tst.w	r3, #4
   18362:	4b11      	ldr	r3, [pc, #68]	; (183a8 <nrfx_twim_xfer+0x2f8>)
   18364:	bf18      	it	ne
   18366:	461e      	movne	r6, r3
   18368:	e6b9      	b.n	180de <nrfx_twim_xfer+0x2e>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   1836a:	f01c 0f40 	tst.w	ip, #64	; 0x40
   1836e:	f47f aeb6 	bne.w	180de <nrfx_twim_xfer+0x2e>
                !xfer_completeness_check(p_twim, p_cb))
   18372:	fb0e 7101 	mla	r1, lr, r1, r7
   18376:	4620      	mov	r0, r4
   18378:	f007 fda2 	bl	1fec0 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   1837c:	4b09      	ldr	r3, [pc, #36]	; (183a4 <nrfx_twim_xfer+0x2f4>)
   1837e:	2800      	cmp	r0, #0
   18380:	bf08      	it	eq
   18382:	461e      	moveq	r6, r3
   18384:	e6ab      	b.n	180de <nrfx_twim_xfer+0x2e>
   18386:	bf00      	nop
   18388:	200024b4 	.word	0x200024b4
   1838c:	0bad000a 	.word	0x0bad000a
   18390:	019c0202 	.word	0x019c0202
   18394:	0bad000b 	.word	0x0bad000b
   18398:	0bad0000 	.word	0x0bad0000
   1839c:	0bad0004 	.word	0x0bad0004
   183a0:	0bae0000 	.word	0x0bae0000
   183a4:	0bad0001 	.word	0x0bad0001
   183a8:	0bae0002 	.word	0x0bae0002

000183ac <nrfx_twim_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
   183ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   183ae:	4b5b      	ldr	r3, [pc, #364]	; (1851c <nrfx_twim_0_irq_handler+0x170>)
   183b0:	4c5b      	ldr	r4, [pc, #364]	; (18520 <nrfx_twim_0_irq_handler+0x174>)
   183b2:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   183b6:	b087      	sub	sp, #28
   183b8:	461d      	mov	r5, r3
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   183ba:	b1fa      	cbz	r2, 183fc <nrfx_twim_0_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   183bc:	2200      	movs	r2, #0
   183be:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   183c2:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   183c6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   183ca:	b9ba      	cbnz	r2, 183fc <nrfx_twim_0_irq_handler+0x50>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   183cc:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   183ce:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   183d2:	2202      	movs	r2, #2
   183d4:	60a2      	str	r2, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   183d6:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENSET = mask;
   183d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   183dc:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   183e0:	b11a      	cbz	r2, 183ea <nrfx_twim_0_irq_handler+0x3e>
    return p_reg->SHORTS;
   183e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   183e6:	059e      	lsls	r6, r3, #22
   183e8:	d403      	bmi.n	183f2 <nrfx_twim_0_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   183ea:	4b4c      	ldr	r3, [pc, #304]	; (1851c <nrfx_twim_0_irq_handler+0x170>)
   183ec:	2201      	movs	r2, #1
   183ee:	621a      	str	r2, [r3, #32]
   183f0:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   183f2:	2301      	movs	r3, #1
   183f4:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
}
   183f8:	b007      	add	sp, #28
   183fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   183fc:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   18400:	2b00      	cmp	r3, #0
   18402:	d053      	beq.n	184ac <nrfx_twim_0_irq_handler+0x100>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18404:	2300      	movs	r3, #0
   18406:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   1840a:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   1840e:	6a23      	ldr	r3, [r4, #32]
   18410:	065d      	lsls	r5, r3, #25
   18412:	d40a      	bmi.n	1842a <nrfx_twim_0_irq_handler+0x7e>
   18414:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   18418:	b93b      	cbnz	r3, 1842a <nrfx_twim_0_irq_handler+0x7e>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   1841a:	4941      	ldr	r1, [pc, #260]	; (18520 <nrfx_twim_0_irq_handler+0x174>)
   1841c:	483f      	ldr	r0, [pc, #252]	; (1851c <nrfx_twim_0_irq_handler+0x170>)
   1841e:	f007 fd4f 	bl	1fec0 <xfer_completeness_check>
   18422:	f080 0001 	eor.w	r0, r0, #1
   18426:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   1842a:	6a23      	ldr	r3, [r4, #32]
   1842c:	f013 0704 	ands.w	r7, r3, #4
   18430:	d121      	bne.n	18476 <nrfx_twim_0_irq_handler+0xca>
            event.xfer_desc = p_cb->xfer_desc;
   18432:	4e3c      	ldr	r6, [pc, #240]	; (18524 <nrfx_twim_0_irq_handler+0x178>)
   18434:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
   18438:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1843a:	ad01      	add	r5, sp, #4
   1843c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1843e:	6833      	ldr	r3, [r6, #0]
   18440:	602b      	str	r3, [r5, #0]
   18442:	4b36      	ldr	r3, [pc, #216]	; (1851c <nrfx_twim_0_irq_handler+0x170>)
   18444:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   18448:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   1844c:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
   18450:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   18454:	f1bc 0f00 	cmp.w	ip, #0
   18458:	d002      	beq.n	18460 <nrfx_twim_0_irq_handler+0xb4>
   1845a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   1845e:	b152      	cbz	r2, 18476 <nrfx_twim_0_irq_handler+0xca>
    p_reg->SHORTS = mask;
   18460:	2200      	movs	r2, #0
   18462:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   18466:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   18468:	4a2f      	ldr	r2, [pc, #188]	; (18528 <nrfx_twim_0_irq_handler+0x17c>)
   1846a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1846e:	4b2f      	ldr	r3, [pc, #188]	; (1852c <nrfx_twim_0_irq_handler+0x180>)
   18470:	2208      	movs	r2, #8
   18472:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   18476:	4a29      	ldr	r2, [pc, #164]	; (1851c <nrfx_twim_0_irq_handler+0x170>)
   18478:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1847c:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   18480:	0798      	lsls	r0, r3, #30
   18482:	d53c      	bpl.n	184fe <nrfx_twim_0_irq_handler+0x152>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   18484:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   18486:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   1848a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1848e:	b90b      	cbnz	r3, 18494 <nrfx_twim_0_irq_handler+0xe8>
        p_cb->busy = false;
   18490:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   18494:	6a23      	ldr	r3, [r4, #32]
   18496:	075b      	lsls	r3, r3, #29
   18498:	d503      	bpl.n	184a2 <nrfx_twim_0_irq_handler+0xf6>
   1849a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1849e:	2b00      	cmp	r3, #0
   184a0:	d0aa      	beq.n	183f8 <nrfx_twim_0_irq_handler+0x4c>
        p_cb->handler(&event, p_cb->p_context);
   184a2:	e9d4 3100 	ldrd	r3, r1, [r4]
   184a6:	4668      	mov	r0, sp
   184a8:	4798      	blx	r3
}
   184aa:	e7a5      	b.n	183f8 <nrfx_twim_0_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   184ac:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   184b0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   184b4:	7b23      	ldrb	r3, [r4, #12]
   184b6:	b983      	cbnz	r3, 184da <nrfx_twim_0_irq_handler+0x12e>
            event.xfer_desc = p_cb->xfer_desc;
   184b8:	4f1a      	ldr	r7, [pc, #104]	; (18524 <nrfx_twim_0_irq_handler+0x178>)
   184ba:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   184bc:	ae01      	add	r6, sp, #4
   184be:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   184c0:	683b      	ldr	r3, [r7, #0]
   184c2:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   184c4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   184c8:	2b00      	cmp	r3, #0
   184ca:	d1d4      	bne.n	18476 <nrfx_twim_0_irq_handler+0xca>
    p_reg->SHORTS = mask;
   184cc:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   184d0:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   184d2:	4b15      	ldr	r3, [pc, #84]	; (18528 <nrfx_twim_0_irq_handler+0x17c>)
   184d4:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   184d8:	e7c9      	b.n	1846e <nrfx_twim_0_irq_handler+0xc2>
    p_reg->SHORTS = mask;
   184da:	f44f 7300 	mov.w	r3, #512	; 0x200
   184de:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   184e2:	f240 2302 	movw	r3, #514	; 0x202
   184e6:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   184e8:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   184ec:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   184f0:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   184f2:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   184f6:	2301      	movs	r3, #1
   184f8:	60ab      	str	r3, [r5, #8]
   184fa:	622b      	str	r3, [r5, #32]
            return;
   184fc:	e77c      	b.n	183f8 <nrfx_twim_0_irq_handler+0x4c>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   184fe:	0759      	lsls	r1, r3, #29
   18500:	d501      	bpl.n	18506 <nrfx_twim_0_irq_handler+0x15a>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   18502:	2302      	movs	r3, #2
   18504:	e7bf      	b.n	18486 <nrfx_twim_0_irq_handler+0xda>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   18506:	07da      	lsls	r2, r3, #31
   18508:	d501      	bpl.n	1850e <nrfx_twim_0_irq_handler+0x162>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   1850a:	2303      	movs	r3, #3
   1850c:	e7bb      	b.n	18486 <nrfx_twim_0_irq_handler+0xda>
    else if (p_cb->error)
   1850e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   18512:	2b00      	cmp	r3, #0
   18514:	d0b7      	beq.n	18486 <nrfx_twim_0_irq_handler+0xda>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   18516:	2304      	movs	r3, #4
   18518:	e7b5      	b.n	18486 <nrfx_twim_0_irq_handler+0xda>
   1851a:	bf00      	nop
   1851c:	40003000 	.word	0x40003000
   18520:	200024b4 	.word	0x200024b4
   18524:	200024c0 	.word	0x200024c0
   18528:	019c0202 	.word	0x019c0202
   1852c:	e000e100 	.word	0xe000e100

00018530 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   18530:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   18532:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   18536:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   18538:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1853a:	6002      	str	r2, [r0, #0]
}
   1853c:	4802      	ldr	r0, [pc, #8]	; (18548 <nrf_gpio_pin_port_decode+0x18>)
   1853e:	bf18      	it	ne
   18540:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   18544:	4770      	bx	lr
   18546:	bf00      	nop
   18548:	50000300 	.word	0x50000300

0001854c <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   1854c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1854e:	460c      	mov	r4, r1
   18550:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   18552:	f007 fce5 	bl	1ff20 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   18556:	4608      	mov	r0, r1
   18558:	f007 fce2 	bl	1ff20 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1855c:	a801      	add	r0, sp, #4
   1855e:	9601      	str	r6, [sp, #4]
   18560:	f7ff ffe6 	bl	18530 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   18564:	9b01      	ldr	r3, [sp, #4]
   18566:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1856a:	f240 610d 	movw	r1, #1549	; 0x60d
   1856e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   18572:	a801      	add	r0, sp, #4
   18574:	9401      	str	r4, [sp, #4]
   18576:	f7ff ffdb 	bl	18530 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1857a:	9b01      	ldr	r3, [sp, #4]
   1857c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   18580:	2509      	movs	r5, #9
   18582:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
   18586:	2004      	movs	r0, #4
   18588:	f007 fc98 	bl	1febc <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1858c:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1858e:	a801      	add	r0, sp, #4
   18590:	9401      	str	r4, [sp, #4]
   18592:	f7ff ffcd 	bl	18530 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   18596:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   18598:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1859c:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   1859e:	07db      	lsls	r3, r3, #31
   185a0:	d415      	bmi.n	185ce <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   185a2:	a801      	add	r0, sp, #4
   185a4:	9601      	str	r6, [sp, #4]
   185a6:	f7ff ffc3 	bl	18530 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   185aa:	9b01      	ldr	r3, [sp, #4]
   185ac:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   185b0:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   185b4:	2004      	movs	r0, #4
   185b6:	f007 fc81 	bl	1febc <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   185ba:	4630      	mov	r0, r6
   185bc:	f007 fcb0 	bl	1ff20 <nrf_gpio_pin_set>
            NRFX_DELAY_US(4);
   185c0:	3d01      	subs	r5, #1
   185c2:	2004      	movs	r0, #4
   185c4:	f007 fc7a 	bl	1febc <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   185c8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   185cc:	d1df      	bne.n	1858e <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   185ce:	a801      	add	r0, sp, #4
   185d0:	9401      	str	r4, [sp, #4]
   185d2:	f7ff ffad 	bl	18530 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   185d6:	9a01      	ldr	r2, [sp, #4]
   185d8:	2301      	movs	r3, #1
   185da:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   185dc:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   185e0:	2004      	movs	r0, #4
   185e2:	f007 fc6b 	bl	1febc <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   185e6:	4620      	mov	r0, r4
   185e8:	f007 fc9a 	bl	1ff20 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   185ec:	2004      	movs	r0, #4
   185ee:	f007 fc65 	bl	1febc <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   185f2:	a801      	add	r0, sp, #4
   185f4:	9401      	str	r4, [sp, #4]
   185f6:	f7ff ff9b 	bl	18530 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   185fa:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   185fc:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   18600:	4803      	ldr	r0, [pc, #12]	; (18610 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   18602:	40d3      	lsrs	r3, r2
   18604:	f003 0301 	and.w	r3, r3, #1
   18608:	1ac0      	subs	r0, r0, r3
   1860a:	b003      	add	sp, #12
   1860c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1860e:	bf00      	nop
   18610:	0bad0001 	.word	0x0bad0001

00018614 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   18614:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   18616:	4c14      	ldr	r4, [pc, #80]	; (18668 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   18618:	4a14      	ldr	r2, [pc, #80]	; (1866c <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1861a:	4915      	ldr	r1, [pc, #84]	; (18670 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1861c:	2303      	movs	r3, #3
   1861e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   18620:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   18622:	4b14      	ldr	r3, [pc, #80]	; (18674 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   18624:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   18626:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   18628:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1862c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1862e:	2300      	movs	r3, #0
   18630:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   18632:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   18634:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   18636:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   18638:	4a0f      	ldr	r2, [pc, #60]	; (18678 <_DoInit+0x64>)
   1863a:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   1863c:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1863e:	2210      	movs	r2, #16
   18640:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   18642:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   18644:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   18646:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   18648:	f005 faa3 	bl	1db92 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1864c:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   18650:	490a      	ldr	r1, [pc, #40]	; (1867c <_DoInit+0x68>)
   18652:	4620      	mov	r0, r4
   18654:	f005 fa9d 	bl	1db92 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   18658:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   1865c:	2320      	movs	r3, #32
   1865e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   18660:	f3bf 8f5f 	dmb	sy
}
   18664:	bd10      	pop	{r4, pc}
   18666:	bf00      	nop
   18668:	200024e8 	.word	0x200024e8
   1866c:	00021de5 	.word	0x00021de5
   18670:	00021dee 	.word	0x00021dee
   18674:	20003677 	.word	0x20003677
   18678:	20003667 	.word	0x20003667
   1867c:	00021df2 	.word	0x00021df2

00018680 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   18680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   18682:	4c18      	ldr	r4, [pc, #96]	; (186e4 <SEGGER_RTT_WriteNoLock+0x64>)
   18684:	2318      	movs	r3, #24
   18686:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   1868a:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   1868e:	4425      	add	r5, r4
  switch (pRing->Flags) {
   18690:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   18692:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   18694:	460f      	mov	r7, r1
   18696:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   18698:	d00f      	beq.n	186ba <SEGGER_RTT_WriteNoLock+0x3a>
   1869a:	2c02      	cmp	r4, #2
   1869c:	d01a      	beq.n	186d4 <SEGGER_RTT_WriteNoLock+0x54>
   1869e:	b9f4      	cbnz	r4, 186de <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   186a0:	4628      	mov	r0, r5
   186a2:	f007 fc4a 	bl	1ff3a <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   186a6:	4286      	cmp	r6, r0
   186a8:	d805      	bhi.n	186b6 <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   186aa:	4632      	mov	r2, r6
   186ac:	4639      	mov	r1, r7
   186ae:	4628      	mov	r0, r5
   186b0:	f007 fc51 	bl	1ff56 <_WriteNoCheck>
   186b4:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   186b6:	4620      	mov	r0, r4
   186b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   186ba:	4628      	mov	r0, r5
   186bc:	f007 fc3d 	bl	1ff3a <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   186c0:	4286      	cmp	r6, r0
   186c2:	4634      	mov	r4, r6
   186c4:	bf28      	it	cs
   186c6:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   186c8:	4622      	mov	r2, r4
   186ca:	4639      	mov	r1, r7
   186cc:	4628      	mov	r0, r5
   186ce:	f007 fc42 	bl	1ff56 <_WriteNoCheck>
    break;
   186d2:	e7f0      	b.n	186b6 <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   186d4:	4628      	mov	r0, r5
}
   186d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   186da:	f007 bc5a 	b.w	1ff92 <_WriteBlocking>
  switch (pRing->Flags) {
   186de:	2400      	movs	r4, #0
  return Status;
   186e0:	e7e9      	b.n	186b6 <SEGGER_RTT_WriteNoLock+0x36>
   186e2:	bf00      	nop
   186e4:	200024e8 	.word	0x200024e8

000186e8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   186e8:	4b0e      	ldr	r3, [pc, #56]	; (18724 <z_sys_init_run_level+0x3c>)
{
   186ea:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   186ec:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   186f0:	3001      	adds	r0, #1
   186f2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   186f6:	42a6      	cmp	r6, r4
   186f8:	d800      	bhi.n	186fc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   186fa:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   186fc:	e9d4 3500 	ldrd	r3, r5, [r4]
   18700:	4628      	mov	r0, r5
   18702:	4798      	blx	r3
		if (dev != NULL) {
   18704:	b165      	cbz	r5, 18720 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   18706:	68eb      	ldr	r3, [r5, #12]
   18708:	b130      	cbz	r0, 18718 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1870a:	2800      	cmp	r0, #0
   1870c:	bfb8      	it	lt
   1870e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   18710:	28ff      	cmp	r0, #255	; 0xff
   18712:	bfa8      	it	ge
   18714:	20ff      	movge	r0, #255	; 0xff
   18716:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   18718:	785a      	ldrb	r2, [r3, #1]
   1871a:	f042 0201 	orr.w	r2, r2, #1
   1871e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   18720:	3408      	adds	r4, #8
   18722:	e7e8      	b.n	186f6 <z_sys_init_run_level+0xe>
   18724:	000216bc 	.word	0x000216bc

00018728 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   18728:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1872a:	4605      	mov	r5, r0
   1872c:	b910      	cbnz	r0, 18734 <z_impl_device_get_binding+0xc>
		return NULL;
   1872e:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   18730:	4620      	mov	r0, r4
   18732:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   18734:	7803      	ldrb	r3, [r0, #0]
   18736:	2b00      	cmp	r3, #0
   18738:	d0f9      	beq.n	1872e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1873a:	4a0f      	ldr	r2, [pc, #60]	; (18778 <z_impl_device_get_binding+0x50>)
   1873c:	4c0f      	ldr	r4, [pc, #60]	; (1877c <z_impl_device_get_binding+0x54>)
   1873e:	4616      	mov	r6, r2
   18740:	4294      	cmp	r4, r2
   18742:	d108      	bne.n	18756 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   18744:	4c0d      	ldr	r4, [pc, #52]	; (1877c <z_impl_device_get_binding+0x54>)
   18746:	42b4      	cmp	r4, r6
   18748:	d0f1      	beq.n	1872e <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1874a:	4620      	mov	r0, r4
   1874c:	f007 fc55 	bl	1fffa <z_device_ready>
   18750:	b950      	cbnz	r0, 18768 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   18752:	3418      	adds	r4, #24
   18754:	e7f7      	b.n	18746 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   18756:	4620      	mov	r0, r4
   18758:	f007 fc4f 	bl	1fffa <z_device_ready>
   1875c:	b110      	cbz	r0, 18764 <z_impl_device_get_binding+0x3c>
   1875e:	6823      	ldr	r3, [r4, #0]
   18760:	42ab      	cmp	r3, r5
   18762:	d0e5      	beq.n	18730 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   18764:	3418      	adds	r4, #24
   18766:	e7eb      	b.n	18740 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   18768:	6821      	ldr	r1, [r4, #0]
   1876a:	4628      	mov	r0, r5
   1876c:	f005 fa3e 	bl	1dbec <strcmp>
   18770:	2800      	cmp	r0, #0
   18772:	d1ee      	bne.n	18752 <z_impl_device_get_binding+0x2a>
   18774:	e7dc      	b.n	18730 <z_impl_device_get_binding+0x8>
   18776:	bf00      	nop
   18778:	00020c58 	.word	0x00020c58
   1877c:	00020b80 	.word	0x00020b80

00018780 <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   18780:	4802      	ldr	r0, [pc, #8]	; (1878c <z_bss_zero+0xc>)
   18782:	4a03      	ldr	r2, [pc, #12]	; (18790 <z_bss_zero+0x10>)
   18784:	2100      	movs	r1, #0
   18786:	1a12      	subs	r2, r2, r0
   18788:	f005 ba6e 	b.w	1dc68 <memset>
   1878c:	20000988 	.word	0x20000988
   18790:	20003c34 	.word	0x20003c34

00018794 <bg_thread_main>:
 *
 * @return N/A
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   18794:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   18796:	4b0a      	ldr	r3, [pc, #40]	; (187c0 <bg_thread_main+0x2c>)
   18798:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1879a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1879c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1879e:	f7ff ffa3 	bl	186e8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   187a2:	f001 fa7b 	bl	19c9c <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   187a6:	2003      	movs	r0, #3
   187a8:	f7ff ff9e 	bl	186e8 <z_sys_init_run_level>

	z_init_static_threads();
   187ac:	f000 f956 	bl	18a5c <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
   187b0:	f7f8 f9f2 	bl	10b98 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   187b4:	4a03      	ldr	r2, [pc, #12]	; (187c4 <bg_thread_main+0x30>)
   187b6:	7b13      	ldrb	r3, [r2, #12]
   187b8:	f023 0301 	bic.w	r3, r3, #1
   187bc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   187be:	bd08      	pop	{r3, pc}
   187c0:	20003a77 	.word	0x20003a77
   187c4:	20001b70 	.word	0x20001b70

000187c8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   187c8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   187cc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 188d0 <z_cstart+0x108>
   187d0:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   187d2:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   187d6:	4d36      	ldr	r5, [pc, #216]	; (188b0 <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
   187d8:	4e36      	ldr	r6, [pc, #216]	; (188b4 <z_cstart+0xec>)
   187da:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   187dc:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 188d4 <z_cstart+0x10c>
	z_setup_new_thread(thread, stack,
   187e0:	4f35      	ldr	r7, [pc, #212]	; (188b8 <z_cstart+0xf0>)
   187e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   187e6:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   187e8:	23e0      	movs	r3, #224	; 0xe0
   187ea:	2400      	movs	r4, #0
   187ec:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   187f0:	2320      	movs	r3, #32
   187f2:	77eb      	strb	r3, [r5, #31]
   187f4:	762c      	strb	r4, [r5, #24]
   187f6:	766c      	strb	r4, [r5, #25]
   187f8:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   187fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   187fc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   18800:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   18802:	f7fa f8f9 	bl	129f8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   18806:	f7f9 ff89 	bl	1271c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1880a:	f04f 33ff 	mov.w	r3, #4294967295
   1880e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   18810:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   18812:	f7fa f9f5 	bl	12c00 <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   18816:	4d29      	ldr	r5, [pc, #164]	; (188bc <z_cstart+0xf4>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   18818:	f7fa f964 	bl	12ae4 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1881c:	f240 1301 	movw	r3, #257	; 0x101
   18820:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   18824:	ab06      	add	r3, sp, #24
   18826:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   18828:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1882c:	f007 fbe4 	bl	1fff8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   18830:	4620      	mov	r0, r4
   18832:	f7ff ff59 	bl	186e8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   18836:	2001      	movs	r0, #1
   18838:	f7ff ff56 	bl	186e8 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1883c:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   18840:	f000 fee2 	bl	19608 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18844:	4b1e      	ldr	r3, [pc, #120]	; (188c0 <z_cstart+0xf8>)
	_kernel.ready_q.cache = &z_main_thread;
   18846:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18848:	491e      	ldr	r1, [pc, #120]	; (188c4 <z_cstart+0xfc>)
   1884a:	9305      	str	r3, [sp, #20]
   1884c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   18850:	4653      	mov	r3, sl
   18852:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   18856:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1885a:	9400      	str	r4, [sp, #0]
   1885c:	4630      	mov	r0, r6
   1885e:	f000 f89f 	bl	189a0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18862:	7b73      	ldrb	r3, [r6, #13]
   18864:	4680      	mov	r8, r0
   18866:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1886a:	4630      	mov	r0, r6
   1886c:	7373      	strb	r3, [r6, #13]
   1886e:	f007 fee8 	bl	20642 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   18872:	230f      	movs	r3, #15
   18874:	e9cd 4302 	strd	r4, r3, [sp, #8]
   18878:	4913      	ldr	r1, [pc, #76]	; (188c8 <z_cstart+0x100>)
   1887a:	4b14      	ldr	r3, [pc, #80]	; (188cc <z_cstart+0x104>)
   1887c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   18880:	e9cd b404 	strd	fp, r4, [sp, #16]
   18884:	e9cd 5400 	strd	r5, r4, [sp]
   18888:	4638      	mov	r0, r7
   1888a:	f000 f889 	bl	189a0 <z_setup_new_thread>
   1888e:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   18890:	60ef      	str	r7, [r5, #12]
   18892:	f023 0304 	bic.w	r3, r3, #4
   18896:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   18898:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   1889c:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   188a0:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   188a2:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   188a6:	4652      	mov	r2, sl
   188a8:	4641      	mov	r1, r8
   188aa:	4630      	mov	r0, r6
   188ac:	f7f9 ff20 	bl	126f0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   188b0:	e000ed00 	.word	0xe000ed00
   188b4:	20001b70 	.word	0x20001b70
   188b8:	20001af0 	.word	0x20001af0
   188bc:	20002590 	.word	0x20002590
   188c0:	00021df9 	.word	0x00021df9
   188c4:	20004ec0 	.word	0x20004ec0
   188c8:	200056e0 	.word	0x200056e0
   188cc:	00018b19 	.word	0x00018b19
   188d0:	20006060 	.word	0x20006060
   188d4:	00018795 	.word	0x00018795

000188d8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   188d8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   188da:	4c06      	ldr	r4, [pc, #24]	; (188f4 <statics_init+0x1c>)
   188dc:	4d06      	ldr	r5, [pc, #24]	; (188f8 <statics_init+0x20>)
   188de:	42ac      	cmp	r4, r5
   188e0:	d301      	bcc.n	188e6 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   188e2:	2000      	movs	r0, #0
   188e4:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   188e6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   188ea:	4620      	mov	r0, r4
   188ec:	f007 fbaa 	bl	20044 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   188f0:	3414      	adds	r4, #20
   188f2:	e7f4      	b.n	188de <statics_init+0x6>
   188f4:	200007ec 	.word	0x200007ec
   188f8:	200007ec 	.word	0x200007ec

000188fc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   188fc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   188fe:	4b0e      	ldr	r3, [pc, #56]	; (18938 <init_mem_slab_module+0x3c>)
   18900:	4c0e      	ldr	r4, [pc, #56]	; (1893c <init_mem_slab_module+0x40>)
   18902:	42a3      	cmp	r3, r4
   18904:	d301      	bcc.n	1890a <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   18906:	2000      	movs	r0, #0
	return rc;
}
   18908:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1890a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1890e:	ea41 0200 	orr.w	r2, r1, r0
   18912:	f012 0203 	ands.w	r2, r2, #3
   18916:	d10b      	bne.n	18930 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   18918:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1891a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1891c:	42aa      	cmp	r2, r5
   1891e:	d101      	bne.n	18924 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   18920:	331c      	adds	r3, #28
   18922:	e7ee      	b.n	18902 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   18924:	695e      	ldr	r6, [r3, #20]
   18926:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   18928:	3201      	adds	r2, #1
		slab->free_list = p;
   1892a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1892c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1892e:	e7f5      	b.n	1891c <init_mem_slab_module+0x20>
		return -EINVAL;
   18930:	f06f 0015 	mvn.w	r0, #21
	return rc;
   18934:	e7e8      	b.n	18908 <init_mem_slab_module+0xc>
   18936:	bf00      	nop
   18938:	20000798 	.word	0x20000798
   1893c:	200007ec 	.word	0x200007ec

00018940 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   18940:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   18942:	460c      	mov	r4, r1
   18944:	4616      	mov	r6, r2
   18946:	461f      	mov	r7, r3
	__asm__ volatile(
   18948:	f04f 0340 	mov.w	r3, #64	; 0x40
   1894c:	f3ef 8111 	mrs	r1, BASEPRI
   18950:	f383 8811 	msr	BASEPRI, r3
   18954:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   18958:	6943      	ldr	r3, [r0, #20]
   1895a:	b15b      	cbz	r3, 18974 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1895c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1895e:	681b      	ldr	r3, [r3, #0]
   18960:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   18962:	6983      	ldr	r3, [r0, #24]
   18964:	3301      	adds	r3, #1
   18966:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   18968:	2000      	movs	r0, #0
	__asm__ volatile(
   1896a:	f381 8811 	msr	BASEPRI, r1
   1896e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   18972:	e011      	b.n	18998 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   18974:	ea56 0207 	orrs.w	r2, r6, r7
   18978:	d103      	bne.n	18982 <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1897a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1897c:	f06f 000b 	mvn.w	r0, #11
   18980:	e7f3      	b.n	1896a <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   18982:	4602      	mov	r2, r0
   18984:	e9cd 6700 	strd	r6, r7, [sp]
   18988:	3008      	adds	r0, #8
   1898a:	f000 fcb9 	bl	19300 <z_pend_curr>
		if (result == 0) {
   1898e:	b918      	cbnz	r0, 18998 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   18990:	4b02      	ldr	r3, [pc, #8]	; (1899c <k_mem_slab_alloc+0x5c>)
   18992:	689b      	ldr	r3, [r3, #8]
   18994:	695b      	ldr	r3, [r3, #20]
   18996:	6023      	str	r3, [r4, #0]
}
   18998:	b002      	add	sp, #8
   1899a:	bdd0      	pop	{r4, r6, r7, pc}
   1899c:	20002590 	.word	0x20002590

000189a0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   189a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   189a4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   189a6:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   189a8:	2604      	movs	r6, #4
   189aa:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   189ac:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   189ae:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   189b0:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   189b4:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   189b6:	1dd6      	adds	r6, r2, #7
   189b8:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   189bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   189be:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   189c0:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   189c4:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   189c6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   189ca:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   189ce:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   189d0:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   189d2:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   189d4:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   189d8:	9202      	str	r2, [sp, #8]
   189da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   189dc:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   189de:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   189e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   189e2:	9200      	str	r2, [sp, #0]
   189e4:	4642      	mov	r2, r8
{
   189e6:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   189e8:	f7f9 fe4c 	bl	12684 <arch_new_thread>
	if (!_current) {
   189ec:	4b04      	ldr	r3, [pc, #16]	; (18a00 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   189ee:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   189f0:	689b      	ldr	r3, [r3, #8]
   189f2:	b103      	cbz	r3, 189f6 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   189f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   189f6:	6763      	str	r3, [r4, #116]	; 0x74
}
   189f8:	4640      	mov	r0, r8
   189fa:	b004      	add	sp, #16
   189fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18a00:	20002590 	.word	0x20002590

00018a04 <z_impl_k_thread_create>:
{
   18a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   18a06:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18a08:	2500      	movs	r5, #0
   18a0a:	9505      	str	r5, [sp, #20]
   18a0c:	9d10      	ldr	r5, [sp, #64]	; 0x40
   18a0e:	9504      	str	r5, [sp, #16]
   18a10:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   18a12:	9503      	str	r5, [sp, #12]
   18a14:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   18a16:	9502      	str	r5, [sp, #8]
{
   18a18:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18a1c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   18a1e:	9501      	str	r5, [sp, #4]
   18a20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   18a22:	9500      	str	r5, [sp, #0]
{
   18a24:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18a26:	f7ff ffbb 	bl	189a0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   18a2a:	1c7b      	adds	r3, r7, #1
   18a2c:	bf08      	it	eq
   18a2e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   18a32:	d005      	beq.n	18a40 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18a34:	ea56 0307 	orrs.w	r3, r6, r7
   18a38:	d105      	bne.n	18a46 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   18a3a:	4620      	mov	r0, r4
   18a3c:	f000 fd7a 	bl	19534 <z_sched_start>
}
   18a40:	4620      	mov	r0, r4
   18a42:	b007      	add	sp, #28
   18a44:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   18a46:	4904      	ldr	r1, [pc, #16]	; (18a58 <z_impl_k_thread_create+0x54>)
   18a48:	4632      	mov	r2, r6
   18a4a:	463b      	mov	r3, r7
   18a4c:	f104 0018 	add.w	r0, r4, #24
   18a50:	f000 ff72 	bl	19938 <z_add_timeout>
   18a54:	e7f4      	b.n	18a40 <z_impl_k_thread_create+0x3c>
   18a56:	bf00      	nop
   18a58:	00020663 	.word	0x00020663

00018a5c <z_init_static_threads>:
{
   18a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   18a60:	4e2a      	ldr	r6, [pc, #168]	; (18b0c <z_init_static_threads+0xb0>)
   18a62:	4d2b      	ldr	r5, [pc, #172]	; (18b10 <z_init_static_threads+0xb4>)
{
   18a64:	b086      	sub	sp, #24
   18a66:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   18a68:	42b5      	cmp	r5, r6
   18a6a:	f105 0430 	add.w	r4, r5, #48	; 0x30
   18a6e:	d310      	bcc.n	18a92 <z_init_static_threads+0x36>
	k_sched_lock();
   18a70:	f000 fbd4 	bl	1921c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   18a74:	4c26      	ldr	r4, [pc, #152]	; (18b10 <z_init_static_threads+0xb4>)
   18a76:	f8df a09c 	ldr.w	sl, [pc, #156]	; 18b14 <z_init_static_threads+0xb8>
			return (t * to_hz + off) / from_hz;
   18a7a:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   18a7e:	f240 36e7 	movw	r6, #999	; 0x3e7
   18a82:	2700      	movs	r7, #0
   18a84:	4544      	cmp	r4, r8
   18a86:	d321      	bcc.n	18acc <z_init_static_threads+0x70>
}
   18a88:	b006      	add	sp, #24
   18a8a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   18a8e:	f000 bc7d 	b.w	1938c <k_sched_unlock>
		z_setup_new_thread(
   18a92:	f854 3c04 	ldr.w	r3, [r4, #-4]
   18a96:	9305      	str	r3, [sp, #20]
   18a98:	f854 3c10 	ldr.w	r3, [r4, #-16]
   18a9c:	9304      	str	r3, [sp, #16]
   18a9e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   18aa2:	9303      	str	r3, [sp, #12]
   18aa4:	f854 3c18 	ldr.w	r3, [r4, #-24]
   18aa8:	9302      	str	r3, [sp, #8]
   18aaa:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   18aae:	9301      	str	r3, [sp, #4]
   18ab0:	f854 3c20 	ldr.w	r3, [r4, #-32]
   18ab4:	9300      	str	r3, [sp, #0]
   18ab6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   18aba:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   18abe:	f7ff ff6f 	bl	189a0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   18ac2:	f854 3c30 	ldr.w	r3, [r4, #-48]
   18ac6:	655d      	str	r5, [r3, #84]	; 0x54
   18ac8:	4625      	mov	r5, r4
   18aca:	e7cd      	b.n	18a68 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   18acc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18ace:	1c5a      	adds	r2, r3, #1
   18ad0:	d00d      	beq.n	18aee <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   18ad2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   18ad6:	4630      	mov	r0, r6
   18ad8:	4639      	mov	r1, r7
   18ada:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18ade:	42b9      	cmp	r1, r7
   18ae0:	bf08      	it	eq
   18ae2:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   18ae4:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18ae6:	d104      	bne.n	18af2 <z_init_static_threads+0x96>
	z_sched_start(thread);
   18ae8:	4628      	mov	r0, r5
   18aea:	f000 fd23 	bl	19534 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   18aee:	3430      	adds	r4, #48	; 0x30
   18af0:	e7c8      	b.n	18a84 <z_init_static_threads+0x28>
   18af2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18af6:	2300      	movs	r3, #0
   18af8:	f7e8 f99e 	bl	e38 <__aeabi_uldivmod>
   18afc:	4602      	mov	r2, r0
   18afe:	460b      	mov	r3, r1
   18b00:	f105 0018 	add.w	r0, r5, #24
   18b04:	4651      	mov	r1, sl
   18b06:	f000 ff17 	bl	19938 <z_add_timeout>
   18b0a:	e7f0      	b.n	18aee <z_init_static_threads+0x92>
   18b0c:	20000796 	.word	0x20000796
   18b10:	20000796 	.word	0x20000796
   18b14:	00020663 	.word	0x00020663

00018b18 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   18b18:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   18b1a:	4c09      	ldr	r4, [pc, #36]	; (18b40 <idle+0x28>)
	__asm__ volatile(
   18b1c:	f04f 0240 	mov.w	r2, #64	; 0x40
   18b20:	f3ef 8311 	mrs	r3, BASEPRI
   18b24:	f382 8811 	msr	BASEPRI, r2
   18b28:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   18b2c:	f007 fe16 	bl	2075c <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   18b30:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   18b32:	f7f9 f893 	bl	11c5c <pm_system_suspend>
   18b36:	2800      	cmp	r0, #0
   18b38:	d1f0      	bne.n	18b1c <idle+0x4>
	arch_cpu_idle();
   18b3a:	f7f9 fdf5 	bl	12728 <arch_cpu_idle>
}
   18b3e:	e7ed      	b.n	18b1c <idle+0x4>
   18b40:	20002590 	.word	0x20002590

00018b44 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   18b44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18b48:	4604      	mov	r4, r0
   18b4a:	4616      	mov	r6, r2
   18b4c:	461f      	mov	r7, r3
   18b4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   18b52:	f3ef 8811 	mrs	r8, BASEPRI
   18b56:	f383 8811 	msr	BASEPRI, r3
   18b5a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   18b5e:	68c3      	ldr	r3, [r0, #12]
   18b60:	4a35      	ldr	r2, [pc, #212]	; (18c38 <z_impl_k_mutex_lock+0xf4>)
   18b62:	b16b      	cbz	r3, 18b80 <z_impl_k_mutex_lock+0x3c>
   18b64:	6880      	ldr	r0, [r0, #8]
   18b66:	6891      	ldr	r1, [r2, #8]
   18b68:	4288      	cmp	r0, r1
   18b6a:	d019      	beq.n	18ba0 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   18b6c:	ea56 0307 	orrs.w	r3, r6, r7
   18b70:	d118      	bne.n	18ba4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   18b72:	f388 8811 	msr	BASEPRI, r8
   18b76:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   18b7a:	f06f 000f 	mvn.w	r0, #15
   18b7e:	e00c      	b.n	18b9a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   18b80:	6891      	ldr	r1, [r2, #8]
   18b82:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   18b86:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   18b88:	3301      	adds	r3, #1
   18b8a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   18b8c:	6893      	ldr	r3, [r2, #8]
   18b8e:	60a3      	str	r3, [r4, #8]
   18b90:	f388 8811 	msr	BASEPRI, r8
   18b94:	f3bf 8f6f 	isb	sy
		return 0;
   18b98:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   18b9a:	b002      	add	sp, #8
   18b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   18ba0:	6921      	ldr	r1, [r4, #16]
   18ba2:	e7f0      	b.n	18b86 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   18ba4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   18ba8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   18bac:	4299      	cmp	r1, r3
   18bae:	bfa8      	it	ge
   18bb0:	4619      	movge	r1, r3
   18bb2:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   18bb6:	4291      	cmp	r1, r2
   18bb8:	bfb8      	it	lt
   18bba:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   18bbc:	428b      	cmp	r3, r1
   18bbe:	dd2f      	ble.n	18c20 <z_impl_k_mutex_lock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
   18bc0:	f000 fcd6 	bl	19570 <z_set_prio>
   18bc4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   18bc6:	e9cd 6700 	strd	r6, r7, [sp]
   18bca:	481c      	ldr	r0, [pc, #112]	; (18c3c <z_impl_k_mutex_lock+0xf8>)
   18bcc:	4622      	mov	r2, r4
   18bce:	4641      	mov	r1, r8
   18bd0:	f000 fb96 	bl	19300 <z_pend_curr>
	if (got_mutex == 0) {
   18bd4:	2800      	cmp	r0, #0
   18bd6:	d0e0      	beq.n	18b9a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   18bd8:	f04f 0340 	mov.w	r3, #64	; 0x40
   18bdc:	f3ef 8611 	mrs	r6, BASEPRI
   18be0:	f383 8811 	msr	BASEPRI, r3
   18be4:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   18be8:	6823      	ldr	r3, [r4, #0]
   18bea:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18bec:	429c      	cmp	r4, r3
   18bee:	d00a      	beq.n	18c06 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   18bf0:	b14b      	cbz	r3, 18c06 <z_impl_k_mutex_lock+0xc2>
   18bf2:	f993 300e 	ldrsb.w	r3, [r3, #14]
   18bf6:	4299      	cmp	r1, r3
   18bf8:	bfa8      	it	ge
   18bfa:	4619      	movge	r1, r3
   18bfc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   18c00:	4299      	cmp	r1, r3
   18c02:	bfb8      	it	lt
   18c04:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   18c06:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   18c08:	f990 300e 	ldrsb.w	r3, [r0, #14]
   18c0c:	4299      	cmp	r1, r3
   18c0e:	d109      	bne.n	18c24 <z_impl_k_mutex_lock+0xe0>
	if (resched) {
   18c10:	b16d      	cbz	r5, 18c2e <z_impl_k_mutex_lock+0xea>
		z_reschedule(&lock, key);
   18c12:	480a      	ldr	r0, [pc, #40]	; (18c3c <z_impl_k_mutex_lock+0xf8>)
   18c14:	4631      	mov	r1, r6
   18c16:	f000 faef 	bl	191f8 <z_reschedule>
	return -EAGAIN;
   18c1a:	f06f 000a 	mvn.w	r0, #10
   18c1e:	e7bc      	b.n	18b9a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   18c20:	2500      	movs	r5, #0
   18c22:	e7d0      	b.n	18bc6 <z_impl_k_mutex_lock+0x82>
		return z_set_prio(mutex->owner, new_prio);
   18c24:	f000 fca4 	bl	19570 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   18c28:	2800      	cmp	r0, #0
   18c2a:	d1f2      	bne.n	18c12 <z_impl_k_mutex_lock+0xce>
   18c2c:	e7f0      	b.n	18c10 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   18c2e:	f386 8811 	msr	BASEPRI, r6
   18c32:	f3bf 8f6f 	isb	sy
   18c36:	e7f0      	b.n	18c1a <z_impl_k_mutex_lock+0xd6>
   18c38:	20002590 	.word	0x20002590
   18c3c:	20003a78 	.word	0x20003a78

00018c40 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   18c40:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   18c42:	6883      	ldr	r3, [r0, #8]
{
   18c44:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   18c46:	2b00      	cmp	r3, #0
   18c48:	d036      	beq.n	18cb8 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   18c4a:	4a1e      	ldr	r2, [pc, #120]	; (18cc4 <z_impl_k_mutex_unlock+0x84>)
   18c4c:	6892      	ldr	r2, [r2, #8]
   18c4e:	4293      	cmp	r3, r2
   18c50:	d135      	bne.n	18cbe <z_impl_k_mutex_unlock+0x7e>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   18c52:	7bda      	ldrb	r2, [r3, #15]
   18c54:	3a01      	subs	r2, #1
   18c56:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   18c58:	68c3      	ldr	r3, [r0, #12]
   18c5a:	2b01      	cmp	r3, #1
   18c5c:	d905      	bls.n	18c6a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   18c5e:	3b01      	subs	r3, #1
   18c60:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   18c62:	f000 fb93 	bl	1938c <k_sched_unlock>

	return 0;
   18c66:	2000      	movs	r0, #0
}
   18c68:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   18c6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   18c6e:	f3ef 8511 	mrs	r5, BASEPRI
   18c72:	f383 8811 	msr	BASEPRI, r3
   18c76:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   18c7a:	6901      	ldr	r1, [r0, #16]
   18c7c:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   18c7e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   18c82:	4299      	cmp	r1, r3
   18c84:	d001      	beq.n	18c8a <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   18c86:	f000 fc73 	bl	19570 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   18c8a:	4620      	mov	r0, r4
   18c8c:	f007 fd0b 	bl	206a6 <z_unpend_first_thread>
	mutex->owner = new_owner;
   18c90:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   18c92:	b158      	cbz	r0, 18cac <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   18c94:	f990 200e 	ldrsb.w	r2, [r0, #14]
   18c98:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   18c9a:	2200      	movs	r2, #0
   18c9c:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   18c9e:	f007 fcd0 	bl	20642 <z_ready_thread>
		z_reschedule(&lock, key);
   18ca2:	4809      	ldr	r0, [pc, #36]	; (18cc8 <z_impl_k_mutex_unlock+0x88>)
   18ca4:	4629      	mov	r1, r5
   18ca6:	f000 faa7 	bl	191f8 <z_reschedule>
   18caa:	e7da      	b.n	18c62 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   18cac:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   18cae:	f385 8811 	msr	BASEPRI, r5
   18cb2:	f3bf 8f6f 	isb	sy
   18cb6:	e7d4      	b.n	18c62 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   18cb8:	f06f 0015 	mvn.w	r0, #21
   18cbc:	e7d4      	b.n	18c68 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   18cbe:	f04f 30ff 	mov.w	r0, #4294967295
   18cc2:	e7d1      	b.n	18c68 <z_impl_k_mutex_unlock+0x28>
   18cc4:	20002590 	.word	0x20002590
   18cc8:	20003a78 	.word	0x20003a78

00018ccc <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   18ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18cce:	4616      	mov	r6, r2
   18cd0:	461f      	mov	r7, r3
	__asm__ volatile(
   18cd2:	f04f 0340 	mov.w	r3, #64	; 0x40
   18cd6:	f3ef 8511 	mrs	r5, BASEPRI
   18cda:	f383 8811 	msr	BASEPRI, r3
   18cde:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   18ce2:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   18ce4:	b19c      	cbz	r4, 18d0e <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   18ce6:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   18ce8:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   18cea:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   18cee:	4294      	cmp	r4, r2
	list->head = node;
   18cf0:	6003      	str	r3, [r0, #0]
	list->tail = node;
   18cf2:	bf08      	it	eq
   18cf4:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   18cf6:	2101      	movs	r1, #1
   18cf8:	4620      	mov	r0, r4
   18cfa:	f007 fad0 	bl	2029e <z_queue_node_peek>
   18cfe:	4604      	mov	r4, r0
	__asm__ volatile(
   18d00:	f385 8811 	msr	BASEPRI, r5
   18d04:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   18d08:	4620      	mov	r0, r4
   18d0a:	b003      	add	sp, #12
   18d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18d0e:	ea56 0307 	orrs.w	r3, r6, r7
   18d12:	d0f5      	beq.n	18d00 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   18d14:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   18d18:	e9cd 6700 	strd	r6, r7, [sp]
   18d1c:	4629      	mov	r1, r5
   18d1e:	4610      	mov	r0, r2
   18d20:	f000 faee 	bl	19300 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   18d24:	2800      	cmp	r0, #0
   18d26:	d1ef      	bne.n	18d08 <z_impl_k_queue_get+0x3c>
   18d28:	4b01      	ldr	r3, [pc, #4]	; (18d30 <z_impl_k_queue_get+0x64>)
   18d2a:	689b      	ldr	r3, [r3, #8]
   18d2c:	695c      	ldr	r4, [r3, #20]
   18d2e:	e7eb      	b.n	18d08 <z_impl_k_queue_get+0x3c>
   18d30:	20002590 	.word	0x20002590

00018d34 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   18d34:	b538      	push	{r3, r4, r5, lr}
   18d36:	4604      	mov	r4, r0
	__asm__ volatile(
   18d38:	f04f 0340 	mov.w	r3, #64	; 0x40
   18d3c:	f3ef 8511 	mrs	r5, BASEPRI
   18d40:	f383 8811 	msr	BASEPRI, r3
   18d44:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   18d48:	f007 fcad 	bl	206a6 <z_unpend_first_thread>

	if (thread != NULL) {
   18d4c:	b148      	cbz	r0, 18d62 <z_impl_k_sem_give+0x2e>
   18d4e:	2200      	movs	r2, #0
   18d50:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   18d52:	f007 fc76 	bl	20642 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   18d56:	4629      	mov	r1, r5
   18d58:	4808      	ldr	r0, [pc, #32]	; (18d7c <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   18d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   18d5e:	f000 ba4b 	b.w	191f8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   18d62:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   18d66:	429a      	cmp	r2, r3
   18d68:	bf18      	it	ne
   18d6a:	3301      	addne	r3, #1
   18d6c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   18d6e:	2102      	movs	r1, #2
   18d70:	f104 0010 	add.w	r0, r4, #16
   18d74:	f007 fe93 	bl	20a9e <z_handle_obj_poll_events>
}
   18d78:	e7ed      	b.n	18d56 <z_impl_k_sem_give+0x22>
   18d7a:	bf00      	nop
   18d7c:	20003a78 	.word	0x20003a78

00018d80 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   18d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18d82:	4614      	mov	r4, r2
   18d84:	461d      	mov	r5, r3
   18d86:	f04f 0340 	mov.w	r3, #64	; 0x40
   18d8a:	f3ef 8111 	mrs	r1, BASEPRI
   18d8e:	f383 8811 	msr	BASEPRI, r3
   18d92:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   18d96:	6883      	ldr	r3, [r0, #8]
   18d98:	b143      	cbz	r3, 18dac <z_impl_k_sem_take+0x2c>
		sem->count--;
   18d9a:	3b01      	subs	r3, #1
   18d9c:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   18d9e:	f381 8811 	msr	BASEPRI, r1
   18da2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   18da6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   18da8:	b003      	add	sp, #12
   18daa:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18dac:	ea54 0305 	orrs.w	r3, r4, r5
   18db0:	d106      	bne.n	18dc0 <z_impl_k_sem_take+0x40>
   18db2:	f381 8811 	msr	BASEPRI, r1
   18db6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   18dba:	f06f 000f 	mvn.w	r0, #15
   18dbe:	e7f3      	b.n	18da8 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   18dc0:	4602      	mov	r2, r0
   18dc2:	e9cd 4500 	strd	r4, r5, [sp]
   18dc6:	4802      	ldr	r0, [pc, #8]	; (18dd0 <z_impl_k_sem_take+0x50>)
   18dc8:	f000 fa9a 	bl	19300 <z_pend_curr>
	return ret;
   18dcc:	e7ec      	b.n	18da8 <z_impl_k_sem_take+0x28>
   18dce:	bf00      	nop
   18dd0:	20003a78 	.word	0x20003a78

00018dd4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   18dd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   18dd6:	4b09      	ldr	r3, [pc, #36]	; (18dfc <k_sys_work_q_init+0x28>)
   18dd8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   18dda:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   18ddc:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   18dde:	9300      	str	r3, [sp, #0]
   18de0:	4907      	ldr	r1, [pc, #28]	; (18e00 <k_sys_work_q_init+0x2c>)
   18de2:	4808      	ldr	r0, [pc, #32]	; (18e04 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   18de4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   18de8:	f04f 33ff 	mov.w	r3, #4294967295
   18dec:	f44f 6200 	mov.w	r2, #2048	; 0x800
   18df0:	f000 f91c 	bl	1902c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   18df4:	4620      	mov	r0, r4
   18df6:	b004      	add	sp, #16
   18df8:	bd10      	pop	{r4, pc}
   18dfa:	bf00      	nop
   18dfc:	00021dfe 	.word	0x00021dfe
   18e00:	20006060 	.word	0x20006060
   18e04:	20001bf0 	.word	0x20001bf0

00018e08 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   18e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   18e0c:	4e4b      	ldr	r6, [pc, #300]	; (18f3c <work_queue_main+0x134>)
{
   18e0e:	b085      	sub	sp, #20
   18e10:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   18e12:	f04f 38ff 	mov.w	r8, #4294967295
   18e16:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
   18e1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   18e1e:	f3ef 8711 	mrs	r7, BASEPRI
   18e22:	f383 8811 	msr	BASEPRI, r3
   18e26:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   18e2a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   18e2e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   18e32:	b985      	cbnz	r5, 18e56 <work_queue_main+0x4e>
	*flagp &= ~BIT(bit);
   18e34:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
   18e38:	075d      	lsls	r5, r3, #29
	*flagp &= ~BIT(bit);
   18e3a:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   18e3e:	d433      	bmi.n	18ea8 <work_queue_main+0xa0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   18e40:	2300      	movs	r3, #0
   18e42:	e9cd 8900 	strd	r8, r9, [sp]
   18e46:	9302      	str	r3, [sp, #8]
   18e48:	f104 0288 	add.w	r2, r4, #136	; 0x88
   18e4c:	4639      	mov	r1, r7
   18e4e:	483c      	ldr	r0, [pc, #240]	; (18f40 <work_queue_main+0x138>)
   18e50:	f000 fcf6 	bl	19840 <z_sched_wait>
			continue;
   18e54:	e7e1      	b.n	18e1a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18e56:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   18e5a:	6829      	ldr	r1, [r5, #0]
	list->head = node;
   18e5c:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18e60:	4295      	cmp	r5, r2
   18e62:	d101      	bne.n	18e68 <work_queue_main+0x60>
	list->tail = node;
   18e64:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   18e68:	f043 0302 	orr.w	r3, r3, #2
   18e6c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   18e70:	68eb      	ldr	r3, [r5, #12]
   18e72:	f023 0304 	bic.w	r3, r3, #4
   18e76:	f043 0301 	orr.w	r3, r3, #1
   18e7a:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   18e7c:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   18e7e:	f387 8811 	msr	BASEPRI, r7
   18e82:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
   18e86:	4628      	mov	r0, r5
   18e88:	4798      	blx	r3
	__asm__ volatile(
   18e8a:	f04f 0340 	mov.w	r3, #64	; 0x40
   18e8e:	f3ef 8b11 	mrs	fp, BASEPRI
   18e92:	f383 8811 	msr	BASEPRI, r3
   18e96:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   18e9a:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18e9c:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   18e9e:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18ea2:	d40b      	bmi.n	18ebc <work_queue_main+0xb4>
	*flagp &= ~BIT(bit);
   18ea4:	60ea      	str	r2, [r5, #12]
   18ea6:	e00e      	b.n	18ec6 <work_queue_main+0xbe>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   18ea8:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   18eac:	2200      	movs	r2, #0
   18eae:	2101      	movs	r1, #1
   18eb0:	4628      	mov	r0, r5
   18eb2:	f007 fc20 	bl	206f6 <z_sched_wake>
   18eb6:	2800      	cmp	r0, #0
   18eb8:	d1f8      	bne.n	18eac <work_queue_main+0xa4>
   18eba:	e7c1      	b.n	18e40 <work_queue_main+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   18ebc:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   18ebe:	f023 0303 	bic.w	r3, r3, #3
   18ec2:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   18ec4:	b970      	cbnz	r0, 18ee4 <work_queue_main+0xdc>
	*flagp &= ~BIT(bit);
   18ec6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   18eca:	f023 0302 	bic.w	r3, r3, #2
   18ece:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   18ed2:	f38b 8811 	msr	BASEPRI, fp
   18ed6:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   18eda:	05d8      	lsls	r0, r3, #23
   18edc:	d49d      	bmi.n	18e1a <work_queue_main+0x12>
	z_impl_k_yield();
   18ede:	f000 fb9f 	bl	19620 <z_impl_k_yield>
}
   18ee2:	e79a      	b.n	18e1a <work_queue_main+0x12>
	return node->next;
   18ee4:	6807      	ldr	r7, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   18ee6:	f04f 0a00 	mov.w	sl, #0
   18eea:	2f00      	cmp	r7, #0
   18eec:	bf38      	it	cc
   18eee:	2700      	movcc	r7, #0
	parent->next = child;
   18ef0:	4653      	mov	r3, sl
		if (wc->work == work) {
   18ef2:	6842      	ldr	r2, [r0, #4]
   18ef4:	4295      	cmp	r5, r2
   18ef6:	4601      	mov	r1, r0
   18ef8:	d10e      	bne.n	18f18 <work_queue_main+0x110>
Z_GENLIST_REMOVE(slist, snode)
   18efa:	6801      	ldr	r1, [r0, #0]
   18efc:	f1ba 0f00 	cmp.w	sl, #0
   18f00:	d114      	bne.n	18f2c <work_queue_main+0x124>
   18f02:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   18f04:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   18f06:	4290      	cmp	r0, r2
   18f08:	d100      	bne.n	18f0c <work_queue_main+0x104>
	list->tail = node;
   18f0a:	6071      	str	r1, [r6, #4]
	parent->next = child;
   18f0c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   18f10:	f7ff ff10 	bl	18d34 <z_impl_k_sem_give>
}
   18f14:	4651      	mov	r1, sl
   18f16:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   18f18:	2f00      	cmp	r7, #0
   18f1a:	d0d4      	beq.n	18ec6 <work_queue_main+0xbe>
	return node->next;
   18f1c:	683a      	ldr	r2, [r7, #0]
   18f1e:	2a00      	cmp	r2, #0
   18f20:	bf38      	it	cc
   18f22:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   18f24:	4638      	mov	r0, r7
   18f26:	468a      	mov	sl, r1
   18f28:	4617      	mov	r7, r2
   18f2a:	e7e2      	b.n	18ef2 <work_queue_main+0xea>
	parent->next = child;
   18f2c:	f8ca 1000 	str.w	r1, [sl]
Z_GENLIST_REMOVE(slist, snode)
   18f30:	6872      	ldr	r2, [r6, #4]
   18f32:	4290      	cmp	r0, r2
	list->tail = node;
   18f34:	bf08      	it	eq
   18f36:	f8c6 a004 	streq.w	sl, [r6, #4]
}
   18f3a:	e7e7      	b.n	18f0c <work_queue_main+0x104>
   18f3c:	200025c0 	.word	0x200025c0
   18f40:	20003a78 	.word	0x20003a78

00018f44 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   18f44:	68c3      	ldr	r3, [r0, #12]
{
   18f46:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   18f48:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   18f4c:	079b      	lsls	r3, r3, #30
{
   18f4e:	4605      	mov	r5, r0
   18f50:	460c      	mov	r4, r1
	if (ret) {
   18f52:	d50d      	bpl.n	18f70 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   18f54:	2201      	movs	r2, #1
   18f56:	2100      	movs	r1, #0
   18f58:	f104 0008 	add.w	r0, r4, #8
   18f5c:	f007 fa08 	bl	20370 <z_impl_k_sem_init>
	parent->next = child;
   18f60:	2300      	movs	r3, #0
   18f62:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   18f64:	4b05      	ldr	r3, [pc, #20]	; (18f7c <cancel_sync_locked+0x38>)
	canceler->work = work;
   18f66:	6065      	str	r5, [r4, #4]
   18f68:	685a      	ldr	r2, [r3, #4]
   18f6a:	b91a      	cbnz	r2, 18f74 <cancel_sync_locked+0x30>
	list->head = node;
   18f6c:	e9c3 4400 	strd	r4, r4, [r3]
}
   18f70:	4630      	mov	r0, r6
   18f72:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   18f74:	6014      	str	r4, [r2, #0]
	list->tail = node;
   18f76:	605c      	str	r4, [r3, #4]
}
   18f78:	e7fa      	b.n	18f70 <cancel_sync_locked+0x2c>
   18f7a:	bf00      	nop
   18f7c:	200025c0 	.word	0x200025c0

00018f80 <submit_to_queue_locked>:
{
   18f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18f82:	68c3      	ldr	r3, [r0, #12]
   18f84:	079a      	lsls	r2, r3, #30
{
   18f86:	4604      	mov	r4, r0
   18f88:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18f8a:	f3c3 0540 	ubfx	r5, r3, #1, #1
   18f8e:	d41f      	bmi.n	18fd0 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   18f90:	075f      	lsls	r7, r3, #29
   18f92:	d41f      	bmi.n	18fd4 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   18f94:	680a      	ldr	r2, [r1, #0]
   18f96:	b90a      	cbnz	r2, 18f9c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   18f98:	6882      	ldr	r2, [r0, #8]
   18f9a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   18f9c:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   18f9e:	bf44      	itt	mi
   18fa0:	68a3      	ldrmi	r3, [r4, #8]
   18fa2:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   18fa4:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   18fa6:	bf4c      	ite	mi
   18fa8:	2502      	movmi	r5, #2
		ret = 1;
   18faa:	2501      	movpl	r5, #1
	if (queue == NULL) {
   18fac:	b37f      	cbz	r7, 1900e <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   18fae:	4b1b      	ldr	r3, [pc, #108]	; (1901c <submit_to_queue_locked+0x9c>)
   18fb0:	689b      	ldr	r3, [r3, #8]
   18fb2:	42bb      	cmp	r3, r7
   18fb4:	d111      	bne.n	18fda <submit_to_queue_locked+0x5a>
   18fb6:	f007 f8f5 	bl	201a4 <k_is_in_isr>
   18fba:	f080 0001 	eor.w	r0, r0, #1
   18fbe:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   18fc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   18fc4:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   18fc6:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   18fca:	d523      	bpl.n	19014 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   18fcc:	b13a      	cbz	r2, 18fde <submit_to_queue_locked+0x5e>
   18fce:	b940      	cbnz	r0, 18fe2 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   18fd0:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   18fd4:	2300      	movs	r3, #0
   18fd6:	6033      	str	r3, [r6, #0]
	return ret;
   18fd8:	e013      	b.n	19002 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   18fda:	2000      	movs	r0, #0
   18fdc:	e7f0      	b.n	18fc0 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   18fde:	071b      	lsls	r3, r3, #28
   18fe0:	d4f6      	bmi.n	18fd0 <submit_to_queue_locked+0x50>
	parent->next = child;
   18fe2:	2300      	movs	r3, #0
   18fe4:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   18fe6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   18fea:	b963      	cbnz	r3, 19006 <submit_to_queue_locked+0x86>
	list->head = node;
   18fec:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   18ff0:	4638      	mov	r0, r7
   18ff2:	f007 f9cd 	bl	20390 <notify_queue_locked>
	*flagp |= BIT(bit);
   18ff6:	68e3      	ldr	r3, [r4, #12]
   18ff8:	f043 0304 	orr.w	r3, r3, #4
   18ffc:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   18ffe:	6833      	ldr	r3, [r6, #0]
   19000:	60a3      	str	r3, [r4, #8]
}
   19002:	4628      	mov	r0, r5
   19004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   19006:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19008:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   1900c:	e7f0      	b.n	18ff0 <submit_to_queue_locked+0x70>
		return -EINVAL;
   1900e:	f06f 0515 	mvn.w	r5, #21
   19012:	e7df      	b.n	18fd4 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   19014:	f06f 0512 	mvn.w	r5, #18
   19018:	e7dc      	b.n	18fd4 <submit_to_queue_locked+0x54>
   1901a:	bf00      	nop
   1901c:	20002590 	.word	0x20002590

00019020 <k_work_submit>:
{
   19020:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   19022:	4801      	ldr	r0, [pc, #4]	; (19028 <k_work_submit+0x8>)
   19024:	f007 ba24 	b.w	20470 <k_work_submit_to_queue>
   19028:	20001bf0 	.word	0x20001bf0

0001902c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1902c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1902e:	b089      	sub	sp, #36	; 0x24
   19030:	4604      	mov	r4, r0
	list->head = NULL;
   19032:	2000      	movs	r0, #0
	list->tail = NULL;
   19034:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   19038:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1903a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1903e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   19042:	f104 0090 	add.w	r0, r4, #144	; 0x90
   19046:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1904a:	b31d      	cbz	r5, 19094 <k_work_queue_start+0x68>
   1904c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1904e:	2800      	cmp	r0, #0
   19050:	f240 1001 	movw	r0, #257	; 0x101
   19054:	bf08      	it	eq
   19056:	2001      	moveq	r0, #1
	*flagp = flags;
   19058:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1905c:	2000      	movs	r0, #0
   1905e:	f04f 36ff 	mov.w	r6, #4294967295
   19062:	f04f 37ff 	mov.w	r7, #4294967295
   19066:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1906a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1906e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   19072:	4b09      	ldr	r3, [pc, #36]	; (19098 <k_work_queue_start+0x6c>)
   19074:	9400      	str	r4, [sp, #0]
   19076:	4620      	mov	r0, r4
   19078:	f7ff fcc4 	bl	18a04 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1907c:	b125      	cbz	r5, 19088 <k_work_queue_start+0x5c>
   1907e:	6829      	ldr	r1, [r5, #0]
   19080:	b111      	cbz	r1, 19088 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   19082:	4620      	mov	r0, r4
   19084:	f007 f894 	bl	201b0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   19088:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1908a:	b009      	add	sp, #36	; 0x24
   1908c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   19090:	f007 b891 	b.w	201b6 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   19094:	2001      	movs	r0, #1
   19096:	e7df      	b.n	19058 <k_work_queue_start+0x2c>
   19098:	00018e09 	.word	0x00018e09

0001909c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1909c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1909e:	4614      	mov	r4, r2
   190a0:	9001      	str	r0, [sp, #4]
   190a2:	461d      	mov	r5, r3
   190a4:	4608      	mov	r0, r1
	__asm__ volatile(
   190a6:	f04f 0140 	mov.w	r1, #64	; 0x40
   190aa:	f3ef 8611 	mrs	r6, BASEPRI
   190ae:	f381 8811 	msr	BASEPRI, r1
   190b2:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   190b6:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   190b8:	f011 0f0e 	tst.w	r1, #14
   190bc:	d115      	bne.n	190ea <k_work_schedule_for_queue+0x4e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   190be:	432c      	orrs	r4, r5
   190c0:	d108      	bne.n	190d4 <k_work_schedule_for_queue+0x38>
		return submit_to_queue_locked(work, queuep);
   190c2:	a901      	add	r1, sp, #4
   190c4:	f7ff ff5c 	bl	18f80 <submit_to_queue_locked>
	__asm__ volatile(
   190c8:	f386 8811 	msr	BASEPRI, r6
   190cc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   190d0:	b002      	add	sp, #8
   190d2:	bd70      	pop	{r4, r5, r6, pc}
	*flagp |= BIT(bit);
   190d4:	f041 0108 	orr.w	r1, r1, #8
   190d8:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   190da:	9901      	ldr	r1, [sp, #4]
   190dc:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   190de:	3010      	adds	r0, #16
   190e0:	4903      	ldr	r1, [pc, #12]	; (190f0 <k_work_schedule_for_queue+0x54>)
   190e2:	f000 fc29 	bl	19938 <z_add_timeout>
	return ret;
   190e6:	2001      	movs	r0, #1
   190e8:	e7ee      	b.n	190c8 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   190ea:	2000      	movs	r0, #0
   190ec:	e7ec      	b.n	190c8 <k_work_schedule_for_queue+0x2c>
   190ee:	bf00      	nop
   190f0:	00020421 	.word	0x00020421

000190f4 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   190f4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   190f6:	4801      	ldr	r0, [pc, #4]	; (190fc <k_work_schedule+0x8>)
   190f8:	f7ff bfd0 	b.w	1909c <k_work_schedule_for_queue>
   190fc:	20001bf0 	.word	0x20001bf0

00019100 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   19100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19102:	460c      	mov	r4, r1
   19104:	9001      	str	r0, [sp, #4]
   19106:	4616      	mov	r6, r2
   19108:	461f      	mov	r7, r3
	__asm__ volatile(
   1910a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1910e:	f3ef 8511 	mrs	r5, BASEPRI
   19112:	f383 8811 	msr	BASEPRI, r3
   19116:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1911a:	4608      	mov	r0, r1
   1911c:	f007 f93f 	bl	2039e <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19120:	ea56 0307 	orrs.w	r3, r6, r7
   19124:	d109      	bne.n	1913a <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   19126:	a901      	add	r1, sp, #4
   19128:	4620      	mov	r0, r4
   1912a:	f7ff ff29 	bl	18f80 <submit_to_queue_locked>
	__asm__ volatile(
   1912e:	f385 8811 	msr	BASEPRI, r5
   19132:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   19136:	b003      	add	sp, #12
   19138:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1913a:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1913c:	4906      	ldr	r1, [pc, #24]	; (19158 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1913e:	f043 0308 	orr.w	r3, r3, #8
   19142:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   19144:	9b01      	ldr	r3, [sp, #4]
   19146:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   19148:	f104 0010 	add.w	r0, r4, #16
   1914c:	4632      	mov	r2, r6
   1914e:	463b      	mov	r3, r7
   19150:	f000 fbf2 	bl	19938 <z_add_timeout>
	return ret;
   19154:	2001      	movs	r0, #1
   19156:	e7ea      	b.n	1912e <k_work_reschedule_for_queue+0x2e>
   19158:	00020421 	.word	0x00020421

0001915c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1915c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1915e:	4801      	ldr	r0, [pc, #4]	; (19164 <k_work_reschedule+0x8>)
   19160:	f7ff bfce 	b.w	19100 <k_work_reschedule_for_queue>
   19164:	20001bf0 	.word	0x20001bf0

00019168 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   19168:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1916a:	4c08      	ldr	r4, [pc, #32]	; (1918c <z_reset_time_slice+0x24>)
   1916c:	6823      	ldr	r3, [r4, #0]
   1916e:	b15b      	cbz	r3, 19188 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   19170:	f7f9 f846 	bl	12200 <sys_clock_elapsed>
   19174:	4603      	mov	r3, r0
   19176:	6820      	ldr	r0, [r4, #0]
   19178:	4a05      	ldr	r2, [pc, #20]	; (19190 <z_reset_time_slice+0x28>)
   1917a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1917c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   19180:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   19182:	2100      	movs	r1, #0
   19184:	f007 bafa 	b.w	2077c <z_set_timeout_expiry>
}
   19188:	bd10      	pop	{r4, pc}
   1918a:	bf00      	nop
   1918c:	200025d0 	.word	0x200025d0
   19190:	20002590 	.word	0x20002590

00019194 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   19194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19196:	4604      	mov	r4, r0
   19198:	460d      	mov	r5, r1
	__asm__ volatile(
   1919a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1919e:	f3ef 8611 	mrs	r6, BASEPRI
   191a2:	f383 8811 	msr	BASEPRI, r3
   191a6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   191aa:	4b10      	ldr	r3, [pc, #64]	; (191ec <k_sched_time_slice_set+0x58>)
   191ac:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   191ae:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   191b2:	f240 30e7 	movw	r0, #999	; 0x3e7
   191b6:	2100      	movs	r1, #0
   191b8:	611a      	str	r2, [r3, #16]
   191ba:	fbe7 0104 	umlal	r0, r1, r7, r4
   191be:	2300      	movs	r3, #0
   191c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   191c4:	f7e7 fe38 	bl	e38 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   191c8:	2c00      	cmp	r4, #0
   191ca:	4b09      	ldr	r3, [pc, #36]	; (191f0 <k_sched_time_slice_set+0x5c>)
   191cc:	dc09      	bgt.n	191e2 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   191ce:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   191d0:	4b08      	ldr	r3, [pc, #32]	; (191f4 <k_sched_time_slice_set+0x60>)
   191d2:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   191d4:	f7ff ffc8 	bl	19168 <z_reset_time_slice>
	__asm__ volatile(
   191d8:	f386 8811 	msr	BASEPRI, r6
   191dc:	f3bf 8f6f 	isb	sy
	}
}
   191e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   191e2:	2802      	cmp	r0, #2
   191e4:	bfb8      	it	lt
   191e6:	2002      	movlt	r0, #2
   191e8:	e7f1      	b.n	191ce <k_sched_time_slice_set+0x3a>
   191ea:	bf00      	nop
   191ec:	20002590 	.word	0x20002590
   191f0:	200025d0 	.word	0x200025d0
   191f4:	200025cc 	.word	0x200025cc

000191f8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   191f8:	b949      	cbnz	r1, 1920e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   191fa:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   191fe:	b930      	cbnz	r0, 1920e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   19200:	4b05      	ldr	r3, [pc, #20]	; (19218 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   19202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   19204:	689b      	ldr	r3, [r3, #8]
   19206:	429a      	cmp	r2, r3
   19208:	d001      	beq.n	1920e <z_reschedule+0x16>
	ret = arch_swap(key);
   1920a:	f7f9 b98d 	b.w	12528 <arch_swap>
   1920e:	f381 8811 	msr	BASEPRI, r1
   19212:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   19216:	4770      	bx	lr
   19218:	20002590 	.word	0x20002590

0001921c <k_sched_lock>:
	__asm__ volatile(
   1921c:	f04f 0340 	mov.w	r3, #64	; 0x40
   19220:	f3ef 8111 	mrs	r1, BASEPRI
   19224:	f383 8811 	msr	BASEPRI, r3
   19228:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1922c:	4b04      	ldr	r3, [pc, #16]	; (19240 <k_sched_lock+0x24>)
   1922e:	689a      	ldr	r2, [r3, #8]
   19230:	7bd3      	ldrb	r3, [r2, #15]
   19232:	3b01      	subs	r3, #1
   19234:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   19236:	f381 8811 	msr	BASEPRI, r1
   1923a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1923e:	4770      	bx	lr
   19240:	20002590 	.word	0x20002590

00019244 <update_cache>:
{
   19244:	b538      	push	{r3, r4, r5, lr}
   19246:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   19248:	480c      	ldr	r0, [pc, #48]	; (1927c <update_cache+0x38>)
   1924a:	4d0d      	ldr	r5, [pc, #52]	; (19280 <update_cache+0x3c>)
   1924c:	f007 f9c2 	bl	205d4 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   19250:	4604      	mov	r4, r0
   19252:	b900      	cbnz	r0, 19256 <update_cache+0x12>
   19254:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   19256:	68ab      	ldr	r3, [r5, #8]
   19258:	b94a      	cbnz	r2, 1926e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   1925a:	7b5a      	ldrb	r2, [r3, #13]
   1925c:	06d2      	lsls	r2, r2, #27
   1925e:	d106      	bne.n	1926e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   19260:	69a2      	ldr	r2, [r4, #24]
   19262:	b922      	cbnz	r2, 1926e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   19264:	89da      	ldrh	r2, [r3, #14]
   19266:	2a7f      	cmp	r2, #127	; 0x7f
   19268:	d901      	bls.n	1926e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   1926a:	626b      	str	r3, [r5, #36]	; 0x24
}
   1926c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1926e:	429c      	cmp	r4, r3
   19270:	d001      	beq.n	19276 <update_cache+0x32>
			z_reset_time_slice();
   19272:	f7ff ff79 	bl	19168 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   19276:	626c      	str	r4, [r5, #36]	; 0x24
}
   19278:	e7f8      	b.n	1926c <update_cache+0x28>
   1927a:	bf00      	nop
   1927c:	200025b8 	.word	0x200025b8
   19280:	20002590 	.word	0x20002590

00019284 <unready_thread>:
{
   19284:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   19286:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1928a:	7b43      	ldrb	r3, [r0, #13]
   1928c:	2a00      	cmp	r2, #0
{
   1928e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   19290:	da04      	bge.n	1929c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19296:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   19298:	f007 f957 	bl	2054a <sys_dlist_remove>
	update_cache(thread == _current);
   1929c:	4b04      	ldr	r3, [pc, #16]	; (192b0 <unready_thread+0x2c>)
   1929e:	6898      	ldr	r0, [r3, #8]
   192a0:	1a43      	subs	r3, r0, r1
   192a2:	4258      	negs	r0, r3
   192a4:	4158      	adcs	r0, r3
}
   192a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   192aa:	f7ff bfcb 	b.w	19244 <update_cache>
   192ae:	bf00      	nop
   192b0:	20002590 	.word	0x20002590

000192b4 <pend>:
{
   192b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   192b8:	4606      	mov	r6, r0
   192ba:	4614      	mov	r4, r2
   192bc:	461d      	mov	r5, r3
	__asm__ volatile(
   192be:	f04f 0340 	mov.w	r3, #64	; 0x40
   192c2:	f3ef 8711 	mrs	r7, BASEPRI
   192c6:	f383 8811 	msr	BASEPRI, r3
   192ca:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   192ce:	f007 f98b 	bl	205e8 <add_to_waitq_locked>
	__asm__ volatile(
   192d2:	f387 8811 	msr	BASEPRI, r7
   192d6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   192da:	1c6b      	adds	r3, r5, #1
   192dc:	bf08      	it	eq
   192de:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   192e2:	d008      	beq.n	192f6 <pend+0x42>
   192e4:	4622      	mov	r2, r4
   192e6:	462b      	mov	r3, r5
   192e8:	f106 0018 	add.w	r0, r6, #24
   192ec:	4903      	ldr	r1, [pc, #12]	; (192fc <pend+0x48>)
}
   192ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   192f2:	f000 bb21 	b.w	19938 <z_add_timeout>
   192f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   192fa:	bf00      	nop
   192fc:	00020663 	.word	0x00020663

00019300 <z_pend_curr>:
{
   19300:	b510      	push	{r4, lr}
	pending_current = _current;
   19302:	4b07      	ldr	r3, [pc, #28]	; (19320 <z_pend_curr+0x20>)
   19304:	6898      	ldr	r0, [r3, #8]
   19306:	4b07      	ldr	r3, [pc, #28]	; (19324 <z_pend_curr+0x24>)
{
   19308:	460c      	mov	r4, r1
	pending_current = _current;
   1930a:	6018      	str	r0, [r3, #0]
{
   1930c:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1930e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   19312:	f7ff ffcf 	bl	192b4 <pend>
   19316:	4620      	mov	r0, r4
}
   19318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1931c:	f7f9 b904 	b.w	12528 <arch_swap>
   19320:	20002590 	.word	0x20002590
   19324:	200025c8 	.word	0x200025c8

00019328 <z_impl_k_thread_suspend>:
{
   19328:	b570      	push	{r4, r5, r6, lr}
   1932a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1932c:	3018      	adds	r0, #24
   1932e:	f007 f9ff 	bl	20730 <z_abort_timeout>
	__asm__ volatile(
   19332:	f04f 0340 	mov.w	r3, #64	; 0x40
   19336:	f3ef 8611 	mrs	r6, BASEPRI
   1933a:	f383 8811 	msr	BASEPRI, r3
   1933e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   19342:	f994 200d 	ldrsb.w	r2, [r4, #13]
   19346:	7b63      	ldrb	r3, [r4, #13]
   19348:	2a00      	cmp	r2, #0
   1934a:	da05      	bge.n	19358 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1934c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19350:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   19352:	4620      	mov	r0, r4
   19354:	f007 f8f9 	bl	2054a <sys_dlist_remove>
		update_cache(thread == _current);
   19358:	4d0b      	ldr	r5, [pc, #44]	; (19388 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1935a:	7b63      	ldrb	r3, [r4, #13]
   1935c:	68a8      	ldr	r0, [r5, #8]
   1935e:	f043 0310 	orr.w	r3, r3, #16
   19362:	7363      	strb	r3, [r4, #13]
   19364:	1b03      	subs	r3, r0, r4
   19366:	4258      	negs	r0, r3
   19368:	4158      	adcs	r0, r3
   1936a:	f7ff ff6b 	bl	19244 <update_cache>
	__asm__ volatile(
   1936e:	f386 8811 	msr	BASEPRI, r6
   19372:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   19376:	68ab      	ldr	r3, [r5, #8]
   19378:	42a3      	cmp	r3, r4
   1937a:	d103      	bne.n	19384 <z_impl_k_thread_suspend+0x5c>
}
   1937c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   19380:	f007 b91e 	b.w	205c0 <z_reschedule_unlocked>
}
   19384:	bd70      	pop	{r4, r5, r6, pc}
   19386:	bf00      	nop
   19388:	20002590 	.word	0x20002590

0001938c <k_sched_unlock>:
{
   1938c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1938e:	f04f 0340 	mov.w	r3, #64	; 0x40
   19392:	f3ef 8411 	mrs	r4, BASEPRI
   19396:	f383 8811 	msr	BASEPRI, r3
   1939a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1939e:	4b08      	ldr	r3, [pc, #32]	; (193c0 <k_sched_unlock+0x34>)
   193a0:	689a      	ldr	r2, [r3, #8]
   193a2:	7bd3      	ldrb	r3, [r2, #15]
   193a4:	3301      	adds	r3, #1
   193a6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   193a8:	2000      	movs	r0, #0
   193aa:	f7ff ff4b 	bl	19244 <update_cache>
	__asm__ volatile(
   193ae:	f384 8811 	msr	BASEPRI, r4
   193b2:	f3bf 8f6f 	isb	sy
}
   193b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   193ba:	f007 b901 	b.w	205c0 <z_reschedule_unlocked>
   193be:	bf00      	nop
   193c0:	20002590 	.word	0x20002590

000193c4 <move_thread_to_end_of_prio_q>:
{
   193c4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   193c6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   193ca:	7b43      	ldrb	r3, [r0, #13]
   193cc:	2a00      	cmp	r2, #0
{
   193ce:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   193d0:	da04      	bge.n	193dc <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   193d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   193d6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   193d8:	f007 f8b7 	bl	2054a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   193dc:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   193de:	4a17      	ldr	r2, [pc, #92]	; (1943c <move_thread_to_end_of_prio_q+0x78>)
   193e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   193e4:	4610      	mov	r0, r2
   193e6:	734b      	strb	r3, [r1, #13]
   193e8:	f850 3f28 	ldr.w	r3, [r0, #40]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   193ec:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   193ee:	4283      	cmp	r3, r0
   193f0:	bf08      	it	eq
   193f2:	2300      	moveq	r3, #0
   193f4:	2b00      	cmp	r3, #0
   193f6:	bf38      	it	cc
   193f8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   193fa:	b1cb      	cbz	r3, 19430 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
   193fc:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   19400:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   19404:	42a6      	cmp	r6, r4
   19406:	d00f      	beq.n	19428 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
   19408:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1940a:	2c00      	cmp	r4, #0
   1940c:	dd0c      	ble.n	19428 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1940e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   19410:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   19414:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   19416:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   19418:	6890      	ldr	r0, [r2, #8]
   1941a:	1a43      	subs	r3, r0, r1
   1941c:	4258      	negs	r0, r3
}
   1941e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   19422:	4158      	adcs	r0, r3
   19424:	f7ff bf0e 	b.w	19244 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   19428:	42ab      	cmp	r3, r5
   1942a:	d001      	beq.n	19430 <move_thread_to_end_of_prio_q+0x6c>
   1942c:	681b      	ldr	r3, [r3, #0]
   1942e:	e7e4      	b.n	193fa <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
   19430:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
   19434:	6029      	str	r1, [r5, #0]
	list->tail = node;
   19436:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   19438:	e7ee      	b.n	19418 <move_thread_to_end_of_prio_q+0x54>
   1943a:	bf00      	nop
   1943c:	20002590 	.word	0x20002590

00019440 <z_time_slice>:
{
   19440:	b570      	push	{r4, r5, r6, lr}
   19442:	4601      	mov	r1, r0
	__asm__ volatile(
   19444:	f04f 0340 	mov.w	r3, #64	; 0x40
   19448:	f3ef 8411 	mrs	r4, BASEPRI
   1944c:	f383 8811 	msr	BASEPRI, r3
   19450:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   19454:	4b16      	ldr	r3, [pc, #88]	; (194b0 <z_time_slice+0x70>)
   19456:	4a17      	ldr	r2, [pc, #92]	; (194b4 <z_time_slice+0x74>)
   19458:	6898      	ldr	r0, [r3, #8]
   1945a:	6815      	ldr	r5, [r2, #0]
   1945c:	42a8      	cmp	r0, r5
   1945e:	461d      	mov	r5, r3
   19460:	d106      	bne.n	19470 <z_time_slice+0x30>
			z_reset_time_slice();
   19462:	f7ff fe81 	bl	19168 <z_reset_time_slice>
	__asm__ volatile(
   19466:	f384 8811 	msr	BASEPRI, r4
   1946a:	f3bf 8f6f 	isb	sy
}
   1946e:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   19470:	2600      	movs	r6, #0
   19472:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   19474:	4a10      	ldr	r2, [pc, #64]	; (194b8 <z_time_slice+0x78>)
   19476:	6812      	ldr	r2, [r2, #0]
   19478:	b1ba      	cbz	r2, 194aa <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1947a:	89c2      	ldrh	r2, [r0, #14]
   1947c:	2a7f      	cmp	r2, #127	; 0x7f
   1947e:	d814      	bhi.n	194aa <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   19480:	7b42      	ldrb	r2, [r0, #13]
   19482:	06d2      	lsls	r2, r2, #27
   19484:	d111      	bne.n	194aa <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   19486:	4a0d      	ldr	r2, [pc, #52]	; (194bc <z_time_slice+0x7c>)
   19488:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1948c:	6812      	ldr	r2, [r2, #0]
   1948e:	4296      	cmp	r6, r2
   19490:	db0b      	blt.n	194aa <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   19492:	4a0b      	ldr	r2, [pc, #44]	; (194c0 <z_time_slice+0x80>)
   19494:	4290      	cmp	r0, r2
   19496:	d008      	beq.n	194aa <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   19498:	691a      	ldr	r2, [r3, #16]
   1949a:	428a      	cmp	r2, r1
   1949c:	dc02      	bgt.n	194a4 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1949e:	f7ff ff91 	bl	193c4 <move_thread_to_end_of_prio_q>
   194a2:	e7de      	b.n	19462 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   194a4:	1a52      	subs	r2, r2, r1
   194a6:	611a      	str	r2, [r3, #16]
   194a8:	e7dd      	b.n	19466 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   194aa:	2300      	movs	r3, #0
   194ac:	612b      	str	r3, [r5, #16]
   194ae:	e7da      	b.n	19466 <z_time_slice+0x26>
   194b0:	20002590 	.word	0x20002590
   194b4:	200025c8 	.word	0x200025c8
   194b8:	200025d0 	.word	0x200025d0
   194bc:	200025cc 	.word	0x200025cc
   194c0:	20001af0 	.word	0x20001af0

000194c4 <ready_thread>:
{
   194c4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   194c6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   194ca:	7b42      	ldrb	r2, [r0, #13]
   194cc:	2b00      	cmp	r3, #0
   194ce:	db2d      	blt.n	1952c <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   194d0:	06d3      	lsls	r3, r2, #27
   194d2:	d12b      	bne.n	1952c <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
   194d4:	6983      	ldr	r3, [r0, #24]
   194d6:	bb4b      	cbnz	r3, 1952c <ready_thread+0x68>
	return list->head == list;
   194d8:	4915      	ldr	r1, [pc, #84]	; (19530 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
   194da:	f062 027f 	orn	r2, r2, #127	; 0x7f
   194de:	7342      	strb	r2, [r0, #13]
   194e0:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   194e2:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	return list->head == list;
   194e4:	f852 4f28 	ldr.w	r4, [r2, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   194e8:	4294      	cmp	r4, r2
   194ea:	bf18      	it	ne
   194ec:	4623      	movne	r3, r4
   194ee:	2b00      	cmp	r3, #0
   194f0:	bf38      	it	cc
   194f2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   194f4:	b1ab      	cbz	r3, 19522 <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
   194f6:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   194fa:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   194fe:	42a6      	cmp	r6, r4
   19500:	d00b      	beq.n	1951a <ready_thread+0x56>
		return b2 - b1;
   19502:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   19504:	2c00      	cmp	r4, #0
   19506:	dd08      	ble.n	1951a <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
   19508:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1950a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1950e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   19510:	6058      	str	r0, [r3, #4]
}
   19512:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   19514:	2000      	movs	r0, #0
   19516:	f7ff be95 	b.w	19244 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1951a:	42ab      	cmp	r3, r5
   1951c:	d001      	beq.n	19522 <ready_thread+0x5e>
   1951e:	681b      	ldr	r3, [r3, #0]
   19520:	e7e8      	b.n	194f4 <ready_thread+0x30>
	node->prev = tail;
   19522:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
   19526:	6028      	str	r0, [r5, #0]
	list->tail = node;
   19528:	62c8      	str	r0, [r1, #44]	; 0x2c
}
   1952a:	e7f2      	b.n	19512 <ready_thread+0x4e>
}
   1952c:	bc70      	pop	{r4, r5, r6}
   1952e:	4770      	bx	lr
   19530:	20002590 	.word	0x20002590

00019534 <z_sched_start>:
{
   19534:	b510      	push	{r4, lr}
	__asm__ volatile(
   19536:	f04f 0240 	mov.w	r2, #64	; 0x40
   1953a:	f3ef 8411 	mrs	r4, BASEPRI
   1953e:	f382 8811 	msr	BASEPRI, r2
   19542:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   19546:	7b42      	ldrb	r2, [r0, #13]
   19548:	0751      	lsls	r1, r2, #29
   1954a:	d404      	bmi.n	19556 <z_sched_start+0x22>
	__asm__ volatile(
   1954c:	f384 8811 	msr	BASEPRI, r4
   19550:	f3bf 8f6f 	isb	sy
}
   19554:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   19556:	f022 0204 	bic.w	r2, r2, #4
   1955a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1955c:	f7ff ffb2 	bl	194c4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   19560:	4621      	mov	r1, r4
   19562:	4802      	ldr	r0, [pc, #8]	; (1956c <z_sched_start+0x38>)
}
   19564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   19568:	f7ff be46 	b.w	191f8 <z_reschedule>
   1956c:	20003a78 	.word	0x20003a78

00019570 <z_set_prio>:
{
   19570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19572:	4604      	mov	r4, r0
	__asm__ volatile(
   19574:	f04f 0340 	mov.w	r3, #64	; 0x40
   19578:	f3ef 8611 	mrs	r6, BASEPRI
   1957c:	f383 8811 	msr	BASEPRI, r3
   19580:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   19584:	7b43      	ldrb	r3, [r0, #13]
   19586:	06da      	lsls	r2, r3, #27
   19588:	b249      	sxtb	r1, r1
   1958a:	d138      	bne.n	195fe <z_set_prio+0x8e>
   1958c:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1958e:	2d00      	cmp	r5, #0
   19590:	d135      	bne.n	195fe <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19596:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   19598:	f006 ffd7 	bl	2054a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1959c:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   1959e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   195a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   195a4:	7343      	strb	r3, [r0, #13]
	return list->head == list;
   195a6:	4817      	ldr	r0, [pc, #92]	; (19604 <z_set_prio+0x94>)
   195a8:	4603      	mov	r3, r0
   195aa:	f853 7f28 	ldr.w	r7, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   195ae:	429f      	cmp	r7, r3
   195b0:	bf18      	it	ne
   195b2:	463d      	movne	r5, r7
   195b4:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   195b6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   195b8:	461a      	mov	r2, r3
   195ba:	462b      	mov	r3, r5
   195bc:	bf38      	it	cc
   195be:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   195c0:	b1c3      	cbz	r3, 195f4 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
   195c2:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   195c6:	42a9      	cmp	r1, r5
   195c8:	d010      	beq.n	195ec <z_set_prio+0x7c>
		return b2 - b1;
   195ca:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   195cc:	2d00      	cmp	r5, #0
   195ce:	dd0d      	ble.n	195ec <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
   195d0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   195d2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   195d6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   195d8:	605c      	str	r4, [r3, #4]
			update_cache(1);
   195da:	2001      	movs	r0, #1
   195dc:	f7ff fe32 	bl	19244 <update_cache>
   195e0:	2001      	movs	r0, #1
	__asm__ volatile(
   195e2:	f386 8811 	msr	BASEPRI, r6
   195e6:	f3bf 8f6f 	isb	sy
}
   195ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   195ec:	42bb      	cmp	r3, r7
   195ee:	d001      	beq.n	195f4 <z_set_prio+0x84>
   195f0:	681b      	ldr	r3, [r3, #0]
   195f2:	e7e5      	b.n	195c0 <z_set_prio+0x50>
	node->prev = tail;
   195f4:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
   195f8:	603c      	str	r4, [r7, #0]
	list->tail = node;
   195fa:	62c4      	str	r4, [r0, #44]	; 0x2c
}
   195fc:	e7ed      	b.n	195da <z_set_prio+0x6a>
			thread->base.prio = prio;
   195fe:	73a1      	strb	r1, [r4, #14]
   19600:	2000      	movs	r0, #0
   19602:	e7ee      	b.n	195e2 <z_set_prio+0x72>
   19604:	20002590 	.word	0x20002590

00019608 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   19608:	4b04      	ldr	r3, [pc, #16]	; (1961c <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1960a:	2100      	movs	r1, #0
   1960c:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   19610:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   19614:	4608      	mov	r0, r1
   19616:	f7ff bdbd 	b.w	19194 <k_sched_time_slice_set>
   1961a:	bf00      	nop
   1961c:	20002590 	.word	0x20002590

00019620 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   19620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   19622:	f04f 0340 	mov.w	r3, #64	; 0x40
   19626:	f3ef 8411 	mrs	r4, BASEPRI
   1962a:	f383 8811 	msr	BASEPRI, r3
   1962e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
   19632:	491b      	ldr	r1, [pc, #108]	; (196a0 <z_impl_k_yield+0x80>)
   19634:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19636:	7b43      	ldrb	r3, [r0, #13]
   19638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1963c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1963e:	f006 ff84 	bl	2054a <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
   19642:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   19644:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
   19646:	4608      	mov	r0, r1
   19648:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1964c:	7353      	strb	r3, [r2, #13]
   1964e:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19652:	6ace      	ldr	r6, [r1, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19654:	4283      	cmp	r3, r0
   19656:	bf08      	it	eq
   19658:	2300      	moveq	r3, #0
   1965a:	2b00      	cmp	r3, #0
   1965c:	bf38      	it	cc
   1965e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19660:	b1cb      	cbz	r3, 19696 <z_impl_k_yield+0x76>
	int32_t b1 = thread_1->base.prio;
   19662:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
   19666:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1966a:	42af      	cmp	r7, r5
   1966c:	d00f      	beq.n	1968e <z_impl_k_yield+0x6e>
		return b2 - b1;
   1966e:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   19670:	2d00      	cmp	r5, #0
   19672:	dd0c      	ble.n	1968e <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
   19674:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   19676:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
   1967a:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1967c:	605a      	str	r2, [r3, #4]
	update_cache(1);
   1967e:	2001      	movs	r0, #1
   19680:	f7ff fde0 	bl	19244 <update_cache>
   19684:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
   19686:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1968a:	f7f8 bf4d 	b.w	12528 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1968e:	42b3      	cmp	r3, r6
   19690:	d001      	beq.n	19696 <z_impl_k_yield+0x76>
   19692:	681b      	ldr	r3, [r3, #0]
   19694:	e7e4      	b.n	19660 <z_impl_k_yield+0x40>
	node->prev = tail;
   19696:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
   1969a:	6032      	str	r2, [r6, #0]
	list->tail = node;
   1969c:	62ca      	str	r2, [r1, #44]	; 0x2c
}
   1969e:	e7ee      	b.n	1967e <z_impl_k_yield+0x5e>
   196a0:	20002590 	.word	0x20002590

000196a4 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   196a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   196a8:	4604      	mov	r4, r0
   196aa:	460d      	mov	r5, r1
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   196ac:	ea54 0105 	orrs.w	r1, r4, r5
   196b0:	d104      	bne.n	196bc <z_tick_sleep+0x18>
	z_impl_k_yield();
   196b2:	f7ff ffb5 	bl	19620 <z_impl_k_yield>
		k_yield();
		return 0;
   196b6:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   196b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   196bc:	f06f 0101 	mvn.w	r1, #1
   196c0:	1a0a      	subs	r2, r1, r0
   196c2:	f04f 31ff 	mov.w	r1, #4294967295
   196c6:	eb61 0305 	sbc.w	r3, r1, r5
   196ca:	2a01      	cmp	r2, #1
   196cc:	f173 0300 	sbcs.w	r3, r3, #0
   196d0:	da2a      	bge.n	19728 <z_tick_sleep+0x84>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   196d2:	f007 f86d 	bl	207b0 <sys_clock_tick_get_32>
   196d6:	1906      	adds	r6, r0, r4
   196d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   196dc:	f3ef 8811 	mrs	r8, BASEPRI
   196e0:	f383 8811 	msr	BASEPRI, r3
   196e4:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   196e8:	4f11      	ldr	r7, [pc, #68]	; (19730 <z_tick_sleep+0x8c>)
   196ea:	4b12      	ldr	r3, [pc, #72]	; (19734 <z_tick_sleep+0x90>)
   196ec:	68b8      	ldr	r0, [r7, #8]
   196ee:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   196f0:	f7ff fdc8 	bl	19284 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   196f4:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   196f6:	4910      	ldr	r1, [pc, #64]	; (19738 <z_tick_sleep+0x94>)
   196f8:	4622      	mov	r2, r4
   196fa:	462b      	mov	r3, r5
   196fc:	3018      	adds	r0, #24
   196fe:	f000 f91b 	bl	19938 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   19702:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   19704:	7b53      	ldrb	r3, [r2, #13]
   19706:	f043 0310 	orr.w	r3, r3, #16
   1970a:	7353      	strb	r3, [r2, #13]
   1970c:	4640      	mov	r0, r8
   1970e:	f7f8 ff0b 	bl	12528 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   19712:	f007 f84d 	bl	207b0 <sys_clock_tick_get_32>
   19716:	1a30      	subs	r0, r6, r0
   19718:	eb66 0106 	sbc.w	r1, r6, r6
	if (ticks > 0) {
   1971c:	2801      	cmp	r0, #1
   1971e:	f171 0300 	sbcs.w	r3, r1, #0
		return ticks;
   19722:	bfb8      	it	lt
   19724:	2000      	movlt	r0, #0
   19726:	e7c7      	b.n	196b8 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   19728:	f06f 0601 	mvn.w	r6, #1
   1972c:	1a36      	subs	r6, r6, r0
   1972e:	e7d3      	b.n	196d8 <z_tick_sleep+0x34>
   19730:	20002590 	.word	0x20002590
   19734:	200025c8 	.word	0x200025c8
   19738:	00020663 	.word	0x00020663

0001973c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1973c:	b508      	push	{r3, lr}
   1973e:	460b      	mov	r3, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19740:	3301      	adds	r3, #1
   19742:	bf08      	it	eq
   19744:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   19748:	d106      	bne.n	19758 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1974a:	4b08      	ldr	r3, [pc, #32]	; (1976c <z_impl_k_sleep+0x30>)
   1974c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1974e:	f7ff fdeb 	bl	19328 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   19752:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   19756:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   19758:	f7ff ffa4 	bl	196a4 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   1975c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   19760:	fb80 2303 	smull	r2, r3, r0, r3
   19764:	0bd0      	lsrs	r0, r2, #15
   19766:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1976a:	e7f4      	b.n	19756 <z_impl_k_sleep+0x1a>
   1976c:	20002590 	.word	0x20002590

00019770 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   19770:	4b01      	ldr	r3, [pc, #4]	; (19778 <z_impl_k_current_get+0x8>)
   19772:	6898      	ldr	r0, [r3, #8]
   19774:	4770      	bx	lr
   19776:	bf00      	nop
   19778:	20002590 	.word	0x20002590

0001977c <z_impl_k_is_preempt_thread>:
   1977c:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   19780:	b93b      	cbnz	r3, 19792 <z_impl_k_is_preempt_thread+0x16>
   19782:	4b05      	ldr	r3, [pc, #20]	; (19798 <z_impl_k_is_preempt_thread+0x1c>)
   19784:	689b      	ldr	r3, [r3, #8]
   19786:	89d8      	ldrh	r0, [r3, #14]
   19788:	287f      	cmp	r0, #127	; 0x7f
   1978a:	bf8c      	ite	hi
   1978c:	2000      	movhi	r0, #0
   1978e:	2001      	movls	r0, #1
   19790:	4770      	bx	lr
   19792:	2000      	movs	r0, #0
}
   19794:	4770      	bx	lr
   19796:	bf00      	nop
   19798:	20002590 	.word	0x20002590

0001979c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1979c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   197a0:	4604      	mov	r4, r0
   197a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   197a6:	f3ef 8611 	mrs	r6, BASEPRI
   197aa:	f383 8811 	msr	BASEPRI, r3
   197ae:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   197b2:	7b43      	ldrb	r3, [r0, #13]
   197b4:	071a      	lsls	r2, r3, #28
   197b6:	d505      	bpl.n	197c4 <z_thread_abort+0x28>
	__asm__ volatile(
   197b8:	f386 8811 	msr	BASEPRI, r6
   197bc:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   197c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   197c4:	f023 0220 	bic.w	r2, r3, #32
   197c8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   197cc:	09d2      	lsrs	r2, r2, #7
   197ce:	d120      	bne.n	19812 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   197d0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   197d2:	68a3      	ldr	r3, [r4, #8]
   197d4:	b113      	cbz	r3, 197dc <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   197d6:	4620      	mov	r0, r4
   197d8:	f006 febf 	bl	2055a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   197dc:	f104 0018 	add.w	r0, r4, #24
   197e0:	f006 ffa6 	bl	20730 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   197e4:	f104 0758 	add.w	r7, r4, #88	; 0x58
   197e8:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   197ec:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   197ee:	42bd      	cmp	r5, r7
   197f0:	d000      	beq.n	197f4 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   197f2:	b9b5      	cbnz	r5, 19822 <z_thread_abort+0x86>
		update_cache(1);
   197f4:	2001      	movs	r0, #1
   197f6:	f7ff fd25 	bl	19244 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   197fa:	4b10      	ldr	r3, [pc, #64]	; (1983c <z_thread_abort+0xa0>)
   197fc:	689b      	ldr	r3, [r3, #8]
   197fe:	42a3      	cmp	r3, r4
   19800:	d1da      	bne.n	197b8 <z_thread_abort+0x1c>
   19802:	f3ef 8305 	mrs	r3, IPSR
   19806:	2b00      	cmp	r3, #0
   19808:	d1d6      	bne.n	197b8 <z_thread_abort+0x1c>
   1980a:	4630      	mov	r0, r6
   1980c:	f7f8 fe8c 	bl	12528 <arch_swap>
	return ret;
   19810:	e7d2      	b.n	197b8 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19812:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   19816:	f043 0308 	orr.w	r3, r3, #8
   1981a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1981c:	f006 fe95 	bl	2054a <sys_dlist_remove>
}
   19820:	e7d7      	b.n	197d2 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   19822:	4628      	mov	r0, r5
   19824:	f006 fe99 	bl	2055a <unpend_thread_no_timeout>
   19828:	f105 0018 	add.w	r0, r5, #24
   1982c:	f006 ff80 	bl	20730 <z_abort_timeout>
   19830:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   19834:	4628      	mov	r0, r5
   19836:	f7ff fe45 	bl	194c4 <ready_thread>
   1983a:	e7d7      	b.n	197ec <z_thread_abort+0x50>
   1983c:	20002590 	.word	0x20002590

00019840 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   19840:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   19842:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   19846:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   19848:	e9cd 6700 	strd	r6, r7, [sp]
   1984c:	f7ff fd58 	bl	19300 <z_pend_curr>

	if (data != NULL) {
   19850:	b11c      	cbz	r4, 1985a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   19852:	4b03      	ldr	r3, [pc, #12]	; (19860 <z_sched_wait+0x20>)
   19854:	689b      	ldr	r3, [r3, #8]
   19856:	695b      	ldr	r3, [r3, #20]
   19858:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1985a:	b002      	add	sp, #8
   1985c:	bdd0      	pop	{r4, r6, r7, pc}
   1985e:	bf00      	nop
   19860:	20002590 	.word	0x20002590

00019864 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   19864:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   19866:	4806      	ldr	r0, [pc, #24]	; (19880 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   19868:	4a06      	ldr	r2, [pc, #24]	; (19884 <z_data_copy+0x20>)
   1986a:	4907      	ldr	r1, [pc, #28]	; (19888 <z_data_copy+0x24>)
   1986c:	1a12      	subs	r2, r2, r0
   1986e:	f004 f9f0 	bl	1dc52 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   19872:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   19876:	4a05      	ldr	r2, [pc, #20]	; (1988c <z_data_copy+0x28>)
   19878:	4905      	ldr	r1, [pc, #20]	; (19890 <z_data_copy+0x2c>)
   1987a:	4806      	ldr	r0, [pc, #24]	; (19894 <z_data_copy+0x30>)
   1987c:	f004 b9e9 	b.w	1dc52 <memcpy>
   19880:	20000000 	.word	0x20000000
   19884:	20000988 	.word	0x20000988
   19888:	00021e40 	.word	0x00021e40
   1988c:	00000000 	.word	0x00000000
   19890:	00021e40 	.word	0x00021e40
   19894:	20000000 	.word	0x20000000

00019898 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   19898:	4b03      	ldr	r3, [pc, #12]	; (198a8 <elapsed+0x10>)
   1989a:	681b      	ldr	r3, [r3, #0]
   1989c:	b90b      	cbnz	r3, 198a2 <elapsed+0xa>
   1989e:	f7f8 bcaf 	b.w	12200 <sys_clock_elapsed>
}
   198a2:	2000      	movs	r0, #0
   198a4:	4770      	bx	lr
   198a6:	bf00      	nop
   198a8:	200025d4 	.word	0x200025d4

000198ac <remove_timeout>:
{
   198ac:	b530      	push	{r4, r5, lr}
   198ae:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   198b0:	b168      	cbz	r0, 198ce <remove_timeout+0x22>
   198b2:	4a0a      	ldr	r2, [pc, #40]	; (198dc <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   198b4:	6852      	ldr	r2, [r2, #4]
   198b6:	4290      	cmp	r0, r2
   198b8:	d009      	beq.n	198ce <remove_timeout+0x22>
	if (next(t) != NULL) {
   198ba:	b143      	cbz	r3, 198ce <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   198bc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   198c0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   198c4:	1912      	adds	r2, r2, r4
   198c6:	eb45 0101 	adc.w	r1, r5, r1
   198ca:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   198ce:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   198d0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   198d2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   198d4:	2300      	movs	r3, #0
	node->prev = NULL;
   198d6:	e9c0 3300 	strd	r3, r3, [r0]
}
   198da:	bd30      	pop	{r4, r5, pc}
   198dc:	20000624 	.word	0x20000624

000198e0 <next_timeout>:

static int32_t next_timeout(void)
{
   198e0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   198e2:	4b13      	ldr	r3, [pc, #76]	; (19930 <next_timeout+0x50>)
   198e4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   198e6:	429c      	cmp	r4, r3
   198e8:	bf08      	it	eq
   198ea:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   198ec:	f7ff ffd4 	bl	19898 <elapsed>
   198f0:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   198f2:	b1bc      	cbz	r4, 19924 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   198f4:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   198f8:	1b40      	subs	r0, r0, r5
   198fa:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   198fe:	2801      	cmp	r0, #1
   19900:	f171 0300 	sbcs.w	r3, r1, #0
   19904:	db11      	blt.n	1992a <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   19906:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1990a:	2300      	movs	r3, #0
   1990c:	4282      	cmp	r2, r0
   1990e:	eb73 0401 	sbcs.w	r4, r3, r1
   19912:	da00      	bge.n	19916 <next_timeout+0x36>
   19914:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   19916:	4b07      	ldr	r3, [pc, #28]	; (19934 <next_timeout+0x54>)
   19918:	691b      	ldr	r3, [r3, #16]
   1991a:	b113      	cbz	r3, 19922 <next_timeout+0x42>
   1991c:	4298      	cmp	r0, r3
   1991e:	bfa8      	it	ge
   19920:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   19922:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   19924:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   19928:	e7f5      	b.n	19916 <next_timeout+0x36>
   1992a:	2000      	movs	r0, #0
   1992c:	e7f3      	b.n	19916 <next_timeout+0x36>
   1992e:	bf00      	nop
   19930:	20000624 	.word	0x20000624
   19934:	20002590 	.word	0x20002590

00019938 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19938:	f1b3 3fff 	cmp.w	r3, #4294967295
   1993c:	bf08      	it	eq
   1993e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   19942:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19946:	4604      	mov	r4, r0
   19948:	4692      	mov	sl, r2
   1994a:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1994c:	d073      	beq.n	19a36 <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1994e:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   19950:	f04f 0340 	mov.w	r3, #64	; 0x40
   19954:	f3ef 8511 	mrs	r5, BASEPRI
   19958:	f383 8811 	msr	BASEPRI, r3
   1995c:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   19960:	f06f 0301 	mvn.w	r3, #1
   19964:	ebb3 080a 	subs.w	r8, r3, sl
   19968:	f04f 32ff 	mov.w	r2, #4294967295
   1996c:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   19970:	f1b8 0f00 	cmp.w	r8, #0
   19974:	f179 0100 	sbcs.w	r1, r9, #0
   19978:	db1c      	blt.n	199b4 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1997a:	4830      	ldr	r0, [pc, #192]	; (19a3c <z_add_timeout+0x104>)
   1997c:	e9d0 1000 	ldrd	r1, r0, [r0]
   19980:	1a5b      	subs	r3, r3, r1
   19982:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   19986:	ebb3 060a 	subs.w	r6, r3, sl
   1998a:	eb62 070b 	sbc.w	r7, r2, fp
   1998e:	2e01      	cmp	r6, #1
   19990:	f177 0300 	sbcs.w	r3, r7, #0
   19994:	bfbc      	itt	lt
   19996:	2601      	movlt	r6, #1
   19998:	2700      	movlt	r7, #0
   1999a:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
   1999e:	4a28      	ldr	r2, [pc, #160]	; (19a40 <z_add_timeout+0x108>)
   199a0:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   199a4:	4293      	cmp	r3, r2
   199a6:	d11e      	bne.n	199e6 <z_add_timeout+0xae>
	node->prev = tail;
   199a8:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   199ac:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   199b0:	6054      	str	r4, [r2, #4]
}
   199b2:	e02d      	b.n	19a10 <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   199b4:	f7ff ff70 	bl	19898 <elapsed>
   199b8:	f11a 0301 	adds.w	r3, sl, #1
   199bc:	9300      	str	r3, [sp, #0]
   199be:	f14b 0300 	adc.w	r3, fp, #0
   199c2:	9301      	str	r3, [sp, #4]
   199c4:	e9dd 2300 	ldrd	r2, r3, [sp]
   199c8:	1812      	adds	r2, r2, r0
   199ca:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   199ce:	e9c4 2304 	strd	r2, r3, [r4, #16]
   199d2:	e7e4      	b.n	1999e <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   199d4:	ebb6 0008 	subs.w	r0, r6, r8
   199d8:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
   199dc:	4563      	cmp	r3, ip
   199de:	e9c4 0104 	strd	r0, r1, [r4, #16]
   199e2:	d0e1      	beq.n	199a8 <z_add_timeout+0x70>
   199e4:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   199e6:	2b00      	cmp	r3, #0
   199e8:	d0de      	beq.n	199a8 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
   199ea:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
   199ee:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   199f2:	4546      	cmp	r6, r8
   199f4:	eb77 0109 	sbcs.w	r1, r7, r9
   199f8:	daec      	bge.n	199d4 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
   199fa:	ebb8 0006 	subs.w	r0, r8, r6
   199fe:	eb69 0107 	sbc.w	r1, r9, r7
   19a02:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   19a06:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   19a08:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   19a0c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   19a0e:	605c      	str	r4, [r3, #4]
	return list->head == list;
   19a10:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19a12:	4293      	cmp	r3, r2
   19a14:	d00b      	beq.n	19a2e <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   19a16:	429c      	cmp	r4, r3
   19a18:	d109      	bne.n	19a2e <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   19a1a:	f7ff ff61 	bl	198e0 <next_timeout>

			if (next_time == 0 ||
   19a1e:	b118      	cbz	r0, 19a28 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
   19a20:	4b08      	ldr	r3, [pc, #32]	; (19a44 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
   19a22:	691b      	ldr	r3, [r3, #16]
   19a24:	4283      	cmp	r3, r0
   19a26:	d002      	beq.n	19a2e <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
   19a28:	2100      	movs	r1, #0
   19a2a:	f7f8 fbb7 	bl	1219c <sys_clock_set_timeout>
	__asm__ volatile(
   19a2e:	f385 8811 	msr	BASEPRI, r5
   19a32:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   19a36:	b003      	add	sp, #12
   19a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a3c:	20001c90 	.word	0x20001c90
   19a40:	20000624 	.word	0x20000624
   19a44:	20002590 	.word	0x20002590

00019a48 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   19a48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a4c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   19a4e:	f7ff fcf7 	bl	19440 <z_time_slice>
	__asm__ volatile(
   19a52:	f04f 0340 	mov.w	r3, #64	; 0x40
   19a56:	f3ef 8411 	mrs	r4, BASEPRI
   19a5a:	f383 8811 	msr	BASEPRI, r3
   19a5e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   19a62:	4d2c      	ldr	r5, [pc, #176]	; (19b14 <sys_clock_announce+0xcc>)
   19a64:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 19b18 <sys_clock_announce+0xd0>
	return list->head == list;
   19a68:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 19b1c <sys_clock_announce+0xd4>
   19a6c:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   19a6e:	4651      	mov	r1, sl
   19a70:	f8d5 c000 	ldr.w	ip, [r5]
   19a74:	f8db 0000 	ldr.w	r0, [fp]
   19a78:	4662      	mov	r2, ip
   19a7a:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19a7c:	4558      	cmp	r0, fp
   19a7e:	e9da 8900 	ldrd	r8, r9, [sl]
   19a82:	e9cd 2300 	strd	r2, r3, [sp]
   19a86:	d00d      	beq.n	19aa4 <sys_clock_announce+0x5c>
   19a88:	b160      	cbz	r0, 19aa4 <sys_clock_announce+0x5c>
   19a8a:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   19a8e:	45b4      	cmp	ip, r6
   19a90:	41bb      	sbcs	r3, r7
   19a92:	da1e      	bge.n	19ad2 <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   19a94:	9b00      	ldr	r3, [sp, #0]
   19a96:	ebb6 0c03 	subs.w	ip, r6, r3
   19a9a:	9b01      	ldr	r3, [sp, #4]
   19a9c:	eb67 0603 	sbc.w	r6, r7, r3
   19aa0:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   19aa4:	9b00      	ldr	r3, [sp, #0]
   19aa6:	eb13 0208 	adds.w	r2, r3, r8
   19aaa:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   19aac:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   19ab0:	eb43 0309 	adc.w	r3, r3, r9
   19ab4:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   19ab8:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   19aba:	f7ff ff11 	bl	198e0 <next_timeout>
   19abe:	4631      	mov	r1, r6
   19ac0:	f7f8 fb6c 	bl	1219c <sys_clock_set_timeout>
	__asm__ volatile(
   19ac4:	f384 8811 	msr	BASEPRI, r4
   19ac8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   19acc:	b003      	add	sp, #12
   19ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   19ad2:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   19ad6:	f04f 0200 	mov.w	r2, #0
   19ada:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   19ade:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   19ae2:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   19ae6:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   19aea:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   19aee:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   19af0:	f7ff fedc 	bl	198ac <remove_timeout>
   19af4:	f384 8811 	msr	BASEPRI, r4
   19af8:	f3bf 8f6f 	isb	sy
		t->fn(t);
   19afc:	6883      	ldr	r3, [r0, #8]
   19afe:	4798      	blx	r3
	__asm__ volatile(
   19b00:	f04f 0340 	mov.w	r3, #64	; 0x40
   19b04:	f3ef 8411 	mrs	r4, BASEPRI
   19b08:	f383 8811 	msr	BASEPRI, r3
   19b0c:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   19b10:	4901      	ldr	r1, [pc, #4]	; (19b18 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   19b12:	e7ad      	b.n	19a70 <sys_clock_announce+0x28>
   19b14:	200025d4 	.word	0x200025d4
   19b18:	20001c90 	.word	0x20001c90
   19b1c:	20000624 	.word	0x20000624

00019b20 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   19b20:	b510      	push	{r4, lr}
   19b22:	f04f 0340 	mov.w	r3, #64	; 0x40
   19b26:	f3ef 8411 	mrs	r4, BASEPRI
   19b2a:	f383 8811 	msr	BASEPRI, r3
   19b2e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   19b32:	f7f8 fb65 	bl	12200 <sys_clock_elapsed>
   19b36:	4b06      	ldr	r3, [pc, #24]	; (19b50 <sys_clock_tick_get+0x30>)
   19b38:	e9d3 2300 	ldrd	r2, r3, [r3]
   19b3c:	1812      	adds	r2, r2, r0
   19b3e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   19b42:	f384 8811 	msr	BASEPRI, r4
   19b46:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   19b4a:	4610      	mov	r0, r2
   19b4c:	4619      	mov	r1, r3
   19b4e:	bd10      	pop	{r4, pc}
   19b50:	20001c90 	.word	0x20001c90

00019b54 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   19b54:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   19b58:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   19b5a:	4b29      	ldr	r3, [pc, #164]	; (19c00 <z_impl_k_poll+0xac>)
   19b5c:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   19b5e:	2301      	movs	r3, #1
   19b60:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   19b64:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   19b68:	ea52 0307 	orrs.w	r3, r2, r7
{
   19b6c:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   19b6e:	bf0c      	ite	eq
   19b70:	2301      	moveq	r3, #1
   19b72:	2300      	movne	r3, #0
   19b74:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
   19b78:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   19b7a:	f006 feae 	bl	208da <register_events>
   19b7e:	4681      	mov	r9, r0
	__asm__ volatile(
   19b80:	f04f 0340 	mov.w	r3, #64	; 0x40
   19b84:	f3ef 8a11 	mrs	sl, BASEPRI
   19b88:	f383 8811 	msr	BASEPRI, r3
   19b8c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   19b90:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
   19b94:	b964      	cbnz	r4, 19bb0 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   19b96:	4601      	mov	r1, r0
   19b98:	4652      	mov	r2, sl
   19b9a:	4640      	mov	r0, r8
   19b9c:	f006 fe3b 	bl	20816 <clear_event_registrations>
	__asm__ volatile(
   19ba0:	f38a 8811 	msr	BASEPRI, sl
   19ba4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   19ba8:	4620      	mov	r0, r4
   19baa:	b002      	add	sp, #8
   19bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   19bb0:	2300      	movs	r3, #0
   19bb2:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19bb6:	ea56 0307 	orrs.w	r3, r6, r7
   19bba:	d106      	bne.n	19bca <z_impl_k_poll+0x76>
   19bbc:	f38a 8811 	msr	BASEPRI, sl
   19bc0:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   19bc4:	f06f 040a 	mvn.w	r4, #10
   19bc8:	e7ee      	b.n	19ba8 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   19bca:	e9cd 6700 	strd	r6, r7, [sp]
   19bce:	4a0d      	ldr	r2, [pc, #52]	; (19c04 <z_impl_k_poll+0xb0>)
   19bd0:	480d      	ldr	r0, [pc, #52]	; (19c08 <z_impl_k_poll+0xb4>)
   19bd2:	4651      	mov	r1, sl
   19bd4:	f7ff fb94 	bl	19300 <z_pend_curr>
   19bd8:	4604      	mov	r4, r0
	__asm__ volatile(
   19bda:	f04f 0340 	mov.w	r3, #64	; 0x40
   19bde:	f3ef 8511 	mrs	r5, BASEPRI
   19be2:	f383 8811 	msr	BASEPRI, r3
   19be6:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   19bea:	462a      	mov	r2, r5
   19bec:	4649      	mov	r1, r9
   19bee:	4640      	mov	r0, r8
   19bf0:	f006 fe11 	bl	20816 <clear_event_registrations>
	__asm__ volatile(
   19bf4:	f385 8811 	msr	BASEPRI, r5
   19bf8:	f3bf 8f6f 	isb	sy
	return swap_rc;
   19bfc:	e7d4      	b.n	19ba8 <z_impl_k_poll+0x54>
   19bfe:	bf00      	nop
   19c00:	20002590 	.word	0x20002590
   19c04:	2000062c 	.word	0x2000062c
   19c08:	20003a78 	.word	0x20003a78

00019c0c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   19c0c:	b538      	push	{r3, r4, r5, lr}
   19c0e:	4603      	mov	r3, r0
	__asm__ volatile(
   19c10:	f04f 0240 	mov.w	r2, #64	; 0x40
   19c14:	f3ef 8511 	mrs	r5, BASEPRI
   19c18:	f382 8811 	msr	BASEPRI, r2
   19c1c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   19c20:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   19c22:	2101      	movs	r1, #1
   19c24:	6081      	str	r1, [r0, #8]
	return list->head == list;
   19c26:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   19c28:	4283      	cmp	r3, r0
   19c2a:	d106      	bne.n	19c3a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   19c2c:	f385 8811 	msr	BASEPRI, r5
   19c30:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   19c34:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   19c36:	4620      	mov	r0, r4
   19c38:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   19c3a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   19c3e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   19c40:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19c42:	2300      	movs	r3, #0
	node->prev = NULL;
   19c44:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   19c48:	f006 febe 	bl	209c8 <signal_poll_event>
	z_reschedule(&lock, key);
   19c4c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   19c4e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   19c50:	4801      	ldr	r0, [pc, #4]	; (19c58 <z_impl_k_poll_signal_raise+0x4c>)
   19c52:	f7ff fad1 	bl	191f8 <z_reschedule>
	return rc;
   19c56:	e7ee      	b.n	19c36 <z_impl_k_poll_signal_raise+0x2a>
   19c58:	20003a78 	.word	0x20003a78

00019c5c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   19c5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19c5e:	4606      	mov	r6, r0
   19c60:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   19c62:	f006 fa9f 	bl	201a4 <k_is_in_isr>
   19c66:	b980      	cbnz	r0, 19c8a <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   19c68:	4b0b      	ldr	r3, [pc, #44]	; (19c98 <z_thread_aligned_alloc+0x3c>)
   19c6a:	689b      	ldr	r3, [r3, #8]
   19c6c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   19c6e:	b184      	cbz	r4, 19c92 <z_thread_aligned_alloc+0x36>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   19c70:	2204      	movs	r2, #4
   19c72:	18aa      	adds	r2, r5, r2
   19c74:	d209      	bcs.n	19c8a <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   19c76:	2000      	movs	r0, #0
   19c78:	2100      	movs	r1, #0
   19c7a:	e9cd 0100 	strd	r0, r1, [sp]
   19c7e:	f046 0104 	orr.w	r1, r6, #4
   19c82:	4620      	mov	r0, r4
   19c84:	f006 f9e6 	bl	20054 <k_heap_aligned_alloc>
	if (mem == NULL) {
   19c88:	b908      	cbnz	r0, 19c8e <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   19c8a:	2400      	movs	r4, #0
	}

	return ret;
   19c8c:	e001      	b.n	19c92 <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
   19c8e:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   19c90:	1d04      	adds	r4, r0, #4
}
   19c92:	4620      	mov	r0, r4
   19c94:	b002      	add	sp, #8
   19c96:	bd70      	pop	{r4, r5, r6, pc}
   19c98:	20002590 	.word	0x20002590

00019c9c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   19c9c:	4a02      	ldr	r2, [pc, #8]	; (19ca8 <boot_banner+0xc>)
   19c9e:	4903      	ldr	r1, [pc, #12]	; (19cac <boot_banner+0x10>)
   19ca0:	4803      	ldr	r0, [pc, #12]	; (19cb0 <boot_banner+0x14>)
   19ca2:	f003 b8a8 	b.w	1cdf6 <printk>
   19ca6:	bf00      	nop
   19ca8:	00021a0b 	.word	0x00021a0b
   19cac:	00021e07 	.word	0x00021e07
   19cb0:	00021e16 	.word	0x00021e16

00019cb4 <nrf_cc3xx_platform_init>:
   19cb4:	b510      	push	{r4, lr}
   19cb6:	4c0c      	ldr	r4, [pc, #48]	; (19ce8 <nrf_cc3xx_platform_init+0x34>)
   19cb8:	6823      	ldr	r3, [r4, #0]
   19cba:	b113      	cbz	r3, 19cc2 <nrf_cc3xx_platform_init+0xe>
   19cbc:	4b0b      	ldr	r3, [pc, #44]	; (19cec <nrf_cc3xx_platform_init+0x38>)
   19cbe:	681b      	ldr	r3, [r3, #0]
   19cc0:	b92b      	cbnz	r3, 19cce <nrf_cc3xx_platform_init+0x1a>
   19cc2:	f000 fabd 	bl	1a240 <CC_LibInit>
   19cc6:	b930      	cbnz	r0, 19cd6 <nrf_cc3xx_platform_init+0x22>
   19cc8:	4b08      	ldr	r3, [pc, #32]	; (19cec <nrf_cc3xx_platform_init+0x38>)
   19cca:	2201      	movs	r2, #1
   19ccc:	601a      	str	r2, [r3, #0]
   19cce:	2301      	movs	r3, #1
   19cd0:	6023      	str	r3, [r4, #0]
   19cd2:	2000      	movs	r0, #0
   19cd4:	bd10      	pop	{r4, pc}
   19cd6:	3801      	subs	r0, #1
   19cd8:	2806      	cmp	r0, #6
   19cda:	d901      	bls.n	19ce0 <nrf_cc3xx_platform_init+0x2c>
   19cdc:	4804      	ldr	r0, [pc, #16]	; (19cf0 <nrf_cc3xx_platform_init+0x3c>)
   19cde:	bd10      	pop	{r4, pc}
   19ce0:	4b04      	ldr	r3, [pc, #16]	; (19cf4 <nrf_cc3xx_platform_init+0x40>)
   19ce2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   19ce6:	bd10      	pop	{r4, pc}
   19ce8:	200025d8 	.word	0x200025d8
   19cec:	200025dc 	.word	0x200025dc
   19cf0:	ffff8ffe 	.word	0xffff8ffe
   19cf4:	000216d4 	.word	0x000216d4

00019cf8 <nrf_cc3xx_platform_abort>:
   19cf8:	f3bf 8f4f 	dsb	sy
   19cfc:	4905      	ldr	r1, [pc, #20]	; (19d14 <nrf_cc3xx_platform_abort+0x1c>)
   19cfe:	4b06      	ldr	r3, [pc, #24]	; (19d18 <nrf_cc3xx_platform_abort+0x20>)
   19d00:	68ca      	ldr	r2, [r1, #12]
   19d02:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   19d06:	4313      	orrs	r3, r2
   19d08:	60cb      	str	r3, [r1, #12]
   19d0a:	f3bf 8f4f 	dsb	sy
   19d0e:	bf00      	nop
   19d10:	e7fd      	b.n	19d0e <nrf_cc3xx_platform_abort+0x16>
   19d12:	bf00      	nop
   19d14:	e000ed00 	.word	0xe000ed00
   19d18:	05fa0004 	.word	0x05fa0004

00019d1c <CC_PalAbort>:
   19d1c:	b4f0      	push	{r4, r5, r6, r7}
   19d1e:	4f09      	ldr	r7, [pc, #36]	; (19d44 <CC_PalAbort+0x28>)
   19d20:	4e09      	ldr	r6, [pc, #36]	; (19d48 <CC_PalAbort+0x2c>)
   19d22:	4c0a      	ldr	r4, [pc, #40]	; (19d4c <CC_PalAbort+0x30>)
   19d24:	4a0a      	ldr	r2, [pc, #40]	; (19d50 <CC_PalAbort+0x34>)
   19d26:	4d0b      	ldr	r5, [pc, #44]	; (19d54 <CC_PalAbort+0x38>)
   19d28:	490b      	ldr	r1, [pc, #44]	; (19d58 <CC_PalAbort+0x3c>)
   19d2a:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   19d2e:	603b      	str	r3, [r7, #0]
   19d30:	6852      	ldr	r2, [r2, #4]
   19d32:	6033      	str	r3, [r6, #0]
   19d34:	6023      	str	r3, [r4, #0]
   19d36:	2400      	movs	r4, #0
   19d38:	602b      	str	r3, [r5, #0]
   19d3a:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   19d3e:	bcf0      	pop	{r4, r5, r6, r7}
   19d40:	4710      	bx	r2
   19d42:	bf00      	nop
   19d44:	5002b400 	.word	0x5002b400
   19d48:	5002b404 	.word	0x5002b404
   19d4c:	5002b408 	.word	0x5002b408
   19d50:	20000634 	.word	0x20000634
   19d54:	5002b40c 	.word	0x5002b40c
   19d58:	5002a000 	.word	0x5002a000

00019d5c <nrf_cc3xx_platform_set_abort>:
   19d5c:	e9d0 1200 	ldrd	r1, r2, [r0]
   19d60:	4b01      	ldr	r3, [pc, #4]	; (19d68 <nrf_cc3xx_platform_set_abort+0xc>)
   19d62:	e9c3 1200 	strd	r1, r2, [r3]
   19d66:	4770      	bx	lr
   19d68:	20000634 	.word	0x20000634

00019d6c <nrf_cc3xx_platform_ctr_drbg_init>:
   19d6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19d70:	4c15      	ldr	r4, [pc, #84]	; (19dc8 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   19d72:	f8df 805c 	ldr.w	r8, [pc, #92]	; 19dd0 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   19d76:	2800      	cmp	r0, #0
   19d78:	bf18      	it	ne
   19d7a:	4604      	movne	r4, r0
   19d7c:	b083      	sub	sp, #12
   19d7e:	6820      	ldr	r0, [r4, #0]
   19d80:	4540      	cmp	r0, r8
   19d82:	d01d      	beq.n	19dc0 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   19d84:	460d      	mov	r5, r1
   19d86:	4620      	mov	r0, r4
   19d88:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   19d8c:	f104 0904 	add.w	r9, r4, #4
   19d90:	4616      	mov	r6, r2
   19d92:	f504 778c 	add.w	r7, r4, #280	; 0x118
   19d96:	f000 fe9f 	bl	1aad8 <mbedtls_platform_zeroize>
   19d9a:	4648      	mov	r0, r9
   19d9c:	f000 f940 	bl	1a020 <cc_mbedtls_entropy_init>
   19da0:	4638      	mov	r0, r7
   19da2:	f001 fa75 	bl	1b290 <cc_mbedtls_ctr_drbg_init>
   19da6:	4909      	ldr	r1, [pc, #36]	; (19dcc <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   19da8:	9600      	str	r6, [sp, #0]
   19daa:	464a      	mov	r2, r9
   19dac:	4638      	mov	r0, r7
   19dae:	462b      	mov	r3, r5
   19db0:	f001 fa80 	bl	1b2b4 <cc_mbedtls_ctr_drbg_seed>
   19db4:	b908      	cbnz	r0, 19dba <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   19db6:	f8c4 8000 	str.w	r8, [r4]
   19dba:	b003      	add	sp, #12
   19dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19dc0:	2000      	movs	r0, #0
   19dc2:	b003      	add	sp, #12
   19dc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19dc8:	20003a78 	.word	0x20003a78
   19dcc:	0001a09d 	.word	0x0001a09d
   19dd0:	5ac9bca5 	.word	0x5ac9bca5

00019dd4 <nrf_cc3xx_platform_ctr_drbg_get>:
   19dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   19dd6:	4c0d      	ldr	r4, [pc, #52]	; (19e0c <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   19dd8:	4e0d      	ldr	r6, [pc, #52]	; (19e10 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   19dda:	2800      	cmp	r0, #0
   19ddc:	bf08      	it	eq
   19dde:	4620      	moveq	r0, r4
   19de0:	b083      	sub	sp, #12
   19de2:	6807      	ldr	r7, [r0, #0]
   19de4:	42b7      	cmp	r7, r6
   19de6:	d10e      	bne.n	19e06 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   19de8:	2600      	movs	r6, #0
   19dea:	461d      	mov	r5, r3
   19dec:	f500 708c 	add.w	r0, r0, #280	; 0x118
   19df0:	9600      	str	r6, [sp, #0]
   19df2:	4633      	mov	r3, r6
   19df4:	4614      	mov	r4, r2
   19df6:	f001 faad 	bl	1b354 <cc_mbedtls_ctr_drbg_random_with_add>
   19dfa:	2800      	cmp	r0, #0
   19dfc:	bf18      	it	ne
   19dfe:	4634      	movne	r4, r6
   19e00:	602c      	str	r4, [r5, #0]
   19e02:	b003      	add	sp, #12
   19e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19e06:	4803      	ldr	r0, [pc, #12]	; (19e14 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   19e08:	e7fb      	b.n	19e02 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   19e0a:	bf00      	nop
   19e0c:	20003a78 	.word	0x20003a78
   19e10:	5ac9bca5 	.word	0x5ac9bca5
   19e14:	ffff8fe8 	.word	0xffff8fe8

00019e18 <mutex_free>:
   19e18:	b510      	push	{r4, lr}
   19e1a:	4604      	mov	r4, r0
   19e1c:	b130      	cbz	r0, 19e2c <mutex_free+0x14>
   19e1e:	6863      	ldr	r3, [r4, #4]
   19e20:	06db      	lsls	r3, r3, #27
   19e22:	d502      	bpl.n	19e2a <mutex_free+0x12>
   19e24:	2300      	movs	r3, #0
   19e26:	6023      	str	r3, [r4, #0]
   19e28:	6063      	str	r3, [r4, #4]
   19e2a:	bd10      	pop	{r4, pc}
   19e2c:	4b02      	ldr	r3, [pc, #8]	; (19e38 <mutex_free+0x20>)
   19e2e:	4803      	ldr	r0, [pc, #12]	; (19e3c <mutex_free+0x24>)
   19e30:	685b      	ldr	r3, [r3, #4]
   19e32:	4798      	blx	r3
   19e34:	e7f3      	b.n	19e1e <mutex_free+0x6>
   19e36:	bf00      	nop
   19e38:	20000634 	.word	0x20000634
   19e3c:	000216f0 	.word	0x000216f0

00019e40 <mutex_unlock>:
   19e40:	b168      	cbz	r0, 19e5e <mutex_unlock+0x1e>
   19e42:	6843      	ldr	r3, [r0, #4]
   19e44:	b13b      	cbz	r3, 19e56 <mutex_unlock+0x16>
   19e46:	06db      	lsls	r3, r3, #27
   19e48:	d507      	bpl.n	19e5a <mutex_unlock+0x1a>
   19e4a:	f3bf 8f5f 	dmb	sy
   19e4e:	2300      	movs	r3, #0
   19e50:	6003      	str	r3, [r0, #0]
   19e52:	4618      	mov	r0, r3
   19e54:	4770      	bx	lr
   19e56:	4803      	ldr	r0, [pc, #12]	; (19e64 <mutex_unlock+0x24>)
   19e58:	4770      	bx	lr
   19e5a:	4803      	ldr	r0, [pc, #12]	; (19e68 <mutex_unlock+0x28>)
   19e5c:	4770      	bx	lr
   19e5e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   19e62:	4770      	bx	lr
   19e64:	ffff8fea 	.word	0xffff8fea
   19e68:	ffff8fe9 	.word	0xffff8fe9

00019e6c <mutex_init>:
   19e6c:	b510      	push	{r4, lr}
   19e6e:	4604      	mov	r4, r0
   19e70:	b120      	cbz	r0, 19e7c <mutex_init+0x10>
   19e72:	2200      	movs	r2, #0
   19e74:	2311      	movs	r3, #17
   19e76:	6022      	str	r2, [r4, #0]
   19e78:	6063      	str	r3, [r4, #4]
   19e7a:	bd10      	pop	{r4, pc}
   19e7c:	4801      	ldr	r0, [pc, #4]	; (19e84 <mutex_init+0x18>)
   19e7e:	f7ff ff4d 	bl	19d1c <CC_PalAbort>
   19e82:	e7f6      	b.n	19e72 <mutex_init+0x6>
   19e84:	00021718 	.word	0x00021718

00019e88 <mutex_lock>:
   19e88:	b1c0      	cbz	r0, 19ebc <mutex_lock+0x34>
   19e8a:	6843      	ldr	r3, [r0, #4]
   19e8c:	b1a3      	cbz	r3, 19eb8 <mutex_lock+0x30>
   19e8e:	06db      	lsls	r3, r3, #27
   19e90:	d510      	bpl.n	19eb4 <mutex_lock+0x2c>
   19e92:	2201      	movs	r2, #1
   19e94:	f3bf 8f5b 	dmb	ish
   19e98:	e850 3f00 	ldrex	r3, [r0]
   19e9c:	e840 2100 	strex	r1, r2, [r0]
   19ea0:	2900      	cmp	r1, #0
   19ea2:	d1f9      	bne.n	19e98 <mutex_lock+0x10>
   19ea4:	f3bf 8f5b 	dmb	ish
   19ea8:	2b01      	cmp	r3, #1
   19eaa:	d0f3      	beq.n	19e94 <mutex_lock+0xc>
   19eac:	f3bf 8f5f 	dmb	sy
   19eb0:	2000      	movs	r0, #0
   19eb2:	4770      	bx	lr
   19eb4:	4803      	ldr	r0, [pc, #12]	; (19ec4 <mutex_lock+0x3c>)
   19eb6:	4770      	bx	lr
   19eb8:	4803      	ldr	r0, [pc, #12]	; (19ec8 <mutex_lock+0x40>)
   19eba:	4770      	bx	lr
   19ebc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   19ec0:	4770      	bx	lr
   19ec2:	bf00      	nop
   19ec4:	ffff8fe9 	.word	0xffff8fe9
   19ec8:	ffff8fea 	.word	0xffff8fea

00019ecc <nrf_cc3xx_platform_set_mutexes>:
   19ecc:	b570      	push	{r4, r5, r6, lr}
   19ece:	e9d0 2300 	ldrd	r2, r3, [r0]
   19ed2:	4c13      	ldr	r4, [pc, #76]	; (19f20 <nrf_cc3xx_platform_set_mutexes+0x54>)
   19ed4:	4d13      	ldr	r5, [pc, #76]	; (19f24 <nrf_cc3xx_platform_set_mutexes+0x58>)
   19ed6:	e9c4 2300 	strd	r2, r3, [r4]
   19eda:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   19ede:	e9c4 6302 	strd	r6, r3, [r4, #8]
   19ee2:	4b11      	ldr	r3, [pc, #68]	; (19f28 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   19ee4:	6808      	ldr	r0, [r1, #0]
   19ee6:	6018      	str	r0, [r3, #0]
   19ee8:	6848      	ldr	r0, [r1, #4]
   19eea:	6058      	str	r0, [r3, #4]
   19eec:	6888      	ldr	r0, [r1, #8]
   19eee:	6098      	str	r0, [r3, #8]
   19ef0:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   19ef4:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   19ef8:	60de      	str	r6, [r3, #12]
   19efa:	6118      	str	r0, [r3, #16]
   19efc:	06cb      	lsls	r3, r1, #27
   19efe:	d50d      	bpl.n	19f1c <nrf_cc3xx_platform_set_mutexes+0x50>
   19f00:	2300      	movs	r3, #0
   19f02:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   19f06:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   19f0a:	f505 7088 	add.w	r0, r5, #272	; 0x110
   19f0e:	4790      	blx	r2
   19f10:	6823      	ldr	r3, [r4, #0]
   19f12:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   19f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   19f1a:	4718      	bx	r3
   19f1c:	bd70      	pop	{r4, r5, r6, pc}
   19f1e:	bf00      	nop
   19f20:	20000644 	.word	0x20000644
   19f24:	20003a78 	.word	0x20003a78
   19f28:	20000654 	.word	0x20000654

00019f2c <entropy_update>:
   19f2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19f30:	2b20      	cmp	r3, #32
   19f32:	b08b      	sub	sp, #44	; 0x2c
   19f34:	461d      	mov	r5, r3
   19f36:	4606      	mov	r6, r0
   19f38:	4689      	mov	r9, r1
   19f3a:	4690      	mov	r8, r2
   19f3c:	d826      	bhi.n	19f8c <entropy_update+0x60>
   19f3e:	b2db      	uxtb	r3, r3
   19f40:	af02      	add	r7, sp, #8
   19f42:	6831      	ldr	r1, [r6, #0]
   19f44:	f88d 9004 	strb.w	r9, [sp, #4]
   19f48:	f88d 3005 	strb.w	r3, [sp, #5]
   19f4c:	f106 0904 	add.w	r9, r6, #4
   19f50:	b921      	cbnz	r1, 19f5c <entropy_update+0x30>
   19f52:	4648      	mov	r0, r9
   19f54:	f000 fe62 	bl	1ac1c <cc_mbedtls_sha256_starts_ret>
   19f58:	4604      	mov	r4, r0
   19f5a:	b940      	cbnz	r0, 19f6e <entropy_update+0x42>
   19f5c:	2301      	movs	r3, #1
   19f5e:	6033      	str	r3, [r6, #0]
   19f60:	2202      	movs	r2, #2
   19f62:	a901      	add	r1, sp, #4
   19f64:	4648      	mov	r0, r9
   19f66:	f000 fe6d 	bl	1ac44 <cc_mbedtls_sha256_update_ret>
   19f6a:	4604      	mov	r4, r0
   19f6c:	b138      	cbz	r0, 19f7e <entropy_update+0x52>
   19f6e:	4638      	mov	r0, r7
   19f70:	2120      	movs	r1, #32
   19f72:	f000 fdb1 	bl	1aad8 <mbedtls_platform_zeroize>
   19f76:	4620      	mov	r0, r4
   19f78:	b00b      	add	sp, #44	; 0x2c
   19f7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19f7e:	462a      	mov	r2, r5
   19f80:	4641      	mov	r1, r8
   19f82:	4648      	mov	r0, r9
   19f84:	f000 fe5e 	bl	1ac44 <cc_mbedtls_sha256_update_ret>
   19f88:	4604      	mov	r4, r0
   19f8a:	e7f0      	b.n	19f6e <entropy_update+0x42>
   19f8c:	af02      	add	r7, sp, #8
   19f8e:	4619      	mov	r1, r3
   19f90:	4610      	mov	r0, r2
   19f92:	2300      	movs	r3, #0
   19f94:	463a      	mov	r2, r7
   19f96:	f001 fad1 	bl	1b53c <cc_mbedtls_sha256_ret>
   19f9a:	4604      	mov	r4, r0
   19f9c:	2800      	cmp	r0, #0
   19f9e:	d1e6      	bne.n	19f6e <entropy_update+0x42>
   19fa0:	2320      	movs	r3, #32
   19fa2:	461d      	mov	r5, r3
   19fa4:	46b8      	mov	r8, r7
   19fa6:	e7cc      	b.n	19f42 <entropy_update+0x16>

00019fa8 <entropy_gather_internal.part.0>:
   19fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   19faa:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   19fae:	b0a7      	sub	sp, #156	; 0x9c
   19fb0:	2b00      	cmp	r3, #0
   19fb2:	bfd8      	it	le
   19fb4:	ae02      	addle	r6, sp, #8
   19fb6:	dd2c      	ble.n	1a012 <entropy_gather_internal.part.0+0x6a>
   19fb8:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   19fbc:	4605      	mov	r5, r0
   19fbe:	2300      	movs	r3, #0
   19fc0:	ae02      	add	r6, sp, #8
   19fc2:	9301      	str	r3, [sp, #4]
   19fc4:	f1a4 0701 	sub.w	r7, r4, #1
   19fc8:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   19fcc:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   19fd0:	4631      	mov	r1, r6
   19fd2:	ab01      	add	r3, sp, #4
   19fd4:	2290      	movs	r2, #144	; 0x90
   19fd6:	47a0      	blx	r4
   19fd8:	fab7 f787 	clz	r7, r7
   19fdc:	097f      	lsrs	r7, r7, #5
   19fde:	4604      	mov	r4, r0
   19fe0:	b910      	cbnz	r0, 19fe8 <entropy_gather_internal.part.0+0x40>
   19fe2:	9b01      	ldr	r3, [sp, #4]
   19fe4:	b93b      	cbnz	r3, 19ff6 <entropy_gather_internal.part.0+0x4e>
   19fe6:	b1a7      	cbz	r7, 1a012 <entropy_gather_internal.part.0+0x6a>
   19fe8:	4630      	mov	r0, r6
   19fea:	2190      	movs	r1, #144	; 0x90
   19fec:	f000 fd74 	bl	1aad8 <mbedtls_platform_zeroize>
   19ff0:	4620      	mov	r0, r4
   19ff2:	b027      	add	sp, #156	; 0x9c
   19ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19ff6:	4601      	mov	r1, r0
   19ff8:	4632      	mov	r2, r6
   19ffa:	4628      	mov	r0, r5
   19ffc:	f7ff ff96 	bl	19f2c <entropy_update>
   1a000:	b950      	cbnz	r0, 1a018 <entropy_gather_internal.part.0+0x70>
   1a002:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   1a006:	9a01      	ldr	r2, [sp, #4]
   1a008:	4413      	add	r3, r2
   1a00a:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   1a00e:	2f00      	cmp	r7, #0
   1a010:	d1ea      	bne.n	19fe8 <entropy_gather_internal.part.0+0x40>
   1a012:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1a016:	e7e7      	b.n	19fe8 <entropy_gather_internal.part.0+0x40>
   1a018:	4604      	mov	r4, r0
   1a01a:	4620      	mov	r0, r4
   1a01c:	b027      	add	sp, #156	; 0x9c
   1a01e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a020 <cc_mbedtls_entropy_init>:
   1a020:	b570      	push	{r4, r5, r6, lr}
   1a022:	2500      	movs	r5, #0
   1a024:	4604      	mov	r4, r0
   1a026:	4629      	mov	r1, r5
   1a028:	2214      	movs	r2, #20
   1a02a:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   1a02e:	30f8      	adds	r0, #248	; 0xf8
   1a030:	f003 fe1a 	bl	1dc68 <memset>
   1a034:	4b15      	ldr	r3, [pc, #84]	; (1a08c <cc_mbedtls_entropy_init+0x6c>)
   1a036:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   1a03a:	681b      	ldr	r3, [r3, #0]
   1a03c:	4630      	mov	r0, r6
   1a03e:	4798      	blx	r3
   1a040:	4620      	mov	r0, r4
   1a042:	f840 5b04 	str.w	r5, [r0], #4
   1a046:	f000 fdcf 	bl	1abe8 <cc_mbedtls_sha256_init>
   1a04a:	4b11      	ldr	r3, [pc, #68]	; (1a090 <cc_mbedtls_entropy_init+0x70>)
   1a04c:	4630      	mov	r0, r6
   1a04e:	681b      	ldr	r3, [r3, #0]
   1a050:	4798      	blx	r3
   1a052:	b9c8      	cbnz	r0, 1a088 <cc_mbedtls_entropy_init+0x68>
   1a054:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1a058:	42ab      	cmp	r3, r5
   1a05a:	dc0f      	bgt.n	1a07c <cc_mbedtls_entropy_init+0x5c>
   1a05c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1a060:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1a064:	490b      	ldr	r1, [pc, #44]	; (1a094 <cc_mbedtls_entropy_init+0x74>)
   1a066:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   1a06a:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
   1a06e:	3301      	adds	r3, #1
   1a070:	2020      	movs	r0, #32
   1a072:	2101      	movs	r1, #1
   1a074:	e9c2 0141 	strd	r0, r1, [r2, #260]	; 0x104
   1a078:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   1a07c:	4b06      	ldr	r3, [pc, #24]	; (1a098 <cc_mbedtls_entropy_init+0x78>)
   1a07e:	4630      	mov	r0, r6
   1a080:	681b      	ldr	r3, [r3, #0]
   1a082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a086:	4718      	bx	r3
   1a088:	bd70      	pop	{r4, r5, r6, pc}
   1a08a:	bf00      	nop
   1a08c:	20000698 	.word	0x20000698
   1a090:	2000069c 	.word	0x2000069c
   1a094:	0001aaed 	.word	0x0001aaed
   1a098:	200006a0 	.word	0x200006a0

0001a09c <cc_mbedtls_entropy_func>:
   1a09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a0a0:	2a20      	cmp	r2, #32
   1a0a2:	b088      	sub	sp, #32
   1a0a4:	d876      	bhi.n	1a194 <cc_mbedtls_entropy_func+0xf8>
   1a0a6:	4b3d      	ldr	r3, [pc, #244]	; (1a19c <cc_mbedtls_entropy_func+0x100>)
   1a0a8:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   1a0ac:	681b      	ldr	r3, [r3, #0]
   1a0ae:	4604      	mov	r4, r0
   1a0b0:	4648      	mov	r0, r9
   1a0b2:	4617      	mov	r7, r2
   1a0b4:	4688      	mov	r8, r1
   1a0b6:	4798      	blx	r3
   1a0b8:	4605      	mov	r5, r0
   1a0ba:	bba0      	cbnz	r0, 1a126 <cc_mbedtls_entropy_func+0x8a>
   1a0bc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1a0c0:	f240 1601 	movw	r6, #257	; 0x101
   1a0c4:	e001      	b.n	1a0ca <cc_mbedtls_entropy_func+0x2e>
   1a0c6:	3e01      	subs	r6, #1
   1a0c8:	d060      	beq.n	1a18c <cc_mbedtls_entropy_func+0xf0>
   1a0ca:	4620      	mov	r0, r4
   1a0cc:	b37b      	cbz	r3, 1a12e <cc_mbedtls_entropy_func+0x92>
   1a0ce:	f7ff ff6b 	bl	19fa8 <entropy_gather_internal.part.0>
   1a0d2:	4605      	mov	r5, r0
   1a0d4:	bb68      	cbnz	r0, 1a132 <cc_mbedtls_entropy_func+0x96>
   1a0d6:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1a0da:	2b00      	cmp	r3, #0
   1a0dc:	ddf3      	ble.n	1a0c6 <cc_mbedtls_entropy_func+0x2a>
   1a0de:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   1a0e2:	4290      	cmp	r0, r2
   1a0e4:	d3ef      	bcc.n	1a0c6 <cc_mbedtls_entropy_func+0x2a>
   1a0e6:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1a0ea:	2a01      	cmp	r2, #1
   1a0ec:	d1eb      	bne.n	1a0c6 <cc_mbedtls_entropy_func+0x2a>
   1a0ee:	281f      	cmp	r0, #31
   1a0f0:	d9e9      	bls.n	1a0c6 <cc_mbedtls_entropy_func+0x2a>
   1a0f2:	466e      	mov	r6, sp
   1a0f4:	4629      	mov	r1, r5
   1a0f6:	2220      	movs	r2, #32
   1a0f8:	4630      	mov	r0, r6
   1a0fa:	f104 0a04 	add.w	sl, r4, #4
   1a0fe:	f003 fdb3 	bl	1dc68 <memset>
   1a102:	4631      	mov	r1, r6
   1a104:	4650      	mov	r0, sl
   1a106:	f000 fda5 	bl	1ac54 <cc_mbedtls_sha256_finish_ret>
   1a10a:	4605      	mov	r5, r0
   1a10c:	b198      	cbz	r0, 1a136 <cc_mbedtls_entropy_func+0x9a>
   1a10e:	4630      	mov	r0, r6
   1a110:	2120      	movs	r1, #32
   1a112:	f000 fce1 	bl	1aad8 <mbedtls_platform_zeroize>
   1a116:	4b22      	ldr	r3, [pc, #136]	; (1a1a0 <cc_mbedtls_entropy_func+0x104>)
   1a118:	4648      	mov	r0, r9
   1a11a:	681b      	ldr	r3, [r3, #0]
   1a11c:	4798      	blx	r3
   1a11e:	2800      	cmp	r0, #0
   1a120:	bf18      	it	ne
   1a122:	f06f 051d 	mvnne.w	r5, #29
   1a126:	4628      	mov	r0, r5
   1a128:	b008      	add	sp, #32
   1a12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a12e:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1a132:	466e      	mov	r6, sp
   1a134:	e7eb      	b.n	1a10e <cc_mbedtls_entropy_func+0x72>
   1a136:	4650      	mov	r0, sl
   1a138:	f000 fd6a 	bl	1ac10 <cc_mbedtls_sha256_free>
   1a13c:	4650      	mov	r0, sl
   1a13e:	f000 fd53 	bl	1abe8 <cc_mbedtls_sha256_init>
   1a142:	4629      	mov	r1, r5
   1a144:	4650      	mov	r0, sl
   1a146:	f000 fd69 	bl	1ac1c <cc_mbedtls_sha256_starts_ret>
   1a14a:	4605      	mov	r5, r0
   1a14c:	2800      	cmp	r0, #0
   1a14e:	d1de      	bne.n	1a10e <cc_mbedtls_entropy_func+0x72>
   1a150:	4650      	mov	r0, sl
   1a152:	2220      	movs	r2, #32
   1a154:	4631      	mov	r1, r6
   1a156:	f000 fd75 	bl	1ac44 <cc_mbedtls_sha256_update_ret>
   1a15a:	4605      	mov	r5, r0
   1a15c:	2800      	cmp	r0, #0
   1a15e:	d1d6      	bne.n	1a10e <cc_mbedtls_entropy_func+0x72>
   1a160:	4603      	mov	r3, r0
   1a162:	4632      	mov	r2, r6
   1a164:	2120      	movs	r1, #32
   1a166:	4630      	mov	r0, r6
   1a168:	f001 f9e8 	bl	1b53c <cc_mbedtls_sha256_ret>
   1a16c:	4605      	mov	r5, r0
   1a16e:	2800      	cmp	r0, #0
   1a170:	d1cd      	bne.n	1a10e <cc_mbedtls_entropy_func+0x72>
   1a172:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1a176:	2b00      	cmp	r3, #0
   1a178:	bfc4      	itt	gt
   1a17a:	2300      	movgt	r3, #0
   1a17c:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   1a180:	463a      	mov	r2, r7
   1a182:	4640      	mov	r0, r8
   1a184:	4631      	mov	r1, r6
   1a186:	f003 fd64 	bl	1dc52 <memcpy>
   1a18a:	e7c0      	b.n	1a10e <cc_mbedtls_entropy_func+0x72>
   1a18c:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1a190:	466e      	mov	r6, sp
   1a192:	e7bc      	b.n	1a10e <cc_mbedtls_entropy_func+0x72>
   1a194:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1a198:	e7c5      	b.n	1a126 <cc_mbedtls_entropy_func+0x8a>
   1a19a:	bf00      	nop
   1a19c:	2000069c 	.word	0x2000069c
   1a1a0:	200006a0 	.word	0x200006a0

0001a1a4 <RndStartupTest.constprop.0>:
   1a1a4:	b530      	push	{r4, r5, lr}
   1a1a6:	b08d      	sub	sp, #52	; 0x34
   1a1a8:	2100      	movs	r1, #0
   1a1aa:	2228      	movs	r2, #40	; 0x28
   1a1ac:	a802      	add	r0, sp, #8
   1a1ae:	9101      	str	r1, [sp, #4]
   1a1b0:	f003 fd5a 	bl	1dc68 <memset>
   1a1b4:	a802      	add	r0, sp, #8
   1a1b6:	f001 f9e9 	bl	1b58c <RNG_PLAT_SetUserRngParameters>
   1a1ba:	4604      	mov	r4, r0
   1a1bc:	b110      	cbz	r0, 1a1c4 <RndStartupTest.constprop.0+0x20>
   1a1be:	4620      	mov	r0, r4
   1a1c0:	b00d      	add	sp, #52	; 0x34
   1a1c2:	bd30      	pop	{r4, r5, pc}
   1a1c4:	4d18      	ldr	r5, [pc, #96]	; (1a228 <RndStartupTest.constprop.0+0x84>)
   1a1c6:	f04f 31ff 	mov.w	r1, #4294967295
   1a1ca:	6828      	ldr	r0, [r5, #0]
   1a1cc:	f000 f93c 	bl	1a448 <CC_PalMutexLock>
   1a1d0:	4604      	mov	r4, r0
   1a1d2:	b9c0      	cbnz	r0, 1a206 <RndStartupTest.constprop.0+0x62>
   1a1d4:	2000      	movs	r0, #0
   1a1d6:	f000 f967 	bl	1a4a8 <CC_PalPowerSaveModeSelect>
   1a1da:	bb00      	cbnz	r0, 1a21e <RndStartupTest.constprop.0+0x7a>
   1a1dc:	4a13      	ldr	r2, [pc, #76]	; (1a22c <RndStartupTest.constprop.0+0x88>)
   1a1de:	a902      	add	r1, sp, #8
   1a1e0:	a801      	add	r0, sp, #4
   1a1e2:	f000 fc6b 	bl	1aabc <LLF_RND_RunTrngStartupTest>
   1a1e6:	4604      	mov	r4, r0
   1a1e8:	2001      	movs	r0, #1
   1a1ea:	f000 f95d 	bl	1a4a8 <CC_PalPowerSaveModeSelect>
   1a1ee:	b990      	cbnz	r0, 1a216 <RndStartupTest.constprop.0+0x72>
   1a1f0:	6828      	ldr	r0, [r5, #0]
   1a1f2:	f000 f931 	bl	1a458 <CC_PalMutexUnlock>
   1a1f6:	2800      	cmp	r0, #0
   1a1f8:	d0e1      	beq.n	1a1be <RndStartupTest.constprop.0+0x1a>
   1a1fa:	480d      	ldr	r0, [pc, #52]	; (1a230 <RndStartupTest.constprop.0+0x8c>)
   1a1fc:	f7ff fd8e 	bl	19d1c <CC_PalAbort>
   1a200:	4620      	mov	r0, r4
   1a202:	b00d      	add	sp, #52	; 0x34
   1a204:	bd30      	pop	{r4, r5, pc}
   1a206:	480b      	ldr	r0, [pc, #44]	; (1a234 <RndStartupTest.constprop.0+0x90>)
   1a208:	f7ff fd88 	bl	19d1c <CC_PalAbort>
   1a20c:	2c01      	cmp	r4, #1
   1a20e:	bf08      	it	eq
   1a210:	2405      	moveq	r4, #5
   1a212:	d0ed      	beq.n	1a1f0 <RndStartupTest.constprop.0+0x4c>
   1a214:	e7de      	b.n	1a1d4 <RndStartupTest.constprop.0+0x30>
   1a216:	4808      	ldr	r0, [pc, #32]	; (1a238 <RndStartupTest.constprop.0+0x94>)
   1a218:	f7ff fd80 	bl	19d1c <CC_PalAbort>
   1a21c:	e7e8      	b.n	1a1f0 <RndStartupTest.constprop.0+0x4c>
   1a21e:	4807      	ldr	r0, [pc, #28]	; (1a23c <RndStartupTest.constprop.0+0x98>)
   1a220:	f7ff fd7c 	bl	19d1c <CC_PalAbort>
   1a224:	e7da      	b.n	1a1dc <RndStartupTest.constprop.0+0x38>
   1a226:	bf00      	nop
   1a228:	20000694 	.word	0x20000694
   1a22c:	20002658 	.word	0x20002658
   1a230:	00021794 	.word	0x00021794
   1a234:	0002173c 	.word	0x0002173c
   1a238:	00021774 	.word	0x00021774
   1a23c:	00021754 	.word	0x00021754

0001a240 <CC_LibInit>:
   1a240:	b510      	push	{r4, lr}
   1a242:	b082      	sub	sp, #8
   1a244:	f000 f854 	bl	1a2f0 <CC_HalInit>
   1a248:	b128      	cbz	r0, 1a256 <CC_LibInit+0x16>
   1a24a:	f000 f8a3 	bl	1a394 <CC_PalTerminate>
   1a24e:	2403      	movs	r4, #3
   1a250:	4620      	mov	r0, r4
   1a252:	b002      	add	sp, #8
   1a254:	bd10      	pop	{r4, pc}
   1a256:	f000 f86f 	bl	1a338 <CC_PalInit>
   1a25a:	b9d0      	cbnz	r0, 1a292 <CC_LibInit+0x52>
   1a25c:	f000 f924 	bl	1a4a8 <CC_PalPowerSaveModeSelect>
   1a260:	b9d8      	cbnz	r0, 1a29a <CC_LibInit+0x5a>
   1a262:	4b1e      	ldr	r3, [pc, #120]	; (1a2dc <CC_LibInit+0x9c>)
   1a264:	681b      	ldr	r3, [r3, #0]
   1a266:	0e1b      	lsrs	r3, r3, #24
   1a268:	2bf0      	cmp	r3, #240	; 0xf0
   1a26a:	d10a      	bne.n	1a282 <CC_LibInit+0x42>
   1a26c:	4a1c      	ldr	r2, [pc, #112]	; (1a2e0 <CC_LibInit+0xa0>)
   1a26e:	4b1d      	ldr	r3, [pc, #116]	; (1a2e4 <CC_LibInit+0xa4>)
   1a270:	6812      	ldr	r2, [r2, #0]
   1a272:	429a      	cmp	r2, r3
   1a274:	d029      	beq.n	1a2ca <CC_LibInit+0x8a>
   1a276:	f000 f83d 	bl	1a2f4 <CC_HalTerminate>
   1a27a:	2407      	movs	r4, #7
   1a27c:	f000 f88a 	bl	1a394 <CC_PalTerminate>
   1a280:	e7e6      	b.n	1a250 <CC_LibInit+0x10>
   1a282:	f000 f837 	bl	1a2f4 <CC_HalTerminate>
   1a286:	f000 f885 	bl	1a394 <CC_PalTerminate>
   1a28a:	2406      	movs	r4, #6
   1a28c:	4620      	mov	r0, r4
   1a28e:	b002      	add	sp, #8
   1a290:	bd10      	pop	{r4, pc}
   1a292:	2404      	movs	r4, #4
   1a294:	4620      	mov	r0, r4
   1a296:	b002      	add	sp, #8
   1a298:	bd10      	pop	{r4, pc}
   1a29a:	f000 f82b 	bl	1a2f4 <CC_HalTerminate>
   1a29e:	f000 f879 	bl	1a394 <CC_PalTerminate>
   1a2a2:	f7ff ff7f 	bl	1a1a4 <RndStartupTest.constprop.0>
   1a2a6:	4604      	mov	r4, r0
   1a2a8:	b958      	cbnz	r0, 1a2c2 <CC_LibInit+0x82>
   1a2aa:	4602      	mov	r2, r0
   1a2ac:	4601      	mov	r1, r0
   1a2ae:	f7ff fd5d 	bl	19d6c <nrf_cc3xx_platform_ctr_drbg_init>
   1a2b2:	b930      	cbnz	r0, 1a2c2 <CC_LibInit+0x82>
   1a2b4:	490c      	ldr	r1, [pc, #48]	; (1a2e8 <CC_LibInit+0xa8>)
   1a2b6:	ab01      	add	r3, sp, #4
   1a2b8:	2268      	movs	r2, #104	; 0x68
   1a2ba:	f7ff fd8b 	bl	19dd4 <nrf_cc3xx_platform_ctr_drbg_get>
   1a2be:	2800      	cmp	r0, #0
   1a2c0:	d0c6      	beq.n	1a250 <CC_LibInit+0x10>
   1a2c2:	2405      	movs	r4, #5
   1a2c4:	4620      	mov	r0, r4
   1a2c6:	b002      	add	sp, #8
   1a2c8:	bd10      	pop	{r4, pc}
   1a2ca:	2001      	movs	r0, #1
   1a2cc:	f000 f8ec 	bl	1a4a8 <CC_PalPowerSaveModeSelect>
   1a2d0:	2800      	cmp	r0, #0
   1a2d2:	d1e2      	bne.n	1a29a <CC_LibInit+0x5a>
   1a2d4:	4b05      	ldr	r3, [pc, #20]	; (1a2ec <CC_LibInit+0xac>)
   1a2d6:	6018      	str	r0, [r3, #0]
   1a2d8:	e7e3      	b.n	1a2a2 <CC_LibInit+0x62>
   1a2da:	bf00      	nop
   1a2dc:	5002b928 	.word	0x5002b928
   1a2e0:	5002ba24 	.word	0x5002ba24
   1a2e4:	20e00000 	.word	0x20e00000
   1a2e8:	200025f0 	.word	0x200025f0
   1a2ec:	5002ba0c 	.word	0x5002ba0c

0001a2f0 <CC_HalInit>:
   1a2f0:	2000      	movs	r0, #0
   1a2f2:	4770      	bx	lr

0001a2f4 <CC_HalTerminate>:
   1a2f4:	2000      	movs	r0, #0
   1a2f6:	4770      	bx	lr

0001a2f8 <CC_HalClearInterruptBit>:
   1a2f8:	0543      	lsls	r3, r0, #21
   1a2fa:	d503      	bpl.n	1a304 <CC_HalClearInterruptBit+0xc>
   1a2fc:	4b03      	ldr	r3, [pc, #12]	; (1a30c <CC_HalClearInterruptBit+0x14>)
   1a2fe:	f04f 32ff 	mov.w	r2, #4294967295
   1a302:	601a      	str	r2, [r3, #0]
   1a304:	4b02      	ldr	r3, [pc, #8]	; (1a310 <CC_HalClearInterruptBit+0x18>)
   1a306:	6018      	str	r0, [r3, #0]
   1a308:	4770      	bx	lr
   1a30a:	bf00      	nop
   1a30c:	5002b108 	.word	0x5002b108
   1a310:	5002ba08 	.word	0x5002ba08

0001a314 <CC_HalMaskInterrupt>:
   1a314:	4b01      	ldr	r3, [pc, #4]	; (1a31c <CC_HalMaskInterrupt+0x8>)
   1a316:	6018      	str	r0, [r3, #0]
   1a318:	4770      	bx	lr
   1a31a:	bf00      	nop
   1a31c:	5002ba04 	.word	0x5002ba04

0001a320 <CC_HalWaitInterrupt>:
   1a320:	b108      	cbz	r0, 1a326 <CC_HalWaitInterrupt+0x6>
   1a322:	f000 b86f 	b.w	1a404 <CC_PalWaitInterrupt>
   1a326:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1a32a:	4770      	bx	lr

0001a32c <CC_HalWaitInterruptRND>:
   1a32c:	b108      	cbz	r0, 1a332 <CC_HalWaitInterruptRND+0x6>
   1a32e:	f000 b84f 	b.w	1a3d0 <CC_PalWaitInterruptRND>
   1a332:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1a336:	4770      	bx	lr

0001a338 <CC_PalInit>:
   1a338:	b510      	push	{r4, lr}
   1a33a:	4811      	ldr	r0, [pc, #68]	; (1a380 <CC_PalInit+0x48>)
   1a33c:	f000 f870 	bl	1a420 <CC_PalMutexCreate>
   1a340:	b100      	cbz	r0, 1a344 <CC_PalInit+0xc>
   1a342:	bd10      	pop	{r4, pc}
   1a344:	480f      	ldr	r0, [pc, #60]	; (1a384 <CC_PalInit+0x4c>)
   1a346:	f000 f86b 	bl	1a420 <CC_PalMutexCreate>
   1a34a:	2800      	cmp	r0, #0
   1a34c:	d1f9      	bne.n	1a342 <CC_PalInit+0xa>
   1a34e:	4c0e      	ldr	r4, [pc, #56]	; (1a388 <CC_PalInit+0x50>)
   1a350:	4620      	mov	r0, r4
   1a352:	f000 f865 	bl	1a420 <CC_PalMutexCreate>
   1a356:	2800      	cmp	r0, #0
   1a358:	d1f3      	bne.n	1a342 <CC_PalInit+0xa>
   1a35a:	4b0c      	ldr	r3, [pc, #48]	; (1a38c <CC_PalInit+0x54>)
   1a35c:	480c      	ldr	r0, [pc, #48]	; (1a390 <CC_PalInit+0x58>)
   1a35e:	601c      	str	r4, [r3, #0]
   1a360:	f000 f85e 	bl	1a420 <CC_PalMutexCreate>
   1a364:	4601      	mov	r1, r0
   1a366:	2800      	cmp	r0, #0
   1a368:	d1eb      	bne.n	1a342 <CC_PalInit+0xa>
   1a36a:	f000 f82d 	bl	1a3c8 <CC_PalDmaInit>
   1a36e:	4604      	mov	r4, r0
   1a370:	b108      	cbz	r0, 1a376 <CC_PalInit+0x3e>
   1a372:	4620      	mov	r0, r4
   1a374:	bd10      	pop	{r4, pc}
   1a376:	f000 f879 	bl	1a46c <CC_PalPowerSaveModeInit>
   1a37a:	4620      	mov	r0, r4
   1a37c:	e7fa      	b.n	1a374 <CC_PalInit+0x3c>
   1a37e:	bf00      	nop
   1a380:	20000690 	.word	0x20000690
   1a384:	20000684 	.word	0x20000684
   1a388:	2000068c 	.word	0x2000068c
   1a38c:	20000694 	.word	0x20000694
   1a390:	20000688 	.word	0x20000688

0001a394 <CC_PalTerminate>:
   1a394:	b508      	push	{r3, lr}
   1a396:	4808      	ldr	r0, [pc, #32]	; (1a3b8 <CC_PalTerminate+0x24>)
   1a398:	f000 f84c 	bl	1a434 <CC_PalMutexDestroy>
   1a39c:	4807      	ldr	r0, [pc, #28]	; (1a3bc <CC_PalTerminate+0x28>)
   1a39e:	f000 f849 	bl	1a434 <CC_PalMutexDestroy>
   1a3a2:	4807      	ldr	r0, [pc, #28]	; (1a3c0 <CC_PalTerminate+0x2c>)
   1a3a4:	f000 f846 	bl	1a434 <CC_PalMutexDestroy>
   1a3a8:	4806      	ldr	r0, [pc, #24]	; (1a3c4 <CC_PalTerminate+0x30>)
   1a3aa:	f000 f843 	bl	1a434 <CC_PalMutexDestroy>
   1a3ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1a3b2:	f000 b80b 	b.w	1a3cc <CC_PalDmaTerminate>
   1a3b6:	bf00      	nop
   1a3b8:	20000690 	.word	0x20000690
   1a3bc:	20000684 	.word	0x20000684
   1a3c0:	2000068c 	.word	0x2000068c
   1a3c4:	20000688 	.word	0x20000688

0001a3c8 <CC_PalDmaInit>:
   1a3c8:	2000      	movs	r0, #0
   1a3ca:	4770      	bx	lr

0001a3cc <CC_PalDmaTerminate>:
   1a3cc:	4770      	bx	lr
   1a3ce:	bf00      	nop

0001a3d0 <CC_PalWaitInterruptRND>:
   1a3d0:	b410      	push	{r4}
   1a3d2:	4c08      	ldr	r4, [pc, #32]	; (1a3f4 <CC_PalWaitInterruptRND+0x24>)
   1a3d4:	4602      	mov	r2, r0
   1a3d6:	6823      	ldr	r3, [r4, #0]
   1a3d8:	4213      	tst	r3, r2
   1a3da:	d0fc      	beq.n	1a3d6 <CC_PalWaitInterruptRND+0x6>
   1a3dc:	b121      	cbz	r1, 1a3e8 <CC_PalWaitInterruptRND+0x18>
   1a3de:	4b06      	ldr	r3, [pc, #24]	; (1a3f8 <CC_PalWaitInterruptRND+0x28>)
   1a3e0:	4806      	ldr	r0, [pc, #24]	; (1a3fc <CC_PalWaitInterruptRND+0x2c>)
   1a3e2:	681b      	ldr	r3, [r3, #0]
   1a3e4:	600b      	str	r3, [r1, #0]
   1a3e6:	6003      	str	r3, [r0, #0]
   1a3e8:	4b05      	ldr	r3, [pc, #20]	; (1a400 <CC_PalWaitInterruptRND+0x30>)
   1a3ea:	601a      	str	r2, [r3, #0]
   1a3ec:	2000      	movs	r0, #0
   1a3ee:	bc10      	pop	{r4}
   1a3f0:	4770      	bx	lr
   1a3f2:	bf00      	nop
   1a3f4:	5002ba00 	.word	0x5002ba00
   1a3f8:	5002b104 	.word	0x5002b104
   1a3fc:	5002b108 	.word	0x5002b108
   1a400:	5002ba08 	.word	0x5002ba08

0001a404 <CC_PalWaitInterrupt>:
   1a404:	4904      	ldr	r1, [pc, #16]	; (1a418 <CC_PalWaitInterrupt+0x14>)
   1a406:	4602      	mov	r2, r0
   1a408:	680b      	ldr	r3, [r1, #0]
   1a40a:	421a      	tst	r2, r3
   1a40c:	d0fc      	beq.n	1a408 <CC_PalWaitInterrupt+0x4>
   1a40e:	4b03      	ldr	r3, [pc, #12]	; (1a41c <CC_PalWaitInterrupt+0x18>)
   1a410:	2000      	movs	r0, #0
   1a412:	601a      	str	r2, [r3, #0]
   1a414:	4770      	bx	lr
   1a416:	bf00      	nop
   1a418:	5002ba00 	.word	0x5002ba00
   1a41c:	5002ba08 	.word	0x5002ba08

0001a420 <CC_PalMutexCreate>:
   1a420:	b508      	push	{r3, lr}
   1a422:	4b03      	ldr	r3, [pc, #12]	; (1a430 <CC_PalMutexCreate+0x10>)
   1a424:	6802      	ldr	r2, [r0, #0]
   1a426:	681b      	ldr	r3, [r3, #0]
   1a428:	6810      	ldr	r0, [r2, #0]
   1a42a:	4798      	blx	r3
   1a42c:	2000      	movs	r0, #0
   1a42e:	bd08      	pop	{r3, pc}
   1a430:	20000644 	.word	0x20000644

0001a434 <CC_PalMutexDestroy>:
   1a434:	b508      	push	{r3, lr}
   1a436:	4b03      	ldr	r3, [pc, #12]	; (1a444 <CC_PalMutexDestroy+0x10>)
   1a438:	6802      	ldr	r2, [r0, #0]
   1a43a:	685b      	ldr	r3, [r3, #4]
   1a43c:	6810      	ldr	r0, [r2, #0]
   1a43e:	4798      	blx	r3
   1a440:	2000      	movs	r0, #0
   1a442:	bd08      	pop	{r3, pc}
   1a444:	20000644 	.word	0x20000644

0001a448 <CC_PalMutexLock>:
   1a448:	4b02      	ldr	r3, [pc, #8]	; (1a454 <CC_PalMutexLock+0xc>)
   1a44a:	6802      	ldr	r2, [r0, #0]
   1a44c:	689b      	ldr	r3, [r3, #8]
   1a44e:	6810      	ldr	r0, [r2, #0]
   1a450:	4718      	bx	r3
   1a452:	bf00      	nop
   1a454:	20000644 	.word	0x20000644

0001a458 <CC_PalMutexUnlock>:
   1a458:	b508      	push	{r3, lr}
   1a45a:	4b03      	ldr	r3, [pc, #12]	; (1a468 <CC_PalMutexUnlock+0x10>)
   1a45c:	6802      	ldr	r2, [r0, #0]
   1a45e:	68db      	ldr	r3, [r3, #12]
   1a460:	6810      	ldr	r0, [r2, #0]
   1a462:	4798      	blx	r3
   1a464:	2000      	movs	r0, #0
   1a466:	bd08      	pop	{r3, pc}
   1a468:	20000644 	.word	0x20000644

0001a46c <CC_PalPowerSaveModeInit>:
   1a46c:	b570      	push	{r4, r5, r6, lr}
   1a46e:	4c09      	ldr	r4, [pc, #36]	; (1a494 <CC_PalPowerSaveModeInit+0x28>)
   1a470:	4d09      	ldr	r5, [pc, #36]	; (1a498 <CC_PalPowerSaveModeInit+0x2c>)
   1a472:	6920      	ldr	r0, [r4, #16]
   1a474:	68ab      	ldr	r3, [r5, #8]
   1a476:	4798      	blx	r3
   1a478:	b118      	cbz	r0, 1a482 <CC_PalPowerSaveModeInit+0x16>
   1a47a:	4b08      	ldr	r3, [pc, #32]	; (1a49c <CC_PalPowerSaveModeInit+0x30>)
   1a47c:	4808      	ldr	r0, [pc, #32]	; (1a4a0 <CC_PalPowerSaveModeInit+0x34>)
   1a47e:	685b      	ldr	r3, [r3, #4]
   1a480:	4798      	blx	r3
   1a482:	4a08      	ldr	r2, [pc, #32]	; (1a4a4 <CC_PalPowerSaveModeInit+0x38>)
   1a484:	68eb      	ldr	r3, [r5, #12]
   1a486:	6920      	ldr	r0, [r4, #16]
   1a488:	2100      	movs	r1, #0
   1a48a:	6011      	str	r1, [r2, #0]
   1a48c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a490:	4718      	bx	r3
   1a492:	bf00      	nop
   1a494:	20000654 	.word	0x20000654
   1a498:	20000644 	.word	0x20000644
   1a49c:	20000634 	.word	0x20000634
   1a4a0:	000217ac 	.word	0x000217ac
   1a4a4:	20002878 	.word	0x20002878

0001a4a8 <CC_PalPowerSaveModeSelect>:
   1a4a8:	b570      	push	{r4, r5, r6, lr}
   1a4aa:	4d1a      	ldr	r5, [pc, #104]	; (1a514 <CC_PalPowerSaveModeSelect+0x6c>)
   1a4ac:	4e1a      	ldr	r6, [pc, #104]	; (1a518 <CC_PalPowerSaveModeSelect+0x70>)
   1a4ae:	4604      	mov	r4, r0
   1a4b0:	68b2      	ldr	r2, [r6, #8]
   1a4b2:	6928      	ldr	r0, [r5, #16]
   1a4b4:	4790      	blx	r2
   1a4b6:	b9f0      	cbnz	r0, 1a4f6 <CC_PalPowerSaveModeSelect+0x4e>
   1a4b8:	b15c      	cbz	r4, 1a4d2 <CC_PalPowerSaveModeSelect+0x2a>
   1a4ba:	4c18      	ldr	r4, [pc, #96]	; (1a51c <CC_PalPowerSaveModeSelect+0x74>)
   1a4bc:	6823      	ldr	r3, [r4, #0]
   1a4be:	b1ab      	cbz	r3, 1a4ec <CC_PalPowerSaveModeSelect+0x44>
   1a4c0:	2b01      	cmp	r3, #1
   1a4c2:	d01a      	beq.n	1a4fa <CC_PalPowerSaveModeSelect+0x52>
   1a4c4:	3b01      	subs	r3, #1
   1a4c6:	6023      	str	r3, [r4, #0]
   1a4c8:	6928      	ldr	r0, [r5, #16]
   1a4ca:	68f3      	ldr	r3, [r6, #12]
   1a4cc:	4798      	blx	r3
   1a4ce:	2000      	movs	r0, #0
   1a4d0:	bd70      	pop	{r4, r5, r6, pc}
   1a4d2:	4c12      	ldr	r4, [pc, #72]	; (1a51c <CC_PalPowerSaveModeSelect+0x74>)
   1a4d4:	6821      	ldr	r1, [r4, #0]
   1a4d6:	b939      	cbnz	r1, 1a4e8 <CC_PalPowerSaveModeSelect+0x40>
   1a4d8:	4b11      	ldr	r3, [pc, #68]	; (1a520 <CC_PalPowerSaveModeSelect+0x78>)
   1a4da:	4a12      	ldr	r2, [pc, #72]	; (1a524 <CC_PalPowerSaveModeSelect+0x7c>)
   1a4dc:	2001      	movs	r0, #1
   1a4de:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   1a4e2:	6813      	ldr	r3, [r2, #0]
   1a4e4:	2b00      	cmp	r3, #0
   1a4e6:	d1fc      	bne.n	1a4e2 <CC_PalPowerSaveModeSelect+0x3a>
   1a4e8:	3101      	adds	r1, #1
   1a4ea:	6021      	str	r1, [r4, #0]
   1a4ec:	68f3      	ldr	r3, [r6, #12]
   1a4ee:	6928      	ldr	r0, [r5, #16]
   1a4f0:	4798      	blx	r3
   1a4f2:	2000      	movs	r0, #0
   1a4f4:	bd70      	pop	{r4, r5, r6, pc}
   1a4f6:	480c      	ldr	r0, [pc, #48]	; (1a528 <CC_PalPowerSaveModeSelect+0x80>)
   1a4f8:	bd70      	pop	{r4, r5, r6, pc}
   1a4fa:	4a0a      	ldr	r2, [pc, #40]	; (1a524 <CC_PalPowerSaveModeSelect+0x7c>)
   1a4fc:	6813      	ldr	r3, [r2, #0]
   1a4fe:	2b00      	cmp	r3, #0
   1a500:	d1fc      	bne.n	1a4fc <CC_PalPowerSaveModeSelect+0x54>
   1a502:	4a07      	ldr	r2, [pc, #28]	; (1a520 <CC_PalPowerSaveModeSelect+0x78>)
   1a504:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   1a508:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   1a50c:	f7ff ff02 	bl	1a314 <CC_HalMaskInterrupt>
   1a510:	6823      	ldr	r3, [r4, #0]
   1a512:	e7d7      	b.n	1a4c4 <CC_PalPowerSaveModeSelect+0x1c>
   1a514:	20000654 	.word	0x20000654
   1a518:	20000644 	.word	0x20000644
   1a51c:	20002878 	.word	0x20002878
   1a520:	5002a000 	.word	0x5002a000
   1a524:	5002b910 	.word	0x5002b910
   1a528:	ffff8fe9 	.word	0xffff8fe9

0001a52c <mutex_init>:
   1a52c:	4b01      	ldr	r3, [pc, #4]	; (1a534 <mutex_init+0x8>)
   1a52e:	681b      	ldr	r3, [r3, #0]
   1a530:	4718      	bx	r3
   1a532:	bf00      	nop
   1a534:	20000644 	.word	0x20000644

0001a538 <mutex_lock>:
   1a538:	4b01      	ldr	r3, [pc, #4]	; (1a540 <mutex_lock+0x8>)
   1a53a:	689b      	ldr	r3, [r3, #8]
   1a53c:	4718      	bx	r3
   1a53e:	bf00      	nop
   1a540:	20000644 	.word	0x20000644

0001a544 <mutex_unlock>:
   1a544:	4b01      	ldr	r3, [pc, #4]	; (1a54c <mutex_unlock+0x8>)
   1a546:	68db      	ldr	r3, [r3, #12]
   1a548:	4718      	bx	r3
   1a54a:	bf00      	nop
   1a54c:	20000644 	.word	0x20000644

0001a550 <startTrngHW>:
   1a550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a554:	2800      	cmp	r0, #0
   1a556:	d077      	beq.n	1a648 <startTrngHW+0xf8>
   1a558:	460c      	mov	r4, r1
   1a55a:	2900      	cmp	r1, #0
   1a55c:	d074      	beq.n	1a648 <startTrngHW+0xf8>
   1a55e:	461d      	mov	r5, r3
   1a560:	2b00      	cmp	r3, #0
   1a562:	d071      	beq.n	1a648 <startTrngHW+0xf8>
   1a564:	4606      	mov	r6, r0
   1a566:	b11a      	cbz	r2, 1a570 <startTrngHW+0x20>
   1a568:	2201      	movs	r2, #1
   1a56a:	2300      	movs	r3, #0
   1a56c:	602a      	str	r2, [r5, #0]
   1a56e:	6003      	str	r3, [r0, #0]
   1a570:	682b      	ldr	r3, [r5, #0]
   1a572:	2b00      	cmp	r3, #0
   1a574:	d064      	beq.n	1a640 <startTrngHW+0xf0>
   1a576:	4629      	mov	r1, r5
   1a578:	4620      	mov	r0, r4
   1a57a:	f001 f8cd 	bl	1b718 <LLF_RND_GetFastestRosc>
   1a57e:	4607      	mov	r7, r0
   1a580:	2800      	cmp	r0, #0
   1a582:	d15e      	bne.n	1a642 <startTrngHW+0xf2>
   1a584:	6828      	ldr	r0, [r5, #0]
   1a586:	4621      	mov	r1, r4
   1a588:	f001 f8a8 	bl	1b6dc <LLF_RND_GetRoscSampleCnt>
   1a58c:	4607      	mov	r7, r0
   1a58e:	2800      	cmp	r0, #0
   1a590:	d157      	bne.n	1a642 <startTrngHW+0xf2>
   1a592:	682b      	ldr	r3, [r5, #0]
   1a594:	2b08      	cmp	r3, #8
   1a596:	d066      	beq.n	1a666 <startTrngHW+0x116>
   1a598:	2b04      	cmp	r3, #4
   1a59a:	d067      	beq.n	1a66c <startTrngHW+0x11c>
   1a59c:	f1a3 0802 	sub.w	r8, r3, #2
   1a5a0:	fab8 f888 	clz	r8, r8
   1a5a4:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1a5a8:	4b32      	ldr	r3, [pc, #200]	; (1a674 <startTrngHW+0x124>)
   1a5aa:	4933      	ldr	r1, [pc, #204]	; (1a678 <startTrngHW+0x128>)
   1a5ac:	4a33      	ldr	r2, [pc, #204]	; (1a67c <startTrngHW+0x12c>)
   1a5ae:	2001      	movs	r0, #1
   1a5b0:	6018      	str	r0, [r3, #0]
   1a5b2:	469c      	mov	ip, r3
   1a5b4:	6008      	str	r0, [r1, #0]
   1a5b6:	f8cc 0000 	str.w	r0, [ip]
   1a5ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a5bc:	6013      	str	r3, [r2, #0]
   1a5be:	6811      	ldr	r1, [r2, #0]
   1a5c0:	428b      	cmp	r3, r1
   1a5c2:	d1f8      	bne.n	1a5b6 <startTrngHW+0x66>
   1a5c4:	4b2e      	ldr	r3, [pc, #184]	; (1a680 <startTrngHW+0x130>)
   1a5c6:	f04f 0900 	mov.w	r9, #0
   1a5ca:	f8c3 9000 	str.w	r9, [r3]
   1a5ce:	f04f 30ff 	mov.w	r0, #4294967295
   1a5d2:	f7ff fe91 	bl	1a2f8 <CC_HalClearInterruptBit>
   1a5d6:	4b2b      	ldr	r3, [pc, #172]	; (1a684 <startTrngHW+0x134>)
   1a5d8:	f06f 021b 	mvn.w	r2, #27
   1a5dc:	601a      	str	r2, [r3, #0]
   1a5de:	4648      	mov	r0, r9
   1a5e0:	f7ff fe98 	bl	1a314 <CC_HalMaskInterrupt>
   1a5e4:	4a28      	ldr	r2, [pc, #160]	; (1a688 <startTrngHW+0x138>)
   1a5e6:	4b29      	ldr	r3, [pc, #164]	; (1a68c <startTrngHW+0x13c>)
   1a5e8:	f8c2 8000 	str.w	r8, [r2]
   1a5ec:	6818      	ldr	r0, [r3, #0]
   1a5ee:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1a5f2:	f7ff fe8f 	bl	1a314 <CC_HalMaskInterrupt>
   1a5f6:	4b26      	ldr	r3, [pc, #152]	; (1a690 <startTrngHW+0x140>)
   1a5f8:	220a      	movs	r2, #10
   1a5fa:	601a      	str	r2, [r3, #0]
   1a5fc:	9908      	ldr	r1, [sp, #32]
   1a5fe:	6923      	ldr	r3, [r4, #16]
   1a600:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1a602:	2901      	cmp	r1, #1
   1a604:	d024      	beq.n	1a650 <startTrngHW+0x100>
   1a606:	4923      	ldr	r1, [pc, #140]	; (1a694 <startTrngHW+0x144>)
   1a608:	fba1 1303 	umull	r1, r3, r1, r3
   1a60c:	091b      	lsrs	r3, r3, #4
   1a60e:	fb03 f302 	mul.w	r3, r3, r2
   1a612:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1a616:	4920      	ldr	r1, [pc, #128]	; (1a698 <startTrngHW+0x148>)
   1a618:	4a19      	ldr	r2, [pc, #100]	; (1a680 <startTrngHW+0x130>)
   1a61a:	03db      	lsls	r3, r3, #15
   1a61c:	099b      	lsrs	r3, r3, #6
   1a61e:	600b      	str	r3, [r1, #0]
   1a620:	2301      	movs	r3, #1
   1a622:	6013      	str	r3, [r2, #0]
   1a624:	6833      	ldr	r3, [r6, #0]
   1a626:	682a      	ldr	r2, [r5, #0]
   1a628:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1a62c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1a630:	6033      	str	r3, [r6, #0]
   1a632:	682a      	ldr	r2, [r5, #0]
   1a634:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1a638:	6033      	str	r3, [r6, #0]
   1a63a:	4638      	mov	r0, r7
   1a63c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a640:	4f16      	ldr	r7, [pc, #88]	; (1a69c <startTrngHW+0x14c>)
   1a642:	4638      	mov	r0, r7
   1a644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a648:	4f15      	ldr	r7, [pc, #84]	; (1a6a0 <startTrngHW+0x150>)
   1a64a:	4638      	mov	r0, r7
   1a64c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a650:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1a654:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   1a658:	3101      	adds	r1, #1
   1a65a:	d002      	beq.n	1a662 <startTrngHW+0x112>
   1a65c:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   1a660:	e7d1      	b.n	1a606 <startTrngHW+0xb6>
   1a662:	2316      	movs	r3, #22
   1a664:	e7d3      	b.n	1a60e <startTrngHW+0xbe>
   1a666:	f04f 0803 	mov.w	r8, #3
   1a66a:	e79d      	b.n	1a5a8 <startTrngHW+0x58>
   1a66c:	f04f 0802 	mov.w	r8, #2
   1a670:	e79a      	b.n	1a5a8 <startTrngHW+0x58>
   1a672:	bf00      	nop
   1a674:	5002b1c4 	.word	0x5002b1c4
   1a678:	5002b140 	.word	0x5002b140
   1a67c:	5002b130 	.word	0x5002b130
   1a680:	5002b12c 	.word	0x5002b12c
   1a684:	5002b100 	.word	0x5002b100
   1a688:	5002b10c 	.word	0x5002b10c
   1a68c:	5002ba04 	.word	0x5002ba04
   1a690:	5002b138 	.word	0x5002b138
   1a694:	aaaaaaab 	.word	0xaaaaaaab
   1a698:	5002b1d8 	.word	0x5002b1d8
   1a69c:	00f10c31 	.word	0x00f10c31
   1a6a0:	00f10c35 	.word	0x00f10c35

0001a6a4 <LLF_RND_RepetitionCounterTest.part.0>:
   1a6a4:	b4f0      	push	{r4, r5, r6, r7}
   1a6a6:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   1a6aa:	2400      	movs	r4, #0
   1a6ac:	f10c 3cff 	add.w	ip, ip, #4294967295
   1a6b0:	4626      	mov	r6, r4
   1a6b2:	4627      	mov	r7, r4
   1a6b4:	e006      	b.n	1a6c4 <LLF_RND_RepetitionCounterTest.part.0+0x20>
   1a6b6:	429f      	cmp	r7, r3
   1a6b8:	d016      	beq.n	1a6e8 <LLF_RND_RepetitionCounterTest.part.0+0x44>
   1a6ba:	2601      	movs	r6, #1
   1a6bc:	4565      	cmp	r5, ip
   1a6be:	d819      	bhi.n	1a6f4 <LLF_RND_RepetitionCounterTest.part.0+0x50>
   1a6c0:	462c      	mov	r4, r5
   1a6c2:	461f      	mov	r7, r3
   1a6c4:	0963      	lsrs	r3, r4, #5
   1a6c6:	f004 011f 	and.w	r1, r4, #31
   1a6ca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1a6ce:	291f      	cmp	r1, #31
   1a6d0:	fa23 f301 	lsr.w	r3, r3, r1
   1a6d4:	f104 0501 	add.w	r5, r4, #1
   1a6d8:	bf18      	it	ne
   1a6da:	f003 0301 	andne.w	r3, r3, #1
   1a6de:	2c00      	cmp	r4, #0
   1a6e0:	d1e9      	bne.n	1a6b6 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   1a6e2:	2601      	movs	r6, #1
   1a6e4:	4635      	mov	r5, r6
   1a6e6:	e7eb      	b.n	1a6c0 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   1a6e8:	3601      	adds	r6, #1
   1a6ea:	4296      	cmp	r6, r2
   1a6ec:	d1e6      	bne.n	1a6bc <LLF_RND_RepetitionCounterTest.part.0+0x18>
   1a6ee:	4803      	ldr	r0, [pc, #12]	; (1a6fc <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   1a6f0:	bcf0      	pop	{r4, r5, r6, r7}
   1a6f2:	4770      	bx	lr
   1a6f4:	2000      	movs	r0, #0
   1a6f6:	bcf0      	pop	{r4, r5, r6, r7}
   1a6f8:	4770      	bx	lr
   1a6fa:	bf00      	nop
   1a6fc:	00f10c36 	.word	0x00f10c36

0001a700 <LLF_RND_AdaptiveProportionTest>:
   1a700:	2800      	cmp	r0, #0
   1a702:	d061      	beq.n	1a7c8 <LLF_RND_AdaptiveProportionTest+0xc8>
   1a704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a708:	1e4c      	subs	r4, r1, #1
   1a70a:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1a70e:	d227      	bcs.n	1a760 <LLF_RND_AdaptiveProportionTest+0x60>
   1a710:	b333      	cbz	r3, 1a760 <LLF_RND_AdaptiveProportionTest+0x60>
   1a712:	b32a      	cbz	r2, 1a760 <LLF_RND_AdaptiveProportionTest+0x60>
   1a714:	00cd      	lsls	r5, r1, #3
   1a716:	2b01      	cmp	r3, #1
   1a718:	f105 3eff 	add.w	lr, r5, #4294967295
   1a71c:	d030      	beq.n	1a780 <LLF_RND_AdaptiveProportionTest+0x80>
   1a71e:	2100      	movs	r1, #0
   1a720:	468c      	mov	ip, r1
   1a722:	460f      	mov	r7, r1
   1a724:	460e      	mov	r6, r1
   1a726:	f103 38ff 	add.w	r8, r3, #4294967295
   1a72a:	094c      	lsrs	r4, r1, #5
   1a72c:	f001 051f 	and.w	r5, r1, #31
   1a730:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   1a734:	2d1f      	cmp	r5, #31
   1a736:	fa24 f405 	lsr.w	r4, r4, r5
   1a73a:	bf18      	it	ne
   1a73c:	f004 0401 	andne.w	r4, r4, #1
   1a740:	b921      	cbnz	r1, 1a74c <LLF_RND_AdaptiveProportionTest+0x4c>
   1a742:	2601      	movs	r6, #1
   1a744:	46b4      	mov	ip, r6
   1a746:	4631      	mov	r1, r6
   1a748:	4627      	mov	r7, r4
   1a74a:	e7ee      	b.n	1a72a <LLF_RND_AdaptiveProportionTest+0x2a>
   1a74c:	42b3      	cmp	r3, r6
   1a74e:	d013      	beq.n	1a778 <LLF_RND_AdaptiveProportionTest+0x78>
   1a750:	42a7      	cmp	r7, r4
   1a752:	d101      	bne.n	1a758 <LLF_RND_AdaptiveProportionTest+0x58>
   1a754:	f10c 0c01 	add.w	ip, ip, #1
   1a758:	4546      	cmp	r6, r8
   1a75a:	d104      	bne.n	1a766 <LLF_RND_AdaptiveProportionTest+0x66>
   1a75c:	4562      	cmp	r2, ip
   1a75e:	d202      	bcs.n	1a766 <LLF_RND_AdaptiveProportionTest+0x66>
   1a760:	481a      	ldr	r0, [pc, #104]	; (1a7cc <LLF_RND_AdaptiveProportionTest+0xcc>)
   1a762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a766:	463c      	mov	r4, r7
   1a768:	3101      	adds	r1, #1
   1a76a:	458e      	cmp	lr, r1
   1a76c:	f106 0601 	add.w	r6, r6, #1
   1a770:	d2ea      	bcs.n	1a748 <LLF_RND_AdaptiveProportionTest+0x48>
   1a772:	2000      	movs	r0, #0
   1a774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a778:	2600      	movs	r6, #0
   1a77a:	f04f 0c01 	mov.w	ip, #1
   1a77e:	e7f3      	b.n	1a768 <LLF_RND_AdaptiveProportionTest+0x68>
   1a780:	2600      	movs	r6, #0
   1a782:	46b4      	mov	ip, r6
   1a784:	4637      	mov	r7, r6
   1a786:	4634      	mov	r4, r6
   1a788:	0961      	lsrs	r1, r4, #5
   1a78a:	f004 031f 	and.w	r3, r4, #31
   1a78e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1a792:	2b1f      	cmp	r3, #31
   1a794:	fa21 f103 	lsr.w	r1, r1, r3
   1a798:	bf18      	it	ne
   1a79a:	f001 0101 	andne.w	r1, r1, #1
   1a79e:	b13c      	cbz	r4, 1a7b0 <LLF_RND_AdaptiveProportionTest+0xb0>
   1a7a0:	b95f      	cbnz	r7, 1a7ba <LLF_RND_AdaptiveProportionTest+0xba>
   1a7a2:	458c      	cmp	ip, r1
   1a7a4:	d001      	beq.n	1a7aa <LLF_RND_AdaptiveProportionTest+0xaa>
   1a7a6:	4661      	mov	r1, ip
   1a7a8:	e008      	b.n	1a7bc <LLF_RND_AdaptiveProportionTest+0xbc>
   1a7aa:	3601      	adds	r6, #1
   1a7ac:	4661      	mov	r1, ip
   1a7ae:	e005      	b.n	1a7bc <LLF_RND_AdaptiveProportionTest+0xbc>
   1a7b0:	2601      	movs	r6, #1
   1a7b2:	4634      	mov	r4, r6
   1a7b4:	468c      	mov	ip, r1
   1a7b6:	2701      	movs	r7, #1
   1a7b8:	e7e6      	b.n	1a788 <LLF_RND_AdaptiveProportionTest+0x88>
   1a7ba:	463e      	mov	r6, r7
   1a7bc:	42b2      	cmp	r2, r6
   1a7be:	d3cf      	bcc.n	1a760 <LLF_RND_AdaptiveProportionTest+0x60>
   1a7c0:	3401      	adds	r4, #1
   1a7c2:	42ac      	cmp	r4, r5
   1a7c4:	d1f6      	bne.n	1a7b4 <LLF_RND_AdaptiveProportionTest+0xb4>
   1a7c6:	e7d4      	b.n	1a772 <LLF_RND_AdaptiveProportionTest+0x72>
   1a7c8:	4800      	ldr	r0, [pc, #0]	; (1a7cc <LLF_RND_AdaptiveProportionTest+0xcc>)
   1a7ca:	4770      	bx	lr
   1a7cc:	00f10c37 	.word	0x00f10c37

0001a7d0 <getTrngSource>:
   1a7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7d4:	b08d      	sub	sp, #52	; 0x34
   1a7d6:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   1a7da:	4607      	mov	r7, r0
   1a7dc:	460c      	mov	r4, r1
   1a7de:	2d00      	cmp	r5, #0
   1a7e0:	d14c      	bne.n	1a87c <getTrngSource+0xac>
   1a7e2:	f8d1 a010 	ldr.w	sl, [r1, #16]
   1a7e6:	601e      	str	r6, [r3, #0]
   1a7e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1a7ea:	2100      	movs	r1, #0
   1a7ec:	6019      	str	r1, [r3, #0]
   1a7ee:	2a00      	cmp	r2, #0
   1a7f0:	f000 811f 	beq.w	1aa32 <getTrngSource+0x262>
   1a7f4:	4a9b      	ldr	r2, [pc, #620]	; (1aa64 <getTrngSource+0x294>)
   1a7f6:	4b9c      	ldr	r3, [pc, #624]	; (1aa68 <getTrngSource+0x298>)
   1a7f8:	6811      	ldr	r1, [r2, #0]
   1a7fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1a7fc:	681b      	ldr	r3, [r3, #0]
   1a7fe:	429a      	cmp	r2, r3
   1a800:	d147      	bne.n	1a892 <getTrngSource+0xc2>
   1a802:	290a      	cmp	r1, #10
   1a804:	d145      	bne.n	1a892 <getTrngSource+0xc2>
   1a806:	78fb      	ldrb	r3, [r7, #3]
   1a808:	9304      	str	r3, [sp, #16]
   1a80a:	4b98      	ldr	r3, [pc, #608]	; (1aa6c <getTrngSource+0x29c>)
   1a80c:	fba3 230a 	umull	r2, r3, r3, sl
   1a810:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   1a814:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   1a818:	f106 0208 	add.w	r2, r6, #8
   1a81c:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   1a820:	2304      	movs	r3, #4
   1a822:	9203      	str	r2, [sp, #12]
   1a824:	9302      	str	r3, [sp, #8]
   1a826:	46b8      	mov	r8, r7
   1a828:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1a82a:	f8c3 a000 	str.w	sl, [r3]
   1a82e:	f1ba 0f00 	cmp.w	sl, #0
   1a832:	f000 80c4 	beq.w	1a9be <getTrngSource+0x1ee>
   1a836:	9e03      	ldr	r6, [sp, #12]
   1a838:	4655      	mov	r5, sl
   1a83a:	f04f 0900 	mov.w	r9, #0
   1a83e:	f000 ff7b 	bl	1b738 <LLF_RND_TurnOffTrng>
   1a842:	2300      	movs	r3, #0
   1a844:	9305      	str	r3, [sp, #20]
   1a846:	f1b8 0f00 	cmp.w	r8, #0
   1a84a:	f000 80e6 	beq.w	1aa1a <getTrngSource+0x24a>
   1a84e:	2c00      	cmp	r4, #0
   1a850:	f000 80e3 	beq.w	1aa1a <getTrngSource+0x24a>
   1a854:	9b04      	ldr	r3, [sp, #16]
   1a856:	2b00      	cmp	r3, #0
   1a858:	f000 80dd 	beq.w	1aa16 <getTrngSource+0x246>
   1a85c:	a904      	add	r1, sp, #16
   1a85e:	4620      	mov	r0, r4
   1a860:	f000 ff5a 	bl	1b718 <LLF_RND_GetFastestRosc>
   1a864:	b1b8      	cbz	r0, 1a896 <getTrngSource+0xc6>
   1a866:	4b82      	ldr	r3, [pc, #520]	; (1aa70 <getTrngSource+0x2a0>)
   1a868:	4298      	cmp	r0, r3
   1a86a:	f040 80a8 	bne.w	1a9be <getTrngSource+0x1ee>
   1a86e:	9002      	str	r0, [sp, #8]
   1a870:	f000 ff62 	bl	1b738 <LLF_RND_TurnOffTrng>
   1a874:	9802      	ldr	r0, [sp, #8]
   1a876:	b00d      	add	sp, #52	; 0x34
   1a878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a87c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1a880:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   1a884:	3001      	adds	r0, #1
   1a886:	bf14      	ite	ne
   1a888:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   1a88c:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   1a890:	e7a9      	b.n	1a7e6 <getTrngSource+0x16>
   1a892:	4878      	ldr	r0, [pc, #480]	; (1aa74 <getTrngSource+0x2a4>)
   1a894:	e7eb      	b.n	1a86e <getTrngSource+0x9e>
   1a896:	9804      	ldr	r0, [sp, #16]
   1a898:	4621      	mov	r1, r4
   1a89a:	f000 ff1f 	bl	1b6dc <LLF_RND_GetRoscSampleCnt>
   1a89e:	2800      	cmp	r0, #0
   1a8a0:	d1e1      	bne.n	1a866 <getTrngSource+0x96>
   1a8a2:	9f04      	ldr	r7, [sp, #16]
   1a8a4:	2f08      	cmp	r7, #8
   1a8a6:	f000 80ba 	beq.w	1aa1e <getTrngSource+0x24e>
   1a8aa:	2f04      	cmp	r7, #4
   1a8ac:	f000 80b9 	beq.w	1aa22 <getTrngSource+0x252>
   1a8b0:	f1a7 0702 	sub.w	r7, r7, #2
   1a8b4:	fab7 f787 	clz	r7, r7
   1a8b8:	097f      	lsrs	r7, r7, #5
   1a8ba:	496f      	ldr	r1, [pc, #444]	; (1aa78 <getTrngSource+0x2a8>)
   1a8bc:	2301      	movs	r3, #1
   1a8be:	600b      	str	r3, [r1, #0]
   1a8c0:	f841 3c84 	str.w	r3, [r1, #-132]
   1a8c4:	4619      	mov	r1, r3
   1a8c6:	4b6c      	ldr	r3, [pc, #432]	; (1aa78 <getTrngSource+0x2a8>)
   1a8c8:	4867      	ldr	r0, [pc, #412]	; (1aa68 <getTrngSource+0x298>)
   1a8ca:	6019      	str	r1, [r3, #0]
   1a8cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a8ce:	6003      	str	r3, [r0, #0]
   1a8d0:	6800      	ldr	r0, [r0, #0]
   1a8d2:	4283      	cmp	r3, r0
   1a8d4:	d1f7      	bne.n	1a8c6 <getTrngSource+0xf6>
   1a8d6:	4a69      	ldr	r2, [pc, #420]	; (1aa7c <getTrngSource+0x2ac>)
   1a8d8:	2300      	movs	r3, #0
   1a8da:	6013      	str	r3, [r2, #0]
   1a8dc:	f04f 30ff 	mov.w	r0, #4294967295
   1a8e0:	f7ff fd0a 	bl	1a2f8 <CC_HalClearInterruptBit>
   1a8e4:	2300      	movs	r3, #0
   1a8e6:	4618      	mov	r0, r3
   1a8e8:	4b65      	ldr	r3, [pc, #404]	; (1aa80 <getTrngSource+0x2b0>)
   1a8ea:	f06f 011b 	mvn.w	r1, #27
   1a8ee:	6019      	str	r1, [r3, #0]
   1a8f0:	f7ff fd10 	bl	1a314 <CC_HalMaskInterrupt>
   1a8f4:	4963      	ldr	r1, [pc, #396]	; (1aa84 <getTrngSource+0x2b4>)
   1a8f6:	4b64      	ldr	r3, [pc, #400]	; (1aa88 <getTrngSource+0x2b8>)
   1a8f8:	600f      	str	r7, [r1, #0]
   1a8fa:	6818      	ldr	r0, [r3, #0]
   1a8fc:	4f5b      	ldr	r7, [pc, #364]	; (1aa6c <getTrngSource+0x29c>)
   1a8fe:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1a902:	f7ff fd07 	bl	1a314 <CC_HalMaskInterrupt>
   1a906:	4b57      	ldr	r3, [pc, #348]	; (1aa64 <getTrngSource+0x294>)
   1a908:	4860      	ldr	r0, [pc, #384]	; (1aa8c <getTrngSource+0x2bc>)
   1a90a:	210a      	movs	r1, #10
   1a90c:	6019      	str	r1, [r3, #0]
   1a90e:	6921      	ldr	r1, [r4, #16]
   1a910:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a912:	fba7 c101 	umull	ip, r1, r7, r1
   1a916:	0909      	lsrs	r1, r1, #4
   1a918:	fb03 f301 	mul.w	r3, r3, r1
   1a91c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1a920:	03db      	lsls	r3, r3, #15
   1a922:	099b      	lsrs	r3, r3, #6
   1a924:	6003      	str	r3, [r0, #0]
   1a926:	4b55      	ldr	r3, [pc, #340]	; (1aa7c <getTrngSource+0x2ac>)
   1a928:	2201      	movs	r2, #1
   1a92a:	601a      	str	r2, [r3, #0]
   1a92c:	9904      	ldr	r1, [sp, #16]
   1a92e:	f8d8 2000 	ldr.w	r2, [r8]
   1a932:	020b      	lsls	r3, r1, #8
   1a934:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1a938:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1a93c:	4313      	orrs	r3, r2
   1a93e:	f8c8 3000 	str.w	r3, [r8]
   1a942:	a805      	add	r0, sp, #20
   1a944:	f000 feba 	bl	1b6bc <LLF_RND_WaitRngInterrupt>
   1a948:	9b05      	ldr	r3, [sp, #20]
   1a94a:	f003 031a 	and.w	r3, r3, #26
   1a94e:	4303      	orrs	r3, r0
   1a950:	d135      	bne.n	1a9be <getTrngSource+0x1ee>
   1a952:	4a4f      	ldr	r2, [pc, #316]	; (1aa90 <getTrngSource+0x2c0>)
   1a954:	4b4f      	ldr	r3, [pc, #316]	; (1aa94 <getTrngSource+0x2c4>)
   1a956:	6812      	ldr	r2, [r2, #0]
   1a958:	9206      	str	r2, [sp, #24]
   1a95a:	681a      	ldr	r2, [r3, #0]
   1a95c:	9207      	str	r2, [sp, #28]
   1a95e:	685a      	ldr	r2, [r3, #4]
   1a960:	9208      	str	r2, [sp, #32]
   1a962:	689a      	ldr	r2, [r3, #8]
   1a964:	9209      	str	r2, [sp, #36]	; 0x24
   1a966:	68da      	ldr	r2, [r3, #12]
   1a968:	920a      	str	r2, [sp, #40]	; 0x28
   1a96a:	3310      	adds	r3, #16
   1a96c:	fba7 2705 	umull	r2, r7, r7, r5
   1a970:	681b      	ldr	r3, [r3, #0]
   1a972:	930b      	str	r3, [sp, #44]	; 0x2c
   1a974:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   1a978:	d102      	bne.n	1a980 <getTrngSource+0x1b0>
   1a97a:	f1bb 0f00 	cmp.w	fp, #0
   1a97e:	d141      	bne.n	1aa04 <getTrngSource+0x234>
   1a980:	2218      	movs	r2, #24
   1a982:	4630      	mov	r0, r6
   1a984:	eb0d 0102 	add.w	r1, sp, r2
   1a988:	f000 fe3c 	bl	1b604 <CC_PalMemCopyPlat>
   1a98c:	3d18      	subs	r5, #24
   1a98e:	3618      	adds	r6, #24
   1a990:	f109 0901 	add.w	r9, r9, #1
   1a994:	2d00      	cmp	r5, #0
   1a996:	f47f af52 	bne.w	1a83e <getTrngSource+0x6e>
   1a99a:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   1a99e:	d85d      	bhi.n	1aa5c <getTrngSource+0x28c>
   1a9a0:	9d03      	ldr	r5, [sp, #12]
   1a9a2:	6962      	ldr	r2, [r4, #20]
   1a9a4:	4651      	mov	r1, sl
   1a9a6:	4628      	mov	r0, r5
   1a9a8:	f7ff fe7c 	bl	1a6a4 <LLF_RND_RepetitionCounterTest.part.0>
   1a9ac:	2800      	cmp	r0, #0
   1a9ae:	d04b      	beq.n	1aa48 <getTrngSource+0x278>
   1a9b0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1a9b2:	2300      	movs	r3, #0
   1a9b4:	6013      	str	r3, [r2, #0]
   1a9b6:	4b2e      	ldr	r3, [pc, #184]	; (1aa70 <getTrngSource+0x2a0>)
   1a9b8:	4298      	cmp	r0, r3
   1a9ba:	f43f af58 	beq.w	1a86e <getTrngSource+0x9e>
   1a9be:	9d04      	ldr	r5, [sp, #16]
   1a9c0:	2d08      	cmp	r5, #8
   1a9c2:	d034      	beq.n	1aa2e <getTrngSource+0x25e>
   1a9c4:	2200      	movs	r2, #0
   1a9c6:	ab04      	add	r3, sp, #16
   1a9c8:	006d      	lsls	r5, r5, #1
   1a9ca:	9200      	str	r2, [sp, #0]
   1a9cc:	4621      	mov	r1, r4
   1a9ce:	4640      	mov	r0, r8
   1a9d0:	9504      	str	r5, [sp, #16]
   1a9d2:	f7ff fdbd 	bl	1a550 <startTrngHW>
   1a9d6:	4b30      	ldr	r3, [pc, #192]	; (1aa98 <getTrngSource+0x2c8>)
   1a9d8:	4298      	cmp	r0, r3
   1a9da:	d024      	beq.n	1aa26 <getTrngSource+0x256>
   1a9dc:	2800      	cmp	r0, #0
   1a9de:	f47f af46 	bne.w	1a86e <getTrngSource+0x9e>
   1a9e2:	f8d8 2000 	ldr.w	r2, [r8]
   1a9e6:	0a13      	lsrs	r3, r2, #8
   1a9e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1a9ec:	4313      	orrs	r3, r2
   1a9ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1a9f2:	f8c8 3000 	str.w	r3, [r8]
   1a9f6:	9b02      	ldr	r3, [sp, #8]
   1a9f8:	3b01      	subs	r3, #1
   1a9fa:	9302      	str	r3, [sp, #8]
   1a9fc:	f47f af14 	bne.w	1a828 <getTrngSource+0x58>
   1aa00:	2000      	movs	r0, #0
   1aa02:	e734      	b.n	1a86e <getTrngSource+0x9e>
   1aa04:	4630      	mov	r0, r6
   1aa06:	465a      	mov	r2, fp
   1aa08:	a906      	add	r1, sp, #24
   1aa0a:	f000 fdfb 	bl	1b604 <CC_PalMemCopyPlat>
   1aa0e:	eba5 050b 	sub.w	r5, r5, fp
   1aa12:	445e      	add	r6, fp
   1aa14:	e7bc      	b.n	1a990 <getTrngSource+0x1c0>
   1aa16:	4820      	ldr	r0, [pc, #128]	; (1aa98 <getTrngSource+0x2c8>)
   1aa18:	e725      	b.n	1a866 <getTrngSource+0x96>
   1aa1a:	4820      	ldr	r0, [pc, #128]	; (1aa9c <getTrngSource+0x2cc>)
   1aa1c:	e723      	b.n	1a866 <getTrngSource+0x96>
   1aa1e:	2703      	movs	r7, #3
   1aa20:	e74b      	b.n	1a8ba <getTrngSource+0xea>
   1aa22:	2702      	movs	r7, #2
   1aa24:	e749      	b.n	1a8ba <getTrngSource+0xea>
   1aa26:	6a23      	ldr	r3, [r4, #32]
   1aa28:	2b00      	cmp	r3, #0
   1aa2a:	f43f af20 	beq.w	1a86e <getTrngSource+0x9e>
   1aa2e:	481c      	ldr	r0, [pc, #112]	; (1aaa0 <getTrngSource+0x2d0>)
   1aa30:	e71d      	b.n	1a86e <getTrngSource+0x9e>
   1aa32:	9500      	str	r5, [sp, #0]
   1aa34:	ab04      	add	r3, sp, #16
   1aa36:	2201      	movs	r2, #1
   1aa38:	4621      	mov	r1, r4
   1aa3a:	4638      	mov	r0, r7
   1aa3c:	f7ff fd88 	bl	1a550 <startTrngHW>
   1aa40:	2800      	cmp	r0, #0
   1aa42:	f43f aee2 	beq.w	1a80a <getTrngSource+0x3a>
   1aa46:	e712      	b.n	1a86e <getTrngSource+0x9e>
   1aa48:	69a2      	ldr	r2, [r4, #24]
   1aa4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1aa4e:	4651      	mov	r1, sl
   1aa50:	4628      	mov	r0, r5
   1aa52:	f7ff fe55 	bl	1a700 <LLF_RND_AdaptiveProportionTest>
   1aa56:	2800      	cmp	r0, #0
   1aa58:	d1aa      	bne.n	1a9b0 <getTrngSource+0x1e0>
   1aa5a:	e7d1      	b.n	1aa00 <getTrngSource+0x230>
   1aa5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1aa5e:	601d      	str	r5, [r3, #0]
   1aa60:	e7ad      	b.n	1a9be <getTrngSource+0x1ee>
   1aa62:	bf00      	nop
   1aa64:	5002b138 	.word	0x5002b138
   1aa68:	5002b130 	.word	0x5002b130
   1aa6c:	aaaaaaab 	.word	0xaaaaaaab
   1aa70:	00f10c02 	.word	0x00f10c02
   1aa74:	00f10c30 	.word	0x00f10c30
   1aa78:	5002b1c4 	.word	0x5002b1c4
   1aa7c:	5002b12c 	.word	0x5002b12c
   1aa80:	5002b100 	.word	0x5002b100
   1aa84:	5002b10c 	.word	0x5002b10c
   1aa88:	5002ba04 	.word	0x5002ba04
   1aa8c:	5002b1d8 	.word	0x5002b1d8
   1aa90:	5002b114 	.word	0x5002b114
   1aa94:	5002b118 	.word	0x5002b118
   1aa98:	00f10c31 	.word	0x00f10c31
   1aa9c:	00f10c35 	.word	0x00f10c35
   1aaa0:	00f10c32 	.word	0x00f10c32

0001aaa4 <LLF_RND_GetTrngSource>:
   1aaa4:	b430      	push	{r4, r5}
   1aaa6:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1aaaa:	9d04      	ldr	r5, [sp, #16]
   1aaac:	9402      	str	r4, [sp, #8]
   1aaae:	2400      	movs	r4, #0
   1aab0:	e9cd 5403 	strd	r5, r4, [sp, #12]
   1aab4:	bc30      	pop	{r4, r5}
   1aab6:	f7ff be8b 	b.w	1a7d0 <getTrngSource>
   1aaba:	bf00      	nop

0001aabc <LLF_RND_RunTrngStartupTest>:
   1aabc:	b510      	push	{r4, lr}
   1aabe:	b086      	sub	sp, #24
   1aac0:	ab05      	add	r3, sp, #20
   1aac2:	2401      	movs	r4, #1
   1aac4:	e9cd 2401 	strd	r2, r4, [sp, #4]
   1aac8:	9300      	str	r3, [sp, #0]
   1aaca:	2200      	movs	r2, #0
   1aacc:	ab04      	add	r3, sp, #16
   1aace:	f7ff fe7f 	bl	1a7d0 <getTrngSource>
   1aad2:	b006      	add	sp, #24
   1aad4:	bd10      	pop	{r4, pc}
   1aad6:	bf00      	nop

0001aad8 <mbedtls_platform_zeroize>:
   1aad8:	b138      	cbz	r0, 1aaea <mbedtls_platform_zeroize+0x12>
   1aada:	b131      	cbz	r1, 1aaea <mbedtls_platform_zeroize+0x12>
   1aadc:	4401      	add	r1, r0
   1aade:	2200      	movs	r2, #0
   1aae0:	4603      	mov	r3, r0
   1aae2:	3001      	adds	r0, #1
   1aae4:	4281      	cmp	r1, r0
   1aae6:	701a      	strb	r2, [r3, #0]
   1aae8:	d1fa      	bne.n	1aae0 <mbedtls_platform_zeroize+0x8>
   1aaea:	4770      	bx	lr

0001aaec <mbedtls_hardware_poll>:
   1aaec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aaee:	b089      	sub	sp, #36	; 0x24
   1aaf0:	9205      	str	r2, [sp, #20]
   1aaf2:	2900      	cmp	r1, #0
   1aaf4:	d064      	beq.n	1abc0 <mbedtls_hardware_poll+0xd4>
   1aaf6:	461c      	mov	r4, r3
   1aaf8:	2b00      	cmp	r3, #0
   1aafa:	d061      	beq.n	1abc0 <mbedtls_hardware_poll+0xd4>
   1aafc:	4615      	mov	r5, r2
   1aafe:	2a00      	cmp	r2, #0
   1ab00:	d05e      	beq.n	1abc0 <mbedtls_hardware_poll+0xd4>
   1ab02:	4f31      	ldr	r7, [pc, #196]	; (1abc8 <mbedtls_hardware_poll+0xdc>)
   1ab04:	460e      	mov	r6, r1
   1ab06:	6838      	ldr	r0, [r7, #0]
   1ab08:	f04f 31ff 	mov.w	r1, #4294967295
   1ab0c:	f7ff fc9c 	bl	1a448 <CC_PalMutexLock>
   1ab10:	2800      	cmp	r0, #0
   1ab12:	d14b      	bne.n	1abac <mbedtls_hardware_poll+0xc0>
   1ab14:	2000      	movs	r0, #0
   1ab16:	f7ff fcc7 	bl	1a4a8 <CC_PalPowerSaveModeSelect>
   1ab1a:	2800      	cmp	r0, #0
   1ab1c:	d142      	bne.n	1aba4 <mbedtls_hardware_poll+0xb8>
   1ab1e:	482b      	ldr	r0, [pc, #172]	; (1abcc <mbedtls_hardware_poll+0xe0>)
   1ab20:	f000 fd34 	bl	1b58c <RNG_PLAT_SetUserRngParameters>
   1ab24:	b1d8      	cbz	r0, 1ab5e <mbedtls_hardware_poll+0x72>
   1ab26:	2001      	movs	r0, #1
   1ab28:	f04f 36ff 	mov.w	r6, #4294967295
   1ab2c:	f7ff fcbc 	bl	1a4a8 <CC_PalPowerSaveModeSelect>
   1ab30:	2800      	cmp	r0, #0
   1ab32:	d133      	bne.n	1ab9c <mbedtls_hardware_poll+0xb0>
   1ab34:	4826      	ldr	r0, [pc, #152]	; (1abd0 <mbedtls_hardware_poll+0xe4>)
   1ab36:	f44f 7108 	mov.w	r1, #544	; 0x220
   1ab3a:	f7ff ffcd 	bl	1aad8 <mbedtls_platform_zeroize>
   1ab3e:	4825      	ldr	r0, [pc, #148]	; (1abd4 <mbedtls_hardware_poll+0xe8>)
   1ab40:	2104      	movs	r1, #4
   1ab42:	f7ff ffc9 	bl	1aad8 <mbedtls_platform_zeroize>
   1ab46:	4821      	ldr	r0, [pc, #132]	; (1abcc <mbedtls_hardware_poll+0xe0>)
   1ab48:	2128      	movs	r1, #40	; 0x28
   1ab4a:	f7ff ffc5 	bl	1aad8 <mbedtls_platform_zeroize>
   1ab4e:	6838      	ldr	r0, [r7, #0]
   1ab50:	f7ff fc82 	bl	1a458 <CC_PalMutexUnlock>
   1ab54:	2800      	cmp	r0, #0
   1ab56:	d12d      	bne.n	1abb4 <mbedtls_hardware_poll+0xc8>
   1ab58:	4630      	mov	r0, r6
   1ab5a:	b009      	add	sp, #36	; 0x24
   1ab5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ab5e:	491c      	ldr	r1, [pc, #112]	; (1abd0 <mbedtls_hardware_poll+0xe4>)
   1ab60:	9003      	str	r0, [sp, #12]
   1ab62:	ab07      	add	r3, sp, #28
   1ab64:	4602      	mov	r2, r0
   1ab66:	9102      	str	r1, [sp, #8]
   1ab68:	9300      	str	r3, [sp, #0]
   1ab6a:	4918      	ldr	r1, [pc, #96]	; (1abcc <mbedtls_hardware_poll+0xe0>)
   1ab6c:	4819      	ldr	r0, [pc, #100]	; (1abd4 <mbedtls_hardware_poll+0xe8>)
   1ab6e:	9401      	str	r4, [sp, #4]
   1ab70:	ab05      	add	r3, sp, #20
   1ab72:	f7ff ff97 	bl	1aaa4 <LLF_RND_GetTrngSource>
   1ab76:	4603      	mov	r3, r0
   1ab78:	2800      	cmp	r0, #0
   1ab7a:	d1d4      	bne.n	1ab26 <mbedtls_hardware_poll+0x3a>
   1ab7c:	6822      	ldr	r2, [r4, #0]
   1ab7e:	42aa      	cmp	r2, r5
   1ab80:	d3d1      	bcc.n	1ab26 <mbedtls_hardware_poll+0x3a>
   1ab82:	9907      	ldr	r1, [sp, #28]
   1ab84:	4630      	mov	r0, r6
   1ab86:	3108      	adds	r1, #8
   1ab88:	462a      	mov	r2, r5
   1ab8a:	461e      	mov	r6, r3
   1ab8c:	f000 fd3a 	bl	1b604 <CC_PalMemCopyPlat>
   1ab90:	6025      	str	r5, [r4, #0]
   1ab92:	2001      	movs	r0, #1
   1ab94:	f7ff fc88 	bl	1a4a8 <CC_PalPowerSaveModeSelect>
   1ab98:	2800      	cmp	r0, #0
   1ab9a:	d0cb      	beq.n	1ab34 <mbedtls_hardware_poll+0x48>
   1ab9c:	480e      	ldr	r0, [pc, #56]	; (1abd8 <mbedtls_hardware_poll+0xec>)
   1ab9e:	f7ff f8bd 	bl	19d1c <CC_PalAbort>
   1aba2:	e7c7      	b.n	1ab34 <mbedtls_hardware_poll+0x48>
   1aba4:	480d      	ldr	r0, [pc, #52]	; (1abdc <mbedtls_hardware_poll+0xf0>)
   1aba6:	f7ff f8b9 	bl	19d1c <CC_PalAbort>
   1abaa:	e7b8      	b.n	1ab1e <mbedtls_hardware_poll+0x32>
   1abac:	480c      	ldr	r0, [pc, #48]	; (1abe0 <mbedtls_hardware_poll+0xf4>)
   1abae:	f7ff f8b5 	bl	19d1c <CC_PalAbort>
   1abb2:	e7af      	b.n	1ab14 <mbedtls_hardware_poll+0x28>
   1abb4:	480b      	ldr	r0, [pc, #44]	; (1abe4 <mbedtls_hardware_poll+0xf8>)
   1abb6:	f7ff f8b1 	bl	19d1c <CC_PalAbort>
   1abba:	4630      	mov	r0, r6
   1abbc:	b009      	add	sp, #36	; 0x24
   1abbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1abc0:	f04f 36ff 	mov.w	r6, #4294967295
   1abc4:	e7c8      	b.n	1ab58 <mbedtls_hardware_poll+0x6c>
   1abc6:	bf00      	nop
   1abc8:	20000694 	.word	0x20000694
   1abcc:	20002aa0 	.word	0x20002aa0
   1abd0:	20002880 	.word	0x20002880
   1abd4:	2000287c 	.word	0x2000287c
   1abd8:	00021774 	.word	0x00021774
   1abdc:	00021754 	.word	0x00021754
   1abe0:	0002173c 	.word	0x0002173c
   1abe4:	000217cc 	.word	0x000217cc

0001abe8 <cc_mbedtls_sha256_init>:
   1abe8:	b510      	push	{r4, lr}
   1abea:	4604      	mov	r4, r0
   1abec:	b128      	cbz	r0, 1abfa <cc_mbedtls_sha256_init+0x12>
   1abee:	4620      	mov	r0, r4
   1abf0:	21f0      	movs	r1, #240	; 0xf0
   1abf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1abf6:	f000 bd09 	b.w	1b60c <CC_PalMemSetZeroPlat>
   1abfa:	4804      	ldr	r0, [pc, #16]	; (1ac0c <cc_mbedtls_sha256_init+0x24>)
   1abfc:	f7ff f88e 	bl	19d1c <CC_PalAbort>
   1ac00:	4620      	mov	r0, r4
   1ac02:	21f0      	movs	r1, #240	; 0xf0
   1ac04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ac08:	f000 bd00 	b.w	1b60c <CC_PalMemSetZeroPlat>
   1ac0c:	000217e4 	.word	0x000217e4

0001ac10 <cc_mbedtls_sha256_free>:
   1ac10:	b110      	cbz	r0, 1ac18 <cc_mbedtls_sha256_free+0x8>
   1ac12:	21f0      	movs	r1, #240	; 0xf0
   1ac14:	f7ff bf60 	b.w	1aad8 <mbedtls_platform_zeroize>
   1ac18:	4770      	bx	lr
   1ac1a:	bf00      	nop

0001ac1c <cc_mbedtls_sha256_starts_ret>:
   1ac1c:	b508      	push	{r3, lr}
   1ac1e:	b161      	cbz	r1, 1ac3a <cc_mbedtls_sha256_starts_ret+0x1e>
   1ac20:	2901      	cmp	r1, #1
   1ac22:	d107      	bne.n	1ac34 <cc_mbedtls_sha256_starts_ret+0x18>
   1ac24:	2102      	movs	r1, #2
   1ac26:	f000 f839 	bl	1ac9c <mbedtls_sha_starts_internal>
   1ac2a:	2800      	cmp	r0, #0
   1ac2c:	bf18      	it	ne
   1ac2e:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1ac32:	bd08      	pop	{r3, pc}
   1ac34:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1ac38:	bd08      	pop	{r3, pc}
   1ac3a:	2101      	movs	r1, #1
   1ac3c:	f000 f82e 	bl	1ac9c <mbedtls_sha_starts_internal>
   1ac40:	e7f3      	b.n	1ac2a <cc_mbedtls_sha256_starts_ret+0xe>
   1ac42:	bf00      	nop

0001ac44 <cc_mbedtls_sha256_update_ret>:
   1ac44:	b508      	push	{r3, lr}
   1ac46:	f000 f86b 	bl	1ad20 <mbedtls_sha_update_internal>
   1ac4a:	2800      	cmp	r0, #0
   1ac4c:	bf18      	it	ne
   1ac4e:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1ac52:	bd08      	pop	{r3, pc}

0001ac54 <cc_mbedtls_sha256_finish_ret>:
   1ac54:	b570      	push	{r4, r5, r6, lr}
   1ac56:	b1e8      	cbz	r0, 1ac94 <cc_mbedtls_sha256_finish_ret+0x40>
   1ac58:	460e      	mov	r6, r1
   1ac5a:	b1d9      	cbz	r1, 1ac94 <cc_mbedtls_sha256_finish_ret+0x40>
   1ac5c:	4604      	mov	r4, r0
   1ac5e:	f000 f831 	bl	1acc4 <mbedtls_sha_finish_internal>
   1ac62:	4605      	mov	r5, r0
   1ac64:	b9b0      	cbnz	r0, 1ac94 <cc_mbedtls_sha256_finish_ret+0x40>
   1ac66:	6823      	ldr	r3, [r4, #0]
   1ac68:	2b01      	cmp	r3, #1
   1ac6a:	d00b      	beq.n	1ac84 <cc_mbedtls_sha256_finish_ret+0x30>
   1ac6c:	2b02      	cmp	r3, #2
   1ac6e:	d001      	beq.n	1ac74 <cc_mbedtls_sha256_finish_ret+0x20>
   1ac70:	4628      	mov	r0, r5
   1ac72:	bd70      	pop	{r4, r5, r6, pc}
   1ac74:	f104 0108 	add.w	r1, r4, #8
   1ac78:	4630      	mov	r0, r6
   1ac7a:	221c      	movs	r2, #28
   1ac7c:	f000 fcc2 	bl	1b604 <CC_PalMemCopyPlat>
   1ac80:	4628      	mov	r0, r5
   1ac82:	bd70      	pop	{r4, r5, r6, pc}
   1ac84:	f104 0108 	add.w	r1, r4, #8
   1ac88:	4630      	mov	r0, r6
   1ac8a:	2220      	movs	r2, #32
   1ac8c:	f000 fcba 	bl	1b604 <CC_PalMemCopyPlat>
   1ac90:	4628      	mov	r0, r5
   1ac92:	bd70      	pop	{r4, r5, r6, pc}
   1ac94:	f06f 0536 	mvn.w	r5, #54	; 0x36
   1ac98:	e7ea      	b.n	1ac70 <cc_mbedtls_sha256_finish_ret+0x1c>
   1ac9a:	bf00      	nop

0001ac9c <mbedtls_sha_starts_internal>:
   1ac9c:	b178      	cbz	r0, 1acbe <mbedtls_sha_starts_internal+0x22>
   1ac9e:	b538      	push	{r3, r4, r5, lr}
   1aca0:	4604      	mov	r4, r0
   1aca2:	460d      	mov	r5, r1
   1aca4:	21f0      	movs	r1, #240	; 0xf0
   1aca6:	f000 fcb1 	bl	1b60c <CC_PalMemSetZeroPlat>
   1acaa:	2340      	movs	r3, #64	; 0x40
   1acac:	6025      	str	r5, [r4, #0]
   1acae:	65e3      	str	r3, [r4, #92]	; 0x5c
   1acb0:	4620      	mov	r0, r4
   1acb2:	f000 fd83 	bl	1b7bc <InitHashDrv>
   1acb6:	3800      	subs	r0, #0
   1acb8:	bf18      	it	ne
   1acba:	2001      	movne	r0, #1
   1acbc:	bd38      	pop	{r3, r4, r5, pc}
   1acbe:	2001      	movs	r0, #1
   1acc0:	4770      	bx	lr
   1acc2:	bf00      	nop

0001acc4 <mbedtls_sha_finish_internal>:
   1acc4:	b570      	push	{r4, r5, r6, lr}
   1acc6:	6e05      	ldr	r5, [r0, #96]	; 0x60
   1acc8:	b0a4      	sub	sp, #144	; 0x90
   1acca:	4604      	mov	r4, r0
   1accc:	ae04      	add	r6, sp, #16
   1acce:	b9e5      	cbnz	r5, 1ad0a <mbedtls_sha_finish_internal+0x46>
   1acd0:	2201      	movs	r2, #1
   1acd2:	2300      	movs	r3, #0
   1acd4:	6062      	str	r2, [r4, #4]
   1acd6:	4630      	mov	r0, r6
   1acd8:	e9cd 3300 	strd	r3, r3, [sp]
   1acdc:	aa02      	add	r2, sp, #8
   1acde:	4629      	mov	r1, r5
   1ace0:	f000 fd38 	bl	1b754 <SetDataBuffersInfo>
   1ace4:	b110      	cbz	r0, 1acec <mbedtls_sha_finish_internal+0x28>
   1ace6:	2001      	movs	r0, #1
   1ace8:	b024      	add	sp, #144	; 0x90
   1acea:	bd70      	pop	{r4, r5, r6, pc}
   1acec:	462a      	mov	r2, r5
   1acee:	a902      	add	r1, sp, #8
   1acf0:	4620      	mov	r0, r4
   1acf2:	f000 fd8d 	bl	1b810 <ProcessHashDrv>
   1acf6:	2800      	cmp	r0, #0
   1acf8:	d1f5      	bne.n	1ace6 <mbedtls_sha_finish_internal+0x22>
   1acfa:	4620      	mov	r0, r4
   1acfc:	f000 feb6 	bl	1ba6c <FinishHashDrv>
   1ad00:	2800      	cmp	r0, #0
   1ad02:	d1f0      	bne.n	1ace6 <mbedtls_sha_finish_internal+0x22>
   1ad04:	6620      	str	r0, [r4, #96]	; 0x60
   1ad06:	b024      	add	sp, #144	; 0x90
   1ad08:	bd70      	pop	{r4, r5, r6, pc}
   1ad0a:	2d80      	cmp	r5, #128	; 0x80
   1ad0c:	462a      	mov	r2, r5
   1ad0e:	4630      	mov	r0, r6
   1ad10:	bf28      	it	cs
   1ad12:	2280      	movcs	r2, #128	; 0x80
   1ad14:	f104 0164 	add.w	r1, r4, #100	; 0x64
   1ad18:	f000 fc74 	bl	1b604 <CC_PalMemCopyPlat>
   1ad1c:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1ad1e:	e7d7      	b.n	1acd0 <mbedtls_sha_finish_internal+0xc>

0001ad20 <mbedtls_sha_update_internal>:
   1ad20:	2800      	cmp	r0, #0
   1ad22:	d054      	beq.n	1adce <mbedtls_sha_update_internal+0xae>
   1ad24:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ad26:	4614      	mov	r4, r2
   1ad28:	b0a5      	sub	sp, #148	; 0x94
   1ad2a:	b1b2      	cbz	r2, 1ad5a <mbedtls_sha_update_internal+0x3a>
   1ad2c:	460e      	mov	r6, r1
   1ad2e:	b351      	cbz	r1, 1ad86 <mbedtls_sha_update_internal+0x66>
   1ad30:	4605      	mov	r5, r0
   1ad32:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   1ad36:	1a1a      	subs	r2, r3, r0
   1ad38:	fbb2 f7f3 	udiv	r7, r2, r3
   1ad3c:	fb03 2717 	mls	r7, r3, r7, r2
   1ad40:	42a7      	cmp	r7, r4
   1ad42:	bf28      	it	cs
   1ad44:	4627      	movcs	r7, r4
   1ad46:	2f00      	cmp	r7, #0
   1ad48:	d143      	bne.n	1add2 <mbedtls_sha_update_internal+0xb2>
   1ad4a:	4283      	cmp	r3, r0
   1ad4c:	d008      	beq.n	1ad60 <mbedtls_sha_update_internal+0x40>
   1ad4e:	fbb4 f7f3 	udiv	r7, r4, r3
   1ad52:	fb03 f707 	mul.w	r7, r3, r7
   1ad56:	b9cf      	cbnz	r7, 1ad8c <mbedtls_sha_update_internal+0x6c>
   1ad58:	bb6c      	cbnz	r4, 1adb6 <mbedtls_sha_update_internal+0x96>
   1ad5a:	2000      	movs	r0, #0
   1ad5c:	b025      	add	sp, #148	; 0x94
   1ad5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ad60:	2b80      	cmp	r3, #128	; 0x80
   1ad62:	bf28      	it	cs
   1ad64:	2380      	movcs	r3, #128	; 0x80
   1ad66:	461a      	mov	r2, r3
   1ad68:	f105 0164 	add.w	r1, r5, #100	; 0x64
   1ad6c:	a804      	add	r0, sp, #16
   1ad6e:	f000 fc49 	bl	1b604 <CC_PalMemCopyPlat>
   1ad72:	2300      	movs	r3, #0
   1ad74:	e9cd 3300 	strd	r3, r3, [sp]
   1ad78:	a804      	add	r0, sp, #16
   1ad7a:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   1ad7c:	aa02      	add	r2, sp, #8
   1ad7e:	f000 fce9 	bl	1b754 <SetDataBuffersInfo>
   1ad82:	2800      	cmp	r0, #0
   1ad84:	d032      	beq.n	1adec <mbedtls_sha_update_internal+0xcc>
   1ad86:	2001      	movs	r0, #1
   1ad88:	b025      	add	sp, #148	; 0x94
   1ad8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ad8c:	2300      	movs	r3, #0
   1ad8e:	e9cd 3300 	strd	r3, r3, [sp]
   1ad92:	aa02      	add	r2, sp, #8
   1ad94:	4639      	mov	r1, r7
   1ad96:	4630      	mov	r0, r6
   1ad98:	f000 fcdc 	bl	1b754 <SetDataBuffersInfo>
   1ad9c:	2800      	cmp	r0, #0
   1ad9e:	d1f2      	bne.n	1ad86 <mbedtls_sha_update_internal+0x66>
   1ada0:	a902      	add	r1, sp, #8
   1ada2:	463a      	mov	r2, r7
   1ada4:	4628      	mov	r0, r5
   1ada6:	f000 fd33 	bl	1b810 <ProcessHashDrv>
   1adaa:	2800      	cmp	r0, #0
   1adac:	d1eb      	bne.n	1ad86 <mbedtls_sha_update_internal+0x66>
   1adae:	1be4      	subs	r4, r4, r7
   1adb0:	443e      	add	r6, r7
   1adb2:	2c00      	cmp	r4, #0
   1adb4:	d0d1      	beq.n	1ad5a <mbedtls_sha_update_internal+0x3a>
   1adb6:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1adb8:	3019      	adds	r0, #25
   1adba:	4622      	mov	r2, r4
   1adbc:	4631      	mov	r1, r6
   1adbe:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1adc2:	f000 fc1f 	bl	1b604 <CC_PalMemCopyPlat>
   1adc6:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   1adc8:	4422      	add	r2, r4
   1adca:	662a      	str	r2, [r5, #96]	; 0x60
   1adcc:	e7c5      	b.n	1ad5a <mbedtls_sha_update_internal+0x3a>
   1adce:	2001      	movs	r0, #1
   1add0:	4770      	bx	lr
   1add2:	f105 0364 	add.w	r3, r5, #100	; 0x64
   1add6:	4418      	add	r0, r3
   1add8:	463a      	mov	r2, r7
   1adda:	f000 fc13 	bl	1b604 <CC_PalMemCopyPlat>
   1adde:	e9d5 3017 	ldrd	r3, r0, [r5, #92]	; 0x5c
   1ade2:	4438      	add	r0, r7
   1ade4:	443e      	add	r6, r7
   1ade6:	1be4      	subs	r4, r4, r7
   1ade8:	6628      	str	r0, [r5, #96]	; 0x60
   1adea:	e7ae      	b.n	1ad4a <mbedtls_sha_update_internal+0x2a>
   1adec:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1adee:	a902      	add	r1, sp, #8
   1adf0:	4628      	mov	r0, r5
   1adf2:	f000 fd0d 	bl	1b810 <ProcessHashDrv>
   1adf6:	2800      	cmp	r0, #0
   1adf8:	d1c5      	bne.n	1ad86 <mbedtls_sha_update_internal+0x66>
   1adfa:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1adfc:	6628      	str	r0, [r5, #96]	; 0x60
   1adfe:	e7a6      	b.n	1ad4e <mbedtls_sha_update_internal+0x2e>

0001ae00 <block_cipher_df>:
   1ae00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae04:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   1ae08:	b0b1      	sub	sp, #196	; 0xc4
   1ae0a:	f200 812e 	bhi.w	1b06a <block_cipher_df+0x26a>
   1ae0e:	f8df 926c 	ldr.w	r9, [pc, #620]	; 1b07c <block_cipher_df+0x27c>
   1ae12:	4614      	mov	r4, r2
   1ae14:	460d      	mov	r5, r1
   1ae16:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1ae1a:	2100      	movs	r1, #0
   1ae1c:	4682      	mov	sl, r0
   1ae1e:	4648      	mov	r0, r9
   1ae20:	f002 ff22 	bl	1dc68 <memset>
   1ae24:	a813      	add	r0, sp, #76	; 0x4c
   1ae26:	f000 fe63 	bl	1baf0 <cc_mbedtls_aes_init>
   1ae2a:	2600      	movs	r6, #0
   1ae2c:	4629      	mov	r1, r5
   1ae2e:	2320      	movs	r3, #32
   1ae30:	ba65      	rev16	r5, r4
   1ae32:	4622      	mov	r2, r4
   1ae34:	f109 0018 	add.w	r0, r9, #24
   1ae38:	f8a9 5012 	strh.w	r5, [r9, #18]
   1ae3c:	f889 3017 	strb.w	r3, [r9, #23]
   1ae40:	f8a9 6010 	strh.w	r6, [r9, #16]
   1ae44:	f002 ff05 	bl	1dc52 <memcpy>
   1ae48:	eb09 0304 	add.w	r3, r9, r4
   1ae4c:	2280      	movs	r2, #128	; 0x80
   1ae4e:	4d88      	ldr	r5, [pc, #544]	; (1b070 <block_cipher_df+0x270>)
   1ae50:	761a      	strb	r2, [r3, #24]
   1ae52:	4b88      	ldr	r3, [pc, #544]	; (1b074 <block_cipher_df+0x274>)
   1ae54:	9503      	str	r5, [sp, #12]
   1ae56:	9304      	str	r3, [sp, #16]
   1ae58:	a813      	add	r0, sp, #76	; 0x4c
   1ae5a:	f103 3308 	add.w	r3, r3, #134744072	; 0x8080808
   1ae5e:	a903      	add	r1, sp, #12
   1ae60:	f105 3508 	add.w	r5, r5, #134744072	; 0x8080808
   1ae64:	e9cd 5305 	strd	r5, r3, [sp, #20]
   1ae68:	f000 fe58 	bl	1bb1c <cc_mbedtls_aes_setkey_enc>
   1ae6c:	4680      	mov	r8, r0
   1ae6e:	2800      	cmp	r0, #0
   1ae70:	f040 80da 	bne.w	1b028 <block_cipher_df+0x228>
   1ae74:	f104 0319 	add.w	r3, r4, #25
   1ae78:	9301      	str	r3, [sp, #4]
   1ae7a:	af07      	add	r7, sp, #28
   1ae7c:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   1ae80:	2210      	movs	r2, #16
   1ae82:	2100      	movs	r1, #0
   1ae84:	4638      	mov	r0, r7
   1ae86:	f002 feef 	bl	1dc68 <memset>
   1ae8a:	4c7b      	ldr	r4, [pc, #492]	; (1b078 <block_cipher_df+0x278>)
   1ae8c:	9d01      	ldr	r5, [sp, #4]
   1ae8e:	f89d 601d 	ldrb.w	r6, [sp, #29]
   1ae92:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   1ae96:	f89d e01c 	ldrb.w	lr, [sp, #28]
   1ae9a:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   1ae9e:	f89d c01f 	ldrb.w	ip, [sp, #31]
   1aea2:	f89d 001e 	ldrb.w	r0, [sp, #30]
   1aea6:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   1aeaa:	404e      	eors	r6, r1
   1aeac:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
   1aeb0:	f88d 601d 	strb.w	r6, [sp, #29]
   1aeb4:	ea8e 0303 	eor.w	r3, lr, r3
   1aeb8:	4050      	eors	r0, r2
   1aeba:	ea8c 0101 	eor.w	r1, ip, r1
   1aebe:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1aec2:	f88d 301c 	strb.w	r3, [sp, #28]
   1aec6:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
   1aeca:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   1aece:	f814 6c0a 	ldrb.w	r6, [r4, #-10]
   1aed2:	f88d 001e 	strb.w	r0, [sp, #30]
   1aed6:	f88d 101f 	strb.w	r1, [sp, #31]
   1aeda:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   1aede:	f814 1c09 	ldrb.w	r1, [r4, #-9]
   1aee2:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
   1aee6:	405a      	eors	r2, r3
   1aee8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1aeec:	f88d 2020 	strb.w	r2, [sp, #32]
   1aef0:	ea8c 0606 	eor.w	r6, ip, r6
   1aef4:	4048      	eors	r0, r1
   1aef6:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   1aefa:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   1aefe:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
   1af02:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
   1af06:	ea8e 0303 	eor.w	r3, lr, r3
   1af0a:	f814 6c06 	ldrb.w	r6, [r4, #-6]
   1af0e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
   1af12:	ea8c 0101 	eor.w	r1, ip, r1
   1af16:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1af1a:	f814 cc07 	ldrb.w	ip, [r4, #-7]
   1af1e:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   1af22:	ea82 020c 	eor.w	r2, r2, ip
   1af26:	4073      	eors	r3, r6
   1af28:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   1af2c:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   1af30:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   1af34:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
   1af38:	f89d e027 	ldrb.w	lr, [sp, #39]	; 0x27
   1af3c:	f814 2c05 	ldrb.w	r2, [r4, #-5]
   1af40:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   1af44:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   1af48:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1af4c:	f89d c02a 	ldrb.w	ip, [sp, #42]	; 0x2a
   1af50:	ea8e 0202 	eor.w	r2, lr, r2
   1af54:	4041      	eors	r1, r0
   1af56:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   1af5a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   1af5e:	4073      	eors	r3, r6
   1af60:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   1af64:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
   1af68:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1af6c:	ea8c 0000 	eor.w	r0, ip, r0
   1af70:	4056      	eors	r6, r2
   1af72:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
   1af76:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
   1af7a:	463b      	mov	r3, r7
   1af7c:	463a      	mov	r2, r7
   1af7e:	2101      	movs	r1, #1
   1af80:	a813      	add	r0, sp, #76	; 0x4c
   1af82:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
   1af86:	f000 fde3 	bl	1bb50 <cc_mbedtls_aes_crypt_ecb>
   1af8a:	2d10      	cmp	r5, #16
   1af8c:	bf94      	ite	ls
   1af8e:	1b6d      	subls	r5, r5, r5
   1af90:	3d10      	subhi	r5, #16
   1af92:	2800      	cmp	r0, #0
   1af94:	d167      	bne.n	1b066 <block_cipher_df+0x266>
   1af96:	3410      	adds	r4, #16
   1af98:	2d00      	cmp	r5, #0
   1af9a:	f47f af78 	bne.w	1ae8e <block_cipher_df+0x8e>
   1af9e:	eb0b 0008 	add.w	r0, fp, r8
   1afa2:	2210      	movs	r2, #16
   1afa4:	4639      	mov	r1, r7
   1afa6:	f002 fe54 	bl	1dc52 <memcpy>
   1afaa:	f899 3003 	ldrb.w	r3, [r9, #3]
   1afae:	f108 0810 	add.w	r8, r8, #16
   1afb2:	3301      	adds	r3, #1
   1afb4:	f1b8 0f20 	cmp.w	r8, #32
   1afb8:	f889 3003 	strb.w	r3, [r9, #3]
   1afbc:	f47f af60 	bne.w	1ae80 <block_cipher_df+0x80>
   1afc0:	2280      	movs	r2, #128	; 0x80
   1afc2:	4659      	mov	r1, fp
   1afc4:	a813      	add	r0, sp, #76	; 0x4c
   1afc6:	f000 fda9 	bl	1bb1c <cc_mbedtls_aes_setkey_enc>
   1afca:	4680      	mov	r8, r0
   1afcc:	bb78      	cbnz	r0, 1b02e <block_cipher_df+0x22e>
   1afce:	f10a 0520 	add.w	r5, sl, #32
   1afd2:	4654      	mov	r4, sl
   1afd4:	ab0f      	add	r3, sp, #60	; 0x3c
   1afd6:	461a      	mov	r2, r3
   1afd8:	2101      	movs	r1, #1
   1afda:	a813      	add	r0, sp, #76	; 0x4c
   1afdc:	f000 fdb8 	bl	1bb50 <cc_mbedtls_aes_crypt_ecb>
   1afe0:	2210      	movs	r2, #16
   1afe2:	4680      	mov	r8, r0
   1afe4:	a90f      	add	r1, sp, #60	; 0x3c
   1afe6:	4620      	mov	r0, r4
   1afe8:	4414      	add	r4, r2
   1afea:	f1b8 0f00 	cmp.w	r8, #0
   1afee:	d11e      	bne.n	1b02e <block_cipher_df+0x22e>
   1aff0:	f002 fe2f 	bl	1dc52 <memcpy>
   1aff4:	42ac      	cmp	r4, r5
   1aff6:	d1ed      	bne.n	1afd4 <block_cipher_df+0x1d4>
   1aff8:	a813      	add	r0, sp, #76	; 0x4c
   1affa:	f000 fd89 	bl	1bb10 <cc_mbedtls_aes_free>
   1affe:	481f      	ldr	r0, [pc, #124]	; (1b07c <block_cipher_df+0x27c>)
   1b000:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1b004:	f7ff fd68 	bl	1aad8 <mbedtls_platform_zeroize>
   1b008:	4658      	mov	r0, fp
   1b00a:	2120      	movs	r1, #32
   1b00c:	f7ff fd64 	bl	1aad8 <mbedtls_platform_zeroize>
   1b010:	a803      	add	r0, sp, #12
   1b012:	2110      	movs	r1, #16
   1b014:	f7ff fd60 	bl	1aad8 <mbedtls_platform_zeroize>
   1b018:	4638      	mov	r0, r7
   1b01a:	2110      	movs	r1, #16
   1b01c:	f7ff fd5c 	bl	1aad8 <mbedtls_platform_zeroize>
   1b020:	4640      	mov	r0, r8
   1b022:	b031      	add	sp, #196	; 0xc4
   1b024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b028:	af07      	add	r7, sp, #28
   1b02a:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   1b02e:	a813      	add	r0, sp, #76	; 0x4c
   1b030:	f000 fd6e 	bl	1bb10 <cc_mbedtls_aes_free>
   1b034:	4811      	ldr	r0, [pc, #68]	; (1b07c <block_cipher_df+0x27c>)
   1b036:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1b03a:	f7ff fd4d 	bl	1aad8 <mbedtls_platform_zeroize>
   1b03e:	4658      	mov	r0, fp
   1b040:	2120      	movs	r1, #32
   1b042:	f7ff fd49 	bl	1aad8 <mbedtls_platform_zeroize>
   1b046:	a803      	add	r0, sp, #12
   1b048:	2110      	movs	r1, #16
   1b04a:	f7ff fd45 	bl	1aad8 <mbedtls_platform_zeroize>
   1b04e:	4638      	mov	r0, r7
   1b050:	2110      	movs	r1, #16
   1b052:	f7ff fd41 	bl	1aad8 <mbedtls_platform_zeroize>
   1b056:	4650      	mov	r0, sl
   1b058:	2120      	movs	r1, #32
   1b05a:	f7ff fd3d 	bl	1aad8 <mbedtls_platform_zeroize>
   1b05e:	4640      	mov	r0, r8
   1b060:	b031      	add	sp, #196	; 0xc4
   1b062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b066:	4680      	mov	r8, r0
   1b068:	e7e1      	b.n	1b02e <block_cipher_df+0x22e>
   1b06a:	f06f 0837 	mvn.w	r8, #55	; 0x37
   1b06e:	e7f6      	b.n	1b05e <block_cipher_df+0x25e>
   1b070:	03020100 	.word	0x03020100
   1b074:	07060504 	.word	0x07060504
   1b078:	20002ad8 	.word	0x20002ad8
   1b07c:	20002ac8 	.word	0x20002ac8

0001b080 <ctr_drbg_update_internal>:
   1b080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b084:	b088      	sub	sp, #32
   1b086:	4604      	mov	r4, r0
   1b088:	2220      	movs	r2, #32
   1b08a:	460d      	mov	r5, r1
   1b08c:	4668      	mov	r0, sp
   1b08e:	2100      	movs	r1, #0
   1b090:	eb04 0802 	add.w	r8, r4, r2
   1b094:	f002 fde8 	bl	1dc68 <memset>
   1b098:	466e      	mov	r6, sp
   1b09a:	7be2      	ldrb	r2, [r4, #15]
   1b09c:	3201      	adds	r2, #1
   1b09e:	b2d2      	uxtb	r2, r2
   1b0a0:	73e2      	strb	r2, [r4, #15]
   1b0a2:	2a00      	cmp	r2, #0
   1b0a4:	d14d      	bne.n	1b142 <ctr_drbg_update_internal+0xc2>
   1b0a6:	7ba2      	ldrb	r2, [r4, #14]
   1b0a8:	3201      	adds	r2, #1
   1b0aa:	b2d2      	uxtb	r2, r2
   1b0ac:	73a2      	strb	r2, [r4, #14]
   1b0ae:	2a00      	cmp	r2, #0
   1b0b0:	d147      	bne.n	1b142 <ctr_drbg_update_internal+0xc2>
   1b0b2:	7b63      	ldrb	r3, [r4, #13]
   1b0b4:	3301      	adds	r3, #1
   1b0b6:	b2db      	uxtb	r3, r3
   1b0b8:	7363      	strb	r3, [r4, #13]
   1b0ba:	2b00      	cmp	r3, #0
   1b0bc:	d141      	bne.n	1b142 <ctr_drbg_update_internal+0xc2>
   1b0be:	7b23      	ldrb	r3, [r4, #12]
   1b0c0:	3301      	adds	r3, #1
   1b0c2:	b2db      	uxtb	r3, r3
   1b0c4:	7323      	strb	r3, [r4, #12]
   1b0c6:	2b00      	cmp	r3, #0
   1b0c8:	d13b      	bne.n	1b142 <ctr_drbg_update_internal+0xc2>
   1b0ca:	7ae3      	ldrb	r3, [r4, #11]
   1b0cc:	3301      	adds	r3, #1
   1b0ce:	b2db      	uxtb	r3, r3
   1b0d0:	72e3      	strb	r3, [r4, #11]
   1b0d2:	2b00      	cmp	r3, #0
   1b0d4:	d135      	bne.n	1b142 <ctr_drbg_update_internal+0xc2>
   1b0d6:	7aa3      	ldrb	r3, [r4, #10]
   1b0d8:	3301      	adds	r3, #1
   1b0da:	b2db      	uxtb	r3, r3
   1b0dc:	72a3      	strb	r3, [r4, #10]
   1b0de:	2b00      	cmp	r3, #0
   1b0e0:	d12f      	bne.n	1b142 <ctr_drbg_update_internal+0xc2>
   1b0e2:	7a63      	ldrb	r3, [r4, #9]
   1b0e4:	3301      	adds	r3, #1
   1b0e6:	b2db      	uxtb	r3, r3
   1b0e8:	7263      	strb	r3, [r4, #9]
   1b0ea:	bb53      	cbnz	r3, 1b142 <ctr_drbg_update_internal+0xc2>
   1b0ec:	7a23      	ldrb	r3, [r4, #8]
   1b0ee:	3301      	adds	r3, #1
   1b0f0:	b2db      	uxtb	r3, r3
   1b0f2:	7223      	strb	r3, [r4, #8]
   1b0f4:	bb2b      	cbnz	r3, 1b142 <ctr_drbg_update_internal+0xc2>
   1b0f6:	79e3      	ldrb	r3, [r4, #7]
   1b0f8:	3301      	adds	r3, #1
   1b0fa:	b2db      	uxtb	r3, r3
   1b0fc:	71e3      	strb	r3, [r4, #7]
   1b0fe:	bb03      	cbnz	r3, 1b142 <ctr_drbg_update_internal+0xc2>
   1b100:	79a3      	ldrb	r3, [r4, #6]
   1b102:	3301      	adds	r3, #1
   1b104:	b2db      	uxtb	r3, r3
   1b106:	71a3      	strb	r3, [r4, #6]
   1b108:	b9db      	cbnz	r3, 1b142 <ctr_drbg_update_internal+0xc2>
   1b10a:	7963      	ldrb	r3, [r4, #5]
   1b10c:	3301      	adds	r3, #1
   1b10e:	b2db      	uxtb	r3, r3
   1b110:	7163      	strb	r3, [r4, #5]
   1b112:	b9b3      	cbnz	r3, 1b142 <ctr_drbg_update_internal+0xc2>
   1b114:	7923      	ldrb	r3, [r4, #4]
   1b116:	3301      	adds	r3, #1
   1b118:	b2db      	uxtb	r3, r3
   1b11a:	7123      	strb	r3, [r4, #4]
   1b11c:	b98b      	cbnz	r3, 1b142 <ctr_drbg_update_internal+0xc2>
   1b11e:	78e3      	ldrb	r3, [r4, #3]
   1b120:	3301      	adds	r3, #1
   1b122:	b2db      	uxtb	r3, r3
   1b124:	70e3      	strb	r3, [r4, #3]
   1b126:	b963      	cbnz	r3, 1b142 <ctr_drbg_update_internal+0xc2>
   1b128:	78a3      	ldrb	r3, [r4, #2]
   1b12a:	3301      	adds	r3, #1
   1b12c:	b2db      	uxtb	r3, r3
   1b12e:	70a3      	strb	r3, [r4, #2]
   1b130:	b93b      	cbnz	r3, 1b142 <ctr_drbg_update_internal+0xc2>
   1b132:	7863      	ldrb	r3, [r4, #1]
   1b134:	3301      	adds	r3, #1
   1b136:	b2db      	uxtb	r3, r3
   1b138:	7063      	strb	r3, [r4, #1]
   1b13a:	b913      	cbnz	r3, 1b142 <ctr_drbg_update_internal+0xc2>
   1b13c:	7823      	ldrb	r3, [r4, #0]
   1b13e:	3301      	adds	r3, #1
   1b140:	7023      	strb	r3, [r4, #0]
   1b142:	4633      	mov	r3, r6
   1b144:	4622      	mov	r2, r4
   1b146:	2101      	movs	r1, #1
   1b148:	4640      	mov	r0, r8
   1b14a:	f000 fd01 	bl	1bb50 <cc_mbedtls_aes_crypt_ecb>
   1b14e:	4607      	mov	r7, r0
   1b150:	2800      	cmp	r0, #0
   1b152:	d12b      	bne.n	1b1ac <ctr_drbg_update_internal+0x12c>
   1b154:	3610      	adds	r6, #16
   1b156:	ab08      	add	r3, sp, #32
   1b158:	429e      	cmp	r6, r3
   1b15a:	d19e      	bne.n	1b09a <ctr_drbg_update_internal+0x1a>
   1b15c:	9e01      	ldr	r6, [sp, #4]
   1b15e:	686a      	ldr	r2, [r5, #4]
   1b160:	9f00      	ldr	r7, [sp, #0]
   1b162:	6829      	ldr	r1, [r5, #0]
   1b164:	68ab      	ldr	r3, [r5, #8]
   1b166:	4072      	eors	r2, r6
   1b168:	9e02      	ldr	r6, [sp, #8]
   1b16a:	9201      	str	r2, [sp, #4]
   1b16c:	4079      	eors	r1, r7
   1b16e:	4073      	eors	r3, r6
   1b170:	9100      	str	r1, [sp, #0]
   1b172:	9e03      	ldr	r6, [sp, #12]
   1b174:	68e9      	ldr	r1, [r5, #12]
   1b176:	692a      	ldr	r2, [r5, #16]
   1b178:	9302      	str	r3, [sp, #8]
   1b17a:	4071      	eors	r1, r6
   1b17c:	9e04      	ldr	r6, [sp, #16]
   1b17e:	696b      	ldr	r3, [r5, #20]
   1b180:	9103      	str	r1, [sp, #12]
   1b182:	4056      	eors	r6, r2
   1b184:	9a05      	ldr	r2, [sp, #20]
   1b186:	9604      	str	r6, [sp, #16]
   1b188:	ea83 0102 	eor.w	r1, r3, r2
   1b18c:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   1b190:	9d06      	ldr	r5, [sp, #24]
   1b192:	9105      	str	r1, [sp, #20]
   1b194:	4055      	eors	r5, r2
   1b196:	9a07      	ldr	r2, [sp, #28]
   1b198:	4640      	mov	r0, r8
   1b19a:	4053      	eors	r3, r2
   1b19c:	4669      	mov	r1, sp
   1b19e:	2280      	movs	r2, #128	; 0x80
   1b1a0:	e9cd 5306 	strd	r5, r3, [sp, #24]
   1b1a4:	f000 fcba 	bl	1bb1c <cc_mbedtls_aes_setkey_enc>
   1b1a8:	4607      	mov	r7, r0
   1b1aa:	b138      	cbz	r0, 1b1bc <ctr_drbg_update_internal+0x13c>
   1b1ac:	4668      	mov	r0, sp
   1b1ae:	2120      	movs	r1, #32
   1b1b0:	f7ff fc92 	bl	1aad8 <mbedtls_platform_zeroize>
   1b1b4:	4638      	mov	r0, r7
   1b1b6:	b008      	add	sp, #32
   1b1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b1bc:	2210      	movs	r2, #16
   1b1be:	4620      	mov	r0, r4
   1b1c0:	eb0d 0102 	add.w	r1, sp, r2
   1b1c4:	f002 fd45 	bl	1dc52 <memcpy>
   1b1c8:	e7f0      	b.n	1b1ac <ctr_drbg_update_internal+0x12c>
   1b1ca:	bf00      	nop

0001b1cc <mbedtls_ctr_drbg_reseed_internal>:
   1b1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b1d0:	4604      	mov	r4, r0
   1b1d2:	6980      	ldr	r0, [r0, #24]
   1b1d4:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   1b1d8:	d851      	bhi.n	1b27e <mbedtls_ctr_drbg_reseed_internal+0xb2>
   1b1da:	461d      	mov	r5, r3
   1b1dc:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   1b1e0:	42ab      	cmp	r3, r5
   1b1e2:	d34c      	bcc.n	1b27e <mbedtls_ctr_drbg_reseed_internal+0xb2>
   1b1e4:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   1b1e8:	1a18      	subs	r0, r3, r0
   1b1ea:	4290      	cmp	r0, r2
   1b1ec:	4616      	mov	r6, r2
   1b1ee:	d346      	bcc.n	1b27e <mbedtls_ctr_drbg_reseed_internal+0xb2>
   1b1f0:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1b28c <mbedtls_ctr_drbg_reseed_internal+0xc0>
   1b1f4:	f44f 72c0 	mov.w	r2, #384	; 0x180
   1b1f8:	460f      	mov	r7, r1
   1b1fa:	4640      	mov	r0, r8
   1b1fc:	2100      	movs	r1, #0
   1b1fe:	f002 fd33 	bl	1dc68 <memset>
   1b202:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1b206:	69a2      	ldr	r2, [r4, #24]
   1b208:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1b20c:	4641      	mov	r1, r8
   1b20e:	4798      	blx	r3
   1b210:	2800      	cmp	r0, #0
   1b212:	d137      	bne.n	1b284 <mbedtls_ctr_drbg_reseed_internal+0xb8>
   1b214:	f8d4 9018 	ldr.w	r9, [r4, #24]
   1b218:	b135      	cbz	r5, 1b228 <mbedtls_ctr_drbg_reseed_internal+0x5c>
   1b21a:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   1b21e:	462a      	mov	r2, r5
   1b220:	4641      	mov	r1, r8
   1b222:	4798      	blx	r3
   1b224:	bb70      	cbnz	r0, 1b284 <mbedtls_ctr_drbg_reseed_internal+0xb8>
   1b226:	44a9      	add	r9, r5
   1b228:	b107      	cbz	r7, 1b22c <mbedtls_ctr_drbg_reseed_internal+0x60>
   1b22a:	b9c6      	cbnz	r6, 1b25e <mbedtls_ctr_drbg_reseed_internal+0x92>
   1b22c:	4917      	ldr	r1, [pc, #92]	; (1b28c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1b22e:	464a      	mov	r2, r9
   1b230:	4608      	mov	r0, r1
   1b232:	f7ff fde5 	bl	1ae00 <block_cipher_df>
   1b236:	4605      	mov	r5, r0
   1b238:	b138      	cbz	r0, 1b24a <mbedtls_ctr_drbg_reseed_internal+0x7e>
   1b23a:	4814      	ldr	r0, [pc, #80]	; (1b28c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1b23c:	f44f 71c0 	mov.w	r1, #384	; 0x180
   1b240:	f7ff fc4a 	bl	1aad8 <mbedtls_platform_zeroize>
   1b244:	4628      	mov	r0, r5
   1b246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b24a:	4910      	ldr	r1, [pc, #64]	; (1b28c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1b24c:	4620      	mov	r0, r4
   1b24e:	f7ff ff17 	bl	1b080 <ctr_drbg_update_internal>
   1b252:	4605      	mov	r5, r0
   1b254:	2800      	cmp	r0, #0
   1b256:	d1f0      	bne.n	1b23a <mbedtls_ctr_drbg_reseed_internal+0x6e>
   1b258:	2301      	movs	r3, #1
   1b25a:	6123      	str	r3, [r4, #16]
   1b25c:	e7ed      	b.n	1b23a <mbedtls_ctr_drbg_reseed_internal+0x6e>
   1b25e:	4639      	mov	r1, r7
   1b260:	eb08 0009 	add.w	r0, r8, r9
   1b264:	4632      	mov	r2, r6
   1b266:	f002 fcf4 	bl	1dc52 <memcpy>
   1b26a:	4908      	ldr	r1, [pc, #32]	; (1b28c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1b26c:	44b1      	add	r9, r6
   1b26e:	464a      	mov	r2, r9
   1b270:	4608      	mov	r0, r1
   1b272:	f7ff fdc5 	bl	1ae00 <block_cipher_df>
   1b276:	4605      	mov	r5, r0
   1b278:	2800      	cmp	r0, #0
   1b27a:	d1de      	bne.n	1b23a <mbedtls_ctr_drbg_reseed_internal+0x6e>
   1b27c:	e7e5      	b.n	1b24a <mbedtls_ctr_drbg_reseed_internal+0x7e>
   1b27e:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1b282:	e7df      	b.n	1b244 <mbedtls_ctr_drbg_reseed_internal+0x78>
   1b284:	f06f 0533 	mvn.w	r5, #51	; 0x33
   1b288:	e7dc      	b.n	1b244 <mbedtls_ctr_drbg_reseed_internal+0x78>
   1b28a:	bf00      	nop
   1b28c:	20002c68 	.word	0x20002c68

0001b290 <cc_mbedtls_ctr_drbg_init>:
   1b290:	b510      	push	{r4, lr}
   1b292:	22a4      	movs	r2, #164	; 0xa4
   1b294:	4604      	mov	r4, r0
   1b296:	2100      	movs	r1, #0
   1b298:	f002 fce6 	bl	1dc68 <memset>
   1b29c:	4b04      	ldr	r3, [pc, #16]	; (1b2b0 <cc_mbedtls_ctr_drbg_init+0x20>)
   1b29e:	f04f 32ff 	mov.w	r2, #4294967295
   1b2a2:	6122      	str	r2, [r4, #16]
   1b2a4:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1b2a8:	681b      	ldr	r3, [r3, #0]
   1b2aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b2ae:	4718      	bx	r3
   1b2b0:	20000698 	.word	0x20000698

0001b2b4 <cc_mbedtls_ctr_drbg_seed>:
   1b2b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b2b8:	b085      	sub	sp, #20
   1b2ba:	4605      	mov	r5, r0
   1b2bc:	460f      	mov	r7, r1
   1b2be:	4616      	mov	r6, r2
   1b2c0:	4668      	mov	r0, sp
   1b2c2:	2210      	movs	r2, #16
   1b2c4:	2100      	movs	r1, #0
   1b2c6:	4699      	mov	r9, r3
   1b2c8:	f002 fcce 	bl	1dc68 <memset>
   1b2cc:	4b1f      	ldr	r3, [pc, #124]	; (1b34c <cc_mbedtls_ctr_drbg_seed+0x98>)
   1b2ce:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   1b2d2:	681b      	ldr	r3, [r3, #0]
   1b2d4:	4640      	mov	r0, r8
   1b2d6:	4798      	blx	r3
   1b2d8:	b120      	cbz	r0, 1b2e4 <cc_mbedtls_ctr_drbg_seed+0x30>
   1b2da:	4604      	mov	r4, r0
   1b2dc:	4620      	mov	r0, r4
   1b2de:	b005      	add	sp, #20
   1b2e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b2e4:	f105 0420 	add.w	r4, r5, #32
   1b2e8:	4620      	mov	r0, r4
   1b2ea:	f000 fc01 	bl	1baf0 <cc_mbedtls_aes_init>
   1b2ee:	69aa      	ldr	r2, [r5, #24]
   1b2f0:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   1b2f4:	692e      	ldr	r6, [r5, #16]
   1b2f6:	b9fa      	cbnz	r2, 1b338 <cc_mbedtls_ctr_drbg_seed+0x84>
   1b2f8:	2220      	movs	r2, #32
   1b2fa:	2e00      	cmp	r6, #0
   1b2fc:	61aa      	str	r2, [r5, #24]
   1b2fe:	db22      	blt.n	1b346 <cc_mbedtls_ctr_drbg_seed+0x92>
   1b300:	f64f 73f0 	movw	r3, #65520	; 0xfff0
   1b304:	4620      	mov	r0, r4
   1b306:	4669      	mov	r1, sp
   1b308:	61eb      	str	r3, [r5, #28]
   1b30a:	2280      	movs	r2, #128	; 0x80
   1b30c:	f000 fc06 	bl	1bb1c <cc_mbedtls_aes_setkey_enc>
   1b310:	4604      	mov	r4, r0
   1b312:	b930      	cbnz	r0, 1b322 <cc_mbedtls_ctr_drbg_seed+0x6e>
   1b314:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1b316:	4633      	mov	r3, r6
   1b318:	4649      	mov	r1, r9
   1b31a:	4628      	mov	r0, r5
   1b31c:	f7ff ff56 	bl	1b1cc <mbedtls_ctr_drbg_reseed_internal>
   1b320:	4604      	mov	r4, r0
   1b322:	4b0b      	ldr	r3, [pc, #44]	; (1b350 <cc_mbedtls_ctr_drbg_seed+0x9c>)
   1b324:	4640      	mov	r0, r8
   1b326:	681b      	ldr	r3, [r3, #0]
   1b328:	4798      	blx	r3
   1b32a:	2800      	cmp	r0, #0
   1b32c:	bf18      	it	ne
   1b32e:	4604      	movne	r4, r0
   1b330:	4620      	mov	r0, r4
   1b332:	b005      	add	sp, #20
   1b334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b338:	2e00      	cmp	r6, #0
   1b33a:	dae1      	bge.n	1b300 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1b33c:	2a17      	cmp	r2, #23
   1b33e:	d802      	bhi.n	1b346 <cc_mbedtls_ctr_drbg_seed+0x92>
   1b340:	1c53      	adds	r3, r2, #1
   1b342:	085e      	lsrs	r6, r3, #1
   1b344:	e7dc      	b.n	1b300 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1b346:	2600      	movs	r6, #0
   1b348:	e7da      	b.n	1b300 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1b34a:	bf00      	nop
   1b34c:	2000069c 	.word	0x2000069c
   1b350:	200006a0 	.word	0x200006a0

0001b354 <cc_mbedtls_ctr_drbg_random_with_add>:
   1b354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b358:	b08d      	sub	sp, #52	; 0x34
   1b35a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1b35e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   1b362:	f200 80e4 	bhi.w	1b52e <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   1b366:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   1b36a:	f200 80dd 	bhi.w	1b528 <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   1b36e:	4604      	mov	r4, r0
   1b370:	4615      	mov	r5, r2
   1b372:	460e      	mov	r6, r1
   1b374:	2220      	movs	r2, #32
   1b376:	2100      	movs	r1, #0
   1b378:	a804      	add	r0, sp, #16
   1b37a:	461f      	mov	r7, r3
   1b37c:	f002 fc74 	bl	1dc68 <memset>
   1b380:	4b6c      	ldr	r3, [pc, #432]	; (1b534 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   1b382:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   1b386:	681b      	ldr	r3, [r3, #0]
   1b388:	4648      	mov	r0, r9
   1b38a:	4798      	blx	r3
   1b38c:	4683      	mov	fp, r0
   1b38e:	2800      	cmp	r0, #0
   1b390:	f040 8093 	bne.w	1b4ba <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1b394:	6922      	ldr	r2, [r4, #16]
   1b396:	69e3      	ldr	r3, [r4, #28]
   1b398:	429a      	cmp	r2, r3
   1b39a:	f300 8092 	bgt.w	1b4c2 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   1b39e:	6963      	ldr	r3, [r4, #20]
   1b3a0:	2b00      	cmp	r3, #0
   1b3a2:	f040 808e 	bne.w	1b4c2 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   1b3a6:	f1b8 0f00 	cmp.w	r8, #0
   1b3aa:	f040 80a9 	bne.w	1b500 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   1b3ae:	f8df a188 	ldr.w	sl, [pc, #392]	; 1b538 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1b3b2:	466f      	mov	r7, sp
   1b3b4:	2d00      	cmp	r5, #0
   1b3b6:	f000 8098 	beq.w	1b4ea <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   1b3ba:	f104 0820 	add.w	r8, r4, #32
   1b3be:	466f      	mov	r7, sp
   1b3c0:	e00e      	b.n	1b3e0 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   1b3c2:	2d10      	cmp	r5, #16
   1b3c4:	46ab      	mov	fp, r5
   1b3c6:	bf28      	it	cs
   1b3c8:	f04f 0b10 	movcs.w	fp, #16
   1b3cc:	4630      	mov	r0, r6
   1b3ce:	465a      	mov	r2, fp
   1b3d0:	4639      	mov	r1, r7
   1b3d2:	f002 fc3e 	bl	1dc52 <memcpy>
   1b3d6:	ebb5 050b 	subs.w	r5, r5, fp
   1b3da:	445e      	add	r6, fp
   1b3dc:	f000 8085 	beq.w	1b4ea <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   1b3e0:	7be3      	ldrb	r3, [r4, #15]
   1b3e2:	3301      	adds	r3, #1
   1b3e4:	b2db      	uxtb	r3, r3
   1b3e6:	73e3      	strb	r3, [r4, #15]
   1b3e8:	2b00      	cmp	r3, #0
   1b3ea:	d14d      	bne.n	1b488 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b3ec:	7ba3      	ldrb	r3, [r4, #14]
   1b3ee:	3301      	adds	r3, #1
   1b3f0:	b2db      	uxtb	r3, r3
   1b3f2:	73a3      	strb	r3, [r4, #14]
   1b3f4:	2b00      	cmp	r3, #0
   1b3f6:	d147      	bne.n	1b488 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b3f8:	7b63      	ldrb	r3, [r4, #13]
   1b3fa:	3301      	adds	r3, #1
   1b3fc:	b2db      	uxtb	r3, r3
   1b3fe:	7363      	strb	r3, [r4, #13]
   1b400:	2b00      	cmp	r3, #0
   1b402:	d141      	bne.n	1b488 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b404:	7b23      	ldrb	r3, [r4, #12]
   1b406:	3301      	adds	r3, #1
   1b408:	b2db      	uxtb	r3, r3
   1b40a:	7323      	strb	r3, [r4, #12]
   1b40c:	2b00      	cmp	r3, #0
   1b40e:	d13b      	bne.n	1b488 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b410:	7ae3      	ldrb	r3, [r4, #11]
   1b412:	3301      	adds	r3, #1
   1b414:	b2db      	uxtb	r3, r3
   1b416:	72e3      	strb	r3, [r4, #11]
   1b418:	2b00      	cmp	r3, #0
   1b41a:	d135      	bne.n	1b488 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b41c:	7aa3      	ldrb	r3, [r4, #10]
   1b41e:	3301      	adds	r3, #1
   1b420:	b2db      	uxtb	r3, r3
   1b422:	72a3      	strb	r3, [r4, #10]
   1b424:	2b00      	cmp	r3, #0
   1b426:	d12f      	bne.n	1b488 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b428:	7a63      	ldrb	r3, [r4, #9]
   1b42a:	3301      	adds	r3, #1
   1b42c:	b2db      	uxtb	r3, r3
   1b42e:	7263      	strb	r3, [r4, #9]
   1b430:	bb53      	cbnz	r3, 1b488 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b432:	7a23      	ldrb	r3, [r4, #8]
   1b434:	3301      	adds	r3, #1
   1b436:	b2db      	uxtb	r3, r3
   1b438:	7223      	strb	r3, [r4, #8]
   1b43a:	bb2b      	cbnz	r3, 1b488 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b43c:	79e3      	ldrb	r3, [r4, #7]
   1b43e:	3301      	adds	r3, #1
   1b440:	b2db      	uxtb	r3, r3
   1b442:	71e3      	strb	r3, [r4, #7]
   1b444:	bb03      	cbnz	r3, 1b488 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b446:	79a3      	ldrb	r3, [r4, #6]
   1b448:	3301      	adds	r3, #1
   1b44a:	b2db      	uxtb	r3, r3
   1b44c:	71a3      	strb	r3, [r4, #6]
   1b44e:	b9db      	cbnz	r3, 1b488 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b450:	7963      	ldrb	r3, [r4, #5]
   1b452:	3301      	adds	r3, #1
   1b454:	b2db      	uxtb	r3, r3
   1b456:	7163      	strb	r3, [r4, #5]
   1b458:	b9b3      	cbnz	r3, 1b488 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b45a:	7923      	ldrb	r3, [r4, #4]
   1b45c:	3301      	adds	r3, #1
   1b45e:	b2db      	uxtb	r3, r3
   1b460:	7123      	strb	r3, [r4, #4]
   1b462:	b98b      	cbnz	r3, 1b488 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b464:	78e3      	ldrb	r3, [r4, #3]
   1b466:	3301      	adds	r3, #1
   1b468:	b2db      	uxtb	r3, r3
   1b46a:	70e3      	strb	r3, [r4, #3]
   1b46c:	b963      	cbnz	r3, 1b488 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b46e:	78a3      	ldrb	r3, [r4, #2]
   1b470:	3301      	adds	r3, #1
   1b472:	b2db      	uxtb	r3, r3
   1b474:	70a3      	strb	r3, [r4, #2]
   1b476:	b93b      	cbnz	r3, 1b488 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b478:	7863      	ldrb	r3, [r4, #1]
   1b47a:	3301      	adds	r3, #1
   1b47c:	b2db      	uxtb	r3, r3
   1b47e:	7063      	strb	r3, [r4, #1]
   1b480:	b913      	cbnz	r3, 1b488 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b482:	7823      	ldrb	r3, [r4, #0]
   1b484:	3301      	adds	r3, #1
   1b486:	7023      	strb	r3, [r4, #0]
   1b488:	463b      	mov	r3, r7
   1b48a:	4622      	mov	r2, r4
   1b48c:	2101      	movs	r1, #1
   1b48e:	4640      	mov	r0, r8
   1b490:	f000 fb5e 	bl	1bb50 <cc_mbedtls_aes_crypt_ecb>
   1b494:	4683      	mov	fp, r0
   1b496:	2800      	cmp	r0, #0
   1b498:	d093      	beq.n	1b3c2 <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   1b49a:	f8da 3000 	ldr.w	r3, [sl]
   1b49e:	4648      	mov	r0, r9
   1b4a0:	4798      	blx	r3
   1b4a2:	2120      	movs	r1, #32
   1b4a4:	4603      	mov	r3, r0
   1b4a6:	a804      	add	r0, sp, #16
   1b4a8:	2b00      	cmp	r3, #0
   1b4aa:	bf18      	it	ne
   1b4ac:	469b      	movne	fp, r3
   1b4ae:	f7ff fb13 	bl	1aad8 <mbedtls_platform_zeroize>
   1b4b2:	4638      	mov	r0, r7
   1b4b4:	2110      	movs	r1, #16
   1b4b6:	f7ff fb0f 	bl	1aad8 <mbedtls_platform_zeroize>
   1b4ba:	4658      	mov	r0, fp
   1b4bc:	b00d      	add	sp, #52	; 0x34
   1b4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4c2:	4642      	mov	r2, r8
   1b4c4:	4639      	mov	r1, r7
   1b4c6:	2300      	movs	r3, #0
   1b4c8:	4620      	mov	r0, r4
   1b4ca:	f7ff fe7f 	bl	1b1cc <mbedtls_ctr_drbg_reseed_internal>
   1b4ce:	f8df a068 	ldr.w	sl, [pc, #104]	; 1b538 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1b4d2:	2800      	cmp	r0, #0
   1b4d4:	f43f af6d 	beq.w	1b3b2 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   1b4d8:	f8da 3000 	ldr.w	r3, [sl]
   1b4dc:	4648      	mov	r0, r9
   1b4de:	4798      	blx	r3
   1b4e0:	4683      	mov	fp, r0
   1b4e2:	2800      	cmp	r0, #0
   1b4e4:	f43f af65 	beq.w	1b3b2 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   1b4e8:	e7e7      	b.n	1b4ba <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1b4ea:	a904      	add	r1, sp, #16
   1b4ec:	4620      	mov	r0, r4
   1b4ee:	f7ff fdc7 	bl	1b080 <ctr_drbg_update_internal>
   1b4f2:	4683      	mov	fp, r0
   1b4f4:	2800      	cmp	r0, #0
   1b4f6:	d1d0      	bne.n	1b49a <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1b4f8:	6923      	ldr	r3, [r4, #16]
   1b4fa:	3301      	adds	r3, #1
   1b4fc:	6123      	str	r3, [r4, #16]
   1b4fe:	e7cc      	b.n	1b49a <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1b500:	4642      	mov	r2, r8
   1b502:	4639      	mov	r1, r7
   1b504:	a804      	add	r0, sp, #16
   1b506:	f7ff fc7b 	bl	1ae00 <block_cipher_df>
   1b50a:	4683      	mov	fp, r0
   1b50c:	b118      	cbz	r0, 1b516 <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   1b50e:	f8df a028 	ldr.w	sl, [pc, #40]	; 1b538 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1b512:	466f      	mov	r7, sp
   1b514:	e7c1      	b.n	1b49a <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1b516:	a904      	add	r1, sp, #16
   1b518:	4620      	mov	r0, r4
   1b51a:	f7ff fdb1 	bl	1b080 <ctr_drbg_update_internal>
   1b51e:	4683      	mov	fp, r0
   1b520:	2800      	cmp	r0, #0
   1b522:	f43f af44 	beq.w	1b3ae <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1b526:	e7f2      	b.n	1b50e <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   1b528:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   1b52c:	e7c5      	b.n	1b4ba <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1b52e:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   1b532:	e7c2      	b.n	1b4ba <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1b534:	2000069c 	.word	0x2000069c
   1b538:	200006a0 	.word	0x200006a0

0001b53c <cc_mbedtls_sha256_ret>:
   1b53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b53e:	461c      	mov	r4, r3
   1b540:	4605      	mov	r5, r0
   1b542:	4811      	ldr	r0, [pc, #68]	; (1b588 <cc_mbedtls_sha256_ret+0x4c>)
   1b544:	460e      	mov	r6, r1
   1b546:	4617      	mov	r7, r2
   1b548:	f7ff fb4e 	bl	1abe8 <cc_mbedtls_sha256_init>
   1b54c:	4621      	mov	r1, r4
   1b54e:	480e      	ldr	r0, [pc, #56]	; (1b588 <cc_mbedtls_sha256_ret+0x4c>)
   1b550:	f7ff fb64 	bl	1ac1c <cc_mbedtls_sha256_starts_ret>
   1b554:	4604      	mov	r4, r0
   1b556:	b120      	cbz	r0, 1b562 <cc_mbedtls_sha256_ret+0x26>
   1b558:	480b      	ldr	r0, [pc, #44]	; (1b588 <cc_mbedtls_sha256_ret+0x4c>)
   1b55a:	f7ff fb59 	bl	1ac10 <cc_mbedtls_sha256_free>
   1b55e:	4620      	mov	r0, r4
   1b560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b562:	4809      	ldr	r0, [pc, #36]	; (1b588 <cc_mbedtls_sha256_ret+0x4c>)
   1b564:	4632      	mov	r2, r6
   1b566:	4629      	mov	r1, r5
   1b568:	f7ff fb6c 	bl	1ac44 <cc_mbedtls_sha256_update_ret>
   1b56c:	4604      	mov	r4, r0
   1b56e:	2800      	cmp	r0, #0
   1b570:	d1f2      	bne.n	1b558 <cc_mbedtls_sha256_ret+0x1c>
   1b572:	4639      	mov	r1, r7
   1b574:	4804      	ldr	r0, [pc, #16]	; (1b588 <cc_mbedtls_sha256_ret+0x4c>)
   1b576:	f7ff fb6d 	bl	1ac54 <cc_mbedtls_sha256_finish_ret>
   1b57a:	4604      	mov	r4, r0
   1b57c:	4802      	ldr	r0, [pc, #8]	; (1b588 <cc_mbedtls_sha256_ret+0x4c>)
   1b57e:	f7ff fb47 	bl	1ac10 <cc_mbedtls_sha256_free>
   1b582:	4620      	mov	r0, r4
   1b584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b586:	bf00      	nop
   1b588:	20002de8 	.word	0x20002de8

0001b58c <RNG_PLAT_SetUserRngParameters>:
   1b58c:	b530      	push	{r4, r5, lr}
   1b58e:	b083      	sub	sp, #12
   1b590:	231c      	movs	r3, #28
   1b592:	a901      	add	r1, sp, #4
   1b594:	4604      	mov	r4, r0
   1b596:	9301      	str	r3, [sp, #4]
   1b598:	f000 f83c 	bl	1b614 <CC_PalTrngParamGet>
   1b59c:	4605      	mov	r5, r0
   1b59e:	b938      	cbnz	r0, 1b5b0 <RNG_PLAT_SetUserRngParameters+0x24>
   1b5a0:	9b01      	ldr	r3, [sp, #4]
   1b5a2:	2b1c      	cmp	r3, #28
   1b5a4:	d007      	beq.n	1b5b6 <RNG_PLAT_SetUserRngParameters+0x2a>
   1b5a6:	4d15      	ldr	r5, [pc, #84]	; (1b5fc <RNG_PLAT_SetUserRngParameters+0x70>)
   1b5a8:	4620      	mov	r0, r4
   1b5aa:	211c      	movs	r1, #28
   1b5ac:	f000 f82e 	bl	1b60c <CC_PalMemSetZeroPlat>
   1b5b0:	4628      	mov	r0, r5
   1b5b2:	b003      	add	sp, #12
   1b5b4:	bd30      	pop	{r4, r5, pc}
   1b5b6:	e9d4 3200 	ldrd	r3, r2, [r4]
   1b5ba:	2101      	movs	r1, #1
   1b5bc:	3b00      	subs	r3, #0
   1b5be:	bf18      	it	ne
   1b5c0:	2301      	movne	r3, #1
   1b5c2:	61e1      	str	r1, [r4, #28]
   1b5c4:	b10a      	cbz	r2, 1b5ca <RNG_PLAT_SetUserRngParameters+0x3e>
   1b5c6:	f043 0302 	orr.w	r3, r3, #2
   1b5ca:	68a2      	ldr	r2, [r4, #8]
   1b5cc:	b932      	cbnz	r2, 1b5dc <RNG_PLAT_SetUserRngParameters+0x50>
   1b5ce:	68e2      	ldr	r2, [r4, #12]
   1b5d0:	b942      	cbnz	r2, 1b5e4 <RNG_PLAT_SetUserRngParameters+0x58>
   1b5d2:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1b5d6:	b97b      	cbnz	r3, 1b5f8 <RNG_PLAT_SetUserRngParameters+0x6c>
   1b5d8:	4d09      	ldr	r5, [pc, #36]	; (1b600 <RNG_PLAT_SetUserRngParameters+0x74>)
   1b5da:	e7e5      	b.n	1b5a8 <RNG_PLAT_SetUserRngParameters+0x1c>
   1b5dc:	68e2      	ldr	r2, [r4, #12]
   1b5de:	f043 0304 	orr.w	r3, r3, #4
   1b5e2:	b13a      	cbz	r2, 1b5f4 <RNG_PLAT_SetUserRngParameters+0x68>
   1b5e4:	f043 0308 	orr.w	r3, r3, #8
   1b5e8:	2200      	movs	r2, #0
   1b5ea:	4628      	mov	r0, r5
   1b5ec:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1b5f0:	b003      	add	sp, #12
   1b5f2:	bd30      	pop	{r4, r5, pc}
   1b5f4:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1b5f8:	4615      	mov	r5, r2
   1b5fa:	e7d9      	b.n	1b5b0 <RNG_PLAT_SetUserRngParameters+0x24>
   1b5fc:	00f00c37 	.word	0x00f00c37
   1b600:	00f00c0e 	.word	0x00f00c0e

0001b604 <CC_PalMemCopyPlat>:
   1b604:	f002 bb0e 	b.w	1dc24 <memmove>

0001b608 <CC_PalMemSetPlat>:
   1b608:	f002 bb2e 	b.w	1dc68 <memset>

0001b60c <CC_PalMemSetZeroPlat>:
   1b60c:	460a      	mov	r2, r1
   1b60e:	2100      	movs	r1, #0
   1b610:	f002 bb2a 	b.w	1dc68 <memset>

0001b614 <CC_PalTrngParamGet>:
   1b614:	b118      	cbz	r0, 1b61e <CC_PalTrngParamGet+0xa>
   1b616:	b111      	cbz	r1, 1b61e <CC_PalTrngParamGet+0xa>
   1b618:	680b      	ldr	r3, [r1, #0]
   1b61a:	2b1c      	cmp	r3, #28
   1b61c:	d001      	beq.n	1b622 <CC_PalTrngParamGet+0xe>
   1b61e:	2001      	movs	r0, #1
   1b620:	4770      	bx	lr
   1b622:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b626:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   1b62a:	3201      	adds	r2, #1
   1b62c:	bf14      	ite	ne
   1b62e:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   1b632:	f241 225c 	movweq	r2, #4700	; 0x125c
   1b636:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b63a:	6002      	str	r2, [r0, #0]
   1b63c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   1b640:	3201      	adds	r2, #1
   1b642:	bf14      	ite	ne
   1b644:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   1b648:	f641 1264 	movweq	r2, #6500	; 0x1964
   1b64c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b650:	6042      	str	r2, [r0, #4]
   1b652:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   1b656:	3201      	adds	r2, #1
   1b658:	bf14      	ite	ne
   1b65a:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   1b65e:	f640 62d8 	movweq	r2, #3800	; 0xed8
   1b662:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b666:	6082      	str	r2, [r0, #8]
   1b668:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   1b66c:	3201      	adds	r2, #1
   1b66e:	bf14      	ite	ne
   1b670:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   1b674:	f241 3288 	movweq	r2, #5000	; 0x1388
   1b678:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b67c:	60c2      	str	r2, [r0, #12]
   1b67e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   1b682:	3201      	adds	r2, #1
   1b684:	bf14      	ite	ne
   1b686:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   1b68a:	2290      	moveq	r2, #144	; 0x90
   1b68c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b690:	6102      	str	r2, [r0, #16]
   1b692:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   1b696:	3201      	adds	r2, #1
   1b698:	bf14      	ite	ne
   1b69a:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   1b69e:	2251      	moveq	r2, #81	; 0x51
   1b6a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b6a4:	6142      	str	r2, [r0, #20]
   1b6a6:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   1b6aa:	3201      	adds	r2, #1
   1b6ac:	bf14      	ite	ne
   1b6ae:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   1b6b2:	f240 3337 	movweq	r3, #823	; 0x337
   1b6b6:	6183      	str	r3, [r0, #24]
   1b6b8:	2000      	movs	r0, #0
   1b6ba:	4770      	bx	lr

0001b6bc <LLF_RND_WaitRngInterrupt>:
   1b6bc:	b508      	push	{r3, lr}
   1b6be:	4601      	mov	r1, r0
   1b6c0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1b6c4:	f7fe fe32 	bl	1a32c <CC_HalWaitInterruptRND>
   1b6c8:	4902      	ldr	r1, [pc, #8]	; (1b6d4 <LLF_RND_WaitRngInterrupt+0x18>)
   1b6ca:	4a03      	ldr	r2, [pc, #12]	; (1b6d8 <LLF_RND_WaitRngInterrupt+0x1c>)
   1b6cc:	2300      	movs	r3, #0
   1b6ce:	600b      	str	r3, [r1, #0]
   1b6d0:	6013      	str	r3, [r2, #0]
   1b6d2:	bd08      	pop	{r3, pc}
   1b6d4:	5002b1c8 	.word	0x5002b1c8
   1b6d8:	5002b12c 	.word	0x5002b12c

0001b6dc <LLF_RND_GetRoscSampleCnt>:
   1b6dc:	3801      	subs	r0, #1
   1b6de:	2807      	cmp	r0, #7
   1b6e0:	d805      	bhi.n	1b6ee <LLF_RND_GetRoscSampleCnt+0x12>
   1b6e2:	e8df f000 	tbb	[pc, r0]
   1b6e6:	0e0a      	.short	0x0e0a
   1b6e8:	04041204 	.word	0x04041204
   1b6ec:	0604      	.short	0x0604
   1b6ee:	4809      	ldr	r0, [pc, #36]	; (1b714 <LLF_RND_GetRoscSampleCnt+0x38>)
   1b6f0:	4770      	bx	lr
   1b6f2:	68cb      	ldr	r3, [r1, #12]
   1b6f4:	624b      	str	r3, [r1, #36]	; 0x24
   1b6f6:	2000      	movs	r0, #0
   1b6f8:	4770      	bx	lr
   1b6fa:	680b      	ldr	r3, [r1, #0]
   1b6fc:	624b      	str	r3, [r1, #36]	; 0x24
   1b6fe:	2000      	movs	r0, #0
   1b700:	4770      	bx	lr
   1b702:	684b      	ldr	r3, [r1, #4]
   1b704:	624b      	str	r3, [r1, #36]	; 0x24
   1b706:	2000      	movs	r0, #0
   1b708:	4770      	bx	lr
   1b70a:	688b      	ldr	r3, [r1, #8]
   1b70c:	624b      	str	r3, [r1, #36]	; 0x24
   1b70e:	2000      	movs	r0, #0
   1b710:	4770      	bx	lr
   1b712:	bf00      	nop
   1b714:	00f10c31 	.word	0x00f10c31

0001b718 <LLF_RND_GetFastestRosc>:
   1b718:	680b      	ldr	r3, [r1, #0]
   1b71a:	e002      	b.n	1b722 <LLF_RND_GetFastestRosc+0xa>
   1b71c:	2b08      	cmp	r3, #8
   1b71e:	600b      	str	r3, [r1, #0]
   1b720:	d806      	bhi.n	1b730 <LLF_RND_GetFastestRosc+0x18>
   1b722:	6a02      	ldr	r2, [r0, #32]
   1b724:	4213      	tst	r3, r2
   1b726:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1b72a:	d0f7      	beq.n	1b71c <LLF_RND_GetFastestRosc+0x4>
   1b72c:	2000      	movs	r0, #0
   1b72e:	4770      	bx	lr
   1b730:	4800      	ldr	r0, [pc, #0]	; (1b734 <LLF_RND_GetFastestRosc+0x1c>)
   1b732:	4770      	bx	lr
   1b734:	00f10c31 	.word	0x00f10c31

0001b738 <LLF_RND_TurnOffTrng>:
   1b738:	4904      	ldr	r1, [pc, #16]	; (1b74c <LLF_RND_TurnOffTrng+0x14>)
   1b73a:	4a05      	ldr	r2, [pc, #20]	; (1b750 <LLF_RND_TurnOffTrng+0x18>)
   1b73c:	2300      	movs	r3, #0
   1b73e:	600b      	str	r3, [r1, #0]
   1b740:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1b744:	6013      	str	r3, [r2, #0]
   1b746:	f7fe bdd7 	b.w	1a2f8 <CC_HalClearInterruptBit>
   1b74a:	bf00      	nop
   1b74c:	5002b12c 	.word	0x5002b12c
   1b750:	5002b1c4 	.word	0x5002b1c4

0001b754 <SetDataBuffersInfo>:
   1b754:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b756:	b083      	sub	sp, #12
   1b758:	2400      	movs	r4, #0
   1b75a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1b75e:	f88d 4007 	strb.w	r4, [sp, #7]
   1b762:	d325      	bcc.n	1b7b0 <SetDataBuffersInfo+0x5c>
   1b764:	460c      	mov	r4, r1
   1b766:	4404      	add	r4, r0
   1b768:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1b76c:	4605      	mov	r5, r0
   1b76e:	d81f      	bhi.n	1b7b0 <SetDataBuffersInfo+0x5c>
   1b770:	4617      	mov	r7, r2
   1b772:	461e      	mov	r6, r3
   1b774:	2201      	movs	r2, #1
   1b776:	f10d 0307 	add.w	r3, sp, #7
   1b77a:	f000 fa13 	bl	1bba4 <CC_PalDataBufferAttrGet>
   1b77e:	4604      	mov	r4, r0
   1b780:	b9b0      	cbnz	r0, 1b7b0 <SetDataBuffersInfo+0x5c>
   1b782:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b784:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b788:	603d      	str	r5, [r7, #0]
   1b78a:	713b      	strb	r3, [r7, #4]
   1b78c:	b192      	cbz	r2, 1b7b4 <SetDataBuffersInfo+0x60>
   1b78e:	b14e      	cbz	r6, 1b7a4 <SetDataBuffersInfo+0x50>
   1b790:	4602      	mov	r2, r0
   1b792:	9908      	ldr	r1, [sp, #32]
   1b794:	f10d 0307 	add.w	r3, sp, #7
   1b798:	4630      	mov	r0, r6
   1b79a:	f000 fa03 	bl	1bba4 <CC_PalDataBufferAttrGet>
   1b79e:	b938      	cbnz	r0, 1b7b0 <SetDataBuffersInfo+0x5c>
   1b7a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b7a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b7a6:	4620      	mov	r0, r4
   1b7a8:	6016      	str	r6, [r2, #0]
   1b7aa:	7113      	strb	r3, [r2, #4]
   1b7ac:	b003      	add	sp, #12
   1b7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b7b0:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   1b7b4:	4620      	mov	r0, r4
   1b7b6:	b003      	add	sp, #12
   1b7b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b7ba:	bf00      	nop

0001b7bc <InitHashDrv>:
   1b7bc:	b1e8      	cbz	r0, 1b7fa <InitHashDrv+0x3e>
   1b7be:	b510      	push	{r4, lr}
   1b7c0:	6804      	ldr	r4, [r0, #0]
   1b7c2:	2c01      	cmp	r4, #1
   1b7c4:	d004      	beq.n	1b7d0 <InitHashDrv+0x14>
   1b7c6:	2c02      	cmp	r4, #2
   1b7c8:	d010      	beq.n	1b7ec <InitHashDrv+0x30>
   1b7ca:	b144      	cbz	r4, 1b7de <InitHashDrv+0x22>
   1b7cc:	480c      	ldr	r0, [pc, #48]	; (1b800 <InitHashDrv+0x44>)
   1b7ce:	bd10      	pop	{r4, pc}
   1b7d0:	490c      	ldr	r1, [pc, #48]	; (1b804 <InitHashDrv+0x48>)
   1b7d2:	2220      	movs	r2, #32
   1b7d4:	3008      	adds	r0, #8
   1b7d6:	f7ff ff15 	bl	1b604 <CC_PalMemCopyPlat>
   1b7da:	2000      	movs	r0, #0
   1b7dc:	bd10      	pop	{r4, pc}
   1b7de:	490a      	ldr	r1, [pc, #40]	; (1b808 <InitHashDrv+0x4c>)
   1b7e0:	2214      	movs	r2, #20
   1b7e2:	3008      	adds	r0, #8
   1b7e4:	f7ff ff0e 	bl	1b604 <CC_PalMemCopyPlat>
   1b7e8:	4620      	mov	r0, r4
   1b7ea:	bd10      	pop	{r4, pc}
   1b7ec:	4907      	ldr	r1, [pc, #28]	; (1b80c <InitHashDrv+0x50>)
   1b7ee:	2220      	movs	r2, #32
   1b7f0:	3008      	adds	r0, #8
   1b7f2:	f7ff ff07 	bl	1b604 <CC_PalMemCopyPlat>
   1b7f6:	2000      	movs	r0, #0
   1b7f8:	bd10      	pop	{r4, pc}
   1b7fa:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1b7fe:	4770      	bx	lr
   1b800:	00f30001 	.word	0x00f30001
   1b804:	00021828 	.word	0x00021828
   1b808:	000217f4 	.word	0x000217f4
   1b80c:	00021808 	.word	0x00021808

0001b810 <ProcessHashDrv>:
   1b810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b814:	2900      	cmp	r1, #0
   1b816:	f000 80ef 	beq.w	1b9f8 <ProcessHashDrv+0x1e8>
   1b81a:	4604      	mov	r4, r0
   1b81c:	2800      	cmp	r0, #0
   1b81e:	f000 80ef 	beq.w	1ba00 <ProcessHashDrv+0x1f0>
   1b822:	6803      	ldr	r3, [r0, #0]
   1b824:	4617      	mov	r7, r2
   1b826:	460e      	mov	r6, r1
   1b828:	2b00      	cmp	r3, #0
   1b82a:	f000 80b9 	beq.w	1b9a0 <ProcessHashDrv+0x190>
   1b82e:	3b01      	subs	r3, #1
   1b830:	2b01      	cmp	r3, #1
   1b832:	f200 80cd 	bhi.w	1b9d0 <ProcessHashDrv+0x1c0>
   1b836:	4874      	ldr	r0, [pc, #464]	; (1ba08 <ProcessHashDrv+0x1f8>)
   1b838:	f04f 31ff 	mov.w	r1, #4294967295
   1b83c:	f04f 0802 	mov.w	r8, #2
   1b840:	f7fe fe02 	bl	1a448 <CC_PalMutexLock>
   1b844:	2800      	cmp	r0, #0
   1b846:	f040 80b5 	bne.w	1b9b4 <ProcessHashDrv+0x1a4>
   1b84a:	2000      	movs	r0, #0
   1b84c:	f7fe fe2c 	bl	1a4a8 <CC_PalPowerSaveModeSelect>
   1b850:	4605      	mov	r5, r0
   1b852:	2800      	cmp	r0, #0
   1b854:	f040 80b8 	bne.w	1b9c8 <ProcessHashDrv+0x1b8>
   1b858:	4a6c      	ldr	r2, [pc, #432]	; (1ba0c <ProcessHashDrv+0x1fc>)
   1b85a:	6813      	ldr	r3, [r2, #0]
   1b85c:	2b00      	cmp	r3, #0
   1b85e:	d1fc      	bne.n	1b85a <ProcessHashDrv+0x4a>
   1b860:	486b      	ldr	r0, [pc, #428]	; (1ba10 <ProcessHashDrv+0x200>)
   1b862:	6803      	ldr	r3, [r0, #0]
   1b864:	2b00      	cmp	r3, #0
   1b866:	d1fc      	bne.n	1b862 <ProcessHashDrv+0x52>
   1b868:	f04f 30ff 	mov.w	r0, #4294967295
   1b86c:	f7fe fd44 	bl	1a2f8 <CC_HalClearInterruptBit>
   1b870:	4b68      	ldr	r3, [pc, #416]	; (1ba14 <ProcessHashDrv+0x204>)
   1b872:	6818      	ldr	r0, [r3, #0]
   1b874:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   1b878:	f7fe fd4c 	bl	1a314 <CC_HalMaskInterrupt>
   1b87c:	4866      	ldr	r0, [pc, #408]	; (1ba18 <ProcessHashDrv+0x208>)
   1b87e:	4a67      	ldr	r2, [pc, #412]	; (1ba1c <ProcessHashDrv+0x20c>)
   1b880:	4967      	ldr	r1, [pc, #412]	; (1ba20 <ProcessHashDrv+0x210>)
   1b882:	2301      	movs	r3, #1
   1b884:	6003      	str	r3, [r0, #0]
   1b886:	2007      	movs	r0, #7
   1b888:	6010      	str	r0, [r2, #0]
   1b88a:	600b      	str	r3, [r1, #0]
   1b88c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
   1b890:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1b892:	6013      	str	r3, [r2, #0]
   1b894:	4b63      	ldr	r3, [pc, #396]	; (1ba24 <ProcessHashDrv+0x214>)
   1b896:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1b898:	6051      	str	r1, [r2, #4]
   1b89a:	f8c3 8000 	str.w	r8, [r3]
   1b89e:	6823      	ldr	r3, [r4, #0]
   1b8a0:	b15b      	cbz	r3, 1b8ba <ProcessHashDrv+0xaa>
   1b8a2:	3b01      	subs	r3, #1
   1b8a4:	2b01      	cmp	r3, #1
   1b8a6:	d817      	bhi.n	1b8d8 <ProcessHashDrv+0xc8>
   1b8a8:	4b5f      	ldr	r3, [pc, #380]	; (1ba28 <ProcessHashDrv+0x218>)
   1b8aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1b8ac:	601a      	str	r2, [r3, #0]
   1b8ae:	6a22      	ldr	r2, [r4, #32]
   1b8b0:	f843 2c04 	str.w	r2, [r3, #-4]
   1b8b4:	69e2      	ldr	r2, [r4, #28]
   1b8b6:	f843 2c08 	str.w	r2, [r3, #-8]
   1b8ba:	4b5c      	ldr	r3, [pc, #368]	; (1ba2c <ProcessHashDrv+0x21c>)
   1b8bc:	69a2      	ldr	r2, [r4, #24]
   1b8be:	601a      	str	r2, [r3, #0]
   1b8c0:	6962      	ldr	r2, [r4, #20]
   1b8c2:	f843 2c04 	str.w	r2, [r3, #-4]
   1b8c6:	6922      	ldr	r2, [r4, #16]
   1b8c8:	f843 2c08 	str.w	r2, [r3, #-8]
   1b8cc:	68e2      	ldr	r2, [r4, #12]
   1b8ce:	f843 2c0c 	str.w	r2, [r3, #-12]
   1b8d2:	68a2      	ldr	r2, [r4, #8]
   1b8d4:	f843 2c10 	str.w	r2, [r3, #-16]
   1b8d8:	4a55      	ldr	r2, [pc, #340]	; (1ba30 <ProcessHashDrv+0x220>)
   1b8da:	6813      	ldr	r3, [r2, #0]
   1b8dc:	2b00      	cmp	r3, #0
   1b8de:	d1fc      	bne.n	1b8da <ProcessHashDrv+0xca>
   1b8e0:	2f00      	cmp	r7, #0
   1b8e2:	d059      	beq.n	1b998 <ProcessHashDrv+0x188>
   1b8e4:	6863      	ldr	r3, [r4, #4]
   1b8e6:	2b01      	cmp	r3, #1
   1b8e8:	bf04      	itt	eq
   1b8ea:	4a52      	ldreq	r2, [pc, #328]	; (1ba34 <ProcessHashDrv+0x224>)
   1b8ec:	6013      	streq	r3, [r2, #0]
   1b8ee:	4a52      	ldr	r2, [pc, #328]	; (1ba38 <ProcessHashDrv+0x228>)
   1b8f0:	4b52      	ldr	r3, [pc, #328]	; (1ba3c <ProcessHashDrv+0x22c>)
   1b8f2:	6831      	ldr	r1, [r6, #0]
   1b8f4:	6011      	str	r1, [r2, #0]
   1b8f6:	2040      	movs	r0, #64	; 0x40
   1b8f8:	601f      	str	r7, [r3, #0]
   1b8fa:	f7fe fd11 	bl	1a320 <CC_HalWaitInterrupt>
   1b8fe:	4605      	mov	r5, r0
   1b900:	4a4b      	ldr	r2, [pc, #300]	; (1ba30 <ProcessHashDrv+0x220>)
   1b902:	6813      	ldr	r3, [r2, #0]
   1b904:	2b00      	cmp	r3, #0
   1b906:	d1fc      	bne.n	1b902 <ProcessHashDrv+0xf2>
   1b908:	4a41      	ldr	r2, [pc, #260]	; (1ba10 <ProcessHashDrv+0x200>)
   1b90a:	6813      	ldr	r3, [r2, #0]
   1b90c:	2b00      	cmp	r3, #0
   1b90e:	d1fc      	bne.n	1b90a <ProcessHashDrv+0xfa>
   1b910:	6823      	ldr	r3, [r4, #0]
   1b912:	b15b      	cbz	r3, 1b92c <ProcessHashDrv+0x11c>
   1b914:	3b01      	subs	r3, #1
   1b916:	2b01      	cmp	r3, #1
   1b918:	d817      	bhi.n	1b94a <ProcessHashDrv+0x13a>
   1b91a:	4a43      	ldr	r2, [pc, #268]	; (1ba28 <ProcessHashDrv+0x218>)
   1b91c:	4b48      	ldr	r3, [pc, #288]	; (1ba40 <ProcessHashDrv+0x230>)
   1b91e:	6812      	ldr	r2, [r2, #0]
   1b920:	6262      	str	r2, [r4, #36]	; 0x24
   1b922:	681a      	ldr	r2, [r3, #0]
   1b924:	6222      	str	r2, [r4, #32]
   1b926:	3b04      	subs	r3, #4
   1b928:	681b      	ldr	r3, [r3, #0]
   1b92a:	61e3      	str	r3, [r4, #28]
   1b92c:	4a3f      	ldr	r2, [pc, #252]	; (1ba2c <ProcessHashDrv+0x21c>)
   1b92e:	4b45      	ldr	r3, [pc, #276]	; (1ba44 <ProcessHashDrv+0x234>)
   1b930:	6812      	ldr	r2, [r2, #0]
   1b932:	61a2      	str	r2, [r4, #24]
   1b934:	681a      	ldr	r2, [r3, #0]
   1b936:	6162      	str	r2, [r4, #20]
   1b938:	f853 2c04 	ldr.w	r2, [r3, #-4]
   1b93c:	6122      	str	r2, [r4, #16]
   1b93e:	f853 2c08 	ldr.w	r2, [r3, #-8]
   1b942:	60e2      	str	r2, [r4, #12]
   1b944:	3b0c      	subs	r3, #12
   1b946:	681b      	ldr	r3, [r3, #0]
   1b948:	60a3      	str	r3, [r4, #8]
   1b94a:	4b3f      	ldr	r3, [pc, #252]	; (1ba48 <ProcessHashDrv+0x238>)
   1b94c:	4a3f      	ldr	r2, [pc, #252]	; (1ba4c <ProcessHashDrv+0x23c>)
   1b94e:	681b      	ldr	r3, [r3, #0]
   1b950:	64a3      	str	r3, [r4, #72]	; 0x48
   1b952:	6812      	ldr	r2, [r2, #0]
   1b954:	4b32      	ldr	r3, [pc, #200]	; (1ba20 <ProcessHashDrv+0x210>)
   1b956:	64e2      	str	r2, [r4, #76]	; 0x4c
   1b958:	4836      	ldr	r0, [pc, #216]	; (1ba34 <ProcessHashDrv+0x224>)
   1b95a:	493d      	ldr	r1, [pc, #244]	; (1ba50 <ProcessHashDrv+0x240>)
   1b95c:	2201      	movs	r2, #1
   1b95e:	601a      	str	r2, [r3, #0]
   1b960:	2300      	movs	r3, #0
   1b962:	4a33      	ldr	r2, [pc, #204]	; (1ba30 <ProcessHashDrv+0x220>)
   1b964:	6003      	str	r3, [r0, #0]
   1b966:	600b      	str	r3, [r1, #0]
   1b968:	6813      	ldr	r3, [r2, #0]
   1b96a:	2b00      	cmp	r3, #0
   1b96c:	d1fc      	bne.n	1b968 <ProcessHashDrv+0x158>
   1b96e:	4a2a      	ldr	r2, [pc, #168]	; (1ba18 <ProcessHashDrv+0x208>)
   1b970:	6013      	str	r3, [r2, #0]
   1b972:	2d00      	cmp	r5, #0
   1b974:	d13a      	bne.n	1b9ec <ProcessHashDrv+0x1dc>
   1b976:	4b27      	ldr	r3, [pc, #156]	; (1ba14 <ProcessHashDrv+0x204>)
   1b978:	6818      	ldr	r0, [r3, #0]
   1b97a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1b97e:	f7fe fcc9 	bl	1a314 <CC_HalMaskInterrupt>
   1b982:	2001      	movs	r0, #1
   1b984:	f7fe fd90 	bl	1a4a8 <CC_PalPowerSaveModeSelect>
   1b988:	bb60      	cbnz	r0, 1b9e4 <ProcessHashDrv+0x1d4>
   1b98a:	481f      	ldr	r0, [pc, #124]	; (1ba08 <ProcessHashDrv+0x1f8>)
   1b98c:	f7fe fd64 	bl	1a458 <CC_PalMutexUnlock>
   1b990:	bb10      	cbnz	r0, 1b9d8 <ProcessHashDrv+0x1c8>
   1b992:	4628      	mov	r0, r5
   1b994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b998:	4b2d      	ldr	r3, [pc, #180]	; (1ba50 <ProcessHashDrv+0x240>)
   1b99a:	2204      	movs	r2, #4
   1b99c:	601a      	str	r2, [r3, #0]
   1b99e:	e7af      	b.n	1b900 <ProcessHashDrv+0xf0>
   1b9a0:	4819      	ldr	r0, [pc, #100]	; (1ba08 <ProcessHashDrv+0x1f8>)
   1b9a2:	f04f 31ff 	mov.w	r1, #4294967295
   1b9a6:	f04f 0801 	mov.w	r8, #1
   1b9aa:	f7fe fd4d 	bl	1a448 <CC_PalMutexLock>
   1b9ae:	2800      	cmp	r0, #0
   1b9b0:	f43f af4b 	beq.w	1b84a <ProcessHashDrv+0x3a>
   1b9b4:	4827      	ldr	r0, [pc, #156]	; (1ba54 <ProcessHashDrv+0x244>)
   1b9b6:	f7fe f9b1 	bl	19d1c <CC_PalAbort>
   1b9ba:	2000      	movs	r0, #0
   1b9bc:	f7fe fd74 	bl	1a4a8 <CC_PalPowerSaveModeSelect>
   1b9c0:	4605      	mov	r5, r0
   1b9c2:	2800      	cmp	r0, #0
   1b9c4:	f43f af48 	beq.w	1b858 <ProcessHashDrv+0x48>
   1b9c8:	4823      	ldr	r0, [pc, #140]	; (1ba58 <ProcessHashDrv+0x248>)
   1b9ca:	f7fe f9a7 	bl	19d1c <CC_PalAbort>
   1b9ce:	e743      	b.n	1b858 <ProcessHashDrv+0x48>
   1b9d0:	4d22      	ldr	r5, [pc, #136]	; (1ba5c <ProcessHashDrv+0x24c>)
   1b9d2:	4628      	mov	r0, r5
   1b9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b9d8:	4821      	ldr	r0, [pc, #132]	; (1ba60 <ProcessHashDrv+0x250>)
   1b9da:	f7fe f99f 	bl	19d1c <CC_PalAbort>
   1b9de:	4628      	mov	r0, r5
   1b9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b9e4:	481f      	ldr	r0, [pc, #124]	; (1ba64 <ProcessHashDrv+0x254>)
   1b9e6:	f7fe f999 	bl	19d1c <CC_PalAbort>
   1b9ea:	e7ce      	b.n	1b98a <ProcessHashDrv+0x17a>
   1b9ec:	f104 0008 	add.w	r0, r4, #8
   1b9f0:	2110      	movs	r1, #16
   1b9f2:	f7ff fe0b 	bl	1b60c <CC_PalMemSetZeroPlat>
   1b9f6:	e7be      	b.n	1b976 <ProcessHashDrv+0x166>
   1b9f8:	4d1b      	ldr	r5, [pc, #108]	; (1ba68 <ProcessHashDrv+0x258>)
   1b9fa:	4628      	mov	r0, r5
   1b9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ba00:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   1ba04:	e7c5      	b.n	1b992 <ProcessHashDrv+0x182>
   1ba06:	bf00      	nop
   1ba08:	20000690 	.word	0x20000690
   1ba0c:	5002b91c 	.word	0x5002b91c
   1ba10:	5002bc20 	.word	0x5002bc20
   1ba14:	5002ba04 	.word	0x5002ba04
   1ba18:	5002b818 	.word	0x5002b818
   1ba1c:	5002b900 	.word	0x5002b900
   1ba20:	5002b7c4 	.word	0x5002b7c4
   1ba24:	5002b7c0 	.word	0x5002b7c0
   1ba28:	5002b65c 	.word	0x5002b65c
   1ba2c:	5002b650 	.word	0x5002b650
   1ba30:	5002b910 	.word	0x5002b910
   1ba34:	5002b684 	.word	0x5002b684
   1ba38:	5002bc28 	.word	0x5002bc28
   1ba3c:	5002bc2c 	.word	0x5002bc2c
   1ba40:	5002b658 	.word	0x5002b658
   1ba44:	5002b64c 	.word	0x5002b64c
   1ba48:	5002b7cc 	.word	0x5002b7cc
   1ba4c:	5002b7d0 	.word	0x5002b7d0
   1ba50:	5002b7c8 	.word	0x5002b7c8
   1ba54:	0002173c 	.word	0x0002173c
   1ba58:	00021754 	.word	0x00021754
   1ba5c:	00f30001 	.word	0x00f30001
   1ba60:	00021794 	.word	0x00021794
   1ba64:	00021774 	.word	0x00021774
   1ba68:	00f30003 	.word	0x00f30003

0001ba6c <FinishHashDrv>:
   1ba6c:	2800      	cmp	r0, #0
   1ba6e:	d03b      	beq.n	1bae8 <FinishHashDrv+0x7c>
   1ba70:	b4f0      	push	{r4, r5, r6, r7}
   1ba72:	b082      	sub	sp, #8
   1ba74:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1ba76:	9301      	str	r3, [sp, #4]
   1ba78:	6883      	ldr	r3, [r0, #8]
   1ba7a:	fa93 fc83 	rev.w	ip, r3
   1ba7e:	9b01      	ldr	r3, [sp, #4]
   1ba80:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   1ba84:	e9d0 7603 	ldrd	r7, r6, [r0, #12]
   1ba88:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
   1ba8c:	ba1b      	rev	r3, r3
   1ba8e:	6243      	str	r3, [r0, #36]	; 0x24
   1ba90:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1ba92:	9301      	str	r3, [sp, #4]
   1ba94:	ba09      	rev	r1, r1
   1ba96:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1ba98:	61c1      	str	r1, [r0, #28]
   1ba9a:	ba12      	rev	r2, r2
   1ba9c:	6202      	str	r2, [r0, #32]
   1ba9e:	ba3f      	rev	r7, r7
   1baa0:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
   1baa4:	ba36      	rev	r6, r6
   1baa6:	ba2d      	rev	r5, r5
   1baa8:	ba24      	rev	r4, r4
   1baaa:	e9c0 c702 	strd	ip, r7, [r0, #8]
   1baae:	e9c0 6504 	strd	r6, r5, [r0, #16]
   1bab2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   1bab4:	6b06      	ldr	r6, [r0, #48]	; 0x30
   1bab6:	6b45      	ldr	r5, [r0, #52]	; 0x34
   1bab8:	6184      	str	r4, [r0, #24]
   1baba:	fa93 fc83 	rev.w	ip, r3
   1babe:	6b84      	ldr	r4, [r0, #56]	; 0x38
   1bac0:	9b01      	ldr	r3, [sp, #4]
   1bac2:	ba3f      	rev	r7, r7
   1bac4:	ba36      	rev	r6, r6
   1bac6:	ba2d      	rev	r5, r5
   1bac8:	ba24      	rev	r4, r4
   1baca:	ba09      	rev	r1, r1
   1bacc:	ba12      	rev	r2, r2
   1bace:	ba1b      	rev	r3, r3
   1bad0:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
   1bad4:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   1bad8:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   1badc:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   1bae0:	2000      	movs	r0, #0
   1bae2:	b002      	add	sp, #8
   1bae4:	bcf0      	pop	{r4, r5, r6, r7}
   1bae6:	4770      	bx	lr
   1bae8:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1baec:	4770      	bx	lr
   1baee:	bf00      	nop

0001baf0 <cc_mbedtls_aes_init>:
   1baf0:	b510      	push	{r4, lr}
   1baf2:	4604      	mov	r4, r0
   1baf4:	b130      	cbz	r0, 1bb04 <cc_mbedtls_aes_init+0x14>
   1baf6:	2200      	movs	r2, #0
   1baf8:	2301      	movs	r3, #1
   1bafa:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   1bafe:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   1bb02:	bd10      	pop	{r4, pc}
   1bb04:	4801      	ldr	r0, [pc, #4]	; (1bb0c <cc_mbedtls_aes_init+0x1c>)
   1bb06:	f7fe f909 	bl	19d1c <CC_PalAbort>
   1bb0a:	e7f4      	b.n	1baf6 <cc_mbedtls_aes_init+0x6>
   1bb0c:	00021848 	.word	0x00021848

0001bb10 <cc_mbedtls_aes_free>:
   1bb10:	b118      	cbz	r0, 1bb1a <cc_mbedtls_aes_free+0xa>
   1bb12:	2274      	movs	r2, #116	; 0x74
   1bb14:	2100      	movs	r1, #0
   1bb16:	f7ff bd77 	b.w	1b608 <CC_PalMemSetPlat>
   1bb1a:	4770      	bx	lr

0001bb1c <cc_mbedtls_aes_setkey_enc>:
   1bb1c:	b190      	cbz	r0, 1bb44 <cc_mbedtls_aes_setkey_enc+0x28>
   1bb1e:	b1a1      	cbz	r1, 1bb4a <cc_mbedtls_aes_setkey_enc+0x2e>
   1bb20:	b510      	push	{r4, lr}
   1bb22:	2a80      	cmp	r2, #128	; 0x80
   1bb24:	f04f 0400 	mov.w	r4, #0
   1bb28:	6384      	str	r4, [r0, #56]	; 0x38
   1bb2a:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   1bb2e:	d106      	bne.n	1bb3e <cc_mbedtls_aes_setkey_enc+0x22>
   1bb30:	6304      	str	r4, [r0, #48]	; 0x30
   1bb32:	2210      	movs	r2, #16
   1bb34:	3010      	adds	r0, #16
   1bb36:	f7ff fd65 	bl	1b604 <CC_PalMemCopyPlat>
   1bb3a:	4620      	mov	r0, r4
   1bb3c:	bd10      	pop	{r4, pc}
   1bb3e:	f06f 001f 	mvn.w	r0, #31
   1bb42:	bd10      	pop	{r4, pc}
   1bb44:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1bb48:	4770      	bx	lr
   1bb4a:	f06f 001f 	mvn.w	r0, #31
   1bb4e:	4770      	bx	lr

0001bb50 <cc_mbedtls_aes_crypt_ecb>:
   1bb50:	b320      	cbz	r0, 1bb9c <cc_mbedtls_aes_crypt_ecb+0x4c>
   1bb52:	b31a      	cbz	r2, 1bb9c <cc_mbedtls_aes_crypt_ecb+0x4c>
   1bb54:	b313      	cbz	r3, 1bb9c <cc_mbedtls_aes_crypt_ecb+0x4c>
   1bb56:	2901      	cmp	r1, #1
   1bb58:	d820      	bhi.n	1bb9c <cc_mbedtls_aes_crypt_ecb+0x4c>
   1bb5a:	b570      	push	{r4, r5, r6, lr}
   1bb5c:	4604      	mov	r4, r0
   1bb5e:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1bb60:	b086      	sub	sp, #24
   1bb62:	d016      	beq.n	1bb92 <cc_mbedtls_aes_crypt_ecb+0x42>
   1bb64:	2901      	cmp	r1, #1
   1bb66:	d116      	bne.n	1bb96 <cc_mbedtls_aes_crypt_ecb+0x46>
   1bb68:	2100      	movs	r1, #0
   1bb6a:	2510      	movs	r5, #16
   1bb6c:	ae04      	add	r6, sp, #16
   1bb6e:	6361      	str	r1, [r4, #52]	; 0x34
   1bb70:	4610      	mov	r0, r2
   1bb72:	e9cd 5600 	strd	r5, r6, [sp]
   1bb76:	aa02      	add	r2, sp, #8
   1bb78:	4629      	mov	r1, r5
   1bb7a:	f7ff fdeb 	bl	1b754 <SetDataBuffersInfo>
   1bb7e:	b950      	cbnz	r0, 1bb96 <cc_mbedtls_aes_crypt_ecb+0x46>
   1bb80:	462b      	mov	r3, r5
   1bb82:	4632      	mov	r2, r6
   1bb84:	a902      	add	r1, sp, #8
   1bb86:	4620      	mov	r0, r4
   1bb88:	f000 f8d6 	bl	1bd38 <ProcessAesDrv>
   1bb8c:	b918      	cbnz	r0, 1bb96 <cc_mbedtls_aes_crypt_ecb+0x46>
   1bb8e:	b006      	add	sp, #24
   1bb90:	bd70      	pop	{r4, r5, r6, pc}
   1bb92:	2900      	cmp	r1, #0
   1bb94:	d0e8      	beq.n	1bb68 <cc_mbedtls_aes_crypt_ecb+0x18>
   1bb96:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1bb9a:	e7f8      	b.n	1bb8e <cc_mbedtls_aes_crypt_ecb+0x3e>
   1bb9c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1bba0:	4770      	bx	lr
   1bba2:	bf00      	nop

0001bba4 <CC_PalDataBufferAttrGet>:
   1bba4:	2000      	movs	r0, #0
   1bba6:	7018      	strb	r0, [r3, #0]
   1bba8:	4770      	bx	lr
   1bbaa:	bf00      	nop

0001bbac <LoadAesKey>:
   1bbac:	2800      	cmp	r0, #0
   1bbae:	d03b      	beq.n	1bc28 <LoadAesKey+0x7c>
   1bbb0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   1bbb4:	2b00      	cmp	r3, #0
   1bbb6:	d02c      	beq.n	1bc12 <LoadAesKey+0x66>
   1bbb8:	2b03      	cmp	r3, #3
   1bbba:	b510      	push	{r4, lr}
   1bbbc:	d00f      	beq.n	1bbde <LoadAesKey+0x32>
   1bbbe:	481c      	ldr	r0, [pc, #112]	; (1bc30 <LoadAesKey+0x84>)
   1bbc0:	4c1c      	ldr	r4, [pc, #112]	; (1bc34 <LoadAesKey+0x88>)
   1bbc2:	6822      	ldr	r2, [r4, #0]
   1bbc4:	4b1c      	ldr	r3, [pc, #112]	; (1bc38 <LoadAesKey+0x8c>)
   1bbc6:	6812      	ldr	r2, [r2, #0]
   1bbc8:	601a      	str	r2, [r3, #0]
   1bbca:	6822      	ldr	r2, [r4, #0]
   1bbcc:	6852      	ldr	r2, [r2, #4]
   1bbce:	605a      	str	r2, [r3, #4]
   1bbd0:	6822      	ldr	r2, [r4, #0]
   1bbd2:	6892      	ldr	r2, [r2, #8]
   1bbd4:	609a      	str	r2, [r3, #8]
   1bbd6:	6822      	ldr	r2, [r4, #0]
   1bbd8:	68d2      	ldr	r2, [r2, #12]
   1bbda:	60da      	str	r2, [r3, #12]
   1bbdc:	bd10      	pop	{r4, pc}
   1bbde:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1bbe0:	6c00      	ldr	r0, [r0, #64]	; 0x40
   1bbe2:	4c14      	ldr	r4, [pc, #80]	; (1bc34 <LoadAesKey+0x88>)
   1bbe4:	f000 fba4 	bl	1c330 <kmu_validate_kdr_slot_and_size>
   1bbe8:	2800      	cmp	r0, #0
   1bbea:	d1ea      	bne.n	1bbc2 <LoadAesKey+0x16>
   1bbec:	6821      	ldr	r1, [r4, #0]
   1bbee:	4a12      	ldr	r2, [pc, #72]	; (1bc38 <LoadAesKey+0x8c>)
   1bbf0:	6809      	ldr	r1, [r1, #0]
   1bbf2:	6011      	str	r1, [r2, #0]
   1bbf4:	6821      	ldr	r1, [r4, #0]
   1bbf6:	4b11      	ldr	r3, [pc, #68]	; (1bc3c <LoadAesKey+0x90>)
   1bbf8:	6849      	ldr	r1, [r1, #4]
   1bbfa:	6019      	str	r1, [r3, #0]
   1bbfc:	6821      	ldr	r1, [r4, #0]
   1bbfe:	6889      	ldr	r1, [r1, #8]
   1bc00:	6091      	str	r1, [r2, #8]
   1bc02:	6822      	ldr	r2, [r4, #0]
   1bc04:	68d2      	ldr	r2, [r2, #12]
   1bc06:	609a      	str	r2, [r3, #8]
   1bc08:	f000 fb9e 	bl	1c348 <kmu_use_kdr_key>
   1bc0c:	2800      	cmp	r0, #0
   1bc0e:	d1d8      	bne.n	1bbc2 <LoadAesKey+0x16>
   1bc10:	bd10      	pop	{r4, pc}
   1bc12:	4a09      	ldr	r2, [pc, #36]	; (1bc38 <LoadAesKey+0x8c>)
   1bc14:	6901      	ldr	r1, [r0, #16]
   1bc16:	6011      	str	r1, [r2, #0]
   1bc18:	6941      	ldr	r1, [r0, #20]
   1bc1a:	6051      	str	r1, [r2, #4]
   1bc1c:	6981      	ldr	r1, [r0, #24]
   1bc1e:	6091      	str	r1, [r2, #8]
   1bc20:	69c1      	ldr	r1, [r0, #28]
   1bc22:	60d1      	str	r1, [r2, #12]
   1bc24:	4618      	mov	r0, r3
   1bc26:	4770      	bx	lr
   1bc28:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   1bc2c:	4770      	bx	lr
   1bc2e:	bf00      	nop
   1bc30:	00f10009 	.word	0x00f10009
   1bc34:	20000680 	.word	0x20000680
   1bc38:	5002b400 	.word	0x5002b400
   1bc3c:	5002b404 	.word	0x5002b404

0001bc40 <InitAes.part.0>:
   1bc40:	4a32      	ldr	r2, [pc, #200]	; (1bd0c <InitAes.part.0+0xcc>)
   1bc42:	b510      	push	{r4, lr}
   1bc44:	4604      	mov	r4, r0
   1bc46:	6813      	ldr	r3, [r2, #0]
   1bc48:	2b00      	cmp	r3, #0
   1bc4a:	d1fc      	bne.n	1bc46 <InitAes.part.0+0x6>
   1bc4c:	4a30      	ldr	r2, [pc, #192]	; (1bd10 <InitAes.part.0+0xd0>)
   1bc4e:	6813      	ldr	r3, [r2, #0]
   1bc50:	2b00      	cmp	r3, #0
   1bc52:	d1fc      	bne.n	1bc4e <InitAes.part.0+0xe>
   1bc54:	4a2f      	ldr	r2, [pc, #188]	; (1bd14 <InitAes.part.0+0xd4>)
   1bc56:	6813      	ldr	r3, [r2, #0]
   1bc58:	2b00      	cmp	r3, #0
   1bc5a:	d1fc      	bne.n	1bc56 <InitAes.part.0+0x16>
   1bc5c:	4a2e      	ldr	r2, [pc, #184]	; (1bd18 <InitAes.part.0+0xd8>)
   1bc5e:	6813      	ldr	r3, [r2, #0]
   1bc60:	2b00      	cmp	r3, #0
   1bc62:	d1fc      	bne.n	1bc5e <InitAes.part.0+0x1e>
   1bc64:	4a2d      	ldr	r2, [pc, #180]	; (1bd1c <InitAes.part.0+0xdc>)
   1bc66:	6813      	ldr	r3, [r2, #0]
   1bc68:	2b00      	cmp	r3, #0
   1bc6a:	d1fc      	bne.n	1bc66 <InitAes.part.0+0x26>
   1bc6c:	4a2c      	ldr	r2, [pc, #176]	; (1bd20 <InitAes.part.0+0xe0>)
   1bc6e:	6813      	ldr	r3, [r2, #0]
   1bc70:	2b00      	cmp	r3, #0
   1bc72:	d1fc      	bne.n	1bc6e <InitAes.part.0+0x2e>
   1bc74:	f04f 30ff 	mov.w	r0, #4294967295
   1bc78:	f7fe fb3e 	bl	1a2f8 <CC_HalClearInterruptBit>
   1bc7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1bc7e:	f023 0304 	bic.w	r3, r3, #4
   1bc82:	2b03      	cmp	r3, #3
   1bc84:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1bc86:	d036      	beq.n	1bcf6 <InitAes.part.0+0xb6>
   1bc88:	2b01      	cmp	r3, #1
   1bc8a:	4b26      	ldr	r3, [pc, #152]	; (1bd24 <InitAes.part.0+0xe4>)
   1bc8c:	6818      	ldr	r0, [r3, #0]
   1bc8e:	bf0c      	ite	eq
   1bc90:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   1bc94:	f020 0020 	bicne.w	r0, r0, #32
   1bc98:	f7fe fb3c 	bl	1a314 <CC_HalMaskInterrupt>
   1bc9c:	4b22      	ldr	r3, [pc, #136]	; (1bd28 <InitAes.part.0+0xe8>)
   1bc9e:	4a1b      	ldr	r2, [pc, #108]	; (1bd0c <InitAes.part.0+0xcc>)
   1bca0:	2101      	movs	r1, #1
   1bca2:	6019      	str	r1, [r3, #0]
   1bca4:	6813      	ldr	r3, [r2, #0]
   1bca6:	2b00      	cmp	r3, #0
   1bca8:	d1fc      	bne.n	1bca4 <InitAes.part.0+0x64>
   1bcaa:	4a19      	ldr	r2, [pc, #100]	; (1bd10 <InitAes.part.0+0xd0>)
   1bcac:	6813      	ldr	r3, [r2, #0]
   1bcae:	2b00      	cmp	r3, #0
   1bcb0:	d1fc      	bne.n	1bcac <InitAes.part.0+0x6c>
   1bcb2:	491e      	ldr	r1, [pc, #120]	; (1bd2c <InitAes.part.0+0xec>)
   1bcb4:	4a15      	ldr	r2, [pc, #84]	; (1bd0c <InitAes.part.0+0xcc>)
   1bcb6:	600b      	str	r3, [r1, #0]
   1bcb8:	6813      	ldr	r3, [r2, #0]
   1bcba:	2b00      	cmp	r3, #0
   1bcbc:	d1fc      	bne.n	1bcb8 <InitAes.part.0+0x78>
   1bcbe:	4a14      	ldr	r2, [pc, #80]	; (1bd10 <InitAes.part.0+0xd0>)
   1bcc0:	6813      	ldr	r3, [r2, #0]
   1bcc2:	2b00      	cmp	r3, #0
   1bcc4:	d1fc      	bne.n	1bcc0 <InitAes.part.0+0x80>
   1bcc6:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1bcc8:	f022 0104 	bic.w	r1, r2, #4
   1bccc:	2903      	cmp	r1, #3
   1bcce:	bf18      	it	ne
   1bcd0:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   1bcd2:	4917      	ldr	r1, [pc, #92]	; (1bd30 <InitAes.part.0+0xf0>)
   1bcd4:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1bcd8:	bf18      	it	ne
   1bcda:	f003 0301 	andne.w	r3, r3, #1
   1bcde:	f002 021c 	and.w	r2, r2, #28
   1bce2:	4313      	orrs	r3, r2
   1bce4:	600b      	str	r3, [r1, #0]
   1bce6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1bce8:	2b07      	cmp	r3, #7
   1bcea:	d102      	bne.n	1bcf2 <InitAes.part.0+0xb2>
   1bcec:	4b11      	ldr	r3, [pc, #68]	; (1bd34 <InitAes.part.0+0xf4>)
   1bcee:	2201      	movs	r2, #1
   1bcf0:	601a      	str	r2, [r3, #0]
   1bcf2:	2000      	movs	r0, #0
   1bcf4:	bd10      	pop	{r4, pc}
   1bcf6:	2b01      	cmp	r3, #1
   1bcf8:	4b0a      	ldr	r3, [pc, #40]	; (1bd24 <InitAes.part.0+0xe4>)
   1bcfa:	6818      	ldr	r0, [r3, #0]
   1bcfc:	bf0c      	ite	eq
   1bcfe:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   1bd02:	f020 0010 	bicne.w	r0, r0, #16
   1bd06:	f7fe fb05 	bl	1a314 <CC_HalMaskInterrupt>
   1bd0a:	e7c7      	b.n	1bc9c <InitAes.part.0+0x5c>
   1bd0c:	5002b910 	.word	0x5002b910
   1bd10:	5002b470 	.word	0x5002b470
   1bd14:	5002bd20 	.word	0x5002bd20
   1bd18:	5002bc20 	.word	0x5002bc20
   1bd1c:	5002bd38 	.word	0x5002bd38
   1bd20:	5002bc38 	.word	0x5002bc38
   1bd24:	5002ba04 	.word	0x5002ba04
   1bd28:	5002b900 	.word	0x5002b900
   1bd2c:	5002b4bc 	.word	0x5002b4bc
   1bd30:	5002b4c0 	.word	0x5002b4c0
   1bd34:	5002b47c 	.word	0x5002b47c

0001bd38 <ProcessAesDrv>:
   1bd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd3c:	b087      	sub	sp, #28
   1bd3e:	2900      	cmp	r1, #0
   1bd40:	f000 80a5 	beq.w	1be8e <ProcessAesDrv+0x156>
   1bd44:	4616      	mov	r6, r2
   1bd46:	2a00      	cmp	r2, #0
   1bd48:	f000 80a1 	beq.w	1be8e <ProcessAesDrv+0x156>
   1bd4c:	4604      	mov	r4, r0
   1bd4e:	2800      	cmp	r0, #0
   1bd50:	f000 813f 	beq.w	1bfd2 <ProcessAesDrv+0x29a>
   1bd54:	461f      	mov	r7, r3
   1bd56:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1bd58:	460d      	mov	r5, r1
   1bd5a:	2b00      	cmp	r3, #0
   1bd5c:	d150      	bne.n	1be00 <ProcessAesDrv+0xc8>
   1bd5e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   1bd62:	d252      	bcs.n	1be0a <ProcessAesDrv+0xd2>
   1bd64:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1bd68:	2b04      	cmp	r3, #4
   1bd6a:	f000 8109 	beq.w	1bf80 <ProcessAesDrv+0x248>
   1bd6e:	f04f 0800 	mov.w	r8, #0
   1bd72:	48aa      	ldr	r0, [pc, #680]	; (1c01c <ProcessAesDrv+0x2e4>)
   1bd74:	f04f 31ff 	mov.w	r1, #4294967295
   1bd78:	f7fe fb66 	bl	1a448 <CC_PalMutexLock>
   1bd7c:	2800      	cmp	r0, #0
   1bd7e:	f040 80de 	bne.w	1bf3e <ProcessAesDrv+0x206>
   1bd82:	2000      	movs	r0, #0
   1bd84:	f7fe fb90 	bl	1a4a8 <CC_PalPowerSaveModeSelect>
   1bd88:	2800      	cmp	r0, #0
   1bd8a:	f040 80e1 	bne.w	1bf50 <ProcessAesDrv+0x218>
   1bd8e:	4ba4      	ldr	r3, [pc, #656]	; (1c020 <ProcessAesDrv+0x2e8>)
   1bd90:	4aa4      	ldr	r2, [pc, #656]	; (1c024 <ProcessAesDrv+0x2ec>)
   1bd92:	2101      	movs	r1, #1
   1bd94:	6019      	str	r1, [r3, #0]
   1bd96:	6813      	ldr	r3, [r2, #0]
   1bd98:	2b00      	cmp	r3, #0
   1bd9a:	d1fc      	bne.n	1bd96 <ProcessAesDrv+0x5e>
   1bd9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1bd9e:	2b03      	cmp	r3, #3
   1bda0:	dc39      	bgt.n	1be16 <ProcessAesDrv+0xde>
   1bda2:	2b00      	cmp	r3, #0
   1bda4:	da3a      	bge.n	1be1c <ProcessAesDrv+0xe4>
   1bda6:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 1c070 <ProcessAesDrv+0x338>
   1bdaa:	4a9e      	ldr	r2, [pc, #632]	; (1c024 <ProcessAesDrv+0x2ec>)
   1bdac:	6813      	ldr	r3, [r2, #0]
   1bdae:	2b00      	cmp	r3, #0
   1bdb0:	d1fc      	bne.n	1bdac <ProcessAesDrv+0x74>
   1bdb2:	f1b8 0f00 	cmp.w	r8, #0
   1bdb6:	f040 80da 	bne.w	1bf6e <ProcessAesDrv+0x236>
   1bdba:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1bdbc:	f023 0304 	bic.w	r3, r3, #4
   1bdc0:	2b03      	cmp	r3, #3
   1bdc2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1bdc4:	d058      	beq.n	1be78 <ProcessAesDrv+0x140>
   1bdc6:	2b01      	cmp	r3, #1
   1bdc8:	4b97      	ldr	r3, [pc, #604]	; (1c028 <ProcessAesDrv+0x2f0>)
   1bdca:	6818      	ldr	r0, [r3, #0]
   1bdcc:	bf0c      	ite	eq
   1bdce:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   1bdd2:	f040 0020 	orrne.w	r0, r0, #32
   1bdd6:	f7fe fa9d 	bl	1a314 <CC_HalMaskInterrupt>
   1bdda:	4b91      	ldr	r3, [pc, #580]	; (1c020 <ProcessAesDrv+0x2e8>)
   1bddc:	2200      	movs	r2, #0
   1bdde:	601a      	str	r2, [r3, #0]
   1bde0:	2001      	movs	r0, #1
   1bde2:	f7fe fb61 	bl	1a4a8 <CC_PalPowerSaveModeSelect>
   1bde6:	2800      	cmp	r0, #0
   1bde8:	f040 80bd 	bne.w	1bf66 <ProcessAesDrv+0x22e>
   1bdec:	488b      	ldr	r0, [pc, #556]	; (1c01c <ProcessAesDrv+0x2e4>)
   1bdee:	f7fe fb33 	bl	1a458 <CC_PalMutexUnlock>
   1bdf2:	2800      	cmp	r0, #0
   1bdf4:	f040 80b0 	bne.w	1bf58 <ProcessAesDrv+0x220>
   1bdf8:	4648      	mov	r0, r9
   1bdfa:	b007      	add	sp, #28
   1bdfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be00:	2b01      	cmp	r3, #1
   1be02:	d1af      	bne.n	1bd64 <ProcessAesDrv+0x2c>
   1be04:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   1be08:	d3ac      	bcc.n	1bd64 <ProcessAesDrv+0x2c>
   1be0a:	f8df 9268 	ldr.w	r9, [pc, #616]	; 1c074 <ProcessAesDrv+0x33c>
   1be0e:	4648      	mov	r0, r9
   1be10:	b007      	add	sp, #28
   1be12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be16:	3b06      	subs	r3, #6
   1be18:	2b01      	cmp	r3, #1
   1be1a:	d8c4      	bhi.n	1bda6 <ProcessAesDrv+0x6e>
   1be1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1be1e:	2b01      	cmp	r3, #1
   1be20:	f200 80d4 	bhi.w	1bfcc <ProcessAesDrv+0x294>
   1be24:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1be26:	2b01      	cmp	r3, #1
   1be28:	d837      	bhi.n	1be9a <ProcessAesDrv+0x162>
   1be2a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1be2c:	2b01      	cmp	r3, #1
   1be2e:	f200 8131 	bhi.w	1c094 <ProcessAesDrv+0x35c>
   1be32:	4620      	mov	r0, r4
   1be34:	f7ff ff04 	bl	1bc40 <InitAes.part.0>
   1be38:	4681      	mov	r9, r0
   1be3a:	2800      	cmp	r0, #0
   1be3c:	d1b5      	bne.n	1bdaa <ProcessAesDrv+0x72>
   1be3e:	4620      	mov	r0, r4
   1be40:	f7ff feb4 	bl	1bbac <LoadAesKey>
   1be44:	4681      	mov	r9, r0
   1be46:	2800      	cmp	r0, #0
   1be48:	d1af      	bne.n	1bdaa <ProcessAesDrv+0x72>
   1be4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1be4c:	2b07      	cmp	r3, #7
   1be4e:	d8aa      	bhi.n	1bda6 <ProcessAesDrv+0x6e>
   1be50:	a201      	add	r2, pc, #4	; (adr r2, 1be58 <ProcessAesDrv+0x120>)
   1be52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1be56:	bf00      	nop
   1be58:	0001beb5 	.word	0x0001beb5
   1be5c:	0001bea1 	.word	0x0001bea1
   1be60:	0001c011 	.word	0x0001c011
   1be64:	0001bea1 	.word	0x0001bea1
   1be68:	0001bda7 	.word	0x0001bda7
   1be6c:	0001bda7 	.word	0x0001bda7
   1be70:	0001c011 	.word	0x0001c011
   1be74:	0001bea1 	.word	0x0001bea1
   1be78:	2b01      	cmp	r3, #1
   1be7a:	4b6b      	ldr	r3, [pc, #428]	; (1c028 <ProcessAesDrv+0x2f0>)
   1be7c:	6818      	ldr	r0, [r3, #0]
   1be7e:	bf0c      	ite	eq
   1be80:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   1be84:	f040 0010 	orrne.w	r0, r0, #16
   1be88:	f7fe fa44 	bl	1a314 <CC_HalMaskInterrupt>
   1be8c:	e7a5      	b.n	1bdda <ProcessAesDrv+0xa2>
   1be8e:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 1c078 <ProcessAesDrv+0x340>
   1be92:	4648      	mov	r0, r9
   1be94:	b007      	add	sp, #28
   1be96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be9a:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 1c07c <ProcessAesDrv+0x344>
   1be9e:	e784      	b.n	1bdaa <ProcessAesDrv+0x72>
   1bea0:	4b62      	ldr	r3, [pc, #392]	; (1c02c <ProcessAesDrv+0x2f4>)
   1bea2:	6822      	ldr	r2, [r4, #0]
   1bea4:	601a      	str	r2, [r3, #0]
   1bea6:	6862      	ldr	r2, [r4, #4]
   1bea8:	605a      	str	r2, [r3, #4]
   1beaa:	68a2      	ldr	r2, [r4, #8]
   1beac:	609a      	str	r2, [r3, #8]
   1beae:	68e2      	ldr	r2, [r4, #12]
   1beb0:	60da      	str	r2, [r3, #12]
   1beb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1beb4:	682a      	ldr	r2, [r5, #0]
   1beb6:	f023 0304 	bic.w	r3, r3, #4
   1beba:	2b03      	cmp	r3, #3
   1bebc:	d009      	beq.n	1bed2 <ProcessAesDrv+0x19a>
   1bebe:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1bec0:	6833      	ldr	r3, [r6, #0]
   1bec2:	2901      	cmp	r1, #1
   1bec4:	bf07      	ittee	eq
   1bec6:	485a      	ldreq	r0, [pc, #360]	; (1c030 <ProcessAesDrv+0x2f8>)
   1bec8:	495a      	ldreq	r1, [pc, #360]	; (1c034 <ProcessAesDrv+0x2fc>)
   1beca:	485b      	ldrne	r0, [pc, #364]	; (1c038 <ProcessAesDrv+0x300>)
   1becc:	495b      	ldrne	r1, [pc, #364]	; (1c03c <ProcessAesDrv+0x304>)
   1bece:	6003      	str	r3, [r0, #0]
   1bed0:	600f      	str	r7, [r1, #0]
   1bed2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1bed4:	2b01      	cmp	r3, #1
   1bed6:	bf0b      	itete	eq
   1bed8:	4b59      	ldreq	r3, [pc, #356]	; (1c040 <ProcessAesDrv+0x308>)
   1beda:	4b5a      	ldrne	r3, [pc, #360]	; (1c044 <ProcessAesDrv+0x30c>)
   1bedc:	495a      	ldreq	r1, [pc, #360]	; (1c048 <ProcessAesDrv+0x310>)
   1bede:	495b      	ldrne	r1, [pc, #364]	; (1c04c <ProcessAesDrv+0x314>)
   1bee0:	600a      	str	r2, [r1, #0]
   1bee2:	601f      	str	r7, [r3, #0]
   1bee4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1bee6:	f023 0304 	bic.w	r3, r3, #4
   1beea:	2b03      	cmp	r3, #3
   1beec:	d074      	beq.n	1bfd8 <ProcessAesDrv+0x2a0>
   1beee:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1bef0:	2b01      	cmp	r3, #1
   1bef2:	bf0c      	ite	eq
   1bef4:	2080      	moveq	r0, #128	; 0x80
   1bef6:	2020      	movne	r0, #32
   1bef8:	f7fe fa12 	bl	1a320 <CC_HalWaitInterrupt>
   1befc:	4681      	mov	r9, r0
   1befe:	2800      	cmp	r0, #0
   1bf00:	f47f af53 	bne.w	1bdaa <ProcessAesDrv+0x72>
   1bf04:	4b47      	ldr	r3, [pc, #284]	; (1c024 <ProcessAesDrv+0x2ec>)
   1bf06:	681a      	ldr	r2, [r3, #0]
   1bf08:	2a00      	cmp	r2, #0
   1bf0a:	d1fc      	bne.n	1bf06 <ProcessAesDrv+0x1ce>
   1bf0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1bf0e:	3b01      	subs	r3, #1
   1bf10:	4691      	mov	r9, r2
   1bf12:	2b06      	cmp	r3, #6
   1bf14:	d810      	bhi.n	1bf38 <ProcessAesDrv+0x200>
   1bf16:	e8df f003 	tbb	[pc, r3]
   1bf1a:	7d04      	.short	0x7d04
   1bf1c:	7d0f0f04 	.word	0x7d0f0f04
   1bf20:	04          	.byte	0x04
   1bf21:	00          	.byte	0x00
   1bf22:	4a42      	ldr	r2, [pc, #264]	; (1c02c <ProcessAesDrv+0x2f4>)
   1bf24:	4b4a      	ldr	r3, [pc, #296]	; (1c050 <ProcessAesDrv+0x318>)
   1bf26:	6812      	ldr	r2, [r2, #0]
   1bf28:	6022      	str	r2, [r4, #0]
   1bf2a:	681a      	ldr	r2, [r3, #0]
   1bf2c:	6062      	str	r2, [r4, #4]
   1bf2e:	685a      	ldr	r2, [r3, #4]
   1bf30:	60a2      	str	r2, [r4, #8]
   1bf32:	3308      	adds	r3, #8
   1bf34:	681b      	ldr	r3, [r3, #0]
   1bf36:	60e3      	str	r3, [r4, #12]
   1bf38:	2301      	movs	r3, #1
   1bf3a:	65a3      	str	r3, [r4, #88]	; 0x58
   1bf3c:	e735      	b.n	1bdaa <ProcessAesDrv+0x72>
   1bf3e:	4845      	ldr	r0, [pc, #276]	; (1c054 <ProcessAesDrv+0x31c>)
   1bf40:	f7fd feec 	bl	19d1c <CC_PalAbort>
   1bf44:	2000      	movs	r0, #0
   1bf46:	f7fe faaf 	bl	1a4a8 <CC_PalPowerSaveModeSelect>
   1bf4a:	2800      	cmp	r0, #0
   1bf4c:	f43f af1f 	beq.w	1bd8e <ProcessAesDrv+0x56>
   1bf50:	4841      	ldr	r0, [pc, #260]	; (1c058 <ProcessAesDrv+0x320>)
   1bf52:	f7fd fee3 	bl	19d1c <CC_PalAbort>
   1bf56:	e71a      	b.n	1bd8e <ProcessAesDrv+0x56>
   1bf58:	4840      	ldr	r0, [pc, #256]	; (1c05c <ProcessAesDrv+0x324>)
   1bf5a:	f7fd fedf 	bl	19d1c <CC_PalAbort>
   1bf5e:	4648      	mov	r0, r9
   1bf60:	b007      	add	sp, #28
   1bf62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf66:	483e      	ldr	r0, [pc, #248]	; (1c060 <ProcessAesDrv+0x328>)
   1bf68:	f7fd fed8 	bl	19d1c <CC_PalAbort>
   1bf6c:	e73e      	b.n	1bdec <ProcessAesDrv+0xb4>
   1bf6e:	2304      	movs	r3, #4
   1bf70:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1bf74:	2120      	movs	r1, #32
   1bf76:	f104 0010 	add.w	r0, r4, #16
   1bf7a:	f7ff fb47 	bl	1b60c <CC_PalMemSetZeroPlat>
   1bf7e:	e71c      	b.n	1bdba <ProcessAesDrv+0x82>
   1bf80:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1bf82:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1bf84:	f000 f9c8 	bl	1c318 <kmu_validate_slot_and_size>
   1bf88:	b9e8      	cbnz	r0, 1bfc6 <ProcessAesDrv+0x28e>
   1bf8a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1c080 <ProcessAesDrv+0x348>
   1bf8e:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 1c084 <ProcessAesDrv+0x34c>
   1bf92:	f8d8 3000 	ldr.w	r3, [r8]
   1bf96:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 1c088 <ProcessAesDrv+0x350>
   1bf9a:	681b      	ldr	r3, [r3, #0]
   1bf9c:	f8cb 3000 	str.w	r3, [fp]
   1bfa0:	f8d8 3000 	ldr.w	r3, [r8]
   1bfa4:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 1c08c <ProcessAesDrv+0x354>
   1bfa8:	685b      	ldr	r3, [r3, #4]
   1bfaa:	f8ca 3000 	str.w	r3, [sl]
   1bfae:	f8d8 3000 	ldr.w	r3, [r8]
   1bfb2:	4a2c      	ldr	r2, [pc, #176]	; (1c064 <ProcessAesDrv+0x32c>)
   1bfb4:	689b      	ldr	r3, [r3, #8]
   1bfb6:	f8c9 3000 	str.w	r3, [r9]
   1bfba:	f8d8 3000 	ldr.w	r3, [r8]
   1bfbe:	68db      	ldr	r3, [r3, #12]
   1bfc0:	6013      	str	r3, [r2, #0]
   1bfc2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1bfc4:	b171      	cbz	r1, 1bfe4 <ProcessAesDrv+0x2ac>
   1bfc6:	f04f 0801 	mov.w	r8, #1
   1bfca:	e6d2      	b.n	1bd72 <ProcessAesDrv+0x3a>
   1bfcc:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 1c090 <ProcessAesDrv+0x358>
   1bfd0:	e6eb      	b.n	1bdaa <ProcessAesDrv+0x72>
   1bfd2:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   1bfd6:	e70f      	b.n	1bdf8 <ProcessAesDrv+0xc0>
   1bfd8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1bfda:	2b01      	cmp	r3, #1
   1bfdc:	bf0c      	ite	eq
   1bfde:	2040      	moveq	r0, #64	; 0x40
   1bfe0:	2010      	movne	r0, #16
   1bfe2:	e789      	b.n	1bef8 <ProcessAesDrv+0x1c0>
   1bfe4:	f104 0310 	add.w	r3, r4, #16
   1bfe8:	4618      	mov	r0, r3
   1bfea:	9305      	str	r3, [sp, #20]
   1bfec:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   1bff0:	e9cd 3200 	strd	r3, r2, [sp]
   1bff4:	9002      	str	r0, [sp, #8]
   1bff6:	2010      	movs	r0, #16
   1bff8:	9003      	str	r0, [sp, #12]
   1bffa:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   1bffe:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1c000:	f000 f9ae 	bl	1c360 <kmu_derive_cmac>
   1c004:	2800      	cmp	r0, #0
   1c006:	d148      	bne.n	1c09a <ProcessAesDrv+0x362>
   1c008:	2300      	movs	r3, #0
   1c00a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1c00e:	e7da      	b.n	1bfc6 <ProcessAesDrv+0x28e>
   1c010:	4b15      	ldr	r3, [pc, #84]	; (1c068 <ProcessAesDrv+0x330>)
   1c012:	e746      	b.n	1bea2 <ProcessAesDrv+0x16a>
   1c014:	4a14      	ldr	r2, [pc, #80]	; (1c068 <ProcessAesDrv+0x330>)
   1c016:	4b15      	ldr	r3, [pc, #84]	; (1c06c <ProcessAesDrv+0x334>)
   1c018:	e785      	b.n	1bf26 <ProcessAesDrv+0x1ee>
   1c01a:	bf00      	nop
   1c01c:	20000690 	.word	0x20000690
   1c020:	5002b810 	.word	0x5002b810
   1c024:	5002b910 	.word	0x5002b910
   1c028:	5002ba04 	.word	0x5002ba04
   1c02c:	5002b440 	.word	0x5002b440
   1c030:	5002bd28 	.word	0x5002bd28
   1c034:	5002bd2c 	.word	0x5002bd2c
   1c038:	5002bd30 	.word	0x5002bd30
   1c03c:	5002bd34 	.word	0x5002bd34
   1c040:	5002bc2c 	.word	0x5002bc2c
   1c044:	5002bc34 	.word	0x5002bc34
   1c048:	5002bc28 	.word	0x5002bc28
   1c04c:	5002bc30 	.word	0x5002bc30
   1c050:	5002b444 	.word	0x5002b444
   1c054:	0002173c 	.word	0x0002173c
   1c058:	00021754 	.word	0x00021754
   1c05c:	00021794 	.word	0x00021794
   1c060:	00021774 	.word	0x00021774
   1c064:	5002b40c 	.word	0x5002b40c
   1c068:	5002b460 	.word	0x5002b460
   1c06c:	5002b464 	.word	0x5002b464
   1c070:	00f10001 	.word	0x00f10001
   1c074:	00f10005 	.word	0x00f10005
   1c078:	00f1000b 	.word	0x00f1000b
   1c07c:	00f10003 	.word	0x00f10003
   1c080:	20000680 	.word	0x20000680
   1c084:	5002b400 	.word	0x5002b400
   1c088:	5002b404 	.word	0x5002b404
   1c08c:	5002b408 	.word	0x5002b408
   1c090:	00f10002 	.word	0x00f10002
   1c094:	f8df 9038 	ldr.w	r9, [pc, #56]	; 1c0d0 <ProcessAesDrv+0x398>
   1c098:	e687      	b.n	1bdaa <ProcessAesDrv+0x72>
   1c09a:	f8d8 3000 	ldr.w	r3, [r8]
   1c09e:	4a0b      	ldr	r2, [pc, #44]	; (1c0cc <ProcessAesDrv+0x394>)
   1c0a0:	681b      	ldr	r3, [r3, #0]
   1c0a2:	f8cb 3000 	str.w	r3, [fp]
   1c0a6:	f8d8 3000 	ldr.w	r3, [r8]
   1c0aa:	685b      	ldr	r3, [r3, #4]
   1c0ac:	f8ca 3000 	str.w	r3, [sl]
   1c0b0:	f8d8 3000 	ldr.w	r3, [r8]
   1c0b4:	689b      	ldr	r3, [r3, #8]
   1c0b6:	f8c9 3000 	str.w	r3, [r9]
   1c0ba:	f8d8 3000 	ldr.w	r3, [r8]
   1c0be:	68db      	ldr	r3, [r3, #12]
   1c0c0:	6013      	str	r3, [r2, #0]
   1c0c2:	9805      	ldr	r0, [sp, #20]
   1c0c4:	2110      	movs	r1, #16
   1c0c6:	f7ff faa1 	bl	1b60c <CC_PalMemSetZeroPlat>
   1c0ca:	e79d      	b.n	1c008 <ProcessAesDrv+0x2d0>
   1c0cc:	5002b40c 	.word	0x5002b40c
   1c0d0:	00f10004 	.word	0x00f10004

0001c0d4 <FinishAesDrv>:
   1c0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c0d8:	b301      	cbz	r1, 1c11c <FinishAesDrv+0x48>
   1c0da:	b1fa      	cbz	r2, 1c11c <FinishAesDrv+0x48>
   1c0dc:	4604      	mov	r4, r0
   1c0de:	2800      	cmp	r0, #0
   1c0e0:	d07a      	beq.n	1c1d8 <FinishAesDrv+0x104>
   1c0e2:	461d      	mov	r5, r3
   1c0e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1c0e6:	2b07      	cmp	r3, #7
   1c0e8:	460e      	mov	r6, r1
   1c0ea:	d01b      	beq.n	1c124 <FinishAesDrv+0x50>
   1c0ec:	b95d      	cbnz	r5, 1c106 <FinishAesDrv+0x32>
   1c0ee:	2b03      	cmp	r3, #3
   1c0f0:	d110      	bne.n	1c114 <FinishAesDrv+0x40>
   1c0f2:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1c0f4:	b973      	cbnz	r3, 1c114 <FinishAesDrv+0x40>
   1c0f6:	f100 0364 	add.w	r3, r0, #100	; 0x64
   1c0fa:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   1c0fe:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   1c102:	600b      	str	r3, [r1, #0]
   1c104:	2510      	movs	r5, #16
   1c106:	462b      	mov	r3, r5
   1c108:	4631      	mov	r1, r6
   1c10a:	4620      	mov	r0, r4
   1c10c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c110:	f7ff be12 	b.w	1bd38 <ProcessAesDrv>
   1c114:	462f      	mov	r7, r5
   1c116:	4638      	mov	r0, r7
   1c118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c11c:	4f66      	ldr	r7, [pc, #408]	; (1c2b8 <FinishAesDrv+0x1e4>)
   1c11e:	4638      	mov	r0, r7
   1c120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c124:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1c126:	2b00      	cmp	r3, #0
   1c128:	d159      	bne.n	1c1de <FinishAesDrv+0x10a>
   1c12a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1c12e:	d25b      	bcs.n	1c1e8 <FinishAesDrv+0x114>
   1c130:	b915      	cbnz	r5, 1c138 <FinishAesDrv+0x64>
   1c132:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1c134:	2b00      	cmp	r3, #0
   1c136:	d157      	bne.n	1c1e8 <FinishAesDrv+0x114>
   1c138:	4860      	ldr	r0, [pc, #384]	; (1c2bc <FinishAesDrv+0x1e8>)
   1c13a:	f04f 31ff 	mov.w	r1, #4294967295
   1c13e:	f7fe f983 	bl	1a448 <CC_PalMutexLock>
   1c142:	2800      	cmp	r0, #0
   1c144:	f040 8097 	bne.w	1c276 <FinishAesDrv+0x1a2>
   1c148:	2000      	movs	r0, #0
   1c14a:	f7fe f9ad 	bl	1a4a8 <CC_PalPowerSaveModeSelect>
   1c14e:	2800      	cmp	r0, #0
   1c150:	f040 808d 	bne.w	1c26e <FinishAesDrv+0x19a>
   1c154:	4b5a      	ldr	r3, [pc, #360]	; (1c2c0 <FinishAesDrv+0x1ec>)
   1c156:	4a5b      	ldr	r2, [pc, #364]	; (1c2c4 <FinishAesDrv+0x1f0>)
   1c158:	2101      	movs	r1, #1
   1c15a:	6019      	str	r1, [r3, #0]
   1c15c:	6813      	ldr	r3, [r2, #0]
   1c15e:	2b00      	cmp	r3, #0
   1c160:	d1fc      	bne.n	1c15c <FinishAesDrv+0x88>
   1c162:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1c164:	2b03      	cmp	r3, #3
   1c166:	dd20      	ble.n	1c1aa <FinishAesDrv+0xd6>
   1c168:	3b06      	subs	r3, #6
   1c16a:	2b01      	cmp	r3, #1
   1c16c:	d81f      	bhi.n	1c1ae <FinishAesDrv+0xda>
   1c16e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1c170:	2b01      	cmp	r3, #1
   1c172:	d83b      	bhi.n	1c1ec <FinishAesDrv+0x118>
   1c174:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1c176:	2b01      	cmp	r3, #1
   1c178:	f200 8085 	bhi.w	1c286 <FinishAesDrv+0x1b2>
   1c17c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1c17e:	2b01      	cmp	r3, #1
   1c180:	f200 8083 	bhi.w	1c28a <FinishAesDrv+0x1b6>
   1c184:	4620      	mov	r0, r4
   1c186:	f7ff fd5b 	bl	1bc40 <InitAes.part.0>
   1c18a:	4607      	mov	r7, r0
   1c18c:	b980      	cbnz	r0, 1c1b0 <FinishAesDrv+0xdc>
   1c18e:	4620      	mov	r0, r4
   1c190:	f7ff fd0c 	bl	1bbac <LoadAesKey>
   1c194:	4607      	mov	r7, r0
   1c196:	b958      	cbnz	r0, 1c1b0 <FinishAesDrv+0xdc>
   1c198:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1c19a:	2b07      	cmp	r3, #7
   1c19c:	d807      	bhi.n	1c1ae <FinishAesDrv+0xda>
   1c19e:	e8df f003 	tbb	[pc, r3]
   1c1a2:	2730      	.short	0x2730
   1c1a4:	06062755 	.word	0x06062755
   1c1a8:	2755      	.short	0x2755
   1c1aa:	2b00      	cmp	r3, #0
   1c1ac:	dadf      	bge.n	1c16e <FinishAesDrv+0x9a>
   1c1ae:	4f46      	ldr	r7, [pc, #280]	; (1c2c8 <FinishAesDrv+0x1f4>)
   1c1b0:	4a44      	ldr	r2, [pc, #272]	; (1c2c4 <FinishAesDrv+0x1f0>)
   1c1b2:	6813      	ldr	r3, [r2, #0]
   1c1b4:	2b00      	cmp	r3, #0
   1c1b6:	d1fc      	bne.n	1c1b2 <FinishAesDrv+0xde>
   1c1b8:	4a41      	ldr	r2, [pc, #260]	; (1c2c0 <FinishAesDrv+0x1ec>)
   1c1ba:	2001      	movs	r0, #1
   1c1bc:	6013      	str	r3, [r2, #0]
   1c1be:	f7fe f973 	bl	1a4a8 <CC_PalPowerSaveModeSelect>
   1c1c2:	2800      	cmp	r0, #0
   1c1c4:	d15b      	bne.n	1c27e <FinishAesDrv+0x1aa>
   1c1c6:	483d      	ldr	r0, [pc, #244]	; (1c2bc <FinishAesDrv+0x1e8>)
   1c1c8:	f7fe f946 	bl	1a458 <CC_PalMutexUnlock>
   1c1cc:	2800      	cmp	r0, #0
   1c1ce:	d0a2      	beq.n	1c116 <FinishAesDrv+0x42>
   1c1d0:	483e      	ldr	r0, [pc, #248]	; (1c2cc <FinishAesDrv+0x1f8>)
   1c1d2:	f7fd fda3 	bl	19d1c <CC_PalAbort>
   1c1d6:	e79e      	b.n	1c116 <FinishAesDrv+0x42>
   1c1d8:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   1c1dc:	e79b      	b.n	1c116 <FinishAesDrv+0x42>
   1c1de:	2b01      	cmp	r3, #1
   1c1e0:	d1a6      	bne.n	1c130 <FinishAesDrv+0x5c>
   1c1e2:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1c1e6:	d3a3      	bcc.n	1c130 <FinishAesDrv+0x5c>
   1c1e8:	4f39      	ldr	r7, [pc, #228]	; (1c2d0 <FinishAesDrv+0x1fc>)
   1c1ea:	e794      	b.n	1c116 <FinishAesDrv+0x42>
   1c1ec:	4f39      	ldr	r7, [pc, #228]	; (1c2d4 <FinishAesDrv+0x200>)
   1c1ee:	e7df      	b.n	1c1b0 <FinishAesDrv+0xdc>
   1c1f0:	4b39      	ldr	r3, [pc, #228]	; (1c2d8 <FinishAesDrv+0x204>)
   1c1f2:	6822      	ldr	r2, [r4, #0]
   1c1f4:	601a      	str	r2, [r3, #0]
   1c1f6:	6862      	ldr	r2, [r4, #4]
   1c1f8:	605a      	str	r2, [r3, #4]
   1c1fa:	68a2      	ldr	r2, [r4, #8]
   1c1fc:	609a      	str	r2, [r3, #8]
   1c1fe:	68e2      	ldr	r2, [r4, #12]
   1c200:	60da      	str	r2, [r3, #12]
   1c202:	4936      	ldr	r1, [pc, #216]	; (1c2dc <FinishAesDrv+0x208>)
   1c204:	4a36      	ldr	r2, [pc, #216]	; (1c2e0 <FinishAesDrv+0x20c>)
   1c206:	2301      	movs	r3, #1
   1c208:	600b      	str	r3, [r1, #0]
   1c20a:	6015      	str	r5, [r2, #0]
   1c20c:	2d00      	cmp	r5, #0
   1c20e:	d13e      	bne.n	1c28e <FinishAesDrv+0x1ba>
   1c210:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1c212:	b90a      	cbnz	r2, 1c218 <FinishAesDrv+0x144>
   1c214:	4a33      	ldr	r2, [pc, #204]	; (1c2e4 <FinishAesDrv+0x210>)
   1c216:	6013      	str	r3, [r2, #0]
   1c218:	4b2a      	ldr	r3, [pc, #168]	; (1c2c4 <FinishAesDrv+0x1f0>)
   1c21a:	681f      	ldr	r7, [r3, #0]
   1c21c:	2f00      	cmp	r7, #0
   1c21e:	d1fc      	bne.n	1c21a <FinishAesDrv+0x146>
   1c220:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1c222:	3b01      	subs	r3, #1
   1c224:	2b06      	cmp	r3, #6
   1c226:	d8c3      	bhi.n	1c1b0 <FinishAesDrv+0xdc>
   1c228:	a201      	add	r2, pc, #4	; (adr r2, 1c230 <FinishAesDrv+0x15c>)
   1c22a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1c22e:	bf00      	nop
   1c230:	0001c251 	.word	0x0001c251
   1c234:	0001c269 	.word	0x0001c269
   1c238:	0001c251 	.word	0x0001c251
   1c23c:	0001c1b1 	.word	0x0001c1b1
   1c240:	0001c1b1 	.word	0x0001c1b1
   1c244:	0001c269 	.word	0x0001c269
   1c248:	0001c251 	.word	0x0001c251
   1c24c:	4b26      	ldr	r3, [pc, #152]	; (1c2e8 <FinishAesDrv+0x214>)
   1c24e:	e7d0      	b.n	1c1f2 <FinishAesDrv+0x11e>
   1c250:	4a21      	ldr	r2, [pc, #132]	; (1c2d8 <FinishAesDrv+0x204>)
   1c252:	4b26      	ldr	r3, [pc, #152]	; (1c2ec <FinishAesDrv+0x218>)
   1c254:	6812      	ldr	r2, [r2, #0]
   1c256:	6022      	str	r2, [r4, #0]
   1c258:	681a      	ldr	r2, [r3, #0]
   1c25a:	6062      	str	r2, [r4, #4]
   1c25c:	685a      	ldr	r2, [r3, #4]
   1c25e:	60a2      	str	r2, [r4, #8]
   1c260:	3308      	adds	r3, #8
   1c262:	681b      	ldr	r3, [r3, #0]
   1c264:	60e3      	str	r3, [r4, #12]
   1c266:	e7a3      	b.n	1c1b0 <FinishAesDrv+0xdc>
   1c268:	4a1f      	ldr	r2, [pc, #124]	; (1c2e8 <FinishAesDrv+0x214>)
   1c26a:	4b21      	ldr	r3, [pc, #132]	; (1c2f0 <FinishAesDrv+0x21c>)
   1c26c:	e7f2      	b.n	1c254 <FinishAesDrv+0x180>
   1c26e:	4821      	ldr	r0, [pc, #132]	; (1c2f4 <FinishAesDrv+0x220>)
   1c270:	f7fd fd54 	bl	19d1c <CC_PalAbort>
   1c274:	e76e      	b.n	1c154 <FinishAesDrv+0x80>
   1c276:	4820      	ldr	r0, [pc, #128]	; (1c2f8 <FinishAesDrv+0x224>)
   1c278:	f7fd fd50 	bl	19d1c <CC_PalAbort>
   1c27c:	e764      	b.n	1c148 <FinishAesDrv+0x74>
   1c27e:	481f      	ldr	r0, [pc, #124]	; (1c2fc <FinishAesDrv+0x228>)
   1c280:	f7fd fd4c 	bl	19d1c <CC_PalAbort>
   1c284:	e79f      	b.n	1c1c6 <FinishAesDrv+0xf2>
   1c286:	4f1e      	ldr	r7, [pc, #120]	; (1c300 <FinishAesDrv+0x22c>)
   1c288:	e792      	b.n	1c1b0 <FinishAesDrv+0xdc>
   1c28a:	4f1e      	ldr	r7, [pc, #120]	; (1c304 <FinishAesDrv+0x230>)
   1c28c:	e790      	b.n	1c1b0 <FinishAesDrv+0xdc>
   1c28e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1c290:	6833      	ldr	r3, [r6, #0]
   1c292:	2a01      	cmp	r2, #1
   1c294:	d00a      	beq.n	1c2ac <FinishAesDrv+0x1d8>
   1c296:	491c      	ldr	r1, [pc, #112]	; (1c308 <FinishAesDrv+0x234>)
   1c298:	4a1c      	ldr	r2, [pc, #112]	; (1c30c <FinishAesDrv+0x238>)
   1c29a:	600b      	str	r3, [r1, #0]
   1c29c:	2010      	movs	r0, #16
   1c29e:	6015      	str	r5, [r2, #0]
   1c2a0:	f7fe f83e 	bl	1a320 <CC_HalWaitInterrupt>
   1c2a4:	4607      	mov	r7, r0
   1c2a6:	2800      	cmp	r0, #0
   1c2a8:	d0b6      	beq.n	1c218 <FinishAesDrv+0x144>
   1c2aa:	e781      	b.n	1c1b0 <FinishAesDrv+0xdc>
   1c2ac:	4918      	ldr	r1, [pc, #96]	; (1c310 <FinishAesDrv+0x23c>)
   1c2ae:	4a19      	ldr	r2, [pc, #100]	; (1c314 <FinishAesDrv+0x240>)
   1c2b0:	600b      	str	r3, [r1, #0]
   1c2b2:	2040      	movs	r0, #64	; 0x40
   1c2b4:	6015      	str	r5, [r2, #0]
   1c2b6:	e7f3      	b.n	1c2a0 <FinishAesDrv+0x1cc>
   1c2b8:	00f1000b 	.word	0x00f1000b
   1c2bc:	20000690 	.word	0x20000690
   1c2c0:	5002b810 	.word	0x5002b810
   1c2c4:	5002b910 	.word	0x5002b910
   1c2c8:	00f10001 	.word	0x00f10001
   1c2cc:	00021794 	.word	0x00021794
   1c2d0:	00f10005 	.word	0x00f10005
   1c2d4:	00f10002 	.word	0x00f10002
   1c2d8:	5002b440 	.word	0x5002b440
   1c2dc:	5002b47c 	.word	0x5002b47c
   1c2e0:	5002b4bc 	.word	0x5002b4bc
   1c2e4:	5002b524 	.word	0x5002b524
   1c2e8:	5002b460 	.word	0x5002b460
   1c2ec:	5002b444 	.word	0x5002b444
   1c2f0:	5002b464 	.word	0x5002b464
   1c2f4:	00021754 	.word	0x00021754
   1c2f8:	0002173c 	.word	0x0002173c
   1c2fc:	00021774 	.word	0x00021774
   1c300:	00f10003 	.word	0x00f10003
   1c304:	00f10004 	.word	0x00f10004
   1c308:	5002bc30 	.word	0x5002bc30
   1c30c:	5002bc34 	.word	0x5002bc34
   1c310:	5002bc28 	.word	0x5002bc28
   1c314:	5002bc2c 	.word	0x5002bc2c

0001c318 <kmu_validate_slot_and_size>:
   1c318:	b921      	cbnz	r1, 1c324 <kmu_validate_slot_and_size+0xc>
   1c31a:	4b03      	ldr	r3, [pc, #12]	; (1c328 <kmu_validate_slot_and_size+0x10>)
   1c31c:	2800      	cmp	r0, #0
   1c31e:	bf18      	it	ne
   1c320:	4618      	movne	r0, r3
   1c322:	4770      	bx	lr
   1c324:	4801      	ldr	r0, [pc, #4]	; (1c32c <kmu_validate_slot_and_size+0x14>)
   1c326:	4770      	bx	lr
   1c328:	00f70001 	.word	0x00f70001
   1c32c:	00f70003 	.word	0x00f70003

0001c330 <kmu_validate_kdr_slot_and_size>:
   1c330:	b921      	cbnz	r1, 1c33c <kmu_validate_kdr_slot_and_size+0xc>
   1c332:	4b03      	ldr	r3, [pc, #12]	; (1c340 <kmu_validate_kdr_slot_and_size+0x10>)
   1c334:	2800      	cmp	r0, #0
   1c336:	bf18      	it	ne
   1c338:	4618      	movne	r0, r3
   1c33a:	4770      	bx	lr
   1c33c:	4801      	ldr	r0, [pc, #4]	; (1c344 <kmu_validate_kdr_slot_and_size+0x14>)
   1c33e:	4770      	bx	lr
   1c340:	00f70001 	.word	0x00f70001
   1c344:	00f70003 	.word	0x00f70003

0001c348 <kmu_use_kdr_key>:
   1c348:	4903      	ldr	r1, [pc, #12]	; (1c358 <kmu_use_kdr_key+0x10>)
   1c34a:	4b04      	ldr	r3, [pc, #16]	; (1c35c <kmu_use_kdr_key+0x14>)
   1c34c:	2000      	movs	r0, #0
   1c34e:	2201      	movs	r2, #1
   1c350:	6008      	str	r0, [r1, #0]
   1c352:	601a      	str	r2, [r3, #0]
   1c354:	4770      	bx	lr
   1c356:	bf00      	nop
   1c358:	5002ba38 	.word	0x5002ba38
   1c35c:	5002b478 	.word	0x5002b478

0001c360 <kmu_derive_cmac>:
   1c360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c364:	b0cd      	sub	sp, #308	; 0x134
   1c366:	e9dd 8558 	ldrd	r8, r5, [sp, #352]	; 0x160
   1c36a:	460f      	mov	r7, r1
   1c36c:	2100      	movs	r1, #0
   1c36e:	460c      	mov	r4, r1
   1c370:	4681      	mov	r9, r0
   1c372:	4616      	mov	r6, r2
   1c374:	a80e      	add	r0, sp, #56	; 0x38
   1c376:	2274      	movs	r2, #116	; 0x74
   1c378:	469b      	mov	fp, r3
   1c37a:	f001 fc75 	bl	1dc68 <memset>
   1c37e:	4621      	mov	r1, r4
   1c380:	2280      	movs	r2, #128	; 0x80
   1c382:	a82c      	add	r0, sp, #176	; 0xb0
   1c384:	942b      	str	r4, [sp, #172]	; 0xac
   1c386:	f001 fc6f 	bl	1dc68 <memset>
   1c38a:	2384      	movs	r3, #132	; 0x84
   1c38c:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1c390:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   1c394:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   1c398:	9305      	str	r3, [sp, #20]
   1c39a:	d860      	bhi.n	1c45e <kmu_derive_cmac+0xfe>
   1c39c:	ab05      	add	r3, sp, #20
   1c39e:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
   1c3a2:	9301      	str	r3, [sp, #4]
   1c3a4:	9502      	str	r5, [sp, #8]
   1c3a6:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   1c3aa:	4659      	mov	r1, fp
   1c3ac:	4630      	mov	r0, r6
   1c3ae:	f8cd a000 	str.w	sl, [sp]
   1c3b2:	f000 f865 	bl	1c480 <UtilCmacBuildDataForDerivation>
   1c3b6:	2800      	cmp	r0, #0
   1c3b8:	d14c      	bne.n	1c454 <kmu_derive_cmac+0xf4>
   1c3ba:	2303      	movs	r3, #3
   1c3bc:	f88d 3013 	strb.w	r3, [sp, #19]
   1c3c0:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1c3c4:	901c      	str	r0, [sp, #112]	; 0x70
   1c3c6:	2200      	movs	r2, #0
   1c3c8:	2110      	movs	r1, #16
   1c3ca:	a80e      	add	r0, sp, #56	; 0x38
   1c3cc:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   1c3d0:	2607      	movs	r6, #7
   1c3d2:	2301      	movs	r3, #1
   1c3d4:	2401      	movs	r4, #1
   1c3d6:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   1c3da:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   1c3de:	971a      	str	r7, [sp, #104]	; 0x68
   1c3e0:	961b      	str	r6, [sp, #108]	; 0x6c
   1c3e2:	9426      	str	r4, [sp, #152]	; 0x98
   1c3e4:	f10d 0920 	add.w	r9, sp, #32
   1c3e8:	f7ff f910 	bl	1b60c <CC_PalMemSetZeroPlat>
   1c3ec:	2110      	movs	r1, #16
   1c3ee:	e9cd 1900 	strd	r1, r9, [sp]
   1c3f2:	ab0a      	add	r3, sp, #40	; 0x28
   1c3f4:	9905      	ldr	r1, [sp, #20]
   1c3f6:	4650      	mov	r0, sl
   1c3f8:	aa06      	add	r2, sp, #24
   1c3fa:	f7ff f9ab 	bl	1b754 <SetDataBuffersInfo>
   1c3fe:	4607      	mov	r7, r0
   1c400:	b150      	cbz	r0, 1c418 <kmu_derive_cmac+0xb8>
   1c402:	e01e      	b.n	1c442 <kmu_derive_cmac+0xe2>
   1c404:	f7ff f8fe 	bl	1b604 <CC_PalMemCopyPlat>
   1c408:	2110      	movs	r1, #16
   1c40a:	a80e      	add	r0, sp, #56	; 0x38
   1c40c:	f7ff f8fe 	bl	1b60c <CC_PalMemSetZeroPlat>
   1c410:	3401      	adds	r4, #1
   1c412:	1bad      	subs	r5, r5, r6
   1c414:	b2e4      	uxtb	r4, r4
   1c416:	d027      	beq.n	1c468 <kmu_derive_cmac+0x108>
   1c418:	9b05      	ldr	r3, [sp, #20]
   1c41a:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   1c41e:	2d10      	cmp	r5, #16
   1c420:	464a      	mov	r2, r9
   1c422:	a906      	add	r1, sp, #24
   1c424:	a80e      	add	r0, sp, #56	; 0x38
   1c426:	462e      	mov	r6, r5
   1c428:	bf28      	it	cs
   1c42a:	2610      	movcs	r6, #16
   1c42c:	f7ff fe52 	bl	1c0d4 <FinishAesDrv>
   1c430:	4603      	mov	r3, r0
   1c432:	4632      	mov	r2, r6
   1c434:	eb08 0007 	add.w	r0, r8, r7
   1c438:	a90e      	add	r1, sp, #56	; 0x38
   1c43a:	4437      	add	r7, r6
   1c43c:	2b00      	cmp	r3, #0
   1c43e:	d0e1      	beq.n	1c404 <kmu_derive_cmac+0xa4>
   1c440:	461f      	mov	r7, r3
   1c442:	a80e      	add	r0, sp, #56	; 0x38
   1c444:	2274      	movs	r2, #116	; 0x74
   1c446:	2100      	movs	r1, #0
   1c448:	f7ff f8de 	bl	1b608 <CC_PalMemSetPlat>
   1c44c:	4638      	mov	r0, r7
   1c44e:	b04d      	add	sp, #308	; 0x134
   1c450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c454:	4f08      	ldr	r7, [pc, #32]	; (1c478 <kmu_derive_cmac+0x118>)
   1c456:	4638      	mov	r0, r7
   1c458:	b04d      	add	sp, #308	; 0x134
   1c45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c45e:	4f07      	ldr	r7, [pc, #28]	; (1c47c <kmu_derive_cmac+0x11c>)
   1c460:	4638      	mov	r0, r7
   1c462:	b04d      	add	sp, #308	; 0x134
   1c464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c468:	a80e      	add	r0, sp, #56	; 0x38
   1c46a:	2274      	movs	r2, #116	; 0x74
   1c46c:	2100      	movs	r1, #0
   1c46e:	462f      	mov	r7, r5
   1c470:	f7ff f8ca 	bl	1b608 <CC_PalMemSetPlat>
   1c474:	e7ea      	b.n	1c44c <kmu_derive_cmac+0xec>
   1c476:	bf00      	nop
   1c478:	00f1000e 	.word	0x00f1000e
   1c47c:	00f1000f 	.word	0x00f1000f

0001c480 <UtilCmacBuildDataForDerivation>:
   1c480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c484:	b082      	sub	sp, #8
   1c486:	2600      	movs	r6, #0
   1c488:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1c48a:	9601      	str	r6, [sp, #4]
   1c48c:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1c490:	d83c      	bhi.n	1c50c <UtilCmacBuildDataForDerivation+0x8c>
   1c492:	00ee      	lsls	r6, r5, #3
   1c494:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   1c498:	f101 35ff 	add.w	r5, r1, #4294967295
   1c49c:	461f      	mov	r7, r3
   1c49e:	bf34      	ite	cc
   1c4a0:	2303      	movcc	r3, #3
   1c4a2:	2304      	movcs	r3, #4
   1c4a4:	2d3f      	cmp	r5, #63	; 0x3f
   1c4a6:	460c      	mov	r4, r1
   1c4a8:	9300      	str	r3, [sp, #0]
   1c4aa:	d82f      	bhi.n	1c50c <UtilCmacBuildDataForDerivation+0x8c>
   1c4ac:	b370      	cbz	r0, 1c50c <UtilCmacBuildDataForDerivation+0x8c>
   1c4ae:	4690      	mov	r8, r2
   1c4b0:	b117      	cbz	r7, 1c4b8 <UtilCmacBuildDataForDerivation+0x38>
   1c4b2:	b35a      	cbz	r2, 1c50c <UtilCmacBuildDataForDerivation+0x8c>
   1c4b4:	2f40      	cmp	r7, #64	; 0x40
   1c4b6:	d829      	bhi.n	1c50c <UtilCmacBuildDataForDerivation+0x8c>
   1c4b8:	9a08      	ldr	r2, [sp, #32]
   1c4ba:	b33a      	cbz	r2, 1c50c <UtilCmacBuildDataForDerivation+0x8c>
   1c4bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c4be:	6811      	ldr	r1, [r2, #0]
   1c4c0:	b321      	cbz	r1, 1c50c <UtilCmacBuildDataForDerivation+0x8c>
   1c4c2:	19e2      	adds	r2, r4, r7
   1c4c4:	4413      	add	r3, r2
   1c4c6:	4299      	cmp	r1, r3
   1c4c8:	d320      	bcc.n	1c50c <UtilCmacBuildDataForDerivation+0x8c>
   1c4ca:	9b08      	ldr	r3, [sp, #32]
   1c4cc:	4622      	mov	r2, r4
   1c4ce:	4601      	mov	r1, r0
   1c4d0:	1c58      	adds	r0, r3, #1
   1c4d2:	f7ff f897 	bl	1b604 <CC_PalMemCopyPlat>
   1c4d6:	9b08      	ldr	r3, [sp, #32]
   1c4d8:	4423      	add	r3, r4
   1c4da:	2200      	movs	r2, #0
   1c4dc:	3402      	adds	r4, #2
   1c4de:	705a      	strb	r2, [r3, #1]
   1c4e0:	bb07      	cbnz	r7, 1c524 <UtilCmacBuildDataForDerivation+0xa4>
   1c4e2:	2eff      	cmp	r6, #255	; 0xff
   1c4e4:	9600      	str	r6, [sp, #0]
   1c4e6:	d915      	bls.n	1c514 <UtilCmacBuildDataForDerivation+0x94>
   1c4e8:	9b08      	ldr	r3, [sp, #32]
   1c4ea:	0235      	lsls	r5, r6, #8
   1c4ec:	b2ad      	uxth	r5, r5
   1c4ee:	1918      	adds	r0, r3, r4
   1c4f0:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   1c4f4:	2202      	movs	r2, #2
   1c4f6:	a901      	add	r1, sp, #4
   1c4f8:	9501      	str	r5, [sp, #4]
   1c4fa:	f7ff f883 	bl	1b604 <CC_PalMemCopyPlat>
   1c4fe:	3402      	adds	r4, #2
   1c500:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c502:	2000      	movs	r0, #0
   1c504:	601c      	str	r4, [r3, #0]
   1c506:	b002      	add	sp, #8
   1c508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c50c:	4809      	ldr	r0, [pc, #36]	; (1c534 <UtilCmacBuildDataForDerivation+0xb4>)
   1c50e:	b002      	add	sp, #8
   1c510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c514:	9b08      	ldr	r3, [sp, #32]
   1c516:	2201      	movs	r2, #1
   1c518:	1918      	adds	r0, r3, r4
   1c51a:	4669      	mov	r1, sp
   1c51c:	f7ff f872 	bl	1b604 <CC_PalMemCopyPlat>
   1c520:	3401      	adds	r4, #1
   1c522:	e7ed      	b.n	1c500 <UtilCmacBuildDataForDerivation+0x80>
   1c524:	9b08      	ldr	r3, [sp, #32]
   1c526:	4641      	mov	r1, r8
   1c528:	1918      	adds	r0, r3, r4
   1c52a:	463a      	mov	r2, r7
   1c52c:	f7ff f86a 	bl	1b604 <CC_PalMemCopyPlat>
   1c530:	443c      	add	r4, r7
   1c532:	e7d6      	b.n	1c4e2 <UtilCmacBuildDataForDerivation+0x62>
   1c534:	80000006 	.word	0x80000006

0001c538 <ccc_cfg_changed>:
}
   1c538:	4770      	bx	lr

0001c53a <bt_gatt_notify.constprop.0>:
 *  @param data Pointer to Attribute data.
 *  @param len Attribute value length.
 *
 *  @return 0 in case of success or negative value in case of error.
 */
static inline int bt_gatt_notify(struct bt_conn *conn,
   1c53a:	b570      	push	{r4, r5, r6, lr}
   1c53c:	b086      	sub	sp, #24
   1c53e:	4606      	mov	r6, r0
   1c540:	460d      	mov	r5, r1
   1c542:	4614      	mov	r4, r2
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   1c544:	2100      	movs	r1, #0
   1c546:	2218      	movs	r2, #24
   1c548:	4668      	mov	r0, sp
   1c54a:	f001 fb8d 	bl	1dc68 <memset>

	params.attr = attr;
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
   1c54e:	4669      	mov	r1, sp
   1c550:	2000      	movs	r0, #0
	params.data = data;
   1c552:	e9cd 6501 	strd	r6, r5, [sp, #4]
	params.len = len;
   1c556:	f8ad 400c 	strh.w	r4, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
   1c55a:	f7f9 fcc3 	bl	15ee4 <bt_gatt_notify_cb>
}
   1c55e:	b006      	add	sp, #24
   1c560:	bd70      	pop	{r4, r5, r6, pc}

0001c562 <enableMLX>:
    startBurstMode(i2c_dev);
   1c562:	f000 bbce 	b.w	1cd02 <startBurstMode>

0001c566 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
   1c566:	b158      	cbz	r0, 1c580 <null_ptr_check+0x1a>
   1c568:	68c3      	ldr	r3, [r0, #12]
   1c56a:	b14b      	cbz	r3, 1c580 <null_ptr_check+0x1a>
   1c56c:	6903      	ldr	r3, [r0, #16]
   1c56e:	b13b      	cbz	r3, 1c580 <null_ptr_check+0x1a>
   1c570:	6943      	ldr	r3, [r0, #20]
   1c572:	b12b      	cbz	r3, 1c580 <null_ptr_check+0x1a>
   1c574:	6840      	ldr	r0, [r0, #4]
   1c576:	fab0 f080 	clz	r0, r0
   1c57a:	0940      	lsrs	r0, r0, #5
   1c57c:	4240      	negs	r0, r0
   1c57e:	4770      	bx	lr
        (dev->intf_ptr == NULL))
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
   1c580:	f04f 30ff 	mov.w	r0, #4294967295
        /* Device structure is fine */
        rslt = BMP3_OK;
    }

    return rslt;
}
   1c584:	4770      	bx	lr

0001c586 <compensate_data>:
{
   1c586:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c58a:	4682      	mov	sl, r0
   1c58c:	b087      	sub	sp, #28
   1c58e:	460d      	mov	r5, r1
   1c590:	461c      	mov	r4, r3
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
   1c592:	4693      	mov	fp, r2
   1c594:	2a00      	cmp	r2, #0
   1c596:	f000 80df 	beq.w	1c758 <compensate_data+0x1d2>
   1c59a:	2b00      	cmp	r3, #0
   1c59c:	f000 80dc 	beq.w	1c758 <compensate_data+0x1d2>
        if (sensor_comp & (BMP3_PRESS | BMP3_TEMP))
   1c5a0:	f010 0f03 	tst.w	r0, #3
   1c5a4:	d022      	beq.n	1c5ec <compensate_data+0x66>
    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
   1c5a6:	6848      	ldr	r0, [r1, #4]
   1c5a8:	f7e3 feec 	bl	384 <__aeabi_ui2d>
   1c5ac:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c5b0:	f7e3 fdaa 	bl	108 <__aeabi_dsub>
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   1c5b4:	4602      	mov	r2, r0
   1c5b6:	460b      	mov	r3, r1
    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
   1c5b8:	4606      	mov	r6, r0
   1c5ba:	460f      	mov	r7, r1
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   1c5bc:	f7e3 ff5c 	bl	478 <__aeabi_dmul>
   1c5c0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1c5c4:	f7e3 ff58 	bl	478 <__aeabi_dmul>
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
   1c5c8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   1c5cc:	4680      	mov	r8, r0
   1c5ce:	4689      	mov	r9, r1
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
   1c5d0:	4630      	mov	r0, r6
   1c5d2:	4639      	mov	r1, r7
   1c5d4:	f7e3 ff50 	bl	478 <__aeabi_dmul>
   1c5d8:	4602      	mov	r2, r0
   1c5da:	460b      	mov	r3, r1
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   1c5dc:	4640      	mov	r0, r8
   1c5de:	4649      	mov	r1, r9
   1c5e0:	f7e3 fd94 	bl	10c <__adddf3>
   1c5e4:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
   1c5e8:	e9cb 0100 	strd	r0, r1, [fp]
        if (sensor_comp & BMP3_PRESS)
   1c5ec:	f01a 0001 	ands.w	r0, sl, #1
   1c5f0:	f000 80af 	beq.w	1c752 <compensate_data+0x1cc>
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
   1c5f4:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
        pow_output = (float) base * pow_output;
   1c5f8:	4619      	mov	r1, r3
   1c5fa:	4610      	mov	r0, r2
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
   1c5fc:	e9cd 2300 	strd	r2, r3, [sp]
        pow_output = (float) base * pow_output;
   1c600:	f7e4 f94c 	bl	89c <__aeabi_d2f>
   1c604:	4601      	mov	r1, r0
   1c606:	4606      	mov	r6, r0
   1c608:	f7e4 faa6 	bl	b58 <__aeabi_fmul>
   1c60c:	4607      	mov	r7, r0
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1c60e:	f7e3 fedb 	bl	3c8 <__aeabi_f2d>
   1c612:	e9cd 0102 	strd	r0, r1, [sp, #8]
        pow_output = (float) base * pow_output;
   1c616:	4639      	mov	r1, r7
   1c618:	4630      	mov	r0, r6
   1c61a:	f7e4 fa9d 	bl	b58 <__aeabi_fmul>
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1c61e:	f7e3 fed3 	bl	3c8 <__aeabi_f2d>
   1c622:	e9cd 0104 	strd	r0, r1, [sp, #16]
    partial_out2 = uncomp_data->pressure *
   1c626:	6828      	ldr	r0, [r5, #0]
   1c628:	f7e3 feac 	bl	384 <__aeabi_ui2d>
   1c62c:	4689      	mov	r9, r1
   1c62e:	4680      	mov	r8, r0
        pow_output = (float) base * pow_output;
   1c630:	f7e4 f934 	bl	89c <__aeabi_d2f>
   1c634:	4601      	mov	r1, r0
   1c636:	4682      	mov	sl, r0
   1c638:	f7e4 fa8e 	bl	b58 <__aeabi_fmul>
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
   1c63c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
        pow_output = (float) base * pow_output;
   1c640:	4605      	mov	r5, r0
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
   1c642:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c646:	f7e3 ff17 	bl	478 <__aeabi_dmul>
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1c64a:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1c64e:	f7e3 fd5d 	bl	10c <__adddf3>
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1c652:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1c656:	4606      	mov	r6, r0
   1c658:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1c65a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1c65e:	f7e3 ff0b 	bl	478 <__aeabi_dmul>
   1c662:	4602      	mov	r2, r0
   1c664:	460b      	mov	r3, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1c666:	4630      	mov	r0, r6
   1c668:	4639      	mov	r1, r7
   1c66a:	f7e3 fd4f 	bl	10c <__adddf3>
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1c66e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1c672:	4606      	mov	r6, r0
   1c674:	460f      	mov	r7, r1
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1c676:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1c67a:	f7e3 fefd 	bl	478 <__aeabi_dmul>
   1c67e:	4602      	mov	r2, r0
   1c680:	460b      	mov	r3, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1c682:	4630      	mov	r0, r6
   1c684:	4639      	mov	r1, r7
   1c686:	f7e3 fd41 	bl	10c <__adddf3>
    partial_out2 = uncomp_data->pressure *
   1c68a:	4642      	mov	r2, r8
   1c68c:	464b      	mov	r3, r9
   1c68e:	f7e3 fef3 	bl	478 <__aeabi_dmul>
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
   1c692:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    partial_out2 = uncomp_data->pressure *
   1c696:	4680      	mov	r8, r0
   1c698:	4689      	mov	r9, r1
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
   1c69a:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c69e:	f7e3 feeb 	bl	478 <__aeabi_dmul>
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1c6a2:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   1c6a6:	f7e3 fd31 	bl	10c <__adddf3>
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1c6aa:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1c6ae:	4606      	mov	r6, r0
   1c6b0:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1c6b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1c6b6:	f7e3 fedf 	bl	478 <__aeabi_dmul>
   1c6ba:	4602      	mov	r2, r0
   1c6bc:	460b      	mov	r3, r1
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1c6be:	4630      	mov	r0, r6
   1c6c0:	4639      	mov	r1, r7
   1c6c2:	f7e3 fd23 	bl	10c <__adddf3>
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1c6c6:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1c6ca:	4606      	mov	r6, r0
   1c6cc:	460f      	mov	r7, r1
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1c6ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1c6d2:	f7e3 fed1 	bl	478 <__aeabi_dmul>
   1c6d6:	4602      	mov	r2, r0
   1c6d8:	460b      	mov	r3, r1
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1c6da:	4630      	mov	r0, r6
   1c6dc:	4639      	mov	r1, r7
   1c6de:	f7e3 fd15 	bl	10c <__adddf3>
   1c6e2:	4602      	mov	r2, r0
   1c6e4:	460b      	mov	r3, r1
    comp_press = partial_out1 + partial_out2 + partial_data4;
   1c6e6:	4640      	mov	r0, r8
   1c6e8:	4649      	mov	r1, r9
   1c6ea:	f7e3 fd0f 	bl	10c <__adddf3>
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
   1c6ee:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    comp_press = partial_out1 + partial_out2 + partial_data4;
   1c6f2:	4606      	mov	r6, r0
   1c6f4:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
   1c6f6:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c6fa:	f7e3 febd 	bl	478 <__aeabi_dmul>
   1c6fe:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
   1c702:	f7e3 fd03 	bl	10c <__adddf3>
   1c706:	4680      	mov	r8, r0
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
   1c708:	4628      	mov	r0, r5
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
   1c70a:	4689      	mov	r9, r1
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
   1c70c:	f7e3 fe5c 	bl	3c8 <__aeabi_f2d>
   1c710:	4602      	mov	r2, r0
   1c712:	460b      	mov	r3, r1
    partial_data3 = partial_data1 * partial_data2;
   1c714:	4640      	mov	r0, r8
   1c716:	4649      	mov	r1, r9
   1c718:	f7e3 feae 	bl	478 <__aeabi_dmul>
   1c71c:	4680      	mov	r8, r0
   1c71e:	4689      	mov	r9, r1
        pow_output = (float) base * pow_output;
   1c720:	4650      	mov	r0, sl
   1c722:	4629      	mov	r1, r5
   1c724:	f7e4 fa18 	bl	b58 <__aeabi_fmul>
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
   1c728:	f7e3 fe4e 	bl	3c8 <__aeabi_f2d>
   1c72c:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
   1c730:	f7e3 fea2 	bl	478 <__aeabi_dmul>
   1c734:	4602      	mov	r2, r0
   1c736:	460b      	mov	r3, r1
   1c738:	4640      	mov	r0, r8
   1c73a:	4649      	mov	r1, r9
   1c73c:	f7e3 fce6 	bl	10c <__adddf3>
   1c740:	4602      	mov	r2, r0
   1c742:	460b      	mov	r3, r1
    comp_press = partial_out1 + partial_out2 + partial_data4;
   1c744:	4630      	mov	r0, r6
   1c746:	4639      	mov	r1, r7
   1c748:	f7e3 fce0 	bl	10c <__adddf3>
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
   1c74c:	e9cb 0102 	strd	r0, r1, [fp, #8]
   1c750:	2000      	movs	r0, #0
}
   1c752:	b007      	add	sp, #28
   1c754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rslt = BMP3_E_NULL_PTR;
   1c758:	f04f 30ff 	mov.w	r0, #4294967295
   1c75c:	e7f9      	b.n	1c752 <compensate_data+0x1cc>

0001c75e <bmp3_get_regs>:
{
   1c75e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c762:	b083      	sub	sp, #12
   1c764:	4681      	mov	r9, r0
   1c766:	af00      	add	r7, sp, #0
    rslt = null_ptr_check(dev);
   1c768:	4618      	mov	r0, r3
{
   1c76a:	460e      	mov	r6, r1
   1c76c:	4690      	mov	r8, r2
   1c76e:	461c      	mov	r4, r3
    rslt = null_ptr_check(dev);
   1c770:	f7ff fef9 	bl	1c566 <null_ptr_check>
    if ((rslt == BMP3_OK) && (reg_data != NULL))
   1c774:	6078      	str	r0, [r7, #4]
   1c776:	bb78      	cbnz	r0, 1c7d8 <bmp3_get_regs+0x7a>
   1c778:	b371      	cbz	r1, 1c7d8 <bmp3_get_regs+0x7a>
        uint32_t temp_len = len + dev->dummy_byte;
   1c77a:	7aa2      	ldrb	r2, [r4, #10]
        if (dev->intf != BMP3_I2C_INTF)
   1c77c:	7a21      	ldrb	r1, [r4, #8]
        uint32_t temp_len = len + dev->dummy_byte;
   1c77e:	4442      	add	r2, r8
        uint8_t temp_buff[len + dev->dummy_byte];
   1c780:	1dd3      	adds	r3, r2, #7
   1c782:	f023 0307 	bic.w	r3, r3, #7
    {
   1c786:	46eb      	mov	fp, sp
        uint8_t temp_buff[len + dev->dummy_byte];
   1c788:	ebad 0d03 	sub.w	sp, sp, r3
   1c78c:	68e3      	ldr	r3, [r4, #12]
        if (dev->intf != BMP3_I2C_INTF)
   1c78e:	2901      	cmp	r1, #1
   1c790:	461d      	mov	r5, r3
        uint8_t temp_buff[len + dev->dummy_byte];
   1c792:	46ea      	mov	sl, sp
        if (dev->intf != BMP3_I2C_INTF)
   1c794:	6863      	ldr	r3, [r4, #4]
   1c796:	d019      	beq.n	1c7cc <bmp3_get_regs+0x6e>
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
   1c798:	4669      	mov	r1, sp
   1c79a:	f049 0080 	orr.w	r0, r9, #128	; 0x80
   1c79e:	47a8      	blx	r5
            for (idx = 0; idx < len; idx++)
   1c7a0:	687d      	ldr	r5, [r7, #4]
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
   1c7a2:	7260      	strb	r0, [r4, #9]
            for (idx = 0; idx < len; idx++)
   1c7a4:	4545      	cmp	r5, r8
   1c7a6:	d10a      	bne.n	1c7be <bmp3_get_regs+0x60>
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
   1c7a8:	f994 0009 	ldrsb.w	r0, [r4, #9]
            rslt = BMP3_E_COMM_FAIL;
   1c7ac:	2800      	cmp	r0, #0
   1c7ae:	bf18      	it	ne
   1c7b0:	f06f 0006 	mvnne.w	r0, #6
   1c7b4:	46dd      	mov	sp, fp
}
   1c7b6:	370c      	adds	r7, #12
   1c7b8:	46bd      	mov	sp, r7
   1c7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
   1c7be:	7aa3      	ldrb	r3, [r4, #10]
   1c7c0:	eb0a 0205 	add.w	r2, sl, r5
   1c7c4:	5cd3      	ldrb	r3, [r2, r3]
   1c7c6:	5573      	strb	r3, [r6, r5]
            for (idx = 0; idx < len; idx++)
   1c7c8:	3501      	adds	r5, #1
   1c7ca:	e7eb      	b.n	1c7a4 <bmp3_get_regs+0x46>
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
   1c7cc:	4642      	mov	r2, r8
   1c7ce:	4631      	mov	r1, r6
   1c7d0:	4648      	mov	r0, r9
   1c7d2:	47a8      	blx	r5
   1c7d4:	7260      	strb	r0, [r4, #9]
   1c7d6:	e7e7      	b.n	1c7a8 <bmp3_get_regs+0x4a>
        rslt = BMP3_E_NULL_PTR;
   1c7d8:	f04f 30ff 	mov.w	r0, #4294967295
   1c7dc:	e7eb      	b.n	1c7b6 <bmp3_get_regs+0x58>

0001c7de <bmp3_set_regs>:
{
   1c7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c7e2:	4616      	mov	r6, r2
    uint8_t temp_buff[len * 2];
   1c7e4:	0052      	lsls	r2, r2, #1
{
   1c7e6:	461c      	mov	r4, r3
    uint8_t temp_buff[len * 2];
   1c7e8:	1dd3      	adds	r3, r2, #7
   1c7ea:	f023 0307 	bic.w	r3, r3, #7
{
   1c7ee:	af00      	add	r7, sp, #0
   1c7f0:	4605      	mov	r5, r0
    uint8_t temp_buff[len * 2];
   1c7f2:	ebad 0d03 	sub.w	sp, sp, r3
    rslt = null_ptr_check(dev);
   1c7f6:	4620      	mov	r0, r4
{
   1c7f8:	4688      	mov	r8, r1
    uint8_t temp_buff[len * 2];
   1c7fa:	4669      	mov	r1, sp
    rslt = null_ptr_check(dev);
   1c7fc:	f7ff feb3 	bl	1c566 <null_ptr_check>
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
   1c800:	bb98      	cbnz	r0, 1c86a <bmp3_set_regs+0x8c>
   1c802:	b395      	cbz	r5, 1c86a <bmp3_set_regs+0x8c>
   1c804:	f1b8 0f00 	cmp.w	r8, #0
   1c808:	d02f      	beq.n	1c86a <bmp3_set_regs+0x8c>
        if (len != 0)
   1c80a:	b38e      	cbz	r6, 1c870 <bmp3_set_regs+0x92>
            temp_buff[0] = reg_data[0];
   1c80c:	f898 3000 	ldrb.w	r3, [r8]
   1c810:	f88d 3000 	strb.w	r3, [sp]
            if (dev->intf == BMP3_SPI_INTF)
   1c814:	7a23      	ldrb	r3, [r4, #8]
   1c816:	b1a3      	cbz	r3, 1c842 <bmp3_set_regs+0x64>
            if (len > 1)
   1c818:	2e01      	cmp	r6, #1
   1c81a:	d818      	bhi.n	1c84e <bmp3_set_regs+0x70>
   1c81c:	2201      	movs	r2, #1
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
   1c81e:	6926      	ldr	r6, [r4, #16]
   1c820:	6863      	ldr	r3, [r4, #4]
   1c822:	7828      	ldrb	r0, [r5, #0]
   1c824:	47b0      	blx	r6
                rslt = BMP3_E_COMM_FAIL;
   1c826:	2800      	cmp	r0, #0
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
   1c828:	7260      	strb	r0, [r4, #9]
                rslt = BMP3_E_COMM_FAIL;
   1c82a:	bf18      	it	ne
   1c82c:	f06f 0006 	mvnne.w	r0, #6
}
   1c830:	46bd      	mov	sp, r7
   1c832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
   1c836:	f815 c000 	ldrb.w	ip, [r5, r0]
   1c83a:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
   1c83e:	f805 c000 	strb.w	ip, [r5, r0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
   1c842:	b2d8      	uxtb	r0, r3
   1c844:	4286      	cmp	r6, r0
   1c846:	f103 0301 	add.w	r3, r3, #1
   1c84a:	d8f4      	bhi.n	1c836 <bmp3_set_regs+0x58>
   1c84c:	e7e4      	b.n	1c818 <bmp3_set_regs+0x3a>
    for (index = 1; index < len; index++)
   1c84e:	2301      	movs	r3, #1
        temp_buff[(index * 2) - 1] = reg_addr[index];
   1c850:	f101 3cff 	add.w	ip, r1, #4294967295
   1c854:	5ce8      	ldrb	r0, [r5, r3]
   1c856:	f80c 0013 	strb.w	r0, [ip, r3, lsl #1]
        temp_buff[index * 2] = reg_data[index];
   1c85a:	f818 0003 	ldrb.w	r0, [r8, r3]
   1c85e:	f801 0013 	strb.w	r0, [r1, r3, lsl #1]
    for (index = 1; index < len; index++)
   1c862:	3301      	adds	r3, #1
   1c864:	429e      	cmp	r6, r3
   1c866:	d1f5      	bne.n	1c854 <bmp3_set_regs+0x76>
   1c868:	e7d9      	b.n	1c81e <bmp3_set_regs+0x40>
        rslt = BMP3_E_NULL_PTR;
   1c86a:	f04f 30ff 	mov.w	r0, #4294967295
   1c86e:	e7df      	b.n	1c830 <bmp3_set_regs+0x52>
            rslt = BMP3_E_INVALID_LEN;
   1c870:	f06f 0005 	mvn.w	r0, #5
   1c874:	e7dc      	b.n	1c830 <bmp3_set_regs+0x52>

0001c876 <write_power_mode>:
{
   1c876:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c878:	4604      	mov	r4, r0
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
   1c87a:	4623      	mov	r3, r4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1c87c:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
   1c87e:	2201      	movs	r2, #1
   1c880:	f10d 0107 	add.w	r1, sp, #7
    uint8_t op_mode = dev->settings.op_mode;
   1c884:	f894 50b0 	ldrb.w	r5, [r4, #176]	; 0xb0
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1c888:	f88d 0006 	strb.w	r0, [sp, #6]
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
   1c88c:	f7ff ff67 	bl	1c75e <bmp3_get_regs>
    if (rslt == BMP3_OK)
   1c890:	b988      	cbnz	r0, 1c8b6 <write_power_mode+0x40>
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
   1c892:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c896:	012d      	lsls	r5, r5, #4
   1c898:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1c89c:	f005 0530 	and.w	r5, r5, #48	; 0x30
   1c8a0:	432b      	orrs	r3, r5
   1c8a2:	f88d 3007 	strb.w	r3, [sp, #7]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
   1c8a6:	2201      	movs	r2, #1
   1c8a8:	4623      	mov	r3, r4
   1c8aa:	f10d 0107 	add.w	r1, sp, #7
   1c8ae:	f10d 0006 	add.w	r0, sp, #6
   1c8b2:	f7ff ff94 	bl	1c7de <bmp3_set_regs>
}
   1c8b6:	b003      	add	sp, #12
   1c8b8:	bd30      	pop	{r4, r5, pc}

0001c8ba <bmp3_soft_reset>:
{
   1c8ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t reg_addr = BMP3_REG_CMD;
   1c8bc:	237e      	movs	r3, #126	; 0x7e
   1c8be:	f88d 3004 	strb.w	r3, [sp, #4]
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
   1c8c2:	23b6      	movs	r3, #182	; 0xb6
{
   1c8c4:	4605      	mov	r5, r0
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
   1c8c6:	f88d 3005 	strb.w	r3, [sp, #5]
    rslt = null_ptr_check(dev);
   1c8ca:	f7ff fe4c 	bl	1c566 <null_ptr_check>
    if (rslt == BMP3_OK)
   1c8ce:	4604      	mov	r4, r0
   1c8d0:	bb50      	cbnz	r0, 1c928 <bmp3_soft_reset+0x6e>
        rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
   1c8d2:	462b      	mov	r3, r5
   1c8d4:	2201      	movs	r2, #1
   1c8d6:	f10d 0106 	add.w	r1, sp, #6
   1c8da:	2003      	movs	r0, #3
   1c8dc:	f7ff ff3f 	bl	1c75e <bmp3_get_regs>
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
   1c8e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1c8e4:	06db      	lsls	r3, r3, #27
   1c8e6:	d522      	bpl.n	1c92e <bmp3_soft_reset+0x74>
   1c8e8:	bb08      	cbnz	r0, 1c92e <bmp3_soft_reset+0x74>
            rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   1c8ea:	462b      	mov	r3, r5
   1c8ec:	2201      	movs	r2, #1
   1c8ee:	f10d 0105 	add.w	r1, sp, #5
   1c8f2:	a801      	add	r0, sp, #4
   1c8f4:	f7ff ff73 	bl	1c7de <bmp3_set_regs>
            if (rslt == BMP3_OK)
   1c8f8:	4604      	mov	r4, r0
   1c8fa:	b9a8      	cbnz	r0, 1c928 <bmp3_soft_reset+0x6e>
                dev->delay_us(2000, dev->intf_ptr);
   1c8fc:	696b      	ldr	r3, [r5, #20]
   1c8fe:	6869      	ldr	r1, [r5, #4]
   1c900:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   1c904:	4798      	blx	r3
                rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
   1c906:	462b      	mov	r3, r5
   1c908:	2201      	movs	r2, #1
   1c90a:	f10d 0107 	add.w	r1, sp, #7
   1c90e:	2002      	movs	r0, #2
   1c910:	f7ff ff25 	bl	1c75e <bmp3_get_regs>
                if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
   1c914:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c918:	f003 037e 	and.w	r3, r3, #126	; 0x7e
   1c91c:	4303      	orrs	r3, r0
   1c91e:	b2db      	uxtb	r3, r3
   1c920:	2b00      	cmp	r3, #0
                    rslt = BMP3_E_CMD_EXEC_FAILED;
   1c922:	bf18      	it	ne
   1c924:	f06f 0403 	mvnne.w	r4, #3
}
   1c928:	4620      	mov	r0, r4
   1c92a:	b003      	add	sp, #12
   1c92c:	bd30      	pop	{r4, r5, pc}
            rslt = BMP3_E_CMD_EXEC_FAILED;
   1c92e:	f06f 0403 	mvn.w	r4, #3
   1c932:	e7f9      	b.n	1c928 <bmp3_soft_reset+0x6e>

0001c934 <bmp3_get_op_mode>:
{
   1c934:	b510      	push	{r4, lr}
   1c936:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
   1c938:	4608      	mov	r0, r1
   1c93a:	f7ff fe14 	bl	1c566 <null_ptr_check>
    if ((rslt == BMP3_OK) && (op_mode != NULL))
   1c93e:	b958      	cbnz	r0, 1c958 <bmp3_get_op_mode+0x24>
   1c940:	b154      	cbz	r4, 1c958 <bmp3_get_op_mode+0x24>
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
   1c942:	460b      	mov	r3, r1
   1c944:	2201      	movs	r2, #1
   1c946:	4621      	mov	r1, r4
   1c948:	201b      	movs	r0, #27
   1c94a:	f7ff ff08 	bl	1c75e <bmp3_get_regs>
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
   1c94e:	7823      	ldrb	r3, [r4, #0]
   1c950:	f3c3 1301 	ubfx	r3, r3, #4, #2
   1c954:	7023      	strb	r3, [r4, #0]
}
   1c956:	bd10      	pop	{r4, pc}
        rslt = BMP3_E_NULL_PTR;
   1c958:	f04f 30ff 	mov.w	r0, #4294967295
   1c95c:	e7fb      	b.n	1c956 <bmp3_get_op_mode+0x22>

0001c95e <bmp3_set_op_mode>:
{
   1c95e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c960:	4605      	mov	r5, r0
    rslt = null_ptr_check(dev);
   1c962:	f7ff fe00 	bl	1c566 <null_ptr_check>
    if (rslt == BMP3_OK)
   1c966:	4604      	mov	r4, r0
   1c968:	2800      	cmp	r0, #0
   1c96a:	d163      	bne.n	1ca34 <bmp3_set_op_mode+0xd6>
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
   1c96c:	4629      	mov	r1, r5
   1c96e:	f10d 0002 	add.w	r0, sp, #2
        uint8_t curr_mode = dev->settings.op_mode;
   1c972:	f895 60b0 	ldrb.w	r6, [r5, #176]	; 0xb0
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
   1c976:	f7ff ffdd 	bl	1c934 <bmp3_get_op_mode>
        if (last_set_mode != BMP3_MODE_SLEEP)
   1c97a:	f89d 3002 	ldrb.w	r3, [sp, #2]
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
   1c97e:	4604      	mov	r4, r0
        if (last_set_mode != BMP3_MODE_SLEEP)
   1c980:	b1e3      	cbz	r3, 1c9bc <bmp3_set_op_mode+0x5e>
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1c982:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
   1c984:	462b      	mov	r3, r5
   1c986:	2201      	movs	r2, #1
   1c988:	a901      	add	r1, sp, #4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1c98a:	f88d 0003 	strb.w	r0, [sp, #3]
    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
   1c98e:	f7ff fee6 	bl	1c75e <bmp3_get_regs>
    if (rslt == BMP3_OK)
   1c992:	4604      	mov	r4, r0
   1c994:	b968      	cbnz	r0, 1c9b2 <bmp3_set_op_mode+0x54>
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
   1c996:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1c99a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1c99e:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
   1c9a2:	2201      	movs	r2, #1
   1c9a4:	462b      	mov	r3, r5
   1c9a6:	a901      	add	r1, sp, #4
   1c9a8:	f10d 0003 	add.w	r0, sp, #3
   1c9ac:	f7ff ff17 	bl	1c7de <bmp3_set_regs>
   1c9b0:	4604      	mov	r4, r0
            dev->delay_us(5000, dev->intf_ptr);
   1c9b2:	696b      	ldr	r3, [r5, #20]
   1c9b4:	6869      	ldr	r1, [r5, #4]
   1c9b6:	f241 3088 	movw	r0, #5000	; 0x1388
   1c9ba:	4798      	blx	r3
        if (rslt == BMP3_OK)
   1c9bc:	bbd4      	cbnz	r4, 1ca34 <bmp3_set_op_mode+0xd6>
            if (curr_mode == BMP3_MODE_NORMAL)
   1c9be:	2e03      	cmp	r6, #3
   1c9c0:	d13b      	bne.n	1ca3a <bmp3_set_op_mode+0xdc>
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
   1c9c2:	2204      	movs	r2, #4
   1c9c4:	462b      	mov	r3, r5
   1c9c6:	eb0d 0102 	add.w	r1, sp, r2
   1c9ca:	201c      	movs	r0, #28
   1c9cc:	f7ff fec7 	bl	1c75e <bmp3_get_regs>
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
   1c9d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1c9d4:	f003 0207 	and.w	r2, r3, #7
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
   1c9d8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1c9dc:	f885 30b4 	strb.w	r3, [r5, #180]	; 0xb4
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
   1c9e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
   1c9e4:	f885 20b3 	strb.w	r2, [r5, #179]	; 0xb3
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
   1c9e8:	f003 031f 	and.w	r3, r3, #31
   1c9ec:	f885 30b6 	strb.w	r3, [r5, #182]	; 0xb6
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
   1c9f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c9f4:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1c9f8:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
    if (rslt == BMP3_OK)
   1c9fc:	4604      	mov	r4, r0
   1c9fe:	b9c8      	cbnz	r0, 1ca34 <bmp3_set_op_mode+0xd6>
        rslt = validate_osr_and_odr_settings(dev);
   1ca00:	4628      	mov	r0, r5
   1ca02:	f7f3 fbbd 	bl	10180 <validate_osr_and_odr_settings>
    if (rslt == BMP3_OK)
   1ca06:	4604      	mov	r4, r0
   1ca08:	b9a0      	cbnz	r0, 1ca34 <bmp3_set_op_mode+0xd6>
        rslt = write_power_mode(dev);
   1ca0a:	4628      	mov	r0, r5
   1ca0c:	f7ff ff33 	bl	1c876 <write_power_mode>
        if (rslt == BMP3_OK)
   1ca10:	4604      	mov	r4, r0
   1ca12:	b978      	cbnz	r0, 1ca34 <bmp3_set_op_mode+0xd6>
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
   1ca14:	462b      	mov	r3, r5
   1ca16:	2201      	movs	r2, #1
   1ca18:	a901      	add	r1, sp, #4
   1ca1a:	2002      	movs	r0, #2
   1ca1c:	f7ff fe9f 	bl	1c75e <bmp3_get_regs>
            if (rslt == BMP3_OK)
   1ca20:	4604      	mov	r4, r0
   1ca22:	b938      	cbnz	r0, 1ca34 <bmp3_set_op_mode+0xd6>
                if (conf_err_status & BMP3_ERR_CONF)
   1ca24:	f89d 3004 	ldrb.w	r3, [sp, #4]
                    rslt = BMP3_E_CONFIGURATION_ERR;
   1ca28:	f013 0f04 	tst.w	r3, #4
   1ca2c:	bf0c      	ite	eq
   1ca2e:	4604      	moveq	r4, r0
   1ca30:	f06f 0404 	mvnne.w	r4, #4
}
   1ca34:	4620      	mov	r0, r4
   1ca36:	b002      	add	sp, #8
   1ca38:	bd70      	pop	{r4, r5, r6, pc}
            else if (curr_mode == BMP3_MODE_FORCED)
   1ca3a:	2e01      	cmp	r6, #1
   1ca3c:	d1fa      	bne.n	1ca34 <bmp3_set_op_mode+0xd6>
                rslt = write_power_mode(dev);
   1ca3e:	4628      	mov	r0, r5
   1ca40:	f7ff ff19 	bl	1c876 <write_power_mode>
   1ca44:	4604      	mov	r4, r0
   1ca46:	e7f5      	b.n	1ca34 <bmp3_set_op_mode+0xd6>

0001ca48 <bmp3_get_sensor_data>:
{
   1ca48:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ca4a:	b085      	sub	sp, #20
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
   1ca4c:	2300      	movs	r3, #0
{
   1ca4e:	4606      	mov	r6, r0
    rslt = null_ptr_check(dev);
   1ca50:	4610      	mov	r0, r2
    struct bmp3_uncomp_data uncomp_data = { 0 };
   1ca52:	e9cd 3302 	strd	r3, r3, [sp, #8]
{
   1ca56:	460d      	mov	r5, r1
   1ca58:	4617      	mov	r7, r2
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
   1ca5a:	9300      	str	r3, [sp, #0]
   1ca5c:	f8ad 3004 	strh.w	r3, [sp, #4]
    rslt = null_ptr_check(dev);
   1ca60:	f7ff fd81 	bl	1c566 <null_ptr_check>
    if ((rslt == BMP3_OK) && (comp_data != NULL))
   1ca64:	bb58      	cbnz	r0, 1cabe <bmp3_get_sensor_data+0x76>
   1ca66:	b351      	cbz	r1, 1cabe <bmp3_get_sensor_data+0x76>
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
   1ca68:	4613      	mov	r3, r2
   1ca6a:	4669      	mov	r1, sp
   1ca6c:	2206      	movs	r2, #6
   1ca6e:	2004      	movs	r0, #4
   1ca70:	f7ff fe75 	bl	1c75e <bmp3_get_regs>
        if (rslt == BMP3_OK)
   1ca74:	4604      	mov	r4, r0
   1ca76:	b9f8      	cbnz	r0, 1cab8 <bmp3_get_sensor_data+0x70>
    data_msb = (uint32_t)reg_data[2] << 16;
   1ca78:	f89d 3002 	ldrb.w	r3, [sp, #2]
    data_lsb = (uint32_t)reg_data[1] << 8;
   1ca7c:	f89d 2001 	ldrb.w	r2, [sp, #1]
    data_msb = (uint32_t)reg_data[5] << 16;
   1ca80:	f89d 4005 	ldrb.w	r4, [sp, #5]
    data_msb = (uint32_t)reg_data[2] << 16;
   1ca84:	041b      	lsls	r3, r3, #16
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
   1ca86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    data_xlsb = (uint32_t)reg_data[0];
   1ca8a:	f89d 2000 	ldrb.w	r2, [sp]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
   1ca8e:	4313      	orrs	r3, r2
   1ca90:	9302      	str	r3, [sp, #8]
    data_lsb = (uint32_t)reg_data[4] << 8;
   1ca92:	f89d 3004 	ldrb.w	r3, [sp, #4]
    data_msb = (uint32_t)reg_data[5] << 16;
   1ca96:	0424      	lsls	r4, r4, #16
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
   1ca98:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    data_xlsb = (uint32_t)reg_data[3];
   1ca9c:	f89d 3003 	ldrb.w	r3, [sp, #3]
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
   1caa0:	462a      	mov	r2, r5
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
   1caa2:	431c      	orrs	r4, r3
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
   1caa4:	a902      	add	r1, sp, #8
   1caa6:	f107 0318 	add.w	r3, r7, #24
   1caaa:	4630      	mov	r0, r6
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
   1caac:	9403      	str	r4, [sp, #12]
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
   1caae:	f7ff fd6a 	bl	1c586 <compensate_data>
   1cab2:	4604      	mov	r4, r0
            printk();
   1cab4:	f000 f99f 	bl	1cdf6 <printk>
}
   1cab8:	4620      	mov	r0, r4
   1caba:	b005      	add	sp, #20
   1cabc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = BMP3_E_NULL_PTR;
   1cabe:	f04f 34ff 	mov.w	r4, #4294967295
   1cac2:	e7f9      	b.n	1cab8 <bmp3_get_sensor_data+0x70>

0001cac4 <app_us_delay>:
	z_impl_k_busy_wait(usec_to_wait);
   1cac4:	f003 be7a 	b.w	207bc <z_impl_k_busy_wait>

0001cac8 <app_i2c_read>:
static BMP3_INTF_RET_TYPE app_i2c_read(uint8_t reg_addr, uint8_t *read_data, uint32_t len, void *intf_ptr) {
   1cac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cacc:	b086      	sub	sp, #24
   1cace:	461c      	mov	r4, r3
static inline int i2c_write(const struct device *dev, const uint8_t *buf,
			    uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = (uint8_t *)buf;
   1cad0:	f10d 0307 	add.w	r3, sp, #7
   1cad4:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
   1cad6:	2501      	movs	r5, #1
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1cad8:	2302      	movs	r3, #2
   1cada:	460f      	mov	r7, r1
   1cadc:	4616      	mov	r6, r2
   1cade:	f88d 0007 	strb.w	r0, [sp, #7]
	msg.len = num_bytes;
   1cae2:	9504      	str	r5, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1cae4:	f88d 3014 	strb.w	r3, [sp, #20]
	return api->transfer(dev, msgs, num_msgs, addr);
   1cae8:	68a3      	ldr	r3, [r4, #8]
   1caea:	462a      	mov	r2, r5
   1caec:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1caf0:	a903      	add	r1, sp, #12
   1caf2:	2376      	movs	r3, #118	; 0x76
   1caf4:	4620      	mov	r0, r4
   1caf6:	47c0      	blx	r8
{
	struct i2c_msg msg;

	msg.buf = buf;
	msg.len = num_bytes;
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1caf8:	2303      	movs	r3, #3
	msg.len = num_bytes;
   1cafa:	e9cd 7603 	strd	r7, r6, [sp, #12]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1cafe:	f88d 3014 	strb.w	r3, [sp, #20]
	return api->transfer(dev, msgs, num_msgs, addr);
   1cb02:	68a3      	ldr	r3, [r4, #8]
   1cb04:	462a      	mov	r2, r5
   1cb06:	685e      	ldr	r6, [r3, #4]
   1cb08:	a903      	add	r1, sp, #12
   1cb0a:	2376      	movs	r3, #118	; 0x76
   1cb0c:	4620      	mov	r0, r4
   1cb0e:	47b0      	blx	r6
}
   1cb10:	b240      	sxtb	r0, r0
   1cb12:	b006      	add	sp, #24
   1cb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cb18 <app_i2c_write>:
static BMP3_INTF_RET_TYPE app_i2c_write(uint8_t reg_addr, const uint8_t *write_data, uint32_t len, void *intf_ptr) {
   1cb18:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cb1a:	4614      	mov	r4, r2
	uint8_t dataBuffer[len+1];
   1cb1c:	3408      	adds	r4, #8
static BMP3_INTF_RET_TYPE app_i2c_write(uint8_t reg_addr, const uint8_t *write_data, uint32_t len, void *intf_ptr) {
   1cb1e:	b085      	sub	sp, #20
	uint8_t dataBuffer[len+1];
   1cb20:	f024 0407 	bic.w	r4, r4, #7
static BMP3_INTF_RET_TYPE app_i2c_write(uint8_t reg_addr, const uint8_t *write_data, uint32_t len, void *intf_ptr) {
   1cb24:	af00      	add	r7, sp, #0
	uint8_t dataBuffer[len+1];
   1cb26:	ebad 0d04 	sub.w	sp, sp, r4
static BMP3_INTF_RET_TYPE app_i2c_write(uint8_t reg_addr, const uint8_t *write_data, uint32_t len, void *intf_ptr) {
   1cb2a:	461d      	mov	r5, r3
	dataBuffer[0]=reg_addr;
   1cb2c:	466b      	mov	r3, sp
	uint8_t dataBuffer[len+1];
   1cb2e:	1c56      	adds	r6, r2, #1
	dataBuffer[0]=reg_addr;
   1cb30:	f803 0b01 	strb.w	r0, [r3], #1
	memcpy(&dataBuffer[0]+1,write_data,len);
   1cb34:	4618      	mov	r0, r3
   1cb36:	f001 f88c 	bl	1dc52 <memcpy>
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1cb3a:	2302      	movs	r3, #2
	msg.buf = (uint8_t *)buf;
   1cb3c:	f8c7 d004 	str.w	sp, [r7, #4]
	msg.len = num_bytes;
   1cb40:	60be      	str	r6, [r7, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1cb42:	733b      	strb	r3, [r7, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
   1cb44:	68ab      	ldr	r3, [r5, #8]
   1cb46:	1d39      	adds	r1, r7, #4
   1cb48:	685c      	ldr	r4, [r3, #4]
   1cb4a:	2201      	movs	r2, #1
   1cb4c:	2376      	movs	r3, #118	; 0x76
   1cb4e:	4628      	mov	r0, r5
   1cb50:	47a0      	blx	r4
}
   1cb52:	3714      	adds	r7, #20
   1cb54:	b240      	sxtb	r0, r0
   1cb56:	46bd      	mov	sp, r7
   1cb58:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001cb5a <transceive>:
                    uint8_t interdelay, struct device *mlx_device_t) {
   1cb5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cb5e:	b085      	sub	sp, #20
   1cb60:	af00      	add	r7, sp, #0
   1cb62:	461d      	mov	r5, r3
   1cb64:	6b7e      	ldr	r6, [r7, #52]	; 0x34
  uint8_t rxbuf2[rxlen + 2];
   1cb66:	3309      	adds	r3, #9
   1cb68:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
                    uint8_t interdelay, struct device *mlx_device_t) {
   1cb6c:	4681      	mov	r9, r0
   1cb6e:	4688      	mov	r8, r1
   1cb70:	4614      	mov	r4, r2
  uint8_t rxbuf2[rxlen + 2];
   1cb72:	ebad 0d03 	sub.w	sp, sp, r3
  if (mlx_device_t == NULL) {
   1cb76:	b926      	cbnz	r6, 1cb82 <transceive+0x28>
    return false;
   1cb78:	2000      	movs	r0, #0
}
   1cb7a:	3714      	adds	r7, #20
   1cb7c:	46bd      	mov	sp, r7
   1cb7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cb82:	4630      	mov	r0, r6
   1cb84:	f003 fa39 	bl	1fffa <z_device_ready>
   1cb88:	2800      	cmp	r0, #0
   1cb8a:	d0f5      	beq.n	1cb78 <transceive+0x1e>
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1cb8c:	2302      	movs	r3, #2
  if (i2c_write(mlx_device_t,txbuf, txlen, MLX90393_DEFAULT_ADDR)) {
   1cb8e:	e9c7 9801 	strd	r9, r8, [r7, #4]
   1cb92:	733b      	strb	r3, [r7, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
   1cb94:	68b3      	ldr	r3, [r6, #8]
   1cb96:	2201      	movs	r2, #1
   1cb98:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1cb9c:	1d39      	adds	r1, r7, #4
   1cb9e:	230c      	movs	r3, #12
   1cba0:	4630      	mov	r0, r6
   1cba2:	47c0      	blx	r8
   1cba4:	b108      	cbz	r0, 1cbaa <transceive+0x50>
    return MLX90393_STATUS_ERROR;
   1cba6:	20ff      	movs	r0, #255	; 0xff
   1cba8:	e7e7      	b.n	1cb7a <transceive+0x20>
   1cbaa:	f897 c030 	ldrb.w	ip, [r7, #48]	; 0x30
   1cbae:	f240 30e7 	movw	r0, #999	; 0x3e7
   1cbb2:	ea4f 3ccc 	mov.w	ip, ip, lsl #15
   1cbb6:	eb1c 0000 	adds.w	r0, ip, r0
   1cbba:	f04f 0100 	mov.w	r1, #0
   1cbbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cbc2:	f04f 0300 	mov.w	r3, #0
   1cbc6:	4149      	adcs	r1, r1
   1cbc8:	f7e4 f936 	bl	e38 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   1cbcc:	f7fc fdb6 	bl	1973c <z_impl_k_sleep>
  uint8_t rxbuf2[rxlen + 2];
   1cbd0:	1c6b      	adds	r3, r5, #1
	msg.len = num_bytes;
   1cbd2:	60bb      	str	r3, [r7, #8]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1cbd4:	2303      	movs	r3, #3
	msg.buf = buf;
   1cbd6:	f8c7 d004 	str.w	sp, [r7, #4]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1cbda:	733b      	strb	r3, [r7, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
   1cbdc:	68b3      	ldr	r3, [r6, #8]
   1cbde:	2201      	movs	r2, #1
   1cbe0:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1cbe4:	1d39      	adds	r1, r7, #4
   1cbe6:	230c      	movs	r3, #12
   1cbe8:	4630      	mov	r0, r6
   1cbea:	47c0      	blx	r8
  if (i2c_read(mlx_device_t,rxbuf2, rxlen + 1,MLX90393_DEFAULT_ADDR)) {
   1cbec:	2800      	cmp	r0, #0
   1cbee:	d1da      	bne.n	1cba6 <transceive+0x4c>
  status = rxbuf2[0];
   1cbf0:	466b      	mov	r3, sp
   1cbf2:	4622      	mov	r2, r4
   1cbf4:	f813 0b01 	ldrb.w	r0, [r3], #1
  for (i = 0; i < rxlen; i++) {
   1cbf8:	4425      	add	r5, r4
   1cbfa:	4295      	cmp	r5, r2
   1cbfc:	d101      	bne.n	1cc02 <transceive+0xa8>
  return (status >> 2);
   1cbfe:	0880      	lsrs	r0, r0, #2
   1cc00:	e7bb      	b.n	1cb7a <transceive+0x20>
    rxbuf[i] = rxbuf2[i + 1];
   1cc02:	f813 1b01 	ldrb.w	r1, [r3], #1
   1cc06:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < rxlen; i++) {
   1cc0a:	e7f6      	b.n	1cbfa <transceive+0xa0>

0001cc0c <writeRegister>:
bool writeRegister(uint8_t reg, uint16_t data, struct device *mlx_device_t) {
   1cc0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t tx[4] = {MLX90393_REG_WR,
   1cc0e:	2360      	movs	r3, #96	; 0x60
   1cc10:	f88d 300c 	strb.w	r3, [sp, #12]
   1cc14:	0a0b      	lsrs	r3, r1, #8
   1cc16:	f88d 300d 	strb.w	r3, [sp, #13]
                   reg << 2};   // the register itself, shift up by 2 bits!
   1cc1a:	0080      	lsls	r0, r0, #2
  return (transceive(tx, sizeof(tx), NULL, 0, 0, mlx_device_t) == MLX90393_STATUS_OK);
   1cc1c:	2300      	movs	r3, #0
  uint8_t tx[4] = {MLX90393_REG_WR,
   1cc1e:	f88d 100e 	strb.w	r1, [sp, #14]
   1cc22:	f88d 000f 	strb.w	r0, [sp, #15]
  return (transceive(tx, sizeof(tx), NULL, 0, 0, mlx_device_t) == MLX90393_STATUS_OK);
   1cc26:	9201      	str	r2, [sp, #4]
   1cc28:	9300      	str	r3, [sp, #0]
   1cc2a:	461a      	mov	r2, r3
   1cc2c:	2104      	movs	r1, #4
   1cc2e:	a803      	add	r0, sp, #12
   1cc30:	f7ff ff93 	bl	1cb5a <transceive>
}
   1cc34:	fab0 f080 	clz	r0, r0
   1cc38:	0940      	lsrs	r0, r0, #5
   1cc3a:	b005      	add	sp, #20
   1cc3c:	f85d fb04 	ldr.w	pc, [sp], #4

0001cc40 <readRegister>:
bool readRegister(uint8_t reg, uint16_t *data, struct device *mlx_device_t) {
   1cc40:	b530      	push	{r4, r5, lr}
   1cc42:	b085      	sub	sp, #20
  uint8_t tx[2] = {MLX90393_REG_RR,reg << 2}; // the register itself, shift up by 2 bits!
   1cc44:	2350      	movs	r3, #80	; 0x50
   1cc46:	0080      	lsls	r0, r0, #2
   1cc48:	f88d 3008 	strb.w	r3, [sp, #8]
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {
   1cc4c:	2400      	movs	r4, #0
   1cc4e:	2302      	movs	r3, #2
bool readRegister(uint8_t reg, uint16_t *data, struct device *mlx_device_t) {
   1cc50:	460d      	mov	r5, r1
  uint8_t tx[2] = {MLX90393_REG_RR,reg << 2}; // the register itself, shift up by 2 bits!
   1cc52:	f88d 0009 	strb.w	r0, [sp, #9]
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {
   1cc56:	9201      	str	r2, [sp, #4]
   1cc58:	9400      	str	r4, [sp, #0]
   1cc5a:	aa03      	add	r2, sp, #12
   1cc5c:	4619      	mov	r1, r3
   1cc5e:	a802      	add	r0, sp, #8
   1cc60:	f7ff ff7b 	bl	1cb5a <transceive>
   1cc64:	b948      	cbnz	r0, 1cc7a <readRegister+0x3a>
  *data = ((uint16_t)rx[0] << 8) | rx[1];
   1cc66:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1cc6a:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1cc6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1cc72:	802b      	strh	r3, [r5, #0]
  return true;
   1cc74:	2001      	movs	r0, #1
}
   1cc76:	b005      	add	sp, #20
   1cc78:	bd30      	pop	{r4, r5, pc}
    return false;
   1cc7a:	4620      	mov	r0, r4
   1cc7c:	e7fb      	b.n	1cc76 <readRegister+0x36>

0001cc7e <mlx_exitMode>:
bool mlx_exitMode(struct device *mlx_device_t) {
   1cc7e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t tx[1] = {MLX90393_REG_EX};
   1cc80:	2380      	movs	r3, #128	; 0x80
   1cc82:	f88d 300c 	strb.w	r3, [sp, #12]
  return (transceive(tx, sizeof(tx), NULL, 0, 0, mlx_device_t) == MLX90393_STATUS_OK);
   1cc86:	2300      	movs	r3, #0
   1cc88:	9001      	str	r0, [sp, #4]
   1cc8a:	9300      	str	r3, [sp, #0]
   1cc8c:	461a      	mov	r2, r3
   1cc8e:	2101      	movs	r1, #1
   1cc90:	a803      	add	r0, sp, #12
   1cc92:	f7ff ff62 	bl	1cb5a <transceive>
}
   1cc96:	fab0 f080 	clz	r0, r0
   1cc9a:	0940      	lsrs	r0, r0, #5
   1cc9c:	b005      	add	sp, #20
   1cc9e:	f85d fb04 	ldr.w	pc, [sp], #4

0001cca2 <mlx_reset>:
bool mlx_reset(struct device *mlx_device_t) {
   1cca2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t tx[1] = {MLX90393_REG_RT};
   1cca4:	23f0      	movs	r3, #240	; 0xf0
   1cca6:	f88d 300c 	strb.w	r3, [sp, #12]
  if (transceive(tx, sizeof(tx), NULL, 0, 5, mlx_device_t) != MLX90393_STATUS_RESET) {
   1ccaa:	2305      	movs	r3, #5
   1ccac:	9300      	str	r3, [sp, #0]
   1ccae:	2300      	movs	r3, #0
   1ccb0:	9001      	str	r0, [sp, #4]
   1ccb2:	461a      	mov	r2, r3
   1ccb4:	2101      	movs	r1, #1
   1ccb6:	a803      	add	r0, sp, #12
   1ccb8:	f7ff ff4f 	bl	1cb5a <transceive>
}
   1ccbc:	1e43      	subs	r3, r0, #1
   1ccbe:	4258      	negs	r0, r3
   1ccc0:	4158      	adcs	r0, r3
   1ccc2:	b005      	add	sp, #20
   1ccc4:	f85d fb04 	ldr.w	pc, [sp], #4

0001ccc8 <mlx_setTrigInt>:
bool mlx_setTrigInt(bool state, struct device *mlx_device_t) {
   1ccc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  readRegister(MLX90393_CONF2, &data, mlx_device_t);
   1ccca:	460a      	mov	r2, r1
bool mlx_setTrigInt(bool state, struct device *mlx_device_t) {
   1cccc:	4605      	mov	r5, r0
   1ccce:	460c      	mov	r4, r1
  readRegister(MLX90393_CONF2, &data, mlx_device_t);
   1ccd0:	2001      	movs	r0, #1
   1ccd2:	f10d 0106 	add.w	r1, sp, #6
   1ccd6:	f7ff ffb3 	bl	1cc40 <readRegister>
  data &= ~0x8000;
   1ccda:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1ccde:	f3c3 030e 	ubfx	r3, r3, #0, #15
  if (state) {
   1cce2:	b94d      	cbnz	r5, 1ccf8 <mlx_setTrigInt+0x30>
    data |= 0x8000;
   1cce4:	f8ad 3006 	strh.w	r3, [sp, #6]
  return writeRegister(MLX90393_CONF2, data, mlx_device_t);
   1cce8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   1ccec:	4622      	mov	r2, r4
   1ccee:	2001      	movs	r0, #1
   1ccf0:	f7ff ff8c 	bl	1cc0c <writeRegister>
}
   1ccf4:	b003      	add	sp, #12
   1ccf6:	bd30      	pop	{r4, r5, pc}
    data |= 0x8000;
   1ccf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
   1ccfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
   1cd00:	e7f0      	b.n	1cce4 <mlx_setTrigInt+0x1c>

0001cd02 <startBurstMode>:
uint8_t startBurstMode(struct device *mlx_device_t){
   1cd02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t tx[1] = {MLX90393_REG_SB | MLX90393_AXIS_ALL};  
   1cd04:	231e      	movs	r3, #30
   1cd06:	f88d 300c 	strb.w	r3, [sp, #12]
    uint8_t stat = transceive(tx, sizeof(tx), NULL, 0, 0,mlx_device_t);
   1cd0a:	2300      	movs	r3, #0
   1cd0c:	9001      	str	r0, [sp, #4]
   1cd0e:	9300      	str	r3, [sp, #0]
   1cd10:	461a      	mov	r2, r3
   1cd12:	2101      	movs	r1, #1
   1cd14:	a803      	add	r0, sp, #12
   1cd16:	f7ff ff20 	bl	1cb5a <transceive>
    if ((stat == MLX90393_STATUS_OK) || (stat == MLX90393_STATUS_SMMODE)) {
   1cd1a:	f010 0ff7 	tst.w	r0, #247	; 0xf7
}
   1cd1e:	bf0c      	ite	eq
   1cd20:	2001      	moveq	r0, #1
   1cd22:	2000      	movne	r0, #0
   1cd24:	b005      	add	sp, #20
   1cd26:	f85d fb04 	ldr.w	pc, [sp], #4

0001cd2a <mlx_init>:

  return mlx_readMeasurement(x, y, z, mlx_device_t);
  return 0;
}

bool mlx_init(struct device *mlx_device) {
   1cd2a:	b510      	push	{r4, lr}

	//const struct device *mlx_device = device_get_binding("I2C_1");
  

  if (mlx_device == NULL) {
   1cd2c:	4604      	mov	r4, r0
   1cd2e:	b388      	cbz	r0, 1cd94 <mlx_init+0x6a>
   1cd30:	f003 f963 	bl	1fffa <z_device_ready>
   1cd34:	b370      	cbz	r0, 1cd94 <mlx_init+0x6a>

  if (!device_is_ready(mlx_device)) {
    return false;
  }

  if (!mlx_exitMode(mlx_device)){
   1cd36:	4620      	mov	r0, r4
   1cd38:	f7ff ffa1 	bl	1cc7e <mlx_exitMode>
   1cd3c:	b350      	cbz	r0, 1cd94 <mlx_init+0x6a>
    return false;
  }

  if (!mlx_reset(mlx_device)) {
   1cd3e:	4620      	mov	r0, r4
   1cd40:	f7ff ffaf 	bl	1cca2 <mlx_reset>
   1cd44:	b330      	cbz	r0, 1cd94 <mlx_init+0x6a>
    return false;
  }

  /* Set gain and sensor config. */
  if (!mlx_setGain(MLX90393_GAIN_1X, mlx_device)) {
   1cd46:	4621      	mov	r1, r4
   1cd48:	2007      	movs	r0, #7
   1cd4a:	f7f3 fe13 	bl	10974 <mlx_setGain>
   1cd4e:	b308      	cbz	r0, 1cd94 <mlx_init+0x6a>
    return false;
  }

  /* Set resolution. */
  if (!mlx_setResolution(MLX90393_X, MLX90393_RES_16, mlx_device)){
   1cd50:	2100      	movs	r1, #0
   1cd52:	4622      	mov	r2, r4
   1cd54:	4608      	mov	r0, r1
   1cd56:	f7f3 fe29 	bl	109ac <mlx_setResolution>
   1cd5a:	b1d8      	cbz	r0, 1cd94 <mlx_init+0x6a>
    return false;
  }
  if (!mlx_setResolution(MLX90393_Y, MLX90393_RES_16, mlx_device)){
   1cd5c:	4622      	mov	r2, r4
   1cd5e:	2100      	movs	r1, #0
   1cd60:	2001      	movs	r0, #1
   1cd62:	f7f3 fe23 	bl	109ac <mlx_setResolution>
   1cd66:	b1a8      	cbz	r0, 1cd94 <mlx_init+0x6a>
    return false;
  }
  if (!mlx_setResolution(MLX90393_Z, MLX90393_RES_16, mlx_device)){
   1cd68:	4622      	mov	r2, r4
   1cd6a:	2100      	movs	r1, #0
   1cd6c:	2002      	movs	r0, #2
   1cd6e:	f7f3 fe1d 	bl	109ac <mlx_setResolution>
   1cd72:	b178      	cbz	r0, 1cd94 <mlx_init+0x6a>
    return false;
  }

  /* Set oversampling. */
  if (!mlx_setOversampling(MLX90393_OSR_3, mlx_device)) {
   1cd74:	4621      	mov	r1, r4
   1cd76:	2003      	movs	r0, #3
   1cd78:	f7f3 fe6c 	bl	10a54 <mlx_setOversampling>
   1cd7c:	b150      	cbz	r0, 1cd94 <mlx_init+0x6a>
    return false;
  }

  /* Set digital filtering. */
  if (!mlx_setFilter(MLX90393_FILTER_7, mlx_device)) {
   1cd7e:	4621      	mov	r1, r4
   1cd80:	2007      	movs	r0, #7
   1cd82:	f7f3 fe4b 	bl	10a1c <mlx_setFilter>
   1cd86:	b128      	cbz	r0, 1cd94 <mlx_init+0x6a>
    return false;
  }

  /* set INT pin to output interrupt */
  if (!mlx_setTrigInt(true, mlx_device)) {
   1cd88:	4621      	mov	r1, r4
   1cd8a:	2001      	movs	r0, #1
    return false;
  }

  return true;
   1cd8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (!mlx_setTrigInt(true, mlx_device)) {
   1cd90:	f7ff bf9a 	b.w	1ccc8 <mlx_setTrigInt>
   1cd94:	2000      	movs	r0, #0
   1cd96:	bd10      	pop	{r4, pc}

0001cd98 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1cd98:	4603      	mov	r3, r0
   1cd9a:	b140      	cbz	r0, 1cdae <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1cd9c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1cd9e:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1cda2:	2a02      	cmp	r2, #2
   1cda4:	d006      	beq.n	1cdb4 <sys_notify_validate+0x1c>
   1cda6:	2a03      	cmp	r2, #3
   1cda8:	d004      	beq.n	1cdb4 <sys_notify_validate+0x1c>
   1cdaa:	2a01      	cmp	r2, #1
   1cdac:	d005      	beq.n	1cdba <sys_notify_validate+0x22>
		return -EINVAL;
   1cdae:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1cdb2:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1cdb4:	681a      	ldr	r2, [r3, #0]
   1cdb6:	2a00      	cmp	r2, #0
   1cdb8:	d0f9      	beq.n	1cdae <sys_notify_validate+0x16>
		notify->result = 0;
   1cdba:	2000      	movs	r0, #0
   1cdbc:	6098      	str	r0, [r3, #8]
   1cdbe:	4770      	bx	lr

0001cdc0 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1cdc0:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1cdc2:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1cdc6:	2a02      	cmp	r2, #2
{
   1cdc8:	b510      	push	{r4, lr}
   1cdca:	4603      	mov	r3, r0
	notify->result = res;
   1cdcc:	6081      	str	r1, [r0, #8]
	switch (method) {
   1cdce:	d00a      	beq.n	1cde6 <sys_notify_finalize+0x26>
   1cdd0:	2a03      	cmp	r2, #3
   1cdd2:	d10b      	bne.n	1cdec <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1cdd4:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1cdd6:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1cdd8:	2200      	movs	r2, #0
   1cdda:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1cddc:	b108      	cbz	r0, 1cde2 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   1cdde:	f7fc ff15 	bl	19c0c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1cde2:	4620      	mov	r0, r4
   1cde4:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1cde6:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1cde8:	2400      	movs	r4, #0
		break;
   1cdea:	e7f5      	b.n	1cdd8 <sys_notify_finalize+0x18>
	switch (method) {
   1cdec:	2400      	movs	r4, #0
   1cdee:	4620      	mov	r0, r4
   1cdf0:	e7f2      	b.n	1cdd8 <sys_notify_finalize+0x18>

0001cdf2 <arch_printk_char_out>:
}
   1cdf2:	2000      	movs	r0, #0
   1cdf4:	4770      	bx	lr

0001cdf6 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
   1cdf6:	b40f      	push	{r0, r1, r2, r3}
   1cdf8:	b507      	push	{r0, r1, r2, lr}
   1cdfa:	a904      	add	r1, sp, #16
   1cdfc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1ce00:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
   1ce02:	f7f3 ff0d 	bl	10c20 <vprintk>
	}
	va_end(ap);
}
   1ce06:	b003      	add	sp, #12
   1ce08:	f85d eb04 	ldr.w	lr, [sp], #4
   1ce0c:	b004      	add	sp, #16
   1ce0e:	4770      	bx	lr

0001ce10 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1ce10:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1ce12:	f013 0307 	ands.w	r3, r3, #7
   1ce16:	d105      	bne.n	1ce24 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1ce18:	6803      	ldr	r3, [r0, #0]
   1ce1a:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1ce1c:	bf0c      	ite	eq
   1ce1e:	2000      	moveq	r0, #0
   1ce20:	2003      	movne	r0, #3
   1ce22:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1ce24:	2b02      	cmp	r3, #2
   1ce26:	d105      	bne.n	1ce34 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1ce28:	8b43      	ldrh	r3, [r0, #26]
   1ce2a:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1ce2c:	bf14      	ite	ne
   1ce2e:	2000      	movne	r0, #0
   1ce30:	2004      	moveq	r0, #4
   1ce32:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1ce34:	2b01      	cmp	r3, #1
   1ce36:	d105      	bne.n	1ce44 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1ce38:	6803      	ldr	r3, [r0, #0]
   1ce3a:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1ce3c:	bf0c      	ite	eq
   1ce3e:	2000      	moveq	r0, #0
   1ce40:	2005      	movne	r0, #5
   1ce42:	4770      	bx	lr
	int evt = EVT_NOP;
   1ce44:	2000      	movs	r0, #0
}
   1ce46:	4770      	bx	lr

0001ce48 <notify_one>:
{
   1ce48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce4c:	460d      	mov	r5, r1
   1ce4e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1ce50:	4619      	mov	r1, r3
   1ce52:	1d28      	adds	r0, r5, #4
{
   1ce54:	4690      	mov	r8, r2
   1ce56:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1ce58:	f7ff ffb2 	bl	1cdc0 <sys_notify_finalize>
	if (cb) {
   1ce5c:	4604      	mov	r4, r0
   1ce5e:	b138      	cbz	r0, 1ce70 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1ce60:	4633      	mov	r3, r6
   1ce62:	4642      	mov	r2, r8
   1ce64:	4629      	mov	r1, r5
   1ce66:	4638      	mov	r0, r7
   1ce68:	46a4      	mov	ip, r4
}
   1ce6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1ce6e:	4760      	bx	ip
}
   1ce70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ce74 <transition_complete>:
{
   1ce74:	b410      	push	{r4}
	__asm__ volatile(
   1ce76:	f04f 0440 	mov.w	r4, #64	; 0x40
   1ce7a:	f3ef 8211 	mrs	r2, BASEPRI
   1ce7e:	f384 8811 	msr	BASEPRI, r4
   1ce82:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1ce86:	6141      	str	r1, [r0, #20]
}
   1ce88:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1ce8a:	2101      	movs	r1, #1
   1ce8c:	f7f3 bed6 	b.w	10c3c <process_event>

0001ce90 <validate_args>:
{
   1ce90:	b510      	push	{r4, lr}
   1ce92:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1ce94:	b140      	cbz	r0, 1cea8 <validate_args+0x18>
   1ce96:	b139      	cbz	r1, 1cea8 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1ce98:	1d08      	adds	r0, r1, #4
   1ce9a:	f7ff ff7d 	bl	1cd98 <sys_notify_validate>
	if ((rv == 0)
   1ce9e:	b928      	cbnz	r0, 1ceac <validate_args+0x1c>
	    && ((cli->notify.flags
   1cea0:	68a3      	ldr	r3, [r4, #8]
   1cea2:	f033 0303 	bics.w	r3, r3, #3
   1cea6:	d001      	beq.n	1ceac <validate_args+0x1c>
		rv = -EINVAL;
   1cea8:	f06f 0015 	mvn.w	r0, #21
}
   1ceac:	bd10      	pop	{r4, pc}

0001ceae <onoff_manager_init>:
{
   1ceae:	b538      	push	{r3, r4, r5, lr}
   1ceb0:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1ceb2:	4605      	mov	r5, r0
   1ceb4:	b158      	cbz	r0, 1cece <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1ceb6:	b151      	cbz	r1, 1cece <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1ceb8:	680b      	ldr	r3, [r1, #0]
   1ceba:	b143      	cbz	r3, 1cece <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1cebc:	684b      	ldr	r3, [r1, #4]
   1cebe:	b133      	cbz	r3, 1cece <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1cec0:	221c      	movs	r2, #28
   1cec2:	2100      	movs	r1, #0
   1cec4:	f000 fed0 	bl	1dc68 <memset>
   1cec8:	612c      	str	r4, [r5, #16]
	return 0;
   1ceca:	2000      	movs	r0, #0
}
   1cecc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1cece:	f06f 0015 	mvn.w	r0, #21
   1ced2:	e7fb      	b.n	1cecc <onoff_manager_init+0x1e>

0001ced4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1ced4:	b570      	push	{r4, r5, r6, lr}
   1ced6:	4604      	mov	r4, r0
   1ced8:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1ceda:	f7ff ffd9 	bl	1ce90 <validate_args>

	if (rv < 0) {
   1cede:	1e05      	subs	r5, r0, #0
   1cee0:	db31      	blt.n	1cf46 <onoff_request+0x72>
   1cee2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cee6:	f3ef 8111 	mrs	r1, BASEPRI
   1ceea:	f383 8811 	msr	BASEPRI, r3
   1ceee:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1cef2:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1cef4:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1cef6:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1cefa:	42ab      	cmp	r3, r5
   1cefc:	f000 0207 	and.w	r2, r0, #7
   1cf00:	d02e      	beq.n	1cf60 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1cf02:	2a02      	cmp	r2, #2
   1cf04:	d10e      	bne.n	1cf24 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1cf06:	3301      	adds	r3, #1
   1cf08:	8363      	strh	r3, [r4, #26]
	rv = state;
   1cf0a:	4615      	mov	r5, r2
		notify = true;
   1cf0c:	2301      	movs	r3, #1
	__asm__ volatile(
   1cf0e:	f381 8811 	msr	BASEPRI, r1
   1cf12:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1cf16:	b1b3      	cbz	r3, 1cf46 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1cf18:	2300      	movs	r3, #0
   1cf1a:	4631      	mov	r1, r6
   1cf1c:	4620      	mov	r0, r4
   1cf1e:	f7ff ff93 	bl	1ce48 <notify_one>
   1cf22:	e010      	b.n	1cf46 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1cf24:	0783      	lsls	r3, r0, #30
   1cf26:	d001      	beq.n	1cf2c <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1cf28:	2a06      	cmp	r2, #6
   1cf2a:	d10e      	bne.n	1cf4a <onoff_request+0x76>
	parent->next = child;
   1cf2c:	2300      	movs	r3, #0
   1cf2e:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1cf30:	6863      	ldr	r3, [r4, #4]
   1cf32:	b993      	cbnz	r3, 1cf5a <onoff_request+0x86>
	list->head = node;
   1cf34:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1cf38:	4615      	mov	r5, r2
   1cf3a:	b962      	cbnz	r2, 1cf56 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1cf3c:	460a      	mov	r2, r1
   1cf3e:	4620      	mov	r0, r4
   1cf40:	2102      	movs	r1, #2
   1cf42:	f7f3 fe7b 	bl	10c3c <process_event>
		}
	}

	return rv;
}
   1cf46:	4628      	mov	r0, r5
   1cf48:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1cf4a:	2a05      	cmp	r2, #5
   1cf4c:	bf0c      	ite	eq
   1cf4e:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1cf52:	f06f 0504 	mvnne.w	r5, #4
   1cf56:	2300      	movs	r3, #0
   1cf58:	e7d9      	b.n	1cf0e <onoff_request+0x3a>
	parent->next = child;
   1cf5a:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1cf5c:	6066      	str	r6, [r4, #4]
}
   1cf5e:	e7eb      	b.n	1cf38 <onoff_request+0x64>
		rv = -EAGAIN;
   1cf60:	f06f 050a 	mvn.w	r5, #10
   1cf64:	e7f7      	b.n	1cf56 <onoff_request+0x82>

0001cf66 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   1cf66:	b510      	push	{r4, lr}
	__asm__ volatile(
   1cf68:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cf6c:	f3ef 8211 	mrs	r2, BASEPRI
   1cf70:	f383 8811 	msr	BASEPRI, r3
   1cf74:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1cf78:	8b04      	ldrh	r4, [r0, #24]
   1cf7a:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   1cf7e:	2c02      	cmp	r4, #2
   1cf80:	d00a      	beq.n	1cf98 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
   1cf82:	2c01      	cmp	r4, #1
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   1cf84:	bf0c      	ite	eq
   1cf86:	f06f 0004 	mvneq.w	r0, #4
   1cf8a:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   1cf8e:	f382 8811 	msr	BASEPRI, r2
   1cf92:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   1cf96:	e008      	b.n	1cfaa <onoff_release+0x44>
	mgr->refs -= 1U;
   1cf98:	8b43      	ldrh	r3, [r0, #26]
   1cf9a:	3b01      	subs	r3, #1
   1cf9c:	b29b      	uxth	r3, r3
   1cf9e:	8343      	strh	r3, [r0, #26]
	if (stop) {
   1cfa0:	b923      	cbnz	r3, 1cfac <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   1cfa2:	4621      	mov	r1, r4
   1cfa4:	f7f3 fe4a 	bl	10c3c <process_event>
	int rv = state;
   1cfa8:	4620      	mov	r0, r4
}
   1cfaa:	bd10      	pop	{r4, pc}
	int rv = state;
   1cfac:	4620      	mov	r0, r4
   1cfae:	e7ee      	b.n	1cf8e <onoff_release+0x28>

0001cfb0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1cfb0:	4604      	mov	r4, r0
   1cfb2:	b508      	push	{r3, lr}
   1cfb4:	4608      	mov	r0, r1
   1cfb6:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1cfb8:	461a      	mov	r2, r3
   1cfba:	47a0      	blx	r4
	return z_impl_k_current_get();
   1cfbc:	f7fc fbd8 	bl	19770 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1cfc0:	f7f5 fd7e 	bl	12ac0 <z_impl_k_thread_abort>

0001cfc4 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1cfc4:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1cfc6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1cfca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1cfce:	bf2c      	ite	cs
   1cfd0:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1cfd4:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1cfd8:	4770      	bx	lr

0001cfda <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1cfda:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1cfde:	6880      	ldr	r0, [r0, #8]
   1cfe0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1cfe4:	bf2c      	ite	cs
   1cfe6:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1cfea:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1cfee:	4770      	bx	lr

0001cff0 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1cff0:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1cff2:	2201      	movs	r2, #1
   1cff4:	f7ff ffe6 	bl	1cfc4 <chunk_field>
}
   1cff8:	0840      	lsrs	r0, r0, #1
   1cffa:	bd08      	pop	{r3, pc}

0001cffc <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1cffc:	6883      	ldr	r3, [r0, #8]
   1cffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1d002:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1d006:	d308      	bcc.n	1d01a <set_chunk_used+0x1e>
		if (used) {
   1d008:	684b      	ldr	r3, [r1, #4]
   1d00a:	b11a      	cbz	r2, 1d014 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1d00c:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1d010:	604b      	str	r3, [r1, #4]
   1d012:	4770      	bx	lr
   1d014:	f023 0301 	bic.w	r3, r3, #1
   1d018:	e7fa      	b.n	1d010 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1d01a:	884b      	ldrh	r3, [r1, #2]
   1d01c:	b11a      	cbz	r2, 1d026 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1d01e:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1d022:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1d024:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1d026:	f023 0301 	bic.w	r3, r3, #1
   1d02a:	e7fa      	b.n	1d022 <set_chunk_used+0x26>

0001d02c <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1d02c:	0053      	lsls	r3, r2, #1
   1d02e:	2201      	movs	r2, #1
   1d030:	f7ff bfd3 	b.w	1cfda <chunk_set>

0001d034 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1d034:	6880      	ldr	r0, [r0, #8]
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1d036:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1d038:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1d03c:	bf2c      	ite	cs
   1d03e:	2002      	movcs	r0, #2
   1d040:	2001      	movcc	r0, #1
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1d042:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1d044:	fab0 f080 	clz	r0, r0
}
   1d048:	f1c0 001f 	rsb	r0, r0, #31
   1d04c:	4770      	bx	lr

0001d04e <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1d04e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d052:	4616      	mov	r6, r2
   1d054:	4604      	mov	r4, r0
   1d056:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1d058:	f7ff ffca 	bl	1cff0 <chunk_size>
   1d05c:	4631      	mov	r1, r6
   1d05e:	4605      	mov	r5, r0
   1d060:	4620      	mov	r0, r4
   1d062:	f7ff ffc5 	bl	1cff0 <chunk_size>
   1d066:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   1d068:	462a      	mov	r2, r5
   1d06a:	4639      	mov	r1, r7
   1d06c:	4620      	mov	r0, r4
   1d06e:	f7ff ffdd 	bl	1d02c <set_chunk_size>
	return c + chunk_size(h, c);
   1d072:	4631      	mov	r1, r6
   1d074:	4620      	mov	r0, r4
   1d076:	f7ff ffbb 	bl	1cff0 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1d07a:	462b      	mov	r3, r5
   1d07c:	1831      	adds	r1, r6, r0
   1d07e:	2200      	movs	r2, #0
   1d080:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1d082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d086:	f7ff bfa8 	b.w	1cfda <chunk_set>

0001d08a <split_chunks>:
{
   1d08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d08e:	4614      	mov	r4, r2
   1d090:	4605      	mov	r5, r0
   1d092:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   1d094:	f7ff ffac 	bl	1cff0 <chunk_size>
	chunksz_t lsz = rc - lc;
   1d098:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   1d09c:	1b37      	subs	r7, r6, r4
   1d09e:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1d0a0:	4642      	mov	r2, r8
   1d0a2:	4631      	mov	r1, r6
   1d0a4:	4628      	mov	r0, r5
   1d0a6:	f7ff ffc1 	bl	1d02c <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1d0aa:	463a      	mov	r2, r7
   1d0ac:	4621      	mov	r1, r4
   1d0ae:	4628      	mov	r0, r5
   1d0b0:	f7ff ffbc 	bl	1d02c <set_chunk_size>
   1d0b4:	4643      	mov	r3, r8
   1d0b6:	2200      	movs	r2, #0
   1d0b8:	4621      	mov	r1, r4
   1d0ba:	4628      	mov	r0, r5
   1d0bc:	f7ff ff8d 	bl	1cfda <chunk_set>
	return c + chunk_size(h, c);
   1d0c0:	4621      	mov	r1, r4
   1d0c2:	4628      	mov	r0, r5
   1d0c4:	f7ff ff94 	bl	1cff0 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1d0c8:	463b      	mov	r3, r7
   1d0ca:	1821      	adds	r1, r4, r0
   1d0cc:	2200      	movs	r2, #0
   1d0ce:	4628      	mov	r0, r5
}
   1d0d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d0d4:	f7ff bf81 	b.w	1cfda <chunk_set>

0001d0d8 <free_list_remove_bidx>:
{
   1d0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d0dc:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1d0de:	2203      	movs	r2, #3
   1d0e0:	460e      	mov	r6, r1
   1d0e2:	4604      	mov	r4, r0
   1d0e4:	f7ff ff6e 	bl	1cfc4 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1d0e8:	4286      	cmp	r6, r0
   1d0ea:	4605      	mov	r5, r0
   1d0ec:	f107 0804 	add.w	r8, r7, #4
   1d0f0:	d10b      	bne.n	1d10a <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1d0f2:	2301      	movs	r3, #1
   1d0f4:	fa03 f707 	lsl.w	r7, r3, r7
   1d0f8:	68e3      	ldr	r3, [r4, #12]
   1d0fa:	ea23 0307 	bic.w	r3, r3, r7
   1d0fe:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1d100:	2300      	movs	r3, #0
   1d102:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1d106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1d10a:	4631      	mov	r1, r6
   1d10c:	2202      	movs	r2, #2
   1d10e:	4620      	mov	r0, r4
   1d110:	f7ff ff58 	bl	1cfc4 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1d114:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1d116:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1d118:	4601      	mov	r1, r0
		b->next = second;
   1d11a:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1d11e:	4620      	mov	r0, r4
   1d120:	2203      	movs	r2, #3
   1d122:	f7ff ff5a 	bl	1cfda <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1d126:	4633      	mov	r3, r6
   1d128:	4629      	mov	r1, r5
   1d12a:	4620      	mov	r0, r4
   1d12c:	2202      	movs	r2, #2
}
   1d12e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d132:	f7ff bf52 	b.w	1cfda <chunk_set>

0001d136 <free_list_remove>:
{
   1d136:	b538      	push	{r3, r4, r5, lr}
   1d138:	4604      	mov	r4, r0
   1d13a:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1d13c:	f7ff ff58 	bl	1cff0 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1d140:	68a3      	ldr	r3, [r4, #8]
   1d142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d146:	4601      	mov	r1, r0
   1d148:	d301      	bcc.n	1d14e <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1d14a:	2801      	cmp	r0, #1
   1d14c:	d009      	beq.n	1d162 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1d14e:	4620      	mov	r0, r4
   1d150:	f7ff ff70 	bl	1d034 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   1d154:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1d156:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1d158:	4620      	mov	r0, r4
}
   1d15a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   1d15e:	f7ff bfbb 	b.w	1d0d8 <free_list_remove_bidx>
}
   1d162:	bd38      	pop	{r3, r4, r5, pc}

0001d164 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1d164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d168:	4605      	mov	r5, r0
   1d16a:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1d16c:	f7ff ff62 	bl	1d034 <bucket_idx>
   1d170:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
   1d174:	4606      	mov	r6, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1d176:	f8da 9010 	ldr.w	r9, [sl, #16]
   1d17a:	f1b9 0f00 	cmp.w	r9, #0
   1d17e:	d01b      	beq.n	1d1b8 <alloc_chunk+0x54>
   1d180:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1d182:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1d186:	4628      	mov	r0, r5
   1d188:	4621      	mov	r1, r4
   1d18a:	f7ff ff31 	bl	1cff0 <chunk_size>
   1d18e:	4540      	cmp	r0, r8
   1d190:	d307      	bcc.n	1d1a2 <alloc_chunk+0x3e>
				free_list_remove_bidx(h, c, bi);
   1d192:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1d194:	4621      	mov	r1, r4
   1d196:	4628      	mov	r0, r5
   1d198:	f7ff ff9e 	bl	1d0d8 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1d19c:	4620      	mov	r0, r4
   1d19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   1d1a2:	2203      	movs	r2, #3
   1d1a4:	4621      	mov	r1, r4
   1d1a6:	4628      	mov	r0, r5
   1d1a8:	f7ff ff0c 	bl	1cfc4 <chunk_field>
		} while (--i && b->next != first);
   1d1ac:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1d1ae:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1d1b2:	d001      	beq.n	1d1b8 <alloc_chunk+0x54>
   1d1b4:	4581      	cmp	r9, r0
   1d1b6:	d1e4      	bne.n	1d182 <alloc_chunk+0x1e>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1d1b8:	68e9      	ldr	r1, [r5, #12]
   1d1ba:	3601      	adds	r6, #1
   1d1bc:	f04f 34ff 	mov.w	r4, #4294967295
   1d1c0:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   1d1c2:	400c      	ands	r4, r1
   1d1c4:	d0ea      	beq.n	1d19c <alloc_chunk+0x38>
		int minbucket = __builtin_ctz(bmask);
   1d1c6:	fa94 f2a4 	rbit	r2, r4
   1d1ca:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1d1ce:	1d13      	adds	r3, r2, #4
   1d1d0:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   1d1d4:	e7de      	b.n	1d194 <alloc_chunk+0x30>

0001d1d6 <free_list_add>:
{
   1d1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d1da:	4604      	mov	r4, r0
   1d1dc:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1d1de:	f7ff ff07 	bl	1cff0 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1d1e2:	68a3      	ldr	r3, [r4, #8]
   1d1e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d1e8:	4601      	mov	r1, r0
   1d1ea:	d301      	bcc.n	1d1f0 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1d1ec:	2801      	cmp	r0, #1
   1d1ee:	d035      	beq.n	1d25c <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1d1f0:	4620      	mov	r0, r4
   1d1f2:	f7ff ff1f 	bl	1d034 <bucket_idx>
	if (b->next == 0U) {
   1d1f6:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1d1fa:	6916      	ldr	r6, [r2, #16]
   1d1fc:	b99e      	cbnz	r6, 1d226 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1d1fe:	2301      	movs	r3, #1
   1d200:	fa03 f000 	lsl.w	r0, r3, r0
   1d204:	68e3      	ldr	r3, [r4, #12]
   1d206:	4303      	orrs	r3, r0
   1d208:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1d20a:	4629      	mov	r1, r5
		b->next = c;
   1d20c:	6115      	str	r5, [r2, #16]
   1d20e:	462b      	mov	r3, r5
   1d210:	2202      	movs	r2, #2
   1d212:	4620      	mov	r0, r4
   1d214:	f7ff fee1 	bl	1cfda <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1d218:	2203      	movs	r2, #3
   1d21a:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1d21c:	4620      	mov	r0, r4
}
   1d21e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d222:	f7ff beda 	b.w	1cfda <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1d226:	2202      	movs	r2, #2
   1d228:	4631      	mov	r1, r6
   1d22a:	4620      	mov	r0, r4
   1d22c:	f7ff feca 	bl	1cfc4 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1d230:	2202      	movs	r2, #2
   1d232:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1d234:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1d236:	4629      	mov	r1, r5
   1d238:	4620      	mov	r0, r4
   1d23a:	f7ff fece 	bl	1cfda <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1d23e:	4633      	mov	r3, r6
   1d240:	2203      	movs	r2, #3
   1d242:	4629      	mov	r1, r5
   1d244:	4620      	mov	r0, r4
   1d246:	f7ff fec8 	bl	1cfda <chunk_set>
   1d24a:	2203      	movs	r2, #3
   1d24c:	4639      	mov	r1, r7
   1d24e:	462b      	mov	r3, r5
   1d250:	4620      	mov	r0, r4
   1d252:	f7ff fec2 	bl	1cfda <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1d256:	2202      	movs	r2, #2
   1d258:	4631      	mov	r1, r6
   1d25a:	e7df      	b.n	1d21c <free_list_add+0x46>
   1d25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d260 <free_chunk>:
{
   1d260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d262:	460c      	mov	r4, r1
   1d264:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1d266:	f7ff fec3 	bl	1cff0 <chunk_size>
   1d26a:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1d26c:	2201      	movs	r2, #1
   1d26e:	4631      	mov	r1, r6
   1d270:	4628      	mov	r0, r5
   1d272:	f7ff fea7 	bl	1cfc4 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1d276:	07c3      	lsls	r3, r0, #31
   1d278:	d40c      	bmi.n	1d294 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1d27a:	4631      	mov	r1, r6
   1d27c:	4628      	mov	r0, r5
   1d27e:	f7ff ff5a 	bl	1d136 <free_list_remove>
	return c + chunk_size(h, c);
   1d282:	4621      	mov	r1, r4
   1d284:	4628      	mov	r0, r5
   1d286:	f7ff feb3 	bl	1cff0 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1d28a:	4621      	mov	r1, r4
   1d28c:	1822      	adds	r2, r4, r0
   1d28e:	4628      	mov	r0, r5
   1d290:	f7ff fedd 	bl	1d04e <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1d294:	2200      	movs	r2, #0
   1d296:	4621      	mov	r1, r4
   1d298:	4628      	mov	r0, r5
   1d29a:	f7ff fe93 	bl	1cfc4 <chunk_field>
   1d29e:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1d2a0:	2201      	movs	r2, #1
   1d2a2:	4639      	mov	r1, r7
   1d2a4:	4628      	mov	r0, r5
   1d2a6:	f7ff fe8d 	bl	1cfc4 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1d2aa:	f010 0601 	ands.w	r6, r0, #1
   1d2ae:	d113      	bne.n	1d2d8 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1d2b0:	4639      	mov	r1, r7
   1d2b2:	4628      	mov	r0, r5
   1d2b4:	f7ff ff3f 	bl	1d136 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1d2b8:	4621      	mov	r1, r4
   1d2ba:	4632      	mov	r2, r6
   1d2bc:	4628      	mov	r0, r5
   1d2be:	f7ff fe81 	bl	1cfc4 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1d2c2:	4622      	mov	r2, r4
   1d2c4:	1a21      	subs	r1, r4, r0
   1d2c6:	4628      	mov	r0, r5
   1d2c8:	f7ff fec1 	bl	1d04e <merge_chunks>
   1d2cc:	4621      	mov	r1, r4
   1d2ce:	4632      	mov	r2, r6
   1d2d0:	4628      	mov	r0, r5
   1d2d2:	f7ff fe77 	bl	1cfc4 <chunk_field>
   1d2d6:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1d2d8:	4621      	mov	r1, r4
   1d2da:	4628      	mov	r0, r5
}
   1d2dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1d2e0:	f7ff bf79 	b.w	1d1d6 <free_list_add>

0001d2e4 <sys_heap_free>:
{
   1d2e4:	b510      	push	{r4, lr}
	if (mem == NULL) {
   1d2e6:	b191      	cbz	r1, 1d30e <sys_heap_free+0x2a>
	struct z_heap *h = heap->heap;
   1d2e8:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1d2ea:	6883      	ldr	r3, [r0, #8]
   1d2ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d2f0:	bf2c      	ite	cs
   1d2f2:	2408      	movcs	r4, #8
   1d2f4:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1d2f6:	1b0c      	subs	r4, r1, r4
   1d2f8:	1a24      	subs	r4, r4, r0
   1d2fa:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   1d2fc:	4621      	mov	r1, r4
   1d2fe:	2200      	movs	r2, #0
   1d300:	f7ff fe7c 	bl	1cffc <set_chunk_used>
	free_chunk(h, c);
   1d304:	4621      	mov	r1, r4
}
   1d306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   1d30a:	f7ff bfa9 	b.w	1d260 <free_chunk>
}
   1d30e:	bd10      	pop	{r4, pc}

0001d310 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1d310:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1d312:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1d314:	b909      	cbnz	r1, 1d31a <sys_heap_alloc+0xa>
		return NULL;
   1d316:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1d318:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1d31a:	68ab      	ldr	r3, [r5, #8]
   1d31c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1d320:	d9f9      	bls.n	1d316 <sys_heap_alloc+0x6>
   1d322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d326:	bf2c      	ite	cs
   1d328:	2208      	movcs	r2, #8
   1d32a:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1d32c:	1dcc      	adds	r4, r1, #7
   1d32e:	4414      	add	r4, r2
   1d330:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1d332:	4621      	mov	r1, r4
   1d334:	4628      	mov	r0, r5
   1d336:	f7ff ff15 	bl	1d164 <alloc_chunk>
	if (c == 0U) {
   1d33a:	4606      	mov	r6, r0
   1d33c:	2800      	cmp	r0, #0
   1d33e:	d0ea      	beq.n	1d316 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1d340:	4601      	mov	r1, r0
   1d342:	4628      	mov	r0, r5
   1d344:	f7ff fe54 	bl	1cff0 <chunk_size>
   1d348:	42a0      	cmp	r0, r4
   1d34a:	d909      	bls.n	1d360 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   1d34c:	4434      	add	r4, r6
   1d34e:	4631      	mov	r1, r6
   1d350:	4628      	mov	r0, r5
   1d352:	4622      	mov	r2, r4
   1d354:	f7ff fe99 	bl	1d08a <split_chunks>
		free_list_add(h, c + chunk_sz);
   1d358:	4621      	mov	r1, r4
   1d35a:	4628      	mov	r0, r5
   1d35c:	f7ff ff3b 	bl	1d1d6 <free_list_add>
	set_chunk_used(h, c, true);
   1d360:	4628      	mov	r0, r5
   1d362:	2201      	movs	r2, #1
   1d364:	4631      	mov	r1, r6
   1d366:	f7ff fe49 	bl	1cffc <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1d36a:	68ab      	ldr	r3, [r5, #8]
   1d36c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d370:	bf2c      	ite	cs
   1d372:	2008      	movcs	r0, #8
   1d374:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1d376:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1d37a:	4428      	add	r0, r5
	return chunk_mem(h, c);
   1d37c:	e7cc      	b.n	1d318 <sys_heap_alloc+0x8>

0001d37e <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1d37e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   1d382:	6806      	ldr	r6, [r0, #0]
{
   1d384:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1d386:	424a      	negs	r2, r1
   1d388:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   1d38c:	ea31 0202 	bics.w	r2, r1, r2
   1d390:	68b5      	ldr	r5, [r6, #8]
{
   1d392:	460b      	mov	r3, r1
	if (align != rew) {
   1d394:	d00f      	beq.n	1d3b6 <sys_heap_aligned_alloc+0x38>
   1d396:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1d39a:	bf34      	ite	cc
   1d39c:	2104      	movcc	r1, #4
   1d39e:	2108      	movcs	r1, #8
   1d3a0:	42b9      	cmp	r1, r7
   1d3a2:	460a      	mov	r2, r1
   1d3a4:	46b9      	mov	r9, r7
   1d3a6:	bf28      	it	cs
   1d3a8:	463a      	movcs	r2, r7
		align -= rew;
   1d3aa:	1bdf      	subs	r7, r3, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1d3ac:	b994      	cbnz	r4, 1d3d4 <sys_heap_aligned_alloc+0x56>
		return NULL;
   1d3ae:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   1d3b0:	4628      	mov	r0, r5
   1d3b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d3b6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1d3ba:	bf34      	ite	cc
   1d3bc:	2204      	movcc	r2, #4
   1d3be:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   1d3c0:	4291      	cmp	r1, r2
   1d3c2:	d804      	bhi.n	1d3ce <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   1d3c4:	4621      	mov	r1, r4
}
   1d3c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1d3ca:	f7ff bfa1 	b.w	1d310 <sys_heap_alloc>
		rew = 0;
   1d3ce:	f04f 0900 	mov.w	r9, #0
   1d3d2:	e7eb      	b.n	1d3ac <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1d3d4:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   1d3d8:	d9e9      	bls.n	1d3ae <sys_heap_aligned_alloc+0x30>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   1d3da:	1de1      	adds	r1, r4, #7
   1d3dc:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1d3e0:	4439      	add	r1, r7
   1d3e2:	bf2c      	ite	cs
   1d3e4:	2308      	movcs	r3, #8
   1d3e6:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1d3e8:	1a89      	subs	r1, r1, r2
   1d3ea:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1d3ec:	08c9      	lsrs	r1, r1, #3
   1d3ee:	4630      	mov	r0, r6
   1d3f0:	f7ff feb8 	bl	1d164 <alloc_chunk>
	if (c0 == 0) {
   1d3f4:	4680      	mov	r8, r0
   1d3f6:	2800      	cmp	r0, #0
   1d3f8:	d0d9      	beq.n	1d3ae <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   1d3fa:	68b3      	ldr	r3, [r6, #8]
   1d3fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d400:	bf2c      	ite	cs
   1d402:	2308      	movcs	r3, #8
   1d404:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1d406:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   1d40a:	441d      	add	r5, r3
   1d40c:	1e7a      	subs	r2, r7, #1
   1d40e:	4435      	add	r5, r6
   1d410:	427f      	negs	r7, r7
   1d412:	4415      	add	r5, r2
   1d414:	403d      	ands	r5, r7
   1d416:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1d41a:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1d41c:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1d41e:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1d420:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1d422:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1d426:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1d428:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1d42c:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1d430:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1d434:	d208      	bcs.n	1d448 <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   1d436:	4601      	mov	r1, r0
   1d438:	463a      	mov	r2, r7
   1d43a:	4630      	mov	r0, r6
   1d43c:	f7ff fe25 	bl	1d08a <split_chunks>
		free_list_add(h, c0);
   1d440:	4641      	mov	r1, r8
   1d442:	4630      	mov	r0, r6
   1d444:	f7ff fec7 	bl	1d1d6 <free_list_add>
	return c + chunk_size(h, c);
   1d448:	4639      	mov	r1, r7
   1d44a:	4630      	mov	r0, r6
   1d44c:	f7ff fdd0 	bl	1cff0 <chunk_size>
   1d450:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1d452:	4284      	cmp	r4, r0
   1d454:	d208      	bcs.n	1d468 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   1d456:	4639      	mov	r1, r7
   1d458:	4630      	mov	r0, r6
   1d45a:	4622      	mov	r2, r4
   1d45c:	f7ff fe15 	bl	1d08a <split_chunks>
		free_list_add(h, c_end);
   1d460:	4621      	mov	r1, r4
   1d462:	4630      	mov	r0, r6
   1d464:	f7ff feb7 	bl	1d1d6 <free_list_add>
	set_chunk_used(h, c, true);
   1d468:	2201      	movs	r2, #1
   1d46a:	4639      	mov	r1, r7
   1d46c:	4630      	mov	r0, r6
   1d46e:	f7ff fdc5 	bl	1cffc <set_chunk_used>
	return mem;
   1d472:	e79d      	b.n	1d3b0 <sys_heap_aligned_alloc+0x32>

0001d474 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1d474:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1d478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d47a:	bf2c      	ite	cs
   1d47c:	2508      	movcs	r5, #8
   1d47e:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1d480:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1d482:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1d484:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1d486:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1d48a:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1d48e:	1b2d      	subs	r5, r5, r4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1d490:	2300      	movs	r3, #0
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1d492:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
   1d494:	6004      	str	r4, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1d496:	4629      	mov	r1, r5
	h->end_chunk = heap_sz;
   1d498:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1d49a:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1d49c:	4620      	mov	r0, r4
   1d49e:	f7ff fdc9 	bl	1d034 <bucket_idx>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1d4a2:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1d4a4:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1d4a6:	1c41      	adds	r1, r0, #1
   1d4a8:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1d4aa:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   1d4ae:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1d4b0:	428b      	cmp	r3, r1
   1d4b2:	db2f      	blt.n	1d514 <sys_heap_init+0xa0>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1d4b4:	4632      	mov	r2, r6
   1d4b6:	4620      	mov	r0, r4
   1d4b8:	2100      	movs	r1, #0
   1d4ba:	f7ff fdb7 	bl	1d02c <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1d4be:	2300      	movs	r3, #0
   1d4c0:	461a      	mov	r2, r3
   1d4c2:	4619      	mov	r1, r3
   1d4c4:	4620      	mov	r0, r4
   1d4c6:	f7ff fd88 	bl	1cfda <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1d4ca:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1d4cc:	4620      	mov	r0, r4
   1d4ce:	2201      	movs	r2, #1
   1d4d0:	2100      	movs	r1, #0
   1d4d2:	f7ff fd93 	bl	1cffc <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1d4d6:	463a      	mov	r2, r7
   1d4d8:	4631      	mov	r1, r6
   1d4da:	f7ff fda7 	bl	1d02c <set_chunk_size>
   1d4de:	4633      	mov	r3, r6
   1d4e0:	4631      	mov	r1, r6
   1d4e2:	4620      	mov	r0, r4
   1d4e4:	2200      	movs	r2, #0
   1d4e6:	f7ff fd78 	bl	1cfda <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   1d4ea:	4629      	mov	r1, r5
   1d4ec:	4620      	mov	r0, r4
   1d4ee:	2200      	movs	r2, #0
   1d4f0:	f7ff fd9c 	bl	1d02c <set_chunk_size>
   1d4f4:	463b      	mov	r3, r7
   1d4f6:	4629      	mov	r1, r5
   1d4f8:	4620      	mov	r0, r4
   1d4fa:	2200      	movs	r2, #0
   1d4fc:	f7ff fd6d 	bl	1cfda <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   1d500:	4629      	mov	r1, r5
   1d502:	4620      	mov	r0, r4
   1d504:	2201      	movs	r2, #1
   1d506:	f7ff fd79 	bl	1cffc <set_chunk_used>

	free_list_add(h, chunk0_size);
   1d50a:	4631      	mov	r1, r6
}
   1d50c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1d510:	f7ff be61 	b.w	1d1d6 <free_list_add>
		h->buckets[i].next = 0;
   1d514:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1d518:	3301      	adds	r3, #1
   1d51a:	e7c9      	b.n	1d4b0 <sys_heap_init+0x3c>

0001d51c <_ldiv5>:
{
   1d51c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
	uint32_t v_lo = *v;
   1d520:	e9d0 2400 	ldrd	r2, r4, [r0]
	__asm__ ("" : "+r" (m));
   1d524:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   1d528:	fba2 bc03 	umull	fp, ip, r2, r3
   1d52c:	eb1b 0603 	adds.w	r6, fp, r3
   1d530:	eb4c 0503 	adc.w	r5, ip, r3
	result >>= 32;
   1d534:	462f      	mov	r7, r5
	result += (uint64_t)v_hi * m;
   1d536:	fba4 4503 	umull	r4, r5, r4, r3
   1d53a:	eb1b 0204 	adds.w	r2, fp, r4
	result >>= 32;
   1d53e:	f04f 0600 	mov.w	r6, #0
	result += (uint64_t)v_hi * m;
   1d542:	eb4c 0105 	adc.w	r1, ip, r5
   1d546:	19d2      	adds	r2, r2, r7
   1d548:	eb46 0101 	adc.w	r1, r6, r1
	result += (uint64_t)v_hi * m;
   1d54c:	1863      	adds	r3, r4, r1
	result >>= 32;
   1d54e:	4632      	mov	r2, r6
	result += (uint64_t)v_hi * m;
   1d550:	eb45 0202 	adc.w	r2, r5, r2
	*v = result;
   1d554:	e9c0 3200 	strd	r3, r2, [r0]
}
   1d558:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

0001d55c <_get_digit>:
	if (*digit_count > 0) {
   1d55c:	680b      	ldr	r3, [r1, #0]
   1d55e:	2b00      	cmp	r3, #0
{
   1d560:	b570      	push	{r4, r5, r6, lr}
   1d562:	4604      	mov	r4, r0
	if (*digit_count > 0) {
   1d564:	dd0f      	ble.n	1d586 <_get_digit+0x2a>
		*fr *= 10U;
   1d566:	6822      	ldr	r2, [r4, #0]
   1d568:	6840      	ldr	r0, [r0, #4]
		--*digit_count;
   1d56a:	3b01      	subs	r3, #1
   1d56c:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   1d56e:	210a      	movs	r1, #10
   1d570:	fba2 5601 	umull	r5, r6, r2, r1
   1d574:	fb01 6600 	mla	r6, r1, r0, r6
		*fr &= (BIT64(60) - 1U);
   1d578:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   1d57c:	e9c4 5300 	strd	r5, r3, [r4]
		rval = ((*fr >> 60) & 0xF) + '0';
   1d580:	0f30      	lsrs	r0, r6, #28
   1d582:	3030      	adds	r0, #48	; 0x30
}
   1d584:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   1d586:	2030      	movs	r0, #48	; 0x30
   1d588:	e7fc      	b.n	1d584 <_get_digit+0x28>

0001d58a <encode_uint>:
{
   1d58a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d58e:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   1d590:	78d3      	ldrb	r3, [r2, #3]
{
   1d592:	4614      	mov	r4, r2
	switch (specifier) {
   1d594:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1d596:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   1d59a:	4606      	mov	r6, r0
   1d59c:	460f      	mov	r7, r1
   1d59e:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   1d5a0:	d02d      	beq.n	1d5fe <encode_uint+0x74>
   1d5a2:	d828      	bhi.n	1d5f6 <encode_uint+0x6c>
		return 16;
   1d5a4:	2b58      	cmp	r3, #88	; 0x58
   1d5a6:	bf14      	ite	ne
   1d5a8:	250a      	movne	r5, #10
   1d5aa:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   1d5ac:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   1d5b0:	46aa      	mov	sl, r5
   1d5b2:	f04f 0b00 	mov.w	fp, #0
   1d5b6:	4652      	mov	r2, sl
   1d5b8:	465b      	mov	r3, fp
   1d5ba:	4630      	mov	r0, r6
   1d5bc:	4639      	mov	r1, r7
   1d5be:	f7e3 fc3b 	bl	e38 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1d5c2:	2a09      	cmp	r2, #9
   1d5c4:	b2d3      	uxtb	r3, r2
   1d5c6:	d81f      	bhi.n	1d608 <encode_uint+0x7e>
   1d5c8:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1d5ca:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1d5cc:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   1d5ce:	bf08      	it	eq
   1d5d0:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1d5d2:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   1d5d6:	d301      	bcc.n	1d5dc <encode_uint+0x52>
   1d5d8:	45c8      	cmp	r8, r9
   1d5da:	d812      	bhi.n	1d602 <encode_uint+0x78>
	if (conv->flag_hash) {
   1d5dc:	7823      	ldrb	r3, [r4, #0]
   1d5de:	069b      	lsls	r3, r3, #26
   1d5e0:	d505      	bpl.n	1d5ee <encode_uint+0x64>
		if (radix == 8) {
   1d5e2:	2d08      	cmp	r5, #8
   1d5e4:	d116      	bne.n	1d614 <encode_uint+0x8a>
			conv->altform_0 = true;
   1d5e6:	78a3      	ldrb	r3, [r4, #2]
   1d5e8:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1d5ec:	70a3      	strb	r3, [r4, #2]
}
   1d5ee:	4640      	mov	r0, r8
   1d5f0:	b003      	add	sp, #12
   1d5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1d5f6:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1d5fa:	2b70      	cmp	r3, #112	; 0x70
   1d5fc:	e7d3      	b.n	1d5a6 <encode_uint+0x1c>
	switch (specifier) {
   1d5fe:	2508      	movs	r5, #8
   1d600:	e7d4      	b.n	1d5ac <encode_uint+0x22>
		value /= radix;
   1d602:	4606      	mov	r6, r0
   1d604:	460f      	mov	r7, r1
   1d606:	e7d6      	b.n	1d5b6 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1d608:	9a01      	ldr	r2, [sp, #4]
   1d60a:	2a19      	cmp	r2, #25
   1d60c:	bf94      	ite	ls
   1d60e:	3337      	addls	r3, #55	; 0x37
   1d610:	3357      	addhi	r3, #87	; 0x57
   1d612:	e7da      	b.n	1d5ca <encode_uint+0x40>
		} else if (radix == 16) {
   1d614:	2d10      	cmp	r5, #16
   1d616:	d1ea      	bne.n	1d5ee <encode_uint+0x64>
			conv->altform_0c = true;
   1d618:	78a3      	ldrb	r3, [r4, #2]
   1d61a:	f043 0310 	orr.w	r3, r3, #16
   1d61e:	e7e5      	b.n	1d5ec <encode_uint+0x62>

0001d620 <outs>:
{
   1d620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d624:	4607      	mov	r7, r0
   1d626:	4688      	mov	r8, r1
   1d628:	4615      	mov	r5, r2
   1d62a:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1d62c:	4614      	mov	r4, r2
   1d62e:	42b4      	cmp	r4, r6
   1d630:	eba4 0005 	sub.w	r0, r4, r5
   1d634:	d302      	bcc.n	1d63c <outs+0x1c>
   1d636:	b93e      	cbnz	r6, 1d648 <outs+0x28>
   1d638:	7823      	ldrb	r3, [r4, #0]
   1d63a:	b12b      	cbz	r3, 1d648 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1d63c:	f814 0b01 	ldrb.w	r0, [r4], #1
   1d640:	4641      	mov	r1, r8
   1d642:	47b8      	blx	r7
		if (rc < 0) {
   1d644:	2800      	cmp	r0, #0
   1d646:	daf2      	bge.n	1d62e <outs+0xe>
}
   1d648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d64c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1d64c:	4770      	bx	lr

0001d64e <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   1d64e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1d652:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1d656:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1d658:	4640      	mov	r0, r8
{
   1d65a:	461f      	mov	r7, r3
   1d65c:	460c      	mov	r4, r1
   1d65e:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1d660:	f000 fab4 	bl	1dbcc <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1d664:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1d668:	9300      	str	r3, [sp, #0]
   1d66a:	b280      	uxth	r0, r0
   1d66c:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1d670:	463b      	mov	r3, r7
   1d672:	4632      	mov	r2, r6
   1d674:	4621      	mov	r1, r4
   1d676:	4628      	mov	r0, r5
   1d678:	f002 f8cd 	bl	1f816 <bt_gatt_attr_read>
}
   1d67c:	b004      	add	sp, #16
   1d67e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d682 <blvl_ccc_cfg_changed>:
}
   1d682:	4770      	bx	lr

0001d684 <bas_init>:
static int bas_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return 0;
}
   1d684:	2000      	movs	r0, #0
   1d686:	4770      	bx	lr

0001d688 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1d688:	2200      	movs	r2, #0
   1d68a:	e9c0 2200 	strd	r2, r2, [r0]
   1d68e:	6082      	str	r2, [r0, #8]
}
   1d690:	4770      	bx	lr

0001d692 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1d692:	6902      	ldr	r2, [r0, #16]
   1d694:	b2cb      	uxtb	r3, r1
   1d696:	210c      	movs	r1, #12
   1d698:	fb03 2101 	mla	r1, r3, r1, r2
   1d69c:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   1d69e:	f000 0007 	and.w	r0, r0, #7
   1d6a2:	4770      	bx	lr

0001d6a4 <set_off_state>:
	__asm__ volatile(
   1d6a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d6a8:	f3ef 8211 	mrs	r2, BASEPRI
   1d6ac:	f383 8811 	msr	BASEPRI, r3
   1d6b0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d6b4:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1d6b6:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1d6ba:	d001      	beq.n	1d6c0 <set_off_state+0x1c>
   1d6bc:	428b      	cmp	r3, r1
   1d6be:	d107      	bne.n	1d6d0 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1d6c0:	2301      	movs	r3, #1
   1d6c2:	6003      	str	r3, [r0, #0]
	int err = 0;
   1d6c4:	2000      	movs	r0, #0
	__asm__ volatile(
   1d6c6:	f382 8811 	msr	BASEPRI, r2
   1d6ca:	f3bf 8f6f 	isb	sy
}
   1d6ce:	4770      	bx	lr
		err = -EPERM;
   1d6d0:	f04f 30ff 	mov.w	r0, #4294967295
   1d6d4:	e7f7      	b.n	1d6c6 <set_off_state+0x22>

0001d6d6 <set_starting_state>:
{
   1d6d6:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d6d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d6dc:	f3ef 8211 	mrs	r2, BASEPRI
   1d6e0:	f383 8811 	msr	BASEPRI, r3
   1d6e4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d6e8:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1d6ea:	f003 0407 	and.w	r4, r3, #7
   1d6ee:	2c01      	cmp	r4, #1
   1d6f0:	d106      	bne.n	1d700 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1d6f2:	6001      	str	r1, [r0, #0]
	int err = 0;
   1d6f4:	2000      	movs	r0, #0
	__asm__ volatile(
   1d6f6:	f382 8811 	msr	BASEPRI, r2
   1d6fa:	f3bf 8f6f 	isb	sy
}
   1d6fe:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1d700:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1d704:	428b      	cmp	r3, r1
		err = -EALREADY;
   1d706:	bf14      	ite	ne
   1d708:	f04f 30ff 	movne.w	r0, #4294967295
   1d70c:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   1d710:	e7f1      	b.n	1d6f6 <set_starting_state+0x20>

0001d712 <set_on_state>:
	__asm__ volatile(
   1d712:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d716:	f3ef 8211 	mrs	r2, BASEPRI
   1d71a:	f383 8811 	msr	BASEPRI, r3
   1d71e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1d722:	6803      	ldr	r3, [r0, #0]
   1d724:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d728:	f043 0302 	orr.w	r3, r3, #2
   1d72c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1d72e:	f382 8811 	msr	BASEPRI, r2
   1d732:	f3bf 8f6f 	isb	sy
}
   1d736:	4770      	bx	lr

0001d738 <onoff_started_callback>:
	return &data->mgr[type];
   1d738:	6900      	ldr	r0, [r0, #16]
{
   1d73a:	b410      	push	{r4}
	return &data->mgr[type];
   1d73c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1d73e:	241c      	movs	r4, #28
   1d740:	fb03 0004 	mla	r0, r3, r4, r0
   1d744:	2100      	movs	r1, #0
}
   1d746:	bc10      	pop	{r4}
	notify(mgr, 0);
   1d748:	4710      	bx	r2

0001d74a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1d74a:	2000      	movs	r0, #0
   1d74c:	f7fa ba6e 	b.w	17c2c <nrfx_clock_start>

0001d750 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1d750:	2000      	movs	r0, #0
   1d752:	f002 bb9f 	b.w	1fe94 <nrfx_clock_stop>

0001d756 <blocking_start_callback>:
{
   1d756:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1d758:	f7fb baec 	b.w	18d34 <z_impl_k_sem_give>

0001d75c <api_stop>:
{
   1d75c:	b538      	push	{r3, r4, r5, lr}
   1d75e:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
   1d760:	230c      	movs	r3, #12
{
   1d762:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   1d764:	4363      	muls	r3, r4
   1d766:	6900      	ldr	r0, [r0, #16]
   1d768:	3340      	adds	r3, #64	; 0x40
   1d76a:	2180      	movs	r1, #128	; 0x80
   1d76c:	4418      	add	r0, r3
   1d76e:	f7ff ff99 	bl	1d6a4 <set_off_state>
	if (err < 0) {
   1d772:	2800      	cmp	r0, #0
   1d774:	db05      	blt.n	1d782 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   1d776:	6869      	ldr	r1, [r5, #4]
   1d778:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   1d77c:	6863      	ldr	r3, [r4, #4]
   1d77e:	4798      	blx	r3
	return 0;
   1d780:	2000      	movs	r0, #0
}
   1d782:	bd38      	pop	{r3, r4, r5, pc}

0001d784 <api_start>:
{
   1d784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d788:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
   1d78a:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1d78c:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   1d78e:	436f      	muls	r7, r5
{
   1d790:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1d792:	f107 0040 	add.w	r0, r7, #64	; 0x40
   1d796:	2180      	movs	r1, #128	; 0x80
   1d798:	4420      	add	r0, r4
{
   1d79a:	4690      	mov	r8, r2
   1d79c:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
   1d79e:	f7ff ff9a 	bl	1d6d6 <set_starting_state>
	if (err < 0) {
   1d7a2:	2800      	cmp	r0, #0
   1d7a4:	db07      	blt.n	1d7b6 <api_start+0x32>
	subdata->cb = cb;
   1d7a6:	443c      	add	r4, r7
	subdata->user_data = user_data;
   1d7a8:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1d7ac:	6873      	ldr	r3, [r6, #4]
   1d7ae:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
   1d7b2:	4798      	blx	r3
	return 0;
   1d7b4:	2000      	movs	r0, #0
}
   1d7b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001d7ba <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1d7ba:	4770      	bx	lr

0001d7bc <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1d7bc:	4770      	bx	lr

0001d7be <sys_clock_disable>:
   1d7be:	4770      	bx	lr

0001d7c0 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1d7c0:	b538      	push	{r3, r4, r5, lr}
   1d7c2:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1d7c4:	42ab      	cmp	r3, r5
{
   1d7c6:	4611      	mov	r1, r2
   1d7c8:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1d7ca:	d804      	bhi.n	1d7d6 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1d7cc:	461a      	mov	r2, r3
   1d7ce:	f000 fa40 	bl	1dc52 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1d7d2:	4620      	mov	r0, r4
   1d7d4:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1d7d6:	2400      	movs	r4, #0
   1d7d8:	e7fb      	b.n	1d7d2 <_copy+0x12>

0001d7da <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1d7da:	f000 ba45 	b.w	1dc68 <memset>

0001d7de <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1d7de:	09c3      	lsrs	r3, r0, #7
   1d7e0:	005a      	lsls	r2, r3, #1
   1d7e2:	4413      	add	r3, r2
   1d7e4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1d7e8:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1d7ec:	b2c0      	uxtb	r0, r0
   1d7ee:	4770      	bx	lr

0001d7f0 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1d7f0:	78cb      	ldrb	r3, [r1, #3]
   1d7f2:	7802      	ldrb	r2, [r0, #0]
   1d7f4:	4053      	eors	r3, r2
   1d7f6:	7003      	strb	r3, [r0, #0]
   1d7f8:	884b      	ldrh	r3, [r1, #2]
   1d7fa:	7842      	ldrb	r2, [r0, #1]
   1d7fc:	4053      	eors	r3, r2
   1d7fe:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1d800:	680a      	ldr	r2, [r1, #0]
   1d802:	7883      	ldrb	r3, [r0, #2]
   1d804:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d808:	7083      	strb	r3, [r0, #2]
   1d80a:	680a      	ldr	r2, [r1, #0]
   1d80c:	78c3      	ldrb	r3, [r0, #3]
   1d80e:	4053      	eors	r3, r2
   1d810:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1d812:	79cb      	ldrb	r3, [r1, #7]
   1d814:	7902      	ldrb	r2, [r0, #4]
   1d816:	4053      	eors	r3, r2
   1d818:	7103      	strb	r3, [r0, #4]
   1d81a:	88cb      	ldrh	r3, [r1, #6]
   1d81c:	7942      	ldrb	r2, [r0, #5]
   1d81e:	4053      	eors	r3, r2
   1d820:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1d822:	684a      	ldr	r2, [r1, #4]
   1d824:	7983      	ldrb	r3, [r0, #6]
   1d826:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d82a:	7183      	strb	r3, [r0, #6]
   1d82c:	684a      	ldr	r2, [r1, #4]
   1d82e:	79c3      	ldrb	r3, [r0, #7]
   1d830:	4053      	eors	r3, r2
   1d832:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1d834:	7acb      	ldrb	r3, [r1, #11]
   1d836:	7a02      	ldrb	r2, [r0, #8]
   1d838:	4053      	eors	r3, r2
   1d83a:	7203      	strb	r3, [r0, #8]
   1d83c:	7a42      	ldrb	r2, [r0, #9]
   1d83e:	894b      	ldrh	r3, [r1, #10]
   1d840:	4053      	eors	r3, r2
   1d842:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1d844:	688a      	ldr	r2, [r1, #8]
   1d846:	7a83      	ldrb	r3, [r0, #10]
   1d848:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d84c:	7283      	strb	r3, [r0, #10]
   1d84e:	688a      	ldr	r2, [r1, #8]
   1d850:	7ac3      	ldrb	r3, [r0, #11]
   1d852:	4053      	eors	r3, r2
   1d854:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1d856:	7bcb      	ldrb	r3, [r1, #15]
   1d858:	7b02      	ldrb	r2, [r0, #12]
   1d85a:	4053      	eors	r3, r2
   1d85c:	7303      	strb	r3, [r0, #12]
   1d85e:	89cb      	ldrh	r3, [r1, #14]
   1d860:	7b42      	ldrb	r2, [r0, #13]
   1d862:	4053      	eors	r3, r2
   1d864:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1d866:	68ca      	ldr	r2, [r1, #12]
   1d868:	7b83      	ldrb	r3, [r0, #14]
   1d86a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d86e:	7383      	strb	r3, [r0, #14]
   1d870:	68ca      	ldr	r2, [r1, #12]
   1d872:	7bc3      	ldrb	r3, [r0, #15]
   1d874:	4053      	eors	r3, r2
   1d876:	73c3      	strb	r3, [r0, #15]
}
   1d878:	4770      	bx	lr

0001d87a <shift_rows>:
{
   1d87a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1d87c:	7802      	ldrb	r2, [r0, #0]
   1d87e:	f88d 2000 	strb.w	r2, [sp]
   1d882:	7942      	ldrb	r2, [r0, #5]
   1d884:	f88d 2001 	strb.w	r2, [sp, #1]
   1d888:	7a82      	ldrb	r2, [r0, #10]
   1d88a:	f88d 2002 	strb.w	r2, [sp, #2]
   1d88e:	7bc2      	ldrb	r2, [r0, #15]
   1d890:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1d894:	7902      	ldrb	r2, [r0, #4]
   1d896:	f88d 2004 	strb.w	r2, [sp, #4]
   1d89a:	7a42      	ldrb	r2, [r0, #9]
   1d89c:	f88d 2005 	strb.w	r2, [sp, #5]
   1d8a0:	7b82      	ldrb	r2, [r0, #14]
   1d8a2:	f88d 2006 	strb.w	r2, [sp, #6]
   1d8a6:	78c2      	ldrb	r2, [r0, #3]
   1d8a8:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1d8ac:	7a02      	ldrb	r2, [r0, #8]
   1d8ae:	f88d 2008 	strb.w	r2, [sp, #8]
   1d8b2:	7b42      	ldrb	r2, [r0, #13]
   1d8b4:	f88d 2009 	strb.w	r2, [sp, #9]
   1d8b8:	7882      	ldrb	r2, [r0, #2]
   1d8ba:	f88d 200a 	strb.w	r2, [sp, #10]
   1d8be:	79c2      	ldrb	r2, [r0, #7]
   1d8c0:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1d8c4:	7b02      	ldrb	r2, [r0, #12]
   1d8c6:	f88d 200c 	strb.w	r2, [sp, #12]
   1d8ca:	7842      	ldrb	r2, [r0, #1]
   1d8cc:	7ac3      	ldrb	r3, [r0, #11]
   1d8ce:	f88d 200d 	strb.w	r2, [sp, #13]
   1d8d2:	7982      	ldrb	r2, [r0, #6]
   1d8d4:	f88d 200e 	strb.w	r2, [sp, #14]
   1d8d8:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1d8dc:	2310      	movs	r3, #16
   1d8de:	466a      	mov	r2, sp
   1d8e0:	4619      	mov	r1, r3
   1d8e2:	f7ff ff6d 	bl	1d7c0 <_copy>
}
   1d8e6:	b005      	add	sp, #20
   1d8e8:	f85d fb04 	ldr.w	pc, [sp], #4

0001d8ec <mult_row_column>:
{
   1d8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d8ee:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1d8f0:	7808      	ldrb	r0, [r1, #0]
{
   1d8f2:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1d8f4:	f7ff ff73 	bl	1d7de <_double_byte>
   1d8f8:	4605      	mov	r5, r0
   1d8fa:	7860      	ldrb	r0, [r4, #1]
   1d8fc:	f7ff ff6f 	bl	1d7de <_double_byte>
   1d900:	78a2      	ldrb	r2, [r4, #2]
   1d902:	7863      	ldrb	r3, [r4, #1]
   1d904:	4053      	eors	r3, r2
   1d906:	78e2      	ldrb	r2, [r4, #3]
   1d908:	4053      	eors	r3, r2
   1d90a:	405d      	eors	r5, r3
   1d90c:	4045      	eors	r5, r0
   1d90e:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1d910:	7860      	ldrb	r0, [r4, #1]
   1d912:	7827      	ldrb	r7, [r4, #0]
   1d914:	f7ff ff63 	bl	1d7de <_double_byte>
   1d918:	4605      	mov	r5, r0
   1d91a:	78a0      	ldrb	r0, [r4, #2]
   1d91c:	f7ff ff5f 	bl	1d7de <_double_byte>
   1d920:	78a3      	ldrb	r3, [r4, #2]
   1d922:	405f      	eors	r7, r3
   1d924:	78e3      	ldrb	r3, [r4, #3]
   1d926:	405f      	eors	r7, r3
   1d928:	407d      	eors	r5, r7
   1d92a:	4045      	eors	r5, r0
   1d92c:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1d92e:	78a0      	ldrb	r0, [r4, #2]
   1d930:	7865      	ldrb	r5, [r4, #1]
   1d932:	7827      	ldrb	r7, [r4, #0]
   1d934:	f7ff ff53 	bl	1d7de <_double_byte>
   1d938:	406f      	eors	r7, r5
   1d93a:	4605      	mov	r5, r0
   1d93c:	78e0      	ldrb	r0, [r4, #3]
   1d93e:	f7ff ff4e 	bl	1d7de <_double_byte>
   1d942:	78e3      	ldrb	r3, [r4, #3]
   1d944:	405f      	eors	r7, r3
   1d946:	407d      	eors	r5, r7
   1d948:	4045      	eors	r5, r0
   1d94a:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1d94c:	7820      	ldrb	r0, [r4, #0]
   1d94e:	f7ff ff46 	bl	1d7de <_double_byte>
   1d952:	7863      	ldrb	r3, [r4, #1]
   1d954:	7825      	ldrb	r5, [r4, #0]
   1d956:	405d      	eors	r5, r3
   1d958:	78a3      	ldrb	r3, [r4, #2]
   1d95a:	405d      	eors	r5, r3
   1d95c:	4045      	eors	r5, r0
   1d95e:	78e0      	ldrb	r0, [r4, #3]
   1d960:	f7ff ff3d 	bl	1d7de <_double_byte>
   1d964:	b2ed      	uxtb	r5, r5
   1d966:	4045      	eors	r5, r0
   1d968:	70f5      	strb	r5, [r6, #3]
}
   1d96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d96c <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1d96c:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d96e:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1d970:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d972:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1d976:	2b00      	cmp	r3, #0
   1d978:	bfb4      	ite	lt
   1d97a:	2387      	movlt	r3, #135	; 0x87
   1d97c:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1d97e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1d982:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1d986:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1d988:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1d98c:	d002      	beq.n	1d994 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1d98e:	7813      	ldrb	r3, [r2, #0]
   1d990:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1d992:	e7f4      	b.n	1d97e <gf_double+0x12>
	}
}
   1d994:	bd10      	pop	{r4, pc}

0001d996 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1d996:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1d998:	b120      	cbz	r0, 1d9a4 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1d99a:	2258      	movs	r2, #88	; 0x58
   1d99c:	2100      	movs	r1, #0
   1d99e:	f7ff ff1c 	bl	1d7da <_set>
   1d9a2:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1d9a4:	bd08      	pop	{r3, pc}

0001d9a6 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1d9a6:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1d9a8:	4604      	mov	r4, r0
   1d9aa:	b188      	cbz	r0, 1d9d0 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1d9ac:	2210      	movs	r2, #16
   1d9ae:	2100      	movs	r1, #0
   1d9b0:	f7ff ff13 	bl	1d7da <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1d9b4:	2210      	movs	r2, #16
   1d9b6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1d9ba:	2100      	movs	r1, #0
   1d9bc:	f7ff ff0d 	bl	1d7da <_set>
	s->leftover_offset = 0;
   1d9c0:	2300      	movs	r3, #0
   1d9c2:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1d9c4:	2200      	movs	r2, #0
   1d9c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d9ca:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1d9ce:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1d9d0:	bd10      	pop	{r4, pc}

0001d9d2 <tc_cmac_setup>:
{
   1d9d2:	b570      	push	{r4, r5, r6, lr}
   1d9d4:	460d      	mov	r5, r1
   1d9d6:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1d9d8:	4604      	mov	r4, r0
   1d9da:	b310      	cbz	r0, 1da22 <tc_cmac_setup+0x50>
   1d9dc:	b311      	cbz	r1, 1da24 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1d9de:	2258      	movs	r2, #88	; 0x58
   1d9e0:	2100      	movs	r1, #0
   1d9e2:	f7ff fefa 	bl	1d7da <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1d9e6:	4629      	mov	r1, r5
	s->sched = sched;
   1d9e8:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1d9ea:	4630      	mov	r0, r6
   1d9ec:	f7f4 fc16 	bl	1221c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1d9f0:	2210      	movs	r2, #16
   1d9f2:	2100      	movs	r1, #0
   1d9f4:	4620      	mov	r0, r4
   1d9f6:	f7ff fef0 	bl	1d7da <_set>
	gf_double (s->K1, s->iv);
   1d9fa:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d9fe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1da00:	4621      	mov	r1, r4
   1da02:	4620      	mov	r0, r4
   1da04:	f7f4 fc5c 	bl	122c0 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1da08:	4621      	mov	r1, r4
   1da0a:	4628      	mov	r0, r5
   1da0c:	f7ff ffae 	bl	1d96c <gf_double>
	gf_double (s->K2, s->K1);
   1da10:	4629      	mov	r1, r5
   1da12:	f104 0020 	add.w	r0, r4, #32
   1da16:	f7ff ffa9 	bl	1d96c <gf_double>
	tc_cmac_init(s);
   1da1a:	4620      	mov	r0, r4
   1da1c:	f7ff ffc3 	bl	1d9a6 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1da20:	2001      	movs	r0, #1
}
   1da22:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1da24:	4608      	mov	r0, r1
   1da26:	e7fc      	b.n	1da22 <tc_cmac_setup+0x50>

0001da28 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1da28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1da2c:	460d      	mov	r5, r1
   1da2e:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1da30:	4604      	mov	r4, r0
   1da32:	2800      	cmp	r0, #0
   1da34:	d062      	beq.n	1dafc <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1da36:	b912      	cbnz	r2, 1da3e <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1da38:	2001      	movs	r0, #1
}
   1da3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1da3e:	2900      	cmp	r1, #0
   1da40:	d05c      	beq.n	1dafc <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   1da42:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   1da46:	ea50 0301 	orrs.w	r3, r0, r1
   1da4a:	d057      	beq.n	1dafc <tc_cmac_update+0xd4>
	s->countdown--;
   1da4c:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   1da50:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   1da54:	f141 33ff 	adc.w	r3, r1, #4294967295
   1da58:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1da5c:	f1b8 0f00 	cmp.w	r8, #0
   1da60:	d02a      	beq.n	1dab8 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1da62:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   1da66:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1da6a:	42be      	cmp	r6, r7
   1da6c:	4420      	add	r0, r4
   1da6e:	d208      	bcs.n	1da82 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1da70:	462a      	mov	r2, r5
   1da72:	4633      	mov	r3, r6
   1da74:	4631      	mov	r1, r6
   1da76:	f7ff fea3 	bl	1d7c0 <_copy>
			s->leftover_offset += data_length;
   1da7a:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1da7c:	4432      	add	r2, r6
   1da7e:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1da80:	e7da      	b.n	1da38 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1da82:	463b      	mov	r3, r7
   1da84:	462a      	mov	r2, r5
   1da86:	4639      	mov	r1, r7
   1da88:	f7ff fe9a 	bl	1d7c0 <_copy>
		data_length -= remaining_space;
   1da8c:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1da8e:	2300      	movs	r3, #0
   1da90:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1da92:	4446      	add	r6, r8
		data += remaining_space;
   1da94:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1da96:	1e63      	subs	r3, r4, #1
   1da98:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1da9c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1daa0:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1daa4:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1daa6:	ea82 0200 	eor.w	r2, r2, r0
   1daaa:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1daac:	d1f6      	bne.n	1da9c <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1daae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1dab0:	4621      	mov	r1, r4
   1dab2:	4620      	mov	r0, r4
   1dab4:	f7f4 fc04 	bl	122c0 <tc_aes_encrypt>
   1dab8:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1dabc:	2e10      	cmp	r6, #16
   1dabe:	d80a      	bhi.n	1dad6 <tc_cmac_update+0xae>
	if (data_length > 0) {
   1dac0:	2e00      	cmp	r6, #0
   1dac2:	d0b9      	beq.n	1da38 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1dac4:	4633      	mov	r3, r6
   1dac6:	462a      	mov	r2, r5
   1dac8:	4631      	mov	r1, r6
   1daca:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1dace:	f7ff fe77 	bl	1d7c0 <_copy>
		s->leftover_offset = data_length;
   1dad2:	6466      	str	r6, [r4, #68]	; 0x44
   1dad4:	e7b0      	b.n	1da38 <tc_cmac_update+0x10>
   1dad6:	1e63      	subs	r3, r4, #1
   1dad8:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1dada:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1dade:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dae2:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1dae4:	ea82 0200 	eor.w	r2, r2, r0
   1dae8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1daea:	d1f6      	bne.n	1dada <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1daec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1daee:	4621      	mov	r1, r4
   1daf0:	4620      	mov	r0, r4
   1daf2:	f7f4 fbe5 	bl	122c0 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1daf6:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1daf8:	3e10      	subs	r6, #16
   1dafa:	e7df      	b.n	1dabc <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   1dafc:	2000      	movs	r0, #0
   1dafe:	e79c      	b.n	1da3a <tc_cmac_update+0x12>

0001db00 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1db00:	b570      	push	{r4, r5, r6, lr}
   1db02:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1db04:	4605      	mov	r5, r0
   1db06:	b1e8      	cbz	r0, 1db44 <tc_cmac_final+0x44>
   1db08:	b369      	cbz	r1, 1db66 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1db0a:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1db0c:	2a10      	cmp	r2, #16
   1db0e:	d11a      	bne.n	1db46 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1db10:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1db12:	1e63      	subs	r3, r4, #1
   1db14:	3901      	subs	r1, #1
   1db16:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1db1a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1db1e:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1db22:	4072      	eors	r2, r6
   1db24:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1db28:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1db2a:	ea82 0206 	eor.w	r2, r2, r6
   1db2e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1db30:	d1f3      	bne.n	1db1a <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1db32:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1db34:	4621      	mov	r1, r4
   1db36:	4628      	mov	r0, r5
   1db38:	f7f4 fbc2 	bl	122c0 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1db3c:	4620      	mov	r0, r4
   1db3e:	f7ff ff2a 	bl	1d996 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1db42:	2001      	movs	r0, #1
}
   1db44:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1db46:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1db4a:	2100      	movs	r1, #0
   1db4c:	f1c2 0210 	rsb	r2, r2, #16
   1db50:	4420      	add	r0, r4
   1db52:	f7ff fe42 	bl	1d7da <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1db56:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1db58:	4423      	add	r3, r4
   1db5a:	2280      	movs	r2, #128	; 0x80
   1db5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1db60:	f104 0120 	add.w	r1, r4, #32
   1db64:	e7d5      	b.n	1db12 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1db66:	4608      	mov	r0, r1
   1db68:	e7ec      	b.n	1db44 <tc_cmac_final+0x44>

0001db6a <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   1db6a:	2000      	movs	r0, #0
   1db6c:	f7f3 bffe 	b.w	11b6c <sys_reboot>

0001db70 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1db70:	2100      	movs	r1, #0
   1db72:	2001      	movs	r0, #1
   1db74:	f000 b800 	b.w	1db78 <z_arm_fatal_error>

0001db78 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1db78:	f002 ba49 	b.w	2000e <z_fatal_error>

0001db7c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1db7c:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1db7e:	6800      	ldr	r0, [r0, #0]
   1db80:	f002 ba45 	b.w	2000e <z_fatal_error>

0001db84 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1db84:	b508      	push	{r3, lr}
	handler();
   1db86:	f7f4 fde7 	bl	12758 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1db8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1db8e:	f7f4 bf3b 	b.w	12a08 <z_arm_exc_exit>

0001db92 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1db92:	3901      	subs	r1, #1
   1db94:	4603      	mov	r3, r0
   1db96:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1db9a:	b90a      	cbnz	r2, 1dba0 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1db9c:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1db9e:	4770      	bx	lr
		*d = *s;
   1dba0:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1dba4:	e7f7      	b.n	1db96 <strcpy+0x4>

0001dba6 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1dba6:	b570      	push	{r4, r5, r6, lr}
   1dba8:	3901      	subs	r1, #1
   1dbaa:	4605      	mov	r5, r0
   1dbac:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1dbae:	b142      	cbz	r2, 1dbc2 <strncpy+0x1c>
   1dbb0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1dbb4:	1e56      	subs	r6, r2, #1
   1dbb6:	b92b      	cbnz	r3, 1dbc4 <strncpy+0x1e>
   1dbb8:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1dbba:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1dbbe:	42a2      	cmp	r2, r4
   1dbc0:	d1fb      	bne.n	1dbba <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1dbc2:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1dbc4:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1dbc8:	4632      	mov	r2, r6
   1dbca:	e7ef      	b.n	1dbac <strncpy+0x6>

0001dbcc <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1dbcc:	4603      	mov	r3, r0
	size_t n = 0;
   1dbce:	2000      	movs	r0, #0

	while (*s != '\0') {
   1dbd0:	5c1a      	ldrb	r2, [r3, r0]
   1dbd2:	b902      	cbnz	r2, 1dbd6 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1dbd4:	4770      	bx	lr
		n++;
   1dbd6:	3001      	adds	r0, #1
   1dbd8:	e7fa      	b.n	1dbd0 <strlen+0x4>

0001dbda <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1dbda:	4603      	mov	r3, r0
	size_t n = 0;
   1dbdc:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1dbde:	5c1a      	ldrb	r2, [r3, r0]
   1dbe0:	b10a      	cbz	r2, 1dbe6 <strnlen+0xc>
   1dbe2:	4288      	cmp	r0, r1
   1dbe4:	d100      	bne.n	1dbe8 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1dbe6:	4770      	bx	lr
		n++;
   1dbe8:	3001      	adds	r0, #1
   1dbea:	e7f8      	b.n	1dbde <strnlen+0x4>

0001dbec <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1dbec:	1e43      	subs	r3, r0, #1
   1dbee:	3901      	subs	r1, #1
   1dbf0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1dbf4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1dbf8:	4282      	cmp	r2, r0
   1dbfa:	d101      	bne.n	1dc00 <strcmp+0x14>
   1dbfc:	2a00      	cmp	r2, #0
   1dbfe:	d1f7      	bne.n	1dbf0 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1dc00:	1a10      	subs	r0, r2, r0
   1dc02:	4770      	bx	lr

0001dc04 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1dc04:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1dc06:	b15a      	cbz	r2, 1dc20 <memcmp+0x1c>
   1dc08:	3901      	subs	r1, #1
   1dc0a:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1dc0c:	f810 2b01 	ldrb.w	r2, [r0], #1
   1dc10:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1dc14:	42a0      	cmp	r0, r4
   1dc16:	d001      	beq.n	1dc1c <memcmp+0x18>
   1dc18:	429a      	cmp	r2, r3
   1dc1a:	d0f7      	beq.n	1dc0c <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1dc1c:	1ad0      	subs	r0, r2, r3
}
   1dc1e:	bd10      	pop	{r4, pc}
		return 0;
   1dc20:	4610      	mov	r0, r2
   1dc22:	e7fc      	b.n	1dc1e <memcmp+0x1a>

0001dc24 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   1dc24:	1a43      	subs	r3, r0, r1
   1dc26:	4293      	cmp	r3, r2
{
   1dc28:	b510      	push	{r4, lr}
   1dc2a:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   1dc2e:	d308      	bcc.n	1dc42 <memmove+0x1e>
   1dc30:	3901      	subs	r1, #1
	char *dest = d;
   1dc32:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   1dc34:	429a      	cmp	r2, r3
   1dc36:	d00b      	beq.n	1dc50 <memmove+0x2c>
			*dest = *src;
   1dc38:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1dc3c:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   1dc40:	e7f8      	b.n	1dc34 <memmove+0x10>
   1dc42:	440a      	add	r2, r1
			dest[n] = src[n];
   1dc44:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1dc48:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   1dc4c:	428a      	cmp	r2, r1
   1dc4e:	d1f9      	bne.n	1dc44 <memmove+0x20>
		}
	}

	return d;
}
   1dc50:	bd10      	pop	{r4, pc}

0001dc52 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1dc52:	b510      	push	{r4, lr}
   1dc54:	1e43      	subs	r3, r0, #1
   1dc56:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   1dc58:	4291      	cmp	r1, r2
   1dc5a:	d100      	bne.n	1dc5e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1dc5c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   1dc5e:	f811 4b01 	ldrb.w	r4, [r1], #1
   1dc62:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1dc66:	e7f7      	b.n	1dc58 <memcpy+0x6>

0001dc68 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1dc68:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   1dc6a:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   1dc6c:	4603      	mov	r3, r0
	while (n > 0) {
   1dc6e:	4293      	cmp	r3, r2
   1dc70:	d100      	bne.n	1dc74 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1dc72:	4770      	bx	lr
		*(d_byte++) = c_byte;
   1dc74:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1dc78:	e7f9      	b.n	1dc6e <memset+0x6>

0001dc7a <_stdout_hook_default>:
}
   1dc7a:	f04f 30ff 	mov.w	r0, #4294967295
   1dc7e:	4770      	bx	lr

0001dc80 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   1dc80:	b084      	sub	sp, #16
   1dc82:	ab04      	add	r3, sp, #16
   1dc84:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1dc88:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1dc8c:	2b06      	cmp	r3, #6
   1dc8e:	d108      	bne.n	1dca2 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1dc90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dc94:	2201      	movs	r2, #1
   1dc96:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1dc9a:	f3bf 8f4f 	dsb	sy
        __WFE();
   1dc9e:	bf20      	wfe
    while (true)
   1dca0:	e7fd      	b.n	1dc9e <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1dca2:	b004      	add	sp, #16
   1dca4:	4770      	bx	lr

0001dca6 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1dca6:	b084      	sub	sp, #16
   1dca8:	ab04      	add	r3, sp, #16
   1dcaa:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1dcae:	2300      	movs	r3, #0
   1dcb0:	f383 8811 	msr	BASEPRI, r3
   1dcb4:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1dcb8:	b004      	add	sp, #16
   1dcba:	4770      	bx	lr

0001dcbc <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1dcbc:	b510      	push	{r4, lr}
   1dcbe:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1dcc0:	7801      	ldrb	r1, [r0, #0]
   1dcc2:	7822      	ldrb	r2, [r4, #0]
   1dcc4:	428a      	cmp	r2, r1
{
   1dcc6:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1dcc8:	d00e      	beq.n	1dce8 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   1dcca:	4669      	mov	r1, sp
   1dccc:	f7f5 f800 	bl	12cd0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1dcd0:	a905      	add	r1, sp, #20
   1dcd2:	4620      	mov	r0, r4
   1dcd4:	f7f4 fffc 	bl	12cd0 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1dcd8:	2210      	movs	r2, #16
   1dcda:	f10d 0115 	add.w	r1, sp, #21
   1dcde:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1dce2:	f7ff ff8f 	bl	1dc04 <memcmp>
   1dce6:	e007      	b.n	1dcf8 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   1dce8:	2a01      	cmp	r2, #1
   1dcea:	d007      	beq.n	1dcfc <bt_uuid_cmp+0x40>
   1dcec:	2a02      	cmp	r2, #2
   1dcee:	d008      	beq.n	1dd02 <bt_uuid_cmp+0x46>
   1dcf0:	b95a      	cbnz	r2, 1dd0a <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1dcf2:	8840      	ldrh	r0, [r0, #2]
   1dcf4:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1dcf6:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   1dcf8:	b00a      	add	sp, #40	; 0x28
   1dcfa:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1dcfc:	6840      	ldr	r0, [r0, #4]
   1dcfe:	6863      	ldr	r3, [r4, #4]
   1dd00:	e7f9      	b.n	1dcf6 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1dd02:	2210      	movs	r2, #16
   1dd04:	1c61      	adds	r1, r4, #1
   1dd06:	3001      	adds	r0, #1
   1dd08:	e7eb      	b.n	1dce2 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   1dd0a:	f06f 0015 	mvn.w	r0, #21
   1dd0e:	e7f3      	b.n	1dcf8 <bt_uuid_cmp+0x3c>

0001dd10 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1dd10:	2a04      	cmp	r2, #4
{
   1dd12:	b538      	push	{r3, r4, r5, lr}
   1dd14:	460c      	mov	r4, r1
	switch (data_len) {
   1dd16:	d00d      	beq.n	1dd34 <bt_uuid_create+0x24>
   1dd18:	2a10      	cmp	r2, #16
   1dd1a:	d019      	beq.n	1dd50 <bt_uuid_create+0x40>
   1dd1c:	2a02      	cmp	r2, #2
   1dd1e:	f04f 0300 	mov.w	r3, #0
   1dd22:	d11b      	bne.n	1dd5c <bt_uuid_create+0x4c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   1dd24:	7003      	strb	r3, [r0, #0]
   1dd26:	784a      	ldrb	r2, [r1, #1]
   1dd28:	780b      	ldrb	r3, [r1, #0]
   1dd2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1dd2e:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1dd30:	2001      	movs	r0, #1
}
   1dd32:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   1dd34:	2301      	movs	r3, #1
   1dd36:	7003      	strb	r3, [r0, #0]
   1dd38:	78a2      	ldrb	r2, [r4, #2]
   1dd3a:	78c9      	ldrb	r1, [r1, #3]
   1dd3c:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1dd3e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   1dd42:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1dd44:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1dd48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1dd4c:	6042      	str	r2, [r0, #4]
		break;
   1dd4e:	e7ef      	b.n	1dd30 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   1dd50:	2302      	movs	r3, #2
   1dd52:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1dd56:	f7ff ff7c 	bl	1dc52 <memcpy>
		break;
   1dd5a:	e7e9      	b.n	1dd30 <bt_uuid_create+0x20>
	switch (data_len) {
   1dd5c:	4618      	mov	r0, r3
   1dd5e:	e7e8      	b.n	1dd32 <bt_uuid_create+0x22>

0001dd60 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1dd60:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1dd62:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1dd64:	2106      	movs	r1, #6
{
   1dd66:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1dd68:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1dd6c:	f7f9 feca 	bl	17b04 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1dd70:	b918      	cbnz	r0, 1dd7a <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1dd72:	79a3      	ldrb	r3, [r4, #6]
   1dd74:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1dd78:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1dd7a:	bd10      	pop	{r4, pc}

0001dd7c <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1dd7c:	280f      	cmp	r0, #15
   1dd7e:	d806      	bhi.n	1dd8e <bt_hci_evt_get_flags+0x12>
   1dd80:	280d      	cmp	r0, #13
   1dd82:	d80b      	bhi.n	1dd9c <bt_hci_evt_get_flags+0x20>
   1dd84:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1dd86:	bf14      	ite	ne
   1dd88:	2002      	movne	r0, #2
   1dd8a:	2003      	moveq	r0, #3
   1dd8c:	4770      	bx	lr
	switch (evt) {
   1dd8e:	2813      	cmp	r0, #19
   1dd90:	d004      	beq.n	1dd9c <bt_hci_evt_get_flags+0x20>
   1dd92:	281a      	cmp	r0, #26
   1dd94:	bf14      	ite	ne
   1dd96:	2002      	movne	r0, #2
   1dd98:	2001      	moveq	r0, #1
   1dd9a:	4770      	bx	lr
   1dd9c:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1dd9e:	4770      	bx	lr

0001dda0 <handle_event>:
{
   1dda0:	b410      	push	{r4}
   1dda2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1dda6:	4604      	mov	r4, r0
   1dda8:	4608      	mov	r0, r1
		if (handler->event != event) {
   1ddaa:	7811      	ldrb	r1, [r2, #0]
   1ddac:	42a1      	cmp	r1, r4
   1ddae:	d004      	beq.n	1ddba <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   1ddb0:	3208      	adds	r2, #8
   1ddb2:	429a      	cmp	r2, r3
   1ddb4:	d1f9      	bne.n	1ddaa <handle_event+0xa>
}
   1ddb6:	bc10      	pop	{r4}
   1ddb8:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   1ddba:	8981      	ldrh	r1, [r0, #12]
   1ddbc:	7853      	ldrb	r3, [r2, #1]
   1ddbe:	4299      	cmp	r1, r3
   1ddc0:	d3f9      	bcc.n	1ddb6 <handle_event+0x16>
		handler->handler(buf);
   1ddc2:	6853      	ldr	r3, [r2, #4]
}
   1ddc4:	bc10      	pop	{r4}
		handler->handler(buf);
   1ddc6:	4718      	bx	r3

0001ddc8 <hci_data_buf_overflow>:
}
   1ddc8:	4770      	bx	lr

0001ddca <hci_disconn_complete>:
{
   1ddca:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1ddcc:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   1ddce:	7835      	ldrb	r5, [r6, #0]
   1ddd0:	b985      	cbnz	r5, 1ddf4 <hci_disconn_complete+0x2a>
	conn = bt_conn_lookup_handle(handle);
   1ddd2:	f8b6 0001 	ldrh.w	r0, [r6, #1]
   1ddd6:	f7f6 fcb7 	bl	14748 <bt_conn_lookup_handle>
	if (!conn) {
   1ddda:	4604      	mov	r4, r0
   1dddc:	b150      	cbz	r0, 1ddf4 <hci_disconn_complete+0x2a>
	conn->err = evt->reason;
   1ddde:	78f3      	ldrb	r3, [r6, #3]
   1dde0:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1dde2:	4629      	mov	r1, r5
   1dde4:	f7f6 fcbc 	bl	14760 <bt_conn_set_state>
	conn->handle = 0U;
   1dde8:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
   1ddea:	4620      	mov	r0, r4
}
   1ddec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1ddf0:	f000 bc54 	b.w	1e69c <bt_conn_unref>
}
   1ddf4:	bd70      	pop	{r4, r5, r6, pc}

0001ddf6 <le_data_len_change>:
{
   1ddf6:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1ddf8:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1ddfa:	8818      	ldrh	r0, [r3, #0]
   1ddfc:	f7f6 fca4 	bl	14748 <bt_conn_lookup_handle>
	if (!conn) {
   1de00:	b118      	cbz	r0, 1de0a <le_data_len_change+0x14>
}
   1de02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   1de06:	f000 bc49 	b.w	1e69c <bt_conn_unref>
}
   1de0a:	bd08      	pop	{r3, pc}

0001de0c <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   1de0c:	2101      	movs	r1, #1
   1de0e:	3008      	adds	r0, #8
   1de10:	f001 bea4 	b.w	1fb5c <net_buf_simple_pull_mem>

0001de14 <hci_vendor_event>:
   1de14:	4770      	bx	lr

0001de16 <hci_num_completed_packets>:
{
   1de16:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   1de1a:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1de1c:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   1de1e:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   1de20:	783b      	ldrb	r3, [r7, #0]
   1de22:	429d      	cmp	r5, r3
   1de24:	db01      	blt.n	1de2a <hci_num_completed_packets+0x14>
}
   1de26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1de2a:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   1de2e:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   1de32:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   1de36:	f7f6 fc87 	bl	14748 <bt_conn_lookup_handle>
		if (!conn) {
   1de3a:	4604      	mov	r4, r0
   1de3c:	b350      	cbz	r0, 1de94 <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   1de3e:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   1de42:	b326      	cbz	r6, 1de8e <hci_num_completed_packets+0x78>
	__asm__ volatile(
   1de44:	f04f 0340 	mov.w	r3, #64	; 0x40
   1de48:	f3ef 8211 	mrs	r2, BASEPRI
   1de4c:	f383 8811 	msr	BASEPRI, r3
   1de50:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   1de54:	69e3      	ldr	r3, [r4, #28]
   1de56:	b16b      	cbz	r3, 1de74 <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   1de58:	3b01      	subs	r3, #1
   1de5a:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1de5c:	f382 8811 	msr	BASEPRI, r2
   1de60:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1de64:	4620      	mov	r0, r4
   1de66:	f7f6 fbc3 	bl	145f0 <bt_conn_get_pkts>
   1de6a:	3e01      	subs	r6, #1
   1de6c:	f7fa ff62 	bl	18d34 <z_impl_k_sem_give>
   1de70:	b2b6      	uxth	r6, r6
   1de72:	e7e6      	b.n	1de42 <hci_num_completed_packets+0x2c>
Z_GENLIST_IS_EMPTY(slist)
   1de74:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1de76:	b12b      	cbz	r3, 1de84 <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1de78:	69a1      	ldr	r1, [r4, #24]
   1de7a:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   1de7c:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1de7e:	428b      	cmp	r3, r1
	list->tail = node;
   1de80:	bf08      	it	eq
   1de82:	61a0      	streq	r0, [r4, #24]
   1de84:	f382 8811 	msr	BASEPRI, r2
   1de88:	f3bf 8f6f 	isb	sy
			if (!node) {
   1de8c:	b923      	cbnz	r3, 1de98 <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   1de8e:	4620      	mov	r0, r4
   1de90:	f000 fc04 	bl	1e69c <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   1de94:	3501      	adds	r5, #1
   1de96:	e7c3      	b.n	1de20 <hci_num_completed_packets+0xa>
	__asm__ volatile(
   1de98:	f04f 0240 	mov.w	r2, #64	; 0x40
   1de9c:	f3ef 8111 	mrs	r1, BASEPRI
   1dea0:	f382 8811 	msr	BASEPRI, r2
   1dea4:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1dea8:	68da      	ldr	r2, [r3, #12]
   1deaa:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   1deac:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   1deb0:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   1deb2:	f8c3 800c 	str.w	r8, [r3, #12]
   1deb6:	b94a      	cbnz	r2, 1decc <hci_num_completed_packets+0xb6>
	list->head = node;
   1deb8:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   1debc:	f381 8811 	msr	BASEPRI, r1
   1dec0:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1dec4:	4648      	mov	r0, r9
   1dec6:	f7fb f8ab 	bl	19020 <k_work_submit>
   1deca:	e7cb      	b.n	1de64 <hci_num_completed_packets+0x4e>
	parent->next = child;
   1decc:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1dece:	6263      	str	r3, [r4, #36]	; 0x24
}
   1ded0:	e7f4      	b.n	1debc <hci_num_completed_packets+0xa6>

0001ded2 <le_conn_update_complete>:
{
   1ded2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1ded4:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1ded6:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1deda:	f7f6 fc35 	bl	14748 <bt_conn_lookup_handle>
	if (!conn) {
   1dede:	4604      	mov	r4, r0
   1dee0:	b1c0      	cbz	r0, 1df14 <le_conn_update_complete+0x42>
	if (!evt->status) {
   1dee2:	782b      	ldrb	r3, [r5, #0]
   1dee4:	b9c3      	cbnz	r3, 1df18 <le_conn_update_complete+0x46>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1dee6:	792a      	ldrb	r2, [r5, #4]
   1dee8:	78eb      	ldrb	r3, [r5, #3]
   1deea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1deee:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   1def2:	79aa      	ldrb	r2, [r5, #6]
   1def4:	796b      	ldrb	r3, [r5, #5]
   1def6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1defa:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1defe:	79eb      	ldrb	r3, [r5, #7]
   1df00:	7a2a      	ldrb	r2, [r5, #8]
   1df02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1df06:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   1df0a:	f7f6 fcdf 	bl	148cc <notify_le_param_updated>
	bt_conn_unref(conn);
   1df0e:	4620      	mov	r0, r4
   1df10:	f000 fbc4 	bl	1e69c <bt_conn_unref>
}
   1df14:	b003      	add	sp, #12
   1df16:	bd30      	pop	{r4, r5, pc}
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1df18:	2b1a      	cmp	r3, #26
   1df1a:	d1f8      	bne.n	1df0e <le_conn_update_complete+0x3c>
   1df1c:	78c3      	ldrb	r3, [r0, #3]
   1df1e:	2b01      	cmp	r3, #1
   1df20:	d1f5      	bne.n	1df0e <le_conn_update_complete+0x3c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1df22:	f3bf 8f5b 	dmb	ish
   1df26:	1d03      	adds	r3, r0, #4
   1df28:	e853 2f00 	ldrex	r2, [r3]
   1df2c:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   1df30:	e843 1500 	strex	r5, r1, [r3]
   1df34:	2d00      	cmp	r5, #0
   1df36:	d1f7      	bne.n	1df28 <le_conn_update_complete+0x56>
   1df38:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_SLAVE &&
   1df3c:	0553      	lsls	r3, r2, #21
   1df3e:	d4e6      	bmi.n	1df0e <le_conn_update_complete+0x3c>
		param.interval_min = conn->le.interval_min;
   1df40:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1df44:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   1df46:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   1df48:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1df4c:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1df4e:	f7f6 ff35 	bl	14dbc <bt_l2cap_update_conn_param>
   1df52:	e7dc      	b.n	1df0e <le_conn_update_complete+0x3c>

0001df54 <hci_le_read_max_data_len>:
{
   1df54:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1df56:	4606      	mov	r6, r0
   1df58:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1df5a:	aa01      	add	r2, sp, #4
   1df5c:	2100      	movs	r1, #0
   1df5e:	f242 002f 	movw	r0, #8239	; 0x202f
   1df62:	f7f5 f8f5 	bl	13150 <bt_hci_cmd_send_sync>
	if (err) {
   1df66:	4604      	mov	r4, r0
   1df68:	b948      	cbnz	r0, 1df7e <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   1df6a:	9801      	ldr	r0, [sp, #4]
   1df6c:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1df6e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1df72:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1df74:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1df78:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1df7a:	f7f8 fa41 	bl	16400 <net_buf_unref>
}
   1df7e:	4620      	mov	r0, r4
   1df80:	b002      	add	sp, #8
   1df82:	bd70      	pop	{r4, r5, r6, pc}

0001df84 <bt_hci_disconnect>:
{
   1df84:	b570      	push	{r4, r5, r6, lr}
   1df86:	4606      	mov	r6, r0
   1df88:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1df8a:	f240 4006 	movw	r0, #1030	; 0x406
   1df8e:	2103      	movs	r1, #3
   1df90:	f7f5 f8a6 	bl	130e0 <bt_hci_cmd_create>
	if (!buf) {
   1df94:	4604      	mov	r4, r0
   1df96:	b168      	cbz	r0, 1dfb4 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1df98:	2103      	movs	r1, #3
   1df9a:	3008      	adds	r0, #8
   1df9c:	f001 fdb7 	bl	1fb0e <net_buf_simple_add>
	disconn->reason = reason;
   1dfa0:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1dfa2:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1dfa4:	4621      	mov	r1, r4
   1dfa6:	2200      	movs	r2, #0
}
   1dfa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1dfac:	f240 4006 	movw	r0, #1030	; 0x406
   1dfb0:	f7f5 b8ce 	b.w	13150 <bt_hci_cmd_send_sync>
}
   1dfb4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1dfb8:	bd70      	pop	{r4, r5, r6, pc}

0001dfba <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1dfba:	8802      	ldrh	r2, [r0, #0]
   1dfbc:	8843      	ldrh	r3, [r0, #2]
   1dfbe:	429a      	cmp	r2, r3
{
   1dfc0:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1dfc2:	d818      	bhi.n	1dff6 <bt_le_conn_params_valid+0x3c>
   1dfc4:	2a05      	cmp	r2, #5
   1dfc6:	d916      	bls.n	1dff6 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1dfc8:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1dfcc:	d813      	bhi.n	1dff6 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   1dfce:	8884      	ldrh	r4, [r0, #4]
   1dfd0:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   1dfd4:	d20f      	bcs.n	1dff6 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1dfd6:	88c1      	ldrh	r1, [r0, #6]
   1dfd8:	f1a1 020a 	sub.w	r2, r1, #10
   1dfdc:	b292      	uxth	r2, r2
   1dfde:	f640 4076 	movw	r0, #3190	; 0xc76
   1dfe2:	4282      	cmp	r2, r0
   1dfe4:	d807      	bhi.n	1dff6 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   1dfe6:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   1dfea:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   1dfee:	bf34      	ite	cc
   1dff0:	2001      	movcc	r0, #1
   1dff2:	2000      	movcs	r0, #0
}
   1dff4:	bd10      	pop	{r4, pc}
		return false;
   1dff6:	2000      	movs	r0, #0
   1dff8:	e7fc      	b.n	1dff4 <bt_le_conn_params_valid+0x3a>

0001dffa <bt_le_set_data_len>:
{
   1dffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dffc:	4607      	mov	r7, r0
   1dffe:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1e000:	f242 0022 	movw	r0, #8226	; 0x2022
   1e004:	2106      	movs	r1, #6
{
   1e006:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1e008:	f7f5 f86a 	bl	130e0 <bt_hci_cmd_create>
	if (!buf) {
   1e00c:	4604      	mov	r4, r0
   1e00e:	b170      	cbz	r0, 1e02e <bt_le_set_data_len+0x34>
   1e010:	2106      	movs	r1, #6
   1e012:	3008      	adds	r0, #8
   1e014:	f001 fd7b 	bl	1fb0e <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e018:	883b      	ldrh	r3, [r7, #0]
   1e01a:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1e01c:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1e01e:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1e020:	4621      	mov	r1, r4
   1e022:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1e026:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1e02a:	f7f5 bac1 	b.w	135b0 <bt_hci_cmd_send>
}
   1e02e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e034 <bt_le_set_phy>:
{
   1e034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e038:	4680      	mov	r8, r0
   1e03a:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1e03c:	f242 0032 	movw	r0, #8242	; 0x2032
   1e040:	2107      	movs	r1, #7
{
   1e042:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1e046:	4616      	mov	r6, r2
   1e048:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1e04a:	f7f5 f849 	bl	130e0 <bt_hci_cmd_create>
	if (!buf) {
   1e04e:	4604      	mov	r4, r0
   1e050:	b190      	cbz	r0, 1e078 <bt_le_set_phy+0x44>
   1e052:	2107      	movs	r1, #7
   1e054:	3008      	adds	r0, #8
   1e056:	f001 fd5a 	bl	1fb0e <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e05a:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1e05e:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1e060:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1e062:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e064:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1e066:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1e06a:	4621      	mov	r1, r4
   1e06c:	f242 0032 	movw	r0, #8242	; 0x2032
}
   1e070:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1e074:	f7f5 ba9c 	b.w	135b0 <bt_hci_cmd_send>
}
   1e078:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e07c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e080 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1e080:	6880      	ldr	r0, [r0, #8]
   1e082:	f7f5 bb1d 	b.w	136c0 <bt_hci_le_enh_conn_complete>

0001e086 <le_legacy_conn_complete>:
{
   1e086:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1e088:	6884      	ldr	r4, [r0, #8]
{
   1e08a:	b08a      	sub	sp, #40	; 0x28
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1e08c:	f7f6 f822 	bl	140d4 <bt_le_adv_lookup_legacy>
	(void)bt_le_lim_adv_cancel_timeout(adv);
   1e090:	f000 fa50 	bl	1e534 <bt_le_lim_adv_cancel_timeout>
	enh.status         = evt->status;
   1e094:	7823      	ldrb	r3, [r4, #0]
   1e096:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1e09a:	f8b4 3001 	ldrh.w	r3, [r4, #1]
   1e09e:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1e0a2:	78e3      	ldrb	r3, [r4, #3]
   1e0a4:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1e0a8:	f8b4 300b 	ldrh.w	r3, [r4, #11]
   1e0ac:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1e0b0:	f8b4 300d 	ldrh.w	r3, [r4, #13]
   1e0b4:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1e0b8:	f8b4 300f 	ldrh.w	r3, [r4, #15]
   1e0bc:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1e0c0:	7c63      	ldrb	r3, [r4, #17]
   1e0c2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1e0c6:	1d21      	adds	r1, r4, #4
   1e0c8:	2207      	movs	r2, #7
   1e0ca:	a803      	add	r0, sp, #12
   1e0cc:	f7ff fdc1 	bl	1dc52 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1e0d0:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   1e0d2:	4669      	mov	r1, sp
   1e0d4:	2206      	movs	r2, #6
   1e0d6:	f10d 0013 	add.w	r0, sp, #19
   1e0da:	9400      	str	r4, [sp, #0]
   1e0dc:	f8ad 4004 	strh.w	r4, [sp, #4]
   1e0e0:	f7ff fdb7 	bl	1dc52 <memcpy>
   1e0e4:	2206      	movs	r2, #6
   1e0e6:	4669      	mov	r1, sp
   1e0e8:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1e0ec:	9400      	str	r4, [sp, #0]
   1e0ee:	f8ad 4004 	strh.w	r4, [sp, #4]
   1e0f2:	f7ff fdae 	bl	1dc52 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   1e0f6:	a802      	add	r0, sp, #8
   1e0f8:	f7f5 fae2 	bl	136c0 <bt_hci_le_enh_conn_complete>
}
   1e0fc:	b00a      	add	sp, #40	; 0x28
   1e0fe:	bd10      	pop	{r4, pc}

0001e100 <le_phy_update_complete>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1e100:	6883      	ldr	r3, [r0, #8]
{
   1e102:	b510      	push	{r4, lr}
	conn = bt_conn_lookup_handle(handle);
   1e104:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1e108:	f7f6 fb1e 	bl	14748 <bt_conn_lookup_handle>
	if (!conn) {
   1e10c:	4604      	mov	r4, r0
   1e10e:	b310      	cbz	r0, 1e156 <le_phy_update_complete+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e110:	f3bf 8f5b 	dmb	ish
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   1e114:	1d03      	adds	r3, r0, #4
   1e116:	e853 2f00 	ldrex	r2, [r3]
   1e11a:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   1e11e:	e843 1c00 	strex	ip, r1, [r3]
   1e122:	f1bc 0f00 	cmp.w	ip, #0
   1e126:	d1f6      	bne.n	1e116 <le_phy_update_complete+0x16>
   1e128:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1e12c:	0612      	lsls	r2, r2, #24
   1e12e:	d50d      	bpl.n	1e14c <le_phy_update_complete+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e130:	f3bf 8f5b 	dmb	ish
   1e134:	e853 2f00 	ldrex	r2, [r3]
   1e138:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   1e13c:	e843 2100 	strex	r1, r2, [r3]
   1e140:	2900      	cmp	r1, #0
   1e142:	d1f7      	bne.n	1e134 <le_phy_update_complete+0x34>
   1e144:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   1e148:	f7f5 fa54 	bl	135f4 <conn_auto_initiate>
	bt_conn_unref(conn);
   1e14c:	4620      	mov	r0, r4
}
   1e14e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1e152:	f000 baa3 	b.w	1e69c <bt_conn_unref>
}
   1e156:	bd10      	pop	{r4, pc}

0001e158 <le_remote_feat_complete>:
{
   1e158:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1e15a:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1e15c:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1e160:	f7f6 faf2 	bl	14748 <bt_conn_lookup_handle>
	if (!conn) {
   1e164:	4604      	mov	r4, r0
   1e166:	b1d8      	cbz	r0, 1e1a0 <le_remote_feat_complete+0x48>
	if (!evt->status) {
   1e168:	782b      	ldrb	r3, [r5, #0]
   1e16a:	b923      	cbnz	r3, 1e176 <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   1e16c:	2208      	movs	r2, #8
   1e16e:	1ce9      	adds	r1, r5, #3
   1e170:	30ac      	adds	r0, #172	; 0xac
   1e172:	f7ff fd6e 	bl	1dc52 <memcpy>
   1e176:	f3bf 8f5b 	dmb	ish
   1e17a:	1d23      	adds	r3, r4, #4
   1e17c:	e853 2f00 	ldrex	r2, [r3]
   1e180:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1e184:	e843 2100 	strex	r1, r2, [r3]
   1e188:	2900      	cmp	r1, #0
   1e18a:	d1f7      	bne.n	1e17c <le_remote_feat_complete+0x24>
   1e18c:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   1e190:	4620      	mov	r0, r4
   1e192:	f7f5 fa2f 	bl	135f4 <conn_auto_initiate>
	bt_conn_unref(conn);
   1e196:	4620      	mov	r0, r4
}
   1e198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1e19c:	f000 ba7e 	b.w	1e69c <bt_conn_unref>
}
   1e1a0:	bd38      	pop	{r3, r4, r5, pc}

0001e1a2 <le_conn_param_neg_reply>:
{
   1e1a2:	b570      	push	{r4, r5, r6, lr}
   1e1a4:	4606      	mov	r6, r0
   1e1a6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1e1a8:	f242 0021 	movw	r0, #8225	; 0x2021
   1e1ac:	2103      	movs	r1, #3
   1e1ae:	f7f4 ff97 	bl	130e0 <bt_hci_cmd_create>
	if (!buf) {
   1e1b2:	4604      	mov	r4, r0
   1e1b4:	b160      	cbz	r0, 1e1d0 <le_conn_param_neg_reply+0x2e>
   1e1b6:	2103      	movs	r1, #3
   1e1b8:	3008      	adds	r0, #8
   1e1ba:	f001 fca8 	bl	1fb0e <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   1e1be:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   1e1c0:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1e1c2:	4621      	mov	r1, r4
   1e1c4:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1e1c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1e1cc:	f7f5 b9f0 	b.w	135b0 <bt_hci_cmd_send>
}
   1e1d0:	bd70      	pop	{r4, r5, r6, pc}

0001e1d2 <le_conn_param_req>:
{
   1e1d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1e1d4:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1e1d6:	78d9      	ldrb	r1, [r3, #3]
   1e1d8:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1e1da:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1e1dc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1e1e0:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1e1e4:	7959      	ldrb	r1, [r3, #5]
   1e1e6:	791a      	ldrb	r2, [r3, #4]
   1e1e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1e1ec:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1e1f0:	799a      	ldrb	r2, [r3, #6]
   1e1f2:	79d9      	ldrb	r1, [r3, #7]
   1e1f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1e1f8:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1e1fc:	7a1a      	ldrb	r2, [r3, #8]
   1e1fe:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   1e200:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1e202:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   1e206:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1e208:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   1e20c:	f7f6 fa9c 	bl	14748 <bt_conn_lookup_handle>
	if (!conn) {
   1e210:	4606      	mov	r6, r0
   1e212:	b928      	cbnz	r0, 1e220 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1e214:	2102      	movs	r1, #2
   1e216:	4620      	mov	r0, r4
   1e218:	f7ff ffc3 	bl	1e1a2 <le_conn_param_neg_reply>
}
   1e21c:	b003      	add	sp, #12
   1e21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   1e220:	4669      	mov	r1, sp
   1e222:	f7f6 fb8b 	bl	1493c <le_param_req>
   1e226:	b938      	cbnz	r0, 1e238 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1e228:	211e      	movs	r1, #30
   1e22a:	4620      	mov	r0, r4
   1e22c:	f7ff ffb9 	bl	1e1a2 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1e230:	4630      	mov	r0, r6
   1e232:	f000 fa33 	bl	1e69c <bt_conn_unref>
   1e236:	e7f1      	b.n	1e21c <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1e238:	210e      	movs	r1, #14
   1e23a:	f242 0020 	movw	r0, #8224	; 0x2020
   1e23e:	f7f4 ff4f 	bl	130e0 <bt_hci_cmd_create>
	if (!buf) {
   1e242:	4605      	mov	r5, r0
   1e244:	2800      	cmp	r0, #0
   1e246:	d0f3      	beq.n	1e230 <le_conn_param_req+0x5e>
   1e248:	210e      	movs	r1, #14
   1e24a:	3008      	adds	r0, #8
   1e24c:	f001 fc5f 	bl	1fb0e <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   1e250:	220e      	movs	r2, #14
   1e252:	4604      	mov	r4, r0
   1e254:	2100      	movs	r1, #0
   1e256:	f7ff fd07 	bl	1dc68 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1e25a:	f8bd 3000 	ldrh.w	r3, [sp]
   1e25e:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1e260:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1e264:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1e266:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1e26a:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1e26c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   1e270:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1e272:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1e274:	4629      	mov	r1, r5
   1e276:	f242 0020 	movw	r0, #8224	; 0x2020
   1e27a:	f7f5 f999 	bl	135b0 <bt_hci_cmd_send>
   1e27e:	e7d7      	b.n	1e230 <le_conn_param_req+0x5e>

0001e280 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   1e280:	2000      	movs	r0, #0
   1e282:	4770      	bx	lr

0001e284 <bt_lookup_id_addr>:
}
   1e284:	4608      	mov	r0, r1
   1e286:	4770      	bx	lr

0001e288 <bt_id_set_adv_private_addr>:
{
   1e288:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1e28a:	2106      	movs	r1, #6
   1e28c:	4668      	mov	r0, sp
   1e28e:	f7f9 fc39 	bl	17b04 <bt_rand>
	if (err) {
   1e292:	b940      	cbnz	r0, 1e2a6 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1e294:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   1e298:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1e29a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e29e:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   1e2a2:	f7f5 fcdf 	bl	13c64 <set_random_address>
}
   1e2a6:	b003      	add	sp, #12
   1e2a8:	f85d fb04 	ldr.w	pc, [sp], #4

0001e2ac <bt_id_adv_random_addr_check>:
}
   1e2ac:	2001      	movs	r0, #1
   1e2ae:	4770      	bx	lr

0001e2b0 <get_adv_channel_map>:
{
   1e2b0:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1e2b2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1e2b6:	bf0c      	ite	eq
   1e2b8:	2007      	moveq	r0, #7
   1e2ba:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1e2bc:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1e2be:	bf48      	it	mi
   1e2c0:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1e2c4:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1e2c6:	bf48      	it	mi
   1e2c8:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1e2cc:	4770      	bx	lr

0001e2ce <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e2ce:	f3bf 8f5b 	dmb	ish
   1e2d2:	6800      	ldr	r0, [r0, #0]
   1e2d4:	f3bf 8f5b 	dmb	ish
}
   1e2d8:	4770      	bx	lr

0001e2da <atomic_and>:
{
   1e2da:	4603      	mov	r3, r0
}
   1e2dc:	f3bf 8f5b 	dmb	ish
   1e2e0:	e853 0f00 	ldrex	r0, [r3]
   1e2e4:	ea00 0201 	and.w	r2, r0, r1
   1e2e8:	e843 2c00 	strex	ip, r2, [r3]
   1e2ec:	f1bc 0f00 	cmp.w	ip, #0
   1e2f0:	d1f6      	bne.n	1e2e0 <atomic_and+0x6>
   1e2f2:	f3bf 8f5b 	dmb	ish
   1e2f6:	4770      	bx	lr

0001e2f8 <hci_set_ad>:
{
   1e2f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e2fc:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1e2fe:	2120      	movs	r1, #32
{
   1e300:	4682      	mov	sl, r0
   1e302:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1e304:	f7f4 feec 	bl	130e0 <bt_hci_cmd_create>
	if (!buf) {
   1e308:	4606      	mov	r6, r0
   1e30a:	2800      	cmp	r0, #0
   1e30c:	d04a      	beq.n	1e3a4 <hci_set_ad+0xac>
   1e30e:	2120      	movs	r1, #32
   1e310:	3008      	adds	r0, #8
   1e312:	f001 fbfc 	bl	1fb0e <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   1e316:	2220      	movs	r2, #32
   1e318:	2100      	movs	r1, #0
   1e31a:	4681      	mov	r9, r0
   1e31c:	f7ff fca4 	bl	1dc68 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1e320:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   1e324:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   1e328:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   1e32a:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   1e32c:	f8d4 8000 	ldr.w	r8, [r4]
   1e330:	2300      	movs	r3, #0
   1e332:	6862      	ldr	r2, [r4, #4]
   1e334:	4293      	cmp	r3, r2
   1e336:	d30d      	bcc.n	1e354 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   1e338:	9b00      	ldr	r3, [sp, #0]
   1e33a:	3408      	adds	r4, #8
   1e33c:	42a3      	cmp	r3, r4
   1e33e:	d1f5      	bne.n	1e32c <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1e340:	2200      	movs	r2, #0
   1e342:	4631      	mov	r1, r6
   1e344:	4650      	mov	r0, sl
	*data_len = set_data_len;
   1e346:	f889 5000 	strb.w	r5, [r9]
}
   1e34a:	b003      	add	sp, #12
   1e34c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1e350:	f7f4 befe 	b.w	13150 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   1e354:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   1e358:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1e35c:	1ca8      	adds	r0, r5, #2
   1e35e:	1811      	adds	r1, r2, r0
   1e360:	291f      	cmp	r1, #31
   1e362:	d908      	bls.n	1e376 <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1e364:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   1e368:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1e36c:	d11f      	bne.n	1e3ae <hci_set_ad+0xb6>
   1e36e:	2a00      	cmp	r2, #0
   1e370:	dd1d      	ble.n	1e3ae <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   1e372:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   1e376:	b2d7      	uxtb	r7, r2
   1e378:	1c79      	adds	r1, r7, #1
   1e37a:	f80b 1005 	strb.w	r1, [fp, r5]
   1e37e:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   1e380:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   1e382:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   1e386:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   1e38a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1e38e:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   1e390:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   1e392:	f7ff fc5e 	bl	1dc52 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   1e396:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   1e398:	443d      	add	r5, r7
   1e39a:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   1e39c:	3301      	adds	r3, #1
   1e39e:	f108 0808 	add.w	r8, r8, #8
   1e3a2:	e7c6      	b.n	1e332 <hci_set_ad+0x3a>
		return -ENOBUFS;
   1e3a4:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1e3a8:	b003      	add	sp, #12
   1e3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   1e3ae:	4630      	mov	r0, r6
   1e3b0:	f7f8 f826 	bl	16400 <net_buf_unref>
		return err;
   1e3b4:	f06f 0015 	mvn.w	r0, #21
   1e3b8:	e7f6      	b.n	1e3a8 <hci_set_ad+0xb0>

0001e3ba <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e3ba:	2301      	movs	r3, #1
{
   1e3bc:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e3be:	fa03 f101 	lsl.w	r1, r3, r1
{
   1e3c2:	4604      	mov	r4, r0
	if (val) {
   1e3c4:	b162      	cbz	r2, 1e3e0 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e3c6:	f3bf 8f5b 	dmb	ish
   1e3ca:	e854 3f00 	ldrex	r3, [r4]
   1e3ce:	430b      	orrs	r3, r1
   1e3d0:	e844 3200 	strex	r2, r3, [r4]
   1e3d4:	2a00      	cmp	r2, #0
   1e3d6:	d1f8      	bne.n	1e3ca <atomic_set_bit_to+0x10>
   1e3d8:	f3bf 8f5b 	dmb	ish
	}
}
   1e3dc:	bc10      	pop	{r4}
   1e3de:	4770      	bx	lr
   1e3e0:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e3e2:	43c9      	mvns	r1, r1
   1e3e4:	f7ff bf79 	b.w	1e2da <atomic_and>

0001e3e8 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1e3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3ec:	b087      	sub	sp, #28
   1e3ee:	4605      	mov	r5, r0
   1e3f0:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
   1e3f4:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   1e3f8:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
   1e3fc:	460c      	mov	r4, r1
   1e3fe:	4693      	mov	fp, r2
	struct bt_ad d[2] = {};
   1e400:	2100      	movs	r1, #0
   1e402:	2210      	movs	r2, #16
   1e404:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1e406:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
   1e408:	f7ff fc2e 	bl	1dc68 <memset>
	if (use_name) {
   1e40c:	b187      	cbz	r7, 1e430 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   1e40e:	f7f5 fc0b 	bl	13c28 <bt_get_name>
   1e412:	4681      	mov	r9, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1e414:	2c00      	cmp	r4, #0
   1e416:	d13e      	bne.n	1e496 <le_adv_update.constprop.0+0xae>
   1e418:	2e00      	cmp	r6, #0
   1e41a:	d148      	bne.n	1e4ae <le_adv_update.constprop.0+0xc6>
		data = (struct bt_data)BT_DATA(
   1e41c:	4648      	mov	r0, r9
   1e41e:	f7ff fbd5 	bl	1dbcc <strlen>
   1e422:	2209      	movs	r2, #9
   1e424:	f88d 2000 	strb.w	r2, [sp]
   1e428:	f88d 0001 	strb.w	r0, [sp, #1]
   1e42c:	f8cd 9004 	str.w	r9, [sp, #4]
		d[0].len = ad_len;
   1e430:	e9cd 4b02 	strd	r4, fp, [sp, #8]
		if (use_name && (!scannable || force_name_in_ad)) {
   1e434:	2f00      	cmp	r7, #0
   1e436:	d03c      	beq.n	1e4b2 <le_adv_update.constprop.0+0xca>
   1e438:	f1ba 0f00 	cmp.w	sl, #0
   1e43c:	d002      	beq.n	1e444 <le_adv_update.constprop.0+0x5c>
   1e43e:	f1b8 0f00 	cmp.w	r8, #0
   1e442:	d036      	beq.n	1e4b2 <le_adv_update.constprop.0+0xca>
			d[1].len = 1;
   1e444:	2301      	movs	r3, #1
			d[1].data = &data;
   1e446:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1e44a:	9305      	str	r3, [sp, #20]
			d_len = 2;
   1e44c:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1e44e:	a902      	add	r1, sp, #8
   1e450:	f242 0008 	movw	r0, #8200	; 0x2008
   1e454:	f7ff ff50 	bl	1e2f8 <hci_set_ad>
		if (err) {
   1e458:	4604      	mov	r4, r0
   1e45a:	b978      	cbnz	r0, 1e47c <le_adv_update.constprop.0+0x94>
	if (scannable) {
   1e45c:	f1ba 0f00 	cmp.w	sl, #0
   1e460:	d129      	bne.n	1e4b6 <le_adv_update.constprop.0+0xce>
   1e462:	3510      	adds	r5, #16
   1e464:	f3bf 8f5b 	dmb	ish
   1e468:	e855 3f00 	ldrex	r3, [r5]
   1e46c:	f043 0304 	orr.w	r3, r3, #4
   1e470:	e845 3200 	strex	r2, r3, [r5]
   1e474:	2a00      	cmp	r2, #0
   1e476:	d1f7      	bne.n	1e468 <le_adv_update.constprop.0+0x80>
   1e478:	f3bf 8f5b 	dmb	ish
}
   1e47c:	4620      	mov	r0, r4
   1e47e:	b007      	add	sp, #28
   1e480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1e484:	f814 1032 	ldrb.w	r1, [r4, r2, lsl #3]
   1e488:	3908      	subs	r1, #8
   1e48a:	2901      	cmp	r1, #1
   1e48c:	d92a      	bls.n	1e4e4 <le_adv_update.constprop.0+0xfc>
	for (i = 0; i < ad_len; i++) {
   1e48e:	3201      	adds	r2, #1
   1e490:	4593      	cmp	fp, r2
   1e492:	d1f7      	bne.n	1e484 <le_adv_update.constprop.0+0x9c>
   1e494:	e7c0      	b.n	1e418 <le_adv_update.constprop.0+0x30>
   1e496:	2200      	movs	r2, #0
   1e498:	e7fa      	b.n	1e490 <le_adv_update.constprop.0+0xa8>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1e49a:	f816 1032 	ldrb.w	r1, [r6, r2, lsl #3]
   1e49e:	3908      	subs	r1, #8
   1e4a0:	2901      	cmp	r1, #1
   1e4a2:	d91f      	bls.n	1e4e4 <le_adv_update.constprop.0+0xfc>
	for (i = 0; i < ad_len; i++) {
   1e4a4:	3201      	adds	r2, #1
   1e4a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e4a8:	4293      	cmp	r3, r2
   1e4aa:	d1f6      	bne.n	1e49a <le_adv_update.constprop.0+0xb2>
   1e4ac:	e7b6      	b.n	1e41c <le_adv_update.constprop.0+0x34>
   1e4ae:	2200      	movs	r2, #0
   1e4b0:	e7f9      	b.n	1e4a6 <le_adv_update.constprop.0+0xbe>
		d_len = 1;
   1e4b2:	2201      	movs	r2, #1
   1e4b4:	e7cb      	b.n	1e44e <le_adv_update.constprop.0+0x66>
		d[0].len = sd_len;
   1e4b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
		d[0].data = sd;
   1e4b8:	9602      	str	r6, [sp, #8]
		d[0].len = sd_len;
   1e4ba:	9303      	str	r3, [sp, #12]
		if (use_name && !force_name_in_ad) {
   1e4bc:	b187      	cbz	r7, 1e4e0 <le_adv_update.constprop.0+0xf8>
   1e4be:	f1b8 0f00 	cmp.w	r8, #0
   1e4c2:	d10d      	bne.n	1e4e0 <le_adv_update.constprop.0+0xf8>
			d[1].len = 1;
   1e4c4:	2301      	movs	r3, #1
			d[1].data = &data;
   1e4c6:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1e4ca:	9305      	str	r3, [sp, #20]
			d_len = 2;
   1e4cc:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1e4ce:	a902      	add	r1, sp, #8
   1e4d0:	f242 0009 	movw	r0, #8201	; 0x2009
   1e4d4:	f7ff ff10 	bl	1e2f8 <hci_set_ad>
		if (err) {
   1e4d8:	2800      	cmp	r0, #0
   1e4da:	d0c2      	beq.n	1e462 <le_adv_update.constprop.0+0x7a>
   1e4dc:	4604      	mov	r4, r0
   1e4de:	e7cd      	b.n	1e47c <le_adv_update.constprop.0+0x94>
		d_len = 1;
   1e4e0:	2201      	movs	r2, #1
   1e4e2:	e7f4      	b.n	1e4ce <le_adv_update.constprop.0+0xe6>
			return -EINVAL;
   1e4e4:	f06f 0415 	mvn.w	r4, #21
   1e4e8:	e7c8      	b.n	1e47c <le_adv_update.constprop.0+0x94>

0001e4ea <bt_le_adv_set_enable_legacy>:
{
   1e4ea:	b570      	push	{r4, r5, r6, lr}
   1e4ec:	4606      	mov	r6, r0
   1e4ee:	b086      	sub	sp, #24
   1e4f0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1e4f2:	f242 000a 	movw	r0, #8202	; 0x200a
   1e4f6:	2101      	movs	r1, #1
   1e4f8:	f7f4 fdf2 	bl	130e0 <bt_hci_cmd_create>
	if (!buf) {
   1e4fc:	4604      	mov	r4, r0
   1e4fe:	b1b0      	cbz	r0, 1e52e <bt_le_adv_set_enable_legacy+0x44>
	if (enable) {
   1e500:	3008      	adds	r0, #8
   1e502:	b195      	cbz	r5, 1e52a <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   1e504:	2101      	movs	r1, #1
   1e506:	f001 fb11 	bl	1fb2c <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1e50a:	f106 0210 	add.w	r2, r6, #16
   1e50e:	a903      	add	r1, sp, #12
   1e510:	4620      	mov	r0, r4
   1e512:	9500      	str	r5, [sp, #0]
   1e514:	2306      	movs	r3, #6
   1e516:	f7f4 fdd1 	bl	130bc <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1e51a:	2200      	movs	r2, #0
   1e51c:	4621      	mov	r1, r4
   1e51e:	f242 000a 	movw	r0, #8202	; 0x200a
   1e522:	f7f4 fe15 	bl	13150 <bt_hci_cmd_send_sync>
}
   1e526:	b006      	add	sp, #24
   1e528:	bd70      	pop	{r4, r5, r6, pc}
   1e52a:	4629      	mov	r1, r5
   1e52c:	e7eb      	b.n	1e506 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1e52e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e532:	e7f8      	b.n	1e526 <bt_le_adv_set_enable_legacy+0x3c>

0001e534 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   1e534:	3018      	adds	r0, #24
   1e536:	f001 bfc4 	b.w	204c2 <k_work_cancel_delayable>

0001e53a <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   1e53a:	f7f5 bf21 	b.w	14380 <bt_le_adv_stop>

0001e53e <tx_notify>:
{
   1e53e:	b570      	push	{r4, r5, r6, lr}
   1e540:	4604      	mov	r4, r0
	__asm__ volatile(
   1e542:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e546:	f3ef 8311 	mrs	r3, BASEPRI
   1e54a:	f382 8811 	msr	BASEPRI, r2
   1e54e:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1e552:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1e554:	b920      	cbnz	r0, 1e560 <tx_notify+0x22>
	__asm__ volatile(
   1e556:	f383 8811 	msr	BASEPRI, r3
   1e55a:	f3bf 8f6f 	isb	sy
}
   1e55e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e560:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1e562:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1e564:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e566:	4288      	cmp	r0, r1
	list->tail = node;
   1e568:	bf08      	it	eq
   1e56a:	6262      	streq	r2, [r4, #36]	; 0x24
   1e56c:	f383 8811 	msr	BASEPRI, r3
   1e570:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1e574:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1e578:	f7f5 ff90 	bl	1449c <tx_free>
		cb(conn, user_data);
   1e57c:	4631      	mov	r1, r6
   1e57e:	4620      	mov	r0, r4
   1e580:	47a8      	blx	r5
	while (1) {
   1e582:	e7de      	b.n	1e542 <tx_notify+0x4>

0001e584 <tx_complete_work>:
	tx_notify(conn);
   1e584:	3828      	subs	r0, #40	; 0x28
   1e586:	f7ff bfda 	b.w	1e53e <tx_notify>

0001e58a <bt_conn_reset_rx_state>:
{
   1e58a:	b510      	push	{r4, lr}
   1e58c:	4604      	mov	r4, r0
	if (!conn->rx) {
   1e58e:	6900      	ldr	r0, [r0, #16]
   1e590:	b118      	cbz	r0, 1e59a <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1e592:	f7f7 ff35 	bl	16400 <net_buf_unref>
	conn->rx = NULL;
   1e596:	2300      	movs	r3, #0
   1e598:	6123      	str	r3, [r4, #16]
}
   1e59a:	bd10      	pop	{r4, pc}

0001e59c <conn_cleanup>:
{
   1e59c:	b570      	push	{r4, r5, r6, lr}
   1e59e:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1e5a0:	f100 0638 	add.w	r6, r0, #56	; 0x38
   1e5a4:	2200      	movs	r2, #0
   1e5a6:	2300      	movs	r3, #0
   1e5a8:	4630      	mov	r0, r6
   1e5aa:	f001 fa5f 	bl	1fa6c <net_buf_get>
   1e5ae:	4605      	mov	r5, r0
   1e5b0:	b950      	cbnz	r0, 1e5c8 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   1e5b2:	4620      	mov	r0, r4
   1e5b4:	f7ff ffe9 	bl	1e58a <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1e5b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1e5bc:	2200      	movs	r2, #0
}
   1e5be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1e5c2:	2300      	movs	r3, #0
   1e5c4:	f7fa bdca 	b.w	1915c <k_work_reschedule>
		if (tx_data(buf)->tx) {
   1e5c8:	6968      	ldr	r0, [r5, #20]
   1e5ca:	b108      	cbz	r0, 1e5d0 <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   1e5cc:	f7f5 ff66 	bl	1449c <tx_free>
		net_buf_unref(buf);
   1e5d0:	4628      	mov	r0, r5
   1e5d2:	f7f7 ff15 	bl	16400 <net_buf_unref>
   1e5d6:	e7e5      	b.n	1e5a4 <conn_cleanup+0x8>

0001e5d8 <bt_conn_recv>:
{
   1e5d8:	b570      	push	{r4, r5, r6, lr}
   1e5da:	4616      	mov	r6, r2
   1e5dc:	4604      	mov	r4, r0
   1e5de:	460d      	mov	r5, r1
	tx_notify(conn);
   1e5e0:	f7ff ffad 	bl	1e53e <tx_notify>
	switch (flags) {
   1e5e4:	2e01      	cmp	r6, #1
   1e5e6:	d01a      	beq.n	1e61e <bt_conn_recv+0x46>
   1e5e8:	2e02      	cmp	r6, #2
   1e5ea:	d11a      	bne.n	1e622 <bt_conn_recv+0x4a>
		if (conn->rx) {
   1e5ec:	6923      	ldr	r3, [r4, #16]
   1e5ee:	b113      	cbz	r3, 1e5f6 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   1e5f0:	4620      	mov	r0, r4
   1e5f2:	f7ff ffca 	bl	1e58a <bt_conn_reset_rx_state>
		conn->rx = buf;
   1e5f6:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1e5f8:	6921      	ldr	r1, [r4, #16]
   1e5fa:	898a      	ldrh	r2, [r1, #12]
   1e5fc:	2a01      	cmp	r2, #1
   1e5fe:	d931      	bls.n	1e664 <bt_conn_recv+0x8c>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1e600:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   1e602:	7845      	ldrb	r5, [r0, #1]
   1e604:	7803      	ldrb	r3, [r0, #0]
   1e606:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   1e60a:	3304      	adds	r3, #4
   1e60c:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1e60e:	429a      	cmp	r2, r3
   1e610:	d328      	bcc.n	1e664 <bt_conn_recv+0x8c>
	if (conn->rx->len > acl_total_len) {
   1e612:	d920      	bls.n	1e656 <bt_conn_recv+0x7e>
		bt_conn_reset_rx_state(conn);
   1e614:	4620      	mov	r0, r4
}
   1e616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1e61a:	f7ff bfb6 	b.w	1e58a <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1e61e:	6920      	ldr	r0, [r4, #16]
   1e620:	b918      	cbnz	r0, 1e62a <bt_conn_recv+0x52>
		bt_conn_reset_rx_state(conn);
   1e622:	4620      	mov	r0, r4
   1e624:	f7ff ffb1 	bl	1e58a <bt_conn_reset_rx_state>
   1e628:	e001      	b.n	1e62e <bt_conn_recv+0x56>
		if (!buf->len) {
   1e62a:	89ae      	ldrh	r6, [r5, #12]
   1e62c:	b926      	cbnz	r6, 1e638 <bt_conn_recv+0x60>
		net_buf_unref(buf);
   1e62e:	4628      	mov	r0, r5
}
   1e630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   1e634:	f7f7 bee4 	b.w	16400 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   1e638:	3008      	adds	r0, #8
   1e63a:	f001 faa3 	bl	1fb84 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1e63e:	4286      	cmp	r6, r0
   1e640:	d8ef      	bhi.n	1e622 <bt_conn_recv+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e642:	6920      	ldr	r0, [r4, #16]
   1e644:	89aa      	ldrh	r2, [r5, #12]
   1e646:	68a9      	ldr	r1, [r5, #8]
   1e648:	3008      	adds	r0, #8
   1e64a:	f001 fa66 	bl	1fb1a <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1e64e:	4628      	mov	r0, r5
   1e650:	f7f7 fed6 	bl	16400 <net_buf_unref>
		break;
   1e654:	e7d0      	b.n	1e5f8 <bt_conn_recv+0x20>
	conn->rx = NULL;
   1e656:	2300      	movs	r3, #0
   1e658:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf);
   1e65a:	4620      	mov	r0, r4
}
   1e65c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   1e660:	f000 b993 	b.w	1e98a <bt_l2cap_recv>
}
   1e664:	bd70      	pop	{r4, r5, r6, pc}

0001e666 <bt_conn_ref>:
{
   1e666:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1e668:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e66c:	f3bf 8f5b 	dmb	ish
   1e670:	6813      	ldr	r3, [r2, #0]
   1e672:	f3bf 8f5b 	dmb	ish
		if (!old) {
   1e676:	b17b      	cbz	r3, 1e698 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e678:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1e67c:	1c59      	adds	r1, r3, #1
   1e67e:	e852 4f00 	ldrex	r4, [r2]
   1e682:	429c      	cmp	r4, r3
   1e684:	d104      	bne.n	1e690 <bt_conn_ref+0x2a>
   1e686:	e842 1c00 	strex	ip, r1, [r2]
   1e68a:	f1bc 0f00 	cmp.w	ip, #0
   1e68e:	d1f6      	bne.n	1e67e <bt_conn_ref+0x18>
   1e690:	f3bf 8f5b 	dmb	ish
   1e694:	d1ea      	bne.n	1e66c <bt_conn_ref+0x6>
}
   1e696:	bd10      	pop	{r4, pc}
			return NULL;
   1e698:	4618      	mov	r0, r3
   1e69a:	e7fc      	b.n	1e696 <bt_conn_ref+0x30>

0001e69c <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   1e69c:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1e6a0:	f3bf 8f5b 	dmb	ish
   1e6a4:	e853 2f00 	ldrex	r2, [r3]
   1e6a8:	3a01      	subs	r2, #1
   1e6aa:	e843 2100 	strex	r1, r2, [r3]
   1e6ae:	2900      	cmp	r1, #0
   1e6b0:	d1f8      	bne.n	1e6a4 <bt_conn_unref+0x8>
   1e6b2:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1e6b6:	7883      	ldrb	r3, [r0, #2]
   1e6b8:	2b01      	cmp	r3, #1
   1e6ba:	d108      	bne.n	1e6ce <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e6bc:	f3bf 8f5b 	dmb	ish
   1e6c0:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1e6c4:	f3bf 8f5b 	dmb	ish
   1e6c8:	b90b      	cbnz	r3, 1e6ce <bt_conn_unref+0x32>
		bt_le_adv_resume();
   1e6ca:	f7f5 bea7 	b.w	1441c <bt_le_adv_resume>
}
   1e6ce:	4770      	bx	lr

0001e6d0 <conn_lookup_handle>:
{
   1e6d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e6d4:	4607      	mov	r7, r0
   1e6d6:	460e      	mov	r6, r1
   1e6d8:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1e6da:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1e6dc:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1e6e0:	42b4      	cmp	r4, r6
   1e6e2:	d103      	bne.n	1e6ec <conn_lookup_handle+0x1c>
	return NULL;
   1e6e4:	2300      	movs	r3, #0
}
   1e6e6:	4618      	mov	r0, r3
   1e6e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1e6ec:	fb09 7004 	mla	r0, r9, r4, r7
   1e6f0:	f7ff ffb9 	bl	1e666 <bt_conn_ref>
   1e6f4:	4603      	mov	r3, r0
		if (!conn) {
   1e6f6:	b158      	cbz	r0, 1e710 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1e6f8:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1e6fa:	2d01      	cmp	r5, #1
   1e6fc:	d002      	beq.n	1e704 <conn_lookup_handle+0x34>
   1e6fe:	3d07      	subs	r5, #7
   1e700:	2d01      	cmp	r5, #1
   1e702:	d803      	bhi.n	1e70c <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1e704:	881a      	ldrh	r2, [r3, #0]
   1e706:	4542      	cmp	r2, r8
   1e708:	d0ed      	beq.n	1e6e6 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1e70a:	4618      	mov	r0, r3
   1e70c:	f7ff ffc6 	bl	1e69c <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1e710:	3401      	adds	r4, #1
   1e712:	e7e5      	b.n	1e6e0 <conn_lookup_handle+0x10>

0001e714 <bt_conn_connected>:
{
   1e714:	b510      	push	{r4, lr}
   1e716:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1e718:	f7f6 faf4 	bl	14d04 <bt_l2cap_connected>
	notify_connected(conn);
   1e71c:	4620      	mov	r0, r4
}
   1e71e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1e722:	f7f5 bec5 	b.w	144b0 <notify_connected>

0001e726 <bt_conn_get_security>:
}
   1e726:	2001      	movs	r0, #1
   1e728:	4770      	bx	lr

0001e72a <bt_conn_is_peer_addr_le>:
{
   1e72a:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1e72c:	7a03      	ldrb	r3, [r0, #8]
   1e72e:	428b      	cmp	r3, r1
{
   1e730:	4604      	mov	r4, r0
   1e732:	4615      	mov	r5, r2
	if (id != conn->id) {
   1e734:	d115      	bne.n	1e762 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1e736:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1e73a:	2207      	movs	r2, #7
   1e73c:	4628      	mov	r0, r5
   1e73e:	f7ff fa61 	bl	1dc04 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1e742:	b180      	cbz	r0, 1e766 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1e744:	78e3      	ldrb	r3, [r4, #3]
   1e746:	2207      	movs	r2, #7
   1e748:	b943      	cbnz	r3, 1e75c <bt_conn_is_peer_addr_le+0x32>
   1e74a:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1e74e:	4628      	mov	r0, r5
   1e750:	f7ff fa58 	bl	1dc04 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1e754:	fab0 f080 	clz	r0, r0
   1e758:	0940      	lsrs	r0, r0, #5
}
   1e75a:	bd38      	pop	{r3, r4, r5, pc}
   1e75c:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1e760:	e7f5      	b.n	1e74e <bt_conn_is_peer_addr_le+0x24>
		return false;
   1e762:	2000      	movs	r0, #0
   1e764:	e7f9      	b.n	1e75a <bt_conn_is_peer_addr_le+0x30>
		return true;
   1e766:	2001      	movs	r0, #1
   1e768:	e7f7      	b.n	1e75a <bt_conn_is_peer_addr_le+0x30>

0001e76a <bt_conn_exists_le>:
{
   1e76a:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1e76c:	f7f6 f928 	bl	149c0 <bt_conn_lookup_addr_le>
	if (conn) {
   1e770:	b110      	cbz	r0, 1e778 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   1e772:	f7ff ff93 	bl	1e69c <bt_conn_unref>
		return true;
   1e776:	2001      	movs	r0, #1
}
   1e778:	bd08      	pop	{r3, pc}

0001e77a <bt_conn_le_conn_update>:
{
   1e77a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e77c:	4607      	mov	r7, r0
   1e77e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1e780:	f242 0013 	movw	r0, #8211	; 0x2013
   1e784:	210e      	movs	r1, #14
   1e786:	f7f4 fcab 	bl	130e0 <bt_hci_cmd_create>
	if (!buf) {
   1e78a:	4606      	mov	r6, r0
   1e78c:	b1d0      	cbz	r0, 1e7c4 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1e78e:	210e      	movs	r1, #14
   1e790:	3008      	adds	r0, #8
   1e792:	f001 f9bc 	bl	1fb0e <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1e796:	220e      	movs	r2, #14
   1e798:	4604      	mov	r4, r0
   1e79a:	2100      	movs	r1, #0
   1e79c:	f7ff fa64 	bl	1dc68 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1e7a0:	883b      	ldrh	r3, [r7, #0]
   1e7a2:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1e7a4:	882b      	ldrh	r3, [r5, #0]
   1e7a6:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1e7a8:	886b      	ldrh	r3, [r5, #2]
   1e7aa:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1e7ac:	88ab      	ldrh	r3, [r5, #4]
   1e7ae:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1e7b0:	88eb      	ldrh	r3, [r5, #6]
   1e7b2:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e7b4:	4631      	mov	r1, r6
   1e7b6:	2200      	movs	r2, #0
}
   1e7b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e7bc:	f242 0013 	movw	r0, #8211	; 0x2013
   1e7c0:	f7f4 bcc6 	b.w	13150 <bt_hci_cmd_send_sync>
}
   1e7c4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e7ca <l2cap_connected>:
}
   1e7ca:	4770      	bx	lr

0001e7cc <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   1e7cc:	3010      	adds	r0, #16
   1e7ce:	f001 be78 	b.w	204c2 <k_work_cancel_delayable>

0001e7d2 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1e7d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e7d4:	4607      	mov	r7, r0
   1e7d6:	460e      	mov	r6, r1
   1e7d8:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   1e7da:	2300      	movs	r3, #0
   1e7dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e7e0:	2104      	movs	r1, #4
   1e7e2:	2000      	movs	r0, #0
   1e7e4:	f7f6 f9aa 	bl	14b3c <bt_conn_create_pdu_timeout>
	if (!buf) {
   1e7e8:	4604      	mov	r4, r0
   1e7ea:	b130      	cbz	r0, 1e7fa <l2cap_create_le_sig_pdu.isra.0+0x28>
   1e7ec:	2104      	movs	r1, #4
   1e7ee:	3008      	adds	r0, #8
   1e7f0:	f001 f98d 	bl	1fb0e <net_buf_simple_add>
	hdr->code = code;
   1e7f4:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   1e7f6:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1e7f8:	8045      	strh	r5, [r0, #2]
}
   1e7fa:	4620      	mov	r0, r4
   1e7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e7fe <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e7fe:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1e800:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e802:	b17b      	cbz	r3, 1e824 <bt_l2cap_chan_remove+0x26>
   1e804:	3b08      	subs	r3, #8
   1e806:	2200      	movs	r2, #0
   1e808:	b163      	cbz	r3, 1e824 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1e80a:	428b      	cmp	r3, r1
   1e80c:	f103 0408 	add.w	r4, r3, #8
   1e810:	d10f      	bne.n	1e832 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   1e812:	688b      	ldr	r3, [r1, #8]
   1e814:	b93a      	cbnz	r2, 1e826 <bt_l2cap_chan_remove+0x28>
   1e816:	6d42      	ldr	r2, [r0, #84]	; 0x54
	list->head = node;
   1e818:	6503      	str	r3, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1e81a:	4294      	cmp	r4, r2
   1e81c:	d100      	bne.n	1e820 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1e81e:	6543      	str	r3, [r0, #84]	; 0x54
	parent->next = child;
   1e820:	2300      	movs	r3, #0
   1e822:	608b      	str	r3, [r1, #8]
}
   1e824:	bd10      	pop	{r4, pc}
   1e826:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e828:	6d43      	ldr	r3, [r0, #84]	; 0x54
   1e82a:	429c      	cmp	r4, r3
	list->tail = node;
   1e82c:	bf08      	it	eq
   1e82e:	6542      	streq	r2, [r0, #84]	; 0x54
}
   1e830:	e7f6      	b.n	1e820 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e832:	2c00      	cmp	r4, #0
   1e834:	d0f6      	beq.n	1e824 <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e836:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e838:	2b00      	cmp	r3, #0
   1e83a:	d0f3      	beq.n	1e824 <bt_l2cap_chan_remove+0x26>
   1e83c:	3b08      	subs	r3, #8
   1e83e:	4622      	mov	r2, r4
   1e840:	e7e2      	b.n	1e808 <bt_l2cap_chan_remove+0xa>

0001e842 <bt_l2cap_chan_del>:
{
   1e842:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1e844:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1e848:	4604      	mov	r4, r0
	if (!chan->conn) {
   1e84a:	b123      	cbz	r3, 1e856 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1e84c:	686b      	ldr	r3, [r5, #4]
   1e84e:	b103      	cbz	r3, 1e852 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1e850:	4798      	blx	r3
	chan->conn = NULL;
   1e852:	2300      	movs	r3, #0
   1e854:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1e856:	68e3      	ldr	r3, [r4, #12]
   1e858:	b10b      	cbz	r3, 1e85e <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1e85a:	4620      	mov	r0, r4
   1e85c:	4798      	blx	r3
	if (ops->released) {
   1e85e:	69eb      	ldr	r3, [r5, #28]
   1e860:	b11b      	cbz	r3, 1e86a <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1e862:	4620      	mov	r0, r4
}
   1e864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1e868:	4718      	bx	r3
}
   1e86a:	bd70      	pop	{r4, r5, r6, pc}

0001e86c <l2cap_rtx_timeout>:
{
   1e86c:	b508      	push	{r3, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   1e86e:	f1a0 0110 	sub.w	r1, r0, #16
   1e872:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1e876:	f7ff ffc2 	bl	1e7fe <bt_l2cap_chan_remove>
}
   1e87a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_l2cap_chan_del(&chan->chan);
   1e87e:	4608      	mov	r0, r1
   1e880:	f7ff bfdf 	b.w	1e842 <bt_l2cap_chan_del>

0001e884 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e884:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1e886:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e888:	b18b      	cbz	r3, 1e8ae <bt_l2cap_disconnected+0x2a>
   1e88a:	f1b3 0008 	subs.w	r0, r3, #8
   1e88e:	d00e      	beq.n	1e8ae <bt_l2cap_disconnected+0x2a>
   1e890:	681c      	ldr	r4, [r3, #0]
   1e892:	b104      	cbz	r4, 1e896 <bt_l2cap_disconnected+0x12>
   1e894:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1e896:	f7ff ffd4 	bl	1e842 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e89a:	b144      	cbz	r4, 1e8ae <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e89c:	f114 0308 	adds.w	r3, r4, #8
   1e8a0:	d002      	beq.n	1e8a8 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e8a2:	68a3      	ldr	r3, [r4, #8]
   1e8a4:	b103      	cbz	r3, 1e8a8 <bt_l2cap_disconnected+0x24>
   1e8a6:	3b08      	subs	r3, #8
{
   1e8a8:	4620      	mov	r0, r4
   1e8aa:	461c      	mov	r4, r3
   1e8ac:	e7f3      	b.n	1e896 <bt_l2cap_disconnected+0x12>
}
   1e8ae:	bd10      	pop	{r4, pc}

0001e8b0 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1e8b0:	3104      	adds	r1, #4
   1e8b2:	f7f6 b943 	b.w	14b3c <bt_conn_create_pdu_timeout>

0001e8b6 <bt_l2cap_send_cb>:
{
   1e8b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e8ba:	4614      	mov	r4, r2
   1e8bc:	4605      	mov	r5, r0
   1e8be:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1e8c0:	f102 0008 	add.w	r0, r2, #8
   1e8c4:	2104      	movs	r1, #4
   1e8c6:	461e      	mov	r6, r3
   1e8c8:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1e8cc:	f001 f936 	bl	1fb3c <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1e8d0:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1e8d2:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1e8d4:	3a04      	subs	r2, #4
   1e8d6:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1e8d8:	4643      	mov	r3, r8
   1e8da:	4632      	mov	r2, r6
   1e8dc:	4621      	mov	r1, r4
   1e8de:	4628      	mov	r0, r5
}
   1e8e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1e8e4:	f7f5 bebc 	b.w	14660 <bt_conn_send_cb>

0001e8e8 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   1e8e8:	898b      	ldrh	r3, [r1, #12]
   1e8ea:	2b03      	cmp	r3, #3
{
   1e8ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e8ee:	4605      	mov	r5, r0
   1e8f0:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1e8f2:	d927      	bls.n	1e944 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1e8f4:	2104      	movs	r1, #4
   1e8f6:	f104 0008 	add.w	r0, r4, #8
   1e8fa:	f001 f92f 	bl	1fb5c <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1e8fe:	89a3      	ldrh	r3, [r4, #12]
   1e900:	8842      	ldrh	r2, [r0, #2]
   1e902:	429a      	cmp	r2, r3
   1e904:	d11e      	bne.n	1e944 <l2cap_recv+0x5c>
	if (!hdr->ident) {
   1e906:	7841      	ldrb	r1, [r0, #1]
   1e908:	b1e1      	cbz	r1, 1e944 <l2cap_recv+0x5c>
	switch (hdr->code) {
   1e90a:	7803      	ldrb	r3, [r0, #0]
   1e90c:	2b01      	cmp	r3, #1
   1e90e:	d019      	beq.n	1e944 <l2cap_recv+0x5c>
   1e910:	2b13      	cmp	r3, #19
   1e912:	d017      	beq.n	1e944 <l2cap_recv+0x5c>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1e914:	2202      	movs	r2, #2
   1e916:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1e918:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1e91a:	f7ff ff5a 	bl	1e7d2 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1e91e:	4604      	mov	r4, r0
   1e920:	b180      	cbz	r0, 1e944 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   1e922:	2102      	movs	r1, #2
   1e924:	3008      	adds	r0, #8
   1e926:	f001 f8f2 	bl	1fb0e <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1e92a:	2300      	movs	r3, #0
   1e92c:	7003      	strb	r3, [r0, #0]
   1e92e:	7043      	strb	r3, [r0, #1]
   1e930:	4622      	mov	r2, r4
   1e932:	9300      	str	r3, [sp, #0]
   1e934:	2105      	movs	r1, #5
   1e936:	4628      	mov	r0, r5
   1e938:	f7ff ffbd 	bl	1e8b6 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1e93c:	b110      	cbz	r0, 1e944 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   1e93e:	4620      	mov	r0, r4
   1e940:	f7f7 fd5e 	bl	16400 <net_buf_unref>
}
   1e944:	2000      	movs	r0, #0
   1e946:	b003      	add	sp, #12
   1e948:	bd30      	pop	{r4, r5, pc}

0001e94a <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e94a:	6d00      	ldr	r0, [r0, #80]	; 0x50
   1e94c:	b160      	cbz	r0, 1e968 <bt_l2cap_le_lookup_tx_cid+0x1e>
   1e94e:	3808      	subs	r0, #8
   1e950:	b900      	cbnz	r0, 1e954 <bt_l2cap_le_lookup_tx_cid+0xa>
   1e952:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1e954:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
   1e958:	428b      	cmp	r3, r1
   1e95a:	d005      	beq.n	1e968 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e95c:	f110 0308 	adds.w	r3, r0, #8
   1e960:	d001      	beq.n	1e966 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e962:	6880      	ldr	r0, [r0, #8]
   1e964:	e7f2      	b.n	1e94c <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1e966:	4618      	mov	r0, r3
}
   1e968:	4770      	bx	lr

0001e96a <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e96a:	6d00      	ldr	r0, [r0, #80]	; 0x50
   1e96c:	b160      	cbz	r0, 1e988 <bt_l2cap_le_lookup_rx_cid+0x1e>
   1e96e:	3808      	subs	r0, #8
   1e970:	b900      	cbnz	r0, 1e974 <bt_l2cap_le_lookup_rx_cid+0xa>
   1e972:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1e974:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   1e978:	428b      	cmp	r3, r1
   1e97a:	d005      	beq.n	1e988 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e97c:	f110 0308 	adds.w	r3, r0, #8
   1e980:	d001      	beq.n	1e986 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e982:	6880      	ldr	r0, [r0, #8]
   1e984:	e7f2      	b.n	1e96c <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1e986:	4618      	mov	r0, r3
}
   1e988:	4770      	bx	lr

0001e98a <bt_l2cap_recv>:
{
   1e98a:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1e98c:	898b      	ldrh	r3, [r1, #12]
   1e98e:	2b03      	cmp	r3, #3
{
   1e990:	4605      	mov	r5, r0
   1e992:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1e994:	d804      	bhi.n	1e9a0 <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   1e996:	4620      	mov	r0, r4
}
   1e998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1e99c:	f7f7 bd30 	b.w	16400 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1e9a0:	2104      	movs	r1, #4
   1e9a2:	f104 0008 	add.w	r0, r4, #8
   1e9a6:	f001 f8d9 	bl	1fb5c <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1e9aa:	8841      	ldrh	r1, [r0, #2]
   1e9ac:	4628      	mov	r0, r5
   1e9ae:	f7ff ffdc 	bl	1e96a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1e9b2:	2800      	cmp	r0, #0
   1e9b4:	d0ef      	beq.n	1e996 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   1e9b6:	6843      	ldr	r3, [r0, #4]
   1e9b8:	4621      	mov	r1, r4
   1e9ba:	691b      	ldr	r3, [r3, #16]
   1e9bc:	4798      	blx	r3
   1e9be:	e7ea      	b.n	1e996 <bt_l2cap_recv+0xc>

0001e9c0 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1e9c0:	4770      	bx	lr

0001e9c2 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1e9c2:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   1e9c4:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1e9c6:	b128      	cbz	r0, 1e9d4 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e9c8:	6859      	ldr	r1, [r3, #4]
   1e9ca:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1e9cc:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e9ce:	4288      	cmp	r0, r1
	list->tail = node;
   1e9d0:	bf08      	it	eq
   1e9d2:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1e9d4:	4770      	bx	lr

0001e9d6 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e9d6:	4603      	mov	r3, r0
   1e9d8:	6800      	ldr	r0, [r0, #0]
   1e9da:	2200      	movs	r2, #0
   1e9dc:	b900      	cbnz	r0, 1e9e0 <sys_slist_find_and_remove+0xa>
   1e9de:	4770      	bx	lr
   1e9e0:	4288      	cmp	r0, r1
   1e9e2:	d110      	bne.n	1ea06 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   1e9e4:	6808      	ldr	r0, [r1, #0]
   1e9e6:	b942      	cbnz	r2, 1e9fa <sys_slist_find_and_remove+0x24>
   1e9e8:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1e9ea:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e9ec:	4291      	cmp	r1, r2
   1e9ee:	d100      	bne.n	1e9f2 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1e9f0:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1e9f2:	2300      	movs	r3, #0
   1e9f4:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e9f6:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   1e9f8:	4770      	bx	lr
	parent->next = child;
   1e9fa:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e9fc:	6858      	ldr	r0, [r3, #4]
   1e9fe:	4281      	cmp	r1, r0
	list->tail = node;
   1ea00:	bf08      	it	eq
   1ea02:	605a      	streq	r2, [r3, #4]
}
   1ea04:	e7f5      	b.n	1e9f2 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ea06:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ea08:	6800      	ldr	r0, [r0, #0]
   1ea0a:	e7e7      	b.n	1e9dc <sys_slist_find_and_remove+0x6>

0001ea0c <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1ea0c:	4603      	mov	r3, r0
	size_t bytes = 0;
   1ea0e:	2000      	movs	r0, #0

	while (buf) {
   1ea10:	b903      	cbnz	r3, 1ea14 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1ea12:	4770      	bx	lr
		bytes += buf->len;
   1ea14:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1ea16:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1ea18:	4410      	add	r0, r2
		buf = buf->frags;
   1ea1a:	e7f9      	b.n	1ea10 <net_buf_frags_len+0x4>

0001ea1c <att_sent>:
	if (chan->ops->sent) {
   1ea1c:	684b      	ldr	r3, [r1, #4]
   1ea1e:	695b      	ldr	r3, [r3, #20]
{
   1ea20:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1ea22:	b103      	cbz	r3, 1ea26 <att_sent+0xa>
		chan->ops->sent(chan);
   1ea24:	4718      	bx	r3
}
   1ea26:	4770      	bx	lr

0001ea28 <attr_read_type_cb>:
{
   1ea28:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1ea2a:	68d4      	ldr	r4, [r2, #12]
   1ea2c:	7823      	ldrb	r3, [r4, #0]
   1ea2e:	3102      	adds	r1, #2
   1ea30:	b913      	cbnz	r3, 1ea38 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1ea32:	7021      	strb	r1, [r4, #0]
	return true;
   1ea34:	2001      	movs	r0, #1
   1ea36:	e006      	b.n	1ea46 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1ea38:	428b      	cmp	r3, r1
   1ea3a:	d0fb      	beq.n	1ea34 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1ea3c:	8983      	ldrh	r3, [r0, #12]
   1ea3e:	3b02      	subs	r3, #2
   1ea40:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1ea42:	2000      	movs	r0, #0
   1ea44:	6110      	str	r0, [r2, #16]
}
   1ea46:	bd10      	pop	{r4, pc}

0001ea48 <att_prepare_write_req>:
}
   1ea48:	2006      	movs	r0, #6
   1ea4a:	4770      	bx	lr

0001ea4c <att_op_get_type>:
	switch (op) {
   1ea4c:	281e      	cmp	r0, #30
   1ea4e:	d816      	bhi.n	1ea7e <att_op_get_type+0x32>
   1ea50:	b308      	cbz	r0, 1ea96 <att_op_get_type+0x4a>
   1ea52:	1e43      	subs	r3, r0, #1
   1ea54:	2b1d      	cmp	r3, #29
   1ea56:	d81e      	bhi.n	1ea96 <att_op_get_type+0x4a>
   1ea58:	e8df f003 	tbb	[pc, r3]
   1ea5c:	23172317 	.word	0x23172317
   1ea60:	23172317 	.word	0x23172317
   1ea64:	23172317 	.word	0x23172317
   1ea68:	23172317 	.word	0x23172317
   1ea6c:	1d172317 	.word	0x1d172317
   1ea70:	2317231d 	.word	0x2317231d
   1ea74:	1d191d17 	.word	0x1d191d17
   1ea78:	0f1b      	.short	0x0f1b
   1ea7a:	2004      	movs	r0, #4
   1ea7c:	4770      	bx	lr
   1ea7e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1ea82:	2b52      	cmp	r3, #82	; 0x52
   1ea84:	d107      	bne.n	1ea96 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1ea86:	2000      	movs	r0, #0
}
   1ea88:	4770      	bx	lr
		return ATT_RESPONSE;
   1ea8a:	2002      	movs	r0, #2
   1ea8c:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1ea8e:	2003      	movs	r0, #3
   1ea90:	4770      	bx	lr
		return ATT_INDICATION;
   1ea92:	2005      	movs	r0, #5
   1ea94:	4770      	bx	lr
		return ATT_COMMAND;
   1ea96:	f010 0f40 	tst.w	r0, #64	; 0x40
   1ea9a:	bf0c      	ite	eq
   1ea9c:	2006      	moveq	r0, #6
   1ea9e:	2000      	movne	r0, #0
   1eaa0:	4770      	bx	lr
		return ATT_REQUEST;
   1eaa2:	2001      	movs	r0, #1
   1eaa4:	4770      	bx	lr

0001eaa6 <bt_gatt_foreach_attr>:
{
   1eaa6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1eaa8:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1eaac:	2300      	movs	r3, #0
   1eaae:	9300      	str	r3, [sp, #0]
   1eab0:	461a      	mov	r2, r3
   1eab2:	f7f7 f88d 	bl	15bd0 <bt_gatt_foreach_attr_type>
}
   1eab6:	b005      	add	sp, #20
   1eab8:	f85d fb04 	ldr.w	pc, [sp], #4

0001eabc <att_chan_read>:
{
   1eabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eac0:	4680      	mov	r8, r0
   1eac2:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1eac4:	4610      	mov	r0, r2
{
   1eac6:	4699      	mov	r9, r3
   1eac8:	468b      	mov	fp, r1
   1eaca:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1eacc:	f7ff ff9e 	bl	1ea0c <net_buf_frags_len>
   1ead0:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
   1ead4:	4283      	cmp	r3, r0
   1ead6:	d97a      	bls.n	1ebce <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1ead8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1eadc:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1eade:	4630      	mov	r0, r6
   1eae0:	f000 fff3 	bl	1faca <net_buf_frag_last>
	size_t len, total = 0;
   1eae4:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1eae8:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1eaea:	4630      	mov	r0, r6
   1eaec:	f7ff ff8e 	bl	1ea0c <net_buf_frags_len>
   1eaf0:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   1eaf4:	f105 0708 	add.w	r7, r5, #8
   1eaf8:	1a24      	subs	r4, r4, r0
   1eafa:	4638      	mov	r0, r7
   1eafc:	f001 f842 	bl	1fb84 <net_buf_simple_tailroom>
   1eb00:	4284      	cmp	r4, r0
   1eb02:	d211      	bcs.n	1eb28 <att_chan_read+0x6c>
   1eb04:	4630      	mov	r0, r6
   1eb06:	f7ff ff81 	bl	1ea0c <net_buf_frags_len>
   1eb0a:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   1eb0e:	1a24      	subs	r4, r4, r0
		if (!len) {
   1eb10:	bb34      	cbnz	r4, 1eb60 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1eb12:	79b0      	ldrb	r0, [r6, #6]
   1eb14:	f7f7 fbb8 	bl	16288 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1eb18:	2200      	movs	r2, #0
   1eb1a:	2300      	movs	r3, #0
   1eb1c:	f000 ffa1 	bl	1fa62 <net_buf_alloc_fixed>
			if (!frag) {
   1eb20:	4605      	mov	r5, r0
   1eb22:	b930      	cbnz	r0, 1eb32 <att_chan_read+0x76>
	return total;
   1eb24:	4657      	mov	r7, sl
   1eb26:	e02c      	b.n	1eb82 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1eb28:	4638      	mov	r0, r7
   1eb2a:	f001 f82b 	bl	1fb84 <net_buf_simple_tailroom>
   1eb2e:	4604      	mov	r4, r0
   1eb30:	e7ee      	b.n	1eb10 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1eb32:	4601      	mov	r1, r0
   1eb34:	4630      	mov	r0, r6
   1eb36:	f000 ffd9 	bl	1faec <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1eb3a:	4630      	mov	r0, r6
   1eb3c:	f7ff ff66 	bl	1ea0c <net_buf_frags_len>
   1eb40:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   1eb44:	f105 0708 	add.w	r7, r5, #8
   1eb48:	1a24      	subs	r4, r4, r0
   1eb4a:	4638      	mov	r0, r7
   1eb4c:	f001 f81a 	bl	1fb84 <net_buf_simple_tailroom>
   1eb50:	4284      	cmp	r4, r0
   1eb52:	d21a      	bcs.n	1eb8a <att_chan_read+0xce>
   1eb54:	4630      	mov	r0, r6
   1eb56:	f7ff ff59 	bl	1ea0c <net_buf_frags_len>
   1eb5a:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   1eb5e:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1eb60:	68a9      	ldr	r1, [r5, #8]
   1eb62:	89aa      	ldrh	r2, [r5, #12]
   1eb64:	f8db 7004 	ldr.w	r7, [fp, #4]
   1eb68:	9803      	ldr	r0, [sp, #12]
   1eb6a:	f8cd 9000 	str.w	r9, [sp]
   1eb6e:	440a      	add	r2, r1
   1eb70:	b2a3      	uxth	r3, r4
   1eb72:	4659      	mov	r1, fp
   1eb74:	47b8      	blx	r7
		if (read < 0) {
   1eb76:	1e07      	subs	r7, r0, #0
   1eb78:	da0c      	bge.n	1eb94 <att_chan_read+0xd8>
				return total;
   1eb7a:	f1ba 0f00 	cmp.w	sl, #0
   1eb7e:	bf18      	it	ne
   1eb80:	4657      	movne	r7, sl
}
   1eb82:	4638      	mov	r0, r7
   1eb84:	b005      	add	sp, #20
   1eb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb8a:	4638      	mov	r0, r7
   1eb8c:	f000 fffa 	bl	1fb84 <net_buf_simple_tailroom>
   1eb90:	4604      	mov	r4, r0
   1eb92:	e7e5      	b.n	1eb60 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1eb94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1eb96:	b993      	cbnz	r3, 1ebbe <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1eb98:	4639      	mov	r1, r7
   1eb9a:	f105 0008 	add.w	r0, r5, #8
   1eb9e:	f000 ffb6 	bl	1fb0e <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1eba2:	4630      	mov	r0, r6
   1eba4:	f7ff ff32 	bl	1ea0c <net_buf_frags_len>
   1eba8:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
		offset += read;
   1ebac:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1ebae:	4283      	cmp	r3, r0
		total += read;
   1ebb0:	44ba      	add	sl, r7
		offset += read;
   1ebb2:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1ebb6:	d9b5      	bls.n	1eb24 <att_chan_read+0x68>
   1ebb8:	42a7      	cmp	r7, r4
   1ebba:	d096      	beq.n	1eaea <att_chan_read+0x2e>
   1ebbc:	e7b2      	b.n	1eb24 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1ebbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1ebc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ebc2:	4639      	mov	r1, r7
   1ebc4:	4628      	mov	r0, r5
   1ebc6:	4798      	blx	r3
   1ebc8:	2800      	cmp	r0, #0
   1ebca:	d1e5      	bne.n	1eb98 <att_chan_read+0xdc>
   1ebcc:	e7aa      	b.n	1eb24 <att_chan_read+0x68>
		return 0;
   1ebce:	2700      	movs	r7, #0
   1ebd0:	e7d7      	b.n	1eb82 <att_chan_read+0xc6>

0001ebd2 <find_type_cb>:
{
   1ebd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   1ebd6:	f8d2 9000 	ldr.w	r9, [r2]
{
   1ebda:	b091      	sub	sp, #68	; 0x44
   1ebdc:	4607      	mov	r7, r0
   1ebde:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ebe0:	2500      	movs	r5, #0
   1ebe2:	f642 0301 	movw	r3, #10241	; 0x2801
   1ebe6:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1ebe8:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ebec:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1ebf0:	a90b      	add	r1, sp, #44	; 0x2c
{
   1ebf2:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ebf4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1ebf8:	f7ff f860 	bl	1dcbc <bt_uuid_cmp>
   1ebfc:	2800      	cmp	r0, #0
   1ebfe:	d079      	beq.n	1ecf4 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1ec00:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1ec04:	6838      	ldr	r0, [r7, #0]
   1ec06:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1ec0a:	a90b      	add	r1, sp, #44	; 0x2c
   1ec0c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1ec10:	f7ff f854 	bl	1dcbc <bt_uuid_cmp>
   1ec14:	b138      	cbz	r0, 1ec26 <find_type_cb+0x54>
		if (data->group &&
   1ec16:	68a3      	ldr	r3, [r4, #8]
   1ec18:	b11b      	cbz	r3, 1ec22 <find_type_cb+0x50>
   1ec1a:	885a      	ldrh	r2, [r3, #2]
   1ec1c:	42b2      	cmp	r2, r6
   1ec1e:	d200      	bcs.n	1ec22 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1ec20:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1ec22:	2001      	movs	r0, #1
   1ec24:	e009      	b.n	1ec3a <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1ec26:	6861      	ldr	r1, [r4, #4]
   1ec28:	4608      	mov	r0, r1
   1ec2a:	f7ff feef 	bl	1ea0c <net_buf_frags_len>
   1ec2e:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
   1ec32:	1a1b      	subs	r3, r3, r0
   1ec34:	2b03      	cmp	r3, #3
   1ec36:	d803      	bhi.n	1ec40 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1ec38:	2000      	movs	r0, #0
}
   1ec3a:	b011      	add	sp, #68	; 0x44
   1ec3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1ec40:	4608      	mov	r0, r1
   1ec42:	f000 ff42 	bl	1faca <net_buf_frag_last>
   1ec46:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1ec48:	6860      	ldr	r0, [r4, #4]
   1ec4a:	f7ff fedf 	bl	1ea0c <net_buf_frags_len>
   1ec4e:	f8b9 a086 	ldrh.w	sl, [r9, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   1ec52:	f105 0b08 	add.w	fp, r5, #8
   1ec56:	ebaa 0a00 	sub.w	sl, sl, r0
   1ec5a:	4658      	mov	r0, fp
   1ec5c:	f000 ff92 	bl	1fb84 <net_buf_simple_tailroom>
   1ec60:	4582      	cmp	sl, r0
   1ec62:	d23f      	bcs.n	1ece4 <find_type_cb+0x112>
   1ec64:	6860      	ldr	r0, [r4, #4]
   1ec66:	f7ff fed1 	bl	1ea0c <net_buf_frags_len>
   1ec6a:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
   1ec6e:	1a18      	subs	r0, r3, r0
	if (!len) {
   1ec70:	b970      	cbnz	r0, 1ec90 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1ec72:	6863      	ldr	r3, [r4, #4]
   1ec74:	7998      	ldrb	r0, [r3, #6]
   1ec76:	f7f7 fb07 	bl	16288 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1ec7a:	2200      	movs	r2, #0
   1ec7c:	2300      	movs	r3, #0
   1ec7e:	f000 fef0 	bl	1fa62 <net_buf_alloc_fixed>
		if (!frag) {
   1ec82:	4605      	mov	r5, r0
   1ec84:	2800      	cmp	r0, #0
   1ec86:	d0d7      	beq.n	1ec38 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1ec88:	4601      	mov	r1, r0
   1ec8a:	6860      	ldr	r0, [r4, #4]
   1ec8c:	f000 ff2e 	bl	1faec <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1ec90:	2300      	movs	r3, #0
   1ec92:	9300      	str	r3, [sp, #0]
   1ec94:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1ec98:	4639      	mov	r1, r7
   1ec9a:	2310      	movs	r3, #16
   1ec9c:	aa02      	add	r2, sp, #8
   1ec9e:	4640      	mov	r0, r8
   1eca0:	47c8      	blx	r9
	if (read < 0) {
   1eca2:	1e07      	subs	r7, r0, #0
   1eca4:	db26      	blt.n	1ecf4 <find_type_cb+0x122>
	if (read != data->value_len) {
   1eca6:	7c22      	ldrb	r2, [r4, #16]
   1eca8:	68e0      	ldr	r0, [r4, #12]
   1ecaa:	42ba      	cmp	r2, r7
   1ecac:	d01e      	beq.n	1ecec <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1ecae:	4601      	mov	r1, r0
   1ecb0:	a80b      	add	r0, sp, #44	; 0x2c
   1ecb2:	f7ff f82d 	bl	1dd10 <bt_uuid_create>
   1ecb6:	b1e8      	cbz	r0, 1ecf4 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1ecb8:	b2fa      	uxtb	r2, r7
   1ecba:	a902      	add	r1, sp, #8
   1ecbc:	a806      	add	r0, sp, #24
   1ecbe:	f7ff f827 	bl	1dd10 <bt_uuid_create>
   1ecc2:	b1b8      	cbz	r0, 1ecf4 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1ecc4:	a906      	add	r1, sp, #24
   1ecc6:	a80b      	add	r0, sp, #44	; 0x2c
   1ecc8:	f7fe fff8 	bl	1dcbc <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1eccc:	b990      	cbnz	r0, 1ecf4 <find_type_cb+0x122>
	data->err = 0x00;
   1ecce:	2300      	movs	r3, #0
   1ecd0:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1ecd2:	2104      	movs	r1, #4
   1ecd4:	f105 0008 	add.w	r0, r5, #8
   1ecd8:	f000 ff19 	bl	1fb0e <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1ecdc:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1ecde:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1ece0:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1ece2:	e79e      	b.n	1ec22 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1ece4:	4658      	mov	r0, fp
   1ece6:	f000 ff4d 	bl	1fb84 <net_buf_simple_tailroom>
   1ecea:	e7c1      	b.n	1ec70 <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   1ecec:	a902      	add	r1, sp, #8
   1ecee:	f7fe ff89 	bl	1dc04 <memcmp>
   1ecf2:	e7eb      	b.n	1eccc <find_type_cb+0xfa>
	data->group = NULL;
   1ecf4:	2300      	movs	r3, #0
   1ecf6:	60a3      	str	r3, [r4, #8]
   1ecf8:	e793      	b.n	1ec22 <find_type_cb+0x50>

0001ecfa <find_info_cb>:
{
   1ecfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1ecfc:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1ecfe:	6817      	ldr	r7, [r2, #0]
{
   1ed00:	4605      	mov	r5, r0
   1ed02:	460e      	mov	r6, r1
   1ed04:	4614      	mov	r4, r2
	if (!data->rsp) {
   1ed06:	b963      	cbnz	r3, 1ed22 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1ed08:	6850      	ldr	r0, [r2, #4]
   1ed0a:	2101      	movs	r1, #1
   1ed0c:	3008      	adds	r0, #8
   1ed0e:	f000 fefe 	bl	1fb0e <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1ed12:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1ed14:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1ed16:	781b      	ldrb	r3, [r3, #0]
   1ed18:	2b00      	cmp	r3, #0
   1ed1a:	bf0c      	ite	eq
   1ed1c:	2301      	moveq	r3, #1
   1ed1e:	2302      	movne	r3, #2
   1ed20:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1ed22:	68a3      	ldr	r3, [r4, #8]
   1ed24:	781b      	ldrb	r3, [r3, #0]
   1ed26:	2b01      	cmp	r3, #1
   1ed28:	d003      	beq.n	1ed32 <find_info_cb+0x38>
   1ed2a:	2b02      	cmp	r3, #2
   1ed2c:	d019      	beq.n	1ed62 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1ed2e:	2000      	movs	r0, #0
   1ed30:	e016      	b.n	1ed60 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1ed32:	682b      	ldr	r3, [r5, #0]
   1ed34:	781b      	ldrb	r3, [r3, #0]
   1ed36:	2b00      	cmp	r3, #0
   1ed38:	d1f9      	bne.n	1ed2e <find_info_cb+0x34>
   1ed3a:	6860      	ldr	r0, [r4, #4]
   1ed3c:	2104      	movs	r1, #4
   1ed3e:	3008      	adds	r0, #8
   1ed40:	f000 fee5 	bl	1fb0e <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1ed44:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1ed46:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1ed48:	885b      	ldrh	r3, [r3, #2]
   1ed4a:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1ed4c:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   1ed4e:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   1ed50:	899b      	ldrh	r3, [r3, #12]
   1ed52:	f8b7 0086 	ldrh.w	r0, [r7, #134]	; 0x86
   1ed56:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1ed58:	2804      	cmp	r0, #4
   1ed5a:	bf94      	ite	ls
   1ed5c:	2000      	movls	r0, #0
   1ed5e:	2001      	movhi	r0, #1
}
   1ed60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1ed62:	682b      	ldr	r3, [r5, #0]
   1ed64:	781b      	ldrb	r3, [r3, #0]
   1ed66:	2b02      	cmp	r3, #2
   1ed68:	d1e1      	bne.n	1ed2e <find_info_cb+0x34>
   1ed6a:	6860      	ldr	r0, [r4, #4]
   1ed6c:	2112      	movs	r1, #18
   1ed6e:	3008      	adds	r0, #8
   1ed70:	f000 fecd 	bl	1fb0e <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1ed74:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1ed76:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1ed78:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1ed7a:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1ed7e:	3101      	adds	r1, #1
   1ed80:	f7fe ff67 	bl	1dc52 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1ed84:	6863      	ldr	r3, [r4, #4]
   1ed86:	f8b7 0086 	ldrh.w	r0, [r7, #134]	; 0x86
   1ed8a:	899b      	ldrh	r3, [r3, #12]
   1ed8c:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1ed8e:	2812      	cmp	r0, #18
   1ed90:	e7e3      	b.n	1ed5a <find_info_cb+0x60>

0001ed92 <att_chan_mtu_updated>:
{
   1ed92:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   1ed94:	6806      	ldr	r6, [r0, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ed96:	6a72      	ldr	r2, [r6, #36]	; 0x24
   1ed98:	b30a      	cbz	r2, 1edde <att_chan_mtu_updated+0x4c>
   1ed9a:	f5b2 74a2 	subs.w	r4, r2, #324	; 0x144
   1ed9e:	d01d      	beq.n	1eddc <att_chan_mtu_updated+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1eda0:	6813      	ldr	r3, [r2, #0]
   1eda2:	b10b      	cbz	r3, 1eda8 <att_chan_mtu_updated+0x16>
   1eda4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1eda8:	2200      	movs	r2, #0
   1edaa:	4611      	mov	r1, r2
		if (chan == updated_chan) {
   1edac:	42a0      	cmp	r0, r4
   1edae:	d009      	beq.n	1edc4 <att_chan_mtu_updated+0x32>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1edb0:	f8b4 5086 	ldrh.w	r5, [r4, #134]	; 0x86
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1edb4:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1edb8:	42a9      	cmp	r1, r5
   1edba:	bf38      	it	cc
   1edbc:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1edbe:	42a2      	cmp	r2, r4
   1edc0:	bf38      	it	cc
   1edc2:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1edc4:	b163      	cbz	r3, 1ede0 <att_chan_mtu_updated+0x4e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1edc6:	f513 75a2 	adds.w	r5, r3, #324	; 0x144
   1edca:	d004      	beq.n	1edd6 <att_chan_mtu_updated+0x44>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1edcc:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
   1edd0:	b10d      	cbz	r5, 1edd6 <att_chan_mtu_updated+0x44>
   1edd2:	f5a5 75a2 	sub.w	r5, r5, #324	; 0x144
{
   1edd6:	461c      	mov	r4, r3
   1edd8:	462b      	mov	r3, r5
   1edda:	e7e7      	b.n	1edac <att_chan_mtu_updated+0x1a>
   1eddc:	4622      	mov	r2, r4
   1edde:	4611      	mov	r1, r2
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1ede0:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
   1ede4:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
   1ede8:	428b      	cmp	r3, r1
   1edea:	d801      	bhi.n	1edf0 <att_chan_mtu_updated+0x5e>
   1edec:	4290      	cmp	r0, r2
   1edee:	d909      	bls.n	1ee04 <att_chan_mtu_updated+0x72>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1edf0:	4282      	cmp	r2, r0
   1edf2:	bf38      	it	cc
   1edf4:	4602      	movcc	r2, r0
   1edf6:	4299      	cmp	r1, r3
   1edf8:	6830      	ldr	r0, [r6, #0]
   1edfa:	bf38      	it	cc
   1edfc:	4619      	movcc	r1, r3
}
   1edfe:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1ee00:	f7f7 b9bc 	b.w	1617c <bt_gatt_att_max_mtu_changed>
}
   1ee04:	bc70      	pop	{r4, r5, r6}
   1ee06:	4770      	bx	lr

0001ee08 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1ee08:	68d0      	ldr	r0, [r2, #12]
   1ee0a:	7803      	ldrb	r3, [r0, #0]
   1ee0c:	3104      	adds	r1, #4
   1ee0e:	b913      	cbnz	r3, 1ee16 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1ee10:	7001      	strb	r1, [r0, #0]
	return true;
   1ee12:	2001      	movs	r0, #1
}
   1ee14:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1ee16:	428b      	cmp	r3, r1
   1ee18:	d0fb      	beq.n	1ee12 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1ee1a:	6891      	ldr	r1, [r2, #8]
   1ee1c:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   1ee1e:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1ee20:	3b04      	subs	r3, #4
   1ee22:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1ee24:	6110      	str	r0, [r2, #16]
		return false;
   1ee26:	4770      	bx	lr

0001ee28 <chan_req_send>:
{
   1ee28:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1ee2a:	688e      	ldr	r6, [r1, #8]
{
   1ee2c:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1ee2e:	4630      	mov	r0, r6
{
   1ee30:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1ee32:	f7ff fdeb 	bl	1ea0c <net_buf_frags_len>
   1ee36:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
   1ee3a:	4283      	cmp	r3, r0
   1ee3c:	d30a      	bcc.n	1ee54 <chan_req_send+0x2c>
	req->buf = NULL;
   1ee3e:	2200      	movs	r2, #0
	chan->req = req;
   1ee40:	f8c5 10f4 	str.w	r1, [r5, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   1ee44:	4628      	mov	r0, r5
	req->buf = NULL;
   1ee46:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   1ee48:	4631      	mov	r1, r6
   1ee4a:	f7f6 f8b7 	bl	14fbc <chan_send>
	if (err) {
   1ee4e:	b100      	cbz	r0, 1ee52 <chan_req_send+0x2a>
		req->buf = buf;
   1ee50:	60a6      	str	r6, [r4, #8]
}
   1ee52:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1ee54:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1ee58:	e7fb      	b.n	1ee52 <chan_req_send+0x2a>

0001ee5a <process_queue>:
{
   1ee5a:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1ee5c:	2200      	movs	r2, #0
{
   1ee5e:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1ee60:	2300      	movs	r3, #0
   1ee62:	4608      	mov	r0, r1
{
   1ee64:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1ee66:	f000 fe01 	bl	1fa6c <net_buf_get>
	if (buf) {
   1ee6a:	4605      	mov	r5, r0
   1ee6c:	b160      	cbz	r0, 1ee88 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1ee6e:	4601      	mov	r1, r0
   1ee70:	2200      	movs	r2, #0
   1ee72:	4620      	mov	r0, r4
   1ee74:	f7f6 f8a2 	bl	14fbc <chan_send>
		if (err) {
   1ee78:	4604      	mov	r4, r0
   1ee7a:	b118      	cbz	r0, 1ee84 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1ee7c:	4629      	mov	r1, r5
   1ee7e:	4630      	mov	r0, r6
   1ee80:	f001 fa30 	bl	202e4 <k_queue_prepend>
}
   1ee84:	4620      	mov	r0, r4
   1ee86:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1ee88:	f06f 0401 	mvn.w	r4, #1
   1ee8c:	e7fa      	b.n	1ee84 <process_queue+0x2a>

0001ee8e <chan_req_sent>:
	if (chan->req) {
   1ee8e:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1ee92:	b133      	cbz	r3, 1eea2 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1ee94:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1ee98:	2300      	movs	r3, #0
   1ee9a:	f500 7088 	add.w	r0, r0, #272	; 0x110
   1ee9e:	f7fa b95d 	b.w	1915c <k_work_reschedule>
}
   1eea2:	4770      	bx	lr

0001eea4 <att_exec_write_req>:
   1eea4:	2006      	movs	r0, #6
   1eea6:	4770      	bx	lr

0001eea8 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1eea8:	30f0      	adds	r0, #240	; 0xf0
   1eeaa:	f3bf 8f5b 	dmb	ish
   1eeae:	e850 3f00 	ldrex	r3, [r0]
   1eeb2:	f023 0301 	bic.w	r3, r3, #1
   1eeb6:	e840 3200 	strex	r2, r3, [r0]
   1eeba:	2a00      	cmp	r2, #0
   1eebc:	d1f7      	bne.n	1eeae <chan_rsp_sent+0x6>
   1eebe:	f3bf 8f5b 	dmb	ish
}
   1eec2:	4770      	bx	lr

0001eec4 <chan_cfm_sent>:
   1eec4:	30f0      	adds	r0, #240	; 0xf0
   1eec6:	f3bf 8f5b 	dmb	ish
   1eeca:	e850 3f00 	ldrex	r3, [r0]
   1eece:	f023 0302 	bic.w	r3, r3, #2
   1eed2:	e840 3200 	strex	r2, r3, [r0]
   1eed6:	2a00      	cmp	r2, #0
   1eed8:	d1f7      	bne.n	1eeca <chan_cfm_sent+0x6>
   1eeda:	f3bf 8f5b 	dmb	ish
}
   1eede:	4770      	bx	lr

0001eee0 <att_get>:
{
   1eee0:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1eee2:	7a83      	ldrb	r3, [r0, #10]
   1eee4:	2b07      	cmp	r3, #7
   1eee6:	d001      	beq.n	1eeec <att_get+0xc>
		return NULL;
   1eee8:	2000      	movs	r0, #0
}
   1eeea:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1eeec:	2104      	movs	r1, #4
   1eeee:	f7ff fd3c 	bl	1e96a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1eef2:	2800      	cmp	r0, #0
   1eef4:	d0f8      	beq.n	1eee8 <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1eef6:	f3bf 8f5b 	dmb	ish
   1eefa:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   1eefe:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1ef02:	075b      	lsls	r3, r3, #29
   1ef04:	d4f0      	bmi.n	1eee8 <att_get+0x8>
	return att_chan->att;
   1ef06:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1ef0a:	e7ee      	b.n	1eeea <att_get+0xa>

0001ef0c <bt_att_status>:
{
   1ef0c:	b538      	push	{r3, r4, r5, lr}
   1ef0e:	f3bf 8f5b 	dmb	ish
   1ef12:	680b      	ldr	r3, [r1, #0]
   1ef14:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1ef18:	07db      	lsls	r3, r3, #31
{
   1ef1a:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1ef1c:	d519      	bpl.n	1ef52 <bt_att_status+0x46>
	if (!chan->att) {
   1ef1e:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1ef22:	b1b0      	cbz	r0, 1ef52 <bt_att_status+0x46>
	if (chan->req) {
   1ef24:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1ef28:	b99b      	cbnz	r3, 1ef52 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   1ef2a:	3004      	adds	r0, #4
   1ef2c:	f7ff fd49 	bl	1e9c2 <sys_slist_get>
	if (!node) {
   1ef30:	4604      	mov	r4, r0
   1ef32:	b170      	cbz	r0, 1ef52 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   1ef34:	4601      	mov	r1, r0
   1ef36:	f1a5 0008 	sub.w	r0, r5, #8
   1ef3a:	f7ff ff75 	bl	1ee28 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1ef3e:	2800      	cmp	r0, #0
   1ef40:	da07      	bge.n	1ef52 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   1ef42:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   1ef46:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1ef48:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ef4a:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1ef4c:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ef4e:	b902      	cbnz	r2, 1ef52 <bt_att_status+0x46>
	list->tail = node;
   1ef50:	609c      	str	r4, [r3, #8]
}
   1ef52:	bd38      	pop	{r3, r4, r5, pc}

0001ef54 <att_req_send_process>:
{
   1ef54:	b570      	push	{r4, r5, r6, lr}
   1ef56:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1ef58:	3004      	adds	r0, #4
   1ef5a:	f7ff fd32 	bl	1e9c2 <sys_slist_get>
	if (!node) {
   1ef5e:	4606      	mov	r6, r0
   1ef60:	b1c0      	cbz	r0, 1ef94 <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ef62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ef64:	b153      	cbz	r3, 1ef7c <att_req_send_process+0x28>
   1ef66:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   1ef6a:	d007      	beq.n	1ef7c <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ef6c:	681c      	ldr	r4, [r3, #0]
   1ef6e:	b10c      	cbz	r4, 1ef74 <att_req_send_process+0x20>
   1ef70:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
		if (!chan->req) {
   1ef74:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1ef78:	b13b      	cbz	r3, 1ef8a <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ef7a:	b964      	cbnz	r4, 1ef96 <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   1ef7c:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1ef7e:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ef80:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1ef82:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ef84:	b933      	cbnz	r3, 1ef94 <att_req_send_process+0x40>
	list->tail = node;
   1ef86:	60ae      	str	r6, [r5, #8]
}
   1ef88:	e004      	b.n	1ef94 <att_req_send_process+0x40>
	return chan_req_send(chan, req);
   1ef8a:	4631      	mov	r1, r6
   1ef8c:	f7ff ff4c 	bl	1ee28 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1ef90:	2800      	cmp	r0, #0
   1ef92:	dbf2      	blt.n	1ef7a <att_req_send_process+0x26>
}
   1ef94:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ef96:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   1ef9a:	d004      	beq.n	1efa6 <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ef9c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1efa0:	b10b      	cbz	r3, 1efa6 <att_req_send_process+0x52>
   1efa2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1efa6:	4620      	mov	r0, r4
   1efa8:	461c      	mov	r4, r3
   1efaa:	e7e3      	b.n	1ef74 <att_req_send_process+0x20>

0001efac <write_cb>:
{
   1efac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1efae:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1efb0:	4601      	mov	r1, r0
{
   1efb2:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1efb4:	222a      	movs	r2, #42	; 0x2a
   1efb6:	6820      	ldr	r0, [r4, #0]
   1efb8:	f000 fc9f 	bl	1f8fa <bt_gatt_check_perm>
   1efbc:	4605      	mov	r5, r0
   1efbe:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1efc0:	bb00      	cbnz	r0, 1f004 <write_cb+0x58>
	if (!data->req) {
   1efc2:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1efc4:	68b7      	ldr	r7, [r6, #8]
   1efc6:	68e2      	ldr	r2, [r4, #12]
   1efc8:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   1efca:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1efcc:	bf14      	ite	ne
   1efce:	2300      	movne	r3, #0
   1efd0:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1efd2:	9301      	str	r3, [sp, #4]
   1efd4:	8a63      	ldrh	r3, [r4, #18]
   1efd6:	9300      	str	r3, [sp, #0]
   1efd8:	4631      	mov	r1, r6
   1efda:	8a23      	ldrh	r3, [r4, #16]
   1efdc:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1efde:	1e03      	subs	r3, r0, #0
   1efe0:	db05      	blt.n	1efee <write_cb+0x42>
   1efe2:	8a22      	ldrh	r2, [r4, #16]
   1efe4:	4293      	cmp	r3, r2
   1efe6:	d10b      	bne.n	1f000 <write_cb+0x54>
	data->err = 0U;
   1efe8:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1efea:	2501      	movs	r5, #1
   1efec:	e005      	b.n	1effa <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1efee:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1eff2:	d305      	bcc.n	1f000 <write_cb+0x54>
		return -err;
   1eff4:	425b      	negs	r3, r3
   1eff6:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1eff8:	7523      	strb	r3, [r4, #20]
}
   1effa:	4628      	mov	r0, r5
   1effc:	b003      	add	sp, #12
   1effe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1f000:	230e      	movs	r3, #14
   1f002:	e7f9      	b.n	1eff8 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1f004:	2500      	movs	r5, #0
   1f006:	e7f8      	b.n	1effa <write_cb+0x4e>

0001f008 <bt_att_sent>:
{
   1f008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1f00a:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   1f00e:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   1f012:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1f014:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1f018:	b10b      	cbz	r3, 1f01e <bt_att_sent+0x16>
		chan->sent(chan);
   1f01a:	4638      	mov	r0, r7
   1f01c:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f01e:	f3bf 8f5b 	dmb	ish
   1f022:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   1f026:	e853 2f00 	ldrex	r2, [r3]
   1f02a:	f022 0210 	bic.w	r2, r2, #16
   1f02e:	e843 2100 	strex	r1, r2, [r3]
   1f032:	2900      	cmp	r1, #0
   1f034:	d1f7      	bne.n	1f026 <bt_att_sent+0x1e>
   1f036:	f3bf 8f5b 	dmb	ish
	if (!att) {
   1f03a:	b30c      	cbz	r4, 1f080 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1f03c:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1f040:	b98b      	cbnz	r3, 1f066 <bt_att_sent+0x5e>
   1f042:	6863      	ldr	r3, [r4, #4]
   1f044:	b17b      	cbz	r3, 1f066 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1f046:	1d20      	adds	r0, r4, #4
   1f048:	f7ff fcbb 	bl	1e9c2 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f04c:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1f04e:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f050:	4638      	mov	r0, r7
   1f052:	f7ff fee9 	bl	1ee28 <chan_req_send>
   1f056:	2800      	cmp	r0, #0
   1f058:	da12      	bge.n	1f080 <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   1f05a:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1f05c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f05e:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1f060:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f062:	b903      	cbnz	r3, 1f066 <bt_att_sent+0x5e>
	list->tail = node;
   1f064:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1f066:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   1f06a:	4638      	mov	r0, r7
   1f06c:	f7ff fef5 	bl	1ee5a <process_queue>
	if (!err) {
   1f070:	b130      	cbz	r0, 1f080 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   1f072:	f104 010c 	add.w	r1, r4, #12
   1f076:	4638      	mov	r0, r7
}
   1f078:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1f07c:	f7ff beed 	b.w	1ee5a <process_queue>
}
   1f080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f082 <read_cb>:
{
   1f082:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1f086:	f8d2 8000 	ldr.w	r8, [r2]
{
   1f08a:	4606      	mov	r6, r0
	data->err = 0x00;
   1f08c:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1f08e:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   1f092:	7317      	strb	r7, [r2, #12]
{
   1f094:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1f096:	4631      	mov	r1, r6
   1f098:	2215      	movs	r2, #21
   1f09a:	f000 fc2e 	bl	1f8fa <bt_gatt_check_perm>
   1f09e:	4604      	mov	r4, r0
   1f0a0:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1f0a2:	b9a0      	cbnz	r0, 1f0ce <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1f0a4:	e9cd 0000 	strd	r0, r0, [sp]
   1f0a8:	88ab      	ldrh	r3, [r5, #4]
   1f0aa:	68aa      	ldr	r2, [r5, #8]
   1f0ac:	4631      	mov	r1, r6
   1f0ae:	4640      	mov	r0, r8
   1f0b0:	f7ff fd04 	bl	1eabc <att_chan_read>
	if (ret < 0) {
   1f0b4:	1e03      	subs	r3, r0, #0
   1f0b6:	da0c      	bge.n	1f0d2 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1f0b8:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1f0bc:	bf26      	itte	cs
   1f0be:	425b      	negcs	r3, r3
   1f0c0:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1f0c2:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   1f0c4:	732b      	strb	r3, [r5, #12]
}
   1f0c6:	4620      	mov	r0, r4
   1f0c8:	b002      	add	sp, #8
   1f0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1f0ce:	463c      	mov	r4, r7
   1f0d0:	e7f9      	b.n	1f0c6 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1f0d2:	2401      	movs	r4, #1
   1f0d4:	e7f7      	b.n	1f0c6 <read_cb+0x44>

0001f0d6 <bt_att_chan_create_pdu>:
{
   1f0d6:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1f0d8:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
   1f0dc:	3201      	adds	r2, #1
   1f0de:	429a      	cmp	r2, r3
{
   1f0e0:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1f0e2:	d81b      	bhi.n	1f11c <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   1f0e4:	4608      	mov	r0, r1
   1f0e6:	f7ff fcb1 	bl	1ea4c <att_op_get_type>
   1f0ea:	2802      	cmp	r0, #2
   1f0ec:	d001      	beq.n	1f0f2 <bt_att_chan_create_pdu+0x1c>
   1f0ee:	2804      	cmp	r0, #4
   1f0f0:	d10f      	bne.n	1f112 <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1f0f2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1f0f6:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1f0f8:	2100      	movs	r1, #0
   1f0fa:	4608      	mov	r0, r1
   1f0fc:	f7ff fbd8 	bl	1e8b0 <bt_l2cap_create_pdu_timeout>
   1f100:	4604      	mov	r4, r0
	if (!buf) {
   1f102:	b120      	cbz	r0, 1f10e <bt_att_chan_create_pdu+0x38>
   1f104:	2101      	movs	r1, #1
   1f106:	3008      	adds	r0, #8
   1f108:	f000 fd01 	bl	1fb0e <net_buf_simple_add>
	hdr->code = op;
   1f10c:	7005      	strb	r5, [r0, #0]
}
   1f10e:	4620      	mov	r0, r4
   1f110:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   1f112:	f04f 32ff 	mov.w	r2, #4294967295
   1f116:	f04f 33ff 	mov.w	r3, #4294967295
   1f11a:	e7ed      	b.n	1f0f8 <bt_att_chan_create_pdu+0x22>
		return NULL;
   1f11c:	2400      	movs	r4, #0
   1f11e:	e7f6      	b.n	1f10e <bt_att_chan_create_pdu+0x38>

0001f120 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1f120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f124:	4688      	mov	r8, r1
   1f126:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1f128:	2101      	movs	r1, #1
   1f12a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1f12c:	4605      	mov	r5, r0
   1f12e:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1f130:	f7ff ffd1 	bl	1f0d6 <bt_att_chan_create_pdu>
	if (!buf) {
   1f134:	4604      	mov	r4, r0
   1f136:	b170      	cbz	r0, 1f156 <send_err_rsp.part.0+0x36>
   1f138:	2104      	movs	r1, #4
   1f13a:	3008      	adds	r0, #8
   1f13c:	f000 fce7 	bl	1fb0e <net_buf_simple_add>
	rsp->request = req;
   1f140:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   1f144:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1f146:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1f14a:	4621      	mov	r1, r4
   1f14c:	4628      	mov	r0, r5
}
   1f14e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1f152:	f7f5 bf91 	b.w	15078 <bt_att_chan_send_rsp.constprop.0>
}
   1f156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f15a <bt_att_create_pdu>:
{
   1f15a:	b570      	push	{r4, r5, r6, lr}
   1f15c:	460e      	mov	r6, r1
   1f15e:	4615      	mov	r5, r2
	att = att_get(conn);
   1f160:	f7ff febe 	bl	1eee0 <att_get>
	if (!att) {
   1f164:	b170      	cbz	r0, 1f184 <bt_att_create_pdu+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f166:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1f168:	b163      	cbz	r3, 1f184 <bt_att_create_pdu+0x2a>
   1f16a:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   1f16e:	d009      	beq.n	1f184 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f170:	681b      	ldr	r3, [r3, #0]
   1f172:	b10b      	cbz	r3, 1f178 <bt_att_create_pdu+0x1e>
   1f174:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1f178:	1c6a      	adds	r2, r5, #1
   1f17a:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
   1f17e:	428a      	cmp	r2, r1
   1f180:	d902      	bls.n	1f188 <bt_att_create_pdu+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f182:	b93b      	cbnz	r3, 1f194 <bt_att_create_pdu+0x3a>
}
   1f184:	2000      	movs	r0, #0
   1f186:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1f188:	462a      	mov	r2, r5
   1f18a:	4631      	mov	r1, r6
}
   1f18c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1f190:	f7ff bfa1 	b.w	1f0d6 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f194:	f513 74a2 	adds.w	r4, r3, #324	; 0x144
   1f198:	d004      	beq.n	1f1a4 <bt_att_create_pdu+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f19a:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f19e:	b10c      	cbz	r4, 1f1a4 <bt_att_create_pdu+0x4a>
   1f1a0:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   1f1a4:	4618      	mov	r0, r3
   1f1a6:	4623      	mov	r3, r4
   1f1a8:	e7e7      	b.n	1f17a <bt_att_create_pdu+0x20>

0001f1aa <att_read_blob_req>:
{
   1f1aa:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1f1ac:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1f1ae:	8813      	ldrh	r3, [r2, #0]
   1f1b0:	8852      	ldrh	r2, [r2, #2]
   1f1b2:	9200      	str	r2, [sp, #0]
   1f1b4:	210c      	movs	r1, #12
   1f1b6:	220d      	movs	r2, #13
   1f1b8:	f7f6 f9be 	bl	15538 <att_read_rsp>
}
   1f1bc:	b003      	add	sp, #12
   1f1be:	f85d fb04 	ldr.w	pc, [sp], #4

0001f1c2 <att_read_req>:
{
   1f1c2:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1f1c4:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1f1c6:	2200      	movs	r2, #0
   1f1c8:	881b      	ldrh	r3, [r3, #0]
   1f1ca:	9200      	str	r2, [sp, #0]
   1f1cc:	210a      	movs	r1, #10
   1f1ce:	220b      	movs	r2, #11
   1f1d0:	f7f6 f9b2 	bl	15538 <att_read_rsp>
}
   1f1d4:	b003      	add	sp, #12
   1f1d6:	f85d fb04 	ldr.w	pc, [sp], #4

0001f1da <att_mtu_req>:
{
   1f1da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1f1dc:	6803      	ldr	r3, [r0, #0]
{
   1f1de:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   1f1e0:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f1e2:	f3bf 8f5b 	dmb	ish
   1f1e6:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1f1ea:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1f1ee:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   1f1f2:	071b      	lsls	r3, r3, #28
   1f1f4:	d41d      	bmi.n	1f232 <att_mtu_req+0x58>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1f1f6:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1f1f8:	881b      	ldrh	r3, [r3, #0]
   1f1fa:	2b16      	cmp	r3, #22
   1f1fc:	d91b      	bls.n	1f236 <att_mtu_req+0x5c>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1f1fe:	2202      	movs	r2, #2
   1f200:	2103      	movs	r1, #3
   1f202:	f7ff ffaa 	bl	1f15a <bt_att_create_pdu>
	if (!pdu) {
   1f206:	4606      	mov	r6, r0
   1f208:	b1b8      	cbz	r0, 1f23a <att_mtu_req+0x60>
   1f20a:	2102      	movs	r1, #2
   1f20c:	3008      	adds	r0, #8
   1f20e:	f000 fc7e 	bl	1fb0e <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1f212:	2717      	movs	r7, #23
   1f214:	7007      	strb	r7, [r0, #0]
   1f216:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1f218:	4631      	mov	r1, r6
   1f21a:	4620      	mov	r0, r4
   1f21c:	f7f5 ff2c 	bl	15078 <bt_att_chan_send_rsp.constprop.0>
	att_chan_mtu_updated(chan);
   1f220:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1f222:	f8a4 707a 	strh.w	r7, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1f226:	f8a4 7086 	strh.w	r7, [r4, #134]	; 0x86
	att_chan_mtu_updated(chan);
   1f22a:	f7ff fdb2 	bl	1ed92 <att_chan_mtu_updated>
	return 0;
   1f22e:	4628      	mov	r0, r5
}
   1f230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1f232:	2006      	movs	r0, #6
   1f234:	e7fc      	b.n	1f230 <att_mtu_req+0x56>
		return BT_ATT_ERR_INVALID_PDU;
   1f236:	2004      	movs	r0, #4
   1f238:	e7fa      	b.n	1f230 <att_mtu_req+0x56>
		return BT_ATT_ERR_UNLIKELY;
   1f23a:	200e      	movs	r0, #14
   1f23c:	e7f8      	b.n	1f230 <att_mtu_req+0x56>

0001f23e <bt_att_init>:
	bt_gatt_init();
   1f23e:	f7f6 bc41 	b.w	15ac4 <bt_gatt_init>

0001f242 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1f242:	898a      	ldrh	r2, [r1, #12]
   1f244:	6889      	ldr	r1, [r1, #8]
   1f246:	2300      	movs	r3, #0
   1f248:	f7f6 bae8 	b.w	1581c <att_handle_rsp>

0001f24c <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   1f24c:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
   1f250:	f7f6 bb16 	b.w	15880 <bt_att_disconnected>

0001f254 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1f254:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f258:	4607      	mov	r7, r0
   1f25a:	460d      	mov	r5, r1
   1f25c:	4616      	mov	r6, r2
   1f25e:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1f260:	f7ff fe3e 	bl	1eee0 <att_get>
	if (!att) {
   1f264:	4604      	mov	r4, r0
   1f266:	b938      	cbnz	r0, 1f278 <bt_att_send+0x24>
		net_buf_unref(buf);
   1f268:	4628      	mov	r0, r5
   1f26a:	f7f7 f8c9 	bl	16400 <net_buf_unref>
		return -ENOTCONN;
   1f26e:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1f272:	b002      	add	sp, #8
   1f274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1f278:	b146      	cbz	r6, 1f28c <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1f27a:	f8cd 8000 	str.w	r8, [sp]
   1f27e:	4633      	mov	r3, r6
   1f280:	462a      	mov	r2, r5
   1f282:	2104      	movs	r1, #4
   1f284:	4638      	mov	r0, r7
   1f286:	f7ff fb16 	bl	1e8b6 <bt_l2cap_send_cb>
   1f28a:	e7f2      	b.n	1f272 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   1f28c:	f100 060c 	add.w	r6, r0, #12
   1f290:	4629      	mov	r1, r5
   1f292:	4630      	mov	r0, r6
   1f294:	f000 fc08 	bl	1faa8 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1f298:	2200      	movs	r2, #0
   1f29a:	2300      	movs	r3, #0
   1f29c:	4630      	mov	r0, r6
   1f29e:	f000 fbe5 	bl	1fa6c <net_buf_get>
	if (!buf) {
   1f2a2:	4605      	mov	r5, r0
   1f2a4:	b908      	cbnz	r0, 1f2aa <bt_att_send+0x56>
	return 0;
   1f2a6:	2000      	movs	r0, #0
   1f2a8:	e7e3      	b.n	1f272 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f2aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f2ac:	b1c3      	cbz	r3, 1f2e0 <bt_att_send+0x8c>
   1f2ae:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   1f2b2:	d015      	beq.n	1f2e0 <bt_att_send+0x8c>
   1f2b4:	681c      	ldr	r4, [r3, #0]
   1f2b6:	b10c      	cbz	r4, 1f2bc <bt_att_send+0x68>
   1f2b8:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   1f2bc:	2200      	movs	r2, #0
   1f2be:	4629      	mov	r1, r5
   1f2c0:	f7f5 fe7c 	bl	14fbc <chan_send>
		if (err >= 0) {
   1f2c4:	2800      	cmp	r0, #0
   1f2c6:	daee      	bge.n	1f2a6 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f2c8:	b154      	cbz	r4, 1f2e0 <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f2ca:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   1f2ce:	d004      	beq.n	1f2da <bt_att_send+0x86>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f2d0:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   1f2d4:	b10b      	cbz	r3, 1f2da <bt_att_send+0x86>
   1f2d6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1f2da:	4620      	mov	r0, r4
   1f2dc:	461c      	mov	r4, r3
   1f2de:	e7ed      	b.n	1f2bc <bt_att_send+0x68>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1f2e0:	4629      	mov	r1, r5
   1f2e2:	4630      	mov	r0, r6
   1f2e4:	f000 fffe 	bl	202e4 <k_queue_prepend>
   1f2e8:	e7dd      	b.n	1f2a6 <bt_att_send+0x52>

0001f2ea <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1f2ea:	b510      	push	{r4, lr}
   1f2ec:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1f2ee:	f7ff fdf7 	bl	1eee0 <att_get>
	if (!att) {
   1f2f2:	b160      	cbz	r0, 1f30e <bt_att_req_send+0x24>
	parent->next = child;
   1f2f4:	2300      	movs	r3, #0
   1f2f6:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1f2f8:	6883      	ldr	r3, [r0, #8]
   1f2fa:	b92b      	cbnz	r3, 1f308 <bt_att_req_send+0x1e>
	list->head = node;
   1f2fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1f300:	f7ff fe28 	bl	1ef54 <att_req_send_process>

	return 0;
   1f304:	2000      	movs	r0, #0
}
   1f306:	bd10      	pop	{r4, pc}
	parent->next = child;
   1f308:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1f30a:	6084      	str	r4, [r0, #8]
}
   1f30c:	e7f8      	b.n	1f300 <bt_att_req_send+0x16>
		return -ENOTCONN;
   1f30e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1f312:	e7f8      	b.n	1f306 <bt_att_req_send+0x1c>

0001f314 <gatt_ccc_changed>:
{
   1f314:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1f316:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1f318:	895a      	ldrh	r2, [r3, #10]
   1f31a:	428a      	cmp	r2, r1
   1f31c:	d003      	beq.n	1f326 <gatt_ccc_changed+0x12>
		ccc->value = value;
   1f31e:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1f320:	68db      	ldr	r3, [r3, #12]
   1f322:	b103      	cbz	r3, 1f326 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1f324:	4718      	bx	r3
}
   1f326:	4770      	bx	lr

0001f328 <gatt_indicate_rsp>:
{
   1f328:	b510      	push	{r4, lr}
   1f32a:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   1f32c:	68a3      	ldr	r3, [r4, #8]
{
   1f32e:	460a      	mov	r2, r1
	if (params->func) {
   1f330:	b10b      	cbz	r3, 1f336 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1f332:	4621      	mov	r1, r4
   1f334:	4798      	blx	r3
	params->_ref--;
   1f336:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1f338:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1f33a:	3b01      	subs	r3, #1
   1f33c:	b2db      	uxtb	r3, r3
   1f33e:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1f340:	b122      	cbz	r2, 1f34c <gatt_indicate_rsp+0x24>
   1f342:	b91b      	cbnz	r3, 1f34c <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1f344:	4620      	mov	r0, r4
}
   1f346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1f34a:	4710      	bx	r2
}
   1f34c:	bd10      	pop	{r4, pc}

0001f34e <match_uuid>:
	data->attr = attr;
   1f34e:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1f350:	8091      	strh	r1, [r2, #4]
}
   1f352:	2000      	movs	r0, #0
   1f354:	4770      	bx	lr

0001f356 <write_name>:
{
   1f356:	b570      	push	{r4, r5, r6, lr}
   1f358:	b092      	sub	sp, #72	; 0x48
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   1f35a:	2100      	movs	r1, #0
{
   1f35c:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   1f360:	9101      	str	r1, [sp, #4]
{
   1f362:	4616      	mov	r6, r2
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   1f364:	a802      	add	r0, sp, #8
   1f366:	223d      	movs	r2, #61	; 0x3d
{
   1f368:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   1f36a:	f7fe fc7d 	bl	1dc68 <memset>
	if (offset >= sizeof(value)) {
   1f36e:	2d40      	cmp	r5, #64	; 0x40
   1f370:	d80d      	bhi.n	1f38e <write_name+0x38>
	if (offset + len >= sizeof(value)) {
   1f372:	4425      	add	r5, r4
   1f374:	2d40      	cmp	r5, #64	; 0x40
   1f376:	dc0d      	bgt.n	1f394 <write_name+0x3e>
	memcpy(value, buf, len);
   1f378:	4622      	mov	r2, r4
   1f37a:	4631      	mov	r1, r6
   1f37c:	a801      	add	r0, sp, #4
   1f37e:	f7fe fc68 	bl	1dc52 <memcpy>
	bt_set_name(value);
   1f382:	a801      	add	r0, sp, #4
   1f384:	f7f4 fbb0 	bl	13ae8 <bt_set_name>
}
   1f388:	4620      	mov	r0, r4
   1f38a:	b012      	add	sp, #72	; 0x48
   1f38c:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f38e:	f06f 0406 	mvn.w	r4, #6
   1f392:	e7f9      	b.n	1f388 <write_name+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1f394:	f06f 040c 	mvn.w	r4, #12
   1f398:	e7f6      	b.n	1f388 <write_name+0x32>

0001f39a <gen_hash_m>:
{
   1f39a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f39c:	6807      	ldr	r7, [r0, #0]
   1f39e:	783d      	ldrb	r5, [r7, #0]
{
   1f3a0:	b089      	sub	sp, #36	; 0x24
   1f3a2:	4606      	mov	r6, r0
   1f3a4:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f3a6:	b10d      	cbz	r5, 1f3ac <gen_hash_m+0x12>
	switch (u16->val) {
   1f3a8:	2501      	movs	r5, #1
   1f3aa:	e014      	b.n	1f3d6 <gen_hash_m+0x3c>
   1f3ac:	887b      	ldrh	r3, [r7, #2]
   1f3ae:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1f3b2:	d004      	beq.n	1f3be <gen_hash_m+0x24>
   1f3b4:	d812      	bhi.n	1f3dc <gen_hash_m+0x42>
   1f3b6:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1f3ba:	2b03      	cmp	r3, #3
   1f3bc:	d8f4      	bhi.n	1f3a8 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1f3be:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f3c2:	2202      	movs	r2, #2
   1f3c4:	f10d 010e 	add.w	r1, sp, #14
   1f3c8:	4620      	mov	r0, r4
   1f3ca:	f7fe fb2d 	bl	1da28 <tc_cmac_update>
   1f3ce:	b9e0      	cbnz	r0, 1f40a <gen_hash_m+0x70>
			state->err = -EINVAL;
   1f3d0:	f06f 0315 	mvn.w	r3, #21
   1f3d4:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1f3d6:	4628      	mov	r0, r5
   1f3d8:	b009      	add	sp, #36	; 0x24
   1f3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1f3dc:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1f3e0:	33ff      	adds	r3, #255	; 0xff
   1f3e2:	b29b      	uxth	r3, r3
   1f3e4:	2b04      	cmp	r3, #4
   1f3e6:	d8df      	bhi.n	1f3a8 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1f3e8:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f3ec:	2202      	movs	r2, #2
   1f3ee:	f10d 010e 	add.w	r1, sp, #14
   1f3f2:	4620      	mov	r0, r4
   1f3f4:	f7fe fb18 	bl	1da28 <tc_cmac_update>
   1f3f8:	2800      	cmp	r0, #0
   1f3fa:	d0e9      	beq.n	1f3d0 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1f3fc:	887b      	ldrh	r3, [r7, #2]
   1f3fe:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f402:	2202      	movs	r2, #2
   1f404:	f10d 010e 	add.w	r1, sp, #14
   1f408:	e017      	b.n	1f43a <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1f40a:	887b      	ldrh	r3, [r7, #2]
   1f40c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f410:	2202      	movs	r2, #2
   1f412:	f10d 010e 	add.w	r1, sp, #14
   1f416:	4620      	mov	r0, r4
   1f418:	f7fe fb06 	bl	1da28 <tc_cmac_update>
   1f41c:	2800      	cmp	r0, #0
   1f41e:	d0d7      	beq.n	1f3d0 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1f420:	2000      	movs	r0, #0
   1f422:	2310      	movs	r3, #16
   1f424:	eb0d 0203 	add.w	r2, sp, r3
   1f428:	6877      	ldr	r7, [r6, #4]
   1f42a:	9000      	str	r0, [sp, #0]
   1f42c:	4631      	mov	r1, r6
   1f42e:	47b8      	blx	r7
		if (len < 0) {
   1f430:	1e02      	subs	r2, r0, #0
   1f432:	da01      	bge.n	1f438 <gen_hash_m+0x9e>
			state->err = len;
   1f434:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1f436:	e7ce      	b.n	1f3d6 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1f438:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f43a:	4620      	mov	r0, r4
   1f43c:	f7fe faf4 	bl	1da28 <tc_cmac_update>
   1f440:	2800      	cmp	r0, #0
   1f442:	d1b1      	bne.n	1f3a8 <gen_hash_m+0xe>
   1f444:	e7c4      	b.n	1f3d0 <gen_hash_m+0x36>

0001f446 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f446:	2301      	movs	r3, #1
   1f448:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f44a:	f3bf 8f5b 	dmb	ish
   1f44e:	e850 2f00 	ldrex	r2, [r0]
   1f452:	431a      	orrs	r2, r3
   1f454:	e840 2100 	strex	r1, r2, [r0]
   1f458:	2900      	cmp	r1, #0
   1f45a:	d1f8      	bne.n	1f44e <atomic_set_bit+0x8>
   1f45c:	f3bf 8f5b 	dmb	ish
}
   1f460:	4770      	bx	lr

0001f462 <find_ccc_cfg>:
{
   1f462:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f464:	460c      	mov	r4, r1
   1f466:	1c4d      	adds	r5, r1, #1
		if (conn) {
   1f468:	b148      	cbz	r0, 1f47e <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1f46a:	7809      	ldrb	r1, [r1, #0]
   1f46c:	462a      	mov	r2, r5
   1f46e:	f7ff f95c 	bl	1e72a <bt_conn_is_peer_addr_le>
   1f472:	2800      	cmp	r0, #0
	return NULL;
   1f474:	bf08      	it	eq
   1f476:	2400      	moveq	r4, #0
}
   1f478:	4620      	mov	r0, r4
   1f47a:	b003      	add	sp, #12
   1f47c:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1f47e:	9000      	str	r0, [sp, #0]
   1f480:	2207      	movs	r2, #7
   1f482:	f8cd 0003 	str.w	r0, [sp, #3]
   1f486:	4669      	mov	r1, sp
   1f488:	4628      	mov	r0, r5
   1f48a:	f7fe fbbb 	bl	1dc04 <memcmp>
   1f48e:	2800      	cmp	r0, #0
	return NULL;
   1f490:	bf18      	it	ne
   1f492:	2400      	movne	r4, #0
   1f494:	e7f0      	b.n	1f478 <find_ccc_cfg+0x16>

0001f496 <sc_restore_rsp>:
{
   1f496:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1f498:	f7f6 fa5c 	bl	15954 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1f49c:	b140      	cbz	r0, 1f4b0 <sc_restore_rsp+0x1a>
   1f49e:	7a03      	ldrb	r3, [r0, #8]
   1f4a0:	07db      	lsls	r3, r3, #31
   1f4a2:	d505      	bpl.n	1f4b0 <sc_restore_rsp+0x1a>
}
   1f4a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1f4a8:	2100      	movs	r1, #0
   1f4aa:	300c      	adds	r0, #12
   1f4ac:	f7ff bfcb 	b.w	1f446 <atomic_set_bit>
}
   1f4b0:	bd08      	pop	{r3, pc}

0001f4b2 <bt_gatt_attr_write_ccc>:
{
   1f4b2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1f4b6:	461f      	mov	r7, r3
   1f4b8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1f4bc:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1f4c0:	4606      	mov	r6, r0
   1f4c2:	4688      	mov	r8, r1
	if (offset) {
   1f4c4:	2b00      	cmp	r3, #0
   1f4c6:	d146      	bne.n	1f556 <bt_gatt_attr_write_ccc+0xa4>
	if (!len || len > sizeof(uint16_t)) {
   1f4c8:	1e7b      	subs	r3, r7, #1
   1f4ca:	2b01      	cmp	r3, #1
   1f4cc:	d846      	bhi.n	1f55c <bt_gatt_attr_write_ccc+0xaa>
	if (len < sizeof(uint16_t)) {
   1f4ce:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   1f4d0:	7815      	ldrb	r5, [r2, #0]
   1f4d2:	bf18      	it	ne
   1f4d4:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   1f4d6:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   1f4d8:	bf0c      	ite	eq
   1f4da:	b2ad      	uxtheq	r5, r5
   1f4dc:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1f4e0:	f7ff ffbf 	bl	1f462 <find_ccc_cfg>
	if (!cfg) {
   1f4e4:	4604      	mov	r4, r0
   1f4e6:	b988      	cbnz	r0, 1f50c <bt_gatt_attr_write_ccc+0x5a>
		if (!value) {
   1f4e8:	b91d      	cbnz	r5, 1f4f2 <bt_gatt_attr_write_ccc+0x40>
			return len;
   1f4ea:	4638      	mov	r0, r7
}
   1f4ec:	b003      	add	sp, #12
   1f4ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1f4f2:	4649      	mov	r1, r9
   1f4f4:	f7ff ffb5 	bl	1f462 <find_ccc_cfg>
		if (!cfg) {
   1f4f8:	4604      	mov	r4, r0
   1f4fa:	b390      	cbz	r0, 1f562 <bt_gatt_attr_write_ccc+0xb0>
	memcpy(dst, src, sizeof(*dst));
   1f4fc:	2207      	movs	r2, #7
   1f4fe:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1f502:	3001      	adds	r0, #1
   1f504:	f7fe fba5 	bl	1dc52 <memcpy>
		cfg->id = conn->id;
   1f508:	7a33      	ldrb	r3, [r6, #8]
   1f50a:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1f50c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1f510:	b9ab      	cbnz	r3, 1f53e <bt_gatt_attr_write_ccc+0x8c>
	if (cfg->value != ccc->value) {
   1f512:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   1f516:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1f518:	42ab      	cmp	r3, r5
   1f51a:	d003      	beq.n	1f524 <bt_gatt_attr_write_ccc+0x72>
		gatt_ccc_changed(attr, ccc);
   1f51c:	4649      	mov	r1, r9
   1f51e:	4640      	mov	r0, r8
   1f520:	f7ff fef8 	bl	1f314 <gatt_ccc_changed>
	if (!value) {
   1f524:	2d00      	cmp	r5, #0
   1f526:	d1e0      	bne.n	1f4ea <bt_gatt_attr_write_ccc+0x38>
   1f528:	2207      	movs	r2, #7
   1f52a:	4669      	mov	r1, sp
   1f52c:	1c60      	adds	r0, r4, #1
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1f52e:	9500      	str	r5, [sp, #0]
   1f530:	f8cd 5003 	str.w	r5, [sp, #3]
   1f534:	f7fe fb8d 	bl	1dc52 <memcpy>
	cfg->id = 0U;
   1f538:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1f53a:	8125      	strh	r5, [r4, #8]
}
   1f53c:	e7d5      	b.n	1f4ea <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1f53e:	462a      	mov	r2, r5
   1f540:	4641      	mov	r1, r8
   1f542:	4630      	mov	r0, r6
   1f544:	4798      	blx	r3
		if (write < 0) {
   1f546:	2800      	cmp	r0, #0
   1f548:	dbd0      	blt.n	1f4ec <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   1f54a:	3801      	subs	r0, #1
   1f54c:	2801      	cmp	r0, #1
   1f54e:	d9e0      	bls.n	1f512 <bt_gatt_attr_write_ccc+0x60>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1f550:	f06f 000d 	mvn.w	r0, #13
   1f554:	e7ca      	b.n	1f4ec <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f556:	f06f 0006 	mvn.w	r0, #6
   1f55a:	e7c7      	b.n	1f4ec <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1f55c:	f06f 000c 	mvn.w	r0, #12
   1f560:	e7c4      	b.n	1f4ec <bt_gatt_attr_write_ccc+0x3a>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1f562:	f06f 0010 	mvn.w	r0, #16
   1f566:	e7c1      	b.n	1f4ec <bt_gatt_attr_write_ccc+0x3a>

0001f568 <clear_cf_cfg>:
{
   1f568:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f56a:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1f56c:	2500      	movs	r5, #0
   1f56e:	2207      	movs	r2, #7
   1f570:	4669      	mov	r1, sp
   1f572:	3001      	adds	r0, #1
   1f574:	9500      	str	r5, [sp, #0]
   1f576:	f8cd 5003 	str.w	r5, [sp, #3]
   1f57a:	f7fe fb6a 	bl	1dc52 <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1f57e:	f104 0008 	add.w	r0, r4, #8
   1f582:	2201      	movs	r2, #1
   1f584:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f586:	340c      	adds	r4, #12
   1f588:	f7fe fb6e 	bl	1dc68 <memset>
   1f58c:	f3bf 8f5b 	dmb	ish
   1f590:	e854 3f00 	ldrex	r3, [r4]
   1f594:	e844 5200 	strex	r2, r5, [r4]
   1f598:	2a00      	cmp	r2, #0
   1f59a:	d1f9      	bne.n	1f590 <clear_cf_cfg+0x28>
   1f59c:	f3bf 8f5b 	dmb	ish
}
   1f5a0:	b003      	add	sp, #12
   1f5a2:	bd30      	pop	{r4, r5, pc}

0001f5a4 <cf_write>:
{
   1f5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f5a8:	4698      	mov	r8, r3
   1f5aa:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1f5ae:	2b01      	cmp	r3, #1
{
   1f5b0:	4606      	mov	r6, r0
   1f5b2:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1f5b4:	d831      	bhi.n	1f61a <cf_write+0x76>
	if (offset + len > sizeof(cfg->data)) {
   1f5b6:	4443      	add	r3, r8
   1f5b8:	2b01      	cmp	r3, #1
   1f5ba:	4645      	mov	r5, r8
   1f5bc:	dc30      	bgt.n	1f620 <cf_write+0x7c>
	cfg = find_cf_cfg(conn);
   1f5be:	f7f6 f9c9 	bl	15954 <find_cf_cfg>
	if (!cfg) {
   1f5c2:	4604      	mov	r4, r0
   1f5c4:	b918      	cbnz	r0, 1f5ce <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1f5c6:	f7f6 f9c5 	bl	15954 <find_cf_cfg>
	if (!cfg) {
   1f5ca:	4604      	mov	r4, r0
   1f5cc:	b358      	cbz	r0, 1f626 <cf_write+0x82>
{
   1f5ce:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1f5d0:	f1b8 0f00 	cmp.w	r8, #0
   1f5d4:	d10f      	bne.n	1f5f6 <cf_write+0x52>
   1f5d6:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1f5da:	2207      	movs	r2, #7
   1f5dc:	1c60      	adds	r0, r4, #1
   1f5de:	f7fe fb38 	bl	1dc52 <memcpy>
	cfg->id = conn->id;
   1f5e2:	4620      	mov	r0, r4
   1f5e4:	7a33      	ldrb	r3, [r6, #8]
   1f5e6:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1f5ea:	2100      	movs	r1, #0
   1f5ec:	f7ff ff2b 	bl	1f446 <atomic_set_bit>
}
   1f5f0:	4628      	mov	r0, r5
   1f5f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1f5f6:	7a20      	ldrb	r0, [r4, #8]
   1f5f8:	fa20 f301 	lsr.w	r3, r0, r1
   1f5fc:	07da      	lsls	r2, r3, #31
   1f5fe:	d503      	bpl.n	1f608 <cf_write+0x64>
		    !(value[i / 8] & BIT(i % 8))) {
   1f600:	783b      	ldrb	r3, [r7, #0]
   1f602:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1f604:	07db      	lsls	r3, r3, #31
   1f606:	d511      	bpl.n	1f62c <cf_write+0x88>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1f608:	3101      	adds	r1, #1
   1f60a:	2903      	cmp	r1, #3
   1f60c:	d1e0      	bne.n	1f5d0 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1f60e:	783b      	ldrb	r3, [r7, #0]
   1f610:	f003 0307 	and.w	r3, r3, #7
   1f614:	4318      	orrs	r0, r3
   1f616:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1f618:	e7dd      	b.n	1f5d6 <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f61a:	f06f 0506 	mvn.w	r5, #6
   1f61e:	e7e7      	b.n	1f5f0 <cf_write+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1f620:	f06f 050c 	mvn.w	r5, #12
   1f624:	e7e4      	b.n	1f5f0 <cf_write+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1f626:	f06f 0510 	mvn.w	r5, #16
   1f62a:	e7e1      	b.n	1f5f0 <cf_write+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1f62c:	f06f 0512 	mvn.w	r5, #18
   1f630:	e7de      	b.n	1f5f0 <cf_write+0x4c>

0001f632 <read_appearance>:
{
   1f632:	b513      	push	{r0, r1, r4, lr}
   1f634:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f638:	4610      	mov	r0, r2
	if (offset > value_len) {
   1f63a:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1f63c:	f04f 0200 	mov.w	r2, #0
   1f640:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1f644:	d80d      	bhi.n	1f662 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   1f646:	f1c1 0402 	rsb	r4, r1, #2
   1f64a:	429c      	cmp	r4, r3
   1f64c:	bfa8      	it	ge
   1f64e:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1f650:	f10d 0306 	add.w	r3, sp, #6
   1f654:	4622      	mov	r2, r4
   1f656:	4419      	add	r1, r3
   1f658:	f7fe fafb 	bl	1dc52 <memcpy>
}
   1f65c:	4620      	mov	r0, r4
   1f65e:	b002      	add	sp, #8
   1f660:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f662:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1f666:	e7f9      	b.n	1f65c <read_appearance+0x2a>

0001f668 <read_name>:
{
   1f668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f66c:	4698      	mov	r8, r3
   1f66e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1f672:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   1f674:	f7f4 fad8 	bl	13c28 <bt_get_name>
   1f678:	4607      	mov	r7, r0
				 strlen(name));
   1f67a:	f7fe faa7 	bl	1dbcc <strlen>
	if (offset > value_len) {
   1f67e:	b283      	uxth	r3, r0
   1f680:	42b3      	cmp	r3, r6
   1f682:	d30c      	bcc.n	1f69e <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1f684:	1b9c      	subs	r4, r3, r6
   1f686:	4544      	cmp	r4, r8
   1f688:	bfa8      	it	ge
   1f68a:	4644      	movge	r4, r8
   1f68c:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1f68e:	4622      	mov	r2, r4
   1f690:	19b9      	adds	r1, r7, r6
   1f692:	4628      	mov	r0, r5
   1f694:	f7fe fadd 	bl	1dc52 <memcpy>
}
   1f698:	4620      	mov	r0, r4
   1f69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f69e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1f6a2:	e7f9      	b.n	1f698 <read_name+0x30>

0001f6a4 <cf_read>:
{
   1f6a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f6a6:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1f6a8:	2300      	movs	r3, #0
{
   1f6aa:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1f6ae:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1f6b2:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   1f6b4:	f7f6 f94e 	bl	15954 <find_cf_cfg>
	if (cfg) {
   1f6b8:	b128      	cbz	r0, 1f6c6 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1f6ba:	f100 0108 	add.w	r1, r0, #8
   1f6be:	2201      	movs	r2, #1
   1f6c0:	a801      	add	r0, sp, #4
   1f6c2:	f7fe fac6 	bl	1dc52 <memcpy>
	if (offset > value_len) {
   1f6c6:	2e01      	cmp	r6, #1
   1f6c8:	d80d      	bhi.n	1f6e6 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1f6ca:	f1c6 0401 	rsb	r4, r6, #1
   1f6ce:	42bc      	cmp	r4, r7
   1f6d0:	bfa8      	it	ge
   1f6d2:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1f6d4:	ab01      	add	r3, sp, #4
   1f6d6:	4622      	mov	r2, r4
   1f6d8:	1999      	adds	r1, r3, r6
   1f6da:	4628      	mov	r0, r5
   1f6dc:	f7fe fab9 	bl	1dc52 <memcpy>
}
   1f6e0:	4620      	mov	r0, r4
   1f6e2:	b003      	add	sp, #12
   1f6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f6e6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1f6ea:	e7f9      	b.n	1f6e0 <cf_read+0x3c>

0001f6ec <bt_gatt_attr_read_ccc>:
{
   1f6ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1f6ee:	68c9      	ldr	r1, [r1, #12]
{
   1f6f0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1f6f4:	4615      	mov	r5, r2
   1f6f6:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1f6f8:	f7ff feb3 	bl	1f462 <find_ccc_cfg>
	if (cfg) {
   1f6fc:	b100      	cbz	r0, 1f700 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1f6fe:	8900      	ldrh	r0, [r0, #8]
   1f700:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1f704:	2e02      	cmp	r6, #2
   1f706:	d80e      	bhi.n	1f726 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1f708:	f1c6 0402 	rsb	r4, r6, #2
   1f70c:	42bc      	cmp	r4, r7
   1f70e:	bfa8      	it	ge
   1f710:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1f712:	f10d 0306 	add.w	r3, sp, #6
   1f716:	4622      	mov	r2, r4
   1f718:	1999      	adds	r1, r3, r6
   1f71a:	4628      	mov	r0, r5
   1f71c:	f7fe fa99 	bl	1dc52 <memcpy>
}
   1f720:	4620      	mov	r0, r4
   1f722:	b003      	add	sp, #12
   1f724:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f726:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1f72a:	e7f9      	b.n	1f720 <bt_gatt_attr_read_ccc+0x34>

0001f72c <bt_gatt_attr_read_service>:
{
   1f72c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1f72e:	68c9      	ldr	r1, [r1, #12]
{
   1f730:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1f734:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1f736:	780b      	ldrb	r3, [r1, #0]
{
   1f738:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1f73a:	b993      	cbnz	r3, 1f762 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1f73c:	884b      	ldrh	r3, [r1, #2]
   1f73e:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1f742:	2d02      	cmp	r5, #2
   1f744:	d819      	bhi.n	1f77a <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1f746:	f1c5 0202 	rsb	r2, r5, #2
   1f74a:	4294      	cmp	r4, r2
   1f74c:	bfa8      	it	ge
   1f74e:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1f750:	f10d 0306 	add.w	r3, sp, #6
   1f754:	4622      	mov	r2, r4
   1f756:	1959      	adds	r1, r3, r5
   1f758:	f7fe fa7b 	bl	1dc52 <memcpy>
}
   1f75c:	4620      	mov	r0, r4
   1f75e:	b003      	add	sp, #12
   1f760:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1f762:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1f764:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1f768:	d807      	bhi.n	1f77a <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1f76a:	f1c5 0210 	rsb	r2, r5, #16
   1f76e:	4294      	cmp	r4, r2
   1f770:	bfa8      	it	ge
   1f772:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1f774:	4622      	mov	r2, r4
   1f776:	4429      	add	r1, r5
   1f778:	e7ee      	b.n	1f758 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f77a:	f06f 0406 	mvn.w	r4, #6
   1f77e:	e7ed      	b.n	1f75c <bt_gatt_attr_read_service+0x30>

0001f780 <sc_save>:
{
   1f780:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f784:	4680      	mov	r8, r0
   1f786:	460f      	mov	r7, r1
   1f788:	4616      	mov	r6, r2
   1f78a:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1f78c:	f7f6 f8d2 	bl	15934 <find_sc_cfg>
	if (!cfg) {
   1f790:	4604      	mov	r4, r0
   1f792:	b968      	cbnz	r0, 1f7b0 <sc_save+0x30>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1f794:	4669      	mov	r1, sp
   1f796:	9000      	str	r0, [sp, #0]
   1f798:	f8cd 0003 	str.w	r0, [sp, #3]
   1f79c:	f7f6 f8ca 	bl	15934 <find_sc_cfg>
		if (!cfg) {
   1f7a0:	4604      	mov	r4, r0
   1f7a2:	b180      	cbz	r0, 1f7c6 <sc_save+0x46>
		cfg->id = id;
   1f7a4:	f800 8b01 	strb.w	r8, [r0], #1
   1f7a8:	2207      	movs	r2, #7
   1f7aa:	4639      	mov	r1, r7
   1f7ac:	f7fe fa51 	bl	1dc52 <memcpy>
	if (!(cfg->data.start || cfg->data.end)) {
   1f7b0:	8922      	ldrh	r2, [r4, #8]
   1f7b2:	8963      	ldrh	r3, [r4, #10]
   1f7b4:	b91a      	cbnz	r2, 1f7be <sc_save+0x3e>
   1f7b6:	b923      	cbnz	r3, 1f7c2 <sc_save+0x42>
		cfg->data.start = start;
   1f7b8:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1f7ba:	8165      	strh	r5, [r4, #10]
   1f7bc:	e003      	b.n	1f7c6 <sc_save+0x46>
	if (new_start >= *start && new_end <= *end) {
   1f7be:	4296      	cmp	r6, r2
   1f7c0:	d304      	bcc.n	1f7cc <sc_save+0x4c>
   1f7c2:	429d      	cmp	r5, r3
   1f7c4:	d8f9      	bhi.n	1f7ba <sc_save+0x3a>
}
   1f7c6:	b002      	add	sp, #8
   1f7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*start = new_start;
   1f7cc:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1f7ce:	e7f8      	b.n	1f7c2 <sc_save+0x42>

0001f7d0 <sc_clear>:
{
   1f7d0:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1f7d2:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1f7d6:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1f7d8:	4631      	mov	r1, r6
   1f7da:	7a00      	ldrb	r0, [r0, #8]
   1f7dc:	f7fe fd50 	bl	1e280 <bt_addr_le_is_bonded>
   1f7e0:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1f7e2:	4631      	mov	r1, r6
   1f7e4:	f7f6 f8a6 	bl	15934 <find_sc_cfg>
	if (!cfg) {
   1f7e8:	b128      	cbz	r0, 1f7f6 <sc_clear+0x26>
}
   1f7ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1f7ee:	220c      	movs	r2, #12
   1f7f0:	2100      	movs	r1, #0
   1f7f2:	f7fe ba39 	b.w	1dc68 <memset>
}
   1f7f6:	bd70      	pop	{r4, r5, r6, pc}

0001f7f8 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1f7f8:	2a02      	cmp	r2, #2
{
   1f7fa:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1f7fc:	d108      	bne.n	1f810 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1f7fe:	2300      	movs	r3, #0
   1f800:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1f804:	461a      	mov	r2, r3
   1f806:	7a00      	ldrb	r0, [r0, #8]
   1f808:	f7ff ffba 	bl	1f780 <sc_save>
}
   1f80c:	2002      	movs	r0, #2
   1f80e:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1f810:	f7ff ffde 	bl	1f7d0 <sc_clear>
   1f814:	e7fa      	b.n	1f80c <sc_ccc_cfg_write+0x14>

0001f816 <bt_gatt_attr_read>:
{
   1f816:	b538      	push	{r3, r4, r5, lr}
   1f818:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f81c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   1f820:	42a9      	cmp	r1, r5
{
   1f822:	4610      	mov	r0, r2
	if (offset > value_len) {
   1f824:	d80b      	bhi.n	1f83e <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1f826:	1a6d      	subs	r5, r5, r1
   1f828:	429d      	cmp	r5, r3
   1f82a:	bfa8      	it	ge
   1f82c:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1f82e:	9b05      	ldr	r3, [sp, #20]
   1f830:	b2ad      	uxth	r5, r5
   1f832:	462a      	mov	r2, r5
   1f834:	4419      	add	r1, r3
   1f836:	f7fe fa0c 	bl	1dc52 <memcpy>
}
   1f83a:	4628      	mov	r0, r5
   1f83c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f83e:	f06f 0506 	mvn.w	r5, #6
   1f842:	e7fa      	b.n	1f83a <bt_gatt_attr_read+0x24>

0001f844 <bt_gatt_attr_value_handle>:
{
   1f844:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1f846:	4604      	mov	r4, r0
   1f848:	b910      	cbnz	r0, 1f850 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1f84a:	2000      	movs	r0, #0
}
   1f84c:	b002      	add	sp, #8
   1f84e:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1f850:	2300      	movs	r3, #0
   1f852:	f88d 3004 	strb.w	r3, [sp, #4]
   1f856:	6800      	ldr	r0, [r0, #0]
   1f858:	f642 0303 	movw	r3, #10243	; 0x2803
   1f85c:	a901      	add	r1, sp, #4
   1f85e:	f8ad 3006 	strh.w	r3, [sp, #6]
   1f862:	f7fe fa2b 	bl	1dcbc <bt_uuid_cmp>
   1f866:	2800      	cmp	r0, #0
   1f868:	d1ef      	bne.n	1f84a <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1f86a:	68e3      	ldr	r3, [r4, #12]
   1f86c:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1f86e:	2800      	cmp	r0, #0
   1f870:	d1ec      	bne.n	1f84c <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1f872:	4620      	mov	r0, r4
   1f874:	f7f6 f97c 	bl	15b70 <bt_gatt_attr_get_handle>
   1f878:	3001      	adds	r0, #1
   1f87a:	b280      	uxth	r0, r0
	return handle;
   1f87c:	e7e6      	b.n	1f84c <bt_gatt_attr_value_handle+0x8>

0001f87e <bt_gatt_attr_read_chrc>:
{
   1f87e:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1f880:	68cf      	ldr	r7, [r1, #12]
{
   1f882:	b087      	sub	sp, #28
   1f884:	4608      	mov	r0, r1
   1f886:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1f888:	79bb      	ldrb	r3, [r7, #6]
   1f88a:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1f88e:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1f892:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1f894:	f7ff ffd6 	bl	1f844 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1f898:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1f89a:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1f89e:	780b      	ldrb	r3, [r1, #0]
   1f8a0:	b99b      	cbnz	r3, 1f8ca <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1f8a2:	884b      	ldrh	r3, [r1, #2]
   1f8a4:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   1f8a8:	2105      	movs	r1, #5
	if (offset > value_len) {
   1f8aa:	42b1      	cmp	r1, r6
   1f8ac:	d315      	bcc.n	1f8da <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1f8ae:	1b89      	subs	r1, r1, r6
   1f8b0:	42a1      	cmp	r1, r4
   1f8b2:	bfa8      	it	ge
   1f8b4:	4621      	movge	r1, r4
   1f8b6:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   1f8b8:	ab01      	add	r3, sp, #4
   1f8ba:	4622      	mov	r2, r4
   1f8bc:	1999      	adds	r1, r3, r6
   1f8be:	4628      	mov	r0, r5
   1f8c0:	f7fe f9c7 	bl	1dc52 <memcpy>
}
   1f8c4:	4620      	mov	r0, r4
   1f8c6:	b007      	add	sp, #28
   1f8c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1f8ca:	3101      	adds	r1, #1
   1f8cc:	2210      	movs	r2, #16
   1f8ce:	f10d 0007 	add.w	r0, sp, #7
   1f8d2:	f7fe f9be 	bl	1dc52 <memcpy>
		value_len += 16U;
   1f8d6:	2113      	movs	r1, #19
   1f8d8:	e7e7      	b.n	1f8aa <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f8da:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1f8de:	e7f1      	b.n	1f8c4 <bt_gatt_attr_read_chrc+0x46>

0001f8e0 <bt_gatt_foreach_attr>:
{
   1f8e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1f8e2:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1f8e6:	2300      	movs	r3, #0
   1f8e8:	9300      	str	r3, [sp, #0]
   1f8ea:	461a      	mov	r2, r3
   1f8ec:	f7f6 f970 	bl	15bd0 <bt_gatt_foreach_attr_type>
}
   1f8f0:	b005      	add	sp, #20
   1f8f2:	f85d fb04 	ldr.w	pc, [sp], #4

0001f8f6 <db_hash_process>:
	db_hash_gen(true);
   1f8f6:	f7f6 b9c5 	b.w	15c84 <db_hash_gen.isra.0>

0001f8fa <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1f8fa:	07d3      	lsls	r3, r2, #31
{
   1f8fc:	b510      	push	{r4, lr}
   1f8fe:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1f900:	d504      	bpl.n	1f90c <bt_gatt_check_perm+0x12>
   1f902:	f014 0f15 	tst.w	r4, #21
   1f906:	d017      	beq.n	1f938 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1f908:	684b      	ldr	r3, [r1, #4]
   1f90a:	b1ab      	cbz	r3, 1f938 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1f90c:	0793      	lsls	r3, r2, #30
   1f90e:	d504      	bpl.n	1f91a <bt_gatt_check_perm+0x20>
   1f910:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1f914:	d012      	beq.n	1f93c <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1f916:	688b      	ldr	r3, [r1, #8]
   1f918:	b183      	cbz	r3, 1f93c <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1f91a:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1f91c:	f014 0f30 	tst.w	r4, #48	; 0x30
   1f920:	d104      	bne.n	1f92c <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1f922:	f014 000c 	ands.w	r0, r4, #12
   1f926:	bf18      	it	ne
   1f928:	200f      	movne	r0, #15
}
   1f92a:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1f92c:	f7fe fefb 	bl	1e726 <bt_conn_get_security>
   1f930:	2802      	cmp	r0, #2
   1f932:	d8f6      	bhi.n	1f922 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1f934:	2005      	movs	r0, #5
   1f936:	e7f8      	b.n	1f92a <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1f938:	2002      	movs	r0, #2
   1f93a:	e7f6      	b.n	1f92a <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1f93c:	2003      	movs	r0, #3
   1f93e:	e7f4      	b.n	1f92a <bt_gatt_check_perm+0x30>

0001f940 <gatt_notify>:
{
   1f940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f944:	4614      	mov	r4, r2
   1f946:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1f948:	2214      	movs	r2, #20
   1f94a:	6861      	ldr	r1, [r4, #4]
{
   1f94c:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1f94e:	f7ff ffd4 	bl	1f8fa <bt_gatt_check_perm>
   1f952:	bb08      	cbnz	r0, 1f998 <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   1f954:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1f956:	211b      	movs	r1, #27
   1f958:	3202      	adds	r2, #2
   1f95a:	4638      	mov	r0, r7
   1f95c:	f7ff fbfd 	bl	1f15a <bt_att_create_pdu>
	if (!buf) {
   1f960:	4605      	mov	r5, r0
   1f962:	b1e8      	cbz	r0, 1f9a0 <gatt_notify+0x60>
   1f964:	f100 0908 	add.w	r9, r0, #8
   1f968:	2102      	movs	r1, #2
   1f96a:	4648      	mov	r0, r9
   1f96c:	f000 f8cf 	bl	1fb0e <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1f970:	4606      	mov	r6, r0
   1f972:	89a1      	ldrh	r1, [r4, #12]
   1f974:	f826 8b02 	strh.w	r8, [r6], #2
   1f978:	4648      	mov	r0, r9
   1f97a:	f000 f8c8 	bl	1fb0e <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1f97e:	89a2      	ldrh	r2, [r4, #12]
   1f980:	68a1      	ldr	r1, [r4, #8]
   1f982:	4630      	mov	r0, r6
   1f984:	f7fe f965 	bl	1dc52 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1f988:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1f98c:	4629      	mov	r1, r5
   1f98e:	4638      	mov	r0, r7
}
   1f990:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1f994:	f7ff bc5e 	b.w	1f254 <bt_att_send>
		return -EPERM;
   1f998:	f04f 30ff 	mov.w	r0, #4294967295
}
   1f99c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   1f9a0:	f06f 000b 	mvn.w	r0, #11
   1f9a4:	e7fa      	b.n	1f99c <gatt_notify+0x5c>

0001f9a6 <bt_gatt_change_aware>:
{
   1f9a6:	b510      	push	{r4, lr}
   1f9a8:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1f9aa:	f7f5 ffd3 	bl	15954 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1f9ae:	4603      	mov	r3, r0
   1f9b0:	b910      	cbnz	r0, 1f9b8 <bt_gatt_change_aware+0x12>
		return true;
   1f9b2:	2401      	movs	r4, #1
}
   1f9b4:	4620      	mov	r0, r4
   1f9b6:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1f9b8:	7a02      	ldrb	r2, [r0, #8]
   1f9ba:	07d2      	lsls	r2, r2, #31
   1f9bc:	d5f9      	bpl.n	1f9b2 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f9be:	f3bf 8f5b 	dmb	ish
   1f9c2:	68d9      	ldr	r1, [r3, #12]
   1f9c4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1f9c8:	f011 0101 	ands.w	r1, r1, #1
   1f9cc:	f100 000c 	add.w	r0, r0, #12
   1f9d0:	d1ef      	bne.n	1f9b2 <bt_gatt_change_aware+0xc>
	if (!req) {
   1f9d2:	2c00      	cmp	r4, #0
   1f9d4:	d0ee      	beq.n	1f9b4 <bt_gatt_change_aware+0xe>
   1f9d6:	f3bf 8f5b 	dmb	ish
   1f9da:	68db      	ldr	r3, [r3, #12]
   1f9dc:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1f9e0:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1f9e4:	079b      	lsls	r3, r3, #30
   1f9e6:	d50e      	bpl.n	1fa06 <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f9e8:	f3bf 8f5b 	dmb	ish
   1f9ec:	e850 3f00 	ldrex	r3, [r0]
   1f9f0:	f023 0302 	bic.w	r3, r3, #2
   1f9f4:	e840 3200 	strex	r2, r3, [r0]
   1f9f8:	2a00      	cmp	r2, #0
   1f9fa:	d1f7      	bne.n	1f9ec <bt_gatt_change_aware+0x46>
   1f9fc:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1fa00:	f7ff fd21 	bl	1f446 <atomic_set_bit>
	return false;
   1fa04:	e7d6      	b.n	1f9b4 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1fa06:	2101      	movs	r1, #1
   1fa08:	e7fa      	b.n	1fa00 <bt_gatt_change_aware+0x5a>

0001fa0a <bt_smp_recv>:
{
   1fa0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1fa0c:	2100      	movs	r1, #0
   1fa0e:	f04f 32ff 	mov.w	r2, #4294967295
   1fa12:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   1fa16:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1fa18:	4608      	mov	r0, r1
   1fa1a:	f7fe ff49 	bl	1e8b0 <bt_l2cap_create_pdu_timeout>
   1fa1e:	f100 0608 	add.w	r6, r0, #8
   1fa22:	4604      	mov	r4, r0
   1fa24:	2101      	movs	r1, #1
   1fa26:	4630      	mov	r0, r6
   1fa28:	f000 f871 	bl	1fb0e <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1fa2c:	2505      	movs	r5, #5
   1fa2e:	7005      	strb	r5, [r0, #0]
   1fa30:	2101      	movs	r1, #1
   1fa32:	4630      	mov	r0, r6
   1fa34:	f000 f86b 	bl	1fb0e <net_buf_simple_add>
   1fa38:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1fa3a:	7005      	strb	r5, [r0, #0]
   1fa3c:	4622      	mov	r2, r4
   1fa3e:	9300      	str	r3, [sp, #0]
   1fa40:	2106      	movs	r1, #6
   1fa42:	4638      	mov	r0, r7
   1fa44:	f7fe ff37 	bl	1e8b6 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   1fa48:	b110      	cbz	r0, 1fa50 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   1fa4a:	4620      	mov	r0, r4
   1fa4c:	f7f6 fcd8 	bl	16400 <net_buf_unref>
}
   1fa50:	2000      	movs	r0, #0
   1fa52:	b003      	add	sp, #12
   1fa54:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fa56 <bt_smp_sign>:
   1fa56:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1fa5a:	4770      	bx	lr

0001fa5c <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1fa5c:	2000      	movs	r0, #0
   1fa5e:	4770      	bx	lr

0001fa60 <fixed_data_unref>:
}
   1fa60:	4770      	bx	lr

0001fa62 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1fa62:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1fa64:	6849      	ldr	r1, [r1, #4]
   1fa66:	6809      	ldr	r1, [r1, #0]
   1fa68:	f7f6 bc3e 	b.w	162e8 <net_buf_alloc_len>

0001fa6c <net_buf_get>:
{
   1fa6c:	b570      	push	{r4, r5, r6, lr}
   1fa6e:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1fa70:	f7f9 f92c 	bl	18ccc <z_impl_k_queue_get>
	if (!buf) {
   1fa74:	4605      	mov	r5, r0
   1fa76:	b128      	cbz	r0, 1fa84 <net_buf_get+0x18>
   1fa78:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1fa7a:	7963      	ldrb	r3, [r4, #5]
   1fa7c:	f013 0301 	ands.w	r3, r3, #1
   1fa80:	d102      	bne.n	1fa88 <net_buf_get+0x1c>
	frag->frags = NULL;
   1fa82:	6023      	str	r3, [r4, #0]
}
   1fa84:	4628      	mov	r0, r5
   1fa86:	bd70      	pop	{r4, r5, r6, pc}
   1fa88:	2300      	movs	r3, #0
   1fa8a:	2200      	movs	r2, #0
   1fa8c:	4630      	mov	r0, r6
   1fa8e:	f7f9 f91d 	bl	18ccc <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1fa92:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1fa94:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1fa96:	f023 0301 	bic.w	r3, r3, #1
   1fa9a:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1fa9c:	4604      	mov	r4, r0
   1fa9e:	e7ec      	b.n	1fa7a <net_buf_get+0xe>

0001faa0 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1faa0:	6883      	ldr	r3, [r0, #8]
   1faa2:	440b      	add	r3, r1
   1faa4:	6003      	str	r3, [r0, #0]
}
   1faa6:	4770      	bx	lr

0001faa8 <net_buf_put>:
{
   1faa8:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1faaa:	460a      	mov	r2, r1
   1faac:	6814      	ldr	r4, [r2, #0]
   1faae:	b914      	cbnz	r4, 1fab6 <net_buf_put+0xe>
}
   1fab0:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1fab2:	f000 bc21 	b.w	202f8 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1fab6:	7953      	ldrb	r3, [r2, #5]
   1fab8:	f043 0301 	orr.w	r3, r3, #1
   1fabc:	7153      	strb	r3, [r2, #5]
   1fabe:	4622      	mov	r2, r4
   1fac0:	e7f4      	b.n	1faac <net_buf_put+0x4>

0001fac2 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1fac2:	7902      	ldrb	r2, [r0, #4]
   1fac4:	3201      	adds	r2, #1
   1fac6:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1fac8:	4770      	bx	lr

0001faca <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1faca:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1facc:	4618      	mov	r0, r3
   1face:	681b      	ldr	r3, [r3, #0]
   1fad0:	2b00      	cmp	r3, #0
   1fad2:	d1fb      	bne.n	1facc <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1fad4:	4770      	bx	lr

0001fad6 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1fad6:	6802      	ldr	r2, [r0, #0]
{
   1fad8:	b510      	push	{r4, lr}
	if (parent->frags) {
   1fada:	b12a      	cbz	r2, 1fae8 <net_buf_frag_insert+0x12>
   1fadc:	460b      	mov	r3, r1
	while (buf->frags) {
   1fade:	461c      	mov	r4, r3
   1fae0:	681b      	ldr	r3, [r3, #0]
   1fae2:	2b00      	cmp	r3, #0
   1fae4:	d1fb      	bne.n	1fade <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1fae6:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1fae8:	6001      	str	r1, [r0, #0]
}
   1faea:	bd10      	pop	{r4, pc}

0001faec <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1faec:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1faee:	4604      	mov	r4, r0
   1faf0:	b920      	cbnz	r0, 1fafc <net_buf_frag_add+0x10>
	buf->ref++;
   1faf2:	790b      	ldrb	r3, [r1, #4]
   1faf4:	3301      	adds	r3, #1
   1faf6:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   1faf8:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1fafa:	bd10      	pop	{r4, pc}
   1fafc:	4603      	mov	r3, r0
	while (buf->frags) {
   1fafe:	4618      	mov	r0, r3
   1fb00:	681b      	ldr	r3, [r3, #0]
   1fb02:	2b00      	cmp	r3, #0
   1fb04:	d1fb      	bne.n	1fafe <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1fb06:	f7ff ffe6 	bl	1fad6 <net_buf_frag_insert>
   1fb0a:	4620      	mov	r0, r4
   1fb0c:	e7f5      	b.n	1fafa <net_buf_frag_add+0xe>

0001fb0e <net_buf_simple_add>:
	return buf->data + buf->len;
   1fb0e:	8883      	ldrh	r3, [r0, #4]
   1fb10:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1fb12:	4419      	add	r1, r3
   1fb14:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1fb16:	18d0      	adds	r0, r2, r3
   1fb18:	4770      	bx	lr

0001fb1a <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1fb1a:	b430      	push	{r4, r5}
   1fb1c:	8884      	ldrh	r4, [r0, #4]
   1fb1e:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1fb20:	18a3      	adds	r3, r4, r2
   1fb22:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1fb24:	1928      	adds	r0, r5, r4
}
   1fb26:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1fb28:	f7fe b893 	b.w	1dc52 <memcpy>

0001fb2c <net_buf_simple_add_u8>:
   1fb2c:	8883      	ldrh	r3, [r0, #4]
   1fb2e:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1fb30:	b510      	push	{r4, lr}
	buf->len += len;
   1fb32:	1c5c      	adds	r4, r3, #1
   1fb34:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1fb36:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1fb38:	18d0      	adds	r0, r2, r3
   1fb3a:	bd10      	pop	{r4, pc}

0001fb3c <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1fb3c:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1fb3e:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1fb40:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1fb42:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1fb44:	4411      	add	r1, r2
	buf->data -= len;
   1fb46:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1fb48:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1fb4a:	4770      	bx	lr

0001fb4c <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1fb4c:	8882      	ldrh	r2, [r0, #4]
   1fb4e:	1a52      	subs	r2, r2, r1
{
   1fb50:	4603      	mov	r3, r0
	buf->len -= len;
   1fb52:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1fb54:	6800      	ldr	r0, [r0, #0]
   1fb56:	4408      	add	r0, r1
   1fb58:	6018      	str	r0, [r3, #0]
}
   1fb5a:	4770      	bx	lr

0001fb5c <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1fb5c:	4603      	mov	r3, r0
	void *data = buf->data;
   1fb5e:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1fb60:	889a      	ldrh	r2, [r3, #4]
   1fb62:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1fb64:	4401      	add	r1, r0
	buf->len -= len;
   1fb66:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1fb68:	6019      	str	r1, [r3, #0]

	return data;
}
   1fb6a:	4770      	bx	lr

0001fb6c <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1fb6c:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1fb6e:	6803      	ldr	r3, [r0, #0]
   1fb70:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1fb72:	2102      	movs	r1, #2
   1fb74:	f7ff ffea 	bl	1fb4c <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1fb78:	4620      	mov	r0, r4
   1fb7a:	bd10      	pop	{r4, pc}

0001fb7c <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1fb7c:	6802      	ldr	r2, [r0, #0]
   1fb7e:	6880      	ldr	r0, [r0, #8]
}
   1fb80:	1a10      	subs	r0, r2, r0
   1fb82:	4770      	bx	lr

0001fb84 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1fb84:	8883      	ldrh	r3, [r0, #4]
   1fb86:	88c2      	ldrh	r2, [r0, #6]
   1fb88:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1fb8a:	6803      	ldr	r3, [r0, #0]
   1fb8c:	6880      	ldr	r0, [r0, #8]
   1fb8e:	1a18      	subs	r0, r3, r0
}
   1fb90:	1a10      	subs	r0, r2, r0
   1fb92:	4770      	bx	lr

0001fb94 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   1fb94:	b570      	push	{r4, r5, r6, lr}
   1fb96:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1fb98:	6801      	ldr	r1, [r0, #0]
{
   1fb9a:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1fb9c:	b189      	cbz	r1, 1fbc2 <gpio_fire_callbacks+0x2e>
	return node->next;
   1fb9e:	680c      	ldr	r4, [r1, #0]
   1fba0:	2c00      	cmp	r4, #0
   1fba2:	bf38      	it	cc
   1fba4:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   1fba6:	688a      	ldr	r2, [r1, #8]
   1fba8:	402a      	ands	r2, r5
   1fbaa:	d002      	beq.n	1fbb2 <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1fbac:	684b      	ldr	r3, [r1, #4]
   1fbae:	4630      	mov	r0, r6
   1fbb0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1fbb2:	b134      	cbz	r4, 1fbc2 <gpio_fire_callbacks+0x2e>
   1fbb4:	6823      	ldr	r3, [r4, #0]
   1fbb6:	2b00      	cmp	r3, #0
   1fbb8:	bf38      	it	cc
   1fbba:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1fbbc:	4621      	mov	r1, r4
   1fbbe:	461c      	mov	r4, r3
   1fbc0:	e7f1      	b.n	1fba6 <gpio_fire_callbacks+0x12>
		}
	}
}
   1fbc2:	bd70      	pop	{r4, r5, r6, pc}

0001fbc4 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fbc4:	6843      	ldr	r3, [r0, #4]
   1fbc6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1fbc8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1fbcc:	600b      	str	r3, [r1, #0]
}
   1fbce:	2000      	movs	r0, #0
   1fbd0:	4770      	bx	lr

0001fbd2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fbd2:	6843      	ldr	r3, [r0, #4]
   1fbd4:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1fbd6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1fbda:	4042      	eors	r2, r0
   1fbdc:	400a      	ands	r2, r1
   1fbde:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1fbe0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1fbe4:	2000      	movs	r0, #0
   1fbe6:	4770      	bx	lr

0001fbe8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fbe8:	6843      	ldr	r3, [r0, #4]
   1fbea:	685b      	ldr	r3, [r3, #4]
}
   1fbec:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1fbee:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1fbf2:	4770      	bx	lr

0001fbf4 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fbf4:	6843      	ldr	r3, [r0, #4]
   1fbf6:	685b      	ldr	r3, [r3, #4]
}
   1fbf8:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1fbfa:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1fbfe:	4770      	bx	lr

0001fc00 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fc00:	6843      	ldr	r3, [r0, #4]
   1fc02:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1fc04:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1fc08:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1fc0a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1fc0e:	2000      	movs	r0, #0
   1fc10:	4770      	bx	lr

0001fc12 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1fc12:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
   1fc14:	6858      	ldr	r0, [r3, #4]
{
   1fc16:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   1fc18:	b158      	cbz	r0, 1fc32 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1fc1a:	2400      	movs	r4, #0
   1fc1c:	4281      	cmp	r1, r0
   1fc1e:	d113      	bne.n	1fc48 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1fc20:	6808      	ldr	r0, [r1, #0]
   1fc22:	b95c      	cbnz	r4, 1fc3c <gpio_nrfx_manage_callback+0x2a>
   1fc24:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   1fc26:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1fc28:	42a1      	cmp	r1, r4
   1fc2a:	d100      	bne.n	1fc2e <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1fc2c:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1fc2e:	2000      	movs	r0, #0
   1fc30:	6008      	str	r0, [r1, #0]
	if (set) {
   1fc32:	b972      	cbnz	r2, 1fc52 <gpio_nrfx_manage_callback+0x40>
	return 0;
   1fc34:	2000      	movs	r0, #0
}
   1fc36:	bd30      	pop	{r4, r5, pc}
   1fc38:	4628      	mov	r0, r5
   1fc3a:	e7ef      	b.n	1fc1c <gpio_nrfx_manage_callback+0xa>
   1fc3c:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1fc3e:	6898      	ldr	r0, [r3, #8]
   1fc40:	4281      	cmp	r1, r0
	list->tail = node;
   1fc42:	bf08      	it	eq
   1fc44:	609c      	streq	r4, [r3, #8]
}
   1fc46:	e7f2      	b.n	1fc2e <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1fc48:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1fc4a:	4604      	mov	r4, r0
   1fc4c:	2d00      	cmp	r5, #0
   1fc4e:	d1f3      	bne.n	1fc38 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1fc50:	b13a      	cbz	r2, 1fc62 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1fc52:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1fc54:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1fc56:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   1fc58:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1fc5a:	2800      	cmp	r0, #0
   1fc5c:	d1ea      	bne.n	1fc34 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1fc5e:	6099      	str	r1, [r3, #8]
}
   1fc60:	e7e9      	b.n	1fc36 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1fc62:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1fc66:	e7e6      	b.n	1fc36 <gpio_nrfx_manage_callback+0x24>

0001fc68 <cfg_level_pins>:
{
   1fc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   1fc6c:	6907      	ldr	r7, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1fc6e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1fc72:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1fc74:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   1fc78:	4313      	orrs	r3, r2
   1fc7a:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   1fc7e:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1fc80:	2500      	movs	r5, #0
	while (level_pins) {
   1fc82:	b90c      	cbnz	r4, 1fc88 <cfg_level_pins+0x20>
}
   1fc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1fc88:	4226      	tst	r6, r4
   1fc8a:	d010      	beq.n	1fcae <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1fc8c:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1fc8e:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1fc92:	40e9      	lsrs	r1, r5
   1fc94:	f001 0101 	and.w	r1, r1, #1
   1fc98:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1fc9c:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1fca0:	b2c9      	uxtb	r1, r1
   1fca2:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1fca6:	f7f6 fc57 	bl	16558 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1fcaa:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1fcae:	3501      	adds	r5, #1
		bit <<= 1;
   1fcb0:	0076      	lsls	r6, r6, #1
   1fcb2:	e7e6      	b.n	1fc82 <cfg_level_pins+0x1a>

0001fcb4 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   1fcb4:	07ca      	lsls	r2, r1, #31
	nrfx_twim_t const *inst = &(get_dev_config(dev)->twim);
   1fcb6:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   1fcb8:	d405      	bmi.n	1fcc6 <i2c_nrfx_twim_configure+0x12>
	switch (I2C_SPEED_GET(dev_config)) {
   1fcba:	f3c1 0242 	ubfx	r2, r1, #1, #3
   1fcbe:	2a01      	cmp	r2, #1
   1fcc0:	d004      	beq.n	1fccc <i2c_nrfx_twim_configure+0x18>
   1fcc2:	2a02      	cmp	r2, #2
   1fcc4:	d00b      	beq.n	1fcde <i2c_nrfx_twim_configure+0x2a>
		return -EINVAL;
   1fcc6:	f06f 0015 	mvn.w	r0, #21
}
   1fcca:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
   1fccc:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
   1fcce:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   1fcd2:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   1fcd6:	6903      	ldr	r3, [r0, #16]
	return 0;
   1fcd8:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   1fcda:	6359      	str	r1, [r3, #52]	; 0x34
	return 0;
   1fcdc:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
   1fcde:	681b      	ldr	r3, [r3, #0]
   1fce0:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   1fce4:	e7f5      	b.n	1fcd2 <i2c_nrfx_twim_configure+0x1e>

0001fce6 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1fce6:	6843      	ldr	r3, [r0, #4]
   1fce8:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1fcea:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1fcee:	05d1      	lsls	r1, r2, #23
   1fcf0:	d518      	bpl.n	1fd24 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fcf2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1fcf6:	b1aa      	cbz	r2, 1fd24 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1fcf8:	f04f 0140 	mov.w	r1, #64	; 0x40
   1fcfc:	f3ef 8211 	mrs	r2, BASEPRI
   1fd00:	f381 8811 	msr	BASEPRI, r1
   1fd04:	f3bf 8f6f 	isb	sy
   1fd08:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1fd0c:	b131      	cbz	r1, 1fd1c <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fd0e:	2100      	movs	r1, #0
   1fd10:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1fd14:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fd18:	2101      	movs	r1, #1
   1fd1a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1fd1c:	f382 8811 	msr	BASEPRI, r2
   1fd20:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1fd24:	6842      	ldr	r2, [r0, #4]
   1fd26:	6852      	ldr	r2, [r2, #4]
   1fd28:	06d2      	lsls	r2, r2, #27
   1fd2a:	d515      	bpl.n	1fd58 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
   1fd2c:	f04f 0140 	mov.w	r1, #64	; 0x40
   1fd30:	f3ef 8211 	mrs	r2, BASEPRI
   1fd34:	f381 8811 	msr	BASEPRI, r1
   1fd38:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fd3c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1fd40:	b111      	cbz	r1, 1fd48 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1fd42:	2100      	movs	r1, #0
   1fd44:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1fd48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1fd4c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   1fd50:	f382 8811 	msr	BASEPRI, r2
   1fd54:	f3bf 8f6f 	isb	sy
}
   1fd58:	4770      	bx	lr

0001fd5a <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   1fd5a:	6902      	ldr	r2, [r0, #16]
{
   1fd5c:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1fd5e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1fd62:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1fd66:	2000      	movs	r0, #0
   1fd68:	4770      	bx	lr

0001fd6a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1fd6a:	6843      	ldr	r3, [r0, #4]
   1fd6c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1fd6e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1fd72:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1fd76:	4770      	bx	lr

0001fd78 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1fd78:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1fd7a:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fd7c:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1fd80:	b940      	cbnz	r0, 1fd94 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1fd82:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1fd84:	0712      	lsls	r2, r2, #28
   1fd86:	d406      	bmi.n	1fd96 <is_tx_ready+0x1e>
   1fd88:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   1fd8c:	3800      	subs	r0, #0
   1fd8e:	bf18      	it	ne
   1fd90:	2001      	movne	r0, #1
   1fd92:	4770      	bx	lr
   1fd94:	2001      	movs	r0, #1
}
   1fd96:	4770      	bx	lr

0001fd98 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1fd98:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1fd9a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1fd9c:	681b      	ldr	r3, [r3, #0]
   1fd9e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1fda2:	b148      	cbz	r0, 1fdb8 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   1fda4:	7c52      	ldrb	r2, [r2, #17]
   1fda6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fda8:	2000      	movs	r0, #0
   1fdaa:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1fdae:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fdb2:	2201      	movs	r2, #1
   1fdb4:	601a      	str	r2, [r3, #0]
	return 0;
   1fdb6:	4770      	bx	lr
		return -1;
   1fdb8:	f04f 30ff 	mov.w	r0, #4294967295
}
   1fdbc:	4770      	bx	lr

0001fdbe <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   1fdbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1fdc0:	460f      	mov	r7, r1
   1fdc2:	4616      	mov	r6, r2
	}

#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   1fdc4:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   1fdc8:	2400      	movs	r4, #0
	int res = -EINVAL;
   1fdca:	f06f 0015 	mvn.w	r0, #21
	/** This is a call from a secure app, in which case entropy is
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   1fdce:	42a6      	cmp	r6, r4
   1fdd0:	d801      	bhi.n	1fdd6 <entropy_cc3xx_rng_get_entropy+0x18>
		offset += chunk_size;
	}
#endif

	return res;
}
   1fdd2:	b003      	add	sp, #12
   1fdd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1fdd6:	1b33      	subs	r3, r6, r4
   1fdd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1fddc:	bf38      	it	cc
   1fdde:	461d      	movcc	r5, r3
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
   1fde0:	462a      	mov	r2, r5
   1fde2:	ab01      	add	r3, sp, #4
   1fde4:	1939      	adds	r1, r7, r4
   1fde6:	2000      	movs	r0, #0
   1fde8:	f7f9 fff4 	bl	19dd4 <nrf_cc3xx_platform_ctr_drbg_get>
		if (olen != chunk_size) {
   1fdec:	9b01      	ldr	r3, [sp, #4]
   1fdee:	42ab      	cmp	r3, r5
   1fdf0:	d103      	bne.n	1fdfa <entropy_cc3xx_rng_get_entropy+0x3c>
		if (res != 0) {
   1fdf2:	2800      	cmp	r0, #0
   1fdf4:	d1ed      	bne.n	1fdd2 <entropy_cc3xx_rng_get_entropy+0x14>
		offset += chunk_size;
   1fdf6:	442c      	add	r4, r5
   1fdf8:	e7e9      	b.n	1fdce <entropy_cc3xx_rng_get_entropy+0x10>
			return -EINVAL;
   1fdfa:	f06f 0015 	mvn.w	r0, #21
   1fdfe:	e7e8      	b.n	1fdd2 <entropy_cc3xx_rng_get_entropy+0x14>

0001fe00 <entropy_cc3xx_rng_init>:
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   1fe00:	2200      	movs	r2, #0
{
   1fe02:	b508      	push	{r3, lr}
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   1fe04:	4611      	mov	r1, r2
   1fe06:	4610      	mov	r0, r2
   1fe08:	f7f9 ffb0 	bl	19d6c <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
   1fe0c:	2800      	cmp	r0, #0
			return -EINVAL;
		}
	#endif

	return 0;
}
   1fe0e:	bf18      	it	ne
   1fe10:	f06f 0015 	mvnne.w	r0, #21
   1fe14:	bd08      	pop	{r3, pc}

0001fe16 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1fe16:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   1fe18:	2000      	movs	r0, #0
   1fe1a:	f7f2 ff39 	bl	12c90 <sys_arch_reboot>

0001fe1e <sdc_assertion_handler>:
	k_oops();
   1fe1e:	4040      	eors	r0, r0
   1fe20:	f380 8811 	msr	BASEPRI, r0
   1fe24:	f04f 0003 	mov.w	r0, #3
   1fe28:	df02      	svc	2
}
   1fe2a:	4770      	bx	lr

0001fe2c <rand_prio_high_vector_get>:
   1fe2c:	f7f7 b9dc 	b.w	171e8 <rand_prio_low_vector_get>

0001fe30 <m_assert_handler>:
	k_oops();
   1fe30:	4040      	eors	r0, r0
   1fe32:	f380 8811 	msr	BASEPRI, r0
   1fe36:	f04f 0003 	mov.w	r0, #3
   1fe3a:	df02      	svc	2
}
   1fe3c:	4770      	bx	lr

0001fe3e <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1fe3e:	4668      	mov	r0, sp
   1fe40:	f020 0107 	bic.w	r1, r0, #7
   1fe44:	468d      	mov	sp, r1
   1fe46:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   1fe48:	f7e3 fb34 	bl	34b4 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   1fe4c:	f7f2 fc0c 	bl	12668 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1fe50:	f7f2 fdda 	bl	12a08 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1fe54:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1fe58:	4685      	mov	sp, r0
   1fe5a:	4770      	bx	lr

0001fe5c <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1fe5c:	4668      	mov	r0, sp
   1fe5e:	f020 0107 	bic.w	r1, r0, #7
   1fe62:	468d      	mov	sp, r1
   1fe64:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   1fe66:	f7e3 faa7 	bl	33b8 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   1fe6a:	f7f2 fbfd 	bl	12668 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1fe6e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1fe72:	4685      	mov	sp, r0
   1fe74:	4770      	bx	lr

0001fe76 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1fe76:	4668      	mov	r0, sp
   1fe78:	f020 0107 	bic.w	r1, r0, #7
   1fe7c:	468d      	mov	sp, r1
   1fe7e:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   1fe80:	f7ec f9e2 	bl	c248 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   1fe84:	f7f2 fbf0 	bl	12668 <_arch_isr_direct_pm>
   1fe88:	f7f2 fdbe 	bl	12a08 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1fe8c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1fe90:	4685      	mov	sp, r0
   1fe92:	4770      	bx	lr

0001fe94 <nrfx_clock_stop>:
	switch (domain) {
   1fe94:	2801      	cmp	r0, #1
   1fe96:	d101      	bne.n	1fe9c <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   1fe98:	f7e4 b902 	b.w	40a0 <mpsl_clock_hfclk_release>
}
   1fe9c:	4770      	bx	lr

0001fe9e <nrfx_clock_enable>:
}
   1fe9e:	4770      	bx	lr

0001fea0 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   1fea0:	f7e3 bf1c 	b.w	3cdc <MPSL_IRQ_CLOCK_Handler>

0001fea4 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   1fea4:	f7f9 bf06 	b.w	19cb4 <nrf_cc3xx_platform_init>

0001fea8 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   1fea8:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1feaa:	f7f2 fa73 	bl	12394 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1feae:	f7f2 fb25 	bl	124fc <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   1feb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   1feb6:	f7f9 befd 	b.w	19cb4 <nrf_cc3xx_platform_init>

0001feba <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1feba:	4700      	bx	r0

0001febc <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1febc:	f000 bc7e 	b.w	207bc <z_impl_k_busy_wait>

0001fec0 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   1fec0:	7b0a      	ldrb	r2, [r1, #12]
{
   1fec2:	4603      	mov	r3, r0
   1fec4:	2a03      	cmp	r2, #3
   1fec6:	d829      	bhi.n	1ff1c <xfer_completeness_check+0x5c>
   1fec8:	e8df f002 	tbb	[pc, r2]
   1fecc:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1fed0:	688a      	ldr	r2, [r1, #8]
   1fed2:	0350      	lsls	r0, r2, #13
   1fed4:	d504      	bpl.n	1fee0 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   1fed6:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   1feda:	6908      	ldr	r0, [r1, #16]
   1fedc:	4290      	cmp	r0, r2
   1fede:	d107      	bne.n	1fef0 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1fee0:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   1fee2:	0352      	lsls	r2, r2, #13
   1fee4:	d41a      	bmi.n	1ff1c <xfer_completeness_check+0x5c>
   1fee6:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1feea:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1feec:	4291      	cmp	r1, r2
   1feee:	d015      	beq.n	1ff1c <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1fef0:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1fef2:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1fef4:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1fef8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1fefc:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   1fefe:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1ff02:	6908      	ldr	r0, [r1, #16]
   1ff04:	4290      	cmp	r0, r2
   1ff06:	d1f3      	bne.n	1fef0 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   1ff08:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   1ff0c:	e7ed      	b.n	1feea <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   1ff0e:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1ff12:	6909      	ldr	r1, [r1, #16]
   1ff14:	e7ea      	b.n	1feec <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   1ff16:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   1ff1a:	e7fa      	b.n	1ff12 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   1ff1c:	2001      	movs	r0, #1
}
   1ff1e:	4770      	bx	lr

0001ff20 <nrf_gpio_pin_set>:
{
   1ff20:	b507      	push	{r0, r1, r2, lr}
   1ff22:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ff24:	a801      	add	r0, sp, #4
   1ff26:	f7f8 fb03 	bl	18530 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ff2a:	9a01      	ldr	r2, [sp, #4]
   1ff2c:	2301      	movs	r3, #1
   1ff2e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1ff30:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   1ff34:	b003      	add	sp, #12
   1ff36:	f85d fb04 	ldr.w	pc, [sp], #4

0001ff3a <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1ff3a:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1ff3c:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   1ff3e:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1ff40:	bf9d      	ittte	ls
   1ff42:	6882      	ldrls	r2, [r0, #8]
   1ff44:	18d2      	addls	r2, r2, r3
   1ff46:	f102 32ff 	addls.w	r2, r2, #4294967295
    r = RdOff - WrOff - 1u;
   1ff4a:	f103 33ff 	addhi.w	r3, r3, #4294967295
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1ff4e:	bf94      	ite	ls
   1ff50:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   1ff52:	1a58      	subhi	r0, r3, r1
}
   1ff54:	4770      	bx	lr

0001ff56 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1ff56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1ff5a:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1ff5e:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1ff60:	eba9 0804 	sub.w	r8, r9, r4
  if (Rem > NumBytes) {
   1ff64:	6840      	ldr	r0, [r0, #4]
   1ff66:	4590      	cmp	r8, r2
   1ff68:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1ff6a:	460f      	mov	r7, r1
   1ff6c:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1ff6e:	d906      	bls.n	1ff7e <_WriteNoCheck+0x28>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   1ff70:	f7fd fe6f 	bl	1dc52 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   1ff74:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
   1ff78:	60ec      	str	r4, [r5, #12]
}
   1ff7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   1ff7e:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1ff80:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   1ff84:	f7fd fe65 	bl	1dc52 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   1ff88:	6868      	ldr	r0, [r5, #4]
   1ff8a:	4622      	mov	r2, r4
   1ff8c:	eb07 0108 	add.w	r1, r7, r8
   1ff90:	e7ee      	b.n	1ff70 <_WriteNoCheck+0x1a>

0001ff92 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1ff92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   1ff96:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1ff98:	4606      	mov	r6, r0
   1ff9a:	4689      	mov	r9, r1
   1ff9c:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1ff9e:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1ffa2:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   1ffa4:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1ffa6:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   1ffa8:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1ffaa:	bf28      	it	cs
   1ffac:	18e4      	addcs	r4, r4, r3
   1ffae:	3c01      	subs	r4, #1
   1ffb0:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1ffb2:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1ffb4:	42bc      	cmp	r4, r7
   1ffb6:	bf28      	it	cs
   1ffb8:	463c      	movcs	r4, r7
   1ffba:	4294      	cmp	r4, r2
   1ffbc:	bf28      	it	cs
   1ffbe:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   1ffc0:	4649      	mov	r1, r9
   1ffc2:	4622      	mov	r2, r4
   1ffc4:	4428      	add	r0, r5
   1ffc6:	f7fd fe44 	bl	1dc52 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1ffca:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1ffcc:	4425      	add	r5, r4
    NumBytesWritten += NumBytesToWrite;
   1ffce:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1ffd0:	44a1      	add	r9, r4
    NumBytes        -= NumBytesToWrite;
   1ffd2:	1b3f      	subs	r7, r7, r4
      WrOff = 0u;
   1ffd4:	42ab      	cmp	r3, r5
   1ffd6:	bf08      	it	eq
   1ffd8:	2500      	moveq	r5, #0
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   1ffda:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
   1ffde:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1ffe0:	2f00      	cmp	r7, #0
   1ffe2:	d1de      	bne.n	1ffa2 <_WriteBlocking+0x10>
}
   1ffe4:	4640      	mov	r0, r8
   1ffe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001ffea <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1ffea:	f7f8 bb13 	b.w	18614 <_DoInit>

0001ffee <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1ffee:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1fff0:	f7ff fffb 	bl	1ffea <SEGGER_RTT_Init>

	return 0;
}
   1fff4:	2000      	movs	r0, #0
   1fff6:	bd08      	pop	{r3, pc}

0001fff8 <z_device_state_init>:
}
   1fff8:	4770      	bx	lr

0001fffa <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1fffa:	b138      	cbz	r0, 2000c <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1fffc:	68c3      	ldr	r3, [r0, #12]
   1fffe:	8818      	ldrh	r0, [r3, #0]
   20000:	f3c0 0008 	ubfx	r0, r0, #0, #9
   20004:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   20008:	4258      	negs	r0, r3
   2000a:	4158      	adcs	r0, r3
}
   2000c:	4770      	bx	lr

0002000e <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2000e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20010:	4605      	mov	r5, r0
   20012:	460e      	mov	r6, r1
	__asm__ volatile(
   20014:	f04f 0340 	mov.w	r3, #64	; 0x40
   20018:	f3ef 8711 	mrs	r7, BASEPRI
   2001c:	f383 8811 	msr	BASEPRI, r3
   20020:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   20024:	f7f9 fba4 	bl	19770 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   20028:	4631      	mov	r1, r6
   2002a:	4604      	mov	r4, r0
   2002c:	4628      	mov	r0, r5
   2002e:	f7ff fef2 	bl	1fe16 <k_sys_fatal_error_handler>
	__asm__ volatile(
   20032:	f387 8811 	msr	BASEPRI, r7
   20036:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2003a:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   2003c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   20040:	f7f2 bd3e 	b.w	12ac0 <z_impl_k_thread_abort>

00020044 <k_heap_init>:
{
   20044:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   20046:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2004a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2004e:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   20050:	f7fd ba10 	b.w	1d474 <sys_heap_init>

00020054 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   20054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20058:	b087      	sub	sp, #28
   2005a:	4604      	mov	r4, r0
   2005c:	460e      	mov	r6, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2005e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   20062:	4617      	mov	r7, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20064:	f000 fbae 	bl	207c4 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20068:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2006c:	4605      	mov	r5, r0
   2006e:	4688      	mov	r8, r1
	__asm__ volatile(
   20070:	f04f 0340 	mov.w	r3, #64	; 0x40
   20074:	f3ef 8b11 	mrs	fp, BASEPRI
   20078:	f383 8811 	msr	BASEPRI, r3
   2007c:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   20080:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   20084:	463a      	mov	r2, r7
   20086:	4631      	mov	r1, r6
   20088:	4620      	mov	r0, r4
   2008a:	f7fd f978 	bl	1d37e <sys_heap_aligned_alloc>
   2008e:	9005      	str	r0, [sp, #20]
		now = sys_clock_tick_get();
   20090:	f7f9 fd46 	bl	19b20 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   20094:	9b05      	ldr	r3, [sp, #20]
   20096:	b13b      	cbz	r3, 200a8 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   20098:	f38b 8811 	msr	BASEPRI, fp
   2009c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   200a0:	4618      	mov	r0, r3
   200a2:	b007      	add	sp, #28
   200a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   200a8:	1a2a      	subs	r2, r5, r0
   200aa:	9202      	str	r2, [sp, #8]
   200ac:	eb68 0201 	sbc.w	r2, r8, r1
   200b0:	9203      	str	r2, [sp, #12]
   200b2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   200b6:	2901      	cmp	r1, #1
   200b8:	f172 0200 	sbcs.w	r2, r2, #0
   200bc:	dbec      	blt.n	20098 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   200be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   200c2:	4659      	mov	r1, fp
   200c4:	e9cd 2300 	strd	r2, r3, [sp]
   200c8:	4648      	mov	r0, r9
   200ca:	4652      	mov	r2, sl
   200cc:	f7f9 f918 	bl	19300 <z_pend_curr>
	__asm__ volatile(
   200d0:	f04f 0340 	mov.w	r3, #64	; 0x40
   200d4:	f3ef 8b11 	mrs	fp, BASEPRI
   200d8:	f383 8811 	msr	BASEPRI, r3
   200dc:	f3bf 8f6f 	isb	sy
   200e0:	e7d0      	b.n	20084 <k_heap_aligned_alloc+0x30>

000200e2 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   200e2:	b538      	push	{r3, r4, r5, lr}
   200e4:	4604      	mov	r4, r0
   200e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   200ea:	f3ef 8511 	mrs	r5, BASEPRI
   200ee:	f383 8811 	msr	BASEPRI, r3
   200f2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   200f6:	f7fd f8f5 	bl	1d2e4 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   200fa:	f104 000c 	add.w	r0, r4, #12
   200fe:	f000 faea 	bl	206d6 <z_unpend_all>
   20102:	b130      	cbz	r0, 20112 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   20104:	4629      	mov	r1, r5
   20106:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2010a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2010e:	f7f9 b873 	b.w	191f8 <z_reschedule>
	__asm__ volatile(
   20112:	f385 8811 	msr	BASEPRI, r5
   20116:	f3bf 8f6f 	isb	sy
}
   2011a:	bd38      	pop	{r3, r4, r5, pc}

0002011c <k_mem_slab_init>:
{
   2011c:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2011e:	2400      	movs	r4, #0
   20120:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   20122:	ea41 0402 	orr.w	r4, r1, r2
   20126:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2012a:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   2012e:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   20130:	d10c      	bne.n	2014c <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   20132:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   20134:	42a3      	cmp	r3, r4
   20136:	d103      	bne.n	20140 <k_mem_slab_init+0x24>
   20138:	e9c0 0000 	strd	r0, r0, [r0]
}
   2013c:	2000      	movs	r0, #0
}
   2013e:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   20140:	6945      	ldr	r5, [r0, #20]
   20142:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   20144:	3401      	adds	r4, #1
		slab->free_list = p;
   20146:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   20148:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2014a:	e7f3      	b.n	20134 <k_mem_slab_init+0x18>
		return -EINVAL;
   2014c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   20150:	e7f5      	b.n	2013e <k_mem_slab_init+0x22>

00020152 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   20152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20154:	4604      	mov	r4, r0
   20156:	460d      	mov	r5, r1
	__asm__ volatile(
   20158:	f04f 0340 	mov.w	r3, #64	; 0x40
   2015c:	f3ef 8611 	mrs	r6, BASEPRI
   20160:	f383 8811 	msr	BASEPRI, r3
   20164:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   20168:	6947      	ldr	r7, [r0, #20]
   2016a:	b977      	cbnz	r7, 2018a <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2016c:	f000 fa9b 	bl	206a6 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   20170:	b158      	cbz	r0, 2018a <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   20172:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   20174:	6142      	str	r2, [r0, #20]
   20176:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   20178:	f000 fa63 	bl	20642 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2017c:	4631      	mov	r1, r6
   2017e:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   20182:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   20186:	f7f9 b837 	b.w	191f8 <z_reschedule>
	**(char ***) mem = slab->free_list;
   2018a:	682b      	ldr	r3, [r5, #0]
   2018c:	6962      	ldr	r2, [r4, #20]
   2018e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   20190:	682b      	ldr	r3, [r5, #0]
   20192:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   20194:	69a3      	ldr	r3, [r4, #24]
   20196:	3b01      	subs	r3, #1
   20198:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2019a:	f386 8811 	msr	BASEPRI, r6
   2019e:	f3bf 8f6f 	isb	sy
}
   201a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000201a4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   201a4:	f3ef 8005 	mrs	r0, IPSR
}
   201a8:	3800      	subs	r0, #0
   201aa:	bf18      	it	ne
   201ac:	2001      	movne	r0, #1
   201ae:	4770      	bx	lr

000201b0 <z_impl_k_thread_name_set>:
}
   201b0:	f06f 0057 	mvn.w	r0, #87	; 0x57
   201b4:	4770      	bx	lr

000201b6 <z_impl_k_thread_start>:
	z_sched_start(thread);
   201b6:	f7f9 b9bd 	b.w	19534 <z_sched_start>

000201ba <z_pm_save_idle_exit>:
{
   201ba:	b508      	push	{r3, lr}
	pm_system_resume();
   201bc:	f7f1 fd28 	bl	11c10 <pm_system_resume>
}
   201c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   201c4:	f7fd bafa 	b.w	1d7bc <sys_clock_idle_exit>

000201c8 <z_impl_k_mutex_init>:
{
   201c8:	4603      	mov	r3, r0
	mutex->owner = NULL;
   201ca:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   201cc:	e9c3 0002 	strd	r0, r0, [r3, #8]
   201d0:	e9c3 3300 	strd	r3, r3, [r3]
}
   201d4:	4770      	bx	lr

000201d6 <queue_insert>:
{
   201d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   201da:	4699      	mov	r9, r3
   201dc:	4604      	mov	r4, r0
   201de:	f89d 3020 	ldrb.w	r3, [sp, #32]
   201e2:	460d      	mov	r5, r1
   201e4:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   201e6:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   201ea:	f04f 0240 	mov.w	r2, #64	; 0x40
   201ee:	f3ef 8711 	mrs	r7, BASEPRI
   201f2:	f382 8811 	msr	BASEPRI, r2
   201f6:	f3bf 8f6f 	isb	sy
	if (is_append) {
   201fa:	b103      	cbz	r3, 201fe <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   201fc:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   201fe:	4630      	mov	r0, r6
   20200:	f000 fa51 	bl	206a6 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   20204:	b158      	cbz	r0, 2021e <queue_insert+0x48>
   20206:	2400      	movs	r4, #0
   20208:	67c4      	str	r4, [r0, #124]	; 0x7c
   2020a:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2020e:	f000 fa18 	bl	20642 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   20212:	4630      	mov	r0, r6
   20214:	4639      	mov	r1, r7
   20216:	f7f8 ffef 	bl	191f8 <z_reschedule>
	return 0;
   2021a:	2000      	movs	r0, #0
   2021c:	e00c      	b.n	20238 <queue_insert+0x62>
	if (alloc) {
   2021e:	f1b9 0f00 	cmp.w	r9, #0
   20222:	d01b      	beq.n	2025c <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   20224:	2108      	movs	r1, #8
   20226:	f7f9 fd19 	bl	19c5c <z_thread_aligned_alloc>
		if (anode == NULL) {
   2022a:	b938      	cbnz	r0, 2023c <queue_insert+0x66>
	__asm__ volatile(
   2022c:	f387 8811 	msr	BASEPRI, r7
   20230:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   20234:	f06f 000b 	mvn.w	r0, #11
}
   20238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2023c:	2301      	movs	r3, #1
		anode->data = data;
   2023e:	f8c0 8004 	str.w	r8, [r0, #4]
   20242:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20244:	6803      	ldr	r3, [r0, #0]
   20246:	f003 0203 	and.w	r2, r3, #3
   2024a:	b95d      	cbnz	r5, 20264 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2024c:	6823      	ldr	r3, [r4, #0]
   2024e:	4313      	orrs	r3, r2
   20250:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20252:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   20254:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20256:	b973      	cbnz	r3, 20276 <queue_insert+0xa0>
	list->tail = node;
   20258:	6060      	str	r0, [r4, #4]
}
   2025a:	e00c      	b.n	20276 <queue_insert+0xa0>
	node->next_and_flags = flags;
   2025c:	f8c8 9000 	str.w	r9, [r8]
}
   20260:	4640      	mov	r0, r8
   20262:	e7ef      	b.n	20244 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20264:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20266:	f033 0303 	bics.w	r3, r3, #3
   2026a:	d110      	bne.n	2028e <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2026c:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2026e:	6862      	ldr	r2, [r4, #4]
   20270:	b93a      	cbnz	r2, 20282 <queue_insert+0xac>
	list->head = node;
   20272:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   20276:	2104      	movs	r1, #4
   20278:	f104 0010 	add.w	r0, r4, #16
   2027c:	f000 fc0f 	bl	20a9e <z_handle_obj_poll_events>
   20280:	e7c7      	b.n	20212 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20282:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20284:	f003 0303 	and.w	r3, r3, #3
   20288:	4303      	orrs	r3, r0
   2028a:	6013      	str	r3, [r2, #0]
   2028c:	e7e4      	b.n	20258 <queue_insert+0x82>
   2028e:	4313      	orrs	r3, r2
   20290:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20292:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20294:	f003 0303 	and.w	r3, r3, #3
   20298:	4303      	orrs	r3, r0
   2029a:	602b      	str	r3, [r5, #0]
}
   2029c:	e7eb      	b.n	20276 <queue_insert+0xa0>

0002029e <z_queue_node_peek>:
{
   2029e:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   202a0:	4604      	mov	r4, r0
   202a2:	b130      	cbz	r0, 202b2 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   202a4:	6802      	ldr	r2, [r0, #0]
   202a6:	0793      	lsls	r3, r2, #30
   202a8:	d003      	beq.n	202b2 <z_queue_node_peek+0x14>
		ret = anode->data;
   202aa:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   202ac:	b109      	cbz	r1, 202b2 <z_queue_node_peek+0x14>
			k_free(anode);
   202ae:	f000 fc04 	bl	20aba <k_free>
}
   202b2:	4620      	mov	r0, r4
   202b4:	bd10      	pop	{r4, pc}

000202b6 <z_impl_k_queue_init>:
	list->head = NULL;
   202b6:	2300      	movs	r3, #0
	list->tail = NULL;
   202b8:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   202bc:	f100 0308 	add.w	r3, r0, #8
   202c0:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   202c4:	f100 0310 	add.w	r3, r0, #16
   202c8:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   202cc:	4770      	bx	lr

000202ce <k_queue_append>:
{
   202ce:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   202d0:	2301      	movs	r3, #1
   202d2:	9300      	str	r3, [sp, #0]
   202d4:	2300      	movs	r3, #0
{
   202d6:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   202d8:	4619      	mov	r1, r3
   202da:	f7ff ff7c 	bl	201d6 <queue_insert>
}
   202de:	b003      	add	sp, #12
   202e0:	f85d fb04 	ldr.w	pc, [sp], #4

000202e4 <k_queue_prepend>:
{
   202e4:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   202e6:	2300      	movs	r3, #0
{
   202e8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   202ea:	9300      	str	r3, [sp, #0]
   202ec:	4619      	mov	r1, r3
   202ee:	f7ff ff72 	bl	201d6 <queue_insert>
}
   202f2:	b003      	add	sp, #12
   202f4:	f85d fb04 	ldr.w	pc, [sp], #4

000202f8 <k_queue_append_list>:
{
   202f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   202fc:	4605      	mov	r5, r0
   202fe:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   20300:	460c      	mov	r4, r1
   20302:	b391      	cbz	r1, 2036a <k_queue_append_list+0x72>
   20304:	b38a      	cbz	r2, 2036a <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20306:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   2030a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2030e:	f3ef 8811 	mrs	r8, BASEPRI
   20312:	f383 8811 	msr	BASEPRI, r3
   20316:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   2031a:	4638      	mov	r0, r7
   2031c:	f000 f9c3 	bl	206a6 <z_unpend_first_thread>
   20320:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   20324:	b920      	cbnz	r0, 20330 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   20326:	686b      	ldr	r3, [r5, #4]
   20328:	b9cb      	cbnz	r3, 2035e <k_queue_append_list+0x66>
	list->head = node;
   2032a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2032c:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2032e:	e00a      	b.n	20346 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   20330:	6144      	str	r4, [r0, #20]
   20332:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   20336:	f000 f984 	bl	20642 <z_ready_thread>
		head = *(void **)head;
   2033a:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2033c:	4638      	mov	r0, r7
   2033e:	f000 f9b2 	bl	206a6 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   20342:	2c00      	cmp	r4, #0
   20344:	d1ee      	bne.n	20324 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   20346:	2104      	movs	r1, #4
   20348:	f105 0010 	add.w	r0, r5, #16
   2034c:	f000 fba7 	bl	20a9e <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   20350:	4638      	mov	r0, r7
   20352:	4641      	mov	r1, r8
   20354:	f7f8 ff50 	bl	191f8 <z_reschedule>
	return 0;
   20358:	2000      	movs	r0, #0
}
   2035a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2035e:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20360:	f001 0103 	and.w	r1, r1, #3
   20364:	430c      	orrs	r4, r1
   20366:	601c      	str	r4, [r3, #0]
}
   20368:	e7e0      	b.n	2032c <k_queue_append_list+0x34>
		return -EINVAL;
   2036a:	f06f 0015 	mvn.w	r0, #21
   2036e:	e7f4      	b.n	2035a <k_queue_append_list+0x62>

00020370 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   20370:	b15a      	cbz	r2, 2038a <z_impl_k_sem_init+0x1a>
   20372:	428a      	cmp	r2, r1
   20374:	d309      	bcc.n	2038a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   20376:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2037a:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2037e:	e9c0 0000 	strd	r0, r0, [r0]
   20382:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   20386:	2000      	movs	r0, #0
   20388:	4770      	bx	lr
		return -EINVAL;
   2038a:	f06f 0015 	mvn.w	r0, #21
}
   2038e:	4770      	bx	lr

00020390 <notify_queue_locked>:
	if (queue != NULL) {
   20390:	b120      	cbz	r0, 2039c <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   20392:	2200      	movs	r2, #0
   20394:	4611      	mov	r1, r2
   20396:	3088      	adds	r0, #136	; 0x88
   20398:	f000 b9ad 	b.w	206f6 <z_sched_wake>
}
   2039c:	4770      	bx	lr

0002039e <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   2039e:	68c3      	ldr	r3, [r0, #12]
{
   203a0:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   203a2:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   203a6:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   203aa:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   203ac:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   203ae:	d502      	bpl.n	203b6 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   203b0:	3010      	adds	r0, #16
   203b2:	f000 f9bd 	bl	20730 <z_abort_timeout>
}
   203b6:	4620      	mov	r0, r4
   203b8:	bd10      	pop	{r4, pc}

000203ba <cancel_async_locked>:
{
   203ba:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   203bc:	68c0      	ldr	r0, [r0, #12]
{
   203be:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   203c0:	0784      	lsls	r4, r0, #30
   203c2:	f3c0 0140 	ubfx	r1, r0, #1, #1
   203c6:	d416      	bmi.n	203f6 <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   203c8:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   203cc:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   203ce:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   203d0:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   203d2:	d510      	bpl.n	203f6 <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   203d4:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   203d8:	b168      	cbz	r0, 203f6 <cancel_async_locked+0x3c>
   203da:	4283      	cmp	r3, r0
   203dc:	d11d      	bne.n	2041a <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   203de:	6818      	ldr	r0, [r3, #0]
   203e0:	b999      	cbnz	r1, 2040a <cancel_async_locked+0x50>
   203e2:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   203e6:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   203ea:	428b      	cmp	r3, r1
   203ec:	d101      	bne.n	203f2 <cancel_async_locked+0x38>
	list->tail = node;
   203ee:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   203f2:	2200      	movs	r2, #0
   203f4:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   203f6:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   203f8:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   203fc:	bf1e      	ittt	ne
   203fe:	f042 0202 	orrne.w	r2, r2, #2
   20402:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   20404:	f002 000f 	andne.w	r0, r2, #15
}
   20408:	bd10      	pop	{r4, pc}
   2040a:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2040c:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   20410:	4283      	cmp	r3, r0
	list->tail = node;
   20412:	bf08      	it	eq
   20414:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   20418:	e7eb      	b.n	203f2 <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2041a:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2041c:	6800      	ldr	r0, [r0, #0]
   2041e:	e7db      	b.n	203d8 <cancel_async_locked+0x1e>

00020420 <work_timeout>:
{
   20420:	b513      	push	{r0, r1, r4, lr}
   20422:	f04f 0340 	mov.w	r3, #64	; 0x40
   20426:	f3ef 8411 	mrs	r4, BASEPRI
   2042a:	f383 8811 	msr	BASEPRI, r3
   2042e:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   20432:	2300      	movs	r3, #0
   20434:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   20436:	f850 3c04 	ldr.w	r3, [r0, #-4]
	*flagp &= ~BIT(bit);
   2043a:	f023 0208 	bic.w	r2, r3, #8
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2043e:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   20440:	f840 2c04 	str.w	r2, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   20444:	d505      	bpl.n	20452 <work_timeout+0x32>
		queue = dw->queue;
   20446:	6983      	ldr	r3, [r0, #24]
   20448:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2044a:	a901      	add	r1, sp, #4
   2044c:	3810      	subs	r0, #16
   2044e:	f7f8 fd97 	bl	18f80 <submit_to_queue_locked>
	__asm__ volatile(
   20452:	f384 8811 	msr	BASEPRI, r4
   20456:	f3bf 8f6f 	isb	sy
}
   2045a:	b002      	add	sp, #8
   2045c:	bd10      	pop	{r4, pc}

0002045e <k_work_init>:
{
   2045e:	b538      	push	{r3, r4, r5, lr}
   20460:	4604      	mov	r4, r0
   20462:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   20464:	2210      	movs	r2, #16
   20466:	2100      	movs	r1, #0
   20468:	f7fd fbfe 	bl	1dc68 <memset>
   2046c:	6065      	str	r5, [r4, #4]
}
   2046e:	bd38      	pop	{r3, r4, r5, pc}

00020470 <k_work_submit_to_queue>:
{
   20470:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20472:	9001      	str	r0, [sp, #4]
   20474:	4608      	mov	r0, r1
	__asm__ volatile(
   20476:	f04f 0340 	mov.w	r3, #64	; 0x40
   2047a:	f3ef 8511 	mrs	r5, BASEPRI
   2047e:	f383 8811 	msr	BASEPRI, r3
   20482:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   20486:	a901      	add	r1, sp, #4
   20488:	f7f8 fd7a 	bl	18f80 <submit_to_queue_locked>
   2048c:	4604      	mov	r4, r0
	__asm__ volatile(
   2048e:	f385 8811 	msr	BASEPRI, r5
   20492:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   20496:	2800      	cmp	r0, #0
   20498:	dd04      	ble.n	204a4 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   2049a:	f7f9 f96f 	bl	1977c <z_impl_k_is_preempt_thread>
   2049e:	b108      	cbz	r0, 204a4 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   204a0:	f7f9 f8be 	bl	19620 <z_impl_k_yield>
}
   204a4:	4620      	mov	r0, r4
   204a6:	b003      	add	sp, #12
   204a8:	bd30      	pop	{r4, r5, pc}

000204aa <k_work_init_delayable>:
{
   204aa:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   204ac:	2230      	movs	r2, #48	; 0x30
{
   204ae:	4604      	mov	r4, r0
   204b0:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   204b2:	2100      	movs	r1, #0
   204b4:	f7fd fbd8 	bl	1dc68 <memset>
   204b8:	f44f 7380 	mov.w	r3, #256	; 0x100
   204bc:	6065      	str	r5, [r4, #4]
   204be:	60e3      	str	r3, [r4, #12]
}
   204c0:	bd38      	pop	{r3, r4, r5, pc}

000204c2 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   204c2:	b538      	push	{r3, r4, r5, lr}
   204c4:	4604      	mov	r4, r0
	__asm__ volatile(
   204c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   204ca:	f3ef 8511 	mrs	r5, BASEPRI
   204ce:	f383 8811 	msr	BASEPRI, r3
   204d2:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   204d6:	f7ff ff62 	bl	2039e <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   204da:	4620      	mov	r0, r4
   204dc:	f7ff ff6d 	bl	203ba <cancel_async_locked>
	__asm__ volatile(
   204e0:	f385 8811 	msr	BASEPRI, r5
   204e4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   204e8:	bd38      	pop	{r3, r4, r5, pc}

000204ea <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   204ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   204ec:	4604      	mov	r4, r0
   204ee:	460d      	mov	r5, r1
	__asm__ volatile(
   204f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   204f4:	f3ef 8711 	mrs	r7, BASEPRI
   204f8:	f383 8811 	msr	BASEPRI, r3
   204fc:	f3bf 8f6f 	isb	sy
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20500:	f3bf 8f5b 	dmb	ish
   20504:	68c3      	ldr	r3, [r0, #12]
   20506:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   2050a:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2050e:	2b00      	cmp	r3, #0
   20510:	bf14      	ite	ne
   20512:	2601      	movne	r6, #1
   20514:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   20516:	d009      	beq.n	2052c <k_work_cancel_delayable_sync+0x42>
	(void)unschedule_locked(dwork);
   20518:	f7ff ff41 	bl	2039e <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2051c:	4620      	mov	r0, r4
   2051e:	f7ff ff4c 	bl	203ba <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   20522:	4629      	mov	r1, r5
   20524:	4620      	mov	r0, r4
   20526:	f7f8 fd0d 	bl	18f44 <cancel_sync_locked>
   2052a:	4603      	mov	r3, r0
	__asm__ volatile(
   2052c:	f387 8811 	msr	BASEPRI, r7
   20530:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   20534:	b13b      	cbz	r3, 20546 <k_work_cancel_delayable_sync+0x5c>
	return z_impl_k_sem_take(sem, timeout);
   20536:	f04f 32ff 	mov.w	r2, #4294967295
   2053a:	f04f 33ff 	mov.w	r3, #4294967295
   2053e:	f105 0008 	add.w	r0, r5, #8
   20542:	f7f8 fc1d 	bl	18d80 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   20546:	4630      	mov	r0, r6
   20548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002054a <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   2054a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2054e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   20550:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20552:	2300      	movs	r3, #0
	node->prev = NULL;
   20554:	e9c0 3300 	strd	r3, r3, [r0]
}
   20558:	4770      	bx	lr

0002055a <unpend_thread_no_timeout>:
{
   2055a:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   2055c:	f7ff fff5 	bl	2054a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   20560:	7b43      	ldrb	r3, [r0, #13]
   20562:	f023 0302 	bic.w	r3, r3, #2
   20566:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   20568:	2300      	movs	r3, #0
   2056a:	6083      	str	r3, [r0, #8]
}
   2056c:	bd08      	pop	{r3, pc}

0002056e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2056e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   20572:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   20576:	4283      	cmp	r3, r0
		return b2 - b1;
   20578:	bf14      	ite	ne
   2057a:	1ac0      	subne	r0, r0, r3
	return 0;
   2057c:	2000      	moveq	r0, #0
}
   2057e:	4770      	bx	lr

00020580 <z_unpend_thread>:
{
   20580:	b510      	push	{r4, lr}
	__asm__ volatile(
   20582:	f04f 0340 	mov.w	r3, #64	; 0x40
   20586:	f3ef 8411 	mrs	r4, BASEPRI
   2058a:	f383 8811 	msr	BASEPRI, r3
   2058e:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   20592:	f7ff ffe2 	bl	2055a <unpend_thread_no_timeout>
	__asm__ volatile(
   20596:	f384 8811 	msr	BASEPRI, r4
   2059a:	f3bf 8f6f 	isb	sy
}
   2059e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   205a2:	3018      	adds	r0, #24
   205a4:	f000 b8c4 	b.w	20730 <z_abort_timeout>

000205a8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   205a8:	4603      	mov	r3, r0
   205aa:	b920      	cbnz	r0, 205b6 <z_reschedule_irqlock+0xe>
   205ac:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   205b0:	b90a      	cbnz	r2, 205b6 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   205b2:	f7f1 bfb9 	b.w	12528 <arch_swap>
   205b6:	f383 8811 	msr	BASEPRI, r3
   205ba:	f3bf 8f6f 	isb	sy
}
   205be:	4770      	bx	lr

000205c0 <z_reschedule_unlocked>:
	__asm__ volatile(
   205c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   205c4:	f3ef 8011 	mrs	r0, BASEPRI
   205c8:	f383 8811 	msr	BASEPRI, r3
   205cc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   205d0:	f7ff bfea 	b.w	205a8 <z_reschedule_irqlock>

000205d4 <z_priq_dumb_best>:
{
   205d4:	4603      	mov	r3, r0
	return list->head == list;
   205d6:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   205d8:	4283      	cmp	r3, r0
   205da:	d003      	beq.n	205e4 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   205dc:	2800      	cmp	r0, #0
   205de:	bf38      	it	cc
   205e0:	2000      	movcc	r0, #0
   205e2:	4770      	bx	lr
	struct k_thread *thread = NULL;
   205e4:	2000      	movs	r0, #0
}
   205e6:	4770      	bx	lr

000205e8 <add_to_waitq_locked>:
{
   205e8:	b538      	push	{r3, r4, r5, lr}
   205ea:	4604      	mov	r4, r0
   205ec:	460d      	mov	r5, r1
	unready_thread(thread);
   205ee:	f7f8 fe49 	bl	19284 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   205f2:	7b63      	ldrb	r3, [r4, #13]
   205f4:	f043 0302 	orr.w	r3, r3, #2
   205f8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   205fa:	b1b5      	cbz	r5, 2062a <add_to_waitq_locked+0x42>
	return list->head == list;
   205fc:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   205fe:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20600:	429d      	cmp	r5, r3
   20602:	bf08      	it	eq
   20604:	2300      	moveq	r3, #0
   20606:	2b00      	cmp	r3, #0
   20608:	bf38      	it	cc
   2060a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2060c:	b19b      	cbz	r3, 20636 <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   2060e:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   20612:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   20616:	4291      	cmp	r1, r2
   20618:	d008      	beq.n	2062c <add_to_waitq_locked+0x44>
		return b2 - b1;
   2061a:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2061c:	2a00      	cmp	r2, #0
   2061e:	dd05      	ble.n	2062c <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   20620:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   20622:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   20626:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   20628:	605c      	str	r4, [r3, #4]
}
   2062a:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2062c:	686a      	ldr	r2, [r5, #4]
   2062e:	4293      	cmp	r3, r2
   20630:	d001      	beq.n	20636 <add_to_waitq_locked+0x4e>
   20632:	681b      	ldr	r3, [r3, #0]
   20634:	e7ea      	b.n	2060c <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   20636:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   20638:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2063c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2063e:	606c      	str	r4, [r5, #4]
   20640:	e7f3      	b.n	2062a <add_to_waitq_locked+0x42>

00020642 <z_ready_thread>:
{
   20642:	b510      	push	{r4, lr}
   20644:	f04f 0340 	mov.w	r3, #64	; 0x40
   20648:	f3ef 8411 	mrs	r4, BASEPRI
   2064c:	f383 8811 	msr	BASEPRI, r3
   20650:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   20654:	f7f8 ff36 	bl	194c4 <ready_thread>
	__asm__ volatile(
   20658:	f384 8811 	msr	BASEPRI, r4
   2065c:	f3bf 8f6f 	isb	sy
}
   20660:	bd10      	pop	{r4, pc}

00020662 <z_thread_timeout>:
{
   20662:	b510      	push	{r4, lr}
   20664:	4601      	mov	r1, r0
	__asm__ volatile(
   20666:	f04f 0340 	mov.w	r3, #64	; 0x40
   2066a:	f3ef 8411 	mrs	r4, BASEPRI
   2066e:	f383 8811 	msr	BASEPRI, r3
   20672:	f3bf 8f6f 	isb	sy
		if (!killed) {
   20676:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   2067a:	f013 0f28 	tst.w	r3, #40	; 0x28
   2067e:	d10d      	bne.n	2069c <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   20680:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   20684:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   20686:	b10b      	cbz	r3, 2068c <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   20688:	f7ff ff67 	bl	2055a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2068c:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   20690:	f023 0314 	bic.w	r3, r3, #20
   20694:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   20698:	f7f8 ff14 	bl	194c4 <ready_thread>
	__asm__ volatile(
   2069c:	f384 8811 	msr	BASEPRI, r4
   206a0:	f3bf 8f6f 	isb	sy
}
   206a4:	bd10      	pop	{r4, pc}

000206a6 <z_unpend_first_thread>:
{
   206a6:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   206a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   206ac:	f3ef 8511 	mrs	r5, BASEPRI
   206b0:	f383 8811 	msr	BASEPRI, r3
   206b4:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   206b8:	f7ff ff8c 	bl	205d4 <z_priq_dumb_best>
		if (thread != NULL) {
   206bc:	4604      	mov	r4, r0
   206be:	b120      	cbz	r0, 206ca <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   206c0:	f7ff ff4b 	bl	2055a <unpend_thread_no_timeout>
   206c4:	3018      	adds	r0, #24
   206c6:	f000 f833 	bl	20730 <z_abort_timeout>
	__asm__ volatile(
   206ca:	f385 8811 	msr	BASEPRI, r5
   206ce:	f3bf 8f6f 	isb	sy
}
   206d2:	4620      	mov	r0, r4
   206d4:	bd38      	pop	{r3, r4, r5, pc}

000206d6 <z_unpend_all>:
{
   206d6:	b538      	push	{r3, r4, r5, lr}
   206d8:	4605      	mov	r5, r0
	int need_sched = 0;
   206da:	2000      	movs	r0, #0
	return list->head == list;
   206dc:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   206de:	42a5      	cmp	r5, r4
   206e0:	d000      	beq.n	206e4 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   206e2:	b904      	cbnz	r4, 206e6 <z_unpend_all+0x10>
}
   206e4:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   206e6:	4620      	mov	r0, r4
   206e8:	f7ff ff4a 	bl	20580 <z_unpend_thread>
		z_ready_thread(thread);
   206ec:	4620      	mov	r0, r4
   206ee:	f7ff ffa8 	bl	20642 <z_ready_thread>
		need_sched = 1;
   206f2:	2001      	movs	r0, #1
   206f4:	e7f2      	b.n	206dc <z_unpend_all+0x6>

000206f6 <z_sched_wake>:
{
   206f6:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   206f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   206fc:	f3ef 8511 	mrs	r5, BASEPRI
   20700:	f383 8811 	msr	BASEPRI, r3
   20704:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   20708:	f7ff ff64 	bl	205d4 <z_priq_dumb_best>
		if (thread != NULL) {
   2070c:	4604      	mov	r4, r0
   2070e:	b150      	cbz	r0, 20726 <z_sched_wake+0x30>
   20710:	67c1      	str	r1, [r0, #124]	; 0x7c
   20712:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   20714:	f7ff ff21 	bl	2055a <unpend_thread_no_timeout>
   20718:	3018      	adds	r0, #24
   2071a:	f000 f809 	bl	20730 <z_abort_timeout>
			ready_thread(thread);
   2071e:	4620      	mov	r0, r4
   20720:	f7f8 fed0 	bl	194c4 <ready_thread>
			ret = true;
   20724:	2001      	movs	r0, #1
	__asm__ volatile(
   20726:	f385 8811 	msr	BASEPRI, r5
   2072a:	f3bf 8f6f 	isb	sy
}
   2072e:	bd38      	pop	{r3, r4, r5, pc}

00020730 <z_abort_timeout>:
{
   20730:	b510      	push	{r4, lr}
	__asm__ volatile(
   20732:	f04f 0240 	mov.w	r2, #64	; 0x40
   20736:	f3ef 8411 	mrs	r4, BASEPRI
   2073a:	f382 8811 	msr	BASEPRI, r2
   2073e:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   20742:	6803      	ldr	r3, [r0, #0]
   20744:	b13b      	cbz	r3, 20756 <z_abort_timeout+0x26>
			remove_timeout(to);
   20746:	f7f9 f8b1 	bl	198ac <remove_timeout>
			ret = 0;
   2074a:	2000      	movs	r0, #0
	__asm__ volatile(
   2074c:	f384 8811 	msr	BASEPRI, r4
   20750:	f3bf 8f6f 	isb	sy
}
   20754:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   20756:	f06f 0015 	mvn.w	r0, #21
   2075a:	e7f7      	b.n	2074c <z_abort_timeout+0x1c>

0002075c <z_get_next_timeout_expiry>:
{
   2075c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2075e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20762:	f3ef 8411 	mrs	r4, BASEPRI
   20766:	f383 8811 	msr	BASEPRI, r3
   2076a:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2076e:	f7f9 f8b7 	bl	198e0 <next_timeout>
	__asm__ volatile(
   20772:	f384 8811 	msr	BASEPRI, r4
   20776:	f3bf 8f6f 	isb	sy
}
   2077a:	bd10      	pop	{r4, pc}

0002077c <z_set_timeout_expiry>:
{
   2077c:	b570      	push	{r4, r5, r6, lr}
   2077e:	4604      	mov	r4, r0
   20780:	460d      	mov	r5, r1
	__asm__ volatile(
   20782:	f04f 0340 	mov.w	r3, #64	; 0x40
   20786:	f3ef 8611 	mrs	r6, BASEPRI
   2078a:	f383 8811 	msr	BASEPRI, r3
   2078e:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   20792:	f7f9 f8a5 	bl	198e0 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   20796:	2801      	cmp	r0, #1
   20798:	dd05      	ble.n	207a6 <z_set_timeout_expiry+0x2a>
   2079a:	42a0      	cmp	r0, r4
   2079c:	db03      	blt.n	207a6 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2079e:	4629      	mov	r1, r5
   207a0:	4620      	mov	r0, r4
   207a2:	f7f1 fcfb 	bl	1219c <sys_clock_set_timeout>
	__asm__ volatile(
   207a6:	f386 8811 	msr	BASEPRI, r6
   207aa:	f3bf 8f6f 	isb	sy
}
   207ae:	bd70      	pop	{r4, r5, r6, pc}

000207b0 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   207b0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   207b2:	f7f9 f9b5 	bl	19b20 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   207b6:	bd08      	pop	{r3, pc}

000207b8 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   207b8:	f7f9 b9b2 	b.w	19b20 <sys_clock_tick_get>

000207bc <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   207bc:	b108      	cbz	r0, 207c2 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   207be:	f7f2 ba7d 	b.w	12cbc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   207c2:	4770      	bx	lr

000207c4 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   207c4:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   207c6:	1c4b      	adds	r3, r1, #1
   207c8:	bf08      	it	eq
   207ca:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   207ce:	4604      	mov	r4, r0
   207d0:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   207d2:	d013      	beq.n	207fc <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   207d4:	ea54 0105 	orrs.w	r1, r4, r5
   207d8:	d103      	bne.n	207e2 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   207da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   207de:	f7f9 b99f 	b.w	19b20 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   207e2:	f06f 0101 	mvn.w	r1, #1
   207e6:	1a0a      	subs	r2, r1, r0
   207e8:	f04f 31ff 	mov.w	r1, #4294967295
   207ec:	eb61 0305 	sbc.w	r3, r1, r5
   207f0:	2a00      	cmp	r2, #0
   207f2:	f173 0100 	sbcs.w	r1, r3, #0
   207f6:	db02      	blt.n	207fe <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   207f8:	4610      	mov	r0, r2
   207fa:	4619      	mov	r1, r3
}
   207fc:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   207fe:	f7f9 f98f 	bl	19b20 <sys_clock_tick_get>
   20802:	2c01      	cmp	r4, #1
   20804:	f175 0300 	sbcs.w	r3, r5, #0
   20808:	bfbc      	itt	lt
   2080a:	2401      	movlt	r4, #1
   2080c:	2500      	movlt	r5, #0
   2080e:	1820      	adds	r0, r4, r0
   20810:	eb45 0101 	adc.w	r1, r5, r1
   20814:	e7f2      	b.n	207fc <sys_clock_timeout_end_calc+0x38>

00020816 <clear_event_registrations>:
	while (num_events--) {
   20816:	2314      	movs	r3, #20
{
   20818:	b570      	push	{r4, r5, r6, lr}
   2081a:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   2081e:	2400      	movs	r4, #0
   20820:	2601      	movs	r6, #1
	while (num_events--) {
   20822:	4281      	cmp	r1, r0
   20824:	d100      	bne.n	20828 <clear_event_registrations+0x12>
}
   20826:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   20828:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   2082c:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   20830:	f003 031f 	and.w	r3, r3, #31
   20834:	2b08      	cmp	r3, #8
   20836:	d80d      	bhi.n	20854 <clear_event_registrations+0x3e>
   20838:	fa06 f303 	lsl.w	r3, r6, r3
   2083c:	f413 7f8b 	tst.w	r3, #278	; 0x116
   20840:	d008      	beq.n	20854 <clear_event_registrations+0x3e>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   20842:	f851 3c14 	ldr.w	r3, [r1, #-20]
   20846:	b12b      	cbz	r3, 20854 <clear_event_registrations+0x3e>
	sys_dnode_t *const prev = node->prev;
   20848:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
   2084c:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2084e:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   20850:	e941 4405 	strd	r4, r4, [r1, #-20]
   20854:	f382 8811 	msr	BASEPRI, r2
   20858:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2085c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20860:	f3ef 8211 	mrs	r2, BASEPRI
   20864:	f383 8811 	msr	BASEPRI, r3
   20868:	f3bf 8f6f 	isb	sy
   2086c:	3914      	subs	r1, #20
   2086e:	e7d8      	b.n	20822 <clear_event_registrations+0xc>

00020870 <add_event>:
{
   20870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20872:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   20874:	e9d0 2300 	ldrd	r2, r3, [r0]
   20878:	4290      	cmp	r0, r2
   2087a:	4604      	mov	r4, r0
   2087c:	460d      	mov	r5, r1
   2087e:	d105      	bne.n	2088c <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   20880:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   20882:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   20886:	601d      	str	r5, [r3, #0]
	list->tail = node;
   20888:	6065      	str	r5, [r4, #4]
}
   2088a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2088c:	2b00      	cmp	r3, #0
   2088e:	d0f7      	beq.n	20880 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   20890:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   20892:	b100      	cbz	r0, 20896 <add_event+0x26>
   20894:	3860      	subs	r0, #96	; 0x60
   20896:	b107      	cbz	r7, 2089a <add_event+0x2a>
   20898:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2089a:	4639      	mov	r1, r7
   2089c:	f7ff fe67 	bl	2056e <z_sched_prio_cmp>
	if ((pending == NULL) ||
   208a0:	2800      	cmp	r0, #0
   208a2:	dced      	bgt.n	20880 <add_event+0x10>
	return list->head == list;
   208a4:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   208a6:	42b4      	cmp	r4, r6
   208a8:	d0ea      	beq.n	20880 <add_event+0x10>
   208aa:	2e00      	cmp	r6, #0
   208ac:	bf38      	it	cc
   208ae:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   208b0:	2e00      	cmp	r6, #0
   208b2:	d0e5      	beq.n	20880 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   208b4:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   208b6:	b101      	cbz	r1, 208ba <add_event+0x4a>
   208b8:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   208ba:	4638      	mov	r0, r7
   208bc:	f7ff fe57 	bl	2056e <z_sched_prio_cmp>
   208c0:	2800      	cmp	r0, #0
   208c2:	dd05      	ble.n	208d0 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   208c4:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   208c6:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   208ca:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   208cc:	6075      	str	r5, [r6, #4]
			return;
   208ce:	e7dc      	b.n	2088a <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   208d0:	6863      	ldr	r3, [r4, #4]
   208d2:	42b3      	cmp	r3, r6
   208d4:	d0d4      	beq.n	20880 <add_event+0x10>
   208d6:	6836      	ldr	r6, [r6, #0]
   208d8:	e7ea      	b.n	208b0 <add_event+0x40>

000208da <register_events>:
{
   208da:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   208de:	2500      	movs	r5, #0
{
   208e0:	468b      	mov	fp, r1
   208e2:	4614      	mov	r4, r2
   208e4:	461f      	mov	r7, r3
   208e6:	4682      	mov	sl, r0
	int events_registered = 0;
   208e8:	462e      	mov	r6, r5
	event->poller = NULL;
   208ea:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   208ec:	455d      	cmp	r5, fp
   208ee:	db02      	blt.n	208f6 <register_events+0x1c>
}
   208f0:	4630      	mov	r0, r6
   208f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   208f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   208fa:	f3ef 8911 	mrs	r9, BASEPRI
   208fe:	f383 8811 	msr	BASEPRI, r3
   20902:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   20906:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2090a:	f003 031f 	and.w	r3, r3, #31
   2090e:	3b01      	subs	r3, #1
   20910:	2b07      	cmp	r3, #7
   20912:	d80f      	bhi.n	20934 <register_events+0x5a>
   20914:	e8df f003 	tbb	[pc, r3]
   20918:	0a0e041e 	.word	0x0a0e041e
   2091c:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   20920:	f8da 3010 	ldr.w	r3, [sl, #16]
   20924:	689b      	ldr	r3, [r3, #8]
   20926:	b12b      	cbz	r3, 20934 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   20928:	2302      	movs	r3, #2
   2092a:	e020      	b.n	2096e <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2092c:	f8da 3010 	ldr.w	r3, [sl, #16]
   20930:	681b      	ldr	r3, [r3, #0]
   20932:	bb8b      	cbnz	r3, 20998 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   20934:	bb47      	cbnz	r7, 20988 <register_events+0xae>
   20936:	7823      	ldrb	r3, [r4, #0]
   20938:	b333      	cbz	r3, 20988 <register_events+0xae>
	switch (event->type) {
   2093a:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2093e:	f003 031f 	and.w	r3, r3, #31
   20942:	3b01      	subs	r3, #1
   20944:	2b07      	cmp	r3, #7
   20946:	d830      	bhi.n	209aa <register_events+0xd0>
   20948:	e8df f003 	tbb	[pc, r3]
   2094c:	282f2833 	.word	0x282f2833
   20950:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   20954:	f8da 3010 	ldr.w	r3, [sl, #16]
   20958:	689b      	ldr	r3, [r3, #8]
   2095a:	2b00      	cmp	r3, #0
   2095c:	d0ea      	beq.n	20934 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2095e:	2301      	movs	r3, #1
   20960:	e005      	b.n	2096e <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   20962:	f8da 3010 	ldr.w	r3, [sl, #16]
   20966:	6a1b      	ldr	r3, [r3, #32]
   20968:	2b00      	cmp	r3, #0
   2096a:	d0e3      	beq.n	20934 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2096c:	2310      	movs	r3, #16
	event->state |= state;
   2096e:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   20972:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   20976:	f3c2 3145 	ubfx	r1, r2, #13, #6
   2097a:	430b      	orrs	r3, r1
   2097c:	f363 3252 	bfi	r2, r3, #13, #6
   20980:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   20984:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   20988:	f389 8811 	msr	BASEPRI, r9
   2098c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   20990:	3501      	adds	r5, #1
   20992:	f10a 0a14 	add.w	sl, sl, #20
   20996:	e7a9      	b.n	208ec <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   20998:	2304      	movs	r3, #4
   2099a:	e7e8      	b.n	2096e <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2099c:	f8da 0010 	ldr.w	r0, [sl, #16]
   209a0:	4622      	mov	r2, r4
   209a2:	4651      	mov	r1, sl
   209a4:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   209a6:	f7ff ff63 	bl	20870 <add_event>
	event->poller = poller;
   209aa:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   209ae:	3601      	adds	r6, #1
   209b0:	e7ea      	b.n	20988 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   209b2:	f8da 0010 	ldr.w	r0, [sl, #16]
   209b6:	4622      	mov	r2, r4
   209b8:	4651      	mov	r1, sl
   209ba:	e7f4      	b.n	209a6 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   209bc:	f8da 0010 	ldr.w	r0, [sl, #16]
   209c0:	4622      	mov	r2, r4
   209c2:	4651      	mov	r1, sl
   209c4:	3024      	adds	r0, #36	; 0x24
   209c6:	e7ee      	b.n	209a6 <register_events+0xcc>

000209c8 <signal_poll_event>:
{
   209c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   209cc:	6884      	ldr	r4, [r0, #8]
{
   209ce:	4605      	mov	r5, r0
   209d0:	460e      	mov	r6, r1
	if (poller != NULL) {
   209d2:	b144      	cbz	r4, 209e6 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   209d4:	7863      	ldrb	r3, [r4, #1]
   209d6:	2b01      	cmp	r3, #1
   209d8:	d138      	bne.n	20a4c <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   209da:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   209de:	f013 0302 	ands.w	r3, r3, #2
   209e2:	d10a      	bne.n	209fa <signal_poll_event+0x32>
		poller->is_polling = false;
   209e4:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   209e6:	68eb      	ldr	r3, [r5, #12]
   209e8:	f3c3 3145 	ubfx	r1, r3, #13, #6
   209ec:	430e      	orrs	r6, r1
	event->poller = NULL;
   209ee:	2000      	movs	r0, #0
	event->state |= state;
   209f0:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   209f4:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   209f6:	60eb      	str	r3, [r5, #12]
	return retcode;
   209f8:	e00d      	b.n	20a16 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   209fa:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   209fe:	f04f 31ff 	mov.w	r1, #4294967295
   20a02:	f06f 0001 	mvn.w	r0, #1
   20a06:	428b      	cmp	r3, r1
   20a08:	bf08      	it	eq
   20a0a:	4282      	cmpeq	r2, r0
   20a0c:	d105      	bne.n	20a1a <signal_poll_event+0x52>
		poller->is_polling = false;
   20a0e:	2300      	movs	r3, #0
   20a10:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   20a12:	f06f 000a 	mvn.w	r0, #10
}
   20a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   20a1a:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   20a1e:	4640      	mov	r0, r8
   20a20:	f7ff fdae 	bl	20580 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   20a24:	2e08      	cmp	r6, #8
   20a26:	bf0c      	ite	eq
   20a28:	f06f 0303 	mvneq.w	r3, #3
   20a2c:	2300      	movne	r3, #0
   20a2e:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   20a30:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   20a34:	06db      	lsls	r3, r3, #27
   20a36:	d102      	bne.n	20a3e <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   20a38:	f854 7c48 	ldr.w	r7, [r4, #-72]
   20a3c:	b10f      	cbz	r7, 20a42 <signal_poll_event+0x7a>
		poller->is_polling = false;
   20a3e:	2300      	movs	r3, #0
   20a40:	e7d0      	b.n	209e4 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   20a42:	4640      	mov	r0, r8
   20a44:	f7ff fdfd 	bl	20642 <z_ready_thread>
		poller->is_polling = false;
   20a48:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   20a4a:	e7cc      	b.n	209e6 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   20a4c:	2b02      	cmp	r3, #2
   20a4e:	d1f6      	bne.n	20a3e <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   20a50:	7823      	ldrb	r3, [r4, #0]
   20a52:	2b00      	cmp	r3, #0
   20a54:	d0c7      	beq.n	209e6 <signal_poll_event+0x1e>
   20a56:	f854 7c04 	ldr.w	r7, [r4, #-4]
   20a5a:	2f00      	cmp	r7, #0
   20a5c:	d0f4      	beq.n	20a48 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   20a5e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   20a62:	f1a4 0914 	sub.w	r9, r4, #20
   20a66:	f104 0014 	add.w	r0, r4, #20
   20a6a:	f7ff fe61 	bl	20730 <z_abort_timeout>
		twork->poll_result = 0;
   20a6e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   20a72:	4649      	mov	r1, r9
   20a74:	4638      	mov	r0, r7
   20a76:	f7ff fcfb 	bl	20470 <k_work_submit_to_queue>
		poller->is_polling = false;
   20a7a:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   20a7e:	e7b2      	b.n	209e6 <signal_poll_event+0x1e>

00020a80 <k_poll_event_init>:
{
   20a80:	b510      	push	{r4, lr}
	event->type = type;
   20a82:	04d2      	lsls	r2, r2, #19
   20a84:	0209      	lsls	r1, r1, #8
   20a86:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   20a8a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   20a8e:	430a      	orrs	r2, r1
   20a90:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   20a92:	2400      	movs	r4, #0
	event->type = type;
   20a94:	430a      	orrs	r2, r1
	event->obj = obj;
   20a96:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   20a9a:	6084      	str	r4, [r0, #8]
}
   20a9c:	bd10      	pop	{r4, pc}

00020a9e <z_handle_obj_poll_events>:
{
   20a9e:	4603      	mov	r3, r0
	return list->head == list;
   20aa0:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   20aa2:	4283      	cmp	r3, r0
   20aa4:	d008      	beq.n	20ab8 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   20aa6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   20aaa:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   20aac:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20aae:	2300      	movs	r3, #0
	node->prev = NULL;
   20ab0:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   20ab4:	f7ff bf88 	b.w	209c8 <signal_poll_event>
}
   20ab8:	4770      	bx	lr

00020aba <k_free>:
	if (ptr != NULL) {
   20aba:	b120      	cbz	r0, 20ac6 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   20abc:	1f01      	subs	r1, r0, #4
   20abe:	f850 0c04 	ldr.w	r0, [r0, #-4]
   20ac2:	f7ff bb0e 	b.w	200e2 <k_heap_free>
}
   20ac6:	4770      	bx	lr

00020ac8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   20ac8:	4770      	bx	lr
	...

00020acc <z_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   20acc:	f7f7 b8ec 	b.w	17ca8 <SystemInit>
