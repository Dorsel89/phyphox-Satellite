
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20005de0 	.word	0x20005de0
}
   4:	00012e85 	.word	0x00012e85
   8:	0001dce9 	.word	0x0001dce9
   c:	00012ed9 	.word	0x00012ed9
  10:	00012ed9 	.word	0x00012ed9
  14:	00012ed9 	.word	0x00012ed9
  18:	00012ed9 	.word	0x00012ed9
	...
  2c:	00012c5d 	.word	0x00012c5d
  30:	00012ed9 	.word	0x00012ed9
  34:	00000000 	.word	0x00000000
  38:	00012c09 	.word	0x00012c09
  3c:	0001d91f 	.word	0x0001d91f

00000040 <_irq_vector_table>:
  40:	00012e45 0001feb9 00012e45 00012e45     E.......E...E...
  50:	00012e45 00012e45 00012e45 00012e45     E...E...E...E...
  60:	0001fe81 00012e45 00012e45 0001fe9f     ....E...E.......
  70:	00012e45 00012e45 00012e45 00012e45     E...E...E...E...
  80:	00012e45 00012e45 00012e45 00012e45     E...E...E...E...
  90:	00012e45 00012e45 00012e45 00012e45     E...E...E...E...
  a0:	00012e45 00012e45 00012e45 00012e45     E...E...E...E...
  b0:	00012e45 00012e45 00012e45 00012e45     E...E...E...E...
  c0:	00012e45 00012e45 00012e45 00012e45     E...E...E...E...
  d0:	00012e45 00012e45 00012e45 00012e45     E...E...E...E...
  e0:	00012e45 00012e45 00012e45 00012e45     E...E...E...E...
  f0:	00012e45 00012e45 00012e45 00012e45     E...E...E...E...

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x106>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xf2>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_IDLE_STACK_SIZE+0x9c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x3c>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x24>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x158>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x24>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x86>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x82>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x9c>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xea>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xd2>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x166>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x12a>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x148>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x50>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x50>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x50>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_BT_HCI_TX_STACK_SIZE+0x54>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb0>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_BT_HCI_TX_STACK_SIZE+0x3e>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_BT_HCI_TX_STACK_SIZE+0x7e>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_BT_HCI_TX_STACK_SIZE+0x9a>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_BT_HCI_TX_STACK_SIZE+0x70>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_BT_HCI_TX_STACK_SIZE+0x70>
     89a:	e712      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>

0000089c <__gedf2>:
     89c:	f04f 3cff 	mov.w	ip, #4294967295
     8a0:	e006      	b.n	8b0 <__cmpdf2+0x4>
     8a2:	bf00      	nop

000008a4 <__ledf2>:
     8a4:	f04f 0c01 	mov.w	ip, #1
     8a8:	e002      	b.n	8b0 <__cmpdf2+0x4>
     8aa:	bf00      	nop

000008ac <__cmpdf2>:
     8ac:	f04f 0c01 	mov.w	ip, #1
     8b0:	f84d cd04 	str.w	ip, [sp, #-4]!
     8b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     8b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     8c0:	bf18      	it	ne
     8c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     8c6:	d01b      	beq.n	900 <__cmpdf2+0x54>
     8c8:	b001      	add	sp, #4
     8ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     8ce:	bf0c      	ite	eq
     8d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     8d4:	ea91 0f03 	teqne	r1, r3
     8d8:	bf02      	ittt	eq
     8da:	ea90 0f02 	teqeq	r0, r2
     8de:	2000      	moveq	r0, #0
     8e0:	4770      	bxeq	lr
     8e2:	f110 0f00 	cmn.w	r0, #0
     8e6:	ea91 0f03 	teq	r1, r3
     8ea:	bf58      	it	pl
     8ec:	4299      	cmppl	r1, r3
     8ee:	bf08      	it	eq
     8f0:	4290      	cmpeq	r0, r2
     8f2:	bf2c      	ite	cs
     8f4:	17d8      	asrcs	r0, r3, #31
     8f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     8fa:	f040 0001 	orr.w	r0, r0, #1
     8fe:	4770      	bx	lr
     900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     908:	d102      	bne.n	910 <__cmpdf2+0x64>
     90a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     90e:	d107      	bne.n	920 <__cmpdf2+0x74>
     910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     918:	d1d6      	bne.n	8c8 <__cmpdf2+0x1c>
     91a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     91e:	d0d3      	beq.n	8c8 <__cmpdf2+0x1c>
     920:	f85d 0b04 	ldr.w	r0, [sp], #4
     924:	4770      	bx	lr
     926:	bf00      	nop

00000928 <__aeabi_cdrcmple>:
     928:	4684      	mov	ip, r0
     92a:	4610      	mov	r0, r2
     92c:	4662      	mov	r2, ip
     92e:	468c      	mov	ip, r1
     930:	4619      	mov	r1, r3
     932:	4663      	mov	r3, ip
     934:	e000      	b.n	938 <__aeabi_cdcmpeq>
     936:	bf00      	nop

00000938 <__aeabi_cdcmpeq>:
     938:	b501      	push	{r0, lr}
     93a:	f7ff ffb7 	bl	8ac <__cmpdf2>
     93e:	2800      	cmp	r0, #0
     940:	bf48      	it	mi
     942:	f110 0f00 	cmnmi.w	r0, #0
     946:	bd01      	pop	{r0, pc}

00000948 <__aeabi_dcmpeq>:
     948:	f84d ed08 	str.w	lr, [sp, #-8]!
     94c:	f7ff fff4 	bl	938 <__aeabi_cdcmpeq>
     950:	bf0c      	ite	eq
     952:	2001      	moveq	r0, #1
     954:	2000      	movne	r0, #0
     956:	f85d fb08 	ldr.w	pc, [sp], #8
     95a:	bf00      	nop

0000095c <__aeabi_dcmplt>:
     95c:	f84d ed08 	str.w	lr, [sp, #-8]!
     960:	f7ff ffea 	bl	938 <__aeabi_cdcmpeq>
     964:	bf34      	ite	cc
     966:	2001      	movcc	r0, #1
     968:	2000      	movcs	r0, #0
     96a:	f85d fb08 	ldr.w	pc, [sp], #8
     96e:	bf00      	nop

00000970 <__aeabi_dcmple>:
     970:	f84d ed08 	str.w	lr, [sp, #-8]!
     974:	f7ff ffe0 	bl	938 <__aeabi_cdcmpeq>
     978:	bf94      	ite	ls
     97a:	2001      	movls	r0, #1
     97c:	2000      	movhi	r0, #0
     97e:	f85d fb08 	ldr.w	pc, [sp], #8
     982:	bf00      	nop

00000984 <__aeabi_dcmpge>:
     984:	f84d ed08 	str.w	lr, [sp, #-8]!
     988:	f7ff ffce 	bl	928 <__aeabi_cdrcmple>
     98c:	bf94      	ite	ls
     98e:	2001      	movls	r0, #1
     990:	2000      	movhi	r0, #0
     992:	f85d fb08 	ldr.w	pc, [sp], #8
     996:	bf00      	nop

00000998 <__aeabi_dcmpgt>:
     998:	f84d ed08 	str.w	lr, [sp, #-8]!
     99c:	f7ff ffc4 	bl	928 <__aeabi_cdrcmple>
     9a0:	bf34      	ite	cc
     9a2:	2001      	movcc	r0, #1
     9a4:	2000      	movcs	r0, #0
     9a6:	f85d fb08 	ldr.w	pc, [sp], #8
     9aa:	bf00      	nop

000009ac <__aeabi_d2f>:
     9ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
     9b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     9b4:	bf24      	itt	cs
     9b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     9ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     9be:	d90d      	bls.n	9dc <__aeabi_d2f+0x30>
     9c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     9c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     9c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     9cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     9d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     9d4:	bf08      	it	eq
     9d6:	f020 0001 	biceq.w	r0, r0, #1
     9da:	4770      	bx	lr
     9dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     9e0:	d121      	bne.n	a26 <__aeabi_d2f+0x7a>
     9e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     9e6:	bfbc      	itt	lt
     9e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     9ec:	4770      	bxlt	lr
     9ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     9f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     9f6:	f1c2 0218 	rsb	r2, r2, #24
     9fa:	f1c2 0c20 	rsb	ip, r2, #32
     9fe:	fa10 f30c 	lsls.w	r3, r0, ip
     a02:	fa20 f002 	lsr.w	r0, r0, r2
     a06:	bf18      	it	ne
     a08:	f040 0001 	orrne.w	r0, r0, #1
     a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     a14:	fa03 fc0c 	lsl.w	ip, r3, ip
     a18:	ea40 000c 	orr.w	r0, r0, ip
     a1c:	fa23 f302 	lsr.w	r3, r3, r2
     a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
     a24:	e7cc      	b.n	9c0 <__aeabi_d2f+0x14>
     a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
     a2a:	d107      	bne.n	a3c <__aeabi_d2f+0x90>
     a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     a30:	bf1e      	ittt	ne
     a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     a3a:	4770      	bxne	lr
     a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a48:	4770      	bx	lr
     a4a:	bf00      	nop

00000a4c <__aeabi_frsub>:
     a4c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     a50:	e002      	b.n	a58 <__addsf3>
     a52:	bf00      	nop

00000a54 <__aeabi_fsub>:
     a54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000a58 <__addsf3>:
     a58:	0042      	lsls	r2, r0, #1
     a5a:	bf1f      	itttt	ne
     a5c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     a60:	ea92 0f03 	teqne	r2, r3
     a64:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     a68:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     a6c:	d06a      	beq.n	b44 <__addsf3+0xec>
     a6e:	ea4f 6212 	mov.w	r2, r2, lsr #24
     a72:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     a76:	bfc1      	itttt	gt
     a78:	18d2      	addgt	r2, r2, r3
     a7a:	4041      	eorgt	r1, r0
     a7c:	4048      	eorgt	r0, r1
     a7e:	4041      	eorgt	r1, r0
     a80:	bfb8      	it	lt
     a82:	425b      	neglt	r3, r3
     a84:	2b19      	cmp	r3, #25
     a86:	bf88      	it	hi
     a88:	4770      	bxhi	lr
     a8a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     a8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a96:	bf18      	it	ne
     a98:	4240      	negne	r0, r0
     a9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a9e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     aa2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     aa6:	bf18      	it	ne
     aa8:	4249      	negne	r1, r1
     aaa:	ea92 0f03 	teq	r2, r3
     aae:	d03f      	beq.n	b30 <__addsf3+0xd8>
     ab0:	f1a2 0201 	sub.w	r2, r2, #1
     ab4:	fa41 fc03 	asr.w	ip, r1, r3
     ab8:	eb10 000c 	adds.w	r0, r0, ip
     abc:	f1c3 0320 	rsb	r3, r3, #32
     ac0:	fa01 f103 	lsl.w	r1, r1, r3
     ac4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     ac8:	d502      	bpl.n	ad0 <__addsf3+0x78>
     aca:	4249      	negs	r1, r1
     acc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     ad0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     ad4:	d313      	bcc.n	afe <__addsf3+0xa6>
     ad6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     ada:	d306      	bcc.n	aea <__addsf3+0x92>
     adc:	0840      	lsrs	r0, r0, #1
     ade:	ea4f 0131 	mov.w	r1, r1, rrx
     ae2:	f102 0201 	add.w	r2, r2, #1
     ae6:	2afe      	cmp	r2, #254	; 0xfe
     ae8:	d251      	bcs.n	b8e <__addsf3+0x136>
     aea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     aee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     af2:	bf08      	it	eq
     af4:	f020 0001 	biceq.w	r0, r0, #1
     af8:	ea40 0003 	orr.w	r0, r0, r3
     afc:	4770      	bx	lr
     afe:	0049      	lsls	r1, r1, #1
     b00:	eb40 0000 	adc.w	r0, r0, r0
     b04:	3a01      	subs	r2, #1
     b06:	bf28      	it	cs
     b08:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     b0c:	d2ed      	bcs.n	aea <__addsf3+0x92>
     b0e:	fab0 fc80 	clz	ip, r0
     b12:	f1ac 0c08 	sub.w	ip, ip, #8
     b16:	ebb2 020c 	subs.w	r2, r2, ip
     b1a:	fa00 f00c 	lsl.w	r0, r0, ip
     b1e:	bfaa      	itet	ge
     b20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     b24:	4252      	neglt	r2, r2
     b26:	4318      	orrge	r0, r3
     b28:	bfbc      	itt	lt
     b2a:	40d0      	lsrlt	r0, r2
     b2c:	4318      	orrlt	r0, r3
     b2e:	4770      	bx	lr
     b30:	f092 0f00 	teq	r2, #0
     b34:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     b38:	bf06      	itte	eq
     b3a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     b3e:	3201      	addeq	r2, #1
     b40:	3b01      	subne	r3, #1
     b42:	e7b5      	b.n	ab0 <__addsf3+0x58>
     b44:	ea4f 0341 	mov.w	r3, r1, lsl #1
     b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     b4c:	bf18      	it	ne
     b4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     b52:	d021      	beq.n	b98 <__addsf3+0x140>
     b54:	ea92 0f03 	teq	r2, r3
     b58:	d004      	beq.n	b64 <__addsf3+0x10c>
     b5a:	f092 0f00 	teq	r2, #0
     b5e:	bf08      	it	eq
     b60:	4608      	moveq	r0, r1
     b62:	4770      	bx	lr
     b64:	ea90 0f01 	teq	r0, r1
     b68:	bf1c      	itt	ne
     b6a:	2000      	movne	r0, #0
     b6c:	4770      	bxne	lr
     b6e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     b72:	d104      	bne.n	b7e <__addsf3+0x126>
     b74:	0040      	lsls	r0, r0, #1
     b76:	bf28      	it	cs
     b78:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     b7c:	4770      	bx	lr
     b7e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     b82:	bf3c      	itt	cc
     b84:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     b88:	4770      	bxcc	lr
     b8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     b8e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b96:	4770      	bx	lr
     b98:	ea7f 6222 	mvns.w	r2, r2, asr #24
     b9c:	bf16      	itet	ne
     b9e:	4608      	movne	r0, r1
     ba0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     ba4:	4601      	movne	r1, r0
     ba6:	0242      	lsls	r2, r0, #9
     ba8:	bf06      	itte	eq
     baa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     bae:	ea90 0f01 	teqeq	r0, r1
     bb2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     bb6:	4770      	bx	lr

00000bb8 <__aeabi_ui2f>:
     bb8:	f04f 0300 	mov.w	r3, #0
     bbc:	e004      	b.n	bc8 <__aeabi_i2f+0x8>
     bbe:	bf00      	nop

00000bc0 <__aeabi_i2f>:
     bc0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     bc4:	bf48      	it	mi
     bc6:	4240      	negmi	r0, r0
     bc8:	ea5f 0c00 	movs.w	ip, r0
     bcc:	bf08      	it	eq
     bce:	4770      	bxeq	lr
     bd0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     bd4:	4601      	mov	r1, r0
     bd6:	f04f 0000 	mov.w	r0, #0
     bda:	e01c      	b.n	c16 <__aeabi_l2f+0x2a>

00000bdc <__aeabi_ul2f>:
     bdc:	ea50 0201 	orrs.w	r2, r0, r1
     be0:	bf08      	it	eq
     be2:	4770      	bxeq	lr
     be4:	f04f 0300 	mov.w	r3, #0
     be8:	e00a      	b.n	c00 <__aeabi_l2f+0x14>
     bea:	bf00      	nop

00000bec <__aeabi_l2f>:
     bec:	ea50 0201 	orrs.w	r2, r0, r1
     bf0:	bf08      	it	eq
     bf2:	4770      	bxeq	lr
     bf4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     bf8:	d502      	bpl.n	c00 <__aeabi_l2f+0x14>
     bfa:	4240      	negs	r0, r0
     bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     c00:	ea5f 0c01 	movs.w	ip, r1
     c04:	bf02      	ittt	eq
     c06:	4684      	moveq	ip, r0
     c08:	4601      	moveq	r1, r0
     c0a:	2000      	moveq	r0, #0
     c0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     c10:	bf08      	it	eq
     c12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     c16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     c1a:	fabc f28c 	clz	r2, ip
     c1e:	3a08      	subs	r2, #8
     c20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     c24:	db10      	blt.n	c48 <__aeabi_l2f+0x5c>
     c26:	fa01 fc02 	lsl.w	ip, r1, r2
     c2a:	4463      	add	r3, ip
     c2c:	fa00 fc02 	lsl.w	ip, r0, r2
     c30:	f1c2 0220 	rsb	r2, r2, #32
     c34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     c38:	fa20 f202 	lsr.w	r2, r0, r2
     c3c:	eb43 0002 	adc.w	r0, r3, r2
     c40:	bf08      	it	eq
     c42:	f020 0001 	biceq.w	r0, r0, #1
     c46:	4770      	bx	lr
     c48:	f102 0220 	add.w	r2, r2, #32
     c4c:	fa01 fc02 	lsl.w	ip, r1, r2
     c50:	f1c2 0220 	rsb	r2, r2, #32
     c54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     c58:	fa21 f202 	lsr.w	r2, r1, r2
     c5c:	eb43 0002 	adc.w	r0, r3, r2
     c60:	bf08      	it	eq
     c62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     c66:	4770      	bx	lr

00000c68 <__aeabi_fmul>:
     c68:	f04f 0cff 	mov.w	ip, #255	; 0xff
     c6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     c70:	bf1e      	ittt	ne
     c72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     c76:	ea92 0f0c 	teqne	r2, ip
     c7a:	ea93 0f0c 	teqne	r3, ip
     c7e:	d06f      	beq.n	d60 <__aeabi_fmul+0xf8>
     c80:	441a      	add	r2, r3
     c82:	ea80 0c01 	eor.w	ip, r0, r1
     c86:	0240      	lsls	r0, r0, #9
     c88:	bf18      	it	ne
     c8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     c8e:	d01e      	beq.n	cce <__aeabi_fmul+0x66>
     c90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     c94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     c98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     c9c:	fba0 3101 	umull	r3, r1, r0, r1
     ca0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     ca4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     ca8:	bf3e      	ittt	cc
     caa:	0049      	lslcc	r1, r1, #1
     cac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     cb0:	005b      	lslcc	r3, r3, #1
     cb2:	ea40 0001 	orr.w	r0, r0, r1
     cb6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     cba:	2afd      	cmp	r2, #253	; 0xfd
     cbc:	d81d      	bhi.n	cfa <__aeabi_fmul+0x92>
     cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     cc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     cc6:	bf08      	it	eq
     cc8:	f020 0001 	biceq.w	r0, r0, #1
     ccc:	4770      	bx	lr
     cce:	f090 0f00 	teq	r0, #0
     cd2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     cd6:	bf08      	it	eq
     cd8:	0249      	lsleq	r1, r1, #9
     cda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     cde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     ce2:	3a7f      	subs	r2, #127	; 0x7f
     ce4:	bfc2      	ittt	gt
     ce6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     cea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     cee:	4770      	bxgt	lr
     cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     cf4:	f04f 0300 	mov.w	r3, #0
     cf8:	3a01      	subs	r2, #1
     cfa:	dc5d      	bgt.n	db8 <__aeabi_fmul+0x150>
     cfc:	f112 0f19 	cmn.w	r2, #25
     d00:	bfdc      	itt	le
     d02:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     d06:	4770      	bxle	lr
     d08:	f1c2 0200 	rsb	r2, r2, #0
     d0c:	0041      	lsls	r1, r0, #1
     d0e:	fa21 f102 	lsr.w	r1, r1, r2
     d12:	f1c2 0220 	rsb	r2, r2, #32
     d16:	fa00 fc02 	lsl.w	ip, r0, r2
     d1a:	ea5f 0031 	movs.w	r0, r1, rrx
     d1e:	f140 0000 	adc.w	r0, r0, #0
     d22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     d26:	bf08      	it	eq
     d28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     d2c:	4770      	bx	lr
     d2e:	f092 0f00 	teq	r2, #0
     d32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     d36:	bf02      	ittt	eq
     d38:	0040      	lsleq	r0, r0, #1
     d3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     d3e:	3a01      	subeq	r2, #1
     d40:	d0f9      	beq.n	d36 <__aeabi_fmul+0xce>
     d42:	ea40 000c 	orr.w	r0, r0, ip
     d46:	f093 0f00 	teq	r3, #0
     d4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     d4e:	bf02      	ittt	eq
     d50:	0049      	lsleq	r1, r1, #1
     d52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     d56:	3b01      	subeq	r3, #1
     d58:	d0f9      	beq.n	d4e <__aeabi_fmul+0xe6>
     d5a:	ea41 010c 	orr.w	r1, r1, ip
     d5e:	e78f      	b.n	c80 <__aeabi_fmul+0x18>
     d60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     d64:	ea92 0f0c 	teq	r2, ip
     d68:	bf18      	it	ne
     d6a:	ea93 0f0c 	teqne	r3, ip
     d6e:	d00a      	beq.n	d86 <__aeabi_fmul+0x11e>
     d70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     d74:	bf18      	it	ne
     d76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     d7a:	d1d8      	bne.n	d2e <__aeabi_fmul+0xc6>
     d7c:	ea80 0001 	eor.w	r0, r0, r1
     d80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     d84:	4770      	bx	lr
     d86:	f090 0f00 	teq	r0, #0
     d8a:	bf17      	itett	ne
     d8c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     d90:	4608      	moveq	r0, r1
     d92:	f091 0f00 	teqne	r1, #0
     d96:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     d9a:	d014      	beq.n	dc6 <__aeabi_fmul+0x15e>
     d9c:	ea92 0f0c 	teq	r2, ip
     da0:	d101      	bne.n	da6 <__aeabi_fmul+0x13e>
     da2:	0242      	lsls	r2, r0, #9
     da4:	d10f      	bne.n	dc6 <__aeabi_fmul+0x15e>
     da6:	ea93 0f0c 	teq	r3, ip
     daa:	d103      	bne.n	db4 <__aeabi_fmul+0x14c>
     dac:	024b      	lsls	r3, r1, #9
     dae:	bf18      	it	ne
     db0:	4608      	movne	r0, r1
     db2:	d108      	bne.n	dc6 <__aeabi_fmul+0x15e>
     db4:	ea80 0001 	eor.w	r0, r0, r1
     db8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     dbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     dc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     dc4:	4770      	bx	lr
     dc6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     dca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     dce:	4770      	bx	lr

00000dd0 <__aeabi_fdiv>:
     dd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
     dd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     dd8:	bf1e      	ittt	ne
     dda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     dde:	ea92 0f0c 	teqne	r2, ip
     de2:	ea93 0f0c 	teqne	r3, ip
     de6:	d069      	beq.n	ebc <__aeabi_fdiv+0xec>
     de8:	eba2 0203 	sub.w	r2, r2, r3
     dec:	ea80 0c01 	eor.w	ip, r0, r1
     df0:	0249      	lsls	r1, r1, #9
     df2:	ea4f 2040 	mov.w	r0, r0, lsl #9
     df6:	d037      	beq.n	e68 <__aeabi_fdiv+0x98>
     df8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     dfc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     e00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     e04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     e08:	428b      	cmp	r3, r1
     e0a:	bf38      	it	cc
     e0c:	005b      	lslcc	r3, r3, #1
     e0e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     e12:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     e16:	428b      	cmp	r3, r1
     e18:	bf24      	itt	cs
     e1a:	1a5b      	subcs	r3, r3, r1
     e1c:	ea40 000c 	orrcs.w	r0, r0, ip
     e20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     e24:	bf24      	itt	cs
     e26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     e2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     e2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     e32:	bf24      	itt	cs
     e34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     e38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     e3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     e40:	bf24      	itt	cs
     e42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     e46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     e4a:	011b      	lsls	r3, r3, #4
     e4c:	bf18      	it	ne
     e4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     e52:	d1e0      	bne.n	e16 <__aeabi_fdiv+0x46>
     e54:	2afd      	cmp	r2, #253	; 0xfd
     e56:	f63f af50 	bhi.w	cfa <__aeabi_fmul+0x92>
     e5a:	428b      	cmp	r3, r1
     e5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     e60:	bf08      	it	eq
     e62:	f020 0001 	biceq.w	r0, r0, #1
     e66:	4770      	bx	lr
     e68:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     e6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     e70:	327f      	adds	r2, #127	; 0x7f
     e72:	bfc2      	ittt	gt
     e74:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     e78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     e7c:	4770      	bxgt	lr
     e7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     e82:	f04f 0300 	mov.w	r3, #0
     e86:	3a01      	subs	r2, #1
     e88:	e737      	b.n	cfa <__aeabi_fmul+0x92>
     e8a:	f092 0f00 	teq	r2, #0
     e8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     e92:	bf02      	ittt	eq
     e94:	0040      	lsleq	r0, r0, #1
     e96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     e9a:	3a01      	subeq	r2, #1
     e9c:	d0f9      	beq.n	e92 <__aeabi_fdiv+0xc2>
     e9e:	ea40 000c 	orr.w	r0, r0, ip
     ea2:	f093 0f00 	teq	r3, #0
     ea6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     eaa:	bf02      	ittt	eq
     eac:	0049      	lsleq	r1, r1, #1
     eae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     eb2:	3b01      	subeq	r3, #1
     eb4:	d0f9      	beq.n	eaa <__aeabi_fdiv+0xda>
     eb6:	ea41 010c 	orr.w	r1, r1, ip
     eba:	e795      	b.n	de8 <__aeabi_fdiv+0x18>
     ebc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     ec0:	ea92 0f0c 	teq	r2, ip
     ec4:	d108      	bne.n	ed8 <__aeabi_fdiv+0x108>
     ec6:	0242      	lsls	r2, r0, #9
     ec8:	f47f af7d 	bne.w	dc6 <__aeabi_fmul+0x15e>
     ecc:	ea93 0f0c 	teq	r3, ip
     ed0:	f47f af70 	bne.w	db4 <__aeabi_fmul+0x14c>
     ed4:	4608      	mov	r0, r1
     ed6:	e776      	b.n	dc6 <__aeabi_fmul+0x15e>
     ed8:	ea93 0f0c 	teq	r3, ip
     edc:	d104      	bne.n	ee8 <__aeabi_fdiv+0x118>
     ede:	024b      	lsls	r3, r1, #9
     ee0:	f43f af4c 	beq.w	d7c <__aeabi_fmul+0x114>
     ee4:	4608      	mov	r0, r1
     ee6:	e76e      	b.n	dc6 <__aeabi_fmul+0x15e>
     ee8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     eec:	bf18      	it	ne
     eee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     ef2:	d1ca      	bne.n	e8a <__aeabi_fdiv+0xba>
     ef4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     ef8:	f47f af5c 	bne.w	db4 <__aeabi_fmul+0x14c>
     efc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     f00:	f47f af3c 	bne.w	d7c <__aeabi_fmul+0x114>
     f04:	e75f      	b.n	dc6 <__aeabi_fmul+0x15e>
     f06:	bf00      	nop

00000f08 <__aeabi_f2uiz>:
     f08:	0042      	lsls	r2, r0, #1
     f0a:	d20e      	bcs.n	f2a <__aeabi_f2uiz+0x22>
     f0c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     f10:	d30b      	bcc.n	f2a <__aeabi_f2uiz+0x22>
     f12:	f04f 039e 	mov.w	r3, #158	; 0x9e
     f16:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     f1a:	d409      	bmi.n	f30 <__aeabi_f2uiz+0x28>
     f1c:	ea4f 2300 	mov.w	r3, r0, lsl #8
     f20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     f24:	fa23 f002 	lsr.w	r0, r3, r2
     f28:	4770      	bx	lr
     f2a:	f04f 0000 	mov.w	r0, #0
     f2e:	4770      	bx	lr
     f30:	f112 0f61 	cmn.w	r2, #97	; 0x61
     f34:	d101      	bne.n	f3a <__aeabi_f2uiz+0x32>
     f36:	0242      	lsls	r2, r0, #9
     f38:	d102      	bne.n	f40 <__aeabi_f2uiz+0x38>
     f3a:	f04f 30ff 	mov.w	r0, #4294967295
     f3e:	4770      	bx	lr
     f40:	f04f 0000 	mov.w	r0, #0
     f44:	4770      	bx	lr
     f46:	bf00      	nop

00000f48 <__aeabi_uldivmod>:
     f48:	b953      	cbnz	r3, f60 <__aeabi_uldivmod+0x18>
     f4a:	b94a      	cbnz	r2, f60 <__aeabi_uldivmod+0x18>
     f4c:	2900      	cmp	r1, #0
     f4e:	bf08      	it	eq
     f50:	2800      	cmpeq	r0, #0
     f52:	bf1c      	itt	ne
     f54:	f04f 31ff 	movne.w	r1, #4294967295
     f58:	f04f 30ff 	movne.w	r0, #4294967295
     f5c:	f000 b96c 	b.w	1238 <__aeabi_idiv0>
     f60:	f1ad 0c08 	sub.w	ip, sp, #8
     f64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     f68:	f000 f806 	bl	f78 <__udivmoddi4>
     f6c:	f8dd e004 	ldr.w	lr, [sp, #4]
     f70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     f74:	b004      	add	sp, #16
     f76:	4770      	bx	lr

00000f78 <__udivmoddi4>:
     f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     f7c:	9e08      	ldr	r6, [sp, #32]
     f7e:	460d      	mov	r5, r1
     f80:	4604      	mov	r4, r0
     f82:	468e      	mov	lr, r1
     f84:	2b00      	cmp	r3, #0
     f86:	f040 8082 	bne.w	108e <CONFIG_FPROTECT_BLOCK_SIZE+0x8e>
     f8a:	428a      	cmp	r2, r1
     f8c:	4617      	mov	r7, r2
     f8e:	d946      	bls.n	101e <CONFIG_FPROTECT_BLOCK_SIZE+0x1e>
     f90:	fab2 f282 	clz	r2, r2
     f94:	b14a      	cbz	r2, faa <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0xa>
     f96:	f1c2 0120 	rsb	r1, r2, #32
     f9a:	fa05 f302 	lsl.w	r3, r5, r2
     f9e:	fa20 f101 	lsr.w	r1, r0, r1
     fa2:	4097      	lsls	r7, r2
     fa4:	ea41 0e03 	orr.w	lr, r1, r3
     fa8:	4094      	lsls	r4, r2
     faa:	ea4f 4817 	mov.w	r8, r7, lsr #16
     fae:	0c23      	lsrs	r3, r4, #16
     fb0:	fbbe fcf8 	udiv	ip, lr, r8
     fb4:	b2b9      	uxth	r1, r7
     fb6:	fb08 ee1c 	mls	lr, r8, ip, lr
     fba:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     fbe:	fb0c f001 	mul.w	r0, ip, r1
     fc2:	4298      	cmp	r0, r3
     fc4:	d90a      	bls.n	fdc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3c>
     fc6:	18fb      	adds	r3, r7, r3
     fc8:	f10c 35ff 	add.w	r5, ip, #4294967295
     fcc:	f080 8116 	bcs.w	11fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>
     fd0:	4298      	cmp	r0, r3
     fd2:	f240 8113 	bls.w	11fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>
     fd6:	f1ac 0c02 	sub.w	ip, ip, #2
     fda:	443b      	add	r3, r7
     fdc:	1a1b      	subs	r3, r3, r0
     fde:	b2a4      	uxth	r4, r4
     fe0:	fbb3 f0f8 	udiv	r0, r3, r8
     fe4:	fb08 3310 	mls	r3, r8, r0, r3
     fe8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     fec:	fb00 f101 	mul.w	r1, r0, r1
     ff0:	42a1      	cmp	r1, r4
     ff2:	d909      	bls.n	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
     ff4:	193c      	adds	r4, r7, r4
     ff6:	f100 33ff 	add.w	r3, r0, #4294967295
     ffa:	f080 8101 	bcs.w	1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>
     ffe:	42a1      	cmp	r1, r4
    1000:	f240 80fe 	bls.w	1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>
    1004:	3802      	subs	r0, #2
    1006:	443c      	add	r4, r7
    1008:	1a64      	subs	r4, r4, r1
    100a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    100e:	2100      	movs	r1, #0
    1010:	b11e      	cbz	r6, 101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
    1012:	40d4      	lsrs	r4, r2
    1014:	2300      	movs	r3, #0
    1016:	e9c6 4300 	strd	r4, r3, [r6]
    101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    101e:	b902      	cbnz	r2, 1022 <CONFIG_FPROTECT_BLOCK_SIZE+0x22>
    1020:	deff      	udf	#255	; 0xff
    1022:	fab2 f282 	clz	r2, r2
    1026:	2a00      	cmp	r2, #0
    1028:	d14f      	bne.n	10ca <CONFIG_FPROTECT_BLOCK_SIZE+0xca>
    102a:	1bcb      	subs	r3, r1, r7
    102c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1030:	fa1f f887 	uxth.w	r8, r7
    1034:	2101      	movs	r1, #1
    1036:	fbb3 fcfe 	udiv	ip, r3, lr
    103a:	0c25      	lsrs	r5, r4, #16
    103c:	fb0e 331c 	mls	r3, lr, ip, r3
    1040:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1044:	fb08 f30c 	mul.w	r3, r8, ip
    1048:	42ab      	cmp	r3, r5
    104a:	d907      	bls.n	105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
    104c:	197d      	adds	r5, r7, r5
    104e:	f10c 30ff 	add.w	r0, ip, #4294967295
    1052:	d202      	bcs.n	105a <CONFIG_FPROTECT_BLOCK_SIZE+0x5a>
    1054:	42ab      	cmp	r3, r5
    1056:	f200 80e7 	bhi.w	1228 <CONFIG_FPROTECT_BLOCK_SIZE+0x228>
    105a:	4684      	mov	ip, r0
    105c:	1aed      	subs	r5, r5, r3
    105e:	b2a3      	uxth	r3, r4
    1060:	fbb5 f0fe 	udiv	r0, r5, lr
    1064:	fb0e 5510 	mls	r5, lr, r0, r5
    1068:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    106c:	fb08 f800 	mul.w	r8, r8, r0
    1070:	45a0      	cmp	r8, r4
    1072:	d907      	bls.n	1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
    1074:	193c      	adds	r4, r7, r4
    1076:	f100 33ff 	add.w	r3, r0, #4294967295
    107a:	d202      	bcs.n	1082 <CONFIG_FPROTECT_BLOCK_SIZE+0x82>
    107c:	45a0      	cmp	r8, r4
    107e:	f200 80d7 	bhi.w	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    1082:	4618      	mov	r0, r3
    1084:	eba4 0408 	sub.w	r4, r4, r8
    1088:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    108c:	e7c0      	b.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
    108e:	428b      	cmp	r3, r1
    1090:	d908      	bls.n	10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
    1092:	2e00      	cmp	r6, #0
    1094:	f000 80af 	beq.w	11f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f6>
    1098:	2100      	movs	r1, #0
    109a:	e9c6 0500 	strd	r0, r5, [r6]
    109e:	4608      	mov	r0, r1
    10a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    10a4:	fab3 f183 	clz	r1, r3
    10a8:	2900      	cmp	r1, #0
    10aa:	d14b      	bne.n	1144 <CONFIG_FPROTECT_BLOCK_SIZE+0x144>
    10ac:	42ab      	cmp	r3, r5
    10ae:	d302      	bcc.n	10b6 <CONFIG_FPROTECT_BLOCK_SIZE+0xb6>
    10b0:	4282      	cmp	r2, r0
    10b2:	f200 80b7 	bhi.w	1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
    10b6:	1a84      	subs	r4, r0, r2
    10b8:	eb65 0303 	sbc.w	r3, r5, r3
    10bc:	2001      	movs	r0, #1
    10be:	469e      	mov	lr, r3
    10c0:	2e00      	cmp	r6, #0
    10c2:	d0aa      	beq.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
    10c4:	e9c6 4e00 	strd	r4, lr, [r6]
    10c8:	e7a7      	b.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
    10ca:	f1c2 0c20 	rsb	ip, r2, #32
    10ce:	fa01 f302 	lsl.w	r3, r1, r2
    10d2:	4097      	lsls	r7, r2
    10d4:	fa20 f00c 	lsr.w	r0, r0, ip
    10d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    10dc:	fa21 fc0c 	lsr.w	ip, r1, ip
    10e0:	4318      	orrs	r0, r3
    10e2:	fbbc f1fe 	udiv	r1, ip, lr
    10e6:	0c05      	lsrs	r5, r0, #16
    10e8:	fb0e cc11 	mls	ip, lr, r1, ip
    10ec:	fa1f f887 	uxth.w	r8, r7
    10f0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    10f4:	fb01 f308 	mul.w	r3, r1, r8
    10f8:	42ab      	cmp	r3, r5
    10fa:	fa04 f402 	lsl.w	r4, r4, r2
    10fe:	d909      	bls.n	1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
    1100:	197d      	adds	r5, r7, r5
    1102:	f101 3cff 	add.w	ip, r1, #4294967295
    1106:	f080 808b 	bcs.w	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    110a:	42ab      	cmp	r3, r5
    110c:	f240 8088 	bls.w	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    1110:	3902      	subs	r1, #2
    1112:	443d      	add	r5, r7
    1114:	1aeb      	subs	r3, r5, r3
    1116:	b285      	uxth	r5, r0
    1118:	fbb3 f0fe 	udiv	r0, r3, lr
    111c:	fb0e 3310 	mls	r3, lr, r0, r3
    1120:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1124:	fb00 f308 	mul.w	r3, r0, r8
    1128:	42ab      	cmp	r3, r5
    112a:	d907      	bls.n	113c <CONFIG_FPROTECT_BLOCK_SIZE+0x13c>
    112c:	197d      	adds	r5, r7, r5
    112e:	f100 3cff 	add.w	ip, r0, #4294967295
    1132:	d271      	bcs.n	1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>
    1134:	42ab      	cmp	r3, r5
    1136:	d96f      	bls.n	1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>
    1138:	3802      	subs	r0, #2
    113a:	443d      	add	r5, r7
    113c:	1aeb      	subs	r3, r5, r3
    113e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    1142:	e778      	b.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
    1144:	f1c1 0c20 	rsb	ip, r1, #32
    1148:	408b      	lsls	r3, r1
    114a:	fa22 f70c 	lsr.w	r7, r2, ip
    114e:	431f      	orrs	r7, r3
    1150:	fa20 f40c 	lsr.w	r4, r0, ip
    1154:	fa05 f301 	lsl.w	r3, r5, r1
    1158:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    115c:	fa25 f50c 	lsr.w	r5, r5, ip
    1160:	431c      	orrs	r4, r3
    1162:	0c23      	lsrs	r3, r4, #16
    1164:	fbb5 f9fe 	udiv	r9, r5, lr
    1168:	fa1f f887 	uxth.w	r8, r7
    116c:	fb0e 5519 	mls	r5, lr, r9, r5
    1170:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    1174:	fb09 fa08 	mul.w	sl, r9, r8
    1178:	45aa      	cmp	sl, r5
    117a:	fa02 f201 	lsl.w	r2, r2, r1
    117e:	fa00 f301 	lsl.w	r3, r0, r1
    1182:	d908      	bls.n	1196 <CONFIG_FPROTECT_BLOCK_SIZE+0x196>
    1184:	197d      	adds	r5, r7, r5
    1186:	f109 30ff 	add.w	r0, r9, #4294967295
    118a:	d247      	bcs.n	121c <CONFIG_FPROTECT_BLOCK_SIZE+0x21c>
    118c:	45aa      	cmp	sl, r5
    118e:	d945      	bls.n	121c <CONFIG_FPROTECT_BLOCK_SIZE+0x21c>
    1190:	f1a9 0902 	sub.w	r9, r9, #2
    1194:	443d      	add	r5, r7
    1196:	eba5 050a 	sub.w	r5, r5, sl
    119a:	b2a4      	uxth	r4, r4
    119c:	fbb5 f0fe 	udiv	r0, r5, lr
    11a0:	fb0e 5510 	mls	r5, lr, r0, r5
    11a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    11a8:	fb00 f808 	mul.w	r8, r0, r8
    11ac:	45a0      	cmp	r8, r4
    11ae:	d907      	bls.n	11c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c0>
    11b0:	193c      	adds	r4, r7, r4
    11b2:	f100 35ff 	add.w	r5, r0, #4294967295
    11b6:	d22d      	bcs.n	1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>
    11b8:	45a0      	cmp	r8, r4
    11ba:	d92b      	bls.n	1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>
    11bc:	3802      	subs	r0, #2
    11be:	443c      	add	r4, r7
    11c0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    11c4:	eba4 0408 	sub.w	r4, r4, r8
    11c8:	fba0 8902 	umull	r8, r9, r0, r2
    11cc:	454c      	cmp	r4, r9
    11ce:	46c6      	mov	lr, r8
    11d0:	464d      	mov	r5, r9
    11d2:	d319      	bcc.n	1208 <CONFIG_FPROTECT_BLOCK_SIZE+0x208>
    11d4:	d016      	beq.n	1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
    11d6:	b15e      	cbz	r6, 11f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f0>
    11d8:	ebb3 020e 	subs.w	r2, r3, lr
    11dc:	eb64 0405 	sbc.w	r4, r4, r5
    11e0:	fa04 fc0c 	lsl.w	ip, r4, ip
    11e4:	40ca      	lsrs	r2, r1
    11e6:	ea4c 0202 	orr.w	r2, ip, r2
    11ea:	40cc      	lsrs	r4, r1
    11ec:	e9c6 2400 	strd	r2, r4, [r6]
    11f0:	2100      	movs	r1, #0
    11f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11f6:	4631      	mov	r1, r6
    11f8:	4630      	mov	r0, r6
    11fa:	e70e      	b.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
    11fc:	46ac      	mov	ip, r5
    11fe:	e6ed      	b.n	fdc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3c>
    1200:	4618      	mov	r0, r3
    1202:	e701      	b.n	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
    1204:	4543      	cmp	r3, r8
    1206:	d2e6      	bcs.n	11d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d6>
    1208:	ebb8 0e02 	subs.w	lr, r8, r2
    120c:	eb69 0507 	sbc.w	r5, r9, r7
    1210:	3801      	subs	r0, #1
    1212:	e7e0      	b.n	11d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d6>
    1214:	4628      	mov	r0, r5
    1216:	e7d3      	b.n	11c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c0>
    1218:	4660      	mov	r0, ip
    121a:	e78f      	b.n	113c <CONFIG_FPROTECT_BLOCK_SIZE+0x13c>
    121c:	4681      	mov	r9, r0
    121e:	e7ba      	b.n	1196 <CONFIG_FPROTECT_BLOCK_SIZE+0x196>
    1220:	4661      	mov	r1, ip
    1222:	e777      	b.n	1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
    1224:	4608      	mov	r0, r1
    1226:	e74b      	b.n	10c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>
    1228:	f1ac 0c02 	sub.w	ip, ip, #2
    122c:	443d      	add	r5, r7
    122e:	e715      	b.n	105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
    1230:	3802      	subs	r0, #2
    1232:	443c      	add	r4, r7
    1234:	e726      	b.n	1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
    1236:	bf00      	nop

00001238 <__aeabi_idiv0>:
    1238:	4770      	bx	lr
    123a:	bf00      	nop

0000123c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
    123c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    123e:	4615      	mov	r5, r2
    1240:	4a0a      	ldr	r2, [pc, #40]	; (126c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x30>)
    1242:	461c      	mov	r4, r3
    1244:	6856      	ldr	r6, [r2, #4]
    1246:	b12e      	cbz	r6, 1254 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
    1248:	b001      	add	sp, #4
    124a:	462a      	mov	r2, r5
    124c:	46b4      	mov	ip, r6
    124e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1252:	4760      	bx	ip
    1254:	2000      	movs	r0, #0
    1256:	f88d 0000 	strb.w	r0, [sp]
    125a:	4668      	mov	r0, sp
    125c:	f00b f856 	bl	c30c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
    1260:	f89d 0000 	ldrb.w	r0, [sp]
    1264:	1a28      	subs	r0, r5, r0
    1266:	7020      	strb	r0, [r4, #0]
    1268:	2000      	movs	r0, #0
    126a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    126c:	20000000 	.word	0x20000000

00001270 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    1270:	4801      	ldr	r0, [pc, #4]	; (1278 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    1272:	7800      	ldrb	r0, [r0, #0]
    1274:	4770      	bx	lr
    1276:	0000      	.short	0x0000
    1278:	20000008 	.word	0x20000008

0000127c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    127c:	4905      	ldr	r1, [pc, #20]	; (1294 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    127e:	780a      	ldrb	r2, [r1, #0]
    1280:	4290      	cmp	r0, r2
    1282:	d301      	bcc.n	1288 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    1284:	2000      	movs	r0, #0
    1286:	4770      	bx	lr
    1288:	6849      	ldr	r1, [r1, #4]
    128a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    128e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1292:	4770      	bx	lr
    1294:	20000008 	.word	0x20000008
    1298:	b570      	push	{r4, r5, r6, lr}
    129a:	4605      	mov	r5, r0
    129c:	2a20      	cmp	r2, #32
    129e:	d027      	beq.n	12f0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
    12a0:	4819      	ldr	r0, [pc, #100]	; (1308 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
    12a2:	4c1a      	ldr	r4, [pc, #104]	; (130c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
    12a4:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    12a8:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    12ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    12b0:	2920      	cmp	r1, #32
    12b2:	d022      	beq.n	12fa <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
    12b4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    12b8:	7840      	ldrb	r0, [r0, #1]
    12ba:	784c      	ldrb	r4, [r1, #1]
    12bc:	7048      	strb	r0, [r1, #1]
    12be:	4620      	mov	r0, r4
    12c0:	4601      	mov	r1, r0
    12c2:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    12c6:	4291      	cmp	r1, r2
    12c8:	7005      	strb	r5, [r0, #0]
    12ca:	7840      	ldrb	r0, [r0, #1]
    12cc:	d1f8      	bne.n	12c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
    12ce:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    12d2:	2a20      	cmp	r2, #32
    12d4:	bf1a      	itte	ne
    12d6:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    12da:	7054      	strbne	r4, [r2, #1]
    12dc:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    12e0:	2220      	movs	r2, #32
    12e2:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    12e6:	f88c 2001 	strb.w	r2, [ip, #1]
    12ea:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    12ee:	bd70      	pop	{r4, r5, r6, pc}
    12f0:	f240 2191 	movw	r1, #657	; 0x291
    12f4:	2070      	movs	r0, #112	; 0x70
    12f6:	f003 f8e5 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12fa:	f893 4020 	ldrb.w	r4, [r3, #32]
    12fe:	7840      	ldrb	r0, [r0, #1]
    1300:	f883 0020 	strb.w	r0, [r3, #32]
    1304:	e7db      	b.n	12be <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
    1306:	0000      	.short	0x0000
    1308:	20000e84 	.word	0x20000e84
    130c:	20000f04 	.word	0x20000f04
    1310:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1314:	460c      	mov	r4, r1
    1316:	8949      	ldrh	r1, [r1, #10]
    1318:	b087      	sub	sp, #28
    131a:	f501 61e1 	add.w	r1, r1, #1800	; 0x708
    131e:	4615      	mov	r5, r2
    1320:	4281      	cmp	r1, r0
    1322:	f200 80da 	bhi.w	14da <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x152>
    1326:	aa05      	add	r2, sp, #20
    1328:	a902      	add	r1, sp, #8
    132a:	f002 f89f 	bl	346c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    132e:	9802      	ldr	r0, [sp, #8]
    1330:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    1332:	4428      	add	r0, r5
    1334:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1338:	9004      	str	r0, [sp, #16]
    133a:	48a9      	ldr	r0, [pc, #676]	; (15e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x258>)
    133c:	4ea9      	ldr	r6, [pc, #676]	; (15e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x25c>)
    133e:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    1342:	9003      	str	r0, [sp, #12]
    1344:	f890 5020 	ldrb.w	r5, [r0, #32]
    1348:	2020      	movs	r0, #32
    134a:	46e9      	mov	r9, sp
    134c:	f10d 0804 	add.w	r8, sp, #4
    1350:	f88d 0000 	strb.w	r0, [sp]
    1354:	f506 7a40 	add.w	sl, r6, #768	; 0x300
    1358:	2d20      	cmp	r5, #32
    135a:	bf18      	it	ne
    135c:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
    1360:	d026      	beq.n	13b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x28>
    1362:	bf00      	nop
    1364:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1368:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    136c:	6821      	ldr	r1, [r4, #0]
    136e:	68c2      	ldr	r2, [r0, #12]
    1370:	1a89      	subs	r1, r1, r2
    1372:	0209      	lsls	r1, r1, #8
    1374:	17ca      	asrs	r2, r1, #31
    1376:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    137a:	3008      	adds	r0, #8
    137c:	1209      	asrs	r1, r1, #8
    137e:	d417      	bmi.n	13b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x28>
    1380:	8961      	ldrh	r1, [r4, #10]
    1382:	b171      	cbz	r1, 13a2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a>
    1384:	8941      	ldrh	r1, [r0, #10]
    1386:	b961      	cbnz	r1, 13a2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a>
    1388:	f000 fdb4 	bl	1ef4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a8>
    138c:	f002 f852 	bl	3434 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1390:	6821      	ldr	r1, [r4, #0]
    1392:	1a08      	subs	r0, r1, r0
    1394:	0200      	lsls	r0, r0, #8
    1396:	17c1      	asrs	r1, r0, #31
    1398:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    139c:	1200      	asrs	r0, r0, #8
    139e:	2833      	cmp	r0, #51	; 0x33
    13a0:	db06      	blt.n	13b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x28>
    13a2:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    13a6:	f889 5000 	strb.w	r5, [r9]
    13aa:	7845      	ldrb	r5, [r0, #1]
    13ac:	2d20      	cmp	r5, #32
    13ae:	d1d9      	bne.n	1364 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe8>
    13b0:	f899 0000 	ldrb.w	r0, [r9]
    13b4:	f888 0000 	strb.w	r0, [r8]
    13b8:	46a1      	mov	r9, r4
    13ba:	2d20      	cmp	r5, #32
    13bc:	bf1c      	itt	ne
    13be:	488a      	ldrne	r0, [pc, #552]	; (15e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x260>)
    13c0:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    13c4:	f000 8108 	beq.w	15d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x250>
    13c8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    13cc:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
    13d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
    13d4:	f8da 2008 	ldr.w	r2, [sl, #8]
    13d8:	4648      	mov	r0, r9
    13da:	1a51      	subs	r1, r2, r1
    13dc:	0209      	lsls	r1, r1, #8
    13de:	17ca      	asrs	r2, r1, #31
    13e0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    13e4:	f10a 0708 	add.w	r7, sl, #8
    13e8:	1209      	asrs	r1, r1, #8
    13ea:	d415      	bmi.n	1418 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x90>
    13ec:	8979      	ldrh	r1, [r7, #10]
    13ee:	2900      	cmp	r1, #0
    13f0:	f000 80f2 	beq.w	15d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x250>
    13f4:	8941      	ldrh	r1, [r0, #10]
    13f6:	2900      	cmp	r1, #0
    13f8:	f040 80ee 	bne.w	15d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x250>
    13fc:	f000 fd7a 	bl	1ef4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a8>
    1400:	f002 f818 	bl	3434 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1404:	6839      	ldr	r1, [r7, #0]
    1406:	1a08      	subs	r0, r1, r0
    1408:	0200      	lsls	r0, r0, #8
    140a:	17c1      	asrs	r1, r0, #31
    140c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1410:	1200      	asrs	r0, r0, #8
    1412:	2833      	cmp	r0, #51	; 0x33
    1414:	f280 80e0 	bge.w	15d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x250>
    1418:	f888 5000 	strb.w	r5, [r8]
    141c:	f89a 1014 	ldrb.w	r1, [sl, #20]
    1420:	f899 000c 	ldrb.w	r0, [r9, #12]
    1424:	4281      	cmp	r1, r0
    1426:	d906      	bls.n	1436 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xae>
    1428:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    142c:	7845      	ldrb	r5, [r0, #1]
    142e:	2d20      	cmp	r5, #32
    1430:	d1ca      	bne.n	13c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x40>
    1432:	f000 b8d1 	b.w	15d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x250>
    1436:	f89d 0004 	ldrb.w	r0, [sp, #4]
    143a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    143e:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
    1442:	8a68      	ldrh	r0, [r5, #18]
    1444:	68ef      	ldr	r7, [r5, #12]
    1446:	2800      	cmp	r0, #0
    1448:	d13f      	bne.n	14ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x142>
    144a:	8960      	ldrh	r0, [r4, #10]
    144c:	b3e8      	cbz	r0, 14ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x142>
    144e:	68a8      	ldr	r0, [r5, #8]
    1450:	f00a ff87 	bl	c362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1454:	8a69      	ldrh	r1, [r5, #18]
    1456:	7c2a      	ldrb	r2, [r5, #16]
    1458:	4411      	add	r1, r2
    145a:	1c49      	adds	r1, r1, #1
    145c:	4a63      	ldr	r2, [pc, #396]	; (15ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x264>)
    145e:	1843      	adds	r3, r0, r1
    1460:	4290      	cmp	r0, r2
    1462:	d904      	bls.n	146e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe6>
    1464:	f240 6116 	movw	r1, #1558	; 0x616
    1468:	2070      	movs	r0, #112	; 0x70
    146a:	f003 f82b 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    146e:	4860      	ldr	r0, [pc, #384]	; (15f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x268>)
    1470:	4281      	cmp	r1, r0
    1472:	dd04      	ble.n	147e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf6>
    1474:	f240 6117 	movw	r1, #1559	; 0x617
    1478:	2070      	movs	r0, #112	; 0x70
    147a:	f003 f823 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    147e:	485d      	ldr	r0, [pc, #372]	; (15f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x26c>)
    1480:	4281      	cmp	r1, r0
    1482:	da04      	bge.n	148e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x106>
    1484:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    1488:	2070      	movs	r0, #112	; 0x70
    148a:	f003 f81b 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    148e:	485a      	ldr	r0, [pc, #360]	; (15f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x270>)
    1490:	4298      	cmp	r0, r3
    1492:	bfdc      	itt	le
    1494:	f503 03f7 	addle.w	r3, r3, #8093696	; 0x7b8000
    1498:	f1a3 53f8 	suble.w	r3, r3, #520093696	; 0x1f000000
    149c:	dd05      	ble.n	14aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x122>
    149e:	2b00      	cmp	r3, #0
    14a0:	bfbc      	itt	lt
    14a2:	f5a3 03f7 	sublt.w	r3, r3, #8093696	; 0x7b8000
    14a6:	f103 53f8 	addlt.w	r3, r3, #520093696	; 0x1f000000
    14aa:	4618      	mov	r0, r3
    14ac:	f001 ffc2 	bl	3434 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    14b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    14b4:	1a39      	subs	r1, r7, r0
    14b6:	0209      	lsls	r1, r1, #8
    14b8:	17ca      	asrs	r2, r1, #31
    14ba:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    14be:	1209      	asrs	r1, r1, #8
    14c0:	2933      	cmp	r1, #51	; 0x33
    14c2:	bfbc      	itt	lt
    14c4:	3033      	addlt	r0, #51	; 0x33
    14c6:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
    14ca:	9804      	ldr	r0, [sp, #16]
    14cc:	1a38      	subs	r0, r7, r0
    14ce:	0200      	lsls	r0, r0, #8
    14d0:	17c1      	asrs	r1, r0, #31
    14d2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    14d6:	1200      	asrs	r0, r0, #8
    14d8:	d403      	bmi.n	14e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15a>
    14da:	b00b      	add	sp, #44	; 0x2c
    14dc:	2000      	movs	r0, #0
    14de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14e2:	e9d4 1000 	ldrd	r1, r0, [r4]
    14e6:	1a40      	subs	r0, r0, r1
    14e8:	4438      	add	r0, r7
    14ea:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
    14ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    14f2:	e9c4 1000 	strd	r1, r0, [r4]
    14f6:	9803      	ldr	r0, [sp, #12]
    14f8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    14fc:	466f      	mov	r7, sp
    14fe:	f890 5020 	ldrb.w	r5, [r0, #32]
    1502:	2020      	movs	r0, #32
    1504:	f10d 0a04 	add.w	sl, sp, #4
    1508:	f88d 0000 	strb.w	r0, [sp]
    150c:	2d20      	cmp	r5, #32
    150e:	bf1c      	itt	ne
    1510:	4835      	ldrne	r0, [pc, #212]	; (15e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x260>)
    1512:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
    1516:	d024      	beq.n	1562 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1da>
    1518:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    151c:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1520:	6822      	ldr	r2, [r4, #0]
    1522:	68c1      	ldr	r1, [r0, #12]
    1524:	1a51      	subs	r1, r2, r1
    1526:	0209      	lsls	r1, r1, #8
    1528:	17ca      	asrs	r2, r1, #31
    152a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    152e:	3008      	adds	r0, #8
    1530:	1209      	asrs	r1, r1, #8
    1532:	d416      	bmi.n	1562 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1da>
    1534:	8961      	ldrh	r1, [r4, #10]
    1536:	b171      	cbz	r1, 1556 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ce>
    1538:	8941      	ldrh	r1, [r0, #10]
    153a:	b961      	cbnz	r1, 1556 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ce>
    153c:	f000 fcda 	bl	1ef4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a8>
    1540:	f001 ff78 	bl	3434 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1544:	6821      	ldr	r1, [r4, #0]
    1546:	1a08      	subs	r0, r1, r0
    1548:	0200      	lsls	r0, r0, #8
    154a:	17c1      	asrs	r1, r0, #31
    154c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1550:	1200      	asrs	r0, r0, #8
    1552:	2833      	cmp	r0, #51	; 0x33
    1554:	db05      	blt.n	1562 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1da>
    1556:	eb09 0045 	add.w	r0, r9, r5, lsl #1
    155a:	703d      	strb	r5, [r7, #0]
    155c:	7845      	ldrb	r5, [r0, #1]
    155e:	2d20      	cmp	r5, #32
    1560:	d1da      	bne.n	1518 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x190>
    1562:	7838      	ldrb	r0, [r7, #0]
    1564:	f88a 0000 	strb.w	r0, [sl]
    1568:	4627      	mov	r7, r4
    156a:	2d20      	cmp	r5, #32
    156c:	bf1c      	itt	ne
    156e:	481e      	ldrne	r0, [pc, #120]	; (15e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x260>)
    1570:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    1574:	d030      	beq.n	15d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x250>
    1576:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    157a:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
    157e:	6879      	ldr	r1, [r7, #4]
    1580:	f8d9 2008 	ldr.w	r2, [r9, #8]
    1584:	4638      	mov	r0, r7
    1586:	1a51      	subs	r1, r2, r1
    1588:	0209      	lsls	r1, r1, #8
    158a:	17ca      	asrs	r2, r1, #31
    158c:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1590:	f109 0808 	add.w	r8, r9, #8
    1594:	1209      	asrs	r1, r1, #8
    1596:	d412      	bmi.n	15be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x236>
    1598:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    159c:	b1e1      	cbz	r1, 15d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x250>
    159e:	8941      	ldrh	r1, [r0, #10]
    15a0:	b9d1      	cbnz	r1, 15d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x250>
    15a2:	f000 fca7 	bl	1ef4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a8>
    15a6:	f001 ff45 	bl	3434 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    15aa:	f8d8 1000 	ldr.w	r1, [r8]
    15ae:	1a08      	subs	r0, r1, r0
    15b0:	0200      	lsls	r0, r0, #8
    15b2:	17c1      	asrs	r1, r0, #31
    15b4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    15b8:	1200      	asrs	r0, r0, #8
    15ba:	2833      	cmp	r0, #51	; 0x33
    15bc:	da0c      	bge.n	15d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x250>
    15be:	f88a 5000 	strb.w	r5, [sl]
    15c2:	f899 0014 	ldrb.w	r0, [r9, #20]
    15c6:	7b39      	ldrb	r1, [r7, #12]
    15c8:	4288      	cmp	r0, r1
    15ca:	f67f af34 	bls.w	1436 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xae>
    15ce:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    15d2:	7845      	ldrb	r5, [r0, #1]
    15d4:	2d20      	cmp	r5, #32
    15d6:	d1ce      	bne.n	1576 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ee>
    15d8:	b00b      	add	sp, #44	; 0x2c
    15da:	2001      	movs	r0, #1
    15dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15e0:	20000f04 	.word	0x20000f04
    15e4:	20000b84 	.word	0x20000b84
    15e8:	20000e84 	.word	0x20000e84
    15ec:	1e847fff 	.word	0x1e847fff
    15f0:	07a12000 	.word	0x07a12000
    15f4:	f85ee000 	.word	0xf85ee000
    15f8:	1e848000 	.word	0x1e848000
    15fc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1600:	4604      	mov	r4, r0
    1602:	483c      	ldr	r0, [pc, #240]	; (16f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x36c>)
    1604:	460e      	mov	r6, r1
    1606:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    160a:	4f3b      	ldr	r7, [pc, #236]	; (16f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x370>)
    160c:	f890 5020 	ldrb.w	r5, [r0, #32]
    1610:	2020      	movs	r0, #32
    1612:	4698      	mov	r8, r3
    1614:	4692      	mov	sl, r2
    1616:	7010      	strb	r0, [r2, #0]
    1618:	f507 7940 	add.w	r9, r7, #768	; 0x300
    161c:	2d20      	cmp	r5, #32
    161e:	bf18      	it	ne
    1620:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
    1624:	d028      	beq.n	1678 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2f0>
    1626:	bf00      	nop
    1628:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    162c:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    1630:	f100 0108 	add.w	r1, r0, #8
    1634:	68c0      	ldr	r0, [r0, #12]
    1636:	6822      	ldr	r2, [r4, #0]
    1638:	1a10      	subs	r0, r2, r0
    163a:	0200      	lsls	r0, r0, #8
    163c:	17c2      	asrs	r2, r0, #31
    163e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1642:	1200      	asrs	r0, r0, #8
    1644:	d418      	bmi.n	1678 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2f0>
    1646:	8960      	ldrh	r0, [r4, #10]
    1648:	b178      	cbz	r0, 166a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2e2>
    164a:	8948      	ldrh	r0, [r1, #10]
    164c:	b968      	cbnz	r0, 166a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2e2>
    164e:	4608      	mov	r0, r1
    1650:	f000 fc50 	bl	1ef4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a8>
    1654:	f001 feee 	bl	3434 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1658:	6821      	ldr	r1, [r4, #0]
    165a:	1a08      	subs	r0, r1, r0
    165c:	0200      	lsls	r0, r0, #8
    165e:	17c1      	asrs	r1, r0, #31
    1660:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1664:	1200      	asrs	r0, r0, #8
    1666:	2833      	cmp	r0, #51	; 0x33
    1668:	db06      	blt.n	1678 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2f0>
    166a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    166e:	f88a 5000 	strb.w	r5, [sl]
    1672:	7845      	ldrb	r5, [r0, #1]
    1674:	2d20      	cmp	r5, #32
    1676:	d1d7      	bne.n	1628 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a0>
    1678:	f89a 0000 	ldrb.w	r0, [sl]
    167c:	f888 0000 	strb.w	r0, [r8]
    1680:	2d20      	cmp	r5, #32
    1682:	bf18      	it	ne
    1684:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
    1688:	d030      	beq.n	16ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x364>
    168a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    168e:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
    1692:	6861      	ldr	r1, [r4, #4]
    1694:	f8d9 2008 	ldr.w	r2, [r9, #8]
    1698:	4620      	mov	r0, r4
    169a:	1a51      	subs	r1, r2, r1
    169c:	0209      	lsls	r1, r1, #8
    169e:	17ca      	asrs	r2, r1, #31
    16a0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    16a4:	f109 0608 	add.w	r6, r9, #8
    16a8:	1209      	asrs	r1, r1, #8
    16aa:	d410      	bmi.n	16ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x346>
    16ac:	8971      	ldrh	r1, [r6, #10]
    16ae:	b1e9      	cbz	r1, 16ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x364>
    16b0:	8941      	ldrh	r1, [r0, #10]
    16b2:	b9d9      	cbnz	r1, 16ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x364>
    16b4:	f000 fc1e 	bl	1ef4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a8>
    16b8:	f001 febc 	bl	3434 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    16bc:	6831      	ldr	r1, [r6, #0]
    16be:	1a08      	subs	r0, r1, r0
    16c0:	0200      	lsls	r0, r0, #8
    16c2:	17c1      	asrs	r1, r0, #31
    16c4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    16c8:	1200      	asrs	r0, r0, #8
    16ca:	2833      	cmp	r0, #51	; 0x33
    16cc:	da0e      	bge.n	16ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x364>
    16ce:	f888 5000 	strb.w	r5, [r8]
    16d2:	f899 0014 	ldrb.w	r0, [r9, #20]
    16d6:	7b21      	ldrb	r1, [r4, #12]
    16d8:	4288      	cmp	r0, r1
    16da:	d802      	bhi.n	16e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x35a>
    16dc:	2000      	movs	r0, #0
    16de:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    16e2:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    16e6:	7845      	ldrb	r5, [r0, #1]
    16e8:	2d20      	cmp	r5, #32
    16ea:	d1ce      	bne.n	168a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x302>
    16ec:	2001      	movs	r0, #1
    16ee:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    16f2:	0000      	.short	0x0000
    16f4:	20000f04 	.word	0x20000f04
    16f8:	20000b84 	.word	0x20000b84
    16fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1700:	f04f 0800 	mov.w	r8, #0
    1704:	b098      	sub	sp, #96	; 0x60
    1706:	4616      	mov	r6, r2
    1708:	460d      	mov	r5, r1
    170a:	46c3      	mov	fp, r8
    170c:	f002 f90a 	bl	3924 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    1710:	4604      	mov	r4, r0
    1712:	2d01      	cmp	r5, #1
    1714:	bf18      	it	ne
    1716:	2d02      	cmpne	r5, #2
    1718:	d005      	beq.n	1726 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x39e>
    171a:	f640 1193 	movw	r1, #2451	; 0x993
    171e:	f04f 0070 	mov.w	r0, #112	; 0x70
    1722:	f002 fecf 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1726:	49fd      	ldr	r1, [pc, #1012]	; (1b1c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x794>)
    1728:	2001      	movs	r0, #1
    172a:	6008      	str	r0, [r1, #0]
    172c:	49fc      	ldr	r1, [pc, #1008]	; (1b20 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x798>)
    172e:	6889      	ldr	r1, [r1, #8]
    1730:	6008      	str	r0, [r1, #0]
    1732:	2000      	movs	r0, #0
    1734:	900c      	str	r0, [sp, #48]	; 0x30
    1736:	1e40      	subs	r0, r0, #1
    1738:	900e      	str	r0, [sp, #56]	; 0x38
    173a:	49fa      	ldr	r1, [pc, #1000]	; (1b24 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x79c>)
    173c:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    1740:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    1744:	3308      	adds	r3, #8
    1746:	af0f      	add	r7, sp, #60	; 0x3c
    1748:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    174a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    174e:	a80f      	add	r0, sp, #60	; 0x3c
    1750:	f000 fbd0 	bl	1ef4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a8>
    1754:	900d      	str	r0, [sp, #52]	; 0x34
    1756:	48f3      	ldr	r0, [pc, #972]	; (1b24 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x79c>)
    1758:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
    175c:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
    1760:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    1764:	f1b9 0f00 	cmp.w	r9, #0
    1768:	bf14      	ite	ne
    176a:	f04f 0a01 	movne.w	sl, #1
    176e:	f04f 0a00 	moveq.w	sl, #0
    1772:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1774:	9014      	str	r0, [sp, #80]	; 0x50
    1776:	f1ba 0f00 	cmp.w	sl, #0
    177a:	d009      	beq.n	1790 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x408>
    177c:	48ea      	ldr	r0, [pc, #936]	; (1b28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a0>)
    177e:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    1782:	b928      	cbnz	r0, 1790 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x408>
    1784:	f002 fe3a 	bl	43fc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1788:	2800      	cmp	r0, #0
    178a:	bf08      	it	eq
    178c:	2701      	moveq	r7, #1
    178e:	d000      	beq.n	1792 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x40a>
    1790:	2700      	movs	r7, #0
    1792:	48e6      	ldr	r0, [pc, #920]	; (1b2c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a4>)
    1794:	2200      	movs	r2, #0
    1796:	9215      	str	r2, [sp, #84]	; 0x54
    1798:	7800      	ldrb	r0, [r0, #0]
    179a:	4616      	mov	r6, r2
    179c:	2801      	cmp	r0, #1
    179e:	bf18      	it	ne
    17a0:	2803      	cmpne	r0, #3
    17a2:	d140      	bne.n	1826 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x49e>
    17a4:	48e1      	ldr	r0, [pc, #900]	; (1b2c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a4>)
    17a6:	f8b0 8002 	ldrh.w	r8, [r0, #2]
    17aa:	eba8 0009 	sub.w	r0, r8, r9
    17ae:	9015      	str	r0, [sp, #84]	; 0x54
    17b0:	45c8      	cmp	r8, r9
    17b2:	d938      	bls.n	1826 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x49e>
    17b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    17b6:	ea6f 0108 	mvn.w	r1, r8
    17ba:	f8df e374 	ldr.w	lr, [pc, #884]	; 1b30 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a8>
    17be:	1858      	adds	r0, r3, r1
    17c0:	f10d 0c0c 	add.w	ip, sp, #12
    17c4:	aa17      	add	r2, sp, #92	; 0x5c
    17c6:	4573      	cmp	r3, lr
    17c8:	d904      	bls.n	17d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44c>
    17ca:	f240 6116 	movw	r1, #1558	; 0x616
    17ce:	2070      	movs	r0, #112	; 0x70
    17d0:	f002 fe78 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17d4:	4bd7      	ldr	r3, [pc, #860]	; (1b34 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7ac>)
    17d6:	4299      	cmp	r1, r3
    17d8:	dd04      	ble.n	17e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x45c>
    17da:	f240 6117 	movw	r1, #1559	; 0x617
    17de:	2070      	movs	r0, #112	; 0x70
    17e0:	f002 fe70 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17e4:	4bd4      	ldr	r3, [pc, #848]	; (1b38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7b0>)
    17e6:	4299      	cmp	r1, r3
    17e8:	da04      	bge.n	17f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x46c>
    17ea:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    17ee:	2070      	movs	r0, #112	; 0x70
    17f0:	f002 fe68 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17f4:	49d1      	ldr	r1, [pc, #836]	; (1b3c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7b4>)
    17f6:	4281      	cmp	r1, r0
    17f8:	bfdc      	itt	le
    17fa:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    17fe:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1802:	dd05      	ble.n	1810 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x488>
    1804:	2800      	cmp	r0, #0
    1806:	bfbc      	itt	lt
    1808:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    180c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1810:	4661      	mov	r1, ip
    1812:	f001 fe2b 	bl	346c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1816:	9803      	ldr	r0, [sp, #12]
    1818:	990f      	ldr	r1, [sp, #60]	; 0x3c
    181a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    181e:	9003      	str	r0, [sp, #12]
    1820:	1a08      	subs	r0, r1, r0
    1822:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1826:	2f00      	cmp	r7, #0
    1828:	bf18      	it	ne
    182a:	2632      	movne	r6, #50	; 0x32
    182c:	d104      	bne.n	1838 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b0>
    182e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1832:	2800      	cmp	r0, #0
    1834:	bf18      	it	ne
    1836:	2602      	movne	r6, #2
    1838:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    183c:	d008      	beq.n	1850 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c8>
    183e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1840:	1b00      	subs	r0, r0, r4
    1842:	0200      	lsls	r0, r0, #8
    1844:	17c1      	asrs	r1, r0, #31
    1846:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    184a:	1200      	asrs	r0, r0, #8
    184c:	2801      	cmp	r0, #1
    184e:	da02      	bge.n	1856 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4ce>
    1850:	2104      	movs	r1, #4
    1852:	9818      	ldr	r0, [sp, #96]	; 0x60
    1854:	e00b      	b.n	186e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e6>
    1856:	b147      	cbz	r7, 186a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e2>
    1858:	48b3      	ldr	r0, [pc, #716]	; (1b28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a0>)
    185a:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    185e:	b120      	cbz	r0, 186a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e2>
    1860:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1864:	1c06      	adds	r6, r0, #0
    1866:	bf18      	it	ne
    1868:	2602      	movne	r6, #2
    186a:	4620      	mov	r0, r4
    186c:	2101      	movs	r1, #1
    186e:	f1b9 0f00 	cmp.w	r9, #0
    1872:	d002      	beq.n	187a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f2>
    1874:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1876:	2b1e      	cmp	r3, #30
    1878:	da02      	bge.n	1880 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f8>
    187a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
    187e:	b113      	cbz	r3, 1886 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4fe>
    1880:	f04f 0b01 	mov.w	fp, #1
    1884:	1e49      	subs	r1, r1, #1
    1886:	198b      	adds	r3, r1, r6
    1888:	49a8      	ldr	r1, [pc, #672]	; (1b2c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a4>)
    188a:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
    188e:	7809      	ldrb	r1, [r1, #0]
    1890:	9115      	str	r1, [sp, #84]	; 0x54
    1892:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1894:	1a89      	subs	r1, r1, r2
    1896:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
    189a:	ebac 0100 	sub.w	r1, ip, r0
    189e:	0209      	lsls	r1, r1, #8
    18a0:	17ce      	asrs	r6, r1, #31
    18a2:	eb01 6116 	add.w	r1, r1, r6, lsr #24
    18a6:	1209      	asrs	r1, r1, #8
    18a8:	4299      	cmp	r1, r3
    18aa:	db18      	blt.n	18de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x556>
    18ac:	2a00      	cmp	r2, #0
    18ae:	bf18      	it	ne
    18b0:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
    18b4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    18b6:	9705      	str	r7, [sp, #20]
    18b8:	2700      	movs	r7, #0
    18ba:	f001 ff2d 	bl	3718 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    18be:	1a30      	subs	r0, r6, r0
    18c0:	0200      	lsls	r0, r0, #8
    18c2:	17c1      	asrs	r1, r0, #31
    18c4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    18c8:	1200      	asrs	r0, r0, #8
    18ca:	283e      	cmp	r0, #62	; 0x3e
    18cc:	da3f      	bge.n	194e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c6>
    18ce:	2d01      	cmp	r5, #1
    18d0:	d020      	beq.n	1914 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58c>
    18d2:	1e70      	subs	r0, r6, #1
    18d4:	9905      	ldr	r1, [sp, #20]
    18d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    18da:	b319      	cbz	r1, 1924 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x59c>
    18dc:	e02d      	b.n	193a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5b2>
    18de:	b182      	cbz	r2, 1902 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x57a>
    18e0:	f1be 0f00 	cmp.w	lr, #0
    18e4:	bf04      	itt	eq
    18e6:	9915      	ldreq	r1, [sp, #84]	; 0x54
    18e8:	2903      	cmpeq	r1, #3
    18ea:	d00a      	beq.n	1902 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x57a>
    18ec:	b927      	cbnz	r7, 18f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x570>
    18ee:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    18f2:	2900      	cmp	r1, #0
    18f4:	bf18      	it	ne
    18f6:	1e9b      	subne	r3, r3, #2
    18f8:	2200      	movs	r2, #0
    18fa:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
    18fe:	4690      	mov	r8, r2
    1900:	e7c7      	b.n	1892 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50a>
    1902:	bb07      	cbnz	r7, 1946 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5be>
    1904:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    1908:	b1e9      	cbz	r1, 1946 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5be>
    190a:	2100      	movs	r1, #0
    190c:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    1910:	1e9b      	subs	r3, r3, #2
    1912:	e7be      	b.n	1892 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50a>
    1914:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1918:	d120      	bne.n	195c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5d4>
    191a:	f640 110c 	movw	r1, #2316	; 0x90c
    191e:	2070      	movs	r0, #112	; 0x70
    1920:	f002 fdd0 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1924:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1928:	d007      	beq.n	193a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5b2>
    192a:	1a21      	subs	r1, r4, r0
    192c:	0209      	lsls	r1, r1, #8
    192e:	17ca      	asrs	r2, r1, #31
    1930:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1934:	1209      	asrs	r1, r1, #8
    1936:	2904      	cmp	r1, #4
    1938:	dd03      	ble.n	1942 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5ba>
    193a:	4604      	mov	r4, r0
    193c:	f001 fef2 	bl	3724 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1940:	e00c      	b.n	195c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5d4>
    1942:	2900      	cmp	r1, #0
    1944:	dd0a      	ble.n	195c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5d4>
    1946:	b01b      	add	sp, #108	; 0x6c
    1948:	2000      	movs	r0, #0
    194a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    194e:	1e70      	subs	r0, r6, #1
    1950:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    1954:	4620      	mov	r0, r4
    1956:	f001 fee5 	bl	3724 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    195a:	4657      	mov	r7, sl
    195c:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1960:	d028      	beq.n	19b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x62c>
    1962:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1964:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    1968:	1b00      	subs	r0, r0, r4
    196a:	f08b 0301 	eor.w	r3, fp, #1
    196e:	4a74      	ldr	r2, [pc, #464]	; (1b40 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7b8>)
    1970:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1974:	ebac 0c04 	sub.w	ip, ip, r4
    1978:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    197c:	4283      	cmp	r3, r0
    197e:	bf98      	it	ls
    1980:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    1984:	d2df      	bcs.n	1946 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5be>
    1986:	4562      	cmp	r2, ip
    1988:	d3dd      	bcc.n	1946 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5be>
    198a:	4620      	mov	r0, r4
    198c:	f00a fce9 	bl	c362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1990:	4967      	ldr	r1, [pc, #412]	; (1b30 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a8>)
    1992:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1994:	1c4b      	adds	r3, r1, #1
    1996:	1a16      	subs	r6, r2, r0
    1998:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
    199c:	bf24      	itt	cs
    199e:	eba0 0c02 	subcs.w	ip, r0, r2
    19a2:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    19a6:	d310      	bcc.n	19ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x642>
    19a8:	42b1      	cmp	r1, r6
    19aa:	d208      	bcs.n	19be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x636>
    19ac:	1a08      	subs	r0, r1, r0
    19ae:	4410      	add	r0, r2
    19b0:	1c46      	adds	r6, r0, #1
    19b2:	e00a      	b.n	19ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x642>
    19b4:	f640 212b 	movw	r1, #2603	; 0xa2b
    19b8:	2070      	movs	r0, #112	; 0x70
    19ba:	f002 fd83 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19be:	4561      	cmp	r1, ip
    19c0:	d22c      	bcs.n	1a1c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x694>
    19c2:	1a89      	subs	r1, r1, r2
    19c4:	4408      	add	r0, r1
    19c6:	1c40      	adds	r0, r0, #1
    19c8:	4246      	negs	r6, r0
    19ca:	4857      	ldr	r0, [pc, #348]	; (1b28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a0>)
    19cc:	7f80      	ldrb	r0, [r0, #30]
    19ce:	b350      	cbz	r0, 1a26 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x69e>
    19d0:	4628      	mov	r0, r5
    19d2:	4645      	mov	r5, r8
    19d4:	f04f 0b00 	mov.w	fp, #0
    19d8:	46d8      	mov	r8, fp
    19da:	2801      	cmp	r0, #1
    19dc:	d005      	beq.n	19ea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x662>
    19de:	2002      	movs	r0, #2
    19e0:	f002 f8e8 	bl	3bb4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    19e4:	2001      	movs	r0, #1
    19e6:	f002 f8e5 	bl	3bb4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    19ea:	45a9      	cmp	r9, r5
    19ec:	d22c      	bcs.n	1a48 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c0>
    19ee:	eba6 0105 	sub.w	r1, r6, r5
    19f2:	f04f 0301 	mov.w	r3, #1
    19f6:	f04f 0203 	mov.w	r2, #3
    19fa:	f04f 0002 	mov.w	r0, #2
    19fe:	f002 f811 	bl	3a24 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1a02:	2800      	cmp	r0, #0
    1a04:	bf08      	it	eq
    1a06:	f04f 0801 	moveq.w	r8, #1
    1a0a:	f1b9 0f00 	cmp.w	r9, #0
    1a0e:	d035      	beq.n	1a7c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6f4>
    1a10:	2301      	movs	r3, #1
    1a12:	eba6 0109 	sub.w	r1, r6, r9
    1a16:	2203      	movs	r2, #3
    1a18:	4618      	mov	r0, r3
    1a1a:	e023      	b.n	1a64 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6dc>
    1a1c:	f640 310b 	movw	r1, #2827	; 0xb0b
    1a20:	2070      	movs	r0, #112	; 0x70
    1a22:	f002 fd4f 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a26:	45c1      	cmp	r9, r8
    1a28:	bf34      	ite	cc
    1a2a:	4640      	movcc	r0, r8
    1a2c:	4648      	movcs	r0, r9
    1a2e:	f1bb 0f00 	cmp.w	fp, #0
    1a32:	bf14      	ite	ne
    1a34:	2100      	movne	r1, #0
    1a36:	211e      	moveq	r1, #30
    1a38:	4408      	add	r0, r1
    1a3a:	42b0      	cmp	r0, r6
    1a3c:	dbc8      	blt.n	19d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x648>
    1a3e:	f640 213e 	movw	r1, #2622	; 0xa3e
    1a42:	2070      	movs	r0, #112	; 0x70
    1a44:	f002 fd3e 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a48:	d910      	bls.n	1a6c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6e4>
    1a4a:	2301      	movs	r3, #1
    1a4c:	eba6 0109 	sub.w	r1, r6, r9
    1a50:	2203      	movs	r2, #3
    1a52:	4618      	mov	r0, r3
    1a54:	f001 ffe6 	bl	3a24 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1a58:	b328      	cbz	r0, 1aa6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x71e>
    1a5a:	b17d      	cbz	r5, 1a7c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6f4>
    1a5c:	1b71      	subs	r1, r6, r5
    1a5e:	2301      	movs	r3, #1
    1a60:	2203      	movs	r2, #3
    1a62:	2002      	movs	r0, #2
    1a64:	f001 ffde 	bl	3a24 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1a68:	b1e8      	cbz	r0, 1aa6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x71e>
    1a6a:	e007      	b.n	1a7c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6f4>
    1a6c:	ea55 0009 	orrs.w	r0, r5, r9
    1a70:	d004      	beq.n	1a7c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6f4>
    1a72:	f640 1176 	movw	r1, #2422	; 0x976
    1a76:	2070      	movs	r0, #112	; 0x70
    1a78:	f002 fd24 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a7c:	2301      	movs	r3, #1
    1a7e:	2203      	movs	r2, #3
    1a80:	4631      	mov	r1, r6
    1a82:	2000      	movs	r0, #0
    1a84:	f001 ffce 	bl	3a24 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1a88:	b168      	cbz	r0, 1aa6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x71e>
    1a8a:	2501      	movs	r5, #1
    1a8c:	f1b8 0f00 	cmp.w	r8, #0
    1a90:	d003      	beq.n	1a9a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x712>
    1a92:	9814      	ldr	r0, [sp, #80]	; 0x50
    1a94:	900f      	str	r0, [sp, #60]	; 0x3c
    1a96:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
    1a9a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1b44 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7bc>
    1a9e:	f1ba 0f00 	cmp.w	sl, #0
    1aa2:	d10e      	bne.n	1ac2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x73a>
    1aa4:	e009      	b.n	1aba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x732>
    1aa6:	2002      	movs	r0, #2
    1aa8:	f002 f884 	bl	3bb4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1aac:	2001      	movs	r0, #1
    1aae:	f002 f881 	bl	3bb4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1ab2:	b01b      	add	sp, #108	; 0x6c
    1ab4:	2000      	movs	r0, #0
    1ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1aba:	481b      	ldr	r0, [pc, #108]	; (1b28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a0>)
    1abc:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1ac0:	b100      	cbz	r0, 1ac4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x73c>
    1ac2:	b34f      	cbz	r7, 1b18 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x790>
    1ac4:	f8df a060 	ldr.w	sl, [pc, #96]	; 1b28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a0>
    1ac8:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    1acc:	b118      	cbz	r0, 1ad6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74e>
    1ace:	f002 fb3f 	bl	4150 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1ad2:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
    1ad6:	b307      	cbz	r7, 1b1a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x792>
    1ad8:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    1adc:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1ae0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1ae4:	f8c8 0000 	str.w	r0, [r8]
    1ae8:	2300      	movs	r3, #0
    1aea:	2203      	movs	r2, #3
    1aec:	2005      	movs	r0, #5
    1aee:	f001 ff99 	bl	3a24 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1af2:	b368      	cbz	r0, 1b50 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7c8>
    1af4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    1af8:	2005      	movs	r0, #5
    1afa:	f002 f921 	bl	3d40 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    1afe:	4912      	ldr	r1, [pc, #72]	; (1b48 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7c0>)
    1b00:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    1b04:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
    1b08:	4910      	ldr	r1, [pc, #64]	; (1b4c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7c4>)
    1b0a:	12e0      	asrs	r0, r4, #11
    1b0c:	6008      	str	r0, [r1, #0]
    1b0e:	4c06      	ldr	r4, [pc, #24]	; (1b28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a0>)
    1b10:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1b14:	b3f0      	cbz	r0, 1b94 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80c>
    1b16:	e05b      	b.n	1bd0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x848>
    1b18:	e01b      	b.n	1b52 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7ca>
    1b1a:	e01f      	b.n	1b5c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7d4>
    1b1c:	40000508 	.word	0x40000508
    1b20:	20000010 	.word	0x20000010
    1b24:	20000b84 	.word	0x20000b84
    1b28:	20000f04 	.word	0x20000f04
    1b2c:	20000012 	.word	0x20000012
    1b30:	1e847fff 	.word	0x1e847fff
    1b34:	07a12000 	.word	0x07a12000
    1b38:	f85ee000 	.word	0xf85ee000
    1b3c:	1e848000 	.word	0x1e848000
    1b40:	003fffff 	.word	0x003fffff
    1b44:	4001f508 	.word	0x4001f508
    1b48:	4001f098 	.word	0x4001f098
    1b4c:	4001f504 	.word	0x4001f504
    1b50:	e035      	b.n	1bbe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x836>
    1b52:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1c0c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x884>
    1b56:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    1b5a:	b358      	cbz	r0, 1bb4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x82c>
    1b5c:	4c2b      	ldr	r4, [pc, #172]	; (1c0c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x884>)
    1b5e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1b62:	b150      	cbz	r0, 1b7a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7f2>
    1b64:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1b68:	f8c8 0000 	str.w	r0, [r8]
    1b6c:	2005      	movs	r0, #5
    1b6e:	f002 f821 	bl	3bb4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1b72:	f002 fb55 	bl	4220 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1b76:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
    1b7a:	ac0c      	add	r4, sp, #48	; 0x30
    1b7c:	4824      	ldr	r0, [pc, #144]	; (1c10 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x888>)
    1b7e:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1b82:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
    1b86:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
    1b8a:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
    1b8e:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
    1b92:	e000      	b.n	1b96 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80e>
    1b94:	e018      	b.n	1bc8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x840>
    1b96:	ac10      	add	r4, sp, #64	; 0x40
    1b98:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1b9c:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
    1ba0:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
    1ba4:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
    1ba8:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
    1bac:	b01b      	add	sp, #108	; 0x6c
    1bae:	2001      	movs	r0, #1
    1bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bb4:	f002 fae8 	bl	4188 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1bb8:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
    1bbc:	e78b      	b.n	1ad6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74e>
    1bbe:	f240 3151 	movw	r1, #849	; 0x351
    1bc2:	2070      	movs	r0, #112	; 0x70
    1bc4:	f002 fc7e 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1bc8:	f002 fb1c 	bl	4204 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
    1bcc:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    1bd0:	eba6 0009 	sub.w	r0, r6, r9
    1bd4:	f1a0 0119 	sub.w	r1, r0, #25
    1bd8:	2900      	cmp	r1, #0
    1bda:	dc04      	bgt.n	1be6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x85e>
    1bdc:	f640 2168 	movw	r1, #2664	; 0xa68
    1be0:	2070      	movs	r0, #112	; 0x70
    1be2:	f002 fc6f 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1be6:	2203      	movs	r2, #3
    1be8:	2301      	movs	r3, #1
    1bea:	4610      	mov	r0, r2
    1bec:	f001 ff1a 	bl	3a24 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1bf0:	b138      	cbz	r0, 1c02 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x87a>
    1bf2:	4808      	ldr	r0, [pc, #32]	; (1c14 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x88c>)
    1bf4:	6880      	ldr	r0, [r0, #8]
    1bf6:	f8c0 b000 	str.w	fp, [r0]
    1bfa:	4807      	ldr	r0, [pc, #28]	; (1c18 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x890>)
    1bfc:	f8c0 b000 	str.w	fp, [r0]
    1c00:	e7bb      	b.n	1b7a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7f2>
    1c02:	f640 2173 	movw	r1, #2675	; 0xa73
    1c06:	2070      	movs	r0, #112	; 0x70
    1c08:	f002 fc5c 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c0c:	20000f04 	.word	0x20000f04
    1c10:	20000b84 	.word	0x20000b84
    1c14:	20000010 	.word	0x20000010
    1c18:	40000508 	.word	0x40000508
    1c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1c20:	4606      	mov	r6, r0
    1c22:	b083      	sub	sp, #12
    1c24:	7808      	ldrb	r0, [r1, #0]
    1c26:	7390      	strb	r0, [r2, #14]
    1c28:	7acf      	ldrb	r7, [r1, #11]
    1c2a:	7357      	strb	r7, [r2, #13]
    1c2c:	7a88      	ldrb	r0, [r1, #10]
    1c2e:	7310      	strb	r0, [r2, #12]
    1c30:	8908      	ldrh	r0, [r1, #8]
    1c32:	4614      	mov	r4, r2
    1c34:	8150      	strh	r0, [r2, #10]
    1c36:	460d      	mov	r5, r1
    1c38:	780a      	ldrb	r2, [r1, #0]
    1c3a:	495f      	ldr	r1, [pc, #380]	; (1db8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6c>)
    1c3c:	4699      	mov	r9, r3
    1c3e:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    1c42:	424b      	negs	r3, r1
    1c44:	f1ac 0801 	sub.w	r8, ip, #1
    1c48:	b15a      	cbz	r2, 1c62 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8da>
    1c4a:	43c0      	mvns	r0, r0
    1c4c:	f8d5 8004 	ldr.w	r8, [r5, #4]
    1c50:	f104 0208 	add.w	r2, r4, #8
    1c54:	4288      	cmp	r0, r1
    1c56:	dd3d      	ble.n	1cd4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x94c>
    1c58:	f240 6117 	movw	r1, #1559	; 0x617
    1c5c:	2070      	movs	r0, #112	; 0x70
    1c5e:	f002 fc31 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c62:	68ee      	ldr	r6, [r5, #12]
    1c64:	686d      	ldr	r5, [r5, #4]
    1c66:	ea6f 0900 	mvn.w	r9, r0
    1c6a:	f104 0208 	add.w	r2, r4, #8
    1c6e:	eb06 0009 	add.w	r0, r6, r9
    1c72:	4546      	cmp	r6, r8
    1c74:	d904      	bls.n	1c80 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8f8>
    1c76:	f240 6116 	movw	r1, #1558	; 0x616
    1c7a:	2070      	movs	r0, #112	; 0x70
    1c7c:	f002 fc22 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c80:	4589      	cmp	r9, r1
    1c82:	dce9      	bgt.n	1c58 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8d0>
    1c84:	4599      	cmp	r9, r3
    1c86:	db28      	blt.n	1cda <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x952>
    1c88:	4584      	cmp	ip, r0
    1c8a:	bfdc      	itt	le
    1c8c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1c90:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1c94:	dd05      	ble.n	1ca2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x91a>
    1c96:	2800      	cmp	r0, #0
    1c98:	bfbc      	itt	lt
    1c9a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1c9e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1ca2:	4621      	mov	r1, r4
    1ca4:	f001 fbe2 	bl	346c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1ca8:	6820      	ldr	r0, [r4, #0]
    1caa:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1cae:	1970      	adds	r0, r6, r5
    1cb0:	1c40      	adds	r0, r0, #1
    1cb2:	6021      	str	r1, [r4, #0]
    1cb4:	2f00      	cmp	r7, #0
    1cb6:	bf08      	it	eq
    1cb8:	307a      	addeq	r0, #122	; 0x7a
    1cba:	d003      	beq.n	1cc4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x93c>
    1cbc:	2f01      	cmp	r7, #1
    1cbe:	bf08      	it	eq
    1cc0:	3044      	addeq	r0, #68	; 0x44
    1cc2:	d12d      	bne.n	1d20 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x998>
    1cc4:	f001 fbb6 	bl	3434 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1cc8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1ccc:	6060      	str	r0, [r4, #4]
    1cce:	b003      	add	sp, #12
    1cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1cd4:	4601      	mov	r1, r0
    1cd6:	4298      	cmp	r0, r3
    1cd8:	da04      	bge.n	1ce4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x95c>
    1cda:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    1cde:	2070      	movs	r0, #112	; 0x70
    1ce0:	f002 fbf0 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ce4:	4584      	cmp	ip, r0
    1ce6:	bfdc      	itt	le
    1ce8:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    1cec:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    1cf0:	dd05      	ble.n	1cfe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x976>
    1cf2:	2800      	cmp	r0, #0
    1cf4:	bfbc      	itt	lt
    1cf6:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    1cfa:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    1cfe:	4621      	mov	r1, r4
    1d00:	f001 fbb4 	bl	346c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1d04:	6820      	ldr	r0, [r4, #0]
    1d06:	2f00      	cmp	r7, #0
    1d08:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1d0c:	f108 0001 	add.w	r0, r8, #1
    1d10:	6021      	str	r1, [r4, #0]
    1d12:	bf08      	it	eq
    1d14:	307a      	addeq	r0, #122	; 0x7a
    1d16:	d008      	beq.n	1d2a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9a2>
    1d18:	2f01      	cmp	r7, #1
    1d1a:	bf08      	it	eq
    1d1c:	3044      	addeq	r0, #68	; 0x44
    1d1e:	d004      	beq.n	1d2a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9a2>
    1d20:	f240 61be 	movw	r1, #1726	; 0x6be
    1d24:	2070      	movs	r0, #112	; 0x70
    1d26:	f002 fbcd 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d2a:	f001 fb83 	bl	3434 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1d2e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1d32:	6061      	str	r1, [r4, #4]
    1d34:	8960      	ldrh	r0, [r4, #10]
    1d36:	aa01      	add	r2, sp, #4
    1d38:	4669      	mov	r1, sp
    1d3a:	f001 fb97 	bl	346c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1d3e:	481f      	ldr	r0, [pc, #124]	; (1dbc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x70>)
    1d40:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    1d44:	2920      	cmp	r1, #32
    1d46:	d023      	beq.n	1d90 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x44>
    1d48:	6900      	ldr	r0, [r0, #16]
    1d4a:	1d40      	adds	r0, r0, #5
    1d4c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d50:	e9d4 2100 	ldrd	r2, r1, [r4]
    1d54:	1a89      	subs	r1, r1, r2
    1d56:	6020      	str	r0, [r4, #0]
    1d58:	4408      	add	r0, r1
    1d5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d5e:	6060      	str	r0, [r4, #4]
    1d60:	464b      	mov	r3, r9
    1d62:	4632      	mov	r2, r6
    1d64:	4621      	mov	r1, r4
    1d66:	68e8      	ldr	r0, [r5, #12]
    1d68:	f7ff fad2 	bl	1310 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    1d6c:	2800      	cmp	r0, #0
    1d6e:	bf1c      	itt	ne
    1d70:	b003      	addne	sp, #12
    1d72:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1d76:	e9d4 1000 	ldrd	r1, r0, [r4]
    1d7a:	1a40      	subs	r0, r0, r1
    1d7c:	4430      	add	r0, r6
    1d7e:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    1d82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d86:	e9c4 1000 	strd	r1, r0, [r4]
    1d8a:	b003      	add	sp, #12
    1d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1d90:	8960      	ldrh	r0, [r4, #10]
    1d92:	f106 0709 	add.w	r7, r6, #9
    1d96:	b120      	cbz	r0, 1da2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x56>
    1d98:	f002 fb30 	bl	43fc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1d9c:	2800      	cmp	r0, #0
    1d9e:	bf08      	it	eq
    1da0:	3732      	addeq	r7, #50	; 0x32
    1da2:	4807      	ldr	r0, [pc, #28]	; (1dc0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x74>)
    1da4:	7841      	ldrb	r1, [r0, #1]
    1da6:	9800      	ldr	r0, [sp, #0]
    1da8:	4281      	cmp	r1, r0
    1daa:	bf84      	itt	hi
    1dac:	1a08      	subhi	r0, r1, r0
    1dae:	4407      	addhi	r7, r0
    1db0:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    1db4:	e7cc      	b.n	1d50 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4>
    1db6:	0000      	.short	0x0000
    1db8:	07a12000 	.word	0x07a12000
    1dbc:	20000f04 	.word	0x20000f04
    1dc0:	20000012 	.word	0x20000012
    1dc4:	b510      	push	{r4, lr}
    1dc6:	4c15      	ldr	r4, [pc, #84]	; (1e1c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd0>)
    1dc8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1dcc:	2820      	cmp	r0, #32
    1dce:	bf18      	it	ne
    1dd0:	bd10      	popne	{r4, pc}
    1dd2:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1dd6:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    1dda:	f890 1020 	ldrb.w	r1, [r0, #32]
    1dde:	2920      	cmp	r1, #32
    1de0:	d017      	beq.n	1e12 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc6>
    1de2:	f8df c03c 	ldr.w	ip, [pc, #60]	; 1e20 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd4>
    1de6:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    1dea:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    1dee:	785b      	ldrb	r3, [r3, #1]
    1df0:	f880 3020 	strb.w	r3, [r0, #32]
    1df4:	2301      	movs	r3, #1
    1df6:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    1dfa:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    1dfe:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    1e02:	2002      	movs	r0, #2
    1e04:	f000 f8b0 	bl	1f68 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21c>
    1e08:	2000      	movs	r0, #0
    1e0a:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    1e0e:	77a0      	strb	r0, [r4, #30]
    1e10:	bd10      	pop	{r4, pc}
    1e12:	f240 319e 	movw	r1, #926	; 0x39e
    1e16:	2070      	movs	r0, #112	; 0x70
    1e18:	f002 fb54 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e1c:	20000f04 	.word	0x20000f04
    1e20:	20000e84 	.word	0x20000e84
    1e24:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1e28:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1ee4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x198>
    1e2c:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    1e30:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1e34:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1e38:	2c20      	cmp	r4, #32
    1e3a:	bf08      	it	eq
    1e3c:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1e40:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 1ee8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x19c>
    1e44:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 1eec <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a0>
    1e48:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    1e4c:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    1e50:	2607      	movs	r6, #7
    1e52:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    1e56:	2801      	cmp	r0, #1
    1e58:	d00e      	beq.n	1e78 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12c>
    1e5a:	2804      	cmp	r0, #4
    1e5c:	bf08      	it	eq
    1e5e:	2602      	moveq	r6, #2
    1e60:	d00a      	beq.n	1e78 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12c>
    1e62:	2805      	cmp	r0, #5
    1e64:	bf0c      	ite	eq
    1e66:	2603      	moveq	r6, #3
    1e68:	2806      	cmpne	r0, #6
    1e6a:	d005      	beq.n	1e78 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12c>
    1e6c:	f640 01d8 	movw	r1, #2264	; 0x8d8
    1e70:	f04f 0070 	mov.w	r0, #112	; 0x70
    1e74:	f002 fb26 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e78:	f1bb 0f00 	cmp.w	fp, #0
    1e7c:	bf18      	it	ne
    1e7e:	f3af 8000 	nopne.w
    1e82:	f3ef 8010 	mrs	r0, PRIMASK
    1e86:	b672      	cpsid	i
    1e88:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1e8c:	784a      	ldrb	r2, [r1, #1]
    1e8e:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    1e92:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    1e96:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1e9a:	42a2      	cmp	r2, r4
    1e9c:	bf04      	itt	eq
    1e9e:	2220      	moveq	r2, #32
    1ea0:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1ea4:	b1b8      	cbz	r0, 1ed6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18a>
    1ea6:	462a      	mov	r2, r5
    1ea8:	4621      	mov	r1, r4
    1eaa:	2001      	movs	r0, #1
    1eac:	f000 f85c 	bl	1f68 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21c>
    1eb0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1eb4:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    1eb8:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    1ebc:	6840      	ldr	r0, [r0, #4]
    1ebe:	4631      	mov	r1, r6
    1ec0:	4790      	blx	r2
    1ec2:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    1ec6:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1eca:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1ece:	2c20      	cmp	r4, #32
    1ed0:	d1bc      	bne.n	1e4c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x100>
    1ed2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1ed6:	4806      	ldr	r0, [pc, #24]	; (1ef0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a4>)
    1ed8:	2800      	cmp	r0, #0
    1eda:	bf18      	it	ne
    1edc:	f3af 8000 	nopne.w
    1ee0:	b662      	cpsie	i
    1ee2:	e7e0      	b.n	1ea6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15a>
    1ee4:	20000f04 	.word	0x20000f04
    1ee8:	00000000 	.word	0x00000000
    1eec:	20000e84 	.word	0x20000e84
    1ef0:	00000000 	.word	0x00000000
    1ef4:	b510      	push	{r4, lr}
    1ef6:	4604      	mov	r4, r0
    1ef8:	6800      	ldr	r0, [r0, #0]
    1efa:	f00a fa32 	bl	c362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1efe:	4602      	mov	r2, r0
    1f00:	8960      	ldrh	r0, [r4, #10]
    1f02:	7a21      	ldrb	r1, [r4, #8]
    1f04:	4b14      	ldr	r3, [pc, #80]	; (1f58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20c>)
    1f06:	4408      	add	r0, r1
    1f08:	1c41      	adds	r1, r0, #1
    1f0a:	1850      	adds	r0, r2, r1
    1f0c:	429a      	cmp	r2, r3
    1f0e:	d904      	bls.n	1f1a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ce>
    1f10:	f240 6116 	movw	r1, #1558	; 0x616
    1f14:	2070      	movs	r0, #112	; 0x70
    1f16:	f002 fad5 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f1a:	4a10      	ldr	r2, [pc, #64]	; (1f5c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x210>)
    1f1c:	4291      	cmp	r1, r2
    1f1e:	dd04      	ble.n	1f2a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1de>
    1f20:	f240 6117 	movw	r1, #1559	; 0x617
    1f24:	2070      	movs	r0, #112	; 0x70
    1f26:	f002 facd 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f2a:	4a0d      	ldr	r2, [pc, #52]	; (1f60 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x214>)
    1f2c:	4291      	cmp	r1, r2
    1f2e:	da04      	bge.n	1f3a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ee>
    1f30:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    1f34:	2070      	movs	r0, #112	; 0x70
    1f36:	f002 fac5 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f3a:	490a      	ldr	r1, [pc, #40]	; (1f64 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x218>)
    1f3c:	4281      	cmp	r1, r0
    1f3e:	bfde      	ittt	le
    1f40:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1f44:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1f48:	bd10      	pople	{r4, pc}
    1f4a:	2800      	cmp	r0, #0
    1f4c:	bfbc      	itt	lt
    1f4e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1f52:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1f56:	bd10      	pop	{r4, pc}
    1f58:	1e847fff 	.word	0x1e847fff
    1f5c:	07a12000 	.word	0x07a12000
    1f60:	f85ee000 	.word	0xf85ee000
    1f64:	1e848000 	.word	0x1e848000
    1f68:	f8df c054 	ldr.w	ip, [pc, #84]	; 1fc0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x274>
    1f6c:	b510      	push	{r4, lr}
    1f6e:	2300      	movs	r3, #0
    1f70:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1f74:	2807      	cmp	r0, #7
    1f76:	d21e      	bcs.n	1fb6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26a>
    1f78:	e8df f000 	tbb	[pc, r0]
    1f7c:	05050505 	.word	0x05050505
    1f80:	00040404 	.word	0x00040404
    1f84:	2301      	movs	r3, #1
    1f86:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1f8a:	2b00      	cmp	r3, #0
    1f8c:	bf08      	it	eq
    1f8e:	bd10      	popeq	{r4, pc}
    1f90:	480c      	ldr	r0, [pc, #48]	; (1fc4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x278>)
    1f92:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    1f96:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    1f9a:	2820      	cmp	r0, #32
    1f9c:	bf0e      	itee	eq
    1f9e:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1fa2:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    1fa6:	7041      	strbne	r1, [r0, #1]
    1fa8:	2020      	movs	r0, #32
    1faa:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1fae:	7058      	strb	r0, [r3, #1]
    1fb0:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1fb4:	bd10      	pop	{r4, pc}
    1fb6:	f240 2167 	movw	r1, #615	; 0x267
    1fba:	2070      	movs	r0, #112	; 0x70
    1fbc:	f002 fa82 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fc0:	20000e84 	.word	0x20000e84
    1fc4:	20000f04 	.word	0x20000f04
    1fc8:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fcc:	b083      	sub	sp, #12
    1fce:	485c      	ldr	r0, [pc, #368]	; (2140 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3f4>)
    1fd0:	9904      	ldr	r1, [sp, #16]
    1fd2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1fd6:	9001      	str	r0, [sp, #4]
    1fd8:	f890 4020 	ldrb.w	r4, [r0, #32]
    1fdc:	9803      	ldr	r0, [sp, #12]
    1fde:	4625      	mov	r5, r4
    1fe0:	2801      	cmp	r0, #1
    1fe2:	bf18      	it	ne
    1fe4:	2802      	cmpne	r0, #2
    1fe6:	d005      	beq.n	1ff4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a8>
    1fe8:	f640 21af 	movw	r1, #2735	; 0xaaf
    1fec:	f04f 0070 	mov.w	r0, #112	; 0x70
    1ff0:	f002 fa68 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ff4:	2700      	movs	r7, #0
    1ff6:	2d20      	cmp	r5, #32
    1ff8:	d04a      	beq.n	2090 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x344>
    1ffa:	4851      	ldr	r0, [pc, #324]	; (2140 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3f4>)
    1ffc:	9100      	str	r1, [sp, #0]
    1ffe:	2600      	movs	r6, #0
    2000:	7f80      	ldrb	r0, [r0, #30]
    2002:	2800      	cmp	r0, #0
    2004:	bf08      	it	eq
    2006:	2602      	moveq	r6, #2
    2008:	f001 fb86 	bl	3718 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    200c:	f8df a138 	ldr.w	sl, [pc, #312]	; 2148 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3fc>
    2010:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2014:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    2018:	f8df 9128 	ldr.w	r9, [pc, #296]	; 2144 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3f8>
    201c:	688a      	ldr	r2, [r1, #8]
    201e:	68c9      	ldr	r1, [r1, #12]
    2020:	1a12      	subs	r2, r2, r0
    2022:	1a09      	subs	r1, r1, r0
    2024:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2028:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    202c:	4296      	cmp	r6, r2
    202e:	bf98      	it	ls
    2030:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    2034:	d201      	bcs.n	203a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ee>
    2036:	4589      	cmp	r9, r1
    2038:	d228      	bcs.n	208c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x340>
    203a:	4a44      	ldr	r2, [pc, #272]	; (214c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x400>)
    203c:	9900      	ldr	r1, [sp, #0]
    203e:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    2042:	4622      	mov	r2, r4
    2044:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    2048:	784c      	ldrb	r4, [r1, #1]
    204a:	2c20      	cmp	r4, #32
    204c:	d016      	beq.n	207c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x330>
    204e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2052:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    2056:	f8dc 8008 	ldr.w	r8, [ip, #8]
    205a:	f8dc c00c 	ldr.w	ip, [ip, #12]
    205e:	eba8 0800 	sub.w	r8, r8, r0
    2062:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    2066:	ebac 0100 	sub.w	r1, ip, r0
    206a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    206e:	4546      	cmp	r6, r8
    2070:	bf98      	it	ls
    2072:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    2076:	d2e4      	bcs.n	2042 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f6>
    2078:	4589      	cmp	r9, r1
    207a:	d3e2      	bcc.n	2042 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f6>
    207c:	2a20      	cmp	r2, #32
    207e:	d005      	beq.n	208c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x340>
    2080:	2120      	movs	r1, #32
    2082:	2004      	movs	r0, #4
    2084:	9b00      	ldr	r3, [sp, #0]
    2086:	f7ff f907 	bl	1298 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    208a:	4604      	mov	r4, r0
    208c:	42ac      	cmp	r4, r5
    208e:	d115      	bne.n	20bc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x370>
    2090:	482f      	ldr	r0, [pc, #188]	; (2150 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x404>)
    2092:	2800      	cmp	r0, #0
    2094:	bf18      	it	ne
    2096:	f3af 8000 	nopne.w
    209a:	f001 fb3d 	bl	3718 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    209e:	4c28      	ldr	r4, [pc, #160]	; (2140 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3f4>)
    20a0:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    20a4:	2920      	cmp	r1, #32
    20a6:	d00d      	beq.n	20c4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x378>
    20a8:	68e1      	ldr	r1, [r4, #12]
    20aa:	1c82      	adds	r2, r0, #2
    20ac:	1a51      	subs	r1, r2, r1
    20ae:	0209      	lsls	r1, r1, #8
    20b0:	17ca      	asrs	r2, r1, #31
    20b2:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    20b6:	1209      	asrs	r1, r1, #8
    20b8:	2900      	cmp	r1, #0
    20ba:	dd03      	ble.n	20c4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x378>
    20bc:	b005      	add	sp, #20
    20be:	2000      	movs	r0, #0
    20c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20c4:	2d20      	cmp	r5, #32
    20c6:	d00d      	beq.n	20e4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x398>
    20c8:	462a      	mov	r2, r5
    20ca:	9903      	ldr	r1, [sp, #12]
    20cc:	f7ff fb16 	bl	16fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x374>
    20d0:	b358      	cbz	r0, 212a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3de>
    20d2:	9801      	ldr	r0, [sp, #4]
    20d4:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    20d8:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    20dc:	b005      	add	sp, #20
    20de:	2001      	movs	r0, #1
    20e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20e4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    20e8:	b118      	cbz	r0, 20f2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3a6>
    20ea:	f002 f831 	bl	4150 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    20ee:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    20f2:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    20f6:	b150      	cbz	r0, 210e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c2>
    20f8:	4916      	ldr	r1, [pc, #88]	; (2154 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x408>)
    20fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    20fe:	6008      	str	r0, [r1, #0]
    2100:	2005      	movs	r0, #5
    2102:	f001 fd57 	bl	3bb4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2106:	f002 f88b 	bl	4220 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    210a:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    210e:	2004      	movs	r0, #4
    2110:	f001 fd50 	bl	3bb4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2114:	f001 fdb6 	bl	3c84 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2118:	2020      	movs	r0, #32
    211a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    211e:	480e      	ldr	r0, [pc, #56]	; (2158 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x40c>)
    2120:	6880      	ldr	r0, [r0, #8]
    2122:	6007      	str	r7, [r0, #0]
    2124:	480d      	ldr	r0, [pc, #52]	; (215c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x410>)
    2126:	6007      	str	r7, [r0, #0]
    2128:	e7d8      	b.n	20dc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x390>
    212a:	462a      	mov	r2, r5
    212c:	2120      	movs	r1, #32
    212e:	2004      	movs	r0, #4
    2130:	9b04      	ldr	r3, [sp, #16]
    2132:	f7ff f8b1 	bl	1298 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    2136:	b005      	add	sp, #20
    2138:	2000      	movs	r0, #0
    213a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    213e:	0000      	.short	0x0000
    2140:	20000f04 	.word	0x20000f04
    2144:	003fffff 	.word	0x003fffff
    2148:	20000b84 	.word	0x20000b84
    214c:	20000e84 	.word	0x20000e84
    2150:	00000000 	.word	0x00000000
    2154:	4001f508 	.word	0x4001f508
    2158:	20000010 	.word	0x20000010
    215c:	40000508 	.word	0x40000508

00002160 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    2160:	4906      	ldr	r1, [pc, #24]	; (217c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    2162:	b510      	push	{r4, lr}
    2164:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    2168:	2a20      	cmp	r2, #32
    216a:	bf1c      	itt	ne
    216c:	7788      	strbne	r0, [r1, #30]
    216e:	bd10      	popne	{r4, pc}
    2170:	f240 31fd 	movw	r1, #1021	; 0x3fd
    2174:	2070      	movs	r0, #112	; 0x70
    2176:	f002 f9a5 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    217a:	0000      	.short	0x0000
    217c:	20000f04 	.word	0x20000f04

00002180 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    2180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2184:	4e5b      	ldr	r6, [pc, #364]	; (22f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    2186:	4681      	mov	r9, r0
    2188:	b085      	sub	sp, #20
    218a:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    218e:	468a      	mov	sl, r1
    2190:	2820      	cmp	r0, #32
    2192:	d04d      	beq.n	2230 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    2194:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    2198:	f106 040c 	add.w	r4, r6, #12
    219c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    21a0:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    21a4:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    21a8:	2020      	movs	r0, #32
    21aa:	f88d 0000 	strb.w	r0, [sp]
    21ae:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    21b2:	aa03      	add	r2, sp, #12
    21b4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    21b8:	a901      	add	r1, sp, #4
    21ba:	f890 5020 	ldrb.w	r5, [r0, #32]
    21be:	6930      	ldr	r0, [r6, #16]
    21c0:	9002      	str	r0, [sp, #8]
    21c2:	6830      	ldr	r0, [r6, #0]
    21c4:	4448      	add	r0, r9
    21c6:	f001 f951 	bl	346c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    21ca:	68f8      	ldr	r0, [r7, #12]
    21cc:	9901      	ldr	r1, [sp, #4]
    21ce:	4a4a      	ldr	r2, [pc, #296]	; (22f8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    21d0:	4408      	add	r0, r1
    21d2:	f1a9 0164 	sub.w	r1, r9, #100	; 0x64
    21d6:	4291      	cmp	r1, r2
    21d8:	d82f      	bhi.n	223a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    21da:	68b9      	ldr	r1, [r7, #8]
    21dc:	1a41      	subs	r1, r0, r1
    21de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    21e2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    21e6:	d228      	bcs.n	223a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    21e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    21ec:	6060      	str	r0, [r4, #4]
    21ee:	4630      	mov	r0, r6
    21f0:	f884 a00c 	strb.w	sl, [r4, #12]
    21f4:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    21f8:	46ea      	mov	sl, sp
    21fa:	2d20      	cmp	r5, #32
    21fc:	bf1c      	itt	ne
    21fe:	493f      	ldrne	r1, [pc, #252]	; (22fc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    2200:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    2204:	d03c      	beq.n	2280 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    2206:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    220a:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    220e:	6860      	ldr	r0, [r4, #4]
    2210:	68ba      	ldr	r2, [r7, #8]
    2212:	4621      	mov	r1, r4
    2214:	1a10      	subs	r0, r2, r0
    2216:	0200      	lsls	r0, r0, #8
    2218:	17c2      	asrs	r2, r0, #31
    221a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    221e:	f107 0608 	add.w	r6, r7, #8
    2222:	1200      	asrs	r0, r0, #8
    2224:	d41b      	bmi.n	225e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    2226:	8970      	ldrh	r0, [r6, #10]
    2228:	b350      	cbz	r0, 2280 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    222a:	8948      	ldrh	r0, [r1, #10]
    222c:	b148      	cbz	r0, 2242 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    222e:	e027      	b.n	2280 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    2230:	f640 3173 	movw	r1, #2931	; 0xb73
    2234:	2070      	movs	r0, #112	; 0x70
    2236:	f002 f945 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    223a:	b005      	add	sp, #20
    223c:	2001      	movs	r0, #1
    223e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2242:	4620      	mov	r0, r4
    2244:	f7ff fe56 	bl	1ef4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a8>
    2248:	f001 f8f4 	bl	3434 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    224c:	6831      	ldr	r1, [r6, #0]
    224e:	1a08      	subs	r0, r1, r0
    2250:	0200      	lsls	r0, r0, #8
    2252:	17c1      	asrs	r1, r0, #31
    2254:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2258:	1200      	asrs	r0, r0, #8
    225a:	2833      	cmp	r0, #51	; 0x33
    225c:	da10      	bge.n	2280 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    225e:	f88a 5000 	strb.w	r5, [sl]
    2262:	7d39      	ldrb	r1, [r7, #20]
    2264:	7b20      	ldrb	r0, [r4, #12]
    2266:	4281      	cmp	r1, r0
    2268:	d805      	bhi.n	2276 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    226a:	9802      	ldr	r0, [sp, #8]
    226c:	6060      	str	r0, [r4, #4]
    226e:	b005      	add	sp, #20
    2270:	2002      	movs	r0, #2
    2272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2276:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    227a:	7845      	ldrb	r5, [r0, #1]
    227c:	2d20      	cmp	r5, #32
    227e:	d1c2      	bne.n	2206 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    2280:	2005      	movs	r0, #5
    2282:	f001 fc97 	bl	3bb4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2286:	4c1b      	ldr	r4, [pc, #108]	; (22f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    2288:	f04f 30ff 	mov.w	r0, #4294967295
    228c:	60a0      	str	r0, [r4, #8]
    228e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    2292:	f89d 2000 	ldrb.w	r2, [sp]
    2296:	2120      	movs	r1, #32
    2298:	2a20      	cmp	r2, #32
    229a:	bf13      	iteet	ne
    229c:	2005      	movne	r0, #5
    229e:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    22a2:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    22a6:	f7fe fff7 	blne	1298 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    22aa:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    22ae:	4913      	ldr	r1, [pc, #76]	; (22fc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    22b0:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    22b4:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    22b8:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    22bc:	7048      	strb	r0, [r1, #1]
    22be:	6820      	ldr	r0, [r4, #0]
    22c0:	4448      	add	r0, r9
    22c2:	6020      	str	r0, [r4, #0]
    22c4:	2001      	movs	r0, #1
    22c6:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    22ca:	7e60      	ldrb	r0, [r4, #25]
    22cc:	2801      	cmp	r0, #1
    22ce:	d105      	bne.n	22dc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    22d0:	6920      	ldr	r0, [r4, #16]
    22d2:	1e40      	subs	r0, r0, #1
    22d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    22d8:	f001 fabe 	bl	3858 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    22dc:	f89d 0000 	ldrb.w	r0, [sp]
    22e0:	2820      	cmp	r0, #32
    22e2:	d003      	beq.n	22ec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    22e4:	4806      	ldr	r0, [pc, #24]	; (2300 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    22e6:	7840      	ldrb	r0, [r0, #1]
    22e8:	f002 f9bc 	bl	4664 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    22ec:	b005      	add	sp, #20
    22ee:	2000      	movs	r0, #0
    22f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22f4:	20000f04 	.word	0x20000f04
    22f8:	07a11f9c 	.word	0x07a11f9c
    22fc:	20000e84 	.word	0x20000e84
    2300:	20000010 	.word	0x20000010

00002304 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    2304:	4602      	mov	r2, r0
    2306:	4b14      	ldr	r3, [pc, #80]	; (2358 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    2308:	b510      	push	{r4, lr}
    230a:	4408      	add	r0, r1
    230c:	429a      	cmp	r2, r3
    230e:	d904      	bls.n	231a <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    2310:	f240 6116 	movw	r1, #1558	; 0x616
    2314:	2070      	movs	r0, #112	; 0x70
    2316:	f002 f8d5 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    231a:	4a10      	ldr	r2, [pc, #64]	; (235c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    231c:	4291      	cmp	r1, r2
    231e:	dd04      	ble.n	232a <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    2320:	f240 6117 	movw	r1, #1559	; 0x617
    2324:	2070      	movs	r0, #112	; 0x70
    2326:	f002 f8cd 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    232a:	4a0d      	ldr	r2, [pc, #52]	; (2360 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    232c:	4291      	cmp	r1, r2
    232e:	da04      	bge.n	233a <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    2330:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    2334:	2070      	movs	r0, #112	; 0x70
    2336:	f002 f8c5 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    233a:	490a      	ldr	r1, [pc, #40]	; (2364 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    233c:	4281      	cmp	r1, r0
    233e:	bfde      	ittt	le
    2340:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2344:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2348:	bd10      	pople	{r4, pc}
    234a:	2800      	cmp	r0, #0
    234c:	bfbc      	itt	lt
    234e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2352:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2356:	bd10      	pop	{r4, pc}
    2358:	1e847fff 	.word	0x1e847fff
    235c:	07a12000 	.word	0x07a12000
    2360:	f85ee000 	.word	0xf85ee000
    2364:	1e848000 	.word	0x1e848000

00002368 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    2368:	4a10      	ldr	r2, [pc, #64]	; (23ac <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    236a:	1a0b      	subs	r3, r1, r0
    236c:	f102 0c01 	add.w	ip, r2, #1
    2370:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    2374:	bf3c      	itt	cc
    2376:	4618      	movcc	r0, r3
    2378:	4770      	bxcc	lr
    237a:	b510      	push	{r4, lr}
    237c:	1a44      	subs	r4, r0, r1
    237e:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    2382:	bf3c      	itt	cc
    2384:	4618      	movcc	r0, r3
    2386:	bd10      	popcc	{r4, pc}
    2388:	429a      	cmp	r2, r3
    238a:	d203      	bcs.n	2394 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    238c:	1a10      	subs	r0, r2, r0
    238e:	4408      	add	r0, r1
    2390:	1c40      	adds	r0, r0, #1
    2392:	bd10      	pop	{r4, pc}
    2394:	42a2      	cmp	r2, r4
    2396:	d204      	bcs.n	23a2 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    2398:	1a51      	subs	r1, r2, r1
    239a:	4408      	add	r0, r1
    239c:	1c40      	adds	r0, r0, #1
    239e:	4240      	negs	r0, r0
    23a0:	bd10      	pop	{r4, pc}
    23a2:	f640 310b 	movw	r1, #2827	; 0xb0b
    23a6:	2070      	movs	r0, #112	; 0x70
    23a8:	f002 f88c 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23ac:	1e847fff 	.word	0x1e847fff

000023b0 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    23b0:	490e      	ldr	r1, [pc, #56]	; (23ec <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    23b2:	b510      	push	{r4, lr}
    23b4:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    23b8:	2820      	cmp	r0, #32
    23ba:	d012      	beq.n	23e2 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    23bc:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    23c0:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    23c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    23c8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    23cc:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    23d0:	6840      	ldr	r0, [r0, #4]
    23d2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    23d6:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    23da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    23de:	2104      	movs	r1, #4
    23e0:	4710      	bx	r2
    23e2:	f640 01bb 	movw	r1, #2235	; 0x8bb
    23e6:	2070      	movs	r0, #112	; 0x70
    23e8:	f002 f86c 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23ec:	20000f04 	.word	0x20000f04

000023f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    23f0:	b570      	push	{r4, r5, r6, lr}
    23f2:	4d6a      	ldr	r5, [pc, #424]	; (259c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ac>)
    23f4:	496a      	ldr	r1, [pc, #424]	; (25a0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b0>)
    23f6:	2601      	movs	r6, #1
    23f8:	f505 7460 	add.w	r4, r5, #896	; 0x380
    23fc:	2808      	cmp	r0, #8
    23fe:	d27d      	bcs.n	24fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    2400:	e8df f000 	tbb	[pc, r0]
    2404:	a9976104 	.word	0xa9976104
    2408:	b3ae43c6 	.word	0xb3ae43c6
    240c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    2410:	b918      	cbnz	r0, 241a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    2412:	f001 feb9 	bl	4188 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2416:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    241a:	8ae0      	ldrh	r0, [r4, #22]
    241c:	b110      	cbz	r0, 2424 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    241e:	f001 ffed 	bl	43fc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2422:	b188      	cbz	r0, 2448 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    2424:	f7ff fcce 	bl	1dc4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x78>
    2428:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    242c:	68a1      	ldr	r1, [r4, #8]
    242e:	f1b1 3fff 	cmp.w	r1, #4294967295
    2432:	d005      	beq.n	2440 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    2434:	2301      	movs	r3, #1
    2436:	2203      	movs	r2, #3
    2438:	2005      	movs	r0, #5
    243a:	f001 faf3 	bl	3a24 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    243e:	b140      	cbz	r0, 2452 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    2440:	7e60      	ldrb	r0, [r4, #25]
    2442:	2801      	cmp	r0, #1
    2444:	d110      	bne.n	2468 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    2446:	e009      	b.n	245c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    2448:	f640 016f 	movw	r1, #2159	; 0x86f
    244c:	2070      	movs	r0, #112	; 0x70
    244e:	f002 f839 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2452:	f640 0174 	movw	r1, #2164	; 0x874
    2456:	2070      	movs	r0, #112	; 0x70
    2458:	f002 f834 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    245c:	6920      	ldr	r0, [r4, #16]
    245e:	1e40      	subs	r0, r0, #1
    2460:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2464:	f001 f9f8 	bl	3858 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    2468:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    246c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2470:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2474:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2478:	6840      	ldr	r0, [r0, #4]
    247a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    247e:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2486:	2101      	movs	r1, #1
    2488:	4710      	bx	r2
    248a:	f7ff fc9b 	bl	1dc4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x78>
    248e:	f04f 30ff 	mov.w	r0, #4294967295
    2492:	60a0      	str	r0, [r4, #8]
    2494:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2498:	b180      	cbz	r0, 24bc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xcc>
    249a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    249e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    24a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    24a6:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    24aa:	6840      	ldr	r0, [r0, #4]
    24ac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    24b0:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    24b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    24b8:	2106      	movs	r1, #6
    24ba:	4710      	bx	r2
    24bc:	f640 0185 	movw	r1, #2181	; 0x885
    24c0:	2070      	movs	r0, #112	; 0x70
    24c2:	f001 ffff 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24c6:	f7ff fc7d 	bl	1dc4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x78>
    24ca:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    24ce:	f001 ff95 	bl	43fc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    24d2:	b118      	cbz	r0, 24dc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xec>
    24d4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    24d8:	b128      	cbz	r0, 24e6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf6>
    24da:	e008      	b.n	24ee <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    24dc:	f640 0195 	movw	r1, #2197	; 0x895
    24e0:	2070      	movs	r0, #112	; 0x70
    24e2:	f001 ffef 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24e6:	f001 fe4f 	bl	4188 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    24ea:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    24ee:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    24f2:	b168      	cbz	r0, 2510 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x120>
    24f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    24f8:	492a      	ldr	r1, [pc, #168]	; (25a4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    24fa:	e000      	b.n	24fe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    24fc:	e048      	b.n	2590 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a0>
    24fe:	6008      	str	r0, [r1, #0]
    2500:	2005      	movs	r0, #5
    2502:	f001 fb57 	bl	3bb4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2506:	f001 fe8b 	bl	4220 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    250a:	2000      	movs	r0, #0
    250c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    2510:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2514:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2518:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    251c:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2520:	6840      	ldr	r0, [r0, #4]
    2522:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2526:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    252a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    252e:	2100      	movs	r1, #0
    2530:	4710      	bx	r2
    2532:	f001 fbf1 	bl	3d18 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    2536:	8ae0      	ldrh	r0, [r4, #22]
    2538:	b110      	cbz	r0, 2540 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x150>
    253a:	f001 ff5f 	bl	43fc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    253e:	b128      	cbz	r0, 254c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    2540:	4819      	ldr	r0, [pc, #100]	; (25a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    2542:	7800      	ldrb	r0, [r0, #0]
    2544:	2803      	cmp	r0, #3
    2546:	bf08      	it	eq
    2548:	7766      	strbeq	r6, [r4, #29]
    254a:	bd70      	pop	{r4, r5, r6, pc}
    254c:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    2550:	2070      	movs	r0, #112	; 0x70
    2552:	f001 ffb7 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2556:	4815      	ldr	r0, [pc, #84]	; (25ac <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    2558:	6006      	str	r6, [r0, #0]
    255a:	6888      	ldr	r0, [r1, #8]
    255c:	6006      	str	r6, [r0, #0]
    255e:	bd70      	pop	{r4, r5, r6, pc}
    2560:	7808      	ldrb	r0, [r1, #0]
    2562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2566:	f002 b87d 	b.w	4664 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    256a:	f7ff fc2b 	bl	1dc4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x78>
    256e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2572:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2576:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    257a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    257e:	6840      	ldr	r0, [r0, #4]
    2580:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2584:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2588:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    258c:	2105      	movs	r1, #5
    258e:	4710      	bx	r2
    2590:	f640 01b3 	movw	r1, #2227	; 0x8b3
    2594:	2070      	movs	r0, #112	; 0x70
    2596:	f001 ff95 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    259a:	0000      	.short	0x0000
    259c:	20000b84 	.word	0x20000b84
    25a0:	20000010 	.word	0x20000010
    25a4:	4001f508 	.word	0x4001f508
    25a8:	20000012 	.word	0x20000012
    25ac:	40000508 	.word	0x40000508

000025b0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    25b0:	4803      	ldr	r0, [pc, #12]	; (25c0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    25b2:	b510      	push	{r4, lr}
    25b4:	7840      	ldrb	r0, [r0, #1]
    25b6:	f009 fed4 	bl	c362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    25ba:	b280      	uxth	r0, r0
    25bc:	bd10      	pop	{r4, pc}
    25be:	0000      	.short	0x0000
    25c0:	20000012 	.word	0x20000012

000025c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    25c4:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25c8:	4682      	mov	sl, r0
    25ca:	48d1      	ldr	r0, [pc, #836]	; (2910 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>)
    25cc:	b08b      	sub	sp, #44	; 0x2c
    25ce:	6800      	ldr	r0, [r0, #0]
    25d0:	4dd0      	ldr	r5, [pc, #832]	; (2914 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x350>)
    25d2:	05c0      	lsls	r0, r0, #23
    25d4:	0dc0      	lsrs	r0, r0, #23
    25d6:	d00e      	beq.n	25f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    25d8:	3810      	subs	r0, #16
    25da:	b240      	sxtb	r0, r0
    25dc:	2800      	cmp	r0, #0
    25de:	bfb8      	it	lt
    25e0:	f000 000f 	andlt.w	r0, r0, #15
    25e4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    25e8:	bfac      	ite	ge
    25ea:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    25ee:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    25f2:	0940      	lsrs	r0, r0, #5
    25f4:	d00d      	beq.n	2612 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    25f6:	980c      	ldr	r0, [sp, #48]	; 0x30
    25f8:	f04f 0b00 	mov.w	fp, #0
    25fc:	7800      	ldrb	r0, [r0, #0]
    25fe:	2800      	cmp	r0, #0
    2600:	bf18      	it	ne
    2602:	2801      	cmpne	r0, #1
    2604:	d018      	beq.n	2638 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2606:	f240 715c 	movw	r1, #1884	; 0x75c
    260a:	f04f 0070 	mov.w	r0, #112	; 0x70
    260e:	f001 ff59 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2612:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2616:	f04f 0b01 	mov.w	fp, #1
    261a:	2820      	cmp	r0, #32
    261c:	d007      	beq.n	262e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    261e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2620:	7800      	ldrb	r0, [r0, #0]
    2622:	b148      	cbz	r0, 2638 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2624:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    2628:	2070      	movs	r0, #112	; 0x70
    262a:	f001 ff4b 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    262e:	f240 7155 	movw	r1, #1877	; 0x755
    2632:	2070      	movs	r0, #112	; 0x70
    2634:	f001 ff46 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2638:	4cb7      	ldr	r4, [pc, #732]	; (2918 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x354>)
    263a:	b124      	cbz	r4, 2646 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    263c:	2100      	movs	r1, #0
    263e:	f240 705f 	movw	r0, #1887	; 0x75f
    2642:	f3af 8000 	nop.w
    2646:	49b5      	ldr	r1, [pc, #724]	; (291c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x358>)
    2648:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    264c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    2650:	f04f 0801 	mov.w	r8, #1
    2654:	9000      	str	r0, [sp, #0]
    2656:	b124      	cbz	r4, 2662 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    2658:	2100      	movs	r1, #0
    265a:	f240 7067 	movw	r0, #1895	; 0x767
    265e:	f3af 8000 	nop.w
    2662:	f1b8 0f00 	cmp.w	r8, #0
    2666:	d009      	beq.n	267c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    2668:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    266c:	f04f 0900 	mov.w	r9, #0
    2670:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    2674:	f1bb 0f00 	cmp.w	fp, #0
    2678:	d007      	beq.n	268a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    267a:	e02e      	b.n	26da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    267c:	48a8      	ldr	r0, [pc, #672]	; (2920 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>)
    267e:	2800      	cmp	r0, #0
    2680:	bf18      	it	ne
    2682:	f3af 8000 	nopne.w
    2686:	b662      	cpsie	i
    2688:	e7ee      	b.n	2668 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    268a:	4637      	mov	r7, r6
    268c:	2001      	movs	r0, #1
    268e:	ea20 0607 	bic.w	r6, r0, r7
    2692:	48a4      	ldr	r0, [pc, #656]	; (2924 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x360>)
    2694:	2240      	movs	r2, #64	; 0x40
    2696:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    269a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    269e:	f009 ffce 	bl	c63e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    26a2:	b124      	cbz	r4, 26ae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    26a4:	2100      	movs	r1, #0
    26a6:	f240 50da 	movw	r0, #1498	; 0x5da
    26aa:	f3af 8000 	nop.w
    26ae:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    26b2:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    26b6:	6a09      	ldr	r1, [r1, #32]
    26b8:	6201      	str	r1, [r0, #32]
    26ba:	b124      	cbz	r4, 26c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    26bc:	2100      	movs	r1, #0
    26be:	f240 50de 	movw	r0, #1502	; 0x5de
    26c2:	f3af 8000 	nop.w
    26c6:	b124      	cbz	r4, 26d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    26c8:	2100      	movs	r1, #0
    26ca:	f240 7071 	movw	r0, #1905	; 0x771
    26ce:	f3af 8000 	nop.w
    26d2:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    26d6:	2800      	cmp	r0, #0
    26d8:	d1bd      	bne.n	2656 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    26da:	b124      	cbz	r4, 26e6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    26dc:	2100      	movs	r1, #0
    26de:	f240 707b 	movw	r0, #1915	; 0x77b
    26e2:	f3af 8000 	nop.w
    26e6:	f001 f817 	bl	3718 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    26ea:	4680      	mov	r8, r0
    26ec:	4633      	mov	r3, r6
    26ee:	aa06      	add	r2, sp, #24
    26f0:	990c      	ldr	r1, [sp, #48]	; 0x30
    26f2:	f7ff fa93 	bl	1c1c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x894>
    26f6:	b124      	cbz	r4, 2702 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    26f8:	2100      	movs	r1, #0
    26fa:	f240 7082 	movw	r0, #1922	; 0x782
    26fe:	f3af 8000 	nop.w
    2702:	4988      	ldr	r1, [pc, #544]	; (2924 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x360>)
    2704:	a806      	add	r0, sp, #24
    2706:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    270a:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    270e:	2901      	cmp	r1, #1
    2710:	bf18      	it	ne
    2712:	2902      	cmpne	r1, #2
    2714:	d13e      	bne.n	2794 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    2716:	9906      	ldr	r1, [sp, #24]
    2718:	9b07      	ldr	r3, [sp, #28]
    271a:	eba1 0108 	sub.w	r1, r1, r8
    271e:	4a82      	ldr	r2, [pc, #520]	; (2928 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>)
    2720:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2724:	eba3 0308 	sub.w	r3, r3, r8
    2728:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    272c:	2902      	cmp	r1, #2
    272e:	d36a      	bcc.n	2806 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x242>
    2730:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    2734:	d267      	bcs.n	2806 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x242>
    2736:	429a      	cmp	r2, r3
    2738:	d365      	bcc.n	2806 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x242>
    273a:	f04f 0901 	mov.w	r9, #1
    273e:	ab01      	add	r3, sp, #4
    2740:	aa05      	add	r2, sp, #20
    2742:	4631      	mov	r1, r6
    2744:	f7fe ff5a 	bl	15fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x274>
    2748:	2800      	cmp	r0, #0
    274a:	d064      	beq.n	2816 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x252>
    274c:	f89d 1014 	ldrb.w	r1, [sp, #20]
    2750:	f89d 2004 	ldrb.w	r2, [sp, #4]
    2754:	4633      	mov	r3, r6
    2756:	428a      	cmp	r2, r1
    2758:	d061      	beq.n	281e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x25a>
    275a:	2005      	movs	r0, #5
    275c:	f7fe fd9c 	bl	1298 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    2760:	ea4f 0100 	mov.w	r1, r0
    2764:	eb07 004a 	add.w	r0, r7, sl, lsl #1
    2768:	7041      	strb	r1, [r0, #1]
    276a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    276e:	2820      	cmp	r0, #32
    2770:	bf03      	ittte	eq
    2772:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    2776:	f880 a020 	strbeq.w	sl, [r0, #32]
    277a:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    277e:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    2782:	bf18      	it	ne
    2784:	f880 a001 	strbne.w	sl, [r0, #1]
    2788:	4632      	mov	r2, r6
    278a:	4651      	mov	r1, sl
    278c:	f05f 0003 	movs.w	r0, #3
    2790:	f7ff fbea 	bl	1f68 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21c>
    2794:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2798:	f890 7023 	ldrb.w	r7, [r0, #35]	; 0x23
    279c:	b124      	cbz	r4, 27a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e4>
    279e:	2100      	movs	r1, #0
    27a0:	f240 7089 	movw	r0, #1929	; 0x789
    27a4:	f3af 8000 	nop.w
    27a8:	4860      	ldr	r0, [pc, #384]	; (292c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x368>)
    27aa:	2800      	cmp	r0, #0
    27ac:	bf18      	it	ne
    27ae:	f3af 8000 	nopne.w
    27b2:	f3ef 8810 	mrs	r8, PRIMASK
    27b6:	b672      	cpsid	i
    27b8:	b124      	cbz	r4, 27c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x200>
    27ba:	2100      	movs	r1, #0
    27bc:	f240 708f 	movw	r0, #1935	; 0x78f
    27c0:	f3af 8000 	nop.w
    27c4:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    27c8:	2800      	cmp	r0, #0
    27ca:	f47f af44 	bne.w	2656 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    27ce:	b124      	cbz	r4, 27da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x216>
    27d0:	2100      	movs	r1, #0
    27d2:	f240 7097 	movw	r0, #1943	; 0x797
    27d6:	f3af 8000 	nop.w
    27da:	f10d 0e18 	add.w	lr, sp, #24
    27de:	9800      	ldr	r0, [sp, #0]
    27e0:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    27e4:	f100 0008 	add.w	r0, r0, #8
    27e8:	f1b9 0f00 	cmp.w	r9, #0
    27ec:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    27f0:	d042      	beq.n	2878 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2b4>
    27f2:	b124      	cbz	r4, 27fe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x23a>
    27f4:	2100      	movs	r1, #0
    27f6:	f240 70a4 	movw	r0, #1956	; 0x7a4
    27fa:	f3af 8000 	nop.w
    27fe:	f1bb 0f00 	cmp.w	fp, #0
    2802:	d12b      	bne.n	285c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    2804:	e015      	b.n	2832 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26e>
    2806:	4632      	mov	r2, r6
    2808:	4651      	mov	r1, sl
    280a:	2004      	movs	r0, #4
    280c:	f7ff fbac 	bl	1f68 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21c>
    2810:	f04f 0901 	mov.w	r9, #1
    2814:	e7be      	b.n	2794 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    2816:	4632      	mov	r2, r6
    2818:	4651      	mov	r1, sl
    281a:	2004      	movs	r0, #4
    281c:	e7b8      	b.n	2790 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1cc>
    281e:	2920      	cmp	r1, #32
    2820:	bf19      	ittee	ne
    2822:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    2826:	7841      	ldrbne	r1, [r0, #1]
    2828:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    282c:	f890 1020 	ldrbeq.w	r1, [r0, #32]
    2830:	e798      	b.n	2764 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a0>
    2832:	b19f      	cbz	r7, 285c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    2834:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2838:	2820      	cmp	r0, #32
    283a:	d10f      	bne.n	285c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    283c:	b124      	cbz	r4, 2848 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    283e:	2100      	movs	r1, #0
    2840:	f240 70a9 	movw	r0, #1961	; 0x7a9
    2844:	f3af 8000 	nop.w
    2848:	4631      	mov	r1, r6
    284a:	2002      	movs	r0, #2
    284c:	f7ff fbbc 	bl	1fc8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x27c>
    2850:	b920      	cbnz	r0, 285c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    2852:	980c      	ldr	r0, [sp, #48]	; 0x30
    2854:	7800      	ldrb	r0, [r0, #0]
    2856:	b3e8      	cbz	r0, 28d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x310>
    2858:	2801      	cmp	r0, #1
    285a:	d049      	beq.n	28f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    285c:	b124      	cbz	r4, 2868 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a4>
    285e:	2100      	movs	r1, #0
    2860:	f240 70c6 	movw	r0, #1990	; 0x7c6
    2864:	f3af 8000 	nop.w
    2868:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    286c:	2001      	movs	r0, #1
    286e:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    2872:	bf00      	nop
    2874:	f04f 0901 	mov.w	r9, #1
    2878:	b124      	cbz	r4, 2884 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c0>
    287a:	2100      	movs	r1, #0
    287c:	f240 70cf 	movw	r0, #1999	; 0x7cf
    2880:	f3af 8000 	nop.w
    2884:	f1b8 0f00 	cmp.w	r8, #0
    2888:	d03b      	beq.n	2902 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33e>
    288a:	b124      	cbz	r4, 2896 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    288c:	2100      	movs	r1, #0
    288e:	f240 70d3 	movw	r0, #2003	; 0x7d3
    2892:	f3af 8000 	nop.w
    2896:	f1b9 0f00 	cmp.w	r9, #0
    289a:	d011      	beq.n	28c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    289c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    28a0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    28a4:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    28a8:	2820      	cmp	r0, #32
    28aa:	d009      	beq.n	28c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    28ac:	b124      	cbz	r4, 28b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    28ae:	2100      	movs	r1, #0
    28b0:	f240 70da 	movw	r0, #2010	; 0x7da
    28b4:	f3af 8000 	nop.w
    28b8:	481d      	ldr	r0, [pc, #116]	; (2930 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36c>)
    28ba:	7840      	ldrb	r0, [r0, #1]
    28bc:	f001 fed2 	bl	4664 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    28c0:	b124      	cbz	r4, 28cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x308>
    28c2:	2100      	movs	r1, #0
    28c4:	f240 70df 	movw	r0, #2015	; 0x7df
    28c8:	f3af 8000 	nop.w
    28cc:	b00d      	add	sp, #52	; 0x34
    28ce:	4648      	mov	r0, r9
    28d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    28d4:	e7ff      	b.n	28d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x312>
    28d6:	b124      	cbz	r4, 28e2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x31e>
    28d8:	2100      	movs	r1, #0
    28da:	f240 70b1 	movw	r0, #1969	; 0x7b1
    28de:	f3af 8000 	nop.w
    28e2:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    28e6:	4651      	mov	r1, sl
    28e8:	2004      	movs	r0, #4
    28ea:	f7ff fb3d 	bl	1f68 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21c>
    28ee:	e7c1      	b.n	2874 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2b0>
    28f0:	2c00      	cmp	r4, #0
    28f2:	f43f aeb0 	beq.w	2656 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    28f6:	2100      	movs	r1, #0
    28f8:	f240 70bc 	movw	r0, #1980	; 0x7bc
    28fc:	f3af 8000 	nop.w
    2900:	e6a9      	b.n	2656 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2902:	4807      	ldr	r0, [pc, #28]	; (2920 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>)
    2904:	2800      	cmp	r0, #0
    2906:	bf18      	it	ne
    2908:	f3af 8000 	nopne.w
    290c:	b662      	cpsie	i
    290e:	e7bc      	b.n	288a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c6>
    2910:	e000ed04 	.word	0xe000ed04
    2914:	20000f04 	.word	0x20000f04
    2918:	00000000 	.word	0x00000000
    291c:	20000b84 	.word	0x20000b84
    2920:	00000000 	.word	0x00000000
    2924:	20000e84 	.word	0x20000e84
    2928:	003fffff 	.word	0x003fffff
    292c:	00000000 	.word	0x00000000
    2930:	20000010 	.word	0x20000010

00002934 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    2934:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2938:	48a3      	ldr	r0, [pc, #652]	; (2bc8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x294>)
    293a:	b086      	sub	sp, #24
    293c:	6800      	ldr	r0, [r0, #0]
    293e:	05c0      	lsls	r0, r0, #23
    2940:	0dc0      	lsrs	r0, r0, #23
    2942:	d011      	beq.n	2968 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    2944:	3810      	subs	r0, #16
    2946:	b240      	sxtb	r0, r0
    2948:	2800      	cmp	r0, #0
    294a:	bfb8      	it	lt
    294c:	f000 000f 	andlt.w	r0, r0, #15
    2950:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2954:	bfac      	ite	ge
    2956:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    295a:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    295e:	0940      	lsrs	r0, r0, #5
    2960:	bf08      	it	eq
    2962:	f04f 0901 	moveq.w	r9, #1
    2966:	d001      	beq.n	296c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    2968:	f04f 0900 	mov.w	r9, #0
    296c:	9806      	ldr	r0, [sp, #24]
    296e:	7800      	ldrb	r0, [r0, #0]
    2970:	2800      	cmp	r0, #0
    2972:	f04f 0000 	mov.w	r0, #0
    2976:	bf1c      	itt	ne
    2978:	b007      	addne	sp, #28
    297a:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    297e:	f8df a24c 	ldr.w	sl, [pc, #588]	; 2bcc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x298>
    2982:	4d93      	ldr	r5, [pc, #588]	; (2bd0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x29c>)
    2984:	4c93      	ldr	r4, [pc, #588]	; (2bd4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a0>)
    2986:	f04f 0b00 	mov.w	fp, #0
    298a:	9004      	str	r0, [sp, #16]
    298c:	b125      	cbz	r5, 2998 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    298e:	2100      	movs	r1, #0
    2990:	f240 6065 	movw	r0, #1637	; 0x665
    2994:	f3af 8000 	nop.w
    2998:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    299c:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    29a0:	f04f 0800 	mov.w	r8, #0
    29a4:	b125      	cbz	r5, 29b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    29a6:	2100      	movs	r1, #0
    29a8:	f240 606a 	movw	r0, #1642	; 0x66a
    29ac:	f3af 8000 	nop.w
    29b0:	f1b9 0f00 	cmp.w	r9, #0
    29b4:	d11d      	bne.n	29f2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    29b6:	4637      	mov	r7, r6
    29b8:	2001      	movs	r0, #1
    29ba:	ea20 0607 	bic.w	r6, r0, r7
    29be:	4886      	ldr	r0, [pc, #536]	; (2bd8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a4>)
    29c0:	2240      	movs	r2, #64	; 0x40
    29c2:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    29c6:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    29ca:	f009 fe38 	bl	c63e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    29ce:	b125      	cbz	r5, 29da <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    29d0:	2100      	movs	r1, #0
    29d2:	f240 50da 	movw	r0, #1498	; 0x5da
    29d6:	f3af 8000 	nop.w
    29da:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    29de:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    29e2:	6a09      	ldr	r1, [r1, #32]
    29e4:	6201      	str	r1, [r0, #32]
    29e6:	b125      	cbz	r5, 29f2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    29e8:	2100      	movs	r1, #0
    29ea:	f240 50de 	movw	r0, #1502	; 0x5de
    29ee:	f3af 8000 	nop.w
    29f2:	b125      	cbz	r5, 29fe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    29f4:	2100      	movs	r1, #0
    29f6:	f240 6072 	movw	r0, #1650	; 0x672
    29fa:	f3af 8000 	nop.w
    29fe:	f000 fe8b 	bl	3718 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2a02:	4607      	mov	r7, r0
    2a04:	4633      	mov	r3, r6
    2a06:	466a      	mov	r2, sp
    2a08:	9906      	ldr	r1, [sp, #24]
    2a0a:	f7ff f907 	bl	1c1c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x894>
    2a0e:	b125      	cbz	r5, 2a1a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    2a10:	2100      	movs	r1, #0
    2a12:	f44f 60cf 	mov.w	r0, #1656	; 0x678
    2a16:	f3af 8000 	nop.w
    2a1a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2a1e:	2820      	cmp	r0, #32
    2a20:	d014      	beq.n	2a4c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    2a22:	6920      	ldr	r0, [r4, #16]
    2a24:	9900      	ldr	r1, [sp, #0]
    2a26:	1a09      	subs	r1, r1, r0
    2a28:	0209      	lsls	r1, r1, #8
    2a2a:	17ca      	asrs	r2, r1, #31
    2a2c:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    2a30:	1209      	asrs	r1, r1, #8
    2a32:	d50b      	bpl.n	2a4c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    2a34:	e9dd 2100 	ldrd	r2, r1, [sp]
    2a38:	1a89      	subs	r1, r1, r2
    2a3a:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    2a3e:	4408      	add	r0, r1
    2a40:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2a44:	e9cd 2000 	strd	r2, r0, [sp]
    2a48:	f04f 0801 	mov.w	r8, #1
    2a4c:	b14d      	cbz	r5, 2a62 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    2a4e:	2100      	movs	r1, #0
    2a50:	f240 6082 	movw	r0, #1666	; 0x682
    2a54:	f3af 8000 	nop.w
    2a58:	2100      	movs	r1, #0
    2a5a:	f44f 60d1 	mov.w	r0, #1672	; 0x688
    2a5e:	f3af 8000 	nop.w
    2a62:	9800      	ldr	r0, [sp, #0]
    2a64:	9901      	ldr	r1, [sp, #4]
    2a66:	1bc0      	subs	r0, r0, r7
    2a68:	1bc9      	subs	r1, r1, r7
    2a6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2a6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2a72:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2a76:	d205      	bcs.n	2a84 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    2a78:	458a      	cmp	sl, r1
    2a7a:	d303      	bcc.n	2a84 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    2a7c:	f1b9 0f00 	cmp.w	r9, #0
    2a80:	d10c      	bne.n	2a9c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    2a82:	e003      	b.n	2a8c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    2a84:	f1b9 0f00 	cmp.w	r9, #0
    2a88:	d038      	beq.n	2afc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    2a8a:	e094      	b.n	2bb6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2a8c:	4633      	mov	r3, r6
    2a8e:	463a      	mov	r2, r7
    2a90:	4669      	mov	r1, sp
    2a92:	4852      	ldr	r0, [pc, #328]	; (2bdc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    2a94:	f7fe fc3c 	bl	1310 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    2a98:	ea48 0800 	orr.w	r8, r8, r0
    2a9c:	f1b8 0f00 	cmp.w	r8, #0
    2aa0:	d022      	beq.n	2ae8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b4>
    2aa2:	9800      	ldr	r0, [sp, #0]
    2aa4:	f009 fc5d 	bl	c362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2aa8:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2aac:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2ab0:	4b4b      	ldr	r3, [pc, #300]	; (2be0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    2ab2:	4411      	add	r1, r2
    2ab4:	1c49      	adds	r1, r1, #1
    2ab6:	1842      	adds	r2, r0, r1
    2ab8:	4298      	cmp	r0, r3
    2aba:	d841      	bhi.n	2b40 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20c>
    2abc:	4847      	ldr	r0, [pc, #284]	; (2bdc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    2abe:	4281      	cmp	r1, r0
    2ac0:	dc5a      	bgt.n	2b78 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    2ac2:	4240      	negs	r0, r0
    2ac4:	4281      	cmp	r1, r0
    2ac6:	db5f      	blt.n	2b88 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    2ac8:	1c58      	adds	r0, r3, #1
    2aca:	4290      	cmp	r0, r2
    2acc:	bfdc      	itt	le
    2ace:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    2ad2:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    2ad6:	dd05      	ble.n	2ae4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    2ad8:	2a00      	cmp	r2, #0
    2ada:	bfbc      	itt	lt
    2adc:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    2ae0:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    2ae4:	9806      	ldr	r0, [sp, #24]
    2ae6:	60c2      	str	r2, [r0, #12]
    2ae8:	2001      	movs	r0, #1
    2aea:	9004      	str	r0, [sp, #16]
    2aec:	2d00      	cmp	r5, #0
    2aee:	d062      	beq.n	2bb6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2af0:	2100      	movs	r1, #0
    2af2:	f240 609b 	movw	r0, #1691	; 0x69b
    2af6:	f3af 8000 	nop.w
    2afa:	e05c      	b.n	2bb6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2afc:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    2b00:	aa05      	add	r2, sp, #20
    2b02:	a904      	add	r1, sp, #16
    2b04:	f000 fcb2 	bl	346c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2b08:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2b0c:	2820      	cmp	r0, #32
    2b0e:	d01c      	beq.n	2b4a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x216>
    2b10:	6920      	ldr	r0, [r4, #16]
    2b12:	1d40      	adds	r0, r0, #5
    2b14:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2b18:	e9dd 2100 	ldrd	r2, r1, [sp]
    2b1c:	1a89      	subs	r1, r1, r2
    2b1e:	4401      	add	r1, r0
    2b20:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2b24:	e9cd 0100 	strd	r0, r1, [sp]
    2b28:	f009 fc1b 	bl	c362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2b2c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2b30:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2b34:	4b2a      	ldr	r3, [pc, #168]	; (2be0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    2b36:	4411      	add	r1, r2
    2b38:	1c49      	adds	r1, r1, #1
    2b3a:	1842      	adds	r2, r0, r1
    2b3c:	4298      	cmp	r0, r3
    2b3e:	d918      	bls.n	2b72 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x23e>
    2b40:	f240 6116 	movw	r1, #1558	; 0x616
    2b44:	2070      	movs	r0, #112	; 0x70
    2b46:	f001 fcbd 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b4a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    2b4e:	f107 0609 	add.w	r6, r7, #9
    2b52:	b120      	cbz	r0, 2b5e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x22a>
    2b54:	f001 fc52 	bl	43fc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2b58:	2800      	cmp	r0, #0
    2b5a:	bf08      	it	eq
    2b5c:	3632      	addeq	r6, #50	; 0x32
    2b5e:	4821      	ldr	r0, [pc, #132]	; (2be4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2b60:	7841      	ldrb	r1, [r0, #1]
    2b62:	9804      	ldr	r0, [sp, #16]
    2b64:	4281      	cmp	r1, r0
    2b66:	bf84      	itt	hi
    2b68:	1a08      	subhi	r0, r1, r0
    2b6a:	4406      	addhi	r6, r0
    2b6c:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    2b70:	e7d2      	b.n	2b18 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e4>
    2b72:	481a      	ldr	r0, [pc, #104]	; (2bdc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    2b74:	4281      	cmp	r1, r0
    2b76:	dd04      	ble.n	2b82 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24e>
    2b78:	f240 6117 	movw	r1, #1559	; 0x617
    2b7c:	2070      	movs	r0, #112	; 0x70
    2b7e:	f001 fca1 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b82:	4819      	ldr	r0, [pc, #100]	; (2be8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    2b84:	4281      	cmp	r1, r0
    2b86:	da04      	bge.n	2b92 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    2b88:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    2b8c:	2070      	movs	r0, #112	; 0x70
    2b8e:	f001 fc99 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b92:	4816      	ldr	r0, [pc, #88]	; (2bec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>)
    2b94:	4290      	cmp	r0, r2
    2b96:	bfdc      	itt	le
    2b98:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    2b9c:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    2ba0:	dd05      	ble.n	2bae <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27a>
    2ba2:	2a00      	cmp	r2, #0
    2ba4:	bfbc      	itt	lt
    2ba6:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    2baa:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    2bae:	9806      	ldr	r0, [sp, #24]
    2bb0:	60c2      	str	r2, [r0, #12]
    2bb2:	2001      	movs	r0, #1
    2bb4:	9004      	str	r0, [sp, #16]
    2bb6:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    2bba:	2800      	cmp	r0, #0
    2bbc:	f47f aee6 	bne.w	298c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    2bc0:	9804      	ldr	r0, [sp, #16]
    2bc2:	b007      	add	sp, #28
    2bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bc8:	e000ed04 	.word	0xe000ed04
    2bcc:	003fffff 	.word	0x003fffff
    2bd0:	00000000 	.word	0x00000000
    2bd4:	20000f04 	.word	0x20000f04
    2bd8:	20000e84 	.word	0x20000e84
    2bdc:	07a12000 	.word	0x07a12000
    2be0:	1e847fff 	.word	0x1e847fff
    2be4:	20000012 	.word	0x20000012
    2be8:	f85ee000 	.word	0xf85ee000
    2bec:	1e848000 	.word	0x1e848000

00002bf0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    2bf0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2bf4:	4d80      	ldr	r5, [pc, #512]	; (2df8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x208>)
    2bf6:	b08c      	sub	sp, #48	; 0x30
    2bf8:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2bfc:	2000      	movs	r0, #0
    2bfe:	9009      	str	r0, [sp, #36]	; 0x24
    2c00:	2001      	movs	r0, #1
    2c02:	4c7e      	ldr	r4, [pc, #504]	; (2dfc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>)
    2c04:	f04f 0800 	mov.w	r8, #0
    2c08:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    2c0c:	4683      	mov	fp, r0
    2c0e:	9008      	str	r0, [sp, #32]
    2c10:	b124      	cbz	r4, 2c1c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    2c12:	2100      	movs	r1, #0
    2c14:	f240 70ee 	movw	r0, #2030	; 0x7ee
    2c18:	f3af 8000 	nop.w
    2c1c:	9808      	ldr	r0, [sp, #32]
    2c1e:	b390      	cbz	r0, 2c86 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    2c20:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    2c24:	b124      	cbz	r4, 2c30 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x40>
    2c26:	2100      	movs	r1, #0
    2c28:	f240 70f3 	movw	r0, #2035	; 0x7f3
    2c2c:	f3af 8000 	nop.w
    2c30:	f895 902e 	ldrb.w	r9, [r5, #46]	; 0x2e
    2c34:	2240      	movs	r2, #64	; 0x40
    2c36:	ea2b 0609 	bic.w	r6, fp, r9
    2c3a:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    2c3e:	eb07 1189 	add.w	r1, r7, r9, lsl #6
    2c42:	4682      	mov	sl, r0
    2c44:	f009 fcfb 	bl	c63e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2c48:	b124      	cbz	r4, 2c54 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x64>
    2c4a:	2100      	movs	r1, #0
    2c4c:	f240 50da 	movw	r0, #1498	; 0x5da
    2c50:	f3af 8000 	nop.w
    2c54:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2c58:	eb05 0189 	add.w	r1, r5, r9, lsl #2
    2c5c:	9000      	str	r0, [sp, #0]
    2c5e:	6a09      	ldr	r1, [r1, #32]
    2c60:	6201      	str	r1, [r0, #32]
    2c62:	b124      	cbz	r4, 2c6e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x7e>
    2c64:	2100      	movs	r1, #0
    2c66:	f240 50de 	movw	r0, #1502	; 0x5de
    2c6a:	f3af 8000 	nop.w
    2c6e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2c72:	b180      	cbz	r0, 2c96 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa6>
    2c74:	2c00      	cmp	r4, #0
    2c76:	bf1c      	itt	ne
    2c78:	2100      	movne	r1, #0
    2c7a:	f240 70f9 	movwne	r0, #2041	; 0x7f9
    2c7e:	d0c7      	beq.n	2c10 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2c80:	f3af 8000 	nop.w
    2c84:	e7c4      	b.n	2c10 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2c86:	e7ff      	b.n	2c88 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x98>
    2c88:	485d      	ldr	r0, [pc, #372]	; (2e00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    2c8a:	2800      	cmp	r0, #0
    2c8c:	bf18      	it	ne
    2c8e:	f3af 8000 	nopne.w
    2c92:	b662      	cpsie	i
    2c94:	e7c4      	b.n	2c20 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x30>
    2c96:	b124      	cbz	r4, 2ca2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb2>
    2c98:	2100      	movs	r1, #0
    2c9a:	f240 70fd 	movw	r0, #2045	; 0x7fd
    2c9e:	f3af 8000 	nop.w
    2ca2:	980c      	ldr	r0, [sp, #48]	; 0x30
    2ca4:	f81a 0010 	ldrb.w	r0, [sl, r0, lsl #1]
    2ca8:	2803      	cmp	r0, #3
    2caa:	d178      	bne.n	2d9e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    2cac:	f8dd 9000 	ldr.w	r9, [sp]
    2cb0:	f8cd 9018 	str.w	r9, [sp, #24]
    2cb4:	990c      	ldr	r1, [sp, #48]	; 0x30
    2cb6:	f899 0020 	ldrb.w	r0, [r9, #32]
    2cba:	4288      	cmp	r0, r1
    2cbc:	bf14      	ite	ne
    2cbe:	f04f 0a00 	movne.w	sl, #0
    2cc2:	f04f 0a01 	moveq.w	sl, #1
    2cc6:	f109 0c20 	add.w	ip, r9, #32
    2cca:	4686      	mov	lr, r0
    2ccc:	2220      	movs	r2, #32
    2cce:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    2cd2:	e003      	b.n	2cdc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xec>
    2cd4:	4602      	mov	r2, r0
    2cd6:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2cda:	7840      	ldrb	r0, [r0, #1]
    2cdc:	4288      	cmp	r0, r1
    2cde:	d002      	beq.n	2ce6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    2ce0:	2820      	cmp	r0, #32
    2ce2:	d00a      	beq.n	2cfa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    2ce4:	e7f6      	b.n	2cd4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xe4>
    2ce6:	2820      	cmp	r0, #32
    2ce8:	d007      	beq.n	2cfa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    2cea:	4586      	cmp	lr, r0
    2cec:	d107      	bne.n	2cfe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    2cee:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    2cf2:	7840      	ldrb	r0, [r0, #1]
    2cf4:	f88c 0000 	strb.w	r0, [ip]
    2cf8:	e007      	b.n	2d0a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    2cfa:	4640      	mov	r0, r8
    2cfc:	e00c      	b.n	2d18 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x128>
    2cfe:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2d02:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2d06:	7840      	ldrb	r0, [r0, #1]
    2d08:	7048      	strb	r0, [r1, #1]
    2d0a:	b124      	cbz	r4, 2d16 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x126>
    2d0c:	2100      	movs	r1, #0
    2d0e:	f240 5044 	movw	r0, #1348	; 0x544
    2d12:	f3af 8000 	nop.w
    2d16:	4658      	mov	r0, fp
    2d18:	ea10 0f0a 	tst.w	r0, sl
    2d1c:	bf18      	it	ne
    2d1e:	f889 b023 	strbne.w	fp, [r9, #35]	; 0x23
    2d22:	b3e0      	cbz	r0, 2d9e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    2d24:	b124      	cbz	r4, 2d30 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x140>
    2d26:	2100      	movs	r1, #0
    2d28:	f640 0002 	movw	r0, #2050	; 0x802
    2d2c:	f3af 8000 	nop.w
    2d30:	4632      	mov	r2, r6
    2d32:	2001      	movs	r0, #1
    2d34:	990c      	ldr	r1, [sp, #48]	; 0x30
    2d36:	f7ff f917 	bl	1f68 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21c>
    2d3a:	9806      	ldr	r0, [sp, #24]
    2d3c:	f890 9023 	ldrb.w	r9, [r0, #35]	; 0x23
    2d40:	b124      	cbz	r4, 2d4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x15c>
    2d42:	2100      	movs	r1, #0
    2d44:	f640 000d 	movw	r0, #2061	; 0x80d
    2d48:	f3af 8000 	nop.w
    2d4c:	482d      	ldr	r0, [pc, #180]	; (2e04 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x214>)
    2d4e:	2800      	cmp	r0, #0
    2d50:	bf18      	it	ne
    2d52:	f3af 8000 	nopne.w
    2d56:	f3ef 8010 	mrs	r0, PRIMASK
    2d5a:	b672      	cpsid	i
    2d5c:	9008      	str	r0, [sp, #32]
    2d5e:	b124      	cbz	r4, 2d6a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x17a>
    2d60:	2100      	movs	r1, #0
    2d62:	f640 0012 	movw	r0, #2066	; 0x812
    2d66:	f3af 8000 	nop.w
    2d6a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2d6e:	b138      	cbz	r0, 2d80 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x190>
    2d70:	2c00      	cmp	r4, #0
    2d72:	bf1c      	itt	ne
    2d74:	2100      	movne	r1, #0
    2d76:	f640 0016 	movwne	r0, #2070	; 0x816
    2d7a:	f43f af49 	beq.w	2c10 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2d7e:	e77f      	b.n	2c80 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x90>
    2d80:	f1b9 0f00 	cmp.w	r9, #0
    2d84:	d008      	beq.n	2d98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    2d86:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2d8a:	2820      	cmp	r0, #32
    2d8c:	d104      	bne.n	2d98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    2d8e:	4631      	mov	r1, r6
    2d90:	2002      	movs	r0, #2
    2d92:	f7ff f919 	bl	1fc8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x27c>
    2d96:	b1f8      	cbz	r0, 2dd8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    2d98:	b134      	cbz	r4, 2da8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b8>
    2d9a:	2100      	movs	r1, #0
    2d9c:	e000      	b.n	2da0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b0>
    2d9e:	e009      	b.n	2db4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c4>
    2da0:	f640 002a 	movw	r0, #2090	; 0x82a
    2da4:	f3af 8000 	nop.w
    2da8:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    2dac:	f885 b02b 	strb.w	fp, [r5, #43]	; 0x2b
    2db0:	2001      	movs	r0, #1
    2db2:	9009      	str	r0, [sp, #36]	; 0x24
    2db4:	b124      	cbz	r4, 2dc0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    2db6:	2100      	movs	r1, #0
    2db8:	f640 0033 	movw	r0, #2099	; 0x833
    2dbc:	f3af 8000 	nop.w
    2dc0:	9808      	ldr	r0, [sp, #32]
    2dc2:	b188      	cbz	r0, 2de8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f8>
    2dc4:	b124      	cbz	r4, 2dd0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e0>
    2dc6:	2100      	movs	r1, #0
    2dc8:	f640 0037 	movw	r0, #2103	; 0x837
    2dcc:	f3af 8000 	nop.w
    2dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
    2dd2:	b00d      	add	sp, #52	; 0x34
    2dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2dd8:	2c00      	cmp	r4, #0
    2dda:	d0f1      	beq.n	2dc0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    2ddc:	2100      	movs	r1, #0
    2dde:	f640 0025 	movw	r0, #2085	; 0x825
    2de2:	f3af 8000 	nop.w
    2de6:	e7e6      	b.n	2db6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2de8:	4805      	ldr	r0, [pc, #20]	; (2e00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    2dea:	2800      	cmp	r0, #0
    2dec:	bf18      	it	ne
    2dee:	f3af 8000 	nopne.w
    2df2:	b662      	cpsie	i
    2df4:	e7e6      	b.n	2dc4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d4>
    2df6:	0000      	.short	0x0000
    2df8:	20000f04 	.word	0x20000f04
	...

00002e08 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    2e08:	2820      	cmp	r0, #32
    2e0a:	bf24      	itt	cs
    2e0c:	2000      	movcs	r0, #0
    2e0e:	4770      	bxcs	lr
    2e10:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2e14:	4b03      	ldr	r3, [pc, #12]	; (2e24 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    2e16:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
    2e1a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2e1e:	6042      	str	r2, [r0, #4]
    2e20:	2001      	movs	r0, #1
    2e22:	4770      	bx	lr
    2e24:	20000b84 	.word	0x20000b84

00002e28 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    2e28:	b510      	push	{r4, lr}
    2e2a:	2820      	cmp	r0, #32
    2e2c:	d211      	bcs.n	2e52 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2e2e:	490e      	ldr	r1, [pc, #56]	; (2e68 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2e30:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    2e34:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    2e38:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2e3c:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2e40:	b13b      	cbz	r3, 2e52 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2e42:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    2e46:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    2e4a:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    2e4e:	2a01      	cmp	r2, #1
    2e50:	d001      	beq.n	2e56 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2e52:	2000      	movs	r0, #0
    2e54:	bd10      	pop	{r4, pc}
    2e56:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    2e5a:	4601      	mov	r1, r0
    2e5c:	2000      	movs	r0, #0
    2e5e:	f7ff f883 	bl	1f68 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21c>
    2e62:	2001      	movs	r0, #1
    2e64:	bd10      	pop	{r4, pc}
    2e66:	0000      	.short	0x0000
    2e68:	20000f04 	.word	0x20000f04

00002e6c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2e6c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2e70:	4e7e      	ldr	r6, [pc, #504]	; (306c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x200>)
    2e72:	4680      	mov	r8, r0
    2e74:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2e78:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2e7c:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2e80:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2e84:	2800      	cmp	r0, #0
    2e86:	d065      	beq.n	2f54 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    2e88:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    2e8c:	4d78      	ldr	r5, [pc, #480]	; (3070 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x204>)
    2e8e:	b125      	cbz	r5, 2e9a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2e90:	2100      	movs	r1, #0
    2e92:	f640 30b9 	movw	r0, #3001	; 0xbb9
    2e96:	f3af 8000 	nop.w
    2e9a:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    2e9e:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2ea2:	2801      	cmp	r0, #1
    2ea4:	d018      	beq.n	2ed8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2ea6:	b2c0      	uxtb	r0, r0
    2ea8:	2804      	cmp	r0, #4
    2eaa:	bf1c      	itt	ne
    2eac:	2805      	cmpne	r0, #5
    2eae:	2806      	cmpne	r0, #6
    2eb0:	d055      	beq.n	2f5e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf2>
    2eb2:	b12d      	cbz	r5, 2ec0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2eb4:	f04f 0100 	mov.w	r1, #0
    2eb8:	f640 30c5 	movw	r0, #3013	; 0xbc5
    2ebc:	f3af 8000 	nop.w
    2ec0:	f001 fc26 	bl	4710 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2ec4:	b125      	cbz	r5, 2ed0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    2ec6:	2100      	movs	r1, #0
    2ec8:	f640 30c9 	movw	r0, #3017	; 0xbc9
    2ecc:	f3af 8000 	nop.w
    2ed0:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2ed4:	2801      	cmp	r0, #1
    2ed6:	d1e6      	bne.n	2ea6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2ed8:	2401      	movs	r4, #1
    2eda:	b125      	cbz	r5, 2ee6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2edc:	2100      	movs	r1, #0
    2ede:	f44f 603d 	mov.w	r0, #3024	; 0xbd0
    2ee2:	f3af 8000 	nop.w
    2ee6:	b3a4      	cbz	r4, 2f52 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe6>
    2ee8:	2000      	movs	r0, #0
    2eea:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2eee:	b125      	cbz	r5, 2efa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x8e>
    2ef0:	2100      	movs	r1, #0
    2ef2:	f640 30d5 	movw	r0, #3029	; 0xbd5
    2ef6:	f3af 8000 	nop.w
    2efa:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    2efe:	2001      	movs	r0, #1
    2f00:	ea20 090b 	bic.w	r9, r0, fp
    2f04:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    2f08:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2f0c:	2240      	movs	r2, #64	; 0x40
    2f0e:	f009 fb96 	bl	c63e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2f12:	b125      	cbz	r5, 2f1e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb2>
    2f14:	2100      	movs	r1, #0
    2f16:	f240 50da 	movw	r0, #1498	; 0x5da
    2f1a:	f3af 8000 	nop.w
    2f1e:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    2f22:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    2f26:	6a00      	ldr	r0, [r0, #32]
    2f28:	f8ca 0020 	str.w	r0, [sl, #32]
    2f2c:	b125      	cbz	r5, 2f38 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xcc>
    2f2e:	2100      	movs	r1, #0
    2f30:	f240 50de 	movw	r0, #1502	; 0x5de
    2f34:	f3af 8000 	nop.w
    2f38:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2f3c:	b1e0      	cbz	r0, 2f78 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10c>
    2f3e:	2d00      	cmp	r5, #0
    2f40:	bf1c      	itt	ne
    2f42:	2100      	movne	r1, #0
    2f44:	f640 30db 	movwne	r0, #3035	; 0xbdb
    2f48:	d0c7      	beq.n	2eda <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2f4a:	bf00      	nop
    2f4c:	f3af 8000 	nop.w
    2f50:	e7c3      	b.n	2eda <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2f52:	e00a      	b.n	2f6a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xfe>
    2f54:	f44f 613b 	mov.w	r1, #2992	; 0xbb0
    2f58:	2070      	movs	r0, #112	; 0x70
    2f5a:	f001 fab3 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f5e:	464a      	mov	r2, r9
    2f60:	4641      	mov	r1, r8
    2f62:	2001      	movs	r0, #1
    2f64:	f7ff f800 	bl	1f68 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21c>
    2f68:	e7ac      	b.n	2ec4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    2f6a:	4842      	ldr	r0, [pc, #264]	; (3074 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    2f6c:	2800      	cmp	r0, #0
    2f6e:	bf18      	it	ne
    2f70:	f3af 8000 	nopne.w
    2f74:	b662      	cpsie	i
    2f76:	e7b7      	b.n	2ee8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7c>
    2f78:	b125      	cbz	r5, 2f84 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x118>
    2f7a:	2100      	movs	r1, #0
    2f7c:	f640 30df 	movw	r0, #3039	; 0xbdf
    2f80:	f3af 8000 	nop.w
    2f84:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    2f88:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2f8c:	4640      	mov	r0, r8
    2f8e:	461c      	mov	r4, r3
    2f90:	f04f 0b20 	mov.w	fp, #32
    2f94:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    2f98:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2f9c:	e004      	b.n	2fa8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13c>
    2f9e:	46a3      	mov	fp, r4
    2fa0:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    2fa4:	f89c 4001 	ldrb.w	r4, [ip, #1]
    2fa8:	4284      	cmp	r4, r0
    2faa:	d002      	beq.n	2fb2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x146>
    2fac:	2c20      	cmp	r4, #32
    2fae:	d02b      	beq.n	3008 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    2fb0:	e7f5      	b.n	2f9e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x132>
    2fb2:	2c20      	cmp	r4, #32
    2fb4:	d028      	beq.n	3008 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    2fb6:	42a3      	cmp	r3, r4
    2fb8:	d104      	bne.n	2fc4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x158>
    2fba:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    2fbe:	7840      	ldrb	r0, [r0, #1]
    2fc0:	7008      	strb	r0, [r1, #0]
    2fc2:	e005      	b.n	2fd0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x164>
    2fc4:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    2fc8:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    2fcc:	7840      	ldrb	r0, [r0, #1]
    2fce:	7048      	strb	r0, [r1, #1]
    2fd0:	f1ba 0f00 	cmp.w	sl, #0
    2fd4:	d011      	beq.n	2ffa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    2fd6:	b125      	cbz	r5, 2fe2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x176>
    2fd8:	2100      	movs	r1, #0
    2fda:	f240 503c 	movw	r0, #1340	; 0x53c
    2fde:	f3af 8000 	nop.w
    2fe2:	f89a 0000 	ldrb.w	r0, [sl]
    2fe6:	42a0      	cmp	r0, r4
    2fe8:	d107      	bne.n	2ffa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    2fea:	b125      	cbz	r5, 2ff6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18a>
    2fec:	2100      	movs	r1, #0
    2fee:	f240 503f 	movw	r0, #1343	; 0x53f
    2ff2:	f3af 8000 	nop.w
    2ff6:	f88a b000 	strb.w	fp, [sl]
    2ffa:	b15d      	cbz	r5, 3014 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    2ffc:	2100      	movs	r1, #0
    2ffe:	f240 5044 	movw	r0, #1348	; 0x544
    3002:	f3af 8000 	nop.w
    3006:	e000      	b.n	300a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    3008:	b125      	cbz	r5, 3014 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    300a:	2100      	movs	r1, #0
    300c:	f640 30e3 	movw	r0, #3043	; 0xbe3
    3010:	f3af 8000 	nop.w
    3014:	4818      	ldr	r0, [pc, #96]	; (3078 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    3016:	2800      	cmp	r0, #0
    3018:	bf18      	it	ne
    301a:	f3af 8000 	nopne.w
    301e:	f3ef 8410 	mrs	r4, PRIMASK
    3022:	b672      	cpsid	i
    3024:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    3028:	b138      	cbz	r0, 303a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ce>
    302a:	2d00      	cmp	r5, #0
    302c:	bf1c      	itt	ne
    302e:	2100      	movne	r1, #0
    3030:	f640 30e9 	movwne	r0, #3049	; 0xbe9
    3034:	f43f af51 	beq.w	2eda <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3038:	e788      	b.n	2f4c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe0>
    303a:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    303e:	2001      	movs	r0, #1
    3040:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    3044:	b154      	cbz	r4, 305c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1f0>
    3046:	2d00      	cmp	r5, #0
    3048:	bf08      	it	eq
    304a:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    304e:	2100      	movs	r1, #0
    3050:	f640 30f6 	movw	r0, #3062	; 0xbf6
    3054:	f3af 8000 	nop.w
    3058:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    305c:	4805      	ldr	r0, [pc, #20]	; (3074 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    305e:	2800      	cmp	r0, #0
    3060:	bf18      	it	ne
    3062:	f3af 8000 	nopne.w
    3066:	b662      	cpsie	i
    3068:	e7ed      	b.n	3046 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1da>
    306a:	0000      	.short	0x0000
    306c:	20000f04 	.word	0x20000f04
	...

0000307c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    307c:	b570      	push	{r4, r5, r6, lr}
    307e:	460d      	mov	r5, r1
    3080:	4606      	mov	r6, r0
    3082:	f001 f9a9 	bl	43d8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3086:	480f      	ldr	r0, [pc, #60]	; (30c4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    3088:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    308c:	2400      	movs	r4, #0
    308e:	3880      	subs	r0, #128	; 0x80
    3090:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    3094:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    3098:	b129      	cbz	r1, 30a6 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    309a:	1c61      	adds	r1, r4, #1
    309c:	b2cc      	uxtb	r4, r1
    309e:	2c20      	cmp	r4, #32
    30a0:	d3f8      	bcc.n	3094 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    30a2:	2020      	movs	r0, #32
    30a4:	bd70      	pop	{r4, r5, r6, pc}
    30a6:	4808      	ldr	r0, [pc, #32]	; (30c8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    30a8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    30ac:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    30b0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    30b4:	4621      	mov	r1, r4
    30b6:	6045      	str	r5, [r0, #4]
    30b8:	2001      	movs	r0, #1
    30ba:	f7fe ff55 	bl	1f68 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21c>
    30be:	4620      	mov	r0, r4
    30c0:	bd70      	pop	{r4, r5, r6, pc}
    30c2:	0000      	.short	0x0000
    30c4:	20000f04 	.word	0x20000f04
    30c8:	20000b84 	.word	0x20000b84

000030cc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    30cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30d0:	b083      	sub	sp, #12
    30d2:	f000 fb21 	bl	3718 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    30d6:	4605      	mov	r5, r0
    30d8:	f000 fdd4 	bl	3c84 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    30dc:	4c63      	ldr	r4, [pc, #396]	; (326c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a0>)
    30de:	68a0      	ldr	r0, [r4, #8]
    30e0:	f1b0 3fff 	cmp.w	r0, #4294967295
    30e4:	bf1c      	itt	ne
    30e6:	f04f 30ff 	movne.w	r0, #4294967295
    30ea:	60a0      	strne	r0, [r4, #8]
    30ec:	7fa0      	ldrb	r0, [r4, #30]
    30ee:	f8df b180 	ldr.w	fp, [pc, #384]	; 3270 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a4>
    30f2:	b9a8      	cbnz	r0, 3120 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    30f4:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    30f8:	1a08      	subs	r0, r1, r0
    30fa:	0200      	lsls	r0, r0, #8
    30fc:	17c1      	asrs	r1, r0, #31
    30fe:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    3102:	1200      	asrs	r0, r0, #8
    3104:	f44f 710c 	mov.w	r1, #560	; 0x230
    3108:	f009 f958 	bl	c3bc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    310c:	6921      	ldr	r1, [r4, #16]
    310e:	4408      	add	r0, r1
    3110:	1a28      	subs	r0, r5, r0
    3112:	0200      	lsls	r0, r0, #8
    3114:	17c1      	asrs	r1, r0, #31
    3116:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    311a:	1200      	asrs	r0, r0, #8
    311c:	0fc0      	lsrs	r0, r0, #31
    311e:	d00b      	beq.n	3138 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    3120:	7e60      	ldrb	r0, [r4, #25]
    3122:	b1e8      	cbz	r0, 3160 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x94>
    3124:	f000 fc04 	bl	3930 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    3128:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    312c:	b1f0      	cbz	r0, 316c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa0>
    312e:	f240 4154 	movw	r1, #1108	; 0x454
    3132:	2070      	movs	r0, #112	; 0x70
    3134:	f001 f9c6 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3138:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    313c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    3140:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3144:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    3148:	6840      	ldr	r0, [r0, #4]
    314a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    314e:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    3152:	2108      	movs	r1, #8
    3154:	4790      	blx	r2
    3156:	f240 4143 	movw	r1, #1091	; 0x443
    315a:	2070      	movs	r0, #112	; 0x70
    315c:	f001 f9b2 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3160:	1ce8      	adds	r0, r5, #3
    3162:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3166:	f000 fadd 	bl	3724 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    316a:	e7dd      	b.n	3128 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x5c>
    316c:	f04f 0a01 	mov.w	sl, #1
    3170:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    3174:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    3178:	2820      	cmp	r0, #32
    317a:	d024      	beq.n	31c6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    317c:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    3180:	2020      	movs	r0, #32
    3182:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    3186:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    318a:	2600      	movs	r6, #0
    318c:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    3190:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    3194:	4837      	ldr	r0, [pc, #220]	; (3274 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a8>)
    3196:	6026      	str	r6, [r4, #0]
    3198:	7800      	ldrb	r0, [r0, #0]
    319a:	2802      	cmp	r0, #2
    319c:	bf16      	itet	ne
    319e:	2803      	cmpne	r0, #3
    31a0:	2001      	moveq	r0, #1
    31a2:	2000      	movne	r0, #0
    31a4:	7720      	strb	r0, [r4, #28]
    31a6:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    31aa:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    31ae:	f899 0020 	ldrb.w	r0, [r9, #32]
    31b2:	2820      	cmp	r0, #32
    31b4:	d031      	beq.n	321a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    31b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    31ba:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    31be:	7d81      	ldrb	r1, [r0, #22]
    31c0:	2901      	cmp	r1, #1
    31c2:	d005      	beq.n	31d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    31c4:	e029      	b.n	321a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    31c6:	f240 4157 	movw	r1, #1111	; 0x457
    31ca:	2070      	movs	r0, #112	; 0x70
    31cc:	f001 f97a 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31d0:	46ab      	mov	fp, r5
    31d2:	f100 0508 	add.w	r5, r0, #8
    31d6:	8a40      	ldrh	r0, [r0, #18]
    31d8:	aa01      	add	r2, sp, #4
    31da:	4669      	mov	r1, sp
    31dc:	f000 f946 	bl	346c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    31e0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    31e4:	2820      	cmp	r0, #32
    31e6:	d004      	beq.n	31f2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x126>
    31e8:	6920      	ldr	r0, [r4, #16]
    31ea:	1d40      	adds	r0, r0, #5
    31ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    31f0:	e00b      	b.n	320a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x13e>
    31f2:	8968      	ldrh	r0, [r5, #10]
    31f4:	f10b 0b09 	add.w	fp, fp, #9
    31f8:	b128      	cbz	r0, 3206 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x13a>
    31fa:	f001 f8ff 	bl	43fc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    31fe:	2800      	cmp	r0, #0
    3200:	bf08      	it	eq
    3202:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    3206:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    320a:	e9d5 2100 	ldrd	r2, r1, [r5]
    320e:	1a89      	subs	r1, r1, r2
    3210:	6028      	str	r0, [r5, #0]
    3212:	4408      	add	r0, r1
    3214:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3218:	6068      	str	r0, [r5, #4]
    321a:	4639      	mov	r1, r7
    321c:	2001      	movs	r0, #1
    321e:	f7fe fed3 	bl	1fc8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x27c>
    3222:	2800      	cmp	r0, #0
    3224:	d0f9      	beq.n	321a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    3226:	4814      	ldr	r0, [pc, #80]	; (3278 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>)
    3228:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    322c:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    3230:	2802      	cmp	r0, #2
    3232:	d104      	bne.n	323e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x172>
    3234:	463a      	mov	r2, r7
    3236:	4641      	mov	r1, r8
    3238:	2006      	movs	r0, #6
    323a:	f7fe fe95 	bl	1f68 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21c>
    323e:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    3242:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    3246:	2820      	cmp	r0, #32
    3248:	d003      	beq.n	3252 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x186>
    324a:	480c      	ldr	r0, [pc, #48]	; (327c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    324c:	7840      	ldrb	r0, [r0, #1]
    324e:	f001 fa09 	bl	4664 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    3252:	7f20      	ldrb	r0, [r4, #28]
    3254:	2800      	cmp	r0, #0
    3256:	bf04      	itt	eq
    3258:	b003      	addeq	sp, #12
    325a:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    325e:	f000 fd5b 	bl	3d18 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    3262:	7726      	strb	r6, [r4, #28]
    3264:	7766      	strb	r6, [r4, #29]
    3266:	b003      	add	sp, #12
    3268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    326c:	20000f04 	.word	0x20000f04
    3270:	20000b84 	.word	0x20000b84
    3274:	20000012 	.word	0x20000012
    3278:	20000e84 	.word	0x20000e84
    327c:	20000010 	.word	0x20000010

00003280 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    3280:	b510      	push	{r4, lr}
    3282:	4c30      	ldr	r4, [pc, #192]	; (3344 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc4>)
    3284:	b082      	sub	sp, #8
    3286:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    328a:	2920      	cmp	r1, #32
    328c:	d008      	beq.n	32a0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    328e:	68a1      	ldr	r1, [r4, #8]
    3290:	f1b1 3fff 	cmp.w	r1, #4294967295
    3294:	d009      	beq.n	32aa <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    3296:	f640 21e8 	movw	r1, #2792	; 0xae8
    329a:	2070      	movs	r0, #112	; 0x70
    329c:	f001 f912 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32a0:	f640 21e7 	movw	r1, #2791	; 0xae7
    32a4:	2070      	movs	r0, #112	; 0x70
    32a6:	f001 f90d 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32aa:	6862      	ldr	r2, [r4, #4]
    32ac:	4601      	mov	r1, r0
    32ae:	4b26      	ldr	r3, [pc, #152]	; (3348 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc8>)
    32b0:	1850      	adds	r0, r2, r1
    32b2:	429a      	cmp	r2, r3
    32b4:	d904      	bls.n	32c0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    32b6:	f240 6116 	movw	r1, #1558	; 0x616
    32ba:	2070      	movs	r0, #112	; 0x70
    32bc:	f001 f902 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32c0:	4a22      	ldr	r2, [pc, #136]	; (334c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    32c2:	4291      	cmp	r1, r2
    32c4:	dd04      	ble.n	32d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    32c6:	f240 6117 	movw	r1, #1559	; 0x617
    32ca:	2070      	movs	r0, #112	; 0x70
    32cc:	f001 f8fa 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32d0:	4a1f      	ldr	r2, [pc, #124]	; (3350 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    32d2:	4291      	cmp	r1, r2
    32d4:	da04      	bge.n	32e0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    32d6:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    32da:	2070      	movs	r0, #112	; 0x70
    32dc:	f001 f8f2 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32e0:	491c      	ldr	r1, [pc, #112]	; (3354 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    32e2:	4281      	cmp	r1, r0
    32e4:	bfdc      	itt	le
    32e6:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    32ea:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    32ee:	dd05      	ble.n	32fc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    32f0:	2800      	cmp	r0, #0
    32f2:	bfbc      	itt	lt
    32f4:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    32f8:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    32fc:	aa01      	add	r2, sp, #4
    32fe:	4669      	mov	r1, sp
    3300:	f000 f8b4 	bl	346c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    3304:	f89d 0004 	ldrb.w	r0, [sp, #4]
    3308:	280f      	cmp	r0, #15
    330a:	bf8c      	ite	hi
    330c:	2001      	movhi	r0, #1
    330e:	2000      	movls	r0, #0
    3310:	9900      	ldr	r1, [sp, #0]
    3312:	4408      	add	r0, r1
    3314:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    3318:	60a1      	str	r1, [r4, #8]
    331a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    331e:	2800      	cmp	r0, #0
    3320:	bf04      	itt	eq
    3322:	b002      	addeq	sp, #8
    3324:	bd10      	popeq	{r4, pc}
    3326:	2301      	movs	r3, #1
    3328:	2203      	movs	r2, #3
    332a:	2005      	movs	r0, #5
    332c:	f000 fb7a 	bl	3a24 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    3330:	2800      	cmp	r0, #0
    3332:	bf1c      	itt	ne
    3334:	b002      	addne	sp, #8
    3336:	bd10      	popne	{r4, pc}
    3338:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
    333c:	2070      	movs	r0, #112	; 0x70
    333e:	f001 f8c1 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3342:	0000      	.short	0x0000
    3344:	20000f04 	.word	0x20000f04
    3348:	1e847fff 	.word	0x1e847fff
    334c:	07a12000 	.word	0x07a12000
    3350:	f85ee000 	.word	0xf85ee000
    3354:	1e848000 	.word	0x1e848000

00003358 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    3358:	b570      	push	{r4, r5, r6, lr}
    335a:	4c1e      	ldr	r4, [pc, #120]	; (33d4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    335c:	2120      	movs	r1, #32
    335e:	f884 1020 	strb.w	r1, [r4, #32]
    3362:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    3366:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    336a:	2000      	movs	r0, #0
    336c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    3370:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3374:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    3378:	1e42      	subs	r2, r0, #1
    337a:	60a2      	str	r2, [r4, #8]
    337c:	6020      	str	r0, [r4, #0]
    337e:	77a0      	strb	r0, [r4, #30]
    3380:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    3384:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    3388:	7720      	strb	r0, [r4, #28]
    338a:	7760      	strb	r0, [r4, #29]
    338c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    3390:	4911      	ldr	r1, [pc, #68]	; (33d8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    3392:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    3396:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    339a:	7008      	strb	r0, [r1, #0]
    339c:	7048      	strb	r0, [r1, #1]
    339e:	8048      	strh	r0, [r1, #2]
    33a0:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    33a4:	2210      	movs	r2, #16
    33a6:	7088      	strb	r0, [r1, #2]
    33a8:	f801 0f04 	strb.w	r0, [r1, #4]!
    33ac:	1e52      	subs	r2, r2, #1
    33ae:	d1fa      	bne.n	33a6 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    33b0:	4d0a      	ldr	r5, [pc, #40]	; (33dc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    33b2:	2601      	movs	r6, #1
    33b4:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    33b8:	20ff      	movs	r0, #255	; 0xff
    33ba:	7028      	strb	r0, [r5, #0]
    33bc:	4808      	ldr	r0, [pc, #32]	; (33e0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    33be:	f001 f933 	bl	4628 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    33c2:	7068      	strb	r0, [r5, #1]
    33c4:	f001 f98e 	bl	46e4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    33c8:	60a8      	str	r0, [r5, #8]
    33ca:	f000 fcd3 	bl	3d74 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    33ce:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    33d2:	bd70      	pop	{r4, r5, r6, pc}
    33d4:	20000f04 	.word	0x20000f04
    33d8:	20000012 	.word	0x20000012
    33dc:	20000010 	.word	0x20000010
    33e0:	00001e25 	.word	0x00001e25

000033e4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    33e4:	b570      	push	{r4, r5, r6, lr}
    33e6:	4604      	mov	r4, r0
    33e8:	4615      	mov	r5, r2
    33ea:	4608      	mov	r0, r1
    33ec:	f008 ffae 	bl	c34c <sym_BE2HGIHF5RDQALAHNCCVX54XTGKEN4KZFXFBHBQ>
    33f0:	4a0f      	ldr	r2, [pc, #60]	; (3430 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    33f2:	1b01      	subs	r1, r0, r4
    33f4:	f102 0c01 	add.w	ip, r2, #1
    33f8:	ebb1 0f9c 	cmp.w	r1, ip, lsr #2
    33fc:	bf24      	itt	cs
    33fe:	1a23      	subcs	r3, r4, r0
    3400:	ebb3 0f9c 	cmpcs.w	r3, ip, lsr #2
    3404:	d30b      	bcc.n	341e <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    3406:	428a      	cmp	r2, r1
    3408:	d203      	bcs.n	3412 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    340a:	1b11      	subs	r1, r2, r4
    340c:	4408      	add	r0, r1
    340e:	1c41      	adds	r1, r0, #1
    3410:	e005      	b.n	341e <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    3412:	429a      	cmp	r2, r3
    3414:	d207      	bcs.n	3426 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    3416:	1a10      	subs	r0, r2, r0
    3418:	4420      	add	r0, r4
    341a:	1c40      	adds	r0, r0, #1
    341c:	4241      	negs	r1, r0
    341e:	f101 000f 	add.w	r0, r1, #15
    3422:	1a28      	subs	r0, r5, r0
    3424:	bd70      	pop	{r4, r5, r6, pc}
    3426:	f640 310b 	movw	r1, #2827	; 0xb0b
    342a:	2070      	movs	r0, #112	; 0x70
    342c:	f001 f84a 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3430:	1e847fff 	.word	0x1e847fff

00003434 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    3434:	0b41      	lsrs	r1, r0, #13
    3436:	f248 6237 	movw	r2, #34359	; 0x8637
    343a:	4351      	muls	r1, r2
    343c:	0c0a      	lsrs	r2, r1, #16
    343e:	4b09      	ldr	r3, [pc, #36]	; (3464 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    3440:	0251      	lsls	r1, r2, #9
    3442:	fb02 0203 	mla	r2, r2, r3, r0
    3446:	4808      	ldr	r0, [pc, #32]	; (3468 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    3448:	4350      	muls	r0, r2
    344a:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    344e:	306e      	adds	r0, #110	; 0x6e
    3450:	0d40      	lsrs	r0, r0, #21
    3452:	425b      	negs	r3, r3
    3454:	fb10 f303 	smulbb	r3, r0, r3
    3458:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    345c:	bf88      	it	hi
    345e:	1c49      	addhi	r1, r1, #1
    3460:	4408      	add	r0, r1
    3462:	4770      	bx	lr
    3464:	ffffc2f7 	.word	0xffffc2f7
    3468:	00010c6f 	.word	0x00010c6f

0000346c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    346c:	0b43      	lsrs	r3, r0, #13
    346e:	f248 6c37 	movw	ip, #34359	; 0x8637
    3472:	fb03 f30c 	mul.w	r3, r3, ip
    3476:	b430      	push	{r4, r5}
    3478:	0c1b      	lsrs	r3, r3, #16
    347a:	f8df c044 	ldr.w	ip, [pc, #68]	; 34c0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    347e:	025c      	lsls	r4, r3, #9
    3480:	fb03 030c 	mla	r3, r3, ip, r0
    3484:	480f      	ldr	r0, [pc, #60]	; (34c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    3486:	4358      	muls	r0, r3
    3488:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    348c:	eb04 000c 	add.w	r0, r4, ip
    3490:	f643 5409 	movw	r4, #15625	; 0x3d09
    3494:	fb1c f404 	smulbb	r4, ip, r4
    3498:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    349c:	f643 5508 	movw	r5, #15624	; 0x3d08
    34a0:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    34a4:	442c      	add	r4, r5
    34a6:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    34aa:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    34ae:	bf84      	itt	hi
    34b0:	f04f 0c00 	movhi.w	ip, #0
    34b4:	1c40      	addhi	r0, r0, #1
    34b6:	6008      	str	r0, [r1, #0]
    34b8:	f882 c000 	strb.w	ip, [r2]
    34bc:	bc30      	pop	{r4, r5}
    34be:	4770      	bx	lr
    34c0:	ffffc2f7 	.word	0xffffc2f7
    34c4:	00010c6f 	.word	0x00010c6f

000034c8 <MPSL_IRQ_RTC0_Handler>:
    34c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34cc:	4c38      	ldr	r4, [pc, #224]	; (35b0 <MPSL_IRQ_RTC0_Handler+0xe8>)
    34ce:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    34d2:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 35b4 <MPSL_IRQ_RTC0_Handler+0xec>
    34d6:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    34da:	f44f 6600 	mov.w	r6, #2048	; 0x800
    34de:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    34e2:	f04f 0500 	mov.w	r5, #0
    34e6:	bf1c      	itt	ne
    34e8:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    34ec:	2800      	cmpne	r0, #0
    34ee:	d017      	beq.n	3520 <MPSL_IRQ_RTC0_Handler+0x58>
    34f0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    34f4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    34f8:	482f      	ldr	r0, [pc, #188]	; (35b8 <MPSL_IRQ_RTC0_Handler+0xf0>)
    34fa:	6800      	ldr	r0, [r0, #0]
    34fc:	f8d8 1000 	ldr.w	r1, [r8]
    3500:	eba0 0001 	sub.w	r0, r0, r1
    3504:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3508:	2802      	cmp	r0, #2
    350a:	d302      	bcc.n	3512 <MPSL_IRQ_RTC0_Handler+0x4a>
    350c:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3510:	d306      	bcc.n	3520 <MPSL_IRQ_RTC0_Handler+0x58>
    3512:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3516:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    351a:	2004      	movs	r0, #4
    351c:	f7fe ff68 	bl	23f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3520:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3524:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3528:	bf1c      	itt	ne
    352a:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    352e:	2800      	cmpne	r0, #0
    3530:	d017      	beq.n	3562 <MPSL_IRQ_RTC0_Handler+0x9a>
    3532:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    3536:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    353a:	4820      	ldr	r0, [pc, #128]	; (35bc <MPSL_IRQ_RTC0_Handler+0xf4>)
    353c:	6800      	ldr	r0, [r0, #0]
    353e:	f8d8 1000 	ldr.w	r1, [r8]
    3542:	eba0 0001 	sub.w	r0, r0, r1
    3546:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    354a:	2802      	cmp	r0, #2
    354c:	d302      	bcc.n	3554 <MPSL_IRQ_RTC0_Handler+0x8c>
    354e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3552:	d306      	bcc.n	3562 <MPSL_IRQ_RTC0_Handler+0x9a>
    3554:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3558:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    355c:	2005      	movs	r0, #5
    355e:	f7fe ff47 	bl	23f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3562:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3566:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    356a:	bf1a      	itte	ne
    356c:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    3570:	2800      	cmpne	r0, #0
    3572:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3576:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    357a:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    357e:	4810      	ldr	r0, [pc, #64]	; (35c0 <MPSL_IRQ_RTC0_Handler+0xf8>)
    3580:	6800      	ldr	r0, [r0, #0]
    3582:	f8d8 1000 	ldr.w	r1, [r8]
    3586:	eba0 0001 	sub.w	r0, r0, r1
    358a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    358e:	2802      	cmp	r0, #2
    3590:	d304      	bcc.n	359c <MPSL_IRQ_RTC0_Handler+0xd4>
    3592:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3596:	bf38      	it	cc
    3598:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    359c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    35a0:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    35a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    35a8:	2006      	movs	r0, #6
    35aa:	f7fe bf21 	b.w	23f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    35ae:	0000      	.short	0x0000
    35b0:	4000b000 	.word	0x4000b000
    35b4:	4000b504 	.word	0x4000b504
    35b8:	4000b540 	.word	0x4000b540
    35bc:	4000b544 	.word	0x4000b544
    35c0:	4000b548 	.word	0x4000b548

000035c4 <MPSL_IRQ_TIMER0_Handler>:
    35c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35c8:	4d3a      	ldr	r5, [pc, #232]	; (36b4 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    35ca:	7828      	ldrb	r0, [r5, #0]
    35cc:	2804      	cmp	r0, #4
    35ce:	d06c      	beq.n	36aa <MPSL_IRQ_TIMER0_Handler+0xe6>
    35d0:	1ce8      	adds	r0, r5, #3
    35d2:	2201      	movs	r2, #1
    35d4:	7801      	ldrb	r1, [r0, #0]
    35d6:	b159      	cbz	r1, 35f0 <MPSL_IRQ_TIMER0_Handler+0x2c>
    35d8:	2901      	cmp	r1, #1
    35da:	bf08      	it	eq
    35dc:	706a      	strbeq	r2, [r5, #1]
    35de:	d002      	beq.n	35e6 <MPSL_IRQ_TIMER0_Handler+0x22>
    35e0:	7869      	ldrb	r1, [r5, #1]
    35e2:	2900      	cmp	r1, #0
    35e4:	d05c      	beq.n	36a0 <MPSL_IRQ_TIMER0_Handler+0xdc>
    35e6:	2102      	movs	r1, #2
    35e8:	7001      	strb	r1, [r0, #0]
    35ea:	7840      	ldrb	r0, [r0, #1]
    35ec:	f000 fae2 	bl	3bb4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    35f0:	4c31      	ldr	r4, [pc, #196]	; (36b8 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    35f2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    35f6:	f04f 0800 	mov.w	r8, #0
    35fa:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    35fe:	f44f 7680 	mov.w	r6, #256	; 0x100
    3602:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    3606:	bf1c      	itt	ne
    3608:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    360c:	2800      	cmpne	r0, #0
    360e:	d008      	beq.n	3622 <MPSL_IRQ_TIMER0_Handler+0x5e>
    3610:	f04f 0003 	mov.w	r0, #3
    3614:	f000 face 	bl	3bb4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3618:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    361c:	2003      	movs	r0, #3
    361e:	f7fe fee7 	bl	23f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3622:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3626:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    362a:	bf1c      	itt	ne
    362c:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    3630:	2800      	cmpne	r0, #0
    3632:	d008      	beq.n	3646 <MPSL_IRQ_TIMER0_Handler+0x82>
    3634:	f04f 0002 	mov.w	r0, #2
    3638:	f000 fabc 	bl	3bb4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    363c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3640:	2002      	movs	r0, #2
    3642:	f7fe fed5 	bl	23f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3646:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    364a:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    364e:	bf1c      	itt	ne
    3650:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    3654:	2800      	cmpne	r0, #0
    3656:	d008      	beq.n	366a <MPSL_IRQ_TIMER0_Handler+0xa6>
    3658:	f04f 0001 	mov.w	r0, #1
    365c:	f000 faaa 	bl	3bb4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3660:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3664:	2001      	movs	r0, #1
    3666:	f7fe fec3 	bl	23f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    366a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    366e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    3672:	bf1a      	itte	ne
    3674:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    3678:	2800      	cmpne	r0, #0
    367a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    367e:	f04f 0000 	mov.w	r0, #0
    3682:	f000 fa97 	bl	3bb4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3686:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    368a:	2004      	movs	r0, #4
    368c:	7028      	strb	r0, [r5, #0]
    368e:	f8c5 8008 	str.w	r8, [r5, #8]
    3692:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    3696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    369a:	2000      	movs	r0, #0
    369c:	f7fe bea8 	b.w	23f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    36a0:	f240 3166 	movw	r1, #870	; 0x366
    36a4:	206c      	movs	r0, #108	; 0x6c
    36a6:	f000 ff0d 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    36aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    36ae:	2007      	movs	r0, #7
    36b0:	f7fe be9e 	b.w	23f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    36b4:	2000001c 	.word	0x2000001c
    36b8:	40008000 	.word	0x40008000
    36bc:	2201      	movs	r2, #1
    36be:	0213      	lsls	r3, r2, #8
    36c0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    36c4:	2000      	movs	r0, #0
    36c6:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    36ca:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    36ce:	f3bf 8f4f 	dsb	sy
    36d2:	f3bf 8f6f 	isb	sy
    36d6:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    36da:	490c      	ldr	r1, [pc, #48]	; (370c <MPSL_IRQ_TIMER0_Handler+0x148>)
    36dc:	604a      	str	r2, [r1, #4]
    36de:	1e43      	subs	r3, r0, #1
    36e0:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    36e4:	4b0a      	ldr	r3, [pc, #40]	; (3710 <MPSL_IRQ_TIMER0_Handler+0x14c>)
    36e6:	6018      	str	r0, [r3, #0]
    36e8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    36ec:	1d1b      	adds	r3, r3, #4
    36ee:	6018      	str	r0, [r3, #0]
    36f0:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    36f4:	1d1b      	adds	r3, r3, #4
    36f6:	6018      	str	r0, [r3, #0]
    36f8:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    36fc:	1d1b      	adds	r3, r3, #4
    36fe:	6018      	str	r0, [r3, #0]
    3700:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    3704:	610a      	str	r2, [r1, #16]
    3706:	4903      	ldr	r1, [pc, #12]	; (3714 <MPSL_IRQ_TIMER0_Handler+0x150>)
    3708:	7048      	strb	r0, [r1, #1]
    370a:	4770      	bx	lr
    370c:	40008000 	.word	0x40008000
    3710:	40008540 	.word	0x40008540
    3714:	2000001c 	.word	0x2000001c

00003718 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    3718:	4801      	ldr	r0, [pc, #4]	; (3720 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    371a:	6800      	ldr	r0, [r0, #0]
    371c:	4770      	bx	lr
    371e:	0000      	.short	0x0000
    3720:	4000b504 	.word	0x4000b504

00003724 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    3724:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    3728:	4e41      	ldr	r6, [pc, #260]	; (3830 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    372a:	4604      	mov	r4, r0
    372c:	1ef7      	subs	r7, r6, #3
    372e:	f896 c000 	ldrb.w	ip, [r6]
    3732:	68f8      	ldr	r0, [r7, #12]
    3734:	f1bc 0f01 	cmp.w	ip, #1
    3738:	bf04      	itt	eq
    373a:	42a0      	cmpeq	r0, r4
    373c:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    3740:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    3744:	4a3b      	ldr	r2, [pc, #236]	; (3834 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    3746:	6011      	str	r1, [r2, #0]
    3748:	493b      	ldr	r1, [pc, #236]	; (3838 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    374a:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    374e:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    3752:	4a3a      	ldr	r2, [pc, #232]	; (383c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    3754:	f04f 0500 	mov.w	r5, #0
    3758:	f1bc 0f00 	cmp.w	ip, #0
    375c:	d057      	beq.n	380e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    375e:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    3762:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3766:	6015      	str	r5, [r2, #0]
    3768:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    376c:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    3770:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    3774:	f04f 0801 	mov.w	r8, #1
    3778:	2a00      	cmp	r2, #0
    377a:	bf04      	itt	eq
    377c:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    3780:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    3784:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3788:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    378c:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3790:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    3794:	4a2a      	ldr	r2, [pc, #168]	; (3840 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    3796:	f8d2 a000 	ldr.w	sl, [r2]
    379a:	eba4 0a0a 	sub.w	sl, r4, sl
    379e:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    37a2:	f1bb 0f02 	cmp.w	fp, #2
    37a6:	d33c      	bcc.n	3822 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    37a8:	f04f 0a02 	mov.w	sl, #2
    37ac:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    37b0:	d237      	bcs.n	3822 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    37b2:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    37b6:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    37ba:	f1bc 0f00 	cmp.w	ip, #0
    37be:	d005      	beq.n	37cc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    37c0:	6811      	ldr	r1, [r2, #0]
    37c2:	1a41      	subs	r1, r0, r1
    37c4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    37c8:	2902      	cmp	r1, #2
    37ca:	d3f9      	bcc.n	37c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    37cc:	f8c7 8008 	str.w	r8, [r7, #8]
    37d0:	703d      	strb	r5, [r7, #0]
    37d2:	f7ff ff73 	bl	36bc <MPSL_IRQ_TIMER0_Handler+0xf8>
    37d6:	481b      	ldr	r0, [pc, #108]	; (3844 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    37d8:	6005      	str	r5, [r0, #0]
    37da:	1d00      	adds	r0, r0, #4
    37dc:	f8c0 a000 	str.w	sl, [r0]
    37e0:	4919      	ldr	r1, [pc, #100]	; (3848 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    37e2:	2004      	movs	r0, #4
    37e4:	6008      	str	r0, [r1, #0]
    37e6:	4919      	ldr	r1, [pc, #100]	; (384c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    37e8:	f8c1 800c 	str.w	r8, [r1, #12]
    37ec:	68ba      	ldr	r2, [r7, #8]
    37ee:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    37f2:	0181      	lsls	r1, r0, #6
    37f4:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    37f8:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    37fc:	4a14      	ldr	r2, [pc, #80]	; (3850 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    37fe:	0741      	lsls	r1, r0, #29
    3800:	6011      	str	r1, [r2, #0]
    3802:	60fc      	str	r4, [r7, #12]
    3804:	7070      	strb	r0, [r6, #1]
    3806:	f886 8000 	strb.w	r8, [r6]
    380a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    380e:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3812:	4b10      	ldr	r3, [pc, #64]	; (3854 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    3814:	601d      	str	r5, [r3, #0]
    3816:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    381a:	6015      	str	r5, [r2, #0]
    381c:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    3820:	e7a4      	b.n	376c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    3822:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    3826:	f240 11ef 	movw	r1, #495	; 0x1ef
    382a:	206c      	movs	r0, #108	; 0x6c
    382c:	f000 fe4a 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3830:	2000001f 	.word	0x2000001f
    3834:	4001f508 	.word	0x4001f508
    3838:	4000b000 	.word	0x4000b000
    383c:	4000b544 	.word	0x4000b544
    3840:	4000b504 	.word	0x4000b504
    3844:	40008504 	.word	0x40008504
    3848:	40008510 	.word	0x40008510
    384c:	40008000 	.word	0x40008000
    3850:	4001f504 	.word	0x4001f504
    3854:	4000b540 	.word	0x4000b540

00003858 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    3858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    385c:	4c2b      	ldr	r4, [pc, #172]	; (390c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    385e:	68e1      	ldr	r1, [r4, #12]
    3860:	4281      	cmp	r1, r0
    3862:	bf14      	ite	ne
    3864:	2201      	movne	r2, #1
    3866:	2200      	moveq	r2, #0
    3868:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 3910 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    386c:	f89c 7000 	ldrb.w	r7, [ip]
    3870:	2f02      	cmp	r7, #2
    3872:	d002      	beq.n	387a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    3874:	2a00      	cmp	r2, #0
    3876:	d038      	beq.n	38ea <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    3878:	e003      	b.n	3882 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    387a:	2a00      	cmp	r2, #0
    387c:	bf08      	it	eq
    387e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3882:	7862      	ldrb	r2, [r4, #1]
    3884:	b382      	cbz	r2, 38e8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    3886:	4b23      	ldr	r3, [pc, #140]	; (3914 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    3888:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    388c:	601a      	str	r2, [r3, #0]
    388e:	4b22      	ldr	r3, [pc, #136]	; (3918 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    3890:	1395      	asrs	r5, r2, #14
    3892:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    3896:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    389a:	2600      	movs	r6, #0
    389c:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    38a0:	4a1e      	ldr	r2, [pc, #120]	; (391c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    38a2:	f8d2 8000 	ldr.w	r8, [r2]
    38a6:	eba0 0808 	sub.w	r8, r0, r8
    38aa:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    38ae:	f1b8 0f02 	cmp.w	r8, #2
    38b2:	d324      	bcc.n	38fe <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    38b4:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    38b8:	d221      	bcs.n	38fe <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    38ba:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    38be:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    38c2:	b12f      	cbz	r7, 38d0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    38c4:	6813      	ldr	r3, [r2, #0]
    38c6:	1acb      	subs	r3, r1, r3
    38c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    38cc:	2b02      	cmp	r3, #2
    38ce:	d3f9      	bcc.n	38c4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    38d0:	4b13      	ldr	r3, [pc, #76]	; (3920 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    38d2:	2102      	movs	r1, #2
    38d4:	074a      	lsls	r2, r1, #29
    38d6:	601a      	str	r2, [r3, #0]
    38d8:	60e0      	str	r0, [r4, #12]
    38da:	2004      	movs	r0, #4
    38dc:	f88c 0001 	strb.w	r0, [ip, #1]
    38e0:	f88c 1000 	strb.w	r1, [ip]
    38e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    38e8:	e004      	b.n	38f4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    38ea:	f240 11fd 	movw	r1, #509	; 0x1fd
    38ee:	206c      	movs	r0, #108	; 0x6c
    38f0:	f000 fde8 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    38f4:	f240 2101 	movw	r1, #513	; 0x201
    38f8:	206c      	movs	r0, #108	; 0x6c
    38fa:	f000 fde3 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    38fe:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    3902:	f240 210d 	movw	r1, #525	; 0x20d
    3906:	206c      	movs	r0, #108	; 0x6c
    3908:	f000 fddc 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    390c:	2000001c 	.word	0x2000001c
    3910:	2000001f 	.word	0x2000001f
    3914:	4001f508 	.word	0x4001f508
    3918:	4000b000 	.word	0x4000b000
    391c:	4000b504 	.word	0x4000b504
    3920:	4001f504 	.word	0x4001f504

00003924 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    3924:	4801      	ldr	r0, [pc, #4]	; (392c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    3926:	68c0      	ldr	r0, [r0, #12]
    3928:	4770      	bx	lr
    392a:	0000      	.short	0x0000
    392c:	2000001c 	.word	0x2000001c

00003930 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    3930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3934:	4833      	ldr	r0, [pc, #204]	; (3a04 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    3936:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    393a:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    393e:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 3a08 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    3942:	4a32      	ldr	r2, [pc, #200]	; (3a0c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    3944:	2100      	movs	r1, #0
    3946:	f89c 3000 	ldrb.w	r3, [ip]
    394a:	b163      	cbz	r3, 3966 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    394c:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    3950:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    3954:	6011      	str	r1, [r2, #0]
    3956:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    395a:	bf00      	nop
    395c:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    3960:	2201      	movs	r2, #1
    3962:	b980      	cbnz	r0, 3986 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    3964:	e009      	b.n	397a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    3966:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    396a:	4c29      	ldr	r4, [pc, #164]	; (3a10 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    396c:	6021      	str	r1, [r4, #0]
    396e:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3972:	6011      	str	r1, [r2, #0]
    3974:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3978:	e7f0      	b.n	395c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    397a:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    397e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3982:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    3986:	2b02      	cmp	r3, #2
    3988:	d004      	beq.n	3994 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    398a:	f240 2119 	movw	r1, #537	; 0x219
    398e:	206c      	movs	r0, #108	; 0x6c
    3990:	f000 fd98 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3994:	4e1f      	ldr	r6, [pc, #124]	; (3a14 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    3996:	6830      	ldr	r0, [r6, #0]
    3998:	4c1f      	ldr	r4, [pc, #124]	; (3a18 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    399a:	1cc0      	adds	r0, r0, #3
    399c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    39a0:	68e3      	ldr	r3, [r4, #12]
    39a2:	4d1e      	ldr	r5, [pc, #120]	; (3a1c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    39a4:	4298      	cmp	r0, r3
    39a6:	d00b      	beq.n	39c0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    39a8:	6837      	ldr	r7, [r6, #0]
    39aa:	1bdf      	subs	r7, r3, r7
    39ac:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    39b0:	2f04      	cmp	r7, #4
    39b2:	d305      	bcc.n	39c0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    39b4:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    39b8:	d202      	bcs.n	39c0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    39ba:	f7ff feb3 	bl	3724 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    39be:	e01b      	b.n	39f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    39c0:	6830      	ldr	r0, [r6, #0]
    39c2:	1a18      	subs	r0, r3, r0
    39c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    39c8:	2802      	cmp	r0, #2
    39ca:	d313      	bcc.n	39f4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    39cc:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    39d0:	d210      	bcs.n	39f4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    39d2:	4b13      	ldr	r3, [pc, #76]	; (3a20 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    39d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    39d8:	6018      	str	r0, [r3, #0]
    39da:	60a2      	str	r2, [r4, #8]
    39dc:	7021      	strb	r1, [r4, #0]
    39de:	606a      	str	r2, [r5, #4]
    39e0:	60ea      	str	r2, [r5, #12]
    39e2:	0040      	lsls	r0, r0, #1
    39e4:	1f19      	subs	r1, r3, #4
    39e6:	6008      	str	r0, [r1, #0]
    39e8:	2004      	movs	r0, #4
    39ea:	f88c 0001 	strb.w	r0, [ip, #1]
    39ee:	f88c 2000 	strb.w	r2, [ip]
    39f2:	e001      	b.n	39f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    39f4:	60a2      	str	r2, [r4, #8]
    39f6:	7021      	strb	r1, [r4, #0]
    39f8:	68a0      	ldr	r0, [r4, #8]
    39fa:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    39fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a02:	0000      	.short	0x0000
    3a04:	4000b000 	.word	0x4000b000
    3a08:	2000001f 	.word	0x2000001f
    3a0c:	4000b544 	.word	0x4000b544
    3a10:	4000b540 	.word	0x4000b540
    3a14:	4000b504 	.word	0x4000b504
    3a18:	2000001c 	.word	0x2000001c
    3a1c:	40008000 	.word	0x40008000
    3a20:	4001f508 	.word	0x4001f508

00003a24 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    3a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3a28:	f8df c174 	ldr.w	ip, [pc, #372]	; 3ba0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    3a2c:	2701      	movs	r7, #1
    3a2e:	f04f 0800 	mov.w	r8, #0
    3a32:	f89c 5000 	ldrb.w	r5, [ip]
    3a36:	f89c c001 	ldrb.w	ip, [ip, #1]
    3a3a:	2807      	cmp	r0, #7
    3a3c:	d27e      	bcs.n	3b3c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    3a3e:	e8df f000 	tbb	[pc, r0]
    3a42:	0404      	.short	0x0404
    3a44:	6a6a0404 	.word	0x6a6a0404
    3a48:	006a      	.short	0x006a
    3a4a:	4c56      	ldr	r4, [pc, #344]	; (3ba4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    3a4c:	68e6      	ldr	r6, [r4, #12]
    3a4e:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    3a52:	bf04      	itt	eq
    3a54:	7864      	ldrbeq	r4, [r4, #1]
    3a56:	2c00      	cmpeq	r4, #0
    3a58:	d002      	beq.n	3a60 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    3a5a:	2d02      	cmp	r5, #2
    3a5c:	d005      	beq.n	3a6a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    3a5e:	e03c      	b.n	3ada <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    3a60:	f44f 7113 	mov.w	r1, #588	; 0x24c
    3a64:	206c      	movs	r0, #108	; 0x6c
    3a66:	f000 fd2d 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a6a:	ea4f 048c 	mov.w	r4, ip, lsl #2
    3a6e:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    3a72:	f1ac 0404 	sub.w	r4, ip, #4
    3a76:	0624      	lsls	r4, r4, #24
    3a78:	0da4      	lsrs	r4, r4, #22
    3a7a:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    3a7e:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    3a82:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    3a86:	2400      	movs	r4, #0
    3a88:	2d01      	cmp	r5, #1
    3a8a:	d002      	beq.n	3a92 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    3a8c:	2d02      	cmp	r5, #2
    3a8e:	d011      	beq.n	3ab4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    3a90:	e020      	b.n	3ad4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3a92:	f1bc 0f04 	cmp.w	ip, #4
    3a96:	d205      	bcs.n	3aa4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    3a98:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    3a9c:	f1ba 0f00 	cmp.w	sl, #0
    3aa0:	d118      	bne.n	3ad4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3aa2:	e004      	b.n	3aae <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    3aa4:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    3aa8:	f1ba 0f00 	cmp.w	sl, #0
    3aac:	d112      	bne.n	3ad4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3aae:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    3ab2:	e00f      	b.n	3ad4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3ab4:	f1bc 0f04 	cmp.w	ip, #4
    3ab8:	d205      	bcs.n	3ac6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    3aba:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    3abe:	f1ba 0f00 	cmp.w	sl, #0
    3ac2:	d107      	bne.n	3ad4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3ac4:	e004      	b.n	3ad0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    3ac6:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    3aca:	f1ba 0f00 	cmp.w	sl, #0
    3ace:	d101      	bne.n	3ad4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3ad0:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    3ad4:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    3ad8:	d1d5      	bne.n	3a86 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    3ada:	4c33      	ldr	r4, [pc, #204]	; (3ba8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    3adc:	f100 0c10 	add.w	ip, r0, #16
    3ae0:	fa07 fc0c 	lsl.w	ip, r7, ip
    3ae4:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    3ae8:	0080      	lsls	r0, r0, #2
    3aea:	4420      	add	r0, r4
    3aec:	b152      	cbz	r2, 3b04 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    3aee:	6407      	str	r7, [r0, #64]	; 0x40
    3af0:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    3af4:	1b8d      	subs	r5, r1, r6
    3af6:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    3afa:	42aa      	cmp	r2, r5
    3afc:	bf98      	it	ls
    3afe:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    3b02:	d243      	bcs.n	3b8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    3b04:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3b08:	2b01      	cmp	r3, #1
    3b0a:	bf08      	it	eq
    3b0c:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    3b10:	2001      	movs	r0, #1
    3b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b16:	b135      	cbz	r5, 3b26 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    3b18:	4584      	cmp	ip, r0
    3b1a:	d104      	bne.n	3b26 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    3b1c:	f240 216f 	movw	r1, #623	; 0x26f
    3b20:	206c      	movs	r0, #108	; 0x6c
    3b22:	f000 fccf 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b26:	1f00      	subs	r0, r0, #4
    3b28:	b2c0      	uxtb	r0, r0
    3b2a:	2b01      	cmp	r3, #1
    3b2c:	bf0c      	ite	eq
    3b2e:	2401      	moveq	r4, #1
    3b30:	2400      	movne	r4, #0
    3b32:	2803      	cmp	r0, #3
    3b34:	d306      	bcc.n	3b44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    3b36:	f240 1149 	movw	r1, #329	; 0x149
    3b3a:	e000      	b.n	3b3e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    3b3c:	e02b      	b.n	3b96 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    3b3e:	206c      	movs	r0, #108	; 0x6c
    3b40:	f000 fcc0 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b44:	f8df c064 	ldr.w	ip, [pc, #100]	; 3bac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    3b48:	f100 0310 	add.w	r3, r0, #16
    3b4c:	fa07 f303 	lsl.w	r3, r7, r3
    3b50:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    3b54:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    3b58:	0080      	lsls	r0, r0, #2
    3b5a:	4460      	add	r0, ip
    3b5c:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    3b60:	b14a      	cbz	r2, 3b76 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    3b62:	4d13      	ldr	r5, [pc, #76]	; (3bb0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    3b64:	682e      	ldr	r6, [r5, #0]
    3b66:	1b8d      	subs	r5, r1, r6
    3b68:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    3b6c:	42aa      	cmp	r2, r5
    3b6e:	bf98      	it	ls
    3b70:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    3b74:	d20a      	bcs.n	3b8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    3b76:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3b7a:	2c00      	cmp	r4, #0
    3b7c:	bf18      	it	ne
    3b7e:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    3b82:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    3b86:	2001      	movs	r0, #1
    3b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b8c:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    3b90:	2000      	movs	r0, #0
    3b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b96:	f44f 711d 	mov.w	r1, #628	; 0x274
    3b9a:	206c      	movs	r0, #108	; 0x6c
    3b9c:	f000 fc92 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ba0:	2000001f 	.word	0x2000001f
    3ba4:	2000001c 	.word	0x2000001c
    3ba8:	40008000 	.word	0x40008000
    3bac:	4000b000 	.word	0x4000b000
    3bb0:	4000b504 	.word	0x4000b504

00003bb4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    3bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bb6:	2701      	movs	r7, #1
    3bb8:	2400      	movs	r4, #0
    3bba:	2807      	cmp	r0, #7
    3bbc:	d24c      	bcs.n	3c58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    3bbe:	e8df f000 	tbb	[pc, r0]
    3bc2:	0404      	.short	0x0404
    3bc4:	16160404 	.word	0x16160404
    3bc8:	0016      	.short	0x0016
    3bca:	4a26      	ldr	r2, [pc, #152]	; (3c64 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    3bcc:	f100 0110 	add.w	r1, r0, #16
    3bd0:	fa07 f101 	lsl.w	r1, r7, r1
    3bd4:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    3bd8:	0081      	lsls	r1, r0, #2
    3bda:	4411      	add	r1, r2
    3bdc:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3be0:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    3be4:	4920      	ldr	r1, [pc, #128]	; (3c68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    3be6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3bea:	9000      	str	r0, [sp, #0]
    3bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3bee:	4d1f      	ldr	r5, [pc, #124]	; (3c6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    3bf0:	1f01      	subs	r1, r0, #4
    3bf2:	b2ce      	uxtb	r6, r1
    3bf4:	7829      	ldrb	r1, [r5, #0]
    3bf6:	b179      	cbz	r1, 3c18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    3bf8:	786a      	ldrb	r2, [r5, #1]
    3bfa:	4282      	cmp	r2, r0
    3bfc:	d10c      	bne.n	3c18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    3bfe:	4a1c      	ldr	r2, [pc, #112]	; (3c70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    3c00:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3c04:	6010      	str	r0, [r2, #0]
    3c06:	2901      	cmp	r1, #1
    3c08:	bf08      	it	eq
    3c0a:	f7ff fd57 	bleq	36bc <MPSL_IRQ_TIMER0_Handler+0xf8>
    3c0e:	702c      	strb	r4, [r5, #0]
    3c10:	4918      	ldr	r1, [pc, #96]	; (3c74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    3c12:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3c16:	60c8      	str	r0, [r1, #12]
    3c18:	f106 0010 	add.w	r0, r6, #16
    3c1c:	fa07 f100 	lsl.w	r1, r7, r0
    3c20:	4815      	ldr	r0, [pc, #84]	; (3c78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    3c22:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3c26:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3c2a:	00b0      	lsls	r0, r6, #2
    3c2c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    3c30:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    3c34:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    3c38:	4a10      	ldr	r2, [pc, #64]	; (3c7c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    3c3a:	6812      	ldr	r2, [r2, #0]
    3c3c:	1a89      	subs	r1, r1, r2
    3c3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    3c42:	2902      	cmp	r1, #2
    3c44:	bf24      	itt	cs
    3c46:	f8c0 4540 	strcs.w	r4, [r0, #1344]	; 0x540
    3c4a:	f8c0 4140 	strcs.w	r4, [r0, #320]	; 0x140
    3c4e:	480c      	ldr	r0, [pc, #48]	; (3c80 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    3c50:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    3c54:	9000      	str	r0, [sp, #0]
    3c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c58:	f240 21ed 	movw	r1, #749	; 0x2ed
    3c5c:	206c      	movs	r0, #108	; 0x6c
    3c5e:	f000 fc31 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c62:	0000      	.short	0x0000
    3c64:	40008000 	.word	0x40008000
    3c68:	40008140 	.word	0x40008140
    3c6c:	2000001f 	.word	0x2000001f
    3c70:	4001f508 	.word	0x4001f508
    3c74:	2000001c 	.word	0x2000001c
    3c78:	4000b000 	.word	0x4000b000
    3c7c:	4000b504 	.word	0x4000b504
    3c80:	4000b140 	.word	0x4000b140

00003c84 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3c84:	491e      	ldr	r1, [pc, #120]	; (3d00 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    3c86:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    3c8a:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    3c8e:	481d      	ldr	r0, [pc, #116]	; (3d04 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    3c90:	4a1d      	ldr	r2, [pc, #116]	; (3d08 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    3c92:	f890 c000 	ldrb.w	ip, [r0]
    3c96:	2000      	movs	r0, #0
    3c98:	f1bc 0f00 	cmp.w	ip, #0
    3c9c:	d00a      	beq.n	3cb4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    3c9e:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    3ca2:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3ca6:	6010      	str	r0, [r2, #0]
    3ca8:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3cac:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    3cb0:	b981      	cbnz	r1, 3cd4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    3cb2:	e009      	b.n	3cc8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    3cb4:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3cb8:	4b14      	ldr	r3, [pc, #80]	; (3d0c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    3cba:	6018      	str	r0, [r3, #0]
    3cbc:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3cc0:	6010      	str	r0, [r2, #0]
    3cc2:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3cc6:	e7f1      	b.n	3cac <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    3cc8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3ccc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3cd0:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    3cd4:	490e      	ldr	r1, [pc, #56]	; (3d10 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    3cd6:	f04f 32ff 	mov.w	r2, #4294967295
    3cda:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3cde:	4a0d      	ldr	r2, [pc, #52]	; (3d14 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    3ce0:	6010      	str	r0, [r2, #0]
    3ce2:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3ce6:	1d12      	adds	r2, r2, #4
    3ce8:	6010      	str	r0, [r2, #0]
    3cea:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3cee:	1d12      	adds	r2, r2, #4
    3cf0:	6010      	str	r0, [r2, #0]
    3cf2:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3cf6:	1d12      	adds	r2, r2, #4
    3cf8:	6010      	str	r0, [r2, #0]
    3cfa:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    3cfe:	4770      	bx	lr
    3d00:	4000b000 	.word	0x4000b000
    3d04:	2000001f 	.word	0x2000001f
    3d08:	4000b544 	.word	0x4000b544
    3d0c:	4000b540 	.word	0x4000b540
    3d10:	40008000 	.word	0x40008000
    3d14:	40008540 	.word	0x40008540

00003d18 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    3d18:	4808      	ldr	r0, [pc, #32]	; (3d3c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    3d1a:	f990 0002 	ldrsb.w	r0, [r0, #2]
    3d1e:	2800      	cmp	r0, #0
    3d20:	bfb8      	it	lt
    3d22:	4770      	bxlt	lr
    3d24:	f000 011f 	and.w	r1, r0, #31
    3d28:	2201      	movs	r2, #1
    3d2a:	fa02 f101 	lsl.w	r1, r2, r1
    3d2e:	0940      	lsrs	r0, r0, #5
    3d30:	0080      	lsls	r0, r0, #2
    3d32:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3d36:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3d3a:	4770      	bx	lr
    3d3c:	2000001c 	.word	0x2000001c

00003d40 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3d40:	b510      	push	{r4, lr}
    3d42:	2807      	cmp	r0, #7
    3d44:	d20d      	bcs.n	3d62 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    3d46:	e8df f000 	tbb	[pc, r0]
    3d4a:	0404      	.short	0x0404
    3d4c:	06060404 	.word	0x06060404
    3d50:	0006      	.short	0x0006
    3d52:	4906      	ldr	r1, [pc, #24]	; (3d6c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3d54:	e002      	b.n	3d5c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    3d56:	1f00      	subs	r0, r0, #4
    3d58:	4905      	ldr	r1, [pc, #20]	; (3d70 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    3d5a:	b2c0      	uxtb	r0, r0
    3d5c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3d60:	bd10      	pop	{r4, pc}
    3d62:	f44f 7126 	mov.w	r1, #664	; 0x298
    3d66:	206c      	movs	r0, #108	; 0x6c
    3d68:	f000 fbac 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d6c:	40008140 	.word	0x40008140
    3d70:	4000b140 	.word	0x4000b140

00003d74 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3d74:	b570      	push	{r4, r5, r6, lr}
    3d76:	4819      	ldr	r0, [pc, #100]	; (3ddc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    3d78:	2400      	movs	r4, #0
    3d7a:	2104      	movs	r1, #4
    3d7c:	7004      	strb	r4, [r0, #0]
    3d7e:	1ec0      	subs	r0, r0, #3
    3d80:	7001      	strb	r1, [r0, #0]
    3d82:	0589      	lsls	r1, r1, #22
    3d84:	60c1      	str	r1, [r0, #12]
    3d86:	f7ff fc99 	bl	36bc <MPSL_IRQ_TIMER0_Handler+0xf8>
    3d8a:	2501      	movs	r5, #1
    3d8c:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    3d90:	02eb      	lsls	r3, r5, #11
    3d92:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    3d96:	f3bf 8f4f 	dsb	sy
    3d9a:	f3bf 8f6f 	isb	sy
    3d9e:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    3da2:	4a0f      	ldr	r2, [pc, #60]	; (3de0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    3da4:	6055      	str	r5, [r2, #4]
    3da6:	6095      	str	r5, [r2, #8]
    3da8:	480e      	ldr	r0, [pc, #56]	; (3de4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    3daa:	6801      	ldr	r1, [r0, #0]
    3dac:	2900      	cmp	r1, #0
    3dae:	d1fc      	bne.n	3daa <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    3db0:	1e48      	subs	r0, r1, #1
    3db2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    3db6:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    3dba:	480b      	ldr	r0, [pc, #44]	; (3de8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    3dbc:	6004      	str	r4, [r0, #0]
    3dbe:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    3dc2:	1d00      	adds	r0, r0, #4
    3dc4:	6004      	str	r4, [r0, #0]
    3dc6:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    3dca:	1d00      	adds	r0, r0, #4
    3dcc:	6004      	str	r4, [r0, #0]
    3dce:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    3dd2:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    3dd6:	6015      	str	r5, [r2, #0]
    3dd8:	bd70      	pop	{r4, r5, r6, pc}
    3dda:	0000      	.short	0x0000
    3ddc:	2000001f 	.word	0x2000001f
    3de0:	4000b000 	.word	0x4000b000
    3de4:	4000b504 	.word	0x4000b504
    3de8:	4000b540 	.word	0x4000b540

00003dec <MPSL_IRQ_CLOCK_Handler>:
    3dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3df0:	4c16      	ldr	r4, [pc, #88]	; (3e4c <MPSL_IRQ_CLOCK_Handler+0x60>)
    3df2:	7a60      	ldrb	r0, [r4, #9]
    3df4:	2800      	cmp	r0, #0
    3df6:	d027      	beq.n	3e48 <MPSL_IRQ_CLOCK_Handler+0x5c>
    3df8:	f44f 7180 	mov.w	r1, #256	; 0x100
    3dfc:	058d      	lsls	r5, r1, #22
    3dfe:	4628      	mov	r0, r5
    3e00:	f008 fb00 	bl	c404 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3e04:	4680      	mov	r8, r0
    3e06:	f44f 7182 	mov.w	r1, #260	; 0x104
    3e0a:	4628      	mov	r0, r5
    3e0c:	f008 fafa 	bl	c404 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3e10:	2600      	movs	r6, #0
    3e12:	4607      	mov	r7, r0
    3e14:	f1b8 0f00 	cmp.w	r8, #0
    3e18:	d009      	beq.n	3e2e <MPSL_IRQ_CLOCK_Handler+0x42>
    3e1a:	2001      	movs	r0, #1
    3e1c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3e20:	7920      	ldrb	r0, [r4, #4]
    3e22:	b120      	cbz	r0, 3e2e <MPSL_IRQ_CLOCK_Handler+0x42>
    3e24:	7126      	strb	r6, [r4, #4]
    3e26:	69e0      	ldr	r0, [r4, #28]
    3e28:	b108      	cbz	r0, 3e2e <MPSL_IRQ_CLOCK_Handler+0x42>
    3e2a:	4780      	blx	r0
    3e2c:	61e6      	str	r6, [r4, #28]
    3e2e:	b137      	cbz	r7, 3e3e <MPSL_IRQ_CLOCK_Handler+0x52>
    3e30:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3e34:	2002      	movs	r0, #2
    3e36:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3e3a:	f000 fa8b 	bl	4354 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3e3e:	4640      	mov	r0, r8
    3e40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3e44:	f000 b85a 	b.w	3efc <MPSL_IRQ_CLOCK_Handler+0x110>
    3e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e4c:	2000002c 	.word	0x2000002c
    3e50:	b510      	push	{r4, lr}
    3e52:	f008 fb81 	bl	c558 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3e56:	b930      	cbnz	r0, 3e66 <MPSL_IRQ_CLOCK_Handler+0x7a>
    3e58:	f008 fb9f 	bl	c59a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3e5c:	b918      	cbnz	r0, 3e66 <MPSL_IRQ_CLOCK_Handler+0x7a>
    3e5e:	f008 fbd2 	bl	c606 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3e62:	2800      	cmp	r0, #0
    3e64:	d002      	beq.n	3e6c <MPSL_IRQ_CLOCK_Handler+0x80>
    3e66:	4902      	ldr	r1, [pc, #8]	; (3e70 <MPSL_IRQ_CLOCK_Handler+0x84>)
    3e68:	2002      	movs	r0, #2
    3e6a:	6008      	str	r0, [r1, #0]
    3e6c:	bd10      	pop	{r4, pc}
    3e6e:	0000      	.short	0x0000
    3e70:	40000c34 	.word	0x40000c34
    3e74:	b570      	push	{r4, r5, r6, lr}
    3e76:	f000 f987 	bl	4188 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3e7a:	f000 fabf 	bl	43fc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3e7e:	4c09      	ldr	r4, [pc, #36]	; (3ea4 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    3e80:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3e84:	b130      	cbz	r0, 3e94 <MPSL_IRQ_CLOCK_Handler+0xa8>
    3e86:	f7ff ffe3 	bl	3e50 <MPSL_IRQ_CLOCK_Handler+0x64>
    3e8a:	2001      	movs	r0, #1
    3e8c:	6128      	str	r0, [r5, #16]
    3e8e:	2004      	movs	r0, #4
    3e90:	72a0      	strb	r0, [r4, #10]
    3e92:	e004      	b.n	3e9e <MPSL_IRQ_CLOCK_Handler+0xb2>
    3e94:	2003      	movs	r0, #3
    3e96:	72a0      	strb	r0, [r4, #10]
    3e98:	2001      	movs	r0, #1
    3e9a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3e9e:	2000      	movs	r0, #0
    3ea0:	71e0      	strb	r0, [r4, #7]
    3ea2:	bd70      	pop	{r4, r5, r6, pc}
    3ea4:	2000002c 	.word	0x2000002c
    3ea8:	b570      	push	{r4, r5, r6, lr}
    3eaa:	4c13      	ldr	r4, [pc, #76]	; (3ef8 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    3eac:	79a0      	ldrb	r0, [r4, #6]
    3eae:	b1f0      	cbz	r0, 3eee <MPSL_IRQ_CLOCK_Handler+0x102>
    3eb0:	2801      	cmp	r0, #1
    3eb2:	d003      	beq.n	3ebc <MPSL_IRQ_CLOCK_Handler+0xd0>
    3eb4:	79e1      	ldrb	r1, [r4, #7]
    3eb6:	1e40      	subs	r0, r0, #1
    3eb8:	4281      	cmp	r1, r0
    3eba:	da18      	bge.n	3eee <MPSL_IRQ_CLOCK_Handler+0x102>
    3ebc:	f000 fa9e 	bl	43fc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3ec0:	4605      	mov	r5, r0
    3ec2:	f000 fb6f 	bl	45a4 <mpsl_temperature_get>
    3ec6:	79a1      	ldrb	r1, [r4, #6]
    3ec8:	2901      	cmp	r1, #1
    3eca:	d902      	bls.n	3ed2 <MPSL_IRQ_CLOCK_Handler+0xe6>
    3ecc:	79e1      	ldrb	r1, [r4, #7]
    3ece:	1c49      	adds	r1, r1, #1
    3ed0:	71e1      	strb	r1, [r4, #7]
    3ed2:	b10d      	cbz	r5, 3ed8 <MPSL_IRQ_CLOCK_Handler+0xec>
    3ed4:	6961      	ldr	r1, [r4, #20]
    3ed6:	e000      	b.n	3eda <MPSL_IRQ_CLOCK_Handler+0xee>
    3ed8:	6921      	ldr	r1, [r4, #16]
    3eda:	1a41      	subs	r1, r0, r1
    3edc:	2902      	cmp	r1, #2
    3ede:	da02      	bge.n	3ee6 <MPSL_IRQ_CLOCK_Handler+0xfa>
    3ee0:	f111 0f02 	cmn.w	r1, #2
    3ee4:	dc07      	bgt.n	3ef6 <MPSL_IRQ_CLOCK_Handler+0x10a>
    3ee6:	b10d      	cbz	r5, 3eec <MPSL_IRQ_CLOCK_Handler+0x100>
    3ee8:	6160      	str	r0, [r4, #20]
    3eea:	e000      	b.n	3eee <MPSL_IRQ_CLOCK_Handler+0x102>
    3eec:	6120      	str	r0, [r4, #16]
    3eee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3ef2:	f7ff bfbf 	b.w	3e74 <MPSL_IRQ_CLOCK_Handler+0x88>
    3ef6:	bd70      	pop	{r4, r5, r6, pc}
    3ef8:	2000002c 	.word	0x2000002c
    3efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3f00:	4606      	mov	r6, r0
    3f02:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3f06:	f44f 7186 	mov.w	r1, #268	; 0x10c
    3f0a:	4628      	mov	r0, r5
    3f0c:	f008 fa7a 	bl	c404 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3f10:	4680      	mov	r8, r0
    3f12:	f44f 7188 	mov.w	r1, #272	; 0x110
    3f16:	4628      	mov	r0, r5
    3f18:	f008 fa74 	bl	c404 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3f1c:	4c27      	ldr	r4, [pc, #156]	; (3fbc <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3f1e:	4682      	mov	sl, r0
    3f20:	7827      	ldrb	r7, [r4, #0]
    3f22:	f104 0008 	add.w	r0, r4, #8
    3f26:	f008 fae1 	bl	c4ec <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3f2a:	b110      	cbz	r0, 3f32 <MPSL_IRQ_CLOCK_Handler+0x146>
    3f2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3f30:	e016      	b.n	3f60 <MPSL_IRQ_CLOCK_Handler+0x174>
    3f32:	f04f 0901 	mov.w	r9, #1
    3f36:	b146      	cbz	r6, 3f4a <MPSL_IRQ_CLOCK_Handler+0x15e>
    3f38:	7aa0      	ldrb	r0, [r4, #10]
    3f3a:	2803      	cmp	r0, #3
    3f3c:	d105      	bne.n	3f4a <MPSL_IRQ_CLOCK_Handler+0x15e>
    3f3e:	2004      	movs	r0, #4
    3f40:	72a0      	strb	r0, [r4, #10]
    3f42:	f7ff ff85 	bl	3e50 <MPSL_IRQ_CLOCK_Handler+0x64>
    3f46:	f8c5 9010 	str.w	r9, [r5, #16]
    3f4a:	2600      	movs	r6, #0
    3f4c:	f1b8 0f00 	cmp.w	r8, #0
    3f50:	d018      	beq.n	3f84 <MPSL_IRQ_CLOCK_Handler+0x198>
    3f52:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    3f56:	7aa0      	ldrb	r0, [r4, #10]
    3f58:	2804      	cmp	r0, #4
    3f5a:	d004      	beq.n	3f66 <MPSL_IRQ_CLOCK_Handler+0x17a>
    3f5c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    3f60:	206d      	movs	r0, #109	; 0x6d
    3f62:	f000 faaf 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3f66:	f008 faf7 	bl	c558 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3f6a:	b928      	cbnz	r0, 3f78 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3f6c:	f008 fb15 	bl	c59a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3f70:	b910      	cbnz	r0, 3f78 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3f72:	f008 fb48 	bl	c606 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3f76:	b108      	cbz	r0, 3f7c <MPSL_IRQ_CLOCK_Handler+0x190>
    3f78:	4811      	ldr	r0, [pc, #68]	; (3fc0 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    3f7a:	6006      	str	r6, [r0, #0]
    3f7c:	2002      	movs	r0, #2
    3f7e:	72a0      	strb	r0, [r4, #10]
    3f80:	f000 f8e6 	bl	4150 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3f84:	f1ba 0f00 	cmp.w	sl, #0
    3f88:	d008      	beq.n	3f9c <MPSL_IRQ_CLOCK_Handler+0x1b0>
    3f8a:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3f8e:	7aa0      	ldrb	r0, [r4, #10]
    3f90:	2802      	cmp	r0, #2
    3f92:	d101      	bne.n	3f98 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    3f94:	f7ff ff88 	bl	3ea8 <MPSL_IRQ_CLOCK_Handler+0xbc>
    3f98:	f8c5 9014 	str.w	r9, [r5, #20]
    3f9c:	b13f      	cbz	r7, 3fae <MPSL_IRQ_CLOCK_Handler+0x1c2>
    3f9e:	7026      	strb	r6, [r4, #0]
    3fa0:	7aa0      	ldrb	r0, [r4, #10]
    3fa2:	2802      	cmp	r0, #2
    3fa4:	d101      	bne.n	3faa <MPSL_IRQ_CLOCK_Handler+0x1be>
    3fa6:	f7ff ff65 	bl	3e74 <MPSL_IRQ_CLOCK_Handler+0x88>
    3faa:	f000 f8d1 	bl	4150 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3fae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3fb2:	4802      	ldr	r0, [pc, #8]	; (3fbc <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3fb4:	3008      	adds	r0, #8
    3fb6:	f008 bab0 	b.w	c51a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3fba:	0000      	.short	0x0000
    3fbc:	2000002c 	.word	0x2000002c
    3fc0:	40000c34 	.word	0x40000c34
    3fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3fc8:	4c5c      	ldr	r4, [pc, #368]	; (413c <MPSL_IRQ_CLOCK_Handler+0x350>)
    3fca:	f04f 0800 	mov.w	r8, #0
    3fce:	4606      	mov	r6, r0
    3fd0:	f8c4 8018 	str.w	r8, [r4, #24]
    3fd4:	7843      	ldrb	r3, [r0, #1]
    3fd6:	7882      	ldrb	r2, [r0, #2]
    3fd8:	7800      	ldrb	r0, [r0, #0]
    3fda:	72e0      	strb	r0, [r4, #11]
    3fdc:	7163      	strb	r3, [r4, #5]
    3fde:	2701      	movs	r7, #1
    3fe0:	71a2      	strb	r2, [r4, #6]
    3fe2:	07bd      	lsls	r5, r7, #30
    3fe4:	f884 8007 	strb.w	r8, [r4, #7]
    3fe8:	2805      	cmp	r0, #5
    3fea:	d224      	bcs.n	4036 <MPSL_IRQ_CLOCK_Handler+0x24a>
    3fec:	e8df f000 	tbb	[pc, r0]
    3ff0:	1f05030f 	.word	0x1f05030f
    3ff4:	0021      	.short	0x0021
    3ff6:	61a7      	str	r7, [r4, #24]
    3ff8:	e009      	b.n	400e <MPSL_IRQ_CLOCK_Handler+0x222>
    3ffa:	f000 f8c5 	bl	4188 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3ffe:	2101      	movs	r1, #1
    4000:	4628      	mov	r0, r5
    4002:	f008 fa04 	bl	c40e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4006:	2800      	cmp	r0, #0
    4008:	d0f9      	beq.n	3ffe <MPSL_IRQ_CLOCK_Handler+0x212>
    400a:	2002      	movs	r0, #2
    400c:	61a0      	str	r0, [r4, #24]
    400e:	f008 fa2a 	bl	c466 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    4012:	b1b0      	cbz	r0, 4042 <MPSL_IRQ_CLOCK_Handler+0x256>
    4014:	f000 fa0c 	bl	4430 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    4018:	7e21      	ldrb	r1, [r4, #24]
    401a:	f001 0103 	and.w	r1, r1, #3
    401e:	4288      	cmp	r0, r1
    4020:	d10f      	bne.n	4042 <MPSL_IRQ_CLOCK_Handler+0x256>
    4022:	79b0      	ldrb	r0, [r6, #6]
    4024:	b150      	cbz	r0, 403c <MPSL_IRQ_CLOCK_Handler+0x250>
    4026:	2002      	movs	r0, #2
    4028:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    402c:	e06a      	b.n	4104 <MPSL_IRQ_CLOCK_Handler+0x318>
    402e:	4844      	ldr	r0, [pc, #272]	; (4140 <MPSL_IRQ_CLOCK_Handler+0x354>)
    4030:	e7ec      	b.n	400c <MPSL_IRQ_CLOCK_Handler+0x220>
    4032:	4844      	ldr	r0, [pc, #272]	; (4144 <MPSL_IRQ_CLOCK_Handler+0x358>)
    4034:	e7ea      	b.n	400c <MPSL_IRQ_CLOCK_Handler+0x220>
    4036:	f44f 714c 	mov.w	r1, #816	; 0x330
    403a:	e049      	b.n	40d0 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    403c:	f000 f9cc 	bl	43d8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    4040:	e060      	b.n	4104 <MPSL_IRQ_CLOCK_Handler+0x318>
    4042:	60ef      	str	r7, [r5, #12]
    4044:	f44f 7a82 	mov.w	sl, #260	; 0x104
    4048:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    404c:	69a0      	ldr	r0, [r4, #24]
    404e:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    4052:	f008 fa6d 	bl	c530 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4056:	b940      	cbnz	r0, 406a <MPSL_IRQ_CLOCK_Handler+0x27e>
    4058:	f008 fa74 	bl	c544 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    405c:	b928      	cbnz	r0, 406a <MPSL_IRQ_CLOCK_Handler+0x27e>
    405e:	f008 fa88 	bl	c572 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4062:	b910      	cbnz	r0, 406a <MPSL_IRQ_CLOCK_Handler+0x27e>
    4064:	f008 fa99 	bl	c59a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4068:	b138      	cbz	r0, 407a <MPSL_IRQ_CLOCK_Handler+0x28e>
    406a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    406e:	4836      	ldr	r0, [pc, #216]	; (4148 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    4070:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    4074:	f3c1 3142 	ubfx	r1, r1, #13, #3
    4078:	6001      	str	r1, [r0, #0]
    407a:	f008 fa59 	bl	c530 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    407e:	b940      	cbnz	r0, 4092 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    4080:	f008 fa60 	bl	c544 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4084:	b928      	cbnz	r0, 4092 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    4086:	f008 fa74 	bl	c572 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    408a:	b910      	cbnz	r0, 4092 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    408c:	f008 fa85 	bl	c59a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4090:	b110      	cbz	r0, 4098 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    4092:	482d      	ldr	r0, [pc, #180]	; (4148 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    4094:	3010      	adds	r0, #16
    4096:	6007      	str	r7, [r0, #0]
    4098:	60af      	str	r7, [r5, #8]
    409a:	2002      	movs	r0, #2
    409c:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    40a0:	79b0      	ldrb	r0, [r6, #6]
    40a2:	bb78      	cbnz	r0, 4104 <MPSL_IRQ_CLOCK_Handler+0x318>
    40a4:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    40a8:	f010 0f02 	tst.w	r0, #2
    40ac:	d00e      	beq.n	40cc <MPSL_IRQ_CLOCK_Handler+0x2e0>
    40ae:	f8df 909c 	ldr.w	r9, [pc, #156]	; 414c <MPSL_IRQ_CLOCK_Handler+0x360>
    40b2:	f8d9 1000 	ldr.w	r1, [r9]
    40b6:	43c9      	mvns	r1, r1
    40b8:	f341 1700 	sbfx	r7, r1, #4, #1
    40bc:	f8d9 1000 	ldr.w	r1, [r9]
    40c0:	f041 0110 	orr.w	r1, r1, #16
    40c4:	f8c9 1000 	str.w	r1, [r9]
    40c8:	1c7f      	adds	r7, r7, #1
    40ca:	e007      	b.n	40dc <MPSL_IRQ_CLOCK_Handler+0x2f0>
    40cc:	f240 21f1 	movw	r1, #753	; 0x2f1
    40d0:	206d      	movs	r0, #109	; 0x6d
    40d2:	f000 f9f7 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    40d6:	bf00      	nop
    40d8:	f000 fb1a 	bl	4710 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    40dc:	4651      	mov	r1, sl
    40de:	4628      	mov	r0, r5
    40e0:	f008 f990 	bl	c404 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    40e4:	2800      	cmp	r0, #0
    40e6:	d0f7      	beq.n	40d8 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    40e8:	f000 f976 	bl	43d8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    40ec:	b92f      	cbnz	r7, 40fa <MPSL_IRQ_CLOCK_Handler+0x30e>
    40ee:	f8d9 1000 	ldr.w	r1, [r9]
    40f2:	f021 0110 	bic.w	r1, r1, #16
    40f6:	f8c9 1000 	str.w	r1, [r9]
    40fa:	2002      	movs	r0, #2
    40fc:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4100:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    4104:	79a0      	ldrb	r0, [r4, #6]
    4106:	b170      	cbz	r0, 4126 <MPSL_IRQ_CLOCK_Handler+0x33a>
    4108:	7830      	ldrb	r0, [r6, #0]
    410a:	b960      	cbnz	r0, 4126 <MPSL_IRQ_CLOCK_Handler+0x33a>
    410c:	f000 f976 	bl	43fc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4110:	4606      	mov	r6, r0
    4112:	f000 fa47 	bl	45a4 <mpsl_temperature_get>
    4116:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    411a:	b116      	cbz	r6, 4122 <MPSL_IRQ_CLOCK_Handler+0x336>
    411c:	e9c4 2004 	strd	r2, r0, [r4, #16]
    4120:	e001      	b.n	4126 <MPSL_IRQ_CLOCK_Handler+0x33a>
    4122:	e9c4 0204 	strd	r0, r2, [r4, #16]
    4126:	2101      	movs	r1, #1
    4128:	4628      	mov	r0, r5
    412a:	f008 f970 	bl	c40e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    412e:	b108      	cbz	r0, 4134 <MPSL_IRQ_CLOCK_Handler+0x348>
    4130:	f000 f95e 	bl	43f0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    4134:	f884 800a 	strb.w	r8, [r4, #10]
    4138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    413c:	2000002c 	.word	0x2000002c
    4140:	00020001 	.word	0x00020001
    4144:	00030001 	.word	0x00030001
    4148:	4000053c 	.word	0x4000053c
    414c:	e000ed10 	.word	0xe000ed10

00004150 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    4150:	b510      	push	{r4, lr}
    4152:	f3ef 8410 	mrs	r4, PRIMASK
    4156:	b672      	cpsid	i
    4158:	480a      	ldr	r0, [pc, #40]	; (4184 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    415a:	7841      	ldrb	r1, [r0, #1]
    415c:	b129      	cbz	r1, 416a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    415e:	7841      	ldrb	r1, [r0, #1]
    4160:	1e49      	subs	r1, r1, #1
    4162:	7041      	strb	r1, [r0, #1]
    4164:	7841      	ldrb	r1, [r0, #1]
    4166:	b129      	cbz	r1, 4174 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    4168:	e008      	b.n	417c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    416a:	f240 110d 	movw	r1, #269	; 0x10d
    416e:	206d      	movs	r0, #109	; 0x6d
    4170:	f000 f9a8 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4174:	7880      	ldrb	r0, [r0, #2]
    4176:	b908      	cbnz	r0, 417c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4178:	f000 f94e 	bl	4418 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    417c:	2c00      	cmp	r4, #0
    417e:	d100      	bne.n	4182 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    4180:	b662      	cpsie	i
    4182:	bd10      	pop	{r4, pc}
    4184:	2000002c 	.word	0x2000002c

00004188 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    4188:	b510      	push	{r4, lr}
    418a:	f3ef 8410 	mrs	r4, PRIMASK
    418e:	b672      	cpsid	i
    4190:	4806      	ldr	r0, [pc, #24]	; (41ac <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    4192:	7841      	ldrb	r1, [r0, #1]
    4194:	1c49      	adds	r1, r1, #1
    4196:	7041      	strb	r1, [r0, #1]
    4198:	7840      	ldrb	r0, [r0, #1]
    419a:	2801      	cmp	r0, #1
    419c:	d101      	bne.n	41a2 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    419e:	f008 f94d 	bl	c43c <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    41a2:	2c00      	cmp	r4, #0
    41a4:	d100      	bne.n	41a8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    41a6:	b662      	cpsie	i
    41a8:	bd10      	pop	{r4, pc}
    41aa:	0000      	.short	0x0000
    41ac:	2000002c 	.word	0x2000002c

000041b0 <mpsl_clock_hfclk_release>:
    41b0:	4805      	ldr	r0, [pc, #20]	; (41c8 <mpsl_clock_hfclk_release+0x18>)
    41b2:	b510      	push	{r4, lr}
    41b4:	78c1      	ldrb	r1, [r0, #3]
    41b6:	b121      	cbz	r1, 41c2 <mpsl_clock_hfclk_release+0x12>
    41b8:	2100      	movs	r1, #0
    41ba:	7101      	strb	r1, [r0, #4]
    41bc:	70c1      	strb	r1, [r0, #3]
    41be:	f7ff ffc7 	bl	4150 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    41c2:	2000      	movs	r0, #0
    41c4:	bd10      	pop	{r4, pc}
    41c6:	0000      	.short	0x0000
    41c8:	2000002c 	.word	0x2000002c

000041cc <mpsl_clock_hfclk_request>:
    41cc:	b570      	push	{r4, r5, r6, lr}
    41ce:	4c0c      	ldr	r4, [pc, #48]	; (4200 <mpsl_clock_hfclk_request+0x34>)
    41d0:	78e1      	ldrb	r1, [r4, #3]
    41d2:	b961      	cbnz	r1, 41ee <mpsl_clock_hfclk_request+0x22>
    41d4:	2501      	movs	r5, #1
    41d6:	70e5      	strb	r5, [r4, #3]
    41d8:	61e0      	str	r0, [r4, #28]
    41da:	f7ff ffd5 	bl	4188 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    41de:	f000 f90d 	bl	43fc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    41e2:	b130      	cbz	r0, 41f2 <mpsl_clock_hfclk_request+0x26>
    41e4:	69e0      	ldr	r0, [r4, #28]
    41e6:	b110      	cbz	r0, 41ee <mpsl_clock_hfclk_request+0x22>
    41e8:	4780      	blx	r0
    41ea:	2000      	movs	r0, #0
    41ec:	61e0      	str	r0, [r4, #28]
    41ee:	2000      	movs	r0, #0
    41f0:	bd70      	pop	{r4, r5, r6, pc}
    41f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    41f6:	7125      	strb	r5, [r4, #4]
    41f8:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    41fc:	e7f7      	b.n	41ee <mpsl_clock_hfclk_request+0x22>
    41fe:	0000      	.short	0x0000
    4200:	2000002c 	.word	0x2000002c

00004204 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    4204:	f3ef 8010 	mrs	r0, PRIMASK
    4208:	b672      	cpsid	i
    420a:	4904      	ldr	r1, [pc, #16]	; (421c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    420c:	788a      	ldrb	r2, [r1, #2]
    420e:	1c52      	adds	r2, r2, #1
    4210:	708a      	strb	r2, [r1, #2]
    4212:	2800      	cmp	r0, #0
    4214:	d100      	bne.n	4218 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    4216:	b662      	cpsie	i
    4218:	4770      	bx	lr
    421a:	0000      	.short	0x0000
    421c:	2000002c 	.word	0x2000002c

00004220 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    4220:	b510      	push	{r4, lr}
    4222:	f3ef 8410 	mrs	r4, PRIMASK
    4226:	b672      	cpsid	i
    4228:	480a      	ldr	r0, [pc, #40]	; (4254 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    422a:	7881      	ldrb	r1, [r0, #2]
    422c:	b129      	cbz	r1, 423a <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    422e:	7881      	ldrb	r1, [r0, #2]
    4230:	1e49      	subs	r1, r1, #1
    4232:	7081      	strb	r1, [r0, #2]
    4234:	7841      	ldrb	r1, [r0, #1]
    4236:	b129      	cbz	r1, 4244 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    4238:	e008      	b.n	424c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    423a:	f240 1125 	movw	r1, #293	; 0x125
    423e:	206d      	movs	r0, #109	; 0x6d
    4240:	f000 f940 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4244:	7880      	ldrb	r0, [r0, #2]
    4246:	b908      	cbnz	r0, 424c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    4248:	f000 f8e6 	bl	4418 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    424c:	2c00      	cmp	r4, #0
    424e:	d100      	bne.n	4252 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    4250:	b662      	cpsie	i
    4252:	bd10      	pop	{r4, pc}
    4254:	2000002c 	.word	0x2000002c

00004258 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    4258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    425c:	0004      	movs	r4, r0
    425e:	f06f 0015 	mvn.w	r0, #21
    4262:	d03c      	beq.n	42de <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4264:	7821      	ldrb	r1, [r4, #0]
    4266:	2904      	cmp	r1, #4
    4268:	d839      	bhi.n	42de <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    426a:	2900      	cmp	r1, #0
    426c:	7861      	ldrb	r1, [r4, #1]
    426e:	d038      	beq.n	42e2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    4270:	2900      	cmp	r1, #0
    4272:	d134      	bne.n	42de <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4274:	78a1      	ldrb	r1, [r4, #2]
    4276:	2900      	cmp	r1, #0
    4278:	d131      	bne.n	42de <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    427a:	2000      	movs	r0, #0
    427c:	f008 f88d 	bl	c39a <MPSL_IRQ_RADIO_Handler+0x1e>
    4280:	2000      	movs	r0, #0
    4282:	f008 f87d 	bl	c380 <MPSL_IRQ_RADIO_Handler+0x4>
    4286:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    428a:	f04f 31ff 	mov.w	r1, #4294967295
    428e:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    4292:	2600      	movs	r6, #0
    4294:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    4298:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    429c:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    42a0:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    42a4:	4f14      	ldr	r7, [pc, #80]	; (42f8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    42a6:	707e      	strb	r6, [r7, #1]
    42a8:	88a0      	ldrh	r0, [r4, #4]
    42aa:	81b8      	strh	r0, [r7, #12]
    42ac:	f008 f8bd 	bl	c42a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    42b0:	2501      	movs	r5, #1
    42b2:	b108      	cbz	r0, 42b8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    42b4:	70fd      	strb	r5, [r7, #3]
    42b6:	707d      	strb	r5, [r7, #1]
    42b8:	2101      	movs	r1, #1
    42ba:	4640      	mov	r0, r8
    42bc:	f008 f8a7 	bl	c40e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    42c0:	b108      	cbz	r0, 42c6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    42c2:	f000 f895 	bl	43f0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    42c6:	4620      	mov	r0, r4
    42c8:	f7ff fe7c 	bl	3fc4 <MPSL_IRQ_CLOCK_Handler+0x1d8>
    42cc:	727d      	strb	r5, [r7, #9]
    42ce:	2000      	movs	r0, #0
    42d0:	f008 f856 	bl	c380 <MPSL_IRQ_RADIO_Handler+0x4>
    42d4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    42d8:	4630      	mov	r0, r6
    42da:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    42de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42e2:	2900      	cmp	r1, #0
    42e4:	d0fb      	beq.n	42de <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    42e6:	2920      	cmp	r1, #32
    42e8:	d8f9      	bhi.n	42de <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    42ea:	78a1      	ldrb	r1, [r4, #2]
    42ec:	2921      	cmp	r1, #33	; 0x21
    42ee:	d8f6      	bhi.n	42de <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    42f0:	2901      	cmp	r1, #1
    42f2:	d1c2      	bne.n	427a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    42f4:	e7f3      	b.n	42de <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    42f6:	0000      	.short	0x0000
    42f8:	2000002c 	.word	0x2000002c

000042fc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    42fc:	4801      	ldr	r0, [pc, #4]	; (4304 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    42fe:	8980      	ldrh	r0, [r0, #12]
    4300:	4770      	bx	lr
    4302:	0000      	.short	0x0000
    4304:	2000002c 	.word	0x2000002c

00004308 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    4308:	b510      	push	{r4, lr}
    430a:	480d      	ldr	r0, [pc, #52]	; (4340 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    430c:	f008 f8ee 	bl	c4ec <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4310:	490b      	ldr	r1, [pc, #44]	; (4340 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4312:	3908      	subs	r1, #8
    4314:	b148      	cbz	r0, 432a <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    4316:	2001      	movs	r0, #1
    4318:	7008      	strb	r0, [r1, #0]
    431a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    431e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    4322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4326:	f7ff bf2f 	b.w	4188 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    432a:	7a88      	ldrb	r0, [r1, #10]
    432c:	2802      	cmp	r0, #2
    432e:	d101      	bne.n	4334 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    4330:	f7ff fda0 	bl	3e74 <MPSL_IRQ_CLOCK_Handler+0x88>
    4334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4338:	4801      	ldr	r0, [pc, #4]	; (4340 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    433a:	f008 b8ee 	b.w	c51a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    433e:	0000      	.short	0x0000
    4340:	20000034 	.word	0x20000034

00004344 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    4344:	4802      	ldr	r0, [pc, #8]	; (4350 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    4346:	7a80      	ldrb	r0, [r0, #10]
    4348:	2800      	cmp	r0, #0
    434a:	d000      	beq.n	434e <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    434c:	2001      	movs	r0, #1
    434e:	4770      	bx	lr
    4350:	2000002c 	.word	0x2000002c

00004354 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    4354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4356:	4d1f      	ldr	r5, [pc, #124]	; (43d4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4358:	7ae8      	ldrb	r0, [r5, #11]
    435a:	2800      	cmp	r0, #0
    435c:	d10f      	bne.n	437e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    435e:	7e28      	ldrb	r0, [r5, #24]
    4360:	f000 0003 	and.w	r0, r0, #3
    4364:	f008 f86f 	bl	c446 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4368:	2800      	cmp	r0, #0
    436a:	d008      	beq.n	437e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    436c:	f3ef 8110 	mrs	r1, PRIMASK
    4370:	b672      	cpsid	i
    4372:	f7ff ffe7 	bl	4344 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    4376:	b118      	cbz	r0, 4380 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    4378:	2900      	cmp	r1, #0
    437a:	d100      	bne.n	437e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    437c:	b662      	cpsie	i
    437e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4380:	2601      	movs	r6, #1
    4382:	72ae      	strb	r6, [r5, #10]
    4384:	b901      	cbnz	r1, 4388 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    4386:	b662      	cpsie	i
    4388:	2018      	movs	r0, #24
    438a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    438e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4392:	61a6      	str	r6, [r4, #24]
    4394:	f44f 7020 	mov.w	r0, #640	; 0x280
    4398:	f8ad 0000 	strh.w	r0, [sp]
    439c:	f8bd 0000 	ldrh.w	r0, [sp]
    43a0:	1e41      	subs	r1, r0, #1
    43a2:	f8ad 1000 	strh.w	r1, [sp]
    43a6:	d2f9      	bcs.n	439c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    43a8:	2700      	movs	r7, #0
    43aa:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    43ae:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    43b2:	4808      	ldr	r0, [pc, #32]	; (43d4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    43b4:	3008      	adds	r0, #8
    43b6:	f008 f8ac 	bl	c512 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    43ba:	702f      	strb	r7, [r5, #0]
    43bc:	f7ff fd5a 	bl	3e74 <MPSL_IRQ_CLOCK_Handler+0x88>
    43c0:	6166      	str	r6, [r4, #20]
    43c2:	7968      	ldrb	r0, [r5, #5]
    43c4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    43c8:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    43cc:	2018      	movs	r0, #24
    43ce:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    43d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43d4:	2000002c 	.word	0x2000002c

000043d8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    43d8:	b510      	push	{r4, lr}
    43da:	4c04      	ldr	r4, [pc, #16]	; (43ec <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    43dc:	7e20      	ldrb	r0, [r4, #24]
    43de:	f000 0003 	and.w	r0, r0, #3
    43e2:	f008 f830 	bl	c446 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    43e6:	2800      	cmp	r0, #0
    43e8:	d0f8      	beq.n	43dc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    43ea:	bd10      	pop	{r4, pc}
    43ec:	2000002c 	.word	0x2000002c

000043f0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    43f0:	4901      	ldr	r1, [pc, #4]	; (43f8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    43f2:	2001      	movs	r0, #1
    43f4:	7008      	strb	r0, [r1, #0]
    43f6:	4770      	bx	lr
    43f8:	20000298 	.word	0x20000298

000043fc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    43fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4400:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4404:	b918      	cbnz	r0, 440e <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    4406:	4803      	ldr	r0, [pc, #12]	; (4414 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    4408:	7800      	ldrb	r0, [r0, #0]
    440a:	2800      	cmp	r0, #0
    440c:	d000      	beq.n	4410 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    440e:	2001      	movs	r0, #1
    4410:	4770      	bx	lr
    4412:	0000      	.short	0x0000
    4414:	20000298 	.word	0x20000298

00004418 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    4418:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    441c:	2101      	movs	r1, #1
    441e:	6041      	str	r1, [r0, #4]
    4420:	2100      	movs	r1, #0
    4422:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    4426:	4801      	ldr	r0, [pc, #4]	; (442c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    4428:	7001      	strb	r1, [r0, #0]
    442a:	4770      	bx	lr
    442c:	20000298 	.word	0x20000298

00004430 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    4430:	4802      	ldr	r0, [pc, #8]	; (443c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    4432:	6800      	ldr	r0, [r0, #0]
    4434:	f000 0003 	and.w	r0, r0, #3
    4438:	4770      	bx	lr
    443a:	0000      	.short	0x0000
    443c:	4000041c 	.word	0x4000041c
    4440:	b510      	push	{r4, lr}
    4442:	b131      	cbz	r1, 4452 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    4444:	2901      	cmp	r1, #1
    4446:	d007      	beq.n	4458 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    4448:	f44f 7142 	mov.w	r1, #776	; 0x308
    444c:	a005      	add	r0, pc, #20	; (adr r0, 4464 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    444e:	f000 f80f 	bl	4470 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    4452:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    4456:	e001      	b.n	445c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    4458:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    445c:	f000 0001 	and.w	r0, r0, #1
    4460:	bd10      	pop	{r4, pc}
    4462:	0000      	.short	0x0000
    4464:	5f66726e 	.word	0x5f66726e
    4468:	636f6c63 	.word	0x636f6c63
    446c:	00682e6b 	.word	0x00682e6b

00004470 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    4470:	4a02      	ldr	r2, [pc, #8]	; (447c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    4472:	6852      	ldr	r2, [r2, #4]
    4474:	b102      	cbz	r2, 4478 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    4476:	4710      	bx	r2
    4478:	e7fe      	b.n	4478 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    447a:	0000      	.short	0x0000
    447c:	2000004c 	.word	0x2000004c
    4480:	4806      	ldr	r0, [pc, #24]	; (449c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    4482:	b510      	push	{r4, lr}
    4484:	2100      	movs	r1, #0
    4486:	6001      	str	r1, [r0, #0]
    4488:	2101      	movs	r1, #1
    448a:	6001      	str	r1, [r0, #0]
    448c:	4608      	mov	r0, r1
    448e:	f008 f801 	bl	c494 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    4492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4496:	2001      	movs	r0, #1
    4498:	f007 bfef 	b.w	c47a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    449c:	40001ffc 	.word	0x40001ffc
    44a0:	4807      	ldr	r0, [pc, #28]	; (44c0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    44a2:	b510      	push	{r4, lr}
    44a4:	2101      	movs	r1, #1
    44a6:	6041      	str	r1, [r0, #4]
    44a8:	1e89      	subs	r1, r1, #2
    44aa:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    44ae:	200c      	movs	r0, #12
    44b0:	f007 fff0 	bl	c494 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    44b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    44b8:	200c      	movs	r0, #12
    44ba:	f007 bfde 	b.w	c47a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    44be:	0000      	.short	0x0000
    44c0:	4000c000 	.word	0x4000c000

000044c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    44c4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    44c6:	4a10      	ldr	r2, [pc, #64]	; (4508 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    44c8:	6855      	ldr	r5, [r2, #4]
    44ca:	b1e5      	cbz	r5, 4506 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    44cc:	2200      	movs	r2, #0
    44ce:	4603      	mov	r3, r0
    44d0:	466e      	mov	r6, sp
    44d2:	240a      	movs	r4, #10
    44d4:	e003      	b.n	44de <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    44d6:	fbb0 f0f4 	udiv	r0, r0, r4
    44da:	1c52      	adds	r2, r2, #1
    44dc:	b2d2      	uxtb	r2, r2
    44de:	2800      	cmp	r0, #0
    44e0:	d1f9      	bne.n	44d6 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    44e2:	54b0      	strb	r0, [r6, r2]
    44e4:	e00a      	b.n	44fc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    44e6:	bf00      	nop
    44e8:	fbb3 f0f4 	udiv	r0, r3, r4
    44ec:	fb04 3010 	mls	r0, r4, r0, r3
    44f0:	fbb3 f3f4 	udiv	r3, r3, r4
    44f4:	1e52      	subs	r2, r2, #1
    44f6:	b2d2      	uxtb	r2, r2
    44f8:	3030      	adds	r0, #48	; 0x30
    44fa:	54b0      	strb	r0, [r6, r2]
    44fc:	2a00      	cmp	r2, #0
    44fe:	d1f3      	bne.n	44e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    4500:	4630      	mov	r0, r6
    4502:	47a8      	blx	r5
    4504:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4506:	e7fe      	b.n	4506 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    4508:	2000004c 	.word	0x2000004c

0000450c <mpsl_init>:
    450c:	b570      	push	{r4, r5, r6, lr}
    450e:	4c17      	ldr	r4, [pc, #92]	; (456c <mpsl_init+0x60>)
    4510:	4606      	mov	r6, r0
    4512:	460d      	mov	r5, r1
    4514:	7860      	ldrb	r0, [r4, #1]
    4516:	b110      	cbz	r0, 451e <mpsl_init+0x12>
    4518:	f04f 30ff 	mov.w	r0, #4294967295
    451c:	bd70      	pop	{r4, r5, r6, pc}
    451e:	b906      	cbnz	r6, 4522 <mpsl_init+0x16>
    4520:	4e13      	ldr	r6, [pc, #76]	; (4570 <mpsl_init+0x64>)
    4522:	6062      	str	r2, [r4, #4]
    4524:	7025      	strb	r5, [r4, #0]
    4526:	f7ff ffab 	bl	4480 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    452a:	f7ff ffb9 	bl	44a0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    452e:	4630      	mov	r0, r6
    4530:	f7ff fe92 	bl	4258 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    4534:	0006      	movs	r6, r0
    4536:	d1f1      	bne.n	451c <mpsl_init+0x10>
    4538:	f7fe ff0e 	bl	3358 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    453c:	f7ff ff0a 	bl	4354 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    4540:	f007 feea 	bl	c318 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    4544:	4628      	mov	r0, r5
    4546:	f007 ff98 	bl	c47a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    454a:	2001      	movs	r0, #1
    454c:	2d00      	cmp	r5, #0
    454e:	db09      	blt.n	4564 <mpsl_init+0x58>
    4550:	f005 011f 	and.w	r1, r5, #31
    4554:	fa00 f101 	lsl.w	r1, r0, r1
    4558:	096a      	lsrs	r2, r5, #5
    455a:	0092      	lsls	r2, r2, #2
    455c:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4560:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    4564:	7060      	strb	r0, [r4, #1]
    4566:	4630      	mov	r0, r6
    4568:	bd70      	pop	{r4, r5, r6, pc}
    456a:	0000      	.short	0x0000
    456c:	2000004c 	.word	0x2000004c
    4570:	0000c4b6 	.word	0x0000c4b6

00004574 <mpsl_is_initialized>:
    4574:	4801      	ldr	r0, [pc, #4]	; (457c <mpsl_is_initialized+0x8>)
    4576:	7840      	ldrb	r0, [r0, #1]
    4578:	4770      	bx	lr
    457a:	0000      	.short	0x0000
    457c:	2000004c 	.word	0x2000004c

00004580 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    4580:	4807      	ldr	r0, [pc, #28]	; (45a0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    4582:	f990 0000 	ldrsb.w	r0, [r0]
    4586:	2800      	cmp	r0, #0
    4588:	db09      	blt.n	459e <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    458a:	f000 021f 	and.w	r2, r0, #31
    458e:	2101      	movs	r1, #1
    4590:	4091      	lsls	r1, r2
    4592:	0940      	lsrs	r0, r0, #5
    4594:	0080      	lsls	r0, r0, #2
    4596:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    459a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    459e:	4770      	bx	lr
    45a0:	2000004c 	.word	0x2000004c

000045a4 <mpsl_temperature_get>:
    45a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45a8:	2601      	movs	r6, #1
    45aa:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    45ae:	0331      	lsls	r1, r6, #12
    45b0:	f04f 0800 	mov.w	r8, #0
    45b4:	4640      	mov	r0, r8
    45b6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    45ba:	f3bf 8f4f 	dsb	sy
    45be:	f3bf 8f6f 	isb	sy
    45c2:	4c16      	ldr	r4, [pc, #88]	; (461c <mpsl_temperature_get+0x78>)
    45c4:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    45c8:	200c      	movs	r0, #12
    45ca:	f007 ff82 	bl	c4d2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    45ce:	4d14      	ldr	r5, [pc, #80]	; (4620 <mpsl_temperature_get+0x7c>)
    45d0:	6828      	ldr	r0, [r5, #0]
    45d2:	43c0      	mvns	r0, r0
    45d4:	f340 1700 	sbfx	r7, r0, #4, #1
    45d8:	6828      	ldr	r0, [r5, #0]
    45da:	f040 0010 	orr.w	r0, r0, #16
    45de:	6028      	str	r0, [r5, #0]
    45e0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    45e4:	6026      	str	r6, [r4, #0]
    45e6:	1c7f      	adds	r7, r7, #1
    45e8:	e002      	b.n	45f0 <mpsl_temperature_get+0x4c>
    45ea:	bf00      	nop
    45ec:	f000 f890 	bl	4710 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    45f0:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    45f4:	2800      	cmp	r0, #0
    45f6:	d0f9      	beq.n	45ec <mpsl_temperature_get+0x48>
    45f8:	b91f      	cbnz	r7, 4602 <mpsl_temperature_get+0x5e>
    45fa:	6828      	ldr	r0, [r5, #0]
    45fc:	f020 0010 	bic.w	r0, r0, #16
    4600:	6028      	str	r0, [r5, #0]
    4602:	4808      	ldr	r0, [pc, #32]	; (4624 <mpsl_temperature_get+0x80>)
    4604:	6805      	ldr	r5, [r0, #0]
    4606:	6066      	str	r6, [r4, #4]
    4608:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    460c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4610:	200c      	movs	r0, #12
    4612:	f007 ff5e 	bl	c4d2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    4616:	4628      	mov	r0, r5
    4618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    461c:	4000c000 	.word	0x4000c000
    4620:	e000ed10 	.word	0xe000ed10
    4624:	4000c508 	.word	0x4000c508

00004628 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    4628:	b510      	push	{r4, lr}
    462a:	4602      	mov	r2, r0
    462c:	2005      	movs	r0, #5
    462e:	490c      	ldr	r1, [pc, #48]	; (4660 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    4630:	e004      	b.n	463c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    4632:	bf00      	nop
    4634:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    4638:	791b      	ldrb	r3, [r3, #4]
    463a:	b133      	cbz	r3, 464a <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    463c:	1e40      	subs	r0, r0, #1
    463e:	b2c0      	uxtb	r0, r0
    4640:	d2f8      	bcs.n	4634 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    4642:	214b      	movs	r1, #75	; 0x4b
    4644:	2069      	movs	r0, #105	; 0x69
    4646:	f7ff ff3d 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    464a:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    464e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    4652:	2200      	movs	r2, #0
    4654:	714a      	strb	r2, [r1, #5]
    4656:	718a      	strb	r2, [r1, #6]
    4658:	2201      	movs	r2, #1
    465a:	710a      	strb	r2, [r1, #4]
    465c:	bd10      	pop	{r4, pc}
    465e:	0000      	.short	0x0000
    4660:	20000f38 	.word	0x20000f38

00004664 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    4664:	b510      	push	{r4, lr}
    4666:	2805      	cmp	r0, #5
    4668:	d301      	bcc.n	466e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    466a:	215a      	movs	r1, #90	; 0x5a
    466c:	e006      	b.n	467c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    466e:	490a      	ldr	r1, [pc, #40]	; (4698 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    4670:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    4674:	7901      	ldrb	r1, [r0, #4]
    4676:	2901      	cmp	r1, #1
    4678:	d003      	beq.n	4682 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    467a:	215b      	movs	r1, #91	; 0x5b
    467c:	2069      	movs	r0, #105	; 0x69
    467e:	f7ff ff21 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4682:	7941      	ldrb	r1, [r0, #5]
    4684:	7982      	ldrb	r2, [r0, #6]
    4686:	1c49      	adds	r1, r1, #1
    4688:	b2c9      	uxtb	r1, r1
    468a:	428a      	cmp	r2, r1
    468c:	d000      	beq.n	4690 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    468e:	7141      	strb	r1, [r0, #5]
    4690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4694:	f7ff bf74 	b.w	4580 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    4698:	20000f38 	.word	0x20000f38

0000469c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    469c:	b570      	push	{r4, r5, r6, lr}
    469e:	2505      	movs	r5, #5
    46a0:	4e0e      	ldr	r6, [pc, #56]	; (46dc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    46a2:	4c0f      	ldr	r4, [pc, #60]	; (46e0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    46a4:	e016      	b.n	46d4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    46a6:	7821      	ldrb	r1, [r4, #0]
    46a8:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    46ac:	7902      	ldrb	r2, [r0, #4]
    46ae:	2a01      	cmp	r2, #1
    46b0:	d108      	bne.n	46c4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    46b2:	7942      	ldrb	r2, [r0, #5]
    46b4:	7983      	ldrb	r3, [r0, #6]
    46b6:	429a      	cmp	r2, r3
    46b8:	d004      	beq.n	46c4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    46ba:	7942      	ldrb	r2, [r0, #5]
    46bc:	7182      	strb	r2, [r0, #6]
    46be:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    46c2:	4780      	blx	r0
    46c4:	7820      	ldrb	r0, [r4, #0]
    46c6:	1c40      	adds	r0, r0, #1
    46c8:	b2c0      	uxtb	r0, r0
    46ca:	7020      	strb	r0, [r4, #0]
    46cc:	2805      	cmp	r0, #5
    46ce:	d301      	bcc.n	46d4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    46d0:	2000      	movs	r0, #0
    46d2:	7020      	strb	r0, [r4, #0]
    46d4:	1e6d      	subs	r5, r5, #1
    46d6:	b2ed      	uxtb	r5, r5
    46d8:	d2e5      	bcs.n	46a6 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    46da:	bd70      	pop	{r4, r5, r6, pc}
    46dc:	20000f38 	.word	0x20000f38
    46e0:	20000299 	.word	0x20000299

000046e4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    46e4:	b500      	push	{lr}
    46e6:	f007 ff23 	bl	c530 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    46ea:	b940      	cbnz	r0, 46fe <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    46ec:	f007 ff2a 	bl	c544 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    46f0:	b928      	cbnz	r0, 46fe <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    46f2:	f007 ff3e 	bl	c572 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    46f6:	b910      	cbnz	r0, 46fe <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    46f8:	f007 ff4f 	bl	c59a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    46fc:	b108      	cbz	r0, 4702 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    46fe:	4802      	ldr	r0, [pc, #8]	; (4708 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    4700:	bd00      	pop	{pc}
    4702:	4802      	ldr	r0, [pc, #8]	; (470c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    4704:	bd00      	pop	{pc}
    4706:	0000      	.short	0x0000
    4708:	4000050c 	.word	0x4000050c
    470c:	4001e700 	.word	0x4001e700

00004710 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    4710:	b510      	push	{r4, lr}
    4712:	f007 ff42 	bl	c59a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4716:	b330      	cbz	r0, 4766 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    4718:	f3ef 8010 	mrs	r0, PRIMASK
    471c:	b1c8      	cbz	r0, 4752 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    471e:	2100      	movs	r1, #0
    4720:	b672      	cpsid	i
    4722:	4812      	ldr	r0, [pc, #72]	; (476c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    4724:	6802      	ldr	r2, [r0, #0]
    4726:	6803      	ldr	r3, [r0, #0]
    4728:	f3c2 1200 	ubfx	r2, r2, #4, #1
    472c:	f043 0310 	orr.w	r3, r3, #16
    4730:	6003      	str	r3, [r0, #0]
    4732:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4736:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    473a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    473e:	431c      	orrs	r4, r3
    4740:	d000      	beq.n	4744 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    4742:	bf40      	sev
    4744:	bf20      	wfe
    4746:	bf00      	nop
    4748:	bf00      	nop
    474a:	bf00      	nop
    474c:	bf00      	nop
    474e:	b112      	cbz	r2, 4756 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    4750:	e005      	b.n	475e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    4752:	2101      	movs	r1, #1
    4754:	e7e4      	b.n	4720 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    4756:	6802      	ldr	r2, [r0, #0]
    4758:	f022 0210 	bic.w	r2, r2, #16
    475c:	6002      	str	r2, [r0, #0]
    475e:	2900      	cmp	r1, #0
    4760:	d000      	beq.n	4764 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    4762:	b662      	cpsie	i
    4764:	bd10      	pop	{r4, pc}
    4766:	bf20      	wfe
    4768:	bd10      	pop	{r4, pc}
    476a:	0000      	.short	0x0000
    476c:	e000ed10 	.word	0xe000ed10

00004770 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    4770:	0000c80b 0000c827 0000c815 0000c821     ....'.......!...
    4780:	0000c80f 0000c809 0000c807 0000c82d     ............-...
    4790:	0000c81b 0000c801 0000c7f9 0000c7fd     ................
    47a0:	0000c7f3                                ....

000047a4 <mpsl_fem_disable>:
    47a4:	4801      	ldr	r0, [pc, #4]	; (47ac <mpsl_fem_disable+0x8>)
    47a6:	6800      	ldr	r0, [r0, #0]
    47a8:	6800      	ldr	r0, [r0, #0]
    47aa:	4700      	bx	r0
    47ac:	20000054 	.word	0x20000054

000047b0 <mpsl_fem_lna_configuration_clear>:
    47b0:	4801      	ldr	r0, [pc, #4]	; (47b8 <mpsl_fem_lna_configuration_clear+0x8>)
    47b2:	6800      	ldr	r0, [r0, #0]
    47b4:	6900      	ldr	r0, [r0, #16]
    47b6:	4700      	bx	r0
    47b8:	20000054 	.word	0x20000054

000047bc <mpsl_fem_lna_configuration_set>:
    47bc:	4a01      	ldr	r2, [pc, #4]	; (47c4 <mpsl_fem_lna_configuration_set+0x8>)
    47be:	6812      	ldr	r2, [r2, #0]
    47c0:	6892      	ldr	r2, [r2, #8]
    47c2:	4710      	bx	r2
    47c4:	20000054 	.word	0x20000054

000047c8 <mpsl_fem_pa_configuration_clear>:
    47c8:	4801      	ldr	r0, [pc, #4]	; (47d0 <mpsl_fem_pa_configuration_clear+0x8>)
    47ca:	6800      	ldr	r0, [r0, #0]
    47cc:	68c0      	ldr	r0, [r0, #12]
    47ce:	4700      	bx	r0
    47d0:	20000054 	.word	0x20000054

000047d4 <mpsl_fem_pa_configuration_set>:
    47d4:	4a01      	ldr	r2, [pc, #4]	; (47dc <mpsl_fem_pa_configuration_set+0x8>)
    47d6:	6812      	ldr	r2, [r2, #0]
    47d8:	6852      	ldr	r2, [r2, #4]
    47da:	4710      	bx	r2
    47dc:	20000054 	.word	0x20000054

000047e0 <mpsl_fem_pa_is_configured>:
    47e0:	4901      	ldr	r1, [pc, #4]	; (47e8 <mpsl_fem_pa_is_configured+0x8>)
    47e2:	6809      	ldr	r1, [r1, #0]
    47e4:	6a09      	ldr	r1, [r1, #32]
    47e6:	4708      	bx	r1
    47e8:	20000054 	.word	0x20000054

000047ec <mpsl_fem_device_config_254_apply_get>:
    47ec:	4801      	ldr	r0, [pc, #4]	; (47f4 <mpsl_fem_device_config_254_apply_get+0x8>)
    47ee:	7800      	ldrb	r0, [r0, #0]
    47f0:	4770      	bx	lr
    47f2:	0000      	.short	0x0000
    47f4:	2000029a 	.word	0x2000029a
    47f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    47fa:	4c17      	ldr	r4, [pc, #92]	; (4858 <mpsl_fem_device_config_254_apply_get+0x6c>)
    47fc:	79a0      	ldrb	r0, [r4, #6]
    47fe:	2802      	cmp	r0, #2
    4800:	d200      	bcs.n	4804 <mpsl_fem_device_config_254_apply_get+0x18>
    4802:	2002      	movs	r0, #2
    4804:	f88d 0001 	strb.w	r0, [sp, #1]
    4808:	7960      	ldrb	r0, [r4, #5]
    480a:	2803      	cmp	r0, #3
    480c:	d200      	bcs.n	4810 <mpsl_fem_device_config_254_apply_get+0x24>
    480e:	2003      	movs	r0, #3
    4810:	f88d 0000 	strb.w	r0, [sp]
    4814:	7920      	ldrb	r0, [r4, #4]
    4816:	f8ad 0004 	strh.w	r0, [sp, #4]
    481a:	78e0      	ldrb	r0, [r4, #3]
    481c:	f8ad 0002 	strh.w	r0, [sp, #2]
    4820:	4668      	mov	r0, sp
    4822:	f006 f8fb 	bl	aa1c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    4826:	b108      	cbz	r0, 482c <mpsl_fem_device_config_254_apply_get+0x40>
    4828:	21ae      	movs	r1, #174	; 0xae
    482a:	e010      	b.n	484e <mpsl_fem_device_config_254_apply_get+0x62>
    482c:	68a0      	ldr	r0, [r4, #8]
    482e:	9002      	str	r0, [sp, #8]
    4830:	a802      	add	r0, sp, #8
    4832:	f006 f909 	bl	aa48 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    4836:	b108      	cbz	r0, 483c <mpsl_fem_device_config_254_apply_get+0x50>
    4838:	21b2      	movs	r1, #178	; 0xb2
    483a:	e008      	b.n	484e <mpsl_fem_device_config_254_apply_get+0x62>
    483c:	4807      	ldr	r0, [pc, #28]	; (485c <mpsl_fem_device_config_254_apply_get+0x70>)
    483e:	6800      	ldr	r0, [r0, #0]
    4840:	9003      	str	r0, [sp, #12]
    4842:	a803      	add	r0, sp, #12
    4844:	f00a ff06 	bl	f654 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    4848:	2800      	cmp	r0, #0
    484a:	d003      	beq.n	4854 <mpsl_fem_device_config_254_apply_get+0x68>
    484c:	21b6      	movs	r1, #182	; 0xb6
    484e:	2003      	movs	r0, #3
    4850:	f000 f8ce 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4854:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    4856:	0000      	.short	0x0000
    4858:	20000064 	.word	0x20000064
    485c:	00004ad8 	.word	0x00004ad8

00004860 <sdc_build_revision_get>:
    4860:	b510      	push	{r4, lr}
    4862:	b128      	cbz	r0, 4870 <sdc_build_revision_get+0x10>
    4864:	2214      	movs	r2, #20
    4866:	4904      	ldr	r1, [pc, #16]	; (4878 <sdc_build_revision_get+0x18>)
    4868:	f007 fee9 	bl	c63e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    486c:	2000      	movs	r0, #0
    486e:	bd10      	pop	{r4, pc}
    4870:	f06f 0015 	mvn.w	r0, #21
    4874:	bd10      	pop	{r4, pc}
    4876:	0000      	.short	0x0000
    4878:	00004b0a 	.word	0x00004b0a

0000487c <sdc_cfg_set>:
    487c:	b570      	push	{r4, r5, r6, lr}
    487e:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    4882:	bbb0      	cbnz	r0, 48f2 <sdc_cfg_set+0x76>
    4884:	4c1d      	ldr	r4, [pc, #116]	; (48fc <sdc_cfg_set+0x80>)
    4886:	78a0      	ldrb	r0, [r4, #2]
    4888:	b108      	cbz	r0, 488e <sdc_cfg_set+0x12>
    488a:	11a8      	asrs	r0, r5, #6
    488c:	bd70      	pop	{r4, r5, r6, pc}
    488e:	b321      	cbz	r1, 48da <sdc_cfg_set+0x5e>
    4890:	f06f 0015 	mvn.w	r0, #21
    4894:	2a00      	cmp	r2, #0
    4896:	d0f9      	beq.n	488c <sdc_cfg_set+0x10>
    4898:	2908      	cmp	r1, #8
    489a:	d22a      	bcs.n	48f2 <sdc_cfg_set+0x76>
    489c:	e8df f001 	tbb	[pc, r1]
    48a0:	0a070429 	.word	0x0a070429
    48a4:	1e14110e 	.word	0x1e14110e
    48a8:	7810      	ldrb	r0, [r2, #0]
    48aa:	7320      	strb	r0, [r4, #12]
    48ac:	e018      	b.n	48e0 <sdc_cfg_set+0x64>
    48ae:	7810      	ldrb	r0, [r2, #0]
    48b0:	7360      	strb	r0, [r4, #13]
    48b2:	e015      	b.n	48e0 <sdc_cfg_set+0x64>
    48b4:	6810      	ldr	r0, [r2, #0]
    48b6:	f8c4 000f 	str.w	r0, [r4, #15]
    48ba:	e011      	b.n	48e0 <sdc_cfg_set+0x64>
    48bc:	6810      	ldr	r0, [r2, #0]
    48be:	6160      	str	r0, [r4, #20]
    48c0:	e00e      	b.n	48e0 <sdc_cfg_set+0x64>
    48c2:	7810      	ldrb	r0, [r2, #0]
    48c4:	73a0      	strb	r0, [r4, #14]
    48c6:	e00b      	b.n	48e0 <sdc_cfg_set+0x64>
    48c8:	7921      	ldrb	r1, [r4, #4]
    48ca:	b111      	cbz	r1, 48d2 <sdc_cfg_set+0x56>
    48cc:	7811      	ldrb	r1, [r2, #0]
    48ce:	2902      	cmp	r1, #2
    48d0:	d3dc      	bcc.n	488c <sdc_cfg_set+0x10>
    48d2:	490a      	ldr	r1, [pc, #40]	; (48fc <sdc_cfg_set+0x80>)
    48d4:	7810      	ldrb	r0, [r2, #0]
    48d6:	310c      	adds	r1, #12
    48d8:	7308      	strb	r0, [r1, #12]
    48da:	e001      	b.n	48e0 <sdc_cfg_set+0x64>
    48dc:	8810      	ldrh	r0, [r2, #0]
    48de:	8360      	strh	r0, [r4, #26]
    48e0:	4906      	ldr	r1, [pc, #24]	; (48fc <sdc_cfg_set+0x80>)
    48e2:	2201      	movs	r2, #1
    48e4:	310c      	adds	r1, #12
    48e6:	2000      	movs	r0, #0
    48e8:	f007 ffa2 	bl	c830 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    48ec:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    48f0:	db01      	blt.n	48f6 <sdc_cfg_set+0x7a>
    48f2:	4628      	mov	r0, r5
    48f4:	bd70      	pop	{r4, r5, r6, pc}
    48f6:	2101      	movs	r1, #1
    48f8:	70e1      	strb	r1, [r4, #3]
    48fa:	bd70      	pop	{r4, r5, r6, pc}
    48fc:	20000058 	.word	0x20000058

00004900 <sdc_enable>:
    4900:	b538      	push	{r3, r4, r5, lr}
    4902:	460d      	mov	r5, r1
    4904:	0004      	movs	r4, r0
    4906:	d020      	beq.n	494a <sdc_enable+0x4a>
    4908:	b1fd      	cbz	r5, 494a <sdc_enable+0x4a>
    490a:	f000 f933 	bl	4b74 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    490e:	b1f8      	cbz	r0, 4950 <sdc_enable+0x50>
    4910:	4620      	mov	r0, r4
    4912:	f7ff fe89 	bl	4628 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4916:	4c10      	ldr	r4, [pc, #64]	; (4958 <sdc_enable+0x58>)
    4918:	2200      	movs	r2, #0
    491a:	f104 010c 	add.w	r1, r4, #12
    491e:	7020      	strb	r0, [r4, #0]
    4920:	4628      	mov	r0, r5
    4922:	f007 ff85 	bl	c830 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    4926:	f00b fa84 	bl	fe32 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    492a:	2100      	movs	r1, #0
    492c:	7820      	ldrb	r0, [r4, #0]
    492e:	f006 fae3 	bl	aef8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4932:	7860      	ldrb	r0, [r4, #1]
    4934:	f88d 0000 	strb.w	r0, [sp]
    4938:	4668      	mov	r0, sp
    493a:	f00a fe7f 	bl	f63c <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>
    493e:	f7ff ff5b 	bl	47f8 <mpsl_fem_device_config_254_apply_get+0xc>
    4942:	2001      	movs	r0, #1
    4944:	70a0      	strb	r0, [r4, #2]
    4946:	2000      	movs	r0, #0
    4948:	bd38      	pop	{r3, r4, r5, pc}
    494a:	f06f 0015 	mvn.w	r0, #21
    494e:	bd38      	pop	{r3, r4, r5, pc}
    4950:	f04f 30ff 	mov.w	r0, #4294967295
    4954:	bd38      	pop	{r3, r4, r5, pc}
    4956:	0000      	.short	0x0000
    4958:	20000058 	.word	0x20000058

0000495c <sdc_init>:
    495c:	b570      	push	{r4, r5, r6, lr}
    495e:	0005      	movs	r5, r0
    4960:	d00b      	beq.n	497a <sdc_init+0x1e>
    4962:	f7ff fe07 	bl	4574 <mpsl_is_initialized>
    4966:	f04f 34ff 	mov.w	r4, #4294967295
    496a:	b120      	cbz	r0, 4976 <sdc_init+0x1a>
    496c:	f7ff fcc6 	bl	42fc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    4970:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    4974:	d904      	bls.n	4980 <sdc_init+0x24>
    4976:	4620      	mov	r0, r4
    4978:	bd70      	pop	{r4, r5, r6, pc}
    497a:	f06f 0015 	mvn.w	r0, #21
    497e:	bd70      	pop	{r4, r5, r6, pc}
    4980:	2200      	movs	r2, #0
    4982:	4b16      	ldr	r3, [pc, #88]	; (49dc <sdc_init+0x80>)
    4984:	4611      	mov	r1, r2
    4986:	bf00      	nop
    4988:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    498c:	4284      	cmp	r4, r0
    498e:	d303      	bcc.n	4998 <sdc_init+0x3c>
    4990:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    4994:	7882      	ldrb	r2, [r0, #2]
    4996:	e003      	b.n	49a0 <sdc_init+0x44>
    4998:	1c49      	adds	r1, r1, #1
    499a:	b2c9      	uxtb	r1, r1
    499c:	290c      	cmp	r1, #12
    499e:	d3f3      	bcc.n	4988 <sdc_init+0x2c>
    49a0:	4c0f      	ldr	r4, [pc, #60]	; (49e0 <sdc_init+0x84>)
    49a2:	4810      	ldr	r0, [pc, #64]	; (49e4 <sdc_init+0x88>)
    49a4:	7062      	strb	r2, [r4, #1]
    49a6:	60a5      	str	r5, [r4, #8]
    49a8:	f000 f9f6 	bl	4d98 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    49ac:	2000      	movs	r0, #0
    49ae:	70a0      	strb	r0, [r4, #2]
    49b0:	70e0      	strb	r0, [r4, #3]
    49b2:	7120      	strb	r0, [r4, #4]
    49b4:	f3ef 8410 	mrs	r4, PRIMASK
    49b8:	b672      	cpsid	i
    49ba:	480b      	ldr	r0, [pc, #44]	; (49e8 <sdc_init+0x8c>)
    49bc:	f06f 010c 	mvn.w	r1, #12
    49c0:	f000 fd6c 	bl	549c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    49c4:	4809      	ldr	r0, [pc, #36]	; (49ec <sdc_init+0x90>)
    49c6:	f000 fe2d 	bl	5624 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    49ca:	b118      	cbz	r0, 49d4 <sdc_init+0x78>
    49cc:	21c4      	movs	r1, #196	; 0xc4
    49ce:	2003      	movs	r0, #3
    49d0:	f000 f80e 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    49d4:	b904      	cbnz	r4, 49d8 <sdc_init+0x7c>
    49d6:	b662      	cpsie	i
    49d8:	2000      	movs	r0, #0
    49da:	bd70      	pop	{r4, r5, r6, pc}
    49dc:	00004ada 	.word	0x00004ada
    49e0:	20000058 	.word	0x20000058
    49e4:	000047f9 	.word	0x000047f9
    49e8:	4000c000 	.word	0x4000c000
    49ec:	00004ba1 	.word	0x00004ba1

000049f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    49f0:	b50e      	push	{r1, r2, r3, lr}
    49f2:	b672      	cpsid	i
    49f4:	4a15      	ldr	r2, [pc, #84]	; (4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    49f6:	6895      	ldr	r5, [r2, #8]
    49f8:	b1d5      	cbz	r5, 4a30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    49fa:	2200      	movs	r2, #0
    49fc:	4603      	mov	r3, r0
    49fe:	466e      	mov	r6, sp
    4a00:	240a      	movs	r4, #10
    4a02:	e003      	b.n	4a0c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    4a04:	fbb0 f0f4 	udiv	r0, r0, r4
    4a08:	1c52      	adds	r2, r2, #1
    4a0a:	b2d2      	uxtb	r2, r2
    4a0c:	2800      	cmp	r0, #0
    4a0e:	d1f9      	bne.n	4a04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    4a10:	54b0      	strb	r0, [r6, r2]
    4a12:	e009      	b.n	4a28 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    4a14:	fbb3 f0f4 	udiv	r0, r3, r4
    4a18:	fb04 3010 	mls	r0, r4, r0, r3
    4a1c:	fbb3 f3f4 	udiv	r3, r3, r4
    4a20:	1e52      	subs	r2, r2, #1
    4a22:	b2d2      	uxtb	r2, r2
    4a24:	3030      	adds	r0, #48	; 0x30
    4a26:	54b0      	strb	r0, [r6, r2]
    4a28:	2a00      	cmp	r2, #0
    4a2a:	d1f3      	bne.n	4a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    4a2c:	4630      	mov	r0, r6
    4a2e:	47a8      	blx	r5
    4a30:	f3bf 8f4f 	dsb	sy
    4a34:	4806      	ldr	r0, [pc, #24]	; (4a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    4a36:	6801      	ldr	r1, [r0, #0]
    4a38:	4a06      	ldr	r2, [pc, #24]	; (4a54 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4a3a:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4a3e:	4311      	orrs	r1, r2
    4a40:	6001      	str	r1, [r0, #0]
    4a42:	f3bf 8f4f 	dsb	sy
    4a46:	bf00      	nop
    4a48:	e7fd      	b.n	4a46 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    4a4a:	0000      	.short	0x0000
    4a4c:	20000058 	.word	0x20000058
    4a50:	e000ed0c 	.word	0xe000ed0c
    4a54:	05fa0004 	.word	0x05fa0004

00004a58 <sdc_support_adv>:
    4a58:	4806      	ldr	r0, [pc, #24]	; (4a74 <sdc_support_adv+0x1c>)
    4a5a:	b510      	push	{r4, lr}
    4a5c:	78c1      	ldrb	r1, [r0, #3]
    4a5e:	7880      	ldrb	r0, [r0, #2]
    4a60:	4301      	orrs	r1, r0
    4a62:	d002      	beq.n	4a6a <sdc_support_adv+0x12>
    4a64:	f04f 30ff 	mov.w	r0, #4294967295
    4a68:	bd10      	pop	{r4, pc}
    4a6a:	f006 fa65 	bl	af38 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    4a6e:	2000      	movs	r0, #0
    4a70:	bd10      	pop	{r4, pc}
    4a72:	0000      	.short	0x0000
    4a74:	20000058 	.word	0x20000058

00004a78 <sdc_support_dle>:
    4a78:	4806      	ldr	r0, [pc, #24]	; (4a94 <sdc_support_dle+0x1c>)
    4a7a:	b510      	push	{r4, lr}
    4a7c:	78c1      	ldrb	r1, [r0, #3]
    4a7e:	7880      	ldrb	r0, [r0, #2]
    4a80:	4301      	orrs	r1, r0
    4a82:	d002      	beq.n	4a8a <sdc_support_dle+0x12>
    4a84:	f04f 30ff 	mov.w	r0, #4294967295
    4a88:	bd10      	pop	{r4, pc}
    4a8a:	f005 fff5 	bl	aa78 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    4a8e:	2000      	movs	r0, #0
    4a90:	bd10      	pop	{r4, pc}
    4a92:	0000      	.short	0x0000
    4a94:	20000058 	.word	0x20000058

00004a98 <sdc_support_le_2m_phy>:
    4a98:	4806      	ldr	r0, [pc, #24]	; (4ab4 <sdc_support_le_2m_phy+0x1c>)
    4a9a:	b510      	push	{r4, lr}
    4a9c:	78c1      	ldrb	r1, [r0, #3]
    4a9e:	7880      	ldrb	r0, [r0, #2]
    4aa0:	4301      	orrs	r1, r0
    4aa2:	d002      	beq.n	4aaa <sdc_support_le_2m_phy+0x12>
    4aa4:	f04f 30ff 	mov.w	r0, #4294967295
    4aa8:	bd10      	pop	{r4, pc}
    4aaa:	f00a ff38 	bl	f91e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    4aae:	2000      	movs	r0, #0
    4ab0:	bd10      	pop	{r4, pc}
    4ab2:	0000      	.short	0x0000
    4ab4:	20000058 	.word	0x20000058

00004ab8 <sdc_support_slave>:
    4ab8:	4806      	ldr	r0, [pc, #24]	; (4ad4 <sdc_support_slave+0x1c>)
    4aba:	b510      	push	{r4, lr}
    4abc:	78c1      	ldrb	r1, [r0, #3]
    4abe:	7880      	ldrb	r0, [r0, #2]
    4ac0:	4301      	orrs	r1, r0
    4ac2:	d002      	beq.n	4aca <sdc_support_slave+0x12>
    4ac4:	f04f 30ff 	mov.w	r0, #4294967295
    4ac8:	bd10      	pop	{r4, pc}
    4aca:	f006 fa47 	bl	af5c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    4ace:	2000      	movs	r0, #0
    4ad0:	bd10      	pop	{r4, pc}
    4ad2:	0000      	.short	0x0000
    4ad4:	20000058 	.word	0x20000058
    4ad8:	00010001 	.word	0x00010001
    4adc:	0002000b 	.word	0x0002000b
    4ae0:	0005000a 	.word	0x0005000a
    4ae4:	000a0009 	.word	0x000a0009
    4ae8:	00140008 	.word	0x00140008
    4aec:	001e0007 	.word	0x001e0007
    4af0:	00320006 	.word	0x00320006
    4af4:	004b0005 	.word	0x004b0005
    4af8:	00640004 	.word	0x00640004
    4afc:	00960003 	.word	0x00960003
    4b00:	00fa0002 	.word	0x00fa0002
    4b04:	01f40001 	.word	0x01f40001
    4b08:	473f0000 	.word	0x473f0000
    4b0c:	95818e70 	.word	0x95818e70
    4b10:	d39d864e 	.word	0xd39d864e
    4b14:	f68895a2 	.word	0xf68895a2
    4b18:	537f0a30 	.word	0x537f0a30
    4b1c:	0000fd49 	.word	0x0000fd49

00004b20 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    4b20:	4a05      	ldr	r2, [pc, #20]	; (4b38 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    4b22:	b510      	push	{r4, lr}
    4b24:	6852      	ldr	r2, [r2, #4]
    4b26:	b112      	cbz	r2, 4b2e <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    4b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4b2c:	4710      	bx	r2
    4b2e:	2183      	movs	r1, #131	; 0x83
    4b30:	2004      	movs	r0, #4
    4b32:	f7ff ff5d 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b36:	0000      	.short	0x0000
    4b38:	20000f60 	.word	0x20000f60

00004b3c <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    4b3c:	4a05      	ldr	r2, [pc, #20]	; (4b54 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    4b3e:	b510      	push	{r4, lr}
    4b40:	6812      	ldr	r2, [r2, #0]
    4b42:	b112      	cbz	r2, 4b4a <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    4b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4b48:	4710      	bx	r2
    4b4a:	217d      	movs	r1, #125	; 0x7d
    4b4c:	2004      	movs	r0, #4
    4b4e:	f7ff ff4f 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b52:	0000      	.short	0x0000
    4b54:	20000f60 	.word	0x20000f60

00004b58 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    4b58:	4a05      	ldr	r2, [pc, #20]	; (4b70 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    4b5a:	b510      	push	{r4, lr}
    4b5c:	6892      	ldr	r2, [r2, #8]
    4b5e:	b112      	cbz	r2, 4b66 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    4b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4b64:	4710      	bx	r2
    4b66:	2189      	movs	r1, #137	; 0x89
    4b68:	2004      	movs	r0, #4
    4b6a:	f7ff ff41 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b6e:	0000      	.short	0x0000
    4b70:	20000f60 	.word	0x20000f60

00004b74 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    4b74:	4805      	ldr	r0, [pc, #20]	; (4b8c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    4b76:	6801      	ldr	r1, [r0, #0]
    4b78:	b129      	cbz	r1, 4b86 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4b7a:	6841      	ldr	r1, [r0, #4]
    4b7c:	b119      	cbz	r1, 4b86 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4b7e:	6880      	ldr	r0, [r0, #8]
    4b80:	b108      	cbz	r0, 4b86 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4b82:	2001      	movs	r0, #1
    4b84:	4770      	bx	lr
    4b86:	2000      	movs	r0, #0
    4b88:	4770      	bx	lr
    4b8a:	0000      	.short	0x0000
    4b8c:	20000f60 	.word	0x20000f60

00004b90 <sdc_rand_source_register>:
    4b90:	4902      	ldr	r1, [pc, #8]	; (4b9c <sdc_rand_source_register+0xc>)
    4b92:	c80d      	ldmia	r0, {r0, r2, r3}
    4b94:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4b98:	2000      	movs	r0, #0
    4b9a:	4770      	bx	lr
    4b9c:	20000f60 	.word	0x20000f60

00004ba0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ba2:	4c12      	ldr	r4, [pc, #72]	; (4bec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4ba4:	2600      	movs	r6, #0
    4ba6:	6825      	ldr	r5, [r4, #0]
    4ba8:	e011      	b.n	4bce <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4baa:	9800      	ldr	r0, [sp, #0]
    4bac:	2802      	cmp	r0, #2
    4bae:	d002      	beq.n	4bb6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4bb0:	2803      	cmp	r0, #3
    4bb2:	d10c      	bne.n	4bce <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4bb4:	e006      	b.n	4bc4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4bb6:	6820      	ldr	r0, [r4, #0]
    4bb8:	b110      	cbz	r0, 4bc0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    4bba:	2000      	movs	r0, #0
    4bbc:	6026      	str	r6, [r4, #0]
    4bbe:	e005      	b.n	4bcc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4bc0:	2128      	movs	r1, #40	; 0x28
    4bc2:	e00c      	b.n	4bde <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4bc4:	6820      	ldr	r0, [r4, #0]
    4bc6:	b168      	cbz	r0, 4be4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4bc8:	2001      	movs	r0, #1
    4bca:	6026      	str	r6, [r4, #0]
    4bcc:	47a8      	blx	r5
    4bce:	4668      	mov	r0, sp
    4bd0:	f000 fcfa 	bl	55c8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4bd4:	2800      	cmp	r0, #0
    4bd6:	d0e8      	beq.n	4baa <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4bd8:	2805      	cmp	r0, #5
    4bda:	d005      	beq.n	4be8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    4bdc:	2135      	movs	r1, #53	; 0x35
    4bde:	2004      	movs	r0, #4
    4be0:	f7ff ff06 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4be4:	212d      	movs	r1, #45	; 0x2d
    4be6:	e7fa      	b.n	4bde <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4bea:	0000      	.short	0x0000
    4bec:	20000074 	.word	0x20000074
    4bf0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    4bf2:	4c21      	ldr	r4, [pc, #132]	; (4c78 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    4bf4:	4605      	mov	r5, r0
    4bf6:	7820      	ldrb	r0, [r4, #0]
    4bf8:	b140      	cbz	r0, 4c0c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    4bfa:	78a2      	ldrb	r2, [r4, #2]
    4bfc:	1c61      	adds	r1, r4, #1
    4bfe:	4628      	mov	r0, r5
    4c00:	1c92      	adds	r2, r2, #2
    4c02:	f007 fd1c 	bl	c63e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4c06:	2000      	movs	r0, #0
    4c08:	7020      	strb	r0, [r4, #0]
    4c0a:	e025      	b.n	4c58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb8>
    4c0c:	481a      	ldr	r0, [pc, #104]	; (4c78 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    4c0e:	3844      	subs	r0, #68	; 0x44
    4c10:	f005 ff68 	bl	aae4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    4c14:	2800      	cmp	r0, #0
    4c16:	d020      	beq.n	4c5a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    4c18:	4c17      	ldr	r4, [pc, #92]	; (4c78 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    4c1a:	3c44      	subs	r4, #68	; 0x44
    4c1c:	7820      	ldrb	r0, [r4, #0]
    4c1e:	2811      	cmp	r0, #17
    4c20:	d104      	bne.n	4c2c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x8c>
    4c22:	210a      	movs	r1, #10
    4c24:	203e      	movs	r0, #62	; 0x3e
    4c26:	f007 fe83 	bl	c930 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4c2a:	b118      	cbz	r0, 4c34 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    4c2c:	7820      	ldrb	r0, [r4, #0]
    4c2e:	2808      	cmp	r0, #8
    4c30:	d006      	beq.n	4c40 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa0>
    4c32:	e00a      	b.n	4c4a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xaa>
    4c34:	4910      	ldr	r1, [pc, #64]	; (4c78 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    4c36:	4628      	mov	r0, r5
    4c38:	3944      	subs	r1, #68	; 0x44
    4c3a:	f008 f882 	bl	cd42 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    4c3e:	e00b      	b.n	4c58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb8>
    4c40:	2105      	movs	r1, #5
    4c42:	203e      	movs	r0, #62	; 0x3e
    4c44:	f007 fe74 	bl	c930 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4c48:	b140      	cbz	r0, 4c5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xbc>
    4c4a:	490b      	ldr	r1, [pc, #44]	; (4c78 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    4c4c:	4628      	mov	r0, r5
    4c4e:	3944      	subs	r1, #68	; 0x44
    4c50:	f007 fecc 	bl	c9ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    4c54:	2800      	cmp	r0, #0
    4c56:	d000      	beq.n	4c5a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    4c58:	2001      	movs	r0, #1
    4c5a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4c5c:	88a0      	ldrh	r0, [r4, #4]
    4c5e:	f8ad 0000 	strh.w	r0, [sp]
    4c62:	a901      	add	r1, sp, #4
    4c64:	4668      	mov	r0, sp
    4c66:	f008 f986 	bl	cf76 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    4c6a:	2800      	cmp	r0, #0
    4c6c:	d0f5      	beq.n	4c5a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    4c6e:	2198      	movs	r1, #152	; 0x98
    4c70:	2008      	movs	r0, #8
    4c72:	f7ff febd 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c76:	0000      	.short	0x0000
    4c78:	20001040 	.word	0x20001040
    4c7c:	b570      	push	{r4, r5, r6, lr}
    4c7e:	780a      	ldrb	r2, [r1, #0]
    4c80:	7082      	strb	r2, [r0, #2]
    4c82:	b33a      	cbz	r2, 4cd4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x134>
    4c84:	2a01      	cmp	r2, #1
    4c86:	d825      	bhi.n	4cd4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x134>
    4c88:	2313      	movs	r3, #19
    4c8a:	7003      	strb	r3, [r0, #0]
    4c8c:	2300      	movs	r3, #0
    4c8e:	e00a      	b.n	4ca6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x106>
    4c90:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4c94:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4c98:	78a6      	ldrb	r6, [r4, #2]
    4c9a:	70ee      	strb	r6, [r5, #3]
    4c9c:	8864      	ldrh	r4, [r4, #2]
    4c9e:	0a24      	lsrs	r4, r4, #8
    4ca0:	1c5b      	adds	r3, r3, #1
    4ca2:	712c      	strb	r4, [r5, #4]
    4ca4:	b2db      	uxtb	r3, r3
    4ca6:	4293      	cmp	r3, r2
    4ca8:	d3f2      	bcc.n	4c90 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf0>
    4caa:	2300      	movs	r3, #0
    4cac:	e00b      	b.n	4cc6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x126>
    4cae:	bf00      	nop
    4cb0:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4cb4:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4cb8:	792e      	ldrb	r6, [r5, #4]
    4cba:	7166      	strb	r6, [r4, #5]
    4cbc:	88ad      	ldrh	r5, [r5, #4]
    4cbe:	0a2d      	lsrs	r5, r5, #8
    4cc0:	1c5b      	adds	r3, r3, #1
    4cc2:	71a5      	strb	r5, [r4, #6]
    4cc4:	b2db      	uxtb	r3, r3
    4cc6:	4293      	cmp	r3, r2
    4cc8:	d3f2      	bcc.n	4cb0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x110>
    4cca:	2101      	movs	r1, #1
    4ccc:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4cd0:	b2c0      	uxtb	r0, r0
    4cd2:	bd70      	pop	{r4, r5, r6, pc}
    4cd4:	2000      	movs	r0, #0
    4cd6:	bd70      	pop	{r4, r5, r6, pc}

00004cd8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4cd8:	2101      	movs	r1, #1
    4cda:	4a0c      	ldr	r2, [pc, #48]	; (4d0c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    4cdc:	2840      	cmp	r0, #64	; 0x40
    4cde:	d20c      	bcs.n	4cfa <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    4ce0:	2820      	cmp	r0, #32
    4ce2:	d803      	bhi.n	4cec <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    4ce4:	1e40      	subs	r0, r0, #1
    4ce6:	4081      	lsls	r1, r0
    4ce8:	6810      	ldr	r0, [r2, #0]
    4cea:	e002      	b.n	4cf2 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4cec:	3821      	subs	r0, #33	; 0x21
    4cee:	4081      	lsls	r1, r0
    4cf0:	6850      	ldr	r0, [r2, #4]
    4cf2:	4201      	tst	r1, r0
    4cf4:	d107      	bne.n	4d06 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4cf6:	2000      	movs	r0, #0
    4cf8:	4770      	bx	lr
    4cfa:	28ff      	cmp	r0, #255	; 0xff
    4cfc:	d003      	beq.n	4d06 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4cfe:	3840      	subs	r0, #64	; 0x40
    4d00:	4081      	lsls	r1, r0
    4d02:	6890      	ldr	r0, [r2, #8]
    4d04:	e7f5      	b.n	4cf2 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4d06:	2001      	movs	r0, #1
    4d08:	4770      	bx	lr
    4d0a:	0000      	.short	0x0000
    4d0c:	20000078 	.word	0x20000078

00004d10 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4d10:	2101      	movs	r1, #1
    4d12:	1e40      	subs	r0, r0, #1
    4d14:	4081      	lsls	r1, r0
    4d16:	4804      	ldr	r0, [pc, #16]	; (4d28 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    4d18:	68c0      	ldr	r0, [r0, #12]
    4d1a:	4201      	tst	r1, r0
    4d1c:	d001      	beq.n	4d22 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    4d1e:	2001      	movs	r0, #1
    4d20:	4770      	bx	lr
    4d22:	2000      	movs	r0, #0
    4d24:	4770      	bx	lr
    4d26:	0000      	.short	0x0000
    4d28:	20000078 	.word	0x20000078

00004d2c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4d2c:	4901      	ldr	r1, [pc, #4]	; (4d34 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    4d2e:	6800      	ldr	r0, [r0, #0]
    4d30:	60c8      	str	r0, [r1, #12]
    4d32:	4770      	bx	lr
    4d34:	20000078 	.word	0x20000078

00004d38 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    4d38:	4904      	ldr	r1, [pc, #16]	; (4d4c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    4d3a:	6802      	ldr	r2, [r0, #0]
    4d3c:	6840      	ldr	r0, [r0, #4]
    4d3e:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    4d42:	600a      	str	r2, [r1, #0]
    4d44:	4a02      	ldr	r2, [pc, #8]	; (4d50 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    4d46:	4310      	orrs	r0, r2
    4d48:	6048      	str	r0, [r1, #4]
    4d4a:	4770      	bx	lr
    4d4c:	20000078 	.word	0x20000078
    4d50:	024007f8 	.word	0x024007f8

00004d54 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    4d54:	4901      	ldr	r1, [pc, #4]	; (4d5c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    4d56:	6800      	ldr	r0, [r0, #0]
    4d58:	6088      	str	r0, [r1, #8]
    4d5a:	4770      	bx	lr
    4d5c:	20000078 	.word	0x20000078

00004d60 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4d60:	4805      	ldr	r0, [pc, #20]	; (4d78 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    4d62:	f04f 31ff 	mov.w	r1, #4294967295
    4d66:	6001      	str	r1, [r0, #0]
    4d68:	0cc9      	lsrs	r1, r1, #19
    4d6a:	6041      	str	r1, [r0, #4]
    4d6c:	2100      	movs	r1, #0
    4d6e:	6081      	str	r1, [r0, #8]
    4d70:	211f      	movs	r1, #31
    4d72:	60c1      	str	r1, [r0, #12]
    4d74:	4770      	bx	lr
    4d76:	0000      	.short	0x0000
    4d78:	20000078 	.word	0x20000078

00004d7c <sdc_hci_cmd_cb_reset>:
    4d7c:	b510      	push	{r4, lr}
    4d7e:	f7ff ffef 	bl	4d60 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    4d82:	f00a fd41 	bl	f808 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    4d86:	4604      	mov	r4, r0
    4d88:	4802      	ldr	r0, [pc, #8]	; (4d94 <sdc_hci_cmd_cb_reset+0x18>)
    4d8a:	6800      	ldr	r0, [r0, #0]
    4d8c:	b100      	cbz	r0, 4d90 <sdc_hci_cmd_cb_reset+0x14>
    4d8e:	4780      	blx	r0
    4d90:	4620      	mov	r0, r4
    4d92:	bd10      	pop	{r4, pc}
    4d94:	20000088 	.word	0x20000088

00004d98 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4d98:	4901      	ldr	r1, [pc, #4]	; (4da0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    4d9a:	6008      	str	r0, [r1, #0]
    4d9c:	4770      	bx	lr
    4d9e:	0000      	.short	0x0000
    4da0:	20000088 	.word	0x20000088

00004da4 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4da4:	2102      	movs	r1, #2
    4da6:	8001      	strh	r1, [r0, #0]
    4da8:	8041      	strh	r1, [r0, #2]
    4daa:	2100      	movs	r1, #0
    4dac:	7101      	strb	r1, [r0, #4]
    4dae:	213f      	movs	r1, #63	; 0x3f
    4db0:	7141      	strb	r1, [r0, #5]
    4db2:	f247 0147 	movw	r1, #28743	; 0x7047
    4db6:	80c1      	strh	r1, [r0, #6]
    4db8:	4901      	ldr	r1, [pc, #4]	; (4dc0 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    4dba:	6081      	str	r1, [r0, #8]
    4dbc:	2000      	movs	r0, #0
    4dbe:	4770      	bx	lr
    4dc0:	4e95818e 	.word	0x4e95818e

00004dc4 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    4dc4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    4dc6:	4604      	mov	r4, r0
    4dc8:	4669      	mov	r1, sp
    4dca:	f008 fc3a 	bl	d642 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    4dce:	b170      	cbz	r0, 4dee <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4dd0:	f240 2112 	movw	r1, #530	; 0x212
    4dd4:	e008      	b.n	4de8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    4dd6:	bf00      	nop
    4dd8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    4ddc:	4621      	mov	r1, r4
    4dde:	f000 f8a9 	bl	4f34 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    4de2:	b120      	cbz	r0, 4dee <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4de4:	f240 2117 	movw	r1, #535	; 0x217
    4de8:	2017      	movs	r0, #23
    4dea:	f7ff fe01 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4dee:	4668      	mov	r0, sp
    4df0:	f000 f850 	bl	4e94 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4df4:	2800      	cmp	r0, #0
    4df6:	d0ef      	beq.n	4dd8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    4df8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00004dfc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4dfc:	b510      	push	{r4, lr}
    4dfe:	2802      	cmp	r0, #2
    4e00:	d304      	bcc.n	4e0c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    4e02:	f240 116b 	movw	r1, #363	; 0x16b
    4e06:	2017      	movs	r0, #23
    4e08:	f7ff fdf2 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e0c:	4901      	ldr	r1, [pc, #4]	; (4e14 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    4e0e:	5c08      	ldrb	r0, [r1, r0]
    4e10:	bd10      	pop	{r4, pc}
    4e12:	0000      	.short	0x0000
    4e14:	20000f6c 	.word	0x20000f6c

00004e18 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    4e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e1a:	4605      	mov	r5, r0
    4e1c:	9000      	str	r0, [sp, #0]
    4e1e:	4291      	cmp	r1, r2
    4e20:	d201      	bcs.n	4e26 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
    4e22:	4614      	mov	r4, r2
    4e24:	e000      	b.n	4e28 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x10>
    4e26:	460c      	mov	r4, r1
    4e28:	b155      	cbz	r5, 4e40 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    4e2a:	2700      	movs	r7, #0
    4e2c:	1ce8      	adds	r0, r5, #3
    4e2e:	f020 0003 	bic.w	r0, r0, #3
    4e32:	42a8      	cmp	r0, r5
    4e34:	d006      	beq.n	4e44 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
    4e36:	f240 113f 	movw	r1, #319	; 0x13f
    4e3a:	2017      	movs	r0, #23
    4e3c:	f7ff fdd8 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e40:	2701      	movs	r7, #1
    4e42:	e7f3      	b.n	4e2c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x14>
    4e44:	4e12      	ldr	r6, [pc, #72]	; (4e90 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
    4e46:	4668      	mov	r0, sp
    4e48:	7031      	strb	r1, [r6, #0]
    4e4a:	7072      	strb	r2, [r6, #1]
    4e4c:	4639      	mov	r1, r7
    4e4e:	f000 f8ed 	bl	502c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    4e52:	2000      	movs	r0, #0
    4e54:	4603      	mov	r3, r0
    4e56:	9900      	ldr	r1, [sp, #0]
    4e58:	1cc9      	adds	r1, r1, #3
    4e5a:	f021 0103 	bic.w	r1, r1, #3
    4e5e:	9100      	str	r1, [sp, #0]
    4e60:	b967      	cbnz	r7, 4e7c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    4e62:	eb06 0280 	add.w	r2, r6, r0, lsl #2
    4e66:	60d1      	str	r1, [r2, #12]
    4e68:	2100      	movs	r1, #0
    4e6a:	e005      	b.n	4e78 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
    4e6c:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    4e70:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    4e74:	1c49      	adds	r1, r1, #1
    4e76:	b2c9      	uxtb	r1, r1
    4e78:	42a1      	cmp	r1, r4
    4e7a:	d3f7      	bcc.n	4e6c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x54>
    4e7c:	9900      	ldr	r1, [sp, #0]
    4e7e:	1c40      	adds	r0, r0, #1
    4e80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    4e84:	b2c0      	uxtb	r0, r0
    4e86:	9100      	str	r1, [sp, #0]
    4e88:	2802      	cmp	r0, #2
    4e8a:	d3e4      	bcc.n	4e56 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3e>
    4e8c:	1b48      	subs	r0, r1, r5
    4e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e90:	20000f6c 	.word	0x20000f6c

00004e94 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    4e94:	b570      	push	{r4, r5, r6, lr}
    4e96:	4604      	mov	r4, r0
    4e98:	f008 fc3d 	bl	d716 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    4e9c:	b108      	cbz	r0, 4ea2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    4e9e:	2010      	movs	r0, #16
    4ea0:	bd70      	pop	{r4, r5, r6, pc}
    4ea2:	7825      	ldrb	r5, [r4, #0]
    4ea4:	f000 f8fe 	bl	50a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    4ea8:	4602      	mov	r2, r0
    4eaa:	480c      	ldr	r0, [pc, #48]	; (4edc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    4eac:	8861      	ldrh	r1, [r4, #2]
    4eae:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4eb2:	e00e      	b.n	4ed2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    4eb4:	68c3      	ldr	r3, [r0, #12]
    4eb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    4eba:	b143      	cbz	r3, 4ece <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    4ebc:	1c4a      	adds	r2, r1, #1
    4ebe:	8062      	strh	r2, [r4, #2]
    4ec0:	80a1      	strh	r1, [r4, #4]
    4ec2:	68c0      	ldr	r0, [r0, #12]
    4ec4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4ec8:	60a0      	str	r0, [r4, #8]
    4eca:	2000      	movs	r0, #0
    4ecc:	bd70      	pop	{r4, r5, r6, pc}
    4ece:	1c49      	adds	r1, r1, #1
    4ed0:	b289      	uxth	r1, r1
    4ed2:	4291      	cmp	r1, r2
    4ed4:	d3ee      	bcc.n	4eb4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    4ed6:	8061      	strh	r1, [r4, #2]
    4ed8:	2005      	movs	r0, #5
    4eda:	bd70      	pop	{r4, r5, r6, pc}
    4edc:	20000f6c 	.word	0x20000f6c

00004ee0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ee4:	b121      	cbz	r1, 4ef0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    4ee6:	2901      	cmp	r1, #1
    4ee8:	d002      	beq.n	4ef0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    4eea:	2000      	movs	r0, #0
    4eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ef0:	4c0f      	ldr	r4, [pc, #60]	; (4f30 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    4ef2:	2700      	movs	r7, #0
    4ef4:	463b      	mov	r3, r7
    4ef6:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4efa:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    4efe:	f814 c001 	ldrb.w	ip, [r4, r1]
    4f02:	e00a      	b.n	4f1a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    4f04:	19dc      	adds	r4, r3, r7
    4f06:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    4f0a:	b2a4      	uxth	r4, r4
    4f0c:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    4f10:	f1be 0f00 	cmp.w	lr, #0
    4f14:	d004      	beq.n	4f20 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    4f16:	1c5b      	adds	r3, r3, #1
    4f18:	b29b      	uxth	r3, r3
    4f1a:	459c      	cmp	ip, r3
    4f1c:	d8f2      	bhi.n	4f04 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    4f1e:	4634      	mov	r4, r6
    4f20:	8004      	strh	r4, [r0, #0]
    4f22:	4620      	mov	r0, r4
    4f24:	42b4      	cmp	r4, r6
    4f26:	d0e0      	beq.n	4eea <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    4f28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4f2c:	f000 b834 	b.w	4f98 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    4f30:	20000f6c 	.word	0x20000f6c

00004f34 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f38:	4606      	mov	r6, r0
    4f3a:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4f3e:	460c      	mov	r4, r1
    4f40:	f243 0702 	movw	r7, #12290	; 0x3002
    4f44:	38ff      	subs	r0, #255	; 0xff
    4f46:	d020      	beq.n	4f8a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4f48:	2c02      	cmp	r4, #2
    4f4a:	d302      	bcc.n	4f52 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4f4c:	2007      	movs	r0, #7
    4f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f52:	4630      	mov	r0, r6
    4f54:	f000 f85a 	bl	500c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    4f58:	0005      	movs	r5, r0
    4f5a:	d016      	beq.n	4f8a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4f5c:	480c      	ldr	r0, [pc, #48]	; (4f90 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    4f5e:	4629      	mov	r1, r5
    4f60:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4f64:	4630      	mov	r0, r6
    4f66:	4790      	blx	r2
    4f68:	480a      	ldr	r0, [pc, #40]	; (4f94 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4f6a:	2100      	movs	r1, #0
    4f6c:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    4f70:	68f8      	ldr	r0, [r7, #12]
    4f72:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    4f76:	4620      	mov	r0, r4
    4f78:	f000 f88a 	bl	5090 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4f7c:	4602      	mov	r2, r0
    4f7e:	4629      	mov	r1, r5
    4f80:	6878      	ldr	r0, [r7, #4]
    4f82:	f008 fb2b 	bl	d5dc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4f86:	2000      	movs	r0, #0
    4f88:	e7e1      	b.n	4f4e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4f8a:	4638      	mov	r0, r7
    4f8c:	e7df      	b.n	4f4e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4f8e:	0000      	.short	0x0000
    4f90:	000050c4 	.word	0x000050c4
    4f94:	20000f6c 	.word	0x20000f6c
    4f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f9c:	4690      	mov	r8, r2
    4f9e:	460d      	mov	r5, r1
    4fa0:	4607      	mov	r7, r0
    4fa2:	f008 fb5f 	bl	d664 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    4fa6:	b148      	cbz	r0, 4fbc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    4fa8:	4816      	ldr	r0, [pc, #88]	; (5004 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    4faa:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4fae:	68f0      	ldr	r0, [r6, #12]
    4fb0:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    4fb4:	b128      	cbz	r0, 4fc2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    4fb6:	f240 1109 	movw	r1, #265	; 0x109
    4fba:	e015      	b.n	4fe8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4fbc:	f44f 7184 	mov.w	r1, #264	; 0x108
    4fc0:	e012      	b.n	4fe8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4fc2:	6870      	ldr	r0, [r6, #4]
    4fc4:	2800      	cmp	r0, #0
    4fc6:	d01a      	beq.n	4ffe <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    4fc8:	4628      	mov	r0, r5
    4fca:	f000 f861 	bl	5090 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4fce:	4601      	mov	r1, r0
    4fd0:	6870      	ldr	r0, [r6, #4]
    4fd2:	f008 fab5 	bl	d540 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4fd6:	0004      	movs	r4, r0
    4fd8:	d010      	beq.n	4ffc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    4fda:	68f0      	ldr	r0, [r6, #12]
    4fdc:	2d02      	cmp	r5, #2
    4fde:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    4fe2:	d304      	bcc.n	4fee <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    4fe4:	f44f 718a 	mov.w	r1, #276	; 0x114
    4fe8:	2017      	movs	r0, #23
    4fea:	f7ff fd01 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4fee:	4806      	ldr	r0, [pc, #24]	; (5008 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    4ff0:	4642      	mov	r2, r8
    4ff2:	4621      	mov	r1, r4
    4ff4:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    4ff8:	4638      	mov	r0, r7
    4ffa:	4798      	blx	r3
    4ffc:	4620      	mov	r0, r4
    4ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5002:	0000      	.short	0x0000
    5004:	20000f6c 	.word	0x20000f6c
    5008:	000050bc 	.word	0x000050bc
    500c:	b570      	push	{r4, r5, r6, lr}
    500e:	460c      	mov	r4, r1
    5010:	4605      	mov	r5, r0
    5012:	f008 fb27 	bl	d664 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    5016:	2800      	cmp	r0, #0
    5018:	d005      	beq.n	5026 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    501a:	4803      	ldr	r0, [pc, #12]	; (5028 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    501c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5020:	68c0      	ldr	r0, [r0, #12]
    5022:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    5026:	bd70      	pop	{r4, r5, r6, pc}
    5028:	20000f6c 	.word	0x20000f6c
    502c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5030:	4e16      	ldr	r6, [pc, #88]	; (508c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    5032:	4688      	mov	r8, r1
    5034:	4605      	mov	r5, r0
    5036:	2400      	movs	r4, #0
    5038:	6828      	ldr	r0, [r5, #0]
    503a:	1cc0      	adds	r0, r0, #3
    503c:	f020 0003 	bic.w	r0, r0, #3
    5040:	6028      	str	r0, [r5, #0]
    5042:	4620      	mov	r0, r4
    5044:	f000 f824 	bl	5090 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5048:	5d31      	ldrb	r1, [r6, r4]
    504a:	4348      	muls	r0, r1
    504c:	f1b8 0f00 	cmp.w	r8, #0
    5050:	d001      	beq.n	5056 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    5052:	2200      	movs	r2, #0
    5054:	e000      	b.n	5058 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    5056:	682a      	ldr	r2, [r5, #0]
    5058:	4601      	mov	r1, r0
    505a:	9200      	str	r2, [sp, #0]
    505c:	b132      	cbz	r2, 506c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    505e:	2700      	movs	r7, #0
    5060:	ea4f 000d 	mov.w	r0, sp
    5064:	f008 fa99 	bl	d59a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5068:	b11f      	cbz	r7, 5072 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    506a:	e006      	b.n	507a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    506c:	2701      	movs	r7, #1
    506e:	2000      	movs	r0, #0
    5070:	e7f8      	b.n	5064 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    5072:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    5076:	9a00      	ldr	r2, [sp, #0]
    5078:	604a      	str	r2, [r1, #4]
    507a:	6829      	ldr	r1, [r5, #0]
    507c:	1c64      	adds	r4, r4, #1
    507e:	4408      	add	r0, r1
    5080:	b2e4      	uxtb	r4, r4
    5082:	6028      	str	r0, [r5, #0]
    5084:	2c02      	cmp	r4, #2
    5086:	d3d7      	bcc.n	5038 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    5088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    508c:	20000f6c 	.word	0x20000f6c
    5090:	4903      	ldr	r1, [pc, #12]	; (50a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    5092:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    5096:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    509a:	1cc0      	adds	r0, r0, #3
    509c:	4008      	ands	r0, r1
    509e:	4770      	bx	lr
    50a0:	000050b8 	.word	0x000050b8
    50a4:	4803      	ldr	r0, [pc, #12]	; (50b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    50a6:	7801      	ldrb	r1, [r0, #0]
    50a8:	7840      	ldrb	r0, [r0, #1]
    50aa:	4281      	cmp	r1, r0
    50ac:	d300      	bcc.n	50b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    50ae:	4608      	mov	r0, r1
    50b0:	4770      	bx	lr
    50b2:	0000      	.short	0x0000
    50b4:	20000f6c 	.word	0x20000f6c
    50b8:	00e80210 	.word	0x00e80210
    50bc:	0000d679 	.word	0x0000d679
    50c0:	0000d679 	.word	0x0000d679
    50c4:	0000ee55 	.word	0x0000ee55
    50c8:	0000e3f7 	.word	0x0000e3f7

000050cc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    50cc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    50d0:	4c26      	ldr	r4, [pc, #152]	; (516c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    50d2:	4680      	mov	r8, r0
    50d4:	b081      	sub	sp, #4
    50d6:	6820      	ldr	r0, [r4, #0]
    50d8:	469a      	mov	sl, r3
    50da:	4693      	mov	fp, r2
    50dc:	b158      	cbz	r0, 50f6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    50de:	7a02      	ldrb	r2, [r0, #8]
    50e0:	4542      	cmp	r2, r8
    50e2:	d903      	bls.n	50ec <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    50e4:	6841      	ldr	r1, [r0, #4]
    50e6:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    50ea:	b140      	cbz	r0, 50fe <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    50ec:	f243 0002 	movw	r0, #12290	; 0x3002
    50f0:	b005      	add	sp, #20
    50f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    50f6:	21a5      	movs	r1, #165	; 0xa5
    50f8:	2018      	movs	r0, #24
    50fa:	f7ff fc79 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50fe:	4619      	mov	r1, r3
    5100:	9802      	ldr	r0, [sp, #8]
    5102:	f008 fad1 	bl	d6a8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    5106:	b286      	uxth	r6, r0
    5108:	4658      	mov	r0, fp
    510a:	990e      	ldr	r1, [sp, #56]	; 0x38
    510c:	f008 fac3 	bl	d696 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    5110:	b285      	uxth	r5, r0
    5112:	1970      	adds	r0, r6, r5
    5114:	1d00      	adds	r0, r0, #4
    5116:	b287      	uxth	r7, r0
    5118:	6820      	ldr	r0, [r4, #0]
    511a:	46a1      	mov	r9, r4
    511c:	4639      	mov	r1, r7
    511e:	6800      	ldr	r0, [r0, #0]
    5120:	f008 fa0e 	bl	d540 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5124:	0004      	movs	r4, r0
    5126:	d01f      	beq.n	5168 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    5128:	8067      	strh	r7, [r4, #2]
    512a:	8025      	strh	r5, [r4, #0]
    512c:	4629      	mov	r1, r5
    512e:	1d20      	adds	r0, r4, #4
    5130:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    5132:	4607      	mov	r7, r0
    5134:	465a      	mov	r2, fp
    5136:	2301      	movs	r3, #1
    5138:	9500      	str	r5, [sp, #0]
    513a:	f008 f960 	bl	d3fe <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    513e:	8820      	ldrh	r0, [r4, #0]
    5140:	4631      	mov	r1, r6
    5142:	4438      	add	r0, r7
    5144:	2301      	movs	r3, #1
    5146:	9a02      	ldr	r2, [sp, #8]
    5148:	f8cd a000 	str.w	sl, [sp]
    514c:	f008 f957 	bl	d3fe <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    5150:	8820      	ldrh	r0, [r4, #0]
    5152:	19c1      	adds	r1, r0, r7
    5154:	4638      	mov	r0, r7
    5156:	f008 f983 	bl	d460 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    515a:	f8d9 0000 	ldr.w	r0, [r9]
    515e:	6841      	ldr	r1, [r0, #4]
    5160:	2000      	movs	r0, #0
    5162:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    5166:	e7c3      	b.n	50f0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5168:	2004      	movs	r0, #4
    516a:	e7c1      	b.n	50f0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    516c:	2000008c 	.word	0x2000008c

00005170 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    5170:	b570      	push	{r4, r5, r6, lr}
    5172:	4c14      	ldr	r4, [pc, #80]	; (51c4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    5174:	6823      	ldr	r3, [r4, #0]
    5176:	b18b      	cbz	r3, 519c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    5178:	7a19      	ldrb	r1, [r3, #8]
    517a:	4281      	cmp	r1, r0
    517c:	d912      	bls.n	51a4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    517e:	685a      	ldr	r2, [r3, #4]
    5180:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    5184:	b171      	cbz	r1, 51a4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    5186:	2500      	movs	r5, #0
    5188:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    518c:	884a      	ldrh	r2, [r1, #2]
    518e:	6818      	ldr	r0, [r3, #0]
    5190:	f008 fa24 	bl	d5dc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5194:	6821      	ldr	r1, [r4, #0]
    5196:	2000      	movs	r0, #0
    5198:	7a0a      	ldrb	r2, [r1, #8]
    519a:	e00c      	b.n	51b6 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    519c:	21c8      	movs	r1, #200	; 0xc8
    519e:	2018      	movs	r0, #24
    51a0:	f7ff fc26 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51a4:	f243 0002 	movw	r0, #12290	; 0x3002
    51a8:	bd70      	pop	{r4, r5, r6, pc}
    51aa:	684b      	ldr	r3, [r1, #4]
    51ac:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    51b0:	b933      	cbnz	r3, 51c0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    51b2:	1c40      	adds	r0, r0, #1
    51b4:	b2c0      	uxtb	r0, r0
    51b6:	4282      	cmp	r2, r0
    51b8:	d8f7      	bhi.n	51aa <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    51ba:	6808      	ldr	r0, [r1, #0]
    51bc:	f008 fa03 	bl	d5c6 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    51c0:	2000      	movs	r0, #0
    51c2:	bd70      	pop	{r4, r5, r6, pc}
    51c4:	2000008c 	.word	0x2000008c

000051c8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    51c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51cc:	460d      	mov	r5, r1
    51ce:	0004      	movs	r4, r0
    51d0:	4690      	mov	r8, r2
    51d2:	f04f 0600 	mov.w	r6, #0
    51d6:	d009      	beq.n	51ec <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    51d8:	2700      	movs	r7, #0
    51da:	1ce0      	adds	r0, r4, #3
    51dc:	f020 0003 	bic.w	r0, r0, #3
    51e0:	42a0      	cmp	r0, r4
    51e2:	d005      	beq.n	51f0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    51e4:	2186      	movs	r1, #134	; 0x86
    51e6:	2018      	movs	r0, #24
    51e8:	f7ff fc02 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51ec:	2701      	movs	r7, #1
    51ee:	e7f4      	b.n	51da <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    51f0:	b1cd      	cbz	r5, 5226 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    51f2:	4611      	mov	r1, r2
    51f4:	2000      	movs	r0, #0
    51f6:	f008 f9d0 	bl	d59a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    51fa:	300c      	adds	r0, #12
    51fc:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    5200:	b98f      	cbnz	r7, 5226 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    5202:	4f0a      	ldr	r7, [pc, #40]	; (522c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    5204:	f104 000c 	add.w	r0, r4, #12
    5208:	00aa      	lsls	r2, r5, #2
    520a:	603c      	str	r4, [r7, #0]
    520c:	7225      	strb	r5, [r4, #8]
    520e:	6060      	str	r0, [r4, #4]
    5210:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5214:	6020      	str	r0, [r4, #0]
    5216:	2100      	movs	r1, #0
    5218:	6860      	ldr	r0, [r4, #4]
    521a:	f007 fa8a 	bl	c732 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    521e:	4641      	mov	r1, r8
    5220:	6838      	ldr	r0, [r7, #0]
    5222:	f008 f9ba 	bl	d59a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5226:	4630      	mov	r0, r6
    5228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    522c:	2000008c 	.word	0x2000008c

00005230 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    5230:	b570      	push	{r4, r5, r6, lr}
    5232:	4d08      	ldr	r5, [pc, #32]	; (5254 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    5234:	6828      	ldr	r0, [r5, #0]
    5236:	2800      	cmp	r0, #0
    5238:	d00a      	beq.n	5250 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    523a:	2400      	movs	r4, #0
    523c:	e004      	b.n	5248 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    523e:	4620      	mov	r0, r4
    5240:	f7ff ff96 	bl	5170 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    5244:	1c64      	adds	r4, r4, #1
    5246:	b2e4      	uxtb	r4, r4
    5248:	6828      	ldr	r0, [r5, #0]
    524a:	7a00      	ldrb	r0, [r0, #8]
    524c:	42a0      	cmp	r0, r4
    524e:	d8f6      	bhi.n	523e <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    5250:	bd70      	pop	{r4, r5, r6, pc}
    5252:	0000      	.short	0x0000
    5254:	2000008c 	.word	0x2000008c

00005258 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    5258:	4909      	ldr	r1, [pc, #36]	; (5280 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    525a:	b510      	push	{r4, lr}
    525c:	4602      	mov	r2, r0
    525e:	6809      	ldr	r1, [r1, #0]
    5260:	2000      	movs	r0, #0
    5262:	b149      	cbz	r1, 5278 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    5264:	7a0b      	ldrb	r3, [r1, #8]
    5266:	4293      	cmp	r3, r2
    5268:	d905      	bls.n	5276 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    526a:	6849      	ldr	r1, [r1, #4]
    526c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    5270:	2900      	cmp	r1, #0
    5272:	d000      	beq.n	5276 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    5274:	1d08      	adds	r0, r1, #4
    5276:	bd10      	pop	{r4, pc}
    5278:	21ee      	movs	r1, #238	; 0xee
    527a:	2018      	movs	r0, #24
    527c:	f7ff fbb8 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5280:	2000008c 	.word	0x2000008c

00005284 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    5284:	490a      	ldr	r1, [pc, #40]	; (52b0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    5286:	b510      	push	{r4, lr}
    5288:	4602      	mov	r2, r0
    528a:	6809      	ldr	r1, [r1, #0]
    528c:	2000      	movs	r0, #0
    528e:	b159      	cbz	r1, 52a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    5290:	7a0b      	ldrb	r3, [r1, #8]
    5292:	4293      	cmp	r3, r2
    5294:	d907      	bls.n	52a6 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5296:	6849      	ldr	r1, [r1, #4]
    5298:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    529c:	2900      	cmp	r1, #0
    529e:	d002      	beq.n	52a6 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    52a0:	f831 0b04 	ldrh.w	r0, [r1], #4
    52a4:	4408      	add	r0, r1
    52a6:	bd10      	pop	{r4, pc}
    52a8:	21fc      	movs	r1, #252	; 0xfc
    52aa:	2018      	movs	r0, #24
    52ac:	f7ff fba0 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52b0:	2000008c 	.word	0x2000008c

000052b4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    52b4:	b570      	push	{r4, r5, r6, lr}
    52b6:	4606      	mov	r6, r0
    52b8:	4809      	ldr	r0, [pc, #36]	; (52e0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x2c>)
    52ba:	460d      	mov	r5, r1
    52bc:	8800      	ldrh	r0, [r0, #0]
    52be:	b10a      	cbz	r2, 52c4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x10>
    52c0:	0844      	lsrs	r4, r0, #1
    52c2:	e000      	b.n	52c6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x12>
    52c4:	0884      	lsrs	r4, r0, #2
    52c6:	4621      	mov	r1, r4
    52c8:	6828      	ldr	r0, [r5, #0]
    52ca:	f008 f939 	bl	d540 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    52ce:	2100      	movs	r1, #0
    52d0:	792a      	ldrb	r2, [r5, #4]
    52d2:	f364 411f 	bfi	r1, r4, #16, #16
    52d6:	1c52      	adds	r2, r2, #1
    52d8:	712a      	strb	r2, [r5, #4]
    52da:	e9c6 0100 	strd	r0, r1, [r6]
    52de:	bd70      	pop	{r4, r5, r6, pc}
    52e0:	20000090 	.word	0x20000090

000052e4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    52e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52e8:	4688      	mov	r8, r1
    52ea:	0005      	movs	r5, r0
    52ec:	d00a      	beq.n	5304 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x20>
    52ee:	2700      	movs	r7, #0
    52f0:	1ce9      	adds	r1, r5, #3
    52f2:	2000      	movs	r0, #0
    52f4:	f021 0103 	bic.w	r1, r1, #3
    52f8:	42a9      	cmp	r1, r5
    52fa:	d005      	beq.n	5308 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    52fc:	212e      	movs	r1, #46	; 0x2e
    52fe:	2009      	movs	r0, #9
    5300:	f7ff fb76 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5304:	2701      	movs	r7, #1
    5306:	e7f3      	b.n	52f0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xc>
    5308:	491d      	ldr	r1, [pc, #116]	; (5380 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    530a:	eb00 06c8 	add.w	r6, r0, r8, lsl #3
    530e:	b907      	cbnz	r7, 5312 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x2e>
    5310:	604d      	str	r5, [r1, #4]
    5312:	2a1f      	cmp	r2, #31
    5314:	d804      	bhi.n	5320 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x3c>
    5316:	f64f 70ff 	movw	r0, #65535	; 0xffff
    531a:	ea00 0082 	and.w	r0, r0, r2, lsl #2
    531e:	e007      	b.n	5330 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4c>
    5320:	207c      	movs	r0, #124	; 0x7c
    5322:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
    5326:	d201      	bcs.n	532c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5328:	0050      	lsls	r0, r2, #1
    532a:	e000      	b.n	532e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    532c:	207c      	movs	r0, #124	; 0x7c
    532e:	b280      	uxth	r0, r0
    5330:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    5334:	1cc0      	adds	r0, r0, #3
    5336:	4010      	ands	r0, r2
    5338:	2400      	movs	r4, #0
    533a:	8008      	strh	r0, [r1, #0]
    533c:	46a2      	mov	sl, r4
    533e:	4689      	mov	r9, r1
    5340:	e016      	b.n	5370 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8c>
    5342:	19a8      	adds	r0, r5, r6
    5344:	9000      	str	r0, [sp, #0]
    5346:	b10f      	cbz	r7, 534c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x68>
    5348:	2000      	movs	r0, #0
    534a:	e000      	b.n	534e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x6a>
    534c:	4668      	mov	r0, sp
    534e:	f8b9 1000 	ldrh.w	r1, [r9]
    5352:	f008 f922 	bl	d59a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5356:	b947      	cbnz	r7, 536a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x86>
    5358:	f8d9 1004 	ldr.w	r1, [r9, #4]
    535c:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
    5360:	f883 a004 	strb.w	sl, [r3, #4]
    5364:	9a00      	ldr	r2, [sp, #0]
    5366:	f841 2034 	str.w	r2, [r1, r4, lsl #3]
    536a:	1c64      	adds	r4, r4, #1
    536c:	4406      	add	r6, r0
    536e:	b2e4      	uxtb	r4, r4
    5370:	4544      	cmp	r4, r8
    5372:	d3e6      	bcc.n	5342 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5e>
    5374:	1df6      	adds	r6, r6, #7
    5376:	f026 0007 	bic.w	r0, r6, #7
    537a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    537e:	0000      	.short	0x0000
    5380:	20000090 	.word	0x20000090

00005384 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    5384:	4906      	ldr	r1, [pc, #24]	; (53a0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x1c>)
    5386:	b510      	push	{r4, lr}
    5388:	684a      	ldr	r2, [r1, #4]
    538a:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
    538e:	2000      	movs	r0, #0
    5390:	7120      	strb	r0, [r4, #4]
    5392:	8809      	ldrh	r1, [r1, #0]
    5394:	4620      	mov	r0, r4
    5396:	f008 f900 	bl	d59a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    539a:	4620      	mov	r0, r4
    539c:	bd10      	pop	{r4, pc}
    539e:	0000      	.short	0x0000
    53a0:	20000090 	.word	0x20000090
    53a4:	4909      	ldr	r1, [pc, #36]	; (53cc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x48>)
    53a6:	b510      	push	{r4, lr}
    53a8:	4807      	ldr	r0, [pc, #28]	; (53c8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    53aa:	6008      	str	r0, [r1, #0]
    53ac:	4b08      	ldr	r3, [pc, #32]	; (53d0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x4c>)
    53ae:	2011      	movs	r0, #17
    53b0:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    53b4:	2200      	movs	r2, #0
    53b6:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    53ba:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    53be:	1c40      	adds	r0, r0, #1
    53c0:	b2c0      	uxtb	r0, r0
    53c2:	2814      	cmp	r0, #20
    53c4:	d3f4      	bcc.n	53b0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x2c>
    53c6:	bd10      	pop	{r4, pc}
    53c8:	fffe0000 	.word	0xfffe0000
    53cc:	4001f508 	.word	0x4001f508
    53d0:	4001f000 	.word	0x4001f000
    53d4:	b570      	push	{r4, r5, r6, lr}
    53d6:	2420      	movs	r4, #32
    53d8:	2100      	movs	r1, #0
    53da:	2301      	movs	r3, #1
    53dc:	fa20 f201 	lsr.w	r2, r0, r1
    53e0:	07d2      	lsls	r2, r2, #31
    53e2:	d020      	beq.n	5426 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xa2>
    53e4:	b24a      	sxtb	r2, r1
    53e6:	2a00      	cmp	r2, #0
    53e8:	db10      	blt.n	540c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x88>
    53ea:	bf00      	nop
    53ec:	ea4f 1652 	mov.w	r6, r2, lsr #5
    53f0:	ea4f 0686 	mov.w	r6, r6, lsl #2
    53f4:	f002 051f 	and.w	r5, r2, #31
    53f8:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    53fc:	fa03 f505 	lsl.w	r5, r3, r5
    5400:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    5404:	f3bf 8f4f 	dsb	sy
    5408:	f3bf 8f6f 	isb	sy
    540c:	db0b      	blt.n	5426 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xa2>
    540e:	f002 051f 	and.w	r5, r2, #31
    5412:	ea4f 1252 	mov.w	r2, r2, lsr #5
    5416:	ea4f 0282 	mov.w	r2, r2, lsl #2
    541a:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    541e:	fa03 f505 	lsl.w	r5, r3, r5
    5422:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    5426:	f101 0101 	add.w	r1, r1, #1
    542a:	42a1      	cmp	r1, r4
    542c:	d3d6      	bcc.n	53dc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x58>
    542e:	bd70      	pop	{r4, r5, r6, pc}
    5430:	b570      	push	{r4, r5, r6, lr}
    5432:	0042      	lsls	r2, r0, #1
    5434:	f04f 0100 	mov.w	r1, #0
    5438:	d501      	bpl.n	543e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xba>
    543a:	4a14      	ldr	r2, [pc, #80]	; (548c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x108>)
    543c:	6011      	str	r1, [r2, #0]
    543e:	f3c0 3280 	ubfx	r2, r0, #14, #1
    5442:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    5446:	429a      	cmp	r2, r3
    5448:	d003      	beq.n	5452 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xce>
    544a:	2164      	movs	r1, #100	; 0x64
    544c:	201b      	movs	r0, #27
    544e:	f7ff facf 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5452:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    5456:	d014      	beq.n	5482 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xfe>
    5458:	4a0d      	ldr	r2, [pc, #52]	; (5490 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x10c>)
    545a:	2001      	movs	r0, #1
    545c:	6050      	str	r0, [r2, #4]
    545e:	1e83      	subs	r3, r0, #2
    5460:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    5464:	4a0b      	ldr	r2, [pc, #44]	; (5494 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x110>)
    5466:	6090      	str	r0, [r2, #8]
    5468:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    546c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    5470:	4c09      	ldr	r4, [pc, #36]	; (5498 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x114>)
    5472:	6021      	str	r1, [r4, #0]
    5474:	1d25      	adds	r5, r4, #4
    5476:	6028      	str	r0, [r5, #0]
    5478:	6090      	str	r0, [r2, #8]
    547a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    547e:	6021      	str	r1, [r4, #0]
    5480:	6028      	str	r0, [r5, #0]
    5482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5486:	f7ff bf8d 	b.w	53a4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x20>
    548a:	0000      	.short	0x0000
    548c:	4001e504 	.word	0x4001e504
    5490:	4000e000 	.word	0x4000e000
    5494:	4000f000 	.word	0x4000f000
    5498:	4000f500 	.word	0x4000f500

0000549c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    549c:	b570      	push	{r4, r5, r6, lr}
    549e:	4c0a      	ldr	r4, [pc, #40]	; (54c8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    54a0:	460d      	mov	r5, r1
    54a2:	6020      	str	r0, [r4, #0]
    54a4:	f7ff ffc4 	bl	5430 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xac>
    54a8:	6820      	ldr	r0, [r4, #0]
    54aa:	f7ff ff93 	bl	53d4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x50>
    54ae:	f000 f877 	bl	55a0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    54b2:	f7ff ff77 	bl	53a4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x20>
    54b6:	f008 f923 	bl	d700 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    54ba:	4628      	mov	r0, r5
    54bc:	f000 f8aa 	bl	5614 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    54c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    54c4:	f000 b8c2 	b.w	564c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    54c8:	20000098 	.word	0x20000098

000054cc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    54cc:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    54d0:	4e2f      	ldr	r6, [pc, #188]	; (5590 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    54d2:	4683      	mov	fp, r0
    54d4:	6830      	ldr	r0, [r6, #0]
    54d6:	9001      	str	r0, [sp, #4]
    54d8:	2701      	movs	r7, #1
    54da:	482e      	ldr	r0, [pc, #184]	; (5594 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    54dc:	f007 f806 	bl	c4ec <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    54e0:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 5594 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    54e4:	b920      	cbnz	r0, 54f0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    54e6:	2700      	movs	r7, #0
    54e8:	f108 0001 	add.w	r0, r8, #1
    54ec:	f007 f815 	bl	c51a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    54f0:	4c29      	ldr	r4, [pc, #164]	; (5598 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    54f2:	2500      	movs	r5, #0
    54f4:	f04f 0903 	mov.w	r9, #3
    54f8:	2001      	movs	r0, #1
    54fa:	6060      	str	r0, [r4, #4]
    54fc:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    5500:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    5504:	f8c6 b000 	str.w	fp, [r6]
    5508:	6020      	str	r0, [r4, #0]
    550a:	f8df a090 	ldr.w	sl, [pc, #144]	; 559c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    550e:	e017      	b.n	5540 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    5510:	f8da 0000 	ldr.w	r0, [sl]
    5514:	06c0      	lsls	r0, r0, #27
    5516:	d513      	bpl.n	5540 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    5518:	200e      	movs	r0, #14
    551a:	f008 f8e2 	bl	d6e2 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x28>
    551e:	f3ef 8010 	mrs	r0, PRIMASK
    5522:	9000      	str	r0, [sp, #0]
    5524:	b672      	cpsid	i
    5526:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    552a:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    552e:	b920      	cbnz	r0, 553a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    5530:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    5534:	b908      	cbnz	r0, 553a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    5536:	f7ff f8eb 	bl	4710 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    553a:	9800      	ldr	r0, [sp, #0]
    553c:	b900      	cbnz	r0, 5540 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    553e:	b662      	cpsie	i
    5540:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    5544:	b918      	cbnz	r0, 554e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    5546:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    554a:	2800      	cmp	r0, #0
    554c:	d0e0      	beq.n	5510 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    554e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    5552:	2800      	cmp	r0, #0
    5554:	d1d0      	bne.n	54f8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    5556:	b137      	cbz	r7, 5566 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    5558:	9801      	ldr	r0, [sp, #4]
    555a:	6030      	str	r0, [r6, #0]
    555c:	f108 0001 	add.w	r0, r8, #1
    5560:	f006 ffc4 	bl	c4ec <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5564:	e011      	b.n	558a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    5566:	f108 0001 	add.w	r0, r8, #1
    556a:	f006 ffbf 	bl	c4ec <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    556e:	2800      	cmp	r0, #0
    5570:	d1ba      	bne.n	54e8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    5572:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    5576:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    557a:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    557e:	200e      	movs	r0, #14
    5580:	f008 f8af 	bl	d6e2 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x28>
    5584:	4803      	ldr	r0, [pc, #12]	; (5594 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    5586:	f006 ffc8 	bl	c51a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    558a:	2000      	movs	r0, #0
    558c:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5590:	4000e504 	.word	0x4000e504
    5594:	2000029b 	.word	0x2000029b
    5598:	4000e000 	.word	0x4000e000
    559c:	e000ed10 	.word	0xe000ed10

000055a0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    55a0:	b510      	push	{r4, lr}
    55a2:	4808      	ldr	r0, [pc, #32]	; (55c4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    55a4:	f006 ffb5 	bl	c512 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    55a8:	b108      	cbz	r0, 55ae <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    55aa:	2124      	movs	r1, #36	; 0x24
    55ac:	e006      	b.n	55bc <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    55ae:	4805      	ldr	r0, [pc, #20]	; (55c4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    55b0:	1c40      	adds	r0, r0, #1
    55b2:	f006 ffae 	bl	c512 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    55b6:	2800      	cmp	r0, #0
    55b8:	d003      	beq.n	55c2 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    55ba:	2128      	movs	r1, #40	; 0x28
    55bc:	201d      	movs	r0, #29
    55be:	f7ff fa17 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    55c2:	bd10      	pop	{r4, pc}
    55c4:	2000029b 	.word	0x2000029b

000055c8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    55c8:	b570      	push	{r4, r5, r6, lr}
    55ca:	4911      	ldr	r1, [pc, #68]	; (5610 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    55cc:	680a      	ldr	r2, [r1, #0]
    55ce:	b1ea      	cbz	r2, 560c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    55d0:	2300      	movs	r3, #0
    55d2:	461d      	mov	r5, r3
    55d4:	2401      	movs	r4, #1
    55d6:	684a      	ldr	r2, [r1, #4]
    55d8:	1c52      	adds	r2, r2, #1
    55da:	604a      	str	r2, [r1, #4]
    55dc:	2a09      	cmp	r2, #9
    55de:	d300      	bcc.n	55e2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    55e0:	604d      	str	r5, [r1, #4]
    55e2:	790e      	ldrb	r6, [r1, #4]
    55e4:	fa04 f206 	lsl.w	r2, r4, r6
    55e8:	680e      	ldr	r6, [r1, #0]
    55ea:	4216      	tst	r6, r2
    55ec:	d00b      	beq.n	5606 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    55ee:	f3ef 8310 	mrs	r3, PRIMASK
    55f2:	b672      	cpsid	i
    55f4:	680c      	ldr	r4, [r1, #0]
    55f6:	4394      	bics	r4, r2
    55f8:	600c      	str	r4, [r1, #0]
    55fa:	b903      	cbnz	r3, 55fe <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    55fc:	b662      	cpsie	i
    55fe:	6849      	ldr	r1, [r1, #4]
    5600:	6001      	str	r1, [r0, #0]
    5602:	2000      	movs	r0, #0
    5604:	bd70      	pop	{r4, r5, r6, pc}
    5606:	1c5b      	adds	r3, r3, #1
    5608:	2b09      	cmp	r3, #9
    560a:	d3e4      	bcc.n	55d6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    560c:	2005      	movs	r0, #5
    560e:	bd70      	pop	{r4, r5, r6, pc}
    5610:	2000009c 	.word	0x2000009c

00005614 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    5614:	4802      	ldr	r0, [pc, #8]	; (5620 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    5616:	2100      	movs	r1, #0
    5618:	6001      	str	r1, [r0, #0]
    561a:	6041      	str	r1, [r0, #4]
    561c:	4770      	bx	lr
    561e:	0000      	.short	0x0000
    5620:	2000009c 	.word	0x2000009c

00005624 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    5624:	b510      	push	{r4, lr}
    5626:	4c08      	ldr	r4, [pc, #32]	; (5648 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    5628:	7861      	ldrb	r1, [r4, #1]
    562a:	b109      	cbz	r1, 5630 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    562c:	200f      	movs	r0, #15
    562e:	bd10      	pop	{r4, pc}
    5630:	f7fe fffa 	bl	4628 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    5634:	7020      	strb	r0, [r4, #0]
    5636:	28ff      	cmp	r0, #255	; 0xff
    5638:	d001      	beq.n	563e <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    563a:	2000      	movs	r0, #0
    563c:	bd10      	pop	{r4, pc}
    563e:	2176      	movs	r1, #118	; 0x76
    5640:	201f      	movs	r0, #31
    5642:	f7ff f9d5 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5646:	0000      	.short	0x0000
    5648:	200000a4 	.word	0x200000a4

0000564c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    564c:	4901      	ldr	r1, [pc, #4]	; (5654 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    564e:	2000      	movs	r0, #0
    5650:	7048      	strb	r0, [r1, #1]
    5652:	4770      	bx	lr
    5654:	200000a4 	.word	0x200000a4

00005658 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    5658:	4806      	ldr	r0, [pc, #24]	; (5674 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    565a:	4a07      	ldr	r2, [pc, #28]	; (5678 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    565c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    565e:	8852      	ldrh	r2, [r2, #2]
    5660:	4291      	cmp	r1, r2
    5662:	d104      	bne.n	566e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5664:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    5668:	b108      	cbz	r0, 566e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    566a:	2000      	movs	r0, #0
    566c:	4770      	bx	lr
    566e:	2001      	movs	r0, #1
    5670:	4770      	bx	lr
    5672:	0000      	.short	0x0000
    5674:	20001142 	.word	0x20001142
    5678:	20000288 	.word	0x20000288

0000567c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    567c:	4901      	ldr	r1, [pc, #4]	; (5684 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    567e:	8048      	strh	r0, [r1, #2]
    5680:	4770      	bx	lr
    5682:	0000      	.short	0x0000
    5684:	20000288 	.word	0x20000288

00005688 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    5688:	4808      	ldr	r0, [pc, #32]	; (56ac <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    568a:	4a09      	ldr	r2, [pc, #36]	; (56b0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    568c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    568e:	8852      	ldrh	r2, [r2, #2]
    5690:	4291      	cmp	r1, r2
    5692:	d109      	bne.n	56a8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5694:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5698:	8481      	strh	r1, [r0, #36]	; 0x24
    569a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    569e:	b119      	cbz	r1, 56a8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    56a0:	2100      	movs	r1, #0
    56a2:	7001      	strb	r1, [r0, #0]
    56a4:	2001      	movs	r0, #1
    56a6:	4770      	bx	lr
    56a8:	2000      	movs	r0, #0
    56aa:	4770      	bx	lr
    56ac:	20001142 	.word	0x20001142
    56b0:	20000288 	.word	0x20000288

000056b4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    56b4:	4807      	ldr	r0, [pc, #28]	; (56d4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    56b6:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    56ba:	2901      	cmp	r1, #1
    56bc:	d007      	beq.n	56ce <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    56be:	2101      	movs	r1, #1
    56c0:	7001      	strb	r1, [r0, #0]
    56c2:	4805      	ldr	r0, [pc, #20]	; (56d8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    56c4:	4903      	ldr	r1, [pc, #12]	; (56d4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    56c6:	8800      	ldrh	r0, [r0, #0]
    56c8:	8488      	strh	r0, [r1, #36]	; 0x24
    56ca:	2001      	movs	r0, #1
    56cc:	4770      	bx	lr
    56ce:	2000      	movs	r0, #0
    56d0:	4770      	bx	lr
    56d2:	0000      	.short	0x0000
    56d4:	20001142 	.word	0x20001142
    56d8:	20000288 	.word	0x20000288

000056dc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    56dc:	4906      	ldr	r1, [pc, #24]	; (56f8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    56de:	4b07      	ldr	r3, [pc, #28]	; (56fc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    56e0:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    56e2:	885b      	ldrh	r3, [r3, #2]
    56e4:	429a      	cmp	r2, r3
    56e6:	d105      	bne.n	56f4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    56e8:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    56ec:	b112      	cbz	r2, 56f4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    56ee:	6001      	str	r1, [r0, #0]
    56f0:	2001      	movs	r0, #1
    56f2:	4770      	bx	lr
    56f4:	2000      	movs	r0, #0
    56f6:	4770      	bx	lr
    56f8:	20001142 	.word	0x20001142
    56fc:	20000288 	.word	0x20000288

00005700 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    5700:	4909      	ldr	r1, [pc, #36]	; (5728 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5702:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5704:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    5708:	3bff      	subs	r3, #255	; 0xff
    570a:	d002      	beq.n	5712 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    570c:	2100      	movs	r1, #0
    570e:	6001      	str	r1, [r0, #0]
    5710:	e007      	b.n	5722 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5712:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5716:	4904      	ldr	r1, [pc, #16]	; (5728 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5718:	2a01      	cmp	r2, #1
    571a:	d002      	beq.n	5722 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    571c:	6001      	str	r1, [r0, #0]
    571e:	2001      	movs	r0, #1
    5720:	4770      	bx	lr
    5722:	2000      	movs	r0, #0
    5724:	4770      	bx	lr
    5726:	0000      	.short	0x0000
    5728:	20001142 	.word	0x20001142

0000572c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    572c:	4901      	ldr	r1, [pc, #4]	; (5734 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    572e:	8008      	strh	r0, [r1, #0]
    5730:	4770      	bx	lr
    5732:	0000      	.short	0x0000
    5734:	20000288 	.word	0x20000288

00005738 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    5738:	4905      	ldr	r1, [pc, #20]	; (5750 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    573a:	2000      	movs	r0, #0
    573c:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5740:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5744:	8488      	strh	r0, [r1, #36]	; 0x24
    5746:	4903      	ldr	r1, [pc, #12]	; (5754 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    5748:	8008      	strh	r0, [r1, #0]
    574a:	8048      	strh	r0, [r1, #2]
    574c:	4770      	bx	lr
    574e:	0000      	.short	0x0000
    5750:	20001142 	.word	0x20001142
    5754:	20000288 	.word	0x20000288
    5758:	4905      	ldr	r1, [pc, #20]	; (5770 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    575a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    575c:	4282      	cmp	r2, r0
    575e:	d105      	bne.n	576c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    5760:	2000      	movs	r0, #0
    5762:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5766:	f64f 70ff 	movw	r0, #65535	; 0xffff
    576a:	8488      	strh	r0, [r1, #36]	; 0x24
    576c:	4770      	bx	lr
    576e:	0000      	.short	0x0000
    5770:	20001142 	.word	0x20001142

00005774 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    5774:	4a0a      	ldr	r2, [pc, #40]	; (57a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    5776:	b110      	cbz	r0, 577e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    5778:	2801      	cmp	r0, #1
    577a:	d007      	beq.n	578c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    577c:	e00e      	b.n	579c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    577e:	7850      	ldrb	r0, [r2, #1]
    5780:	b160      	cbz	r0, 579c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5782:	f8d2 0002 	ldr.w	r0, [r2, #2]
    5786:	6008      	str	r0, [r1, #0]
    5788:	88d0      	ldrh	r0, [r2, #6]
    578a:	e004      	b.n	5796 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    578c:	7810      	ldrb	r0, [r2, #0]
    578e:	b128      	cbz	r0, 579c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5790:	6890      	ldr	r0, [r2, #8]
    5792:	6008      	str	r0, [r1, #0]
    5794:	8990      	ldrh	r0, [r2, #12]
    5796:	8088      	strh	r0, [r1, #4]
    5798:	2001      	movs	r0, #1
    579a:	4770      	bx	lr
    579c:	2000      	movs	r0, #0
    579e:	4770      	bx	lr
    57a0:	2000029d 	.word	0x2000029d

000057a4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    57a4:	4a08      	ldr	r2, [pc, #32]	; (57c8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    57a6:	2301      	movs	r3, #1
    57a8:	b138      	cbz	r0, 57ba <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    57aa:	2801      	cmp	r0, #1
    57ac:	d104      	bne.n	57b8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    57ae:	7013      	strb	r3, [r2, #0]
    57b0:	6808      	ldr	r0, [r1, #0]
    57b2:	6090      	str	r0, [r2, #8]
    57b4:	8888      	ldrh	r0, [r1, #4]
    57b6:	8190      	strh	r0, [r2, #12]
    57b8:	4770      	bx	lr
    57ba:	7053      	strb	r3, [r2, #1]
    57bc:	6808      	ldr	r0, [r1, #0]
    57be:	f8c2 0002 	str.w	r0, [r2, #2]
    57c2:	8888      	ldrh	r0, [r1, #4]
    57c4:	80d0      	strh	r0, [r2, #6]
    57c6:	4770      	bx	lr
    57c8:	2000029d 	.word	0x2000029d

000057cc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    57cc:	4906      	ldr	r1, [pc, #24]	; (57e8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    57ce:	b110      	cbz	r0, 57d6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    57d0:	2801      	cmp	r0, #1
    57d2:	d002      	beq.n	57da <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    57d4:	e005      	b.n	57e2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    57d6:	7848      	ldrb	r0, [r1, #1]
    57d8:	e000      	b.n	57dc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    57da:	7808      	ldrb	r0, [r1, #0]
    57dc:	b108      	cbz	r0, 57e2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    57de:	2001      	movs	r0, #1
    57e0:	4770      	bx	lr
    57e2:	2000      	movs	r0, #0
    57e4:	4770      	bx	lr
    57e6:	0000      	.short	0x0000
    57e8:	2000029d 	.word	0x2000029d

000057ec <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    57ec:	4901      	ldr	r1, [pc, #4]	; (57f4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    57ee:	7448      	strb	r0, [r1, #17]
    57f0:	4770      	bx	lr
    57f2:	0000      	.short	0x0000
    57f4:	20000b72 	.word	0x20000b72

000057f8 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    57f8:	4801      	ldr	r0, [pc, #4]	; (5800 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    57fa:	78c0      	ldrb	r0, [r0, #3]
    57fc:	4770      	bx	lr
    57fe:	0000      	.short	0x0000
    5800:	200000c0 	.word	0x200000c0

00005804 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    5804:	4801      	ldr	r0, [pc, #4]	; (580c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    5806:	7900      	ldrb	r0, [r0, #4]
    5808:	4770      	bx	lr
    580a:	0000      	.short	0x0000
    580c:	200000c0 	.word	0x200000c0

00005810 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    5810:	b578      	push	{r3, r4, r5, r6, lr}
    5812:	4913      	ldr	r1, [pc, #76]	; (5860 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    5814:	7c4a      	ldrb	r2, [r1, #17]
    5816:	b30a      	cbz	r2, 585c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    5818:	7c0a      	ldrb	r2, [r1, #16]
    581a:	f88d 2000 	strb.w	r2, [sp]
    581e:	9a00      	ldr	r2, [sp, #0]
    5820:	9200      	str	r2, [sp, #0]
    5822:	f89d 2000 	ldrb.w	r2, [sp]
    5826:	b1ca      	cbz	r2, 585c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    5828:	2300      	movs	r3, #0
    582a:	f101 0210 	add.w	r2, r1, #16
    582e:	241a      	movs	r4, #26
    5830:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    5834:	7c0e      	ldrb	r6, [r1, #16]
    5836:	f88d 6000 	strb.w	r6, [sp]
    583a:	9e00      	ldr	r6, [sp, #0]
    583c:	9600      	str	r6, [sp, #0]
    583e:	f89d 6000 	ldrb.w	r6, [sp]
    5842:	b14e      	cbz	r6, 5858 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    5844:	7013      	strb	r3, [r2, #0]
    5846:	7043      	strb	r3, [r0, #1]
    5848:	7004      	strb	r4, [r0, #0]
    584a:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    584e:	6046      	str	r6, [r0, #4]
    5850:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    5854:	6086      	str	r6, [r0, #8]
    5856:	e7ed      	b.n	5834 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    5858:	2001      	movs	r0, #1
    585a:	bd78      	pop	{r3, r4, r5, r6, pc}
    585c:	2000      	movs	r0, #0
    585e:	bd78      	pop	{r3, r4, r5, r6, pc}
    5860:	20000b72 	.word	0x20000b72

00005864 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5864:	b510      	push	{r4, lr}
    5866:	4604      	mov	r4, r0
    5868:	f000 f946 	bl	5af8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    586c:	b118      	cbz	r0, 5876 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    586e:	21bd      	movs	r1, #189	; 0xbd
    5870:	2027      	movs	r0, #39	; 0x27
    5872:	f7ff f8bd 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5876:	4803      	ldr	r0, [pc, #12]	; (5884 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    5878:	2101      	movs	r1, #1
    587a:	f008 fb1e 	bl	deba <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    587e:	4802      	ldr	r0, [pc, #8]	; (5888 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    5880:	62c4      	str	r4, [r0, #44]	; 0x2c
    5882:	bd10      	pop	{r4, pc}
    5884:	20000b50 	.word	0x20000b50
    5888:	200000c0 	.word	0x200000c0

0000588c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    588c:	4901      	ldr	r1, [pc, #4]	; (5894 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    588e:	2001      	movs	r0, #1
    5890:	7188      	strb	r0, [r1, #6]
    5892:	4770      	bx	lr
    5894:	200000c0 	.word	0x200000c0

00005898 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    589c:	4d57      	ldr	r5, [pc, #348]	; (59fc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x164>)
    589e:	9c08      	ldr	r4, [sp, #32]
    58a0:	782e      	ldrb	r6, [r5, #0]
    58a2:	2e00      	cmp	r6, #0
    58a4:	d16e      	bne.n	5984 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    58a6:	2a00      	cmp	r2, #0
    58a8:	d06c      	beq.n	5984 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    58aa:	2b00      	cmp	r3, #0
    58ac:	d06a      	beq.n	5984 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    58ae:	2c00      	cmp	r4, #0
    58b0:	d068      	beq.n	5984 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    58b2:	f105 0614 	add.w	r6, r5, #20
    58b6:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    58ba:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    58be:	2700      	movs	r7, #0
    58c0:	71af      	strb	r7, [r5, #6]
    58c2:	716f      	strb	r7, [r5, #5]
    58c4:	70ef      	strb	r7, [r5, #3]
    58c6:	70af      	strb	r7, [r5, #2]
    58c8:	712f      	strb	r7, [r5, #4]
    58ca:	81af      	strh	r7, [r5, #12]
    58cc:	81ef      	strh	r7, [r5, #14]
    58ce:	f000 f94b 	bl	5b68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    58d2:	4606      	mov	r6, r0
    58d4:	f000 f942 	bl	5b5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    58d8:	4604      	mov	r4, r0
    58da:	f005 ffd1 	bl	b880 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    58de:	f005 fca9 	bl	b234 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    58e2:	f994 0066 	ldrsb.w	r0, [r4, #102]	; 0x66
    58e6:	f006 f853 	bl	b990 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    58ea:	f104 0010 	add.w	r0, r4, #16
    58ee:	f006 f93d 	bl	bb6c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    58f2:	f104 000c 	add.w	r0, r4, #12
    58f6:	f006 f92d 	bl	bb54 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    58fa:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    58fe:	f006 f94f 	bl	bba0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    5902:	f105 0038 	add.w	r0, r5, #56	; 0x38
    5906:	6840      	ldr	r0, [r0, #4]
    5908:	f890 016c 	ldrb.w	r0, [r0, #364]	; 0x16c
    590c:	b108      	cbz	r0, 5912 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x7a>
    590e:	f005 ff05 	bl	b71c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    5912:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
    5916:	2001      	movs	r0, #1
    5918:	f005 fe30 	bl	b57c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    591c:	2800      	cmp	r0, #0
    591e:	d066      	beq.n	59ee <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x156>
    5920:	46ba      	mov	sl, r7
    5922:	2001      	movs	r0, #1
    5924:	f005 ff3a 	bl	b79c <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    5928:	4835      	ldr	r0, [pc, #212]	; (5a00 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x168>)
    592a:	f005 fea3 	bl	b674 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    592e:	8820      	ldrh	r0, [r4, #0]
    5930:	f7ff fca8 	bl	5284 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5934:	6328      	str	r0, [r5, #48]	; 0x30
    5936:	8820      	ldrh	r0, [r4, #0]
    5938:	f7ff fc8e 	bl	5258 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    593c:	f106 0160 	add.w	r1, r6, #96	; 0x60
    5940:	6368      	str	r0, [r5, #52]	; 0x34
    5942:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 5a04 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16c>
    5946:	c98e      	ldmia	r1, {r1, r2, r3, r7}
    5948:	f109 0808 	add.w	r8, r9, #8
    594c:	e888 008e 	stmia.w	r8, {r1, r2, r3, r7}
    5950:	6f31      	ldr	r1, [r6, #112]	; 0x70
    5952:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    5956:	6f71      	ldr	r1, [r6, #116]	; 0x74
    5958:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    595c:	f000 f976 	bl	5c4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    5960:	4601      	mov	r1, r0
    5962:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    5964:	f008 f82c 	bl	d9c0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5968:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    596a:	4281      	cmp	r1, r0
    596c:	d200      	bcs.n	5970 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd8>
    596e:	4608      	mov	r0, r1
    5970:	7228      	strb	r0, [r5, #8]
    5972:	46a8      	mov	r8, r5
    5974:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
    5978:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
    597a:	7cf7      	ldrb	r7, [r6, #19]
    597c:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
    597e:	2908      	cmp	r1, #8
    5980:	d104      	bne.n	598c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf4>
    5982:	e002      	b.n	598a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf2>
    5984:	f44f 718a 	mov.w	r1, #276	; 0x114
    5988:	e035      	b.n	59f6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x15e>
    598a:	2104      	movs	r1, #4
    598c:	f008 f818 	bl	d9c0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5990:	b90f      	cbnz	r7, 5996 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    5992:	1d00      	adds	r0, r0, #4
    5994:	b280      	uxth	r0, r0
    5996:	4285      	cmp	r5, r0
    5998:	d200      	bcs.n	599c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x104>
    599a:	4628      	mov	r0, r5
    599c:	b2c0      	uxtb	r0, r0
    599e:	f888 0009 	strb.w	r0, [r8, #9]
    59a2:	7cf2      	ldrb	r2, [r6, #19]
    59a4:	b102      	cbz	r2, 59a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    59a6:	2204      	movs	r2, #4
    59a8:	4410      	add	r0, r2
    59aa:	b2c0      	uxtb	r0, r0
    59ac:	f888 0007 	strb.w	r0, [r8, #7]
    59b0:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
    59b4:	1d09      	adds	r1, r1, #4
    59b6:	4281      	cmp	r1, r0
    59b8:	d202      	bcs.n	59c0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x128>
    59ba:	f240 11a1 	movw	r1, #417	; 0x1a1
    59be:	e01a      	b.n	59f6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x15e>
    59c0:	4655      	mov	r5, sl
    59c2:	2001      	movs	r0, #1
    59c4:	f000 fb46 	bl	6054 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    59c8:	480f      	ldr	r0, [pc, #60]	; (5a08 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x170>)
    59ca:	6800      	ldr	r0, [r0, #0]
    59cc:	2803      	cmp	r0, #3
    59ce:	d010      	beq.n	59f2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x15a>
    59d0:	280b      	cmp	r0, #11
    59d2:	d00e      	beq.n	59f2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x15a>
    59d4:	4648      	mov	r0, r9
    59d6:	f840 5f52 	str.w	r5, [r0, #82]!
    59da:	6045      	str	r5, [r0, #4]
    59dc:	4809      	ldr	r0, [pc, #36]	; (5a04 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16c>)
    59de:	88b1      	ldrh	r1, [r6, #4]
    59e0:	3052      	adds	r0, #82	; 0x52
    59e2:	8041      	strh	r1, [r0, #2]
    59e4:	8821      	ldrh	r1, [r4, #0]
    59e6:	8001      	strh	r1, [r0, #0]
    59e8:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    59ec:	7101      	strb	r1, [r0, #4]
    59ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    59f2:	f240 11b1 	movw	r1, #433	; 0x1b1
    59f6:	2027      	movs	r0, #39	; 0x27
    59f8:	f7fe fffa 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59fc:	200000c0 	.word	0x200000c0
    5a00:	00006280 	.word	0x00006280
    5a04:	20000b20 	.word	0x20000b20
    5a08:	40001550 	.word	0x40001550

00005a0c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    5a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a10:	4605      	mov	r5, r0
    5a12:	f000 f8a9 	bl	5b68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5a16:	4e33      	ldr	r6, [pc, #204]	; (5ae4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    5a18:	4604      	mov	r4, r0
    5a1a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    5a1c:	7847      	ldrb	r7, [r0, #1]
    5a1e:	b10d      	cbz	r5, 5a24 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    5a20:	2d01      	cmp	r5, #1
    5a22:	d103      	bne.n	5a2c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    5a24:	6b71      	ldr	r1, [r6, #52]	; 0x34
    5a26:	f006 ff5b 	bl	c8e0 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    5a2a:	7070      	strb	r0, [r6, #1]
    5a2c:	7870      	ldrb	r0, [r6, #1]
    5a2e:	f04f 0800 	mov.w	r8, #0
    5a32:	f04f 0901 	mov.w	r9, #1
    5a36:	b150      	cbz	r0, 5a4e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    5a38:	2801      	cmp	r0, #1
    5a3a:	d01a      	beq.n	5a72 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    5a3c:	2802      	cmp	r0, #2
    5a3e:	d034      	beq.n	5aaa <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    5a40:	2803      	cmp	r0, #3
    5a42:	d048      	beq.n	5ad6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    5a44:	f240 31f1 	movw	r1, #1009	; 0x3f1
    5a48:	2027      	movs	r0, #39	; 0x27
    5a4a:	f7fe ffd1 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a4e:	2d01      	cmp	r5, #1
    5a50:	d032      	beq.n	5ab8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5a52:	f000 f8e7 	bl	5c24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    5a56:	4639      	mov	r1, r7
    5a58:	2201      	movs	r2, #1
    5a5a:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5a5c:	f007 fb64 	bl	d128 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5a60:	e028      	b.n	5ab4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    5a62:	bf00      	nop
    5a64:	f884 8008 	strb.w	r8, [r4, #8]
    5a68:	e031      	b.n	5ace <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5a6a:	bf00      	nop
    5a6c:	f884 9008 	strb.w	r9, [r4, #8]
    5a70:	e02d      	b.n	5ace <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5a72:	2d01      	cmp	r5, #1
    5a74:	d008      	beq.n	5a88 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    5a76:	f000 f8d5 	bl	5c24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    5a7a:	4639      	mov	r1, r7
    5a7c:	2200      	movs	r2, #0
    5a7e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5a80:	f007 fb52 	bl	d128 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5a84:	2d02      	cmp	r5, #2
    5a86:	d00b      	beq.n	5aa0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5a88:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    5a8c:	1c40      	adds	r0, r0, #1
    5a8e:	f141 0100 	adc.w	r1, r1, #0
    5a92:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    5a96:	7a20      	ldrb	r0, [r4, #8]
    5a98:	2801      	cmp	r0, #1
    5a9a:	d003      	beq.n	5aa4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    5a9c:	f884 9008 	strb.w	r9, [r4, #8]
    5aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5aa4:	f884 8008 	strb.w	r8, [r4, #8]
    5aa8:	e7fa      	b.n	5aa0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5aaa:	2d01      	cmp	r5, #1
    5aac:	d004      	beq.n	5ab8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5aae:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5ab0:	f007 fd40 	bl	d534 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5ab4:	2d02      	cmp	r5, #2
    5ab6:	d0f3      	beq.n	5aa0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5ab8:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    5abc:	1c40      	adds	r0, r0, #1
    5abe:	f141 0100 	adc.w	r1, r1, #0
    5ac2:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    5ac6:	7a20      	ldrb	r0, [r4, #8]
    5ac8:	2801      	cmp	r0, #1
    5aca:	d1cf      	bne.n	5a6c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    5acc:	e7ca      	b.n	5a64 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    5ace:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ad2:	f004 bee9 	b.w	a8a8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5ad6:	2d01      	cmp	r5, #1
    5ad8:	d0e2      	beq.n	5aa0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5ada:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5adc:	f007 fd2a 	bl	d534 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5ae0:	e7f5      	b.n	5ace <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5ae2:	0000      	.short	0x0000
    5ae4:	200000c0 	.word	0x200000c0

00005ae8 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    5ae8:	4802      	ldr	r0, [pc, #8]	; (5af4 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    5aea:	89c0      	ldrh	r0, [r0, #14]
    5aec:	f3c0 2080 	ubfx	r0, r0, #10, #1
    5af0:	4770      	bx	lr
    5af2:	0000      	.short	0x0000
    5af4:	200000c0 	.word	0x200000c0

00005af8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    5af8:	4804      	ldr	r0, [pc, #16]	; (5b0c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    5afa:	7800      	ldrb	r0, [r0, #0]
    5afc:	b108      	cbz	r0, 5b02 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    5afe:	200c      	movs	r0, #12
    5b00:	4770      	bx	lr
    5b02:	4903      	ldr	r1, [pc, #12]	; (5b10 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    5b04:	2000      	movs	r0, #0
    5b06:	7448      	strb	r0, [r1, #17]
    5b08:	4770      	bx	lr
    5b0a:	0000      	.short	0x0000
    5b0c:	200000c0 	.word	0x200000c0
    5b10:	20000b72 	.word	0x20000b72

00005b14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    5b14:	480c      	ldr	r0, [pc, #48]	; (5b48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    5b16:	b510      	push	{r4, lr}
    5b18:	7801      	ldrb	r1, [r0, #0]
    5b1a:	b149      	cbz	r1, 5b30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    5b1c:	f100 0138 	add.w	r1, r0, #56	; 0x38
    5b20:	7800      	ldrb	r0, [r0, #0]
    5b22:	2802      	cmp	r0, #2
    5b24:	d008      	beq.n	5b38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    5b26:	f240 11cd 	movw	r1, #461	; 0x1cd
    5b2a:	2027      	movs	r0, #39	; 0x27
    5b2c:	f7fe ff60 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5b34:	f000 b9a6 	b.w	5e84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    5b38:	6848      	ldr	r0, [r1, #4]
    5b3a:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    5b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5b42:	f005 bd9f 	b.w	b684 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    5b46:	0000      	.short	0x0000
    5b48:	200000c0 	.word	0x200000c0
    5b4c:	4a02      	ldr	r2, [pc, #8]	; (5b58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    5b4e:	8993      	ldrh	r3, [r2, #12]
    5b50:	4303      	orrs	r3, r0
    5b52:	8193      	strh	r3, [r2, #12]
    5b54:	6952      	ldr	r2, [r2, #20]
    5b56:	4710      	bx	r2
    5b58:	200000c0 	.word	0x200000c0
    5b5c:	4801      	ldr	r0, [pc, #4]	; (5b64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    5b5e:	6840      	ldr	r0, [r0, #4]
    5b60:	4770      	bx	lr
    5b62:	0000      	.short	0x0000
    5b64:	200000f8 	.word	0x200000f8
    5b68:	4801      	ldr	r0, [pc, #4]	; (5b70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    5b6a:	6840      	ldr	r0, [r0, #4]
    5b6c:	3068      	adds	r0, #104	; 0x68
    5b6e:	4770      	bx	lr
    5b70:	200000f8 	.word	0x200000f8
    5b74:	4a01      	ldr	r2, [pc, #4]	; (5b7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    5b76:	2100      	movs	r1, #0
    5b78:	6952      	ldr	r2, [r2, #20]
    5b7a:	4710      	bx	r2
    5b7c:	200000c0 	.word	0x200000c0
    5b80:	b570      	push	{r4, r5, r6, lr}
    5b82:	f7ff fff1 	bl	5b68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5b86:	4604      	mov	r4, r0
    5b88:	f7ff ffe8 	bl	5b5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5b8c:	4605      	mov	r5, r0
    5b8e:	4621      	mov	r1, r4
    5b90:	f007 ff99 	bl	dac6 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5b94:	7fa9      	ldrb	r1, [r5, #30]
    5b96:	2901      	cmp	r1, #1
    5b98:	d114      	bne.n	5bc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>
    5b9a:	2800      	cmp	r0, #0
    5b9c:	d012      	beq.n	5bc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>
    5b9e:	480a      	ldr	r0, [pc, #40]	; (5bc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    5ba0:	6842      	ldr	r2, [r0, #4]
    5ba2:	8828      	ldrh	r0, [r5, #0]
    5ba4:	f8a2 01ee 	strh.w	r0, [r2, #494]	; 0x1ee
    5ba8:	7a60      	ldrb	r0, [r4, #9]
    5baa:	f882 01f0 	strb.w	r0, [r2, #496]	; 0x1f0
    5bae:	7aa0      	ldrb	r0, [r4, #10]
    5bb0:	f882 01f1 	strb.w	r0, [r2, #497]	; 0x1f1
    5bb4:	f502 72f6 	add.w	r2, r2, #492	; 0x1ec
    5bb8:	2001      	movs	r0, #1
    5bba:	7010      	strb	r0, [r2, #0]
    5bbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5bc0:	f004 be72 	b.w	a8a8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5bc4:	bd70      	pop	{r4, r5, r6, pc}
    5bc6:	0000      	.short	0x0000
    5bc8:	200000f8 	.word	0x200000f8
    5bcc:	b570      	push	{r4, r5, r6, lr}
    5bce:	4605      	mov	r5, r0
    5bd0:	2901      	cmp	r1, #1
    5bd2:	d818      	bhi.n	5c06 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5bd4:	4c12      	ldr	r4, [pc, #72]	; (5c20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>)
    5bd6:	69a1      	ldr	r1, [r4, #24]
    5bd8:	4788      	blx	r1
    5bda:	b1a0      	cbz	r0, 5c06 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5bdc:	7960      	ldrb	r0, [r4, #5]
    5bde:	b990      	cbnz	r0, 5c06 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5be0:	b9e5      	cbnz	r5, 5c1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    5be2:	f104 0010 	add.w	r0, r4, #16
    5be6:	7801      	ldrb	r1, [r0, #0]
    5be8:	06c8      	lsls	r0, r1, #27
    5bea:	d405      	bmi.n	5bf8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    5bec:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5bee:	7800      	ldrb	r0, [r0, #0]
    5bf0:	06c0      	lsls	r0, r0, #27
    5bf2:	d401      	bmi.n	5bf8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    5bf4:	2001      	movs	r0, #1
    5bf6:	e000      	b.n	5bfa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    5bf8:	2000      	movs	r0, #0
    5bfa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5bfc:	b92a      	cbnz	r2, 5c0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    5bfe:	8962      	ldrh	r2, [r4, #10]
    5c00:	b11a      	cbz	r2, 5c0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    5c02:	06c9      	lsls	r1, r1, #27
    5c04:	d401      	bmi.n	5c0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    5c06:	2001      	movs	r0, #1
    5c08:	bd70      	pop	{r4, r5, r6, pc}
    5c0a:	89a1      	ldrh	r1, [r4, #12]
    5c0c:	078a      	lsls	r2, r1, #30
    5c0e:	d503      	bpl.n	5c18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    5c10:	6a22      	ldr	r2, [r4, #32]
    5c12:	78d2      	ldrb	r2, [r2, #3]
    5c14:	2a02      	cmp	r2, #2
    5c16:	d001      	beq.n	5c1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    5c18:	4308      	orrs	r0, r1
    5c1a:	d1f4      	bne.n	5c06 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5c1c:	2000      	movs	r0, #0
    5c1e:	bd70      	pop	{r4, r5, r6, pc}
    5c20:	200000c0 	.word	0x200000c0
    5c24:	b510      	push	{r4, lr}
    5c26:	4c08      	ldr	r4, [pc, #32]	; (5c48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>)
    5c28:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5c2a:	b138      	cbz	r0, 5c3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    5c2c:	8962      	ldrh	r2, [r4, #10]
    5c2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5c30:	1cd2      	adds	r2, r2, #3
    5c32:	f006 fd04 	bl	c63e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5c36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5c38:	6260      	str	r0, [r4, #36]	; 0x24
    5c3a:	bd10      	pop	{r4, pc}
    5c3c:	f44f 6187 	mov.w	r1, #1080	; 0x438
    5c40:	2027      	movs	r0, #39	; 0x27
    5c42:	f7fe fed5 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c46:	0000      	.short	0x0000
    5c48:	200000c0 	.word	0x200000c0
    5c4c:	b510      	push	{r4, lr}
    5c4e:	f7ff ff85 	bl	5b5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5c52:	4604      	mov	r4, r0
    5c54:	f7ff ff88 	bl	5b68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5c58:	4601      	mov	r1, r0
    5c5a:	7b42      	ldrb	r2, [r0, #13]
    5c5c:	4815      	ldr	r0, [pc, #84]	; (5cb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a0>)
    5c5e:	2a24      	cmp	r2, #36	; 0x24
    5c60:	d00e      	beq.n	5c80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5c62:	7b89      	ldrb	r1, [r1, #14]
    5c64:	2924      	cmp	r1, #36	; 0x24
    5c66:	d00b      	beq.n	5c80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5c68:	2a1f      	cmp	r2, #31
    5c6a:	d00d      	beq.n	5c88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    5c6c:	2a20      	cmp	r2, #32
    5c6e:	d00b      	beq.n	5c88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    5c70:	2922      	cmp	r1, #34	; 0x22
    5c72:	d00f      	beq.n	5c94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    5c74:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    5c78:	2804      	cmp	r0, #4
    5c7a:	d100      	bne.n	5c7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16a>
    5c7c:	2008      	movs	r0, #8
    5c7e:	bd10      	pop	{r4, pc}
    5c80:	6840      	ldr	r0, [r0, #4]
    5c82:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    5c86:	e00e      	b.n	5ca6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x192>
    5c88:	2922      	cmp	r1, #34	; 0x22
    5c8a:	d003      	beq.n	5c94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    5c8c:	6840      	ldr	r0, [r0, #4]
    5c8e:	f890 01a8 	ldrb.w	r0, [r0, #424]	; 0x1a8
    5c92:	e005      	b.n	5ca0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    5c94:	6841      	ldr	r1, [r0, #4]
    5c96:	f891 01a8 	ldrb.w	r0, [r1, #424]	; 0x1a8
    5c9a:	f891 105b 	ldrb.w	r1, [r1, #91]	; 0x5b
    5c9e:	4008      	ands	r0, r1
    5ca0:	f007 fd8a 	bl	d7b8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5ca4:	4601      	mov	r1, r0
    5ca6:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    5caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5cae:	f007 bd9b 	b.w	d7e8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5cb2:	0000      	.short	0x0000
    5cb4:	200000f8 	.word	0x200000f8
    5cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5cbc:	4688      	mov	r8, r1
    5cbe:	4606      	mov	r6, r0
    5cc0:	f7ff ff52 	bl	5b68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5cc4:	4c4a      	ldr	r4, [pc, #296]	; (5df0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2dc>)
    5cc6:	2700      	movs	r7, #0
    5cc8:	4605      	mov	r5, r0
    5cca:	f88d 7000 	strb.w	r7, [sp]
    5cce:	7820      	ldrb	r0, [r4, #0]
    5cd0:	2802      	cmp	r0, #2
    5cd2:	d004      	beq.n	5cde <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ca>
    5cd4:	f240 4189 	movw	r1, #1161	; 0x489
    5cd8:	2027      	movs	r0, #39	; 0x27
    5cda:	f7fe fe89 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5cde:	7ba0      	ldrb	r0, [r4, #14]
    5ce0:	0640      	lsls	r0, r0, #25
    5ce2:	d406      	bmi.n	5cf2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1de>
    5ce4:	2040      	movs	r0, #64	; 0x40
    5ce6:	f7ff ff45 	bl	5b74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5cea:	89e0      	ldrh	r0, [r4, #14]
    5cec:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5cf0:	81e0      	strh	r0, [r4, #14]
    5cf2:	7ce8      	ldrb	r0, [r5, #19]
    5cf4:	b3c6      	cbz	r6, 5d68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x254>
    5cf6:	f005 fb15 	bl	b324 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    5cfa:	f005 faf9 	bl	b2f0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    5cfe:	b968      	cbnz	r0, 5d1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5d00:	7ce8      	ldrb	r0, [r5, #19]
    5d02:	b158      	cbz	r0, 5d1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5d04:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5d06:	7841      	ldrb	r1, [r0, #1]
    5d08:	b141      	cbz	r1, 5d1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5d0a:	7800      	ldrb	r0, [r0, #0]
    5d0c:	7a29      	ldrb	r1, [r5, #8]
    5d0e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5d12:	4288      	cmp	r0, r1
    5d14:	d102      	bne.n	5d1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5d16:	2001      	movs	r0, #1
    5d18:	70a0      	strb	r0, [r4, #2]
    5d1a:	e04a      	b.n	5db2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29e>
    5d1c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5d1e:	7841      	ldrb	r1, [r0, #1]
    5d20:	8161      	strh	r1, [r4, #10]
    5d22:	b121      	cbz	r1, 5d2e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21a>
    5d24:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5d26:	f007 fbd2 	bl	d4ce <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    5d2a:	62a0      	str	r0, [r4, #40]	; 0x28
    5d2c:	e000      	b.n	5d30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21c>
    5d2e:	62a7      	str	r7, [r4, #40]	; 0x28
    5d30:	89e0      	ldrh	r0, [r4, #14]
    5d32:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    5d36:	81e0      	strh	r0, [r4, #14]
    5d38:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5d3a:	79e9      	ldrb	r1, [r5, #7]
    5d3c:	7800      	ldrb	r0, [r0, #0]
    5d3e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    5d42:	4288      	cmp	r0, r1
    5d44:	d005      	beq.n	5d52 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23e>
    5d46:	f000 f937 	bl	5fb8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a4>
    5d4a:	89e0      	ldrh	r0, [r4, #14]
    5d4c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    5d50:	81e0      	strh	r0, [r4, #14]
    5d52:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5d54:	7a29      	ldrb	r1, [r5, #8]
    5d56:	7800      	ldrb	r0, [r0, #0]
    5d58:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5d5c:	4288      	cmp	r0, r1
    5d5e:	d10e      	bne.n	5d7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    5d60:	4668      	mov	r0, sp
    5d62:	f000 f8e5 	bl	5f30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41c>
    5d66:	e00a      	b.n	5d7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    5d68:	e7ff      	b.n	5d6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x256>
    5d6a:	b108      	cbz	r0, 5d70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25c>
    5d6c:	f005 fad4 	bl	b318 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5d70:	78e0      	ldrb	r0, [r4, #3]
    5d72:	1c40      	adds	r0, r0, #1
    5d74:	70e0      	strb	r0, [r4, #3]
    5d76:	89e0      	ldrh	r0, [r4, #14]
    5d78:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5d7c:	81e0      	strh	r0, [r4, #14]
    5d7e:	4d1d      	ldr	r5, [pc, #116]	; (5df4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>)
    5d80:	f1b8 0f00 	cmp.w	r8, #0
    5d84:	d104      	bne.n	5d90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27c>
    5d86:	78e1      	ldrb	r1, [r4, #3]
    5d88:	2001      	movs	r0, #1
    5d8a:	f7ff ff1f 	bl	5bcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    5d8e:	b1a0      	cbz	r0, 5dba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a6>
    5d90:	f89d 0000 	ldrb.w	r0, [sp]
    5d94:	b110      	cbz	r0, 5d9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x288>
    5d96:	2000      	movs	r0, #0
    5d98:	f7ff fe38 	bl	5a0c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5d9c:	b136      	cbz	r6, 5dac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x298>
    5d9e:	70e7      	strb	r7, [r4, #3]
    5da0:	7968      	ldrb	r0, [r5, #5]
    5da2:	1c40      	adds	r0, r0, #1
    5da4:	7168      	strb	r0, [r5, #5]
    5da6:	f7ff feeb 	bl	5b80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5daa:	e002      	b.n	5db2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29e>
    5dac:	79a8      	ldrb	r0, [r5, #6]
    5dae:	1c40      	adds	r0, r0, #1
    5db0:	71a8      	strb	r0, [r5, #6]
    5db2:	f000 f867 	bl	5e84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    5db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5dba:	f89d 0000 	ldrb.w	r0, [sp]
    5dbe:	b110      	cbz	r0, 5dc6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b2>
    5dc0:	2001      	movs	r0, #1
    5dc2:	f7ff fe23 	bl	5a0c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5dc6:	2000      	movs	r0, #0
    5dc8:	f000 f98e 	bl	60e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d4>
    5dcc:	f89d 0000 	ldrb.w	r0, [sp]
    5dd0:	b110      	cbz	r0, 5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c4>
    5dd2:	2002      	movs	r0, #2
    5dd4:	f7ff fe1a 	bl	5a0c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5dd8:	b136      	cbz	r6, 5de8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    5dda:	70e7      	strb	r7, [r4, #3]
    5ddc:	7968      	ldrb	r0, [r5, #5]
    5dde:	1c40      	adds	r0, r0, #1
    5de0:	7168      	strb	r0, [r5, #5]
    5de2:	f7ff fecd 	bl	5b80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5de6:	e7e6      	b.n	5db6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a2>
    5de8:	79a8      	ldrb	r0, [r5, #6]
    5dea:	1c40      	adds	r0, r0, #1
    5dec:	71a8      	strb	r0, [r5, #6]
    5dee:	e7e2      	b.n	5db6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a2>
    5df0:	200000c0 	.word	0x200000c0
    5df4:	20000b72 	.word	0x20000b72
    5df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5dfc:	460e      	mov	r6, r1
    5dfe:	4680      	mov	r8, r0
    5e00:	f7ff feb2 	bl	5b68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5e04:	4d1e      	ldr	r5, [pc, #120]	; (5e80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36c>)
    5e06:	4604      	mov	r4, r0
    5e08:	7828      	ldrb	r0, [r5, #0]
    5e0a:	2801      	cmp	r0, #1
    5e0c:	d004      	beq.n	5e18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x304>
    5e0e:	f240 4147 	movw	r1, #1095	; 0x447
    5e12:	2027      	movs	r0, #39	; 0x27
    5e14:	f7fe fdec 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e18:	7860      	ldrb	r0, [r4, #1]
    5e1a:	2701      	movs	r7, #1
    5e1c:	b130      	cbz	r0, 5e2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x318>
    5e1e:	2000      	movs	r0, #0
    5e20:	7060      	strb	r0, [r4, #1]
    5e22:	4601      	mov	r1, r0
    5e24:	2004      	movs	r0, #4
    5e26:	f7ff fe91 	bl	5b4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5e2a:	70e7      	strb	r7, [r4, #3]
    5e2c:	6a29      	ldr	r1, [r5, #32]
    5e2e:	7808      	ldrb	r0, [r1, #0]
    5e30:	43c0      	mvns	r0, r0
    5e32:	0780      	lsls	r0, r0, #30
    5e34:	d109      	bne.n	5e4a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x336>
    5e36:	79a0      	ldrb	r0, [r4, #6]
    5e38:	b9d0      	cbnz	r0, 5e70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35c>
    5e3a:	2002      	movs	r0, #2
    5e3c:	f7ff fe86 	bl	5b4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5e40:	6a28      	ldr	r0, [r5, #32]
    5e42:	7800      	ldrb	r0, [r0, #0]
    5e44:	43c0      	mvns	r0, r0
    5e46:	0780      	lsls	r0, r0, #30
    5e48:	d012      	beq.n	5e70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35c>
    5e4a:	6a28      	ldr	r0, [r5, #32]
    5e4c:	7840      	ldrb	r0, [r0, #1]
    5e4e:	b110      	cbz	r0, 5e56 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x342>
    5e50:	2002      	movs	r0, #2
    5e52:	71a0      	strb	r0, [r4, #6]
    5e54:	e000      	b.n	5e58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x344>
    5e56:	71a7      	strb	r7, [r4, #6]
    5e58:	ea36 0608 	bics.w	r6, r6, r8
    5e5c:	d004      	beq.n	5e68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
    5e5e:	2100      	movs	r1, #0
    5e60:	4608      	mov	r0, r1
    5e62:	f7ff feb3 	bl	5bcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    5e66:	b128      	cbz	r0, 5e74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>
    5e68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5e6c:	f000 b80a 	b.w	5e84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    5e70:	2003      	movs	r0, #3
    5e72:	e7ee      	b.n	5e52 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x33e>
    5e74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5e78:	2000      	movs	r0, #0
    5e7a:	f000 b8eb 	b.w	6054 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    5e7e:	0000      	.short	0x0000
    5e80:	200000c0 	.word	0x200000c0
    5e84:	b510      	push	{r4, lr}
    5e86:	f005 fae5 	bl	b454 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    5e8a:	f005 f9d3 	bl	b234 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5e8e:	4c0d      	ldr	r4, [pc, #52]	; (5ec4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>)
    5e90:	89e0      	ldrh	r0, [r4, #14]
    5e92:	f7ff fe6f 	bl	5b74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5e96:	69e2      	ldr	r2, [r4, #28]
    5e98:	7961      	ldrb	r1, [r4, #5]
    5e9a:	78a0      	ldrb	r0, [r4, #2]
    5e9c:	4790      	blx	r2
    5e9e:	480a      	ldr	r0, [pc, #40]	; (5ec8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    5ea0:	7c40      	ldrb	r0, [r0, #17]
    5ea2:	b158      	cbz	r0, 5ebc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a8>
    5ea4:	4808      	ldr	r0, [pc, #32]	; (5ec8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    5ea6:	3852      	subs	r0, #82	; 0x52
    5ea8:	f850 1f52 	ldr.w	r1, [r0, #82]!
    5eac:	6081      	str	r1, [r0, #8]
    5eae:	6841      	ldr	r1, [r0, #4]
    5eb0:	60c1      	str	r1, [r0, #12]
    5eb2:	4805      	ldr	r0, [pc, #20]	; (5ec8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    5eb4:	2101      	movs	r1, #1
    5eb6:	7401      	strb	r1, [r0, #16]
    5eb8:	f004 fcf6 	bl	a8a8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5ebc:	2000      	movs	r0, #0
    5ebe:	7020      	strb	r0, [r4, #0]
    5ec0:	bd10      	pop	{r4, pc}
    5ec2:	0000      	.short	0x0000
    5ec4:	200000c0 	.word	0x200000c0
    5ec8:	20000b72 	.word	0x20000b72
    5ecc:	4808      	ldr	r0, [pc, #32]	; (5ef0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3dc>)
    5ece:	b510      	push	{r4, lr}
    5ed0:	7800      	ldrb	r0, [r0, #0]
    5ed2:	2802      	cmp	r0, #2
    5ed4:	d004      	beq.n	5ee0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>
    5ed6:	f240 2101 	movw	r1, #513	; 0x201
    5eda:	2027      	movs	r0, #39	; 0x27
    5edc:	f7fe fd88 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ee0:	4904      	ldr	r1, [pc, #16]	; (5ef4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e0>)
    5ee2:	2001      	movs	r0, #1
    5ee4:	71c8      	strb	r0, [r1, #7]
    5ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5eea:	f7ff bfcb 	b.w	5e84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    5eee:	0000      	.short	0x0000
    5ef0:	200000c0 	.word	0x200000c0
    5ef4:	20000b72 	.word	0x20000b72
    5ef8:	b430      	push	{r4, r5}
    5efa:	4b0c      	ldr	r3, [pc, #48]	; (5f2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    5efc:	b942      	cbnz	r2, 5f10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>
    5efe:	79da      	ldrb	r2, [r3, #7]
    5f00:	2aff      	cmp	r2, #255	; 0xff
    5f02:	d105      	bne.n	5f10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>
    5f04:	f890 2063 	ldrb.w	r2, [r0, #99]	; 0x63
    5f08:	f890 4062 	ldrb.w	r4, [r0, #98]	; 0x62
    5f0c:	42a2      	cmp	r2, r4
    5f0e:	d00b      	beq.n	5f28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    5f10:	b131      	cbz	r1, 5f20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40c>
    5f12:	79da      	ldrb	r2, [r3, #7]
    5f14:	f890 1063 	ldrb.w	r1, [r0, #99]	; 0x63
    5f18:	bc30      	pop	{r4, r5}
    5f1a:	4610      	mov	r0, r2
    5f1c:	f005 be2e 	b.w	bb7c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    5f20:	22ff      	movs	r2, #255	; 0xff
    5f22:	f890 1062 	ldrb.w	r1, [r0, #98]	; 0x62
    5f26:	e7f7      	b.n	5f18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x404>
    5f28:	bc30      	pop	{r4, r5}
    5f2a:	4770      	bx	lr
    5f2c:	200000c0 	.word	0x200000c0
    5f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f34:	4607      	mov	r7, r0
    5f36:	f7ff fe17 	bl	5b68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5f3a:	4604      	mov	r4, r0
    5f3c:	481d      	ldr	r0, [pc, #116]	; (5fb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a0>)
    5f3e:	2600      	movs	r6, #0
    5f40:	2501      	movs	r5, #1
    5f42:	6a41      	ldr	r1, [r0, #36]	; 0x24
    5f44:	780a      	ldrb	r2, [r1, #0]
    5f46:	f002 0203 	and.w	r2, r2, #3
    5f4a:	2a01      	cmp	r2, #1
    5f4c:	d015      	beq.n	5f7a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    5f4e:	2a02      	cmp	r2, #2
    5f50:	d013      	beq.n	5f7a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    5f52:	2a03      	cmp	r2, #3
    5f54:	d003      	beq.n	5f5e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44a>
    5f56:	7941      	ldrb	r1, [r0, #5]
    5f58:	f041 0104 	orr.w	r1, r1, #4
    5f5c:	e024      	b.n	5fa8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x494>
    5f5e:	7065      	strb	r5, [r4, #1]
    5f60:	89c2      	ldrh	r2, [r0, #14]
    5f62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    5f66:	81c2      	strh	r2, [r0, #14]
    5f68:	2001      	movs	r0, #1
    5f6a:	f7ff fdef 	bl	5b4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5f6e:	e01d      	b.n	5fac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    5f70:	7226      	strb	r6, [r4, #8]
    5f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f76:	7225      	strb	r5, [r4, #8]
    5f78:	e7fb      	b.n	5f72 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45e>
    5f7a:	7849      	ldrb	r1, [r1, #1]
    5f7c:	b1b1      	cbz	r1, 5fac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    5f7e:	89c2      	ldrh	r2, [r0, #14]
    5f80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    5f84:	81c2      	strh	r2, [r0, #14]
    5f86:	6a82      	ldr	r2, [r0, #40]	; 0x28
    5f88:	2a00      	cmp	r2, #0
    5f8a:	d0f2      	beq.n	5f72 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45e>
    5f8c:	29fb      	cmp	r1, #251	; 0xfb
    5f8e:	d808      	bhi.n	5fa2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48e>
    5f90:	7980      	ldrb	r0, [r0, #6]
    5f92:	b120      	cbz	r0, 5f9e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48a>
    5f94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5f98:	2020      	movs	r0, #32
    5f9a:	f7ff bdeb 	b.w	5b74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5f9e:	703d      	strb	r5, [r7, #0]
    5fa0:	e7e7      	b.n	5f72 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45e>
    5fa2:	7941      	ldrb	r1, [r0, #5]
    5fa4:	f041 0110 	orr.w	r1, r1, #16
    5fa8:	7141      	strb	r1, [r0, #5]
    5faa:	e7e2      	b.n	5f72 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45e>
    5fac:	7a20      	ldrb	r0, [r4, #8]
    5fae:	2801      	cmp	r0, #1
    5fb0:	d1e1      	bne.n	5f76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x462>
    5fb2:	e7dd      	b.n	5f70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    5fb4:	200000c0 	.word	0x200000c0
    5fb8:	b570      	push	{r4, r5, r6, lr}
    5fba:	f7ff fdd5 	bl	5b68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5fbe:	4604      	mov	r4, r0
    5fc0:	7980      	ldrb	r0, [r0, #6]
    5fc2:	2800      	cmp	r0, #0
    5fc4:	d02e      	beq.n	6024 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x510>
    5fc6:	2802      	cmp	r0, #2
    5fc8:	d10d      	bne.n	5fe6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d2>
    5fca:	481c      	ldr	r0, [pc, #112]	; (603c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x528>)
    5fcc:	6b00      	ldr	r0, [r0, #48]	; 0x30
    5fce:	f007 f884 	bl	d0da <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    5fd2:	b340      	cbz	r0, 6026 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x512>
    5fd4:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    5fd8:	1c40      	adds	r0, r0, #1
    5fda:	f141 0100 	adc.w	r1, r1, #0
    5fde:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    5fe2:	f004 fc61 	bl	a8a8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5fe6:	2500      	movs	r5, #0
    5fe8:	71a5      	strb	r5, [r4, #6]
    5fea:	78e0      	ldrb	r0, [r4, #3]
    5fec:	b120      	cbz	r0, 5ff8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e4>
    5fee:	70e5      	strb	r5, [r4, #3]
    5ff0:	2100      	movs	r1, #0
    5ff2:	2010      	movs	r0, #16
    5ff4:	f7ff fdaa 	bl	5b4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5ff8:	78a0      	ldrb	r0, [r4, #2]
    5ffa:	b170      	cbz	r0, 601a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x506>
    5ffc:	70a5      	strb	r5, [r4, #2]
    5ffe:	f7ff fb43 	bl	5688 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    6002:	b198      	cbz	r0, 602c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x518>
    6004:	2100      	movs	r1, #0
    6006:	2008      	movs	r0, #8
    6008:	f7ff fda0 	bl	5b4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    600c:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    6010:	1c40      	adds	r0, r0, #1
    6012:	f141 0100 	adc.w	r1, r1, #0
    6016:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    601a:	79e0      	ldrb	r0, [r4, #7]
    601c:	2801      	cmp	r0, #1
    601e:	d00a      	beq.n	6036 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x522>
    6020:	2001      	movs	r0, #1
    6022:	71e0      	strb	r0, [r4, #7]
    6024:	bd70      	pop	{r4, r5, r6, pc}
    6026:	f44f 7163 	mov.w	r1, #908	; 0x38c
    602a:	e001      	b.n	6030 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51c>
    602c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
    6030:	2027      	movs	r0, #39	; 0x27
    6032:	f7fe fcdd 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6036:	71e5      	strb	r5, [r4, #7]
    6038:	bd70      	pop	{r4, r5, r6, pc}
    603a:	0000      	.short	0x0000
    603c:	200000c0 	.word	0x200000c0
    6040:	4803      	ldr	r0, [pc, #12]	; (6050 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53c>)
    6042:	7800      	ldrb	r0, [r0, #0]
    6044:	2800      	cmp	r0, #0
    6046:	d001      	beq.n	604c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x538>
    6048:	f7ff bf1c 	b.w	5e84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    604c:	4770      	bx	lr
    604e:	0000      	.short	0x0000
    6050:	200000c0 	.word	0x200000c0
    6054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6058:	4681      	mov	r9, r0
    605a:	f7ff fd7f 	bl	5b5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    605e:	4606      	mov	r6, r0
    6060:	f7ff fd82 	bl	5b68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6064:	4c1d      	ldr	r4, [pc, #116]	; (60dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c8>)
    6066:	4605      	mov	r5, r0
    6068:	464a      	mov	r2, r9
    606a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    606c:	6260      	str	r0, [r4, #36]	; 0x24
    606e:	2101      	movs	r1, #1
    6070:	4630      	mov	r0, r6
    6072:	f7ff ff41 	bl	5ef8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e4>
    6076:	7ce8      	ldrb	r0, [r5, #19]
    6078:	f04f 0800 	mov.w	r8, #0
    607c:	b1c0      	cbz	r0, 60b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x59c>
    607e:	7a67      	ldrb	r7, [r4, #9]
    6080:	4817      	ldr	r0, [pc, #92]	; (60e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5cc>)
    6082:	f005 fc8b 	bl	b99c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6086:	4817      	ldr	r0, [pc, #92]	; (60e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d0>)
    6088:	2101      	movs	r1, #1
    608a:	7601      	strb	r1, [r0, #24]
    608c:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    6090:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6094:	4a12      	ldr	r2, [pc, #72]	; (60e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5cc>)
    6096:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6098:	f005 f8bc 	bl	b214 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    609c:	f896 0063 	ldrb.w	r0, [r6, #99]	; 0x63
    60a0:	f007 fb94 	bl	d7cc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    60a4:	4602      	mov	r2, r0
    60a6:	4639      	mov	r1, r7
    60a8:	2001      	movs	r0, #1
    60aa:	f005 f8e1 	bl	b270 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    60ae:	e004      	b.n	60ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5a6>
    60b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    60b2:	f005 fc73 	bl	b99c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    60b6:	f005 f8bd 	bl	b234 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    60ba:	f1b9 0f00 	cmp.w	r9, #0
    60be:	d102      	bne.n	60c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b2>
    60c0:	4640      	mov	r0, r8
    60c2:	f005 fb03 	bl	b6cc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    60c6:	2100      	movs	r1, #0
    60c8:	f896 3062 	ldrb.w	r3, [r6, #98]	; 0x62
    60cc:	2201      	movs	r2, #1
    60ce:	4608      	mov	r0, r1
    60d0:	f005 fcee 	bl	bab0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    60d4:	2002      	movs	r0, #2
    60d6:	7020      	strb	r0, [r4, #0]
    60d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    60dc:	200000c0 	.word	0x200000c0
    60e0:	20000a20 	.word	0x20000a20
    60e4:	20000b28 	.word	0x20000b28
    60e8:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    60ec:	4604      	mov	r4, r0
    60ee:	f7ff fd3b 	bl	5b68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    60f2:	4605      	mov	r5, r0
    60f4:	f7ff fd32 	bl	5b5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    60f8:	4606      	mov	r6, r0
    60fa:	f8df 9178 	ldr.w	r9, [pc, #376]	; 6274 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    60fe:	4622      	mov	r2, r4
    6100:	2100      	movs	r1, #0
    6102:	f7ff fef9 	bl	5ef8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e4>
    6106:	79a8      	ldrb	r0, [r5, #6]
    6108:	2701      	movs	r7, #1
    610a:	f04f 0800 	mov.w	r8, #0
    610e:	f1a9 0420 	sub.w	r4, r9, #32
    6112:	b140      	cbz	r0, 6126 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x612>
    6114:	2801      	cmp	r0, #1
    6116:	d01f      	beq.n	6158 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    6118:	2802      	cmp	r0, #2
    611a:	d030      	beq.n	617e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x66a>
    611c:	2803      	cmp	r0, #3
    611e:	d03c      	beq.n	619a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x686>
    6120:	f240 219e 	movw	r1, #670	; 0x29e
    6124:	e058      	b.n	61d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c4>
    6126:	7a20      	ldrb	r0, [r4, #8]
    6128:	2148      	movs	r1, #72	; 0x48
    612a:	f8ad 0004 	strh.w	r0, [sp, #4]
    612e:	5388      	strh	r0, [r1, r6]
    6130:	4648      	mov	r0, r9
    6132:	f7ff fad3 	bl	56dc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6136:	b128      	cbz	r0, 6144 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x630>
    6138:	2080      	movs	r0, #128	; 0x80
    613a:	6a21      	ldr	r1, [r4, #32]
    613c:	f7ff fd06 	bl	5b4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6140:	70af      	strb	r7, [r5, #2]
    6142:	e02e      	b.n	61a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68e>
    6144:	466a      	mov	r2, sp
    6146:	a901      	add	r1, sp, #4
    6148:	6b20      	ldr	r0, [r4, #48]	; 0x30
    614a:	f007 fb57 	bl	d7fc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    614e:	6220      	str	r0, [r4, #32]
    6150:	b110      	cbz	r0, 6158 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    6152:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
    6156:	b111      	cbz	r1, 615e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x64a>
    6158:	4847      	ldr	r0, [pc, #284]	; (6278 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    615a:	6220      	str	r0, [r4, #32]
    615c:	e021      	b.n	61a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68e>
    615e:	f89d 1000 	ldrb.w	r1, [sp]
    6162:	b931      	cbnz	r1, 6172 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65e>
    6164:	f8a0 8000 	strh.w	r8, [r0]
    6168:	f880 8002 	strb.w	r8, [r0, #2]
    616c:	2101      	movs	r1, #1
    616e:	f007 fea4 	bl	deba <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6172:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6176:	6a20      	ldr	r0, [r4, #32]
    6178:	f007 fe63 	bl	de42 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    617c:	e011      	b.n	61a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68e>
    617e:	f8b6 0048 	ldrh.w	r0, [r6, #72]	; 0x48
    6182:	f8ad 0004 	strh.w	r0, [sp, #4]
    6186:	466a      	mov	r2, sp
    6188:	a901      	add	r1, sp, #4
    618a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    618c:	f007 fb36 	bl	d7fc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    6190:	6220      	str	r0, [r4, #32]
    6192:	b930      	cbnz	r0, 61a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68e>
    6194:	f240 218f 	movw	r1, #655	; 0x28f
    6198:	e01e      	b.n	61d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c4>
    619a:	4648      	mov	r0, r9
    619c:	f7ff fa9e 	bl	56dc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    61a0:	b1c0      	cbz	r0, 61d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c0>
    61a2:	6a20      	ldr	r0, [r4, #32]
    61a4:	2308      	movs	r3, #8
    61a6:	7801      	ldrb	r1, [r0, #0]
    61a8:	f021 0108 	bic.w	r1, r1, #8
    61ac:	7001      	strb	r1, [r0, #0]
    61ae:	79ea      	ldrb	r2, [r5, #7]
    61b0:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    61b4:	4311      	orrs	r1, r2
    61b6:	f021 0104 	bic.w	r1, r1, #4
    61ba:	7001      	strb	r1, [r0, #0]
    61bc:	7a2a      	ldrb	r2, [r5, #8]
    61be:	2304      	movs	r3, #4
    61c0:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    61c4:	4311      	orrs	r1, r2
    61c6:	f021 0110 	bic.w	r1, r1, #16
    61ca:	7001      	strb	r1, [r0, #0]
    61cc:	43c9      	mvns	r1, r1
    61ce:	0789      	lsls	r1, r1, #30
    61d0:	d005      	beq.n	61de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ca>
    61d2:	e007      	b.n	61e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d0>
    61d4:	f44f 7126 	mov.w	r1, #664	; 0x298
    61d8:	2027      	movs	r0, #39	; 0x27
    61da:	f7fe fc09 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    61de:	78c0      	ldrb	r0, [r0, #3]
    61e0:	2802      	cmp	r0, #2
    61e2:	d00f      	beq.n	6204 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    61e4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    61e6:	f007 f89d 	bl	d324 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    61ea:	b108      	cbz	r0, 61f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6dc>
    61ec:	2101      	movs	r1, #1
    61ee:	e00a      	b.n	6206 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f2>
    61f0:	6a20      	ldr	r0, [r4, #32]
    61f2:	7800      	ldrb	r0, [r0, #0]
    61f4:	43c0      	mvns	r0, r0
    61f6:	0780      	lsls	r0, r0, #30
    61f8:	d004      	beq.n	6204 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    61fa:	f7ff fa2d 	bl	5658 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    61fe:	f080 0101 	eor.w	r1, r0, #1
    6202:	e000      	b.n	6206 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f2>
    6204:	2100      	movs	r1, #0
    6206:	6a20      	ldr	r0, [r4, #32]
    6208:	7802      	ldrb	r2, [r0, #0]
    620a:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    620e:	7001      	strb	r1, [r0, #0]
    6210:	7ca9      	ldrb	r1, [r5, #18]
    6212:	b1d1      	cbz	r1, 624a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x736>
    6214:	7841      	ldrb	r1, [r0, #1]
    6216:	b1c1      	cbz	r1, 624a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x736>
    6218:	4818      	ldr	r0, [pc, #96]	; (627c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    621a:	f005 fbbf 	bl	b99c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    621e:	4816      	ldr	r0, [pc, #88]	; (6278 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    6220:	3828      	subs	r0, #40	; 0x28
    6222:	f880 8018 	strb.w	r8, [r0, #24]
    6226:	e9d5 1214 	ldrd	r1, r2, [r5, #80]	; 0x50
    622a:	e9c0 1204 	strd	r1, r2, [r0, #16]
    622e:	4913      	ldr	r1, [pc, #76]	; (627c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    6230:	6a22      	ldr	r2, [r4, #32]
    6232:	f004 ffef 	bl	b214 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    6236:	f896 0062 	ldrb.w	r0, [r6, #98]	; 0x62
    623a:	f007 fac7 	bl	d7cc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    623e:	4602      	mov	r2, r0
    6240:	21fb      	movs	r1, #251	; 0xfb
    6242:	2000      	movs	r0, #0
    6244:	f005 f814 	bl	b270 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    6248:	e003      	b.n	6252 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73e>
    624a:	f005 fba7 	bl	b99c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    624e:	f004 fff1 	bl	b234 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6252:	2201      	movs	r2, #1
    6254:	f896 3063 	ldrb.w	r3, [r6, #99]	; 0x63
    6258:	4611      	mov	r1, r2
    625a:	2000      	movs	r0, #0
    625c:	f005 fc28 	bl	bab0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6260:	7127      	strb	r7, [r4, #4]
    6262:	6a20      	ldr	r0, [r4, #32]
    6264:	8801      	ldrh	r1, [r0, #0]
    6266:	8221      	strh	r1, [r4, #16]
    6268:	7880      	ldrb	r0, [r0, #2]
    626a:	74a0      	strb	r0, [r4, #18]
    626c:	7027      	strb	r7, [r4, #0]
    626e:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    6272:	0000      	.short	0x0000
    6274:	200000e0 	.word	0x200000e0
    6278:	20000b50 	.word	0x20000b50
    627c:	20000a20 	.word	0x20000a20
    6280:	00005ecd 	.word	0x00005ecd
    6284:	00005cb9 	.word	0x00005cb9
    6288:	00005df9 	.word	0x00005df9
    628c:	00006041 	.word	0x00006041

00006290 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    6290:	4800      	ldr	r0, [pc, #0]	; (6294 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    6292:	4770      	bx	lr
    6294:	2000133b 	.word	0x2000133b

00006298 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    6298:	4904      	ldr	r1, [pc, #16]	; (62ac <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    629a:	788a      	ldrb	r2, [r1, #2]
    629c:	4282      	cmp	r2, r0
    629e:	d903      	bls.n	62a8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    62a0:	4408      	add	r0, r1
    62a2:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    62a6:	4770      	bx	lr
    62a8:	2000      	movs	r0, #0
    62aa:	4770      	bx	lr
    62ac:	20001168 	.word	0x20001168

000062b0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    62b0:	4904      	ldr	r1, [pc, #16]	; (62c4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    62b2:	788a      	ldrb	r2, [r1, #2]
    62b4:	4282      	cmp	r2, r0
    62b6:	d903      	bls.n	62c0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    62b8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    62bc:	3083      	adds	r0, #131	; 0x83
    62be:	4770      	bx	lr
    62c0:	2000      	movs	r0, #0
    62c2:	4770      	bx	lr
    62c4:	20001168 	.word	0x20001168

000062c8 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    62c8:	4a05      	ldr	r2, [pc, #20]	; (62e0 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    62ca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    62ce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    62d2:	6802      	ldr	r2, [r0, #0]
    62d4:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    62d8:	8880      	ldrh	r0, [r0, #4]
    62da:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    62de:	4770      	bx	lr
    62e0:	20001168 	.word	0x20001168

000062e4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    62e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62e8:	460e      	mov	r6, r1
    62ea:	4607      	mov	r7, r0
    62ec:	4615      	mov	r5, r2
    62ee:	2106      	movs	r1, #6
    62f0:	4630      	mov	r0, r6
    62f2:	f007 fc71 	bl	dbd8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    62f6:	4c0d      	ldr	r4, [pc, #52]	; (632c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    62f8:	b160      	cbz	r0, 6314 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    62fa:	2000      	movs	r0, #0
    62fc:	e004      	b.n	6308 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    62fe:	1821      	adds	r1, r4, r0
    6300:	1c40      	adds	r0, r0, #1
    6302:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    6306:	b2c0      	uxtb	r0, r0
    6308:	78a1      	ldrb	r1, [r4, #2]
    630a:	4281      	cmp	r1, r0
    630c:	d8f7      	bhi.n	62fe <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    630e:	2001      	movs	r0, #1
    6310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6314:	4631      	mov	r1, r6
    6316:	4638      	mov	r0, r7
    6318:	f007 fa7f 	bl	d81a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    631c:	2808      	cmp	r0, #8
    631e:	d003      	beq.n	6328 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    6320:	4420      	add	r0, r4
    6322:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    6326:	e7f2      	b.n	630e <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    6328:	2000      	movs	r0, #0
    632a:	e7f1      	b.n	6310 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    632c:	20001168 	.word	0x20001168

00006330 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    6330:	4904      	ldr	r1, [pc, #16]	; (6344 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    6332:	788a      	ldrb	r2, [r1, #2]
    6334:	4282      	cmp	r2, r0
    6336:	d903      	bls.n	6340 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    6338:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    633c:	1cc0      	adds	r0, r0, #3
    633e:	4770      	bx	lr
    6340:	2000      	movs	r0, #0
    6342:	4770      	bx	lr
    6344:	20001168 	.word	0x20001168

00006348 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    6348:	b510      	push	{r4, lr}
    634a:	f240 12d3 	movw	r2, #467	; 0x1d3
    634e:	2100      	movs	r1, #0
    6350:	4808      	ldr	r0, [pc, #32]	; (6374 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    6352:	f006 f9ee 	bl	c732 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6356:	2208      	movs	r2, #8
    6358:	21ff      	movs	r1, #255	; 0xff
    635a:	4807      	ldr	r0, [pc, #28]	; (6378 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    635c:	f006 f9e9 	bl	c732 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6360:	4805      	ldr	r0, [pc, #20]	; (6378 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    6362:	2100      	movs	r1, #0
    6364:	1f00      	subs	r0, r0, #4
    6366:	7001      	strb	r1, [r0, #0]
    6368:	7041      	strb	r1, [r0, #1]
    636a:	f44f 7161 	mov.w	r1, #900	; 0x384
    636e:	8041      	strh	r1, [r0, #2]
    6370:	bd10      	pop	{r4, pc}
    6372:	0000      	.short	0x0000
    6374:	20001168 	.word	0x20001168
    6378:	20000290 	.word	0x20000290

0000637c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    637c:	4901      	ldr	r1, [pc, #4]	; (6384 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    637e:	7008      	strb	r0, [r1, #0]
    6380:	4770      	bx	lr
    6382:	0000      	.short	0x0000
    6384:	2000028c 	.word	0x2000028c

00006388 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    6388:	4801      	ldr	r0, [pc, #4]	; (6390 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    638a:	7800      	ldrb	r0, [r0, #0]
    638c:	4770      	bx	lr
    638e:	0000      	.short	0x0000
    6390:	2000028c 	.word	0x2000028c

00006394 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    6394:	4b0b      	ldr	r3, [pc, #44]	; (63c4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    6396:	b510      	push	{r4, lr}
    6398:	789c      	ldrb	r4, [r3, #2]
    639a:	4284      	cmp	r4, r0
    639c:	d90f      	bls.n	63be <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    639e:	4418      	add	r0, r3
    63a0:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    63a4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    63a8:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    63ac:	700b      	strb	r3, [r1, #0]
    63ae:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    63b2:	6011      	str	r1, [r2, #0]
    63b4:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    63b8:	8090      	strh	r0, [r2, #4]
    63ba:	2001      	movs	r0, #1
    63bc:	bd10      	pop	{r4, pc}
    63be:	2000      	movs	r0, #0
    63c0:	bd10      	pop	{r4, pc}
    63c2:	0000      	.short	0x0000
    63c4:	20001168 	.word	0x20001168

000063c8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    63c8:	4907      	ldr	r1, [pc, #28]	; (63e8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    63ca:	788a      	ldrb	r2, [r1, #2]
    63cc:	4282      	cmp	r2, r0
    63ce:	d909      	bls.n	63e4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    63d0:	4408      	add	r0, r1
    63d2:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    63d6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    63da:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    63de:	f000 0001 	and.w	r0, r0, #1
    63e2:	4770      	bx	lr
    63e4:	2000      	movs	r0, #0
    63e6:	4770      	bx	lr
    63e8:	20001168 	.word	0x20001168

000063ec <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    63ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    63f0:	4698      	mov	r8, r3
    63f2:	4691      	mov	r9, r2
    63f4:	460c      	mov	r4, r1
    63f6:	4605      	mov	r5, r0
    63f8:	f000 f938 	bl	666c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    63fc:	4606      	mov	r6, r0
    63fe:	2810      	cmp	r0, #16
    6400:	d006      	beq.n	6410 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    6402:	f000 f903 	bl	660c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    6406:	2810      	cmp	r0, #16
    6408:	d002      	beq.n	6410 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    640a:	2012      	movs	r0, #18
    640c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6410:	4f18      	ldr	r7, [pc, #96]	; (6474 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    6412:	78b8      	ldrb	r0, [r7, #2]
    6414:	2808      	cmp	r0, #8
    6416:	d22a      	bcs.n	646e <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    6418:	2e10      	cmp	r6, #16
    641a:	d105      	bne.n	6428 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    641c:	2200      	movs	r2, #0
    641e:	4621      	mov	r1, r4
    6420:	4628      	mov	r0, r5
    6422:	f000 f907 	bl	6634 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd0>
    6426:	4606      	mov	r6, r0
    6428:	78bc      	ldrb	r4, [r7, #2]
    642a:	2210      	movs	r2, #16
    642c:	1c60      	adds	r0, r4, #1
    642e:	70b8      	strb	r0, [r7, #2]
    6430:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    6434:	1ce8      	adds	r0, r5, #3
    6436:	4649      	mov	r1, r9
    6438:	f007 fb38 	bl	daac <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    643c:	f105 0083 	add.w	r0, r5, #131	; 0x83
    6440:	2210      	movs	r2, #16
    6442:	4641      	mov	r1, r8
    6444:	f007 fb32 	bl	daac <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6448:	2110      	movs	r1, #16
    644a:	4640      	mov	r0, r8
    644c:	f007 fbc4 	bl	dbd8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6450:	443c      	add	r4, r7
    6452:	2110      	movs	r1, #16
    6454:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    6458:	4648      	mov	r0, r9
    645a:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    645e:	f007 fbbb 	bl	dbd8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6462:	77e0      	strb	r0, [r4, #31]
    6464:	f804 6c29 	strb.w	r6, [r4, #-41]
    6468:	2000      	movs	r0, #0
    646a:	73e0      	strb	r0, [r4, #15]
    646c:	e7ce      	b.n	640c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    646e:	2007      	movs	r0, #7
    6470:	e7cc      	b.n	640c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    6472:	0000      	.short	0x0000
    6474:	20001168 	.word	0x20001168

00006478 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    6478:	4806      	ldr	r0, [pc, #24]	; (6494 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    647a:	b510      	push	{r4, lr}
    647c:	7880      	ldrb	r0, [r0, #2]
    647e:	1e40      	subs	r0, r0, #1
    6480:	b244      	sxtb	r4, r0
    6482:	e004      	b.n	648e <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    6484:	b2e0      	uxtb	r0, r4
    6486:	f000 f939 	bl	66fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    648a:	1e64      	subs	r4, r4, #1
    648c:	b264      	sxtb	r4, r4
    648e:	2c00      	cmp	r4, #0
    6490:	daf8      	bge.n	6484 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    6492:	bd10      	pop	{r4, pc}
    6494:	20001168 	.word	0x20001168

00006498 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    6498:	4801      	ldr	r0, [pc, #4]	; (64a0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    649a:	8840      	ldrh	r0, [r0, #2]
    649c:	4770      	bx	lr
    649e:	0000      	.short	0x0000
    64a0:	2000028c 	.word	0x2000028c

000064a4 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    64a4:	b138      	cbz	r0, 64b6 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    64a6:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    64aa:	4288      	cmp	r0, r1
    64ac:	d803      	bhi.n	64b6 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    64ae:	4903      	ldr	r1, [pc, #12]	; (64bc <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    64b0:	8048      	strh	r0, [r1, #2]
    64b2:	2001      	movs	r0, #1
    64b4:	4770      	bx	lr
    64b6:	2000      	movs	r0, #0
    64b8:	4770      	bx	lr
    64ba:	0000      	.short	0x0000
    64bc:	2000028c 	.word	0x2000028c

000064c0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    64c0:	4905      	ldr	r1, [pc, #20]	; (64d8 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    64c2:	788a      	ldrb	r2, [r1, #2]
    64c4:	4282      	cmp	r2, r0
    64c6:	d903      	bls.n	64d0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    64c8:	4408      	add	r0, r1
    64ca:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    64ce:	b108      	cbz	r0, 64d4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    64d0:	2000      	movs	r0, #0
    64d2:	4770      	bx	lr
    64d4:	2001      	movs	r0, #1
    64d6:	4770      	bx	lr
    64d8:	20001168 	.word	0x20001168

000064dc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    64dc:	b570      	push	{r4, r5, r6, lr}
    64de:	460d      	mov	r5, r1
    64e0:	4606      	mov	r6, r0
    64e2:	f000 f8c3 	bl	666c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    64e6:	4c10      	ldr	r4, [pc, #64]	; (6528 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    64e8:	2810      	cmp	r0, #16
    64ea:	d007      	beq.n	64fc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    64ec:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    64f0:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    64f4:	07c9      	lsls	r1, r1, #31
    64f6:	d001      	beq.n	64fc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    64f8:	2001      	movs	r0, #1
    64fa:	bd70      	pop	{r4, r5, r6, pc}
    64fc:	7861      	ldrb	r1, [r4, #1]
    64fe:	2908      	cmp	r1, #8
    6500:	d210      	bcs.n	6524 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    6502:	2810      	cmp	r0, #16
    6504:	d008      	beq.n	6518 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    6506:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    650a:	2101      	movs	r1, #1
    650c:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    6510:	7860      	ldrb	r0, [r4, #1]
    6512:	1c40      	adds	r0, r0, #1
    6514:	7060      	strb	r0, [r4, #1]
    6516:	e7ef      	b.n	64f8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    6518:	2201      	movs	r2, #1
    651a:	4629      	mov	r1, r5
    651c:	4630      	mov	r0, r6
    651e:	f000 f889 	bl	6634 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd0>
    6522:	e7f5      	b.n	6510 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    6524:	2000      	movs	r0, #0
    6526:	bd70      	pop	{r4, r5, r6, pc}
    6528:	20001168 	.word	0x20001168

0000652c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    652c:	b570      	push	{r4, r5, r6, lr}
    652e:	4d0b      	ldr	r5, [pc, #44]	; (655c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    6530:	7828      	ldrb	r0, [r5, #0]
    6532:	1e40      	subs	r0, r0, #1
    6534:	b244      	sxtb	r4, r0
    6536:	e00a      	b.n	654e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    6538:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    653c:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6540:	07c0      	lsls	r0, r0, #31
    6542:	d002      	beq.n	654a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    6544:	b2e0      	uxtb	r0, r4
    6546:	f000 f921 	bl	678c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x228>
    654a:	1e64      	subs	r4, r4, #1
    654c:	b264      	sxtb	r4, r4
    654e:	2c00      	cmp	r4, #0
    6550:	daf2      	bge.n	6538 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    6552:	4903      	ldr	r1, [pc, #12]	; (6560 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    6554:	2000      	movs	r0, #0
    6556:	7048      	strb	r0, [r1, #1]
    6558:	bd70      	pop	{r4, r5, r6, pc}
    655a:	0000      	.short	0x0000
    655c:	20001168 	.word	0x20001168
    6560:	2000028c 	.word	0x2000028c

00006564 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    6564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6568:	2400      	movs	r4, #0
    656a:	4625      	mov	r5, r4
    656c:	4e18      	ldr	r6, [pc, #96]	; (65d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    656e:	e029      	b.n	65c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    6570:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    6574:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    6578:	07c0      	lsls	r0, r0, #31
    657a:	d021      	beq.n	65c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    657c:	4628      	mov	r0, r5
    657e:	f000 f845 	bl	660c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    6582:	4603      	mov	r3, r0
    6584:	f7ff fed4 	bl	6330 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6588:	4601      	mov	r1, r0
    658a:	2000      	movs	r0, #0
    658c:	2b10      	cmp	r3, #16
    658e:	d009      	beq.n	65a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6590:	18f2      	adds	r2, r6, r3
    6592:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    6596:	f1bc 0f01 	cmp.w	ip, #1
    659a:	d002      	beq.n	65a2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    659c:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    65a0:	b102      	cbz	r2, 65a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    65a2:	2001      	movs	r0, #1
    65a4:	1e40      	subs	r0, r0, #1
    65a6:	4201      	tst	r1, r0
    65a8:	d10a      	bne.n	65c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    65aa:	480a      	ldr	r0, [pc, #40]	; (65d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    65ac:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    65b0:	5503      	strb	r3, [r0, r4]
    65b2:	4620      	mov	r0, r4
    65b4:	1c64      	adds	r4, r4, #1
    65b6:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    65ba:	b2e4      	uxtb	r4, r4
    65bc:	f005 fbea 	bl	bd94 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    65c0:	1c6d      	adds	r5, r5, #1
    65c2:	b2ed      	uxtb	r5, r5
    65c4:	7830      	ldrb	r0, [r6, #0]
    65c6:	42a8      	cmp	r0, r5
    65c8:	d8d2      	bhi.n	6570 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    65ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    65ce:	0000      	.short	0x0000
    65d0:	20001168 	.word	0x20001168
    65d4:	20000290 	.word	0x20000290
    65d8:	b570      	push	{r4, r5, r6, lr}
    65da:	4b0a      	ldr	r3, [pc, #40]	; (6604 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    65dc:	781b      	ldrb	r3, [r3, #0]
    65de:	b173      	cbz	r3, 65fe <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9a>
    65e0:	4b09      	ldr	r3, [pc, #36]	; (6608 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>)
    65e2:	789c      	ldrb	r4, [r3, #2]
    65e4:	b15c      	cbz	r4, 65fe <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9a>
    65e6:	1845      	adds	r5, r0, r1
    65e8:	4621      	mov	r1, r4
    65ea:	b10a      	cbz	r2, 65f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    65ec:	1cd8      	adds	r0, r3, #3
    65ee:	e001      	b.n	65f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    65f0:	4805      	ldr	r0, [pc, #20]	; (6608 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>)
    65f2:	3083      	adds	r0, #131	; 0x83
    65f4:	462a      	mov	r2, r5
    65f6:	f004 fd2f 	bl	b058 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    65fa:	2001      	movs	r0, #1
    65fc:	bd70      	pop	{r4, r5, r6, pc}
    65fe:	2000      	movs	r0, #0
    6600:	bd70      	pop	{r4, r5, r6, pc}
    6602:	0000      	.short	0x0000
    6604:	2000028c 	.word	0x2000028c
    6608:	20001168 	.word	0x20001168
    660c:	4908      	ldr	r1, [pc, #32]	; (6630 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>)
    660e:	b510      	push	{r4, lr}
    6610:	4603      	mov	r3, r0
    6612:	2000      	movs	r0, #0
    6614:	788a      	ldrb	r2, [r1, #2]
    6616:	e006      	b.n	6626 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc2>
    6618:	180c      	adds	r4, r1, r0
    661a:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    661e:	429c      	cmp	r4, r3
    6620:	d004      	beq.n	662c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>
    6622:	1c40      	adds	r0, r0, #1
    6624:	b2c0      	uxtb	r0, r0
    6626:	4282      	cmp	r2, r0
    6628:	d8f6      	bhi.n	6618 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb4>
    662a:	2010      	movs	r0, #16
    662c:	bd10      	pop	{r4, pc}
    662e:	0000      	.short	0x0000
    6630:	20001168 	.word	0x20001168
    6634:	b570      	push	{r4, r5, r6, lr}
    6636:	4b0c      	ldr	r3, [pc, #48]	; (6668 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>)
    6638:	4604      	mov	r4, r0
    663a:	7818      	ldrb	r0, [r3, #0]
    663c:	1c45      	adds	r5, r0, #1
    663e:	701d      	strb	r5, [r3, #0]
    6640:	2810      	cmp	r0, #16
    6642:	d303      	bcc.n	664c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe8>
    6644:	2146      	movs	r1, #70	; 0x46
    6646:	2028      	movs	r0, #40	; 0x28
    6648:	f7fe f9d2 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    664c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    6650:	680d      	ldr	r5, [r1, #0]
    6652:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    6656:	8889      	ldrh	r1, [r1, #4]
    6658:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    665c:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    6660:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    6664:	bd70      	pop	{r4, r5, r6, pc}
    6666:	0000      	.short	0x0000
    6668:	20001168 	.word	0x20001168
    666c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6670:	460f      	mov	r7, r1
    6672:	4606      	mov	r6, r0
    6674:	2400      	movs	r4, #0
    6676:	4d0d      	ldr	r5, [pc, #52]	; (66ac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>)
    6678:	e00f      	b.n	669a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x136>
    667a:	bf00      	nop
    667c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    6680:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    6684:	42b1      	cmp	r1, r6
    6686:	d106      	bne.n	6696 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    6688:	2206      	movs	r2, #6
    668a:	4639      	mov	r1, r7
    668c:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    6690:	f005 ffc3 	bl	c61a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6694:	b138      	cbz	r0, 66a6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x142>
    6696:	1c64      	adds	r4, r4, #1
    6698:	b2e4      	uxtb	r4, r4
    669a:	7828      	ldrb	r0, [r5, #0]
    669c:	42a0      	cmp	r0, r4
    669e:	d8ed      	bhi.n	667c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x118>
    66a0:	2010      	movs	r0, #16
    66a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66a6:	4620      	mov	r0, r4
    66a8:	e7fb      	b.n	66a2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    66aa:	0000      	.short	0x0000
    66ac:	20001168 	.word	0x20001168
    66b0:	b570      	push	{r4, r5, r6, lr}
    66b2:	4605      	mov	r5, r0
    66b4:	f7ff ffaa 	bl	660c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    66b8:	2810      	cmp	r0, #16
    66ba:	d11c      	bne.n	66f6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    66bc:	4c0e      	ldr	r4, [pc, #56]	; (66f8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>)
    66be:	7820      	ldrb	r0, [r4, #0]
    66c0:	1e40      	subs	r0, r0, #1
    66c2:	b2c0      	uxtb	r0, r0
    66c4:	7020      	strb	r0, [r4, #0]
    66c6:	42a8      	cmp	r0, r5
    66c8:	d015      	beq.n	66f6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    66ca:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    66ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    66d2:	f502 7080 	add.w	r0, r2, #256	; 0x100
    66d6:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    66da:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    66de:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    66e2:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    66e6:	7820      	ldrb	r0, [r4, #0]
    66e8:	f7ff ff90 	bl	660c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    66ec:	2810      	cmp	r0, #16
    66ee:	d002      	beq.n	66f6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    66f0:	4420      	add	r0, r4
    66f2:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    66f6:	bd70      	pop	{r4, r5, r6, pc}
    66f8:	20001168 	.word	0x20001168
    66fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6700:	4c21      	ldr	r4, [pc, #132]	; (6788 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>)
    6702:	4606      	mov	r6, r0
    6704:	19a7      	adds	r7, r4, r6
    6706:	78a0      	ldrb	r0, [r4, #2]
    6708:	1e40      	subs	r0, r0, #1
    670a:	b2c5      	uxtb	r5, r0
    670c:	70a5      	strb	r5, [r4, #2]
    670e:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    6712:	42ae      	cmp	r6, r5
    6714:	d02a      	beq.n	676c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x208>
    6716:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    671a:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    671e:	f10a 0103 	add.w	r1, sl, #3
    6722:	f109 0003 	add.w	r0, r9, #3
    6726:	2210      	movs	r2, #16
    6728:	f005 ff89 	bl	c63e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    672c:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    6730:	f109 0083 	add.w	r0, r9, #131	; 0x83
    6734:	2210      	movs	r2, #16
    6736:	f005 ff82 	bl	c63e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    673a:	1960      	adds	r0, r4, r5
    673c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    6740:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    6744:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    6748:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    674c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6750:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    6754:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    6758:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    675c:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    6760:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    6764:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6768:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    676c:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    6770:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6774:	07c0      	lsls	r0, r0, #31
    6776:	d104      	bne.n	6782 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21e>
    6778:	4640      	mov	r0, r8
    677a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    677e:	f7ff bf97 	b.w	66b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14c>
    6782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6786:	0000      	.short	0x0000
    6788:	20001168 	.word	0x20001168
    678c:	4905      	ldr	r1, [pc, #20]	; (67a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x240>)
    678e:	784a      	ldrb	r2, [r1, #1]
    6790:	1e52      	subs	r2, r2, #1
    6792:	704a      	strb	r2, [r1, #1]
    6794:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    6798:	2200      	movs	r2, #0
    679a:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    679e:	f7ff bf87 	b.w	66b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14c>
    67a2:	0000      	.short	0x0000
    67a4:	20001168 	.word	0x20001168

000067a8 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ>:
    67a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    67aa:	f06f 021f 	mvn.w	r2, #31
    67ae:	0c01      	lsrs	r1, r0, #16
    67b0:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    67b4:	251f      	movs	r5, #31
    67b6:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    67ba:	3854      	subs	r0, #84	; 0x54
    67bc:	d00d      	beq.n	67da <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    67be:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    67c2:	3855      	subs	r0, #85	; 0x55
    67c4:	d009      	beq.n	67da <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    67c6:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    67ca:	38aa      	subs	r0, #170	; 0xaa
    67cc:	d005      	beq.n	67da <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    67ce:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    67d2:	38aa      	subs	r0, #170	; 0xaa
    67d4:	d001      	beq.n	67da <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    67d6:	2001      	movs	r0, #1
    67d8:	e000      	b.n	67dc <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x34>
    67da:	2000      	movs	r0, #0
    67dc:	2200      	movs	r2, #0
    67de:	4613      	mov	r3, r2
    67e0:	ea4f 0402 	mov.w	r4, r2
    67e4:	ea82 0701 	eor.w	r7, r2, r1
    67e8:	43ff      	mvns	r7, r7
    67ea:	431f      	orrs	r7, r3
    67ec:	1c7f      	adds	r7, r7, #1
    67ee:	d00f      	beq.n	6810 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x68>
    67f0:	f006 0701 	and.w	r7, r6, #1
    67f4:	0852      	lsrs	r2, r2, #1
    67f6:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    67fa:	f005 0701 	and.w	r7, r5, #1
    67fe:	085b      	lsrs	r3, r3, #1
    6800:	0876      	lsrs	r6, r6, #1
    6802:	086d      	lsrs	r5, r5, #1
    6804:	1c64      	adds	r4, r4, #1
    6806:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    680a:	2c16      	cmp	r4, #22
    680c:	d3ea      	bcc.n	67e4 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x3c>
    680e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6810:	2000      	movs	r0, #0
    6812:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006814 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    6814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6818:	4604      	mov	r4, r0
    681a:	f100 0568 	add.w	r5, r0, #104	; 0x68
    681e:	f04f 0901 	mov.w	r9, #1
    6822:	b171      	cbz	r1, 6842 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    6824:	f104 077e 	add.w	r7, r4, #126	; 0x7e
    6828:	1e7e      	subs	r6, r7, #1
    682a:	2901      	cmp	r1, #1
    682c:	d021      	beq.n	6872 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5e>
    682e:	2902      	cmp	r1, #2
    6830:	d046      	beq.n	68c0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xac>
    6832:	2903      	cmp	r1, #3
    6834:	d11b      	bne.n	686e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    6836:	4639      	mov	r1, r7
    6838:	4630      	mov	r0, r6
    683a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    683e:	f007 ba52 	b.w	dce6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6842:	f44f 7204 	mov.w	r2, #528	; 0x210
    6846:	2100      	movs	r1, #0
    6848:	f005 ff73 	bl	c732 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    684c:	f004 fbf4 	bl	b038 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6850:	f644 112b 	movw	r1, #18731	; 0x492b
    6854:	4008      	ands	r0, r1
    6856:	f885 9015 	strb.w	r9, [r5, #21]
    685a:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
    685e:	0a00      	lsrs	r0, r0, #8
    6860:	f885 004d 	strb.w	r0, [r5, #77]	; 0x4d
    6864:	20fe      	movs	r0, #254	; 0xfe
    6866:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
    686a:	207f      	movs	r0, #127	; 0x7f
    686c:	7268      	strb	r0, [r5, #9]
    686e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6872:	f04f 0800 	mov.w	r8, #0
    6876:	f8a4 8106 	strh.w	r8, [r4, #262]	; 0x106
    687a:	f884 80fb 	strb.w	r8, [r4, #251]	; 0xfb
    687e:	6861      	ldr	r1, [r4, #4]
    6880:	4814      	ldr	r0, [pc, #80]	; (68d4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
    6882:	460a      	mov	r2, r1
    6884:	4408      	add	r0, r1
    6886:	fbb0 f0f1 	udiv	r0, r0, r1
    688a:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
    688e:	f640 30b8 	movw	r0, #3000	; 0xbb8
    6892:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    6896:	8963      	ldrh	r3, [r4, #10]
    6898:	4628      	mov	r0, r5
    689a:	f000 f81d 	bl	68d8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    689e:	4639      	mov	r1, r7
    68a0:	4630      	mov	r0, r6
    68a2:	f007 fa20 	bl	dce6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    68a6:	f005 fe94 	bl	c5d2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    68aa:	b118      	cbz	r0, 68b4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa0>
    68ac:	68e0      	ldr	r0, [r4, #12]
    68ae:	f7ff ff7b 	bl	67a8 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ>
    68b2:	b110      	cbz	r0, 68ba <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa6>
    68b4:	f884 816c 	strb.w	r8, [r4, #364]	; 0x16c
    68b8:	e7d9      	b.n	686e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    68ba:	f884 916c 	strb.w	r9, [r4, #364]	; 0x16c
    68be:	e7d6      	b.n	686e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    68c0:	6841      	ldr	r1, [r0, #4]
    68c2:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
    68c6:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    68ca:	4628      	mov	r0, r5
    68cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    68d0:	f000 b802 	b.w	68d8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    68d4:	01c9c37f 	.word	0x01c9c37f
    68d8:	b530      	push	{r4, r5, lr}
    68da:	2400      	movs	r4, #0
    68dc:	8684      	strh	r4, [r0, #52]	; 0x34
    68de:	8f04      	ldrh	r4, [r0, #56]	; 0x38
    68e0:	4d13      	ldr	r5, [pc, #76]	; (6930 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x11c>)
    68e2:	434c      	muls	r4, r1
    68e4:	fbb4 f4f2 	udiv	r4, r4, r2
    68e8:	8704      	strh	r4, [r0, #56]	; 0x38
    68ea:	f242 7410 	movw	r4, #10000	; 0x2710
    68ee:	4363      	muls	r3, r4
    68f0:	fbb3 f3f2 	udiv	r3, r3, r2
    68f4:	1c5b      	adds	r3, r3, #1
    68f6:	b29b      	uxth	r3, r3
    68f8:	fb03 f402 	mul.w	r4, r3, r2
    68fc:	86c3      	strh	r3, [r0, #54]	; 0x36
    68fe:	42ac      	cmp	r4, r5
    6900:	d901      	bls.n	6906 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
    6902:	1e5b      	subs	r3, r3, #1
    6904:	86c3      	strh	r3, [r0, #54]	; 0x36
    6906:	4b0b      	ldr	r3, [pc, #44]	; (6934 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    6908:	f240 2471 	movw	r4, #625	; 0x271
    690c:	fbb3 f3f2 	udiv	r3, r3, r2
    6910:	1c5b      	adds	r3, r3, #1
    6912:	8783      	strh	r3, [r0, #60]	; 0x3c
    6914:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    6916:	4363      	muls	r3, r4
    6918:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    691c:	1e5b      	subs	r3, r3, #1
    691e:	fbb3 f3f2 	udiv	r3, r3, r2
    6922:	62c3      	str	r3, [r0, #44]	; 0x2c
    6924:	6a83      	ldr	r3, [r0, #40]	; 0x28
    6926:	434b      	muls	r3, r1
    6928:	fbb3 f1f2 	udiv	r1, r3, r2
    692c:	6281      	str	r1, [r0, #40]	; 0x28
    692e:	bd30      	pop	{r4, r5, pc}
    6930:	01e84800 	.word	0x01e84800
    6934:	02625a00 	.word	0x02625a00
    6938:	b570      	push	{r4, r5, r6, lr}
    693a:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    693e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    6942:	2401      	movs	r4, #1
    6944:	fb03 2101 	mla	r1, r3, r1, r2
    6948:	2225      	movs	r2, #37	; 0x25
    694a:	fbb1 f3f2 	udiv	r3, r1, r2
    694e:	fb02 1113 	mls	r1, r2, r3, r1
    6952:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    6956:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    695a:	f001 0307 	and.w	r3, r1, #7
    695e:	7d92      	ldrb	r2, [r2, #22]
    6960:	fa04 f303 	lsl.w	r3, r4, r3
    6964:	421a      	tst	r2, r3
    6966:	d003      	beq.n	6970 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x15c>
    6968:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    696c:	2000      	movs	r0, #0
    696e:	bd70      	pop	{r4, r5, r6, pc}
    6970:	f890 2020 	ldrb.w	r2, [r0, #32]
    6974:	fbb1 f3f2 	udiv	r3, r1, r2
    6978:	fb02 1113 	mls	r1, r2, r3, r1
    697c:	1c49      	adds	r1, r1, #1
    697e:	b2c9      	uxtb	r1, r1
    6980:	2300      	movs	r3, #0
    6982:	18c5      	adds	r5, r0, r3
    6984:	7eea      	ldrb	r2, [r5, #27]
    6986:	428a      	cmp	r2, r1
    6988:	d311      	bcc.n	69ae <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x19a>
    698a:	f895 5016 	ldrb.w	r5, [r5, #22]
    698e:	2200      	movs	r2, #0
    6990:	fa04 f602 	lsl.w	r6, r4, r2
    6994:	4235      	tst	r5, r6
    6996:	d001      	beq.n	699c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x188>
    6998:	1e49      	subs	r1, r1, #1
    699a:	b2c9      	uxtb	r1, r1
    699c:	b121      	cbz	r1, 69a8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x194>
    699e:	1c52      	adds	r2, r2, #1
    69a0:	b2d2      	uxtb	r2, r2
    69a2:	2a08      	cmp	r2, #8
    69a4:	d3f4      	bcc.n	6990 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x17c>
    69a6:	e004      	b.n	69b2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x19e>
    69a8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    69ac:	e7dc      	b.n	6968 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x154>
    69ae:	1a89      	subs	r1, r1, r2
    69b0:	b2c9      	uxtb	r1, r1
    69b2:	1c5b      	adds	r3, r3, #1
    69b4:	b2db      	uxtb	r3, r3
    69b6:	2b05      	cmp	r3, #5
    69b8:	d3e3      	bcc.n	6982 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x16e>
    69ba:	201f      	movs	r0, #31
    69bc:	bd70      	pop	{r4, r5, r6, pc}
	...

000069c0 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    69c0:	7841      	ldrb	r1, [r0, #1]
    69c2:	b141      	cbz	r1, 69d6 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    69c4:	78c0      	ldrb	r0, [r0, #3]
    69c6:	2819      	cmp	r0, #25
    69c8:	d203      	bcs.n	69d2 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    69ca:	4a04      	ldr	r2, [pc, #16]	; (69dc <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    69cc:	5c10      	ldrb	r0, [r2, r0]
    69ce:	4288      	cmp	r0, r1
    69d0:	d101      	bne.n	69d6 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    69d2:	2001      	movs	r0, #1
    69d4:	4770      	bx	lr
    69d6:	2000      	movs	r0, #0
    69d8:	4770      	bx	lr
    69da:	0000      	.short	0x0000
    69dc:	0001008c 	.word	0x0001008c

000069e0 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    69e0:	b50c      	push	{r2, r3, lr}
    69e2:	a20b      	add	r2, pc, #44	; (adr r2, 6a10 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    69e4:	e9d2 1200 	ldrd	r1, r2, [r2]
    69e8:	e9cd 1200 	strd	r1, r2, [sp]
    69ec:	7901      	ldrb	r1, [r0, #4]
    69ee:	7940      	ldrb	r0, [r0, #5]
    69f0:	f001 0207 	and.w	r2, r1, #7
    69f4:	4669      	mov	r1, sp
    69f6:	f81d 2002 	ldrb.w	r2, [sp, r2]
    69fa:	2a01      	cmp	r2, #1
    69fc:	d804      	bhi.n	6a08 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    69fe:	f000 0007 	and.w	r0, r0, #7
    6a02:	5c08      	ldrb	r0, [r1, r0]
    6a04:	2801      	cmp	r0, #1
    6a06:	d901      	bls.n	6a0c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    6a08:	2000      	movs	r0, #0
    6a0a:	bd0c      	pop	{r2, r3, pc}
    6a0c:	2001      	movs	r0, #1
    6a0e:	bd0c      	pop	{r2, r3, pc}
    6a10:	02010100 	.word	0x02010100
    6a14:	03020201 	.word	0x03020201

00006a18 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    6a18:	b510      	push	{r4, lr}
    6a1a:	2201      	movs	r2, #1
    6a1c:	70c1      	strb	r1, [r0, #3]
    6a1e:	2919      	cmp	r1, #25
    6a20:	d202      	bcs.n	6a28 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    6a22:	4a06      	ldr	r2, [pc, #24]	; (6a3c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    6a24:	5c52      	ldrb	r2, [r2, r1]
    6a26:	e006      	b.n	6a36 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6a28:	29ff      	cmp	r1, #255	; 0xff
    6a2a:	d004      	beq.n	6a36 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6a2c:	f44f 716e 	mov.w	r1, #952	; 0x3b8
    6a30:	202a      	movs	r0, #42	; 0x2a
    6a32:	f7fd ffdd 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a36:	7042      	strb	r2, [r0, #1]
    6a38:	bd10      	pop	{r4, pc}
    6a3a:	0000      	.short	0x0000
    6a3c:	0001008c 	.word	0x0001008c

00006a40 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    6a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6a44:	ea5f 0900 	movs.w	r9, r0
    6a48:	d006      	beq.n	6a58 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x18>
    6a4a:	4d21      	ldr	r5, [pc, #132]	; (6ad0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x90>)
    6a4c:	f105 0010 	add.w	r0, r5, #16
    6a50:	7b69      	ldrb	r1, [r5, #13]
    6a52:	4682      	mov	sl, r0
    6a54:	b119      	cbz	r1, 6a5e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x1e>
    6a56:	e00b      	b.n	6a70 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    6a58:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    6a5c:	e005      	b.n	6a6a <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2a>
    6a5e:	2100      	movs	r1, #0
    6a60:	f007 fb2a 	bl	e0b8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    6a64:	b120      	cbz	r0, 6a70 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    6a66:	f240 31d3 	movw	r1, #979	; 0x3d3
    6a6a:	202b      	movs	r0, #43	; 0x2b
    6a6c:	f7fd ffc0 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a70:	8a2e      	ldrh	r6, [r5, #16]
    6a72:	2000      	movs	r0, #0
    6a74:	f7fe f9c2 	bl	4dfc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6a78:	4f16      	ldr	r7, [pc, #88]	; (6ad4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x94>)
    6a7a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 6ad8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x98>
    6a7e:	4604      	mov	r4, r0
    6a80:	6838      	ldr	r0, [r7, #0]
    6a82:	b158      	cbz	r0, 6a9c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    6a84:	8a28      	ldrh	r0, [r5, #16]
    6a86:	42a0      	cmp	r0, r4
    6a88:	d308      	bcc.n	6a9c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    6a8a:	1b00      	subs	r0, r0, r4
    6a8c:	b2c0      	uxtb	r0, r0
    6a8e:	2101      	movs	r1, #1
    6a90:	f006 fdcd 	bl	d62e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6a94:	b148      	cbz	r0, 6aaa <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    6a96:	4649      	mov	r1, r9
    6a98:	683a      	ldr	r2, [r7, #0]
    6a9a:	e004      	b.n	6aa6 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x66>
    6a9c:	f8d8 2000 	ldr.w	r2, [r8]
    6aa0:	b11a      	cbz	r2, 6aaa <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    6aa2:	8a28      	ldrh	r0, [r5, #16]
    6aa4:	4649      	mov	r1, r9
    6aa6:	4790      	blx	r2
    6aa8:	b968      	cbnz	r0, 6ac6 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    6aaa:	2100      	movs	r1, #0
    6aac:	4650      	mov	r0, sl
    6aae:	f007 fb03 	bl	e0b8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    6ab2:	b910      	cbnz	r0, 6aba <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x7a>
    6ab4:	8a28      	ldrh	r0, [r5, #16]
    6ab6:	42b0      	cmp	r0, r6
    6ab8:	d1e2      	bne.n	6a80 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x40>
    6aba:	4808      	ldr	r0, [pc, #32]	; (6adc <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x9c>)
    6abc:	6801      	ldr	r1, [r0, #0]
    6abe:	b129      	cbz	r1, 6acc <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    6ac0:	4648      	mov	r0, r9
    6ac2:	4788      	blx	r1
    6ac4:	b110      	cbz	r0, 6acc <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    6ac6:	2001      	movs	r0, #1
    6ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6acc:	2000      	movs	r0, #0
    6ace:	e7fb      	b.n	6ac8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    6ad0:	20000f80 	.word	0x20000f80
    6ad4:	2000023c 	.word	0x2000023c
    6ad8:	20000240 	.word	0x20000240
    6adc:	20000248 	.word	0x20000248

00006ae0 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI>:
    6ae0:	b570      	push	{r4, r5, r6, lr}
    6ae2:	0005      	movs	r5, r0
    6ae4:	460c      	mov	r4, r1
    6ae6:	d02e      	beq.n	6b46 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    6ae8:	4818      	ldr	r0, [pc, #96]	; (6b4c <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x6c>)
    6aea:	6802      	ldr	r2, [r0, #0]
    6aec:	b35a      	cbz	r2, 6b46 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    6aee:	4628      	mov	r0, r5
    6af0:	4790      	blx	r2
    6af2:	b340      	cbz	r0, 6b46 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    6af4:	7820      	ldrb	r0, [r4, #0]
    6af6:	2811      	cmp	r0, #17
    6af8:	d002      	beq.n	6b00 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x20>
    6afa:	2814      	cmp	r0, #20
    6afc:	d003      	beq.n	6b06 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x26>
    6afe:	e020      	b.n	6b42 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6b00:	7920      	ldrb	r0, [r4, #4]
    6b02:	b1f0      	cbz	r0, 6b42 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6b04:	e00a      	b.n	6b1c <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    6b06:	7920      	ldrb	r0, [r4, #4]
    6b08:	b120      	cbz	r0, 6b14 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x34>
    6b0a:	4628      	mov	r0, r5
    6b0c:	f007 fccc 	bl	e4a8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6b10:	b120      	cbz	r0, 6b1c <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    6b12:	e016      	b.n	6b42 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6b14:	490e      	ldr	r1, [pc, #56]	; (6b50 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x70>)
    6b16:	2000      	movs	r0, #0
    6b18:	7348      	strb	r0, [r1, #13]
    6b1a:	e012      	b.n	6b42 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6b1c:	88e4      	ldrh	r4, [r4, #6]
    6b1e:	2100      	movs	r1, #0
    6b20:	4620      	mov	r0, r4
    6b22:	f006 fd84 	bl	d62e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6b26:	b160      	cbz	r0, 6b42 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6b28:	8800      	ldrh	r0, [r0, #0]
    6b2a:	f006 fdf9 	bl	d720 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6b2e:	2100      	movs	r1, #0
    6b30:	4620      	mov	r0, r4
    6b32:	f7fe f9ff 	bl	4f34 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6b36:	b120      	cbz	r0, 6b42 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6b38:	f44f 719a 	mov.w	r1, #308	; 0x134
    6b3c:	202b      	movs	r0, #43	; 0x2b
    6b3e:	f7fd ff57 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b42:	2001      	movs	r0, #1
    6b44:	bd70      	pop	{r4, r5, r6, pc}
    6b46:	2000      	movs	r0, #0
    6b48:	bd70      	pop	{r4, r5, r6, pc}
    6b4a:	0000      	.short	0x0000
    6b4c:	20000238 	.word	0x20000238
    6b50:	20000f80 	.word	0x20000f80

00006b54 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    6b54:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b58:	b087      	sub	sp, #28
    6b5a:	460c      	mov	r4, r1
    6b5c:	a902      	add	r1, sp, #8
    6b5e:	9807      	ldr	r0, [sp, #28]
    6b60:	f006 fe9e 	bl	d8a0 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6b64:	2800      	cmp	r0, #0
    6b66:	d17d      	bne.n	6c64 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    6b68:	f8df 9120 	ldr.w	r9, [pc, #288]	; 6c8c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x138>
    6b6c:	f04f 0a01 	mov.w	sl, #1
    6b70:	4680      	mov	r8, r0
    6b72:	9803      	ldr	r0, [sp, #12]
    6b74:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    6b78:	2800      	cmp	r0, #0
    6b7a:	d00c      	beq.n	6b96 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    6b7c:	f8d9 2000 	ldr.w	r2, [r9]
    6b80:	b162      	cbz	r2, 6b9c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    6b82:	4621      	mov	r1, r4
    6b84:	9807      	ldr	r0, [sp, #28]
    6b86:	4790      	blx	r2
    6b88:	b140      	cbz	r0, 6b9c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    6b8a:	4620      	mov	r0, r4
    6b8c:	f000 f91a 	bl	6dc4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe0>
    6b90:	2800      	cmp	r0, #0
    6b92:	d1ee      	bne.n	6b72 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1e>
    6b94:	2001      	movs	r0, #1
    6b96:	b009      	add	sp, #36	; 0x24
    6b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6b9c:	9d03      	ldr	r5, [sp, #12]
    6b9e:	f895 012c 	ldrb.w	r0, [r5, #300]	; 0x12c
    6ba2:	3568      	adds	r5, #104	; 0x68
    6ba4:	b950      	cbnz	r0, 6bbc <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    6ba6:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    6baa:	f88d 0004 	strb.w	r0, [sp, #4]
    6bae:	9801      	ldr	r0, [sp, #4]
    6bb0:	9001      	str	r0, [sp, #4]
    6bb2:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6bb6:	b108      	cbz	r0, 6bbc <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    6bb8:	2001      	movs	r0, #1
    6bba:	e000      	b.n	6bbe <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    6bbc:	2000      	movs	r0, #0
    6bbe:	4683      	mov	fp, r0
    6bc0:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
    6bc4:	b1c0      	cbz	r0, 6bf8 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    6bc6:	f895 0046 	ldrb.w	r0, [r5, #70]	; 0x46
    6bca:	0780      	lsls	r0, r0, #30
    6bcc:	d514      	bpl.n	6bf8 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    6bce:	f884 8001 	strb.w	r8, [r4, #1]
    6bd2:	f884 a000 	strb.w	sl, [r4]
    6bd6:	f884 8004 	strb.w	r8, [r4, #4]
    6bda:	9907      	ldr	r1, [sp, #28]
    6bdc:	f8a4 1005 	strh.w	r1, [r4, #5]
    6be0:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
    6be4:	71e1      	strb	r1, [r4, #7]
    6be6:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
    6bea:	8121      	strh	r1, [r4, #8]
    6bec:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    6bf0:	8161      	strh	r1, [r4, #10]
    6bf2:	f885 8045 	strb.w	r8, [r5, #69]	; 0x45
    6bf6:	e7c8      	b.n	6b8a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    6bf8:	9807      	ldr	r0, [sp, #28]
    6bfa:	f7fe fb43 	bl	5284 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6bfe:	0007      	movs	r7, r0
    6c00:	d00d      	beq.n	6c1e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xca>
    6c02:	f006 fb22 	bl	d24a <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    6c06:	0006      	movs	r6, r0
    6c08:	d015      	beq.n	6c36 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xe2>
    6c0a:	f884 8001 	strb.w	r8, [r4, #1]
    6c0e:	200d      	movs	r0, #13
    6c10:	7020      	strb	r0, [r4, #0]
    6c12:	9807      	ldr	r0, [sp, #28]
    6c14:	80e0      	strh	r0, [r4, #6]
    6c16:	8126      	strh	r6, [r4, #8]
    6c18:	f884 a004 	strb.w	sl, [r4, #4]
    6c1c:	e007      	b.n	6c2e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xda>
    6c1e:	f240 213a 	movw	r1, #570	; 0x23a
    6c22:	e02d      	b.n	6c80 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x12c>
    6c24:	2100      	movs	r1, #0
    6c26:	4638      	mov	r0, r7
    6c28:	460a      	mov	r2, r1
    6c2a:	f006 fc1c 	bl	d466 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6c2e:	1e76      	subs	r6, r6, #1
    6c30:	b2b6      	uxth	r6, r6
    6c32:	d2f7      	bcs.n	6c24 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd0>
    6c34:	e7a9      	b.n	6b8a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    6c36:	9807      	ldr	r0, [sp, #28]
    6c38:	f7fe fb0e 	bl	5258 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6c3c:	b1f0      	cbz	r0, 6c7c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x128>
    6c3e:	f1bb 0f00 	cmp.w	fp, #0
    6c42:	d020      	beq.n	6c86 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    6c44:	f006 fa39 	bl	d0ba <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6c48:	b160      	cbz	r0, 6c64 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    6c4a:	9807      	ldr	r0, [sp, #28]
    6c4c:	f006 fd68 	bl	d720 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6c50:	2100      	movs	r1, #0
    6c52:	9807      	ldr	r0, [sp, #28]
    6c54:	f7fe f96e 	bl	4f34 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6c58:	f884 8001 	strb.w	r8, [r4, #1]
    6c5c:	210a      	movs	r1, #10
    6c5e:	4640      	mov	r0, r8
    6c60:	7021      	strb	r1, [r4, #0]
    6c62:	e000      	b.n	6c66 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x112>
    6c64:	e00f      	b.n	6c86 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    6c66:	f884 8004 	strb.w	r8, [r4, #4]
    6c6a:	9907      	ldr	r1, [sp, #28]
    6c6c:	f8a4 1005 	strh.w	r1, [r4, #5]
    6c70:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    6c74:	71e1      	strb	r1, [r4, #7]
    6c76:	3524      	adds	r5, #36	; 0x24
    6c78:	7028      	strb	r0, [r5, #0]
    6c7a:	e786      	b.n	6b8a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    6c7c:	f44f 7116 	mov.w	r1, #600	; 0x258
    6c80:	202b      	movs	r0, #43	; 0x2b
    6c82:	f7fd feb5 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c86:	2000      	movs	r0, #0
    6c88:	e785      	b.n	6b96 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    6c8a:	0000      	.short	0x0000
    6c8c:	20000244 	.word	0x20000244

00006c90 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    6c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c94:	4c12      	ldr	r4, [pc, #72]	; (6ce0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6c96:	4607      	mov	r7, r0
    6c98:	460e      	mov	r6, r1
    6c9a:	7de0      	ldrb	r0, [r4, #23]
    6c9c:	b110      	cbz	r0, 6ca4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    6c9e:	8b20      	ldrh	r0, [r4, #24]
    6ca0:	2800      	cmp	r0, #0
    6ca2:	d012      	beq.n	6cca <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6ca4:	480e      	ldr	r0, [pc, #56]	; (6ce0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6ca6:	300e      	adds	r0, #14
    6ca8:	4680      	mov	r8, r0
    6caa:	f007 f9af 	bl	e00c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6cae:	b9a8      	cbnz	r0, 6cdc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6cb0:	89e5      	ldrh	r5, [r4, #14]
    6cb2:	89e0      	ldrh	r0, [r4, #14]
    6cb4:	4632      	mov	r2, r6
    6cb6:	4639      	mov	r1, r7
    6cb8:	f007 f9b7 	bl	e02a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x18>
    6cbc:	b138      	cbz	r0, 6cce <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    6cbe:	7de0      	ldrb	r0, [r4, #23]
    6cc0:	b110      	cbz	r0, 6cc8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    6cc2:	8b20      	ldrh	r0, [r4, #24]
    6cc4:	1e40      	subs	r0, r0, #1
    6cc6:	8320      	strh	r0, [r4, #24]
    6cc8:	2001      	movs	r0, #1
    6cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6cce:	4640      	mov	r0, r8
    6cd0:	f007 f99c 	bl	e00c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6cd4:	b910      	cbnz	r0, 6cdc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6cd6:	89e0      	ldrh	r0, [r4, #14]
    6cd8:	42a8      	cmp	r0, r5
    6cda:	d1ea      	bne.n	6cb2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    6cdc:	2000      	movs	r0, #0
    6cde:	e7f4      	b.n	6cca <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6ce0:	20000f80 	.word	0x20000f80

00006ce4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    6ce4:	b510      	push	{r4, lr}
    6ce6:	7901      	ldrb	r1, [r0, #4]
    6ce8:	b119      	cbz	r1, 6cf2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    6cea:	2901      	cmp	r1, #1
    6cec:	d006      	beq.n	6cfc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    6cee:	2000      	movs	r0, #0
    6cf0:	bd10      	pop	{r4, pc}
    6cf2:	8842      	ldrh	r2, [r0, #2]
    6cf4:	6883      	ldr	r3, [r0, #8]
    6cf6:	8800      	ldrh	r0, [r0, #0]
    6cf8:	2102      	movs	r1, #2
    6cfa:	e003      	b.n	6d04 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    6cfc:	8842      	ldrh	r2, [r0, #2]
    6cfe:	6883      	ldr	r3, [r0, #8]
    6d00:	8800      	ldrh	r0, [r0, #0]
    6d02:	2101      	movs	r1, #1
    6d04:	f000 f808 	bl	6d18 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>
    6d08:	b910      	cbnz	r0, 6d10 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2c>
    6d0a:	4902      	ldr	r1, [pc, #8]	; (6d14 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>)
    6d0c:	2001      	movs	r0, #1
    6d0e:	7008      	strb	r0, [r1, #0]
    6d10:	2001      	movs	r0, #1
    6d12:	bd10      	pop	{r4, pc}
    6d14:	20000f80 	.word	0x20000f80
    6d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6d1c:	468a      	mov	sl, r1
    6d1e:	4699      	mov	r9, r3
    6d20:	4615      	mov	r5, r2
    6d22:	4604      	mov	r4, r0
    6d24:	a901      	add	r1, sp, #4
    6d26:	f006 fdbb 	bl	d8a0 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6d2a:	bbe0      	cbnz	r0, 6da6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc2>
    6d2c:	9f02      	ldr	r7, [sp, #8]
    6d2e:	f04f 0800 	mov.w	r8, #0
    6d32:	3768      	adds	r7, #104	; 0x68
    6d34:	b18d      	cbz	r5, 6d5a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x76>
    6d36:	4620      	mov	r0, r4
    6d38:	f7fe faa4 	bl	5284 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6d3c:	0004      	movs	r4, r0
    6d3e:	d00f      	beq.n	6d60 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x7c>
    6d40:	4629      	mov	r1, r5
    6d42:	f006 fac1 	bl	d2c8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    6d46:	0006      	movs	r6, r0
    6d48:	d003      	beq.n	6d52 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    6d4a:	481d      	ldr	r0, [pc, #116]	; (6dc0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xdc>)
    6d4c:	8880      	ldrh	r0, [r0, #4]
    6d4e:	42a8      	cmp	r0, r5
    6d50:	d208      	bcs.n	6d64 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x80>
    6d52:	2000      	movs	r0, #0
    6d54:	b004      	add	sp, #16
    6d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6d5a:	2001      	movs	r0, #1
    6d5c:	7538      	strb	r0, [r7, #20]
    6d5e:	e029      	b.n	6db4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    6d60:	2189      	movs	r1, #137	; 0x89
    6d62:	e02a      	b.n	6dba <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd6>
    6d64:	4620      	mov	r0, r4
    6d66:	4631      	mov	r1, r6
    6d68:	aa03      	add	r2, sp, #12
    6d6a:	f006 faa6 	bl	d2ba <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6d6e:	9803      	ldr	r0, [sp, #12]
    6d70:	f8a0 8000 	strh.w	r8, [r0]
    6d74:	f880 8002 	strb.w	r8, [r0, #2]
    6d78:	7d39      	ldrb	r1, [r7, #20]
    6d7a:	b109      	cbz	r1, 6d80 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x9c>
    6d7c:	f04f 0a02 	mov.w	sl, #2
    6d80:	4651      	mov	r1, sl
    6d82:	f007 f89a 	bl	deba <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6d86:	4631      	mov	r1, r6
    6d88:	2603      	movs	r6, #3
    6d8a:	4620      	mov	r0, r4
    6d8c:	464a      	mov	r2, r9
    6d8e:	462b      	mov	r3, r5
    6d90:	9600      	str	r6, [sp, #0]
    6d92:	f006 f97b 	bl	d08c <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    6d96:	4620      	mov	r0, r4
    6d98:	4629      	mov	r1, r5
    6d9a:	f006 fa32 	bl	d202 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    6d9e:	b158      	cbz	r0, 6db8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd4>
    6da0:	4644      	mov	r4, r8
    6da2:	a801      	add	r0, sp, #4
    6da4:	e000      	b.n	6da8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc4>
    6da6:	e005      	b.n	6db4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    6da8:	f007 f933 	bl	e012 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    6dac:	9802      	ldr	r0, [sp, #8]
    6dae:	f8a0 40f2 	strh.w	r4, [r0, #242]	; 0xf2
    6db2:	753c      	strb	r4, [r7, #20]
    6db4:	2001      	movs	r0, #1
    6db6:	e7cd      	b.n	6d54 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x70>
    6db8:	219f      	movs	r1, #159	; 0x9f
    6dba:	202b      	movs	r0, #43	; 0x2b
    6dbc:	f7fd fe18 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dc0:	20000f80 	.word	0x20000f80
    6dc4:	b510      	push	{r4, lr}
    6dc6:	492c      	ldr	r1, [pc, #176]	; (6e78 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x194>)
    6dc8:	b086      	sub	sp, #24
    6dca:	7d8a      	ldrb	r2, [r1, #22]
    6dcc:	7801      	ldrb	r1, [r0, #0]
    6dce:	07d3      	lsls	r3, r2, #31
    6dd0:	d101      	bne.n	6dd6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf2>
    6dd2:	2919      	cmp	r1, #25
    6dd4:	d004      	beq.n	6de0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xfc>
    6dd6:	2918      	cmp	r1, #24
    6dd8:	d01e      	beq.n	6e18 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x134>
    6dda:	2912      	cmp	r1, #18
    6ddc:	d045      	beq.n	6e6a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x186>
    6dde:	e049      	b.n	6e74 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6de0:	8880      	ldrh	r0, [r0, #4]
    6de2:	f8ad 0000 	strh.w	r0, [sp]
    6de6:	a902      	add	r1, sp, #8
    6de8:	f006 fd5a 	bl	d8a0 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6dec:	b108      	cbz	r0, 6df2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x10e>
    6dee:	2158      	movs	r1, #88	; 0x58
    6df0:	e035      	b.n	6e5e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    6df2:	9803      	ldr	r0, [sp, #12]
    6df4:	f810 1f5e 	ldrb.w	r1, [r0, #94]!
    6df8:	f88d 1002 	strb.w	r1, [sp, #2]
    6dfc:	7841      	ldrb	r1, [r0, #1]
    6dfe:	f88d 1003 	strb.w	r1, [sp, #3]
    6e02:	8840      	ldrh	r0, [r0, #2]
    6e04:	f8ad 0004 	strh.w	r0, [sp, #4]
    6e08:	2102      	movs	r1, #2
    6e0a:	4668      	mov	r0, sp
    6e0c:	f008 fd22 	bl	f854 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    6e10:	b340      	cbz	r0, 6e64 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    6e12:	f240 114d 	movw	r1, #333	; 0x14d
    6e16:	e022      	b.n	6e5e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    6e18:	0791      	lsls	r1, r2, #30
    6e1a:	d42b      	bmi.n	6e74 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6e1c:	8884      	ldrh	r4, [r0, #4]
    6e1e:	a903      	add	r1, sp, #12
    6e20:	4620      	mov	r0, r4
    6e22:	f008 fb82 	bl	f52a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    6e26:	b110      	cbz	r0, 6e2e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14a>
    6e28:	f44f 71aa 	mov.w	r1, #340	; 0x154
    6e2c:	e017      	b.n	6e5e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    6e2e:	f8ad 4000 	strh.w	r4, [sp]
    6e32:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    6e36:	f8ad 0002 	strh.w	r0, [sp, #2]
    6e3a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6e3e:	f8ad 0004 	strh.w	r0, [sp, #4]
    6e42:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    6e46:	f8ad 0006 	strh.w	r0, [sp, #6]
    6e4a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6e4e:	f8ad 0008 	strh.w	r0, [sp, #8]
    6e52:	4668      	mov	r0, sp
    6e54:	f008 fc06 	bl	f664 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    6e58:	b120      	cbz	r0, 6e64 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    6e5a:	f240 115d 	movw	r1, #349	; 0x15d
    6e5e:	202b      	movs	r0, #43	; 0x2b
    6e60:	f7fd fdc6 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e64:	2001      	movs	r0, #1
    6e66:	b006      	add	sp, #24
    6e68:	bd10      	pop	{r4, pc}
    6e6a:	0751      	lsls	r1, r2, #29
    6e6c:	d402      	bmi.n	6e74 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6e6e:	7b80      	ldrb	r0, [r0, #14]
    6e70:	07c0      	lsls	r0, r0, #31
    6e72:	d0f7      	beq.n	6e64 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    6e74:	2000      	movs	r0, #0
    6e76:	e7f6      	b.n	6e66 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x182>
    6e78:	20000f80 	.word	0x20000f80

00006e7c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    6e7c:	b570      	push	{r4, r5, r6, lr}
    6e7e:	4604      	mov	r4, r0
    6e80:	7c00      	ldrb	r0, [r0, #16]
    6e82:	b300      	cbz	r0, 6ec6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    6e84:	2802      	cmp	r0, #2
    6e86:	d01e      	beq.n	6ec6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    6e88:	f05f 0001 	movs.w	r0, #1
    6e8c:	f104 0149 	add.w	r1, r4, #73	; 0x49
    6e90:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    6e94:	460d      	mov	r5, r1
    6e96:	b1c0      	cbz	r0, 6eca <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    6e98:	7de0      	ldrb	r0, [r4, #23]
    6e9a:	b1f0      	cbz	r0, 6eda <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    6e9c:	f8d4 0011 	ldr.w	r0, [r4, #17]
    6ea0:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    6ea4:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    6ea8:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    6eac:	7c20      	ldrb	r0, [r4, #16]
    6eae:	f007 fa69 	bl	e384 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    6eb2:	7620      	strb	r0, [r4, #24]
    6eb4:	2008      	movs	r0, #8
    6eb6:	7660      	strb	r0, [r4, #25]
    6eb8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6ebc:	4629      	mov	r1, r5
    6ebe:	f007 fa4d 	bl	e35c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa4>
    6ec2:	b9a8      	cbnz	r0, 6ef0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    6ec4:	e00e      	b.n	6ee4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    6ec6:	2000      	movs	r0, #0
    6ec8:	e7e0      	b.n	6e8c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    6eca:	2000      	movs	r0, #0
    6ecc:	f7fe fc52 	bl	5774 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    6ed0:	2800      	cmp	r0, #0
    6ed2:	d1eb      	bne.n	6eac <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    6ed4:	f240 417f 	movw	r1, #1151	; 0x47f
    6ed8:	e001      	b.n	6ede <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    6eda:	f240 4183 	movw	r1, #1155	; 0x483
    6ede:	202d      	movs	r0, #45	; 0x2d
    6ee0:	f7fd fd86 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ee4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6ee8:	4629      	mov	r1, r5
    6eea:	f007 fa40 	bl	e36e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    6eee:	b100      	cbz	r0, 6ef2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    6ef0:	2001      	movs	r0, #1
    6ef2:	76a0      	strb	r0, [r4, #26]
    6ef4:	7e20      	ldrb	r0, [r4, #24]
    6ef6:	b910      	cbnz	r0, 6efe <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x82>
    6ef8:	78a0      	ldrb	r0, [r4, #2]
    6efa:	0740      	lsls	r0, r0, #29
    6efc:	d506      	bpl.n	6f0c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x90>
    6efe:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    6f02:	f104 0150 	add.w	r1, r4, #80	; 0x50
    6f06:	f006 fc88 	bl	d81a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6f0a:	7660      	strb	r0, [r4, #25]
    6f0c:	2500      	movs	r5, #0
    6f0e:	6425      	str	r5, [r4, #64]	; 0x40
    6f10:	f005 fa15 	bl	c33e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6f14:	6460      	str	r0, [r4, #68]	; 0x44
    6f16:	2100      	movs	r1, #0
    6f18:	4620      	mov	r0, r4
    6f1a:	f007 fb81 	bl	e620 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    6f1e:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
    6f22:	78a0      	ldrb	r0, [r4, #2]
    6f24:	0740      	lsls	r0, r0, #29
    6f26:	d508      	bpl.n	6f3a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    6f28:	7e20      	ldrb	r0, [r4, #24]
    6f2a:	2800      	cmp	r0, #0
    6f2c:	d005      	beq.n	6f3a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    6f2e:	4620      	mov	r0, r4
    6f30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6f34:	2100      	movs	r1, #0
    6f36:	f000 bdcd 	b.w	7ad4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x600>
    6f3a:	bd70      	pop	{r4, r5, r6, pc}

00006f3c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    6f3c:	b508      	push	{r3, lr}
    6f3e:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
    6f42:	f88d 2000 	strb.w	r2, [sp]
    6f46:	9a00      	ldr	r2, [sp, #0]
    6f48:	9200      	str	r2, [sp, #0]
    6f4a:	f89d 3000 	ldrb.w	r3, [sp]
    6f4e:	2200      	movs	r2, #0
    6f50:	b163      	cbz	r3, 6f6c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    6f52:	704a      	strb	r2, [r1, #1]
    6f54:	2317      	movs	r3, #23
    6f56:	700b      	strb	r3, [r1, #0]
    6f58:	f850 3fa9 	ldr.w	r3, [r0, #169]!
    6f5c:	604b      	str	r3, [r1, #4]
    6f5e:	6843      	ldr	r3, [r0, #4]
    6f60:	608b      	str	r3, [r1, #8]
    6f62:	7a03      	ldrb	r3, [r0, #8]
    6f64:	730b      	strb	r3, [r1, #12]
    6f66:	f800 2c01 	strb.w	r2, [r0, #-1]
    6f6a:	e03b      	b.n	6fe4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6f6c:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    6f70:	f88d 3000 	strb.w	r3, [sp]
    6f74:	9b00      	ldr	r3, [sp, #0]
    6f76:	9300      	str	r3, [sp, #0]
    6f78:	f89d 3000 	ldrb.w	r3, [sp]
    6f7c:	b143      	cbz	r3, 6f90 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    6f7e:	704a      	strb	r2, [r1, #1]
    6f80:	2305      	movs	r3, #5
    6f82:	700b      	strb	r3, [r1, #0]
    6f84:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    6f88:	604b      	str	r3, [r1, #4]
    6f8a:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    6f8e:	e029      	b.n	6fe4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6f90:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
    6f94:	f88d 3000 	strb.w	r3, [sp]
    6f98:	9b00      	ldr	r3, [sp, #0]
    6f9a:	9300      	str	r3, [sp, #0]
    6f9c:	f89d 3000 	ldrb.w	r3, [sp]
    6fa0:	b11b      	cbz	r3, 6faa <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    6fa2:	bf00      	nop
    6fa4:	f007 fb13 	bl	e5ce <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    6fa8:	e01c      	b.n	6fe4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6faa:	f890 309a 	ldrb.w	r3, [r0, #154]	; 0x9a
    6fae:	f88d 3000 	strb.w	r3, [sp]
    6fb2:	9b00      	ldr	r3, [sp, #0]
    6fb4:	9300      	str	r3, [sp, #0]
    6fb6:	f89d 3000 	ldrb.w	r3, [sp]
    6fba:	b1ab      	cbz	r3, 6fe8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    6fbc:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
    6fc0:	f88d 3000 	strb.w	r3, [sp]
    6fc4:	9b00      	ldr	r3, [sp, #0]
    6fc6:	9300      	str	r3, [sp, #0]
    6fc8:	f89d 3000 	ldrb.w	r3, [sp]
    6fcc:	2b00      	cmp	r3, #0
    6fce:	d1e9      	bne.n	6fa4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    6fd0:	704a      	strb	r2, [r1, #1]
    6fd2:	2314      	movs	r3, #20
    6fd4:	700b      	strb	r3, [r1, #0]
    6fd6:	f850 3f9c 	ldr.w	r3, [r0, #156]!
    6fda:	604b      	str	r3, [r1, #4]
    6fdc:	8883      	ldrh	r3, [r0, #4]
    6fde:	810b      	strh	r3, [r1, #8]
    6fe0:	f800 2c02 	strb.w	r2, [r0, #-2]
    6fe4:	2001      	movs	r0, #1
    6fe6:	bd08      	pop	{r3, pc}
    6fe8:	2000      	movs	r0, #0
    6fea:	bd08      	pop	{r3, pc}

00006fec <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    6fec:	b530      	push	{r4, r5, lr}
    6fee:	460c      	mov	r4, r1
    6ff0:	b08d      	sub	sp, #52	; 0x34
    6ff2:	4605      	mov	r5, r0
    6ff4:	4601      	mov	r1, r0
    6ff6:	2220      	movs	r2, #32
    6ff8:	a802      	add	r0, sp, #8
    6ffa:	f005 fb20 	bl	c63e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6ffe:	a80a      	add	r0, sp, #40	; 0x28
    7000:	f007 fbbb 	bl	e77a <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    7004:	7aa0      	ldrb	r0, [r4, #10]
    7006:	f88d 0018 	strb.w	r0, [sp, #24]
    700a:	7820      	ldrb	r0, [r4, #0]
    700c:	f88d 0008 	strb.w	r0, [sp, #8]
    7010:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    7014:	f8ad 0000 	strh.w	r0, [sp]
    7018:	f89d 0000 	ldrb.w	r0, [sp]
    701c:	f000 0101 	and.w	r1, r0, #1
    7020:	f3c0 0240 	ubfx	r2, r0, #1, #1
    7024:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    7028:	f3c0 0280 	ubfx	r2, r0, #2, #1
    702c:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    7030:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    7034:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    7038:	f3c0 1200 	ubfx	r2, r0, #4, #1
    703c:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    7040:	f3c0 1240 	ubfx	r2, r0, #5, #1
    7044:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    7048:	f3c0 1080 	ubfx	r0, r0, #6, #1
    704c:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    7050:	f8ad 000a 	strh.w	r0, [sp, #10]
    7054:	7d20      	ldrb	r0, [r4, #20]
    7056:	2801      	cmp	r0, #1
    7058:	d006      	beq.n	7068 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    705a:	2802      	cmp	r0, #2
    705c:	d004      	beq.n	7068 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    705e:	f240 2185 	movw	r1, #645	; 0x285
    7062:	2006      	movs	r0, #6
    7064:	f7fd fcc4 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7068:	f88d 000c 	strb.w	r0, [sp, #12]
    706c:	7a61      	ldrb	r1, [r4, #9]
    706e:	a80a      	add	r0, sp, #40	; 0x28
    7070:	f007 fb6a 	bl	e748 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    7074:	7d20      	ldrb	r0, [r4, #20]
    7076:	2101      	movs	r1, #1
    7078:	2802      	cmp	r0, #2
    707a:	d102      	bne.n	7082 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    707c:	7d60      	ldrb	r0, [r4, #21]
    707e:	1c40      	adds	r0, r0, #1
    7080:	b2c1      	uxtb	r1, r0
    7082:	7ea0      	ldrb	r0, [r4, #26]
    7084:	1c40      	adds	r0, r0, #1
    7086:	b2c2      	uxtb	r2, r0
    7088:	a80a      	add	r0, sp, #40	; 0x28
    708a:	f007 fb24 	bl	e6d6 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    708e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    7092:	0700      	lsls	r0, r0, #28
    7094:	d501      	bpl.n	709a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    7096:	2000      	movs	r0, #0
    7098:	e020      	b.n	70dc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    709a:	a80a      	add	r0, sp, #40	; 0x28
    709c:	f007 fb2d 	bl	e6fa <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    70a0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    70a4:	2228      	movs	r2, #40	; 0x28
    70a6:	f000 fdbd 	bl	7c24 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    70aa:	f240 2171 	movw	r1, #625	; 0x271
    70ae:	f200 20d5 	addw	r0, r0, #725	; 0x2d5
    70b2:	fbb0 f0f1 	udiv	r0, r0, r1
    70b6:	4348      	muls	r0, r1
    70b8:	f8d4 1002 	ldr.w	r1, [r4, #2]
    70bc:	f240 2371 	movw	r3, #625	; 0x271
    70c0:	0a0a      	lsrs	r2, r1, #8
    70c2:	f240 2171 	movw	r1, #625	; 0x271
    70c6:	434a      	muls	r2, r1
    70c8:	f8d4 1005 	ldr.w	r1, [r4, #5]
    70cc:	0a09      	lsrs	r1, r1, #8
    70ce:	4359      	muls	r1, r3
    70d0:	4290      	cmp	r0, r2
    70d2:	d801      	bhi.n	70d8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    70d4:	9204      	str	r2, [sp, #16]
    70d6:	e004      	b.n	70e2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    70d8:	4288      	cmp	r0, r1
    70da:	d801      	bhi.n	70e0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    70dc:	9004      	str	r0, [sp, #16]
    70de:	e000      	b.n	70e2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    70e0:	9104      	str	r1, [sp, #16]
    70e2:	7ca0      	ldrb	r0, [r4, #18]
    70e4:	f88d 0017 	strb.w	r0, [sp, #23]
    70e8:	7e20      	ldrb	r0, [r4, #24]
    70ea:	2801      	cmp	r0, #1
    70ec:	d000      	beq.n	70f0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    70ee:	2000      	movs	r0, #0
    70f0:	f88d 0014 	strb.w	r0, [sp, #20]
    70f4:	f895 0074 	ldrb.w	r0, [r5, #116]	; 0x74
    70f8:	f895 0075 	ldrb.w	r0, [r5, #117]	; 0x75
    70fc:	2220      	movs	r2, #32
    70fe:	a902      	add	r1, sp, #8
    7100:	4628      	mov	r0, r5
    7102:	f005 fa9c 	bl	c63e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7106:	980a      	ldr	r0, [sp, #40]	; 0x28
    7108:	6228      	str	r0, [r5, #32]
    710a:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    710e:	84a8      	strh	r0, [r5, #36]	; 0x24
    7110:	7ae0      	ldrb	r0, [r4, #11]
    7112:	b168      	cbz	r0, 7130 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x144>
    7114:	2802      	cmp	r0, #2
    7116:	d00b      	beq.n	7130 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x144>
    7118:	f05f 0001 	movs.w	r0, #1
    711c:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    7120:	68e0      	ldr	r0, [r4, #12]
    7122:	6528      	str	r0, [r5, #80]	; 0x50
    7124:	8a20      	ldrh	r0, [r4, #16]
    7126:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    712a:	b00d      	add	sp, #52	; 0x34
    712c:	2000      	movs	r0, #0
    712e:	bd30      	pop	{r4, r5, pc}
    7130:	2000      	movs	r0, #0
    7132:	e7f3      	b.n	711c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x130>

00007134 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    7134:	4a0a      	ldr	r2, [pc, #40]	; (7160 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    7136:	b510      	push	{r4, lr}
    7138:	2100      	movs	r1, #0
    713a:	7011      	strb	r1, [r2, #0]
    713c:	4c09      	ldr	r4, [pc, #36]	; (7164 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    713e:	6060      	str	r0, [r4, #4]
    7140:	f000 f822 	bl	7188 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    7144:	b110      	cbz	r0, 714c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    7146:	f44f 7148 	mov.w	r1, #800	; 0x320
    714a:	e004      	b.n	7156 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    714c:	68a0      	ldr	r0, [r4, #8]
    714e:	2800      	cmp	r0, #0
    7150:	d104      	bne.n	715c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    7152:	f240 3123 	movw	r1, #803	; 0x323
    7156:	202d      	movs	r0, #45	; 0x2d
    7158:	f7fd fc4a 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    715c:	bd10      	pop	{r4, pc}
    715e:	0000      	.short	0x0000
    7160:	20000f9c 	.word	0x20000f9c
    7164:	20000100 	.word	0x20000100

00007168 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    7168:	4902      	ldr	r1, [pc, #8]	; (7174 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    716a:	4801      	ldr	r0, [pc, #4]	; (7170 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    716c:	6088      	str	r0, [r1, #8]
    716e:	4770      	bx	lr
    7170:	00007c0c 	.word	0x00007c0c
    7174:	20000100 	.word	0x20000100

00007178 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    7178:	4902      	ldr	r1, [pc, #8]	; (7184 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    717a:	6008      	str	r0, [r1, #0]
    717c:	6889      	ldr	r1, [r1, #8]
    717e:	6809      	ldr	r1, [r1, #0]
    7180:	4708      	bx	r1
    7182:	0000      	.short	0x0000
    7184:	20000100 	.word	0x20000100

00007188 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    7188:	4808      	ldr	r0, [pc, #32]	; (71ac <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    718a:	b510      	push	{r4, lr}
    718c:	7801      	ldrb	r1, [r0, #0]
    718e:	b111      	cbz	r1, 7196 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    7190:	240c      	movs	r4, #12
    7192:	4620      	mov	r0, r4
    7194:	bd10      	pop	{r4, pc}
    7196:	2400      	movs	r4, #0
    7198:	6004      	str	r4, [r0, #0]
    719a:	6044      	str	r4, [r0, #4]
    719c:	6084      	str	r4, [r0, #8]
    719e:	60c4      	str	r4, [r0, #12]
    71a0:	f004 f92e 	bl	b400 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    71a4:	f003 ff70 	bl	b088 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    71a8:	e7f3      	b.n	7192 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    71aa:	0000      	.short	0x0000
    71ac:	20000f9c 	.word	0x20000f9c

000071b0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    71b0:	4904      	ldr	r1, [pc, #16]	; (71c4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    71b2:	b510      	push	{r4, lr}
    71b4:	7809      	ldrb	r1, [r1, #0]
    71b6:	2901      	cmp	r1, #1
    71b8:	d101      	bne.n	71be <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    71ba:	f000 fb77 	bl	78ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    71be:	2000      	movs	r0, #0
    71c0:	bd10      	pop	{r4, pc}
    71c2:	0000      	.short	0x0000
    71c4:	20000f9c 	.word	0x20000f9c

000071c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    71c8:	4902      	ldr	r1, [pc, #8]	; (71d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    71ca:	4801      	ldr	r0, [pc, #4]	; (71d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    71cc:	6008      	str	r0, [r1, #0]
    71ce:	4770      	bx	lr
    71d0:	000079f9 	.word	0x000079f9
    71d4:	2000010c 	.word	0x2000010c
    71d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71dc:	000f      	movs	r7, r1
    71de:	4604      	mov	r4, r0
    71e0:	d023      	beq.n	722a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    71e2:	f104 0020 	add.w	r0, r4, #32
    71e6:	4605      	mov	r5, r0
    71e8:	f007 fab0 	bl	e74c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    71ec:	b9b0      	cbnz	r0, 721c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    71ee:	78a0      	ldrb	r0, [r4, #2]
    71f0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    71f4:	b350      	cbz	r0, 724c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    71f6:	4628      	mov	r0, r5
    71f8:	f007 fa7f 	bl	e6fa <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    71fc:	4606      	mov	r6, r0
    71fe:	4628      	mov	r0, r5
    7200:	f007 faa4 	bl	e74c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7204:	1a30      	subs	r0, r6, r0
    7206:	b2c0      	uxtb	r0, r0
    7208:	f007 faf5 	bl	e7f6 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    720c:	4601      	mov	r1, r0
    720e:	4835      	ldr	r0, [pc, #212]	; (72e4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    7210:	6842      	ldr	r2, [r0, #4]
    7212:	4411      	add	r1, r2
    7214:	6041      	str	r1, [r0, #4]
    7216:	4628      	mov	r0, r5
    7218:	f007 fab6 	bl	e788 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    721c:	4628      	mov	r0, r5
    721e:	f007 fa78 	bl	e712 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7222:	4601      	mov	r1, r0
    7224:	4620      	mov	r0, r4
    7226:	f007 fa37 	bl	e698 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    722a:	4d2f      	ldr	r5, [pc, #188]	; (72e8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    722c:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    7230:	2100      	movs	r1, #0
    7232:	6868      	ldr	r0, [r5, #4]
    7234:	8001      	strh	r1, [r0, #0]
    7236:	f007 fa45 	bl	e6c4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    723a:	8860      	ldrh	r0, [r4, #2]
    723c:	2813      	cmp	r0, #19
    723e:	d013      	beq.n	7268 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    7240:	dc09      	bgt.n	7256 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    7242:	2810      	cmp	r0, #16
    7244:	d036      	beq.n	72b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    7246:	2812      	cmp	r0, #18
    7248:	d109      	bne.n	725e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    724a:	e031      	b.n	72b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    724c:	4620      	mov	r0, r4
    724e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7252:	f000 bb2b 	b.w	78ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    7256:	2815      	cmp	r0, #21
    7258:	d00f      	beq.n	727a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    725a:	281d      	cmp	r0, #29
    725c:	d00d      	beq.n	727a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    725e:	f240 6196 	movw	r1, #1686	; 0x696
    7262:	202d      	movs	r0, #45	; 0x2d
    7264:	f7fd fbc4 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7268:	2100      	movs	r1, #0
    726a:	6868      	ldr	r0, [r5, #4]
    726c:	f006 fe87 	bl	df7e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7270:	2101      	movs	r1, #1
    7272:	6868      	ldr	r0, [r5, #4]
    7274:	f007 fa26 	bl	e6c4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    7278:	e020      	b.n	72bc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    727a:	2101      	movs	r1, #1
    727c:	6868      	ldr	r0, [r5, #4]
    727e:	f006 fe7e 	bl	df7e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7282:	2101      	movs	r1, #1
    7284:	6868      	ldr	r0, [r5, #4]
    7286:	f007 fa1d 	bl	e6c4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    728a:	b136      	cbz	r6, 729a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    728c:	f104 0157 	add.w	r1, r4, #87	; 0x57
    7290:	6868      	ldr	r0, [r5, #4]
    7292:	f006 fe8f 	bl	dfb4 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7296:	2101      	movs	r1, #1
    7298:	e006      	b.n	72a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    729a:	f104 0150 	add.w	r1, r4, #80	; 0x50
    729e:	6868      	ldr	r0, [r5, #4]
    72a0:	f006 fe88 	bl	dfb4 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    72a4:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    72a8:	6868      	ldr	r0, [r5, #4]
    72aa:	f006 fe89 	bl	dfc0 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    72ae:	e005      	b.n	72bc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    72b0:	2106      	movs	r1, #6
    72b2:	e000      	b.n	72b6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    72b4:	2102      	movs	r1, #2
    72b6:	6868      	ldr	r0, [r5, #4]
    72b8:	f006 fe61 	bl	df7e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    72bc:	4620      	mov	r0, r4
    72be:	f000 fc7f 	bl	7bc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ec>
    72c2:	8860      	ldrh	r0, [r4, #2]
    72c4:	281d      	cmp	r0, #29
    72c6:	d006      	beq.n	72d6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    72c8:	2815      	cmp	r0, #21
    72ca:	d004      	beq.n	72d6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    72cc:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    72ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
    72d0:	6868      	ldr	r0, [r5, #4]
    72d2:	f006 fe44 	bl	df5e <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    72d6:	4639      	mov	r1, r7
    72d8:	4620      	mov	r0, r4
    72da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    72de:	f000 b9e5 	b.w	76ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d8>
    72e2:	0000      	.short	0x0000
    72e4:	20000f9c 	.word	0x20000f9c
    72e8:	20000100 	.word	0x20000100
    72ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    72f0:	4d28      	ldr	r5, [pc, #160]	; (7394 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1cc>)
    72f2:	4680      	mov	r8, r0
    72f4:	7828      	ldrb	r0, [r5, #0]
    72f6:	2802      	cmp	r0, #2
    72f8:	d005      	beq.n	7306 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    72fa:	7828      	ldrb	r0, [r5, #0]
    72fc:	2803      	cmp	r0, #3
    72fe:	d002      	beq.n	7306 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    7300:	f640 4191 	movw	r1, #3217	; 0xc91
    7304:	e01f      	b.n	7346 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x17e>
    7306:	4c24      	ldr	r4, [pc, #144]	; (7398 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d0>)
    7308:	6820      	ldr	r0, [r4, #0]
    730a:	7b01      	ldrb	r1, [r0, #12]
    730c:	b109      	cbz	r1, 7312 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    730e:	f007 f9ce 	bl	e6ae <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    7312:	6860      	ldr	r0, [r4, #4]
    7314:	2700      	movs	r7, #0
    7316:	f1b8 0f00 	cmp.w	r8, #0
    731a:	7800      	ldrb	r0, [r0, #0]
    731c:	f000 060f 	and.w	r6, r0, #15
    7320:	d01f      	beq.n	7362 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    7322:	f004 fa7b 	bl	b81c <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>
    7326:	b1e0      	cbz	r0, 7362 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    7328:	4639      	mov	r1, r7
    732a:	6860      	ldr	r0, [r4, #4]
    732c:	f006 fddd 	bl	deea <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    7330:	b1b8      	cbz	r0, 7362 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    7332:	782a      	ldrb	r2, [r5, #0]
    7334:	6820      	ldr	r0, [r4, #0]
    7336:	4631      	mov	r1, r6
    7338:	2a02      	cmp	r2, #2
    733a:	d007      	beq.n	734c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x184>
    733c:	782a      	ldrb	r2, [r5, #0]
    733e:	2a03      	cmp	r2, #3
    7340:	d004      	beq.n	734c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x184>
    7342:	f640 416a 	movw	r1, #3178	; 0xc6a
    7346:	202d      	movs	r0, #45	; 0x2d
    7348:	f7fd fb52 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    734c:	68a2      	ldr	r2, [r4, #8]
    734e:	782b      	ldrb	r3, [r5, #0]
    7350:	6952      	ldr	r2, [r2, #20]
    7352:	f06f 0607 	mvn.w	r6, #7
    7356:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    735a:	58d2      	ldr	r2, [r2, r3]
    735c:	4790      	blx	r2
    735e:	4606      	mov	r6, r0
    7360:	e000      	b.n	7364 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19c>
    7362:	2601      	movs	r6, #1
    7364:	7ba8      	ldrb	r0, [r5, #14]
    7366:	b118      	cbz	r0, 7370 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1a8>
    7368:	f004 f84a 	bl	b400 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    736c:	f003 fe8c 	bl	b088 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7370:	2e00      	cmp	r6, #0
    7372:	d00d      	beq.n	7390 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1c8>
    7374:	6820      	ldr	r0, [r4, #0]
    7376:	f007 fa54 	bl	e822 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    737a:	b120      	cbz	r0, 7386 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1be>
    737c:	68a0      	ldr	r0, [r4, #8]
    737e:	6880      	ldr	r0, [r0, #8]
    7380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7384:	4700      	bx	r0
    7386:	6820      	ldr	r0, [r4, #0]
    7388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    738c:	f000 ba8e 	b.w	78ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    7390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7394:	20000f9c 	.word	0x20000f9c
    7398:	20000100 	.word	0x20000100
    739c:	b510      	push	{r4, lr}
    739e:	2903      	cmp	r1, #3
    73a0:	d002      	beq.n	73a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e0>
    73a2:	2905      	cmp	r1, #5
    73a4:	d10a      	bne.n	73bc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f4>
    73a6:	e002      	b.n	73ae <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e6>
    73a8:	f000 fb5a 	bl	7a60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x58c>
    73ac:	e003      	b.n	73b6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ee>
    73ae:	4904      	ldr	r1, [pc, #16]	; (73c0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>)
    73b0:	6809      	ldr	r1, [r1, #0]
    73b2:	b109      	cbz	r1, 73b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f0>
    73b4:	4788      	blx	r1
    73b6:	b108      	cbz	r0, 73bc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f4>
    73b8:	2000      	movs	r0, #0
    73ba:	bd10      	pop	{r4, pc}
    73bc:	2001      	movs	r0, #1
    73be:	bd10      	pop	{r4, pc}
    73c0:	2000010c 	.word	0x2000010c
    73c4:	4a09      	ldr	r2, [pc, #36]	; (73ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x224>)
    73c6:	0003      	movs	r3, r0
    73c8:	6810      	ldr	r0, [r2, #0]
    73ca:	d001      	beq.n	73d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    73cc:	f000 ba6e 	b.w	78ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    73d0:	2900      	cmp	r1, #0
    73d2:	d009      	beq.n	73e8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    73d4:	6891      	ldr	r1, [r2, #8]
    73d6:	4a06      	ldr	r2, [pc, #24]	; (73f0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x228>)
    73d8:	6909      	ldr	r1, [r1, #16]
    73da:	7812      	ldrb	r2, [r2, #0]
    73dc:	f06f 030f 	mvn.w	r3, #15
    73e0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    73e4:	5889      	ldr	r1, [r1, r2]
    73e6:	4708      	bx	r1
    73e8:	4770      	bx	lr
    73ea:	0000      	.short	0x0000
    73ec:	20000100 	.word	0x20000100
    73f0:	20000f9c 	.word	0x20000f9c
    73f4:	b570      	push	{r4, r5, r6, lr}
    73f6:	4604      	mov	r4, r0
    73f8:	8840      	ldrh	r0, [r0, #2]
    73fa:	2500      	movs	r5, #0
    73fc:	2810      	cmp	r0, #16
    73fe:	d014      	beq.n	742a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x262>
    7400:	4e14      	ldr	r6, [pc, #80]	; (7454 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x28c>)
    7402:	7bb0      	ldrb	r0, [r6, #14]
    7404:	b120      	cbz	r0, 7410 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x248>
    7406:	f003 fe5f 	bl	b0c8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    740a:	2040      	movs	r0, #64	; 0x40
    740c:	f004 f808 	bl	b420 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    7410:	4811      	ldr	r0, [pc, #68]	; (7458 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    7412:	6840      	ldr	r0, [r0, #4]
    7414:	f004 fac2 	bl	b99c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7418:	78a0      	ldrb	r0, [r4, #2]
    741a:	0740      	lsls	r0, r0, #29
    741c:	d413      	bmi.n	7446 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x27e>
    741e:	7be0      	ldrb	r0, [r4, #15]
    7420:	2801      	cmp	r0, #1
    7422:	d008      	beq.n	7436 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x26e>
    7424:	2803      	cmp	r0, #3
    7426:	d006      	beq.n	7436 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x26e>
    7428:	e006      	b.n	7438 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x270>
    742a:	4620      	mov	r0, r4
    742c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7430:	2101      	movs	r1, #1
    7432:	f7ff bed1 	b.w	71d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7436:	2510      	movs	r5, #16
    7438:	2100      	movs	r1, #0
    743a:	f045 020e 	orr.w	r2, r5, #14
    743e:	7923      	ldrb	r3, [r4, #4]
    7440:	4608      	mov	r0, r1
    7442:	f004 fb35 	bl	bab0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7446:	2000      	movs	r0, #0
    7448:	f004 f940 	bl	b6cc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    744c:	2002      	movs	r0, #2
    744e:	7030      	strb	r0, [r6, #0]
    7450:	bd70      	pop	{r4, r5, r6, pc}
    7452:	0000      	.short	0x0000
    7454:	20000f9c 	.word	0x20000f9c
    7458:	20000100 	.word	0x20000100
    745c:	b510      	push	{r4, lr}
    745e:	4c12      	ldr	r4, [pc, #72]	; (74a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e0>)
    7460:	6820      	ldr	r0, [r4, #0]
    7462:	f000 f825 	bl	74b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>
    7466:	6820      	ldr	r0, [r4, #0]
    7468:	f007 f9db 	bl	e822 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    746c:	2800      	cmp	r0, #0
    746e:	6820      	ldr	r0, [r4, #0]
    7470:	d00b      	beq.n	748a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c2>
    7472:	490e      	ldr	r1, [pc, #56]	; (74ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    7474:	780a      	ldrb	r2, [r1, #0]
    7476:	2a02      	cmp	r2, #2
    7478:	d00b      	beq.n	7492 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ca>
    747a:	780a      	ldrb	r2, [r1, #0]
    747c:	2a03      	cmp	r2, #3
    747e:	d008      	beq.n	7492 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ca>
    7480:	f640 31a5 	movw	r1, #2981	; 0xba5
    7484:	202d      	movs	r0, #45	; 0x2d
    7486:	f7fd fab3 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    748a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    748e:	f000 ba0d 	b.w	78ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    7492:	68a2      	ldr	r2, [r4, #8]
    7494:	7809      	ldrb	r1, [r1, #0]
    7496:	68d2      	ldr	r2, [r2, #12]
    7498:	f06f 0307 	mvn.w	r3, #7
    749c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    74a0:	5851      	ldr	r1, [r2, r1]
    74a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    74a6:	4708      	bx	r1
    74a8:	20000100 	.word	0x20000100
    74ac:	20000f9c 	.word	0x20000f9c
    74b0:	b510      	push	{r4, lr}
    74b2:	7b01      	ldrb	r1, [r0, #12]
    74b4:	b109      	cbz	r1, 74ba <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f2>
    74b6:	f007 f8fa 	bl	e6ae <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    74ba:	4805      	ldr	r0, [pc, #20]	; (74d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x308>)
    74bc:	7b80      	ldrb	r0, [r0, #14]
    74be:	2800      	cmp	r0, #0
    74c0:	d005      	beq.n	74ce <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x306>
    74c2:	f003 ff9d 	bl	b400 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    74c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    74ca:	f003 bddd 	b.w	b088 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    74ce:	bd10      	pop	{r4, pc}
    74d0:	20000f9c 	.word	0x20000f9c

000074d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    74d4:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    74d8:	4d5a      	ldr	r5, [pc, #360]	; (7644 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>)
    74da:	4604      	mov	r4, r0
    74dc:	7828      	ldrb	r0, [r5, #0]
    74de:	bbe8      	cbnz	r0, 755c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x88>
    74e0:	7820      	ldrb	r0, [r4, #0]
    74e2:	28ff      	cmp	r0, #255	; 0xff
    74e4:	d049      	beq.n	757a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    74e6:	f04f 0900 	mov.w	r9, #0
    74ea:	f8a5 900c 	strh.w	r9, [r5, #12]
    74ee:	f8c5 9004 	str.w	r9, [r5, #4]
    74f2:	f885 9001 	strb.w	r9, [r5, #1]
    74f6:	f885 9002 	strb.w	r9, [r5, #2]
    74fa:	f884 9061 	strb.w	r9, [r4, #97]	; 0x61
    74fe:	4648      	mov	r0, r9
    7500:	f004 f94c 	bl	b79c <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    7504:	4b50      	ldr	r3, [pc, #320]	; (7648 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    7506:	f8df a144 	ldr.w	sl, [pc, #324]	; 764c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    750a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    750c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    7510:	f8da 0008 	ldr.w	r0, [sl, #8]
    7514:	6840      	ldr	r0, [r0, #4]
    7516:	9003      	str	r0, [sp, #12]
    7518:	4668      	mov	r0, sp
    751a:	f004 f8ab 	bl	b674 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    751e:	f004 f9af 	bl	b880 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    7522:	f003 ff6d 	bl	b400 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7526:	f003 fdaf 	bl	b088 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    752a:	4847      	ldr	r0, [pc, #284]	; (7648 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    752c:	1f40      	subs	r0, r0, #5
    752e:	f004 fb11 	bl	bb54 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    7532:	4845      	ldr	r0, [pc, #276]	; (7648 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    7534:	3808      	subs	r0, #8
    7536:	f004 fb19 	bl	bb6c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    753a:	f104 0020 	add.w	r0, r4, #32
    753e:	4606      	mov	r6, r0
    7540:	f007 f922 	bl	e788 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7544:	4630      	mov	r0, r6
    7546:	f007 f8e4 	bl	e712 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    754a:	4601      	mov	r1, r0
    754c:	4620      	mov	r0, r4
    754e:	f007 f8a3 	bl	e698 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    7552:	f994 000e 	ldrsb.w	r0, [r4, #14]
    7556:	f004 fa1b 	bl	b990 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    755a:	e000      	b.n	755e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    755c:	e00d      	b.n	757a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    755e:	7921      	ldrb	r1, [r4, #4]
    7560:	2000      	movs	r0, #0
    7562:	f004 f80b 	bl	b57c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    7566:	2601      	movs	r6, #1
    7568:	60a8      	str	r0, [r5, #8]
    756a:	b150      	cbz	r0, 7582 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    756c:	210f      	movs	r1, #15
    756e:	2005      	movs	r0, #5
    7570:	f003 ff6a 	bl	b448 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>
    7574:	7ea0      	ldrb	r0, [r4, #26]
    7576:	b958      	cbnz	r0, 7590 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc>
    7578:	e005      	b.n	7586 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb2>
    757a:	200c      	movs	r0, #12
    757c:	b004      	add	sp, #16
    757e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    7582:	702e      	strb	r6, [r5, #0]
    7584:	e05b      	b.n	763e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16a>
    7586:	7e20      	ldrb	r0, [r4, #24]
    7588:	b910      	cbnz	r0, 7590 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc>
    758a:	78a0      	ldrb	r0, [r4, #2]
    758c:	0740      	lsls	r0, r0, #29
    758e:	d52b      	bpl.n	75e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    7590:	f004 fed5 	bl	c33e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7594:	4683      	mov	fp, r0
    7596:	4659      	mov	r1, fp
    7598:	6c60      	ldr	r0, [r4, #68]	; 0x44
    759a:	f7fa fee5 	bl	2368 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    759e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 7650 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>
    75a2:	4607      	mov	r7, r0
    75a4:	fb90 f1f8 	sdiv	r1, r0, r8
    75a8:	fb08 7011 	mls	r0, r8, r1, r7
    75ac:	4241      	negs	r1, r0
    75ae:	4658      	mov	r0, fp
    75b0:	f7fa fea8 	bl	2304 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    75b4:	6460      	str	r0, [r4, #68]	; 0x44
    75b6:	fb97 f0f8 	sdiv	r0, r7, r8
    75ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
    75bc:	4408      	add	r0, r1
    75be:	6420      	str	r0, [r4, #64]	; 0x40
    75c0:	f7fe ff6a 	bl	6498 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    75c4:	6c21      	ldr	r1, [r4, #64]	; 0x40
    75c6:	4288      	cmp	r0, r1
    75c8:	d80e      	bhi.n	75e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    75ca:	e9c4 9b10 	strd	r9, fp, [r4, #64]	; 0x40
    75ce:	2101      	movs	r1, #1
    75d0:	4620      	mov	r0, r4
    75d2:	f007 f825 	bl	e620 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    75d6:	78a0      	ldrb	r0, [r4, #2]
    75d8:	0740      	lsls	r0, r0, #29
    75da:	d505      	bpl.n	75e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    75dc:	7e20      	ldrb	r0, [r4, #24]
    75de:	b118      	cbz	r0, 75e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    75e0:	2101      	movs	r1, #1
    75e2:	4620      	mov	r0, r4
    75e4:	f000 fa76 	bl	7ad4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x600>
    75e8:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    75ec:	f104 0049 	add.w	r0, r4, #73	; 0x49
    75f0:	f004 faa4 	bl	bb3c <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>
    75f4:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
    75f8:	2802      	cmp	r0, #2
    75fa:	d10a      	bne.n	7612 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13e>
    75fc:	4622      	mov	r2, r4
    75fe:	e9d2 3719 	ldrd	r3, r7, [r2, #100]	; 0x64
    7602:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    7606:	e9c4 370c 	strd	r3, r7, [r4, #48]	; 0x30
    760a:	e9c4 0119 	strd	r0, r1, [r4, #100]	; 0x64
    760e:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
    7612:	f894 0075 	ldrb.w	r0, [r4, #117]	; 0x75
    7616:	2802      	cmp	r0, #2
    7618:	d109      	bne.n	762e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15a>
    761a:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    761e:	e9d4 231b 	ldrd	r2, r3, [r4, #108]	; 0x6c
    7622:	e9c4 101b 	strd	r1, r0, [r4, #108]	; 0x6c
    7626:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    762a:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
    762e:	f7fe ff99 	bl	6564 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    7632:	2103      	movs	r1, #3
    7634:	f8da 0004 	ldr.w	r0, [sl, #4]
    7638:	f006 f8e2 	bl	d800 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    763c:	73a8      	strb	r0, [r5, #14]
    763e:	2000      	movs	r0, #0
    7640:	e79c      	b.n	757c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa8>
    7642:	0000      	.short	0x0000
    7644:	20000f9c 	.word	0x20000f9c
    7648:	00007bec 	.word	0x00007bec
    764c:	20000100 	.word	0x20000100
    7650:	000f4240 	.word	0x000f4240
    7654:	b510      	push	{r4, lr}
    7656:	4604      	mov	r4, r0
    7658:	f7ff ff3c 	bl	74d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    765c:	2800      	cmp	r0, #0
    765e:	d108      	bne.n	7672 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19e>
    7660:	4804      	ldr	r0, [pc, #16]	; (7674 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1a0>)
    7662:	7800      	ldrb	r0, [r0, #0]
    7664:	2801      	cmp	r0, #1
    7666:	d003      	beq.n	7670 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>
    7668:	2100      	movs	r1, #0
    766a:	4620      	mov	r0, r4
    766c:	f7ff fdb4 	bl	71d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7670:	2000      	movs	r0, #0
    7672:	bd10      	pop	{r4, pc}
    7674:	20000f9c 	.word	0x20000f9c
    7678:	480a      	ldr	r0, [pc, #40]	; (76a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
    767a:	b510      	push	{r4, lr}
    767c:	490a      	ldr	r1, [pc, #40]	; (76a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>)
    767e:	6804      	ldr	r4, [r0, #0]
    7680:	7808      	ldrb	r0, [r1, #0]
    7682:	2800      	cmp	r0, #0
    7684:	d00d      	beq.n	76a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ce>
    7686:	7808      	ldrb	r0, [r1, #0]
    7688:	2802      	cmp	r0, #2
    768a:	d002      	beq.n	7692 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1be>
    768c:	7808      	ldrb	r0, [r1, #0]
    768e:	2803      	cmp	r0, #3
    7690:	d102      	bne.n	7698 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c4>
    7692:	4620      	mov	r0, r4
    7694:	f7ff ff0c 	bl	74b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>
    7698:	4620      	mov	r0, r4
    769a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    769e:	f000 b905 	b.w	78ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    76a2:	bd10      	pop	{r4, pc}
    76a4:	20000100 	.word	0x20000100
    76a8:	20000f9c 	.word	0x20000f9c
    76ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    76b0:	4604      	mov	r4, r0
    76b2:	4827      	ldr	r0, [pc, #156]	; (7750 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
    76b4:	460d      	mov	r5, r1
    76b6:	6840      	ldr	r0, [r0, #4]
    76b8:	f004 f970 	bl	b99c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    76bc:	4e25      	ldr	r6, [pc, #148]	; (7754 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>)
    76be:	2004      	movs	r0, #4
    76c0:	7030      	strb	r0, [r6, #0]
    76c2:	b325      	cbz	r5, 770e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x23a>
    76c4:	8860      	ldrh	r0, [r4, #2]
    76c6:	2810      	cmp	r0, #16
    76c8:	d02a      	beq.n	7720 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24c>
    76ca:	f104 0020 	add.w	r0, r4, #32
    76ce:	4680      	mov	r8, r0
    76d0:	68b5      	ldr	r5, [r6, #8]
    76d2:	f007 f812 	bl	e6fa <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    76d6:	4607      	mov	r7, r0
    76d8:	4640      	mov	r0, r8
    76da:	f007 f837 	bl	e74c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    76de:	1a38      	subs	r0, r7, r0
    76e0:	1e40      	subs	r0, r0, #1
    76e2:	b2c0      	uxtb	r0, r0
    76e4:	8861      	ldrh	r1, [r4, #2]
    76e6:	2228      	movs	r2, #40	; 0x28
    76e8:	f000 fabc 	bl	7c64 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    76ec:	4405      	add	r5, r0
    76ee:	78a0      	ldrb	r0, [r4, #2]
    76f0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    76f4:	b130      	cbz	r0, 7704 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x230>
    76f6:	6870      	ldr	r0, [r6, #4]
    76f8:	4405      	add	r5, r0
    76fa:	f007 f880 	bl	e7fe <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    76fe:	4428      	add	r0, r5
    7700:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    7704:	7922      	ldrb	r2, [r4, #4]
    7706:	4629      	mov	r1, r5
    7708:	2000      	movs	r0, #0
    770a:	f004 f955 	bl	b9b8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    770e:	8860      	ldrh	r0, [r4, #2]
    7710:	2813      	cmp	r0, #19
    7712:	d013      	beq.n	773c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    7714:	dc09      	bgt.n	772a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    7716:	2810      	cmp	r0, #16
    7718:	d018      	beq.n	774c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x278>
    771a:	2812      	cmp	r0, #18
    771c:	d109      	bne.n	7732 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25e>
    771e:	e00d      	b.n	773c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    7720:	7921      	ldrb	r1, [r4, #4]
    7722:	2000      	movs	r0, #0
    7724:	f003 fede 	bl	b4e4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    7728:	e7f1      	b.n	770e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x23a>
    772a:	2815      	cmp	r0, #21
    772c:	d006      	beq.n	773c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    772e:	281d      	cmp	r0, #29
    7730:	d004      	beq.n	773c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    7732:	f640 511c 	movw	r1, #3356	; 0xd1c
    7736:	202d      	movs	r0, #45	; 0x2d
    7738:	f7fd f95a 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    773c:	7923      	ldrb	r3, [r4, #4]
    773e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7742:	2201      	movs	r2, #1
    7744:	4611      	mov	r1, r2
    7746:	2000      	movs	r0, #0
    7748:	f004 b9b2 	b.w	bab0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    774c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7750:	20000100 	.word	0x20000100
    7754:	20000f9c 	.word	0x20000f9c
    7758:	b510      	push	{r4, lr}
    775a:	4604      	mov	r4, r0
    775c:	7800      	ldrb	r0, [r0, #0]
    775e:	460b      	mov	r3, r1
    7760:	f884 00a9 	strb.w	r0, [r4, #169]	; 0xa9
    7764:	29ff      	cmp	r1, #255	; 0xff
    7766:	d010      	beq.n	778a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b6>
    7768:	f104 02ab 	add.w	r2, r4, #171	; 0xab
    776c:	1e51      	subs	r1, r2, #1
    776e:	4618      	mov	r0, r3
    7770:	f7fe fe10 	bl	6394 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7774:	b130      	cbz	r0, 7784 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b0>
    7776:	f894 00aa 	ldrb.w	r0, [r4, #170]	; 0xaa
    777a:	f040 0002 	orr.w	r0, r0, #2
    777e:	f884 00aa 	strb.w	r0, [r4, #170]	; 0xaa
    7782:	e011      	b.n	77a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d4>
    7784:	f640 712c 	movw	r1, #3884	; 0xf2c
    7788:	e01d      	b.n	77c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f2>
    778a:	4810      	ldr	r0, [pc, #64]	; (77cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f8>)
    778c:	6840      	ldr	r0, [r0, #4]
    778e:	7801      	ldrb	r1, [r0, #0]
    7790:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7794:	f884 10aa 	strb.w	r1, [r4, #170]	; 0xaa
    7798:	f8d0 1003 	ldr.w	r1, [r0, #3]
    779c:	f8c4 10ab 	str.w	r1, [r4, #171]	; 0xab
    77a0:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    77a4:	f8a4 00af 	strh.w	r0, [r4, #175]	; 0xaf
    77a8:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    77ac:	287f      	cmp	r0, #127	; 0x7f
    77ae:	d008      	beq.n	77c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ee>
    77b0:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
    77b4:	207f      	movs	r0, #127	; 0x7f
    77b6:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    77ba:	3492      	adds	r4, #146	; 0x92
    77bc:	2001      	movs	r0, #1
    77be:	75a0      	strb	r0, [r4, #22]
    77c0:	bd10      	pop	{r4, pc}
    77c2:	f640 51ce 	movw	r1, #3534	; 0xdce
    77c6:	202d      	movs	r0, #45	; 0x2d
    77c8:	f7fd f912 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77cc:	20000100 	.word	0x20000100
    77d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    77d4:	4604      	mov	r4, r0
    77d6:	8840      	ldrh	r0, [r0, #2]
    77d8:	4617      	mov	r7, r2
    77da:	4688      	mov	r8, r1
    77dc:	2903      	cmp	r1, #3
    77de:	d006      	beq.n	77ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31a>
    77e0:	f000 0501 	and.w	r5, r0, #1
    77e4:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    77e8:	b118      	cbz	r0, 77f2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31e>
    77ea:	2001      	movs	r0, #1
    77ec:	e002      	b.n	77f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x320>
    77ee:	f3c0 0540 	ubfx	r5, r0, #1, #1
    77f2:	2000      	movs	r0, #0
    77f4:	4681      	mov	r9, r0
    77f6:	f003 fe21 	bl	b43c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    77fa:	4606      	mov	r6, r0
    77fc:	f1b8 0f03 	cmp.w	r8, #3
    7800:	d025      	beq.n	784e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37a>
    7802:	2001      	movs	r0, #1
    7804:	4680      	mov	r8, r0
    7806:	ea35 0509 	bics.w	r5, r5, r9
    780a:	d046      	beq.n	789a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c6>
    780c:	4825      	ldr	r0, [pc, #148]	; (78a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d0>)
    780e:	7b80      	ldrb	r0, [r0, #14]
    7810:	b138      	cbz	r0, 7822 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    7812:	f005 fff8 	bl	d806 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    7816:	7038      	strb	r0, [r7, #0]
    7818:	28ff      	cmp	r0, #255	; 0xff
    781a:	d002      	beq.n	7822 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    781c:	f7fe fdd4 	bl	63c8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    7820:	4306      	orrs	r6, r0
    7822:	4d21      	ldr	r5, [pc, #132]	; (78a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>)
    7824:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    7828:	6868      	ldr	r0, [r5, #4]
    782a:	7801      	ldrb	r1, [r0, #0]
    782c:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7830:	4291      	cmp	r1, r2
    7832:	d106      	bne.n	7842 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36e>
    7834:	2206      	movs	r2, #6
    7836:	f104 0150 	add.w	r1, r4, #80	; 0x50
    783a:	1cc0      	adds	r0, r0, #3
    783c:	f004 feed 	bl	c61a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    7840:	b138      	cbz	r0, 7852 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37e>
    7842:	2000      	movs	r0, #0
    7844:	7839      	ldrb	r1, [r7, #0]
    7846:	29ff      	cmp	r1, #255	; 0xff
    7848:	d009      	beq.n	785e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38a>
    784a:	b9b8      	cbnz	r0, 787c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    784c:	e003      	b.n	7856 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x382>
    784e:	2002      	movs	r0, #2
    7850:	e7d8      	b.n	7804 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    7852:	2001      	movs	r0, #1
    7854:	e7f6      	b.n	7844 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x370>
    7856:	7e60      	ldrb	r0, [r4, #25]
    7858:	4288      	cmp	r0, r1
    785a:	d00f      	beq.n	787c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    785c:	e008      	b.n	7870 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39c>
    785e:	b138      	cbz	r0, 7870 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39c>
    7860:	6869      	ldr	r1, [r5, #4]
    7862:	f811 0b03 	ldrb.w	r0, [r1], #3
    7866:	f3c0 1080 	ubfx	r0, r0, #6, #1
    786a:	f006 fe97 	bl	e59c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    786e:	b128      	cbz	r0, 787c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    7870:	2000      	movs	r0, #0
    7872:	78a1      	ldrb	r1, [r4, #2]
    7874:	0749      	lsls	r1, r1, #29
    7876:	d503      	bpl.n	7880 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ac>
    7878:	b990      	cbnz	r0, 78a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    787a:	e00e      	b.n	789a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c6>
    787c:	2001      	movs	r0, #1
    787e:	e7f8      	b.n	7872 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39e>
    7880:	b976      	cbnz	r6, 78a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    7882:	7be0      	ldrb	r0, [r4, #15]
    7884:	b108      	cbz	r0, 788a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    7886:	4540      	cmp	r0, r8
    7888:	d107      	bne.n	789a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c6>
    788a:	6869      	ldr	r1, [r5, #4]
    788c:	f811 0b03 	ldrb.w	r0, [r1], #3
    7890:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7894:	f006 fe82 	bl	e59c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    7898:	b110      	cbz	r0, 78a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    789a:	2000      	movs	r0, #0
    789c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    78a0:	2001      	movs	r0, #1
    78a2:	e7fb      	b.n	789c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    78a4:	20000f9c 	.word	0x20000f9c
    78a8:	20000100 	.word	0x20000100
    78ac:	b570      	push	{r4, r5, r6, lr}
    78ae:	4604      	mov	r4, r0
    78b0:	6a80      	ldr	r0, [r0, #40]	; 0x28
    78b2:	4d10      	ldr	r5, [pc, #64]	; (78f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x420>)
    78b4:	1c40      	adds	r0, r0, #1
    78b6:	62a0      	str	r0, [r4, #40]	; 0x28
    78b8:	7ba8      	ldrb	r0, [r5, #14]
    78ba:	2600      	movs	r6, #0
    78bc:	b120      	cbz	r0, 78c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f4>
    78be:	f003 fd9f 	bl	b400 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    78c2:	f003 fbe1 	bl	b088 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    78c6:	73ae      	strb	r6, [r5, #14]
    78c8:	702e      	strb	r6, [r5, #0]
    78ca:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    78ce:	b108      	cbz	r0, 78d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    78d0:	2101      	movs	r1, #1
    78d2:	e00a      	b.n	78ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x416>
    78d4:	7b60      	ldrb	r0, [r4, #13]
    78d6:	b138      	cbz	r0, 78e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    78d8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    78da:	4288      	cmp	r0, r1
    78dc:	d804      	bhi.n	78e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    78de:	2101      	movs	r1, #1
    78e0:	4620      	mov	r0, r4
    78e2:	f006 ffb3 	bl	e84c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    78e6:	bd70      	pop	{r4, r5, r6, pc}
    78e8:	2100      	movs	r1, #0
    78ea:	4620      	mov	r0, r4
    78ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    78f0:	f006 bfac 	b.w	e84c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    78f4:	20000f9c 	.word	0x20000f9c
    78f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    78fc:	4604      	mov	r4, r0
    78fe:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    7902:	4690      	mov	r8, r2
    7904:	460d      	mov	r5, r1
    7906:	f88d 0000 	strb.w	r0, [sp]
    790a:	9800      	ldr	r0, [sp, #0]
    790c:	9000      	str	r0, [sp, #0]
    790e:	f89d 0000 	ldrb.w	r0, [sp]
    7912:	b110      	cbz	r0, 791a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x446>
    7914:	f640 31d9 	movw	r1, #3033	; 0xbd9
    7918:	e058      	b.n	79cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4f8>
    791a:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
    791e:	8828      	ldrh	r0, [r5, #0]
    7920:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    7924:	2b00      	cmp	r3, #0
    7926:	d163      	bne.n	79f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51c>
    7928:	6868      	ldr	r0, [r5, #4]
    792a:	f005 ffca 	bl	d8c2 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    792e:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    7932:	8928      	ldrh	r0, [r5, #8]
    7934:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    7938:	8968      	ldrh	r0, [r5, #10]
    793a:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
    793e:	f895 016d 	ldrb.w	r0, [r5, #365]	; 0x16d
    7942:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
    7946:	7e21      	ldrb	r1, [r4, #24]
    7948:	f104 0649 	add.w	r6, r4, #73	; 0x49
    794c:	2700      	movs	r7, #0
    794e:	f104 0980 	add.w	r9, r4, #128	; 0x80
    7952:	b129      	cbz	r1, 7960 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x48c>
    7954:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7958:	4631      	mov	r1, r6
    795a:	f006 fd08 	bl	e36e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    795e:	b940      	cbnz	r0, 7972 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49e>
    7960:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    7964:	b170      	cbz	r0, 7984 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b0>
    7966:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    796a:	4631      	mov	r1, r6
    796c:	f006 fcf6 	bl	e35c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa4>
    7970:	b140      	cbz	r0, 7984 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b0>
    7972:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    7976:	f8c4 0086 	str.w	r0, [r4, #134]	; 0x86
    797a:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    797e:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    7982:	e003      	b.n	798c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b8>
    7984:	f8c4 7086 	str.w	r7, [r4, #134]	; 0x86
    7988:	f8a4 708a 	strh.w	r7, [r4, #138]	; 0x8a
    798c:	4819      	ldr	r0, [pc, #100]	; (79f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x520>)
    798e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    7992:	6840      	ldr	r0, [r0, #4]
    7994:	7801      	ldrb	r1, [r0, #0]
    7996:	f3c1 1180 	ubfx	r1, r1, #6, #1
    799a:	f884 107f 	strb.w	r1, [r4, #127]	; 0x7f
    799e:	f850 1f03 	ldr.w	r1, [r0, #3]!
    79a2:	d016      	beq.n	79d2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fe>
    79a4:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    79a8:	8880      	ldrh	r0, [r0, #4]
    79aa:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    79ae:	464a      	mov	r2, r9
    79b0:	f104 017f 	add.w	r1, r4, #127	; 0x7f
    79b4:	4640      	mov	r0, r8
    79b6:	f7fe fced 	bl	6394 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    79ba:	b128      	cbz	r0, 79c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4f4>
    79bc:	f814 0f7f 	ldrb.w	r0, [r4, #127]!
    79c0:	f040 0002 	orr.w	r0, r0, #2
    79c4:	7020      	strb	r0, [r4, #0]
    79c6:	e00c      	b.n	79e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50e>
    79c8:	f640 31fa 	movw	r1, #3066	; 0xbfa
    79cc:	202d      	movs	r0, #45	; 0x2d
    79ce:	f7fd f80f 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79d2:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    79d6:	8880      	ldrh	r0, [r0, #4]
    79d8:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    79dc:	f844 7f8c 	str.w	r7, [r4, #140]!
    79e0:	80a7      	strh	r7, [r4, #4]
    79e2:	8828      	ldrh	r0, [r5, #0]
    79e4:	f7fd fc38 	bl	5258 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    79e8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    79ec:	f005 bcf5 	b.w	d3da <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    79f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    79f4:	20000100 	.word	0x20000100
    79f8:	b538      	push	{r3, r4, r5, lr}
    79fa:	4604      	mov	r4, r0
    79fc:	20ff      	movs	r0, #255	; 0xff
    79fe:	f88d 0000 	strb.w	r0, [sp]
    7a02:	2501      	movs	r5, #1
    7a04:	466a      	mov	r2, sp
    7a06:	2105      	movs	r1, #5
    7a08:	4620      	mov	r0, r4
    7a0a:	f7ff fee1 	bl	77d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>
    7a0e:	b300      	cbz	r0, 7a52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x57e>
    7a10:	4a11      	ldr	r2, [pc, #68]	; (7a58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x584>)
    7a12:	69e0      	ldr	r0, [r4, #28]
    7a14:	6852      	ldr	r2, [r2, #4]
    7a16:	f810 1f7d 	ldrb.w	r1, [r0, #125]!
    7a1a:	7812      	ldrb	r2, [r2, #0]
    7a1c:	f3c2 1240 	ubfx	r2, r2, #5, #1
    7a20:	4011      	ands	r1, r2
    7a22:	7001      	strb	r1, [r0, #0]
    7a24:	2201      	movs	r2, #1
    7a26:	4620      	mov	r0, r4
    7a28:	69e1      	ldr	r1, [r4, #28]
    7a2a:	f000 f881 	bl	7b30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    7a2e:	2300      	movs	r3, #0
    7a30:	f89d 2000 	ldrb.w	r2, [sp]
    7a34:	4620      	mov	r0, r4
    7a36:	69e1      	ldr	r1, [r4, #28]
    7a38:	f7ff ff5e 	bl	78f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    7a3c:	2001      	movs	r0, #1
    7a3e:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
    7a42:	4a06      	ldr	r2, [pc, #24]	; (7a5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x588>)
    7a44:	2100      	movs	r1, #0
    7a46:	69e0      	ldr	r0, [r4, #28]
    7a48:	7011      	strb	r1, [r2, #0]
    7a4a:	2105      	movs	r1, #5
    7a4c:	f000 fa1a 	bl	7e84 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    7a50:	e000      	b.n	7a54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x580>
    7a52:	2500      	movs	r5, #0
    7a54:	4628      	mov	r0, r5
    7a56:	bd38      	pop	{r3, r4, r5, pc}
    7a58:	20000100 	.word	0x20000100
    7a5c:	20000f9c 	.word	0x20000f9c
    7a60:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    7a62:	4604      	mov	r4, r0
    7a64:	20ff      	movs	r0, #255	; 0xff
    7a66:	f88d 0000 	strb.w	r0, [sp]
    7a6a:	2501      	movs	r5, #1
    7a6c:	466a      	mov	r2, sp
    7a6e:	2103      	movs	r1, #3
    7a70:	4620      	mov	r0, r4
    7a72:	f7ff fead 	bl	77d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>
    7a76:	b328      	cbz	r0, 7ac4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f0>
    7a78:	7b20      	ldrb	r0, [r4, #12]
    7a7a:	b168      	cbz	r0, 7a98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5c4>
    7a7c:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    7a80:	f88d 0004 	strb.w	r0, [sp, #4]
    7a84:	9801      	ldr	r0, [sp, #4]
    7a86:	9001      	str	r0, [sp, #4]
    7a88:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7a8c:	b920      	cbnz	r0, 7a98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5c4>
    7a8e:	f89d 1000 	ldrb.w	r1, [sp]
    7a92:	4620      	mov	r0, r4
    7a94:	f7ff fe60 	bl	7758 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    7a98:	4e0c      	ldr	r6, [pc, #48]	; (7acc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f8>)
    7a9a:	2100      	movs	r1, #0
    7a9c:	6870      	ldr	r0, [r6, #4]
    7a9e:	8001      	strh	r1, [r0, #0]
    7aa0:	2104      	movs	r1, #4
    7aa2:	f006 fa6c 	bl	df7e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7aa6:	4620      	mov	r0, r4
    7aa8:	f000 f88a 	bl	7bc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ec>
    7aac:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    7aae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    7ab0:	6870      	ldr	r0, [r6, #4]
    7ab2:	f006 fa9b 	bl	dfec <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    7ab6:	4906      	ldr	r1, [pc, #24]	; (7ad0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5fc>)
    7ab8:	2005      	movs	r0, #5
    7aba:	7008      	strb	r0, [r1, #0]
    7abc:	6870      	ldr	r0, [r6, #4]
    7abe:	f003 ff6d 	bl	b99c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7ac2:	e000      	b.n	7ac6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f2>
    7ac4:	2500      	movs	r5, #0
    7ac6:	4628      	mov	r0, r5
    7ac8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    7aca:	0000      	.short	0x0000
    7acc:	20000100 	.word	0x20000100
    7ad0:	20000f9c 	.word	0x20000f9c
    7ad4:	b570      	push	{r4, r5, r6, lr}
    7ad6:	4604      	mov	r4, r0
    7ad8:	460e      	mov	r6, r1
    7ada:	7e40      	ldrb	r0, [r0, #25]
    7adc:	f7fe fc28 	bl	6330 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    7ae0:	0005      	movs	r5, r0
    7ae2:	d019      	beq.n	7b18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x644>
    7ae4:	2110      	movs	r1, #16
    7ae6:	f006 f877 	bl	dbd8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    7aea:	2800      	cmp	r0, #0
    7aec:	d114      	bne.n	7b18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x644>
    7aee:	2001      	movs	r0, #1
    7af0:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    7af4:	f104 0157 	add.w	r1, r4, #87	; 0x57
    7af8:	4632      	mov	r2, r6
    7afa:	460c      	mov	r4, r1
    7afc:	4628      	mov	r0, r5
    7afe:	f005 fe24 	bl	d74a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7b02:	4621      	mov	r1, r4
    7b04:	4c05      	ldr	r4, [pc, #20]	; (7b1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x648>)
    7b06:	6860      	ldr	r0, [r4, #4]
    7b08:	f006 fa54 	bl	dfb4 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7b0c:	6860      	ldr	r0, [r4, #4]
    7b0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b12:	2101      	movs	r1, #1
    7b14:	f006 ba54 	b.w	dfc0 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7b18:	bd70      	pop	{r4, r5, r6, pc}
    7b1a:	0000      	.short	0x0000
    7b1c:	20000100 	.word	0x20000100
    7b20:	4802      	ldr	r0, [pc, #8]	; (7b2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>)
    7b22:	2101      	movs	r1, #1
    7b24:	6800      	ldr	r0, [r0, #0]
    7b26:	f7ff bb57 	b.w	71d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7b2a:	0000      	.short	0x0000
    7b2c:	20000100 	.word	0x20000100
    7b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b34:	4e21      	ldr	r6, [pc, #132]	; (7bbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6e8>)
    7b36:	4680      	mov	r8, r0
    7b38:	460c      	mov	r4, r1
    7b3a:	6870      	ldr	r0, [r6, #4]
    7b3c:	4615      	mov	r5, r2
    7b3e:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    7b42:	60e1      	str	r1, [r4, #12]
    7b44:	8881      	ldrh	r1, [r0, #4]
    7b46:	8221      	strh	r1, [r4, #16]
    7b48:	7981      	ldrb	r1, [r0, #6]
    7b4a:	74a1      	strb	r1, [r4, #18]
    7b4c:	8940      	ldrh	r0, [r0, #10]
    7b4e:	f005 feb4 	bl	d8ba <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    7b52:	4607      	mov	r7, r0
    7b54:	6060      	str	r0, [r4, #4]
    7b56:	6870      	ldr	r0, [r6, #4]
    7b58:	4639      	mov	r1, r7
    7b5a:	7d80      	ldrb	r0, [r0, #22]
    7b5c:	f006 f837 	bl	dbce <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    7b60:	82a0      	strh	r0, [r4, #20]
    7b62:	6870      	ldr	r0, [r6, #4]
    7b64:	4639      	mov	r1, r7
    7b66:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    7b6a:	f006 f82c 	bl	dbc6 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    7b6e:	61a0      	str	r0, [r4, #24]
    7b70:	6870      	ldr	r0, [r6, #4]
    7b72:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    7b76:	8121      	strh	r1, [r4, #8]
    7b78:	8841      	ldrh	r1, [r0, #2]
    7b7a:	8161      	strh	r1, [r4, #10]
    7b7c:	6841      	ldr	r1, [r0, #4]
    7b7e:	f8c4 107e 	str.w	r1, [r4, #126]	; 0x7e
    7b82:	7a01      	ldrb	r1, [r0, #8]
    7b84:	f884 1082 	strb.w	r1, [r4, #130]	; 0x82
    7b88:	7a41      	ldrb	r1, [r0, #9]
    7b8a:	f001 011f 	and.w	r1, r1, #31
    7b8e:	f884 1089 	strb.w	r1, [r4, #137]	; 0x89
    7b92:	7a40      	ldrb	r0, [r0, #9]
    7b94:	0940      	lsrs	r0, r0, #5
    7b96:	f884 016d 	strb.w	r0, [r4, #365]	; 0x16d
    7b9a:	f104 005a 	add.w	r0, r4, #90	; 0x5a
    7b9e:	2101      	movs	r1, #1
    7ba0:	7205      	strb	r5, [r0, #8]
    7ba2:	7245      	strb	r5, [r0, #9]
    7ba4:	7281      	strb	r1, [r0, #10]
    7ba6:	2100      	movs	r1, #0
    7ba8:	3836      	subs	r0, #54	; 0x36
    7baa:	f006 fb5a 	bl	e262 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    7bae:	f898 000e 	ldrb.w	r0, [r8, #14]
    7bb2:	f884 0066 	strb.w	r0, [r4, #102]	; 0x66
    7bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7bba:	0000      	.short	0x0000
    7bbc:	20000100 	.word	0x20000100
    7bc0:	b570      	push	{r4, r5, r6, lr}
    7bc2:	4d07      	ldr	r5, [pc, #28]	; (7be0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x70c>)
    7bc4:	4604      	mov	r4, r0
    7bc6:	f100 0149 	add.w	r1, r0, #73	; 0x49
    7bca:	6868      	ldr	r0, [r5, #4]
    7bcc:	f006 f9ff 	bl	dfce <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7bd0:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    7bd4:	6868      	ldr	r0, [r5, #4]
    7bd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7bda:	f006 b9fe 	b.w	dfda <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    7bde:	0000      	.short	0x0000
    7be0:	20000100 	.word	0x20000100
    7be4:	d6555555 	.word	0xd6555555
    7be8:	008e89be 	.word	0x008e89be
    7bec:	0000745d 	.word	0x0000745d
    7bf0:	000072ed 	.word	0x000072ed
    7bf4:	000073c5 	.word	0x000073c5
    7bf8:	00000000 	.word	0x00000000
    7bfc:	0000739d 	.word	0x0000739d
    7c00:	000073f5 	.word	0x000073f5
    7c04:	0000e5c3 	.word	0x0000e5c3
    7c08:	0000e5c9 	.word	0x0000e5c9
    7c0c:	00007655 	.word	0x00007655
    7c10:	00007679 	.word	0x00007679
    7c14:	00007b21 	.word	0x00007b21
    7c18:	00007c08 	.word	0x00007c08
    7c1c:	00007c00 	.word	0x00007c00
    7c20:	00007bfc 	.word	0x00007bfc

00007c24 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    7c24:	b510      	push	{r4, lr}
    7c26:	1e42      	subs	r2, r0, #1
    7c28:	2a02      	cmp	r2, #2
    7c2a:	d901      	bls.n	7c30 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    7c2c:	21ca      	movs	r1, #202	; 0xca
    7c2e:	e009      	b.n	7c44 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    7c30:	1e40      	subs	r0, r0, #1
    7c32:	2910      	cmp	r1, #16
    7c34:	d009      	beq.n	7c4a <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    7c36:	2912      	cmp	r1, #18
    7c38:	d00c      	beq.n	7c54 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    7c3a:	2913      	cmp	r1, #19
    7c3c:	d00a      	beq.n	7c54 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    7c3e:	2915      	cmp	r1, #21
    7c40:	d005      	beq.n	7c4e <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    7c42:	21d8      	movs	r1, #216	; 0xd8
    7c44:	202f      	movs	r0, #47	; 0x2f
    7c46:	f7fc fed3 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c4a:	4905      	ldr	r1, [pc, #20]	; (7c60 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7c4c:	e004      	b.n	7c58 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    7c4e:	4904      	ldr	r1, [pc, #16]	; (7c60 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7c50:	1d89      	adds	r1, r1, #6
    7c52:	e001      	b.n	7c58 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    7c54:	4902      	ldr	r1, [pc, #8]	; (7c60 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7c56:	1f89      	subs	r1, r1, #6
    7c58:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7c5c:	bd10      	pop	{r4, pc}
    7c5e:	0000      	.short	0x0000
    7c60:	0000e816 	.word	0x0000e816

00007c64 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    7c64:	1e42      	subs	r2, r0, #1
    7c66:	b510      	push	{r4, lr}
    7c68:	b2d2      	uxtb	r2, r2
    7c6a:	2a01      	cmp	r2, #1
    7c6c:	d903      	bls.n	7c76 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    7c6e:	291d      	cmp	r1, #29
    7c70:	d001      	beq.n	7c76 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    7c72:	21ee      	movs	r1, #238	; 0xee
    7c74:	e00d      	b.n	7c92 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    7c76:	2913      	cmp	r1, #19
    7c78:	d013      	beq.n	7ca2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    7c7a:	dc04      	bgt.n	7c86 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    7c7c:	2910      	cmp	r1, #16
    7c7e:	d00b      	beq.n	7c98 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    7c80:	2912      	cmp	r1, #18
    7c82:	d104      	bne.n	7c8e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    7c84:	e00d      	b.n	7ca2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    7c86:	2915      	cmp	r1, #21
    7c88:	d008      	beq.n	7c9c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    7c8a:	291d      	cmp	r1, #29
    7c8c:	d00e      	beq.n	7cac <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    7c8e:	f44f 7181 	mov.w	r1, #258	; 0x102
    7c92:	202f      	movs	r0, #47	; 0x2f
    7c94:	f7fc feac 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c98:	4807      	ldr	r0, [pc, #28]	; (7cb8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7c9a:	e004      	b.n	7ca6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    7c9c:	4806      	ldr	r0, [pc, #24]	; (7cb8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7c9e:	3008      	adds	r0, #8
    7ca0:	e001      	b.n	7ca6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    7ca2:	4805      	ldr	r0, [pc, #20]	; (7cb8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7ca4:	1d00      	adds	r0, r0, #4
    7ca6:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    7caa:	bd10      	pop	{r4, pc}
    7cac:	f240 315a 	movw	r1, #858	; 0x35a
    7cb0:	fb10 f001 	smulbb	r0, r0, r1
    7cb4:	bd10      	pop	{r4, pc}
    7cb6:	0000      	.short	0x0000
    7cb8:	0000e804 	.word	0x0000e804

00007cbc <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>:
    7cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7cc0:	4604      	mov	r4, r0
    7cc2:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    7cc6:	4615      	mov	r5, r2
    7cc8:	460f      	mov	r7, r1
    7cca:	2800      	cmp	r0, #0
    7ccc:	d15d      	bne.n	7d8a <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xce>
    7cce:	4621      	mov	r1, r4
    7cd0:	4844      	ldr	r0, [pc, #272]	; (7de4 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x128>)
    7cd2:	f7fb f9d3 	bl	307c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7cd6:	4606      	mov	r6, r0
    7cd8:	2820      	cmp	r0, #32
    7cda:	d056      	beq.n	7d8a <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xce>
    7cdc:	2234      	movs	r2, #52	; 0x34
    7cde:	2100      	movs	r1, #0
    7ce0:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    7ce4:	f004 fd25 	bl	c732 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7ce8:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
    7cec:	2601      	movs	r6, #1
    7cee:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
    7cf2:	f884 60c8 	strb.w	r6, [r4, #200]	; 0xc8
    7cf6:	b15f      	cbz	r7, 7d10 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x54>
    7cf8:	2101      	movs	r1, #1
    7cfa:	f507 708e 	add.w	r0, r7, #284	; 0x11c
    7cfe:	f7fc ff2b 	bl	4b58 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    7d02:	f897 011c 	ldrb.w	r0, [r7, #284]	; 0x11c
    7d06:	f000 0007 	and.w	r0, r0, #7
    7d0a:	1c40      	adds	r0, r0, #1
    7d0c:	f887 011c 	strb.w	r0, [r7, #284]	; 0x11c
    7d10:	4620      	mov	r0, r4
    7d12:	f006 ff25 	bl	eb60 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x22a>
    7d16:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    7d1a:	2003      	movs	r0, #3
    7d1c:	f884 00d6 	strb.w	r0, [r4, #214]	; 0xd6
    7d20:	f884 60d7 	strb.w	r6, [r4, #215]	; 0xd7
    7d24:	2700      	movs	r7, #0
    7d26:	f804 7fcc 	strb.w	r7, [r4, #204]!
    7d2a:	f7fa fc41 	bl	25b0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7d2e:	8921      	ldrh	r1, [r4, #8]
    7d30:	3ccc      	subs	r4, #204	; 0xcc
    7d32:	4288      	cmp	r0, r1
    7d34:	d800      	bhi.n	7d38 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x7c>
    7d36:	4608      	mov	r0, r1
    7d38:	f200 60bf 	addw	r0, r0, #1727	; 0x6bf
    7d3c:	fa1f f880 	uxth.w	r8, r0
    7d40:	4620      	mov	r0, r4
    7d42:	f006 fbb1 	bl	e4a8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    7d46:	b318      	cbz	r0, 7d90 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xd4>
    7d48:	4827      	ldr	r0, [pc, #156]	; (7de8 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x12c>)
    7d4a:	7800      	ldrb	r0, [r0, #0]
    7d4c:	f000 f8e4 	bl	7f18 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    7d50:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    7d54:	b281      	uxth	r1, r0
    7d56:	4628      	mov	r0, r5
    7d58:	f004 fb30 	bl	c3bc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7d5c:	4428      	add	r0, r5
    7d5e:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
    7d62:	34b8      	adds	r4, #184	; 0xb8
    7d64:	f004 faeb 	bl	c33e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7d68:	4641      	mov	r1, r8
    7d6a:	f7fa facb 	bl	2304 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7d6e:	6220      	str	r0, [r4, #32]
    7d70:	f804 7c03 	strb.w	r7, [r4, #-3]
    7d74:	7126      	strb	r6, [r4, #4]
    7d76:	2001      	movs	r0, #1
    7d78:	f006 fd3d 	bl	e7f6 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7d7c:	f200 1007 	addw	r0, r0, #263	; 0x107
    7d80:	1a28      	subs	r0, r5, r0
    7d82:	62a7      	str	r7, [r4, #40]	; 0x28
    7d84:	60a0      	str	r0, [r4, #8]
    7d86:	3cb8      	subs	r4, #184	; 0xb8
    7d88:	e017      	b.n	7dba <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xfe>
    7d8a:	200c      	movs	r0, #12
    7d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d90:	4620      	mov	r0, r4
    7d92:	f006 fe93 	bl	eabc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x186>
    7d96:	f844 0fd0 	str.w	r0, [r4, #208]!
    7d9a:	f804 6c1b 	strb.w	r6, [r4, #-27]
    7d9e:	f004 face 	bl	c33e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7da2:	4606      	mov	r6, r0
    7da4:	2000      	movs	r0, #0
    7da6:	f006 ff8a 	bl	ecbe <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x388>
    7daa:	eb00 0108 	add.w	r1, r0, r8
    7dae:	4630      	mov	r0, r6
    7db0:	f7fa faa8 	bl	2304 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7db4:	6125      	str	r5, [r4, #16]
    7db6:	60a0      	str	r0, [r4, #8]
    7db8:	3cd0      	subs	r4, #208	; 0xd0
    7dba:	f104 01cc 	add.w	r1, r4, #204	; 0xcc
    7dbe:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    7dc2:	f006 fecb 	bl	eb5c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x226>
    7dc6:	b138      	cbz	r0, 7dd8 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x11c>
    7dc8:	f8a4 70dc 	strh.w	r7, [r4, #220]	; 0xdc
    7dcc:	2100      	movs	r1, #0
    7dce:	4620      	mov	r0, r4
    7dd0:	f006 fbca 	bl	e568 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    7dd4:	2000      	movs	r0, #0
    7dd6:	e7d9      	b.n	7d8c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xd0>
    7dd8:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
    7ddc:	2030      	movs	r0, #48	; 0x30
    7dde:	f7fc fe07 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7de2:	0000      	.short	0x0000
    7de4:	000085d1 	.word	0x000085d1
    7de8:	20000110 	.word	0x20000110

00007dec <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>:
    7dec:	4804      	ldr	r0, [pc, #16]	; (7e00 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x14>)
    7dee:	2101      	movs	r1, #1
    7df0:	2200      	movs	r2, #0
    7df2:	7001      	strb	r1, [r0, #0]
    7df4:	7042      	strb	r2, [r0, #1]
    7df6:	70c1      	strb	r1, [r0, #3]
    7df8:	7082      	strb	r2, [r0, #2]
    7dfa:	f006 bd69 	b.w	e8d0 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    7dfe:	0000      	.short	0x0000
    7e00:	20000110 	.word	0x20000110

00007e04 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>:
    7e04:	4901      	ldr	r1, [pc, #4]	; (7e0c <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI+0x8>)
    7e06:	7008      	strb	r0, [r1, #0]
    7e08:	4770      	bx	lr
    7e0a:	0000      	.short	0x0000
    7e0c:	20000110 	.word	0x20000110

00007e10 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>:
    7e10:	4901      	ldr	r1, [pc, #4]	; (7e18 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x8>)
    7e12:	7048      	strb	r0, [r1, #1]
    7e14:	4770      	bx	lr
    7e16:	0000      	.short	0x0000
    7e18:	20000110 	.word	0x20000110

00007e1c <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>:
    7e1c:	4905      	ldr	r1, [pc, #20]	; (7e34 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ+0x18>)
    7e1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7e22:	fbb1 f1f2 	udiv	r1, r1, r2
    7e26:	b510      	push	{r4, lr}
    7e28:	f201 218b 	addw	r1, r1, #651	; 0x28b
    7e2c:	f006 fa32 	bl	e294 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    7e30:	b280      	uxth	r0, r0
    7e32:	bd10      	pop	{r4, pc}
    7e34:	0001527d 	.word	0x0001527d

00007e38 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    7e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e3c:	4c10      	ldr	r4, [pc, #64]	; (7e80 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    7e3e:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    7e42:	f003 fcb1 	bl	b7a8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7e46:	4606      	mov	r6, r0
    7e48:	7860      	ldrb	r0, [r4, #1]
    7e4a:	b128      	cbz	r0, 7e58 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    7e4c:	4632      	mov	r2, r6
    7e4e:	4639      	mov	r1, r7
    7e50:	4628      	mov	r0, r5
    7e52:	f005 fd3c 	bl	d8ce <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    7e56:	4605      	mov	r5, r0
    7e58:	6860      	ldr	r0, [r4, #4]
    7e5a:	4285      	cmp	r5, r0
    7e5c:	d005      	beq.n	7e6a <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    7e5e:	68e1      	ldr	r1, [r4, #12]
    7e60:	1a28      	subs	r0, r5, r0
    7e62:	4408      	add	r0, r1
    7e64:	60e0      	str	r0, [r4, #12]
    7e66:	f7fb fa0b 	bl	3280 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7e6a:	6065      	str	r5, [r4, #4]
    7e6c:	42ae      	cmp	r6, r5
    7e6e:	d801      	bhi.n	7e74 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    7e70:	78a0      	ldrb	r0, [r4, #2]
    7e72:	b110      	cbz	r0, 7e7a <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    7e74:	2000      	movs	r0, #0
    7e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e7a:	2001      	movs	r0, #1
    7e7c:	e7fb      	b.n	7e76 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    7e7e:	0000      	.short	0x0000
    7e80:	20000110 	.word	0x20000110

00007e84 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    7e84:	b570      	push	{r4, r5, r6, lr}
    7e86:	4c22      	ldr	r4, [pc, #136]	; (7f10 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c>)
    7e88:	4605      	mov	r5, r0
    7e8a:	2906      	cmp	r1, #6
    7e8c:	d23c      	bcs.n	7f08 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x84>
    7e8e:	e8df f001 	tbb	[pc, r1]
    7e92:	0b05      	.short	0x0b05
    7e94:	250f0e03 	.word	0x250f0e03
    7e98:	2100      	movs	r1, #0
    7e9a:	e000      	b.n	7e9e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1a>
    7e9c:	2101      	movs	r1, #1
    7e9e:	4628      	mov	r0, r5
    7ea0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7ea4:	f000 b94c 	b.w	8140 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x140>
    7ea8:	2003      	movs	r0, #3
    7eaa:	f885 012c 	strb.w	r0, [r5, #300]	; 0x12c
    7eae:	bd70      	pop	{r4, r5, r6, pc}
    7eb0:	f003 fcae 	bl	b810 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    7eb4:	f8c5 0168 	str.w	r0, [r5, #360]	; 0x168
    7eb8:	f895 0063 	ldrb.w	r0, [r5, #99]	; 0x63
    7ebc:	f008 f838 	bl	ff30 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7ec0:	f8d5 1168 	ldr.w	r1, [r5, #360]	; 0x168
    7ec4:	1a08      	subs	r0, r1, r0
    7ec6:	6861      	ldr	r1, [r4, #4]
    7ec8:	4401      	add	r1, r0
    7eca:	6061      	str	r1, [r4, #4]
    7ecc:	68a1      	ldr	r1, [r4, #8]
    7ece:	4408      	add	r0, r1
    7ed0:	60a0      	str	r0, [r4, #8]
    7ed2:	4628      	mov	r0, r5
    7ed4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7ed8:	f000 b8d2 	b.w	8080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>
    7edc:	f003 fc64 	bl	b7a8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7ee0:	4601      	mov	r1, r0
    7ee2:	2200      	movs	r2, #0
    7ee4:	69a0      	ldr	r0, [r4, #24]
    7ee6:	f006 fe9f 	bl	ec28 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2f2>
    7eea:	69a0      	ldr	r0, [r4, #24]
    7eec:	4909      	ldr	r1, [pc, #36]	; (7f14 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x90>)
    7eee:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    7ef2:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    7ef6:	f7fa ff87 	bl	2e08 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    7efa:	2800      	cmp	r0, #0
    7efc:	d1d7      	bne.n	7eae <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2a>
    7efe:	f240 717a 	movw	r1, #1914	; 0x77a
    7f02:	2030      	movs	r0, #48	; 0x30
    7f04:	f7fc fd74 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f08:	f240 7191 	movw	r1, #1937	; 0x791
    7f0c:	e7f9      	b.n	7f02 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e>
    7f0e:	0000      	.short	0x0000
    7f10:	20000110 	.word	0x20000110
    7f14:	0000ece9 	.word	0x0000ece9
    7f18:	b510      	push	{r4, lr}
    7f1a:	280c      	cmp	r0, #12
    7f1c:	d304      	bcc.n	7f28 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa4>
    7f1e:	f44f 7140 	mov.w	r1, #768	; 0x300
    7f22:	2006      	movs	r0, #6
    7f24:	f7fc fd64 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f28:	4901      	ldr	r1, [pc, #4]	; (7f30 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac>)
    7f2a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7f2e:	bd10      	pop	{r4, pc}
    7f30:	0000edca 	.word	0x0000edca
    7f34:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    7f36:	4c18      	ldr	r4, [pc, #96]	; (7f98 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x114>)
    7f38:	2001      	movs	r0, #1
    7f3a:	70a0      	strb	r0, [r4, #2]
    7f3c:	f64f 75ff 	movw	r5, #65535	; 0xffff
    7f40:	e00b      	b.n	7f5a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd6>
    7f42:	2100      	movs	r1, #0
    7f44:	f005 fb73 	bl	d62e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7f48:	0006      	movs	r6, r0
    7f4a:	d010      	beq.n	7f6e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xea>
    7f4c:	f896 0160 	ldrb.w	r0, [r6, #352]	; 0x160
    7f50:	f7fa ff8c 	bl	2e6c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7f54:	4630      	mov	r0, r6
    7f56:	f006 fe5a 	bl	ec0e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    7f5a:	4669      	mov	r1, sp
    7f5c:	2000      	movs	r0, #0
    7f5e:	f005 fb70 	bl	d642 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7f62:	b180      	cbz	r0, 7f86 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    7f64:	f240 1111 	movw	r1, #273	; 0x111
    7f68:	2030      	movs	r0, #48	; 0x30
    7f6a:	f7fc fd41 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f6e:	f240 1131 	movw	r1, #305	; 0x131
    7f72:	e7f9      	b.n	7f68 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xe4>
    7f74:	9802      	ldr	r0, [sp, #8]
    7f76:	b130      	cbz	r0, 7f86 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    7f78:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    7f7c:	b119      	cbz	r1, 7f86 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    7f7e:	8800      	ldrh	r0, [r0, #0]
    7f80:	42a8      	cmp	r0, r5
    7f82:	d1de      	bne.n	7f42 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbe>
    7f84:	e004      	b.n	7f90 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x10c>
    7f86:	4668      	mov	r0, sp
    7f88:	f7fc ff84 	bl	4e94 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7f8c:	2800      	cmp	r0, #0
    7f8e:	d0f1      	beq.n	7f74 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xf0>
    7f90:	2000      	movs	r0, #0
    7f92:	70a0      	strb	r0, [r4, #2]
    7f94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7f96:	0000      	.short	0x0000
    7f98:	20000110 	.word	0x20000110
    7f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7fa0:	4604      	mov	r4, r0
    7fa2:	4836      	ldr	r0, [pc, #216]	; (807c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c>)
    7fa4:	461e      	mov	r6, r3
    7fa6:	4690      	mov	r8, r2
    7fa8:	78c0      	ldrb	r0, [r0, #3]
    7faa:	4689      	mov	r9, r1
    7fac:	2500      	movs	r5, #0
    7fae:	b368      	cbz	r0, 800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
    7fb0:	f7fc f9c8 	bl	4344 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    7fb4:	b350      	cbz	r0, 800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
    7fb6:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
    7fba:	2802      	cmp	r0, #2
    7fbc:	d326      	bcc.n	800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
    7fbe:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7fc2:	2802      	cmp	r0, #2
    7fc4:	d022      	beq.n	800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
    7fc6:	f894 0142 	ldrb.w	r0, [r4, #322]	; 0x142
    7fca:	b9f8      	cbnz	r0, 800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
    7fcc:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    7fd0:	f7ff ffa2 	bl	7f18 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    7fd4:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    7fd8:	b281      	uxth	r1, r0
    7fda:	8031      	strh	r1, [r6, #0]
    7fdc:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7fe0:	2700      	movs	r7, #0
    7fe2:	2801      	cmp	r0, #1
    7fe4:	d015      	beq.n	8012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>
    7fe6:	6860      	ldr	r0, [r4, #4]
    7fe8:	f004 f9e8 	bl	c3bc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7fec:	f8b4 2106 	ldrh.w	r2, [r4, #262]	; 0x106
    7ff0:	b280      	uxth	r0, r0
    7ff2:	4442      	add	r2, r8
    7ff4:	eba2 0109 	sub.w	r1, r2, r9
    7ff8:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    7ffc:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    8000:	1a82      	subs	r2, r0, r2
    8002:	fb01 7502 	mla	r5, r1, r2, r7
    8006:	2001      	movs	r0, #1
    8008:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
    800c:	4628      	mov	r0, r5
    800e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8012:	f894 0079 	ldrb.w	r0, [r4, #121]	; 0x79
    8016:	2803      	cmp	r0, #3
    8018:	d02c      	beq.n	8074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>
    801a:	2101      	movs	r1, #1
    801c:	2000      	movs	r0, #0
    801e:	f005 fd10 	bl	da42 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    8022:	69a1      	ldr	r1, [r4, #24]
    8024:	1847      	adds	r7, r0, r1
    8026:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    802a:	8831      	ldrh	r1, [r6, #0]
    802c:	34c8      	adds	r4, #200	; 0xc8
    802e:	f004 f9c5 	bl	c3bc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8032:	6da2      	ldr	r2, [r4, #88]	; 0x58
    8034:	6e21      	ldr	r1, [r4, #96]	; 0x60
    8036:	1a82      	subs	r2, r0, r2
    8038:	fb01 5502 	mla	r5, r1, r2, r5
    803c:	65a0      	str	r0, [r4, #88]	; 0x58
    803e:	8831      	ldrh	r1, [r6, #0]
    8040:	4638      	mov	r0, r7
    8042:	f004 f9bb 	bl	c3bc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8046:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    8048:	66a0      	str	r0, [r4, #104]	; 0x68
    804a:	1a41      	subs	r1, r0, r1
    804c:	440d      	add	r5, r1
    804e:	8831      	ldrh	r1, [r6, #0]
    8050:	f854 0cc4 	ldr.w	r0, [r4, #-196]
    8054:	f004 f9b2 	bl	c3bc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8058:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    805a:	4442      	add	r2, r8
    805c:	eba2 0109 	sub.w	r1, r2, r9
    8060:	6e22      	ldr	r2, [r4, #96]	; 0x60
    8062:	1a89      	subs	r1, r1, r2
    8064:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    8066:	1e49      	subs	r1, r1, #1
    8068:	1a82      	subs	r2, r0, r2
    806a:	fb01 5502 	mla	r5, r1, r2, r5
    806e:	66e0      	str	r0, [r4, #108]	; 0x6c
    8070:	3cc8      	subs	r4, #200	; 0xc8
    8072:	e7c8      	b.n	8006 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6>
    8074:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    8078:	e7d3      	b.n	8022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
    807a:	0000      	.short	0x0000
    807c:	20000110 	.word	0x20000110
    8080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8084:	4604      	mov	r4, r0
    8086:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    808a:	2800      	cmp	r0, #0
    808c:	d053      	beq.n	8136 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x136>
    808e:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    8092:	2803      	cmp	r0, #3
    8094:	d14f      	bne.n	8136 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x136>
    8096:	4829      	ldr	r0, [pc, #164]	; (813c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13c>)
    8098:	f894 9063 	ldrb.w	r9, [r4, #99]	; 0x63
    809c:	7800      	ldrb	r0, [r0, #0]
    809e:	f7ff ff3b 	bl	7f18 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    80a2:	4605      	mov	r5, r0
    80a4:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    80a8:	f7ff ff36 	bl	7f18 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    80ac:	4428      	add	r0, r5
    80ae:	b286      	uxth	r6, r0
    80b0:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    80b4:	f7ff ff30 	bl	7f18 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    80b8:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    80bc:	fa1f f880 	uxth.w	r8, r0
    80c0:	4648      	mov	r0, r9
    80c2:	f007 ff35 	bl	ff30 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    80c6:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    80ca:	1a0d      	subs	r5, r1, r0
    80cc:	4648      	mov	r0, r9
    80ce:	f007 ff3d 	bl	ff4c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    80d2:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    80d6:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    80da:	fbb0 f0fa 	udiv	r0, r0, sl
    80de:	1a2d      	subs	r5, r5, r0
    80e0:	4648      	mov	r0, r9
    80e2:	f007 ff25 	bl	ff30 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    80e6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    80ea:	1a0f      	subs	r7, r1, r0
    80ec:	4648      	mov	r0, r9
    80ee:	f007 ff2d 	bl	ff4c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    80f2:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    80f6:	4401      	add	r1, r0
    80f8:	fbb1 f0fa 	udiv	r0, r1, sl
    80fc:	1a39      	subs	r1, r7, r0
    80fe:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    8102:	4370      	muls	r0, r6
    8104:	fbb0 f2f8 	udiv	r2, r0, r8
    8108:	2029      	movs	r0, #41	; 0x29
    810a:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    810e:	3260      	adds	r2, #96	; 0x60
    8110:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    8114:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    8118:	42a9      	cmp	r1, r5
    811a:	d801      	bhi.n	8120 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x120>
    811c:	4285      	cmp	r5, r0
    811e:	d901      	bls.n	8124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>
    8120:	f7fc f8f2 	bl	4308 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    8124:	4631      	mov	r1, r6
    8126:	6860      	ldr	r0, [r4, #4]
    8128:	f004 f948 	bl	c3bc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    812c:	2100      	movs	r1, #0
    812e:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    8132:	f884 1142 	strb.w	r1, [r4, #322]	; 0x142
    8136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    813a:	0000      	.short	0x0000
    813c:	20000110 	.word	0x20000110
    8140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8142:	460e      	mov	r6, r1
    8144:	4604      	mov	r4, r0
    8146:	f003 fb2f 	bl	b7a8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    814a:	2500      	movs	r5, #0
    814c:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
    8150:	2e01      	cmp	r6, #1
    8152:	d102      	bne.n	815a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15a>
    8154:	480f      	ldr	r0, [pc, #60]	; (8194 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x194>)
    8156:	7880      	ldrb	r0, [r0, #2]
    8158:	b168      	cbz	r0, 8176 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x176>
    815a:	2004      	movs	r0, #4
    815c:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    8160:	f006 fce3 	bl	eb2a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f4>
    8164:	f8a4 515e 	strh.w	r5, [r4, #350]	; 0x15e
    8168:	f8b4 006c 	ldrh.w	r0, [r4, #108]	; 0x6c
    816c:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    8170:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    8174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8176:	9500      	str	r5, [sp, #0]
    8178:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    817c:	2301      	movs	r3, #1
    817e:	2200      	movs	r2, #0
    8180:	4620      	mov	r0, r4
    8182:	f000 f809 	bl	8198 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x198>
    8186:	2800      	cmp	r0, #0
    8188:	d0ea      	beq.n	8160 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x160>
    818a:	f240 61e2 	movw	r1, #1762	; 0x6e2
    818e:	2030      	movs	r0, #48	; 0x30
    8190:	f7fc fc2e 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8194:	20000110 	.word	0x20000110
    8198:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    819c:	4604      	mov	r4, r0
    819e:	b085      	sub	sp, #20
    81a0:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    81a4:	f8df b424 	ldr.w	fp, [pc, #1060]	; 85cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5cc>
    81a8:	e9cd 3000 	strd	r3, r0, [sp]
    81ac:	4699      	mov	r9, r3
    81ae:	460f      	mov	r7, r1
    81b0:	f89b 0000 	ldrb.w	r0, [fp]
    81b4:	f7ff feb0 	bl	7f18 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    81b8:	4605      	mov	r5, r0
    81ba:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    81be:	f7ff feab 	bl	7f18 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    81c2:	4428      	add	r0, r5
    81c4:	f8ad 0008 	strh.w	r0, [sp, #8]
    81c8:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    81cc:	280d      	cmp	r0, #13
    81ce:	d004      	beq.n	81da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1da>
    81d0:	2000      	movs	r0, #0
    81d2:	9003      	str	r0, [sp, #12]
    81d4:	9807      	ldr	r0, [sp, #28]
    81d6:	b110      	cbz	r0, 81de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1de>
    81d8:	e02e      	b.n	8238 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x238>
    81da:	2001      	movs	r0, #1
    81dc:	e7f9      	b.n	81d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d2>
    81de:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    81e2:	2803      	cmp	r0, #3
    81e4:	d128      	bne.n	8238 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x238>
    81e6:	9803      	ldr	r0, [sp, #12]
    81e8:	b330      	cbz	r0, 8238 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x238>
    81ea:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    81ee:	42b8      	cmp	r0, r7
    81f0:	d122      	bne.n	8238 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x238>
    81f2:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
    81f6:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
    81fa:	6860      	ldr	r0, [r4, #4]
    81fc:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
    8200:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
    8204:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
    8208:	4408      	add	r0, r1
    820a:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    820e:	4620      	mov	r0, r4
    8210:	f006 fdf1 	bl	edf6 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    8214:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
    8218:	61a0      	str	r0, [r4, #24]
    821a:	f8b4 018e 	ldrh.w	r0, [r4, #398]	; 0x18e
    821e:	82a0      	strh	r0, [r4, #20]
    8220:	f8d4 0194 	ldr.w	r0, [r4, #404]	; 0x194
    8224:	6060      	str	r0, [r4, #4]
    8226:	f8b4 0198 	ldrh.w	r0, [r4, #408]	; 0x198
    822a:	8120      	strh	r0, [r4, #8]
    822c:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
    8230:	8160      	strh	r0, [r4, #10]
    8232:	2002      	movs	r0, #2
    8234:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    8238:	f8b4 006c 	ldrh.w	r0, [r4, #108]	; 0x6c
    823c:	f504 75a2 	add.w	r5, r4, #324	; 0x144
    8240:	1a38      	subs	r0, r7, r0
    8242:	fa0f fa80 	sxth.w	sl, r0
    8246:	f8b4 015c 	ldrh.w	r0, [r4, #348]	; 0x15c
    824a:	1a38      	subs	r0, r7, r0
    824c:	fa0f f880 	sxth.w	r8, r0
    8250:	f1b8 0f00 	cmp.w	r8, #0
    8254:	da06      	bge.n	8264 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x264>
    8256:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    825a:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
    825e:	2001      	movs	r0, #1
    8260:	46d0      	mov	r8, sl
    8262:	9000      	str	r0, [sp, #0]
    8264:	ab02      	add	r3, sp, #8
    8266:	4652      	mov	r2, sl
    8268:	4641      	mov	r1, r8
    826a:	4620      	mov	r0, r4
    826c:	f7ff fe96 	bl	7f9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x118>
    8270:	9004      	str	r0, [sp, #16]
    8272:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    8276:	b140      	cbz	r0, 828a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28a>
    8278:	2801      	cmp	r0, #1
    827a:	d07c      	beq.n	8376 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x376>
    827c:	2802      	cmp	r0, #2
    827e:	d05a      	beq.n	8336 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x336>
    8280:	2803      	cmp	r0, #3
    8282:	d079      	beq.n	8378 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x378>
    8284:	f44f 61ac 	mov.w	r1, #1376	; 0x560
    8288:	e19c      	b.n	85c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c4>
    828a:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    828e:	b3e8      	cbz	r0, 830c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30c>
    8290:	2101      	movs	r1, #1
    8292:	2000      	movs	r0, #0
    8294:	f005 fbd5 	bl	da42 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    8298:	4606      	mov	r6, r0
    829a:	69a0      	ldr	r0, [r4, #24]
    829c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    82a0:	4430      	add	r0, r6
    82a2:	f004 f88b 	bl	c3bc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    82a6:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    82aa:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    82ae:	6860      	ldr	r0, [r4, #4]
    82b0:	f004 f884 	bl	c3bc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    82b4:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    82b8:	a901      	add	r1, sp, #4
    82ba:	4668      	mov	r0, sp
    82bc:	f003 f9d2 	bl	b664 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    82c0:	e9dd 1200 	ldrd	r1, r2, [sp]
    82c4:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    82c8:	f7fb f88c 	bl	33e4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    82cc:	4682      	mov	sl, r0
    82ce:	4620      	mov	r0, r4
    82d0:	f006 fc1d 	bl	eb0e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d8>
    82d4:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    82d8:	f8d4 8164 	ldr.w	r8, [r4, #356]	; 0x164
    82dc:	f007 fe36 	bl	ff4c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    82e0:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    82e4:	4401      	add	r1, r0
    82e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    82ea:	fbb1 f0f0 	udiv	r0, r1, r0
    82ee:	69a1      	ldr	r1, [r4, #24]
    82f0:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    82f4:	4431      	add	r1, r6
    82f6:	1a08      	subs	r0, r1, r0
    82f8:	1a81      	subs	r1, r0, r2
    82fa:	4441      	add	r1, r8
    82fc:	3920      	subs	r1, #32
    82fe:	eba1 060a 	sub.w	r6, r1, sl
    8302:	0050      	lsls	r0, r2, #1
    8304:	8aa1      	ldrh	r1, [r4, #20]
    8306:	3060      	adds	r0, #96	; 0x60
    8308:	4401      	add	r1, r0
    830a:	e000      	b.n	830e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30e>
    830c:	e010      	b.n	8330 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x330>
    830e:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    8312:	f006 fc11 	bl	eb38 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x202>
    8316:	3020      	adds	r0, #32
    8318:	f8cb 0010 	str.w	r0, [fp, #16]
    831c:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    8320:	4659      	mov	r1, fp
    8322:	1a30      	subs	r0, r6, r0
    8324:	f5b0 7fd7 	cmp.w	r0, #430	; 0x1ae
    8328:	d85c      	bhi.n	83e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e4>
    832a:	f240 41f9 	movw	r1, #1273	; 0x4f9
    832e:	e149      	b.n	85c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c4>
    8330:	f240 41d7 	movw	r1, #1239	; 0x4d7
    8334:	e146      	b.n	85c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c4>
    8336:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    833a:	69a0      	ldr	r0, [r4, #24]
    833c:	4408      	add	r0, r1
    833e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    8342:	f004 f83b 	bl	c3bc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8346:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    834a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    834e:	6860      	ldr	r0, [r4, #4]
    8350:	f004 f834 	bl	c3bc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8354:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    8358:	4620      	mov	r0, r4
    835a:	f006 fbd8 	bl	eb0e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d8>
    835e:	f8b4 0106 	ldrh.w	r0, [r4, #262]	; 0x106
    8362:	bb10      	cbnz	r0, 83aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3aa>
    8364:	f1b9 0f00 	cmp.w	r9, #0
    8368:	d01f      	beq.n	83aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3aa>
    836a:	f894 8063 	ldrb.w	r8, [r4, #99]	; 0x63
    836e:	4640      	mov	r0, r8
    8370:	f007 fdec 	bl	ff4c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8374:	e001      	b.n	837a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x37a>
    8376:	e036      	b.n	83e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e6>
    8378:	e052      	b.n	8420 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x420>
    837a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    837e:	4401      	add	r1, r0
    8380:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8384:	fbb1 f0f0 	udiv	r0, r1, r0
    8388:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    838c:	69a2      	ldr	r2, [r4, #24]
    838e:	4408      	add	r0, r1
    8390:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    8394:	4411      	add	r1, r2
    8396:	1a0e      	subs	r6, r1, r0
    8398:	4640      	mov	r0, r8
    839a:	f007 fdc9 	bl	ff30 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    839e:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    83a2:	1a08      	subs	r0, r1, r0
    83a4:	4406      	add	r6, r0
    83a6:	3e20      	subs	r6, #32
    83a8:	e006      	b.n	83b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3b8>
    83aa:	69a1      	ldr	r1, [r4, #24]
    83ac:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    83b0:	4408      	add	r0, r1
    83b2:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    83b6:	1a46      	subs	r6, r0, r1
    83b8:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    83bc:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    83c0:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
    83c4:	fb01 0002 	mla	r0, r1, r2, r0
    83c8:	0040      	lsls	r0, r0, #1
    83ca:	8aa1      	ldrh	r1, [r4, #20]
    83cc:	3060      	adds	r0, #96	; 0x60
    83ce:	4401      	add	r1, r0
    83d0:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    83d4:	f006 fbb0 	bl	eb38 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x202>
    83d8:	f8cb 0010 	str.w	r0, [fp, #16]
    83dc:	2001      	movs	r0, #1
    83de:	4659      	mov	r1, fp
    83e0:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    83e4:	e066      	b.n	84b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4b4>
    83e6:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    83ea:	6860      	ldr	r0, [r4, #4]
    83ec:	f8b4 2106 	ldrh.w	r2, [r4, #262]	; 0x106
    83f0:	1a46      	subs	r6, r0, r1
    83f2:	eb02 000a 	add.w	r0, r2, sl
    83f6:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    83fa:	f8d4 c120 	ldr.w	ip, [r4, #288]	; 0x120
    83fe:	1a80      	subs	r0, r0, r2
    8400:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    8404:	1e40      	subs	r0, r0, #1
    8406:	fb0c 3202 	mla	r2, ip, r2, r3
    840a:	fb00 2001 	mla	r0, r0, r1, r2
    840e:	0040      	lsls	r0, r0, #1
    8410:	8aa1      	ldrh	r1, [r4, #20]
    8412:	3060      	adds	r0, #96	; 0x60
    8414:	4401      	add	r1, r0
    8416:	fb06 f608 	mul.w	r6, r6, r8
    841a:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    841e:	e044      	b.n	84aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4aa>
    8420:	6860      	ldr	r0, [r4, #4]
    8422:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    8426:	fb00 f008 	mul.w	r0, r0, r8
    842a:	fb08 0611 	mls	r6, r8, r1, r0
    842e:	f894 0075 	ldrb.w	r0, [r4, #117]	; 0x75
    8432:	2824      	cmp	r0, #36	; 0x24
    8434:	d003      	beq.n	843e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x43e>
    8436:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    843a:	2824      	cmp	r0, #36	; 0x24
    843c:	d109      	bne.n	8452 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x452>
    843e:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    8442:	1a38      	subs	r0, r7, r0
    8444:	b200      	sxth	r0, r0
    8446:	2800      	cmp	r0, #0
    8448:	db03      	blt.n	8452 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x452>
    844a:	f894 018f 	ldrb.w	r0, [r4, #399]	; 0x18f
    844e:	b100      	cbz	r0, 8452 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x452>
    8450:	9001      	str	r0, [sp, #4]
    8452:	9800      	ldr	r0, [sp, #0]
    8454:	b1f8      	cbz	r0, 8496 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x496>
    8456:	f8b4 0106 	ldrh.w	r0, [r4, #262]	; 0x106
    845a:	b9e0      	cbnz	r0, 8496 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x496>
    845c:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
    8460:	2800      	cmp	r0, #0
    8462:	d07d      	beq.n	8560 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x560>
    8464:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    8468:	2800      	cmp	r0, #0
    846a:	d079      	beq.n	8560 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x560>
    846c:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    8470:	f007 fd6c 	bl	ff4c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8474:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8478:	4401      	add	r1, r0
    847a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    847e:	fbb1 f0f0 	udiv	r0, r1, r0
    8482:	1a36      	subs	r6, r6, r0
    8484:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    8488:	f007 fd52 	bl	ff30 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    848c:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    8490:	1a08      	subs	r0, r1, r0
    8492:	4406      	add	r6, r0
    8494:	3e20      	subs	r6, #32
    8496:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
    849a:	eb01 000a 	add.w	r0, r1, sl
    849e:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    84a2:	4348      	muls	r0, r1
    84a4:	0041      	lsls	r1, r0, #1
    84a6:	3160      	adds	r1, #96	; 0x60
    84a8:	9801      	ldr	r0, [sp, #4]
    84aa:	f006 fb45 	bl	eb38 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x202>
    84ae:	4659      	mov	r1, fp
    84b0:	f8cb 0010 	str.w	r0, [fp, #16]
    84b4:	9804      	ldr	r0, [sp, #16]
    84b6:	6909      	ldr	r1, [r1, #16]
    84b8:	1a33      	subs	r3, r6, r0
    84ba:	f8d4 6134 	ldr.w	r6, [r4, #308]	; 0x134
    84be:	6860      	ldr	r0, [r4, #4]
    84c0:	1b80      	subs	r0, r0, r6
    84c2:	f2a0 203d 	subw	r0, r0, #573	; 0x23d
    84c6:	f8cb 0014 	str.w	r0, [fp, #20]
    84ca:	4281      	cmp	r1, r0
    84cc:	d800      	bhi.n	84d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d0>
    84ce:	4608      	mov	r0, r1
    84d0:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    84d4:	2000      	movs	r0, #0
    84d6:	7028      	strb	r0, [r5, #0]
    84d8:	2064      	movs	r0, #100	; 0x64
    84da:	8128      	strh	r0, [r5, #8]
    84dc:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    84e0:	4619      	mov	r1, r3
    84e2:	34dc      	adds	r4, #220	; 0xdc
    84e4:	f7f9 ff0e 	bl	2304 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    84e8:	60e8      	str	r0, [r5, #12]
    84ea:	f854 0cb4 	ldr.w	r0, [r4, #-180]
    84ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
    84f0:	4408      	add	r0, r1
    84f2:	6068      	str	r0, [r5, #4]
    84f4:	68e8      	ldr	r0, [r5, #12]
    84f6:	67e0      	str	r0, [r4, #124]	; 0x7c
    84f8:	f8a4 7080 	strh.w	r7, [r4, #128]	; 0x80
    84fc:	2001      	movs	r0, #1
    84fe:	72a8      	strb	r0, [r5, #10]
    8500:	8aa1      	ldrh	r1, [r4, #20]
    8502:	3cdc      	subs	r4, #220	; 0xdc
    8504:	1bc9      	subs	r1, r1, r7
    8506:	b209      	sxth	r1, r1
    8508:	2900      	cmp	r1, #0
    850a:	dd01      	ble.n	8510 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x510>
    850c:	2103      	movs	r1, #3
    850e:	72a9      	strb	r1, [r5, #10]
    8510:	9903      	ldr	r1, [sp, #12]
    8512:	b331      	cbz	r1, 8562 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x562>
    8514:	f1b9 0f00 	cmp.w	r9, #0
    8518:	d027      	beq.n	856a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56a>
    851a:	bf00      	nop
    851c:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    8520:	b392      	cbz	r2, 8588 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x588>
    8522:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    8526:	bf00      	nop
    8528:	f8a4 111a 	strh.w	r1, [r4, #282]	; 0x11a
    852c:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
    8530:	1c49      	adds	r1, r1, #1
    8532:	434b      	muls	r3, r1
    8534:	4293      	cmp	r3, r2
    8536:	d218      	bcs.n	856a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56a>
    8538:	7aa9      	ldrb	r1, [r5, #10]
    853a:	1e49      	subs	r1, r1, #1
    853c:	2900      	cmp	r1, #0
    853e:	dd14      	ble.n	856a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56a>
    8540:	72a8      	strb	r0, [r5, #10]
    8542:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    8546:	2101      	movs	r1, #1
    8548:	1c40      	adds	r0, r0, #1
    854a:	f8a4 011a 	strh.w	r0, [r4, #282]	; 0x11a
    854e:	f504 708e 	add.w	r0, r4, #284	; 0x11c
    8552:	f7fc fae5 	bl	4b20 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    8556:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    855a:	f000 0007 	and.w	r0, r0, #7
    855e:	e001      	b.n	8564 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x564>
    8560:	e013      	b.n	858a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58a>
    8562:	e015      	b.n	8590 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x590>
    8564:	1c40      	adds	r0, r0, #1
    8566:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
    856a:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    856e:	4629      	mov	r1, r5
    8570:	f006 faf4 	bl	eb5c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x226>
    8574:	b320      	cbz	r0, 85c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c0>
    8576:	9807      	ldr	r0, [sp, #28]
    8578:	f080 0001 	eor.w	r0, r0, #1
    857c:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
    8580:	2000      	movs	r0, #0
    8582:	b009      	add	sp, #36	; 0x24
    8584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8588:	e018      	b.n	85bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5bc>
    858a:	f240 514b 	movw	r1, #1355	; 0x54b
    858e:	e019      	b.n	85c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c4>
    8590:	f1b9 0f00 	cmp.w	r9, #0
    8594:	d1c2      	bne.n	851c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x51c>
    8596:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    859a:	2800      	cmp	r0, #0
    859c:	d0e5      	beq.n	856a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56a>
    859e:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    85a2:	6860      	ldr	r0, [r4, #4]
    85a4:	1a41      	subs	r1, r0, r1
    85a6:	4628      	mov	r0, r5
    85a8:	f005 fa5d 	bl	da66 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    85ac:	0400      	lsls	r0, r0, #16
    85ae:	0c00      	lsrs	r0, r0, #16
    85b0:	d0db      	beq.n	856a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56a>
    85b2:	9912      	ldr	r1, [sp, #72]	; 0x48
    85b4:	b101      	cbz	r1, 85b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b8>
    85b6:	8008      	strh	r0, [r1, #0]
    85b8:	2001      	movs	r0, #1
    85ba:	e7e2      	b.n	8582 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x582>
    85bc:	2100      	movs	r1, #0
    85be:	e7b3      	b.n	8528 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x528>
    85c0:	f240 51ab 	movw	r1, #1451	; 0x5ab
    85c4:	2030      	movs	r0, #48	; 0x30
    85c6:	f7fc fa13 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85ca:	0000      	.short	0x0000
    85cc:	20000110 	.word	0x20000110
    85d0:	b570      	push	{r4, r5, r6, lr}
    85d2:	b140      	cbz	r0, 85e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e6>
    85d4:	2909      	cmp	r1, #9
    85d6:	d24a      	bcs.n	866e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x66e>
    85d8:	e8df f001 	tbb	[pc, r1]
    85dc:	3d3d1707 	.word	0x3d3d1707
    85e0:	412b4939 	.word	0x412b4939
    85e4:	0045      	.short	0x0045
    85e6:	21d5      	movs	r1, #213	; 0xd5
    85e8:	e03e      	b.n	8668 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x668>
    85ea:	4922      	ldr	r1, [pc, #136]	; (8674 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x674>)
    85ec:	4604      	mov	r4, r0
    85ee:	6188      	str	r0, [r1, #24]
    85f0:	f7fe fdc2 	bl	7178 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    85f4:	b110      	cbz	r0, 85fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5fc>
    85f6:	f240 2187 	movw	r1, #647	; 0x287
    85fa:	e035      	b.n	8668 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x668>
    85fc:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
    8600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8604:	38f6      	subs	r0, #246	; 0xf6
    8606:	f7fa be3b 	b.w	3280 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    860a:	4605      	mov	r5, r0
    860c:	f005 ff4c 	bl	e4a8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    8610:	b9a8      	cbnz	r0, 863e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x63e>
    8612:	4628      	mov	r0, r5
    8614:	f006 fa52 	bl	eabc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x186>
    8618:	4604      	mov	r4, r0
    861a:	f8d5 00d0 	ldr.w	r0, [r5, #208]	; 0xd0
    861e:	42a0      	cmp	r0, r4
    8620:	d20b      	bcs.n	863a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x63a>
    8622:	1a20      	subs	r0, r4, r0
    8624:	2104      	movs	r1, #4
    8626:	f7f9 fdab 	bl	2180 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    862a:	b130      	cbz	r0, 863a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x63a>
    862c:	4628      	mov	r0, r5
    862e:	f8c5 40d0 	str.w	r4, [r5, #208]	; 0xd0
    8632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8636:	f005 bf08 	b.w	e44a <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    863a:	f8c5 40d0 	str.w	r4, [r5, #208]	; 0xd0
    863e:	4628      	mov	r0, r5
    8640:	f7fe fdb6 	bl	71b0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    8644:	2800      	cmp	r0, #0
    8646:	d014      	beq.n	8672 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x672>
    8648:	f240 21bb 	movw	r1, #699	; 0x2bb
    864c:	e00c      	b.n	8668 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x668>
    864e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8652:	f003 baab 	b.w	bbac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    8656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    865a:	f006 b9c9 	b.w	e9f0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xba>
    865e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8662:	f006 ba22 	b.w	eaaa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x174>
    8666:	21f7      	movs	r1, #247	; 0xf7
    8668:	2030      	movs	r0, #48	; 0x30
    866a:	f7fc f9c1 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    866e:	21fb      	movs	r1, #251	; 0xfb
    8670:	e7fa      	b.n	8668 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x668>
    8672:	bd70      	pop	{r4, r5, r6, pc}
    8674:	20000110 	.word	0x20000110
    8678:	b570      	push	{r4, r5, r6, lr}
    867a:	4604      	mov	r4, r0
    867c:	f7f9 ff98 	bl	25b0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    8680:	2864      	cmp	r0, #100	; 0x64
    8682:	d901      	bls.n	8688 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x688>
    8684:	4605      	mov	r5, r0
    8686:	e000      	b.n	868a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68a>
    8688:	2564      	movs	r5, #100	; 0x64
    868a:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    868e:	2128      	movs	r1, #40	; 0x28
    8690:	f006 f9ac 	bl	e9ec <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    8694:	4428      	add	r0, r5
    8696:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    869a:	f200 2037 	addw	r0, r0, #567	; 0x237
    869e:	180e      	adds	r6, r1, r0
    86a0:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    86a4:	2128      	movs	r1, #40	; 0x28
    86a6:	f006 f9a1 	bl	e9ec <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    86aa:	f200 229b 	addw	r2, r0, #667	; 0x29b
    86ae:	4620      	mov	r0, r4
    86b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    86b2:	f005 fd63 	bl	e17c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    86b6:	4605      	mov	r5, r0
    86b8:	4632      	mov	r2, r6
    86ba:	4620      	mov	r0, r4
    86bc:	6861      	ldr	r1, [r4, #4]
    86be:	f005 fd5d 	bl	e17c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    86c2:	4907      	ldr	r1, [pc, #28]	; (86e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6e0>)
    86c4:	4285      	cmp	r5, r0
    86c6:	6088      	str	r0, [r1, #8]
    86c8:	d200      	bcs.n	86cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6cc>
    86ca:	4628      	mov	r0, r5
    86cc:	6048      	str	r0, [r1, #4]
    86ce:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    86d2:	f5a0 70b2 	sub.w	r0, r0, #356	; 0x164
    86d6:	60c8      	str	r0, [r1, #12]
    86d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    86dc:	f7fa bdd0 	b.w	3280 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    86e0:	20000110 	.word	0x20000110
    86e4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    86e6:	4604      	mov	r4, r0
    86e8:	f003 fe29 	bl	c33e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    86ec:	4601      	mov	r1, r0
    86ee:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    86f2:	f7f9 fe39 	bl	2368 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    86f6:	6861      	ldr	r1, [r4, #4]
    86f8:	b111      	cbz	r1, 8700 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x700>
    86fa:	fbb0 f0f1 	udiv	r0, r0, r1
    86fe:	e000      	b.n	8702 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x702>
    8700:	2000      	movs	r0, #0
    8702:	f894 1076 	ldrb.w	r1, [r4, #118]	; 0x76
    8706:	290d      	cmp	r1, #13
    8708:	d00c      	beq.n	8724 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x724>
    870a:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
    870e:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    8712:	1813      	adds	r3, r2, r0
    8714:	1acb      	subs	r3, r1, r3
    8716:	b21b      	sxth	r3, r3
    8718:	2b00      	cmp	r3, #0
    871a:	db06      	blt.n	872a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x72a>
    871c:	1c49      	adds	r1, r1, #1
    871e:	f8a4 113e 	strh.w	r1, [r4, #318]	; 0x13e
    8722:	e006      	b.n	8732 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x732>
    8724:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    8728:	e00c      	b.n	8744 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x744>
    872a:	1c40      	adds	r0, r0, #1
    872c:	4410      	add	r0, r2
    872e:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    8732:	f894 0141 	ldrb.w	r0, [r4, #321]	; 0x141
    8736:	b940      	cbnz	r0, 874a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74a>
    8738:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    873c:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    8740:	4288      	cmp	r0, r1
    8742:	d102      	bne.n	874a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74a>
    8744:	1c40      	adds	r0, r0, #1
    8746:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    874a:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
    874e:	1c40      	adds	r0, r0, #1
    8750:	f8a4 015e 	strh.w	r0, [r4, #350]	; 0x15e
    8754:	f8b4 009e 	ldrh.w	r0, [r4, #158]	; 0x9e
    8758:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    875c:	1a40      	subs	r0, r0, r1
    875e:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
    8762:	1e40      	subs	r0, r0, #1
    8764:	4408      	add	r0, r1
    8766:	b285      	uxth	r5, r0
    8768:	e023      	b.n	87b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7b2>
    876a:	a801      	add	r0, sp, #4
    876c:	2300      	movs	r3, #0
    876e:	9000      	str	r0, [sp, #0]
    8770:	461a      	mov	r2, r3
    8772:	4620      	mov	r0, r4
    8774:	f7ff fd10 	bl	8198 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x198>
    8778:	2800      	cmp	r0, #0
    877a:	d036      	beq.n	87ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7ea>
    877c:	2801      	cmp	r0, #1
    877e:	d004      	beq.n	878a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78a>
    8780:	f240 6162 	movw	r1, #1634	; 0x662
    8784:	2030      	movs	r0, #48	; 0x30
    8786:	f7fc f933 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    878a:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    878e:	f8b4 00f0 	ldrh.w	r0, [r4, #240]	; 0xf0
    8792:	1a0a      	subs	r2, r1, r0
    8794:	b212      	sxth	r2, r2
    8796:	2a00      	cmp	r2, #0
    8798:	da06      	bge.n	87a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7a8>
    879a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    879e:	440a      	add	r2, r1
    87a0:	1aaa      	subs	r2, r5, r2
    87a2:	b212      	sxth	r2, r2
    87a4:	2a00      	cmp	r2, #0
    87a6:	db02      	blt.n	87ae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7ae>
    87a8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    87ac:	4408      	add	r0, r1
    87ae:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    87b2:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    87b6:	1a68      	subs	r0, r5, r1
    87b8:	b200      	sxth	r0, r0
    87ba:	2800      	cmp	r0, #0
    87bc:	dad5      	bge.n	876a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x76a>
    87be:	f894 0079 	ldrb.w	r0, [r4, #121]	; 0x79
    87c2:	b180      	cbz	r0, 87e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7e6>
    87c4:	f05f 0008 	movs.w	r0, #8
    87c8:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
    87cc:	2001      	movs	r0, #1
    87ce:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
    87d2:	4620      	mov	r0, r4
    87d4:	f006 fb44 	bl	ee60 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    87d8:	4620      	mov	r0, r4
    87da:	f006 fa18 	bl	ec0e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    87de:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    87e2:	f002 b861 	b.w	a8a8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    87e6:	203e      	movs	r0, #62	; 0x3e
    87e8:	e7ee      	b.n	87c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c8>
    87ea:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

000087ec <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    87ec:	4806      	ldr	r0, [pc, #24]	; (8808 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    87ee:	4905      	ldr	r1, [pc, #20]	; (8804 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    87f0:	6501      	str	r1, [r0, #80]	; 0x50
    87f2:	4906      	ldr	r1, [pc, #24]	; (880c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    87f4:	6541      	str	r1, [r0, #84]	; 0x54
    87f6:	4807      	ldr	r0, [pc, #28]	; (8814 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    87f8:	4905      	ldr	r1, [pc, #20]	; (8810 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    87fa:	6501      	str	r1, [r0, #80]	; 0x50
    87fc:	4906      	ldr	r1, [pc, #24]	; (8818 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    87fe:	6541      	str	r1, [r0, #84]	; 0x54
    8800:	4770      	bx	lr
    8802:	0000      	.short	0x0000
    8804:	00009c91 	.word	0x00009c91
    8808:	20000140 	.word	0x20000140
    880c:	00009d51 	.word	0x00009d51
    8810:	0000a39d 	.word	0x0000a39d
    8814:	200001a4 	.word	0x200001a4
    8818:	0000a3cd 	.word	0x0000a3cd

0000881c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    881c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    881e:	460d      	mov	r5, r1
    8820:	4607      	mov	r7, r0
    8822:	2100      	movs	r1, #0
    8824:	f004 ff03 	bl	d62e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8828:	1e04      	subs	r4, r0, #0
    882a:	d04f      	beq.n	88cc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    882c:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    8830:	2800      	cmp	r0, #0
    8832:	d04b      	beq.n	88cc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    8834:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    8838:	f88d 0000 	strb.w	r0, [sp]
    883c:	9800      	ldr	r0, [sp, #0]
    883e:	9000      	str	r0, [sp, #0]
    8840:	f89d 0000 	ldrb.w	r0, [sp]
    8844:	2600      	movs	r6, #0
    8846:	b1d8      	cbz	r0, 8880 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x64>
    8848:	706e      	strb	r6, [r5, #1]
    884a:	2007      	movs	r0, #7
    884c:	7028      	strb	r0, [r5, #0]
    884e:	e00b      	b.n	8868 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4c>
    8850:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
    8854:	83a6      	strh	r6, [r4, #28]
    8856:	f8d4 01b2 	ldr.w	r0, [r4, #434]	; 0x1b2
    885a:	6068      	str	r0, [r5, #4]
    885c:	f8d4 01b6 	ldr.w	r0, [r4, #438]	; 0x1b6
    8860:	60a8      	str	r0, [r5, #8]
    8862:	f8b4 01ba 	ldrh.w	r0, [r4, #442]	; 0x1ba
    8866:	81a8      	strh	r0, [r5, #12]
    8868:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    886c:	f88d 0000 	strb.w	r0, [sp]
    8870:	9800      	ldr	r0, [sp, #0]
    8872:	9000      	str	r0, [sp, #0]
    8874:	f89d 0000 	ldrb.w	r0, [sp]
    8878:	2800      	cmp	r0, #0
    887a:	d1e9      	bne.n	8850 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
    887c:	712e      	strb	r6, [r5, #4]
    887e:	e10b      	b.n	8a98 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8880:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    8884:	b3a0      	cbz	r0, 88f0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd4>
    8886:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    888a:	280b      	cmp	r0, #11
    888c:	d016      	beq.n	88bc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
    888e:	280c      	cmp	r0, #12
    8890:	d004      	beq.n	889c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
    8892:	f640 21ce 	movw	r1, #2766	; 0xace
    8896:	2031      	movs	r0, #49	; 0x31
    8898:	f7fc f8aa 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    889c:	8820      	ldrh	r0, [r4, #0]
    889e:	f7fc fcdb 	bl	5258 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    88a2:	4607      	mov	r7, r0
    88a4:	f004 fd7e 	bl	d3a4 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    88a8:	b978      	cbnz	r0, 88ca <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xae>
    88aa:	706e      	strb	r6, [r5, #1]
    88ac:	200c      	movs	r0, #12
    88ae:	7028      	strb	r0, [r5, #0]
    88b0:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
    88b4:	7128      	strb	r0, [r5, #4]
    88b6:	8820      	ldrh	r0, [r4, #0]
    88b8:	80e8      	strh	r0, [r5, #6]
    88ba:	e013      	b.n	88e4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xc8>
    88bc:	8820      	ldrh	r0, [r4, #0]
    88be:	f7fc fccb 	bl	5258 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    88c2:	4607      	mov	r7, r0
    88c4:	f004 fd6e 	bl	d3a4 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    88c8:	b108      	cbz	r0, 88ce <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    88ca:	2000      	movs	r0, #0
    88cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    88ce:	706e      	strb	r6, [r5, #1]
    88d0:	200b      	movs	r0, #11
    88d2:	7028      	strb	r0, [r5, #0]
    88d4:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
    88d8:	7128      	strb	r0, [r5, #4]
    88da:	8820      	ldrh	r0, [r4, #0]
    88dc:	80e8      	strh	r0, [r5, #6]
    88de:	f894 01c2 	ldrb.w	r0, [r4, #450]	; 0x1c2
    88e2:	7228      	strb	r0, [r5, #8]
    88e4:	f884 61bc 	strb.w	r6, [r4, #444]	; 0x1bc
    88e8:	4638      	mov	r0, r7
    88ea:	f004 fd70 	bl	d3ce <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    88ee:	e0d3      	b.n	8a98 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    88f0:	e7ff      	b.n	88f2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
    88f2:	f894 01f2 	ldrb.w	r0, [r4, #498]	; 0x1f2
    88f6:	f88d 0000 	strb.w	r0, [sp]
    88fa:	9800      	ldr	r0, [sp, #0]
    88fc:	9000      	str	r0, [sp, #0]
    88fe:	f89d 0000 	ldrb.w	r0, [sp]
    8902:	b130      	cbz	r0, 8912 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
    8904:	706e      	strb	r6, [r5, #1]
    8906:	200e      	movs	r0, #14
    8908:	7028      	strb	r0, [r5, #0]
    890a:	80af      	strh	r7, [r5, #4]
    890c:	f884 61f2 	strb.w	r6, [r4, #498]	; 0x1f2
    8910:	e0c2      	b.n	8a98 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8912:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    8916:	f88d 0000 	strb.w	r0, [sp]
    891a:	9800      	ldr	r0, [sp, #0]
    891c:	9000      	str	r0, [sp, #0]
    891e:	f89d 0000 	ldrb.w	r0, [sp]
    8922:	b198      	cbz	r0, 894c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
    8924:	706e      	strb	r6, [r5, #1]
    8926:	2008      	movs	r0, #8
    8928:	7028      	strb	r0, [r5, #0]
    892a:	8820      	ldrh	r0, [r4, #0]
    892c:	80a8      	strh	r0, [r5, #4]
    892e:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    8932:	f8c5 1006 	str.w	r1, [r5, #6]
    8936:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
    893a:	f8c5 100a 	str.w	r1, [r5, #10]
    893e:	f8b4 01d0 	ldrh.w	r0, [r4, #464]	; 0x1d0
    8942:	81e8      	strh	r0, [r5, #14]
    8944:	f504 74e2 	add.w	r4, r4, #452	; 0x1c4
    8948:	7026      	strb	r6, [r4, #0]
    894a:	e0a5      	b.n	8a98 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    894c:	f894 01ec 	ldrb.w	r0, [r4, #492]	; 0x1ec
    8950:	f88d 0000 	strb.w	r0, [sp]
    8954:	9800      	ldr	r0, [sp, #0]
    8956:	9000      	str	r0, [sp, #0]
    8958:	f89d 0000 	ldrb.w	r0, [sp]
    895c:	b1a0      	cbz	r0, 8988 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
    895e:	706e      	strb	r6, [r5, #1]
    8960:	2016      	movs	r0, #22
    8962:	7028      	strb	r0, [r5, #0]
    8964:	e005      	b.n	8972 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x156>
    8966:	bf00      	nop
    8968:	f884 61ec 	strb.w	r6, [r4, #492]	; 0x1ec
    896c:	f8d4 01ee 	ldr.w	r0, [r4, #494]	; 0x1ee
    8970:	6068      	str	r0, [r5, #4]
    8972:	f894 01ec 	ldrb.w	r0, [r4, #492]	; 0x1ec
    8976:	f88d 0000 	strb.w	r0, [sp]
    897a:	9800      	ldr	r0, [sp, #0]
    897c:	9000      	str	r0, [sp, #0]
    897e:	f89d 0000 	ldrb.w	r0, [sp]
    8982:	2800      	cmp	r0, #0
    8984:	d1f0      	bne.n	8968 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x14c>
    8986:	e087      	b.n	8a98 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8988:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    898c:	f88d 0000 	strb.w	r0, [sp]
    8990:	9800      	ldr	r0, [sp, #0]
    8992:	9000      	str	r0, [sp, #0]
    8994:	f89d 0000 	ldrb.w	r0, [sp]
    8998:	b170      	cbz	r0, 89b8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x19c>
    899a:	706e      	strb	r6, [r5, #1]
    899c:	2006      	movs	r0, #6
    899e:	7028      	strb	r0, [r5, #0]
    89a0:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
    89a4:	6068      	str	r0, [r5, #4]
    89a6:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    89aa:	60a8      	str	r0, [r5, #8]
    89ac:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    89b0:	60e8      	str	r0, [r5, #12]
    89b2:	f504 7401 	add.w	r4, r4, #516	; 0x204
    89b6:	e03a      	b.n	8a2e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x212>
    89b8:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    89bc:	f88d 0000 	strb.w	r0, [sp]
    89c0:	9800      	ldr	r0, [sp, #0]
    89c2:	9000      	str	r0, [sp, #0]
    89c4:	f89d 0000 	ldrb.w	r0, [sp]
    89c8:	b1d0      	cbz	r0, 8a00 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e4>
    89ca:	706e      	strb	r6, [r5, #1]
    89cc:	2012      	movs	r0, #18
    89ce:	7028      	strb	r0, [r5, #0]
    89d0:	e00b      	b.n	89ea <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ce>
    89d2:	bf00      	nop
    89d4:	f884 61d2 	strb.w	r6, [r4, #466]	; 0x1d2
    89d8:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    89dc:	6068      	str	r0, [r5, #4]
    89de:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
    89e2:	60a8      	str	r0, [r5, #8]
    89e4:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
    89e8:	60e8      	str	r0, [r5, #12]
    89ea:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    89ee:	f88d 0000 	strb.w	r0, [sp]
    89f2:	9800      	ldr	r0, [sp, #0]
    89f4:	9000      	str	r0, [sp, #0]
    89f6:	f89d 0000 	ldrb.w	r0, [sp]
    89fa:	2800      	cmp	r0, #0
    89fc:	d1ea      	bne.n	89d4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1b8>
    89fe:	e04b      	b.n	8a98 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8a00:	f894 01e0 	ldrb.w	r0, [r4, #480]	; 0x1e0
    8a04:	f88d 0000 	strb.w	r0, [sp]
    8a08:	9800      	ldr	r0, [sp, #0]
    8a0a:	9000      	str	r0, [sp, #0]
    8a0c:	f89d 0000 	ldrb.w	r0, [sp]
    8a10:	b180      	cbz	r0, 8a34 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x218>
    8a12:	706e      	strb	r6, [r5, #1]
    8a14:	2018      	movs	r0, #24
    8a16:	7028      	strb	r0, [r5, #0]
    8a18:	f8d4 01e2 	ldr.w	r0, [r4, #482]	; 0x1e2
    8a1c:	6068      	str	r0, [r5, #4]
    8a1e:	f8d4 01e6 	ldr.w	r0, [r4, #486]	; 0x1e6
    8a22:	60a8      	str	r0, [r5, #8]
    8a24:	f8b4 01ea 	ldrh.w	r0, [r4, #490]	; 0x1ea
    8a28:	81a8      	strh	r0, [r5, #12]
    8a2a:	f504 74f1 	add.w	r4, r4, #482	; 0x1e2
    8a2e:	f804 6c02 	strb.w	r6, [r4, #-2]
    8a32:	e031      	b.n	8a98 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8a34:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    8a38:	f88d 0000 	strb.w	r0, [sp]
    8a3c:	9800      	ldr	r0, [sp, #0]
    8a3e:	9000      	str	r0, [sp, #0]
    8a40:	f89d 0000 	ldrb.w	r0, [sp]
    8a44:	b138      	cbz	r0, 8a56 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x23a>
    8a46:	2019      	movs	r0, #25
    8a48:	7028      	strb	r0, [r5, #0]
    8a4a:	f8d4 01f6 	ldr.w	r0, [r4, #502]	; 0x1f6
    8a4e:	6068      	str	r0, [r5, #4]
    8a50:	f884 61f4 	strb.w	r6, [r4, #500]	; 0x1f4
    8a54:	e020      	b.n	8a98 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8a56:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    8a5a:	f88d 0000 	strb.w	r0, [sp]
    8a5e:	9800      	ldr	r0, [sp, #0]
    8a60:	9000      	str	r0, [sp, #0]
    8a62:	f89d 0000 	ldrb.w	r0, [sp]
    8a66:	2800      	cmp	r0, #0
    8a68:	f43f af30 	beq.w	88cc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    8a6c:	706e      	strb	r6, [r5, #1]
    8a6e:	2013      	movs	r0, #19
    8a70:	7028      	strb	r0, [r5, #0]
    8a72:	e007      	b.n	8a84 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x268>
    8a74:	f884 61fa 	strb.w	r6, [r4, #506]	; 0x1fa
    8a78:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    8a7c:	6068      	str	r0, [r5, #4]
    8a7e:	f8b4 0200 	ldrh.w	r0, [r4, #512]	; 0x200
    8a82:	8128      	strh	r0, [r5, #8]
    8a84:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    8a88:	f88d 0000 	strb.w	r0, [sp]
    8a8c:	9800      	ldr	r0, [sp, #0]
    8a8e:	9000      	str	r0, [sp, #0]
    8a90:	f89d 0000 	ldrb.w	r0, [sp]
    8a94:	2800      	cmp	r0, #0
    8a96:	d1ed      	bne.n	8a74 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x258>
    8a98:	2001      	movs	r0, #1
    8a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008a9c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    8a9c:	481b      	ldr	r0, [pc, #108]	; (8b0c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x70>)
    8a9e:	491a      	ldr	r1, [pc, #104]	; (8b08 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x6c>)
    8aa0:	6081      	str	r1, [r0, #8]
    8aa2:	491b      	ldr	r1, [pc, #108]	; (8b10 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
    8aa4:	6041      	str	r1, [r0, #4]
    8aa6:	491b      	ldr	r1, [pc, #108]	; (8b14 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    8aa8:	6001      	str	r1, [r0, #0]
    8aaa:	491b      	ldr	r1, [pc, #108]	; (8b18 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    8aac:	6281      	str	r1, [r0, #40]	; 0x28
    8aae:	491b      	ldr	r1, [pc, #108]	; (8b1c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    8ab0:	62c1      	str	r1, [r0, #44]	; 0x2c
    8ab2:	491b      	ldr	r1, [pc, #108]	; (8b20 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    8ab4:	60c1      	str	r1, [r0, #12]
    8ab6:	491b      	ldr	r1, [pc, #108]	; (8b24 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    8ab8:	6181      	str	r1, [r0, #24]
    8aba:	491b      	ldr	r1, [pc, #108]	; (8b28 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    8abc:	6301      	str	r1, [r0, #48]	; 0x30
    8abe:	491b      	ldr	r1, [pc, #108]	; (8b2c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    8ac0:	6201      	str	r1, [r0, #32]
    8ac2:	491b      	ldr	r1, [pc, #108]	; (8b30 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    8ac4:	64c1      	str	r1, [r0, #76]	; 0x4c
    8ac6:	491b      	ldr	r1, [pc, #108]	; (8b34 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    8ac8:	6481      	str	r1, [r0, #72]	; 0x48
    8aca:	491b      	ldr	r1, [pc, #108]	; (8b38 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    8acc:	6441      	str	r1, [r0, #68]	; 0x44
    8ace:	491b      	ldr	r1, [pc, #108]	; (8b3c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    8ad0:	6341      	str	r1, [r0, #52]	; 0x34
    8ad2:	491b      	ldr	r1, [pc, #108]	; (8b40 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    8ad4:	61c1      	str	r1, [r0, #28]
    8ad6:	481c      	ldr	r0, [pc, #112]	; (8b48 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    8ad8:	491a      	ldr	r1, [pc, #104]	; (8b44 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    8ada:	6081      	str	r1, [r0, #8]
    8adc:	491b      	ldr	r1, [pc, #108]	; (8b4c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    8ade:	61c1      	str	r1, [r0, #28]
    8ae0:	491b      	ldr	r1, [pc, #108]	; (8b50 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    8ae2:	6241      	str	r1, [r0, #36]	; 0x24
    8ae4:	491b      	ldr	r1, [pc, #108]	; (8b54 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    8ae6:	62c1      	str	r1, [r0, #44]	; 0x2c
    8ae8:	491b      	ldr	r1, [pc, #108]	; (8b58 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    8aea:	6101      	str	r1, [r0, #16]
    8aec:	491b      	ldr	r1, [pc, #108]	; (8b5c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    8aee:	6141      	str	r1, [r0, #20]
    8af0:	491b      	ldr	r1, [pc, #108]	; (8b60 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    8af2:	6441      	str	r1, [r0, #68]	; 0x44
    8af4:	6341      	str	r1, [r0, #52]	; 0x34
    8af6:	491b      	ldr	r1, [pc, #108]	; (8b64 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    8af8:	6181      	str	r1, [r0, #24]
    8afa:	491b      	ldr	r1, [pc, #108]	; (8b68 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    8afc:	6301      	str	r1, [r0, #48]	; 0x30
    8afe:	491b      	ldr	r1, [pc, #108]	; (8b6c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    8b00:	6481      	str	r1, [r0, #72]	; 0x48
    8b02:	491b      	ldr	r1, [pc, #108]	; (8b70 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    8b04:	64c1      	str	r1, [r0, #76]	; 0x4c
    8b06:	4770      	bx	lr
    8b08:	0000a0f1 	.word	0x0000a0f1
    8b0c:	20000140 	.word	0x20000140
    8b10:	00009a59 	.word	0x00009a59
    8b14:	00009ab5 	.word	0x00009ab5
    8b18:	00009e19 	.word	0x00009e19
    8b1c:	00009e5d 	.word	0x00009e5d
    8b20:	00009b61 	.word	0x00009b61
    8b24:	0000a0c9 	.word	0x0000a0c9
    8b28:	0000a20d 	.word	0x0000a20d
    8b2c:	00009c0d 	.word	0x00009c0d
    8b30:	00009ded 	.word	0x00009ded
    8b34:	00009dc1 	.word	0x00009dc1
    8b38:	0000a089 	.word	0x0000a089
    8b3c:	0000a0b9 	.word	0x0000a0b9
    8b40:	0000a125 	.word	0x0000a125
    8b44:	0000a585 	.word	0x0000a585
    8b48:	200001a4 	.word	0x200001a4
    8b4c:	0000a5ad 	.word	0x0000a5ad
    8b50:	0000a36d 	.word	0x0000a36d
    8b54:	0000a445 	.word	0x0000a445
    8b58:	0000a341 	.word	0x0000a341
    8b5c:	0000a4ed 	.word	0x0000a4ed
    8b60:	0000a4c9 	.word	0x0000a4c9
    8b64:	0000a511 	.word	0x0000a511
    8b68:	0000a605 	.word	0x0000a605
    8b6c:	0000a3fd 	.word	0x0000a3fd
    8b70:	0000a42d 	.word	0x0000a42d

00008b74 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    8b74:	4806      	ldr	r0, [pc, #24]	; (8b90 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    8b76:	4905      	ldr	r1, [pc, #20]	; (8b8c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    8b78:	6581      	str	r1, [r0, #88]	; 0x58
    8b7a:	4906      	ldr	r1, [pc, #24]	; (8b94 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    8b7c:	6601      	str	r1, [r0, #96]	; 0x60
    8b7e:	4807      	ldr	r0, [pc, #28]	; (8b9c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    8b80:	4905      	ldr	r1, [pc, #20]	; (8b98 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    8b82:	6581      	str	r1, [r0, #88]	; 0x58
    8b84:	4906      	ldr	r1, [pc, #24]	; (8ba0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    8b86:	65c1      	str	r1, [r0, #92]	; 0x5c
    8b88:	4770      	bx	lr
    8b8a:	0000      	.short	0x0000
    8b8c:	00009e7d 	.word	0x00009e7d
    8b90:	20000140 	.word	0x20000140
    8b94:	00009f45 	.word	0x00009f45
    8b98:	0000a471 	.word	0x0000a471
    8b9c:	200001a4 	.word	0x200001a4
    8ba0:	0000a4a1 	.word	0x0000a4a1

00008ba4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    8ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8ba8:	2701      	movs	r7, #1
    8baa:	4c73      	ldr	r4, [pc, #460]	; (8d78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d4>)
    8bac:	2500      	movs	r5, #0
    8bae:	f367 0107 	bfi	r1, r7, #0, #8
    8bb2:	8065      	strh	r5, [r4, #2]
    8bb4:	7065      	strb	r5, [r4, #1]
    8bb6:	7025      	strb	r5, [r4, #0]
    8bb8:	60a0      	str	r0, [r4, #8]
    8bba:	4689      	mov	r9, r1
    8bbc:	4680      	mov	r8, r0
    8bbe:	f880 70fb 	strb.w	r7, [r0, #251]	; 0xfb
    8bc2:	8800      	ldrh	r0, [r0, #0]
    8bc4:	f7fc fb5e 	bl	5284 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    8bc8:	b180      	cbz	r0, 8bec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
    8bca:	68a0      	ldr	r0, [r4, #8]
    8bcc:	8800      	ldrh	r0, [r0, #0]
    8bce:	f7fc fdad 	bl	572c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    8bd2:	68a0      	ldr	r0, [r4, #8]
    8bd4:	8800      	ldrh	r0, [r0, #0]
    8bd6:	f7fc fd51 	bl	567c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    8bda:	68a0      	ldr	r0, [r4, #8]
    8bdc:	f8b0 10f2 	ldrh.w	r1, [r0, #242]	; 0xf2
    8be0:	b1a9      	cbz	r1, 8c0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    8be2:	3068      	adds	r0, #104	; 0x68
    8be4:	f006 f94b 	bl	ee7e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8be8:	b128      	cbz	r0, 8bf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52>
    8bea:	e010      	b.n	8c0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    8bec:	f640 31a9 	movw	r1, #2985	; 0xba9
    8bf0:	2031      	movs	r0, #49	; 0x31
    8bf2:	f7fb fefd 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8bf6:	68a0      	ldr	r0, [r4, #8]
    8bf8:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    8bfc:	b139      	cbz	r1, 8c0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    8bfe:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    8c02:	2301      	movs	r3, #1
    8c04:	4619      	mov	r1, r3
    8c06:	3068      	adds	r0, #104	; 0x68
    8c08:	f004 fe74 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c0c:	b180      	cbz	r0, 8c30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c>
    8c0e:	68a0      	ldr	r0, [r4, #8]
    8c10:	3068      	adds	r0, #104	; 0x68
    8c12:	f006 f934 	bl	ee7e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8c16:	b128      	cbz	r0, 8c24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    8c18:	68a0      	ldr	r0, [r4, #8]
    8c1a:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    8c1e:	bf00      	nop
    8c20:	f000 fb88 	bl	9334 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x790>
    8c24:	68a0      	ldr	r0, [r4, #8]
    8c26:	f890 10fd 	ldrb.w	r1, [r0, #253]	; 0xfd
    8c2a:	b189      	cbz	r1, 8c50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac>
    8c2c:	80a5      	strh	r5, [r4, #4]
    8c2e:	e01e      	b.n	8c6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    8c30:	68a0      	ldr	r0, [r4, #8]
    8c32:	f8a0 50a0 	strh.w	r5, [r0, #160]	; 0xa0
    8c36:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
    8c3a:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    8c3e:	2100      	movs	r1, #0
    8c40:	2002      	movs	r0, #2
    8c42:	f000 fe03 	bl	984c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8c46:	68a0      	ldr	r0, [r4, #8]
    8c48:	f880 50fa 	strb.w	r5, [r0, #250]	; 0xfa
    8c4c:	2002      	movs	r0, #2
    8c4e:	e7e7      	b.n	8c20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c>
    8c50:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
    8c54:	f88d 1000 	strb.w	r1, [sp]
    8c58:	9900      	ldr	r1, [sp, #0]
    8c5a:	9100      	str	r1, [sp, #0]
    8c5c:	f89d 1000 	ldrb.w	r1, [sp]
    8c60:	b919      	cbnz	r1, 8c6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6>
    8c62:	8b81      	ldrh	r1, [r0, #28]
    8c64:	8902      	ldrh	r2, [r0, #8]
    8c66:	4291      	cmp	r1, r2
    8c68:	d800      	bhi.n	8c6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8>
    8c6a:	8901      	ldrh	r1, [r0, #8]
    8c6c:	80a1      	strh	r1, [r4, #4]
    8c6e:	f830 1ff6 	ldrh.w	r1, [r0, #246]!
    8c72:	1e49      	subs	r1, r1, #1
    8c74:	b28e      	uxth	r6, r1
    8c76:	f830 1f02 	ldrh.w	r1, [r0, #2]!
    8c7a:	4431      	add	r1, r6
    8c7c:	f820 195c 	strh.w	r1, [r0], #-92
    8c80:	8801      	ldrh	r1, [r0, #0]
    8c82:	4431      	add	r1, r6
    8c84:	8001      	strh	r1, [r0, #0]
    8c86:	f001 fceb 	bl	a660 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1abc>
    8c8a:	b120      	cbz	r0, 8c96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf2>
    8c8c:	68a0      	ldr	r0, [r4, #8]
    8c8e:	f850 1f90 	ldr.w	r1, [r0, #144]!
    8c92:	4431      	add	r1, r6
    8c94:	6001      	str	r1, [r0, #0]
    8c96:	68a0      	ldr	r0, [r4, #8]
    8c98:	f8b0 10f2 	ldrh.w	r1, [r0, #242]	; 0xf2
    8c9c:	2901      	cmp	r1, #1
    8c9e:	d802      	bhi.n	8ca6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x102>
    8ca0:	1c49      	adds	r1, r1, #1
    8ca2:	f8a0 10f2 	strh.w	r1, [r0, #242]	; 0xf2
    8ca6:	b10e      	cbz	r6, 8cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    8ca8:	f880 5104 	strb.w	r5, [r0, #260]	; 0x104
    8cac:	f880 50fa 	strb.w	r5, [r0, #250]	; 0xfa
    8cb0:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8cb4:	290b      	cmp	r1, #11
    8cb6:	d001      	beq.n	8cbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x118>
    8cb8:	290c      	cmp	r1, #12
    8cba:	d118      	bne.n	8cee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a>
    8cbc:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
    8cc0:	f8b0 318c 	ldrh.w	r3, [r0, #396]	; 0x18c
    8cc4:	1ad2      	subs	r2, r2, r3
    8cc6:	b212      	sxth	r2, r2
    8cc8:	2a00      	cmp	r2, #0
    8cca:	db10      	blt.n	8cee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a>
    8ccc:	f8d0 118e 	ldr.w	r1, [r0, #398]	; 0x18e
    8cd0:	f8c0 107e 	str.w	r1, [r0, #126]	; 0x7e
    8cd4:	f890 1192 	ldrb.w	r1, [r0, #402]	; 0x192
    8cd8:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
    8cdc:	2103      	movs	r1, #3
    8cde:	f7fd fd99 	bl	6814 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    8ce2:	68a0      	ldr	r0, [r4, #8]
    8ce4:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
    8ce8:	f880 70b6 	strb.w	r7, [r0, #182]	; 0xb6
    8cec:	e024      	b.n	8d38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    8cee:	2924      	cmp	r1, #36	; 0x24
    8cf0:	d10f      	bne.n	8d12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e>
    8cf2:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
    8cf6:	f8b0 218c 	ldrh.w	r2, [r0, #396]	; 0x18c
    8cfa:	1a89      	subs	r1, r1, r2
    8cfc:	b209      	sxth	r1, r1
    8cfe:	2900      	cmp	r1, #0
    8d00:	db07      	blt.n	8d12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e>
    8d02:	f000 fe4f 	bl	99a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe00>
    8d06:	68a0      	ldr	r0, [r4, #8]
    8d08:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
    8d0c:	f880 51a6 	strb.w	r5, [r0, #422]	; 0x1a6
    8d10:	e012      	b.n	8d38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    8d12:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    8d16:	2924      	cmp	r1, #36	; 0x24
    8d18:	d001      	beq.n	8d1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17a>
    8d1a:	2925      	cmp	r1, #37	; 0x25
    8d1c:	d10c      	bne.n	8d38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    8d1e:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
    8d22:	f8b0 018c 	ldrh.w	r0, [r0, #396]	; 0x18c
    8d26:	1a08      	subs	r0, r1, r0
    8d28:	b200      	sxth	r0, r0
    8d2a:	2800      	cmp	r0, #0
    8d2c:	db04      	blt.n	8d38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    8d2e:	f000 fe39 	bl	99a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe00>
    8d32:	68a0      	ldr	r0, [r4, #8]
    8d34:	f880 5075 	strb.w	r5, [r0, #117]	; 0x75
    8d38:	68a0      	ldr	r0, [r4, #8]
    8d3a:	4601      	mov	r1, r0
    8d3c:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
    8d40:	3068      	adds	r0, #104	; 0x68
    8d42:	f004 ffaf 	bl	dca4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    8d46:	480d      	ldr	r0, [pc, #52]	; (8d7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d8>)
    8d48:	9000      	str	r0, [sp, #0]
    8d4a:	4b0d      	ldr	r3, [pc, #52]	; (8d80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc>)
    8d4c:	4a0d      	ldr	r2, [pc, #52]	; (8d84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e0>)
    8d4e:	4641      	mov	r1, r8
    8d50:	4648      	mov	r0, r9
    8d52:	f7fc fda1 	bl	5898 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8d56:	68a0      	ldr	r0, [r4, #8]
    8d58:	2301      	movs	r3, #1
    8d5a:	2105      	movs	r1, #5
    8d5c:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8d60:	3068      	adds	r0, #104	; 0x68
    8d62:	f004 fdc7 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8d66:	2800      	cmp	r0, #0
    8d68:	d003      	beq.n	8d72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ce>
    8d6a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8d6e:	f7fc bd8d 	b.w	588c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8d76:	0000      	.short	0x0000
    8d78:	2000012c 	.word	0x2000012c
    8d7c:	000094e5 	.word	0x000094e5
    8d80:	00008ffd 	.word	0x00008ffd
    8d84:	000098f1 	.word	0x000098f1
    8d88:	b570      	push	{r4, r5, r6, lr}
    8d8a:	4c0f      	ldr	r4, [pc, #60]	; (8dc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>)
    8d8c:	68a5      	ldr	r5, [r4, #8]
    8d8e:	f895 1075 	ldrb.w	r1, [r5, #117]	; 0x75
    8d92:	2920      	cmp	r1, #32
    8d94:	d002      	beq.n	8d9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>
    8d96:	2926      	cmp	r1, #38	; 0x26
    8d98:	d003      	beq.n	8da2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe>
    8d9a:	e011      	b.n	8dc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    8d9c:	f000 fe38 	bl	9a10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    8da0:	e008      	b.n	8db4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x210>
    8da2:	f895 2076 	ldrb.w	r2, [r5, #118]	; 0x76
    8da6:	2301      	movs	r3, #1
    8da8:	210b      	movs	r1, #11
    8daa:	f105 0068 	add.w	r0, r5, #104	; 0x68
    8dae:	f004 fda1 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8db2:	b138      	cbz	r0, 8dc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x220>
    8db4:	68a1      	ldr	r1, [r4, #8]
    8db6:	2000      	movs	r0, #0
    8db8:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    8dbc:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    8dc0:	2000      	movs	r0, #0
    8dc2:	bd70      	pop	{r4, r5, r6, pc}
    8dc4:	202a      	movs	r0, #42	; 0x2a
    8dc6:	e7e9      	b.n	8d9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>
    8dc8:	2000012c 	.word	0x2000012c
    8dcc:	4804      	ldr	r0, [pc, #16]	; (8de0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>)
    8dce:	2100      	movs	r1, #0
    8dd0:	6880      	ldr	r0, [r0, #8]
    8dd2:	f820 1fa8 	strh.w	r1, [r0, #168]!
    8dd6:	7881      	ldrb	r1, [r0, #2]
    8dd8:	1c49      	adds	r1, r1, #1
    8dda:	7081      	strb	r1, [r0, #2]
    8ddc:	4770      	bx	lr
    8dde:	0000      	.short	0x0000
    8de0:	2000012c 	.word	0x2000012c
    8de4:	4807      	ldr	r0, [pc, #28]	; (8e04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x260>)
    8de6:	b510      	push	{r4, lr}
    8de8:	6881      	ldr	r1, [r0, #8]
    8dea:	f811 0faa 	ldrb.w	r0, [r1, #170]!
    8dee:	1e40      	subs	r0, r0, #1
    8df0:	b240      	sxtb	r0, r0
    8df2:	7008      	strb	r0, [r1, #0]
    8df4:	2800      	cmp	r0, #0
    8df6:	da04      	bge.n	8e02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25e>
    8df8:	f240 118f 	movw	r1, #399	; 0x18f
    8dfc:	2031      	movs	r0, #49	; 0x31
    8dfe:	f7fb fdf7 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e02:	bd10      	pop	{r4, pc}
    8e04:	2000012c 	.word	0x2000012c
    8e08:	4917      	ldr	r1, [pc, #92]	; (8e68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>)
    8e0a:	b510      	push	{r4, lr}
    8e0c:	6889      	ldr	r1, [r1, #8]
    8e0e:	f891 2076 	ldrb.w	r2, [r1, #118]	; 0x76
    8e12:	b1b8      	cbz	r0, 8e44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2a0>
    8e14:	2a10      	cmp	r2, #16
    8e16:	d006      	beq.n	8e26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x282>
    8e18:	2a14      	cmp	r2, #20
    8e1a:	d007      	beq.n	8e2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x288>
    8e1c:	2a15      	cmp	r2, #21
    8e1e:	d008      	beq.n	8e32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28e>
    8e20:	2a1b      	cmp	r2, #27
    8e22:	d11c      	bne.n	8e5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ba>
    8e24:	e008      	b.n	8e38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x294>
    8e26:	2101      	movs	r1, #1
    8e28:	200b      	movs	r0, #11
    8e2a:	e007      	b.n	8e3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    8e2c:	f001 fa4a 	bl	a2c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1720>
    8e30:	e006      	b.n	8e40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x29c>
    8e32:	f000 fd29 	bl	9888 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce4>
    8e36:	e003      	b.n	8e40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x29c>
    8e38:	2101      	movs	r1, #1
    8e3a:	2006      	movs	r0, #6
    8e3c:	f000 fd06 	bl	984c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8e40:	2001      	movs	r0, #1
    8e42:	bd10      	pop	{r4, pc}
    8e44:	2a21      	cmp	r2, #33	; 0x21
    8e46:	d10a      	bne.n	8e5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ba>
    8e48:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    8e4c:	2802      	cmp	r0, #2
    8e4e:	d008      	beq.n	8e62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2be>
    8e50:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    8e54:	2801      	cmp	r0, #1
    8e56:	d102      	bne.n	8e5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ba>
    8e58:	f891 01a7 	ldrb.w	r0, [r1, #423]	; 0x1a7
    8e5c:	b108      	cbz	r0, 8e62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2be>
    8e5e:	2000      	movs	r0, #0
    8e60:	bd10      	pop	{r4, pc}
    8e62:	2101      	movs	r1, #1
    8e64:	2017      	movs	r0, #23
    8e66:	e7e9      	b.n	8e3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    8e68:	2000012c 	.word	0x2000012c
    8e6c:	b510      	push	{r4, lr}
    8e6e:	bbe8      	cbnz	r0, 8eec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    8e70:	4c31      	ldr	r4, [pc, #196]	; (8f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x394>)
    8e72:	68a0      	ldr	r0, [r4, #8]
    8e74:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    8e78:	07ca      	lsls	r2, r1, #31
    8e7a:	d002      	beq.n	8e82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2de>
    8e7c:	2101      	movs	r1, #1
    8e7e:	2009      	movs	r0, #9
    8e80:	e052      	b.n	8f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x384>
    8e82:	078a      	lsls	r2, r1, #30
    8e84:	d50a      	bpl.n	8e9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
    8e86:	2101      	movs	r1, #1
    8e88:	200c      	movs	r0, #12
    8e8a:	f000 fcdf 	bl	984c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8e8e:	68a0      	ldr	r0, [r4, #8]
    8e90:	f810 1fae 	ldrb.w	r1, [r0, #174]!
    8e94:	f041 0101 	orr.w	r1, r1, #1
    8e98:	7001      	strb	r1, [r0, #0]
    8e9a:	e047      	b.n	8f2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x388>
    8e9c:	074a      	lsls	r2, r1, #29
    8e9e:	d502      	bpl.n	8ea6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x302>
    8ea0:	2101      	movs	r1, #1
    8ea2:	2013      	movs	r0, #19
    8ea4:	e040      	b.n	8f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x384>
    8ea6:	070a      	lsls	r2, r1, #28
    8ea8:	d505      	bpl.n	8eb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x312>
    8eaa:	f810 1fe1 	ldrb.w	r1, [r0, #225]!
    8eae:	7141      	strb	r1, [r0, #5]
    8eb0:	2101      	movs	r1, #1
    8eb2:	2007      	movs	r0, #7
    8eb4:	e038      	b.n	8f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x384>
    8eb6:	f011 0f30 	tst.w	r1, #48	; 0x30
    8eba:	d03b      	beq.n	8f34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    8ebc:	f890 119d 	ldrb.w	r1, [r0, #413]	; 0x19d
    8ec0:	b9a1      	cbnz	r1, 8eec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    8ec2:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    8ec6:	b1e1      	cbz	r1, 8f02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35e>
    8ec8:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8ecc:	2924      	cmp	r1, #36	; 0x24
    8ece:	d02f      	beq.n	8f30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x38c>
    8ed0:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    8ed4:	2924      	cmp	r1, #36	; 0x24
    8ed6:	d02b      	beq.n	8f30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x38c>
    8ed8:	f05f 0300 	movs.w	r3, #0
    8edc:	f500 72c7 	add.w	r2, r0, #398	; 0x18e
    8ee0:	f500 71ce 	add.w	r1, r0, #412	; 0x19c
    8ee4:	f005 f93c 	bl	e160 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8ee8:	68a1      	ldr	r1, [r4, #8]
    8eea:	e000      	b.n	8eee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x34a>
    8eec:	e022      	b.n	8f34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    8eee:	f811 0f77 	ldrb.w	r0, [r1, #119]!
    8ef2:	f020 0020 	bic.w	r0, r0, #32
    8ef6:	f040 0010 	orr.w	r0, r0, #16
    8efa:	7008      	strb	r0, [r1, #0]
    8efc:	2000      	movs	r0, #0
    8efe:	f881 0125 	strb.w	r0, [r1, #293]	; 0x125
    8f02:	68a0      	ldr	r0, [r4, #8]
    8f04:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    8f08:	06c9      	lsls	r1, r1, #27
    8f0a:	d513      	bpl.n	8f34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    8f0c:	f005 f943 	bl	e196 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8f10:	f000 f906 	bl	9120 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57c>
    8f14:	68a1      	ldr	r1, [r4, #8]
    8f16:	f101 0024 	add.w	r0, r1, #36	; 0x24
    8f1a:	8bc2      	ldrh	r2, [r0, #30]
    8f1c:	f821 2fe6 	strh.w	r2, [r1, #230]!
    8f20:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8f22:	8048      	strh	r0, [r1, #2]
    8f24:	2101      	movs	r1, #1
    8f26:	2015      	movs	r0, #21
    8f28:	f000 fc90 	bl	984c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8f2c:	2001      	movs	r0, #1
    8f2e:	bd10      	pop	{r4, pc}
    8f30:	2301      	movs	r3, #1
    8f32:	e7d3      	b.n	8edc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x338>
    8f34:	2000      	movs	r0, #0
    8f36:	bd10      	pop	{r4, pc}
    8f38:	2000012c 	.word	0x2000012c
    8f3c:	b570      	push	{r4, r5, r6, lr}
    8f3e:	460d      	mov	r5, r1
    8f40:	4606      	mov	r6, r0
    8f42:	f004 ff5a 	bl	ddfa <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    8f46:	4604      	mov	r4, r0
    8f48:	4630      	mov	r0, r6
    8f4a:	f004 ff62 	bl	de12 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    8f4e:	4629      	mov	r1, r5
    8f50:	f000 f81e 	bl	8f90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ec>
    8f54:	b1b8      	cbz	r0, 8f86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e2>
    8f56:	4620      	mov	r0, r4
    8f58:	f004 fd65 	bl	da26 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8f5c:	0001      	movs	r1, r0
    8f5e:	d00d      	beq.n	8f7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d8>
    8f60:	480a      	ldr	r0, [pc, #40]	; (8f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e8>)
    8f62:	6880      	ldr	r0, [r0, #8]
    8f64:	f890 2063 	ldrb.w	r2, [r0, #99]	; 0x63
    8f68:	428a      	cmp	r2, r1
    8f6a:	d007      	beq.n	8f7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d8>
    8f6c:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    8f70:	2901      	cmp	r1, #1
    8f72:	d005      	beq.n	8f80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3dc>
    8f74:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
    8f78:	4220      	tst	r0, r4
    8f7a:	d004      	beq.n	8f86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e2>
    8f7c:	2001      	movs	r0, #1
    8f7e:	bd70      	pop	{r4, r5, r6, pc}
    8f80:	f890 01a9 	ldrb.w	r0, [r0, #425]	; 0x1a9
    8f84:	e7f8      	b.n	8f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d4>
    8f86:	2000      	movs	r0, #0
    8f88:	bd70      	pop	{r4, r5, r6, pc}
    8f8a:	0000      	.short	0x0000
    8f8c:	2000012c 	.word	0x2000012c
    8f90:	b570      	push	{r4, r5, r6, lr}
    8f92:	460d      	mov	r5, r1
    8f94:	4604      	mov	r4, r0
    8f96:	f004 fd46 	bl	da26 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8f9a:	b350      	cbz	r0, 8ff2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44e>
    8f9c:	4916      	ldr	r1, [pc, #88]	; (8ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x454>)
    8f9e:	6889      	ldr	r1, [r1, #8]
    8fa0:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    8fa4:	4282      	cmp	r2, r0
    8fa6:	d024      	beq.n	8ff2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44e>
    8fa8:	f891 31a6 	ldrb.w	r3, [r1, #422]	; 0x1a6
    8fac:	2b01      	cmp	r3, #1
    8fae:	d005      	beq.n	8fbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x418>
    8fb0:	f891 305e 	ldrb.w	r3, [r1, #94]	; 0x5e
    8fb4:	4223      	tst	r3, r4
    8fb6:	d013      	beq.n	8fe0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43c>
    8fb8:	b11d      	cbz	r5, 8fc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41e>
    8fba:	e01a      	b.n	8ff2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44e>
    8fbc:	f891 31a8 	ldrb.w	r3, [r1, #424]	; 0x1a8
    8fc0:	e7f8      	b.n	8fb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x410>
    8fc2:	f891 105b 	ldrb.w	r1, [r1, #91]	; 0x5b
    8fc6:	4221      	tst	r1, r4
    8fc8:	d113      	bne.n	8ff2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44e>
    8fca:	b15a      	cbz	r2, 8fe4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x440>
    8fcc:	2a04      	cmp	r2, #4
    8fce:	d00e      	beq.n	8fee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    8fd0:	2804      	cmp	r0, #4
    8fd2:	d00c      	beq.n	8fee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    8fd4:	2a08      	cmp	r2, #8
    8fd6:	d00a      	beq.n	8fee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    8fd8:	2808      	cmp	r0, #8
    8fda:	d008      	beq.n	8fee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    8fdc:	4282      	cmp	r2, r0
    8fde:	d908      	bls.n	8ff2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44e>
    8fe0:	2000      	movs	r0, #0
    8fe2:	bd70      	pop	{r4, r5, r6, pc}
    8fe4:	f240 1165 	movw	r1, #357	; 0x165
    8fe8:	2006      	movs	r0, #6
    8fea:	f7fb fd01 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8fee:	4282      	cmp	r2, r0
    8ff0:	d3f6      	bcc.n	8fe0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43c>
    8ff2:	2001      	movs	r0, #1
    8ff4:	bd70      	pop	{r4, r5, r6, pc}
    8ff6:	0000      	.short	0x0000
    8ff8:	2000012c 	.word	0x2000012c
    8ffc:	490c      	ldr	r1, [pc, #48]	; (9030 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48c>)
    8ffe:	4602      	mov	r2, r0
    9000:	7848      	ldrb	r0, [r1, #1]
    9002:	b998      	cbnz	r0, 902c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x488>
    9004:	4608      	mov	r0, r1
    9006:	6880      	ldr	r0, [r0, #8]
    9008:	b142      	cbz	r2, 901c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x478>
    900a:	7889      	ldrb	r1, [r1, #2]
    900c:	0709      	lsls	r1, r1, #28
    900e:	d503      	bpl.n	9018 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x474>
    9010:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    9014:	2808      	cmp	r0, #8
    9016:	d009      	beq.n	902c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x488>
    9018:	2001      	movs	r0, #1
    901a:	4770      	bx	lr
    901c:	f100 0124 	add.w	r1, r0, #36	; 0x24
    9020:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    9022:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
    9024:	428a      	cmp	r2, r1
    9026:	d801      	bhi.n	902c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x488>
    9028:	f7fe bf06 	b.w	7e38 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    902c:	2000      	movs	r0, #0
    902e:	4770      	bx	lr
    9030:	2000012c 	.word	0x2000012c
    9034:	b570      	push	{r4, r5, r6, lr}
    9036:	4c39      	ldr	r4, [pc, #228]	; (911c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x578>)
    9038:	4605      	mov	r5, r0
    903a:	68a0      	ldr	r0, [r4, #8]
    903c:	3068      	adds	r0, #104	; 0x68
    903e:	f005 ff1e 	bl	ee7e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9042:	2800      	cmp	r0, #0
    9044:	d169      	bne.n	911a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x576>
    9046:	2d00      	cmp	r5, #0
    9048:	d167      	bne.n	911a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x576>
    904a:	68a0      	ldr	r0, [r4, #8]
    904c:	2301      	movs	r3, #1
    904e:	4619      	mov	r1, r3
    9050:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    9054:	3068      	adds	r0, #104	; 0x68
    9056:	f004 fc4d 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    905a:	2800      	cmp	r0, #0
    905c:	d15d      	bne.n	911a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x576>
    905e:	68a0      	ldr	r0, [r4, #8]
    9060:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    9064:	b149      	cbz	r1, 907a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d6>
    9066:	2100      	movs	r1, #0
    9068:	f8a0 10a0 	strh.w	r1, [r0, #160]	; 0xa0
    906c:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
    9070:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    9074:	2100      	movs	r1, #0
    9076:	2002      	movs	r0, #2
    9078:	e045      	b.n	9106 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x562>
    907a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    907e:	2301      	movs	r3, #1
    9080:	2104      	movs	r1, #4
    9082:	3068      	adds	r0, #104	; 0x68
    9084:	f004 fc36 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9088:	4605      	mov	r5, r0
    908a:	f7ff feef 	bl	8e6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c8>
    908e:	2800      	cmp	r0, #0
    9090:	d143      	bne.n	911a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x576>
    9092:	4628      	mov	r0, r5
    9094:	f7ff feb8 	bl	8e08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    9098:	2800      	cmp	r0, #0
    909a:	d13e      	bne.n	911a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x576>
    909c:	68a0      	ldr	r0, [r4, #8]
    909e:	2301      	movs	r3, #1
    90a0:	2100      	movs	r1, #0
    90a2:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    90a6:	3068      	adds	r0, #104	; 0x68
    90a8:	f004 fc24 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    90ac:	b178      	cbz	r0, 90ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52a>
    90ae:	68a0      	ldr	r0, [r4, #8]
    90b0:	2301      	movs	r3, #1
    90b2:	2104      	movs	r1, #4
    90b4:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    90b8:	3068      	adds	r0, #104	; 0x68
    90ba:	f004 fc1b 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    90be:	b930      	cbnz	r0, 90ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52a>
    90c0:	68a0      	ldr	r0, [r4, #8]
    90c2:	f890 009a 	ldrb.w	r0, [r0, #154]	; 0x9a
    90c6:	b110      	cbz	r0, 90ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52a>
    90c8:	2100      	movs	r1, #0
    90ca:	2012      	movs	r0, #18
    90cc:	e01b      	b.n	9106 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x562>
    90ce:	68a0      	ldr	r0, [r4, #8]
    90d0:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    90d4:	290a      	cmp	r1, #10
    90d6:	d01a      	beq.n	910e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x56a>
    90d8:	2d00      	cmp	r5, #0
    90da:	d11e      	bne.n	911a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x576>
    90dc:	f000 fb16 	bl	970c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb68>
    90e0:	2800      	cmp	r0, #0
    90e2:	d11a      	bne.n	911a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x576>
    90e4:	68a0      	ldr	r0, [r4, #8]
    90e6:	2301      	movs	r3, #1
    90e8:	2100      	movs	r1, #0
    90ea:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    90ee:	3068      	adds	r0, #104	; 0x68
    90f0:	f004 fc00 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    90f4:	2800      	cmp	r0, #0
    90f6:	d010      	beq.n	911a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x576>
    90f8:	68a0      	ldr	r0, [r4, #8]
    90fa:	f890 0184 	ldrb.w	r0, [r0, #388]	; 0x184
    90fe:	2800      	cmp	r0, #0
    9100:	d00b      	beq.n	911a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x576>
    9102:	2100      	movs	r1, #0
    9104:	20ff      	movs	r0, #255	; 0xff
    9106:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    910a:	f000 bb9f 	b.w	984c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    910e:	f810 1fe2 	ldrb.w	r1, [r0, #226]!
    9112:	7101      	strb	r1, [r0, #4]
    9114:	2100      	movs	r1, #0
    9116:	2007      	movs	r0, #7
    9118:	e7f5      	b.n	9106 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x562>
    911a:	bd70      	pop	{r4, r5, r6, pc}
    911c:	2000012c 	.word	0x2000012c
    9120:	480a      	ldr	r0, [pc, #40]	; (914c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5a8>)
    9122:	b510      	push	{r4, lr}
    9124:	6881      	ldr	r1, [r0, #8]
    9126:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    912a:	2801      	cmp	r0, #1
    912c:	d009      	beq.n	9142 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x59e>
    912e:	8808      	ldrh	r0, [r1, #0]
    9130:	f501 72e9 	add.w	r2, r1, #466	; 0x1d2
    9134:	3124      	adds	r1, #36	; 0x24
    9136:	f004 ffef 	bl	e118 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    913a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    913e:	f001 bbb3 	b.w	a8a8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9142:	2002      	movs	r0, #2
    9144:	f881 0058 	strb.w	r0, [r1, #88]	; 0x58
    9148:	bd10      	pop	{r4, pc}
    914a:	0000      	.short	0x0000
    914c:	2000012c 	.word	0x2000012c
    9150:	b570      	push	{r4, r5, r6, lr}
    9152:	4c25      	ldr	r4, [pc, #148]	; (91e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>)
    9154:	0005      	movs	r5, r0
    9156:	d12f      	bne.n	91b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x614>
    9158:	f000 f8a4 	bl	92a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x700>
    915c:	f000 f848 	bl	91f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64c>
    9160:	0005      	movs	r5, r0
    9162:	d129      	bne.n	91b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x614>
    9164:	8860      	ldrh	r0, [r4, #2]
    9166:	0741      	lsls	r1, r0, #29
    9168:	d506      	bpl.n	9178 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    916a:	68a1      	ldr	r1, [r4, #8]
    916c:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    9170:	2907      	cmp	r1, #7
    9172:	d101      	bne.n	9178 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    9174:	2101      	movs	r1, #1
    9176:	7021      	strb	r1, [r4, #0]
    9178:	0780      	lsls	r0, r0, #30
    917a:	d512      	bpl.n	91a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fe>
    917c:	68e0      	ldr	r0, [r4, #12]
    917e:	78c0      	ldrb	r0, [r0, #3]
    9180:	2819      	cmp	r0, #25
    9182:	d205      	bcs.n	9190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ec>
    9184:	4919      	ldr	r1, [pc, #100]	; (91ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x648>)
    9186:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    918a:	b109      	cbz	r1, 9190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ec>
    918c:	4788      	blx	r1
    918e:	e008      	b.n	91a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fe>
    9190:	28ff      	cmp	r0, #255	; 0xff
    9192:	d004      	beq.n	919e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fa>
    9194:	f240 713c 	movw	r1, #1852	; 0x73c
    9198:	2031      	movs	r0, #49	; 0x31
    919a:	f7fb fc29 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    919e:	f001 f8c3 	bl	a328 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1784>
    91a2:	78a0      	ldrb	r0, [r4, #2]
    91a4:	06c0      	lsls	r0, r0, #27
    91a6:	d507      	bpl.n	91b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x614>
    91a8:	68a0      	ldr	r0, [r4, #8]
    91aa:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    91ae:	290b      	cmp	r1, #11
    91b0:	d102      	bne.n	91b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x614>
    91b2:	210c      	movs	r1, #12
    91b4:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    91b8:	7860      	ldrb	r0, [r4, #1]
    91ba:	0700      	lsls	r0, r0, #28
    91bc:	d511      	bpl.n	91e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63e>
    91be:	68a0      	ldr	r0, [r4, #8]
    91c0:	2301      	movs	r3, #1
    91c2:	2105      	movs	r1, #5
    91c4:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    91c8:	3068      	adds	r0, #104	; 0x68
    91ca:	f004 fb93 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    91ce:	b128      	cbz	r0, 91dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    91d0:	68a1      	ldr	r1, [r4, #8]
    91d2:	2508      	movs	r5, #8
    91d4:	2000      	movs	r0, #0
    91d6:	f881 01bc 	strb.w	r0, [r1, #444]	; 0x1bc
    91da:	e002      	b.n	91e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63e>
    91dc:	2000      	movs	r0, #0
    91de:	f7fc fc15 	bl	5a0c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    91e2:	4628      	mov	r0, r5
    91e4:	bd70      	pop	{r4, r5, r6, pc}
    91e6:	0000      	.short	0x0000
    91e8:	2000012c 	.word	0x2000012c
    91ec:	200001a4 	.word	0x200001a4
    91f0:	b570      	push	{r4, r5, r6, lr}
    91f2:	4c2a      	ldr	r4, [pc, #168]	; (929c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f8>)
    91f4:	2000      	movs	r0, #0
    91f6:	78a1      	ldrb	r1, [r4, #2]
    91f8:	07c9      	lsls	r1, r1, #31
    91fa:	d015      	beq.n	9228 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x684>
    91fc:	6920      	ldr	r0, [r4, #16]
    91fe:	2301      	movs	r3, #1
    9200:	2105      	movs	r1, #5
    9202:	78c5      	ldrb	r5, [r0, #3]
    9204:	68a0      	ldr	r0, [r4, #8]
    9206:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    920a:	3068      	adds	r0, #104	; 0x68
    920c:	f004 fb72 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9210:	b158      	cbz	r0, 922a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x686>
    9212:	1ead      	subs	r5, r5, #2
    9214:	2d0a      	cmp	r5, #10
    9216:	d206      	bcs.n	9226 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x682>
    9218:	e8df f005 	tbb	[pc, r5]
    921c:	05050707 	.word	0x05050707
    9220:	05050707 	.word	0x05050707
    9224:	0707      	.short	0x0707
    9226:	2008      	movs	r0, #8
    9228:	bd70      	pop	{r4, r5, r6, pc}
    922a:	6920      	ldr	r0, [r4, #16]
    922c:	f7fd fbc8 	bl	69c0 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    9230:	b138      	cbz	r0, 9242 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69e>
    9232:	6920      	ldr	r0, [r4, #16]
    9234:	78c5      	ldrb	r5, [r0, #3]
    9236:	b145      	cbz	r5, 924a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a6>
    9238:	2d01      	cmp	r5, #1
    923a:	d006      	beq.n	924a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a6>
    923c:	2d16      	cmp	r5, #22
    923e:	d118      	bne.n	9272 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ce>
    9240:	e003      	b.n	924a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a6>
    9242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9246:	f000 bd0b 	b.w	9c60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10bc>
    924a:	68a0      	ldr	r0, [r4, #8]
    924c:	f890 0075 	ldrb.w	r0, [r0, #117]	; 0x75
    9250:	f004 fb9e 	bl	d990 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9254:	b168      	cbz	r0, 9272 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ce>
    9256:	68a1      	ldr	r1, [r4, #8]
    9258:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    925c:	281f      	cmp	r0, #31
    925e:	d008      	beq.n	9272 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ce>
    9260:	2820      	cmp	r0, #32
    9262:	d003      	beq.n	926c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c8>
    9264:	2d16      	cmp	r5, #22
    9266:	d00c      	beq.n	9282 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6de>
    9268:	2002      	movs	r0, #2
    926a:	bd70      	pop	{r4, r5, r6, pc}
    926c:	2026      	movs	r0, #38	; 0x26
    926e:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    9272:	2d19      	cmp	r5, #25
    9274:	d207      	bcs.n	9286 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e2>
    9276:	480a      	ldr	r0, [pc, #40]	; (92a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fc>)
    9278:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    927c:	b118      	cbz	r0, 9286 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e2>
    927e:	4780      	blx	r0
    9280:	e003      	b.n	928a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e6>
    9282:	2020      	movs	r0, #32
    9284:	bd70      	pop	{r4, r5, r6, pc}
    9286:	f000 fceb 	bl	9c60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10bc>
    928a:	68a2      	ldr	r2, [r4, #8]
    928c:	e9f2 1330 	ldrd	r1, r3, [r2, #192]!	; 0xc0
    9290:	1c49      	adds	r1, r1, #1
    9292:	f143 0300 	adc.w	r3, r3, #0
    9296:	e9c2 1300 	strd	r1, r3, [r2]
    929a:	bd70      	pop	{r4, r5, r6, pc}
    929c:	2000012c 	.word	0x2000012c
    92a0:	20000140 	.word	0x20000140
    92a4:	b570      	push	{r4, r5, r6, lr}
    92a6:	4c22      	ldr	r4, [pc, #136]	; (9330 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78c>)
    92a8:	78a0      	ldrb	r0, [r4, #2]
    92aa:	0700      	lsls	r0, r0, #28
    92ac:	d53e      	bpl.n	932c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>
    92ae:	68a0      	ldr	r0, [r4, #8]
    92b0:	3068      	adds	r0, #104	; 0x68
    92b2:	f005 fde4 	bl	ee7e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    92b6:	b148      	cbz	r0, 92cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    92b8:	68a0      	ldr	r0, [r4, #8]
    92ba:	21fe      	movs	r1, #254	; 0xfe
    92bc:	2500      	movs	r5, #0
    92be:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    92c2:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    92c6:	2919      	cmp	r1, #25
    92c8:	d10c      	bne.n	92e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x740>
    92ca:	e004      	b.n	92d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x732>
    92cc:	f240 7146 	movw	r1, #1862	; 0x746
    92d0:	2031      	movs	r0, #49	; 0x31
    92d2:	f7fb fb8d 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    92d6:	f880 50ab 	strb.w	r5, [r0, #171]	; 0xab
    92da:	f7ff fd83 	bl	8de4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    92de:	68a0      	ldr	r0, [r4, #8]
    92e0:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
    92e4:	68a0      	ldr	r0, [r4, #8]
    92e6:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    92ea:	291f      	cmp	r1, #31
    92ec:	d002      	beq.n	92f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>
    92ee:	2927      	cmp	r1, #39	; 0x27
    92f0:	d113      	bne.n	931a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x776>
    92f2:	e00b      	b.n	930c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x768>
    92f4:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    92f8:	f004 fb4a 	bl	d990 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    92fc:	b108      	cbz	r0, 9302 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75e>
    92fe:	2026      	movs	r0, #38	; 0x26
    9300:	e000      	b.n	9304 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>
    9302:	2020      	movs	r0, #32
    9304:	68a1      	ldr	r1, [r4, #8]
    9306:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    930a:	e006      	b.n	931a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x776>
    930c:	2101      	movs	r1, #1
    930e:	f880 1185 	strb.w	r1, [r0, #389]	; 0x185
    9312:	f880 5075 	strb.w	r5, [r0, #117]	; 0x75
    9316:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    931a:	68a0      	ldr	r0, [r4, #8]
    931c:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    9320:	2908      	cmp	r1, #8
    9322:	d103      	bne.n	932c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>
    9324:	2102      	movs	r1, #2
    9326:	7021      	strb	r1, [r4, #0]
    9328:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    932c:	bd70      	pop	{r4, r5, r6, pc}
    932e:	0000      	.short	0x0000
    9330:	2000012c 	.word	0x2000012c
    9334:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    9336:	4605      	mov	r5, r0
    9338:	4668      	mov	r0, sp
    933a:	f7fc f9e1 	bl	5700 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    933e:	b318      	cbz	r0, 9388 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>
    9340:	2222      	movs	r2, #34	; 0x22
    9342:	2100      	movs	r1, #0
    9344:	9800      	ldr	r0, [sp, #0]
    9346:	f003 f9f4 	bl	c732 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    934a:	2103      	movs	r1, #3
    934c:	9800      	ldr	r0, [sp, #0]
    934e:	f004 fdb4 	bl	deba <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    9352:	9800      	ldr	r0, [sp, #0]
    9354:	7801      	ldrb	r1, [r0, #0]
    9356:	f021 0110 	bic.w	r1, r1, #16
    935a:	7001      	strb	r1, [r0, #0]
    935c:	4629      	mov	r1, r5
    935e:	f7fd fb5b 	bl	6a18 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    9362:	2100      	movs	r1, #0
    9364:	4c5e      	ldr	r4, [pc, #376]	; (94e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x93c>)
    9366:	f644 162f 	movw	r6, #18735	; 0x492f
    936a:	2d0e      	cmp	r5, #14
    936c:	d07e      	beq.n	946c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c8>
    936e:	dc0e      	bgt.n	938e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ea>
    9370:	f1a5 0502 	sub.w	r5, r5, #2
    9374:	2d0c      	cmp	r5, #12
    9376:	d21c      	bcs.n	93b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80e>
    9378:	e8df f005 	tbb	[pc, r5]
    937c:	a7451b1e 	.word	0xa7451b1e
    9380:	511b1ea7 	.word	0x511b1ea7
    9384:	3723a71b 	.word	0x3723a71b
    9388:	f640 116b 	movw	r1, #2411	; 0x96b
    938c:	e0a3      	b.n	94d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x932>
    938e:	2d15      	cmp	r5, #21
    9390:	d058      	beq.n	9444 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8a0>
    9392:	dc08      	bgt.n	93a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x802>
    9394:	2d11      	cmp	r5, #17
    9396:	d01f      	beq.n	93d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x834>
    9398:	2d12      	cmp	r5, #18
    939a:	d01c      	beq.n	93d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x832>
    939c:	2d13      	cmp	r5, #19
    939e:	d01a      	beq.n	93d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x832>
    93a0:	2d14      	cmp	r5, #20
    93a2:	d106      	bne.n	93b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80e>
    93a4:	e04e      	b.n	9444 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8a0>
    93a6:	2d16      	cmp	r5, #22
    93a8:	d023      	beq.n	93f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84e>
    93aa:	2d17      	cmp	r5, #23
    93ac:	d065      	beq.n	947a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d6>
    93ae:	2dff      	cmp	r5, #255	; 0xff
    93b0:	d07e      	beq.n	94b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90c>
    93b2:	f640 11dd 	movw	r1, #2525	; 0x9dd
    93b6:	e08e      	b.n	94d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x932>
    93b8:	68a1      	ldr	r1, [r4, #8]
    93ba:	9800      	ldr	r0, [sp, #0]
    93bc:	f891 10e6 	ldrb.w	r1, [r1, #230]	; 0xe6
    93c0:	e015      	b.n	93ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84a>
    93c2:	9800      	ldr	r0, [sp, #0]
    93c4:	220b      	movs	r2, #11
    93c6:	7102      	strb	r2, [r0, #4]
    93c8:	2259      	movs	r2, #89	; 0x59
    93ca:	7142      	strb	r2, [r0, #5]
    93cc:	7181      	strb	r1, [r0, #6]
    93ce:	215b      	movs	r1, #91	; 0x5b
    93d0:	71c1      	strb	r1, [r0, #7]
    93d2:	2112      	movs	r1, #18
    93d4:	7201      	strb	r1, [r0, #8]
    93d6:	e078      	b.n	94ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    93d8:	2103      	movs	r1, #3
    93da:	9800      	ldr	r0, [sp, #0]
    93dc:	f004 fd49 	bl	de72 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    93e0:	2106      	movs	r1, #6
    93e2:	9800      	ldr	r0, [sp, #0]
    93e4:	f004 fd47 	bl	de76 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    93e8:	e06f      	b.n	94ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    93ea:	9800      	ldr	r0, [sp, #0]
    93ec:	2106      	movs	r1, #6
    93ee:	7101      	strb	r1, [r0, #4]
    93f0:	e06b      	b.n	94ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    93f2:	9800      	ldr	r0, [sp, #0]
    93f4:	f8d4 1008 	ldr.w	r1, [r4, #8]
    93f8:	f891 21a8 	ldrb.w	r2, [r1, #424]	; 0x1a8
    93fc:	7102      	strb	r2, [r0, #4]
    93fe:	f891 11a9 	ldrb.w	r1, [r1, #425]	; 0x1a9
    9402:	7141      	strb	r1, [r0, #5]
    9404:	e061      	b.n	94ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    9406:	68a1      	ldr	r1, [r4, #8]
    9408:	9800      	ldr	r0, [sp, #0]
    940a:	f501 7188 	add.w	r1, r1, #272	; 0x110
    940e:	f004 fd45 	bl	de9c <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    9412:	68a1      	ldr	r1, [r4, #8]
    9414:	9800      	ldr	r0, [sp, #0]
    9416:	31dc      	adds	r1, #220	; 0xdc
    9418:	f004 fd3d 	bl	de96 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    941c:	e055      	b.n	94ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    941e:	9101      	str	r1, [sp, #4]
    9420:	9102      	str	r1, [sp, #8]
    9422:	f001 fe09 	bl	b038 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9426:	68a1      	ldr	r1, [r4, #8]
    9428:	4030      	ands	r0, r6
    942a:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
    942e:	4001      	ands	r1, r0
    9430:	f88d 1004 	strb.w	r1, [sp, #4]
    9434:	0a00      	lsrs	r0, r0, #8
    9436:	f88d 0005 	strb.w	r0, [sp, #5]
    943a:	a901      	add	r1, sp, #4
    943c:	9800      	ldr	r0, [sp, #0]
    943e:	f004 fd37 	bl	deb0 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    9442:	e042      	b.n	94ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    9444:	68a0      	ldr	r0, [r4, #8]
    9446:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
    944a:	9800      	ldr	r0, [sp, #0]
    944c:	f004 fd3d 	bl	deca <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    9450:	68a0      	ldr	r0, [r4, #8]
    9452:	f8b0 10e8 	ldrh.w	r1, [r0, #232]	; 0xe8
    9456:	9800      	ldr	r0, [sp, #0]
    9458:	f004 fd3b 	bl	ded2 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    945c:	68a0      	ldr	r0, [r4, #8]
    945e:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
    9462:	9800      	ldr	r0, [sp, #0]
    9464:	f004 fd39 	bl	deda <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    9468:	68a0      	ldr	r0, [r4, #8]
    946a:	e000      	b.n	946e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8ca>
    946c:	e010      	b.n	9490 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8ec>
    946e:	f8b0 10e6 	ldrh.w	r1, [r0, #230]	; 0xe6
    9472:	9800      	ldr	r0, [sp, #0]
    9474:	f004 fd35 	bl	dee2 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    9478:	e027      	b.n	94ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    947a:	68a1      	ldr	r1, [r4, #8]
    947c:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    9480:	2801      	cmp	r0, #1
    9482:	9800      	ldr	r0, [sp, #0]
    9484:	d0b8      	beq.n	93f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x854>
    9486:	f811 2f5e 	ldrb.w	r2, [r1, #94]!
    948a:	7102      	strb	r2, [r0, #4]
    948c:	7849      	ldrb	r1, [r1, #1]
    948e:	e7b8      	b.n	9402 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x85e>
    9490:	9101      	str	r1, [sp, #4]
    9492:	9102      	str	r1, [sp, #8]
    9494:	f001 fdd0 	bl	b038 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9498:	68a1      	ldr	r1, [r4, #8]
    949a:	4030      	ands	r0, r6
    949c:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
    94a0:	4001      	ands	r1, r0
    94a2:	f88d 1004 	strb.w	r1, [sp, #4]
    94a6:	0a00      	lsrs	r0, r0, #8
    94a8:	f88d 0005 	strb.w	r0, [sp, #5]
    94ac:	a901      	add	r1, sp, #4
    94ae:	e000      	b.n	94b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90e>
    94b0:	e003      	b.n	94ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x916>
    94b2:	9800      	ldr	r0, [sp, #0]
    94b4:	f004 fcf7 	bl	dea6 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    94b8:	e007      	b.n	94ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    94ba:	68a0      	ldr	r0, [r4, #8]
    94bc:	f890 2187 	ldrb.w	r2, [r0, #391]	; 0x187
    94c0:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    94c4:	9800      	ldr	r0, [sp, #0]
    94c6:	f004 fcd8 	bl	de7a <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    94ca:	f7fc f8f3 	bl	56b4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    94ce:	2800      	cmp	r0, #0
    94d0:	d104      	bne.n	94dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x938>
    94d2:	f640 11e1 	movw	r1, #2529	; 0x9e1
    94d6:	2031      	movs	r0, #49	; 0x31
    94d8:	f7fb fa8a 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    94dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    94de:	0000      	.short	0x0000
    94e0:	2000012c 	.word	0x2000012c
    94e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    94e8:	4c87      	ldr	r4, [pc, #540]	; (9708 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>)
    94ea:	4682      	mov	sl, r0
    94ec:	4689      	mov	r9, r1
    94ee:	68a0      	ldr	r0, [r4, #8]
    94f0:	8800      	ldrh	r0, [r0, #0]
    94f2:	f7fb fec7 	bl	5284 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    94f6:	0006      	movs	r6, r0
    94f8:	d00a      	beq.n	9510 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96c>
    94fa:	8860      	ldrh	r0, [r4, #2]
    94fc:	f04f 0500 	mov.w	r5, #0
    9500:	05c0      	lsls	r0, r0, #23
    9502:	68a0      	ldr	r0, [r4, #8]
    9504:	d509      	bpl.n	951a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x976>
    9506:	f8a0 509c 	strh.w	r5, [r0, #156]	; 0x9c
    950a:	f880 5104 	strb.w	r5, [r0, #260]	; 0x104
    950e:	e008      	b.n	9522 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97e>
    9510:	f640 5181 	movw	r1, #3457	; 0xd81
    9514:	2031      	movs	r0, #49	; 0x31
    9516:	f7fb fa6b 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    951a:	f830 1f9c 	ldrh.w	r1, [r0, #156]!
    951e:	1c49      	adds	r1, r1, #1
    9520:	8001      	strh	r1, [r0, #0]
    9522:	f001 f89d 	bl	a660 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1abc>
    9526:	f04f 0801 	mov.w	r8, #1
    952a:	b320      	cbz	r0, 9576 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    952c:	8860      	ldrh	r0, [r4, #2]
    952e:	0500      	lsls	r0, r0, #20
    9530:	d506      	bpl.n	9540 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x99c>
    9532:	68a0      	ldr	r0, [r4, #8]
    9534:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
    9538:	b111      	cbz	r1, 9540 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x99c>
    953a:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    953e:	e01a      	b.n	9576 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    9540:	68a0      	ldr	r0, [r4, #8]
    9542:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
    9546:	1c49      	adds	r1, r1, #1
    9548:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    954c:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    9550:	428b      	cmp	r3, r1
    9552:	d301      	bcc.n	9558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9b4>
    9554:	1a5a      	subs	r2, r3, r1
    9556:	e000      	b.n	955a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9b6>
    9558:	2200      	movs	r2, #0
    955a:	88a7      	ldrh	r7, [r4, #4]
    955c:	1d7f      	adds	r7, r7, #5
    955e:	42ba      	cmp	r2, r7
    9560:	d801      	bhi.n	9566 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9c2>
    9562:	f880 809a 	strb.w	r8, [r0, #154]	; 0x9a
    9566:	4299      	cmp	r1, r3
    9568:	d305      	bcc.n	9576 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    956a:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    956e:	f880 81f2 	strb.w	r8, [r0, #498]	; 0x1f2
    9572:	f001 f999 	bl	a8a8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9576:	8860      	ldrh	r0, [r4, #2]
    9578:	f04f 0702 	mov.w	r7, #2
    957c:	f410 7f40 	tst.w	r0, #768	; 0x300
    9580:	d00e      	beq.n	95a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9fc>
    9582:	68a0      	ldr	r0, [r4, #8]
    9584:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    9588:	b111      	cbz	r1, 9590 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ec>
    958a:	2903      	cmp	r1, #3
    958c:	d108      	bne.n	95a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9fc>
    958e:	e002      	b.n	9596 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f2>
    9590:	f880 8079 	strb.w	r8, [r0, #121]	; 0x79
    9594:	e001      	b.n	959a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f6>
    9596:	f880 7079 	strb.w	r7, [r0, #121]	; 0x79
    959a:	2101      	movs	r1, #1
    959c:	f7fe fc72 	bl	7e84 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    95a0:	68a0      	ldr	r0, [r4, #8]
    95a2:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    95a6:	2901      	cmp	r1, #1
    95a8:	d104      	bne.n	95b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa10>
    95aa:	8861      	ldrh	r1, [r4, #2]
    95ac:	0549      	lsls	r1, r1, #21
    95ae:	d501      	bpl.n	95b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa10>
    95b0:	f880 7079 	strb.w	r7, [r0, #121]	; 0x79
    95b4:	f1ba 0f00 	cmp.w	sl, #0
    95b8:	d175      	bne.n	96a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb02>
    95ba:	78a1      	ldrb	r1, [r4, #2]
    95bc:	0649      	lsls	r1, r1, #25
    95be:	d502      	bpl.n	95c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa22>
    95c0:	f8a0 5118 	strh.w	r5, [r0, #280]	; 0x118
    95c4:	e004      	b.n	95d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2c>
    95c6:	f8b0 1118 	ldrh.w	r1, [r0, #280]	; 0x118
    95ca:	1c49      	adds	r1, r1, #1
    95cc:	f8a0 1118 	strh.w	r1, [r0, #280]	; 0x118
    95d0:	4648      	mov	r0, r9
    95d2:	f7ff fdbd 	bl	9150 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ac>
    95d6:	ea40 0009 	orr.w	r0, r0, r9
    95da:	4681      	mov	r9, r0
    95dc:	f7ff fd2a 	bl	9034 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x490>
    95e0:	68a7      	ldr	r7, [r4, #8]
    95e2:	f8b7 00f8 	ldrh.w	r0, [r7, #248]	; 0xf8
    95e6:	1c40      	adds	r0, r0, #1
    95e8:	f8a7 00f8 	strh.w	r0, [r7, #248]	; 0xf8
    95ec:	f897 00fc 	ldrb.w	r0, [r7, #252]	; 0xfc
    95f0:	b128      	cbz	r0, 95fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    95f2:	f7fc fa79 	bl	5ae8 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    95f6:	b1a8      	cbz	r0, 9624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa80>
    95f8:	f8a7 50f8 	strh.w	r5, [r7, #248]	; 0xf8
    95fc:	e012      	b.n	9624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa80>
    95fe:	f7fc f901 	bl	5804 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    9602:	b108      	cbz	r0, 9608 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa64>
    9604:	f8a7 50f8 	strh.w	r5, [r7, #248]	; 0xf8
    9608:	f7fc f8f6 	bl	57f8 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    960c:	b150      	cbz	r0, 9624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa80>
    960e:	f897 0104 	ldrb.w	r0, [r7, #260]	; 0x104
    9612:	1c40      	adds	r0, r0, #1
    9614:	b2c0      	uxtb	r0, r0
    9616:	f887 0104 	strb.w	r0, [r7, #260]	; 0x104
    961a:	2802      	cmp	r0, #2
    961c:	d902      	bls.n	9624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa80>
    961e:	f827 5ff8 	strh.w	r5, [r7, #248]!
    9622:	733d      	strb	r5, [r7, #12]
    9624:	68a0      	ldr	r0, [r4, #8]
    9626:	2301      	movs	r3, #1
    9628:	2100      	movs	r1, #0
    962a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    962e:	3068      	adds	r0, #104	; 0x68
    9630:	f004 f960 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9634:	b920      	cbnz	r0, 9640 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa9c>
    9636:	68a0      	ldr	r0, [r4, #8]
    9638:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    963c:	280c      	cmp	r0, #12
    963e:	d15f      	bne.n	9700 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5c>
    9640:	68a0      	ldr	r0, [r4, #8]
    9642:	2301      	movs	r3, #1
    9644:	2100      	movs	r1, #0
    9646:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    964a:	3068      	adds	r0, #104	; 0x68
    964c:	f004 f952 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9650:	b350      	cbz	r0, 96a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb04>
    9652:	68a0      	ldr	r0, [r4, #8]
    9654:	2301      	movs	r3, #1
    9656:	2100      	movs	r1, #0
    9658:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    965c:	3068      	adds	r0, #104	; 0x68
    965e:	f004 f949 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9662:	b308      	cbz	r0, 96a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb04>
    9664:	68a0      	ldr	r0, [r4, #8]
    9666:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    966a:	2902      	cmp	r1, #2
    966c:	d148      	bne.n	9700 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5c>
    966e:	f890 0104 	ldrb.w	r0, [r0, #260]	; 0x104
    9672:	b9c8      	cbnz	r0, 96a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb04>
    9674:	4630      	mov	r0, r6
    9676:	f003 fd20 	bl	d0ba <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    967a:	b1a8      	cbz	r0, 96a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb04>
    967c:	68a0      	ldr	r0, [r4, #8]
    967e:	3068      	adds	r0, #104	; 0x68
    9680:	f005 fbfd 	bl	ee7e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9684:	b980      	cbnz	r0, 96a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb04>
    9686:	68a1      	ldr	r1, [r4, #8]
    9688:	f8b1 00f2 	ldrh.w	r0, [r1, #242]	; 0xf2
    968c:	2801      	cmp	r0, #1
    968e:	d937      	bls.n	9700 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5c>
    9690:	f881 80fa 	strb.w	r8, [r1, #250]	; 0xfa
    9694:	f8b1 209e 	ldrh.w	r2, [r1, #158]	; 0x9e
    9698:	f8b1 009c 	ldrh.w	r0, [r1, #156]	; 0x9c
    969c:	1e93      	subs	r3, r2, #2
    969e:	4298      	cmp	r0, r3
    96a0:	db03      	blt.n	96aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb06>
    96a2:	2001      	movs	r0, #1
    96a4:	e004      	b.n	96b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0c>
    96a6:	e01d      	b.n	96e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb40>
    96a8:	e02a      	b.n	9700 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5c>
    96aa:	1a10      	subs	r0, r2, r0
    96ac:	1e40      	subs	r0, r0, #1
    96ae:	b280      	uxth	r0, r0
    96b0:	f8b1 20f8 	ldrh.w	r2, [r1, #248]	; 0xf8
    96b4:	88a3      	ldrh	r3, [r4, #4]
    96b6:	429a      	cmp	r2, r3
    96b8:	d301      	bcc.n	96be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb1a>
    96ba:	2201      	movs	r2, #1
    96bc:	e002      	b.n	96c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb20>
    96be:	1a9a      	subs	r2, r3, r2
    96c0:	1c52      	adds	r2, r2, #1
    96c2:	b292      	uxth	r2, r2
    96c4:	4290      	cmp	r0, r2
    96c6:	d900      	bls.n	96ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb26>
    96c8:	4610      	mov	r0, r2
    96ca:	2801      	cmp	r0, #1
    96cc:	d102      	bne.n	96d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb30>
    96ce:	bf00      	nop
    96d0:	f881 50fa 	strb.w	r5, [r1, #250]	; 0xfa
    96d4:	68a1      	ldr	r1, [r4, #8]
    96d6:	f8b1 206c 	ldrh.w	r2, [r1, #108]	; 0x6c
    96da:	4410      	add	r0, r2
    96dc:	f8a1 00f4 	strh.w	r0, [r1, #244]	; 0xf4
    96e0:	f001 f87e 	bl	a7e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c3c>
    96e4:	78a0      	ldrb	r0, [r4, #2]
    96e6:	464a      	mov	r2, r9
    96e8:	f3c0 1180 	ubfx	r1, r0, #6, #1
    96ec:	4650      	mov	r0, sl
    96ee:	f000 ffcb 	bl	a688 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae4>
    96f2:	68a0      	ldr	r0, [r4, #8]
    96f4:	f880 50fb 	strb.w	r5, [r0, #251]	; 0xfb
    96f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    96fc:	f7fb bfc4 	b.w	5688 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    9700:	2001      	movs	r0, #1
    9702:	68a1      	ldr	r1, [r4, #8]
    9704:	e7e4      	b.n	96d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2c>
    9706:	0000      	.short	0x0000
    9708:	2000012c 	.word	0x2000012c
    970c:	b570      	push	{r4, r5, r6, lr}
    970e:	4c4e      	ldr	r4, [pc, #312]	; (9848 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca4>)
    9710:	2301      	movs	r3, #1
    9712:	2100      	movs	r1, #0
    9714:	68a0      	ldr	r0, [r4, #8]
    9716:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    971a:	3068      	adds	r0, #104	; 0x68
    971c:	f004 f8ea 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9720:	2800      	cmp	r0, #0
    9722:	d076      	beq.n	9812 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6e>
    9724:	68a0      	ldr	r0, [r4, #8]
    9726:	f890 11ad 	ldrb.w	r1, [r0, #429]	; 0x1ad
    972a:	2500      	movs	r5, #0
    972c:	b139      	cbz	r1, 973e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb9a>
    972e:	2100      	movs	r1, #0
    9730:	200e      	movs	r0, #14
    9732:	f000 f88b 	bl	984c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    9736:	68a0      	ldr	r0, [r4, #8]
    9738:	f880 51ad 	strb.w	r5, [r0, #429]	; 0x1ad
    973c:	e082      	b.n	9844 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca0>
    973e:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
    9742:	b119      	cbz	r1, 974c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba8>
    9744:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    9748:	0789      	lsls	r1, r1, #30
    974a:	d00a      	beq.n	9762 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbe>
    974c:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    9750:	b111      	cbz	r1, 9758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb4>
    9752:	f890 119d 	ldrb.w	r1, [r0, #413]	; 0x19d
    9756:	b189      	cbz	r1, 977c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbd8>
    9758:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    975c:	2901      	cmp	r1, #1
    975e:	d02f      	beq.n	97c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc1c>
    9760:	e06a      	b.n	9838 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc94>
    9762:	2100      	movs	r1, #0
    9764:	200c      	movs	r0, #12
    9766:	f000 f871 	bl	984c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    976a:	68a0      	ldr	r0, [r4, #8]
    976c:	f810 1fae 	ldrb.w	r1, [r0, #174]!
    9770:	f041 0101 	orr.w	r1, r1, #1
    9774:	7001      	strb	r1, [r0, #0]
    9776:	f880 50fe 	strb.w	r5, [r0, #254]	; 0xfe
    977a:	e063      	b.n	9844 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca0>
    977c:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9780:	2924      	cmp	r1, #36	; 0x24
    9782:	d01b      	beq.n	97bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc18>
    9784:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    9788:	2924      	cmp	r1, #36	; 0x24
    978a:	d017      	beq.n	97bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc18>
    978c:	f05f 0300 	movs.w	r3, #0
    9790:	f500 72c7 	add.w	r2, r0, #398	; 0x18e
    9794:	f500 71ce 	add.w	r1, r0, #412	; 0x19c
    9798:	f004 fce2 	bl	e160 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    979c:	68a0      	ldr	r0, [r4, #8]
    979e:	f880 519c 	strb.w	r5, [r0, #412]	; 0x19c
    97a2:	2100      	movs	r1, #0
    97a4:	2014      	movs	r0, #20
    97a6:	f000 f851 	bl	984c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    97aa:	68a1      	ldr	r1, [r4, #8]
    97ac:	f101 0024 	add.w	r0, r1, #36	; 0x24
    97b0:	8bc2      	ldrh	r2, [r0, #30]
    97b2:	f821 2fe6 	strh.w	r2, [r1, #230]!
    97b6:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    97b8:	8048      	strh	r0, [r1, #2]
    97ba:	e043      	b.n	9844 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca0>
    97bc:	2301      	movs	r3, #1
    97be:	e7e7      	b.n	9790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbec>
    97c0:	f890 11a7 	ldrb.w	r1, [r0, #423]	; 0x1a7
    97c4:	bb21      	cbnz	r1, 9810 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6c>
    97c6:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    97ca:	2301      	movs	r3, #1
    97cc:	210b      	movs	r1, #11
    97ce:	3068      	adds	r0, #104	; 0x68
    97d0:	f004 f890 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    97d4:	b9e0      	cbnz	r0, 9810 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6c>
    97d6:	68a0      	ldr	r0, [r4, #8]
    97d8:	f890 0062 	ldrb.w	r0, [r0, #98]	; 0x62
    97dc:	f005 fb57 	bl	ee8e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    97e0:	4605      	mov	r5, r0
    97e2:	68a0      	ldr	r0, [r4, #8]
    97e4:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    97e8:	f005 fb51 	bl	ee8e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    97ec:	4606      	mov	r6, r0
    97ee:	68a0      	ldr	r0, [r4, #8]
    97f0:	f890 11a8 	ldrb.w	r1, [r0, #424]	; 0x1a8
    97f4:	4628      	mov	r0, r5
    97f6:	f005 fb55 	bl	eea4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    97fa:	b158      	cbz	r0, 9814 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc70>
    97fc:	68a0      	ldr	r0, [r4, #8]
    97fe:	f890 11a9 	ldrb.w	r1, [r0, #425]	; 0x1a9
    9802:	4630      	mov	r0, r6
    9804:	f005 fb4e 	bl	eea4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    9808:	b120      	cbz	r0, 9814 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc70>
    980a:	2000      	movs	r0, #0
    980c:	f000 f900 	bl	9a10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    9810:	e012      	b.n	9838 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc94>
    9812:	e012      	b.n	983a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc96>
    9814:	68a0      	ldr	r0, [r4, #8]
    9816:	2301      	movs	r3, #1
    9818:	2103      	movs	r1, #3
    981a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    981e:	3068      	adds	r0, #104	; 0x68
    9820:	f004 f868 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9824:	b940      	cbnz	r0, 9838 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc94>
    9826:	68a0      	ldr	r0, [r4, #8]
    9828:	2301      	movs	r3, #1
    982a:	2102      	movs	r1, #2
    982c:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9830:	3068      	adds	r0, #104	; 0x68
    9832:	f004 f85f 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9836:	b108      	cbz	r0, 983c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc98>
    9838:	2000      	movs	r0, #0
    983a:	bd70      	pop	{r4, r5, r6, pc}
    983c:	2100      	movs	r1, #0
    983e:	2016      	movs	r0, #22
    9840:	f000 f804 	bl	984c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    9844:	2001      	movs	r0, #1
    9846:	bd70      	pop	{r4, r5, r6, pc}
    9848:	2000012c 	.word	0x2000012c
    984c:	b570      	push	{r4, r5, r6, lr}
    984e:	4c0d      	ldr	r4, [pc, #52]	; (9884 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>)
    9850:	4606      	mov	r6, r0
    9852:	460d      	mov	r5, r1
    9854:	68a0      	ldr	r0, [r4, #8]
    9856:	3068      	adds	r0, #104	; 0x68
    9858:	f005 fb11 	bl	ee7e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    985c:	b120      	cbz	r0, 9868 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc4>
    985e:	f640 11f4 	movw	r1, #2548	; 0x9f4
    9862:	2031      	movs	r0, #49	; 0x31
    9864:	f7fb f8c4 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9868:	68a2      	ldr	r2, [r4, #8]
    986a:	2000      	movs	r0, #0
    986c:	f882 60e4 	strb.w	r6, [r2, #228]	; 0xe4
    9870:	b115      	cbz	r5, 9878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd4>
    9872:	f8a2 00a8 	strh.w	r0, [r2, #168]	; 0xa8
    9876:	bd70      	pop	{r4, r5, r6, pc}
    9878:	f822 0fa2 	strh.w	r0, [r2, #162]!
    987c:	2001      	movs	r0, #1
    987e:	7110      	strb	r0, [r2, #4]
    9880:	bd70      	pop	{r4, r5, r6, pc}
    9882:	0000      	.short	0x0000
    9884:	2000012c 	.word	0x2000012c
    9888:	b570      	push	{r4, r5, r6, lr}
    988a:	4c18      	ldr	r4, [pc, #96]	; (98ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd48>)
    988c:	2500      	movs	r5, #0
    988e:	68a0      	ldr	r0, [r4, #8]
    9890:	f890 1173 	ldrb.w	r1, [r0, #371]	; 0x173
    9894:	2901      	cmp	r1, #1
    9896:	d00a      	beq.n	98ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0a>
    9898:	2902      	cmp	r1, #2
    989a:	d125      	bne.n	98e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    989c:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
    98a0:	b1a9      	cbz	r1, 98ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2a>
    98a2:	2106      	movs	r1, #6
    98a4:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    98a8:	2101      	movs	r1, #1
    98aa:	2002      	movs	r0, #2
    98ac:	e017      	b.n	98de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3a>
    98ae:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
    98b2:	2900      	cmp	r1, #0
    98b4:	d118      	bne.n	98e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    98b6:	f100 03c8 	add.w	r3, r0, #200	; 0xc8
    98ba:	f500 7184 	add.w	r1, r0, #264	; 0x108
    98be:	2200      	movs	r2, #0
    98c0:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    98c4:	f003 ffce 	bl	d864 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    98c8:	2101      	movs	r1, #1
    98ca:	2005      	movs	r0, #5
    98cc:	e007      	b.n	98de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3a>
    98ce:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    98d2:	0740      	lsls	r0, r0, #29
    98d4:	d501      	bpl.n	98da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd36>
    98d6:	2011      	movs	r0, #17
    98d8:	e000      	b.n	98dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    98da:	200d      	movs	r0, #13
    98dc:	2101      	movs	r1, #1
    98de:	f7ff ffb5 	bl	984c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    98e2:	68a0      	ldr	r0, [r4, #8]
    98e4:	f880 5173 	strb.w	r5, [r0, #371]	; 0x173
    98e8:	bd70      	pop	{r4, r5, r6, pc}
    98ea:	0000      	.short	0x0000
    98ec:	2000012c 	.word	0x2000012c
    98f0:	b570      	push	{r4, r5, r6, lr}
    98f2:	4a2b      	ldr	r2, [pc, #172]	; (99a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfc>)
    98f4:	4603      	mov	r3, r0
    98f6:	8850      	ldrh	r0, [r2, #2]
    98f8:	4318      	orrs	r0, r3
    98fa:	8050      	strh	r0, [r2, #2]
    98fc:	4610      	mov	r0, r2
    98fe:	2b40      	cmp	r3, #64	; 0x40
    9900:	6880      	ldr	r0, [r0, #8]
    9902:	d00d      	beq.n	9920 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd7c>
    9904:	079e      	lsls	r6, r3, #30
    9906:	f04f 0500 	mov.w	r5, #0
    990a:	f04f 0401 	mov.w	r4, #1
    990e:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    9912:	d50c      	bpl.n	992e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd8a>
    9914:	b14e      	cbz	r6, 992a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd86>
    9916:	f640 41ee 	movw	r1, #3310	; 0xcee
    991a:	2031      	movs	r0, #49	; 0x31
    991c:	f7fb f868 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9920:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9924:	2104      	movs	r1, #4
    9926:	f7fe baad 	b.w	7e84 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    992a:	60d1      	str	r1, [r2, #12]
    992c:	e01c      	b.n	9968 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc4>
    992e:	b1c6      	cbz	r6, 9962 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    9930:	6111      	str	r1, [r2, #16]
    9932:	78c9      	ldrb	r1, [r1, #3]
    9934:	2906      	cmp	r1, #6
    9936:	d002      	beq.n	993e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd9a>
    9938:	290b      	cmp	r1, #11
    993a:	d112      	bne.n	9962 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    993c:	e009      	b.n	9952 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
    993e:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9942:	2917      	cmp	r1, #23
    9944:	d10d      	bne.n	9962 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    9946:	2100      	movs	r1, #0
    9948:	e9c0 112e 	strd	r1, r1, [r0, #184]	; 0xb8
    994c:	f880 407a 	strb.w	r4, [r0, #122]	; 0x7a
    9950:	e007      	b.n	9962 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    9952:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9956:	2911      	cmp	r1, #17
    9958:	d103      	bne.n	9962 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    995a:	f880 507a 	strb.w	r5, [r0, #122]	; 0x7a
    995e:	f880 40ac 	strb.w	r4, [r0, #172]	; 0xac
    9962:	0799      	lsls	r1, r3, #30
    9964:	d516      	bpl.n	9994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    9966:	68d1      	ldr	r1, [r2, #12]
    9968:	78c9      	ldrb	r1, [r1, #3]
    996a:	2905      	cmp	r1, #5
    996c:	d002      	beq.n	9974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    996e:	290b      	cmp	r1, #11
    9970:	d110      	bne.n	9994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    9972:	e009      	b.n	9988 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xde4>
    9974:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9978:	2915      	cmp	r1, #21
    997a:	d10b      	bne.n	9994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    997c:	2100      	movs	r1, #0
    997e:	e9e0 1130 	strd	r1, r1, [r0, #192]!	; 0xc0
    9982:	f800 4c45 	strb.w	r4, [r0, #-69]
    9986:	e005      	b.n	9994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    9988:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    998c:	2910      	cmp	r1, #16
    998e:	d101      	bne.n	9994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    9990:	f880 507b 	strb.w	r5, [r0, #123]	; 0x7b
    9994:	0698      	lsls	r0, r3, #26
    9996:	d501      	bpl.n	999c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf8>
    9998:	2008      	movs	r0, #8
    999a:	7050      	strb	r0, [r2, #1]
    999c:	bd70      	pop	{r4, r5, r6, pc}
    999e:	0000      	.short	0x0000
    99a0:	2000012c 	.word	0x2000012c
    99a4:	b570      	push	{r4, r5, r6, lr}
    99a6:	4c19      	ldr	r4, [pc, #100]	; (9a0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe68>)
    99a8:	68a0      	ldr	r0, [r4, #8]
    99aa:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    99ae:	b109      	cbz	r1, 99b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe10>
    99b0:	2601      	movs	r6, #1
    99b2:	e000      	b.n	99b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe12>
    99b4:	2600      	movs	r6, #0
    99b6:	f890 218f 	ldrb.w	r2, [r0, #399]	; 0x18f
    99ba:	b10a      	cbz	r2, 99c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1c>
    99bc:	2501      	movs	r5, #1
    99be:	e000      	b.n	99c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1e>
    99c0:	2500      	movs	r5, #0
    99c2:	b90e      	cbnz	r6, 99c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe24>
    99c4:	f890 1062 	ldrb.w	r1, [r0, #98]	; 0x62
    99c8:	b90d      	cbnz	r5, 99ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe2a>
    99ca:	f890 2063 	ldrb.w	r2, [r0, #99]	; 0x63
    99ce:	f100 035a 	add.w	r3, r0, #90	; 0x5a
    99d2:	7219      	strb	r1, [r3, #8]
    99d4:	725a      	strb	r2, [r3, #9]
    99d6:	2101      	movs	r1, #1
    99d8:	7299      	strb	r1, [r3, #10]
    99da:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    99de:	2801      	cmp	r0, #1
    99e0:	d001      	beq.n	99e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe42>
    99e2:	b906      	cbnz	r6, 99e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe42>
    99e4:	b115      	cbz	r5, 99ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe48>
    99e6:	2000      	movs	r0, #0
    99e8:	f000 f812 	bl	9a10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    99ec:	68a0      	ldr	r0, [r4, #8]
    99ee:	f004 fbd2 	bl	e196 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    99f2:	2800      	cmp	r0, #0
    99f4:	d008      	beq.n	9a08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe64>
    99f6:	68a1      	ldr	r1, [r4, #8]
    99f8:	f501 72e9 	add.w	r2, r1, #466	; 0x1d2
    99fc:	8808      	ldrh	r0, [r1, #0]
    99fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9a02:	3124      	adds	r1, #36	; 0x24
    9a04:	f004 bb88 	b.w	e118 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9a08:	bd70      	pop	{r4, r5, r6, pc}
    9a0a:	0000      	.short	0x0000
    9a0c:	2000012c 	.word	0x2000012c
    9a10:	b510      	push	{r4, lr}
    9a12:	4c10      	ldr	r4, [pc, #64]	; (9a54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb0>)
    9a14:	68a1      	ldr	r1, [r4, #8]
    9a16:	880a      	ldrh	r2, [r1, #0]
    9a18:	f8a1 21fe 	strh.w	r2, [r1, #510]	; 0x1fe
    9a1c:	f881 01fc 	strb.w	r0, [r1, #508]	; 0x1fc
    9a20:	f891 0062 	ldrb.w	r0, [r1, #98]	; 0x62
    9a24:	f005 fa33 	bl	ee8e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9a28:	68a1      	ldr	r1, [r4, #8]
    9a2a:	f881 0200 	strb.w	r0, [r1, #512]	; 0x200
    9a2e:	f891 0063 	ldrb.w	r0, [r1, #99]	; 0x63
    9a32:	f005 fa2c 	bl	ee8e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9a36:	68a2      	ldr	r2, [r4, #8]
    9a38:	f502 71fd 	add.w	r1, r2, #506	; 0x1fa
    9a3c:	f882 0201 	strb.w	r0, [r2, #513]	; 0x201
    9a40:	2001      	movs	r0, #1
    9a42:	7008      	strb	r0, [r1, #0]
    9a44:	2000      	movs	r0, #0
    9a46:	f882 01a6 	strb.w	r0, [r2, #422]	; 0x1a6
    9a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9a4e:	f000 bf2b 	b.w	a8a8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9a52:	0000      	.short	0x0000
    9a54:	2000012c 	.word	0x2000012c
    9a58:	b510      	push	{r4, lr}
    9a5a:	4c15      	ldr	r4, [pc, #84]	; (9ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0c>)
    9a5c:	2301      	movs	r3, #1
    9a5e:	2100      	movs	r1, #0
    9a60:	68a0      	ldr	r0, [r4, #8]
    9a62:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9a66:	3068      	adds	r0, #104	; 0x68
    9a68:	f003 ff44 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a6c:	b190      	cbz	r0, 9a94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xef0>
    9a6e:	6920      	ldr	r0, [r4, #16]
    9a70:	f004 f99c 	bl	ddac <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    9a74:	68a1      	ldr	r1, [r4, #8]
    9a76:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    9a7a:	f8b1 106c 	ldrh.w	r1, [r1, #108]	; 0x6c
    9a7e:	f005 fa1f 	bl	eec0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9a82:	b148      	cbz	r0, 9a98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xef4>
    9a84:	68a0      	ldr	r0, [r4, #8]
    9a86:	2128      	movs	r1, #40	; 0x28
    9a88:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    9a8c:	306e      	adds	r0, #110	; 0x6e
    9a8e:	2101      	movs	r1, #1
    9a90:	7781      	strb	r1, [r0, #30]
    9a92:	e00b      	b.n	9aac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf08>
    9a94:	2001      	movs	r0, #1
    9a96:	bd10      	pop	{r4, pc}
    9a98:	68a1      	ldr	r1, [r4, #8]
    9a9a:	6920      	ldr	r0, [r4, #16]
    9a9c:	f501 71c7 	add.w	r1, r1, #398	; 0x18e
    9aa0:	f004 f97f 	bl	dda2 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    9aa4:	68a1      	ldr	r1, [r4, #8]
    9aa6:	200b      	movs	r0, #11
    9aa8:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    9aac:	2000      	movs	r0, #0
    9aae:	bd10      	pop	{r4, pc}
    9ab0:	2000012c 	.word	0x2000012c
    9ab4:	b570      	push	{r4, r5, r6, lr}
    9ab6:	4c29      	ldr	r4, [pc, #164]	; (9b5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb8>)
    9ab8:	2301      	movs	r3, #1
    9aba:	2100      	movs	r1, #0
    9abc:	68a0      	ldr	r0, [r4, #8]
    9abe:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9ac2:	3068      	adds	r0, #104	; 0x68
    9ac4:	f003 ff16 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ac8:	b1b8      	cbz	r0, 9afa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf56>
    9aca:	2100      	movs	r1, #0
    9acc:	6920      	ldr	r0, [r4, #16]
    9ace:	f004 f940 	bl	dd52 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    9ad2:	b1a0      	cbz	r0, 9afe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf5a>
    9ad4:	6920      	ldr	r0, [r4, #16]
    9ad6:	68a1      	ldr	r1, [r4, #8]
    9ad8:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    9adc:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    9ae0:	f8b1 106c 	ldrh.w	r1, [r1, #108]	; 0x6c
    9ae4:	f005 f9ec 	bl	eec0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9ae8:	b168      	cbz	r0, 9b06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf62>
    9aea:	68a0      	ldr	r0, [r4, #8]
    9aec:	2128      	movs	r1, #40	; 0x28
    9aee:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    9af2:	306e      	adds	r0, #110	; 0x6e
    9af4:	2101      	movs	r1, #1
    9af6:	7781      	strb	r1, [r0, #30]
    9af8:	e02e      	b.n	9b58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb4>
    9afa:	2001      	movs	r0, #1
    9afc:	bd70      	pop	{r4, r5, r6, pc}
    9afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9b02:	f000 b8ad 	b.w	9c60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10bc>
    9b06:	6920      	ldr	r0, [r4, #16]
    9b08:	f004 f953 	bl	ddb2 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    9b0c:	f003 fed5 	bl	d8ba <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    9b10:	4605      	mov	r5, r0
    9b12:	68a0      	ldr	r0, [r4, #8]
    9b14:	4629      	mov	r1, r5
    9b16:	f8c0 5194 	str.w	r5, [r0, #404]	; 0x194
    9b1a:	6920      	ldr	r0, [r4, #16]
    9b1c:	7900      	ldrb	r0, [r0, #4]
    9b1e:	f004 f856 	bl	dbce <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    9b22:	68a1      	ldr	r1, [r4, #8]
    9b24:	f8a1 018e 	strh.w	r0, [r1, #398]	; 0x18e
    9b28:	6920      	ldr	r0, [r4, #16]
    9b2a:	4629      	mov	r1, r5
    9b2c:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    9b30:	f004 f849 	bl	dbc6 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    9b34:	68a1      	ldr	r1, [r4, #8]
    9b36:	f8c1 0190 	str.w	r0, [r1, #400]	; 0x190
    9b3a:	6920      	ldr	r0, [r4, #16]
    9b3c:	f004 f93c 	bl	ddb8 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    9b40:	68a1      	ldr	r1, [r4, #8]
    9b42:	f8a1 0198 	strh.w	r0, [r1, #408]	; 0x198
    9b46:	6920      	ldr	r0, [r4, #16]
    9b48:	f004 f939 	bl	ddbe <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    9b4c:	68a1      	ldr	r1, [r4, #8]
    9b4e:	f8a1 019a 	strh.w	r0, [r1, #410]	; 0x19a
    9b52:	200d      	movs	r0, #13
    9b54:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    9b58:	2000      	movs	r0, #0
    9b5a:	bd70      	pop	{r4, r5, r6, pc}
    9b5c:	2000012c 	.word	0x2000012c
    9b60:	b538      	push	{r3, r4, r5, lr}
    9b62:	4c29      	ldr	r4, [pc, #164]	; (9c08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1064>)
    9b64:	2301      	movs	r3, #1
    9b66:	2100      	movs	r1, #0
    9b68:	68a0      	ldr	r0, [r4, #8]
    9b6a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9b6e:	3068      	adds	r0, #104	; 0x68
    9b70:	f003 fec0 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b74:	b970      	cbnz	r0, 9b94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    9b76:	68a0      	ldr	r0, [r4, #8]
    9b78:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9b7c:	2a12      	cmp	r2, #18
    9b7e:	d009      	beq.n	9b94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    9b80:	2301      	movs	r3, #1
    9b82:	2105      	movs	r1, #5
    9b84:	3068      	adds	r0, #104	; 0x68
    9b86:	f003 feb5 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b8a:	b108      	cbz	r0, 9b90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfec>
    9b8c:	2008      	movs	r0, #8
    9b8e:	bd38      	pop	{r3, r4, r5, pc}
    9b90:	2001      	movs	r0, #1
    9b92:	bd38      	pop	{r3, r4, r5, pc}
    9b94:	68a0      	ldr	r0, [r4, #8]
    9b96:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    9b9a:	b908      	cbnz	r0, 9ba0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xffc>
    9b9c:	f7ff f916 	bl	8dcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    9ba0:	68a1      	ldr	r1, [r4, #8]
    9ba2:	6920      	ldr	r0, [r4, #16]
    9ba4:	f501 7184 	add.w	r1, r1, #264	; 0x108
    9ba8:	f004 f918 	bl	dddc <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    9bac:	68a1      	ldr	r1, [r4, #8]
    9bae:	6920      	ldr	r0, [r4, #16]
    9bb0:	31d8      	adds	r1, #216	; 0xd8
    9bb2:	f004 f90a 	bl	ddca <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    9bb6:	68a1      	ldr	r1, [r4, #8]
    9bb8:	f891 01c4 	ldrb.w	r0, [r1, #452]	; 0x1c4
    9bbc:	f88d 0000 	strb.w	r0, [sp]
    9bc0:	9800      	ldr	r0, [sp, #0]
    9bc2:	9000      	str	r0, [sp, #0]
    9bc4:	f89d 0000 	ldrb.w	r0, [sp]
    9bc8:	b120      	cbz	r0, 9bd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1030>
    9bca:	f240 219d 	movw	r1, #669	; 0x29d
    9bce:	2031      	movs	r0, #49	; 0x31
    9bd0:	f7fa ff0e 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9bd4:	8808      	ldrh	r0, [r1, #0]
    9bd6:	f8a1 01c6 	strh.w	r0, [r1, #454]	; 0x1c6
    9bda:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
    9bde:	6920      	ldr	r0, [r4, #16]
    9be0:	f004 f8f7 	bl	ddd2 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    9be4:	68a1      	ldr	r1, [r4, #8]
    9be6:	6920      	ldr	r0, [r4, #16]
    9be8:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
    9bec:	f004 f8ea 	bl	ddc4 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    9bf0:	68a0      	ldr	r0, [r4, #8]
    9bf2:	4601      	mov	r1, r0
    9bf4:	2201      	movs	r2, #1
    9bf6:	f880 21c4 	strb.w	r2, [r0, #452]	; 0x1c4
    9bfa:	2014      	movs	r0, #20
    9bfc:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    9c00:	f000 fe52 	bl	a8a8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9c04:	2000      	movs	r0, #0
    9c06:	bd38      	pop	{r3, r4, r5, pc}
    9c08:	2000012c 	.word	0x2000012c
    9c0c:	b51c      	push	{r2, r3, r4, lr}
    9c0e:	4c13      	ldr	r4, [pc, #76]	; (9c5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b8>)
    9c10:	68a0      	ldr	r0, [r4, #8]
    9c12:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    9c16:	07c0      	lsls	r0, r0, #31
    9c18:	d001      	beq.n	9c1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x107a>
    9c1a:	2001      	movs	r0, #1
    9c1c:	bd1c      	pop	{r2, r3, r4, pc}
    9c1e:	4669      	mov	r1, sp
    9c20:	6920      	ldr	r0, [r4, #16]
    9c22:	f004 f8e1 	bl	dde8 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    9c26:	f001 fa07 	bl	b038 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9c2a:	f644 112f 	movw	r1, #18735	; 0x492f
    9c2e:	4008      	ands	r0, r1
    9c30:	f89d 2000 	ldrb.w	r2, [sp]
    9c34:	68a1      	ldr	r1, [r4, #8]
    9c36:	4002      	ands	r2, r0
    9c38:	f801 2fb4 	strb.w	r2, [r1, #180]!
    9c3c:	f89d 2001 	ldrb.w	r2, [sp, #1]
    9c40:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    9c44:	7048      	strb	r0, [r1, #1]
    9c46:	f7ff f8c1 	bl	8dcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    9c4a:	68a0      	ldr	r0, [r4, #8]
    9c4c:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    9c50:	f041 0101 	orr.w	r1, r1, #1
    9c54:	7001      	strb	r1, [r0, #0]
    9c56:	2000      	movs	r0, #0
    9c58:	bd1c      	pop	{r2, r3, r4, pc}
    9c5a:	0000      	.short	0x0000
    9c5c:	2000012c 	.word	0x2000012c
    9c60:	4a0a      	ldr	r2, [pc, #40]	; (9c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e8>)
    9c62:	b510      	push	{r4, lr}
    9c64:	6890      	ldr	r0, [r2, #8]
    9c66:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    9c6a:	070b      	lsls	r3, r1, #28
    9c6c:	d501      	bpl.n	9c72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ce>
    9c6e:	2001      	movs	r0, #1
    9c70:	bd10      	pop	{r4, pc}
    9c72:	f041 0108 	orr.w	r1, r1, #8
    9c76:	f880 1077 	strb.w	r1, [r0, #119]	; 0x77
    9c7a:	6911      	ldr	r1, [r2, #16]
    9c7c:	78c9      	ldrb	r1, [r1, #3]
    9c7e:	f880 10e1 	strb.w	r1, [r0, #225]	; 0xe1
    9c82:	f7ff f8a3 	bl	8dcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    9c86:	2000      	movs	r0, #0
    9c88:	bd10      	pop	{r4, pc}
    9c8a:	0000      	.short	0x0000
    9c8c:	2000012c 	.word	0x2000012c
    9c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9c92:	4c2e      	ldr	r4, [pc, #184]	; (9d4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a8>)
    9c94:	68a0      	ldr	r0, [r4, #8]
    9c96:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    9c9a:	f010 0f30 	tst.w	r0, #48	; 0x30
    9c9e:	d001      	beq.n	9ca4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1100>
    9ca0:	2001      	movs	r0, #1
    9ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9ca4:	6920      	ldr	r0, [r4, #16]
    9ca6:	f004 f8ba 	bl	de1e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9caa:	b350      	cbz	r0, 9d02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x115e>
    9cac:	6920      	ldr	r0, [r4, #16]
    9cae:	f004 f8a8 	bl	de02 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9cb2:	4607      	mov	r7, r0
    9cb4:	6920      	ldr	r0, [r4, #16]
    9cb6:	f004 f8a8 	bl	de0a <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9cba:	4606      	mov	r6, r0
    9cbc:	6920      	ldr	r0, [r4, #16]
    9cbe:	f004 f89e 	bl	ddfe <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9cc2:	4605      	mov	r5, r0
    9cc4:	6920      	ldr	r0, [r4, #16]
    9cc6:	f004 f89e 	bl	de06 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9cca:	4601      	mov	r1, r0
    9ccc:	9700      	str	r7, [sp, #0]
    9cce:	68a0      	ldr	r0, [r4, #8]
    9cd0:	4633      	mov	r3, r6
    9cd2:	462a      	mov	r2, r5
    9cd4:	3024      	adds	r0, #36	; 0x24
    9cd6:	f004 fae8 	bl	e2aa <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9cda:	78a0      	ldrb	r0, [r4, #2]
    9cdc:	0780      	lsls	r0, r0, #30
    9cde:	d503      	bpl.n	9ce8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1144>
    9ce0:	68e0      	ldr	r0, [r4, #12]
    9ce2:	78c0      	ldrb	r0, [r0, #3]
    9ce4:	2814      	cmp	r0, #20
    9ce6:	d010      	beq.n	9d0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1166>
    9ce8:	68a1      	ldr	r1, [r4, #8]
    9cea:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    9cee:	281c      	cmp	r0, #28
    9cf0:	d00b      	beq.n	9d0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1166>
    9cf2:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    9cf6:	2801      	cmp	r0, #1
    9cf8:	d00f      	beq.n	9d1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1176>
    9cfa:	f891 019d 	ldrb.w	r0, [r1, #413]	; 0x19d
    9cfe:	b960      	cbnz	r0, 9d1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1176>
    9d00:	e008      	b.n	9d14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1170>
    9d02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9d06:	f7ff bfab 	b.w	9c60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10bc>
    9d0a:	68a1      	ldr	r1, [r4, #8]
    9d0c:	2001      	movs	r0, #1
    9d0e:	f881 0058 	strb.w	r0, [r1, #88]	; 0x58
    9d12:	e002      	b.n	9d1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1176>
    9d14:	f891 019c 	ldrb.w	r0, [r1, #412]	; 0x19c
    9d18:	b130      	cbz	r0, 9d28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1184>
    9d1a:	68a0      	ldr	r0, [r4, #8]
    9d1c:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    9d20:	f041 0110 	orr.w	r1, r1, #16
    9d24:	7001      	strb	r1, [r0, #0]
    9d26:	e00d      	b.n	9d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a0>
    9d28:	f891 0077 	ldrb.w	r0, [r1, #119]	; 0x77
    9d2c:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
    9d30:	f040 0020 	orr.w	r0, r0, #32
    9d34:	f881 0077 	strb.w	r0, [r1, #119]	; 0x77
    9d38:	f831 0b24 	ldrh.w	r0, [r1], #36
    9d3c:	f004 fabc 	bl	e2b8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    9d40:	f000 fdb2 	bl	a8a8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9d44:	f7ff f842 	bl	8dcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    9d48:	2000      	movs	r0, #0
    9d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9d4c:	2000012c 	.word	0x2000012c
    9d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d52:	4c1a      	ldr	r4, [pc, #104]	; (9dbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>)
    9d54:	2301      	movs	r3, #1
    9d56:	210a      	movs	r1, #10
    9d58:	68a0      	ldr	r0, [r4, #8]
    9d5a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    9d5e:	3068      	adds	r0, #104	; 0x68
    9d60:	f003 fdc8 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d64:	b338      	cbz	r0, 9db6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1212>
    9d66:	6920      	ldr	r0, [r4, #16]
    9d68:	f004 f859 	bl	de1e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9d6c:	b1c8      	cbz	r0, 9da2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11fe>
    9d6e:	6920      	ldr	r0, [r4, #16]
    9d70:	f004 f847 	bl	de02 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9d74:	4607      	mov	r7, r0
    9d76:	6920      	ldr	r0, [r4, #16]
    9d78:	f004 f847 	bl	de0a <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9d7c:	4606      	mov	r6, r0
    9d7e:	6920      	ldr	r0, [r4, #16]
    9d80:	f004 f83d 	bl	ddfe <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9d84:	4605      	mov	r5, r0
    9d86:	6920      	ldr	r0, [r4, #16]
    9d88:	f004 f83d 	bl	de06 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9d8c:	4601      	mov	r1, r0
    9d8e:	9700      	str	r7, [sp, #0]
    9d90:	68a0      	ldr	r0, [r4, #8]
    9d92:	4633      	mov	r3, r6
    9d94:	462a      	mov	r2, r5
    9d96:	3024      	adds	r0, #36	; 0x24
    9d98:	f004 fa87 	bl	e2aa <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9d9c:	68a0      	ldr	r0, [r4, #8]
    9d9e:	f004 f9fa 	bl	e196 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9da2:	68a1      	ldr	r1, [r4, #8]
    9da4:	2000      	movs	r0, #0
    9da6:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    9daa:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    9dae:	f7ff f9b7 	bl	9120 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57c>
    9db2:	2000      	movs	r0, #0
    9db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9db6:	2001      	movs	r0, #1
    9db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9dba:	0000      	.short	0x0000
    9dbc:	2000012c 	.word	0x2000012c
    9dc0:	b510      	push	{r4, lr}
    9dc2:	4c09      	ldr	r4, [pc, #36]	; (9de8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1244>)
    9dc4:	68a0      	ldr	r0, [r4, #8]
    9dc6:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    9dca:	0740      	lsls	r0, r0, #29
    9dcc:	d501      	bpl.n	9dd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x122e>
    9dce:	2001      	movs	r0, #1
    9dd0:	bd10      	pop	{r4, pc}
    9dd2:	f7fe fffb 	bl	8dcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    9dd6:	68a0      	ldr	r0, [r4, #8]
    9dd8:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    9ddc:	f041 0104 	orr.w	r1, r1, #4
    9de0:	7001      	strb	r1, [r0, #0]
    9de2:	2000      	movs	r0, #0
    9de4:	bd10      	pop	{r4, pc}
    9de6:	0000      	.short	0x0000
    9de8:	2000012c 	.word	0x2000012c
    9dec:	b510      	push	{r4, lr}
    9dee:	4c09      	ldr	r4, [pc, #36]	; (9e14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1270>)
    9df0:	2301      	movs	r3, #1
    9df2:	2109      	movs	r1, #9
    9df4:	68a0      	ldr	r0, [r4, #8]
    9df6:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    9dfa:	3068      	adds	r0, #104	; 0x68
    9dfc:	f003 fd7a 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e00:	2800      	cmp	r0, #0
    9e02:	d006      	beq.n	9e12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x126e>
    9e04:	68a1      	ldr	r1, [r4, #8]
    9e06:	2000      	movs	r0, #0
    9e08:	f801 0f9a 	strb.w	r0, [r1, #154]!
    9e0c:	7308      	strb	r0, [r1, #12]
    9e0e:	f801 0c25 	strb.w	r0, [r1, #-37]
    9e12:	bd10      	pop	{r4, pc}
    9e14:	2000012c 	.word	0x2000012c
    9e18:	b510      	push	{r4, lr}
    9e1a:	4c0f      	ldr	r4, [pc, #60]	; (9e58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12b4>)
    9e1c:	2301      	movs	r3, #1
    9e1e:	2100      	movs	r1, #0
    9e20:	68a0      	ldr	r0, [r4, #8]
    9e22:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9e26:	3068      	adds	r0, #104	; 0x68
    9e28:	f003 fd64 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e2c:	b138      	cbz	r0, 9e3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129a>
    9e2e:	f7fe ffcd 	bl	8dcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    9e32:	68a1      	ldr	r1, [r4, #8]
    9e34:	2010      	movs	r0, #16
    9e36:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    9e3a:	2000      	movs	r0, #0
    9e3c:	bd10      	pop	{r4, pc}
    9e3e:	68a0      	ldr	r0, [r4, #8]
    9e40:	2301      	movs	r3, #1
    9e42:	2105      	movs	r1, #5
    9e44:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9e48:	3068      	adds	r0, #104	; 0x68
    9e4a:	f003 fd53 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e4e:	b108      	cbz	r0, 9e54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12b0>
    9e50:	2008      	movs	r0, #8
    9e52:	bd10      	pop	{r4, pc}
    9e54:	2001      	movs	r0, #1
    9e56:	bd10      	pop	{r4, pc}
    9e58:	2000012c 	.word	0x2000012c
    9e5c:	4806      	ldr	r0, [pc, #24]	; (9e78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d4>)
    9e5e:	6880      	ldr	r0, [r0, #8]
    9e60:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9e64:	2911      	cmp	r1, #17
    9e66:	d001      	beq.n	9e6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12c8>
    9e68:	2002      	movs	r0, #2
    9e6a:	4770      	bx	lr
    9e6c:	2112      	movs	r1, #18
    9e6e:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    9e72:	2000      	movs	r0, #0
    9e74:	4770      	bx	lr
    9e76:	0000      	.short	0x0000
    9e78:	2000012c 	.word	0x2000012c
    9e7c:	b570      	push	{r4, r5, r6, lr}
    9e7e:	4c30      	ldr	r4, [pc, #192]	; (9f40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x139c>)
    9e80:	2301      	movs	r3, #1
    9e82:	210b      	movs	r1, #11
    9e84:	68a0      	ldr	r0, [r4, #8]
    9e86:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9e8a:	3068      	adds	r0, #104	; 0x68
    9e8c:	f003 fd32 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e90:	bb48      	cbnz	r0, 9ee6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1342>
    9e92:	68a0      	ldr	r0, [r4, #8]
    9e94:	2301      	movs	r3, #1
    9e96:	2100      	movs	r1, #0
    9e98:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9e9c:	3068      	adds	r0, #104	; 0x68
    9e9e:	f003 fd29 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ea2:	b1f0      	cbz	r0, 9ee2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x133e>
    9ea4:	68a0      	ldr	r0, [r4, #8]
    9ea6:	f890 0075 	ldrb.w	r0, [r0, #117]	; 0x75
    9eaa:	2824      	cmp	r0, #36	; 0x24
    9eac:	d01b      	beq.n	9ee6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1342>
    9eae:	6920      	ldr	r0, [r4, #16]
    9eb0:	f003 ffd1 	bl	de56 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    9eb4:	b1c8      	cbz	r0, 9eea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1346>
    9eb6:	68a0      	ldr	r0, [r4, #8]
    9eb8:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    9ebc:	f041 0104 	orr.w	r1, r1, #4
    9ec0:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    9ec4:	6921      	ldr	r1, [r4, #16]
    9ec6:	794a      	ldrb	r2, [r1, #5]
    9ec8:	f002 0207 	and.w	r2, r2, #7
    9ecc:	f880 205b 	strb.w	r2, [r0, #91]	; 0x5b
    9ed0:	7909      	ldrb	r1, [r1, #4]
    9ed2:	f001 0107 	and.w	r1, r1, #7
    9ed6:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
    9eda:	f890 31a7 	ldrb.w	r3, [r0, #423]	; 0x1a7
    9ede:	bb3b      	cbnz	r3, 9f30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138c>
    9ee0:	e007      	b.n	9ef2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134e>
    9ee2:	2001      	movs	r0, #1
    9ee4:	bd70      	pop	{r4, r5, r6, pc}
    9ee6:	2020      	movs	r0, #32
    9ee8:	bd70      	pop	{r4, r5, r6, pc}
    9eea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9eee:	f7ff beb7 	b.w	9c60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10bc>
    9ef2:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
    9ef6:	2b01      	cmp	r3, #1
    9ef8:	d01a      	beq.n	9f30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138c>
    9efa:	f100 0362 	add.w	r3, r0, #98	; 0x62
    9efe:	2501      	movs	r5, #1
    9f00:	785e      	ldrb	r6, [r3, #1]
    9f02:	428e      	cmp	r6, r1
    9f04:	d106      	bne.n	9f14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1370>
    9f06:	7819      	ldrb	r1, [r3, #0]
    9f08:	4291      	cmp	r1, r2
    9f0a:	d103      	bne.n	9f14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1370>
    9f0c:	2102      	movs	r1, #2
    9f0e:	f880 11a6 	strb.w	r1, [r0, #422]	; 0x1a6
    9f12:	e00d      	b.n	9f30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138c>
    9f14:	f500 71fb 	add.w	r1, r0, #502	; 0x1f6
    9f18:	8802      	ldrh	r2, [r0, #0]
    9f1a:	f821 2902 	strh.w	r2, [r1], #-2
    9f1e:	f890 205a 	ldrb.w	r2, [r0, #90]	; 0x5a
    9f22:	710a      	strb	r2, [r1, #4]
    9f24:	f890 005b 	ldrb.w	r0, [r0, #91]	; 0x5b
    9f28:	7148      	strb	r0, [r1, #5]
    9f2a:	700d      	strb	r5, [r1, #0]
    9f2c:	f000 fcbc 	bl	a8a8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9f30:	68a1      	ldr	r1, [r4, #8]
    9f32:	2021      	movs	r0, #33	; 0x21
    9f34:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    9f38:	f7fe ff48 	bl	8dcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    9f3c:	2000      	movs	r0, #0
    9f3e:	bd70      	pop	{r4, r5, r6, pc}
    9f40:	2000012c 	.word	0x2000012c
    9f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9f48:	4c4e      	ldr	r4, [pc, #312]	; (a084 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e0>)
    9f4a:	68a0      	ldr	r0, [r4, #8]
    9f4c:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    9f50:	2920      	cmp	r1, #32
    9f52:	d009      	beq.n	9f68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c4>
    9f54:	f05f 0700 	movs.w	r7, #0
    9f58:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9f5c:	2922      	cmp	r1, #34	; 0x22
    9f5e:	d005      	beq.n	9f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>
    9f60:	b387      	cbz	r7, 9fc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1420>
    9f62:	f100 0575 	add.w	r5, r0, #117	; 0x75
    9f66:	e003      	b.n	9f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13cc>
    9f68:	2701      	movs	r7, #1
    9f6a:	e7f5      	b.n	9f58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    9f6c:	f100 0576 	add.w	r5, r0, #118	; 0x76
    9f70:	f810 1fb4 	ldrb.w	r1, [r0, #180]!
    9f74:	f041 0104 	orr.w	r1, r1, #4
    9f78:	7001      	strb	r1, [r0, #0]
    9f7a:	6920      	ldr	r0, [r4, #16]
    9f7c:	f7fc fd30 	bl	69e0 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    9f80:	f04f 0801 	mov.w	r8, #1
    9f84:	2600      	movs	r6, #0
    9f86:	b308      	cbz	r0, 9fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>
    9f88:	4639      	mov	r1, r7
    9f8a:	6920      	ldr	r0, [r4, #16]
    9f8c:	f7fe ffd6 	bl	8f3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x398>
    9f90:	b1e0      	cbz	r0, 9fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>
    9f92:	466a      	mov	r2, sp
    9f94:	6921      	ldr	r1, [r4, #16]
    9f96:	68a0      	ldr	r0, [r4, #8]
    9f98:	f003 fdcf 	bl	db3a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    9f9c:	b388      	cbz	r0, a002 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    9f9e:	6920      	ldr	r0, [r4, #16]
    9fa0:	f003 ff35 	bl	de0e <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    9fa4:	68a1      	ldr	r1, [r4, #8]
    9fa6:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    9faa:	f8b1 106c 	ldrh.w	r1, [r1, #108]	; 0x6c
    9fae:	f004 ff87 	bl	eec0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9fb2:	b338      	cbz	r0, a004 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1460>
    9fb4:	68a0      	ldr	r0, [r4, #8]
    9fb6:	2128      	movs	r1, #40	; 0x28
    9fb8:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    9fbc:	306e      	adds	r0, #110	; 0x6e
    9fbe:	f880 801e 	strb.w	r8, [r0, #30]
    9fc2:	e053      	b.n	a06c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>
    9fc4:	e7ff      	b.n	9fc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1422>
    9fc6:	2002      	movs	r0, #2
    9fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9fcc:	68a0      	ldr	r0, [r4, #8]
    9fce:	f04f 0900 	mov.w	r9, #0
    9fd2:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    9fd6:	2901      	cmp	r1, #1
    9fd8:	d015      	beq.n	a006 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1462>
    9fda:	f880 61a6 	strb.w	r6, [r0, #422]	; 0x1a6
    9fde:	b1f7      	cbz	r7, a01e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x147a>
    9fe0:	6920      	ldr	r0, [r4, #16]
    9fe2:	68a1      	ldr	r1, [r4, #8]
    9fe4:	78c0      	ldrb	r0, [r0, #3]
    9fe6:	f881 00e2 	strb.w	r0, [r1, #226]	; 0xe2
    9fea:	fa08 f200 	lsl.w	r2, r8, r0
    9fee:	f3c2 6000 	ubfx	r0, r2, #24, #1
    9ff2:	b160      	cbz	r0, a00e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x146a>
    9ff4:	200a      	movs	r0, #10
    9ff6:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    9ffa:	f891 00a6 	ldrb.w	r0, [r1, #166]	; 0xa6
    9ffe:	b9a0      	cbnz	r0, a02a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1486>
    a000:	e008      	b.n	a014 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1470>
    a002:	e014      	b.n	a02e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x148a>
    a004:	e027      	b.n	a056 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b2>
    a006:	201e      	movs	r0, #30
    a008:	f7ff fd02 	bl	9a10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    a00c:	e7e7      	b.n	9fde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x143a>
    a00e:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    a012:	e001      	b.n	a018 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1474>
    a014:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    a018:	2031      	movs	r0, #49	; 0x31
    a01a:	f7fa fce9 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a01e:	702e      	strb	r6, [r5, #0]
    a020:	f7fe fee0 	bl	8de4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    a024:	f7ff fe1c 	bl	9c60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10bc>
    a028:	4681      	mov	r9, r0
    a02a:	4648      	mov	r0, r9
    a02c:	e7cc      	b.n	9fc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
    a02e:	68a0      	ldr	r0, [r4, #8]
    a030:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    a034:	2901      	cmp	r1, #1
    a036:	d009      	beq.n	a04c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a8>
    a038:	f880 61a6 	strb.w	r6, [r0, #422]	; 0x1a6
    a03c:	68a0      	ldr	r0, [r4, #8]
    a03e:	f100 0176 	add.w	r1, r0, #118	; 0x76
    a042:	428d      	cmp	r5, r1
    a044:	d112      	bne.n	a06c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>
    a046:	f880 6076 	strb.w	r6, [r0, #118]	; 0x76
    a04a:	e00f      	b.n	a06c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>
    a04c:	2000      	movs	r0, #0
    a04e:	f7ff fcdf 	bl	9a10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    a052:	702e      	strb	r6, [r5, #0]
    a054:	e7f2      	b.n	a03c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1498>
    a056:	68a0      	ldr	r0, [r4, #8]
    a058:	f89d 1000 	ldrb.w	r1, [sp]
    a05c:	f880 118e 	strb.w	r1, [r0, #398]	; 0x18e
    a060:	f89d 1001 	ldrb.w	r1, [sp, #1]
    a064:	f880 118f 	strb.w	r1, [r0, #399]	; 0x18f
    a068:	2024      	movs	r0, #36	; 0x24
    a06a:	7028      	strb	r0, [r5, #0]
    a06c:	68a0      	ldr	r0, [r4, #8]
    a06e:	f100 0176 	add.w	r1, r0, #118	; 0x76
    a072:	428d      	cmp	r5, r1
    a074:	d102      	bne.n	a07c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14d8>
    a076:	f7fe feb5 	bl	8de4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    a07a:	e001      	b.n	a080 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14dc>
    a07c:	f880 60a6 	strb.w	r6, [r0, #166]	; 0xa6
    a080:	2000      	movs	r0, #0
    a082:	e7a1      	b.n	9fc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
    a084:	2000012c 	.word	0x2000012c
    a088:	b510      	push	{r4, lr}
    a08a:	4c0a      	ldr	r4, [pc, #40]	; (a0b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1510>)
    a08c:	68a0      	ldr	r0, [r4, #8]
    a08e:	f810 1fb4 	ldrb.w	r1, [r0, #180]!
    a092:	f041 0104 	orr.w	r1, r1, #4
    a096:	7001      	strb	r1, [r0, #0]
    a098:	6920      	ldr	r0, [r4, #16]
    a09a:	f003 fee6 	bl	de6a <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    a09e:	2816      	cmp	r0, #22
    a0a0:	d001      	beq.n	a0a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1502>
    a0a2:	2000      	movs	r0, #0
    a0a4:	bd10      	pop	{r4, pc}
    a0a6:	6920      	ldr	r0, [r4, #16]
    a0a8:	f003 fee1 	bl	de6e <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    a0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a0b0:	f7fe be6a 	b.w	8d88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e4>
    a0b4:	2000012c 	.word	0x2000012c
    a0b8:	4802      	ldr	r0, [pc, #8]	; (a0c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1520>)
    a0ba:	6900      	ldr	r0, [r0, #16]
    a0bc:	7900      	ldrb	r0, [r0, #4]
    a0be:	f7fe be63 	b.w	8d88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e4>
    a0c2:	0000      	.short	0x0000
    a0c4:	2000012c 	.word	0x2000012c
    a0c8:	b510      	push	{r4, lr}
    a0ca:	4c08      	ldr	r4, [pc, #32]	; (a0ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1548>)
    a0cc:	68a0      	ldr	r0, [r4, #8]
    a0ce:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    a0d2:	2817      	cmp	r0, #23
    a0d4:	d001      	beq.n	a0da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1536>
    a0d6:	2002      	movs	r0, #2
    a0d8:	bd10      	pop	{r4, pc}
    a0da:	f7fe fe83 	bl	8de4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    a0de:	68a1      	ldr	r1, [r4, #8]
    a0e0:	201b      	movs	r0, #27
    a0e2:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    a0e6:	2000      	movs	r0, #0
    a0e8:	bd10      	pop	{r4, pc}
    a0ea:	0000      	.short	0x0000
    a0ec:	2000012c 	.word	0x2000012c
    a0f0:	b510      	push	{r4, lr}
    a0f2:	4c0b      	ldr	r4, [pc, #44]	; (a120 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x157c>)
    a0f4:	2301      	movs	r3, #1
    a0f6:	4619      	mov	r1, r3
    a0f8:	68a0      	ldr	r0, [r4, #8]
    a0fa:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    a0fe:	3068      	adds	r0, #104	; 0x68
    a100:	f003 fbf8 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a104:	b108      	cbz	r0, a10a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1566>
    a106:	2000      	movs	r0, #0
    a108:	bd10      	pop	{r4, pc}
    a10a:	6920      	ldr	r0, [r4, #16]
    a10c:	f003 fe83 	bl	de16 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    a110:	68a1      	ldr	r1, [r4, #8]
    a112:	f881 0172 	strb.w	r0, [r1, #370]	; 0x172
    a116:	2007      	movs	r0, #7
    a118:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    a11c:	e7f3      	b.n	a106 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1562>
    a11e:	0000      	.short	0x0000
    a120:	2000012c 	.word	0x2000012c
    a124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a128:	4d37      	ldr	r5, [pc, #220]	; (a208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1664>)
    a12a:	2600      	movs	r6, #0
    a12c:	4628      	mov	r0, r5
    a12e:	68a9      	ldr	r1, [r5, #8]
    a130:	6900      	ldr	r0, [r0, #16]
    a132:	2701      	movs	r7, #1
    a134:	f891 3075 	ldrb.w	r3, [r1, #117]	; 0x75
    a138:	7900      	ldrb	r0, [r0, #4]
    a13a:	2b0e      	cmp	r3, #14
    a13c:	d101      	bne.n	a142 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x159e>
    a13e:	2812      	cmp	r0, #18
    a140:	d006      	beq.n	a150 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    a142:	4a31      	ldr	r2, [pc, #196]	; (a208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1664>)
    a144:	2400      	movs	r4, #0
    a146:	6892      	ldr	r2, [r2, #8]
    a148:	32b4      	adds	r2, #180	; 0xb4
    a14a:	2b1c      	cmp	r3, #28
    a14c:	d004      	beq.n	a158 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b4>
    a14e:	e005      	b.n	a15c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b8>
    a150:	f7ff fe4c 	bl	9dec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1248>
    a154:	4606      	mov	r6, r0
    a156:	e053      	b.n	a200 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    a158:	2814      	cmp	r0, #20
    a15a:	d002      	beq.n	a162 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15be>
    a15c:	2b04      	cmp	r3, #4
    a15e:	d00b      	beq.n	a178 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15d4>
    a160:	e00c      	b.n	a17c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15d8>
    a162:	f881 4075 	strb.w	r4, [r1, #117]	; 0x75
    a166:	f881 40a6 	strb.w	r4, [r1, #166]	; 0xa6
    a16a:	2105      	movs	r1, #5
    a16c:	4610      	mov	r0, r2
    a16e:	f004 fe38 	bl	ede2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4ac>
    a172:	f7fe ffd5 	bl	9120 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57c>
    a176:	e043      	b.n	a200 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    a178:	280e      	cmp	r0, #14
    a17a:	d002      	beq.n	a182 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15de>
    a17c:	2b20      	cmp	r3, #32
    a17e:	d00f      	beq.n	a1a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15fc>
    a180:	e010      	b.n	a1a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1600>
    a182:	f881 4075 	strb.w	r4, [r1, #117]	; 0x75
    a186:	f881 40a6 	strb.w	r4, [r1, #166]	; 0xa6
    a18a:	8808      	ldrh	r0, [r1, #0]
    a18c:	f8a1 0206 	strh.w	r0, [r1, #518]	; 0x206
    a190:	201a      	movs	r0, #26
    a192:	f881 0204 	strb.w	r0, [r1, #516]	; 0x204
    a196:	f881 7202 	strb.w	r7, [r1, #514]	; 0x202
    a19a:	f000 fb85 	bl	a8a8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a19e:	e02f      	b.n	a200 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    a1a0:	2816      	cmp	r0, #22
    a1a2:	d006      	beq.n	a1b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x160e>
    a1a4:	2b26      	cmp	r3, #38	; 0x26
    a1a6:	d101      	bne.n	a1ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1608>
    a1a8:	2816      	cmp	r0, #22
    a1aa:	d002      	beq.n	a1b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x160e>
    a1ac:	2817      	cmp	r0, #23
    a1ae:	d014      	beq.n	a1da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1636>
    a1b0:	e026      	b.n	a200 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    a1b2:	f801 4f75 	strb.w	r4, [r1, #117]!
    a1b6:	f881 4031 	strb.w	r4, [r1, #49]	; 0x31
    a1ba:	7848      	ldrb	r0, [r1, #1]
    a1bc:	2821      	cmp	r0, #33	; 0x21
    a1be:	d01f      	beq.n	a200 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    a1c0:	2108      	movs	r1, #8
    a1c2:	4610      	mov	r0, r2
    a1c4:	f004 fe0d 	bl	ede2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4ac>
    a1c8:	68a8      	ldr	r0, [r5, #8]
    a1ca:	210b      	movs	r1, #11
    a1cc:	30b4      	adds	r0, #180	; 0xb4
    a1ce:	f004 fe08 	bl	ede2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4ac>
    a1d2:	201a      	movs	r0, #26
    a1d4:	f7ff fc1c 	bl	9a10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    a1d8:	e012      	b.n	a200 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    a1da:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
    a1de:	2822      	cmp	r0, #34	; 0x22
    a1e0:	d10e      	bne.n	a200 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    a1e2:	f881 4076 	strb.w	r4, [r1, #118]	; 0x76
    a1e6:	f7fe fdfd 	bl	8de4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    a1ea:	68a8      	ldr	r0, [r5, #8]
    a1ec:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    a1f0:	2801      	cmp	r0, #1
    a1f2:	d102      	bne.n	a1fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1656>
    a1f4:	2000      	movs	r0, #0
    a1f6:	f7ff fc0b 	bl	9a10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    a1fa:	68a8      	ldr	r0, [r5, #8]
    a1fc:	f880 41a6 	strb.w	r4, [r0, #422]	; 0x1a6
    a200:	4630      	mov	r0, r6
    a202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a206:	0000      	.short	0x0000
    a208:	2000012c 	.word	0x2000012c
    a20c:	b570      	push	{r4, r5, r6, lr}
    a20e:	4c2c      	ldr	r4, [pc, #176]	; (a2c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x171c>)
    a210:	68a0      	ldr	r0, [r4, #8]
    a212:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    a216:	0789      	lsls	r1, r1, #30
    a218:	d507      	bpl.n	a22a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1686>
    a21a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    a21e:	2301      	movs	r3, #1
    a220:	2108      	movs	r1, #8
    a222:	3068      	adds	r0, #104	; 0x68
    a224:	f003 fb66 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a228:	b1e8      	cbz	r0, a266 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c2>
    a22a:	68a0      	ldr	r0, [r4, #8]
    a22c:	f890 00ae 	ldrb.w	r0, [r0, #174]	; 0xae
    a230:	0780      	lsls	r0, r0, #30
    a232:	d412      	bmi.n	a25a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b6>
    a234:	6920      	ldr	r0, [r4, #16]
    a236:	f003 fdf0 	bl	de1a <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    a23a:	68a1      	ldr	r1, [r4, #8]
    a23c:	f881 00af 	strb.w	r0, [r1, #175]	; 0xaf
    a240:	6920      	ldr	r0, [r4, #16]
    a242:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    a246:	f8a1 20b0 	strh.w	r2, [r1, #176]	; 0xb0
    a24a:	8840      	ldrh	r0, [r0, #2]
    a24c:	f8a1 00b2 	strh.w	r0, [r1, #178]	; 0xb2
    a250:	f811 0fae 	ldrb.w	r0, [r1, #174]!
    a254:	f040 0002 	orr.w	r0, r0, #2
    a258:	7008      	strb	r0, [r1, #0]
    a25a:	68a0      	ldr	r0, [r4, #8]
    a25c:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    a260:	07c9      	lsls	r1, r1, #31
    a262:	d002      	beq.n	a26a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c6>
    a264:	e010      	b.n	a288 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e4>
    a266:	2001      	movs	r0, #1
    a268:	bd70      	pop	{r4, r5, r6, pc}
    a26a:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    a26e:	078a      	lsls	r2, r1, #30
    a270:	d504      	bpl.n	a27c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    a272:	f240 21d9 	movw	r1, #729	; 0x2d9
    a276:	2031      	movs	r0, #49	; 0x31
    a278:	f7fa fbba 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a27c:	f041 0102 	orr.w	r1, r1, #2
    a280:	f880 1077 	strb.w	r1, [r0, #119]	; 0x77
    a284:	f7fe fda2 	bl	8dcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    a288:	68a0      	ldr	r0, [r4, #8]
    a28a:	2500      	movs	r5, #0
    a28c:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    a290:	2906      	cmp	r1, #6
    a292:	d105      	bne.n	a2a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16fc>
    a294:	f880 5075 	strb.w	r5, [r0, #117]	; 0x75
    a298:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    a29c:	f000 fb04 	bl	a8a8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a2a0:	68a0      	ldr	r0, [r4, #8]
    a2a2:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
    a2a6:	b149      	cbz	r1, a2bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1718>
    a2a8:	f880 51ac 	strb.w	r5, [r0, #428]	; 0x1ac
    a2ac:	f000 fafc 	bl	a8a8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a2b0:	68a0      	ldr	r0, [r4, #8]
    a2b2:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    a2b6:	b909      	cbnz	r1, a2bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1718>
    a2b8:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    a2bc:	2000      	movs	r0, #0
    a2be:	bd70      	pop	{r4, r5, r6, pc}
    a2c0:	2000012c 	.word	0x2000012c
    a2c4:	b510      	push	{r4, lr}
    a2c6:	4c17      	ldr	r4, [pc, #92]	; (a324 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1780>)
    a2c8:	68a3      	ldr	r3, [r4, #8]
    a2ca:	f893 00ea 	ldrb.w	r0, [r3, #234]	; 0xea
    a2ce:	2808      	cmp	r0, #8
    a2d0:	d20e      	bcs.n	a2f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174c>
    a2d2:	f100 0208 	add.w	r2, r0, #8
    a2d6:	f1c0 0008 	rsb	r0, r0, #8
    a2da:	b2c1      	uxtb	r1, r0
    a2dc:	1898      	adds	r0, r3, r2
    a2de:	f500 7084 	add.w	r0, r0, #264	; 0x108
    a2e2:	f7fa fc1d 	bl	4b20 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a2e6:	68a1      	ldr	r1, [r4, #8]
    a2e8:	f811 2fea 	ldrb.w	r2, [r1, #234]!
    a2ec:	4410      	add	r0, r2
    a2ee:	7008      	strb	r0, [r1, #0]
    a2f0:	68a3      	ldr	r3, [r4, #8]
    a2f2:	f893 00ea 	ldrb.w	r0, [r3, #234]	; 0xea
    a2f6:	3808      	subs	r0, #8
    a2f8:	2804      	cmp	r0, #4
    a2fa:	d211      	bcs.n	a320 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x177c>
    a2fc:	1d02      	adds	r2, r0, #4
    a2fe:	f1c0 0004 	rsb	r0, r0, #4
    a302:	b2c1      	uxtb	r1, r0
    a304:	1898      	adds	r0, r3, r2
    a306:	30d8      	adds	r0, #216	; 0xd8
    a308:	f7fa fc0a 	bl	4b20 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a30c:	68a0      	ldr	r0, [r4, #8]
    a30e:	2100      	movs	r1, #0
    a310:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
    a314:	2101      	movs	r1, #1
    a316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a31a:	2004      	movs	r0, #4
    a31c:	f7ff ba96 	b.w	984c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    a320:	bd10      	pop	{r4, pc}
    a322:	0000      	.short	0x0000
    a324:	2000012c 	.word	0x2000012c
    a328:	4804      	ldr	r0, [pc, #16]	; (a33c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1798>)
    a32a:	2127      	movs	r1, #39	; 0x27
    a32c:	6880      	ldr	r0, [r0, #8]
    a32e:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    a332:	2100      	movs	r1, #0
    a334:	f880 1184 	strb.w	r1, [r0, #388]	; 0x184
    a338:	4770      	bx	lr
    a33a:	0000      	.short	0x0000
    a33c:	2000012c 	.word	0x2000012c
    a340:	4809      	ldr	r0, [pc, #36]	; (a368 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c4>)
    a342:	b510      	push	{r4, lr}
    a344:	6880      	ldr	r0, [r0, #8]
    a346:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    a34a:	2914      	cmp	r1, #20
    a34c:	d004      	beq.n	a358 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b4>
    a34e:	f240 6189 	movw	r1, #1673	; 0x689
    a352:	2031      	movs	r0, #49	; 0x31
    a354:	f7fa fb4c 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a358:	2101      	movs	r1, #1
    a35a:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    a35e:	2115      	movs	r1, #21
    a360:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    a364:	bd10      	pop	{r4, pc}
    a366:	0000      	.short	0x0000
    a368:	2000012c 	.word	0x2000012c
    a36c:	b510      	push	{r4, lr}
    a36e:	4c0a      	ldr	r4, [pc, #40]	; (a398 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f4>)
    a370:	68a0      	ldr	r0, [r4, #8]
    a372:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    a376:	07c0      	lsls	r0, r0, #31
    a378:	d008      	beq.n	a38c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17e8>
    a37a:	f7fe fd33 	bl	8de4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    a37e:	68a0      	ldr	r0, [r4, #8]
    a380:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    a384:	f021 0101 	bic.w	r1, r1, #1
    a388:	7001      	strb	r1, [r0, #0]
    a38a:	bd10      	pop	{r4, pc}
    a38c:	f240 6172 	movw	r1, #1650	; 0x672
    a390:	2031      	movs	r0, #49	; 0x31
    a392:	f7fa fb2d 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a396:	0000      	.short	0x0000
    a398:	2000012c 	.word	0x2000012c
    a39c:	b510      	push	{r4, lr}
    a39e:	4c0a      	ldr	r4, [pc, #40]	; (a3c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1824>)
    a3a0:	2301      	movs	r3, #1
    a3a2:	2100      	movs	r1, #0
    a3a4:	68a0      	ldr	r0, [r4, #8]
    a3a6:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    a3aa:	3068      	adds	r0, #104	; 0x68
    a3ac:	f003 faa2 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a3b0:	b120      	cbz	r0, a3bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1818>
    a3b2:	68a1      	ldr	r1, [r4, #8]
    a3b4:	201c      	movs	r0, #28
    a3b6:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    a3ba:	bd10      	pop	{r4, pc}
    a3bc:	f240 61f7 	movw	r1, #1783	; 0x6f7
    a3c0:	2031      	movs	r0, #49	; 0x31
    a3c2:	f7fa fb15 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a3c6:	0000      	.short	0x0000
    a3c8:	2000012c 	.word	0x2000012c
    a3cc:	480a      	ldr	r0, [pc, #40]	; (a3f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1854>)
    a3ce:	b510      	push	{r4, lr}
    a3d0:	6880      	ldr	r0, [r0, #8]
    a3d2:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    a3d6:	f3c1 1201 	ubfx	r2, r1, #4, #2
    a3da:	2a01      	cmp	r2, #1
    a3dc:	d004      	beq.n	a3e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1844>
    a3de:	f240 61fe 	movw	r1, #1790	; 0x6fe
    a3e2:	2031      	movs	r0, #49	; 0x31
    a3e4:	f7fa fb04 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a3e8:	f021 0110 	bic.w	r1, r1, #16
    a3ec:	f880 1077 	strb.w	r1, [r0, #119]	; 0x77
    a3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a3f4:	f7fe bcf6 	b.w	8de4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    a3f8:	2000012c 	.word	0x2000012c
    a3fc:	b510      	push	{r4, lr}
    a3fe:	4c0a      	ldr	r4, [pc, #40]	; (a428 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1884>)
    a400:	2301      	movs	r3, #1
    a402:	2100      	movs	r1, #0
    a404:	68a0      	ldr	r0, [r4, #8]
    a406:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    a40a:	3068      	adds	r0, #104	; 0x68
    a40c:	f003 fa72 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a410:	b120      	cbz	r0, a41c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1878>
    a412:	68a1      	ldr	r1, [r4, #8]
    a414:	200e      	movs	r0, #14
    a416:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    a41a:	bd10      	pop	{r4, pc}
    a41c:	f240 61ea 	movw	r1, #1770	; 0x6ea
    a420:	2031      	movs	r0, #49	; 0x31
    a422:	f7fa fae5 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a426:	0000      	.short	0x0000
    a428:	2000012c 	.word	0x2000012c
    a42c:	4804      	ldr	r0, [pc, #16]	; (a440 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x189c>)
    a42e:	6880      	ldr	r0, [r0, #8]
    a430:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    a434:	f021 0104 	bic.w	r1, r1, #4
    a438:	7001      	strb	r1, [r0, #0]
    a43a:	f7fe bcd3 	b.w	8de4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    a43e:	0000      	.short	0x0000
    a440:	2000012c 	.word	0x2000012c
    a444:	4809      	ldr	r0, [pc, #36]	; (a46c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c8>)
    a446:	b510      	push	{r4, lr}
    a448:	6880      	ldr	r0, [r0, #8]
    a44a:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    a44e:	2910      	cmp	r1, #16
    a450:	d004      	beq.n	a45c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18b8>
    a452:	f240 6181 	movw	r1, #1665	; 0x681
    a456:	2031      	movs	r0, #49	; 0x31
    a458:	f7fa faca 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a45c:	2101      	movs	r1, #1
    a45e:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    a462:	2111      	movs	r1, #17
    a464:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    a468:	bd10      	pop	{r4, pc}
    a46a:	0000      	.short	0x0000
    a46c:	2000012c 	.word	0x2000012c
    a470:	b510      	push	{r4, lr}
    a472:	4c0a      	ldr	r4, [pc, #40]	; (a49c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f8>)
    a474:	2301      	movs	r3, #1
    a476:	2100      	movs	r1, #0
    a478:	68a0      	ldr	r0, [r4, #8]
    a47a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    a47e:	3068      	adds	r0, #104	; 0x68
    a480:	f003 fa38 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a484:	b120      	cbz	r0, a490 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ec>
    a486:	68a1      	ldr	r1, [r4, #8]
    a488:	201f      	movs	r0, #31
    a48a:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    a48e:	bd10      	pop	{r4, pc}
    a490:	f240 710a 	movw	r1, #1802	; 0x70a
    a494:	2031      	movs	r0, #49	; 0x31
    a496:	f7fa faab 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a49a:	0000      	.short	0x0000
    a49c:	2000012c 	.word	0x2000012c
    a4a0:	4808      	ldr	r0, [pc, #32]	; (a4c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1920>)
    a4a2:	b510      	push	{r4, lr}
    a4a4:	6880      	ldr	r0, [r0, #8]
    a4a6:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    a4aa:	2921      	cmp	r1, #33	; 0x21
    a4ac:	d005      	beq.n	a4ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1916>
    a4ae:	b121      	cbz	r1, a4ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1916>
    a4b0:	f240 7111 	movw	r1, #1809	; 0x711
    a4b4:	2031      	movs	r0, #49	; 0x31
    a4b6:	f7fa fa9b 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a4ba:	2122      	movs	r1, #34	; 0x22
    a4bc:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    a4c0:	bd10      	pop	{r4, pc}
    a4c2:	0000      	.short	0x0000
    a4c4:	2000012c 	.word	0x2000012c
    a4c8:	4807      	ldr	r0, [pc, #28]	; (a4e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1944>)
    a4ca:	b510      	push	{r4, lr}
    a4cc:	6880      	ldr	r0, [r0, #8]
    a4ce:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    a4d2:	2915      	cmp	r1, #21
    a4d4:	d004      	beq.n	a4e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x193c>
    a4d6:	f240 6196 	movw	r1, #1686	; 0x696
    a4da:	2031      	movs	r0, #49	; 0x31
    a4dc:	f7fa fa88 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a4e0:	2119      	movs	r1, #25
    a4e2:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    a4e6:	bd10      	pop	{r4, pc}
    a4e8:	2000012c 	.word	0x2000012c
    a4ec:	4807      	ldr	r0, [pc, #28]	; (a50c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>)
    a4ee:	b510      	push	{r4, lr}
    a4f0:	6880      	ldr	r0, [r0, #8]
    a4f2:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    a4f6:	2915      	cmp	r1, #21
    a4f8:	d004      	beq.n	a504 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1960>
    a4fa:	f44f 61d2 	mov.w	r1, #1680	; 0x690
    a4fe:	2031      	movs	r0, #49	; 0x31
    a500:	f7fa fa76 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a504:	2117      	movs	r1, #23
    a506:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    a50a:	bd10      	pop	{r4, pc}
    a50c:	2000012c 	.word	0x2000012c
    a510:	b570      	push	{r4, r5, r6, lr}
    a512:	4d1b      	ldr	r5, [pc, #108]	; (a580 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19dc>)
    a514:	68a8      	ldr	r0, [r5, #8]
    a516:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    a51a:	291b      	cmp	r1, #27
    a51c:	d002      	beq.n	a524 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1980>
    a51e:	f44f 61d6 	mov.w	r1, #1712	; 0x6b0
    a522:	e007      	b.n	a534 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1990>
    a524:	2400      	movs	r4, #0
    a526:	f880 40ab 	strb.w	r4, [r0, #171]	; 0xab
    a52a:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
    a52e:	b121      	cbz	r1, a53a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1996>
    a530:	f240 61b4 	movw	r1, #1716	; 0x6b4
    a534:	2031      	movs	r0, #49	; 0x31
    a536:	f7fa fa5b 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a53a:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
    a53e:	b141      	cbz	r1, a552 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ae>
    a540:	f880 40ac 	strb.w	r4, [r0, #172]	; 0xac
    a544:	8801      	ldrh	r1, [r0, #0]
    a546:	f8a0 11c0 	strh.w	r1, [r0, #448]	; 0x1c0
    a54a:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    a54e:	210c      	movs	r1, #12
    a550:	e008      	b.n	a564 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c0>
    a552:	8801      	ldrh	r1, [r0, #0]
    a554:	f8a0 11c0 	strh.w	r1, [r0, #448]	; 0x1c0
    a558:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    a55c:	2101      	movs	r1, #1
    a55e:	f880 11c2 	strb.w	r1, [r0, #450]	; 0x1c2
    a562:	210b      	movs	r1, #11
    a564:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
    a568:	8800      	ldrh	r0, [r0, #0]
    a56a:	f7fa fe75 	bl	5258 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    a56e:	f002 ff34 	bl	d3da <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    a572:	f000 f999 	bl	a8a8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a576:	68a8      	ldr	r0, [r5, #8]
    a578:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
    a57c:	bd70      	pop	{r4, r5, r6, pc}
    a57e:	0000      	.short	0x0000
    a580:	2000012c 	.word	0x2000012c
    a584:	b510      	push	{r4, lr}
    a586:	4c08      	ldr	r4, [pc, #32]	; (a5a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a04>)
    a588:	2301      	movs	r3, #1
    a58a:	4619      	mov	r1, r3
    a58c:	68a0      	ldr	r0, [r4, #8]
    a58e:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    a592:	3068      	adds	r0, #104	; 0x68
    a594:	f003 f9ae 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a598:	2800      	cmp	r0, #0
    a59a:	d103      	bne.n	a5a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a00>
    a59c:	68a1      	ldr	r1, [r4, #8]
    a59e:	2008      	movs	r0, #8
    a5a0:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    a5a4:	bd10      	pop	{r4, pc}
    a5a6:	0000      	.short	0x0000
    a5a8:	2000012c 	.word	0x2000012c
    a5ac:	4814      	ldr	r0, [pc, #80]	; (a600 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a5c>)
    a5ae:	b510      	push	{r4, lr}
    a5b0:	68c1      	ldr	r1, [r0, #12]
    a5b2:	6880      	ldr	r0, [r0, #8]
    a5b4:	7909      	ldrb	r1, [r1, #4]
    a5b6:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    a5ba:	2a0a      	cmp	r2, #10
    a5bc:	d109      	bne.n	a5d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2e>
    a5be:	f890 20e2 	ldrb.w	r2, [r0, #226]	; 0xe2
    a5c2:	428a      	cmp	r2, r1
    a5c4:	d105      	bne.n	a5d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2e>
    a5c6:	2100      	movs	r1, #0
    a5c8:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    a5cc:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    a5d0:	bd10      	pop	{r4, pc}
    a5d2:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
    a5d6:	0713      	lsls	r3, r2, #28
    a5d8:	d507      	bpl.n	a5ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    a5da:	f022 0108 	bic.w	r1, r2, #8
    a5de:	f880 1077 	strb.w	r1, [r0, #119]	; 0x77
    a5e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a5e6:	f7fe bbfd 	b.w	8de4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    a5ea:	29ff      	cmp	r1, #255	; 0xff
    a5ec:	d004      	beq.n	a5f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a54>
    a5ee:	f240 616c 	movw	r1, #1644	; 0x66c
    a5f2:	2031      	movs	r0, #49	; 0x31
    a5f4:	f7fa f9fc 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a5fc:	f7ff be94 	b.w	a328 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1784>
    a600:	2000012c 	.word	0x2000012c
    a604:	b510      	push	{r4, lr}
    a606:	4c15      	ldr	r4, [pc, #84]	; (a65c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ab8>)
    a608:	68a0      	ldr	r0, [r4, #8]
    a60a:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    a60e:	0789      	lsls	r1, r1, #30
    a610:	d411      	bmi.n	a636 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a92>
    a612:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    a616:	2301      	movs	r3, #1
    a618:	2100      	movs	r1, #0
    a61a:	3068      	adds	r0, #104	; 0x68
    a61c:	f003 f96a 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a620:	b120      	cbz	r0, a62c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
    a622:	68a1      	ldr	r1, [r4, #8]
    a624:	2006      	movs	r0, #6
    a626:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    a62a:	e009      	b.n	a640 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a9c>
    a62c:	f240 61d6 	movw	r1, #1750	; 0x6d6
    a630:	2031      	movs	r0, #49	; 0x31
    a632:	f7fa f9dd 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a636:	2100      	movs	r1, #0
    a638:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    a63c:	f880 11ac 	strb.w	r1, [r0, #428]	; 0x1ac
    a640:	68a0      	ldr	r0, [r4, #8]
    a642:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    a646:	0780      	lsls	r0, r0, #30
    a648:	d507      	bpl.n	a65a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ab6>
    a64a:	f7fe fbcb 	bl	8de4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    a64e:	68a0      	ldr	r0, [r4, #8]
    a650:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    a654:	f021 0102 	bic.w	r1, r1, #2
    a658:	7001      	strb	r1, [r0, #0]
    a65a:	bd10      	pop	{r4, pc}
    a65c:	2000012c 	.word	0x2000012c
    a660:	4808      	ldr	r0, [pc, #32]	; (a684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae0>)
    a662:	b510      	push	{r4, lr}
    a664:	6880      	ldr	r0, [r0, #8]
    a666:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
    a66a:	b941      	cbnz	r1, a67e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ada>
    a66c:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    a670:	2301      	movs	r3, #1
    a672:	2106      	movs	r1, #6
    a674:	3068      	adds	r0, #104	; 0x68
    a676:	f003 f93d 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a67a:	2800      	cmp	r0, #0
    a67c:	d000      	beq.n	a680 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1adc>
    a67e:	2001      	movs	r0, #1
    a680:	bd10      	pop	{r4, pc}
    a682:	0000      	.short	0x0000
    a684:	2000012c 	.word	0x2000012c
    a688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a68a:	4c54      	ldr	r4, [pc, #336]	; (a7dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c38>)
    a68c:	4606      	mov	r6, r0
    a68e:	4615      	mov	r5, r2
    a690:	68a0      	ldr	r0, [r4, #8]
    a692:	b109      	cbz	r1, a698 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af4>
    a694:	2100      	movs	r1, #0
    a696:	e004      	b.n	a6a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afe>
    a698:	f8b0 1106 	ldrh.w	r1, [r0, #262]	; 0x106
    a69c:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
    a6a0:	4411      	add	r1, r2
    a6a2:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    a6a6:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    a6aa:	b939      	cbnz	r1, a6bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b18>
    a6ac:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    a6b0:	2301      	movs	r3, #1
    a6b2:	4619      	mov	r1, r3
    a6b4:	3068      	adds	r0, #104	; 0x68
    a6b6:	f003 f91d 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a6ba:	b130      	cbz	r0, a6ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b26>
    a6bc:	68a0      	ldr	r0, [r4, #8]
    a6be:	f830 1fa0 	ldrh.w	r1, [r0, #160]!
    a6c2:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
    a6c6:	4411      	add	r1, r2
    a6c8:	8001      	strh	r1, [r0, #0]
    a6ca:	68a0      	ldr	r0, [r4, #8]
    a6cc:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    a6d0:	b132      	cbz	r2, a6e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b3c>
    a6d2:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    a6d6:	f8b0 30f6 	ldrh.w	r3, [r0, #246]	; 0xf6
    a6da:	4419      	add	r1, r3
    a6dc:	f8a0 10a2 	strh.w	r1, [r0, #162]	; 0xa2
    a6e0:	f990 70aa 	ldrsb.w	r7, [r0, #170]	; 0xaa
    a6e4:	2f00      	cmp	r7, #0
    a6e6:	dd06      	ble.n	a6f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b52>
    a6e8:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
    a6ec:	f8b0 30f6 	ldrh.w	r3, [r0, #246]	; 0xf6
    a6f0:	4419      	add	r1, r3
    a6f2:	f8a0 10a8 	strh.w	r1, [r0, #168]	; 0xa8
    a6f6:	2101      	movs	r1, #1
    a6f8:	233d      	movs	r3, #61	; 0x3d
    a6fa:	b116      	cbz	r6, a702 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b5e>
    a6fc:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
    a700:	e013      	b.n	a72a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b86>
    a702:	7824      	ldrb	r4, [r4, #0]
    a704:	2c02      	cmp	r4, #2
    a706:	d00a      	beq.n	a71e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b7a>
    a708:	2c01      	cmp	r4, #1
    a70a:	d012      	beq.n	a732 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8e>
    a70c:	b345      	cbz	r5, a760 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbc>
    a70e:	f100 028c 	add.w	r2, r0, #140	; 0x8c
    a712:	7011      	strb	r1, [r2, #0]
    a714:	f015 0f14 	tst.w	r5, #20
    a718:	d00e      	beq.n	a738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b94>
    a71a:	211e      	movs	r1, #30
    a71c:	e018      	b.n	a750 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bac>
    a71e:	f890 20e6 	ldrb.w	r2, [r0, #230]	; 0xe6
    a722:	2a06      	cmp	r2, #6
    a724:	d03e      	beq.n	a7a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c00>
    a726:	2216      	movs	r2, #22
    a728:	e03c      	b.n	a7a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c00>
    a72a:	f100 028c 	add.w	r2, r0, #140	; 0x8c
    a72e:	7011      	strb	r1, [r2, #0]
    a730:	e041      	b.n	a7b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c12>
    a732:	f890 2172 	ldrb.w	r2, [r0, #370]	; 0x172
    a736:	e035      	b.n	a7a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c00>
    a738:	0729      	lsls	r1, r5, #28
    a73a:	d502      	bpl.n	a742 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b9e>
    a73c:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
    a740:	e039      	b.n	a7b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c12>
    a742:	06a9      	lsls	r1, r5, #26
    a744:	d501      	bpl.n	a74a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba6>
    a746:	2123      	movs	r1, #35	; 0x23
    a748:	e002      	b.n	a750 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bac>
    a74a:	07a9      	lsls	r1, r5, #30
    a74c:	d003      	beq.n	a756 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bb2>
    a74e:	212a      	movs	r1, #42	; 0x2a
    a750:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    a754:	e02f      	b.n	a7b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c12>
    a756:	f640 419b 	movw	r1, #3227	; 0xc9b
    a75a:	2031      	movs	r0, #49	; 0x31
    a75c:	f7fa f948 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a760:	b12a      	cbz	r2, a76e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bca>
    a762:	f8b0 20a2 	ldrh.w	r2, [r0, #162]	; 0xa2
    a766:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    a76a:	429a      	cmp	r2, r3
    a76c:	d210      	bcs.n	a790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bec>
    a76e:	2f00      	cmp	r7, #0
    a770:	dd05      	ble.n	a77e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bda>
    a772:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
    a776:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    a77a:	429a      	cmp	r2, r3
    a77c:	d208      	bcs.n	a790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bec>
    a77e:	f8b0 30a0 	ldrh.w	r3, [r0, #160]	; 0xa0
    a782:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    a786:	4293      	cmp	r3, r2
    a788:	d304      	bcc.n	a794 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bf0>
    a78a:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
    a78e:	b10b      	cbz	r3, a794 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bf0>
    a790:	2222      	movs	r2, #34	; 0x22
    a792:	e007      	b.n	a7a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c00>
    a794:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
    a798:	b13b      	cbz	r3, a7aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c06>
    a79a:	f8b0 309c 	ldrh.w	r3, [r0, #156]	; 0x9c
    a79e:	4293      	cmp	r3, r2
    a7a0:	d309      	bcc.n	a7b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c12>
    a7a2:	2208      	movs	r2, #8
    a7a4:	f880 208d 	strb.w	r2, [r0, #141]	; 0x8d
    a7a8:	e7bf      	b.n	a72a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b86>
    a7aa:	f8b0 209c 	ldrh.w	r2, [r0, #156]	; 0x9c
    a7ae:	2a06      	cmp	r2, #6
    a7b0:	d301      	bcc.n	a7b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c12>
    a7b2:	223e      	movs	r2, #62	; 0x3e
    a7b4:	e7f6      	b.n	a7a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c00>
    a7b6:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    a7ba:	f88d 1000 	strb.w	r1, [sp]
    a7be:	9900      	ldr	r1, [sp, #0]
    a7c0:	9100      	str	r1, [sp, #0]
    a7c2:	f89d 1000 	ldrb.w	r1, [sp]
    a7c6:	b119      	cbz	r1, a7d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c2c>
    a7c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a7cc:	f004 bb48 	b.w	ee60 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    a7d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a7d4:	2100      	movs	r1, #0
    a7d6:	f7fd bb55 	b.w	7e84 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a7da:	0000      	.short	0x0000
    a7dc:	2000012c 	.word	0x2000012c
    a7e0:	b570      	push	{r4, r5, r6, lr}
    a7e2:	4d2d      	ldr	r5, [pc, #180]	; (a898 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cf4>)
    a7e4:	68a8      	ldr	r0, [r5, #8]
    a7e6:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    a7ea:	b151      	cbz	r1, a802 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c5e>
    a7ec:	2901      	cmp	r1, #1
    a7ee:	d008      	beq.n	a802 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c5e>
    a7f0:	2902      	cmp	r1, #2
    a7f2:	d009      	beq.n	a808 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c64>
    a7f4:	2903      	cmp	r1, #3
    a7f6:	d007      	beq.n	a808 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c64>
    a7f8:	f640 215f 	movw	r1, #2655	; 0xa5f
    a7fc:	2031      	movs	r0, #49	; 0x31
    a7fe:	f7fa f8f7 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a802:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	; 0xf4
    a806:	e035      	b.n	a874 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cd0>
    a808:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    a80c:	2908      	cmp	r1, #8
    a80e:	d034      	beq.n	a87a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cd6>
    a810:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    a814:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    a818:	2400      	movs	r4, #0
    a81a:	1c8b      	adds	r3, r1, #2
    a81c:	429a      	cmp	r2, r3
    a81e:	d306      	bcc.n	a82e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c8a>
    a820:	1a51      	subs	r1, r2, r1
    a822:	1e89      	subs	r1, r1, #2
    a824:	040c      	lsls	r4, r1, #16
    a826:	0c24      	lsrs	r4, r4, #16
    a828:	d001      	beq.n	a82e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c8a>
    a82a:	1e64      	subs	r4, r4, #1
    a82c:	b2a4      	uxth	r4, r4
    a82e:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
    a832:	b139      	cbz	r1, a844 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca0>
    a834:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    a838:	2301      	movs	r3, #1
    a83a:	2109      	movs	r1, #9
    a83c:	3068      	adds	r0, #104	; 0x68
    a83e:	f003 f859 	bl	d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a842:	b330      	cbz	r0, a892 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cee>
    a844:	f7ff ff0c 	bl	a660 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1abc>
    a848:	b168      	cbz	r0, a866 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc2>
    a84a:	68a9      	ldr	r1, [r5, #8]
    a84c:	2000      	movs	r0, #0
    a84e:	3190      	adds	r1, #144	; 0x90
    a850:	c906      	ldmia	r1, {r1, r2}
    a852:	1c8b      	adds	r3, r1, #2
    a854:	429a      	cmp	r2, r3
    a856:	d303      	bcc.n	a860 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cbc>
    a858:	1a50      	subs	r0, r2, r1
    a85a:	1e80      	subs	r0, r0, #2
    a85c:	d000      	beq.n	a860 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cbc>
    a85e:	1e40      	subs	r0, r0, #1
    a860:	42a0      	cmp	r0, r4
    a862:	d200      	bcs.n	a866 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc2>
    a864:	b284      	uxth	r4, r0
    a866:	b10c      	cbz	r4, a86c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc8>
    a868:	1e64      	subs	r4, r4, #1
    a86a:	b2a4      	uxth	r4, r4
    a86c:	68a8      	ldr	r0, [r5, #8]
    a86e:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	; 0xf4
    a872:	4421      	add	r1, r4
    a874:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
    a878:	bd70      	pop	{r4, r5, r6, pc}
    a87a:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    a87e:	2903      	cmp	r1, #3
    a880:	d3bf      	bcc.n	a802 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c5e>
    a882:	f830 1f6c 	ldrh.w	r1, [r0, #108]!
    a886:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    a888:	4411      	add	r1, r2
    a88a:	1c49      	adds	r1, r1, #1
    a88c:	f8a0 1084 	strh.w	r1, [r0, #132]	; 0x84
    a890:	bd70      	pop	{r4, r5, r6, pc}
    a892:	2400      	movs	r4, #0
    a894:	e7ea      	b.n	a86c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc8>
    a896:	0000      	.short	0x0000
    a898:	2000012c 	.word	0x2000012c

0000a89c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    a89c:	4901      	ldr	r1, [pc, #4]	; (a8a4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    a89e:	7008      	strb	r0, [r1, #0]
    a8a0:	4770      	bx	lr
    a8a2:	0000      	.short	0x0000
    a8a4:	200002ab 	.word	0x200002ab

0000a8a8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    a8a8:	4801      	ldr	r0, [pc, #4]	; (a8b0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    a8aa:	7800      	ldrb	r0, [r0, #0]
    a8ac:	f7f9 beda 	b.w	4664 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a8b0:	200002ab 	.word	0x200002ab

0000a8b4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    a8b4:	4903      	ldr	r1, [pc, #12]	; (a8c4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    a8b6:	888a      	ldrh	r2, [r1, #4]
    a8b8:	8002      	strh	r2, [r0, #0]
    a8ba:	7889      	ldrb	r1, [r1, #2]
    a8bc:	7081      	strb	r1, [r0, #2]
    a8be:	2000      	movs	r0, #0
    a8c0:	4770      	bx	lr
    a8c2:	0000      	.short	0x0000
    a8c4:	20000f80 	.word	0x20000f80

0000a8c8 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    a8c8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a8ca:	460c      	mov	r4, r1
    a8cc:	4605      	mov	r5, r0
    a8ce:	8800      	ldrh	r0, [r0, #0]
    a8d0:	4669      	mov	r1, sp
    a8d2:	f002 ffe5 	bl	d8a0 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a8d6:	2200      	movs	r2, #0
    a8d8:	b128      	cbz	r0, a8e6 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    a8da:	f8c4 2002 	str.w	r2, [r4, #2]
    a8de:	71a2      	strb	r2, [r4, #6]
    a8e0:	8022      	strh	r2, [r4, #0]
    a8e2:	2002      	movs	r0, #2
    a8e4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a8e6:	9901      	ldr	r1, [sp, #4]
    a8e8:	f111 0168 	adds.w	r1, r1, #104	; 0x68
    a8ec:	f881 204e 	strb.w	r2, [r1, #78]	; 0x4e
    a8f0:	f8d1 0016 	ldr.w	r0, [r1, #22]
    a8f4:	f8c4 0002 	str.w	r0, [r4, #2]
    a8f8:	7e88      	ldrb	r0, [r1, #26]
    a8fa:	71a0      	strb	r0, [r4, #6]
    a8fc:	8828      	ldrh	r0, [r5, #0]
    a8fe:	8020      	strh	r0, [r4, #0]
    a900:	f891 004e 	ldrb.w	r0, [r1, #78]	; 0x4e
    a904:	2800      	cmp	r0, #0
    a906:	d1f1      	bne.n	a8ec <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    a908:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
	...

0000a90c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    a90c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a910:	460d      	mov	r5, r1
    a912:	4606      	mov	r6, r0
    a914:	f000 fb90 	bl	b038 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a918:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a91c:	b1e0      	cbz	r0, a958 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x4c>
    a91e:	8830      	ldrh	r0, [r6, #0]
    a920:	4669      	mov	r1, sp
    a922:	f002 ffbd 	bl	d8a0 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a926:	2800      	cmp	r0, #0
    a928:	d114      	bne.n	a954 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    a92a:	f8dd 4004 	ldr.w	r4, [sp, #4]
    a92e:	2700      	movs	r7, #0
    a930:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    a934:	f814 0f62 	ldrb.w	r0, [r4, #98]!
    a938:	f005 f80d 	bl	f956 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    a93c:	70a8      	strb	r0, [r5, #2]
    a93e:	7860      	ldrb	r0, [r4, #1]
    a940:	f005 f809 	bl	f956 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    a944:	70e8      	strb	r0, [r5, #3]
    a946:	78a0      	ldrb	r0, [r4, #2]
    a948:	3c62      	subs	r4, #98	; 0x62
    a94a:	2800      	cmp	r0, #0
    a94c:	d1f0      	bne.n	a930 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x24>
    a94e:	8830      	ldrh	r0, [r6, #0]
    a950:	8028      	strh	r0, [r5, #0]
    a952:	2000      	movs	r0, #0
    a954:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a958:	2001      	movs	r0, #1
    a95a:	e7fb      	b.n	a954 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>

0000a95c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    a95c:	b51c      	push	{r2, r3, r4, lr}
    a95e:	8800      	ldrh	r0, [r0, #0]
    a960:	4669      	mov	r1, sp
    a962:	f002 ff9d 	bl	d8a0 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a966:	2800      	cmp	r0, #0
    a968:	d10b      	bne.n	a982 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x26>
    a96a:	480b      	ldr	r0, [pc, #44]	; (a998 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3c>)
    a96c:	7800      	ldrb	r0, [r0, #0]
    a96e:	b188      	cbz	r0, a994 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
    a970:	9801      	ldr	r0, [sp, #4]
    a972:	f005 f96e 	bl	fc52 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    a976:	b128      	cbz	r0, a984 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    a978:	9801      	ldr	r0, [sp, #4]
    a97a:	f890 01ad 	ldrb.w	r0, [r0, #429]	; 0x1ad
    a97e:	b118      	cbz	r0, a988 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    a980:	203a      	movs	r0, #58	; 0x3a
    a982:	bd1c      	pop	{r2, r3, r4, pc}
    a984:	2002      	movs	r0, #2
    a986:	bd1c      	pop	{r2, r3, r4, pc}
    a988:	9901      	ldr	r1, [sp, #4]
    a98a:	2001      	movs	r0, #1
    a98c:	f881 01ad 	strb.w	r0, [r1, #429]	; 0x1ad
    a990:	2000      	movs	r0, #0
    a992:	bd1c      	pop	{r2, r3, r4, pc}
    a994:	2011      	movs	r0, #17
    a996:	bd1c      	pop	{r2, r3, r4, pc}
    a998:	20000208 	.word	0x20000208

0000a99c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    a99c:	b510      	push	{r4, lr}
    a99e:	4604      	mov	r4, r0
    a9a0:	f005 f94e 	bl	fc40 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    a9a4:	b130      	cbz	r0, a9b4 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    a9a6:	4804      	ldr	r0, [pc, #16]	; (a9b8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    a9a8:	8881      	ldrh	r1, [r0, #4]
    a9aa:	8021      	strh	r1, [r4, #0]
    a9ac:	88c0      	ldrh	r0, [r0, #6]
    a9ae:	8060      	strh	r0, [r4, #2]
    a9b0:	2000      	movs	r0, #0
    a9b2:	bd10      	pop	{r4, pc}
    a9b4:	2001      	movs	r0, #1
    a9b6:	bd10      	pop	{r4, pc}
    a9b8:	20000210 	.word	0x20000210

0000a9bc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    a9bc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a9be:	4605      	mov	r5, r0
    a9c0:	f000 fb3a 	bl	b038 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a9c4:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a9c8:	b310      	cbz	r0, aa10 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    a9ca:	2400      	movs	r4, #0
    a9cc:	a802      	add	r0, sp, #8
    a9ce:	f88d 4004 	strb.w	r4, [sp, #4]
    a9d2:	f88d 4008 	strb.w	r4, [sp, #8]
    a9d6:	9000      	str	r0, [sp, #0]
    a9d8:	78aa      	ldrb	r2, [r5, #2]
    a9da:	7869      	ldrb	r1, [r5, #1]
    a9dc:	7828      	ldrb	r0, [r5, #0]
    a9de:	ab01      	add	r3, sp, #4
    a9e0:	f005 f989 	bl	fcf6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d8>
    a9e4:	2800      	cmp	r0, #0
    a9e6:	d112      	bne.n	aa0e <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    a9e8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a9ec:	f005 f889 	bl	fb02 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e4>
    a9f0:	b180      	cbz	r0, aa14 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a9f2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a9f6:	f005 f884 	bl	fb02 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e4>
    a9fa:	b158      	cbz	r0, aa14 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a9fc:	4806      	ldr	r0, [pc, #24]	; (aa18 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    a9fe:	f89d 1004 	ldrb.w	r1, [sp, #4]
    aa02:	7481      	strb	r1, [r0, #18]
    aa04:	f89d 1008 	ldrb.w	r1, [sp, #8]
    aa08:	74c1      	strb	r1, [r0, #19]
    aa0a:	8284      	strh	r4, [r0, #20]
    aa0c:	2000      	movs	r0, #0
    aa0e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    aa10:	2001      	movs	r0, #1
    aa12:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    aa14:	2011      	movs	r0, #17
    aa16:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    aa18:	20000f80 	.word	0x20000f80

0000aa1c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    aa1c:	7801      	ldrb	r1, [r0, #0]
    aa1e:	b179      	cbz	r1, aa40 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    aa20:	7841      	ldrb	r1, [r0, #1]
    aa22:	b169      	cbz	r1, aa40 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    aa24:	8841      	ldrh	r1, [r0, #2]
    aa26:	291b      	cmp	r1, #27
    aa28:	d30a      	bcc.n	aa40 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    aa2a:	8881      	ldrh	r1, [r0, #4]
    aa2c:	291b      	cmp	r1, #27
    aa2e:	d307      	bcc.n	aa40 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    aa30:	4904      	ldr	r1, [pc, #16]	; (aa44 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    aa32:	6802      	ldr	r2, [r0, #0]
    aa34:	f8c1 2002 	str.w	r2, [r1, #2]
    aa38:	8880      	ldrh	r0, [r0, #4]
    aa3a:	80c8      	strh	r0, [r1, #6]
    aa3c:	2000      	movs	r0, #0
    aa3e:	4770      	bx	lr
    aa40:	2012      	movs	r0, #18
    aa42:	4770      	bx	lr
    aa44:	20000f80 	.word	0x20000f80

0000aa48 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    aa48:	6800      	ldr	r0, [r0, #0]
    aa4a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    aa4e:	4288      	cmp	r0, r1
    aa50:	d303      	bcc.n	aa5a <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    aa52:	4903      	ldr	r1, [pc, #12]	; (aa60 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    aa54:	6088      	str	r0, [r1, #8]
    aa56:	2000      	movs	r0, #0
    aa58:	4770      	bx	lr
    aa5a:	2012      	movs	r0, #18
    aa5c:	4770      	bx	lr
    aa5e:	0000      	.short	0x0000
    aa60:	20000f80 	.word	0x20000f80

0000aa64 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    aa64:	4a03      	ldr	r2, [pc, #12]	; (aa74 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    aa66:	e9d2 1200 	ldrd	r1, r2, [r2]
    aa6a:	6001      	str	r1, [r0, #0]
    aa6c:	6042      	str	r2, [r0, #4]
    aa6e:	2000      	movs	r0, #0
    aa70:	4770      	bx	lr
    aa72:	0000      	.short	0x0000
    aa74:	0000aed8 	.word	0x0000aed8

0000aa78 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    aa78:	b510      	push	{r4, lr}
    aa7a:	2005      	movs	r0, #5
    aa7c:	f000 fad2 	bl	b024 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    aa80:	f7fd feb4 	bl	87ec <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    aa84:	4902      	ldr	r1, [pc, #8]	; (aa90 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    aa86:	4801      	ldr	r0, [pc, #4]	; (aa8c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    aa88:	6048      	str	r0, [r1, #4]
    aa8a:	bd10      	pop	{r4, pc}
    aa8c:	0000ab19 	.word	0x0000ab19
    aa90:	20000208 	.word	0x20000208

0000aa94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    aa94:	b510      	push	{r4, lr}
    aa96:	f002 fe57 	bl	d748 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    aa9a:	f7fb fc55 	bl	6348 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    aa9e:	480f      	ldr	r0, [pc, #60]	; (aadc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x48>)
    aaa0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    aaa4:	4b0e      	ldr	r3, [pc, #56]	; (aae0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>)
    aaa6:	81c1      	strh	r1, [r0, #14]
    aaa8:	8201      	strh	r1, [r0, #16]
    aaaa:	2100      	movs	r1, #0
    aaac:	75c1      	strb	r1, [r0, #23]
    aaae:	8301      	strh	r1, [r0, #24]
    aab0:	8001      	strh	r1, [r0, #0]
    aab2:	221b      	movs	r2, #27
    aab4:	801a      	strh	r2, [r3, #0]
    aab6:	f44f 74a4 	mov.w	r4, #328	; 0x148
    aaba:	805c      	strh	r4, [r3, #2]
    aabc:	809a      	strh	r2, [r3, #4]
    aabe:	80dc      	strh	r4, [r3, #6]
    aac0:	7481      	strb	r1, [r0, #18]
    aac2:	74c1      	strb	r1, [r0, #19]
    aac4:	2303      	movs	r3, #3
    aac6:	7083      	strb	r3, [r0, #2]
    aac8:	2302      	movs	r3, #2
    aaca:	70c3      	strb	r3, [r0, #3]
    aacc:	8082      	strh	r2, [r0, #4]
    aace:	80c2      	strh	r2, [r0, #6]
    aad0:	f640 62a6 	movw	r2, #3750	; 0xea6
    aad4:	6082      	str	r2, [r0, #8]
    aad6:	7581      	strb	r1, [r0, #22]
    aad8:	7301      	strb	r1, [r0, #12]
    aada:	bd10      	pop	{r4, pc}
    aadc:	20000f80 	.word	0x20000f80
    aae0:	20000210 	.word	0x20000210

0000aae4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    aae4:	b510      	push	{r4, lr}
    aae6:	b158      	cbz	r0, ab00 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c>
    aae8:	490a      	ldr	r1, [pc, #40]	; (ab14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>)
    aaea:	780a      	ldrb	r2, [r1, #0]
    aaec:	b16a      	cbz	r2, ab0a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26>
    aaee:	2200      	movs	r2, #0
    aaf0:	7042      	strb	r2, [r0, #1]
    aaf2:	2303      	movs	r3, #3
    aaf4:	7003      	strb	r3, [r0, #0]
    aaf6:	2301      	movs	r3, #1
    aaf8:	7103      	strb	r3, [r0, #4]
    aafa:	700a      	strb	r2, [r1, #0]
    aafc:	4618      	mov	r0, r3
    aafe:	bd10      	pop	{r4, pc}
    ab00:	f44f 51be 	mov.w	r1, #6080	; 0x17c0
    ab04:	2039      	movs	r0, #57	; 0x39
    ab06:	f7f9 ff73 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ab0e:	f7fb bf97 	b.w	6a40 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    ab12:	0000      	.short	0x0000
    ab14:	20000f80 	.word	0x20000f80
    ab18:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab1c:	4692      	mov	sl, r2
    ab1e:	460f      	mov	r7, r1
    ab20:	4681      	mov	r9, r0
    ab22:	f005 f88d 	bl	fc40 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    ab26:	2800      	cmp	r0, #0
    ab28:	d063      	beq.n	abf2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    ab2a:	4933      	ldr	r1, [pc, #204]	; (abf8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>)
    ab2c:	f8b9 204c 	ldrh.w	r2, [r9, #76]	; 0x4c
    ab30:	f8b9 604a 	ldrh.w	r6, [r9, #74]	; 0x4a
    ab34:	8808      	ldrh	r0, [r1, #0]
    ab36:	4290      	cmp	r0, r2
    ab38:	d300      	bcc.n	ab3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    ab3a:	4610      	mov	r0, r2
    ab3c:	4680      	mov	r8, r0
    ab3e:	8888      	ldrh	r0, [r1, #4]
    ab40:	42b0      	cmp	r0, r6
    ab42:	d200      	bcs.n	ab46 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    ab44:	4606      	mov	r6, r0
    ab46:	884c      	ldrh	r4, [r1, #2]
    ab48:	f640 0048 	movw	r0, #2120	; 0x848
    ab4c:	4284      	cmp	r4, r0
    ab4e:	d300      	bcc.n	ab52 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6e>
    ab50:	4604      	mov	r4, r0
    ab52:	88cd      	ldrh	r5, [r1, #6]
    ab54:	4285      	cmp	r5, r0
    ab56:	d300      	bcc.n	ab5a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x76>
    ab58:	4605      	mov	r5, r0
    ab5a:	4284      	cmp	r4, r0
    ab5c:	d300      	bcc.n	ab60 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7c>
    ab5e:	4604      	mov	r4, r0
    ab60:	f44f 71a4 	mov.w	r1, #328	; 0x148
    ab64:	2e1b      	cmp	r6, #27
    ab66:	d001      	beq.n	ab6c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    ab68:	428d      	cmp	r5, r1
    ab6a:	d104      	bne.n	ab76 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x92>
    ab6c:	f1b8 0f1b 	cmp.w	r8, #27
    ab70:	d03f      	beq.n	abf2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    ab72:	428c      	cmp	r4, r1
    ab74:	d03d      	beq.n	abf2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    ab76:	466a      	mov	r2, sp
    ab78:	4651      	mov	r1, sl
    ab7a:	4648      	mov	r0, r9
    ab7c:	f004 ffe4 	bl	fb48 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22a>
    ab80:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    ab84:	4641      	mov	r1, r8
    ab86:	4540      	cmp	r0, r8
    ab88:	d900      	bls.n	ab8c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    ab8a:	4608      	mov	r0, r1
    ab8c:	80f8      	strh	r0, [r7, #6]
    ab8e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    ab92:	42a1      	cmp	r1, r4
    ab94:	d800      	bhi.n	ab98 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>
    ab96:	460c      	mov	r4, r1
    ab98:	813c      	strh	r4, [r7, #8]
    ab9a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    ab9e:	42b1      	cmp	r1, r6
    aba0:	d800      	bhi.n	aba4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    aba2:	460e      	mov	r6, r1
    aba4:	807e      	strh	r6, [r7, #2]
    aba6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    abaa:	42a9      	cmp	r1, r5
    abac:	d900      	bls.n	abb0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    abae:	4629      	mov	r1, r5
    abb0:	80b9      	strh	r1, [r7, #4]
    abb2:	2201      	movs	r2, #1
    abb4:	703a      	strb	r2, [r7, #0]
    abb6:	381b      	subs	r0, #27
    abb8:	28e0      	cmp	r0, #224	; 0xe0
    abba:	d902      	bls.n	abc2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xde>
    abbc:	f640 419b 	movw	r1, #3227	; 0xc9b
    abc0:	e014      	b.n	abec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    abc2:	3e1b      	subs	r6, #27
    abc4:	2ee0      	cmp	r6, #224	; 0xe0
    abc6:	d902      	bls.n	abce <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    abc8:	f640 419d 	movw	r1, #3229	; 0xc9d
    abcc:	e00e      	b.n	abec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    abce:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    abd2:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    abd6:	4284      	cmp	r4, r0
    abd8:	d902      	bls.n	abe0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfc>
    abda:	f640 419f 	movw	r1, #3231	; 0xc9f
    abde:	e005      	b.n	abec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    abe0:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    abe4:	4281      	cmp	r1, r0
    abe6:	d904      	bls.n	abf2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    abe8:	f640 41a1 	movw	r1, #3233	; 0xca1
    abec:	2039      	movs	r0, #57	; 0x39
    abee:	f7f9 feff 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    abf2:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    abf6:	0000      	.short	0x0000
    abf8:	20000210 	.word	0x20000210

0000abfc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    abfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac00:	b088      	sub	sp, #32
    ac02:	460c      	mov	r4, r1
    ac04:	4606      	mov	r6, r0
    ac06:	f003 fc5c 	bl	e4c2 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    ac0a:	b198      	cbz	r0, ac34 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    ac0c:	4630      	mov	r0, r6
    ac0e:	f003 fc4b 	bl	e4a8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    ac12:	b130      	cbz	r0, ac22 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    ac14:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    ac18:	2012      	movs	r0, #18
    ac1a:	2900      	cmp	r1, #0
    ac1c:	d00b      	beq.n	ac36 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ac1e:	2980      	cmp	r1, #128	; 0x80
    ac20:	d809      	bhi.n	ac36 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ac22:	4630      	mov	r0, r6
    ac24:	f003 fc2b 	bl	e47e <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    ac28:	b140      	cbz	r0, ac3c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    ac2a:	4630      	mov	r0, r6
    ac2c:	f003 fbb2 	bl	e394 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    ac30:	b130      	cbz	r0, ac40 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    ac32:	e009      	b.n	ac48 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    ac34:	2042      	movs	r0, #66	; 0x42
    ac36:	b008      	add	sp, #32
    ac38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ac3c:	200c      	movs	r0, #12
    ac3e:	e7fa      	b.n	ac36 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ac40:	4630      	mov	r0, r6
    ac42:	f003 fc2b 	bl	e49c <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    ac46:	b3a8      	cbz	r0, acb4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    ac48:	4630      	mov	r0, r6
    ac4a:	f003 fe3e 	bl	e8ca <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    ac4e:	2800      	cmp	r0, #0
    ac50:	d1f4      	bne.n	ac3c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    ac52:	4630      	mov	r0, r6
    ac54:	f003 fbb9 	bl	e3ca <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    ac58:	2800      	cmp	r0, #0
    ac5a:	d1ef      	bne.n	ac3c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    ac5c:	4630      	mov	r0, r6
    ac5e:	f7fc f90d 	bl	6e7c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    ac62:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    ac66:	f242 7110 	movw	r1, #10000	; 0x2710
    ac6a:	fb00 f801 	mul.w	r8, r0, r1
    ac6e:	78e1      	ldrb	r1, [r4, #3]
    ac70:	4630      	mov	r0, r6
    ac72:	f003 fbfb 	bl	e46c <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    ac76:	4630      	mov	r0, r6
    ac78:	f003 fc12 	bl	e4a0 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    ac7c:	b1e8      	cbz	r0, acba <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    ac7e:	2200      	movs	r2, #0
    ac80:	4611      	mov	r1, r2
    ac82:	a801      	add	r0, sp, #4
    ac84:	f7fa f92c 	bl	4ee0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    ac88:	0004      	movs	r4, r0
    ac8a:	d06a      	beq.n	ad62 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    ac8c:	2100      	movs	r1, #0
    ac8e:	f7fb fdc1 	bl	6814 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    ac92:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    ac96:	8020      	strh	r0, [r4, #0]
    ac98:	4621      	mov	r1, r4
    ac9a:	4630      	mov	r0, r6
    ac9c:	f003 fc24 	bl	e4e8 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    aca0:	f004 ffce 	bl	fc40 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    aca4:	4d3a      	ldr	r5, [pc, #232]	; (ad90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    aca6:	2800      	cmp	r0, #0
    aca8:	f104 0024 	add.w	r0, r4, #36	; 0x24
    acac:	d00f      	beq.n	acce <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    acae:	88aa      	ldrh	r2, [r5, #4]
    acb0:	88e9      	ldrh	r1, [r5, #6]
    acb2:	e00e      	b.n	acd2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    acb4:	e7ff      	b.n	acb6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    acb6:	2012      	movs	r0, #18
    acb8:	e7bd      	b.n	ac36 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    acba:	4642      	mov	r2, r8
    acbc:	2100      	movs	r1, #0
    acbe:	4630      	mov	r0, r6
    acc0:	f7fc fffc 	bl	7cbc <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    acc4:	2800      	cmp	r0, #0
    acc6:	d0b6      	beq.n	ac36 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    acc8:	f241 31fd 	movw	r1, #5117	; 0x13fd
    accc:	e053      	b.n	ad76 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    acce:	221b      	movs	r2, #27
    acd0:	4611      	mov	r1, r2
    acd2:	84c2      	strh	r2, [r0, #38]	; 0x26
    acd4:	8501      	strh	r1, [r0, #40]	; 0x28
    acd6:	68a8      	ldr	r0, [r5, #8]
    acd8:	6260      	str	r0, [r4, #36]	; 0x24
    acda:	f641 574c 	movw	r7, #7500	; 0x1d4c
    acde:	4630      	mov	r0, r6
    ace0:	f003 fbe6 	bl	e4b0 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ace4:	b910      	cbnz	r0, acec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    ace6:	4630      	mov	r0, r6
    ace8:	f003 fbfc 	bl	e4e4 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    acec:	6067      	str	r7, [r4, #4]
    acee:	8821      	ldrh	r1, [r4, #0]
    acf0:	f8ad 1008 	strh.w	r1, [sp, #8]
    acf4:	7ca9      	ldrb	r1, [r5, #18]
    acf6:	f88d 100a 	strb.w	r1, [sp, #10]
    acfa:	7ce9      	ldrb	r1, [r5, #19]
    acfc:	f88d 100b 	strb.w	r1, [sp, #11]
    ad00:	8aa9      	ldrh	r1, [r5, #20]
    ad02:	f8ad 100c 	strh.w	r1, [sp, #12]
    ad06:	a905      	add	r1, sp, #20
    ad08:	9100      	str	r1, [sp, #0]
    ad0a:	2001      	movs	r0, #1
    ad0c:	ab04      	add	r3, sp, #16
    ad0e:	aa02      	add	r2, sp, #8
    ad10:	4621      	mov	r1, r4
    ad12:	f004 ff56 	bl	fbc2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a4>
    ad16:	b140      	cbz	r0, ad2a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    ad18:	2100      	movs	r1, #0
    ad1a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    ad1e:	f7fa f909 	bl	4f34 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ad22:	b1f0      	cbz	r0, ad62 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    ad24:	f241 4148 	movw	r1, #5192	; 0x1448
    ad28:	e025      	b.n	ad76 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    ad2a:	f89d 0010 	ldrb.w	r0, [sp, #16]
    ad2e:	f88d 0018 	strb.w	r0, [sp, #24]
    ad32:	f89d 0014 	ldrb.w	r0, [sp, #20]
    ad36:	f88d 0019 	strb.w	r0, [sp, #25]
    ad3a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    ad3e:	f8ad 001a 	strh.w	r0, [sp, #26]
    ad42:	a906      	add	r1, sp, #24
    ad44:	4620      	mov	r0, r4
    ad46:	f002 fe6a 	bl	da1e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    ad4a:	78e8      	ldrb	r0, [r5, #3]
    ad4c:	9000      	str	r0, [sp, #0]
    ad4e:	78ab      	ldrb	r3, [r5, #2]
    ad50:	88ea      	ldrh	r2, [r5, #6]
    ad52:	88a9      	ldrh	r1, [r5, #4]
    ad54:	8820      	ldrh	r0, [r4, #0]
    ad56:	f7fa f9b9 	bl	50cc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    ad5a:	b120      	cbz	r0, ad66 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    ad5c:	f241 4153 	movw	r1, #5203	; 0x1453
    ad60:	e009      	b.n	ad76 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    ad62:	2009      	movs	r0, #9
    ad64:	e767      	b.n	ac36 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ad66:	4642      	mov	r2, r8
    ad68:	4621      	mov	r1, r4
    ad6a:	4630      	mov	r0, r6
    ad6c:	f7fc ffa6 	bl	7cbc <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    ad70:	b120      	cbz	r0, ad7c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    ad72:	f241 4155 	movw	r1, #5205	; 0x1455
    ad76:	2039      	movs	r0, #57	; 0x39
    ad78:	f7f9 fe3a 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad7c:	4805      	ldr	r0, [pc, #20]	; (ad94 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    ad7e:	6843      	ldr	r3, [r0, #4]
    ad80:	b123      	cbz	r3, ad8c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    ad82:	2200      	movs	r2, #0
    ad84:	f504 71ce 	add.w	r1, r4, #412	; 0x19c
    ad88:	4620      	mov	r0, r4
    ad8a:	4798      	blx	r3
    ad8c:	2000      	movs	r0, #0
    ad8e:	e752      	b.n	ac36 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ad90:	20000f80 	.word	0x20000f80
    ad94:	20000208 	.word	0x20000208
    ad98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ad9c:	b088      	sub	sp, #32
    ad9e:	4604      	mov	r4, r0
    ada0:	8800      	ldrh	r0, [r0, #0]
    ada2:	a906      	add	r1, sp, #24
    ada4:	f002 fd7c 	bl	d8a0 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ada8:	2800      	cmp	r0, #0
    adaa:	d147      	bne.n	ae3c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    adac:	9807      	ldr	r0, [sp, #28]
    adae:	2700      	movs	r7, #0
    adb0:	f890 11e0 	ldrb.w	r1, [r0, #480]	; 0x1e0
    adb4:	f88d 1008 	strb.w	r1, [sp, #8]
    adb8:	9902      	ldr	r1, [sp, #8]
    adba:	9102      	str	r1, [sp, #8]
    adbc:	f89d 1008 	ldrb.w	r1, [sp, #8]
    adc0:	f88d 100c 	strb.w	r1, [sp, #12]
    adc4:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    adc8:	3068      	adds	r0, #104	; 0x68
    adca:	0689      	lsls	r1, r1, #26
    adcc:	d502      	bpl.n	add4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d8>
    adce:	f89d 100c 	ldrb.w	r1, [sp, #12]
    add2:	b149      	cbz	r1, ade8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    add4:	f05f 0100 	movs.w	r1, #0
    add8:	f88d 1004 	strb.w	r1, [sp, #4]
    addc:	2105      	movs	r1, #5
    adde:	304c      	adds	r0, #76	; 0x4c
    ade0:	f004 f87a 	bl	eed8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    ade4:	b110      	cbz	r0, adec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f0>
    ade6:	e004      	b.n	adf2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f6>
    ade8:	2101      	movs	r1, #1
    adea:	e7f5      	b.n	add8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>
    adec:	f89d 0004 	ldrb.w	r0, [sp, #4]
    adf0:	b318      	cbz	r0, ae3a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x23e>
    adf2:	8921      	ldrh	r1, [r4, #8]
    adf4:	88e0      	ldrh	r0, [r4, #6]
    adf6:	f004 fe99 	bl	fb2c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    adfa:	2800      	cmp	r0, #0
    adfc:	d11e      	bne.n	ae3c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    adfe:	88a1      	ldrh	r1, [r4, #4]
    ae00:	8860      	ldrh	r0, [r4, #2]
    ae02:	f004 fe93 	bl	fb2c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    ae06:	2800      	cmp	r0, #0
    ae08:	d118      	bne.n	ae3c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    ae0a:	8921      	ldrh	r1, [r4, #8]
    ae0c:	88e0      	ldrh	r0, [r4, #6]
    ae0e:	f004 fe83 	bl	fb18 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    ae12:	2800      	cmp	r0, #0
    ae14:	d112      	bne.n	ae3c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    ae16:	88a1      	ldrh	r1, [r4, #4]
    ae18:	8860      	ldrh	r0, [r4, #2]
    ae1a:	f004 fe7d 	bl	fb18 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    ae1e:	0006      	movs	r6, r0
    ae20:	d10c      	bne.n	ae3c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    ae22:	9807      	ldr	r0, [sp, #28]
    ae24:	f04f 0801 	mov.w	r8, #1
    ae28:	f500 75ce 	add.w	r5, r0, #412	; 0x19c
    ae2c:	f880 819d 	strb.w	r8, [r0, #413]	; 0x19d
    ae30:	f89d 100c 	ldrb.w	r1, [sp, #12]
    ae34:	b129      	cbz	r1, ae42 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    ae36:	263a      	movs	r6, #58	; 0x3a
    ae38:	e02f      	b.n	ae9a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29e>
    ae3a:	201a      	movs	r0, #26
    ae3c:	b008      	add	sp, #32
    ae3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ae42:	4639      	mov	r1, r7
    ae44:	aa03      	add	r2, sp, #12
    ae46:	f004 fe7f 	bl	fb48 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22a>
    ae4a:	8861      	ldrh	r1, [r4, #2]
    ae4c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    ae50:	4281      	cmp	r1, r0
    ae52:	d200      	bcs.n	ae56 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x25a>
    ae54:	4608      	mov	r0, r1
    ae56:	80e8      	strh	r0, [r5, #6]
    ae58:	88a1      	ldrh	r1, [r4, #4]
    ae5a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    ae5e:	4281      	cmp	r1, r0
    ae60:	d200      	bcs.n	ae64 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x268>
    ae62:	4608      	mov	r0, r1
    ae64:	8128      	strh	r0, [r5, #8]
    ae66:	88e2      	ldrh	r2, [r4, #6]
    ae68:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    ae6c:	428a      	cmp	r2, r1
    ae6e:	d200      	bcs.n	ae72 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x276>
    ae70:	4611      	mov	r1, r2
    ae72:	8069      	strh	r1, [r5, #2]
    ae74:	8922      	ldrh	r2, [r4, #8]
    ae76:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    ae7a:	428a      	cmp	r2, r1
    ae7c:	d200      	bcs.n	ae80 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x284>
    ae7e:	4611      	mov	r1, r2
    ae80:	f640 0248 	movw	r2, #2120	; 0x848
    ae84:	80a9      	strh	r1, [r5, #4]
    ae86:	4291      	cmp	r1, r2
    ae88:	d300      	bcc.n	ae8c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x290>
    ae8a:	4611      	mov	r1, r2
    ae8c:	80a9      	strh	r1, [r5, #4]
    ae8e:	4290      	cmp	r0, r2
    ae90:	d200      	bcs.n	ae94 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    ae92:	4602      	mov	r2, r0
    ae94:	812a      	strh	r2, [r5, #8]
    ae96:	f885 8000 	strb.w	r8, [r5]
    ae9a:	706f      	strb	r7, [r5, #1]
    ae9c:	4630      	mov	r0, r6
    ae9e:	e7cd      	b.n	ae3c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    aea0:	b510      	push	{r4, lr}
    aea2:	4604      	mov	r4, r0
    aea4:	88c1      	ldrh	r1, [r0, #6]
    aea6:	8880      	ldrh	r0, [r0, #4]
    aea8:	f004 fe40 	bl	fb2c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    aeac:	2800      	cmp	r0, #0
    aeae:	d10f      	bne.n	aed0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    aeb0:	8861      	ldrh	r1, [r4, #2]
    aeb2:	8820      	ldrh	r0, [r4, #0]
    aeb4:	f004 fe3a 	bl	fb2c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    aeb8:	2800      	cmp	r0, #0
    aeba:	d109      	bne.n	aed0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    aebc:	4805      	ldr	r0, [pc, #20]	; (aed4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d8>)
    aebe:	88a1      	ldrh	r1, [r4, #4]
    aec0:	8081      	strh	r1, [r0, #4]
    aec2:	8821      	ldrh	r1, [r4, #0]
    aec4:	8001      	strh	r1, [r0, #0]
    aec6:	88e1      	ldrh	r1, [r4, #6]
    aec8:	80c1      	strh	r1, [r0, #6]
    aeca:	8861      	ldrh	r1, [r4, #2]
    aecc:	8041      	strh	r1, [r0, #2]
    aece:	2000      	movs	r0, #0
    aed0:	bd10      	pop	{r4, pc}
    aed2:	0000      	.short	0x0000
    aed4:	20000210 	.word	0x20000210
    aed8:	0b125b0b 	.word	0x0b125b0b
    aedc:	125b0059 	.word	0x125b0059
    aee0:	05060708 	.word	0x05060708
    aee4:	00020304 	.word	0x00020304
    aee8:	f0f4f8fc 	.word	0xf0f4f8fc
    aeec:	0304d8ec 	.word	0x0304d8ec
    aef0:	f4f8fc00 	.word	0xf4f8fc00
    aef4:	00d8ecf0 	.word	0x00d8ecf0

0000aef8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    aef8:	b510      	push	{r4, lr}
    aefa:	f7ff fccf 	bl	a89c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    aefe:	4804      	ldr	r0, [pc, #16]	; (af10 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    af00:	6840      	ldr	r0, [r0, #4]
    af02:	f004 ff70 	bl	fde6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    af06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    af0a:	f004 bca1 	b.w	f850 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    af0e:	0000      	.short	0x0000
    af10:	20000218 	.word	0x20000218

0000af14 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    af14:	b510      	push	{r4, lr}
    af16:	4c07      	ldr	r4, [pc, #28]	; (af34 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    af18:	68a0      	ldr	r0, [r4, #8]
    af1a:	f004 ff64 	bl	fde6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    af1e:	68e0      	ldr	r0, [r4, #12]
    af20:	f004 ff61 	bl	fde6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    af24:	f002 fc10 	bl	d748 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    af28:	f7fb fa0e 	bl	6348 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    af2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    af30:	f7ff bdb0 	b.w	aa94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    af34:	20000218 	.word	0x20000218

0000af38 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    af38:	b500      	push	{lr}
    af3a:	4905      	ldr	r1, [pc, #20]	; (af50 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    af3c:	4805      	ldr	r0, [pc, #20]	; (af54 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    af3e:	f004 ff33 	bl	fda8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    af42:	4804      	ldr	r0, [pc, #16]	; (af54 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    af44:	4904      	ldr	r1, [pc, #16]	; (af58 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    af46:	1d00      	adds	r0, r0, #4
    af48:	f85d eb04 	ldr.w	lr, [sp], #4
    af4c:	f004 bf2c 	b.w	fda8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    af50:	20000228 	.word	0x20000228
    af54:	2000021c 	.word	0x2000021c
    af58:	20000230 	.word	0x20000230

0000af5c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    af5c:	b500      	push	{lr}
    af5e:	4908      	ldr	r1, [pc, #32]	; (af80 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    af60:	4808      	ldr	r0, [pc, #32]	; (af84 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    af62:	f004 ff21 	bl	fda8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    af66:	4807      	ldr	r0, [pc, #28]	; (af84 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    af68:	4907      	ldr	r1, [pc, #28]	; (af88 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    af6a:	1d00      	adds	r0, r0, #4
    af6c:	f004 ff1c 	bl	fda8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    af70:	4804      	ldr	r0, [pc, #16]	; (af84 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    af72:	4906      	ldr	r1, [pc, #24]	; (af8c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    af74:	3008      	adds	r0, #8
    af76:	f85d eb04 	ldr.w	lr, [sp], #4
    af7a:	f004 bf15 	b.w	fda8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    af7e:	0000      	.short	0x0000
    af80:	20000254 	.word	0x20000254
    af84:	2000021c 	.word	0x2000021c
    af88:	2000025c 	.word	0x2000025c
    af8c:	2000024c 	.word	0x2000024c

0000af90 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    af90:	4801      	ldr	r0, [pc, #4]	; (af98 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    af92:	7800      	ldrb	r0, [r0, #0]
    af94:	4770      	bx	lr
    af96:	0000      	.short	0x0000
    af98:	20000218 	.word	0x20000218
    af9c:	b510      	push	{r4, lr}
    af9e:	f7fc f8e3 	bl	7168 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    afa2:	f7fc ff23 	bl	7dec <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>
    afa6:	4805      	ldr	r0, [pc, #20]	; (afbc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x2c>)
    afa8:	f7fc f8c4 	bl	7134 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    afac:	4905      	ldr	r1, [pc, #20]	; (afc4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x34>)
    afae:	4804      	ldr	r0, [pc, #16]	; (afc0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x30>)
    afb0:	6008      	str	r0, [r1, #0]
    afb2:	4906      	ldr	r1, [pc, #24]	; (afcc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x3c>)
    afb4:	4804      	ldr	r0, [pc, #16]	; (afc8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x38>)
    afb6:	6008      	str	r0, [r1, #0]
    afb8:	bd10      	pop	{r4, pc}
    afba:	0000      	.short	0x0000
    afbc:	2000134b 	.word	0x2000134b
    afc0:	00006f3d 	.word	0x00006f3d
    afc4:	20000238 	.word	0x20000238
    afc8:	00006ae1 	.word	0x00006ae1
    afcc:	2000023c 	.word	0x2000023c
    afd0:	490c      	ldr	r1, [pc, #48]	; (b004 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x74>)
    afd2:	b510      	push	{r4, lr}
    afd4:	2001      	movs	r0, #1
    afd6:	7008      	strb	r0, [r1, #0]
    afd8:	f7fc f8f6 	bl	71c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    afdc:	f7fd fd5e 	bl	8a9c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    afe0:	f002 fba0 	bl	d724 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    afe4:	4808      	ldr	r0, [pc, #32]	; (b008 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x78>)
    afe6:	f7fa fc3d 	bl	5864 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    afea:	2000      	movs	r0, #0
    afec:	f7f9 feea 	bl	4dc4 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    aff0:	4907      	ldr	r1, [pc, #28]	; (b010 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x80>)
    aff2:	4806      	ldr	r0, [pc, #24]	; (b00c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x7c>)
    aff4:	6008      	str	r0, [r1, #0]
    aff6:	4908      	ldr	r1, [pc, #32]	; (b018 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x88>)
    aff8:	4806      	ldr	r0, [pc, #24]	; (b014 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x84>)
    affa:	6008      	str	r0, [r1, #0]
    affc:	4908      	ldr	r1, [pc, #32]	; (b020 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x90>)
    affe:	4807      	ldr	r0, [pc, #28]	; (b01c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8c>)
    b000:	6008      	str	r0, [r1, #0]
    b002:	bd10      	pop	{r4, pc}
    b004:	20000218 	.word	0x20000218
    b008:	2000134b 	.word	0x2000134b
    b00c:	00005811 	.word	0x00005811
    b010:	20000248 	.word	0x20000248
    b014:	0000881d 	.word	0x0000881d
    b018:	20000244 	.word	0x20000244
    b01c:	00006b55 	.word	0x00006b55
    b020:	20000240 	.word	0x20000240

0000b024 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    b024:	2101      	movs	r1, #1
    b026:	4081      	lsls	r1, r0
    b028:	4802      	ldr	r0, [pc, #8]	; (b034 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    b02a:	6802      	ldr	r2, [r0, #0]
    b02c:	4311      	orrs	r1, r2
    b02e:	6001      	str	r1, [r0, #0]
    b030:	4770      	bx	lr
    b032:	0000      	.short	0x0000
    b034:	20000264 	.word	0x20000264

0000b038 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    b038:	4801      	ldr	r0, [pc, #4]	; (b040 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    b03a:	6800      	ldr	r0, [r0, #0]
    b03c:	4770      	bx	lr
    b03e:	0000      	.short	0x0000
    b040:	20000264 	.word	0x20000264

0000b044 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    b044:	4803      	ldr	r0, [pc, #12]	; (b054 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    b046:	8800      	ldrh	r0, [r0, #0]
    b048:	f3c0 2000 	ubfx	r0, r0, #8, #1
    b04c:	0040      	lsls	r0, r0, #1
    b04e:	1c40      	adds	r0, r0, #1
    b050:	4770      	bx	lr
    b052:	0000      	.short	0x0000
    b054:	20000264 	.word	0x20000264

0000b058 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    b058:	b570      	push	{r4, r5, r6, lr}
    b05a:	4605      	mov	r5, r0
    b05c:	4616      	mov	r6, r2
    b05e:	460c      	mov	r4, r1
    b060:	2002      	movs	r0, #2
    b062:	f000 f999 	bl	b398 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b066:	4906      	ldr	r1, [pc, #24]	; (b080 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    b068:	2001      	movs	r0, #1
    b06a:	1ef6      	subs	r6, r6, #3
    b06c:	7008      	strb	r0, [r1, #0]
    b06e:	4805      	ldr	r0, [pc, #20]	; (b084 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b070:	6006      	str	r6, [r0, #0]
    b072:	4804      	ldr	r0, [pc, #16]	; (b084 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b074:	3808      	subs	r0, #8
    b076:	6005      	str	r5, [r0, #0]
    b078:	1f00      	subs	r0, r0, #4
    b07a:	6004      	str	r4, [r0, #0]
    b07c:	bd70      	pop	{r4, r5, r6, pc}
    b07e:	0000      	.short	0x0000
    b080:	200002ac 	.word	0x200002ac
    b084:	4000f510 	.word	0x4000f510

0000b088 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    b088:	b510      	push	{r4, lr}
    b08a:	4c0c      	ldr	r4, [pc, #48]	; (b0bc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    b08c:	7820      	ldrb	r0, [r4, #0]
    b08e:	b180      	cbz	r0, b0b2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    b090:	490b      	ldr	r1, [pc, #44]	; (b0c0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    b092:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b096:	6008      	str	r0, [r1, #0]
    b098:	f000 f86a 	bl	b170 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b09c:	2100      	movs	r1, #0
    b09e:	b120      	cbz	r0, b0aa <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    b0a0:	2001      	movs	r0, #1
    b0a2:	7060      	strb	r0, [r4, #1]
    b0a4:	4807      	ldr	r0, [pc, #28]	; (b0c4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    b0a6:	6800      	ldr	r0, [r0, #0]
    b0a8:	e001      	b.n	b0ae <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    b0aa:	7061      	strb	r1, [r4, #1]
    b0ac:	2010      	movs	r0, #16
    b0ae:	70a0      	strb	r0, [r4, #2]
    b0b0:	7021      	strb	r1, [r4, #0]
    b0b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b0b6:	2000      	movs	r0, #0
    b0b8:	f000 b96e 	b.w	b398 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b0bc:	200002ac 	.word	0x200002ac
    b0c0:	4001f508 	.word	0x4001f508
    b0c4:	4000f400 	.word	0x4000f400

0000b0c8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    b0c8:	b510      	push	{r4, lr}
    b0ca:	2002      	movs	r0, #2
    b0cc:	f000 f964 	bl	b398 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b0d0:	4904      	ldr	r1, [pc, #16]	; (b0e4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    b0d2:	2001      	movs	r0, #1
    b0d4:	7008      	strb	r0, [r1, #0]
    b0d6:	f000 f859 	bl	b18c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    b0da:	4903      	ldr	r1, [pc, #12]	; (b0e8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    b0dc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b0e0:	6008      	str	r0, [r1, #0]
    b0e2:	bd10      	pop	{r4, pc}
    b0e4:	200002ac 	.word	0x200002ac
    b0e8:	4001f504 	.word	0x4001f504

0000b0ec <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    b0ec:	4803      	ldr	r0, [pc, #12]	; (b0fc <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    b0ee:	2100      	movs	r1, #0
    b0f0:	7001      	strb	r1, [r0, #0]
    b0f2:	7041      	strb	r1, [r0, #1]
    b0f4:	2110      	movs	r1, #16
    b0f6:	7081      	strb	r1, [r0, #2]
    b0f8:	4770      	bx	lr
    b0fa:	0000      	.short	0x0000
    b0fc:	200002ac 	.word	0x200002ac

0000b100 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    b100:	4807      	ldr	r0, [pc, #28]	; (b120 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    b102:	b510      	push	{r4, lr}
    b104:	7801      	ldrb	r1, [r0, #0]
    b106:	b141      	cbz	r1, b11a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    b108:	f000 f832 	bl	b170 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b10c:	b118      	cbz	r0, b116 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    b10e:	4805      	ldr	r0, [pc, #20]	; (b124 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    b110:	6800      	ldr	r0, [r0, #0]
    b112:	b2c0      	uxtb	r0, r0
    b114:	bd10      	pop	{r4, pc}
    b116:	2010      	movs	r0, #16
    b118:	bd10      	pop	{r4, pc}
    b11a:	7880      	ldrb	r0, [r0, #2]
    b11c:	bd10      	pop	{r4, pc}
    b11e:	0000      	.short	0x0000
    b120:	200002ac 	.word	0x200002ac
    b124:	4000f400 	.word	0x4000f400

0000b128 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    b128:	4808      	ldr	r0, [pc, #32]	; (b14c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    b12a:	b510      	push	{r4, lr}
    b12c:	7801      	ldrb	r1, [r0, #0]
    b12e:	b159      	cbz	r1, b148 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    b130:	4807      	ldr	r0, [pc, #28]	; (b150 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    b132:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b136:	b128      	cbz	r0, b144 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    b138:	f000 f80c 	bl	b154 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b13c:	2800      	cmp	r0, #0
    b13e:	d000      	beq.n	b142 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    b140:	2001      	movs	r0, #1
    b142:	bd10      	pop	{r4, pc}
    b144:	2002      	movs	r0, #2
    b146:	bd10      	pop	{r4, pc}
    b148:	7840      	ldrb	r0, [r0, #1]
    b14a:	bd10      	pop	{r4, pc}
    b14c:	200002ac 	.word	0x200002ac
    b150:	4000f000 	.word	0x4000f000
    b154:	4805      	ldr	r0, [pc, #20]	; (b16c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    b156:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    b15a:	b111      	cbz	r1, b162 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    b15c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b160:	b108      	cbz	r0, b166 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    b162:	2000      	movs	r0, #0
    b164:	4770      	bx	lr
    b166:	2001      	movs	r0, #1
    b168:	4770      	bx	lr
    b16a:	0000      	.short	0x0000
    b16c:	4000f000 	.word	0x4000f000
    b170:	4805      	ldr	r0, [pc, #20]	; (b188 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    b172:	b510      	push	{r4, lr}
    b174:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b178:	b120      	cbz	r0, b184 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b17a:	f7ff ffeb 	bl	b154 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b17e:	b108      	cbz	r0, b184 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b180:	2001      	movs	r0, #1
    b182:	bd10      	pop	{r4, pc}
    b184:	2000      	movs	r0, #0
    b186:	bd10      	pop	{r4, pc}
    b188:	4000f000 	.word	0x4000f000
    b18c:	4804      	ldr	r0, [pc, #16]	; (b1a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    b18e:	2100      	movs	r1, #0
    b190:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b194:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b198:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b19c:	4770      	bx	lr
    b19e:	0000      	.short	0x0000
    b1a0:	4000f000 	.word	0x4000f000

0000b1a4 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    b1a4:	4a08      	ldr	r2, [pc, #32]	; (b1c8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    b1a6:	b510      	push	{r4, lr}
    b1a8:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b1ac:	4907      	ldr	r1, [pc, #28]	; (b1cc <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    b1ae:	4610      	mov	r0, r2
    b1b0:	f7f9 fb04 	bl	47bc <mpsl_fem_lna_configuration_set>
    b1b4:	2800      	cmp	r0, #0
    b1b6:	d005      	beq.n	b1c4 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b1b8:	1c40      	adds	r0, r0, #1
    b1ba:	d003      	beq.n	b1c4 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b1bc:	217d      	movs	r1, #125	; 0x7d
    b1be:	2040      	movs	r0, #64	; 0x40
    b1c0:	f7f9 fc16 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1c4:	bd10      	pop	{r4, pc}
    b1c6:	0000      	.short	0x0000
    b1c8:	20000268 	.word	0x20000268
    b1cc:	0000b1fc 	.word	0x0000b1fc

0000b1d0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    b1d0:	4a08      	ldr	r2, [pc, #32]	; (b1f4 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    b1d2:	b510      	push	{r4, lr}
    b1d4:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b1d8:	4907      	ldr	r1, [pc, #28]	; (b1f8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    b1da:	4610      	mov	r0, r2
    b1dc:	f7f9 fafa 	bl	47d4 <mpsl_fem_pa_configuration_set>
    b1e0:	2800      	cmp	r0, #0
    b1e2:	d005      	beq.n	b1f0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b1e4:	1c40      	adds	r0, r0, #1
    b1e6:	d003      	beq.n	b1f0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b1e8:	2172      	movs	r1, #114	; 0x72
    b1ea:	2040      	movs	r0, #64	; 0x40
    b1ec:	f7f9 fc00 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1f0:	bd10      	pop	{r4, pc}
    b1f2:	0000      	.short	0x0000
    b1f4:	20000268 	.word	0x20000268
    b1f8:	0000b1fc 	.word	0x0000b1fc
    b1fc:	00000001 	.word	0x00000001
    b200:	40001110 	.word	0x40001110
	...

0000b214 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>:
    b214:	b570      	push	{r4, r5, r6, lr}
    b216:	4606      	mov	r6, r0
    b218:	4614      	mov	r4, r2
    b21a:	460d      	mov	r5, r1
    b21c:	2001      	movs	r0, #1
    b21e:	f000 f8bb 	bl	b398 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b222:	4803      	ldr	r0, [pc, #12]	; (b230 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ+0x1c>)
    b224:	6006      	str	r6, [r0, #0]
    b226:	1d00      	adds	r0, r0, #4
    b228:	6004      	str	r4, [r0, #0]
    b22a:	1d00      	adds	r0, r0, #4
    b22c:	6005      	str	r5, [r0, #0]
    b22e:	bd70      	pop	{r4, r5, r6, pc}
    b230:	4000f508 	.word	0x4000f508

0000b234 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    b234:	480a      	ldr	r0, [pc, #40]	; (b260 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x2c>)
    b236:	7801      	ldrb	r1, [r0, #0]
    b238:	b171      	cbz	r1, b258 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x24>
    b23a:	4a0a      	ldr	r2, [pc, #40]	; (b264 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    b23c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    b240:	6011      	str	r1, [r2, #0]
    b242:	4909      	ldr	r1, [pc, #36]	; (b268 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    b244:	f8d1 2104 	ldr.w	r2, [r1, #260]	; 0x104
    b248:	2100      	movs	r1, #0
    b24a:	b11a      	cbz	r2, b254 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    b24c:	4a07      	ldr	r2, [pc, #28]	; (b26c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    b24e:	6812      	ldr	r2, [r2, #0]
    b250:	7042      	strb	r2, [r0, #1]
    b252:	e000      	b.n	b256 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    b254:	7041      	strb	r1, [r0, #1]
    b256:	7001      	strb	r1, [r0, #0]
    b258:	2000      	movs	r0, #0
    b25a:	f000 b89d 	b.w	b398 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b25e:	0000      	.short	0x0000
    b260:	200002af 	.word	0x200002af
    b264:	4001f508 	.word	0x4001f508
    b268:	4000f000 	.word	0x4000f000
    b26c:	4000f400 	.word	0x4000f400

0000b270 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>:
    b270:	b570      	push	{r4, r5, r6, lr}
    b272:	4604      	mov	r4, r0
    b274:	4816      	ldr	r0, [pc, #88]	; (b2d0 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x60>)
    b276:	460e      	mov	r6, r1
    b278:	2501      	movs	r5, #1
    b27a:	7005      	strb	r5, [r0, #0]
    b27c:	4915      	ldr	r1, [pc, #84]	; (b2d4 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    b27e:	ea44 4002 	orr.w	r0, r4, r2, lsl #16
    b282:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    b286:	6008      	str	r0, [r1, #0]
    b288:	f001 f987 	bl	c59a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b28c:	b930      	cbnz	r0, b29c <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x2c>
    b28e:	4811      	ldr	r0, [pc, #68]	; (b2d4 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    b290:	3014      	adds	r0, #20
    b292:	6801      	ldr	r1, [r0, #0]
    b294:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    b298:	4331      	orrs	r1, r6
    b29a:	6001      	str	r1, [r0, #0]
    b29c:	490e      	ldr	r1, [pc, #56]	; (b2d8 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x68>)
    b29e:	2200      	movs	r2, #0
    b2a0:	f8c1 2104 	str.w	r2, [r1, #260]	; 0x104
    b2a4:	4b0d      	ldr	r3, [pc, #52]	; (b2dc <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    b2a6:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    b2aa:	6018      	str	r0, [r3, #0]
    b2ac:	b12c      	cbz	r4, b2ba <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x4a>
    b2ae:	2c01      	cmp	r4, #1
    b2b0:	d007      	beq.n	b2c2 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x52>
    b2b2:	2185      	movs	r1, #133	; 0x85
    b2b4:	203c      	movs	r0, #60	; 0x3c
    b2b6:	f7f9 fb9b 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2ba:	f8c1 5200 	str.w	r5, [r1, #512]	; 0x200
    b2be:	600d      	str	r5, [r1, #0]
    b2c0:	bd70      	pop	{r4, r5, r6, pc}
    b2c2:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    b2c6:	600d      	str	r5, [r1, #0]
    b2c8:	4904      	ldr	r1, [pc, #16]	; (b2dc <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    b2ca:	1f09      	subs	r1, r1, #4
    b2cc:	6008      	str	r0, [r1, #0]
    b2ce:	bd70      	pop	{r4, r5, r6, pc}
    b2d0:	200002af 	.word	0x200002af
    b2d4:	4000f504 	.word	0x4000f504
    b2d8:	4000f000 	.word	0x4000f000
    b2dc:	4001f508 	.word	0x4001f508

0000b2e0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    b2e0:	4802      	ldr	r0, [pc, #8]	; (b2ec <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    b2e2:	2100      	movs	r1, #0
    b2e4:	7001      	strb	r1, [r0, #0]
    b2e6:	7041      	strb	r1, [r0, #1]
    b2e8:	4770      	bx	lr
    b2ea:	0000      	.short	0x0000
    b2ec:	200002af 	.word	0x200002af

0000b2f0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    b2f0:	4806      	ldr	r0, [pc, #24]	; (b30c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    b2f2:	7801      	ldrb	r1, [r0, #0]
    b2f4:	b141      	cbz	r1, b308 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    b2f6:	4806      	ldr	r0, [pc, #24]	; (b310 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    b2f8:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b2fc:	2800      	cmp	r0, #0
    b2fe:	d002      	beq.n	b306 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    b300:	4804      	ldr	r0, [pc, #16]	; (b314 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    b302:	6800      	ldr	r0, [r0, #0]
    b304:	b2c0      	uxtb	r0, r0
    b306:	4770      	bx	lr
    b308:	7840      	ldrb	r0, [r0, #1]
    b30a:	4770      	bx	lr
    b30c:	200002af 	.word	0x200002af
    b310:	4000f000 	.word	0x4000f000
    b314:	4000f400 	.word	0x4000f400

0000b318 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    b318:	4901      	ldr	r1, [pc, #4]	; (b320 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    b31a:	2001      	movs	r0, #1
    b31c:	6088      	str	r0, [r1, #8]
    b31e:	4770      	bx	lr
    b320:	4000f000 	.word	0x4000f000

0000b324 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    b324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b328:	2800      	cmp	r0, #0
    b32a:	d02c      	beq.n	b386 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    b32c:	4817      	ldr	r0, [pc, #92]	; (b38c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x68>)
    b32e:	7800      	ldrb	r0, [r0, #0]
    b330:	b1b0      	cbz	r0, b360 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    b332:	4d17      	ldr	r5, [pc, #92]	; (b390 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    b334:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b338:	2800      	cmp	r0, #0
    b33a:	d124      	bne.n	b386 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    b33c:	2702      	movs	r7, #2
    b33e:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    b342:	4c14      	ldr	r4, [pc, #80]	; (b394 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    b344:	6820      	ldr	r0, [r4, #0]
    b346:	43c0      	mvns	r0, r0
    b348:	f340 1600 	sbfx	r6, r0, #4, #1
    b34c:	6820      	ldr	r0, [r4, #0]
    b34e:	f040 0010 	orr.w	r0, r0, #16
    b352:	6020      	str	r0, [r4, #0]
    b354:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    b358:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b35c:	1c76      	adds	r6, r6, #1
    b35e:	e007      	b.n	b370 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    b360:	21fd      	movs	r1, #253	; 0xfd
    b362:	203c      	movs	r0, #60	; 0x3c
    b364:	f7f9 fb44 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b368:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    b36c:	f7f9 f9d0 	bl	4710 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    b370:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b374:	2800      	cmp	r0, #0
    b376:	d0f7      	beq.n	b368 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x44>
    b378:	b91e      	cbnz	r6, b382 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x5e>
    b37a:	6820      	ldr	r0, [r4, #0]
    b37c:	f020 0010 	bic.w	r0, r0, #16
    b380:	6020      	str	r0, [r4, #0]
    b382:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    b386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b38a:	0000      	.short	0x0000
    b38c:	200002af 	.word	0x200002af
    b390:	4000f000 	.word	0x4000f000
    b394:	e000ed10 	.word	0xe000ed10

0000b398 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    b398:	b510      	push	{r4, lr}
    b39a:	4604      	mov	r4, r0
    b39c:	f000 f822 	bl	b3e4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    b3a0:	2c00      	cmp	r4, #0
    b3a2:	d017      	beq.n	b3d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    b3a4:	4a0c      	ldr	r2, [pc, #48]	; (b3d8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b3a6:	480c      	ldr	r0, [pc, #48]	; (b3d8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b3a8:	490c      	ldr	r1, [pc, #48]	; (b3dc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    b3aa:	3214      	adds	r2, #20
    b3ac:	4b0c      	ldr	r3, [pc, #48]	; (b3e0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    b3ae:	2c01      	cmp	r4, #1
    b3b0:	d005      	beq.n	b3be <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    b3b2:	2c02      	cmp	r4, #2
    b3b4:	d008      	beq.n	b3c8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    b3b6:	217d      	movs	r1, #125	; 0x7d
    b3b8:	203d      	movs	r0, #61	; 0x3d
    b3ba:	f7f9 fb19 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b3be:	2402      	movs	r4, #2
    b3c0:	6004      	str	r4, [r0, #0]
    b3c2:	6011      	str	r1, [r2, #0]
    b3c4:	0620      	lsls	r0, r4, #24
    b3c6:	e004      	b.n	b3d2 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    b3c8:	2403      	movs	r4, #3
    b3ca:	6004      	str	r4, [r0, #0]
    b3cc:	6011      	str	r1, [r2, #0]
    b3ce:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b3d2:	6018      	str	r0, [r3, #0]
    b3d4:	bd10      	pop	{r4, pc}
    b3d6:	0000      	.short	0x0000
    b3d8:	4000f500 	.word	0x4000f500
    b3dc:	2000144d 	.word	0x2000144d
    b3e0:	4001f504 	.word	0x4001f504
    b3e4:	4804      	ldr	r0, [pc, #16]	; (b3f8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    b3e6:	2100      	movs	r1, #0
    b3e8:	6001      	str	r1, [r0, #0]
    b3ea:	6001      	str	r1, [r0, #0]
    b3ec:	4903      	ldr	r1, [pc, #12]	; (b3fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    b3ee:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    b3f2:	6008      	str	r0, [r1, #0]
    b3f4:	4770      	bx	lr
    b3f6:	0000      	.short	0x0000
    b3f8:	4000f500 	.word	0x4000f500
    b3fc:	4001f508 	.word	0x4001f508

0000b400 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    b400:	4805      	ldr	r0, [pc, #20]	; (b418 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    b402:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b406:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    b40a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b40e:	4903      	ldr	r1, [pc, #12]	; (b41c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    b410:	2000      	movs	r0, #0
    b412:	6008      	str	r0, [r1, #0]
    b414:	4770      	bx	lr
    b416:	0000      	.short	0x0000
    b418:	40001000 	.word	0x40001000
    b41c:	40001560 	.word	0x40001560

0000b420 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    b420:	4904      	ldr	r1, [pc, #16]	; (b434 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    b422:	6008      	str	r0, [r1, #0]
    b424:	4804      	ldr	r0, [pc, #16]	; (b438 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    b426:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b42a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    b42e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b432:	4770      	bx	lr
    b434:	40001560 	.word	0x40001560
    b438:	40001000 	.word	0x40001000

0000b43c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    b43c:	4801      	ldr	r0, [pc, #4]	; (b444 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    b43e:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    b442:	4770      	bx	lr
    b444:	20000fbc 	.word	0x20000fbc

0000b448 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>:
    b448:	4a01      	ldr	r2, [pc, #4]	; (b450 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y+0x8>)
    b44a:	7051      	strb	r1, [r2, #1]
    b44c:	7010      	strb	r0, [r2, #0]
    b44e:	4770      	bx	lr
    b450:	20000fbc 	.word	0x20000fbc

0000b454 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    b454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b456:	4c1e      	ldr	r4, [pc, #120]	; (b4d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7c>)
    b458:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b45c:	2710      	movs	r7, #16
    b45e:	f3c0 1600 	ubfx	r6, r0, #4, #1
    b462:	f8c4 7308 	str.w	r7, [r4, #776]	; 0x308
    b466:	2002      	movs	r0, #2
    b468:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b46c:	4819      	ldr	r0, [pc, #100]	; (b4d4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x80>)
    b46e:	2500      	movs	r5, #0
    b470:	491a      	ldr	r1, [pc, #104]	; (b4dc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>)
    b472:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    b476:	4818      	ldr	r0, [pc, #96]	; (b4d8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>)
    b478:	6008      	str	r0, [r1, #0]
    b47a:	4819      	ldr	r0, [pc, #100]	; (b4e0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8c>)
    b47c:	6800      	ldr	r0, [r0, #0]
    b47e:	b1b0      	cbz	r0, b4ae <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    b480:	20ff      	movs	r0, #255	; 0xff
    b482:	f88d 0000 	strb.w	r0, [sp]
    b486:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b48a:	2001      	movs	r0, #1
    b48c:	6120      	str	r0, [r4, #16]
    b48e:	e004      	b.n	b49a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    b490:	f89d 0000 	ldrb.w	r0, [sp]
    b494:	1e40      	subs	r0, r0, #1
    b496:	f88d 0000 	strb.w	r0, [sp]
    b49a:	f89d 0000 	ldrb.w	r0, [sp]
    b49e:	b118      	cbz	r0, b4a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x54>
    b4a0:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    b4a4:	2800      	cmp	r0, #0
    b4a6:	d0f3      	beq.n	b490 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x3c>
    b4a8:	f89d 0000 	ldrb.w	r0, [sp]
    b4ac:	b150      	cbz	r0, b4c4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    b4ae:	f000 fd07 	bl	bec0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x12c>
    b4b2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b4b6:	f000 fe9f 	bl	c1f8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    b4ba:	2e00      	cmp	r6, #0
    b4bc:	d001      	beq.n	b4c2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    b4be:	f8c4 7304 	str.w	r7, [r4, #772]	; 0x304
    b4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b4c4:	f240 71c3 	movw	r1, #1987	; 0x7c3
    b4c8:	203e      	movs	r0, #62	; 0x3e
    b4ca:	f7f9 fa91 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b4ce:	0000      	.short	0x0000
    b4d0:	40001000 	.word	0x40001000
    b4d4:	20000fbc 	.word	0x20000fbc
    b4d8:	0c0e0000 	.word	0x0c0e0000
    b4dc:	4001f508 	.word	0x4001f508
    b4e0:	40001550 	.word	0x40001550

0000b4e4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    b4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b4e8:	4c1f      	ldr	r4, [pc, #124]	; (b568 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>)
    b4ea:	4607      	mov	r7, r0
    b4ec:	4688      	mov	r8, r1
    b4ee:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    b4f2:	07c1      	lsls	r1, r0, #31
    b4f4:	d018      	beq.n	b528 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    b4f6:	4a1d      	ldr	r2, [pc, #116]	; (b56c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    b4f8:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    b4fc:	6011      	str	r1, [r2, #0]
    b4fe:	4d1c      	ldr	r5, [pc, #112]	; (b570 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    b500:	f8d5 1200 	ldr.w	r1, [r5, #512]	; 0x200
    b504:	f041 0101 	orr.w	r1, r1, #1
    b508:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
    b50c:	f040 0002 	orr.w	r0, r0, #2
    b510:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    b514:	4640      	mov	r0, r8
    b516:	f000 fed5 	bl	c2c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b51a:	f000 fc7f 	bl	be1c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    b51e:	2601      	movs	r6, #1
    b520:	b13f      	cbz	r7, b532 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    b522:	2f01      	cmp	r7, #1
    b524:	d00e      	beq.n	b544 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    b526:	e016      	b.n	b556 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b528:	f240 6155 	movw	r1, #1621	; 0x655
    b52c:	203e      	movs	r0, #62	; 0x3e
    b52e:	f7f9 fa5f 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b532:	4640      	mov	r0, r8
    b534:	f000 fc92 	bl	be5c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    b538:	4640      	mov	r0, r8
    b53a:	f000 fc53 	bl	bde4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    b53e:	72e6      	strb	r6, [r4, #11]
    b540:	602e      	str	r6, [r5, #0]
    b542:	e008      	b.n	b556 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b544:	f000 fcb2 	bl	beac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    b548:	f000 fe20 	bl	c18c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f8>
    b54c:	2002      	movs	r0, #2
    b54e:	72e0      	strb	r0, [r4, #11]
    b550:	f000 fd28 	bl	bfa4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x210>
    b554:	606e      	str	r6, [r5, #4]
    b556:	4807      	ldr	r0, [pc, #28]	; (b574 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    b558:	64c6      	str	r6, [r0, #76]	; 0x4c
    b55a:	4807      	ldr	r0, [pc, #28]	; (b578 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b55c:	6801      	ldr	r1, [r0, #0]
    b55e:	4638      	mov	r0, r7
    b560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b564:	f004 bd04 	b.w	ff70 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b568:	20000fbc 	.word	0x20000fbc
    b56c:	4001f504 	.word	0x4001f504
    b570:	40001000 	.word	0x40001000
    b574:	40008000 	.word	0x40008000
    b578:	4000854c 	.word	0x4000854c

0000b57c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    b57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b580:	4d35      	ldr	r5, [pc, #212]	; (b658 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    b582:	4606      	mov	r6, r0
    b584:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b588:	4689      	mov	r9, r1
    b58a:	6028      	str	r0, [r5, #0]
    b58c:	4c33      	ldr	r4, [pc, #204]	; (b65c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    b58e:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    b592:	f040 0002 	orr.w	r0, r0, #2
    b596:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    b59a:	4608      	mov	r0, r1
    b59c:	f000 fe92 	bl	c2c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b5a0:	f000 fc3c 	bl	be1c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    b5a4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b660 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    b5a8:	2700      	movs	r7, #0
    b5aa:	b116      	cbz	r6, b5b2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    b5ac:	2e01      	cmp	r6, #1
    b5ae:	d027      	beq.n	b600 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    b5b0:	e03f      	b.n	b632 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b5b2:	4648      	mov	r0, r9
    b5b4:	f000 fc52 	bl	be5c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    b5b8:	7a60      	ldrb	r0, [r4, #9]
    b5ba:	2801      	cmp	r0, #1
    b5bc:	d105      	bne.n	b5ca <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    b5be:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b5c2:	f041 0108 	orr.w	r1, r1, #8
    b5c6:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b5ca:	4648      	mov	r0, r9
    b5cc:	f000 fc0a 	bl	bde4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    b5d0:	2001      	movs	r0, #1
    b5d2:	72e0      	strb	r0, [r4, #11]
    b5d4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    b5d6:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    b5da:	6320      	str	r0, [r4, #48]	; 0x30
    b5dc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b5e0:	6028      	str	r0, [r5, #0]
    b5e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b5e6:	f1b9 0f02 	cmp.w	r9, #2
    b5ea:	d007      	beq.n	b5fc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    b5ec:	f640 0034 	movw	r0, #2100	; 0x834
    b5f0:	f649 72ec 	movw	r2, #40940	; 0x9fec
    b5f4:	4410      	add	r0, r2
    b5f6:	fbb0 f7f1 	udiv	r7, r0, r1
    b5fa:	e01a      	b.n	b632 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b5fc:	4608      	mov	r0, r1
    b5fe:	e7f7      	b.n	b5f0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    b600:	f000 fc54 	bl	beac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    b604:	f000 fdc2 	bl	c18c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f8>
    b608:	7a60      	ldrb	r0, [r4, #9]
    b60a:	2801      	cmp	r0, #1
    b60c:	d105      	bne.n	b61a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    b60e:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b612:	f041 0104 	orr.w	r1, r1, #4
    b616:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b61a:	2002      	movs	r0, #2
    b61c:	72e0      	strb	r0, [r4, #11]
    b61e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    b620:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    b624:	6320      	str	r0, [r4, #48]	; 0x30
    b626:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    b62a:	6028      	str	r0, [r5, #0]
    b62c:	2729      	movs	r7, #41	; 0x29
    b62e:	f000 fcb9 	bl	bfa4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x210>
    b632:	f000 fca3 	bl	bf7c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e8>
    b636:	f000 fe7f 	bl	c338 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    b63a:	6800      	ldr	r0, [r0, #0]
    b63c:	2801      	cmp	r0, #1
    b63e:	d006      	beq.n	b64e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    b640:	2100      	movs	r1, #0
    b642:	4630      	mov	r0, r6
    b644:	f004 fc94 	bl	ff70 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b648:	4638      	mov	r0, r7
    b64a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b64e:	f7ff ff01 	bl	b454 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b652:	2000      	movs	r0, #0
    b654:	e7f9      	b.n	b64a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    b656:	0000      	.short	0x0000
    b658:	4001f504 	.word	0x4001f504
    b65c:	20000fbc 	.word	0x20000fbc
    b660:	40001000 	.word	0x40001000

0000b664 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    b664:	4a02      	ldr	r2, [pc, #8]	; (b670 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    b666:	6b93      	ldr	r3, [r2, #56]	; 0x38
    b668:	6003      	str	r3, [r0, #0]
    b66a:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    b66c:	6008      	str	r0, [r1, #0]
    b66e:	4770      	bx	lr
    b670:	20000fbc 	.word	0x20000fbc

0000b674 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    b674:	b510      	push	{r4, lr}
    b676:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    b678:	4901      	ldr	r1, [pc, #4]	; (b680 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    b67a:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    b67e:	bd10      	pop	{r4, pc}
    b680:	20000fac 	.word	0x20000fac

0000b684 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    b684:	490e      	ldr	r1, [pc, #56]	; (b6c0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3c>)
    b686:	b510      	push	{r4, lr}
    b688:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    b68a:	4282      	cmp	r2, r0
    b68c:	d302      	bcc.n	b694 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    b68e:	f640 0143 	movw	r1, #2115	; 0x843
    b692:	e00a      	b.n	b6aa <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x26>
    b694:	2201      	movs	r2, #1
    b696:	740a      	strb	r2, [r1, #16]
    b698:	6148      	str	r0, [r1, #20]
    b69a:	490a      	ldr	r1, [pc, #40]	; (b6c4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    b69c:	644a      	str	r2, [r1, #68]	; 0x44
    b69e:	4a0a      	ldr	r2, [pc, #40]	; (b6c8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    b6a0:	6813      	ldr	r3, [r2, #0]
    b6a2:	4283      	cmp	r3, r0
    b6a4:	d304      	bcc.n	b6b0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2c>
    b6a6:	f640 014c 	movw	r1, #2124	; 0x84c
    b6aa:	203e      	movs	r0, #62	; 0x3e
    b6ac:	f7f9 f9a0 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b6b0:	2300      	movs	r3, #0
    b6b2:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    b6b6:	6010      	str	r0, [r2, #0]
    b6b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b6bc:	f000 bd74 	b.w	c1a8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x414>
    b6c0:	20000fbc 	.word	0x20000fbc
    b6c4:	40008000 	.word	0x40008000
    b6c8:	40008544 	.word	0x40008544

0000b6cc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    b6cc:	b570      	push	{r4, r5, r6, lr}
    b6ce:	4c10      	ldr	r4, [pc, #64]	; (b710 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    b6d0:	4606      	mov	r6, r0
    b6d2:	2002      	movs	r0, #2
    b6d4:	7420      	strb	r0, [r4, #16]
    b6d6:	2596      	movs	r5, #150	; 0x96
    b6d8:	f000 f86c 	bl	b7b4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    b6dc:	4602      	mov	r2, r0
    b6de:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    b6e2:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    b6e6:	2801      	cmp	r0, #1
    b6e8:	d00d      	beq.n	b706 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3a>
    b6ea:	4628      	mov	r0, r5
    b6ec:	f004 fc58 	bl	ffa0 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    b6f0:	4908      	ldr	r1, [pc, #32]	; (b714 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    b6f2:	6160      	str	r0, [r4, #20]
    b6f4:	2000      	movs	r0, #0
    b6f6:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b6fa:	6961      	ldr	r1, [r4, #20]
    b6fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b6fe:	4408      	add	r0, r1
    b700:	4905      	ldr	r1, [pc, #20]	; (b718 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    b702:	6008      	str	r0, [r1, #0]
    b704:	bd70      	pop	{r4, r5, r6, pc}
    b706:	4633      	mov	r3, r6
    b708:	4628      	mov	r0, r5
    b70a:	f004 fc65 	bl	ffd8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    b70e:	e7ef      	b.n	b6f0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    b710:	20000fbc 	.word	0x20000fbc
    b714:	40008000 	.word	0x40008000
    b718:	40008544 	.word	0x40008544

0000b71c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    b71c:	b510      	push	{r4, lr}
    b71e:	f000 ff58 	bl	c5d2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b722:	2800      	cmp	r0, #0
    b724:	d006      	beq.n	b734 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    b726:	4804      	ldr	r0, [pc, #16]	; (b738 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    b728:	6801      	ldr	r1, [r0, #0]
    b72a:	f021 0101 	bic.w	r1, r1, #1
    b72e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    b732:	6001      	str	r1, [r0, #0]
    b734:	bd10      	pop	{r4, pc}
    b736:	0000      	.short	0x0000
    b738:	40001774 	.word	0x40001774

0000b73c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    b73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b740:	2240      	movs	r2, #64	; 0x40
    b742:	2100      	movs	r1, #0
    b744:	4813      	ldr	r0, [pc, #76]	; (b794 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    b746:	f000 fff4 	bl	c732 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b74a:	f000 fd55 	bl	c1f8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    b74e:	f000 fef9 	bl	c544 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b752:	4d11      	ldr	r5, [pc, #68]	; (b798 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b754:	4e10      	ldr	r6, [pc, #64]	; (b798 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b756:	2400      	movs	r4, #0
    b758:	4f0f      	ldr	r7, [pc, #60]	; (b798 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b75a:	3508      	adds	r5, #8
    b75c:	3610      	adds	r6, #16
    b75e:	b928      	cbnz	r0, b76c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b760:	f000 ff07 	bl	c572 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    b764:	b910      	cbnz	r0, b76c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b766:	f000 ff0e 	bl	c586 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    b76a:	b108      	cbz	r0, b770 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    b76c:	2224      	movs	r2, #36	; 0x24
    b76e:	e006      	b.n	b77e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b770:	f000 ff49 	bl	c606 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b774:	b910      	cbnz	r0, b77c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    b776:	f000 ff3c 	bl	c5f2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    b77a:	b140      	cbz	r0, b78e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    b77c:	2240      	movs	r2, #64	; 0x40
    b77e:	21ff      	movs	r1, #255	; 0xff
    b780:	4638      	mov	r0, r7
    b782:	f000 ffd6 	bl	c732 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b786:	602c      	str	r4, [r5, #0]
    b788:	6034      	str	r4, [r6, #0]
    b78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b78e:	2238      	movs	r2, #56	; 0x38
    b790:	e7f5      	b.n	b77e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b792:	0000      	.short	0x0000
    b794:	20000fbc 	.word	0x20000fbc
    b798:	40000e00 	.word	0x40000e00

0000b79c <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>:
    b79c:	4901      	ldr	r1, [pc, #4]	; (b7a4 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA+0x8>)
    b79e:	7008      	strb	r0, [r1, #0]
    b7a0:	4770      	bx	lr
    b7a2:	0000      	.short	0x0000
    b7a4:	20000280 	.word	0x20000280

0000b7a8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    b7a8:	4801      	ldr	r0, [pc, #4]	; (b7b0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    b7aa:	6a40      	ldr	r0, [r0, #36]	; 0x24
    b7ac:	4770      	bx	lr
    b7ae:	0000      	.short	0x0000
    b7b0:	20000fbc 	.word	0x20000fbc

0000b7b4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    b7b4:	4814      	ldr	r0, [pc, #80]	; (b808 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    b7b6:	b510      	push	{r4, lr}
    b7b8:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
    b7bc:	7ac0      	ldrb	r0, [r0, #11]
    b7be:	b141      	cbz	r1, b7d2 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    b7c0:	2902      	cmp	r1, #2
    b7c2:	d00b      	beq.n	b7dc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b7c4:	2802      	cmp	r0, #2
    b7c6:	d009      	beq.n	b7dc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b7c8:	2901      	cmp	r1, #1
    b7ca:	d00b      	beq.n	b7e4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b7cc:	2801      	cmp	r0, #1
    b7ce:	d009      	beq.n	b7e4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b7d0:	e015      	b.n	b7fe <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    b7d2:	2800      	cmp	r0, #0
    b7d4:	d1f6      	bne.n	b7c4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    b7d6:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    b7da:	e00d      	b.n	b7f8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x44>
    b7dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b7e0:	f000 bc6e 	b.w	c0c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x32c>
    b7e4:	4809      	ldr	r0, [pc, #36]	; (b80c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    b7e6:	6800      	ldr	r0, [r0, #0]
    b7e8:	f000 000f 	and.w	r0, r0, #15
    b7ec:	2803      	cmp	r0, #3
    b7ee:	d006      	beq.n	b7fe <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    b7f0:	2804      	cmp	r0, #4
    b7f2:	d006      	beq.n	b802 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4e>
    b7f4:	f240 210b 	movw	r1, #523	; 0x20b
    b7f8:	203e      	movs	r0, #62	; 0x3e
    b7fa:	f7f9 f8f9 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7fe:	2001      	movs	r0, #1
    b800:	bd10      	pop	{r4, pc}
    b802:	2002      	movs	r0, #2
    b804:	bd10      	pop	{r4, pc}
    b806:	0000      	.short	0x0000
    b808:	20000fbc 	.word	0x20000fbc
    b80c:	40001510 	.word	0x40001510

0000b810 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    b810:	4801      	ldr	r0, [pc, #4]	; (b818 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    b812:	6a00      	ldr	r0, [r0, #32]
    b814:	4770      	bx	lr
    b816:	0000      	.short	0x0000
    b818:	20000fbc 	.word	0x20000fbc

0000b81c <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>:
    b81c:	4801      	ldr	r0, [pc, #4]	; (b824 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA+0x8>)
    b81e:	7f40      	ldrb	r0, [r0, #29]
    b820:	4770      	bx	lr
    b822:	0000      	.short	0x0000
    b824:	20000fbc 	.word	0x20000fbc

0000b828 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    b828:	b510      	push	{r4, lr}
    b82a:	f000 fccb 	bl	c1c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x430>
    b82e:	f7ff fe11 	bl	b454 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b832:	f004 fb33 	bl	fe9c <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    b836:	480f      	ldr	r0, [pc, #60]	; (b874 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    b838:	4a0f      	ldr	r2, [pc, #60]	; (b878 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    b83a:	6b01      	ldr	r1, [r0, #48]	; 0x30
    b83c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b840:	6011      	str	r1, [r2, #0]
    b842:	2400      	movs	r4, #0
    b844:	6304      	str	r4, [r0, #48]	; 0x30
    b846:	7404      	strb	r4, [r0, #16]
    b848:	6244      	str	r4, [r0, #36]	; 0x24
    b84a:	6204      	str	r4, [r0, #32]
    b84c:	f000 fcba 	bl	c1c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x430>
    b850:	480a      	ldr	r0, [pc, #40]	; (b87c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    b852:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    b856:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    b85a:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    b85e:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    b862:	2001      	movs	r0, #1
    b864:	f004 fb53 	bl	ff0e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b86c:	2001      	movs	r0, #1
    b86e:	f004 bb41 	b.w	fef4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b872:	0000      	.short	0x0000
    b874:	20000fbc 	.word	0x20000fbc
    b878:	4001f508 	.word	0x4001f508
    b87c:	40008000 	.word	0x40008000

0000b880 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    b880:	b570      	push	{r4, r5, r6, lr}
    b882:	2001      	movs	r0, #1
    b884:	f004 fb43 	bl	ff0e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b888:	4837      	ldr	r0, [pc, #220]	; (b968 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    b88a:	2400      	movs	r4, #0
    b88c:	6004      	str	r4, [r0, #0]
    b88e:	2601      	movs	r6, #1
    b890:	6006      	str	r6, [r0, #0]
    b892:	f000 fe8e 	bl	c5b2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b896:	4d35      	ldr	r5, [pc, #212]	; (b96c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b898:	b118      	cbz	r0, b8a2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x22>
    b89a:	6828      	ldr	r0, [r5, #0]
    b89c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    b8a0:	6028      	str	r0, [r5, #0]
    b8a2:	f000 fe7a 	bl	c59a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b8a6:	b128      	cbz	r0, b8b4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x34>
    b8a8:	6828      	ldr	r0, [r5, #0]
    b8aa:	4931      	ldr	r1, [pc, #196]	; (b970 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    b8ac:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    b8b0:	4308      	orrs	r0, r1
    b8b2:	6028      	str	r0, [r5, #0]
    b8b4:	f000 fe8d 	bl	c5d2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b8b8:	b138      	cbz	r0, b8ca <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4a>
    b8ba:	482c      	ldr	r0, [pc, #176]	; (b96c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b8bc:	1d00      	adds	r0, r0, #4
    b8be:	6801      	ldr	r1, [r0, #0]
    b8c0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    b8c4:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    b8c8:	6001      	str	r1, [r0, #0]
    b8ca:	4928      	ldr	r1, [pc, #160]	; (b96c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b8cc:	4829      	ldr	r0, [pc, #164]	; (b974 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    b8ce:	313c      	adds	r1, #60	; 0x3c
    b8d0:	6008      	str	r0, [r1, #0]
    b8d2:	f7f8 ff8b 	bl	47ec <mpsl_fem_device_config_254_apply_get>
    b8d6:	b140      	cbz	r0, b8ea <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6a>
    b8d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b8dc:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    b8e0:	1c41      	adds	r1, r0, #1
    b8e2:	d002      	beq.n	b8ea <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6a>
    b8e4:	4921      	ldr	r1, [pc, #132]	; (b96c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b8e6:	3110      	adds	r1, #16
    b8e8:	6008      	str	r0, [r1, #0]
    b8ea:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    b8ee:	6e00      	ldr	r0, [r0, #96]	; 0x60
    b8f0:	1c41      	adds	r1, r0, #1
    b8f2:	d004      	beq.n	b8fe <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x7e>
    b8f4:	4920      	ldr	r1, [pc, #128]	; (b978 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    b8f6:	680a      	ldr	r2, [r1, #0]
    b8f8:	f360 4217 	bfi	r2, r0, #16, #8
    b8fc:	600a      	str	r2, [r1, #0]
    b8fe:	491e      	ldr	r1, [pc, #120]	; (b978 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    b900:	f240 605b 	movw	r0, #1627	; 0x65b
    b904:	3954      	subs	r1, #84	; 0x54
    b906:	6008      	str	r0, [r1, #0]
    b908:	1f09      	subs	r1, r1, #4
    b90a:	f240 1003 	movw	r0, #259	; 0x103
    b90e:	6008      	str	r0, [r1, #0]
    b910:	1f08      	subs	r0, r1, #4
    b912:	6006      	str	r6, [r0, #0]
    b914:	2001      	movs	r0, #1
    b916:	f000 fcd5 	bl	c2c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b91a:	4917      	ldr	r1, [pc, #92]	; (b978 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    b91c:	f240 1001 	movw	r0, #257	; 0x101
    b920:	31c4      	adds	r1, #196	; 0xc4
    b922:	6008      	str	r0, [r1, #0]
    b924:	4e15      	ldr	r6, [pc, #84]	; (b97c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    b926:	2502      	movs	r5, #2
    b928:	f8c6 5200 	str.w	r5, [r6, #512]	; 0x200
    b92c:	4915      	ldr	r1, [pc, #84]	; (b984 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    b92e:	4814      	ldr	r0, [pc, #80]	; (b980 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    b930:	6008      	str	r0, [r1, #0]
    b932:	4815      	ldr	r0, [pc, #84]	; (b988 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    b934:	f506 7600 	add.w	r6, r6, #512	; 0x200
    b938:	8704      	strh	r4, [r0, #56]	; 0x38
    b93a:	3010      	adds	r0, #16
    b93c:	6244      	str	r4, [r0, #36]	; 0x24
    b93e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
    b942:	2001      	movs	r0, #1
    b944:	f004 fad6 	bl	fef4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b948:	2010      	movs	r0, #16
    b94a:	f8c6 0104 	str.w	r0, [r6, #260]	; 0x104
    b94e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b952:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    b956:	480d      	ldr	r0, [pc, #52]	; (b98c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    b958:	6840      	ldr	r0, [r0, #4]
    b95a:	2800      	cmp	r0, #0
    b95c:	d002      	beq.n	b964 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    b95e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b962:	4700      	bx	r0
    b964:	bd70      	pop	{r4, r5, r6, pc}
    b966:	0000      	.short	0x0000
    b968:	40001ffc 	.word	0x40001ffc
    b96c:	4000173c 	.word	0x4000173c
    b970:	80000096 	.word	0x80000096
    b974:	8900002c 	.word	0x8900002c
    b978:	4000158c 	.word	0x4000158c
    b97c:	40001000 	.word	0x40001000
    b980:	0c0e0000 	.word	0x0c0e0000
    b984:	4001f508 	.word	0x4001f508
    b988:	20000fac 	.word	0x20000fac
    b98c:	20000280 	.word	0x20000280

0000b990 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    b990:	4901      	ldr	r1, [pc, #4]	; (b998 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    b992:	7608      	strb	r0, [r1, #24]
    b994:	4770      	bx	lr
    b996:	0000      	.short	0x0000
    b998:	20000fbc 	.word	0x20000fbc

0000b99c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    b99c:	4904      	ldr	r1, [pc, #16]	; (b9b0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x14>)
    b99e:	6008      	str	r0, [r1, #0]
    b9a0:	4804      	ldr	r0, [pc, #16]	; (b9b4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    b9a2:	f810 1f34 	ldrb.w	r1, [r0, #52]!
    b9a6:	f041 0101 	orr.w	r1, r1, #1
    b9aa:	7001      	strb	r1, [r0, #0]
    b9ac:	f000 baae 	b.w	bf0c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x178>
    b9b0:	40001504 	.word	0x40001504
    b9b4:	20000fbc 	.word	0x20000fbc

0000b9b8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    b9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b9bc:	4e35      	ldr	r6, [pc, #212]	; (ba94 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>)
    b9be:	4607      	mov	r7, r0
    b9c0:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b9c4:	468a      	mov	sl, r1
    b9c6:	4614      	mov	r4, r2
    b9c8:	6030      	str	r0, [r6, #0]
    b9ca:	4610      	mov	r0, r2
    b9cc:	f000 fc7a 	bl	c2c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b9d0:	f000 fa24 	bl	be1c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    b9d4:	f8df 90c0 	ldr.w	r9, [pc, #192]	; ba98 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>
    b9d8:	4d30      	ldr	r5, [pc, #192]	; (ba9c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    b9da:	f04f 0801 	mov.w	r8, #1
    b9de:	b127      	cbz	r7, b9ea <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    b9e0:	2f01      	cmp	r7, #1
    b9e2:	d01d      	beq.n	ba20 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    b9e4:	f240 7144 	movw	r1, #1860	; 0x744
    b9e8:	e04a      	b.n	ba80 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>
    b9ea:	4620      	mov	r0, r4
    b9ec:	f000 fa36 	bl	be5c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    b9f0:	4620      	mov	r0, r4
    b9f2:	f000 f9f7 	bl	bde4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    b9f6:	2c02      	cmp	r4, #2
    b9f8:	d00f      	beq.n	ba1a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    b9fa:	f640 0034 	movw	r0, #2100	; 0x834
    b9fe:	bf00      	nop
    ba00:	f649 51f8 	movw	r1, #40440	; 0x9df8
    ba04:	4401      	add	r1, r0
    ba06:	4650      	mov	r0, sl
    ba08:	f000 fc00 	bl	c20c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x478>
    ba0c:	4604      	mov	r4, r0
    ba0e:	4648      	mov	r0, r9
    ba10:	f000 fbe6 	bl	c1e0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44c>
    ba14:	f885 800b 	strb.w	r8, [r5, #11]
    ba18:	e014      	b.n	ba44 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    ba1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ba1e:	e7ef      	b.n	ba00 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    ba20:	f000 fa44 	bl	beac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    ba24:	f000 fbb2 	bl	c18c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f8>
    ba28:	f000 fabc 	bl	bfa4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x210>
    ba2c:	f649 71ba 	movw	r1, #40890	; 0x9fba
    ba30:	4650      	mov	r0, sl
    ba32:	f000 fbeb 	bl	c20c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x478>
    ba36:	4604      	mov	r4, r0
    ba38:	4817      	ldr	r0, [pc, #92]	; (ba98 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    ba3a:	1d00      	adds	r0, r0, #4
    ba3c:	f000 fbd0 	bl	c1e0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44c>
    ba40:	2002      	movs	r0, #2
    ba42:	72e8      	strb	r0, [r5, #11]
    ba44:	4816      	ldr	r0, [pc, #88]	; (baa0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    ba46:	6004      	str	r4, [r0, #0]
    ba48:	4917      	ldr	r1, [pc, #92]	; (baa8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    ba4a:	4816      	ldr	r0, [pc, #88]	; (baa4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    ba4c:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    ba50:	6b28      	ldr	r0, [r5, #48]	; 0x30
    ba52:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    ba56:	6328      	str	r0, [r5, #48]	; 0x30
    ba58:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    ba5c:	6030      	str	r0, [r6, #0]
    ba5e:	2110      	movs	r1, #16
    ba60:	f8c9 1304 	str.w	r1, [r9, #772]	; 0x304
    ba64:	1200      	asrs	r0, r0, #8
    ba66:	6030      	str	r0, [r6, #0]
    ba68:	f000 fa88 	bl	bf7c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e8>
    ba6c:	490f      	ldr	r1, [pc, #60]	; (baac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    ba6e:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    ba72:	480b      	ldr	r0, [pc, #44]	; (baa0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    ba74:	300c      	adds	r0, #12
    ba76:	6800      	ldr	r0, [r0, #0]
    ba78:	42a0      	cmp	r0, r4
    ba7a:	d304      	bcc.n	ba86 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xce>
    ba7c:	f240 7169 	movw	r1, #1897	; 0x769
    ba80:	203e      	movs	r0, #62	; 0x3e
    ba82:	f7f8 ffb5 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba86:	4621      	mov	r1, r4
    ba88:	4638      	mov	r0, r7
    ba8a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba8e:	f004 ba6f 	b.w	ff70 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    ba92:	0000      	.short	0x0000
    ba94:	4001f504 	.word	0x4001f504
    ba98:	40001000 	.word	0x40001000
    ba9c:	20000fbc 	.word	0x20000fbc
    baa0:	40008540 	.word	0x40008540
    baa4:	40008140 	.word	0x40008140
    baa8:	4001f098 	.word	0x4001f098
    baac:	40008000 	.word	0x40008000

0000bab0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    bab0:	b510      	push	{r4, lr}
    bab2:	b14a      	cbz	r2, bac8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x18>
    bab4:	4c12      	ldr	r4, [pc, #72]	; (bb00 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x50>)
    bab6:	7260      	strb	r0, [r4, #9]
    bab8:	7363      	strb	r3, [r4, #13]
    baba:	07d0      	lsls	r0, r2, #31
    babc:	d007      	beq.n	bace <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x1e>
    babe:	2a01      	cmp	r2, #1
    bac0:	d005      	beq.n	bace <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x1e>
    bac2:	f640 113e 	movw	r1, #2366	; 0x93e
    bac6:	e00c      	b.n	bae2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x32>
    bac8:	f640 1137 	movw	r1, #2359	; 0x937
    bacc:	e009      	b.n	bae2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x32>
    bace:	b159      	cbz	r1, bae8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>
    bad0:	2002      	movs	r0, #2
    bad2:	72a0      	strb	r0, [r4, #10]
    bad4:	7322      	strb	r2, [r4, #12]
    bad6:	2801      	cmp	r0, #1
    bad8:	d008      	beq.n	baec <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x3c>
    bada:	2802      	cmp	r0, #2
    badc:	d00f      	beq.n	bafe <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4e>
    bade:	f640 1155 	movw	r1, #2389	; 0x955
    bae2:	203e      	movs	r0, #62	; 0x3e
    bae4:	f7f8 ff84 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bae8:	2001      	movs	r0, #1
    baea:	e7f2      	b.n	bad2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x22>
    baec:	7ae0      	ldrb	r0, [r4, #11]
    baee:	2802      	cmp	r0, #2
    baf0:	d105      	bne.n	bafe <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4e>
    baf2:	f000 f9db 	bl	beac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    baf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bafa:	f000 bb47 	b.w	c18c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f8>
    bafe:	bd10      	pop	{r4, pc}
    bb00:	20000fbc 	.word	0x20000fbc

0000bb04 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    bb04:	490a      	ldr	r1, [pc, #40]	; (bb30 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2c>)
    bb06:	b508      	push	{r3, lr}
    bb08:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    bb0c:	2a01      	cmp	r2, #1
    bb0e:	d001      	beq.n	bb14 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>
    bb10:	2000      	movs	r0, #0
    bb12:	bd08      	pop	{r3, pc}
    bb14:	4a07      	ldr	r2, [pc, #28]	; (bb34 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    bb16:	6812      	ldr	r2, [r2, #0]
    bb18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    bb1c:	4252      	negs	r2, r2
    bb1e:	7002      	strb	r2, [r0, #0]
    bb20:	2000      	movs	r0, #0
    bb22:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    bb26:	4804      	ldr	r0, [pc, #16]	; (bb38 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    bb28:	6800      	ldr	r0, [r0, #0]
    bb2a:	9000      	str	r0, [sp, #0]
    bb2c:	2001      	movs	r0, #1
    bb2e:	bd08      	pop	{r3, pc}
    bb30:	40001000 	.word	0x40001000
    bb34:	40001548 	.word	0x40001548
    bb38:	4000111c 	.word	0x4000111c

0000bb3c <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>:
    bb3c:	4a04      	ldr	r2, [pc, #16]	; (bb50 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ+0x14>)
    bb3e:	6803      	ldr	r3, [r0, #0]
    bb40:	f8c2 3012 	str.w	r3, [r2, #18]
    bb44:	8880      	ldrh	r0, [r0, #4]
    bb46:	82d0      	strh	r0, [r2, #22]
    bb48:	f102 0010 	add.w	r0, r2, #16
    bb4c:	7201      	strb	r1, [r0, #8]
    bb4e:	4770      	bx	lr
    bb50:	20000fac 	.word	0x20000fac

0000bb54 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    bb54:	4a04      	ldr	r2, [pc, #16]	; (bb68 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    bb56:	78c1      	ldrb	r1, [r0, #3]
    bb58:	6011      	str	r1, [r2, #0]
    bb5a:	6800      	ldr	r0, [r0, #0]
    bb5c:	4902      	ldr	r1, [pc, #8]	; (bb68 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    bb5e:	0200      	lsls	r0, r0, #8
    bb60:	3908      	subs	r1, #8
    bb62:	6008      	str	r0, [r1, #0]
    bb64:	4770      	bx	lr
    bb66:	0000      	.short	0x0000
    bb68:	40001524 	.word	0x40001524

0000bb6c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    bb6c:	6800      	ldr	r0, [r0, #0]
    bb6e:	4902      	ldr	r1, [pc, #8]	; (bb78 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    bb70:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bb74:	6008      	str	r0, [r1, #0]
    bb76:	4770      	bx	lr
    bb78:	4000153c 	.word	0x4000153c

0000bb7c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    bb7c:	b510      	push	{r4, lr}
    bb7e:	f000 fb7d 	bl	c27c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e8>
    bb82:	4806      	ldr	r0, [pc, #24]	; (bb9c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>)
    bb84:	6800      	ldr	r0, [r0, #0]
    bb86:	2803      	cmp	r0, #3
    bb88:	d001      	beq.n	bb8e <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x12>
    bb8a:	280b      	cmp	r0, #11
    bb8c:	d104      	bne.n	bb98 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    bb8e:	f240 21a5 	movw	r1, #677	; 0x2a5
    bb92:	203e      	movs	r0, #62	; 0x3e
    bb94:	f7f8 ff2c 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb98:	bd10      	pop	{r4, pc}
    bb9a:	0000      	.short	0x0000
    bb9c:	40001550 	.word	0x40001550

0000bba0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    bba0:	4901      	ldr	r1, [pc, #4]	; (bba8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    bba2:	7648      	strb	r0, [r1, #25]
    bba4:	4770      	bx	lr
    bba6:	0000      	.short	0x0000
    bba8:	20000fbc 	.word	0x20000fbc

0000bbac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    bbac:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bbb0:	4d6f      	ldr	r5, [pc, #444]	; (bd70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c4>)
    bbb2:	2701      	movs	r7, #1
    bbb4:	64ef      	str	r7, [r5, #76]	; 0x4c
    bbb6:	486f      	ldr	r0, [pc, #444]	; (bd74 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c8>)
    bbb8:	f8d0 a000 	ldr.w	sl, [r0]
    bbbc:	486e      	ldr	r0, [pc, #440]	; (bd78 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    bbbe:	6800      	ldr	r0, [r0, #0]
    bbc0:	4c6e      	ldr	r4, [pc, #440]	; (bd7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>)
    bbc2:	f8df 81bc 	ldr.w	r8, [pc, #444]	; bd80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d4>
    bbc6:	e9c4 0a0e 	strd	r0, sl, [r4, #56]	; 0x38
    bbca:	f898 0000 	ldrb.w	r0, [r8]
    bbce:	2804      	cmp	r0, #4
    bbd0:	d302      	bcc.n	bbd8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2c>
    bbd2:	f44f 612d 	mov.w	r1, #2768	; 0xad0
    bbd6:	e0c0      	b.n	bd5a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ae>
    bbd8:	f000 f972 	bl	bec0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x12c>
    bbdc:	4969      	ldr	r1, [pc, #420]	; (bd84 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d8>)
    bbde:	6b20      	ldr	r0, [r4, #48]	; 0x30
    bbe0:	6008      	str	r0, [r1, #0]
    bbe2:	f8df b1a4 	ldr.w	fp, [pc, #420]	; bd88 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1dc>
    bbe6:	2600      	movs	r6, #0
    bbe8:	6326      	str	r6, [r4, #48]	; 0x30
    bbea:	f8db 1200 	ldr.w	r1, [fp, #512]	; 0x200
    bbee:	f240 121d 	movw	r2, #285	; 0x11d
    bbf2:	4391      	bics	r1, r2
    bbf4:	f8cb 1200 	str.w	r1, [fp, #512]	; 0x200
    bbf8:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    bbfc:	f8db 010c 	ldr.w	r0, [fp, #268]	; 0x10c
    bc00:	b900      	cbnz	r0, bc04 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x58>
    bc02:	64af      	str	r7, [r5, #72]	; 0x48
    bc04:	f000 f9e0 	bl	bfc8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x234>
    bc08:	4605      	mov	r5, r0
    bc0a:	485a      	ldr	r0, [pc, #360]	; (bd74 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c8>)
    bc0c:	1f00      	subs	r0, r0, #4
    bc0e:	6800      	ldr	r0, [r0, #0]
    bc10:	6260      	str	r0, [r4, #36]	; 0x24
    bc12:	f7ff fdcf 	bl	b7b4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    bc16:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    bc1a:	7ae0      	ldrb	r0, [r4, #11]
    bc1c:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    bc20:	495a      	ldr	r1, [pc, #360]	; (bd8c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    bc22:	6226      	str	r6, [r4, #32]
    bc24:	2802      	cmp	r0, #2
    bc26:	d107      	bne.n	bc38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    bc28:	7860      	ldrb	r0, [r4, #1]
    bc2a:	b128      	cbz	r0, bc38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    bc2c:	680a      	ldr	r2, [r1, #0]
    bc2e:	7812      	ldrb	r2, [r2, #0]
    bc30:	4002      	ands	r2, r0
    bc32:	7820      	ldrb	r0, [r4, #0]
    bc34:	4390      	bics	r0, r2
    bc36:	d011      	beq.n	bc5c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xb0>
    bc38:	7726      	strb	r6, [r4, #28]
    bc3a:	f8df 9154 	ldr.w	r9, [pc, #340]	; bd90 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    bc3e:	07a8      	lsls	r0, r5, #30
    bc40:	d502      	bpl.n	bc48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x9c>
    bc42:	f8d9 0000 	ldr.w	r0, [r9]
    bc46:	6220      	str	r0, [r4, #32]
    bc48:	0728      	lsls	r0, r5, #28
    bc4a:	d502      	bpl.n	bc52 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa6>
    bc4c:	f8d9 0000 	ldr.w	r0, [r9]
    bc50:	6220      	str	r0, [r4, #32]
    bc52:	f898 0000 	ldrb.w	r0, [r8]
    bc56:	07c0      	lsls	r0, r0, #31
    bc58:	d002      	beq.n	bc60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xb4>
    bc5a:	e01c      	b.n	bc96 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    bc5c:	7727      	strb	r7, [r4, #28]
    bc5e:	e7ec      	b.n	bc3a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8e>
    bc60:	f8d1 8000 	ldr.w	r8, [r1]
    bc64:	f898 0000 	ldrb.w	r0, [r8]
    bc68:	f000 000f 	and.w	r0, r0, #15
    bc6c:	2807      	cmp	r0, #7
    bc6e:	d211      	bcs.n	bc94 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bc70:	2206      	movs	r2, #6
    bc72:	f108 0109 	add.w	r1, r8, #9
    bc76:	1ca0      	adds	r0, r4, #2
    bc78:	f000 fccf 	bl	c61a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    bc7c:	b938      	cbnz	r0, bc8e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bc7e:	7a20      	ldrb	r0, [r4, #8]
    bc80:	f898 1000 	ldrb.w	r1, [r8]
    bc84:	ebb0 1fd1 	cmp.w	r0, r1, lsr #7
    bc88:	d101      	bne.n	bc8e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bc8a:	2001      	movs	r0, #1
    bc8c:	e000      	b.n	bc90 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe4>
    bc8e:	2000      	movs	r0, #0
    bc90:	7760      	strb	r0, [r4, #29]
    bc92:	e000      	b.n	bc96 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    bc94:	7766      	strb	r6, [r4, #29]
    bc96:	f04f 0800 	mov.w	r8, #0
    bc9a:	4651      	mov	r1, sl
    bc9c:	4628      	mov	r0, r5
    bc9e:	f000 fa23 	bl	c0e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x354>
    bca2:	b918      	cbnz	r0, bcac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    bca4:	f8cb 7010 	str.w	r7, [fp, #16]
    bca8:	f04f 0801 	mov.w	r8, #1
    bcac:	4e33      	ldr	r6, [pc, #204]	; (bd7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>)
    bcae:	07e8      	lsls	r0, r5, #31
    bcb0:	f1a6 0610 	sub.w	r6, r6, #16
    bcb4:	d002      	beq.n	bcbc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x110>
    bcb6:	6830      	ldr	r0, [r6, #0]
    bcb8:	4780      	blx	r0
    bcba:	e031      	b.n	bd20 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x174>
    bcbc:	07a8      	lsls	r0, r5, #30
    bcbe:	d526      	bpl.n	bd0e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x162>
    bcc0:	0768      	lsls	r0, r5, #29
    bcc2:	d41e      	bmi.n	bd02 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    bcc4:	f000 fc85 	bl	c5d2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bcc8:	b9d8      	cbnz	r0, bd02 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    bcca:	f000 fc72 	bl	c5b2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bcce:	b9c0      	cbnz	r0, bd02 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    bcd0:	482e      	ldr	r0, [pc, #184]	; (bd8c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    bcd2:	38b4      	subs	r0, #180	; 0xb4
    bcd4:	6800      	ldr	r0, [r0, #0]
    bcd6:	f3c0 5742 	ubfx	r7, r0, #21, #3
    bcda:	f3c0 6300 	ubfx	r3, r0, #24, #1
    bcde:	f000 020f 	and.w	r2, r0, #15
    bce2:	f3c0 1103 	ubfx	r1, r0, #4, #4
    bce6:	f3c0 2003 	ubfx	r0, r0, #8, #4
    bcea:	b153      	cbz	r3, bd02 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    bcec:	b10a      	cbz	r2, bcf2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    bcee:	b101      	cbz	r1, bcf2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    bcf0:	b938      	cbnz	r0, bd02 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    bcf2:	4826      	ldr	r0, [pc, #152]	; (bd8c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    bcf4:	38b0      	subs	r0, #176	; 0xb0
    bcf6:	6800      	ldr	r0, [r0, #0]
    bcf8:	b118      	cbz	r0, bd02 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    bcfa:	2f03      	cmp	r7, #3
    bcfc:	d201      	bcs.n	bd02 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    bcfe:	f045 0504 	orr.w	r5, r5, #4
    bd02:	f345 0080 	sbfx	r0, r5, #2, #1
    bd06:	4641      	mov	r1, r8
    bd08:	1c40      	adds	r0, r0, #1
    bd0a:	6872      	ldr	r2, [r6, #4]
    bd0c:	e007      	b.n	bd1e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x172>
    bd0e:	f015 0f28 	tst.w	r5, #40	; 0x28
    bd12:	d005      	beq.n	bd20 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x174>
    bd14:	f345 1140 	sbfx	r1, r5, #5, #1
    bd18:	68b2      	ldr	r2, [r6, #8]
    bd1a:	4640      	mov	r0, r8
    bd1c:	1c49      	adds	r1, r1, #1
    bd1e:	4790      	blx	r2
    bd20:	06e8      	lsls	r0, r5, #27
    bd22:	d501      	bpl.n	bd28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    bd24:	68f0      	ldr	r0, [r6, #12]
    bd26:	4780      	blx	r0
    bd28:	7ae0      	ldrb	r0, [r4, #11]
    bd2a:	2802      	cmp	r0, #2
    bd2c:	d11e      	bne.n	bd6c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c0>
    bd2e:	7c20      	ldrb	r0, [r4, #16]
    bd30:	2800      	cmp	r0, #0
    bd32:	d01b      	beq.n	bd6c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c0>
    bd34:	2802      	cmp	r0, #2
    bd36:	d004      	beq.n	bd42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x196>
    bd38:	2801      	cmp	r0, #1
    bd3a:	d008      	beq.n	bd4e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a2>
    bd3c:	f640 3166 	movw	r1, #2918	; 0xb66
    bd40:	e00b      	b.n	bd5a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ae>
    bd42:	6961      	ldr	r1, [r4, #20]
    bd44:	6a60      	ldr	r0, [r4, #36]	; 0x24
    bd46:	4401      	add	r1, r0
    bd48:	f8c9 1000 	str.w	r1, [r9]
    bd4c:	e00a      	b.n	bd64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b8>
    bd4e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    bd50:	6960      	ldr	r0, [r4, #20]
    bd52:	4288      	cmp	r0, r1
    bd54:	d804      	bhi.n	bd60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b4>
    bd56:	f640 3167 	movw	r1, #2919	; 0xb67
    bd5a:	203e      	movs	r0, #62	; 0x3e
    bd5c:	f7f8 fe48 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd60:	f8c9 0000 	str.w	r0, [r9]
    bd64:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bd68:	f000 ba1e 	b.w	c1a8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x414>
    bd6c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    bd70:	40008000 	.word	0x40008000
    bd74:	4000854c 	.word	0x4000854c
    bd78:	4000b504 	.word	0x4000b504
    bd7c:	20000fbc 	.word	0x20000fbc
    bd80:	20000280 	.word	0x20000280
    bd84:	4001f508 	.word	0x4001f508
    bd88:	40001000 	.word	0x40001000
    bd8c:	40001504 	.word	0x40001504
    bd90:	40008544 	.word	0x40008544

0000bd94 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    bd94:	b570      	push	{r4, r5, r6, lr}
    bd96:	4b11      	ldr	r3, [pc, #68]	; (bddc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48>)
    bd98:	888c      	ldrh	r4, [r1, #4]
    bd9a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    bd9e:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
    bda2:	780c      	ldrb	r4, [r1, #0]
    bda4:	f8d1 1001 	ldr.w	r1, [r1, #1]
    bda8:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    bdac:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    bdb0:	4d0b      	ldr	r5, [pc, #44]	; (bde0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c>)
    bdb2:	6829      	ldr	r1, [r5, #0]
    bdb4:	f100 0608 	add.w	r6, r0, #8
    bdb8:	2401      	movs	r4, #1
    bdba:	fa04 f306 	lsl.w	r3, r4, r6
    bdbe:	b132      	cbz	r2, bdce <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    bdc0:	2a01      	cmp	r2, #1
    bdc2:	d006      	beq.n	bdd2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e>
    bdc4:	f240 41f1 	movw	r1, #1265	; 0x4f1
    bdc8:	203e      	movs	r0, #62	; 0x3e
    bdca:	f7f8 fe11 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bdce:	4399      	bics	r1, r3
    bdd0:	e000      	b.n	bdd4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x40>
    bdd2:	4319      	orrs	r1, r3
    bdd4:	4084      	lsls	r4, r0
    bdd6:	430c      	orrs	r4, r1
    bdd8:	602c      	str	r4, [r5, #0]
    bdda:	bd70      	pop	{r4, r5, r6, pc}
    bddc:	40001000 	.word	0x40001000
    bde0:	40001640 	.word	0x40001640
    bde4:	b510      	push	{r4, lr}
    bde6:	4604      	mov	r4, r0
    bde8:	f000 fbf3 	bl	c5d2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bdec:	2800      	cmp	r0, #0
    bdee:	d00e      	beq.n	be0e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7a>
    bdf0:	4a09      	ldr	r2, [pc, #36]	; (be18 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x84>)
    bdf2:	6811      	ldr	r1, [r2, #0]
    bdf4:	0650      	lsls	r0, r2, #25
    bdf6:	2c02      	cmp	r4, #2
    bdf8:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    bdfc:	d008      	beq.n	be10 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7c>
    bdfe:	f3c0 2006 	ubfx	r0, r0, #8, #7
    be02:	bf00      	nop
    be04:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    be08:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    be0c:	6010      	str	r0, [r2, #0]
    be0e:	bd10      	pop	{r4, pc}
    be10:	f3c0 6006 	ubfx	r0, r0, #24, #7
    be14:	e7f6      	b.n	be04 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x70>
    be16:	0000      	.short	0x0000
    be18:	40001588 	.word	0x40001588
    be1c:	480d      	ldr	r0, [pc, #52]	; (be54 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc0>)
    be1e:	7e40      	ldrb	r0, [r0, #25]
    be20:	2825      	cmp	r0, #37	; 0x25
    be22:	d007      	beq.n	be34 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa0>
    be24:	2826      	cmp	r0, #38	; 0x26
    be26:	d007      	beq.n	be38 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa4>
    be28:	2827      	cmp	r0, #39	; 0x27
    be2a:	d007      	beq.n	be3c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa8>
    be2c:	280a      	cmp	r0, #10
    be2e:	d807      	bhi.n	be40 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xac>
    be30:	2204      	movs	r2, #4
    be32:	e006      	b.n	be42 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xae>
    be34:	2102      	movs	r1, #2
    be36:	e007      	b.n	be48 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    be38:	211a      	movs	r1, #26
    be3a:	e005      	b.n	be48 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    be3c:	2150      	movs	r1, #80	; 0x50
    be3e:	e003      	b.n	be48 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    be40:	2206      	movs	r2, #6
    be42:	eb02 0140 	add.w	r1, r2, r0, lsl #1
    be46:	b2c9      	uxtb	r1, r1
    be48:	4a03      	ldr	r2, [pc, #12]	; (be58 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc4>)
    be4a:	6011      	str	r1, [r2, #0]
    be4c:	4902      	ldr	r1, [pc, #8]	; (be58 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc4>)
    be4e:	314c      	adds	r1, #76	; 0x4c
    be50:	6008      	str	r0, [r1, #0]
    be52:	4770      	bx	lr
    be54:	20000fbc 	.word	0x20000fbc
    be58:	40001508 	.word	0x40001508
    be5c:	4912      	ldr	r1, [pc, #72]	; (bea8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x114>)
    be5e:	b508      	push	{r3, lr}
    be60:	f991 2018 	ldrsb.w	r2, [r1, #24]
    be64:	7e49      	ldrb	r1, [r1, #25]
    be66:	2801      	cmp	r0, #1
    be68:	d00a      	beq.n	be80 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xec>
    be6a:	2802      	cmp	r0, #2
    be6c:	d00a      	beq.n	be84 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xf0>
    be6e:	2804      	cmp	r0, #4
    be70:	d00a      	beq.n	be88 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xf4>
    be72:	2808      	cmp	r0, #8
    be74:	d00a      	beq.n	be8c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xf8>
    be76:	f240 31d7 	movw	r1, #983	; 0x3d7
    be7a:	2006      	movs	r0, #6
    be7c:	f7f8 fdb8 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be80:	2000      	movs	r0, #0
    be82:	e004      	b.n	be8e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfa>
    be84:	2001      	movs	r0, #1
    be86:	e002      	b.n	be8e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfa>
    be88:	2003      	movs	r0, #3
    be8a:	e000      	b.n	be8e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfa>
    be8c:	2002      	movs	r0, #2
    be8e:	466b      	mov	r3, sp
    be90:	f7f5 f9d4 	bl	123c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    be94:	b118      	cbz	r0, be9e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x10a>
    be96:	f44f 61a4 	mov.w	r1, #1312	; 0x520
    be9a:	203e      	movs	r0, #62	; 0x3e
    be9c:	e7ee      	b.n	be7c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xe8>
    be9e:	f99d 0000 	ldrsb.w	r0, [sp]
    bea2:	f000 fa09 	bl	c2b8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    bea6:	bd08      	pop	{r3, pc}
    bea8:	20000fbc 	.word	0x20000fbc
    beac:	4803      	ldr	r0, [pc, #12]	; (bebc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x128>)
    beae:	7a81      	ldrb	r1, [r0, #10]
    beb0:	2901      	cmp	r1, #1
    beb2:	d102      	bne.n	beba <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x126>
    beb4:	7b40      	ldrb	r0, [r0, #13]
    beb6:	f7ff bfd1 	b.w	be5c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    beba:	4770      	bx	lr
    bebc:	20000fbc 	.word	0x20000fbc
    bec0:	4805      	ldr	r0, [pc, #20]	; (bed8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x144>)
    bec2:	7ac0      	ldrb	r0, [r0, #11]
    bec4:	2801      	cmp	r0, #1
    bec6:	d003      	beq.n	bed0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x13c>
    bec8:	2802      	cmp	r0, #2
    beca:	d103      	bne.n	bed4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x140>
    becc:	f003 bfce 	b.w	fe6c <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    bed0:	f003 bfd8 	b.w	fe84 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    bed4:	4770      	bx	lr
    bed6:	0000      	.short	0x0000
    bed8:	20000fbc 	.word	0x20000fbc
    bedc:	4809      	ldr	r0, [pc, #36]	; (bf04 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x170>)
    bede:	b508      	push	{r3, lr}
    bee0:	2100      	movs	r1, #0
    bee2:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    bee6:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    beea:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    beee:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    bef2:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    bef6:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    befa:	4803      	ldr	r0, [pc, #12]	; (bf08 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x174>)
    befc:	6800      	ldr	r0, [r0, #0]
    befe:	9000      	str	r0, [sp, #0]
    bf00:	bd08      	pop	{r3, pc}
    bf02:	0000      	.short	0x0000
    bf04:	40001000 	.word	0x40001000
    bf08:	40001118 	.word	0x40001118
    bf0c:	4816      	ldr	r0, [pc, #88]	; (bf68 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d4>)
    bf0e:	b510      	push	{r4, lr}
    bf10:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    bf14:	07c1      	lsls	r1, r0, #31
    bf16:	d026      	beq.n	bf66 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    bf18:	0781      	lsls	r1, r0, #30
    bf1a:	d513      	bpl.n	bf44 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1b0>
    bf1c:	4813      	ldr	r0, [pc, #76]	; (bf6c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d8>)
    bf1e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    bf22:	f041 0101 	orr.w	r1, r1, #1
    bf26:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bf2a:	4811      	ldr	r0, [pc, #68]	; (bf70 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1dc>)
    bf2c:	6800      	ldr	r0, [r0, #0]
    bf2e:	280b      	cmp	r0, #11
    bf30:	d005      	beq.n	bf3e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1aa>
    bf32:	280a      	cmp	r0, #10
    bf34:	d003      	beq.n	bf3e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1aa>
    bf36:	2803      	cmp	r0, #3
    bf38:	d001      	beq.n	bf3e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1aa>
    bf3a:	2802      	cmp	r0, #2
    bf3c:	d113      	bne.n	bf66 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    bf3e:	f240 514b 	movw	r1, #1355	; 0x54b
    bf42:	e00d      	b.n	bf60 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1cc>
    bf44:	0740      	lsls	r0, r0, #29
    bf46:	d50e      	bpl.n	bf66 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    bf48:	4808      	ldr	r0, [pc, #32]	; (bf6c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d8>)
    bf4a:	490a      	ldr	r1, [pc, #40]	; (bf74 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e0>)
    bf4c:	3008      	adds	r0, #8
    bf4e:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    bf52:	4809      	ldr	r0, [pc, #36]	; (bf78 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e4>)
    bf54:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    bf58:	2801      	cmp	r0, #1
    bf5a:	d104      	bne.n	bf66 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    bf5c:	f240 5152 	movw	r1, #1362	; 0x552
    bf60:	203e      	movs	r0, #62	; 0x3e
    bf62:	f7f8 fd45 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf66:	bd10      	pop	{r4, pc}
    bf68:	20000fbc 	.word	0x20000fbc
    bf6c:	40001000 	.word	0x40001000
    bf70:	40001550 	.word	0x40001550
    bf74:	4001f098 	.word	0x4001f098
    bf78:	40008000 	.word	0x40008000
    bf7c:	4808      	ldr	r0, [pc, #32]	; (bfa0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x20c>)
    bf7e:	4601      	mov	r1, r0
    bf80:	7a42      	ldrb	r2, [r0, #9]
    bf82:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    bf86:	b112      	cbz	r2, bf8e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1fa>
    bf88:	2a01      	cmp	r2, #1
    bf8a:	d003      	beq.n	bf94 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x200>
    bf8c:	e006      	b.n	bf9c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x208>
    bf8e:	f041 0102 	orr.w	r1, r1, #2
    bf92:	e001      	b.n	bf98 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x204>
    bf94:	f041 0104 	orr.w	r1, r1, #4
    bf98:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
    bf9c:	f7ff bfb6 	b.w	bf0c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x178>
    bfa0:	20000fbc 	.word	0x20000fbc
    bfa4:	b510      	push	{r4, lr}
    bfa6:	f000 fb14 	bl	c5d2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bfaa:	2800      	cmp	r0, #0
    bfac:	d108      	bne.n	bfc0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x22c>
    bfae:	f000 fb00 	bl	c5b2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bfb2:	2800      	cmp	r0, #0
    bfb4:	d104      	bne.n	bfc0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x22c>
    bfb6:	4803      	ldr	r0, [pc, #12]	; (bfc4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x230>)
    bfb8:	6801      	ldr	r1, [r0, #0]
    bfba:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    bfbe:	6001      	str	r1, [r0, #0]
    bfc0:	bd10      	pop	{r4, pc}
    bfc2:	0000      	.short	0x0000
    bfc4:	40001568 	.word	0x40001568
    bfc8:	b538      	push	{r3, r4, r5, lr}
    bfca:	4d36      	ldr	r5, [pc, #216]	; (c0a4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x310>)
    bfcc:	2400      	movs	r4, #0
    bfce:	7c28      	ldrb	r0, [r5, #16]
    bfd0:	b120      	cbz	r0, bfdc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x248>
    bfd2:	4835      	ldr	r0, [pc, #212]	; (c0a8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x314>)
    bfd4:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
    bfd8:	2801      	cmp	r0, #1
    bfda:	d007      	beq.n	bfec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x258>
    bfdc:	2200      	movs	r2, #0
    bfde:	7ae9      	ldrb	r1, [r5, #11]
    bfe0:	4832      	ldr	r0, [pc, #200]	; (c0ac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x318>)
    bfe2:	2901      	cmp	r1, #1
    bfe4:	d004      	beq.n	bff0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x25c>
    bfe6:	2902      	cmp	r1, #2
    bfe8:	d00a      	beq.n	c000 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x26c>
    bfea:	e019      	b.n	c020 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x28c>
    bfec:	2201      	movs	r2, #1
    bfee:	e7f6      	b.n	bfde <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x24a>
    bff0:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    bff4:	2901      	cmp	r1, #1
    bff6:	d001      	beq.n	bffc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x268>
    bff8:	2400      	movs	r4, #0
    bffa:	e011      	b.n	c020 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x28c>
    bffc:	2408      	movs	r4, #8
    bffe:	e00f      	b.n	c020 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x28c>
    c000:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    c004:	2901      	cmp	r1, #1
    c006:	d006      	beq.n	c016 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x282>
    c008:	2100      	movs	r1, #0
    c00a:	4b29      	ldr	r3, [pc, #164]	; (c0b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x31c>)
    c00c:	681b      	ldr	r3, [r3, #0]
    c00e:	2b01      	cmp	r3, #1
    c010:	d003      	beq.n	c01a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x286>
    c012:	2404      	movs	r4, #4
    c014:	e002      	b.n	c01c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x288>
    c016:	2102      	movs	r1, #2
    c018:	e7f7      	b.n	c00a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x276>
    c01a:	2400      	movs	r4, #0
    c01c:	430c      	orrs	r4, r1
    c01e:	4314      	orrs	r4, r2
    c020:	f014 0f0b 	tst.w	r4, #11
    c024:	d105      	bne.n	c032 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x29e>
    c026:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    c02a:	2901      	cmp	r1, #1
    c02c:	d006      	beq.n	c03c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2a8>
    c02e:	2100      	movs	r1, #0
    c030:	430c      	orrs	r4, r1
    c032:	4920      	ldr	r1, [pc, #128]	; (c0b4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x320>)
    c034:	7809      	ldrb	r1, [r1, #0]
    c036:	07c9      	lsls	r1, r1, #31
    c038:	d002      	beq.n	c040 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2ac>
    c03a:	e023      	b.n	c084 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2f0>
    c03c:	2110      	movs	r1, #16
    c03e:	e7f7      	b.n	c030 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x29c>
    c040:	491d      	ldr	r1, [pc, #116]	; (c0b8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x324>)
    c042:	6809      	ldr	r1, [r1, #0]
    c044:	f011 0fff 	tst.w	r1, #255	; 0xff
    c048:	d003      	beq.n	c052 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2be>
    c04a:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    c04e:	2a01      	cmp	r2, #1
    c050:	d000      	beq.n	c054 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2c0>
    c052:	2200      	movs	r2, #0
    c054:	f885 202a 	strb.w	r2, [r5, #42]	; 0x2a
    c058:	f011 0fff 	tst.w	r1, #255	; 0xff
    c05c:	d003      	beq.n	c066 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d2>
    c05e:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    c062:	2801      	cmp	r0, #1
    c064:	d000      	beq.n	c068 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d4>
    c066:	2000      	movs	r0, #0
    c068:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    c06c:	4810      	ldr	r0, [pc, #64]	; (c0b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x31c>)
    c06e:	3010      	adds	r0, #16
    c070:	6800      	ldr	r0, [r0, #0]
    c072:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    c076:	f7ff f857 	bl	b128 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    c07a:	2801      	cmp	r0, #1
    c07c:	d000      	beq.n	c080 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2ec>
    c07e:	2000      	movs	r0, #0
    c080:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
    c084:	f7ff ff2a 	bl	bedc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x148>
    c088:	06e0      	lsls	r0, r4, #27
    c08a:	d506      	bpl.n	c09a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x306>
    c08c:	0720      	lsls	r0, r4, #28
    c08e:	d404      	bmi.n	c09a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x306>
    c090:	7ae8      	ldrb	r0, [r5, #11]
    c092:	2801      	cmp	r0, #1
    c094:	d101      	bne.n	c09a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x306>
    c096:	f044 0420 	orr.w	r4, r4, #32
    c09a:	4808      	ldr	r0, [pc, #32]	; (c0bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x328>)
    c09c:	6800      	ldr	r0, [r0, #0]
    c09e:	9000      	str	r0, [sp, #0]
    c0a0:	4620      	mov	r0, r4
    c0a2:	bd38      	pop	{r3, r4, r5, pc}
    c0a4:	20000fbc 	.word	0x20000fbc
    c0a8:	40008000 	.word	0x40008000
    c0ac:	40001000 	.word	0x40001000
    c0b0:	40001400 	.word	0x40001400
    c0b4:	20000280 	.word	0x20000280
    c0b8:	40001640 	.word	0x40001640
    c0bc:	40008144 	.word	0x40008144
    c0c0:	4808      	ldr	r0, [pc, #32]	; (c0e4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x350>)
    c0c2:	b510      	push	{r4, lr}
    c0c4:	6800      	ldr	r0, [r0, #0]
    c0c6:	f000 000f 	and.w	r0, r0, #15
    c0ca:	2803      	cmp	r0, #3
    c0cc:	d006      	beq.n	c0dc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x348>
    c0ce:	2804      	cmp	r0, #4
    c0d0:	d006      	beq.n	c0e0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x34c>
    c0d2:	f240 2136 	movw	r1, #566	; 0x236
    c0d6:	203e      	movs	r0, #62	; 0x3e
    c0d8:	f7f8 fc8a 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c0dc:	2001      	movs	r0, #1
    c0de:	bd10      	pop	{r4, pc}
    c0e0:	2002      	movs	r0, #2
    c0e2:	bd10      	pop	{r4, pc}
    c0e4:	40001510 	.word	0x40001510
    c0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0ec:	4c25      	ldr	r4, [pc, #148]	; (c184 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f0>)
    c0ee:	460d      	mov	r5, r1
    c0f0:	7aa2      	ldrb	r2, [r4, #10]
    c0f2:	b19a      	cbz	r2, c11c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x388>
    c0f4:	7b21      	ldrb	r1, [r4, #12]
    c0f6:	078b      	lsls	r3, r1, #30
    c0f8:	d503      	bpl.n	c102 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x36e>
    c0fa:	0783      	lsls	r3, r0, #30
    c0fc:	d501      	bpl.n	c102 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x36e>
    c0fe:	0743      	lsls	r3, r0, #29
    c100:	d41c      	bmi.n	c13c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a8>
    c102:	06cb      	lsls	r3, r1, #27
    c104:	d505      	bpl.n	c112 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x37e>
    c106:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    c10a:	b113      	cbz	r3, c112 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x37e>
    c10c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    c110:	b1a3      	cbz	r3, c13c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a8>
    c112:	070b      	lsls	r3, r1, #28
    c114:	d50b      	bpl.n	c12e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x39a>
    c116:	7f23      	ldrb	r3, [r4, #28]
    c118:	b983      	cbnz	r3, c13c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a8>
    c11a:	e008      	b.n	c12e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x39a>
    c11c:	491a      	ldr	r1, [pc, #104]	; (c188 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f4>)
    c11e:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c122:	6008      	str	r0, [r1, #0]
    c124:	f000 f868 	bl	c1f8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    c128:	2000      	movs	r0, #0
    c12a:	7420      	strb	r0, [r4, #16]
    c12c:	e028      	b.n	c180 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ec>
    c12e:	0749      	lsls	r1, r1, #29
    c130:	d501      	bpl.n	c136 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a2>
    c132:	7f61      	ldrb	r1, [r4, #29]
    c134:	b111      	cbz	r1, c13c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a8>
    c136:	f010 0f11 	tst.w	r0, #17
    c13a:	d002      	beq.n	c142 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ae>
    c13c:	f7ff f98a 	bl	b454 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c140:	e01e      	b.n	c180 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ec>
    c142:	2a01      	cmp	r2, #1
    c144:	d001      	beq.n	c14a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b6>
    c146:	2601      	movs	r6, #1
    c148:	e000      	b.n	c14c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b8>
    c14a:	2600      	movs	r6, #0
    c14c:	7a60      	ldrb	r0, [r4, #9]
    c14e:	2801      	cmp	r0, #1
    c150:	d00e      	beq.n	c170 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3dc>
    c152:	2700      	movs	r7, #0
    c154:	f000 f850 	bl	c1f8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    c158:	2196      	movs	r1, #150	; 0x96
    c15a:	4630      	mov	r0, r6
    c15c:	f000 f864 	bl	c228 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x494>
    c160:	4601      	mov	r1, r0
    c162:	b14f      	cbz	r7, c178 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e4>
    c164:	353b      	adds	r5, #59	; 0x3b
    c166:	428d      	cmp	r5, r1
    c168:	d904      	bls.n	c174 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e0>
    c16a:	2000      	movs	r0, #0
    c16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c170:	2701      	movs	r7, #1
    c172:	e7ef      	b.n	c154 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3c0>
    c174:	2001      	movs	r0, #1
    c176:	7260      	strb	r0, [r4, #9]
    c178:	7b62      	ldrb	r2, [r4, #13]
    c17a:	4630      	mov	r0, r6
    c17c:	f7ff fc1c 	bl	b9b8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    c180:	2001      	movs	r0, #1
    c182:	e7f3      	b.n	c16c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3d8>
    c184:	20000fbc 	.word	0x20000fbc
    c188:	4001f508 	.word	0x4001f508
    c18c:	4805      	ldr	r0, [pc, #20]	; (c1a4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x410>)
    c18e:	2100      	movs	r1, #0
    c190:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    c194:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c198:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    c19c:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c1a0:	4770      	bx	lr
    c1a2:	0000      	.short	0x0000
    c1a4:	40001000 	.word	0x40001000
    c1a8:	4804      	ldr	r0, [pc, #16]	; (c1bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x428>)
    c1aa:	6b01      	ldr	r1, [r0, #48]	; 0x30
    c1ac:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c1b0:	6301      	str	r1, [r0, #48]	; 0x30
    c1b2:	4903      	ldr	r1, [pc, #12]	; (c1c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x42c>)
    c1b4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c1b8:	6008      	str	r0, [r1, #0]
    c1ba:	4770      	bx	lr
    c1bc:	20000fbc 	.word	0x20000fbc
    c1c0:	4001f504 	.word	0x4001f504
    c1c4:	4905      	ldr	r1, [pc, #20]	; (c1dc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x448>)
    c1c6:	2000      	movs	r0, #0
    c1c8:	6008      	str	r0, [r1, #0]
    c1ca:	1f09      	subs	r1, r1, #4
    c1cc:	6008      	str	r0, [r1, #0]
    c1ce:	1f09      	subs	r1, r1, #4
    c1d0:	6008      	str	r0, [r1, #0]
    c1d2:	4902      	ldr	r1, [pc, #8]	; (c1dc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x448>)
    c1d4:	1d09      	adds	r1, r1, #4
    c1d6:	6008      	str	r0, [r1, #0]
    c1d8:	4770      	bx	lr
    c1da:	0000      	.short	0x0000
    c1dc:	40008548 	.word	0x40008548
    c1e0:	4903      	ldr	r1, [pc, #12]	; (c1f0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x45c>)
    c1e2:	7a49      	ldrb	r1, [r1, #9]
    c1e4:	2900      	cmp	r1, #0
    c1e6:	d102      	bne.n	c1ee <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x45a>
    c1e8:	4902      	ldr	r1, [pc, #8]	; (c1f4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x460>)
    c1ea:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c1ee:	4770      	bx	lr
    c1f0:	20000fbc 	.word	0x20000fbc
    c1f4:	4001f098 	.word	0x4001f098
    c1f8:	4803      	ldr	r0, [pc, #12]	; (c208 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x474>)
    c1fa:	2100      	movs	r1, #0
    c1fc:	7241      	strb	r1, [r0, #9]
    c1fe:	7281      	strb	r1, [r0, #10]
    c200:	72c1      	strb	r1, [r0, #11]
    c202:	2101      	movs	r1, #1
    c204:	7301      	strb	r1, [r0, #12]
    c206:	4770      	bx	lr
    c208:	20000fbc 	.word	0x20000fbc
    c20c:	4a05      	ldr	r2, [pc, #20]	; (c224 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x490>)
    c20e:	7a52      	ldrb	r2, [r2, #9]
    c210:	2a01      	cmp	r2, #1
    c212:	d006      	beq.n	c222 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48e>
    c214:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c218:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    c21c:	fbb1 f1f2 	udiv	r1, r1, r2
    c220:	1a40      	subs	r0, r0, r1
    c222:	4770      	bx	lr
    c224:	20000fbc 	.word	0x20000fbc
    c228:	b570      	push	{r4, r5, r6, lr}
    c22a:	4c13      	ldr	r4, [pc, #76]	; (c278 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e4>)
    c22c:	4603      	mov	r3, r0
    c22e:	460d      	mov	r5, r1
    c230:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    c234:	2000      	movs	r0, #0
    c236:	b15a      	cbz	r2, c250 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4bc>
    c238:	4621      	mov	r1, r4
    c23a:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    c23e:	b163      	cbz	r3, c25a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c6>
    c240:	2b01      	cmp	r3, #1
    c242:	d111      	bne.n	c268 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d4>
    c244:	2a01      	cmp	r2, #1
    c246:	4628      	mov	r0, r5
    c248:	d012      	beq.n	c270 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4dc>
    c24a:	f003 fee9 	bl	10020 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    c24e:	e009      	b.n	c264 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d0>
    c250:	f240 7186 	movw	r1, #1926	; 0x786
    c254:	203e      	movs	r0, #62	; 0x3e
    c256:	f7f8 fbcb 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c25a:	2a01      	cmp	r2, #1
    c25c:	4628      	mov	r0, r5
    c25e:	d004      	beq.n	c26a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d6>
    c260:	f003 feec 	bl	1003c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    c264:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c266:	4408      	add	r0, r1
    c268:	bd70      	pop	{r4, r5, r6, pc}
    c26a:	f003 ff01 	bl	10070 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    c26e:	e7f9      	b.n	c264 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d0>
    c270:	f003 feef 	bl	10052 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    c274:	e7f6      	b.n	c264 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d0>
    c276:	0000      	.short	0x0000
    c278:	20000fbc 	.word	0x20000fbc
    c27c:	b510      	push	{r4, lr}
    c27e:	2200      	movs	r2, #0
    c280:	2901      	cmp	r1, #1
    c282:	d008      	beq.n	c296 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x502>
    c284:	2902      	cmp	r1, #2
    c286:	d004      	beq.n	c292 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4fe>
    c288:	f44f 7121 	mov.w	r1, #644	; 0x284
    c28c:	203e      	movs	r0, #62	; 0x3e
    c28e:	f7f8 fbaf 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c292:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c296:	4905      	ldr	r1, [pc, #20]	; (c2ac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x518>)
    c298:	430a      	orrs	r2, r1
    c29a:	4905      	ldr	r1, [pc, #20]	; (c2b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x51c>)
    c29c:	600a      	str	r2, [r1, #0]
    c29e:	4905      	ldr	r1, [pc, #20]	; (c2b4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x520>)
    c2a0:	4308      	orrs	r0, r1
    c2a2:	4903      	ldr	r1, [pc, #12]	; (c2b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x51c>)
    c2a4:	1d09      	adds	r1, r1, #4
    c2a6:	6008      	str	r0, [r1, #0]
    c2a8:	bd10      	pop	{r4, pc}
    c2aa:	0000      	.short	0x0000
    c2ac:	00100108 	.word	0x00100108
    c2b0:	40001514 	.word	0x40001514
    c2b4:	02030000 	.word	0x02030000

0000c2b8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    c2b8:	4901      	ldr	r1, [pc, #4]	; (c2c0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    c2ba:	b2c0      	uxtb	r0, r0
    c2bc:	6008      	str	r0, [r1, #0]
    c2be:	4770      	bx	lr
    c2c0:	4000150c 	.word	0x4000150c

0000c2c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    c2c4:	b510      	push	{r4, lr}
    c2c6:	4907      	ldr	r1, [pc, #28]	; (c2e4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    c2c8:	2801      	cmp	r0, #1
    c2ca:	d005      	beq.n	c2d8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    c2cc:	2802      	cmp	r0, #2
    c2ce:	d005      	beq.n	c2dc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    c2d0:	2197      	movs	r1, #151	; 0x97
    c2d2:	203f      	movs	r0, #63	; 0x3f
    c2d4:	f7f8 fb8c 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c2d8:	2003      	movs	r0, #3
    c2da:	e000      	b.n	c2de <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    c2dc:	2004      	movs	r0, #4
    c2de:	6008      	str	r0, [r1, #0]
    c2e0:	bd10      	pop	{r4, pc}
    c2e2:	0000      	.short	0x0000
    c2e4:	40001510 	.word	0x40001510

0000c2e8 <strcmp>:
    c2e8:	f810 2b01 	ldrb.w	r2, [r0], #1
    c2ec:	f811 3b01 	ldrb.w	r3, [r1], #1
    c2f0:	2a01      	cmp	r2, #1
    c2f2:	bf28      	it	cs
    c2f4:	429a      	cmpcs	r2, r3
    c2f6:	d0f7      	beq.n	c2e8 <strcmp>
    c2f8:	1ad0      	subs	r0, r2, r3
    c2fa:	4770      	bx	lr

0000c2fc <strlen>:
    c2fc:	4603      	mov	r3, r0
    c2fe:	f813 2b01 	ldrb.w	r2, [r3], #1
    c302:	2a00      	cmp	r2, #0
    c304:	d1fb      	bne.n	c2fe <strlen+0x2>
    c306:	1a18      	subs	r0, r3, r0
    c308:	3801      	subs	r0, #1
    c30a:	4770      	bx	lr

0000c30c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    c30c:	4770      	bx	lr
    c30e:	2100      	movs	r1, #0
    c310:	7081      	strb	r1, [r0, #2]
    c312:	7001      	strb	r1, [r0, #0]
    c314:	7041      	strb	r1, [r0, #1]
    c316:	4770      	bx	lr

0000c318 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    c318:	b570      	push	{r4, r5, r6, lr}
    c31a:	f7f4 ffa9 	bl	1270 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    c31e:	4605      	mov	r5, r0
    c320:	2400      	movs	r4, #0
    c322:	e006      	b.n	c332 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    c324:	4620      	mov	r0, r4
    c326:	f7f4 ffa9 	bl	127c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c32a:	f7ff fff0 	bl	c30e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    c32e:	1c64      	adds	r4, r4, #1
    c330:	b2e4      	uxtb	r4, r4
    c332:	42ac      	cmp	r4, r5
    c334:	d3f6      	bcc.n	c324 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    c336:	bd70      	pop	{r4, r5, r6, pc}

0000c338 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    c338:	2000      	movs	r0, #0
    c33a:	f7f7 bd01 	b.w	3d40 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000c33e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    c33e:	b510      	push	{r4, lr}
    c340:	f7f7 f9ea 	bl	3718 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    c344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c348:	f000 b80b 	b.w	c362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000c34c <sym_BE2HGIHF5RDQALAHNCCVX54XTGKEN4KZFXFBHBQ>:
    c34c:	0a41      	lsrs	r1, r0, #9
    c34e:	f643 5209 	movw	r2, #15625	; 0x3d09
    c352:	4351      	muls	r1, r2
    c354:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c358:	fb10 f002 	smulbb	r0, r0, r2
    c35c:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    c360:	4770      	bx	lr

0000c362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    c362:	0a41      	lsrs	r1, r0, #9
    c364:	f643 5209 	movw	r2, #15625	; 0x3d09
    c368:	4351      	muls	r1, r2
    c36a:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c36e:	fb10 f002 	smulbb	r0, r0, r2
    c372:	f500 7080 	add.w	r0, r0, #256	; 0x100
    c376:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    c37a:	4770      	bx	lr

0000c37c <MPSL_IRQ_RADIO_Handler>:
    c37c:	f7f6 b818 	b.w	23b0 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    c380:	2800      	cmp	r0, #0
    c382:	db09      	blt.n	c398 <MPSL_IRQ_RADIO_Handler+0x1c>
    c384:	f000 021f 	and.w	r2, r0, #31
    c388:	2101      	movs	r1, #1
    c38a:	4091      	lsls	r1, r2
    c38c:	0940      	lsrs	r0, r0, #5
    c38e:	0080      	lsls	r0, r0, #2
    c390:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c394:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c398:	4770      	bx	lr
    c39a:	2800      	cmp	r0, #0
    c39c:	db0d      	blt.n	c3ba <MPSL_IRQ_RADIO_Handler+0x3e>
    c39e:	f000 021f 	and.w	r2, r0, #31
    c3a2:	2101      	movs	r1, #1
    c3a4:	4091      	lsls	r1, r2
    c3a6:	0940      	lsrs	r0, r0, #5
    c3a8:	0080      	lsls	r0, r0, #2
    c3aa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c3ae:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c3b2:	f3bf 8f4f 	dsb	sy
    c3b6:	f3bf 8f6f 	isb	sy
    c3ba:	4770      	bx	lr

0000c3bc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c3bc:	b570      	push	{r4, r5, r6, lr}
    c3be:	4602      	mov	r2, r0
    c3c0:	2000      	movs	r0, #0
    c3c2:	2900      	cmp	r1, #0
    c3c4:	d01d      	beq.n	c402 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    c3c6:	fba2 0101 	umull	r0, r1, r2, r1
    c3ca:	0a40      	lsrs	r0, r0, #9
    c3cc:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    c3d0:	0a49      	lsrs	r1, r1, #9
    c3d2:	1c40      	adds	r0, r0, #1
    c3d4:	f141 0100 	adc.w	r1, r1, #0
    c3d8:	f240 72a1 	movw	r2, #1953	; 0x7a1
    c3dc:	1883      	adds	r3, r0, r2
    c3de:	f141 0100 	adc.w	r1, r1, #0
    c3e2:	1c5b      	adds	r3, r3, #1
    c3e4:	f141 0400 	adc.w	r4, r1, #0
    c3e8:	2100      	movs	r1, #0
    c3ea:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    c3ee:	41a1      	sbcs	r1, r4
    c3f0:	d203      	bcs.n	c3fa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    c3f2:	2171      	movs	r1, #113	; 0x71
    c3f4:	206d      	movs	r0, #109	; 0x6d
    c3f6:	f7f8 f865 	bl	44c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c3fa:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    c3fe:	fbb0 f0f2 	udiv	r0, r0, r2
    c402:	bd70      	pop	{r4, r5, r6, pc}
    c404:	5840      	ldr	r0, [r0, r1]
    c406:	2800      	cmp	r0, #0
    c408:	d000      	beq.n	c40c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    c40a:	2001      	movs	r0, #1
    c40c:	4770      	bx	lr
    c40e:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    c412:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    c416:	f002 0201 	and.w	r2, r2, #1
    c41a:	03c0      	lsls	r0, r0, #15
    c41c:	d503      	bpl.n	c426 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c41e:	428a      	cmp	r2, r1
    c420:	d101      	bne.n	c426 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c422:	2001      	movs	r0, #1
    c424:	4770      	bx	lr
    c426:	2000      	movs	r0, #0
    c428:	4770      	bx	lr

0000c42a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    c42a:	b510      	push	{r4, lr}
    c42c:	2101      	movs	r1, #1
    c42e:	0788      	lsls	r0, r1, #30
    c430:	f7f8 f806 	bl	4440 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c434:	2800      	cmp	r0, #0
    c436:	d000      	beq.n	c43a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    c438:	2001      	movs	r0, #1
    c43a:	bd10      	pop	{r4, pc}

0000c43c <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    c43c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c440:	2101      	movs	r1, #1
    c442:	6001      	str	r1, [r0, #0]
    c444:	4770      	bx	lr

0000c446 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    c446:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c44a:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    c44e:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    c452:	f002 0203 	and.w	r2, r2, #3
    c456:	03c9      	lsls	r1, r1, #15
    c458:	d503      	bpl.n	c462 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c45a:	4282      	cmp	r2, r0
    c45c:	d101      	bne.n	c462 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c45e:	2001      	movs	r0, #1
    c460:	4770      	bx	lr
    c462:	2000      	movs	r0, #0
    c464:	4770      	bx	lr

0000c466 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    c466:	b510      	push	{r4, lr}
    c468:	2100      	movs	r1, #0
    c46a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c46e:	f7f7 ffe7 	bl	4440 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c472:	2800      	cmp	r0, #0
    c474:	d000      	beq.n	c478 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    c476:	2001      	movs	r0, #1
    c478:	bd10      	pop	{r4, pc}
    c47a:	2800      	cmp	r0, #0
    c47c:	db09      	blt.n	c492 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    c47e:	f000 021f 	and.w	r2, r0, #31
    c482:	2101      	movs	r1, #1
    c484:	4091      	lsls	r1, r2
    c486:	0940      	lsrs	r0, r0, #5
    c488:	0080      	lsls	r0, r0, #2
    c48a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c48e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c492:	4770      	bx	lr
    c494:	2800      	cmp	r0, #0
    c496:	db0d      	blt.n	c4b4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    c498:	f000 021f 	and.w	r2, r0, #31
    c49c:	2101      	movs	r1, #1
    c49e:	4091      	lsls	r1, r2
    c4a0:	0940      	lsrs	r0, r0, #5
    c4a2:	0080      	lsls	r0, r0, #2
    c4a4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c4a8:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c4ac:	f3bf 8f4f 	dsb	sy
    c4b0:	f3bf 8f6f 	isb	sy
    c4b4:	4770      	bx	lr
    c4b6:	1000      	.short	0x1000
    c4b8:	00fa0002 	.word	0x00fa0002
    c4bc:	8aac0000 	.word	0x8aac0000
    c4c0:	6d0bcd32 	.word	0x6d0bcd32
    c4c4:	d80b09dd 	.word	0xd80b09dd
    c4c8:	2eb78494 	.word	0x2eb78494
    c4cc:	1808bff3 	.word	0x1808bff3
    c4d0:	7bd8      	.short	0x7bd8
    c4d2:	2800      	cmp	r0, #0
    c4d4:	db09      	blt.n	c4ea <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    c4d6:	f000 021f 	and.w	r2, r0, #31
    c4da:	2101      	movs	r1, #1
    c4dc:	4091      	lsls	r1, r2
    c4de:	0940      	lsrs	r0, r0, #5
    c4e0:	0080      	lsls	r0, r0, #2
    c4e2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c4e6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c4ea:	4770      	bx	lr

0000c4ec <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    c4ec:	f3ef 8110 	mrs	r1, PRIMASK
    c4f0:	b672      	cpsid	i
    c4f2:	7802      	ldrb	r2, [r0, #0]
    c4f4:	2a01      	cmp	r2, #1
    c4f6:	d001      	beq.n	c4fc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    c4f8:	2201      	movs	r2, #1
    c4fa:	e000      	b.n	c4fe <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    c4fc:	2200      	movs	r2, #0
    c4fe:	2301      	movs	r3, #1
    c500:	7003      	strb	r3, [r0, #0]
    c502:	b901      	cbnz	r1, c506 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    c504:	b662      	cpsie	i
    c506:	b10a      	cbz	r2, c50c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    c508:	2000      	movs	r0, #0
    c50a:	4770      	bx	lr
    c50c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c510:	4770      	bx	lr

0000c512 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    c512:	2100      	movs	r1, #0
    c514:	7001      	strb	r1, [r0, #0]
    c516:	4608      	mov	r0, r1
    c518:	4770      	bx	lr

0000c51a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    c51a:	f3ef 8110 	mrs	r1, PRIMASK
    c51e:	b672      	cpsid	i
    c520:	2200      	movs	r2, #0
    c522:	7002      	strb	r2, [r0, #0]
    c524:	b901      	cbnz	r1, c528 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    c526:	b662      	cpsie	i
    c528:	2000      	movs	r0, #0
    c52a:	4770      	bx	lr

0000c52c <mpsl_low_priority_process>:
    c52c:	f7f8 b8b6 	b.w	469c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000c530 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    c530:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c534:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c538:	280f      	cmp	r0, #15
    c53a:	d001      	beq.n	c540 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    c53c:	2000      	movs	r0, #0
    c53e:	4770      	bx	lr
    c540:	2001      	movs	r0, #1
    c542:	4770      	bx	lr

0000c544 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    c544:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c548:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c54c:	280a      	cmp	r0, #10
    c54e:	d001      	beq.n	c554 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    c550:	2000      	movs	r0, #0
    c552:	4770      	bx	lr
    c554:	2001      	movs	r0, #1
    c556:	4770      	bx	lr

0000c558 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    c558:	b500      	push	{lr}
    c55a:	f7ff fff3 	bl	c544 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c55e:	b120      	cbz	r0, c56a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    c560:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c564:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c568:	b108      	cbz	r0, c56e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    c56a:	2000      	movs	r0, #0
    c56c:	bd00      	pop	{pc}
    c56e:	2001      	movs	r0, #1
    c570:	bd00      	pop	{pc}

0000c572 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    c572:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c576:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c57a:	280e      	cmp	r0, #14
    c57c:	d001      	beq.n	c582 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    c57e:	2000      	movs	r0, #0
    c580:	4770      	bx	lr
    c582:	2001      	movs	r0, #1
    c584:	4770      	bx	lr

0000c586 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    c586:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c58a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c58e:	2810      	cmp	r0, #16
    c590:	d001      	beq.n	c596 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    c592:	2000      	movs	r0, #0
    c594:	4770      	bx	lr
    c596:	2001      	movs	r0, #1
    c598:	4770      	bx	lr

0000c59a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    c59a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c59e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c5a2:	2806      	cmp	r0, #6
    c5a4:	d003      	beq.n	c5ae <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c5a6:	1c40      	adds	r0, r0, #1
    c5a8:	d001      	beq.n	c5ae <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c5aa:	2000      	movs	r0, #0
    c5ac:	4770      	bx	lr
    c5ae:	2001      	movs	r0, #1
    c5b0:	4770      	bx	lr

0000c5b2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    c5b2:	b500      	push	{lr}
    c5b4:	f7ff fff1 	bl	c59a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c5b8:	b148      	cbz	r0, c5ce <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c5ba:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c5be:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c5c2:	2806      	cmp	r0, #6
    c5c4:	d303      	bcc.n	c5ce <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c5c6:	1c40      	adds	r0, r0, #1
    c5c8:	d001      	beq.n	c5ce <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c5ca:	2001      	movs	r0, #1
    c5cc:	bd00      	pop	{pc}
    c5ce:	2000      	movs	r0, #0
    c5d0:	bd00      	pop	{pc}

0000c5d2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    c5d2:	b500      	push	{lr}
    c5d4:	f7ff ffe1 	bl	c59a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c5d8:	b138      	cbz	r0, c5ea <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    c5da:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c5de:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c5e2:	2806      	cmp	r0, #6
    c5e4:	d303      	bcc.n	c5ee <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c5e6:	1c40      	adds	r0, r0, #1
    c5e8:	d001      	beq.n	c5ee <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c5ea:	2000      	movs	r0, #0
    c5ec:	bd00      	pop	{pc}
    c5ee:	2001      	movs	r0, #1
    c5f0:	bd00      	pop	{pc}

0000c5f2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    c5f2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c5f6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c5fa:	280d      	cmp	r0, #13
    c5fc:	d001      	beq.n	c602 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    c5fe:	2000      	movs	r0, #0
    c600:	4770      	bx	lr
    c602:	2001      	movs	r0, #1
    c604:	4770      	bx	lr

0000c606 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    c606:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c60a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c60e:	2808      	cmp	r0, #8
    c610:	d001      	beq.n	c616 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    c612:	2000      	movs	r0, #0
    c614:	4770      	bx	lr
    c616:	2001      	movs	r0, #1
    c618:	4770      	bx	lr

0000c61a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    c61a:	2a00      	cmp	r2, #0
    c61c:	bf04      	itt	eq
    c61e:	2000      	moveq	r0, #0
    c620:	4770      	bxeq	lr
    c622:	1e52      	subs	r2, r2, #1
    c624:	d007      	beq.n	c636 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    c626:	7803      	ldrb	r3, [r0, #0]
    c628:	f891 c000 	ldrb.w	ip, [r1]
    c62c:	4563      	cmp	r3, ip
    c62e:	bf04      	itt	eq
    c630:	1c40      	addeq	r0, r0, #1
    c632:	1c49      	addeq	r1, r1, #1
    c634:	d0f5      	beq.n	c622 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    c636:	7800      	ldrb	r0, [r0, #0]
    c638:	7809      	ldrb	r1, [r1, #0]
    c63a:	1a40      	subs	r0, r0, r1
    c63c:	4770      	bx	lr

0000c63e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    c63e:	b4f0      	push	{r4, r5, r6, r7}
    c640:	ea80 0c01 	eor.w	ip, r0, r1
    c644:	4603      	mov	r3, r0
    c646:	f01c 0f03 	tst.w	ip, #3
    c64a:	d13c      	bne.n	c6c6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c64c:	f013 0f03 	tst.w	r3, #3
    c650:	d00b      	beq.n	c66a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    c652:	2a00      	cmp	r2, #0
    c654:	bf04      	itt	eq
    c656:	bcf0      	popeq	{r4, r5, r6, r7}
    c658:	4770      	bxeq	lr
    c65a:	f811 cb01 	ldrb.w	ip, [r1], #1
    c65e:	f803 cb01 	strb.w	ip, [r3], #1
    c662:	1e52      	subs	r2, r2, #1
    c664:	f013 0f03 	tst.w	r3, #3
    c668:	d1f3      	bne.n	c652 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    c66a:	2a03      	cmp	r2, #3
    c66c:	d94f      	bls.n	c70e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c66e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c672:	d24c      	bcs.n	c70e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c674:	f1c2 0c00 	rsb	ip, r2, #0
    c678:	ea4f 74ec 	mov.w	r4, ip, asr #31
    c67c:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    c680:	ea4f 0cac 	mov.w	ip, ip, asr #2
    c684:	f1cc 0c00 	rsb	ip, ip, #0
    c688:	f1bc 0f00 	cmp.w	ip, #0
    c68c:	dd1b      	ble.n	c6c6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c68e:	1f0d      	subs	r5, r1, #4
    c690:	1f1c      	subs	r4, r3, #4
    c692:	f01c 0f01 	tst.w	ip, #1
    c696:	d003      	beq.n	c6a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    c698:	f855 6f04 	ldr.w	r6, [r5, #4]!
    c69c:	f844 6f04 	str.w	r6, [r4, #4]!
    c6a0:	ea5f 066c 	movs.w	r6, ip, asr #1
    c6a4:	d007      	beq.n	c6b6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    c6a6:	686f      	ldr	r7, [r5, #4]
    c6a8:	6067      	str	r7, [r4, #4]
    c6aa:	f855 7f08 	ldr.w	r7, [r5, #8]!
    c6ae:	f844 7f08 	str.w	r7, [r4, #8]!
    c6b2:	1e76      	subs	r6, r6, #1
    c6b4:	d1f7      	bne.n	c6a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    c6b6:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    c6ba:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    c6be:	f1cc 0c00 	rsb	ip, ip, #0
    c6c2:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    c6c6:	2a00      	cmp	r2, #0
    c6c8:	bf04      	itt	eq
    c6ca:	bcf0      	popeq	{r4, r5, r6, r7}
    c6cc:	4770      	bxeq	lr
    c6ce:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c6d2:	d226      	bcs.n	c722 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c6d4:	2a00      	cmp	r2, #0
    c6d6:	bfdc      	itt	le
    c6d8:	bcf0      	pople	{r4, r5, r6, r7}
    c6da:	4770      	bxle	lr
    c6dc:	1e49      	subs	r1, r1, #1
    c6de:	1e5b      	subs	r3, r3, #1
    c6e0:	f012 0f01 	tst.w	r2, #1
    c6e4:	d003      	beq.n	c6ee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    c6e6:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    c6ea:	f803 cf01 	strb.w	ip, [r3, #1]!
    c6ee:	1052      	asrs	r2, r2, #1
    c6f0:	bf04      	itt	eq
    c6f2:	bcf0      	popeq	{r4, r5, r6, r7}
    c6f4:	4770      	bxeq	lr
    c6f6:	f891 c001 	ldrb.w	ip, [r1, #1]
    c6fa:	f883 c001 	strb.w	ip, [r3, #1]
    c6fe:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    c702:	f803 cf02 	strb.w	ip, [r3, #2]!
    c706:	1e52      	subs	r2, r2, #1
    c708:	d1f5      	bne.n	c6f6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    c70a:	bcf0      	pop	{r4, r5, r6, r7}
    c70c:	4770      	bx	lr
    c70e:	2a04      	cmp	r2, #4
    c710:	d3d9      	bcc.n	c6c6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c712:	f851 cb04 	ldr.w	ip, [r1], #4
    c716:	1f12      	subs	r2, r2, #4
    c718:	f843 cb04 	str.w	ip, [r3], #4
    c71c:	2a04      	cmp	r2, #4
    c71e:	d2f8      	bcs.n	c712 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    c720:	e7d1      	b.n	c6c6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c722:	f811 cb01 	ldrb.w	ip, [r1], #1
    c726:	f803 cb01 	strb.w	ip, [r3], #1
    c72a:	1e52      	subs	r2, r2, #1
    c72c:	d1f9      	bne.n	c722 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c72e:	bcf0      	pop	{r4, r5, r6, r7}
    c730:	4770      	bx	lr

0000c732 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    c732:	b470      	push	{r4, r5, r6}
    c734:	4603      	mov	r3, r0
    c736:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    c73a:	f010 0f03 	tst.w	r0, #3
    c73e:	d009      	beq.n	c754 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    c740:	2a00      	cmp	r2, #0
    c742:	bf04      	itt	eq
    c744:	bc70      	popeq	{r4, r5, r6}
    c746:	4770      	bxeq	lr
    c748:	f803 cb01 	strb.w	ip, [r3], #1
    c74c:	1e52      	subs	r2, r2, #1
    c74e:	f013 0f03 	tst.w	r3, #3
    c752:	d1f5      	bne.n	c740 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    c754:	b2c9      	uxtb	r1, r1
    c756:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c75a:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    c75e:	2a03      	cmp	r2, #3
    c760:	d939      	bls.n	c7d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c762:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c766:	d236      	bcs.n	c7d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c768:	4251      	negs	r1, r2
    c76a:	17cc      	asrs	r4, r1, #31
    c76c:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    c770:	1089      	asrs	r1, r1, #2
    c772:	424e      	negs	r6, r1
    c774:	2e00      	cmp	r6, #0
    c776:	dd11      	ble.n	c79c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c778:	1f19      	subs	r1, r3, #4
    c77a:	f016 0f01 	tst.w	r6, #1
    c77e:	bf18      	it	ne
    c780:	f841 5f04 	strne.w	r5, [r1, #4]!
    c784:	1074      	asrs	r4, r6, #1
    c786:	d004      	beq.n	c792 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    c788:	604d      	str	r5, [r1, #4]
    c78a:	f841 5f08 	str.w	r5, [r1, #8]!
    c78e:	1e64      	subs	r4, r4, #1
    c790:	d1fa      	bne.n	c788 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    c792:	4271      	negs	r1, r6
    c794:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c798:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    c79c:	2a00      	cmp	r2, #0
    c79e:	bf04      	itt	eq
    c7a0:	bc70      	popeq	{r4, r5, r6}
    c7a2:	4770      	bxeq	lr
    c7a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c7a8:	d21d      	bcs.n	c7e6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c7aa:	2a00      	cmp	r2, #0
    c7ac:	bfdc      	itt	le
    c7ae:	bc70      	pople	{r4, r5, r6}
    c7b0:	4770      	bxle	lr
    c7b2:	1e59      	subs	r1, r3, #1
    c7b4:	f012 0f01 	tst.w	r2, #1
    c7b8:	bf18      	it	ne
    c7ba:	f801 cf01 	strbne.w	ip, [r1, #1]!
    c7be:	1052      	asrs	r2, r2, #1
    c7c0:	bf04      	itt	eq
    c7c2:	bc70      	popeq	{r4, r5, r6}
    c7c4:	4770      	bxeq	lr
    c7c6:	f881 c001 	strb.w	ip, [r1, #1]
    c7ca:	f801 cf02 	strb.w	ip, [r1, #2]!
    c7ce:	1e52      	subs	r2, r2, #1
    c7d0:	d1f9      	bne.n	c7c6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    c7d2:	bc70      	pop	{r4, r5, r6}
    c7d4:	4770      	bx	lr
    c7d6:	2a04      	cmp	r2, #4
    c7d8:	d3e0      	bcc.n	c79c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c7da:	1f12      	subs	r2, r2, #4
    c7dc:	f843 5b04 	str.w	r5, [r3], #4
    c7e0:	2a04      	cmp	r2, #4
    c7e2:	d2fa      	bcs.n	c7da <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    c7e4:	e7da      	b.n	c79c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c7e6:	f803 cb01 	strb.w	ip, [r3], #1
    c7ea:	1e52      	subs	r2, r2, #1
    c7ec:	d1fb      	bne.n	c7e6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c7ee:	bc70      	pop	{r4, r5, r6}
    c7f0:	4770      	bx	lr
    c7f2:	f04f 30ff 	mov.w	r0, #4294967295
    c7f6:	4770      	bx	lr
    c7f8:	2000      	movs	r0, #0
    c7fa:	4770      	bx	lr
    c7fc:	2000      	movs	r0, #0
    c7fe:	4770      	bx	lr
    c800:	f04f 30ff 	mov.w	r0, #4294967295
    c804:	4770      	bx	lr
    c806:	4770      	bx	lr
    c808:	4770      	bx	lr
    c80a:	2000      	movs	r0, #0
    c80c:	4770      	bx	lr
    c80e:	f04f 30ff 	mov.w	r0, #4294967295
    c812:	4770      	bx	lr
    c814:	f04f 30ff 	mov.w	r0, #4294967295
    c818:	4770      	bx	lr
    c81a:	2100      	movs	r1, #0
    c81c:	7001      	strb	r1, [r0, #0]
    c81e:	4770      	bx	lr
    c820:	f04f 30ff 	mov.w	r0, #4294967295
    c824:	4770      	bx	lr
    c826:	f04f 30ff 	mov.w	r0, #4294967295
    c82a:	4770      	bx	lr
    c82c:	2000      	movs	r0, #0
    c82e:	4770      	bx	lr
    c830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c832:	4604      	mov	r4, r0
    c834:	f100 0003 	add.w	r0, r0, #3
    c838:	f020 0003 	bic.w	r0, r0, #3
    c83c:	0016      	movs	r6, r2
    c83e:	9000      	str	r0, [sp, #0]
    c840:	460d      	mov	r5, r1
    c842:	788a      	ldrb	r2, [r1, #2]
    c844:	7849      	ldrb	r1, [r1, #1]
    c846:	d000      	beq.n	c84a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x118>
    c848:	2000      	movs	r0, #0
    c84a:	f7f8 fae5 	bl	4e18 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    c84e:	9900      	ldr	r1, [sp, #0]
    c850:	4408      	add	r0, r1
    c852:	9000      	str	r0, [sp, #0]
    c854:	78a9      	ldrb	r1, [r5, #2]
    c856:	b139      	cbz	r1, c868 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x136>
    c858:	89ea      	ldrh	r2, [r5, #14]
    c85a:	b106      	cbz	r6, c85e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x12c>
    c85c:	2000      	movs	r0, #0
    c85e:	f7f8 fd41 	bl	52e4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    c862:	9900      	ldr	r1, [sp, #0]
    c864:	4408      	add	r0, r1
    c866:	9000      	str	r0, [sp, #0]
    c868:	4632      	mov	r2, r6
    c86a:	4629      	mov	r1, r5
    c86c:	4668      	mov	r0, sp
    c86e:	f000 f807 	bl	c880 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x14e>
    c872:	9800      	ldr	r0, [sp, #0]
    c874:	1dc0      	adds	r0, r0, #7
    c876:	f020 0007 	bic.w	r0, r0, #7
    c87a:	9000      	str	r0, [sp, #0]
    c87c:	1b00      	subs	r0, r0, r4
    c87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c884:	4606      	mov	r6, r0
    c886:	460c      	mov	r4, r1
    c888:	7808      	ldrb	r0, [r1, #0]
    c88a:	7849      	ldrb	r1, [r1, #1]
    c88c:	2700      	movs	r7, #0
    c88e:	4408      	add	r0, r1
    c890:	4691      	mov	r9, r2
    c892:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    c896:	463d      	mov	r5, r7
    c898:	e00e      	b.n	c8b8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x186>
    c89a:	79a3      	ldrb	r3, [r4, #6]
    c89c:	2b02      	cmp	r3, #2
    c89e:	d200      	bcs.n	c8a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x170>
    c8a0:	2302      	movs	r3, #2
    c8a2:	7962      	ldrb	r2, [r4, #5]
    c8a4:	2a03      	cmp	r2, #3
    c8a6:	d200      	bcs.n	c8aa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x178>
    c8a8:	2203      	movs	r2, #3
    c8aa:	7921      	ldrb	r1, [r4, #4]
    c8ac:	78e0      	ldrb	r0, [r4, #3]
    c8ae:	f000 fee4 	bl	d67a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c8b2:	1c6d      	adds	r5, r5, #1
    c8b4:	4407      	add	r7, r0
    c8b6:	b2ed      	uxtb	r5, r5
    c8b8:	4545      	cmp	r5, r8
    c8ba:	d3ee      	bcc.n	c89a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x168>
    c8bc:	6830      	ldr	r0, [r6, #0]
    c8be:	1cc0      	adds	r0, r0, #3
    c8c0:	f020 0003 	bic.w	r0, r0, #3
    c8c4:	6030      	str	r0, [r6, #0]
    c8c6:	f1b9 0f00 	cmp.w	r9, #0
    c8ca:	d000      	beq.n	c8ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x19c>
    c8cc:	2000      	movs	r0, #0
    c8ce:	463a      	mov	r2, r7
    c8d0:	4641      	mov	r1, r8
    c8d2:	f7f8 fc79 	bl	51c8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c8d6:	6831      	ldr	r1, [r6, #0]
    c8d8:	4408      	add	r0, r1
    c8da:	6030      	str	r0, [r6, #0]
    c8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c8e0 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    c8e0:	2000      	movs	r0, #0
    c8e2:	4770      	bx	lr

0000c8e4 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    c8e4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    c8e6:	4604      	mov	r4, r0
    c8e8:	1d01      	adds	r1, r0, #4
    c8ea:	4668      	mov	r0, sp
    c8ec:	f7fa f9d0 	bl	6c90 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    c8f0:	2800      	cmp	r0, #0
    c8f2:	d004      	beq.n	c8fe <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    c8f4:	4669      	mov	r1, sp
    c8f6:	4620      	mov	r0, r4
    c8f8:	f000 f848 	bl	c98c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    c8fc:	2001      	movs	r0, #1
    c8fe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000c900 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c900:	b50e      	push	{r1, r2, r3, lr}
    c902:	4601      	mov	r1, r0
    c904:	4668      	mov	r0, sp
    c906:	f000 f827 	bl	c958 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c90a:	4668      	mov	r0, sp
    c90c:	f7fa f9ea 	bl	6ce4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c910:	bd0e      	pop	{r1, r2, r3, pc}

0000c912 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    c912:	b510      	push	{r4, lr}
    c914:	4604      	mov	r4, r0
    c916:	4620      	mov	r0, r4
    c918:	f7f8 f96a 	bl	4bf0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    c91c:	2800      	cmp	r0, #0
    c91e:	d006      	beq.n	c92e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    c920:	78a1      	ldrb	r1, [r4, #2]
    c922:	7820      	ldrb	r0, [r4, #0]
    c924:	f000 f804 	bl	c930 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    c928:	2800      	cmp	r0, #0
    c92a:	d0f4      	beq.n	c916 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    c92c:	2001      	movs	r0, #1
    c92e:	bd10      	pop	{r4, pc}
    c930:	b570      	push	{r4, r5, r6, lr}
    c932:	460c      	mov	r4, r1
    c934:	4605      	mov	r5, r0
    c936:	f7f8 f9cf 	bl	4cd8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c93a:	2800      	cmp	r0, #0
    c93c:	d002      	beq.n	c944 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    c93e:	2d3e      	cmp	r5, #62	; 0x3e
    c940:	d001      	beq.n	c946 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    c942:	2001      	movs	r0, #1
    c944:	bd70      	pop	{r4, r5, r6, pc}
    c946:	2c12      	cmp	r4, #18
    c948:	d004      	beq.n	c954 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    c94a:	4620      	mov	r0, r4
    c94c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c950:	f7f8 b9de 	b.w	4d10 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c954:	2000      	movs	r0, #0
    c956:	bd70      	pop	{r4, r5, r6, pc}

0000c958 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c958:	880a      	ldrh	r2, [r1, #0]
    c95a:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c95e:	8002      	strh	r2, [r0, #0]
    c960:	884a      	ldrh	r2, [r1, #2]
    c962:	8042      	strh	r2, [r0, #2]
    c964:	784a      	ldrb	r2, [r1, #1]
    c966:	0993      	lsrs	r3, r2, #6
    c968:	2200      	movs	r2, #0
    c96a:	7142      	strb	r2, [r0, #5]
    c96c:	784b      	ldrb	r3, [r1, #1]
    c96e:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c972:	b11b      	cbz	r3, c97c <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c974:	2b01      	cmp	r3, #1
    c976:	d005      	beq.n	c984 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c978:	2b02      	cmp	r3, #2
    c97a:	d005      	beq.n	c988 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c97c:	7102      	strb	r2, [r0, #4]
    c97e:	1d09      	adds	r1, r1, #4
    c980:	6081      	str	r1, [r0, #8]
    c982:	4770      	bx	lr
    c984:	2201      	movs	r2, #1
    c986:	e7f9      	b.n	c97c <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c988:	2202      	movs	r2, #2
    c98a:	e7f7      	b.n	c97c <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c98c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c98c:	b510      	push	{r4, lr}
    c98e:	460c      	mov	r4, r1
    c990:	7809      	ldrb	r1, [r1, #0]
    c992:	7001      	strb	r1, [r0, #0]
    c994:	7841      	ldrb	r1, [r0, #1]
    c996:	f021 010f 	bic.w	r1, r1, #15
    c99a:	7041      	strb	r1, [r0, #1]
    c99c:	8822      	ldrh	r2, [r4, #0]
    c99e:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c9a2:	4311      	orrs	r1, r2
    c9a4:	7041      	strb	r1, [r0, #1]
    c9a6:	78a2      	ldrb	r2, [r4, #2]
    c9a8:	7082      	strb	r2, [r0, #2]
    c9aa:	8862      	ldrh	r2, [r4, #2]
    c9ac:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    c9b0:	0a12      	lsrs	r2, r2, #8
    c9b2:	70c2      	strb	r2, [r0, #3]
    c9b4:	7041      	strb	r1, [r0, #1]
    c9b6:	7922      	ldrb	r2, [r4, #4]
    c9b8:	f002 0203 	and.w	r2, r2, #3
    c9bc:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c9c0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    c9c4:	7041      	strb	r1, [r0, #1]
    c9c6:	7962      	ldrb	r2, [r4, #5]
    c9c8:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c9cc:	7041      	strb	r1, [r0, #1]
    c9ce:	68a1      	ldr	r1, [r4, #8]
    c9d0:	1d02      	adds	r2, r0, #4
    c9d2:	4291      	cmp	r1, r2
    c9d4:	d006      	beq.n	c9e4 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    c9d6:	8862      	ldrh	r2, [r4, #2]
    c9d8:	2afb      	cmp	r2, #251	; 0xfb
    c9da:	d300      	bcc.n	c9de <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    c9dc:	22fb      	movs	r2, #251	; 0xfb
    c9de:	1d00      	adds	r0, r0, #4
    c9e0:	f7ff fe2d 	bl	c63e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c9e4:	78a0      	ldrb	r0, [r4, #2]
    c9e6:	1d00      	adds	r0, r0, #4
    c9e8:	b2c0      	uxtb	r0, r0
    c9ea:	bd10      	pop	{r4, pc}

0000c9ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9f0:	4604      	mov	r4, r0
    c9f2:	780f      	ldrb	r7, [r1, #0]
    c9f4:	2000      	movs	r0, #0
    c9f6:	250c      	movs	r5, #12
    c9f8:	2605      	movs	r6, #5
    c9fa:	223e      	movs	r2, #62	; 0x3e
    c9fc:	23ff      	movs	r3, #255	; 0xff
    c9fe:	2f1b      	cmp	r7, #27
    ca00:	d27d      	bcs.n	cafe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    ca02:	e8df f007 	tbb	[pc, r7]
    ca06:	0eeb      	.short	0x0eeb
    ca08:	632d2725 	.word	0x632d2725
    ca0c:	af9b816d 	.word	0xaf9b816d
    ca10:	e2c7bcb1 	.word	0xe2c7bcb1
    ca14:	31ebebf5 	.word	0x31ebebf5
    ca18:	f2fed5d2 	.word	0xf2fed5d2
    ca1c:	eeeff0f1 	.word	0xeeeff0f1
    ca20:	00ed      	.short	0x00ed
    ca22:	7025      	strb	r5, [r4, #0]
    ca24:	7908      	ldrb	r0, [r1, #4]
    ca26:	70a0      	strb	r0, [r4, #2]
    ca28:	7948      	ldrb	r0, [r1, #5]
    ca2a:	70e0      	strb	r0, [r4, #3]
    ca2c:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    ca30:	0a00      	lsrs	r0, r0, #8
    ca32:	7120      	strb	r0, [r4, #4]
    ca34:	79c8      	ldrb	r0, [r1, #7]
    ca36:	7160      	strb	r0, [r4, #5]
    ca38:	7a08      	ldrb	r0, [r1, #8]
    ca3a:	71a0      	strb	r0, [r4, #6]
    ca3c:	8908      	ldrh	r0, [r1, #8]
    ca3e:	0a00      	lsrs	r0, r0, #8
    ca40:	71e0      	strb	r0, [r4, #7]
    ca42:	7a88      	ldrb	r0, [r1, #10]
    ca44:	7220      	strb	r0, [r4, #8]
    ca46:	8948      	ldrh	r0, [r1, #10]
    ca48:	0a00      	lsrs	r0, r0, #8
    ca4a:	7260      	strb	r0, [r4, #9]
    ca4c:	2008      	movs	r0, #8
    ca4e:	e0c2      	b.n	cbd6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    ca50:	2010      	movs	r0, #16
    ca52:	e000      	b.n	ca56 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    ca54:	201a      	movs	r0, #26
    ca56:	7020      	strb	r0, [r4, #0]
    ca58:	7908      	ldrb	r0, [r1, #4]
    ca5a:	70a0      	strb	r0, [r4, #2]
    ca5c:	2001      	movs	r0, #1
    ca5e:	e0ba      	b.n	cbd6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    ca60:	4620      	mov	r0, r4
    ca62:	f000 f947 	bl	ccf4 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    ca66:	e0b4      	b.n	cbd2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e6>
    ca68:	7022      	strb	r2, [r4, #0]
    ca6a:	200a      	movs	r0, #10
    ca6c:	70a0      	strb	r0, [r4, #2]
    ca6e:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    ca72:	70e0      	strb	r0, [r4, #3]
    ca74:	7888      	ldrb	r0, [r1, #2]
    ca76:	7120      	strb	r0, [r4, #4]
    ca78:	8848      	ldrh	r0, [r1, #2]
    ca7a:	0a00      	lsrs	r0, r0, #8
    ca7c:	7160      	strb	r0, [r4, #5]
    ca7e:	7908      	ldrb	r0, [r1, #4]
    ca80:	71a0      	strb	r0, [r4, #6]
    ca82:	7948      	ldrb	r0, [r1, #5]
    ca84:	71e0      	strb	r0, [r4, #7]
    ca86:	f8d1 0006 	ldr.w	r0, [r1, #6]
    ca8a:	60a0      	str	r0, [r4, #8]
    ca8c:	8948      	ldrh	r0, [r1, #10]
    ca8e:	81a0      	strh	r0, [r4, #12]
    ca90:	68c8      	ldr	r0, [r1, #12]
    ca92:	f8c4 000e 	str.w	r0, [r4, #14]
    ca96:	8a08      	ldrh	r0, [r1, #16]
    ca98:	8260      	strh	r0, [r4, #18]
    ca9a:	f8d1 0012 	ldr.w	r0, [r1, #18]
    ca9e:	6160      	str	r0, [r4, #20]
    caa0:	8ac8      	ldrh	r0, [r1, #22]
    caa2:	8320      	strh	r0, [r4, #24]
    caa4:	7e08      	ldrb	r0, [r1, #24]
    caa6:	76a0      	strb	r0, [r4, #26]
    caa8:	8b08      	ldrh	r0, [r1, #24]
    caaa:	0a00      	lsrs	r0, r0, #8
    caac:	76e0      	strb	r0, [r4, #27]
    caae:	7e88      	ldrb	r0, [r1, #26]
    cab0:	7720      	strb	r0, [r4, #28]
    cab2:	8b48      	ldrh	r0, [r1, #26]
    cab4:	0a00      	lsrs	r0, r0, #8
    cab6:	7760      	strb	r0, [r4, #29]
    cab8:	7f08      	ldrb	r0, [r1, #28]
    caba:	77a0      	strb	r0, [r4, #30]
    cabc:	8b88      	ldrh	r0, [r1, #28]
    cabe:	0a00      	lsrs	r0, r0, #8
    cac0:	77e0      	strb	r0, [r4, #31]
    cac2:	7f88      	ldrb	r0, [r1, #30]
    cac4:	f884 0020 	strb.w	r0, [r4, #32]
    cac8:	201f      	movs	r0, #31
    caca:	e084      	b.n	cbd6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cacc:	7022      	strb	r2, [r4, #0]
    cace:	2014      	movs	r0, #20
    cad0:	70a0      	strb	r0, [r4, #2]
    cad2:	7908      	ldrb	r0, [r1, #4]
    cad4:	70e0      	strb	r0, [r4, #3]
    cad6:	8888      	ldrh	r0, [r1, #4]
    cad8:	0a00      	lsrs	r0, r0, #8
    cada:	7120      	strb	r0, [r4, #4]
    cadc:	7988      	ldrb	r0, [r1, #6]
    cade:	e0a8      	b.n	cc32 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    cae0:	7022      	strb	r2, [r4, #0]
    cae2:	2004      	movs	r0, #4
    cae4:	70a0      	strb	r0, [r4, #2]
    cae6:	7908      	ldrb	r0, [r1, #4]
    cae8:	70e0      	strb	r0, [r4, #3]
    caea:	7988      	ldrb	r0, [r1, #6]
    caec:	7120      	strb	r0, [r4, #4]
    caee:	88c8      	ldrh	r0, [r1, #6]
    caf0:	0a00      	lsrs	r0, r0, #8
    caf2:	7160      	strb	r0, [r4, #5]
    caf4:	6888      	ldr	r0, [r1, #8]
    caf6:	f8c4 0006 	str.w	r0, [r4, #6]
    cafa:	68c8      	ldr	r0, [r1, #12]
    cafc:	e000      	b.n	cb00 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    cafe:	e06d      	b.n	cbdc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    cb00:	f8c4 000a 	str.w	r0, [r4, #10]
    cb04:	200c      	movs	r0, #12
    cb06:	e066      	b.n	cbd6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cb08:	7022      	strb	r2, [r4, #0]
    cb0a:	2003      	movs	r0, #3
    cb0c:	70a0      	strb	r0, [r4, #2]
    cb0e:	7908      	ldrb	r0, [r1, #4]
    cb10:	70e0      	strb	r0, [r4, #3]
    cb12:	7988      	ldrb	r0, [r1, #6]
    cb14:	7120      	strb	r0, [r4, #4]
    cb16:	88c8      	ldrh	r0, [r1, #6]
    cb18:	0a00      	lsrs	r0, r0, #8
    cb1a:	7160      	strb	r0, [r4, #5]
    cb1c:	7a08      	ldrb	r0, [r1, #8]
    cb1e:	71a0      	strb	r0, [r4, #6]
    cb20:	8908      	ldrh	r0, [r1, #8]
    cb22:	0a00      	lsrs	r0, r0, #8
    cb24:	71e0      	strb	r0, [r4, #7]
    cb26:	7a88      	ldrb	r0, [r1, #10]
    cb28:	7220      	strb	r0, [r4, #8]
    cb2a:	8948      	ldrh	r0, [r1, #10]
    cb2c:	0a00      	lsrs	r0, r0, #8
    cb2e:	7260      	strb	r0, [r4, #9]
    cb30:	7b08      	ldrb	r0, [r1, #12]
    cb32:	72a0      	strb	r0, [r4, #10]
    cb34:	8988      	ldrh	r0, [r1, #12]
    cb36:	0a00      	lsrs	r0, r0, #8
    cb38:	72e0      	strb	r0, [r4, #11]
    cb3a:	e0d9      	b.n	ccf0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    cb3c:	7022      	strb	r2, [r4, #0]
    cb3e:	70a6      	strb	r6, [r4, #2]
    cb40:	7908      	ldrb	r0, [r1, #4]
    cb42:	70e0      	strb	r0, [r4, #3]
    cb44:	8888      	ldrh	r0, [r1, #4]
    cb46:	0a00      	lsrs	r0, r0, #8
    cb48:	7120      	strb	r0, [r4, #4]
    cb4a:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cb4e:	f8c4 0005 	str.w	r0, [r4, #5]
    cb52:	f8d1 000a 	ldr.w	r0, [r1, #10]
    cb56:	f8c4 0009 	str.w	r0, [r4, #9]
    cb5a:	89c8      	ldrh	r0, [r1, #14]
    cb5c:	f8a4 000d 	strh.w	r0, [r4, #13]
    cb60:	200d      	movs	r0, #13
    cb62:	e038      	b.n	cbd6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cb64:	2011      	movs	r0, #17
    cb66:	e044      	b.n	cbf2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x206>
    cb68:	7026      	strb	r6, [r4, #0]
    cb6a:	7908      	ldrb	r0, [r1, #4]
    cb6c:	70a0      	strb	r0, [r4, #2]
    cb6e:	7948      	ldrb	r0, [r1, #5]
    cb70:	70e0      	strb	r0, [r4, #3]
    cb72:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    cb76:	0a00      	lsrs	r0, r0, #8
    cb78:	7120      	strb	r0, [r4, #4]
    cb7a:	79c8      	ldrb	r0, [r1, #7]
    cb7c:	e059      	b.n	cc32 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    cb7e:	2008      	movs	r0, #8
    cb80:	7020      	strb	r0, [r4, #0]
    cb82:	7908      	ldrb	r0, [r1, #4]
    cb84:	70a0      	strb	r0, [r4, #2]
    cb86:	7988      	ldrb	r0, [r1, #6]
    cb88:	70e0      	strb	r0, [r4, #3]
    cb8a:	88c8      	ldrh	r0, [r1, #6]
    cb8c:	0a00      	lsrs	r0, r0, #8
    cb8e:	7120      	strb	r0, [r4, #4]
    cb90:	7a08      	ldrb	r0, [r1, #8]
    cb92:	e04e      	b.n	cc32 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    cb94:	2030      	movs	r0, #48	; 0x30
    cb96:	7020      	strb	r0, [r4, #0]
    cb98:	7908      	ldrb	r0, [r1, #4]
    cb9a:	70a0      	strb	r0, [r4, #2]
    cb9c:	7988      	ldrb	r0, [r1, #6]
    cb9e:	70e0      	strb	r0, [r4, #3]
    cba0:	88c8      	ldrh	r0, [r1, #6]
    cba2:	0a00      	lsrs	r0, r0, #8
    cba4:	7120      	strb	r0, [r4, #4]
    cba6:	2003      	movs	r0, #3
    cba8:	e015      	b.n	cbd6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cbaa:	7022      	strb	r2, [r4, #0]
    cbac:	2007      	movs	r0, #7
    cbae:	e045      	b.n	cc3c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    cbb0:	7022      	strb	r2, [r4, #0]
    cbb2:	70a5      	strb	r5, [r4, #2]
    cbb4:	7908      	ldrb	r0, [r1, #4]
    cbb6:	70e0      	strb	r0, [r4, #3]
    cbb8:	7988      	ldrb	r0, [r1, #6]
    cbba:	7120      	strb	r0, [r4, #4]
    cbbc:	88c8      	ldrh	r0, [r1, #6]
    cbbe:	0a00      	lsrs	r0, r0, #8
    cbc0:	7160      	strb	r0, [r4, #5]
    cbc2:	7a08      	ldrb	r0, [r1, #8]
    cbc4:	71a0      	strb	r0, [r4, #6]
    cbc6:	7a48      	ldrb	r0, [r1, #9]
    cbc8:	e028      	b.n	cc1c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x230>
    cbca:	4620      	mov	r0, r4
    cbcc:	1d09      	adds	r1, r1, #4
    cbce:	f7f8 f855 	bl	4c7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xdc>
    cbd2:	2800      	cmp	r0, #0
    cbd4:	d002      	beq.n	cbdc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    cbd6:	7060      	strb	r0, [r4, #1]
    cbd8:	1c80      	adds	r0, r0, #2
    cbda:	b2c0      	uxtb	r0, r0
    cbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cbe0:	e073      	b.n	ccca <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2de>
    cbe2:	e047      	b.n	cc74 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    cbe4:	e028      	b.n	cc38 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24c>
    cbe6:	e053      	b.n	cc90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a4>
    cbe8:	e061      	b.n	ccae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c2>
    cbea:	e01a      	b.n	cc22 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x236>
    cbec:	e009      	b.n	cc02 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x216>
    cbee:	e7ff      	b.n	cbf0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    cbf0:	2057      	movs	r0, #87	; 0x57
    cbf2:	7020      	strb	r0, [r4, #0]
    cbf4:	7908      	ldrb	r0, [r1, #4]
    cbf6:	70a0      	strb	r0, [r4, #2]
    cbf8:	8888      	ldrh	r0, [r1, #4]
    cbfa:	0a00      	lsrs	r0, r0, #8
    cbfc:	70e0      	strb	r0, [r4, #3]
    cbfe:	2002      	movs	r0, #2
    cc00:	e7e9      	b.n	cbd6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cc02:	7022      	strb	r2, [r4, #0]
    cc04:	2012      	movs	r0, #18
    cc06:	70a0      	strb	r0, [r4, #2]
    cc08:	7908      	ldrb	r0, [r1, #4]
    cc0a:	70e0      	strb	r0, [r4, #3]
    cc0c:	7948      	ldrb	r0, [r1, #5]
    cc0e:	7120      	strb	r0, [r4, #4]
    cc10:	7988      	ldrb	r0, [r1, #6]
    cc12:	7160      	strb	r0, [r4, #5]
    cc14:	88c8      	ldrh	r0, [r1, #6]
    cc16:	0a00      	lsrs	r0, r0, #8
    cc18:	71a0      	strb	r0, [r4, #6]
    cc1a:	7a08      	ldrb	r0, [r1, #8]
    cc1c:	71e0      	strb	r0, [r4, #7]
    cc1e:	2006      	movs	r0, #6
    cc20:	e7d9      	b.n	cbd6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cc22:	7023      	strb	r3, [r4, #0]
    cc24:	20a1      	movs	r0, #161	; 0xa1
    cc26:	70a0      	strb	r0, [r4, #2]
    cc28:	7908      	ldrb	r0, [r1, #4]
    cc2a:	70e0      	strb	r0, [r4, #3]
    cc2c:	7948      	ldrb	r0, [r1, #5]
    cc2e:	7120      	strb	r0, [r4, #4]
    cc30:	2000      	movs	r0, #0
    cc32:	7160      	strb	r0, [r4, #5]
    cc34:	2004      	movs	r0, #4
    cc36:	e7ce      	b.n	cbd6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cc38:	7023      	strb	r3, [r4, #0]
    cc3a:	20a2      	movs	r0, #162	; 0xa2
    cc3c:	70a0      	strb	r0, [r4, #2]
    cc3e:	7908      	ldrb	r0, [r1, #4]
    cc40:	70e0      	strb	r0, [r4, #3]
    cc42:	8888      	ldrh	r0, [r1, #4]
    cc44:	0a00      	lsrs	r0, r0, #8
    cc46:	7120      	strb	r0, [r4, #4]
    cc48:	7988      	ldrb	r0, [r1, #6]
    cc4a:	7160      	strb	r0, [r4, #5]
    cc4c:	88c8      	ldrh	r0, [r1, #6]
    cc4e:	0a00      	lsrs	r0, r0, #8
    cc50:	71a0      	strb	r0, [r4, #6]
    cc52:	7a08      	ldrb	r0, [r1, #8]
    cc54:	71e0      	strb	r0, [r4, #7]
    cc56:	8908      	ldrh	r0, [r1, #8]
    cc58:	0a00      	lsrs	r0, r0, #8
    cc5a:	7220      	strb	r0, [r4, #8]
    cc5c:	7a88      	ldrb	r0, [r1, #10]
    cc5e:	7260      	strb	r0, [r4, #9]
    cc60:	8948      	ldrh	r0, [r1, #10]
    cc62:	0a00      	lsrs	r0, r0, #8
    cc64:	72a0      	strb	r0, [r4, #10]
    cc66:	7b08      	ldrb	r0, [r1, #12]
    cc68:	72e0      	strb	r0, [r4, #11]
    cc6a:	8988      	ldrh	r0, [r1, #12]
    cc6c:	0a00      	lsrs	r0, r0, #8
    cc6e:	7320      	strb	r0, [r4, #12]
    cc70:	200b      	movs	r0, #11
    cc72:	e7b0      	b.n	cbd6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cc74:	7023      	strb	r3, [r4, #0]
    cc76:	20a3      	movs	r0, #163	; 0xa3
    cc78:	70a0      	strb	r0, [r4, #2]
    cc7a:	7908      	ldrb	r0, [r1, #4]
    cc7c:	70e0      	strb	r0, [r4, #3]
    cc7e:	8888      	ldrh	r0, [r1, #4]
    cc80:	0a00      	lsrs	r0, r0, #8
    cc82:	7120      	strb	r0, [r4, #4]
    cc84:	7988      	ldrb	r0, [r1, #6]
    cc86:	7160      	strb	r0, [r4, #5]
    cc88:	79c8      	ldrb	r0, [r1, #7]
    cc8a:	71a0      	strb	r0, [r4, #6]
    cc8c:	2005      	movs	r0, #5
    cc8e:	e7a2      	b.n	cbd6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cc90:	7022      	strb	r2, [r4, #0]
    cc92:	2013      	movs	r0, #19
    cc94:	70a0      	strb	r0, [r4, #2]
    cc96:	7908      	ldrb	r0, [r1, #4]
    cc98:	70e0      	strb	r0, [r4, #3]
    cc9a:	7948      	ldrb	r0, [r1, #5]
    cc9c:	7120      	strb	r0, [r4, #4]
    cc9e:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cca2:	f8c4 0005 	str.w	r0, [r4, #5]
    cca6:	8948      	ldrh	r0, [r1, #10]
    cca8:	f8a4 0009 	strh.w	r0, [r4, #9]
    ccac:	e020      	b.n	ccf0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    ccae:	7023      	strb	r3, [r4, #0]
    ccb0:	20a4      	movs	r0, #164	; 0xa4
    ccb2:	70a0      	strb	r0, [r4, #2]
    ccb4:	7908      	ldrb	r0, [r1, #4]
    ccb6:	70e0      	strb	r0, [r4, #3]
    ccb8:	8888      	ldrh	r0, [r1, #4]
    ccba:	0a00      	lsrs	r0, r0, #8
    ccbc:	7120      	strb	r0, [r4, #4]
    ccbe:	7988      	ldrb	r0, [r1, #6]
    ccc0:	7160      	strb	r0, [r4, #5]
    ccc2:	79c8      	ldrb	r0, [r1, #7]
    ccc4:	71a0      	strb	r0, [r4, #6]
    ccc6:	2007      	movs	r0, #7
    ccc8:	e785      	b.n	cbd6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    ccca:	7023      	strb	r3, [r4, #0]
    cccc:	2080      	movs	r0, #128	; 0x80
    ccce:	70a0      	strb	r0, [r4, #2]
    ccd0:	888a      	ldrh	r2, [r1, #4]
    ccd2:	f8a4 2003 	strh.w	r2, [r4, #3]
    ccd6:	88ca      	ldrh	r2, [r1, #6]
    ccd8:	f8a4 2005 	strh.w	r2, [r4, #5]
    ccdc:	7a0a      	ldrb	r2, [r1, #8]
    ccde:	71e2      	strb	r2, [r4, #7]
    cce0:	7a4a      	ldrb	r2, [r1, #9]
    cce2:	8122      	strh	r2, [r4, #8]
    cce4:	7a8a      	ldrb	r2, [r1, #10]
    cce6:	72a2      	strb	r2, [r4, #10]
    cce8:	7ac9      	ldrb	r1, [r1, #11]
    ccea:	f001 0101 	and.w	r1, r1, #1
    ccee:	72e1      	strb	r1, [r4, #11]
    ccf0:	200a      	movs	r0, #10
    ccf2:	e770      	b.n	cbd6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>

0000ccf4 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    ccf4:	223e      	movs	r2, #62	; 0x3e
    ccf6:	7002      	strb	r2, [r0, #0]
    ccf8:	2201      	movs	r2, #1
    ccfa:	7082      	strb	r2, [r0, #2]
    ccfc:	790a      	ldrb	r2, [r1, #4]
    ccfe:	70c2      	strb	r2, [r0, #3]
    cd00:	798a      	ldrb	r2, [r1, #6]
    cd02:	7102      	strb	r2, [r0, #4]
    cd04:	88ca      	ldrh	r2, [r1, #6]
    cd06:	0a12      	lsrs	r2, r2, #8
    cd08:	7142      	strb	r2, [r0, #5]
    cd0a:	7a0a      	ldrb	r2, [r1, #8]
    cd0c:	7182      	strb	r2, [r0, #6]
    cd0e:	7a4a      	ldrb	r2, [r1, #9]
    cd10:	71c2      	strb	r2, [r0, #7]
    cd12:	f8d1 200a 	ldr.w	r2, [r1, #10]
    cd16:	6082      	str	r2, [r0, #8]
    cd18:	89ca      	ldrh	r2, [r1, #14]
    cd1a:	8182      	strh	r2, [r0, #12]
    cd1c:	7c0a      	ldrb	r2, [r1, #16]
    cd1e:	7382      	strb	r2, [r0, #14]
    cd20:	8a0a      	ldrh	r2, [r1, #16]
    cd22:	0a12      	lsrs	r2, r2, #8
    cd24:	73c2      	strb	r2, [r0, #15]
    cd26:	7c8a      	ldrb	r2, [r1, #18]
    cd28:	7402      	strb	r2, [r0, #16]
    cd2a:	8a4a      	ldrh	r2, [r1, #18]
    cd2c:	0a12      	lsrs	r2, r2, #8
    cd2e:	7442      	strb	r2, [r0, #17]
    cd30:	7d0a      	ldrb	r2, [r1, #20]
    cd32:	7482      	strb	r2, [r0, #18]
    cd34:	8a8a      	ldrh	r2, [r1, #20]
    cd36:	0a12      	lsrs	r2, r2, #8
    cd38:	74c2      	strb	r2, [r0, #19]
    cd3a:	7d89      	ldrb	r1, [r1, #22]
    cd3c:	7501      	strb	r1, [r0, #20]
    cd3e:	2013      	movs	r0, #19
    cd40:	4770      	bx	lr

0000cd42 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    cd42:	223e      	movs	r2, #62	; 0x3e
    cd44:	7002      	strb	r2, [r0, #0]
    cd46:	2201      	movs	r2, #1
    cd48:	7082      	strb	r2, [r0, #2]
    cd4a:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    cd4e:	70c2      	strb	r2, [r0, #3]
    cd50:	788a      	ldrb	r2, [r1, #2]
    cd52:	7102      	strb	r2, [r0, #4]
    cd54:	884a      	ldrh	r2, [r1, #2]
    cd56:	0a12      	lsrs	r2, r2, #8
    cd58:	7142      	strb	r2, [r0, #5]
    cd5a:	790a      	ldrb	r2, [r1, #4]
    cd5c:	7182      	strb	r2, [r0, #6]
    cd5e:	794a      	ldrb	r2, [r1, #5]
    cd60:	71c2      	strb	r2, [r0, #7]
    cd62:	f8d1 2006 	ldr.w	r2, [r1, #6]
    cd66:	6082      	str	r2, [r0, #8]
    cd68:	894a      	ldrh	r2, [r1, #10]
    cd6a:	8182      	strh	r2, [r0, #12]
    cd6c:	7e0a      	ldrb	r2, [r1, #24]
    cd6e:	7382      	strb	r2, [r0, #14]
    cd70:	8b0a      	ldrh	r2, [r1, #24]
    cd72:	0a12      	lsrs	r2, r2, #8
    cd74:	73c2      	strb	r2, [r0, #15]
    cd76:	7e8a      	ldrb	r2, [r1, #26]
    cd78:	7402      	strb	r2, [r0, #16]
    cd7a:	8b4a      	ldrh	r2, [r1, #26]
    cd7c:	0a12      	lsrs	r2, r2, #8
    cd7e:	7442      	strb	r2, [r0, #17]
    cd80:	7f0a      	ldrb	r2, [r1, #28]
    cd82:	7482      	strb	r2, [r0, #18]
    cd84:	8b8a      	ldrh	r2, [r1, #28]
    cd86:	0a12      	lsrs	r2, r2, #8
    cd88:	74c2      	strb	r2, [r0, #19]
    cd8a:	7f89      	ldrb	r1, [r1, #30]
    cd8c:	7501      	strb	r1, [r0, #20]
    cd8e:	2113      	movs	r1, #19
    cd90:	7041      	strb	r1, [r0, #1]
    cd92:	4608      	mov	r0, r1
    cd94:	4770      	bx	lr

0000cd96 <sdc_hci_data_get>:
    cd96:	b510      	push	{r4, lr}
    cd98:	b120      	cbz	r0, cda4 <sdc_hci_data_get+0xe>
    cd9a:	f7ff fda3 	bl	c8e4 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    cd9e:	b120      	cbz	r0, cdaa <sdc_hci_data_get+0x14>
    cda0:	2000      	movs	r0, #0
    cda2:	bd10      	pop	{r4, pc}
    cda4:	f06f 0015 	mvn.w	r0, #21
    cda8:	bd10      	pop	{r4, pc}
    cdaa:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cdae:	bd10      	pop	{r4, pc}

0000cdb0 <sdc_hci_data_put>:
    cdb0:	b510      	push	{r4, lr}
    cdb2:	f06f 0415 	mvn.w	r4, #21
    cdb6:	b120      	cbz	r0, cdc2 <sdc_hci_data_put+0x12>
    cdb8:	f7ff fda2 	bl	c900 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    cdbc:	b108      	cbz	r0, cdc2 <sdc_hci_data_put+0x12>
    cdbe:	2000      	movs	r0, #0
    cdc0:	bd10      	pop	{r4, pc}
    cdc2:	4620      	mov	r0, r4
    cdc4:	bd10      	pop	{r4, pc}

0000cdc6 <sdc_hci_evt_get>:
    cdc6:	b510      	push	{r4, lr}
    cdc8:	b120      	cbz	r0, cdd4 <sdc_hci_evt_get+0xe>
    cdca:	f7ff fda2 	bl	c912 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    cdce:	b120      	cbz	r0, cdda <sdc_hci_evt_get+0x14>
    cdd0:	2000      	movs	r0, #0
    cdd2:	bd10      	pop	{r4, pc}
    cdd4:	f06f 0015 	mvn.w	r0, #21
    cdd8:	bd10      	pop	{r4, pc}
    cdda:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cdde:	bd10      	pop	{r4, pc}

0000cde0 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    cde0:	f002 bcb7 	b.w	f752 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000cde4 <sdc_hci_cmd_cb_read_transmit_power_level>:
    cde4:	f002 bcf9 	b.w	f7da <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000cde8 <sdc_hci_cmd_cb_set_event_mask>:
    cde8:	b510      	push	{r4, lr}
    cdea:	f7f7 ffa5 	bl	4d38 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    cdee:	2000      	movs	r0, #0
    cdf0:	bd10      	pop	{r4, pc}

0000cdf2 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    cdf2:	b510      	push	{r4, lr}
    cdf4:	f7f7 ffae 	bl	4d54 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    cdf8:	2000      	movs	r0, #0
    cdfa:	bd10      	pop	{r4, pc}

0000cdfc <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    cdfc:	f002 bd09 	b.w	f812 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000ce00 <sdc_hci_cmd_vs_conn_event_extend>:
    ce00:	b508      	push	{r3, lr}
    ce02:	7800      	ldrb	r0, [r0, #0]
    ce04:	f88d 0000 	strb.w	r0, [sp]
    ce08:	4668      	mov	r0, sp
    ce0a:	f002 fc23 	bl	f654 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    ce0e:	bd08      	pop	{r3, pc}

0000ce10 <sdc_hci_cmd_vs_conn_update>:
    ce10:	2001      	movs	r0, #1
    ce12:	4770      	bx	lr

0000ce14 <sdc_hci_cmd_vs_event_length_set>:
    ce14:	f7fd be18 	b.w	aa48 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000ce18 <sdc_hci_cmd_vs_llpm_mode_set>:
    ce18:	2001      	movs	r0, #1
    ce1a:	4770      	bx	lr

0000ce1c <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    ce1c:	7800      	ldrb	r0, [r0, #0]
    ce1e:	b100      	cbz	r0, ce22 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    ce20:	2001      	movs	r0, #1
    ce22:	f002 bb7d 	b.w	f520 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000ce26 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    ce26:	b570      	push	{r4, r5, r6, lr}
    ce28:	4605      	mov	r5, r0
    ce2a:	2210      	movs	r2, #16
    ce2c:	2100      	movs	r1, #0
    ce2e:	f7ff fc80 	bl	c732 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ce32:	2210      	movs	r2, #16
    ce34:	2100      	movs	r1, #0
    ce36:	f105 0010 	add.w	r0, r5, #16
    ce3a:	f7ff fc7a 	bl	c732 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ce3e:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    ce42:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    ce46:	1c40      	adds	r0, r0, #1
    ce48:	d10b      	bne.n	ce62 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    ce4a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    ce4e:	1c40      	adds	r0, r0, #1
    ce50:	d107      	bne.n	ce62 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    ce52:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    ce56:	1c40      	adds	r0, r0, #1
    ce58:	d103      	bne.n	ce62 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    ce5a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    ce5e:	1c40      	adds	r0, r0, #1
    ce60:	d00b      	beq.n	ce7a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    ce62:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    ce66:	6128      	str	r0, [r5, #16]
    ce68:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    ce6c:	6168      	str	r0, [r5, #20]
    ce6e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    ce72:	61a8      	str	r0, [r5, #24]
    ce74:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    ce78:	61e8      	str	r0, [r5, #28]
    ce7a:	2000      	movs	r0, #0
    ce7c:	f7f8 fca6 	bl	57cc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    ce80:	b918      	cbnz	r0, ce8a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    ce82:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    ce86:	07c0      	lsls	r0, r0, #31
    ce88:	d118      	bne.n	cebc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    ce8a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    ce8e:	1c40      	adds	r0, r0, #1
    ce90:	d10b      	bne.n	ceaa <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    ce92:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    ce96:	1c40      	adds	r0, r0, #1
    ce98:	d107      	bne.n	ceaa <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    ce9a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    ce9e:	1c40      	adds	r0, r0, #1
    cea0:	d103      	bne.n	ceaa <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cea2:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    cea6:	1c40      	adds	r0, r0, #1
    cea8:	d008      	beq.n	cebc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    ceaa:	f854 0f90 	ldr.w	r0, [r4, #144]!
    ceae:	6028      	str	r0, [r5, #0]
    ceb0:	6860      	ldr	r0, [r4, #4]
    ceb2:	6068      	str	r0, [r5, #4]
    ceb4:	68a0      	ldr	r0, [r4, #8]
    ceb6:	60a8      	str	r0, [r5, #8]
    ceb8:	68e0      	ldr	r0, [r4, #12]
    ceba:	60e8      	str	r0, [r5, #12]
    cebc:	2000      	movs	r0, #0
    cebe:	bd70      	pop	{r4, r5, r6, pc}

0000cec0 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    cec0:	b570      	push	{r4, r5, r6, lr}
    cec2:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    cec6:	4604      	mov	r4, r0
    cec8:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    cecc:	1c40      	adds	r0, r0, #1
    cece:	d105      	bne.n	cedc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    ced0:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    ced4:	43c0      	mvns	r0, r0
    ced6:	0400      	lsls	r0, r0, #16
    ced8:	0c00      	lsrs	r0, r0, #16
    ceda:	d03a      	beq.n	cf52 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    cedc:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    cee0:	07c0      	lsls	r0, r0, #31
    cee2:	d036      	beq.n	cf52 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    cee4:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    cee8:	f8c4 0001 	str.w	r0, [r4, #1]
    ceec:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    cef0:	f8a4 0005 	strh.w	r0, [r4, #5]
    cef4:	79a0      	ldrb	r0, [r4, #6]
    cef6:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    cefa:	71a0      	strb	r0, [r4, #6]
    cefc:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    cf00:	1c40      	adds	r0, r0, #1
    cf02:	d00f      	beq.n	cf24 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    cf04:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    cf08:	1c40      	adds	r0, r0, #1
    cf0a:	d00b      	beq.n	cf24 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    cf0c:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    cf10:	1c40      	adds	r0, r0, #1
    cf12:	d007      	beq.n	cf24 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    cf14:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    cf18:	1c40      	adds	r0, r0, #1
    cf1a:	d003      	beq.n	cf24 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    cf1c:	2000      	movs	r0, #0
    cf1e:	f7f8 fc55 	bl	57cc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    cf22:	b140      	cbz	r0, cf36 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    cf24:	2210      	movs	r2, #16
    cf26:	2100      	movs	r1, #0
    cf28:	1de0      	adds	r0, r4, #7
    cf2a:	f7ff fc02 	bl	c732 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cf2e:	2001      	movs	r0, #1
    cf30:	7020      	strb	r0, [r4, #0]
    cf32:	2000      	movs	r0, #0
    cf34:	bd70      	pop	{r4, r5, r6, pc}
    cf36:	f855 0f90 	ldr.w	r0, [r5, #144]!
    cf3a:	f8c4 0007 	str.w	r0, [r4, #7]
    cf3e:	6868      	ldr	r0, [r5, #4]
    cf40:	f8c4 000b 	str.w	r0, [r4, #11]
    cf44:	68a8      	ldr	r0, [r5, #8]
    cf46:	f8c4 000f 	str.w	r0, [r4, #15]
    cf4a:	68e8      	ldr	r0, [r5, #12]
    cf4c:	f8c4 0013 	str.w	r0, [r4, #19]
    cf50:	e7ed      	b.n	cf2e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    cf52:	2000      	movs	r0, #0
    cf54:	e7ec      	b.n	cf30 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x70>

0000cf56 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    cf56:	f002 bb63 	b.w	f620 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000cf5a <sdc_hci_cmd_ip_read_bd_addr>:
    cf5a:	f002 bc0b 	b.w	f774 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000cf5e <sdc_hci_cmd_ip_read_local_version_information>:
    cf5e:	f7fd bd81 	b.w	aa64 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000cf62 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    cf62:	f002 b81a 	b.w	ef9a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000cf66 <sdc_hci_cmd_le_add_device_to_white_list>:
    cf66:	f002 b833 	b.w	efd0 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000cf6a <sdc_hci_cmd_le_clear_resolving_list>:
    cf6a:	f002 b848 	b.w	effe <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000cf6e <sdc_hci_cmd_le_clear_white_list>:
    cf6e:	f002 b853 	b.w	f018 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000cf72 <sdc_hci_cmd_le_encrypt>:
    cf72:	f002 b85b 	b.w	f02c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000cf76 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    cf76:	8802      	ldrh	r2, [r0, #0]
    cf78:	800a      	strh	r2, [r1, #0]
    cf7a:	f002 b860 	b.w	f03e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000cf7e <sdc_hci_cmd_le_long_term_key_request_reply>:
    cf7e:	8802      	ldrh	r2, [r0, #0]
    cf80:	800a      	strh	r2, [r1, #0]
    cf82:	f002 b875 	b.w	f070 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000cf86 <sdc_hci_cmd_le_rand>:
    cf86:	f002 b89d 	b.w	f0c4 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000cf8a <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    cf8a:	f002 b8a1 	b.w	f0d0 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000cf8e <sdc_hci_cmd_le_read_buffer_size>:
    cf8e:	f7fd bc91 	b.w	a8b4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000cf92 <sdc_hci_cmd_le_read_channel_map>:
    cf92:	f7fd bc99 	b.w	a8c8 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000cf96 <sdc_hci_cmd_le_read_max_data_length>:
    cf96:	f002 b8a4 	b.w	f0e2 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000cf9a <sdc_hci_cmd_le_read_phy>:
    cf9a:	f7fd bcb7 	b.w	a90c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000cf9e <sdc_hci_cmd_le_read_remote_features>:
    cf9e:	f7fd bcdd 	b.w	a95c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000cfa2 <sdc_hci_cmd_le_read_resolving_list_size>:
    cfa2:	f002 b8ae 	b.w	f102 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000cfa6 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    cfa6:	f7fd bcf9 	b.w	a99c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000cfaa <sdc_hci_cmd_le_read_transmit_power>:
    cfaa:	f002 b8ae 	b.w	f10a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000cfae <sdc_hci_cmd_le_read_white_list_size>:
    cfae:	f002 b8b5 	b.w	f11c <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000cfb2 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    cfb2:	f002 b8b7 	b.w	f124 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000cfb6 <sdc_hci_cmd_le_remove_device_from_white_list>:
    cfb6:	f002 b8ce 	b.w	f156 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000cfba <sdc_hci_cmd_le_set_address_resolution_enable>:
    cfba:	f002 b8e1 	b.w	f180 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000cfbe <sdc_hci_cmd_le_set_adv_data>:
    cfbe:	f002 b8ed 	b.w	f19c <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000cfc2 <sdc_hci_cmd_le_set_adv_enable>:
    cfc2:	f002 b927 	b.w	f214 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000cfc6 <sdc_hci_cmd_le_set_adv_params>:
    cfc6:	f002 b958 	b.w	f27a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000cfca <sdc_hci_cmd_le_set_data_length>:
    cfca:	f002 b9e8 	b.w	f39e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000cfce <sdc_hci_cmd_le_set_default_phy>:
    cfce:	f7fd bcf5 	b.w	a9bc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000cfd2 <sdc_hci_cmd_le_set_event_mask>:
    cfd2:	b510      	push	{r4, lr}
    cfd4:	f7f7 feaa 	bl	4d2c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    cfd8:	2000      	movs	r0, #0
    cfda:	bd10      	pop	{r4, pc}

0000cfdc <sdc_hci_cmd_le_set_phy>:
    cfdc:	f002 ba06 	b.w	f3ec <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000cfe0 <sdc_hci_cmd_le_set_privacy_mode>:
    cfe0:	f002 ba24 	b.w	f42c <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000cfe4 <sdc_hci_cmd_le_set_random_address>:
    cfe4:	f002 ba38 	b.w	f458 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000cfe8 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    cfe8:	f002 ba44 	b.w	f474 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000cfec <sdc_hci_cmd_le_set_scan_response_data>:
    cfec:	f002 ba4b 	b.w	f486 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000cff0 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    cff0:	f002 ba7f 	b.w	f4f2 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000cff4 <sdc_hci_cmd_lc_disconnect>:
    cff4:	f001 bf81 	b.w	eefa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000cff8 <sdc_hci_cmd_lc_read_remote_version_information>:
    cff8:	f002 bbc8 	b.w	f78c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    cffc:	b570      	push	{r4, r5, r6, lr}
    cffe:	880b      	ldrh	r3, [r1, #0]
    d000:	7f04      	ldrb	r4, [r0, #28]
    d002:	f100 0524 	add.w	r5, r0, #36	; 0x24
    d006:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    d00a:	8802      	ldrh	r2, [r0, #0]
    d00c:	4435      	add	r5, r6
    d00e:	1da4      	adds	r4, r4, #6
    d010:	882d      	ldrh	r5, [r5, #0]
    d012:	4422      	add	r2, r4
    d014:	b292      	uxth	r2, r2
    d016:	4425      	add	r5, r4
    d018:	1e54      	subs	r4, r2, #1
    d01a:	442c      	add	r4, r5
    d01c:	fb94 f4f2 	sdiv	r4, r4, r2
    d020:	fb02 6204 	mla	r2, r2, r4, r6
    d024:	8840      	ldrh	r0, [r0, #2]
    d026:	b292      	uxth	r2, r2
    d028:	4290      	cmp	r0, r2
    d02a:	d903      	bls.n	d034 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d02c:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d030:	4310      	orrs	r0, r2
    d032:	e002      	b.n	d03a <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d034:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d038:	4398      	bics	r0, r3
    d03a:	8008      	strh	r0, [r1, #0]
    d03c:	bd70      	pop	{r4, r5, r6, pc}
    d03e:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    d042:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d046:	429a      	cmp	r2, r3
    d048:	d107      	bne.n	d05a <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d04a:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d04e:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d052:	4288      	cmp	r0, r1
    d054:	d001      	beq.n	d05a <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d056:	2001      	movs	r0, #1
    d058:	4770      	bx	lr
    d05a:	2000      	movs	r0, #0
    d05c:	4770      	bx	lr

0000d05e <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    d05e:	b570      	push	{r4, r5, r6, lr}
    d060:	7f00      	ldrb	r0, [r0, #28]
    d062:	461c      	mov	r4, r3
    d064:	1d80      	adds	r0, r0, #6
    d066:	4408      	add	r0, r1
    d068:	4613      	mov	r3, r2
    d06a:	8809      	ldrh	r1, [r1, #0]
    d06c:	9a04      	ldr	r2, [sp, #16]
    d06e:	1cc9      	adds	r1, r1, #3
    d070:	b289      	uxth	r1, r1
    d072:	1915      	adds	r5, r2, r4
    d074:	1ec0      	subs	r0, r0, #3
    d076:	428d      	cmp	r5, r1
    d078:	d805      	bhi.n	d086 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    d07a:	1881      	adds	r1, r0, r2
    d07c:	4622      	mov	r2, r4
    d07e:	4618      	mov	r0, r3
    d080:	f7ff fadd 	bl	c63e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d084:	e000      	b.n	d088 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    d086:	2400      	movs	r4, #0
    d088:	4620      	mov	r0, r4
    d08a:	bd70      	pop	{r4, r5, r6, pc}

0000d08c <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    d08c:	b570      	push	{r4, r5, r6, lr}
    d08e:	7f00      	ldrb	r0, [r0, #28]
    d090:	461c      	mov	r4, r3
    d092:	1d80      	adds	r0, r0, #6
    d094:	4408      	add	r0, r1
    d096:	4613      	mov	r3, r2
    d098:	8809      	ldrh	r1, [r1, #0]
    d09a:	9a04      	ldr	r2, [sp, #16]
    d09c:	1cc9      	adds	r1, r1, #3
    d09e:	b289      	uxth	r1, r1
    d0a0:	1915      	adds	r5, r2, r4
    d0a2:	1ec0      	subs	r0, r0, #3
    d0a4:	428d      	cmp	r5, r1
    d0a6:	d805      	bhi.n	d0b4 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    d0a8:	4410      	add	r0, r2
    d0aa:	4622      	mov	r2, r4
    d0ac:	4619      	mov	r1, r3
    d0ae:	f7ff fac6 	bl	c63e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d0b2:	e000      	b.n	d0b6 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    d0b4:	2400      	movs	r4, #0
    d0b6:	4620      	mov	r0, r4
    d0b8:	bd70      	pop	{r4, r5, r6, pc}

0000d0ba <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d0ba:	8881      	ldrh	r1, [r0, #4]
    d0bc:	88c0      	ldrh	r0, [r0, #6]
    d0be:	4288      	cmp	r0, r1
    d0c0:	d101      	bne.n	d0c6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d0c2:	2001      	movs	r0, #1
    d0c4:	4770      	bx	lr
    d0c6:	2000      	movs	r0, #0
    d0c8:	4770      	bx	lr

0000d0ca <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    d0ca:	8881      	ldrh	r1, [r0, #4]
    d0cc:	8900      	ldrh	r0, [r0, #8]
    d0ce:	4288      	cmp	r0, r1
    d0d0:	d101      	bne.n	d0d6 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    d0d2:	2001      	movs	r0, #1
    d0d4:	4770      	bx	lr
    d0d6:	2000      	movs	r0, #0
    d0d8:	4770      	bx	lr

0000d0da <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d0da:	b570      	push	{r4, r5, r6, lr}
    d0dc:	4604      	mov	r4, r0
    d0de:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d0e2:	8880      	ldrh	r0, [r0, #4]
    d0e4:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d0e8:	4401      	add	r1, r0
    d0ea:	8a20      	ldrh	r0, [r4, #16]
    d0ec:	2800      	cmp	r0, #0
    d0ee:	d01a      	beq.n	d126 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d0f0:	89a2      	ldrh	r2, [r4, #12]
    d0f2:	2500      	movs	r5, #0
    d0f4:	4410      	add	r0, r2
    d0f6:	b280      	uxth	r0, r0
    d0f8:	81a0      	strh	r0, [r4, #12]
    d0fa:	880a      	ldrh	r2, [r1, #0]
    d0fc:	4290      	cmp	r0, r2
    d0fe:	d905      	bls.n	d10c <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    d100:	f44f 71a5 	mov.w	r1, #330	; 0x14a
    d104:	f04f 0014 	mov.w	r0, #20
    d108:	f7f7 fc72 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d10c:	d109      	bne.n	d122 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d10e:	69a0      	ldr	r0, [r4, #24]
    d110:	b108      	cbz	r0, d116 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    d112:	7f40      	ldrb	r0, [r0, #29]
    d114:	7088      	strb	r0, [r1, #2]
    d116:	f104 0104 	add.w	r1, r4, #4
    d11a:	4620      	mov	r0, r4
    d11c:	f7ff ff6e 	bl	cffc <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d120:	81a5      	strh	r5, [r4, #12]
    d122:	8225      	strh	r5, [r4, #16]
    d124:	2001      	movs	r0, #1
    d126:	bd70      	pop	{r4, r5, r6, pc}

0000d128 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d12c:	4604      	mov	r4, r0
    d12e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    d132:	88c0      	ldrh	r0, [r0, #6]
    d134:	460e      	mov	r6, r1
    d136:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d13a:	8a60      	ldrh	r0, [r4, #18]
    d13c:	19d9      	adds	r1, r3, r7
    d13e:	b108      	cbz	r0, d144 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    d140:	42b0      	cmp	r0, r6
    d142:	d202      	bcs.n	d14a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    d144:	2000      	movs	r0, #0
    d146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d14a:	89e0      	ldrh	r0, [r4, #14]
    d14c:	2500      	movs	r5, #0
    d14e:	b140      	cbz	r0, d162 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    d150:	f8b1 c000 	ldrh.w	ip, [r1]
    d154:	4560      	cmp	r0, ip
    d156:	d008      	beq.n	d16a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x42>
    d158:	f240 211f 	movw	r1, #543	; 0x21f
    d15c:	2014      	movs	r0, #20
    d15e:	f7f7 fc47 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d162:	7f60      	ldrb	r0, [r4, #29]
    d164:	7088      	strb	r0, [r1, #2]
    d166:	800d      	strh	r5, [r1, #0]
    d168:	e00e      	b.n	d188 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x60>
    d16a:	f894 c01c 	ldrb.w	ip, [r4, #28]
    d16e:	4418      	add	r0, r3
    d170:	f10c 0c06 	add.w	ip, ip, #6
    d174:	44bc      	add	ip, r7
    d176:	4460      	add	r0, ip
    d178:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    d17c:	f820 cc03 	strh.w	ip, [r0, #-3]
    d180:	f894 c020 	ldrb.w	ip, [r4, #32]
    d184:	f800 cc01 	strb.w	ip, [r0, #-1]
    d188:	89e0      	ldrh	r0, [r4, #14]
    d18a:	4430      	add	r0, r6
    d18c:	81e0      	strh	r0, [r4, #14]
    d18e:	8808      	ldrh	r0, [r1, #0]
    d190:	4430      	add	r0, r6
    d192:	8008      	strh	r0, [r1, #0]
    d194:	b16a      	cbz	r2, d1b2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8a>
    d196:	1da1      	adds	r1, r4, #6
    d198:	4620      	mov	r0, r4
    d19a:	f7ff ff2f 	bl	cffc <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d19e:	81e5      	strh	r5, [r4, #14]
    d1a0:	7f60      	ldrb	r0, [r4, #29]
    d1a2:	1c40      	adds	r0, r0, #1
    d1a4:	7760      	strb	r0, [r4, #29]
    d1a6:	7da0      	ldrb	r0, [r4, #22]
    d1a8:	b108      	cbz	r0, d1ae <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x86>
    d1aa:	88e0      	ldrh	r0, [r4, #6]
    d1ac:	82a0      	strh	r0, [r4, #20]
    d1ae:	75a5      	strb	r5, [r4, #22]
    d1b0:	e00b      	b.n	d1ca <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xa2>
    d1b2:	7f20      	ldrb	r0, [r4, #28]
    d1b4:	89e1      	ldrh	r1, [r4, #14]
    d1b6:	1d80      	adds	r0, r0, #6
    d1b8:	4438      	add	r0, r7
    d1ba:	4419      	add	r1, r3
    d1bc:	4408      	add	r0, r1
    d1be:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d1c2:	83e1      	strh	r1, [r4, #30]
    d1c4:	7880      	ldrb	r0, [r0, #2]
    d1c6:	f884 0020 	strb.w	r0, [r4, #32]
    d1ca:	8265      	strh	r5, [r4, #18]
    d1cc:	75e5      	strb	r5, [r4, #23]
    d1ce:	2001      	movs	r0, #1
    d1d0:	e7b9      	b.n	d146 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d1d2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d1d2:	b510      	push	{r4, lr}
    d1d4:	4604      	mov	r4, r0
    d1d6:	88c0      	ldrh	r0, [r0, #6]
    d1d8:	88a1      	ldrh	r1, [r4, #4]
    d1da:	4281      	cmp	r1, r0
    d1dc:	d007      	beq.n	d1ee <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d1de:	89a0      	ldrh	r0, [r4, #12]
    d1e0:	b928      	cbnz	r0, d1ee <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d1e2:	8a20      	ldrh	r0, [r4, #16]
    d1e4:	b918      	cbnz	r0, d1ee <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d1e6:	88a0      	ldrh	r0, [r4, #4]
    d1e8:	8aa1      	ldrh	r1, [r4, #20]
    d1ea:	4288      	cmp	r0, r1
    d1ec:	d101      	bne.n	d1f2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    d1ee:	2000      	movs	r0, #0
    d1f0:	bd10      	pop	{r4, pc}
    d1f2:	1d21      	adds	r1, r4, #4
    d1f4:	4620      	mov	r0, r4
    d1f6:	f7ff ff01 	bl	cffc <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d1fa:	2000      	movs	r0, #0
    d1fc:	8220      	strh	r0, [r4, #16]
    d1fe:	2001      	movs	r0, #1
    d200:	bd10      	pop	{r4, pc}

0000d202 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d202:	b510      	push	{r4, lr}
    d204:	4604      	mov	r4, r0
    d206:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d20a:	88c0      	ldrh	r0, [r0, #6]
    d20c:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d210:	4402      	add	r2, r0
    d212:	8820      	ldrh	r0, [r4, #0]
    d214:	2845      	cmp	r0, #69	; 0x45
    d216:	d200      	bcs.n	d21a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d218:	2045      	movs	r0, #69	; 0x45
    d21a:	4288      	cmp	r0, r1
    d21c:	d204      	bcs.n	d228 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d21e:	f44f 7180 	mov.w	r1, #256	; 0x100
    d222:	2014      	movs	r0, #20
    d224:	f7f7 fbe4 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d228:	7de0      	ldrb	r0, [r4, #23]
    d22a:	2800      	cmp	r0, #0
    d22c:	d003      	beq.n	d236 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d22e:	8810      	ldrh	r0, [r2, #0]
    d230:	4288      	cmp	r0, r1
    d232:	d201      	bcs.n	d238 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d234:	2000      	movs	r0, #0
    d236:	bd10      	pop	{r4, pc}
    d238:	8011      	strh	r1, [r2, #0]
    d23a:	1da1      	adds	r1, r4, #6
    d23c:	4620      	mov	r0, r4
    d23e:	f7ff fedd 	bl	cffc <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d242:	2000      	movs	r0, #0
    d244:	75e0      	strb	r0, [r4, #23]
    d246:	2001      	movs	r0, #1
    d248:	bd10      	pop	{r4, pc}

0000d24a <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    d24a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d24e:	8941      	ldrh	r1, [r0, #10]
    d250:	8886      	ldrh	r6, [r0, #4]
    d252:	4604      	mov	r4, r0
    d254:	2500      	movs	r5, #0
    d256:	f100 070a 	add.w	r7, r0, #10
    d25a:	e006      	b.n	d26a <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    d25c:	4639      	mov	r1, r7
    d25e:	4620      	mov	r0, r4
    d260:	f7ff fecc 	bl	cffc <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d264:	1c6d      	adds	r5, r5, #1
    d266:	8961      	ldrh	r1, [r4, #10]
    d268:	b2ad      	uxth	r5, r5
    d26a:	42b1      	cmp	r1, r6
    d26c:	d1f6      	bne.n	d25c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    d26e:	4628      	mov	r0, r5
    d270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d274 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d274:	b530      	push	{r4, r5, lr}
    d276:	88c4      	ldrh	r4, [r0, #6]
    d278:	8881      	ldrh	r1, [r0, #4]
    d27a:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d27e:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d282:	4413      	add	r3, r2
    d284:	8882      	ldrh	r2, [r0, #4]
    d286:	8a85      	ldrh	r5, [r0, #20]
    d288:	42aa      	cmp	r2, r5
    d28a:	d012      	beq.n	d2b2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d28c:	42a1      	cmp	r1, r4
    d28e:	d010      	beq.n	d2b2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d290:	8981      	ldrh	r1, [r0, #12]
    d292:	b971      	cbnz	r1, d2b2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d294:	6982      	ldr	r2, [r0, #24]
    d296:	b172      	cbz	r2, d2b6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d298:	4610      	mov	r0, r2
    d29a:	f7ff ff16 	bl	d0ca <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    d29e:	b950      	cbnz	r0, d2b6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d2a0:	8910      	ldrh	r0, [r2, #8]
    d2a2:	3224      	adds	r2, #36	; 0x24
    d2a4:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d2a8:	4410      	add	r0, r2
    d2aa:	7899      	ldrb	r1, [r3, #2]
    d2ac:	7880      	ldrb	r0, [r0, #2]
    d2ae:	4288      	cmp	r0, r1
    d2b0:	d101      	bne.n	d2b6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d2b2:	2000      	movs	r0, #0
    d2b4:	bd30      	pop	{r4, r5, pc}
    d2b6:	4618      	mov	r0, r3
    d2b8:	bd30      	pop	{r4, r5, pc}

0000d2ba <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d2ba:	7f00      	ldrb	r0, [r0, #28]
    d2bc:	1d80      	adds	r0, r0, #6
    d2be:	4408      	add	r0, r1
    d2c0:	1ec0      	subs	r0, r0, #3
    d2c2:	6010      	str	r0, [r2, #0]
    d2c4:	8808      	ldrh	r0, [r1, #0]
    d2c6:	4770      	bx	lr

0000d2c8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2cc:	460e      	mov	r6, r1
    d2ce:	88c1      	ldrh	r1, [r0, #6]
    d2d0:	8902      	ldrh	r2, [r0, #8]
    d2d2:	4604      	mov	r4, r0
    d2d4:	f100 0824 	add.w	r8, r0, #36	; 0x24
    d2d8:	8800      	ldrh	r0, [r0, #0]
    d2da:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    d2de:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    d2e2:	2845      	cmp	r0, #69	; 0x45
    d2e4:	d200      	bcs.n	d2e8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d2e6:	2045      	movs	r0, #69	; 0x45
    d2e8:	42b0      	cmp	r0, r6
    d2ea:	d203      	bcs.n	d2f4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d2ec:	21c2      	movs	r1, #194	; 0xc2
    d2ee:	2014      	movs	r0, #20
    d2f0:	f7f7 fb7e 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d2f4:	4610      	mov	r0, r2
    d2f6:	f7ff fea2 	bl	d03e <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d2fa:	b110      	cbz	r0, d302 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d2fc:	2000      	movs	r0, #0
    d2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d302:	42af      	cmp	r7, r5
    d304:	d908      	bls.n	d318 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d306:	7f21      	ldrb	r1, [r4, #28]
    d308:	1b78      	subs	r0, r7, r5
    d30a:	1a40      	subs	r0, r0, r1
    d30c:	1f80      	subs	r0, r0, #6
    d30e:	4286      	cmp	r6, r0
    d310:	dd02      	ble.n	d318 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d312:	2000      	movs	r0, #0
    d314:	75e0      	strb	r0, [r4, #23]
    d316:	e7f1      	b.n	d2fc <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d318:	eb08 0005 	add.w	r0, r8, r5
    d31c:	2101      	movs	r1, #1
    d31e:	8006      	strh	r6, [r0, #0]
    d320:	75e1      	strb	r1, [r4, #23]
    d322:	e7ec      	b.n	d2fe <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d324 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d324:	b538      	push	{r3, r4, r5, lr}
    d326:	88c4      	ldrh	r4, [r0, #6]
    d328:	8881      	ldrh	r1, [r0, #4]
    d32a:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d32e:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d332:	441a      	add	r2, r3
    d334:	42a1      	cmp	r1, r4
    d336:	d010      	beq.n	d35a <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d338:	8983      	ldrh	r3, [r0, #12]
    d33a:	8a05      	ldrh	r5, [r0, #16]
    d33c:	8812      	ldrh	r2, [r2, #0]
    d33e:	442b      	add	r3, r5
    d340:	4293      	cmp	r3, r2
    d342:	d308      	bcc.n	d356 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d344:	f8ad 1000 	strh.w	r1, [sp]
    d348:	4669      	mov	r1, sp
    d34a:	f7ff fe57 	bl	cffc <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d34e:	f8bd 0000 	ldrh.w	r0, [sp]
    d352:	42a0      	cmp	r0, r4
    d354:	d001      	beq.n	d35a <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d356:	2001      	movs	r0, #1
    d358:	bd38      	pop	{r3, r4, r5, pc}
    d35a:	2000      	movs	r0, #0
    d35c:	bd38      	pop	{r3, r4, r5, pc}

0000d35e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d35e:	b570      	push	{r4, r5, r6, lr}
    d360:	88c6      	ldrh	r6, [r0, #6]
    d362:	8885      	ldrh	r5, [r0, #4]
    d364:	4603      	mov	r3, r0
    d366:	f100 0424 	add.w	r4, r0, #36	; 0x24
    d36a:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    d36e:	4420      	add	r0, r4
    d370:	42b5      	cmp	r5, r6
    d372:	d102      	bne.n	d37a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d374:	2000      	movs	r0, #0
    d376:	8218      	strh	r0, [r3, #16]
    d378:	bd70      	pop	{r4, r5, r6, pc}
    d37a:	8804      	ldrh	r4, [r0, #0]
    d37c:	899d      	ldrh	r5, [r3, #12]
    d37e:	7f1e      	ldrb	r6, [r3, #28]
    d380:	1b64      	subs	r4, r4, r5
    d382:	4435      	add	r5, r6
    d384:	4428      	add	r0, r5
    d386:	880d      	ldrh	r5, [r1, #0]
    d388:	b2a4      	uxth	r4, r4
    d38a:	1cc0      	adds	r0, r0, #3
    d38c:	42a5      	cmp	r5, r4
    d38e:	d900      	bls.n	d392 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d390:	800c      	strh	r4, [r1, #0]
    d392:	899c      	ldrh	r4, [r3, #12]
    d394:	b124      	cbz	r4, d3a0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d396:	2400      	movs	r4, #0
    d398:	7014      	strb	r4, [r2, #0]
    d39a:	8809      	ldrh	r1, [r1, #0]
    d39c:	8219      	strh	r1, [r3, #16]
    d39e:	bd70      	pop	{r4, r5, r6, pc}
    d3a0:	2401      	movs	r4, #1
    d3a2:	e7f9      	b.n	d398 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d3a4 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    d3a4:	b510      	push	{r4, lr}
    d3a6:	8a81      	ldrh	r1, [r0, #20]
    d3a8:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d3ac:	3aff      	subs	r2, #255	; 0xff
    d3ae:	d002      	beq.n	d3b6 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x12>
    d3b0:	7d82      	ldrb	r2, [r0, #22]
    d3b2:	b952      	cbnz	r2, d3ca <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x26>
    d3b4:	e004      	b.n	d3c0 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1c>
    d3b6:	f240 3155 	movw	r1, #853	; 0x355
    d3ba:	2014      	movs	r0, #20
    d3bc:	f7f7 fb18 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d3c0:	8880      	ldrh	r0, [r0, #4]
    d3c2:	4281      	cmp	r1, r0
    d3c4:	d101      	bne.n	d3ca <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x26>
    d3c6:	2000      	movs	r0, #0
    d3c8:	bd10      	pop	{r4, pc}
    d3ca:	2001      	movs	r0, #1
    d3cc:	bd10      	pop	{r4, pc}

0000d3ce <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    d3ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d3d2:	8281      	strh	r1, [r0, #20]
    d3d4:	2100      	movs	r1, #0
    d3d6:	7581      	strb	r1, [r0, #22]
    d3d8:	4770      	bx	lr

0000d3da <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    d3da:	b510      	push	{r4, lr}
    d3dc:	8a81      	ldrh	r1, [r0, #20]
    d3de:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d3e2:	3aff      	subs	r2, #255	; 0xff
    d3e4:	d004      	beq.n	d3f0 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    d3e6:	f44f 714e 	mov.w	r1, #824	; 0x338
    d3ea:	2014      	movs	r0, #20
    d3ec:	f7f7 fb00 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d3f0:	88c1      	ldrh	r1, [r0, #6]
    d3f2:	8281      	strh	r1, [r0, #20]
    d3f4:	89c1      	ldrh	r1, [r0, #14]
    d3f6:	b101      	cbz	r1, d3fa <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x20>
    d3f8:	2101      	movs	r1, #1
    d3fa:	7581      	strb	r1, [r0, #22]
    d3fc:	bd10      	pop	{r4, pc}

0000d3fe <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d3fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d402:	461d      	mov	r5, r3
    d404:	4616      	mov	r6, r2
    d406:	9f06      	ldr	r7, [sp, #24]
    d408:	460b      	mov	r3, r1
    d40a:	4604      	mov	r4, r0
    d40c:	463a      	mov	r2, r7
    d40e:	4629      	mov	r1, r5
    d410:	4630      	mov	r0, r6
    d412:	f000 f84f 	bl	d4b4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d416:	4283      	cmp	r3, r0
    d418:	d201      	bcs.n	d41e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d41a:	21a1      	movs	r1, #161	; 0xa1
    d41c:	e018      	b.n	d450 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d41e:	1ce0      	adds	r0, r4, #3
    d420:	f020 0103 	bic.w	r1, r0, #3
    d424:	4620      	mov	r0, r4
    d426:	42a1      	cmp	r1, r4
    d428:	d001      	beq.n	d42e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    d42a:	21a2      	movs	r1, #162	; 0xa2
    d42c:	e010      	b.n	d450 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d42e:	2224      	movs	r2, #36	; 0x24
    d430:	2100      	movs	r1, #0
    d432:	f7ff f97e 	bl	c732 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d436:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d43a:	82a0      	strh	r0, [r4, #20]
    d43c:	19a8      	adds	r0, r5, r6
    d43e:	1d80      	adds	r0, r0, #6
    d440:	4378      	muls	r0, r7
    d442:	b280      	uxth	r0, r0
    d444:	7725      	strb	r5, [r4, #28]
    d446:	8060      	strh	r0, [r4, #2]
    d448:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d44c:	d903      	bls.n	d456 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    d44e:	21a8      	movs	r1, #168	; 0xa8
    d450:	2014      	movs	r0, #20
    d452:	f7f7 facd 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d456:	8026      	strh	r6, [r4, #0]
    d458:	2000      	movs	r0, #0
    d45a:	7760      	strb	r0, [r4, #29]
    d45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d460 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    d460:	6181      	str	r1, [r0, #24]
    d462:	6188      	str	r0, [r1, #24]
    d464:	4770      	bx	lr

0000d466 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d46a:	460b      	mov	r3, r1
    d46c:	4604      	mov	r4, r0
    d46e:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d472:	8905      	ldrh	r5, [r0, #8]
    d474:	8946      	ldrh	r6, [r0, #10]
    d476:	8880      	ldrh	r0, [r0, #4]
    d478:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    d47c:	4439      	add	r1, r7
    d47e:	460f      	mov	r7, r1
    d480:	4285      	cmp	r5, r0
    d482:	d102      	bne.n	d48a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    d484:	2000      	movs	r0, #0
    d486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d48a:	b10a      	cbz	r2, d490 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    d48c:	1cc8      	adds	r0, r1, #3
    d48e:	6010      	str	r0, [r2, #0]
    d490:	b123      	cbz	r3, d49c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    d492:	7f22      	ldrb	r2, [r4, #28]
    d494:	1cf9      	adds	r1, r7, #3
    d496:	4618      	mov	r0, r3
    d498:	f7ff f8d1 	bl	c63e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d49c:	883f      	ldrh	r7, [r7, #0]
    d49e:	f104 0108 	add.w	r1, r4, #8
    d4a2:	4620      	mov	r0, r4
    d4a4:	f7ff fdaa 	bl	cffc <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d4a8:	42b5      	cmp	r5, r6
    d4aa:	d101      	bne.n	d4b0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    d4ac:	8920      	ldrh	r0, [r4, #8]
    d4ae:	8160      	strh	r0, [r4, #10]
    d4b0:	4638      	mov	r0, r7
    d4b2:	e7e8      	b.n	d486 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000d4b4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d4b4:	4401      	add	r1, r0
    d4b6:	1d89      	adds	r1, r1, #6
    d4b8:	4351      	muls	r1, r2
    d4ba:	b28a      	uxth	r2, r1
    d4bc:	2100      	movs	r1, #0
    d4be:	2845      	cmp	r0, #69	; 0x45
    d4c0:	d201      	bcs.n	d4c6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    d4c2:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    d4c6:	3224      	adds	r2, #36	; 0x24
    d4c8:	1850      	adds	r0, r2, r1
    d4ca:	b280      	uxth	r0, r0
    d4cc:	4770      	bx	lr

0000d4ce <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d4ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d4d2:	4688      	mov	r8, r1
    d4d4:	88c1      	ldrh	r1, [r0, #6]
    d4d6:	4604      	mov	r4, r0
    d4d8:	8900      	ldrh	r0, [r0, #8]
    d4da:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    d4de:	f104 0524 	add.w	r5, r4, #36	; 0x24
    d4e2:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d4e6:	eb05 0906 	add.w	r9, r5, r6
    d4ea:	f7ff fda8 	bl	d03e <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d4ee:	2200      	movs	r2, #0
    d4f0:	b998      	cbnz	r0, d51a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d4f2:	8820      	ldrh	r0, [r4, #0]
    d4f4:	2845      	cmp	r0, #69	; 0x45
    d4f6:	d200      	bcs.n	d4fa <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d4f8:	2045      	movs	r0, #69	; 0x45
    d4fa:	42b7      	cmp	r7, r6
    d4fc:	d906      	bls.n	d50c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d4fe:	7f23      	ldrb	r3, [r4, #28]
    d500:	1bb9      	subs	r1, r7, r6
    d502:	1ac9      	subs	r1, r1, r3
    d504:	1f89      	subs	r1, r1, #6
    d506:	4281      	cmp	r1, r0
    d508:	da00      	bge.n	d50c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d50a:	4608      	mov	r0, r1
    d50c:	89e1      	ldrh	r1, [r4, #14]
    d50e:	b111      	cbz	r1, d516 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d510:	f8b9 3000 	ldrh.w	r3, [r9]
    d514:	1ac0      	subs	r0, r0, r3
    d516:	4540      	cmp	r0, r8
    d518:	da03      	bge.n	d522 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d51a:	8262      	strh	r2, [r4, #18]
    d51c:	2000      	movs	r0, #0
    d51e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d522:	7f20      	ldrb	r0, [r4, #28]
    d524:	4429      	add	r1, r5
    d526:	1d80      	adds	r0, r0, #6
    d528:	4430      	add	r0, r6
    d52a:	4408      	add	r0, r1
    d52c:	f8a4 8012 	strh.w	r8, [r4, #18]
    d530:	1ec0      	subs	r0, r0, #3
    d532:	e7f4      	b.n	d51e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d534 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    d534:	2100      	movs	r1, #0
    d536:	81c1      	strh	r1, [r0, #14]
    d538:	8241      	strh	r1, [r0, #18]
    d53a:	75c1      	strb	r1, [r0, #23]
    d53c:	7581      	strb	r1, [r0, #22]
    d53e:	4770      	bx	lr

0000d540 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d540:	b570      	push	{r4, r5, r6, lr}
    d542:	2300      	movs	r3, #0
    d544:	2908      	cmp	r1, #8
    d546:	d204      	bcs.n	d552 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    d548:	f240 11cb 	movw	r1, #459	; 0x1cb
    d54c:	2015      	movs	r0, #21
    d54e:	f7f7 fa4f 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d552:	6802      	ldr	r2, [r0, #0]
    d554:	b90a      	cbnz	r2, d55a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d556:	e01e      	b.n	d596 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d558:	4610      	mov	r0, r2
    d55a:	6802      	ldr	r2, [r0, #0]
    d55c:	8893      	ldrh	r3, [r2, #4]
    d55e:	428b      	cmp	r3, r1
    d560:	d002      	beq.n	d568 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    d562:	6813      	ldr	r3, [r2, #0]
    d564:	2b00      	cmp	r3, #0
    d566:	d1f7      	bne.n	d558 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    d568:	8894      	ldrh	r4, [r2, #4]
    d56a:	4613      	mov	r3, r2
    d56c:	428c      	cmp	r4, r1
    d56e:	d101      	bne.n	d574 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    d570:	6811      	ldr	r1, [r2, #0]
    d572:	e00d      	b.n	d590 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    d574:	f101 0508 	add.w	r5, r1, #8
    d578:	b2ae      	uxth	r6, r5
    d57a:	2500      	movs	r5, #0
    d57c:	42b4      	cmp	r4, r6
    d57e:	d309      	bcc.n	d594 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    d580:	1a64      	subs	r4, r4, r1
    d582:	4411      	add	r1, r2
    d584:	600d      	str	r5, [r1, #0]
    d586:	808c      	strh	r4, [r1, #4]
    d588:	6802      	ldr	r2, [r0, #0]
    d58a:	6812      	ldr	r2, [r2, #0]
    d58c:	6002      	str	r2, [r0, #0]
    d58e:	600a      	str	r2, [r1, #0]
    d590:	6001      	str	r1, [r0, #0]
    d592:	e000      	b.n	d596 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d594:	2300      	movs	r3, #0
    d596:	4618      	mov	r0, r3
    d598:	bd70      	pop	{r4, r5, r6, pc}

0000d59a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d59a:	b510      	push	{r4, lr}
    d59c:	000c      	movs	r4, r1
    d59e:	d006      	beq.n	d5ae <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    d5a0:	2c08      	cmp	r4, #8
    d5a2:	d209      	bcs.n	d5b8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    d5a4:	f240 1195 	movw	r1, #405	; 0x195
    d5a8:	2015      	movs	r0, #21
    d5aa:	f7f7 fa21 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5ae:	b108      	cbz	r0, d5b4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d5b0:	2100      	movs	r1, #0
    d5b2:	6001      	str	r1, [r0, #0]
    d5b4:	2000      	movs	r0, #0
    d5b6:	bd10      	pop	{r4, pc}
    d5b8:	b118      	cbz	r0, d5c2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    d5ba:	b2a1      	uxth	r1, r4
    d5bc:	6800      	ldr	r0, [r0, #0]
    d5be:	f000 f814 	bl	d5ea <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d5c2:	1d20      	adds	r0, r4, #4
    d5c4:	bd10      	pop	{r4, pc}

0000d5c6 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d5c6:	2100      	movs	r1, #0
    d5c8:	6802      	ldr	r2, [r0, #0]
    d5ca:	e003      	b.n	d5d4 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d5cc:	8893      	ldrh	r3, [r2, #4]
    d5ce:	6812      	ldr	r2, [r2, #0]
    d5d0:	4419      	add	r1, r3
    d5d2:	b289      	uxth	r1, r1
    d5d4:	2a00      	cmp	r2, #0
    d5d6:	d1f9      	bne.n	d5cc <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d5d8:	f000 b807 	b.w	d5ea <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d5dc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d5dc:	2300      	movs	r3, #0
    d5de:	600b      	str	r3, [r1, #0]
    d5e0:	808a      	strh	r2, [r1, #4]
    d5e2:	6802      	ldr	r2, [r0, #0]
    d5e4:	600a      	str	r2, [r1, #0]
    d5e6:	6001      	str	r1, [r0, #0]
    d5e8:	4770      	bx	lr
    d5ea:	2300      	movs	r3, #0
    d5ec:	6043      	str	r3, [r0, #4]
    d5ee:	1d02      	adds	r2, r0, #4
    d5f0:	8101      	strh	r1, [r0, #8]
    d5f2:	6002      	str	r2, [r0, #0]
    d5f4:	4770      	bx	lr

0000d5f6 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    d5f6:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    d5fa:	3bff      	subs	r3, #255	; 0xff
    d5fc:	d001      	beq.n	d602 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    d5fe:	2902      	cmp	r1, #2
    d600:	d301      	bcc.n	d606 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    d602:	2000      	movs	r0, #0
    d604:	4770      	bx	lr
    d606:	f7f7 bcc7 	b.w	4f98 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000d60a <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>:
    d60a:	b50e      	push	{r1, r2, r3, lr}
    d60c:	4669      	mov	r1, sp
    d60e:	f000 f818 	bl	d642 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    d612:	b120      	cbz	r0, d61e <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x14>
    d614:	f44f 71b2 	mov.w	r1, #356	; 0x164
    d618:	2017      	movs	r0, #23
    d61a:	f7f7 f9e9 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d61e:	4668      	mov	r0, sp
    d620:	f7f7 fc38 	bl	4e94 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d624:	b108      	cbz	r0, d62a <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x20>
    d626:	2000      	movs	r0, #0
    d628:	bd0e      	pop	{r1, r2, r3, pc}
    d62a:	2001      	movs	r0, #1
    d62c:	bd0e      	pop	{r1, r2, r3, pc}

0000d62e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d62e:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d632:	3aff      	subs	r2, #255	; 0xff
    d634:	d001      	beq.n	d63a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    d636:	2902      	cmp	r1, #2
    d638:	d301      	bcc.n	d63e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    d63a:	2000      	movs	r0, #0
    d63c:	4770      	bx	lr
    d63e:	f7f7 bce5 	b.w	500c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000d642 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    d642:	b570      	push	{r4, r5, r6, lr}
    d644:	4605      	mov	r5, r0
    d646:	460c      	mov	r4, r1
    d648:	4608      	mov	r0, r1
    d64a:	f000 f864 	bl	d716 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    d64e:	b108      	cbz	r0, d654 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    d650:	2010      	movs	r0, #16
    d652:	bd70      	pop	{r4, r5, r6, pc}
    d654:	2d02      	cmp	r5, #2
    d656:	d301      	bcc.n	d65c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    d658:	2007      	movs	r0, #7
    d65a:	bd70      	pop	{r4, r5, r6, pc}
    d65c:	7025      	strb	r5, [r4, #0]
    d65e:	2000      	movs	r0, #0
    d660:	8060      	strh	r0, [r4, #2]
    d662:	bd70      	pop	{r4, r5, r6, pc}
    d664:	b510      	push	{r4, lr}
    d666:	4604      	mov	r4, r0
    d668:	f7f7 fd1c 	bl	50a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    d66c:	42a0      	cmp	r0, r4
    d66e:	d901      	bls.n	d674 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    d670:	2001      	movs	r0, #1
    d672:	bd10      	pop	{r4, pc}
    d674:	2000      	movs	r0, #0
    d676:	bd10      	pop	{r4, pc}
    d678:	4770      	bx	lr

0000d67a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d67a:	b570      	push	{r4, r5, r6, lr}
    d67c:	460e      	mov	r6, r1
    d67e:	461d      	mov	r5, r3
    d680:	4611      	mov	r1, r2
    d682:	f000 f811 	bl	d6a8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    d686:	4604      	mov	r4, r0
    d688:	4629      	mov	r1, r5
    d68a:	4630      	mov	r0, r6
    d68c:	f000 f803 	bl	d696 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    d690:	4420      	add	r0, r4
    d692:	1d00      	adds	r0, r0, #4
    d694:	bd70      	pop	{r4, r5, r6, pc}
    d696:	b510      	push	{r4, lr}
    d698:	460a      	mov	r2, r1
    d69a:	2101      	movs	r1, #1
    d69c:	f7ff ff0a 	bl	d4b4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d6a0:	1cc0      	adds	r0, r0, #3
    d6a2:	f020 0003 	bic.w	r0, r0, #3
    d6a6:	bd10      	pop	{r4, pc}
    d6a8:	b510      	push	{r4, lr}
    d6aa:	460a      	mov	r2, r1
    d6ac:	2101      	movs	r1, #1
    d6ae:	f7ff ff01 	bl	d4b4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d6b2:	1cc0      	adds	r0, r0, #3
    d6b4:	f020 0003 	bic.w	r0, r0, #3
    d6b8:	bd10      	pop	{r4, pc}

0000d6ba <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>:
    d6ba:	b510      	push	{r4, lr}
    d6bc:	680b      	ldr	r3, [r1, #0]
    d6be:	4604      	mov	r4, r0
    d6c0:	2b00      	cmp	r3, #0
    d6c2:	d00d      	beq.n	d6e0 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x26>
    d6c4:	88ca      	ldrh	r2, [r1, #6]
    d6c6:	4619      	mov	r1, r3
    d6c8:	6820      	ldr	r0, [r4, #0]
    d6ca:	f7ff ff87 	bl	d5dc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    d6ce:	7920      	ldrb	r0, [r4, #4]
    d6d0:	2801      	cmp	r0, #1
    d6d2:	d102      	bne.n	d6da <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x20>
    d6d4:	6820      	ldr	r0, [r4, #0]
    d6d6:	f7ff ff76 	bl	d5c6 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    d6da:	7920      	ldrb	r0, [r4, #4]
    d6dc:	1e40      	subs	r0, r0, #1
    d6de:	7120      	strb	r0, [r4, #4]
    d6e0:	bd10      	pop	{r4, pc}
    d6e2:	2800      	cmp	r0, #0
    d6e4:	db09      	blt.n	d6fa <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x40>
    d6e6:	f000 021f 	and.w	r2, r0, #31
    d6ea:	2101      	movs	r1, #1
    d6ec:	4091      	lsls	r1, r2
    d6ee:	0940      	lsrs	r0, r0, #5
    d6f0:	0080      	lsls	r0, r0, #2
    d6f2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d6f6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d6fa:	4770      	bx	lr

0000d6fc <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d6fc:	f7f7 bee6 	b.w	54cc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000d700 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    d700:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d704:	2000      	movs	r0, #0
    d706:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    d70a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    d70e:	2001      	movs	r0, #1
    d710:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    d714:	4770      	bx	lr

0000d716 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    d716:	b108      	cbz	r0, d71c <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    d718:	2000      	movs	r0, #0
    d71a:	4770      	bx	lr
    d71c:	2001      	movs	r0, #1
    d71e:	4770      	bx	lr

0000d720 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d720:	f7f8 b81a 	b.w	5758 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d724 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d724:	f7f8 b808 	b.w	5738 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d728 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d728:	b510      	push	{r4, lr}
    d72a:	2900      	cmp	r1, #0
    d72c:	4604      	mov	r4, r0
    d72e:	f04f 0106 	mov.w	r1, #6
    d732:	d002      	beq.n	d73a <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d734:	f7f7 f9f4 	bl	4b20 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d738:	e001      	b.n	d73e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d73a:	f7f7 fa0d 	bl	4b58 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d73e:	7960      	ldrb	r0, [r4, #5]
    d740:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d744:	7160      	strb	r0, [r4, #5]
    d746:	bd10      	pop	{r4, pc}

0000d748 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d748:	4770      	bx	lr

0000d74a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d74a:	b530      	push	{r4, r5, lr}
    d74c:	460c      	mov	r4, r1
    d74e:	4605      	mov	r5, r0
    d750:	b08d      	sub	sp, #52	; 0x34
    d752:	f04f 0103 	mov.w	r1, #3
    d756:	f104 0003 	add.w	r0, r4, #3
    d75a:	b112      	cbz	r2, d762 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d75c:	f7f7 f9e0 	bl	4b20 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d760:	e001      	b.n	d766 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d762:	f7f7 f9f9 	bl	4b58 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d766:	7960      	ldrb	r0, [r4, #5]
    d768:	220d      	movs	r2, #13
    d76a:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d76e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d772:	7160      	strb	r0, [r4, #5]
    d774:	2100      	movs	r1, #0
    d776:	a804      	add	r0, sp, #16
    d778:	f7fe ffdb 	bl	c732 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d77c:	78e0      	ldrb	r0, [r4, #3]
    d77e:	f88d 001f 	strb.w	r0, [sp, #31]
    d782:	7920      	ldrb	r0, [r4, #4]
    d784:	f88d 001e 	strb.w	r0, [sp, #30]
    d788:	7960      	ldrb	r0, [r4, #5]
    d78a:	f88d 001d 	strb.w	r0, [sp, #29]
    d78e:	2210      	movs	r2, #16
    d790:	4629      	mov	r1, r5
    d792:	4668      	mov	r0, sp
    d794:	f7fe ff53 	bl	c63e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d798:	4668      	mov	r0, sp
    d79a:	f7ff ffaf 	bl	d6fc <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d79e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d7a2:	7020      	strb	r0, [r4, #0]
    d7a4:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d7a8:	7060      	strb	r0, [r4, #1]
    d7aa:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d7ae:	70a0      	strb	r0, [r4, #2]
    d7b0:	b00d      	add	sp, #52	; 0x34
    d7b2:	bd30      	pop	{r4, r5, pc}

0000d7b4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d7b4:	f7f8 bb66 	b.w	5e84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    d7b8:	07c1      	lsls	r1, r0, #31
    d7ba:	d001      	beq.n	d7c0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    d7bc:	2001      	movs	r0, #1
    d7be:	4770      	bx	lr
    d7c0:	0780      	lsls	r0, r0, #30
    d7c2:	d501      	bpl.n	d7c8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    d7c4:	2002      	movs	r0, #2
    d7c6:	4770      	bx	lr
    d7c8:	2000      	movs	r0, #0
    d7ca:	4770      	bx	lr
    d7cc:	b510      	push	{r4, lr}
    d7ce:	2801      	cmp	r0, #1
    d7d0:	d008      	beq.n	d7e4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d7d2:	2802      	cmp	r0, #2
    d7d4:	d004      	beq.n	d7e0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    d7d6:	f240 3197 	movw	r1, #919	; 0x397
    d7da:	2006      	movs	r0, #6
    d7dc:	f7f7 f908 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d7e0:	2001      	movs	r0, #1
    d7e2:	bd10      	pop	{r4, pc}
    d7e4:	2000      	movs	r0, #0
    d7e6:	bd10      	pop	{r4, pc}
    d7e8:	2900      	cmp	r1, #0
    d7ea:	d004      	beq.n	d7f6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    d7ec:	2801      	cmp	r0, #1
    d7ee:	d003      	beq.n	d7f8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d7f0:	2901      	cmp	r1, #1
    d7f2:	d001      	beq.n	d7f8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d7f4:	2002      	movs	r0, #2
    d7f6:	4770      	bx	lr
    d7f8:	2001      	movs	r0, #1
    d7fa:	4770      	bx	lr
    d7fc:	f7ff bdaf 	b.w	d35e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d800 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d800:	2201      	movs	r2, #1
    d802:	f7f8 bee9 	b.w	65d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000d806 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d806:	b510      	push	{r4, lr}
    d808:	f002 fb1e 	bl	fe48 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d80c:	b118      	cbz	r0, d816 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d80e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d812:	f7fd bc75 	b.w	b100 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    d816:	20ff      	movs	r0, #255	; 0xff
    d818:	bd10      	pop	{r4, pc}

0000d81a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    d81a:	b510      	push	{r4, lr}
    d81c:	f7f8 ff26 	bl	666c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    d820:	2810      	cmp	r0, #16
    d822:	d003      	beq.n	d82c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    d824:	f7f8 fef2 	bl	660c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    d828:	2810      	cmp	r0, #16
    d82a:	d100      	bne.n	d82e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    d82c:	2008      	movs	r0, #8
    d82e:	bd10      	pop	{r4, pc}

0000d830 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    d830:	b510      	push	{r4, lr}
    d832:	f7f8 ff1b 	bl	666c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    d836:	2810      	cmp	r0, #16
    d838:	d007      	beq.n	d84a <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d83a:	f7f8 fee7 	bl	660c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    d83e:	2810      	cmp	r0, #16
    d840:	d003      	beq.n	d84a <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d842:	f7f8 ff5b 	bl	66fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    d846:	2001      	movs	r0, #1
    d848:	bd10      	pop	{r4, pc}
    d84a:	2000      	movs	r0, #0
    d84c:	bd10      	pop	{r4, pc}

0000d84e <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    d84e:	b510      	push	{r4, lr}
    d850:	f7f8 ff0c 	bl	666c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    d854:	2810      	cmp	r0, #16
    d856:	d003      	beq.n	d860 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    d858:	f7f8 ff98 	bl	678c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x228>
    d85c:	2001      	movs	r0, #1
    d85e:	bd10      	pop	{r4, pc}
    d860:	2000      	movs	r0, #0
    d862:	bd10      	pop	{r4, pc}

0000d864 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    d864:	b570      	push	{r4, r5, r6, lr}
    d866:	460e      	mov	r6, r1
    d868:	b08c      	sub	sp, #48	; 0x30
    d86a:	4614      	mov	r4, r2
    d86c:	4601      	mov	r1, r0
    d86e:	461d      	mov	r5, r3
    d870:	2210      	movs	r2, #16
    d872:	4668      	mov	r0, sp
    d874:	f000 f91a 	bl	daac <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d878:	2210      	movs	r2, #16
    d87a:	4631      	mov	r1, r6
    d87c:	a804      	add	r0, sp, #16
    d87e:	f000 f915 	bl	daac <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d882:	4668      	mov	r0, sp
    d884:	f7ff ff3a 	bl	d6fc <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d888:	a908      	add	r1, sp, #32
    d88a:	f04f 0210 	mov.w	r2, #16
    d88e:	4628      	mov	r0, r5
    d890:	b11c      	cbz	r4, d89a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    d892:	f000 f90b 	bl	daac <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d896:	b00c      	add	sp, #48	; 0x30
    d898:	bd70      	pop	{r4, r5, r6, pc}
    d89a:	f7fe fed0 	bl	c63e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d89e:	e7fa      	b.n	d896 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000d8a0 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d8a0:	b510      	push	{r4, lr}
    d8a2:	460c      	mov	r4, r1
    d8a4:	2100      	movs	r1, #0
    d8a6:	f7ff fec2 	bl	d62e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d8aa:	6060      	str	r0, [r4, #4]
    d8ac:	b118      	cbz	r0, d8b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    d8ae:	2001      	movs	r0, #1
    d8b0:	7020      	strb	r0, [r4, #0]
    d8b2:	2000      	movs	r0, #0
    d8b4:	bd10      	pop	{r4, pc}
    d8b6:	2002      	movs	r0, #2
    d8b8:	bd10      	pop	{r4, pc}

0000d8ba <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d8ba:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d8be:	4348      	muls	r0, r1
    d8c0:	4770      	bx	lr

0000d8c2 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d8c2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d8c6:	fbb0 f0f1 	udiv	r0, r0, r1
    d8ca:	b280      	uxth	r0, r0
    d8cc:	4770      	bx	lr

0000d8ce <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    d8ce:	b570      	push	{r4, r5, r6, lr}
    d8d0:	4604      	mov	r4, r0
    d8d2:	4290      	cmp	r0, r2
    d8d4:	d20b      	bcs.n	d8ee <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    d8d6:	1b10      	subs	r0, r2, r4
    d8d8:	2864      	cmp	r0, #100	; 0x64
    d8da:	d200      	bcs.n	d8de <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    d8dc:	2064      	movs	r0, #100	; 0x64
    d8de:	1825      	adds	r5, r4, r0
    d8e0:	428d      	cmp	r5, r1
    d8e2:	d803      	bhi.n	d8ec <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    d8e4:	2104      	movs	r1, #4
    d8e6:	f7f4 fc4b 	bl	2180 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d8ea:	b108      	cbz	r0, d8f0 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    d8ec:	4620      	mov	r0, r4
    d8ee:	bd70      	pop	{r4, r5, r6, pc}
    d8f0:	4628      	mov	r0, r5
    d8f2:	bd70      	pop	{r4, r5, r6, pc}

0000d8f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    d8f4:	b510      	push	{r4, lr}
    d8f6:	f1a2 030f 	sub.w	r3, r2, #15
    d8fa:	290c      	cmp	r1, #12
    d8fc:	d244      	bcs.n	d988 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d8fe:	e8df f001 	tbb	[pc, r1]
    d902:	0806      	.short	0x0806
    d904:	1815120d 	.word	0x1815120d
    d908:	4127241c 	.word	0x4127241c
    d90c:	312a      	.short	0x312a
    d90e:	b3c2      	cbz	r2, d982 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    d910:	e03a      	b.n	d988 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d912:	2a07      	cmp	r2, #7
    d914:	d03a      	beq.n	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d916:	2a08      	cmp	r2, #8
    d918:	d038      	beq.n	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d91a:	e035      	b.n	d988 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d91c:	2a0c      	cmp	r2, #12
    d91e:	d035      	beq.n	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d920:	2a0b      	cmp	r2, #11
    d922:	d033      	beq.n	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d924:	e030      	b.n	d988 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d926:	2a0d      	cmp	r2, #13
    d928:	d030      	beq.n	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d92a:	e02d      	b.n	d988 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d92c:	2b0c      	cmp	r3, #12
    d92e:	d92d      	bls.n	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d930:	e02a      	b.n	d988 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d932:	3a10      	subs	r2, #16
    d934:	2a0b      	cmp	r2, #11
    d936:	d929      	bls.n	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d938:	e026      	b.n	d988 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d93a:	2b03      	cmp	r3, #3
    d93c:	d926      	bls.n	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d93e:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    d942:	b308      	cbz	r0, d988 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d944:	2a1b      	cmp	r2, #27
    d946:	d921      	bls.n	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d948:	e01e      	b.n	d988 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d94a:	2a04      	cmp	r2, #4
    d94c:	d01e      	beq.n	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d94e:	e01b      	b.n	d988 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d950:	2a06      	cmp	r2, #6
    d952:	d01b      	beq.n	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d954:	e018      	b.n	d988 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d956:	2a1c      	cmp	r2, #28
    d958:	d018      	beq.n	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d95a:	2a1d      	cmp	r2, #29
    d95c:	d016      	beq.n	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d95e:	2a1e      	cmp	r2, #30
    d960:	d014      	beq.n	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d962:	e011      	b.n	d988 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d964:	2a1f      	cmp	r2, #31
    d966:	d011      	beq.n	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d968:	2a20      	cmp	r2, #32
    d96a:	d00f      	beq.n	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d96c:	2a21      	cmp	r2, #33	; 0x21
    d96e:	d00d      	beq.n	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d970:	2a22      	cmp	r2, #34	; 0x22
    d972:	d00b      	beq.n	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d974:	2a23      	cmp	r2, #35	; 0x23
    d976:	d009      	beq.n	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d978:	2a24      	cmp	r2, #36	; 0x24
    d97a:	d007      	beq.n	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d97c:	2a26      	cmp	r2, #38	; 0x26
    d97e:	d005      	beq.n	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d980:	e002      	b.n	d988 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d982:	e003      	b.n	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d984:	2a0e      	cmp	r2, #14
    d986:	d001      	beq.n	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d988:	2000      	movs	r0, #0
    d98a:	bd10      	pop	{r4, pc}
    d98c:	2001      	movs	r0, #1
    d98e:	bd10      	pop	{r4, pc}

0000d990 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    d990:	280c      	cmp	r0, #12
    d992:	d013      	beq.n	d9bc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d994:	280b      	cmp	r0, #11
    d996:	d011      	beq.n	d9bc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d998:	280d      	cmp	r0, #13
    d99a:	d00f      	beq.n	d9bc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d99c:	281f      	cmp	r0, #31
    d99e:	d00d      	beq.n	d9bc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d9a0:	2820      	cmp	r0, #32
    d9a2:	d00b      	beq.n	d9bc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d9a4:	2821      	cmp	r0, #33	; 0x21
    d9a6:	d009      	beq.n	d9bc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d9a8:	2822      	cmp	r0, #34	; 0x22
    d9aa:	d007      	beq.n	d9bc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d9ac:	2823      	cmp	r0, #35	; 0x23
    d9ae:	d005      	beq.n	d9bc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d9b0:	2824      	cmp	r0, #36	; 0x24
    d9b2:	d003      	beq.n	d9bc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d9b4:	2826      	cmp	r0, #38	; 0x26
    d9b6:	d001      	beq.n	d9bc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d9b8:	2000      	movs	r0, #0
    d9ba:	4770      	bx	lr
    d9bc:	2001      	movs	r0, #1
    d9be:	4770      	bx	lr

0000d9c0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    d9c0:	f011 0f0c 	tst.w	r1, #12
    d9c4:	d016      	beq.n	d9f4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    d9c6:	074a      	lsls	r2, r1, #29
    d9c8:	f44f 7116 	mov.w	r1, #600	; 0x258
    d9cc:	2a00      	cmp	r2, #0
    d9ce:	da02      	bge.n	d9d6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    d9d0:	f04f 0210 	mov.w	r2, #16
    d9d4:	e001      	b.n	d9da <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    d9d6:	f04f 0240 	mov.w	r2, #64	; 0x40
    d9da:	da01      	bge.n	d9e0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    d9dc:	f04f 0196 	mov.w	r1, #150	; 0x96
    d9e0:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    d9e4:	eba0 0301 	sub.w	r3, r0, r1
    d9e8:	4288      	cmp	r0, r1
    d9ea:	d910      	bls.n	da0e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d9ec:	fb93 f0f2 	sdiv	r0, r3, r2
    d9f0:	b280      	uxth	r0, r0
    d9f2:	4770      	bx	lr
    d9f4:	2902      	cmp	r1, #2
    d9f6:	d002      	beq.n	d9fe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    d9f8:	2870      	cmp	r0, #112	; 0x70
    d9fa:	d80a      	bhi.n	da12 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    d9fc:	e007      	b.n	da0e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d9fe:	283c      	cmp	r0, #60	; 0x3c
    da00:	d905      	bls.n	da0e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    da02:	383c      	subs	r0, #60	; 0x3c
    da04:	17c1      	asrs	r1, r0, #31
    da06:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    da0a:	1080      	asrs	r0, r0, #2
    da0c:	e7f0      	b.n	d9f0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    da0e:	2000      	movs	r0, #0
    da10:	e7ee      	b.n	d9f0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    da12:	3870      	subs	r0, #112	; 0x70
    da14:	17c1      	asrs	r1, r0, #31
    da16:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    da1a:	10c0      	asrs	r0, r0, #3
    da1c:	e7e8      	b.n	d9f0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000da1e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    da1e:	6809      	ldr	r1, [r1, #0]
    da20:	f8c0 105e 	str.w	r1, [r0, #94]	; 0x5e
    da24:	4770      	bx	lr

0000da26 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    da26:	07c1      	lsls	r1, r0, #31
    da28:	d001      	beq.n	da2e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    da2a:	2001      	movs	r0, #1
    da2c:	4770      	bx	lr
    da2e:	0781      	lsls	r1, r0, #30
    da30:	d501      	bpl.n	da36 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    da32:	2002      	movs	r0, #2
    da34:	4770      	bx	lr
    da36:	0740      	lsls	r0, r0, #29
    da38:	d501      	bpl.n	da3e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    da3a:	2008      	movs	r0, #8
    da3c:	4770      	bx	lr
    da3e:	2000      	movs	r0, #0
    da40:	4770      	bx	lr

0000da42 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    da42:	b510      	push	{r4, lr}
    da44:	f640 12c4 	movw	r2, #2500	; 0x9c4
    da48:	2901      	cmp	r1, #1
    da4a:	d006      	beq.n	da5a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    da4c:	2902      	cmp	r1, #2
    da4e:	d005      	beq.n	da5c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    da50:	f240 4129 	movw	r1, #1065	; 0x429
    da54:	2029      	movs	r0, #41	; 0x29
    da56:	f7f6 ffcb 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da5a:	b108      	cbz	r0, da60 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    da5c:	4610      	mov	r0, r2
    da5e:	bd10      	pop	{r4, pc}
    da60:	f240 40e2 	movw	r0, #1250	; 0x4e2
    da64:	bd10      	pop	{r4, pc}

0000da66 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    da66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da6a:	460c      	mov	r4, r1
    da6c:	4605      	mov	r5, r0
    da6e:	68c6      	ldr	r6, [r0, #12]
    da70:	f7f4 ff60 	bl	2934 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    da74:	b198      	cbz	r0, da9e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    da76:	b1bc      	cbz	r4, daa8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    da78:	4630      	mov	r0, r6
    da7a:	68e9      	ldr	r1, [r5, #12]
    da7c:	f7f4 fc74 	bl	2368 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    da80:	2800      	cmp	r0, #0
    da82:	dd11      	ble.n	daa8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    da84:	4420      	add	r0, r4
    da86:	1e40      	subs	r0, r0, #1
    da88:	fbb0 f7f4 	udiv	r7, r0, r4
    da8c:	fb07 f104 	mul.w	r1, r7, r4
    da90:	4630      	mov	r0, r6
    da92:	f7f4 fc37 	bl	2304 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    da96:	60e8      	str	r0, [r5, #12]
    da98:	4638      	mov	r0, r7
    da9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    da9e:	f240 21ae 	movw	r1, #686	; 0x2ae
    daa2:	2029      	movs	r0, #41	; 0x29
    daa4:	f7f6 ffa4 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    daa8:	2000      	movs	r0, #0
    daaa:	e7f6      	b.n	da9a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000daac <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    daac:	b530      	push	{r4, r5, lr}
    daae:	4613      	mov	r3, r2
    dab0:	e006      	b.n	dac0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    dab2:	18cc      	adds	r4, r1, r3
    dab4:	1ad5      	subs	r5, r2, r3
    dab6:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    daba:	1e5b      	subs	r3, r3, #1
    dabc:	5544      	strb	r4, [r0, r5]
    dabe:	b2db      	uxtb	r3, r3
    dac0:	2b00      	cmp	r3, #0
    dac2:	d1f6      	bne.n	dab2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    dac4:	bd30      	pop	{r4, r5, pc}

0000dac6 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    dac6:	b538      	push	{r3, r4, r5, lr}
    dac8:	4605      	mov	r5, r0
    daca:	460c      	mov	r4, r1
    dacc:	4668      	mov	r0, sp
    dace:	f7fe f819 	bl	bb04 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    dad2:	b308      	cbz	r0, db18 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x52>
    dad4:	f99d 0000 	ldrsb.w	r0, [sp]
    dad8:	7260      	strb	r0, [r4, #9]
    dada:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    dade:	72a1      	strb	r1, [r4, #10]
    dae0:	f994 100b 	ldrsb.w	r1, [r4, #11]
    dae4:	2200      	movs	r2, #0
    dae6:	1a41      	subs	r1, r0, r1
    dae8:	d500      	bpl.n	daec <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    daea:	4249      	negs	r1, r1
    daec:	7feb      	ldrb	r3, [r5, #31]
    daee:	428b      	cmp	r3, r1
    daf0:	dc10      	bgt.n	db14 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    daf2:	2bff      	cmp	r3, #255	; 0xff
    daf4:	d00e      	beq.n	db14 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    daf6:	7b21      	ldrb	r1, [r4, #12]
    daf8:	1c49      	adds	r1, r1, #1
    dafa:	b2c9      	uxtb	r1, r1
    dafc:	7321      	strb	r1, [r4, #12]
    dafe:	f895 3020 	ldrb.w	r3, [r5, #32]
    db02:	4299      	cmp	r1, r3
    db04:	d802      	bhi.n	db0c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x46>
    db06:	7ae1      	ldrb	r1, [r4, #11]
    db08:	297f      	cmp	r1, #127	; 0x7f
    db0a:	d103      	bne.n	db14 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    db0c:	72e0      	strb	r0, [r4, #11]
    db0e:	2000      	movs	r0, #0
    db10:	7320      	strb	r0, [r4, #12]
    db12:	2201      	movs	r2, #1
    db14:	4610      	mov	r0, r2
    db16:	bd38      	pop	{r3, r4, r5, pc}
    db18:	207f      	movs	r0, #127	; 0x7f
    db1a:	7260      	strb	r0, [r4, #9]
    db1c:	2000      	movs	r0, #0
    db1e:	bd38      	pop	{r3, r4, r5, pc}

0000db20 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    db20:	2300      	movs	r3, #0
    db22:	6283      	str	r3, [r0, #40]	; 0x28
    db24:	8602      	strh	r2, [r0, #48]	; 0x30
    db26:	f240 2371 	movw	r3, #625	; 0x271
    db2a:	435a      	muls	r2, r3
    db2c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    db30:	1e52      	subs	r2, r2, #1
    db32:	fbb2 f1f1 	udiv	r1, r2, r1
    db36:	62c1      	str	r1, [r0, #44]	; 0x2c
    db38:	4770      	bx	lr

0000db3a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    db3a:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    db3e:	4607      	mov	r7, r0
    db40:	4690      	mov	r8, r2
    db42:	468b      	mov	fp, r1
    db44:	2601      	movs	r6, #1
    db46:	4608      	mov	r0, r1
    db48:	f000 f957 	bl	ddfa <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    db4c:	4682      	mov	sl, r0
    db4e:	4658      	mov	r0, fp
    db50:	f000 f95f 	bl	de12 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    db54:	4681      	mov	r9, r0
    db56:	f7ff ff66 	bl	da26 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    db5a:	4604      	mov	r4, r0
    db5c:	4650      	mov	r0, sl
    db5e:	f7ff ff62 	bl	da26 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    db62:	4605      	mov	r5, r0
    db64:	ea54 0005 	orrs.w	r0, r4, r5
    db68:	d100      	bne.n	db6c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    db6a:	2600      	movs	r6, #0
    db6c:	f7fd fa6a 	bl	b044 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    db70:	ea10 0f09 	tst.w	r0, r9
    db74:	d100      	bne.n	db78 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    db76:	2400      	movs	r4, #0
    db78:	f7fd fa64 	bl	b044 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    db7c:	ea10 0f0a 	tst.w	r0, sl
    db80:	d100      	bne.n	db84 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    db82:	2500      	movs	r5, #0
    db84:	f897 0062 	ldrb.w	r0, [r7, #98]	; 0x62
    db88:	42a0      	cmp	r0, r4
    db8a:	d100      	bne.n	db8e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    db8c:	2400      	movs	r4, #0
    db8e:	f888 4000 	strb.w	r4, [r8]
    db92:	f897 0063 	ldrb.w	r0, [r7, #99]	; 0x63
    db96:	42a8      	cmp	r0, r5
    db98:	d100      	bne.n	db9c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    db9a:	2500      	movs	r5, #0
    db9c:	f888 5001 	strb.w	r5, [r8, #1]
    dba0:	b974      	cbnz	r4, dbc0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    dba2:	b96d      	cbnz	r5, dbc0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    dba4:	4658      	mov	r0, fp
    dba6:	f000 f932 	bl	de0e <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    dbaa:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
    dbae:	1a40      	subs	r0, r0, r1
    dbb0:	b200      	sxth	r0, r0
    dbb2:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    dbb6:	4288      	cmp	r0, r1
    dbb8:	dc01      	bgt.n	dbbe <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    dbba:	2800      	cmp	r0, #0
    dbbc:	dc00      	bgt.n	dbc0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    dbbe:	2600      	movs	r6, #0
    dbc0:	4630      	mov	r0, r6
    dbc2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000dbc6 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    dbc6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dbca:	4348      	muls	r0, r1
    dbcc:	4770      	bx	lr

0000dbce <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    dbce:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dbd2:	fb10 f001 	smulbb	r0, r0, r1
    dbd6:	4770      	bx	lr

0000dbd8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    dbd8:	b510      	push	{r4, lr}
    dbda:	2300      	movs	r3, #0
    dbdc:	461a      	mov	r2, r3
    dbde:	e003      	b.n	dbe8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    dbe0:	5c84      	ldrb	r4, [r0, r2]
    dbe2:	4323      	orrs	r3, r4
    dbe4:	1c52      	adds	r2, r2, #1
    dbe6:	b2d2      	uxtb	r2, r2
    dbe8:	428a      	cmp	r2, r1
    dbea:	d3f9      	bcc.n	dbe0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    dbec:	b10b      	cbz	r3, dbf2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    dbee:	2000      	movs	r0, #0
    dbf0:	bd10      	pop	{r4, pc}
    dbf2:	2001      	movs	r0, #1
    dbf4:	bd10      	pop	{r4, pc}

0000dbf6 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    dbf6:	b570      	push	{r4, r5, r6, lr}
    dbf8:	788b      	ldrb	r3, [r1, #2]
    dbfa:	780c      	ldrb	r4, [r1, #0]
    dbfc:	7ac5      	ldrb	r5, [r0, #11]
    dbfe:	4063      	eors	r3, r4
    dc00:	78cc      	ldrb	r4, [r1, #3]
    dc02:	7849      	ldrb	r1, [r1, #1]
    dc04:	404c      	eors	r4, r1
    dc06:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    dc0a:	ea83 0102 	eor.w	r1, r3, r2
    dc0e:	2200      	movs	r2, #0
    dc10:	b2cc      	uxtb	r4, r1
    dc12:	0a09      	lsrs	r1, r1, #8
    dc14:	fa94 f4a4 	rbit	r4, r4
    dc18:	fa91 f1a1 	rbit	r1, r1
    dc1c:	0e24      	lsrs	r4, r4, #24
    dc1e:	0e09      	lsrs	r1, r1, #24
    dc20:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    dc24:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    dc28:	1c52      	adds	r2, r2, #1
    dc2a:	4419      	add	r1, r3
    dc2c:	b2d2      	uxtb	r2, r2
    dc2e:	b289      	uxth	r1, r1
    dc30:	2a03      	cmp	r2, #3
    dc32:	d3ed      	bcc.n	dc10 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x1a>
    dc34:	4059      	eors	r1, r3
    dc36:	2225      	movs	r2, #37	; 0x25
    dc38:	fbb1 f3f2 	udiv	r3, r1, r2
    dc3c:	fb02 1213 	mls	r2, r2, r3, r1
    dc40:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    dc44:	f002 0607 	and.w	r6, r2, #7
    dc48:	785b      	ldrb	r3, [r3, #1]
    dc4a:	2401      	movs	r4, #1
    dc4c:	fa04 f606 	lsl.w	r6, r4, r6
    dc50:	4233      	tst	r3, r6
    dc52:	d001      	beq.n	dc58 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    dc54:	4610      	mov	r0, r2
    dc56:	bd70      	pop	{r4, r5, r6, pc}
    dc58:	434d      	muls	r5, r1
    dc5a:	0c29      	lsrs	r1, r5, #16
    dc5c:	1c49      	adds	r1, r1, #1
    dc5e:	b2c9      	uxtb	r1, r1
    dc60:	2300      	movs	r3, #0
    dc62:	18c5      	adds	r5, r0, r3
    dc64:	79aa      	ldrb	r2, [r5, #6]
    dc66:	428a      	cmp	r2, r1
    dc68:	d311      	bcc.n	dc8e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x98>
    dc6a:	786d      	ldrb	r5, [r5, #1]
    dc6c:	2200      	movs	r2, #0
    dc6e:	fa04 f602 	lsl.w	r6, r4, r2
    dc72:	4235      	tst	r5, r6
    dc74:	d001      	beq.n	dc7a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x84>
    dc76:	1e49      	subs	r1, r1, #1
    dc78:	b2c9      	uxtb	r1, r1
    dc7a:	b121      	cbz	r1, dc86 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    dc7c:	1c52      	adds	r2, r2, #1
    dc7e:	b2d2      	uxtb	r2, r2
    dc80:	2a08      	cmp	r2, #8
    dc82:	d3f4      	bcc.n	dc6e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x78>
    dc84:	e005      	b.n	dc92 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x9c>
    dc86:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    dc8a:	b2c0      	uxtb	r0, r0
    dc8c:	bd70      	pop	{r4, r5, r6, pc}
    dc8e:	1a89      	subs	r1, r1, r2
    dc90:	b2c9      	uxtb	r1, r1
    dc92:	1c5b      	adds	r3, r3, #1
    dc94:	b2db      	uxtb	r3, r3
    dc96:	2b05      	cmp	r3, #5
    dc98:	d3e3      	bcc.n	dc62 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x6c>
    dc9a:	f44f 7187 	mov.w	r1, #270	; 0x10e
    dc9e:	2046      	movs	r0, #70	; 0x46
    dca0:	f7f6 fea6 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000dca4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    dca4:	b510      	push	{r4, lr}
    dca6:	4604      	mov	r4, r0
    dca8:	f890 0020 	ldrb.w	r0, [r0, #32]
    dcac:	b108      	cbz	r0, dcb2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    dcae:	2825      	cmp	r0, #37	; 0x25
    dcb0:	d901      	bls.n	dcb6 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    dcb2:	2012      	movs	r0, #18
    dcb4:	bd10      	pop	{r4, pc}
    dcb6:	b12a      	cbz	r2, dcc4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    dcb8:	7d60      	ldrb	r0, [r4, #21]
    dcba:	b128      	cbz	r0, dcc8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    dcbc:	2801      	cmp	r0, #1
    dcbe:	d009      	beq.n	dcd4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    dcc0:	201f      	movs	r0, #31
    dcc2:	bd10      	pop	{r4, pc}
    dcc4:	2000      	movs	r0, #0
    dcc6:	bd10      	pop	{r4, pc}
    dcc8:	4620      	mov	r0, r4
    dcca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dcce:	4611      	mov	r1, r2
    dcd0:	f7f8 be32 	b.w	6938 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x124>
    dcd4:	88a2      	ldrh	r2, [r4, #4]
    dcd6:	f104 0015 	add.w	r0, r4, #21
    dcda:	310c      	adds	r1, #12
    dcdc:	f7ff ff8b 	bl	dbf6 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    dce0:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    dce4:	e7ee      	b.n	dcc4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000dce6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    dce6:	b530      	push	{r4, r5, lr}
    dce8:	1c42      	adds	r2, r0, #1
    dcea:	428a      	cmp	r2, r1
    dcec:	d004      	beq.n	dcf8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    dcee:	680a      	ldr	r2, [r1, #0]
    dcf0:	f8c0 2001 	str.w	r2, [r0, #1]
    dcf4:	7909      	ldrb	r1, [r1, #4]
    dcf6:	7141      	strb	r1, [r0, #5]
    dcf8:	7941      	ldrb	r1, [r0, #5]
    dcfa:	f001 011f 	and.w	r1, r1, #31
    dcfe:	7141      	strb	r1, [r0, #5]
    dd00:	2100      	movs	r1, #0
    dd02:	72c1      	strb	r1, [r0, #11]
    dd04:	1843      	adds	r3, r0, r1
    dd06:	1c49      	adds	r1, r1, #1
    dd08:	785c      	ldrb	r4, [r3, #1]
    dd0a:	b2c9      	uxtb	r1, r1
    dd0c:	f004 0201 	and.w	r2, r4, #1
    dd10:	0864      	lsrs	r4, r4, #1
    dd12:	f004 0501 	and.w	r5, r4, #1
    dd16:	4415      	add	r5, r2
    dd18:	0862      	lsrs	r2, r4, #1
    dd1a:	f002 0401 	and.w	r4, r2, #1
    dd1e:	442c      	add	r4, r5
    dd20:	0852      	lsrs	r2, r2, #1
    dd22:	f002 0501 	and.w	r5, r2, #1
    dd26:	442c      	add	r4, r5
    dd28:	0852      	lsrs	r2, r2, #1
    dd2a:	f002 0501 	and.w	r5, r2, #1
    dd2e:	442c      	add	r4, r5
    dd30:	0852      	lsrs	r2, r2, #1
    dd32:	f002 0501 	and.w	r5, r2, #1
    dd36:	442c      	add	r4, r5
    dd38:	0852      	lsrs	r2, r2, #1
    dd3a:	f002 0501 	and.w	r5, r2, #1
    dd3e:	442c      	add	r4, r5
    dd40:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    dd44:	719a      	strb	r2, [r3, #6]
    dd46:	7ac3      	ldrb	r3, [r0, #11]
    dd48:	2905      	cmp	r1, #5
    dd4a:	441a      	add	r2, r3
    dd4c:	72c2      	strb	r2, [r0, #11]
    dd4e:	d3d9      	bcc.n	dd04 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    dd50:	bd30      	pop	{r4, r5, pc}

0000dd52 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    dd52:	b570      	push	{r4, r5, r6, lr}
    dd54:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    dd58:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    dd5c:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    dd60:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    dd64:	88c0      	ldrh	r0, [r0, #6]
    dd66:	b131      	cbz	r1, dd76 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    dd68:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    dd6c:	d903      	bls.n	dd76 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    dd6e:	f640 5107 	movw	r1, #3335	; 0xd07
    dd72:	428a      	cmp	r2, r1
    dd74:	d90b      	bls.n	dd8e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    dd76:	1f91      	subs	r1, r2, #6
    dd78:	f640 467a 	movw	r6, #3194	; 0xc7a
    dd7c:	42b1      	cmp	r1, r6
    dd7e:	d80e      	bhi.n	dd9e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    dd80:	b16b      	cbz	r3, dd9e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    dd82:	2b08      	cmp	r3, #8
    dd84:	d80b      	bhi.n	dd9e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    dd86:	4293      	cmp	r3, r2
    dd88:	d209      	bcs.n	dd9e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    dd8a:	4294      	cmp	r4, r2
    dd8c:	d807      	bhi.n	dd9e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    dd8e:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    dd92:	d204      	bcs.n	dd9e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    dd94:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    dd98:	d801      	bhi.n	dd9e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    dd9a:	2001      	movs	r0, #1
    dd9c:	bd70      	pop	{r4, r5, r6, pc}
    dd9e:	2000      	movs	r0, #0
    dda0:	bd70      	pop	{r4, r5, r6, pc}

0000dda2 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    dda2:	6842      	ldr	r2, [r0, #4]
    dda4:	600a      	str	r2, [r1, #0]
    dda6:	7a00      	ldrb	r0, [r0, #8]
    dda8:	7108      	strb	r0, [r1, #4]
    ddaa:	4770      	bx	lr

0000ddac <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    ddac:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    ddb0:	4770      	bx	lr

0000ddb2 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    ddb2:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    ddb6:	4770      	bx	lr

0000ddb8 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    ddb8:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    ddbc:	4770      	bx	lr

0000ddbe <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    ddbe:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    ddc2:	4770      	bx	lr

0000ddc4 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    ddc4:	8980      	ldrh	r0, [r0, #12]
    ddc6:	8008      	strh	r0, [r1, #0]
    ddc8:	4770      	bx	lr

0000ddca <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    ddca:	f8d0 0016 	ldr.w	r0, [r0, #22]
    ddce:	6008      	str	r0, [r1, #0]
    ddd0:	4770      	bx	lr

0000ddd2 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    ddd2:	6842      	ldr	r2, [r0, #4]
    ddd4:	600a      	str	r2, [r1, #0]
    ddd6:	6880      	ldr	r0, [r0, #8]
    ddd8:	6048      	str	r0, [r1, #4]
    ddda:	4770      	bx	lr

0000dddc <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    dddc:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    dde0:	600a      	str	r2, [r1, #0]
    dde2:	6840      	ldr	r0, [r0, #4]
    dde4:	6048      	str	r0, [r1, #4]
    dde6:	4770      	bx	lr

0000dde8 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    dde8:	6842      	ldr	r2, [r0, #4]
    ddea:	600a      	str	r2, [r1, #0]
    ddec:	6880      	ldr	r0, [r0, #8]
    ddee:	6048      	str	r0, [r1, #4]
    ddf0:	4770      	bx	lr

0000ddf2 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    ddf2:	7800      	ldrb	r0, [r0, #0]
    ddf4:	f000 0003 	and.w	r0, r0, #3
    ddf8:	4770      	bx	lr

0000ddfa <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    ddfa:	7900      	ldrb	r0, [r0, #4]
    ddfc:	4770      	bx	lr

0000ddfe <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    ddfe:	8880      	ldrh	r0, [r0, #4]
    de00:	4770      	bx	lr

0000de02 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    de02:	88c0      	ldrh	r0, [r0, #6]
    de04:	4770      	bx	lr

0000de06 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    de06:	8900      	ldrh	r0, [r0, #8]
    de08:	4770      	bx	lr

0000de0a <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    de0a:	8940      	ldrh	r0, [r0, #10]
    de0c:	4770      	bx	lr

0000de0e <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    de0e:	88c0      	ldrh	r0, [r0, #6]
    de10:	4770      	bx	lr

0000de12 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    de12:	7940      	ldrb	r0, [r0, #5]
    de14:	4770      	bx	lr

0000de16 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    de16:	7900      	ldrb	r0, [r0, #4]
    de18:	4770      	bx	lr

0000de1a <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    de1a:	7900      	ldrb	r0, [r0, #4]
    de1c:	4770      	bx	lr

0000de1e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    de1e:	8901      	ldrh	r1, [r0, #8]
    de20:	291b      	cmp	r1, #27
    de22:	d30c      	bcc.n	de3e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    de24:	8941      	ldrh	r1, [r0, #10]
    de26:	f44f 72a4 	mov.w	r2, #328	; 0x148
    de2a:	4291      	cmp	r1, r2
    de2c:	d307      	bcc.n	de3e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    de2e:	8881      	ldrh	r1, [r0, #4]
    de30:	291b      	cmp	r1, #27
    de32:	d304      	bcc.n	de3e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    de34:	88c0      	ldrh	r0, [r0, #6]
    de36:	4290      	cmp	r0, r2
    de38:	d301      	bcc.n	de3e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    de3a:	2001      	movs	r0, #1
    de3c:	4770      	bx	lr
    de3e:	2000      	movs	r0, #0
    de40:	4770      	bx	lr

0000de42 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    de42:	b510      	push	{r4, lr}
    de44:	29fb      	cmp	r1, #251	; 0xfb
    de46:	d904      	bls.n	de52 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    de48:	f240 515b 	movw	r1, #1371	; 0x55b
    de4c:	202a      	movs	r0, #42	; 0x2a
    de4e:	f7f6 fdcf 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de52:	7041      	strb	r1, [r0, #1]
    de54:	bd10      	pop	{r4, pc}

0000de56 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    de56:	7901      	ldrb	r1, [r0, #4]
    de58:	0749      	lsls	r1, r1, #29
    de5a:	d004      	beq.n	de66 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    de5c:	7940      	ldrb	r0, [r0, #5]
    de5e:	0740      	lsls	r0, r0, #29
    de60:	d001      	beq.n	de66 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    de62:	2001      	movs	r0, #1
    de64:	4770      	bx	lr
    de66:	2000      	movs	r0, #0
    de68:	4770      	bx	lr

0000de6a <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    de6a:	7900      	ldrb	r0, [r0, #4]
    de6c:	4770      	bx	lr

0000de6e <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    de6e:	7940      	ldrb	r0, [r0, #5]
    de70:	4770      	bx	lr

0000de72 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    de72:	7101      	strb	r1, [r0, #4]
    de74:	4770      	bx	lr

0000de76 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    de76:	7141      	strb	r1, [r0, #5]
    de78:	4770      	bx	lr

0000de7a <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    de7a:	b510      	push	{r4, lr}
    de7c:	2a1b      	cmp	r2, #27
    de7e:	d904      	bls.n	de8a <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    de80:	f240 31c2 	movw	r1, #962	; 0x3c2
    de84:	202a      	movs	r0, #42	; 0x2a
    de86:	f7f6 fdb3 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de8a:	7042      	strb	r2, [r0, #1]
    de8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    de90:	1cc0      	adds	r0, r0, #3
    de92:	f7fe bbd4 	b.w	c63e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000de96 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    de96:	6809      	ldr	r1, [r1, #0]
    de98:	60c1      	str	r1, [r0, #12]
    de9a:	4770      	bx	lr

0000de9c <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    de9c:	680a      	ldr	r2, [r1, #0]
    de9e:	6042      	str	r2, [r0, #4]
    dea0:	6849      	ldr	r1, [r1, #4]
    dea2:	6081      	str	r1, [r0, #8]
    dea4:	4770      	bx	lr

0000dea6 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    dea6:	680a      	ldr	r2, [r1, #0]
    dea8:	6042      	str	r2, [r0, #4]
    deaa:	6849      	ldr	r1, [r1, #4]
    deac:	6081      	str	r1, [r0, #8]
    deae:	4770      	bx	lr

0000deb0 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    deb0:	680a      	ldr	r2, [r1, #0]
    deb2:	6042      	str	r2, [r0, #4]
    deb4:	6849      	ldr	r1, [r1, #4]
    deb6:	6081      	str	r1, [r0, #8]
    deb8:	4770      	bx	lr

0000deba <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    deba:	7802      	ldrb	r2, [r0, #0]
    debc:	f001 0103 	and.w	r1, r1, #3
    dec0:	f022 0203 	bic.w	r2, r2, #3
    dec4:	430a      	orrs	r2, r1
    dec6:	7002      	strb	r2, [r0, #0]
    dec8:	4770      	bx	lr

0000deca <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    deca:	7101      	strb	r1, [r0, #4]
    decc:	0a09      	lsrs	r1, r1, #8
    dece:	7141      	strb	r1, [r0, #5]
    ded0:	4770      	bx	lr

0000ded2 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    ded2:	7181      	strb	r1, [r0, #6]
    ded4:	0a09      	lsrs	r1, r1, #8
    ded6:	71c1      	strb	r1, [r0, #7]
    ded8:	4770      	bx	lr

0000deda <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    deda:	7201      	strb	r1, [r0, #8]
    dedc:	0a09      	lsrs	r1, r1, #8
    dede:	7241      	strb	r1, [r0, #9]
    dee0:	4770      	bx	lr

0000dee2 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    dee2:	7281      	strb	r1, [r0, #10]
    dee4:	0a09      	lsrs	r1, r1, #8
    dee6:	72c1      	strb	r1, [r0, #11]
    dee8:	4770      	bx	lr

0000deea <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    deea:	b570      	push	{r4, r5, r6, lr}
    deec:	7802      	ldrb	r2, [r0, #0]
    deee:	f002 020f 	and.w	r2, r2, #15
    def2:	2a03      	cmp	r2, #3
    def4:	d02c      	beq.n	df50 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x66>
    def6:	2a05      	cmp	r2, #5
    def8:	d12d      	bne.n	df56 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    defa:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    defe:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    df02:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    df06:	7d83      	ldrb	r3, [r0, #22]
    df08:	b141      	cbz	r1, df1c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    df0a:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    df0e:	d905      	bls.n	df1c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    df10:	f640 5107 	movw	r1, #3335	; 0xd07
    df14:	428a      	cmp	r2, r1
    df16:	d801      	bhi.n	df1c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    df18:	2101      	movs	r1, #1
    df1a:	e000      	b.n	df1e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x34>
    df1c:	2100      	movs	r1, #0
    df1e:	7846      	ldrb	r6, [r0, #1]
    df20:	2e22      	cmp	r6, #34	; 0x22
    df22:	d118      	bne.n	df56 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    df24:	b959      	cbnz	r1, df3e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x54>
    df26:	1f91      	subs	r1, r2, #6
    df28:	f640 467a 	movw	r6, #3194	; 0xc7a
    df2c:	42b1      	cmp	r1, r6
    df2e:	d812      	bhi.n	df56 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    df30:	b18b      	cbz	r3, df56 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    df32:	2b08      	cmp	r3, #8
    df34:	d80f      	bhi.n	df56 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    df36:	4293      	cmp	r3, r2
    df38:	d20d      	bcs.n	df56 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    df3a:	4294      	cmp	r4, r2
    df3c:	d80b      	bhi.n	df56 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    df3e:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    df42:	d208      	bcs.n	df56 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    df44:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    df48:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    df4c:	d905      	bls.n	df5a <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x70>
    df4e:	e002      	b.n	df56 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    df50:	7840      	ldrb	r0, [r0, #1]
    df52:	280c      	cmp	r0, #12
    df54:	d001      	beq.n	df5a <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x70>
    df56:	2000      	movs	r0, #0
    df58:	bd70      	pop	{r4, r5, r6, pc}
    df5a:	2001      	movs	r0, #1
    df5c:	bd70      	pop	{r4, r5, r6, pc}

0000df5e <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    df5e:	b570      	push	{r4, r5, r6, lr}
    df60:	4614      	mov	r4, r2
    df62:	4605      	mov	r5, r0
    df64:	2a1f      	cmp	r2, #31
    df66:	d903      	bls.n	df70 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    df68:	21b2      	movs	r1, #178	; 0xb2
    df6a:	202a      	movs	r0, #42	; 0x2a
    df6c:	f7f6 fd40 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df70:	f105 0009 	add.w	r0, r5, #9
    df74:	f7fe fb63 	bl	c63e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    df78:	1da4      	adds	r4, r4, #6
    df7a:	706c      	strb	r4, [r5, #1]
    df7c:	bd70      	pop	{r4, r5, r6, pc}

0000df7e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    df7e:	b510      	push	{r4, lr}
    df80:	7802      	ldrb	r2, [r0, #0]
    df82:	f001 030f 	and.w	r3, r1, #15
    df86:	f022 020f 	bic.w	r2, r2, #15
    df8a:	431a      	orrs	r2, r3
    df8c:	7002      	strb	r2, [r0, #0]
    df8e:	2907      	cmp	r1, #7
    df90:	d20c      	bcs.n	dfac <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    df92:	e8df f001 	tbb	[pc, r1]
    df96:	0604      	.short	0x0604
    df98:	08040604 	.word	0x08040604
    df9c:	0004      	.short	0x0004
    df9e:	2106      	movs	r1, #6
    dfa0:	e002      	b.n	dfa8 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    dfa2:	210c      	movs	r1, #12
    dfa4:	e000      	b.n	dfa8 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    dfa6:	2122      	movs	r1, #34	; 0x22
    dfa8:	7041      	strb	r1, [r0, #1]
    dfaa:	bd10      	pop	{r4, pc}
    dfac:	216e      	movs	r1, #110	; 0x6e
    dfae:	202a      	movs	r0, #42	; 0x2a
    dfb0:	f7f6 fd1e 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000dfb4 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    dfb4:	680a      	ldr	r2, [r1, #0]
    dfb6:	f840 2f09 	str.w	r2, [r0, #9]!
    dfba:	8889      	ldrh	r1, [r1, #4]
    dfbc:	8081      	strh	r1, [r0, #4]
    dfbe:	4770      	bx	lr

0000dfc0 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    dfc0:	7802      	ldrb	r2, [r0, #0]
    dfc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    dfc6:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    dfca:	7002      	strb	r2, [r0, #0]
    dfcc:	4770      	bx	lr

0000dfce <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    dfce:	680a      	ldr	r2, [r1, #0]
    dfd0:	f840 2f03 	str.w	r2, [r0, #3]!
    dfd4:	8889      	ldrh	r1, [r1, #4]
    dfd6:	8081      	strh	r1, [r0, #4]
    dfd8:	4770      	bx	lr

0000dfda <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    dfda:	7802      	ldrb	r2, [r0, #0]
    dfdc:	2340      	movs	r3, #64	; 0x40
    dfde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    dfe2:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    dfe6:	430a      	orrs	r2, r1
    dfe8:	7002      	strb	r2, [r0, #0]
    dfea:	4770      	bx	lr

0000dfec <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    dfec:	b570      	push	{r4, r5, r6, lr}
    dfee:	4614      	mov	r4, r2
    dff0:	4605      	mov	r5, r0
    dff2:	2a1f      	cmp	r2, #31
    dff4:	d903      	bls.n	dffe <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    dff6:	21d4      	movs	r1, #212	; 0xd4
    dff8:	202a      	movs	r0, #42	; 0x2a
    dffa:	f7f6 fcf9 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dffe:	f105 0009 	add.w	r0, r5, #9
    e002:	f7fe fb1c 	bl	c63e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e006:	1da4      	adds	r4, r4, #6
    e008:	706c      	strb	r4, [r5, #1]
    e00a:	bd70      	pop	{r4, r5, r6, pc}

0000e00c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    e00c:	2101      	movs	r1, #1
    e00e:	f000 b853 	b.w	e0b8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>

0000e012 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    e012:	6841      	ldr	r1, [r0, #4]
    e014:	2200      	movs	r2, #0
    e016:	f891 30fa 	ldrb.w	r3, [r1, #250]	; 0xfa
    e01a:	2b00      	cmp	r3, #0
    e01c:	d004      	beq.n	e028 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    e01e:	f881 20fa 	strb.w	r2, [r1, #250]	; 0xfa
    e022:	6840      	ldr	r0, [r0, #4]
    e024:	f000 bc87 	b.w	e936 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>
    e028:	4770      	bx	lr
    e02a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e02e:	460e      	mov	r6, r1
    e030:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    e034:	4617      	mov	r7, r2
    e036:	39ff      	subs	r1, #255	; 0xff
    e038:	d014      	beq.n	e064 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    e03a:	8030      	strh	r0, [r6, #0]
    e03c:	2100      	movs	r1, #0
    e03e:	7171      	strb	r1, [r6, #5]
    e040:	f7f7 f90a 	bl	5258 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e044:	4604      	mov	r4, r0
    e046:	f7ff f915 	bl	d274 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    e04a:	0005      	movs	r5, r0
    e04c:	d00a      	beq.n	e064 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    e04e:	4620      	mov	r0, r4
    e050:	4629      	mov	r1, r5
    e052:	aa01      	add	r2, sp, #4
    e054:	f7ff f931 	bl	d2ba <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    e058:	8070      	strh	r0, [r6, #2]
    e05a:	b130      	cbz	r0, e06a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x58>
    e05c:	28fb      	cmp	r0, #251	; 0xfb
    e05e:	d906      	bls.n	e06e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x5c>
    e060:	21c9      	movs	r1, #201	; 0xc9
    e062:	e026      	b.n	e0b2 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    e064:	2000      	movs	r0, #0
    e066:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e06a:	21c8      	movs	r1, #200	; 0xc8
    e06c:	e021      	b.n	e0b2 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    e06e:	9801      	ldr	r0, [sp, #4]
    e070:	f7ff febf 	bl	ddf2 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    e074:	2801      	cmp	r0, #1
    e076:	d003      	beq.n	e080 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    e078:	2802      	cmp	r0, #2
    e07a:	d001      	beq.n	e080 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    e07c:	21d8      	movs	r1, #216	; 0xd8
    e07e:	e018      	b.n	e0b2 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    e080:	7130      	strb	r0, [r6, #4]
    e082:	4629      	mov	r1, r5
    e084:	8873      	ldrh	r3, [r6, #2]
    e086:	2503      	movs	r5, #3
    e088:	4620      	mov	r0, r4
    e08a:	463a      	mov	r2, r7
    e08c:	9500      	str	r5, [sp, #0]
    e08e:	f7fe ffe6 	bl	d05e <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    e092:	4620      	mov	r0, r4
    e094:	60b7      	str	r7, [r6, #8]
    e096:	f7ff f89c 	bl	d1d2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    e09a:	b138      	cbz	r0, e0ac <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9a>
    e09c:	2100      	movs	r1, #0
    e09e:	4620      	mov	r0, r4
    e0a0:	460a      	mov	r2, r1
    e0a2:	f7ff f9e0 	bl	d466 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    e0a6:	b118      	cbz	r0, e0b0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9e>
    e0a8:	2001      	movs	r0, #1
    e0aa:	e7dc      	b.n	e066 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x54>
    e0ac:	21e8      	movs	r1, #232	; 0xe8
    e0ae:	e000      	b.n	e0b2 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    e0b0:	21ed      	movs	r1, #237	; 0xed
    e0b2:	202b      	movs	r0, #43	; 0x2b
    e0b4:	f7f6 fc9c 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e0b8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e0bc:	4604      	mov	r4, r0
    e0be:	460e      	mov	r6, r1
    e0c0:	2000      	movs	r0, #0
    e0c2:	f7f6 fe9b 	bl	4dfc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e0c6:	4605      	mov	r5, r0
    e0c8:	2000      	movs	r0, #0
    e0ca:	b916      	cbnz	r6, e0d2 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc0>
    e0cc:	2001      	movs	r0, #1
    e0ce:	f7f6 fe95 	bl	4dfc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e0d2:	2600      	movs	r6, #0
    e0d4:	46b0      	mov	r8, r6
    e0d6:	182f      	adds	r7, r5, r0
    e0d8:	e017      	b.n	e10a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xf8>
    e0da:	8820      	ldrh	r0, [r4, #0]
    e0dc:	1c40      	adds	r0, r0, #1
    e0de:	b280      	uxth	r0, r0
    e0e0:	8020      	strh	r0, [r4, #0]
    e0e2:	42b8      	cmp	r0, r7
    e0e4:	d302      	bcc.n	e0ec <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xda>
    e0e6:	4640      	mov	r0, r8
    e0e8:	f8a4 8000 	strh.w	r8, [r4]
    e0ec:	b280      	uxth	r0, r0
    e0ee:	42a8      	cmp	r0, r5
    e0f0:	d304      	bcc.n	e0fc <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    e0f2:	42b8      	cmp	r0, r7
    e0f4:	d202      	bcs.n	e0fc <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    e0f6:	2000      	movs	r0, #0
    e0f8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e0fc:	4669      	mov	r1, sp
    e0fe:	f7ff fbcf 	bl	d8a0 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e102:	2800      	cmp	r0, #0
    e104:	d0f8      	beq.n	e0f8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>
    e106:	1c76      	adds	r6, r6, #1
    e108:	b2f6      	uxtb	r6, r6
    e10a:	42b7      	cmp	r7, r6
    e10c:	d8e5      	bhi.n	e0da <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc8>
    e10e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e112:	8020      	strh	r0, [r4, #0]
    e114:	2012      	movs	r0, #18
    e116:	e7ef      	b.n	e0f8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>

0000e118 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    e118:	b570      	push	{r4, r5, r6, lr}
    e11a:	8050      	strh	r0, [r2, #2]
    e11c:	890c      	ldrh	r4, [r1, #8]
    e11e:	8094      	strh	r4, [r2, #4]
    e120:	898b      	ldrh	r3, [r1, #12]
    e122:	80d3      	strh	r3, [r2, #6]
    e124:	8948      	ldrh	r0, [r1, #10]
    e126:	8110      	strh	r0, [r2, #8]
    e128:	89cd      	ldrh	r5, [r1, #14]
    e12a:	8155      	strh	r5, [r2, #10]
    e12c:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    e12e:	42ae      	cmp	r6, r5
    e130:	d108      	bne.n	e144 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e132:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    e134:	4285      	cmp	r5, r0
    e136:	d105      	bne.n	e144 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e138:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    e13a:	429d      	cmp	r5, r3
    e13c:	d102      	bne.n	e144 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e13e:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    e140:	42a3      	cmp	r3, r4
    e142:	d001      	beq.n	e148 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    e144:	2301      	movs	r3, #1
    e146:	e000      	b.n	e14a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    e148:	2300      	movs	r3, #0
    e14a:	7313      	strb	r3, [r2, #12]
    e14c:	8548      	strh	r0, [r1, #42]	; 0x2a
    e14e:	8950      	ldrh	r0, [r2, #10]
    e150:	85c8      	strh	r0, [r1, #46]	; 0x2e
    e152:	8890      	ldrh	r0, [r2, #4]
    e154:	8588      	strh	r0, [r1, #44]	; 0x2c
    e156:	88d0      	ldrh	r0, [r2, #6]
    e158:	8608      	strh	r0, [r1, #48]	; 0x30
    e15a:	2001      	movs	r0, #1
    e15c:	7010      	strb	r0, [r2, #0]
    e15e:	bd70      	pop	{r4, r5, r6, pc}

0000e160 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e160:	b510      	push	{r4, lr}
    e162:	888c      	ldrh	r4, [r1, #4]
    e164:	890a      	ldrh	r2, [r1, #8]
    e166:	884b      	ldrh	r3, [r1, #2]
    e168:	88c9      	ldrh	r1, [r1, #6]
    e16a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    e16e:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    e172:	f8a0 4042 	strh.w	r4, [r0, #66]	; 0x42
    e176:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
    e17a:	bd10      	pop	{r4, pc}

0000e17c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e17c:	b570      	push	{r4, r5, r6, lr}
    e17e:	4615      	mov	r5, r2
    e180:	460c      	mov	r4, r1
    e182:	f000 f8c1 	bl	e308 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x50>
    e186:	3096      	adds	r0, #150	; 0x96
    e188:	4428      	add	r0, r5
    e18a:	42a0      	cmp	r0, r4
    e18c:	d801      	bhi.n	e192 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e18e:	1a20      	subs	r0, r4, r0
    e190:	bd70      	pop	{r4, r5, r6, pc}
    e192:	2000      	movs	r0, #0
    e194:	bd70      	pop	{r4, r5, r6, pc}

0000e196 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e196:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e19a:	4604      	mov	r4, r0
    e19c:	8dc7      	ldrh	r7, [r0, #46]	; 0x2e
    e19e:	8e46      	ldrh	r6, [r0, #50]	; 0x32
    e1a0:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
    e1a4:	8f00      	ldrh	r0, [r0, #56]	; 0x38
    e1a6:	4285      	cmp	r5, r0
    e1a8:	d300      	bcc.n	e1ac <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x16>
    e1aa:	4605      	mov	r5, r0
    e1ac:	4620      	mov	r0, r4
    e1ae:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
    e1b2:	f000 f89b 	bl	e2ec <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e1b6:	4601      	mov	r1, r0
    e1b8:	85e5      	strh	r5, [r4, #46]	; 0x2e
    e1ba:	8661      	strh	r1, [r4, #50]	; 0x32
    e1bc:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    e1be:	f104 0024 	add.w	r0, r4, #36	; 0x24
    e1c2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    e1c4:	4680      	mov	r8, r0
    e1c6:	42aa      	cmp	r2, r5
    e1c8:	d200      	bcs.n	e1cc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
    e1ca:	462a      	mov	r2, r5
    e1cc:	428b      	cmp	r3, r1
    e1ce:	d200      	bcs.n	e1d2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    e1d0:	460b      	mov	r3, r1
    e1d2:	8202      	strh	r2, [r0, #16]
    e1d4:	f8a8 3012 	strh.w	r3, [r8, #18]
    e1d8:	42bd      	cmp	r5, r7
    e1da:	d101      	bne.n	e1e0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4a>
    e1dc:	42b1      	cmp	r1, r6
    e1de:	d001      	beq.n	e1e4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4e>
    e1e0:	2001      	movs	r0, #1
    e1e2:	e000      	b.n	e1e6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e1e4:	2000      	movs	r0, #0
    e1e6:	4681      	mov	r9, r0
    e1e8:	f8b4 5040 	ldrh.w	r5, [r4, #64]	; 0x40
    e1ec:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    e1ee:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
    e1f0:	8e26      	ldrh	r6, [r4, #48]	; 0x30
    e1f2:	4285      	cmp	r5, r0
    e1f4:	d300      	bcc.n	e1f8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x62>
    e1f6:	4605      	mov	r5, r0
    e1f8:	f894 1062 	ldrb.w	r1, [r4, #98]	; 0x62
    e1fc:	4620      	mov	r0, r4
    e1fe:	f000 f87c 	bl	e2fa <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    e202:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    e206:	2902      	cmp	r1, #2
    e208:	d108      	bne.n	e21c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x86>
    e20a:	42af      	cmp	r7, r5
    e20c:	d200      	bcs.n	e210 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7a>
    e20e:	463d      	mov	r5, r7
    e210:	4286      	cmp	r6, r0
    e212:	d200      	bcs.n	e216 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x80>
    e214:	4630      	mov	r0, r6
    e216:	2100      	movs	r1, #0
    e218:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
    e21c:	f8a8 5008 	strh.w	r5, [r8, #8]
    e220:	f8a8 000c 	strh.w	r0, [r8, #12]
    e224:	42bd      	cmp	r5, r7
    e226:	d101      	bne.n	e22c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x96>
    e228:	42b0      	cmp	r0, r6
    e22a:	d001      	beq.n	e230 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e22c:	2001      	movs	r0, #1
    e22e:	e000      	b.n	e232 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9c>
    e230:	2000      	movs	r0, #0
    e232:	ea40 0009 	orr.w	r0, r0, r9
    e236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e23a <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e23e:	4616      	mov	r6, r2
    e240:	460f      	mov	r7, r1
    e242:	4604      	mov	r4, r0
    e244:	f000 f860 	bl	e308 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x50>
    e248:	4605      	mov	r5, r0
    e24a:	463a      	mov	r2, r7
    e24c:	6861      	ldr	r1, [r4, #4]
    e24e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    e250:	f000 f847 	bl	e2e2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    e254:	19a9      	adds	r1, r5, r6
    e256:	4281      	cmp	r1, r0
    e258:	d300      	bcc.n	e25c <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e25a:	4608      	mov	r0, r1
    e25c:	62a0      	str	r0, [r4, #40]	; 0x28
    e25e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e262 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e262:	221b      	movs	r2, #27
    e264:	8402      	strh	r2, [r0, #32]
    e266:	8382      	strh	r2, [r0, #28]
    e268:	82c2      	strh	r2, [r0, #22]
    e26a:	8282      	strh	r2, [r0, #20]
    e26c:	8142      	strh	r2, [r0, #10]
    e26e:	8202      	strh	r2, [r0, #16]
    e270:	8102      	strh	r2, [r0, #8]
    e272:	8542      	strh	r2, [r0, #42]	; 0x2a
    e274:	8582      	strh	r2, [r0, #44]	; 0x2c
    e276:	8482      	strh	r2, [r0, #36]	; 0x24
    e278:	2900      	cmp	r1, #0
    e27a:	d10a      	bne.n	e292 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e27c:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e280:	8441      	strh	r1, [r0, #34]	; 0x22
    e282:	83c1      	strh	r1, [r0, #30]
    e284:	8341      	strh	r1, [r0, #26]
    e286:	8301      	strh	r1, [r0, #24]
    e288:	81c1      	strh	r1, [r0, #14]
    e28a:	8241      	strh	r1, [r0, #18]
    e28c:	8181      	strh	r1, [r0, #12]
    e28e:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e290:	8601      	strh	r1, [r0, #48]	; 0x30
    e292:	4770      	bx	lr

0000e294 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e294:	6800      	ldr	r0, [r0, #0]
    e296:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e29a:	4290      	cmp	r0, r2
    e29c:	d903      	bls.n	e2a6 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e29e:	1a40      	subs	r0, r0, r1
    e2a0:	389c      	subs	r0, #156	; 0x9c
    e2a2:	0840      	lsrs	r0, r0, #1
    e2a4:	4770      	bx	lr
    e2a6:	2000      	movs	r0, #0
    e2a8:	4770      	bx	lr

0000e2aa <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e2aa:	b510      	push	{r4, lr}
    e2ac:	9c02      	ldr	r4, [sp, #8]
    e2ae:	8281      	strh	r1, [r0, #20]
    e2b0:	82c2      	strh	r2, [r0, #22]
    e2b2:	8303      	strh	r3, [r0, #24]
    e2b4:	8344      	strh	r4, [r0, #26]
    e2b6:	bd10      	pop	{r4, pc}

0000e2b8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    e2b8:	8050      	strh	r0, [r2, #2]
    e2ba:	8a88      	ldrh	r0, [r1, #20]
    e2bc:	8090      	strh	r0, [r2, #4]
    e2be:	8ac8      	ldrh	r0, [r1, #22]
    e2c0:	80d0      	strh	r0, [r2, #6]
    e2c2:	8b08      	ldrh	r0, [r1, #24]
    e2c4:	8110      	strh	r0, [r2, #8]
    e2c6:	8b48      	ldrh	r0, [r1, #26]
    e2c8:	8150      	strh	r0, [r2, #10]
    e2ca:	2001      	movs	r0, #1
    e2cc:	7010      	strb	r0, [r2, #0]
    e2ce:	4770      	bx	lr
    e2d0:	2902      	cmp	r1, #2
    e2d2:	d003      	beq.n	e2dc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    e2d4:	00c0      	lsls	r0, r0, #3
    e2d6:	3070      	adds	r0, #112	; 0x70
    e2d8:	b280      	uxth	r0, r0
    e2da:	4770      	bx	lr
    e2dc:	0080      	lsls	r0, r0, #2
    e2de:	303c      	adds	r0, #60	; 0x3c
    e2e0:	e7fa      	b.n	e2d8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    e2e2:	4288      	cmp	r0, r1
    e2e4:	d300      	bcc.n	e2e8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    e2e6:	4608      	mov	r0, r1
    e2e8:	1a80      	subs	r0, r0, r2
    e2ea:	4770      	bx	lr
    e2ec:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    e2f0:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
    e2f2:	4281      	cmp	r1, r0
    e2f4:	d200      	bcs.n	e2f8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x40>
    e2f6:	4608      	mov	r0, r1
    e2f8:	4770      	bx	lr
    e2fa:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
    e2fe:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
    e300:	4281      	cmp	r1, r0
    e302:	d200      	bcs.n	e306 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    e304:	4608      	mov	r0, r1
    e306:	4770      	bx	lr
    e308:	2196      	movs	r1, #150	; 0x96
    e30a:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    e30e:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    e312:	f000 b800 	b.w	e316 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    e316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e31a:	460d      	mov	r5, r1
    e31c:	4606      	mov	r6, r0
    e31e:	4698      	mov	r8, r3
    e320:	4617      	mov	r7, r2
    e322:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
    e324:	4611      	mov	r1, r2
    e326:	f7ff ffd3 	bl	e2d0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e32a:	4604      	mov	r4, r0
    e32c:	4639      	mov	r1, r7
    e32e:	4630      	mov	r0, r6
    e330:	f7ff ffe3 	bl	e2fa <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    e334:	42a0      	cmp	r0, r4
    e336:	d200      	bcs.n	e33a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x82>
    e338:	4604      	mov	r4, r0
    e33a:	8eb0      	ldrh	r0, [r6, #52]	; 0x34
    e33c:	4641      	mov	r1, r8
    e33e:	f7ff ffc7 	bl	e2d0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e342:	4607      	mov	r7, r0
    e344:	4641      	mov	r1, r8
    e346:	4630      	mov	r0, r6
    e348:	f7ff ffd0 	bl	e2ec <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e34c:	42b8      	cmp	r0, r7
    e34e:	d300      	bcc.n	e352 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9a>
    e350:	4638      	mov	r0, r7
    e352:	4420      	add	r0, r4
    e354:	4428      	add	r0, r5
    e356:	1d80      	adds	r0, r0, #6
    e358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e35c:	2801      	cmp	r0, #1
    e35e:	d102      	bne.n	e366 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xae>
    e360:	7948      	ldrb	r0, [r1, #5]
    e362:	0980      	lsrs	r0, r0, #6
    e364:	d001      	beq.n	e36a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    e366:	2000      	movs	r0, #0
    e368:	4770      	bx	lr
    e36a:	2001      	movs	r0, #1
    e36c:	4770      	bx	lr
    e36e:	2801      	cmp	r0, #1
    e370:	d106      	bne.n	e380 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc8>
    e372:	7948      	ldrb	r0, [r1, #5]
    e374:	2101      	movs	r1, #1
    e376:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e37a:	d101      	bne.n	e380 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc8>
    e37c:	2001      	movs	r0, #1
    e37e:	4770      	bx	lr
    e380:	2000      	movs	r0, #0
    e382:	4770      	bx	lr
    e384:	2802      	cmp	r0, #2
    e386:	d003      	beq.n	e390 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd8>
    e388:	2803      	cmp	r0, #3
    e38a:	d001      	beq.n	e390 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd8>
    e38c:	2000      	movs	r0, #0
    e38e:	4770      	bx	lr
    e390:	2001      	movs	r0, #1
    e392:	4770      	bx	lr

0000e394 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    e394:	b510      	push	{r4, lr}
    e396:	4604      	mov	r4, r0
    e398:	7c00      	ldrb	r0, [r0, #16]
    e39a:	f7ff fff3 	bl	e384 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    e39e:	b148      	cbz	r0, e3b4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e3a0:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    e3a4:	f104 0150 	add.w	r1, r4, #80	; 0x50
    e3a8:	f7ff fa37 	bl	d81a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e3ac:	2808      	cmp	r0, #8
    e3ae:	d001      	beq.n	e3b4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e3b0:	2001      	movs	r0, #1
    e3b2:	bd10      	pop	{r4, pc}
    e3b4:	7c20      	ldrb	r0, [r4, #16]
    e3b6:	b118      	cbz	r0, e3c0 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e3b8:	2802      	cmp	r0, #2
    e3ba:	d001      	beq.n	e3c0 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e3bc:	7de0      	ldrb	r0, [r4, #23]
    e3be:	bd10      	pop	{r4, pc}
    e3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e3c4:	2000      	movs	r0, #0
    e3c6:	f7f7 ba01 	b.w	57cc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000e3ca <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    e3ca:	b508      	push	{r3, lr}
    e3cc:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    e3d0:	f88d 1000 	strb.w	r1, [sp]
    e3d4:	9900      	ldr	r1, [sp, #0]
    e3d6:	9100      	str	r1, [sp, #0]
    e3d8:	f89d 1000 	ldrb.w	r1, [sp]
    e3dc:	b109      	cbz	r1, e3e2 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    e3de:	2001      	movs	r0, #1
    e3e0:	bd08      	pop	{r3, pc}
    e3e2:	f890 009a 	ldrb.w	r0, [r0, #154]	; 0x9a
    e3e6:	f88d 0000 	strb.w	r0, [sp]
    e3ea:	9800      	ldr	r0, [sp, #0]
    e3ec:	9000      	str	r0, [sp, #0]
    e3ee:	f89d 0000 	ldrb.w	r0, [sp]
    e3f2:	2000      	movs	r0, #0
    e3f4:	bd08      	pop	{r3, pc}

0000e3f6 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    e3f6:	20ff      	movs	r0, #255	; 0xff
    e3f8:	7008      	strb	r0, [r1, #0]
    e3fa:	4770      	bx	lr

0000e3fc <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    e3fc:	b570      	push	{r4, r5, r6, lr}
    e3fe:	460d      	mov	r5, r1
    e400:	4604      	mov	r4, r0
    e402:	22e8      	movs	r2, #232	; 0xe8
    e404:	2100      	movs	r1, #0
    e406:	f7fe f994 	bl	c732 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e40a:	20ff      	movs	r0, #255	; 0xff
    e40c:	7020      	strb	r0, [r4, #0]
    e40e:	207f      	movs	r0, #127	; 0x7f
    e410:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    e414:	2013      	movs	r0, #19
    e416:	8060      	strh	r0, [r4, #2]
    e418:	4628      	mov	r0, r5
    e41a:	f7f6 ffb3 	bl	5384 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    e41e:	62e0      	str	r0, [r4, #44]	; 0x2c
    e420:	2002      	movs	r0, #2
    e422:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
    e426:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
    e42a:	2000      	movs	r0, #0
    e42c:	73a0      	strb	r0, [r4, #14]
    e42e:	f104 0020 	add.w	r0, r4, #32
    e432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e436:	f000 b9a0 	b.w	e77a <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000e43a <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    e43a:	7880      	ldrb	r0, [r0, #2]
    e43c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    e440:	b108      	cbz	r0, e446 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    e442:	2000      	movs	r0, #0
    e444:	4770      	bx	lr
    e446:	201f      	movs	r0, #31
    e448:	4770      	bx	lr

0000e44a <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    e44a:	f7f9 ba2f 	b.w	78ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>

0000e44e <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    e44e:	6880      	ldr	r0, [r0, #8]
    e450:	4770      	bx	lr

0000e452 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    e452:	2001      	movs	r0, #1
    e454:	4770      	bx	lr

0000e456 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    e456:	b510      	push	{r4, lr}
    e458:	4604      	mov	r4, r0
    e45a:	3020      	adds	r0, #32
    e45c:	f000 f94d 	bl	e6fa <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    e460:	8861      	ldrh	r1, [r4, #2]
    e462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e466:	2228      	movs	r2, #40	; 0x28
    e468:	f7f9 bbdc 	b.w	7c24 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000e46c <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    e46c:	2200      	movs	r2, #0
    e46e:	6282      	str	r2, [r0, #40]	; 0x28
    e470:	8843      	ldrh	r3, [r0, #2]
    e472:	2b1d      	cmp	r3, #29
    e474:	d001      	beq.n	e47a <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    e476:	7341      	strb	r1, [r0, #13]
    e478:	4770      	bx	lr
    e47a:	7342      	strb	r2, [r0, #13]
    e47c:	4770      	bx	lr

0000e47e <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    e47e:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    e482:	2100      	movs	r1, #0
    e484:	2a02      	cmp	r2, #2
    e486:	d104      	bne.n	e492 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x14>
    e488:	f8b0 0070 	ldrh.w	r0, [r0, #112]	; 0x70
    e48c:	b108      	cbz	r0, e492 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x14>
    e48e:	2001      	movs	r0, #1
    e490:	e000      	b.n	e494 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x16>
    e492:	2000      	movs	r0, #0
    e494:	4381      	bics	r1, r0
    e496:	f081 0001 	eor.w	r0, r1, #1
    e49a:	4770      	bx	lr

0000e49c <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    e49c:	2000      	movs	r0, #0
    e49e:	4770      	bx	lr

0000e4a0 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    e4a0:	7880      	ldrb	r0, [r0, #2]
    e4a2:	f000 0001 	and.w	r0, r0, #1
    e4a6:	4770      	bx	lr

0000e4a8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    e4a8:	7880      	ldrb	r0, [r0, #2]
    e4aa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e4ae:	4770      	bx	lr

0000e4b0 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    e4b0:	2001      	movs	r0, #1
    e4b2:	4770      	bx	lr

0000e4b4 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    e4b4:	7880      	ldrb	r0, [r0, #2]
    e4b6:	f3c0 0040 	ubfx	r0, r0, #1, #1
    e4ba:	4770      	bx	lr

0000e4bc <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    e4bc:	f990 000e 	ldrsb.w	r0, [r0, #14]
    e4c0:	4770      	bx	lr

0000e4c2 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    e4c2:	7800      	ldrb	r0, [r0, #0]
    e4c4:	28ff      	cmp	r0, #255	; 0xff
    e4c6:	d001      	beq.n	e4cc <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    e4c8:	2001      	movs	r0, #1
    e4ca:	4770      	bx	lr
    e4cc:	2000      	movs	r0, #0
    e4ce:	4770      	bx	lr

0000e4d0 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    e4d0:	680a      	ldr	r2, [r1, #0]
    e4d2:	f840 2f11 	str.w	r2, [r0, #17]!
    e4d6:	8889      	ldrh	r1, [r1, #4]
    e4d8:	8081      	strh	r1, [r0, #4]
    e4da:	2101      	movs	r1, #1
    e4dc:	7181      	strb	r1, [r0, #6]
    e4de:	4770      	bx	lr

0000e4e0 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    e4e0:	7b00      	ldrb	r0, [r0, #12]
    e4e2:	4770      	bx	lr

0000e4e4 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    e4e4:	2001      	movs	r0, #1
    e4e6:	4770      	bx	lr

0000e4e8 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    e4e8:	61c1      	str	r1, [r0, #28]
    e4ea:	4770      	bx	lr

0000e4ec <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI>:
    e4ec:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    e4f0:	b102      	cbz	r2, e4f4 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI+0x8>
    e4f2:	2201      	movs	r2, #1
    e4f4:	2300      	movs	r3, #0
    e4f6:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    e4fa:	b119      	cbz	r1, e504 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI+0x18>
    e4fc:	e9d0 3019 	ldrd	r3, r0, [r0, #100]	; 0x64
    e500:	e9c1 3000 	strd	r3, r0, [r1]
    e504:	4610      	mov	r0, r2
    e506:	4770      	bx	lr

0000e508 <sym_6SMKGRHQAIZHR6JTRBTFU3LNEOI457UCNN7L2SY>:
    e508:	2102      	movs	r1, #2
    e50a:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
    e50e:	4770      	bx	lr

0000e510 <sym_UVJC3XBQQLDGXNDNKXZFSW7F5OWZWJU7FTAZXEI>:
    e510:	e9d0 2019 	ldrd	r2, r0, [r0, #100]	; 0x64
    e514:	e9c1 2000 	strd	r2, r0, [r1]
    e518:	4770      	bx	lr

0000e51a <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>:
    e51a:	2201      	movs	r2, #1
    e51c:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
    e520:	e9d1 2100 	ldrd	r2, r1, [r1]
    e524:	e9c0 2119 	strd	r2, r1, [r0, #100]	; 0x64
    e528:	4770      	bx	lr

0000e52a <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA>:
    e52a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    e52e:	b102      	cbz	r2, e532 <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA+0x8>
    e530:	2201      	movs	r2, #1
    e532:	2300      	movs	r3, #0
    e534:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    e538:	b119      	cbz	r1, e542 <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA+0x18>
    e53a:	e9d0 301b 	ldrd	r3, r0, [r0, #108]	; 0x6c
    e53e:	e9c1 3000 	strd	r3, r0, [r1]
    e542:	4610      	mov	r0, r2
    e544:	4770      	bx	lr

0000e546 <sym_57N4MHGOTN6SE7ESLAUPVT5Z7CNKRRVGNPONZCI>:
    e546:	2102      	movs	r1, #2
    e548:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    e54c:	4770      	bx	lr

0000e54e <sym_ECJZL6MVN4B4UZUQDXL2OTZMAL25BOLWE4F7TMI>:
    e54e:	e9d0 201b 	ldrd	r2, r0, [r0, #108]	; 0x6c
    e552:	e9c1 2000 	strd	r2, r0, [r1]
    e556:	4770      	bx	lr

0000e558 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>:
    e558:	2201      	movs	r2, #1
    e55a:	f880 2075 	strb.w	r2, [r0, #117]	; 0x75
    e55e:	e9d1 2100 	ldrd	r2, r1, [r1]
    e562:	e9c0 211b 	strd	r2, r1, [r0, #108]	; 0x6c
    e566:	4770      	bx	lr

0000e568 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    e568:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    e56c:	4770      	bx	lr

0000e56e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    e56e:	b570      	push	{r4, r5, r6, lr}
    e570:	4604      	mov	r4, r0
    e572:	7880      	ldrb	r0, [r0, #2]
    e574:	2501      	movs	r5, #1
    e576:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e57a:	b138      	cbz	r0, e58c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    e57c:	233c      	movs	r3, #60	; 0x3c
    e57e:	22ff      	movs	r2, #255	; 0xff
    e580:	4620      	mov	r0, r4
    e582:	69e1      	ldr	r1, [r4, #28]
    e584:	f7f9 f9b8 	bl	78f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    e588:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
    e58c:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    e590:	bd70      	pop	{r4, r5, r6, pc}

0000e592 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    e592:	7bc0      	ldrb	r0, [r0, #15]
    e594:	2800      	cmp	r0, #0
    e596:	d000      	beq.n	e59a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    e598:	2001      	movs	r0, #1
    e59a:	4770      	bx	lr
    e59c:	b510      	push	{r4, lr}
    e59e:	f7ff f93c 	bl	d81a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e5a2:	4604      	mov	r4, r0
    e5a4:	f7f7 ff8c 	bl	64c0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    e5a8:	b138      	cbz	r0, e5ba <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    e5aa:	4620      	mov	r0, r4
    e5ac:	f7f7 fec0 	bl	6330 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    e5b0:	b118      	cbz	r0, e5ba <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    e5b2:	2110      	movs	r1, #16
    e5b4:	f7ff fb10 	bl	dbd8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    e5b8:	b108      	cbz	r0, e5be <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    e5ba:	2000      	movs	r0, #0
    e5bc:	bd10      	pop	{r4, pc}
    e5be:	2001      	movs	r0, #1
    e5c0:	bd10      	pop	{r4, pc}
    e5c2:	2101      	movs	r1, #1
    e5c4:	f7f8 be08 	b.w	71d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e5c8:	2101      	movs	r1, #1
    e5ca:	f7f8 be05 	b.w	71d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e5ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e5d2:	4604      	mov	r4, r0
    e5d4:	2700      	movs	r7, #0
    e5d6:	704f      	strb	r7, [r1, #1]
    e5d8:	2011      	movs	r0, #17
    e5da:	460d      	mov	r5, r1
    e5dc:	7008      	strb	r0, [r1, #0]
    e5de:	2220      	movs	r2, #32
    e5e0:	f104 017a 	add.w	r1, r4, #122	; 0x7a
    e5e4:	1d28      	adds	r0, r5, #4
    e5e6:	f7fe f82a 	bl	c63e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e5ea:	2601      	movs	r6, #1
    e5ec:	722e      	strb	r6, [r5, #8]
    e5ee:	f884 7078 	strb.w	r7, [r4, #120]	; 0x78
    e5f2:	7928      	ldrb	r0, [r5, #4]
    e5f4:	2800      	cmp	r0, #0
    e5f6:	d111      	bne.n	e61c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8a>
    e5f8:	88e8      	ldrh	r0, [r5, #6]
    e5fa:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
    e5fe:	69e0      	ldr	r0, [r4, #28]
    e600:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    e604:	f884 10a6 	strb.w	r1, [r4, #166]	; 0xa6
    e608:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
    e60c:	8800      	ldrh	r0, [r0, #0]
    e60e:	f7f6 fe23 	bl	5258 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e612:	f7fe fedc 	bl	d3ce <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    e616:	69e0      	ldr	r0, [r4, #28]
    e618:	f880 6068 	strb.w	r6, [r0, #104]	; 0x68
    e61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e624:	4604      	mov	r4, r0
    e626:	460f      	mov	r7, r1
    e628:	7e40      	ldrb	r0, [r0, #25]
    e62a:	f7f7 fe41 	bl	62b0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    e62e:	4606      	mov	r6, r0
    e630:	7e20      	ldrb	r0, [r4, #24]
    e632:	f104 0549 	add.w	r5, r4, #73	; 0x49
    e636:	b120      	cbz	r0, e642 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    e638:	b11e      	cbz	r6, e642 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    e63a:	7e60      	ldrb	r0, [r4, #25]
    e63c:	f7f7 fe2c 	bl	6298 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    e640:	b1a0      	cbz	r0, e66c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xda>
    e642:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    e646:	2800      	cmp	r0, #0
    e648:	d024      	beq.n	e694 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    e64a:	7ea0      	ldrb	r0, [r4, #26]
    e64c:	2800      	cmp	r0, #0
    e64e:	d021      	beq.n	e694 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    e650:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    e654:	4629      	mov	r1, r5
    e656:	f7ff fe8a 	bl	e36e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    e65a:	b1a8      	cbz	r0, e688 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    e65c:	f7f7 fe18 	bl	6290 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    e660:	463a      	mov	r2, r7
    e662:	4629      	mov	r1, r5
    e664:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e668:	f7ff b86f 	b.w	d74a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e66c:	2001      	movs	r0, #1
    e66e:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    e672:	463a      	mov	r2, r7
    e674:	4629      	mov	r1, r5
    e676:	4630      	mov	r0, r6
    e678:	f7ff f867 	bl	d74a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e67c:	7e61      	ldrb	r1, [r4, #25]
    e67e:	4628      	mov	r0, r5
    e680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e684:	f7f7 be20 	b.w	62c8 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    e688:	4639      	mov	r1, r7
    e68a:	4628      	mov	r0, r5
    e68c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e690:	f7ff b84a 	b.w	d728 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    e694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e698:	b510      	push	{r4, lr}
    e69a:	4604      	mov	r4, r0
    e69c:	4608      	mov	r0, r1
    e69e:	f7fd fa7f 	bl	bba0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    e6a2:	7921      	ldrb	r1, [r4, #4]
    e6a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e6a8:	2025      	movs	r0, #37	; 0x25
    e6aa:	f001 bc5f 	b.w	ff6c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    e6ae:	b510      	push	{r4, lr}
    e6b0:	4604      	mov	r4, r0
    e6b2:	3026      	adds	r0, #38	; 0x26
    e6b4:	f7fd fa26 	bl	bb04 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e6b8:	2800      	cmp	r0, #0
    e6ba:	d102      	bne.n	e6c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    e6bc:	207f      	movs	r0, #127	; 0x7f
    e6be:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    e6c2:	bd10      	pop	{r4, pc}
    e6c4:	7802      	ldrb	r2, [r0, #0]
    e6c6:	2320      	movs	r3, #32
    e6c8:	f022 0220 	bic.w	r2, r2, #32
    e6cc:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    e6d0:	430a      	orrs	r2, r1
    e6d2:	7002      	strb	r2, [r0, #0]
    e6d4:	4770      	bx	lr

0000e6d6 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    e6d6:	b570      	push	{r4, r5, r6, lr}
    e6d8:	7001      	strb	r1, [r0, #0]
    e6da:	7042      	strb	r2, [r0, #1]
    e6dc:	4614      	mov	r4, r2
    e6de:	460d      	mov	r5, r1
    e6e0:	7880      	ldrb	r0, [r0, #2]
    e6e2:	f000 f87f 	bl	e7e4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e6e6:	fb10 f005 	smulbb	r0, r0, r5
    e6ea:	4360      	muls	r0, r4
    e6ec:	28ff      	cmp	r0, #255	; 0xff
    e6ee:	d303      	bcc.n	e6f8 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    e6f0:	215c      	movs	r1, #92	; 0x5c
    e6f2:	202e      	movs	r0, #46	; 0x2e
    e6f4:	f7f6 f97c 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6f8:	bd70      	pop	{r4, r5, r6, pc}

0000e6fa <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    e6fa:	b510      	push	{r4, lr}
    e6fc:	4604      	mov	r4, r0
    e6fe:	7880      	ldrb	r0, [r0, #2]
    e700:	f000 f870 	bl	e7e4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e704:	7861      	ldrb	r1, [r4, #1]
    e706:	7822      	ldrb	r2, [r4, #0]
    e708:	fb11 f102 	smulbb	r1, r1, r2
    e70c:	4348      	muls	r0, r1
    e70e:	b2c0      	uxtb	r0, r0
    e710:	bd10      	pop	{r4, pc}

0000e712 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    e712:	b510      	push	{r4, lr}
    e714:	4604      	mov	r4, r0
    e716:	f000 f84d 	bl	e7b4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    e71a:	7961      	ldrb	r1, [r4, #5]
    e71c:	1c49      	adds	r1, r1, #1
    e71e:	b2c9      	uxtb	r1, r1
    e720:	7161      	strb	r1, [r4, #5]
    e722:	7862      	ldrb	r2, [r4, #1]
    e724:	4291      	cmp	r1, r2
    e726:	d10b      	bne.n	e740 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e728:	2200      	movs	r2, #0
    e72a:	7162      	strb	r2, [r4, #5]
    e72c:	78e1      	ldrb	r1, [r4, #3]
    e72e:	4301      	orrs	r1, r0
    e730:	70e1      	strb	r1, [r4, #3]
    e732:	78a3      	ldrb	r3, [r4, #2]
    e734:	4299      	cmp	r1, r3
    e736:	d103      	bne.n	e740 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e738:	70e2      	strb	r2, [r4, #3]
    e73a:	7921      	ldrb	r1, [r4, #4]
    e73c:	1c49      	adds	r1, r1, #1
    e73e:	7121      	strb	r1, [r4, #4]
    e740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e744:	f000 b825 	b.w	e792 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000e748 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    e748:	7081      	strb	r1, [r0, #2]
    e74a:	4770      	bx	lr

0000e74c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    e74c:	b570      	push	{r4, r5, r6, lr}
    e74e:	4604      	mov	r4, r0
    e750:	7880      	ldrb	r0, [r0, #2]
    e752:	f000 f847 	bl	e7e4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e756:	7861      	ldrb	r1, [r4, #1]
    e758:	fb11 f500 	smulbb	r5, r1, r0
    e75c:	78e0      	ldrb	r0, [r4, #3]
    e75e:	f000 f841 	bl	e7e4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e762:	7861      	ldrb	r1, [r4, #1]
    e764:	7962      	ldrb	r2, [r4, #5]
    e766:	fb10 2001 	smlabb	r0, r0, r1, r2
    e76a:	7821      	ldrb	r1, [r4, #0]
    e76c:	7922      	ldrb	r2, [r4, #4]
    e76e:	1a89      	subs	r1, r1, r2
    e770:	fb11 f105 	smulbb	r1, r1, r5
    e774:	1a08      	subs	r0, r1, r0
    e776:	b2c0      	uxtb	r0, r0
    e778:	bd70      	pop	{r4, r5, r6, pc}

0000e77a <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    e77a:	2100      	movs	r1, #0
    e77c:	6001      	str	r1, [r0, #0]
    e77e:	8081      	strh	r1, [r0, #4]
    e780:	2101      	movs	r1, #1
    e782:	7041      	strb	r1, [r0, #1]
    e784:	7001      	strb	r1, [r0, #0]
    e786:	4770      	bx	lr

0000e788 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    e788:	2100      	movs	r1, #0
    e78a:	70c1      	strb	r1, [r0, #3]
    e78c:	7141      	strb	r1, [r0, #5]
    e78e:	7101      	strb	r1, [r0, #4]
    e790:	4770      	bx	lr
    e792:	b510      	push	{r4, lr}
    e794:	2801      	cmp	r0, #1
    e796:	d007      	beq.n	e7a8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    e798:	2802      	cmp	r0, #2
    e79a:	d007      	beq.n	e7ac <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    e79c:	2804      	cmp	r0, #4
    e79e:	d007      	beq.n	e7b0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    e7a0:	2139      	movs	r1, #57	; 0x39
    e7a2:	202e      	movs	r0, #46	; 0x2e
    e7a4:	f7f6 f924 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7a8:	2025      	movs	r0, #37	; 0x25
    e7aa:	bd10      	pop	{r4, pc}
    e7ac:	2026      	movs	r0, #38	; 0x26
    e7ae:	bd10      	pop	{r4, pc}
    e7b0:	2027      	movs	r0, #39	; 0x27
    e7b2:	bd10      	pop	{r4, pc}
    e7b4:	4601      	mov	r1, r0
    e7b6:	2000      	movs	r0, #0
    e7b8:	788a      	ldrb	r2, [r1, #2]
    e7ba:	07d3      	lsls	r3, r2, #31
    e7bc:	d002      	beq.n	e7c4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    e7be:	78cb      	ldrb	r3, [r1, #3]
    e7c0:	07db      	lsls	r3, r3, #31
    e7c2:	d006      	beq.n	e7d2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    e7c4:	0793      	lsls	r3, r2, #30
    e7c6:	d506      	bpl.n	e7d6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e7c8:	78cb      	ldrb	r3, [r1, #3]
    e7ca:	079b      	lsls	r3, r3, #30
    e7cc:	d403      	bmi.n	e7d6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e7ce:	2002      	movs	r0, #2
    e7d0:	4770      	bx	lr
    e7d2:	2001      	movs	r0, #1
    e7d4:	4770      	bx	lr
    e7d6:	0752      	lsls	r2, r2, #29
    e7d8:	d5fc      	bpl.n	e7d4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e7da:	78c9      	ldrb	r1, [r1, #3]
    e7dc:	0749      	lsls	r1, r1, #29
    e7de:	d4f9      	bmi.n	e7d4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e7e0:	2004      	movs	r0, #4
    e7e2:	4770      	bx	lr
    e7e4:	f3c0 0180 	ubfx	r1, r0, #2, #1
    e7e8:	f3c0 0240 	ubfx	r2, r0, #1, #1
    e7ec:	4411      	add	r1, r2
    e7ee:	f000 0001 	and.w	r0, r0, #1
    e7f2:	4408      	add	r0, r1
    e7f4:	4770      	bx	lr

0000e7f6 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    e7f6:	f240 315a 	movw	r1, #858	; 0x35a
    e7fa:	4348      	muls	r0, r1
    e7fc:	4770      	bx	lr

0000e7fe <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    e7fe:	f240 20ef 	movw	r0, #751	; 0x2ef
    e802:	4770      	bx	lr
    e804:	041c020e 	.word	0x041c020e
    e808:	0c600630 	.word	0x0c600630
    e80c:	06b4035a 	.word	0x06b4035a
    e810:	0bf505c5 	.word	0x0bf505c5
    e814:	01a31225 	.word	0x01a31225
    e818:	05bf03b1 	.word	0x05bf03b1
    e81c:	064902ef 	.word	0x064902ef
    e820:	09a3      	.short	0x09a3

0000e822 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    e822:	b510      	push	{r4, lr}
    e824:	f890 10e4 	ldrb.w	r1, [r0, #228]	; 0xe4
    e828:	b109      	cbz	r1, e82e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    e82a:	2000      	movs	r0, #0
    e82c:	bd10      	pop	{r4, pc}
    e82e:	f8d0 10e0 	ldr.w	r1, [r0, #224]	; 0xe0
    e832:	b949      	cbnz	r1, e848 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    e834:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    e838:	b131      	cbz	r1, e848 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    e83a:	e9d0 1230 	ldrd	r1, r2, [r0, #192]	; 0xc0
    e83e:	428a      	cmp	r2, r1
    e840:	d902      	bls.n	e848 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    e842:	f7ff fe94 	bl	e56e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    e846:	e7f0      	b.n	e82a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    e848:	2001      	movs	r0, #1
    e84a:	bd10      	pop	{r4, pc}

0000e84c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    e84c:	b510      	push	{r4, lr}
    e84e:	b131      	cbz	r1, e85e <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    e850:	2901      	cmp	r1, #1
    e852:	d008      	beq.n	e866 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    e854:	f240 71a3 	movw	r1, #1955	; 0x7a3
    e858:	2030      	movs	r0, #48	; 0x30
    e85a:	f7f6 f8c9 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e85e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e862:	f000 b999 	b.w	eb98 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x262>
    e866:	2100      	movs	r1, #0
    e868:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    e86c:	f000 f95d 	bl	eb2a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f4>
    e870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e874:	f7fc b818 	b.w	a8a8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>

0000e878 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>:
    e878:	b510      	push	{r4, lr}
    e87a:	4604      	mov	r4, r0
    e87c:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    e880:	2800      	cmp	r0, #0
    e882:	d019      	beq.n	e8b8 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x40>
    e884:	2001      	movs	r0, #1
    e886:	f884 00e4 	strb.w	r0, [r4, #228]	; 0xe4
    e88a:	4601      	mov	r1, r0
    e88c:	4620      	mov	r0, r4
    e88e:	f7ff fe6b 	bl	e568 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    e892:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    e896:	b170      	cbz	r0, e8b6 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x3e>
    e898:	f814 0fb4 	ldrb.w	r0, [r4, #180]!
    e89c:	f7f4 f9a8 	bl	2bf0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e8a0:	7820      	ldrb	r0, [r4, #0]
    e8a2:	f7f4 fae3 	bl	2e6c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    e8a6:	f814 09b4 	ldrb.w	r0, [r4], #-180
    e8aa:	f7f4 fabd 	bl	2e28 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e8ae:	b120      	cbz	r0, e8ba <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x42>
    e8b0:	2000      	movs	r0, #0
    e8b2:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
    e8b6:	2000      	movs	r0, #0
    e8b8:	bd10      	pop	{r4, pc}
    e8ba:	f240 2117 	movw	r1, #535	; 0x217
    e8be:	2030      	movs	r0, #48	; 0x30
    e8c0:	f7f6 f896 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e8c4 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>:
    e8c4:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
    e8c8:	4770      	bx	lr

0000e8ca <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>:
    e8ca:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    e8ce:	4770      	bx	lr

0000e8d0 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>:
    e8d0:	b50e      	push	{r1, r2, r3, lr}
    e8d2:	4669      	mov	r1, sp
    e8d4:	2001      	movs	r0, #1
    e8d6:	f7fe feb4 	bl	d642 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    e8da:	b138      	cbz	r0, e8ec <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x1c>
    e8dc:	f240 1145 	movw	r1, #325	; 0x145
    e8e0:	2030      	movs	r0, #48	; 0x30
    e8e2:	f7f6 f885 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e8e6:	9802      	ldr	r0, [sp, #8]
    e8e8:	f7ff ffc6 	bl	e878 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    e8ec:	4668      	mov	r0, sp
    e8ee:	f7f6 fad1 	bl	4e94 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e8f2:	2800      	cmp	r0, #0
    e8f4:	d0f7      	beq.n	e8e6 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x16>
    e8f6:	f7f9 fb1d 	bl	7f34 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb0>
    e8fa:	2000      	movs	r0, #0
    e8fc:	bd0e      	pop	{r1, r2, r3, pc}

0000e8fe <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>:
    e8fe:	b50e      	push	{r1, r2, r3, lr}
    e900:	4669      	mov	r1, sp
    e902:	2001      	movs	r0, #1
    e904:	f7fe fe9d 	bl	d642 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    e908:	b150      	cbz	r0, e920 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x22>
    e90a:	f240 71ae 	movw	r1, #1966	; 0x7ae
    e90e:	2030      	movs	r0, #48	; 0x30
    e910:	f7f6 f86e 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e914:	9802      	ldr	r0, [sp, #8]
    e916:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    e91a:	b108      	cbz	r0, e920 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x22>
    e91c:	2000      	movs	r0, #0
    e91e:	bd0e      	pop	{r1, r2, r3, pc}
    e920:	4668      	mov	r0, sp
    e922:	f7f6 fab7 	bl	4e94 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e926:	2800      	cmp	r0, #0
    e928:	d0f4      	beq.n	e914 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x16>
    e92a:	2000      	movs	r0, #0
    e92c:	f7fe fe6d 	bl	d60a <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>
    e930:	f080 0001 	eor.w	r0, r0, #1
    e934:	bd0e      	pop	{r1, r2, r3, pc}

0000e936 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>:
    e936:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e938:	4604      	mov	r4, r0
    e93a:	f890 00fb 	ldrb.w	r0, [r0, #251]	; 0xfb
    e93e:	2800      	cmp	r0, #0
    e940:	d153      	bne.n	e9ea <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e942:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    e946:	2803      	cmp	r0, #3
    e948:	d14f      	bne.n	e9ea <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e94a:	f7fd fcf8 	bl	c33e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    e94e:	4601      	mov	r1, r0
    e950:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    e954:	f7f3 fd08 	bl	2368 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    e958:	2800      	cmp	r0, #0
    e95a:	dd46      	ble.n	e9ea <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e95c:	6861      	ldr	r1, [r4, #4]
    e95e:	b111      	cbz	r1, e966 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x30>
    e960:	fbb0 f0f1 	udiv	r0, r0, r1
    e964:	e000      	b.n	e968 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x32>
    e966:	2000      	movs	r0, #0
    e968:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
    e96c:	1c40      	adds	r0, r0, #1
    e96e:	4408      	add	r0, r1
    e970:	f8a4 013c 	strh.w	r0, [r4, #316]	; 0x13c
    e974:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    e978:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    e97c:	1a08      	subs	r0, r1, r0
    e97e:	b200      	sxth	r0, r0
    e980:	2800      	cmp	r0, #0
    e982:	dd32      	ble.n	e9ea <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e984:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    e988:	f7f4 f932 	bl	2bf0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e98c:	2800      	cmp	r0, #0
    e98e:	d02c      	beq.n	e9ea <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e990:	2001      	movs	r0, #1
    e992:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
    e996:	f8b4 009e 	ldrh.w	r0, [r4, #158]	; 0x9e
    e99a:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    e99e:	ae01      	add	r6, sp, #4
    e9a0:	1a40      	subs	r0, r0, r1
    e9a2:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
    e9a6:	1e40      	subs	r0, r0, #1
    e9a8:	4408      	add	r0, r1
    e9aa:	b285      	uxth	r5, r0
    e9ac:	e017      	b.n	e9de <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xa8>
    e9ae:	9600      	str	r6, [sp, #0]
    e9b0:	f8b4 113c 	ldrh.w	r1, [r4, #316]	; 0x13c
    e9b4:	2300      	movs	r3, #0
    e9b6:	2201      	movs	r2, #1
    e9b8:	4620      	mov	r0, r4
    e9ba:	f7f9 fbed 	bl	8198 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x198>
    e9be:	2800      	cmp	r0, #0
    e9c0:	d013      	beq.n	e9ea <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e9c2:	2801      	cmp	r0, #1
    e9c4:	d004      	beq.n	e9d0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x9a>
    e9c6:	f240 6115 	movw	r1, #1557	; 0x615
    e9ca:	2030      	movs	r0, #48	; 0x30
    e9cc:	f7f6 f810 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9d0:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    e9d4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    e9d8:	4408      	add	r0, r1
    e9da:	f8a4 013c 	strh.w	r0, [r4, #316]	; 0x13c
    e9de:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    e9e2:	1a28      	subs	r0, r5, r0
    e9e4:	b200      	sxth	r0, r0
    e9e6:	2800      	cmp	r0, #0
    e9e8:	dae1      	bge.n	e9ae <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x78>
    e9ea:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e9ec:	2000      	movs	r0, #0
    e9ee:	4770      	bx	lr
    e9f0:	b570      	push	{r4, r5, r6, lr}
    e9f2:	4604      	mov	r4, r0
    e9f4:	2601      	movs	r6, #1
    e9f6:	f000 f8b3 	bl	eb60 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x22a>
    e9fa:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    e9fe:	2000      	movs	r0, #0
    ea00:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
    ea04:	2001      	movs	r0, #1
    ea06:	f884 00d7 	strb.w	r0, [r4, #215]	; 0xd7
    ea0a:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    ea0e:	f104 05cc 	add.w	r5, r4, #204	; 0xcc
    ea12:	b160      	cbz	r0, ea2e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xf8>
    ea14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ea18:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    ea1c:	f7f3 fc72 	bl	2304 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    ea20:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    ea24:	2100      	movs	r1, #0
    ea26:	4628      	mov	r0, r5
    ea28:	f7ff f81d 	bl	da66 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    ea2c:	e00f      	b.n	ea4e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x118>
    ea2e:	4620      	mov	r0, r4
    ea30:	f7ff fd0d 	bl	e44e <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    ea34:	4606      	mov	r6, r0
    ea36:	4631      	mov	r1, r6
    ea38:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    ea3c:	f7f3 fc62 	bl	2304 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    ea40:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    ea44:	4631      	mov	r1, r6
    ea46:	4628      	mov	r0, r5
    ea48:	f7ff f80d 	bl	da66 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    ea4c:	1c46      	adds	r6, r0, #1
    ea4e:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	; 0xdc
    ea52:	1c41      	adds	r1, r0, #1
    ea54:	290a      	cmp	r1, #10
    ea56:	d202      	bcs.n	ea5e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x128>
    ea58:	4430      	add	r0, r6
    ea5a:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
    ea5e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
    ea62:	b130      	cbz	r0, ea72 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13c>
    ea64:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	; 0xdc
    ea68:	1c40      	adds	r0, r0, #1
    ea6a:	280a      	cmp	r0, #10
    ea6c:	d301      	bcc.n	ea72 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13c>
    ea6e:	2002      	movs	r0, #2
    ea70:	e000      	b.n	ea74 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13e>
    ea72:	2003      	movs	r0, #3
    ea74:	f884 00d6 	strb.w	r0, [r4, #214]	; 0xd6
    ea78:	2100      	movs	r1, #0
    ea7a:	4620      	mov	r0, r4
    ea7c:	f000 f824 	bl	eac8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x192>
    ea80:	b130      	cbz	r0, ea90 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x15a>
    ea82:	4620      	mov	r0, r4
    ea84:	f000 f811 	bl	eaaa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x174>
    ea88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ea8c:	f7fb bf0c 	b.w	a8a8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ea90:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    ea94:	4629      	mov	r1, r5
    ea96:	f000 f861 	bl	eb5c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x226>
    ea9a:	2800      	cmp	r0, #0
    ea9c:	d104      	bne.n	eaa8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x172>
    ea9e:	f240 61b6 	movw	r1, #1718	; 0x6b6
    eaa2:	2030      	movs	r0, #48	; 0x30
    eaa4:	f7f5 ffa4 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eaa8:	bd70      	pop	{r4, r5, r6, pc}
    eaaa:	b510      	push	{r4, lr}
    eaac:	4604      	mov	r4, r0
    eaae:	f814 0fb4 	ldrb.w	r0, [r4, #180]!
    eab2:	f7f4 f9b9 	bl	2e28 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    eab6:	2000      	movs	r0, #0
    eab8:	7520      	strb	r0, [r4, #20]
    eaba:	bd10      	pop	{r4, pc}
    eabc:	b510      	push	{r4, lr}
    eabe:	f7ff fcca 	bl	e456 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    eac2:	f200 1007 	addw	r0, r0, #263	; 0x107
    eac6:	bd10      	pop	{r4, pc}
    eac8:	b570      	push	{r4, r5, r6, lr}
    eaca:	4604      	mov	r4, r0
    eacc:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    ead0:	460d      	mov	r5, r1
    ead2:	b108      	cbz	r0, ead8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a2>
    ead4:	2001      	movs	r0, #1
    ead6:	bd70      	pop	{r4, r5, r6, pc}
    ead8:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    eadc:	b1a8      	cbz	r0, eb0a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d4>
    eade:	4620      	mov	r0, r4
    eae0:	f7ff fcb5 	bl	e44e <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    eae4:	4405      	add	r5, r0
    eae6:	4620      	mov	r0, r4
    eae8:	f7ff ffe8 	bl	eabc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x186>
    eaec:	1941      	adds	r1, r0, r5
    eaee:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    eaf2:	4288      	cmp	r0, r1
    eaf4:	d206      	bcs.n	eb04 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1ce>
    eaf6:	2001      	movs	r0, #1
    eaf8:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    eafc:	4620      	mov	r0, r4
    eafe:	f7ff fd36 	bl	e56e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    eb02:	e7e7      	b.n	ead4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x19e>
    eb04:	1b40      	subs	r0, r0, r5
    eb06:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    eb0a:	2000      	movs	r0, #0
    eb0c:	bd70      	pop	{r4, r5, r6, pc}
    eb0e:	b510      	push	{r4, lr}
    eb10:	4604      	mov	r4, r0
    eb12:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    eb16:	f000 f94b 	bl	edb0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x47a>
    eb1a:	4602      	mov	r2, r0
    eb1c:	4620      	mov	r0, r4
    eb1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb22:	f240 1117 	movw	r1, #279	; 0x117
    eb26:	f7ff bb88 	b.w	e23a <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    eb2a:	b510      	push	{r4, lr}
    eb2c:	f7fc fe7c 	bl	b828 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    eb30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb34:	f7f4 baca 	b.w	30cc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    eb38:	b570      	push	{r4, r5, r6, lr}
    eb3a:	460c      	mov	r4, r1
    eb3c:	4605      	mov	r5, r0
    eb3e:	f001 fa05 	bl	ff4c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    eb42:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    eb46:	4408      	add	r0, r1
    eb48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    eb4c:	fbb0 f6f1 	udiv	r6, r0, r1
    eb50:	4628      	mov	r0, r5
    eb52:	f001 f9ed 	bl	ff30 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    eb56:	4430      	add	r0, r6
    eb58:	4420      	add	r0, r4
    eb5a:	bd70      	pop	{r4, r5, r6, pc}
    eb5c:	f7f3 bd32 	b.w	25c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    eb60:	b510      	push	{r4, lr}
    eb62:	4604      	mov	r4, r0
    eb64:	f7ff fca4 	bl	e4b0 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    eb68:	b1a0      	cbz	r0, eb94 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x25e>
    eb6a:	4620      	mov	r0, r4
    eb6c:	f7ff fc98 	bl	e4a0 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    eb70:	b918      	cbnz	r0, eb7a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x244>
    eb72:	4620      	mov	r0, r4
    eb74:	f7ff fc9e 	bl	e4b4 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    eb78:	b120      	cbz	r0, eb84 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x24e>
    eb7a:	2449      	movs	r4, #73	; 0x49
    eb7c:	f001 f9a4 	bl	fec8 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    eb80:	b928      	cbnz	r0, eb8e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x258>
    eb82:	e001      	b.n	eb88 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x252>
    eb84:	2442      	movs	r4, #66	; 0x42
    eb86:	e7f9      	b.n	eb7c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x246>
    eb88:	f001 f994 	bl	feb4 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    eb8c:	b100      	cbz	r0, eb90 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x25a>
    eb8e:	1de4      	adds	r4, r4, #7
    eb90:	4620      	mov	r0, r4
    eb92:	bd10      	pop	{r4, pc}
    eb94:	206b      	movs	r0, #107	; 0x6b
    eb96:	bd10      	pop	{r4, pc}
    eb98:	b570      	push	{r4, r5, r6, lr}
    eb9a:	4604      	mov	r4, r0
    eb9c:	f890 00b5 	ldrb.w	r0, [r0, #181]	; 0xb5
    eba0:	2500      	movs	r5, #0
    eba2:	b118      	cbz	r0, ebac <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x276>
    eba4:	2001      	movs	r0, #1
    eba6:	f000 f88a 	bl	ecbe <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x388>
    ebaa:	4605      	mov	r5, r0
    ebac:	4620      	mov	r0, r4
    ebae:	f7ff fc4e 	bl	e44e <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    ebb2:	1941      	adds	r1, r0, r5
    ebb4:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    ebb8:	34cc      	adds	r4, #204	; 0xcc
    ebba:	f7f3 fba3 	bl	2304 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    ebbe:	2600      	movs	r6, #0
    ebc0:	60e0      	str	r0, [r4, #12]
    ebc2:	f804 6b0b 	strb.w	r6, [r4], #11
    ebc6:	2001      	movs	r0, #1
    ebc8:	f804 0901 	strb.w	r0, [r4], #-1
    ebcc:	2003      	movs	r0, #3
    ebce:	f804 09d6 	strb.w	r0, [r4], #-214
    ebd2:	4620      	mov	r0, r4
    ebd4:	f7ff ffc4 	bl	eb60 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x22a>
    ebd8:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    ebdc:	4629      	mov	r1, r5
    ebde:	4620      	mov	r0, r4
    ebe0:	f7ff ff72 	bl	eac8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x192>
    ebe4:	b930      	cbnz	r0, ebf4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2be>
    ebe6:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    ebea:	f104 01cc 	add.w	r1, r4, #204	; 0xcc
    ebee:	f7ff ffb5 	bl	eb5c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x226>
    ebf2:	b138      	cbz	r0, ec04 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2ce>
    ebf4:	f8a4 60dc 	strh.w	r6, [r4, #220]	; 0xdc
    ebf8:	f7ff ff97 	bl	eb2a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f4>
    ebfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ec00:	f7fb be52 	b.w	a8a8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ec04:	f240 7104 	movw	r1, #1796	; 0x704
    ec08:	2030      	movs	r0, #48	; 0x30
    ec0a:	f7f5 fef1 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec0e:	b510      	push	{r4, lr}
    ec10:	4604      	mov	r4, r0
    ec12:	2000      	movs	r0, #0
    ec14:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    ec18:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    ec1c:	f7f4 f904 	bl	2e28 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ec20:	2020      	movs	r0, #32
    ec22:	f884 0160 	strb.w	r0, [r4, #352]	; 0x160
    ec26:	bd10      	pop	{r4, pc}
    ec28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ec2c:	2500      	movs	r5, #0
    ec2e:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    ec32:	f8d0 60d8 	ldr.w	r6, [r0, #216]	; 0xd8
    ec36:	4688      	mov	r8, r1
    ec38:	4604      	mov	r4, r0
    ec3a:	f880 50c8 	strb.w	r5, [r0, #200]	; 0xc8
    ec3e:	2701      	movs	r7, #1
    ec40:	f880 70c9 	strb.w	r7, [r0, #201]	; 0xc9
    ec44:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
    ec48:	4639      	mov	r1, r7
    ec4a:	34b4      	adds	r4, #180	; 0xb4
    ec4c:	f7f7 fde2 	bl	6814 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    ec50:	6860      	ldr	r0, [r4, #4]
    ec52:	f8c0 6154 	str.w	r6, [r0, #340]	; 0x154
    ec56:	6861      	ldr	r1, [r4, #4]
    ec58:	7820      	ldrb	r0, [r4, #0]
    ec5a:	f881 0160 	strb.w	r0, [r1, #352]	; 0x160
    ec5e:	6861      	ldr	r1, [r4, #4]
    ec60:	f8c1 8164 	str.w	r8, [r1, #356]	; 0x164
    ec64:	6860      	ldr	r0, [r4, #4]
    ec66:	f8c0 6158 	str.w	r6, [r0, #344]	; 0x158
    ec6a:	6864      	ldr	r4, [r4, #4]
    ec6c:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
    ec70:	2300      	movs	r3, #0
    ec72:	f8a4 515c 	strh.w	r5, [r4, #348]	; 0x15c
    ec76:	461a      	mov	r2, r3
    ec78:	4619      	mov	r1, r3
    ec7a:	4620      	mov	r0, r4
    ec7c:	9500      	str	r5, [sp, #0]
    ec7e:	f7f9 fa8b 	bl	8198 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x198>
    ec82:	b120      	cbz	r0, ec8e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x358>
    ec84:	f240 212b 	movw	r1, #555	; 0x22b
    ec88:	2030      	movs	r0, #48	; 0x30
    ec8a:	f7f5 feb1 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec8e:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    ec92:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
    ec96:	f884 712c 	strb.w	r7, [r4, #300]	; 0x12c
    ec9a:	f8a4 513e 	strh.w	r5, [r4, #318]	; 0x13e
    ec9e:	f8a4 513c 	strh.w	r5, [r4, #316]	; 0x13c
    eca2:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    eca6:	f834 0f6c 	ldrh.w	r0, [r4, #108]!
    ecaa:	1e40      	subs	r0, r0, #1
    ecac:	f824 0bbc 	strh.w	r0, [r4], #188
    ecb0:	86e5      	strh	r5, [r4, #54]	; 0x36
    ecb2:	f7ff ff3a 	bl	eb2a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f4>
    ecb6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ecba:	f7fb bdf5 	b.w	a8a8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ecbe:	b508      	push	{r3, lr}
    ecc0:	2800      	cmp	r0, #0
    ecc2:	f04f 0101 	mov.w	r1, #1
    ecc6:	4668      	mov	r0, sp
    ecc8:	d002      	beq.n	ecd0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x39a>
    ecca:	f7f5 ff29 	bl	4b20 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    ecce:	e001      	b.n	ecd4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x39e>
    ecd0:	f7f5 ff34 	bl	4b3c <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    ecd4:	f89d 0000 	ldrb.w	r0, [sp]
    ecd8:	f242 7110 	movw	r1, #10000	; 0x2710
    ecdc:	0200      	lsls	r0, r0, #8
    ecde:	fbb0 f2f1 	udiv	r2, r0, r1
    ece2:	fb01 0012 	mls	r0, r1, r2, r0
    ece6:	bd08      	pop	{r3, pc}
    ece8:	b510      	push	{r4, lr}
    ecea:	0004      	movs	r4, r0
    ecec:	d008      	beq.n	ed00 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x3ca>
    ecee:	2909      	cmp	r1, #9
    ecf0:	d25c      	bcs.n	edac <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x476>
    ecf2:	e8df f001 	tbb	[pc, r1]
    ecf6:	3607      	.short	0x3607
    ecf8:	5b3a3e3e 	.word	0x5b3a3e3e
    ecfc:	00574a43 	.word	0x00574a43
    ed00:	219e      	movs	r1, #158	; 0x9e
    ed02:	e050      	b.n	eda6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x470>
    ed04:	2100      	movs	r1, #0
    ed06:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
    ed0a:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    ed0e:	4620      	mov	r0, r4
    ed10:	b189      	cbz	r1, ed36 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x400>
    ed12:	f8b0 213e 	ldrh.w	r2, [r0, #318]	; 0x13e
    ed16:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
    ed1a:	428a      	cmp	r2, r1
    ed1c:	d106      	bne.n	ed2c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x3f6>
    ed1e:	f8b0 20f4 	ldrh.w	r2, [r0, #244]	; 0xf4
    ed22:	1a51      	subs	r1, r2, r1
    ed24:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    ed28:	4611      	mov	r1, r2
    ed2a:	e00d      	b.n	ed48 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x412>
    ed2c:	1a51      	subs	r1, r2, r1
    ed2e:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    ed32:	b291      	uxth	r1, r2
    ed34:	e008      	b.n	ed48 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x412>
    ed36:	f8b0 113c 	ldrh.w	r1, [r0, #316]	; 0x13c
    ed3a:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
    ed3e:	1a89      	subs	r1, r1, r2
    ed40:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    ed44:	f8b0 113c 	ldrh.w	r1, [r0, #316]	; 0x13c
    ed48:	f8a0 106c 	strh.w	r1, [r0, #108]	; 0x6c
    ed4c:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    ed50:	f8c0 1154 	str.w	r1, [r0, #340]	; 0x154
    ed54:	f7f9 ff26 	bl	8ba4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    ed58:	4620      	mov	r0, r4
    ed5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed5e:	f7f9 bc8b 	b.w	8678 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x678>
    ed62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed66:	f000 b879 	b.w	ee5c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    ed6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed6e:	f7fc bf1d 	b.w	bbac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    ed72:	4620      	mov	r0, r4
    ed74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed78:	f7f9 bcb4 	b.w	86e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6e4>
    ed7c:	2001      	movs	r0, #1
    ed7e:	f7f3 f9ef 	bl	2160 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    ed82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed86:	f7fe bd15 	b.w	d7b4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    ed8a:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    ed8e:	2804      	cmp	r0, #4
    ed90:	d001      	beq.n	ed96 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x460>
    ed92:	21c0      	movs	r1, #192	; 0xc0
    ed94:	e007      	b.n	eda6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x470>
    ed96:	4620      	mov	r0, r4
    ed98:	f7ff ff39 	bl	ec0e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    ed9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eda0:	f7fb bd82 	b.w	a8a8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    eda4:	21c9      	movs	r1, #201	; 0xc9
    eda6:	2030      	movs	r0, #48	; 0x30
    eda8:	f7f5 fe22 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    edac:	21cd      	movs	r1, #205	; 0xcd
    edae:	e7fa      	b.n	eda6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x470>
    edb0:	b510      	push	{r4, lr}
    edb2:	f001 f8cb 	bl	ff4c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    edb6:	f64d 7141 	movw	r1, #57153	; 0xdf41
    edba:	4408      	add	r0, r1
    edbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    edc0:	fbb0 f0f1 	udiv	r0, r0, r1
    edc4:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    edc8:	bd10      	pop	{r4, pc}
    edca:	01f4      	.short	0x01f4
    edcc:	009600fa 	.word	0x009600fa
    edd0:	004b0064 	.word	0x004b0064
    edd4:	001e0032 	.word	0x001e0032
    edd8:	000a0014 	.word	0x000a0014
    eddc:	00020005 	.word	0x00020005
    ede0:	0001      	.short	0x0001
    ede2:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ede6:	f001 0307 	and.w	r3, r1, #7
    edea:	7802      	ldrb	r2, [r0, #0]
    edec:	2101      	movs	r1, #1
    edee:	4099      	lsls	r1, r3
    edf0:	438a      	bics	r2, r1
    edf2:	7002      	strb	r2, [r0, #0]
    edf4:	4770      	bx	lr

0000edf6 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    edf6:	b510      	push	{r4, lr}
    edf8:	4604      	mov	r4, r0
    edfa:	f8d0 0194 	ldr.w	r0, [r0, #404]	; 0x194
    edfe:	6861      	ldr	r1, [r4, #4]
    ee00:	4288      	cmp	r0, r1
    ee02:	d109      	bne.n	ee18 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    ee04:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
    ee08:	8922      	ldrh	r2, [r4, #8]
    ee0a:	4291      	cmp	r1, r2
    ee0c:	d104      	bne.n	ee18 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    ee0e:	f8b4 119a 	ldrh.w	r1, [r4, #410]	; 0x19a
    ee12:	8962      	ldrh	r2, [r4, #10]
    ee14:	4291      	cmp	r1, r2
    ee16:	d013      	beq.n	ee40 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4a>
    ee18:	8821      	ldrh	r1, [r4, #0]
    ee1a:	f8a4 11b4 	strh.w	r1, [r4, #436]	; 0x1b4
    ee1e:	f7fe fd50 	bl	d8c2 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    ee22:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
    ee26:	f8b4 0198 	ldrh.w	r0, [r4, #408]	; 0x198
    ee2a:	f8a4 01b8 	strh.w	r0, [r4, #440]	; 0x1b8
    ee2e:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
    ee32:	f8a4 01ba 	strh.w	r0, [r4, #442]	; 0x1ba
    ee36:	2001      	movs	r0, #1
    ee38:	f884 01b0 	strb.w	r0, [r4, #432]	; 0x1b0
    ee3c:	f7fb fd34 	bl	a8a8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ee40:	2102      	movs	r1, #2
    ee42:	4620      	mov	r0, r4
    ee44:	f7f7 fce6 	bl	6814 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    ee48:	2000      	movs	r0, #0
    ee4a:	f804 0f76 	strb.w	r0, [r4, #118]!
    ee4e:	2003      	movs	r0, #3
    ee50:	70e0      	strb	r0, [r4, #3]
    ee52:	bd10      	pop	{r4, pc}

0000ee54 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    ee54:	f7f6 b98c 	b.w	5170 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000ee58 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    ee58:	2000      	movs	r0, #0
    ee5a:	4770      	bx	lr

0000ee5c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    ee5c:	f7f6 be5a 	b.w	5b14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000ee60 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    ee60:	2100      	movs	r1, #0
    ee62:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    ee66:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    ee6a:	f880 1079 	strb.w	r1, [r0, #121]	; 0x79
    ee6e:	f890 10fb 	ldrb.w	r1, [r0, #251]	; 0xfb
    ee72:	b109      	cbz	r1, ee78 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    ee74:	2102      	movs	r1, #2
    ee76:	e000      	b.n	ee7a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    ee78:	2103      	movs	r1, #3
    ee7a:	f7f9 b803 	b.w	7e84 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    ee7e:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    ee82:	28fe      	cmp	r0, #254	; 0xfe
    ee84:	d001      	beq.n	ee8a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    ee86:	2001      	movs	r0, #1
    ee88:	4770      	bx	lr
    ee8a:	2000      	movs	r0, #0
    ee8c:	4770      	bx	lr
    ee8e:	b510      	push	{r4, lr}
    ee90:	2801      	cmp	r0, #1
    ee92:	d006      	beq.n	eea2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    ee94:	2802      	cmp	r0, #2
    ee96:	d004      	beq.n	eea2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    ee98:	f240 2173 	movw	r1, #627	; 0x273
    ee9c:	2006      	movs	r0, #6
    ee9e:	f7f5 fda7 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eea2:	bd10      	pop	{r4, pc}
    eea4:	2801      	cmp	r0, #1
    eea6:	d002      	beq.n	eeae <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    eea8:	2802      	cmp	r0, #2
    eeaa:	d105      	bne.n	eeb8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    eeac:	e002      	b.n	eeb4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    eeae:	2901      	cmp	r1, #1
    eeb0:	d004      	beq.n	eebc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    eeb2:	e001      	b.n	eeb8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    eeb4:	2902      	cmp	r1, #2
    eeb6:	d001      	beq.n	eebc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    eeb8:	2000      	movs	r0, #0
    eeba:	4770      	bx	lr
    eebc:	2001      	movs	r0, #1
    eebe:	4770      	bx	lr
    eec0:	1a40      	subs	r0, r0, r1
    eec2:	b200      	sxth	r0, r0
    eec4:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    eec8:	4288      	cmp	r0, r1
    eeca:	dc01      	bgt.n	eed0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    eecc:	2800      	cmp	r0, #0
    eece:	dc01      	bgt.n	eed4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    eed0:	2001      	movs	r0, #1
    eed2:	4770      	bx	lr
    eed4:	2000      	movs	r0, #0
    eed6:	4770      	bx	lr
    eed8:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    eedc:	f001 0107 	and.w	r1, r1, #7
    eee0:	7800      	ldrb	r0, [r0, #0]
    eee2:	2201      	movs	r2, #1
    eee4:	408a      	lsls	r2, r1
    eee6:	4010      	ands	r0, r2
    eee8:	40c8      	lsrs	r0, r1
    eeea:	4770      	bx	lr
    eeec:	b118      	cbz	r0, eef6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    eeee:	2802      	cmp	r0, #2
    eef0:	d001      	beq.n	eef6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    eef2:	2001      	movs	r0, #1
    eef4:	4770      	bx	lr
    eef6:	2000      	movs	r0, #0
    eef8:	4770      	bx	lr

0000eefa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    eefa:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    eefe:	7881      	ldrb	r1, [r0, #2]
    ef00:	4604      	mov	r4, r0
    ef02:	291a      	cmp	r1, #26
    ef04:	d025      	beq.n	ef52 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x58>
    ef06:	dc0e      	bgt.n	ef26 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    ef08:	2916      	cmp	r1, #22
    ef0a:	d22e      	bcs.n	ef6a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    ef0c:	e8df f001 	tbb	[pc, r1]
    ef10:	2d2d2d2d 	.word	0x2d2d2d2d
    ef14:	2d2d212d 	.word	0x2d2d212d
    ef18:	2d2d2d2d 	.word	0x2d2d2d2d
    ef1c:	2d2d2d2d 	.word	0x2d2d2d2d
    ef20:	212d2d2d 	.word	0x212d2d2d
    ef24:	2121      	.short	0x2121
    ef26:	292a      	cmp	r1, #42	; 0x2a
    ef28:	d01f      	beq.n	ef6a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    ef2a:	dc0b      	bgt.n	ef44 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    ef2c:	f1a1 011e 	sub.w	r1, r1, #30
    ef30:	290c      	cmp	r1, #12
    ef32:	d21a      	bcs.n	ef6a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    ef34:	e8df f001 	tbb	[pc, r1]
    ef38:	19191919 	.word	0x19191919
    ef3c:	19191919 	.word	0x19191919
    ef40:	0d191919 	.word	0x0d191919
    ef44:	393a      	subs	r1, #58	; 0x3a
    ef46:	2904      	cmp	r1, #4
    ef48:	d20f      	bcs.n	ef6a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    ef4a:	e8df f001 	tbb	[pc, r1]
    ef4e:	020e      	.short	0x020e
    ef50:	020e      	.short	0x020e
    ef52:	8820      	ldrh	r0, [r4, #0]
    ef54:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    ef58:	d207      	bcs.n	ef6a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    ef5a:	2701      	movs	r7, #1
    ef5c:	4669      	mov	r1, sp
    ef5e:	f7fe fc9f 	bl	d8a0 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ef62:	b120      	cbz	r0, ef6e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x74>
    ef64:	2002      	movs	r0, #2
    ef66:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ef6a:	2012      	movs	r0, #18
    ef6c:	e7fb      	b.n	ef66 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    ef6e:	9d01      	ldr	r5, [sp, #4]
    ef70:	4668      	mov	r0, sp
    ef72:	462e      	mov	r6, r5
    ef74:	f505 75b8 	add.w	r5, r5, #368	; 0x170
    ef78:	f206 1671 	addw	r6, r6, #369	; 0x171
    ef7c:	f000 fe66 	bl	fc4c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x32e>
    ef80:	b108      	cbz	r0, ef86 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    ef82:	7828      	ldrb	r0, [r5, #0]
    ef84:	b108      	cbz	r0, ef8a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x90>
    ef86:	200c      	movs	r0, #12
    ef88:	e7ed      	b.n	ef66 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    ef8a:	702f      	strb	r7, [r5, #0]
    ef8c:	78a0      	ldrb	r0, [r4, #2]
    ef8e:	7030      	strb	r0, [r6, #0]
    ef90:	4668      	mov	r0, sp
    ef92:	f7ff f83e 	bl	e012 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    ef96:	2000      	movs	r0, #0
    ef98:	e7e5      	b.n	ef66 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>

0000ef9a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    ef9a:	b510      	push	{r4, lr}
    ef9c:	4604      	mov	r4, r0
    ef9e:	7800      	ldrb	r0, [r0, #0]
    efa0:	b118      	cbz	r0, efaa <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    efa2:	2801      	cmp	r0, #1
    efa4:	d001      	beq.n	efaa <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    efa6:	2012      	movs	r0, #18
    efa8:	bd10      	pop	{r4, pc}
    efaa:	f000 fe03 	bl	fbb4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    efae:	b120      	cbz	r0, efba <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    efb0:	f7f7 f9ea 	bl	6388 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    efb4:	b108      	cbz	r0, efba <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    efb6:	200c      	movs	r0, #12
    efb8:	bd10      	pop	{r4, pc}
    efba:	7820      	ldrb	r0, [r4, #0]
    efbc:	f7ff ff96 	bl	eeec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    efc0:	1de2      	adds	r2, r4, #7
    efc2:	f104 0317 	add.w	r3, r4, #23
    efc6:	1c61      	adds	r1, r4, #1
    efc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    efcc:	f7f7 ba0e 	b.w	63ec <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000efd0 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    efd0:	b510      	push	{r4, lr}
    efd2:	4604      	mov	r4, r0
    efd4:	f000 fecb 	bl	fd6e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
    efd8:	b108      	cbz	r0, efde <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    efda:	200c      	movs	r0, #12
    efdc:	bd10      	pop	{r4, pc}
    efde:	7820      	ldrb	r0, [r4, #0]
    efe0:	b118      	cbz	r0, efea <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    efe2:	2801      	cmp	r0, #1
    efe4:	d001      	beq.n	efea <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    efe6:	2012      	movs	r0, #18
    efe8:	bd10      	pop	{r4, pc}
    efea:	f7ff ff7f 	bl	eeec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    efee:	1c61      	adds	r1, r4, #1
    eff0:	f7f7 fa74 	bl	64dc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    eff4:	b108      	cbz	r0, effa <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    eff6:	2000      	movs	r0, #0
    eff8:	bd10      	pop	{r4, pc}
    effa:	2007      	movs	r0, #7
    effc:	bd10      	pop	{r4, pc}

0000effe <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    effe:	b510      	push	{r4, lr}
    f000:	f000 fdd8 	bl	fbb4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    f004:	b120      	cbz	r0, f010 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    f006:	f7f7 f9bf 	bl	6388 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f00a:	b108      	cbz	r0, f010 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    f00c:	200c      	movs	r0, #12
    f00e:	bd10      	pop	{r4, pc}
    f010:	f7f7 fa32 	bl	6478 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    f014:	2000      	movs	r0, #0
    f016:	bd10      	pop	{r4, pc}

0000f018 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    f018:	b510      	push	{r4, lr}
    f01a:	f000 fea8 	bl	fd6e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
    f01e:	b108      	cbz	r0, f024 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    f020:	200c      	movs	r0, #12
    f022:	bd10      	pop	{r4, pc}
    f024:	f7f7 fa82 	bl	652c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    f028:	2000      	movs	r0, #0
    f02a:	bd10      	pop	{r4, pc}

0000f02c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    f02c:	b510      	push	{r4, lr}
    f02e:	460b      	mov	r3, r1
    f030:	2201      	movs	r2, #1
    f032:	f100 0110 	add.w	r1, r0, #16
    f036:	f7fe fc15 	bl	d864 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f03a:	2000      	movs	r0, #0
    f03c:	bd10      	pop	{r4, pc}

0000f03e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    f03e:	b510      	push	{r4, lr}
    f040:	8800      	ldrh	r0, [r0, #0]
    f042:	2100      	movs	r1, #0
    f044:	f7fe faf3 	bl	d62e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f048:	b118      	cbz	r0, f052 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    f04a:	f890 1173 	ldrb.w	r1, [r0, #371]	; 0x173
    f04e:	b111      	cbz	r1, f056 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    f050:	e007      	b.n	f062 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    f052:	2002      	movs	r0, #2
    f054:	bd10      	pop	{r4, pc}
    f056:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    f05a:	2914      	cmp	r1, #20
    f05c:	d003      	beq.n	f066 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f05e:	2915      	cmp	r1, #21
    f060:	d001      	beq.n	f066 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f062:	200c      	movs	r0, #12
    f064:	bd10      	pop	{r4, pc}
    f066:	2102      	movs	r1, #2
    f068:	f880 1173 	strb.w	r1, [r0, #371]	; 0x173
    f06c:	2000      	movs	r0, #0
    f06e:	bd10      	pop	{r4, pc}

0000f070 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    f070:	b538      	push	{r3, r4, r5, lr}
    f072:	4605      	mov	r5, r0
    f074:	8800      	ldrh	r0, [r0, #0]
    f076:	2100      	movs	r1, #0
    f078:	f7fe fad9 	bl	d62e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f07c:	0004      	movs	r4, r0
    f07e:	d003      	beq.n	f088 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    f080:	f894 0173 	ldrb.w	r0, [r4, #371]	; 0x173
    f084:	b110      	cbz	r0, f08c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    f086:	e010      	b.n	f0aa <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    f088:	2002      	movs	r0, #2
    f08a:	bd38      	pop	{r3, r4, r5, pc}
    f08c:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    f090:	2814      	cmp	r0, #20
    f092:	d001      	beq.n	f098 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    f094:	2815      	cmp	r0, #21
    f096:	d108      	bne.n	f0aa <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    f098:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    f09c:	f88d 0000 	strb.w	r0, [sp]
    f0a0:	9800      	ldr	r0, [sp, #0]
    f0a2:	9000      	str	r0, [sp, #0]
    f0a4:	f89d 0000 	ldrb.w	r0, [sp]
    f0a8:	b108      	cbz	r0, f0ae <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3e>
    f0aa:	200c      	movs	r0, #12
    f0ac:	bd38      	pop	{r3, r4, r5, pc}
    f0ae:	2210      	movs	r2, #16
    f0b0:	1ca9      	adds	r1, r5, #2
    f0b2:	f504 70ba 	add.w	r0, r4, #372	; 0x174
    f0b6:	f7fd fac2 	bl	c63e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f0ba:	2001      	movs	r0, #1
    f0bc:	f884 0173 	strb.w	r0, [r4, #371]	; 0x173
    f0c0:	2000      	movs	r0, #0
    f0c2:	bd38      	pop	{r3, r4, r5, pc}

0000f0c4 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    f0c4:	b510      	push	{r4, lr}
    f0c6:	2108      	movs	r1, #8
    f0c8:	f7f5 fd46 	bl	4b58 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f0cc:	2000      	movs	r0, #0
    f0ce:	bd10      	pop	{r4, pc}

0000f0d0 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    f0d0:	b510      	push	{r4, lr}
    f0d2:	4604      	mov	r4, r0
    f0d4:	f000 fdd1 	bl	fc7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    f0d8:	f7ff f9f0 	bl	e4bc <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    f0dc:	7020      	strb	r0, [r4, #0]
    f0de:	2000      	movs	r0, #0
    f0e0:	bd10      	pop	{r4, pc}

0000f0e2 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    f0e2:	b510      	push	{r4, lr}
    f0e4:	4604      	mov	r4, r0
    f0e6:	f000 fdab 	bl	fc40 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    f0ea:	b140      	cbz	r0, f0fe <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    f0ec:	20fb      	movs	r0, #251	; 0xfb
    f0ee:	8020      	strh	r0, [r4, #0]
    f0f0:	f640 0148 	movw	r1, #2120	; 0x848
    f0f4:	8061      	strh	r1, [r4, #2]
    f0f6:	80a0      	strh	r0, [r4, #4]
    f0f8:	80e1      	strh	r1, [r4, #6]
    f0fa:	2000      	movs	r0, #0
    f0fc:	bd10      	pop	{r4, pc}
    f0fe:	2001      	movs	r0, #1
    f100:	bd10      	pop	{r4, pc}

0000f102 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    f102:	2108      	movs	r1, #8
    f104:	7001      	strb	r1, [r0, #0]
    f106:	2000      	movs	r0, #0
    f108:	4770      	bx	lr

0000f10a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    f10a:	b510      	push	{r4, lr}
    f10c:	4604      	mov	r4, r0
    f10e:	20d8      	movs	r0, #216	; 0xd8
    f110:	7020      	strb	r0, [r4, #0]
    f112:	f000 fd76 	bl	fc02 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e4>
    f116:	7060      	strb	r0, [r4, #1]
    f118:	2000      	movs	r0, #0
    f11a:	bd10      	pop	{r4, pc}

0000f11c <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    f11c:	2108      	movs	r1, #8
    f11e:	7001      	strb	r1, [r0, #0]
    f120:	2000      	movs	r0, #0
    f122:	4770      	bx	lr

0000f124 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    f124:	b510      	push	{r4, lr}
    f126:	4604      	mov	r4, r0
    f128:	7800      	ldrb	r0, [r0, #0]
    f12a:	b108      	cbz	r0, f130 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    f12c:	2801      	cmp	r0, #1
    f12e:	d110      	bne.n	f152 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    f130:	f000 fd40 	bl	fbb4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    f134:	b120      	cbz	r0, f140 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    f136:	f7f7 f927 	bl	6388 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f13a:	b108      	cbz	r0, f140 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    f13c:	200c      	movs	r0, #12
    f13e:	bd10      	pop	{r4, pc}
    f140:	7820      	ldrb	r0, [r4, #0]
    f142:	f7ff fed3 	bl	eeec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f146:	1c61      	adds	r1, r4, #1
    f148:	f7fe fb72 	bl	d830 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    f14c:	b108      	cbz	r0, f152 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    f14e:	2000      	movs	r0, #0
    f150:	bd10      	pop	{r4, pc}
    f152:	2012      	movs	r0, #18
    f154:	bd10      	pop	{r4, pc}

0000f156 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    f156:	b510      	push	{r4, lr}
    f158:	4604      	mov	r4, r0
    f15a:	f000 fe08 	bl	fd6e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
    f15e:	b108      	cbz	r0, f164 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    f160:	200c      	movs	r0, #12
    f162:	bd10      	pop	{r4, pc}
    f164:	7820      	ldrb	r0, [r4, #0]
    f166:	b108      	cbz	r0, f16c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    f168:	2801      	cmp	r0, #1
    f16a:	d107      	bne.n	f17c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f16c:	f7ff febe 	bl	eeec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f170:	1c61      	adds	r1, r4, #1
    f172:	f7fe fb6c 	bl	d84e <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    f176:	b108      	cbz	r0, f17c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f178:	2000      	movs	r0, #0
    f17a:	bd10      	pop	{r4, pc}
    f17c:	2012      	movs	r0, #18
    f17e:	bd10      	pop	{r4, pc}

0000f180 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    f180:	b510      	push	{r4, lr}
    f182:	4604      	mov	r4, r0
    f184:	f000 fd16 	bl	fbb4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    f188:	b108      	cbz	r0, f18e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    f18a:	200c      	movs	r0, #12
    f18c:	bd10      	pop	{r4, pc}
    f18e:	7820      	ldrb	r0, [r4, #0]
    f190:	f000 0001 	and.w	r0, r0, #1
    f194:	f7f7 f8f2 	bl	637c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    f198:	2000      	movs	r0, #0
    f19a:	bd10      	pop	{r4, pc}

0000f19c <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    f19c:	b570      	push	{r4, r5, r6, lr}
    f19e:	b086      	sub	sp, #24
    f1a0:	4605      	mov	r5, r0
    f1a2:	f000 fd6a 	bl	fc7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    f1a6:	4604      	mov	r4, r0
    f1a8:	4669      	mov	r1, sp
    f1aa:	f7ff f99f 	bl	e4ec <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI>
    f1ae:	b118      	cbz	r0, f1b8 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x1c>
    f1b0:	4669      	mov	r1, sp
    f1b2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f1b4:	f7fe fa81 	bl	d6ba <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    f1b8:	2200      	movs	r2, #0
    f1ba:	a804      	add	r0, sp, #16
    f1bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f1be:	f7f6 f879 	bl	52b4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f1c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    f1c6:	e9cd 0100 	strd	r0, r1, [sp]
    f1ca:	b168      	cbz	r0, f1e8 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x4c>
    f1cc:	7829      	ldrb	r1, [r5, #0]
    f1ce:	466a      	mov	r2, sp
    f1d0:	1c68      	adds	r0, r5, #1
    f1d2:	f000 fbf5 	bl	f9c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    f1d6:	0006      	movs	r6, r0
    f1d8:	d00c      	beq.n	f1f4 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x58>
    f1da:	4669      	mov	r1, sp
    f1dc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f1de:	f7fe fa6c 	bl	d6ba <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    f1e2:	4630      	mov	r0, r6
    f1e4:	b006      	add	sp, #24
    f1e6:	bd70      	pop	{r4, r5, r6, pc}
    f1e8:	4669      	mov	r1, sp
    f1ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f1ec:	f7fe fa65 	bl	d6ba <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    f1f0:	2007      	movs	r0, #7
    f1f2:	e7f7      	b.n	f1e4 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x48>
    f1f4:	4669      	mov	r1, sp
    f1f6:	4620      	mov	r0, r4
    f1f8:	f7ff f98f 	bl	e51a <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    f1fc:	9800      	ldr	r0, [sp, #0]
    f1fe:	9003      	str	r0, [sp, #12]
    f200:	7828      	ldrb	r0, [r5, #0]
    f202:	f8ad 000a 	strh.w	r0, [sp, #10]
    f206:	2000      	movs	r0, #0
    f208:	f88d 0008 	strb.w	r0, [sp, #8]
    f20c:	a802      	add	r0, sp, #8
    f20e:	f000 fa35 	bl	f67c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    f212:	e7e7      	b.n	f1e4 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x48>

0000f214 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    f214:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f216:	4605      	mov	r5, r0
    f218:	f000 fd2f 	bl	fc7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    f21c:	4606      	mov	r6, r0
    f21e:	7828      	ldrb	r0, [r5, #0]
    f220:	2400      	movs	r4, #0
    f222:	b160      	cbz	r0, f23e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    f224:	f88d 4000 	strb.w	r4, [sp]
    f228:	2001      	movs	r0, #1
    f22a:	f10d 0101 	add.w	r1, sp, #1
    f22e:	f7f6 faa1 	bl	5774 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f232:	b120      	cbz	r0, f23e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    f234:	4668      	mov	r0, sp
    f236:	f000 f894 	bl	f362 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    f23a:	2800      	cmp	r0, #0
    f23c:	d112      	bne.n	f264 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    f23e:	f88d 400c 	strb.w	r4, [sp, #12]
    f242:	4630      	mov	r0, r6
    f244:	f7ff f930 	bl	e4a8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f248:	b118      	cbz	r0, f252 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    f24a:	2080      	movs	r0, #128	; 0x80
    f24c:	f8ad 000d 	strh.w	r0, [sp, #13]
    f250:	e001      	b.n	f256 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    f252:	f8ad 400d 	strh.w	r4, [sp, #13]
    f256:	f88d 400f 	strb.w	r4, [sp, #15]
    f25a:	7828      	ldrb	r0, [r5, #0]
    f25c:	2801      	cmp	r0, #1
    f25e:	d003      	beq.n	f268 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    f260:	b138      	cbz	r0, f272 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    f262:	2012      	movs	r0, #18
    f264:	b004      	add	sp, #16
    f266:	bd70      	pop	{r4, r5, r6, pc}
    f268:	a903      	add	r1, sp, #12
    f26a:	4630      	mov	r0, r6
    f26c:	f7fb fcc6 	bl	abfc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    f270:	e7f8      	b.n	f264 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    f272:	4630      	mov	r0, r6
    f274:	f000 fd19 	bl	fcaa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38c>
    f278:	e7f4      	b.n	f264 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000f27a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    f27a:	b530      	push	{r4, r5, lr}
    f27c:	b08b      	sub	sp, #44	; 0x2c
    f27e:	4604      	mov	r4, r0
    f280:	f000 fcfb 	bl	fc7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    f284:	4602      	mov	r2, r0
    f286:	8860      	ldrh	r0, [r4, #2]
    f288:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    f28c:	d902      	bls.n	f294 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    f28e:	2012      	movs	r0, #18
    f290:	b00b      	add	sp, #44	; 0x2c
    f292:	bd30      	pop	{r4, r5, pc}
    f294:	2500      	movs	r5, #0
    f296:	f88d 5004 	strb.w	r5, [sp, #4]
    f29a:	7921      	ldrb	r1, [r4, #4]
    f29c:	9500      	str	r5, [sp, #0]
    f29e:	f89d 0000 	ldrb.w	r0, [sp]
    f2a2:	2905      	cmp	r1, #5
    f2a4:	f040 0010 	orr.w	r0, r0, #16
    f2a8:	f88d 0000 	strb.w	r0, [sp]
    f2ac:	d254      	bcs.n	f358 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xde>
    f2ae:	e8df f001 	tbb	[pc, r1]
    f2b2:	0803      	.short	0x0803
    f2b4:	000b1105 	.word	0x000b1105
    f2b8:	f040 0001 	orr.w	r0, r0, #1
    f2bc:	f040 0002 	orr.w	r0, r0, #2
    f2c0:	e006      	b.n	f2d0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x56>
    f2c2:	f040 0009 	orr.w	r0, r0, #9
    f2c6:	e001      	b.n	f2cc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x52>
    f2c8:	f040 0001 	orr.w	r0, r0, #1
    f2cc:	f040 0004 	orr.w	r0, r0, #4
    f2d0:	f88d 0000 	strb.w	r0, [sp]
    f2d4:	f8bd 0000 	ldrh.w	r0, [sp]
    f2d8:	9000      	str	r0, [sp, #0]
    f2da:	f8bd 0000 	ldrh.w	r0, [sp]
    f2de:	f8ad 0005 	strh.w	r0, [sp, #5]
    f2e2:	8821      	ldrh	r1, [r4, #0]
    f2e4:	f8dd 0006 	ldr.w	r0, [sp, #6]
    f2e8:	f361 201f 	bfi	r0, r1, #8, #24
    f2ec:	f8cd 0006 	str.w	r0, [sp, #6]
    f2f0:	8861      	ldrh	r1, [r4, #2]
    f2f2:	f8dd 0009 	ldr.w	r0, [sp, #9]
    f2f6:	f361 201f 	bfi	r0, r1, #8, #24
    f2fa:	f8cd 0009 	str.w	r0, [sp, #9]
    f2fe:	7b60      	ldrb	r0, [r4, #13]
    f300:	f88d 000d 	strb.w	r0, [sp, #13]
    f304:	7960      	ldrb	r0, [r4, #5]
    f306:	f88d 000e 	strb.w	r0, [sp, #14]
    f30a:	79a0      	ldrb	r0, [r4, #6]
    f30c:	f88d 000f 	strb.w	r0, [sp, #15]
    f310:	f8d4 0007 	ldr.w	r0, [r4, #7]
    f314:	9004      	str	r0, [sp, #16]
    f316:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    f31a:	f8ad 0014 	strh.w	r0, [sp, #20]
    f31e:	7ba0      	ldrb	r0, [r4, #14]
    f320:	f88d 0016 	strb.w	r0, [sp, #22]
    f324:	207f      	movs	r0, #127	; 0x7f
    f326:	f88d 0017 	strb.w	r0, [sp, #23]
    f32a:	2001      	movs	r0, #1
    f32c:	f88d 0018 	strb.w	r0, [sp, #24]
    f330:	f88d 5019 	strb.w	r5, [sp, #25]
    f334:	f88d 001a 	strb.w	r0, [sp, #26]
    f338:	f88d 501b 	strb.w	r5, [sp, #27]
    f33c:	4610      	mov	r0, r2
    f33e:	f7ff f8cf 	bl	e4e0 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    f342:	f88d 001c 	strb.w	r0, [sp, #28]
    f346:	f88d 501d 	strb.w	r5, [sp, #29]
    f34a:	f88d 501e 	strb.w	r5, [sp, #30]
    f34e:	a909      	add	r1, sp, #36	; 0x24
    f350:	a801      	add	r0, sp, #4
    f352:	f000 f8ff 	bl	f554 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    f356:	e79b      	b.n	f290 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x16>
    f358:	f241 01a9 	movw	r1, #4265	; 0x10a9
    f35c:	2039      	movs	r0, #57	; 0x39
    f35e:	f7f5 fb47 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f362 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    f362:	b570      	push	{r4, r5, r6, lr}
    f364:	4604      	mov	r4, r0
    f366:	7800      	ldrb	r0, [r0, #0]
    f368:	2101      	movs	r1, #1
    f36a:	f7fe f960 	bl	d62e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f36e:	0005      	movs	r5, r0
    f370:	d007      	beq.n	f382 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    f372:	f7ff faaa 	bl	e8ca <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f376:	b160      	cbz	r0, f392 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f378:	4628      	mov	r0, r5
    f37a:	f7ff f89b 	bl	e4b4 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f37e:	b110      	cbz	r0, f386 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    f380:	e005      	b.n	f38e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    f382:	2042      	movs	r0, #66	; 0x42
    f384:	bd70      	pop	{r4, r5, r6, pc}
    f386:	4628      	mov	r0, r5
    f388:	f7ff f88a 	bl	e4a0 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f38c:	b108      	cbz	r0, f392 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f38e:	200c      	movs	r0, #12
    f390:	bd70      	pop	{r4, r5, r6, pc}
    f392:	1c61      	adds	r1, r4, #1
    f394:	4628      	mov	r0, r5
    f396:	f7ff f89b 	bl	e4d0 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    f39a:	2000      	movs	r0, #0
    f39c:	bd70      	pop	{r4, r5, r6, pc}

0000f39e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    f39e:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f3a0:	460d      	mov	r5, r1
    f3a2:	4604      	mov	r4, r0
    f3a4:	f000 fc4c 	bl	fc40 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    f3a8:	b130      	cbz	r0, f3b8 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    f3aa:	88a2      	ldrh	r2, [r4, #4]
    f3ac:	f244 2090 	movw	r0, #17040	; 0x4290
    f3b0:	4282      	cmp	r2, r0
    f3b2:	d903      	bls.n	f3bc <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    f3b4:	2012      	movs	r0, #18
    f3b6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f3b8:	2001      	movs	r0, #1
    f3ba:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f3bc:	f640 0048 	movw	r0, #2120	; 0x848
    f3c0:	4282      	cmp	r2, r0
    f3c2:	d300      	bcc.n	f3c6 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    f3c4:	4602      	mov	r2, r0
    f3c6:	8820      	ldrh	r0, [r4, #0]
    f3c8:	f8ad 0000 	strh.w	r0, [sp]
    f3cc:	8860      	ldrh	r0, [r4, #2]
    f3ce:	f8ad 0002 	strh.w	r0, [sp, #2]
    f3d2:	f8ad 2004 	strh.w	r2, [sp, #4]
    f3d6:	8860      	ldrh	r0, [r4, #2]
    f3d8:	f8ad 0006 	strh.w	r0, [sp, #6]
    f3dc:	f8ad 2008 	strh.w	r2, [sp, #8]
    f3e0:	8820      	ldrh	r0, [r4, #0]
    f3e2:	8028      	strh	r0, [r5, #0]
    f3e4:	4668      	mov	r0, sp
    f3e6:	f7fb fcd7 	bl	ad98 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    f3ea:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f3ec <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    f3ec:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f3ee:	4604      	mov	r4, r0
    f3f0:	f7fb fe22 	bl	b038 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f3f4:	f3c0 2000 	ubfx	r0, r0, #8, #1
    f3f8:	b1b0      	cbz	r0, f428 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    f3fa:	f10d 0007 	add.w	r0, sp, #7
    f3fe:	9000      	str	r0, [sp, #0]
    f400:	7922      	ldrb	r2, [r4, #4]
    f402:	78e1      	ldrb	r1, [r4, #3]
    f404:	78a0      	ldrb	r0, [r4, #2]
    f406:	f10d 0306 	add.w	r3, sp, #6
    f40a:	f000 fc74 	bl	fcf6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d8>
    f40e:	2800      	cmp	r0, #0
    f410:	d109      	bne.n	f426 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    f412:	8820      	ldrh	r0, [r4, #0]
    f414:	f8ad 0004 	strh.w	r0, [sp, #4]
    f418:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    f41c:	f8ad 0008 	strh.w	r0, [sp, #8]
    f420:	a801      	add	r0, sp, #4
    f422:	f000 f97c 	bl	f71e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    f426:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f428:	2001      	movs	r0, #1
    f42a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f42c <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    f42c:	b510      	push	{r4, lr}
    f42e:	4604      	mov	r4, r0
    f430:	f000 fbc0 	bl	fbb4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    f434:	b120      	cbz	r0, f440 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    f436:	f7f6 ffa7 	bl	6388 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f43a:	b108      	cbz	r0, f440 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    f43c:	200c      	movs	r0, #12
    f43e:	bd10      	pop	{r4, pc}
    f440:	7820      	ldrb	r0, [r4, #0]
    f442:	f7ff fd53 	bl	eeec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f446:	79e2      	ldrb	r2, [r4, #7]
    f448:	1c61      	adds	r1, r4, #1
    f44a:	f7f6 ff4b 	bl	62e4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    f44e:	b108      	cbz	r0, f454 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    f450:	2000      	movs	r0, #0
    f452:	bd10      	pop	{r4, pc}
    f454:	2002      	movs	r0, #2
    f456:	bd10      	pop	{r4, pc}

0000f458 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    f458:	b510      	push	{r4, lr}
    f45a:	4604      	mov	r4, r0
    f45c:	2001      	movs	r0, #1
    f45e:	f000 fa9d 	bl	f99c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    f462:	b128      	cbz	r0, f470 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    f464:	4621      	mov	r1, r4
    f466:	2001      	movs	r0, #1
    f468:	f7f6 f99c 	bl	57a4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f46c:	2000      	movs	r0, #0
    f46e:	bd10      	pop	{r4, pc}
    f470:	200c      	movs	r0, #12
    f472:	bd10      	pop	{r4, pc}

0000f474 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    f474:	b510      	push	{r4, lr}
    f476:	8800      	ldrh	r0, [r0, #0]
    f478:	f7f7 f814 	bl	64a4 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    f47c:	b108      	cbz	r0, f482 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    f47e:	2000      	movs	r0, #0
    f480:	bd10      	pop	{r4, pc}
    f482:	2030      	movs	r0, #48	; 0x30
    f484:	bd10      	pop	{r4, pc}

0000f486 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    f486:	b530      	push	{r4, r5, lr}
    f488:	b087      	sub	sp, #28
    f48a:	4605      	mov	r5, r0
    f48c:	f000 fbf5 	bl	fc7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    f490:	4604      	mov	r4, r0
    f492:	4669      	mov	r1, sp
    f494:	f7ff f849 	bl	e52a <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA>
    f498:	b118      	cbz	r0, f4a2 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x1c>
    f49a:	4669      	mov	r1, sp
    f49c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f49e:	f7fe f90c 	bl	d6ba <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    f4a2:	2200      	movs	r2, #0
    f4a4:	a805      	add	r0, sp, #20
    f4a6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f4a8:	f7f5 ff04 	bl	52b4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f4ac:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
    f4b0:	e9cd 0100 	strd	r0, r1, [sp]
    f4b4:	7829      	ldrb	r1, [r5, #0]
    f4b6:	466a      	mov	r2, sp
    f4b8:	1c68      	adds	r0, r5, #1
    f4ba:	f000 fa81 	bl	f9c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    f4be:	0005      	movs	r5, r0
    f4c0:	d006      	beq.n	f4d0 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x4a>
    f4c2:	4669      	mov	r1, sp
    f4c4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f4c6:	f7fe f8f8 	bl	d6ba <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    f4ca:	4628      	mov	r0, r5
    f4cc:	b007      	add	sp, #28
    f4ce:	bd30      	pop	{r4, r5, pc}
    f4d0:	4669      	mov	r1, sp
    f4d2:	4620      	mov	r0, r4
    f4d4:	f7ff f840 	bl	e558 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    f4d8:	2000      	movs	r0, #0
    f4da:	f88d 000c 	strb.w	r0, [sp, #12]
    f4de:	9800      	ldr	r0, [sp, #0]
    f4e0:	9004      	str	r0, [sp, #16]
    f4e2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    f4e6:	f8ad 000e 	strh.w	r0, [sp, #14]
    f4ea:	a803      	add	r0, sp, #12
    f4ec:	f000 f8ef 	bl	f6ce <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    f4f0:	e7ec      	b.n	f4cc <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x46>

0000f4f2 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    f4f2:	b51c      	push	{r2, r3, r4, lr}
    f4f4:	4604      	mov	r4, r0
    f4f6:	f000 fba3 	bl	fc40 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    f4fa:	b178      	cbz	r0, f51c <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    f4fc:	8820      	ldrh	r0, [r4, #0]
    f4fe:	f8ad 0000 	strh.w	r0, [sp]
    f502:	8860      	ldrh	r0, [r4, #2]
    f504:	f8ad 0002 	strh.w	r0, [sp, #2]
    f508:	8820      	ldrh	r0, [r4, #0]
    f50a:	f8ad 0004 	strh.w	r0, [sp, #4]
    f50e:	8860      	ldrh	r0, [r4, #2]
    f510:	f8ad 0006 	strh.w	r0, [sp, #6]
    f514:	4668      	mov	r0, sp
    f516:	f7fb fcc3 	bl	aea0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    f51a:	bd1c      	pop	{r2, r3, r4, pc}
    f51c:	2001      	movs	r0, #1
    f51e:	bd1c      	pop	{r2, r3, r4, pc}

0000f520 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    f520:	b510      	push	{r4, lr}
    f522:	f7f6 f963 	bl	57ec <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    f526:	2000      	movs	r0, #0
    f528:	bd10      	pop	{r4, pc}

0000f52a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    f52a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f52c:	460c      	mov	r4, r1
    f52e:	4605      	mov	r5, r0
    f530:	f000 fb86 	bl	fc40 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    f534:	b160      	cbz	r0, f550 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    f536:	4669      	mov	r1, sp
    f538:	4628      	mov	r0, r5
    f53a:	f7fe f9b1 	bl	d8a0 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f53e:	2800      	cmp	r0, #0
    f540:	d105      	bne.n	f54e <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    f542:	2100      	movs	r1, #0
    f544:	4622      	mov	r2, r4
    f546:	9801      	ldr	r0, [sp, #4]
    f548:	f000 fafe 	bl	fb48 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22a>
    f54c:	2000      	movs	r0, #0
    f54e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f550:	2001      	movs	r0, #1
    f552:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f554 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    f554:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f558:	460f      	mov	r7, r1
    f55a:	4605      	mov	r5, r0
    f55c:	7806      	ldrb	r6, [r0, #0]
    f55e:	f000 fa7f 	bl	fa60 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x142>
    f562:	2800      	cmp	r0, #0
    f564:	d10a      	bne.n	f57c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    f566:	4628      	mov	r0, r5
    f568:	f000 fa5e 	bl	fa28 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10a>
    f56c:	2800      	cmp	r0, #0
    f56e:	d105      	bne.n	f57c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    f570:	2001      	movs	r0, #1
    f572:	f7f5 fc43 	bl	4dfc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    f576:	4286      	cmp	r6, r0
    f578:	d302      	bcc.n	f580 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    f57a:	2007      	movs	r0, #7
    f57c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f580:	2101      	movs	r1, #1
    f582:	4630      	mov	r0, r6
    f584:	f7fe f853 	bl	d62e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f588:	0004      	movs	r4, r0
    f58a:	d004      	beq.n	f596 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    f58c:	f7ff f99d 	bl	e8ca <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f590:	b158      	cbz	r0, f5aa <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x56>
    f592:	200c      	movs	r0, #12
    f594:	e7f2      	b.n	f57c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    f596:	2200      	movs	r2, #0
    f598:	2101      	movs	r1, #1
    f59a:	4630      	mov	r0, r6
    f59c:	f7fe f82b 	bl	d5f6 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    f5a0:	0004      	movs	r4, r0
    f5a2:	d010      	beq.n	f5c6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x72>
    f5a4:	4631      	mov	r1, r6
    f5a6:	f7fe ff29 	bl	e3fc <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    f5aa:	4620      	mov	r0, r4
    f5ac:	f7fe ff86 	bl	e4bc <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    f5b0:	7038      	strb	r0, [r7, #0]
    f5b2:	74e8      	strb	r0, [r5, #19]
    f5b4:	4629      	mov	r1, r5
    f5b6:	4620      	mov	r0, r4
    f5b8:	f7f7 fd18 	bl	6fec <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    f5bc:	4606      	mov	r6, r0
    f5be:	7e68      	ldrb	r0, [r5, #25]
    f5c0:	b360      	cbz	r0, f61c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xc8>
    f5c2:	b12e      	cbz	r6, f5d0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7c>
    f5c4:	e02a      	b.n	f61c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xc8>
    f5c6:	f241 212b 	movw	r1, #4651	; 0x122b
    f5ca:	2039      	movs	r0, #57	; 0x39
    f5cc:	f7f5 fa10 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5d0:	4669      	mov	r1, sp
    f5d2:	4620      	mov	r0, r4
    f5d4:	f7fe ff8a 	bl	e4ec <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI>
    f5d8:	b118      	cbz	r0, f5e2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x8e>
    f5da:	4669      	mov	r1, sp
    f5dc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f5de:	f7fe f86c 	bl	d6ba <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    f5e2:	4669      	mov	r1, sp
    f5e4:	4620      	mov	r0, r4
    f5e6:	f7fe ffa0 	bl	e52a <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA>
    f5ea:	b118      	cbz	r0, f5f4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>
    f5ec:	4669      	mov	r1, sp
    f5ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f5f0:	f7fe f863 	bl	d6ba <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    f5f4:	2000      	movs	r0, #0
    f5f6:	f8ad 0004 	strh.w	r0, [sp, #4]
    f5fa:	9000      	str	r0, [sp, #0]
    f5fc:	f8ad 0006 	strh.w	r0, [sp, #6]
    f600:	4669      	mov	r1, sp
    f602:	4620      	mov	r0, r4
    f604:	f7fe ff89 	bl	e51a <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    f608:	4669      	mov	r1, sp
    f60a:	4620      	mov	r0, r4
    f60c:	f7fe ffa4 	bl	e558 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    f610:	4620      	mov	r0, r4
    f612:	f7fe ff79 	bl	e508 <sym_6SMKGRHQAIZHR6JTRBTFU3LNEOI457UCNN7L2SY>
    f616:	4620      	mov	r0, r4
    f618:	f7fe ff95 	bl	e546 <sym_57N4MHGOTN6SE7ESLAUPVT5Z7CNKRRVGNPONZCI>
    f61c:	4630      	mov	r0, r6
    f61e:	e7ad      	b.n	f57c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>

0000f620 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    f620:	b510      	push	{r4, lr}
    f622:	4604      	mov	r4, r0
    f624:	2000      	movs	r0, #0
    f626:	f000 f9b9 	bl	f99c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    f62a:	b128      	cbz	r0, f638 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    f62c:	4621      	mov	r1, r4
    f62e:	2000      	movs	r0, #0
    f630:	f7f6 f8b8 	bl	57a4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f634:	2000      	movs	r0, #0
    f636:	bd10      	pop	{r4, pc}
    f638:	200c      	movs	r0, #12
    f63a:	bd10      	pop	{r4, pc}

0000f63c <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>:
    f63c:	b510      	push	{r4, lr}
    f63e:	4604      	mov	r4, r0
    f640:	f7ff f95d 	bl	e8fe <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>
    f644:	b120      	cbz	r0, f650 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY+0x14>
    f646:	7820      	ldrb	r0, [r4, #0]
    f648:	f7f8 fbdc 	bl	7e04 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>
    f64c:	2000      	movs	r0, #0
    f64e:	bd10      	pop	{r4, pc}
    f650:	200c      	movs	r0, #12
    f652:	bd10      	pop	{r4, pc}

0000f654 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    f654:	b510      	push	{r4, lr}
    f656:	7800      	ldrb	r0, [r0, #0]
    f658:	f000 0001 	and.w	r0, r0, #1
    f65c:	f7f8 fbd8 	bl	7e10 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>
    f660:	2000      	movs	r0, #0
    f662:	bd10      	pop	{r4, pc}

0000f664 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    f664:	b510      	push	{r4, lr}
    f666:	4604      	mov	r4, r0
    f668:	f000 faea 	bl	fc40 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    f66c:	b120      	cbz	r0, f678 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    f66e:	4620      	mov	r0, r4
    f670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f674:	f7fb bb90 	b.w	ad98 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    f678:	2001      	movs	r0, #1
    f67a:	bd10      	pop	{r4, pc}

0000f67c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    f67c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f67e:	4605      	mov	r5, r0
    f680:	7800      	ldrb	r0, [r0, #0]
    f682:	2101      	movs	r1, #1
    f684:	f7fd ffd3 	bl	d62e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f688:	0006      	movs	r6, r0
    f68a:	d01e      	beq.n	f6ca <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4e>
    f68c:	2201      	movs	r2, #1
    f68e:	8869      	ldrh	r1, [r5, #2]
    f690:	f000 f9ab 	bl	f9ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    f694:	2800      	cmp	r0, #0
    f696:	d117      	bne.n	f6c8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4c>
    f698:	4630      	mov	r0, r6
    f69a:	f7fe fece 	bl	e43a <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    f69e:	4604      	mov	r4, r0
    f6a0:	8868      	ldrh	r0, [r5, #2]
    f6a2:	42a0      	cmp	r0, r4
    f6a4:	d800      	bhi.n	f6a8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2c>
    f6a6:	4604      	mov	r4, r0
    f6a8:	4669      	mov	r1, sp
    f6aa:	4630      	mov	r0, r6
    f6ac:	f7fe ff30 	bl	e510 <sym_UVJC3XBQQLDGXNDNKXZFSW7F5OWZWJU7FTAZXEI>
    f6b0:	6868      	ldr	r0, [r5, #4]
    f6b2:	9000      	str	r0, [sp, #0]
    f6b4:	f8ad 4004 	strh.w	r4, [sp, #4]
    f6b8:	4669      	mov	r1, sp
    f6ba:	4630      	mov	r0, r6
    f6bc:	f7fe ff2d 	bl	e51a <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    f6c0:	4630      	mov	r0, r6
    f6c2:	f7fe ff21 	bl	e508 <sym_6SMKGRHQAIZHR6JTRBTFU3LNEOI457UCNN7L2SY>
    f6c6:	2000      	movs	r0, #0
    f6c8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f6ca:	2042      	movs	r0, #66	; 0x42
    f6cc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f6ce <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    f6ce:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f6d0:	4604      	mov	r4, r0
    f6d2:	7800      	ldrb	r0, [r0, #0]
    f6d4:	2101      	movs	r1, #1
    f6d6:	f7fd ffaa 	bl	d62e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f6da:	0005      	movs	r5, r0
    f6dc:	d00b      	beq.n	f6f6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
    f6de:	2201      	movs	r2, #1
    f6e0:	8861      	ldrh	r1, [r4, #2]
    f6e2:	f000 f982 	bl	f9ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    f6e6:	2800      	cmp	r0, #0
    f6e8:	d106      	bne.n	f6f8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2a>
    f6ea:	8866      	ldrh	r6, [r4, #2]
    f6ec:	4628      	mov	r0, r5
    f6ee:	f7fe fee1 	bl	e4b4 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f6f2:	b110      	cbz	r0, f6fa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2c>
    f6f4:	e002      	b.n	f6fc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2e>
    f6f6:	2042      	movs	r0, #66	; 0x42
    f6f8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f6fa:	2600      	movs	r6, #0
    f6fc:	4669      	mov	r1, sp
    f6fe:	4628      	mov	r0, r5
    f700:	f7fe ff25 	bl	e54e <sym_ECJZL6MVN4B4UZUQDXL2OTZMAL25BOLWE4F7TMI>
    f704:	6860      	ldr	r0, [r4, #4]
    f706:	9000      	str	r0, [sp, #0]
    f708:	f8ad 6004 	strh.w	r6, [sp, #4]
    f70c:	4669      	mov	r1, sp
    f70e:	4628      	mov	r0, r5
    f710:	f7fe ff22 	bl	e558 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    f714:	4628      	mov	r0, r5
    f716:	f7fe ff16 	bl	e546 <sym_57N4MHGOTN6SE7ESLAUPVT5Z7CNKRRVGNPONZCI>
    f71a:	2000      	movs	r0, #0
    f71c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f71e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    f71e:	b510      	push	{r4, lr}
    f720:	4604      	mov	r4, r0
    f722:	8880      	ldrh	r0, [r0, #4]
    f724:	b128      	cbz	r0, f732 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f726:	2801      	cmp	r0, #1
    f728:	d003      	beq.n	f732 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f72a:	2802      	cmp	r0, #2
    f72c:	d001      	beq.n	f732 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f72e:	2012      	movs	r0, #18
    f730:	bd10      	pop	{r4, pc}
    f732:	78e0      	ldrb	r0, [r4, #3]
    f734:	f000 f9e5 	bl	fb02 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e4>
    f738:	b148      	cbz	r0, f74e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f73a:	78a0      	ldrb	r0, [r4, #2]
    f73c:	f000 f9e1 	bl	fb02 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e4>
    f740:	b128      	cbz	r0, f74e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f742:	4620      	mov	r0, r4
    f744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f748:	2101      	movs	r1, #1
    f74a:	f000 b883 	b.w	f854 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    f74e:	2011      	movs	r0, #17
    f750:	bd10      	pop	{r4, pc}

0000f752 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    f752:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f754:	460c      	mov	r4, r1
    f756:	4605      	mov	r5, r0
    f758:	8800      	ldrh	r0, [r0, #0]
    f75a:	4669      	mov	r1, sp
    f75c:	f7fe f8a0 	bl	d8a0 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f760:	2800      	cmp	r0, #0
    f762:	d106      	bne.n	f772 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    f764:	9801      	ldr	r0, [sp, #4]
    f766:	8829      	ldrh	r1, [r5, #0]
    f768:	8021      	strh	r1, [r4, #0]
    f76a:	f8b0 0098 	ldrh.w	r0, [r0, #152]	; 0x98
    f76e:	8060      	strh	r0, [r4, #2]
    f770:	2000      	movs	r0, #0
    f772:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f774 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    f774:	b510      	push	{r4, lr}
    f776:	4604      	mov	r4, r0
    f778:	4601      	mov	r1, r0
    f77a:	2000      	movs	r0, #0
    f77c:	f7f5 fffa 	bl	5774 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f780:	b910      	cbnz	r0, f788 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    f782:	2000      	movs	r0, #0
    f784:	6020      	str	r0, [r4, #0]
    f786:	80a0      	strh	r0, [r4, #4]
    f788:	2000      	movs	r0, #0
    f78a:	bd10      	pop	{r4, pc}

0000f78c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    f78c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f78e:	8800      	ldrh	r0, [r0, #0]
    f790:	4669      	mov	r1, sp
    f792:	f7fe f885 	bl	d8a0 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f796:	b958      	cbnz	r0, f7b0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    f798:	4668      	mov	r0, sp
    f79a:	f000 fa57 	bl	fc4c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x32e>
    f79e:	b138      	cbz	r0, f7b0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    f7a0:	9c01      	ldr	r4, [sp, #4]
    f7a2:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
    f7a6:	f504 70d6 	add.w	r0, r4, #428	; 0x1ac
    f7aa:	3468      	adds	r4, #104	; 0x68
    f7ac:	b929      	cbnz	r1, f7ba <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
    f7ae:	e001      	b.n	f7b4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    f7b0:	2002      	movs	r0, #2
    f7b2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f7b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    f7b8:	b109      	cbz	r1, f7be <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    f7ba:	203a      	movs	r0, #58	; 0x3a
    f7bc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f7be:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
    f7c2:	f04f 0501 	mov.w	r5, #1
    f7c6:	0789      	lsls	r1, r1, #30
    f7c8:	d103      	bne.n	f7d2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
    f7ca:	7005      	strb	r5, [r0, #0]
    f7cc:	4668      	mov	r0, sp
    f7ce:	f7fe fc20 	bl	e012 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    f7d2:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
    f7d6:	2000      	movs	r0, #0
    f7d8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f7da <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    f7da:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f7dc:	460c      	mov	r4, r1
    f7de:	4605      	mov	r5, r0
    f7e0:	8800      	ldrh	r0, [r0, #0]
    f7e2:	4669      	mov	r1, sp
    f7e4:	f7fe f85c 	bl	d8a0 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f7e8:	b108      	cbz	r0, f7ee <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    f7ea:	2002      	movs	r0, #2
    f7ec:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f7ee:	78a8      	ldrb	r0, [r5, #2]
    f7f0:	b130      	cbz	r0, f800 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    f7f2:	f000 fa06 	bl	fc02 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e4>
    f7f6:	70a0      	strb	r0, [r4, #2]
    f7f8:	8828      	ldrh	r0, [r5, #0]
    f7fa:	8020      	strh	r0, [r4, #0]
    f7fc:	2000      	movs	r0, #0
    f7fe:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f800:	9801      	ldr	r0, [sp, #4]
    f802:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    f806:	e7f6      	b.n	f7f6 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000f808 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    f808:	b510      	push	{r4, lr}
    f80a:	f7fb fb83 	bl	af14 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    f80e:	2000      	movs	r0, #0
    f810:	bd10      	pop	{r4, pc}

0000f812 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    f812:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f816:	4604      	mov	r4, r0
    f818:	8840      	ldrh	r0, [r0, #2]
    f81a:	460d      	mov	r5, r1
    f81c:	b1b0      	cbz	r0, f84c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3a>
    f81e:	8820      	ldrh	r0, [r4, #0]
    f820:	4669      	mov	r1, sp
    f822:	f7fe f83d 	bl	d8a0 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f826:	2800      	cmp	r0, #0
    f828:	d10e      	bne.n	f848 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>
    f82a:	8820      	ldrh	r0, [r4, #0]
    f82c:	8028      	strh	r0, [r5, #0]
    f82e:	9e01      	ldr	r6, [sp, #4]
    f830:	1d35      	adds	r5, r6, #4
    f832:	3668      	adds	r6, #104	; 0x68
    f834:	682f      	ldr	r7, [r5, #0]
    f836:	8862      	ldrh	r2, [r4, #2]
    f838:	4639      	mov	r1, r7
    f83a:	4630      	mov	r0, r6
    f83c:	f7fe f970 	bl	db20 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    f840:	6828      	ldr	r0, [r5, #0]
    f842:	42b8      	cmp	r0, r7
    f844:	d1f6      	bne.n	f834 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x22>
    f846:	2000      	movs	r0, #0
    f848:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f84c:	2012      	movs	r0, #18
    f84e:	e7fb      	b.n	f848 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>

0000f850 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    f850:	f7fb b920 	b.w	aa94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000f854 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    f854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f858:	b086      	sub	sp, #24
    f85a:	468a      	mov	sl, r1
    f85c:	4606      	mov	r6, r0
    f85e:	8800      	ldrh	r0, [r0, #0]
    f860:	a901      	add	r1, sp, #4
    f862:	f7fe f81d 	bl	d8a0 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f866:	2800      	cmp	r0, #0
    f868:	d138      	bne.n	f8dc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    f86a:	9802      	ldr	r0, [sp, #8]
    f86c:	f04f 0800 	mov.w	r8, #0
    f870:	4601      	mov	r1, r0
    f872:	4689      	mov	r9, r1
    f874:	f890 11f4 	ldrb.w	r1, [r0, #500]	; 0x1f4
    f878:	f88d 1000 	strb.w	r1, [sp]
    f87c:	9900      	ldr	r1, [sp, #0]
    f87e:	9100      	str	r1, [sp, #0]
    f880:	f89d 5000 	ldrb.w	r5, [sp]
    f884:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    f888:	3068      	adds	r0, #104	; 0x68
    f88a:	2921      	cmp	r1, #33	; 0x21
    f88c:	d100      	bne.n	f890 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    f88e:	b13d      	cbz	r5, f8a0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    f890:	2400      	movs	r4, #0
    f892:	304c      	adds	r0, #76	; 0x4c
    f894:	2108      	movs	r1, #8
    f896:	4607      	mov	r7, r0
    f898:	f7ff fb1e 	bl	eed8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f89c:	b110      	cbz	r0, f8a4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    f89e:	e007      	b.n	f8b0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    f8a0:	2401      	movs	r4, #1
    f8a2:	e7f6      	b.n	f892 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    f8a4:	210b      	movs	r1, #11
    f8a6:	4638      	mov	r0, r7
    f8a8:	f7ff fb16 	bl	eed8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f8ac:	b900      	cbnz	r0, f8b0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    f8ae:	b1a4      	cbz	r4, f8da <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x86>
    f8b0:	a804      	add	r0, sp, #16
    f8b2:	9000      	str	r0, [sp, #0]
    f8b4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f8b8:	ab03      	add	r3, sp, #12
    f8ba:	4632      	mov	r2, r6
    f8bc:	4649      	mov	r1, r9
    f8be:	f000 f980 	bl	fbc2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a4>
    f8c2:	0007      	movs	r7, r0
    f8c4:	d10a      	bne.n	f8dc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    f8c6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f8ca:	9c02      	ldr	r4, [sp, #8]
    f8cc:	b148      	cbz	r0, f8e2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    f8ce:	f504 74d3 	add.w	r4, r4, #422	; 0x1a6
    f8d2:	2001      	movs	r0, #1
    f8d4:	7060      	strb	r0, [r4, #1]
    f8d6:	b94d      	cbnz	r5, f8ec <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
    f8d8:	e006      	b.n	f8e8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
    f8da:	201a      	movs	r0, #26
    f8dc:	b006      	add	sp, #24
    f8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f8e2:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    f8e6:	e7f4      	b.n	f8d2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7e>
    f8e8:	7820      	ldrb	r0, [r4, #0]
    f8ea:	b108      	cbz	r0, f8f0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
    f8ec:	273a      	movs	r7, #58	; 0x3a
    f8ee:	e012      	b.n	f916 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
    f8f0:	f884 a000 	strb.w	sl, [r4]
    f8f4:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f8f8:	70a0      	strb	r0, [r4, #2]
    f8fa:	f89d 1010 	ldrb.w	r1, [sp, #16]
    f8fe:	70e1      	strb	r1, [r4, #3]
    f900:	f88d 0000 	strb.w	r0, [sp]
    f904:	f88d 1001 	strb.w	r1, [sp, #1]
    f908:	88b0      	ldrh	r0, [r6, #4]
    f90a:	f8ad 0002 	strh.w	r0, [sp, #2]
    f90e:	4669      	mov	r1, sp
    f910:	4648      	mov	r0, r9
    f912:	f7fe f884 	bl	da1e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    f916:	f884 8001 	strb.w	r8, [r4, #1]
    f91a:	4638      	mov	r0, r7
    f91c:	e7de      	b.n	f8dc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>

0000f91e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    f91e:	b510      	push	{r4, lr}
    f920:	2008      	movs	r0, #8
    f922:	f7fb fb7f 	bl	b024 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    f926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f92a:	f7f9 b923 	b.w	8b74 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    f92e:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f932:	4288      	cmp	r0, r1
    f934:	d303      	bcc.n	f93e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
    f936:	f640 0148 	movw	r1, #2120	; 0x848
    f93a:	4288      	cmp	r0, r1
    f93c:	d300      	bcc.n	f940 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
    f93e:	4608      	mov	r0, r1
    f940:	4770      	bx	lr
    f942:	07c1      	lsls	r1, r0, #31
    f944:	d001      	beq.n	f94a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
    f946:	2001      	movs	r0, #1
    f948:	4770      	bx	lr
    f94a:	0780      	lsls	r0, r0, #30
    f94c:	d501      	bpl.n	f952 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
    f94e:	2002      	movs	r0, #2
    f950:	4770      	bx	lr
    f952:	2000      	movs	r0, #0
    f954:	4770      	bx	lr
    f956:	b510      	push	{r4, lr}
    f958:	2801      	cmp	r0, #1
    f95a:	d006      	beq.n	f96a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    f95c:	2802      	cmp	r0, #2
    f95e:	d004      	beq.n	f96a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    f960:	f240 2173 	movw	r1, #627	; 0x273
    f964:	2006      	movs	r0, #6
    f966:	f7f5 f843 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f96a:	bd10      	pop	{r4, pc}
    f96c:	b50e      	push	{r1, r2, r3, lr}
    f96e:	4669      	mov	r1, sp
    f970:	2001      	movs	r0, #1
    f972:	f7fd fe66 	bl	d642 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f976:	b150      	cbz	r0, f98e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    f978:	f240 1131 	movw	r1, #305	; 0x131
    f97c:	2039      	movs	r0, #57	; 0x39
    f97e:	f7f5 f837 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f982:	9802      	ldr	r0, [sp, #8]
    f984:	f7fe ffa1 	bl	e8ca <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f988:	b108      	cbz	r0, f98e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    f98a:	2001      	movs	r0, #1
    f98c:	bd0e      	pop	{r1, r2, r3, pc}
    f98e:	4668      	mov	r0, sp
    f990:	f7f5 fa80 	bl	4e94 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f994:	2800      	cmp	r0, #0
    f996:	d0f4      	beq.n	f982 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
    f998:	2000      	movs	r0, #0
    f99a:	bd0e      	pop	{r1, r2, r3, pc}
    f99c:	b510      	push	{r4, lr}
    f99e:	f7ff ffe5 	bl	f96c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    f9a2:	b158      	cbz	r0, f9bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    f9a4:	f000 f969 	bl	fc7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    f9a8:	4604      	mov	r4, r0
    f9aa:	f7fe fd83 	bl	e4b4 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f9ae:	b918      	cbnz	r0, f9b8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
    f9b0:	4620      	mov	r0, r4
    f9b2:	f7fe fd75 	bl	e4a0 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f9b6:	b108      	cbz	r0, f9bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    f9b8:	2000      	movs	r0, #0
    f9ba:	bd10      	pop	{r4, pc}
    f9bc:	2001      	movs	r0, #1
    f9be:	bd10      	pop	{r4, pc}
    f9c0:	b570      	push	{r4, r5, r6, lr}
    f9c2:	460d      	mov	r5, r1
    f9c4:	4614      	mov	r4, r2
    f9c6:	4601      	mov	r1, r0
    f9c8:	8890      	ldrh	r0, [r2, #4]
    f9ca:	88e3      	ldrh	r3, [r4, #6]
    f9cc:	1942      	adds	r2, r0, r5
    f9ce:	429a      	cmp	r2, r3
    f9d0:	d901      	bls.n	f9d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb8>
    f9d2:	2007      	movs	r0, #7
    f9d4:	bd70      	pop	{r4, r5, r6, pc}
    f9d6:	6822      	ldr	r2, [r4, #0]
    f9d8:	4410      	add	r0, r2
    f9da:	462a      	mov	r2, r5
    f9dc:	f7fc fe2f 	bl	c63e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f9e0:	88a0      	ldrh	r0, [r4, #4]
    f9e2:	4428      	add	r0, r5
    f9e4:	80a0      	strh	r0, [r4, #4]
    f9e6:	2000      	movs	r0, #0
    f9e8:	bd70      	pop	{r4, r5, r6, pc}
    f9ea:	b570      	push	{r4, r5, r6, lr}
    f9ec:	460c      	mov	r4, r1
    f9ee:	4605      	mov	r5, r0
    f9f0:	b112      	cbz	r2, f9f8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xda>
    f9f2:	291f      	cmp	r1, #31
    f9f4:	d807      	bhi.n	fa06 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe8>
    f9f6:	e011      	b.n	fa1c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xfe>
    f9f8:	2cff      	cmp	r4, #255	; 0xff
    f9fa:	d804      	bhi.n	fa06 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe8>
    f9fc:	f7fe fd58 	bl	e4b0 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fa00:	b118      	cbz	r0, fa0a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xec>
    fa02:	2c1f      	cmp	r4, #31
    fa04:	d901      	bls.n	fa0a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xec>
    fa06:	2012      	movs	r0, #18
    fa08:	bd70      	pop	{r4, r5, r6, pc}
    fa0a:	4628      	mov	r0, r5
    fa0c:	f7fe fd59 	bl	e4c2 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    fa10:	b130      	cbz	r0, fa20 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x102>
    fa12:	4621      	mov	r1, r4
    fa14:	4628      	mov	r0, r5
    fa16:	f7fe fd1c 	bl	e452 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    fa1a:	b118      	cbz	r0, fa24 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x106>
    fa1c:	2000      	movs	r0, #0
    fa1e:	bd70      	pop	{r4, r5, r6, pc}
    fa20:	2042      	movs	r0, #66	; 0x42
    fa22:	bd70      	pop	{r4, r5, r6, pc}
    fa24:	2045      	movs	r0, #69	; 0x45
    fa26:	bd70      	pop	{r4, r5, r6, pc}
    fa28:	b510      	push	{r4, lr}
    fa2a:	4604      	mov	r4, r0
    fa2c:	7840      	ldrb	r0, [r0, #1]
    fa2e:	06c1      	lsls	r1, r0, #27
    fa30:	d512      	bpl.n	fa58 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13a>
    fa32:	07c0      	lsls	r0, r0, #31
    fa34:	d00b      	beq.n	fa4e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x130>
    fa36:	f7fb faab 	bl	af90 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    fa3a:	b168      	cbz	r0, fa58 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13a>
    fa3c:	7860      	ldrb	r0, [r4, #1]
    fa3e:	06c1      	lsls	r1, r0, #27
    fa40:	d405      	bmi.n	fa4e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x130>
    fa42:	0700      	lsls	r0, r0, #28
    fa44:	d503      	bpl.n	fa4e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x130>
    fa46:	7d20      	ldrb	r0, [r4, #20]
    fa48:	2802      	cmp	r0, #2
    fa4a:	d105      	bne.n	fa58 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13a>
    fa4c:	e006      	b.n	fa5c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13e>
    fa4e:	7d20      	ldrb	r0, [r4, #20]
    fa50:	2802      	cmp	r0, #2
    fa52:	d003      	beq.n	fa5c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13e>
    fa54:	7ea0      	ldrb	r0, [r4, #26]
    fa56:	b108      	cbz	r0, fa5c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13e>
    fa58:	2011      	movs	r0, #17
    fa5a:	bd10      	pop	{r4, pc}
    fa5c:	2000      	movs	r0, #0
    fa5e:	bd10      	pop	{r4, pc}
    fa60:	b538      	push	{r3, r4, r5, lr}
    fa62:	4604      	mov	r4, r0
    fa64:	7800      	ldrb	r0, [r0, #0]
    fa66:	28ef      	cmp	r0, #239	; 0xef
    fa68:	d847      	bhi.n	fafa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    fa6a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    fa6e:	f8ad 0000 	strh.w	r0, [sp]
    fa72:	9800      	ldr	r0, [sp, #0]
    fa74:	f000 f956 	bl	fd24 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x406>
    fa78:	b3c0      	cbz	r0, faec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ce>
    fa7a:	7861      	ldrb	r1, [r4, #1]
    fa7c:	0708      	lsls	r0, r1, #28
    fa7e:	d40f      	bmi.n	faa0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x182>
    fa80:	f8d4 2002 	ldr.w	r2, [r4, #2]
    fa84:	f8d4 0005 	ldr.w	r0, [r4, #5]
    fa88:	0a13      	lsrs	r3, r2, #8
    fa8a:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
    fa8e:	d834      	bhi.n	fafa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    fa90:	2320      	movs	r3, #32
    fa92:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
    fa96:	d830      	bhi.n	fafa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    fa98:	025a      	lsls	r2, r3, #9
    fa9a:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    fa9e:	d32c      	bcc.n	fafa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    faa0:	7a60      	ldrb	r0, [r4, #9]
    faa2:	b318      	cbz	r0, faec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ce>
    faa4:	2807      	cmp	r0, #7
    faa6:	d828      	bhi.n	fafa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    faa8:	7aa0      	ldrb	r0, [r4, #10]
    faaa:	b128      	cbz	r0, fab8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    faac:	2801      	cmp	r0, #1
    faae:	d003      	beq.n	fab8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    fab0:	2802      	cmp	r0, #2
    fab2:	d001      	beq.n	fab8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    fab4:	2803      	cmp	r0, #3
    fab6:	d120      	bne.n	fafa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    fab8:	074a      	lsls	r2, r1, #29
    faba:	d403      	bmi.n	fac4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1a6>
    fabc:	2802      	cmp	r0, #2
    fabe:	d001      	beq.n	fac4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1a6>
    fac0:	2803      	cmp	r0, #3
    fac2:	d105      	bne.n	fad0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1b2>
    fac4:	7ae0      	ldrb	r0, [r4, #11]
    fac6:	b108      	cbz	r0, facc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    fac8:	2801      	cmp	r0, #1
    faca:	d116      	bne.n	fafa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    facc:	0748      	lsls	r0, r1, #29
    face:	d407      	bmi.n	fae0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c2>
    fad0:	7ca0      	ldrb	r0, [r4, #18]
    fad2:	b128      	cbz	r0, fae0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c2>
    fad4:	2801      	cmp	r0, #1
    fad6:	d003      	beq.n	fae0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c2>
    fad8:	2802      	cmp	r0, #2
    fada:	d001      	beq.n	fae0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c2>
    fadc:	2803      	cmp	r0, #3
    fade:	d10c      	bne.n	fafa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    fae0:	06c8      	lsls	r0, r1, #27
    fae2:	7d20      	ldrb	r0, [r4, #20]
    fae4:	d503      	bpl.n	faee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    fae6:	2801      	cmp	r0, #1
    fae8:	d107      	bne.n	fafa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    faea:	e002      	b.n	faf2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d4>
    faec:	e005      	b.n	fafa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    faee:	2802      	cmp	r0, #2
    faf0:	d003      	beq.n	fafa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    faf2:	7e20      	ldrb	r0, [r4, #24]
    faf4:	b118      	cbz	r0, fafe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e0>
    faf6:	2801      	cmp	r0, #1
    faf8:	d001      	beq.n	fafe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e0>
    fafa:	2012      	movs	r0, #18
    fafc:	bd38      	pop	{r3, r4, r5, pc}
    fafe:	2000      	movs	r0, #0
    fb00:	bd38      	pop	{r3, r4, r5, pc}
    fb02:	b510      	push	{r4, lr}
    fb04:	0004      	movs	r4, r0
    fb06:	d005      	beq.n	fb14 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    fb08:	f7fb fa9c 	bl	b044 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fb0c:	4384      	bics	r4, r0
    fb0e:	d001      	beq.n	fb14 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    fb10:	2000      	movs	r0, #0
    fb12:	bd10      	pop	{r4, pc}
    fb14:	2001      	movs	r0, #1
    fb16:	bd10      	pop	{r4, pc}
    fb18:	28fb      	cmp	r0, #251	; 0xfb
    fb1a:	d803      	bhi.n	fb24 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x206>
    fb1c:	f640 0048 	movw	r0, #2120	; 0x848
    fb20:	4281      	cmp	r1, r0
    fb22:	d901      	bls.n	fb28 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20a>
    fb24:	2011      	movs	r0, #17
    fb26:	4770      	bx	lr
    fb28:	2000      	movs	r0, #0
    fb2a:	4770      	bx	lr
    fb2c:	381b      	subs	r0, #27
    fb2e:	28e1      	cmp	r0, #225	; 0xe1
    fb30:	d206      	bcs.n	fb40 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x222>
    fb32:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    fb36:	d303      	bcc.n	fb40 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x222>
    fb38:	f244 2090 	movw	r0, #17040	; 0x4290
    fb3c:	4281      	cmp	r1, r0
    fb3e:	d901      	bls.n	fb44 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x226>
    fb40:	2012      	movs	r0, #18
    fb42:	4770      	bx	lr
    fb44:	2000      	movs	r0, #0
    fb46:	4770      	bx	lr
    fb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fb4c:	4606      	mov	r6, r0
    fb4e:	f8b0 704a 	ldrh.w	r7, [r0, #74]	; 0x4a
    fb52:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
    fb56:	4615      	mov	r5, r2
    fb58:	3024      	adds	r0, #36	; 0x24
    fb5a:	f7f8 f95f 	bl	7e1c <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>
    fb5e:	4680      	mov	r8, r0
    fb60:	2102      	movs	r1, #2
    fb62:	f7fd ff2d 	bl	d9c0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    fb66:	4287      	cmp	r7, r0
    fb68:	d200      	bcs.n	fb6c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24e>
    fb6a:	4638      	mov	r0, r7
    fb6c:	4607      	mov	r7, r0
    fb6e:	2102      	movs	r1, #2
    fb70:	4640      	mov	r0, r8
    fb72:	f7fd ff25 	bl	d9c0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    fb76:	4284      	cmp	r4, r0
    fb78:	d200      	bcs.n	fb7c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x25e>
    fb7a:	4620      	mov	r0, r4
    fb7c:	8831      	ldrh	r1, [r6, #0]
    fb7e:	8029      	strh	r1, [r5, #0]
    fb80:	2f1b      	cmp	r7, #27
    fb82:	d913      	bls.n	fbac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x28e>
    fb84:	2ffb      	cmp	r7, #251	; 0xfb
    fb86:	d300      	bcc.n	fb8a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x26c>
    fb88:	27fb      	movs	r7, #251	; 0xfb
    fb8a:	806f      	strh	r7, [r5, #2]
    fb8c:	281b      	cmp	r0, #27
    fb8e:	d90f      	bls.n	fbb0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x292>
    fb90:	28fb      	cmp	r0, #251	; 0xfb
    fb92:	d300      	bcc.n	fb96 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x278>
    fb94:	20fb      	movs	r0, #251	; 0xfb
    fb96:	80e8      	strh	r0, [r5, #6]
    fb98:	4640      	mov	r0, r8
    fb9a:	f7ff fec8 	bl	f92e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    fb9e:	80a8      	strh	r0, [r5, #4]
    fba0:	4640      	mov	r0, r8
    fba2:	f7ff fec4 	bl	f92e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    fba6:	8128      	strh	r0, [r5, #8]
    fba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fbac:	271b      	movs	r7, #27
    fbae:	e7ec      	b.n	fb8a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x26c>
    fbb0:	201b      	movs	r0, #27
    fbb2:	e7f0      	b.n	fb96 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x278>
    fbb4:	b510      	push	{r4, lr}
    fbb6:	f7ff fed9 	bl	f96c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    fbba:	2800      	cmp	r0, #0
    fbbc:	d000      	beq.n	fbc0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a2>
    fbbe:	2001      	movs	r0, #1
    fbc0:	bd10      	pop	{r4, pc}
    fbc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fbc6:	7890      	ldrb	r0, [r2, #2]
    fbc8:	9e06      	ldr	r6, [sp, #24]
    fbca:	461d      	mov	r5, r3
    fbcc:	4614      	mov	r4, r2
    fbce:	b908      	cbnz	r0, fbd4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b6>
    fbd0:	f7fb fa38 	bl	b044 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fbd4:	78e4      	ldrb	r4, [r4, #3]
    fbd6:	4607      	mov	r7, r0
    fbd8:	b914      	cbnz	r4, fbe0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
    fbda:	f7fb fa33 	bl	b044 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fbde:	4604      	mov	r4, r0
    fbe0:	b16f      	cbz	r7, fbfe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    fbe2:	b164      	cbz	r4, fbfe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    fbe4:	4638      	mov	r0, r7
    fbe6:	f7ff feac 	bl	f942 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    fbea:	4620      	mov	r0, r4
    fbec:	f7ff fea9 	bl	f942 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    fbf0:	b12f      	cbz	r7, fbfe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    fbf2:	b124      	cbz	r4, fbfe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    fbf4:	702f      	strb	r7, [r5, #0]
    fbf6:	7034      	strb	r4, [r6, #0]
    fbf8:	2000      	movs	r0, #0
    fbfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fbfe:	2009      	movs	r0, #9
    fc00:	e7fb      	b.n	fbfa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2dc>
    fc02:	b510      	push	{r4, lr}
    fc04:	f7fc fcbf 	bl	c586 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    fc08:	b928      	cbnz	r0, fc16 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f8>
    fc0a:	f7fc fcf2 	bl	c5f2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    fc0e:	b910      	cbnz	r0, fc16 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f8>
    fc10:	f7fc fcf9 	bl	c606 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    fc14:	b108      	cbz	r0, fc1a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2fc>
    fc16:	2008      	movs	r0, #8
    fc18:	bd10      	pop	{r4, pc}
    fc1a:	f7fc fc89 	bl	c530 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    fc1e:	b940      	cbnz	r0, fc32 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x314>
    fc20:	f7fc fc90 	bl	c544 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    fc24:	b928      	cbnz	r0, fc32 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x314>
    fc26:	f7fc fca4 	bl	c572 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    fc2a:	b910      	cbnz	r0, fc32 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x314>
    fc2c:	f7fc fcb5 	bl	c59a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    fc30:	b108      	cbz	r0, fc36 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x318>
    fc32:	2004      	movs	r0, #4
    fc34:	bd10      	pop	{r4, pc}
    fc36:	f240 5197 	movw	r1, #1431	; 0x597
    fc3a:	2039      	movs	r0, #57	; 0x39
    fc3c:	f7f4 fed8 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc40:	b510      	push	{r4, lr}
    fc42:	f7fb f9f9 	bl	b038 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    fc46:	f3c0 1040 	ubfx	r0, r0, #5, #1
    fc4a:	bd10      	pop	{r4, pc}
    fc4c:	6840      	ldr	r0, [r0, #4]
    fc4e:	f000 b800 	b.w	fc52 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    fc52:	b508      	push	{r3, lr}
    fc54:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    fc58:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    fc5c:	f88d 0000 	strb.w	r0, [sp]
    fc60:	9800      	ldr	r0, [sp, #0]
    fc62:	9000      	str	r0, [sp, #0]
    fc64:	f89d 0000 	ldrb.w	r0, [sp]
    fc68:	1e40      	subs	r0, r0, #1
    fc6a:	4208      	tst	r0, r1
    fc6c:	d003      	beq.n	fc76 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x358>
    fc6e:	2904      	cmp	r1, #4
    fc70:	d001      	beq.n	fc76 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x358>
    fc72:	2001      	movs	r0, #1
    fc74:	bd08      	pop	{r3, pc}
    fc76:	2000      	movs	r0, #0
    fc78:	bd08      	pop	{r3, pc}
    fc7a:	b510      	push	{r4, lr}
    fc7c:	2101      	movs	r1, #1
    fc7e:	2000      	movs	r0, #0
    fc80:	f7fd fcd5 	bl	d62e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fc84:	0004      	movs	r4, r0
    fc86:	d109      	bne.n	fc9c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x37e>
    fc88:	2200      	movs	r2, #0
    fc8a:	2101      	movs	r1, #1
    fc8c:	4610      	mov	r0, r2
    fc8e:	f7fd fcb2 	bl	d5f6 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    fc92:	0004      	movs	r4, r0
    fc94:	d004      	beq.n	fca0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x382>
    fc96:	2100      	movs	r1, #0
    fc98:	f7fe fbb0 	bl	e3fc <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    fc9c:	4620      	mov	r0, r4
    fc9e:	bd10      	pop	{r4, pc}
    fca0:	f240 2126 	movw	r1, #550	; 0x226
    fca4:	2039      	movs	r0, #57	; 0x39
    fca6:	f7f4 fea3 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fcaa:	b570      	push	{r4, r5, r6, lr}
    fcac:	4605      	mov	r5, r0
    fcae:	f7fe fc08 	bl	e4c2 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    fcb2:	b170      	cbz	r0, fcd2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b4>
    fcb4:	4628      	mov	r0, r5
    fcb6:	f7fe fe08 	bl	e8ca <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    fcba:	2800      	cmp	r0, #0
    fcbc:	d008      	beq.n	fcd0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b2>
    fcbe:	4628      	mov	r0, r5
    fcc0:	f7fe fe00 	bl	e8c4 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>
    fcc4:	4604      	mov	r4, r0
    fcc6:	4628      	mov	r0, r5
    fcc8:	f7fe fdd6 	bl	e878 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    fccc:	b118      	cbz	r0, fcd6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b8>
    fcce:	200c      	movs	r0, #12
    fcd0:	bd70      	pop	{r4, r5, r6, pc}
    fcd2:	2042      	movs	r0, #66	; 0x42
    fcd4:	bd70      	pop	{r4, r5, r6, pc}
    fcd6:	b164      	cbz	r4, fcf2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d4>
    fcd8:	8820      	ldrh	r0, [r4, #0]
    fcda:	f7fd fd21 	bl	d720 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    fcde:	8820      	ldrh	r0, [r4, #0]
    fce0:	2100      	movs	r1, #0
    fce2:	f7f5 f927 	bl	4f34 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    fce6:	b120      	cbz	r0, fcf2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d4>
    fce8:	f241 417a 	movw	r1, #5242	; 0x147a
    fcec:	2039      	movs	r0, #57	; 0x39
    fcee:	f7f4 fe7f 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fcf2:	2000      	movs	r0, #0
    fcf4:	bd70      	pop	{r4, r5, r6, pc}
    fcf6:	b530      	push	{r4, r5, lr}
    fcf8:	f340 0400 	sbfx	r4, r0, #0, #1
    fcfc:	f340 0040 	sbfx	r0, r0, #1, #1
    fd00:	1c40      	adds	r0, r0, #1
    fd02:	9d03      	ldr	r5, [sp, #12]
    fd04:	1c64      	adds	r4, r4, #1
    fd06:	d000      	beq.n	fd0a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ec>
    fd08:	b119      	cbz	r1, fd12 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f4>
    fd0a:	b100      	cbz	r0, fd0e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f0>
    fd0c:	b10a      	cbz	r2, fd12 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f4>
    fd0e:	b91c      	cbnz	r4, fd18 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3fa>
    fd10:	e001      	b.n	fd16 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f8>
    fd12:	2011      	movs	r0, #17
    fd14:	bd30      	pop	{r4, r5, pc}
    fd16:	2100      	movs	r1, #0
    fd18:	7019      	strb	r1, [r3, #0]
    fd1a:	b900      	cbnz	r0, fd1e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x400>
    fd1c:	2200      	movs	r2, #0
    fd1e:	702a      	strb	r2, [r5, #0]
    fd20:	2000      	movs	r0, #0
    fd22:	bd30      	pop	{r4, r5, pc}
    fd24:	b2c0      	uxtb	r0, r0
    fd26:	06c1      	lsls	r1, r0, #27
    fd28:	d40c      	bmi.n	fd44 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x426>
    fd2a:	0681      	lsls	r1, r0, #26
    fd2c:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    fd30:	d503      	bpl.n	fd3a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x41c>
    fd32:	b9d1      	cbnz	r1, fd6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    fd34:	0781      	lsls	r1, r0, #30
    fd36:	d418      	bmi.n	fd6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    fd38:	e001      	b.n	fd3e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x420>
    fd3a:	2900      	cmp	r1, #0
    fd3c:	d1fa      	bne.n	fd34 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x416>
    fd3e:	0700      	lsls	r0, r0, #28
    fd40:	d413      	bmi.n	fd6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    fd42:	e010      	b.n	fd66 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x448>
    fd44:	0641      	lsls	r1, r0, #25
    fd46:	d410      	bmi.n	fd6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    fd48:	0681      	lsls	r1, r0, #26
    fd4a:	d40e      	bmi.n	fd6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    fd4c:	07c1      	lsls	r1, r0, #31
    fd4e:	ea4f 7180 	mov.w	r1, r0, lsl #30
    fd52:	d004      	beq.n	fd5e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x440>
    fd54:	2900      	cmp	r1, #0
    fd56:	db02      	blt.n	fd5e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x440>
    fd58:	0740      	lsls	r0, r0, #29
    fd5a:	d404      	bmi.n	fd66 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x448>
    fd5c:	e005      	b.n	fd6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    fd5e:	0701      	lsls	r1, r0, #28
    fd60:	d403      	bmi.n	fd6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    fd62:	0740      	lsls	r0, r0, #29
    fd64:	d401      	bmi.n	fd6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    fd66:	2001      	movs	r0, #1
    fd68:	4770      	bx	lr
    fd6a:	2000      	movs	r0, #0
    fd6c:	4770      	bx	lr
    fd6e:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fd70:	4669      	mov	r1, sp
    fd72:	2001      	movs	r0, #1
    fd74:	f7fd fc65 	bl	d642 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    fd78:	b178      	cbz	r0, fd9a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x47c>
    fd7a:	f240 114f 	movw	r1, #335	; 0x14f
    fd7e:	2039      	movs	r0, #57	; 0x39
    fd80:	f7f4 fe36 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fd84:	9c02      	ldr	r4, [sp, #8]
    fd86:	4620      	mov	r0, r4
    fd88:	f7fe fd9f 	bl	e8ca <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    fd8c:	b128      	cbz	r0, fd9a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x47c>
    fd8e:	4620      	mov	r0, r4
    fd90:	f7fe fbff 	bl	e592 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    fd94:	b108      	cbz	r0, fd9a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x47c>
    fd96:	2001      	movs	r0, #1
    fd98:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fd9a:	4668      	mov	r0, sp
    fd9c:	f7f5 f87a 	bl	4e94 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    fda0:	2800      	cmp	r0, #0
    fda2:	d0ef      	beq.n	fd84 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
    fda4:	2000      	movs	r0, #0
    fda6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fda8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    fda8:	6802      	ldr	r2, [r0, #0]
    fdaa:	b912      	cbnz	r2, fdb2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    fdac:	6001      	str	r1, [r0, #0]
    fdae:	4770      	bx	lr
    fdb0:	4602      	mov	r2, r0
    fdb2:	6850      	ldr	r0, [r2, #4]
    fdb4:	b108      	cbz	r0, fdba <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    fdb6:	428a      	cmp	r2, r1
    fdb8:	d1fa      	bne.n	fdb0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    fdba:	428a      	cmp	r2, r1
    fdbc:	d0f7      	beq.n	fdae <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    fdbe:	6051      	str	r1, [r2, #4]
    fdc0:	4770      	bx	lr
    fdc2:	b510      	push	{r4, lr}
    fdc4:	f7fe fd84 	bl	e8d0 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    fdc8:	b108      	cbz	r0, fdce <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    fdca:	21d8      	movs	r1, #216	; 0xd8
    fdcc:	e003      	b.n	fdd6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x2e>
    fdce:	f7f7 f9db 	bl	7188 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    fdd2:	b118      	cbz	r0, fddc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x34>
    fdd4:	21dd      	movs	r1, #221	; 0xdd
    fdd6:	2001      	movs	r0, #1
    fdd8:	f7f4 fe0a 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fde0:	2001      	movs	r0, #1
    fde2:	f7f4 bfef 	b.w	4dc4 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    fde6:	b510      	push	{r4, lr}
    fde8:	4604      	mov	r4, r0
    fdea:	e002      	b.n	fdf2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4a>
    fdec:	6820      	ldr	r0, [r4, #0]
    fdee:	4780      	blx	r0
    fdf0:	6864      	ldr	r4, [r4, #4]
    fdf2:	2c00      	cmp	r4, #0
    fdf4:	d1fa      	bne.n	fdec <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x44>
    fdf6:	bd10      	pop	{r4, pc}
    fdf8:	b510      	push	{r4, lr}
    fdfa:	2000      	movs	r0, #0
    fdfc:	f7f4 ffe2 	bl	4dc4 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    fe00:	f7f5 fa16 	bl	5230 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    fe04:	f7f5 fc98 	bl	5738 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    fe08:	f7f5 fe76 	bl	5af8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    fe0c:	2800      	cmp	r0, #0
    fe0e:	d003      	beq.n	fe18 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x70>
    fe10:	21b5      	movs	r1, #181	; 0xb5
    fe12:	2001      	movs	r0, #1
    fe14:	f7f4 fdec 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe18:	bd10      	pop	{r4, pc}
    fe1a:	b510      	push	{r4, lr}
    fe1c:	f7ff ffd1 	bl	fdc2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    fe20:	f7ff f81a 	bl	ee58 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
    fe24:	2800      	cmp	r0, #0
    fe26:	d003      	beq.n	fe30 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x88>
    fe28:	21f6      	movs	r1, #246	; 0xf6
    fe2a:	2001      	movs	r0, #1
    fe2c:	f7f4 fde0 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe30:	bd10      	pop	{r4, pc}

0000fe32 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    fe32:	b510      	push	{r4, lr}
    fe34:	f7fb fc82 	bl	b73c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    fe38:	f000 f850 	bl	fedc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    fe3c:	f7fb f956 	bl	b0ec <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    fe40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fe44:	f7fb ba4c 	b.w	b2e0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000fe48 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    fe48:	b510      	push	{r4, lr}
    fe4a:	24c8      	movs	r4, #200	; 0xc8
    fe4c:	1e64      	subs	r4, r4, #1
    fe4e:	b2e4      	uxtb	r4, r4
    fe50:	f7fb f96a 	bl	b128 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    fe54:	2802      	cmp	r0, #2
    fe56:	d003      	beq.n	fe60 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    fe58:	2801      	cmp	r0, #1
    fe5a:	d000      	beq.n	fe5e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    fe5c:	2000      	movs	r0, #0
    fe5e:	bd10      	pop	{r4, pc}
    fe60:	2c00      	cmp	r4, #0
    fe62:	d1f3      	bne.n	fe4c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    fe64:	218f      	movs	r1, #143	; 0x8f
    fe66:	203b      	movs	r0, #59	; 0x3b
    fe68:	f7f4 fdc2 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fe6c <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    fe6c:	b510      	push	{r4, lr}
    fe6e:	f7f4 fc9f 	bl	47b0 <mpsl_fem_lna_configuration_clear>
    fe72:	2800      	cmp	r0, #0
    fe74:	d005      	beq.n	fe82 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    fe76:	1c40      	adds	r0, r0, #1
    fe78:	d003      	beq.n	fe82 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    fe7a:	2150      	movs	r1, #80	; 0x50
    fe7c:	2040      	movs	r0, #64	; 0x40
    fe7e:	f7f4 fdb7 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe82:	bd10      	pop	{r4, pc}

0000fe84 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    fe84:	b510      	push	{r4, lr}
    fe86:	f7f4 fc9f 	bl	47c8 <mpsl_fem_pa_configuration_clear>
    fe8a:	2800      	cmp	r0, #0
    fe8c:	d005      	beq.n	fe9a <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    fe8e:	1c40      	adds	r0, r0, #1
    fe90:	d003      	beq.n	fe9a <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    fe92:	2149      	movs	r1, #73	; 0x49
    fe94:	2040      	movs	r0, #64	; 0x40
    fe96:	f7f4 fdab 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe9a:	bd10      	pop	{r4, pc}

0000fe9c <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
    fe9c:	b510      	push	{r4, lr}
    fe9e:	f7f4 fc81 	bl	47a4 <mpsl_fem_disable>
    fea2:	2800      	cmp	r0, #0
    fea4:	d005      	beq.n	feb2 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    fea6:	1c40      	adds	r0, r0, #1
    fea8:	d003      	beq.n	feb2 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    feaa:	2157      	movs	r1, #87	; 0x57
    feac:	2040      	movs	r0, #64	; 0x40
    feae:	f7f4 fd9f 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    feb2:	bd10      	pop	{r4, pc}

0000feb4 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    feb4:	b510      	push	{r4, lr}
    feb6:	2100      	movs	r1, #0
    feb8:	4608      	mov	r0, r1
    feba:	f7f4 fc7f 	bl	47bc <mpsl_fem_lna_configuration_set>
    febe:	b108      	cbz	r0, fec4 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    fec0:	2000      	movs	r0, #0
    fec2:	bd10      	pop	{r4, pc}
    fec4:	2001      	movs	r0, #1
    fec6:	bd10      	pop	{r4, pc}

0000fec8 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    fec8:	b508      	push	{r3, lr}
    feca:	4668      	mov	r0, sp
    fecc:	f7f4 fc88 	bl	47e0 <mpsl_fem_pa_is_configured>
    fed0:	f89d 0000 	ldrb.w	r0, [sp]
    fed4:	2800      	cmp	r0, #0
    fed6:	d000      	beq.n	feda <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    fed8:	2001      	movs	r0, #1
    feda:	bd08      	pop	{r3, pc}

0000fedc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    fedc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    fee0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    fee4:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    fee8:	f3bf 8f4f 	dsb	sy
    feec:	f3bf 8f6f 	isb	sy
    fef0:	f7fb ba78 	b.w	b3e4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    fef4:	2800      	cmp	r0, #0
    fef6:	db09      	blt.n	ff0c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    fef8:	f000 021f 	and.w	r2, r0, #31
    fefc:	2101      	movs	r1, #1
    fefe:	4091      	lsls	r1, r2
    ff00:	0940      	lsrs	r0, r0, #5
    ff02:	0080      	lsls	r0, r0, #2
    ff04:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ff08:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ff0c:	4770      	bx	lr
    ff0e:	2800      	cmp	r0, #0
    ff10:	db0d      	blt.n	ff2e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    ff12:	f000 021f 	and.w	r2, r0, #31
    ff16:	2101      	movs	r1, #1
    ff18:	4091      	lsls	r1, r2
    ff1a:	0940      	lsrs	r0, r0, #5
    ff1c:	0080      	lsls	r0, r0, #2
    ff1e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ff22:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    ff26:	f3bf 8f4f 	dsb	sy
    ff2a:	f3bf 8f6f 	isb	sy
    ff2e:	4770      	bx	lr

0000ff30 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    ff30:	b510      	push	{r4, lr}
    ff32:	2801      	cmp	r0, #1
    ff34:	d006      	beq.n	ff44 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    ff36:	2802      	cmp	r0, #2
    ff38:	d006      	beq.n	ff48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    ff3a:	f640 31c5 	movw	r1, #3013	; 0xbc5
    ff3e:	203e      	movs	r0, #62	; 0x3e
    ff40:	f7f4 fd56 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff44:	2028      	movs	r0, #40	; 0x28
    ff46:	bd10      	pop	{r4, pc}
    ff48:	2018      	movs	r0, #24
    ff4a:	bd10      	pop	{r4, pc}

0000ff4c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    ff4c:	b510      	push	{r4, lr}
    ff4e:	2801      	cmp	r0, #1
    ff50:	d006      	beq.n	ff60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    ff52:	2802      	cmp	r0, #2
    ff54:	d007      	beq.n	ff66 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    ff56:	f640 31d9 	movw	r1, #3033	; 0xbd9
    ff5a:	203e      	movs	r0, #62	; 0x3e
    ff5c:	f7f4 fd48 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff60:	f641 6014 	movw	r0, #7700	; 0x1e14
    ff64:	bd10      	pop	{r4, pc}
    ff66:	f241 1030 	movw	r0, #4400	; 0x1130
    ff6a:	bd10      	pop	{r4, pc}

0000ff6c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    ff6c:	f7fc b986 	b.w	c27c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e8>
    ff70:	b510      	push	{r4, lr}
    ff72:	460a      	mov	r2, r1
    ff74:	b130      	cbz	r0, ff84 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    ff76:	2801      	cmp	r0, #1
    ff78:	d00b      	beq.n	ff92 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    ff7a:	f240 614f 	movw	r1, #1615	; 0x64f
    ff7e:	203e      	movs	r0, #62	; 0x3e
    ff80:	f7f4 fd36 	bl	49f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff88:	f102 0128 	add.w	r1, r2, #40	; 0x28
    ff8c:	4610      	mov	r0, r2
    ff8e:	f7fb b91f 	b.w	b1d0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    ff92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff96:	f102 0129 	add.w	r1, r2, #41	; 0x29
    ff9a:	4610      	mov	r0, r2
    ff9c:	f7fb b902 	b.w	b1a4 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>

0000ffa0 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    ffa0:	b570      	push	{r4, r5, r6, lr}
    ffa2:	4605      	mov	r5, r0
    ffa4:	4614      	mov	r4, r2
    ffa6:	4608      	mov	r0, r1
    ffa8:	f7ff ffd0 	bl	ff4c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ffac:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    ffb0:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    ffb4:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    ffb8:	4620      	mov	r0, r4
    ffba:	f7ff ffc7 	bl	ff4c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ffbe:	4428      	add	r0, r5
    ffc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ffc4:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    ffc8:	fbb0 f5f1 	udiv	r5, r0, r1
    ffcc:	4620      	mov	r0, r4
    ffce:	f7ff ffaf 	bl	ff30 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ffd2:	4428      	add	r0, r5
    ffd4:	1d40      	adds	r0, r0, #5
    ffd6:	bd70      	pop	{r4, r5, r6, pc}

0000ffd8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    ffd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ffdc:	4607      	mov	r7, r0
    ffde:	461d      	mov	r5, r3
    ffe0:	460e      	mov	r6, r1
    ffe2:	4614      	mov	r4, r2
    ffe4:	4610      	mov	r0, r2
    ffe6:	f7ff ffb1 	bl	ff4c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ffea:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    ffee:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    fff2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    fff6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    fffa:	2e02      	cmp	r6, #2
    fffc:	d00e      	beq.n	1001c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    fffe:	f240 52dc 	movw	r2, #1500	; 0x5dc
   10002:	4411      	add	r1, r2
   10004:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
   10008:	fbb1 f6f0 	udiv	r6, r1, r0
   1000c:	4620      	mov	r0, r4
   1000e:	f7ff ff8f 	bl	ff30 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   10012:	4430      	add	r0, r6
   10014:	4428      	add	r0, r5
   10016:	1d40      	adds	r0, r0, #5
   10018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1001c:	4602      	mov	r2, r0
   1001e:	e7f0      	b.n	10002 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

00010020 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   10020:	b510      	push	{r4, lr}
   10022:	4604      	mov	r4, r0
   10024:	4608      	mov	r0, r1
   10026:	f7ff ff91 	bl	ff4c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1002a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1002e:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10032:	fbb0 f0f1 	udiv	r0, r0, r1
   10036:	1a20      	subs	r0, r4, r0
   10038:	1e80      	subs	r0, r0, #2
   1003a:	bd10      	pop	{r4, pc}

0001003c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   1003c:	b510      	push	{r4, lr}
   1003e:	4604      	mov	r4, r0
   10040:	4608      	mov	r0, r1
   10042:	f7ff ff83 	bl	ff4c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10046:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1004a:	fbb0 f0f1 	udiv	r0, r0, r1
   1004e:	1a20      	subs	r0, r4, r0
   10050:	bd10      	pop	{r4, pc}

00010052 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   10052:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10056:	2902      	cmp	r1, #2
   10058:	d008      	beq.n	1006c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
   1005a:	f240 51dc 	movw	r1, #1500	; 0x5dc
   1005e:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   10062:	fbb1 f1f2 	udiv	r1, r1, r2
   10066:	4408      	add	r0, r1
   10068:	1e80      	subs	r0, r0, #2
   1006a:	4770      	bx	lr
   1006c:	4611      	mov	r1, r2
   1006e:	e7f6      	b.n	1005e <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

00010070 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   10070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10074:	2902      	cmp	r1, #2
   10076:	d007      	beq.n	10088 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
   10078:	f240 51dc 	movw	r1, #1500	; 0x5dc
   1007c:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   10080:	fbb1 f1f2 	udiv	r1, r1, r2
   10084:	4408      	add	r0, r1
   10086:	4770      	bx	lr
   10088:	4611      	mov	r1, r2
   1008a:	e7f7      	b.n	1007c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
   1008c:	1702080c 	.word	0x1702080c
   10090:	0201010d 	.word	0x0201010d
   10094:	01010909 	.word	0x01010909
   10098:	18090206 	.word	0x18090206
   1009c:	01010318 	.word	0x01010318
   100a0:	03030909 	.word	0x03030909
   100a4:	00000005 	.word	0x00000005

000100a8 <sendDataIMU>:
static struct device *ICM;

static const struct gpio_dt_spec imuInt = GPIO_DT_SPEC_GET_OR(IMU_INT, gpios,{0});
static struct gpio_callback imuInt_cb_data;

static void sendDataIMU(){
   100a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   100ac:	b089      	sub	sp, #36	; 0x24
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   100ae:	f010 fb4c 	bl	2074a <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   100b2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   100b6:	fba0 2304 	umull	r2, r3, r0, r4
   100ba:	fb04 3301 	mla	r3, r4, r1, r3
   100be:	0bd0      	lsrs	r0, r2, #15
//  printk("send data \n");
  float starttime, endtime;
  starttime = k_uptime_get();
   100c0:	0bd9      	lsrs	r1, r3, #15
   100c2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   100c6:	f7f0 fd91 	bl	bec <__aeabi_l2f>
    return i2c_write(ICM, &dataBuffer, 2, devAddr);
}

static uint8_t readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest){
    uint8_t ret;
    ret = i2c_write(ICM, &subAddress, 1, address);
   100ca:	4c4b      	ldr	r4, [pc, #300]	; (101f8 <sendDataIMU+0x150>)
   100cc:	231d      	movs	r3, #29
   100ce:	f88d 3003 	strb.w	r3, [sp, #3]
  starttime = k_uptime_get();
   100d2:	4606      	mov	r6, r0
    ret = i2c_write(ICM, &subAddress, 1, address);
   100d4:	2368      	movs	r3, #104	; 0x68
   100d6:	6820      	ldr	r0, [r4, #0]
   100d8:	2201      	movs	r2, #1
   100da:	f10d 0103 	add.w	r1, sp, #3
   100de:	f00c fb0f 	bl	1c700 <i2c_write>
			   uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = buf;
	msg.len = num_bytes;
   100e2:	230e      	movs	r3, #14
	msg.buf = buf;
   100e4:	f10d 0810 	add.w	r8, sp, #16
	msg.len = num_bytes;
   100e8:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   100ea:	2303      	movs	r3, #3
    ret = i2c_read(ICM, dest, count, address);
   100ec:	6820      	ldr	r0, [r4, #0]
	msg.buf = buf;
   100ee:	f8cd 8004 	str.w	r8, [sp, #4]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   100f2:	f88d 300c 	strb.w	r3, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
   100f6:	6883      	ldr	r3, [r0, #8]
   100f8:	f8df a110 	ldr.w	sl, [pc, #272]	; 1020c <sendDataIMU+0x164>
   100fc:	685c      	ldr	r4, [r3, #4]
   100fe:	f8df 9110 	ldr.w	r9, [pc, #272]	; 10210 <sendDataIMU+0x168>
   10102:	2368      	movs	r3, #104	; 0x68
   10104:	2201      	movs	r2, #1
   10106:	a901      	add	r1, sp, #4
   10108:	47a0      	blx	r4
static uint8_t readData()
{
    uint8_t rawData[14];  // x/y/z accel register data stored here
    uint8_t error=0;
    error = readBytes(ICM42605_ADDRESS, ICM42605_TEMP_DATA1, 14, &rawData[0]);  // Read the 14 raw data registers into data array
    if(error){
   1010a:	f010 0fff 	tst.w	r0, #255	; 0xff
   1010e:	d11e      	bne.n	1014e <sendDataIMU+0xa6>
    //accX
    destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
    //accY
    destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
    //accZ
    destination[3] = ((int16_t)rawData[6] << 8) | rawData[7] ;
   10110:	f89d 3016 	ldrb.w	r3, [sp, #22]
   10114:	f89d 4017 	ldrb.w	r4, [sp, #23]
    destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
   10118:	f89d 0015 	ldrb.w	r0, [sp, #21]
    destination[3] = ((int16_t)rawData[6] << 8) | rawData[7] ;
   1011c:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    //Gyr y
    destination[5] = ((int16_t)rawData[10] << 8) | rawData[11] ;
    //Gyr z
    destination[6] = ((int16_t)rawData[12] << 8) | rawData[13] ;
    t= destination[0];
    ax = destination[1] *_aRes;
   10120:	4b36      	ldr	r3, [pc, #216]	; (101fc <sendDataIMU+0x154>)
   10122:	681d      	ldr	r5, [r3, #0]
    destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
   10124:	f89d 3014 	ldrb.w	r3, [sp, #20]
   10128:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    ay = destination[2] *_aRes;
   1012c:	b200      	sxth	r0, r0
   1012e:	f7f0 fd47 	bl	bc0 <__aeabi_i2f>
   10132:	4629      	mov	r1, r5
   10134:	f7f0 fd98 	bl	c68 <__aeabi_fmul>
    destination[3] = ((int16_t)rawData[6] << 8) | rawData[7] ;
   10138:	b224      	sxth	r4, r4
    ay = destination[2] *_aRes;
   1013a:	f8ca 0000 	str.w	r0, [sl]
    az = destination[3] *_aRes;
   1013e:	4620      	mov	r0, r4
   10140:	f7f0 fd3e 	bl	bc0 <__aeabi_i2f>
   10144:	4629      	mov	r1, r5
   10146:	f7f0 fd8f 	bl	c68 <__aeabi_fmul>
   1014a:	f8c9 0000 	str.w	r0, [r9]
   1014e:	f010 fafc 	bl	2074a <z_impl_k_uptime_ticks>
   10152:	4683      	mov	fp, r0
   10154:	460f      	mov	r7, r1
   10156:	f010 faf8 	bl	2074a <z_impl_k_uptime_ticks>
   1015a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1015e:	fba0 2305 	umull	r2, r3, r0, r5
   10162:	fb05 3301 	mla	r3, r5, r1, r3
   10166:	0bd0      	lsrs	r0, r2, #15
  float timestamp = k_uptime_get() /1000.0;
   10168:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1016c:	0bd9      	lsrs	r1, r3, #15
   1016e:	f7f0 f955 	bl	41c <__aeabi_l2d>
   10172:	4b23      	ldr	r3, [pc, #140]	; (10200 <sendDataIMU+0x158>)
   10174:	2200      	movs	r2, #0
   10176:	f7f0 faa9 	bl	6cc <__aeabi_ddiv>
   1017a:	f7f0 fc17 	bl	9ac <__aeabi_d2f>
  imuData.timestamp = timestamp;
   1017e:	4b21      	ldr	r3, [pc, #132]	; (10204 <sendDataIMU+0x15c>)
   10180:	6198      	str	r0, [r3, #24]
   10182:	fbab 2305 	umull	r2, r3, fp, r5
   10186:	fb05 3307 	mla	r3, r5, r7, r3
  float timestamp = k_uptime_get() /1000.0;
   1018a:	4604      	mov	r4, r0
   1018c:	0bd0      	lsrs	r0, r2, #15
  endtime = k_uptime_get();
   1018e:	0bd9      	lsrs	r1, r3, #15
   10190:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   10194:	f7f0 fd2a 	bl	bec <__aeabi_l2f>
  float myArray[4] = {endtime-starttime,ay,az,timestamp};
   10198:	4631      	mov	r1, r6
   1019a:	f7f0 fc5b 	bl	a54 <__aeabi_fsub>
   1019e:	f8da 3000 	ldr.w	r3, [sl]
   101a2:	9004      	str	r0, [sp, #16]
   101a4:	9305      	str	r3, [sp, #20]
  if(timestamp > oldTime +0.01){
   101a6:	4620      	mov	r0, r4
  float myArray[4] = {endtime-starttime,ay,az,timestamp};
   101a8:	f8d9 3000 	ldr.w	r3, [r9]
   101ac:	9306      	str	r3, [sp, #24]
   101ae:	9407      	str	r4, [sp, #28]
  if(timestamp > oldTime +0.01){
   101b0:	f7f0 f90a 	bl	3c8 <__aeabi_f2d>
   101b4:	4d14      	ldr	r5, [pc, #80]	; (10208 <sendDataIMU+0x160>)
   101b6:	4606      	mov	r6, r0
   101b8:	6828      	ldr	r0, [r5, #0]
   101ba:	460f      	mov	r7, r1
   101bc:	f7f0 f904 	bl	3c8 <__aeabi_f2d>
   101c0:	a30b      	add	r3, pc, #44	; (adr r3, 101f0 <sendDataIMU+0x148>)
   101c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   101c6:	f7ef ffa1 	bl	10c <__adddf3>
   101ca:	4602      	mov	r2, r0
   101cc:	460b      	mov	r3, r1
   101ce:	4630      	mov	r0, r6
   101d0:	4639      	mov	r1, r7
   101d2:	f7f0 fbe1 	bl	998 <__aeabi_dcmpgt>
   101d6:	b128      	cbz	r0, 101e4 <sendDataIMU+0x13c>
    sendData(SENSOR_IMU_ACC_ID, &myArray, 4*4);
   101d8:	2210      	movs	r2, #16
   101da:	4641      	mov	r1, r8
   101dc:	2002      	movs	r0, #2
   101de:	f000 fa79 	bl	106d4 <sendData>
    oldTime=timestamp;
   101e2:	602c      	str	r4, [r5, #0]
}
   101e4:	b009      	add	sp, #36	; 0x24
   101e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   101ea:	bf00      	nop
   101ec:	f3af 8000 	nop.w
   101f0:	47ae147b 	.word	0x47ae147b
   101f4:	3f847ae1 	.word	0x3f847ae1
   101f8:	20001d30 	.word	0x20001d30
   101fc:	20001d34 	.word	0x20001d34
   10200:	408f4000 	.word	0x408f4000
   10204:	20001d94 	.word	0x20001d94
   10208:	20001d50 	.word	0x20001d50
   1020c:	20001d3c 	.word	0x20001d3c
   10210:	20001d40 	.word	0x20001d40

00010214 <setConfigIMU>:
  printk("config received \n");
   10214:	4801      	ldr	r0, [pc, #4]	; (1021c <setConfigIMU+0x8>)
   10216:	f00c beeb 	b.w	1cff0 <printk>
   1021a:	bf00      	nop
   1021c:	0002196c 	.word	0x0002196c

00010220 <imuDataReady>:
	k_work_submit(&work_data);
   10220:	4801      	ldr	r0, [pc, #4]	; (10228 <imuDataReady+0x8>)
   10222:	f008 bfed 	b.w	19200 <k_work_submit>
   10226:	bf00      	nop
   10228:	20001d64 	.word	0x20001d64

0001022c <writeByte.constprop.0>:
static uint8_t writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data){
   1022c:	b507      	push	{r0, r1, r2, lr}
	  dataBuffer[0]=regAddr;
   1022e:	f88d 0004 	strb.w	r0, [sp, #4]
    return i2c_write(ICM, &dataBuffer, 2, devAddr);
   10232:	4806      	ldr	r0, [pc, #24]	; (1024c <writeByte.constprop.0+0x20>)
    dataBuffer[1]=data;
   10234:	f88d 1005 	strb.w	r1, [sp, #5]
    return i2c_write(ICM, &dataBuffer, 2, devAddr);
   10238:	2368      	movs	r3, #104	; 0x68
   1023a:	2202      	movs	r2, #2
   1023c:	a901      	add	r1, sp, #4
   1023e:	6800      	ldr	r0, [r0, #0]
   10240:	f00c fa5e 	bl	1c700 <i2c_write>
}
   10244:	b2c0      	uxtb	r0, r0
   10246:	b003      	add	sp, #12
   10248:	f85d fb04 	ldr.w	pc, [sp], #4
   1024c:	20001d30 	.word	0x20001d30

00010250 <readByte.constprop.0>:
static uint8_t readByte(uint8_t i2cAddress, uint8_t subAddress){
   10250:	b510      	push	{r4, lr}
	ret = i2c_write(ICM, &subAddress, 1, i2cAddress);
   10252:	4c0e      	ldr	r4, [pc, #56]	; (1028c <readByte.constprop.0+0x3c>)
static uint8_t readByte(uint8_t i2cAddress, uint8_t subAddress){
   10254:	b086      	sub	sp, #24
	ret = i2c_write(ICM, &subAddress, 1, i2cAddress);
   10256:	2368      	movs	r3, #104	; 0x68
static uint8_t readByte(uint8_t i2cAddress, uint8_t subAddress){
   10258:	f88d 0007 	strb.w	r0, [sp, #7]
	ret = i2c_write(ICM, &subAddress, 1, i2cAddress);
   1025c:	2201      	movs	r2, #1
   1025e:	6820      	ldr	r0, [r4, #0]
   10260:	f10d 0107 	add.w	r1, sp, #7
   10264:	f00c fa4c 	bl	1c700 <i2c_write>
	msg.buf = buf;
   10268:	f10d 030b 	add.w	r3, sp, #11
   1026c:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
   1026e:	2201      	movs	r2, #1
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   10270:	2303      	movs	r3, #3
	ret = i2c_read(ICM, &read_data, 1, i2cAddress);
   10272:	6820      	ldr	r0, [r4, #0]
	msg.len = num_bytes;
   10274:	9204      	str	r2, [sp, #16]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   10276:	f88d 3014 	strb.w	r3, [sp, #20]
	return api->transfer(dev, msgs, num_msgs, addr);
   1027a:	6883      	ldr	r3, [r0, #8]
   1027c:	a903      	add	r1, sp, #12
   1027e:	685c      	ldr	r4, [r3, #4]
   10280:	2368      	movs	r3, #104	; 0x68
   10282:	47a0      	blx	r4
}
   10284:	b2c0      	uxtb	r0, r0
   10286:	b006      	add	sp, #24
   10288:	bd10      	pop	{r4, pc}
   1028a:	bf00      	nop
   1028c:	20001d30 	.word	0x20001d30

00010290 <init_Interrupt_IMU>:
int8_t init_Interrupt_IMU(){
   10290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	k_work_init(&work_data, sendDataIMU);
   10292:	4925      	ldr	r1, [pc, #148]	; (10328 <init_Interrupt_IMU+0x98>)
   10294:	4825      	ldr	r0, [pc, #148]	; (1032c <init_Interrupt_IMU+0x9c>)
   10296:	f010 f8ab 	bl	203f0 <k_work_init>
	k_work_init(&work_config, setConfigIMU);
   1029a:	4925      	ldr	r1, [pc, #148]	; (10330 <init_Interrupt_IMU+0xa0>)
   1029c:	4825      	ldr	r0, [pc, #148]	; (10334 <init_Interrupt_IMU+0xa4>)
   1029e:	f010 f8a7 	bl	203f0 <k_work_init>
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   102a2:	4d25      	ldr	r5, [pc, #148]	; (10338 <init_Interrupt_IMU+0xa8>)
   102a4:	4628      	mov	r0, r5
   102a6:	f00f fe71 	bl	1ff8c <z_device_ready>
   102aa:	462f      	mov	r7, r5
   102ac:	b1a0      	cbz	r0, 102d8 <init_Interrupt_IMU+0x48>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   102ae:	692a      	ldr	r2, [r5, #16]
	const struct gpio_driver_api *api =
   102b0:	68ae      	ldr	r6, [r5, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   102b2:	6813      	ldr	r3, [r2, #0]
   102b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   102b8:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
   102ba:	2118      	movs	r1, #24
   102bc:	6833      	ldr	r3, [r6, #0]
   102be:	f44f 7280 	mov.w	r2, #256	; 0x100
   102c2:	4628      	mov	r0, r5
   102c4:	4798      	blx	r3
	returnValue = gpio_pin_configure_dt(&imuInt, GPIO_INPUT);
   102c6:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   102c8:	b16c      	cbz	r4, 102e6 <init_Interrupt_IMU+0x56>
		printk("Error %d: failed to configure %s pin %d\n",
   102ca:	682a      	ldr	r2, [r5, #0]
   102cc:	481b      	ldr	r0, [pc, #108]	; (1033c <init_Interrupt_IMU+0xac>)
   102ce:	2318      	movs	r3, #24
   102d0:	4621      	mov	r1, r4
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   102d2:	f00c fe8d 	bl	1cff0 <printk>
		return returnValue;
   102d6:	e004      	b.n	102e2 <init_Interrupt_IMU+0x52>
		printk("Error: imu interrupt %s is not ready\n",
   102d8:	6829      	ldr	r1, [r5, #0]
   102da:	4819      	ldr	r0, [pc, #100]	; (10340 <init_Interrupt_IMU+0xb0>)
   102dc:	f00c fe88 	bl	1cff0 <printk>
		return 1;
   102e0:	2401      	movs	r4, #1
}
   102e2:	4620      	mov	r0, r4
   102e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   102e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   102ea:	69b4      	ldr	r4, [r6, #24]
   102ec:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
   102f0:	2118      	movs	r1, #24
   102f2:	4628      	mov	r0, r5
   102f4:	47a0      	blx	r4
	returnValue = gpio_pin_interrupt_configure_dt(&imuInt,GPIO_INT_EDGE_RISING);
   102f6:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   102f8:	b124      	cbz	r4, 10304 <init_Interrupt_IMU+0x74>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   102fa:	682a      	ldr	r2, [r5, #0]
   102fc:	4811      	ldr	r0, [pc, #68]	; (10344 <init_Interrupt_IMU+0xb4>)
   102fe:	2318      	movs	r3, #24
   10300:	4621      	mov	r1, r4
   10302:	e7e6      	b.n	102d2 <init_Interrupt_IMU+0x42>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   10304:	4910      	ldr	r1, [pc, #64]	; (10348 <init_Interrupt_IMU+0xb8>)
   10306:	4b11      	ldr	r3, [pc, #68]	; (1034c <init_Interrupt_IMU+0xbc>)
   10308:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   1030a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1030e:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   10310:	69f3      	ldr	r3, [r6, #28]
   10312:	b113      	cbz	r3, 1031a <init_Interrupt_IMU+0x8a>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   10314:	2201      	movs	r2, #1
   10316:	4628      	mov	r0, r5
   10318:	4798      	blx	r3
	printk("Set up IMU at %s pin %d\n", imuInt.port->name, imuInt.pin);
   1031a:	6839      	ldr	r1, [r7, #0]
   1031c:	480c      	ldr	r0, [pc, #48]	; (10350 <init_Interrupt_IMU+0xc0>)
   1031e:	2218      	movs	r2, #24
   10320:	f00c fe66 	bl	1cff0 <printk>
  return returnValue;
   10324:	e7dd      	b.n	102e2 <init_Interrupt_IMU+0x52>
   10326:	bf00      	nop
   10328:	000100a9 	.word	0x000100a9
   1032c:	20001d64 	.word	0x20001d64
   10330:	00010215 	.word	0x00010215
   10334:	20001d54 	.word	0x20001d54
   10338:	00020c84 	.word	0x00020c84
   1033c:	000219a4 	.word	0x000219a4
   10340:	0002197e 	.word	0x0002197e
   10344:	000219cd 	.word	0x000219cd
   10348:	20001d44 	.word	0x20001d44
   1034c:	00010221 	.word	0x00010221
   10350:	00021a03 	.word	0x00021a03

00010354 <initIMU>:
extern void initIMU(struct device *i2c_pointer, uint8_t Ascale, uint8_t Gscale, uint8_t AODR, uint8_t GODR){
   10354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10356:	461e      	mov	r6, r3
    ICM = i2c_pointer;
   10358:	4b7d      	ldr	r3, [pc, #500]	; (10550 <initIMU+0x1fc>)
extern void initIMU(struct device *i2c_pointer, uint8_t Ascale, uint8_t Gscale, uint8_t AODR, uint8_t GODR){
   1035a:	f89d 7018 	ldrb.w	r7, [sp, #24]
    ICM = i2c_pointer;
   1035e:	6018      	str	r0, [r3, #0]
extern void initIMU(struct device *i2c_pointer, uint8_t Ascale, uint8_t Gscale, uint8_t AODR, uint8_t GODR){
   10360:	460d      	mov	r5, r1
   10362:	4614      	mov	r4, r2
    init_Interrupt_IMU();
   10364:	f7ff ff94 	bl	10290 <init_Interrupt_IMU>
  uint8_t temp = readByte(ICM42605_ADDRESS, ICM42605_DEVICE_CONFIG);
   10368:	2011      	movs	r0, #17
   1036a:	f7ff ff71 	bl	10250 <readByte.constprop.0>
  writeByte(ICM42605_ADDRESS, ICM42605_DEVICE_CONFIG, temp | 0x01); // Set bit 0 to 1 to reset ICM42605
   1036e:	f040 0101 	orr.w	r1, r0, #1
   10372:	b2c9      	uxtb	r1, r1
   10374:	2011      	movs	r0, #17
   10376:	f7ff ff59 	bl	1022c <writeByte.constprop.0>
	return z_impl_k_sleep(timeout);
   1037a:	2100      	movs	r1, #0
   1037c:	f44f 70a4 	mov.w	r0, #328	; 0x148
   10380:	f009 facc 	bl	1991c <z_impl_k_sleep>
   10384:	2100      	movs	r1, #0
   10386:	f640 40cd 	movw	r0, #3277	; 0xccd
   1038a:	f009 fac7 	bl	1991c <z_impl_k_sleep>
    uint8_t temp = readByte(ICM42605_ADDRESS, ICM42605_DRIVE_CONFIG);      
   1038e:	2013      	movs	r0, #19
   10390:	f7ff ff5e 	bl	10250 <readByte.constprop.0>
    temp ^= (-1 ^ temp) & (1UL << 0);
   10394:	43c1      	mvns	r1, r0
   10396:	f001 0101 	and.w	r1, r1, #1
   1039a:	4048      	eors	r0, r1
    temp ^= (-0 ^ temp) & (1UL << 2);
   1039c:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
    temp ^= (-1 ^ temp) & (1UL << 3);
   103a0:	43c1      	mvns	r1, r0
   103a2:	f001 0108 	and.w	r1, r1, #8
   103a6:	4041      	eors	r1, r0
    writeByte(ICM42605_ADDRESS, ICM42605_DRIVE_CONFIG, temp);// set i2c slew rate to 20-60ns
   103a8:	f001 01c9 	and.w	r1, r1, #201	; 0xc9
   103ac:	2013      	movs	r0, #19
   103ae:	f7ff ff3d 	bl	1022c <writeByte.constprop.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INTF_CONFIG6);      
   103b2:	207c      	movs	r0, #124	; 0x7c
   103b4:	f7ff ff4c 	bl	10250 <readByte.constprop.0>
    temp ^= (-1 ^ temp) & (1UL << 4);
   103b8:	43c1      	mvns	r1, r0
   103ba:	f001 0110 	and.w	r1, r1, #16
   103be:	4041      	eors	r1, r0
    writeByte(ICM42605_ADDRESS, ICM42605_INTF_CONFIG6, temp);// 
   103c0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   103c4:	207c      	movs	r0, #124	; 0x7c
   103c6:	f7ff ff31 	bl	1022c <writeByte.constprop.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INTF_CONFIG4);      
   103ca:	207a      	movs	r0, #122	; 0x7a
   103cc:	f7ff ff40 	bl	10250 <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_INTF_CONFIG4, temp);// 
   103d0:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
   103d4:	207a      	movs	r0, #122	; 0x7a
   103d6:	f7ff ff29 	bl	1022c <writeByte.constprop.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_GYRO_CONFIG0);
   103da:	204f      	movs	r0, #79	; 0x4f
   103dc:	f7ff ff38 	bl	10250 <readByte.constprop.0>
    temp = temp & ~(0xEF) ; // set all to 0 
   103e0:	f000 0110 	and.w	r1, r0, #16
    writeByte(ICM42605_ADDRESS, ICM42605_GYRO_CONFIG0, temp | GODR | Gscale << 5); // gyro full scale and data rate
   103e4:	4339      	orrs	r1, r7
   103e6:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
   103ea:	b2c9      	uxtb	r1, r1
   103ec:	204f      	movs	r0, #79	; 0x4f
   103ee:	f7ff ff1d 	bl	1022c <writeByte.constprop.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_ACCEL_CONFIG0);
   103f2:	2050      	movs	r0, #80	; 0x50
   103f4:	f7ff ff2c 	bl	10250 <readByte.constprop.0>
    temp = temp & ~(0xEF) ; // set all to 0 
   103f8:	f000 0110 	and.w	r1, r0, #16
    writeByte(ICM42605_ADDRESS, ICM42605_ACCEL_CONFIG0, temp | AODR | Ascale << 5); // set accel full scale and data rate
   103fc:	4331      	orrs	r1, r6
   103fe:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
   10402:	b2c9      	uxtb	r1, r1
   10404:	2050      	movs	r0, #80	; 0x50
   10406:	f7ff ff11 	bl	1022c <writeByte.constprop.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_GYRO_CONFIG1);
   1040a:	2051      	movs	r0, #81	; 0x51
   1040c:	f7ff ff20 	bl	10250 <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_GYRO_CONFIG1, temp | 0xD0); // set temperature sensor low pass filter to 5Hz, use first order gyro filter
   10410:	f060 012f 	orn	r1, r0, #47	; 0x2f
   10414:	b2c9      	uxtb	r1, r1
   10416:	2051      	movs	r0, #81	; 0x51
   10418:	f7ff ff08 	bl	1022c <writeByte.constprop.0>
   1041c:	2100      	movs	r1, #0
   1041e:	f640 40cd 	movw	r0, #3277	; 0xccd
   10422:	f009 fa7b 	bl	1991c <z_impl_k_sleep>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INT_CONFIG);
   10426:	2014      	movs	r0, #20
   10428:	f7ff ff12 	bl	10250 <readByte.constprop.0>
    temp ^= (-activeHigh ^ temp) & (1UL << 0);  // bit 0
   1042c:	43c1      	mvns	r1, r0
   1042e:	f001 0101 	and.w	r1, r1, #1
   10432:	4048      	eors	r0, r1
   10434:	b2c0      	uxtb	r0, r0
    temp ^= (-pushPull ^ temp) & (1UL << 1);
   10436:	43c1      	mvns	r1, r0
   10438:	f001 0102 	and.w	r1, r1, #2
   1043c:	4041      	eors	r1, r0
    writeByte(ICM42605_ADDRESS, ICM42605_INT_CONFIG, temp);
   1043e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
   10442:	2014      	movs	r0, #20
   10444:	f7ff fef2 	bl	1022c <writeByte.constprop.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INT_CONFIG1);
   10448:	2064      	movs	r0, #100	; 0x64
   1044a:	f7ff ff01 	bl	10250 <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_INT_CONFIG1, temp & ~(0x10) ); // set bit 4 to zero for proper function of INT1 and INT2
   1044e:	f000 01ef 	and.w	r1, r0, #239	; 0xef
   10452:	2064      	movs	r0, #100	; 0x64
   10454:	f7ff feea 	bl	1022c <writeByte.constprop.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INT_CONFIG0);
   10458:	2063      	movs	r0, #99	; 0x63
   1045a:	f7ff fef9 	bl	10250 <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_INT_CONFIG0, temp);
   1045e:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
   10462:	2063      	movs	r0, #99	; 0x63
   10464:	f7ff fee2 	bl	1022c <writeByte.constprop.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INT_SOURCE0);
   10468:	2065      	movs	r0, #101	; 0x65
   1046a:	f7ff fef1 	bl	10250 <readByte.constprop.0>
    temp ^= (-0 ^ temp) & (1UL << 2);  
   1046e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
    temp ^= (-1 ^ temp) & (1UL << 3);    
   10472:	43c1      	mvns	r1, r0
   10474:	f001 0108 	and.w	r1, r1, #8
   10478:	4041      	eors	r1, r0
    writeByte(ICM42605_ADDRESS, ICM42605_INT_SOURCE0, temp ); // route data ready interrupt to INT1
   1047a:	f001 0188 	and.w	r1, r1, #136	; 0x88
   1047e:	2065      	movs	r0, #101	; 0x65
   10480:	f7ff fed4 	bl	1022c <writeByte.constprop.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INT_SOURCE3);
   10484:	2068      	movs	r0, #104	; 0x68
   10486:	f7ff fee3 	bl	10250 <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_INT_SOURCE3, temp | 0x01 ); // route AGC interrupt interrupt to INT2
   1048a:	f040 0101 	orr.w	r1, r0, #1
   1048e:	b2c9      	uxtb	r1, r1
   10490:	2068      	movs	r0, #104	; 0x68
   10492:	f7ff fecb 	bl	1022c <writeByte.constprop.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_REG_BANK_SEL);
   10496:	2076      	movs	r0, #118	; 0x76
   10498:	f7ff feda 	bl	10250 <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_REG_BANK_SEL, temp | 0x04 ); // select Bank 4
   1049c:	f040 0104 	orr.w	r1, r0, #4
   104a0:	b2c9      	uxtb	r1, r1
   104a2:	2076      	movs	r0, #118	; 0x76
   104a4:	f7ff fec2 	bl	1022c <writeByte.constprop.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_APEX_CONFIG5);
   104a8:	2044      	movs	r0, #68	; 0x44
   104aa:	f7ff fed1 	bl	10250 <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_APEX_CONFIG5, temp & ~(0x07) ); // select unitary mounting matrix
   104ae:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   104b2:	2044      	movs	r0, #68	; 0x44
   104b4:	f7ff feba 	bl	1022c <writeByte.constprop.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_REG_BANK_SEL);
   104b8:	2076      	movs	r0, #118	; 0x76
   104ba:	f7ff fec9 	bl	10250 <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_REG_BANK_SEL, temp & ~(0x07) ); // select Bank 0
   104be:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   104c2:	2076      	movs	r0, #118	; 0x76
   104c4:	f7ff feb2 	bl	1022c <writeByte.constprop.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_PWR_MGMT0); // make sure not to disturb reserved bit values
   104c8:	204e      	movs	r0, #78	; 0x4e
   104ca:	f7ff fec1 	bl	10250 <readByte.constprop.0>
   104ce:	4601      	mov	r1, r0
    writeByte(ICM42605_ADDRESS, ICM42605_PWR_MGMT0, temp | 0x00);  // disable gyro and accel
   104d0:	204e      	movs	r0, #78	; 0x4e
   104d2:	f7ff feab 	bl	1022c <writeByte.constprop.0>
  switch (Ascale)
   104d6:	2d03      	cmp	r5, #3
   104d8:	d807      	bhi.n	104ea <initIMU+0x196>
   104da:	e8df f005 	tbb	[pc, r5]
   104de:	1216      	.short	0x1216
   104e0:	020e      	.short	0x020e
      _aRes = 2.0f / 32768.0f;
   104e2:	4b1c      	ldr	r3, [pc, #112]	; (10554 <initIMU+0x200>)
   104e4:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
      _aRes = 16.0f / 32768.0f;
   104e8:	601a      	str	r2, [r3, #0]
  switch (Gscale)
   104ea:	2c07      	cmp	r4, #7
   104ec:	d814      	bhi.n	10518 <initIMU+0x1c4>
   104ee:	e8df f004 	tbb	[pc, r4]
   104f2:	292c      	.short	0x292c
   104f4:	1d202326 	.word	0x1d202326
   104f8:	101a      	.short	0x101a
      _aRes = 4.0f / 32768.0f;
   104fa:	4b16      	ldr	r3, [pc, #88]	; (10554 <initIMU+0x200>)
   104fc:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
   10500:	e7f2      	b.n	104e8 <initIMU+0x194>
      _aRes = 8.0f / 32768.0f;
   10502:	4b14      	ldr	r3, [pc, #80]	; (10554 <initIMU+0x200>)
   10504:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
   10508:	e7ee      	b.n	104e8 <initIMU+0x194>
      _aRes = 16.0f / 32768.0f;
   1050a:	4b12      	ldr	r3, [pc, #72]	; (10554 <initIMU+0x200>)
   1050c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
   10510:	e7ea      	b.n	104e8 <initIMU+0x194>
      _gRes = 15.125f / 32768.0f;
   10512:	4b11      	ldr	r3, [pc, #68]	; (10558 <initIMU+0x204>)
   10514:	4a11      	ldr	r2, [pc, #68]	; (1055c <initIMU+0x208>)
      _gRes = 2000.0f / 32768.0f;
   10516:	601a      	str	r2, [r3, #0]
   10518:	f44f 70a4 	mov.w	r0, #328	; 0x148
}
   1051c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10520:	2100      	movs	r1, #0
   10522:	f009 b9fb 	b.w	1991c <z_impl_k_sleep>
      _gRes = 31.25f / 32768.0f;
   10526:	4b0c      	ldr	r3, [pc, #48]	; (10558 <initIMU+0x204>)
   10528:	4a0d      	ldr	r2, [pc, #52]	; (10560 <initIMU+0x20c>)
   1052a:	e7f4      	b.n	10516 <initIMU+0x1c2>
      _gRes = 62.5f / 32768.0f;
   1052c:	4b0a      	ldr	r3, [pc, #40]	; (10558 <initIMU+0x204>)
   1052e:	4a0d      	ldr	r2, [pc, #52]	; (10564 <initIMU+0x210>)
   10530:	e7f1      	b.n	10516 <initIMU+0x1c2>
      _gRes = 125.0f / 32768.0f;
   10532:	4b09      	ldr	r3, [pc, #36]	; (10558 <initIMU+0x204>)
   10534:	4a0c      	ldr	r2, [pc, #48]	; (10568 <initIMU+0x214>)
   10536:	e7ee      	b.n	10516 <initIMU+0x1c2>
      _gRes = 250.0f / 32768.0f;
   10538:	4b07      	ldr	r3, [pc, #28]	; (10558 <initIMU+0x204>)
   1053a:	4a0c      	ldr	r2, [pc, #48]	; (1056c <initIMU+0x218>)
   1053c:	e7eb      	b.n	10516 <initIMU+0x1c2>
      _gRes = 500.0f / 32768.0f;
   1053e:	4b06      	ldr	r3, [pc, #24]	; (10558 <initIMU+0x204>)
   10540:	4a0b      	ldr	r2, [pc, #44]	; (10570 <initIMU+0x21c>)
   10542:	e7e8      	b.n	10516 <initIMU+0x1c2>
      _gRes = 1000.0f / 32768.0f;
   10544:	4b04      	ldr	r3, [pc, #16]	; (10558 <initIMU+0x204>)
   10546:	4a0b      	ldr	r2, [pc, #44]	; (10574 <initIMU+0x220>)
   10548:	e7e5      	b.n	10516 <initIMU+0x1c2>
      _gRes = 2000.0f / 32768.0f;
   1054a:	4b03      	ldr	r3, [pc, #12]	; (10558 <initIMU+0x204>)
   1054c:	4a0a      	ldr	r2, [pc, #40]	; (10578 <initIMU+0x224>)
   1054e:	e7e2      	b.n	10516 <initIMU+0x1c2>
   10550:	20001d30 	.word	0x20001d30
   10554:	20001d34 	.word	0x20001d34
   10558:	20001d38 	.word	0x20001d38
   1055c:	39f20000 	.word	0x39f20000
   10560:	3a7a0000 	.word	0x3a7a0000
   10564:	3afa0000 	.word	0x3afa0000
   10568:	3b7a0000 	.word	0x3b7a0000
   1056c:	3bfa0000 	.word	0x3bfa0000
   10570:	3c7a0000 	.word	0x3c7a0000
   10574:	3cfa0000 	.word	0x3cfa0000
   10578:	3d7a0000 	.word	0x3d7a0000

0001057c <imu_config_notification>:
{
	printk("config bmp set");
}
static void imu_config_notification(const struct bt_gatt_attr *attr,uint8_t value)
{
	printk("config imu set");
   1057c:	4801      	ldr	r0, [pc, #4]	; (10584 <imu_config_notification+0x8>)
   1057e:	f00c bd37 	b.w	1cff0 <printk>
   10582:	bf00      	nop
   10584:	00021a1c 	.word	0x00021a1c

00010588 <bmp_config_notification>:
	printk("config bmp set");
   10588:	4801      	ldr	r0, [pc, #4]	; (10590 <bmp_config_notification+0x8>)
   1058a:	f00c bd31 	b.w	1cff0 <printk>
   1058e:	bf00      	nop
   10590:	00021a2b 	.word	0x00021a2b

00010594 <read_u16>:
#include "ble.h"

static ssize_t read_u16(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			void *buf, uint16_t len, uint16_t offset)
{
   10594:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   10598:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
   1059c:	460c      	mov	r4, r1
   1059e:	4606      	mov	r6, r0
	// this function is only called on READ, which one is called if notification is set?!
    printk("len: %i\n",len);
   105a0:	4619      	mov	r1, r3
   105a2:	480b      	ldr	r0, [pc, #44]	; (105d0 <read_u16+0x3c>)
{
   105a4:	461d      	mov	r5, r3
   105a6:	4617      	mov	r7, r2
    printk("len: %i\n",len);
   105a8:	f00c fd22 	bl	1cff0 <printk>
	printk("offset: %i\n",offset);
   105ac:	4641      	mov	r1, r8
   105ae:	4809      	ldr	r0, [pc, #36]	; (105d4 <read_u16+0x40>)
   105b0:	f00c fd1e 	bl	1cff0 <printk>
	//const uint16_t *u16 = attr->user_data;
	//uint16_t value = sys_cpu_to_le16(*u16);
	uint8_t *value = attr->user_data;

//	return bt_gatt_attr_read(conn, attr, buf, len, offset, value, sizeof(value));
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value, 12);
   105b4:	230c      	movs	r3, #12
   105b6:	9302      	str	r3, [sp, #8]
   105b8:	68e3      	ldr	r3, [r4, #12]
   105ba:	463a      	mov	r2, r7
   105bc:	e9cd 8300 	strd	r8, r3, [sp]
   105c0:	4621      	mov	r1, r4
   105c2:	462b      	mov	r3, r5
   105c4:	4630      	mov	r0, r6
   105c6:	f00f f9b9 	bl	1f93c <bt_gatt_attr_read>
}
   105ca:	b004      	add	sp, #16
   105cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   105d0:	00021a3a 	.word	0x00021a3a
   105d4:	00021a43 	.word	0x00021a43

000105d8 <disconnected>:
		printk("Connected\n");
	}
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
   105d8:	b508      	push	{r3, lr}
	printk("Disconnected (reason 0x%02x)\n", reason);
   105da:	4804      	ldr	r0, [pc, #16]	; (105ec <disconnected+0x14>)
   105dc:	f00c fd08 	bl	1cff0 <printk>
	sleepBMP(1);
}
   105e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sleepBMP(1);
   105e4:	2001      	movs	r0, #1
   105e6:	f000 bcad 	b.w	10f44 <sleepBMP>
   105ea:	bf00      	nop
   105ec:	00021a4f 	.word	0x00021a4f

000105f0 <connected>:
{
   105f0:	b510      	push	{r4, lr}
   105f2:	460c      	mov	r4, r1
	bt_conn_le_param_update(conn,&conn_paramter);
   105f4:	4907      	ldr	r1, [pc, #28]	; (10614 <connected+0x24>)
   105f6:	f00e f94b 	bl	1e890 <bt_conn_le_param_update>
	if (err) {
   105fa:	b12c      	cbz	r4, 10608 <connected+0x18>
		printk("Connection failed (err 0x%02x)\n", err);
   105fc:	4621      	mov	r1, r4
   105fe:	4806      	ldr	r0, [pc, #24]	; (10618 <connected+0x28>)
}
   10600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Connection failed (err 0x%02x)\n", err);
   10604:	f00c bcf4 	b.w	1cff0 <printk>
}
   10608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Connected\n");
   1060c:	4803      	ldr	r0, [pc, #12]	; (1061c <connected+0x2c>)
   1060e:	f00c bcef 	b.w	1cff0 <printk>
   10612:	bf00      	nop
   10614:	00021964 	.word	0x00021964
   10618:	00021a6d 	.word	0x00021a6d
   1061c:	00021a8d 	.word	0x00021a8d

00010620 <dataWritten>:
{
   10620:	b570      	push	{r4, r5, r6, lr}
   10622:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   10626:	460d      	mov	r5, r1
	if (offset + len > sizeof(config_data)) {
   10628:	461c      	mov	r4, r3
   1062a:	18c3      	adds	r3, r0, r3
   1062c:	2b14      	cmp	r3, #20
	uint8_t *value = attr->user_data;
   1062e:	68ee      	ldr	r6, [r5, #12]
{
   10630:	4611      	mov	r1, r2
	if (offset + len > sizeof(config_data)) {
   10632:	dc0b      	bgt.n	1064c <dataWritten+0x2c>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   10634:	4622      	mov	r2, r4
   10636:	4430      	add	r0, r6
   10638:	f010 fa1f 	bl	20a7a <memcpy>
	if(attr->uuid == &bmp_cnfg.uuid){
   1063c:	682a      	ldr	r2, [r5, #0]
   1063e:	4b05      	ldr	r3, [pc, #20]	; (10654 <dataWritten+0x34>)
   10640:	429a      	cmp	r2, r3
   10642:	d101      	bne.n	10648 <dataWritten+0x28>
		submitConfigBMP();
   10644:	f000 fc78 	bl	10f38 <submitConfigBMP>
}
   10648:	4620      	mov	r0, r4
   1064a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1064c:	f06f 0406 	mvn.w	r4, #6
   10650:	e7fa      	b.n	10648 <dataWritten+0x28>
   10652:	bf00      	nop
   10654:	200007c5 	.word	0x200007c5

00010658 <bt_gatt_notify_uuid.constprop.0>:
 *  @param data Pointer to Attribute data.
 *  @param len  Attribute value length.
 *
 *  @return 0 in case of success or negative value in case of error.
 */
static inline int bt_gatt_notify_uuid(struct bt_conn *conn,
   10658:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));

	params.uuid = uuid;
   1065a:	9000      	str	r0, [sp, #0]
	params.attr = attr;
   1065c:	4807      	ldr	r0, [pc, #28]	; (1067c <bt_gatt_notify_uuid.constprop.0+0x24>)
	memset(&params, 0, sizeof(params));
   1065e:	2300      	movs	r3, #0
	params.data = data;
   10660:	e9cd 0101 	strd	r0, r1, [sp, #4]
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
   10664:	4669      	mov	r1, sp
   10666:	4618      	mov	r0, r3
	memset(&params, 0, sizeof(params));
   10668:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1066c:	9305      	str	r3, [sp, #20]
	params.len = len;
   1066e:	f8ad 200c 	strh.w	r2, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
   10672:	f005 ff9f 	bl	165b4 <bt_gatt_notify_cb>
}
   10676:	b007      	add	sp, #28
   10678:	f85d fb04 	ldr.w	pc, [sp], #4
   1067c:	00020fd4 	.word	0x00020fd4

00010680 <initBLE>:
		battery_level = 100U;
	}

	bt_bas_set_battery_level(battery_level);
}
extern void initBLE(){
   10680:	b507      	push	{r0, r1, r2, lr}
     bt_enable(NULL);
   10682:	2000      	movs	r0, #0
   10684:	f003 fdc8 	bl	14218 <bt_enable>
	printk("Bluetooth initialized\n");
   10688:	480c      	ldr	r0, [pc, #48]	; (106bc <initBLE+0x3c>)
   1068a:	f00c fcb1 	bl	1cff0 <printk>
	err = bt_le_adv_start(&adv_param_normal, ad, ARRAY_SIZE(ad), NULL, 0);
   1068e:	2300      	movs	r3, #0
   10690:	490b      	ldr	r1, [pc, #44]	; (106c0 <initBLE+0x40>)
   10692:	480c      	ldr	r0, [pc, #48]	; (106c4 <initBLE+0x44>)
   10694:	9300      	str	r3, [sp, #0]
   10696:	2203      	movs	r2, #3
   10698:	f004 f9b4 	bl	14a04 <bt_le_adv_start>
	if (err) {
   1069c:	4601      	mov	r1, r0
   1069e:	b140      	cbz	r0, 106b2 <initBLE+0x32>
		printk("Advertising failed to start (err %d)\n", err);
   106a0:	4809      	ldr	r0, [pc, #36]	; (106c8 <initBLE+0x48>)
   106a2:	f00c fca5 	bl	1cff0 <printk>
     bt_ready();
     bt_conn_cb_register(&conn_callbacks);
   106a6:	4809      	ldr	r0, [pc, #36]	; (106cc <initBLE+0x4c>)
};
   106a8:	b003      	add	sp, #12
   106aa:	f85d eb04 	ldr.w	lr, [sp], #4
     bt_conn_cb_register(&conn_callbacks);
   106ae:	f004 bcd9 	b.w	15064 <bt_conn_cb_register>
	printk("Advertising successfully started\n");
   106b2:	4807      	ldr	r0, [pc, #28]	; (106d0 <initBLE+0x50>)
   106b4:	f00c fc9c 	bl	1cff0 <printk>
   106b8:	e7f5      	b.n	106a6 <initBLE+0x26>
   106ba:	bf00      	nop
   106bc:	00021a98 	.word	0x00021a98
   106c0:	00020fa8 	.word	0x00020fa8
   106c4:	00020fc0 	.word	0x00020fc0
   106c8:	00021aaf 	.word	0x00021aaf
   106cc:	20000508 	.word	0x20000508
   106d0:	00021ad5 	.word	0x00021ad5

000106d4 <sendData>:


extern void sendData(uint8_t ID, float* DATA,uint8_t LEN){
	if(ID == SENSOR_IMU_ACC_ID){
   106d4:	2802      	cmp	r0, #2
   106d6:	d102      	bne.n	106de <sendData+0xa>
		bt_gatt_notify_uuid(NULL, &icm_uuid_acc.uuid,&phyphoxGATT.attrs[0],DATA,LEN);
   106d8:	4805      	ldr	r0, [pc, #20]	; (106f0 <sendData+0x1c>)
	if(ID == SENSOR_IMU_GYR_ID){
		bt_gatt_notify_uuid(NULL, &icm_uuid_gyr.uuid,&phyphoxGATT.attrs[0],DATA,LEN);
		return;
	}
	if(ID == SENSOR_BMP384_ID){
		bt_gatt_notify_uuid(NULL, &bmp_uuid.uuid,&phyphoxGATT.attrs[0],DATA,LEN);
   106da:	f7ff bfbd 	b.w	10658 <bt_gatt_notify_uuid.constprop.0>
	if(ID == SENSOR_IMU_GYR_ID){
   106de:	2803      	cmp	r0, #3
   106e0:	d101      	bne.n	106e6 <sendData+0x12>
		bt_gatt_notify_uuid(NULL, &icm_uuid_gyr.uuid,&phyphoxGATT.attrs[0],DATA,LEN);
   106e2:	4804      	ldr	r0, [pc, #16]	; (106f4 <sendData+0x20>)
   106e4:	e7f9      	b.n	106da <sendData+0x6>
	if(ID == SENSOR_BMP384_ID){
   106e6:	2801      	cmp	r0, #1
   106e8:	d101      	bne.n	106ee <sendData+0x1a>
		bt_gatt_notify_uuid(NULL, &bmp_uuid.uuid,&phyphoxGATT.attrs[0],DATA,LEN);
   106ea:	4803      	ldr	r0, [pc, #12]	; (106f8 <sendData+0x24>)
   106ec:	e7f5      	b.n	106da <sendData+0x6>
		return;
	}	
};
   106ee:	4770      	bx	lr
   106f0:	20000809 	.word	0x20000809
   106f4:	2000081a 	.word	0x2000081a
   106f8:	200007d6 	.word	0x200007d6

000106fc <printMLX>:
	k_work_submit(&work_mlx);

}
extern void printMLX(){
    float x,y,z;
    mlx_readMeasurement(&mlxData.x,&mlxData.y,&mlxData.z,mlxdev);
   106fc:	4a03      	ldr	r2, [pc, #12]	; (1070c <printMLX+0x10>)
   106fe:	4b04      	ldr	r3, [pc, #16]	; (10710 <printMLX+0x14>)
   10700:	1f11      	subs	r1, r2, #4
   10702:	681b      	ldr	r3, [r3, #0]
   10704:	f1a2 0008 	sub.w	r0, r2, #8
   10708:	f000 bcfa 	b.w	11100 <mlx_readMeasurement>
   1070c:	20001dcc 	.word	0x20001dcc
   10710:	20001de0 	.word	0x20001de0

00010714 <mlx_int1_triggered>:
	k_work_submit(&work_mlx);
   10714:	4801      	ldr	r0, [pc, #4]	; (1071c <mlx_int1_triggered+0x8>)
   10716:	f008 bd73 	b.w	19200 <k_work_submit>
   1071a:	bf00      	nop
   1071c:	20001de4 	.word	0x20001de4

00010720 <initMLX>:
extern void initMLX(struct device *i2c_dev){
   10720:	b510      	push	{r4, lr}
   10722:	4604      	mov	r4, r0
    	mlx_init(i2c_dev);
   10724:	f00c fbfe 	bl	1cf24 <mlx_init>
        mlxdev = i2c_dev;
   10728:	4b01      	ldr	r3, [pc, #4]	; (10730 <initMLX+0x10>)
   1072a:	601c      	str	r4, [r3, #0]
}
   1072c:	bd10      	pop	{r4, pc}
   1072e:	bf00      	nop
   10730:	20001de0 	.word	0x20001de0

00010734 <init_Interrupt_MLX>:
	if(PRINT_SENSOR_DATA){
    	//printk("MLX: x: %f y: %f z: %f \n",mlxData.x,mlxData.y,mlxData.z);
	}
}

int8_t init_Interrupt_MLX(){
   10734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int8_t returnValue;

	k_work_init(&work_mlx, printMLX);
   10736:	4923      	ldr	r1, [pc, #140]	; (107c4 <init_Interrupt_MLX+0x90>)
   10738:	4823      	ldr	r0, [pc, #140]	; (107c8 <init_Interrupt_MLX+0x94>)
   1073a:	f00f fe59 	bl	203f0 <k_work_init>
   1073e:	4d23      	ldr	r5, [pc, #140]	; (107cc <init_Interrupt_MLX+0x98>)
   10740:	4628      	mov	r0, r5
   10742:	f00f fc23 	bl	1ff8c <z_device_ready>
   10746:	462f      	mov	r7, r5
   10748:	b1a0      	cbz	r0, 10774 <init_Interrupt_MLX+0x40>
	struct gpio_driver_data *data =
   1074a:	692a      	ldr	r2, [r5, #16]
	const struct gpio_driver_api *api =
   1074c:	68ae      	ldr	r6, [r5, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1074e:	6813      	ldr	r3, [r2, #0]
   10750:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   10754:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   10756:	210f      	movs	r1, #15
   10758:	6833      	ldr	r3, [r6, #0]
   1075a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1075e:	4628      	mov	r0, r5
   10760:	4798      	blx	r3
		printk("Error: button device %s is not ready\n",
		       mlx_int1.port->name);
		return 1;
	}

	returnValue = gpio_pin_configure_dt(&mlx_int1, GPIO_INPUT);
   10762:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   10764:	b16c      	cbz	r4, 10782 <init_Interrupt_MLX+0x4e>
		printk("Error %d: failed to configure %s pin %d\n",
   10766:	682a      	ldr	r2, [r5, #0]
   10768:	4819      	ldr	r0, [pc, #100]	; (107d0 <init_Interrupt_MLX+0x9c>)
   1076a:	230f      	movs	r3, #15
   1076c:	4621      	mov	r1, r4
		return returnValue;
	}

	returnValue = gpio_pin_interrupt_configure_dt(&mlx_int1,GPIO_INT_EDGE_RISING);
	if (returnValue != 0) {
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   1076e:	f00c fc3f 	bl	1cff0 <printk>
			returnValue, mlx_int1.port->name, mlx_int1.pin);
		return returnValue;
   10772:	e004      	b.n	1077e <init_Interrupt_MLX+0x4a>
		printk("Error: button device %s is not ready\n",
   10774:	6829      	ldr	r1, [r5, #0]
   10776:	4817      	ldr	r0, [pc, #92]	; (107d4 <init_Interrupt_MLX+0xa0>)
   10778:	f00c fc3a 	bl	1cff0 <printk>
		return 1;
   1077c:	2401      	movs	r4, #1
	gpio_init_callback(&mlx_int1_cb_data, mlx_int1_triggered, BIT(mlx_int1.pin));
	gpio_add_callback(mlx_int1.port, &mlx_int1_cb_data);
	printk("Set up mlx_int1 at %s pin %d\n", mlx_int1.port->name, mlx_int1.pin);

    return returnValue;
}
   1077e:	4620      	mov	r0, r4
   10780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   10782:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   10786:	69b4      	ldr	r4, [r6, #24]
   10788:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
   1078c:	210f      	movs	r1, #15
   1078e:	4628      	mov	r0, r5
   10790:	47a0      	blx	r4
	returnValue = gpio_pin_interrupt_configure_dt(&mlx_int1,GPIO_INT_EDGE_RISING);
   10792:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   10794:	b124      	cbz	r4, 107a0 <init_Interrupt_MLX+0x6c>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   10796:	682a      	ldr	r2, [r5, #0]
   10798:	480f      	ldr	r0, [pc, #60]	; (107d8 <init_Interrupt_MLX+0xa4>)
   1079a:	230f      	movs	r3, #15
   1079c:	4621      	mov	r1, r4
   1079e:	e7e6      	b.n	1076e <init_Interrupt_MLX+0x3a>
	callback->handler = handler;
   107a0:	490e      	ldr	r1, [pc, #56]	; (107dc <init_Interrupt_MLX+0xa8>)
   107a2:	4b0f      	ldr	r3, [pc, #60]	; (107e0 <init_Interrupt_MLX+0xac>)
   107a4:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   107a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   107aa:	608b      	str	r3, [r1, #8]
	if (api->manage_callback == NULL) {
   107ac:	69f3      	ldr	r3, [r6, #28]
   107ae:	b113      	cbz	r3, 107b6 <init_Interrupt_MLX+0x82>
	return api->manage_callback(port, callback, true);
   107b0:	2201      	movs	r2, #1
   107b2:	4628      	mov	r0, r5
   107b4:	4798      	blx	r3
	printk("Set up mlx_int1 at %s pin %d\n", mlx_int1.port->name, mlx_int1.pin);
   107b6:	6839      	ldr	r1, [r7, #0]
   107b8:	480a      	ldr	r0, [pc, #40]	; (107e4 <init_Interrupt_MLX+0xb0>)
   107ba:	220f      	movs	r2, #15
   107bc:	f00c fc18 	bl	1cff0 <printk>
    return returnValue;
   107c0:	e7dd      	b.n	1077e <init_Interrupt_MLX+0x4a>
   107c2:	bf00      	nop
   107c4:	000106fd 	.word	0x000106fd
   107c8:	20001de4 	.word	0x20001de4
   107cc:	00020c84 	.word	0x00020c84
   107d0:	000219a4 	.word	0x000219a4
   107d4:	00021af7 	.word	0x00021af7
   107d8:	000219cd 	.word	0x000219cd
   107dc:	20001dd4 	.word	0x20001dd4
   107e0:	00010715 	.word	0x00010715
   107e4:	00021b1d 	.word	0x00021b1d

000107e8 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_dev *dev)
{
   107e8:	b570      	push	{r4, r5, r6, lr}
   107ea:	4605      	mov	r5, r0
   107ec:	b092      	sub	sp, #72	; 0x48
     * be considered in the sum. */
    uint32_t meas_t = 234;
    uint32_t meas_t_p = 0;

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
   107ee:	4921      	ldr	r1, [pc, #132]	; (10874 <validate_osr_and_odr_settings+0x8c>)
   107f0:	2248      	movs	r2, #72	; 0x48
   107f2:	4668      	mov	r0, sp
   107f4:	f010 f941 	bl	20a7a <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (dev->settings.press_en)
   107f8:	f895 40b1 	ldrb.w	r4, [r5, #177]	; 0xb1
   107fc:	b16c      	cbz	r4, 1081a <validate_osr_and_odr_settings+0x32>
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_dev *dev)
{
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = dev->settings.odr_filter;
   107fe:	f895 40b3 	ldrb.w	r4, [r5, #179]	; 0xb3
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
    float pow_output = 1;
   10802:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000

    while (power != 0)
   10806:	bb44      	cbnz	r4, 1085a <validate_osr_and_odr_settings+0x72>
    press_meas_t = (BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
   10808:	491b      	ldr	r1, [pc, #108]	; (10878 <validate_osr_and_odr_settings+0x90>)
   1080a:	f7f0 fa2d 	bl	c68 <__aeabi_fmul>
   1080e:	491b      	ldr	r1, [pc, #108]	; (1087c <validate_osr_and_odr_settings+0x94>)
   10810:	f7f0 f922 	bl	a58 <__addsf3>
   10814:	f7f0 fb78 	bl	f08 <__aeabi_f2uiz>
   10818:	4604      	mov	r4, r0
    if (dev->settings.temp_en)
   1081a:	f895 30b2 	ldrb.w	r3, [r5, #178]	; 0xb2
   1081e:	b16b      	cbz	r3, 1083c <validate_osr_and_odr_settings+0x54>
    struct bmp3_odr_filter_settings odr_filter = dev->settings.odr_filter;
   10820:	f895 60b4 	ldrb.w	r6, [r5, #180]	; 0xb4
    float pow_output = 1;
   10824:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    while (power != 0)
   10828:	b9ee      	cbnz	r6, 10866 <validate_osr_and_odr_settings+0x7e>
    temp_meas_t = (BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
   1082a:	4913      	ldr	r1, [pc, #76]	; (10878 <validate_osr_and_odr_settings+0x90>)
   1082c:	f7f0 fa1c 	bl	c68 <__aeabi_fmul>
   10830:	4913      	ldr	r1, [pc, #76]	; (10880 <validate_osr_and_odr_settings+0x98>)
   10832:	f7f0 f911 	bl	a58 <__addsf3>
   10836:	f7f0 fb67 	bl	f08 <__aeabi_f2uiz>
        meas_t_p += calculate_temp_meas_time(dev);
   1083a:	4404      	add	r4, r0
    rslt = verify_meas_time_and_odr_duration(meas_t, odr[dev->settings.odr_filter.odr]);
   1083c:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
   10840:	aa12      	add	r2, sp, #72	; 0x48
   10842:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    meas_t += meas_t_p;
   10846:	34ea      	adds	r4, #234	; 0xea
    if (meas_t < odr_duration)
   10848:	f853 3c48 	ldr.w	r3, [r3, #-72]
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
   1084c:	42a3      	cmp	r3, r4
}
   1084e:	bf94      	ite	ls
   10850:	f06f 0002 	mvnls.w	r0, #2
   10854:	2000      	movhi	r0, #0
   10856:	b012      	add	sp, #72	; 0x48
   10858:	bd70      	pop	{r4, r5, r6, pc}
    {
        pow_output = (float) base * pow_output;
   1085a:	4601      	mov	r1, r0
        power--;
   1085c:	3c01      	subs	r4, #1
        pow_output = (float) base * pow_output;
   1085e:	f7f0 f8fb 	bl	a58 <__addsf3>
        power--;
   10862:	b2e4      	uxtb	r4, r4
   10864:	e7cf      	b.n	10806 <validate_osr_and_odr_settings+0x1e>
        pow_output = (float) base * pow_output;
   10866:	4601      	mov	r1, r0
        power--;
   10868:	3e01      	subs	r6, #1
        pow_output = (float) base * pow_output;
   1086a:	f7f0 f8f5 	bl	a58 <__addsf3>
        power--;
   1086e:	b2f6      	uxtb	r6, r6
   10870:	e7da      	b.n	10828 <validate_osr_and_odr_settings+0x40>
   10872:	bf00      	nop
   10874:	00020f00 	.word	0x00020f00
   10878:	44fa0000 	.word	0x44fa0000
   1087c:	43c40000 	.word	0x43c40000
   10880:	439c8000 	.word	0x439c8000

00010884 <bmp3_set_sensor_settings>:
{
   10884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10886:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
   10888:	4608      	mov	r0, r1
{
   1088a:	460d      	mov	r5, r1
    rslt = null_ptr_check(dev);
   1088c:	f00b ff7c 	bl	1c788 <null_ptr_check>
    if (rslt == BMP3_OK)
   10890:	2800      	cmp	r0, #0
   10892:	f040 811d 	bne.w	10ad0 <bmp3_set_sensor_settings+0x24c>
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
    uint8_t settings_changed = FALSE;

    if (sub_settings & desired_settings)
   10896:	f014 0f06 	tst.w	r4, #6
   1089a:	d029      	beq.n	108f0 <bmp3_set_sensor_settings+0x6c>
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1089c:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   1089e:	460b      	mov	r3, r1
   108a0:	2201      	movs	r2, #1
   108a2:	a901      	add	r1, sp, #4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   108a4:	f88d 0000 	strb.w	r0, [sp]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   108a8:	f00c f86a 	bl	1c980 <bmp3_get_regs>
    if (rslt == BMP3_OK)
   108ac:	bb00      	cbnz	r0, 108f0 <bmp3_set_sensor_settings+0x6c>
        if (desired_settings & BMP3_SEL_PRESS_EN)
   108ae:	07a7      	lsls	r7, r4, #30
   108b0:	d50a      	bpl.n	108c8 <bmp3_set_sensor_settings+0x44>
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, dev->settings.press_en);
   108b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   108b6:	f895 20b1 	ldrb.w	r2, [r5, #177]	; 0xb1
   108ba:	f023 0301 	bic.w	r3, r3, #1
   108be:	f002 0201 	and.w	r2, r2, #1
   108c2:	4313      	orrs	r3, r2
   108c4:	f88d 3004 	strb.w	r3, [sp, #4]
        if (desired_settings & BMP3_SEL_TEMP_EN)
   108c8:	0766      	lsls	r6, r4, #29
   108ca:	d50b      	bpl.n	108e4 <bmp3_set_sensor_settings+0x60>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, dev->settings.temp_en);
   108cc:	f895 30b2 	ldrb.w	r3, [r5, #178]	; 0xb2
   108d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
   108d4:	005b      	lsls	r3, r3, #1
   108d6:	f003 0302 	and.w	r3, r3, #2
   108da:	f022 0202 	bic.w	r2, r2, #2
   108de:	4313      	orrs	r3, r2
   108e0:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
   108e4:	462b      	mov	r3, r5
   108e6:	2201      	movs	r2, #1
   108e8:	a901      	add	r1, sp, #4
   108ea:	4668      	mov	r0, sp
   108ec:	f00c f888 	bl	1ca00 <bmp3_set_regs>
    if (sub_settings & desired_settings)
   108f0:	f014 0ff0 	tst.w	r4, #240	; 0xf0
   108f4:	d071      	beq.n	109da <bmp3_set_sensor_settings+0x156>
        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings) && (!rslt))
   108f6:	2800      	cmp	r0, #0
   108f8:	d16f      	bne.n	109da <bmp3_set_sensor_settings+0x156>
    uint8_t reg_addr[3] = { 0 };
   108fa:	4b77      	ldr	r3, [pc, #476]	; (10ad8 <bmp3_set_sensor_settings+0x254>)
   108fc:	f88d 0002 	strb.w	r0, [sp, #2]
   10900:	881b      	ldrh	r3, [r3, #0]
   10902:	f8ad 3000 	strh.w	r3, [sp]
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
   10906:	2204      	movs	r2, #4
   10908:	462b      	mov	r3, r5
   1090a:	eb0d 0102 	add.w	r1, sp, r2
   1090e:	201c      	movs	r0, #28
   10910:	f00c f836 	bl	1c980 <bmp3_get_regs>
    if (rslt == BMP3_OK)
   10914:	2800      	cmp	r0, #0
   10916:	d160      	bne.n	109da <bmp3_set_sensor_settings+0x156>
    if (sub_settings & desired_settings)
   10918:	f014 0f30 	tst.w	r4, #48	; 0x30
   1091c:	f000 80da 	beq.w	10ad4 <bmp3_set_sensor_settings+0x250>
        if (settings & BMP3_SEL_PRESS_OS)
   10920:	06e0      	lsls	r0, r4, #27
    struct bmp3_odr_filter_settings osr_settings = dev->settings.odr_filter;
   10922:	f895 20b4 	ldrb.w	r2, [r5, #180]	; 0xb4
        if (settings & BMP3_SEL_PRESS_OS)
   10926:	d50a      	bpl.n	1093e <bmp3_set_sensor_settings+0xba>
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
   10928:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1092c:	f895 10b3 	ldrb.w	r1, [r5, #179]	; 0xb3
   10930:	f023 0307 	bic.w	r3, r3, #7
   10934:	f001 0107 	and.w	r1, r1, #7
   10938:	430b      	orrs	r3, r1
   1093a:	f88d 3004 	strb.w	r3, [sp, #4]
        if (settings & BMP3_SEL_TEMP_OS)
   1093e:	06a1      	lsls	r1, r4, #26
   10940:	d509      	bpl.n	10956 <bmp3_set_sensor_settings+0xd2>
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
   10942:	f89d 3004 	ldrb.w	r3, [sp, #4]
   10946:	00d2      	lsls	r2, r2, #3
   10948:	f023 0338 	bic.w	r3, r3, #56	; 0x38
   1094c:	f002 0238 	and.w	r2, r2, #56	; 0x38
   10950:	4313      	orrs	r3, r2
   10952:	f88d 3004 	strb.w	r3, [sp, #4]
        addr[*len] = BMP3_REG_OSR;
   10956:	231c      	movs	r3, #28
   10958:	f88d 3000 	strb.w	r3, [sp]
}
   1095c:	2601      	movs	r6, #1
    if (sub_settings & desired_settings)
   1095e:	0622      	lsls	r2, r4, #24
   10960:	d518      	bpl.n	10994 <bmp3_set_sensor_settings+0x110>
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
   10962:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
   10966:	2b11      	cmp	r3, #17
        osr_settings->odr = BMP3_ODR_0_001_HZ;
   10968:	bf84      	itt	hi
   1096a:	2311      	movhi	r3, #17
   1096c:	f885 30b6 	strbhi.w	r3, [r5, #182]	; 0xb6
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
   10970:	ab02      	add	r3, sp, #8
   10972:	1999      	adds	r1, r3, r6
   10974:	f895 20b6 	ldrb.w	r2, [r5, #182]	; 0xb6
   10978:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1097c:	f002 021f 	and.w	r2, r2, #31
   10980:	f023 031f 	bic.w	r3, r3, #31
   10984:	4313      	orrs	r3, r2
   10986:	f801 3c04 	strb.w	r3, [r1, #-4]
    (*len)++;
   1098a:	3601      	adds	r6, #1
    addr[*len] = BMP3_REG_ODR;
   1098c:	231d      	movs	r3, #29
   1098e:	f801 3c08 	strb.w	r3, [r1, #-8]
    (*len)++;
   10992:	b2f6      	uxtb	r6, r6
    if (sub_settings & desired_settings)
   10994:	0663      	lsls	r3, r4, #25
   10996:	d512      	bpl.n	109be <bmp3_set_sensor_settings+0x13a>
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
   10998:	ab02      	add	r3, sp, #8
   1099a:	1999      	adds	r1, r3, r6
   1099c:	f895 30b5 	ldrb.w	r3, [r5, #181]	; 0xb5
   109a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   109a4:	005b      	lsls	r3, r3, #1
   109a6:	f003 030e 	and.w	r3, r3, #14
   109aa:	f022 020e 	bic.w	r2, r2, #14
   109ae:	4313      	orrs	r3, r2
   109b0:	f801 3c04 	strb.w	r3, [r1, #-4]
    (*len)++;
   109b4:	3601      	adds	r6, #1
    addr[*len] = BMP3_REG_CONFIG;
   109b6:	231f      	movs	r3, #31
   109b8:	f801 3c08 	strb.w	r3, [r1, #-8]
    (*len)++;
   109bc:	b2f6      	uxtb	r6, r6
        if (dev->settings.op_mode == BMP3_MODE_NORMAL)
   109be:	f895 30b0 	ldrb.w	r3, [r5, #176]	; 0xb0
   109c2:	2b03      	cmp	r3, #3
   109c4:	d103      	bne.n	109ce <bmp3_set_sensor_settings+0x14a>
            rslt = validate_osr_and_odr_settings(dev);
   109c6:	4628      	mov	r0, r5
   109c8:	f7ff ff0e 	bl	107e8 <validate_osr_and_odr_settings>
        if (rslt == BMP3_OK)
   109cc:	b928      	cbnz	r0, 109da <bmp3_set_sensor_settings+0x156>
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
   109ce:	462b      	mov	r3, r5
   109d0:	4632      	mov	r2, r6
   109d2:	a901      	add	r1, sp, #4
   109d4:	4668      	mov	r0, sp
   109d6:	f00c f813 	bl	1ca00 <bmp3_set_regs>
    if (sub_settings & desired_settings)
   109da:	f414 6fe1 	tst.w	r4, #1800	; 0x708
   109de:	d048      	beq.n	10a72 <bmp3_set_sensor_settings+0x1ee>
        if (are_settings_changed(BMP3_INT_CTRL, desired_settings) && (!rslt))
   109e0:	2800      	cmp	r0, #0
   109e2:	d146      	bne.n	10a72 <bmp3_set_sensor_settings+0x1ee>
    reg_addr = BMP3_REG_INT_CTRL;
   109e4:	2019      	movs	r0, #25
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   109e6:	462b      	mov	r3, r5
   109e8:	2201      	movs	r2, #1
   109ea:	4669      	mov	r1, sp
    reg_addr = BMP3_REG_INT_CTRL;
   109ec:	f88d 0004 	strb.w	r0, [sp, #4]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   109f0:	f00b ffc6 	bl	1c980 <bmp3_get_regs>
    if (rslt == BMP3_OK)
   109f4:	2800      	cmp	r0, #0
   109f6:	d13c      	bne.n	10a72 <bmp3_set_sensor_settings+0x1ee>
        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
   109f8:	05e7      	lsls	r7, r4, #23
        int_settings = dev->settings.int_settings;
   109fa:	f895 00b8 	ldrb.w	r0, [r5, #184]	; 0xb8
   109fe:	f895 10b9 	ldrb.w	r1, [r5, #185]	; 0xb9
   10a02:	f895 20ba 	ldrb.w	r2, [r5, #186]	; 0xba
        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
   10a06:	d50a      	bpl.n	10a1e <bmp3_set_sensor_settings+0x19a>
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
   10a08:	f89d 3000 	ldrb.w	r3, [sp]
   10a0c:	f895 60b7 	ldrb.w	r6, [r5, #183]	; 0xb7
   10a10:	f023 0301 	bic.w	r3, r3, #1
   10a14:	f006 0601 	and.w	r6, r6, #1
   10a18:	4333      	orrs	r3, r6
   10a1a:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_LEVEL)
   10a1e:	05a6      	lsls	r6, r4, #22
   10a20:	d509      	bpl.n	10a36 <bmp3_set_sensor_settings+0x1b2>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
   10a22:	f89d 3000 	ldrb.w	r3, [sp]
   10a26:	0040      	lsls	r0, r0, #1
   10a28:	f023 0302 	bic.w	r3, r3, #2
   10a2c:	f000 0002 	and.w	r0, r0, #2
   10a30:	4303      	orrs	r3, r0
   10a32:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_LATCH)
   10a36:	0560      	lsls	r0, r4, #21
   10a38:	d509      	bpl.n	10a4e <bmp3_set_sensor_settings+0x1ca>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
   10a3a:	f89d 3000 	ldrb.w	r3, [sp]
   10a3e:	0089      	lsls	r1, r1, #2
   10a40:	f023 0304 	bic.w	r3, r3, #4
   10a44:	f001 0104 	and.w	r1, r1, #4
   10a48:	430b      	orrs	r3, r1
   10a4a:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_DRDY_EN)
   10a4e:	0721      	lsls	r1, r4, #28
   10a50:	d509      	bpl.n	10a66 <bmp3_set_sensor_settings+0x1e2>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
   10a52:	f89d 3000 	ldrb.w	r3, [sp]
   10a56:	0192      	lsls	r2, r2, #6
   10a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   10a5c:	f002 0240 	and.w	r2, r2, #64	; 0x40
   10a60:	4313      	orrs	r3, r2
   10a62:	f88d 3000 	strb.w	r3, [sp]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
   10a66:	462b      	mov	r3, r5
   10a68:	2201      	movs	r2, #1
   10a6a:	4669      	mov	r1, sp
   10a6c:	a801      	add	r0, sp, #4
   10a6e:	f00b ffc7 	bl	1ca00 <bmp3_set_regs>
    if (sub_settings & desired_settings)
   10a72:	f414 5fc0 	tst.w	r4, #6144	; 0x1800
   10a76:	d02b      	beq.n	10ad0 <bmp3_set_sensor_settings+0x24c>
        if (are_settings_changed(BMP3_ADV_SETT, desired_settings) && (!rslt))
   10a78:	bb50      	cbnz	r0, 10ad0 <bmp3_set_sensor_settings+0x24c>
    reg_addr = BMP3_REG_IF_CONF;
   10a7a:	201a      	movs	r0, #26
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   10a7c:	462b      	mov	r3, r5
   10a7e:	2201      	movs	r2, #1
   10a80:	a901      	add	r1, sp, #4
    struct bmp3_adv_settings adv_settings = dev->settings.adv_settings;
   10a82:	f895 70bb 	ldrb.w	r7, [r5, #187]	; 0xbb
   10a86:	f895 60bc 	ldrb.w	r6, [r5, #188]	; 0xbc
    reg_addr = BMP3_REG_IF_CONF;
   10a8a:	f88d 0000 	strb.w	r0, [sp]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   10a8e:	f00b ff77 	bl	1c980 <bmp3_get_regs>
    if (rslt == BMP3_OK)
   10a92:	b9e8      	cbnz	r0, 10ad0 <bmp3_set_sensor_settings+0x24c>
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
   10a94:	0522      	lsls	r2, r4, #20
   10a96:	d509      	bpl.n	10aac <bmp3_set_sensor_settings+0x228>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
   10a98:	f89d 3004 	ldrb.w	r3, [sp, #4]
   10a9c:	007f      	lsls	r7, r7, #1
   10a9e:	f023 0302 	bic.w	r3, r3, #2
   10aa2:	f007 0702 	and.w	r7, r7, #2
   10aa6:	433b      	orrs	r3, r7
   10aa8:	f88d 3004 	strb.w	r3, [sp, #4]
        if (desired_settings & BMP3_SEL_I2C_WDT)
   10aac:	04e3      	lsls	r3, r4, #19
   10aae:	d509      	bpl.n	10ac4 <bmp3_set_sensor_settings+0x240>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
   10ab0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   10ab4:	00b6      	lsls	r6, r6, #2
   10ab6:	f023 0304 	bic.w	r3, r3, #4
   10aba:	f006 0604 	and.w	r6, r6, #4
   10abe:	4333      	orrs	r3, r6
   10ac0:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
   10ac4:	462b      	mov	r3, r5
   10ac6:	2201      	movs	r2, #1
   10ac8:	a901      	add	r1, sp, #4
   10aca:	4668      	mov	r0, sp
   10acc:	f00b ff98 	bl	1ca00 <bmp3_set_regs>
}
   10ad0:	b003      	add	sp, #12
   10ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t len = 0;
   10ad4:	4606      	mov	r6, r0
   10ad6:	e742      	b.n	1095e <bmp3_set_sensor_settings+0xda>
   10ad8:	00020f48 	.word	0x00020f48

00010adc <bmp3_init>:
{
   10adc:	b530      	push	{r4, r5, lr}
   10ade:	b089      	sub	sp, #36	; 0x24
    uint8_t chip_id = 0;
   10ae0:	2300      	movs	r3, #0
{
   10ae2:	4604      	mov	r4, r0
    uint8_t chip_id = 0;
   10ae4:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_ptr_check(dev);
   10ae8:	f00b fe4e 	bl	1c788 <null_ptr_check>
    if (rslt == BMP3_OK)
   10aec:	4605      	mov	r5, r0
   10aee:	2800      	cmp	r0, #0
   10af0:	f040 80f6 	bne.w	10ce0 <bmp3_init+0x204>
        if (dev->intf != BMP3_I2C_INTF)
   10af4:	7a23      	ldrb	r3, [r4, #8]
   10af6:	3b01      	subs	r3, #1
   10af8:	bf18      	it	ne
   10afa:	2301      	movne	r3, #1
   10afc:	72a3      	strb	r3, [r4, #10]
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
   10afe:	2201      	movs	r2, #1
   10b00:	4623      	mov	r3, r4
   10b02:	f10d 0107 	add.w	r1, sp, #7
   10b06:	f00b ff3b 	bl	1c980 <bmp3_get_regs>
        if (rslt == BMP3_OK)
   10b0a:	4605      	mov	r5, r0
   10b0c:	2800      	cmp	r0, #0
   10b0e:	f040 80e7 	bne.w	10ce0 <bmp3_init+0x204>
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
   10b12:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10b16:	2b50      	cmp	r3, #80	; 0x50
   10b18:	d002      	beq.n	10b20 <bmp3_init+0x44>
   10b1a:	2b60      	cmp	r3, #96	; 0x60
   10b1c:	f040 80e3 	bne.w	10ce6 <bmp3_init+0x20a>
                dev->chip_id = chip_id;
   10b20:	7023      	strb	r3, [r4, #0]
                rslt = bmp3_soft_reset(dev);
   10b22:	4620      	mov	r0, r4
   10b24:	f00b ffda 	bl	1cadc <bmp3_soft_reset>
                if (rslt == BMP3_OK)
   10b28:	4605      	mov	r5, r0
   10b2a:	2800      	cmp	r0, #0
   10b2c:	f040 80d8 	bne.w	10ce0 <bmp3_init+0x204>
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
   10b30:	4601      	mov	r1, r0
   10b32:	9002      	str	r0, [sp, #8]
   10b34:	2211      	movs	r2, #17
   10b36:	a803      	add	r0, sp, #12
   10b38:	f00f ffda 	bl	20af0 <memset>
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
   10b3c:	2215      	movs	r2, #21
   10b3e:	4623      	mov	r3, r4
   10b40:	a902      	add	r1, sp, #8
   10b42:	2031      	movs	r0, #49	; 0x31
   10b44:	f00b ff1c 	bl	1c980 <bmp3_get_regs>
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
   10b48:	f89d 3008 	ldrb.w	r3, [sp, #8]
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
   10b4c:	4605      	mov	r5, r0
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
   10b4e:	f89d 0009 	ldrb.w	r0, [sp, #9]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
   10b52:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   10b56:	f7ef fc15 	bl	384 <__aeabi_ui2d>
   10b5a:	4b64      	ldr	r3, [pc, #400]	; (10cec <bmp3_init+0x210>)
   10b5c:	2200      	movs	r2, #0
   10b5e:	f7ef fc8b 	bl	478 <__aeabi_dmul>
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
   10b62:	f89d 300a 	ldrb.w	r3, [sp, #10]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
   10b66:	9a02      	ldr	r2, [sp, #8]
   10b68:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
   10b6c:	e9c4 0106 	strd	r0, r1, [r4, #24]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
   10b70:	f89d 000b 	ldrb.w	r0, [sp, #11]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
   10b74:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   10b78:	f7ef fc04 	bl	384 <__aeabi_ui2d>
   10b7c:	4b5c      	ldr	r3, [pc, #368]	; (10cf0 <bmp3_init+0x214>)
   10b7e:	2200      	movs	r2, #0
   10b80:	f7ef fc7a 	bl	478 <__aeabi_dmul>
   10b84:	e9c4 0108 	strd	r0, r1, [r4, #32]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
   10b88:	f99d 000c 	ldrsb.w	r0, [sp, #12]
   10b8c:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
   10b90:	f7ef fc08 	bl	3a4 <__aeabi_i2d>
   10b94:	2200      	movs	r2, #0
   10b96:	4b57      	ldr	r3, [pc, #348]	; (10cf4 <bmp3_init+0x218>)
   10b98:	f7ef fc6e 	bl	478 <__aeabi_dmul>
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
   10b9c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
   10ba0:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
   10ba4:	f89d 000d 	ldrb.w	r0, [sp, #13]
   10ba8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   10bac:	b200      	sxth	r0, r0
   10bae:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
   10bb2:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
   10bb6:	f7ef fbf5 	bl	3a4 <__aeabi_i2d>
   10bba:	2200      	movs	r2, #0
   10bbc:	4b4e      	ldr	r3, [pc, #312]	; (10cf8 <bmp3_init+0x21c>)
   10bbe:	f7ef fc5b 	bl	478 <__aeabi_dmul>
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
   10bc2:	f89d 3010 	ldrb.w	r3, [sp, #16]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
   10bc6:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
   10bca:	f89d 000f 	ldrb.w	r0, [sp, #15]
   10bce:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   10bd2:	b200      	sxth	r0, r0
   10bd4:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
   10bd8:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
   10bdc:	f7ef fbe2 	bl	3a4 <__aeabi_i2d>
   10be0:	4b46      	ldr	r3, [pc, #280]	; (10cfc <bmp3_init+0x220>)
   10be2:	2200      	movs	r2, #0
   10be4:	f7ef fc48 	bl	478 <__aeabi_dmul>
   10be8:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
   10bec:	f99d 0011 	ldrsb.w	r0, [sp, #17]
   10bf0:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
   10bf4:	f7ef fbd6 	bl	3a4 <__aeabi_i2d>
   10bf8:	4b41      	ldr	r3, [pc, #260]	; (10d00 <bmp3_init+0x224>)
   10bfa:	2200      	movs	r2, #0
   10bfc:	f7ef fc3c 	bl	478 <__aeabi_dmul>
   10c00:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
   10c04:	f99d 0012 	ldrsb.w	r0, [sp, #18]
   10c08:	f884 009b 	strb.w	r0, [r4, #155]	; 0x9b
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
   10c0c:	f7ef fbca 	bl	3a4 <__aeabi_i2d>
   10c10:	2200      	movs	r2, #0
   10c12:	4b3c      	ldr	r3, [pc, #240]	; (10d04 <bmp3_init+0x228>)
   10c14:	f7ef fc30 	bl	478 <__aeabi_dmul>
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
   10c18:	f89d 3014 	ldrb.w	r3, [sp, #20]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
   10c1c:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
   10c20:	f89d 0013 	ldrb.w	r0, [sp, #19]
   10c24:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   10c28:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
   10c2c:	f7ef fbaa 	bl	384 <__aeabi_ui2d>
   10c30:	2200      	movs	r2, #0
   10c32:	4b35      	ldr	r3, [pc, #212]	; (10d08 <bmp3_init+0x22c>)
   10c34:	f7ef fc20 	bl	478 <__aeabi_dmul>
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
   10c38:	f89d 3016 	ldrb.w	r3, [sp, #22]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
   10c3c:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
   10c40:	f89d 0015 	ldrb.w	r0, [sp, #21]
   10c44:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   10c48:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
   10c4c:	f7ef fb9a 	bl	384 <__aeabi_ui2d>
   10c50:	4b2e      	ldr	r3, [pc, #184]	; (10d0c <bmp3_init+0x230>)
   10c52:	2200      	movs	r2, #0
   10c54:	f7ef fc10 	bl	478 <__aeabi_dmul>
   10c58:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
   10c5c:	f99d 0017 	ldrsb.w	r0, [sp, #23]
   10c60:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
   10c64:	f7ef fb9e 	bl	3a4 <__aeabi_i2d>
   10c68:	4b29      	ldr	r3, [pc, #164]	; (10d10 <bmp3_init+0x234>)
   10c6a:	2200      	movs	r2, #0
   10c6c:	f7ef fc04 	bl	478 <__aeabi_dmul>
   10c70:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
   10c74:	f99d 0018 	ldrsb.w	r0, [sp, #24]
   10c78:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
   10c7c:	f7ef fb92 	bl	3a4 <__aeabi_i2d>
   10c80:	2200      	movs	r2, #0
   10c82:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
   10c86:	f7ef fbf7 	bl	478 <__aeabi_dmul>
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
   10c8a:	f89d 301a 	ldrb.w	r3, [sp, #26]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
   10c8e:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
   10c92:	f89d 0019 	ldrb.w	r0, [sp, #25]
   10c96:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   10c9a:	b200      	sxth	r0, r0
   10c9c:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
   10ca0:	f7ef fb80 	bl	3a4 <__aeabi_i2d>
   10ca4:	4b13      	ldr	r3, [pc, #76]	; (10cf4 <bmp3_init+0x218>)
   10ca6:	2200      	movs	r2, #0
   10ca8:	f7ef fbe6 	bl	478 <__aeabi_dmul>
   10cac:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
   10cb0:	f99d 001b 	ldrsb.w	r0, [sp, #27]
   10cb4:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
   10cb8:	f7ef fb74 	bl	3a4 <__aeabi_i2d>
   10cbc:	4b0d      	ldr	r3, [pc, #52]	; (10cf4 <bmp3_init+0x218>)
   10cbe:	2200      	movs	r2, #0
   10cc0:	f7ef fbda 	bl	478 <__aeabi_dmul>
   10cc4:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
   10cc8:	f99d 001c 	ldrsb.w	r0, [sp, #28]
   10ccc:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
   10cd0:	f7ef fb68 	bl	3a4 <__aeabi_i2d>
   10cd4:	4b0f      	ldr	r3, [pc, #60]	; (10d14 <bmp3_init+0x238>)
   10cd6:	2200      	movs	r2, #0
   10cd8:	f7ef fbce 	bl	478 <__aeabi_dmul>
   10cdc:	e9c4 0120 	strd	r0, r1, [r4, #128]	; 0x80
}
   10ce0:	4628      	mov	r0, r5
   10ce2:	b009      	add	sp, #36	; 0x24
   10ce4:	bd30      	pop	{r4, r5, pc}
                rslt = BMP3_E_DEV_NOT_FOUND;
   10ce6:	f06f 0501 	mvn.w	r5, #1
   10cea:	e7f9      	b.n	10ce0 <bmp3_init+0x204>
   10cec:	40700000 	.word	0x40700000
   10cf0:	3e100000 	.word	0x3e100000
   10cf4:	3cf00000 	.word	0x3cf00000
   10cf8:	3eb00000 	.word	0x3eb00000
   10cfc:	3e200000 	.word	0x3e200000
   10d00:	3df00000 	.word	0x3df00000
   10d04:	3da00000 	.word	0x3da00000
   10d08:	40200000 	.word	0x40200000
   10d0c:	3f900000 	.word	0x3f900000
   10d10:	3f700000 	.word	0x3f700000
   10d14:	3be00000 	.word	0x3be00000

00010d18 <sendDataBMP>:

static void app_us_delay(uint32_t period, void *intf_ptr) {
	return k_busy_wait(period);
}

extern void sendDataBMP(void){
   10d18:	b5f0      	push	{r4, r5, r6, r7, lr}
    bmpResult = bmp3_get_sensor_data(sensor_comp, &myData, &bmp388_dev);
   10d1a:	4b1b      	ldr	r3, [pc, #108]	; (10d88 <sendDataBMP+0x70>)
   10d1c:	4e1b      	ldr	r6, [pc, #108]	; (10d8c <sendDataBMP+0x74>)
   10d1e:	4a1c      	ldr	r2, [pc, #112]	; (10d90 <sendDataBMP+0x78>)
   10d20:	7818      	ldrb	r0, [r3, #0]
extern void sendDataBMP(void){
   10d22:	b085      	sub	sp, #20
    bmpResult = bmp3_get_sensor_data(sensor_comp, &myData, &bmp388_dev);
   10d24:	4631      	mov	r1, r6
   10d26:	f00b ffa0 	bl	1cc6a <bmp3_get_sensor_data>
   10d2a:	4b1a      	ldr	r3, [pc, #104]	; (10d94 <sendDataBMP+0x7c>)
   10d2c:	7018      	strb	r0, [r3, #0]
	return z_impl_k_uptime_ticks();
   10d2e:	f00f fd0c 	bl	2074a <z_impl_k_uptime_ticks>
   10d32:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   10d36:	fba0 2304 	umull	r2, r3, r0, r4
   10d3a:	fb04 3301 	mla	r3, r4, r1, r3
   10d3e:	0bd0      	lsrs	r0, r2, #15
	if(PRINT_SENSOR_DATA){
		printk("BMP: pressure: %f temp: %f\n", myData.pressure,myData.temperature);
	}
	float timestamp = k_uptime_get() /1000.0;
   10d40:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   10d44:	0bd9      	lsrs	r1, r3, #15
   10d46:	f7ef fb69 	bl	41c <__aeabi_l2d>
   10d4a:	4b13      	ldr	r3, [pc, #76]	; (10d98 <sendDataBMP+0x80>)
	bmpData.pressure = myData.pressure;
   10d4c:	4f13      	ldr	r7, [pc, #76]	; (10d9c <sendDataBMP+0x84>)
	float timestamp = k_uptime_get() /1000.0;
   10d4e:	2200      	movs	r2, #0
   10d50:	f7ef fcbc 	bl	6cc <__aeabi_ddiv>
   10d54:	f7ef fe2a 	bl	9ac <__aeabi_d2f>
   10d58:	4604      	mov	r4, r0
	bmpData.pressure = myData.pressure;
   10d5a:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
   10d5e:	f7ef fe25 	bl	9ac <__aeabi_d2f>
   10d62:	4605      	mov	r5, r0
   10d64:	6038      	str	r0, [r7, #0]
	bmpData.temperature = myData.temperature;
   10d66:	e9d6 0100 	ldrd	r0, r1, [r6]
   10d6a:	f7ef fe1f 	bl	9ac <__aeabi_d2f>
	bmpData.timestamp=timestamp;
	
	float myArray[3] = {myData.pressure,myData.temperature,timestamp};
	sendData(SENSOR_BMP384_ID, &myArray, 4*3);
   10d6e:	220c      	movs	r2, #12
	bmpData.temperature = myData.temperature;
   10d70:	6078      	str	r0, [r7, #4]
	float myArray[3] = {myData.pressure,myData.temperature,timestamp};
   10d72:	9002      	str	r0, [sp, #8]
	sendData(SENSOR_BMP384_ID, &myArray, 4*3);
   10d74:	a901      	add	r1, sp, #4
   10d76:	2001      	movs	r0, #1
	bmpData.timestamp=timestamp;
   10d78:	60bc      	str	r4, [r7, #8]
	float myArray[3] = {myData.pressure,myData.temperature,timestamp};
   10d7a:	9501      	str	r5, [sp, #4]
   10d7c:	9403      	str	r4, [sp, #12]
	sendData(SENSOR_BMP384_ID, &myArray, 4*3);
   10d7e:	f7ff fca9 	bl	106d4 <sendData>
}
   10d82:	b005      	add	sp, #20
   10d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d86:	bf00      	nop
   10d88:	2000082b 	.word	0x2000082b
   10d8c:	20001628 	.word	0x20001628
   10d90:	20001558 	.word	0x20001558
   10d94:	200030fc 	.word	0x200030fc
   10d98:	408f4000 	.word	0x408f4000
   10d9c:	20001d74 	.word	0x20001d74

00010da0 <bmpDataReady>:
static const struct gpio_dt_spec bmpInt = GPIO_DT_SPEC_GET_OR(BMP_INT, gpios,{0});
static struct gpio_callback bmpInt_cb_data;

static void bmpDataReady(const struct device *dev, struct gpio_callback *cb,uint32_t pins)
{
	k_work_submit(&work_data);
   10da0:	4801      	ldr	r0, [pc, #4]	; (10da8 <bmpDataReady+0x8>)
   10da2:	f008 ba2d 	b.w	19200 <k_work_submit>
   10da6:	bf00      	nop
   10da8:	20001e10 	.word	0x20001e10

00010dac <initBMP384>:
void initBMP384(struct device *i2c_dev){
   10dac:	b570      	push	{r4, r5, r6, lr}
	bmp388_dev.intf = BMP3_I2C_INTF;
   10dae:	4c29      	ldr	r4, [pc, #164]	; (10e54 <initBMP384+0xa8>)
	bmp388_dev.intf_rslt = bmpResult;
   10db0:	4d29      	ldr	r5, [pc, #164]	; (10e58 <initBMP384+0xac>)
	bmp388_dev.intf_ptr = i2c_dev;
   10db2:	6060      	str	r0, [r4, #4]
	bmp388_dev.intf = BMP3_I2C_INTF;
   10db4:	2301      	movs	r3, #1
   10db6:	7223      	strb	r3, [r4, #8]
	bmp388_dev.intf_rslt = bmpResult;
   10db8:	782b      	ldrb	r3, [r5, #0]
   10dba:	7263      	strb	r3, [r4, #9]
	bmp388_dev.dummy_byte = dByte;
   10dbc:	2300      	movs	r3, #0
   10dbe:	72a3      	strb	r3, [r4, #10]
	bmp388_dev.read = app_i2c_read;
   10dc0:	4b26      	ldr	r3, [pc, #152]	; (10e5c <initBMP384+0xb0>)
   10dc2:	60e3      	str	r3, [r4, #12]
	bmp388_dev.write = app_i2c_write;
   10dc4:	4b26      	ldr	r3, [pc, #152]	; (10e60 <initBMP384+0xb4>)
   10dc6:	6123      	str	r3, [r4, #16]
	bmpResult = bmp3_init(&bmp388_dev);
   10dc8:	4620      	mov	r0, r4
	bmp388_dev.delay_us = app_us_delay;
   10dca:	4b26      	ldr	r3, [pc, #152]	; (10e64 <initBMP384+0xb8>)
   10dcc:	6163      	str	r3, [r4, #20]
	bmpResult = bmp3_init(&bmp388_dev);
   10dce:	f7ff fe85 	bl	10adc <bmp3_init>
   10dd2:	4601      	mov	r1, r0
   10dd4:	7028      	strb	r0, [r5, #0]
	if(bmpResult != 0){
   10dd6:	b110      	cbz	r0, 10dde <initBMP384+0x32>
		printk("init error: %i \n",bmpResult);
   10dd8:	4823      	ldr	r0, [pc, #140]	; (10e68 <initBMP384+0xbc>)
   10dda:	f00c f909 	bl	1cff0 <printk>
    bmp388_dev.settings.int_settings.drdy_en =BMP3_ENABLE;
   10dde:	2301      	movs	r3, #1
   10de0:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
    bmp388_dev.settings.int_settings.level = BMP3_INT_PIN_ACTIVE_HIGH;
   10de4:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
    bmp388_dev.settings.press_en = BMP3_ENABLE;
   10de8:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
    bmp388_dev.settings.temp_en = BMP3_ENABLE;
   10dec:	f240 1301 	movw	r3, #257	; 0x101
   10df0:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
    bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
   10df4:	f44f 7300 	mov.w	r3, #512	; 0x200
	bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev); 
   10df8:	4916      	ldr	r1, [pc, #88]	; (10e54 <initBMP384+0xa8>)
    bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
   10dfa:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
	bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev); 
   10dfe:	f240 20fe 	movw	r0, #766	; 0x2fe
    bmp388_dev.settings.odr_filter.odr = BMP3_ODR_1_5_HZ;
   10e02:	2307      	movs	r3, #7
   10e04:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
	bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev); 
   10e08:	f7ff fd3c 	bl	10884 <bmp3_set_sensor_settings>
   10e0c:	4601      	mov	r1, r0
   10e0e:	7028      	strb	r0, [r5, #0]
	if(bmpResult != 0){
   10e10:	b978      	cbnz	r0, 10e32 <initBMP384+0x86>
        bmpResult = bmp3_set_op_mode(&bmp388_dev);
   10e12:	4810      	ldr	r0, [pc, #64]	; (10e54 <initBMP384+0xa8>)
        bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL;
   10e14:	2603      	movs	r6, #3
   10e16:	f884 60b0 	strb.w	r6, [r4, #176]	; 0xb0
        bmpResult = bmp3_set_op_mode(&bmp388_dev);
   10e1a:	f00b feb1 	bl	1cb80 <bmp3_set_op_mode>
   10e1e:	7028      	strb	r0, [r5, #0]
        if (bmpResult == BMP3_SENSOR_OK)
   10e20:	b178      	cbz	r0, 10e42 <initBMP384+0x96>
extern void submitConfigBMP(){
	k_work_submit(&work_config);
};
extern uint8_t sleepBMP(bool SLEEP){
	if(SLEEP){
		bmp388_dev.settings.op_mode = BMP3_MODE_SLEEP;
   10e22:	2300      	movs	r3, #0
		return bmp3_set_op_mode(&bmp388_dev);
   10e24:	480b      	ldr	r0, [pc, #44]	; (10e54 <initBMP384+0xa8>)
		bmp388_dev.settings.op_mode = BMP3_MODE_SLEEP;
   10e26:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
		return bmp3_set_op_mode(&bmp388_dev);
   10e2a:	f00b fea9 	bl	1cb80 <bmp3_set_op_mode>
	bmpResult = sleepBMP(true);
   10e2e:	7028      	strb	r0, [r5, #0]
}
   10e30:	bd70      	pop	{r4, r5, r6, pc}
		printk("set settings error: %i \n",bmpResult);
   10e32:	480e      	ldr	r0, [pc, #56]	; (10e6c <initBMP384+0xc0>)
   10e34:	f00c f8dc 	bl	1cff0 <printk>
	if (bmpResult == BMP3_SENSOR_OK){
   10e38:	f995 3000 	ldrsb.w	r3, [r5]
   10e3c:	2b00      	cmp	r3, #0
   10e3e:	d1f0      	bne.n	10e22 <initBMP384+0x76>
   10e40:	e7e7      	b.n	10e12 <initBMP384+0x66>
            bmp388_dev.delay_us(40000, bmp388_dev.intf_ptr);
   10e42:	6963      	ldr	r3, [r4, #20]
   10e44:	6861      	ldr	r1, [r4, #4]
   10e46:	f649 4040 	movw	r0, #40000	; 0x9c40
   10e4a:	4798      	blx	r3
            sensor_comp = BMP3_PRESS | BMP3_TEMP;
   10e4c:	4b08      	ldr	r3, [pc, #32]	; (10e70 <initBMP384+0xc4>)
   10e4e:	701e      	strb	r6, [r3, #0]
   10e50:	e7e7      	b.n	10e22 <initBMP384+0x76>
   10e52:	bf00      	nop
   10e54:	20001558 	.word	0x20001558
   10e58:	200030fc 	.word	0x200030fc
   10e5c:	0001cd2d 	.word	0x0001cd2d
   10e60:	0001cceb 	.word	0x0001cceb
   10e64:	0001cce7 	.word	0x0001cce7
   10e68:	00021b3b 	.word	0x00021b3b
   10e6c:	00021b4c 	.word	0x00021b4c
   10e70:	2000082b 	.word	0x2000082b

00010e74 <init_Interrupt_BMP>:
int8_t init_Interrupt_BMP(){
   10e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	k_work_init(&work_data, sendDataBMP);
   10e76:	4925      	ldr	r1, [pc, #148]	; (10f0c <init_Interrupt_BMP+0x98>)
   10e78:	4825      	ldr	r0, [pc, #148]	; (10f10 <init_Interrupt_BMP+0x9c>)
   10e7a:	f00f fab9 	bl	203f0 <k_work_init>
	k_work_init(&work_config, setConfigBMP);
   10e7e:	4925      	ldr	r1, [pc, #148]	; (10f14 <init_Interrupt_BMP+0xa0>)
   10e80:	4825      	ldr	r0, [pc, #148]	; (10f18 <init_Interrupt_BMP+0xa4>)
   10e82:	f00f fab5 	bl	203f0 <k_work_init>
   10e86:	4d25      	ldr	r5, [pc, #148]	; (10f1c <init_Interrupt_BMP+0xa8>)
   10e88:	4628      	mov	r0, r5
   10e8a:	f00f f87f 	bl	1ff8c <z_device_ready>
   10e8e:	462f      	mov	r7, r5
   10e90:	b1a0      	cbz	r0, 10ebc <init_Interrupt_BMP+0x48>
	struct gpio_driver_data *data =
   10e92:	692a      	ldr	r2, [r5, #16]
	const struct gpio_driver_api *api =
   10e94:	68ae      	ldr	r6, [r5, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   10e96:	6813      	ldr	r3, [r2, #0]
   10e98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   10e9c:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   10e9e:	2111      	movs	r1, #17
   10ea0:	6833      	ldr	r3, [r6, #0]
   10ea2:	f44f 7280 	mov.w	r2, #256	; 0x100
   10ea6:	4628      	mov	r0, r5
   10ea8:	4798      	blx	r3
	returnValue = gpio_pin_configure_dt(&bmpInt, GPIO_INPUT);
   10eaa:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   10eac:	b16c      	cbz	r4, 10eca <init_Interrupt_BMP+0x56>
		printk("Error %d: failed to configure %s pin %d\n",
   10eae:	682a      	ldr	r2, [r5, #0]
   10eb0:	481b      	ldr	r0, [pc, #108]	; (10f20 <init_Interrupt_BMP+0xac>)
   10eb2:	2311      	movs	r3, #17
   10eb4:	4621      	mov	r1, r4
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   10eb6:	f00c f89b 	bl	1cff0 <printk>
		return returnValue;
   10eba:	e004      	b.n	10ec6 <init_Interrupt_BMP+0x52>
		printk("Error: bmp interrupt %s is not ready\n",
   10ebc:	6829      	ldr	r1, [r5, #0]
   10ebe:	4819      	ldr	r0, [pc, #100]	; (10f24 <init_Interrupt_BMP+0xb0>)
   10ec0:	f00c f896 	bl	1cff0 <printk>
		return 1;
   10ec4:	2401      	movs	r4, #1
}
   10ec6:	4620      	mov	r0, r4
   10ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   10eca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   10ece:	69b4      	ldr	r4, [r6, #24]
   10ed0:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
   10ed4:	2111      	movs	r1, #17
   10ed6:	4628      	mov	r0, r5
   10ed8:	47a0      	blx	r4
	returnValue = gpio_pin_interrupt_configure_dt(&bmpInt,GPIO_INT_EDGE_RISING);
   10eda:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   10edc:	b124      	cbz	r4, 10ee8 <init_Interrupt_BMP+0x74>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   10ede:	682a      	ldr	r2, [r5, #0]
   10ee0:	4811      	ldr	r0, [pc, #68]	; (10f28 <init_Interrupt_BMP+0xb4>)
   10ee2:	2311      	movs	r3, #17
   10ee4:	4621      	mov	r1, r4
   10ee6:	e7e6      	b.n	10eb6 <init_Interrupt_BMP+0x42>
	callback->handler = handler;
   10ee8:	4910      	ldr	r1, [pc, #64]	; (10f2c <init_Interrupt_BMP+0xb8>)
   10eea:	4b11      	ldr	r3, [pc, #68]	; (10f30 <init_Interrupt_BMP+0xbc>)
   10eec:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   10eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   10ef2:	608b      	str	r3, [r1, #8]
	if (api->manage_callback == NULL) {
   10ef4:	69f3      	ldr	r3, [r6, #28]
   10ef6:	b113      	cbz	r3, 10efe <init_Interrupt_BMP+0x8a>
	return api->manage_callback(port, callback, true);
   10ef8:	2201      	movs	r2, #1
   10efa:	4628      	mov	r0, r5
   10efc:	4798      	blx	r3
	printk("Set up button at %s pin %d\n", bmpInt.port->name, bmpInt.pin);
   10efe:	6839      	ldr	r1, [r7, #0]
   10f00:	480c      	ldr	r0, [pc, #48]	; (10f34 <init_Interrupt_BMP+0xc0>)
   10f02:	2211      	movs	r2, #17
   10f04:	f00c f874 	bl	1cff0 <printk>
    return returnValue;
   10f08:	e7dd      	b.n	10ec6 <init_Interrupt_BMP+0x52>
   10f0a:	bf00      	nop
   10f0c:	00010d19 	.word	0x00010d19
   10f10:	20001e10 	.word	0x20001e10
   10f14:	00010f65 	.word	0x00010f65
   10f18:	20001e00 	.word	0x20001e00
   10f1c:	00020c84 	.word	0x00020c84
   10f20:	000219a4 	.word	0x000219a4
   10f24:	00021b65 	.word	0x00021b65
   10f28:	000219cd 	.word	0x000219cd
   10f2c:	20001df4 	.word	0x20001df4
   10f30:	00010da1 	.word	0x00010da1
   10f34:	00021b8b 	.word	0x00021b8b

00010f38 <submitConfigBMP>:
	k_work_submit(&work_config);
   10f38:	4801      	ldr	r0, [pc, #4]	; (10f40 <submitConfigBMP+0x8>)
   10f3a:	f008 b961 	b.w	19200 <k_work_submit>
   10f3e:	bf00      	nop
   10f40:	20001e00 	.word	0x20001e00

00010f44 <sleepBMP>:
extern uint8_t sleepBMP(bool SLEEP){
   10f44:	b508      	push	{r3, lr}
   10f46:	4603      	mov	r3, r0
   10f48:	4805      	ldr	r0, [pc, #20]	; (10f60 <sleepBMP+0x1c>)
	if(SLEEP){
   10f4a:	b133      	cbz	r3, 10f5a <sleepBMP+0x16>
		bmp388_dev.settings.op_mode = BMP3_MODE_SLEEP;
   10f4c:	2300      	movs	r3, #0
	}else{
		bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL;
   10f4e:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
		return bmp3_set_op_mode(&bmp388_dev);
   10f52:	f00b fe15 	bl	1cb80 <bmp3_set_op_mode>
   10f56:	b2c0      	uxtb	r0, r0
	}
};
   10f58:	bd08      	pop	{r3, pc}
		bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL;
   10f5a:	2303      	movs	r3, #3
   10f5c:	e7f7      	b.n	10f4e <sleepBMP+0xa>
   10f5e:	bf00      	nop
   10f60:	20001558 	.word	0x20001558

00010f64 <setConfigBMP>:
static void setConfigBMP(){
   10f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t oversampling = bmpData.config[1];
   10f66:	4d1c      	ldr	r5, [pc, #112]	; (10fd8 <setConfigBMP+0x74>)
	uint8_t filter = bmpData.config[2];
	uint8_t rate = bmpData.config[3];
	uint16_t settings_sel;

    bmp388_dev.settings.press_en = BMP3_ENABLE;
   10f68:	4c1c      	ldr	r4, [pc, #112]	; (10fdc <setConfigBMP+0x78>)
	uint8_t oversampling = bmpData.config[1];
   10f6a:	7b68      	ldrb	r0, [r5, #13]
	uint8_t filter = bmpData.config[2];
   10f6c:	7ba9      	ldrb	r1, [r5, #14]
    bmp388_dev.settings.temp_en = BMP3_ENABLE;
    bmp388_dev.settings.odr_filter.press_os = oversampling;
   10f6e:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
        bmp388_dev.settings.odr_filter.temp_os = BMP3_OVERSAMPLING_2X;
    }else {
        bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
    }
    
    bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
   10f72:	2000      	movs	r0, #0
    bmp388_dev.settings.press_en = BMP3_ENABLE;
   10f74:	2301      	movs	r3, #1
	uint8_t rate = bmpData.config[3];
   10f76:	7bea      	ldrb	r2, [r5, #15]
    bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
   10f78:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
    bmp388_dev.settings.int_settings.drdy_en =BMP3_ENABLE;
    bmp388_dev.settings.odr_filter.iir_filter = filter;
   10f7c:	f884 10b5 	strb.w	r1, [r4, #181]	; 0xb5
    bmp388_dev.settings.odr_filter.odr =rate;//BMP3_ODR_25_HZ;
	settings_sel = BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR | BMP3_SEL_IIR_FILTER;
    bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev);           
   10f80:	20f0      	movs	r0, #240	; 0xf0
   10f82:	4621      	mov	r1, r4
    bmp388_dev.settings.press_en = BMP3_ENABLE;
   10f84:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
    bmp388_dev.settings.temp_en = BMP3_ENABLE;
   10f88:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
    bmp388_dev.settings.int_settings.drdy_en =BMP3_ENABLE;
   10f8c:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
    bmp388_dev.settings.odr_filter.odr =rate;//BMP3_ODR_25_HZ;
   10f90:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
    bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev);           
   10f94:	f7ff fc76 	bl	10884 <bmp3_set_sensor_settings>
   10f98:	4f11      	ldr	r7, [pc, #68]	; (10fe0 <setConfigBMP+0x7c>)
   10f9a:	7038      	strb	r0, [r7, #0]
     if (bmpResult == BMP3_SENSOR_OK){
   10f9c:	b970      	cbnz	r0, 10fbc <setConfigBMP+0x58>
        bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL; 
   10f9e:	2603      	movs	r6, #3
        bmpResult = bmp3_set_op_mode(&bmp388_dev);
   10fa0:	4620      	mov	r0, r4
        bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL; 
   10fa2:	f884 60b0 	strb.w	r6, [r4, #176]	; 0xb0
        bmpResult = bmp3_set_op_mode(&bmp388_dev);
   10fa6:	f00b fdeb 	bl	1cb80 <bmp3_set_op_mode>
   10faa:	7038      	strb	r0, [r7, #0]
        if (bmpResult == BMP3_SENSOR_OK)
   10fac:	b930      	cbnz	r0, 10fbc <setConfigBMP+0x58>
        {
            bmp388_dev.delay_us(40000, bmp388_dev.intf_ptr);
   10fae:	6963      	ldr	r3, [r4, #20]
   10fb0:	6861      	ldr	r1, [r4, #4]
   10fb2:	f649 4040 	movw	r0, #40000	; 0x9c40
   10fb6:	4798      	blx	r3
            /* Sensor component selection */
            sensor_comp = BMP3_PRESS | BMP3_TEMP;
   10fb8:	4b0a      	ldr	r3, [pc, #40]	; (10fe4 <setConfigBMP+0x80>)
   10fba:	701e      	strb	r6, [r3, #0]
	return z_impl_k_sleep(timeout);
   10fbc:	f640 40cd 	movw	r0, #3277	; 0xccd
   10fc0:	2100      	movs	r1, #0
   10fc2:	f008 fcab 	bl	1991c <z_impl_k_sleep>
            /* Temperature and Pressure data are read and stored in the bmp3_data instance */
        }
    }
	
	k_sleep(K_MSEC(100));
	sleepBMP(!bmpData.config[0]);
   10fc6:	7b28      	ldrb	r0, [r5, #12]
   10fc8:	fab0 f080 	clz	r0, r0
}
   10fcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	sleepBMP(!bmpData.config[0]);
   10fd0:	0940      	lsrs	r0, r0, #5
   10fd2:	f7ff bfb7 	b.w	10f44 <sleepBMP>
   10fd6:	bf00      	nop
   10fd8:	20001d74 	.word	0x20001d74
   10fdc:	20001558 	.word	0x20001558
   10fe0:	200030fc 	.word	0x200030fc
   10fe4:	2000082b 	.word	0x2000082b

00010fe8 <mlx_setGain>:
/**
 * Sets the sensor gain to the specified level.
 * @param gain  The gain level to set.
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_setGain(mlx90393_gain_t gain, struct device *mlx_device_t) {
   10fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  _gain = gain;
   10fea:	4b0c      	ldr	r3, [pc, #48]	; (1101c <mlx_setGain+0x34>)
bool mlx_setGain(mlx90393_gain_t gain, struct device *mlx_device_t) {
   10fec:	4605      	mov	r5, r0
   10fee:	460c      	mov	r4, r1
  _gain = gain;
   10ff0:	7018      	strb	r0, [r3, #0]

  uint16_t data;
  readRegister(MLX90393_CONF1, &data, mlx_device_t);
   10ff2:	460a      	mov	r2, r1
   10ff4:	2000      	movs	r0, #0
   10ff6:	f10d 0106 	add.w	r1, sp, #6
   10ffa:	f00b ff32 	bl	1ce62 <readRegister>

  // mask off gain bits
  data &= ~0x0070;
   10ffe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  // set gain bits
  data |= gain << MLX90393_GAIN_SHIFT;
   11006:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   1100a:	b281      	uxth	r1, r0

  return writeRegister(MLX90393_CONF1, data, mlx_device_t);
   1100c:	4622      	mov	r2, r4
   1100e:	2000      	movs	r0, #0
  data |= gain << MLX90393_GAIN_SHIFT;
   11010:	f8ad 1006 	strh.w	r1, [sp, #6]
  return writeRegister(MLX90393_CONF1, data, mlx_device_t);
   11014:	f00b ff0b 	bl	1ce2e <writeRegister>
}
   11018:	b003      	add	sp, #12
   1101a:	bd30      	pop	{r4, r5, pc}
   1101c:	200030fe 	.word	0x200030fe

00011020 <mlx_setResolution>:
 * @param axis  The axis to set.
 * @param resolution  The resolution level to set.
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_setResolution(enum mlx90393_axis axis,
                                      enum mlx90393_resolution resolution, struct device *mlx_device_t) {
   11020:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11022:	4606      	mov	r6, r0
   11024:	460c      	mov	r4, r1

  uint16_t data;
  readRegister(MLX90393_CONF3, &data, mlx_device_t);
   11026:	2002      	movs	r0, #2
   11028:	f10d 0106 	add.w	r1, sp, #6
                                      enum mlx90393_resolution resolution, struct device *mlx_device_t) {
   1102c:	4615      	mov	r5, r2
  readRegister(MLX90393_CONF3, &data, mlx_device_t);
   1102e:	f00b ff18 	bl	1ce62 <readRegister>

  switch (axis) {
   11032:	2e01      	cmp	r6, #1
   11034:	d014      	beq.n	11060 <mlx_setResolution+0x40>
   11036:	2e02      	cmp	r6, #2
   11038:	d01b      	beq.n	11072 <mlx_setResolution+0x52>
   1103a:	b94e      	cbnz	r6, 11050 <mlx_setResolution+0x30>
  case MLX90393_X:
    _res_x = resolution;
    data &= ~0x0060;
   1103c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    _res_x = resolution;
   11040:	4b10      	ldr	r3, [pc, #64]	; (11084 <mlx_setResolution+0x64>)
    data &= ~0x0060;
   11042:	f021 0160 	bic.w	r1, r1, #96	; 0x60
    _res_x = resolution;
   11046:	701c      	strb	r4, [r3, #0]
    data |= resolution << 5;
   11048:	ea41 1444 	orr.w	r4, r1, r4, lsl #5
    data |= resolution << 7;
    break;
  case MLX90393_Z:
    _res_z = resolution;
    data &= ~0x0600;
    data |= resolution << 9;
   1104c:	f8ad 4006 	strh.w	r4, [sp, #6]
    break;
  }

  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   11050:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   11054:	462a      	mov	r2, r5
   11056:	2002      	movs	r0, #2
   11058:	f00b fee9 	bl	1ce2e <writeRegister>
}
   1105c:	b002      	add	sp, #8
   1105e:	bd70      	pop	{r4, r5, r6, pc}
    data &= ~0x0180;
   11060:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    _res_y = resolution;
   11064:	4b08      	ldr	r3, [pc, #32]	; (11088 <mlx_setResolution+0x68>)
    data &= ~0x0180;
   11066:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
    _res_y = resolution;
   1106a:	701c      	strb	r4, [r3, #0]
    data |= resolution << 7;
   1106c:	ea41 14c4 	orr.w	r4, r1, r4, lsl #7
   11070:	e7ec      	b.n	1104c <mlx_setResolution+0x2c>
    data &= ~0x0600;
   11072:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    _res_z = resolution;
   11076:	4b05      	ldr	r3, [pc, #20]	; (1108c <mlx_setResolution+0x6c>)
    data &= ~0x0600;
   11078:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
    _res_z = resolution;
   1107c:	701c      	strb	r4, [r3, #0]
    data |= resolution << 9;
   1107e:	ea41 2444 	orr.w	r4, r1, r4, lsl #9
   11082:	e7e3      	b.n	1104c <mlx_setResolution+0x2c>
   11084:	20003100 	.word	0x20003100
   11088:	20003101 	.word	0x20003101
   1108c:	20003102 	.word	0x20003102

00011090 <mlx_setFilter>:
/**
 * Sets the digital filter.
 * @param filter The digital filter setting.
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_setFilter(enum mlx90393_filter filter, struct device *mlx_device_t) {
   11090:	b537      	push	{r0, r1, r2, r4, r5, lr}
  _dig_filt = filter;
   11092:	4b0c      	ldr	r3, [pc, #48]	; (110c4 <mlx_setFilter+0x34>)
bool mlx_setFilter(enum mlx90393_filter filter, struct device *mlx_device_t) {
   11094:	4605      	mov	r5, r0
   11096:	460c      	mov	r4, r1
  _dig_filt = filter;
   11098:	7018      	strb	r0, [r3, #0]

  uint16_t data;
  readRegister(MLX90393_CONF3, &data, mlx_device_t);
   1109a:	460a      	mov	r2, r1
   1109c:	2002      	movs	r0, #2
   1109e:	f10d 0106 	add.w	r1, sp, #6
   110a2:	f00b fede 	bl	1ce62 <readRegister>

  data &= ~0x1C;
   110a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   110aa:	f023 031c 	bic.w	r3, r3, #28
  data |= filter << 2;
   110ae:	ea43 0085 	orr.w	r0, r3, r5, lsl #2
   110b2:	b281      	uxth	r1, r0

  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   110b4:	4622      	mov	r2, r4
   110b6:	2002      	movs	r0, #2
  data |= filter << 2;
   110b8:	f8ad 1006 	strh.w	r1, [sp, #6]
  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   110bc:	f00b feb7 	bl	1ce2e <writeRegister>
}
   110c0:	b003      	add	sp, #12
   110c2:	bd30      	pop	{r4, r5, pc}
   110c4:	200030fd 	.word	0x200030fd

000110c8 <mlx_setOversampling>:
 * Sets the oversampling.
 * @param oversampling The oversampling value to use.
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_setOversampling(
    enum mlx90393_oversampling oversampling, struct device *mlx_device_t) {
   110c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  _osr = oversampling;
   110ca:	4b0c      	ldr	r3, [pc, #48]	; (110fc <mlx_setOversampling+0x34>)
    enum mlx90393_oversampling oversampling, struct device *mlx_device_t) {
   110cc:	4605      	mov	r5, r0
   110ce:	460c      	mov	r4, r1
  _osr = oversampling;
   110d0:	7018      	strb	r0, [r3, #0]

  uint16_t data;
  readRegister(MLX90393_CONF3, &data, mlx_device_t);
   110d2:	460a      	mov	r2, r1
   110d4:	2002      	movs	r0, #2
   110d6:	f10d 0106 	add.w	r1, sp, #6
   110da:	f00b fec2 	bl	1ce62 <readRegister>

  data &= ~0x03;
   110de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   110e2:	f023 0303 	bic.w	r3, r3, #3
  data |= oversampling;
   110e6:	ea43 0005 	orr.w	r0, r3, r5
   110ea:	b281      	uxth	r1, r0

  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   110ec:	4622      	mov	r2, r4
   110ee:	2002      	movs	r0, #2
  data |= oversampling;
   110f0:	f8ad 1006 	strh.w	r1, [sp, #6]
  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   110f4:	f00b fe9b 	bl	1ce2e <writeRegister>
}
   110f8:	b003      	add	sp, #12
   110fa:	bd30      	pop	{r4, r5, pc}
   110fc:	200030ff 	.word	0x200030ff

00011100 <mlx_readMeasurement>:
 * @param y     Pointer to where the 'y' value should be stored.
 * @param z     Pointer to where the 'z' value should be stored.
 *
 * @return True on command success
 */
bool mlx_readMeasurement(float *x, float *y, float *z, struct device *mlx_device_t) {
   11100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11104:	b08b      	sub	sp, #44	; 0x2c
   11106:	4691      	mov	r9, r2
  uint8_t tx[1] = {MLX90393_REG_RM | MLX90393_AXIS_ALL};
   11108:	224e      	movs	r2, #78	; 0x4e
   1110a:	f88d 201c 	strb.w	r2, [sp, #28]
  uint8_t rx[6] = {0};
   1110e:	2200      	movs	r2, #0

  /* Read a single data sample. */


  
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {  
   11110:	e9cd 2300 	strd	r2, r3, [sp]
  uint8_t rx[6] = {0};
   11114:	9208      	str	r2, [sp, #32]
   11116:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {  
   1111a:	2306      	movs	r3, #6
bool mlx_readMeasurement(float *x, float *y, float *z, struct device *mlx_device_t) {
   1111c:	4683      	mov	fp, r0
   1111e:	468a      	mov	sl, r1
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {  
   11120:	aa08      	add	r2, sp, #32
   11122:	2101      	movs	r1, #1
   11124:	a807      	add	r0, sp, #28
   11126:	f00b fe29 	bl	1cd7c <transceive>
  

  int16_t xi, yi, zi;

  /* Convert data to uT and float. */
  xi = (rx[0] << 8) | rx[1];
   1112a:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1112e:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
  yi = (rx[2] << 8) | rx[3];
   11132:	f89d 5023 	ldrb.w	r5, [sp, #35]	; 0x23
  zi = (rx[4] << 8) | rx[5];
   11136:	f89d 4025 	ldrb.w	r4, [sp, #37]	; 0x25
  xi = (rx[0] << 8) | rx[1];
   1113a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  yi = (rx[2] << 8) | rx[3];
   1113e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11142:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  zi = (rx[4] << 8) | rx[5];
   11146:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1114a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8

  if (_res_x == MLX90393_RES_18)
   1114e:	4b2a      	ldr	r3, [pc, #168]	; (111f8 <mlx_readMeasurement+0xf8>)
   11150:	781b      	ldrb	r3, [r3, #0]
   11152:	2b02      	cmp	r3, #2
  xi = (rx[0] << 8) | rx[1];
   11154:	b200      	sxth	r0, r0
  yi = (rx[2] << 8) | rx[3];
   11156:	b22d      	sxth	r5, r5
  zi = (rx[4] << 8) | rx[5];
   11158:	b224      	sxth	r4, r4
  if (_res_x == MLX90393_RES_18)
   1115a:	d13e      	bne.n	111da <mlx_readMeasurement+0xda>
    xi -= 0x8000;
   1115c:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
  if (_res_x == MLX90393_RES_19)
    xi -= 0x4000;
   11160:	b200      	sxth	r0, r0
  if (_res_y == MLX90393_RES_18)
   11162:	4a26      	ldr	r2, [pc, #152]	; (111fc <mlx_readMeasurement+0xfc>)
   11164:	7817      	ldrb	r7, [r2, #0]
   11166:	2f02      	cmp	r7, #2
   11168:	d13c      	bne.n	111e4 <mlx_readMeasurement+0xe4>
    yi -= 0x8000;
   1116a:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
  if (_res_y == MLX90393_RES_19)
    yi -= 0x4000;
   1116e:	b22d      	sxth	r5, r5
  if (_res_z == MLX90393_RES_18)
   11170:	4a23      	ldr	r2, [pc, #140]	; (11200 <mlx_readMeasurement+0x100>)
   11172:	7812      	ldrb	r2, [r2, #0]
   11174:	2a02      	cmp	r2, #2
   11176:	d13a      	bne.n	111ee <mlx_readMeasurement+0xee>
    zi -= 0x8000;
   11178:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
  if (_res_z == MLX90393_RES_19)
    zi -= 0x4000;
   1117c:	b224      	sxth	r4, r4

  *x = (float)xi * mlx90393_lsb_lookup[0][_gain][_res_x][0];
   1117e:	4921      	ldr	r1, [pc, #132]	; (11204 <mlx_readMeasurement+0x104>)
   11180:	4e21      	ldr	r6, [pc, #132]	; (11208 <mlx_readMeasurement+0x108>)
   11182:	7809      	ldrb	r1, [r1, #0]
   11184:	9103      	str	r1, [sp, #12]
   11186:	e9cd 3204 	strd	r3, r2, [sp, #16]
   1118a:	f7ef fd19 	bl	bc0 <__aeabi_i2f>
   1118e:	9903      	ldr	r1, [sp, #12]
   11190:	9b04      	ldr	r3, [sp, #16]
   11192:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   11196:	ea4f 0881 	mov.w	r8, r1, lsl #2
   1119a:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
   1119e:	f7ef fd63 	bl	c68 <__aeabi_fmul>
  *y = (float)yi * mlx90393_lsb_lookup[0][_gain][_res_y][0];
   111a2:	4447      	add	r7, r8
  *x = (float)xi * mlx90393_lsb_lookup[0][_gain][_res_x][0];
   111a4:	f8cb 0000 	str.w	r0, [fp]
  *y = (float)yi * mlx90393_lsb_lookup[0][_gain][_res_y][0];
   111a8:	4628      	mov	r0, r5
   111aa:	f7ef fd09 	bl	bc0 <__aeabi_i2f>
   111ae:	f856 1037 	ldr.w	r1, [r6, r7, lsl #3]
   111b2:	f7ef fd59 	bl	c68 <__aeabi_fmul>
   111b6:	f8ca 0000 	str.w	r0, [sl]
  *z = (float)zi * mlx90393_lsb_lookup[0][_gain][_res_z][1];
   111ba:	4620      	mov	r0, r4
   111bc:	f7ef fd00 	bl	bc0 <__aeabi_i2f>
   111c0:	9a05      	ldr	r2, [sp, #20]
   111c2:	4490      	add	r8, r2
   111c4:	eb06 06c8 	add.w	r6, r6, r8, lsl #3
   111c8:	6871      	ldr	r1, [r6, #4]
   111ca:	f7ef fd4d 	bl	c68 <__aeabi_fmul>
   111ce:	f8c9 0000 	str.w	r0, [r9]

  return true;
}
   111d2:	2001      	movs	r0, #1
   111d4:	b00b      	add	sp, #44	; 0x2c
   111d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_res_x == MLX90393_RES_19)
   111da:	2b03      	cmp	r3, #3
   111dc:	d1c1      	bne.n	11162 <mlx_readMeasurement+0x62>
    xi -= 0x4000;
   111de:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
   111e2:	e7bd      	b.n	11160 <mlx_readMeasurement+0x60>
  if (_res_y == MLX90393_RES_19)
   111e4:	2f03      	cmp	r7, #3
   111e6:	d1c3      	bne.n	11170 <mlx_readMeasurement+0x70>
    yi -= 0x4000;
   111e8:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
   111ec:	e7bf      	b.n	1116e <mlx_readMeasurement+0x6e>
  if (_res_z == MLX90393_RES_19)
   111ee:	2a03      	cmp	r2, #3
   111f0:	d1c5      	bne.n	1117e <mlx_readMeasurement+0x7e>
    zi -= 0x4000;
   111f2:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
   111f6:	e7c1      	b.n	1117c <mlx_readMeasurement+0x7c>
   111f8:	20003100 	.word	0x20003100
   111fc:	20003101 	.word	0x20003101
   11200:	20003102 	.word	0x20003102
   11204:	200030fe 	.word	0x200030fe
   11208:	00021114 	.word	0x00021114

0001120c <main>:
void btn1_handle(struct k_work * work) {
    printk("test");
}

void main(void)
{
   1120c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	printk("Hello World %s\n", CONFIG_BOARD);
   1120e:	491c      	ldr	r1, [pc, #112]	; (11280 <main+0x74>)
   11210:	481c      	ldr	r0, [pc, #112]	; (11284 <main+0x78>)
   11212:	f00b feed 	bl	1cff0 <printk>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   11216:	481c      	ldr	r0, [pc, #112]	; (11288 <main+0x7c>)
   11218:	f007 fb76 	bl	18908 <z_impl_device_get_binding>
	//k_work_init(&some_work, btn1_handle);
	

	struct device *i2c_dev;
	i2c_dev = device_get_binding("myi2c");
	if (!i2c_dev) {
   1121c:	4604      	mov	r4, r0
   1121e:	b928      	cbnz	r0, 1122c <main+0x20>
		printk("I2C: Device driver not found.\n");
   11220:	481a      	ldr	r0, [pc, #104]	; (1128c <main+0x80>)
	initIMU(i2c_dev,AFS_2G, GFS_15_125DPS, AODR_100Hz, GODR_100Hz);
	setState(1,1);
	k_sleep(K_SECONDS(3));
	//printk("start shtc\n");
	//initSHTC(i2c_dev);
}
   11222:	b003      	add	sp, #12
   11224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		printk("I2C: Device driver not found.\n");
   11228:	f00b bee2 	b.w	1cff0 <printk>
	error = init_Interrupt_BMP();
   1122c:	f7ff fe22 	bl	10e74 <init_Interrupt_BMP>
   11230:	4d17      	ldr	r5, [pc, #92]	; (11290 <main+0x84>)
   11232:	7028      	strb	r0, [r5, #0]
	error = initBMP384(i2c_dev);
   11234:	4620      	mov	r0, r4
   11236:	f7ff fdb9 	bl	10dac <initBMP384>
   1123a:	7028      	strb	r0, [r5, #0]
	initMLX(i2c_dev);
   1123c:	4620      	mov	r0, r4
   1123e:	f7ff fa6f 	bl	10720 <initMLX>
	init_Interrupt_MLX();
   11242:	f7ff fa77 	bl	10734 <init_Interrupt_MLX>
   11246:	2100      	movs	r1, #0
   11248:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1124c:	f008 fb66 	bl	1991c <z_impl_k_sleep>
	initBLE();
   11250:	f7ff fa16 	bl	10680 <initBLE>
	printk("start imu\n");
   11254:	480f      	ldr	r0, [pc, #60]	; (11294 <main+0x88>)
   11256:	f00b fecb 	bl	1cff0 <printk>
	initIMU(i2c_dev,AFS_2G, GFS_15_125DPS, AODR_100Hz, GODR_100Hz);
   1125a:	2308      	movs	r3, #8
   1125c:	9300      	str	r3, [sp, #0]
   1125e:	2207      	movs	r2, #7
   11260:	4620      	mov	r0, r4
   11262:	2103      	movs	r1, #3
   11264:	f7ff f876 	bl	10354 <initIMU>
	setState(1,1);
   11268:	2101      	movs	r1, #1
   1126a:	4608      	mov	r0, r1
   1126c:	f00b fa55 	bl	1c71a <setState>
   11270:	f44f 30c0 	mov.w	r0, #98304	; 0x18000
   11274:	2100      	movs	r1, #0
}
   11276:	b003      	add	sp, #12
   11278:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1127c:	f008 bb4e 	b.w	1991c <z_impl_k_sleep>
   11280:	00021ba7 	.word	0x00021ba7
   11284:	00021bb9 	.word	0x00021bb9
   11288:	00021bc9 	.word	0x00021bc9
   1128c:	00021bcf 	.word	0x00021bcf
   11290:	20003103 	.word	0x20003103
   11294:	00021bee 	.word	0x00021bee

00011298 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   11298:	680b      	ldr	r3, [r1, #0]
   1129a:	3301      	adds	r3, #1
   1129c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   1129e:	4b01      	ldr	r3, [pc, #4]	; (112a4 <char_out+0xc>)
   112a0:	681b      	ldr	r3, [r3, #0]
   112a2:	4718      	bx	r3
   112a4:	2000051c 	.word	0x2000051c

000112a8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   112a8:	b507      	push	{r0, r1, r2, lr}
   112aa:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   112ac:	2100      	movs	r1, #0
{
   112ae:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   112b0:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   112b2:	4803      	ldr	r0, [pc, #12]	; (112c0 <vprintk+0x18>)
   112b4:	a901      	add	r1, sp, #4
   112b6:	f000 f951 	bl	1155c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   112ba:	b003      	add	sp, #12
   112bc:	f85d fb04 	ldr.w	pc, [sp], #4
   112c0:	00011299 	.word	0x00011299

000112c4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   112c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   112c8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   112cc:	f019 0808 	ands.w	r8, r9, #8
{
   112d0:	4604      	mov	r4, r0
   112d2:	4693      	mov	fp, r2
	if (processing) {
   112d4:	d00d      	beq.n	112f2 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   112d6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   112d8:	bf0c      	ite	eq
   112da:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   112de:	f049 0920 	orrne.w	r9, r9, #32
   112e2:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   112e6:	f38b 8811 	msr	BASEPRI, fp
   112ea:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   112ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   112f2:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   112f6:	2902      	cmp	r1, #2
   112f8:	d107      	bne.n	1130a <process_event+0x46>
			evt = process_recheck(mgr);
   112fa:	4620      	mov	r0, r4
   112fc:	f00b fe85 	bl	1d00a <process_recheck>
		if (evt == EVT_NOP) {
   11300:	2800      	cmp	r0, #0
   11302:	d0f0      	beq.n	112e6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   11304:	2801      	cmp	r0, #1
   11306:	8b23      	ldrh	r3, [r4, #24]
   11308:	d150      	bne.n	113ac <process_event+0xe8>
			res = mgr->last_res;
   1130a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1130c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   1130e:	2f00      	cmp	r7, #0
   11310:	da15      	bge.n	1133e <process_event+0x7a>
		*clients = mgr->clients;
   11312:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11314:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   11318:	e9c4 8800 	strd	r8, r8, [r4]
   1131c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   11320:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   11322:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11324:	8b21      	ldrh	r1, [r4, #24]
   11326:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1132a:	45ca      	cmp	sl, r9
   1132c:	d002      	beq.n	11334 <process_event+0x70>
		if (do_monitors
   1132e:	68a3      	ldr	r3, [r4, #8]
   11330:	2b00      	cmp	r3, #0
   11332:	d15c      	bne.n	113ee <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   11334:	b90d      	cbnz	r5, 1133a <process_event+0x76>
		    || (transit != NULL)) {
   11336:	2e00      	cmp	r6, #0
   11338:	d074      	beq.n	11424 <process_event+0x160>
   1133a:	2300      	movs	r3, #0
   1133c:	e058      	b.n	113f0 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1133e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   11342:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   11344:	2a01      	cmp	r2, #1
   11346:	d820      	bhi.n	1138a <process_event+0xc6>
		*clients = mgr->clients;
   11348:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   1134c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   1134e:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   11350:	b289      	uxth	r1, r1
	list->tail = NULL;
   11352:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   11356:	d10c      	bne.n	11372 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   11358:	2d00      	cmp	r5, #0
   1135a:	462b      	mov	r3, r5
   1135c:	bf38      	it	cc
   1135e:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11360:	b12b      	cbz	r3, 1136e <process_event+0xaa>
				mgr->refs += 1U;
   11362:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11364:	681b      	ldr	r3, [r3, #0]
   11366:	3201      	adds	r2, #1
   11368:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1136a:	2b00      	cmp	r3, #0
   1136c:	d1f8      	bne.n	11360 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1136e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   11372:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   11374:	4620      	mov	r0, r4
   11376:	f00b fe48 	bl	1d00a <process_recheck>
   1137a:	4606      	mov	r6, r0
   1137c:	2800      	cmp	r0, #0
   1137e:	d0d1      	beq.n	11324 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11380:	8b23      	ldrh	r3, [r4, #24]
   11382:	f043 0320 	orr.w	r3, r3, #32
   11386:	8323      	strh	r3, [r4, #24]
   11388:	e7cb      	b.n	11322 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1138a:	2b04      	cmp	r3, #4
   1138c:	d10c      	bne.n	113a8 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1138e:	f021 0107 	bic.w	r1, r1, #7
   11392:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   11394:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   11396:	4620      	mov	r0, r4
   11398:	f00b fe37 	bl	1d00a <process_recheck>
   1139c:	4605      	mov	r5, r0
   1139e:	2800      	cmp	r0, #0
   113a0:	d0bf      	beq.n	11322 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   113a2:	f041 0120 	orr.w	r1, r1, #32
   113a6:	8321      	strh	r1, [r4, #24]
   113a8:	2500      	movs	r5, #0
   113aa:	e7ba      	b.n	11322 <process_event+0x5e>
		} else if (evt == EVT_START) {
   113ac:	2803      	cmp	r0, #3
   113ae:	d109      	bne.n	113c4 <process_event+0x100>
			transit = mgr->transitions->start;
   113b0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   113b2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   113b6:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   113b8:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   113bc:	8323      	strh	r3, [r4, #24]
}
   113be:	2500      	movs	r5, #0
		res = 0;
   113c0:	462f      	mov	r7, r5
   113c2:	e7af      	b.n	11324 <process_event+0x60>
		} else if (evt == EVT_STOP) {
   113c4:	2804      	cmp	r0, #4
   113c6:	d106      	bne.n	113d6 <process_event+0x112>
			transit = mgr->transitions->stop;
   113c8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   113ca:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   113ce:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   113d0:	f043 0304 	orr.w	r3, r3, #4
   113d4:	e7f2      	b.n	113bc <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   113d6:	2805      	cmp	r0, #5
   113d8:	d106      	bne.n	113e8 <process_event+0x124>
			transit = mgr->transitions->reset;
   113da:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   113dc:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   113e0:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   113e2:	f043 0305 	orr.w	r3, r3, #5
   113e6:	e7e9      	b.n	113bc <process_event+0xf8>
   113e8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   113ea:	462e      	mov	r6, r5
   113ec:	e7e8      	b.n	113c0 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   113ee:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   113f0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   113f4:	8321      	strh	r1, [r4, #24]
   113f6:	f38b 8811 	msr	BASEPRI, fp
   113fa:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   113fe:	bb03      	cbnz	r3, 11442 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   11400:	2d00      	cmp	r5, #0
   11402:	d133      	bne.n	1146c <process_event+0x1a8>
			if (transit != NULL) {
   11404:	b116      	cbz	r6, 1140c <process_event+0x148>
				transit(mgr, transition_complete);
   11406:	4921      	ldr	r1, [pc, #132]	; (1148c <process_event+0x1c8>)
   11408:	4620      	mov	r0, r4
   1140a:	47b0      	blx	r6
	__asm__ volatile(
   1140c:	f04f 0340 	mov.w	r3, #64	; 0x40
   11410:	f3ef 8b11 	mrs	fp, BASEPRI
   11414:	f383 8811 	msr	BASEPRI, r3
   11418:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   1141c:	8b23      	ldrh	r3, [r4, #24]
   1141e:	f023 0308 	bic.w	r3, r3, #8
   11422:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   11424:	8b23      	ldrh	r3, [r4, #24]
   11426:	06da      	lsls	r2, r3, #27
   11428:	d528      	bpl.n	1147c <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1142a:	f023 0310 	bic.w	r3, r3, #16
   1142e:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   11430:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   11432:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   11436:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   1143a:	2900      	cmp	r1, #0
   1143c:	f47f af5b 	bne.w	112f6 <process_event+0x32>
out:
   11440:	e751      	b.n	112e6 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11442:	68a1      	ldr	r1, [r4, #8]
   11444:	2900      	cmp	r1, #0
   11446:	d0db      	beq.n	11400 <process_event+0x13c>
	return node->next;
   11448:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
   1144a:	f8d1 b004 	ldr.w	fp, [r1, #4]
   1144e:	2b00      	cmp	r3, #0
   11450:	bf38      	it	cc
   11452:	2300      	movcc	r3, #0
   11454:	4699      	mov	r9, r3
   11456:	4652      	mov	r2, sl
   11458:	463b      	mov	r3, r7
   1145a:	4620      	mov	r0, r4
   1145c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1145e:	f1b9 0f00 	cmp.w	r9, #0
   11462:	d0cd      	beq.n	11400 <process_event+0x13c>
   11464:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11468:	4649      	mov	r1, r9
   1146a:	e7ee      	b.n	1144a <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1146c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   1146e:	463b      	mov	r3, r7
   11470:	4652      	mov	r2, sl
   11472:	4620      	mov	r0, r4
   11474:	682d      	ldr	r5, [r5, #0]
   11476:	f00b fde4 	bl	1d042 <notify_one>
   1147a:	e7c1      	b.n	11400 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1147c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   11480:	bf1e      	ittt	ne
   11482:	f023 0320 	bicne.w	r3, r3, #32
   11486:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   11488:	2102      	movne	r1, #2
   1148a:	e7d2      	b.n	11432 <process_event+0x16e>
   1148c:	0001d06f 	.word	0x0001d06f

00011490 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   11490:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
   11492:	4e09      	ldr	r6, [pc, #36]	; (114b8 <extract_decimal+0x28>)
   11494:	6801      	ldr	r1, [r0, #0]
{
   11496:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
   11498:	270a      	movs	r7, #10
	size_t val = 0;
   1149a:	2000      	movs	r0, #0
   1149c:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
   1149e:	3101      	adds	r1, #1
   114a0:	7823      	ldrb	r3, [r4, #0]
   114a2:	5d9d      	ldrb	r5, [r3, r6]
   114a4:	076d      	lsls	r5, r5, #29
   114a6:	d401      	bmi.n	114ac <extract_decimal+0x1c>
	}
	*str = sp;
   114a8:	6014      	str	r4, [r2, #0]
	return val;
}
   114aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   114ac:	fb07 3300 	mla	r3, r7, r0, r3
   114b0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   114b4:	e7f2      	b.n	1149c <extract_decimal+0xc>
   114b6:	bf00      	nop
   114b8:	00021f83 	.word	0x00021f83

000114bc <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   114bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114c0:	4614      	mov	r4, r2
   114c2:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   114c4:	78d3      	ldrb	r3, [r2, #3]
   114c6:	4a24      	ldr	r2, [pc, #144]	; (11558 <encode_uint+0x9c>)
   114c8:	f813 a002 	ldrb.w	sl, [r3, r2]
	switch (specifier) {
   114cc:	2b6f      	cmp	r3, #111	; 0x6f
   114ce:	f00a 0203 	and.w	r2, sl, #3
{
   114d2:	4606      	mov	r6, r0
   114d4:	460f      	mov	r7, r1
   114d6:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   114d8:	d02d      	beq.n	11536 <encode_uint+0x7a>
   114da:	d828      	bhi.n	1152e <encode_uint+0x72>
		return 16;
   114dc:	2b58      	cmp	r3, #88	; 0x58
   114de:	bf14      	ite	ne
   114e0:	250a      	movne	r5, #10
   114e2:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   114e4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   114e8:	46aa      	mov	sl, r5
   114ea:	f04f 0b00 	mov.w	fp, #0
   114ee:	4652      	mov	r2, sl
   114f0:	465b      	mov	r3, fp
   114f2:	4630      	mov	r0, r6
   114f4:	4639      	mov	r1, r7
   114f6:	f7ef fd27 	bl	f48 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   114fa:	2a09      	cmp	r2, #9
   114fc:	b2d3      	uxtb	r3, r2
   114fe:	d81f      	bhi.n	11540 <encode_uint+0x84>
   11500:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   11502:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11504:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   11506:	bf08      	it	eq
   11508:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1150a:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   1150e:	d301      	bcc.n	11514 <encode_uint+0x58>
   11510:	45c8      	cmp	r8, r9
   11512:	d812      	bhi.n	1153a <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   11514:	7823      	ldrb	r3, [r4, #0]
   11516:	069b      	lsls	r3, r3, #26
   11518:	d505      	bpl.n	11526 <encode_uint+0x6a>
		if (radix == 8) {
   1151a:	2d08      	cmp	r5, #8
   1151c:	d116      	bne.n	1154c <encode_uint+0x90>
			conv->altform_0 = true;
   1151e:	78a3      	ldrb	r3, [r4, #2]
   11520:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   11524:	70a3      	strb	r3, [r4, #2]
			;
		}
	}

	return bp;
}
   11526:	4640      	mov	r0, r8
   11528:	b003      	add	sp, #12
   1152a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1152e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   11532:	2b70      	cmp	r3, #112	; 0x70
   11534:	e7d3      	b.n	114de <encode_uint+0x22>
	switch (specifier) {
   11536:	2508      	movs	r5, #8
   11538:	e7d4      	b.n	114e4 <encode_uint+0x28>
		value /= radix;
   1153a:	4606      	mov	r6, r0
   1153c:	460f      	mov	r7, r1
   1153e:	e7d6      	b.n	114ee <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11540:	9a01      	ldr	r2, [sp, #4]
   11542:	2a01      	cmp	r2, #1
   11544:	bf0c      	ite	eq
   11546:	3337      	addeq	r3, #55	; 0x37
   11548:	3357      	addne	r3, #87	; 0x57
   1154a:	e7da      	b.n	11502 <encode_uint+0x46>
		} else if (radix == 16) {
   1154c:	2d10      	cmp	r5, #16
   1154e:	d1ea      	bne.n	11526 <encode_uint+0x6a>
			conv->altform_0c = true;
   11550:	78a3      	ldrb	r3, [r4, #2]
   11552:	f043 0310 	orr.w	r3, r3, #16
   11556:	e7e5      	b.n	11524 <encode_uint+0x68>
   11558:	00021f83 	.word	0x00021f83

0001155c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   1155c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11560:	b0a3      	sub	sp, #140	; 0x8c
   11562:	4688      	mov	r8, r1
   11564:	9006      	str	r0, [sp, #24]
   11566:	4691      	mov	r9, r2
   11568:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1156a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1156c:	f899 0000 	ldrb.w	r0, [r9]
   11570:	b910      	cbnz	r0, 11578 <cbvprintf+0x1c>
			OUTC(' ');
			--width;
		}
	}

	return count;
   11572:	4628      	mov	r0, r5
   11574:	f000 bdae 	b.w	120d4 <cbvprintf+0xb78>
		if (*fp != '%') {
   11578:	f109 0301 	add.w	r3, r9, #1
   1157c:	2825      	cmp	r0, #37	; 0x25
   1157e:	9307      	str	r3, [sp, #28]
   11580:	d007      	beq.n	11592 <cbvprintf+0x36>
			OUTC(*fp++);
   11582:	4641      	mov	r1, r8
			OUTC('%');
   11584:	9b06      	ldr	r3, [sp, #24]
   11586:	4798      	blx	r3
   11588:	2800      	cmp	r0, #0
   1158a:	f2c0 85a3 	blt.w	120d4 <cbvprintf+0xb78>
   1158e:	3501      	adds	r5, #1
		if (bps == NULL) {
   11590:	e224      	b.n	119dc <cbvprintf+0x480>
		} state = {
   11592:	2218      	movs	r2, #24
   11594:	2100      	movs	r1, #0
   11596:	a814      	add	r0, sp, #80	; 0x50
   11598:	f00f faaa 	bl	20af0 <memset>
	if (*sp == '%') {
   1159c:	f899 3001 	ldrb.w	r3, [r9, #1]
   115a0:	2b25      	cmp	r3, #37	; 0x25
   115a2:	d059      	beq.n	11658 <cbvprintf+0xfc>
   115a4:	9a07      	ldr	r2, [sp, #28]
   115a6:	4616      	mov	r6, r2
		switch (*sp) {
   115a8:	f812 3b01 	ldrb.w	r3, [r2], #1
   115ac:	2b2b      	cmp	r3, #43	; 0x2b
   115ae:	f000 808b 	beq.w	116c8 <cbvprintf+0x16c>
   115b2:	d879      	bhi.n	116a8 <cbvprintf+0x14c>
   115b4:	2b20      	cmp	r3, #32
   115b6:	f000 808c 	beq.w	116d2 <cbvprintf+0x176>
   115ba:	2b23      	cmp	r3, #35	; 0x23
   115bc:	f000 808e 	beq.w	116dc <cbvprintf+0x180>
	if (conv->flag_zero && conv->flag_dash) {
   115c0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   115c4:	f003 0244 	and.w	r2, r3, #68	; 0x44
   115c8:	2a44      	cmp	r2, #68	; 0x44
   115ca:	d103      	bne.n	115d4 <cbvprintf+0x78>
		conv->flag_zero = false;
   115cc:	f36f 1386 	bfc	r3, #6, #1
   115d0:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	conv->width_present = true;
   115d4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   115d8:	9612      	str	r6, [sp, #72]	; 0x48
   115da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   115de:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	if (*sp == '*') {
   115e2:	7833      	ldrb	r3, [r6, #0]
   115e4:	2b2a      	cmp	r3, #42	; 0x2a
   115e6:	d17e      	bne.n	116e6 <cbvprintf+0x18a>
		conv->width_star = true;
   115e8:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   115ec:	f043 0301 	orr.w	r3, r3, #1
   115f0:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		return ++sp;
   115f4:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
   115f6:	9312      	str	r3, [sp, #72]	; 0x48
	conv->prec_present = (*sp == '.');
   115f8:	781a      	ldrb	r2, [r3, #0]
   115fa:	2a2e      	cmp	r2, #46	; 0x2e
   115fc:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
   11600:	bf0c      	ite	eq
   11602:	2101      	moveq	r1, #1
   11604:	2100      	movne	r1, #0
   11606:	f361 0241 	bfi	r2, r1, #1, #1
   1160a:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
	if (!conv->prec_present) {
   1160e:	d10b      	bne.n	11628 <cbvprintf+0xcc>
	++sp;
   11610:	1c5a      	adds	r2, r3, #1
   11612:	9212      	str	r2, [sp, #72]	; 0x48
	if (*sp == '*') {
   11614:	785a      	ldrb	r2, [r3, #1]
   11616:	2a2a      	cmp	r2, #42	; 0x2a
   11618:	d17b      	bne.n	11712 <cbvprintf+0x1b6>
		conv->prec_star = true;
   1161a:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
   1161e:	f042 0204 	orr.w	r2, r2, #4
   11622:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
		return ++sp;
   11626:	3302      	adds	r3, #2
	switch (*sp) {
   11628:	461a      	mov	r2, r3
   1162a:	f812 0b01 	ldrb.w	r0, [r2], #1
   1162e:	286c      	cmp	r0, #108	; 0x6c
   11630:	f000 80cf 	beq.w	117d2 <cbvprintf+0x276>
   11634:	d87d      	bhi.n	11732 <cbvprintf+0x1d6>
   11636:	2868      	cmp	r0, #104	; 0x68
   11638:	f000 8084 	beq.w	11744 <cbvprintf+0x1e8>
   1163c:	286a      	cmp	r0, #106	; 0x6a
   1163e:	f000 80d2 	beq.w	117e6 <cbvprintf+0x28a>
   11642:	284c      	cmp	r0, #76	; 0x4c
   11644:	f000 80d6 	beq.w	117f4 <cbvprintf+0x298>
		conv->length_mod = LENGTH_NONE;
   11648:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
   1164c:	f36f 02c6 	bfc	r2, #3, #4
   11650:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
		break;
   11654:	461a      	mov	r2, r3
   11656:	e080      	b.n	1175a <cbvprintf+0x1fe>
		conv->specifier = *sp++;
   11658:	f109 0202 	add.w	r2, r9, #2
   1165c:	9207      	str	r2, [sp, #28]
   1165e:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
		if (conv->width_star) {
   11662:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   11666:	07de      	lsls	r6, r3, #31
   11668:	f140 816d 	bpl.w	11946 <cbvprintf+0x3ea>
			width = va_arg(ap, int);
   1166c:	f854 ab04 	ldr.w	sl, [r4], #4
			if (width < 0) {
   11670:	f1ba 0f00 	cmp.w	sl, #0
   11674:	da07      	bge.n	11686 <cbvprintf+0x12a>
				conv->flag_dash = true;
   11676:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   1167a:	f042 0204 	orr.w	r2, r2, #4
   1167e:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
				width = -width;
   11682:	f1ca 0a00 	rsb	sl, sl, #0
		if (conv->prec_star) {
   11686:	0758      	lsls	r0, r3, #29
   11688:	f140 8166 	bpl.w	11958 <cbvprintf+0x3fc>
			int arg = va_arg(ap, int);
   1168c:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   11690:	2f00      	cmp	r7, #0
   11692:	f280 8165 	bge.w	11960 <cbvprintf+0x404>
				conv->prec_present = false;
   11696:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   1169a:	f36f 0341 	bfc	r3, #1, #1
   1169e:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		int precision = -1;
   116a2:	f04f 37ff 	mov.w	r7, #4294967295
   116a6:	e15b      	b.n	11960 <cbvprintf+0x404>
		switch (*sp) {
   116a8:	2b2d      	cmp	r3, #45	; 0x2d
   116aa:	d006      	beq.n	116ba <cbvprintf+0x15e>
   116ac:	2b30      	cmp	r3, #48	; 0x30
   116ae:	d187      	bne.n	115c0 <cbvprintf+0x64>
			conv->flag_zero = true;
   116b0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   116b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   116b8:	e003      	b.n	116c2 <cbvprintf+0x166>
			conv->flag_dash = true;
   116ba:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   116be:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   116c2:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
			break;
   116c6:	e76e      	b.n	115a6 <cbvprintf+0x4a>
			conv->flag_plus = true;
   116c8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   116cc:	f043 0308 	orr.w	r3, r3, #8
   116d0:	e7f7      	b.n	116c2 <cbvprintf+0x166>
			conv->flag_space = true;
   116d2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   116d6:	f043 0310 	orr.w	r3, r3, #16
   116da:	e7f2      	b.n	116c2 <cbvprintf+0x166>
			conv->flag_hash = true;
   116dc:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   116e0:	f043 0320 	orr.w	r3, r3, #32
   116e4:	e7ed      	b.n	116c2 <cbvprintf+0x166>
	size_t width = extract_decimal(&sp);
   116e6:	a812      	add	r0, sp, #72	; 0x48
   116e8:	f7ff fed2 	bl	11490 <extract_decimal>
	if (sp != wp) {
   116ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
   116ee:	42b3      	cmp	r3, r6
   116f0:	d081      	beq.n	115f6 <cbvprintf+0x9a>
		conv->unsupported |= ((conv->width_value < 0)
   116f2:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
		conv->width_value = width;
   116f6:	9017      	str	r0, [sp, #92]	; 0x5c
		conv->unsupported |= ((conv->width_value < 0)
   116f8:	f3c1 0240 	ubfx	r2, r1, #1, #1
   116fc:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   11700:	0052      	lsls	r2, r2, #1
   11702:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11706:	f001 017d 	and.w	r1, r1, #125	; 0x7d
   1170a:	430a      	orrs	r2, r1
   1170c:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
   11710:	e771      	b.n	115f6 <cbvprintf+0x9a>
	size_t prec = extract_decimal(&sp);
   11712:	a812      	add	r0, sp, #72	; 0x48
   11714:	f7ff febc 	bl	11490 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   11718:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
	conv->prec_value = prec;
   1171c:	9018      	str	r0, [sp, #96]	; 0x60
	conv->unsupported |= ((conv->prec_value < 0)
   1171e:	f3c3 0240 	ubfx	r2, r3, #1, #1
   11722:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   11726:	f360 0341 	bfi	r3, r0, #1, #1
   1172a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	return sp;
   1172e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11730:	e77a      	b.n	11628 <cbvprintf+0xcc>
	switch (*sp) {
   11732:	2874      	cmp	r0, #116	; 0x74
   11734:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
   11738:	d059      	beq.n	117ee <cbvprintf+0x292>
   1173a:	287a      	cmp	r0, #122	; 0x7a
   1173c:	d184      	bne.n	11648 <cbvprintf+0xec>
		conv->length_mod = LENGTH_Z;
   1173e:	460b      	mov	r3, r1
   11740:	2106      	movs	r1, #6
   11742:	e041      	b.n	117c8 <cbvprintf+0x26c>
		if (*++sp == 'h') {
   11744:	7859      	ldrb	r1, [r3, #1]
   11746:	2968      	cmp	r1, #104	; 0x68
   11748:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
   1174c:	d13a      	bne.n	117c4 <cbvprintf+0x268>
			conv->length_mod = LENGTH_HH;
   1174e:	2201      	movs	r2, #1
			conv->length_mod = LENGTH_LL;
   11750:	f362 01c6 	bfi	r1, r2, #3, #4
   11754:	f88d 1059 	strb.w	r1, [sp, #89]	; 0x59
			++sp;
   11758:	1c9a      	adds	r2, r3, #2
	conv->specifier = *sp++;
   1175a:	4613      	mov	r3, r2
   1175c:	f813 2b01 	ldrb.w	r2, [r3], #1
   11760:	9307      	str	r3, [sp, #28]
	switch (conv->specifier) {
   11762:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   11764:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
	switch (conv->specifier) {
   11768:	f200 80c5 	bhi.w	118f6 <cbvprintf+0x39a>
   1176c:	2a57      	cmp	r2, #87	; 0x57
   1176e:	d84e      	bhi.n	1180e <cbvprintf+0x2b2>
   11770:	2a41      	cmp	r2, #65	; 0x41
   11772:	d004      	beq.n	1177e <cbvprintf+0x222>
   11774:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   11778:	2b02      	cmp	r3, #2
   1177a:	f200 80bc 	bhi.w	118f6 <cbvprintf+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   1177e:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
			|| (conv->specifier == 'A');
   11782:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
   11786:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
   11788:	f1a2 0a41 	sub.w	sl, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
   1178c:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
   11790:	f1da 0200 	rsbs	r2, sl, #0
		conv->specifier_a = (conv->specifier == 'a')
   11794:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
		conv->specifier_cat = SPECIFIER_FP;
   11798:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
			|| (conv->specifier == 'A');
   1179c:	eb42 020a 	adc.w	r2, r2, sl
		conv->specifier_a = (conv->specifier == 'a')
   117a0:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
   117a4:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
   117a6:	f88d 1059 	strb.w	r1, [sp, #89]	; 0x59
		if (conv->specifier_a
   117aa:	b2cb      	uxtb	r3, r1
   117ac:	f100 80c9 	bmi.w	11942 <cbvprintf+0x3e6>
		if (conv->length_mod == LENGTH_L) {
   117b0:	f003 0278 	and.w	r2, r3, #120	; 0x78
   117b4:	2a18      	cmp	r2, #24
   117b6:	f040 809b 	bne.w	118f0 <cbvprintf+0x394>
			conv->length_mod = LENGTH_NONE;
   117ba:	f36f 03c6 	bfc	r3, #3, #4
   117be:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
   117c2:	e082      	b.n	118ca <cbvprintf+0x36e>
			conv->length_mod = LENGTH_H;
   117c4:	460b      	mov	r3, r1
   117c6:	2102      	movs	r1, #2
			conv->length_mod = LENGTH_L;
   117c8:	f361 03c6 	bfi	r3, r1, #3, #4
   117cc:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
   117d0:	e7c3      	b.n	1175a <cbvprintf+0x1fe>
		if (*++sp == 'l') {
   117d2:	7859      	ldrb	r1, [r3, #1]
   117d4:	296c      	cmp	r1, #108	; 0x6c
   117d6:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
   117da:	d101      	bne.n	117e0 <cbvprintf+0x284>
			conv->length_mod = LENGTH_LL;
   117dc:	2204      	movs	r2, #4
   117de:	e7b7      	b.n	11750 <cbvprintf+0x1f4>
			conv->length_mod = LENGTH_L;
   117e0:	460b      	mov	r3, r1
   117e2:	2103      	movs	r1, #3
   117e4:	e7f0      	b.n	117c8 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_J;
   117e6:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   117ea:	2105      	movs	r1, #5
   117ec:	e7ec      	b.n	117c8 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_T;
   117ee:	460b      	mov	r3, r1
   117f0:	2107      	movs	r1, #7
   117f2:	e7e9      	b.n	117c8 <cbvprintf+0x26c>
		conv->unsupported = true;
   117f4:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   117f8:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   117fc:	f023 0302 	bic.w	r3, r3, #2
   11800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   11804:	f043 0302 	orr.w	r3, r3, #2
   11808:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
		break;
   1180c:	e7a5      	b.n	1175a <cbvprintf+0x1fe>
   1180e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
   11812:	2b20      	cmp	r3, #32
   11814:	d86f      	bhi.n	118f6 <cbvprintf+0x39a>
   11816:	a101      	add	r1, pc, #4	; (adr r1, 1181c <cbvprintf+0x2c0>)
   11818:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1181c:	000118cf 	.word	0x000118cf
   11820:	000118f7 	.word	0x000118f7
   11824:	000118f7 	.word	0x000118f7
   11828:	000118f7 	.word	0x000118f7
   1182c:	000118f7 	.word	0x000118f7
   11830:	000118f7 	.word	0x000118f7
   11834:	000118f7 	.word	0x000118f7
   11838:	000118f7 	.word	0x000118f7
   1183c:	000118f7 	.word	0x000118f7
   11840:	0001177f 	.word	0x0001177f
   11844:	000118f7 	.word	0x000118f7
   11848:	000118cf 	.word	0x000118cf
   1184c:	000118a1 	.word	0x000118a1
   11850:	0001177f 	.word	0x0001177f
   11854:	0001177f 	.word	0x0001177f
   11858:	0001177f 	.word	0x0001177f
   1185c:	000118f7 	.word	0x000118f7
   11860:	000118a1 	.word	0x000118a1
   11864:	000118f7 	.word	0x000118f7
   11868:	000118f7 	.word	0x000118f7
   1186c:	000118f7 	.word	0x000118f7
   11870:	000118f7 	.word	0x000118f7
   11874:	00011905 	.word	0x00011905
   11878:	000118cf 	.word	0x000118cf
   1187c:	00011925 	.word	0x00011925
   11880:	000118f7 	.word	0x000118f7
   11884:	000118f7 	.word	0x000118f7
   11888:	00011925 	.word	0x00011925
   1188c:	000118f7 	.word	0x000118f7
   11890:	000118cf 	.word	0x000118cf
   11894:	000118f7 	.word	0x000118f7
   11898:	000118f7 	.word	0x000118f7
   1189c:	000118cf 	.word	0x000118cf
		conv->specifier_cat = SPECIFIER_SINT;
   118a0:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
   118a4:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
   118a6:	f361 0302 	bfi	r3, r1, #0, #3
   118aa:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		if (conv->length_mod == LENGTH_UPPER_L) {
   118ae:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   118b2:	f003 0378 	and.w	r3, r3, #120	; 0x78
   118b6:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
   118b8:	bf02      	ittt	eq
   118ba:	f89d 1058 	ldrbeq.w	r1, [sp, #88]	; 0x58
   118be:	f041 0101 	orreq.w	r1, r1, #1
   118c2:	f88d 1058 	strbeq.w	r1, [sp, #88]	; 0x58
		if (conv->specifier == 'c') {
   118c6:	2a63      	cmp	r2, #99	; 0x63
   118c8:	d005      	beq.n	118d6 <cbvprintf+0x37a>
	bool unsupported = false;
   118ca:	2300      	movs	r3, #0
   118cc:	e006      	b.n	118dc <cbvprintf+0x380>
		conv->specifier_cat = SPECIFIER_UINT;
   118ce:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
   118d2:	2102      	movs	r1, #2
   118d4:	e7e7      	b.n	118a6 <cbvprintf+0x34a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   118d6:	3b00      	subs	r3, #0
   118d8:	bf18      	it	ne
   118da:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   118dc:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   118e0:	f3c2 0140 	ubfx	r1, r2, #1, #1
   118e4:	430b      	orrs	r3, r1
   118e6:	f363 0241 	bfi	r2, r3, #1, #1
   118ea:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
	return sp;
   118ee:	e6b8      	b.n	11662 <cbvprintf+0x106>
		} else if ((conv->length_mod != LENGTH_NONE)
   118f0:	f013 0f38 	tst.w	r3, #56	; 0x38
   118f4:	d0e9      	beq.n	118ca <cbvprintf+0x36e>
			conv->invalid = true;
   118f6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   118fa:	f043 0301 	orr.w	r3, r3, #1
   118fe:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   11902:	e7e2      	b.n	118ca <cbvprintf+0x36e>
		conv->specifier_cat = SPECIFIER_PTR;
   11904:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
   11908:	2203      	movs	r2, #3
   1190a:	f362 0302 	bfi	r3, r2, #0, #3
   1190e:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		if (conv->length_mod == LENGTH_UPPER_L) {
   11912:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   11916:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1191a:	f1a3 0740 	sub.w	r7, r3, #64	; 0x40
   1191e:	427b      	negs	r3, r7
   11920:	417b      	adcs	r3, r7
   11922:	e7db      	b.n	118dc <cbvprintf+0x380>
		conv->specifier_cat = SPECIFIER_PTR;
   11924:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
   11928:	2203      	movs	r2, #3
   1192a:	f362 0302 	bfi	r3, r2, #0, #3
   1192e:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		if (conv->length_mod != LENGTH_NONE) {
   11932:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   11936:	f013 0f78 	tst.w	r3, #120	; 0x78
   1193a:	bf14      	ite	ne
   1193c:	2301      	movne	r3, #1
   1193e:	2300      	moveq	r3, #0
   11940:	e7cc      	b.n	118dc <cbvprintf+0x380>
			unsupported = true;
   11942:	2301      	movs	r3, #1
   11944:	e7ca      	b.n	118dc <cbvprintf+0x380>
		} else if (conv->width_present) {
   11946:	f99d 2058 	ldrsb.w	r2, [sp, #88]	; 0x58
   1194a:	2a00      	cmp	r2, #0
			width = conv->width_value;
   1194c:	bfb4      	ite	lt
   1194e:	f8dd a05c 	ldrlt.w	sl, [sp, #92]	; 0x5c
		int width = -1;
   11952:	f04f 3aff 	movge.w	sl, #4294967295
   11956:	e696      	b.n	11686 <cbvprintf+0x12a>
		} else if (conv->prec_present) {
   11958:	0799      	lsls	r1, r3, #30
   1195a:	f57f aea2 	bpl.w	116a2 <cbvprintf+0x146>
			precision = conv->prec_value;
   1195e:	9f18      	ldr	r7, [sp, #96]	; 0x60
		conv->pad0_value = 0;
   11960:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   11962:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
		    && (conv->specifier_cat == SPECIFIER_FP)
   11966:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   1196a:	f003 0307 	and.w	r3, r3, #7
   1196e:	2b04      	cmp	r3, #4
   11970:	d109      	bne.n	11986 <cbvprintf+0x42a>
		    && !conv->prec_present) {
   11972:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   11976:	079a      	lsls	r2, r3, #30
   11978:	d405      	bmi.n	11986 <cbvprintf+0x42a>
			if (conv->specifier_a) {
   1197a:	f99d 3059 	ldrsb.w	r3, [sp, #89]	; 0x59
				precision = 6;
   1197e:	2b00      	cmp	r3, #0
   11980:	bfb4      	ite	lt
   11982:	270d      	movlt	r7, #13
   11984:	2706      	movge	r7, #6
			= (enum specifier_cat_enum)conv->specifier_cat;
   11986:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
			= (enum length_mod_enum)conv->length_mod;
   1198a:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
		enum specifier_cat_enum specifier_cat
   1198e:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   11992:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   11994:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   11998:	d136      	bne.n	11a08 <cbvprintf+0x4ac>
			switch (length_mod) {
   1199a:	1ecb      	subs	r3, r1, #3
   1199c:	2b04      	cmp	r3, #4
   1199e:	d820      	bhi.n	119e2 <cbvprintf+0x486>
   119a0:	e8df f003 	tbb	[pc, r3]
   119a4:	1f070703 	.word	0x1f070703
   119a8:	1f          	.byte	0x1f
   119a9:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   119aa:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
   119ae:	17d3      	asrs	r3, r2, #31
   119b0:	e004      	b.n	119bc <cbvprintf+0x460>
					(sint_value_type)va_arg(ap, intmax_t);
   119b2:	3407      	adds	r4, #7
   119b4:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   119b8:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
   119bc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		if (conv->invalid || conv->unsupported) {
   119c0:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
   119c4:	07b3      	lsls	r3, r6, #30
   119c6:	d055      	beq.n	11a74 <cbvprintf+0x518>
			OUTS(sp, fp);
   119c8:	9b07      	ldr	r3, [sp, #28]
   119ca:	9806      	ldr	r0, [sp, #24]
   119cc:	464a      	mov	r2, r9
   119ce:	4641      	mov	r1, r8
   119d0:	f00b fed8 	bl	1d784 <outs>
   119d4:	2800      	cmp	r0, #0
   119d6:	f2c0 837d 	blt.w	120d4 <cbvprintf+0xb78>
   119da:	4405      	add	r5, r0
			while (pad_len-- > 0) {
   119dc:	f8dd 901c 	ldr.w	r9, [sp, #28]
   119e0:	e5c4      	b.n	1156c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   119e2:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
   119e6:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   119e8:	ea4f 73e2 	mov.w	r3, r2, asr #31
   119ec:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
			if (length_mod == LENGTH_HH) {
   119f0:	d105      	bne.n	119fe <cbvprintf+0x4a2>
				value->uint = (unsigned char)value->uint;
   119f2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
				value->uint = (unsigned short)value->uint;
   119f6:	9314      	str	r3, [sp, #80]	; 0x50
   119f8:	2300      	movs	r3, #0
   119fa:	9315      	str	r3, [sp, #84]	; 0x54
   119fc:	e7e0      	b.n	119c0 <cbvprintf+0x464>
			} else if (length_mod == LENGTH_H) {
   119fe:	2902      	cmp	r1, #2
   11a00:	d1de      	bne.n	119c0 <cbvprintf+0x464>
				value->sint = (short)value->sint;
   11a02:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	; 0x50
   11a06:	e7d2      	b.n	119ae <cbvprintf+0x452>
		} else if (specifier_cat == SPECIFIER_UINT) {
   11a08:	2b02      	cmp	r3, #2
   11a0a:	d123      	bne.n	11a54 <cbvprintf+0x4f8>
			switch (length_mod) {
   11a0c:	1ecb      	subs	r3, r1, #3
   11a0e:	2b04      	cmp	r3, #4
   11a10:	d813      	bhi.n	11a3a <cbvprintf+0x4de>
   11a12:	e8df f003 	tbb	[pc, r3]
   11a16:	0a03      	.short	0x0a03
   11a18:	120a      	.short	0x120a
   11a1a:	12          	.byte	0x12
   11a1b:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   11a1c:	6822      	ldr	r2, [r4, #0]
   11a1e:	9214      	str	r2, [sp, #80]	; 0x50
   11a20:	2300      	movs	r3, #0
   11a22:	1d20      	adds	r0, r4, #4
   11a24:	9315      	str	r3, [sp, #84]	; 0x54
					(uint_value_type)va_arg(ap, size_t);
   11a26:	4604      	mov	r4, r0
   11a28:	e7ca      	b.n	119c0 <cbvprintf+0x464>
					(uint_value_type)va_arg(ap,
   11a2a:	3407      	adds	r4, #7
   11a2c:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
   11a30:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   11a34:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
				break;
   11a38:	e7f5      	b.n	11a26 <cbvprintf+0x4ca>
					(uint_value_type)va_arg(ap, size_t);
   11a3a:	f854 3b04 	ldr.w	r3, [r4], #4
   11a3e:	9314      	str	r3, [sp, #80]	; 0x50
			if (length_mod == LENGTH_HH) {
   11a40:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   11a42:	f04f 0300 	mov.w	r3, #0
   11a46:	9315      	str	r3, [sp, #84]	; 0x54
			if (length_mod == LENGTH_HH) {
   11a48:	d0d3      	beq.n	119f2 <cbvprintf+0x496>
			} else if (length_mod == LENGTH_H) {
   11a4a:	2902      	cmp	r1, #2
   11a4c:	d1b8      	bne.n	119c0 <cbvprintf+0x464>
				value->uint = (unsigned short)value->uint;
   11a4e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   11a52:	e7d0      	b.n	119f6 <cbvprintf+0x49a>
		} else if (specifier_cat == SPECIFIER_FP) {
   11a54:	2b04      	cmp	r3, #4
   11a56:	d107      	bne.n	11a68 <cbvprintf+0x50c>
			if (length_mod == LENGTH_UPPER_L) {
   11a58:	3407      	adds	r4, #7
   11a5a:	f024 0407 	bic.w	r4, r4, #7
   11a5e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
   11a62:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   11a66:	e7ab      	b.n	119c0 <cbvprintf+0x464>
		} else if (specifier_cat == SPECIFIER_PTR) {
   11a68:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   11a6a:	bf04      	itt	eq
   11a6c:	f854 3b04 	ldreq.w	r3, [r4], #4
   11a70:	9314      	streq	r3, [sp, #80]	; 0x50
   11a72:	e7a5      	b.n	119c0 <cbvprintf+0x464>
		switch (conv->specifier) {
   11a74:	f89d 905b 	ldrb.w	r9, [sp, #91]	; 0x5b
   11a78:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
   11a7c:	d8ae      	bhi.n	119dc <cbvprintf+0x480>
   11a7e:	f1b9 0f57 	cmp.w	r9, #87	; 0x57
   11a82:	f200 80a6 	bhi.w	11bd2 <cbvprintf+0x676>
   11a86:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
   11a8a:	f000 80ed 	beq.w	11c68 <cbvprintf+0x70c>
   11a8e:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
   11a92:	d9a3      	bls.n	119dc <cbvprintf+0x480>
   11a94:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
   11a98:	d003      	beq.n	11aa2 <cbvprintf+0x546>
   11a9a:	f1a9 0345 	sub.w	r3, r9, #69	; 0x45
   11a9e:	2b02      	cmp	r3, #2
   11aa0:	d89c      	bhi.n	119dc <cbvprintf+0x480>
	} u = {
   11aa2:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
	if ((u.u64 & SIGN_MASK) != 0U) {
   11aa6:	2a00      	cmp	r2, #0
   11aa8:	f173 0100 	sbcs.w	r1, r3, #0
   11aac:	f2c0 8186 	blt.w	11dbc <cbvprintf+0x860>
	} else if (conv->flag_plus) {
   11ab0:	0731      	lsls	r1, r6, #28
   11ab2:	f100 8185 	bmi.w	11dc0 <cbvprintf+0x864>
		*sign = ' ';
   11ab6:	f016 0610 	ands.w	r6, r6, #16
   11aba:	bf18      	it	ne
   11abc:	2620      	movne	r6, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   11abe:	f3c3 5b0a 	ubfx	fp, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   11ac2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   11ac6:	9204      	str	r2, [sp, #16]
   11ac8:	9305      	str	r3, [sp, #20]
   11aca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11ace:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	bool is_subnormal = (expo == 0) && (fract != 0);
   11ad2:	f1bb 0f00 	cmp.w	fp, #0
   11ad6:	f040 8175 	bne.w	11dc4 <cbvprintf+0x868>
   11ada:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   11ade:	4313      	orrs	r3, r2
   11ae0:	bf14      	ite	ne
   11ae2:	f04f 0c01 	movne.w	ip, #1
   11ae6:	f04f 0c00 	moveq.w	ip, #0
	fract <<= EXPONENT_BITS;
   11aea:	9905      	ldr	r1, [sp, #20]
   11aec:	02cb      	lsls	r3, r1, #11
   11aee:	9904      	ldr	r1, [sp, #16]
   11af0:	02ca      	lsls	r2, r1, #11
   11af2:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
	if ((expo | fract) != 0) {
   11af6:	4658      	mov	r0, fp
   11af8:	ea4b 0102 	orr.w	r1, fp, r2
   11afc:	910a      	str	r1, [sp, #40]	; 0x28
   11afe:	17c1      	asrs	r1, r0, #31
   11b00:	4319      	orrs	r1, r3
   11b02:	910b      	str	r1, [sp, #44]	; 0x2c
   11b04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
		c = 'f';
   11b08:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
   11b0c:	bf08      	it	eq
   11b0e:	f04f 0966 	moveq.w	r9, #102	; 0x66
	if ((expo | fract) != 0) {
   11b12:	4301      	orrs	r1, r0
	fract &= ~SIGN_MASK;
   11b14:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if ((expo | fract) != 0) {
   11b18:	f000 81c8 	beq.w	11eac <cbvprintf+0x950>
		if (is_subnormal) {
   11b1c:	f1bc 0f00 	cmp.w	ip, #0
   11b20:	f040 8188 	bne.w	11e34 <cbvprintf+0x8d8>
		fract |= BIT_63;
   11b24:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11b26:	9302      	str	r3, [sp, #8]
   11b28:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11b2e:	9303      	str	r3, [sp, #12]
   11b30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   11b34:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   11b38:	2300      	movs	r3, #0
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   11b3a:	f2ab 3bfe 	subw	fp, fp, #1022	; 0x3fe
		fract |= BIT_63;
   11b3e:	461a      	mov	r2, r3
		fract *= 5U;
   11b40:	2105      	movs	r1, #5
	while (expo < -2) {
   11b42:	f11b 0f02 	cmn.w	fp, #2
   11b46:	f2c0 817e 	blt.w	11e46 <cbvprintf+0x8ea>
   11b4a:	b11b      	cbz	r3, 11b54 <cbvprintf+0x5f8>
   11b4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   11b50:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	while (expo > 0) {
   11b54:	f1bb 0f00 	cmp.w	fp, #0
   11b58:	e9dd 3110 	ldrd	r3, r1, [sp, #64]	; 0x40
   11b5c:	f300 818e 	bgt.w	11e7c <cbvprintf+0x920>
	fract >>= (4 - expo);
   11b60:	9911      	ldr	r1, [sp, #68]	; 0x44
   11b62:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11b64:	f1cb 0004 	rsb	r0, fp, #4
   11b68:	f10b 0b1c 	add.w	fp, fp, #28
   11b6c:	fa01 fb0b 	lsl.w	fp, r1, fp
   11b70:	f1a0 0c20 	sub.w	ip, r0, #32
   11b74:	40c3      	lsrs	r3, r0
   11b76:	fa21 fc0c 	lsr.w	ip, r1, ip
   11b7a:	ea43 030b 	orr.w	r3, r3, fp
   11b7e:	ea43 030c 	orr.w	r3, r3, ip
   11b82:	40c1      	lsrs	r1, r0
   11b84:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
	if ((c == 'g') || (c == 'G')) {
   11b88:	f009 03df 	and.w	r3, r9, #223	; 0xdf
   11b8c:	2b47      	cmp	r3, #71	; 0x47
   11b8e:	f040 8194 	bne.w	11eba <cbvprintf+0x95e>
		if (decexp < (-4 + 1) || decexp > precision) {
   11b92:	1cd0      	adds	r0, r2, #3
   11b94:	db02      	blt.n	11b9c <cbvprintf+0x640>
   11b96:	4297      	cmp	r7, r2
   11b98:	f280 818b 	bge.w	11eb2 <cbvprintf+0x956>
			c += 'e' - 'g';  /* e or E */
   11b9c:	f1a9 0902 	sub.w	r9, r9, #2
			if (precision > 0) {
   11ba0:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
   11ba2:	fa5f f989 	uxtb.w	r9, r9
			if (precision > 0) {
   11ba6:	dd00      	ble.n	11baa <cbvprintf+0x64e>
				precision--;
   11ba8:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
   11baa:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   11bae:	0699      	lsls	r1, r3, #26
   11bb0:	f100 8183 	bmi.w	11eba <cbvprintf+0x95e>
   11bb4:	2f00      	cmp	r7, #0
   11bb6:	bfd4      	ite	le
   11bb8:	2300      	movle	r3, #0
   11bba:	2301      	movgt	r3, #1
	if (c == 'f') {
   11bbc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
	bool prune_zero = false;
   11bc0:	930c      	str	r3, [sp, #48]	; 0x30
	if (c == 'f') {
   11bc2:	f040 817c 	bne.w	11ebe <cbvprintf+0x962>
		if (decimals < 0) {
   11bc6:	19d3      	adds	r3, r2, r7
   11bc8:	f140 817a 	bpl.w	11ec0 <cbvprintf+0x964>
			decimals = 0;
   11bcc:	f04f 0b00 	mov.w	fp, #0
   11bd0:	e17a      	b.n	11ec8 <cbvprintf+0x96c>
   11bd2:	f1a9 0358 	sub.w	r3, r9, #88	; 0x58
   11bd6:	2b20      	cmp	r3, #32
   11bd8:	f63f af00 	bhi.w	119dc <cbvprintf+0x480>
   11bdc:	a201      	add	r2, pc, #4	; (adr r2, 11be4 <cbvprintf+0x688>)
   11bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11be2:	bf00      	nop
   11be4:	00011d5d 	.word	0x00011d5d
   11be8:	000119dd 	.word	0x000119dd
   11bec:	000119dd 	.word	0x000119dd
   11bf0:	000119dd 	.word	0x000119dd
   11bf4:	000119dd 	.word	0x000119dd
   11bf8:	000119dd 	.word	0x000119dd
   11bfc:	000119dd 	.word	0x000119dd
   11c00:	000119dd 	.word	0x000119dd
   11c04:	000119dd 	.word	0x000119dd
   11c08:	00011aa3 	.word	0x00011aa3
   11c0c:	000119dd 	.word	0x000119dd
   11c10:	00011c95 	.word	0x00011c95
   11c14:	00011cfd 	.word	0x00011cfd
   11c18:	00011aa3 	.word	0x00011aa3
   11c1c:	00011aa3 	.word	0x00011aa3
   11c20:	00011aa3 	.word	0x00011aa3
   11c24:	000119dd 	.word	0x000119dd
   11c28:	00011cfd 	.word	0x00011cfd
   11c2c:	000119dd 	.word	0x000119dd
   11c30:	000119dd 	.word	0x000119dd
   11c34:	000119dd 	.word	0x000119dd
   11c38:	000119dd 	.word	0x000119dd
   11c3c:	00011d93 	.word	0x00011d93
   11c40:	00011d5d 	.word	0x00011d5d
   11c44:	00011d61 	.word	0x00011d61
   11c48:	000119dd 	.word	0x000119dd
   11c4c:	000119dd 	.word	0x000119dd
   11c50:	00011c6f 	.word	0x00011c6f
   11c54:	000119dd 	.word	0x000119dd
   11c58:	00011d5d 	.word	0x00011d5d
   11c5c:	000119dd 	.word	0x000119dd
   11c60:	000119dd 	.word	0x000119dd
   11c64:	00011d5d 	.word	0x00011d5d
			OUTC('%');
   11c68:	4641      	mov	r1, r8
   11c6a:	4648      	mov	r0, r9
   11c6c:	e48a      	b.n	11584 <cbvprintf+0x28>
			if (precision >= 0) {
   11c6e:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   11c70:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
			if (precision >= 0) {
   11c74:	db0a      	blt.n	11c8c <cbvprintf+0x730>
				len = strnlen(bps, precision);
   11c76:	4639      	mov	r1, r7
   11c78:	4648      	mov	r0, r9
   11c7a:	f00e ff5c 	bl	20b36 <strnlen>
			bpe = bps + len;
   11c7e:	eb09 0b00 	add.w	fp, r9, r0
		char sign = 0;
   11c82:	2600      	movs	r6, #0
		if (bps == NULL) {
   11c84:	f1b9 0f00 	cmp.w	r9, #0
   11c88:	d10c      	bne.n	11ca4 <cbvprintf+0x748>
   11c8a:	e6a7      	b.n	119dc <cbvprintf+0x480>
				len = strlen(bps);
   11c8c:	4648      	mov	r0, r9
   11c8e:	f7fa fb35 	bl	c2fc <strlen>
   11c92:	e7f4      	b.n	11c7e <cbvprintf+0x722>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   11c94:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11c96:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		char sign = 0;
   11c9a:	2600      	movs	r6, #0
			bpe = buf + 1;
   11c9c:	f10d 0b6d 	add.w	fp, sp, #109	; 0x6d
				bps = encode_float(value->dbl, conv, precision,
   11ca0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
		size_t nj_len = (bpe - bps);
   11ca4:	ebab 0209 	sub.w	r2, fp, r9
		if (sign != 0) {
   11ca8:	b106      	cbz	r6, 11cac <cbvprintf+0x750>
			nj_len += 1U;
   11caa:	3201      	adds	r2, #1
		if (conv->altform_0c) {
   11cac:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
   11cb0:	06c3      	lsls	r3, r0, #27
   11cb2:	f140 8203 	bpl.w	120bc <cbvprintf+0xb60>
			nj_len += 2U;
   11cb6:	3202      	adds	r2, #2
		nj_len += conv->pad0_value;
   11cb8:	9917      	ldr	r1, [sp, #92]	; 0x5c
		if (conv->pad_fp) {
   11cba:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
   11cbc:	440a      	add	r2, r1
			nj_len += conv->pad0_pre_exp;
   11cbe:	bf44      	itt	mi
   11cc0:	9918      	ldrmi	r1, [sp, #96]	; 0x60
   11cc2:	1852      	addmi	r2, r2, r1
		if (width > 0) {
   11cc4:	f1ba 0f00 	cmp.w	sl, #0
   11cc8:	f340 8211 	ble.w	120ee <cbvprintf+0xb92>
			width -= (int)nj_len;
   11ccc:	ebaa 0a02 	sub.w	sl, sl, r2
			if (!conv->flag_dash) {
   11cd0:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   11cd4:	0751      	lsls	r1, r2, #29
   11cd6:	f3c2 0780 	ubfx	r7, r2, #2, #1
   11cda:	f100 8208 	bmi.w	120ee <cbvprintf+0xb92>
				if (conv->flag_zero) {
   11cde:	0653      	lsls	r3, r2, #25
   11ce0:	f140 81fb 	bpl.w	120da <cbvprintf+0xb7e>
					if (sign != 0) {
   11ce4:	b146      	cbz	r6, 11cf8 <cbvprintf+0x79c>
						OUTC(sign);
   11ce6:	9b06      	ldr	r3, [sp, #24]
   11ce8:	4641      	mov	r1, r8
   11cea:	4630      	mov	r0, r6
   11cec:	4798      	blx	r3
   11cee:	2800      	cmp	r0, #0
   11cf0:	f2c0 81f0 	blt.w	120d4 <cbvprintf+0xb78>
   11cf4:	3501      	adds	r5, #1
						sign = 0;
   11cf6:	463e      	mov	r6, r7
					pad = '0';
   11cf8:	2730      	movs	r7, #48	; 0x30
   11cfa:	e1ef      	b.n	120dc <cbvprintf+0xb80>
			if (conv->flag_plus) {
   11cfc:	0730      	lsls	r0, r6, #28
   11cfe:	d42b      	bmi.n	11d58 <cbvprintf+0x7fc>
				sign = ' ';
   11d00:	f016 0610 	ands.w	r6, r6, #16
   11d04:	bf18      	it	ne
   11d06:	2620      	movne	r6, #32
			sint = value->sint;
   11d08:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
			if (sint < 0) {
   11d0c:	2a00      	cmp	r2, #0
   11d0e:	f173 0100 	sbcs.w	r1, r3, #0
   11d12:	da05      	bge.n	11d20 <cbvprintf+0x7c4>
				value->uint = (uint_value_type)-sint;
   11d14:	4252      	negs	r2, r2
   11d16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   11d1a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
				sign = '-';
   11d1e:	262d      	movs	r6, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
   11d20:	f10d 0385 	add.w	r3, sp, #133	; 0x85
   11d24:	9300      	str	r3, [sp, #0]
   11d26:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   11d2a:	ab1b      	add	r3, sp, #108	; 0x6c
   11d2c:	aa16      	add	r2, sp, #88	; 0x58
   11d2e:	f7ff fbc5 	bl	114bc <encode_uint>
   11d32:	4681      	mov	r9, r0
			if (precision >= 0) {
   11d34:	2f00      	cmp	r7, #0
   11d36:	f10d 0385 	add.w	r3, sp, #133	; 0x85
   11d3a:	db0b      	blt.n	11d54 <cbvprintf+0x7f8>
				conv->flag_zero = false;
   11d3c:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
				size_t len = bpe - bps;
   11d40:	eba3 0209 	sub.w	r2, r3, r9
				conv->flag_zero = false;
   11d44:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
   11d48:	4297      	cmp	r7, r2
				conv->flag_zero = false;
   11d4a:	f88d 1058 	strb.w	r1, [sp, #88]	; 0x58
				if (len < (size_t)precision) {
   11d4e:	d901      	bls.n	11d54 <cbvprintf+0x7f8>
					conv->pad0_value = precision - (int)len;
   11d50:	1abf      	subs	r7, r7, r2
   11d52:	9717      	str	r7, [sp, #92]	; 0x5c
		const char *bpe = buf + sizeof(buf);
   11d54:	469b      	mov	fp, r3
   11d56:	e795      	b.n	11c84 <cbvprintf+0x728>
				sign = '+';
   11d58:	262b      	movs	r6, #43	; 0x2b
   11d5a:	e7d5      	b.n	11d08 <cbvprintf+0x7ac>
		switch (conv->specifier) {
   11d5c:	2600      	movs	r6, #0
   11d5e:	e7df      	b.n	11d20 <cbvprintf+0x7c4>
			if (value->ptr != NULL) {
   11d60:	9814      	ldr	r0, [sp, #80]	; 0x50
   11d62:	2800      	cmp	r0, #0
   11d64:	f000 819f 	beq.w	120a6 <cbvprintf+0xb4a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11d68:	f10d 0385 	add.w	r3, sp, #133	; 0x85
   11d6c:	9300      	str	r3, [sp, #0]
   11d6e:	aa16      	add	r2, sp, #88	; 0x58
   11d70:	ab1b      	add	r3, sp, #108	; 0x6c
   11d72:	2100      	movs	r1, #0
   11d74:	f7ff fba2 	bl	114bc <encode_uint>
				conv->altform_0c = true;
   11d78:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
   11d7c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   11d80:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   11d84:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11d88:	4681      	mov	r9, r0
				conv->altform_0c = true;
   11d8a:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
		char sign = 0;
   11d8e:	2600      	movs	r6, #0
				goto prec_int_pad0;
   11d90:	e7d0      	b.n	11d34 <cbvprintf+0x7d8>
				store_count(conv, value->ptr, count);
   11d92:	9b14      	ldr	r3, [sp, #80]	; 0x50
	switch ((enum length_mod_enum)conv->length_mod) {
   11d94:	2907      	cmp	r1, #7
   11d96:	f63f ae21 	bhi.w	119dc <cbvprintf+0x480>
   11d9a:	e8df f001 	tbb	[pc, r1]
   11d9e:	040d      	.short	0x040d
   11da0:	08080d06 	.word	0x08080d06
   11da4:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   11da6:	701d      	strb	r5, [r3, #0]
		break;
   11da8:	e618      	b.n	119dc <cbvprintf+0x480>
		*(short *)dp = (short)count;
   11daa:	801d      	strh	r5, [r3, #0]
		break;
   11dac:	e616      	b.n	119dc <cbvprintf+0x480>
		*(intmax_t *)dp = (intmax_t)count;
   11dae:	4628      	mov	r0, r5
   11db0:	17e9      	asrs	r1, r5, #31
   11db2:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   11db6:	e611      	b.n	119dc <cbvprintf+0x480>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   11db8:	601d      	str	r5, [r3, #0]
		break;
   11dba:	e60f      	b.n	119dc <cbvprintf+0x480>
		*sign = '-';
   11dbc:	262d      	movs	r6, #45	; 0x2d
   11dbe:	e67e      	b.n	11abe <cbvprintf+0x562>
		*sign = '+';
   11dc0:	262b      	movs	r6, #43	; 0x2b
   11dc2:	e67c      	b.n	11abe <cbvprintf+0x562>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   11dc4:	f240 73ff 	movw	r3, #2047	; 0x7ff
   11dc8:	459b      	cmp	fp, r3
   11dca:	d12e      	bne.n	11e2a <cbvprintf+0x8ce>
		if (fract == 0) {
   11dcc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   11dd0:	4bb8      	ldr	r3, [pc, #736]	; (120b4 <cbvprintf+0xb58>)
   11dd2:	f819 3003 	ldrb.w	r3, [r9, r3]
   11dd6:	430a      	orrs	r2, r1
   11dd8:	f003 0303 	and.w	r3, r3, #3
   11ddc:	d117      	bne.n	11e0e <cbvprintf+0x8b2>
			if (isupper((int)c)) {
   11dde:	2b01      	cmp	r3, #1
				*buf++ = 'I';
   11de0:	bf0b      	itete	eq
   11de2:	f644 6349 	movweq	r3, #20041	; 0x4e49
				*buf++ = 'i';
   11de6:	f646 6369 	movwne	r3, #28265	; 0x6e69
				*buf++ = 'I';
   11dea:	f8ad 306c 	strheq.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'i';
   11dee:	f8ad 306c 	strhne.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'F';
   11df2:	bf0c      	ite	eq
   11df4:	2346      	moveq	r3, #70	; 0x46
				*buf++ = 'f';
   11df6:	2366      	movne	r3, #102	; 0x66
				*buf++ = 'n';
   11df8:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
		conv->flag_zero = false;
   11dfc:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   11e00:	f36f 1386 	bfc	r3, #6, #1
   11e04:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		*bpe = buf;
   11e08:	f10d 0b6f 	add.w	fp, sp, #111	; 0x6f
		return bps;
   11e0c:	e748      	b.n	11ca0 <cbvprintf+0x744>
			if (isupper((int)c)) {
   11e0e:	2b01      	cmp	r3, #1
				*buf++ = 'N';
   11e10:	bf0b      	itete	eq
   11e12:	f244 134e 	movweq	r3, #16718	; 0x414e
				*buf++ = 'n';
   11e16:	f246 136e 	movwne	r3, #24942	; 0x616e
				*buf++ = 'N';
   11e1a:	f8ad 306c 	strheq.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'n';
   11e1e:	f8ad 306c 	strhne.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'N';
   11e22:	bf0c      	ite	eq
   11e24:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'n';
   11e26:	236e      	movne	r3, #110	; 0x6e
   11e28:	e7e6      	b.n	11df8 <cbvprintf+0x89c>
	bool is_subnormal = (expo == 0) && (fract != 0);
   11e2a:	f04f 0c00 	mov.w	ip, #0
   11e2e:	e65c      	b.n	11aea <cbvprintf+0x58e>
				expo--;
   11e30:	f10b 3bff 	add.w	fp, fp, #4294967295
			while (((fract <<= 1) & BIT_63) == 0) {
   11e34:	1892      	adds	r2, r2, r2
   11e36:	415b      	adcs	r3, r3
   11e38:	2a00      	cmp	r2, #0
   11e3a:	f173 0100 	sbcs.w	r1, r3, #0
   11e3e:	daf7      	bge.n	11e30 <cbvprintf+0x8d4>
   11e40:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   11e44:	e66e      	b.n	11b24 <cbvprintf+0x5c8>
			fract >>= 1;
   11e46:	9b02      	ldr	r3, [sp, #8]
   11e48:	9803      	ldr	r0, [sp, #12]
   11e4a:	085b      	lsrs	r3, r3, #1
   11e4c:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
   11e50:	0840      	lsrs	r0, r0, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   11e52:	f1b0 3f33 	cmp.w	r0, #858993459	; 0x33333333
   11e56:	46de      	mov	lr, fp
			fract >>= 1;
   11e58:	e9cd 3002 	strd	r3, r0, [sp, #8]
			expo++;
   11e5c:	f10b 0b01 	add.w	fp, fp, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   11e60:	d2f1      	bcs.n	11e46 <cbvprintf+0x8ea>
		fract *= 5U;
   11e62:	fba3 bc01 	umull	fp, ip, r3, r1
   11e66:	e9cd bc02 	strd	fp, ip, [sp, #8]
   11e6a:	9b03      	ldr	r3, [sp, #12]
   11e6c:	4348      	muls	r0, r1
   11e6e:	18c3      	adds	r3, r0, r3
   11e70:	9303      	str	r3, [sp, #12]
		expo++;
   11e72:	f10e 0b02 	add.w	fp, lr, #2
		decexp--;
   11e76:	3a01      	subs	r2, #1
   11e78:	2301      	movs	r3, #1
   11e7a:	e662      	b.n	11b42 <cbvprintf+0x5e6>
		fract += 2;
   11e7c:	3302      	adds	r3, #2
   11e7e:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
   11e82:	a810      	add	r0, sp, #64	; 0x40
		fract += 2;
   11e84:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
   11e88:	920c      	str	r2, [sp, #48]	; 0x30
		_ldiv5(&fract);
   11e8a:	f00b fc44 	bl	1d716 <_ldiv5>
		decexp++;
   11e8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11e90:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
		expo--;
   11e94:	f10b 3bff 	add.w	fp, fp, #4294967295
		decexp++;
   11e98:	3201      	adds	r2, #1
			fract <<= 1;
   11e9a:	1800      	adds	r0, r0, r0
   11e9c:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
   11e9e:	2800      	cmp	r0, #0
   11ea0:	f171 0300 	sbcs.w	r3, r1, #0
			expo--;
   11ea4:	f10b 3bff 	add.w	fp, fp, #4294967295
		} while (!(fract & BIT_63));
   11ea8:	daf7      	bge.n	11e9a <cbvprintf+0x93e>
   11eaa:	e651      	b.n	11b50 <cbvprintf+0x5f4>
   11eac:	2200      	movs	r2, #0
   11eae:	4693      	mov	fp, r2
   11eb0:	e656      	b.n	11b60 <cbvprintf+0x604>
			precision -= decexp;
   11eb2:	1abf      	subs	r7, r7, r2
			c = 'f';
   11eb4:	f04f 0966 	mov.w	r9, #102	; 0x66
   11eb8:	e677      	b.n	11baa <cbvprintf+0x64e>
	bool prune_zero = false;
   11eba:	2300      	movs	r3, #0
   11ebc:	e67e      	b.n	11bbc <cbvprintf+0x660>
		decimals = precision + 1;
   11ebe:	1c7b      	adds	r3, r7, #1
	if (decimals > 16) {
   11ec0:	2b10      	cmp	r3, #16
   11ec2:	bfa8      	it	ge
   11ec4:	2310      	movge	r3, #16
   11ec6:	469b      	mov	fp, r3
   11ec8:	2110      	movs	r1, #16
   11eca:	910f      	str	r1, [sp, #60]	; 0x3c
	uint64_t round = BIT64(59); /* 0.5 */
   11ecc:	2000      	movs	r0, #0
   11ece:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   11ed2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	while (decimals--) {
   11ed6:	f10b 3bff 	add.w	fp, fp, #4294967295
   11eda:	f1bb 3fff 	cmp.w	fp, #4294967295
   11ede:	e9dd 1012 	ldrd	r1, r0, [sp, #72]	; 0x48
   11ee2:	d11f      	bne.n	11f24 <cbvprintf+0x9c8>
	fract += round;
   11ee4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11ee6:	18cb      	adds	r3, r1, r3
   11ee8:	9308      	str	r3, [sp, #32]
   11eea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11eec:	eb40 0303 	adc.w	r3, r0, r3
   11ef0:	9309      	str	r3, [sp, #36]	; 0x24
	if (fract >= BIT64(60)) {
   11ef2:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
   11ef6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
   11efa:	f04f 30ff 	mov.w	r0, #4294967295
   11efe:	4561      	cmp	r1, ip
   11f00:	bf08      	it	eq
   11f02:	4558      	cmpeq	r0, fp
   11f04:	d31a      	bcc.n	11f3c <cbvprintf+0x9e0>
	fract += round;
   11f06:	4658      	mov	r0, fp
   11f08:	4661      	mov	r1, ip
   11f0a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	if (c == 'f') {
   11f0e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   11f12:	d153      	bne.n	11fbc <cbvprintf+0xa60>
		if (decexp > 0) {
   11f14:	2a00      	cmp	r2, #0
   11f16:	dc20      	bgt.n	11f5a <cbvprintf+0x9fe>
			*buf++ = '0';
   11f18:	2330      	movs	r3, #48	; 0x30
   11f1a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   11f1e:	f10d 0b6d 	add.w	fp, sp, #109	; 0x6d
   11f22:	e02b      	b.n	11f7c <cbvprintf+0xa20>
	*v >>= 1;
   11f24:	0849      	lsrs	r1, r1, #1
   11f26:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
   11f2a:	0840      	lsrs	r0, r0, #1
   11f2c:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
	_ldiv5(v);
   11f30:	a812      	add	r0, sp, #72	; 0x48
   11f32:	920d      	str	r2, [sp, #52]	; 0x34
   11f34:	f00b fbef 	bl	1d716 <_ldiv5>
   11f38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
}
   11f3a:	e7cc      	b.n	11ed6 <cbvprintf+0x97a>
	*v >>= 1;
   11f3c:	9b08      	ldr	r3, [sp, #32]
   11f3e:	920d      	str	r2, [sp, #52]	; 0x34
   11f40:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11f42:	085b      	lsrs	r3, r3, #1
   11f44:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   11f48:	0851      	lsrs	r1, r2, #1
	_ldiv5(v);
   11f4a:	a810      	add	r0, sp, #64	; 0x40
	*v >>= 1;
   11f4c:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
	_ldiv5(v);
   11f50:	f00b fbe1 	bl	1d716 <_ldiv5>
		decexp++;
   11f54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11f56:	3201      	adds	r2, #1
   11f58:	e7d9      	b.n	11f0e <cbvprintf+0x9b2>
	char *buf = bps;
   11f5a:	f10d 0b6c 	add.w	fp, sp, #108	; 0x6c
			while (decexp > 0 && digit_count > 0) {
   11f5e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11f60:	2900      	cmp	r1, #0
   11f62:	dd09      	ble.n	11f78 <cbvprintf+0xa1c>
				*buf++ = _get_digit(&fract, &digit_count);
   11f64:	a90f      	add	r1, sp, #60	; 0x3c
   11f66:	a810      	add	r0, sp, #64	; 0x40
   11f68:	920d      	str	r2, [sp, #52]	; 0x34
   11f6a:	f00b fbf4 	bl	1d756 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   11f6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
				*buf++ = _get_digit(&fract, &digit_count);
   11f70:	f80b 0b01 	strb.w	r0, [fp], #1
			while (decexp > 0 && digit_count > 0) {
   11f74:	3a01      	subs	r2, #1
   11f76:	d1f2      	bne.n	11f5e <cbvprintf+0xa02>
			conv->pad0_value = decexp;
   11f78:	9217      	str	r2, [sp, #92]	; 0x5c
			decexp = 0;
   11f7a:	2200      	movs	r2, #0
		if (conv->flag_hash || (precision > 0)) {
   11f7c:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
   11f80:	0688      	lsls	r0, r1, #26
   11f82:	d401      	bmi.n	11f88 <cbvprintf+0xa2c>
   11f84:	2f00      	cmp	r7, #0
   11f86:	dd3f      	ble.n	12008 <cbvprintf+0xaac>
			*buf++ = '.';
   11f88:	465b      	mov	r3, fp
   11f8a:	212e      	movs	r1, #46	; 0x2e
   11f8c:	f803 1b01 	strb.w	r1, [r3], #1
		if (decexp < 0 && precision > 0) {
   11f90:	b192      	cbz	r2, 11fb8 <cbvprintf+0xa5c>
   11f92:	2f00      	cmp	r7, #0
   11f94:	dd75      	ble.n	12082 <cbvprintf+0xb26>
			conv->pad0_value = -decexp;
   11f96:	4251      	negs	r1, r2
   11f98:	42b9      	cmp	r1, r7
   11f9a:	bfa8      	it	ge
   11f9c:	4639      	movge	r1, r7
			conv->pad_postdp = (conv->pad0_value > 0);
   11f9e:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
			conv->pad0_value = -decexp;
   11fa2:	9117      	str	r1, [sp, #92]	; 0x5c
			conv->pad_postdp = (conv->pad0_value > 0);
   11fa4:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
   11fa6:	eba7 0701 	sub.w	r7, r7, r1
			conv->pad_postdp = (conv->pad0_value > 0);
   11faa:	bfd4      	ite	le
   11fac:	2100      	movle	r1, #0
   11fae:	2101      	movgt	r1, #1
   11fb0:	f361 1045 	bfi	r0, r1, #5, #1
   11fb4:	f88d 005a 	strb.w	r0, [sp, #90]	; 0x5a
			*buf++ = '.';
   11fb8:	469b      	mov	fp, r3
   11fba:	e020      	b.n	11ffe <cbvprintf+0xaa2>
		*buf = _get_digit(&fract, &digit_count);
   11fbc:	a90f      	add	r1, sp, #60	; 0x3c
   11fbe:	a810      	add	r0, sp, #64	; 0x40
   11fc0:	920d      	str	r2, [sp, #52]	; 0x34
   11fc2:	f00b fbc8 	bl	1d756 <_get_digit>
		if (*buf++ != '0') {
   11fc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		if (conv->flag_hash || (precision > 0)) {
   11fc8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
		*buf = _get_digit(&fract, &digit_count);
   11fcc:	f88d 006c 	strb.w	r0, [sp, #108]	; 0x6c
		if (*buf++ != '0') {
   11fd0:	2830      	cmp	r0, #48	; 0x30
			decexp--;
   11fd2:	bf18      	it	ne
   11fd4:	f102 32ff 	addne.w	r2, r2, #4294967295
		if (conv->flag_hash || (precision > 0)) {
   11fd8:	0699      	lsls	r1, r3, #26
   11fda:	d401      	bmi.n	11fe0 <cbvprintf+0xa84>
   11fdc:	2f00      	cmp	r7, #0
   11fde:	dd52      	ble.n	12086 <cbvprintf+0xb2a>
			*buf++ = '.';
   11fe0:	232e      	movs	r3, #46	; 0x2e
   11fe2:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
   11fe6:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
   11fea:	e7e5      	b.n	11fb8 <cbvprintf+0xa5c>
		*buf++ = _get_digit(&fract, &digit_count);
   11fec:	a90f      	add	r1, sp, #60	; 0x3c
   11fee:	a810      	add	r0, sp, #64	; 0x40
   11ff0:	920d      	str	r2, [sp, #52]	; 0x34
   11ff2:	f00b fbb0 	bl	1d756 <_get_digit>
   11ff6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11ff8:	f80b 0b01 	strb.w	r0, [fp], #1
		precision--;
   11ffc:	3f01      	subs	r7, #1
	while (precision > 0 && digit_count > 0) {
   11ffe:	2f00      	cmp	r7, #0
   12000:	dd02      	ble.n	12008 <cbvprintf+0xaac>
   12002:	990f      	ldr	r1, [sp, #60]	; 0x3c
   12004:	2900      	cmp	r1, #0
   12006:	dcf1      	bgt.n	11fec <cbvprintf+0xa90>
	if (prune_zero) {
   12008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1200a:	2b00      	cmp	r3, #0
   1200c:	d13e      	bne.n	1208c <cbvprintf+0xb30>
	conv->pad0_pre_exp = precision;
   1200e:	9718      	str	r7, [sp, #96]	; 0x60
	if ((c == 'e') || (c == 'E')) {
   12010:	f009 01df 	and.w	r1, r9, #223	; 0xdf
   12014:	2945      	cmp	r1, #69	; 0x45
   12016:	d122      	bne.n	1205e <cbvprintf+0xb02>
		if (decexp < 0) {
   12018:	2a00      	cmp	r2, #0
		*buf++ = c;
   1201a:	4658      	mov	r0, fp
			decexp = -decexp;
   1201c:	bfba      	itte	lt
   1201e:	4252      	neglt	r2, r2
			*buf++ = '-';
   12020:	212d      	movlt	r1, #45	; 0x2d
			*buf++ = '+';
   12022:	212b      	movge	r1, #43	; 0x2b
		if (decexp >= 100) {
   12024:	2a63      	cmp	r2, #99	; 0x63
		*buf++ = c;
   12026:	f800 9b02 	strb.w	r9, [r0], #2
			*buf++ = '-';
   1202a:	f88b 1001 	strb.w	r1, [fp, #1]
		if (decexp >= 100) {
   1202e:	dd0a      	ble.n	12046 <cbvprintf+0xaea>
			*buf++ = (decexp / 100) + '0';
   12030:	2764      	movs	r7, #100	; 0x64
   12032:	fb92 f1f7 	sdiv	r1, r2, r7
   12036:	f101 0c30 	add.w	ip, r1, #48	; 0x30
   1203a:	f10b 0003 	add.w	r0, fp, #3
   1203e:	f88b c002 	strb.w	ip, [fp, #2]
			decexp %= 100;
   12042:	fb07 2211 	mls	r2, r7, r1, r2
		*buf++ = (decexp / 10) + '0';
   12046:	270a      	movs	r7, #10
   12048:	4683      	mov	fp, r0
   1204a:	fb92 f1f7 	sdiv	r1, r2, r7
		*buf++ = (decexp % 10) + '0';
   1204e:	fb07 2211 	mls	r2, r7, r1, r2
		*buf++ = (decexp / 10) + '0';
   12052:	f101 0c30 	add.w	ip, r1, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   12056:	3230      	adds	r2, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   12058:	f80b cb02 	strb.w	ip, [fp], #2
		*buf++ = (decexp % 10) + '0';
   1205c:	7042      	strb	r2, [r0, #1]
		|| (conv->pad0_pre_exp > 0);
   1205e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   12060:	2a00      	cmp	r2, #0
   12062:	dc1e      	bgt.n	120a2 <cbvprintf+0xb46>
   12064:	9a18      	ldr	r2, [sp, #96]	; 0x60
   12066:	2a00      	cmp	r2, #0
   12068:	bfd4      	ite	le
   1206a:	2200      	movle	r2, #0
   1206c:	2201      	movgt	r2, #1
	conv->pad_fp = (conv->pad0_value > 0)
   1206e:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
   12072:	f362 1186 	bfi	r1, r2, #6, #1
	*buf = 0;
   12076:	2200      	movs	r2, #0
	conv->pad_fp = (conv->pad0_value > 0)
   12078:	f88d 105a 	strb.w	r1, [sp, #90]	; 0x5a
	*buf = 0;
   1207c:	f88b 2000 	strb.w	r2, [fp]
	return bps;
   12080:	e60e      	b.n	11ca0 <cbvprintf+0x744>
			*buf++ = '.';
   12082:	469b      	mov	fp, r3
   12084:	e7c0      	b.n	12008 <cbvprintf+0xaac>
		if (*buf++ != '0') {
   12086:	f10d 0b6d 	add.w	fp, sp, #109	; 0x6d
   1208a:	e7bd      	b.n	12008 <cbvprintf+0xaac>
		conv->pad0_pre_exp = 0;
   1208c:	2100      	movs	r1, #0
   1208e:	9118      	str	r1, [sp, #96]	; 0x60
		while (*--buf == '0') {
   12090:	4658      	mov	r0, fp
   12092:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
   12096:	2930      	cmp	r1, #48	; 0x30
   12098:	d0fa      	beq.n	12090 <cbvprintf+0xb34>
		if (*buf != '.') {
   1209a:	292e      	cmp	r1, #46	; 0x2e
   1209c:	bf18      	it	ne
   1209e:	4683      	movne	fp, r0
   120a0:	e7b6      	b.n	12010 <cbvprintf+0xab4>
		|| (conv->pad0_pre_exp > 0);
   120a2:	2201      	movs	r2, #1
   120a4:	e7e3      	b.n	1206e <cbvprintf+0xb12>
			bpe = bps + 5;
   120a6:	f8df b010 	ldr.w	fp, [pc, #16]	; 120b8 <cbvprintf+0xb5c>
		char sign = 0;
   120aa:	4606      	mov	r6, r0
			bps = "(nil)";
   120ac:	f1ab 0905 	sub.w	r9, fp, #5
   120b0:	e5f8      	b.n	11ca4 <cbvprintf+0x748>
   120b2:	bf00      	nop
   120b4:	00021f83 	.word	0x00021f83
   120b8:	00021bfe 	.word	0x00021bfe
		} else if (conv->altform_0) {
   120bc:	0707      	lsls	r7, r0, #28
			nj_len += 1U;
   120be:	bf48      	it	mi
   120c0:	3201      	addmi	r2, #1
   120c2:	e5f9      	b.n	11cb8 <cbvprintf+0x75c>
   120c4:	930c      	str	r3, [sp, #48]	; 0x30
					OUTC(pad);
   120c6:	4641      	mov	r1, r8
   120c8:	9b06      	ldr	r3, [sp, #24]
   120ca:	4638      	mov	r0, r7
   120cc:	4798      	blx	r3
   120ce:	2800      	cmp	r0, #0
   120d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   120d2:	da05      	bge.n	120e0 <cbvprintf+0xb84>
#undef OUTS
#undef OUTC
}
   120d4:	b023      	add	sp, #140	; 0x8c
   120d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   120da:	2720      	movs	r7, #32
   120dc:	eb0a 0305 	add.w	r3, sl, r5
   120e0:	4652      	mov	r2, sl
				while (width-- > 0) {
   120e2:	2a00      	cmp	r2, #0
   120e4:	eba3 050a 	sub.w	r5, r3, sl
   120e8:	f10a 3aff 	add.w	sl, sl, #4294967295
   120ec:	dcea      	bgt.n	120c4 <cbvprintf+0xb68>
		if (sign != 0) {
   120ee:	b136      	cbz	r6, 120fe <cbvprintf+0xba2>
			OUTC(sign);
   120f0:	9b06      	ldr	r3, [sp, #24]
   120f2:	4641      	mov	r1, r8
   120f4:	4630      	mov	r0, r6
   120f6:	4798      	blx	r3
   120f8:	2800      	cmp	r0, #0
   120fa:	dbeb      	blt.n	120d4 <cbvprintf+0xb78>
   120fc:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   120fe:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
   12102:	0650      	lsls	r0, r2, #25
   12104:	d57d      	bpl.n	12202 <cbvprintf+0xca6>
			if (conv->specifier_a) {
   12106:	f99d 2059 	ldrsb.w	r2, [sp, #89]	; 0x59
   1210a:	2a00      	cmp	r2, #0
   1210c:	db2c      	blt.n	12168 <cbvprintf+0xc0c>
   1210e:	eba5 0509 	sub.w	r5, r5, r9
				while (isdigit((int)*cp)) {
   12112:	f899 0000 	ldrb.w	r0, [r9]
   12116:	4b5b      	ldr	r3, [pc, #364]	; (12284 <cbvprintf+0xd28>)
   12118:	5cc2      	ldrb	r2, [r0, r3]
   1211a:	464e      	mov	r6, r9
   1211c:	0751      	lsls	r1, r2, #29
   1211e:	eb05 0706 	add.w	r7, r5, r6
   12122:	f109 0901 	add.w	r9, r9, #1
   12126:	d43f      	bmi.n	121a8 <cbvprintf+0xc4c>
				if (!conv->pad_postdp) {
   12128:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
				pad_len = conv->pad0_value;
   1212c:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
				if (!conv->pad_postdp) {
   12130:	0692      	lsls	r2, r2, #26
   12132:	d408      	bmi.n	12146 <cbvprintf+0xbea>
   12134:	eb09 0507 	add.w	r5, r9, r7
   12138:	464a      	mov	r2, r9
					while (pad_len-- > 0) {
   1213a:	2a00      	cmp	r2, #0
   1213c:	eba5 0709 	sub.w	r7, r5, r9
   12140:	f109 39ff 	add.w	r9, r9, #4294967295
   12144:	dc36      	bgt.n	121b4 <cbvprintf+0xc58>
				if (*cp == '.') {
   12146:	7830      	ldrb	r0, [r6, #0]
   12148:	282e      	cmp	r0, #46	; 0x2e
   1214a:	d10a      	bne.n	12162 <cbvprintf+0xc06>
					OUTC(*cp++);
   1214c:	9b06      	ldr	r3, [sp, #24]
   1214e:	4641      	mov	r1, r8
   12150:	4798      	blx	r3
						OUTC('0');
   12152:	2800      	cmp	r0, #0
   12154:	dbbe      	blt.n	120d4 <cbvprintf+0xb78>
					while (pad_len-- > 0) {
   12156:	f1b9 0f00 	cmp.w	r9, #0
						OUTC('0');
   1215a:	f107 0701 	add.w	r7, r7, #1
					while (pad_len-- > 0) {
   1215e:	dc30      	bgt.n	121c2 <cbvprintf+0xc66>
					OUTC(*cp++);
   12160:	3601      	adds	r6, #1
   12162:	46b1      	mov	r9, r6
   12164:	1bbf      	subs	r7, r7, r6
   12166:	e039      	b.n	121dc <cbvprintf+0xc80>
   12168:	eba5 0709 	sub.w	r7, r5, r9
   1216c:	464d      	mov	r5, r9
   1216e:	eb07 0609 	add.w	r6, r7, r9
				while (*cp != 'p') {
   12172:	f819 0b01 	ldrb.w	r0, [r9], #1
   12176:	2870      	cmp	r0, #112	; 0x70
   12178:	d110      	bne.n	1219c <cbvprintf+0xc40>
			while (pad_len-- > 0) {
   1217a:	9f18      	ldr	r7, [sp, #96]	; 0x60
   1217c:	4437      	add	r7, r6
   1217e:	1bba      	subs	r2, r7, r6
   12180:	2a00      	cmp	r2, #0
   12182:	dc35      	bgt.n	121f0 <cbvprintf+0xc94>
			OUTS(cp, bpe);
   12184:	9806      	ldr	r0, [sp, #24]
   12186:	465b      	mov	r3, fp
   12188:	462a      	mov	r2, r5
   1218a:	4641      	mov	r1, r8
   1218c:	f00b fafa 	bl	1d784 <outs>
   12190:	2800      	cmp	r0, #0
   12192:	db9f      	blt.n	120d4 <cbvprintf+0xb78>
   12194:	4430      	add	r0, r6
			while (pad_len-- > 0) {
   12196:	4605      	mov	r5, r0
   12198:	4482      	add	sl, r0
   1219a:	e06c      	b.n	12276 <cbvprintf+0xd1a>
					OUTC(*cp++);
   1219c:	9b06      	ldr	r3, [sp, #24]
   1219e:	4641      	mov	r1, r8
   121a0:	4798      	blx	r3
   121a2:	2800      	cmp	r0, #0
   121a4:	dae2      	bge.n	1216c <cbvprintf+0xc10>
   121a6:	e795      	b.n	120d4 <cbvprintf+0xb78>
					OUTC(*cp++);
   121a8:	9b06      	ldr	r3, [sp, #24]
   121aa:	4641      	mov	r1, r8
   121ac:	4798      	blx	r3
   121ae:	2800      	cmp	r0, #0
   121b0:	daaf      	bge.n	12112 <cbvprintf+0xbb6>
   121b2:	e78f      	b.n	120d4 <cbvprintf+0xb78>
						OUTC('0');
   121b4:	9b06      	ldr	r3, [sp, #24]
   121b6:	4641      	mov	r1, r8
   121b8:	2030      	movs	r0, #48	; 0x30
   121ba:	4798      	blx	r3
   121bc:	2800      	cmp	r0, #0
   121be:	dabb      	bge.n	12138 <cbvprintf+0xbdc>
   121c0:	e788      	b.n	120d4 <cbvprintf+0xb78>
						OUTC('0');
   121c2:	9b06      	ldr	r3, [sp, #24]
   121c4:	4641      	mov	r1, r8
   121c6:	2030      	movs	r0, #48	; 0x30
   121c8:	4798      	blx	r3
   121ca:	f109 39ff 	add.w	r9, r9, #4294967295
   121ce:	e7c0      	b.n	12152 <cbvprintf+0xbf6>
					OUTC(*cp++);
   121d0:	9b06      	ldr	r3, [sp, #24]
   121d2:	4641      	mov	r1, r8
   121d4:	4798      	blx	r3
   121d6:	2800      	cmp	r0, #0
   121d8:	f6ff af7c 	blt.w	120d4 <cbvprintf+0xb78>
				while (isdigit((int)*cp)) {
   121dc:	4b29      	ldr	r3, [pc, #164]	; (12284 <cbvprintf+0xd28>)
   121de:	464d      	mov	r5, r9
   121e0:	eb07 0609 	add.w	r6, r7, r9
   121e4:	f819 0b01 	ldrb.w	r0, [r9], #1
   121e8:	5cc2      	ldrb	r2, [r0, r3]
   121ea:	0753      	lsls	r3, r2, #29
   121ec:	d4f0      	bmi.n	121d0 <cbvprintf+0xc74>
   121ee:	e7c4      	b.n	1217a <cbvprintf+0xc1e>
				OUTC('0');
   121f0:	9b06      	ldr	r3, [sp, #24]
   121f2:	4641      	mov	r1, r8
   121f4:	2030      	movs	r0, #48	; 0x30
   121f6:	4798      	blx	r3
   121f8:	2800      	cmp	r0, #0
   121fa:	f6ff af6b 	blt.w	120d4 <cbvprintf+0xb78>
   121fe:	3601      	adds	r6, #1
   12200:	e7bd      	b.n	1217e <cbvprintf+0xc22>
			if (conv->altform_0c | conv->altform_0) {
   12202:	06d1      	lsls	r1, r2, #27
   12204:	d401      	bmi.n	1220a <cbvprintf+0xcae>
   12206:	0712      	lsls	r2, r2, #28
   12208:	d507      	bpl.n	1221a <cbvprintf+0xcbe>
				OUTC('0');
   1220a:	9b06      	ldr	r3, [sp, #24]
   1220c:	4641      	mov	r1, r8
   1220e:	2030      	movs	r0, #48	; 0x30
   12210:	4798      	blx	r3
   12212:	2800      	cmp	r0, #0
   12214:	f6ff af5e 	blt.w	120d4 <cbvprintf+0xb78>
   12218:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   1221a:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
   1221e:	06d3      	lsls	r3, r2, #27
   12220:	d508      	bpl.n	12234 <cbvprintf+0xcd8>
				OUTC(conv->specifier);
   12222:	f89d 005b 	ldrb.w	r0, [sp, #91]	; 0x5b
   12226:	9b06      	ldr	r3, [sp, #24]
   12228:	4641      	mov	r1, r8
   1222a:	4798      	blx	r3
   1222c:	2800      	cmp	r0, #0
   1222e:	f6ff af51 	blt.w	120d4 <cbvprintf+0xb78>
   12232:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   12234:	9f17      	ldr	r7, [sp, #92]	; 0x5c
   12236:	442f      	add	r7, r5
   12238:	1b7a      	subs	r2, r7, r5
   1223a:	2a00      	cmp	r2, #0
   1223c:	dc0a      	bgt.n	12254 <cbvprintf+0xcf8>
			OUTS(bps, bpe);
   1223e:	9806      	ldr	r0, [sp, #24]
   12240:	465b      	mov	r3, fp
   12242:	464a      	mov	r2, r9
   12244:	4641      	mov	r1, r8
   12246:	f00b fa9d 	bl	1d784 <outs>
   1224a:	2800      	cmp	r0, #0
   1224c:	f6ff af42 	blt.w	120d4 <cbvprintf+0xb78>
   12250:	4428      	add	r0, r5
   12252:	e7a0      	b.n	12196 <cbvprintf+0xc3a>
				OUTC('0');
   12254:	9b06      	ldr	r3, [sp, #24]
   12256:	4641      	mov	r1, r8
   12258:	2030      	movs	r0, #48	; 0x30
   1225a:	4798      	blx	r3
   1225c:	2800      	cmp	r0, #0
   1225e:	f6ff af39 	blt.w	120d4 <cbvprintf+0xb78>
   12262:	3501      	adds	r5, #1
   12264:	e7e8      	b.n	12238 <cbvprintf+0xcdc>
			OUTC(' ');
   12266:	9b06      	ldr	r3, [sp, #24]
   12268:	4641      	mov	r1, r8
   1226a:	2020      	movs	r0, #32
   1226c:	4798      	blx	r3
   1226e:	2800      	cmp	r0, #0
   12270:	f6ff af30 	blt.w	120d4 <cbvprintf+0xb78>
   12274:	3501      	adds	r5, #1
		while (width > 0) {
   12276:	ebaa 0305 	sub.w	r3, sl, r5
   1227a:	2b00      	cmp	r3, #0
   1227c:	dcf3      	bgt.n	12266 <cbvprintf+0xd0a>
   1227e:	f7ff bbad 	b.w	119dc <cbvprintf+0x480>
   12282:	bf00      	nop
   12284:	00021f83 	.word	0x00021f83

00012288 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   12288:	b508      	push	{r3, lr}
   1228a:	4604      	mov	r4, r0
   1228c:	f04f 0240 	mov.w	r2, #64	; 0x40
   12290:	f3ef 8311 	mrs	r3, BASEPRI
   12294:	f382 8811 	msr	BASEPRI, r2
   12298:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   1229c:	f00b fb41 	bl	1d922 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   122a0:	4620      	mov	r0, r4
   122a2:	f001 f873 	bl	1338c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   122a6:	4803      	ldr	r0, [pc, #12]	; (122b4 <sys_reboot+0x2c>)
   122a8:	f00a fea2 	bl	1cff0 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   122ac:	f000 fd92 	bl	12dd4 <arch_cpu_idle>
   122b0:	e7fc      	b.n	122ac <sys_reboot+0x24>
   122b2:	bf00      	nop
   122b4:	00021bff 	.word	0x00021bff

000122b8 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   122b8:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   122ba:	4c08      	ldr	r4, [pc, #32]	; (122dc <read_blvl+0x24>)
{
   122bc:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   122be:	7824      	ldrb	r4, [r4, #0]
   122c0:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   122c4:	2401      	movs	r4, #1
   122c6:	9402      	str	r4, [sp, #8]
   122c8:	f10d 0417 	add.w	r4, sp, #23
   122cc:	9401      	str	r4, [sp, #4]
   122ce:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   122d2:	9400      	str	r4, [sp, #0]
   122d4:	f00d fb32 	bl	1f93c <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   122d8:	b006      	add	sp, #24
   122da:	bd10      	pop	{r4, pc}
   122dc:	2000082c 	.word	0x2000082c

000122e0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   122e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   122e2:	4605      	mov	r5, r0
   122e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   122e8:	f3ef 8611 	mrs	r6, BASEPRI
   122ec:	f383 8811 	msr	BASEPRI, r3
   122f0:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   122f4:	4b0b      	ldr	r3, [pc, #44]	; (12324 <pm_state_notify+0x44>)
   122f6:	681c      	ldr	r4, [r3, #0]
   122f8:	2c00      	cmp	r4, #0
   122fa:	bf38      	it	cc
   122fc:	2400      	movcc	r4, #0
   122fe:	b15c      	cbz	r4, 12318 <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
   12300:	4f09      	ldr	r7, [pc, #36]	; (12328 <pm_state_notify+0x48>)
			callback = notifier->state_exit;
   12302:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   12306:	2d00      	cmp	r5, #0
   12308:	bf08      	it	eq
   1230a:	4613      	moveq	r3, r2
		if (callback) {
   1230c:	b10b      	cbz	r3, 12312 <pm_state_notify+0x32>
			callback(z_power_state.state);
   1230e:	7838      	ldrb	r0, [r7, #0]
   12310:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12312:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12314:	2c00      	cmp	r4, #0
   12316:	d1f4      	bne.n	12302 <pm_state_notify+0x22>
	__asm__ volatile(
   12318:	f386 8811 	msr	BASEPRI, r6
   1231c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   12320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12322:	bf00      	nop
   12324:	20001e20 	.word	0x20001e20
   12328:	20001e28 	.word	0x20001e28

0001232c <pm_system_resume>:

void pm_system_resume(void)
{
   1232c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   1232e:	4b0f      	ldr	r3, [pc, #60]	; (1236c <pm_system_resume+0x40>)
   12330:	681a      	ldr	r2, [r3, #0]
   12332:	b9ba      	cbnz	r2, 12364 <pm_system_resume+0x38>
		post_ops_done = 1;
   12334:	2201      	movs	r2, #1
   12336:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
   12338:	4a0d      	ldr	r2, [pc, #52]	; (12370 <pm_system_resume+0x44>)
   1233a:	ca07      	ldmia	r2, {r0, r1, r2}
   1233c:	ab01      	add	r3, sp, #4
   1233e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   12342:	4a0c      	ldr	r2, [pc, #48]	; (12374 <pm_system_resume+0x48>)
   12344:	b14a      	cbz	r2, 1235a <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
   12346:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1234a:	f00b fcec 	bl	1dd26 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   1234e:	2000      	movs	r0, #0
	}
}
   12350:	b005      	add	sp, #20
   12352:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
   12356:	f7ff bfc3 	b.w	122e0 <pm_state_notify>
   1235a:	f382 8811 	msr	BASEPRI, r2
   1235e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   12362:	e7f4      	b.n	1234e <pm_system_resume+0x22>
}
   12364:	b005      	add	sp, #20
   12366:	f85d fb04 	ldr.w	pc, [sp], #4
   1236a:	bf00      	nop
   1236c:	20000550 	.word	0x20000550
   12370:	20001e28 	.word	0x20001e28
   12374:	0001dd27 	.word	0x0001dd27

00012378 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   12378:	b5f0      	push	{r4, r5, r6, r7, lr}
   1237a:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
   1237c:	466e      	mov	r6, sp
   1237e:	4601      	mov	r1, r0
{
   12380:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
   12382:	4630      	mov	r0, r6
   12384:	f00b fa32 	bl	1d7ec <pm_policy_next_state>
   12388:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1238c:	4c17      	ldr	r4, [pc, #92]	; (123ec <pm_system_suspend+0x74>)
   1238e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   12392:	7820      	ldrb	r0, [r4, #0]
   12394:	b340      	cbz	r0, 123e8 <pm_system_suspend+0x70>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
   12396:	4b16      	ldr	r3, [pc, #88]	; (123f0 <pm_system_suspend+0x78>)
   12398:	2100      	movs	r1, #0
   1239a:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   1239c:	1c6b      	adds	r3, r5, #1
   1239e:	d00e      	beq.n	123be <pm_system_suspend+0x46>
			return (uint32_t)((t * to_hz + off) / from_hz);
   123a0:	4814      	ldr	r0, [pc, #80]	; (123f4 <pm_system_suspend+0x7c>)
   123a2:	4617      	mov	r7, r2
   123a4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   123a8:	2100      	movs	r1, #0
   123aa:	4a13      	ldr	r2, [pc, #76]	; (123f8 <pm_system_suspend+0x80>)
   123ac:	2300      	movs	r3, #0
   123ae:	fbe6 0107 	umlal	r0, r1, r6, r7
   123b2:	f7ee fdc9 	bl	f48 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   123b6:	2101      	movs	r1, #1
   123b8:	1a28      	subs	r0, r5, r0
   123ba:	f00e f9a8 	bl	2070e <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   123be:	f007 f81d 	bl	193fc <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
   123c2:	2001      	movs	r0, #1
   123c4:	f7ff ff8c 	bl	122e0 <pm_state_notify>
	pm_state_set(z_power_state);
   123c8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   123cc:	ab05      	add	r3, sp, #20
   123ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   123d2:	4a0a      	ldr	r2, [pc, #40]	; (123fc <pm_system_suspend+0x84>)
   123d4:	b11a      	cbz	r2, 123de <pm_system_suspend+0x66>
		pm_power_state_set(info);
   123d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   123da:	f00b fc91 	bl	1dd00 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   123de:	f7ff ffa5 	bl	1232c <pm_system_resume>
	k_sched_unlock();
   123e2:	f007 f8c3 	bl	1956c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
   123e6:	7820      	ldrb	r0, [r4, #0]
}
   123e8:	b009      	add	sp, #36	; 0x24
   123ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   123ec:	20001e28 	.word	0x20001e28
   123f0:	20000550 	.word	0x20000550
   123f4:	000f423f 	.word	0x000f423f
   123f8:	000f4240 	.word	0x000f4240
   123fc:	0001dd01 	.word	0x0001dd01

00012400 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   12400:	4a0e      	ldr	r2, [pc, #56]	; (1243c <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   12402:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   12404:	1a84      	subs	r4, r0, r2
   12406:	10a3      	asrs	r3, r4, #2
   12408:	4c0d      	ldr	r4, [pc, #52]	; (12440 <onoff_stop+0x40>)
   1240a:	435c      	muls	r4, r3
{
   1240c:	4605      	mov	r5, r0
   1240e:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
   12410:	200c      	movs	r0, #12
   12412:	fb00 2004 	mla	r0, r0, r4, r2
{
   12416:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
   12418:	2140      	movs	r1, #64	; 0x40
   1241a:	4408      	add	r0, r1
   1241c:	f00b f9f4 	bl	1d808 <set_off_state>
	if (err < 0) {
   12420:	1e01      	subs	r1, r0, #0
   12422:	db05      	blt.n	12430 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   12424:	4b07      	ldr	r3, [pc, #28]	; (12444 <onoff_stop+0x44>)
   12426:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1242a:	6863      	ldr	r3, [r4, #4]
   1242c:	4798      	blx	r3
	return 0;
   1242e:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   12430:	4628      	mov	r0, r5
   12432:	4633      	mov	r3, r6
}
   12434:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   12438:	4718      	bx	r3
   1243a:	bf00      	nop
   1243c:	20001e48 	.word	0x20001e48
   12440:	b6db6db7 	.word	0xb6db6db7
   12444:	000213dc 	.word	0x000213dc

00012448 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   12448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1244c:	4e10      	ldr	r6, [pc, #64]	; (12490 <onoff_start+0x48>)
   1244e:	1b84      	subs	r4, r0, r6
   12450:	10a3      	asrs	r3, r4, #2
   12452:	4c10      	ldr	r4, [pc, #64]	; (12494 <onoff_start+0x4c>)
   12454:	435c      	muls	r4, r3
   12456:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
   12458:	250c      	movs	r5, #12
   1245a:	4365      	muls	r5, r4
{
   1245c:	4680      	mov	r8, r0
	err = set_starting_state(&subdata->flags, ctx);
   1245e:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   12462:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
   12464:	4430      	add	r0, r6
   12466:	2140      	movs	r1, #64	; 0x40
   12468:	f00b f9e7 	bl	1d83a <set_starting_state>
	if (err < 0) {
   1246c:	1e01      	subs	r1, r0, #0
   1246e:	db09      	blt.n	12484 <onoff_start+0x3c>
	subdata->cb = cb;
   12470:	4a09      	ldr	r2, [pc, #36]	; (12498 <onoff_start+0x50>)
   12472:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
   12474:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   12478:	4b08      	ldr	r3, [pc, #32]	; (1249c <onoff_start+0x54>)
   1247a:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   1247e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   12482:	4718      	bx	r3
		notify(mgr, err);
   12484:	4640      	mov	r0, r8
   12486:	463b      	mov	r3, r7
}
   12488:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   1248c:	4718      	bx	r3
   1248e:	bf00      	nop
   12490:	20001e48 	.word	0x20001e48
   12494:	b6db6db7 	.word	0xb6db6db7
   12498:	0001d89d 	.word	0x0001d89d
   1249c:	000213dc 	.word	0x000213dc

000124a0 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   124a0:	2200      	movs	r2, #0
{
   124a2:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   124a4:	2101      	movs	r1, #1
{
   124a6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   124a8:	4610      	mov	r0, r2
   124aa:	f000 fc19 	bl	12ce0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   124ae:	2000      	movs	r0, #0
   124b0:	f000 fbe4 	bl	12c7c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   124b4:	480f      	ldr	r0, [pc, #60]	; (124f4 <clk_init+0x54>)
   124b6:	f005 fd27 	bl	17f08 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   124ba:	4b0f      	ldr	r3, [pc, #60]	; (124f8 <clk_init+0x58>)
   124bc:	4298      	cmp	r0, r3
   124be:	d115      	bne.n	124ec <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   124c0:	f00d fd0e 	bl	1fee0 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   124c4:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   124c6:	490d      	ldr	r1, [pc, #52]	; (124fc <clk_init+0x5c>)
   124c8:	4630      	mov	r0, r6
   124ca:	f00a fded 	bl	1d0a8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   124ce:	2800      	cmp	r0, #0
   124d0:	db0b      	blt.n	124ea <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   124d2:	2501      	movs	r5, #1
   124d4:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   124d6:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   124d8:	4908      	ldr	r1, [pc, #32]	; (124fc <clk_init+0x5c>)
   124da:	f104 001c 	add.w	r0, r4, #28
   124de:	f00a fde3 	bl	1d0a8 <onoff_manager_init>
		if (err < 0) {
   124e2:	2800      	cmp	r0, #0
   124e4:	db01      	blt.n	124ea <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   124e6:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   124e8:	2000      	movs	r0, #0
}
   124ea:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   124ec:	f06f 0004 	mvn.w	r0, #4
   124f0:	e7fb      	b.n	124ea <clk_init+0x4a>
   124f2:	bf00      	nop
   124f4:	00012535 	.word	0x00012535
   124f8:	0bad0000 	.word	0x0bad0000
   124fc:	000213ec 	.word	0x000213ec

00012500 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   12500:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   12502:	230c      	movs	r3, #12
   12504:	4809      	ldr	r0, [pc, #36]	; (1252c <clkstarted_handle.constprop.0+0x2c>)
   12506:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   12508:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1250a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1250c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   12510:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   12512:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   12514:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   12516:	4418      	add	r0, r3
   12518:	f00b f9ad 	bl	1d876 <set_on_state>
	if (callback) {
   1251c:	b12d      	cbz	r5, 1252a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1251e:	4632      	mov	r2, r6
   12520:	462b      	mov	r3, r5
   12522:	4803      	ldr	r0, [pc, #12]	; (12530 <clkstarted_handle.constprop.0+0x30>)
}
   12524:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   12528:	4718      	bx	r3
}
   1252a:	bd70      	pop	{r4, r5, r6, pc}
   1252c:	20001e48 	.word	0x20001e48
   12530:	00020c24 	.word	0x00020c24

00012534 <clock_event_handler>:
	switch (event) {
   12534:	b110      	cbz	r0, 1253c <clock_event_handler+0x8>
   12536:	2801      	cmp	r0, #1
   12538:	d004      	beq.n	12544 <clock_event_handler+0x10>
   1253a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1253c:	4b03      	ldr	r3, [pc, #12]	; (1254c <clock_event_handler+0x18>)
   1253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   12540:	075b      	lsls	r3, r3, #29
   12542:	d101      	bne.n	12548 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   12544:	f7ff bfdc 	b.w	12500 <clkstarted_handle.constprop.0>
}
   12548:	4770      	bx	lr
   1254a:	bf00      	nop
   1254c:	20001e48 	.word	0x20001e48

00012550 <generic_hfclk_start>:
{
   12550:	b508      	push	{r3, lr}
	__asm__ volatile(
   12552:	f04f 0340 	mov.w	r3, #64	; 0x40
   12556:	f3ef 8111 	mrs	r1, BASEPRI
   1255a:	f383 8811 	msr	BASEPRI, r3
   1255e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   12562:	4a12      	ldr	r2, [pc, #72]	; (125ac <generic_hfclk_start+0x5c>)
   12564:	6813      	ldr	r3, [r2, #0]
   12566:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1256a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1256e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   12570:	d00c      	beq.n	1258c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   12572:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   12576:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1257a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1257e:	f013 0301 	ands.w	r3, r3, #1
   12582:	d003      	beq.n	1258c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   12584:	480a      	ldr	r0, [pc, #40]	; (125b0 <generic_hfclk_start+0x60>)
   12586:	f00b f976 	bl	1d876 <set_on_state>
			already_started = true;
   1258a:	2301      	movs	r3, #1
	__asm__ volatile(
   1258c:	f381 8811 	msr	BASEPRI, r1
   12590:	f3bf 8f6f 	isb	sy
	if (already_started) {
   12594:	b123      	cbz	r3, 125a0 <generic_hfclk_start+0x50>
}
   12596:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1259a:	2000      	movs	r0, #0
   1259c:	f7ff bfb0 	b.w	12500 <clkstarted_handle.constprop.0>
}
   125a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   125a4:	2001      	movs	r0, #1
   125a6:	f005 bc9f 	b.w	17ee8 <nrfx_clock_start>
   125aa:	bf00      	nop
   125ac:	20001e98 	.word	0x20001e98
   125b0:	20001e88 	.word	0x20001e88

000125b4 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   125b4:	4b09      	ldr	r3, [pc, #36]	; (125dc <generic_hfclk_stop+0x28>)
   125b6:	f3bf 8f5b 	dmb	ish
   125ba:	e853 2f00 	ldrex	r2, [r3]
   125be:	f022 0102 	bic.w	r1, r2, #2
   125c2:	e843 1000 	strex	r0, r1, [r3]
   125c6:	2800      	cmp	r0, #0
   125c8:	d1f7      	bne.n	125ba <generic_hfclk_stop+0x6>
   125ca:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   125ce:	07d3      	lsls	r3, r2, #31
   125d0:	d402      	bmi.n	125d8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   125d2:	2001      	movs	r0, #1
   125d4:	f00d bc7f 	b.w	1fed6 <nrfx_clock_stop>
}
   125d8:	4770      	bx	lr
   125da:	bf00      	nop
   125dc:	20001e98 	.word	0x20001e98

000125e0 <api_blocking_start>:
{
   125e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   125e2:	2200      	movs	r2, #0
   125e4:	2301      	movs	r3, #1
   125e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   125ea:	ab04      	add	r3, sp, #16
   125ec:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   125f0:	4a09      	ldr	r2, [pc, #36]	; (12618 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   125f2:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   125f6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   125f8:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   125fc:	f00b f974 	bl	1d8e8 <api_start>
	if (err < 0) {
   12600:	2800      	cmp	r0, #0
   12602:	db05      	blt.n	12610 <api_blocking_start+0x30>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   12604:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   12608:	2300      	movs	r3, #0
   1260a:	4668      	mov	r0, sp
   1260c:	f006 fca8 	bl	18f60 <z_impl_k_sem_take>
}
   12610:	b007      	add	sp, #28
   12612:	f85d fb04 	ldr.w	pc, [sp], #4
   12616:	bf00      	nop
   12618:	0001d8bb 	.word	0x0001d8bb

0001261c <z_nrf_clock_control_get_onoff>:
}
   1261c:	4a02      	ldr	r2, [pc, #8]	; (12628 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   1261e:	b2c3      	uxtb	r3, r0
}
   12620:	201c      	movs	r0, #28
   12622:	fb03 2000 	mla	r0, r3, r0, r2
   12626:	4770      	bx	lr
   12628:	20001e48 	.word	0x20001e48

0001262c <z_nrf_clock_control_lf_on>:
{
   1262c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1262e:	4928      	ldr	r1, [pc, #160]	; (126d0 <z_nrf_clock_control_lf_on+0xa4>)
   12630:	f3bf 8f5b 	dmb	ish
   12634:	4606      	mov	r6, r0
   12636:	2201      	movs	r2, #1
   12638:	e851 3f00 	ldrex	r3, [r1]
   1263c:	e841 2000 	strex	r0, r2, [r1]
   12640:	2800      	cmp	r0, #0
   12642:	d1f9      	bne.n	12638 <z_nrf_clock_control_lf_on+0xc>
   12644:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   12648:	b933      	cbnz	r3, 12658 <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1264a:	4922      	ldr	r1, [pc, #136]	; (126d4 <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
   1264c:	4822      	ldr	r0, [pc, #136]	; (126d8 <z_nrf_clock_control_lf_on+0xac>)
   1264e:	604b      	str	r3, [r1, #4]
   12650:	60cb      	str	r3, [r1, #12]
   12652:	608a      	str	r2, [r1, #8]
   12654:	f00a fd3b 	bl	1d0ce <onoff_request>
	switch (start_mode) {
   12658:	1e73      	subs	r3, r6, #1
   1265a:	2b01      	cmp	r3, #1
   1265c:	d820      	bhi.n	126a0 <z_nrf_clock_control_lf_on+0x74>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1265e:	f00d fd6a 	bl	20136 <k_is_in_isr>
   12662:	4604      	mov	r4, r0
   12664:	b910      	cbnz	r0, 1266c <z_nrf_clock_control_lf_on+0x40>
	return !z_sys_post_kernel;
   12666:	4b1d      	ldr	r3, [pc, #116]	; (126dc <z_nrf_clock_control_lf_on+0xb0>)
	int key = isr_mode ? irq_lock() : 0;
   12668:	781b      	ldrb	r3, [r3, #0]
   1266a:	bb53      	cbnz	r3, 126c2 <z_nrf_clock_control_lf_on+0x96>
	__asm__ volatile(
   1266c:	f04f 0340 	mov.w	r3, #64	; 0x40
   12670:	f3ef 8511 	mrs	r5, BASEPRI
   12674:	f383 8811 	msr	BASEPRI, r3
   12678:	f3bf 8f6f 	isb	sy
   1267c:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1267e:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
   12682:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   12686:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
   1268a:	03d2      	lsls	r2, r2, #15
   1268c:	d509      	bpl.n	126a2 <z_nrf_clock_control_lf_on+0x76>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1268e:	079b      	lsls	r3, r3, #30
   12690:	d001      	beq.n	12696 <z_nrf_clock_control_lf_on+0x6a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   12692:	2e01      	cmp	r6, #1
   12694:	d105      	bne.n	126a2 <z_nrf_clock_control_lf_on+0x76>
	if (isr_mode) {
   12696:	b174      	cbz	r4, 126b6 <z_nrf_clock_control_lf_on+0x8a>
	__asm__ volatile(
   12698:	f385 8811 	msr	BASEPRI, r5
   1269c:	f3bf 8f6f 	isb	sy
}
   126a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   126a2:	b11c      	cbz	r4, 126ac <z_nrf_clock_control_lf_on+0x80>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   126a4:	4628      	mov	r0, r5
   126a6:	f000 fba3 	bl	12df0 <arch_cpu_atomic_idle>
}
   126aa:	e7ea      	b.n	12682 <z_nrf_clock_control_lf_on+0x56>
	return z_impl_k_sleep(timeout);
   126ac:	2100      	movs	r1, #0
   126ae:	2021      	movs	r0, #33	; 0x21
   126b0:	f007 f934 	bl	1991c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   126b4:	e7e5      	b.n	12682 <z_nrf_clock_control_lf_on+0x56>
    p_reg->INTENSET = mask;
   126b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   126ba:	2202      	movs	r2, #2
   126bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   126c0:	e7ee      	b.n	126a0 <z_nrf_clock_control_lf_on+0x74>
    p_reg->INTENCLR = mask;
   126c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   126c6:	2202      	movs	r2, #2
   126c8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   126cc:	4605      	mov	r5, r0
}
   126ce:	e7d6      	b.n	1267e <z_nrf_clock_control_lf_on+0x52>
   126d0:	20001e9c 	.word	0x20001e9c
   126d4:	20001e38 	.word	0x20001e38
   126d8:	20001e64 	.word	0x20001e64
   126dc:	200041a3 	.word	0x200041a3

000126e0 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   126e0:	4a04      	ldr	r2, [pc, #16]	; (126f4 <sys_clock_timeout_handler+0x14>)
   126e2:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   126e4:	1ac8      	subs	r0, r1, r3
   126e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   126ea:	4403      	add	r3, r0
   126ec:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   126ee:	f007 ba9b 	b.w	19c28 <sys_clock_announce>
   126f2:	bf00      	nop
   126f4:	20001eb0 	.word	0x20001eb0

000126f8 <set_absolute_alarm>:
{
   126f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   126fc:	0086      	lsls	r6, r0, #2
   126fe:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   12702:	f100 0450 	add.w	r4, r0, #80	; 0x50
   12706:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
   1270a:	00a4      	lsls	r4, r4, #2
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   1270c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1278c <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
   12710:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12714:	b2a4      	uxth	r4, r4
   12716:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1271a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1271e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
   12722:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   12726:	4087      	lsls	r7, r0
   12728:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
   1272a:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1272e:	eba3 030a 	sub.w	r3, r3, sl
   12732:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   12736:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1273a:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   1273c:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   12740:	d102      	bne.n	12748 <set_absolute_alarm+0x50>
	z_impl_k_busy_wait(usec_to_wait);
   12742:	2013      	movs	r0, #19
   12744:	f00e f803 	bl	2074e <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   12748:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
   1274c:	1aab      	subs	r3, r5, r2
   1274e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   12752:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   12756:	bf88      	it	hi
   12758:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1275a:	2300      	movs	r3, #0
   1275c:	6023      	str	r3, [r4, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1275e:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   12760:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   12764:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   12768:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   1276c:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   12770:	459a      	cmp	sl, r3
   12772:	d006      	beq.n	12782 <set_absolute_alarm+0x8a>
	return (a - b) & COUNTER_MAX;
   12774:	1aeb      	subs	r3, r5, r3
   12776:	3b02      	subs	r3, #2
   12778:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1277c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   12780:	d801      	bhi.n	12786 <set_absolute_alarm+0x8e>
}
   12782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
   12786:	462b      	mov	r3, r5
   12788:	e7cf      	b.n	1272a <set_absolute_alarm+0x32>
   1278a:	bf00      	nop
   1278c:	40011000 	.word	0x40011000

00012790 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   12790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
   12792:	4c15      	ldr	r4, [pc, #84]	; (127e8 <rtc_nrf_isr+0x58>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12794:	4f15      	ldr	r7, [pc, #84]	; (127ec <rtc_nrf_isr+0x5c>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   12796:	2600      	movs	r6, #0
   12798:	4b15      	ldr	r3, [pc, #84]	; (127f0 <rtc_nrf_isr+0x60>)
   1279a:	2000      	movs	r0, #0
   1279c:	681d      	ldr	r5, [r3, #0]
   1279e:	469c      	mov	ip, r3
   127a0:	b106      	cbz	r6, 127a4 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   127a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
   127a4:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   127a8:	03d2      	lsls	r2, r2, #15
   127aa:	d5fa      	bpl.n	127a2 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   127ac:	683a      	ldr	r2, [r7, #0]
   127ae:	2a00      	cmp	r2, #0
   127b0:	d0f7      	beq.n	127a2 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   127b2:	603e      	str	r6, [r7, #0]
   127b4:	683a      	ldr	r2, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   127b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   127ba:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
   127be:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
   127c2:	f8d4 6504 	ldr.w	r6, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   127c6:	1a72      	subs	r2, r6, r1
   127c8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				cc_val = now;
   127cc:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   127d0:	bf88      	it	hi
   127d2:	4631      	movhi	r1, r6
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   127d4:	2601      	movs	r6, #1
			if (handler) {
   127d6:	b11d      	cbz	r5, 127e0 <rtc_nrf_isr+0x50>
				handler(chan, cc_val,
   127d8:	685a      	ldr	r2, [r3, #4]
   127da:	6018      	str	r0, [r3, #0]
   127dc:	47a8      	blx	r5
   127de:	e7db      	b.n	12798 <rtc_nrf_isr+0x8>
   127e0:	f8cc 5000 	str.w	r5, [ip]
}
   127e4:	e7dd      	b.n	127a2 <rtc_nrf_isr+0x12>
   127e6:	bf00      	nop
   127e8:	40011000 	.word	0x40011000
   127ec:	40011140 	.word	0x40011140
   127f0:	20001ea4 	.word	0x20001ea4

000127f4 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   127f4:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   127f6:	4d10      	ldr	r5, [pc, #64]	; (12838 <sys_clock_driver_init+0x44>)
   127f8:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
   127fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
   127fe:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
   12802:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12806:	4b0d      	ldr	r3, [pc, #52]	; (1283c <sys_clock_driver_init+0x48>)
   12808:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1280c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   12810:	2101      	movs	r1, #1
   12812:	4622      	mov	r2, r4
   12814:	2011      	movs	r0, #17
   12816:	f000 fa63 	bl	12ce0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1281a:	2011      	movs	r0, #17
   1281c:	f000 fa2e 	bl	12c7c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   12820:	4a07      	ldr	r2, [pc, #28]	; (12840 <sys_clock_driver_init+0x4c>)
   12822:	2301      	movs	r3, #1
   12824:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   12826:	4a07      	ldr	r2, [pc, #28]	; (12844 <sys_clock_driver_init+0x50>)
   12828:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   1282a:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
   1282c:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   1282e:	f7ff fefd 	bl	1262c <z_nrf_clock_control_lf_on>

	return 0;
}
   12832:	4620      	mov	r0, r4
   12834:	bd38      	pop	{r3, r4, r5, pc}
   12836:	bf00      	nop
   12838:	40011000 	.word	0x40011000
   1283c:	e000e100 	.word	0xe000e100
   12840:	40011008 	.word	0x40011008
   12844:	20001eac 	.word	0x20001eac

00012848 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   12848:	4b13      	ldr	r3, [pc, #76]	; (12898 <sys_clock_set_timeout+0x50>)
   1284a:	f1b0 3fff 	cmp.w	r0, #4294967295
   1284e:	bf08      	it	eq
   12850:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   12852:	3801      	subs	r0, #1
   12854:	2800      	cmp	r0, #0
   12856:	dd1c      	ble.n	12892 <sys_clock_set_timeout+0x4a>
   12858:	4298      	cmp	r0, r3
   1285a:	bfa8      	it	ge
   1285c:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   1285e:	4b0f      	ldr	r3, [pc, #60]	; (1289c <sys_clock_set_timeout+0x54>)
   12860:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
   12864:	4b0e      	ldr	r3, [pc, #56]	; (128a0 <sys_clock_set_timeout+0x58>)
   12866:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   12868:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   1286a:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
   1286e:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
   12872:	bf18      	it	ne
   12874:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
   12876:	4a0b      	ldr	r2, [pc, #44]	; (128a4 <sys_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   12878:	3301      	adds	r3, #1
   1287a:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
   1287c:	480a      	ldr	r0, [pc, #40]	; (128a8 <sys_clock_set_timeout+0x60>)
   1287e:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   12880:	2000      	movs	r0, #0
   12882:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   12884:	4a04      	ldr	r2, [pc, #16]	; (12898 <sys_clock_set_timeout+0x50>)
   12886:	4293      	cmp	r3, r2
   12888:	bf94      	ite	ls
   1288a:	18c9      	addls	r1, r1, r3
   1288c:	1889      	addhi	r1, r1, r2
   1288e:	f7ff bf33 	b.w	126f8 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   12892:	2000      	movs	r0, #0
   12894:	e7e3      	b.n	1285e <sys_clock_set_timeout+0x16>
   12896:	bf00      	nop
   12898:	007fffff 	.word	0x007fffff
   1289c:	40011000 	.word	0x40011000
   128a0:	20001eb0 	.word	0x20001eb0
   128a4:	20001ea4 	.word	0x20001ea4
   128a8:	000126e1 	.word	0x000126e1

000128ac <sys_clock_elapsed>:
   128ac:	4b04      	ldr	r3, [pc, #16]	; (128c0 <sys_clock_elapsed+0x14>)
   128ae:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
   128b2:	4b04      	ldr	r3, [pc, #16]	; (128c4 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
   128b4:	681b      	ldr	r3, [r3, #0]
   128b6:	1ac0      	subs	r0, r0, r3
}
   128b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   128bc:	4770      	bx	lr
   128be:	bf00      	nop
   128c0:	40011000 	.word	0x40011000
   128c4:	20001eb0 	.word	0x20001eb0

000128c8 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   128c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   128ca:	4e26      	ldr	r6, [pc, #152]	; (12964 <tc_aes128_set_encrypt_key+0x9c>)
{
   128cc:	4607      	mov	r7, r0
   128ce:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   128d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   128d2:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   128d4:	ad01      	add	r5, sp, #4
   128d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   128d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   128da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   128dc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   128e0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   128e4:	4638      	mov	r0, r7
   128e6:	2f00      	cmp	r7, #0
   128e8:	d038      	beq.n	1295c <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   128ea:	2c00      	cmp	r4, #0
   128ec:	d038      	beq.n	12960 <tc_aes128_set_encrypt_key+0x98>
   128ee:	1f38      	subs	r0, r7, #4
   128f0:	4621      	mov	r1, r4
   128f2:	4602      	mov	r2, r0
   128f4:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   128f6:	784b      	ldrb	r3, [r1, #1]
   128f8:	780d      	ldrb	r5, [r1, #0]
   128fa:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   128fc:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   12900:	78cd      	ldrb	r5, [r1, #3]
   12902:	432b      	orrs	r3, r5
   12904:	788d      	ldrb	r5, [r1, #2]
   12906:	3104      	adds	r1, #4
   12908:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   1290c:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1290e:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   12912:	d1f0      	bne.n	128f6 <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   12914:	4c14      	ldr	r4, [pc, #80]	; (12968 <tc_aes128_set_encrypt_key+0xa0>)
   12916:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   12918:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   1291a:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   1291c:	d116      	bne.n	1294c <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1291e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12922:	5ca5      	ldrb	r5, [r4, r2]
   12924:	0e1a      	lsrs	r2, r3, #24
   12926:	5ca2      	ldrb	r2, [r4, r2]
   12928:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   1292c:	f3c3 2507 	ubfx	r5, r3, #8, #8
   12930:	b2db      	uxtb	r3, r3
   12932:	5d65      	ldrb	r5, [r4, r5]
   12934:	5ce3      	ldrb	r3, [r4, r3]
   12936:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   1293a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1293e:	ad0c      	add	r5, sp, #48	; 0x30
   12940:	f021 0303 	bic.w	r3, r1, #3
   12944:	442b      	add	r3, r5
   12946:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   1294a:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   1294c:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   12950:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   12952:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   12954:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   12956:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   12958:	d1de      	bne.n	12918 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   1295a:	2001      	movs	r0, #1
}
   1295c:	b00d      	add	sp, #52	; 0x34
   1295e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   12960:	4620      	mov	r0, r4
   12962:	e7fb      	b.n	1295c <tc_aes128_set_encrypt_key+0x94>
   12964:	00020f4c 	.word	0x00020f4c
   12968:	00021c53 	.word	0x00021c53

0001296c <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1296c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12970:	4615      	mov	r5, r2
   12972:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   12974:	4606      	mov	r6, r0
   12976:	2800      	cmp	r0, #0
   12978:	d058      	beq.n	12a2c <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1297a:	2900      	cmp	r1, #0
   1297c:	d059      	beq.n	12a32 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1297e:	2a00      	cmp	r2, #0
   12980:	d059      	beq.n	12a36 <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   12982:	2310      	movs	r3, #16
   12984:	460a      	mov	r2, r1
   12986:	4668      	mov	r0, sp
   12988:	4619      	mov	r1, r3
   1298a:	f00a ffcb 	bl	1d924 <_copy>
	add_round_key(state, s->words);
   1298e:	4629      	mov	r1, r5
   12990:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   12992:	4c2a      	ldr	r4, [pc, #168]	; (12a3c <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   12994:	f00a ffde 	bl	1d954 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   12998:	f105 0710 	add.w	r7, r5, #16
   1299c:	46a1      	mov	r9, r4
   1299e:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   129a0:	46e8      	mov	r8, sp
{
   129a2:	466a      	mov	r2, sp
   129a4:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   129a6:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   129a8:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   129aa:	5c61      	ldrb	r1, [r4, r1]
   129ac:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   129b0:	d1f9      	bne.n	129a6 <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   129b2:	4668      	mov	r0, sp
   129b4:	f00b f813 	bl	1d9de <shift_rows>
	mult_row_column(t, s);
   129b8:	4669      	mov	r1, sp
   129ba:	a804      	add	r0, sp, #16
   129bc:	f00b f848 	bl	1da50 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   129c0:	a901      	add	r1, sp, #4
   129c2:	a805      	add	r0, sp, #20
   129c4:	f00b f844 	bl	1da50 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   129c8:	a902      	add	r1, sp, #8
   129ca:	a806      	add	r0, sp, #24
   129cc:	f00b f840 	bl	1da50 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   129d0:	a903      	add	r1, sp, #12
   129d2:	a807      	add	r0, sp, #28
   129d4:	f00b f83c 	bl	1da50 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   129d8:	2310      	movs	r3, #16
   129da:	4619      	mov	r1, r3
   129dc:	eb0d 0203 	add.w	r2, sp, r3
   129e0:	4668      	mov	r0, sp
   129e2:	f00a ff9f 	bl	1d924 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   129e6:	4639      	mov	r1, r7
   129e8:	4668      	mov	r0, sp
   129ea:	3710      	adds	r7, #16
   129ec:	f00a ffb2 	bl	1d954 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   129f0:	42af      	cmp	r7, r5
   129f2:	d1d5      	bne.n	129a0 <tc_aes_encrypt+0x34>
   129f4:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   129f6:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   129fa:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   129fc:	f819 3003 	ldrb.w	r3, [r9, r3]
   12a00:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   12a04:	d1f7      	bne.n	129f6 <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   12a06:	4668      	mov	r0, sp
   12a08:	f00a ffe9 	bl	1d9de <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   12a0c:	4629      	mov	r1, r5
   12a0e:	4668      	mov	r0, sp
   12a10:	f00a ffa0 	bl	1d954 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   12a14:	2310      	movs	r3, #16
   12a16:	4619      	mov	r1, r3
   12a18:	466a      	mov	r2, sp
   12a1a:	4630      	mov	r0, r6
   12a1c:	f00a ff82 	bl	1d924 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   12a20:	4668      	mov	r0, sp
   12a22:	2210      	movs	r2, #16
   12a24:	4621      	mov	r1, r4
   12a26:	f00a ff8a 	bl	1d93e <_set>

	return TC_CRYPTO_SUCCESS;
   12a2a:	2001      	movs	r0, #1
}
   12a2c:	b009      	add	sp, #36	; 0x24
   12a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   12a32:	4608      	mov	r0, r1
   12a34:	e7fa      	b.n	12a2c <tc_aes_encrypt+0xc0>
   12a36:	4610      	mov	r0, r2
   12a38:	e7f8      	b.n	12a2c <tc_aes_encrypt+0xc0>
   12a3a:	bf00      	nop
   12a3c:	00021c53 	.word	0x00021c53

00012a40 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   12a40:	4801      	ldr	r0, [pc, #4]	; (12a48 <nrf_cc3xx_platform_abort_init+0x8>)
   12a42:	f007 ba6f 	b.w	19f24 <nrf_cc3xx_platform_set_abort>
   12a46:	bf00      	nop
   12a48:	000213f8 	.word	0x000213f8

00012a4c <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12a4c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   12a4e:	b1d0      	cbz	r0, 12a86 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   12a50:	6843      	ldr	r3, [r0, #4]
   12a52:	2b04      	cmp	r3, #4
   12a54:	d111      	bne.n	12a7a <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12a56:	2200      	movs	r2, #0
   12a58:	6803      	ldr	r3, [r0, #0]
   12a5a:	f3bf 8f5b 	dmb	ish
   12a5e:	e853 1f00 	ldrex	r1, [r3]
   12a62:	2901      	cmp	r1, #1
   12a64:	d103      	bne.n	12a6e <mutex_unlock_platform+0x22>
   12a66:	e843 2000 	strex	r0, r2, [r3]
   12a6a:	2800      	cmp	r0, #0
   12a6c:	d1f7      	bne.n	12a5e <mutex_unlock_platform+0x12>
   12a6e:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12a72:	4807      	ldr	r0, [pc, #28]	; (12a90 <mutex_unlock_platform+0x44>)
   12a74:	bf08      	it	eq
   12a76:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   12a78:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12a7a:	b13b      	cbz	r3, 12a8c <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
   12a7c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   12a7e:	f006 f9cf 	bl	18e20 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   12a82:	2000      	movs	r0, #0
   12a84:	e7f8      	b.n	12a78 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   12a86:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   12a8a:	e7f5      	b.n	12a78 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   12a8c:	4801      	ldr	r0, [pc, #4]	; (12a94 <mutex_unlock_platform+0x48>)
   12a8e:	e7f3      	b.n	12a78 <mutex_unlock_platform+0x2c>
   12a90:	ffff8fe9 	.word	0xffff8fe9
   12a94:	ffff8fea 	.word	0xffff8fea

00012a98 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12a98:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   12a9a:	4604      	mov	r4, r0
   12a9c:	b918      	cbnz	r0, 12aa6 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   12a9e:	4b0d      	ldr	r3, [pc, #52]	; (12ad4 <mutex_free_platform+0x3c>)
   12aa0:	480d      	ldr	r0, [pc, #52]	; (12ad8 <mutex_free_platform+0x40>)
   12aa2:	685b      	ldr	r3, [r3, #4]
   12aa4:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   12aa6:	6861      	ldr	r1, [r4, #4]
   12aa8:	2908      	cmp	r1, #8
   12aaa:	d00d      	beq.n	12ac8 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12aac:	f031 0304 	bics.w	r3, r1, #4
   12ab0:	d00a      	beq.n	12ac8 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   12ab2:	f011 0102 	ands.w	r1, r1, #2
   12ab6:	d008      	beq.n	12aca <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   12ab8:	4808      	ldr	r0, [pc, #32]	; (12adc <mutex_free_platform+0x44>)
   12aba:	4621      	mov	r1, r4
   12abc:	f00d fb12 	bl	200e4 <k_mem_slab_free>
        mutex->mutex = NULL;
   12ac0:	2300      	movs	r3, #0
   12ac2:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   12ac4:	2300      	movs	r3, #0
   12ac6:	6063      	str	r3, [r4, #4]
}
   12ac8:	bd10      	pop	{r4, pc}
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   12aca:	6820      	ldr	r0, [r4, #0]
   12acc:	2214      	movs	r2, #20
   12ace:	f00e f80f 	bl	20af0 <memset>
   12ad2:	e7f7      	b.n	12ac4 <mutex_free_platform+0x2c>
   12ad4:	20000680 	.word	0x20000680
   12ad8:	00021d53 	.word	0x00021d53
   12adc:	20001eb4 	.word	0x20001eb4

00012ae0 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12ae0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   12ae2:	4604      	mov	r4, r0
   12ae4:	b918      	cbnz	r0, 12aee <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   12ae6:	4b16      	ldr	r3, [pc, #88]	; (12b40 <mutex_init_platform+0x60>)
   12ae8:	4816      	ldr	r0, [pc, #88]	; (12b44 <mutex_init_platform+0x64>)
   12aea:	685b      	ldr	r3, [r3, #4]
   12aec:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   12aee:	6863      	ldr	r3, [r4, #4]
   12af0:	2b04      	cmp	r3, #4
   12af2:	d023      	beq.n	12b3c <mutex_init_platform+0x5c>
   12af4:	2b08      	cmp	r3, #8
   12af6:	d021      	beq.n	12b3c <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   12af8:	b9cb      	cbnz	r3, 12b2e <mutex_init_platform+0x4e>
   12afa:	6823      	ldr	r3, [r4, #0]
   12afc:	b9bb      	cbnz	r3, 12b2e <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   12afe:	4812      	ldr	r0, [pc, #72]	; (12b48 <mutex_init_platform+0x68>)
   12b00:	f04f 32ff 	mov.w	r2, #4294967295
   12b04:	f04f 33ff 	mov.w	r3, #4294967295
   12b08:	4621      	mov	r1, r4
   12b0a:	f006 f809 	bl	18b20 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   12b0e:	b908      	cbnz	r0, 12b14 <mutex_init_platform+0x34>
   12b10:	6823      	ldr	r3, [r4, #0]
   12b12:	b91b      	cbnz	r3, 12b1c <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   12b14:	4b0a      	ldr	r3, [pc, #40]	; (12b40 <mutex_init_platform+0x60>)
   12b16:	480d      	ldr	r0, [pc, #52]	; (12b4c <mutex_init_platform+0x6c>)
   12b18:	685b      	ldr	r3, [r3, #4]
   12b1a:	4798      	blx	r3
   12b1c:	6820      	ldr	r0, [r4, #0]
   12b1e:	2214      	movs	r2, #20
   12b20:	2100      	movs	r1, #0
   12b22:	f00d ffe5 	bl	20af0 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   12b26:	6863      	ldr	r3, [r4, #4]
   12b28:	f043 0302 	orr.w	r3, r3, #2
   12b2c:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   12b2e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   12b30:	f00d fb13 	bl	2015a <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   12b34:	6863      	ldr	r3, [r4, #4]
   12b36:	f043 0301 	orr.w	r3, r3, #1
   12b3a:	6063      	str	r3, [r4, #4]
}
   12b3c:	bd10      	pop	{r4, pc}
   12b3e:	bf00      	nop
   12b40:	20000680 	.word	0x20000680
   12b44:	00021d53 	.word	0x00021d53
   12b48:	20001eb4 	.word	0x20001eb4
   12b4c:	00021d79 	.word	0x00021d79

00012b50 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12b50:	b508      	push	{r3, lr}
    if(mutex == NULL) {
   12b52:	b308      	cbz	r0, 12b98 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
   12b54:	6843      	ldr	r3, [r0, #4]
   12b56:	2b04      	cmp	r3, #4
   12b58:	d110      	bne.n	12b7c <mutex_lock_platform+0x2c>
   12b5a:	2201      	movs	r2, #1
   12b5c:	6803      	ldr	r3, [r0, #0]
   12b5e:	f3bf 8f5b 	dmb	ish
   12b62:	e853 1f00 	ldrex	r1, [r3]
   12b66:	2900      	cmp	r1, #0
   12b68:	d103      	bne.n	12b72 <mutex_lock_platform+0x22>
   12b6a:	e843 2000 	strex	r0, r2, [r3]
   12b6e:	2800      	cmp	r0, #0
   12b70:	d1f7      	bne.n	12b62 <mutex_lock_platform+0x12>
   12b72:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12b76:	d10b      	bne.n	12b90 <mutex_lock_platform+0x40>
   12b78:	2000      	movs	r0, #0
}
   12b7a:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12b7c:	b153      	cbz	r3, 12b94 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
   12b7e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   12b80:	f04f 32ff 	mov.w	r2, #4294967295
   12b84:	f04f 33ff 	mov.w	r3, #4294967295
   12b88:	f006 f8cc 	bl	18d24 <z_impl_k_mutex_lock>
        if (ret == 0) {
   12b8c:	2800      	cmp	r0, #0
   12b8e:	d0f3      	beq.n	12b78 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12b90:	4803      	ldr	r0, [pc, #12]	; (12ba0 <mutex_lock_platform+0x50>)
   12b92:	e7f2      	b.n	12b7a <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   12b94:	4803      	ldr	r0, [pc, #12]	; (12ba4 <mutex_lock_platform+0x54>)
   12b96:	e7f0      	b.n	12b7a <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   12b98:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   12b9c:	e7ed      	b.n	12b7a <mutex_lock_platform+0x2a>
   12b9e:	bf00      	nop
   12ba0:	ffff8fe9 	.word	0xffff8fe9
   12ba4:	ffff8fea 	.word	0xffff8fea

00012ba8 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   12ba8:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   12baa:	4906      	ldr	r1, [pc, #24]	; (12bc4 <nrf_cc3xx_platform_mutex_init+0x1c>)
   12bac:	4806      	ldr	r0, [pc, #24]	; (12bc8 <nrf_cc3xx_platform_mutex_init+0x20>)
   12bae:	2340      	movs	r3, #64	; 0x40
   12bb0:	2214      	movs	r2, #20
   12bb2:	f00d fa7c 	bl	200ae <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   12bb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   12bba:	4904      	ldr	r1, [pc, #16]	; (12bcc <nrf_cc3xx_platform_mutex_init+0x24>)
   12bbc:	4804      	ldr	r0, [pc, #16]	; (12bd0 <nrf_cc3xx_platform_mutex_init+0x28>)
   12bbe:	f007 ba69 	b.w	1a094 <nrf_cc3xx_platform_set_mutexes>
   12bc2:	bf00      	nop
   12bc4:	20001ed0 	.word	0x20001ed0
   12bc8:	20001eb4 	.word	0x20001eb4
   12bcc:	00021410 	.word	0x00021410
   12bd0:	00021400 	.word	0x00021400

00012bd4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   12bd4:	4a09      	ldr	r2, [pc, #36]	; (12bfc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   12bd6:	490a      	ldr	r1, [pc, #40]	; (12c00 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   12bd8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   12bda:	6809      	ldr	r1, [r1, #0]
   12bdc:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12bde:	4909      	ldr	r1, [pc, #36]	; (12c04 <arch_swap+0x30>)
	_current->arch.basepri = key;
   12be0:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12be2:	684b      	ldr	r3, [r1, #4]
   12be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   12be8:	604b      	str	r3, [r1, #4]
   12bea:	2300      	movs	r3, #0
   12bec:	f383 8811 	msr	BASEPRI, r3
   12bf0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   12bf4:	6893      	ldr	r3, [r2, #8]
}
   12bf6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   12bf8:	4770      	bx	lr
   12bfa:	bf00      	nop
   12bfc:	200027a4 	.word	0x200027a4
   12c00:	000217d8 	.word	0x000217d8
   12c04:	e000ed00 	.word	0xe000ed00

00012c08 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   12c08:	4912      	ldr	r1, [pc, #72]	; (12c54 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   12c0a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   12c0c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   12c10:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   12c12:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   12c16:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12c1a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   12c1c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   12c20:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   12c24:	4f0c      	ldr	r7, [pc, #48]	; (12c58 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   12c26:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   12c2a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   12c2c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   12c2e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   12c30:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   12c32:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   12c34:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   12c36:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   12c3a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   12c3c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   12c3e:	f000 fabb 	bl	131b8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   12c42:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   12c46:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   12c4a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   12c4e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   12c52:	4770      	bx	lr
    ldr r1, =_kernel
   12c54:	200027a4 	.word	0x200027a4
    ldr v4, =_SCS_ICSR
   12c58:	e000ed04 	.word	0xe000ed04

00012c5c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   12c5c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   12c60:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   12c62:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   12c66:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   12c6a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   12c6c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   12c70:	2902      	cmp	r1, #2
    beq _oops
   12c72:	d0ff      	beq.n	12c74 <_oops>

00012c74 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   12c74:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   12c76:	f00b f833 	bl	1dce0 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   12c7a:	bd01      	pop	{r0, pc}

00012c7c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   12c7c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   12c7e:	2b00      	cmp	r3, #0
   12c80:	db08      	blt.n	12c94 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12c82:	2201      	movs	r2, #1
   12c84:	f000 001f 	and.w	r0, r0, #31
   12c88:	fa02 f000 	lsl.w	r0, r2, r0
   12c8c:	095b      	lsrs	r3, r3, #5
   12c8e:	4a02      	ldr	r2, [pc, #8]	; (12c98 <arch_irq_enable+0x1c>)
   12c90:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   12c94:	4770      	bx	lr
   12c96:	bf00      	nop
   12c98:	e000e100 	.word	0xe000e100

00012c9c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   12c9c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   12c9e:	2b00      	cmp	r3, #0
   12ca0:	db0d      	blt.n	12cbe <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12ca2:	2201      	movs	r2, #1
   12ca4:	095b      	lsrs	r3, r3, #5
   12ca6:	f000 001f 	and.w	r0, r0, #31
   12caa:	fa02 f000 	lsl.w	r0, r2, r0
   12cae:	3320      	adds	r3, #32
   12cb0:	4a03      	ldr	r2, [pc, #12]	; (12cc0 <arch_irq_disable+0x24>)
   12cb2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   12cb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12cba:	f3bf 8f6f 	isb	sy
}
   12cbe:	4770      	bx	lr
   12cc0:	e000e100 	.word	0xe000e100

00012cc4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   12cc4:	4b05      	ldr	r3, [pc, #20]	; (12cdc <arch_irq_is_enabled+0x18>)
   12cc6:	0942      	lsrs	r2, r0, #5
   12cc8:	f000 001f 	and.w	r0, r0, #31
   12ccc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12cd0:	2301      	movs	r3, #1
   12cd2:	fa03 f000 	lsl.w	r0, r3, r0
}
   12cd6:	4010      	ands	r0, r2
   12cd8:	4770      	bx	lr
   12cda:	bf00      	nop
   12cdc:	e000e100 	.word	0xe000e100

00012ce0 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   12ce0:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   12ce2:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   12ce4:	bf54      	ite	pl
   12ce6:	3102      	addpl	r1, #2
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   12ce8:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   12cea:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12cec:	bfac      	ite	ge
   12cee:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12cf2:	4a07      	ldrlt	r2, [pc, #28]	; (12d10 <z_arm_irq_priority_set+0x30>)
   12cf4:	ea4f 1341 	mov.w	r3, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12cf8:	bfac      	ite	ge
   12cfa:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12cfe:	f000 000f 	andlt.w	r0, r0, #15
   12d02:	b2db      	uxtb	r3, r3
   12d04:	bfb4      	ite	lt
   12d06:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12d08:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   12d0c:	4770      	bx	lr
   12d0e:	bf00      	nop
   12d10:	e000ed14 	.word	0xe000ed14

00012d14 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   12d14:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   12d16:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   12d18:	4b04      	ldr	r3, [pc, #16]	; (12d2c <_arch_isr_direct_pm+0x18>)
   12d1a:	6a18      	ldr	r0, [r3, #32]
   12d1c:	b118      	cbz	r0, 12d26 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   12d1e:	2200      	movs	r2, #0
   12d20:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
   12d22:	f00d fa13 	bl	2014c <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   12d26:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   12d28:	bd08      	pop	{r3, pc}
   12d2a:	bf00      	nop
   12d2c:	200027a4 	.word	0x200027a4

00012d30 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   12d30:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   12d34:	9b00      	ldr	r3, [sp, #0]
   12d36:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   12d3a:	490a      	ldr	r1, [pc, #40]	; (12d64 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   12d3c:	9b01      	ldr	r3, [sp, #4]
   12d3e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   12d42:	9b02      	ldr	r3, [sp, #8]
   12d44:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   12d48:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   12d4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   12d50:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   12d54:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   12d58:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   12d5a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   12d5c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   12d5e:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   12d60:	4770      	bx	lr
   12d62:	bf00      	nop
   12d64:	0001d1ab 	.word	0x0001d1ab

00012d68 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   12d68:	4a0b      	ldr	r2, [pc, #44]	; (12d98 <z_check_thread_stack_fail+0x30>)
{
   12d6a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   12d6c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   12d6e:	b190      	cbz	r0, 12d96 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   12d70:	f113 0f16 	cmn.w	r3, #22
   12d74:	6e80      	ldr	r0, [r0, #104]	; 0x68
   12d76:	d005      	beq.n	12d84 <z_check_thread_stack_fail+0x1c>
   12d78:	f1a0 0220 	sub.w	r2, r0, #32
   12d7c:	429a      	cmp	r2, r3
   12d7e:	d806      	bhi.n	12d8e <z_check_thread_stack_fail+0x26>
   12d80:	4283      	cmp	r3, r0
   12d82:	d204      	bcs.n	12d8e <z_check_thread_stack_fail+0x26>
   12d84:	4281      	cmp	r1, r0
   12d86:	bf2c      	ite	cs
   12d88:	2100      	movcs	r1, #0
   12d8a:	2101      	movcc	r1, #1
   12d8c:	e000      	b.n	12d90 <z_check_thread_stack_fail+0x28>
   12d8e:	2100      	movs	r1, #0
   12d90:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   12d92:	bf08      	it	eq
   12d94:	2000      	moveq	r0, #0
}
   12d96:	4770      	bx	lr
   12d98:	200027a4 	.word	0x200027a4

00012d9c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   12d9c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   12d9e:	4b09      	ldr	r3, [pc, #36]	; (12dc4 <arch_switch_to_main_thread+0x28>)
   12da0:	6098      	str	r0, [r3, #8]
{
   12da2:	460d      	mov	r5, r1
   12da4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   12da6:	f000 fa07 	bl	131b8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   12daa:	4620      	mov	r0, r4
   12dac:	f385 8809 	msr	PSP, r5
   12db0:	2100      	movs	r1, #0
   12db2:	b663      	cpsie	if
   12db4:	f381 8811 	msr	BASEPRI, r1
   12db8:	f3bf 8f6f 	isb	sy
   12dbc:	2200      	movs	r2, #0
   12dbe:	2300      	movs	r3, #0
   12dc0:	f00a f9f3 	bl	1d1aa <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   12dc4:	200027a4 	.word	0x200027a4

00012dc8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   12dc8:	4901      	ldr	r1, [pc, #4]	; (12dd0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   12dca:	2210      	movs	r2, #16
	str	r2, [r1]
   12dcc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   12dce:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   12dd0:	e000ed10 	.word	0xe000ed10

00012dd4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   12dd4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   12dd6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   12dd8:	f380 8811 	msr	BASEPRI, r0
	isb
   12ddc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   12de0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   12de4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   12de6:	b662      	cpsie	i
	isb
   12de8:	f3bf 8f6f 	isb	sy

	bx	lr
   12dec:	4770      	bx	lr
   12dee:	bf00      	nop

00012df0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   12df0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   12df2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   12df4:	f381 8811 	msr	BASEPRI, r1

	wfe
   12df8:	bf20      	wfe

	msr	BASEPRI, r0
   12dfa:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   12dfe:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   12e00:	4770      	bx	lr
   12e02:	bf00      	nop

00012e04 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   12e04:	bf30      	wfi
    b z_SysNmiOnReset
   12e06:	f7ff bffd 	b.w	12e04 <z_SysNmiOnReset>
   12e0a:	bf00      	nop

00012e0c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12e0c:	4a0b      	ldr	r2, [pc, #44]	; (12e3c <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   12e0e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12e10:	4b0b      	ldr	r3, [pc, #44]	; (12e40 <z_arm_prep_c+0x34>)
   12e12:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   12e16:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   12e18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12e1c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   12e20:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   12e24:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   12e28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   12e2c:	f005 fd98 	bl	18960 <z_bss_zero>
	z_data_copy();
   12e30:	f006 fe08 	bl	19a44 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   12e34:	f000 f996 	bl	13164 <z_arm_interrupt_init>
	z_cstart();
   12e38:	f005 fdb6 	bl	189a8 <z_cstart>
   12e3c:	00000000 	.word	0x00000000
   12e40:	e000ed00 	.word	0xe000ed00

00012e44 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   12e44:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   12e46:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   12e48:	4a0b      	ldr	r2, [pc, #44]	; (12e78 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   12e4a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   12e4c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   12e4e:	bf1e      	ittt	ne
	movne	r1, #0
   12e50:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   12e52:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
   12e54:	f00d f97a 	blne	2014c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   12e58:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   12e5a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   12e5e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   12e62:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   12e66:	4905      	ldr	r1, [pc, #20]	; (12e7c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   12e68:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   12e6a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   12e6c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   12e6e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   12e72:	4903      	ldr	r1, [pc, #12]	; (12e80 <_isr_wrapper+0x3c>)
	bx r1
   12e74:	4708      	bx	r1
   12e76:	0000      	.short	0x0000
	ldr r2, =_kernel
   12e78:	200027a4 	.word	0x200027a4
	ldr r1, =_sw_isr_table
   12e7c:	00020ce4 	.word	0x00020ce4
	ldr r1, =z_arm_int_exit
   12e80:	000130c5 	.word	0x000130c5

00012e84 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   12e84:	2000      	movs	r0, #0
    msr CONTROL, r0
   12e86:	f380 8814 	msr	CONTROL, r0
    isb
   12e8a:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   12e8e:	f00d fe73 	bl	20b78 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   12e92:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   12e94:	490d      	ldr	r1, [pc, #52]	; (12ecc <__start+0x48>)
    str r0, [r1]
   12e96:	6008      	str	r0, [r1, #0]
    dsb
   12e98:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   12e9c:	480c      	ldr	r0, [pc, #48]	; (12ed0 <__start+0x4c>)
    msr msp, r0
   12e9e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   12ea2:	f000 f92d 	bl	13100 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12ea6:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   12ea8:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   12eac:	4809      	ldr	r0, [pc, #36]	; (12ed4 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   12eae:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   12eb2:	1840      	adds	r0, r0, r1
    msr PSP, r0
   12eb4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   12eb8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   12ebc:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   12ebe:	4308      	orrs	r0, r1
    msr CONTROL, r0
   12ec0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   12ec4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   12ec8:	f7ff ffa0 	bl	12e0c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   12ecc:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   12ed0:	20005de0 	.word	0x20005de0
    ldr r0, =z_interrupt_stacks
   12ed4:	20005f60 	.word	0x20005f60

00012ed8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   12ed8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   12edc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   12ee0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   12ee2:	4672      	mov	r2, lr
	bl z_arm_fault
   12ee4:	f000 f868 	bl	12fb8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   12ee8:	bd01      	pop	{r0, pc}
   12eea:	bf00      	nop

00012eec <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   12eec:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   12eee:	4b19      	ldr	r3, [pc, #100]	; (12f54 <mem_manage_fault+0x68>)
{
   12ef0:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   12ef2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   12ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   12ef6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
   12ef8:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   12efa:	0790      	lsls	r0, r2, #30
   12efc:	d519      	bpl.n	12f32 <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   12efe:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   12f00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12f02:	0612      	lsls	r2, r2, #24
   12f04:	d515      	bpl.n	12f32 <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
   12f06:	b119      	cbz	r1, 12f10 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   12f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12f0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   12f0e:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   12f10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   12f12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   12f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12f16:	06d1      	lsls	r1, r2, #27
   12f18:	d40e      	bmi.n	12f38 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   12f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   12f1c:	079a      	lsls	r2, r3, #30
   12f1e:	d40b      	bmi.n	12f38 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12f20:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   12f22:	4a0c      	ldr	r2, [pc, #48]	; (12f54 <mem_manage_fault+0x68>)
   12f24:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12f26:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   12f2a:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   12f2c:	2300      	movs	r3, #0
   12f2e:	7023      	strb	r3, [r4, #0]

	return reason;
}
   12f30:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
   12f32:	f06f 0015 	mvn.w	r0, #21
   12f36:	e7eb      	b.n	12f10 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   12f38:	4b06      	ldr	r3, [pc, #24]	; (12f54 <mem_manage_fault+0x68>)
   12f3a:	685b      	ldr	r3, [r3, #4]
   12f3c:	051b      	lsls	r3, r3, #20
   12f3e:	d5ef      	bpl.n	12f20 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   12f40:	4629      	mov	r1, r5
   12f42:	f7ff ff11 	bl	12d68 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   12f46:	2800      	cmp	r0, #0
   12f48:	d0ea      	beq.n	12f20 <mem_manage_fault+0x34>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   12f4a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   12f4e:	2002      	movs	r0, #2
   12f50:	e7e7      	b.n	12f22 <mem_manage_fault+0x36>
   12f52:	bf00      	nop
   12f54:	e000ed00 	.word	0xe000ed00

00012f58 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   12f58:	4b0d      	ldr	r3, [pc, #52]	; (12f90 <bus_fault.isra.0+0x38>)
   12f5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   12f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   12f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12f60:	0592      	lsls	r2, r2, #22
   12f62:	d508      	bpl.n	12f76 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   12f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   12f66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12f68:	0412      	lsls	r2, r2, #16
   12f6a:	d504      	bpl.n	12f76 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   12f6c:	b118      	cbz	r0, 12f76 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   12f6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12f70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   12f74:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   12f76:	4b06      	ldr	r3, [pc, #24]	; (12f90 <bus_fault.isra.0+0x38>)
   12f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   12f7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12f7c:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   12f7e:	bf58      	it	pl
   12f80:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   12f82:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   12f84:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   12f86:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   12f8a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   12f8c:	7008      	strb	r0, [r1, #0]

	return reason;
}
   12f8e:	4770      	bx	lr
   12f90:	e000ed00 	.word	0xe000ed00

00012f94 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   12f94:	4b07      	ldr	r3, [pc, #28]	; (12fb4 <usage_fault.isra.0+0x20>)
   12f96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   12f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   12f9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   12f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   12f9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   12fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   12fa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12fa4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   12fa8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   12fac:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   12fae:	2000      	movs	r0, #0
   12fb0:	4770      	bx	lr
   12fb2:	bf00      	nop
   12fb4:	e000ed00 	.word	0xe000ed00

00012fb8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   12fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   12fba:	4b3a      	ldr	r3, [pc, #232]	; (130a4 <z_arm_fault+0xec>)
   12fbc:	685b      	ldr	r3, [r3, #4]
{
   12fbe:	b08b      	sub	sp, #44	; 0x2c
   12fc0:	460c      	mov	r4, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   12fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   12fc6:	2500      	movs	r5, #0
   12fc8:	f385 8811 	msr	BASEPRI, r5
   12fcc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   12fd0:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
   12fd4:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
   12fd8:	d111      	bne.n	12ffe <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   12fda:	f002 010c 	and.w	r1, r2, #12
   12fde:	2908      	cmp	r1, #8
   12fe0:	d00d      	beq.n	12ffe <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   12fe2:	0711      	lsls	r1, r2, #28
   12fe4:	d401      	bmi.n	12fea <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   12fe6:	4604      	mov	r4, r0
			*nested_exc = true;
   12fe8:	2501      	movs	r5, #1
	*recoverable = false;
   12fea:	2200      	movs	r2, #0
   12fec:	3b03      	subs	r3, #3
   12fee:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   12ff2:	2b03      	cmp	r3, #3
   12ff4:	d84e      	bhi.n	13094 <z_arm_fault+0xdc>
   12ff6:	e8df f003 	tbb	[pc, r3]
   12ffa:	4504      	.short	0x4504
   12ffc:	4249      	.short	0x4249
		return NULL;
   12ffe:	462c      	mov	r4, r5
   13000:	e7f3      	b.n	12fea <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13002:	4b28      	ldr	r3, [pc, #160]	; (130a4 <z_arm_fault+0xec>)
   13004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   13006:	0792      	lsls	r2, r2, #30
   13008:	d444      	bmi.n	13094 <z_arm_fault+0xdc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1300c:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
   13010:	d009      	beq.n	13026 <z_arm_fault+0x6e>
		if (SCB_MMFSR != 0) {
   13012:	4b25      	ldr	r3, [pc, #148]	; (130a8 <z_arm_fault+0xf0>)
   13014:	781b      	ldrb	r3, [r3, #0]
   13016:	b323      	cbz	r3, 13062 <z_arm_fault+0xaa>
			reason = mem_manage_fault(esf, 1, recoverable);
   13018:	f10d 0207 	add.w	r2, sp, #7
   1301c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   1301e:	4620      	mov	r0, r4
   13020:	f7ff ff64 	bl	12eec <mem_manage_fault>
		reason = usage_fault(esf);
   13024:	4603      	mov	r3, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   13026:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1302a:	b9c2      	cbnz	r2, 1305e <z_arm_fault+0xa6>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1302c:	ae02      	add	r6, sp, #8
   1302e:	f104 0720 	add.w	r7, r4, #32
   13032:	6820      	ldr	r0, [r4, #0]
   13034:	6861      	ldr	r1, [r4, #4]
   13036:	4632      	mov	r2, r6
   13038:	c203      	stmia	r2!, {r0, r1}
   1303a:	3408      	adds	r4, #8
   1303c:	42bc      	cmp	r4, r7
   1303e:	4616      	mov	r6, r2
   13040:	d1f7      	bne.n	13032 <z_arm_fault+0x7a>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   13042:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13044:	b345      	cbz	r5, 13098 <z_arm_fault+0xe0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   13046:	f3c2 0108 	ubfx	r1, r2, #0, #9
   1304a:	b921      	cbnz	r1, 13056 <z_arm_fault+0x9e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1304c:	ea6f 2252 	mvn.w	r2, r2, lsr #9
   13050:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13054:	9209      	str	r2, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   13056:	a902      	add	r1, sp, #8
   13058:	4618      	mov	r0, r3
   1305a:	f00a fe3f 	bl	1dcdc <z_arm_fatal_error>
}
   1305e:	b00b      	add	sp, #44	; 0x2c
   13060:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
   13062:	4b12      	ldr	r3, [pc, #72]	; (130ac <z_arm_fault+0xf4>)
   13064:	781b      	ldrb	r3, [r3, #0]
   13066:	b12b      	cbz	r3, 13074 <z_arm_fault+0xbc>
			reason = bus_fault(esf, 1, recoverable);
   13068:	f10d 0107 	add.w	r1, sp, #7
   1306c:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   1306e:	f7ff ff73 	bl	12f58 <bus_fault.isra.0>
   13072:	e7d7      	b.n	13024 <z_arm_fault+0x6c>
		} else if (SCB_UFSR != 0) {
   13074:	4b0e      	ldr	r3, [pc, #56]	; (130b0 <z_arm_fault+0xf8>)
   13076:	8818      	ldrh	r0, [r3, #0]
   13078:	b283      	uxth	r3, r0
   1307a:	2b00      	cmp	r3, #0
   1307c:	d0d3      	beq.n	13026 <z_arm_fault+0x6e>
		reason = usage_fault(esf);
   1307e:	f7ff ff89 	bl	12f94 <usage_fault.isra.0>
   13082:	e7cf      	b.n	13024 <z_arm_fault+0x6c>
		reason = mem_manage_fault(esf, 0, recoverable);
   13084:	f10d 0207 	add.w	r2, sp, #7
   13088:	2100      	movs	r1, #0
   1308a:	e7c8      	b.n	1301e <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
   1308c:	f10d 0107 	add.w	r1, sp, #7
   13090:	2000      	movs	r0, #0
   13092:	e7ec      	b.n	1306e <z_arm_fault+0xb6>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13094:	2300      	movs	r3, #0
   13096:	e7c6      	b.n	13026 <z_arm_fault+0x6e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13098:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
   1309c:	f022 0201 	bic.w	r2, r2, #1
   130a0:	e7d8      	b.n	13054 <z_arm_fault+0x9c>
   130a2:	bf00      	nop
   130a4:	e000ed00 	.word	0xe000ed00
   130a8:	e000ed28 	.word	0xe000ed28
   130ac:	e000ed29 	.word	0xe000ed29
   130b0:	e000ed2a 	.word	0xe000ed2a

000130b4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   130b4:	4a02      	ldr	r2, [pc, #8]	; (130c0 <z_arm_fault_init+0xc>)
   130b6:	6953      	ldr	r3, [r2, #20]
   130b8:	f043 0310 	orr.w	r3, r3, #16
   130bc:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   130be:	4770      	bx	lr
   130c0:	e000ed00 	.word	0xe000ed00

000130c4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   130c4:	4b04      	ldr	r3, [pc, #16]	; (130d8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   130c6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   130c8:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   130ca:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   130cc:	d003      	beq.n	130d6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   130ce:	4903      	ldr	r1, [pc, #12]	; (130dc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   130d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   130d4:	600a      	str	r2, [r1, #0]

000130d6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   130d6:	4770      	bx	lr
	ldr r3, =_kernel
   130d8:	200027a4 	.word	0x200027a4
	ldr r1, =_SCS_ICSR
   130dc:	e000ed04 	.word	0xe000ed04

000130e0 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   130e0:	4a06      	ldr	r2, [pc, #24]	; (130fc <z_arm_clear_arm_mpu_config+0x1c>)
   130e2:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
   130e4:	2300      	movs	r3, #0
	int num_regions =
   130e6:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   130ea:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   130ec:	428b      	cmp	r3, r1
   130ee:	d100      	bne.n	130f2 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   130f0:	4770      	bx	lr
  MPU->RNR = rnr;
   130f2:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   130f4:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   130f6:	3301      	adds	r3, #1
   130f8:	e7f8      	b.n	130ec <z_arm_clear_arm_mpu_config+0xc>
   130fa:	bf00      	nop
   130fc:	e000ed90 	.word	0xe000ed90

00013100 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   13100:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   13102:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   13104:	2300      	movs	r3, #0
   13106:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1310a:	f7ff ffe9 	bl	130e0 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1310e:	4b14      	ldr	r3, [pc, #80]	; (13160 <z_arm_init_arch_hw_at_boot+0x60>)
   13110:	f04f 32ff 	mov.w	r2, #4294967295
   13114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   13118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   1311c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   13120:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   13124:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   13128:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   1312c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   13130:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   13134:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   13138:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   1313c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   13140:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   13144:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   13148:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   1314c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   13150:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   13154:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   13156:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1315a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   1315e:	bd08      	pop	{r3, pc}
   13160:	e000e100 	.word	0xe000e100

00013164 <z_arm_interrupt_init>:
   13164:	4804      	ldr	r0, [pc, #16]	; (13178 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   13166:	2300      	movs	r3, #0
   13168:	2140      	movs	r1, #64	; 0x40
   1316a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1316c:	3301      	adds	r3, #1
   1316e:	2b30      	cmp	r3, #48	; 0x30
   13170:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   13174:	d1f9      	bne.n	1316a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   13176:	4770      	bx	lr
   13178:	e000e100 	.word	0xe000e100

0001317c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   1317c:	4b06      	ldr	r3, [pc, #24]	; (13198 <z_impl_k_thread_abort+0x1c>)
   1317e:	689b      	ldr	r3, [r3, #8]
   13180:	4283      	cmp	r3, r0
   13182:	d107      	bne.n	13194 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13184:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   13188:	b123      	cbz	r3, 13194 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1318a:	4a04      	ldr	r2, [pc, #16]	; (1319c <z_impl_k_thread_abort+0x20>)
   1318c:	6853      	ldr	r3, [r2, #4]
   1318e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13192:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   13194:	f006 bbf2 	b.w	1997c <z_thread_abort>
   13198:	200027a4 	.word	0x200027a4
   1319c:	e000ed00 	.word	0xe000ed00

000131a0 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   131a0:	4b02      	ldr	r3, [pc, #8]	; (131ac <z_arm_configure_static_mpu_regions+0xc>)
   131a2:	4a03      	ldr	r2, [pc, #12]	; (131b0 <z_arm_configure_static_mpu_regions+0x10>)
   131a4:	4803      	ldr	r0, [pc, #12]	; (131b4 <z_arm_configure_static_mpu_regions+0x14>)
   131a6:	2101      	movs	r1, #1
   131a8:	f000 b868 	b.w	1327c <arm_core_mpu_configure_static_mpu_regions>
   131ac:	20040000 	.word	0x20040000
   131b0:	20000000 	.word	0x20000000
   131b4:	00021424 	.word	0x00021424

000131b8 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   131b8:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   131ba:	4b05      	ldr	r3, [pc, #20]	; (131d0 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   131bc:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   131be:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   131c0:	4a04      	ldr	r2, [pc, #16]	; (131d4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   131c2:	2120      	movs	r1, #32
   131c4:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   131c8:	4618      	mov	r0, r3
   131ca:	2101      	movs	r1, #1
   131cc:	f000 b860 	b.w	13290 <arm_core_mpu_configure_dynamic_mpu_regions>
   131d0:	200023d0 	.word	0x200023d0
   131d4:	150b0000 	.word	0x150b0000

000131d8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   131d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
   131da:	4f1e      	ldr	r7, [pc, #120]	; (13254 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   131dc:	2600      	movs	r6, #0
   131de:	428e      	cmp	r6, r1
   131e0:	db01      	blt.n	131e6 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   131e2:	4610      	mov	r0, r2
   131e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   131e6:	6844      	ldr	r4, [r0, #4]
   131e8:	b384      	cbz	r4, 1324c <mpu_configure_regions+0x74>
		if (do_sanity_check &&
   131ea:	b153      	cbz	r3, 13202 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   131ec:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   131f0:	ea14 0f0c 	tst.w	r4, ip
   131f4:	d118      	bne.n	13228 <mpu_configure_regions+0x50>
		&&
   131f6:	2c1f      	cmp	r4, #31
   131f8:	d916      	bls.n	13228 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
   131fa:	6805      	ldr	r5, [r0, #0]
		&&
   131fc:	ea1c 0f05 	tst.w	ip, r5
   13200:	d112      	bne.n	13228 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   13202:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   13204:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   13206:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   1320a:	b2d2      	uxtb	r2, r2
   1320c:	d90f      	bls.n	1322e <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   1320e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   13212:	d80e      	bhi.n	13232 <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   13214:	3c01      	subs	r4, #1
   13216:	fab4 f484 	clz	r4, r4
   1321a:	f1c4 041f 	rsb	r4, r4, #31
   1321e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   13220:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   13222:	ea4c 0404 	orr.w	r4, ip, r4
   13226:	d906      	bls.n	13236 <mpu_configure_regions+0x5e>
			return -EINVAL;
   13228:	f06f 0215 	mvn.w	r2, #21
   1322c:	e7d9      	b.n	131e2 <mpu_configure_regions+0xa>
		return REGION_32B;
   1322e:	2408      	movs	r4, #8
   13230:	e7f6      	b.n	13220 <mpu_configure_regions+0x48>
		return REGION_4G;
   13232:	243e      	movs	r4, #62	; 0x3e
   13234:	e7f4      	b.n	13220 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13236:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
   1323a:	4315      	orrs	r5, r2
   1323c:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13240:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
   13244:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13246:	60fd      	str	r5, [r7, #12]
		reg_index++;
   13248:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1324a:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
   1324c:	3601      	adds	r6, #1
   1324e:	300c      	adds	r0, #12
   13250:	e7c5      	b.n	131de <mpu_configure_regions+0x6>
   13252:	bf00      	nop
   13254:	e000ed90 	.word	0xe000ed90

00013258 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   13258:	4b03      	ldr	r3, [pc, #12]	; (13268 <arm_core_mpu_enable+0x10>)
   1325a:	2205      	movs	r2, #5
   1325c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   1325e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13262:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   13266:	4770      	bx	lr
   13268:	e000ed90 	.word	0xe000ed90

0001326c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   1326c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   13270:	4b01      	ldr	r3, [pc, #4]	; (13278 <arm_core_mpu_disable+0xc>)
   13272:	2200      	movs	r2, #0
   13274:	605a      	str	r2, [r3, #4]
}
   13276:	4770      	bx	lr
   13278:	e000ed90 	.word	0xe000ed90

0001327c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   1327c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1327e:	4c03      	ldr	r4, [pc, #12]	; (1328c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   13280:	2301      	movs	r3, #1
   13282:	7822      	ldrb	r2, [r4, #0]
   13284:	f7ff ffa8 	bl	131d8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   13288:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   1328a:	bd10      	pop	{r4, pc}
   1328c:	20003104 	.word	0x20003104

00013290 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   13290:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   13292:	4a08      	ldr	r2, [pc, #32]	; (132b4 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
   13294:	2300      	movs	r3, #0
   13296:	7812      	ldrb	r2, [r2, #0]
   13298:	f7ff ff9e 	bl	131d8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   1329c:	f110 0f16 	cmn.w	r0, #22
   132a0:	d003      	beq.n	132aa <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
   132a2:	4b05      	ldr	r3, [pc, #20]	; (132b8 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
   132a4:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   132a6:	2807      	cmp	r0, #7
   132a8:	dd00      	ble.n	132ac <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   132aa:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   132ac:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   132ae:	611a      	str	r2, [r3, #16]
   132b0:	3001      	adds	r0, #1
   132b2:	e7f8      	b.n	132a6 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   132b4:	20003104 	.word	0x20003104
   132b8:	e000ed90 	.word	0xe000ed90

000132bc <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   132bc:	4913      	ldr	r1, [pc, #76]	; (1330c <z_arm_mpu_init+0x50>)
   132be:	6808      	ldr	r0, [r1, #0]
   132c0:	2808      	cmp	r0, #8
{
   132c2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   132c4:	d81e      	bhi.n	13304 <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   132c6:	f7ff ffd1 	bl	1326c <arm_core_mpu_disable>
	MPU->RNR = index;
   132ca:	4c11      	ldr	r4, [pc, #68]	; (13310 <z_arm_mpu_init+0x54>)
   132cc:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   132ce:	2200      	movs	r2, #0
   132d0:	4290      	cmp	r0, r2
   132d2:	f101 010c 	add.w	r1, r1, #12
   132d6:	d105      	bne.n	132e4 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   132d8:	4b0e      	ldr	r3, [pc, #56]	; (13314 <z_arm_mpu_init+0x58>)
   132da:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   132dc:	f7ff ffbc 	bl	13258 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   132e0:	2000      	movs	r0, #0
}
   132e2:	bd10      	pop	{r4, pc}
   132e4:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   132e6:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   132ea:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   132ee:	4313      	orrs	r3, r2
   132f0:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   132f4:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   132f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
   132fa:	f043 0301 	orr.w	r3, r3, #1
   132fe:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13300:	3201      	adds	r2, #1
   13302:	e7e5      	b.n	132d0 <z_arm_mpu_init+0x14>
		return -1;
   13304:	f04f 30ff 	mov.w	r0, #4294967295
   13308:	e7eb      	b.n	132e2 <z_arm_mpu_init+0x26>
   1330a:	bf00      	nop
   1330c:	00021430 	.word	0x00021430
   13310:	e000ed90 	.word	0xe000ed90
   13314:	20003104 	.word	0x20003104

00013318 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   13318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1331a:	4f0a      	ldr	r7, [pc, #40]	; (13344 <z_impl_zephyr_write_stdout+0x2c>)
   1331c:	460d      	mov	r5, r1
   1331e:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   13320:	f1c0 0401 	rsb	r4, r0, #1
   13324:	19a3      	adds	r3, r4, r6
   13326:	429d      	cmp	r5, r3
   13328:	dc01      	bgt.n	1332e <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   1332a:	4628      	mov	r0, r5
   1332c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   1332e:	7873      	ldrb	r3, [r6, #1]
   13330:	2b0a      	cmp	r3, #10
   13332:	d102      	bne.n	1333a <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   13334:	683b      	ldr	r3, [r7, #0]
   13336:	200d      	movs	r0, #13
   13338:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   1333a:	683b      	ldr	r3, [r7, #0]
   1333c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   13340:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   13342:	e7ef      	b.n	13324 <z_impl_zephyr_write_stdout+0xc>
   13344:	20000574 	.word	0x20000574

00013348 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   13348:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   1334a:	211d      	movs	r1, #29
   1334c:	4804      	ldr	r0, [pc, #16]	; (13360 <__chk_fail+0x18>)
   1334e:	f7ff ffe3 	bl	13318 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   13352:	4040      	eors	r0, r0
   13354:	f380 8811 	msr	BASEPRI, r0
   13358:	f04f 0003 	mov.w	r0, #3
   1335c:	df02      	svc	2
	CODE_UNREACHABLE;
   1335e:	bf00      	nop
   13360:	00021da6 	.word	0x00021da6

00013364 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   13364:	f04f 0240 	mov.w	r2, #64	; 0x40
   13368:	f3ef 8311 	mrs	r3, BASEPRI
   1336c:	f382 8811 	msr	BASEPRI, r2
   13370:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   13374:	4a04      	ldr	r2, [pc, #16]	; (13388 <nordicsemi_nrf52_init+0x24>)
   13376:	2101      	movs	r1, #1
   13378:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   1337c:	f383 8811 	msr	BASEPRI, r3
   13380:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   13384:	2000      	movs	r0, #0
   13386:	4770      	bx	lr
   13388:	4001e000 	.word	0x4001e000

0001338c <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
   1338c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13390:	b2c0      	uxtb	r0, r0
   13392:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   13396:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1339a:	4905      	ldr	r1, [pc, #20]	; (133b0 <sys_arch_reboot+0x24>)
   1339c:	4b05      	ldr	r3, [pc, #20]	; (133b4 <sys_arch_reboot+0x28>)
   1339e:	68ca      	ldr	r2, [r1, #12]
   133a0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   133a4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   133a6:	60cb      	str	r3, [r1, #12]
   133a8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   133ac:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   133ae:	e7fd      	b.n	133ac <sys_arch_reboot+0x20>
   133b0:	e000ed00 	.word	0xe000ed00
   133b4:	05fa0004 	.word	0x05fa0004

000133b8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   133b8:	b120      	cbz	r0, 133c4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   133ba:	4b03      	ldr	r3, [pc, #12]	; (133c8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   133bc:	0180      	lsls	r0, r0, #6
   133be:	f043 0301 	orr.w	r3, r3, #1
   133c2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   133c4:	4770      	bx	lr
   133c6:	bf00      	nop
   133c8:	00020fa0 	.word	0x00020fa0

000133cc <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   133cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   133ce:	460b      	mov	r3, r1
	switch (src->type) {
   133d0:	7801      	ldrb	r1, [r0, #0]
   133d2:	2901      	cmp	r1, #1
{
   133d4:	4602      	mov	r2, r0
	switch (src->type) {
   133d6:	d015      	beq.n	13404 <uuid_to_uuid128+0x38>
   133d8:	2902      	cmp	r1, #2
   133da:	d02b      	beq.n	13434 <uuid_to_uuid128+0x68>
   133dc:	b989      	cbnz	r1, 13402 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   133de:	4c1c      	ldr	r4, [pc, #112]	; (13450 <uuid_to_uuid128+0x84>)
   133e0:	461d      	mov	r5, r3
   133e2:	f104 0710 	add.w	r7, r4, #16
   133e6:	6820      	ldr	r0, [r4, #0]
   133e8:	6861      	ldr	r1, [r4, #4]
   133ea:	462e      	mov	r6, r5
   133ec:	c603      	stmia	r6!, {r0, r1}
   133ee:	3408      	adds	r4, #8
   133f0:	42bc      	cmp	r4, r7
   133f2:	4635      	mov	r5, r6
   133f4:	d1f7      	bne.n	133e6 <uuid_to_uuid128+0x1a>
		sys_put_le16(BT_UUID_16(src)->val,
   133f6:	8852      	ldrh	r2, [r2, #2]
		*dst = uuid128_base;
   133f8:	7821      	ldrb	r1, [r4, #0]
   133fa:	7031      	strb	r1, [r6, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   133fc:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   133fe:	0a12      	lsrs	r2, r2, #8
   13400:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   13402:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst = uuid128_base;
   13404:	4c12      	ldr	r4, [pc, #72]	; (13450 <uuid_to_uuid128+0x84>)
   13406:	461d      	mov	r5, r3
   13408:	f104 0710 	add.w	r7, r4, #16
   1340c:	6820      	ldr	r0, [r4, #0]
   1340e:	6861      	ldr	r1, [r4, #4]
   13410:	462e      	mov	r6, r5
   13412:	c603      	stmia	r6!, {r0, r1}
   13414:	3408      	adds	r4, #8
   13416:	42bc      	cmp	r4, r7
   13418:	4635      	mov	r5, r6
   1341a:	d1f7      	bne.n	1340c <uuid_to_uuid128+0x40>
		sys_put_le32(BT_UUID_32(src)->val,
   1341c:	6852      	ldr	r2, [r2, #4]
		*dst = uuid128_base;
   1341e:	7821      	ldrb	r1, [r4, #0]
   13420:	7031      	strb	r1, [r6, #0]
   13422:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
   13426:	735a      	strb	r2, [r3, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   13428:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   1342a:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   1342c:	0a12      	lsrs	r2, r2, #8
   1342e:	7399      	strb	r1, [r3, #14]
   13430:	741a      	strb	r2, [r3, #16]
}
   13432:	e7e6      	b.n	13402 <uuid_to_uuid128+0x36>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13434:	f100 0510 	add.w	r5, r0, #16
   13438:	6810      	ldr	r0, [r2, #0]
   1343a:	6851      	ldr	r1, [r2, #4]
   1343c:	461c      	mov	r4, r3
   1343e:	c403      	stmia	r4!, {r0, r1}
   13440:	3208      	adds	r2, #8
   13442:	42aa      	cmp	r2, r5
   13444:	4623      	mov	r3, r4
   13446:	d1f7      	bne.n	13438 <uuid_to_uuid128+0x6c>
   13448:	7812      	ldrb	r2, [r2, #0]
   1344a:	7022      	strb	r2, [r4, #0]
   1344c:	e7d9      	b.n	13402 <uuid_to_uuid128+0x36>
   1344e:	bf00      	nop
   13450:	00021dd3 	.word	0x00021dd3

00013454 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   13454:	b538      	push	{r3, r4, r5, lr}
   13456:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf *net_buf_alloc(struct net_buf_pool *pool,
					    k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   13458:	4805      	ldr	r0, [pc, #20]	; (13470 <bt_buf_get_rx+0x1c>)
   1345a:	f00c fb8e 	bl	1fb7a <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   1345e:	4604      	mov	r4, r0
   13460:	b120      	cbz	r0, 1346c <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   13462:	2100      	movs	r1, #0
   13464:	3008      	adds	r0, #8
   13466:	f00c fba7 	bl	1fbb8 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1346a:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   1346c:	4620      	mov	r0, r4
   1346e:	bd38      	pop	{r3, r4, r5, pc}
   13470:	200009d0 	.word	0x200009d0

00013474 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   13474:	b570      	push	{r4, r5, r6, lr}
   13476:	4602      	mov	r2, r0
   13478:	460b      	mov	r3, r1
	__asm__ volatile(
   1347a:	f04f 0140 	mov.w	r1, #64	; 0x40
   1347e:	f3ef 8511 	mrs	r5, BASEPRI
   13482:	f381 8811 	msr	BASEPRI, r1
   13486:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
   1348a:	480c      	ldr	r0, [pc, #48]	; (134bc <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
   1348c:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
   1348e:	f8d0 4130 	ldr.w	r4, [r0, #304]	; 0x130
	bt_dev.sent_cmd = NULL;
   13492:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
	__asm__ volatile(
   13496:	f385 8811 	msr	BASEPRI, r5
   1349a:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
   1349e:	b924      	cbnz	r4, 134aa <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   134a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   134a4:	2001      	movs	r0, #1
   134a6:	f7ff bfd5 	b.w	13454 <bt_buf_get_rx>
   134aa:	2301      	movs	r3, #1
   134ac:	f104 0008 	add.w	r0, r4, #8
   134b0:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
   134b2:	81a1      	strh	r1, [r4, #12]
   134b4:	f00c fb80 	bl	1fbb8 <net_buf_simple_reserve>
}
   134b8:	4620      	mov	r0, r4
   134ba:	bd70      	pop	{r4, r5, r6, pc}
   134bc:	200002b8 	.word	0x200002b8

000134c0 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   134c0:	b570      	push	{r4, r5, r6, lr}
   134c2:	4604      	mov	r4, r0
	switch (evt) {
   134c4:	2c0f      	cmp	r4, #15
{
   134c6:	460d      	mov	r5, r1
   134c8:	4610      	mov	r0, r2
   134ca:	4619      	mov	r1, r3
	switch (evt) {
   134cc:	d805      	bhi.n	134da <bt_buf_get_evt+0x1a>
   134ce:	2c0d      	cmp	r4, #13
   134d0:	d912      	bls.n	134f8 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   134d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   134d6:	f7ff bfcd 	b.w	13474 <bt_buf_get_cmd_complete>
	switch (evt) {
   134da:	2c13      	cmp	r4, #19
   134dc:	d10c      	bne.n	134f8 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   134de:	480b      	ldr	r0, [pc, #44]	; (1350c <bt_buf_get_evt+0x4c>)
   134e0:	f00c fb4b 	bl	1fb7a <net_buf_alloc_fixed>
			if (buf) {
   134e4:	4604      	mov	r4, r0
   134e6:	b128      	cbz	r0, 134f4 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   134e8:	2100      	movs	r1, #0
   134ea:	3008      	adds	r0, #8
   134ec:	f00c fb64 	bl	1fbb8 <net_buf_simple_reserve>
   134f0:	2301      	movs	r3, #1
   134f2:	7523      	strb	r3, [r4, #20]
}
   134f4:	4620      	mov	r0, r4
   134f6:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   134f8:	4602      	mov	r2, r0
   134fa:	460b      	mov	r3, r1
		if (discardable) {
   134fc:	b10d      	cbz	r5, 13502 <bt_buf_get_evt+0x42>
   134fe:	4804      	ldr	r0, [pc, #16]	; (13510 <bt_buf_get_evt+0x50>)
   13500:	e7ee      	b.n	134e0 <bt_buf_get_evt+0x20>
}
   13502:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13506:	2001      	movs	r0, #1
   13508:	f7ff bfa4 	b.w	13454 <bt_buf_get_rx>
   1350c:	200009f8 	.word	0x200009f8
   13510:	20000958 	.word	0x20000958

00013514 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   13514:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   13516:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
   13518:	781a      	ldrb	r2, [r3, #0]
   1351a:	b972      	cbnz	r2, 1353a <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1351c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   13520:	4620      	mov	r0, r4
   13522:	f001 fc85 	bl	14e30 <bt_conn_lookup_handle>
	if (!conn) {
   13526:	4605      	mov	r5, r0
   13528:	b940      	cbnz	r0, 1353c <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1352a:	4b08      	ldr	r3, [pc, #32]	; (1354c <hci_disconn_complete_prio+0x38>)
   1352c:	881a      	ldrh	r2, [r3, #0]
   1352e:	b922      	cbnz	r2, 1353a <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   13530:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   13534:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   13538:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   1353a:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1353c:	2101      	movs	r1, #1
   1353e:	f001 fc83 	bl	14e48 <bt_conn_set_state>
	bt_conn_unref(conn);
   13542:	4628      	mov	r0, r5
}
   13544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   13548:	f00b b90b 	b.w	1e762 <bt_conn_unref>
   1354c:	200030ec 	.word	0x200030ec

00013550 <hci_le_meta_event>:
		      sizeof(struct bt_hci_evt_le_connectionless_iq_report)),
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
};

static void hci_le_meta_event(struct net_buf *buf)
{
   13550:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   13552:	2101      	movs	r1, #1
   13554:	4604      	mov	r4, r0
   13556:	3008      	adds	r0, #8
   13558:	f00c fb8d 	bl	1fc76 <net_buf_simple_pull_mem>

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1355c:	4621      	mov	r1, r4
   1355e:	4a03      	ldr	r2, [pc, #12]	; (1356c <hci_le_meta_event+0x1c>)
   13560:	7800      	ldrb	r0, [r0, #0]
}
   13562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   13566:	2307      	movs	r3, #7
   13568:	f00a bc5f 	b.w	1de2a <handle_event>
   1356c:	00021480 	.word	0x00021480

00013570 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   13570:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   13572:	4c0c      	ldr	r4, [pc, #48]	; (135a4 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   13574:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   13576:	2205      	movs	r2, #5
   13578:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   1357c:	f001 fdb4 	bl	150e8 <bt_conn_lookup_state_le>
		if (!conn) {
   13580:	b970      	cbnz	r0, 135a0 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   13582:	4b09      	ldr	r3, [pc, #36]	; (135a8 <find_pending_connect.part.0+0x38>)
   13584:	6818      	ldr	r0, [r3, #0]
   13586:	889a      	ldrh	r2, [r3, #4]
   13588:	9000      	str	r0, [sp, #0]
   1358a:	799b      	ldrb	r3, [r3, #6]
   1358c:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   13590:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   13594:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   13598:	2204      	movs	r2, #4
   1359a:	4669      	mov	r1, sp
   1359c:	f001 fda4 	bl	150e8 <bt_conn_lookup_state_le>
}
   135a0:	b002      	add	sp, #8
   135a2:	bd10      	pop	{r4, pc}
   135a4:	200002b8 	.word	0x200002b8
   135a8:	00020f8c 	.word	0x00020f8c

000135ac <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   135ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   135b0:	4f3b      	ldr	r7, [pc, #236]	; (136a0 <hci_rx_thread+0xf4>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   135b2:	f8df 8100 	ldr.w	r8, [pc, #256]	; 136b4 <hci_rx_thread+0x108>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   135b6:	4e3b      	ldr	r6, [pc, #236]	; (136a4 <hci_rx_thread+0xf8>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   135b8:	f04f 33ff 	mov.w	r3, #4294967295
   135bc:	f04f 32ff 	mov.w	r2, #4294967295
   135c0:	4638      	mov	r0, r7
   135c2:	f00c fadf 	bl	1fb84 <net_buf_get>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   135c6:	7d03      	ldrb	r3, [r0, #20]

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
   135c8:	2b01      	cmp	r3, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   135ca:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   135cc:	d039      	beq.n	13642 <hci_rx_thread+0x96>
   135ce:	2b03      	cmp	r3, #3
   135d0:	d120      	bne.n	13614 <hci_rx_thread+0x68>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   135d2:	8983      	ldrh	r3, [r0, #12]
   135d4:	2b03      	cmp	r3, #3
   135d6:	d80c      	bhi.n	135f2 <hci_rx_thread+0x46>
   135d8:	4933      	ldr	r1, [pc, #204]	; (136a8 <hci_rx_thread+0xfc>)
   135da:	4834      	ldr	r0, [pc, #208]	; (136ac <hci_rx_thread+0x100>)
   135dc:	f240 1377 	movw	r3, #375	; 0x177
   135e0:	4632      	mov	r2, r6
   135e2:	f009 fd05 	bl	1cff0 <printk>
   135e6:	4040      	eors	r0, r0
   135e8:	f380 8811 	msr	BASEPRI, r0
   135ec:	f04f 0003 	mov.w	r0, #3
   135f0:	df02      	svc	2
   135f2:	2104      	movs	r1, #4
   135f4:	f104 0008 	add.w	r0, r4, #8
   135f8:	f00c fb3d 	bl	1fc76 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   135fc:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   135fe:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   13600:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   13604:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   13606:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   13608:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
   1360c:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   1360e:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   13610:	d003      	beq.n	1361a <hci_rx_thread+0x6e>
	net_buf_unref(buf);
   13612:	4620      	mov	r0, r4
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
   13614:	f003 fa4e 	bl	16ab4 <net_buf_unref>
			break;
   13618:	e010      	b.n	1363c <hci_rx_thread+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   1361a:	f001 fc09 	bl	14e30 <bt_conn_lookup_handle>
	if (!conn) {
   1361e:	4605      	mov	r5, r0
   13620:	2800      	cmp	r0, #0
   13622:	d0f6      	beq.n	13612 <hci_rx_thread+0x66>
	acl(buf)->index = bt_conn_index(conn);
   13624:	f001 fcba 	bl	14f9c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   13628:	ea4f 3219 	mov.w	r2, r9, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   1362c:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   1362e:	4621      	mov	r1, r4
   13630:	4628      	mov	r0, r5
   13632:	f00b f834 	bl	1e69e <bt_conn_recv>
	bt_conn_unref(conn);
   13636:	4628      	mov	r0, r5
   13638:	f00b f893 	bl	1e762 <bt_conn_unref>
	z_impl_k_yield();
   1363c:	f006 f8e0 	bl	19800 <z_impl_k_yield>
	while (1) {
   13640:	e7ba      	b.n	135b8 <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13642:	8983      	ldrh	r3, [r0, #12]
   13644:	2b01      	cmp	r3, #1
   13646:	d80c      	bhi.n	13662 <hci_rx_thread+0xb6>
   13648:	4917      	ldr	r1, [pc, #92]	; (136a8 <hci_rx_thread+0xfc>)
   1364a:	4818      	ldr	r0, [pc, #96]	; (136ac <hci_rx_thread+0x100>)
   1364c:	f640 1309 	movw	r3, #2313	; 0x909
   13650:	4632      	mov	r2, r6
   13652:	f009 fccd 	bl	1cff0 <printk>
   13656:	4040      	eors	r0, r0
   13658:	f380 8811 	msr	BASEPRI, r0
   1365c:	f04f 0003 	mov.w	r0, #3
   13660:	df02      	svc	2
   13662:	2102      	movs	r1, #2
   13664:	f104 0008 	add.w	r0, r4, #8
   13668:	f00c fb05 	bl	1fc76 <net_buf_simple_pull_mem>
   1366c:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1366e:	7800      	ldrb	r0, [r0, #0]
   13670:	f00a fbc9 	bl	1de06 <bt_hci_evt_get_flags>
   13674:	0783      	lsls	r3, r0, #30
   13676:	d40c      	bmi.n	13692 <hci_rx_thread+0xe6>
   13678:	490d      	ldr	r1, [pc, #52]	; (136b0 <hci_rx_thread+0x104>)
   1367a:	480c      	ldr	r0, [pc, #48]	; (136ac <hci_rx_thread+0x100>)
   1367c:	f640 130d 	movw	r3, #2317	; 0x90d
   13680:	4632      	mov	r2, r6
   13682:	f009 fcb5 	bl	1cff0 <printk>
   13686:	4040      	eors	r0, r0
   13688:	f380 8811 	msr	BASEPRI, r0
   1368c:	f04f 0003 	mov.w	r0, #3
   13690:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   13692:	7828      	ldrb	r0, [r5, #0]
   13694:	2304      	movs	r3, #4
   13696:	4642      	mov	r2, r8
   13698:	4621      	mov	r1, r4
   1369a:	f00a fbc6 	bl	1de2a <handle_event>
   1369e:	e7b8      	b.n	13612 <hci_rx_thread+0x66>
   136a0:	200003ec 	.word	0x200003ec
   136a4:	00021de4 	.word	0x00021de4
   136a8:	00021e18 	.word	0x00021e18
   136ac:	00021e31 	.word	0x00021e31
   136b0:	00021e4e 	.word	0x00021e4e
   136b4:	000214c8 	.word	0x000214c8

000136b8 <hci_cmd_done.isra.0>:
static void hci_cmd_done(uint16_t opcode, uint8_t status, struct net_buf *buf)
   136b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   136ba:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   136bc:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(uint16_t opcode, uint8_t status, struct net_buf *buf)
   136be:	460c      	mov	r4, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   136c0:	f003 f93c 	bl	1693c <net_buf_pool_get>
   136c4:	4b28      	ldr	r3, [pc, #160]	; (13768 <hci_cmd_done.isra.0+0xb0>)
   136c6:	4283      	cmp	r3, r0
   136c8:	d14c      	bne.n	13764 <hci_cmd_done.isra.0+0xac>
	if (cmd(buf)->opcode != opcode) {
   136ca:	4620      	mov	r0, r4
   136cc:	f003 f93e 	bl	1694c <net_buf_id>
	if (cmd(buf)->state && !status) {
   136d0:	4620      	mov	r0, r4
   136d2:	f003 f93b 	bl	1694c <net_buf_id>
   136d6:	4d25      	ldr	r5, [pc, #148]	; (1376c <hci_cmd_done.isra.0+0xb4>)
   136d8:	270c      	movs	r7, #12
   136da:	fb07 5300 	mla	r3, r7, r0, r5
   136de:	685b      	ldr	r3, [r3, #4]
   136e0:	b1e3      	cbz	r3, 1371c <hci_cmd_done.isra.0+0x64>
   136e2:	b9de      	cbnz	r6, 1371c <hci_cmd_done.isra.0+0x64>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   136e4:	4620      	mov	r0, r4
   136e6:	f003 f931 	bl	1694c <net_buf_id>
   136ea:	fb07 5000 	mla	r0, r7, r0, r5
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   136ee:	2201      	movs	r2, #1
   136f0:	6840      	ldr	r0, [r0, #4]
   136f2:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
   136f6:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   136f8:	f001 071f 	and.w	r7, r1, #31
   136fc:	40ba      	lsls	r2, r7
	if (val) {
   136fe:	0949      	lsrs	r1, r1, #5
   13700:	b318      	cbz	r0, 1374a <hci_cmd_done.isra.0+0x92>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13702:	f3bf 8f5b 	dmb	ish
   13706:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1370a:	e853 1f00 	ldrex	r1, [r3]
   1370e:	4311      	orrs	r1, r2
   13710:	e843 1000 	strex	r0, r1, [r3]
   13714:	2800      	cmp	r0, #0
   13716:	d1f8      	bne.n	1370a <hci_cmd_done.isra.0+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13718:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
   1371c:	4620      	mov	r0, r4
   1371e:	f003 f915 	bl	1694c <net_buf_id>
   13722:	270c      	movs	r7, #12
   13724:	fb07 5000 	mla	r0, r7, r0, r5
   13728:	6883      	ldr	r3, [r0, #8]
   1372a:	b1db      	cbz	r3, 13764 <hci_cmd_done.isra.0+0xac>
		cmd(buf)->status = status;
   1372c:	4620      	mov	r0, r4
   1372e:	f003 f90d 	bl	1694c <net_buf_id>
   13732:	4378      	muls	r0, r7
   13734:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   13736:	4620      	mov	r0, r4
   13738:	f003 f908 	bl	1694c <net_buf_id>
   1373c:	fb07 5500 	mla	r5, r7, r0, r5
   13740:	68a8      	ldr	r0, [r5, #8]
}
   13742:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   13746:	f005 bbe5 	b.w	18f14 <z_impl_k_sem_give>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1374a:	43d2      	mvns	r2, r2
   1374c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13750:	f3bf 8f5b 	dmb	ish
   13754:	e853 1f00 	ldrex	r1, [r3]
   13758:	4011      	ands	r1, r2
   1375a:	e843 1000 	strex	r0, r1, [r3]
   1375e:	2800      	cmp	r0, #0
   13760:	d0da      	beq.n	13718 <hci_cmd_done.isra.0+0x60>
   13762:	e7f7      	b.n	13754 <hci_cmd_done.isra.0+0x9c>
   13764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13766:	bf00      	nop
   13768:	200009a8 	.word	0x200009a8
   1376c:	200023dc 	.word	0x200023dc

00013770 <hci_cmd_complete>:
{
   13770:	b538      	push	{r3, r4, r5, lr}
   13772:	2103      	movs	r1, #3
   13774:	4604      	mov	r4, r0
   13776:	3008      	adds	r0, #8
   13778:	f00c fa7d 	bl	1fc76 <net_buf_simple_pull_mem>
	status = buf->data[0];
   1377c:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   1377e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   13780:	7818      	ldrb	r0, [r3, #0]
   13782:	4621      	mov	r1, r4
   13784:	f7ff ff98 	bl	136b8 <hci_cmd_done.isra.0>
	if (ncmd) {
   13788:	b125      	cbz	r5, 13794 <hci_cmd_complete+0x24>
   1378a:	4803      	ldr	r0, [pc, #12]	; (13798 <hci_cmd_complete+0x28>)
}
   1378c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13790:	f005 bbc0 	b.w	18f14 <z_impl_k_sem_give>
   13794:	bd38      	pop	{r3, r4, r5, pc}
   13796:	bf00      	nop
   13798:	200003d0 	.word	0x200003d0

0001379c <hci_cmd_status>:
{
   1379c:	b538      	push	{r3, r4, r5, lr}
   1379e:	2104      	movs	r1, #4
   137a0:	4604      	mov	r4, r0
   137a2:	3008      	adds	r0, #8
   137a4:	f00c fa67 	bl	1fc76 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   137a8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   137aa:	7800      	ldrb	r0, [r0, #0]
   137ac:	4621      	mov	r1, r4
   137ae:	f7ff ff83 	bl	136b8 <hci_cmd_done.isra.0>
	if (ncmd) {
   137b2:	b125      	cbz	r5, 137be <hci_cmd_status+0x22>
   137b4:	4802      	ldr	r0, [pc, #8]	; (137c0 <hci_cmd_status+0x24>)
}
   137b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   137ba:	f005 bbab 	b.w	18f14 <z_impl_k_sem_give>
   137be:	bd38      	pop	{r3, r4, r5, pc}
   137c0:	200003d0 	.word	0x200003d0

000137c4 <bt_hci_cmd_state_set_init>:
{
   137c4:	b510      	push	{r4, lr}
	state->bit = bit;
   137c6:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   137ca:	f89d 3008 	ldrb.w	r3, [sp, #8]
   137ce:	720b      	strb	r3, [r1, #8]
{
   137d0:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   137d2:	f003 f8bb 	bl	1694c <net_buf_id>
   137d6:	4b03      	ldr	r3, [pc, #12]	; (137e4 <bt_hci_cmd_state_set_init+0x20>)
   137d8:	220c      	movs	r2, #12
   137da:	fb02 3000 	mla	r0, r2, r0, r3
   137de:	6044      	str	r4, [r0, #4]
}
   137e0:	bd10      	pop	{r4, pc}
   137e2:	bf00      	nop
   137e4:	200023dc 	.word	0x200023dc

000137e8 <bt_hci_cmd_create>:
{
   137e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   137ec:	f04f 32ff 	mov.w	r2, #4294967295
   137f0:	f04f 33ff 	mov.w	r3, #4294967295
   137f4:	4605      	mov	r5, r0
   137f6:	4816      	ldr	r0, [pc, #88]	; (13850 <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
   137f8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 13854 <bt_hci_cmd_create+0x6c>
{
   137fc:	460e      	mov	r6, r1
   137fe:	f00c f9bc 	bl	1fb7a <net_buf_alloc_fixed>
   13802:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   13804:	f100 0b08 	add.w	fp, r0, #8
   13808:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1380a:	2700      	movs	r7, #0
   1380c:	4658      	mov	r0, fp
   1380e:	f00c f9d3 	bl	1fbb8 <net_buf_simple_reserve>
   13812:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   13814:	4620      	mov	r0, r4
   13816:	f003 f899 	bl	1694c <net_buf_id>
   1381a:	f04f 0a0c 	mov.w	sl, #12
   1381e:	fb0a 8000 	mla	r0, sl, r0, r8
   13822:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   13824:	4620      	mov	r0, r4
   13826:	f003 f891 	bl	1694c <net_buf_id>
   1382a:	fb0a 8000 	mla	r0, sl, r0, r8
   1382e:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   13830:	4620      	mov	r0, r4
   13832:	f003 f88b 	bl	1694c <net_buf_id>
   13836:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   1383a:	2103      	movs	r1, #3
   1383c:	6047      	str	r7, [r0, #4]
   1383e:	4658      	mov	r0, fp
   13840:	f00c f9f1 	bl	1fc26 <net_buf_simple_add>
	hdr->param_len = param_len;
   13844:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   13846:	8005      	strh	r5, [r0, #0]
}
   13848:	4620      	mov	r0, r4
   1384a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1384e:	bf00      	nop
   13850:	200009a8 	.word	0x200009a8
   13854:	200023dc 	.word	0x200023dc

00013858 <bt_hci_cmd_send_sync>:
{
   13858:	b5f0      	push	{r4, r5, r6, r7, lr}
   1385a:	4615      	mov	r5, r2
   1385c:	b087      	sub	sp, #28
	if (!buf) {
   1385e:	460c      	mov	r4, r1
   13860:	b921      	cbnz	r1, 1386c <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   13862:	f7ff ffc1 	bl	137e8 <bt_hci_cmd_create>
		if (!buf) {
   13866:	4604      	mov	r4, r0
   13868:	2800      	cmp	r0, #0
   1386a:	d048      	beq.n	138fe <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1386c:	2201      	movs	r2, #1
   1386e:	2100      	movs	r1, #0
   13870:	4668      	mov	r0, sp
   13872:	f00c fd46 	bl	20302 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   13876:	4620      	mov	r0, r4
   13878:	f003 f868 	bl	1694c <net_buf_id>
   1387c:	4e21      	ldr	r6, [pc, #132]	; (13904 <bt_hci_cmd_send_sync+0xac>)
   1387e:	230c      	movs	r3, #12
   13880:	fb03 6000 	mla	r0, r3, r0, r6
   13884:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   13888:	4620      	mov	r0, r4
   1388a:	f00c f9a6 	bl	1fbda <net_buf_ref>
   1388e:	4601      	mov	r1, r0
   13890:	481d      	ldr	r0, [pc, #116]	; (13908 <bt_hci_cmd_send_sync+0xb0>)
   13892:	f00c f995 	bl	1fbc0 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   13896:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1389a:	2300      	movs	r3, #0
   1389c:	4668      	mov	r0, sp
   1389e:	f005 fb5f 	bl	18f60 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   138a2:	4607      	mov	r7, r0
   138a4:	b180      	cbz	r0, 138c8 <bt_hci_cmd_send_sync+0x70>
   138a6:	4a19      	ldr	r2, [pc, #100]	; (1390c <bt_hci_cmd_send_sync+0xb4>)
   138a8:	4919      	ldr	r1, [pc, #100]	; (13910 <bt_hci_cmd_send_sync+0xb8>)
   138aa:	481a      	ldr	r0, [pc, #104]	; (13914 <bt_hci_cmd_send_sync+0xbc>)
   138ac:	f240 1331 	movw	r3, #305	; 0x131
   138b0:	f009 fb9e 	bl	1cff0 <printk>
   138b4:	4818      	ldr	r0, [pc, #96]	; (13918 <bt_hci_cmd_send_sync+0xc0>)
   138b6:	4639      	mov	r1, r7
   138b8:	f009 fb9a 	bl	1cff0 <printk>
   138bc:	4040      	eors	r0, r0
   138be:	f380 8811 	msr	BASEPRI, r0
   138c2:	f04f 0003 	mov.w	r0, #3
   138c6:	df02      	svc	2
	status = cmd(buf)->status;
   138c8:	4620      	mov	r0, r4
   138ca:	f003 f83f 	bl	1694c <net_buf_id>
   138ce:	230c      	movs	r3, #12
   138d0:	4343      	muls	r3, r0
   138d2:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   138d4:	b156      	cbz	r6, 138ec <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   138d6:	4620      	mov	r0, r4
   138d8:	f003 f8ec 	bl	16ab4 <net_buf_unref>
			return -EIO;
   138dc:	2e09      	cmp	r6, #9
   138de:	bf0c      	ite	eq
   138e0:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   138e4:	f06f 0004 	mvnne.w	r0, #4
}
   138e8:	b007      	add	sp, #28
   138ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   138ec:	b115      	cbz	r5, 138f4 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   138ee:	602c      	str	r4, [r5, #0]
	return 0;
   138f0:	4630      	mov	r0, r6
   138f2:	e7f9      	b.n	138e8 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   138f4:	4620      	mov	r0, r4
   138f6:	f003 f8dd 	bl	16ab4 <net_buf_unref>
	return 0;
   138fa:	4628      	mov	r0, r5
   138fc:	e7f4      	b.n	138e8 <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
   138fe:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13902:	e7f1      	b.n	138e8 <bt_hci_cmd_send_sync+0x90>
   13904:	200023dc 	.word	0x200023dc
   13908:	20000404 	.word	0x20000404
   1390c:	00021de4 	.word	0x00021de4
   13910:	00021e7c 	.word	0x00021e7c
   13914:	00021e31 	.word	0x00021e31
   13918:	00021e85 	.word	0x00021e85

0001391c <hci_init>:
{
   1391c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   1391e:	4d40      	ldr	r5, [pc, #256]	; (13a20 <hci_init+0x104>)
   13920:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   13924:	6899      	ldr	r1, [r3, #8]
   13926:	f011 0101 	ands.w	r1, r1, #1
   1392a:	d121      	bne.n	13970 <hci_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   1392c:	aa01      	add	r2, sp, #4
   1392e:	f640 4003 	movw	r0, #3075	; 0xc03
   13932:	f7ff ff91 	bl	13858 <bt_hci_cmd_send_sync>
		if (err) {
   13936:	4604      	mov	r4, r0
   13938:	2800      	cmp	r0, #0
   1393a:	d16e      	bne.n	13a1a <hci_init+0xfe>
		hci_reset_complete(rsp);
   1393c:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
   1393e:	689b      	ldr	r3, [r3, #8]
	if (status) {
   13940:	781b      	ldrb	r3, [r3, #0]
   13942:	b993      	cbnz	r3, 1396a <hci_init+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13944:	f3bf 8f5b 	dmb	ish
   13948:	462b      	mov	r3, r5
   1394a:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   1394e:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   13952:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13956:	f3bf 8f5b 	dmb	ish
   1395a:	e853 1f00 	ldrex	r1, [r3]
   1395e:	e843 2000 	strex	r0, r2, [r3]
   13962:	2800      	cmp	r0, #0
   13964:	d1f9      	bne.n	1395a <hci_init+0x3e>
   13966:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   1396a:	9801      	ldr	r0, [sp, #4]
   1396c:	f003 f8a2 	bl	16ab4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   13970:	aa01      	add	r2, sp, #4
   13972:	2100      	movs	r1, #0
   13974:	f241 0003 	movw	r0, #4099	; 0x1003
   13978:	f7ff ff6e 	bl	13858 <bt_hci_cmd_send_sync>
	if (err) {
   1397c:	4604      	mov	r4, r0
   1397e:	2800      	cmp	r0, #0
   13980:	d14b      	bne.n	13a1a <hci_init+0xfe>
	read_local_features_complete(rsp);
   13982:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   13984:	4e27      	ldr	r6, [pc, #156]	; (13a24 <hci_init+0x108>)
   13986:	6893      	ldr	r3, [r2, #8]
   13988:	f853 0f01 	ldr.w	r0, [r3, #1]!
   1398c:	6859      	ldr	r1, [r3, #4]
   1398e:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   13990:	4610      	mov	r0, r2
   13992:	f003 f88f 	bl	16ab4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   13996:	4621      	mov	r1, r4
   13998:	aa01      	add	r2, sp, #4
   1399a:	f241 0001 	movw	r0, #4097	; 0x1001
   1399e:	f7ff ff5b 	bl	13858 <bt_hci_cmd_send_sync>
	if (err) {
   139a2:	4604      	mov	r4, r0
   139a4:	2800      	cmp	r0, #0
   139a6:	d138      	bne.n	13a1a <hci_init+0xfe>
	read_local_ver_complete(rsp);
   139a8:	9801      	ldr	r0, [sp, #4]
   139aa:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   139ac:	785a      	ldrb	r2, [r3, #1]
   139ae:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   139b2:	78d9      	ldrb	r1, [r3, #3]
   139b4:	789a      	ldrb	r2, [r3, #2]
   139b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   139ba:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   139be:	791a      	ldrb	r2, [r3, #4]
   139c0:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   139c4:	7a19      	ldrb	r1, [r3, #8]
   139c6:	79da      	ldrb	r2, [r3, #7]
   139c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   139cc:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   139d0:	795a      	ldrb	r2, [r3, #5]
   139d2:	799b      	ldrb	r3, [r3, #6]
   139d4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   139d8:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   139dc:	f003 f86a 	bl	16ab4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   139e0:	4621      	mov	r1, r4
   139e2:	aa01      	add	r2, sp, #4
   139e4:	f241 0002 	movw	r0, #4098	; 0x1002
   139e8:	f7ff ff36 	bl	13858 <bt_hci_cmd_send_sync>
	if (err) {
   139ec:	4604      	mov	r4, r0
   139ee:	b9a0      	cbnz	r0, 13a1a <hci_init+0xfe>
	read_supported_commands_complete(rsp);
   139f0:	9f01      	ldr	r7, [sp, #4]
   139f2:	68ba      	ldr	r2, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   139f4:	1c53      	adds	r3, r2, #1
   139f6:	3241      	adds	r2, #65	; 0x41
   139f8:	6818      	ldr	r0, [r3, #0]
   139fa:	6859      	ldr	r1, [r3, #4]
   139fc:	4634      	mov	r4, r6
   139fe:	c403      	stmia	r4!, {r0, r1}
   13a00:	3308      	adds	r3, #8
   13a02:	4293      	cmp	r3, r2
   13a04:	4626      	mov	r6, r4
   13a06:	d1f7      	bne.n	139f8 <hci_init+0xdc>
	net_buf_unref(rsp);
   13a08:	4638      	mov	r0, r7
   13a0a:	f003 f853 	bl	16ab4 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   13a0e:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   13a12:	065e      	lsls	r6, r3, #25
   13a14:	d408      	bmi.n	13a28 <hci_init+0x10c>
		return -ENODEV;
   13a16:	f06f 0412 	mvn.w	r4, #18
}
   13a1a:	4620      	mov	r0, r4
   13a1c:	b003      	add	sp, #12
   13a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13a20:	200002b8 	.word	0x200002b8
   13a24:	20000328 	.word	0x20000328
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   13a28:	aa01      	add	r2, sp, #4
   13a2a:	2100      	movs	r1, #0
   13a2c:	f242 0003 	movw	r0, #8195	; 0x2003
   13a30:	f7ff ff12 	bl	13858 <bt_hci_cmd_send_sync>
	if (err) {
   13a34:	4604      	mov	r4, r0
   13a36:	2800      	cmp	r0, #0
   13a38:	d1ef      	bne.n	13a1a <hci_init+0xfe>
	read_le_features_complete(rsp);
   13a3a:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   13a3c:	4e95      	ldr	r6, [pc, #596]	; (13c94 <hci_init+0x378>)
   13a3e:	6893      	ldr	r3, [r2, #8]
   13a40:	f853 0f01 	ldr.w	r0, [r3, #1]!
   13a44:	6859      	ldr	r1, [r3, #4]
   13a46:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   13a48:	4610      	mov	r0, r2
   13a4a:	f003 f833 	bl	16ab4 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   13a4e:	4621      	mov	r1, r4
   13a50:	aa01      	add	r2, sp, #4
   13a52:	f242 0002 	movw	r0, #8194	; 0x2002
   13a56:	f7ff feff 	bl	13858 <bt_hci_cmd_send_sync>
		if (err) {
   13a5a:	4604      	mov	r4, r0
   13a5c:	2800      	cmp	r0, #0
   13a5e:	d1dc      	bne.n	13a1a <hci_init+0xfe>
		le_read_buffer_size_complete(rsp);
   13a60:	9b01      	ldr	r3, [sp, #4]
   13a62:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   13a64:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   13a68:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   13a6c:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   13a6e:	b129      	cbz	r1, 13a7c <hci_init+0x160>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   13a70:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   13a72:	4611      	mov	r1, r2
   13a74:	f106 0028 	add.w	r0, r6, #40	; 0x28
   13a78:	f00c fc43 	bl	20302 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   13a7c:	9801      	ldr	r0, [sp, #4]
   13a7e:	f003 f819 	bl	16ab4 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   13a82:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   13a86:	f016 0620 	ands.w	r6, r6, #32
   13a8a:	f000 80e7 	beq.w	13c5c <hci_init+0x340>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   13a8e:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   13a92:	071c      	lsls	r4, r3, #28
   13a94:	d511      	bpl.n	13aba <hci_init+0x19e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   13a96:	aa01      	add	r2, sp, #4
   13a98:	2100      	movs	r1, #0
   13a9a:	f242 001c 	movw	r0, #8220	; 0x201c
   13a9e:	f7ff fedb 	bl	13858 <bt_hci_cmd_send_sync>
		if (err) {
   13aa2:	4604      	mov	r4, r0
   13aa4:	2800      	cmp	r0, #0
   13aa6:	d1b8      	bne.n	13a1a <hci_init+0xfe>
		le_read_supp_states_complete(rsp);
   13aa8:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   13aaa:	6883      	ldr	r3, [r0, #8]
   13aac:	f853 2f01 	ldr.w	r2, [r3, #1]!
   13ab0:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   13ab2:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   13ab6:	f002 fffd 	bl	16ab4 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   13aba:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   13abe:	0698      	lsls	r0, r3, #26
   13ac0:	d523      	bpl.n	13b0a <hci_init+0x1ee>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   13ac2:	f10d 0102 	add.w	r1, sp, #2
   13ac6:	4668      	mov	r0, sp
   13ac8:	f00a fa95 	bl	1dff6 <hci_le_read_max_data_len>
		if (err) {
   13acc:	4604      	mov	r4, r0
   13ace:	2800      	cmp	r0, #0
   13ad0:	d1a3      	bne.n	13a1a <hci_init+0xfe>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   13ad2:	2104      	movs	r1, #4
   13ad4:	f242 0024 	movw	r0, #8228	; 0x2024
   13ad8:	f7ff fe86 	bl	137e8 <bt_hci_cmd_create>
		if (!buf) {
   13adc:	4606      	mov	r6, r0
   13ade:	2800      	cmp	r0, #0
   13ae0:	f000 80c3 	beq.w	13c6a <hci_init+0x34e>
   13ae4:	2104      	movs	r1, #4
   13ae6:	3008      	adds	r0, #8
   13ae8:	f00c f89d 	bl	1fc26 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   13aec:	f8bd 3000 	ldrh.w	r3, [sp]
   13af0:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   13af2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   13af6:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   13af8:	4622      	mov	r2, r4
   13afa:	4631      	mov	r1, r6
   13afc:	f242 0024 	movw	r0, #8228	; 0x2024
   13b00:	f7ff feaa 	bl	13858 <bt_hci_cmd_send_sync>
		if (err) {
   13b04:	4604      	mov	r4, r0
   13b06:	2800      	cmp	r0, #0
   13b08:	d187      	bne.n	13a1a <hci_init+0xfe>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   13b0a:	2108      	movs	r1, #8
   13b0c:	f242 0001 	movw	r0, #8193	; 0x2001
   13b10:	f7ff fe6a 	bl	137e8 <bt_hci_cmd_create>
	if (!buf) {
   13b14:	4604      	mov	r4, r0
   13b16:	2800      	cmp	r0, #0
   13b18:	f000 80a7 	beq.w	13c6a <hci_init+0x34e>
   13b1c:	2108      	movs	r1, #8
   13b1e:	4408      	add	r0, r1
   13b20:	f00c f881 	bl	1fc26 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   13b24:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   13b28:	f012 0f02 	tst.w	r2, #2
   13b2c:	bf14      	ite	ne
   13b2e:	232f      	movne	r3, #47	; 0x2f
   13b30:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   13b32:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   13b34:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   13b38:	bf48      	it	mi
   13b3a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   13b3e:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   13b42:	bf18      	it	ne
   13b44:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   13b48:	2200      	movs	r2, #0
   13b4a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   13b4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   13b50:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   13b52:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   13b54:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   13b56:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   13b58:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   13b5a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   13b5c:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   13b5e:	4621      	mov	r1, r4
   13b60:	f242 0001 	movw	r0, #8193	; 0x2001
   13b64:	f7ff fe78 	bl	13858 <bt_hci_cmd_send_sync>
	if (err) {
   13b68:	4604      	mov	r4, r0
   13b6a:	2800      	cmp	r0, #0
   13b6c:	f47f af55 	bne.w	13a1a <hci_init+0xfe>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   13b70:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   13b74:	069a      	lsls	r2, r3, #26
   13b76:	d41e      	bmi.n	13bb6 <hci_init+0x29a>
	if (bt_dev.le.acl_mtu) {
   13b78:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
   13b7c:	b9d9      	cbnz	r1, 13bb6 <hci_init+0x29a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   13b7e:	aa01      	add	r2, sp, #4
   13b80:	f241 0005 	movw	r0, #4101	; 0x1005
   13b84:	f7ff fe68 	bl	13858 <bt_hci_cmd_send_sync>
	if (err) {
   13b88:	4604      	mov	r4, r0
   13b8a:	2800      	cmp	r0, #0
   13b8c:	f47f af45 	bne.w	13a1a <hci_init+0xfe>
	if (bt_dev.le.acl_mtu) {
   13b90:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   13b94:	b963      	cbnz	r3, 13bb0 <hci_init+0x294>
	read_buffer_size_complete(rsp);
   13b96:	9b01      	ldr	r3, [sp, #4]
   13b98:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   13b9a:	785a      	ldrb	r2, [r3, #1]
   13b9c:	7899      	ldrb	r1, [r3, #2]
   13b9e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   13ba2:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   13ba6:	889a      	ldrh	r2, [r3, #4]
   13ba8:	483b      	ldr	r0, [pc, #236]	; (13c98 <hci_init+0x37c>)
   13baa:	4611      	mov	r1, r2
   13bac:	f00c fba9 	bl	20302 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   13bb0:	9801      	ldr	r0, [sp, #4]
   13bb2:	f002 ff7f 	bl	16ab4 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   13bb6:	2108      	movs	r1, #8
   13bb8:	f640 4001 	movw	r0, #3073	; 0xc01
   13bbc:	f7ff fe14 	bl	137e8 <bt_hci_cmd_create>
	if (!buf) {
   13bc0:	4604      	mov	r4, r0
   13bc2:	2800      	cmp	r0, #0
   13bc4:	d051      	beq.n	13c6a <hci_init+0x34e>
   13bc6:	2108      	movs	r1, #8
   13bc8:	4408      	add	r0, r1
   13bca:	f00c f82c 	bl	1fc26 <net_buf_simple_add>
	dst[0] = val;
   13bce:	2310      	movs	r3, #16
   13bd0:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   13bd2:	2388      	movs	r3, #136	; 0x88
   13bd4:	7043      	strb	r3, [r0, #1]
   13bd6:	2302      	movs	r3, #2
	dst[0] = val;
   13bd8:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   13bda:	70c3      	strb	r3, [r0, #3]
   13bdc:	2320      	movs	r3, #32
	dst[0] = val;
   13bde:	7082      	strb	r2, [r0, #2]
   13be0:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   13be2:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   13be4:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   13be6:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   13be8:	4621      	mov	r1, r4
   13bea:	f640 4001 	movw	r0, #3073	; 0xc01
   13bee:	f7ff fe33 	bl	13858 <bt_hci_cmd_send_sync>
	if (err) {
   13bf2:	4604      	mov	r4, r0
   13bf4:	2800      	cmp	r0, #0
   13bf6:	f47f af10 	bne.w	13a1a <hci_init+0xfe>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   13bfa:	4601      	mov	r1, r0
   13bfc:	aa01      	add	r2, sp, #4
   13bfe:	f64f 4001 	movw	r0, #64513	; 0xfc01
   13c02:	f7ff fe29 	bl	13858 <bt_hci_cmd_send_sync>
	if (err) {
   13c06:	4604      	mov	r4, r0
   13c08:	bb20      	cbnz	r0, 13c54 <hci_init+0x338>
	net_buf_unref(rsp);
   13c0a:	9801      	ldr	r0, [sp, #4]
   13c0c:	f002 ff52 	bl	16ab4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   13c10:	4621      	mov	r1, r4
   13c12:	aa01      	add	r2, sp, #4
   13c14:	f64f 4002 	movw	r0, #64514	; 0xfc02
   13c18:	f7ff fe1e 	bl	13858 <bt_hci_cmd_send_sync>
	if (err) {
   13c1c:	4604      	mov	r4, r0
   13c1e:	b9c8      	cbnz	r0, 13c54 <hci_init+0x338>
	rp.cmds = (void *)rsp->data;
   13c20:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   13c22:	6883      	ldr	r3, [r0, #8]
   13c24:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   13c28:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
   13c2c:	f002 ff42 	bl	16ab4 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   13c30:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   13c34:	075b      	lsls	r3, r3, #29
   13c36:	d50d      	bpl.n	13c54 <hci_init+0x338>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   13c38:	aa01      	add	r2, sp, #4
   13c3a:	4621      	mov	r1, r4
   13c3c:	f64f 4003 	movw	r0, #64515	; 0xfc03
   13c40:	f7ff fe0a 	bl	13858 <bt_hci_cmd_send_sync>
		if (err) {
   13c44:	b930      	cbnz	r0, 13c54 <hci_init+0x338>
		rp.feat = (void *)rsp->data;
   13c46:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   13c48:	6883      	ldr	r3, [r0, #8]
   13c4a:	785b      	ldrb	r3, [r3, #1]
   13c4c:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
   13c50:	f002 ff30 	bl	16ab4 <net_buf_unref>
	err = bt_id_init();
   13c54:	f000 fd18 	bl	14688 <bt_id_init>
   13c58:	4604      	mov	r4, r0
	if (err) {
   13c5a:	e6de      	b.n	13a1a <hci_init+0xfe>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   13c5c:	2102      	movs	r1, #2
   13c5e:	f640 406d 	movw	r0, #3181	; 0xc6d
   13c62:	f7ff fdc1 	bl	137e8 <bt_hci_cmd_create>
		if (!buf) {
   13c66:	4604      	mov	r4, r0
   13c68:	b910      	cbnz	r0, 13c70 <hci_init+0x354>
		return -ENOBUFS;
   13c6a:	f06f 0468 	mvn.w	r4, #104	; 0x68
   13c6e:	e6d4      	b.n	13a1a <hci_init+0xfe>
   13c70:	2102      	movs	r1, #2
   13c72:	3008      	adds	r0, #8
   13c74:	f00b ffd7 	bl	1fc26 <net_buf_simple_add>
		cp_le->le = 0x01;
   13c78:	2301      	movs	r3, #1
   13c7a:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   13c7c:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   13c7e:	4621      	mov	r1, r4
   13c80:	4632      	mov	r2, r6
   13c82:	f640 406d 	movw	r0, #3181	; 0xc6d
   13c86:	f7ff fde7 	bl	13858 <bt_hci_cmd_send_sync>
		if (err) {
   13c8a:	4604      	mov	r4, r0
   13c8c:	2800      	cmp	r0, #0
   13c8e:	f43f aefe 	beq.w	13a8e <hci_init+0x172>
   13c92:	e6c2      	b.n	13a1a <hci_init+0xfe>
   13c94:	20000388 	.word	0x20000388
   13c98:	200003b8 	.word	0x200003b8

00013c9c <bt_send>:
	return bt_dev.drv->send(buf);
   13c9c:	4b02      	ldr	r3, [pc, #8]	; (13ca8 <bt_send+0xc>)
   13c9e:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   13ca2:	691b      	ldr	r3, [r3, #16]
   13ca4:	4718      	bx	r3
   13ca6:	bf00      	nop
   13ca8:	200002b8 	.word	0x200002b8

00013cac <bt_hci_cmd_send>:
{
   13cac:	b538      	push	{r3, r4, r5, lr}
   13cae:	4605      	mov	r5, r0
	if (!buf) {
   13cb0:	460c      	mov	r4, r1
   13cb2:	b919      	cbnz	r1, 13cbc <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   13cb4:	f7ff fd98 	bl	137e8 <bt_hci_cmd_create>
		if (!buf) {
   13cb8:	4604      	mov	r4, r0
   13cba:	b198      	cbz	r0, 13ce4 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   13cbc:	f640 4335 	movw	r3, #3125	; 0xc35
   13cc0:	429d      	cmp	r5, r3
   13cc2:	d109      	bne.n	13cd8 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
   13cc4:	4620      	mov	r0, r4
   13cc6:	f7ff ffe9 	bl	13c9c <bt_send>
		if (err) {
   13cca:	4605      	mov	r5, r0
   13ccc:	b110      	cbz	r0, 13cd4 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
   13cce:	4620      	mov	r0, r4
   13cd0:	f002 fef0 	bl	16ab4 <net_buf_unref>
}
   13cd4:	4628      	mov	r0, r5
   13cd6:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   13cd8:	4804      	ldr	r0, [pc, #16]	; (13cec <bt_hci_cmd_send+0x40>)
   13cda:	4621      	mov	r1, r4
   13cdc:	f00b ff70 	bl	1fbc0 <net_buf_put>
	return 0;
   13ce0:	2500      	movs	r5, #0
   13ce2:	e7f7      	b.n	13cd4 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   13ce4:	f06f 0568 	mvn.w	r5, #104	; 0x68
   13ce8:	e7f4      	b.n	13cd4 <bt_hci_cmd_send+0x28>
   13cea:	bf00      	nop
   13cec:	20000404 	.word	0x20000404

00013cf0 <conn_auto_initiate>:
{
   13cf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   13cf2:	7a83      	ldrb	r3, [r0, #10]
   13cf4:	2b07      	cmp	r3, #7
{
   13cf6:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   13cf8:	d121      	bne.n	13d3e <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13cfa:	f3bf 8f5b 	dmb	ish
   13cfe:	6843      	ldr	r3, [r0, #4]
   13d00:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   13d04:	049b      	lsls	r3, r3, #18
   13d06:	f100 0604 	add.w	r6, r0, #4
   13d0a:	d41a      	bmi.n	13d42 <conn_auto_initiate+0x52>
   13d0c:	78c3      	ldrb	r3, [r0, #3]
   13d0e:	b123      	cbz	r3, 13d1a <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
   13d10:	4b29      	ldr	r3, [pc, #164]	; (13db8 <conn_auto_initiate+0xc8>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
   13d12:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   13d16:	071d      	lsls	r5, r3, #28
   13d18:	d513      	bpl.n	13d42 <conn_auto_initiate+0x52>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   13d1a:	2102      	movs	r1, #2
   13d1c:	f242 0016 	movw	r0, #8214	; 0x2016
   13d20:	f7ff fd62 	bl	137e8 <bt_hci_cmd_create>
	if (!buf) {
   13d24:	4605      	mov	r5, r0
   13d26:	b160      	cbz	r0, 13d42 <conn_auto_initiate+0x52>
   13d28:	2102      	movs	r1, #2
   13d2a:	3008      	adds	r0, #8
   13d2c:	f00b ff7b 	bl	1fc26 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   13d30:	8823      	ldrh	r3, [r4, #0]
   13d32:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   13d34:	4629      	mov	r1, r5
   13d36:	f242 0016 	movw	r0, #8214	; 0x2016
   13d3a:	f7ff ffb7 	bl	13cac <bt_hci_cmd_send>
}
   13d3e:	b004      	add	sp, #16
   13d40:	bd70      	pop	{r4, r5, r6, pc}
   13d42:	f3bf 8f5b 	dmb	ish
   13d46:	6863      	ldr	r3, [r4, #4]
   13d48:	4d1b      	ldr	r5, [pc, #108]	; (13db8 <conn_auto_initiate+0xc8>)
   13d4a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   13d4e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   13d52:	f3c3 3100 	ubfx	r1, r3, #12, #1
   13d56:	d117      	bne.n	13d88 <conn_auto_initiate+0x98>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   13d58:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   13d5c:	07d8      	lsls	r0, r3, #31
   13d5e:	d513      	bpl.n	13d88 <conn_auto_initiate+0x98>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   13d60:	2302      	movs	r3, #2
   13d62:	9100      	str	r1, [sp, #0]
   13d64:	461a      	mov	r2, r3
   13d66:	4620      	mov	r0, r4
   13d68:	f00a f9b5 	bl	1e0d6 <bt_le_set_phy>
		if (!err) {
   13d6c:	b960      	cbnz	r0, 13d88 <conn_auto_initiate+0x98>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13d6e:	f3bf 8f5b 	dmb	ish
   13d72:	e856 3f00 	ldrex	r3, [r6]
   13d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13d7a:	e846 3200 	strex	r2, r3, [r6]
   13d7e:	2a00      	cmp	r2, #0
   13d80:	d1f7      	bne.n	13d72 <conn_auto_initiate+0x82>
   13d82:	f3bf 8f5b 	dmb	ish
			return;
   13d86:	e7da      	b.n	13d3e <conn_auto_initiate+0x4e>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   13d88:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   13d8c:	069a      	lsls	r2, r3, #26
   13d8e:	d5d6      	bpl.n	13d3e <conn_auto_initiate+0x4e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   13d90:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   13d94:	689b      	ldr	r3, [r3, #8]
   13d96:	079b      	lsls	r3, r3, #30
   13d98:	d5d1      	bpl.n	13d3e <conn_auto_initiate+0x4e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   13d9a:	f10d 010e 	add.w	r1, sp, #14
   13d9e:	a803      	add	r0, sp, #12
   13da0:	f00a f929 	bl	1dff6 <hci_le_read_max_data_len>
			if (!err) {
   13da4:	2800      	cmp	r0, #0
   13da6:	d1ca      	bne.n	13d3e <conn_auto_initiate+0x4e>
				err = bt_le_set_data_len(conn,
   13da8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   13dac:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   13db0:	4620      	mov	r0, r4
   13db2:	f00a f973 	bl	1e09c <bt_le_set_data_len>
		}
   13db6:	e7c2      	b.n	13d3e <conn_auto_initiate+0x4e>
   13db8:	200002b8 	.word	0x200002b8

00013dbc <bt_hci_le_enh_conn_complete>:
{
   13dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13dc0:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
   13dc4:	4a63      	ldr	r2, [pc, #396]	; (13f54 <bt_hci_le_enh_conn_complete+0x198>)
	if (evt->status) {
   13dc6:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
   13dc8:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   13dca:	ea6f 5307 	mvn.w	r3, r7, lsl #20
   13dce:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   13dd2:	b29b      	uxth	r3, r3
   13dd4:	4299      	cmp	r1, r3
   13dd6:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   13dda:	bf08      	it	eq
   13ddc:	8016      	strheq	r6, [r2, #0]
{
   13dde:	b085      	sub	sp, #20
   13de0:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13de2:	fa1f f887 	uxth.w	r8, r7
			return true;
   13de6:	bf08      	it	eq
   13de8:	2601      	moveq	r6, #1
	if (evt->status) {
   13dea:	b1f4      	cbz	r4, 13e2a <bt_hci_le_enh_conn_complete+0x6e>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13dec:	2c3c      	cmp	r4, #60	; 0x3c
   13dee:	d152      	bne.n	13e96 <bt_hci_le_enh_conn_complete+0xda>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   13df0:	f000 fce8 	bl	147c4 <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13df4:	f3bf 8f5b 	dmb	ish
   13df8:	3010      	adds	r0, #16
   13dfa:	e850 3f00 	ldrex	r3, [r0]
   13dfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   13e02:	e840 3200 	strex	r2, r3, [r0]
   13e06:	2a00      	cmp	r2, #0
   13e08:	d1f7      	bne.n	13dfa <bt_hci_le_enh_conn_complete+0x3e>
   13e0a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   13e0e:	2000      	movs	r0, #0
   13e10:	f7ff fbae 	bl	13570 <find_pending_connect.part.0>
		if (!conn) {
   13e14:	4605      	mov	r5, r0
   13e16:	2800      	cmp	r0, #0
   13e18:	d03d      	beq.n	13e96 <bt_hci_le_enh_conn_complete+0xda>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   13e1a:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13e1c:	2100      	movs	r1, #0
   13e1e:	f001 f813 	bl	14e48 <bt_conn_set_state>
		bt_conn_unref(conn);
   13e22:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   13e24:	f00a fc9d 	bl	1e762 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   13e28:	e035      	b.n	13e96 <bt_hci_le_enh_conn_complete+0xda>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   13e2a:	7903      	ldrb	r3, [r0, #4]
   13e2c:	3b02      	subs	r3, #2
   13e2e:	2b01      	cmp	r3, #1
   13e30:	f100 0904 	add.w	r9, r0, #4
   13e34:	d832      	bhi.n	13e9c <bt_hci_le_enh_conn_complete+0xe0>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   13e36:	4649      	mov	r1, r9
   13e38:	a802      	add	r0, sp, #8
   13e3a:	f00a f835 	bl	1dea8 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   13e3e:	f89d 3008 	ldrb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   13e42:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   13e46:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   13e48:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   13e4c:	f88d 3008 	strb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   13e50:	f00a f825 	bl	1de9e <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   13e54:	2301      	movs	r3, #1
   13e56:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   13e5a:	78eb      	ldrb	r3, [r5, #3]
   13e5c:	2b01      	cmp	r3, #1
   13e5e:	d116      	bne.n	13e8e <bt_hci_le_enh_conn_complete+0xd2>
   13e60:	a802      	add	r0, sp, #8
   13e62:	f7ff fb85 	bl	13570 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13e66:	78eb      	ldrb	r3, [r5, #3]
   13e68:	2b01      	cmp	r3, #1
   13e6a:	4604      	mov	r4, r0
   13e6c:	d10e      	bne.n	13e8c <bt_hci_le_enh_conn_complete+0xd0>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   13e6e:	f000 fca9 	bl	147c4 <bt_le_adv_lookup_legacy>
   13e72:	f3bf 8f5b 	dmb	ish
   13e76:	3010      	adds	r0, #16
   13e78:	e850 3f00 	ldrex	r3, [r0]
   13e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   13e80:	e840 3200 	strex	r2, r3, [r0]
   13e84:	2a00      	cmp	r2, #0
   13e86:	d1f7      	bne.n	13e78 <bt_hci_le_enh_conn_complete+0xbc>
   13e88:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   13e8c:	b9cc      	cbnz	r4, 13ec2 <bt_hci_le_enh_conn_complete+0x106>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   13e8e:	211f      	movs	r1, #31
   13e90:	4640      	mov	r0, r8
   13e92:	f00a f8c8 	bl	1e026 <bt_hci_disconnect>
}
   13e96:	b005      	add	sp, #20
   13e98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   13e9c:	78c3      	ldrb	r3, [r0, #3]
   13e9e:	2b01      	cmp	r3, #1
   13ea0:	bf04      	itt	eq
   13ea2:	4b2d      	ldreq	r3, [pc, #180]	; (13f58 <bt_hci_le_enh_conn_complete+0x19c>)
   13ea4:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   13ea8:	4649      	mov	r1, r9
   13eaa:	4620      	mov	r0, r4
   13eac:	f00a fa46 	bl	1e33c <bt_lookup_id_addr>
   13eb0:	4601      	mov	r1, r0
   13eb2:	a802      	add	r0, sp, #8
   13eb4:	f009 fff8 	bl	1dea8 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   13eb8:	4649      	mov	r1, r9
   13eba:	4668      	mov	r0, sp
   13ebc:	f009 fff4 	bl	1dea8 <bt_addr_le_copy>
   13ec0:	e7cb      	b.n	13e5a <bt_hci_le_enh_conn_complete+0x9e>
	conn->handle = handle;
   13ec2:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   13ec4:	a902      	add	r1, sp, #8
	conn->handle = handle;
   13ec6:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   13eca:	f009 ffed 	bl	1dea8 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   13ece:	7e2a      	ldrb	r2, [r5, #24]
   13ed0:	7deb      	ldrb	r3, [r5, #23]
   13ed2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13ed6:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   13eda:	7eaa      	ldrb	r2, [r5, #26]
   13edc:	7e6b      	ldrb	r3, [r5, #25]
   13ede:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13ee2:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   13ee6:	7eeb      	ldrb	r3, [r5, #27]
   13ee8:	7f2a      	ldrb	r2, [r5, #28]
   13eea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13eee:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   13ef2:	78eb      	ldrb	r3, [r5, #3]
   13ef4:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   13ef6:	2500      	movs	r5, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13ef8:	2b01      	cmp	r3, #1
	conn->err = 0U;
   13efa:	7265      	strb	r5, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13efc:	d118      	bne.n	13f30 <bt_hci_le_enh_conn_complete+0x174>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   13efe:	4669      	mov	r1, sp
   13f00:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   13f04:	f009 ffd0 	bl	1dea8 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   13f08:	f000 fc5c 	bl	147c4 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   13f0c:	7a21      	ldrb	r1, [r4, #8]
   13f0e:	4a12      	ldr	r2, [pc, #72]	; (13f58 <bt_hci_le_enh_conn_complete+0x19c>)
   13f10:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   13f14:	4411      	add	r1, r2
   13f16:	f104 0096 	add.w	r0, r4, #150	; 0x96
   13f1a:	f009 ffc5 	bl	1dea8 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   13f1e:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   13f22:	462a      	mov	r2, r5
   13f24:	f001 0340 	and.w	r3, r1, #64	; 0x40
   13f28:	4313      	orrs	r3, r2
   13f2a:	d001      	beq.n	13f30 <bt_hci_le_enh_conn_complete+0x174>
			bt_le_adv_resume();
   13f2c:	f000 fdea 	bl	14b04 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   13f30:	2107      	movs	r1, #7
   13f32:	4620      	mov	r0, r4
   13f34:	f000 ff88 	bl	14e48 <bt_conn_set_state>
	if (is_disconnected) {
   13f38:	b11e      	cbz	r6, 13f42 <bt_hci_le_enh_conn_complete+0x186>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   13f3a:	2101      	movs	r1, #1
   13f3c:	4620      	mov	r0, r4
   13f3e:	f000 ff83 	bl	14e48 <bt_conn_set_state>
	bt_conn_connected(conn);
   13f42:	4620      	mov	r0, r4
   13f44:	f00a fc49 	bl	1e7da <bt_conn_connected>
	conn_auto_initiate(conn);
   13f48:	4620      	mov	r0, r4
   13f4a:	f7ff fed1 	bl	13cf0 <conn_auto_initiate>
	bt_conn_unref(conn);
   13f4e:	4620      	mov	r0, r4
   13f50:	e768      	b.n	13e24 <bt_hci_le_enh_conn_complete+0x68>
   13f52:	bf00      	nop
   13f54:	200030ec 	.word	0x200030ec
   13f58:	200002b8 	.word	0x200002b8

00013f5c <hci_tx_thread>:
{
   13f5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   13f60:	f8df 8104 	ldr.w	r8, [pc, #260]	; 14068 <hci_tx_thread+0x10c>
		BT_ASSERT(err == 0);
   13f64:	f8df a114 	ldr.w	sl, [pc, #276]	; 1407c <hci_tx_thread+0x120>
		events[0].state = K_POLL_STATE_NOT_READY;
   13f68:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   13f6c:	483d      	ldr	r0, [pc, #244]	; (14064 <hci_tx_thread+0x108>)
		events[0].state = K_POLL_STATE_NOT_READY;
   13f6e:	f36f 3352 	bfc	r3, #13, #6
   13f72:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   13f76:	f000 ff1d 	bl	14db4 <bt_conn_prepare_events>
   13f7a:	1c45      	adds	r5, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   13f7c:	483a      	ldr	r0, [pc, #232]	; (14068 <hci_tx_thread+0x10c>)
   13f7e:	f04f 32ff 	mov.w	r2, #4294967295
   13f82:	f04f 33ff 	mov.w	r3, #4294967295
   13f86:	4629      	mov	r1, r5
   13f88:	f005 fed4 	bl	19d34 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   13f8c:	b160      	cbz	r0, 13fa8 <hci_tx_thread+0x4c>
   13f8e:	4937      	ldr	r1, [pc, #220]	; (1406c <hci_tx_thread+0x110>)
   13f90:	4837      	ldr	r0, [pc, #220]	; (14070 <hci_tx_thread+0x114>)
   13f92:	f640 137f 	movw	r3, #2431	; 0x97f
   13f96:	4652      	mov	r2, sl
   13f98:	f009 f82a 	bl	1cff0 <printk>
   13f9c:	4040      	eors	r0, r0
   13f9e:	f380 8811 	msr	BASEPRI, r0
   13fa2:	f04f 0003 	mov.w	r0, #3
   13fa6:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   13fa8:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 14080 <hci_tx_thread+0x124>
{
   13fac:	4e2e      	ldr	r6, [pc, #184]	; (14068 <hci_tx_thread+0x10c>)
	return z_impl_k_sem_take(sem, timeout);
   13fae:	f5a9 77a6 	sub.w	r7, r9, #332	; 0x14c
   13fb2:	f1a9 0b34 	sub.w	fp, r9, #52	; 0x34
	for (; count; ev++, count--) {
   13fb6:	b915      	cbnz	r5, 13fbe <hci_tx_thread+0x62>
	z_impl_k_yield();
   13fb8:	f005 fc22 	bl	19800 <z_impl_k_yield>
	while (1) {
   13fbc:	e7d4      	b.n	13f68 <hci_tx_thread+0xc>
		switch (ev->state) {
   13fbe:	68f3      	ldr	r3, [r6, #12]
   13fc0:	f3c3 3345 	ubfx	r3, r3, #13, #6
   13fc4:	2b04      	cmp	r3, #4
   13fc6:	d142      	bne.n	1404e <hci_tx_thread+0xf2>
			if (ev->tag == BT_EVENT_CMD_TX) {
   13fc8:	7b33      	ldrb	r3, [r6, #12]
   13fca:	2b00      	cmp	r3, #0
   13fcc:	d142      	bne.n	14054 <hci_tx_thread+0xf8>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   13fce:	2200      	movs	r2, #0
   13fd0:	2300      	movs	r3, #0
   13fd2:	4648      	mov	r0, r9
   13fd4:	f00b fdd6 	bl	1fb84 <net_buf_get>
	BT_ASSERT(buf);
   13fd8:	4604      	mov	r4, r0
   13fda:	b960      	cbnz	r0, 13ff6 <hci_tx_thread+0x9a>
   13fdc:	4925      	ldr	r1, [pc, #148]	; (14074 <hci_tx_thread+0x118>)
   13fde:	4824      	ldr	r0, [pc, #144]	; (14070 <hci_tx_thread+0x114>)
   13fe0:	f640 131c 	movw	r3, #2332	; 0x91c
   13fe4:	4652      	mov	r2, sl
   13fe6:	f009 f803 	bl	1cff0 <printk>
   13fea:	4040      	eors	r0, r0
   13fec:	f380 8811 	msr	BASEPRI, r0
   13ff0:	f04f 0003 	mov.w	r0, #3
   13ff4:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   13ff6:	f04f 32ff 	mov.w	r2, #4294967295
   13ffa:	f04f 33ff 	mov.w	r3, #4294967295
   13ffe:	4658      	mov	r0, fp
   14000:	f004 ffae 	bl	18f60 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   14004:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   14008:	b120      	cbz	r0, 14014 <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
   1400a:	f002 fd53 	bl	16ab4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1400e:	2300      	movs	r3, #0
   14010:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   14014:	4620      	mov	r0, r4
   14016:	f00b fde0 	bl	1fbda <net_buf_ref>
   1401a:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	err = bt_send(buf);
   1401e:	4620      	mov	r0, r4
   14020:	f7ff fe3c 	bl	13c9c <bt_send>
	if (err) {
   14024:	b198      	cbz	r0, 1404e <hci_tx_thread+0xf2>
	z_impl_k_sem_give(sem);
   14026:	4814      	ldr	r0, [pc, #80]	; (14078 <hci_tx_thread+0x11c>)
   14028:	f004 ff74 	bl	18f14 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1402c:	4620      	mov	r0, r4
   1402e:	f002 fc8d 	bl	1694c <net_buf_id>
   14032:	4621      	mov	r1, r4
   14034:	201f      	movs	r0, #31
   14036:	f7ff fb3f 	bl	136b8 <hci_cmd_done.isra.0>
		net_buf_unref(bt_dev.sent_cmd);
   1403a:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   1403e:	f002 fd39 	bl	16ab4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   14042:	2300      	movs	r3, #0
		net_buf_unref(buf);
   14044:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   14046:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		net_buf_unref(buf);
   1404a:	f002 fd33 	bl	16ab4 <net_buf_unref>
	for (; count; ev++, count--) {
   1404e:	3614      	adds	r6, #20
   14050:	3d01      	subs	r5, #1
   14052:	e7b0      	b.n	13fb6 <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   14054:	2b01      	cmp	r3, #1
   14056:	d1fa      	bne.n	1404e <hci_tx_thread+0xf2>
					conn = CONTAINER_OF(ev->fifo,
   14058:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   1405a:	3838      	subs	r0, #56	; 0x38
   1405c:	f001 f932 	bl	152c4 <bt_conn_process_tx>
   14060:	e7f5      	b.n	1404e <hci_tx_thread+0xf2>
   14062:	bf00      	nop
   14064:	2000058c 	.word	0x2000058c
   14068:	20000578 	.word	0x20000578
   1406c:	00021e7c 	.word	0x00021e7c
   14070:	00021e31 	.word	0x00021e31
   14074:	00021ea5 	.word	0x00021ea5
   14078:	200003d0 	.word	0x200003d0
   1407c:	00021de4 	.word	0x00021de4
   14080:	20000404 	.word	0x20000404

00014084 <hci_event_prio>:
{
   14084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14088:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   1408a:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   1408e:	4630      	mov	r0, r6
   14090:	f00b fe01 	bl	1fc96 <net_buf_simple_headroom>
	state->len = buf->len;
   14094:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14098:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   1409c:	4605      	mov	r5, r0
   1409e:	d80c      	bhi.n	140ba <hci_event_prio+0x36>
   140a0:	4a1c      	ldr	r2, [pc, #112]	; (14114 <hci_event_prio+0x90>)
   140a2:	491d      	ldr	r1, [pc, #116]	; (14118 <hci_event_prio+0x94>)
   140a4:	481d      	ldr	r0, [pc, #116]	; (1411c <hci_event_prio+0x98>)
   140a6:	f640 530c 	movw	r3, #3340	; 0xd0c
   140aa:	f008 ffa1 	bl	1cff0 <printk>
   140ae:	4040      	eors	r0, r0
   140b0:	f380 8811 	msr	BASEPRI, r0
   140b4:	f04f 0003 	mov.w	r0, #3
   140b8:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   140ba:	2102      	movs	r1, #2
   140bc:	4630      	mov	r0, r6
   140be:	f00b fdda 	bl	1fc76 <net_buf_simple_pull_mem>
   140c2:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   140c4:	7800      	ldrb	r0, [r0, #0]
   140c6:	f009 fe9e 	bl	1de06 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   140ca:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   140cc:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   140ce:	d40c      	bmi.n	140ea <hci_event_prio+0x66>
   140d0:	4a10      	ldr	r2, [pc, #64]	; (14114 <hci_event_prio+0x90>)
   140d2:	4913      	ldr	r1, [pc, #76]	; (14120 <hci_event_prio+0x9c>)
   140d4:	4811      	ldr	r0, [pc, #68]	; (1411c <hci_event_prio+0x98>)
   140d6:	f44f 6351 	mov.w	r3, #3344	; 0xd10
   140da:	f008 ff89 	bl	1cff0 <printk>
   140de:	4040      	eors	r0, r0
   140e0:	f380 8811 	msr	BASEPRI, r0
   140e4:	f04f 0003 	mov.w	r0, #3
   140e8:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   140ea:	2305      	movs	r3, #5
   140ec:	4a0d      	ldr	r2, [pc, #52]	; (14124 <hci_event_prio+0xa0>)
   140ee:	7838      	ldrb	r0, [r7, #0]
   140f0:	4621      	mov	r1, r4
   140f2:	f009 fe9a 	bl	1de2a <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   140f6:	07b3      	lsls	r3, r6, #30
   140f8:	d507      	bpl.n	1410a <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   140fa:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   140fc:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   14100:	fa10 f585 	uxtah	r5, r0, r5
   14104:	60a5      	str	r5, [r4, #8]
}
   14106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   1410a:	4620      	mov	r0, r4
}
   1410c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   14110:	f002 bcd0 	b.w	16ab4 <net_buf_unref>
   14114:	00021de4 	.word	0x00021de4
   14118:	00021e18 	.word	0x00021e18
   1411c:	00021e31 	.word	0x00021e31
   14120:	00021ea9 	.word	0x00021ea9
   14124:	000214e8 	.word	0x000214e8

00014128 <bt_recv>:
{
   14128:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1412a:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   1412c:	2b01      	cmp	r3, #1
{
   1412e:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   14130:	d007      	beq.n	14142 <bt_recv+0x1a>
   14132:	2b03      	cmp	r3, #3
   14134:	d113      	bne.n	1415e <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   14136:	480c      	ldr	r0, [pc, #48]	; (14168 <bt_recv+0x40>)
   14138:	4629      	mov	r1, r5
   1413a:	f00b fd41 	bl	1fbc0 <net_buf_put>
		return 0;
   1413e:	2000      	movs	r0, #0
   14140:	e00c      	b.n	1415c <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14142:	6883      	ldr	r3, [r0, #8]
   14144:	7818      	ldrb	r0, [r3, #0]
   14146:	f009 fe5e 	bl	1de06 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1414a:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1414c:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1414e:	d502      	bpl.n	14156 <bt_recv+0x2e>
			hci_event_prio(buf);
   14150:	4628      	mov	r0, r5
   14152:	f7ff ff97 	bl	14084 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   14156:	f014 0002 	ands.w	r0, r4, #2
   1415a:	d1ec      	bne.n	14136 <bt_recv+0xe>
}
   1415c:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1415e:	f002 fca9 	bl	16ab4 <net_buf_unref>
		return -EINVAL;
   14162:	f06f 0015 	mvn.w	r0, #21
   14166:	e7f9      	b.n	1415c <bt_recv+0x34>
   14168:	200003ec 	.word	0x200003ec

0001416c <bt_hci_driver_register>:
	if (bt_dev.drv) {
   1416c:	4a08      	ldr	r2, [pc, #32]	; (14190 <bt_hci_driver_register+0x24>)
{
   1416e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   14170:	f8d2 0164 	ldr.w	r0, [r2, #356]	; 0x164
   14174:	b930      	cbnz	r0, 14184 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   14176:	68d9      	ldr	r1, [r3, #12]
   14178:	b139      	cbz	r1, 1418a <bt_hci_driver_register+0x1e>
   1417a:	6919      	ldr	r1, [r3, #16]
   1417c:	b129      	cbz	r1, 1418a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1417e:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
	return 0;
   14182:	4770      	bx	lr
		return -EALREADY;
   14184:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14188:	4770      	bx	lr
		return -EINVAL;
   1418a:	f06f 0015 	mvn.w	r0, #21
}
   1418e:	4770      	bx	lr
   14190:	200002b8 	.word	0x200002b8

00014194 <bt_finalize_init>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14194:	4b06      	ldr	r3, [pc, #24]	; (141b0 <bt_finalize_init+0x1c>)
   14196:	f3bf 8f5b 	dmb	ish
   1419a:	e853 2f00 	ldrex	r2, [r3]
   1419e:	f042 0202 	orr.w	r2, r2, #2
   141a2:	e843 2100 	strex	r1, r2, [r3]
   141a6:	2900      	cmp	r1, #0
   141a8:	d1f7      	bne.n	1419a <bt_finalize_init+0x6>
   141aa:	f3bf 8f5b 	dmb	ish
}
   141ae:	4770      	bx	lr
   141b0:	20000384 	.word	0x20000384

000141b4 <init_work>:
{
   141b4:	b510      	push	{r4, lr}
	err = hci_init();
   141b6:	f7ff fbb1 	bl	1391c <hci_init>
	if (err) {
   141ba:	b920      	cbnz	r0, 141c6 <init_work+0x12>
		err = bt_conn_init();
   141bc:	f001 f8ea 	bl	15394 <bt_conn_init>
		if (err) {
   141c0:	b908      	cbnz	r0, 141c6 <init_work+0x12>
	bt_finalize_init();
   141c2:	f7ff ffe7 	bl	14194 <bt_finalize_init>
	if (ready_cb) {
   141c6:	4b03      	ldr	r3, [pc, #12]	; (141d4 <init_work+0x20>)
   141c8:	681b      	ldr	r3, [r3, #0]
   141ca:	b113      	cbz	r3, 141d2 <init_work+0x1e>
}
   141cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   141d0:	4718      	bx	r3
}
   141d2:	bd10      	pop	{r4, pc}
   141d4:	200023f4 	.word	0x200023f4

000141d8 <bt_set_name>:
	k_work_submit(&bt_dev.init);
	return 0;
}

int bt_set_name(const char *name)
{
   141d8:	b570      	push	{r4, r5, r6, lr}
   141da:	4606      	mov	r6, r0
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	size_t len = strlen(name);
   141dc:	f7f8 f88e 	bl	c2fc <strlen>
	int err;

	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   141e0:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
   141e2:	4605      	mov	r5, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   141e4:	d812      	bhi.n	1420c <bt_set_name+0x34>
		return -ENOMEM;
	}

	if (!strcmp(bt_dev.name, name)) {
   141e6:	4c0b      	ldr	r4, [pc, #44]	; (14214 <bt_set_name+0x3c>)
   141e8:	4631      	mov	r1, r6
   141ea:	f504 70b4 	add.w	r0, r4, #360	; 0x168
   141ee:	f7f8 f87b 	bl	c2e8 <strcmp>
   141f2:	b150      	cbz	r0, 1420a <bt_set_name+0x32>
		return 0;
	}

	strncpy(bt_dev.name, name, len);
   141f4:	f504 70b4 	add.w	r0, r4, #360	; 0x168
   141f8:	2348      	movs	r3, #72	; 0x48
   141fa:	462a      	mov	r2, r5
   141fc:	4631      	mov	r1, r6
	bt_dev.name[len] = '\0';
   141fe:	442c      	add	r4, r5
	strncpy(bt_dev.name, name, len);
   14200:	f00c fc86 	bl	20b10 <__strncpy_chk>
	bt_dev.name[len] = '\0';
   14204:	2000      	movs	r0, #0
   14206:	f884 0168 	strb.w	r0, [r4, #360]	; 0x168

	return 0;
#else
	return -ENOMEM;
#endif
}
   1420a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1420c:	f06f 000b 	mvn.w	r0, #11
   14210:	e7fb      	b.n	1420a <bt_set_name+0x32>
   14212:	bf00      	nop
   14214:	200002b8 	.word	0x200002b8

00014218 <bt_enable>:
{
   14218:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
   1421c:	4d34      	ldr	r5, [pc, #208]	; (142f0 <bt_enable+0xd8>)
   1421e:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
{
   14222:	b088      	sub	sp, #32
   14224:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   14226:	2b00      	cmp	r3, #0
   14228:	d05b      	beq.n	142e2 <bt_enable+0xca>
   1422a:	f3bf 8f5b 	dmb	ish
   1422e:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   14232:	e853 4f00 	ldrex	r4, [r3]
   14236:	f044 0201 	orr.w	r2, r4, #1
   1423a:	e843 2100 	strex	r1, r2, [r3]
   1423e:	2900      	cmp	r1, #0
   14240:	d1f7      	bne.n	14232 <bt_enable+0x1a>
   14242:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14246:	f014 0401 	ands.w	r4, r4, #1
   1424a:	d14d      	bne.n	142e8 <bt_enable+0xd0>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
   1424c:	4829      	ldr	r0, [pc, #164]	; (142f4 <bt_enable+0xdc>)
   1424e:	f7ff ffc3 	bl	141d8 <bt_set_name>
	ready_cb = cb;
   14252:	4b29      	ldr	r3, [pc, #164]	; (142f8 <bt_enable+0xe0>)
   14254:	f04f 0800 	mov.w	r8, #0
   14258:	601e      	str	r6, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
   1425a:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1425e:	f06f 0308 	mvn.w	r3, #8
   14262:	e9cd 4302 	strd	r4, r3, [sp, #8]
   14266:	e9cd 8906 	strd	r8, r9, [sp, #24]
   1426a:	e9cd 4400 	strd	r4, r4, [sp]
   1426e:	4b23      	ldr	r3, [pc, #140]	; (142fc <bt_enable+0xe4>)
   14270:	4923      	ldr	r1, [pc, #140]	; (14300 <bt_enable+0xe8>)
   14272:	9404      	str	r4, [sp, #16]
   14274:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   14278:	4822      	ldr	r0, [pc, #136]	; (14304 <bt_enable+0xec>)
   1427a:	f004 fcb3 	bl	18be4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1427e:	4922      	ldr	r1, [pc, #136]	; (14308 <bt_enable+0xf0>)
   14280:	4820      	ldr	r0, [pc, #128]	; (14304 <bt_enable+0xec>)
   14282:	f00b ff5e 	bl	20142 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14286:	f06f 0307 	mvn.w	r3, #7
   1428a:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1428e:	e9cd 8906 	strd	r8, r9, [sp, #24]
   14292:	e9cd 4400 	strd	r4, r4, [sp]
   14296:	4b1d      	ldr	r3, [pc, #116]	; (1430c <bt_enable+0xf4>)
   14298:	491d      	ldr	r1, [pc, #116]	; (14310 <bt_enable+0xf8>)
   1429a:	9404      	str	r4, [sp, #16]
   1429c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   142a0:	481c      	ldr	r0, [pc, #112]	; (14314 <bt_enable+0xfc>)
   142a2:	f004 fc9f 	bl	18be4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   142a6:	491c      	ldr	r1, [pc, #112]	; (14318 <bt_enable+0x100>)
   142a8:	481a      	ldr	r0, [pc, #104]	; (14314 <bt_enable+0xfc>)
   142aa:	f00b ff4a 	bl	20142 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   142ae:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   142b2:	68db      	ldr	r3, [r3, #12]
   142b4:	4798      	blx	r3
	if (err) {
   142b6:	4604      	mov	r4, r0
   142b8:	b950      	cbnz	r0, 142d0 <bt_enable+0xb8>
	if (!cb) {
   142ba:	b96e      	cbnz	r6, 142d8 <bt_enable+0xc0>
	err = hci_init();
   142bc:	f7ff fb2e 	bl	1391c <hci_init>
	if (err) {
   142c0:	4604      	mov	r4, r0
   142c2:	b928      	cbnz	r0, 142d0 <bt_enable+0xb8>
		err = bt_conn_init();
   142c4:	f001 f866 	bl	15394 <bt_conn_init>
		if (err) {
   142c8:	4604      	mov	r4, r0
   142ca:	b908      	cbnz	r0, 142d0 <bt_enable+0xb8>
	bt_finalize_init();
   142cc:	f7ff ff62 	bl	14194 <bt_finalize_init>
}
   142d0:	4620      	mov	r0, r4
   142d2:	b008      	add	sp, #32
   142d4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	k_work_submit(&bt_dev.init);
   142d8:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   142dc:	f004 ff90 	bl	19200 <k_work_submit>
	return 0;
   142e0:	e7f6      	b.n	142d0 <bt_enable+0xb8>
		return -ENODEV;
   142e2:	f06f 0412 	mvn.w	r4, #18
   142e6:	e7f3      	b.n	142d0 <bt_enable+0xb8>
		return -EALREADY;
   142e8:	f06f 0477 	mvn.w	r4, #119	; 0x77
   142ec:	e7f0      	b.n	142d0 <bt_enable+0xb8>
   142ee:	bf00      	nop
   142f0:	200002b8 	.word	0x200002b8
   142f4:	00021ec2 	.word	0x00021ec2
   142f8:	200023f4 	.word	0x200023f4
   142fc:	00013f5d 	.word	0x00013f5d
   14300:	20004780 	.word	0x20004780
   14304:	200016b8 	.word	0x200016b8
   14308:	00021ecb 	.word	0x00021ecb
   1430c:	000135ad 	.word	0x000135ad
   14310:	20004360 	.word	0x20004360
   14314:	20001638 	.word	0x20001638
   14318:	00021ed1 	.word	0x00021ed1

0001431c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   1431c:	4800      	ldr	r0, [pc, #0]	; (14320 <bt_get_name+0x4>)
   1431e:	4770      	bx	lr
   14320:	20000420 	.word	0x20000420

00014324 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   14324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   14326:	4f0b      	ldr	r7, [pc, #44]	; (14354 <id_find+0x30>)
{
   14328:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   1432a:	2500      	movs	r5, #0
   1432c:	79fb      	ldrb	r3, [r7, #7]
   1432e:	b2ec      	uxtb	r4, r5
   14330:	42a3      	cmp	r3, r4
   14332:	d802      	bhi.n	1433a <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   14334:	f06f 0401 	mvn.w	r4, #1
   14338:	e009      	b.n	1434e <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   1433a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 *
 *  @return negative value if @a a < @a b, 0 if @a a == @a b, else positive
 */
static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
   1433e:	2207      	movs	r2, #7
   14340:	4439      	add	r1, r7
   14342:	4630      	mov	r0, r6
   14344:	f00c fb8b 	bl	20a5e <memcmp>
   14348:	3501      	adds	r5, #1
   1434a:	2800      	cmp	r0, #0
   1434c:	d1ee      	bne.n	1432c <id_find+0x8>
}
   1434e:	4620      	mov	r0, r4
   14350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14352:	bf00      	nop
   14354:	200002b8 	.word	0x200002b8

00014358 <set_random_address>:
{
   14358:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   1435a:	2206      	movs	r2, #6
   1435c:	4913      	ldr	r1, [pc, #76]	; (143ac <set_random_address+0x54>)
   1435e:	4605      	mov	r5, r0
   14360:	f00c fb7d 	bl	20a5e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   14364:	4602      	mov	r2, r0
   14366:	b1d8      	cbz	r0, 143a0 <set_random_address+0x48>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   14368:	2106      	movs	r1, #6
   1436a:	f242 0005 	movw	r0, #8197	; 0x2005
   1436e:	f7ff fa3b 	bl	137e8 <bt_hci_cmd_create>
	if (!buf) {
   14372:	4604      	mov	r4, r0
   14374:	b1b0      	cbz	r0, 143a4 <set_random_address+0x4c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14376:	2206      	movs	r2, #6
   14378:	4629      	mov	r1, r5
   1437a:	3008      	adds	r0, #8
   1437c:	f00b fc59 	bl	1fc32 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   14380:	2200      	movs	r2, #0
   14382:	4621      	mov	r1, r4
   14384:	f242 0005 	movw	r0, #8197	; 0x2005
   14388:	f7ff fa66 	bl	13858 <bt_hci_cmd_send_sync>
	if (err) {
   1438c:	4602      	mov	r2, r0
   1438e:	b938      	cbnz	r0, 143a0 <set_random_address+0x48>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   14390:	4629      	mov	r1, r5
   14392:	4806      	ldr	r0, [pc, #24]	; (143ac <set_random_address+0x54>)
   14394:	f009 ffc6 	bl	1e324 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   14398:	4b05      	ldr	r3, [pc, #20]	; (143b0 <set_random_address+0x58>)
   1439a:	2101      	movs	r1, #1
   1439c:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
}
   143a0:	4610      	mov	r0, r2
   143a2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   143a4:	f06f 0268 	mvn.w	r2, #104	; 0x68
   143a8:	e7fa      	b.n	143a0 <set_random_address+0x48>
   143aa:	bf00      	nop
   143ac:	20000319 	.word	0x20000319
   143b0:	200002b8 	.word	0x200002b8

000143b4 <id_create.isra.0>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   143b4:	b530      	push	{r4, r5, lr}
   143b6:	4c14      	ldr	r4, [pc, #80]	; (14408 <id_create.isra.0+0x54>)
   143b8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   143bc:	b085      	sub	sp, #20
   143be:	4404      	add	r4, r0
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   143c0:	460d      	mov	r5, r1
   143c2:	b179      	cbz	r1, 143e4 <id_create.isra.0+0x30>
   143c4:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   143c6:	2207      	movs	r2, #7
   143c8:	4669      	mov	r1, sp
   143ca:	4628      	mov	r0, r5
   143cc:	9300      	str	r3, [sp, #0]
   143ce:	f8cd 3003 	str.w	r3, [sp, #3]
   143d2:	f00c fb44 	bl	20a5e <memcmp>
   143d6:	b128      	cbz	r0, 143e4 <id_create.isra.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   143d8:	4629      	mov	r1, r5
   143da:	4620      	mov	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   143dc:	f009 ffa7 	bl	1e32e <bt_addr_le_copy>
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
   143e0:	b005      	add	sp, #20
   143e2:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
   143e4:	a802      	add	r0, sp, #8
   143e6:	f009 fd00 	bl	1ddea <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
   143ea:	a802      	add	r0, sp, #8
   143ec:	f7ff ff9a 	bl	14324 <id_find>
   143f0:	2800      	cmp	r0, #0
   143f2:	daf7      	bge.n	143e4 <id_create.isra.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   143f4:	a902      	add	r1, sp, #8
   143f6:	4620      	mov	r0, r4
   143f8:	f009 ff99 	bl	1e32e <bt_addr_le_copy>
		if (addr) {
   143fc:	2d00      	cmp	r5, #0
   143fe:	d0ef      	beq.n	143e0 <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   14400:	4621      	mov	r1, r4
   14402:	4628      	mov	r0, r5
   14404:	e7ea      	b.n	143dc <id_create.isra.0+0x28>
   14406:	bf00      	nop
   14408:	200002b8 	.word	0x200002b8

0001440c <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   1440c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1440e:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   14410:	4605      	mov	r5, r0
   14412:	b918      	cbnz	r0, 1441c <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   14414:	b1f4      	cbz	r4, 14454 <bt_id_create+0x48>
		return -EINVAL;
   14416:	f06f 0415 	mvn.w	r4, #21
   1441a:	e018      	b.n	1444e <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1441c:	2300      	movs	r3, #0
   1441e:	2207      	movs	r2, #7
   14420:	4669      	mov	r1, sp
   14422:	9300      	str	r3, [sp, #0]
   14424:	f8cd 3003 	str.w	r3, [sp, #3]
   14428:	f00c fb19 	bl	20a5e <memcmp>
   1442c:	2800      	cmp	r0, #0
   1442e:	d0f1      	beq.n	14414 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   14430:	782b      	ldrb	r3, [r5, #0]
   14432:	2b01      	cmp	r3, #1
   14434:	d1ef      	bne.n	14416 <bt_id_create+0xa>
   14436:	79ab      	ldrb	r3, [r5, #6]
   14438:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1443c:	2bc0      	cmp	r3, #192	; 0xc0
   1443e:	d1ea      	bne.n	14416 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   14440:	4628      	mov	r0, r5
   14442:	f7ff ff6f 	bl	14324 <id_find>
   14446:	2800      	cmp	r0, #0
   14448:	dbe4      	blt.n	14414 <bt_id_create+0x8>
			return -EALREADY;
   1444a:	f06f 0477 	mvn.w	r4, #119	; 0x77

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
   1444e:	4620      	mov	r0, r4
   14450:	b002      	add	sp, #8
   14452:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   14454:	4e11      	ldr	r6, [pc, #68]	; (1449c <bt_id_create+0x90>)
   14456:	79f3      	ldrb	r3, [r6, #7]
   14458:	2b01      	cmp	r3, #1
   1445a:	d01b      	beq.n	14494 <bt_id_create+0x88>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1445c:	f3bf 8f5b 	dmb	ish
   14460:	f8d6 30cc 	ldr.w	r3, [r6, #204]	; 0xcc
   14464:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14468:	07db      	lsls	r3, r3, #31
   1446a:	d40b      	bmi.n	14484 <bt_id_create+0x78>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   1446c:	2d00      	cmp	r5, #0
   1446e:	d0d2      	beq.n	14416 <bt_id_create+0xa>
   14470:	2207      	movs	r2, #7
   14472:	4669      	mov	r1, sp
   14474:	4628      	mov	r0, r5
   14476:	9400      	str	r4, [sp, #0]
   14478:	f8cd 4003 	str.w	r4, [sp, #3]
   1447c:	f00c faef 	bl	20a5e <memcmp>
   14480:	2800      	cmp	r0, #0
   14482:	d0c8      	beq.n	14416 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   14484:	79f4      	ldrb	r4, [r6, #7]
	id_create(new_id, addr, irk);
   14486:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   14488:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
   1448a:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   1448c:	71f3      	strb	r3, [r6, #7]
	id_create(new_id, addr, irk);
   1448e:	f7ff ff91 	bl	143b4 <id_create.isra.0>
	return new_id;
   14492:	e7dc      	b.n	1444e <bt_id_create+0x42>
		return -ENOMEM;
   14494:	f06f 040b 	mvn.w	r4, #11
   14498:	e7d9      	b.n	1444e <bt_id_create+0x42>
   1449a:	bf00      	nop
   1449c:	200002b8 	.word	0x200002b8

000144a0 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   144a0:	b570      	push	{r4, r5, r6, lr}
   144a2:	b086      	sub	sp, #24
   144a4:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   144a6:	aa01      	add	r2, sp, #4
   144a8:	2100      	movs	r1, #0
   144aa:	f241 0009 	movw	r0, #4105	; 0x1009
   144ae:	f7ff f9d3 	bl	13858 <bt_hci_cmd_send_sync>
	if (err) {
   144b2:	4604      	mov	r4, r0
   144b4:	b970      	cbnz	r0, 144d4 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   144b6:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   144b8:	9002      	str	r0, [sp, #8]
   144ba:	689d      	ldr	r5, [r3, #8]
   144bc:	f8ad 000c 	strh.w	r0, [sp, #12]
   144c0:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   144c2:	2206      	movs	r2, #6
   144c4:	a902      	add	r1, sp, #8
   144c6:	4628      	mov	r0, r5
   144c8:	f00c fac9 	bl	20a5e <memcmp>
   144cc:	b920      	cbnz	r0, 144d8 <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   144ce:	9801      	ldr	r0, [sp, #4]
   144d0:	f002 faf0 	bl	16ab4 <net_buf_unref>
		return 0U;
   144d4:	2000      	movs	r0, #0
   144d6:	e015      	b.n	14504 <bt_id_read_public_addr+0x64>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   144d8:	4b0b      	ldr	r3, [pc, #44]	; (14508 <bt_id_read_public_addr+0x68>)
   144da:	6818      	ldr	r0, [r3, #0]
   144dc:	9004      	str	r0, [sp, #16]
   144de:	889b      	ldrh	r3, [r3, #4]
   144e0:	f8ad 3014 	strh.w	r3, [sp, #20]
   144e4:	2206      	movs	r2, #6
   144e6:	a904      	add	r1, sp, #16
   144e8:	4628      	mov	r0, r5
   144ea:	f00c fab8 	bl	20a5e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   144ee:	2800      	cmp	r0, #0
   144f0:	d0ed      	beq.n	144ce <bt_id_read_public_addr+0x2e>
		return 0U;
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
   144f2:	4629      	mov	r1, r5
   144f4:	1c70      	adds	r0, r6, #1
   144f6:	f009 ff15 	bl	1e324 <bt_addr_copy>
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
   144fa:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   144fc:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   144fe:	f002 fad9 	bl	16ab4 <net_buf_unref>
	return 1U;
   14502:	2001      	movs	r0, #1
}
   14504:	b006      	add	sp, #24
   14506:	bd70      	pop	{r4, r5, r6, pc}
   14508:	00020f93 	.word	0x00020f93

0001450c <bt_setup_public_id_addr>:

void bt_setup_public_id_addr(void)
{
   1450c:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1450e:	4668      	mov	r0, sp
   14510:	f7ff ffc6 	bl	144a0 <bt_id_read_public_addr>
   14514:	4b04      	ldr	r3, [pc, #16]	; (14528 <bt_setup_public_id_addr+0x1c>)
   14516:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   14518:	b118      	cbz	r0, 14522 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
   1451a:	4669      	mov	r1, sp
   1451c:	2000      	movs	r0, #0
   1451e:	f7ff ff49 	bl	143b4 <id_create.isra.0>
}
   14522:	b003      	add	sp, #12
   14524:	f85d fb04 	ldr.w	pc, [sp], #4
   14528:	200002b8 	.word	0x200002b8

0001452c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   1452c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1452e:	4b18      	ldr	r3, [pc, #96]	; (14590 <bt_read_static_addr+0x64>)
   14530:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   14534:	f014 0401 	ands.w	r4, r4, #1
{
   14538:	4605      	mov	r5, r0
   1453a:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1453c:	d015      	beq.n	1456a <bt_read_static_addr+0x3e>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1453e:	aa01      	add	r2, sp, #4
   14540:	2100      	movs	r1, #0
   14542:	f64f 4009 	movw	r0, #64521	; 0xfc09
   14546:	f7ff f987 	bl	13858 <bt_hci_cmd_send_sync>
	if (err) {
   1454a:	4603      	mov	r3, r0
   1454c:	b9e8      	cbnz	r0, 1458a <bt_read_static_addr+0x5e>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   1454e:	9801      	ldr	r0, [sp, #4]
   14550:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
   14552:	7854      	ldrb	r4, [r2, #1]
   14554:	f04f 0c16 	mov.w	ip, #22
   14558:	42b4      	cmp	r4, r6
   1455a:	bf28      	it	cs
   1455c:	4634      	movcs	r4, r6
   1455e:	eb02 070c 	add.w	r7, r2, ip
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   14562:	42a3      	cmp	r3, r4
   14564:	db04      	blt.n	14570 <bt_read_static_addr+0x44>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
   14566:	f002 faa5 	bl	16ab4 <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   1456a:	4620      	mov	r0, r4
   1456c:	b003      	add	sp, #12
   1456e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14570:	1c96      	adds	r6, r2, #2
   14572:	fb0c 5103 	mla	r1, ip, r3, r5
   14576:	f856 eb04 	ldr.w	lr, [r6], #4
   1457a:	f841 eb04 	str.w	lr, [r1], #4
   1457e:	42be      	cmp	r6, r7
   14580:	d1f9      	bne.n	14576 <bt_read_static_addr+0x4a>
   14582:	883e      	ldrh	r6, [r7, #0]
   14584:	800e      	strh	r6, [r1, #0]
	for (i = 0; i < cnt; i++) {
   14586:	3301      	adds	r3, #1
   14588:	e7eb      	b.n	14562 <bt_read_static_addr+0x36>
		return 0;
   1458a:	2400      	movs	r4, #0
   1458c:	e7ed      	b.n	1456a <bt_read_static_addr+0x3e>
   1458e:	bf00      	nop
   14590:	200002b8 	.word	0x200002b8

00014594 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   14594:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   14596:	4d13      	ldr	r5, [pc, #76]	; (145e4 <bt_setup_random_id_addr+0x50>)
   14598:	79ec      	ldrb	r4, [r5, #7]
{
   1459a:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   1459c:	b9ec      	cbnz	r4, 145da <bt_setup_random_id_addr+0x46>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1459e:	2101      	movs	r1, #1
   145a0:	a802      	add	r0, sp, #8
   145a2:	f7ff ffc3 	bl	1452c <bt_read_static_addr>
   145a6:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   145a8:	b1b8      	cbz	r0, 145da <bt_setup_random_id_addr+0x46>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   145aa:	2616      	movs	r6, #22
   145ac:	e00e      	b.n	145cc <bt_setup_random_id_addr+0x38>
   145ae:	ab02      	add	r3, sp, #8
   145b0:	fb06 3102 	mla	r1, r6, r2, r3
   145b4:	f10d 0001 	add.w	r0, sp, #1
   145b8:	f009 feb4 	bl	1e324 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   145bc:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
   145be:	4669      	mov	r1, sp
   145c0:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   145c2:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
   145c6:	f7ff fef5 	bl	143b4 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   145ca:	3401      	adds	r4, #1
   145cc:	79eb      	ldrb	r3, [r5, #7]
   145ce:	b2e2      	uxtb	r2, r4
   145d0:	4293      	cmp	r3, r2
   145d2:	d8ec      	bhi.n	145ae <bt_setup_random_id_addr+0x1a>
			}

			return 0;
   145d4:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   145d6:	b008      	add	sp, #32
   145d8:	bd70      	pop	{r4, r5, r6, pc}
	return bt_id_create(NULL, NULL);
   145da:	2100      	movs	r1, #0
   145dc:	4608      	mov	r0, r1
   145de:	f7ff ff15 	bl	1440c <bt_id_create>
   145e2:	e7f8      	b.n	145d6 <bt_setup_random_id_addr+0x42>
   145e4:	200002b8 	.word	0x200002b8

000145e8 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   145e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   145ec:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   145f0:	7805      	ldrb	r5, [r0, #0]
{
   145f2:	460e      	mov	r6, r1
   145f4:	4690      	mov	r8, r2
   145f6:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   145f8:	d026      	beq.n	14648 <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   145fa:	4c22      	ldr	r4, [pc, #136]	; (14684 <bt_id_set_adv_own_addr+0x9c>)
   145fc:	b12a      	cbz	r2, 1460a <bt_id_set_adv_own_addr+0x22>
   145fe:	0688      	lsls	r0, r1, #26
   14600:	d503      	bpl.n	1460a <bt_id_set_adv_own_addr+0x22>
   14602:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   14606:	0659      	lsls	r1, r3, #25
   14608:	d539      	bpl.n	1467e <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1460a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   1460e:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   14612:	5ce3      	ldrb	r3, [r4, r3]
   14614:	2b01      	cmp	r3, #1
   14616:	d008      	beq.n	1462a <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   14618:	eba9 0505 	sub.w	r5, r9, r5
   1461c:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1461e:	f1b8 0f00 	cmp.w	r8, #0
   14622:	d10c      	bne.n	1463e <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   14624:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   14626:	2000      	movs	r0, #0
   14628:	e007      	b.n	1463a <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1462a:	2007      	movs	r0, #7
   1462c:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   14630:	4420      	add	r0, r4
   14632:	f7ff fe91 	bl	14358 <set_random_address>
				if (err) {
   14636:	2800      	cmp	r0, #0
   14638:	d0ee      	beq.n	14618 <bt_id_set_adv_own_addr+0x30>
}
   1463a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1463e:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   14640:	bf48      	it	mi
   14642:	f043 0302 	orrmi.w	r3, r3, #2
   14646:	e7ed      	b.n	14624 <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   14648:	074b      	lsls	r3, r1, #29
   1464a:	d514      	bpl.n	14676 <bt_id_set_adv_own_addr+0x8e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1464c:	4e0d      	ldr	r6, [pc, #52]	; (14684 <bt_id_set_adv_own_addr+0x9c>)
   1464e:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   14652:	ea4f 08c5 	mov.w	r8, r5, lsl #3
   14656:	5cf3      	ldrb	r3, [r6, r3]
   14658:	2b01      	cmp	r3, #1
   1465a:	d10a      	bne.n	14672 <bt_id_set_adv_own_addr+0x8a>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1465c:	2007      	movs	r0, #7
   1465e:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   14662:	4430      	add	r0, r6
   14664:	f7ff fe78 	bl	14358 <set_random_address>
			*own_addr_type = id_addr->type;
   14668:	eba8 0505 	sub.w	r5, r8, r5
   1466c:	5d73      	ldrb	r3, [r6, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1466e:	703b      	strb	r3, [r7, #0]
		if (err) {
   14670:	e7e3      	b.n	1463a <bt_id_set_adv_own_addr+0x52>
	int err = 0;
   14672:	4620      	mov	r0, r4
   14674:	e7f8      	b.n	14668 <bt_id_set_adv_own_addr+0x80>
			err = bt_id_set_adv_private_addr(adv);
   14676:	f009 fe63 	bl	1e340 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1467a:	2301      	movs	r3, #1
   1467c:	e7f7      	b.n	1466e <bt_id_set_adv_own_addr+0x86>
			return -ENOTSUP;
   1467e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14682:	e7da      	b.n	1463a <bt_id_set_adv_own_addr+0x52>
   14684:	200002b8 	.word	0x200002b8

00014688 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   14688:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1468a:	4c09      	ldr	r4, [pc, #36]	; (146b0 <bt_id_init+0x28>)
   1468c:	79e3      	ldrb	r3, [r4, #7]
   1468e:	b10b      	cbz	r3, 14694 <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   14690:	2000      	movs	r0, #0
}
   14692:	bd10      	pop	{r4, pc}
		bt_setup_public_id_addr();
   14694:	f7ff ff3a 	bl	1450c <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   14698:	79e3      	ldrb	r3, [r4, #7]
   1469a:	2b00      	cmp	r3, #0
   1469c:	d1f8      	bne.n	14690 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   1469e:	f7ff ff79 	bl	14594 <bt_setup_random_id_addr>
		if (err) {
   146a2:	2800      	cmp	r0, #0
   146a4:	d1f5      	bne.n	14692 <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
   146a6:	1c60      	adds	r0, r4, #1
}
   146a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
   146ac:	f7ff be54 	b.w	14358 <set_random_address>
   146b0:	200002b8 	.word	0x200002b8

000146b4 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   146b4:	6843      	ldr	r3, [r0, #4]
{
   146b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   146b8:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   146ba:	0558      	lsls	r0, r3, #21
   146bc:	d502      	bpl.n	146c4 <valid_adv_param+0x10>
		return false;
   146be:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   146c0:	b003      	add	sp, #12
   146c2:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   146c4:	6922      	ldr	r2, [r4, #16]
   146c6:	b10a      	cbz	r2, 146cc <valid_adv_param+0x18>
   146c8:	07d9      	lsls	r1, r3, #31
   146ca:	d5f8      	bpl.n	146be <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   146cc:	4d1a      	ldr	r5, [pc, #104]	; (14738 <valid_adv_param+0x84>)
   146ce:	7820      	ldrb	r0, [r4, #0]
   146d0:	79eb      	ldrb	r3, [r5, #7]
   146d2:	4283      	cmp	r3, r0
   146d4:	d9f3      	bls.n	146be <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   146d6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   146da:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   146dc:	2207      	movs	r2, #7
   146de:	4669      	mov	r1, sp
   146e0:	4428      	add	r0, r5
   146e2:	9300      	str	r3, [sp, #0]
   146e4:	f8cd 3003 	str.w	r3, [sp, #3]
   146e8:	f00c f9b9 	bl	20a5e <memcmp>
	if (param->id >= bt_dev.id_count ||
   146ec:	2800      	cmp	r0, #0
   146ee:	d0e6      	beq.n	146be <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   146f0:	6860      	ldr	r0, [r4, #4]
   146f2:	07c2      	lsls	r2, r0, #31
   146f4:	d406      	bmi.n	14704 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   146f6:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   146fa:	2b08      	cmp	r3, #8
   146fc:	d802      	bhi.n	14704 <valid_adv_param+0x50>
   146fe:	68a3      	ldr	r3, [r4, #8]
   14700:	2b9f      	cmp	r3, #159	; 0x9f
   14702:	d9dc      	bls.n	146be <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   14704:	f010 0f30 	tst.w	r0, #48	; 0x30
   14708:	d002      	beq.n	14710 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   1470a:	6923      	ldr	r3, [r4, #16]
   1470c:	2b00      	cmp	r3, #0
   1470e:	d0d6      	beq.n	146be <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   14710:	06c3      	lsls	r3, r0, #27
   14712:	d401      	bmi.n	14718 <valid_adv_param+0x64>
   14714:	6923      	ldr	r3, [r4, #16]
   14716:	b943      	cbnz	r3, 1472a <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   14718:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   1471c:	429a      	cmp	r2, r3
   1471e:	d8ce      	bhi.n	146be <valid_adv_param+0xa>
   14720:	2a1f      	cmp	r2, #31
   14722:	d9cc      	bls.n	146be <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   14724:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   14728:	d8c9      	bhi.n	146be <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   1472a:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   1472e:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   14732:	bf18      	it	ne
   14734:	2001      	movne	r0, #1
   14736:	e7c3      	b.n	146c0 <valid_adv_param+0xc>
   14738:	200002b8 	.word	0x200002b8

0001473c <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   1473c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   1473e:	4606      	mov	r6, r0
   14740:	4b1e      	ldr	r3, [pc, #120]	; (147bc <le_adv_start_add_conn+0x80>)
   14742:	f816 2b09 	ldrb.w	r2, [r6], #9
   14746:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   1474a:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1474c:	2300      	movs	r3, #0
{
   1474e:	4605      	mov	r5, r0
   14750:	2207      	movs	r2, #7
   14752:	460f      	mov	r7, r1
   14754:	4630      	mov	r0, r6
   14756:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   14758:	9300      	str	r3, [sp, #0]
   1475a:	f8cd 3003 	str.w	r3, [sp, #3]
   1475e:	f00c f97e 	bl	20a5e <memcmp>
   14762:	782a      	ldrb	r2, [r5, #0]
   14764:	4604      	mov	r4, r0
   14766:	b9a8      	cbnz	r0, 14794 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   14768:	4b15      	ldr	r3, [pc, #84]	; (147c0 <le_adv_start_add_conn+0x84>)
   1476a:	6818      	ldr	r0, [r3, #0]
   1476c:	8899      	ldrh	r1, [r3, #4]
   1476e:	9002      	str	r0, [sp, #8]
   14770:	799b      	ldrb	r3, [r3, #6]
   14772:	f8ad 100c 	strh.w	r1, [sp, #12]
   14776:	4610      	mov	r0, r2
   14778:	a902      	add	r1, sp, #8
   1477a:	f88d 300e 	strb.w	r3, [sp, #14]
   1477e:	f000 fc79 	bl	15074 <bt_conn_add_le>
		if (!conn) {
   14782:	4605      	mov	r5, r0
   14784:	b1b8      	cbz	r0, 147b6 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   14786:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   14788:	f000 fb5e 	bl	14e48 <bt_conn_set_state>
	*out_conn = conn;
   1478c:	603d      	str	r5, [r7, #0]
	return 0;
}
   1478e:	4620      	mov	r0, r4
   14790:	b005      	add	sp, #20
   14792:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   14794:	4631      	mov	r1, r6
   14796:	4610      	mov	r0, r2
   14798:	f00a f84a 	bl	1e830 <bt_conn_exists_le>
   1479c:	4604      	mov	r4, r0
   1479e:	b938      	cbnz	r0, 147b0 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   147a0:	7828      	ldrb	r0, [r5, #0]
   147a2:	4631      	mov	r1, r6
   147a4:	f000 fc66 	bl	15074 <bt_conn_add_le>
	if (!conn) {
   147a8:	4605      	mov	r5, r0
   147aa:	b120      	cbz	r0, 147b6 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   147ac:	2105      	movs	r1, #5
   147ae:	e7eb      	b.n	14788 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   147b0:	f06f 0415 	mvn.w	r4, #21
   147b4:	e7eb      	b.n	1478e <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   147b6:	f06f 040b 	mvn.w	r4, #11
   147ba:	e7e8      	b.n	1478e <le_adv_start_add_conn+0x52>
   147bc:	200002b8 	.word	0x200002b8
   147c0:	00020f99 	.word	0x00020f99

000147c4 <bt_le_adv_lookup_legacy>:
}
   147c4:	4800      	ldr	r0, [pc, #0]	; (147c8 <bt_le_adv_lookup_legacy+0x4>)
   147c6:	4770      	bx	lr
   147c8:	200002d0 	.word	0x200002d0

000147cc <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   147cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   147d0:	690e      	ldr	r6, [r1, #16]
{
   147d2:	b08d      	sub	sp, #52	; 0x34
   147d4:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   147d6:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
   147d8:	ebb6 0b03 	subs.w	fp, r6, r3
{
   147dc:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   147de:	4887      	ldr	r0, [pc, #540]	; (149fc <bt_le_adv_start_legacy+0x230>)
	struct bt_conn *conn = NULL;
   147e0:	9305      	str	r3, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable;
   147e2:	bf18      	it	ne
   147e4:	f04f 0b01 	movne.w	fp, #1
{
   147e8:	460c      	mov	r4, r1
   147ea:	4691      	mov	r9, r2
   147ec:	f009 fdcb 	bl	1e386 <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   147f0:	0787      	lsls	r7, r0, #30
   147f2:	f140 80f7 	bpl.w	149e4 <bt_le_adv_start_legacy+0x218>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   147f6:	4608      	mov	r0, r1
   147f8:	f7ff ff5c 	bl	146b4 <valid_adv_param>
   147fc:	b928      	cbnz	r0, 1480a <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   147fe:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   14802:	4658      	mov	r0, fp
   14804:	b00d      	add	sp, #52	; 0x34
   14806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   1480a:	4620      	mov	r0, r4
   1480c:	f009 fdaa 	bl	1e364 <bt_id_adv_random_addr_check>
   14810:	4680      	mov	r8, r0
   14812:	2800      	cmp	r0, #0
   14814:	d0f3      	beq.n	147fe <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   14816:	f105 0710 	add.w	r7, r5, #16
   1481a:	4638      	mov	r0, r7
   1481c:	f009 fdb3 	bl	1e386 <atomic_get>
   14820:	f3c0 1180 	ubfx	r1, r0, #6, #1
   14824:	0640      	lsls	r0, r0, #25
   14826:	f100 80e0 	bmi.w	149ea <bt_le_adv_start_legacy+0x21e>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1482a:	68a3      	ldr	r3, [r4, #8]
   1482c:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
   14830:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   14832:	68e3      	ldr	r3, [r4, #12]
   14834:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	(void)memset(&set_param, 0, sizeof(set_param));
   14838:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
   1483c:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
	set_param.channel_map  = get_adv_channel_map(param->options);
   14840:	f009 fd92 	bl	1e368 <get_adv_channel_map>
	if (adv->id != param->id) {
   14844:	782a      	ldrb	r2, [r5, #0]
   14846:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   14848:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   1484c:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   1484e:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
   14852:	d004      	beq.n	1485e <bt_le_adv_start_legacy+0x92>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14854:	4869      	ldr	r0, [pc, #420]	; (149fc <bt_le_adv_start_legacy+0x230>)
   14856:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   1485a:	f009 fd9a 	bl	1e392 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   1485e:	4a68      	ldr	r2, [pc, #416]	; (14a00 <bt_le_adv_start_legacy+0x234>)
	adv->id = param->id;
   14860:	7823      	ldrb	r3, [r4, #0]
   14862:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   14864:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   14868:	6861      	ldr	r1, [r4, #4]
   1486a:	465a      	mov	r2, fp
   1486c:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   14870:	4628      	mov	r0, r5
   14872:	f7ff feb9 	bl	145e8 <bt_id_set_adv_own_addr>
	if (err) {
   14876:	4683      	mov	fp, r0
   14878:	2800      	cmp	r0, #0
   1487a:	d1c2      	bne.n	14802 <bt_le_adv_start_legacy+0x36>
	if (dir_adv) {
   1487c:	f105 0009 	add.w	r0, r5, #9
   14880:	2e00      	cmp	r6, #0
   14882:	d040      	beq.n	14906 <bt_le_adv_start_legacy+0x13a>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   14884:	6921      	ldr	r1, [r4, #16]
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   14886:	f009 fd93 	bl	1e3b0 <bt_addr_le_copy>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1488a:	6860      	ldr	r0, [r4, #4]
   1488c:	07c1      	lsls	r1, r0, #31
   1488e:	d542      	bpl.n	14916 <bt_le_adv_start_legacy+0x14a>
		if (dir_adv) {
   14890:	2e00      	cmp	r6, #0
   14892:	d03d      	beq.n	14910 <bt_le_adv_start_legacy+0x144>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   14894:	f010 0f10 	tst.w	r0, #16
   14898:	bf14      	ite	ne
   1489a:	2304      	movne	r3, #4
   1489c:	2301      	moveq	r3, #1
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   1489e:	6921      	ldr	r1, [r4, #16]
   148a0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   148a4:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   148a8:	f009 fd82 	bl	1e3b0 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   148ac:	210f      	movs	r1, #15
   148ae:	f242 0006 	movw	r0, #8198	; 0x2006
   148b2:	f7fe ff99 	bl	137e8 <bt_hci_cmd_create>
	if (!buf) {
   148b6:	4683      	mov	fp, r0
   148b8:	2800      	cmp	r0, #0
   148ba:	f000 8099 	beq.w	149f0 <bt_le_adv_start_legacy+0x224>
   148be:	220f      	movs	r2, #15
   148c0:	a908      	add	r1, sp, #32
   148c2:	3008      	adds	r0, #8
   148c4:	f00b f9b5 	bl	1fc32 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   148c8:	2200      	movs	r2, #0
   148ca:	4659      	mov	r1, fp
   148cc:	f242 0006 	movw	r0, #8198	; 0x2006
   148d0:	f7fe ffc2 	bl	13858 <bt_hci_cmd_send_sync>
	if (err) {
   148d4:	2800      	cmp	r0, #0
   148d6:	f040 808e 	bne.w	149f6 <bt_le_adv_start_legacy+0x22a>
	if (!dir_adv) {
   148da:	b346      	cbz	r6, 1492e <bt_le_adv_start_legacy+0x162>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   148dc:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   148de:	07da      	lsls	r2, r3, #31
   148e0:	d439      	bmi.n	14956 <bt_le_adv_start_legacy+0x18a>
	return bt_le_adv_set_enable_legacy(adv, enable);
   148e2:	2101      	movs	r1, #1
   148e4:	4628      	mov	r0, r5
   148e6:	f009 fe63 	bl	1e5b0 <bt_le_adv_set_enable_legacy>
	if (err) {
   148ea:	4683      	mov	fp, r0
   148ec:	9805      	ldr	r0, [sp, #20]
   148ee:	f1bb 0f00 	cmp.w	fp, #0
   148f2:	d071      	beq.n	149d8 <bt_le_adv_start_legacy+0x20c>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   148f4:	2800      	cmp	r0, #0
   148f6:	d084      	beq.n	14802 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   148f8:	2100      	movs	r1, #0
   148fa:	f000 faa5 	bl	14e48 <bt_conn_set_state>
			bt_conn_unref(conn);
   148fe:	9805      	ldr	r0, [sp, #20]
   14900:	f009 ff2f 	bl	1e762 <bt_conn_unref>
   14904:	e77d      	b.n	14802 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   14906:	9606      	str	r6, [sp, #24]
   14908:	a906      	add	r1, sp, #24
   1490a:	f8cd 601b 	str.w	r6, [sp, #27]
   1490e:	e7ba      	b.n	14886 <bt_le_adv_start_legacy+0xba>
			set_param.type = BT_HCI_ADV_IND;
   14910:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
   14914:	e7ca      	b.n	148ac <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   14916:	9b16      	ldr	r3, [sp, #88]	; 0x58
   14918:	b933      	cbnz	r3, 14928 <bt_le_adv_start_legacy+0x15c>
   1491a:	f3c0 08c0 	ubfx	r8, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   1491e:	f1c8 0303 	rsb	r3, r8, #3
   14922:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   14926:	e7c1      	b.n	148ac <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   14928:	f04f 0801 	mov.w	r8, #1
   1492c:	e7f7      	b.n	1491e <bt_le_adv_start_legacy+0x152>
   1492e:	6863      	ldr	r3, [r4, #4]
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   14930:	f3c3 4280 	ubfx	r2, r3, #18, #1
   14934:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   14938:	e9cd 8301 	strd	r8, r3, [sp, #4]
   1493c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1493e:	9203      	str	r2, [sp, #12]
   14940:	9300      	str	r3, [sp, #0]
   14942:	4652      	mov	r2, sl
   14944:	9b16      	ldr	r3, [sp, #88]	; 0x58
   14946:	4649      	mov	r1, r9
   14948:	4628      	mov	r0, r5
   1494a:	f009 fdb0 	bl	1e4ae <le_adv_update.constprop.0>
		if (err) {
   1494e:	4683      	mov	fp, r0
   14950:	2800      	cmp	r0, #0
   14952:	d0c3      	beq.n	148dc <bt_le_adv_start_legacy+0x110>
   14954:	e755      	b.n	14802 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   14956:	a905      	add	r1, sp, #20
   14958:	4628      	mov	r0, r5
   1495a:	f7ff feef 	bl	1473c <le_adv_start_add_conn>
		if (err) {
   1495e:	4683      	mov	fp, r0
   14960:	2800      	cmp	r0, #0
   14962:	d0be      	beq.n	148e2 <bt_le_adv_start_legacy+0x116>
			if (err == -ENOMEM && !dir_adv &&
   14964:	f110 0f0c 	cmn.w	r0, #12
   14968:	f47f af4b 	bne.w	14802 <bt_le_adv_start_legacy+0x36>
   1496c:	2e00      	cmp	r6, #0
   1496e:	f47f af48 	bne.w	14802 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   14972:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   14974:	079b      	lsls	r3, r3, #30
   14976:	f53f af44 	bmi.w	14802 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1497a:	6860      	ldr	r0, [r4, #4]
   1497c:	f080 0002 	eor.w	r0, r0, #2
   14980:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   14984:	f00b 0201 	and.w	r2, fp, #1
   14988:	210c      	movs	r1, #12
   1498a:	4638      	mov	r0, r7
   1498c:	f009 fd78 	bl	1e480 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   14990:	6862      	ldr	r2, [r4, #4]
   14992:	2107      	movs	r1, #7
   14994:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   14998:	4638      	mov	r0, r7
   1499a:	f009 fd71 	bl	1e480 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_FORCE_NAME_IN_AD,
   1499e:	6862      	ldr	r2, [r4, #4]
   149a0:	2112      	movs	r1, #18
   149a2:	f3c2 4280 	ubfx	r2, r2, #18, #1
   149a6:	4638      	mov	r0, r7
   149a8:	f009 fd6a 	bl	1e480 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   149ac:	6862      	ldr	r2, [r4, #4]
   149ae:	2108      	movs	r1, #8
   149b0:	f002 0201 	and.w	r2, r2, #1
   149b4:	4638      	mov	r0, r7
   149b6:	f009 fd63 	bl	1e480 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   149ba:	4642      	mov	r2, r8
   149bc:	2109      	movs	r1, #9
   149be:	4638      	mov	r0, r7
   149c0:	f009 fd5e 	bl	1e480 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   149c4:	6862      	ldr	r2, [r4, #4]
   149c6:	210b      	movs	r1, #11
   149c8:	f3c2 0280 	ubfx	r2, r2, #2, #1
   149cc:	4638      	mov	r0, r7
   149ce:	f009 fd57 	bl	1e480 <atomic_set_bit_to>
	return 0;
   149d2:	f04f 0b00 	mov.w	fp, #0
   149d6:	e714      	b.n	14802 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   149d8:	b108      	cbz	r0, 149de <bt_le_adv_start_legacy+0x212>
		bt_conn_unref(conn);
   149da:	f009 fec2 	bl	1e762 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   149de:	2e00      	cmp	r6, #0
   149e0:	d1d0      	bne.n	14984 <bt_le_adv_start_legacy+0x1b8>
   149e2:	e7ca      	b.n	1497a <bt_le_adv_start_legacy+0x1ae>
		return -EAGAIN;
   149e4:	f06f 0b0a 	mvn.w	fp, #10
   149e8:	e70b      	b.n	14802 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   149ea:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   149ee:	e708      	b.n	14802 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   149f0:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   149f4:	e705      	b.n	14802 <bt_le_adv_start_legacy+0x36>
   149f6:	4683      	mov	fp, r0
   149f8:	e703      	b.n	14802 <bt_le_adv_start_legacy+0x36>
   149fa:	bf00      	nop
   149fc:	20000384 	.word	0x20000384
   14a00:	200002b8 	.word	0x200002b8

00014a04 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   14a04:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14a06:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   14a08:	9a06      	ldr	r2, [sp, #24]
{
   14a0a:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   14a0c:	e9cd 3200 	strd	r3, r2, [sp]
   14a10:	462b      	mov	r3, r5
   14a12:	460a      	mov	r2, r1
   14a14:	4601      	mov	r1, r0
   14a16:	4811      	ldr	r0, [pc, #68]	; (14a5c <bt_le_adv_start+0x58>)
   14a18:	f7ff fed8 	bl	147cc <bt_le_adv_start_legacy>
   14a1c:	4621      	mov	r1, r4
   14a1e:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   14a20:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   14a22:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   14a26:	429d      	cmp	r5, r3
   14a28:	d102      	bne.n	14a30 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   14a2a:	4630      	mov	r0, r6
   14a2c:	b002      	add	sp, #8
   14a2e:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   14a30:	880a      	ldrh	r2, [r1, #0]
   14a32:	4282      	cmp	r2, r0
   14a34:	d104      	bne.n	14a40 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   14a36:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   14a38:	b112      	cbz	r2, 14a40 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   14a3a:	7812      	ldrb	r2, [r2, #0]
   14a3c:	07d2      	lsls	r2, r2, #31
   14a3e:	d402      	bmi.n	14a46 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   14a40:	3301      	adds	r3, #1
   14a42:	3108      	adds	r1, #8
   14a44:	e7ef      	b.n	14a26 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   14a46:	4906      	ldr	r1, [pc, #24]	; (14a60 <bt_le_adv_start+0x5c>)
   14a48:	4806      	ldr	r0, [pc, #24]	; (14a64 <bt_le_adv_start+0x60>)
   14a4a:	f00b fcf7 	bl	2043c <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   14a4e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   14a52:	2300      	movs	r3, #0
   14a54:	4803      	ldr	r0, [pc, #12]	; (14a64 <bt_le_adv_start+0x60>)
   14a56:	f004 fc71 	bl	1933c <k_work_reschedule>
   14a5a:	e7e6      	b.n	14a2a <bt_le_adv_start+0x26>
   14a5c:	200002d0 	.word	0x200002d0
   14a60:	0001e601 	.word	0x0001e601
   14a64:	200002e8 	.word	0x200002e8

00014a68 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   14a68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   14a6a:	4821      	ldr	r0, [pc, #132]	; (14af0 <bt_le_adv_stop+0x88>)
   14a6c:	f009 fdc5 	bl	1e5fa <bt_le_lim_adv_cancel_timeout>
   14a70:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   14a74:	481f      	ldr	r0, [pc, #124]	; (14af4 <bt_le_adv_stop+0x8c>)
   14a76:	f009 fc8c 	bl	1e392 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14a7a:	481e      	ldr	r0, [pc, #120]	; (14af4 <bt_le_adv_stop+0x8c>)
   14a7c:	f009 fc83 	bl	1e386 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   14a80:	0642      	lsls	r2, r0, #25
   14a82:	f3c0 1380 	ubfx	r3, r0, #6, #1
   14a86:	d530      	bpl.n	14aea <bt_le_adv_stop+0x82>
   14a88:	481a      	ldr	r0, [pc, #104]	; (14af4 <bt_le_adv_stop+0x8c>)
   14a8a:	f009 fc7c 	bl	1e386 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14a8e:	05c3      	lsls	r3, r0, #23
   14a90:	d521      	bpl.n	14ad6 <bt_le_adv_stop+0x6e>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   14a92:	2300      	movs	r3, #0
   14a94:	4818      	ldr	r0, [pc, #96]	; (14af8 <bt_le_adv_stop+0x90>)
   14a96:	9300      	str	r3, [sp, #0]
   14a98:	2207      	movs	r2, #7
   14a9a:	4669      	mov	r1, sp
   14a9c:	f8cd 3003 	str.w	r3, [sp, #3]
   14aa0:	f00b ffdd 	bl	20a5e <memcmp>
   14aa4:	4b15      	ldr	r3, [pc, #84]	; (14afc <bt_le_adv_stop+0x94>)
   14aa6:	b9e0      	cbnz	r0, 14ae2 <bt_le_adv_stop+0x7a>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   14aa8:	4a15      	ldr	r2, [pc, #84]	; (14b00 <bt_le_adv_stop+0x98>)
   14aaa:	8891      	ldrh	r1, [r2, #4]
   14aac:	6810      	ldr	r0, [r2, #0]
   14aae:	7992      	ldrb	r2, [r2, #6]
   14ab0:	f8ad 100c 	strh.w	r1, [sp, #12]
   14ab4:	f88d 200e 	strb.w	r2, [sp, #14]
   14ab8:	9002      	str	r0, [sp, #8]
   14aba:	2204      	movs	r2, #4
   14abc:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   14abe:	7e18      	ldrb	r0, [r3, #24]
   14ac0:	f000 fb12 	bl	150e8 <bt_conn_lookup_state_le>
   14ac4:	4604      	mov	r4, r0
	if (conn) {
   14ac6:	b130      	cbz	r0, 14ad6 <bt_le_adv_stop+0x6e>
		conn->err = status;
   14ac8:	2100      	movs	r1, #0
   14aca:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14acc:	f000 f9bc 	bl	14e48 <bt_conn_set_state>
		bt_conn_unref(conn);
   14ad0:	4620      	mov	r0, r4
   14ad2:	f009 fe46 	bl	1e762 <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   14ad6:	4806      	ldr	r0, [pc, #24]	; (14af0 <bt_le_adv_stop+0x88>)
   14ad8:	2100      	movs	r1, #0
   14ada:	f009 fd69 	bl	1e5b0 <bt_le_adv_set_enable_legacy>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   14ade:	b004      	add	sp, #16
   14ae0:	bd10      	pop	{r4, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   14ae2:	2205      	movs	r2, #5
   14ae4:	f103 0121 	add.w	r1, r3, #33	; 0x21
   14ae8:	e7e9      	b.n	14abe <bt_le_adv_stop+0x56>
		return 0;
   14aea:	4618      	mov	r0, r3
   14aec:	e7f7      	b.n	14ade <bt_le_adv_stop+0x76>
   14aee:	bf00      	nop
   14af0:	200002d0 	.word	0x200002d0
   14af4:	200002e0 	.word	0x200002e0
   14af8:	200002d9 	.word	0x200002d9
   14afc:	200002b8 	.word	0x200002b8
   14b00:	00020f99 	.word	0x00020f99

00014b04 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   14b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14b06:	481e      	ldr	r0, [pc, #120]	; (14b80 <bt_le_adv_resume+0x7c>)
   14b08:	4c1d      	ldr	r4, [pc, #116]	; (14b80 <bt_le_adv_resume+0x7c>)
   14b0a:	f009 fc3c 	bl	1e386 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   14b0e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   14b12:	d032      	beq.n	14b7a <bt_le_adv_resume+0x76>
   14b14:	4620      	mov	r0, r4
   14b16:	f009 fc36 	bl	1e386 <atomic_get>
   14b1a:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14b1c:	f3c0 1580 	ubfx	r5, r0, #6, #1
   14b20:	d42b      	bmi.n	14b7a <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14b22:	4620      	mov	r0, r4
   14b24:	f009 fc2f 	bl	1e386 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   14b28:	05c3      	lsls	r3, r0, #23
   14b2a:	d526      	bpl.n	14b7a <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   14b2c:	a901      	add	r1, sp, #4
   14b2e:	f1a4 0010 	sub.w	r0, r4, #16
   14b32:	f7ff fe03 	bl	1473c <le_adv_start_add_conn>
	if (err) {
   14b36:	bb00      	cbnz	r0, 14b7a <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
   14b38:	2101      	movs	r1, #1
   14b3a:	f1a4 0010 	sub.w	r0, r4, #16
   14b3e:	f009 fd37 	bl	1e5b0 <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
   14b42:	b150      	cbz	r0, 14b5a <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14b44:	4629      	mov	r1, r5
   14b46:	9801      	ldr	r0, [sp, #4]
   14b48:	f000 f97e 	bl	14e48 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14b4c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   14b50:	4620      	mov	r0, r4
   14b52:	f009 fc1e 	bl	1e392 <atomic_and>
	return (old & mask) != 0;
   14b56:	f3c0 3500 	ubfx	r5, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   14b5a:	9801      	ldr	r0, [sp, #4]
   14b5c:	f009 fe01 	bl	1e762 <bt_conn_unref>
	if (persist_paused) {
   14b60:	b15d      	cbz	r5, 14b7a <bt_le_adv_resume+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14b62:	f3bf 8f5b 	dmb	ish
   14b66:	e854 3f00 	ldrex	r3, [r4]
   14b6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   14b6e:	e844 3200 	strex	r2, r3, [r4]
   14b72:	2a00      	cmp	r2, #0
   14b74:	d1f7      	bne.n	14b66 <bt_le_adv_resume+0x62>
   14b76:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   14b7a:	b003      	add	sp, #12
   14b7c:	bd30      	pop	{r4, r5, pc}
   14b7e:	bf00      	nop
   14b80:	200002e0 	.word	0x200002e0

00014b84 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   14b84:	2300      	movs	r3, #0
	tx->user_data = NULL;
   14b86:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   14b8a:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   14b8c:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   14b8e:	4801      	ldr	r0, [pc, #4]	; (14b94 <tx_free+0x10>)
   14b90:	f00b bb66 	b.w	20260 <k_queue_append>
   14b94:	20000918 	.word	0x20000918

00014b98 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   14b98:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   14b9a:	4b09      	ldr	r3, [pc, #36]	; (14bc0 <notify_connected+0x28>)
   14b9c:	681d      	ldr	r5, [r3, #0]
{
   14b9e:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   14ba0:	7a61      	ldrb	r1, [r4, #9]
   14ba2:	b92d      	cbnz	r5, 14bb0 <notify_connected+0x18>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	if (!conn->err) {
   14ba4:	b951      	cbnz	r1, 14bbc <notify_connected+0x24>
		bt_gatt_connected(conn);
   14ba6:	4620      	mov	r0, r4
	}
}
   14ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   14bac:	f001 be3a 	b.w	16824 <bt_gatt_connected>
		if (cb->connected) {
   14bb0:	682b      	ldr	r3, [r5, #0]
   14bb2:	b10b      	cbz	r3, 14bb8 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   14bb4:	4620      	mov	r0, r4
   14bb6:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14bb8:	692d      	ldr	r5, [r5, #16]
   14bba:	e7f1      	b.n	14ba0 <notify_connected+0x8>
}
   14bbc:	bd38      	pop	{r3, r4, r5, pc}
   14bbe:	bf00      	nop
   14bc0:	200023f8 	.word	0x200023f8

00014bc4 <send_frag>:
{
   14bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   14bc8:	694d      	ldr	r5, [r1, #20]
{
   14bca:	4604      	mov	r4, r0
   14bcc:	460e      	mov	r6, r1
   14bce:	4690      	mov	r8, r2
   14bd0:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   14bd2:	f04f 33ff 	mov.w	r3, #4294967295
   14bd6:	483f      	ldr	r0, [pc, #252]	; (14cd4 <send_frag+0x110>)
   14bd8:	f04f 32ff 	mov.w	r2, #4294967295
   14bdc:	f004 f9c0 	bl	18f60 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   14be0:	7aa3      	ldrb	r3, [r4, #10]
   14be2:	2b07      	cmp	r3, #7
   14be4:	d146      	bne.n	14c74 <send_frag+0xb0>
	__asm__ volatile(
   14be6:	f04f 0340 	mov.w	r3, #64	; 0x40
   14bea:	f3ef 8211 	mrs	r2, BASEPRI
   14bee:	f383 8811 	msr	BASEPRI, r3
   14bf2:	f3bf 8f6f 	isb	sy
	if (tx) {
   14bf6:	2d00      	cmp	r5, #0
   14bf8:	d04e      	beq.n	14c98 <send_frag+0xd4>
	parent->next = child;
   14bfa:	2300      	movs	r3, #0
   14bfc:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   14bfe:	69a3      	ldr	r3, [r4, #24]
   14c00:	2b00      	cmp	r3, #0
   14c02:	d146      	bne.n	14c92 <send_frag+0xce>
	list->head = node;
   14c04:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   14c08:	f382 8811 	msr	BASEPRI, r2
   14c0c:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   14c10:	2104      	movs	r1, #4
   14c12:	f106 0008 	add.w	r0, r6, #8
   14c16:	f00b f81e 	bl	1fc56 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   14c1a:	8823      	ldrh	r3, [r4, #0]
   14c1c:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   14c20:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   14c24:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   14c26:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   14c2a:	3b04      	subs	r3, #4
   14c2c:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14c2e:	2302      	movs	r3, #2
   14c30:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   14c32:	4630      	mov	r0, r6
   14c34:	f7ff f832 	bl	13c9c <bt_send>
	if (err) {
   14c38:	2800      	cmp	r0, #0
   14c3a:	d049      	beq.n	14cd0 <send_frag+0x10c>
	__asm__ volatile(
   14c3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   14c40:	f3ef 8111 	mrs	r1, BASEPRI
   14c44:	f383 8811 	msr	BASEPRI, r3
   14c48:	f3bf 8f6f 	isb	sy
		if (tx) {
   14c4c:	2d00      	cmp	r5, #0
   14c4e:	d039      	beq.n	14cc4 <send_frag+0x100>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14c50:	6963      	ldr	r3, [r4, #20]
   14c52:	2200      	movs	r2, #0
   14c54:	b153      	cbz	r3, 14c6c <send_frag+0xa8>
   14c56:	429d      	cmp	r5, r3
   14c58:	d131      	bne.n	14cbe <send_frag+0xfa>
Z_GENLIST_REMOVE(slist, snode)
   14c5a:	682b      	ldr	r3, [r5, #0]
   14c5c:	bb4a      	cbnz	r2, 14cb2 <send_frag+0xee>
   14c5e:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   14c60:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   14c62:	4295      	cmp	r5, r2
   14c64:	d100      	bne.n	14c68 <send_frag+0xa4>
	list->tail = node;
   14c66:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   14c68:	2300      	movs	r3, #0
   14c6a:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   14c6c:	f381 8811 	msr	BASEPRI, r1
   14c70:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   14c74:	4817      	ldr	r0, [pc, #92]	; (14cd4 <send_frag+0x110>)
   14c76:	f004 f94d 	bl	18f14 <z_impl_k_sem_give>
	if (tx) {
   14c7a:	b115      	cbz	r5, 14c82 <send_frag+0xbe>
		tx_free(tx);
   14c7c:	4628      	mov	r0, r5
   14c7e:	f7ff ff81 	bl	14b84 <tx_free>
	if (always_consume) {
   14c82:	b11f      	cbz	r7, 14c8c <send_frag+0xc8>
		net_buf_unref(buf);
   14c84:	4630      	mov	r0, r6
   14c86:	f001 ff15 	bl	16ab4 <net_buf_unref>
	return false;
   14c8a:	2700      	movs	r7, #0
}
   14c8c:	4638      	mov	r0, r7
   14c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14c92:	601d      	str	r5, [r3, #0]
	list->tail = node;
   14c94:	61a5      	str	r5, [r4, #24]
}
   14c96:	e7b7      	b.n	14c08 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   14c98:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   14c9a:	b133      	cbz	r3, 14caa <send_frag+0xe6>
			pending_no_cb = &tail_tx->pending_no_cb;
   14c9c:	f103 090c 	add.w	r9, r3, #12
   14ca0:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   14ca2:	3301      	adds	r3, #1
   14ca4:	f8c9 3000 	str.w	r3, [r9]
   14ca8:	e7ae      	b.n	14c08 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   14caa:	69e3      	ldr	r3, [r4, #28]
   14cac:	f104 091c 	add.w	r9, r4, #28
   14cb0:	e7f7      	b.n	14ca2 <send_frag+0xde>
	parent->next = child;
   14cb2:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   14cb4:	69a3      	ldr	r3, [r4, #24]
   14cb6:	429d      	cmp	r5, r3
	list->tail = node;
   14cb8:	bf08      	it	eq
   14cba:	61a2      	streq	r2, [r4, #24]
}
   14cbc:	e7d4      	b.n	14c68 <send_frag+0xa4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14cbe:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14cc0:	681b      	ldr	r3, [r3, #0]
   14cc2:	e7c7      	b.n	14c54 <send_frag+0x90>
			(*pending_no_cb)--;
   14cc4:	f8d9 3000 	ldr.w	r3, [r9]
   14cc8:	3b01      	subs	r3, #1
   14cca:	f8c9 3000 	str.w	r3, [r9]
   14cce:	e7cd      	b.n	14c6c <send_frag+0xa8>
	return true;
   14cd0:	2701      	movs	r7, #1
   14cd2:	e7db      	b.n	14c8c <send_frag+0xc8>
   14cd4:	200003b8 	.word	0x200003b8

00014cd8 <bt_conn_get_pkts>:
}
   14cd8:	4800      	ldr	r0, [pc, #0]	; (14cdc <bt_conn_get_pkts+0x4>)
   14cda:	4770      	bx	lr
   14cdc:	200003b8 	.word	0x200003b8

00014ce0 <bt_conn_new>:
{
   14ce0:	b538      	push	{r3, r4, r5, lr}
   14ce2:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   14ce4:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14ce6:	2501      	movs	r5, #1
   14ce8:	428b      	cmp	r3, r1
   14cea:	d102      	bne.n	14cf2 <bt_conn_new+0x12>
		return NULL;
   14cec:	2400      	movs	r4, #0
}
   14cee:	4620      	mov	r0, r4
   14cf0:	bd38      	pop	{r3, r4, r5, pc}
   14cf2:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   14cf6:	f3bf 8f5b 	dmb	ish
   14cfa:	e852 0f00 	ldrex	r0, [r2]
   14cfe:	2800      	cmp	r0, #0
   14d00:	d104      	bne.n	14d0c <bt_conn_new+0x2c>
   14d02:	e842 5c00 	strex	ip, r5, [r2]
   14d06:	f1bc 0f00 	cmp.w	ip, #0
   14d0a:	d1f6      	bne.n	14cfa <bt_conn_new+0x1a>
   14d0c:	f3bf 8f5b 	dmb	ish
   14d10:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   14d14:	d002      	beq.n	14d1c <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   14d16:	3301      	adds	r3, #1
   14d18:	4604      	mov	r4, r0
   14d1a:	e7e5      	b.n	14ce8 <bt_conn_new+0x8>
	if (!conn) {
   14d1c:	2c00      	cmp	r4, #0
   14d1e:	d0e6      	beq.n	14cee <bt_conn_new+0xe>
__ssp_bos_icheck3(memset, void *, int)
   14d20:	22b8      	movs	r2, #184	; 0xb8
   14d22:	2100      	movs	r1, #0
   14d24:	4620      	mov	r0, r4
   14d26:	f00b fee3 	bl	20af0 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   14d2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   14d2e:	4904      	ldr	r1, [pc, #16]	; (14d40 <bt_conn_new+0x60>)
   14d30:	f00b fb84 	bl	2043c <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   14d34:	4903      	ldr	r1, [pc, #12]	; (14d44 <bt_conn_new+0x64>)
   14d36:	f104 0028 	add.w	r0, r4, #40	; 0x28
   14d3a:	f00b fb59 	bl	203f0 <k_work_init>
	return conn;
   14d3e:	e7d6      	b.n	14cee <bt_conn_new+0xe>
   14d40:	0001518d 	.word	0x0001518d
   14d44:	0001e64b 	.word	0x0001e64b

00014d48 <bt_conn_send_cb>:
{
   14d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14d4a:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   14d4c:	7a83      	ldrb	r3, [r0, #10]
   14d4e:	2b07      	cmp	r3, #7
{
   14d50:	4604      	mov	r4, r0
   14d52:	460d      	mov	r5, r1
   14d54:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   14d56:	d114      	bne.n	14d82 <bt_conn_send_cb+0x3a>
	if (cb) {
   14d58:	b312      	cbz	r2, 14da0 <bt_conn_send_cb+0x58>
	return z_impl_k_current_get();
   14d5a:	f004 fdf9 	bl	19950 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   14d5e:	4b13      	ldr	r3, [pc, #76]	; (14dac <bt_conn_send_cb+0x64>)
   14d60:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   14d62:	4813      	ldr	r0, [pc, #76]	; (14db0 <bt_conn_send_cb+0x68>)
   14d64:	bf07      	ittee	eq
   14d66:	2200      	moveq	r2, #0
   14d68:	2300      	moveq	r3, #0
   14d6a:	f04f 32ff 	movne.w	r2, #4294967295
   14d6e:	f04f 33ff 	movne.w	r3, #4294967295
   14d72:	f004 f89b 	bl	18eac <z_impl_k_queue_get>
		if (!tx) {
   14d76:	b1a8      	cbz	r0, 14da4 <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
   14d78:	7aa3      	ldrb	r3, [r4, #10]
   14d7a:	2b07      	cmp	r3, #7
   14d7c:	d004      	beq.n	14d88 <bt_conn_send_cb+0x40>
			tx_free(tx);
   14d7e:	f7ff ff01 	bl	14b84 <tx_free>
		return -ENOTCONN;
   14d82:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   14d86:	e00a      	b.n	14d9e <bt_conn_send_cb+0x56>
		tx->pending_no_cb = 0U;
   14d88:	2300      	movs	r3, #0
		tx->user_data = user_data;
   14d8a:	e9c0 6701 	strd	r6, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   14d8e:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   14d90:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   14d92:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14d96:	4629      	mov	r1, r5
   14d98:	f00a ff12 	bl	1fbc0 <net_buf_put>
	return 0;
   14d9c:	2000      	movs	r0, #0
}
   14d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_data(buf)->tx = NULL;
   14da0:	614a      	str	r2, [r1, #20]
   14da2:	e7f6      	b.n	14d92 <bt_conn_send_cb+0x4a>
			return -ENOBUFS;
   14da4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14da8:	e7f9      	b.n	14d9e <bt_conn_send_cb+0x56>
   14daa:	bf00      	nop
   14dac:	20001c88 	.word	0x20001c88
   14db0:	20000918 	.word	0x20000918

00014db4 <bt_conn_prepare_events>:
{
   14db4:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0U;
   14db6:	4b1b      	ldr	r3, [pc, #108]	; (14e24 <bt_conn_prepare_events+0x70>)
   14db8:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14dba:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
   14dbc:	609a      	str	r2, [r3, #8]
{
   14dbe:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14dc0:	f00b fe27 	bl	20a12 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14dc4:	f3bf 8f5b 	dmb	ish
   14dc8:	4b17      	ldr	r3, [pc, #92]	; (14e28 <bt_conn_prepare_events+0x74>)
   14dca:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   14dce:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   14dd2:	f104 0014 	add.w	r0, r4, #20
   14dd6:	4619      	mov	r1, r3
	if (!atomic_get(&conn->ref)) {
   14dd8:	b90a      	cbnz	r2, 14dde <bt_conn_prepare_events+0x2a>
		conn_cleanup(conn);
   14dda:	2001      	movs	r0, #1
}
   14ddc:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   14dde:	7a9a      	ldrb	r2, [r3, #10]
   14de0:	b99a      	cbnz	r2, 14e0a <bt_conn_prepare_events+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14de2:	f3bf 8f5b 	dmb	ish
   14de6:	1d1a      	adds	r2, r3, #4
   14de8:	e852 5f00 	ldrex	r5, [r2]
   14dec:	f025 0c40 	bic.w	ip, r5, #64	; 0x40
   14df0:	e842 ce00 	strex	lr, ip, [r2]
   14df4:	f1be 0f00 	cmp.w	lr, #0
   14df8:	d1f6      	bne.n	14de8 <bt_conn_prepare_events+0x34>
   14dfa:	f3bf 8f5b 	dmb	ish
   14dfe:	066a      	lsls	r2, r5, #25
   14e00:	d503      	bpl.n	14e0a <bt_conn_prepare_events+0x56>
		conn_cleanup(conn);
   14e02:	4618      	mov	r0, r3
   14e04:	f009 fc2d 	bl	1e662 <conn_cleanup>
   14e08:	e7e7      	b.n	14dda <bt_conn_prepare_events+0x26>
	if (conn->state != BT_CONN_CONNECTED) {
   14e0a:	7a8b      	ldrb	r3, [r1, #10]
   14e0c:	2b07      	cmp	r3, #7
   14e0e:	d1e4      	bne.n	14dda <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[0],
   14e10:	4b06      	ldr	r3, [pc, #24]	; (14e2c <bt_conn_prepare_events+0x78>)
   14e12:	2200      	movs	r2, #0
   14e14:	2104      	movs	r1, #4
   14e16:	f00b fdfc 	bl	20a12 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   14e1a:	2301      	movs	r3, #1
   14e1c:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   14e20:	2002      	movs	r0, #2
	return ev_count;
   14e22:	e7db      	b.n	14ddc <bt_conn_prepare_events+0x28>
   14e24:	200005b4 	.word	0x200005b4
   14e28:	20001738 	.word	0x20001738
   14e2c:	20001770 	.word	0x20001770

00014e30 <bt_conn_lookup_handle>:
{
   14e30:	4602      	mov	r2, r0
   14e32:	b508      	push	{r3, lr}
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   14e34:	2101      	movs	r1, #1
   14e36:	4803      	ldr	r0, [pc, #12]	; (14e44 <bt_conn_lookup_handle+0x14>)
   14e38:	f009 fcad 	bl	1e796 <conn_lookup_handle>
}
   14e3c:	2800      	cmp	r0, #0
   14e3e:	bf38      	it	cc
   14e40:	2000      	movcc	r0, #0
   14e42:	bd08      	pop	{r3, pc}
   14e44:	20001738 	.word	0x20001738

00014e48 <bt_conn_set_state>:
{
   14e48:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   14e4a:	7a85      	ldrb	r5, [r0, #10]
   14e4c:	428d      	cmp	r5, r1
{
   14e4e:	4604      	mov	r4, r0
	if (conn->state == state) {
   14e50:	f000 809f 	beq.w	14f92 <bt_conn_set_state+0x14a>
	conn->state = state;
   14e54:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   14e56:	b925      	cbnz	r5, 14e62 <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
   14e58:	7883      	ldrb	r3, [r0, #2]
   14e5a:	2b08      	cmp	r3, #8
   14e5c:	d001      	beq.n	14e62 <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
   14e5e:	f009 fc65 	bl	1e72c <bt_conn_ref>
	switch (conn->state) {
   14e62:	7aa3      	ldrb	r3, [r4, #10]
   14e64:	2b01      	cmp	r3, #1
   14e66:	d116      	bne.n	14e96 <bt_conn_set_state+0x4e>
	z_impl_k_sem_give(sem);
   14e68:	4d4a      	ldr	r5, [pc, #296]	; (14f94 <bt_conn_set_state+0x14c>)
		tx->pending_no_cb = 0U;
   14e6a:	2600      	movs	r6, #0
	__asm__ volatile(
   14e6c:	f04f 0340 	mov.w	r3, #64	; 0x40
   14e70:	f3ef 8211 	mrs	r2, BASEPRI
   14e74:	f383 8811 	msr	BASEPRI, r3
   14e78:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   14e7c:	69e3      	ldr	r3, [r4, #28]
   14e7e:	2b00      	cmp	r3, #0
   14e80:	d068      	beq.n	14f54 <bt_conn_set_state+0x10c>
			conn->pending_no_cb--;
   14e82:	3b01      	subs	r3, #1
   14e84:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   14e86:	f382 8811 	msr	BASEPRI, r2
   14e8a:	f3bf 8f6f 	isb	sy
   14e8e:	4628      	mov	r0, r5
   14e90:	f004 f840 	bl	18f14 <z_impl_k_sem_give>
}
   14e94:	e7ea      	b.n	14e6c <bt_conn_set_state+0x24>
	switch (conn->state) {
   14e96:	2b07      	cmp	r3, #7
   14e98:	d00b      	beq.n	14eb2 <bt_conn_set_state+0x6a>
   14e9a:	2b00      	cmp	r3, #0
   14e9c:	d179      	bne.n	14f92 <bt_conn_set_state+0x14a>
		if (conn->type == BT_CONN_TYPE_ISO) {
   14e9e:	78a3      	ldrb	r3, [r4, #2]
   14ea0:	2b08      	cmp	r3, #8
   14ea2:	d076      	beq.n	14f92 <bt_conn_set_state+0x14a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   14ea4:	2b04      	cmp	r3, #4
   14ea6:	d11e      	bne.n	14ee6 <bt_conn_set_state+0x9e>
			bt_conn_unref(conn);
   14ea8:	4620      	mov	r0, r4
}
   14eaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   14eae:	f009 bc58 	b.w	1e762 <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
   14eb2:	78a3      	ldrb	r3, [r4, #2]
   14eb4:	2b04      	cmp	r3, #4
   14eb6:	d06c      	beq.n	14f92 <bt_conn_set_state+0x14a>
	z_impl_k_queue_init(queue);
   14eb8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14ebc:	f00b f9c4 	bl	20248 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   14ec0:	4835      	ldr	r0, [pc, #212]	; (14f98 <bt_conn_set_state+0x150>)
   14ec2:	2100      	movs	r1, #0
   14ec4:	f004 ff92 	bl	19dec <z_impl_k_poll_signal_raise>
	list->head = NULL;
   14ec8:	2300      	movs	r3, #0
	list->tail = NULL;
   14eca:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14ece:	78e3      	ldrb	r3, [r4, #3]
   14ed0:	2b01      	cmp	r3, #1
   14ed2:	d15e      	bne.n	14f92 <bt_conn_set_state+0x14a>
			k_work_schedule(&conn->deferred_work,
   14ed4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   14ed8:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   14edc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   14ee0:	2300      	movs	r3, #0
   14ee2:	f004 b9f7 	b.w	192d4 <k_work_schedule>
		switch (old_state) {
   14ee6:	3d01      	subs	r5, #1
   14ee8:	2d05      	cmp	r5, #5
   14eea:	d852      	bhi.n	14f92 <bt_conn_set_state+0x14a>
   14eec:	a301      	add	r3, pc, #4	; (adr r3, 14ef4 <bt_conn_set_state+0xac>)
   14eee:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   14ef2:	bf00      	nop
   14ef4:	00014f0d 	.word	0x00014f0d
   14ef8:	00014f47 	.word	0x00014f47
   14efc:	00014ea9 	.word	0x00014ea9
   14f00:	00014ea9 	.word	0x00014ea9
   14f04:	00014f47 	.word	0x00014f47
   14f08:	00014f47 	.word	0x00014f47
			tx_notify(conn);
   14f0c:	4620      	mov	r0, r4
   14f0e:	f009 fb79 	bl	1e604 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   14f12:	78a3      	ldrb	r3, [r4, #2]
   14f14:	2b01      	cmp	r3, #1
   14f16:	d103      	bne.n	14f20 <bt_conn_set_state+0xd8>
				k_work_cancel_delayable(&conn->deferred_work);
   14f18:	f104 0058 	add.w	r0, r4, #88	; 0x58
   14f1c:	f00b fa9a 	bl	20454 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14f20:	f3bf 8f5b 	dmb	ish
   14f24:	3404      	adds	r4, #4
   14f26:	e854 3f00 	ldrex	r3, [r4]
   14f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14f2e:	e844 3200 	strex	r2, r3, [r4]
   14f32:	2a00      	cmp	r2, #0
   14f34:	d1f7      	bne.n	14f26 <bt_conn_set_state+0xde>
   14f36:	f3bf 8f5b 	dmb	ish
   14f3a:	4817      	ldr	r0, [pc, #92]	; (14f98 <bt_conn_set_state+0x150>)
}
   14f3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14f40:	2100      	movs	r1, #0
   14f42:	f004 bf53 	b.w	19dec <z_impl_k_poll_signal_raise>
			if (conn->err) {
   14f46:	7a63      	ldrb	r3, [r4, #9]
   14f48:	2b00      	cmp	r3, #0
   14f4a:	d0ad      	beq.n	14ea8 <bt_conn_set_state+0x60>
				notify_connected(conn);
   14f4c:	4620      	mov	r0, r4
   14f4e:	f7ff fe23 	bl	14b98 <notify_connected>
   14f52:	e7a9      	b.n	14ea8 <bt_conn_set_state+0x60>
Z_GENLIST_IS_EMPTY(slist)
   14f54:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   14f56:	b128      	cbz	r0, 14f64 <bt_conn_set_state+0x11c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14f58:	69a1      	ldr	r1, [r4, #24]
   14f5a:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   14f5c:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14f5e:	4288      	cmp	r0, r1
	list->tail = node;
   14f60:	bf08      	it	eq
   14f62:	61a3      	streq	r3, [r4, #24]
   14f64:	f382 8811 	msr	BASEPRI, r2
   14f68:	f3bf 8f6f 	isb	sy
		if (!node) {
   14f6c:	b188      	cbz	r0, 14f92 <bt_conn_set_state+0x14a>
	__asm__ volatile(
   14f6e:	f04f 0240 	mov.w	r2, #64	; 0x40
   14f72:	f3ef 8311 	mrs	r3, BASEPRI
   14f76:	f382 8811 	msr	BASEPRI, r2
   14f7a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   14f7e:	68c2      	ldr	r2, [r0, #12]
   14f80:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   14f82:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   14f84:	f383 8811 	msr	BASEPRI, r3
   14f88:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   14f8c:	f7ff fdfa 	bl	14b84 <tx_free>
   14f90:	e77d      	b.n	14e8e <bt_conn_set_state+0x46>
}
   14f92:	bd70      	pop	{r4, r5, r6, pc}
   14f94:	200003b8 	.word	0x200003b8
   14f98:	200005b4 	.word	0x200005b4

00014f9c <bt_conn_index>:
		index = conn - acl_conns;
   14f9c:	4b03      	ldr	r3, [pc, #12]	; (14fac <bt_conn_index+0x10>)
   14f9e:	1ac0      	subs	r0, r0, r3
   14fa0:	4b03      	ldr	r3, [pc, #12]	; (14fb0 <bt_conn_index+0x14>)
   14fa2:	1180      	asrs	r0, r0, #6
   14fa4:	4358      	muls	r0, r3
}
   14fa6:	b2c0      	uxtb	r0, r0
   14fa8:	4770      	bx	lr
   14faa:	bf00      	nop
   14fac:	20001738 	.word	0x20001738
   14fb0:	aaaaaaab 	.word	0xaaaaaaab

00014fb4 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   14fb4:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14fb6:	f3bf 8f5b 	dmb	ish
   14fba:	6842      	ldr	r2, [r0, #4]
   14fbc:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send slave conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   14fc0:	0592      	lsls	r2, r2, #22
{
   14fc2:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   14fc4:	f100 0304 	add.w	r3, r0, #4
   14fc8:	d519      	bpl.n	14ffe <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   14fca:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   14fce:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
   14fd2:	4291      	cmp	r1, r2
   14fd4:	d813      	bhi.n	14ffe <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   14fd6:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
   14fda:	4291      	cmp	r1, r2
   14fdc:	d30f      	bcc.n	14ffe <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   14fde:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
   14fe2:	4291      	cmp	r1, r2
   14fe4:	d10b      	bne.n	14ffe <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14fe6:	f3bf 8f5b 	dmb	ish
   14fea:	e853 2f00 	ldrex	r2, [r3]
   14fee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   14ff2:	e843 2100 	strex	r1, r2, [r3]
   14ff6:	2900      	cmp	r1, #0
   14ff8:	d1f7      	bne.n	14fea <notify_le_param_updated+0x36>
   14ffa:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   14ffe:	4b08      	ldr	r3, [pc, #32]	; (15020 <notify_le_param_updated+0x6c>)
   15000:	681d      	ldr	r5, [r3, #0]
   15002:	b905      	cbnz	r5, 15006 <notify_le_param_updated+0x52>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   15004:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   15006:	68ee      	ldr	r6, [r5, #12]
   15008:	b13e      	cbz	r6, 1501a <notify_le_param_updated+0x66>
			cb->le_param_updated(conn, conn->le.interval,
   1500a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1500e:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   15012:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   15016:	4620      	mov	r0, r4
   15018:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1501a:	692d      	ldr	r5, [r5, #16]
   1501c:	e7f1      	b.n	15002 <notify_le_param_updated+0x4e>
   1501e:	bf00      	nop
   15020:	200023f8 	.word	0x200023f8

00015024 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   15024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15026:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   15028:	4608      	mov	r0, r1
{
   1502a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1502c:	f009 f816 	bl	1e05c <bt_le_conn_params_valid>
   15030:	4604      	mov	r4, r0
   15032:	b910      	cbnz	r0, 1503a <le_param_req+0x16>
		return false;
   15034:	2400      	movs	r4, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   15036:	4620      	mov	r0, r4
   15038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1503a:	4b09      	ldr	r3, [pc, #36]	; (15060 <le_param_req+0x3c>)
   1503c:	681e      	ldr	r6, [r3, #0]
   1503e:	2e00      	cmp	r6, #0
   15040:	d0f9      	beq.n	15036 <le_param_req+0x12>
		if (!cb->le_param_req) {
   15042:	68b3      	ldr	r3, [r6, #8]
   15044:	b90b      	cbnz	r3, 1504a <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   15046:	6936      	ldr	r6, [r6, #16]
   15048:	e7f9      	b.n	1503e <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   1504a:	4629      	mov	r1, r5
   1504c:	4638      	mov	r0, r7
   1504e:	4798      	blx	r3
   15050:	2800      	cmp	r0, #0
   15052:	d0ef      	beq.n	15034 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   15054:	4628      	mov	r0, r5
   15056:	f009 f801 	bl	1e05c <bt_le_conn_params_valid>
   1505a:	2800      	cmp	r0, #0
   1505c:	d1f3      	bne.n	15046 <le_param_req+0x22>
   1505e:	e7e9      	b.n	15034 <le_param_req+0x10>
   15060:	200023f8 	.word	0x200023f8

00015064 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   15064:	4b02      	ldr	r3, [pc, #8]	; (15070 <bt_conn_cb_register+0xc>)
   15066:	681a      	ldr	r2, [r3, #0]
   15068:	6102      	str	r2, [r0, #16]
	callback_list = cb;
   1506a:	6018      	str	r0, [r3, #0]
}
   1506c:	4770      	bx	lr
   1506e:	bf00      	nop
   15070:	200023f8 	.word	0x200023f8

00015074 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   15074:	b538      	push	{r3, r4, r5, lr}
   15076:	4605      	mov	r5, r0
   15078:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1507a:	480a      	ldr	r0, [pc, #40]	; (150a4 <bt_conn_add_le+0x30>)
   1507c:	2101      	movs	r1, #1
   1507e:	f7ff fe2f 	bl	14ce0 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   15082:	b170      	cbz	r0, 150a2 <bt_conn_add_le+0x2e>
		return NULL;
	}

	conn->id = id;
   15084:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15086:	6823      	ldr	r3, [r4, #0]
   15088:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
   1508c:	88a3      	ldrh	r3, [r4, #4]
   1508e:	f8a0 308c 	strh.w	r3, [r0, #140]	; 0x8c
   15092:	79a3      	ldrb	r3, [r4, #6]
   15094:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   15098:	2301      	movs	r3, #1
   1509a:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1509c:	4b02      	ldr	r3, [pc, #8]	; (150a8 <bt_conn_add_le+0x34>)
   1509e:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   150a2:	bd38      	pop	{r3, r4, r5, pc}
   150a4:	20001738 	.word	0x20001738
   150a8:	00280018 	.word	0x00280018

000150ac <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   150ac:	b570      	push	{r4, r5, r6, lr}
   150ae:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   150b0:	480c      	ldr	r0, [pc, #48]	; (150e4 <bt_conn_lookup_addr_le+0x38>)
{
   150b2:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   150b4:	f009 fb3a 	bl	1e72c <bt_conn_ref>

		if (!conn) {
   150b8:	4604      	mov	r4, r0
   150ba:	b128      	cbz	r0, 150c8 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   150bc:	7883      	ldrb	r3, [r0, #2]
   150be:	2b01      	cmp	r3, #1
   150c0:	d004      	beq.n	150cc <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   150c2:	f009 fb4e 	bl	1e762 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   150c6:	2400      	movs	r4, #0
}
   150c8:	4620      	mov	r0, r4
   150ca:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   150cc:	4629      	mov	r1, r5
   150ce:	4632      	mov	r2, r6
   150d0:	f009 fb8e 	bl	1e7f0 <bt_conn_is_peer_addr_le>
   150d4:	4605      	mov	r5, r0
   150d6:	2800      	cmp	r0, #0
   150d8:	d1f6      	bne.n	150c8 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   150da:	4620      	mov	r0, r4
   150dc:	f009 fb41 	bl	1e762 <bt_conn_unref>
	return NULL;
   150e0:	462c      	mov	r4, r5
			continue;
   150e2:	e7f1      	b.n	150c8 <bt_conn_lookup_addr_le+0x1c>
   150e4:	20001738 	.word	0x20001738

000150e8 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   150e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   150ea:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   150ec:	480e      	ldr	r0, [pc, #56]	; (15128 <bt_conn_lookup_state_le+0x40>)
{
   150ee:	460e      	mov	r6, r1
   150f0:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   150f2:	f009 fb1b 	bl	1e72c <bt_conn_ref>

		if (!conn) {
   150f6:	4604      	mov	r4, r0
   150f8:	b1a0      	cbz	r0, 15124 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   150fa:	7883      	ldrb	r3, [r0, #2]
   150fc:	2b01      	cmp	r3, #1
   150fe:	d003      	beq.n	15108 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   15100:	f009 fb2f 	bl	1e762 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   15104:	2400      	movs	r4, #0
			continue;
   15106:	e00d      	b.n	15124 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   15108:	b136      	cbz	r6, 15118 <bt_conn_lookup_state_le+0x30>
   1510a:	4632      	mov	r2, r6
   1510c:	4629      	mov	r1, r5
   1510e:	f009 fb6f 	bl	1e7f0 <bt_conn_is_peer_addr_le>
   15112:	b908      	cbnz	r0, 15118 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   15114:	4620      	mov	r0, r4
   15116:	e7f3      	b.n	15100 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   15118:	7aa3      	ldrb	r3, [r4, #10]
   1511a:	42bb      	cmp	r3, r7
   1511c:	d1fa      	bne.n	15114 <bt_conn_lookup_state_le+0x2c>
   1511e:	7a23      	ldrb	r3, [r4, #8]
   15120:	42ab      	cmp	r3, r5
   15122:	d1f7      	bne.n	15114 <bt_conn_lookup_state_le+0x2c>
}
   15124:	4620      	mov	r0, r4
   15126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15128:	20001738 	.word	0x20001738

0001512c <send_conn_le_param_update>:
{
   1512c:	b538      	push	{r3, r4, r5, lr}
   1512e:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   15130:	4608      	mov	r0, r1
{
   15132:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   15134:	f008 ff92 	bl	1e05c <bt_le_conn_params_valid>
   15138:	b318      	cbz	r0, 15182 <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1513a:	4b13      	ldr	r3, [pc, #76]	; (15188 <send_conn_le_param_update+0x5c>)
   1513c:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   15140:	0799      	lsls	r1, r3, #30
   15142:	d407      	bmi.n	15154 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   15144:	78e3      	ldrb	r3, [r4, #3]
   15146:	b183      	cbz	r3, 1516a <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   15148:	4629      	mov	r1, r5
   1514a:	4620      	mov	r0, r4
}
   1514c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   15150:	f000 b9a6 	b.w	154a0 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   15154:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   15158:	079a      	lsls	r2, r3, #30
   1515a:	d5f3      	bpl.n	15144 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1515c:	f3bf 8f5b 	dmb	ish
   15160:	6863      	ldr	r3, [r4, #4]
   15162:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   15166:	055b      	lsls	r3, r3, #21
   15168:	d4ec      	bmi.n	15144 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1516a:	4629      	mov	r1, r5
   1516c:	4620      	mov	r0, r4
   1516e:	f009 fb67 	bl	1e840 <bt_conn_le_conn_update>
		if (rc == 0) {
   15172:	b928      	cbnz	r0, 15180 <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
   15174:	88ab      	ldrh	r3, [r5, #4]
   15176:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   1517a:	88eb      	ldrh	r3, [r5, #6]
   1517c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   15180:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   15182:	f06f 0015 	mvn.w	r0, #21
   15186:	e7fb      	b.n	15180 <send_conn_le_param_update+0x54>
   15188:	200002b8 	.word	0x200002b8

0001518c <deferred_work>:
{
   1518c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   1518e:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   15192:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   15194:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   15198:	b993      	cbnz	r3, 151c0 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
   1519a:	4630      	mov	r0, r6
   1519c:	f009 fc20 	bl	1e9e0 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   151a0:	4b1f      	ldr	r3, [pc, #124]	; (15220 <deferred_work+0x94>)
   151a2:	681d      	ldr	r5, [r3, #0]
   151a4:	b925      	cbnz	r5, 151b0 <deferred_work+0x24>
		bt_conn_unref(conn);
   151a6:	4630      	mov	r0, r6
   151a8:	f009 fadb 	bl	1e762 <bt_conn_unref>
}
   151ac:	b002      	add	sp, #8
   151ae:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
   151b0:	686b      	ldr	r3, [r5, #4]
   151b2:	b11b      	cbz	r3, 151bc <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
   151b4:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   151b8:	4630      	mov	r0, r6
   151ba:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   151bc:	692d      	ldr	r5, [r5, #16]
   151be:	e7f1      	b.n	151a4 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   151c0:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   151c4:	2b01      	cmp	r3, #1
   151c6:	d1f1      	bne.n	151ac <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   151c8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   151cc:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
   151d0:	e855 3f00 	ldrex	r3, [r5]
   151d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   151d8:	e845 2100 	strex	r1, r2, [r5]
   151dc:	2900      	cmp	r1, #0
   151de:	d1f7      	bne.n	151d0 <deferred_work+0x44>
   151e0:	f3bf 8f5b 	dmb	ish
   151e4:	059b      	lsls	r3, r3, #22
   151e6:	d514      	bpl.n	15212 <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   151e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   151ea:	9300      	str	r3, [sp, #0]
   151ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
   151ee:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   151f0:	4669      	mov	r1, sp
   151f2:	4630      	mov	r0, r6
   151f4:	f7ff ff9a 	bl	1512c <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   151f8:	f3bf 8f5b 	dmb	ish
   151fc:	e855 3f00 	ldrex	r3, [r5]
   15200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   15204:	e845 3200 	strex	r2, r3, [r5]
   15208:	2a00      	cmp	r2, #0
   1520a:	d1f7      	bne.n	151fc <deferred_work+0x70>
   1520c:	f3bf 8f5b 	dmb	ish
   15210:	e7cc      	b.n	151ac <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
   15212:	4a04      	ldr	r2, [pc, #16]	; (15224 <deferred_work+0x98>)
   15214:	6810      	ldr	r0, [r2, #0]
   15216:	6851      	ldr	r1, [r2, #4]
   15218:	466b      	mov	r3, sp
   1521a:	c303      	stmia	r3!, {r0, r1}
   1521c:	e7e8      	b.n	151f0 <deferred_work+0x64>
   1521e:	bf00      	nop
   15220:	200023f8 	.word	0x200023f8
   15224:	00020f84 	.word	0x00020f84

00015228 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   15228:	b538      	push	{r3, r4, r5, lr}
   1522a:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   1522c:	4906      	ldr	r1, [pc, #24]	; (15248 <bt_conn_create_pdu_timeout+0x20>)
   1522e:	2800      	cmp	r0, #0
   15230:	bf08      	it	eq
   15232:	4608      	moveq	r0, r1
   15234:	f00a fca1 	bl	1fb7a <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   15238:	4604      	mov	r4, r0
   1523a:	b118      	cbz	r0, 15244 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
   1523c:	1d29      	adds	r1, r5, #4
   1523e:	3008      	adds	r0, #8
   15240:	f00a fcba 	bl	1fbb8 <net_buf_simple_reserve>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   15244:	4620      	mov	r0, r4
   15246:	bd38      	pop	{r3, r4, r5, pc}
   15248:	20000930 	.word	0x20000930

0001524c <bt_conn_create_frag_timeout>:
{
   1524c:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1524e:	4801      	ldr	r0, [pc, #4]	; (15254 <bt_conn_create_frag_timeout+0x8>)
   15250:	f7ff bfea 	b.w	15228 <bt_conn_create_pdu_timeout>
   15254:	20000980 	.word	0x20000980

00015258 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   15258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1525c:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   1525e:	f04f 33ff 	mov.w	r3, #4294967295
   15262:	f04f 32ff 	mov.w	r2, #4294967295
   15266:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   15268:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   1526a:	f7ff ffef 	bl	1524c <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   1526e:	7833      	ldrb	r3, [r6, #0]
   15270:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   15272:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   15274:	f04f 0600 	mov.w	r6, #0
   15278:	d005      	beq.n	15286 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   1527a:	f001 fc1b 	bl	16ab4 <net_buf_unref>
		return NULL;
   1527e:	4635      	mov	r5, r6
}
   15280:	4628      	mov	r0, r5
   15282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   15286:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   15288:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   1528c:	4e0c      	ldr	r6, [pc, #48]	; (152c0 <create_frag.isra.0+0x68>)
   1528e:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   15290:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   15294:	f00a fd03 	bl	1fc9e <net_buf_simple_tailroom>
   15298:	4580      	cmp	r8, r0
   1529a:	d20c      	bcs.n	152b6 <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   1529c:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   152a0:	f854 1f08 	ldr.w	r1, [r4, #8]!
   152a4:	4632      	mov	r2, r6
   152a6:	4638      	mov	r0, r7
   152a8:	f00a fcc3 	bl	1fc32 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   152ac:	4631      	mov	r1, r6
   152ae:	4620      	mov	r0, r4
   152b0:	f00a fcd9 	bl	1fc66 <net_buf_simple_pull>
   152b4:	e7e4      	b.n	15280 <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
   152b6:	4638      	mov	r0, r7
   152b8:	f00a fcf1 	bl	1fc9e <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   152bc:	b286      	uxth	r6, r0
   152be:	e7ef      	b.n	152a0 <create_frag.isra.0+0x48>
   152c0:	200002b8 	.word	0x200002b8

000152c4 <bt_conn_process_tx>:
{
   152c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   152c6:	7a83      	ldrb	r3, [r0, #10]
{
   152c8:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   152ca:	b993      	cbnz	r3, 152f2 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   152cc:	f3bf 8f5b 	dmb	ish
   152d0:	1d03      	adds	r3, r0, #4
   152d2:	e853 2f00 	ldrex	r2, [r3]
   152d6:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   152da:	e843 1400 	strex	r4, r1, [r3]
   152de:	2c00      	cmp	r4, #0
   152e0:	d1f7      	bne.n	152d2 <bt_conn_process_tx+0xe>
   152e2:	f3bf 8f5b 	dmb	ish
   152e6:	0653      	lsls	r3, r2, #25
   152e8:	d503      	bpl.n	152f2 <bt_conn_process_tx+0x2e>
}
   152ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   152ee:	f009 b9b8 	b.w	1e662 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   152f2:	2200      	movs	r2, #0
   152f4:	2300      	movs	r3, #0
   152f6:	f105 0038 	add.w	r0, r5, #56	; 0x38
   152fa:	f00a fc43 	bl	1fb84 <net_buf_get>
	BT_ASSERT(buf);
   152fe:	4604      	mov	r4, r0
   15300:	b960      	cbnz	r0, 1531c <bt_conn_process_tx+0x58>
   15302:	4a20      	ldr	r2, [pc, #128]	; (15384 <bt_conn_process_tx+0xc0>)
   15304:	4920      	ldr	r1, [pc, #128]	; (15388 <bt_conn_process_tx+0xc4>)
   15306:	4821      	ldr	r0, [pc, #132]	; (1538c <bt_conn_process_tx+0xc8>)
   15308:	f240 23c6 	movw	r3, #710	; 0x2c6
   1530c:	f007 fe70 	bl	1cff0 <printk>
   15310:	4040      	eors	r0, r0
   15312:	f380 8811 	msr	BASEPRI, r0
   15316:	f04f 0003 	mov.w	r0, #3
   1531a:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   1531c:	4f1c      	ldr	r7, [pc, #112]	; (15390 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   1531e:	89a1      	ldrh	r1, [r4, #12]
   15320:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
   15324:	4291      	cmp	r1, r2
   15326:	d807      	bhi.n	15338 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   15328:	2300      	movs	r3, #0
   1532a:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   1532c:	4621      	mov	r1, r4
   1532e:	4628      	mov	r0, r5
   15330:	f7ff fc48 	bl	14bc4 <send_frag>
	if (!send_buf(conn, buf)) {
   15334:	b140      	cbz	r0, 15348 <bt_conn_process_tx+0x84>
}
   15336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   15338:	f105 060a 	add.w	r6, r5, #10
   1533c:	4621      	mov	r1, r4
   1533e:	4630      	mov	r0, r6
   15340:	f7ff ff8a 	bl	15258 <create_frag.isra.0>
	if (!frag) {
   15344:	4601      	mov	r1, r0
   15346:	b920      	cbnz	r0, 15352 <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   15348:	4620      	mov	r0, r4
}
   1534a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   1534e:	f001 bbb1 	b.w	16ab4 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   15352:	2301      	movs	r3, #1
   15354:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   15356:	4628      	mov	r0, r5
   15358:	f7ff fc34 	bl	14bc4 <send_frag>
   1535c:	2800      	cmp	r0, #0
   1535e:	d0f3      	beq.n	15348 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   15360:	89a2      	ldrh	r2, [r4, #12]
   15362:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
   15366:	429a      	cmp	r2, r3
   15368:	d802      	bhi.n	15370 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   1536a:	2300      	movs	r3, #0
   1536c:	2203      	movs	r2, #3
   1536e:	e7dd      	b.n	1532c <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   15370:	4621      	mov	r1, r4
   15372:	4630      	mov	r0, r6
   15374:	f7ff ff70 	bl	15258 <create_frag.isra.0>
		if (!frag) {
   15378:	4601      	mov	r1, r0
   1537a:	2800      	cmp	r0, #0
   1537c:	d0e4      	beq.n	15348 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1537e:	2301      	movs	r3, #1
   15380:	461a      	mov	r2, r3
   15382:	e7e8      	b.n	15356 <bt_conn_process_tx+0x92>
   15384:	00021ed7 	.word	0x00021ed7
   15388:	00021ea5 	.word	0x00021ea5
   1538c:	00021e31 	.word	0x00021e31
   15390:	200002b8 	.word	0x200002b8

00015394 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   15394:	b570      	push	{r4, r5, r6, lr}
   15396:	4d0b      	ldr	r5, [pc, #44]	; (153c4 <bt_conn_init+0x30>)
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   15398:	4e0b      	ldr	r6, [pc, #44]	; (153c8 <bt_conn_init+0x34>)
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1539a:	2400      	movs	r4, #0
		k_fifo_put(&free_tx, &conn_tx[i]);
   1539c:	4629      	mov	r1, r5
   1539e:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   153a0:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
   153a2:	f00a ff5d 	bl	20260 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   153a6:	2c14      	cmp	r4, #20
   153a8:	f105 0510 	add.w	r5, r5, #16
   153ac:	d1f6      	bne.n	1539c <bt_conn_init+0x8>
	}

	bt_att_init();
   153ae:	f009 fffd 	bl	1f3ac <bt_att_init>

	err = bt_smp_init();
   153b2:	f00a fbdf 	bl	1fb74 <bt_smp_init>
	if (err) {
   153b6:	4604      	mov	r4, r0
   153b8:	b908      	cbnz	r0, 153be <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   153ba:	f009 fbaf 	bl	1eb1c <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   153be:	4620      	mov	r0, r4
   153c0:	bd70      	pop	{r4, r5, r6, pc}
   153c2:	bf00      	nop
   153c4:	200023fc 	.word	0x200023fc
   153c8:	20000918 	.word	0x20000918

000153cc <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   153cc:	4b04      	ldr	r3, [pc, #16]	; (153e0 <l2cap_accept+0x14>)
   153ce:	6818      	ldr	r0, [r3, #0]
   153d0:	b918      	cbnz	r0, 153da <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   153d2:	4a04      	ldr	r2, [pc, #16]	; (153e4 <l2cap_accept+0x18>)
   153d4:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   153d6:	600b      	str	r3, [r1, #0]

		return 0;
   153d8:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   153da:	f06f 000b 	mvn.w	r0, #11
}
   153de:	4770      	bx	lr
   153e0:	200017f8 	.word	0x200017f8
   153e4:	00021530 	.word	0x00021530

000153e8 <bt_l2cap_connected>:
{
   153e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   153ec:	4e29      	ldr	r6, [pc, #164]	; (15494 <bt_l2cap_connected+0xac>)
   153ee:	4f2a      	ldr	r7, [pc, #168]	; (15498 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   153f0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1549c <bt_l2cap_connected+0xb4>
{
   153f4:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   153f6:	42be      	cmp	r6, r7
   153f8:	d302      	bcc.n	15400 <bt_l2cap_connected+0x18>
}
   153fa:	b003      	add	sp, #12
   153fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   15400:	6873      	ldr	r3, [r6, #4]
   15402:	a901      	add	r1, sp, #4
   15404:	4620      	mov	r0, r4
   15406:	4798      	blx	r3
   15408:	2800      	cmp	r0, #0
   1540a:	db3d      	blt.n	15488 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   1540c:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   1540e:	8833      	ldrh	r3, [r6, #0]
   15410:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   15414:	f8a5 307c 	strh.w	r3, [r5, #124]	; 0x7c
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   15418:	4641      	mov	r1, r8
   1541a:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1541e:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   15422:	f00b f80b 	bl	2043c <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15426:	f3bf 8f5b 	dmb	ish
   1542a:	f105 0368 	add.w	r3, r5, #104	; 0x68
   1542e:	2200      	movs	r2, #0
   15430:	e853 1f00 	ldrex	r1, [r3]
   15434:	e843 2000 	strex	r0, r2, [r3]
   15438:	2800      	cmp	r0, #0
   1543a:	d1f9      	bne.n	15430 <bt_l2cap_connected+0x48>
   1543c:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   15440:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   15442:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   15444:	f105 0308 	add.w	r3, r5, #8
   15448:	bb02      	cbnz	r2, 1548c <bt_l2cap_connected+0xa4>
	list->head = node;
   1544a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   1544e:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   15450:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   15452:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   15454:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   15458:	681b      	ldr	r3, [r3, #0]
   1545a:	b103      	cbz	r3, 1545e <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   1545c:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1545e:	9b01      	ldr	r3, [sp, #4]
   15460:	f3bf 8f5b 	dmb	ish
   15464:	3368      	adds	r3, #104	; 0x68
   15466:	e853 2f00 	ldrex	r2, [r3]
   1546a:	f042 0201 	orr.w	r2, r2, #1
   1546e:	e843 2100 	strex	r1, r2, [r3]
   15472:	2900      	cmp	r1, #0
   15474:	d1f7      	bne.n	15466 <bt_l2cap_connected+0x7e>
   15476:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1547a:	9801      	ldr	r0, [sp, #4]
   1547c:	6843      	ldr	r3, [r0, #4]
   1547e:	699b      	ldr	r3, [r3, #24]
   15480:	b113      	cbz	r3, 15488 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   15482:	f100 0168 	add.w	r1, r0, #104	; 0x68
   15486:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15488:	360c      	adds	r6, #12
   1548a:	e7b4      	b.n	153f6 <bt_l2cap_connected+0xe>
	parent->next = child;
   1548c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1548e:	6563      	str	r3, [r4, #84]	; 0x54
}
   15490:	e7dd      	b.n	1544e <bt_l2cap_connected+0x66>
   15492:	bf00      	nop
   15494:	00020e64 	.word	0x00020e64
   15498:	00020e88 	.word	0x00020e88
   1549c:	0001e9c9 	.word	0x0001e9c9

000154a0 <bt_l2cap_update_conn_param>:
{
   154a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   154a2:	4b17      	ldr	r3, [pc, #92]	; (15500 <bt_l2cap_update_conn_param+0x60>)
   154a4:	781a      	ldrb	r2, [r3, #0]
   154a6:	3201      	adds	r2, #1
	if (!ident) {
   154a8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   154ac:	bf08      	it	eq
   154ae:	2201      	moveq	r2, #1
   154b0:	701a      	strb	r2, [r3, #0]
{
   154b2:	4606      	mov	r6, r0
   154b4:	460d      	mov	r5, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   154b6:	2208      	movs	r2, #8
   154b8:	7819      	ldrb	r1, [r3, #0]
   154ba:	2012      	movs	r0, #18
   154bc:	f009 fa37 	bl	1e92e <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   154c0:	4604      	mov	r4, r0
   154c2:	b1d0      	cbz	r0, 154fa <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   154c4:	2108      	movs	r1, #8
   154c6:	4408      	add	r0, r1
   154c8:	f00a fbad 	bl	1fc26 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   154cc:	882b      	ldrh	r3, [r5, #0]
   154ce:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   154d0:	886b      	ldrh	r3, [r5, #2]
   154d2:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   154d4:	88ab      	ldrh	r3, [r5, #4]
   154d6:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   154d8:	88eb      	ldrh	r3, [r5, #6]
   154da:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   154dc:	2300      	movs	r3, #0
   154de:	9300      	str	r3, [sp, #0]
   154e0:	4622      	mov	r2, r4
   154e2:	2105      	movs	r1, #5
   154e4:	4630      	mov	r0, r6
   154e6:	f009 fa94 	bl	1ea12 <bt_l2cap_send_cb>
	if (err) {
   154ea:	4605      	mov	r5, r0
   154ec:	b110      	cbz	r0, 154f4 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   154ee:	4620      	mov	r0, r4
   154f0:	f001 fae0 	bl	16ab4 <net_buf_unref>
}
   154f4:	4628      	mov	r0, r5
   154f6:	b002      	add	sp, #8
   154f8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   154fa:	f06f 050b 	mvn.w	r5, #11
   154fe:	e7f9      	b.n	154f4 <bt_l2cap_update_conn_param+0x54>
   15500:	20003105 	.word	0x20003105

00015504 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   15504:	4b02      	ldr	r3, [pc, #8]	; (15510 <att_cfm_sent+0xc>)
   15506:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   1550a:	f009 bb35 	b.w	1eb78 <att_sent>
   1550e:	bf00      	nop
   15510:	0001f02b 	.word	0x0001f02b

00015514 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   15514:	4b02      	ldr	r3, [pc, #8]	; (15520 <att_rsp_sent+0xc>)
   15516:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   1551a:	f009 bb2d 	b.w	1eb78 <att_sent>
   1551e:	bf00      	nop
   15520:	0001f00f 	.word	0x0001f00f

00015524 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   15524:	4b02      	ldr	r3, [pc, #8]	; (15530 <att_req_sent+0xc>)
   15526:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   1552a:	f009 bb25 	b.w	1eb78 <att_sent>
   1552e:	bf00      	nop
   15530:	0001ef53 	.word	0x0001ef53

00015534 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   15534:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   15536:	3808      	subs	r0, #8
   15538:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1553a:	a901      	add	r1, sp, #4
   1553c:	4802      	ldr	r0, [pc, #8]	; (15548 <bt_att_released+0x14>)
   1553e:	f00a fdd1 	bl	200e4 <k_mem_slab_free>
}
   15542:	b003      	add	sp, #12
   15544:	f85d fb04 	ldr.w	pc, [sp], #4
   15548:	2000084c 	.word	0x2000084c

0001554c <read_group_cb>:
{
   1554c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   15550:	4606      	mov	r6, r0
   15552:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15554:	f04f 0800 	mov.w	r8, #0
   15558:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1555c:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1555e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15560:	f88d 8008 	strb.w	r8, [sp, #8]
   15564:	a902      	add	r1, sp, #8
{
   15566:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15568:	f8ad 300a 	strh.w	r3, [sp, #10]
   1556c:	f008 fbe6 	bl	1dd3c <bt_uuid_cmp>
   15570:	b1a0      	cbz	r0, 1559c <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15572:	f642 0301 	movw	r3, #10241	; 0x2801
   15576:	6830      	ldr	r0, [r6, #0]
   15578:	f88d 800c 	strb.w	r8, [sp, #12]
   1557c:	a903      	add	r1, sp, #12
   1557e:	f8ad 300e 	strh.w	r3, [sp, #14]
   15582:	f008 fbdb 	bl	1dd3c <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15586:	b148      	cbz	r0, 1559c <read_group_cb+0x50>
		if (data->group &&
   15588:	6923      	ldr	r3, [r4, #16]
   1558a:	b11b      	cbz	r3, 15594 <read_group_cb+0x48>
   1558c:	885a      	ldrh	r2, [r3, #2]
   1558e:	42aa      	cmp	r2, r5
   15590:	d200      	bcs.n	15594 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   15592:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   15594:	2001      	movs	r0, #1
}
   15596:	b004      	add	sp, #16
   15598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1559c:	6861      	ldr	r1, [r4, #4]
   1559e:	6830      	ldr	r0, [r6, #0]
   155a0:	f008 fbcc 	bl	1dd3c <bt_uuid_cmp>
   155a4:	b110      	cbz	r0, 155ac <read_group_cb+0x60>
		data->group = NULL;
   155a6:	2300      	movs	r3, #0
   155a8:	6123      	str	r3, [r4, #16]
   155aa:	e7f3      	b.n	15594 <read_group_cb+0x48>
	if (data->rsp->len &&
   155ac:	68e3      	ldr	r3, [r4, #12]
   155ae:	68a0      	ldr	r0, [r4, #8]
   155b0:	781a      	ldrb	r2, [r3, #0]
   155b2:	b13a      	cbz	r2, 155c4 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   155b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
   155b8:	8981      	ldrh	r1, [r0, #12]
   155ba:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   155bc:	4293      	cmp	r3, r2
   155be:	da01      	bge.n	155c4 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   155c0:	2000      	movs	r0, #0
   155c2:	e7e8      	b.n	15596 <read_group_cb+0x4a>
   155c4:	2104      	movs	r1, #4
   155c6:	3008      	adds	r0, #8
   155c8:	f00a fb2d 	bl	1fc26 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   155cc:	4b09      	ldr	r3, [pc, #36]	; (155f4 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   155ce:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   155d0:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   155d2:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   155d4:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   155d6:	4631      	mov	r1, r6
   155d8:	9300      	str	r3, [sp, #0]
   155da:	9401      	str	r4, [sp, #4]
   155dc:	2300      	movs	r3, #0
   155de:	4638      	mov	r0, r7
   155e0:	f009 fb1a 	bl	1ec18 <att_chan_read>
	if (read < 0) {
   155e4:	2800      	cmp	r0, #0
   155e6:	dbeb      	blt.n	155c0 <read_group_cb+0x74>
	if (!data->group) {
   155e8:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   155ea:	3800      	subs	r0, #0
   155ec:	bf18      	it	ne
   155ee:	2001      	movne	r0, #1
   155f0:	e7d1      	b.n	15596 <read_group_cb+0x4a>
   155f2:	bf00      	nop
   155f4:	0001eecd 	.word	0x0001eecd

000155f8 <read_type_cb>:
{
   155f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   155fc:	f8d2 8000 	ldr.w	r8, [r2]
{
   15600:	4606      	mov	r6, r0
   15602:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   15604:	6800      	ldr	r0, [r0, #0]
   15606:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   15608:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   1560c:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1560e:	f008 fb95 	bl	1dd3c <bt_uuid_cmp>
   15612:	4607      	mov	r7, r0
   15614:	2800      	cmp	r0, #0
   15616:	d13e      	bne.n	15696 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   15618:	4628      	mov	r0, r5
   1561a:	2215      	movs	r2, #21
   1561c:	4631      	mov	r1, r6
   1561e:	f00a f9f8 	bl	1fa12 <bt_gatt_check_perm>
   15622:	4605      	mov	r5, r0
   15624:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   15626:	b148      	cbz	r0, 1563c <read_type_cb+0x44>
		if (data->rsp->len) {
   15628:	68e3      	ldr	r3, [r4, #12]
   1562a:	781b      	ldrb	r3, [r3, #0]
   1562c:	b923      	cbnz	r3, 15638 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   1562e:	2500      	movs	r5, #0
}
   15630:	4628      	mov	r0, r5
   15632:	b003      	add	sp, #12
   15634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   15638:	7527      	strb	r7, [r4, #20]
   1563a:	e7f8      	b.n	1562e <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1563c:	68a0      	ldr	r0, [r4, #8]
   1563e:	f00a fad0 	bl	1fbe2 <net_buf_frag_last>
   15642:	2102      	movs	r1, #2
   15644:	3008      	adds	r0, #8
   15646:	f00a faee 	bl	1fc26 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1564a:	4b14      	ldr	r3, [pc, #80]	; (1569c <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1564c:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1564e:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   15650:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15654:	4631      	mov	r1, r6
   15656:	9300      	str	r3, [sp, #0]
   15658:	9401      	str	r4, [sp, #4]
   1565a:	462b      	mov	r3, r5
   1565c:	4640      	mov	r0, r8
   1565e:	f009 fadb 	bl	1ec18 <att_chan_read>
	if (read < 0) {
   15662:	2800      	cmp	r0, #0
   15664:	da07      	bge.n	15676 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   15666:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1566a:	bf26      	itte	cs
   1566c:	4240      	negcs	r0, r0
   1566e:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   15670:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   15672:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   15674:	e7dc      	b.n	15630 <read_type_cb+0x38>
	if (!data->item) {
   15676:	6923      	ldr	r3, [r4, #16]
   15678:	2b00      	cmp	r3, #0
   1567a:	d0d8      	beq.n	1562e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1567c:	68a0      	ldr	r0, [r4, #8]
   1567e:	f009 fa73 	bl	1eb68 <net_buf_frags_len>
   15682:	f8b8 5086 	ldrh.w	r5, [r8, #134]	; 0x86
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   15686:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   15688:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1568a:	7818      	ldrb	r0, [r3, #0]
   1568c:	4285      	cmp	r5, r0
   1568e:	bf94      	ite	ls
   15690:	2500      	movls	r5, #0
   15692:	2501      	movhi	r5, #1
   15694:	e7cc      	b.n	15630 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   15696:	2501      	movs	r5, #1
   15698:	e7ca      	b.n	15630 <read_type_cb+0x38>
   1569a:	bf00      	nop
   1569c:	0001eb85 	.word	0x0001eb85

000156a0 <chan_send>:
{
   156a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   156a4:	688b      	ldr	r3, [r1, #8]
   156a6:	781b      	ldrb	r3, [r3, #0]
   156a8:	2bd2      	cmp	r3, #210	; 0xd2
{
   156aa:	4606      	mov	r6, r0
   156ac:	460c      	mov	r4, r1
   156ae:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   156b0:	d10c      	bne.n	156cc <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
   156b2:	6803      	ldr	r3, [r0, #0]
   156b4:	6818      	ldr	r0, [r3, #0]
   156b6:	f00a fa5a 	bl	1fb6e <bt_smp_sign>
		if (err) {
   156ba:	4605      	mov	r5, r0
   156bc:	b130      	cbz	r0, 156cc <chan_send+0x2c>
			net_buf_unref(buf);
   156be:	4620      	mov	r0, r4
   156c0:	f001 f9f8 	bl	16ab4 <net_buf_unref>
}
   156c4:	4628      	mov	r0, r5
   156c6:	b003      	add	sp, #12
   156c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   156cc:	f104 0008 	add.w	r0, r4, #8
   156d0:	f00a fae1 	bl	1fc96 <net_buf_simple_headroom>
	state->len = buf->len;
   156d4:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   156d8:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   156da:	b957      	cbnz	r7, 156f2 <chan_send+0x52>
	switch (att_op_get_type(buf->data[0])) {
   156dc:	68a3      	ldr	r3, [r4, #8]
   156de:	7818      	ldrb	r0, [r3, #0]
   156e0:	f009 fa62 	bl	1eba8 <att_op_get_type>
   156e4:	3801      	subs	r0, #1
   156e6:	b2c0      	uxtb	r0, r0
   156e8:	2804      	cmp	r0, #4
   156ea:	bf9c      	itt	ls
   156ec:	4b13      	ldrls	r3, [pc, #76]	; (1573c <chan_send+0x9c>)
   156ee:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   156f2:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   156f4:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   156f8:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   156fa:	4b11      	ldr	r3, [pc, #68]	; (15740 <chan_send+0xa0>)
   156fc:	429f      	cmp	r7, r3
   156fe:	d018      	beq.n	15732 <chan_send+0x92>
	} else if (cb == chan_cfm_sent) {
   15700:	4b10      	ldr	r3, [pc, #64]	; (15744 <chan_send+0xa4>)
   15702:	429f      	cmp	r7, r3
   15704:	d017      	beq.n	15736 <chan_send+0x96>
		return att_sent;
   15706:	4910      	ldr	r1, [pc, #64]	; (15748 <chan_send+0xa8>)
   15708:	4b10      	ldr	r3, [pc, #64]	; (1574c <chan_send+0xac>)
   1570a:	4a11      	ldr	r2, [pc, #68]	; (15750 <chan_send+0xb0>)
   1570c:	428f      	cmp	r7, r1
   1570e:	bf18      	it	ne
   15710:	4613      	movne	r3, r2
			       &chan->chan.chan);
   15712:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15714:	9600      	str	r6, [sp, #0]
   15716:	4622      	mov	r2, r4
   15718:	2104      	movs	r1, #4
   1571a:	f009 f97a 	bl	1ea12 <bt_l2cap_send_cb>
	if (err) {
   1571e:	4605      	mov	r5, r0
   15720:	2800      	cmp	r0, #0
   15722:	d0cf      	beq.n	156c4 <chan_send+0x24>
	buf->data = buf->__buf + state->offset;
   15724:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   15726:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1572a:	fa10 f088 	uxtah	r0, r0, r8
   1572e:	60a0      	str	r0, [r4, #8]
}
   15730:	e7c8      	b.n	156c4 <chan_send+0x24>
		return att_rsp_sent;
   15732:	4b08      	ldr	r3, [pc, #32]	; (15754 <chan_send+0xb4>)
   15734:	e7ed      	b.n	15712 <chan_send+0x72>
		return att_cfm_sent;
   15736:	4b08      	ldr	r3, [pc, #32]	; (15758 <chan_send+0xb8>)
   15738:	e7eb      	b.n	15712 <chan_send+0x72>
   1573a:	bf00      	nop
   1573c:	00021550 	.word	0x00021550
   15740:	0001f00f 	.word	0x0001f00f
   15744:	0001f02b 	.word	0x0001f02b
   15748:	0001ef53 	.word	0x0001ef53
   1574c:	00015525 	.word	0x00015525
   15750:	0001eb79 	.word	0x0001eb79
   15754:	00015515 	.word	0x00015515
   15758:	00015505 	.word	0x00015505

0001575c <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   1575c:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   1575e:	4a07      	ldr	r2, [pc, #28]	; (1577c <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   15760:	4604      	mov	r4, r0
   15762:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   15764:	f7ff ff9c 	bl	156a0 <chan_send>
	if (err) {
   15768:	b130      	cbz	r0, 15778 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   1576a:	4629      	mov	r1, r5
   1576c:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   15770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   15774:	f00a ba24 	b.w	1fbc0 <net_buf_put>
}
   15778:	bd38      	pop	{r3, r4, r5, pc}
   1577a:	bf00      	nop
   1577c:	0001f00f 	.word	0x0001f00f

00015780 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   15780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   15782:	2300      	movs	r3, #0
{
   15784:	4607      	mov	r7, r0
   15786:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   15788:	481e      	ldr	r0, [pc, #120]	; (15804 <bt_att_accept+0x84>)
   1578a:	2200      	movs	r2, #0
   1578c:	4669      	mov	r1, sp
   1578e:	f003 f9c7 	bl	18b20 <k_mem_slab_alloc>
   15792:	4604      	mov	r4, r0
   15794:	b120      	cbz	r0, 157a0 <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   15796:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1579a:	4620      	mov	r0, r4
   1579c:	b003      	add	sp, #12
   1579e:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck3(memset, void *, int)
   157a0:	4601      	mov	r1, r0
   157a2:	222c      	movs	r2, #44	; 0x2c
   157a4:	9800      	ldr	r0, [sp, #0]
   157a6:	f00b f9a3 	bl	20af0 <memset>
	att->conn = conn;
   157aa:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   157ac:	4816      	ldr	r0, [pc, #88]	; (15808 <bt_att_accept+0x88>)
	list->tail = NULL;
   157ae:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   157b0:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
   157b4:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   157b8:	2200      	movs	r2, #0
   157ba:	2300      	movs	r3, #0
   157bc:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   157be:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   157c0:	f003 f9ae 	bl	18b20 <k_mem_slab_alloc>
   157c4:	4604      	mov	r4, r0
   157c6:	2800      	cmp	r0, #0
   157c8:	d1e5      	bne.n	15796 <bt_att_accept+0x16>
   157ca:	4601      	mov	r1, r0
   157cc:	f44f 72a4 	mov.w	r2, #328	; 0x148
   157d0:	9801      	ldr	r0, [sp, #4]
   157d2:	f00b f98d 	bl	20af0 <memset>
	chan->chan.chan.ops = &ops;
   157d6:	9801      	ldr	r0, [sp, #4]
   157d8:	4b0c      	ldr	r3, [pc, #48]	; (1580c <bt_att_accept+0x8c>)
   157da:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   157dc:	30f8      	adds	r0, #248	; 0xf8
   157de:	f00a fd33 	bl	20248 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   157e2:	9b01      	ldr	r3, [sp, #4]
   157e4:	f3bf 8f5b 	dmb	ish
   157e8:	33f0      	adds	r3, #240	; 0xf0
   157ea:	e853 2f00 	ldrex	r2, [r3]
   157ee:	e843 4100 	strex	r1, r4, [r3]
   157f2:	2900      	cmp	r1, #0
   157f4:	d1f9      	bne.n	157ea <bt_att_accept+0x6a>
   157f6:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   157fa:	9b01      	ldr	r3, [sp, #4]
   157fc:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   15800:	6033      	str	r3, [r6, #0]
	return 0;
   15802:	e7ca      	b.n	1579a <bt_att_accept+0x1a>
   15804:	20000830 	.word	0x20000830
   15808:	2000084c 	.word	0x2000084c
   1580c:	200005c4 	.word	0x200005c4

00015810 <bt_att_connected>:
{
   15810:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   15812:	4606      	mov	r6, r0
{
   15814:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   15816:	2104      	movs	r1, #4
   15818:	f856 0908 	ldr.w	r0, [r6], #-8
   1581c:	f009 f943 	bl	1eaa6 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   15820:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   15824:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   15826:	b91b      	cbnz	r3, 15830 <bt_att_connected+0x20>
   15828:	f105 000c 	add.w	r0, r5, #12
   1582c:	f00a fd0c 	bl	20248 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   15830:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	parent->next = child;
   15832:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
   15836:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   15838:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
   1583c:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   1583e:	b902      	cbnz	r2, 15842 <bt_att_connected+0x32>
	list->tail = node;
   15840:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15842:	f3bf 8f5b 	dmb	ish
   15846:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   1584a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   1584e:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15850:	bf58      	it	pl
   15852:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   15854:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15856:	bf5c      	itt	pl
   15858:	f8a4 307e 	strhpl.w	r3, [r4, #126]	; 0x7e
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1585c:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   15860:	f009 faf9 	bl	1ee56 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   15864:	f504 7084 	add.w	r0, r4, #264	; 0x108
   15868:	4902      	ldr	r1, [pc, #8]	; (15874 <bt_att_connected+0x64>)
}
   1586a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1586e:	f00a bde5 	b.w	2043c <k_work_init_delayable>
   15872:	bf00      	nop
   15874:	0001f3bb 	.word	0x0001f3bb

00015878 <att_write_cmd>:
{
   15878:	b5f0      	push	{r4, r5, r6, r7, lr}
   1587a:	4604      	mov	r4, r0
   1587c:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   1587e:	f101 0008 	add.w	r0, r1, #8
   15882:	460d      	mov	r5, r1
   15884:	f00a f9ff 	bl	1fc86 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15888:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1588a:	68af      	ldr	r7, [r5, #8]
   1588c:	89ad      	ldrh	r5, [r5, #12]
   1588e:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15890:	2100      	movs	r1, #0
   15892:	6818      	ldr	r0, [r3, #0]
   15894:	f00a f913 	bl	1fabe <bt_gatt_change_aware>
   15898:	b320      	cbz	r0, 158e4 <att_write_cmd+0x6c>
	if (!handle) {
   1589a:	b32e      	cbz	r6, 158e8 <att_write_cmd+0x70>
	(void)memset(&data, 0, sizeof(data));
   1589c:	2214      	movs	r2, #20
   1589e:	2100      	movs	r1, #0
   158a0:	a801      	add	r0, sp, #4
   158a2:	f00b f925 	bl	20af0 <memset>
	data.conn = chan->att->conn;
   158a6:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   158a8:	4a10      	ldr	r2, [pc, #64]	; (158ec <att_write_cmd+0x74>)
	data.conn = chan->att->conn;
   158aa:	681b      	ldr	r3, [r3, #0]
   158ac:	9300      	str	r3, [sp, #0]
	data.req = req;
   158ae:	2300      	movs	r3, #0
   158b0:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   158b4:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   158b8:	2301      	movs	r3, #1
   158ba:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   158be:	4631      	mov	r1, r6
   158c0:	466b      	mov	r3, sp
   158c2:	4630      	mov	r0, r6
	data.value = value;
   158c4:	9703      	str	r7, [sp, #12]
	data.len = len;
   158c6:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   158ca:	f009 f99a 	bl	1ec02 <bt_gatt_foreach_attr>
	if (data.err) {
   158ce:	f89d 3014 	ldrb.w	r3, [sp, #20]
   158d2:	b923      	cbnz	r3, 158de <att_write_cmd+0x66>
	if (data.buf) {
   158d4:	9901      	ldr	r1, [sp, #4]
   158d6:	b111      	cbz	r1, 158de <att_write_cmd+0x66>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   158d8:	4620      	mov	r0, r4
   158da:	f7ff ff3f 	bl	1575c <bt_att_chan_send_rsp.constprop.0>
   158de:	2000      	movs	r0, #0
}
   158e0:	b007      	add	sp, #28
   158e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   158e4:	2012      	movs	r0, #18
   158e6:	e7fb      	b.n	158e0 <att_write_cmd+0x68>
		return BT_ATT_ERR_INVALID_HANDLE;
   158e8:	2001      	movs	r0, #1
   158ea:	e7f9      	b.n	158e0 <att_write_cmd+0x68>
   158ec:	0001f113 	.word	0x0001f113

000158f0 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   158f0:	898b      	ldrh	r3, [r1, #12]
{
   158f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   158f6:	4604      	mov	r4, r0
   158f8:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   158fa:	2b00      	cmp	r3, #0
   158fc:	d05e      	beq.n	159bc <bt_att_recv+0xcc>
	return net_buf_simple_pull_mem(&buf->b, len);
   158fe:	2101      	movs	r1, #1
   15900:	f105 0008 	add.w	r0, r5, #8
   15904:	f00a f9b7 	bl	1fc76 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   15908:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1590c:	4607      	mov	r7, r0
   1590e:	2b00      	cmp	r3, #0
   15910:	d054      	beq.n	159bc <bt_att_recv+0xcc>
		if (hdr->code == handlers[i].op) {
   15912:	4a2e      	ldr	r2, [pc, #184]	; (159cc <bt_att_recv+0xdc>)
   15914:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   15916:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1591a:	2300      	movs	r3, #0
   1591c:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   1591e:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   15922:	4288      	cmp	r0, r1
   15924:	d11a      	bne.n	1595c <bt_att_recv+0x6c>
		if (handler->type == ATT_REQUEST &&
   15926:	00d9      	lsls	r1, r3, #3
   15928:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1592c:	f893 8002 	ldrb.w	r8, [r3, #2]
   15930:	f1b8 0f01 	cmp.w	r8, #1
   15934:	d020      	beq.n	15978 <bt_att_recv+0x88>
		} else if (handler->type == ATT_INDICATION &&
   15936:	f1b8 0f05 	cmp.w	r8, #5
   1593a:	d12d      	bne.n	15998 <bt_att_recv+0xa8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1593c:	f3bf 8f5b 	dmb	ish
   15940:	34e8      	adds	r4, #232	; 0xe8
   15942:	e854 2f00 	ldrex	r2, [r4]
   15946:	f042 0302 	orr.w	r3, r2, #2
   1594a:	e844 3000 	strex	r0, r3, [r4]
   1594e:	2800      	cmp	r0, #0
   15950:	d1f7      	bne.n	15942 <bt_att_recv+0x52>
   15952:	f3bf 8f5b 	dmb	ish
   15956:	f012 0f02 	tst.w	r2, #2
   1595a:	e01c      	b.n	15996 <bt_att_recv+0xa6>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1595c:	3301      	adds	r3, #1
   1595e:	2b0d      	cmp	r3, #13
   15960:	d1dd      	bne.n	1591e <bt_att_recv+0x2e>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   15962:	4608      	mov	r0, r1
   15964:	f009 f920 	bl	1eba8 <att_op_get_type>
   15968:	b340      	cbz	r0, 159bc <bt_att_recv+0xcc>
	if (!req) {
   1596a:	b339      	cbz	r1, 159bc <bt_att_recv+0xcc>
   1596c:	2306      	movs	r3, #6
   1596e:	2200      	movs	r2, #0
   15970:	4630      	mov	r0, r6
   15972:	f009 fc88 	bl	1f286 <send_err_rsp.part.0>
   15976:	e021      	b.n	159bc <bt_att_recv+0xcc>
   15978:	34e8      	adds	r4, #232	; 0xe8
   1597a:	f3bf 8f5b 	dmb	ish
   1597e:	e854 3f00 	ldrex	r3, [r4]
   15982:	f043 0201 	orr.w	r2, r3, #1
   15986:	e844 2000 	strex	r0, r2, [r4]
   1598a:	2800      	cmp	r0, #0
   1598c:	d1f7      	bne.n	1597e <bt_att_recv+0x8e>
   1598e:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   15992:	f013 0f01 	tst.w	r3, #1
   15996:	d111      	bne.n	159bc <bt_att_recv+0xcc>
	if (buf->len < handler->expect_len) {
   15998:	eb0c 0301 	add.w	r3, ip, r1
   1599c:	89a9      	ldrh	r1, [r5, #12]
   1599e:	785a      	ldrb	r2, [r3, #1]
   159a0:	4291      	cmp	r1, r2
   159a2:	d30e      	bcc.n	159c2 <bt_att_recv+0xd2>
		err = handler->func(att_chan, buf);
   159a4:	685b      	ldr	r3, [r3, #4]
   159a6:	4629      	mov	r1, r5
   159a8:	4630      	mov	r0, r6
   159aa:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   159ac:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   159b0:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   159b2:	d103      	bne.n	159bc <bt_att_recv+0xcc>
   159b4:	b110      	cbz	r0, 159bc <bt_att_recv+0xcc>
		send_err_rsp(att_chan, hdr->code, 0, err);
   159b6:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   159b8:	2900      	cmp	r1, #0
   159ba:	d1d8      	bne.n	1596e <bt_att_recv+0x7e>
}
   159bc:	2000      	movs	r0, #0
   159be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
   159c2:	f1b8 0f01 	cmp.w	r8, #1
   159c6:	d1f9      	bne.n	159bc <bt_att_recv+0xcc>
		err = BT_ATT_ERR_INVALID_PDU;
   159c8:	2304      	movs	r3, #4
   159ca:	e7f4      	b.n	159b6 <bt_att_recv+0xc6>
   159cc:	00021564 	.word	0x00021564

000159d0 <att_write_req>:
{
   159d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   159d4:	4604      	mov	r4, r0
   159d6:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   159d8:	f101 0008 	add.w	r0, r1, #8
   159dc:	460d      	mov	r5, r1
   159de:	f00a f952 	bl	1fc86 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   159e2:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   159e4:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   159e8:	89ad      	ldrh	r5, [r5, #12]
   159ea:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   159ec:	2101      	movs	r1, #1
   159ee:	6818      	ldr	r0, [r3, #0]
   159f0:	f00a f865 	bl	1fabe <bt_gatt_change_aware>
   159f4:	2800      	cmp	r0, #0
   159f6:	d03f      	beq.n	15a78 <att_write_req+0xa8>
	if (!handle) {
   159f8:	2e00      	cmp	r6, #0
   159fa:	d03f      	beq.n	15a7c <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
   159fc:	2218      	movs	r2, #24
   159fe:	2100      	movs	r1, #0
   15a00:	4668      	mov	r0, sp
   15a02:	f00b f875 	bl	20af0 <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   15a06:	2200      	movs	r2, #0
   15a08:	2113      	movs	r1, #19
   15a0a:	4620      	mov	r0, r4
   15a0c:	f009 fc16 	bl	1f23c <bt_att_chan_create_pdu>
   15a10:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   15a12:	b378      	cbz	r0, 15a74 <att_write_req+0xa4>
	data.conn = chan->att->conn;
   15a14:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15a16:	4a1a      	ldr	r2, [pc, #104]	; (15a80 <att_write_req+0xb0>)
	data.conn = chan->att->conn;
   15a18:	681b      	ldr	r3, [r3, #0]
   15a1a:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15a1c:	2301      	movs	r3, #1
   15a1e:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   15a22:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   15a26:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15a28:	466b      	mov	r3, sp
   15a2a:	4631      	mov	r1, r6
   15a2c:	4630      	mov	r0, r6
	data.len = len;
   15a2e:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   15a32:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   15a36:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   15a3a:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15a3e:	f009 f8e0 	bl	1ec02 <bt_gatt_foreach_attr>
	if (data.err) {
   15a42:	f89d 5014 	ldrb.w	r5, [sp, #20]
   15a46:	b175      	cbz	r5, 15a66 <att_write_req+0x96>
			net_buf_unref(data.buf);
   15a48:	9801      	ldr	r0, [sp, #4]
   15a4a:	f001 f833 	bl	16ab4 <net_buf_unref>
	if (!req) {
   15a4e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   15a52:	4632      	mov	r2, r6
   15a54:	4641      	mov	r1, r8
   15a56:	4620      	mov	r0, r4
   15a58:	f009 fc15 	bl	1f286 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   15a5c:	463d      	mov	r5, r7
}
   15a5e:	4628      	mov	r0, r5
   15a60:	b007      	add	sp, #28
   15a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   15a66:	9901      	ldr	r1, [sp, #4]
   15a68:	2900      	cmp	r1, #0
   15a6a:	d0f8      	beq.n	15a5e <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15a6c:	4620      	mov	r0, r4
   15a6e:	f7ff fe75 	bl	1575c <bt_att_chan_send_rsp.constprop.0>
   15a72:	e7f4      	b.n	15a5e <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   15a74:	250e      	movs	r5, #14
   15a76:	e7f2      	b.n	15a5e <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15a78:	2512      	movs	r5, #18
   15a7a:	e7f0      	b.n	15a5e <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   15a7c:	2501      	movs	r5, #1
   15a7e:	e7ee      	b.n	15a5e <att_write_req+0x8e>
   15a80:	0001f113 	.word	0x0001f113

00015a84 <att_read_group_req>:
{
   15a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   15a88:	7b0c      	ldrb	r4, [r1, #12]
   15a8a:	3c04      	subs	r4, #4
   15a8c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   15a8e:	2c02      	cmp	r4, #2
{
   15a90:	4605      	mov	r5, r0
   15a92:	b08c      	sub	sp, #48	; 0x30
   15a94:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   15a96:	d001      	beq.n	15a9c <att_read_group_req+0x18>
   15a98:	2c10      	cmp	r4, #16
   15a9a:	d16e      	bne.n	15b7a <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
   15a9c:	2104      	movs	r1, #4
   15a9e:	3008      	adds	r0, #8
   15aa0:	f00a f8e9 	bl	1fc76 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15aa4:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   15aa8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   15aaa:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15aac:	1d01      	adds	r1, r0, #4
   15aae:	4622      	mov	r2, r4
   15ab0:	4640      	mov	r0, r8
   15ab2:	f008 f96d 	bl	1dd90 <bt_uuid_create>
   15ab6:	2800      	cmp	r0, #0
   15ab8:	d061      	beq.n	15b7e <att_read_group_req+0xfa>
	if (!start || !end) {
   15aba:	2e00      	cmp	r6, #0
   15abc:	d03a      	beq.n	15b34 <att_read_group_req+0xb0>
   15abe:	2400      	movs	r4, #0
   15ac0:	2f00      	cmp	r7, #0
   15ac2:	d036      	beq.n	15b32 <att_read_group_req+0xae>
	if (start > end) {
   15ac4:	42be      	cmp	r6, r7
   15ac6:	d835      	bhi.n	15b34 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   15ac8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15acc:	a901      	add	r1, sp, #4
   15ace:	4640      	mov	r0, r8
   15ad0:	f88d 4004 	strb.w	r4, [sp, #4]
   15ad4:	f8ad 3006 	strh.w	r3, [sp, #6]
   15ad8:	f008 f930 	bl	1dd3c <bt_uuid_cmp>
   15adc:	2800      	cmp	r0, #0
   15ade:	d134      	bne.n	15b4a <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   15ae0:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   15ae2:	2214      	movs	r2, #20
   15ae4:	2100      	movs	r1, #0
   15ae6:	a807      	add	r0, sp, #28
   15ae8:	f00b f802 	bl	20af0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   15aec:	2201      	movs	r2, #1
   15aee:	2111      	movs	r1, #17
   15af0:	4620      	mov	r0, r4
   15af2:	f009 fbe5 	bl	1f2c0 <bt_att_create_pdu>
   15af6:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   15af8:	2800      	cmp	r0, #0
   15afa:	d040      	beq.n	15b7e <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   15afc:	2101      	movs	r1, #1
   15afe:	3008      	adds	r0, #8
	data.uuid = uuid;
   15b00:	e9cd 5807 	strd	r5, r8, [sp, #28]
   15b04:	f00a f88f 	bl	1fc26 <net_buf_simple_add>
	data.rsp->len = 0U;
   15b08:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   15b0c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15b0e:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   15b10:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15b14:	4a1b      	ldr	r2, [pc, #108]	; (15b84 <att_read_group_req+0x100>)
	data.group = NULL;
   15b16:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15b1a:	4639      	mov	r1, r7
   15b1c:	4630      	mov	r0, r6
   15b1e:	f009 f870 	bl	1ec02 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   15b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15b24:	781c      	ldrb	r4, [r3, #0]
   15b26:	bb1c      	cbnz	r4, 15b70 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   15b28:	9809      	ldr	r0, [sp, #36]	; 0x24
   15b2a:	f000 ffc3 	bl	16ab4 <net_buf_unref>
	if (!req) {
   15b2e:	230a      	movs	r3, #10
   15b30:	e018      	b.n	15b64 <att_read_group_req+0xe0>
			*err = 0U;
   15b32:	463e      	mov	r6, r7
	if (!req) {
   15b34:	2301      	movs	r3, #1
   15b36:	4632      	mov	r2, r6
   15b38:	2110      	movs	r1, #16
   15b3a:	4628      	mov	r0, r5
   15b3c:	f009 fba3 	bl	1f286 <send_err_rsp.part.0>
		return 0;
   15b40:	2400      	movs	r4, #0
}
   15b42:	4620      	mov	r0, r4
   15b44:	b00c      	add	sp, #48	; 0x30
   15b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   15b4a:	f642 0301 	movw	r3, #10241	; 0x2801
   15b4e:	a907      	add	r1, sp, #28
   15b50:	4640      	mov	r0, r8
   15b52:	f88d 401c 	strb.w	r4, [sp, #28]
   15b56:	f8ad 301e 	strh.w	r3, [sp, #30]
   15b5a:	f008 f8ef 	bl	1dd3c <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   15b5e:	2800      	cmp	r0, #0
   15b60:	d0be      	beq.n	15ae0 <att_read_group_req+0x5c>
	if (!req) {
   15b62:	2310      	movs	r3, #16
   15b64:	4632      	mov	r2, r6
   15b66:	2110      	movs	r1, #16
   15b68:	4628      	mov	r0, r5
   15b6a:	f009 fb8c 	bl	1f286 <send_err_rsp.part.0>
		return 0;
   15b6e:	e7e8      	b.n	15b42 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15b70:	9909      	ldr	r1, [sp, #36]	; 0x24
   15b72:	4628      	mov	r0, r5
   15b74:	f7ff fdf2 	bl	1575c <bt_att_chan_send_rsp.constprop.0>
	return 0;
   15b78:	e7e2      	b.n	15b40 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   15b7a:	2404      	movs	r4, #4
   15b7c:	e7e1      	b.n	15b42 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   15b7e:	240e      	movs	r4, #14
   15b80:	e7df      	b.n	15b42 <att_read_group_req+0xbe>
   15b82:	bf00      	nop
   15b84:	0001554d 	.word	0x0001554d

00015b88 <att_read_mult_req>:
{
   15b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   15b8c:	6886      	ldr	r6, [r0, #8]
{
   15b8e:	b085      	sub	sp, #20
   15b90:	4604      	mov	r4, r0
   15b92:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   15b94:	4630      	mov	r0, r6
   15b96:	2101      	movs	r1, #1
   15b98:	f009 ff91 	bl	1fabe <bt_gatt_change_aware>
   15b9c:	b3b8      	cbz	r0, 15c0e <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
   15b9e:	2210      	movs	r2, #16
   15ba0:	2100      	movs	r1, #0
   15ba2:	4668      	mov	r0, sp
   15ba4:	f00a ffa4 	bl	20af0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   15ba8:	2200      	movs	r2, #0
   15baa:	210f      	movs	r1, #15
   15bac:	4630      	mov	r0, r6
   15bae:	f009 fb87 	bl	1f2c0 <bt_att_create_pdu>
   15bb2:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15bb4:	b368      	cbz	r0, 15c12 <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15bb6:	f8df 9060 	ldr.w	r9, [pc, #96]	; 15c18 <att_read_mult_req+0x90>
	data.chan = chan;
   15bba:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   15bbc:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   15bc0:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   15bc4:	89ab      	ldrh	r3, [r5, #12]
   15bc6:	2b01      	cmp	r3, #1
   15bc8:	d804      	bhi.n	15bd4 <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15bca:	9902      	ldr	r1, [sp, #8]
   15bcc:	4620      	mov	r0, r4
   15bce:	f7ff fdc5 	bl	1575c <bt_att_chan_send_rsp.constprop.0>
   15bd2:	e018      	b.n	15c06 <att_read_mult_req+0x7e>
   15bd4:	4638      	mov	r0, r7
   15bd6:	f00a f856 	bl	1fc86 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15bda:	466b      	mov	r3, sp
   15bdc:	464a      	mov	r2, r9
   15bde:	4601      	mov	r1, r0
   15be0:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   15be2:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15be6:	f009 f80c 	bl	1ec02 <bt_gatt_foreach_attr>
		if (data.err) {
   15bea:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15bee:	2b00      	cmp	r3, #0
   15bf0:	d0e8      	beq.n	15bc4 <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
   15bf2:	9802      	ldr	r0, [sp, #8]
   15bf4:	f000 ff5e 	bl	16ab4 <net_buf_unref>
	if (!req) {
   15bf8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15bfc:	4632      	mov	r2, r6
   15bfe:	210e      	movs	r1, #14
   15c00:	4620      	mov	r0, r4
   15c02:	f009 fb40 	bl	1f286 <send_err_rsp.part.0>
	return 0;
   15c06:	2000      	movs	r0, #0
}
   15c08:	b005      	add	sp, #20
   15c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15c0e:	2012      	movs	r0, #18
   15c10:	e7fa      	b.n	15c08 <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
   15c12:	200e      	movs	r0, #14
   15c14:	e7f8      	b.n	15c08 <att_read_mult_req+0x80>
   15c16:	bf00      	nop
   15c18:	0001f1e9 	.word	0x0001f1e9

00015c1c <att_read_rsp>:
{
   15c1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   15c20:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   15c24:	4605      	mov	r5, r0
   15c26:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   15c28:	4640      	mov	r0, r8
   15c2a:	2101      	movs	r1, #1
{
   15c2c:	4614      	mov	r4, r2
   15c2e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   15c30:	f009 ff45 	bl	1fabe <bt_gatt_change_aware>
   15c34:	b388      	cbz	r0, 15c9a <att_read_rsp+0x7e>
	if (!handle) {
   15c36:	b396      	cbz	r6, 15c9e <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   15c38:	2210      	movs	r2, #16
   15c3a:	2100      	movs	r1, #0
   15c3c:	4668      	mov	r0, sp
   15c3e:	f00a ff57 	bl	20af0 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   15c42:	2200      	movs	r2, #0
   15c44:	4621      	mov	r1, r4
   15c46:	4640      	mov	r0, r8
   15c48:	f009 fb3a 	bl	1f2c0 <bt_att_create_pdu>
   15c4c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15c4e:	b340      	cbz	r0, 15ca2 <att_read_rsp+0x86>
	data.offset = offset;
   15c50:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   15c54:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15c58:	2301      	movs	r3, #1
   15c5a:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15c5e:	4a12      	ldr	r2, [pc, #72]	; (15ca8 <att_read_rsp+0x8c>)
	data.chan = chan;
   15c60:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15c62:	466b      	mov	r3, sp
   15c64:	4631      	mov	r1, r6
   15c66:	4630      	mov	r0, r6
   15c68:	f008 ffcb 	bl	1ec02 <bt_gatt_foreach_attr>
	if (data.err) {
   15c6c:	f89d 400c 	ldrb.w	r4, [sp, #12]
   15c70:	b174      	cbz	r4, 15c90 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   15c72:	9802      	ldr	r0, [sp, #8]
   15c74:	f000 ff1e 	bl	16ab4 <net_buf_unref>
	if (!req) {
   15c78:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15c7c:	4632      	mov	r2, r6
   15c7e:	4639      	mov	r1, r7
   15c80:	4628      	mov	r0, r5
   15c82:	f009 fb00 	bl	1f286 <send_err_rsp.part.0>
		return 0;
   15c86:	2400      	movs	r4, #0
}
   15c88:	4620      	mov	r0, r4
   15c8a:	b004      	add	sp, #16
   15c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15c90:	9902      	ldr	r1, [sp, #8]
   15c92:	4628      	mov	r0, r5
   15c94:	f7ff fd62 	bl	1575c <bt_att_chan_send_rsp.constprop.0>
	return 0;
   15c98:	e7f6      	b.n	15c88 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15c9a:	2412      	movs	r4, #18
   15c9c:	e7f4      	b.n	15c88 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   15c9e:	2401      	movs	r4, #1
   15ca0:	e7f2      	b.n	15c88 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   15ca2:	240e      	movs	r4, #14
   15ca4:	e7f0      	b.n	15c88 <att_read_rsp+0x6c>
   15ca6:	bf00      	nop
   15ca8:	0001f1e9 	.word	0x0001f1e9

00015cac <att_read_type_req>:
{
   15cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   15cb0:	7b0c      	ldrb	r4, [r1, #12]
   15cb2:	3c04      	subs	r4, #4
   15cb4:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   15cb6:	2c02      	cmp	r4, #2
{
   15cb8:	4605      	mov	r5, r0
   15cba:	b08c      	sub	sp, #48	; 0x30
   15cbc:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   15cbe:	d001      	beq.n	15cc4 <att_read_type_req+0x18>
   15cc0:	2c10      	cmp	r4, #16
   15cc2:	d14f      	bne.n	15d64 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   15cc4:	2104      	movs	r1, #4
   15cc6:	3008      	adds	r0, #8
   15cc8:	f009 ffd5 	bl	1fc76 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15ccc:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   15cd0:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   15cd2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15cd4:	1d01      	adds	r1, r0, #4
   15cd6:	4622      	mov	r2, r4
   15cd8:	4640      	mov	r0, r8
   15cda:	f008 f859 	bl	1dd90 <bt_uuid_create>
   15cde:	b188      	cbz	r0, 15d04 <att_read_type_req+0x58>
	if (!start || !end) {
   15ce0:	b19e      	cbz	r6, 15d0a <att_read_type_req+0x5e>
   15ce2:	b18f      	cbz	r7, 15d08 <att_read_type_req+0x5c>
	if (start > end) {
   15ce4:	42b7      	cmp	r7, r6
   15ce6:	d310      	bcc.n	15d0a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   15ce8:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   15cea:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   15cec:	2100      	movs	r1, #0
   15cee:	eb0d 0002 	add.w	r0, sp, r2
   15cf2:	f00a fefd 	bl	20af0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   15cf6:	2201      	movs	r2, #1
   15cf8:	2109      	movs	r1, #9
   15cfa:	4620      	mov	r0, r4
   15cfc:	f009 fae0 	bl	1f2c0 <bt_att_create_pdu>
   15d00:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   15d02:	b968      	cbnz	r0, 15d20 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   15d04:	240e      	movs	r4, #14
   15d06:	e007      	b.n	15d18 <att_read_type_req+0x6c>
			*err = 0U;
   15d08:	463e      	mov	r6, r7
	if (!req) {
   15d0a:	2301      	movs	r3, #1
   15d0c:	4632      	mov	r2, r6
   15d0e:	2108      	movs	r1, #8
   15d10:	4628      	mov	r0, r5
   15d12:	f009 fab8 	bl	1f286 <send_err_rsp.part.0>
		return 0;
   15d16:	2400      	movs	r4, #0
}
   15d18:	4620      	mov	r0, r4
   15d1a:	b00c      	add	sp, #48	; 0x30
   15d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   15d20:	2101      	movs	r1, #1
   15d22:	3008      	adds	r0, #8
	data.uuid = uuid;
   15d24:	e9cd 5806 	strd	r5, r8, [sp, #24]
   15d28:	f009 ff7d 	bl	1fc26 <net_buf_simple_add>
	data.rsp->len = 0U;
   15d2c:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   15d30:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   15d32:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   15d34:	4a0c      	ldr	r2, [pc, #48]	; (15d68 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   15d36:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   15d3a:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   15d3c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   15d40:	4630      	mov	r0, r6
   15d42:	ab06      	add	r3, sp, #24
   15d44:	f008 ff5d 	bl	1ec02 <bt_gatt_foreach_attr>
	if (data.err) {
   15d48:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   15d4c:	b12c      	cbz	r4, 15d5a <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   15d4e:	9808      	ldr	r0, [sp, #32]
   15d50:	f000 feb0 	bl	16ab4 <net_buf_unref>
	if (!req) {
   15d54:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   15d58:	e7d8      	b.n	15d0c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15d5a:	9908      	ldr	r1, [sp, #32]
   15d5c:	4628      	mov	r0, r5
   15d5e:	f7ff fcfd 	bl	1575c <bt_att_chan_send_rsp.constprop.0>
	return 0;
   15d62:	e7d9      	b.n	15d18 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   15d64:	2404      	movs	r4, #4
   15d66:	e7d7      	b.n	15d18 <att_read_type_req+0x6c>
   15d68:	000155f9 	.word	0x000155f9

00015d6c <att_find_type_req>:
{
   15d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15d70:	4688      	mov	r8, r1
   15d72:	b086      	sub	sp, #24
   15d74:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   15d76:	2106      	movs	r1, #6
   15d78:	f108 0008 	add.w	r0, r8, #8
   15d7c:	f009 ff7b 	bl	1fc76 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   15d80:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   15d82:	b317      	cbz	r7, 15dca <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   15d84:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   15d88:	f1b9 0f00 	cmp.w	r9, #0
   15d8c:	d01c      	beq.n	15dc8 <att_find_type_req+0x5c>
	if (start > end) {
   15d8e:	454f      	cmp	r7, r9
   15d90:	d81b      	bhi.n	15dca <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   15d92:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   15d94:	f8ad 3002 	strh.w	r3, [sp, #2]
   15d98:	2400      	movs	r4, #0
   15d9a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15d9e:	a901      	add	r1, sp, #4
   15da0:	4668      	mov	r0, sp
	value = buf->data;
   15da2:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   15da6:	f88d 4000 	strb.w	r4, [sp]
   15daa:	f88d 4004 	strb.w	r4, [sp, #4]
   15dae:	f8ad 3006 	strh.w	r3, [sp, #6]
   15db2:	f007 ffc3 	bl	1dd3c <bt_uuid_cmp>
   15db6:	4606      	mov	r6, r0
   15db8:	b190      	cbz	r0, 15de0 <att_find_type_req+0x74>
	if (!req) {
   15dba:	230a      	movs	r3, #10
   15dbc:	463a      	mov	r2, r7
   15dbe:	2106      	movs	r1, #6
   15dc0:	4628      	mov	r0, r5
   15dc2:	f009 fa60 	bl	1f286 <send_err_rsp.part.0>
		return 0;
   15dc6:	e007      	b.n	15dd8 <att_find_type_req+0x6c>
			*err = 0U;
   15dc8:	464f      	mov	r7, r9
	if (!req) {
   15dca:	2301      	movs	r3, #1
   15dcc:	463a      	mov	r2, r7
   15dce:	2106      	movs	r1, #6
   15dd0:	4628      	mov	r0, r5
   15dd2:	f009 fa58 	bl	1f286 <send_err_rsp.part.0>
		return 0;
   15dd6:	2400      	movs	r4, #0
}
   15dd8:	4620      	mov	r0, r4
   15dda:	b006      	add	sp, #24
   15ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   15de0:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   15de4:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   15de8:	4601      	mov	r1, r0
   15dea:	2214      	movs	r2, #20
   15dec:	a801      	add	r0, sp, #4
   15dee:	f00a fe7f 	bl	20af0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   15df2:	4632      	mov	r2, r6
   15df4:	2107      	movs	r1, #7
   15df6:	4640      	mov	r0, r8
   15df8:	f009 fa62 	bl	1f2c0 <bt_att_create_pdu>
   15dfc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15dfe:	b1d8      	cbz	r0, 15e38 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   15e00:	230a      	movs	r3, #10
   15e02:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   15e06:	4a0d      	ldr	r2, [pc, #52]	; (15e3c <att_find_type_req+0xd0>)
	data.value_len = value_len;
   15e08:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   15e0c:	ab01      	add	r3, sp, #4
   15e0e:	4649      	mov	r1, r9
   15e10:	4638      	mov	r0, r7
	data.value = value;
   15e12:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   15e16:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   15e18:	f008 fef3 	bl	1ec02 <bt_gatt_foreach_attr>
	if (data.err) {
   15e1c:	f89d 4015 	ldrb.w	r4, [sp, #21]
   15e20:	b12c      	cbz	r4, 15e2e <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   15e22:	9802      	ldr	r0, [sp, #8]
   15e24:	f000 fe46 	bl	16ab4 <net_buf_unref>
	if (!req) {
   15e28:	f89d 3015 	ldrb.w	r3, [sp, #21]
   15e2c:	e7ce      	b.n	15dcc <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15e2e:	9902      	ldr	r1, [sp, #8]
   15e30:	4628      	mov	r0, r5
   15e32:	f7ff fc93 	bl	1575c <bt_att_chan_send_rsp.constprop.0>
	return 0;
   15e36:	e7cf      	b.n	15dd8 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   15e38:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   15e3a:	e7cd      	b.n	15dd8 <att_find_type_req+0x6c>
   15e3c:	0001ed2f 	.word	0x0001ed2f

00015e40 <att_find_info_req>:
{
   15e40:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   15e42:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   15e44:	881e      	ldrh	r6, [r3, #0]
{
   15e46:	b085      	sub	sp, #20
   15e48:	4605      	mov	r5, r0
	if (!start || !end) {
   15e4a:	b19e      	cbz	r6, 15e74 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   15e4c:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   15e4e:	b184      	cbz	r4, 15e72 <att_find_info_req+0x32>
	if (start > end) {
   15e50:	42b4      	cmp	r4, r6
   15e52:	d30f      	bcc.n	15e74 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   15e54:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   15e56:	2210      	movs	r2, #16
   15e58:	2100      	movs	r1, #0
   15e5a:	4668      	mov	r0, sp
   15e5c:	f00a fe48 	bl	20af0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   15e60:	2200      	movs	r2, #0
   15e62:	2105      	movs	r1, #5
   15e64:	4638      	mov	r0, r7
   15e66:	f009 fa2b 	bl	1f2c0 <bt_att_create_pdu>
   15e6a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   15e6c:	b958      	cbnz	r0, 15e86 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   15e6e:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   15e70:	e007      	b.n	15e82 <att_find_info_req+0x42>
			*err = 0U;
   15e72:	4626      	mov	r6, r4
	if (!req) {
   15e74:	2301      	movs	r3, #1
   15e76:	4632      	mov	r2, r6
   15e78:	2104      	movs	r1, #4
   15e7a:	4628      	mov	r0, r5
   15e7c:	f009 fa03 	bl	1f286 <send_err_rsp.part.0>
	return 0;
   15e80:	2000      	movs	r0, #0
}
   15e82:	b005      	add	sp, #20
   15e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   15e86:	4621      	mov	r1, r4
   15e88:	4a08      	ldr	r2, [pc, #32]	; (15eac <att_find_info_req+0x6c>)
	data.chan = chan;
   15e8a:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   15e8c:	466b      	mov	r3, sp
   15e8e:	4630      	mov	r0, r6
   15e90:	f008 feb7 	bl	1ec02 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   15e94:	9c02      	ldr	r4, [sp, #8]
   15e96:	b924      	cbnz	r4, 15ea2 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   15e98:	9801      	ldr	r0, [sp, #4]
   15e9a:	f000 fe0b 	bl	16ab4 <net_buf_unref>
	if (!req) {
   15e9e:	230a      	movs	r3, #10
   15ea0:	e7e9      	b.n	15e76 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15ea2:	9901      	ldr	r1, [sp, #4]
   15ea4:	4628      	mov	r0, r5
   15ea6:	f7ff fc59 	bl	1575c <bt_att_chan_send_rsp.constprop.0>
   15eaa:	e7e9      	b.n	15e80 <att_find_info_req+0x40>
   15eac:	0001ef69 	.word	0x0001ef69

00015eb0 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   15eb0:	b513      	push	{r0, r1, r4, lr}
   15eb2:	4602      	mov	r2, r0
   15eb4:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   15eb6:	4808      	ldr	r0, [pc, #32]	; (15ed8 <bt_att_req_alloc+0x28>)
   15eb8:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   15eba:	2400      	movs	r4, #0
   15ebc:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   15ebe:	f002 fe2f 	bl	18b20 <k_mem_slab_alloc>
   15ec2:	4601      	mov	r1, r0
   15ec4:	b930      	cbnz	r0, 15ed4 <bt_att_req_alloc+0x24>
   15ec6:	9801      	ldr	r0, [sp, #4]
   15ec8:	2210      	movs	r2, #16
   15eca:	f00a fe11 	bl	20af0 <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
   15ece:	9801      	ldr	r0, [sp, #4]
}
   15ed0:	b002      	add	sp, #8
   15ed2:	bd10      	pop	{r4, pc}
		return NULL;
   15ed4:	4620      	mov	r0, r4
   15ed6:	e7fb      	b.n	15ed0 <bt_att_req_alloc+0x20>
   15ed8:	20000868 	.word	0x20000868

00015edc <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   15edc:	b507      	push	{r0, r1, r2, lr}
   15ede:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   15ee0:	6880      	ldr	r0, [r0, #8]
   15ee2:	b120      	cbz	r0, 15eee <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   15ee4:	f000 fde6 	bl	16ab4 <net_buf_unref>
		req->buf = NULL;
   15ee8:	9b01      	ldr	r3, [sp, #4]
   15eea:	2200      	movs	r2, #0
   15eec:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   15eee:	4803      	ldr	r0, [pc, #12]	; (15efc <bt_att_req_free+0x20>)
   15ef0:	a901      	add	r1, sp, #4
   15ef2:	f00a f8f7 	bl	200e4 <k_mem_slab_free>
}
   15ef6:	b003      	add	sp, #12
   15ef8:	f85d fb04 	ldr.w	pc, [sp], #4
   15efc:	20000868 	.word	0x20000868

00015f00 <att_handle_rsp>:
{
   15f00:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   15f04:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   15f06:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   15f0a:	4688      	mov	r8, r1
   15f0c:	4691      	mov	r9, r2
   15f0e:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
   15f10:	f00a faa0 	bl	20454 <k_work_cancel_delayable>
	if (!chan->req) {
   15f14:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   15f18:	2600      	movs	r6, #0
   15f1a:	b1f0      	cbz	r0, 15f5a <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
   15f1c:	4b10      	ldr	r3, [pc, #64]	; (15f60 <att_handle_rsp+0x60>)
   15f1e:	4298      	cmp	r0, r3
   15f20:	d112      	bne.n	15f48 <att_handle_rsp+0x48>
		chan->req = NULL;
   15f22:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
   15f26:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
   15f28:	6820      	ldr	r0, [r4, #0]
   15f2a:	f009 f8c6 	bl	1f0ba <att_req_send_process>
	if (func) {
   15f2e:	b13d      	cbz	r5, 15f40 <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
   15f30:	6820      	ldr	r0, [r4, #0]
   15f32:	f8cd a000 	str.w	sl, [sp]
   15f36:	6800      	ldr	r0, [r0, #0]
   15f38:	464b      	mov	r3, r9
   15f3a:	4642      	mov	r2, r8
   15f3c:	4639      	mov	r1, r7
   15f3e:	47a8      	blx	r5
}
   15f40:	2000      	movs	r0, #0
   15f42:	b002      	add	sp, #8
   15f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
   15f48:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   15f4a:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
   15f4c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   15f50:	f7ff ffc4 	bl	15edc <bt_att_req_free>
	chan->req = NULL;
   15f54:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
   15f58:	e7e6      	b.n	15f28 <att_handle_rsp+0x28>
	bt_att_func_t func = NULL;
   15f5a:	4605      	mov	r5, r0
   15f5c:	e7e4      	b.n	15f28 <att_handle_rsp+0x28>
   15f5e:	bf00      	nop
   15f60:	2000253c 	.word	0x2000253c

00015f64 <bt_att_disconnected>:
{
   15f64:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   15f66:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   15f6a:	b085      	sub	sp, #20
   15f6c:	4604      	mov	r4, r0
	if (!att_chan->att) {
   15f6e:	b385      	cbz	r5, 15fd2 <bt_att_disconnected+0x6e>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   15f70:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   15f74:	f105 0024 	add.w	r0, r5, #36	; 0x24
   15f78:	f008 fddb 	bl	1eb32 <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   15f7c:	f1a4 0608 	sub.w	r6, r4, #8
   15f80:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   15f84:	2200      	movs	r2, #0
   15f86:	2300      	movs	r3, #0
   15f88:	4638      	mov	r0, r7
   15f8a:	f009 fdfb 	bl	1fb84 <net_buf_get>
   15f8e:	4602      	mov	r2, r0
   15f90:	bb08      	cbnz	r0, 15fd6 <bt_att_disconnected+0x72>
	if (chan->req) {
   15f92:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   15f96:	b123      	cbz	r3, 15fa2 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   15f98:	4601      	mov	r1, r0
   15f9a:	230e      	movs	r3, #14
   15f9c:	4630      	mov	r0, r6
   15f9e:	f7ff ffaf 	bl	15f00 <att_handle_rsp>
	chan->att = NULL;
   15fa2:	2300      	movs	r3, #0
   15fa4:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   15fa8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   15faa:	b993      	cbnz	r3, 15fd2 <bt_att_disconnected+0x6e>
	att_reset(att);
   15fac:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   15fae:	9803      	ldr	r0, [sp, #12]
   15fb0:	2200      	movs	r2, #0
   15fb2:	2300      	movs	r3, #0
   15fb4:	300c      	adds	r0, #12
   15fb6:	f009 fde5 	bl	1fb84 <net_buf_get>
   15fba:	b978      	cbnz	r0, 15fdc <bt_att_disconnected+0x78>
	att->conn = NULL;
   15fbc:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   15fbe:	6856      	ldr	r6, [r2, #4]
	att->conn = NULL;
   15fc0:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   15fc2:	b976      	cbnz	r6, 15fe2 <bt_att_disconnected+0x7e>
	k_mem_slab_free(&att_slab, (void **)&att);
   15fc4:	4813      	ldr	r0, [pc, #76]	; (16014 <bt_att_disconnected+0xb0>)
   15fc6:	a903      	add	r1, sp, #12
   15fc8:	f00a f88c 	bl	200e4 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   15fcc:	6820      	ldr	r0, [r4, #0]
   15fce:	f000 fc79 	bl	168c4 <bt_gatt_disconnected>
}
   15fd2:	b005      	add	sp, #20
   15fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   15fd6:	f000 fd6d 	bl	16ab4 <net_buf_unref>
   15fda:	e7d3      	b.n	15f84 <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   15fdc:	f000 fd6a 	bl	16ab4 <net_buf_unref>
   15fe0:	e7e5      	b.n	15fae <bt_att_disconnected+0x4a>
	return node->next;
   15fe2:	6835      	ldr	r5, [r6, #0]
   15fe4:	2d00      	cmp	r5, #0
   15fe6:	bf38      	it	cc
   15fe8:	2500      	movcc	r5, #0
		if (req->func) {
   15fea:	6877      	ldr	r7, [r6, #4]
   15fec:	b137      	cbz	r7, 15ffc <bt_att_disconnected+0x98>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   15fee:	68f3      	ldr	r3, [r6, #12]
   15ff0:	9300      	str	r3, [sp, #0]
   15ff2:	2300      	movs	r3, #0
   15ff4:	461a      	mov	r2, r3
   15ff6:	210e      	movs	r1, #14
   15ff8:	4618      	mov	r0, r3
   15ffa:	47b8      	blx	r7
		bt_att_req_free(req);
   15ffc:	4630      	mov	r0, r6
   15ffe:	f7ff ff6d 	bl	15edc <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   16002:	2d00      	cmp	r5, #0
   16004:	d0de      	beq.n	15fc4 <bt_att_disconnected+0x60>
   16006:	682b      	ldr	r3, [r5, #0]
   16008:	2b00      	cmp	r3, #0
   1600a:	bf38      	it	cc
   1600c:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1600e:	462e      	mov	r6, r5
   16010:	461d      	mov	r5, r3
   16012:	e7ea      	b.n	15fea <bt_att_disconnected+0x86>
   16014:	20000830 	.word	0x20000830

00016018 <read_ppcp>:
	     (CONFIG_BT_PERIPHERAL_PREF_MIN_INT <=
	     CONFIG_BT_PERIPHERAL_PREF_MAX_INT));

static ssize_t read_ppcp(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, uint16_t len, uint16_t offset)
{
   16018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1601a:	4610      	mov	r0, r2
		uint16_t timeout;
	} ppcp;

	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1601c:	4a07      	ldr	r2, [pc, #28]	; (1603c <read_ppcp+0x24>)
{
   1601e:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   16020:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
   16024:	e9cd 2302 	strd	r2, r3, [sp, #8]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   16028:	2308      	movs	r3, #8
   1602a:	9300      	str	r3, [sp, #0]
   1602c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   16030:	446b      	add	r3, sp
   16032:	f009 fada 	bl	1f5ea <bt_gatt_attr_read.constprop.0>
				 sizeof(ppcp));
}
   16036:	b005      	add	sp, #20
   16038:	f85d fb04 	ldr.w	pc, [sp], #4
   1603c:	00280018 	.word	0x00280018

00016040 <find_sc_cfg>:
	struct k_work_sync sync;
} db_hash;
#endif

static struct gatt_sc_cfg *find_sc_cfg(uint8_t id, bt_addr_le_t *addr)
{
   16040:	b510      	push	{r4, lr}
	BT_DBG("id: %u, addr: %s", id, bt_addr_le_str(addr));

	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
		if (id == sc_cfg[i].id &&
   16042:	4c06      	ldr	r4, [pc, #24]	; (1605c <find_sc_cfg+0x1c>)
   16044:	7823      	ldrb	r3, [r4, #0]
   16046:	4283      	cmp	r3, r0
   16048:	d104      	bne.n	16054 <find_sc_cfg+0x14>
   1604a:	2207      	movs	r2, #7
   1604c:	1c60      	adds	r0, r4, #1
   1604e:	f00a fd06 	bl	20a5e <memcmp>
   16052:	b108      	cbz	r0, 16058 <find_sc_cfg+0x18>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
			return &sc_cfg[i];
		}
	}

	return NULL;
   16054:	2000      	movs	r0, #0
}
   16056:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   16058:	4620      	mov	r0, r4
   1605a:	e7fc      	b.n	16056 <find_sc_cfg+0x16>
   1605c:	200030f0 	.word	0x200030f0

00016060 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   16060:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16062:	4d0d      	ldr	r5, [pc, #52]	; (16098 <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   16064:	4604      	mov	r4, r0
   16066:	b968      	cbnz	r0, 16084 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   16068:	9000      	str	r0, [sp, #0]
   1606a:	2207      	movs	r2, #7
   1606c:	f8cd 0003 	str.w	r0, [sp, #3]
   16070:	4669      	mov	r1, sp
   16072:	1c68      	adds	r0, r5, #1
   16074:	f00a fcf3 	bl	20a5e <memcmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16078:	2800      	cmp	r0, #0
   1607a:	bf08      	it	eq
   1607c:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
   1607e:	4620      	mov	r0, r4
   16080:	b003      	add	sp, #12
   16082:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16084:	462a      	mov	r2, r5
   16086:	f812 1b01 	ldrb.w	r1, [r2], #1
   1608a:	f008 fbb1 	bl	1e7f0 <bt_conn_is_peer_addr_le>
   1608e:	2800      	cmp	r0, #0
	return NULL;
   16090:	bf14      	ite	ne
   16092:	462c      	movne	r4, r5
   16094:	2400      	moveq	r4, #0
   16096:	e7f2      	b.n	1607e <find_cf_cfg+0x1e>
   16098:	20002554 	.word	0x20002554

0001609c <sc_indicate_rsp>:
}

#if defined(CONFIG_BT_GATT_SERVICE_CHANGED)
static void sc_indicate_rsp(struct bt_conn *conn,
			    struct bt_gatt_indicate_params *params, uint8_t err)
{
   1609c:	b510      	push	{r4, lr}
   1609e:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   160a0:	4814      	ldr	r0, [pc, #80]	; (160f4 <sc_indicate_rsp+0x58>)
   160a2:	f3bf 8f5b 	dmb	ish
   160a6:	f100 0350 	add.w	r3, r0, #80	; 0x50
   160aa:	e853 2f00 	ldrex	r2, [r3]
   160ae:	f022 0202 	bic.w	r2, r2, #2
   160b2:	e843 2100 	strex	r1, r2, [r3]
   160b6:	2900      	cmp	r1, #0
   160b8:	d1f7      	bne.n	160aa <sc_indicate_rsp+0xe>
   160ba:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   160be:	f3bf 8f5b 	dmb	ish
   160c2:	6d03      	ldr	r3, [r0, #80]	; 0x50
   160c4:	f3bf 8f5b 	dmb	ish
	BT_DBG("err 0x%02x", err);

	atomic_clear_bit(gatt_sc.flags, SC_INDICATE_PENDING);

	/* Check if there is new change in the meantime */
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   160c8:	07da      	lsls	r2, r3, #31
   160ca:	d504      	bpl.n	160d6 <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
   160cc:	2200      	movs	r2, #0
   160ce:	2300      	movs	r3, #0
   160d0:	3020      	adds	r0, #32
   160d2:	f003 f933 	bl	1933c <k_work_reschedule>
	/* BLUETOOTH CORE SPECIFICATION Version 5.1 | Vol 3, Part G page 2347:
	 * 2.5.2.1 Robust Caching
	 * A connected client becomes change-aware when...
	 * The client receives and confirms a Service Changed indication.
	 */
	cfg = find_cf_cfg(conn);
   160d6:	4620      	mov	r0, r4
   160d8:	f7ff ffc2 	bl	16060 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   160dc:	b140      	cbz	r0, 160f0 <sc_indicate_rsp+0x54>
   160de:	7a03      	ldrb	r3, [r0, #8]
   160e0:	07db      	lsls	r3, r3, #31
   160e2:	d505      	bpl.n	160f0 <sc_indicate_rsp+0x54>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
		BT_DBG("%s change-aware", bt_addr_le_str(&cfg->peer));
	}
#endif
}
   160e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   160e8:	2100      	movs	r1, #0
   160ea:	300c      	adds	r0, #12
   160ec:	f009 ba63 	b.w	1f5b6 <atomic_set_bit>
}
   160f0:	bd10      	pop	{r4, pc}
   160f2:	bf00      	nop
   160f4:	20001948 	.word	0x20001948

000160f8 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   160f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   160fc:	4b23      	ldr	r3, [pc, #140]	; (1618c <disconnected_cb+0x94>)
{
   160fe:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16100:	6882      	ldr	r2, [r0, #8]
   16102:	429a      	cmp	r2, r3
{
   16104:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16106:	d102      	bne.n	1610e <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   16108:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   1610a:	8963      	ldrh	r3, [r4, #10]
   1610c:	bb03      	cbnz	r3, 16150 <disconnected_cb+0x58>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   1610e:	2001      	movs	r0, #1
   16110:	b002      	add	sp, #8
   16112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   16116:	f105 0888 	add.w	r8, r5, #136	; 0x88
   1611a:	7a28      	ldrb	r0, [r5, #8]
   1611c:	4641      	mov	r1, r8
   1611e:	f008 f8ff 	bl	1e320 <bt_addr_le_is_bonded>
   16122:	b980      	cbnz	r0, 16146 <disconnected_cb+0x4e>
				if (ccc == &sc_ccc) {
   16124:	4b1a      	ldr	r3, [pc, #104]	; (16190 <disconnected_cb+0x98>)
   16126:	429c      	cmp	r4, r3
   16128:	d102      	bne.n	16130 <disconnected_cb+0x38>
					sc_clear(conn);
   1612a:	4628      	mov	r0, r5
   1612c:	f009 faef 	bl	1f70e <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   16130:	2200      	movs	r2, #0
   16132:	4669      	mov	r1, sp
   16134:	4630      	mov	r0, r6
   16136:	9200      	str	r2, [sp, #0]
   16138:	f8cd 2003 	str.w	r2, [sp, #3]
   1613c:	f009 fa49 	bl	1f5d2 <bt_addr_le_copy>
	cfg->id = 0U;
   16140:	7022      	strb	r2, [r4, #0]
	cfg->value = 0U;
   16142:	8122      	strh	r2, [r4, #8]
	if (!value_used) {
   16144:	e019      	b.n	1617a <disconnected_cb+0x82>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   16146:	4641      	mov	r1, r8
   16148:	4630      	mov	r0, r6
   1614a:	f009 fa42 	bl	1f5d2 <bt_addr_le_copy>
	if (!value_used) {
   1614e:	e014      	b.n	1617a <disconnected_cb+0x82>
		if (!cfg->value) {
   16150:	8923      	ldrh	r3, [r4, #8]
   16152:	b193      	cbz	r3, 1617a <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16154:	4626      	mov	r6, r4
   16156:	4628      	mov	r0, r5
   16158:	f816 1b01 	ldrb.w	r1, [r6], #1
   1615c:	4632      	mov	r2, r6
   1615e:	f008 fb47 	bl	1e7f0 <bt_conn_is_peer_addr_le>
   16162:	2800      	cmp	r0, #0
   16164:	d1d7      	bne.n	16116 <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   16166:	7820      	ldrb	r0, [r4, #0]
   16168:	4631      	mov	r1, r6
   1616a:	f7fe ff9f 	bl	150ac <bt_conn_lookup_addr_le>
			if (tmp) {
   1616e:	b120      	cbz	r0, 1617a <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
   16170:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
   16172:	f008 faf6 	bl	1e762 <bt_conn_unref>
	if (!value_used) {
   16176:	2d07      	cmp	r5, #7
   16178:	d0c9      	beq.n	1610e <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   1617a:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1617c:	2100      	movs	r1, #0
   1617e:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   16180:	2b00      	cmp	r3, #0
   16182:	d0c4      	beq.n	1610e <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   16184:	4638      	mov	r0, r7
   16186:	4798      	blx	r3
   16188:	e7c1      	b.n	1610e <disconnected_cb+0x16>
   1618a:	bf00      	nop
   1618c:	0001f85d 	.word	0x0001f85d
   16190:	20000614 	.word	0x20000614

00016194 <bt_gatt_init>:
{
   16194:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   16196:	4b20      	ldr	r3, [pc, #128]	; (16218 <bt_gatt_init+0x84>)
   16198:	f3bf 8f5b 	dmb	ish
   1619c:	2201      	movs	r2, #1
   1619e:	e853 1f00 	ldrex	r1, [r3]
   161a2:	2900      	cmp	r1, #0
   161a4:	d103      	bne.n	161ae <bt_gatt_init+0x1a>
   161a6:	e843 2000 	strex	r0, r2, [r3]
   161aa:	2800      	cmp	r0, #0
   161ac:	d1f7      	bne.n	1619e <bt_gatt_init+0xa>
   161ae:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   161b2:	d130      	bne.n	16216 <bt_gatt_init+0x82>
   161b4:	f3bf 8f5b 	dmb	ish
   161b8:	4b18      	ldr	r3, [pc, #96]	; (1621c <bt_gatt_init+0x88>)
   161ba:	e853 1f00 	ldrex	r1, [r3]
   161be:	2900      	cmp	r1, #0
   161c0:	d103      	bne.n	161ca <bt_gatt_init+0x36>
   161c2:	e843 2000 	strex	r0, r2, [r3]
   161c6:	2800      	cmp	r0, #0
   161c8:	d1f7      	bne.n	161ba <bt_gatt_init+0x26>
   161ca:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   161ce:	d108      	bne.n	161e2 <bt_gatt_init+0x4e>
   161d0:	4a13      	ldr	r2, [pc, #76]	; (16220 <bt_gatt_init+0x8c>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   161d2:	4914      	ldr	r1, [pc, #80]	; (16224 <bt_gatt_init+0x90>)
   161d4:	8813      	ldrh	r3, [r2, #0]
   161d6:	4c14      	ldr	r4, [pc, #80]	; (16228 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
   161d8:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   161da:	42a1      	cmp	r1, r4
   161dc:	d315      	bcc.n	1620a <bt_gatt_init+0x76>
   161de:	b100      	cbz	r0, 161e2 <bt_gatt_init+0x4e>
   161e0:	8013      	strh	r3, [r2, #0]
	list->head = NULL;
   161e2:	4b12      	ldr	r3, [pc, #72]	; (1622c <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   161e4:	4912      	ldr	r1, [pc, #72]	; (16230 <bt_gatt_init+0x9c>)
   161e6:	4813      	ldr	r0, [pc, #76]	; (16234 <bt_gatt_init+0xa0>)
   161e8:	2200      	movs	r2, #0
	list->tail = NULL;
   161ea:	e9c3 2200 	strd	r2, r2, [r3]
   161ee:	f00a f925 	bl	2043c <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   161f2:	4810      	ldr	r0, [pc, #64]	; (16234 <bt_gatt_init+0xa0>)
   161f4:	f44f 72a4 	mov.w	r2, #328	; 0x148
   161f8:	2300      	movs	r3, #0
   161fa:	f003 f86b 	bl	192d4 <k_work_schedule>
}
   161fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   16202:	490d      	ldr	r1, [pc, #52]	; (16238 <bt_gatt_init+0xa4>)
   16204:	480d      	ldr	r0, [pc, #52]	; (1623c <bt_gatt_init+0xa8>)
   16206:	f00a b919 	b.w	2043c <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   1620a:	6848      	ldr	r0, [r1, #4]
   1620c:	4403      	add	r3, r0
   1620e:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16210:	3108      	adds	r1, #8
   16212:	2001      	movs	r0, #1
   16214:	e7e1      	b.n	161da <bt_gatt_init+0x46>
}
   16216:	bd10      	pop	{r4, pc}
   16218:	20002564 	.word	0x20002564
   1621c:	20002580 	.word	0x20002580
   16220:	200030ee 	.word	0x200030ee
   16224:	00020e88 	.word	0x00020e88
   16228:	00020eb0 	.word	0x00020eb0
   1622c:	2000254c 	.word	0x2000254c
   16230:	0001fa0f 	.word	0x0001fa0f
   16234:	200018f0 	.word	0x200018f0
   16238:	0001654d 	.word	0x0001654d
   1623c:	20001968 	.word	0x20001968

00016240 <bt_gatt_attr_get_handle>:
{
   16240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   16244:	4603      	mov	r3, r0
   16246:	b148      	cbz	r0, 1625c <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   16248:	8a00      	ldrh	r0, [r0, #16]
   1624a:	b938      	cbnz	r0, 1625c <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1624c:	4912      	ldr	r1, [pc, #72]	; (16298 <bt_gatt_attr_get_handle+0x58>)
   1624e:	f8df e04c 	ldr.w	lr, [pc, #76]	; 1629c <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   16252:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   16254:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16258:	4571      	cmp	r1, lr
   1625a:	d301      	bcc.n	16260 <bt_gatt_attr_get_handle+0x20>
}
   1625c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
   16260:	e9d1 7600 	ldrd	r7, r6, [r1]
   16264:	42bb      	cmp	r3, r7
   16266:	d304      	bcc.n	16272 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   16268:	fb0c 7206 	mla	r2, ip, r6, r7
   1626c:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1626e:	4293      	cmp	r3, r2
   16270:	d90e      	bls.n	16290 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   16272:	19a2      	adds	r2, r4, r6
   16274:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16276:	3108      	adds	r1, #8
   16278:	4614      	mov	r4, r2
   1627a:	e7ed      	b.n	16258 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1627c:	fb0c 7805 	mla	r8, ip, r5, r7
   16280:	4543      	cmp	r3, r8
   16282:	d007      	beq.n	16294 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   16284:	3501      	adds	r5, #1
   16286:	1962      	adds	r2, r4, r5
   16288:	42b5      	cmp	r5, r6
   1628a:	b292      	uxth	r2, r2
   1628c:	d1f6      	bne.n	1627c <bt_gatt_attr_get_handle+0x3c>
   1628e:	e7f2      	b.n	16276 <bt_gatt_attr_get_handle+0x36>
   16290:	2500      	movs	r5, #0
   16292:	e7f8      	b.n	16286 <bt_gatt_attr_get_handle+0x46>
   16294:	4610      	mov	r0, r2
   16296:	e7e1      	b.n	1625c <bt_gatt_attr_get_handle+0x1c>
   16298:	00020e88 	.word	0x00020e88
   1629c:	00020eb0 	.word	0x00020eb0

000162a0 <bt_gatt_foreach_attr_type>:
{
   162a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162a4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   162a8:	9100      	str	r1, [sp, #0]
   162aa:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   162ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   162b0:	2d00      	cmp	r5, #0
   162b2:	bf08      	it	eq
   162b4:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   162b6:	4b24      	ldr	r3, [pc, #144]	; (16348 <bt_gatt_foreach_attr_type+0xa8>)
   162b8:	881b      	ldrh	r3, [r3, #0]
   162ba:	4283      	cmp	r3, r0
{
   162bc:	4607      	mov	r7, r0
   162be:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   162c0:	d23c      	bcs.n	1633c <bt_gatt_foreach_attr_type+0x9c>
}
   162c2:	b003      	add	sp, #12
   162c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   162c8:	6873      	ldr	r3, [r6, #4]
   162ca:	4423      	add	r3, r4
   162cc:	42bb      	cmp	r3, r7
   162ce:	d232      	bcs.n	16336 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   162d0:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   162d2:	3608      	adds	r6, #8
   162d4:	4b1d      	ldr	r3, [pc, #116]	; (1634c <bt_gatt_foreach_attr_type+0xac>)
   162d6:	429e      	cmp	r6, r3
   162d8:	d3f6      	bcc.n	162c8 <bt_gatt_foreach_attr_type+0x28>
   162da:	e7f2      	b.n	162c2 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   162dc:	5889      	ldr	r1, [r1, r2]
   162de:	9301      	str	r3, [sp, #4]
   162e0:	4640      	mov	r0, r8
   162e2:	f007 fd2b 	bl	1dd3c <bt_uuid_cmp>
   162e6:	9b01      	ldr	r3, [sp, #4]
   162e8:	b190      	cbz	r0, 16310 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   162ea:	3401      	adds	r4, #1
   162ec:	f10a 0a01 	add.w	sl, sl, #1
   162f0:	b2a4      	uxth	r4, r4
   162f2:	6873      	ldr	r3, [r6, #4]
   162f4:	4553      	cmp	r3, sl
   162f6:	d9ec      	bls.n	162d2 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   162f8:	9b00      	ldr	r3, [sp, #0]
   162fa:	429c      	cmp	r4, r3
   162fc:	d8e1      	bhi.n	162c2 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   162fe:	42bc      	cmp	r4, r7
   16300:	d3f3      	bcc.n	162ea <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16302:	6831      	ldr	r1, [r6, #0]
   16304:	fb0b f20a 	mul.w	r2, fp, sl
   16308:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1630a:	f1b8 0f00 	cmp.w	r8, #0
   1630e:	d1e5      	bne.n	162dc <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   16310:	f1b9 0f00 	cmp.w	r9, #0
   16314:	d10b      	bne.n	1632e <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   16316:	3d01      	subs	r5, #1
   16318:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1631a:	4618      	mov	r0, r3
   1631c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1631e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16320:	4621      	mov	r1, r4
   16322:	4798      	blx	r3
	if (!*num_matches) {
   16324:	2d00      	cmp	r5, #0
   16326:	d0cc      	beq.n	162c2 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16328:	2800      	cmp	r0, #0
   1632a:	d1de      	bne.n	162ea <bt_gatt_foreach_attr_type+0x4a>
   1632c:	e7c9      	b.n	162c2 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1632e:	68da      	ldr	r2, [r3, #12]
   16330:	4591      	cmp	r9, r2
   16332:	d1da      	bne.n	162ea <bt_gatt_foreach_attr_type+0x4a>
   16334:	e7ef      	b.n	16316 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   16336:	f04f 0a00 	mov.w	sl, #0
   1633a:	e7da      	b.n	162f2 <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1633c:	4e04      	ldr	r6, [pc, #16]	; (16350 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   1633e:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16340:	f04f 0b14 	mov.w	fp, #20
   16344:	e7c6      	b.n	162d4 <bt_gatt_foreach_attr_type+0x34>
   16346:	bf00      	nop
   16348:	200030ee 	.word	0x200030ee
   1634c:	00020eb0 	.word	0x00020eb0
   16350:	00020e88 	.word	0x00020e88

00016354 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
   16354:	b510      	push	{r4, lr}
   16356:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   16358:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1635a:	aa1c      	add	r2, sp, #112	; 0x70
   1635c:	4669      	mov	r1, sp
   1635e:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   16360:	e9cd 3300 	strd	r3, r3, [sp]
   16364:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   16368:	f007 fbe5 	bl	1db36 <tc_cmac_setup>
   1636c:	b320      	cbz	r0, 163b8 <db_hash_gen.isra.0+0x64>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1636e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16372:	2001      	movs	r0, #1
   16374:	4a11      	ldr	r2, [pc, #68]	; (163bc <db_hash_gen.isra.0+0x68>)
   16376:	ab04      	add	r3, sp, #16
   16378:	f009 fb3e 	bl	1f9f8 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1637c:	4810      	ldr	r0, [pc, #64]	; (163c0 <db_hash_gen.isra.0+0x6c>)
   1637e:	a904      	add	r1, sp, #16
   16380:	f007 fc70 	bl	1dc64 <tc_cmac_final>
   16384:	b1c0      	cbz	r0, 163b8 <db_hash_gen.isra.0+0x64>
   16386:	4b0e      	ldr	r3, [pc, #56]	; (163c0 <db_hash_gen.isra.0+0x6c>)
   16388:	2208      	movs	r2, #8
   1638a:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1638e:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   16390:	780c      	ldrb	r4, [r1, #0]
   16392:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   16396:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   16398:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   1639c:	d1f7      	bne.n	1638e <db_hash_gen.isra.0+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1639e:	f3bf 8f5b 	dmb	ish
   163a2:	4b08      	ldr	r3, [pc, #32]	; (163c4 <db_hash_gen.isra.0+0x70>)
   163a4:	e853 2f00 	ldrex	r2, [r3]
   163a8:	f042 0204 	orr.w	r2, r2, #4
   163ac:	e843 2100 	strex	r1, r2, [r3]
   163b0:	2900      	cmp	r1, #0
   163b2:	d1f7      	bne.n	163a4 <db_hash_gen.isra.0+0x50>
   163b4:	f3bf 8f5b 	dmb	ish
}
   163b8:	b048      	add	sp, #288	; 0x120
   163ba:	bd10      	pop	{r4, pc}
   163bc:	0001f50b 	.word	0x0001f50b
   163c0:	200018e0 	.word	0x200018e0
   163c4:	20001998 	.word	0x20001998

000163c8 <gatt_indicate>:
{
   163c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   163cc:	4615      	mov	r5, r2
   163ce:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   163d0:	2214      	movs	r2, #20
   163d2:	6869      	ldr	r1, [r5, #4]
{
   163d4:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   163d6:	f009 fb1c 	bl	1fa12 <bt_gatt_check_perm>
   163da:	2800      	cmp	r0, #0
   163dc:	d139      	bne.n	16452 <gatt_indicate+0x8a>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   163de:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   163e2:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   163e4:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   163e6:	f7ff fd63 	bl	15eb0 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   163ea:	3602      	adds	r6, #2
	if (!req) {
   163ec:	4604      	mov	r4, r0
   163ee:	b920      	cbnz	r0, 163fa <gatt_indicate+0x32>
		return -ENOMEM;
   163f0:	f06f 050b 	mvn.w	r5, #11
}
   163f4:	4628      	mov	r0, r5
   163f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
   163fa:	4b17      	ldr	r3, [pc, #92]	; (16458 <gatt_indicate+0x90>)
   163fc:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   163fe:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   16400:	4632      	mov	r2, r6
   16402:	211d      	movs	r1, #29
   16404:	4640      	mov	r0, r8
   16406:	f008 ff5b 	bl	1f2c0 <bt_att_create_pdu>
	if (!buf) {
   1640a:	4606      	mov	r6, r0
   1640c:	b918      	cbnz	r0, 16416 <gatt_indicate+0x4e>
		bt_att_req_free(req);
   1640e:	4620      	mov	r0, r4
   16410:	f7ff fd64 	bl	15edc <bt_att_req_free>
   16414:	e7ec      	b.n	163f0 <gatt_indicate+0x28>
	return net_buf_simple_add(&buf->b, len);
   16416:	f100 0a08 	add.w	sl, r0, #8
   1641a:	2102      	movs	r1, #2
   1641c:	4650      	mov	r0, sl
   1641e:	f009 fc02 	bl	1fc26 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   16422:	4607      	mov	r7, r0
   16424:	8aa9      	ldrh	r1, [r5, #20]
   16426:	f827 9b02 	strh.w	r9, [r7], #2
   1642a:	4650      	mov	r0, sl
   1642c:	f009 fbfb 	bl	1fc26 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16430:	8aaa      	ldrh	r2, [r5, #20]
   16432:	6929      	ldr	r1, [r5, #16]
   16434:	4638      	mov	r0, r7
   16436:	f00a fb20 	bl	20a7a <memcpy>
	req->buf = buf;
   1643a:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   1643c:	4621      	mov	r1, r4
   1643e:	4640      	mov	r0, r8
   16440:	f009 f80a 	bl	1f458 <bt_att_req_send>
	if (err) {
   16444:	4605      	mov	r5, r0
   16446:	2800      	cmp	r0, #0
   16448:	d0d4      	beq.n	163f4 <gatt_indicate+0x2c>
		bt_att_req_free(req);
   1644a:	4620      	mov	r0, r4
   1644c:	f7ff fd46 	bl	15edc <bt_att_req_free>
   16450:	e7d0      	b.n	163f4 <gatt_indicate+0x2c>
		return -EPERM;
   16452:	f04f 35ff 	mov.w	r5, #4294967295
   16456:	e7cd      	b.n	163f4 <gatt_indicate+0x2c>
   16458:	0001f497 	.word	0x0001f497

0001645c <bt_gatt_indicate>:
{
   1645c:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1645e:	4b38      	ldr	r3, [pc, #224]	; (16540 <bt_gatt_indicate+0xe4>)
   16460:	f3bf 8f5b 	dmb	ish
   16464:	681b      	ldr	r3, [r3, #0]
   16466:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1646a:	079a      	lsls	r2, r3, #30
{
   1646c:	b08b      	sub	sp, #44	; 0x2c
   1646e:	4604      	mov	r4, r0
   16470:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16472:	d55f      	bpl.n	16534 <bt_gatt_indicate+0xd8>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   16474:	b110      	cbz	r0, 1647c <bt_gatt_indicate+0x20>
   16476:	7a83      	ldrb	r3, [r0, #10]
   16478:	2b07      	cmp	r3, #7
   1647a:	d15e      	bne.n	1653a <bt_gatt_indicate+0xde>
	data.attr = params->attr;
   1647c:	6868      	ldr	r0, [r5, #4]
   1647e:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16480:	f7ff fede 	bl	16240 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   16484:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16486:	f8ad 0018 	strh.w	r0, [sp, #24]
   1648a:	4603      	mov	r3, r0
	if (params->uuid) {
   1648c:	b162      	cbz	r2, 164a8 <bt_gatt_indicate+0x4c>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1648e:	a905      	add	r1, sp, #20
   16490:	9102      	str	r1, [sp, #8]
   16492:	492c      	ldr	r1, [pc, #176]	; (16544 <bt_gatt_indicate+0xe8>)
   16494:	9101      	str	r1, [sp, #4]
   16496:	2101      	movs	r1, #1
	found->attr = NULL;
   16498:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1649a:	9100      	str	r1, [sp, #0]
   1649c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   164a0:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   164a2:	f7ff fefd 	bl	162a0 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   164a6:	9b05      	ldr	r3, [sp, #20]
   164a8:	b1bb      	cbz	r3, 164da <bt_gatt_indicate+0x7e>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   164aa:	9b05      	ldr	r3, [sp, #20]
   164ac:	6818      	ldr	r0, [r3, #0]
   164ae:	2300      	movs	r3, #0
   164b0:	f88d 3010 	strb.w	r3, [sp, #16]
   164b4:	a904      	add	r1, sp, #16
   164b6:	f642 0303 	movw	r3, #10243	; 0x2803
   164ba:	f8ad 3012 	strh.w	r3, [sp, #18]
   164be:	f007 fc3d 	bl	1dd3c <bt_uuid_cmp>
   164c2:	b170      	cbz	r0, 164e2 <bt_gatt_indicate+0x86>
	if (conn) {
   164c4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   164c8:	b1c4      	cbz	r4, 164fc <bt_gatt_indicate+0xa0>
		params->_ref = 1;
   164ca:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   164cc:	4601      	mov	r1, r0
		params->_ref = 1;
   164ce:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   164d0:	462a      	mov	r2, r5
   164d2:	4620      	mov	r0, r4
   164d4:	f7ff ff78 	bl	163c8 <gatt_indicate>
   164d8:	e001      	b.n	164de <bt_gatt_indicate+0x82>
			return -ENOENT;
   164da:	f06f 0001 	mvn.w	r0, #1
}
   164de:	b00b      	add	sp, #44	; 0x2c
   164e0:	bd30      	pop	{r4, r5, pc}
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   164e2:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   164e4:	68c3      	ldr	r3, [r0, #12]
   164e6:	799b      	ldrb	r3, [r3, #6]
   164e8:	069b      	lsls	r3, r3, #26
   164ea:	d402      	bmi.n	164f2 <bt_gatt_indicate+0x96>
			return -EINVAL;
   164ec:	f06f 0015 	mvn.w	r0, #21
   164f0:	e7f5      	b.n	164de <bt_gatt_indicate+0x82>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   164f2:	f009 fa3a 	bl	1f96a <bt_gatt_attr_value_handle>
   164f6:	f8ad 0018 	strh.w	r0, [sp, #24]
   164fa:	e7e3      	b.n	164c4 <bt_gatt_indicate+0x68>
	data.err = -ENOTCONN;
   164fc:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   16500:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   16502:	2302      	movs	r3, #2
   16504:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16508:	f642 1302 	movw	r3, #10498	; 0x2902
   1650c:	f8ad 3012 	strh.w	r3, [sp, #18]
   16510:	ab05      	add	r3, sp, #20
   16512:	9302      	str	r3, [sp, #8]
   16514:	4b0c      	ldr	r3, [pc, #48]	; (16548 <bt_gatt_indicate+0xec>)
   16516:	9301      	str	r3, [sp, #4]
   16518:	2301      	movs	r3, #1
   1651a:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   1651c:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1651e:	4623      	mov	r3, r4
   16520:	aa04      	add	r2, sp, #16
   16522:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   16526:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16528:	f88d 4010 	strb.w	r4, [sp, #16]
   1652c:	f7ff feb8 	bl	162a0 <bt_gatt_foreach_attr_type>
	return data.err;
   16530:	9807      	ldr	r0, [sp, #28]
   16532:	e7d4      	b.n	164de <bt_gatt_indicate+0x82>
		return -EAGAIN;
   16534:	f06f 000a 	mvn.w	r0, #10
   16538:	e7d1      	b.n	164de <bt_gatt_indicate+0x82>
		return -ENOTCONN;
   1653a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1653e:	e7ce      	b.n	164de <bt_gatt_indicate+0x82>
   16540:	20000384 	.word	0x20000384
   16544:	0001f4bd 	.word	0x0001f4bd
   16548:	0001669d 	.word	0x0001669d

0001654c <sc_process>:
{
   1654c:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1654e:	f850 2c08 	ldr.w	r2, [r0, #-8]
   16552:	9201      	str	r2, [sp, #4]
{
   16554:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   16556:	f1a0 0120 	sub.w	r1, r0, #32
   1655a:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1655e:	f3bf 8f5b 	dmb	ish
   16562:	e854 2f00 	ldrex	r2, [r4]
   16566:	f022 0201 	bic.w	r2, r2, #1
   1656a:	e844 2000 	strex	r0, r2, [r4]
   1656e:	2800      	cmp	r0, #0
   16570:	d1f7      	bne.n	16562 <sc_process+0x16>
   16572:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   16576:	4a0d      	ldr	r2, [pc, #52]	; (165ac <sc_process+0x60>)
   16578:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1657c:	4a0c      	ldr	r2, [pc, #48]	; (165b0 <sc_process+0x64>)
   1657e:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   16582:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   16584:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   16586:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1658a:	2204      	movs	r2, #4
	sc->start = 0U;
   1658c:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   16590:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   16594:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   16598:	f7ff ff60 	bl	1645c <bt_gatt_indicate>
   1659c:	b918      	cbnz	r0, 165a6 <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   1659e:	2101      	movs	r1, #1
   165a0:	4620      	mov	r0, r4
   165a2:	f009 f808 	bl	1f5b6 <atomic_set_bit>
}
   165a6:	b002      	add	sp, #8
   165a8:	bd10      	pop	{r4, pc}
   165aa:	bf00      	nop
   165ac:	000215f4 	.word	0x000215f4
   165b0:	0001609d 	.word	0x0001609d

000165b4 <bt_gatt_notify_cb>:
{
   165b4:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   165b6:	4b36      	ldr	r3, [pc, #216]	; (16690 <bt_gatt_notify_cb+0xdc>)
   165b8:	f3bf 8f5b 	dmb	ish
   165bc:	681b      	ldr	r3, [r3, #0]
   165be:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   165c2:	079a      	lsls	r2, r3, #30
{
   165c4:	b08b      	sub	sp, #44	; 0x2c
   165c6:	4604      	mov	r4, r0
   165c8:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   165ca:	d55b      	bpl.n	16684 <bt_gatt_notify_cb+0xd0>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   165cc:	b110      	cbz	r0, 165d4 <bt_gatt_notify_cb+0x20>
   165ce:	7a83      	ldrb	r3, [r0, #10]
   165d0:	2b07      	cmp	r3, #7
   165d2:	d15a      	bne.n	1668a <bt_gatt_notify_cb+0xd6>
	data.attr = params->attr;
   165d4:	6868      	ldr	r0, [r5, #4]
   165d6:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   165d8:	f7ff fe32 	bl	16240 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   165dc:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   165de:	f8ad 0018 	strh.w	r0, [sp, #24]
   165e2:	4603      	mov	r3, r0
	if (params->uuid) {
   165e4:	b162      	cbz	r2, 16600 <bt_gatt_notify_cb+0x4c>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   165e6:	a905      	add	r1, sp, #20
   165e8:	9102      	str	r1, [sp, #8]
   165ea:	492a      	ldr	r1, [pc, #168]	; (16694 <bt_gatt_notify_cb+0xe0>)
   165ec:	9101      	str	r1, [sp, #4]
   165ee:	2101      	movs	r1, #1
	found->attr = NULL;
   165f0:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   165f2:	9100      	str	r1, [sp, #0]
   165f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   165f8:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   165fa:	f7ff fe51 	bl	162a0 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   165fe:	9b05      	ldr	r3, [sp, #20]
   16600:	b1ab      	cbz	r3, 1662e <bt_gatt_notify_cb+0x7a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   16602:	9b05      	ldr	r3, [sp, #20]
   16604:	6818      	ldr	r0, [r3, #0]
   16606:	2300      	movs	r3, #0
   16608:	f88d 3010 	strb.w	r3, [sp, #16]
   1660c:	a904      	add	r1, sp, #16
   1660e:	f642 0303 	movw	r3, #10243	; 0x2803
   16612:	f8ad 3012 	strh.w	r3, [sp, #18]
   16616:	f007 fb91 	bl	1dd3c <bt_uuid_cmp>
   1661a:	b160      	cbz	r0, 16636 <bt_gatt_notify_cb+0x82>
	if (conn) {
   1661c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   16620:	b1b4      	cbz	r4, 16650 <bt_gatt_notify_cb+0x9c>
		return gatt_notify(conn, data.handle, params);
   16622:	4601      	mov	r1, r0
   16624:	462a      	mov	r2, r5
   16626:	4620      	mov	r0, r4
   16628:	f009 fa16 	bl	1fa58 <gatt_notify>
   1662c:	e001      	b.n	16632 <bt_gatt_notify_cb+0x7e>
			return -ENOENT;
   1662e:	f06f 0001 	mvn.w	r0, #1
}
   16632:	b00b      	add	sp, #44	; 0x2c
   16634:	bd30      	pop	{r4, r5, pc}
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   16636:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   16638:	68c3      	ldr	r3, [r0, #12]
   1663a:	799b      	ldrb	r3, [r3, #6]
   1663c:	06db      	lsls	r3, r3, #27
   1663e:	d402      	bmi.n	16646 <bt_gatt_notify_cb+0x92>
			return -EINVAL;
   16640:	f06f 0015 	mvn.w	r0, #21
   16644:	e7f5      	b.n	16632 <bt_gatt_notify_cb+0x7e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   16646:	f009 f990 	bl	1f96a <bt_gatt_attr_value_handle>
   1664a:	f8ad 0018 	strh.w	r0, [sp, #24]
   1664e:	e7e5      	b.n	1661c <bt_gatt_notify_cb+0x68>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16650:	f642 1202 	movw	r2, #10498	; 0x2902
   16654:	f8ad 2012 	strh.w	r2, [sp, #18]
   16658:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   1665a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1665e:	9202      	str	r2, [sp, #8]
   16660:	4a0d      	ldr	r2, [pc, #52]	; (16698 <bt_gatt_notify_cb+0xe4>)
	data.err = -ENOTCONN;
   16662:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   16664:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16666:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   1666a:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1666e:	aa04      	add	r2, sp, #16
   16670:	4623      	mov	r3, r4
   16672:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   16676:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16678:	f88d 4010 	strb.w	r4, [sp, #16]
   1667c:	f7ff fe10 	bl	162a0 <bt_gatt_foreach_attr_type>
	return data.err;
   16680:	9807      	ldr	r0, [sp, #28]
   16682:	e7d6      	b.n	16632 <bt_gatt_notify_cb+0x7e>
		return -EAGAIN;
   16684:	f06f 000a 	mvn.w	r0, #10
   16688:	e7d3      	b.n	16632 <bt_gatt_notify_cb+0x7e>
		return -ENOTCONN;
   1668a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1668e:	e7d0      	b.n	16632 <bt_gatt_notify_cb+0x7e>
   16690:	20000384 	.word	0x20000384
   16694:	0001f4bd 	.word	0x0001f4bd
   16698:	0001669d 	.word	0x0001669d

0001669c <notify_cb>:
{
   1669c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1669e:	4b32      	ldr	r3, [pc, #200]	; (16768 <notify_cb+0xcc>)
{
   166a0:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   166a2:	6882      	ldr	r2, [r0, #8]
   166a4:	429a      	cmp	r2, r3
{
   166a6:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   166a8:	d12e      	bne.n	16708 <notify_cb+0x6c>
	ccc = attr->user_data;
   166aa:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   166ac:	4b2f      	ldr	r3, [pc, #188]	; (1676c <notify_cb+0xd0>)
   166ae:	429f      	cmp	r7, r3
   166b0:	d11a      	bne.n	166e8 <notify_cb+0x4c>
   166b2:	4d2f      	ldr	r5, [pc, #188]	; (16770 <notify_cb+0xd4>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   166b4:	2300      	movs	r3, #0
   166b6:	2207      	movs	r2, #7
   166b8:	4669      	mov	r1, sp
   166ba:	1c68      	adds	r0, r5, #1
   166bc:	9300      	str	r3, [sp, #0]
   166be:	f8cd 3003 	str.w	r3, [sp, #3]
   166c2:	f00a f9cc 	bl	20a5e <memcmp>
   166c6:	b178      	cbz	r0, 166e8 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   166c8:	4629      	mov	r1, r5
   166ca:	2207      	movs	r2, #7
   166cc:	f811 0b01 	ldrb.w	r0, [r1], #1
   166d0:	f7fe fd0a 	bl	150e8 <bt_conn_lookup_state_le>
			if (!conn) {
   166d4:	b9e0      	cbnz	r0, 16710 <notify_cb+0x74>
				sc = (struct sc_data *)data->ind_params->data;
   166d6:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   166d8:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   166da:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   166dc:	f811 0b01 	ldrb.w	r0, [r1], #1
   166e0:	8853      	ldrh	r3, [r2, #2]
   166e2:	8812      	ldrh	r2, [r2, #0]
   166e4:	f008 ffec 	bl	1f6c0 <sc_save>
		if (cfg->value != data->type) {
   166e8:	893a      	ldrh	r2, [r7, #8]
   166ea:	89a3      	ldrh	r3, [r4, #12]
   166ec:	429a      	cmp	r2, r3
   166ee:	d10b      	bne.n	16708 <notify_cb+0x6c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   166f0:	4639      	mov	r1, r7
   166f2:	f811 0b01 	ldrb.w	r0, [r1], #1
   166f6:	f7fe fcd9 	bl	150ac <bt_conn_lookup_addr_le>
		if (!conn) {
   166fa:	4605      	mov	r5, r0
   166fc:	b120      	cbz	r0, 16708 <notify_cb+0x6c>
		if (conn->state != BT_CONN_CONNECTED) {
   166fe:	7a83      	ldrb	r3, [r0, #10]
   16700:	2b07      	cmp	r3, #7
   16702:	d008      	beq.n	16716 <notify_cb+0x7a>
			bt_conn_unref(conn);
   16704:	f008 f82d 	bl	1e762 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   16708:	2701      	movs	r7, #1
}
   1670a:	4638      	mov	r0, r7
   1670c:	b003      	add	sp, #12
   1670e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   16710:	f008 f827 	bl	1e762 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16714:	e7e8      	b.n	166e8 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   16716:	697b      	ldr	r3, [r7, #20]
   16718:	b123      	cbz	r3, 16724 <notify_cb+0x88>
   1671a:	4631      	mov	r1, r6
   1671c:	4798      	blx	r3
   1671e:	b908      	cbnz	r0, 16724 <notify_cb+0x88>
			bt_conn_unref(conn);
   16720:	4628      	mov	r0, r5
   16722:	e7ef      	b.n	16704 <notify_cb+0x68>
		if (bt_gatt_check_perm(conn, attr,
   16724:	2214      	movs	r2, #20
   16726:	4631      	mov	r1, r6
   16728:	4628      	mov	r0, r5
   1672a:	f009 f972 	bl	1fa12 <bt_gatt_check_perm>
   1672e:	4607      	mov	r7, r0
   16730:	2800      	cmp	r0, #0
   16732:	d1e9      	bne.n	16708 <notify_cb+0x6c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   16734:	89a3      	ldrh	r3, [r4, #12]
   16736:	88a1      	ldrh	r1, [r4, #4]
   16738:	6922      	ldr	r2, [r4, #16]
   1673a:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   1673c:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   1673e:	d10f      	bne.n	16760 <notify_cb+0xc4>
			err = gatt_indicate(conn, data->handle,
   16740:	f7ff fe42 	bl	163c8 <gatt_indicate>
			if (err == 0) {
   16744:	4606      	mov	r6, r0
   16746:	b918      	cbnz	r0, 16750 <notify_cb+0xb4>
				data->ind_params->_ref++;
   16748:	6922      	ldr	r2, [r4, #16]
   1674a:	7d93      	ldrb	r3, [r2, #22]
   1674c:	3301      	adds	r3, #1
   1674e:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   16750:	4628      	mov	r0, r5
   16752:	f008 f806 	bl	1e762 <bt_conn_unref>
		if (err < 0) {
   16756:	2e00      	cmp	r6, #0
   16758:	dbd7      	blt.n	1670a <notify_cb+0x6e>
		data->err = 0;
   1675a:	2300      	movs	r3, #0
   1675c:	60a3      	str	r3, [r4, #8]
   1675e:	e7d3      	b.n	16708 <notify_cb+0x6c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   16760:	f009 f97a 	bl	1fa58 <gatt_notify>
   16764:	4606      	mov	r6, r0
   16766:	e7f3      	b.n	16750 <notify_cb+0xb4>
   16768:	0001f85d 	.word	0x0001f85d
   1676c:	20000614 	.word	0x20000614
   16770:	200030f0 	.word	0x200030f0

00016774 <update_ccc>:
{
   16774:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16776:	4b26      	ldr	r3, [pc, #152]	; (16810 <update_ccc+0x9c>)
	struct bt_conn *conn = data->conn;
   16778:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1677a:	6882      	ldr	r2, [r0, #8]
   1677c:	429a      	cmp	r2, r3
{
   1677e:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16780:	d142      	bne.n	16808 <update_ccc+0x94>
	ccc = attr->user_data;
   16782:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   16784:	8933      	ldrh	r3, [r6, #8]
   16786:	2b00      	cmp	r3, #0
   16788:	d03e      	beq.n	16808 <update_ccc+0x94>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1678a:	4632      	mov	r2, r6
   1678c:	4628      	mov	r0, r5
   1678e:	f812 1b01 	ldrb.w	r1, [r2], #1
   16792:	f008 f82d 	bl	1e7f0 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   16796:	2800      	cmp	r0, #0
   16798:	d036      	beq.n	16808 <update_ccc+0x94>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1679a:	222a      	movs	r2, #42	; 0x2a
   1679c:	4621      	mov	r1, r4
   1679e:	4628      	mov	r0, r5
   167a0:	f009 f937 	bl	1fa12 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   167a4:	2803      	cmp	r0, #3
   167a6:	d02f      	beq.n	16808 <update_ccc+0x94>
		gatt_ccc_changed(attr, ccc);
   167a8:	4631      	mov	r1, r6
   167aa:	4620      	mov	r0, r4
   167ac:	f008 fe69 	bl	1f482 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   167b0:	4b18      	ldr	r3, [pc, #96]	; (16814 <update_ccc+0xa0>)
   167b2:	429e      	cmp	r6, r3
   167b4:	d128      	bne.n	16808 <update_ccc+0x94>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   167b6:	7a28      	ldrb	r0, [r5, #8]
   167b8:	f105 0188 	add.w	r1, r5, #136	; 0x88
   167bc:	f7ff fc40 	bl	16040 <find_sc_cfg>
	if (!cfg) {
   167c0:	4604      	mov	r4, r0
   167c2:	b308      	cbz	r0, 16808 <update_ccc+0x94>
	if (!(cfg->data.start || cfg->data.end)) {
   167c4:	8902      	ldrh	r2, [r0, #8]
   167c6:	8943      	ldrh	r3, [r0, #10]
   167c8:	ea53 0102 	orrs.w	r1, r3, r2
   167cc:	d01c      	beq.n	16808 <update_ccc+0x94>
	index = bt_conn_index(conn);
   167ce:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   167d0:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   167d4:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   167d8:	f7fe fbe0 	bl	14f9c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   167dc:	490e      	ldr	r1, [pc, #56]	; (16818 <update_ccc+0xa4>)
   167de:	4a0f      	ldr	r2, [pc, #60]	; (1681c <update_ccc+0xa8>)
   167e0:	2318      	movs	r3, #24
   167e2:	fb03 1300 	mla	r3, r3, r0, r1
   167e6:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   167e8:	4a0d      	ldr	r2, [pc, #52]	; (16820 <update_ccc+0xac>)
   167ea:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   167ec:	aa01      	add	r2, sp, #4
   167ee:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   167f0:	2204      	movs	r2, #4
   167f2:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   167f4:	b203      	sxth	r3, r0
   167f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   167fa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   167fe:	4628      	mov	r0, r5
   16800:	f7ff fe2c 	bl	1645c <bt_gatt_indicate>
__ssp_bos_icheck3(memset, void *, int)
   16804:	2300      	movs	r3, #0
   16806:	60a3      	str	r3, [r4, #8]
}
   16808:	2001      	movs	r0, #1
   1680a:	b002      	add	sp, #8
   1680c:	bd70      	pop	{r4, r5, r6, pc}
   1680e:	bf00      	nop
   16810:	0001f85d 	.word	0x0001f85d
   16814:	20000614 	.word	0x20000614
   16818:	20002568 	.word	0x20002568
   1681c:	000215f4 	.word	0x000215f4
   16820:	0001f751 	.word	0x0001f751

00016824 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   16824:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16826:	4a06      	ldr	r2, [pc, #24]	; (16840 <bt_gatt_connected+0x1c>)
	data.conn = conn;
   16828:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1682a:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1682c:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1682e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   16832:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16836:	f009 f8df 	bl	1f9f8 <bt_gatt_foreach_attr>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1683a:	b003      	add	sp, #12
   1683c:	f85d fb04 	ldr.w	pc, [sp], #4
   16840:	00016775 	.word	0x00016775

00016844 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   16844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16846:	4b09      	ldr	r3, [pc, #36]	; (1686c <bt_gatt_att_max_mtu_changed+0x28>)
   16848:	681c      	ldr	r4, [r3, #0]
{
   1684a:	4605      	mov	r5, r0
   1684c:	460e      	mov	r6, r1
   1684e:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16850:	b10c      	cbz	r4, 16856 <bt_gatt_att_max_mtu_changed+0x12>
   16852:	3c04      	subs	r4, #4
   16854:	b904      	cbnz	r4, 16858 <bt_gatt_att_max_mtu_changed+0x14>
		if (cb->att_mtu_updated) {
			cb->att_mtu_updated(conn, tx, rx);
		}
	}
}
   16856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->att_mtu_updated) {
   16858:	6823      	ldr	r3, [r4, #0]
   1685a:	b11b      	cbz	r3, 16864 <bt_gatt_att_max_mtu_changed+0x20>
			cb->att_mtu_updated(conn, tx, rx);
   1685c:	463a      	mov	r2, r7
   1685e:	4631      	mov	r1, r6
   16860:	4628      	mov	r0, r5
   16862:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   16864:	1d23      	adds	r3, r4, #4
   16866:	d0f6      	beq.n	16856 <bt_gatt_att_max_mtu_changed+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16868:	6864      	ldr	r4, [r4, #4]
   1686a:	e7f1      	b.n	16850 <bt_gatt_att_max_mtu_changed+0xc>
   1686c:	2000254c 	.word	0x2000254c

00016870 <db_hash_read>:
{
   16870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16874:	4910      	ldr	r1, [pc, #64]	; (168b8 <db_hash_read+0x48>)
{
   16876:	f8bd 7018 	ldrh.w	r7, [sp, #24]
   1687a:	4606      	mov	r6, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1687c:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   16880:	461d      	mov	r5, r3
   16882:	4614      	mov	r4, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16884:	f009 fdfa 	bl	2047c <k_work_cancel_delayable_sync>
   16888:	f3bf 8f5b 	dmb	ish
   1688c:	4b0b      	ldr	r3, [pc, #44]	; (168bc <db_hash_read+0x4c>)
   1688e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   16890:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   16894:	075b      	lsls	r3, r3, #29
   16896:	d401      	bmi.n	1689c <db_hash_read+0x2c>
		db_hash_gen(true);
   16898:	f7ff fd5c 	bl	16354 <db_hash_gen.isra.0>
	bt_gatt_change_aware(conn, true);
   1689c:	2101      	movs	r1, #1
   1689e:	4630      	mov	r0, r6
   168a0:	f009 f90d 	bl	1fabe <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   168a4:	2310      	movs	r3, #16
   168a6:	9306      	str	r3, [sp, #24]
   168a8:	463a      	mov	r2, r7
   168aa:	4629      	mov	r1, r5
   168ac:	4620      	mov	r0, r4
   168ae:	4b04      	ldr	r3, [pc, #16]	; (168c0 <db_hash_read+0x50>)
}
   168b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   168b4:	f008 be99 	b.w	1f5ea <bt_gatt_attr_read.constprop.0>
   168b8:	20001920 	.word	0x20001920
   168bc:	20001948 	.word	0x20001948
   168c0:	200018e0 	.word	0x200018e0

000168c4 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   168c4:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   168c6:	4603      	mov	r3, r0
   168c8:	4a14      	ldr	r2, [pc, #80]	; (1691c <bt_gatt_disconnected+0x58>)
{
   168ca:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   168cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   168d0:	2001      	movs	r0, #1
   168d2:	f009 f891 	bl	1f9f8 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   168d6:	4628      	mov	r0, r5
   168d8:	f7ff fbc2 	bl	16060 <find_cf_cfg>
	if (!cfg) {
   168dc:	4604      	mov	r4, r0
   168de:	b1e0      	cbz	r0, 1691a <bt_gatt_disconnected+0x56>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   168e0:	f105 0688 	add.w	r6, r5, #136	; 0x88
   168e4:	7a28      	ldrb	r0, [r5, #8]
   168e6:	4631      	mov	r1, r6
   168e8:	f007 fd1a 	bl	1e320 <bt_addr_le_is_bonded>
   168ec:	b920      	cbnz	r0, 168f8 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   168ee:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   168f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   168f4:	f008 becc 	b.w	1f690 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   168f8:	1c60      	adds	r0, r4, #1
   168fa:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   168fc:	340c      	adds	r4, #12
   168fe:	f008 fe68 	bl	1f5d2 <bt_addr_le_copy>
   16902:	f3bf 8f5b 	dmb	ish
   16906:	e854 3f00 	ldrex	r3, [r4]
   1690a:	f023 0302 	bic.w	r3, r3, #2
   1690e:	e844 3200 	strex	r2, r3, [r4]
   16912:	2a00      	cmp	r2, #0
   16914:	d1f7      	bne.n	16906 <bt_gatt_disconnected+0x42>
   16916:	f3bf 8f5b 	dmb	ish
}
   1691a:	bd70      	pop	{r4, r5, r6, pc}
   1691c:	000160f9 	.word	0x000160f9

00016920 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   16920:	4b04      	ldr	r3, [pc, #16]	; (16934 <bt_smp_accept+0x14>)
   16922:	6818      	ldr	r0, [r3, #0]
   16924:	b918      	cbnz	r0, 1692e <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
   16926:	4a04      	ldr	r2, [pc, #16]	; (16938 <bt_smp_accept+0x18>)
   16928:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
   1692a:	600b      	str	r3, [r1, #0]

		return 0;
   1692c:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   1692e:	f06f 000b 	mvn.w	r0, #11
}
   16932:	4770      	bx	lr
   16934:	200019a0 	.word	0x200019a0
   16938:	000216f8 	.word	0x000216f8

0001693c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1693c:	4b02      	ldr	r3, [pc, #8]	; (16948 <net_buf_pool_get+0xc>)
   1693e:	2228      	movs	r2, #40	; 0x28
   16940:	fb02 3000 	mla	r0, r2, r0, r3
   16944:	4770      	bx	lr
   16946:	bf00      	nop
   16948:	20000930 	.word	0x20000930

0001694c <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1694c:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   1694e:	4a05      	ldr	r2, [pc, #20]	; (16964 <net_buf_id+0x18>)
   16950:	2128      	movs	r1, #40	; 0x28
   16952:	fb01 2303 	mla	r3, r1, r3, r2
   16956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16958:	1ac0      	subs	r0, r0, r3
}
   1695a:	4b03      	ldr	r3, [pc, #12]	; (16968 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1695c:	10c0      	asrs	r0, r0, #3
}
   1695e:	4358      	muls	r0, r3
   16960:	4770      	bx	lr
   16962:	bf00      	nop
   16964:	20000930 	.word	0x20000930
   16968:	aaaaaaab 	.word	0xaaaaaaab

0001696c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1696c:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1696e:	4a0a      	ldr	r2, [pc, #40]	; (16998 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16970:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   16972:	2428      	movs	r4, #40	; 0x28
   16974:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   16978:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1697a:	6a1b      	ldr	r3, [r3, #32]
   1697c:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1697e:	6823      	ldr	r3, [r4, #0]
   16980:	429a      	cmp	r2, r3
   16982:	bf94      	ite	ls
   16984:	600a      	strls	r2, [r1, #0]
   16986:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   16988:	f7ff ffe0 	bl	1694c <net_buf_id>
   1698c:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   16990:	fb02 3000 	mla	r0, r2, r0, r3
   16994:	bd10      	pop	{r4, pc}
   16996:	bf00      	nop
   16998:	20000930 	.word	0x20000930

0001699c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1699c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   169a0:	4605      	mov	r5, r0
   169a2:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   169a4:	4610      	mov	r0, r2
   169a6:	4619      	mov	r1, r3
{
   169a8:	4616      	mov	r6, r2
   169aa:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   169ac:	f009 fed3 	bl	20756 <sys_clock_timeout_end_calc>
   169b0:	4680      	mov	r8, r0
   169b2:	4689      	mov	r9, r1
	__asm__ volatile(
   169b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   169b8:	f3ef 8a11 	mrs	sl, BASEPRI
   169bc:	f383 8811 	msr	BASEPRI, r3
   169c0:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   169c4:	8b6b      	ldrh	r3, [r5, #26]
   169c6:	2b00      	cmp	r3, #0
   169c8:	d054      	beq.n	16a74 <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   169ca:	8b2a      	ldrh	r2, [r5, #24]
   169cc:	429a      	cmp	r2, r3
   169ce:	d93d      	bls.n	16a4c <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   169d0:	2200      	movs	r2, #0
   169d2:	2300      	movs	r3, #0
   169d4:	4628      	mov	r0, r5
   169d6:	f002 fa69 	bl	18eac <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   169da:	4604      	mov	r4, r0
   169dc:	2800      	cmp	r0, #0
   169de:	d035      	beq.n	16a4c <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   169e0:	f38a 8811 	msr	BASEPRI, sl
   169e4:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   169e8:	9b01      	ldr	r3, [sp, #4]
   169ea:	2b00      	cmp	r3, #0
   169ec:	d052      	beq.n	16a94 <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   169ee:	ea56 0307 	orrs.w	r3, r6, r7
   169f2:	d010      	beq.n	16a16 <net_buf_alloc_len+0x7a>
   169f4:	1c7b      	adds	r3, r7, #1
   169f6:	bf08      	it	eq
   169f8:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   169fc:	d00b      	beq.n	16a16 <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   169fe:	f003 f97f 	bl	19d00 <sys_clock_tick_get>
   16a02:	ebb8 0600 	subs.w	r6, r8, r0
   16a06:	eb69 0701 	sbc.w	r7, r9, r1
   16a0a:	2e00      	cmp	r6, #0
   16a0c:	f177 0300 	sbcs.w	r3, r7, #0
   16a10:	bfbc      	itt	lt
   16a12:	2600      	movlt	r6, #0
   16a14:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16a16:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   16a18:	f8df 8090 	ldr.w	r8, [pc, #144]	; 16aac <net_buf_alloc_len+0x110>
   16a1c:	2228      	movs	r2, #40	; 0x28
   16a1e:	fb02 8303 	mla	r3, r2, r3, r8
   16a22:	a901      	add	r1, sp, #4
   16a24:	6a1b      	ldr	r3, [r3, #32]
   16a26:	681b      	ldr	r3, [r3, #0]
   16a28:	4632      	mov	r2, r6
   16a2a:	681d      	ldr	r5, [r3, #0]
   16a2c:	4620      	mov	r0, r4
   16a2e:	463b      	mov	r3, r7
   16a30:	47a8      	blx	r5
   16a32:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   16a34:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   16a36:	bb70      	cbnz	r0, 16a96 <net_buf_alloc_len+0xfa>
	k_lifo_put(&pool->free, buf);
   16a38:	79a0      	ldrb	r0, [r4, #6]
   16a3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16a3e:	4621      	mov	r1, r4
   16a40:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   16a44:	f009 fc17 	bl	20276 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   16a48:	462c      	mov	r4, r5
}
   16a4a:	e01f      	b.n	16a8c <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   16a4c:	8b68      	ldrh	r0, [r5, #26]
   16a4e:	1e43      	subs	r3, r0, #1
   16a50:	836b      	strh	r3, [r5, #26]
   16a52:	f38a 8811 	msr	BASEPRI, sl
   16a56:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   16a5a:	8b2c      	ldrh	r4, [r5, #24]
   16a5c:	1a24      	subs	r4, r4, r0
   16a5e:	6a68      	ldr	r0, [r5, #36]	; 0x24
   16a60:	2318      	movs	r3, #24
   16a62:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   16a66:	4811      	ldr	r0, [pc, #68]	; (16aac <net_buf_alloc_len+0x110>)
   16a68:	4b11      	ldr	r3, [pc, #68]	; (16ab0 <net_buf_alloc_len+0x114>)
   16a6a:	1a2d      	subs	r5, r5, r0
   16a6c:	10ed      	asrs	r5, r5, #3
   16a6e:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   16a70:	71a5      	strb	r5, [r4, #6]
		goto success;
   16a72:	e7b9      	b.n	169e8 <net_buf_alloc_len+0x4c>
   16a74:	f38a 8811 	msr	BASEPRI, sl
   16a78:	f3bf 8f6f 	isb	sy
   16a7c:	4632      	mov	r2, r6
   16a7e:	463b      	mov	r3, r7
   16a80:	4628      	mov	r0, r5
   16a82:	f002 fa13 	bl	18eac <z_impl_k_queue_get>
	if (!buf) {
   16a86:	4604      	mov	r4, r0
   16a88:	2800      	cmp	r0, #0
   16a8a:	d1ad      	bne.n	169e8 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   16a8c:	4620      	mov	r0, r4
   16a8e:	b002      	add	sp, #8
   16a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   16a94:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   16a96:	2300      	movs	r3, #0
	buf->ref   = 1U;
   16a98:	2201      	movs	r2, #1
	buf->frags = NULL;
   16a9a:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   16a9c:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   16a9e:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   16aa0:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   16aa2:	6923      	ldr	r3, [r4, #16]
   16aa4:	81e2      	strh	r2, [r4, #14]
   16aa6:	60a3      	str	r3, [r4, #8]
	return buf;
   16aa8:	e7f0      	b.n	16a8c <net_buf_alloc_len+0xf0>
   16aaa:	bf00      	nop
   16aac:	20000930 	.word	0x20000930
   16ab0:	cccccccd 	.word	0xcccccccd

00016ab4 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   16ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ab8:	4d17      	ldr	r5, [pc, #92]	; (16b18 <net_buf_unref+0x64>)
   16aba:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   16abc:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   16abe:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   16ac0:	b90c      	cbnz	r4, 16ac6 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   16ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   16ac6:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   16ac8:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   16acc:	3b01      	subs	r3, #1
   16ace:	b2db      	uxtb	r3, r3
   16ad0:	7123      	strb	r3, [r4, #4]
   16ad2:	2b00      	cmp	r3, #0
   16ad4:	d1f5      	bne.n	16ac2 <net_buf_unref+0xe>
		if (buf->__buf) {
   16ad6:	6921      	ldr	r1, [r4, #16]
   16ad8:	b159      	cbz	r1, 16af2 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   16ada:	7963      	ldrb	r3, [r4, #5]
   16adc:	079b      	lsls	r3, r3, #30
   16ade:	d407      	bmi.n	16af0 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   16ae0:	79a3      	ldrb	r3, [r4, #6]
   16ae2:	fb07 5303 	mla	r3, r7, r3, r5
   16ae6:	4620      	mov	r0, r4
   16ae8:	6a1b      	ldr	r3, [r3, #32]
   16aea:	681b      	ldr	r3, [r3, #0]
   16aec:	689b      	ldr	r3, [r3, #8]
   16aee:	4798      	blx	r3
			buf->__buf = NULL;
   16af0:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   16af2:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   16af4:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   16af6:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   16afa:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   16afc:	69db      	ldr	r3, [r3, #28]
   16afe:	b11b      	cbz	r3, 16b08 <net_buf_unref+0x54>
			pool->destroy(buf);
   16b00:	4620      	mov	r0, r4
   16b02:	4798      	blx	r3
{
   16b04:	4644      	mov	r4, r8
   16b06:	e7db      	b.n	16ac0 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   16b08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16b0c:	4621      	mov	r1, r4
   16b0e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   16b12:	f009 fbb0 	bl	20276 <k_queue_prepend>
}
   16b16:	e7f5      	b.n	16b04 <net_buf_unref+0x50>
   16b18:	20000930 	.word	0x20000930

00016b1c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   16b1c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   16b1e:	4b09      	ldr	r3, [pc, #36]	; (16b44 <gpio_nrfx_init+0x28>)
   16b20:	781a      	ldrb	r2, [r3, #0]
   16b22:	b96a      	cbnz	r2, 16b40 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   16b24:	2101      	movs	r1, #1
   16b26:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   16b28:	2006      	movs	r0, #6
   16b2a:	2105      	movs	r1, #5
   16b2c:	f7fc f8d8 	bl	12ce0 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   16b30:	2006      	movs	r0, #6
   16b32:	f7fc f8a3 	bl	12c7c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   16b36:	4b04      	ldr	r3, [pc, #16]	; (16b48 <gpio_nrfx_init+0x2c>)
   16b38:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   16b3c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   16b40:	2000      	movs	r0, #0
   16b42:	bd08      	pop	{r3, pc}
   16b44:	20003106 	.word	0x20003106
   16b48:	40006000 	.word	0x40006000

00016b4c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16b4c:	4b2b      	ldr	r3, [pc, #172]	; (16bfc <gpio_nrfx_config+0xb0>)
{
   16b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   16b50:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16b52:	482b      	ldr	r0, [pc, #172]	; (16c00 <gpio_nrfx_config+0xb4>)
   16b54:	4013      	ands	r3, r2
   16b56:	4283      	cmp	r3, r0
   16b58:	d041      	beq.n	16bde <gpio_nrfx_config+0x92>
   16b5a:	d80d      	bhi.n	16b78 <gpio_nrfx_config+0x2c>
   16b5c:	2b06      	cmp	r3, #6
   16b5e:	d015      	beq.n	16b8c <gpio_nrfx_config+0x40>
   16b60:	d805      	bhi.n	16b6e <gpio_nrfx_config+0x22>
   16b62:	b19b      	cbz	r3, 16b8c <gpio_nrfx_config+0x40>
   16b64:	2b02      	cmp	r3, #2
   16b66:	d03c      	beq.n	16be2 <gpio_nrfx_config+0x96>
   16b68:	f06f 0015 	mvn.w	r0, #21
   16b6c:	e036      	b.n	16bdc <gpio_nrfx_config+0x90>
   16b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   16b72:	d1f9      	bne.n	16b68 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   16b74:	2301      	movs	r3, #1
   16b76:	e009      	b.n	16b8c <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16b78:	4822      	ldr	r0, [pc, #136]	; (16c04 <gpio_nrfx_config+0xb8>)
   16b7a:	4283      	cmp	r3, r0
   16b7c:	d033      	beq.n	16be6 <gpio_nrfx_config+0x9a>
   16b7e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   16b82:	d032      	beq.n	16bea <gpio_nrfx_config+0x9e>
   16b84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   16b88:	d1ee      	bne.n	16b68 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   16b8a:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   16b8c:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   16b8e:	bf54      	ite	pl
   16b90:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   16b94:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   16b96:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   16b9a:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   16b9c:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   16ba0:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   16ba4:	d507      	bpl.n	16bb6 <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   16ba6:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   16baa:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   16bac:	d01f      	beq.n	16bee <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
   16bae:	2201      	movs	r2, #1
   16bb0:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   16bb2:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   16bb6:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
   16bb8:	4c13      	ldr	r4, [pc, #76]	; (16c08 <gpio_nrfx_config+0xbc>)
   16bba:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   16bbc:	f001 011f 	and.w	r1, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   16bc0:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
   16bc4:	bf18      	it	ne
   16bc6:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   16bca:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   16bce:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   16bd2:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   16bd6:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
   16bda:	2000      	movs	r0, #0
}
   16bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   16bde:	2307      	movs	r3, #7
   16be0:	e7d4      	b.n	16b8c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   16be2:	2304      	movs	r3, #4
   16be4:	e7d2      	b.n	16b8c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   16be6:	2305      	movs	r3, #5
   16be8:	e7d0      	b.n	16b8c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   16bea:	2303      	movs	r3, #3
   16bec:	e7ce      	b.n	16b8c <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   16bee:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   16bf0:	bf42      	ittt	mi
   16bf2:	2201      	movmi	r2, #1
   16bf4:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   16bf6:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   16bfa:	e7dc      	b.n	16bb6 <gpio_nrfx_config+0x6a>
   16bfc:	00f00006 	.word	0x00f00006
   16c00:	00100006 	.word	0x00100006
   16c04:	00400002 	.word	0x00400002
   16c08:	50000300 	.word	0x50000300

00016c0c <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   16c0c:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   16c10:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   16c12:	4b08      	ldr	r3, [pc, #32]	; (16c34 <nrf_gpio_cfg_sense_set+0x28>)
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   16c14:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   16c16:	bf18      	it	ne
   16c18:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   16c1c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   16c20:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
   16c24:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   16c28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   16c2c:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
   16c30:	4770      	bx	lr
   16c32:	bf00      	nop
   16c34:	50000300 	.word	0x50000300

00016c38 <check_level_trigger_pins>:
{
   16c38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   16c3c:	6903      	ldr	r3, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   16c3e:	f8d0 a004 	ldr.w	sl, [r0, #4]
	uint32_t out = data->pin_int_en;
   16c42:	68de      	ldr	r6, [r3, #12]
        case 1: return NRF_P1;
   16c44:	f8df b07c 	ldr.w	fp, [pc, #124]	; 16cc4 <check_level_trigger_pins+0x8c>
{
   16c48:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
   16c4a:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   16c4e:	430a      	orrs	r2, r1
   16c50:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   16c54:	f8da 2004 	ldr.w	r2, [sl, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   16c58:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   16c5a:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
   16c5e:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   16c60:	ea26 0505 	bic.w	r5, r6, r5
	uint32_t check_pins = level_pins;
   16c64:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
   16c66:	2401      	movs	r4, #1
	uint32_t pin = 0U;
   16c68:	f04f 0900 	mov.w	r9, #0
	while (check_pins) {
   16c6c:	b917      	cbnz	r7, 16c74 <check_level_trigger_pins+0x3c>
}
   16c6e:	4628      	mov	r0, r5
   16c70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
   16c74:	423c      	tst	r4, r7
   16c76:	d021      	beq.n	16cbc <check_level_trigger_pins+0x84>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   16c78:	f89a 3008 	ldrb.w	r3, [sl, #8]
   16c7c:	f009 001f 	and.w	r0, r9, #31
			if (!(level_pins & bit)) {
   16c80:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   16c82:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
			if (!(level_pins & bit)) {
   16c86:	d114      	bne.n	16cb2 <check_level_trigger_pins+0x7a>
    return pin_number >> 5;
   16c88:	0942      	lsrs	r2, r0, #5
        case 1: return NRF_P1;
   16c8a:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   16c8c:	f000 031f 	and.w	r3, r0, #31
        case 1: return NRF_P1;
   16c90:	bf14      	ite	ne
   16c92:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
   16c96:	465a      	moveq	r2, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   16c98:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   16c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   16ca0:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
   16ca4:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
   16ca6:	bf02      	ittt	eq
   16ca8:	f8d8 3000 	ldreq.w	r3, [r8]
   16cac:	4323      	orreq	r3, r4
   16cae:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   16cb2:	2100      	movs	r1, #0
   16cb4:	f7ff ffaa 	bl	16c0c <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   16cb8:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
   16cbc:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   16cc0:	0064      	lsls	r4, r4, #1
   16cc2:	e7d3      	b.n	16c6c <check_level_trigger_pins+0x34>
   16cc4:	50000300 	.word	0x50000300

00016cc8 <gpio_nrfx_pin_interrupt_configure>:
{
   16cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16cca:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   16ccc:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   16cce:	6907      	ldr	r7, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   16cd0:	7a09      	ldrb	r1, [r1, #8]
   16cd2:	f006 051f 	and.w	r5, r6, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   16cd6:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   16cda:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
   16cde:	d110      	bne.n	16d02 <gpio_nrfx_pin_interrupt_configure+0x3a>
    return pin_number >> 5;
   16ce0:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
   16ce2:	2801      	cmp	r0, #1
    *p_pin = pin_number & 0x1F;
   16ce4:	f005 011f 	and.w	r1, r5, #31
        case 1: return NRF_P1;
   16ce8:	485d      	ldr	r0, [pc, #372]	; (16e60 <gpio_nrfx_pin_interrupt_configure+0x198>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   16cea:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
        case 1: return NRF_P1;
   16cee:	bf18      	it	ne
   16cf0:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   16cf4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   16cf8:	07c8      	lsls	r0, r1, #31
   16cfa:	d507      	bpl.n	16d0c <gpio_nrfx_pin_interrupt_configure+0x44>
		return -ENOTSUP;
   16cfc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16d00:	e093      	b.n	16e2a <gpio_nrfx_pin_interrupt_configure+0x162>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   16d02:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   16d06:	68f9      	ldr	r1, [r7, #12]
   16d08:	f000 8091 	beq.w	16e2e <gpio_nrfx_pin_interrupt_configure+0x166>
   16d0c:	68f8      	ldr	r0, [r7, #12]
   16d0e:	2101      	movs	r1, #1
   16d10:	40b1      	lsls	r1, r6
   16d12:	4301      	orrs	r1, r0
   16d14:	6978      	ldr	r0, [r7, #20]
   16d16:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   16d18:	2101      	movs	r1, #1
   16d1a:	40b1      	lsls	r1, r6
   16d1c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   16d20:	69ba      	ldr	r2, [r7, #24]
   16d22:	bf0c      	ite	eq
   16d24:	4308      	orreq	r0, r1
   16d26:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   16d28:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   16d2c:	bf0c      	ite	eq
   16d2e:	430a      	orreq	r2, r1
   16d30:	438a      	bicne	r2, r1
   16d32:	61ba      	str	r2, [r7, #24]
   16d34:	693a      	ldr	r2, [r7, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   16d36:	6178      	str	r0, [r7, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   16d38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   16d3c:	bf0c      	ite	eq
   16d3e:	4311      	orreq	r1, r2
   16d40:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   16d44:	4a47      	ldr	r2, [pc, #284]	; (16e64 <gpio_nrfx_pin_interrupt_configure+0x19c>)
   16d46:	6139      	str	r1, [r7, #16]
   16d48:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   16d4c:	2000      	movs	r0, #0
   16d4e:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   16d50:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   16d54:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   16d58:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   16d5c:	428d      	cmp	r5, r1
   16d5e:	d16b      	bne.n	16e38 <gpio_nrfx_pin_interrupt_configure+0x170>
		    && (intenset & BIT(i))) {
   16d60:	fa23 f100 	lsr.w	r1, r3, r0
   16d64:	07c9      	lsls	r1, r1, #31
   16d66:	d567      	bpl.n	16e38 <gpio_nrfx_pin_interrupt_configure+0x170>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   16d68:	0083      	lsls	r3, r0, #2
   16d6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16d6e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   16d72:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   16d76:	f021 0101 	bic.w	r1, r1, #1
   16d7a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   16d7e:	2301      	movs	r3, #1
   16d80:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   16d82:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   16d86:	b2c0      	uxtb	r0, r0
   16d88:	f001 f9d4 	bl	18134 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   16d8c:	4628      	mov	r0, r5
   16d8e:	2100      	movs	r1, #0
   16d90:	f7ff ff3c 	bl	16c0c <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   16d94:	68f8      	ldr	r0, [r7, #12]
   16d96:	40f0      	lsrs	r0, r6
   16d98:	f010 0001 	ands.w	r0, r0, #1
   16d9c:	d045      	beq.n	16e2a <gpio_nrfx_pin_interrupt_configure+0x162>
		if (data->trig_edge & BIT(pin)) {
   16d9e:	6978      	ldr	r0, [r7, #20]
   16da0:	40f0      	lsrs	r0, r6
   16da2:	f010 0401 	ands.w	r4, r0, #1
   16da6:	d04e      	beq.n	16e46 <gpio_nrfx_pin_interrupt_configure+0x17e>
				if (data->double_edge & BIT(pin)) {
   16da8:	69bb      	ldr	r3, [r7, #24]
   16daa:	40f3      	lsrs	r3, r6
   16dac:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   16dae:	bf5f      	itttt	pl
   16db0:	6939      	ldrpl	r1, [r7, #16]
   16db2:	fa21 f606 	lsrpl.w	r6, r1, r6
   16db6:	f006 0601 	andpl.w	r6, r6, #1
   16dba:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   16dbe:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   16dc2:	bf54      	ite	pl
   16dc4:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   16dc6:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   16dc8:	f001 f9d6 	bl	18178 <nrfx_gpiote_channel_alloc>
   16dcc:	4b26      	ldr	r3, [pc, #152]	; (16e68 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
   16dce:	4298      	cmp	r0, r3
   16dd0:	d136      	bne.n	16e40 <gpio_nrfx_pin_interrupt_configure+0x178>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   16dd2:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   16dd6:	008b      	lsls	r3, r1, #2
   16dd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16ddc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16de0:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   16de2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16de6:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   16dea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   16dee:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16df2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16df6:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
   16dfa:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
   16dfc:	008a      	lsls	r2, r1, #2
   16dfe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   16e02:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16e06:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16e0a:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16e0c:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16e10:	6010      	str	r0, [r2, #0]
   16e12:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   16e14:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16e18:	f042 0201 	orr.w	r2, r2, #1
   16e1c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   16e20:	4a10      	ldr	r2, [pc, #64]	; (16e64 <gpio_nrfx_pin_interrupt_configure+0x19c>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   16e22:	2301      	movs	r3, #1
   16e24:	408b      	lsls	r3, r1
   16e26:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   16e2a:	b003      	add	sp, #12
   16e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   16e2e:	2001      	movs	r0, #1
   16e30:	40b0      	lsls	r0, r6
   16e32:	ea21 0100 	bic.w	r1, r1, r0
   16e36:	e76d      	b.n	16d14 <gpio_nrfx_pin_interrupt_configure+0x4c>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   16e38:	3001      	adds	r0, #1
   16e3a:	2808      	cmp	r0, #8
   16e3c:	d188      	bne.n	16d50 <gpio_nrfx_pin_interrupt_configure+0x88>
   16e3e:	e7a5      	b.n	16d8c <gpio_nrfx_pin_interrupt_configure+0xc4>
		return -ENODEV;
   16e40:	f06f 0012 	mvn.w	r0, #18
   16e44:	e7f1      	b.n	16e2a <gpio_nrfx_pin_interrupt_configure+0x162>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   16e46:	6939      	ldr	r1, [r7, #16]
   16e48:	40f1      	lsrs	r1, r6
   16e4a:	f001 0101 	and.w	r1, r1, #1
   16e4e:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   16e52:	4628      	mov	r0, r5
   16e54:	b2c9      	uxtb	r1, r1
   16e56:	f7ff fed9 	bl	16c0c <nrf_gpio_cfg_sense_set>
	int res = 0;
   16e5a:	4620      	mov	r0, r4
   16e5c:	e7e5      	b.n	16e2a <gpio_nrfx_pin_interrupt_configure+0x162>
   16e5e:	bf00      	nop
   16e60:	50000300 	.word	0x50000300
   16e64:	40006000 	.word	0x40006000
   16e68:	0bad0000 	.word	0x0bad0000

00016e6c <gpiote_event_handler>:
{
   16e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   16e6e:	2400      	movs	r4, #0
{
   16e70:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   16e72:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
   16e76:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16e7a:	4e26      	ldr	r6, [pc, #152]	; (16f14 <gpiote_event_handler+0xa8>)
   16e7c:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
   16e7e:	b15d      	cbz	r5, 16e98 <gpiote_event_handler+0x2c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
   16e80:	a902      	add	r1, sp, #8
   16e82:	4825      	ldr	r0, [pc, #148]	; (16f18 <gpiote_event_handler+0xac>)
   16e84:	f7ff fed8 	bl	16c38 <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   16e88:	a903      	add	r1, sp, #12
		fired_triggers[0] =
   16e8a:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   16e8c:	4823      	ldr	r0, [pc, #140]	; (16f1c <gpiote_event_handler+0xb0>)
   16e8e:	f7ff fed3 	bl	16c38 <check_level_trigger_pins>
		fired_triggers[1] =
   16e92:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16e94:	6034      	str	r4, [r6, #0]
   16e96:	6833      	ldr	r3, [r6, #0]
    return p_reg->INTENSET & mask;
   16e98:	4c21      	ldr	r4, [pc, #132]	; (16f20 <gpiote_event_handler+0xb4>)
{
   16e9a:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   16e9c:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16e9e:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   16ea0:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
   16ea4:	fa06 f102 	lsl.w	r1, r6, r2
   16ea8:	4219      	tst	r1, r3
   16eaa:	d01b      	beq.n	16ee4 <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16eac:	0091      	lsls	r1, r2, #2
   16eae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   16eb2:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
   16eb6:	680b      	ldr	r3, [r1, #0]
   16eb8:	b1a3      	cbz	r3, 16ee4 <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   16eba:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   16ebe:	af04      	add	r7, sp, #16
   16ec0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16ec4:	f8c1 c000 	str.w	ip, [r1]
   16ec8:	f3c3 3040 	ubfx	r0, r3, #13, #1
   16ecc:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   16ed0:	f3c3 2304 	ubfx	r3, r3, #8, #5
   16ed4:	f850 7c10 	ldr.w	r7, [r0, #-16]
   16ed8:	fa06 f303 	lsl.w	r3, r6, r3
   16edc:	433b      	orrs	r3, r7
   16ede:	f840 3c10 	str.w	r3, [r0, #-16]
   16ee2:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   16ee4:	3201      	adds	r2, #1
   16ee6:	2a08      	cmp	r2, #8
   16ee8:	d1da      	bne.n	16ea0 <gpiote_event_handler+0x34>
	if (fired_triggers[0]) {
   16eea:	9a00      	ldr	r2, [sp, #0]
   16eec:	b11a      	cbz	r2, 16ef6 <gpiote_event_handler+0x8a>
	gpio_fire_callbacks(list, port, pins);
   16eee:	490a      	ldr	r1, [pc, #40]	; (16f18 <gpiote_event_handler+0xac>)
   16ef0:	480c      	ldr	r0, [pc, #48]	; (16f24 <gpiote_event_handler+0xb8>)
   16ef2:	f008 fedc 	bl	1fcae <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   16ef6:	9a01      	ldr	r2, [sp, #4]
   16ef8:	b11a      	cbz	r2, 16f02 <gpiote_event_handler+0x96>
	gpio_fire_callbacks(list, port, pins);
   16efa:	4908      	ldr	r1, [pc, #32]	; (16f1c <gpiote_event_handler+0xb0>)
   16efc:	480a      	ldr	r0, [pc, #40]	; (16f28 <gpiote_event_handler+0xbc>)
   16efe:	f008 fed6 	bl	1fcae <gpio_fire_callbacks>
	if (port_event) {
   16f02:	b12d      	cbz	r5, 16f10 <gpiote_event_handler+0xa4>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   16f04:	4804      	ldr	r0, [pc, #16]	; (16f18 <gpiote_event_handler+0xac>)
   16f06:	f008 ff3c 	bl	1fd82 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   16f0a:	4804      	ldr	r0, [pc, #16]	; (16f1c <gpiote_event_handler+0xb0>)
   16f0c:	f008 ff39 	bl	1fd82 <cfg_level_pins>
}
   16f10:	b005      	add	sp, #20
   16f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16f14:	4000617c 	.word	0x4000617c
   16f18:	00020c84 	.word	0x00020c84
   16f1c:	00020c9c 	.word	0x00020c9c
   16f20:	40006000 	.word	0x40006000
   16f24:	20002590 	.word	0x20002590
   16f28:	200025ac 	.word	0x200025ac

00016f2c <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
   16f2c:	b510      	push	{r4, lr}
   16f2e:	4604      	mov	r4, r0
   16f30:	2200      	movs	r2, #0
   16f32:	2101      	movs	r1, #1
   16f34:	2003      	movs	r0, #3
   16f36:	f7fb fed3 	bl	12ce0 <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
   16f3a:	6860      	ldr	r0, [r4, #4]
   16f3c:	6923      	ldr	r3, [r4, #16]
   16f3e:	4a06      	ldr	r2, [pc, #24]	; (16f58 <twim_0_init+0x2c>)
   16f40:	f100 0108 	add.w	r1, r0, #8
   16f44:	f001 f950 	bl	181e8 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   16f48:	4b04      	ldr	r3, [pc, #16]	; (16f5c <twim_0_init+0x30>)
   16f4a:	4298      	cmp	r0, r3
I2C_NRFX_TWIM_DEVICE(0);
   16f4c:	bf14      	ite	ne
   16f4e:	f06f 000f 	mvnne.w	r0, #15
   16f52:	2000      	moveq	r0, #0
   16f54:	bd10      	pop	{r4, pc}
   16f56:	bf00      	nop
   16f58:	00016f61 	.word	0x00016f61
   16f5c:	0bad0000 	.word	0x0bad0000

00016f60 <event_handler>:
	switch (p_event->type) {
   16f60:	7803      	ldrb	r3, [r0, #0]
   16f62:	2b01      	cmp	r3, #1
   16f64:	d008      	beq.n	16f78 <event_handler+0x18>
   16f66:	2b02      	cmp	r3, #2
   16f68:	d008      	beq.n	16f7c <event_handler+0x1c>
   16f6a:	b94b      	cbnz	r3, 16f80 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   16f6c:	4b05      	ldr	r3, [pc, #20]	; (16f84 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   16f6e:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   16f70:	f101 0018 	add.w	r0, r1, #24
   16f74:	f001 bfce 	b.w	18f14 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   16f78:	4b03      	ldr	r3, [pc, #12]	; (16f88 <event_handler+0x28>)
   16f7a:	e7f8      	b.n	16f6e <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   16f7c:	4b03      	ldr	r3, [pc, #12]	; (16f8c <event_handler+0x2c>)
   16f7e:	e7f6      	b.n	16f6e <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   16f80:	4b03      	ldr	r3, [pc, #12]	; (16f90 <event_handler+0x30>)
   16f82:	e7f4      	b.n	16f6e <event_handler+0xe>
   16f84:	0bad0000 	.word	0x0bad0000
   16f88:	0bae0001 	.word	0x0bae0001
   16f8c:	0bae0002 	.word	0x0bae0002
   16f90:	0bad0001 	.word	0x0bad0001

00016f94 <i2c_nrfx_twim_transfer>:
{
   16f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
   16f98:	6904      	ldr	r4, [r0, #16]
{
   16f9a:	b089      	sub	sp, #36	; 0x24
   16f9c:	461e      	mov	r6, r3
   16f9e:	4605      	mov	r5, r0
	uint16_t concat_buf_size = get_dev_data(dev)->concat_buf_size;
   16fa0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
   16fa2:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	uint16_t concat_buf_size = get_dev_data(dev)->concat_buf_size;
   16fa6:	9300      	str	r3, [sp, #0]
{
   16fa8:	4689      	mov	r9, r1
   16faa:	4692      	mov	sl, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
   16fac:	2100      	movs	r1, #0
   16fae:	2214      	movs	r2, #20
   16fb0:	a803      	add	r0, sp, #12
   16fb2:	f009 fd9d 	bl	20af0 <memset>
   16fb6:	f88d 600d 	strb.w	r6, [sp, #13]
	return z_impl_k_sem_take(sem, timeout);
   16fba:	f04f 32ff 	mov.w	r2, #4294967295
   16fbe:	f04f 33ff 	mov.w	r3, #4294967295
   16fc2:	4620      	mov	r0, r4
   16fc4:	f001 ffcc 	bl	18f60 <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
   16fc8:	6928      	ldr	r0, [r5, #16]
   16fca:	3018      	adds	r0, #24
   16fcc:	2200      	movs	r2, #0
   16fce:	2300      	movs	r3, #0
   16fd0:	f001 ffc6 	bl	18f60 <z_impl_k_sem_take>
	nrfx_twim_enable(&get_dev_config(dev)->twim);
   16fd4:	6868      	ldr	r0, [r5, #4]
		if (res != NRFX_SUCCESS) {
   16fd6:	f8df b134 	ldr.w	fp, [pc, #308]	; 1710c <i2c_nrfx_twim_transfer+0x178>
	nrfx_twim_enable(&get_dev_config(dev)->twim);
   16fda:	f001 f95f 	bl	1829c <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   16fde:	2700      	movs	r7, #0
   16fe0:	464e      	mov	r6, r9
	uint32_t concat_len = 0;
   16fe2:	463c      	mov	r4, r7
	for (size_t i = 0; i < num_msgs; i++) {
   16fe4:	4557      	cmp	r7, sl
   16fe6:	d301      	bcc.n	16fec <i2c_nrfx_twim_transfer+0x58>
   16fe8:	2400      	movs	r4, #0
   16fea:	e02f      	b.n	1704c <i2c_nrfx_twim_transfer+0xb8>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   16fec:	7a31      	ldrb	r1, [r6, #8]
   16fee:	070b      	lsls	r3, r1, #28
   16ff0:	f100 8081 	bmi.w	170f6 <i2c_nrfx_twim_transfer+0x162>
			&& ((msgs[i].flags & I2C_MSG_READ)
   16ff4:	9b00      	ldr	r3, [sp, #0]
   16ff6:	b16b      	cbz	r3, 17014 <i2c_nrfx_twim_transfer+0x80>
			&& ((i + 1) < num_msgs)
   16ff8:	1c7b      	adds	r3, r7, #1
   16ffa:	4553      	cmp	r3, sl
   16ffc:	d20a      	bcs.n	17014 <i2c_nrfx_twim_transfer+0x80>
			&& !(msgs[i].flags & I2C_MSG_STOP)
   16ffe:	0788      	lsls	r0, r1, #30
   17000:	d408      	bmi.n	17014 <i2c_nrfx_twim_transfer+0x80>
			&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   17002:	7d33      	ldrb	r3, [r6, #20]
			    == (msgs[i + 1].flags & I2C_MSG_READ));
   17004:	ea81 0203 	eor.w	r2, r1, r3
			&& ((msgs[i].flags & I2C_MSG_READ)
   17008:	f002 0201 	and.w	r2, r2, #1
   1700c:	f003 0304 	and.w	r3, r3, #4
   17010:	4313      	orrs	r3, r2
   17012:	d025      	beq.n	17060 <i2c_nrfx_twim_transfer+0xcc>
		if (concat_next || (concat_len != 0)) {
   17014:	2c00      	cmp	r4, #0
   17016:	d13c      	bne.n	17092 <i2c_nrfx_twim_transfer+0xfe>
			cur_xfer.p_primary_buf = msgs[i].buf;
   17018:	6833      	ldr	r3, [r6, #0]
   1701a:	9306      	str	r3, [sp, #24]
			cur_xfer.primary_length = msgs[i].len;
   1701c:	6873      	ldr	r3, [r6, #4]
   1701e:	9304      	str	r3, [sp, #16]
   17020:	2400      	movs	r4, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   17022:	7a33      	ldrb	r3, [r6, #8]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   17024:	6868      	ldr	r0, [r5, #4]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   17026:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   1702a:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1702e:	f88d 200c 	strb.w	r2, [sp, #12]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   17032:	a903      	add	r1, sp, #12
   17034:	bf0c      	ite	eq
   17036:	2220      	moveq	r2, #32
   17038:	2200      	movne	r2, #0
   1703a:	f001 f95d 	bl	182f8 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   1703e:	4558      	cmp	r0, fp
   17040:	d029      	beq.n	17096 <i2c_nrfx_twim_transfer+0x102>
			if (res == NRFX_ERROR_BUSY) {
   17042:	4b31      	ldr	r3, [pc, #196]	; (17108 <i2c_nrfx_twim_transfer+0x174>)
   17044:	4298      	cmp	r0, r3
   17046:	d05c      	beq.n	17102 <i2c_nrfx_twim_transfer+0x16e>
			ret = -EIO;
   17048:	f06f 0404 	mvn.w	r4, #4
	nrfx_twim_disable(&get_dev_config(dev)->twim);
   1704c:	6868      	ldr	r0, [r5, #4]
   1704e:	f001 f935 	bl	182bc <nrfx_twim_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   17052:	6928      	ldr	r0, [r5, #16]
	z_impl_k_sem_give(sem);
   17054:	f001 ff5e 	bl	18f14 <z_impl_k_sem_give>
}
   17058:	4620      	mov	r0, r4
   1705a:	b009      	add	sp, #36	; 0x24
   1705c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& ((msgs[i].flags & I2C_MSG_READ)
   17060:	2301      	movs	r3, #1
			if ((concat_len + msgs[i].len) > concat_buf_size) {
   17062:	6872      	ldr	r2, [r6, #4]
   17064:	9800      	ldr	r0, [sp, #0]
   17066:	eb02 0c04 	add.w	ip, r2, r4
   1706a:	4584      	cmp	ip, r0
   1706c:	d846      	bhi.n	170fc <i2c_nrfx_twim_transfer+0x168>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   1706e:	07c9      	lsls	r1, r1, #31
   17070:	d406      	bmi.n	17080 <i2c_nrfx_twim_transfer+0xec>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   17072:	6831      	ldr	r1, [r6, #0]
   17074:	9301      	str	r3, [sp, #4]
   17076:	eb08 0004 	add.w	r0, r8, r4
   1707a:	f009 fcfe 	bl	20a7a <memcpy>
   1707e:	9b01      	ldr	r3, [sp, #4]
			concat_len += msgs[i].len;
   17080:	6872      	ldr	r2, [r6, #4]
   17082:	4414      	add	r4, r2
		if (concat_next) {
   17084:	bb03      	cbnz	r3, 170c8 <i2c_nrfx_twim_transfer+0x134>
		if (concat_len == 0) {
   17086:	2c00      	cmp	r4, #0
   17088:	d0c6      	beq.n	17018 <i2c_nrfx_twim_transfer+0x84>
			cur_xfer.p_primary_buf = concat_buf;
   1708a:	f8cd 8018 	str.w	r8, [sp, #24]
			cur_xfer.primary_length = concat_len;
   1708e:	9404      	str	r4, [sp, #16]
   17090:	e7c7      	b.n	17022 <i2c_nrfx_twim_transfer+0x8e>
			&& ((msgs[i].flags & I2C_MSG_READ)
   17092:	2300      	movs	r3, #0
   17094:	e7e5      	b.n	17062 <i2c_nrfx_twim_transfer+0xce>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
   17096:	6928      	ldr	r0, [r5, #16]
   17098:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   1709a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1709e:	2300      	movs	r3, #0
   170a0:	f001 ff5e 	bl	18f60 <z_impl_k_sem_take>
		if (ret != 0) {
   170a4:	b140      	cbz	r0, 170b8 <i2c_nrfx_twim_transfer+0x124>
			nrfx_twim_disable(&get_dev_config(dev)->twim);
   170a6:	6868      	ldr	r0, [r5, #4]
   170a8:	f001 f908 	bl	182bc <nrfx_twim_disable>
			nrfx_twim_bus_recover(get_dev_config(dev)->config.scl,
   170ac:	686b      	ldr	r3, [r5, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   170ae:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   170b2:	f001 fb6f 	bl	18794 <nrfx_twi_twim_bus_recover>
   170b6:	e7c7      	b.n	17048 <i2c_nrfx_twim_transfer+0xb4>
		res = get_dev_data(dev)->res;
   170b8:	692b      	ldr	r3, [r5, #16]
   170ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   170bc:	455b      	cmp	r3, fp
   170be:	d1c3      	bne.n	17048 <i2c_nrfx_twim_transfer+0xb4>
		if ((msgs[i].flags & I2C_MSG_READ)
   170c0:	7a33      	ldrb	r3, [r6, #8]
   170c2:	07db      	lsls	r3, r3, #31
   170c4:	d403      	bmi.n	170ce <i2c_nrfx_twim_transfer+0x13a>
		concat_len = 0;
   170c6:	2400      	movs	r4, #0
	for (size_t i = 0; i < num_msgs; i++) {
   170c8:	3701      	adds	r7, #1
   170ca:	360c      	adds	r6, #12
   170cc:	e78a      	b.n	16fe4 <i2c_nrfx_twim_transfer+0x50>
		    && cur_xfer.p_primary_buf == concat_buf) {
   170ce:	9b06      	ldr	r3, [sp, #24]
   170d0:	4598      	cmp	r8, r3
   170d2:	d1f8      	bne.n	170c6 <i2c_nrfx_twim_transfer+0x132>
			while (concat_len >= msgs[j].len) {
   170d4:	230c      	movs	r3, #12
   170d6:	fb03 9307 	mla	r3, r3, r7, r9
   170da:	685a      	ldr	r2, [r3, #4]
   170dc:	4294      	cmp	r4, r2
   170de:	f1a3 030c 	sub.w	r3, r3, #12
   170e2:	d3f0      	bcc.n	170c6 <i2c_nrfx_twim_transfer+0x132>
				concat_len -= msgs[j].len;
   170e4:	1aa4      	subs	r4, r4, r2
   170e6:	68d8      	ldr	r0, [r3, #12]
   170e8:	9301      	str	r3, [sp, #4]
   170ea:	eb08 0104 	add.w	r1, r8, r4
   170ee:	f009 fcc4 	bl	20a7a <memcpy>
   170f2:	9b01      	ldr	r3, [sp, #4]
				j--;
   170f4:	e7f1      	b.n	170da <i2c_nrfx_twim_transfer+0x146>
			ret = -ENOTSUP;
   170f6:	f06f 0485 	mvn.w	r4, #133	; 0x85
   170fa:	e7a7      	b.n	1704c <i2c_nrfx_twim_transfer+0xb8>
				ret = -ENOSPC;
   170fc:	f06f 041b 	mvn.w	r4, #27
   17100:	e7a4      	b.n	1704c <i2c_nrfx_twim_transfer+0xb8>
				ret = -EBUSY;
   17102:	f06f 040f 	mvn.w	r4, #15
   17106:	e7a1      	b.n	1704c <i2c_nrfx_twim_transfer+0xb8>
   17108:	0bad000b 	.word	0x0bad000b
   1710c:	0bad0000 	.word	0x0bad0000

00017110 <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
   17110:	4b01      	ldr	r3, [pc, #4]	; (17118 <hfclk_on_callback+0x8>)
   17112:	2201      	movs	r2, #1
   17114:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
   17116:	4770      	bx	lr
   17118:	4000c000 	.word	0x4000c000

0001711c <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
   1711c:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
   1711e:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
   17120:	d10b      	bne.n	1713a <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
   17122:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   17124:	4b06      	ldr	r3, [pc, #24]	; (17140 <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
   17126:	4807      	ldr	r0, [pc, #28]	; (17144 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
   17128:	4359      	muls	r1, r3
	val->val1 = uval / 1000000;
   1712a:	fb91 f3f0 	sdiv	r3, r1, r0
   1712e:	6013      	str	r3, [r2, #0]
	val->val2 = uval % 1000000;
   17130:	fb00 1313 	mls	r3, r0, r3, r1
   17134:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
   17136:	2000      	movs	r0, #0
   17138:	4770      	bx	lr
		return -ENOTSUP;
   1713a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1713e:	4770      	bx	lr
   17140:	0003d090 	.word	0x0003d090
   17144:	000f4240 	.word	0x000f4240

00017148 <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   17148:	4b03      	ldr	r3, [pc, #12]	; (17158 <temp_nrf5_isr+0x10>)

static void temp_nrf5_isr(void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
   1714a:	6900      	ldr	r0, [r0, #16]
   1714c:	2200      	movs	r2, #0
   1714e:	601a      	str	r2, [r3, #0]
   17150:	681b      	ldr	r3, [r3, #0]
	z_impl_k_sem_give(sem);
   17152:	f001 bedf 	b.w	18f14 <z_impl_k_sem_give>
   17156:	bf00      	nop
   17158:	4000c100 	.word	0x4000c100

0001715c <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
   1715c:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
   1715e:	6904      	ldr	r4, [r0, #16]

	LOG_DBG("");

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   17160:	2000      	movs	r0, #0
   17162:	f7fb fa5b 	bl	1261c <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
   17166:	6320      	str	r0, [r4, #48]	; 0x30
	return z_impl_k_sem_init(sem, initial_count, limit);
   17168:	f04f 32ff 	mov.w	r2, #4294967295
   1716c:	2100      	movs	r1, #0
   1716e:	4620      	mov	r0, r4
   17170:	f009 f8c7 	bl	20302 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
   17174:	f104 0018 	add.w	r0, r4, #24
   17178:	f008 ffef 	bl	2015a <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
   1717c:	2200      	movs	r2, #0
   1717e:	2101      	movs	r1, #1
   17180:	200c      	movs	r0, #12
   17182:	f7fb fdad 	bl	12ce0 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
   17186:	200c      	movs	r0, #12
   17188:	f7fb fd78 	bl	12c7c <arch_irq_enable>
    p_reg->INTENSET = mask;
   1718c:	4b02      	ldr	r3, [pc, #8]	; (17198 <temp_nrf5_init+0x3c>)
   1718e:	2201      	movs	r2, #1
   17190:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
   17194:	2000      	movs	r0, #0
   17196:	bd10      	pop	{r4, pc}
   17198:	4000c000 	.word	0x4000c000

0001719c <temp_nrf5_sample_fetch>:
{
   1719c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
   1719e:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
   171a0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   171a2:	b36b      	cbz	r3, 17200 <temp_nrf5_sample_fetch+0x64>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   171a4:	2938      	cmp	r1, #56	; 0x38
   171a6:	d001      	beq.n	171ac <temp_nrf5_sample_fetch+0x10>
   171a8:	290c      	cmp	r1, #12
   171aa:	d12c      	bne.n	17206 <temp_nrf5_sample_fetch+0x6a>
	k_mutex_lock(&data->mutex, K_FOREVER);
   171ac:	f105 0618 	add.w	r6, r5, #24
	return z_impl_k_mutex_lock(mutex, timeout);
   171b0:	f04f 32ff 	mov.w	r2, #4294967295
   171b4:	f04f 33ff 	mov.w	r3, #4294967295
   171b8:	4630      	mov	r0, r6
   171ba:	f001 fdb3 	bl	18d24 <z_impl_k_mutex_lock>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   171be:	4b13      	ldr	r3, [pc, #76]	; (1720c <temp_nrf5_sample_fetch+0x70>)
   171c0:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
   171c2:	6b28      	ldr	r0, [r5, #48]	; 0x30
   171c4:	2303      	movs	r3, #3
   171c6:	2400      	movs	r4, #0
   171c8:	4669      	mov	r1, sp
   171ca:	9403      	str	r4, [sp, #12]
   171cc:	9302      	str	r3, [sp, #8]
   171ce:	f005 ff7e 	bl	1d0ce <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
   171d2:	f04f 32ff 	mov.w	r2, #4294967295
   171d6:	f04f 33ff 	mov.w	r3, #4294967295
   171da:	4628      	mov	r0, r5
   171dc:	f001 fec0 	bl	18f60 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
   171e0:	6b28      	ldr	r0, [r5, #48]	; 0x30
   171e2:	f005 ffbd 	bl	1d160 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
   171e6:	4b0a      	ldr	r3, [pc, #40]	; (17210 <temp_nrf5_sample_fetch+0x74>)
   171e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
   171ec:	62eb      	str	r3, [r5, #44]	; 0x2c
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
   171ee:	4b09      	ldr	r3, [pc, #36]	; (17214 <temp_nrf5_sample_fetch+0x78>)
   171f0:	2201      	movs	r2, #1
   171f2:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   171f4:	4630      	mov	r0, r6
   171f6:	f001 fe13 	bl	18e20 <z_impl_k_mutex_unlock>
	return 0;
   171fa:	4620      	mov	r0, r4
}
   171fc:	b004      	add	sp, #16
   171fe:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   17200:	f06f 000a 	mvn.w	r0, #10
   17204:	e7fa      	b.n	171fc <temp_nrf5_sample_fetch+0x60>
		return -ENOTSUP;
   17206:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1720a:	e7f7      	b.n	171fc <temp_nrf5_sample_fetch+0x60>
   1720c:	00017111 	.word	0x00017111
   17210:	4000c000 	.word	0x4000c000
   17214:	4000c004 	.word	0x4000c004

00017218 <random_byte_get>:
	__asm__ volatile(
   17218:	f04f 0340 	mov.w	r3, #64	; 0x40
   1721c:	f3ef 8211 	mrs	r2, BASEPRI
   17220:	f383 8811 	msr	BASEPRI, r3
   17224:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   17228:	4b08      	ldr	r3, [pc, #32]	; (1724c <random_byte_get+0x34>)
   1722a:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1722c:	b159      	cbz	r1, 17246 <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1722e:	4908      	ldr	r1, [pc, #32]	; (17250 <random_byte_get+0x38>)
   17230:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   17234:	2100      	movs	r1, #0
   17236:	6019      	str	r1, [r3, #0]
   17238:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1723a:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1723c:	f382 8811 	msr	BASEPRI, r2
   17240:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   17244:	4770      	bx	lr
	int retval = -EAGAIN;
   17246:	f06f 000a 	mvn.w	r0, #10
   1724a:	e7f7      	b.n	1723c <random_byte_get+0x24>
   1724c:	4000d100 	.word	0x4000d100
   17250:	4000d000 	.word	0x4000d000

00017254 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   17254:	b5f0      	push	{r4, r5, r6, r7, lr}
   17256:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   17258:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1725a:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1725c:	f04f 0540 	mov.w	r5, #64	; 0x40
   17260:	f3ef 8011 	mrs	r0, BASEPRI
   17264:	f385 8811 	msr	BASEPRI, r5
   17268:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1726c:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1726e:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   17272:	1ba4      	subs	r4, r4, r6
   17274:	403c      	ands	r4, r7
	if (available < len) {
   17276:	42a2      	cmp	r2, r4
		len = available;
   17278:	bf88      	it	hi
   1727a:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1727c:	eb06 0c02 	add.w	ip, r6, r2
   17280:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   17284:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   17286:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   1728a:	f380 8811 	msr	BASEPRI, r0
   1728e:	f3bf 8f6f 	isb	sy
   17292:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   17294:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   17296:	4282      	cmp	r2, r0
   17298:	d119      	bne.n	172ce <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1729a:	4576      	cmp	r6, lr
   1729c:	d10d      	bne.n	172ba <rng_pool_get+0x66>
	__asm__ volatile(
   1729e:	f04f 0540 	mov.w	r5, #64	; 0x40
   172a2:	f3ef 8211 	mrs	r2, BASEPRI
   172a6:	f385 8811 	msr	BASEPRI, r5
   172aa:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   172ae:	781d      	ldrb	r5, [r3, #0]
   172b0:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   172b2:	f382 8811 	msr	BASEPRI, r2
   172b6:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   172ba:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   172bc:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   172be:	b288      	uxth	r0, r1
	available = available - len;
   172c0:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   172c2:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   172c4:	bf22      	ittt	cs
   172c6:	4b06      	ldrcs	r3, [pc, #24]	; (172e0 <rng_pool_get+0x8c>)
   172c8:	2201      	movcs	r2, #1
   172ca:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   172cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   172ce:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   172d2:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   172d4:	f89c c005 	ldrb.w	ip, [ip, #5]
   172d8:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   172dc:	403d      	ands	r5, r7
   172de:	e7da      	b.n	17296 <rng_pool_get+0x42>
   172e0:	4000d000 	.word	0x4000d000

000172e4 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   172e4:	43db      	mvns	r3, r3
{
   172e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   172ea:	f013 0501 	ands.w	r5, r3, #1
{
   172ee:	460e      	mov	r6, r1
   172f0:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   172f2:	d004      	beq.n	172fe <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   172f4:	4821      	ldr	r0, [pc, #132]	; (1737c <entropy_nrf5_get_entropy_isr+0x98>)
   172f6:	f7ff ffad 	bl	17254 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   172fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   172fe:	2a00      	cmp	r2, #0
   17300:	d033      	beq.n	1736a <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   17302:	f04f 0340 	mov.w	r3, #64	; 0x40
   17306:	f3ef 8811 	mrs	r8, BASEPRI
   1730a:	f383 8811 	msr	BASEPRI, r3
   1730e:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   17312:	200d      	movs	r0, #13
   17314:	f7fb fcd6 	bl	12cc4 <arch_irq_is_enabled>
   17318:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1731a:	200d      	movs	r0, #13
   1731c:	f7fb fcbe 	bl	12c9c <arch_irq_disable>
	__asm__ volatile(
   17320:	f388 8811 	msr	BASEPRI, r8
   17324:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   17328:	4a15      	ldr	r2, [pc, #84]	; (17380 <entropy_nrf5_get_entropy_isr+0x9c>)
   1732a:	6015      	str	r5, [r2, #0]
   1732c:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1732e:	4b15      	ldr	r3, [pc, #84]	; (17384 <entropy_nrf5_get_entropy_isr+0xa0>)
   17330:	2101      	movs	r1, #1
   17332:	6019      	str	r1, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17334:	4914      	ldr	r1, [pc, #80]	; (17388 <entropy_nrf5_get_entropy_isr+0xa4>)
   17336:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1733a:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   1733e:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   17340:	4691      	mov	r9, r2
   17342:	468a      	mov	sl, r1
   17344:	4698      	mov	r8, r3
   17346:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   1734a:	b183      	cbz	r3, 1736e <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1734c:	f7ff ff64 	bl	17218 <random_byte_get>
			if (byte < 0) {
   17350:	1e03      	subs	r3, r0, #0
   17352:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   17356:	dbf6      	blt.n	17346 <entropy_nrf5_get_entropy_isr+0x62>
   17358:	3d01      	subs	r5, #1
   1735a:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1735c:	5573      	strb	r3, [r6, r5]
		} while (len);
   1735e:	2d00      	cmp	r5, #0
   17360:	d1f1      	bne.n	17346 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   17362:	b117      	cbz	r7, 1736a <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   17364:	200d      	movs	r0, #13
   17366:	f7fb fc89 	bl	12c7c <arch_irq_enable>
	return cnt;
   1736a:	4620      	mov	r0, r4
   1736c:	e7c5      	b.n	172fa <entropy_nrf5_get_entropy_isr+0x16>
   1736e:	f3bf 8f4f 	dsb	sy
				__WFE();
   17372:	bf20      	wfe
				__SEV();
   17374:	bf40      	sev
				__WFE();
   17376:	bf20      	wfe
   17378:	e7e5      	b.n	17346 <entropy_nrf5_get_entropy_isr+0x62>
   1737a:	bf00      	nop
   1737c:	20002634 	.word	0x20002634
   17380:	4000d100 	.word	0x4000d100
   17384:	4000d000 	.word	0x4000d000
   17388:	e000e100 	.word	0xe000e100

0001738c <entropy_nrf5_get_entropy>:
{
   1738c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   17390:	4f13      	ldr	r7, [pc, #76]	; (173e0 <entropy_nrf5_get_entropy+0x54>)
   17392:	460d      	mov	r5, r1
   17394:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   17396:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1739a:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1739e:	b914      	cbnz	r4, 173a6 <entropy_nrf5_get_entropy+0x1a>
}
   173a0:	4620      	mov	r0, r4
   173a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   173a6:	f04f 33ff 	mov.w	r3, #4294967295
   173aa:	f04f 32ff 	mov.w	r2, #4294967295
   173ae:	4638      	mov	r0, r7
   173b0:	f001 fdd6 	bl	18f60 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   173b4:	4622      	mov	r2, r4
   173b6:	4629      	mov	r1, r5
   173b8:	4640      	mov	r0, r8
   173ba:	f7ff ff4b 	bl	17254 <rng_pool_get>
   173be:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   173c0:	4638      	mov	r0, r7
   173c2:	f001 fda7 	bl	18f14 <z_impl_k_sem_give>
		if (bytes == 0U) {
   173c6:	b93e      	cbnz	r6, 173d8 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   173c8:	f04f 32ff 	mov.w	r2, #4294967295
   173cc:	f04f 33ff 	mov.w	r3, #4294967295
   173d0:	4648      	mov	r0, r9
   173d2:	f001 fdc5 	bl	18f60 <z_impl_k_sem_take>
			continue;
   173d6:	e7e2      	b.n	1739e <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   173d8:	1ba4      	subs	r4, r4, r6
   173da:	b2a4      	uxth	r4, r4
		buf += bytes;
   173dc:	4435      	add	r5, r6
   173de:	e7de      	b.n	1739e <entropy_nrf5_get_entropy+0x12>
   173e0:	20002604 	.word	0x20002604

000173e4 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   173e4:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   173e6:	4c19      	ldr	r4, [pc, #100]	; (1744c <entropy_nrf5_init+0x68>)
   173e8:	2201      	movs	r2, #1
   173ea:	4611      	mov	r1, r2
   173ec:	4620      	mov	r0, r4
   173ee:	f008 ff88 	bl	20302 <z_impl_k_sem_init>
   173f2:	2201      	movs	r2, #1
   173f4:	2100      	movs	r1, #0
   173f6:	f104 0018 	add.w	r0, r4, #24
   173fa:	f008 ff82 	bl	20302 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   173fe:	f240 4307 	movw	r3, #1031	; 0x407
   17402:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   17406:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1740a:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1740c:	230c      	movs	r3, #12
   1740e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   17412:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   17414:	4b0e      	ldr	r3, [pc, #56]	; (17450 <entropy_nrf5_init+0x6c>)
   17416:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1741a:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1741e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   17422:	f022 0201 	bic.w	r2, r2, #1
   17426:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1742a:	4a0a      	ldr	r2, [pc, #40]	; (17454 <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   1742c:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1742e:	6015      	str	r5, [r2, #0]
   17430:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   17432:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   17436:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   17438:	6019      	str	r1, [r3, #0]
   1743a:	200d      	movs	r0, #13
   1743c:	f7fb fc50 	bl	12ce0 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   17440:	200d      	movs	r0, #13
   17442:	f7fb fc1b 	bl	12c7c <arch_irq_enable>

	return 0;
}
   17446:	4628      	mov	r0, r5
   17448:	bd38      	pop	{r3, r4, r5, pc}
   1744a:	bf00      	nop
   1744c:	20002604 	.word	0x20002604
   17450:	4000d000 	.word	0x4000d000
   17454:	4000d100 	.word	0x4000d100

00017458 <isr>:
{
   17458:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1745a:	f7ff fedd 	bl	17218 <random_byte_get>
	if (byte < 0) {
   1745e:	2800      	cmp	r0, #0
   17460:	db20      	blt.n	174a4 <isr+0x4c>
	uint8_t last  = rngp->last;
   17462:	4b17      	ldr	r3, [pc, #92]	; (174c0 <isr+0x68>)
   17464:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   17468:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1746c:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   17470:	1a51      	subs	r1, r2, r1
   17472:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   17476:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   17478:	d10d      	bne.n	17496 <isr+0x3e>
	uint8_t last  = rngp->last;
   1747a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1747e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   17482:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   17486:	1a51      	subs	r1, r2, r1
   17488:	ea34 0101 	bics.w	r1, r4, r1
   1748c:	d10b      	bne.n	174a6 <isr+0x4e>
   1748e:	4b0d      	ldr	r3, [pc, #52]	; (174c4 <isr+0x6c>)
   17490:	2201      	movs	r2, #1
   17492:	601a      	str	r2, [r3, #0]
}
   17494:	e00e      	b.n	174b4 <isr+0x5c>
	rngp->buffer[last] = byte;
   17496:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   17498:	3201      	adds	r2, #1
   1749a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1749c:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   174a0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   174a4:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   174a6:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   174a8:	3201      	adds	r2, #1
   174aa:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   174ac:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   174b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   174b4:	4804      	ldr	r0, [pc, #16]	; (174c8 <isr+0x70>)
}
   174b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   174ba:	f001 bd2b 	b.w	18f14 <z_impl_k_sem_give>
   174be:	bf00      	nop
   174c0:	20002604 	.word	0x20002604
   174c4:	4000d004 	.word	0x4000d004
   174c8:	2000261c 	.word	0x2000261c

000174cc <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   174cc:	4602      	mov	r2, r0
   174ce:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   174d0:	4801      	ldr	r0, [pc, #4]	; (174d8 <multithreading_lock_acquire+0xc>)
   174d2:	f001 bc27 	b.w	18d24 <z_impl_k_mutex_lock>
   174d6:	bf00      	nop
   174d8:	20000898 	.word	0x20000898

000174dc <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   174dc:	4801      	ldr	r0, [pc, #4]	; (174e4 <multithreading_lock_release+0x8>)
   174de:	f001 bc9f 	b.w	18e20 <z_impl_k_mutex_unlock>
   174e2:	bf00      	nop
   174e4:	20000898 	.word	0x20000898

000174e8 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   174e8:	460a      	mov	r2, r1
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   174ea:	4905      	ldr	r1, [pc, #20]	; (17500 <rand_prio_low_vector_get_blocking+0x18>)
{
   174ec:	b410      	push	{r4}
   174ee:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   174f0:	6808      	ldr	r0, [r1, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   174f2:	6881      	ldr	r1, [r0, #8]
   174f4:	680c      	ldr	r4, [r1, #0]
   174f6:	4619      	mov	r1, r3
   174f8:	4623      	mov	r3, r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   174fa:	bc10      	pop	{r4}
   174fc:	4718      	bx	r3
   174fe:	bf00      	nop
   17500:	2000265c 	.word	0x2000265c

00017504 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   17504:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   17506:	4804      	ldr	r0, [pc, #16]	; (17518 <hci_driver_init+0x14>)
   17508:	f7fc fe30 	bl	1416c <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1750c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   17510:	4802      	ldr	r0, [pc, #8]	; (1751c <hci_driver_init+0x18>)
   17512:	f7ed ba23 	b.w	495c <sdc_init>
   17516:	bf00      	nop
   17518:	000217b0 	.word	0x000217b0
   1751c:	0001fe61 	.word	0x0001fe61

00017520 <rand_prio_low_vector_get>:
{
   17520:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   17522:	4b08      	ldr	r3, [pc, #32]	; (17544 <rand_prio_low_vector_get+0x24>)
{
   17524:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   17526:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   17528:	6883      	ldr	r3, [r0, #8]
   1752a:	685d      	ldr	r5, [r3, #4]
   1752c:	460a      	mov	r2, r1
   1752e:	b135      	cbz	r5, 1753e <rand_prio_low_vector_get+0x1e>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   17530:	2300      	movs	r3, #0
   17532:	4621      	mov	r1, r4
   17534:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   17536:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1753a:	b2c0      	uxtb	r0, r0
   1753c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1753e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   17542:	e7f8      	b.n	17536 <rand_prio_low_vector_get+0x16>
   17544:	2000265c 	.word	0x2000265c

00017548 <hci_driver_open>:
{
   17548:	b570      	push	{r4, r5, r6, lr}
   1754a:	b090      	sub	sp, #64	; 0x40
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1754c:	2200      	movs	r2, #0
   1754e:	2300      	movs	r3, #0
   17550:	e9cd 2306 	strd	r2, r3, [sp, #24]
   17554:	2300      	movs	r3, #0
   17556:	f06f 0209 	mvn.w	r2, #9
   1755a:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1755e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   17562:	9300      	str	r3, [sp, #0]
   17564:	4941      	ldr	r1, [pc, #260]	; (1766c <hci_driver_open+0x124>)
   17566:	4b42      	ldr	r3, [pc, #264]	; (17670 <hci_driver_open+0x128>)
   17568:	4842      	ldr	r0, [pc, #264]	; (17674 <hci_driver_open+0x12c>)
   1756a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1756e:	f001 fb39 	bl	18be4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   17572:	4941      	ldr	r1, [pc, #260]	; (17678 <hci_driver_open+0x130>)
   17574:	483f      	ldr	r0, [pc, #252]	; (17674 <hci_driver_open+0x12c>)
   17576:	f008 fde4 	bl	20142 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   1757a:	a80b      	add	r0, sp, #44	; 0x2c
   1757c:	f7ed f970 	bl	4860 <sdc_build_revision_get>
			err = sdc_support_adv();
   17580:	f7ed fa6a 	bl	4a58 <sdc_support_adv>
			if (err) {
   17584:	b110      	cbz	r0, 1758c <hci_driver_open+0x44>
		return -err;
   17586:	2086      	movs	r0, #134	; 0x86
}
   17588:	b010      	add	sp, #64	; 0x40
   1758a:	bd70      	pop	{r4, r5, r6, pc}
		err = sdc_support_slave();
   1758c:	f7ed fa94 	bl	4ab8 <sdc_support_slave>
		if (err) {
   17590:	2800      	cmp	r0, #0
   17592:	d1f8      	bne.n	17586 <hci_driver_open+0x3e>
		err = sdc_support_dle();
   17594:	f7ed fa70 	bl	4a78 <sdc_support_dle>
		if (err) {
   17598:	2800      	cmp	r0, #0
   1759a:	d1f4      	bne.n	17586 <hci_driver_open+0x3e>
		err = sdc_support_le_2m_phy();
   1759c:	f7ed fa7c 	bl	4a98 <sdc_support_le_2m_phy>
		if (err) {
   175a0:	4605      	mov	r5, r0
   175a2:	2800      	cmp	r0, #0
   175a4:	d1ef      	bne.n	17586 <hci_driver_open+0x3e>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   175a6:	ac08      	add	r4, sp, #32
   175a8:	4622      	mov	r2, r4
   175aa:	2101      	movs	r1, #1
	cfg.master_count.count = SDC_MASTER_COUNT;
   175ac:	f88d 0020 	strb.w	r0, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   175b0:	f7ed f964 	bl	487c <sdc_cfg_set>
	if (required_memory < 0) {
   175b4:	2800      	cmp	r0, #0
   175b6:	dbe7      	blt.n	17588 <hci_driver_open+0x40>
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   175b8:	2601      	movs	r6, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   175ba:	4622      	mov	r2, r4
   175bc:	2102      	movs	r1, #2
   175be:	4628      	mov	r0, r5
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   175c0:	f88d 6020 	strb.w	r6, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   175c4:	f7ed f95a 	bl	487c <sdc_cfg_set>
	if (required_memory < 0) {
   175c8:	2800      	cmp	r0, #0
   175ca:	dbdd      	blt.n	17588 <hci_driver_open+0x40>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   175cc:	4b2b      	ldr	r3, [pc, #172]	; (1767c <hci_driver_open+0x134>)
   175ce:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   175d0:	4622      	mov	r2, r4
   175d2:	2103      	movs	r1, #3
   175d4:	4628      	mov	r0, r5
   175d6:	f7ed f951 	bl	487c <sdc_cfg_set>
	if (required_memory < 0) {
   175da:	2800      	cmp	r0, #0
   175dc:	dbd4      	blt.n	17588 <hci_driver_open+0x40>
	cfg.event_length.event_length_us =
   175de:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   175e2:	4622      	mov	r2, r4
   175e4:	2104      	movs	r1, #4
   175e6:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   175e8:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   175ea:	f7ed f947 	bl	487c <sdc_cfg_set>
	if (required_memory < 0) {
   175ee:	2800      	cmp	r0, #0
   175f0:	dbca      	blt.n	17588 <hci_driver_open+0x40>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   175f2:	4622      	mov	r2, r4
   175f4:	2105      	movs	r1, #5
   175f6:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   175f8:	f88d 6020 	strb.w	r6, [sp, #32]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   175fc:	f7ed f93e 	bl	487c <sdc_cfg_set>
	if (required_memory < 0) {
   17600:	2800      	cmp	r0, #0
   17602:	dbc1      	blt.n	17588 <hci_driver_open+0x40>
	if (required_memory > sizeof(sdc_mempool)) {
   17604:	f640 3346 	movw	r3, #2886	; 0xb46
   17608:	4298      	cmp	r0, r3
   1760a:	dd08      	ble.n	1761e <hci_driver_open+0xd6>
		k_panic();
   1760c:	4040      	eors	r0, r0
   1760e:	f380 8811 	msr	BASEPRI, r0
   17612:	f04f 0004 	mov.w	r0, #4
   17616:	df02      	svc	2
		return -ENOMEM;
   17618:	f06f 000b 	mvn.w	r0, #11
   1761c:	e7b4      	b.n	17588 <hci_driver_open+0x40>
   1761e:	4818      	ldr	r0, [pc, #96]	; (17680 <hci_driver_open+0x138>)
   17620:	f001 f972 	bl	18908 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   17624:	4b17      	ldr	r3, [pc, #92]	; (17684 <hci_driver_open+0x13c>)
   17626:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   17628:	b1e8      	cbz	r0, 17666 <hci_driver_open+0x11e>
	sdc_rand_source_t rand_functions = {
   1762a:	4b17      	ldr	r3, [pc, #92]	; (17688 <hci_driver_open+0x140>)
   1762c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   17630:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   17634:	4620      	mov	r0, r4
   17636:	f7ed faab 	bl	4b90 <sdc_rand_source_register>
	if (err) {
   1763a:	b988      	cbnz	r0, 17660 <hci_driver_open+0x118>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1763c:	f04f 30ff 	mov.w	r0, #4294967295
   17640:	f04f 31ff 	mov.w	r1, #4294967295
   17644:	f7ff ff42 	bl	174cc <multithreading_lock_acquire>
	if (!err) {
   17648:	4604      	mov	r4, r0
   1764a:	b930      	cbnz	r0, 1765a <hci_driver_open+0x112>
		err = sdc_enable(host_signal, sdc_mempool);
   1764c:	490f      	ldr	r1, [pc, #60]	; (1768c <hci_driver_open+0x144>)
   1764e:	4810      	ldr	r0, [pc, #64]	; (17690 <hci_driver_open+0x148>)
   17650:	f7ed f956 	bl	4900 <sdc_enable>
   17654:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   17656:	f7ff ff41 	bl	174dc <multithreading_lock_release>
	if (err < 0) {
   1765a:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1765e:	e793      	b.n	17588 <hci_driver_open+0x40>
		return -EINVAL;
   17660:	f06f 0015 	mvn.w	r0, #21
   17664:	e790      	b.n	17588 <hci_driver_open+0x40>
		return -ENODEV;
   17666:	f06f 0012 	mvn.w	r0, #18
   1766a:	e78d      	b.n	17588 <hci_driver_open+0x40>
   1766c:	20004da0 	.word	0x20004da0
   17670:	00017695 	.word	0x00017695
   17674:	20001a88 	.word	0x20001a88
   17678:	00021f2b 	.word	0x00021f2b
   1767c:	0203fbfb 	.word	0x0203fbfb
   17680:	00021f1c 	.word	0x00021f1c
   17684:	2000265c 	.word	0x2000265c
   17688:	00020f78 	.word	0x00020f78
   1768c:	20003206 	.word	0x20003206
   17690:	00017775 	.word	0x00017775

00017694 <recv_thread>:
{
   17694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool received_data = false;
   17696:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
   17698:	4f34      	ldr	r7, [pc, #208]	; (1776c <recv_thread+0xd8>)
		errcode = hci_internal_evt_get(p_hci_buffer);
   1769a:	4c35      	ldr	r4, [pc, #212]	; (17770 <recv_thread+0xdc>)
	bool received_evt = false;
   1769c:	462e      	mov	r6, r5
		if (!received_evt && !received_data) {
   1769e:	b93e      	cbnz	r6, 176b0 <recv_thread+0x1c>
   176a0:	b935      	cbnz	r5, 176b0 <recv_thread+0x1c>
   176a2:	f04f 32ff 	mov.w	r2, #4294967295
   176a6:	f04f 33ff 	mov.w	r3, #4294967295
   176aa:	4638      	mov	r0, r7
   176ac:	f001 fc58 	bl	18f60 <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   176b0:	f04f 30ff 	mov.w	r0, #4294967295
   176b4:	f04f 31ff 	mov.w	r1, #4294967295
   176b8:	f7ff ff08 	bl	174cc <multithreading_lock_acquire>
	if (!errcode) {
   176bc:	b158      	cbz	r0, 176d6 <recv_thread+0x42>
		return false;
   176be:	2600      	movs	r6, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   176c0:	f04f 30ff 	mov.w	r0, #4294967295
   176c4:	f04f 31ff 	mov.w	r1, #4294967295
   176c8:	f7ff ff00 	bl	174cc <multithreading_lock_acquire>
	if (!errcode) {
   176cc:	b380      	cbz	r0, 17730 <recv_thread+0x9c>
		return false;
   176ce:	2500      	movs	r5, #0
	z_impl_k_yield();
   176d0:	f002 f896 	bl	19800 <z_impl_k_yield>
}
   176d4:	e7e3      	b.n	1769e <recv_thread+0xa>
		errcode = hci_internal_evt_get(p_hci_buffer);
   176d6:	4826      	ldr	r0, [pc, #152]	; (17770 <recv_thread+0xdc>)
   176d8:	f000 fb60 	bl	17d9c <hci_internal_evt_get>
   176dc:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   176de:	f7ff fefd 	bl	174dc <multithreading_lock_release>
	if (errcode) {
   176e2:	2d00      	cmp	r5, #0
   176e4:	d1eb      	bne.n	176be <recv_thread+0x2a>
	switch (hdr->evt) {
   176e6:	7820      	ldrb	r0, [r4, #0]
   176e8:	283e      	cmp	r0, #62	; 0x3e
   176ea:	d007      	beq.n	176fc <recv_thread+0x68>
   176ec:	28ff      	cmp	r0, #255	; 0xff
   176ee:	d01c      	beq.n	1772a <recv_thread+0x96>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   176f0:	f04f 32ff 	mov.w	r2, #4294967295
   176f4:	f04f 33ff 	mov.w	r3, #4294967295
   176f8:	2100      	movs	r1, #0
   176fa:	e007      	b.n	1770c <recv_thread+0x78>
		switch (me->subevent) {
   176fc:	78a3      	ldrb	r3, [r4, #2]
   176fe:	2b02      	cmp	r3, #2
   17700:	d001      	beq.n	17706 <recv_thread+0x72>
   17702:	2b0d      	cmp	r3, #13
		switch (subevent) {
   17704:	d1f4      	bne.n	176f0 <recv_thread+0x5c>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   17706:	2200      	movs	r2, #0
   17708:	2300      	movs	r3, #0
   1770a:	2101      	movs	r1, #1
   1770c:	f7fb fed8 	bl	134c0 <bt_buf_get_evt>
	if (!evt_buf) {
   17710:	4605      	mov	r5, r0
   17712:	b140      	cbz	r0, 17726 <recv_thread+0x92>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   17714:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17716:	4621      	mov	r1, r4
   17718:	3202      	adds	r2, #2
   1771a:	3008      	adds	r0, #8
   1771c:	f008 fa89 	bl	1fc32 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   17720:	4628      	mov	r0, r5
   17722:	f7fc fd01 	bl	14128 <bt_recv>
	return true;
   17726:	2601      	movs	r6, #1
   17728:	e7ca      	b.n	176c0 <recv_thread+0x2c>
		switch (subevent) {
   1772a:	78a3      	ldrb	r3, [r4, #2]
   1772c:	2b80      	cmp	r3, #128	; 0x80
   1772e:	e7e9      	b.n	17704 <recv_thread+0x70>
		errcode = sdc_hci_data_get(p_hci_buffer);
   17730:	480f      	ldr	r0, [pc, #60]	; (17770 <recv_thread+0xdc>)
   17732:	f7f5 fb30 	bl	cd96 <sdc_hci_data_get>
   17736:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   17738:	f7ff fed0 	bl	174dc <multithreading_lock_release>
	if (errcode) {
   1773c:	2d00      	cmp	r5, #0
   1773e:	d1c6      	bne.n	176ce <recv_thread+0x3a>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   17740:	f04f 32ff 	mov.w	r2, #4294967295
   17744:	f04f 33ff 	mov.w	r3, #4294967295
   17748:	2003      	movs	r0, #3
   1774a:	f7fb fe83 	bl	13454 <bt_buf_get_rx>
	if (!data_buf) {
   1774e:	4605      	mov	r5, r0
   17750:	b908      	cbnz	r0, 17756 <recv_thread+0xc2>
	return true;
   17752:	2501      	movs	r5, #1
   17754:	e7bc      	b.n	176d0 <recv_thread+0x3c>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   17756:	8862      	ldrh	r2, [r4, #2]
   17758:	4621      	mov	r1, r4
   1775a:	3204      	adds	r2, #4
   1775c:	3008      	adds	r0, #8
   1775e:	f008 fa68 	bl	1fc32 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   17762:	4628      	mov	r0, r5
   17764:	f7fc fce0 	bl	14128 <bt_recv>
   17768:	e7f3      	b.n	17752 <recv_thread+0xbe>
   1776a:	bf00      	nop
   1776c:	200008e8 	.word	0x200008e8
   17770:	20003107 	.word	0x20003107

00017774 <host_signal>:
	z_impl_k_sem_give(sem);
   17774:	4801      	ldr	r0, [pc, #4]	; (1777c <host_signal+0x8>)
   17776:	f001 bbcd 	b.w	18f14 <z_impl_k_sem_give>
   1777a:	bf00      	nop
   1777c:	200008e8 	.word	0x200008e8

00017780 <hci_driver_send>:
{
   17780:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   17782:	8983      	ldrh	r3, [r0, #12]
{
   17784:	4605      	mov	r5, r0
	if (!buf->len) {
   17786:	b383      	cbz	r3, 177ea <hci_driver_send+0x6a>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   17788:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   1778a:	b1ab      	cbz	r3, 177b8 <hci_driver_send+0x38>
   1778c:	2b02      	cmp	r3, #2
   1778e:	d12c      	bne.n	177ea <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   17790:	f04f 30ff 	mov.w	r0, #4294967295
   17794:	f04f 31ff 	mov.w	r1, #4294967295
   17798:	f7ff fe98 	bl	174cc <multithreading_lock_acquire>
	if (!errcode) {
   1779c:	4604      	mov	r4, r0
   1779e:	b948      	cbnz	r0, 177b4 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   177a0:	68a8      	ldr	r0, [r5, #8]
   177a2:	f7f5 fb05 	bl	cdb0 <sdc_hci_data_put>
   177a6:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   177a8:	f7ff fe98 	bl	174dc <multithreading_lock_release>
		if (errcode) {
   177ac:	b1c4      	cbz	r4, 177e0 <hci_driver_send+0x60>
   177ae:	4810      	ldr	r0, [pc, #64]	; (177f0 <hci_driver_send+0x70>)
   177b0:	f001 fbb0 	bl	18f14 <z_impl_k_sem_give>
}
   177b4:	4620      	mov	r0, r4
   177b6:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   177b8:	f04f 30ff 	mov.w	r0, #4294967295
   177bc:	f04f 31ff 	mov.w	r1, #4294967295
   177c0:	f7ff fe84 	bl	174cc <multithreading_lock_acquire>
	if (!errcode) {
   177c4:	4604      	mov	r4, r0
   177c6:	2800      	cmp	r0, #0
   177c8:	d1f4      	bne.n	177b4 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   177ca:	68a8      	ldr	r0, [r5, #8]
   177cc:	f000 f812 	bl	177f4 <hci_internal_cmd_put>
   177d0:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   177d2:	f7ff fe83 	bl	174dc <multithreading_lock_release>
	if (errcode) {
   177d6:	2c00      	cmp	r4, #0
   177d8:	d1ec      	bne.n	177b4 <hci_driver_send+0x34>
   177da:	4805      	ldr	r0, [pc, #20]	; (177f0 <hci_driver_send+0x70>)
   177dc:	f001 fb9a 	bl	18f14 <z_impl_k_sem_give>
		net_buf_unref(buf);
   177e0:	4628      	mov	r0, r5
   177e2:	f7ff f967 	bl	16ab4 <net_buf_unref>
   177e6:	2400      	movs	r4, #0
   177e8:	e7e4      	b.n	177b4 <hci_driver_send+0x34>
	switch (type) {
   177ea:	f06f 0415 	mvn.w	r4, #21
   177ee:	e7e1      	b.n	177b4 <hci_driver_send+0x34>
   177f0:	200008e8 	.word	0x200008e8

000177f4 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   177f4:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   177f6:	4cd6      	ldr	r4, [pc, #856]	; (17b50 <hci_internal_cmd_put+0x35c>)
   177f8:	7823      	ldrb	r3, [r4, #0]
   177fa:	2b00      	cmp	r3, #0
   177fc:	f040 82b9 	bne.w	17d72 <hci_internal_cmd_put+0x57e>
	return ((uint16_t)src[1] << 8) | src[0];
   17800:	7843      	ldrb	r3, [r0, #1]
   17802:	7805      	ldrb	r5, [r0, #0]
   17804:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   17808:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1780c:	b22e      	sxth	r6, r5
   1780e:	ea4f 2395 	mov.w	r3, r5, lsr #10
   17812:	d209      	bcs.n	17828 <hci_internal_cmd_put+0x34>
   17814:	b15b      	cbz	r3, 1782e <hci_internal_cmd_put+0x3a>
   17816:	3b01      	subs	r3, #1
   17818:	2b07      	cmp	r3, #7
   1781a:	d808      	bhi.n	1782e <hci_internal_cmd_put+0x3a>
   1781c:	e8df f003 	tbb	[pc, r3]
   17820:	5c28070a 	.word	0x5c28070a
   17824:	d2070707 	.word	0xd2070707
   17828:	2b3f      	cmp	r3, #63	; 0x3f
   1782a:	f000 8203 	beq.w	17c34 <hci_internal_cmd_put+0x440>
   1782e:	2104      	movs	r1, #4
   17830:	2001      	movs	r0, #1
   17832:	e23b      	b.n	17cac <hci_internal_cmd_put+0x4b8>
	switch (opcode)	{
   17834:	f240 4306 	movw	r3, #1030	; 0x406
   17838:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1783a:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1783e:	d005      	beq.n	1784c <hci_internal_cmd_put+0x58>
   17840:	f240 431d 	movw	r3, #1053	; 0x41d
   17844:	429e      	cmp	r6, r3
   17846:	d010      	beq.n	1786a <hci_internal_cmd_put+0x76>
	switch (opcode)	{
   17848:	2001      	movs	r0, #1
   1784a:	e001      	b.n	17850 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1784c:	f7f5 fbd2 	bl	cff4 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   17850:	230f      	movs	r3, #15
   17852:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   17854:	2304      	movs	r3, #4
   17856:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   17858:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1785a:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1785c:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1785e:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   17862:	2301      	movs	r3, #1
   17864:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   17866:	2000      	movs	r0, #0
}
   17868:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1786a:	f7f5 fbc5 	bl	cff8 <sdc_hci_cmd_lc_read_remote_version_information>
   1786e:	e7ef      	b.n	17850 <hci_internal_cmd_put+0x5c>
	switch (opcode)	{
   17870:	f640 4363 	movw	r3, #3171	; 0xc63
   17874:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   17876:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1787a:	d025      	beq.n	178c8 <hci_internal_cmd_put+0xd4>
   1787c:	dc0f      	bgt.n	1789e <hci_internal_cmd_put+0xaa>
   1787e:	f640 4303 	movw	r3, #3075	; 0xc03
   17882:	429e      	cmp	r6, r3
   17884:	d018      	beq.n	178b8 <hci_internal_cmd_put+0xc4>
   17886:	f640 432d 	movw	r3, #3117	; 0xc2d
   1788a:	429e      	cmp	r6, r3
   1788c:	d017      	beq.n	178be <hci_internal_cmd_put+0xca>
   1788e:	f640 4301 	movw	r3, #3073	; 0xc01
   17892:	429e      	cmp	r6, r3
   17894:	d1d8      	bne.n	17848 <hci_internal_cmd_put+0x54>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   17896:	f7f5 faa7 	bl	cde8 <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1789a:	2104      	movs	r1, #4
   1789c:	e08f      	b.n	179be <hci_internal_cmd_put+0x1ca>
	switch (opcode)	{
   1789e:	f640 437b 	movw	r3, #3195	; 0xc7b
   178a2:	429e      	cmp	r6, r3
   178a4:	d013      	beq.n	178ce <hci_internal_cmd_put+0xda>
   178a6:	f640 437c 	movw	r3, #3196	; 0xc7c
   178aa:	429e      	cmp	r6, r3
   178ac:	d1cc      	bne.n	17848 <hci_internal_cmd_put+0x54>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   178ae:	49a9      	ldr	r1, [pc, #676]	; (17b54 <hci_internal_cmd_put+0x360>)
   178b0:	f7f5 faa4 	bl	cdfc <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   178b4:	2106      	movs	r1, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   178b6:	e082      	b.n	179be <hci_internal_cmd_put+0x1ca>
		return sdc_hci_cmd_cb_reset();
   178b8:	f7ed fa60 	bl	4d7c <sdc_hci_cmd_cb_reset>
   178bc:	e7ed      	b.n	1789a <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   178be:	49a5      	ldr	r1, [pc, #660]	; (17b54 <hci_internal_cmd_put+0x360>)
   178c0:	f7f5 fa90 	bl	cde4 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   178c4:	2107      	movs	r1, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   178c6:	e07a      	b.n	179be <hci_internal_cmd_put+0x1ca>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   178c8:	f7f5 fa93 	bl	cdf2 <sdc_hci_cmd_cb_set_event_mask_page_2>
   178cc:	e7e5      	b.n	1789a <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   178ce:	49a1      	ldr	r1, [pc, #644]	; (17b54 <hci_internal_cmd_put+0x360>)
   178d0:	f7f5 fa86 	bl	cde0 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   178d4:	2108      	movs	r1, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   178d6:	e072      	b.n	179be <hci_internal_cmd_put+0x1ca>
	switch (opcode)	{
   178d8:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   178dc:	3e01      	subs	r6, #1
   178de:	2e08      	cmp	r6, #8
   178e0:	d8b2      	bhi.n	17848 <hci_internal_cmd_put+0x54>
   178e2:	a301      	add	r3, pc, #4	; (adr r3, 178e8 <hci_internal_cmd_put+0xf4>)
   178e4:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   178e8:	0001790d 	.word	0x0001790d
   178ec:	00017917 	.word	0x00017917
   178f0:	0001798f 	.word	0x0001798f
   178f4:	00017849 	.word	0x00017849
   178f8:	00017849 	.word	0x00017849
   178fc:	00017849 	.word	0x00017849
   17900:	00017849 	.word	0x00017849
   17904:	00017849 	.word	0x00017849
   17908:	000179b7 	.word	0x000179b7
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1790c:	4891      	ldr	r0, [pc, #580]	; (17b54 <hci_internal_cmd_put+0x360>)
   1790e:	f7f5 fb26 	bl	cf5e <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   17912:	210c      	movs	r1, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   17914:	e053      	b.n	179be <hci_internal_cmd_put+0x1ca>
	memset(cmds, 0, sizeof(*cmds));
   17916:	488f      	ldr	r0, [pc, #572]	; (17b54 <hci_internal_cmd_put+0x360>)
   17918:	222e      	movs	r2, #46	; 0x2e
   1791a:	2100      	movs	r1, #0
   1791c:	f009 f8e8 	bl	20af0 <memset>
	cmds->hci_disconnect = 1;
   17920:	2320      	movs	r3, #32
   17922:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   17924:	2380      	movs	r3, #128	; 0x80
   17926:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   17928:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   1792c:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1792e:	2304      	movs	r3, #4
   17930:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   17932:	2328      	movs	r3, #40	; 0x28
   17934:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   17936:	2302      	movs	r3, #2
   17938:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1793a:	2304      	movs	r3, #4
   1793c:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1793e:	f06f 0308 	mvn.w	r3, #8
   17942:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   17946:	f06f 033c 	mvn.w	r3, #60	; 0x3c
   1794a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   1794e:	f06f 030c 	mvn.w	r3, #12
   17952:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   17956:	237f      	movs	r3, #127	; 0x7f
   17958:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1795c:	2330      	movs	r3, #48	; 0x30
   1795e:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   17962:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   17966:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1796a:	2379      	movs	r3, #121	; 0x79
   1796c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   17970:	f06f 0301 	mvn.w	r3, #1
   17974:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   17978:	2301      	movs	r3, #1
   1797a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1797e:	2380      	movs	r3, #128	; 0x80
   17980:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   17984:	2304      	movs	r3, #4
   17986:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->read_supported_vs_commands = 1;
   1798a:	2144      	movs	r1, #68	; 0x44
   1798c:	e11d      	b.n	17bca <hci_internal_cmd_put+0x3d6>
	memset(features, 0, sizeof(*features));
   1798e:	4b71      	ldr	r3, [pc, #452]	; (17b54 <hci_internal_cmd_put+0x360>)
   17990:	2000      	movs	r0, #0
   17992:	f8c4 0007 	str.w	r0, [r4, #7]
   17996:	6058      	str	r0, [r3, #4]
	features->bdedr_not_supported = 1;
   17998:	7ae3      	ldrb	r3, [r4, #11]
   1799a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1799e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   179a2:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   179a4:	210c      	movs	r1, #12
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   179a6:	230e      	movs	r3, #14
   179a8:	7063      	strb	r3, [r4, #1]
	evt_data->ncmd = 1;
   179aa:	2301      	movs	r3, #1
	evt_hdr->len = param_length;
   179ac:	70a1      	strb	r1, [r4, #2]
	evt_data->ncmd = 1;
   179ae:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   179b0:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   179b2:	71a0      	strb	r0, [r4, #6]
}
   179b4:	e755      	b.n	17862 <hci_internal_cmd_put+0x6e>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   179b6:	4867      	ldr	r0, [pc, #412]	; (17b54 <hci_internal_cmd_put+0x360>)
   179b8:	f7f5 facf 	bl	cf5a <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   179bc:	210a      	movs	r1, #10
	if (!command_generates_command_complete_event(opcode) ||
   179be:	2801      	cmp	r0, #1
   179c0:	d1f1      	bne.n	179a6 <hci_internal_cmd_put+0x1b2>
   179c2:	e745      	b.n	17850 <hci_internal_cmd_put+0x5c>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   179c4:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   179c8:	3e01      	subs	r6, #1
   179ca:	3003      	adds	r0, #3
	switch (opcode)	{
   179cc:	2e4d      	cmp	r6, #77	; 0x4d
   179ce:	f63f af3b 	bhi.w	17848 <hci_internal_cmd_put+0x54>
   179d2:	a301      	add	r3, pc, #4	; (adr r3, 179d8 <hci_internal_cmd_put+0x1e4>)
   179d4:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   179d8:	00017b11 	.word	0x00017b11
   179dc:	00017b17 	.word	0x00017b17
   179e0:	00017b1f 	.word	0x00017b1f
   179e4:	00017849 	.word	0x00017849
   179e8:	00017b43 	.word	0x00017b43
   179ec:	00017b49 	.word	0x00017b49
   179f0:	00017b59 	.word	0x00017b59
   179f4:	00017b63 	.word	0x00017b63
   179f8:	00017b69 	.word	0x00017b69
   179fc:	00017b6f 	.word	0x00017b6f
   17a00:	00017849 	.word	0x00017849
   17a04:	00017849 	.word	0x00017849
   17a08:	00017849 	.word	0x00017849
   17a0c:	00017849 	.word	0x00017849
   17a10:	00017b75 	.word	0x00017b75
   17a14:	00017b7d 	.word	0x00017b7d
   17a18:	00017b83 	.word	0x00017b83
   17a1c:	00017b89 	.word	0x00017b89
   17a20:	00017849 	.word	0x00017849
   17a24:	00017849 	.word	0x00017849
   17a28:	00017b8f 	.word	0x00017b8f
   17a2c:	00017b99 	.word	0x00017b99
   17a30:	00017b9f 	.word	0x00017b9f
   17a34:	00017ba9 	.word	0x00017ba9
   17a38:	00017849 	.word	0x00017849
   17a3c:	00017bb1 	.word	0x00017bb1
   17a40:	00017bb9 	.word	0x00017bb9
   17a44:	00017bc1 	.word	0x00017bc1
   17a48:	00017849 	.word	0x00017849
   17a4c:	00017849 	.word	0x00017849
   17a50:	00017849 	.word	0x00017849
   17a54:	00017849 	.word	0x00017849
   17a58:	00017849 	.word	0x00017849
   17a5c:	00017bcf 	.word	0x00017bcf
   17a60:	00017bd7 	.word	0x00017bd7
   17a64:	00017bdf 	.word	0x00017bdf
   17a68:	00017849 	.word	0x00017849
   17a6c:	00017849 	.word	0x00017849
   17a70:	00017be5 	.word	0x00017be5
   17a74:	00017beb 	.word	0x00017beb
   17a78:	00017bf1 	.word	0x00017bf1
   17a7c:	00017bf7 	.word	0x00017bf7
   17a80:	00017849 	.word	0x00017849
   17a84:	00017849 	.word	0x00017849
   17a88:	00017bff 	.word	0x00017bff
   17a8c:	00017c05 	.word	0x00017c05
   17a90:	00017c0b 	.word	0x00017c0b
   17a94:	00017c13 	.word	0x00017c13
   17a98:	00017c1b 	.word	0x00017c1b
   17a9c:	00017c21 	.word	0x00017c21
   17aa0:	00017849 	.word	0x00017849
   17aa4:	00017849 	.word	0x00017849
   17aa8:	00017849 	.word	0x00017849
   17aac:	00017849 	.word	0x00017849
   17ab0:	00017849 	.word	0x00017849
   17ab4:	00017849 	.word	0x00017849
   17ab8:	00017849 	.word	0x00017849
   17abc:	00017849 	.word	0x00017849
   17ac0:	00017849 	.word	0x00017849
   17ac4:	00017849 	.word	0x00017849
   17ac8:	00017849 	.word	0x00017849
   17acc:	00017849 	.word	0x00017849
   17ad0:	00017849 	.word	0x00017849
   17ad4:	00017849 	.word	0x00017849
   17ad8:	00017849 	.word	0x00017849
   17adc:	00017849 	.word	0x00017849
   17ae0:	00017849 	.word	0x00017849
   17ae4:	00017849 	.word	0x00017849
   17ae8:	00017849 	.word	0x00017849
   17aec:	00017849 	.word	0x00017849
   17af0:	00017849 	.word	0x00017849
   17af4:	00017849 	.word	0x00017849
   17af8:	00017849 	.word	0x00017849
   17afc:	00017849 	.word	0x00017849
   17b00:	00017c27 	.word	0x00017c27
   17b04:	00017849 	.word	0x00017849
   17b08:	00017849 	.word	0x00017849
   17b0c:	00017c2f 	.word	0x00017c2f
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   17b10:	f7f5 fa5f 	bl	cfd2 <sdc_hci_cmd_le_set_event_mask>
   17b14:	e6c1      	b.n	1789a <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   17b16:	480f      	ldr	r0, [pc, #60]	; (17b54 <hci_internal_cmd_put+0x360>)
   17b18:	f7f5 fa39 	bl	cf8e <sdc_hci_cmd_le_read_buffer_size>
   17b1c:	e6d2      	b.n	178c4 <hci_internal_cmd_put+0xd0>
	memset(features, 0, sizeof(*features));
   17b1e:	4b0d      	ldr	r3, [pc, #52]	; (17b54 <hci_internal_cmd_put+0x360>)
   17b20:	2000      	movs	r0, #0
   17b22:	f8c4 0007 	str.w	r0, [r4, #7]
   17b26:	7118      	strb	r0, [r3, #4]
	features->le_encryption = 1;
   17b28:	79e3      	ldrb	r3, [r4, #7]
   17b2a:	f023 0375 	bic.w	r3, r3, #117	; 0x75
   17b2e:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   17b32:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   17b34:	7a23      	ldrb	r3, [r4, #8]
   17b36:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   17b3a:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   17b3e:	7223      	strb	r3, [r4, #8]
   17b40:	e730      	b.n	179a4 <hci_internal_cmd_put+0x1b0>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   17b42:	f7f5 fa4f 	bl	cfe4 <sdc_hci_cmd_le_set_random_address>
   17b46:	e6a8      	b.n	1789a <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   17b48:	f7f5 fa3d 	bl	cfc6 <sdc_hci_cmd_le_set_adv_params>
   17b4c:	e6a5      	b.n	1789a <hci_internal_cmd_put+0xa6>
   17b4e:	bf00      	nop
   17b50:	20003d4c 	.word	0x20003d4c
   17b54:	20003d53 	.word	0x20003d53
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   17b58:	488f      	ldr	r0, [pc, #572]	; (17d98 <hci_internal_cmd_put+0x5a4>)
   17b5a:	f7f5 fa16 	bl	cf8a <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   17b5e:	2105      	movs	r1, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   17b60:	e72d      	b.n	179be <hci_internal_cmd_put+0x1ca>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   17b62:	f7f5 fa2c 	bl	cfbe <sdc_hci_cmd_le_set_adv_data>
   17b66:	e698      	b.n	1789a <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   17b68:	f7f5 fa40 	bl	cfec <sdc_hci_cmd_le_set_scan_response_data>
   17b6c:	e695      	b.n	1789a <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   17b6e:	f7f5 fa28 	bl	cfc2 <sdc_hci_cmd_le_set_adv_enable>
   17b72:	e692      	b.n	1789a <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   17b74:	4888      	ldr	r0, [pc, #544]	; (17d98 <hci_internal_cmd_put+0x5a4>)
   17b76:	f7f5 fa1a 	bl	cfae <sdc_hci_cmd_le_read_white_list_size>
   17b7a:	e7f0      	b.n	17b5e <hci_internal_cmd_put+0x36a>
		return sdc_hci_cmd_le_clear_white_list();
   17b7c:	f7f5 f9f7 	bl	cf6e <sdc_hci_cmd_le_clear_white_list>
   17b80:	e68b      	b.n	1789a <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   17b82:	f7f5 f9f0 	bl	cf66 <sdc_hci_cmd_le_add_device_to_white_list>
   17b86:	e688      	b.n	1789a <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   17b88:	f7f5 fa15 	bl	cfb6 <sdc_hci_cmd_le_remove_device_from_white_list>
   17b8c:	e685      	b.n	1789a <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   17b8e:	4982      	ldr	r1, [pc, #520]	; (17d98 <hci_internal_cmd_put+0x5a4>)
   17b90:	f7f5 f9ff 	bl	cf92 <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   17b94:	210b      	movs	r1, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   17b96:	e712      	b.n	179be <hci_internal_cmd_put+0x1ca>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   17b98:	f7f5 fa01 	bl	cf9e <sdc_hci_cmd_le_read_remote_features>
   17b9c:	e658      	b.n	17850 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   17b9e:	497e      	ldr	r1, [pc, #504]	; (17d98 <hci_internal_cmd_put+0x5a4>)
   17ba0:	f7f5 f9e7 	bl	cf72 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   17ba4:	2114      	movs	r1, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   17ba6:	e70a      	b.n	179be <hci_internal_cmd_put+0x1ca>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   17ba8:	487b      	ldr	r0, [pc, #492]	; (17d98 <hci_internal_cmd_put+0x5a4>)
   17baa:	f7f5 f9ec 	bl	cf86 <sdc_hci_cmd_le_rand>
   17bae:	e6b0      	b.n	17912 <hci_internal_cmd_put+0x11e>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   17bb0:	4979      	ldr	r1, [pc, #484]	; (17d98 <hci_internal_cmd_put+0x5a4>)
   17bb2:	f7f5 f9e4 	bl	cf7e <sdc_hci_cmd_le_long_term_key_request_reply>
   17bb6:	e67d      	b.n	178b4 <hci_internal_cmd_put+0xc0>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   17bb8:	4977      	ldr	r1, [pc, #476]	; (17d98 <hci_internal_cmd_put+0x5a4>)
   17bba:	f7f5 f9dc 	bl	cf76 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   17bbe:	e679      	b.n	178b4 <hci_internal_cmd_put+0xc0>
	*buf = states1;
   17bc0:	238f      	movs	r3, #143	; 0x8f
   17bc2:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   17bc4:	23c0      	movs	r3, #192	; 0xc0
   17bc6:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   17bc8:	210c      	movs	r1, #12
	cmds->read_supported_vs_commands = 1;
   17bca:	2000      	movs	r0, #0
   17bcc:	e6eb      	b.n	179a6 <hci_internal_cmd_put+0x1b2>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   17bce:	4972      	ldr	r1, [pc, #456]	; (17d98 <hci_internal_cmd_put+0x5a4>)
   17bd0:	f7f5 f9fb 	bl	cfca <sdc_hci_cmd_le_set_data_length>
   17bd4:	e66e      	b.n	178b4 <hci_internal_cmd_put+0xc0>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   17bd6:	4870      	ldr	r0, [pc, #448]	; (17d98 <hci_internal_cmd_put+0x5a4>)
   17bd8:	f7f5 f9e5 	bl	cfa6 <sdc_hci_cmd_le_read_suggested_default_data_length>
   17bdc:	e67a      	b.n	178d4 <hci_internal_cmd_put+0xe0>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   17bde:	f7f5 fa07 	bl	cff0 <sdc_hci_cmd_le_write_suggested_default_data_length>
   17be2:	e65a      	b.n	1789a <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   17be4:	f7f5 f9bd 	bl	cf62 <sdc_hci_cmd_le_add_device_to_resolving_list>
   17be8:	e657      	b.n	1789a <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   17bea:	f7f5 f9e2 	bl	cfb2 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   17bee:	e654      	b.n	1789a <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_clear_resolving_list();
   17bf0:	f7f5 f9bb 	bl	cf6a <sdc_hci_cmd_le_clear_resolving_list>
   17bf4:	e651      	b.n	1789a <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   17bf6:	4868      	ldr	r0, [pc, #416]	; (17d98 <hci_internal_cmd_put+0x5a4>)
   17bf8:	f7f5 f9d3 	bl	cfa2 <sdc_hci_cmd_le_read_resolving_list_size>
   17bfc:	e7af      	b.n	17b5e <hci_internal_cmd_put+0x36a>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   17bfe:	f7f5 f9dc 	bl	cfba <sdc_hci_cmd_le_set_address_resolution_enable>
   17c02:	e64a      	b.n	1789a <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   17c04:	f7f5 f9f0 	bl	cfe8 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   17c08:	e647      	b.n	1789a <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   17c0a:	4863      	ldr	r0, [pc, #396]	; (17d98 <hci_internal_cmd_put+0x5a4>)
   17c0c:	f7f5 f9c3 	bl	cf96 <sdc_hci_cmd_le_read_max_data_length>
   17c10:	e67f      	b.n	17912 <hci_internal_cmd_put+0x11e>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   17c12:	4961      	ldr	r1, [pc, #388]	; (17d98 <hci_internal_cmd_put+0x5a4>)
   17c14:	f7f5 f9c1 	bl	cf9a <sdc_hci_cmd_le_read_phy>
   17c18:	e65c      	b.n	178d4 <hci_internal_cmd_put+0xe0>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   17c1a:	f7f5 f9d8 	bl	cfce <sdc_hci_cmd_le_set_default_phy>
   17c1e:	e63c      	b.n	1789a <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   17c20:	f7f5 f9dc 	bl	cfdc <sdc_hci_cmd_le_set_phy>
   17c24:	e614      	b.n	17850 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   17c26:	485c      	ldr	r0, [pc, #368]	; (17d98 <hci_internal_cmd_put+0x5a4>)
   17c28:	f7f5 f9bf 	bl	cfaa <sdc_hci_cmd_le_read_transmit_power>
   17c2c:	e642      	b.n	178b4 <hci_internal_cmd_put+0xc0>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   17c2e:	f7f5 f9d7 	bl	cfe0 <sdc_hci_cmd_le_set_privacy_mode>
   17c32:	e632      	b.n	1789a <hci_internal_cmd_put+0xa6>
	switch (opcode)	{
   17c34:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   17c38:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   17c3a:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   17c3e:	d821      	bhi.n	17c84 <hci_internal_cmd_put+0x490>
   17c40:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   17c44:	f43f ae00 	beq.w	17848 <hci_internal_cmd_put+0x54>
   17c48:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   17c4c:	3b01      	subs	r3, #1
   17c4e:	2b09      	cmp	r3, #9
   17c50:	f63f adfa 	bhi.w	17848 <hci_internal_cmd_put+0x54>
   17c54:	a201      	add	r2, pc, #4	; (adr r2, 17c5c <hci_internal_cmd_put+0x468>)
   17c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17c5a:	bf00      	nop
   17c5c:	00017ca5 	.word	0x00017ca5
   17c60:	00017cd3 	.word	0x00017cd3
   17c64:	00017849 	.word	0x00017849
   17c68:	00017849 	.word	0x00017849
   17c6c:	00017849 	.word	0x00017849
   17c70:	00017d1d 	.word	0x00017d1d
   17c74:	00017849 	.word	0x00017849
   17c78:	00017849 	.word	0x00017849
   17c7c:	00017d09 	.word	0x00017d09
   17c80:	00017d13 	.word	0x00017d13
   17c84:	f505 7340 	add.w	r3, r5, #768	; 0x300
   17c88:	b29b      	uxth	r3, r3
   17c8a:	2b05      	cmp	r3, #5
   17c8c:	f63f addc 	bhi.w	17848 <hci_internal_cmd_put+0x54>
   17c90:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   17c94:	2b05      	cmp	r3, #5
   17c96:	f63f add7 	bhi.w	17848 <hci_internal_cmd_put+0x54>
   17c9a:	e8df f003 	tbb	[pc, r3]
   17c9e:	4643      	.short	0x4643
   17ca0:	524f4c49 	.word	0x524f4c49
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   17ca4:	483c      	ldr	r0, [pc, #240]	; (17d98 <hci_internal_cmd_put+0x5a4>)
   17ca6:	f7ed f87d 	bl	4da4 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   17caa:	2110      	movs	r1, #16
	switch (hci_opcode) {
   17cac:	f242 0319 	movw	r3, #8217	; 0x2019
   17cb0:	429e      	cmp	r6, r3
   17cb2:	dc56      	bgt.n	17d62 <hci_internal_cmd_put+0x56e>
   17cb4:	f242 030c 	movw	r3, #8204	; 0x200c
   17cb8:	429e      	cmp	r6, r3
   17cba:	dc45      	bgt.n	17d48 <hci_internal_cmd_put+0x554>
   17cbc:	f240 4306 	movw	r3, #1030	; 0x406
   17cc0:	429e      	cmp	r6, r3
   17cc2:	f43f adc5 	beq.w	17850 <hci_internal_cmd_put+0x5c>
   17cc6:	f240 431d 	movw	r3, #1053	; 0x41d
   17cca:	429e      	cmp	r6, r3
   17ccc:	f43f adc0 	beq.w	17850 <hci_internal_cmd_put+0x5c>
   17cd0:	e675      	b.n	179be <hci_internal_cmd_put+0x1ca>
	memset(cmds, 0, sizeof(*cmds));
   17cd2:	2000      	movs	r0, #0
   17cd4:	f8a4 0007 	strh.w	r0, [r4, #7]
	cmds->read_version_info = 1;
   17cd8:	79e3      	ldrb	r3, [r4, #7]
   17cda:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   17cde:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   17ce2:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   17ce4:	7a23      	ldrb	r3, [r4, #8]
   17ce6:	f023 0307 	bic.w	r3, r3, #7
   17cea:	f043 0307 	orr.w	r3, r3, #7
   17cee:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   17cf0:	f242 0319 	movw	r3, #8217	; 0x2019
   17cf4:	429e      	cmp	r6, r3
   17cf6:	dd3f      	ble.n	17d78 <hci_internal_cmd_put+0x584>
   17cf8:	f242 0332 	movw	r3, #8242	; 0x2032
   17cfc:	429e      	cmp	r6, r3
   17cfe:	f43f ada7 	beq.w	17850 <hci_internal_cmd_put+0x5c>
   17d02:	f242 0343 	movw	r3, #8259	; 0x2043
   17d06:	e042      	b.n	17d8e <hci_internal_cmd_put+0x59a>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   17d08:	4823      	ldr	r0, [pc, #140]	; (17d98 <hci_internal_cmd_put+0x5a4>)
   17d0a:	f7f5 f8d9 	bl	cec0 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   17d0e:	211b      	movs	r1, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   17d10:	e7cc      	b.n	17cac <hci_internal_cmd_put+0x4b8>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   17d12:	4821      	ldr	r0, [pc, #132]	; (17d98 <hci_internal_cmd_put+0x5a4>)
   17d14:	f7f5 f887 	bl	ce26 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   17d18:	2124      	movs	r1, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   17d1a:	e7c7      	b.n	17cac <hci_internal_cmd_put+0x4b8>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   17d1c:	f7f5 f91b 	bl	cf56 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   17d20:	2104      	movs	r1, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   17d22:	e7c3      	b.n	17cac <hci_internal_cmd_put+0x4b8>
	cmds->read_supported_vs_commands = 1;
   17d24:	233f      	movs	r3, #63	; 0x3f
   17d26:	71e3      	strb	r3, [r4, #7]
   17d28:	e62f      	b.n	1798a <hci_internal_cmd_put+0x196>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   17d2a:	f7f5 f875 	bl	ce18 <sdc_hci_cmd_vs_llpm_mode_set>
   17d2e:	e5b4      	b.n	1789a <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   17d30:	f7f5 f86e 	bl	ce10 <sdc_hci_cmd_vs_conn_update>
   17d34:	e5b1      	b.n	1789a <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   17d36:	f7f5 f863 	bl	ce00 <sdc_hci_cmd_vs_conn_event_extend>
   17d3a:	e5ae      	b.n	1789a <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   17d3c:	f7f5 f86e 	bl	ce1c <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   17d40:	e5ab      	b.n	1789a <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   17d42:	f7f5 f867 	bl	ce14 <sdc_hci_cmd_vs_event_length_set>
   17d46:	e5a8      	b.n	1789a <hci_internal_cmd_put+0xa6>
   17d48:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
   17d4c:	3b0d      	subs	r3, #13
   17d4e:	2201      	movs	r2, #1
   17d50:	b29b      	uxth	r3, r3
   17d52:	fa02 f303 	lsl.w	r3, r2, r3
   17d56:	f241 2241 	movw	r2, #4673	; 0x1241
   17d5a:	4213      	tst	r3, r2
   17d5c:	f43f ae2f 	beq.w	179be <hci_internal_cmd_put+0x1ca>
   17d60:	e576      	b.n	17850 <hci_internal_cmd_put+0x5c>
	switch (hci_opcode) {
   17d62:	f242 0332 	movw	r3, #8242	; 0x2032
   17d66:	429e      	cmp	r6, r3
   17d68:	f43f ad72 	beq.w	17850 <hci_internal_cmd_put+0x5c>
   17d6c:	f242 0343 	movw	r3, #8259	; 0x2043
   17d70:	e7ab      	b.n	17cca <hci_internal_cmd_put+0x4d6>
		return -NRF_EPERM;
   17d72:	f04f 30ff 	mov.w	r0, #4294967295
   17d76:	e577      	b.n	17868 <hci_internal_cmd_put+0x74>
	switch (hci_opcode) {
   17d78:	f242 030c 	movw	r3, #8204	; 0x200c
   17d7c:	429e      	cmp	r6, r3
   17d7e:	dc09      	bgt.n	17d94 <hci_internal_cmd_put+0x5a0>
   17d80:	f240 4306 	movw	r3, #1030	; 0x406
   17d84:	429e      	cmp	r6, r3
   17d86:	f43f ad63 	beq.w	17850 <hci_internal_cmd_put+0x5c>
   17d8a:	f240 431d 	movw	r3, #1053	; 0x41d
   17d8e:	429e      	cmp	r6, r3
   17d90:	f43f ad5e 	beq.w	17850 <hci_internal_cmd_put+0x5c>
   17d94:	2144      	movs	r1, #68	; 0x44
   17d96:	e606      	b.n	179a6 <hci_internal_cmd_put+0x1b2>
   17d98:	20003d53 	.word	0x20003d53

00017d9c <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   17d9c:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   17d9e:	4c07      	ldr	r4, [pc, #28]	; (17dbc <hci_internal_evt_get+0x20>)
   17da0:	7823      	ldrb	r3, [r4, #0]
   17da2:	b13b      	cbz	r3, 17db4 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
   17da4:	78a2      	ldrb	r2, [r4, #2]
   17da6:	1c61      	adds	r1, r4, #1
   17da8:	3202      	adds	r2, #2
   17daa:	f008 fe66 	bl	20a7a <memcpy>
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
		cmd_complete_or_status.occurred = false;
   17dae:	2000      	movs	r0, #0
   17db0:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   17db2:	bd10      	pop	{r4, pc}
   17db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   17db8:	f7f5 b805 	b.w	cdc6 <sdc_hci_evt_get>
   17dbc:	20003d4c 	.word	0x20003d4c

00017dc0 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   17dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   17dc4:	4c0b      	ldr	r4, [pc, #44]	; (17df4 <bt_rand+0x34>)
   17dc6:	6823      	ldr	r3, [r4, #0]
{
   17dc8:	4605      	mov	r5, r0
   17dca:	460e      	mov	r6, r1
   17dcc:	4627      	mov	r7, r4
	if (unlikely(!dev)) {
   17dce:	b13b      	cbz	r3, 17de0 <bt_rand+0x20>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   17dd0:	6838      	ldr	r0, [r7, #0]
	return api->get_entropy(dev, buffer, length);
   17dd2:	6883      	ldr	r3, [r0, #8]
   17dd4:	b2b2      	uxth	r2, r6
   17dd6:	4629      	mov	r1, r5
   17dd8:	681b      	ldr	r3, [r3, #0]
}
   17dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   17dde:	4718      	bx	r3
   17de0:	4805      	ldr	r0, [pc, #20]	; (17df8 <bt_rand+0x38>)
   17de2:	f000 fd91 	bl	18908 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   17de6:	6020      	str	r0, [r4, #0]
		if (!dev) {
   17de8:	2800      	cmp	r0, #0
   17dea:	d1f1      	bne.n	17dd0 <bt_rand+0x10>
}
   17dec:	f06f 0012 	mvn.w	r0, #18
   17df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17df4:	20002660 	.word	0x20002660
   17df8:	00021f1c 	.word	0x00021f1c

00017dfc <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   17dfc:	b513      	push	{r0, r1, r4, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   17dfe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   17e02:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   17e06:	2300      	movs	r3, #0
   17e08:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   17e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   17e10:	f8ad 3000 	strh.w	r3, [sp]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   17e14:	4a0d      	ldr	r2, [pc, #52]	; (17e4c <mpsl_lib_init+0x50>)
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   17e16:	2302      	movs	r3, #2
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   17e18:	2119      	movs	r1, #25
   17e1a:	4668      	mov	r0, sp
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   17e1c:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   17e20:	f7ec fb74 	bl	450c <mpsl_init>
	if (err) {
   17e24:	4604      	mov	r4, r0
   17e26:	b970      	cbnz	r0, 17e46 <mpsl_lib_init+0x4a>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   17e28:	4601      	mov	r1, r0
   17e2a:	2201      	movs	r2, #1
   17e2c:	2008      	movs	r0, #8
   17e2e:	f7fa ff57 	bl	12ce0 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   17e32:	2201      	movs	r2, #1
   17e34:	4621      	mov	r1, r4
   17e36:	200b      	movs	r0, #11
   17e38:	f7fa ff52 	bl	12ce0 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   17e3c:	2201      	movs	r2, #1
   17e3e:	4621      	mov	r1, r4
   17e40:	4610      	mov	r0, r2
   17e42:	f7fa ff4d 	bl	12ce0 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   17e46:	4620      	mov	r0, r4
   17e48:	b002      	add	sp, #8
   17e4a:	bd10      	pop	{r4, pc}
   17e4c:	0001fe73 	.word	0x0001fe73

00017e50 <mpsl_low_prio_irq_handler>:
   17e50:	4801      	ldr	r0, [pc, #4]	; (17e58 <mpsl_low_prio_irq_handler+0x8>)
   17e52:	f001 b85f 	b.w	18f14 <z_impl_k_sem_give>
   17e56:	bf00      	nop
   17e58:	20000900 	.word	0x20000900

00017e5c <signal_thread>:
{
   17e5c:	b510      	push	{r4, lr}
	return z_impl_k_sem_take(sem, timeout);
   17e5e:	4c09      	ldr	r4, [pc, #36]	; (17e84 <signal_thread+0x28>)
   17e60:	f04f 32ff 	mov.w	r2, #4294967295
   17e64:	f04f 33ff 	mov.w	r3, #4294967295
   17e68:	4620      	mov	r0, r4
   17e6a:	f001 f879 	bl	18f60 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   17e6e:	f04f 31ff 	mov.w	r1, #4294967295
   17e72:	f04f 30ff 	mov.w	r0, #4294967295
   17e76:	f7ff fb29 	bl	174cc <multithreading_lock_acquire>
		mpsl_low_priority_process();
   17e7a:	f7f4 fb57 	bl	c52c <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   17e7e:	f7ff fb2d 	bl	174dc <multithreading_lock_release>
	while (true) {
   17e82:	e7ed      	b.n	17e60 <signal_thread+0x4>
   17e84:	20000900 	.word	0x20000900

00017e88 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   17e88:	b530      	push	{r4, r5, lr}
   17e8a:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17e8c:	4d0f      	ldr	r5, [pc, #60]	; (17ecc <mpsl_signal_thread_init+0x44>)
   17e8e:	4910      	ldr	r1, [pc, #64]	; (17ed0 <mpsl_signal_thread_init+0x48>)
   17e90:	2200      	movs	r2, #0
   17e92:	2300      	movs	r3, #0
   17e94:	e9cd 2306 	strd	r2, r3, [sp, #24]
   17e98:	2400      	movs	r4, #0
   17e9a:	f06f 0309 	mvn.w	r3, #9
   17e9e:	e9cd 3403 	strd	r3, r4, [sp, #12]
   17ea2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   17ea6:	4b0b      	ldr	r3, [pc, #44]	; (17ed4 <mpsl_signal_thread_init+0x4c>)
   17ea8:	9400      	str	r4, [sp, #0]
   17eaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17eae:	4628      	mov	r0, r5
   17eb0:	f000 fe98 	bl	18be4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   17eb4:	4908      	ldr	r1, [pc, #32]	; (17ed8 <mpsl_signal_thread_init+0x50>)
   17eb6:	4628      	mov	r0, r5
   17eb8:	f008 f943 	bl	20142 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   17ebc:	4622      	mov	r2, r4
   17ebe:	2104      	movs	r1, #4
   17ec0:	2019      	movs	r0, #25
   17ec2:	f7fa ff0d 	bl	12ce0 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   17ec6:	4620      	mov	r0, r4
   17ec8:	b009      	add	sp, #36	; 0x24
   17eca:	bd30      	pop	{r4, r5, pc}
   17ecc:	20001b08 	.word	0x20001b08
   17ed0:	200051c0 	.word	0x200051c0
   17ed4:	00017e5d 	.word	0x00017e5d
   17ed8:	00021f48 	.word	0x00021f48

00017edc <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   17edc:	4b01      	ldr	r3, [pc, #4]	; (17ee4 <mpsl_hfclk_callback+0x8>)
   17ede:	2000      	movs	r0, #0
   17ee0:	681b      	ldr	r3, [r3, #0]
   17ee2:	4718      	bx	r3
   17ee4:	20002664 	.word	0x20002664

00017ee8 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   17ee8:	b120      	cbz	r0, 17ef4 <nrfx_clock_start+0xc>
   17eea:	2801      	cmp	r0, #1
   17eec:	d106      	bne.n	17efc <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   17eee:	4804      	ldr	r0, [pc, #16]	; (17f00 <nrfx_clock_start+0x18>)
   17ef0:	f7ec b96c 	b.w	41cc <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   17ef4:	4b03      	ldr	r3, [pc, #12]	; (17f04 <nrfx_clock_start+0x1c>)
   17ef6:	2001      	movs	r0, #1
   17ef8:	681b      	ldr	r3, [r3, #0]
   17efa:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   17efc:	4770      	bx	lr
   17efe:	bf00      	nop
   17f00:	00017edd 	.word	0x00017edd
   17f04:	20002664 	.word	0x20002664

00017f08 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   17f08:	4b01      	ldr	r3, [pc, #4]	; (17f10 <nrfx_clock_init+0x8>)
   17f0a:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   17f0c:	4801      	ldr	r0, [pc, #4]	; (17f14 <nrfx_clock_init+0xc>)
   17f0e:	4770      	bx	lr
   17f10:	20002664 	.word	0x20002664
   17f14:	0bad0000 	.word	0x0bad0000

00017f18 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   17f18:	4b03      	ldr	r3, [pc, #12]	; (17f28 <nrf52_errata_136+0x10>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   17f1a:	6818      	ldr	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
   17f1c:	f1a0 0308 	sub.w	r3, r0, #8
   17f20:	4258      	negs	r0, r3
   17f22:	4158      	adcs	r0, r3
   17f24:	4770      	bx	lr
   17f26:	bf00      	nop
   17f28:	10000130 	.word	0x10000130

00017f2c <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   17f2c:	4b06      	ldr	r3, [pc, #24]	; (17f48 <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   17f2e:	681b      	ldr	r3, [r3, #0]
   17f30:	2b08      	cmp	r3, #8
   17f32:	d106      	bne.n	17f42 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   17f34:	4b05      	ldr	r3, [pc, #20]	; (17f4c <nrf52_errata_103+0x20>)
   17f36:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   17f38:	2b05      	cmp	r3, #5
   17f3a:	d802      	bhi.n	17f42 <nrf52_errata_103+0x16>
   17f3c:	4a04      	ldr	r2, [pc, #16]	; (17f50 <nrf52_errata_103+0x24>)
   17f3e:	5cd0      	ldrb	r0, [r2, r3]
   17f40:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   17f42:	2000      	movs	r0, #0
    #endif
}
   17f44:	4770      	bx	lr
   17f46:	bf00      	nop
   17f48:	10000130 	.word	0x10000130
   17f4c:	10000134 	.word	0x10000134
   17f50:	00021f5a 	.word	0x00021f5a

00017f54 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   17f54:	4a02      	ldr	r2, [pc, #8]	; (17f60 <nvmc_wait+0xc>)
   17f56:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   17f5a:	2b00      	cmp	r3, #0
   17f5c:	d0fb      	beq.n	17f56 <nvmc_wait+0x2>
}
   17f5e:	4770      	bx	lr
   17f60:	4001e000 	.word	0x4001e000

00017f64 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   17f64:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   17f66:	f7ff ffd7 	bl	17f18 <nrf52_errata_136>
   17f6a:	b140      	cbz	r0, 17f7e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   17f6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17f70:	2200      	movs	r2, #0
   17f72:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   17f76:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   17f7a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   17f7e:	f7ff ffcb 	bl	17f18 <nrf52_errata_136>
   17f82:	2800      	cmp	r0, #0
   17f84:	d046      	beq.n	18014 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   17f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   17f8a:	4b5b      	ldr	r3, [pc, #364]	; (180f8 <SystemInit+0x194>)
   17f8c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   17f90:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   17f94:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   17f98:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   17f9c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   17fa0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   17fa4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   17fa8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   17fac:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   17fb0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   17fb4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   17fb8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   17fbc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   17fc0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   17fc4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   17fc8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   17fcc:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   17fd0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   17fd4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   17fd8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   17fdc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   17fe0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   17fe4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   17fe8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   17fec:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   17ff0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   17ff4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   17ff8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   17ffc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   18000:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   18004:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   18008:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1800c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   18010:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   18014:	f7ff ff8a 	bl	17f2c <nrf52_errata_103>
   18018:	b110      	cbz	r0, 18020 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1801a:	4b38      	ldr	r3, [pc, #224]	; (180fc <SystemInit+0x198>)
   1801c:	4a38      	ldr	r2, [pc, #224]	; (18100 <SystemInit+0x19c>)
   1801e:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   18020:	f7ff ff84 	bl	17f2c <nrf52_errata_103>
   18024:	b118      	cbz	r0, 1802e <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   18026:	4b37      	ldr	r3, [pc, #220]	; (18104 <SystemInit+0x1a0>)
   18028:	22fb      	movs	r2, #251	; 0xfb
   1802a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1802e:	f7ff ff7d 	bl	17f2c <nrf52_errata_103>
   18032:	b148      	cbz	r0, 18048 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   18034:	4934      	ldr	r1, [pc, #208]	; (18108 <SystemInit+0x1a4>)
   18036:	4b35      	ldr	r3, [pc, #212]	; (1810c <SystemInit+0x1a8>)
   18038:	680a      	ldr	r2, [r1, #0]
   1803a:	681b      	ldr	r3, [r3, #0]
   1803c:	f022 020f 	bic.w	r2, r2, #15
   18040:	f003 030f 	and.w	r3, r3, #15
   18044:	4313      	orrs	r3, r2
   18046:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   18048:	f7ff ff70 	bl	17f2c <nrf52_errata_103>
   1804c:	b118      	cbz	r0, 18056 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1804e:	4b30      	ldr	r3, [pc, #192]	; (18110 <SystemInit+0x1ac>)
   18050:	f44f 7200 	mov.w	r2, #512	; 0x200
   18054:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   18056:	f7ff ff5f 	bl	17f18 <nrf52_errata_136>
   1805a:	b148      	cbz	r0, 18070 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1805c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18060:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   18064:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   18066:	bf44      	itt	mi
   18068:	f06f 0201 	mvnmi.w	r2, #1
   1806c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18070:	4b28      	ldr	r3, [pc, #160]	; (18114 <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   18072:	681b      	ldr	r3, [r3, #0]
   18074:	2b08      	cmp	r3, #8
   18076:	d10e      	bne.n	18096 <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   18078:	4b27      	ldr	r3, [pc, #156]	; (18118 <SystemInit+0x1b4>)
   1807a:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   1807c:	2b05      	cmp	r3, #5
   1807e:	d802      	bhi.n	18086 <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   18080:	4a26      	ldr	r2, [pc, #152]	; (1811c <SystemInit+0x1b8>)
   18082:	5cd3      	ldrb	r3, [r2, r3]
   18084:	b13b      	cbz	r3, 18096 <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   18086:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1808a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1808e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18092:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   18096:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1809a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1809e:	2a00      	cmp	r2, #0
   180a0:	db03      	blt.n	180aa <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   180a2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   180a6:	2b00      	cmp	r3, #0
   180a8:	da22      	bge.n	180f0 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   180aa:	491d      	ldr	r1, [pc, #116]	; (18120 <SystemInit+0x1bc>)
   180ac:	2301      	movs	r3, #1
   180ae:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   180b2:	f7ff ff4f 	bl	17f54 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   180b6:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   180ba:	2412      	movs	r4, #18
   180bc:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   180c0:	f7ff ff48 	bl	17f54 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   180c4:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   180c8:	f7ff ff44 	bl	17f54 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   180cc:	2300      	movs	r3, #0
   180ce:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   180d2:	f7ff ff3f 	bl	17f54 <nvmc_wait>
   180d6:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   180da:	4912      	ldr	r1, [pc, #72]	; (18124 <SystemInit+0x1c0>)
   180dc:	4b12      	ldr	r3, [pc, #72]	; (18128 <SystemInit+0x1c4>)
   180de:	68ca      	ldr	r2, [r1, #12]
   180e0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   180e4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   180e6:	60cb      	str	r3, [r1, #12]
   180e8:	f3bf 8f4f 	dsb	sy
    __NOP();
   180ec:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   180ee:	e7fd      	b.n	180ec <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   180f0:	4b0e      	ldr	r3, [pc, #56]	; (1812c <SystemInit+0x1c8>)
   180f2:	4a0f      	ldr	r2, [pc, #60]	; (18130 <SystemInit+0x1cc>)
   180f4:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   180f6:	bd10      	pop	{r4, pc}
   180f8:	4000c000 	.word	0x4000c000
   180fc:	4000568c 	.word	0x4000568c
   18100:	00038148 	.word	0x00038148
   18104:	4000f000 	.word	0x4000f000
   18108:	40000ee4 	.word	0x40000ee4
   1810c:	10000258 	.word	0x10000258
   18110:	40029640 	.word	0x40029640
   18114:	10000130 	.word	0x10000130
   18118:	10000134 	.word	0x10000134
   1811c:	00021f54 	.word	0x00021f54
   18120:	4001e000 	.word	0x4001e000
   18124:	e000ed00 	.word	0xe000ed00
   18128:	05fa0004 	.word	0x05fa0004
   1812c:	2000066c 	.word	0x2000066c
   18130:	03d09000 	.word	0x03d09000

00018134 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   18134:	2301      	movs	r3, #1
   18136:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1813a:	f010 0fff 	tst.w	r0, #255	; 0xff
   1813e:	d012      	beq.n	18166 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   18140:	f04f 0340 	mov.w	r3, #64	; 0x40
   18144:	f3ef 8111 	mrs	r1, BASEPRI
   18148:	f383 8811 	msr	BASEPRI, r3
   1814c:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   18150:	4a06      	ldr	r2, [pc, #24]	; (1816c <nrfx_gpiote_channel_free+0x38>)
   18152:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   18154:	ea23 0000 	bic.w	r0, r3, r0
   18158:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   1815a:	f381 8811 	msr	BASEPRI, r1
   1815e:	f3bf 8f6f 	isb	sy
   18162:	4803      	ldr	r0, [pc, #12]	; (18170 <nrfx_gpiote_channel_free+0x3c>)
   18164:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   18166:	4803      	ldr	r0, [pc, #12]	; (18174 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   18168:	4770      	bx	lr
   1816a:	bf00      	nop
   1816c:	20002668 	.word	0x20002668
   18170:	0bad0000 	.word	0x0bad0000
   18174:	0bad0004 	.word	0x0bad0004

00018178 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   18178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1817c:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   1817e:	f8df e060 	ldr.w	lr, [pc, #96]	; 181e0 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   18182:	4816      	ldr	r0, [pc, #88]	; (181dc <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   18184:	f8df 805c 	ldr.w	r8, [pc, #92]	; 181e4 <nrfx_gpiote_channel_alloc+0x6c>
{
   18188:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   1818a:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   1818c:	2601      	movs	r6, #1
   1818e:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   18190:	f04f 0140 	mov.w	r1, #64	; 0x40
   18194:	f3ef 8c11 	mrs	ip, BASEPRI
   18198:	f381 8811 	msr	BASEPRI, r1
   1819c:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   181a0:	fa22 f103 	lsr.w	r1, r2, r3
   181a4:	07c9      	lsls	r1, r1, #31
   181a6:	d50a      	bpl.n	181be <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   181a8:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   181ac:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   181b0:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   181b2:	bf01      	itttt	eq
   181b4:	4339      	orreq	r1, r7
   181b6:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
   181ba:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   181bc:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   181be:	f38c 8811 	msr	BASEPRI, ip
   181c2:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   181c6:	4540      	cmp	r0, r8
   181c8:	d005      	beq.n	181d6 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   181ca:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   181ce:	439a      	bics	r2, r3
   181d0:	f104 0401 	add.w	r4, r4, #1
   181d4:	d1db      	bne.n	1818e <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   181d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   181da:	bf00      	nop
   181dc:	0bad0002 	.word	0x0bad0002
   181e0:	20002668 	.word	0x20002668
   181e4:	0bad0000 	.word	0x0bad0000

000181e8 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   181e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(p_config->scl != p_config->sda);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   181ec:	7906      	ldrb	r6, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   181ee:	4d27      	ldr	r5, [pc, #156]	; (1828c <nrfx_twim_init+0xa4>)
   181f0:	f04f 0c34 	mov.w	ip, #52	; 0x34
   181f4:	fb0c fc06 	mul.w	ip, ip, r6
   181f8:	eb05 040c 	add.w	r4, r5, ip
   181fc:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
   18200:	2f00      	cmp	r7, #0
   18202:	d140      	bne.n	18286 <nrfx_twim_init+0x9e>
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
   18204:	60a7      	str	r7, [r4, #8]
    p_cb->repeated        = false;
   18206:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
   1820a:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    TWIM_PIN_INIT(p_config->scl, drive);
   1820e:	680f      	ldr	r7, [r1, #0]
    p_cb->p_context       = p_context;
   18210:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   18212:	7b4b      	ldrb	r3, [r1, #13]
   18214:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->handler         = event_handler;
   18218:	f845 200c 	str.w	r2, [r5, ip]
        case 1: return NRF_P1;
   1821c:	4b1c      	ldr	r3, [pc, #112]	; (18290 <nrfx_twim_init+0xa8>)
#if NRFX_CHECK(NRFX_TWIM_NRF52_ANOMALY_109_WORKAROUND_ENABLED)
    p_cb->bus_frequency   = (nrf_twim_frequency_t)p_config->frequency;
#endif

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   1821e:	6800      	ldr	r0, [r0, #0]
    return pin_number >> 5;
   18220:	ea4f 1c57 	mov.w	ip, r7, lsr #5
        case 1: return NRF_P1;
   18224:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
   18228:	f007 041f 	and.w	r4, r7, #31
        case 1: return NRF_P1;
   1822c:	bf0c      	ite	eq
   1822e:	469c      	moveq	ip, r3
   18230:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   18234:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   18238:	f240 6e0c 	movw	lr, #1548	; 0x60c
   1823c:	f84c e024 	str.w	lr, [ip, r4, lsl #2]
    TWIM_PIN_INIT(p_config->sda, drive);
   18240:	684c      	ldr	r4, [r1, #4]
    return pin_number >> 5;
   18242:	ea4f 1854 	mov.w	r8, r4, lsr #5
    *p_pin = pin_number & 0x1F;
   18246:	f004 0c1f 	and.w	ip, r4, #31
        case 1: return NRF_P1;
   1824a:	f1b8 0f01 	cmp.w	r8, #1
   1824e:	bf18      	it	ne
   18250:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   18254:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
   18258:	f843 e02c 	str.w	lr, [r3, ip, lsl #2]
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   1825c:	688b      	ldr	r3, [r1, #8]

NRF_STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                         uint32_t scl_pin,
                                         uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
   1825e:	f8c0 7508 	str.w	r7, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   18262:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   18266:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524

    if (p_cb->handler)
   1826a:	b11a      	cbz	r2, 18274 <nrfx_twim_init+0x8c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   1826c:	f340 3007 	sbfx	r0, r0, #12, #8
   18270:	f7fa fd04 	bl	12c7c <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   18274:	2334      	movs	r3, #52	; 0x34
   18276:	fb03 5506 	mla	r5, r3, r6, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1827a:	4806      	ldr	r0, [pc, #24]	; (18294 <nrfx_twim_init+0xac>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1827c:	2301      	movs	r3, #1
   1827e:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   18282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   18286:	4804      	ldr	r0, [pc, #16]	; (18298 <nrfx_twim_init+0xb0>)
   18288:	e7fb      	b.n	18282 <nrfx_twim_init+0x9a>
   1828a:	bf00      	nop
   1828c:	200026c8 	.word	0x200026c8
   18290:	50000300 	.word	0x50000300
   18294:	0bad0000 	.word	0x0bad0000
   18298:	0bad0005 	.word	0x0bad0005

0001829c <nrfx_twim_enable>:
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
   1829c:	6802      	ldr	r2, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1829e:	7903      	ldrb	r3, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   182a0:	2106      	movs	r1, #6
   182a2:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   182a6:	4a04      	ldr	r2, [pc, #16]	; (182b8 <nrfx_twim_enable+0x1c>)
   182a8:	2134      	movs	r1, #52	; 0x34
   182aa:	fb01 2303 	mla	r3, r1, r3, r2
   182ae:	2202      	movs	r2, #2
   182b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   182b4:	4770      	bx	lr
   182b6:	bf00      	nop
   182b8:	200026c8 	.word	0x200026c8

000182bc <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   182bc:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
   182be:	490c      	ldr	r1, [pc, #48]	; (182f0 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   182c0:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   182c2:	2034      	movs	r0, #52	; 0x34
   182c4:	fb00 1303 	mla	r3, r0, r3, r1
   182c8:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   182ca:	480a      	ldr	r0, [pc, #40]	; (182f4 <nrfx_twim_disable+0x38>)
   182cc:	6099      	str	r1, [r3, #8]
   182ce:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   182d2:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   182d6:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   182da:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   182de:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   182e2:	2201      	movs	r2, #1
   182e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
   182e8:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   182ec:	4770      	bx	lr
   182ee:	bf00      	nop
   182f0:	200026c8 	.word	0x200026c8
   182f4:	019c0202 	.word	0x019c0202

000182f8 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   182f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
   182fc:	4fb4      	ldr	r7, [pc, #720]	; (185d0 <nrfx_twim_xfer+0x2d8>)
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   182fe:	f890 e004 	ldrb.w	lr, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   18302:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   18304:	2334      	movs	r3, #52	; 0x34
   18306:	fb03 730e 	mla	r3, r3, lr, r7
{
   1830a:	4694      	mov	ip, r2
    p_cb->error = false;
   1830c:	2200      	movs	r2, #0
   1830e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   18312:	684b      	ldr	r3, [r1, #4]
{
   18314:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   18316:	b14b      	cbz	r3, 1832c <nrfx_twim_xfer+0x34>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   18318:	68cb      	ldr	r3, [r1, #12]
   1831a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   1831e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   18322:	d003      	beq.n	1832c <nrfx_twim_xfer+0x34>
        return err_code;
   18324:	4eab      	ldr	r6, [pc, #684]	; (185d4 <nrfx_twim_xfer+0x2dc>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   18326:	4630      	mov	r0, r6
   18328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   1832c:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
   1832e:	4baa      	ldr	r3, [pc, #680]	; (185d8 <nrfx_twim_xfer+0x2e0>)
   18330:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   18334:	fb06 760e 	mla	r6, r6, lr, r7
   18338:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   1833c:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   18340:	b123      	cbz	r3, 1834c <nrfx_twim_xfer+0x54>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   18342:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   18344:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
   18348:	4ea4      	ldr	r6, [pc, #656]	; (185dc <nrfx_twim_xfer+0x2e4>)
   1834a:	e7ec      	b.n	18326 <nrfx_twim_xfer+0x2e>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   1834c:	f01c 0f14 	tst.w	ip, #20
   18350:	bf0c      	ite	eq
   18352:	2301      	moveq	r3, #1
   18354:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   18356:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   1835a:	46a9      	mov	r9, r5
   1835c:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   18360:	f106 080c 	add.w	r8, r6, #12
   18364:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   18368:	f8d9 3000 	ldr.w	r3, [r9]
   1836c:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   18370:	f3cc 1300 	ubfx	r3, ip, #4, #1
   18374:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
   18378:	f8c6 c020 	str.w	ip, [r6, #32]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   1837c:	786b      	ldrb	r3, [r5, #1]
   1837e:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18382:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   18386:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1838a:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   1838e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18392:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   18396:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   1839a:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   1839e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   183a2:	f01c 0301 	ands.w	r3, ip, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   183a6:	bf18      	it	ne
   183a8:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   183aa:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   183ae:	f01c 0302 	ands.w	r3, ip, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   183b2:	bf18      	it	ne
   183b4:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   183b6:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   183ba:	782b      	ldrb	r3, [r5, #0]
   183bc:	2b03      	cmp	r3, #3
   183be:	f200 80b5 	bhi.w	1852c <nrfx_twim_xfer+0x234>
   183c2:	e8df f003 	tbb	[pc, r3]
   183c6:	a084      	.short	0xa084
   183c8:	0269      	.short	0x0269
   183ca:	692a      	ldr	r2, [r5, #16]
   183cc:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   183d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   183d4:	d1a6      	bne.n	18324 <nrfx_twim_xfer+0x2c>
    p_reg->SHORTS = mask;
   183d6:	f44f 7380 	mov.w	r3, #256	; 0x100
   183da:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   183de:	68e9      	ldr	r1, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   183e0:	686b      	ldr	r3, [r5, #4]
   183e2:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   183e6:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   183ea:	2300      	movs	r3, #0
   183ec:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   183f0:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   183f4:	2101      	movs	r1, #1
   183f6:	6221      	str	r1, [r4, #32]
   183f8:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   183fa:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   183fe:	2900      	cmp	r1, #0
   18400:	d0fb      	beq.n	183fa <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18402:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   18406:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   1840a:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1840c:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   18410:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   18414:	2334      	movs	r3, #52	; 0x34
   18416:	fb03 730e 	mla	r3, r3, lr, r7
   1841a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1841e:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   18420:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   18422:	4e6f      	ldr	r6, [pc, #444]	; (185e0 <nrfx_twim_xfer+0x2e8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   18424:	f01c 0f08 	tst.w	ip, #8
   18428:	d107      	bne.n	1843a <nrfx_twim_xfer+0x142>
   1842a:	782a      	ldrb	r2, [r5, #0]
   1842c:	2a03      	cmp	r2, #3
   1842e:	d004      	beq.n	1843a <nrfx_twim_xfer+0x142>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18430:	2201      	movs	r2, #1
   18432:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   18434:	686b      	ldr	r3, [r5, #4]
   18436:	b903      	cbnz	r3, 1843a <nrfx_twim_xfer+0x142>
   18438:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   1843a:	2334      	movs	r3, #52	; 0x34
   1843c:	fb03 f30e 	mul.w	r3, r3, lr
   18440:	18fa      	adds	r2, r7, r3
   18442:	58fb      	ldr	r3, [r7, r3]
   18444:	2b00      	cmp	r3, #0
   18446:	d174      	bne.n	18532 <nrfx_twim_xfer+0x23a>
                transmission_finished = true;
   18448:	2501      	movs	r5, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1844a:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   1844e:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   18452:	2900      	cmp	r1, #0
   18454:	f040 8087 	bne.w	18566 <nrfx_twim_xfer+0x26e>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   18458:	3a00      	subs	r2, #0
   1845a:	bf18      	it	ne
   1845c:	2201      	movne	r2, #1
   1845e:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   18462:	2900      	cmp	r1, #0
   18464:	f000 8085 	beq.w	18572 <nrfx_twim_xfer+0x27a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18468:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1846c:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18470:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   18474:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   18478:	b110      	cbz	r0, 18480 <nrfx_twim_xfer+0x188>
   1847a:	f411 7f00 	tst.w	r1, #512	; 0x200
   1847e:	d104      	bne.n	1848a <nrfx_twim_xfer+0x192>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18480:	6225      	str	r5, [r4, #32]
   18482:	6165      	str	r5, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   18484:	2800      	cmp	r0, #0
   18486:	d0e0      	beq.n	1844a <nrfx_twim_xfer+0x152>
                    transmission_finished = false;
   18488:	2200      	movs	r2, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   1848a:	05c9      	lsls	r1, r1, #23
   1848c:	d571      	bpl.n	18572 <nrfx_twim_xfer+0x27a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1848e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   18492:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
        } while (!transmission_finished);
   18496:	e7d8      	b.n	1844a <nrfx_twim_xfer+0x152>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   18498:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1849a:	68ea      	ldr	r2, [r5, #12]
   1849c:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   184a0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   184a4:	692b      	ldr	r3, [r5, #16]
   184a6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   184aa:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   184ae:	f47f af39 	bne.w	18324 <nrfx_twim_xfer+0x2c>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   184b2:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   184b4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   184b8:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   184bc:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   184c0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   184c4:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   184c6:	fb03 730e 	mla	r3, r3, lr, r7
   184ca:	2202      	movs	r2, #2
   184cc:	e012      	b.n	184f4 <nrfx_twim_xfer+0x1fc>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   184ce:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   184d0:	68ea      	ldr	r2, [r5, #12]
   184d2:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   184d6:	f01c 0f20 	tst.w	ip, #32
    p_reg->TXD.MAXCNT = length;
   184da:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   184de:	f04f 0334 	mov.w	r3, #52	; 0x34
   184e2:	d00b      	beq.n	184fc <nrfx_twim_xfer+0x204>
    p_reg->SHORTS = mask;
   184e4:	f44f 7280 	mov.w	r2, #256	; 0x100
   184e8:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   184ec:	fb03 730e 	mla	r3, r3, lr, r7
   184f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   184f4:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   184f6:	2301      	movs	r3, #1
   184f8:	6223      	str	r3, [r4, #32]
   184fa:	e791      	b.n	18420 <nrfx_twim_xfer+0x128>
    p_reg->SHORTS = mask;
   184fc:	f44f 7200 	mov.w	r2, #512	; 0x200
   18500:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   18504:	e7df      	b.n	184c6 <nrfx_twim_xfer+0x1ce>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   18506:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   18508:	68ea      	ldr	r2, [r5, #12]
   1850a:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1850e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   18512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   18516:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1851a:	2334      	movs	r3, #52	; 0x34
   1851c:	fb03 730e 	mla	r3, r3, lr, r7
   18520:	2202      	movs	r2, #2
   18522:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18524:	2301      	movs	r3, #1
   18526:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   18528:	2300      	movs	r3, #0
   1852a:	e77a      	b.n	18422 <nrfx_twim_xfer+0x12a>
    switch (p_xfer_desc->type)
   1852c:	4e2d      	ldr	r6, [pc, #180]	; (185e4 <nrfx_twim_xfer+0x2ec>)
   1852e:	2308      	movs	r3, #8
   18530:	e778      	b.n	18424 <nrfx_twim_xfer+0x12c>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   18532:	f01c 0f04 	tst.w	ip, #4
            p_cb->int_mask = 0;
   18536:	bf1c      	itt	ne
   18538:	2300      	movne	r3, #0
   1853a:	6093      	strne	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   1853c:	f01c 0f40 	tst.w	ip, #64	; 0x40
   18540:	d106      	bne.n	18550 <nrfx_twim_xfer+0x258>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   18542:	2334      	movs	r3, #52	; 0x34
   18544:	fb03 730e 	mla	r3, r3, lr, r7
   18548:	689a      	ldr	r2, [r3, #8]
   1854a:	f042 0202 	orr.w	r2, r2, #2
   1854e:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   18550:	2334      	movs	r3, #52	; 0x34
   18552:	fb03 770e 	mla	r7, r3, lr, r7
   18556:	68bb      	ldr	r3, [r7, #8]
   18558:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1855c:	60bb      	str	r3, [r7, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1855e:	68bb      	ldr	r3, [r7, #8]
    p_reg->INTENSET = mask;
   18560:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   18564:	e6df      	b.n	18326 <nrfx_twim_xfer+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18566:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1856a:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
                transmission_finished = true;
   1856e:	2201      	movs	r2, #1
   18570:	e775      	b.n	1845e <nrfx_twim_xfer+0x166>
        } while (!transmission_finished);
   18572:	2a00      	cmp	r2, #0
   18574:	f43f af69 	beq.w	1844a <nrfx_twim_xfer+0x152>
        p_cb->busy = false;
   18578:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
   1857a:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1857e:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   18582:	fb01 720e 	mla	r2, r1, lr, r7
   18586:	2000      	movs	r0, #0
   18588:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   1858c:	b18b      	cbz	r3, 185b2 <nrfx_twim_xfer+0x2ba>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1858e:	4a16      	ldr	r2, [pc, #88]	; (185e8 <nrfx_twim_xfer+0x2f0>)
   18590:	4e16      	ldr	r6, [pc, #88]	; (185ec <nrfx_twim_xfer+0x2f4>)
   18592:	f013 0f01 	tst.w	r3, #1
   18596:	bf18      	it	ne
   18598:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1859a:	f013 0f02 	tst.w	r3, #2
   1859e:	f102 0201 	add.w	r2, r2, #1
   185a2:	bf18      	it	ne
   185a4:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   185a6:	f013 0f04 	tst.w	r3, #4
   185aa:	4b11      	ldr	r3, [pc, #68]	; (185f0 <nrfx_twim_xfer+0x2f8>)
   185ac:	bf18      	it	ne
   185ae:	461e      	movne	r6, r3
   185b0:	e6b9      	b.n	18326 <nrfx_twim_xfer+0x2e>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   185b2:	f01c 0f40 	tst.w	ip, #64	; 0x40
   185b6:	f47f aeb6 	bne.w	18326 <nrfx_twim_xfer+0x2e>
                !xfer_completeness_check(p_twim, p_cb))
   185ba:	fb0e 7101 	mla	r1, lr, r1, r7
   185be:	4620      	mov	r0, r4
   185c0:	f007 fc9f 	bl	1ff02 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   185c4:	4b09      	ldr	r3, [pc, #36]	; (185ec <nrfx_twim_xfer+0x2f4>)
   185c6:	2800      	cmp	r0, #0
   185c8:	bf08      	it	eq
   185ca:	461e      	moveq	r6, r3
   185cc:	e6ab      	b.n	18326 <nrfx_twim_xfer+0x2e>
   185ce:	bf00      	nop
   185d0:	200026c8 	.word	0x200026c8
   185d4:	0bad000a 	.word	0x0bad000a
   185d8:	019c0202 	.word	0x019c0202
   185dc:	0bad000b 	.word	0x0bad000b
   185e0:	0bad0000 	.word	0x0bad0000
   185e4:	0bad0004 	.word	0x0bad0004
   185e8:	0bae0000 	.word	0x0bae0000
   185ec:	0bad0001 	.word	0x0bad0001
   185f0:	0bae0002 	.word	0x0bae0002

000185f4 <nrfx_twim_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
   185f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   185f6:	4b5b      	ldr	r3, [pc, #364]	; (18764 <nrfx_twim_0_irq_handler+0x170>)
   185f8:	4c5b      	ldr	r4, [pc, #364]	; (18768 <nrfx_twim_0_irq_handler+0x174>)
   185fa:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   185fe:	b087      	sub	sp, #28
   18600:	461d      	mov	r5, r3
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   18602:	b1fa      	cbz	r2, 18644 <nrfx_twim_0_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18604:	2200      	movs	r2, #0
   18606:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1860a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1860e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   18612:	b9ba      	cbnz	r2, 18644 <nrfx_twim_0_irq_handler+0x50>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   18614:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   18616:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1861a:	2202      	movs	r2, #2
   1861c:	60a2      	str	r2, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1861e:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENSET = mask;
   18620:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18624:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   18628:	b11a      	cbz	r2, 18632 <nrfx_twim_0_irq_handler+0x3e>
    return p_reg->SHORTS;
   1862a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   1862e:	059e      	lsls	r6, r3, #22
   18630:	d403      	bmi.n	1863a <nrfx_twim_0_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18632:	4b4c      	ldr	r3, [pc, #304]	; (18764 <nrfx_twim_0_irq_handler+0x170>)
   18634:	2201      	movs	r2, #1
   18636:	621a      	str	r2, [r3, #32]
   18638:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   1863a:	2301      	movs	r3, #1
   1863c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
}
   18640:	b007      	add	sp, #28
   18642:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18644:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   18648:	2b00      	cmp	r3, #0
   1864a:	d053      	beq.n	186f4 <nrfx_twim_0_irq_handler+0x100>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1864c:	2300      	movs	r3, #0
   1864e:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   18652:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   18656:	6a23      	ldr	r3, [r4, #32]
   18658:	065d      	lsls	r5, r3, #25
   1865a:	d40a      	bmi.n	18672 <nrfx_twim_0_irq_handler+0x7e>
   1865c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   18660:	b93b      	cbnz	r3, 18672 <nrfx_twim_0_irq_handler+0x7e>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   18662:	4941      	ldr	r1, [pc, #260]	; (18768 <nrfx_twim_0_irq_handler+0x174>)
   18664:	483f      	ldr	r0, [pc, #252]	; (18764 <nrfx_twim_0_irq_handler+0x170>)
   18666:	f007 fc4c 	bl	1ff02 <xfer_completeness_check>
   1866a:	f080 0001 	eor.w	r0, r0, #1
   1866e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   18672:	6a23      	ldr	r3, [r4, #32]
   18674:	f013 0704 	ands.w	r7, r3, #4
   18678:	d121      	bne.n	186be <nrfx_twim_0_irq_handler+0xca>
            event.xfer_desc = p_cb->xfer_desc;
   1867a:	4e3c      	ldr	r6, [pc, #240]	; (1876c <nrfx_twim_0_irq_handler+0x178>)
   1867c:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
   18680:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   18682:	ad01      	add	r5, sp, #4
   18684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   18686:	6833      	ldr	r3, [r6, #0]
   18688:	602b      	str	r3, [r5, #0]
   1868a:	4b36      	ldr	r3, [pc, #216]	; (18764 <nrfx_twim_0_irq_handler+0x170>)
   1868c:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   18690:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   18694:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
   18698:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   1869c:	f1bc 0f00 	cmp.w	ip, #0
   186a0:	d002      	beq.n	186a8 <nrfx_twim_0_irq_handler+0xb4>
   186a2:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   186a6:	b152      	cbz	r2, 186be <nrfx_twim_0_irq_handler+0xca>
    p_reg->SHORTS = mask;
   186a8:	2200      	movs	r2, #0
   186aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   186ae:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   186b0:	4a2f      	ldr	r2, [pc, #188]	; (18770 <nrfx_twim_0_irq_handler+0x17c>)
   186b2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   186b6:	4b2f      	ldr	r3, [pc, #188]	; (18774 <nrfx_twim_0_irq_handler+0x180>)
   186b8:	2208      	movs	r2, #8
   186ba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   186be:	4a29      	ldr	r2, [pc, #164]	; (18764 <nrfx_twim_0_irq_handler+0x170>)
   186c0:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   186c4:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   186c8:	0798      	lsls	r0, r3, #30
   186ca:	d53c      	bpl.n	18746 <nrfx_twim_0_irq_handler+0x152>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   186cc:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   186ce:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   186d2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   186d6:	b90b      	cbnz	r3, 186dc <nrfx_twim_0_irq_handler+0xe8>
        p_cb->busy = false;
   186d8:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   186dc:	6a23      	ldr	r3, [r4, #32]
   186de:	075b      	lsls	r3, r3, #29
   186e0:	d503      	bpl.n	186ea <nrfx_twim_0_irq_handler+0xf6>
   186e2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   186e6:	2b00      	cmp	r3, #0
   186e8:	d0aa      	beq.n	18640 <nrfx_twim_0_irq_handler+0x4c>
        p_cb->handler(&event, p_cb->p_context);
   186ea:	e9d4 3100 	ldrd	r3, r1, [r4]
   186ee:	4668      	mov	r0, sp
   186f0:	4798      	blx	r3
}
   186f2:	e7a5      	b.n	18640 <nrfx_twim_0_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   186f4:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   186f8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   186fc:	7b23      	ldrb	r3, [r4, #12]
   186fe:	b983      	cbnz	r3, 18722 <nrfx_twim_0_irq_handler+0x12e>
            event.xfer_desc = p_cb->xfer_desc;
   18700:	4f1a      	ldr	r7, [pc, #104]	; (1876c <nrfx_twim_0_irq_handler+0x178>)
   18702:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   18704:	ae01      	add	r6, sp, #4
   18706:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   18708:	683b      	ldr	r3, [r7, #0]
   1870a:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   1870c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   18710:	2b00      	cmp	r3, #0
   18712:	d1d4      	bne.n	186be <nrfx_twim_0_irq_handler+0xca>
    p_reg->SHORTS = mask;
   18714:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   18718:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   1871a:	4b15      	ldr	r3, [pc, #84]	; (18770 <nrfx_twim_0_irq_handler+0x17c>)
   1871c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   18720:	e7c9      	b.n	186b6 <nrfx_twim_0_irq_handler+0xc2>
    p_reg->SHORTS = mask;
   18722:	f44f 7300 	mov.w	r3, #512	; 0x200
   18726:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   1872a:	f240 2302 	movw	r3, #514	; 0x202
   1872e:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   18730:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   18734:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   18738:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   1873a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1873e:	2301      	movs	r3, #1
   18740:	60ab      	str	r3, [r5, #8]
   18742:	622b      	str	r3, [r5, #32]
            return;
   18744:	e77c      	b.n	18640 <nrfx_twim_0_irq_handler+0x4c>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   18746:	0759      	lsls	r1, r3, #29
   18748:	d501      	bpl.n	1874e <nrfx_twim_0_irq_handler+0x15a>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   1874a:	2302      	movs	r3, #2
   1874c:	e7bf      	b.n	186ce <nrfx_twim_0_irq_handler+0xda>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   1874e:	07da      	lsls	r2, r3, #31
   18750:	d501      	bpl.n	18756 <nrfx_twim_0_irq_handler+0x162>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   18752:	2303      	movs	r3, #3
   18754:	e7bb      	b.n	186ce <nrfx_twim_0_irq_handler+0xda>
    else if (p_cb->error)
   18756:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1875a:	2b00      	cmp	r3, #0
   1875c:	d0b7      	beq.n	186ce <nrfx_twim_0_irq_handler+0xda>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   1875e:	2304      	movs	r3, #4
   18760:	e7b5      	b.n	186ce <nrfx_twim_0_irq_handler+0xda>
   18762:	bf00      	nop
   18764:	40003000 	.word	0x40003000
   18768:	200026c8 	.word	0x200026c8
   1876c:	200026d4 	.word	0x200026d4
   18770:	019c0202 	.word	0x019c0202
   18774:	e000e100 	.word	0xe000e100

00018778 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   18778:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1877a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1877e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   18780:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   18782:	6002      	str	r2, [r0, #0]
}
   18784:	4802      	ldr	r0, [pc, #8]	; (18790 <nrf_gpio_pin_port_decode+0x18>)
   18786:	bf18      	it	ne
   18788:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1878c:	4770      	bx	lr
   1878e:	bf00      	nop
   18790:	50000300 	.word	0x50000300

00018794 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   18794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18796:	460c      	mov	r4, r1
   18798:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   1879a:	f007 fbe2 	bl	1ff62 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   1879e:	4608      	mov	r0, r1
   187a0:	f007 fbdf 	bl	1ff62 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   187a4:	a801      	add	r0, sp, #4
   187a6:	9601      	str	r6, [sp, #4]
   187a8:	f7ff ffe6 	bl	18778 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   187ac:	9b01      	ldr	r3, [sp, #4]
   187ae:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   187b2:	f240 610d 	movw	r1, #1549	; 0x60d
   187b6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   187ba:	a801      	add	r0, sp, #4
   187bc:	9401      	str	r4, [sp, #4]
   187be:	f7ff ffdb 	bl	18778 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   187c2:	9b01      	ldr	r3, [sp, #4]
   187c4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   187c8:	2509      	movs	r5, #9
   187ca:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
   187ce:	2004      	movs	r0, #4
   187d0:	f007 fb95 	bl	1fefe <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   187d4:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   187d6:	a801      	add	r0, sp, #4
   187d8:	9401      	str	r4, [sp, #4]
   187da:	f7ff ffcd 	bl	18778 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   187de:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   187e0:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   187e4:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   187e6:	07db      	lsls	r3, r3, #31
   187e8:	d415      	bmi.n	18816 <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   187ea:	a801      	add	r0, sp, #4
   187ec:	9601      	str	r6, [sp, #4]
   187ee:	f7ff ffc3 	bl	18778 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   187f2:	9b01      	ldr	r3, [sp, #4]
   187f4:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   187f8:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   187fc:	2004      	movs	r0, #4
   187fe:	f007 fb7e 	bl	1fefe <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   18802:	4630      	mov	r0, r6
   18804:	f007 fbad 	bl	1ff62 <nrf_gpio_pin_set>
            NRFX_DELAY_US(4);
   18808:	3d01      	subs	r5, #1
   1880a:	2004      	movs	r0, #4
   1880c:	f007 fb77 	bl	1fefe <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   18810:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   18814:	d1df      	bne.n	187d6 <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   18816:	a801      	add	r0, sp, #4
   18818:	9401      	str	r4, [sp, #4]
   1881a:	f7ff ffad 	bl	18778 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1881e:	9a01      	ldr	r2, [sp, #4]
   18820:	2301      	movs	r3, #1
   18822:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   18824:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   18828:	2004      	movs	r0, #4
   1882a:	f007 fb68 	bl	1fefe <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   1882e:	4620      	mov	r0, r4
   18830:	f007 fb97 	bl	1ff62 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   18834:	2004      	movs	r0, #4
   18836:	f007 fb62 	bl	1fefe <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1883a:	a801      	add	r0, sp, #4
   1883c:	9401      	str	r4, [sp, #4]
   1883e:	f7ff ff9b 	bl	18778 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   18842:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   18844:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   18848:	4803      	ldr	r0, [pc, #12]	; (18858 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1884a:	40d3      	lsrs	r3, r2
   1884c:	f003 0301 	and.w	r3, r3, #1
   18850:	1ac0      	subs	r0, r0, r3
   18852:	b003      	add	sp, #12
   18854:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18856:	bf00      	nop
   18858:	0bad0001 	.word	0x0bad0001

0001885c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1885c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1885e:	4c14      	ldr	r4, [pc, #80]	; (188b0 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   18860:	4a14      	ldr	r2, [pc, #80]	; (188b4 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   18862:	4915      	ldr	r1, [pc, #84]	; (188b8 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   18864:	2303      	movs	r3, #3
   18866:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   18868:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1886a:	4b14      	ldr	r3, [pc, #80]	; (188bc <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   1886c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1886e:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   18870:	f44f 6380 	mov.w	r3, #1024	; 0x400
   18874:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   18876:	2300      	movs	r3, #0
   18878:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1887a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1887c:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1887e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   18880:	4a0f      	ldr	r2, [pc, #60]	; (188c0 <_DoInit+0x64>)
   18882:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   18884:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   18886:	2210      	movs	r2, #16
   18888:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1888a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1888c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1888e:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   18890:	f008 f936 	bl	20b00 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   18894:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   18898:	490a      	ldr	r1, [pc, #40]	; (188c4 <_DoInit+0x68>)
   1889a:	4620      	mov	r0, r4
   1889c:	f008 f930 	bl	20b00 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   188a0:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   188a4:	2320      	movs	r3, #32
   188a6:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   188a8:	f3bf 8f5f 	dmb	sy
}
   188ac:	bd10      	pop	{r4, pc}
   188ae:	bf00      	nop
   188b0:	200026fc 	.word	0x200026fc
   188b4:	00021f60 	.word	0x00021f60
   188b8:	00021f69 	.word	0x00021f69
   188bc:	20003da3 	.word	0x20003da3
   188c0:	20003d93 	.word	0x20003d93
   188c4:	00021f6d 	.word	0x00021f6d

000188c8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   188c8:	4b0e      	ldr	r3, [pc, #56]	; (18904 <z_sys_init_run_level+0x3c>)
{
   188ca:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   188cc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   188d0:	3001      	adds	r0, #1
   188d2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   188d6:	42a6      	cmp	r6, r4
   188d8:	d800      	bhi.n	188dc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   188da:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   188dc:	e9d4 3500 	ldrd	r3, r5, [r4]
   188e0:	4628      	mov	r0, r5
   188e2:	4798      	blx	r3
		if (dev != NULL) {
   188e4:	b165      	cbz	r5, 18900 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   188e6:	68eb      	ldr	r3, [r5, #12]
   188e8:	b130      	cbz	r0, 188f8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   188ea:	2800      	cmp	r0, #0
   188ec:	bfb8      	it	lt
   188ee:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   188f0:	28ff      	cmp	r0, #255	; 0xff
   188f2:	bfa8      	it	ge
   188f4:	20ff      	movge	r0, #255	; 0xff
   188f6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   188f8:	785a      	ldrb	r2, [r3, #1]
   188fa:	f042 0201 	orr.w	r2, r2, #1
   188fe:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   18900:	3408      	adds	r4, #8
   18902:	e7e8      	b.n	188d6 <z_sys_init_run_level+0xe>
   18904:	000217c4 	.word	0x000217c4

00018908 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   18908:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1890a:	4605      	mov	r5, r0
   1890c:	b910      	cbnz	r0, 18914 <z_impl_device_get_binding+0xc>
		return NULL;
   1890e:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   18910:	4620      	mov	r0, r4
   18912:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   18914:	7803      	ldrb	r3, [r0, #0]
   18916:	2b00      	cmp	r3, #0
   18918:	d0f9      	beq.n	1890e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1891a:	4a0f      	ldr	r2, [pc, #60]	; (18958 <z_impl_device_get_binding+0x50>)
   1891c:	4c0f      	ldr	r4, [pc, #60]	; (1895c <z_impl_device_get_binding+0x54>)
   1891e:	4616      	mov	r6, r2
   18920:	4294      	cmp	r4, r2
   18922:	d108      	bne.n	18936 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   18924:	4c0d      	ldr	r4, [pc, #52]	; (1895c <z_impl_device_get_binding+0x54>)
   18926:	42b4      	cmp	r4, r6
   18928:	d0f1      	beq.n	1890e <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1892a:	4620      	mov	r0, r4
   1892c:	f007 fb2e 	bl	1ff8c <z_device_ready>
   18930:	b950      	cbnz	r0, 18948 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   18932:	3418      	adds	r4, #24
   18934:	e7f7      	b.n	18926 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   18936:	4620      	mov	r0, r4
   18938:	f007 fb28 	bl	1ff8c <z_device_ready>
   1893c:	b110      	cbz	r0, 18944 <z_impl_device_get_binding+0x3c>
   1893e:	6823      	ldr	r3, [r4, #0]
   18940:	42ab      	cmp	r3, r5
   18942:	d0e5      	beq.n	18910 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   18944:	3418      	adds	r4, #24
   18946:	e7eb      	b.n	18920 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   18948:	6821      	ldr	r1, [r4, #0]
   1894a:	4628      	mov	r0, r5
   1894c:	f7f3 fccc 	bl	c2e8 <strcmp>
   18950:	2800      	cmp	r0, #0
   18952:	d1ee      	bne.n	18932 <z_impl_device_get_binding+0x2a>
   18954:	e7dc      	b.n	18910 <z_impl_device_get_binding+0x8>
   18956:	bf00      	nop
   18958:	00020ce4 	.word	0x00020ce4
   1895c:	00020c24 	.word	0x00020c24

00018960 <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   18960:	4802      	ldr	r0, [pc, #8]	; (1896c <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   18962:	4a03      	ldr	r2, [pc, #12]	; (18970 <z_bss_zero+0x10>)
   18964:	2100      	movs	r1, #0
   18966:	1a12      	subs	r2, r2, r0
   18968:	f008 b8c2 	b.w	20af0 <memset>
   1896c:	20000a20 	.word	0x20000a20
   18970:	20004360 	.word	0x20004360

00018974 <bg_thread_main>:
 *
 * @return N/A
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   18974:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   18976:	4b0a      	ldr	r3, [pc, #40]	; (189a0 <bg_thread_main+0x2c>)
   18978:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1897a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1897c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1897e:	f7ff ffa3 	bl	188c8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   18982:	f008 f86a 	bl	20a5a <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   18986:	2003      	movs	r0, #3
   18988:	f7ff ff9e 	bl	188c8 <z_sys_init_run_level>

	z_init_static_threads();
   1898c:	f000 f956 	bl	18c3c <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
   18990:	f7f8 fc3c 	bl	1120c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   18994:	4a03      	ldr	r2, [pc, #12]	; (189a4 <bg_thread_main+0x30>)
   18996:	7b13      	ldrb	r3, [r2, #12]
   18998:	f023 0301 	bic.w	r3, r3, #1
   1899c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1899e:	bd08      	pop	{r3, pc}
   189a0:	200041a3 	.word	0x200041a3
   189a4:	20001c08 	.word	0x20001c08

000189a8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   189a8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   189ac:	f8df 9100 	ldr.w	r9, [pc, #256]	; 18ab0 <z_cstart+0x108>
   189b0:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   189b2:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   189b6:	4d36      	ldr	r5, [pc, #216]	; (18a90 <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
   189b8:	4e36      	ldr	r6, [pc, #216]	; (18a94 <z_cstart+0xec>)
   189ba:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   189bc:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 18ab4 <z_cstart+0x10c>
	z_setup_new_thread(thread, stack,
   189c0:	4f35      	ldr	r7, [pc, #212]	; (18a98 <z_cstart+0xf0>)
   189c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   189c6:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   189c8:	23e0      	movs	r3, #224	; 0xe0
   189ca:	2400      	movs	r4, #0
   189cc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   189d0:	2320      	movs	r3, #32
   189d2:	77eb      	strb	r3, [r5, #31]
   189d4:	762c      	strb	r4, [r5, #24]
   189d6:	766c      	strb	r4, [r5, #25]
   189d8:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   189da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   189dc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   189e0:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   189e2:	f7fa fb67 	bl	130b4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   189e6:	f7fa f9ef 	bl	12dc8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   189ea:	f04f 33ff 	mov.w	r3, #4294967295
   189ee:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   189f0:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   189f2:	f7fa fc63 	bl	132bc <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   189f6:	4d29      	ldr	r5, [pc, #164]	; (18a9c <z_cstart+0xf4>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   189f8:	f7fa fbd2 	bl	131a0 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   189fc:	f240 1301 	movw	r3, #257	; 0x101
   18a00:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   18a04:	ab06      	add	r3, sp, #24
   18a06:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   18a08:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   18a0c:	f007 fabd 	bl	1ff8a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   18a10:	4620      	mov	r0, r4
   18a12:	f7ff ff59 	bl	188c8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   18a16:	2001      	movs	r0, #1
   18a18:	f7ff ff56 	bl	188c8 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18a1c:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   18a20:	f000 fee2 	bl	197e8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18a24:	4b1e      	ldr	r3, [pc, #120]	; (18aa0 <z_cstart+0xf8>)
	_kernel.ready_q.cache = &z_main_thread;
   18a26:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18a28:	491e      	ldr	r1, [pc, #120]	; (18aa4 <z_cstart+0xfc>)
   18a2a:	9305      	str	r3, [sp, #20]
   18a2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   18a30:	4653      	mov	r3, sl
   18a32:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   18a36:	e9cd 4401 	strd	r4, r4, [sp, #4]
   18a3a:	9400      	str	r4, [sp, #0]
   18a3c:	4630      	mov	r0, r6
   18a3e:	f000 f89f 	bl	18b80 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18a42:	7b73      	ldrb	r3, [r6, #13]
   18a44:	4680      	mov	r8, r0
   18a46:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   18a4a:	4630      	mov	r0, r6
   18a4c:	7373      	strb	r3, [r6, #13]
   18a4e:	f007 fdc1 	bl	205d4 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   18a52:	230f      	movs	r3, #15
   18a54:	e9cd 4302 	strd	r4, r3, [sp, #8]
   18a58:	4913      	ldr	r1, [pc, #76]	; (18aa8 <z_cstart+0x100>)
   18a5a:	4b14      	ldr	r3, [pc, #80]	; (18aac <z_cstart+0x104>)
   18a5c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   18a60:	e9cd b404 	strd	fp, r4, [sp, #16]
   18a64:	e9cd 5400 	strd	r5, r4, [sp]
   18a68:	4638      	mov	r0, r7
   18a6a:	f000 f889 	bl	18b80 <z_setup_new_thread>
   18a6e:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   18a70:	60ef      	str	r7, [r5, #12]
   18a72:	f023 0304 	bic.w	r3, r3, #4
   18a76:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   18a78:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   18a7c:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   18a80:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   18a82:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   18a86:	4652      	mov	r2, sl
   18a88:	4641      	mov	r1, r8
   18a8a:	4630      	mov	r0, r6
   18a8c:	f7fa f986 	bl	12d9c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   18a90:	e000ed00 	.word	0xe000ed00
   18a94:	20001c08 	.word	0x20001c08
   18a98:	20001b88 	.word	0x20001b88
   18a9c:	200027a4 	.word	0x200027a4
   18aa0:	00021f74 	.word	0x00021f74
   18aa4:	200055e0 	.word	0x200055e0
   18aa8:	20005e00 	.word	0x20005e00
   18aac:	00018cf9 	.word	0x00018cf9
   18ab0:	20006780 	.word	0x20006780
   18ab4:	00018975 	.word	0x00018975

00018ab8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   18ab8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   18aba:	4c06      	ldr	r4, [pc, #24]	; (18ad4 <statics_init+0x1c>)
   18abc:	4d06      	ldr	r5, [pc, #24]	; (18ad8 <statics_init+0x20>)
   18abe:	42ac      	cmp	r4, r5
   18ac0:	d301      	bcc.n	18ac6 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   18ac2:	2000      	movs	r0, #0
   18ac4:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   18ac6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   18aca:	4620      	mov	r0, r4
   18acc:	f007 fa83 	bl	1ffd6 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   18ad0:	3414      	adds	r4, #20
   18ad2:	e7f4      	b.n	18abe <statics_init+0x6>
   18ad4:	20000884 	.word	0x20000884
   18ad8:	20000884 	.word	0x20000884

00018adc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   18adc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   18ade:	4b0e      	ldr	r3, [pc, #56]	; (18b18 <init_mem_slab_module+0x3c>)
   18ae0:	4c0e      	ldr	r4, [pc, #56]	; (18b1c <init_mem_slab_module+0x40>)
   18ae2:	42a3      	cmp	r3, r4
   18ae4:	d301      	bcc.n	18aea <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   18ae6:	2000      	movs	r0, #0
	return rc;
}
   18ae8:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   18aea:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   18aee:	ea41 0200 	orr.w	r2, r1, r0
   18af2:	f012 0203 	ands.w	r2, r2, #3
   18af6:	d10b      	bne.n	18b10 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   18af8:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   18afa:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   18afc:	42aa      	cmp	r2, r5
   18afe:	d101      	bne.n	18b04 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   18b00:	331c      	adds	r3, #28
   18b02:	e7ee      	b.n	18ae2 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   18b04:	695e      	ldr	r6, [r3, #20]
   18b06:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   18b08:	3201      	adds	r2, #1
		slab->free_list = p;
   18b0a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   18b0c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   18b0e:	e7f5      	b.n	18afc <init_mem_slab_module+0x20>
		return -EINVAL;
   18b10:	f06f 0015 	mvn.w	r0, #21
	return rc;
   18b14:	e7e8      	b.n	18ae8 <init_mem_slab_module+0xc>
   18b16:	bf00      	nop
   18b18:	20000830 	.word	0x20000830
   18b1c:	20000884 	.word	0x20000884

00018b20 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   18b20:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   18b22:	460c      	mov	r4, r1
   18b24:	4616      	mov	r6, r2
   18b26:	461f      	mov	r7, r3
	__asm__ volatile(
   18b28:	f04f 0340 	mov.w	r3, #64	; 0x40
   18b2c:	f3ef 8111 	mrs	r1, BASEPRI
   18b30:	f383 8811 	msr	BASEPRI, r3
   18b34:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   18b38:	6943      	ldr	r3, [r0, #20]
   18b3a:	b15b      	cbz	r3, 18b54 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   18b3c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   18b3e:	681b      	ldr	r3, [r3, #0]
   18b40:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   18b42:	6983      	ldr	r3, [r0, #24]
   18b44:	3301      	adds	r3, #1
   18b46:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   18b48:	2000      	movs	r0, #0
	__asm__ volatile(
   18b4a:	f381 8811 	msr	BASEPRI, r1
   18b4e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   18b52:	e011      	b.n	18b78 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   18b54:	ea56 0207 	orrs.w	r2, r6, r7
   18b58:	d103      	bne.n	18b62 <k_mem_slab_alloc+0x42>
		*mem = NULL;
   18b5a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   18b5c:	f06f 000b 	mvn.w	r0, #11
   18b60:	e7f3      	b.n	18b4a <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   18b62:	4602      	mov	r2, r0
   18b64:	e9cd 6700 	strd	r6, r7, [sp]
   18b68:	3008      	adds	r0, #8
   18b6a:	f000 fcb9 	bl	194e0 <z_pend_curr>
		if (result == 0) {
   18b6e:	b918      	cbnz	r0, 18b78 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   18b70:	4b02      	ldr	r3, [pc, #8]	; (18b7c <k_mem_slab_alloc+0x5c>)
   18b72:	689b      	ldr	r3, [r3, #8]
   18b74:	695b      	ldr	r3, [r3, #20]
   18b76:	6023      	str	r3, [r4, #0]
}
   18b78:	b002      	add	sp, #8
   18b7a:	bdd0      	pop	{r4, r6, r7, pc}
   18b7c:	200027a4 	.word	0x200027a4

00018b80 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   18b80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   18b84:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   18b86:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   18b88:	2604      	movs	r6, #4
   18b8a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   18b8c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   18b8e:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   18b90:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   18b94:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   18b96:	1dd6      	adds	r6, r2, #7
   18b98:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   18b9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   18b9e:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   18ba0:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   18ba4:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   18ba6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   18baa:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   18bae:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   18bb0:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   18bb2:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   18bb4:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   18bb8:	9202      	str	r2, [sp, #8]
   18bba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   18bbc:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   18bbe:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   18bc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   18bc2:	9200      	str	r2, [sp, #0]
   18bc4:	4642      	mov	r2, r8
{
   18bc6:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   18bc8:	f7fa f8b2 	bl	12d30 <arch_new_thread>
	if (!_current) {
   18bcc:	4b04      	ldr	r3, [pc, #16]	; (18be0 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   18bce:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   18bd0:	689b      	ldr	r3, [r3, #8]
   18bd2:	b103      	cbz	r3, 18bd6 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   18bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   18bd6:	6763      	str	r3, [r4, #116]	; 0x74
}
   18bd8:	4640      	mov	r0, r8
   18bda:	b004      	add	sp, #16
   18bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18be0:	200027a4 	.word	0x200027a4

00018be4 <z_impl_k_thread_create>:
{
   18be4:	b5f0      	push	{r4, r5, r6, r7, lr}
   18be6:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18be8:	2500      	movs	r5, #0
   18bea:	9505      	str	r5, [sp, #20]
   18bec:	9d10      	ldr	r5, [sp, #64]	; 0x40
   18bee:	9504      	str	r5, [sp, #16]
   18bf0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   18bf2:	9503      	str	r5, [sp, #12]
   18bf4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   18bf6:	9502      	str	r5, [sp, #8]
{
   18bf8:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18bfc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   18bfe:	9501      	str	r5, [sp, #4]
   18c00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   18c02:	9500      	str	r5, [sp, #0]
{
   18c04:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18c06:	f7ff ffbb 	bl	18b80 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   18c0a:	1c7b      	adds	r3, r7, #1
   18c0c:	bf08      	it	eq
   18c0e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   18c12:	d005      	beq.n	18c20 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18c14:	ea56 0307 	orrs.w	r3, r6, r7
   18c18:	d105      	bne.n	18c26 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   18c1a:	4620      	mov	r0, r4
   18c1c:	f000 fd7a 	bl	19714 <z_sched_start>
}
   18c20:	4620      	mov	r0, r4
   18c22:	b007      	add	sp, #28
   18c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   18c26:	4904      	ldr	r1, [pc, #16]	; (18c38 <z_impl_k_thread_create+0x54>)
   18c28:	4632      	mov	r2, r6
   18c2a:	463b      	mov	r3, r7
   18c2c:	f104 0018 	add.w	r0, r4, #24
   18c30:	f000 ff72 	bl	19b18 <z_add_timeout>
   18c34:	e7f4      	b.n	18c20 <z_impl_k_thread_create+0x3c>
   18c36:	bf00      	nop
   18c38:	000205f5 	.word	0x000205f5

00018c3c <z_init_static_threads>:
{
   18c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   18c40:	4e2a      	ldr	r6, [pc, #168]	; (18cec <z_init_static_threads+0xb0>)
   18c42:	4d2b      	ldr	r5, [pc, #172]	; (18cf0 <z_init_static_threads+0xb4>)
{
   18c44:	b086      	sub	sp, #24
   18c46:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   18c48:	42b5      	cmp	r5, r6
   18c4a:	f105 0430 	add.w	r4, r5, #48	; 0x30
   18c4e:	d310      	bcc.n	18c72 <z_init_static_threads+0x36>
	k_sched_lock();
   18c50:	f000 fbd4 	bl	193fc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   18c54:	4c26      	ldr	r4, [pc, #152]	; (18cf0 <z_init_static_threads+0xb4>)
   18c56:	f8df a09c 	ldr.w	sl, [pc, #156]	; 18cf4 <z_init_static_threads+0xb8>
			return (t * to_hz + off) / from_hz;
   18c5a:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   18c5e:	f240 36e7 	movw	r6, #999	; 0x3e7
   18c62:	2700      	movs	r7, #0
   18c64:	4544      	cmp	r4, r8
   18c66:	d321      	bcc.n	18cac <z_init_static_threads+0x70>
}
   18c68:	b006      	add	sp, #24
   18c6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   18c6e:	f000 bc7d 	b.w	1956c <k_sched_unlock>
		z_setup_new_thread(
   18c72:	f854 3c04 	ldr.w	r3, [r4, #-4]
   18c76:	9305      	str	r3, [sp, #20]
   18c78:	f854 3c10 	ldr.w	r3, [r4, #-16]
   18c7c:	9304      	str	r3, [sp, #16]
   18c7e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   18c82:	9303      	str	r3, [sp, #12]
   18c84:	f854 3c18 	ldr.w	r3, [r4, #-24]
   18c88:	9302      	str	r3, [sp, #8]
   18c8a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   18c8e:	9301      	str	r3, [sp, #4]
   18c90:	f854 3c20 	ldr.w	r3, [r4, #-32]
   18c94:	9300      	str	r3, [sp, #0]
   18c96:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   18c9a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   18c9e:	f7ff ff6f 	bl	18b80 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   18ca2:	f854 3c30 	ldr.w	r3, [r4, #-48]
   18ca6:	655d      	str	r5, [r3, #84]	; 0x54
   18ca8:	4625      	mov	r5, r4
   18caa:	e7cd      	b.n	18c48 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   18cac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18cae:	1c5a      	adds	r2, r3, #1
   18cb0:	d00d      	beq.n	18cce <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   18cb2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   18cb6:	4630      	mov	r0, r6
   18cb8:	4639      	mov	r1, r7
   18cba:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18cbe:	42b9      	cmp	r1, r7
   18cc0:	bf08      	it	eq
   18cc2:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   18cc4:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18cc6:	d104      	bne.n	18cd2 <z_init_static_threads+0x96>
	z_sched_start(thread);
   18cc8:	4628      	mov	r0, r5
   18cca:	f000 fd23 	bl	19714 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   18cce:	3430      	adds	r4, #48	; 0x30
   18cd0:	e7c8      	b.n	18c64 <z_init_static_threads+0x28>
   18cd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18cd6:	2300      	movs	r3, #0
   18cd8:	f7e8 f936 	bl	f48 <__aeabi_uldivmod>
   18cdc:	4602      	mov	r2, r0
   18cde:	460b      	mov	r3, r1
   18ce0:	f105 0018 	add.w	r0, r5, #24
   18ce4:	4651      	mov	r1, sl
   18ce6:	f000 ff17 	bl	19b18 <z_add_timeout>
   18cea:	e7f0      	b.n	18cce <z_init_static_threads+0x92>
   18cec:	2000082d 	.word	0x2000082d
   18cf0:	2000082d 	.word	0x2000082d
   18cf4:	000205f5 	.word	0x000205f5

00018cf8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   18cf8:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   18cfa:	4c09      	ldr	r4, [pc, #36]	; (18d20 <idle+0x28>)
	__asm__ volatile(
   18cfc:	f04f 0240 	mov.w	r2, #64	; 0x40
   18d00:	f3ef 8311 	mrs	r3, BASEPRI
   18d04:	f382 8811 	msr	BASEPRI, r2
   18d08:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   18d0c:	f007 fcef 	bl	206ee <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   18d10:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   18d12:	f7f9 fb31 	bl	12378 <pm_system_suspend>
   18d16:	2800      	cmp	r0, #0
   18d18:	d1f0      	bne.n	18cfc <idle+0x4>
	arch_cpu_idle();
   18d1a:	f7fa f85b 	bl	12dd4 <arch_cpu_idle>
}
   18d1e:	e7ed      	b.n	18cfc <idle+0x4>
   18d20:	200027a4 	.word	0x200027a4

00018d24 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   18d24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18d28:	4604      	mov	r4, r0
   18d2a:	4616      	mov	r6, r2
   18d2c:	461f      	mov	r7, r3
   18d2e:	f04f 0340 	mov.w	r3, #64	; 0x40
   18d32:	f3ef 8811 	mrs	r8, BASEPRI
   18d36:	f383 8811 	msr	BASEPRI, r3
   18d3a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   18d3e:	68c3      	ldr	r3, [r0, #12]
   18d40:	4a35      	ldr	r2, [pc, #212]	; (18e18 <z_impl_k_mutex_lock+0xf4>)
   18d42:	b16b      	cbz	r3, 18d60 <z_impl_k_mutex_lock+0x3c>
   18d44:	6880      	ldr	r0, [r0, #8]
   18d46:	6891      	ldr	r1, [r2, #8]
   18d48:	4288      	cmp	r0, r1
   18d4a:	d019      	beq.n	18d80 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   18d4c:	ea56 0307 	orrs.w	r3, r6, r7
   18d50:	d118      	bne.n	18d84 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   18d52:	f388 8811 	msr	BASEPRI, r8
   18d56:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   18d5a:	f06f 000f 	mvn.w	r0, #15
   18d5e:	e00c      	b.n	18d7a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   18d60:	6891      	ldr	r1, [r2, #8]
   18d62:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   18d66:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   18d68:	3301      	adds	r3, #1
   18d6a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   18d6c:	6893      	ldr	r3, [r2, #8]
   18d6e:	60a3      	str	r3, [r4, #8]
   18d70:	f388 8811 	msr	BASEPRI, r8
   18d74:	f3bf 8f6f 	isb	sy
		return 0;
   18d78:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   18d7a:	b002      	add	sp, #8
   18d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   18d80:	6921      	ldr	r1, [r4, #16]
   18d82:	e7f0      	b.n	18d66 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   18d84:	f991 100e 	ldrsb.w	r1, [r1, #14]
   18d88:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   18d8c:	4299      	cmp	r1, r3
   18d8e:	bfa8      	it	ge
   18d90:	4619      	movge	r1, r3
   18d92:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   18d96:	4291      	cmp	r1, r2
   18d98:	bfb8      	it	lt
   18d9a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   18d9c:	428b      	cmp	r3, r1
   18d9e:	dd2f      	ble.n	18e00 <z_impl_k_mutex_lock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
   18da0:	f000 fcd6 	bl	19750 <z_set_prio>
   18da4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   18da6:	e9cd 6700 	strd	r6, r7, [sp]
   18daa:	481c      	ldr	r0, [pc, #112]	; (18e1c <z_impl_k_mutex_lock+0xf8>)
   18dac:	4622      	mov	r2, r4
   18dae:	4641      	mov	r1, r8
   18db0:	f000 fb96 	bl	194e0 <z_pend_curr>
	if (got_mutex == 0) {
   18db4:	2800      	cmp	r0, #0
   18db6:	d0e0      	beq.n	18d7a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   18db8:	f04f 0340 	mov.w	r3, #64	; 0x40
   18dbc:	f3ef 8611 	mrs	r6, BASEPRI
   18dc0:	f383 8811 	msr	BASEPRI, r3
   18dc4:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   18dc8:	6823      	ldr	r3, [r4, #0]
   18dca:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18dcc:	429c      	cmp	r4, r3
   18dce:	d00a      	beq.n	18de6 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   18dd0:	b14b      	cbz	r3, 18de6 <z_impl_k_mutex_lock+0xc2>
   18dd2:	f993 300e 	ldrsb.w	r3, [r3, #14]
   18dd6:	4299      	cmp	r1, r3
   18dd8:	bfa8      	it	ge
   18dda:	4619      	movge	r1, r3
   18ddc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   18de0:	4299      	cmp	r1, r3
   18de2:	bfb8      	it	lt
   18de4:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   18de6:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   18de8:	f990 300e 	ldrsb.w	r3, [r0, #14]
   18dec:	4299      	cmp	r1, r3
   18dee:	d109      	bne.n	18e04 <z_impl_k_mutex_lock+0xe0>
	if (resched) {
   18df0:	b16d      	cbz	r5, 18e0e <z_impl_k_mutex_lock+0xea>
		z_reschedule(&lock, key);
   18df2:	480a      	ldr	r0, [pc, #40]	; (18e1c <z_impl_k_mutex_lock+0xf8>)
   18df4:	4631      	mov	r1, r6
   18df6:	f000 faef 	bl	193d8 <z_reschedule>
	return -EAGAIN;
   18dfa:	f06f 000a 	mvn.w	r0, #10
   18dfe:	e7bc      	b.n	18d7a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   18e00:	2500      	movs	r5, #0
   18e02:	e7d0      	b.n	18da6 <z_impl_k_mutex_lock+0x82>
		return z_set_prio(mutex->owner, new_prio);
   18e04:	f000 fca4 	bl	19750 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   18e08:	2800      	cmp	r0, #0
   18e0a:	d1f2      	bne.n	18df2 <z_impl_k_mutex_lock+0xce>
   18e0c:	e7f0      	b.n	18df0 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   18e0e:	f386 8811 	msr	BASEPRI, r6
   18e12:	f3bf 8f6f 	isb	sy
   18e16:	e7f0      	b.n	18dfa <z_impl_k_mutex_lock+0xd6>
   18e18:	200027a4 	.word	0x200027a4
   18e1c:	200041a4 	.word	0x200041a4

00018e20 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   18e20:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   18e22:	6883      	ldr	r3, [r0, #8]
{
   18e24:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   18e26:	2b00      	cmp	r3, #0
   18e28:	d036      	beq.n	18e98 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   18e2a:	4a1e      	ldr	r2, [pc, #120]	; (18ea4 <z_impl_k_mutex_unlock+0x84>)
   18e2c:	6892      	ldr	r2, [r2, #8]
   18e2e:	4293      	cmp	r3, r2
   18e30:	d135      	bne.n	18e9e <z_impl_k_mutex_unlock+0x7e>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   18e32:	7bda      	ldrb	r2, [r3, #15]
   18e34:	3a01      	subs	r2, #1
   18e36:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   18e38:	68c3      	ldr	r3, [r0, #12]
   18e3a:	2b01      	cmp	r3, #1
   18e3c:	d905      	bls.n	18e4a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   18e3e:	3b01      	subs	r3, #1
   18e40:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   18e42:	f000 fb93 	bl	1956c <k_sched_unlock>

	return 0;
   18e46:	2000      	movs	r0, #0
}
   18e48:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   18e4a:	f04f 0340 	mov.w	r3, #64	; 0x40
   18e4e:	f3ef 8511 	mrs	r5, BASEPRI
   18e52:	f383 8811 	msr	BASEPRI, r3
   18e56:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   18e5a:	6901      	ldr	r1, [r0, #16]
   18e5c:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   18e5e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   18e62:	4299      	cmp	r1, r3
   18e64:	d001      	beq.n	18e6a <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   18e66:	f000 fc73 	bl	19750 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   18e6a:	4620      	mov	r0, r4
   18e6c:	f007 fbe4 	bl	20638 <z_unpend_first_thread>
	mutex->owner = new_owner;
   18e70:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   18e72:	b158      	cbz	r0, 18e8c <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   18e74:	f990 200e 	ldrsb.w	r2, [r0, #14]
   18e78:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   18e7a:	2200      	movs	r2, #0
   18e7c:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   18e7e:	f007 fba9 	bl	205d4 <z_ready_thread>
		z_reschedule(&lock, key);
   18e82:	4809      	ldr	r0, [pc, #36]	; (18ea8 <z_impl_k_mutex_unlock+0x88>)
   18e84:	4629      	mov	r1, r5
   18e86:	f000 faa7 	bl	193d8 <z_reschedule>
   18e8a:	e7da      	b.n	18e42 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   18e8c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   18e8e:	f385 8811 	msr	BASEPRI, r5
   18e92:	f3bf 8f6f 	isb	sy
   18e96:	e7d4      	b.n	18e42 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   18e98:	f06f 0015 	mvn.w	r0, #21
   18e9c:	e7d4      	b.n	18e48 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   18e9e:	f04f 30ff 	mov.w	r0, #4294967295
   18ea2:	e7d1      	b.n	18e48 <z_impl_k_mutex_unlock+0x28>
   18ea4:	200027a4 	.word	0x200027a4
   18ea8:	200041a4 	.word	0x200041a4

00018eac <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   18eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18eae:	4616      	mov	r6, r2
   18eb0:	461f      	mov	r7, r3
	__asm__ volatile(
   18eb2:	f04f 0340 	mov.w	r3, #64	; 0x40
   18eb6:	f3ef 8511 	mrs	r5, BASEPRI
   18eba:	f383 8811 	msr	BASEPRI, r3
   18ebe:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   18ec2:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   18ec4:	b19c      	cbz	r4, 18eee <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   18ec6:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   18ec8:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   18eca:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   18ece:	4294      	cmp	r4, r2
	list->head = node;
   18ed0:	6003      	str	r3, [r0, #0]
	list->tail = node;
   18ed2:	bf08      	it	eq
   18ed4:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   18ed6:	2101      	movs	r1, #1
   18ed8:	4620      	mov	r0, r4
   18eda:	f007 f9a9 	bl	20230 <z_queue_node_peek>
   18ede:	4604      	mov	r4, r0
	__asm__ volatile(
   18ee0:	f385 8811 	msr	BASEPRI, r5
   18ee4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   18ee8:	4620      	mov	r0, r4
   18eea:	b003      	add	sp, #12
   18eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18eee:	ea56 0307 	orrs.w	r3, r6, r7
   18ef2:	d0f5      	beq.n	18ee0 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   18ef4:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   18ef8:	e9cd 6700 	strd	r6, r7, [sp]
   18efc:	4629      	mov	r1, r5
   18efe:	4610      	mov	r0, r2
   18f00:	f000 faee 	bl	194e0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   18f04:	2800      	cmp	r0, #0
   18f06:	d1ef      	bne.n	18ee8 <z_impl_k_queue_get+0x3c>
   18f08:	4b01      	ldr	r3, [pc, #4]	; (18f10 <z_impl_k_queue_get+0x64>)
   18f0a:	689b      	ldr	r3, [r3, #8]
   18f0c:	695c      	ldr	r4, [r3, #20]
   18f0e:	e7eb      	b.n	18ee8 <z_impl_k_queue_get+0x3c>
   18f10:	200027a4 	.word	0x200027a4

00018f14 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   18f14:	b538      	push	{r3, r4, r5, lr}
   18f16:	4604      	mov	r4, r0
	__asm__ volatile(
   18f18:	f04f 0340 	mov.w	r3, #64	; 0x40
   18f1c:	f3ef 8511 	mrs	r5, BASEPRI
   18f20:	f383 8811 	msr	BASEPRI, r3
   18f24:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   18f28:	f007 fb86 	bl	20638 <z_unpend_first_thread>

	if (thread != NULL) {
   18f2c:	b148      	cbz	r0, 18f42 <z_impl_k_sem_give+0x2e>
   18f2e:	2200      	movs	r2, #0
   18f30:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   18f32:	f007 fb4f 	bl	205d4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   18f36:	4629      	mov	r1, r5
   18f38:	4808      	ldr	r0, [pc, #32]	; (18f5c <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   18f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   18f3e:	f000 ba4b 	b.w	193d8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   18f42:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   18f46:	429a      	cmp	r2, r3
   18f48:	bf18      	it	ne
   18f4a:	3301      	addne	r3, #1
   18f4c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   18f4e:	2102      	movs	r1, #2
   18f50:	f104 0010 	add.w	r0, r4, #16
   18f54:	f007 fd6c 	bl	20a30 <z_handle_obj_poll_events>
}
   18f58:	e7ed      	b.n	18f36 <z_impl_k_sem_give+0x22>
   18f5a:	bf00      	nop
   18f5c:	200041a4 	.word	0x200041a4

00018f60 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   18f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18f62:	4614      	mov	r4, r2
   18f64:	461d      	mov	r5, r3
   18f66:	f04f 0340 	mov.w	r3, #64	; 0x40
   18f6a:	f3ef 8111 	mrs	r1, BASEPRI
   18f6e:	f383 8811 	msr	BASEPRI, r3
   18f72:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   18f76:	6883      	ldr	r3, [r0, #8]
   18f78:	b143      	cbz	r3, 18f8c <z_impl_k_sem_take+0x2c>
		sem->count--;
   18f7a:	3b01      	subs	r3, #1
   18f7c:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   18f7e:	f381 8811 	msr	BASEPRI, r1
   18f82:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   18f86:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   18f88:	b003      	add	sp, #12
   18f8a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18f8c:	ea54 0305 	orrs.w	r3, r4, r5
   18f90:	d106      	bne.n	18fa0 <z_impl_k_sem_take+0x40>
   18f92:	f381 8811 	msr	BASEPRI, r1
   18f96:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   18f9a:	f06f 000f 	mvn.w	r0, #15
   18f9e:	e7f3      	b.n	18f88 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   18fa0:	4602      	mov	r2, r0
   18fa2:	e9cd 4500 	strd	r4, r5, [sp]
   18fa6:	4802      	ldr	r0, [pc, #8]	; (18fb0 <z_impl_k_sem_take+0x50>)
   18fa8:	f000 fa9a 	bl	194e0 <z_pend_curr>
	return ret;
   18fac:	e7ec      	b.n	18f88 <z_impl_k_sem_take+0x28>
   18fae:	bf00      	nop
   18fb0:	200041a4 	.word	0x200041a4

00018fb4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   18fb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   18fb6:	4b09      	ldr	r3, [pc, #36]	; (18fdc <k_sys_work_q_init+0x28>)
   18fb8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   18fba:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   18fbc:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   18fbe:	9300      	str	r3, [sp, #0]
   18fc0:	4907      	ldr	r1, [pc, #28]	; (18fe0 <k_sys_work_q_init+0x2c>)
   18fc2:	4808      	ldr	r0, [pc, #32]	; (18fe4 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   18fc4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   18fc8:	f04f 33ff 	mov.w	r3, #4294967295
   18fcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   18fd0:	f000 f91c 	bl	1920c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   18fd4:	4620      	mov	r0, r4
   18fd6:	b004      	add	sp, #16
   18fd8:	bd10      	pop	{r4, pc}
   18fda:	bf00      	nop
   18fdc:	00021f79 	.word	0x00021f79
   18fe0:	20006780 	.word	0x20006780
   18fe4:	20001c88 	.word	0x20001c88

00018fe8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   18fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   18fec:	4e4b      	ldr	r6, [pc, #300]	; (1911c <work_queue_main+0x134>)
{
   18fee:	b085      	sub	sp, #20
   18ff0:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   18ff2:	f04f 38ff 	mov.w	r8, #4294967295
   18ff6:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
   18ffa:	f04f 0340 	mov.w	r3, #64	; 0x40
   18ffe:	f3ef 8711 	mrs	r7, BASEPRI
   19002:	f383 8811 	msr	BASEPRI, r3
   19006:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1900a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   1900e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   19012:	b985      	cbnz	r5, 19036 <work_queue_main+0x4e>
	*flagp &= ~BIT(bit);
   19014:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
   19018:	075d      	lsls	r5, r3, #29
	*flagp &= ~BIT(bit);
   1901a:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   1901e:	d433      	bmi.n	19088 <work_queue_main+0xa0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   19020:	2300      	movs	r3, #0
   19022:	e9cd 8900 	strd	r8, r9, [sp]
   19026:	9302      	str	r3, [sp, #8]
   19028:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1902c:	4639      	mov	r1, r7
   1902e:	483c      	ldr	r0, [pc, #240]	; (19120 <work_queue_main+0x138>)
   19030:	f000 fcf6 	bl	19a20 <z_sched_wait>
			continue;
   19034:	e7e1      	b.n	18ffa <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19036:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   1903a:	6829      	ldr	r1, [r5, #0]
	list->head = node;
   1903c:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19040:	4295      	cmp	r5, r2
   19042:	d101      	bne.n	19048 <work_queue_main+0x60>
	list->tail = node;
   19044:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   19048:	f043 0302 	orr.w	r3, r3, #2
   1904c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   19050:	68eb      	ldr	r3, [r5, #12]
   19052:	f023 0304 	bic.w	r3, r3, #4
   19056:	f043 0301 	orr.w	r3, r3, #1
   1905a:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1905c:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1905e:	f387 8811 	msr	BASEPRI, r7
   19062:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
   19066:	4628      	mov	r0, r5
   19068:	4798      	blx	r3
	__asm__ volatile(
   1906a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1906e:	f3ef 8b11 	mrs	fp, BASEPRI
   19072:	f383 8811 	msr	BASEPRI, r3
   19076:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1907a:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1907c:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1907e:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   19082:	d40b      	bmi.n	1909c <work_queue_main+0xb4>
	*flagp &= ~BIT(bit);
   19084:	60ea      	str	r2, [r5, #12]
   19086:	e00e      	b.n	190a6 <work_queue_main+0xbe>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   19088:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1908c:	2200      	movs	r2, #0
   1908e:	2101      	movs	r1, #1
   19090:	4628      	mov	r0, r5
   19092:	f007 faf9 	bl	20688 <z_sched_wake>
   19096:	2800      	cmp	r0, #0
   19098:	d1f8      	bne.n	1908c <work_queue_main+0xa4>
   1909a:	e7c1      	b.n	19020 <work_queue_main+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1909c:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1909e:	f023 0303 	bic.w	r3, r3, #3
   190a2:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   190a4:	b970      	cbnz	r0, 190c4 <work_queue_main+0xdc>
	*flagp &= ~BIT(bit);
   190a6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   190aa:	f023 0302 	bic.w	r3, r3, #2
   190ae:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   190b2:	f38b 8811 	msr	BASEPRI, fp
   190b6:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   190ba:	05d8      	lsls	r0, r3, #23
   190bc:	d49d      	bmi.n	18ffa <work_queue_main+0x12>
	z_impl_k_yield();
   190be:	f000 fb9f 	bl	19800 <z_impl_k_yield>
}
   190c2:	e79a      	b.n	18ffa <work_queue_main+0x12>
	return node->next;
   190c4:	6807      	ldr	r7, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   190c6:	f04f 0a00 	mov.w	sl, #0
   190ca:	2f00      	cmp	r7, #0
   190cc:	bf38      	it	cc
   190ce:	2700      	movcc	r7, #0
	parent->next = child;
   190d0:	4653      	mov	r3, sl
		if (wc->work == work) {
   190d2:	6842      	ldr	r2, [r0, #4]
   190d4:	4295      	cmp	r5, r2
   190d6:	4601      	mov	r1, r0
   190d8:	d10e      	bne.n	190f8 <work_queue_main+0x110>
Z_GENLIST_REMOVE(slist, snode)
   190da:	6801      	ldr	r1, [r0, #0]
   190dc:	f1ba 0f00 	cmp.w	sl, #0
   190e0:	d114      	bne.n	1910c <work_queue_main+0x124>
   190e2:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   190e4:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   190e6:	4290      	cmp	r0, r2
   190e8:	d100      	bne.n	190ec <work_queue_main+0x104>
	list->tail = node;
   190ea:	6071      	str	r1, [r6, #4]
	parent->next = child;
   190ec:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   190f0:	f7ff ff10 	bl	18f14 <z_impl_k_sem_give>
}
   190f4:	4651      	mov	r1, sl
   190f6:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   190f8:	2f00      	cmp	r7, #0
   190fa:	d0d4      	beq.n	190a6 <work_queue_main+0xbe>
	return node->next;
   190fc:	683a      	ldr	r2, [r7, #0]
   190fe:	2a00      	cmp	r2, #0
   19100:	bf38      	it	cc
   19102:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19104:	4638      	mov	r0, r7
   19106:	468a      	mov	sl, r1
   19108:	4617      	mov	r7, r2
   1910a:	e7e2      	b.n	190d2 <work_queue_main+0xea>
	parent->next = child;
   1910c:	f8ca 1000 	str.w	r1, [sl]
Z_GENLIST_REMOVE(slist, snode)
   19110:	6872      	ldr	r2, [r6, #4]
   19112:	4290      	cmp	r0, r2
	list->tail = node;
   19114:	bf08      	it	eq
   19116:	f8c6 a004 	streq.w	sl, [r6, #4]
}
   1911a:	e7e7      	b.n	190ec <work_queue_main+0x104>
   1911c:	200027d4 	.word	0x200027d4
   19120:	200041a4 	.word	0x200041a4

00019124 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   19124:	68c3      	ldr	r3, [r0, #12]
{
   19126:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   19128:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1912c:	079b      	lsls	r3, r3, #30
{
   1912e:	4605      	mov	r5, r0
   19130:	460c      	mov	r4, r1
	if (ret) {
   19132:	d50d      	bpl.n	19150 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   19134:	2201      	movs	r2, #1
   19136:	2100      	movs	r1, #0
   19138:	f104 0008 	add.w	r0, r4, #8
   1913c:	f007 f8e1 	bl	20302 <z_impl_k_sem_init>
	parent->next = child;
   19140:	2300      	movs	r3, #0
   19142:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   19144:	4b05      	ldr	r3, [pc, #20]	; (1915c <cancel_sync_locked+0x38>)
	canceler->work = work;
   19146:	6065      	str	r5, [r4, #4]
   19148:	685a      	ldr	r2, [r3, #4]
   1914a:	b91a      	cbnz	r2, 19154 <cancel_sync_locked+0x30>
	list->head = node;
   1914c:	e9c3 4400 	strd	r4, r4, [r3]
}
   19150:	4630      	mov	r0, r6
   19152:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   19154:	6014      	str	r4, [r2, #0]
	list->tail = node;
   19156:	605c      	str	r4, [r3, #4]
}
   19158:	e7fa      	b.n	19150 <cancel_sync_locked+0x2c>
   1915a:	bf00      	nop
   1915c:	200027d4 	.word	0x200027d4

00019160 <submit_to_queue_locked>:
{
   19160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   19162:	68c3      	ldr	r3, [r0, #12]
   19164:	079a      	lsls	r2, r3, #30
{
   19166:	4604      	mov	r4, r0
   19168:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1916a:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1916e:	d41f      	bmi.n	191b0 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   19170:	075f      	lsls	r7, r3, #29
   19172:	d41f      	bmi.n	191b4 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   19174:	680a      	ldr	r2, [r1, #0]
   19176:	b90a      	cbnz	r2, 1917c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   19178:	6882      	ldr	r2, [r0, #8]
   1917a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1917c:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   1917e:	bf44      	itt	mi
   19180:	68a3      	ldrmi	r3, [r4, #8]
   19182:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   19184:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   19186:	bf4c      	ite	mi
   19188:	2502      	movmi	r5, #2
		ret = 1;
   1918a:	2501      	movpl	r5, #1
	if (queue == NULL) {
   1918c:	b37f      	cbz	r7, 191ee <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1918e:	4b1b      	ldr	r3, [pc, #108]	; (191fc <submit_to_queue_locked+0x9c>)
   19190:	689b      	ldr	r3, [r3, #8]
   19192:	42bb      	cmp	r3, r7
   19194:	d111      	bne.n	191ba <submit_to_queue_locked+0x5a>
   19196:	f006 ffce 	bl	20136 <k_is_in_isr>
   1919a:	f080 0001 	eor.w	r0, r0, #1
   1919e:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   191a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   191a4:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   191a6:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   191aa:	d523      	bpl.n	191f4 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   191ac:	b13a      	cbz	r2, 191be <submit_to_queue_locked+0x5e>
   191ae:	b940      	cbnz	r0, 191c2 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   191b0:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   191b4:	2300      	movs	r3, #0
   191b6:	6033      	str	r3, [r6, #0]
	return ret;
   191b8:	e013      	b.n	191e2 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   191ba:	2000      	movs	r0, #0
   191bc:	e7f0      	b.n	191a0 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   191be:	071b      	lsls	r3, r3, #28
   191c0:	d4f6      	bmi.n	191b0 <submit_to_queue_locked+0x50>
	parent->next = child;
   191c2:	2300      	movs	r3, #0
   191c4:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   191c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   191ca:	b963      	cbnz	r3, 191e6 <submit_to_queue_locked+0x86>
	list->head = node;
   191cc:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   191d0:	4638      	mov	r0, r7
   191d2:	f007 f8a6 	bl	20322 <notify_queue_locked>
	*flagp |= BIT(bit);
   191d6:	68e3      	ldr	r3, [r4, #12]
   191d8:	f043 0304 	orr.w	r3, r3, #4
   191dc:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   191de:	6833      	ldr	r3, [r6, #0]
   191e0:	60a3      	str	r3, [r4, #8]
}
   191e2:	4628      	mov	r0, r5
   191e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   191e6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   191e8:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   191ec:	e7f0      	b.n	191d0 <submit_to_queue_locked+0x70>
		return -EINVAL;
   191ee:	f06f 0515 	mvn.w	r5, #21
   191f2:	e7df      	b.n	191b4 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   191f4:	f06f 0512 	mvn.w	r5, #18
   191f8:	e7dc      	b.n	191b4 <submit_to_queue_locked+0x54>
   191fa:	bf00      	nop
   191fc:	200027a4 	.word	0x200027a4

00019200 <k_work_submit>:
{
   19200:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   19202:	4801      	ldr	r0, [pc, #4]	; (19208 <k_work_submit+0x8>)
   19204:	f007 b8fd 	b.w	20402 <k_work_submit_to_queue>
   19208:	20001c88 	.word	0x20001c88

0001920c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1920c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1920e:	b089      	sub	sp, #36	; 0x24
   19210:	4604      	mov	r4, r0
	list->head = NULL;
   19212:	2000      	movs	r0, #0
	list->tail = NULL;
   19214:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   19218:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1921a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1921e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   19222:	f104 0090 	add.w	r0, r4, #144	; 0x90
   19226:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1922a:	b31d      	cbz	r5, 19274 <k_work_queue_start+0x68>
   1922c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1922e:	2800      	cmp	r0, #0
   19230:	f240 1001 	movw	r0, #257	; 0x101
   19234:	bf08      	it	eq
   19236:	2001      	moveq	r0, #1
	*flagp = flags;
   19238:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1923c:	2000      	movs	r0, #0
   1923e:	f04f 36ff 	mov.w	r6, #4294967295
   19242:	f04f 37ff 	mov.w	r7, #4294967295
   19246:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1924a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1924e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   19252:	4b09      	ldr	r3, [pc, #36]	; (19278 <k_work_queue_start+0x6c>)
   19254:	9400      	str	r4, [sp, #0]
   19256:	4620      	mov	r0, r4
   19258:	f7ff fcc4 	bl	18be4 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1925c:	b125      	cbz	r5, 19268 <k_work_queue_start+0x5c>
   1925e:	6829      	ldr	r1, [r5, #0]
   19260:	b111      	cbz	r1, 19268 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   19262:	4620      	mov	r0, r4
   19264:	f006 ff6d 	bl	20142 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   19268:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1926a:	b009      	add	sp, #36	; 0x24
   1926c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   19270:	f006 bf6a 	b.w	20148 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   19274:	2001      	movs	r0, #1
   19276:	e7df      	b.n	19238 <k_work_queue_start+0x2c>
   19278:	00018fe9 	.word	0x00018fe9

0001927c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1927c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1927e:	4614      	mov	r4, r2
   19280:	9001      	str	r0, [sp, #4]
   19282:	461d      	mov	r5, r3
   19284:	4608      	mov	r0, r1
	__asm__ volatile(
   19286:	f04f 0140 	mov.w	r1, #64	; 0x40
   1928a:	f3ef 8611 	mrs	r6, BASEPRI
   1928e:	f381 8811 	msr	BASEPRI, r1
   19292:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   19296:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   19298:	f011 0f0e 	tst.w	r1, #14
   1929c:	d115      	bne.n	192ca <k_work_schedule_for_queue+0x4e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1929e:	432c      	orrs	r4, r5
   192a0:	d108      	bne.n	192b4 <k_work_schedule_for_queue+0x38>
		return submit_to_queue_locked(work, queuep);
   192a2:	a901      	add	r1, sp, #4
   192a4:	f7ff ff5c 	bl	19160 <submit_to_queue_locked>
	__asm__ volatile(
   192a8:	f386 8811 	msr	BASEPRI, r6
   192ac:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   192b0:	b002      	add	sp, #8
   192b2:	bd70      	pop	{r4, r5, r6, pc}
	*flagp |= BIT(bit);
   192b4:	f041 0108 	orr.w	r1, r1, #8
   192b8:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   192ba:	9901      	ldr	r1, [sp, #4]
   192bc:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   192be:	3010      	adds	r0, #16
   192c0:	4903      	ldr	r1, [pc, #12]	; (192d0 <k_work_schedule_for_queue+0x54>)
   192c2:	f000 fc29 	bl	19b18 <z_add_timeout>
	return ret;
   192c6:	2001      	movs	r0, #1
   192c8:	e7ee      	b.n	192a8 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   192ca:	2000      	movs	r0, #0
   192cc:	e7ec      	b.n	192a8 <k_work_schedule_for_queue+0x2c>
   192ce:	bf00      	nop
   192d0:	000203b3 	.word	0x000203b3

000192d4 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   192d4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   192d6:	4801      	ldr	r0, [pc, #4]	; (192dc <k_work_schedule+0x8>)
   192d8:	f7ff bfd0 	b.w	1927c <k_work_schedule_for_queue>
   192dc:	20001c88 	.word	0x20001c88

000192e0 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   192e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   192e2:	460c      	mov	r4, r1
   192e4:	9001      	str	r0, [sp, #4]
   192e6:	4616      	mov	r6, r2
   192e8:	461f      	mov	r7, r3
	__asm__ volatile(
   192ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   192ee:	f3ef 8511 	mrs	r5, BASEPRI
   192f2:	f383 8811 	msr	BASEPRI, r3
   192f6:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   192fa:	4608      	mov	r0, r1
   192fc:	f007 f818 	bl	20330 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19300:	ea56 0307 	orrs.w	r3, r6, r7
   19304:	d109      	bne.n	1931a <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   19306:	a901      	add	r1, sp, #4
   19308:	4620      	mov	r0, r4
   1930a:	f7ff ff29 	bl	19160 <submit_to_queue_locked>
	__asm__ volatile(
   1930e:	f385 8811 	msr	BASEPRI, r5
   19312:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   19316:	b003      	add	sp, #12
   19318:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1931a:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1931c:	4906      	ldr	r1, [pc, #24]	; (19338 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1931e:	f043 0308 	orr.w	r3, r3, #8
   19322:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   19324:	9b01      	ldr	r3, [sp, #4]
   19326:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   19328:	f104 0010 	add.w	r0, r4, #16
   1932c:	4632      	mov	r2, r6
   1932e:	463b      	mov	r3, r7
   19330:	f000 fbf2 	bl	19b18 <z_add_timeout>
	return ret;
   19334:	2001      	movs	r0, #1
   19336:	e7ea      	b.n	1930e <k_work_reschedule_for_queue+0x2e>
   19338:	000203b3 	.word	0x000203b3

0001933c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1933c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1933e:	4801      	ldr	r0, [pc, #4]	; (19344 <k_work_reschedule+0x8>)
   19340:	f7ff bfce 	b.w	192e0 <k_work_reschedule_for_queue>
   19344:	20001c88 	.word	0x20001c88

00019348 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   19348:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1934a:	4c08      	ldr	r4, [pc, #32]	; (1936c <z_reset_time_slice+0x24>)
   1934c:	6823      	ldr	r3, [r4, #0]
   1934e:	b15b      	cbz	r3, 19368 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   19350:	f7f9 faac 	bl	128ac <sys_clock_elapsed>
   19354:	4603      	mov	r3, r0
   19356:	6820      	ldr	r0, [r4, #0]
   19358:	4a05      	ldr	r2, [pc, #20]	; (19370 <z_reset_time_slice+0x28>)
   1935a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1935c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   19360:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   19362:	2100      	movs	r1, #0
   19364:	f007 b9d3 	b.w	2070e <z_set_timeout_expiry>
}
   19368:	bd10      	pop	{r4, pc}
   1936a:	bf00      	nop
   1936c:	200027e4 	.word	0x200027e4
   19370:	200027a4 	.word	0x200027a4

00019374 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   19374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19376:	4604      	mov	r4, r0
   19378:	460d      	mov	r5, r1
	__asm__ volatile(
   1937a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1937e:	f3ef 8611 	mrs	r6, BASEPRI
   19382:	f383 8811 	msr	BASEPRI, r3
   19386:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1938a:	4b10      	ldr	r3, [pc, #64]	; (193cc <k_sched_time_slice_set+0x58>)
   1938c:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1938e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   19392:	f240 30e7 	movw	r0, #999	; 0x3e7
   19396:	2100      	movs	r1, #0
   19398:	611a      	str	r2, [r3, #16]
   1939a:	fbe7 0104 	umlal	r0, r1, r7, r4
   1939e:	2300      	movs	r3, #0
   193a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   193a4:	f7e7 fdd0 	bl	f48 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   193a8:	2c00      	cmp	r4, #0
   193aa:	4b09      	ldr	r3, [pc, #36]	; (193d0 <k_sched_time_slice_set+0x5c>)
   193ac:	dc09      	bgt.n	193c2 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   193ae:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   193b0:	4b08      	ldr	r3, [pc, #32]	; (193d4 <k_sched_time_slice_set+0x60>)
   193b2:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   193b4:	f7ff ffc8 	bl	19348 <z_reset_time_slice>
	__asm__ volatile(
   193b8:	f386 8811 	msr	BASEPRI, r6
   193bc:	f3bf 8f6f 	isb	sy
	}
}
   193c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   193c2:	2802      	cmp	r0, #2
   193c4:	bfb8      	it	lt
   193c6:	2002      	movlt	r0, #2
   193c8:	e7f1      	b.n	193ae <k_sched_time_slice_set+0x3a>
   193ca:	bf00      	nop
   193cc:	200027a4 	.word	0x200027a4
   193d0:	200027e4 	.word	0x200027e4
   193d4:	200027e0 	.word	0x200027e0

000193d8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   193d8:	b949      	cbnz	r1, 193ee <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   193da:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   193de:	b930      	cbnz	r0, 193ee <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   193e0:	4b05      	ldr	r3, [pc, #20]	; (193f8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   193e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   193e4:	689b      	ldr	r3, [r3, #8]
   193e6:	429a      	cmp	r2, r3
   193e8:	d001      	beq.n	193ee <z_reschedule+0x16>
	ret = arch_swap(key);
   193ea:	f7f9 bbf3 	b.w	12bd4 <arch_swap>
   193ee:	f381 8811 	msr	BASEPRI, r1
   193f2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   193f6:	4770      	bx	lr
   193f8:	200027a4 	.word	0x200027a4

000193fc <k_sched_lock>:
	__asm__ volatile(
   193fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   19400:	f3ef 8111 	mrs	r1, BASEPRI
   19404:	f383 8811 	msr	BASEPRI, r3
   19408:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1940c:	4b04      	ldr	r3, [pc, #16]	; (19420 <k_sched_lock+0x24>)
   1940e:	689a      	ldr	r2, [r3, #8]
   19410:	7bd3      	ldrb	r3, [r2, #15]
   19412:	3b01      	subs	r3, #1
   19414:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   19416:	f381 8811 	msr	BASEPRI, r1
   1941a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1941e:	4770      	bx	lr
   19420:	200027a4 	.word	0x200027a4

00019424 <update_cache>:
{
   19424:	b538      	push	{r3, r4, r5, lr}
   19426:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   19428:	480c      	ldr	r0, [pc, #48]	; (1945c <update_cache+0x38>)
   1942a:	4d0d      	ldr	r5, [pc, #52]	; (19460 <update_cache+0x3c>)
   1942c:	f007 f89b 	bl	20566 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   19430:	4604      	mov	r4, r0
   19432:	b900      	cbnz	r0, 19436 <update_cache+0x12>
   19434:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   19436:	68ab      	ldr	r3, [r5, #8]
   19438:	b94a      	cbnz	r2, 1944e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   1943a:	7b5a      	ldrb	r2, [r3, #13]
   1943c:	06d2      	lsls	r2, r2, #27
   1943e:	d106      	bne.n	1944e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   19440:	69a2      	ldr	r2, [r4, #24]
   19442:	b922      	cbnz	r2, 1944e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   19444:	89da      	ldrh	r2, [r3, #14]
   19446:	2a7f      	cmp	r2, #127	; 0x7f
   19448:	d901      	bls.n	1944e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   1944a:	626b      	str	r3, [r5, #36]	; 0x24
}
   1944c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1944e:	429c      	cmp	r4, r3
   19450:	d001      	beq.n	19456 <update_cache+0x32>
			z_reset_time_slice();
   19452:	f7ff ff79 	bl	19348 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   19456:	626c      	str	r4, [r5, #36]	; 0x24
}
   19458:	e7f8      	b.n	1944c <update_cache+0x28>
   1945a:	bf00      	nop
   1945c:	200027cc 	.word	0x200027cc
   19460:	200027a4 	.word	0x200027a4

00019464 <unready_thread>:
{
   19464:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   19466:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1946a:	7b43      	ldrb	r3, [r0, #13]
   1946c:	2a00      	cmp	r2, #0
{
   1946e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   19470:	da04      	bge.n	1947c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19476:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   19478:	f007 f830 	bl	204dc <sys_dlist_remove>
	update_cache(thread == _current);
   1947c:	4b04      	ldr	r3, [pc, #16]	; (19490 <unready_thread+0x2c>)
   1947e:	6898      	ldr	r0, [r3, #8]
   19480:	1a43      	subs	r3, r0, r1
   19482:	4258      	negs	r0, r3
   19484:	4158      	adcs	r0, r3
}
   19486:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1948a:	f7ff bfcb 	b.w	19424 <update_cache>
   1948e:	bf00      	nop
   19490:	200027a4 	.word	0x200027a4

00019494 <pend>:
{
   19494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19498:	4606      	mov	r6, r0
   1949a:	4614      	mov	r4, r2
   1949c:	461d      	mov	r5, r3
	__asm__ volatile(
   1949e:	f04f 0340 	mov.w	r3, #64	; 0x40
   194a2:	f3ef 8711 	mrs	r7, BASEPRI
   194a6:	f383 8811 	msr	BASEPRI, r3
   194aa:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   194ae:	f007 f864 	bl	2057a <add_to_waitq_locked>
	__asm__ volatile(
   194b2:	f387 8811 	msr	BASEPRI, r7
   194b6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   194ba:	1c6b      	adds	r3, r5, #1
   194bc:	bf08      	it	eq
   194be:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   194c2:	d008      	beq.n	194d6 <pend+0x42>
   194c4:	4622      	mov	r2, r4
   194c6:	462b      	mov	r3, r5
   194c8:	f106 0018 	add.w	r0, r6, #24
   194cc:	4903      	ldr	r1, [pc, #12]	; (194dc <pend+0x48>)
}
   194ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   194d2:	f000 bb21 	b.w	19b18 <z_add_timeout>
   194d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   194da:	bf00      	nop
   194dc:	000205f5 	.word	0x000205f5

000194e0 <z_pend_curr>:
{
   194e0:	b510      	push	{r4, lr}
	pending_current = _current;
   194e2:	4b07      	ldr	r3, [pc, #28]	; (19500 <z_pend_curr+0x20>)
   194e4:	6898      	ldr	r0, [r3, #8]
   194e6:	4b07      	ldr	r3, [pc, #28]	; (19504 <z_pend_curr+0x24>)
{
   194e8:	460c      	mov	r4, r1
	pending_current = _current;
   194ea:	6018      	str	r0, [r3, #0]
{
   194ec:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   194ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   194f2:	f7ff ffcf 	bl	19494 <pend>
   194f6:	4620      	mov	r0, r4
}
   194f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   194fc:	f7f9 bb6a 	b.w	12bd4 <arch_swap>
   19500:	200027a4 	.word	0x200027a4
   19504:	200027dc 	.word	0x200027dc

00019508 <z_impl_k_thread_suspend>:
{
   19508:	b570      	push	{r4, r5, r6, lr}
   1950a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1950c:	3018      	adds	r0, #24
   1950e:	f007 f8d8 	bl	206c2 <z_abort_timeout>
	__asm__ volatile(
   19512:	f04f 0340 	mov.w	r3, #64	; 0x40
   19516:	f3ef 8611 	mrs	r6, BASEPRI
   1951a:	f383 8811 	msr	BASEPRI, r3
   1951e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   19522:	f994 200d 	ldrsb.w	r2, [r4, #13]
   19526:	7b63      	ldrb	r3, [r4, #13]
   19528:	2a00      	cmp	r2, #0
   1952a:	da05      	bge.n	19538 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1952c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19530:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   19532:	4620      	mov	r0, r4
   19534:	f006 ffd2 	bl	204dc <sys_dlist_remove>
		update_cache(thread == _current);
   19538:	4d0b      	ldr	r5, [pc, #44]	; (19568 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1953a:	7b63      	ldrb	r3, [r4, #13]
   1953c:	68a8      	ldr	r0, [r5, #8]
   1953e:	f043 0310 	orr.w	r3, r3, #16
   19542:	7363      	strb	r3, [r4, #13]
   19544:	1b03      	subs	r3, r0, r4
   19546:	4258      	negs	r0, r3
   19548:	4158      	adcs	r0, r3
   1954a:	f7ff ff6b 	bl	19424 <update_cache>
	__asm__ volatile(
   1954e:	f386 8811 	msr	BASEPRI, r6
   19552:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   19556:	68ab      	ldr	r3, [r5, #8]
   19558:	42a3      	cmp	r3, r4
   1955a:	d103      	bne.n	19564 <z_impl_k_thread_suspend+0x5c>
}
   1955c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   19560:	f006 bff7 	b.w	20552 <z_reschedule_unlocked>
}
   19564:	bd70      	pop	{r4, r5, r6, pc}
   19566:	bf00      	nop
   19568:	200027a4 	.word	0x200027a4

0001956c <k_sched_unlock>:
{
   1956c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1956e:	f04f 0340 	mov.w	r3, #64	; 0x40
   19572:	f3ef 8411 	mrs	r4, BASEPRI
   19576:	f383 8811 	msr	BASEPRI, r3
   1957a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1957e:	4b08      	ldr	r3, [pc, #32]	; (195a0 <k_sched_unlock+0x34>)
   19580:	689a      	ldr	r2, [r3, #8]
   19582:	7bd3      	ldrb	r3, [r2, #15]
   19584:	3301      	adds	r3, #1
   19586:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   19588:	2000      	movs	r0, #0
   1958a:	f7ff ff4b 	bl	19424 <update_cache>
	__asm__ volatile(
   1958e:	f384 8811 	msr	BASEPRI, r4
   19592:	f3bf 8f6f 	isb	sy
}
   19596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1959a:	f006 bfda 	b.w	20552 <z_reschedule_unlocked>
   1959e:	bf00      	nop
   195a0:	200027a4 	.word	0x200027a4

000195a4 <move_thread_to_end_of_prio_q>:
{
   195a4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   195a6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   195aa:	7b43      	ldrb	r3, [r0, #13]
   195ac:	2a00      	cmp	r2, #0
{
   195ae:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   195b0:	da04      	bge.n	195bc <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   195b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   195b6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   195b8:	f006 ff90 	bl	204dc <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   195bc:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   195be:	4a17      	ldr	r2, [pc, #92]	; (1961c <move_thread_to_end_of_prio_q+0x78>)
   195c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   195c4:	4610      	mov	r0, r2
   195c6:	734b      	strb	r3, [r1, #13]
   195c8:	f850 3f28 	ldr.w	r3, [r0, #40]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   195cc:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   195ce:	4283      	cmp	r3, r0
   195d0:	bf08      	it	eq
   195d2:	2300      	moveq	r3, #0
   195d4:	2b00      	cmp	r3, #0
   195d6:	bf38      	it	cc
   195d8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   195da:	b1cb      	cbz	r3, 19610 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
   195dc:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   195e0:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   195e4:	42a6      	cmp	r6, r4
   195e6:	d00f      	beq.n	19608 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
   195e8:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   195ea:	2c00      	cmp	r4, #0
   195ec:	dd0c      	ble.n	19608 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   195ee:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   195f0:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   195f4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   195f6:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   195f8:	6890      	ldr	r0, [r2, #8]
   195fa:	1a43      	subs	r3, r0, r1
   195fc:	4258      	negs	r0, r3
}
   195fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   19602:	4158      	adcs	r0, r3
   19604:	f7ff bf0e 	b.w	19424 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   19608:	42ab      	cmp	r3, r5
   1960a:	d001      	beq.n	19610 <move_thread_to_end_of_prio_q+0x6c>
   1960c:	681b      	ldr	r3, [r3, #0]
   1960e:	e7e4      	b.n	195da <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
   19610:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
   19614:	6029      	str	r1, [r5, #0]
	list->tail = node;
   19616:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   19618:	e7ee      	b.n	195f8 <move_thread_to_end_of_prio_q+0x54>
   1961a:	bf00      	nop
   1961c:	200027a4 	.word	0x200027a4

00019620 <z_time_slice>:
{
   19620:	b570      	push	{r4, r5, r6, lr}
   19622:	4601      	mov	r1, r0
	__asm__ volatile(
   19624:	f04f 0340 	mov.w	r3, #64	; 0x40
   19628:	f3ef 8411 	mrs	r4, BASEPRI
   1962c:	f383 8811 	msr	BASEPRI, r3
   19630:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   19634:	4b16      	ldr	r3, [pc, #88]	; (19690 <z_time_slice+0x70>)
   19636:	4a17      	ldr	r2, [pc, #92]	; (19694 <z_time_slice+0x74>)
   19638:	6898      	ldr	r0, [r3, #8]
   1963a:	6815      	ldr	r5, [r2, #0]
   1963c:	42a8      	cmp	r0, r5
   1963e:	461d      	mov	r5, r3
   19640:	d106      	bne.n	19650 <z_time_slice+0x30>
			z_reset_time_slice();
   19642:	f7ff fe81 	bl	19348 <z_reset_time_slice>
	__asm__ volatile(
   19646:	f384 8811 	msr	BASEPRI, r4
   1964a:	f3bf 8f6f 	isb	sy
}
   1964e:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   19650:	2600      	movs	r6, #0
   19652:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   19654:	4a10      	ldr	r2, [pc, #64]	; (19698 <z_time_slice+0x78>)
   19656:	6812      	ldr	r2, [r2, #0]
   19658:	b1ba      	cbz	r2, 1968a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1965a:	89c2      	ldrh	r2, [r0, #14]
   1965c:	2a7f      	cmp	r2, #127	; 0x7f
   1965e:	d814      	bhi.n	1968a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   19660:	7b42      	ldrb	r2, [r0, #13]
   19662:	06d2      	lsls	r2, r2, #27
   19664:	d111      	bne.n	1968a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   19666:	4a0d      	ldr	r2, [pc, #52]	; (1969c <z_time_slice+0x7c>)
   19668:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1966c:	6812      	ldr	r2, [r2, #0]
   1966e:	4296      	cmp	r6, r2
   19670:	db0b      	blt.n	1968a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   19672:	4a0b      	ldr	r2, [pc, #44]	; (196a0 <z_time_slice+0x80>)
   19674:	4290      	cmp	r0, r2
   19676:	d008      	beq.n	1968a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   19678:	691a      	ldr	r2, [r3, #16]
   1967a:	428a      	cmp	r2, r1
   1967c:	dc02      	bgt.n	19684 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1967e:	f7ff ff91 	bl	195a4 <move_thread_to_end_of_prio_q>
   19682:	e7de      	b.n	19642 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   19684:	1a52      	subs	r2, r2, r1
   19686:	611a      	str	r2, [r3, #16]
   19688:	e7dd      	b.n	19646 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1968a:	2300      	movs	r3, #0
   1968c:	612b      	str	r3, [r5, #16]
   1968e:	e7da      	b.n	19646 <z_time_slice+0x26>
   19690:	200027a4 	.word	0x200027a4
   19694:	200027dc 	.word	0x200027dc
   19698:	200027e4 	.word	0x200027e4
   1969c:	200027e0 	.word	0x200027e0
   196a0:	20001b88 	.word	0x20001b88

000196a4 <ready_thread>:
{
   196a4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   196a6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   196aa:	7b42      	ldrb	r2, [r0, #13]
   196ac:	2b00      	cmp	r3, #0
   196ae:	db2d      	blt.n	1970c <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   196b0:	06d3      	lsls	r3, r2, #27
   196b2:	d12b      	bne.n	1970c <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
   196b4:	6983      	ldr	r3, [r0, #24]
   196b6:	bb4b      	cbnz	r3, 1970c <ready_thread+0x68>
	return list->head == list;
   196b8:	4915      	ldr	r1, [pc, #84]	; (19710 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
   196ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
   196be:	7342      	strb	r2, [r0, #13]
   196c0:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   196c2:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	return list->head == list;
   196c4:	f852 4f28 	ldr.w	r4, [r2, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   196c8:	4294      	cmp	r4, r2
   196ca:	bf18      	it	ne
   196cc:	4623      	movne	r3, r4
   196ce:	2b00      	cmp	r3, #0
   196d0:	bf38      	it	cc
   196d2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   196d4:	b1ab      	cbz	r3, 19702 <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
   196d6:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   196da:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   196de:	42a6      	cmp	r6, r4
   196e0:	d00b      	beq.n	196fa <ready_thread+0x56>
		return b2 - b1;
   196e2:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   196e4:	2c00      	cmp	r4, #0
   196e6:	dd08      	ble.n	196fa <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
   196e8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   196ea:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   196ee:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   196f0:	6058      	str	r0, [r3, #4]
}
   196f2:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   196f4:	2000      	movs	r0, #0
   196f6:	f7ff be95 	b.w	19424 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   196fa:	42ab      	cmp	r3, r5
   196fc:	d001      	beq.n	19702 <ready_thread+0x5e>
   196fe:	681b      	ldr	r3, [r3, #0]
   19700:	e7e8      	b.n	196d4 <ready_thread+0x30>
	node->prev = tail;
   19702:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
   19706:	6028      	str	r0, [r5, #0]
	list->tail = node;
   19708:	62c8      	str	r0, [r1, #44]	; 0x2c
}
   1970a:	e7f2      	b.n	196f2 <ready_thread+0x4e>
}
   1970c:	bc70      	pop	{r4, r5, r6}
   1970e:	4770      	bx	lr
   19710:	200027a4 	.word	0x200027a4

00019714 <z_sched_start>:
{
   19714:	b510      	push	{r4, lr}
	__asm__ volatile(
   19716:	f04f 0240 	mov.w	r2, #64	; 0x40
   1971a:	f3ef 8411 	mrs	r4, BASEPRI
   1971e:	f382 8811 	msr	BASEPRI, r2
   19722:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   19726:	7b42      	ldrb	r2, [r0, #13]
   19728:	0751      	lsls	r1, r2, #29
   1972a:	d404      	bmi.n	19736 <z_sched_start+0x22>
	__asm__ volatile(
   1972c:	f384 8811 	msr	BASEPRI, r4
   19730:	f3bf 8f6f 	isb	sy
}
   19734:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   19736:	f022 0204 	bic.w	r2, r2, #4
   1973a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1973c:	f7ff ffb2 	bl	196a4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   19740:	4621      	mov	r1, r4
   19742:	4802      	ldr	r0, [pc, #8]	; (1974c <z_sched_start+0x38>)
}
   19744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   19748:	f7ff be46 	b.w	193d8 <z_reschedule>
   1974c:	200041a4 	.word	0x200041a4

00019750 <z_set_prio>:
{
   19750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19752:	4604      	mov	r4, r0
	__asm__ volatile(
   19754:	f04f 0340 	mov.w	r3, #64	; 0x40
   19758:	f3ef 8611 	mrs	r6, BASEPRI
   1975c:	f383 8811 	msr	BASEPRI, r3
   19760:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   19764:	7b43      	ldrb	r3, [r0, #13]
   19766:	06da      	lsls	r2, r3, #27
   19768:	b249      	sxtb	r1, r1
   1976a:	d138      	bne.n	197de <z_set_prio+0x8e>
   1976c:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1976e:	2d00      	cmp	r5, #0
   19770:	d135      	bne.n	197de <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19776:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   19778:	f006 feb0 	bl	204dc <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1977c:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   1977e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   19780:	f063 037f 	orn	r3, r3, #127	; 0x7f
   19784:	7343      	strb	r3, [r0, #13]
	return list->head == list;
   19786:	4817      	ldr	r0, [pc, #92]	; (197e4 <z_set_prio+0x94>)
   19788:	4603      	mov	r3, r0
   1978a:	f853 7f28 	ldr.w	r7, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1978e:	429f      	cmp	r7, r3
   19790:	bf18      	it	ne
   19792:	463d      	movne	r5, r7
   19794:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19796:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   19798:	461a      	mov	r2, r3
   1979a:	462b      	mov	r3, r5
   1979c:	bf38      	it	cc
   1979e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   197a0:	b1c3      	cbz	r3, 197d4 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
   197a2:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   197a6:	42a9      	cmp	r1, r5
   197a8:	d010      	beq.n	197cc <z_set_prio+0x7c>
		return b2 - b1;
   197aa:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   197ac:	2d00      	cmp	r5, #0
   197ae:	dd0d      	ble.n	197cc <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
   197b0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   197b2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   197b6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   197b8:	605c      	str	r4, [r3, #4]
			update_cache(1);
   197ba:	2001      	movs	r0, #1
   197bc:	f7ff fe32 	bl	19424 <update_cache>
   197c0:	2001      	movs	r0, #1
	__asm__ volatile(
   197c2:	f386 8811 	msr	BASEPRI, r6
   197c6:	f3bf 8f6f 	isb	sy
}
   197ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   197cc:	42bb      	cmp	r3, r7
   197ce:	d001      	beq.n	197d4 <z_set_prio+0x84>
   197d0:	681b      	ldr	r3, [r3, #0]
   197d2:	e7e5      	b.n	197a0 <z_set_prio+0x50>
	node->prev = tail;
   197d4:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
   197d8:	603c      	str	r4, [r7, #0]
	list->tail = node;
   197da:	62c4      	str	r4, [r0, #44]	; 0x2c
}
   197dc:	e7ed      	b.n	197ba <z_set_prio+0x6a>
			thread->base.prio = prio;
   197de:	73a1      	strb	r1, [r4, #14]
   197e0:	2000      	movs	r0, #0
   197e2:	e7ee      	b.n	197c2 <z_set_prio+0x72>
   197e4:	200027a4 	.word	0x200027a4

000197e8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   197e8:	4b04      	ldr	r3, [pc, #16]	; (197fc <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   197ea:	2100      	movs	r1, #0
   197ec:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   197f0:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   197f4:	4608      	mov	r0, r1
   197f6:	f7ff bdbd 	b.w	19374 <k_sched_time_slice_set>
   197fa:	bf00      	nop
   197fc:	200027a4 	.word	0x200027a4

00019800 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   19800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   19802:	f04f 0340 	mov.w	r3, #64	; 0x40
   19806:	f3ef 8411 	mrs	r4, BASEPRI
   1980a:	f383 8811 	msr	BASEPRI, r3
   1980e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
   19812:	491b      	ldr	r1, [pc, #108]	; (19880 <z_impl_k_yield+0x80>)
   19814:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19816:	7b43      	ldrb	r3, [r0, #13]
   19818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1981c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1981e:	f006 fe5d 	bl	204dc <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
   19822:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   19824:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
   19826:	4608      	mov	r0, r1
   19828:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1982c:	7353      	strb	r3, [r2, #13]
   1982e:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19832:	6ace      	ldr	r6, [r1, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19834:	4283      	cmp	r3, r0
   19836:	bf08      	it	eq
   19838:	2300      	moveq	r3, #0
   1983a:	2b00      	cmp	r3, #0
   1983c:	bf38      	it	cc
   1983e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19840:	b1cb      	cbz	r3, 19876 <z_impl_k_yield+0x76>
	int32_t b1 = thread_1->base.prio;
   19842:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
   19846:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1984a:	42af      	cmp	r7, r5
   1984c:	d00f      	beq.n	1986e <z_impl_k_yield+0x6e>
		return b2 - b1;
   1984e:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   19850:	2d00      	cmp	r5, #0
   19852:	dd0c      	ble.n	1986e <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
   19854:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   19856:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
   1985a:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1985c:	605a      	str	r2, [r3, #4]
	update_cache(1);
   1985e:	2001      	movs	r0, #1
   19860:	f7ff fde0 	bl	19424 <update_cache>
   19864:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
   19866:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1986a:	f7f9 b9b3 	b.w	12bd4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1986e:	42b3      	cmp	r3, r6
   19870:	d001      	beq.n	19876 <z_impl_k_yield+0x76>
   19872:	681b      	ldr	r3, [r3, #0]
   19874:	e7e4      	b.n	19840 <z_impl_k_yield+0x40>
	node->prev = tail;
   19876:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
   1987a:	6032      	str	r2, [r6, #0]
	list->tail = node;
   1987c:	62ca      	str	r2, [r1, #44]	; 0x2c
}
   1987e:	e7ee      	b.n	1985e <z_impl_k_yield+0x5e>
   19880:	200027a4 	.word	0x200027a4

00019884 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   19884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19888:	4604      	mov	r4, r0
   1988a:	460d      	mov	r5, r1
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1988c:	ea54 0105 	orrs.w	r1, r4, r5
   19890:	d104      	bne.n	1989c <z_tick_sleep+0x18>
	z_impl_k_yield();
   19892:	f7ff ffb5 	bl	19800 <z_impl_k_yield>
		k_yield();
		return 0;
   19896:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   19898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   1989c:	f06f 0101 	mvn.w	r1, #1
   198a0:	1a0a      	subs	r2, r1, r0
   198a2:	f04f 31ff 	mov.w	r1, #4294967295
   198a6:	eb61 0305 	sbc.w	r3, r1, r5
   198aa:	2a01      	cmp	r2, #1
   198ac:	f173 0300 	sbcs.w	r3, r3, #0
   198b0:	da2a      	bge.n	19908 <z_tick_sleep+0x84>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   198b2:	f006 ff46 	bl	20742 <sys_clock_tick_get_32>
   198b6:	1906      	adds	r6, r0, r4
   198b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   198bc:	f3ef 8811 	mrs	r8, BASEPRI
   198c0:	f383 8811 	msr	BASEPRI, r3
   198c4:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   198c8:	4f11      	ldr	r7, [pc, #68]	; (19910 <z_tick_sleep+0x8c>)
   198ca:	4b12      	ldr	r3, [pc, #72]	; (19914 <z_tick_sleep+0x90>)
   198cc:	68b8      	ldr	r0, [r7, #8]
   198ce:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   198d0:	f7ff fdc8 	bl	19464 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   198d4:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   198d6:	4910      	ldr	r1, [pc, #64]	; (19918 <z_tick_sleep+0x94>)
   198d8:	4622      	mov	r2, r4
   198da:	462b      	mov	r3, r5
   198dc:	3018      	adds	r0, #24
   198de:	f000 f91b 	bl	19b18 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   198e2:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   198e4:	7b53      	ldrb	r3, [r2, #13]
   198e6:	f043 0310 	orr.w	r3, r3, #16
   198ea:	7353      	strb	r3, [r2, #13]
   198ec:	4640      	mov	r0, r8
   198ee:	f7f9 f971 	bl	12bd4 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   198f2:	f006 ff26 	bl	20742 <sys_clock_tick_get_32>
   198f6:	1a30      	subs	r0, r6, r0
   198f8:	eb66 0106 	sbc.w	r1, r6, r6
	if (ticks > 0) {
   198fc:	2801      	cmp	r0, #1
   198fe:	f171 0300 	sbcs.w	r3, r1, #0
		return ticks;
   19902:	bfb8      	it	lt
   19904:	2000      	movlt	r0, #0
   19906:	e7c7      	b.n	19898 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   19908:	f06f 0601 	mvn.w	r6, #1
   1990c:	1a36      	subs	r6, r6, r0
   1990e:	e7d3      	b.n	198b8 <z_tick_sleep+0x34>
   19910:	200027a4 	.word	0x200027a4
   19914:	200027dc 	.word	0x200027dc
   19918:	000205f5 	.word	0x000205f5

0001991c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1991c:	b508      	push	{r3, lr}
   1991e:	460b      	mov	r3, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19920:	3301      	adds	r3, #1
   19922:	bf08      	it	eq
   19924:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   19928:	d106      	bne.n	19938 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1992a:	4b08      	ldr	r3, [pc, #32]	; (1994c <z_impl_k_sleep+0x30>)
   1992c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1992e:	f7ff fdeb 	bl	19508 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   19932:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   19936:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   19938:	f7ff ffa4 	bl	19884 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   1993c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   19940:	fb80 2303 	smull	r2, r3, r0, r3
   19944:	0bd0      	lsrs	r0, r2, #15
   19946:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1994a:	e7f4      	b.n	19936 <z_impl_k_sleep+0x1a>
   1994c:	200027a4 	.word	0x200027a4

00019950 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   19950:	4b01      	ldr	r3, [pc, #4]	; (19958 <z_impl_k_current_get+0x8>)
   19952:	6898      	ldr	r0, [r3, #8]
   19954:	4770      	bx	lr
   19956:	bf00      	nop
   19958:	200027a4 	.word	0x200027a4

0001995c <z_impl_k_is_preempt_thread>:
   1995c:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   19960:	b93b      	cbnz	r3, 19972 <z_impl_k_is_preempt_thread+0x16>
   19962:	4b05      	ldr	r3, [pc, #20]	; (19978 <z_impl_k_is_preempt_thread+0x1c>)
   19964:	689b      	ldr	r3, [r3, #8]
   19966:	89d8      	ldrh	r0, [r3, #14]
   19968:	287f      	cmp	r0, #127	; 0x7f
   1996a:	bf8c      	ite	hi
   1996c:	2000      	movhi	r0, #0
   1996e:	2001      	movls	r0, #1
   19970:	4770      	bx	lr
   19972:	2000      	movs	r0, #0
}
   19974:	4770      	bx	lr
   19976:	bf00      	nop
   19978:	200027a4 	.word	0x200027a4

0001997c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1997c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19980:	4604      	mov	r4, r0
   19982:	f04f 0340 	mov.w	r3, #64	; 0x40
   19986:	f3ef 8611 	mrs	r6, BASEPRI
   1998a:	f383 8811 	msr	BASEPRI, r3
   1998e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   19992:	7b43      	ldrb	r3, [r0, #13]
   19994:	071a      	lsls	r2, r3, #28
   19996:	d505      	bpl.n	199a4 <z_thread_abort+0x28>
	__asm__ volatile(
   19998:	f386 8811 	msr	BASEPRI, r6
   1999c:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   199a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   199a4:	f023 0220 	bic.w	r2, r3, #32
   199a8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   199ac:	09d2      	lsrs	r2, r2, #7
   199ae:	d120      	bne.n	199f2 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   199b0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   199b2:	68a3      	ldr	r3, [r4, #8]
   199b4:	b113      	cbz	r3, 199bc <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   199b6:	4620      	mov	r0, r4
   199b8:	f006 fd98 	bl	204ec <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   199bc:	f104 0018 	add.w	r0, r4, #24
   199c0:	f006 fe7f 	bl	206c2 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   199c4:	f104 0758 	add.w	r7, r4, #88	; 0x58
   199c8:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   199cc:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   199ce:	42bd      	cmp	r5, r7
   199d0:	d000      	beq.n	199d4 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   199d2:	b9b5      	cbnz	r5, 19a02 <z_thread_abort+0x86>
		update_cache(1);
   199d4:	2001      	movs	r0, #1
   199d6:	f7ff fd25 	bl	19424 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   199da:	4b10      	ldr	r3, [pc, #64]	; (19a1c <z_thread_abort+0xa0>)
   199dc:	689b      	ldr	r3, [r3, #8]
   199de:	42a3      	cmp	r3, r4
   199e0:	d1da      	bne.n	19998 <z_thread_abort+0x1c>
   199e2:	f3ef 8305 	mrs	r3, IPSR
   199e6:	2b00      	cmp	r3, #0
   199e8:	d1d6      	bne.n	19998 <z_thread_abort+0x1c>
   199ea:	4630      	mov	r0, r6
   199ec:	f7f9 f8f2 	bl	12bd4 <arch_swap>
	return ret;
   199f0:	e7d2      	b.n	19998 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   199f2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   199f6:	f043 0308 	orr.w	r3, r3, #8
   199fa:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   199fc:	f006 fd6e 	bl	204dc <sys_dlist_remove>
}
   19a00:	e7d7      	b.n	199b2 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   19a02:	4628      	mov	r0, r5
   19a04:	f006 fd72 	bl	204ec <unpend_thread_no_timeout>
   19a08:	f105 0018 	add.w	r0, r5, #24
   19a0c:	f006 fe59 	bl	206c2 <z_abort_timeout>
   19a10:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   19a14:	4628      	mov	r0, r5
   19a16:	f7ff fe45 	bl	196a4 <ready_thread>
   19a1a:	e7d7      	b.n	199cc <z_thread_abort+0x50>
   19a1c:	200027a4 	.word	0x200027a4

00019a20 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   19a20:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   19a22:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   19a26:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   19a28:	e9cd 6700 	strd	r6, r7, [sp]
   19a2c:	f7ff fd58 	bl	194e0 <z_pend_curr>

	if (data != NULL) {
   19a30:	b11c      	cbz	r4, 19a3a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   19a32:	4b03      	ldr	r3, [pc, #12]	; (19a40 <z_sched_wait+0x20>)
   19a34:	689b      	ldr	r3, [r3, #8]
   19a36:	695b      	ldr	r3, [r3, #20]
   19a38:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   19a3a:	b002      	add	sp, #8
   19a3c:	bdd0      	pop	{r4, r6, r7, pc}
   19a3e:	bf00      	nop
   19a40:	200027a4 	.word	0x200027a4

00019a44 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   19a44:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   19a46:	4806      	ldr	r0, [pc, #24]	; (19a60 <z_data_copy+0x1c>)
   19a48:	4a06      	ldr	r2, [pc, #24]	; (19a64 <z_data_copy+0x20>)
   19a4a:	4907      	ldr	r1, [pc, #28]	; (19a68 <z_data_copy+0x24>)
   19a4c:	1a12      	subs	r2, r2, r0
   19a4e:	f007 f814 	bl	20a7a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   19a52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   19a56:	4a05      	ldr	r2, [pc, #20]	; (19a6c <z_data_copy+0x28>)
   19a58:	4905      	ldr	r1, [pc, #20]	; (19a70 <z_data_copy+0x2c>)
   19a5a:	4806      	ldr	r0, [pc, #24]	; (19a74 <z_data_copy+0x30>)
   19a5c:	f007 b80d 	b.w	20a7a <memcpy>
   19a60:	20000000 	.word	0x20000000
   19a64:	20000a20 	.word	0x20000a20
   19a68:	00022084 	.word	0x00022084
   19a6c:	00000000 	.word	0x00000000
   19a70:	00022084 	.word	0x00022084
   19a74:	20000000 	.word	0x20000000

00019a78 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   19a78:	4b03      	ldr	r3, [pc, #12]	; (19a88 <elapsed+0x10>)
   19a7a:	681b      	ldr	r3, [r3, #0]
   19a7c:	b90b      	cbnz	r3, 19a82 <elapsed+0xa>
   19a7e:	f7f8 bf15 	b.w	128ac <sys_clock_elapsed>
}
   19a82:	2000      	movs	r0, #0
   19a84:	4770      	bx	lr
   19a86:	bf00      	nop
   19a88:	200027e8 	.word	0x200027e8

00019a8c <remove_timeout>:
{
   19a8c:	b530      	push	{r4, r5, lr}
   19a8e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19a90:	b168      	cbz	r0, 19aae <remove_timeout+0x22>
   19a92:	4a0a      	ldr	r2, [pc, #40]	; (19abc <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   19a94:	6852      	ldr	r2, [r2, #4]
   19a96:	4290      	cmp	r0, r2
   19a98:	d009      	beq.n	19aae <remove_timeout+0x22>
	if (next(t) != NULL) {
   19a9a:	b143      	cbz	r3, 19aae <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   19a9c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   19aa0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   19aa4:	1912      	adds	r2, r2, r4
   19aa6:	eb45 0101 	adc.w	r1, r5, r1
   19aaa:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   19aae:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   19ab0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   19ab2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19ab4:	2300      	movs	r3, #0
	node->prev = NULL;
   19ab6:	e9c0 3300 	strd	r3, r3, [r0]
}
   19aba:	bd30      	pop	{r4, r5, pc}
   19abc:	20000670 	.word	0x20000670

00019ac0 <next_timeout>:

static int32_t next_timeout(void)
{
   19ac0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   19ac2:	4b13      	ldr	r3, [pc, #76]	; (19b10 <next_timeout+0x50>)
   19ac4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19ac6:	429c      	cmp	r4, r3
   19ac8:	bf08      	it	eq
   19aca:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   19acc:	f7ff ffd4 	bl	19a78 <elapsed>
   19ad0:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   19ad2:	b1bc      	cbz	r4, 19b04 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   19ad4:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   19ad8:	1b40      	subs	r0, r0, r5
   19ada:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   19ade:	2801      	cmp	r0, #1
   19ae0:	f171 0300 	sbcs.w	r3, r1, #0
   19ae4:	db11      	blt.n	19b0a <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   19ae6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   19aea:	2300      	movs	r3, #0
   19aec:	4282      	cmp	r2, r0
   19aee:	eb73 0401 	sbcs.w	r4, r3, r1
   19af2:	da00      	bge.n	19af6 <next_timeout+0x36>
   19af4:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   19af6:	4b07      	ldr	r3, [pc, #28]	; (19b14 <next_timeout+0x54>)
   19af8:	691b      	ldr	r3, [r3, #16]
   19afa:	b113      	cbz	r3, 19b02 <next_timeout+0x42>
   19afc:	4298      	cmp	r0, r3
   19afe:	bfa8      	it	ge
   19b00:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   19b02:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   19b04:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   19b08:	e7f5      	b.n	19af6 <next_timeout+0x36>
   19b0a:	2000      	movs	r0, #0
   19b0c:	e7f3      	b.n	19af6 <next_timeout+0x36>
   19b0e:	bf00      	nop
   19b10:	20000670 	.word	0x20000670
   19b14:	200027a4 	.word	0x200027a4

00019b18 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19b18:	f1b3 3fff 	cmp.w	r3, #4294967295
   19b1c:	bf08      	it	eq
   19b1e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   19b22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b26:	4604      	mov	r4, r0
   19b28:	4692      	mov	sl, r2
   19b2a:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19b2c:	d073      	beq.n	19c16 <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   19b2e:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   19b30:	f04f 0340 	mov.w	r3, #64	; 0x40
   19b34:	f3ef 8511 	mrs	r5, BASEPRI
   19b38:	f383 8811 	msr	BASEPRI, r3
   19b3c:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   19b40:	f06f 0301 	mvn.w	r3, #1
   19b44:	ebb3 080a 	subs.w	r8, r3, sl
   19b48:	f04f 32ff 	mov.w	r2, #4294967295
   19b4c:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   19b50:	f1b8 0f00 	cmp.w	r8, #0
   19b54:	f179 0100 	sbcs.w	r1, r9, #0
   19b58:	db1c      	blt.n	19b94 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   19b5a:	4830      	ldr	r0, [pc, #192]	; (19c1c <z_add_timeout+0x104>)
   19b5c:	e9d0 1000 	ldrd	r1, r0, [r0]
   19b60:	1a5b      	subs	r3, r3, r1
   19b62:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   19b66:	ebb3 060a 	subs.w	r6, r3, sl
   19b6a:	eb62 070b 	sbc.w	r7, r2, fp
   19b6e:	2e01      	cmp	r6, #1
   19b70:	f177 0300 	sbcs.w	r3, r7, #0
   19b74:	bfbc      	itt	lt
   19b76:	2601      	movlt	r6, #1
   19b78:	2700      	movlt	r7, #0
   19b7a:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
   19b7e:	4a28      	ldr	r2, [pc, #160]	; (19c20 <z_add_timeout+0x108>)
   19b80:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19b84:	4293      	cmp	r3, r2
   19b86:	d11e      	bne.n	19bc6 <z_add_timeout+0xae>
	node->prev = tail;
   19b88:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   19b8c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   19b90:	6054      	str	r4, [r2, #4]
}
   19b92:	e02d      	b.n	19bf0 <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   19b94:	f7ff ff70 	bl	19a78 <elapsed>
   19b98:	f11a 0301 	adds.w	r3, sl, #1
   19b9c:	9300      	str	r3, [sp, #0]
   19b9e:	f14b 0300 	adc.w	r3, fp, #0
   19ba2:	9301      	str	r3, [sp, #4]
   19ba4:	e9dd 2300 	ldrd	r2, r3, [sp]
   19ba8:	1812      	adds	r2, r2, r0
   19baa:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   19bae:	e9c4 2304 	strd	r2, r3, [r4, #16]
   19bb2:	e7e4      	b.n	19b7e <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   19bb4:	ebb6 0008 	subs.w	r0, r6, r8
   19bb8:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
   19bbc:	4563      	cmp	r3, ip
   19bbe:	e9c4 0104 	strd	r0, r1, [r4, #16]
   19bc2:	d0e1      	beq.n	19b88 <z_add_timeout+0x70>
   19bc4:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   19bc6:	2b00      	cmp	r3, #0
   19bc8:	d0de      	beq.n	19b88 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
   19bca:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
   19bce:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   19bd2:	4546      	cmp	r6, r8
   19bd4:	eb77 0109 	sbcs.w	r1, r7, r9
   19bd8:	daec      	bge.n	19bb4 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
   19bda:	ebb8 0006 	subs.w	r0, r8, r6
   19bde:	eb69 0107 	sbc.w	r1, r9, r7
   19be2:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   19be6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   19be8:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   19bec:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   19bee:	605c      	str	r4, [r3, #4]
	return list->head == list;
   19bf0:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19bf2:	4293      	cmp	r3, r2
   19bf4:	d00b      	beq.n	19c0e <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   19bf6:	429c      	cmp	r4, r3
   19bf8:	d109      	bne.n	19c0e <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   19bfa:	f7ff ff61 	bl	19ac0 <next_timeout>

			if (next_time == 0 ||
   19bfe:	b118      	cbz	r0, 19c08 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
   19c00:	4b08      	ldr	r3, [pc, #32]	; (19c24 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
   19c02:	691b      	ldr	r3, [r3, #16]
   19c04:	4283      	cmp	r3, r0
   19c06:	d002      	beq.n	19c0e <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
   19c08:	2100      	movs	r1, #0
   19c0a:	f7f8 fe1d 	bl	12848 <sys_clock_set_timeout>
	__asm__ volatile(
   19c0e:	f385 8811 	msr	BASEPRI, r5
   19c12:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   19c16:	b003      	add	sp, #12
   19c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c1c:	20001d28 	.word	0x20001d28
   19c20:	20000670 	.word	0x20000670
   19c24:	200027a4 	.word	0x200027a4

00019c28 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   19c28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c2c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   19c2e:	f7ff fcf7 	bl	19620 <z_time_slice>
	__asm__ volatile(
   19c32:	f04f 0340 	mov.w	r3, #64	; 0x40
   19c36:	f3ef 8411 	mrs	r4, BASEPRI
   19c3a:	f383 8811 	msr	BASEPRI, r3
   19c3e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   19c42:	4d2c      	ldr	r5, [pc, #176]	; (19cf4 <sys_clock_announce+0xcc>)
   19c44:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 19cf8 <sys_clock_announce+0xd0>
	return list->head == list;
   19c48:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 19cfc <sys_clock_announce+0xd4>
   19c4c:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   19c4e:	4651      	mov	r1, sl
   19c50:	f8d5 c000 	ldr.w	ip, [r5]
   19c54:	f8db 0000 	ldr.w	r0, [fp]
   19c58:	4662      	mov	r2, ip
   19c5a:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19c5c:	4558      	cmp	r0, fp
   19c5e:	e9da 8900 	ldrd	r8, r9, [sl]
   19c62:	e9cd 2300 	strd	r2, r3, [sp]
   19c66:	d00d      	beq.n	19c84 <sys_clock_announce+0x5c>
   19c68:	b160      	cbz	r0, 19c84 <sys_clock_announce+0x5c>
   19c6a:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   19c6e:	45b4      	cmp	ip, r6
   19c70:	41bb      	sbcs	r3, r7
   19c72:	da1e      	bge.n	19cb2 <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   19c74:	9b00      	ldr	r3, [sp, #0]
   19c76:	ebb6 0c03 	subs.w	ip, r6, r3
   19c7a:	9b01      	ldr	r3, [sp, #4]
   19c7c:	eb67 0603 	sbc.w	r6, r7, r3
   19c80:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   19c84:	9b00      	ldr	r3, [sp, #0]
   19c86:	eb13 0208 	adds.w	r2, r3, r8
   19c8a:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   19c8c:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   19c90:	eb43 0309 	adc.w	r3, r3, r9
   19c94:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   19c98:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   19c9a:	f7ff ff11 	bl	19ac0 <next_timeout>
   19c9e:	4631      	mov	r1, r6
   19ca0:	f7f8 fdd2 	bl	12848 <sys_clock_set_timeout>
	__asm__ volatile(
   19ca4:	f384 8811 	msr	BASEPRI, r4
   19ca8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   19cac:	b003      	add	sp, #12
   19cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   19cb2:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   19cb6:	f04f 0200 	mov.w	r2, #0
   19cba:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   19cbe:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   19cc2:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   19cc6:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   19cca:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   19cce:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   19cd0:	f7ff fedc 	bl	19a8c <remove_timeout>
   19cd4:	f384 8811 	msr	BASEPRI, r4
   19cd8:	f3bf 8f6f 	isb	sy
		t->fn(t);
   19cdc:	6883      	ldr	r3, [r0, #8]
   19cde:	4798      	blx	r3
	__asm__ volatile(
   19ce0:	f04f 0340 	mov.w	r3, #64	; 0x40
   19ce4:	f3ef 8411 	mrs	r4, BASEPRI
   19ce8:	f383 8811 	msr	BASEPRI, r3
   19cec:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   19cf0:	4901      	ldr	r1, [pc, #4]	; (19cf8 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   19cf2:	e7ad      	b.n	19c50 <sys_clock_announce+0x28>
   19cf4:	200027e8 	.word	0x200027e8
   19cf8:	20001d28 	.word	0x20001d28
   19cfc:	20000670 	.word	0x20000670

00019d00 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   19d00:	b510      	push	{r4, lr}
   19d02:	f04f 0340 	mov.w	r3, #64	; 0x40
   19d06:	f3ef 8411 	mrs	r4, BASEPRI
   19d0a:	f383 8811 	msr	BASEPRI, r3
   19d0e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   19d12:	f7f8 fdcb 	bl	128ac <sys_clock_elapsed>
   19d16:	4b06      	ldr	r3, [pc, #24]	; (19d30 <sys_clock_tick_get+0x30>)
   19d18:	e9d3 2300 	ldrd	r2, r3, [r3]
   19d1c:	1812      	adds	r2, r2, r0
   19d1e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   19d22:	f384 8811 	msr	BASEPRI, r4
   19d26:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   19d2a:	4610      	mov	r0, r2
   19d2c:	4619      	mov	r1, r3
   19d2e:	bd10      	pop	{r4, pc}
   19d30:	20001d28 	.word	0x20001d28

00019d34 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   19d34:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   19d38:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   19d3a:	4b29      	ldr	r3, [pc, #164]	; (19de0 <z_impl_k_poll+0xac>)
   19d3c:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   19d3e:	2301      	movs	r3, #1
   19d40:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   19d44:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   19d48:	ea52 0307 	orrs.w	r3, r2, r7
{
   19d4c:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   19d4e:	bf0c      	ite	eq
   19d50:	2301      	moveq	r3, #1
   19d52:	2300      	movne	r3, #0
   19d54:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
   19d58:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   19d5a:	f006 fd87 	bl	2086c <register_events>
   19d5e:	4681      	mov	r9, r0
	__asm__ volatile(
   19d60:	f04f 0340 	mov.w	r3, #64	; 0x40
   19d64:	f3ef 8a11 	mrs	sl, BASEPRI
   19d68:	f383 8811 	msr	BASEPRI, r3
   19d6c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   19d70:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
   19d74:	b964      	cbnz	r4, 19d90 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   19d76:	4601      	mov	r1, r0
   19d78:	4652      	mov	r2, sl
   19d7a:	4640      	mov	r0, r8
   19d7c:	f006 fd14 	bl	207a8 <clear_event_registrations>
	__asm__ volatile(
   19d80:	f38a 8811 	msr	BASEPRI, sl
   19d84:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   19d88:	4620      	mov	r0, r4
   19d8a:	b002      	add	sp, #8
   19d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   19d90:	2300      	movs	r3, #0
   19d92:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19d96:	ea56 0307 	orrs.w	r3, r6, r7
   19d9a:	d106      	bne.n	19daa <z_impl_k_poll+0x76>
   19d9c:	f38a 8811 	msr	BASEPRI, sl
   19da0:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   19da4:	f06f 040a 	mvn.w	r4, #10
   19da8:	e7ee      	b.n	19d88 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   19daa:	e9cd 6700 	strd	r6, r7, [sp]
   19dae:	4a0d      	ldr	r2, [pc, #52]	; (19de4 <z_impl_k_poll+0xb0>)
   19db0:	480d      	ldr	r0, [pc, #52]	; (19de8 <z_impl_k_poll+0xb4>)
   19db2:	4651      	mov	r1, sl
   19db4:	f7ff fb94 	bl	194e0 <z_pend_curr>
   19db8:	4604      	mov	r4, r0
	__asm__ volatile(
   19dba:	f04f 0340 	mov.w	r3, #64	; 0x40
   19dbe:	f3ef 8511 	mrs	r5, BASEPRI
   19dc2:	f383 8811 	msr	BASEPRI, r3
   19dc6:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   19dca:	462a      	mov	r2, r5
   19dcc:	4649      	mov	r1, r9
   19dce:	4640      	mov	r0, r8
   19dd0:	f006 fcea 	bl	207a8 <clear_event_registrations>
	__asm__ volatile(
   19dd4:	f385 8811 	msr	BASEPRI, r5
   19dd8:	f3bf 8f6f 	isb	sy
	return swap_rc;
   19ddc:	e7d4      	b.n	19d88 <z_impl_k_poll+0x54>
   19dde:	bf00      	nop
   19de0:	200027a4 	.word	0x200027a4
   19de4:	20000678 	.word	0x20000678
   19de8:	200041a4 	.word	0x200041a4

00019dec <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   19dec:	b538      	push	{r3, r4, r5, lr}
   19dee:	4603      	mov	r3, r0
	__asm__ volatile(
   19df0:	f04f 0240 	mov.w	r2, #64	; 0x40
   19df4:	f3ef 8511 	mrs	r5, BASEPRI
   19df8:	f382 8811 	msr	BASEPRI, r2
   19dfc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   19e00:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   19e02:	2101      	movs	r1, #1
   19e04:	6081      	str	r1, [r0, #8]
	return list->head == list;
   19e06:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   19e08:	4283      	cmp	r3, r0
   19e0a:	d106      	bne.n	19e1a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   19e0c:	f385 8811 	msr	BASEPRI, r5
   19e10:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   19e14:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   19e16:	4620      	mov	r0, r4
   19e18:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   19e1a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   19e1e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   19e20:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19e22:	2300      	movs	r3, #0
	node->prev = NULL;
   19e24:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   19e28:	f006 fd97 	bl	2095a <signal_poll_event>
	z_reschedule(&lock, key);
   19e2c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   19e2e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   19e30:	4801      	ldr	r0, [pc, #4]	; (19e38 <z_impl_k_poll_signal_raise+0x4c>)
   19e32:	f7ff fad1 	bl	193d8 <z_reschedule>
	return rc;
   19e36:	e7ee      	b.n	19e16 <z_impl_k_poll_signal_raise+0x2a>
   19e38:	200041a4 	.word	0x200041a4

00019e3c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   19e3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19e3e:	4606      	mov	r6, r0
   19e40:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   19e42:	f006 f978 	bl	20136 <k_is_in_isr>
   19e46:	b980      	cbnz	r0, 19e6a <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   19e48:	4b0b      	ldr	r3, [pc, #44]	; (19e78 <z_thread_aligned_alloc+0x3c>)
   19e4a:	689b      	ldr	r3, [r3, #8]
   19e4c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   19e4e:	b184      	cbz	r4, 19e72 <z_thread_aligned_alloc+0x36>
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   19e50:	2204      	movs	r2, #4
   19e52:	18aa      	adds	r2, r5, r2
   19e54:	d209      	bcs.n	19e6a <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   19e56:	2000      	movs	r0, #0
   19e58:	2100      	movs	r1, #0
   19e5a:	e9cd 0100 	strd	r0, r1, [sp]
   19e5e:	f046 0104 	orr.w	r1, r6, #4
   19e62:	4620      	mov	r0, r4
   19e64:	f006 f8bf 	bl	1ffe6 <k_heap_aligned_alloc>
	if (mem == NULL) {
   19e68:	b908      	cbnz	r0, 19e6e <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   19e6a:	2400      	movs	r4, #0
	}

	return ret;
   19e6c:	e001      	b.n	19e72 <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
   19e6e:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   19e70:	1d04      	adds	r4, r0, #4
}
   19e72:	4620      	mov	r0, r4
   19e74:	b002      	add	sp, #8
   19e76:	bd70      	pop	{r4, r5, r6, pc}
   19e78:	200027a4 	.word	0x200027a4

00019e7c <nrf_cc3xx_platform_init>:
   19e7c:	b510      	push	{r4, lr}
   19e7e:	4c0c      	ldr	r4, [pc, #48]	; (19eb0 <nrf_cc3xx_platform_init+0x34>)
   19e80:	6823      	ldr	r3, [r4, #0]
   19e82:	b113      	cbz	r3, 19e8a <nrf_cc3xx_platform_init+0xe>
   19e84:	4b0b      	ldr	r3, [pc, #44]	; (19eb4 <nrf_cc3xx_platform_init+0x38>)
   19e86:	681b      	ldr	r3, [r3, #0]
   19e88:	b92b      	cbnz	r3, 19e96 <nrf_cc3xx_platform_init+0x1a>
   19e8a:	f000 fabd 	bl	1a408 <CC_LibInit>
   19e8e:	b930      	cbnz	r0, 19e9e <nrf_cc3xx_platform_init+0x22>
   19e90:	4b08      	ldr	r3, [pc, #32]	; (19eb4 <nrf_cc3xx_platform_init+0x38>)
   19e92:	2201      	movs	r2, #1
   19e94:	601a      	str	r2, [r3, #0]
   19e96:	2301      	movs	r3, #1
   19e98:	6023      	str	r3, [r4, #0]
   19e9a:	2000      	movs	r0, #0
   19e9c:	bd10      	pop	{r4, pc}
   19e9e:	3801      	subs	r0, #1
   19ea0:	2806      	cmp	r0, #6
   19ea2:	d901      	bls.n	19ea8 <nrf_cc3xx_platform_init+0x2c>
   19ea4:	4804      	ldr	r0, [pc, #16]	; (19eb8 <nrf_cc3xx_platform_init+0x3c>)
   19ea6:	bd10      	pop	{r4, pc}
   19ea8:	4b04      	ldr	r3, [pc, #16]	; (19ebc <nrf_cc3xx_platform_init+0x40>)
   19eaa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   19eae:	bd10      	pop	{r4, pc}
   19eb0:	200027ec 	.word	0x200027ec
   19eb4:	200027f0 	.word	0x200027f0
   19eb8:	ffff8ffe 	.word	0xffff8ffe
   19ebc:	000217dc 	.word	0x000217dc

00019ec0 <nrf_cc3xx_platform_abort>:
   19ec0:	f3bf 8f4f 	dsb	sy
   19ec4:	4905      	ldr	r1, [pc, #20]	; (19edc <nrf_cc3xx_platform_abort+0x1c>)
   19ec6:	4b06      	ldr	r3, [pc, #24]	; (19ee0 <nrf_cc3xx_platform_abort+0x20>)
   19ec8:	68ca      	ldr	r2, [r1, #12]
   19eca:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   19ece:	4313      	orrs	r3, r2
   19ed0:	60cb      	str	r3, [r1, #12]
   19ed2:	f3bf 8f4f 	dsb	sy
   19ed6:	bf00      	nop
   19ed8:	e7fd      	b.n	19ed6 <nrf_cc3xx_platform_abort+0x16>
   19eda:	bf00      	nop
   19edc:	e000ed00 	.word	0xe000ed00
   19ee0:	05fa0004 	.word	0x05fa0004

00019ee4 <CC_PalAbort>:
   19ee4:	b4f0      	push	{r4, r5, r6, r7}
   19ee6:	4f09      	ldr	r7, [pc, #36]	; (19f0c <CC_PalAbort+0x28>)
   19ee8:	4e09      	ldr	r6, [pc, #36]	; (19f10 <CC_PalAbort+0x2c>)
   19eea:	4c0a      	ldr	r4, [pc, #40]	; (19f14 <CC_PalAbort+0x30>)
   19eec:	4a0a      	ldr	r2, [pc, #40]	; (19f18 <CC_PalAbort+0x34>)
   19eee:	4d0b      	ldr	r5, [pc, #44]	; (19f1c <CC_PalAbort+0x38>)
   19ef0:	490b      	ldr	r1, [pc, #44]	; (19f20 <CC_PalAbort+0x3c>)
   19ef2:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   19ef6:	603b      	str	r3, [r7, #0]
   19ef8:	6852      	ldr	r2, [r2, #4]
   19efa:	6033      	str	r3, [r6, #0]
   19efc:	6023      	str	r3, [r4, #0]
   19efe:	2400      	movs	r4, #0
   19f00:	602b      	str	r3, [r5, #0]
   19f02:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   19f06:	bcf0      	pop	{r4, r5, r6, r7}
   19f08:	4710      	bx	r2
   19f0a:	bf00      	nop
   19f0c:	5002b400 	.word	0x5002b400
   19f10:	5002b404 	.word	0x5002b404
   19f14:	5002b408 	.word	0x5002b408
   19f18:	20000680 	.word	0x20000680
   19f1c:	5002b40c 	.word	0x5002b40c
   19f20:	5002a000 	.word	0x5002a000

00019f24 <nrf_cc3xx_platform_set_abort>:
   19f24:	e9d0 1200 	ldrd	r1, r2, [r0]
   19f28:	4b01      	ldr	r3, [pc, #4]	; (19f30 <nrf_cc3xx_platform_set_abort+0xc>)
   19f2a:	e9c3 1200 	strd	r1, r2, [r3]
   19f2e:	4770      	bx	lr
   19f30:	20000680 	.word	0x20000680

00019f34 <nrf_cc3xx_platform_ctr_drbg_init>:
   19f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19f38:	4c15      	ldr	r4, [pc, #84]	; (19f90 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   19f3a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 19f98 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   19f3e:	2800      	cmp	r0, #0
   19f40:	bf18      	it	ne
   19f42:	4604      	movne	r4, r0
   19f44:	b083      	sub	sp, #12
   19f46:	6820      	ldr	r0, [r4, #0]
   19f48:	4540      	cmp	r0, r8
   19f4a:	d01d      	beq.n	19f88 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   19f4c:	460d      	mov	r5, r1
   19f4e:	4620      	mov	r0, r4
   19f50:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   19f54:	f104 0904 	add.w	r9, r4, #4
   19f58:	4616      	mov	r6, r2
   19f5a:	f504 778c 	add.w	r7, r4, #280	; 0x118
   19f5e:	f000 fe9f 	bl	1aca0 <mbedtls_platform_zeroize>
   19f62:	4648      	mov	r0, r9
   19f64:	f000 f940 	bl	1a1e8 <cc_mbedtls_entropy_init>
   19f68:	4638      	mov	r0, r7
   19f6a:	f001 fa75 	bl	1b458 <cc_mbedtls_ctr_drbg_init>
   19f6e:	4909      	ldr	r1, [pc, #36]	; (19f94 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   19f70:	9600      	str	r6, [sp, #0]
   19f72:	464a      	mov	r2, r9
   19f74:	4638      	mov	r0, r7
   19f76:	462b      	mov	r3, r5
   19f78:	f001 fa80 	bl	1b47c <cc_mbedtls_ctr_drbg_seed>
   19f7c:	b908      	cbnz	r0, 19f82 <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   19f7e:	f8c4 8000 	str.w	r8, [r4]
   19f82:	b003      	add	sp, #12
   19f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19f88:	2000      	movs	r0, #0
   19f8a:	b003      	add	sp, #12
   19f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19f90:	200041a4 	.word	0x200041a4
   19f94:	0001a265 	.word	0x0001a265
   19f98:	5ac9bca5 	.word	0x5ac9bca5

00019f9c <nrf_cc3xx_platform_ctr_drbg_get>:
   19f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19f9e:	4c0d      	ldr	r4, [pc, #52]	; (19fd4 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   19fa0:	4e0d      	ldr	r6, [pc, #52]	; (19fd8 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   19fa2:	2800      	cmp	r0, #0
   19fa4:	bf08      	it	eq
   19fa6:	4620      	moveq	r0, r4
   19fa8:	b083      	sub	sp, #12
   19faa:	6807      	ldr	r7, [r0, #0]
   19fac:	42b7      	cmp	r7, r6
   19fae:	d10e      	bne.n	19fce <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   19fb0:	2600      	movs	r6, #0
   19fb2:	461d      	mov	r5, r3
   19fb4:	f500 708c 	add.w	r0, r0, #280	; 0x118
   19fb8:	9600      	str	r6, [sp, #0]
   19fba:	4633      	mov	r3, r6
   19fbc:	4614      	mov	r4, r2
   19fbe:	f001 faad 	bl	1b51c <cc_mbedtls_ctr_drbg_random_with_add>
   19fc2:	2800      	cmp	r0, #0
   19fc4:	bf18      	it	ne
   19fc6:	4634      	movne	r4, r6
   19fc8:	602c      	str	r4, [r5, #0]
   19fca:	b003      	add	sp, #12
   19fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19fce:	4803      	ldr	r0, [pc, #12]	; (19fdc <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   19fd0:	e7fb      	b.n	19fca <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   19fd2:	bf00      	nop
   19fd4:	200041a4 	.word	0x200041a4
   19fd8:	5ac9bca5 	.word	0x5ac9bca5
   19fdc:	ffff8fe8 	.word	0xffff8fe8

00019fe0 <mutex_free>:
   19fe0:	b510      	push	{r4, lr}
   19fe2:	4604      	mov	r4, r0
   19fe4:	b130      	cbz	r0, 19ff4 <mutex_free+0x14>
   19fe6:	6863      	ldr	r3, [r4, #4]
   19fe8:	06db      	lsls	r3, r3, #27
   19fea:	d502      	bpl.n	19ff2 <mutex_free+0x12>
   19fec:	2300      	movs	r3, #0
   19fee:	6023      	str	r3, [r4, #0]
   19ff0:	6063      	str	r3, [r4, #4]
   19ff2:	bd10      	pop	{r4, pc}
   19ff4:	4b02      	ldr	r3, [pc, #8]	; (1a000 <mutex_free+0x20>)
   19ff6:	4803      	ldr	r0, [pc, #12]	; (1a004 <mutex_free+0x24>)
   19ff8:	685b      	ldr	r3, [r3, #4]
   19ffa:	4798      	blx	r3
   19ffc:	e7f3      	b.n	19fe6 <mutex_free+0x6>
   19ffe:	bf00      	nop
   1a000:	20000680 	.word	0x20000680
   1a004:	000217f8 	.word	0x000217f8

0001a008 <mutex_unlock>:
   1a008:	b168      	cbz	r0, 1a026 <mutex_unlock+0x1e>
   1a00a:	6843      	ldr	r3, [r0, #4]
   1a00c:	b13b      	cbz	r3, 1a01e <mutex_unlock+0x16>
   1a00e:	06db      	lsls	r3, r3, #27
   1a010:	d507      	bpl.n	1a022 <mutex_unlock+0x1a>
   1a012:	f3bf 8f5f 	dmb	sy
   1a016:	2300      	movs	r3, #0
   1a018:	6003      	str	r3, [r0, #0]
   1a01a:	4618      	mov	r0, r3
   1a01c:	4770      	bx	lr
   1a01e:	4803      	ldr	r0, [pc, #12]	; (1a02c <mutex_unlock+0x24>)
   1a020:	4770      	bx	lr
   1a022:	4803      	ldr	r0, [pc, #12]	; (1a030 <mutex_unlock+0x28>)
   1a024:	4770      	bx	lr
   1a026:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1a02a:	4770      	bx	lr
   1a02c:	ffff8fea 	.word	0xffff8fea
   1a030:	ffff8fe9 	.word	0xffff8fe9

0001a034 <mutex_init>:
   1a034:	b510      	push	{r4, lr}
   1a036:	4604      	mov	r4, r0
   1a038:	b120      	cbz	r0, 1a044 <mutex_init+0x10>
   1a03a:	2200      	movs	r2, #0
   1a03c:	2311      	movs	r3, #17
   1a03e:	6022      	str	r2, [r4, #0]
   1a040:	6063      	str	r3, [r4, #4]
   1a042:	bd10      	pop	{r4, pc}
   1a044:	4801      	ldr	r0, [pc, #4]	; (1a04c <mutex_init+0x18>)
   1a046:	f7ff ff4d 	bl	19ee4 <CC_PalAbort>
   1a04a:	e7f6      	b.n	1a03a <mutex_init+0x6>
   1a04c:	00021820 	.word	0x00021820

0001a050 <mutex_lock>:
   1a050:	b1c0      	cbz	r0, 1a084 <mutex_lock+0x34>
   1a052:	6843      	ldr	r3, [r0, #4]
   1a054:	b1a3      	cbz	r3, 1a080 <mutex_lock+0x30>
   1a056:	06db      	lsls	r3, r3, #27
   1a058:	d510      	bpl.n	1a07c <mutex_lock+0x2c>
   1a05a:	2201      	movs	r2, #1
   1a05c:	f3bf 8f5b 	dmb	ish
   1a060:	e850 3f00 	ldrex	r3, [r0]
   1a064:	e840 2100 	strex	r1, r2, [r0]
   1a068:	2900      	cmp	r1, #0
   1a06a:	d1f9      	bne.n	1a060 <mutex_lock+0x10>
   1a06c:	f3bf 8f5b 	dmb	ish
   1a070:	2b01      	cmp	r3, #1
   1a072:	d0f3      	beq.n	1a05c <mutex_lock+0xc>
   1a074:	f3bf 8f5f 	dmb	sy
   1a078:	2000      	movs	r0, #0
   1a07a:	4770      	bx	lr
   1a07c:	4803      	ldr	r0, [pc, #12]	; (1a08c <mutex_lock+0x3c>)
   1a07e:	4770      	bx	lr
   1a080:	4803      	ldr	r0, [pc, #12]	; (1a090 <mutex_lock+0x40>)
   1a082:	4770      	bx	lr
   1a084:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1a088:	4770      	bx	lr
   1a08a:	bf00      	nop
   1a08c:	ffff8fe9 	.word	0xffff8fe9
   1a090:	ffff8fea 	.word	0xffff8fea

0001a094 <nrf_cc3xx_platform_set_mutexes>:
   1a094:	b570      	push	{r4, r5, r6, lr}
   1a096:	e9d0 2300 	ldrd	r2, r3, [r0]
   1a09a:	4c13      	ldr	r4, [pc, #76]	; (1a0e8 <nrf_cc3xx_platform_set_mutexes+0x54>)
   1a09c:	4d13      	ldr	r5, [pc, #76]	; (1a0ec <nrf_cc3xx_platform_set_mutexes+0x58>)
   1a09e:	e9c4 2300 	strd	r2, r3, [r4]
   1a0a2:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   1a0a6:	e9c4 6302 	strd	r6, r3, [r4, #8]
   1a0aa:	4b11      	ldr	r3, [pc, #68]	; (1a0f0 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   1a0ac:	6808      	ldr	r0, [r1, #0]
   1a0ae:	6018      	str	r0, [r3, #0]
   1a0b0:	6848      	ldr	r0, [r1, #4]
   1a0b2:	6058      	str	r0, [r3, #4]
   1a0b4:	6888      	ldr	r0, [r1, #8]
   1a0b6:	6098      	str	r0, [r3, #8]
   1a0b8:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   1a0bc:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   1a0c0:	60de      	str	r6, [r3, #12]
   1a0c2:	6118      	str	r0, [r3, #16]
   1a0c4:	06cb      	lsls	r3, r1, #27
   1a0c6:	d50d      	bpl.n	1a0e4 <nrf_cc3xx_platform_set_mutexes+0x50>
   1a0c8:	2300      	movs	r3, #0
   1a0ca:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   1a0ce:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   1a0d2:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1a0d6:	4790      	blx	r2
   1a0d8:	6823      	ldr	r3, [r4, #0]
   1a0da:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   1a0de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a0e2:	4718      	bx	r3
   1a0e4:	bd70      	pop	{r4, r5, r6, pc}
   1a0e6:	bf00      	nop
   1a0e8:	20000690 	.word	0x20000690
   1a0ec:	200041a4 	.word	0x200041a4
   1a0f0:	200006a0 	.word	0x200006a0

0001a0f4 <entropy_update>:
   1a0f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a0f8:	2b20      	cmp	r3, #32
   1a0fa:	b08b      	sub	sp, #44	; 0x2c
   1a0fc:	461d      	mov	r5, r3
   1a0fe:	4606      	mov	r6, r0
   1a100:	4689      	mov	r9, r1
   1a102:	4690      	mov	r8, r2
   1a104:	d826      	bhi.n	1a154 <entropy_update+0x60>
   1a106:	b2db      	uxtb	r3, r3
   1a108:	af02      	add	r7, sp, #8
   1a10a:	6831      	ldr	r1, [r6, #0]
   1a10c:	f88d 9004 	strb.w	r9, [sp, #4]
   1a110:	f88d 3005 	strb.w	r3, [sp, #5]
   1a114:	f106 0904 	add.w	r9, r6, #4
   1a118:	b921      	cbnz	r1, 1a124 <entropy_update+0x30>
   1a11a:	4648      	mov	r0, r9
   1a11c:	f000 fe62 	bl	1ade4 <cc_mbedtls_sha256_starts_ret>
   1a120:	4604      	mov	r4, r0
   1a122:	b940      	cbnz	r0, 1a136 <entropy_update+0x42>
   1a124:	2301      	movs	r3, #1
   1a126:	6033      	str	r3, [r6, #0]
   1a128:	2202      	movs	r2, #2
   1a12a:	a901      	add	r1, sp, #4
   1a12c:	4648      	mov	r0, r9
   1a12e:	f000 fe6d 	bl	1ae0c <cc_mbedtls_sha256_update_ret>
   1a132:	4604      	mov	r4, r0
   1a134:	b138      	cbz	r0, 1a146 <entropy_update+0x52>
   1a136:	4638      	mov	r0, r7
   1a138:	2120      	movs	r1, #32
   1a13a:	f000 fdb1 	bl	1aca0 <mbedtls_platform_zeroize>
   1a13e:	4620      	mov	r0, r4
   1a140:	b00b      	add	sp, #44	; 0x2c
   1a142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a146:	462a      	mov	r2, r5
   1a148:	4641      	mov	r1, r8
   1a14a:	4648      	mov	r0, r9
   1a14c:	f000 fe5e 	bl	1ae0c <cc_mbedtls_sha256_update_ret>
   1a150:	4604      	mov	r4, r0
   1a152:	e7f0      	b.n	1a136 <entropy_update+0x42>
   1a154:	af02      	add	r7, sp, #8
   1a156:	4619      	mov	r1, r3
   1a158:	4610      	mov	r0, r2
   1a15a:	2300      	movs	r3, #0
   1a15c:	463a      	mov	r2, r7
   1a15e:	f001 fad1 	bl	1b704 <cc_mbedtls_sha256_ret>
   1a162:	4604      	mov	r4, r0
   1a164:	2800      	cmp	r0, #0
   1a166:	d1e6      	bne.n	1a136 <entropy_update+0x42>
   1a168:	2320      	movs	r3, #32
   1a16a:	461d      	mov	r5, r3
   1a16c:	46b8      	mov	r8, r7
   1a16e:	e7cc      	b.n	1a10a <entropy_update+0x16>

0001a170 <entropy_gather_internal.part.0>:
   1a170:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a172:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1a176:	b0a7      	sub	sp, #156	; 0x9c
   1a178:	2b00      	cmp	r3, #0
   1a17a:	bfd8      	it	le
   1a17c:	ae02      	addle	r6, sp, #8
   1a17e:	dd2c      	ble.n	1a1da <entropy_gather_internal.part.0+0x6a>
   1a180:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   1a184:	4605      	mov	r5, r0
   1a186:	2300      	movs	r3, #0
   1a188:	ae02      	add	r6, sp, #8
   1a18a:	9301      	str	r3, [sp, #4]
   1a18c:	f1a4 0701 	sub.w	r7, r4, #1
   1a190:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   1a194:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   1a198:	4631      	mov	r1, r6
   1a19a:	ab01      	add	r3, sp, #4
   1a19c:	2290      	movs	r2, #144	; 0x90
   1a19e:	47a0      	blx	r4
   1a1a0:	fab7 f787 	clz	r7, r7
   1a1a4:	097f      	lsrs	r7, r7, #5
   1a1a6:	4604      	mov	r4, r0
   1a1a8:	b910      	cbnz	r0, 1a1b0 <entropy_gather_internal.part.0+0x40>
   1a1aa:	9b01      	ldr	r3, [sp, #4]
   1a1ac:	b93b      	cbnz	r3, 1a1be <entropy_gather_internal.part.0+0x4e>
   1a1ae:	b1a7      	cbz	r7, 1a1da <entropy_gather_internal.part.0+0x6a>
   1a1b0:	4630      	mov	r0, r6
   1a1b2:	2190      	movs	r1, #144	; 0x90
   1a1b4:	f000 fd74 	bl	1aca0 <mbedtls_platform_zeroize>
   1a1b8:	4620      	mov	r0, r4
   1a1ba:	b027      	add	sp, #156	; 0x9c
   1a1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a1be:	4601      	mov	r1, r0
   1a1c0:	4632      	mov	r2, r6
   1a1c2:	4628      	mov	r0, r5
   1a1c4:	f7ff ff96 	bl	1a0f4 <entropy_update>
   1a1c8:	b950      	cbnz	r0, 1a1e0 <entropy_gather_internal.part.0+0x70>
   1a1ca:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   1a1ce:	9a01      	ldr	r2, [sp, #4]
   1a1d0:	4413      	add	r3, r2
   1a1d2:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   1a1d6:	2f00      	cmp	r7, #0
   1a1d8:	d1ea      	bne.n	1a1b0 <entropy_gather_internal.part.0+0x40>
   1a1da:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1a1de:	e7e7      	b.n	1a1b0 <entropy_gather_internal.part.0+0x40>
   1a1e0:	4604      	mov	r4, r0
   1a1e2:	4620      	mov	r0, r4
   1a1e4:	b027      	add	sp, #156	; 0x9c
   1a1e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a1e8 <cc_mbedtls_entropy_init>:
   1a1e8:	b570      	push	{r4, r5, r6, lr}
   1a1ea:	2500      	movs	r5, #0
   1a1ec:	4604      	mov	r4, r0
   1a1ee:	4629      	mov	r1, r5
   1a1f0:	2214      	movs	r2, #20
   1a1f2:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   1a1f6:	30f8      	adds	r0, #248	; 0xf8
   1a1f8:	f006 fc7a 	bl	20af0 <memset>
   1a1fc:	4b15      	ldr	r3, [pc, #84]	; (1a254 <cc_mbedtls_entropy_init+0x6c>)
   1a1fe:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   1a202:	681b      	ldr	r3, [r3, #0]
   1a204:	4630      	mov	r0, r6
   1a206:	4798      	blx	r3
   1a208:	4620      	mov	r0, r4
   1a20a:	f840 5b04 	str.w	r5, [r0], #4
   1a20e:	f000 fdcf 	bl	1adb0 <cc_mbedtls_sha256_init>
   1a212:	4b11      	ldr	r3, [pc, #68]	; (1a258 <cc_mbedtls_entropy_init+0x70>)
   1a214:	4630      	mov	r0, r6
   1a216:	681b      	ldr	r3, [r3, #0]
   1a218:	4798      	blx	r3
   1a21a:	b9c8      	cbnz	r0, 1a250 <cc_mbedtls_entropy_init+0x68>
   1a21c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1a220:	42ab      	cmp	r3, r5
   1a222:	dc0f      	bgt.n	1a244 <cc_mbedtls_entropy_init+0x5c>
   1a224:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1a228:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1a22c:	490b      	ldr	r1, [pc, #44]	; (1a25c <cc_mbedtls_entropy_init+0x74>)
   1a22e:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   1a232:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
   1a236:	3301      	adds	r3, #1
   1a238:	2020      	movs	r0, #32
   1a23a:	2101      	movs	r1, #1
   1a23c:	e9c2 0141 	strd	r0, r1, [r2, #260]	; 0x104
   1a240:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   1a244:	4b06      	ldr	r3, [pc, #24]	; (1a260 <cc_mbedtls_entropy_init+0x78>)
   1a246:	4630      	mov	r0, r6
   1a248:	681b      	ldr	r3, [r3, #0]
   1a24a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a24e:	4718      	bx	r3
   1a250:	bd70      	pop	{r4, r5, r6, pc}
   1a252:	bf00      	nop
   1a254:	200006e4 	.word	0x200006e4
   1a258:	200006e8 	.word	0x200006e8
   1a25c:	0001acb5 	.word	0x0001acb5
   1a260:	200006ec 	.word	0x200006ec

0001a264 <cc_mbedtls_entropy_func>:
   1a264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a268:	2a20      	cmp	r2, #32
   1a26a:	b088      	sub	sp, #32
   1a26c:	d876      	bhi.n	1a35c <cc_mbedtls_entropy_func+0xf8>
   1a26e:	4b3d      	ldr	r3, [pc, #244]	; (1a364 <cc_mbedtls_entropy_func+0x100>)
   1a270:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   1a274:	681b      	ldr	r3, [r3, #0]
   1a276:	4604      	mov	r4, r0
   1a278:	4648      	mov	r0, r9
   1a27a:	4617      	mov	r7, r2
   1a27c:	4688      	mov	r8, r1
   1a27e:	4798      	blx	r3
   1a280:	4605      	mov	r5, r0
   1a282:	bba0      	cbnz	r0, 1a2ee <cc_mbedtls_entropy_func+0x8a>
   1a284:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1a288:	f240 1601 	movw	r6, #257	; 0x101
   1a28c:	e001      	b.n	1a292 <cc_mbedtls_entropy_func+0x2e>
   1a28e:	3e01      	subs	r6, #1
   1a290:	d060      	beq.n	1a354 <cc_mbedtls_entropy_func+0xf0>
   1a292:	4620      	mov	r0, r4
   1a294:	b37b      	cbz	r3, 1a2f6 <cc_mbedtls_entropy_func+0x92>
   1a296:	f7ff ff6b 	bl	1a170 <entropy_gather_internal.part.0>
   1a29a:	4605      	mov	r5, r0
   1a29c:	bb68      	cbnz	r0, 1a2fa <cc_mbedtls_entropy_func+0x96>
   1a29e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1a2a2:	2b00      	cmp	r3, #0
   1a2a4:	ddf3      	ble.n	1a28e <cc_mbedtls_entropy_func+0x2a>
   1a2a6:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   1a2aa:	4290      	cmp	r0, r2
   1a2ac:	d3ef      	bcc.n	1a28e <cc_mbedtls_entropy_func+0x2a>
   1a2ae:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1a2b2:	2a01      	cmp	r2, #1
   1a2b4:	d1eb      	bne.n	1a28e <cc_mbedtls_entropy_func+0x2a>
   1a2b6:	281f      	cmp	r0, #31
   1a2b8:	d9e9      	bls.n	1a28e <cc_mbedtls_entropy_func+0x2a>
   1a2ba:	466e      	mov	r6, sp
   1a2bc:	4629      	mov	r1, r5
   1a2be:	2220      	movs	r2, #32
   1a2c0:	4630      	mov	r0, r6
   1a2c2:	f104 0a04 	add.w	sl, r4, #4
   1a2c6:	f006 fc13 	bl	20af0 <memset>
   1a2ca:	4631      	mov	r1, r6
   1a2cc:	4650      	mov	r0, sl
   1a2ce:	f000 fda5 	bl	1ae1c <cc_mbedtls_sha256_finish_ret>
   1a2d2:	4605      	mov	r5, r0
   1a2d4:	b198      	cbz	r0, 1a2fe <cc_mbedtls_entropy_func+0x9a>
   1a2d6:	4630      	mov	r0, r6
   1a2d8:	2120      	movs	r1, #32
   1a2da:	f000 fce1 	bl	1aca0 <mbedtls_platform_zeroize>
   1a2de:	4b22      	ldr	r3, [pc, #136]	; (1a368 <cc_mbedtls_entropy_func+0x104>)
   1a2e0:	4648      	mov	r0, r9
   1a2e2:	681b      	ldr	r3, [r3, #0]
   1a2e4:	4798      	blx	r3
   1a2e6:	2800      	cmp	r0, #0
   1a2e8:	bf18      	it	ne
   1a2ea:	f06f 051d 	mvnne.w	r5, #29
   1a2ee:	4628      	mov	r0, r5
   1a2f0:	b008      	add	sp, #32
   1a2f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a2f6:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1a2fa:	466e      	mov	r6, sp
   1a2fc:	e7eb      	b.n	1a2d6 <cc_mbedtls_entropy_func+0x72>
   1a2fe:	4650      	mov	r0, sl
   1a300:	f000 fd6a 	bl	1add8 <cc_mbedtls_sha256_free>
   1a304:	4650      	mov	r0, sl
   1a306:	f000 fd53 	bl	1adb0 <cc_mbedtls_sha256_init>
   1a30a:	4629      	mov	r1, r5
   1a30c:	4650      	mov	r0, sl
   1a30e:	f000 fd69 	bl	1ade4 <cc_mbedtls_sha256_starts_ret>
   1a312:	4605      	mov	r5, r0
   1a314:	2800      	cmp	r0, #0
   1a316:	d1de      	bne.n	1a2d6 <cc_mbedtls_entropy_func+0x72>
   1a318:	4650      	mov	r0, sl
   1a31a:	2220      	movs	r2, #32
   1a31c:	4631      	mov	r1, r6
   1a31e:	f000 fd75 	bl	1ae0c <cc_mbedtls_sha256_update_ret>
   1a322:	4605      	mov	r5, r0
   1a324:	2800      	cmp	r0, #0
   1a326:	d1d6      	bne.n	1a2d6 <cc_mbedtls_entropy_func+0x72>
   1a328:	4603      	mov	r3, r0
   1a32a:	4632      	mov	r2, r6
   1a32c:	2120      	movs	r1, #32
   1a32e:	4630      	mov	r0, r6
   1a330:	f001 f9e8 	bl	1b704 <cc_mbedtls_sha256_ret>
   1a334:	4605      	mov	r5, r0
   1a336:	2800      	cmp	r0, #0
   1a338:	d1cd      	bne.n	1a2d6 <cc_mbedtls_entropy_func+0x72>
   1a33a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1a33e:	2b00      	cmp	r3, #0
   1a340:	bfc4      	itt	gt
   1a342:	2300      	movgt	r3, #0
   1a344:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   1a348:	463a      	mov	r2, r7
   1a34a:	4640      	mov	r0, r8
   1a34c:	4631      	mov	r1, r6
   1a34e:	f006 fb94 	bl	20a7a <memcpy>
   1a352:	e7c0      	b.n	1a2d6 <cc_mbedtls_entropy_func+0x72>
   1a354:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1a358:	466e      	mov	r6, sp
   1a35a:	e7bc      	b.n	1a2d6 <cc_mbedtls_entropy_func+0x72>
   1a35c:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1a360:	e7c5      	b.n	1a2ee <cc_mbedtls_entropy_func+0x8a>
   1a362:	bf00      	nop
   1a364:	200006e8 	.word	0x200006e8
   1a368:	200006ec 	.word	0x200006ec

0001a36c <RndStartupTest.constprop.0>:
   1a36c:	b530      	push	{r4, r5, lr}
   1a36e:	b08d      	sub	sp, #52	; 0x34
   1a370:	2100      	movs	r1, #0
   1a372:	2228      	movs	r2, #40	; 0x28
   1a374:	a802      	add	r0, sp, #8
   1a376:	9101      	str	r1, [sp, #4]
   1a378:	f006 fbba 	bl	20af0 <memset>
   1a37c:	a802      	add	r0, sp, #8
   1a37e:	f001 f9e9 	bl	1b754 <RNG_PLAT_SetUserRngParameters>
   1a382:	4604      	mov	r4, r0
   1a384:	b110      	cbz	r0, 1a38c <RndStartupTest.constprop.0+0x20>
   1a386:	4620      	mov	r0, r4
   1a388:	b00d      	add	sp, #52	; 0x34
   1a38a:	bd30      	pop	{r4, r5, pc}
   1a38c:	4d18      	ldr	r5, [pc, #96]	; (1a3f0 <RndStartupTest.constprop.0+0x84>)
   1a38e:	f04f 31ff 	mov.w	r1, #4294967295
   1a392:	6828      	ldr	r0, [r5, #0]
   1a394:	f000 f93c 	bl	1a610 <CC_PalMutexLock>
   1a398:	4604      	mov	r4, r0
   1a39a:	b9c0      	cbnz	r0, 1a3ce <RndStartupTest.constprop.0+0x62>
   1a39c:	2000      	movs	r0, #0
   1a39e:	f000 f967 	bl	1a670 <CC_PalPowerSaveModeSelect>
   1a3a2:	bb00      	cbnz	r0, 1a3e6 <RndStartupTest.constprop.0+0x7a>
   1a3a4:	4a13      	ldr	r2, [pc, #76]	; (1a3f4 <RndStartupTest.constprop.0+0x88>)
   1a3a6:	a902      	add	r1, sp, #8
   1a3a8:	a801      	add	r0, sp, #4
   1a3aa:	f000 fc6b 	bl	1ac84 <LLF_RND_RunTrngStartupTest>
   1a3ae:	4604      	mov	r4, r0
   1a3b0:	2001      	movs	r0, #1
   1a3b2:	f000 f95d 	bl	1a670 <CC_PalPowerSaveModeSelect>
   1a3b6:	b990      	cbnz	r0, 1a3de <RndStartupTest.constprop.0+0x72>
   1a3b8:	6828      	ldr	r0, [r5, #0]
   1a3ba:	f000 f931 	bl	1a620 <CC_PalMutexUnlock>
   1a3be:	2800      	cmp	r0, #0
   1a3c0:	d0e1      	beq.n	1a386 <RndStartupTest.constprop.0+0x1a>
   1a3c2:	480d      	ldr	r0, [pc, #52]	; (1a3f8 <RndStartupTest.constprop.0+0x8c>)
   1a3c4:	f7ff fd8e 	bl	19ee4 <CC_PalAbort>
   1a3c8:	4620      	mov	r0, r4
   1a3ca:	b00d      	add	sp, #52	; 0x34
   1a3cc:	bd30      	pop	{r4, r5, pc}
   1a3ce:	480b      	ldr	r0, [pc, #44]	; (1a3fc <RndStartupTest.constprop.0+0x90>)
   1a3d0:	f7ff fd88 	bl	19ee4 <CC_PalAbort>
   1a3d4:	2c01      	cmp	r4, #1
   1a3d6:	bf08      	it	eq
   1a3d8:	2405      	moveq	r4, #5
   1a3da:	d0ed      	beq.n	1a3b8 <RndStartupTest.constprop.0+0x4c>
   1a3dc:	e7de      	b.n	1a39c <RndStartupTest.constprop.0+0x30>
   1a3de:	4808      	ldr	r0, [pc, #32]	; (1a400 <RndStartupTest.constprop.0+0x94>)
   1a3e0:	f7ff fd80 	bl	19ee4 <CC_PalAbort>
   1a3e4:	e7e8      	b.n	1a3b8 <RndStartupTest.constprop.0+0x4c>
   1a3e6:	4807      	ldr	r0, [pc, #28]	; (1a404 <RndStartupTest.constprop.0+0x98>)
   1a3e8:	f7ff fd7c 	bl	19ee4 <CC_PalAbort>
   1a3ec:	e7da      	b.n	1a3a4 <RndStartupTest.constprop.0+0x38>
   1a3ee:	bf00      	nop
   1a3f0:	200006e0 	.word	0x200006e0
   1a3f4:	2000286c 	.word	0x2000286c
   1a3f8:	0002189c 	.word	0x0002189c
   1a3fc:	00021844 	.word	0x00021844
   1a400:	0002187c 	.word	0x0002187c
   1a404:	0002185c 	.word	0x0002185c

0001a408 <CC_LibInit>:
   1a408:	b510      	push	{r4, lr}
   1a40a:	b082      	sub	sp, #8
   1a40c:	f000 f854 	bl	1a4b8 <CC_HalInit>
   1a410:	b128      	cbz	r0, 1a41e <CC_LibInit+0x16>
   1a412:	f000 f8a3 	bl	1a55c <CC_PalTerminate>
   1a416:	2403      	movs	r4, #3
   1a418:	4620      	mov	r0, r4
   1a41a:	b002      	add	sp, #8
   1a41c:	bd10      	pop	{r4, pc}
   1a41e:	f000 f86f 	bl	1a500 <CC_PalInit>
   1a422:	b9d0      	cbnz	r0, 1a45a <CC_LibInit+0x52>
   1a424:	f000 f924 	bl	1a670 <CC_PalPowerSaveModeSelect>
   1a428:	b9d8      	cbnz	r0, 1a462 <CC_LibInit+0x5a>
   1a42a:	4b1e      	ldr	r3, [pc, #120]	; (1a4a4 <CC_LibInit+0x9c>)
   1a42c:	681b      	ldr	r3, [r3, #0]
   1a42e:	0e1b      	lsrs	r3, r3, #24
   1a430:	2bf0      	cmp	r3, #240	; 0xf0
   1a432:	d10a      	bne.n	1a44a <CC_LibInit+0x42>
   1a434:	4a1c      	ldr	r2, [pc, #112]	; (1a4a8 <CC_LibInit+0xa0>)
   1a436:	4b1d      	ldr	r3, [pc, #116]	; (1a4ac <CC_LibInit+0xa4>)
   1a438:	6812      	ldr	r2, [r2, #0]
   1a43a:	429a      	cmp	r2, r3
   1a43c:	d029      	beq.n	1a492 <CC_LibInit+0x8a>
   1a43e:	f000 f83d 	bl	1a4bc <CC_HalTerminate>
   1a442:	2407      	movs	r4, #7
   1a444:	f000 f88a 	bl	1a55c <CC_PalTerminate>
   1a448:	e7e6      	b.n	1a418 <CC_LibInit+0x10>
   1a44a:	f000 f837 	bl	1a4bc <CC_HalTerminate>
   1a44e:	f000 f885 	bl	1a55c <CC_PalTerminate>
   1a452:	2406      	movs	r4, #6
   1a454:	4620      	mov	r0, r4
   1a456:	b002      	add	sp, #8
   1a458:	bd10      	pop	{r4, pc}
   1a45a:	2404      	movs	r4, #4
   1a45c:	4620      	mov	r0, r4
   1a45e:	b002      	add	sp, #8
   1a460:	bd10      	pop	{r4, pc}
   1a462:	f000 f82b 	bl	1a4bc <CC_HalTerminate>
   1a466:	f000 f879 	bl	1a55c <CC_PalTerminate>
   1a46a:	f7ff ff7f 	bl	1a36c <RndStartupTest.constprop.0>
   1a46e:	4604      	mov	r4, r0
   1a470:	b958      	cbnz	r0, 1a48a <CC_LibInit+0x82>
   1a472:	4602      	mov	r2, r0
   1a474:	4601      	mov	r1, r0
   1a476:	f7ff fd5d 	bl	19f34 <nrf_cc3xx_platform_ctr_drbg_init>
   1a47a:	b930      	cbnz	r0, 1a48a <CC_LibInit+0x82>
   1a47c:	490c      	ldr	r1, [pc, #48]	; (1a4b0 <CC_LibInit+0xa8>)
   1a47e:	ab01      	add	r3, sp, #4
   1a480:	2268      	movs	r2, #104	; 0x68
   1a482:	f7ff fd8b 	bl	19f9c <nrf_cc3xx_platform_ctr_drbg_get>
   1a486:	2800      	cmp	r0, #0
   1a488:	d0c6      	beq.n	1a418 <CC_LibInit+0x10>
   1a48a:	2405      	movs	r4, #5
   1a48c:	4620      	mov	r0, r4
   1a48e:	b002      	add	sp, #8
   1a490:	bd10      	pop	{r4, pc}
   1a492:	2001      	movs	r0, #1
   1a494:	f000 f8ec 	bl	1a670 <CC_PalPowerSaveModeSelect>
   1a498:	2800      	cmp	r0, #0
   1a49a:	d1e2      	bne.n	1a462 <CC_LibInit+0x5a>
   1a49c:	4b05      	ldr	r3, [pc, #20]	; (1a4b4 <CC_LibInit+0xac>)
   1a49e:	6018      	str	r0, [r3, #0]
   1a4a0:	e7e3      	b.n	1a46a <CC_LibInit+0x62>
   1a4a2:	bf00      	nop
   1a4a4:	5002b928 	.word	0x5002b928
   1a4a8:	5002ba24 	.word	0x5002ba24
   1a4ac:	20e00000 	.word	0x20e00000
   1a4b0:	20002804 	.word	0x20002804
   1a4b4:	5002ba0c 	.word	0x5002ba0c

0001a4b8 <CC_HalInit>:
   1a4b8:	2000      	movs	r0, #0
   1a4ba:	4770      	bx	lr

0001a4bc <CC_HalTerminate>:
   1a4bc:	2000      	movs	r0, #0
   1a4be:	4770      	bx	lr

0001a4c0 <CC_HalClearInterruptBit>:
   1a4c0:	0543      	lsls	r3, r0, #21
   1a4c2:	d503      	bpl.n	1a4cc <CC_HalClearInterruptBit+0xc>
   1a4c4:	4b03      	ldr	r3, [pc, #12]	; (1a4d4 <CC_HalClearInterruptBit+0x14>)
   1a4c6:	f04f 32ff 	mov.w	r2, #4294967295
   1a4ca:	601a      	str	r2, [r3, #0]
   1a4cc:	4b02      	ldr	r3, [pc, #8]	; (1a4d8 <CC_HalClearInterruptBit+0x18>)
   1a4ce:	6018      	str	r0, [r3, #0]
   1a4d0:	4770      	bx	lr
   1a4d2:	bf00      	nop
   1a4d4:	5002b108 	.word	0x5002b108
   1a4d8:	5002ba08 	.word	0x5002ba08

0001a4dc <CC_HalMaskInterrupt>:
   1a4dc:	4b01      	ldr	r3, [pc, #4]	; (1a4e4 <CC_HalMaskInterrupt+0x8>)
   1a4de:	6018      	str	r0, [r3, #0]
   1a4e0:	4770      	bx	lr
   1a4e2:	bf00      	nop
   1a4e4:	5002ba04 	.word	0x5002ba04

0001a4e8 <CC_HalWaitInterrupt>:
   1a4e8:	b108      	cbz	r0, 1a4ee <CC_HalWaitInterrupt+0x6>
   1a4ea:	f000 b86f 	b.w	1a5cc <CC_PalWaitInterrupt>
   1a4ee:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1a4f2:	4770      	bx	lr

0001a4f4 <CC_HalWaitInterruptRND>:
   1a4f4:	b108      	cbz	r0, 1a4fa <CC_HalWaitInterruptRND+0x6>
   1a4f6:	f000 b84f 	b.w	1a598 <CC_PalWaitInterruptRND>
   1a4fa:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1a4fe:	4770      	bx	lr

0001a500 <CC_PalInit>:
   1a500:	b510      	push	{r4, lr}
   1a502:	4811      	ldr	r0, [pc, #68]	; (1a548 <CC_PalInit+0x48>)
   1a504:	f000 f870 	bl	1a5e8 <CC_PalMutexCreate>
   1a508:	b100      	cbz	r0, 1a50c <CC_PalInit+0xc>
   1a50a:	bd10      	pop	{r4, pc}
   1a50c:	480f      	ldr	r0, [pc, #60]	; (1a54c <CC_PalInit+0x4c>)
   1a50e:	f000 f86b 	bl	1a5e8 <CC_PalMutexCreate>
   1a512:	2800      	cmp	r0, #0
   1a514:	d1f9      	bne.n	1a50a <CC_PalInit+0xa>
   1a516:	4c0e      	ldr	r4, [pc, #56]	; (1a550 <CC_PalInit+0x50>)
   1a518:	4620      	mov	r0, r4
   1a51a:	f000 f865 	bl	1a5e8 <CC_PalMutexCreate>
   1a51e:	2800      	cmp	r0, #0
   1a520:	d1f3      	bne.n	1a50a <CC_PalInit+0xa>
   1a522:	4b0c      	ldr	r3, [pc, #48]	; (1a554 <CC_PalInit+0x54>)
   1a524:	480c      	ldr	r0, [pc, #48]	; (1a558 <CC_PalInit+0x58>)
   1a526:	601c      	str	r4, [r3, #0]
   1a528:	f000 f85e 	bl	1a5e8 <CC_PalMutexCreate>
   1a52c:	4601      	mov	r1, r0
   1a52e:	2800      	cmp	r0, #0
   1a530:	d1eb      	bne.n	1a50a <CC_PalInit+0xa>
   1a532:	f000 f82d 	bl	1a590 <CC_PalDmaInit>
   1a536:	4604      	mov	r4, r0
   1a538:	b108      	cbz	r0, 1a53e <CC_PalInit+0x3e>
   1a53a:	4620      	mov	r0, r4
   1a53c:	bd10      	pop	{r4, pc}
   1a53e:	f000 f879 	bl	1a634 <CC_PalPowerSaveModeInit>
   1a542:	4620      	mov	r0, r4
   1a544:	e7fa      	b.n	1a53c <CC_PalInit+0x3c>
   1a546:	bf00      	nop
   1a548:	200006dc 	.word	0x200006dc
   1a54c:	200006d0 	.word	0x200006d0
   1a550:	200006d8 	.word	0x200006d8
   1a554:	200006e0 	.word	0x200006e0
   1a558:	200006d4 	.word	0x200006d4

0001a55c <CC_PalTerminate>:
   1a55c:	b508      	push	{r3, lr}
   1a55e:	4808      	ldr	r0, [pc, #32]	; (1a580 <CC_PalTerminate+0x24>)
   1a560:	f000 f84c 	bl	1a5fc <CC_PalMutexDestroy>
   1a564:	4807      	ldr	r0, [pc, #28]	; (1a584 <CC_PalTerminate+0x28>)
   1a566:	f000 f849 	bl	1a5fc <CC_PalMutexDestroy>
   1a56a:	4807      	ldr	r0, [pc, #28]	; (1a588 <CC_PalTerminate+0x2c>)
   1a56c:	f000 f846 	bl	1a5fc <CC_PalMutexDestroy>
   1a570:	4806      	ldr	r0, [pc, #24]	; (1a58c <CC_PalTerminate+0x30>)
   1a572:	f000 f843 	bl	1a5fc <CC_PalMutexDestroy>
   1a576:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1a57a:	f000 b80b 	b.w	1a594 <CC_PalDmaTerminate>
   1a57e:	bf00      	nop
   1a580:	200006dc 	.word	0x200006dc
   1a584:	200006d0 	.word	0x200006d0
   1a588:	200006d8 	.word	0x200006d8
   1a58c:	200006d4 	.word	0x200006d4

0001a590 <CC_PalDmaInit>:
   1a590:	2000      	movs	r0, #0
   1a592:	4770      	bx	lr

0001a594 <CC_PalDmaTerminate>:
   1a594:	4770      	bx	lr
   1a596:	bf00      	nop

0001a598 <CC_PalWaitInterruptRND>:
   1a598:	b410      	push	{r4}
   1a59a:	4c08      	ldr	r4, [pc, #32]	; (1a5bc <CC_PalWaitInterruptRND+0x24>)
   1a59c:	4602      	mov	r2, r0
   1a59e:	6823      	ldr	r3, [r4, #0]
   1a5a0:	4213      	tst	r3, r2
   1a5a2:	d0fc      	beq.n	1a59e <CC_PalWaitInterruptRND+0x6>
   1a5a4:	b121      	cbz	r1, 1a5b0 <CC_PalWaitInterruptRND+0x18>
   1a5a6:	4b06      	ldr	r3, [pc, #24]	; (1a5c0 <CC_PalWaitInterruptRND+0x28>)
   1a5a8:	4806      	ldr	r0, [pc, #24]	; (1a5c4 <CC_PalWaitInterruptRND+0x2c>)
   1a5aa:	681b      	ldr	r3, [r3, #0]
   1a5ac:	600b      	str	r3, [r1, #0]
   1a5ae:	6003      	str	r3, [r0, #0]
   1a5b0:	4b05      	ldr	r3, [pc, #20]	; (1a5c8 <CC_PalWaitInterruptRND+0x30>)
   1a5b2:	601a      	str	r2, [r3, #0]
   1a5b4:	2000      	movs	r0, #0
   1a5b6:	bc10      	pop	{r4}
   1a5b8:	4770      	bx	lr
   1a5ba:	bf00      	nop
   1a5bc:	5002ba00 	.word	0x5002ba00
   1a5c0:	5002b104 	.word	0x5002b104
   1a5c4:	5002b108 	.word	0x5002b108
   1a5c8:	5002ba08 	.word	0x5002ba08

0001a5cc <CC_PalWaitInterrupt>:
   1a5cc:	4904      	ldr	r1, [pc, #16]	; (1a5e0 <CC_PalWaitInterrupt+0x14>)
   1a5ce:	4602      	mov	r2, r0
   1a5d0:	680b      	ldr	r3, [r1, #0]
   1a5d2:	421a      	tst	r2, r3
   1a5d4:	d0fc      	beq.n	1a5d0 <CC_PalWaitInterrupt+0x4>
   1a5d6:	4b03      	ldr	r3, [pc, #12]	; (1a5e4 <CC_PalWaitInterrupt+0x18>)
   1a5d8:	2000      	movs	r0, #0
   1a5da:	601a      	str	r2, [r3, #0]
   1a5dc:	4770      	bx	lr
   1a5de:	bf00      	nop
   1a5e0:	5002ba00 	.word	0x5002ba00
   1a5e4:	5002ba08 	.word	0x5002ba08

0001a5e8 <CC_PalMutexCreate>:
   1a5e8:	b508      	push	{r3, lr}
   1a5ea:	4b03      	ldr	r3, [pc, #12]	; (1a5f8 <CC_PalMutexCreate+0x10>)
   1a5ec:	6802      	ldr	r2, [r0, #0]
   1a5ee:	681b      	ldr	r3, [r3, #0]
   1a5f0:	6810      	ldr	r0, [r2, #0]
   1a5f2:	4798      	blx	r3
   1a5f4:	2000      	movs	r0, #0
   1a5f6:	bd08      	pop	{r3, pc}
   1a5f8:	20000690 	.word	0x20000690

0001a5fc <CC_PalMutexDestroy>:
   1a5fc:	b508      	push	{r3, lr}
   1a5fe:	4b03      	ldr	r3, [pc, #12]	; (1a60c <CC_PalMutexDestroy+0x10>)
   1a600:	6802      	ldr	r2, [r0, #0]
   1a602:	685b      	ldr	r3, [r3, #4]
   1a604:	6810      	ldr	r0, [r2, #0]
   1a606:	4798      	blx	r3
   1a608:	2000      	movs	r0, #0
   1a60a:	bd08      	pop	{r3, pc}
   1a60c:	20000690 	.word	0x20000690

0001a610 <CC_PalMutexLock>:
   1a610:	4b02      	ldr	r3, [pc, #8]	; (1a61c <CC_PalMutexLock+0xc>)
   1a612:	6802      	ldr	r2, [r0, #0]
   1a614:	689b      	ldr	r3, [r3, #8]
   1a616:	6810      	ldr	r0, [r2, #0]
   1a618:	4718      	bx	r3
   1a61a:	bf00      	nop
   1a61c:	20000690 	.word	0x20000690

0001a620 <CC_PalMutexUnlock>:
   1a620:	b508      	push	{r3, lr}
   1a622:	4b03      	ldr	r3, [pc, #12]	; (1a630 <CC_PalMutexUnlock+0x10>)
   1a624:	6802      	ldr	r2, [r0, #0]
   1a626:	68db      	ldr	r3, [r3, #12]
   1a628:	6810      	ldr	r0, [r2, #0]
   1a62a:	4798      	blx	r3
   1a62c:	2000      	movs	r0, #0
   1a62e:	bd08      	pop	{r3, pc}
   1a630:	20000690 	.word	0x20000690

0001a634 <CC_PalPowerSaveModeInit>:
   1a634:	b570      	push	{r4, r5, r6, lr}
   1a636:	4c09      	ldr	r4, [pc, #36]	; (1a65c <CC_PalPowerSaveModeInit+0x28>)
   1a638:	4d09      	ldr	r5, [pc, #36]	; (1a660 <CC_PalPowerSaveModeInit+0x2c>)
   1a63a:	6920      	ldr	r0, [r4, #16]
   1a63c:	68ab      	ldr	r3, [r5, #8]
   1a63e:	4798      	blx	r3
   1a640:	b118      	cbz	r0, 1a64a <CC_PalPowerSaveModeInit+0x16>
   1a642:	4b08      	ldr	r3, [pc, #32]	; (1a664 <CC_PalPowerSaveModeInit+0x30>)
   1a644:	4808      	ldr	r0, [pc, #32]	; (1a668 <CC_PalPowerSaveModeInit+0x34>)
   1a646:	685b      	ldr	r3, [r3, #4]
   1a648:	4798      	blx	r3
   1a64a:	4a08      	ldr	r2, [pc, #32]	; (1a66c <CC_PalPowerSaveModeInit+0x38>)
   1a64c:	68eb      	ldr	r3, [r5, #12]
   1a64e:	6920      	ldr	r0, [r4, #16]
   1a650:	2100      	movs	r1, #0
   1a652:	6011      	str	r1, [r2, #0]
   1a654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a658:	4718      	bx	r3
   1a65a:	bf00      	nop
   1a65c:	200006a0 	.word	0x200006a0
   1a660:	20000690 	.word	0x20000690
   1a664:	20000680 	.word	0x20000680
   1a668:	000218b4 	.word	0x000218b4
   1a66c:	20002a8c 	.word	0x20002a8c

0001a670 <CC_PalPowerSaveModeSelect>:
   1a670:	b570      	push	{r4, r5, r6, lr}
   1a672:	4d1a      	ldr	r5, [pc, #104]	; (1a6dc <CC_PalPowerSaveModeSelect+0x6c>)
   1a674:	4e1a      	ldr	r6, [pc, #104]	; (1a6e0 <CC_PalPowerSaveModeSelect+0x70>)
   1a676:	4604      	mov	r4, r0
   1a678:	68b2      	ldr	r2, [r6, #8]
   1a67a:	6928      	ldr	r0, [r5, #16]
   1a67c:	4790      	blx	r2
   1a67e:	b9f0      	cbnz	r0, 1a6be <CC_PalPowerSaveModeSelect+0x4e>
   1a680:	b15c      	cbz	r4, 1a69a <CC_PalPowerSaveModeSelect+0x2a>
   1a682:	4c18      	ldr	r4, [pc, #96]	; (1a6e4 <CC_PalPowerSaveModeSelect+0x74>)
   1a684:	6823      	ldr	r3, [r4, #0]
   1a686:	b1ab      	cbz	r3, 1a6b4 <CC_PalPowerSaveModeSelect+0x44>
   1a688:	2b01      	cmp	r3, #1
   1a68a:	d01a      	beq.n	1a6c2 <CC_PalPowerSaveModeSelect+0x52>
   1a68c:	3b01      	subs	r3, #1
   1a68e:	6023      	str	r3, [r4, #0]
   1a690:	6928      	ldr	r0, [r5, #16]
   1a692:	68f3      	ldr	r3, [r6, #12]
   1a694:	4798      	blx	r3
   1a696:	2000      	movs	r0, #0
   1a698:	bd70      	pop	{r4, r5, r6, pc}
   1a69a:	4c12      	ldr	r4, [pc, #72]	; (1a6e4 <CC_PalPowerSaveModeSelect+0x74>)
   1a69c:	6821      	ldr	r1, [r4, #0]
   1a69e:	b939      	cbnz	r1, 1a6b0 <CC_PalPowerSaveModeSelect+0x40>
   1a6a0:	4b11      	ldr	r3, [pc, #68]	; (1a6e8 <CC_PalPowerSaveModeSelect+0x78>)
   1a6a2:	4a12      	ldr	r2, [pc, #72]	; (1a6ec <CC_PalPowerSaveModeSelect+0x7c>)
   1a6a4:	2001      	movs	r0, #1
   1a6a6:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   1a6aa:	6813      	ldr	r3, [r2, #0]
   1a6ac:	2b00      	cmp	r3, #0
   1a6ae:	d1fc      	bne.n	1a6aa <CC_PalPowerSaveModeSelect+0x3a>
   1a6b0:	3101      	adds	r1, #1
   1a6b2:	6021      	str	r1, [r4, #0]
   1a6b4:	68f3      	ldr	r3, [r6, #12]
   1a6b6:	6928      	ldr	r0, [r5, #16]
   1a6b8:	4798      	blx	r3
   1a6ba:	2000      	movs	r0, #0
   1a6bc:	bd70      	pop	{r4, r5, r6, pc}
   1a6be:	480c      	ldr	r0, [pc, #48]	; (1a6f0 <CC_PalPowerSaveModeSelect+0x80>)
   1a6c0:	bd70      	pop	{r4, r5, r6, pc}
   1a6c2:	4a0a      	ldr	r2, [pc, #40]	; (1a6ec <CC_PalPowerSaveModeSelect+0x7c>)
   1a6c4:	6813      	ldr	r3, [r2, #0]
   1a6c6:	2b00      	cmp	r3, #0
   1a6c8:	d1fc      	bne.n	1a6c4 <CC_PalPowerSaveModeSelect+0x54>
   1a6ca:	4a07      	ldr	r2, [pc, #28]	; (1a6e8 <CC_PalPowerSaveModeSelect+0x78>)
   1a6cc:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   1a6d0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   1a6d4:	f7ff ff02 	bl	1a4dc <CC_HalMaskInterrupt>
   1a6d8:	6823      	ldr	r3, [r4, #0]
   1a6da:	e7d7      	b.n	1a68c <CC_PalPowerSaveModeSelect+0x1c>
   1a6dc:	200006a0 	.word	0x200006a0
   1a6e0:	20000690 	.word	0x20000690
   1a6e4:	20002a8c 	.word	0x20002a8c
   1a6e8:	5002a000 	.word	0x5002a000
   1a6ec:	5002b910 	.word	0x5002b910
   1a6f0:	ffff8fe9 	.word	0xffff8fe9

0001a6f4 <mutex_init>:
   1a6f4:	4b01      	ldr	r3, [pc, #4]	; (1a6fc <mutex_init+0x8>)
   1a6f6:	681b      	ldr	r3, [r3, #0]
   1a6f8:	4718      	bx	r3
   1a6fa:	bf00      	nop
   1a6fc:	20000690 	.word	0x20000690

0001a700 <mutex_lock>:
   1a700:	4b01      	ldr	r3, [pc, #4]	; (1a708 <mutex_lock+0x8>)
   1a702:	689b      	ldr	r3, [r3, #8]
   1a704:	4718      	bx	r3
   1a706:	bf00      	nop
   1a708:	20000690 	.word	0x20000690

0001a70c <mutex_unlock>:
   1a70c:	4b01      	ldr	r3, [pc, #4]	; (1a714 <mutex_unlock+0x8>)
   1a70e:	68db      	ldr	r3, [r3, #12]
   1a710:	4718      	bx	r3
   1a712:	bf00      	nop
   1a714:	20000690 	.word	0x20000690

0001a718 <startTrngHW>:
   1a718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a71c:	2800      	cmp	r0, #0
   1a71e:	d077      	beq.n	1a810 <startTrngHW+0xf8>
   1a720:	460c      	mov	r4, r1
   1a722:	2900      	cmp	r1, #0
   1a724:	d074      	beq.n	1a810 <startTrngHW+0xf8>
   1a726:	461d      	mov	r5, r3
   1a728:	2b00      	cmp	r3, #0
   1a72a:	d071      	beq.n	1a810 <startTrngHW+0xf8>
   1a72c:	4606      	mov	r6, r0
   1a72e:	b11a      	cbz	r2, 1a738 <startTrngHW+0x20>
   1a730:	2201      	movs	r2, #1
   1a732:	2300      	movs	r3, #0
   1a734:	602a      	str	r2, [r5, #0]
   1a736:	6003      	str	r3, [r0, #0]
   1a738:	682b      	ldr	r3, [r5, #0]
   1a73a:	2b00      	cmp	r3, #0
   1a73c:	d064      	beq.n	1a808 <startTrngHW+0xf0>
   1a73e:	4629      	mov	r1, r5
   1a740:	4620      	mov	r0, r4
   1a742:	f001 f8cd 	bl	1b8e0 <LLF_RND_GetFastestRosc>
   1a746:	4607      	mov	r7, r0
   1a748:	2800      	cmp	r0, #0
   1a74a:	d15e      	bne.n	1a80a <startTrngHW+0xf2>
   1a74c:	6828      	ldr	r0, [r5, #0]
   1a74e:	4621      	mov	r1, r4
   1a750:	f001 f8a8 	bl	1b8a4 <LLF_RND_GetRoscSampleCnt>
   1a754:	4607      	mov	r7, r0
   1a756:	2800      	cmp	r0, #0
   1a758:	d157      	bne.n	1a80a <startTrngHW+0xf2>
   1a75a:	682b      	ldr	r3, [r5, #0]
   1a75c:	2b08      	cmp	r3, #8
   1a75e:	d066      	beq.n	1a82e <startTrngHW+0x116>
   1a760:	2b04      	cmp	r3, #4
   1a762:	d067      	beq.n	1a834 <startTrngHW+0x11c>
   1a764:	f1a3 0802 	sub.w	r8, r3, #2
   1a768:	fab8 f888 	clz	r8, r8
   1a76c:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1a770:	4b32      	ldr	r3, [pc, #200]	; (1a83c <startTrngHW+0x124>)
   1a772:	4933      	ldr	r1, [pc, #204]	; (1a840 <startTrngHW+0x128>)
   1a774:	4a33      	ldr	r2, [pc, #204]	; (1a844 <startTrngHW+0x12c>)
   1a776:	2001      	movs	r0, #1
   1a778:	6018      	str	r0, [r3, #0]
   1a77a:	469c      	mov	ip, r3
   1a77c:	6008      	str	r0, [r1, #0]
   1a77e:	f8cc 0000 	str.w	r0, [ip]
   1a782:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a784:	6013      	str	r3, [r2, #0]
   1a786:	6811      	ldr	r1, [r2, #0]
   1a788:	428b      	cmp	r3, r1
   1a78a:	d1f8      	bne.n	1a77e <startTrngHW+0x66>
   1a78c:	4b2e      	ldr	r3, [pc, #184]	; (1a848 <startTrngHW+0x130>)
   1a78e:	f04f 0900 	mov.w	r9, #0
   1a792:	f8c3 9000 	str.w	r9, [r3]
   1a796:	f04f 30ff 	mov.w	r0, #4294967295
   1a79a:	f7ff fe91 	bl	1a4c0 <CC_HalClearInterruptBit>
   1a79e:	4b2b      	ldr	r3, [pc, #172]	; (1a84c <startTrngHW+0x134>)
   1a7a0:	f06f 021b 	mvn.w	r2, #27
   1a7a4:	601a      	str	r2, [r3, #0]
   1a7a6:	4648      	mov	r0, r9
   1a7a8:	f7ff fe98 	bl	1a4dc <CC_HalMaskInterrupt>
   1a7ac:	4a28      	ldr	r2, [pc, #160]	; (1a850 <startTrngHW+0x138>)
   1a7ae:	4b29      	ldr	r3, [pc, #164]	; (1a854 <startTrngHW+0x13c>)
   1a7b0:	f8c2 8000 	str.w	r8, [r2]
   1a7b4:	6818      	ldr	r0, [r3, #0]
   1a7b6:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1a7ba:	f7ff fe8f 	bl	1a4dc <CC_HalMaskInterrupt>
   1a7be:	4b26      	ldr	r3, [pc, #152]	; (1a858 <startTrngHW+0x140>)
   1a7c0:	220a      	movs	r2, #10
   1a7c2:	601a      	str	r2, [r3, #0]
   1a7c4:	9908      	ldr	r1, [sp, #32]
   1a7c6:	6923      	ldr	r3, [r4, #16]
   1a7c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1a7ca:	2901      	cmp	r1, #1
   1a7cc:	d024      	beq.n	1a818 <startTrngHW+0x100>
   1a7ce:	4923      	ldr	r1, [pc, #140]	; (1a85c <startTrngHW+0x144>)
   1a7d0:	fba1 1303 	umull	r1, r3, r1, r3
   1a7d4:	091b      	lsrs	r3, r3, #4
   1a7d6:	fb03 f302 	mul.w	r3, r3, r2
   1a7da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1a7de:	4920      	ldr	r1, [pc, #128]	; (1a860 <startTrngHW+0x148>)
   1a7e0:	4a19      	ldr	r2, [pc, #100]	; (1a848 <startTrngHW+0x130>)
   1a7e2:	03db      	lsls	r3, r3, #15
   1a7e4:	099b      	lsrs	r3, r3, #6
   1a7e6:	600b      	str	r3, [r1, #0]
   1a7e8:	2301      	movs	r3, #1
   1a7ea:	6013      	str	r3, [r2, #0]
   1a7ec:	6833      	ldr	r3, [r6, #0]
   1a7ee:	682a      	ldr	r2, [r5, #0]
   1a7f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1a7f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1a7f8:	6033      	str	r3, [r6, #0]
   1a7fa:	682a      	ldr	r2, [r5, #0]
   1a7fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1a800:	6033      	str	r3, [r6, #0]
   1a802:	4638      	mov	r0, r7
   1a804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a808:	4f16      	ldr	r7, [pc, #88]	; (1a864 <startTrngHW+0x14c>)
   1a80a:	4638      	mov	r0, r7
   1a80c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a810:	4f15      	ldr	r7, [pc, #84]	; (1a868 <startTrngHW+0x150>)
   1a812:	4638      	mov	r0, r7
   1a814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a818:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1a81c:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   1a820:	3101      	adds	r1, #1
   1a822:	d002      	beq.n	1a82a <startTrngHW+0x112>
   1a824:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   1a828:	e7d1      	b.n	1a7ce <startTrngHW+0xb6>
   1a82a:	2316      	movs	r3, #22
   1a82c:	e7d3      	b.n	1a7d6 <startTrngHW+0xbe>
   1a82e:	f04f 0803 	mov.w	r8, #3
   1a832:	e79d      	b.n	1a770 <startTrngHW+0x58>
   1a834:	f04f 0802 	mov.w	r8, #2
   1a838:	e79a      	b.n	1a770 <startTrngHW+0x58>
   1a83a:	bf00      	nop
   1a83c:	5002b1c4 	.word	0x5002b1c4
   1a840:	5002b140 	.word	0x5002b140
   1a844:	5002b130 	.word	0x5002b130
   1a848:	5002b12c 	.word	0x5002b12c
   1a84c:	5002b100 	.word	0x5002b100
   1a850:	5002b10c 	.word	0x5002b10c
   1a854:	5002ba04 	.word	0x5002ba04
   1a858:	5002b138 	.word	0x5002b138
   1a85c:	aaaaaaab 	.word	0xaaaaaaab
   1a860:	5002b1d8 	.word	0x5002b1d8
   1a864:	00f10c31 	.word	0x00f10c31
   1a868:	00f10c35 	.word	0x00f10c35

0001a86c <LLF_RND_RepetitionCounterTest.part.0>:
   1a86c:	b4f0      	push	{r4, r5, r6, r7}
   1a86e:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   1a872:	2400      	movs	r4, #0
   1a874:	f10c 3cff 	add.w	ip, ip, #4294967295
   1a878:	4626      	mov	r6, r4
   1a87a:	4627      	mov	r7, r4
   1a87c:	e006      	b.n	1a88c <LLF_RND_RepetitionCounterTest.part.0+0x20>
   1a87e:	429f      	cmp	r7, r3
   1a880:	d016      	beq.n	1a8b0 <LLF_RND_RepetitionCounterTest.part.0+0x44>
   1a882:	2601      	movs	r6, #1
   1a884:	4565      	cmp	r5, ip
   1a886:	d819      	bhi.n	1a8bc <LLF_RND_RepetitionCounterTest.part.0+0x50>
   1a888:	462c      	mov	r4, r5
   1a88a:	461f      	mov	r7, r3
   1a88c:	0963      	lsrs	r3, r4, #5
   1a88e:	f004 011f 	and.w	r1, r4, #31
   1a892:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1a896:	291f      	cmp	r1, #31
   1a898:	fa23 f301 	lsr.w	r3, r3, r1
   1a89c:	f104 0501 	add.w	r5, r4, #1
   1a8a0:	bf18      	it	ne
   1a8a2:	f003 0301 	andne.w	r3, r3, #1
   1a8a6:	2c00      	cmp	r4, #0
   1a8a8:	d1e9      	bne.n	1a87e <LLF_RND_RepetitionCounterTest.part.0+0x12>
   1a8aa:	2601      	movs	r6, #1
   1a8ac:	4635      	mov	r5, r6
   1a8ae:	e7eb      	b.n	1a888 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   1a8b0:	3601      	adds	r6, #1
   1a8b2:	4296      	cmp	r6, r2
   1a8b4:	d1e6      	bne.n	1a884 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   1a8b6:	4803      	ldr	r0, [pc, #12]	; (1a8c4 <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   1a8b8:	bcf0      	pop	{r4, r5, r6, r7}
   1a8ba:	4770      	bx	lr
   1a8bc:	2000      	movs	r0, #0
   1a8be:	bcf0      	pop	{r4, r5, r6, r7}
   1a8c0:	4770      	bx	lr
   1a8c2:	bf00      	nop
   1a8c4:	00f10c36 	.word	0x00f10c36

0001a8c8 <LLF_RND_AdaptiveProportionTest>:
   1a8c8:	2800      	cmp	r0, #0
   1a8ca:	d061      	beq.n	1a990 <LLF_RND_AdaptiveProportionTest+0xc8>
   1a8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a8d0:	1e4c      	subs	r4, r1, #1
   1a8d2:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1a8d6:	d227      	bcs.n	1a928 <LLF_RND_AdaptiveProportionTest+0x60>
   1a8d8:	b333      	cbz	r3, 1a928 <LLF_RND_AdaptiveProportionTest+0x60>
   1a8da:	b32a      	cbz	r2, 1a928 <LLF_RND_AdaptiveProportionTest+0x60>
   1a8dc:	00cd      	lsls	r5, r1, #3
   1a8de:	2b01      	cmp	r3, #1
   1a8e0:	f105 3eff 	add.w	lr, r5, #4294967295
   1a8e4:	d030      	beq.n	1a948 <LLF_RND_AdaptiveProportionTest+0x80>
   1a8e6:	2100      	movs	r1, #0
   1a8e8:	468c      	mov	ip, r1
   1a8ea:	460f      	mov	r7, r1
   1a8ec:	460e      	mov	r6, r1
   1a8ee:	f103 38ff 	add.w	r8, r3, #4294967295
   1a8f2:	094c      	lsrs	r4, r1, #5
   1a8f4:	f001 051f 	and.w	r5, r1, #31
   1a8f8:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   1a8fc:	2d1f      	cmp	r5, #31
   1a8fe:	fa24 f405 	lsr.w	r4, r4, r5
   1a902:	bf18      	it	ne
   1a904:	f004 0401 	andne.w	r4, r4, #1
   1a908:	b921      	cbnz	r1, 1a914 <LLF_RND_AdaptiveProportionTest+0x4c>
   1a90a:	2601      	movs	r6, #1
   1a90c:	46b4      	mov	ip, r6
   1a90e:	4631      	mov	r1, r6
   1a910:	4627      	mov	r7, r4
   1a912:	e7ee      	b.n	1a8f2 <LLF_RND_AdaptiveProportionTest+0x2a>
   1a914:	42b3      	cmp	r3, r6
   1a916:	d013      	beq.n	1a940 <LLF_RND_AdaptiveProportionTest+0x78>
   1a918:	42a7      	cmp	r7, r4
   1a91a:	d101      	bne.n	1a920 <LLF_RND_AdaptiveProportionTest+0x58>
   1a91c:	f10c 0c01 	add.w	ip, ip, #1
   1a920:	4546      	cmp	r6, r8
   1a922:	d104      	bne.n	1a92e <LLF_RND_AdaptiveProportionTest+0x66>
   1a924:	4562      	cmp	r2, ip
   1a926:	d202      	bcs.n	1a92e <LLF_RND_AdaptiveProportionTest+0x66>
   1a928:	481a      	ldr	r0, [pc, #104]	; (1a994 <LLF_RND_AdaptiveProportionTest+0xcc>)
   1a92a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a92e:	463c      	mov	r4, r7
   1a930:	3101      	adds	r1, #1
   1a932:	458e      	cmp	lr, r1
   1a934:	f106 0601 	add.w	r6, r6, #1
   1a938:	d2ea      	bcs.n	1a910 <LLF_RND_AdaptiveProportionTest+0x48>
   1a93a:	2000      	movs	r0, #0
   1a93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a940:	2600      	movs	r6, #0
   1a942:	f04f 0c01 	mov.w	ip, #1
   1a946:	e7f3      	b.n	1a930 <LLF_RND_AdaptiveProportionTest+0x68>
   1a948:	2600      	movs	r6, #0
   1a94a:	46b4      	mov	ip, r6
   1a94c:	4637      	mov	r7, r6
   1a94e:	4634      	mov	r4, r6
   1a950:	0961      	lsrs	r1, r4, #5
   1a952:	f004 031f 	and.w	r3, r4, #31
   1a956:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1a95a:	2b1f      	cmp	r3, #31
   1a95c:	fa21 f103 	lsr.w	r1, r1, r3
   1a960:	bf18      	it	ne
   1a962:	f001 0101 	andne.w	r1, r1, #1
   1a966:	b13c      	cbz	r4, 1a978 <LLF_RND_AdaptiveProportionTest+0xb0>
   1a968:	b95f      	cbnz	r7, 1a982 <LLF_RND_AdaptiveProportionTest+0xba>
   1a96a:	458c      	cmp	ip, r1
   1a96c:	d001      	beq.n	1a972 <LLF_RND_AdaptiveProportionTest+0xaa>
   1a96e:	4661      	mov	r1, ip
   1a970:	e008      	b.n	1a984 <LLF_RND_AdaptiveProportionTest+0xbc>
   1a972:	3601      	adds	r6, #1
   1a974:	4661      	mov	r1, ip
   1a976:	e005      	b.n	1a984 <LLF_RND_AdaptiveProportionTest+0xbc>
   1a978:	2601      	movs	r6, #1
   1a97a:	4634      	mov	r4, r6
   1a97c:	468c      	mov	ip, r1
   1a97e:	2701      	movs	r7, #1
   1a980:	e7e6      	b.n	1a950 <LLF_RND_AdaptiveProportionTest+0x88>
   1a982:	463e      	mov	r6, r7
   1a984:	42b2      	cmp	r2, r6
   1a986:	d3cf      	bcc.n	1a928 <LLF_RND_AdaptiveProportionTest+0x60>
   1a988:	3401      	adds	r4, #1
   1a98a:	42ac      	cmp	r4, r5
   1a98c:	d1f6      	bne.n	1a97c <LLF_RND_AdaptiveProportionTest+0xb4>
   1a98e:	e7d4      	b.n	1a93a <LLF_RND_AdaptiveProportionTest+0x72>
   1a990:	4800      	ldr	r0, [pc, #0]	; (1a994 <LLF_RND_AdaptiveProportionTest+0xcc>)
   1a992:	4770      	bx	lr
   1a994:	00f10c37 	.word	0x00f10c37

0001a998 <getTrngSource>:
   1a998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a99c:	b08d      	sub	sp, #52	; 0x34
   1a99e:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   1a9a2:	4607      	mov	r7, r0
   1a9a4:	460c      	mov	r4, r1
   1a9a6:	2d00      	cmp	r5, #0
   1a9a8:	d14c      	bne.n	1aa44 <getTrngSource+0xac>
   1a9aa:	f8d1 a010 	ldr.w	sl, [r1, #16]
   1a9ae:	601e      	str	r6, [r3, #0]
   1a9b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1a9b2:	2100      	movs	r1, #0
   1a9b4:	6019      	str	r1, [r3, #0]
   1a9b6:	2a00      	cmp	r2, #0
   1a9b8:	f000 811f 	beq.w	1abfa <getTrngSource+0x262>
   1a9bc:	4a9b      	ldr	r2, [pc, #620]	; (1ac2c <getTrngSource+0x294>)
   1a9be:	4b9c      	ldr	r3, [pc, #624]	; (1ac30 <getTrngSource+0x298>)
   1a9c0:	6811      	ldr	r1, [r2, #0]
   1a9c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1a9c4:	681b      	ldr	r3, [r3, #0]
   1a9c6:	429a      	cmp	r2, r3
   1a9c8:	d147      	bne.n	1aa5a <getTrngSource+0xc2>
   1a9ca:	290a      	cmp	r1, #10
   1a9cc:	d145      	bne.n	1aa5a <getTrngSource+0xc2>
   1a9ce:	78fb      	ldrb	r3, [r7, #3]
   1a9d0:	9304      	str	r3, [sp, #16]
   1a9d2:	4b98      	ldr	r3, [pc, #608]	; (1ac34 <getTrngSource+0x29c>)
   1a9d4:	fba3 230a 	umull	r2, r3, r3, sl
   1a9d8:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   1a9dc:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   1a9e0:	f106 0208 	add.w	r2, r6, #8
   1a9e4:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   1a9e8:	2304      	movs	r3, #4
   1a9ea:	9203      	str	r2, [sp, #12]
   1a9ec:	9302      	str	r3, [sp, #8]
   1a9ee:	46b8      	mov	r8, r7
   1a9f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1a9f2:	f8c3 a000 	str.w	sl, [r3]
   1a9f6:	f1ba 0f00 	cmp.w	sl, #0
   1a9fa:	f000 80c4 	beq.w	1ab86 <getTrngSource+0x1ee>
   1a9fe:	9e03      	ldr	r6, [sp, #12]
   1aa00:	4655      	mov	r5, sl
   1aa02:	f04f 0900 	mov.w	r9, #0
   1aa06:	f000 ff7b 	bl	1b900 <LLF_RND_TurnOffTrng>
   1aa0a:	2300      	movs	r3, #0
   1aa0c:	9305      	str	r3, [sp, #20]
   1aa0e:	f1b8 0f00 	cmp.w	r8, #0
   1aa12:	f000 80e6 	beq.w	1abe2 <getTrngSource+0x24a>
   1aa16:	2c00      	cmp	r4, #0
   1aa18:	f000 80e3 	beq.w	1abe2 <getTrngSource+0x24a>
   1aa1c:	9b04      	ldr	r3, [sp, #16]
   1aa1e:	2b00      	cmp	r3, #0
   1aa20:	f000 80dd 	beq.w	1abde <getTrngSource+0x246>
   1aa24:	a904      	add	r1, sp, #16
   1aa26:	4620      	mov	r0, r4
   1aa28:	f000 ff5a 	bl	1b8e0 <LLF_RND_GetFastestRosc>
   1aa2c:	b1b8      	cbz	r0, 1aa5e <getTrngSource+0xc6>
   1aa2e:	4b82      	ldr	r3, [pc, #520]	; (1ac38 <getTrngSource+0x2a0>)
   1aa30:	4298      	cmp	r0, r3
   1aa32:	f040 80a8 	bne.w	1ab86 <getTrngSource+0x1ee>
   1aa36:	9002      	str	r0, [sp, #8]
   1aa38:	f000 ff62 	bl	1b900 <LLF_RND_TurnOffTrng>
   1aa3c:	9802      	ldr	r0, [sp, #8]
   1aa3e:	b00d      	add	sp, #52	; 0x34
   1aa40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa44:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1aa48:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   1aa4c:	3001      	adds	r0, #1
   1aa4e:	bf14      	ite	ne
   1aa50:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   1aa54:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   1aa58:	e7a9      	b.n	1a9ae <getTrngSource+0x16>
   1aa5a:	4878      	ldr	r0, [pc, #480]	; (1ac3c <getTrngSource+0x2a4>)
   1aa5c:	e7eb      	b.n	1aa36 <getTrngSource+0x9e>
   1aa5e:	9804      	ldr	r0, [sp, #16]
   1aa60:	4621      	mov	r1, r4
   1aa62:	f000 ff1f 	bl	1b8a4 <LLF_RND_GetRoscSampleCnt>
   1aa66:	2800      	cmp	r0, #0
   1aa68:	d1e1      	bne.n	1aa2e <getTrngSource+0x96>
   1aa6a:	9f04      	ldr	r7, [sp, #16]
   1aa6c:	2f08      	cmp	r7, #8
   1aa6e:	f000 80ba 	beq.w	1abe6 <getTrngSource+0x24e>
   1aa72:	2f04      	cmp	r7, #4
   1aa74:	f000 80b9 	beq.w	1abea <getTrngSource+0x252>
   1aa78:	f1a7 0702 	sub.w	r7, r7, #2
   1aa7c:	fab7 f787 	clz	r7, r7
   1aa80:	097f      	lsrs	r7, r7, #5
   1aa82:	496f      	ldr	r1, [pc, #444]	; (1ac40 <getTrngSource+0x2a8>)
   1aa84:	2301      	movs	r3, #1
   1aa86:	600b      	str	r3, [r1, #0]
   1aa88:	f841 3c84 	str.w	r3, [r1, #-132]
   1aa8c:	4619      	mov	r1, r3
   1aa8e:	4b6c      	ldr	r3, [pc, #432]	; (1ac40 <getTrngSource+0x2a8>)
   1aa90:	4867      	ldr	r0, [pc, #412]	; (1ac30 <getTrngSource+0x298>)
   1aa92:	6019      	str	r1, [r3, #0]
   1aa94:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1aa96:	6003      	str	r3, [r0, #0]
   1aa98:	6800      	ldr	r0, [r0, #0]
   1aa9a:	4283      	cmp	r3, r0
   1aa9c:	d1f7      	bne.n	1aa8e <getTrngSource+0xf6>
   1aa9e:	4a69      	ldr	r2, [pc, #420]	; (1ac44 <getTrngSource+0x2ac>)
   1aaa0:	2300      	movs	r3, #0
   1aaa2:	6013      	str	r3, [r2, #0]
   1aaa4:	f04f 30ff 	mov.w	r0, #4294967295
   1aaa8:	f7ff fd0a 	bl	1a4c0 <CC_HalClearInterruptBit>
   1aaac:	2300      	movs	r3, #0
   1aaae:	4618      	mov	r0, r3
   1aab0:	4b65      	ldr	r3, [pc, #404]	; (1ac48 <getTrngSource+0x2b0>)
   1aab2:	f06f 011b 	mvn.w	r1, #27
   1aab6:	6019      	str	r1, [r3, #0]
   1aab8:	f7ff fd10 	bl	1a4dc <CC_HalMaskInterrupt>
   1aabc:	4963      	ldr	r1, [pc, #396]	; (1ac4c <getTrngSource+0x2b4>)
   1aabe:	4b64      	ldr	r3, [pc, #400]	; (1ac50 <getTrngSource+0x2b8>)
   1aac0:	600f      	str	r7, [r1, #0]
   1aac2:	6818      	ldr	r0, [r3, #0]
   1aac4:	4f5b      	ldr	r7, [pc, #364]	; (1ac34 <getTrngSource+0x29c>)
   1aac6:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1aaca:	f7ff fd07 	bl	1a4dc <CC_HalMaskInterrupt>
   1aace:	4b57      	ldr	r3, [pc, #348]	; (1ac2c <getTrngSource+0x294>)
   1aad0:	4860      	ldr	r0, [pc, #384]	; (1ac54 <getTrngSource+0x2bc>)
   1aad2:	210a      	movs	r1, #10
   1aad4:	6019      	str	r1, [r3, #0]
   1aad6:	6921      	ldr	r1, [r4, #16]
   1aad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1aada:	fba7 c101 	umull	ip, r1, r7, r1
   1aade:	0909      	lsrs	r1, r1, #4
   1aae0:	fb03 f301 	mul.w	r3, r3, r1
   1aae4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1aae8:	03db      	lsls	r3, r3, #15
   1aaea:	099b      	lsrs	r3, r3, #6
   1aaec:	6003      	str	r3, [r0, #0]
   1aaee:	4b55      	ldr	r3, [pc, #340]	; (1ac44 <getTrngSource+0x2ac>)
   1aaf0:	2201      	movs	r2, #1
   1aaf2:	601a      	str	r2, [r3, #0]
   1aaf4:	9904      	ldr	r1, [sp, #16]
   1aaf6:	f8d8 2000 	ldr.w	r2, [r8]
   1aafa:	020b      	lsls	r3, r1, #8
   1aafc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1ab00:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1ab04:	4313      	orrs	r3, r2
   1ab06:	f8c8 3000 	str.w	r3, [r8]
   1ab0a:	a805      	add	r0, sp, #20
   1ab0c:	f000 feba 	bl	1b884 <LLF_RND_WaitRngInterrupt>
   1ab10:	9b05      	ldr	r3, [sp, #20]
   1ab12:	f003 031a 	and.w	r3, r3, #26
   1ab16:	4303      	orrs	r3, r0
   1ab18:	d135      	bne.n	1ab86 <getTrngSource+0x1ee>
   1ab1a:	4a4f      	ldr	r2, [pc, #316]	; (1ac58 <getTrngSource+0x2c0>)
   1ab1c:	4b4f      	ldr	r3, [pc, #316]	; (1ac5c <getTrngSource+0x2c4>)
   1ab1e:	6812      	ldr	r2, [r2, #0]
   1ab20:	9206      	str	r2, [sp, #24]
   1ab22:	681a      	ldr	r2, [r3, #0]
   1ab24:	9207      	str	r2, [sp, #28]
   1ab26:	685a      	ldr	r2, [r3, #4]
   1ab28:	9208      	str	r2, [sp, #32]
   1ab2a:	689a      	ldr	r2, [r3, #8]
   1ab2c:	9209      	str	r2, [sp, #36]	; 0x24
   1ab2e:	68da      	ldr	r2, [r3, #12]
   1ab30:	920a      	str	r2, [sp, #40]	; 0x28
   1ab32:	3310      	adds	r3, #16
   1ab34:	fba7 2705 	umull	r2, r7, r7, r5
   1ab38:	681b      	ldr	r3, [r3, #0]
   1ab3a:	930b      	str	r3, [sp, #44]	; 0x2c
   1ab3c:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   1ab40:	d102      	bne.n	1ab48 <getTrngSource+0x1b0>
   1ab42:	f1bb 0f00 	cmp.w	fp, #0
   1ab46:	d141      	bne.n	1abcc <getTrngSource+0x234>
   1ab48:	2218      	movs	r2, #24
   1ab4a:	4630      	mov	r0, r6
   1ab4c:	eb0d 0102 	add.w	r1, sp, r2
   1ab50:	f000 fe3c 	bl	1b7cc <CC_PalMemCopyPlat>
   1ab54:	3d18      	subs	r5, #24
   1ab56:	3618      	adds	r6, #24
   1ab58:	f109 0901 	add.w	r9, r9, #1
   1ab5c:	2d00      	cmp	r5, #0
   1ab5e:	f47f af52 	bne.w	1aa06 <getTrngSource+0x6e>
   1ab62:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   1ab66:	d85d      	bhi.n	1ac24 <getTrngSource+0x28c>
   1ab68:	9d03      	ldr	r5, [sp, #12]
   1ab6a:	6962      	ldr	r2, [r4, #20]
   1ab6c:	4651      	mov	r1, sl
   1ab6e:	4628      	mov	r0, r5
   1ab70:	f7ff fe7c 	bl	1a86c <LLF_RND_RepetitionCounterTest.part.0>
   1ab74:	2800      	cmp	r0, #0
   1ab76:	d04b      	beq.n	1ac10 <getTrngSource+0x278>
   1ab78:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1ab7a:	2300      	movs	r3, #0
   1ab7c:	6013      	str	r3, [r2, #0]
   1ab7e:	4b2e      	ldr	r3, [pc, #184]	; (1ac38 <getTrngSource+0x2a0>)
   1ab80:	4298      	cmp	r0, r3
   1ab82:	f43f af58 	beq.w	1aa36 <getTrngSource+0x9e>
   1ab86:	9d04      	ldr	r5, [sp, #16]
   1ab88:	2d08      	cmp	r5, #8
   1ab8a:	d034      	beq.n	1abf6 <getTrngSource+0x25e>
   1ab8c:	2200      	movs	r2, #0
   1ab8e:	ab04      	add	r3, sp, #16
   1ab90:	006d      	lsls	r5, r5, #1
   1ab92:	9200      	str	r2, [sp, #0]
   1ab94:	4621      	mov	r1, r4
   1ab96:	4640      	mov	r0, r8
   1ab98:	9504      	str	r5, [sp, #16]
   1ab9a:	f7ff fdbd 	bl	1a718 <startTrngHW>
   1ab9e:	4b30      	ldr	r3, [pc, #192]	; (1ac60 <getTrngSource+0x2c8>)
   1aba0:	4298      	cmp	r0, r3
   1aba2:	d024      	beq.n	1abee <getTrngSource+0x256>
   1aba4:	2800      	cmp	r0, #0
   1aba6:	f47f af46 	bne.w	1aa36 <getTrngSource+0x9e>
   1abaa:	f8d8 2000 	ldr.w	r2, [r8]
   1abae:	0a13      	lsrs	r3, r2, #8
   1abb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1abb4:	4313      	orrs	r3, r2
   1abb6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1abba:	f8c8 3000 	str.w	r3, [r8]
   1abbe:	9b02      	ldr	r3, [sp, #8]
   1abc0:	3b01      	subs	r3, #1
   1abc2:	9302      	str	r3, [sp, #8]
   1abc4:	f47f af14 	bne.w	1a9f0 <getTrngSource+0x58>
   1abc8:	2000      	movs	r0, #0
   1abca:	e734      	b.n	1aa36 <getTrngSource+0x9e>
   1abcc:	4630      	mov	r0, r6
   1abce:	465a      	mov	r2, fp
   1abd0:	a906      	add	r1, sp, #24
   1abd2:	f000 fdfb 	bl	1b7cc <CC_PalMemCopyPlat>
   1abd6:	eba5 050b 	sub.w	r5, r5, fp
   1abda:	445e      	add	r6, fp
   1abdc:	e7bc      	b.n	1ab58 <getTrngSource+0x1c0>
   1abde:	4820      	ldr	r0, [pc, #128]	; (1ac60 <getTrngSource+0x2c8>)
   1abe0:	e725      	b.n	1aa2e <getTrngSource+0x96>
   1abe2:	4820      	ldr	r0, [pc, #128]	; (1ac64 <getTrngSource+0x2cc>)
   1abe4:	e723      	b.n	1aa2e <getTrngSource+0x96>
   1abe6:	2703      	movs	r7, #3
   1abe8:	e74b      	b.n	1aa82 <getTrngSource+0xea>
   1abea:	2702      	movs	r7, #2
   1abec:	e749      	b.n	1aa82 <getTrngSource+0xea>
   1abee:	6a23      	ldr	r3, [r4, #32]
   1abf0:	2b00      	cmp	r3, #0
   1abf2:	f43f af20 	beq.w	1aa36 <getTrngSource+0x9e>
   1abf6:	481c      	ldr	r0, [pc, #112]	; (1ac68 <getTrngSource+0x2d0>)
   1abf8:	e71d      	b.n	1aa36 <getTrngSource+0x9e>
   1abfa:	9500      	str	r5, [sp, #0]
   1abfc:	ab04      	add	r3, sp, #16
   1abfe:	2201      	movs	r2, #1
   1ac00:	4621      	mov	r1, r4
   1ac02:	4638      	mov	r0, r7
   1ac04:	f7ff fd88 	bl	1a718 <startTrngHW>
   1ac08:	2800      	cmp	r0, #0
   1ac0a:	f43f aee2 	beq.w	1a9d2 <getTrngSource+0x3a>
   1ac0e:	e712      	b.n	1aa36 <getTrngSource+0x9e>
   1ac10:	69a2      	ldr	r2, [r4, #24]
   1ac12:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1ac16:	4651      	mov	r1, sl
   1ac18:	4628      	mov	r0, r5
   1ac1a:	f7ff fe55 	bl	1a8c8 <LLF_RND_AdaptiveProportionTest>
   1ac1e:	2800      	cmp	r0, #0
   1ac20:	d1aa      	bne.n	1ab78 <getTrngSource+0x1e0>
   1ac22:	e7d1      	b.n	1abc8 <getTrngSource+0x230>
   1ac24:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1ac26:	601d      	str	r5, [r3, #0]
   1ac28:	e7ad      	b.n	1ab86 <getTrngSource+0x1ee>
   1ac2a:	bf00      	nop
   1ac2c:	5002b138 	.word	0x5002b138
   1ac30:	5002b130 	.word	0x5002b130
   1ac34:	aaaaaaab 	.word	0xaaaaaaab
   1ac38:	00f10c02 	.word	0x00f10c02
   1ac3c:	00f10c30 	.word	0x00f10c30
   1ac40:	5002b1c4 	.word	0x5002b1c4
   1ac44:	5002b12c 	.word	0x5002b12c
   1ac48:	5002b100 	.word	0x5002b100
   1ac4c:	5002b10c 	.word	0x5002b10c
   1ac50:	5002ba04 	.word	0x5002ba04
   1ac54:	5002b1d8 	.word	0x5002b1d8
   1ac58:	5002b114 	.word	0x5002b114
   1ac5c:	5002b118 	.word	0x5002b118
   1ac60:	00f10c31 	.word	0x00f10c31
   1ac64:	00f10c35 	.word	0x00f10c35
   1ac68:	00f10c32 	.word	0x00f10c32

0001ac6c <LLF_RND_GetTrngSource>:
   1ac6c:	b430      	push	{r4, r5}
   1ac6e:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1ac72:	9d04      	ldr	r5, [sp, #16]
   1ac74:	9402      	str	r4, [sp, #8]
   1ac76:	2400      	movs	r4, #0
   1ac78:	e9cd 5403 	strd	r5, r4, [sp, #12]
   1ac7c:	bc30      	pop	{r4, r5}
   1ac7e:	f7ff be8b 	b.w	1a998 <getTrngSource>
   1ac82:	bf00      	nop

0001ac84 <LLF_RND_RunTrngStartupTest>:
   1ac84:	b510      	push	{r4, lr}
   1ac86:	b086      	sub	sp, #24
   1ac88:	ab05      	add	r3, sp, #20
   1ac8a:	2401      	movs	r4, #1
   1ac8c:	e9cd 2401 	strd	r2, r4, [sp, #4]
   1ac90:	9300      	str	r3, [sp, #0]
   1ac92:	2200      	movs	r2, #0
   1ac94:	ab04      	add	r3, sp, #16
   1ac96:	f7ff fe7f 	bl	1a998 <getTrngSource>
   1ac9a:	b006      	add	sp, #24
   1ac9c:	bd10      	pop	{r4, pc}
   1ac9e:	bf00      	nop

0001aca0 <mbedtls_platform_zeroize>:
   1aca0:	b138      	cbz	r0, 1acb2 <mbedtls_platform_zeroize+0x12>
   1aca2:	b131      	cbz	r1, 1acb2 <mbedtls_platform_zeroize+0x12>
   1aca4:	4401      	add	r1, r0
   1aca6:	2200      	movs	r2, #0
   1aca8:	4603      	mov	r3, r0
   1acaa:	3001      	adds	r0, #1
   1acac:	4281      	cmp	r1, r0
   1acae:	701a      	strb	r2, [r3, #0]
   1acb0:	d1fa      	bne.n	1aca8 <mbedtls_platform_zeroize+0x8>
   1acb2:	4770      	bx	lr

0001acb4 <mbedtls_hardware_poll>:
   1acb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1acb6:	b089      	sub	sp, #36	; 0x24
   1acb8:	9205      	str	r2, [sp, #20]
   1acba:	2900      	cmp	r1, #0
   1acbc:	d064      	beq.n	1ad88 <mbedtls_hardware_poll+0xd4>
   1acbe:	461c      	mov	r4, r3
   1acc0:	2b00      	cmp	r3, #0
   1acc2:	d061      	beq.n	1ad88 <mbedtls_hardware_poll+0xd4>
   1acc4:	4615      	mov	r5, r2
   1acc6:	2a00      	cmp	r2, #0
   1acc8:	d05e      	beq.n	1ad88 <mbedtls_hardware_poll+0xd4>
   1acca:	4f31      	ldr	r7, [pc, #196]	; (1ad90 <mbedtls_hardware_poll+0xdc>)
   1accc:	460e      	mov	r6, r1
   1acce:	6838      	ldr	r0, [r7, #0]
   1acd0:	f04f 31ff 	mov.w	r1, #4294967295
   1acd4:	f7ff fc9c 	bl	1a610 <CC_PalMutexLock>
   1acd8:	2800      	cmp	r0, #0
   1acda:	d14b      	bne.n	1ad74 <mbedtls_hardware_poll+0xc0>
   1acdc:	2000      	movs	r0, #0
   1acde:	f7ff fcc7 	bl	1a670 <CC_PalPowerSaveModeSelect>
   1ace2:	2800      	cmp	r0, #0
   1ace4:	d142      	bne.n	1ad6c <mbedtls_hardware_poll+0xb8>
   1ace6:	482b      	ldr	r0, [pc, #172]	; (1ad94 <mbedtls_hardware_poll+0xe0>)
   1ace8:	f000 fd34 	bl	1b754 <RNG_PLAT_SetUserRngParameters>
   1acec:	b1d8      	cbz	r0, 1ad26 <mbedtls_hardware_poll+0x72>
   1acee:	2001      	movs	r0, #1
   1acf0:	f04f 36ff 	mov.w	r6, #4294967295
   1acf4:	f7ff fcbc 	bl	1a670 <CC_PalPowerSaveModeSelect>
   1acf8:	2800      	cmp	r0, #0
   1acfa:	d133      	bne.n	1ad64 <mbedtls_hardware_poll+0xb0>
   1acfc:	4826      	ldr	r0, [pc, #152]	; (1ad98 <mbedtls_hardware_poll+0xe4>)
   1acfe:	f44f 7108 	mov.w	r1, #544	; 0x220
   1ad02:	f7ff ffcd 	bl	1aca0 <mbedtls_platform_zeroize>
   1ad06:	4825      	ldr	r0, [pc, #148]	; (1ad9c <mbedtls_hardware_poll+0xe8>)
   1ad08:	2104      	movs	r1, #4
   1ad0a:	f7ff ffc9 	bl	1aca0 <mbedtls_platform_zeroize>
   1ad0e:	4821      	ldr	r0, [pc, #132]	; (1ad94 <mbedtls_hardware_poll+0xe0>)
   1ad10:	2128      	movs	r1, #40	; 0x28
   1ad12:	f7ff ffc5 	bl	1aca0 <mbedtls_platform_zeroize>
   1ad16:	6838      	ldr	r0, [r7, #0]
   1ad18:	f7ff fc82 	bl	1a620 <CC_PalMutexUnlock>
   1ad1c:	2800      	cmp	r0, #0
   1ad1e:	d12d      	bne.n	1ad7c <mbedtls_hardware_poll+0xc8>
   1ad20:	4630      	mov	r0, r6
   1ad22:	b009      	add	sp, #36	; 0x24
   1ad24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ad26:	491c      	ldr	r1, [pc, #112]	; (1ad98 <mbedtls_hardware_poll+0xe4>)
   1ad28:	9003      	str	r0, [sp, #12]
   1ad2a:	ab07      	add	r3, sp, #28
   1ad2c:	4602      	mov	r2, r0
   1ad2e:	9102      	str	r1, [sp, #8]
   1ad30:	9300      	str	r3, [sp, #0]
   1ad32:	4918      	ldr	r1, [pc, #96]	; (1ad94 <mbedtls_hardware_poll+0xe0>)
   1ad34:	4819      	ldr	r0, [pc, #100]	; (1ad9c <mbedtls_hardware_poll+0xe8>)
   1ad36:	9401      	str	r4, [sp, #4]
   1ad38:	ab05      	add	r3, sp, #20
   1ad3a:	f7ff ff97 	bl	1ac6c <LLF_RND_GetTrngSource>
   1ad3e:	4603      	mov	r3, r0
   1ad40:	2800      	cmp	r0, #0
   1ad42:	d1d4      	bne.n	1acee <mbedtls_hardware_poll+0x3a>
   1ad44:	6822      	ldr	r2, [r4, #0]
   1ad46:	42aa      	cmp	r2, r5
   1ad48:	d3d1      	bcc.n	1acee <mbedtls_hardware_poll+0x3a>
   1ad4a:	9907      	ldr	r1, [sp, #28]
   1ad4c:	4630      	mov	r0, r6
   1ad4e:	3108      	adds	r1, #8
   1ad50:	462a      	mov	r2, r5
   1ad52:	461e      	mov	r6, r3
   1ad54:	f000 fd3a 	bl	1b7cc <CC_PalMemCopyPlat>
   1ad58:	6025      	str	r5, [r4, #0]
   1ad5a:	2001      	movs	r0, #1
   1ad5c:	f7ff fc88 	bl	1a670 <CC_PalPowerSaveModeSelect>
   1ad60:	2800      	cmp	r0, #0
   1ad62:	d0cb      	beq.n	1acfc <mbedtls_hardware_poll+0x48>
   1ad64:	480e      	ldr	r0, [pc, #56]	; (1ada0 <mbedtls_hardware_poll+0xec>)
   1ad66:	f7ff f8bd 	bl	19ee4 <CC_PalAbort>
   1ad6a:	e7c7      	b.n	1acfc <mbedtls_hardware_poll+0x48>
   1ad6c:	480d      	ldr	r0, [pc, #52]	; (1ada4 <mbedtls_hardware_poll+0xf0>)
   1ad6e:	f7ff f8b9 	bl	19ee4 <CC_PalAbort>
   1ad72:	e7b8      	b.n	1ace6 <mbedtls_hardware_poll+0x32>
   1ad74:	480c      	ldr	r0, [pc, #48]	; (1ada8 <mbedtls_hardware_poll+0xf4>)
   1ad76:	f7ff f8b5 	bl	19ee4 <CC_PalAbort>
   1ad7a:	e7af      	b.n	1acdc <mbedtls_hardware_poll+0x28>
   1ad7c:	480b      	ldr	r0, [pc, #44]	; (1adac <mbedtls_hardware_poll+0xf8>)
   1ad7e:	f7ff f8b1 	bl	19ee4 <CC_PalAbort>
   1ad82:	4630      	mov	r0, r6
   1ad84:	b009      	add	sp, #36	; 0x24
   1ad86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ad88:	f04f 36ff 	mov.w	r6, #4294967295
   1ad8c:	e7c8      	b.n	1ad20 <mbedtls_hardware_poll+0x6c>
   1ad8e:	bf00      	nop
   1ad90:	200006e0 	.word	0x200006e0
   1ad94:	20002cb4 	.word	0x20002cb4
   1ad98:	20002a94 	.word	0x20002a94
   1ad9c:	20002a90 	.word	0x20002a90
   1ada0:	0002187c 	.word	0x0002187c
   1ada4:	0002185c 	.word	0x0002185c
   1ada8:	00021844 	.word	0x00021844
   1adac:	000218d4 	.word	0x000218d4

0001adb0 <cc_mbedtls_sha256_init>:
   1adb0:	b510      	push	{r4, lr}
   1adb2:	4604      	mov	r4, r0
   1adb4:	b128      	cbz	r0, 1adc2 <cc_mbedtls_sha256_init+0x12>
   1adb6:	4620      	mov	r0, r4
   1adb8:	21f0      	movs	r1, #240	; 0xf0
   1adba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1adbe:	f000 bd09 	b.w	1b7d4 <CC_PalMemSetZeroPlat>
   1adc2:	4804      	ldr	r0, [pc, #16]	; (1add4 <cc_mbedtls_sha256_init+0x24>)
   1adc4:	f7ff f88e 	bl	19ee4 <CC_PalAbort>
   1adc8:	4620      	mov	r0, r4
   1adca:	21f0      	movs	r1, #240	; 0xf0
   1adcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1add0:	f000 bd00 	b.w	1b7d4 <CC_PalMemSetZeroPlat>
   1add4:	000218ec 	.word	0x000218ec

0001add8 <cc_mbedtls_sha256_free>:
   1add8:	b110      	cbz	r0, 1ade0 <cc_mbedtls_sha256_free+0x8>
   1adda:	21f0      	movs	r1, #240	; 0xf0
   1addc:	f7ff bf60 	b.w	1aca0 <mbedtls_platform_zeroize>
   1ade0:	4770      	bx	lr
   1ade2:	bf00      	nop

0001ade4 <cc_mbedtls_sha256_starts_ret>:
   1ade4:	b508      	push	{r3, lr}
   1ade6:	b161      	cbz	r1, 1ae02 <cc_mbedtls_sha256_starts_ret+0x1e>
   1ade8:	2901      	cmp	r1, #1
   1adea:	d107      	bne.n	1adfc <cc_mbedtls_sha256_starts_ret+0x18>
   1adec:	2102      	movs	r1, #2
   1adee:	f000 f839 	bl	1ae64 <mbedtls_sha_starts_internal>
   1adf2:	2800      	cmp	r0, #0
   1adf4:	bf18      	it	ne
   1adf6:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1adfa:	bd08      	pop	{r3, pc}
   1adfc:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1ae00:	bd08      	pop	{r3, pc}
   1ae02:	2101      	movs	r1, #1
   1ae04:	f000 f82e 	bl	1ae64 <mbedtls_sha_starts_internal>
   1ae08:	e7f3      	b.n	1adf2 <cc_mbedtls_sha256_starts_ret+0xe>
   1ae0a:	bf00      	nop

0001ae0c <cc_mbedtls_sha256_update_ret>:
   1ae0c:	b508      	push	{r3, lr}
   1ae0e:	f000 f86b 	bl	1aee8 <mbedtls_sha_update_internal>
   1ae12:	2800      	cmp	r0, #0
   1ae14:	bf18      	it	ne
   1ae16:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1ae1a:	bd08      	pop	{r3, pc}

0001ae1c <cc_mbedtls_sha256_finish_ret>:
   1ae1c:	b570      	push	{r4, r5, r6, lr}
   1ae1e:	b1e8      	cbz	r0, 1ae5c <cc_mbedtls_sha256_finish_ret+0x40>
   1ae20:	460e      	mov	r6, r1
   1ae22:	b1d9      	cbz	r1, 1ae5c <cc_mbedtls_sha256_finish_ret+0x40>
   1ae24:	4604      	mov	r4, r0
   1ae26:	f000 f831 	bl	1ae8c <mbedtls_sha_finish_internal>
   1ae2a:	4605      	mov	r5, r0
   1ae2c:	b9b0      	cbnz	r0, 1ae5c <cc_mbedtls_sha256_finish_ret+0x40>
   1ae2e:	6823      	ldr	r3, [r4, #0]
   1ae30:	2b01      	cmp	r3, #1
   1ae32:	d00b      	beq.n	1ae4c <cc_mbedtls_sha256_finish_ret+0x30>
   1ae34:	2b02      	cmp	r3, #2
   1ae36:	d001      	beq.n	1ae3c <cc_mbedtls_sha256_finish_ret+0x20>
   1ae38:	4628      	mov	r0, r5
   1ae3a:	bd70      	pop	{r4, r5, r6, pc}
   1ae3c:	f104 0108 	add.w	r1, r4, #8
   1ae40:	4630      	mov	r0, r6
   1ae42:	221c      	movs	r2, #28
   1ae44:	f000 fcc2 	bl	1b7cc <CC_PalMemCopyPlat>
   1ae48:	4628      	mov	r0, r5
   1ae4a:	bd70      	pop	{r4, r5, r6, pc}
   1ae4c:	f104 0108 	add.w	r1, r4, #8
   1ae50:	4630      	mov	r0, r6
   1ae52:	2220      	movs	r2, #32
   1ae54:	f000 fcba 	bl	1b7cc <CC_PalMemCopyPlat>
   1ae58:	4628      	mov	r0, r5
   1ae5a:	bd70      	pop	{r4, r5, r6, pc}
   1ae5c:	f06f 0536 	mvn.w	r5, #54	; 0x36
   1ae60:	e7ea      	b.n	1ae38 <cc_mbedtls_sha256_finish_ret+0x1c>
   1ae62:	bf00      	nop

0001ae64 <mbedtls_sha_starts_internal>:
   1ae64:	b178      	cbz	r0, 1ae86 <mbedtls_sha_starts_internal+0x22>
   1ae66:	b538      	push	{r3, r4, r5, lr}
   1ae68:	4604      	mov	r4, r0
   1ae6a:	460d      	mov	r5, r1
   1ae6c:	21f0      	movs	r1, #240	; 0xf0
   1ae6e:	f000 fcb1 	bl	1b7d4 <CC_PalMemSetZeroPlat>
   1ae72:	2340      	movs	r3, #64	; 0x40
   1ae74:	6025      	str	r5, [r4, #0]
   1ae76:	65e3      	str	r3, [r4, #92]	; 0x5c
   1ae78:	4620      	mov	r0, r4
   1ae7a:	f000 fd83 	bl	1b984 <InitHashDrv>
   1ae7e:	3800      	subs	r0, #0
   1ae80:	bf18      	it	ne
   1ae82:	2001      	movne	r0, #1
   1ae84:	bd38      	pop	{r3, r4, r5, pc}
   1ae86:	2001      	movs	r0, #1
   1ae88:	4770      	bx	lr
   1ae8a:	bf00      	nop

0001ae8c <mbedtls_sha_finish_internal>:
   1ae8c:	b570      	push	{r4, r5, r6, lr}
   1ae8e:	6e05      	ldr	r5, [r0, #96]	; 0x60
   1ae90:	b0a4      	sub	sp, #144	; 0x90
   1ae92:	4604      	mov	r4, r0
   1ae94:	ae04      	add	r6, sp, #16
   1ae96:	b9e5      	cbnz	r5, 1aed2 <mbedtls_sha_finish_internal+0x46>
   1ae98:	2201      	movs	r2, #1
   1ae9a:	2300      	movs	r3, #0
   1ae9c:	6062      	str	r2, [r4, #4]
   1ae9e:	4630      	mov	r0, r6
   1aea0:	e9cd 3300 	strd	r3, r3, [sp]
   1aea4:	aa02      	add	r2, sp, #8
   1aea6:	4629      	mov	r1, r5
   1aea8:	f000 fd38 	bl	1b91c <SetDataBuffersInfo>
   1aeac:	b110      	cbz	r0, 1aeb4 <mbedtls_sha_finish_internal+0x28>
   1aeae:	2001      	movs	r0, #1
   1aeb0:	b024      	add	sp, #144	; 0x90
   1aeb2:	bd70      	pop	{r4, r5, r6, pc}
   1aeb4:	462a      	mov	r2, r5
   1aeb6:	a902      	add	r1, sp, #8
   1aeb8:	4620      	mov	r0, r4
   1aeba:	f000 fd8d 	bl	1b9d8 <ProcessHashDrv>
   1aebe:	2800      	cmp	r0, #0
   1aec0:	d1f5      	bne.n	1aeae <mbedtls_sha_finish_internal+0x22>
   1aec2:	4620      	mov	r0, r4
   1aec4:	f000 feb6 	bl	1bc34 <FinishHashDrv>
   1aec8:	2800      	cmp	r0, #0
   1aeca:	d1f0      	bne.n	1aeae <mbedtls_sha_finish_internal+0x22>
   1aecc:	6620      	str	r0, [r4, #96]	; 0x60
   1aece:	b024      	add	sp, #144	; 0x90
   1aed0:	bd70      	pop	{r4, r5, r6, pc}
   1aed2:	2d80      	cmp	r5, #128	; 0x80
   1aed4:	462a      	mov	r2, r5
   1aed6:	4630      	mov	r0, r6
   1aed8:	bf28      	it	cs
   1aeda:	2280      	movcs	r2, #128	; 0x80
   1aedc:	f104 0164 	add.w	r1, r4, #100	; 0x64
   1aee0:	f000 fc74 	bl	1b7cc <CC_PalMemCopyPlat>
   1aee4:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1aee6:	e7d7      	b.n	1ae98 <mbedtls_sha_finish_internal+0xc>

0001aee8 <mbedtls_sha_update_internal>:
   1aee8:	2800      	cmp	r0, #0
   1aeea:	d054      	beq.n	1af96 <mbedtls_sha_update_internal+0xae>
   1aeec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aeee:	4614      	mov	r4, r2
   1aef0:	b0a5      	sub	sp, #148	; 0x94
   1aef2:	b1b2      	cbz	r2, 1af22 <mbedtls_sha_update_internal+0x3a>
   1aef4:	460e      	mov	r6, r1
   1aef6:	b351      	cbz	r1, 1af4e <mbedtls_sha_update_internal+0x66>
   1aef8:	4605      	mov	r5, r0
   1aefa:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   1aefe:	1a1a      	subs	r2, r3, r0
   1af00:	fbb2 f7f3 	udiv	r7, r2, r3
   1af04:	fb03 2717 	mls	r7, r3, r7, r2
   1af08:	42a7      	cmp	r7, r4
   1af0a:	bf28      	it	cs
   1af0c:	4627      	movcs	r7, r4
   1af0e:	2f00      	cmp	r7, #0
   1af10:	d143      	bne.n	1af9a <mbedtls_sha_update_internal+0xb2>
   1af12:	4283      	cmp	r3, r0
   1af14:	d008      	beq.n	1af28 <mbedtls_sha_update_internal+0x40>
   1af16:	fbb4 f7f3 	udiv	r7, r4, r3
   1af1a:	fb03 f707 	mul.w	r7, r3, r7
   1af1e:	b9cf      	cbnz	r7, 1af54 <mbedtls_sha_update_internal+0x6c>
   1af20:	bb6c      	cbnz	r4, 1af7e <mbedtls_sha_update_internal+0x96>
   1af22:	2000      	movs	r0, #0
   1af24:	b025      	add	sp, #148	; 0x94
   1af26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1af28:	2b80      	cmp	r3, #128	; 0x80
   1af2a:	bf28      	it	cs
   1af2c:	2380      	movcs	r3, #128	; 0x80
   1af2e:	461a      	mov	r2, r3
   1af30:	f105 0164 	add.w	r1, r5, #100	; 0x64
   1af34:	a804      	add	r0, sp, #16
   1af36:	f000 fc49 	bl	1b7cc <CC_PalMemCopyPlat>
   1af3a:	2300      	movs	r3, #0
   1af3c:	e9cd 3300 	strd	r3, r3, [sp]
   1af40:	a804      	add	r0, sp, #16
   1af42:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   1af44:	aa02      	add	r2, sp, #8
   1af46:	f000 fce9 	bl	1b91c <SetDataBuffersInfo>
   1af4a:	2800      	cmp	r0, #0
   1af4c:	d032      	beq.n	1afb4 <mbedtls_sha_update_internal+0xcc>
   1af4e:	2001      	movs	r0, #1
   1af50:	b025      	add	sp, #148	; 0x94
   1af52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1af54:	2300      	movs	r3, #0
   1af56:	e9cd 3300 	strd	r3, r3, [sp]
   1af5a:	aa02      	add	r2, sp, #8
   1af5c:	4639      	mov	r1, r7
   1af5e:	4630      	mov	r0, r6
   1af60:	f000 fcdc 	bl	1b91c <SetDataBuffersInfo>
   1af64:	2800      	cmp	r0, #0
   1af66:	d1f2      	bne.n	1af4e <mbedtls_sha_update_internal+0x66>
   1af68:	a902      	add	r1, sp, #8
   1af6a:	463a      	mov	r2, r7
   1af6c:	4628      	mov	r0, r5
   1af6e:	f000 fd33 	bl	1b9d8 <ProcessHashDrv>
   1af72:	2800      	cmp	r0, #0
   1af74:	d1eb      	bne.n	1af4e <mbedtls_sha_update_internal+0x66>
   1af76:	1be4      	subs	r4, r4, r7
   1af78:	443e      	add	r6, r7
   1af7a:	2c00      	cmp	r4, #0
   1af7c:	d0d1      	beq.n	1af22 <mbedtls_sha_update_internal+0x3a>
   1af7e:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1af80:	3019      	adds	r0, #25
   1af82:	4622      	mov	r2, r4
   1af84:	4631      	mov	r1, r6
   1af86:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1af8a:	f000 fc1f 	bl	1b7cc <CC_PalMemCopyPlat>
   1af8e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   1af90:	4422      	add	r2, r4
   1af92:	662a      	str	r2, [r5, #96]	; 0x60
   1af94:	e7c5      	b.n	1af22 <mbedtls_sha_update_internal+0x3a>
   1af96:	2001      	movs	r0, #1
   1af98:	4770      	bx	lr
   1af9a:	f105 0364 	add.w	r3, r5, #100	; 0x64
   1af9e:	4418      	add	r0, r3
   1afa0:	463a      	mov	r2, r7
   1afa2:	f000 fc13 	bl	1b7cc <CC_PalMemCopyPlat>
   1afa6:	e9d5 3017 	ldrd	r3, r0, [r5, #92]	; 0x5c
   1afaa:	4438      	add	r0, r7
   1afac:	443e      	add	r6, r7
   1afae:	1be4      	subs	r4, r4, r7
   1afb0:	6628      	str	r0, [r5, #96]	; 0x60
   1afb2:	e7ae      	b.n	1af12 <mbedtls_sha_update_internal+0x2a>
   1afb4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1afb6:	a902      	add	r1, sp, #8
   1afb8:	4628      	mov	r0, r5
   1afba:	f000 fd0d 	bl	1b9d8 <ProcessHashDrv>
   1afbe:	2800      	cmp	r0, #0
   1afc0:	d1c5      	bne.n	1af4e <mbedtls_sha_update_internal+0x66>
   1afc2:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1afc4:	6628      	str	r0, [r5, #96]	; 0x60
   1afc6:	e7a6      	b.n	1af16 <mbedtls_sha_update_internal+0x2e>

0001afc8 <block_cipher_df>:
   1afc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1afcc:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   1afd0:	b0b1      	sub	sp, #196	; 0xc4
   1afd2:	f200 812e 	bhi.w	1b232 <block_cipher_df+0x26a>
   1afd6:	f8df 926c 	ldr.w	r9, [pc, #620]	; 1b244 <block_cipher_df+0x27c>
   1afda:	4614      	mov	r4, r2
   1afdc:	460d      	mov	r5, r1
   1afde:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1afe2:	2100      	movs	r1, #0
   1afe4:	4682      	mov	sl, r0
   1afe6:	4648      	mov	r0, r9
   1afe8:	f005 fd82 	bl	20af0 <memset>
   1afec:	a813      	add	r0, sp, #76	; 0x4c
   1afee:	f000 fe63 	bl	1bcb8 <cc_mbedtls_aes_init>
   1aff2:	2600      	movs	r6, #0
   1aff4:	4629      	mov	r1, r5
   1aff6:	2320      	movs	r3, #32
   1aff8:	ba65      	rev16	r5, r4
   1affa:	4622      	mov	r2, r4
   1affc:	f109 0018 	add.w	r0, r9, #24
   1b000:	f8a9 5012 	strh.w	r5, [r9, #18]
   1b004:	f889 3017 	strb.w	r3, [r9, #23]
   1b008:	f8a9 6010 	strh.w	r6, [r9, #16]
   1b00c:	f005 fd35 	bl	20a7a <memcpy>
   1b010:	eb09 0304 	add.w	r3, r9, r4
   1b014:	2280      	movs	r2, #128	; 0x80
   1b016:	4d88      	ldr	r5, [pc, #544]	; (1b238 <block_cipher_df+0x270>)
   1b018:	761a      	strb	r2, [r3, #24]
   1b01a:	4b88      	ldr	r3, [pc, #544]	; (1b23c <block_cipher_df+0x274>)
   1b01c:	9503      	str	r5, [sp, #12]
   1b01e:	9304      	str	r3, [sp, #16]
   1b020:	a813      	add	r0, sp, #76	; 0x4c
   1b022:	f103 3308 	add.w	r3, r3, #134744072	; 0x8080808
   1b026:	a903      	add	r1, sp, #12
   1b028:	f105 3508 	add.w	r5, r5, #134744072	; 0x8080808
   1b02c:	e9cd 5305 	strd	r5, r3, [sp, #20]
   1b030:	f000 fe58 	bl	1bce4 <cc_mbedtls_aes_setkey_enc>
   1b034:	4680      	mov	r8, r0
   1b036:	2800      	cmp	r0, #0
   1b038:	f040 80da 	bne.w	1b1f0 <block_cipher_df+0x228>
   1b03c:	f104 0319 	add.w	r3, r4, #25
   1b040:	9301      	str	r3, [sp, #4]
   1b042:	af07      	add	r7, sp, #28
   1b044:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   1b048:	2210      	movs	r2, #16
   1b04a:	2100      	movs	r1, #0
   1b04c:	4638      	mov	r0, r7
   1b04e:	f005 fd4f 	bl	20af0 <memset>
   1b052:	4c7b      	ldr	r4, [pc, #492]	; (1b240 <block_cipher_df+0x278>)
   1b054:	9d01      	ldr	r5, [sp, #4]
   1b056:	f89d 601d 	ldrb.w	r6, [sp, #29]
   1b05a:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   1b05e:	f89d e01c 	ldrb.w	lr, [sp, #28]
   1b062:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   1b066:	f89d c01f 	ldrb.w	ip, [sp, #31]
   1b06a:	f89d 001e 	ldrb.w	r0, [sp, #30]
   1b06e:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   1b072:	404e      	eors	r6, r1
   1b074:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
   1b078:	f88d 601d 	strb.w	r6, [sp, #29]
   1b07c:	ea8e 0303 	eor.w	r3, lr, r3
   1b080:	4050      	eors	r0, r2
   1b082:	ea8c 0101 	eor.w	r1, ip, r1
   1b086:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1b08a:	f88d 301c 	strb.w	r3, [sp, #28]
   1b08e:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
   1b092:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   1b096:	f814 6c0a 	ldrb.w	r6, [r4, #-10]
   1b09a:	f88d 001e 	strb.w	r0, [sp, #30]
   1b09e:	f88d 101f 	strb.w	r1, [sp, #31]
   1b0a2:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   1b0a6:	f814 1c09 	ldrb.w	r1, [r4, #-9]
   1b0aa:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
   1b0ae:	405a      	eors	r2, r3
   1b0b0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1b0b4:	f88d 2020 	strb.w	r2, [sp, #32]
   1b0b8:	ea8c 0606 	eor.w	r6, ip, r6
   1b0bc:	4048      	eors	r0, r1
   1b0be:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   1b0c2:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   1b0c6:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
   1b0ca:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
   1b0ce:	ea8e 0303 	eor.w	r3, lr, r3
   1b0d2:	f814 6c06 	ldrb.w	r6, [r4, #-6]
   1b0d6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
   1b0da:	ea8c 0101 	eor.w	r1, ip, r1
   1b0de:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1b0e2:	f814 cc07 	ldrb.w	ip, [r4, #-7]
   1b0e6:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   1b0ea:	ea82 020c 	eor.w	r2, r2, ip
   1b0ee:	4073      	eors	r3, r6
   1b0f0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   1b0f4:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   1b0f8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   1b0fc:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
   1b100:	f89d e027 	ldrb.w	lr, [sp, #39]	; 0x27
   1b104:	f814 2c05 	ldrb.w	r2, [r4, #-5]
   1b108:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   1b10c:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   1b110:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1b114:	f89d c02a 	ldrb.w	ip, [sp, #42]	; 0x2a
   1b118:	ea8e 0202 	eor.w	r2, lr, r2
   1b11c:	4041      	eors	r1, r0
   1b11e:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   1b122:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   1b126:	4073      	eors	r3, r6
   1b128:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   1b12c:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
   1b130:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1b134:	ea8c 0000 	eor.w	r0, ip, r0
   1b138:	4056      	eors	r6, r2
   1b13a:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
   1b13e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
   1b142:	463b      	mov	r3, r7
   1b144:	463a      	mov	r2, r7
   1b146:	2101      	movs	r1, #1
   1b148:	a813      	add	r0, sp, #76	; 0x4c
   1b14a:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
   1b14e:	f000 fde3 	bl	1bd18 <cc_mbedtls_aes_crypt_ecb>
   1b152:	2d10      	cmp	r5, #16
   1b154:	bf94      	ite	ls
   1b156:	1b6d      	subls	r5, r5, r5
   1b158:	3d10      	subhi	r5, #16
   1b15a:	2800      	cmp	r0, #0
   1b15c:	d167      	bne.n	1b22e <block_cipher_df+0x266>
   1b15e:	3410      	adds	r4, #16
   1b160:	2d00      	cmp	r5, #0
   1b162:	f47f af78 	bne.w	1b056 <block_cipher_df+0x8e>
   1b166:	eb0b 0008 	add.w	r0, fp, r8
   1b16a:	2210      	movs	r2, #16
   1b16c:	4639      	mov	r1, r7
   1b16e:	f005 fc84 	bl	20a7a <memcpy>
   1b172:	f899 3003 	ldrb.w	r3, [r9, #3]
   1b176:	f108 0810 	add.w	r8, r8, #16
   1b17a:	3301      	adds	r3, #1
   1b17c:	f1b8 0f20 	cmp.w	r8, #32
   1b180:	f889 3003 	strb.w	r3, [r9, #3]
   1b184:	f47f af60 	bne.w	1b048 <block_cipher_df+0x80>
   1b188:	2280      	movs	r2, #128	; 0x80
   1b18a:	4659      	mov	r1, fp
   1b18c:	a813      	add	r0, sp, #76	; 0x4c
   1b18e:	f000 fda9 	bl	1bce4 <cc_mbedtls_aes_setkey_enc>
   1b192:	4680      	mov	r8, r0
   1b194:	bb78      	cbnz	r0, 1b1f6 <block_cipher_df+0x22e>
   1b196:	f10a 0520 	add.w	r5, sl, #32
   1b19a:	4654      	mov	r4, sl
   1b19c:	ab0f      	add	r3, sp, #60	; 0x3c
   1b19e:	461a      	mov	r2, r3
   1b1a0:	2101      	movs	r1, #1
   1b1a2:	a813      	add	r0, sp, #76	; 0x4c
   1b1a4:	f000 fdb8 	bl	1bd18 <cc_mbedtls_aes_crypt_ecb>
   1b1a8:	2210      	movs	r2, #16
   1b1aa:	4680      	mov	r8, r0
   1b1ac:	a90f      	add	r1, sp, #60	; 0x3c
   1b1ae:	4620      	mov	r0, r4
   1b1b0:	4414      	add	r4, r2
   1b1b2:	f1b8 0f00 	cmp.w	r8, #0
   1b1b6:	d11e      	bne.n	1b1f6 <block_cipher_df+0x22e>
   1b1b8:	f005 fc5f 	bl	20a7a <memcpy>
   1b1bc:	42ac      	cmp	r4, r5
   1b1be:	d1ed      	bne.n	1b19c <block_cipher_df+0x1d4>
   1b1c0:	a813      	add	r0, sp, #76	; 0x4c
   1b1c2:	f000 fd89 	bl	1bcd8 <cc_mbedtls_aes_free>
   1b1c6:	481f      	ldr	r0, [pc, #124]	; (1b244 <block_cipher_df+0x27c>)
   1b1c8:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1b1cc:	f7ff fd68 	bl	1aca0 <mbedtls_platform_zeroize>
   1b1d0:	4658      	mov	r0, fp
   1b1d2:	2120      	movs	r1, #32
   1b1d4:	f7ff fd64 	bl	1aca0 <mbedtls_platform_zeroize>
   1b1d8:	a803      	add	r0, sp, #12
   1b1da:	2110      	movs	r1, #16
   1b1dc:	f7ff fd60 	bl	1aca0 <mbedtls_platform_zeroize>
   1b1e0:	4638      	mov	r0, r7
   1b1e2:	2110      	movs	r1, #16
   1b1e4:	f7ff fd5c 	bl	1aca0 <mbedtls_platform_zeroize>
   1b1e8:	4640      	mov	r0, r8
   1b1ea:	b031      	add	sp, #196	; 0xc4
   1b1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b1f0:	af07      	add	r7, sp, #28
   1b1f2:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   1b1f6:	a813      	add	r0, sp, #76	; 0x4c
   1b1f8:	f000 fd6e 	bl	1bcd8 <cc_mbedtls_aes_free>
   1b1fc:	4811      	ldr	r0, [pc, #68]	; (1b244 <block_cipher_df+0x27c>)
   1b1fe:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1b202:	f7ff fd4d 	bl	1aca0 <mbedtls_platform_zeroize>
   1b206:	4658      	mov	r0, fp
   1b208:	2120      	movs	r1, #32
   1b20a:	f7ff fd49 	bl	1aca0 <mbedtls_platform_zeroize>
   1b20e:	a803      	add	r0, sp, #12
   1b210:	2110      	movs	r1, #16
   1b212:	f7ff fd45 	bl	1aca0 <mbedtls_platform_zeroize>
   1b216:	4638      	mov	r0, r7
   1b218:	2110      	movs	r1, #16
   1b21a:	f7ff fd41 	bl	1aca0 <mbedtls_platform_zeroize>
   1b21e:	4650      	mov	r0, sl
   1b220:	2120      	movs	r1, #32
   1b222:	f7ff fd3d 	bl	1aca0 <mbedtls_platform_zeroize>
   1b226:	4640      	mov	r0, r8
   1b228:	b031      	add	sp, #196	; 0xc4
   1b22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b22e:	4680      	mov	r8, r0
   1b230:	e7e1      	b.n	1b1f6 <block_cipher_df+0x22e>
   1b232:	f06f 0837 	mvn.w	r8, #55	; 0x37
   1b236:	e7f6      	b.n	1b226 <block_cipher_df+0x25e>
   1b238:	03020100 	.word	0x03020100
   1b23c:	07060504 	.word	0x07060504
   1b240:	20002cec 	.word	0x20002cec
   1b244:	20002cdc 	.word	0x20002cdc

0001b248 <ctr_drbg_update_internal>:
   1b248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b24c:	b088      	sub	sp, #32
   1b24e:	4604      	mov	r4, r0
   1b250:	2220      	movs	r2, #32
   1b252:	460d      	mov	r5, r1
   1b254:	4668      	mov	r0, sp
   1b256:	2100      	movs	r1, #0
   1b258:	eb04 0802 	add.w	r8, r4, r2
   1b25c:	f005 fc48 	bl	20af0 <memset>
   1b260:	466e      	mov	r6, sp
   1b262:	7be2      	ldrb	r2, [r4, #15]
   1b264:	3201      	adds	r2, #1
   1b266:	b2d2      	uxtb	r2, r2
   1b268:	73e2      	strb	r2, [r4, #15]
   1b26a:	2a00      	cmp	r2, #0
   1b26c:	d14d      	bne.n	1b30a <ctr_drbg_update_internal+0xc2>
   1b26e:	7ba2      	ldrb	r2, [r4, #14]
   1b270:	3201      	adds	r2, #1
   1b272:	b2d2      	uxtb	r2, r2
   1b274:	73a2      	strb	r2, [r4, #14]
   1b276:	2a00      	cmp	r2, #0
   1b278:	d147      	bne.n	1b30a <ctr_drbg_update_internal+0xc2>
   1b27a:	7b63      	ldrb	r3, [r4, #13]
   1b27c:	3301      	adds	r3, #1
   1b27e:	b2db      	uxtb	r3, r3
   1b280:	7363      	strb	r3, [r4, #13]
   1b282:	2b00      	cmp	r3, #0
   1b284:	d141      	bne.n	1b30a <ctr_drbg_update_internal+0xc2>
   1b286:	7b23      	ldrb	r3, [r4, #12]
   1b288:	3301      	adds	r3, #1
   1b28a:	b2db      	uxtb	r3, r3
   1b28c:	7323      	strb	r3, [r4, #12]
   1b28e:	2b00      	cmp	r3, #0
   1b290:	d13b      	bne.n	1b30a <ctr_drbg_update_internal+0xc2>
   1b292:	7ae3      	ldrb	r3, [r4, #11]
   1b294:	3301      	adds	r3, #1
   1b296:	b2db      	uxtb	r3, r3
   1b298:	72e3      	strb	r3, [r4, #11]
   1b29a:	2b00      	cmp	r3, #0
   1b29c:	d135      	bne.n	1b30a <ctr_drbg_update_internal+0xc2>
   1b29e:	7aa3      	ldrb	r3, [r4, #10]
   1b2a0:	3301      	adds	r3, #1
   1b2a2:	b2db      	uxtb	r3, r3
   1b2a4:	72a3      	strb	r3, [r4, #10]
   1b2a6:	2b00      	cmp	r3, #0
   1b2a8:	d12f      	bne.n	1b30a <ctr_drbg_update_internal+0xc2>
   1b2aa:	7a63      	ldrb	r3, [r4, #9]
   1b2ac:	3301      	adds	r3, #1
   1b2ae:	b2db      	uxtb	r3, r3
   1b2b0:	7263      	strb	r3, [r4, #9]
   1b2b2:	bb53      	cbnz	r3, 1b30a <ctr_drbg_update_internal+0xc2>
   1b2b4:	7a23      	ldrb	r3, [r4, #8]
   1b2b6:	3301      	adds	r3, #1
   1b2b8:	b2db      	uxtb	r3, r3
   1b2ba:	7223      	strb	r3, [r4, #8]
   1b2bc:	bb2b      	cbnz	r3, 1b30a <ctr_drbg_update_internal+0xc2>
   1b2be:	79e3      	ldrb	r3, [r4, #7]
   1b2c0:	3301      	adds	r3, #1
   1b2c2:	b2db      	uxtb	r3, r3
   1b2c4:	71e3      	strb	r3, [r4, #7]
   1b2c6:	bb03      	cbnz	r3, 1b30a <ctr_drbg_update_internal+0xc2>
   1b2c8:	79a3      	ldrb	r3, [r4, #6]
   1b2ca:	3301      	adds	r3, #1
   1b2cc:	b2db      	uxtb	r3, r3
   1b2ce:	71a3      	strb	r3, [r4, #6]
   1b2d0:	b9db      	cbnz	r3, 1b30a <ctr_drbg_update_internal+0xc2>
   1b2d2:	7963      	ldrb	r3, [r4, #5]
   1b2d4:	3301      	adds	r3, #1
   1b2d6:	b2db      	uxtb	r3, r3
   1b2d8:	7163      	strb	r3, [r4, #5]
   1b2da:	b9b3      	cbnz	r3, 1b30a <ctr_drbg_update_internal+0xc2>
   1b2dc:	7923      	ldrb	r3, [r4, #4]
   1b2de:	3301      	adds	r3, #1
   1b2e0:	b2db      	uxtb	r3, r3
   1b2e2:	7123      	strb	r3, [r4, #4]
   1b2e4:	b98b      	cbnz	r3, 1b30a <ctr_drbg_update_internal+0xc2>
   1b2e6:	78e3      	ldrb	r3, [r4, #3]
   1b2e8:	3301      	adds	r3, #1
   1b2ea:	b2db      	uxtb	r3, r3
   1b2ec:	70e3      	strb	r3, [r4, #3]
   1b2ee:	b963      	cbnz	r3, 1b30a <ctr_drbg_update_internal+0xc2>
   1b2f0:	78a3      	ldrb	r3, [r4, #2]
   1b2f2:	3301      	adds	r3, #1
   1b2f4:	b2db      	uxtb	r3, r3
   1b2f6:	70a3      	strb	r3, [r4, #2]
   1b2f8:	b93b      	cbnz	r3, 1b30a <ctr_drbg_update_internal+0xc2>
   1b2fa:	7863      	ldrb	r3, [r4, #1]
   1b2fc:	3301      	adds	r3, #1
   1b2fe:	b2db      	uxtb	r3, r3
   1b300:	7063      	strb	r3, [r4, #1]
   1b302:	b913      	cbnz	r3, 1b30a <ctr_drbg_update_internal+0xc2>
   1b304:	7823      	ldrb	r3, [r4, #0]
   1b306:	3301      	adds	r3, #1
   1b308:	7023      	strb	r3, [r4, #0]
   1b30a:	4633      	mov	r3, r6
   1b30c:	4622      	mov	r2, r4
   1b30e:	2101      	movs	r1, #1
   1b310:	4640      	mov	r0, r8
   1b312:	f000 fd01 	bl	1bd18 <cc_mbedtls_aes_crypt_ecb>
   1b316:	4607      	mov	r7, r0
   1b318:	2800      	cmp	r0, #0
   1b31a:	d12b      	bne.n	1b374 <ctr_drbg_update_internal+0x12c>
   1b31c:	3610      	adds	r6, #16
   1b31e:	ab08      	add	r3, sp, #32
   1b320:	429e      	cmp	r6, r3
   1b322:	d19e      	bne.n	1b262 <ctr_drbg_update_internal+0x1a>
   1b324:	9e01      	ldr	r6, [sp, #4]
   1b326:	686a      	ldr	r2, [r5, #4]
   1b328:	9f00      	ldr	r7, [sp, #0]
   1b32a:	6829      	ldr	r1, [r5, #0]
   1b32c:	68ab      	ldr	r3, [r5, #8]
   1b32e:	4072      	eors	r2, r6
   1b330:	9e02      	ldr	r6, [sp, #8]
   1b332:	9201      	str	r2, [sp, #4]
   1b334:	4079      	eors	r1, r7
   1b336:	4073      	eors	r3, r6
   1b338:	9100      	str	r1, [sp, #0]
   1b33a:	9e03      	ldr	r6, [sp, #12]
   1b33c:	68e9      	ldr	r1, [r5, #12]
   1b33e:	692a      	ldr	r2, [r5, #16]
   1b340:	9302      	str	r3, [sp, #8]
   1b342:	4071      	eors	r1, r6
   1b344:	9e04      	ldr	r6, [sp, #16]
   1b346:	696b      	ldr	r3, [r5, #20]
   1b348:	9103      	str	r1, [sp, #12]
   1b34a:	4056      	eors	r6, r2
   1b34c:	9a05      	ldr	r2, [sp, #20]
   1b34e:	9604      	str	r6, [sp, #16]
   1b350:	ea83 0102 	eor.w	r1, r3, r2
   1b354:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   1b358:	9d06      	ldr	r5, [sp, #24]
   1b35a:	9105      	str	r1, [sp, #20]
   1b35c:	4055      	eors	r5, r2
   1b35e:	9a07      	ldr	r2, [sp, #28]
   1b360:	4640      	mov	r0, r8
   1b362:	4053      	eors	r3, r2
   1b364:	4669      	mov	r1, sp
   1b366:	2280      	movs	r2, #128	; 0x80
   1b368:	e9cd 5306 	strd	r5, r3, [sp, #24]
   1b36c:	f000 fcba 	bl	1bce4 <cc_mbedtls_aes_setkey_enc>
   1b370:	4607      	mov	r7, r0
   1b372:	b138      	cbz	r0, 1b384 <ctr_drbg_update_internal+0x13c>
   1b374:	4668      	mov	r0, sp
   1b376:	2120      	movs	r1, #32
   1b378:	f7ff fc92 	bl	1aca0 <mbedtls_platform_zeroize>
   1b37c:	4638      	mov	r0, r7
   1b37e:	b008      	add	sp, #32
   1b380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b384:	2210      	movs	r2, #16
   1b386:	4620      	mov	r0, r4
   1b388:	eb0d 0102 	add.w	r1, sp, r2
   1b38c:	f005 fb75 	bl	20a7a <memcpy>
   1b390:	e7f0      	b.n	1b374 <ctr_drbg_update_internal+0x12c>
   1b392:	bf00      	nop

0001b394 <mbedtls_ctr_drbg_reseed_internal>:
   1b394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b398:	4604      	mov	r4, r0
   1b39a:	6980      	ldr	r0, [r0, #24]
   1b39c:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   1b3a0:	d851      	bhi.n	1b446 <mbedtls_ctr_drbg_reseed_internal+0xb2>
   1b3a2:	461d      	mov	r5, r3
   1b3a4:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   1b3a8:	42ab      	cmp	r3, r5
   1b3aa:	d34c      	bcc.n	1b446 <mbedtls_ctr_drbg_reseed_internal+0xb2>
   1b3ac:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   1b3b0:	1a18      	subs	r0, r3, r0
   1b3b2:	4290      	cmp	r0, r2
   1b3b4:	4616      	mov	r6, r2
   1b3b6:	d346      	bcc.n	1b446 <mbedtls_ctr_drbg_reseed_internal+0xb2>
   1b3b8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1b454 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   1b3bc:	f44f 72c0 	mov.w	r2, #384	; 0x180
   1b3c0:	460f      	mov	r7, r1
   1b3c2:	4640      	mov	r0, r8
   1b3c4:	2100      	movs	r1, #0
   1b3c6:	f005 fb93 	bl	20af0 <memset>
   1b3ca:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1b3ce:	69a2      	ldr	r2, [r4, #24]
   1b3d0:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1b3d4:	4641      	mov	r1, r8
   1b3d6:	4798      	blx	r3
   1b3d8:	2800      	cmp	r0, #0
   1b3da:	d137      	bne.n	1b44c <mbedtls_ctr_drbg_reseed_internal+0xb8>
   1b3dc:	f8d4 9018 	ldr.w	r9, [r4, #24]
   1b3e0:	b135      	cbz	r5, 1b3f0 <mbedtls_ctr_drbg_reseed_internal+0x5c>
   1b3e2:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   1b3e6:	462a      	mov	r2, r5
   1b3e8:	4641      	mov	r1, r8
   1b3ea:	4798      	blx	r3
   1b3ec:	bb70      	cbnz	r0, 1b44c <mbedtls_ctr_drbg_reseed_internal+0xb8>
   1b3ee:	44a9      	add	r9, r5
   1b3f0:	b107      	cbz	r7, 1b3f4 <mbedtls_ctr_drbg_reseed_internal+0x60>
   1b3f2:	b9c6      	cbnz	r6, 1b426 <mbedtls_ctr_drbg_reseed_internal+0x92>
   1b3f4:	4917      	ldr	r1, [pc, #92]	; (1b454 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1b3f6:	464a      	mov	r2, r9
   1b3f8:	4608      	mov	r0, r1
   1b3fa:	f7ff fde5 	bl	1afc8 <block_cipher_df>
   1b3fe:	4605      	mov	r5, r0
   1b400:	b138      	cbz	r0, 1b412 <mbedtls_ctr_drbg_reseed_internal+0x7e>
   1b402:	4814      	ldr	r0, [pc, #80]	; (1b454 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1b404:	f44f 71c0 	mov.w	r1, #384	; 0x180
   1b408:	f7ff fc4a 	bl	1aca0 <mbedtls_platform_zeroize>
   1b40c:	4628      	mov	r0, r5
   1b40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b412:	4910      	ldr	r1, [pc, #64]	; (1b454 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1b414:	4620      	mov	r0, r4
   1b416:	f7ff ff17 	bl	1b248 <ctr_drbg_update_internal>
   1b41a:	4605      	mov	r5, r0
   1b41c:	2800      	cmp	r0, #0
   1b41e:	d1f0      	bne.n	1b402 <mbedtls_ctr_drbg_reseed_internal+0x6e>
   1b420:	2301      	movs	r3, #1
   1b422:	6123      	str	r3, [r4, #16]
   1b424:	e7ed      	b.n	1b402 <mbedtls_ctr_drbg_reseed_internal+0x6e>
   1b426:	4639      	mov	r1, r7
   1b428:	eb08 0009 	add.w	r0, r8, r9
   1b42c:	4632      	mov	r2, r6
   1b42e:	f005 fb24 	bl	20a7a <memcpy>
   1b432:	4908      	ldr	r1, [pc, #32]	; (1b454 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1b434:	44b1      	add	r9, r6
   1b436:	464a      	mov	r2, r9
   1b438:	4608      	mov	r0, r1
   1b43a:	f7ff fdc5 	bl	1afc8 <block_cipher_df>
   1b43e:	4605      	mov	r5, r0
   1b440:	2800      	cmp	r0, #0
   1b442:	d1de      	bne.n	1b402 <mbedtls_ctr_drbg_reseed_internal+0x6e>
   1b444:	e7e5      	b.n	1b412 <mbedtls_ctr_drbg_reseed_internal+0x7e>
   1b446:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1b44a:	e7df      	b.n	1b40c <mbedtls_ctr_drbg_reseed_internal+0x78>
   1b44c:	f06f 0533 	mvn.w	r5, #51	; 0x33
   1b450:	e7dc      	b.n	1b40c <mbedtls_ctr_drbg_reseed_internal+0x78>
   1b452:	bf00      	nop
   1b454:	20002e7c 	.word	0x20002e7c

0001b458 <cc_mbedtls_ctr_drbg_init>:
   1b458:	b510      	push	{r4, lr}
   1b45a:	22a4      	movs	r2, #164	; 0xa4
   1b45c:	4604      	mov	r4, r0
   1b45e:	2100      	movs	r1, #0
   1b460:	f005 fb46 	bl	20af0 <memset>
   1b464:	4b04      	ldr	r3, [pc, #16]	; (1b478 <cc_mbedtls_ctr_drbg_init+0x20>)
   1b466:	f04f 32ff 	mov.w	r2, #4294967295
   1b46a:	6122      	str	r2, [r4, #16]
   1b46c:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1b470:	681b      	ldr	r3, [r3, #0]
   1b472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b476:	4718      	bx	r3
   1b478:	200006e4 	.word	0x200006e4

0001b47c <cc_mbedtls_ctr_drbg_seed>:
   1b47c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b480:	b085      	sub	sp, #20
   1b482:	4605      	mov	r5, r0
   1b484:	460f      	mov	r7, r1
   1b486:	4616      	mov	r6, r2
   1b488:	4668      	mov	r0, sp
   1b48a:	2210      	movs	r2, #16
   1b48c:	2100      	movs	r1, #0
   1b48e:	4699      	mov	r9, r3
   1b490:	f005 fb2e 	bl	20af0 <memset>
   1b494:	4b1f      	ldr	r3, [pc, #124]	; (1b514 <cc_mbedtls_ctr_drbg_seed+0x98>)
   1b496:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   1b49a:	681b      	ldr	r3, [r3, #0]
   1b49c:	4640      	mov	r0, r8
   1b49e:	4798      	blx	r3
   1b4a0:	b120      	cbz	r0, 1b4ac <cc_mbedtls_ctr_drbg_seed+0x30>
   1b4a2:	4604      	mov	r4, r0
   1b4a4:	4620      	mov	r0, r4
   1b4a6:	b005      	add	sp, #20
   1b4a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b4ac:	f105 0420 	add.w	r4, r5, #32
   1b4b0:	4620      	mov	r0, r4
   1b4b2:	f000 fc01 	bl	1bcb8 <cc_mbedtls_aes_init>
   1b4b6:	69aa      	ldr	r2, [r5, #24]
   1b4b8:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   1b4bc:	692e      	ldr	r6, [r5, #16]
   1b4be:	b9fa      	cbnz	r2, 1b500 <cc_mbedtls_ctr_drbg_seed+0x84>
   1b4c0:	2220      	movs	r2, #32
   1b4c2:	2e00      	cmp	r6, #0
   1b4c4:	61aa      	str	r2, [r5, #24]
   1b4c6:	db22      	blt.n	1b50e <cc_mbedtls_ctr_drbg_seed+0x92>
   1b4c8:	f64f 73f0 	movw	r3, #65520	; 0xfff0
   1b4cc:	4620      	mov	r0, r4
   1b4ce:	4669      	mov	r1, sp
   1b4d0:	61eb      	str	r3, [r5, #28]
   1b4d2:	2280      	movs	r2, #128	; 0x80
   1b4d4:	f000 fc06 	bl	1bce4 <cc_mbedtls_aes_setkey_enc>
   1b4d8:	4604      	mov	r4, r0
   1b4da:	b930      	cbnz	r0, 1b4ea <cc_mbedtls_ctr_drbg_seed+0x6e>
   1b4dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1b4de:	4633      	mov	r3, r6
   1b4e0:	4649      	mov	r1, r9
   1b4e2:	4628      	mov	r0, r5
   1b4e4:	f7ff ff56 	bl	1b394 <mbedtls_ctr_drbg_reseed_internal>
   1b4e8:	4604      	mov	r4, r0
   1b4ea:	4b0b      	ldr	r3, [pc, #44]	; (1b518 <cc_mbedtls_ctr_drbg_seed+0x9c>)
   1b4ec:	4640      	mov	r0, r8
   1b4ee:	681b      	ldr	r3, [r3, #0]
   1b4f0:	4798      	blx	r3
   1b4f2:	2800      	cmp	r0, #0
   1b4f4:	bf18      	it	ne
   1b4f6:	4604      	movne	r4, r0
   1b4f8:	4620      	mov	r0, r4
   1b4fa:	b005      	add	sp, #20
   1b4fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b500:	2e00      	cmp	r6, #0
   1b502:	dae1      	bge.n	1b4c8 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1b504:	2a17      	cmp	r2, #23
   1b506:	d802      	bhi.n	1b50e <cc_mbedtls_ctr_drbg_seed+0x92>
   1b508:	1c53      	adds	r3, r2, #1
   1b50a:	085e      	lsrs	r6, r3, #1
   1b50c:	e7dc      	b.n	1b4c8 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1b50e:	2600      	movs	r6, #0
   1b510:	e7da      	b.n	1b4c8 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1b512:	bf00      	nop
   1b514:	200006e8 	.word	0x200006e8
   1b518:	200006ec 	.word	0x200006ec

0001b51c <cc_mbedtls_ctr_drbg_random_with_add>:
   1b51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b520:	b08d      	sub	sp, #52	; 0x34
   1b522:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1b526:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   1b52a:	f200 80e4 	bhi.w	1b6f6 <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   1b52e:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   1b532:	f200 80dd 	bhi.w	1b6f0 <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   1b536:	4604      	mov	r4, r0
   1b538:	4615      	mov	r5, r2
   1b53a:	460e      	mov	r6, r1
   1b53c:	2220      	movs	r2, #32
   1b53e:	2100      	movs	r1, #0
   1b540:	a804      	add	r0, sp, #16
   1b542:	461f      	mov	r7, r3
   1b544:	f005 fad4 	bl	20af0 <memset>
   1b548:	4b6c      	ldr	r3, [pc, #432]	; (1b6fc <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   1b54a:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   1b54e:	681b      	ldr	r3, [r3, #0]
   1b550:	4648      	mov	r0, r9
   1b552:	4798      	blx	r3
   1b554:	4683      	mov	fp, r0
   1b556:	2800      	cmp	r0, #0
   1b558:	f040 8093 	bne.w	1b682 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1b55c:	6922      	ldr	r2, [r4, #16]
   1b55e:	69e3      	ldr	r3, [r4, #28]
   1b560:	429a      	cmp	r2, r3
   1b562:	f300 8092 	bgt.w	1b68a <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   1b566:	6963      	ldr	r3, [r4, #20]
   1b568:	2b00      	cmp	r3, #0
   1b56a:	f040 808e 	bne.w	1b68a <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   1b56e:	f1b8 0f00 	cmp.w	r8, #0
   1b572:	f040 80a9 	bne.w	1b6c8 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   1b576:	f8df a188 	ldr.w	sl, [pc, #392]	; 1b700 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1b57a:	466f      	mov	r7, sp
   1b57c:	2d00      	cmp	r5, #0
   1b57e:	f000 8098 	beq.w	1b6b2 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   1b582:	f104 0820 	add.w	r8, r4, #32
   1b586:	466f      	mov	r7, sp
   1b588:	e00e      	b.n	1b5a8 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   1b58a:	2d10      	cmp	r5, #16
   1b58c:	46ab      	mov	fp, r5
   1b58e:	bf28      	it	cs
   1b590:	f04f 0b10 	movcs.w	fp, #16
   1b594:	4630      	mov	r0, r6
   1b596:	465a      	mov	r2, fp
   1b598:	4639      	mov	r1, r7
   1b59a:	f005 fa6e 	bl	20a7a <memcpy>
   1b59e:	ebb5 050b 	subs.w	r5, r5, fp
   1b5a2:	445e      	add	r6, fp
   1b5a4:	f000 8085 	beq.w	1b6b2 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   1b5a8:	7be3      	ldrb	r3, [r4, #15]
   1b5aa:	3301      	adds	r3, #1
   1b5ac:	b2db      	uxtb	r3, r3
   1b5ae:	73e3      	strb	r3, [r4, #15]
   1b5b0:	2b00      	cmp	r3, #0
   1b5b2:	d14d      	bne.n	1b650 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b5b4:	7ba3      	ldrb	r3, [r4, #14]
   1b5b6:	3301      	adds	r3, #1
   1b5b8:	b2db      	uxtb	r3, r3
   1b5ba:	73a3      	strb	r3, [r4, #14]
   1b5bc:	2b00      	cmp	r3, #0
   1b5be:	d147      	bne.n	1b650 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b5c0:	7b63      	ldrb	r3, [r4, #13]
   1b5c2:	3301      	adds	r3, #1
   1b5c4:	b2db      	uxtb	r3, r3
   1b5c6:	7363      	strb	r3, [r4, #13]
   1b5c8:	2b00      	cmp	r3, #0
   1b5ca:	d141      	bne.n	1b650 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b5cc:	7b23      	ldrb	r3, [r4, #12]
   1b5ce:	3301      	adds	r3, #1
   1b5d0:	b2db      	uxtb	r3, r3
   1b5d2:	7323      	strb	r3, [r4, #12]
   1b5d4:	2b00      	cmp	r3, #0
   1b5d6:	d13b      	bne.n	1b650 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b5d8:	7ae3      	ldrb	r3, [r4, #11]
   1b5da:	3301      	adds	r3, #1
   1b5dc:	b2db      	uxtb	r3, r3
   1b5de:	72e3      	strb	r3, [r4, #11]
   1b5e0:	2b00      	cmp	r3, #0
   1b5e2:	d135      	bne.n	1b650 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b5e4:	7aa3      	ldrb	r3, [r4, #10]
   1b5e6:	3301      	adds	r3, #1
   1b5e8:	b2db      	uxtb	r3, r3
   1b5ea:	72a3      	strb	r3, [r4, #10]
   1b5ec:	2b00      	cmp	r3, #0
   1b5ee:	d12f      	bne.n	1b650 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b5f0:	7a63      	ldrb	r3, [r4, #9]
   1b5f2:	3301      	adds	r3, #1
   1b5f4:	b2db      	uxtb	r3, r3
   1b5f6:	7263      	strb	r3, [r4, #9]
   1b5f8:	bb53      	cbnz	r3, 1b650 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b5fa:	7a23      	ldrb	r3, [r4, #8]
   1b5fc:	3301      	adds	r3, #1
   1b5fe:	b2db      	uxtb	r3, r3
   1b600:	7223      	strb	r3, [r4, #8]
   1b602:	bb2b      	cbnz	r3, 1b650 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b604:	79e3      	ldrb	r3, [r4, #7]
   1b606:	3301      	adds	r3, #1
   1b608:	b2db      	uxtb	r3, r3
   1b60a:	71e3      	strb	r3, [r4, #7]
   1b60c:	bb03      	cbnz	r3, 1b650 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b60e:	79a3      	ldrb	r3, [r4, #6]
   1b610:	3301      	adds	r3, #1
   1b612:	b2db      	uxtb	r3, r3
   1b614:	71a3      	strb	r3, [r4, #6]
   1b616:	b9db      	cbnz	r3, 1b650 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b618:	7963      	ldrb	r3, [r4, #5]
   1b61a:	3301      	adds	r3, #1
   1b61c:	b2db      	uxtb	r3, r3
   1b61e:	7163      	strb	r3, [r4, #5]
   1b620:	b9b3      	cbnz	r3, 1b650 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b622:	7923      	ldrb	r3, [r4, #4]
   1b624:	3301      	adds	r3, #1
   1b626:	b2db      	uxtb	r3, r3
   1b628:	7123      	strb	r3, [r4, #4]
   1b62a:	b98b      	cbnz	r3, 1b650 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b62c:	78e3      	ldrb	r3, [r4, #3]
   1b62e:	3301      	adds	r3, #1
   1b630:	b2db      	uxtb	r3, r3
   1b632:	70e3      	strb	r3, [r4, #3]
   1b634:	b963      	cbnz	r3, 1b650 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b636:	78a3      	ldrb	r3, [r4, #2]
   1b638:	3301      	adds	r3, #1
   1b63a:	b2db      	uxtb	r3, r3
   1b63c:	70a3      	strb	r3, [r4, #2]
   1b63e:	b93b      	cbnz	r3, 1b650 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b640:	7863      	ldrb	r3, [r4, #1]
   1b642:	3301      	adds	r3, #1
   1b644:	b2db      	uxtb	r3, r3
   1b646:	7063      	strb	r3, [r4, #1]
   1b648:	b913      	cbnz	r3, 1b650 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1b64a:	7823      	ldrb	r3, [r4, #0]
   1b64c:	3301      	adds	r3, #1
   1b64e:	7023      	strb	r3, [r4, #0]
   1b650:	463b      	mov	r3, r7
   1b652:	4622      	mov	r2, r4
   1b654:	2101      	movs	r1, #1
   1b656:	4640      	mov	r0, r8
   1b658:	f000 fb5e 	bl	1bd18 <cc_mbedtls_aes_crypt_ecb>
   1b65c:	4683      	mov	fp, r0
   1b65e:	2800      	cmp	r0, #0
   1b660:	d093      	beq.n	1b58a <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   1b662:	f8da 3000 	ldr.w	r3, [sl]
   1b666:	4648      	mov	r0, r9
   1b668:	4798      	blx	r3
   1b66a:	2120      	movs	r1, #32
   1b66c:	4603      	mov	r3, r0
   1b66e:	a804      	add	r0, sp, #16
   1b670:	2b00      	cmp	r3, #0
   1b672:	bf18      	it	ne
   1b674:	469b      	movne	fp, r3
   1b676:	f7ff fb13 	bl	1aca0 <mbedtls_platform_zeroize>
   1b67a:	4638      	mov	r0, r7
   1b67c:	2110      	movs	r1, #16
   1b67e:	f7ff fb0f 	bl	1aca0 <mbedtls_platform_zeroize>
   1b682:	4658      	mov	r0, fp
   1b684:	b00d      	add	sp, #52	; 0x34
   1b686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b68a:	4642      	mov	r2, r8
   1b68c:	4639      	mov	r1, r7
   1b68e:	2300      	movs	r3, #0
   1b690:	4620      	mov	r0, r4
   1b692:	f7ff fe7f 	bl	1b394 <mbedtls_ctr_drbg_reseed_internal>
   1b696:	f8df a068 	ldr.w	sl, [pc, #104]	; 1b700 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1b69a:	2800      	cmp	r0, #0
   1b69c:	f43f af6d 	beq.w	1b57a <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   1b6a0:	f8da 3000 	ldr.w	r3, [sl]
   1b6a4:	4648      	mov	r0, r9
   1b6a6:	4798      	blx	r3
   1b6a8:	4683      	mov	fp, r0
   1b6aa:	2800      	cmp	r0, #0
   1b6ac:	f43f af65 	beq.w	1b57a <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   1b6b0:	e7e7      	b.n	1b682 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1b6b2:	a904      	add	r1, sp, #16
   1b6b4:	4620      	mov	r0, r4
   1b6b6:	f7ff fdc7 	bl	1b248 <ctr_drbg_update_internal>
   1b6ba:	4683      	mov	fp, r0
   1b6bc:	2800      	cmp	r0, #0
   1b6be:	d1d0      	bne.n	1b662 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1b6c0:	6923      	ldr	r3, [r4, #16]
   1b6c2:	3301      	adds	r3, #1
   1b6c4:	6123      	str	r3, [r4, #16]
   1b6c6:	e7cc      	b.n	1b662 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1b6c8:	4642      	mov	r2, r8
   1b6ca:	4639      	mov	r1, r7
   1b6cc:	a804      	add	r0, sp, #16
   1b6ce:	f7ff fc7b 	bl	1afc8 <block_cipher_df>
   1b6d2:	4683      	mov	fp, r0
   1b6d4:	b118      	cbz	r0, 1b6de <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   1b6d6:	f8df a028 	ldr.w	sl, [pc, #40]	; 1b700 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1b6da:	466f      	mov	r7, sp
   1b6dc:	e7c1      	b.n	1b662 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1b6de:	a904      	add	r1, sp, #16
   1b6e0:	4620      	mov	r0, r4
   1b6e2:	f7ff fdb1 	bl	1b248 <ctr_drbg_update_internal>
   1b6e6:	4683      	mov	fp, r0
   1b6e8:	2800      	cmp	r0, #0
   1b6ea:	f43f af44 	beq.w	1b576 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1b6ee:	e7f2      	b.n	1b6d6 <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   1b6f0:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   1b6f4:	e7c5      	b.n	1b682 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1b6f6:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   1b6fa:	e7c2      	b.n	1b682 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1b6fc:	200006e8 	.word	0x200006e8
   1b700:	200006ec 	.word	0x200006ec

0001b704 <cc_mbedtls_sha256_ret>:
   1b704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b706:	461c      	mov	r4, r3
   1b708:	4605      	mov	r5, r0
   1b70a:	4811      	ldr	r0, [pc, #68]	; (1b750 <cc_mbedtls_sha256_ret+0x4c>)
   1b70c:	460e      	mov	r6, r1
   1b70e:	4617      	mov	r7, r2
   1b710:	f7ff fb4e 	bl	1adb0 <cc_mbedtls_sha256_init>
   1b714:	4621      	mov	r1, r4
   1b716:	480e      	ldr	r0, [pc, #56]	; (1b750 <cc_mbedtls_sha256_ret+0x4c>)
   1b718:	f7ff fb64 	bl	1ade4 <cc_mbedtls_sha256_starts_ret>
   1b71c:	4604      	mov	r4, r0
   1b71e:	b120      	cbz	r0, 1b72a <cc_mbedtls_sha256_ret+0x26>
   1b720:	480b      	ldr	r0, [pc, #44]	; (1b750 <cc_mbedtls_sha256_ret+0x4c>)
   1b722:	f7ff fb59 	bl	1add8 <cc_mbedtls_sha256_free>
   1b726:	4620      	mov	r0, r4
   1b728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b72a:	4809      	ldr	r0, [pc, #36]	; (1b750 <cc_mbedtls_sha256_ret+0x4c>)
   1b72c:	4632      	mov	r2, r6
   1b72e:	4629      	mov	r1, r5
   1b730:	f7ff fb6c 	bl	1ae0c <cc_mbedtls_sha256_update_ret>
   1b734:	4604      	mov	r4, r0
   1b736:	2800      	cmp	r0, #0
   1b738:	d1f2      	bne.n	1b720 <cc_mbedtls_sha256_ret+0x1c>
   1b73a:	4639      	mov	r1, r7
   1b73c:	4804      	ldr	r0, [pc, #16]	; (1b750 <cc_mbedtls_sha256_ret+0x4c>)
   1b73e:	f7ff fb6d 	bl	1ae1c <cc_mbedtls_sha256_finish_ret>
   1b742:	4604      	mov	r4, r0
   1b744:	4802      	ldr	r0, [pc, #8]	; (1b750 <cc_mbedtls_sha256_ret+0x4c>)
   1b746:	f7ff fb47 	bl	1add8 <cc_mbedtls_sha256_free>
   1b74a:	4620      	mov	r0, r4
   1b74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b74e:	bf00      	nop
   1b750:	20002ffc 	.word	0x20002ffc

0001b754 <RNG_PLAT_SetUserRngParameters>:
   1b754:	b530      	push	{r4, r5, lr}
   1b756:	b083      	sub	sp, #12
   1b758:	231c      	movs	r3, #28
   1b75a:	a901      	add	r1, sp, #4
   1b75c:	4604      	mov	r4, r0
   1b75e:	9301      	str	r3, [sp, #4]
   1b760:	f000 f83c 	bl	1b7dc <CC_PalTrngParamGet>
   1b764:	4605      	mov	r5, r0
   1b766:	b938      	cbnz	r0, 1b778 <RNG_PLAT_SetUserRngParameters+0x24>
   1b768:	9b01      	ldr	r3, [sp, #4]
   1b76a:	2b1c      	cmp	r3, #28
   1b76c:	d007      	beq.n	1b77e <RNG_PLAT_SetUserRngParameters+0x2a>
   1b76e:	4d15      	ldr	r5, [pc, #84]	; (1b7c4 <RNG_PLAT_SetUserRngParameters+0x70>)
   1b770:	4620      	mov	r0, r4
   1b772:	211c      	movs	r1, #28
   1b774:	f000 f82e 	bl	1b7d4 <CC_PalMemSetZeroPlat>
   1b778:	4628      	mov	r0, r5
   1b77a:	b003      	add	sp, #12
   1b77c:	bd30      	pop	{r4, r5, pc}
   1b77e:	e9d4 3200 	ldrd	r3, r2, [r4]
   1b782:	2101      	movs	r1, #1
   1b784:	3b00      	subs	r3, #0
   1b786:	bf18      	it	ne
   1b788:	2301      	movne	r3, #1
   1b78a:	61e1      	str	r1, [r4, #28]
   1b78c:	b10a      	cbz	r2, 1b792 <RNG_PLAT_SetUserRngParameters+0x3e>
   1b78e:	f043 0302 	orr.w	r3, r3, #2
   1b792:	68a2      	ldr	r2, [r4, #8]
   1b794:	b932      	cbnz	r2, 1b7a4 <RNG_PLAT_SetUserRngParameters+0x50>
   1b796:	68e2      	ldr	r2, [r4, #12]
   1b798:	b942      	cbnz	r2, 1b7ac <RNG_PLAT_SetUserRngParameters+0x58>
   1b79a:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1b79e:	b97b      	cbnz	r3, 1b7c0 <RNG_PLAT_SetUserRngParameters+0x6c>
   1b7a0:	4d09      	ldr	r5, [pc, #36]	; (1b7c8 <RNG_PLAT_SetUserRngParameters+0x74>)
   1b7a2:	e7e5      	b.n	1b770 <RNG_PLAT_SetUserRngParameters+0x1c>
   1b7a4:	68e2      	ldr	r2, [r4, #12]
   1b7a6:	f043 0304 	orr.w	r3, r3, #4
   1b7aa:	b13a      	cbz	r2, 1b7bc <RNG_PLAT_SetUserRngParameters+0x68>
   1b7ac:	f043 0308 	orr.w	r3, r3, #8
   1b7b0:	2200      	movs	r2, #0
   1b7b2:	4628      	mov	r0, r5
   1b7b4:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1b7b8:	b003      	add	sp, #12
   1b7ba:	bd30      	pop	{r4, r5, pc}
   1b7bc:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1b7c0:	4615      	mov	r5, r2
   1b7c2:	e7d9      	b.n	1b778 <RNG_PLAT_SetUserRngParameters+0x24>
   1b7c4:	00f00c37 	.word	0x00f00c37
   1b7c8:	00f00c0e 	.word	0x00f00c0e

0001b7cc <CC_PalMemCopyPlat>:
   1b7cc:	f005 b976 	b.w	20abc <memmove>

0001b7d0 <CC_PalMemSetPlat>:
   1b7d0:	f005 b98e 	b.w	20af0 <memset>

0001b7d4 <CC_PalMemSetZeroPlat>:
   1b7d4:	460a      	mov	r2, r1
   1b7d6:	2100      	movs	r1, #0
   1b7d8:	f005 b98a 	b.w	20af0 <memset>

0001b7dc <CC_PalTrngParamGet>:
   1b7dc:	b118      	cbz	r0, 1b7e6 <CC_PalTrngParamGet+0xa>
   1b7de:	b111      	cbz	r1, 1b7e6 <CC_PalTrngParamGet+0xa>
   1b7e0:	680b      	ldr	r3, [r1, #0]
   1b7e2:	2b1c      	cmp	r3, #28
   1b7e4:	d001      	beq.n	1b7ea <CC_PalTrngParamGet+0xe>
   1b7e6:	2001      	movs	r0, #1
   1b7e8:	4770      	bx	lr
   1b7ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b7ee:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   1b7f2:	3201      	adds	r2, #1
   1b7f4:	bf14      	ite	ne
   1b7f6:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   1b7fa:	f241 225c 	movweq	r2, #4700	; 0x125c
   1b7fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b802:	6002      	str	r2, [r0, #0]
   1b804:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   1b808:	3201      	adds	r2, #1
   1b80a:	bf14      	ite	ne
   1b80c:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   1b810:	f641 1264 	movweq	r2, #6500	; 0x1964
   1b814:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b818:	6042      	str	r2, [r0, #4]
   1b81a:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   1b81e:	3201      	adds	r2, #1
   1b820:	bf14      	ite	ne
   1b822:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   1b826:	f640 62d8 	movweq	r2, #3800	; 0xed8
   1b82a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b82e:	6082      	str	r2, [r0, #8]
   1b830:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   1b834:	3201      	adds	r2, #1
   1b836:	bf14      	ite	ne
   1b838:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   1b83c:	f241 3288 	movweq	r2, #5000	; 0x1388
   1b840:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b844:	60c2      	str	r2, [r0, #12]
   1b846:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   1b84a:	3201      	adds	r2, #1
   1b84c:	bf14      	ite	ne
   1b84e:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   1b852:	2290      	moveq	r2, #144	; 0x90
   1b854:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b858:	6102      	str	r2, [r0, #16]
   1b85a:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   1b85e:	3201      	adds	r2, #1
   1b860:	bf14      	ite	ne
   1b862:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   1b866:	2251      	moveq	r2, #81	; 0x51
   1b868:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b86c:	6142      	str	r2, [r0, #20]
   1b86e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   1b872:	3201      	adds	r2, #1
   1b874:	bf14      	ite	ne
   1b876:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   1b87a:	f240 3337 	movweq	r3, #823	; 0x337
   1b87e:	6183      	str	r3, [r0, #24]
   1b880:	2000      	movs	r0, #0
   1b882:	4770      	bx	lr

0001b884 <LLF_RND_WaitRngInterrupt>:
   1b884:	b508      	push	{r3, lr}
   1b886:	4601      	mov	r1, r0
   1b888:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1b88c:	f7fe fe32 	bl	1a4f4 <CC_HalWaitInterruptRND>
   1b890:	4902      	ldr	r1, [pc, #8]	; (1b89c <LLF_RND_WaitRngInterrupt+0x18>)
   1b892:	4a03      	ldr	r2, [pc, #12]	; (1b8a0 <LLF_RND_WaitRngInterrupt+0x1c>)
   1b894:	2300      	movs	r3, #0
   1b896:	600b      	str	r3, [r1, #0]
   1b898:	6013      	str	r3, [r2, #0]
   1b89a:	bd08      	pop	{r3, pc}
   1b89c:	5002b1c8 	.word	0x5002b1c8
   1b8a0:	5002b12c 	.word	0x5002b12c

0001b8a4 <LLF_RND_GetRoscSampleCnt>:
   1b8a4:	3801      	subs	r0, #1
   1b8a6:	2807      	cmp	r0, #7
   1b8a8:	d805      	bhi.n	1b8b6 <LLF_RND_GetRoscSampleCnt+0x12>
   1b8aa:	e8df f000 	tbb	[pc, r0]
   1b8ae:	0e0a      	.short	0x0e0a
   1b8b0:	04041204 	.word	0x04041204
   1b8b4:	0604      	.short	0x0604
   1b8b6:	4809      	ldr	r0, [pc, #36]	; (1b8dc <LLF_RND_GetRoscSampleCnt+0x38>)
   1b8b8:	4770      	bx	lr
   1b8ba:	68cb      	ldr	r3, [r1, #12]
   1b8bc:	624b      	str	r3, [r1, #36]	; 0x24
   1b8be:	2000      	movs	r0, #0
   1b8c0:	4770      	bx	lr
   1b8c2:	680b      	ldr	r3, [r1, #0]
   1b8c4:	624b      	str	r3, [r1, #36]	; 0x24
   1b8c6:	2000      	movs	r0, #0
   1b8c8:	4770      	bx	lr
   1b8ca:	684b      	ldr	r3, [r1, #4]
   1b8cc:	624b      	str	r3, [r1, #36]	; 0x24
   1b8ce:	2000      	movs	r0, #0
   1b8d0:	4770      	bx	lr
   1b8d2:	688b      	ldr	r3, [r1, #8]
   1b8d4:	624b      	str	r3, [r1, #36]	; 0x24
   1b8d6:	2000      	movs	r0, #0
   1b8d8:	4770      	bx	lr
   1b8da:	bf00      	nop
   1b8dc:	00f10c31 	.word	0x00f10c31

0001b8e0 <LLF_RND_GetFastestRosc>:
   1b8e0:	680b      	ldr	r3, [r1, #0]
   1b8e2:	e002      	b.n	1b8ea <LLF_RND_GetFastestRosc+0xa>
   1b8e4:	2b08      	cmp	r3, #8
   1b8e6:	600b      	str	r3, [r1, #0]
   1b8e8:	d806      	bhi.n	1b8f8 <LLF_RND_GetFastestRosc+0x18>
   1b8ea:	6a02      	ldr	r2, [r0, #32]
   1b8ec:	4213      	tst	r3, r2
   1b8ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1b8f2:	d0f7      	beq.n	1b8e4 <LLF_RND_GetFastestRosc+0x4>
   1b8f4:	2000      	movs	r0, #0
   1b8f6:	4770      	bx	lr
   1b8f8:	4800      	ldr	r0, [pc, #0]	; (1b8fc <LLF_RND_GetFastestRosc+0x1c>)
   1b8fa:	4770      	bx	lr
   1b8fc:	00f10c31 	.word	0x00f10c31

0001b900 <LLF_RND_TurnOffTrng>:
   1b900:	4904      	ldr	r1, [pc, #16]	; (1b914 <LLF_RND_TurnOffTrng+0x14>)
   1b902:	4a05      	ldr	r2, [pc, #20]	; (1b918 <LLF_RND_TurnOffTrng+0x18>)
   1b904:	2300      	movs	r3, #0
   1b906:	600b      	str	r3, [r1, #0]
   1b908:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1b90c:	6013      	str	r3, [r2, #0]
   1b90e:	f7fe bdd7 	b.w	1a4c0 <CC_HalClearInterruptBit>
   1b912:	bf00      	nop
   1b914:	5002b12c 	.word	0x5002b12c
   1b918:	5002b1c4 	.word	0x5002b1c4

0001b91c <SetDataBuffersInfo>:
   1b91c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b91e:	b083      	sub	sp, #12
   1b920:	2400      	movs	r4, #0
   1b922:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1b926:	f88d 4007 	strb.w	r4, [sp, #7]
   1b92a:	d325      	bcc.n	1b978 <SetDataBuffersInfo+0x5c>
   1b92c:	460c      	mov	r4, r1
   1b92e:	4404      	add	r4, r0
   1b930:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1b934:	4605      	mov	r5, r0
   1b936:	d81f      	bhi.n	1b978 <SetDataBuffersInfo+0x5c>
   1b938:	4617      	mov	r7, r2
   1b93a:	461e      	mov	r6, r3
   1b93c:	2201      	movs	r2, #1
   1b93e:	f10d 0307 	add.w	r3, sp, #7
   1b942:	f000 fa13 	bl	1bd6c <CC_PalDataBufferAttrGet>
   1b946:	4604      	mov	r4, r0
   1b948:	b9b0      	cbnz	r0, 1b978 <SetDataBuffersInfo+0x5c>
   1b94a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b94c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b950:	603d      	str	r5, [r7, #0]
   1b952:	713b      	strb	r3, [r7, #4]
   1b954:	b192      	cbz	r2, 1b97c <SetDataBuffersInfo+0x60>
   1b956:	b14e      	cbz	r6, 1b96c <SetDataBuffersInfo+0x50>
   1b958:	4602      	mov	r2, r0
   1b95a:	9908      	ldr	r1, [sp, #32]
   1b95c:	f10d 0307 	add.w	r3, sp, #7
   1b960:	4630      	mov	r0, r6
   1b962:	f000 fa03 	bl	1bd6c <CC_PalDataBufferAttrGet>
   1b966:	b938      	cbnz	r0, 1b978 <SetDataBuffersInfo+0x5c>
   1b968:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b96c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b96e:	4620      	mov	r0, r4
   1b970:	6016      	str	r6, [r2, #0]
   1b972:	7113      	strb	r3, [r2, #4]
   1b974:	b003      	add	sp, #12
   1b976:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b978:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   1b97c:	4620      	mov	r0, r4
   1b97e:	b003      	add	sp, #12
   1b980:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b982:	bf00      	nop

0001b984 <InitHashDrv>:
   1b984:	b1e8      	cbz	r0, 1b9c2 <InitHashDrv+0x3e>
   1b986:	b510      	push	{r4, lr}
   1b988:	6804      	ldr	r4, [r0, #0]
   1b98a:	2c01      	cmp	r4, #1
   1b98c:	d004      	beq.n	1b998 <InitHashDrv+0x14>
   1b98e:	2c02      	cmp	r4, #2
   1b990:	d010      	beq.n	1b9b4 <InitHashDrv+0x30>
   1b992:	b144      	cbz	r4, 1b9a6 <InitHashDrv+0x22>
   1b994:	480c      	ldr	r0, [pc, #48]	; (1b9c8 <InitHashDrv+0x44>)
   1b996:	bd10      	pop	{r4, pc}
   1b998:	490c      	ldr	r1, [pc, #48]	; (1b9cc <InitHashDrv+0x48>)
   1b99a:	2220      	movs	r2, #32
   1b99c:	3008      	adds	r0, #8
   1b99e:	f7ff ff15 	bl	1b7cc <CC_PalMemCopyPlat>
   1b9a2:	2000      	movs	r0, #0
   1b9a4:	bd10      	pop	{r4, pc}
   1b9a6:	490a      	ldr	r1, [pc, #40]	; (1b9d0 <InitHashDrv+0x4c>)
   1b9a8:	2214      	movs	r2, #20
   1b9aa:	3008      	adds	r0, #8
   1b9ac:	f7ff ff0e 	bl	1b7cc <CC_PalMemCopyPlat>
   1b9b0:	4620      	mov	r0, r4
   1b9b2:	bd10      	pop	{r4, pc}
   1b9b4:	4907      	ldr	r1, [pc, #28]	; (1b9d4 <InitHashDrv+0x50>)
   1b9b6:	2220      	movs	r2, #32
   1b9b8:	3008      	adds	r0, #8
   1b9ba:	f7ff ff07 	bl	1b7cc <CC_PalMemCopyPlat>
   1b9be:	2000      	movs	r0, #0
   1b9c0:	bd10      	pop	{r4, pc}
   1b9c2:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1b9c6:	4770      	bx	lr
   1b9c8:	00f30001 	.word	0x00f30001
   1b9cc:	00021930 	.word	0x00021930
   1b9d0:	000218fc 	.word	0x000218fc
   1b9d4:	00021910 	.word	0x00021910

0001b9d8 <ProcessHashDrv>:
   1b9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b9dc:	2900      	cmp	r1, #0
   1b9de:	f000 80ef 	beq.w	1bbc0 <ProcessHashDrv+0x1e8>
   1b9e2:	4604      	mov	r4, r0
   1b9e4:	2800      	cmp	r0, #0
   1b9e6:	f000 80ef 	beq.w	1bbc8 <ProcessHashDrv+0x1f0>
   1b9ea:	6803      	ldr	r3, [r0, #0]
   1b9ec:	4617      	mov	r7, r2
   1b9ee:	460e      	mov	r6, r1
   1b9f0:	2b00      	cmp	r3, #0
   1b9f2:	f000 80b9 	beq.w	1bb68 <ProcessHashDrv+0x190>
   1b9f6:	3b01      	subs	r3, #1
   1b9f8:	2b01      	cmp	r3, #1
   1b9fa:	f200 80cd 	bhi.w	1bb98 <ProcessHashDrv+0x1c0>
   1b9fe:	4874      	ldr	r0, [pc, #464]	; (1bbd0 <ProcessHashDrv+0x1f8>)
   1ba00:	f04f 31ff 	mov.w	r1, #4294967295
   1ba04:	f04f 0802 	mov.w	r8, #2
   1ba08:	f7fe fe02 	bl	1a610 <CC_PalMutexLock>
   1ba0c:	2800      	cmp	r0, #0
   1ba0e:	f040 80b5 	bne.w	1bb7c <ProcessHashDrv+0x1a4>
   1ba12:	2000      	movs	r0, #0
   1ba14:	f7fe fe2c 	bl	1a670 <CC_PalPowerSaveModeSelect>
   1ba18:	4605      	mov	r5, r0
   1ba1a:	2800      	cmp	r0, #0
   1ba1c:	f040 80b8 	bne.w	1bb90 <ProcessHashDrv+0x1b8>
   1ba20:	4a6c      	ldr	r2, [pc, #432]	; (1bbd4 <ProcessHashDrv+0x1fc>)
   1ba22:	6813      	ldr	r3, [r2, #0]
   1ba24:	2b00      	cmp	r3, #0
   1ba26:	d1fc      	bne.n	1ba22 <ProcessHashDrv+0x4a>
   1ba28:	486b      	ldr	r0, [pc, #428]	; (1bbd8 <ProcessHashDrv+0x200>)
   1ba2a:	6803      	ldr	r3, [r0, #0]
   1ba2c:	2b00      	cmp	r3, #0
   1ba2e:	d1fc      	bne.n	1ba2a <ProcessHashDrv+0x52>
   1ba30:	f04f 30ff 	mov.w	r0, #4294967295
   1ba34:	f7fe fd44 	bl	1a4c0 <CC_HalClearInterruptBit>
   1ba38:	4b68      	ldr	r3, [pc, #416]	; (1bbdc <ProcessHashDrv+0x204>)
   1ba3a:	6818      	ldr	r0, [r3, #0]
   1ba3c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   1ba40:	f7fe fd4c 	bl	1a4dc <CC_HalMaskInterrupt>
   1ba44:	4866      	ldr	r0, [pc, #408]	; (1bbe0 <ProcessHashDrv+0x208>)
   1ba46:	4a67      	ldr	r2, [pc, #412]	; (1bbe4 <ProcessHashDrv+0x20c>)
   1ba48:	4967      	ldr	r1, [pc, #412]	; (1bbe8 <ProcessHashDrv+0x210>)
   1ba4a:	2301      	movs	r3, #1
   1ba4c:	6003      	str	r3, [r0, #0]
   1ba4e:	2007      	movs	r0, #7
   1ba50:	6010      	str	r0, [r2, #0]
   1ba52:	600b      	str	r3, [r1, #0]
   1ba54:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
   1ba58:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1ba5a:	6013      	str	r3, [r2, #0]
   1ba5c:	4b63      	ldr	r3, [pc, #396]	; (1bbec <ProcessHashDrv+0x214>)
   1ba5e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1ba60:	6051      	str	r1, [r2, #4]
   1ba62:	f8c3 8000 	str.w	r8, [r3]
   1ba66:	6823      	ldr	r3, [r4, #0]
   1ba68:	b15b      	cbz	r3, 1ba82 <ProcessHashDrv+0xaa>
   1ba6a:	3b01      	subs	r3, #1
   1ba6c:	2b01      	cmp	r3, #1
   1ba6e:	d817      	bhi.n	1baa0 <ProcessHashDrv+0xc8>
   1ba70:	4b5f      	ldr	r3, [pc, #380]	; (1bbf0 <ProcessHashDrv+0x218>)
   1ba72:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1ba74:	601a      	str	r2, [r3, #0]
   1ba76:	6a22      	ldr	r2, [r4, #32]
   1ba78:	f843 2c04 	str.w	r2, [r3, #-4]
   1ba7c:	69e2      	ldr	r2, [r4, #28]
   1ba7e:	f843 2c08 	str.w	r2, [r3, #-8]
   1ba82:	4b5c      	ldr	r3, [pc, #368]	; (1bbf4 <ProcessHashDrv+0x21c>)
   1ba84:	69a2      	ldr	r2, [r4, #24]
   1ba86:	601a      	str	r2, [r3, #0]
   1ba88:	6962      	ldr	r2, [r4, #20]
   1ba8a:	f843 2c04 	str.w	r2, [r3, #-4]
   1ba8e:	6922      	ldr	r2, [r4, #16]
   1ba90:	f843 2c08 	str.w	r2, [r3, #-8]
   1ba94:	68e2      	ldr	r2, [r4, #12]
   1ba96:	f843 2c0c 	str.w	r2, [r3, #-12]
   1ba9a:	68a2      	ldr	r2, [r4, #8]
   1ba9c:	f843 2c10 	str.w	r2, [r3, #-16]
   1baa0:	4a55      	ldr	r2, [pc, #340]	; (1bbf8 <ProcessHashDrv+0x220>)
   1baa2:	6813      	ldr	r3, [r2, #0]
   1baa4:	2b00      	cmp	r3, #0
   1baa6:	d1fc      	bne.n	1baa2 <ProcessHashDrv+0xca>
   1baa8:	2f00      	cmp	r7, #0
   1baaa:	d059      	beq.n	1bb60 <ProcessHashDrv+0x188>
   1baac:	6863      	ldr	r3, [r4, #4]
   1baae:	2b01      	cmp	r3, #1
   1bab0:	bf04      	itt	eq
   1bab2:	4a52      	ldreq	r2, [pc, #328]	; (1bbfc <ProcessHashDrv+0x224>)
   1bab4:	6013      	streq	r3, [r2, #0]
   1bab6:	4a52      	ldr	r2, [pc, #328]	; (1bc00 <ProcessHashDrv+0x228>)
   1bab8:	4b52      	ldr	r3, [pc, #328]	; (1bc04 <ProcessHashDrv+0x22c>)
   1baba:	6831      	ldr	r1, [r6, #0]
   1babc:	6011      	str	r1, [r2, #0]
   1babe:	2040      	movs	r0, #64	; 0x40
   1bac0:	601f      	str	r7, [r3, #0]
   1bac2:	f7fe fd11 	bl	1a4e8 <CC_HalWaitInterrupt>
   1bac6:	4605      	mov	r5, r0
   1bac8:	4a4b      	ldr	r2, [pc, #300]	; (1bbf8 <ProcessHashDrv+0x220>)
   1baca:	6813      	ldr	r3, [r2, #0]
   1bacc:	2b00      	cmp	r3, #0
   1bace:	d1fc      	bne.n	1baca <ProcessHashDrv+0xf2>
   1bad0:	4a41      	ldr	r2, [pc, #260]	; (1bbd8 <ProcessHashDrv+0x200>)
   1bad2:	6813      	ldr	r3, [r2, #0]
   1bad4:	2b00      	cmp	r3, #0
   1bad6:	d1fc      	bne.n	1bad2 <ProcessHashDrv+0xfa>
   1bad8:	6823      	ldr	r3, [r4, #0]
   1bada:	b15b      	cbz	r3, 1baf4 <ProcessHashDrv+0x11c>
   1badc:	3b01      	subs	r3, #1
   1bade:	2b01      	cmp	r3, #1
   1bae0:	d817      	bhi.n	1bb12 <ProcessHashDrv+0x13a>
   1bae2:	4a43      	ldr	r2, [pc, #268]	; (1bbf0 <ProcessHashDrv+0x218>)
   1bae4:	4b48      	ldr	r3, [pc, #288]	; (1bc08 <ProcessHashDrv+0x230>)
   1bae6:	6812      	ldr	r2, [r2, #0]
   1bae8:	6262      	str	r2, [r4, #36]	; 0x24
   1baea:	681a      	ldr	r2, [r3, #0]
   1baec:	6222      	str	r2, [r4, #32]
   1baee:	3b04      	subs	r3, #4
   1baf0:	681b      	ldr	r3, [r3, #0]
   1baf2:	61e3      	str	r3, [r4, #28]
   1baf4:	4a3f      	ldr	r2, [pc, #252]	; (1bbf4 <ProcessHashDrv+0x21c>)
   1baf6:	4b45      	ldr	r3, [pc, #276]	; (1bc0c <ProcessHashDrv+0x234>)
   1baf8:	6812      	ldr	r2, [r2, #0]
   1bafa:	61a2      	str	r2, [r4, #24]
   1bafc:	681a      	ldr	r2, [r3, #0]
   1bafe:	6162      	str	r2, [r4, #20]
   1bb00:	f853 2c04 	ldr.w	r2, [r3, #-4]
   1bb04:	6122      	str	r2, [r4, #16]
   1bb06:	f853 2c08 	ldr.w	r2, [r3, #-8]
   1bb0a:	60e2      	str	r2, [r4, #12]
   1bb0c:	3b0c      	subs	r3, #12
   1bb0e:	681b      	ldr	r3, [r3, #0]
   1bb10:	60a3      	str	r3, [r4, #8]
   1bb12:	4b3f      	ldr	r3, [pc, #252]	; (1bc10 <ProcessHashDrv+0x238>)
   1bb14:	4a3f      	ldr	r2, [pc, #252]	; (1bc14 <ProcessHashDrv+0x23c>)
   1bb16:	681b      	ldr	r3, [r3, #0]
   1bb18:	64a3      	str	r3, [r4, #72]	; 0x48
   1bb1a:	6812      	ldr	r2, [r2, #0]
   1bb1c:	4b32      	ldr	r3, [pc, #200]	; (1bbe8 <ProcessHashDrv+0x210>)
   1bb1e:	64e2      	str	r2, [r4, #76]	; 0x4c
   1bb20:	4836      	ldr	r0, [pc, #216]	; (1bbfc <ProcessHashDrv+0x224>)
   1bb22:	493d      	ldr	r1, [pc, #244]	; (1bc18 <ProcessHashDrv+0x240>)
   1bb24:	2201      	movs	r2, #1
   1bb26:	601a      	str	r2, [r3, #0]
   1bb28:	2300      	movs	r3, #0
   1bb2a:	4a33      	ldr	r2, [pc, #204]	; (1bbf8 <ProcessHashDrv+0x220>)
   1bb2c:	6003      	str	r3, [r0, #0]
   1bb2e:	600b      	str	r3, [r1, #0]
   1bb30:	6813      	ldr	r3, [r2, #0]
   1bb32:	2b00      	cmp	r3, #0
   1bb34:	d1fc      	bne.n	1bb30 <ProcessHashDrv+0x158>
   1bb36:	4a2a      	ldr	r2, [pc, #168]	; (1bbe0 <ProcessHashDrv+0x208>)
   1bb38:	6013      	str	r3, [r2, #0]
   1bb3a:	2d00      	cmp	r5, #0
   1bb3c:	d13a      	bne.n	1bbb4 <ProcessHashDrv+0x1dc>
   1bb3e:	4b27      	ldr	r3, [pc, #156]	; (1bbdc <ProcessHashDrv+0x204>)
   1bb40:	6818      	ldr	r0, [r3, #0]
   1bb42:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1bb46:	f7fe fcc9 	bl	1a4dc <CC_HalMaskInterrupt>
   1bb4a:	2001      	movs	r0, #1
   1bb4c:	f7fe fd90 	bl	1a670 <CC_PalPowerSaveModeSelect>
   1bb50:	bb60      	cbnz	r0, 1bbac <ProcessHashDrv+0x1d4>
   1bb52:	481f      	ldr	r0, [pc, #124]	; (1bbd0 <ProcessHashDrv+0x1f8>)
   1bb54:	f7fe fd64 	bl	1a620 <CC_PalMutexUnlock>
   1bb58:	bb10      	cbnz	r0, 1bba0 <ProcessHashDrv+0x1c8>
   1bb5a:	4628      	mov	r0, r5
   1bb5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bb60:	4b2d      	ldr	r3, [pc, #180]	; (1bc18 <ProcessHashDrv+0x240>)
   1bb62:	2204      	movs	r2, #4
   1bb64:	601a      	str	r2, [r3, #0]
   1bb66:	e7af      	b.n	1bac8 <ProcessHashDrv+0xf0>
   1bb68:	4819      	ldr	r0, [pc, #100]	; (1bbd0 <ProcessHashDrv+0x1f8>)
   1bb6a:	f04f 31ff 	mov.w	r1, #4294967295
   1bb6e:	f04f 0801 	mov.w	r8, #1
   1bb72:	f7fe fd4d 	bl	1a610 <CC_PalMutexLock>
   1bb76:	2800      	cmp	r0, #0
   1bb78:	f43f af4b 	beq.w	1ba12 <ProcessHashDrv+0x3a>
   1bb7c:	4827      	ldr	r0, [pc, #156]	; (1bc1c <ProcessHashDrv+0x244>)
   1bb7e:	f7fe f9b1 	bl	19ee4 <CC_PalAbort>
   1bb82:	2000      	movs	r0, #0
   1bb84:	f7fe fd74 	bl	1a670 <CC_PalPowerSaveModeSelect>
   1bb88:	4605      	mov	r5, r0
   1bb8a:	2800      	cmp	r0, #0
   1bb8c:	f43f af48 	beq.w	1ba20 <ProcessHashDrv+0x48>
   1bb90:	4823      	ldr	r0, [pc, #140]	; (1bc20 <ProcessHashDrv+0x248>)
   1bb92:	f7fe f9a7 	bl	19ee4 <CC_PalAbort>
   1bb96:	e743      	b.n	1ba20 <ProcessHashDrv+0x48>
   1bb98:	4d22      	ldr	r5, [pc, #136]	; (1bc24 <ProcessHashDrv+0x24c>)
   1bb9a:	4628      	mov	r0, r5
   1bb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bba0:	4821      	ldr	r0, [pc, #132]	; (1bc28 <ProcessHashDrv+0x250>)
   1bba2:	f7fe f99f 	bl	19ee4 <CC_PalAbort>
   1bba6:	4628      	mov	r0, r5
   1bba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bbac:	481f      	ldr	r0, [pc, #124]	; (1bc2c <ProcessHashDrv+0x254>)
   1bbae:	f7fe f999 	bl	19ee4 <CC_PalAbort>
   1bbb2:	e7ce      	b.n	1bb52 <ProcessHashDrv+0x17a>
   1bbb4:	f104 0008 	add.w	r0, r4, #8
   1bbb8:	2110      	movs	r1, #16
   1bbba:	f7ff fe0b 	bl	1b7d4 <CC_PalMemSetZeroPlat>
   1bbbe:	e7be      	b.n	1bb3e <ProcessHashDrv+0x166>
   1bbc0:	4d1b      	ldr	r5, [pc, #108]	; (1bc30 <ProcessHashDrv+0x258>)
   1bbc2:	4628      	mov	r0, r5
   1bbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bbc8:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   1bbcc:	e7c5      	b.n	1bb5a <ProcessHashDrv+0x182>
   1bbce:	bf00      	nop
   1bbd0:	200006dc 	.word	0x200006dc
   1bbd4:	5002b91c 	.word	0x5002b91c
   1bbd8:	5002bc20 	.word	0x5002bc20
   1bbdc:	5002ba04 	.word	0x5002ba04
   1bbe0:	5002b818 	.word	0x5002b818
   1bbe4:	5002b900 	.word	0x5002b900
   1bbe8:	5002b7c4 	.word	0x5002b7c4
   1bbec:	5002b7c0 	.word	0x5002b7c0
   1bbf0:	5002b65c 	.word	0x5002b65c
   1bbf4:	5002b650 	.word	0x5002b650
   1bbf8:	5002b910 	.word	0x5002b910
   1bbfc:	5002b684 	.word	0x5002b684
   1bc00:	5002bc28 	.word	0x5002bc28
   1bc04:	5002bc2c 	.word	0x5002bc2c
   1bc08:	5002b658 	.word	0x5002b658
   1bc0c:	5002b64c 	.word	0x5002b64c
   1bc10:	5002b7cc 	.word	0x5002b7cc
   1bc14:	5002b7d0 	.word	0x5002b7d0
   1bc18:	5002b7c8 	.word	0x5002b7c8
   1bc1c:	00021844 	.word	0x00021844
   1bc20:	0002185c 	.word	0x0002185c
   1bc24:	00f30001 	.word	0x00f30001
   1bc28:	0002189c 	.word	0x0002189c
   1bc2c:	0002187c 	.word	0x0002187c
   1bc30:	00f30003 	.word	0x00f30003

0001bc34 <FinishHashDrv>:
   1bc34:	2800      	cmp	r0, #0
   1bc36:	d03b      	beq.n	1bcb0 <FinishHashDrv+0x7c>
   1bc38:	b4f0      	push	{r4, r5, r6, r7}
   1bc3a:	b082      	sub	sp, #8
   1bc3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1bc3e:	9301      	str	r3, [sp, #4]
   1bc40:	6883      	ldr	r3, [r0, #8]
   1bc42:	fa93 fc83 	rev.w	ip, r3
   1bc46:	9b01      	ldr	r3, [sp, #4]
   1bc48:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   1bc4c:	e9d0 7603 	ldrd	r7, r6, [r0, #12]
   1bc50:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
   1bc54:	ba1b      	rev	r3, r3
   1bc56:	6243      	str	r3, [r0, #36]	; 0x24
   1bc58:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1bc5a:	9301      	str	r3, [sp, #4]
   1bc5c:	ba09      	rev	r1, r1
   1bc5e:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1bc60:	61c1      	str	r1, [r0, #28]
   1bc62:	ba12      	rev	r2, r2
   1bc64:	6202      	str	r2, [r0, #32]
   1bc66:	ba3f      	rev	r7, r7
   1bc68:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
   1bc6c:	ba36      	rev	r6, r6
   1bc6e:	ba2d      	rev	r5, r5
   1bc70:	ba24      	rev	r4, r4
   1bc72:	e9c0 c702 	strd	ip, r7, [r0, #8]
   1bc76:	e9c0 6504 	strd	r6, r5, [r0, #16]
   1bc7a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   1bc7c:	6b06      	ldr	r6, [r0, #48]	; 0x30
   1bc7e:	6b45      	ldr	r5, [r0, #52]	; 0x34
   1bc80:	6184      	str	r4, [r0, #24]
   1bc82:	fa93 fc83 	rev.w	ip, r3
   1bc86:	6b84      	ldr	r4, [r0, #56]	; 0x38
   1bc88:	9b01      	ldr	r3, [sp, #4]
   1bc8a:	ba3f      	rev	r7, r7
   1bc8c:	ba36      	rev	r6, r6
   1bc8e:	ba2d      	rev	r5, r5
   1bc90:	ba24      	rev	r4, r4
   1bc92:	ba09      	rev	r1, r1
   1bc94:	ba12      	rev	r2, r2
   1bc96:	ba1b      	rev	r3, r3
   1bc98:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
   1bc9c:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   1bca0:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   1bca4:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   1bca8:	2000      	movs	r0, #0
   1bcaa:	b002      	add	sp, #8
   1bcac:	bcf0      	pop	{r4, r5, r6, r7}
   1bcae:	4770      	bx	lr
   1bcb0:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1bcb4:	4770      	bx	lr
   1bcb6:	bf00      	nop

0001bcb8 <cc_mbedtls_aes_init>:
   1bcb8:	b510      	push	{r4, lr}
   1bcba:	4604      	mov	r4, r0
   1bcbc:	b130      	cbz	r0, 1bccc <cc_mbedtls_aes_init+0x14>
   1bcbe:	2200      	movs	r2, #0
   1bcc0:	2301      	movs	r3, #1
   1bcc2:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   1bcc6:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   1bcca:	bd10      	pop	{r4, pc}
   1bccc:	4801      	ldr	r0, [pc, #4]	; (1bcd4 <cc_mbedtls_aes_init+0x1c>)
   1bcce:	f7fe f909 	bl	19ee4 <CC_PalAbort>
   1bcd2:	e7f4      	b.n	1bcbe <cc_mbedtls_aes_init+0x6>
   1bcd4:	00021950 	.word	0x00021950

0001bcd8 <cc_mbedtls_aes_free>:
   1bcd8:	b118      	cbz	r0, 1bce2 <cc_mbedtls_aes_free+0xa>
   1bcda:	2274      	movs	r2, #116	; 0x74
   1bcdc:	2100      	movs	r1, #0
   1bcde:	f7ff bd77 	b.w	1b7d0 <CC_PalMemSetPlat>
   1bce2:	4770      	bx	lr

0001bce4 <cc_mbedtls_aes_setkey_enc>:
   1bce4:	b190      	cbz	r0, 1bd0c <cc_mbedtls_aes_setkey_enc+0x28>
   1bce6:	b1a1      	cbz	r1, 1bd12 <cc_mbedtls_aes_setkey_enc+0x2e>
   1bce8:	b510      	push	{r4, lr}
   1bcea:	2a80      	cmp	r2, #128	; 0x80
   1bcec:	f04f 0400 	mov.w	r4, #0
   1bcf0:	6384      	str	r4, [r0, #56]	; 0x38
   1bcf2:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   1bcf6:	d106      	bne.n	1bd06 <cc_mbedtls_aes_setkey_enc+0x22>
   1bcf8:	6304      	str	r4, [r0, #48]	; 0x30
   1bcfa:	2210      	movs	r2, #16
   1bcfc:	3010      	adds	r0, #16
   1bcfe:	f7ff fd65 	bl	1b7cc <CC_PalMemCopyPlat>
   1bd02:	4620      	mov	r0, r4
   1bd04:	bd10      	pop	{r4, pc}
   1bd06:	f06f 001f 	mvn.w	r0, #31
   1bd0a:	bd10      	pop	{r4, pc}
   1bd0c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1bd10:	4770      	bx	lr
   1bd12:	f06f 001f 	mvn.w	r0, #31
   1bd16:	4770      	bx	lr

0001bd18 <cc_mbedtls_aes_crypt_ecb>:
   1bd18:	b320      	cbz	r0, 1bd64 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1bd1a:	b31a      	cbz	r2, 1bd64 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1bd1c:	b313      	cbz	r3, 1bd64 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1bd1e:	2901      	cmp	r1, #1
   1bd20:	d820      	bhi.n	1bd64 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1bd22:	b570      	push	{r4, r5, r6, lr}
   1bd24:	4604      	mov	r4, r0
   1bd26:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1bd28:	b086      	sub	sp, #24
   1bd2a:	d016      	beq.n	1bd5a <cc_mbedtls_aes_crypt_ecb+0x42>
   1bd2c:	2901      	cmp	r1, #1
   1bd2e:	d116      	bne.n	1bd5e <cc_mbedtls_aes_crypt_ecb+0x46>
   1bd30:	2100      	movs	r1, #0
   1bd32:	2510      	movs	r5, #16
   1bd34:	ae04      	add	r6, sp, #16
   1bd36:	6361      	str	r1, [r4, #52]	; 0x34
   1bd38:	4610      	mov	r0, r2
   1bd3a:	e9cd 5600 	strd	r5, r6, [sp]
   1bd3e:	aa02      	add	r2, sp, #8
   1bd40:	4629      	mov	r1, r5
   1bd42:	f7ff fdeb 	bl	1b91c <SetDataBuffersInfo>
   1bd46:	b950      	cbnz	r0, 1bd5e <cc_mbedtls_aes_crypt_ecb+0x46>
   1bd48:	462b      	mov	r3, r5
   1bd4a:	4632      	mov	r2, r6
   1bd4c:	a902      	add	r1, sp, #8
   1bd4e:	4620      	mov	r0, r4
   1bd50:	f000 f8d6 	bl	1bf00 <ProcessAesDrv>
   1bd54:	b918      	cbnz	r0, 1bd5e <cc_mbedtls_aes_crypt_ecb+0x46>
   1bd56:	b006      	add	sp, #24
   1bd58:	bd70      	pop	{r4, r5, r6, pc}
   1bd5a:	2900      	cmp	r1, #0
   1bd5c:	d0e8      	beq.n	1bd30 <cc_mbedtls_aes_crypt_ecb+0x18>
   1bd5e:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1bd62:	e7f8      	b.n	1bd56 <cc_mbedtls_aes_crypt_ecb+0x3e>
   1bd64:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1bd68:	4770      	bx	lr
   1bd6a:	bf00      	nop

0001bd6c <CC_PalDataBufferAttrGet>:
   1bd6c:	2000      	movs	r0, #0
   1bd6e:	7018      	strb	r0, [r3, #0]
   1bd70:	4770      	bx	lr
   1bd72:	bf00      	nop

0001bd74 <LoadAesKey>:
   1bd74:	2800      	cmp	r0, #0
   1bd76:	d03b      	beq.n	1bdf0 <LoadAesKey+0x7c>
   1bd78:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   1bd7c:	2b00      	cmp	r3, #0
   1bd7e:	d02c      	beq.n	1bdda <LoadAesKey+0x66>
   1bd80:	2b03      	cmp	r3, #3
   1bd82:	b510      	push	{r4, lr}
   1bd84:	d00f      	beq.n	1bda6 <LoadAesKey+0x32>
   1bd86:	481c      	ldr	r0, [pc, #112]	; (1bdf8 <LoadAesKey+0x84>)
   1bd88:	4c1c      	ldr	r4, [pc, #112]	; (1bdfc <LoadAesKey+0x88>)
   1bd8a:	6822      	ldr	r2, [r4, #0]
   1bd8c:	4b1c      	ldr	r3, [pc, #112]	; (1be00 <LoadAesKey+0x8c>)
   1bd8e:	6812      	ldr	r2, [r2, #0]
   1bd90:	601a      	str	r2, [r3, #0]
   1bd92:	6822      	ldr	r2, [r4, #0]
   1bd94:	6852      	ldr	r2, [r2, #4]
   1bd96:	605a      	str	r2, [r3, #4]
   1bd98:	6822      	ldr	r2, [r4, #0]
   1bd9a:	6892      	ldr	r2, [r2, #8]
   1bd9c:	609a      	str	r2, [r3, #8]
   1bd9e:	6822      	ldr	r2, [r4, #0]
   1bda0:	68d2      	ldr	r2, [r2, #12]
   1bda2:	60da      	str	r2, [r3, #12]
   1bda4:	bd10      	pop	{r4, pc}
   1bda6:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1bda8:	6c00      	ldr	r0, [r0, #64]	; 0x40
   1bdaa:	4c14      	ldr	r4, [pc, #80]	; (1bdfc <LoadAesKey+0x88>)
   1bdac:	f000 fba4 	bl	1c4f8 <kmu_validate_kdr_slot_and_size>
   1bdb0:	2800      	cmp	r0, #0
   1bdb2:	d1ea      	bne.n	1bd8a <LoadAesKey+0x16>
   1bdb4:	6821      	ldr	r1, [r4, #0]
   1bdb6:	4a12      	ldr	r2, [pc, #72]	; (1be00 <LoadAesKey+0x8c>)
   1bdb8:	6809      	ldr	r1, [r1, #0]
   1bdba:	6011      	str	r1, [r2, #0]
   1bdbc:	6821      	ldr	r1, [r4, #0]
   1bdbe:	4b11      	ldr	r3, [pc, #68]	; (1be04 <LoadAesKey+0x90>)
   1bdc0:	6849      	ldr	r1, [r1, #4]
   1bdc2:	6019      	str	r1, [r3, #0]
   1bdc4:	6821      	ldr	r1, [r4, #0]
   1bdc6:	6889      	ldr	r1, [r1, #8]
   1bdc8:	6091      	str	r1, [r2, #8]
   1bdca:	6822      	ldr	r2, [r4, #0]
   1bdcc:	68d2      	ldr	r2, [r2, #12]
   1bdce:	609a      	str	r2, [r3, #8]
   1bdd0:	f000 fb9e 	bl	1c510 <kmu_use_kdr_key>
   1bdd4:	2800      	cmp	r0, #0
   1bdd6:	d1d8      	bne.n	1bd8a <LoadAesKey+0x16>
   1bdd8:	bd10      	pop	{r4, pc}
   1bdda:	4a09      	ldr	r2, [pc, #36]	; (1be00 <LoadAesKey+0x8c>)
   1bddc:	6901      	ldr	r1, [r0, #16]
   1bdde:	6011      	str	r1, [r2, #0]
   1bde0:	6941      	ldr	r1, [r0, #20]
   1bde2:	6051      	str	r1, [r2, #4]
   1bde4:	6981      	ldr	r1, [r0, #24]
   1bde6:	6091      	str	r1, [r2, #8]
   1bde8:	69c1      	ldr	r1, [r0, #28]
   1bdea:	60d1      	str	r1, [r2, #12]
   1bdec:	4618      	mov	r0, r3
   1bdee:	4770      	bx	lr
   1bdf0:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   1bdf4:	4770      	bx	lr
   1bdf6:	bf00      	nop
   1bdf8:	00f10009 	.word	0x00f10009
   1bdfc:	200006cc 	.word	0x200006cc
   1be00:	5002b400 	.word	0x5002b400
   1be04:	5002b404 	.word	0x5002b404

0001be08 <InitAes.part.0>:
   1be08:	4a32      	ldr	r2, [pc, #200]	; (1bed4 <InitAes.part.0+0xcc>)
   1be0a:	b510      	push	{r4, lr}
   1be0c:	4604      	mov	r4, r0
   1be0e:	6813      	ldr	r3, [r2, #0]
   1be10:	2b00      	cmp	r3, #0
   1be12:	d1fc      	bne.n	1be0e <InitAes.part.0+0x6>
   1be14:	4a30      	ldr	r2, [pc, #192]	; (1bed8 <InitAes.part.0+0xd0>)
   1be16:	6813      	ldr	r3, [r2, #0]
   1be18:	2b00      	cmp	r3, #0
   1be1a:	d1fc      	bne.n	1be16 <InitAes.part.0+0xe>
   1be1c:	4a2f      	ldr	r2, [pc, #188]	; (1bedc <InitAes.part.0+0xd4>)
   1be1e:	6813      	ldr	r3, [r2, #0]
   1be20:	2b00      	cmp	r3, #0
   1be22:	d1fc      	bne.n	1be1e <InitAes.part.0+0x16>
   1be24:	4a2e      	ldr	r2, [pc, #184]	; (1bee0 <InitAes.part.0+0xd8>)
   1be26:	6813      	ldr	r3, [r2, #0]
   1be28:	2b00      	cmp	r3, #0
   1be2a:	d1fc      	bne.n	1be26 <InitAes.part.0+0x1e>
   1be2c:	4a2d      	ldr	r2, [pc, #180]	; (1bee4 <InitAes.part.0+0xdc>)
   1be2e:	6813      	ldr	r3, [r2, #0]
   1be30:	2b00      	cmp	r3, #0
   1be32:	d1fc      	bne.n	1be2e <InitAes.part.0+0x26>
   1be34:	4a2c      	ldr	r2, [pc, #176]	; (1bee8 <InitAes.part.0+0xe0>)
   1be36:	6813      	ldr	r3, [r2, #0]
   1be38:	2b00      	cmp	r3, #0
   1be3a:	d1fc      	bne.n	1be36 <InitAes.part.0+0x2e>
   1be3c:	f04f 30ff 	mov.w	r0, #4294967295
   1be40:	f7fe fb3e 	bl	1a4c0 <CC_HalClearInterruptBit>
   1be44:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1be46:	f023 0304 	bic.w	r3, r3, #4
   1be4a:	2b03      	cmp	r3, #3
   1be4c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1be4e:	d036      	beq.n	1bebe <InitAes.part.0+0xb6>
   1be50:	2b01      	cmp	r3, #1
   1be52:	4b26      	ldr	r3, [pc, #152]	; (1beec <InitAes.part.0+0xe4>)
   1be54:	6818      	ldr	r0, [r3, #0]
   1be56:	bf0c      	ite	eq
   1be58:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   1be5c:	f020 0020 	bicne.w	r0, r0, #32
   1be60:	f7fe fb3c 	bl	1a4dc <CC_HalMaskInterrupt>
   1be64:	4b22      	ldr	r3, [pc, #136]	; (1bef0 <InitAes.part.0+0xe8>)
   1be66:	4a1b      	ldr	r2, [pc, #108]	; (1bed4 <InitAes.part.0+0xcc>)
   1be68:	2101      	movs	r1, #1
   1be6a:	6019      	str	r1, [r3, #0]
   1be6c:	6813      	ldr	r3, [r2, #0]
   1be6e:	2b00      	cmp	r3, #0
   1be70:	d1fc      	bne.n	1be6c <InitAes.part.0+0x64>
   1be72:	4a19      	ldr	r2, [pc, #100]	; (1bed8 <InitAes.part.0+0xd0>)
   1be74:	6813      	ldr	r3, [r2, #0]
   1be76:	2b00      	cmp	r3, #0
   1be78:	d1fc      	bne.n	1be74 <InitAes.part.0+0x6c>
   1be7a:	491e      	ldr	r1, [pc, #120]	; (1bef4 <InitAes.part.0+0xec>)
   1be7c:	4a15      	ldr	r2, [pc, #84]	; (1bed4 <InitAes.part.0+0xcc>)
   1be7e:	600b      	str	r3, [r1, #0]
   1be80:	6813      	ldr	r3, [r2, #0]
   1be82:	2b00      	cmp	r3, #0
   1be84:	d1fc      	bne.n	1be80 <InitAes.part.0+0x78>
   1be86:	4a14      	ldr	r2, [pc, #80]	; (1bed8 <InitAes.part.0+0xd0>)
   1be88:	6813      	ldr	r3, [r2, #0]
   1be8a:	2b00      	cmp	r3, #0
   1be8c:	d1fc      	bne.n	1be88 <InitAes.part.0+0x80>
   1be8e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1be90:	f022 0104 	bic.w	r1, r2, #4
   1be94:	2903      	cmp	r1, #3
   1be96:	bf18      	it	ne
   1be98:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   1be9a:	4917      	ldr	r1, [pc, #92]	; (1bef8 <InitAes.part.0+0xf0>)
   1be9c:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1bea0:	bf18      	it	ne
   1bea2:	f003 0301 	andne.w	r3, r3, #1
   1bea6:	f002 021c 	and.w	r2, r2, #28
   1beaa:	4313      	orrs	r3, r2
   1beac:	600b      	str	r3, [r1, #0]
   1beae:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1beb0:	2b07      	cmp	r3, #7
   1beb2:	d102      	bne.n	1beba <InitAes.part.0+0xb2>
   1beb4:	4b11      	ldr	r3, [pc, #68]	; (1befc <InitAes.part.0+0xf4>)
   1beb6:	2201      	movs	r2, #1
   1beb8:	601a      	str	r2, [r3, #0]
   1beba:	2000      	movs	r0, #0
   1bebc:	bd10      	pop	{r4, pc}
   1bebe:	2b01      	cmp	r3, #1
   1bec0:	4b0a      	ldr	r3, [pc, #40]	; (1beec <InitAes.part.0+0xe4>)
   1bec2:	6818      	ldr	r0, [r3, #0]
   1bec4:	bf0c      	ite	eq
   1bec6:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   1beca:	f020 0010 	bicne.w	r0, r0, #16
   1bece:	f7fe fb05 	bl	1a4dc <CC_HalMaskInterrupt>
   1bed2:	e7c7      	b.n	1be64 <InitAes.part.0+0x5c>
   1bed4:	5002b910 	.word	0x5002b910
   1bed8:	5002b470 	.word	0x5002b470
   1bedc:	5002bd20 	.word	0x5002bd20
   1bee0:	5002bc20 	.word	0x5002bc20
   1bee4:	5002bd38 	.word	0x5002bd38
   1bee8:	5002bc38 	.word	0x5002bc38
   1beec:	5002ba04 	.word	0x5002ba04
   1bef0:	5002b900 	.word	0x5002b900
   1bef4:	5002b4bc 	.word	0x5002b4bc
   1bef8:	5002b4c0 	.word	0x5002b4c0
   1befc:	5002b47c 	.word	0x5002b47c

0001bf00 <ProcessAesDrv>:
   1bf00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf04:	b087      	sub	sp, #28
   1bf06:	2900      	cmp	r1, #0
   1bf08:	f000 80a5 	beq.w	1c056 <ProcessAesDrv+0x156>
   1bf0c:	4616      	mov	r6, r2
   1bf0e:	2a00      	cmp	r2, #0
   1bf10:	f000 80a1 	beq.w	1c056 <ProcessAesDrv+0x156>
   1bf14:	4604      	mov	r4, r0
   1bf16:	2800      	cmp	r0, #0
   1bf18:	f000 813f 	beq.w	1c19a <ProcessAesDrv+0x29a>
   1bf1c:	461f      	mov	r7, r3
   1bf1e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1bf20:	460d      	mov	r5, r1
   1bf22:	2b00      	cmp	r3, #0
   1bf24:	d150      	bne.n	1bfc8 <ProcessAesDrv+0xc8>
   1bf26:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   1bf2a:	d252      	bcs.n	1bfd2 <ProcessAesDrv+0xd2>
   1bf2c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1bf30:	2b04      	cmp	r3, #4
   1bf32:	f000 8109 	beq.w	1c148 <ProcessAesDrv+0x248>
   1bf36:	f04f 0800 	mov.w	r8, #0
   1bf3a:	48aa      	ldr	r0, [pc, #680]	; (1c1e4 <ProcessAesDrv+0x2e4>)
   1bf3c:	f04f 31ff 	mov.w	r1, #4294967295
   1bf40:	f7fe fb66 	bl	1a610 <CC_PalMutexLock>
   1bf44:	2800      	cmp	r0, #0
   1bf46:	f040 80de 	bne.w	1c106 <ProcessAesDrv+0x206>
   1bf4a:	2000      	movs	r0, #0
   1bf4c:	f7fe fb90 	bl	1a670 <CC_PalPowerSaveModeSelect>
   1bf50:	2800      	cmp	r0, #0
   1bf52:	f040 80e1 	bne.w	1c118 <ProcessAesDrv+0x218>
   1bf56:	4ba4      	ldr	r3, [pc, #656]	; (1c1e8 <ProcessAesDrv+0x2e8>)
   1bf58:	4aa4      	ldr	r2, [pc, #656]	; (1c1ec <ProcessAesDrv+0x2ec>)
   1bf5a:	2101      	movs	r1, #1
   1bf5c:	6019      	str	r1, [r3, #0]
   1bf5e:	6813      	ldr	r3, [r2, #0]
   1bf60:	2b00      	cmp	r3, #0
   1bf62:	d1fc      	bne.n	1bf5e <ProcessAesDrv+0x5e>
   1bf64:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1bf66:	2b03      	cmp	r3, #3
   1bf68:	dc39      	bgt.n	1bfde <ProcessAesDrv+0xde>
   1bf6a:	2b00      	cmp	r3, #0
   1bf6c:	da3a      	bge.n	1bfe4 <ProcessAesDrv+0xe4>
   1bf6e:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 1c238 <ProcessAesDrv+0x338>
   1bf72:	4a9e      	ldr	r2, [pc, #632]	; (1c1ec <ProcessAesDrv+0x2ec>)
   1bf74:	6813      	ldr	r3, [r2, #0]
   1bf76:	2b00      	cmp	r3, #0
   1bf78:	d1fc      	bne.n	1bf74 <ProcessAesDrv+0x74>
   1bf7a:	f1b8 0f00 	cmp.w	r8, #0
   1bf7e:	f040 80da 	bne.w	1c136 <ProcessAesDrv+0x236>
   1bf82:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1bf84:	f023 0304 	bic.w	r3, r3, #4
   1bf88:	2b03      	cmp	r3, #3
   1bf8a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1bf8c:	d058      	beq.n	1c040 <ProcessAesDrv+0x140>
   1bf8e:	2b01      	cmp	r3, #1
   1bf90:	4b97      	ldr	r3, [pc, #604]	; (1c1f0 <ProcessAesDrv+0x2f0>)
   1bf92:	6818      	ldr	r0, [r3, #0]
   1bf94:	bf0c      	ite	eq
   1bf96:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   1bf9a:	f040 0020 	orrne.w	r0, r0, #32
   1bf9e:	f7fe fa9d 	bl	1a4dc <CC_HalMaskInterrupt>
   1bfa2:	4b91      	ldr	r3, [pc, #580]	; (1c1e8 <ProcessAesDrv+0x2e8>)
   1bfa4:	2200      	movs	r2, #0
   1bfa6:	601a      	str	r2, [r3, #0]
   1bfa8:	2001      	movs	r0, #1
   1bfaa:	f7fe fb61 	bl	1a670 <CC_PalPowerSaveModeSelect>
   1bfae:	2800      	cmp	r0, #0
   1bfb0:	f040 80bd 	bne.w	1c12e <ProcessAesDrv+0x22e>
   1bfb4:	488b      	ldr	r0, [pc, #556]	; (1c1e4 <ProcessAesDrv+0x2e4>)
   1bfb6:	f7fe fb33 	bl	1a620 <CC_PalMutexUnlock>
   1bfba:	2800      	cmp	r0, #0
   1bfbc:	f040 80b0 	bne.w	1c120 <ProcessAesDrv+0x220>
   1bfc0:	4648      	mov	r0, r9
   1bfc2:	b007      	add	sp, #28
   1bfc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bfc8:	2b01      	cmp	r3, #1
   1bfca:	d1af      	bne.n	1bf2c <ProcessAesDrv+0x2c>
   1bfcc:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   1bfd0:	d3ac      	bcc.n	1bf2c <ProcessAesDrv+0x2c>
   1bfd2:	f8df 9268 	ldr.w	r9, [pc, #616]	; 1c23c <ProcessAesDrv+0x33c>
   1bfd6:	4648      	mov	r0, r9
   1bfd8:	b007      	add	sp, #28
   1bfda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bfde:	3b06      	subs	r3, #6
   1bfe0:	2b01      	cmp	r3, #1
   1bfe2:	d8c4      	bhi.n	1bf6e <ProcessAesDrv+0x6e>
   1bfe4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1bfe6:	2b01      	cmp	r3, #1
   1bfe8:	f200 80d4 	bhi.w	1c194 <ProcessAesDrv+0x294>
   1bfec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1bfee:	2b01      	cmp	r3, #1
   1bff0:	d837      	bhi.n	1c062 <ProcessAesDrv+0x162>
   1bff2:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1bff4:	2b01      	cmp	r3, #1
   1bff6:	f200 8131 	bhi.w	1c25c <ProcessAesDrv+0x35c>
   1bffa:	4620      	mov	r0, r4
   1bffc:	f7ff ff04 	bl	1be08 <InitAes.part.0>
   1c000:	4681      	mov	r9, r0
   1c002:	2800      	cmp	r0, #0
   1c004:	d1b5      	bne.n	1bf72 <ProcessAesDrv+0x72>
   1c006:	4620      	mov	r0, r4
   1c008:	f7ff feb4 	bl	1bd74 <LoadAesKey>
   1c00c:	4681      	mov	r9, r0
   1c00e:	2800      	cmp	r0, #0
   1c010:	d1af      	bne.n	1bf72 <ProcessAesDrv+0x72>
   1c012:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1c014:	2b07      	cmp	r3, #7
   1c016:	d8aa      	bhi.n	1bf6e <ProcessAesDrv+0x6e>
   1c018:	a201      	add	r2, pc, #4	; (adr r2, 1c020 <ProcessAesDrv+0x120>)
   1c01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1c01e:	bf00      	nop
   1c020:	0001c07d 	.word	0x0001c07d
   1c024:	0001c069 	.word	0x0001c069
   1c028:	0001c1d9 	.word	0x0001c1d9
   1c02c:	0001c069 	.word	0x0001c069
   1c030:	0001bf6f 	.word	0x0001bf6f
   1c034:	0001bf6f 	.word	0x0001bf6f
   1c038:	0001c1d9 	.word	0x0001c1d9
   1c03c:	0001c069 	.word	0x0001c069
   1c040:	2b01      	cmp	r3, #1
   1c042:	4b6b      	ldr	r3, [pc, #428]	; (1c1f0 <ProcessAesDrv+0x2f0>)
   1c044:	6818      	ldr	r0, [r3, #0]
   1c046:	bf0c      	ite	eq
   1c048:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   1c04c:	f040 0010 	orrne.w	r0, r0, #16
   1c050:	f7fe fa44 	bl	1a4dc <CC_HalMaskInterrupt>
   1c054:	e7a5      	b.n	1bfa2 <ProcessAesDrv+0xa2>
   1c056:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 1c240 <ProcessAesDrv+0x340>
   1c05a:	4648      	mov	r0, r9
   1c05c:	b007      	add	sp, #28
   1c05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c062:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 1c244 <ProcessAesDrv+0x344>
   1c066:	e784      	b.n	1bf72 <ProcessAesDrv+0x72>
   1c068:	4b62      	ldr	r3, [pc, #392]	; (1c1f4 <ProcessAesDrv+0x2f4>)
   1c06a:	6822      	ldr	r2, [r4, #0]
   1c06c:	601a      	str	r2, [r3, #0]
   1c06e:	6862      	ldr	r2, [r4, #4]
   1c070:	605a      	str	r2, [r3, #4]
   1c072:	68a2      	ldr	r2, [r4, #8]
   1c074:	609a      	str	r2, [r3, #8]
   1c076:	68e2      	ldr	r2, [r4, #12]
   1c078:	60da      	str	r2, [r3, #12]
   1c07a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1c07c:	682a      	ldr	r2, [r5, #0]
   1c07e:	f023 0304 	bic.w	r3, r3, #4
   1c082:	2b03      	cmp	r3, #3
   1c084:	d009      	beq.n	1c09a <ProcessAesDrv+0x19a>
   1c086:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1c088:	6833      	ldr	r3, [r6, #0]
   1c08a:	2901      	cmp	r1, #1
   1c08c:	bf07      	ittee	eq
   1c08e:	485a      	ldreq	r0, [pc, #360]	; (1c1f8 <ProcessAesDrv+0x2f8>)
   1c090:	495a      	ldreq	r1, [pc, #360]	; (1c1fc <ProcessAesDrv+0x2fc>)
   1c092:	485b      	ldrne	r0, [pc, #364]	; (1c200 <ProcessAesDrv+0x300>)
   1c094:	495b      	ldrne	r1, [pc, #364]	; (1c204 <ProcessAesDrv+0x304>)
   1c096:	6003      	str	r3, [r0, #0]
   1c098:	600f      	str	r7, [r1, #0]
   1c09a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1c09c:	2b01      	cmp	r3, #1
   1c09e:	bf0b      	itete	eq
   1c0a0:	4b59      	ldreq	r3, [pc, #356]	; (1c208 <ProcessAesDrv+0x308>)
   1c0a2:	4b5a      	ldrne	r3, [pc, #360]	; (1c20c <ProcessAesDrv+0x30c>)
   1c0a4:	495a      	ldreq	r1, [pc, #360]	; (1c210 <ProcessAesDrv+0x310>)
   1c0a6:	495b      	ldrne	r1, [pc, #364]	; (1c214 <ProcessAesDrv+0x314>)
   1c0a8:	600a      	str	r2, [r1, #0]
   1c0aa:	601f      	str	r7, [r3, #0]
   1c0ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1c0ae:	f023 0304 	bic.w	r3, r3, #4
   1c0b2:	2b03      	cmp	r3, #3
   1c0b4:	d074      	beq.n	1c1a0 <ProcessAesDrv+0x2a0>
   1c0b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1c0b8:	2b01      	cmp	r3, #1
   1c0ba:	bf0c      	ite	eq
   1c0bc:	2080      	moveq	r0, #128	; 0x80
   1c0be:	2020      	movne	r0, #32
   1c0c0:	f7fe fa12 	bl	1a4e8 <CC_HalWaitInterrupt>
   1c0c4:	4681      	mov	r9, r0
   1c0c6:	2800      	cmp	r0, #0
   1c0c8:	f47f af53 	bne.w	1bf72 <ProcessAesDrv+0x72>
   1c0cc:	4b47      	ldr	r3, [pc, #284]	; (1c1ec <ProcessAesDrv+0x2ec>)
   1c0ce:	681a      	ldr	r2, [r3, #0]
   1c0d0:	2a00      	cmp	r2, #0
   1c0d2:	d1fc      	bne.n	1c0ce <ProcessAesDrv+0x1ce>
   1c0d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1c0d6:	3b01      	subs	r3, #1
   1c0d8:	4691      	mov	r9, r2
   1c0da:	2b06      	cmp	r3, #6
   1c0dc:	d810      	bhi.n	1c100 <ProcessAesDrv+0x200>
   1c0de:	e8df f003 	tbb	[pc, r3]
   1c0e2:	7d04      	.short	0x7d04
   1c0e4:	7d0f0f04 	.word	0x7d0f0f04
   1c0e8:	04          	.byte	0x04
   1c0e9:	00          	.byte	0x00
   1c0ea:	4a42      	ldr	r2, [pc, #264]	; (1c1f4 <ProcessAesDrv+0x2f4>)
   1c0ec:	4b4a      	ldr	r3, [pc, #296]	; (1c218 <ProcessAesDrv+0x318>)
   1c0ee:	6812      	ldr	r2, [r2, #0]
   1c0f0:	6022      	str	r2, [r4, #0]
   1c0f2:	681a      	ldr	r2, [r3, #0]
   1c0f4:	6062      	str	r2, [r4, #4]
   1c0f6:	685a      	ldr	r2, [r3, #4]
   1c0f8:	60a2      	str	r2, [r4, #8]
   1c0fa:	3308      	adds	r3, #8
   1c0fc:	681b      	ldr	r3, [r3, #0]
   1c0fe:	60e3      	str	r3, [r4, #12]
   1c100:	2301      	movs	r3, #1
   1c102:	65a3      	str	r3, [r4, #88]	; 0x58
   1c104:	e735      	b.n	1bf72 <ProcessAesDrv+0x72>
   1c106:	4845      	ldr	r0, [pc, #276]	; (1c21c <ProcessAesDrv+0x31c>)
   1c108:	f7fd feec 	bl	19ee4 <CC_PalAbort>
   1c10c:	2000      	movs	r0, #0
   1c10e:	f7fe faaf 	bl	1a670 <CC_PalPowerSaveModeSelect>
   1c112:	2800      	cmp	r0, #0
   1c114:	f43f af1f 	beq.w	1bf56 <ProcessAesDrv+0x56>
   1c118:	4841      	ldr	r0, [pc, #260]	; (1c220 <ProcessAesDrv+0x320>)
   1c11a:	f7fd fee3 	bl	19ee4 <CC_PalAbort>
   1c11e:	e71a      	b.n	1bf56 <ProcessAesDrv+0x56>
   1c120:	4840      	ldr	r0, [pc, #256]	; (1c224 <ProcessAesDrv+0x324>)
   1c122:	f7fd fedf 	bl	19ee4 <CC_PalAbort>
   1c126:	4648      	mov	r0, r9
   1c128:	b007      	add	sp, #28
   1c12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c12e:	483e      	ldr	r0, [pc, #248]	; (1c228 <ProcessAesDrv+0x328>)
   1c130:	f7fd fed8 	bl	19ee4 <CC_PalAbort>
   1c134:	e73e      	b.n	1bfb4 <ProcessAesDrv+0xb4>
   1c136:	2304      	movs	r3, #4
   1c138:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1c13c:	2120      	movs	r1, #32
   1c13e:	f104 0010 	add.w	r0, r4, #16
   1c142:	f7ff fb47 	bl	1b7d4 <CC_PalMemSetZeroPlat>
   1c146:	e71c      	b.n	1bf82 <ProcessAesDrv+0x82>
   1c148:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1c14a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1c14c:	f000 f9c8 	bl	1c4e0 <kmu_validate_slot_and_size>
   1c150:	b9e8      	cbnz	r0, 1c18e <ProcessAesDrv+0x28e>
   1c152:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1c248 <ProcessAesDrv+0x348>
   1c156:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 1c24c <ProcessAesDrv+0x34c>
   1c15a:	f8d8 3000 	ldr.w	r3, [r8]
   1c15e:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 1c250 <ProcessAesDrv+0x350>
   1c162:	681b      	ldr	r3, [r3, #0]
   1c164:	f8cb 3000 	str.w	r3, [fp]
   1c168:	f8d8 3000 	ldr.w	r3, [r8]
   1c16c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 1c254 <ProcessAesDrv+0x354>
   1c170:	685b      	ldr	r3, [r3, #4]
   1c172:	f8ca 3000 	str.w	r3, [sl]
   1c176:	f8d8 3000 	ldr.w	r3, [r8]
   1c17a:	4a2c      	ldr	r2, [pc, #176]	; (1c22c <ProcessAesDrv+0x32c>)
   1c17c:	689b      	ldr	r3, [r3, #8]
   1c17e:	f8c9 3000 	str.w	r3, [r9]
   1c182:	f8d8 3000 	ldr.w	r3, [r8]
   1c186:	68db      	ldr	r3, [r3, #12]
   1c188:	6013      	str	r3, [r2, #0]
   1c18a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1c18c:	b171      	cbz	r1, 1c1ac <ProcessAesDrv+0x2ac>
   1c18e:	f04f 0801 	mov.w	r8, #1
   1c192:	e6d2      	b.n	1bf3a <ProcessAesDrv+0x3a>
   1c194:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 1c258 <ProcessAesDrv+0x358>
   1c198:	e6eb      	b.n	1bf72 <ProcessAesDrv+0x72>
   1c19a:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   1c19e:	e70f      	b.n	1bfc0 <ProcessAesDrv+0xc0>
   1c1a0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1c1a2:	2b01      	cmp	r3, #1
   1c1a4:	bf0c      	ite	eq
   1c1a6:	2040      	moveq	r0, #64	; 0x40
   1c1a8:	2010      	movne	r0, #16
   1c1aa:	e789      	b.n	1c0c0 <ProcessAesDrv+0x1c0>
   1c1ac:	f104 0310 	add.w	r3, r4, #16
   1c1b0:	4618      	mov	r0, r3
   1c1b2:	9305      	str	r3, [sp, #20]
   1c1b4:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   1c1b8:	e9cd 3200 	strd	r3, r2, [sp]
   1c1bc:	9002      	str	r0, [sp, #8]
   1c1be:	2010      	movs	r0, #16
   1c1c0:	9003      	str	r0, [sp, #12]
   1c1c2:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   1c1c6:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1c1c8:	f000 f9ae 	bl	1c528 <kmu_derive_cmac>
   1c1cc:	2800      	cmp	r0, #0
   1c1ce:	d148      	bne.n	1c262 <ProcessAesDrv+0x362>
   1c1d0:	2300      	movs	r3, #0
   1c1d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1c1d6:	e7da      	b.n	1c18e <ProcessAesDrv+0x28e>
   1c1d8:	4b15      	ldr	r3, [pc, #84]	; (1c230 <ProcessAesDrv+0x330>)
   1c1da:	e746      	b.n	1c06a <ProcessAesDrv+0x16a>
   1c1dc:	4a14      	ldr	r2, [pc, #80]	; (1c230 <ProcessAesDrv+0x330>)
   1c1de:	4b15      	ldr	r3, [pc, #84]	; (1c234 <ProcessAesDrv+0x334>)
   1c1e0:	e785      	b.n	1c0ee <ProcessAesDrv+0x1ee>
   1c1e2:	bf00      	nop
   1c1e4:	200006dc 	.word	0x200006dc
   1c1e8:	5002b810 	.word	0x5002b810
   1c1ec:	5002b910 	.word	0x5002b910
   1c1f0:	5002ba04 	.word	0x5002ba04
   1c1f4:	5002b440 	.word	0x5002b440
   1c1f8:	5002bd28 	.word	0x5002bd28
   1c1fc:	5002bd2c 	.word	0x5002bd2c
   1c200:	5002bd30 	.word	0x5002bd30
   1c204:	5002bd34 	.word	0x5002bd34
   1c208:	5002bc2c 	.word	0x5002bc2c
   1c20c:	5002bc34 	.word	0x5002bc34
   1c210:	5002bc28 	.word	0x5002bc28
   1c214:	5002bc30 	.word	0x5002bc30
   1c218:	5002b444 	.word	0x5002b444
   1c21c:	00021844 	.word	0x00021844
   1c220:	0002185c 	.word	0x0002185c
   1c224:	0002189c 	.word	0x0002189c
   1c228:	0002187c 	.word	0x0002187c
   1c22c:	5002b40c 	.word	0x5002b40c
   1c230:	5002b460 	.word	0x5002b460
   1c234:	5002b464 	.word	0x5002b464
   1c238:	00f10001 	.word	0x00f10001
   1c23c:	00f10005 	.word	0x00f10005
   1c240:	00f1000b 	.word	0x00f1000b
   1c244:	00f10003 	.word	0x00f10003
   1c248:	200006cc 	.word	0x200006cc
   1c24c:	5002b400 	.word	0x5002b400
   1c250:	5002b404 	.word	0x5002b404
   1c254:	5002b408 	.word	0x5002b408
   1c258:	00f10002 	.word	0x00f10002
   1c25c:	f8df 9038 	ldr.w	r9, [pc, #56]	; 1c298 <ProcessAesDrv+0x398>
   1c260:	e687      	b.n	1bf72 <ProcessAesDrv+0x72>
   1c262:	f8d8 3000 	ldr.w	r3, [r8]
   1c266:	4a0b      	ldr	r2, [pc, #44]	; (1c294 <ProcessAesDrv+0x394>)
   1c268:	681b      	ldr	r3, [r3, #0]
   1c26a:	f8cb 3000 	str.w	r3, [fp]
   1c26e:	f8d8 3000 	ldr.w	r3, [r8]
   1c272:	685b      	ldr	r3, [r3, #4]
   1c274:	f8ca 3000 	str.w	r3, [sl]
   1c278:	f8d8 3000 	ldr.w	r3, [r8]
   1c27c:	689b      	ldr	r3, [r3, #8]
   1c27e:	f8c9 3000 	str.w	r3, [r9]
   1c282:	f8d8 3000 	ldr.w	r3, [r8]
   1c286:	68db      	ldr	r3, [r3, #12]
   1c288:	6013      	str	r3, [r2, #0]
   1c28a:	9805      	ldr	r0, [sp, #20]
   1c28c:	2110      	movs	r1, #16
   1c28e:	f7ff faa1 	bl	1b7d4 <CC_PalMemSetZeroPlat>
   1c292:	e79d      	b.n	1c1d0 <ProcessAesDrv+0x2d0>
   1c294:	5002b40c 	.word	0x5002b40c
   1c298:	00f10004 	.word	0x00f10004

0001c29c <FinishAesDrv>:
   1c29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c2a0:	b301      	cbz	r1, 1c2e4 <FinishAesDrv+0x48>
   1c2a2:	b1fa      	cbz	r2, 1c2e4 <FinishAesDrv+0x48>
   1c2a4:	4604      	mov	r4, r0
   1c2a6:	2800      	cmp	r0, #0
   1c2a8:	d07a      	beq.n	1c3a0 <FinishAesDrv+0x104>
   1c2aa:	461d      	mov	r5, r3
   1c2ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1c2ae:	2b07      	cmp	r3, #7
   1c2b0:	460e      	mov	r6, r1
   1c2b2:	d01b      	beq.n	1c2ec <FinishAesDrv+0x50>
   1c2b4:	b95d      	cbnz	r5, 1c2ce <FinishAesDrv+0x32>
   1c2b6:	2b03      	cmp	r3, #3
   1c2b8:	d110      	bne.n	1c2dc <FinishAesDrv+0x40>
   1c2ba:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1c2bc:	b973      	cbnz	r3, 1c2dc <FinishAesDrv+0x40>
   1c2be:	f100 0364 	add.w	r3, r0, #100	; 0x64
   1c2c2:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   1c2c6:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   1c2ca:	600b      	str	r3, [r1, #0]
   1c2cc:	2510      	movs	r5, #16
   1c2ce:	462b      	mov	r3, r5
   1c2d0:	4631      	mov	r1, r6
   1c2d2:	4620      	mov	r0, r4
   1c2d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c2d8:	f7ff be12 	b.w	1bf00 <ProcessAesDrv>
   1c2dc:	462f      	mov	r7, r5
   1c2de:	4638      	mov	r0, r7
   1c2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c2e4:	4f66      	ldr	r7, [pc, #408]	; (1c480 <FinishAesDrv+0x1e4>)
   1c2e6:	4638      	mov	r0, r7
   1c2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c2ec:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1c2ee:	2b00      	cmp	r3, #0
   1c2f0:	d159      	bne.n	1c3a6 <FinishAesDrv+0x10a>
   1c2f2:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1c2f6:	d25b      	bcs.n	1c3b0 <FinishAesDrv+0x114>
   1c2f8:	b915      	cbnz	r5, 1c300 <FinishAesDrv+0x64>
   1c2fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1c2fc:	2b00      	cmp	r3, #0
   1c2fe:	d157      	bne.n	1c3b0 <FinishAesDrv+0x114>
   1c300:	4860      	ldr	r0, [pc, #384]	; (1c484 <FinishAesDrv+0x1e8>)
   1c302:	f04f 31ff 	mov.w	r1, #4294967295
   1c306:	f7fe f983 	bl	1a610 <CC_PalMutexLock>
   1c30a:	2800      	cmp	r0, #0
   1c30c:	f040 8097 	bne.w	1c43e <FinishAesDrv+0x1a2>
   1c310:	2000      	movs	r0, #0
   1c312:	f7fe f9ad 	bl	1a670 <CC_PalPowerSaveModeSelect>
   1c316:	2800      	cmp	r0, #0
   1c318:	f040 808d 	bne.w	1c436 <FinishAesDrv+0x19a>
   1c31c:	4b5a      	ldr	r3, [pc, #360]	; (1c488 <FinishAesDrv+0x1ec>)
   1c31e:	4a5b      	ldr	r2, [pc, #364]	; (1c48c <FinishAesDrv+0x1f0>)
   1c320:	2101      	movs	r1, #1
   1c322:	6019      	str	r1, [r3, #0]
   1c324:	6813      	ldr	r3, [r2, #0]
   1c326:	2b00      	cmp	r3, #0
   1c328:	d1fc      	bne.n	1c324 <FinishAesDrv+0x88>
   1c32a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1c32c:	2b03      	cmp	r3, #3
   1c32e:	dd20      	ble.n	1c372 <FinishAesDrv+0xd6>
   1c330:	3b06      	subs	r3, #6
   1c332:	2b01      	cmp	r3, #1
   1c334:	d81f      	bhi.n	1c376 <FinishAesDrv+0xda>
   1c336:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1c338:	2b01      	cmp	r3, #1
   1c33a:	d83b      	bhi.n	1c3b4 <FinishAesDrv+0x118>
   1c33c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1c33e:	2b01      	cmp	r3, #1
   1c340:	f200 8085 	bhi.w	1c44e <FinishAesDrv+0x1b2>
   1c344:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1c346:	2b01      	cmp	r3, #1
   1c348:	f200 8083 	bhi.w	1c452 <FinishAesDrv+0x1b6>
   1c34c:	4620      	mov	r0, r4
   1c34e:	f7ff fd5b 	bl	1be08 <InitAes.part.0>
   1c352:	4607      	mov	r7, r0
   1c354:	b980      	cbnz	r0, 1c378 <FinishAesDrv+0xdc>
   1c356:	4620      	mov	r0, r4
   1c358:	f7ff fd0c 	bl	1bd74 <LoadAesKey>
   1c35c:	4607      	mov	r7, r0
   1c35e:	b958      	cbnz	r0, 1c378 <FinishAesDrv+0xdc>
   1c360:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1c362:	2b07      	cmp	r3, #7
   1c364:	d807      	bhi.n	1c376 <FinishAesDrv+0xda>
   1c366:	e8df f003 	tbb	[pc, r3]
   1c36a:	2730      	.short	0x2730
   1c36c:	06062755 	.word	0x06062755
   1c370:	2755      	.short	0x2755
   1c372:	2b00      	cmp	r3, #0
   1c374:	dadf      	bge.n	1c336 <FinishAesDrv+0x9a>
   1c376:	4f46      	ldr	r7, [pc, #280]	; (1c490 <FinishAesDrv+0x1f4>)
   1c378:	4a44      	ldr	r2, [pc, #272]	; (1c48c <FinishAesDrv+0x1f0>)
   1c37a:	6813      	ldr	r3, [r2, #0]
   1c37c:	2b00      	cmp	r3, #0
   1c37e:	d1fc      	bne.n	1c37a <FinishAesDrv+0xde>
   1c380:	4a41      	ldr	r2, [pc, #260]	; (1c488 <FinishAesDrv+0x1ec>)
   1c382:	2001      	movs	r0, #1
   1c384:	6013      	str	r3, [r2, #0]
   1c386:	f7fe f973 	bl	1a670 <CC_PalPowerSaveModeSelect>
   1c38a:	2800      	cmp	r0, #0
   1c38c:	d15b      	bne.n	1c446 <FinishAesDrv+0x1aa>
   1c38e:	483d      	ldr	r0, [pc, #244]	; (1c484 <FinishAesDrv+0x1e8>)
   1c390:	f7fe f946 	bl	1a620 <CC_PalMutexUnlock>
   1c394:	2800      	cmp	r0, #0
   1c396:	d0a2      	beq.n	1c2de <FinishAesDrv+0x42>
   1c398:	483e      	ldr	r0, [pc, #248]	; (1c494 <FinishAesDrv+0x1f8>)
   1c39a:	f7fd fda3 	bl	19ee4 <CC_PalAbort>
   1c39e:	e79e      	b.n	1c2de <FinishAesDrv+0x42>
   1c3a0:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   1c3a4:	e79b      	b.n	1c2de <FinishAesDrv+0x42>
   1c3a6:	2b01      	cmp	r3, #1
   1c3a8:	d1a6      	bne.n	1c2f8 <FinishAesDrv+0x5c>
   1c3aa:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1c3ae:	d3a3      	bcc.n	1c2f8 <FinishAesDrv+0x5c>
   1c3b0:	4f39      	ldr	r7, [pc, #228]	; (1c498 <FinishAesDrv+0x1fc>)
   1c3b2:	e794      	b.n	1c2de <FinishAesDrv+0x42>
   1c3b4:	4f39      	ldr	r7, [pc, #228]	; (1c49c <FinishAesDrv+0x200>)
   1c3b6:	e7df      	b.n	1c378 <FinishAesDrv+0xdc>
   1c3b8:	4b39      	ldr	r3, [pc, #228]	; (1c4a0 <FinishAesDrv+0x204>)
   1c3ba:	6822      	ldr	r2, [r4, #0]
   1c3bc:	601a      	str	r2, [r3, #0]
   1c3be:	6862      	ldr	r2, [r4, #4]
   1c3c0:	605a      	str	r2, [r3, #4]
   1c3c2:	68a2      	ldr	r2, [r4, #8]
   1c3c4:	609a      	str	r2, [r3, #8]
   1c3c6:	68e2      	ldr	r2, [r4, #12]
   1c3c8:	60da      	str	r2, [r3, #12]
   1c3ca:	4936      	ldr	r1, [pc, #216]	; (1c4a4 <FinishAesDrv+0x208>)
   1c3cc:	4a36      	ldr	r2, [pc, #216]	; (1c4a8 <FinishAesDrv+0x20c>)
   1c3ce:	2301      	movs	r3, #1
   1c3d0:	600b      	str	r3, [r1, #0]
   1c3d2:	6015      	str	r5, [r2, #0]
   1c3d4:	2d00      	cmp	r5, #0
   1c3d6:	d13e      	bne.n	1c456 <FinishAesDrv+0x1ba>
   1c3d8:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1c3da:	b90a      	cbnz	r2, 1c3e0 <FinishAesDrv+0x144>
   1c3dc:	4a33      	ldr	r2, [pc, #204]	; (1c4ac <FinishAesDrv+0x210>)
   1c3de:	6013      	str	r3, [r2, #0]
   1c3e0:	4b2a      	ldr	r3, [pc, #168]	; (1c48c <FinishAesDrv+0x1f0>)
   1c3e2:	681f      	ldr	r7, [r3, #0]
   1c3e4:	2f00      	cmp	r7, #0
   1c3e6:	d1fc      	bne.n	1c3e2 <FinishAesDrv+0x146>
   1c3e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1c3ea:	3b01      	subs	r3, #1
   1c3ec:	2b06      	cmp	r3, #6
   1c3ee:	d8c3      	bhi.n	1c378 <FinishAesDrv+0xdc>
   1c3f0:	a201      	add	r2, pc, #4	; (adr r2, 1c3f8 <FinishAesDrv+0x15c>)
   1c3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1c3f6:	bf00      	nop
   1c3f8:	0001c419 	.word	0x0001c419
   1c3fc:	0001c431 	.word	0x0001c431
   1c400:	0001c419 	.word	0x0001c419
   1c404:	0001c379 	.word	0x0001c379
   1c408:	0001c379 	.word	0x0001c379
   1c40c:	0001c431 	.word	0x0001c431
   1c410:	0001c419 	.word	0x0001c419
   1c414:	4b26      	ldr	r3, [pc, #152]	; (1c4b0 <FinishAesDrv+0x214>)
   1c416:	e7d0      	b.n	1c3ba <FinishAesDrv+0x11e>
   1c418:	4a21      	ldr	r2, [pc, #132]	; (1c4a0 <FinishAesDrv+0x204>)
   1c41a:	4b26      	ldr	r3, [pc, #152]	; (1c4b4 <FinishAesDrv+0x218>)
   1c41c:	6812      	ldr	r2, [r2, #0]
   1c41e:	6022      	str	r2, [r4, #0]
   1c420:	681a      	ldr	r2, [r3, #0]
   1c422:	6062      	str	r2, [r4, #4]
   1c424:	685a      	ldr	r2, [r3, #4]
   1c426:	60a2      	str	r2, [r4, #8]
   1c428:	3308      	adds	r3, #8
   1c42a:	681b      	ldr	r3, [r3, #0]
   1c42c:	60e3      	str	r3, [r4, #12]
   1c42e:	e7a3      	b.n	1c378 <FinishAesDrv+0xdc>
   1c430:	4a1f      	ldr	r2, [pc, #124]	; (1c4b0 <FinishAesDrv+0x214>)
   1c432:	4b21      	ldr	r3, [pc, #132]	; (1c4b8 <FinishAesDrv+0x21c>)
   1c434:	e7f2      	b.n	1c41c <FinishAesDrv+0x180>
   1c436:	4821      	ldr	r0, [pc, #132]	; (1c4bc <FinishAesDrv+0x220>)
   1c438:	f7fd fd54 	bl	19ee4 <CC_PalAbort>
   1c43c:	e76e      	b.n	1c31c <FinishAesDrv+0x80>
   1c43e:	4820      	ldr	r0, [pc, #128]	; (1c4c0 <FinishAesDrv+0x224>)
   1c440:	f7fd fd50 	bl	19ee4 <CC_PalAbort>
   1c444:	e764      	b.n	1c310 <FinishAesDrv+0x74>
   1c446:	481f      	ldr	r0, [pc, #124]	; (1c4c4 <FinishAesDrv+0x228>)
   1c448:	f7fd fd4c 	bl	19ee4 <CC_PalAbort>
   1c44c:	e79f      	b.n	1c38e <FinishAesDrv+0xf2>
   1c44e:	4f1e      	ldr	r7, [pc, #120]	; (1c4c8 <FinishAesDrv+0x22c>)
   1c450:	e792      	b.n	1c378 <FinishAesDrv+0xdc>
   1c452:	4f1e      	ldr	r7, [pc, #120]	; (1c4cc <FinishAesDrv+0x230>)
   1c454:	e790      	b.n	1c378 <FinishAesDrv+0xdc>
   1c456:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1c458:	6833      	ldr	r3, [r6, #0]
   1c45a:	2a01      	cmp	r2, #1
   1c45c:	d00a      	beq.n	1c474 <FinishAesDrv+0x1d8>
   1c45e:	491c      	ldr	r1, [pc, #112]	; (1c4d0 <FinishAesDrv+0x234>)
   1c460:	4a1c      	ldr	r2, [pc, #112]	; (1c4d4 <FinishAesDrv+0x238>)
   1c462:	600b      	str	r3, [r1, #0]
   1c464:	2010      	movs	r0, #16
   1c466:	6015      	str	r5, [r2, #0]
   1c468:	f7fe f83e 	bl	1a4e8 <CC_HalWaitInterrupt>
   1c46c:	4607      	mov	r7, r0
   1c46e:	2800      	cmp	r0, #0
   1c470:	d0b6      	beq.n	1c3e0 <FinishAesDrv+0x144>
   1c472:	e781      	b.n	1c378 <FinishAesDrv+0xdc>
   1c474:	4918      	ldr	r1, [pc, #96]	; (1c4d8 <FinishAesDrv+0x23c>)
   1c476:	4a19      	ldr	r2, [pc, #100]	; (1c4dc <FinishAesDrv+0x240>)
   1c478:	600b      	str	r3, [r1, #0]
   1c47a:	2040      	movs	r0, #64	; 0x40
   1c47c:	6015      	str	r5, [r2, #0]
   1c47e:	e7f3      	b.n	1c468 <FinishAesDrv+0x1cc>
   1c480:	00f1000b 	.word	0x00f1000b
   1c484:	200006dc 	.word	0x200006dc
   1c488:	5002b810 	.word	0x5002b810
   1c48c:	5002b910 	.word	0x5002b910
   1c490:	00f10001 	.word	0x00f10001
   1c494:	0002189c 	.word	0x0002189c
   1c498:	00f10005 	.word	0x00f10005
   1c49c:	00f10002 	.word	0x00f10002
   1c4a0:	5002b440 	.word	0x5002b440
   1c4a4:	5002b47c 	.word	0x5002b47c
   1c4a8:	5002b4bc 	.word	0x5002b4bc
   1c4ac:	5002b524 	.word	0x5002b524
   1c4b0:	5002b460 	.word	0x5002b460
   1c4b4:	5002b444 	.word	0x5002b444
   1c4b8:	5002b464 	.word	0x5002b464
   1c4bc:	0002185c 	.word	0x0002185c
   1c4c0:	00021844 	.word	0x00021844
   1c4c4:	0002187c 	.word	0x0002187c
   1c4c8:	00f10003 	.word	0x00f10003
   1c4cc:	00f10004 	.word	0x00f10004
   1c4d0:	5002bc30 	.word	0x5002bc30
   1c4d4:	5002bc34 	.word	0x5002bc34
   1c4d8:	5002bc28 	.word	0x5002bc28
   1c4dc:	5002bc2c 	.word	0x5002bc2c

0001c4e0 <kmu_validate_slot_and_size>:
   1c4e0:	b921      	cbnz	r1, 1c4ec <kmu_validate_slot_and_size+0xc>
   1c4e2:	4b03      	ldr	r3, [pc, #12]	; (1c4f0 <kmu_validate_slot_and_size+0x10>)
   1c4e4:	2800      	cmp	r0, #0
   1c4e6:	bf18      	it	ne
   1c4e8:	4618      	movne	r0, r3
   1c4ea:	4770      	bx	lr
   1c4ec:	4801      	ldr	r0, [pc, #4]	; (1c4f4 <kmu_validate_slot_and_size+0x14>)
   1c4ee:	4770      	bx	lr
   1c4f0:	00f70001 	.word	0x00f70001
   1c4f4:	00f70003 	.word	0x00f70003

0001c4f8 <kmu_validate_kdr_slot_and_size>:
   1c4f8:	b921      	cbnz	r1, 1c504 <kmu_validate_kdr_slot_and_size+0xc>
   1c4fa:	4b03      	ldr	r3, [pc, #12]	; (1c508 <kmu_validate_kdr_slot_and_size+0x10>)
   1c4fc:	2800      	cmp	r0, #0
   1c4fe:	bf18      	it	ne
   1c500:	4618      	movne	r0, r3
   1c502:	4770      	bx	lr
   1c504:	4801      	ldr	r0, [pc, #4]	; (1c50c <kmu_validate_kdr_slot_and_size+0x14>)
   1c506:	4770      	bx	lr
   1c508:	00f70001 	.word	0x00f70001
   1c50c:	00f70003 	.word	0x00f70003

0001c510 <kmu_use_kdr_key>:
   1c510:	4903      	ldr	r1, [pc, #12]	; (1c520 <kmu_use_kdr_key+0x10>)
   1c512:	4b04      	ldr	r3, [pc, #16]	; (1c524 <kmu_use_kdr_key+0x14>)
   1c514:	2000      	movs	r0, #0
   1c516:	2201      	movs	r2, #1
   1c518:	6008      	str	r0, [r1, #0]
   1c51a:	601a      	str	r2, [r3, #0]
   1c51c:	4770      	bx	lr
   1c51e:	bf00      	nop
   1c520:	5002ba38 	.word	0x5002ba38
   1c524:	5002b478 	.word	0x5002b478

0001c528 <kmu_derive_cmac>:
   1c528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c52c:	b0cd      	sub	sp, #308	; 0x134
   1c52e:	e9dd 8558 	ldrd	r8, r5, [sp, #352]	; 0x160
   1c532:	460f      	mov	r7, r1
   1c534:	2100      	movs	r1, #0
   1c536:	460c      	mov	r4, r1
   1c538:	4681      	mov	r9, r0
   1c53a:	4616      	mov	r6, r2
   1c53c:	a80e      	add	r0, sp, #56	; 0x38
   1c53e:	2274      	movs	r2, #116	; 0x74
   1c540:	469b      	mov	fp, r3
   1c542:	f004 fad5 	bl	20af0 <memset>
   1c546:	4621      	mov	r1, r4
   1c548:	2280      	movs	r2, #128	; 0x80
   1c54a:	a82c      	add	r0, sp, #176	; 0xb0
   1c54c:	942b      	str	r4, [sp, #172]	; 0xac
   1c54e:	f004 facf 	bl	20af0 <memset>
   1c552:	2384      	movs	r3, #132	; 0x84
   1c554:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1c558:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   1c55c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   1c560:	9305      	str	r3, [sp, #20]
   1c562:	d860      	bhi.n	1c626 <kmu_derive_cmac+0xfe>
   1c564:	ab05      	add	r3, sp, #20
   1c566:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
   1c56a:	9301      	str	r3, [sp, #4]
   1c56c:	9502      	str	r5, [sp, #8]
   1c56e:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   1c572:	4659      	mov	r1, fp
   1c574:	4630      	mov	r0, r6
   1c576:	f8cd a000 	str.w	sl, [sp]
   1c57a:	f000 f865 	bl	1c648 <UtilCmacBuildDataForDerivation>
   1c57e:	2800      	cmp	r0, #0
   1c580:	d14c      	bne.n	1c61c <kmu_derive_cmac+0xf4>
   1c582:	2303      	movs	r3, #3
   1c584:	f88d 3013 	strb.w	r3, [sp, #19]
   1c588:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1c58c:	901c      	str	r0, [sp, #112]	; 0x70
   1c58e:	2200      	movs	r2, #0
   1c590:	2110      	movs	r1, #16
   1c592:	a80e      	add	r0, sp, #56	; 0x38
   1c594:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   1c598:	2607      	movs	r6, #7
   1c59a:	2301      	movs	r3, #1
   1c59c:	2401      	movs	r4, #1
   1c59e:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   1c5a2:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   1c5a6:	971a      	str	r7, [sp, #104]	; 0x68
   1c5a8:	961b      	str	r6, [sp, #108]	; 0x6c
   1c5aa:	9426      	str	r4, [sp, #152]	; 0x98
   1c5ac:	f10d 0920 	add.w	r9, sp, #32
   1c5b0:	f7ff f910 	bl	1b7d4 <CC_PalMemSetZeroPlat>
   1c5b4:	2110      	movs	r1, #16
   1c5b6:	e9cd 1900 	strd	r1, r9, [sp]
   1c5ba:	ab0a      	add	r3, sp, #40	; 0x28
   1c5bc:	9905      	ldr	r1, [sp, #20]
   1c5be:	4650      	mov	r0, sl
   1c5c0:	aa06      	add	r2, sp, #24
   1c5c2:	f7ff f9ab 	bl	1b91c <SetDataBuffersInfo>
   1c5c6:	4607      	mov	r7, r0
   1c5c8:	b150      	cbz	r0, 1c5e0 <kmu_derive_cmac+0xb8>
   1c5ca:	e01e      	b.n	1c60a <kmu_derive_cmac+0xe2>
   1c5cc:	f7ff f8fe 	bl	1b7cc <CC_PalMemCopyPlat>
   1c5d0:	2110      	movs	r1, #16
   1c5d2:	a80e      	add	r0, sp, #56	; 0x38
   1c5d4:	f7ff f8fe 	bl	1b7d4 <CC_PalMemSetZeroPlat>
   1c5d8:	3401      	adds	r4, #1
   1c5da:	1bad      	subs	r5, r5, r6
   1c5dc:	b2e4      	uxtb	r4, r4
   1c5de:	d027      	beq.n	1c630 <kmu_derive_cmac+0x108>
   1c5e0:	9b05      	ldr	r3, [sp, #20]
   1c5e2:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   1c5e6:	2d10      	cmp	r5, #16
   1c5e8:	464a      	mov	r2, r9
   1c5ea:	a906      	add	r1, sp, #24
   1c5ec:	a80e      	add	r0, sp, #56	; 0x38
   1c5ee:	462e      	mov	r6, r5
   1c5f0:	bf28      	it	cs
   1c5f2:	2610      	movcs	r6, #16
   1c5f4:	f7ff fe52 	bl	1c29c <FinishAesDrv>
   1c5f8:	4603      	mov	r3, r0
   1c5fa:	4632      	mov	r2, r6
   1c5fc:	eb08 0007 	add.w	r0, r8, r7
   1c600:	a90e      	add	r1, sp, #56	; 0x38
   1c602:	4437      	add	r7, r6
   1c604:	2b00      	cmp	r3, #0
   1c606:	d0e1      	beq.n	1c5cc <kmu_derive_cmac+0xa4>
   1c608:	461f      	mov	r7, r3
   1c60a:	a80e      	add	r0, sp, #56	; 0x38
   1c60c:	2274      	movs	r2, #116	; 0x74
   1c60e:	2100      	movs	r1, #0
   1c610:	f7ff f8de 	bl	1b7d0 <CC_PalMemSetPlat>
   1c614:	4638      	mov	r0, r7
   1c616:	b04d      	add	sp, #308	; 0x134
   1c618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c61c:	4f08      	ldr	r7, [pc, #32]	; (1c640 <kmu_derive_cmac+0x118>)
   1c61e:	4638      	mov	r0, r7
   1c620:	b04d      	add	sp, #308	; 0x134
   1c622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c626:	4f07      	ldr	r7, [pc, #28]	; (1c644 <kmu_derive_cmac+0x11c>)
   1c628:	4638      	mov	r0, r7
   1c62a:	b04d      	add	sp, #308	; 0x134
   1c62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c630:	a80e      	add	r0, sp, #56	; 0x38
   1c632:	2274      	movs	r2, #116	; 0x74
   1c634:	2100      	movs	r1, #0
   1c636:	462f      	mov	r7, r5
   1c638:	f7ff f8ca 	bl	1b7d0 <CC_PalMemSetPlat>
   1c63c:	e7ea      	b.n	1c614 <kmu_derive_cmac+0xec>
   1c63e:	bf00      	nop
   1c640:	00f1000e 	.word	0x00f1000e
   1c644:	00f1000f 	.word	0x00f1000f

0001c648 <UtilCmacBuildDataForDerivation>:
   1c648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c64c:	b082      	sub	sp, #8
   1c64e:	2600      	movs	r6, #0
   1c650:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1c652:	9601      	str	r6, [sp, #4]
   1c654:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1c658:	d83c      	bhi.n	1c6d4 <UtilCmacBuildDataForDerivation+0x8c>
   1c65a:	00ee      	lsls	r6, r5, #3
   1c65c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   1c660:	f101 35ff 	add.w	r5, r1, #4294967295
   1c664:	461f      	mov	r7, r3
   1c666:	bf34      	ite	cc
   1c668:	2303      	movcc	r3, #3
   1c66a:	2304      	movcs	r3, #4
   1c66c:	2d3f      	cmp	r5, #63	; 0x3f
   1c66e:	460c      	mov	r4, r1
   1c670:	9300      	str	r3, [sp, #0]
   1c672:	d82f      	bhi.n	1c6d4 <UtilCmacBuildDataForDerivation+0x8c>
   1c674:	b370      	cbz	r0, 1c6d4 <UtilCmacBuildDataForDerivation+0x8c>
   1c676:	4690      	mov	r8, r2
   1c678:	b117      	cbz	r7, 1c680 <UtilCmacBuildDataForDerivation+0x38>
   1c67a:	b35a      	cbz	r2, 1c6d4 <UtilCmacBuildDataForDerivation+0x8c>
   1c67c:	2f40      	cmp	r7, #64	; 0x40
   1c67e:	d829      	bhi.n	1c6d4 <UtilCmacBuildDataForDerivation+0x8c>
   1c680:	9a08      	ldr	r2, [sp, #32]
   1c682:	b33a      	cbz	r2, 1c6d4 <UtilCmacBuildDataForDerivation+0x8c>
   1c684:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c686:	6811      	ldr	r1, [r2, #0]
   1c688:	b321      	cbz	r1, 1c6d4 <UtilCmacBuildDataForDerivation+0x8c>
   1c68a:	19e2      	adds	r2, r4, r7
   1c68c:	4413      	add	r3, r2
   1c68e:	4299      	cmp	r1, r3
   1c690:	d320      	bcc.n	1c6d4 <UtilCmacBuildDataForDerivation+0x8c>
   1c692:	9b08      	ldr	r3, [sp, #32]
   1c694:	4622      	mov	r2, r4
   1c696:	4601      	mov	r1, r0
   1c698:	1c58      	adds	r0, r3, #1
   1c69a:	f7ff f897 	bl	1b7cc <CC_PalMemCopyPlat>
   1c69e:	9b08      	ldr	r3, [sp, #32]
   1c6a0:	4423      	add	r3, r4
   1c6a2:	2200      	movs	r2, #0
   1c6a4:	3402      	adds	r4, #2
   1c6a6:	705a      	strb	r2, [r3, #1]
   1c6a8:	bb07      	cbnz	r7, 1c6ec <UtilCmacBuildDataForDerivation+0xa4>
   1c6aa:	2eff      	cmp	r6, #255	; 0xff
   1c6ac:	9600      	str	r6, [sp, #0]
   1c6ae:	d915      	bls.n	1c6dc <UtilCmacBuildDataForDerivation+0x94>
   1c6b0:	9b08      	ldr	r3, [sp, #32]
   1c6b2:	0235      	lsls	r5, r6, #8
   1c6b4:	b2ad      	uxth	r5, r5
   1c6b6:	1918      	adds	r0, r3, r4
   1c6b8:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   1c6bc:	2202      	movs	r2, #2
   1c6be:	a901      	add	r1, sp, #4
   1c6c0:	9501      	str	r5, [sp, #4]
   1c6c2:	f7ff f883 	bl	1b7cc <CC_PalMemCopyPlat>
   1c6c6:	3402      	adds	r4, #2
   1c6c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c6ca:	2000      	movs	r0, #0
   1c6cc:	601c      	str	r4, [r3, #0]
   1c6ce:	b002      	add	sp, #8
   1c6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c6d4:	4809      	ldr	r0, [pc, #36]	; (1c6fc <UtilCmacBuildDataForDerivation+0xb4>)
   1c6d6:	b002      	add	sp, #8
   1c6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c6dc:	9b08      	ldr	r3, [sp, #32]
   1c6de:	2201      	movs	r2, #1
   1c6e0:	1918      	adds	r0, r3, r4
   1c6e2:	4669      	mov	r1, sp
   1c6e4:	f7ff f872 	bl	1b7cc <CC_PalMemCopyPlat>
   1c6e8:	3401      	adds	r4, #1
   1c6ea:	e7ed      	b.n	1c6c8 <UtilCmacBuildDataForDerivation+0x80>
   1c6ec:	9b08      	ldr	r3, [sp, #32]
   1c6ee:	4641      	mov	r1, r8
   1c6f0:	1918      	adds	r0, r3, r4
   1c6f2:	463a      	mov	r2, r7
   1c6f4:	f7ff f86a 	bl	1b7cc <CC_PalMemCopyPlat>
   1c6f8:	443c      	add	r4, r7
   1c6fa:	e7d6      	b.n	1c6aa <UtilCmacBuildDataForDerivation+0x62>
   1c6fc:	80000006 	.word	0x80000006

0001c700 <i2c_write>:
{
   1c700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
   1c702:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1c706:	2202      	movs	r2, #2
   1c708:	f88d 200c 	strb.w	r2, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
   1c70c:	6882      	ldr	r2, [r0, #8]
   1c70e:	a901      	add	r1, sp, #4
   1c710:	6854      	ldr	r4, [r2, #4]
   1c712:	2201      	movs	r2, #1
   1c714:	47a0      	blx	r4
}
   1c716:	b004      	add	sp, #16
   1c718:	bd10      	pop	{r4, pc}

0001c71a <setState>:
extern uint8_t setState(bool acc, bool gyr){
   1c71a:	b538      	push	{r3, r4, r5, lr}
   1c71c:	4604      	mov	r4, r0
    uint8_t temp = readByte(ICM42605_ADDRESS, ICM42605_PWR_MGMT0);
   1c71e:	204e      	movs	r0, #78	; 0x4e
extern uint8_t setState(bool acc, bool gyr){
   1c720:	460d      	mov	r5, r1
    uint8_t temp = readByte(ICM42605_ADDRESS, ICM42605_PWR_MGMT0);
   1c722:	f7f3 fd95 	bl	10250 <readByte.constprop.0>
    temp ^= (-acc ^ temp) & (1UL << 0);
   1c726:	4262      	negs	r2, r4
   1c728:	b252      	sxtb	r2, r2
   1c72a:	ea82 0300 	eor.w	r3, r2, r0
   1c72e:	f003 0301 	and.w	r3, r3, #1
   1c732:	4043      	eors	r3, r0
   1c734:	b2d9      	uxtb	r1, r3
    temp ^= (-acc ^ temp) & (1UL << 1);
   1c736:	ea82 0301 	eor.w	r3, r2, r1
   1c73a:	f003 0302 	and.w	r3, r3, #2
    temp ^= (-gyr ^ temp) & (1UL << 2);
   1c73e:	426a      	negs	r2, r5
    temp ^= (-acc ^ temp) & (1UL << 1);
   1c740:	404b      	eors	r3, r1
    temp ^= (-gyr ^ temp) & (1UL << 2);
   1c742:	b252      	sxtb	r2, r2
   1c744:	ea82 0103 	eor.w	r1, r2, r3
   1c748:	f001 0104 	and.w	r1, r1, #4
   1c74c:	4059      	eors	r1, r3
    temp ^= (-gyr ^ temp) & (1UL << 3);
   1c74e:	404a      	eors	r2, r1
   1c750:	f002 0208 	and.w	r2, r2, #8
    writeByte(ICM42605_ADDRESS, ICM42605_PWR_MGMT0, temp);
   1c754:	4051      	eors	r1, r2
   1c756:	204e      	movs	r0, #78	; 0x4e
   1c758:	f7f3 fd68 	bl	1022c <writeByte.constprop.0>
}
   1c75c:	2000      	movs	r0, #0
   1c75e:	bd38      	pop	{r3, r4, r5, pc}

0001c760 <ccc_cfg_changed>:
}
   1c760:	4770      	bx	lr

0001c762 <write_u16>:
{
   1c762:	b538      	push	{r3, r4, r5, lr}
   1c764:	460c      	mov	r4, r1
   1c766:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
   1c76a:	68e5      	ldr	r5, [r4, #12]
	if (offset + len > sizeof(config_data)) {
   1c76c:	461c      	mov	r4, r3
   1c76e:	18c3      	adds	r3, r0, r3
   1c770:	2b14      	cmp	r3, #20
{
   1c772:	4611      	mov	r1, r2
	if (offset + len > sizeof(config_data)) {
   1c774:	dc05      	bgt.n	1c782 <write_u16+0x20>
   1c776:	4622      	mov	r2, r4
   1c778:	4428      	add	r0, r5
   1c77a:	f004 f97e 	bl	20a7a <memcpy>
}
   1c77e:	4620      	mov	r0, r4
   1c780:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c782:	f06f 0406 	mvn.w	r4, #6
   1c786:	e7fa      	b.n	1c77e <write_u16+0x1c>

0001c788 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
   1c788:	b158      	cbz	r0, 1c7a2 <null_ptr_check+0x1a>
   1c78a:	68c3      	ldr	r3, [r0, #12]
   1c78c:	b14b      	cbz	r3, 1c7a2 <null_ptr_check+0x1a>
   1c78e:	6903      	ldr	r3, [r0, #16]
   1c790:	b13b      	cbz	r3, 1c7a2 <null_ptr_check+0x1a>
   1c792:	6943      	ldr	r3, [r0, #20]
   1c794:	b12b      	cbz	r3, 1c7a2 <null_ptr_check+0x1a>
   1c796:	6840      	ldr	r0, [r0, #4]
   1c798:	fab0 f080 	clz	r0, r0
   1c79c:	0940      	lsrs	r0, r0, #5
   1c79e:	4240      	negs	r0, r0
   1c7a0:	4770      	bx	lr
        (dev->intf_ptr == NULL))
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
   1c7a2:	f04f 30ff 	mov.w	r0, #4294967295
        /* Device structure is fine */
        rslt = BMP3_OK;
    }

    return rslt;
}
   1c7a6:	4770      	bx	lr

0001c7a8 <compensate_data>:
{
   1c7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7ac:	4682      	mov	sl, r0
   1c7ae:	b087      	sub	sp, #28
   1c7b0:	460d      	mov	r5, r1
   1c7b2:	461c      	mov	r4, r3
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
   1c7b4:	4693      	mov	fp, r2
   1c7b6:	2a00      	cmp	r2, #0
   1c7b8:	f000 80df 	beq.w	1c97a <compensate_data+0x1d2>
   1c7bc:	2b00      	cmp	r3, #0
   1c7be:	f000 80dc 	beq.w	1c97a <compensate_data+0x1d2>
        if (sensor_comp & (BMP3_PRESS | BMP3_TEMP))
   1c7c2:	f010 0f03 	tst.w	r0, #3
   1c7c6:	d022      	beq.n	1c80e <compensate_data+0x66>
    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
   1c7c8:	6848      	ldr	r0, [r1, #4]
   1c7ca:	f7e3 fddb 	bl	384 <__aeabi_ui2d>
   1c7ce:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c7d2:	f7e3 fc99 	bl	108 <__aeabi_dsub>
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   1c7d6:	4602      	mov	r2, r0
   1c7d8:	460b      	mov	r3, r1
    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
   1c7da:	4606      	mov	r6, r0
   1c7dc:	460f      	mov	r7, r1
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   1c7de:	f7e3 fe4b 	bl	478 <__aeabi_dmul>
   1c7e2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1c7e6:	f7e3 fe47 	bl	478 <__aeabi_dmul>
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
   1c7ea:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   1c7ee:	4680      	mov	r8, r0
   1c7f0:	4689      	mov	r9, r1
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
   1c7f2:	4630      	mov	r0, r6
   1c7f4:	4639      	mov	r1, r7
   1c7f6:	f7e3 fe3f 	bl	478 <__aeabi_dmul>
   1c7fa:	4602      	mov	r2, r0
   1c7fc:	460b      	mov	r3, r1
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   1c7fe:	4640      	mov	r0, r8
   1c800:	4649      	mov	r1, r9
   1c802:	f7e3 fc83 	bl	10c <__adddf3>
   1c806:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
   1c80a:	e9cb 0100 	strd	r0, r1, [fp]
        if (sensor_comp & BMP3_PRESS)
   1c80e:	f01a 0001 	ands.w	r0, sl, #1
   1c812:	f000 80af 	beq.w	1c974 <compensate_data+0x1cc>
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
   1c816:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
        pow_output = (float) base * pow_output;
   1c81a:	4619      	mov	r1, r3
   1c81c:	4610      	mov	r0, r2
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
   1c81e:	e9cd 2300 	strd	r2, r3, [sp]
        pow_output = (float) base * pow_output;
   1c822:	f7e4 f8c3 	bl	9ac <__aeabi_d2f>
   1c826:	4601      	mov	r1, r0
   1c828:	4606      	mov	r6, r0
   1c82a:	f7e4 fa1d 	bl	c68 <__aeabi_fmul>
   1c82e:	4607      	mov	r7, r0
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1c830:	f7e3 fdca 	bl	3c8 <__aeabi_f2d>
   1c834:	e9cd 0102 	strd	r0, r1, [sp, #8]
        pow_output = (float) base * pow_output;
   1c838:	4639      	mov	r1, r7
   1c83a:	4630      	mov	r0, r6
   1c83c:	f7e4 fa14 	bl	c68 <__aeabi_fmul>
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1c840:	f7e3 fdc2 	bl	3c8 <__aeabi_f2d>
   1c844:	e9cd 0104 	strd	r0, r1, [sp, #16]
    partial_out2 = uncomp_data->pressure *
   1c848:	6828      	ldr	r0, [r5, #0]
   1c84a:	f7e3 fd9b 	bl	384 <__aeabi_ui2d>
   1c84e:	4689      	mov	r9, r1
   1c850:	4680      	mov	r8, r0
        pow_output = (float) base * pow_output;
   1c852:	f7e4 f8ab 	bl	9ac <__aeabi_d2f>
   1c856:	4601      	mov	r1, r0
   1c858:	4682      	mov	sl, r0
   1c85a:	f7e4 fa05 	bl	c68 <__aeabi_fmul>
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
   1c85e:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
        pow_output = (float) base * pow_output;
   1c862:	4605      	mov	r5, r0
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
   1c864:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c868:	f7e3 fe06 	bl	478 <__aeabi_dmul>
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1c86c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1c870:	f7e3 fc4c 	bl	10c <__adddf3>
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1c874:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1c878:	4606      	mov	r6, r0
   1c87a:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1c87c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1c880:	f7e3 fdfa 	bl	478 <__aeabi_dmul>
   1c884:	4602      	mov	r2, r0
   1c886:	460b      	mov	r3, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1c888:	4630      	mov	r0, r6
   1c88a:	4639      	mov	r1, r7
   1c88c:	f7e3 fc3e 	bl	10c <__adddf3>
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1c890:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1c894:	4606      	mov	r6, r0
   1c896:	460f      	mov	r7, r1
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1c898:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1c89c:	f7e3 fdec 	bl	478 <__aeabi_dmul>
   1c8a0:	4602      	mov	r2, r0
   1c8a2:	460b      	mov	r3, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1c8a4:	4630      	mov	r0, r6
   1c8a6:	4639      	mov	r1, r7
   1c8a8:	f7e3 fc30 	bl	10c <__adddf3>
    partial_out2 = uncomp_data->pressure *
   1c8ac:	4642      	mov	r2, r8
   1c8ae:	464b      	mov	r3, r9
   1c8b0:	f7e3 fde2 	bl	478 <__aeabi_dmul>
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
   1c8b4:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    partial_out2 = uncomp_data->pressure *
   1c8b8:	4680      	mov	r8, r0
   1c8ba:	4689      	mov	r9, r1
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
   1c8bc:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c8c0:	f7e3 fdda 	bl	478 <__aeabi_dmul>
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1c8c4:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   1c8c8:	f7e3 fc20 	bl	10c <__adddf3>
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1c8cc:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1c8d0:	4606      	mov	r6, r0
   1c8d2:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1c8d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1c8d8:	f7e3 fdce 	bl	478 <__aeabi_dmul>
   1c8dc:	4602      	mov	r2, r0
   1c8de:	460b      	mov	r3, r1
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1c8e0:	4630      	mov	r0, r6
   1c8e2:	4639      	mov	r1, r7
   1c8e4:	f7e3 fc12 	bl	10c <__adddf3>
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1c8e8:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1c8ec:	4606      	mov	r6, r0
   1c8ee:	460f      	mov	r7, r1
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1c8f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1c8f4:	f7e3 fdc0 	bl	478 <__aeabi_dmul>
   1c8f8:	4602      	mov	r2, r0
   1c8fa:	460b      	mov	r3, r1
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1c8fc:	4630      	mov	r0, r6
   1c8fe:	4639      	mov	r1, r7
   1c900:	f7e3 fc04 	bl	10c <__adddf3>
   1c904:	4602      	mov	r2, r0
   1c906:	460b      	mov	r3, r1
    comp_press = partial_out1 + partial_out2 + partial_data4;
   1c908:	4640      	mov	r0, r8
   1c90a:	4649      	mov	r1, r9
   1c90c:	f7e3 fbfe 	bl	10c <__adddf3>
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
   1c910:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    comp_press = partial_out1 + partial_out2 + partial_data4;
   1c914:	4606      	mov	r6, r0
   1c916:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
   1c918:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c91c:	f7e3 fdac 	bl	478 <__aeabi_dmul>
   1c920:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
   1c924:	f7e3 fbf2 	bl	10c <__adddf3>
   1c928:	4680      	mov	r8, r0
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
   1c92a:	4628      	mov	r0, r5
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
   1c92c:	4689      	mov	r9, r1
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
   1c92e:	f7e3 fd4b 	bl	3c8 <__aeabi_f2d>
   1c932:	4602      	mov	r2, r0
   1c934:	460b      	mov	r3, r1
    partial_data3 = partial_data1 * partial_data2;
   1c936:	4640      	mov	r0, r8
   1c938:	4649      	mov	r1, r9
   1c93a:	f7e3 fd9d 	bl	478 <__aeabi_dmul>
   1c93e:	4680      	mov	r8, r0
   1c940:	4689      	mov	r9, r1
        pow_output = (float) base * pow_output;
   1c942:	4650      	mov	r0, sl
   1c944:	4629      	mov	r1, r5
   1c946:	f7e4 f98f 	bl	c68 <__aeabi_fmul>
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
   1c94a:	f7e3 fd3d 	bl	3c8 <__aeabi_f2d>
   1c94e:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
   1c952:	f7e3 fd91 	bl	478 <__aeabi_dmul>
   1c956:	4602      	mov	r2, r0
   1c958:	460b      	mov	r3, r1
   1c95a:	4640      	mov	r0, r8
   1c95c:	4649      	mov	r1, r9
   1c95e:	f7e3 fbd5 	bl	10c <__adddf3>
   1c962:	4602      	mov	r2, r0
   1c964:	460b      	mov	r3, r1
    comp_press = partial_out1 + partial_out2 + partial_data4;
   1c966:	4630      	mov	r0, r6
   1c968:	4639      	mov	r1, r7
   1c96a:	f7e3 fbcf 	bl	10c <__adddf3>
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
   1c96e:	e9cb 0102 	strd	r0, r1, [fp, #8]
   1c972:	2000      	movs	r0, #0
}
   1c974:	b007      	add	sp, #28
   1c976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rslt = BMP3_E_NULL_PTR;
   1c97a:	f04f 30ff 	mov.w	r0, #4294967295
   1c97e:	e7f9      	b.n	1c974 <compensate_data+0x1cc>

0001c980 <bmp3_get_regs>:
{
   1c980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c984:	b083      	sub	sp, #12
   1c986:	4681      	mov	r9, r0
   1c988:	af00      	add	r7, sp, #0
    rslt = null_ptr_check(dev);
   1c98a:	4618      	mov	r0, r3
{
   1c98c:	460e      	mov	r6, r1
   1c98e:	4690      	mov	r8, r2
   1c990:	461c      	mov	r4, r3
    rslt = null_ptr_check(dev);
   1c992:	f7ff fef9 	bl	1c788 <null_ptr_check>
    if ((rslt == BMP3_OK) && (reg_data != NULL))
   1c996:	6078      	str	r0, [r7, #4]
   1c998:	bb78      	cbnz	r0, 1c9fa <bmp3_get_regs+0x7a>
   1c99a:	b371      	cbz	r1, 1c9fa <bmp3_get_regs+0x7a>
        uint32_t temp_len = len + dev->dummy_byte;
   1c99c:	7aa2      	ldrb	r2, [r4, #10]
        if (dev->intf != BMP3_I2C_INTF)
   1c99e:	7a21      	ldrb	r1, [r4, #8]
        uint32_t temp_len = len + dev->dummy_byte;
   1c9a0:	4442      	add	r2, r8
        uint8_t temp_buff[len + dev->dummy_byte];
   1c9a2:	1dd3      	adds	r3, r2, #7
   1c9a4:	f023 0307 	bic.w	r3, r3, #7
    {
   1c9a8:	46eb      	mov	fp, sp
        uint8_t temp_buff[len + dev->dummy_byte];
   1c9aa:	ebad 0d03 	sub.w	sp, sp, r3
   1c9ae:	68e3      	ldr	r3, [r4, #12]
        if (dev->intf != BMP3_I2C_INTF)
   1c9b0:	2901      	cmp	r1, #1
   1c9b2:	461d      	mov	r5, r3
        uint8_t temp_buff[len + dev->dummy_byte];
   1c9b4:	46ea      	mov	sl, sp
        if (dev->intf != BMP3_I2C_INTF)
   1c9b6:	6863      	ldr	r3, [r4, #4]
   1c9b8:	d019      	beq.n	1c9ee <bmp3_get_regs+0x6e>
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
   1c9ba:	4669      	mov	r1, sp
   1c9bc:	f049 0080 	orr.w	r0, r9, #128	; 0x80
   1c9c0:	47a8      	blx	r5
            for (idx = 0; idx < len; idx++)
   1c9c2:	687d      	ldr	r5, [r7, #4]
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
   1c9c4:	7260      	strb	r0, [r4, #9]
            for (idx = 0; idx < len; idx++)
   1c9c6:	4545      	cmp	r5, r8
   1c9c8:	d10a      	bne.n	1c9e0 <bmp3_get_regs+0x60>
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
   1c9ca:	f994 0009 	ldrsb.w	r0, [r4, #9]
            rslt = BMP3_E_COMM_FAIL;
   1c9ce:	2800      	cmp	r0, #0
   1c9d0:	bf18      	it	ne
   1c9d2:	f06f 0006 	mvnne.w	r0, #6
   1c9d6:	46dd      	mov	sp, fp
}
   1c9d8:	370c      	adds	r7, #12
   1c9da:	46bd      	mov	sp, r7
   1c9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
   1c9e0:	7aa3      	ldrb	r3, [r4, #10]
   1c9e2:	eb0a 0205 	add.w	r2, sl, r5
   1c9e6:	5cd3      	ldrb	r3, [r2, r3]
   1c9e8:	5573      	strb	r3, [r6, r5]
            for (idx = 0; idx < len; idx++)
   1c9ea:	3501      	adds	r5, #1
   1c9ec:	e7eb      	b.n	1c9c6 <bmp3_get_regs+0x46>
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
   1c9ee:	4642      	mov	r2, r8
   1c9f0:	4631      	mov	r1, r6
   1c9f2:	4648      	mov	r0, r9
   1c9f4:	47a8      	blx	r5
   1c9f6:	7260      	strb	r0, [r4, #9]
   1c9f8:	e7e7      	b.n	1c9ca <bmp3_get_regs+0x4a>
        rslt = BMP3_E_NULL_PTR;
   1c9fa:	f04f 30ff 	mov.w	r0, #4294967295
   1c9fe:	e7eb      	b.n	1c9d8 <bmp3_get_regs+0x58>

0001ca00 <bmp3_set_regs>:
{
   1ca00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ca04:	4616      	mov	r6, r2
    uint8_t temp_buff[len * 2];
   1ca06:	0052      	lsls	r2, r2, #1
{
   1ca08:	461c      	mov	r4, r3
    uint8_t temp_buff[len * 2];
   1ca0a:	1dd3      	adds	r3, r2, #7
   1ca0c:	f023 0307 	bic.w	r3, r3, #7
{
   1ca10:	af00      	add	r7, sp, #0
   1ca12:	4605      	mov	r5, r0
    uint8_t temp_buff[len * 2];
   1ca14:	ebad 0d03 	sub.w	sp, sp, r3
    rslt = null_ptr_check(dev);
   1ca18:	4620      	mov	r0, r4
{
   1ca1a:	4688      	mov	r8, r1
    uint8_t temp_buff[len * 2];
   1ca1c:	4669      	mov	r1, sp
    rslt = null_ptr_check(dev);
   1ca1e:	f7ff feb3 	bl	1c788 <null_ptr_check>
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
   1ca22:	bb98      	cbnz	r0, 1ca8c <bmp3_set_regs+0x8c>
   1ca24:	b395      	cbz	r5, 1ca8c <bmp3_set_regs+0x8c>
   1ca26:	f1b8 0f00 	cmp.w	r8, #0
   1ca2a:	d02f      	beq.n	1ca8c <bmp3_set_regs+0x8c>
        if (len != 0)
   1ca2c:	b38e      	cbz	r6, 1ca92 <bmp3_set_regs+0x92>
            temp_buff[0] = reg_data[0];
   1ca2e:	f898 3000 	ldrb.w	r3, [r8]
   1ca32:	f88d 3000 	strb.w	r3, [sp]
            if (dev->intf == BMP3_SPI_INTF)
   1ca36:	7a23      	ldrb	r3, [r4, #8]
   1ca38:	b1a3      	cbz	r3, 1ca64 <bmp3_set_regs+0x64>
            if (len > 1)
   1ca3a:	2e01      	cmp	r6, #1
   1ca3c:	d818      	bhi.n	1ca70 <bmp3_set_regs+0x70>
   1ca3e:	2201      	movs	r2, #1
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
   1ca40:	6926      	ldr	r6, [r4, #16]
   1ca42:	6863      	ldr	r3, [r4, #4]
   1ca44:	7828      	ldrb	r0, [r5, #0]
   1ca46:	47b0      	blx	r6
                rslt = BMP3_E_COMM_FAIL;
   1ca48:	2800      	cmp	r0, #0
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
   1ca4a:	7260      	strb	r0, [r4, #9]
                rslt = BMP3_E_COMM_FAIL;
   1ca4c:	bf18      	it	ne
   1ca4e:	f06f 0006 	mvnne.w	r0, #6
}
   1ca52:	46bd      	mov	sp, r7
   1ca54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
   1ca58:	f815 c000 	ldrb.w	ip, [r5, r0]
   1ca5c:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
   1ca60:	f805 c000 	strb.w	ip, [r5, r0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
   1ca64:	b2d8      	uxtb	r0, r3
   1ca66:	4286      	cmp	r6, r0
   1ca68:	f103 0301 	add.w	r3, r3, #1
   1ca6c:	d8f4      	bhi.n	1ca58 <bmp3_set_regs+0x58>
   1ca6e:	e7e4      	b.n	1ca3a <bmp3_set_regs+0x3a>
    for (index = 1; index < len; index++)
   1ca70:	2301      	movs	r3, #1
        temp_buff[(index * 2) - 1] = reg_addr[index];
   1ca72:	f101 3cff 	add.w	ip, r1, #4294967295
   1ca76:	5ce8      	ldrb	r0, [r5, r3]
   1ca78:	f80c 0013 	strb.w	r0, [ip, r3, lsl #1]
        temp_buff[index * 2] = reg_data[index];
   1ca7c:	f818 0003 	ldrb.w	r0, [r8, r3]
   1ca80:	f801 0013 	strb.w	r0, [r1, r3, lsl #1]
    for (index = 1; index < len; index++)
   1ca84:	3301      	adds	r3, #1
   1ca86:	429e      	cmp	r6, r3
   1ca88:	d1f5      	bne.n	1ca76 <bmp3_set_regs+0x76>
   1ca8a:	e7d9      	b.n	1ca40 <bmp3_set_regs+0x40>
        rslt = BMP3_E_NULL_PTR;
   1ca8c:	f04f 30ff 	mov.w	r0, #4294967295
   1ca90:	e7df      	b.n	1ca52 <bmp3_set_regs+0x52>
            rslt = BMP3_E_INVALID_LEN;
   1ca92:	f06f 0005 	mvn.w	r0, #5
   1ca96:	e7dc      	b.n	1ca52 <bmp3_set_regs+0x52>

0001ca98 <write_power_mode>:
{
   1ca98:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ca9a:	4604      	mov	r4, r0
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
   1ca9c:	4623      	mov	r3, r4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1ca9e:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
   1caa0:	2201      	movs	r2, #1
   1caa2:	f10d 0107 	add.w	r1, sp, #7
    uint8_t op_mode = dev->settings.op_mode;
   1caa6:	f894 50b0 	ldrb.w	r5, [r4, #176]	; 0xb0
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1caaa:	f88d 0006 	strb.w	r0, [sp, #6]
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
   1caae:	f7ff ff67 	bl	1c980 <bmp3_get_regs>
    if (rslt == BMP3_OK)
   1cab2:	b988      	cbnz	r0, 1cad8 <write_power_mode+0x40>
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
   1cab4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1cab8:	012d      	lsls	r5, r5, #4
   1caba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1cabe:	f005 0530 	and.w	r5, r5, #48	; 0x30
   1cac2:	432b      	orrs	r3, r5
   1cac4:	f88d 3007 	strb.w	r3, [sp, #7]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
   1cac8:	2201      	movs	r2, #1
   1caca:	4623      	mov	r3, r4
   1cacc:	f10d 0107 	add.w	r1, sp, #7
   1cad0:	f10d 0006 	add.w	r0, sp, #6
   1cad4:	f7ff ff94 	bl	1ca00 <bmp3_set_regs>
}
   1cad8:	b003      	add	sp, #12
   1cada:	bd30      	pop	{r4, r5, pc}

0001cadc <bmp3_soft_reset>:
{
   1cadc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t reg_addr = BMP3_REG_CMD;
   1cade:	237e      	movs	r3, #126	; 0x7e
   1cae0:	f88d 3004 	strb.w	r3, [sp, #4]
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
   1cae4:	23b6      	movs	r3, #182	; 0xb6
{
   1cae6:	4605      	mov	r5, r0
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
   1cae8:	f88d 3005 	strb.w	r3, [sp, #5]
    rslt = null_ptr_check(dev);
   1caec:	f7ff fe4c 	bl	1c788 <null_ptr_check>
    if (rslt == BMP3_OK)
   1caf0:	4604      	mov	r4, r0
   1caf2:	bb50      	cbnz	r0, 1cb4a <bmp3_soft_reset+0x6e>
        rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
   1caf4:	462b      	mov	r3, r5
   1caf6:	2201      	movs	r2, #1
   1caf8:	f10d 0106 	add.w	r1, sp, #6
   1cafc:	2003      	movs	r0, #3
   1cafe:	f7ff ff3f 	bl	1c980 <bmp3_get_regs>
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
   1cb02:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1cb06:	06db      	lsls	r3, r3, #27
   1cb08:	d522      	bpl.n	1cb50 <bmp3_soft_reset+0x74>
   1cb0a:	bb08      	cbnz	r0, 1cb50 <bmp3_soft_reset+0x74>
            rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   1cb0c:	462b      	mov	r3, r5
   1cb0e:	2201      	movs	r2, #1
   1cb10:	f10d 0105 	add.w	r1, sp, #5
   1cb14:	a801      	add	r0, sp, #4
   1cb16:	f7ff ff73 	bl	1ca00 <bmp3_set_regs>
            if (rslt == BMP3_OK)
   1cb1a:	4604      	mov	r4, r0
   1cb1c:	b9a8      	cbnz	r0, 1cb4a <bmp3_soft_reset+0x6e>
                dev->delay_us(2000, dev->intf_ptr);
   1cb1e:	696b      	ldr	r3, [r5, #20]
   1cb20:	6869      	ldr	r1, [r5, #4]
   1cb22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   1cb26:	4798      	blx	r3
                rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
   1cb28:	462b      	mov	r3, r5
   1cb2a:	2201      	movs	r2, #1
   1cb2c:	f10d 0107 	add.w	r1, sp, #7
   1cb30:	2002      	movs	r0, #2
   1cb32:	f7ff ff25 	bl	1c980 <bmp3_get_regs>
                if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
   1cb36:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1cb3a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
   1cb3e:	4303      	orrs	r3, r0
   1cb40:	b2db      	uxtb	r3, r3
   1cb42:	2b00      	cmp	r3, #0
                    rslt = BMP3_E_CMD_EXEC_FAILED;
   1cb44:	bf18      	it	ne
   1cb46:	f06f 0403 	mvnne.w	r4, #3
}
   1cb4a:	4620      	mov	r0, r4
   1cb4c:	b003      	add	sp, #12
   1cb4e:	bd30      	pop	{r4, r5, pc}
            rslt = BMP3_E_CMD_EXEC_FAILED;
   1cb50:	f06f 0403 	mvn.w	r4, #3
   1cb54:	e7f9      	b.n	1cb4a <bmp3_soft_reset+0x6e>

0001cb56 <bmp3_get_op_mode>:
{
   1cb56:	b510      	push	{r4, lr}
   1cb58:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
   1cb5a:	4608      	mov	r0, r1
   1cb5c:	f7ff fe14 	bl	1c788 <null_ptr_check>
    if ((rslt == BMP3_OK) && (op_mode != NULL))
   1cb60:	b958      	cbnz	r0, 1cb7a <bmp3_get_op_mode+0x24>
   1cb62:	b154      	cbz	r4, 1cb7a <bmp3_get_op_mode+0x24>
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
   1cb64:	460b      	mov	r3, r1
   1cb66:	2201      	movs	r2, #1
   1cb68:	4621      	mov	r1, r4
   1cb6a:	201b      	movs	r0, #27
   1cb6c:	f7ff ff08 	bl	1c980 <bmp3_get_regs>
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
   1cb70:	7823      	ldrb	r3, [r4, #0]
   1cb72:	f3c3 1301 	ubfx	r3, r3, #4, #2
   1cb76:	7023      	strb	r3, [r4, #0]
}
   1cb78:	bd10      	pop	{r4, pc}
        rslt = BMP3_E_NULL_PTR;
   1cb7a:	f04f 30ff 	mov.w	r0, #4294967295
   1cb7e:	e7fb      	b.n	1cb78 <bmp3_get_op_mode+0x22>

0001cb80 <bmp3_set_op_mode>:
{
   1cb80:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1cb82:	4605      	mov	r5, r0
    rslt = null_ptr_check(dev);
   1cb84:	f7ff fe00 	bl	1c788 <null_ptr_check>
    if (rslt == BMP3_OK)
   1cb88:	4604      	mov	r4, r0
   1cb8a:	2800      	cmp	r0, #0
   1cb8c:	d163      	bne.n	1cc56 <bmp3_set_op_mode+0xd6>
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
   1cb8e:	4629      	mov	r1, r5
   1cb90:	f10d 0002 	add.w	r0, sp, #2
        uint8_t curr_mode = dev->settings.op_mode;
   1cb94:	f895 60b0 	ldrb.w	r6, [r5, #176]	; 0xb0
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
   1cb98:	f7ff ffdd 	bl	1cb56 <bmp3_get_op_mode>
        if (last_set_mode != BMP3_MODE_SLEEP)
   1cb9c:	f89d 3002 	ldrb.w	r3, [sp, #2]
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
   1cba0:	4604      	mov	r4, r0
        if (last_set_mode != BMP3_MODE_SLEEP)
   1cba2:	b1e3      	cbz	r3, 1cbde <bmp3_set_op_mode+0x5e>
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1cba4:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
   1cba6:	462b      	mov	r3, r5
   1cba8:	2201      	movs	r2, #1
   1cbaa:	a901      	add	r1, sp, #4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1cbac:	f88d 0003 	strb.w	r0, [sp, #3]
    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
   1cbb0:	f7ff fee6 	bl	1c980 <bmp3_get_regs>
    if (rslt == BMP3_OK)
   1cbb4:	4604      	mov	r4, r0
   1cbb6:	b968      	cbnz	r0, 1cbd4 <bmp3_set_op_mode+0x54>
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
   1cbb8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1cbbc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1cbc0:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
   1cbc4:	2201      	movs	r2, #1
   1cbc6:	462b      	mov	r3, r5
   1cbc8:	a901      	add	r1, sp, #4
   1cbca:	f10d 0003 	add.w	r0, sp, #3
   1cbce:	f7ff ff17 	bl	1ca00 <bmp3_set_regs>
   1cbd2:	4604      	mov	r4, r0
            dev->delay_us(5000, dev->intf_ptr);
   1cbd4:	696b      	ldr	r3, [r5, #20]
   1cbd6:	6869      	ldr	r1, [r5, #4]
   1cbd8:	f241 3088 	movw	r0, #5000	; 0x1388
   1cbdc:	4798      	blx	r3
        if (rslt == BMP3_OK)
   1cbde:	bbd4      	cbnz	r4, 1cc56 <bmp3_set_op_mode+0xd6>
            if (curr_mode == BMP3_MODE_NORMAL)
   1cbe0:	2e03      	cmp	r6, #3
   1cbe2:	d13b      	bne.n	1cc5c <bmp3_set_op_mode+0xdc>
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
   1cbe4:	2204      	movs	r2, #4
   1cbe6:	462b      	mov	r3, r5
   1cbe8:	eb0d 0102 	add.w	r1, sp, r2
   1cbec:	201c      	movs	r0, #28
   1cbee:	f7ff fec7 	bl	1c980 <bmp3_get_regs>
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
   1cbf2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1cbf6:	f003 0207 	and.w	r2, r3, #7
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
   1cbfa:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1cbfe:	f885 30b4 	strb.w	r3, [r5, #180]	; 0xb4
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
   1cc02:	f89d 3005 	ldrb.w	r3, [sp, #5]
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
   1cc06:	f885 20b3 	strb.w	r2, [r5, #179]	; 0xb3
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
   1cc0a:	f003 031f 	and.w	r3, r3, #31
   1cc0e:	f885 30b6 	strb.w	r3, [r5, #182]	; 0xb6
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
   1cc12:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1cc16:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1cc1a:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
    if (rslt == BMP3_OK)
   1cc1e:	4604      	mov	r4, r0
   1cc20:	b9c8      	cbnz	r0, 1cc56 <bmp3_set_op_mode+0xd6>
        rslt = validate_osr_and_odr_settings(dev);
   1cc22:	4628      	mov	r0, r5
   1cc24:	f7f3 fde0 	bl	107e8 <validate_osr_and_odr_settings>
    if (rslt == BMP3_OK)
   1cc28:	4604      	mov	r4, r0
   1cc2a:	b9a0      	cbnz	r0, 1cc56 <bmp3_set_op_mode+0xd6>
        rslt = write_power_mode(dev);
   1cc2c:	4628      	mov	r0, r5
   1cc2e:	f7ff ff33 	bl	1ca98 <write_power_mode>
        if (rslt == BMP3_OK)
   1cc32:	4604      	mov	r4, r0
   1cc34:	b978      	cbnz	r0, 1cc56 <bmp3_set_op_mode+0xd6>
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
   1cc36:	462b      	mov	r3, r5
   1cc38:	2201      	movs	r2, #1
   1cc3a:	a901      	add	r1, sp, #4
   1cc3c:	2002      	movs	r0, #2
   1cc3e:	f7ff fe9f 	bl	1c980 <bmp3_get_regs>
            if (rslt == BMP3_OK)
   1cc42:	4604      	mov	r4, r0
   1cc44:	b938      	cbnz	r0, 1cc56 <bmp3_set_op_mode+0xd6>
                if (conf_err_status & BMP3_ERR_CONF)
   1cc46:	f89d 3004 	ldrb.w	r3, [sp, #4]
                    rslt = BMP3_E_CONFIGURATION_ERR;
   1cc4a:	f013 0f04 	tst.w	r3, #4
   1cc4e:	bf0c      	ite	eq
   1cc50:	4604      	moveq	r4, r0
   1cc52:	f06f 0404 	mvnne.w	r4, #4
}
   1cc56:	4620      	mov	r0, r4
   1cc58:	b002      	add	sp, #8
   1cc5a:	bd70      	pop	{r4, r5, r6, pc}
            else if (curr_mode == BMP3_MODE_FORCED)
   1cc5c:	2e01      	cmp	r6, #1
   1cc5e:	d1fa      	bne.n	1cc56 <bmp3_set_op_mode+0xd6>
                rslt = write_power_mode(dev);
   1cc60:	4628      	mov	r0, r5
   1cc62:	f7ff ff19 	bl	1ca98 <write_power_mode>
   1cc66:	4604      	mov	r4, r0
   1cc68:	e7f5      	b.n	1cc56 <bmp3_set_op_mode+0xd6>

0001cc6a <bmp3_get_sensor_data>:
{
   1cc6a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cc6c:	b085      	sub	sp, #20
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
   1cc6e:	2300      	movs	r3, #0
{
   1cc70:	4606      	mov	r6, r0
    rslt = null_ptr_check(dev);
   1cc72:	4610      	mov	r0, r2
    struct bmp3_uncomp_data uncomp_data = { 0 };
   1cc74:	e9cd 3302 	strd	r3, r3, [sp, #8]
{
   1cc78:	460d      	mov	r5, r1
   1cc7a:	4617      	mov	r7, r2
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
   1cc7c:	9300      	str	r3, [sp, #0]
   1cc7e:	f8ad 3004 	strh.w	r3, [sp, #4]
    rslt = null_ptr_check(dev);
   1cc82:	f7ff fd81 	bl	1c788 <null_ptr_check>
    if ((rslt == BMP3_OK) && (comp_data != NULL))
   1cc86:	bb58      	cbnz	r0, 1cce0 <bmp3_get_sensor_data+0x76>
   1cc88:	b351      	cbz	r1, 1cce0 <bmp3_get_sensor_data+0x76>
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
   1cc8a:	4613      	mov	r3, r2
   1cc8c:	4669      	mov	r1, sp
   1cc8e:	2206      	movs	r2, #6
   1cc90:	2004      	movs	r0, #4
   1cc92:	f7ff fe75 	bl	1c980 <bmp3_get_regs>
        if (rslt == BMP3_OK)
   1cc96:	4604      	mov	r4, r0
   1cc98:	b9f8      	cbnz	r0, 1ccda <bmp3_get_sensor_data+0x70>
    data_msb = (uint32_t)reg_data[2] << 16;
   1cc9a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    data_lsb = (uint32_t)reg_data[1] << 8;
   1cc9e:	f89d 2001 	ldrb.w	r2, [sp, #1]
    data_msb = (uint32_t)reg_data[5] << 16;
   1cca2:	f89d 4005 	ldrb.w	r4, [sp, #5]
    data_msb = (uint32_t)reg_data[2] << 16;
   1cca6:	041b      	lsls	r3, r3, #16
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
   1cca8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    data_xlsb = (uint32_t)reg_data[0];
   1ccac:	f89d 2000 	ldrb.w	r2, [sp]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
   1ccb0:	4313      	orrs	r3, r2
   1ccb2:	9302      	str	r3, [sp, #8]
    data_lsb = (uint32_t)reg_data[4] << 8;
   1ccb4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    data_msb = (uint32_t)reg_data[5] << 16;
   1ccb8:	0424      	lsls	r4, r4, #16
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
   1ccba:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    data_xlsb = (uint32_t)reg_data[3];
   1ccbe:	f89d 3003 	ldrb.w	r3, [sp, #3]
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
   1ccc2:	462a      	mov	r2, r5
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
   1ccc4:	431c      	orrs	r4, r3
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
   1ccc6:	a902      	add	r1, sp, #8
   1ccc8:	f107 0318 	add.w	r3, r7, #24
   1cccc:	4630      	mov	r0, r6
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
   1ccce:	9403      	str	r4, [sp, #12]
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
   1ccd0:	f7ff fd6a 	bl	1c7a8 <compensate_data>
   1ccd4:	4604      	mov	r4, r0
            printk();
   1ccd6:	f000 f98b 	bl	1cff0 <printk>
}
   1ccda:	4620      	mov	r0, r4
   1ccdc:	b005      	add	sp, #20
   1ccde:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = BMP3_E_NULL_PTR;
   1cce0:	f04f 34ff 	mov.w	r4, #4294967295
   1cce4:	e7f9      	b.n	1ccda <bmp3_get_sensor_data+0x70>

0001cce6 <app_us_delay>:
	z_impl_k_busy_wait(usec_to_wait);
   1cce6:	f003 bd32 	b.w	2074e <z_impl_k_busy_wait>

0001ccea <app_i2c_write>:
static BMP3_INTF_RET_TYPE app_i2c_write(uint8_t reg_addr, const uint8_t *write_data, uint32_t len, void *intf_ptr) {
   1ccea:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ccec:	4614      	mov	r4, r2
	uint8_t dataBuffer[len+1];
   1ccee:	3408      	adds	r4, #8
static BMP3_INTF_RET_TYPE app_i2c_write(uint8_t reg_addr, const uint8_t *write_data, uint32_t len, void *intf_ptr) {
   1ccf0:	b085      	sub	sp, #20
	uint8_t dataBuffer[len+1];
   1ccf2:	f024 0407 	bic.w	r4, r4, #7
static BMP3_INTF_RET_TYPE app_i2c_write(uint8_t reg_addr, const uint8_t *write_data, uint32_t len, void *intf_ptr) {
   1ccf6:	af00      	add	r7, sp, #0
	uint8_t dataBuffer[len+1];
   1ccf8:	ebad 0d04 	sub.w	sp, sp, r4
static BMP3_INTF_RET_TYPE app_i2c_write(uint8_t reg_addr, const uint8_t *write_data, uint32_t len, void *intf_ptr) {
   1ccfc:	461d      	mov	r5, r3
	dataBuffer[0]=reg_addr;
   1ccfe:	466b      	mov	r3, sp
	uint8_t dataBuffer[len+1];
   1cd00:	1c56      	adds	r6, r2, #1
	dataBuffer[0]=reg_addr;
   1cd02:	f803 0b01 	strb.w	r0, [r3], #1
   1cd06:	4618      	mov	r0, r3
   1cd08:	f003 feb7 	bl	20a7a <memcpy>
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1cd0c:	2302      	movs	r3, #2
	msg.buf = (uint8_t *)buf;
   1cd0e:	f8c7 d004 	str.w	sp, [r7, #4]
	msg.len = num_bytes;
   1cd12:	60be      	str	r6, [r7, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1cd14:	733b      	strb	r3, [r7, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
   1cd16:	68ab      	ldr	r3, [r5, #8]
   1cd18:	1d39      	adds	r1, r7, #4
   1cd1a:	685c      	ldr	r4, [r3, #4]
   1cd1c:	2201      	movs	r2, #1
   1cd1e:	2376      	movs	r3, #118	; 0x76
   1cd20:	4628      	mov	r0, r5
   1cd22:	47a0      	blx	r4
}
   1cd24:	3714      	adds	r7, #20
   1cd26:	b240      	sxtb	r0, r0
   1cd28:	46bd      	mov	sp, r7
   1cd2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001cd2c <app_i2c_read>:
static BMP3_INTF_RET_TYPE app_i2c_read(uint8_t reg_addr, uint8_t *read_data, uint32_t len, void *intf_ptr) {
   1cd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cd30:	b086      	sub	sp, #24
   1cd32:	461c      	mov	r4, r3
	msg.buf = (uint8_t *)buf;
   1cd34:	f10d 0307 	add.w	r3, sp, #7
   1cd38:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
   1cd3a:	2501      	movs	r5, #1
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1cd3c:	2302      	movs	r3, #2
   1cd3e:	460f      	mov	r7, r1
   1cd40:	4616      	mov	r6, r2
   1cd42:	f88d 0007 	strb.w	r0, [sp, #7]
	msg.len = num_bytes;
   1cd46:	9504      	str	r5, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1cd48:	f88d 3014 	strb.w	r3, [sp, #20]
	return api->transfer(dev, msgs, num_msgs, addr);
   1cd4c:	68a3      	ldr	r3, [r4, #8]
   1cd4e:	462a      	mov	r2, r5
   1cd50:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1cd54:	a903      	add	r1, sp, #12
   1cd56:	2376      	movs	r3, #118	; 0x76
   1cd58:	4620      	mov	r0, r4
   1cd5a:	47c0      	blx	r8
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1cd5c:	2303      	movs	r3, #3
	msg.len = num_bytes;
   1cd5e:	e9cd 7603 	strd	r7, r6, [sp, #12]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1cd62:	f88d 3014 	strb.w	r3, [sp, #20]
	return api->transfer(dev, msgs, num_msgs, addr);
   1cd66:	68a3      	ldr	r3, [r4, #8]
   1cd68:	462a      	mov	r2, r5
   1cd6a:	685e      	ldr	r6, [r3, #4]
   1cd6c:	a903      	add	r1, sp, #12
   1cd6e:	2376      	movs	r3, #118	; 0x76
   1cd70:	4620      	mov	r0, r4
   1cd72:	47b0      	blx	r6
}
   1cd74:	b240      	sxtb	r0, r0
   1cd76:	b006      	add	sp, #24
   1cd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cd7c <transceive>:
                    uint8_t interdelay, struct device *mlx_device_t) {
   1cd7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cd80:	b085      	sub	sp, #20
   1cd82:	af00      	add	r7, sp, #0
   1cd84:	461d      	mov	r5, r3
   1cd86:	6b7e      	ldr	r6, [r7, #52]	; 0x34
  uint8_t rxbuf2[rxlen + 2];
   1cd88:	3309      	adds	r3, #9
   1cd8a:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
                    uint8_t interdelay, struct device *mlx_device_t) {
   1cd8e:	4681      	mov	r9, r0
   1cd90:	4688      	mov	r8, r1
   1cd92:	4614      	mov	r4, r2
  uint8_t rxbuf2[rxlen + 2];
   1cd94:	ebad 0d03 	sub.w	sp, sp, r3
  if (mlx_device_t == NULL) {
   1cd98:	b926      	cbnz	r6, 1cda4 <transceive+0x28>
    return false;
   1cd9a:	2000      	movs	r0, #0
}
   1cd9c:	3714      	adds	r7, #20
   1cd9e:	46bd      	mov	sp, r7
   1cda0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cda4:	4630      	mov	r0, r6
   1cda6:	f003 f8f1 	bl	1ff8c <z_device_ready>
   1cdaa:	2800      	cmp	r0, #0
   1cdac:	d0f5      	beq.n	1cd9a <transceive+0x1e>
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1cdae:	2302      	movs	r3, #2
  if (i2c_write(mlx_device_t,txbuf, txlen, MLX90393_DEFAULT_ADDR)) {
   1cdb0:	e9c7 9801 	strd	r9, r8, [r7, #4]
   1cdb4:	733b      	strb	r3, [r7, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
   1cdb6:	68b3      	ldr	r3, [r6, #8]
   1cdb8:	2201      	movs	r2, #1
   1cdba:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1cdbe:	1d39      	adds	r1, r7, #4
   1cdc0:	230c      	movs	r3, #12
   1cdc2:	4630      	mov	r0, r6
   1cdc4:	47c0      	blx	r8
   1cdc6:	b108      	cbz	r0, 1cdcc <transceive+0x50>
    return MLX90393_STATUS_ERROR;
   1cdc8:	20ff      	movs	r0, #255	; 0xff
   1cdca:	e7e7      	b.n	1cd9c <transceive+0x20>
   1cdcc:	f897 c030 	ldrb.w	ip, [r7, #48]	; 0x30
   1cdd0:	f240 30e7 	movw	r0, #999	; 0x3e7
   1cdd4:	ea4f 3ccc 	mov.w	ip, ip, lsl #15
   1cdd8:	eb1c 0000 	adds.w	r0, ip, r0
   1cddc:	f04f 0100 	mov.w	r1, #0
   1cde0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cde4:	f04f 0300 	mov.w	r3, #0
   1cde8:	4149      	adcs	r1, r1
   1cdea:	f7e4 f8ad 	bl	f48 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   1cdee:	f7fc fd95 	bl	1991c <z_impl_k_sleep>
  uint8_t rxbuf2[rxlen + 2];
   1cdf2:	1c6b      	adds	r3, r5, #1
	msg.len = num_bytes;
   1cdf4:	60bb      	str	r3, [r7, #8]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1cdf6:	2303      	movs	r3, #3
	msg.buf = buf;
   1cdf8:	f8c7 d004 	str.w	sp, [r7, #4]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1cdfc:	733b      	strb	r3, [r7, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
   1cdfe:	68b3      	ldr	r3, [r6, #8]
   1ce00:	2201      	movs	r2, #1
   1ce02:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1ce06:	1d39      	adds	r1, r7, #4
   1ce08:	230c      	movs	r3, #12
   1ce0a:	4630      	mov	r0, r6
   1ce0c:	47c0      	blx	r8
  if (i2c_read(mlx_device_t,rxbuf2, rxlen + 1,MLX90393_DEFAULT_ADDR)) {
   1ce0e:	2800      	cmp	r0, #0
   1ce10:	d1da      	bne.n	1cdc8 <transceive+0x4c>
  status = rxbuf2[0];
   1ce12:	466b      	mov	r3, sp
   1ce14:	4622      	mov	r2, r4
   1ce16:	f813 0b01 	ldrb.w	r0, [r3], #1
  for (i = 0; i < rxlen; i++) {
   1ce1a:	4425      	add	r5, r4
   1ce1c:	4295      	cmp	r5, r2
   1ce1e:	d101      	bne.n	1ce24 <transceive+0xa8>
  return (status >> 2);
   1ce20:	0880      	lsrs	r0, r0, #2
   1ce22:	e7bb      	b.n	1cd9c <transceive+0x20>
    rxbuf[i] = rxbuf2[i + 1];
   1ce24:	f813 1b01 	ldrb.w	r1, [r3], #1
   1ce28:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < rxlen; i++) {
   1ce2c:	e7f6      	b.n	1ce1c <transceive+0xa0>

0001ce2e <writeRegister>:
bool writeRegister(uint8_t reg, uint16_t data, struct device *mlx_device_t) {
   1ce2e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t tx[4] = {MLX90393_REG_WR,
   1ce30:	2360      	movs	r3, #96	; 0x60
   1ce32:	f88d 300c 	strb.w	r3, [sp, #12]
   1ce36:	0a0b      	lsrs	r3, r1, #8
   1ce38:	f88d 300d 	strb.w	r3, [sp, #13]
                   reg << 2};   // the register itself, shift up by 2 bits!
   1ce3c:	0080      	lsls	r0, r0, #2
  return (transceive(tx, sizeof(tx), NULL, 0, 0, mlx_device_t) == MLX90393_STATUS_OK);
   1ce3e:	2300      	movs	r3, #0
  uint8_t tx[4] = {MLX90393_REG_WR,
   1ce40:	f88d 100e 	strb.w	r1, [sp, #14]
   1ce44:	f88d 000f 	strb.w	r0, [sp, #15]
  return (transceive(tx, sizeof(tx), NULL, 0, 0, mlx_device_t) == MLX90393_STATUS_OK);
   1ce48:	9201      	str	r2, [sp, #4]
   1ce4a:	9300      	str	r3, [sp, #0]
   1ce4c:	461a      	mov	r2, r3
   1ce4e:	2104      	movs	r1, #4
   1ce50:	a803      	add	r0, sp, #12
   1ce52:	f7ff ff93 	bl	1cd7c <transceive>
}
   1ce56:	fab0 f080 	clz	r0, r0
   1ce5a:	0940      	lsrs	r0, r0, #5
   1ce5c:	b005      	add	sp, #20
   1ce5e:	f85d fb04 	ldr.w	pc, [sp], #4

0001ce62 <readRegister>:
bool readRegister(uint8_t reg, uint16_t *data, struct device *mlx_device_t) {
   1ce62:	b530      	push	{r4, r5, lr}
   1ce64:	b085      	sub	sp, #20
  uint8_t tx[2] = {MLX90393_REG_RR,reg << 2}; // the register itself, shift up by 2 bits!
   1ce66:	2350      	movs	r3, #80	; 0x50
   1ce68:	0080      	lsls	r0, r0, #2
   1ce6a:	f88d 3008 	strb.w	r3, [sp, #8]
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {
   1ce6e:	2400      	movs	r4, #0
   1ce70:	2302      	movs	r3, #2
bool readRegister(uint8_t reg, uint16_t *data, struct device *mlx_device_t) {
   1ce72:	460d      	mov	r5, r1
  uint8_t tx[2] = {MLX90393_REG_RR,reg << 2}; // the register itself, shift up by 2 bits!
   1ce74:	f88d 0009 	strb.w	r0, [sp, #9]
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {
   1ce78:	9201      	str	r2, [sp, #4]
   1ce7a:	9400      	str	r4, [sp, #0]
   1ce7c:	aa03      	add	r2, sp, #12
   1ce7e:	4619      	mov	r1, r3
   1ce80:	a802      	add	r0, sp, #8
   1ce82:	f7ff ff7b 	bl	1cd7c <transceive>
   1ce86:	b948      	cbnz	r0, 1ce9c <readRegister+0x3a>
  *data = ((uint16_t)rx[0] << 8) | rx[1];
   1ce88:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1ce8c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1ce90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1ce94:	802b      	strh	r3, [r5, #0]
  return true;
   1ce96:	2001      	movs	r0, #1
}
   1ce98:	b005      	add	sp, #20
   1ce9a:	bd30      	pop	{r4, r5, pc}
    return false;
   1ce9c:	4620      	mov	r0, r4
   1ce9e:	e7fb      	b.n	1ce98 <readRegister+0x36>

0001cea0 <mlx_exitMode>:
bool mlx_exitMode(struct device *mlx_device_t) {
   1cea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t tx[1] = {MLX90393_REG_EX};
   1cea2:	2380      	movs	r3, #128	; 0x80
   1cea4:	f88d 300c 	strb.w	r3, [sp, #12]
  return (transceive(tx, sizeof(tx), NULL, 0, 0, mlx_device_t) == MLX90393_STATUS_OK);
   1cea8:	2300      	movs	r3, #0
   1ceaa:	9001      	str	r0, [sp, #4]
   1ceac:	9300      	str	r3, [sp, #0]
   1ceae:	461a      	mov	r2, r3
   1ceb0:	2101      	movs	r1, #1
   1ceb2:	a803      	add	r0, sp, #12
   1ceb4:	f7ff ff62 	bl	1cd7c <transceive>
}
   1ceb8:	fab0 f080 	clz	r0, r0
   1cebc:	0940      	lsrs	r0, r0, #5
   1cebe:	b005      	add	sp, #20
   1cec0:	f85d fb04 	ldr.w	pc, [sp], #4

0001cec4 <mlx_reset>:
bool mlx_reset(struct device *mlx_device_t) {
   1cec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t tx[1] = {MLX90393_REG_RT};
   1cec6:	23f0      	movs	r3, #240	; 0xf0
   1cec8:	f88d 300c 	strb.w	r3, [sp, #12]
  if (transceive(tx, sizeof(tx), NULL, 0, 5, mlx_device_t) != MLX90393_STATUS_RESET) {
   1cecc:	2305      	movs	r3, #5
   1cece:	9300      	str	r3, [sp, #0]
   1ced0:	2300      	movs	r3, #0
   1ced2:	9001      	str	r0, [sp, #4]
   1ced4:	461a      	mov	r2, r3
   1ced6:	2101      	movs	r1, #1
   1ced8:	a803      	add	r0, sp, #12
   1ceda:	f7ff ff4f 	bl	1cd7c <transceive>
}
   1cede:	1e43      	subs	r3, r0, #1
   1cee0:	4258      	negs	r0, r3
   1cee2:	4158      	adcs	r0, r3
   1cee4:	b005      	add	sp, #20
   1cee6:	f85d fb04 	ldr.w	pc, [sp], #4

0001ceea <mlx_setTrigInt>:
bool mlx_setTrigInt(bool state, struct device *mlx_device_t) {
   1ceea:	b537      	push	{r0, r1, r2, r4, r5, lr}
  readRegister(MLX90393_CONF2, &data, mlx_device_t);
   1ceec:	460a      	mov	r2, r1
bool mlx_setTrigInt(bool state, struct device *mlx_device_t) {
   1ceee:	4605      	mov	r5, r0
   1cef0:	460c      	mov	r4, r1
  readRegister(MLX90393_CONF2, &data, mlx_device_t);
   1cef2:	2001      	movs	r0, #1
   1cef4:	f10d 0106 	add.w	r1, sp, #6
   1cef8:	f7ff ffb3 	bl	1ce62 <readRegister>
  data &= ~0x8000;
   1cefc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1cf00:	f3c3 030e 	ubfx	r3, r3, #0, #15
  if (state) {
   1cf04:	b94d      	cbnz	r5, 1cf1a <mlx_setTrigInt+0x30>
    data |= 0x8000;
   1cf06:	f8ad 3006 	strh.w	r3, [sp, #6]
  return writeRegister(MLX90393_CONF2, data, mlx_device_t);
   1cf0a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   1cf0e:	4622      	mov	r2, r4
   1cf10:	2001      	movs	r0, #1
   1cf12:	f7ff ff8c 	bl	1ce2e <writeRegister>
}
   1cf16:	b003      	add	sp, #12
   1cf18:	bd30      	pop	{r4, r5, pc}
    data |= 0x8000;
   1cf1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
   1cf1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
   1cf22:	e7f0      	b.n	1cf06 <mlx_setTrigInt+0x1c>

0001cf24 <mlx_init>:

  return mlx_readMeasurement(x, y, z, mlx_device_t);
  return 0;
}

bool mlx_init(struct device *mlx_device) {
   1cf24:	b510      	push	{r4, lr}

	//const struct device *mlx_device = device_get_binding("I2C_1");
  

  if (mlx_device == NULL) {
   1cf26:	4604      	mov	r4, r0
   1cf28:	b388      	cbz	r0, 1cf8e <mlx_init+0x6a>
   1cf2a:	f003 f82f 	bl	1ff8c <z_device_ready>
   1cf2e:	b370      	cbz	r0, 1cf8e <mlx_init+0x6a>

  if (!device_is_ready(mlx_device)) {
    return false;
  }

  if (!mlx_exitMode(mlx_device)){
   1cf30:	4620      	mov	r0, r4
   1cf32:	f7ff ffb5 	bl	1cea0 <mlx_exitMode>
   1cf36:	b350      	cbz	r0, 1cf8e <mlx_init+0x6a>
    return false;
  }

  if (!mlx_reset(mlx_device)) {
   1cf38:	4620      	mov	r0, r4
   1cf3a:	f7ff ffc3 	bl	1cec4 <mlx_reset>
   1cf3e:	b330      	cbz	r0, 1cf8e <mlx_init+0x6a>
    return false;
  }

  /* Set gain and sensor config. */
  if (!mlx_setGain(MLX90393_GAIN_1X, mlx_device)) {
   1cf40:	4621      	mov	r1, r4
   1cf42:	2007      	movs	r0, #7
   1cf44:	f7f4 f850 	bl	10fe8 <mlx_setGain>
   1cf48:	b308      	cbz	r0, 1cf8e <mlx_init+0x6a>
    return false;
  }

  /* Set resolution. */
  if (!mlx_setResolution(MLX90393_X, MLX90393_RES_16, mlx_device)){
   1cf4a:	2100      	movs	r1, #0
   1cf4c:	4622      	mov	r2, r4
   1cf4e:	4608      	mov	r0, r1
   1cf50:	f7f4 f866 	bl	11020 <mlx_setResolution>
   1cf54:	b1d8      	cbz	r0, 1cf8e <mlx_init+0x6a>
    return false;
  }
  if (!mlx_setResolution(MLX90393_Y, MLX90393_RES_16, mlx_device)){
   1cf56:	4622      	mov	r2, r4
   1cf58:	2100      	movs	r1, #0
   1cf5a:	2001      	movs	r0, #1
   1cf5c:	f7f4 f860 	bl	11020 <mlx_setResolution>
   1cf60:	b1a8      	cbz	r0, 1cf8e <mlx_init+0x6a>
    return false;
  }
  if (!mlx_setResolution(MLX90393_Z, MLX90393_RES_16, mlx_device)){
   1cf62:	4622      	mov	r2, r4
   1cf64:	2100      	movs	r1, #0
   1cf66:	2002      	movs	r0, #2
   1cf68:	f7f4 f85a 	bl	11020 <mlx_setResolution>
   1cf6c:	b178      	cbz	r0, 1cf8e <mlx_init+0x6a>
    return false;
  }

  /* Set oversampling. */
  if (!mlx_setOversampling(MLX90393_OSR_3, mlx_device)) {
   1cf6e:	4621      	mov	r1, r4
   1cf70:	2003      	movs	r0, #3
   1cf72:	f7f4 f8a9 	bl	110c8 <mlx_setOversampling>
   1cf76:	b150      	cbz	r0, 1cf8e <mlx_init+0x6a>
    return false;
  }

  /* Set digital filtering. */
  if (!mlx_setFilter(MLX90393_FILTER_7, mlx_device)) {
   1cf78:	4621      	mov	r1, r4
   1cf7a:	2007      	movs	r0, #7
   1cf7c:	f7f4 f888 	bl	11090 <mlx_setFilter>
   1cf80:	b128      	cbz	r0, 1cf8e <mlx_init+0x6a>
    return false;
  }

  /* set INT pin to output interrupt */
  if (!mlx_setTrigInt(true, mlx_device)) {
   1cf82:	4621      	mov	r1, r4
   1cf84:	2001      	movs	r0, #1
    return false;
  }

  return true;
   1cf86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (!mlx_setTrigInt(true, mlx_device)) {
   1cf8a:	f7ff bfae 	b.w	1ceea <mlx_setTrigInt>
   1cf8e:	2000      	movs	r0, #0
   1cf90:	bd10      	pop	{r4, pc}

0001cf92 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1cf92:	4603      	mov	r3, r0
   1cf94:	b140      	cbz	r0, 1cfa8 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1cf96:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1cf98:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1cf9c:	2a02      	cmp	r2, #2
   1cf9e:	d006      	beq.n	1cfae <sys_notify_validate+0x1c>
   1cfa0:	2a03      	cmp	r2, #3
   1cfa2:	d004      	beq.n	1cfae <sys_notify_validate+0x1c>
   1cfa4:	2a01      	cmp	r2, #1
   1cfa6:	d005      	beq.n	1cfb4 <sys_notify_validate+0x22>
		return -EINVAL;
   1cfa8:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1cfac:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1cfae:	681a      	ldr	r2, [r3, #0]
   1cfb0:	2a00      	cmp	r2, #0
   1cfb2:	d0f9      	beq.n	1cfa8 <sys_notify_validate+0x16>
		notify->result = 0;
   1cfb4:	2000      	movs	r0, #0
   1cfb6:	6098      	str	r0, [r3, #8]
   1cfb8:	4770      	bx	lr

0001cfba <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1cfba:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1cfbc:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1cfc0:	2a02      	cmp	r2, #2
{
   1cfc2:	b510      	push	{r4, lr}
   1cfc4:	4603      	mov	r3, r0
	notify->result = res;
   1cfc6:	6081      	str	r1, [r0, #8]
	switch (method) {
   1cfc8:	d00a      	beq.n	1cfe0 <sys_notify_finalize+0x26>
   1cfca:	2a03      	cmp	r2, #3
   1cfcc:	d10b      	bne.n	1cfe6 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1cfce:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1cfd0:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1cfd2:	2200      	movs	r2, #0
   1cfd4:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1cfd6:	b108      	cbz	r0, 1cfdc <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   1cfd8:	f7fc ff08 	bl	19dec <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1cfdc:	4620      	mov	r0, r4
   1cfde:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1cfe0:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1cfe2:	2400      	movs	r4, #0
		break;
   1cfe4:	e7f5      	b.n	1cfd2 <sys_notify_finalize+0x18>
	switch (method) {
   1cfe6:	2400      	movs	r4, #0
   1cfe8:	4620      	mov	r0, r4
   1cfea:	e7f2      	b.n	1cfd2 <sys_notify_finalize+0x18>

0001cfec <arch_printk_char_out>:
}
   1cfec:	2000      	movs	r0, #0
   1cfee:	4770      	bx	lr

0001cff0 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
   1cff0:	b40f      	push	{r0, r1, r2, r3}
   1cff2:	b507      	push	{r0, r1, r2, lr}
   1cff4:	a904      	add	r1, sp, #16
   1cff6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1cffa:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
   1cffc:	f7f4 f954 	bl	112a8 <vprintk>
	}
	va_end(ap);
}
   1d000:	b003      	add	sp, #12
   1d002:	f85d eb04 	ldr.w	lr, [sp], #4
   1d006:	b004      	add	sp, #16
   1d008:	4770      	bx	lr

0001d00a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1d00a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1d00c:	f013 0307 	ands.w	r3, r3, #7
   1d010:	d105      	bne.n	1d01e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1d012:	6803      	ldr	r3, [r0, #0]
   1d014:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1d016:	bf0c      	ite	eq
   1d018:	2000      	moveq	r0, #0
   1d01a:	2003      	movne	r0, #3
   1d01c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1d01e:	2b02      	cmp	r3, #2
   1d020:	d105      	bne.n	1d02e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1d022:	8b43      	ldrh	r3, [r0, #26]
   1d024:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1d026:	bf14      	ite	ne
   1d028:	2000      	movne	r0, #0
   1d02a:	2004      	moveq	r0, #4
   1d02c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1d02e:	2b01      	cmp	r3, #1
   1d030:	d105      	bne.n	1d03e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1d032:	6803      	ldr	r3, [r0, #0]
   1d034:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1d036:	bf0c      	ite	eq
   1d038:	2000      	moveq	r0, #0
   1d03a:	2005      	movne	r0, #5
   1d03c:	4770      	bx	lr
	int evt = EVT_NOP;
   1d03e:	2000      	movs	r0, #0
}
   1d040:	4770      	bx	lr

0001d042 <notify_one>:
{
   1d042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d046:	460d      	mov	r5, r1
   1d048:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1d04a:	4619      	mov	r1, r3
   1d04c:	1d28      	adds	r0, r5, #4
{
   1d04e:	4690      	mov	r8, r2
   1d050:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1d052:	f7ff ffb2 	bl	1cfba <sys_notify_finalize>
	if (cb) {
   1d056:	4604      	mov	r4, r0
   1d058:	b138      	cbz	r0, 1d06a <notify_one+0x28>
		cb(mgr, cli, state, res);
   1d05a:	4633      	mov	r3, r6
   1d05c:	4642      	mov	r2, r8
   1d05e:	4629      	mov	r1, r5
   1d060:	4638      	mov	r0, r7
   1d062:	46a4      	mov	ip, r4
}
   1d064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1d068:	4760      	bx	ip
}
   1d06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d06e <transition_complete>:
{
   1d06e:	b410      	push	{r4}
	__asm__ volatile(
   1d070:	f04f 0440 	mov.w	r4, #64	; 0x40
   1d074:	f3ef 8211 	mrs	r2, BASEPRI
   1d078:	f384 8811 	msr	BASEPRI, r4
   1d07c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1d080:	6141      	str	r1, [r0, #20]
}
   1d082:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1d084:	2101      	movs	r1, #1
   1d086:	f7f4 b91d 	b.w	112c4 <process_event>

0001d08a <validate_args>:
{
   1d08a:	b510      	push	{r4, lr}
   1d08c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1d08e:	b140      	cbz	r0, 1d0a2 <validate_args+0x18>
   1d090:	b139      	cbz	r1, 1d0a2 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1d092:	1d08      	adds	r0, r1, #4
   1d094:	f7ff ff7d 	bl	1cf92 <sys_notify_validate>
	if ((rv == 0)
   1d098:	b928      	cbnz	r0, 1d0a6 <validate_args+0x1c>
	    && ((cli->notify.flags
   1d09a:	68a3      	ldr	r3, [r4, #8]
   1d09c:	f033 0303 	bics.w	r3, r3, #3
   1d0a0:	d001      	beq.n	1d0a6 <validate_args+0x1c>
		rv = -EINVAL;
   1d0a2:	f06f 0015 	mvn.w	r0, #21
}
   1d0a6:	bd10      	pop	{r4, pc}

0001d0a8 <onoff_manager_init>:
{
   1d0a8:	b538      	push	{r3, r4, r5, lr}
   1d0aa:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1d0ac:	4605      	mov	r5, r0
   1d0ae:	b158      	cbz	r0, 1d0c8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1d0b0:	b151      	cbz	r1, 1d0c8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1d0b2:	680b      	ldr	r3, [r1, #0]
   1d0b4:	b143      	cbz	r3, 1d0c8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1d0b6:	684b      	ldr	r3, [r1, #4]
   1d0b8:	b133      	cbz	r3, 1d0c8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1d0ba:	221c      	movs	r2, #28
   1d0bc:	2100      	movs	r1, #0
   1d0be:	f003 fd17 	bl	20af0 <memset>
   1d0c2:	612c      	str	r4, [r5, #16]
	return 0;
   1d0c4:	2000      	movs	r0, #0
}
   1d0c6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1d0c8:	f06f 0015 	mvn.w	r0, #21
   1d0cc:	e7fb      	b.n	1d0c6 <onoff_manager_init+0x1e>

0001d0ce <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1d0ce:	b570      	push	{r4, r5, r6, lr}
   1d0d0:	4604      	mov	r4, r0
   1d0d2:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1d0d4:	f7ff ffd9 	bl	1d08a <validate_args>

	if (rv < 0) {
   1d0d8:	1e05      	subs	r5, r0, #0
   1d0da:	db31      	blt.n	1d140 <onoff_request+0x72>
   1d0dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d0e0:	f3ef 8111 	mrs	r1, BASEPRI
   1d0e4:	f383 8811 	msr	BASEPRI, r3
   1d0e8:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1d0ec:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1d0ee:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1d0f0:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1d0f4:	42ab      	cmp	r3, r5
   1d0f6:	f000 0207 	and.w	r2, r0, #7
   1d0fa:	d02e      	beq.n	1d15a <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1d0fc:	2a02      	cmp	r2, #2
   1d0fe:	d10e      	bne.n	1d11e <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1d100:	3301      	adds	r3, #1
   1d102:	8363      	strh	r3, [r4, #26]
	rv = state;
   1d104:	4615      	mov	r5, r2
		notify = true;
   1d106:	2301      	movs	r3, #1
	__asm__ volatile(
   1d108:	f381 8811 	msr	BASEPRI, r1
   1d10c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1d110:	b1b3      	cbz	r3, 1d140 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1d112:	2300      	movs	r3, #0
   1d114:	4631      	mov	r1, r6
   1d116:	4620      	mov	r0, r4
   1d118:	f7ff ff93 	bl	1d042 <notify_one>
   1d11c:	e010      	b.n	1d140 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1d11e:	0783      	lsls	r3, r0, #30
   1d120:	d001      	beq.n	1d126 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1d122:	2a06      	cmp	r2, #6
   1d124:	d10e      	bne.n	1d144 <onoff_request+0x76>
	parent->next = child;
   1d126:	2300      	movs	r3, #0
   1d128:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1d12a:	6863      	ldr	r3, [r4, #4]
   1d12c:	b993      	cbnz	r3, 1d154 <onoff_request+0x86>
	list->head = node;
   1d12e:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1d132:	4615      	mov	r5, r2
   1d134:	b962      	cbnz	r2, 1d150 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1d136:	460a      	mov	r2, r1
   1d138:	4620      	mov	r0, r4
   1d13a:	2102      	movs	r1, #2
   1d13c:	f7f4 f8c2 	bl	112c4 <process_event>
		}
	}

	return rv;
}
   1d140:	4628      	mov	r0, r5
   1d142:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1d144:	2a05      	cmp	r2, #5
   1d146:	bf0c      	ite	eq
   1d148:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1d14c:	f06f 0504 	mvnne.w	r5, #4
   1d150:	2300      	movs	r3, #0
   1d152:	e7d9      	b.n	1d108 <onoff_request+0x3a>
	parent->next = child;
   1d154:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1d156:	6066      	str	r6, [r4, #4]
}
   1d158:	e7eb      	b.n	1d132 <onoff_request+0x64>
		rv = -EAGAIN;
   1d15a:	f06f 050a 	mvn.w	r5, #10
   1d15e:	e7f7      	b.n	1d150 <onoff_request+0x82>

0001d160 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   1d160:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d162:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d166:	f3ef 8211 	mrs	r2, BASEPRI
   1d16a:	f383 8811 	msr	BASEPRI, r3
   1d16e:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1d172:	8b04      	ldrh	r4, [r0, #24]
   1d174:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   1d178:	2c02      	cmp	r4, #2
   1d17a:	d00a      	beq.n	1d192 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
   1d17c:	2c01      	cmp	r4, #1
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   1d17e:	bf0c      	ite	eq
   1d180:	f06f 0004 	mvneq.w	r0, #4
   1d184:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   1d188:	f382 8811 	msr	BASEPRI, r2
   1d18c:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   1d190:	e008      	b.n	1d1a4 <onoff_release+0x44>
	mgr->refs -= 1U;
   1d192:	8b43      	ldrh	r3, [r0, #26]
   1d194:	3b01      	subs	r3, #1
   1d196:	b29b      	uxth	r3, r3
   1d198:	8343      	strh	r3, [r0, #26]
	if (stop) {
   1d19a:	b923      	cbnz	r3, 1d1a6 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   1d19c:	4621      	mov	r1, r4
   1d19e:	f7f4 f891 	bl	112c4 <process_event>
	int rv = state;
   1d1a2:	4620      	mov	r0, r4
}
   1d1a4:	bd10      	pop	{r4, pc}
	int rv = state;
   1d1a6:	4620      	mov	r0, r4
   1d1a8:	e7ee      	b.n	1d188 <onoff_release+0x28>

0001d1aa <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1d1aa:	4604      	mov	r4, r0
   1d1ac:	b508      	push	{r3, lr}
   1d1ae:	4608      	mov	r0, r1
   1d1b0:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1d1b2:	461a      	mov	r2, r3
   1d1b4:	47a0      	blx	r4
	return z_impl_k_current_get();
   1d1b6:	f7fc fbcb 	bl	19950 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1d1ba:	f7f5 ffdf 	bl	1317c <z_impl_k_thread_abort>

0001d1be <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1d1be:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1d1c0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1d1c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1d1c8:	bf2c      	ite	cs
   1d1ca:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1d1ce:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1d1d2:	4770      	bx	lr

0001d1d4 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1d1d4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1d1d8:	6880      	ldr	r0, [r0, #8]
   1d1da:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1d1de:	bf2c      	ite	cs
   1d1e0:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1d1e4:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1d1e8:	4770      	bx	lr

0001d1ea <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1d1ea:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1d1ec:	2201      	movs	r2, #1
   1d1ee:	f7ff ffe6 	bl	1d1be <chunk_field>
}
   1d1f2:	0840      	lsrs	r0, r0, #1
   1d1f4:	bd08      	pop	{r3, pc}

0001d1f6 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1d1f6:	6883      	ldr	r3, [r0, #8]
   1d1f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1d1fc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1d200:	d308      	bcc.n	1d214 <set_chunk_used+0x1e>
		if (used) {
   1d202:	684b      	ldr	r3, [r1, #4]
   1d204:	b11a      	cbz	r2, 1d20e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1d206:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1d20a:	604b      	str	r3, [r1, #4]
   1d20c:	4770      	bx	lr
   1d20e:	f023 0301 	bic.w	r3, r3, #1
   1d212:	e7fa      	b.n	1d20a <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1d214:	884b      	ldrh	r3, [r1, #2]
   1d216:	b11a      	cbz	r2, 1d220 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1d218:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1d21c:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1d21e:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1d220:	f023 0301 	bic.w	r3, r3, #1
   1d224:	e7fa      	b.n	1d21c <set_chunk_used+0x26>

0001d226 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1d226:	0053      	lsls	r3, r2, #1
   1d228:	2201      	movs	r2, #1
   1d22a:	f7ff bfd3 	b.w	1d1d4 <chunk_set>

0001d22e <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1d22e:	6880      	ldr	r0, [r0, #8]
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1d230:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1d232:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1d236:	bf2c      	ite	cs
   1d238:	2002      	movcs	r0, #2
   1d23a:	2001      	movcc	r0, #1
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1d23c:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1d23e:	fab0 f080 	clz	r0, r0
}
   1d242:	f1c0 001f 	rsb	r0, r0, #31
   1d246:	4770      	bx	lr

0001d248 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1d248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d24c:	4616      	mov	r6, r2
   1d24e:	4604      	mov	r4, r0
   1d250:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1d252:	f7ff ffca 	bl	1d1ea <chunk_size>
   1d256:	4631      	mov	r1, r6
   1d258:	4605      	mov	r5, r0
   1d25a:	4620      	mov	r0, r4
   1d25c:	f7ff ffc5 	bl	1d1ea <chunk_size>
   1d260:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   1d262:	462a      	mov	r2, r5
   1d264:	4639      	mov	r1, r7
   1d266:	4620      	mov	r0, r4
   1d268:	f7ff ffdd 	bl	1d226 <set_chunk_size>
	return c + chunk_size(h, c);
   1d26c:	4631      	mov	r1, r6
   1d26e:	4620      	mov	r0, r4
   1d270:	f7ff ffbb 	bl	1d1ea <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1d274:	462b      	mov	r3, r5
   1d276:	1831      	adds	r1, r6, r0
   1d278:	2200      	movs	r2, #0
   1d27a:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1d27c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d280:	f7ff bfa8 	b.w	1d1d4 <chunk_set>

0001d284 <split_chunks>:
{
   1d284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d288:	4614      	mov	r4, r2
   1d28a:	4605      	mov	r5, r0
   1d28c:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   1d28e:	f7ff ffac 	bl	1d1ea <chunk_size>
	chunksz_t lsz = rc - lc;
   1d292:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   1d296:	1b37      	subs	r7, r6, r4
   1d298:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1d29a:	4642      	mov	r2, r8
   1d29c:	4631      	mov	r1, r6
   1d29e:	4628      	mov	r0, r5
   1d2a0:	f7ff ffc1 	bl	1d226 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1d2a4:	463a      	mov	r2, r7
   1d2a6:	4621      	mov	r1, r4
   1d2a8:	4628      	mov	r0, r5
   1d2aa:	f7ff ffbc 	bl	1d226 <set_chunk_size>
   1d2ae:	4643      	mov	r3, r8
   1d2b0:	2200      	movs	r2, #0
   1d2b2:	4621      	mov	r1, r4
   1d2b4:	4628      	mov	r0, r5
   1d2b6:	f7ff ff8d 	bl	1d1d4 <chunk_set>
	return c + chunk_size(h, c);
   1d2ba:	4621      	mov	r1, r4
   1d2bc:	4628      	mov	r0, r5
   1d2be:	f7ff ff94 	bl	1d1ea <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1d2c2:	463b      	mov	r3, r7
   1d2c4:	1821      	adds	r1, r4, r0
   1d2c6:	2200      	movs	r2, #0
   1d2c8:	4628      	mov	r0, r5
}
   1d2ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d2ce:	f7ff bf81 	b.w	1d1d4 <chunk_set>

0001d2d2 <free_list_remove_bidx>:
{
   1d2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d2d6:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1d2d8:	2203      	movs	r2, #3
   1d2da:	460e      	mov	r6, r1
   1d2dc:	4604      	mov	r4, r0
   1d2de:	f7ff ff6e 	bl	1d1be <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1d2e2:	4286      	cmp	r6, r0
   1d2e4:	4605      	mov	r5, r0
   1d2e6:	f107 0804 	add.w	r8, r7, #4
   1d2ea:	d10b      	bne.n	1d304 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1d2ec:	2301      	movs	r3, #1
   1d2ee:	fa03 f707 	lsl.w	r7, r3, r7
   1d2f2:	68e3      	ldr	r3, [r4, #12]
   1d2f4:	ea23 0307 	bic.w	r3, r3, r7
   1d2f8:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1d2fa:	2300      	movs	r3, #0
   1d2fc:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1d300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1d304:	4631      	mov	r1, r6
   1d306:	2202      	movs	r2, #2
   1d308:	4620      	mov	r0, r4
   1d30a:	f7ff ff58 	bl	1d1be <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1d30e:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1d310:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1d312:	4601      	mov	r1, r0
		b->next = second;
   1d314:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1d318:	4620      	mov	r0, r4
   1d31a:	2203      	movs	r2, #3
   1d31c:	f7ff ff5a 	bl	1d1d4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1d320:	4633      	mov	r3, r6
   1d322:	4629      	mov	r1, r5
   1d324:	4620      	mov	r0, r4
   1d326:	2202      	movs	r2, #2
}
   1d328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d32c:	f7ff bf52 	b.w	1d1d4 <chunk_set>

0001d330 <free_list_remove>:
{
   1d330:	b538      	push	{r3, r4, r5, lr}
   1d332:	4604      	mov	r4, r0
   1d334:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1d336:	f7ff ff58 	bl	1d1ea <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1d33a:	68a3      	ldr	r3, [r4, #8]
   1d33c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d340:	4601      	mov	r1, r0
   1d342:	d301      	bcc.n	1d348 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1d344:	2801      	cmp	r0, #1
   1d346:	d009      	beq.n	1d35c <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1d348:	4620      	mov	r0, r4
   1d34a:	f7ff ff70 	bl	1d22e <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   1d34e:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1d350:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1d352:	4620      	mov	r0, r4
}
   1d354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   1d358:	f7ff bfbb 	b.w	1d2d2 <free_list_remove_bidx>
}
   1d35c:	bd38      	pop	{r3, r4, r5, pc}

0001d35e <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1d35e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d362:	4605      	mov	r5, r0
   1d364:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1d366:	f7ff ff62 	bl	1d22e <bucket_idx>
   1d36a:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
   1d36e:	4606      	mov	r6, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1d370:	f8da 9010 	ldr.w	r9, [sl, #16]
   1d374:	f1b9 0f00 	cmp.w	r9, #0
   1d378:	d01b      	beq.n	1d3b2 <alloc_chunk+0x54>
   1d37a:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1d37c:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1d380:	4628      	mov	r0, r5
   1d382:	4621      	mov	r1, r4
   1d384:	f7ff ff31 	bl	1d1ea <chunk_size>
   1d388:	4540      	cmp	r0, r8
   1d38a:	d307      	bcc.n	1d39c <alloc_chunk+0x3e>
				free_list_remove_bidx(h, c, bi);
   1d38c:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1d38e:	4621      	mov	r1, r4
   1d390:	4628      	mov	r0, r5
   1d392:	f7ff ff9e 	bl	1d2d2 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1d396:	4620      	mov	r0, r4
   1d398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   1d39c:	2203      	movs	r2, #3
   1d39e:	4621      	mov	r1, r4
   1d3a0:	4628      	mov	r0, r5
   1d3a2:	f7ff ff0c 	bl	1d1be <chunk_field>
		} while (--i && b->next != first);
   1d3a6:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1d3a8:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1d3ac:	d001      	beq.n	1d3b2 <alloc_chunk+0x54>
   1d3ae:	4581      	cmp	r9, r0
   1d3b0:	d1e4      	bne.n	1d37c <alloc_chunk+0x1e>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1d3b2:	68e9      	ldr	r1, [r5, #12]
   1d3b4:	3601      	adds	r6, #1
   1d3b6:	f04f 34ff 	mov.w	r4, #4294967295
   1d3ba:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   1d3bc:	400c      	ands	r4, r1
   1d3be:	d0ea      	beq.n	1d396 <alloc_chunk+0x38>
		int minbucket = __builtin_ctz(bmask);
   1d3c0:	fa94 f2a4 	rbit	r2, r4
   1d3c4:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1d3c8:	1d13      	adds	r3, r2, #4
   1d3ca:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   1d3ce:	e7de      	b.n	1d38e <alloc_chunk+0x30>

0001d3d0 <free_list_add>:
{
   1d3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d3d4:	4604      	mov	r4, r0
   1d3d6:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1d3d8:	f7ff ff07 	bl	1d1ea <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1d3dc:	68a3      	ldr	r3, [r4, #8]
   1d3de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d3e2:	4601      	mov	r1, r0
   1d3e4:	d301      	bcc.n	1d3ea <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1d3e6:	2801      	cmp	r0, #1
   1d3e8:	d035      	beq.n	1d456 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1d3ea:	4620      	mov	r0, r4
   1d3ec:	f7ff ff1f 	bl	1d22e <bucket_idx>
	if (b->next == 0U) {
   1d3f0:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1d3f4:	6916      	ldr	r6, [r2, #16]
   1d3f6:	b99e      	cbnz	r6, 1d420 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1d3f8:	2301      	movs	r3, #1
   1d3fa:	fa03 f000 	lsl.w	r0, r3, r0
   1d3fe:	68e3      	ldr	r3, [r4, #12]
   1d400:	4303      	orrs	r3, r0
   1d402:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1d404:	4629      	mov	r1, r5
		b->next = c;
   1d406:	6115      	str	r5, [r2, #16]
   1d408:	462b      	mov	r3, r5
   1d40a:	2202      	movs	r2, #2
   1d40c:	4620      	mov	r0, r4
   1d40e:	f7ff fee1 	bl	1d1d4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1d412:	2203      	movs	r2, #3
   1d414:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1d416:	4620      	mov	r0, r4
}
   1d418:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d41c:	f7ff beda 	b.w	1d1d4 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1d420:	2202      	movs	r2, #2
   1d422:	4631      	mov	r1, r6
   1d424:	4620      	mov	r0, r4
   1d426:	f7ff feca 	bl	1d1be <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1d42a:	2202      	movs	r2, #2
   1d42c:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1d42e:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1d430:	4629      	mov	r1, r5
   1d432:	4620      	mov	r0, r4
   1d434:	f7ff fece 	bl	1d1d4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1d438:	4633      	mov	r3, r6
   1d43a:	2203      	movs	r2, #3
   1d43c:	4629      	mov	r1, r5
   1d43e:	4620      	mov	r0, r4
   1d440:	f7ff fec8 	bl	1d1d4 <chunk_set>
   1d444:	2203      	movs	r2, #3
   1d446:	4639      	mov	r1, r7
   1d448:	462b      	mov	r3, r5
   1d44a:	4620      	mov	r0, r4
   1d44c:	f7ff fec2 	bl	1d1d4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1d450:	2202      	movs	r2, #2
   1d452:	4631      	mov	r1, r6
   1d454:	e7df      	b.n	1d416 <free_list_add+0x46>
   1d456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d45a <free_chunk>:
{
   1d45a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d45c:	460c      	mov	r4, r1
   1d45e:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1d460:	f7ff fec3 	bl	1d1ea <chunk_size>
   1d464:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1d466:	2201      	movs	r2, #1
   1d468:	4631      	mov	r1, r6
   1d46a:	4628      	mov	r0, r5
   1d46c:	f7ff fea7 	bl	1d1be <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1d470:	07c3      	lsls	r3, r0, #31
   1d472:	d40c      	bmi.n	1d48e <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1d474:	4631      	mov	r1, r6
   1d476:	4628      	mov	r0, r5
   1d478:	f7ff ff5a 	bl	1d330 <free_list_remove>
	return c + chunk_size(h, c);
   1d47c:	4621      	mov	r1, r4
   1d47e:	4628      	mov	r0, r5
   1d480:	f7ff feb3 	bl	1d1ea <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1d484:	4621      	mov	r1, r4
   1d486:	1822      	adds	r2, r4, r0
   1d488:	4628      	mov	r0, r5
   1d48a:	f7ff fedd 	bl	1d248 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1d48e:	2200      	movs	r2, #0
   1d490:	4621      	mov	r1, r4
   1d492:	4628      	mov	r0, r5
   1d494:	f7ff fe93 	bl	1d1be <chunk_field>
   1d498:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1d49a:	2201      	movs	r2, #1
   1d49c:	4639      	mov	r1, r7
   1d49e:	4628      	mov	r0, r5
   1d4a0:	f7ff fe8d 	bl	1d1be <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1d4a4:	f010 0601 	ands.w	r6, r0, #1
   1d4a8:	d113      	bne.n	1d4d2 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1d4aa:	4639      	mov	r1, r7
   1d4ac:	4628      	mov	r0, r5
   1d4ae:	f7ff ff3f 	bl	1d330 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1d4b2:	4621      	mov	r1, r4
   1d4b4:	4632      	mov	r2, r6
   1d4b6:	4628      	mov	r0, r5
   1d4b8:	f7ff fe81 	bl	1d1be <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1d4bc:	4622      	mov	r2, r4
   1d4be:	1a21      	subs	r1, r4, r0
   1d4c0:	4628      	mov	r0, r5
   1d4c2:	f7ff fec1 	bl	1d248 <merge_chunks>
   1d4c6:	4621      	mov	r1, r4
   1d4c8:	4632      	mov	r2, r6
   1d4ca:	4628      	mov	r0, r5
   1d4cc:	f7ff fe77 	bl	1d1be <chunk_field>
   1d4d0:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1d4d2:	4621      	mov	r1, r4
   1d4d4:	4628      	mov	r0, r5
}
   1d4d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1d4da:	f7ff bf79 	b.w	1d3d0 <free_list_add>

0001d4de <sys_heap_free>:
{
   1d4de:	b510      	push	{r4, lr}
	if (mem == NULL) {
   1d4e0:	b191      	cbz	r1, 1d508 <sys_heap_free+0x2a>
	struct z_heap *h = heap->heap;
   1d4e2:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1d4e4:	6883      	ldr	r3, [r0, #8]
   1d4e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d4ea:	bf2c      	ite	cs
   1d4ec:	2408      	movcs	r4, #8
   1d4ee:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1d4f0:	1b0c      	subs	r4, r1, r4
   1d4f2:	1a24      	subs	r4, r4, r0
   1d4f4:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   1d4f6:	4621      	mov	r1, r4
   1d4f8:	2200      	movs	r2, #0
   1d4fa:	f7ff fe7c 	bl	1d1f6 <set_chunk_used>
	free_chunk(h, c);
   1d4fe:	4621      	mov	r1, r4
}
   1d500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   1d504:	f7ff bfa9 	b.w	1d45a <free_chunk>
}
   1d508:	bd10      	pop	{r4, pc}

0001d50a <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1d50a:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1d50c:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1d50e:	b909      	cbnz	r1, 1d514 <sys_heap_alloc+0xa>
		return NULL;
   1d510:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1d512:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1d514:	68ab      	ldr	r3, [r5, #8]
   1d516:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1d51a:	d9f9      	bls.n	1d510 <sys_heap_alloc+0x6>
   1d51c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d520:	bf2c      	ite	cs
   1d522:	2208      	movcs	r2, #8
   1d524:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1d526:	1dcc      	adds	r4, r1, #7
   1d528:	4414      	add	r4, r2
   1d52a:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1d52c:	4621      	mov	r1, r4
   1d52e:	4628      	mov	r0, r5
   1d530:	f7ff ff15 	bl	1d35e <alloc_chunk>
	if (c == 0U) {
   1d534:	4606      	mov	r6, r0
   1d536:	2800      	cmp	r0, #0
   1d538:	d0ea      	beq.n	1d510 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1d53a:	4601      	mov	r1, r0
   1d53c:	4628      	mov	r0, r5
   1d53e:	f7ff fe54 	bl	1d1ea <chunk_size>
   1d542:	42a0      	cmp	r0, r4
   1d544:	d909      	bls.n	1d55a <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   1d546:	4434      	add	r4, r6
   1d548:	4631      	mov	r1, r6
   1d54a:	4628      	mov	r0, r5
   1d54c:	4622      	mov	r2, r4
   1d54e:	f7ff fe99 	bl	1d284 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1d552:	4621      	mov	r1, r4
   1d554:	4628      	mov	r0, r5
   1d556:	f7ff ff3b 	bl	1d3d0 <free_list_add>
	set_chunk_used(h, c, true);
   1d55a:	4628      	mov	r0, r5
   1d55c:	2201      	movs	r2, #1
   1d55e:	4631      	mov	r1, r6
   1d560:	f7ff fe49 	bl	1d1f6 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1d564:	68ab      	ldr	r3, [r5, #8]
   1d566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d56a:	bf2c      	ite	cs
   1d56c:	2008      	movcs	r0, #8
   1d56e:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1d570:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1d574:	4428      	add	r0, r5
	return chunk_mem(h, c);
   1d576:	e7cc      	b.n	1d512 <sys_heap_alloc+0x8>

0001d578 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1d578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   1d57c:	6806      	ldr	r6, [r0, #0]
{
   1d57e:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1d580:	424a      	negs	r2, r1
   1d582:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   1d586:	ea31 0202 	bics.w	r2, r1, r2
   1d58a:	68b5      	ldr	r5, [r6, #8]
{
   1d58c:	460b      	mov	r3, r1
	if (align != rew) {
   1d58e:	d00f      	beq.n	1d5b0 <sys_heap_aligned_alloc+0x38>
   1d590:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1d594:	bf34      	ite	cc
   1d596:	2104      	movcc	r1, #4
   1d598:	2108      	movcs	r1, #8
   1d59a:	42b9      	cmp	r1, r7
   1d59c:	460a      	mov	r2, r1
   1d59e:	46b9      	mov	r9, r7
   1d5a0:	bf28      	it	cs
   1d5a2:	463a      	movcs	r2, r7
		align -= rew;
   1d5a4:	1bdf      	subs	r7, r3, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1d5a6:	b994      	cbnz	r4, 1d5ce <sys_heap_aligned_alloc+0x56>
		return NULL;
   1d5a8:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   1d5aa:	4628      	mov	r0, r5
   1d5ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d5b0:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1d5b4:	bf34      	ite	cc
   1d5b6:	2204      	movcc	r2, #4
   1d5b8:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   1d5ba:	4291      	cmp	r1, r2
   1d5bc:	d804      	bhi.n	1d5c8 <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   1d5be:	4621      	mov	r1, r4
}
   1d5c0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1d5c4:	f7ff bfa1 	b.w	1d50a <sys_heap_alloc>
		rew = 0;
   1d5c8:	f04f 0900 	mov.w	r9, #0
   1d5cc:	e7eb      	b.n	1d5a6 <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1d5ce:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   1d5d2:	d9e9      	bls.n	1d5a8 <sys_heap_aligned_alloc+0x30>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   1d5d4:	1de1      	adds	r1, r4, #7
   1d5d6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1d5da:	4439      	add	r1, r7
   1d5dc:	bf2c      	ite	cs
   1d5de:	2308      	movcs	r3, #8
   1d5e0:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1d5e2:	1a89      	subs	r1, r1, r2
   1d5e4:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1d5e6:	08c9      	lsrs	r1, r1, #3
   1d5e8:	4630      	mov	r0, r6
   1d5ea:	f7ff feb8 	bl	1d35e <alloc_chunk>
	if (c0 == 0) {
   1d5ee:	4680      	mov	r8, r0
   1d5f0:	2800      	cmp	r0, #0
   1d5f2:	d0d9      	beq.n	1d5a8 <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   1d5f4:	68b3      	ldr	r3, [r6, #8]
   1d5f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d5fa:	bf2c      	ite	cs
   1d5fc:	2308      	movcs	r3, #8
   1d5fe:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1d600:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   1d604:	441d      	add	r5, r3
   1d606:	1e7a      	subs	r2, r7, #1
   1d608:	4435      	add	r5, r6
   1d60a:	427f      	negs	r7, r7
   1d60c:	4415      	add	r5, r2
   1d60e:	403d      	ands	r5, r7
   1d610:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1d614:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1d616:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1d618:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1d61a:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1d61c:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1d620:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1d622:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1d626:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1d62a:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1d62e:	d208      	bcs.n	1d642 <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   1d630:	4601      	mov	r1, r0
   1d632:	463a      	mov	r2, r7
   1d634:	4630      	mov	r0, r6
   1d636:	f7ff fe25 	bl	1d284 <split_chunks>
		free_list_add(h, c0);
   1d63a:	4641      	mov	r1, r8
   1d63c:	4630      	mov	r0, r6
   1d63e:	f7ff fec7 	bl	1d3d0 <free_list_add>
	return c + chunk_size(h, c);
   1d642:	4639      	mov	r1, r7
   1d644:	4630      	mov	r0, r6
   1d646:	f7ff fdd0 	bl	1d1ea <chunk_size>
   1d64a:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1d64c:	4284      	cmp	r4, r0
   1d64e:	d208      	bcs.n	1d662 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   1d650:	4639      	mov	r1, r7
   1d652:	4630      	mov	r0, r6
   1d654:	4622      	mov	r2, r4
   1d656:	f7ff fe15 	bl	1d284 <split_chunks>
		free_list_add(h, c_end);
   1d65a:	4621      	mov	r1, r4
   1d65c:	4630      	mov	r0, r6
   1d65e:	f7ff feb7 	bl	1d3d0 <free_list_add>
	set_chunk_used(h, c, true);
   1d662:	2201      	movs	r2, #1
   1d664:	4639      	mov	r1, r7
   1d666:	4630      	mov	r0, r6
   1d668:	f7ff fdc5 	bl	1d1f6 <set_chunk_used>
	return mem;
   1d66c:	e79d      	b.n	1d5aa <sys_heap_aligned_alloc+0x32>

0001d66e <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1d66e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1d672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d674:	bf2c      	ite	cs
   1d676:	2508      	movcs	r5, #8
   1d678:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1d67a:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1d67c:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1d67e:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1d680:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1d684:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1d688:	1b2d      	subs	r5, r5, r4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1d68a:	2300      	movs	r3, #0
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1d68c:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
   1d68e:	6004      	str	r4, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1d690:	4629      	mov	r1, r5
	h->end_chunk = heap_sz;
   1d692:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1d694:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1d696:	4620      	mov	r0, r4
   1d698:	f7ff fdc9 	bl	1d22e <bucket_idx>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1d69c:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1d69e:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1d6a0:	1c41      	adds	r1, r0, #1
   1d6a2:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1d6a4:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   1d6a8:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1d6aa:	428b      	cmp	r3, r1
   1d6ac:	db2f      	blt.n	1d70e <sys_heap_init+0xa0>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1d6ae:	4632      	mov	r2, r6
   1d6b0:	4620      	mov	r0, r4
   1d6b2:	2100      	movs	r1, #0
   1d6b4:	f7ff fdb7 	bl	1d226 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1d6b8:	2300      	movs	r3, #0
   1d6ba:	461a      	mov	r2, r3
   1d6bc:	4619      	mov	r1, r3
   1d6be:	4620      	mov	r0, r4
   1d6c0:	f7ff fd88 	bl	1d1d4 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1d6c4:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1d6c6:	4620      	mov	r0, r4
   1d6c8:	2201      	movs	r2, #1
   1d6ca:	2100      	movs	r1, #0
   1d6cc:	f7ff fd93 	bl	1d1f6 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1d6d0:	463a      	mov	r2, r7
   1d6d2:	4631      	mov	r1, r6
   1d6d4:	f7ff fda7 	bl	1d226 <set_chunk_size>
   1d6d8:	4633      	mov	r3, r6
   1d6da:	4631      	mov	r1, r6
   1d6dc:	4620      	mov	r0, r4
   1d6de:	2200      	movs	r2, #0
   1d6e0:	f7ff fd78 	bl	1d1d4 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   1d6e4:	4629      	mov	r1, r5
   1d6e6:	4620      	mov	r0, r4
   1d6e8:	2200      	movs	r2, #0
   1d6ea:	f7ff fd9c 	bl	1d226 <set_chunk_size>
   1d6ee:	463b      	mov	r3, r7
   1d6f0:	4629      	mov	r1, r5
   1d6f2:	4620      	mov	r0, r4
   1d6f4:	2200      	movs	r2, #0
   1d6f6:	f7ff fd6d 	bl	1d1d4 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   1d6fa:	4629      	mov	r1, r5
   1d6fc:	4620      	mov	r0, r4
   1d6fe:	2201      	movs	r2, #1
   1d700:	f7ff fd79 	bl	1d1f6 <set_chunk_used>

	free_list_add(h, chunk0_size);
   1d704:	4631      	mov	r1, r6
}
   1d706:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1d70a:	f7ff be61 	b.w	1d3d0 <free_list_add>
		h->buckets[i].next = 0;
   1d70e:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1d712:	3301      	adds	r3, #1
   1d714:	e7c9      	b.n	1d6aa <sys_heap_init+0x3c>

0001d716 <_ldiv5>:
{
   1d716:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
	uint32_t v_lo = *v;
   1d71a:	e9d0 2400 	ldrd	r2, r4, [r0]
	__asm__ ("" : "+r" (m));
   1d71e:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   1d722:	fba2 bc03 	umull	fp, ip, r2, r3
   1d726:	eb1b 0603 	adds.w	r6, fp, r3
   1d72a:	eb4c 0503 	adc.w	r5, ip, r3
	result >>= 32;
   1d72e:	462f      	mov	r7, r5
	result += (uint64_t)v_hi * m;
   1d730:	fba4 4503 	umull	r4, r5, r4, r3
   1d734:	eb1b 0204 	adds.w	r2, fp, r4
	result >>= 32;
   1d738:	f04f 0600 	mov.w	r6, #0
	result += (uint64_t)v_hi * m;
   1d73c:	eb4c 0105 	adc.w	r1, ip, r5
   1d740:	19d2      	adds	r2, r2, r7
   1d742:	eb46 0101 	adc.w	r1, r6, r1
	result += (uint64_t)v_hi * m;
   1d746:	1863      	adds	r3, r4, r1
	result >>= 32;
   1d748:	4632      	mov	r2, r6
	result += (uint64_t)v_hi * m;
   1d74a:	eb45 0202 	adc.w	r2, r5, r2
	*v = result;
   1d74e:	e9c0 3200 	strd	r3, r2, [r0]
}
   1d752:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

0001d756 <_get_digit>:
	if (*digit_count > 0) {
   1d756:	680b      	ldr	r3, [r1, #0]
   1d758:	2b00      	cmp	r3, #0
{
   1d75a:	b570      	push	{r4, r5, r6, lr}
   1d75c:	4604      	mov	r4, r0
	if (*digit_count > 0) {
   1d75e:	dd0f      	ble.n	1d780 <_get_digit+0x2a>
		*fr *= 10U;
   1d760:	6822      	ldr	r2, [r4, #0]
   1d762:	6840      	ldr	r0, [r0, #4]
		--*digit_count;
   1d764:	3b01      	subs	r3, #1
   1d766:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   1d768:	210a      	movs	r1, #10
   1d76a:	fba2 5601 	umull	r5, r6, r2, r1
   1d76e:	fb01 6600 	mla	r6, r1, r0, r6
		*fr &= (BIT64(60) - 1U);
   1d772:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   1d776:	e9c4 5300 	strd	r5, r3, [r4]
		rval = ((*fr >> 60) & 0xF) + '0';
   1d77a:	0f30      	lsrs	r0, r6, #28
   1d77c:	3030      	adds	r0, #48	; 0x30
}
   1d77e:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   1d780:	2030      	movs	r0, #48	; 0x30
   1d782:	e7fc      	b.n	1d77e <_get_digit+0x28>

0001d784 <outs>:
{
   1d784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d788:	4607      	mov	r7, r0
   1d78a:	4688      	mov	r8, r1
   1d78c:	4615      	mov	r5, r2
   1d78e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1d790:	4614      	mov	r4, r2
   1d792:	42b4      	cmp	r4, r6
   1d794:	eba4 0005 	sub.w	r0, r4, r5
   1d798:	d302      	bcc.n	1d7a0 <outs+0x1c>
   1d79a:	b93e      	cbnz	r6, 1d7ac <outs+0x28>
   1d79c:	7823      	ldrb	r3, [r4, #0]
   1d79e:	b12b      	cbz	r3, 1d7ac <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1d7a0:	f814 0b01 	ldrb.w	r0, [r4], #1
   1d7a4:	4641      	mov	r1, r8
   1d7a6:	47b8      	blx	r7
		if (rc < 0) {
   1d7a8:	2800      	cmp	r0, #0
   1d7aa:	daf2      	bge.n	1d792 <outs+0xe>
}
   1d7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d7b0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1d7b0:	4770      	bx	lr

0001d7b2 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   1d7b2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1d7b6:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1d7ba:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1d7bc:	4640      	mov	r0, r8
{
   1d7be:	461f      	mov	r7, r3
   1d7c0:	460c      	mov	r4, r1
   1d7c2:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1d7c4:	f7ee fd9a 	bl	c2fc <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1d7c8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1d7cc:	9300      	str	r3, [sp, #0]
   1d7ce:	b280      	uxth	r0, r0
   1d7d0:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1d7d4:	463b      	mov	r3, r7
   1d7d6:	4632      	mov	r2, r6
   1d7d8:	4621      	mov	r1, r4
   1d7da:	4628      	mov	r0, r5
   1d7dc:	f002 f8ae 	bl	1f93c <bt_gatt_attr_read>
}
   1d7e0:	b004      	add	sp, #16
   1d7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d7e6 <blvl_ccc_cfg_changed>:
}
   1d7e6:	4770      	bx	lr

0001d7e8 <bas_init>:
static int bas_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return 0;
}
   1d7e8:	2000      	movs	r0, #0
   1d7ea:	4770      	bx	lr

0001d7ec <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1d7ec:	2200      	movs	r2, #0
   1d7ee:	e9c0 2200 	strd	r2, r2, [r0]
   1d7f2:	6082      	str	r2, [r0, #8]
}
   1d7f4:	4770      	bx	lr

0001d7f6 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1d7f6:	6902      	ldr	r2, [r0, #16]
   1d7f8:	b2cb      	uxtb	r3, r1
   1d7fa:	210c      	movs	r1, #12
   1d7fc:	fb03 2101 	mla	r1, r3, r1, r2
   1d800:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   1d802:	f000 0007 	and.w	r0, r0, #7
   1d806:	4770      	bx	lr

0001d808 <set_off_state>:
	__asm__ volatile(
   1d808:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d80c:	f3ef 8211 	mrs	r2, BASEPRI
   1d810:	f383 8811 	msr	BASEPRI, r3
   1d814:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d818:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1d81a:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1d81e:	d001      	beq.n	1d824 <set_off_state+0x1c>
   1d820:	428b      	cmp	r3, r1
   1d822:	d107      	bne.n	1d834 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1d824:	2301      	movs	r3, #1
   1d826:	6003      	str	r3, [r0, #0]
	int err = 0;
   1d828:	2000      	movs	r0, #0
	__asm__ volatile(
   1d82a:	f382 8811 	msr	BASEPRI, r2
   1d82e:	f3bf 8f6f 	isb	sy
}
   1d832:	4770      	bx	lr
		err = -EPERM;
   1d834:	f04f 30ff 	mov.w	r0, #4294967295
   1d838:	e7f7      	b.n	1d82a <set_off_state+0x22>

0001d83a <set_starting_state>:
{
   1d83a:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d83c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d840:	f3ef 8211 	mrs	r2, BASEPRI
   1d844:	f383 8811 	msr	BASEPRI, r3
   1d848:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d84c:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1d84e:	f003 0407 	and.w	r4, r3, #7
   1d852:	2c01      	cmp	r4, #1
   1d854:	d106      	bne.n	1d864 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1d856:	6001      	str	r1, [r0, #0]
	int err = 0;
   1d858:	2000      	movs	r0, #0
	__asm__ volatile(
   1d85a:	f382 8811 	msr	BASEPRI, r2
   1d85e:	f3bf 8f6f 	isb	sy
}
   1d862:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1d864:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1d868:	428b      	cmp	r3, r1
		err = -EALREADY;
   1d86a:	bf14      	ite	ne
   1d86c:	f04f 30ff 	movne.w	r0, #4294967295
   1d870:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   1d874:	e7f1      	b.n	1d85a <set_starting_state+0x20>

0001d876 <set_on_state>:
	__asm__ volatile(
   1d876:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d87a:	f3ef 8211 	mrs	r2, BASEPRI
   1d87e:	f383 8811 	msr	BASEPRI, r3
   1d882:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1d886:	6803      	ldr	r3, [r0, #0]
   1d888:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d88c:	f043 0302 	orr.w	r3, r3, #2
   1d890:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1d892:	f382 8811 	msr	BASEPRI, r2
   1d896:	f3bf 8f6f 	isb	sy
}
   1d89a:	4770      	bx	lr

0001d89c <onoff_started_callback>:
	return &data->mgr[type];
   1d89c:	6900      	ldr	r0, [r0, #16]
{
   1d89e:	b410      	push	{r4}
	return &data->mgr[type];
   1d8a0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1d8a2:	241c      	movs	r4, #28
   1d8a4:	fb03 0004 	mla	r0, r3, r4, r0
   1d8a8:	2100      	movs	r1, #0
}
   1d8aa:	bc10      	pop	{r4}
	notify(mgr, 0);
   1d8ac:	4710      	bx	r2

0001d8ae <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1d8ae:	2000      	movs	r0, #0
   1d8b0:	f7fa bb1a 	b.w	17ee8 <nrfx_clock_start>

0001d8b4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1d8b4:	2000      	movs	r0, #0
   1d8b6:	f002 bb0e 	b.w	1fed6 <nrfx_clock_stop>

0001d8ba <blocking_start_callback>:
{
   1d8ba:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1d8bc:	f7fb bb2a 	b.w	18f14 <z_impl_k_sem_give>

0001d8c0 <api_stop>:
{
   1d8c0:	b538      	push	{r3, r4, r5, lr}
   1d8c2:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
   1d8c4:	230c      	movs	r3, #12
{
   1d8c6:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   1d8c8:	4363      	muls	r3, r4
   1d8ca:	6900      	ldr	r0, [r0, #16]
   1d8cc:	3340      	adds	r3, #64	; 0x40
   1d8ce:	2180      	movs	r1, #128	; 0x80
   1d8d0:	4418      	add	r0, r3
   1d8d2:	f7ff ff99 	bl	1d808 <set_off_state>
	if (err < 0) {
   1d8d6:	2800      	cmp	r0, #0
   1d8d8:	db05      	blt.n	1d8e6 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   1d8da:	6869      	ldr	r1, [r5, #4]
   1d8dc:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   1d8e0:	6863      	ldr	r3, [r4, #4]
   1d8e2:	4798      	blx	r3
	return 0;
   1d8e4:	2000      	movs	r0, #0
}
   1d8e6:	bd38      	pop	{r3, r4, r5, pc}

0001d8e8 <api_start>:
{
   1d8e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d8ec:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
   1d8ee:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1d8f0:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   1d8f2:	436f      	muls	r7, r5
{
   1d8f4:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1d8f6:	f107 0040 	add.w	r0, r7, #64	; 0x40
   1d8fa:	2180      	movs	r1, #128	; 0x80
   1d8fc:	4420      	add	r0, r4
{
   1d8fe:	4690      	mov	r8, r2
   1d900:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
   1d902:	f7ff ff9a 	bl	1d83a <set_starting_state>
	if (err < 0) {
   1d906:	2800      	cmp	r0, #0
   1d908:	db07      	blt.n	1d91a <api_start+0x32>
	subdata->cb = cb;
   1d90a:	443c      	add	r4, r7
	subdata->user_data = user_data;
   1d90c:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1d910:	6873      	ldr	r3, [r6, #4]
   1d912:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
   1d916:	4798      	blx	r3
	return 0;
   1d918:	2000      	movs	r0, #0
}
   1d91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001d91e <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1d91e:	4770      	bx	lr

0001d920 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1d920:	4770      	bx	lr

0001d922 <sys_clock_disable>:
   1d922:	4770      	bx	lr

0001d924 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1d924:	b538      	push	{r3, r4, r5, lr}
   1d926:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1d928:	42ab      	cmp	r3, r5
{
   1d92a:	4611      	mov	r1, r2
   1d92c:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1d92e:	d804      	bhi.n	1d93a <_copy+0x16>
   1d930:	461a      	mov	r2, r3
   1d932:	f003 f8a2 	bl	20a7a <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1d936:	4620      	mov	r0, r4
   1d938:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1d93a:	2400      	movs	r4, #0
   1d93c:	e7fb      	b.n	1d936 <_copy+0x12>

0001d93e <_set>:
__ssp_bos_icheck3(memset, void *, int)
   1d93e:	f003 b8d7 	b.w	20af0 <memset>

0001d942 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1d942:	09c3      	lsrs	r3, r0, #7
   1d944:	005a      	lsls	r2, r3, #1
   1d946:	4413      	add	r3, r2
   1d948:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1d94c:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1d950:	b2c0      	uxtb	r0, r0
   1d952:	4770      	bx	lr

0001d954 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1d954:	78cb      	ldrb	r3, [r1, #3]
   1d956:	7802      	ldrb	r2, [r0, #0]
   1d958:	4053      	eors	r3, r2
   1d95a:	7003      	strb	r3, [r0, #0]
   1d95c:	884b      	ldrh	r3, [r1, #2]
   1d95e:	7842      	ldrb	r2, [r0, #1]
   1d960:	4053      	eors	r3, r2
   1d962:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1d964:	680a      	ldr	r2, [r1, #0]
   1d966:	7883      	ldrb	r3, [r0, #2]
   1d968:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d96c:	7083      	strb	r3, [r0, #2]
   1d96e:	680a      	ldr	r2, [r1, #0]
   1d970:	78c3      	ldrb	r3, [r0, #3]
   1d972:	4053      	eors	r3, r2
   1d974:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1d976:	79cb      	ldrb	r3, [r1, #7]
   1d978:	7902      	ldrb	r2, [r0, #4]
   1d97a:	4053      	eors	r3, r2
   1d97c:	7103      	strb	r3, [r0, #4]
   1d97e:	88cb      	ldrh	r3, [r1, #6]
   1d980:	7942      	ldrb	r2, [r0, #5]
   1d982:	4053      	eors	r3, r2
   1d984:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1d986:	684a      	ldr	r2, [r1, #4]
   1d988:	7983      	ldrb	r3, [r0, #6]
   1d98a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d98e:	7183      	strb	r3, [r0, #6]
   1d990:	684a      	ldr	r2, [r1, #4]
   1d992:	79c3      	ldrb	r3, [r0, #7]
   1d994:	4053      	eors	r3, r2
   1d996:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1d998:	7acb      	ldrb	r3, [r1, #11]
   1d99a:	7a02      	ldrb	r2, [r0, #8]
   1d99c:	4053      	eors	r3, r2
   1d99e:	7203      	strb	r3, [r0, #8]
   1d9a0:	7a42      	ldrb	r2, [r0, #9]
   1d9a2:	894b      	ldrh	r3, [r1, #10]
   1d9a4:	4053      	eors	r3, r2
   1d9a6:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1d9a8:	688a      	ldr	r2, [r1, #8]
   1d9aa:	7a83      	ldrb	r3, [r0, #10]
   1d9ac:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d9b0:	7283      	strb	r3, [r0, #10]
   1d9b2:	688a      	ldr	r2, [r1, #8]
   1d9b4:	7ac3      	ldrb	r3, [r0, #11]
   1d9b6:	4053      	eors	r3, r2
   1d9b8:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1d9ba:	7bcb      	ldrb	r3, [r1, #15]
   1d9bc:	7b02      	ldrb	r2, [r0, #12]
   1d9be:	4053      	eors	r3, r2
   1d9c0:	7303      	strb	r3, [r0, #12]
   1d9c2:	89cb      	ldrh	r3, [r1, #14]
   1d9c4:	7b42      	ldrb	r2, [r0, #13]
   1d9c6:	4053      	eors	r3, r2
   1d9c8:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1d9ca:	68ca      	ldr	r2, [r1, #12]
   1d9cc:	7b83      	ldrb	r3, [r0, #14]
   1d9ce:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d9d2:	7383      	strb	r3, [r0, #14]
   1d9d4:	68ca      	ldr	r2, [r1, #12]
   1d9d6:	7bc3      	ldrb	r3, [r0, #15]
   1d9d8:	4053      	eors	r3, r2
   1d9da:	73c3      	strb	r3, [r0, #15]
}
   1d9dc:	4770      	bx	lr

0001d9de <shift_rows>:
{
   1d9de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1d9e0:	7802      	ldrb	r2, [r0, #0]
   1d9e2:	f88d 2000 	strb.w	r2, [sp]
   1d9e6:	7942      	ldrb	r2, [r0, #5]
   1d9e8:	f88d 2001 	strb.w	r2, [sp, #1]
   1d9ec:	7a82      	ldrb	r2, [r0, #10]
   1d9ee:	f88d 2002 	strb.w	r2, [sp, #2]
   1d9f2:	7bc2      	ldrb	r2, [r0, #15]
   1d9f4:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1d9f8:	7902      	ldrb	r2, [r0, #4]
   1d9fa:	f88d 2004 	strb.w	r2, [sp, #4]
   1d9fe:	7a42      	ldrb	r2, [r0, #9]
   1da00:	f88d 2005 	strb.w	r2, [sp, #5]
   1da04:	7b82      	ldrb	r2, [r0, #14]
   1da06:	f88d 2006 	strb.w	r2, [sp, #6]
   1da0a:	78c2      	ldrb	r2, [r0, #3]
   1da0c:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1da10:	7a02      	ldrb	r2, [r0, #8]
   1da12:	f88d 2008 	strb.w	r2, [sp, #8]
   1da16:	7b42      	ldrb	r2, [r0, #13]
   1da18:	f88d 2009 	strb.w	r2, [sp, #9]
   1da1c:	7882      	ldrb	r2, [r0, #2]
   1da1e:	f88d 200a 	strb.w	r2, [sp, #10]
   1da22:	79c2      	ldrb	r2, [r0, #7]
   1da24:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1da28:	7b02      	ldrb	r2, [r0, #12]
   1da2a:	f88d 200c 	strb.w	r2, [sp, #12]
   1da2e:	7842      	ldrb	r2, [r0, #1]
   1da30:	7ac3      	ldrb	r3, [r0, #11]
   1da32:	f88d 200d 	strb.w	r2, [sp, #13]
   1da36:	7982      	ldrb	r2, [r0, #6]
   1da38:	f88d 200e 	strb.w	r2, [sp, #14]
   1da3c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1da40:	2310      	movs	r3, #16
   1da42:	466a      	mov	r2, sp
   1da44:	4619      	mov	r1, r3
   1da46:	f7ff ff6d 	bl	1d924 <_copy>
}
   1da4a:	b005      	add	sp, #20
   1da4c:	f85d fb04 	ldr.w	pc, [sp], #4

0001da50 <mult_row_column>:
{
   1da50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1da52:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1da54:	7808      	ldrb	r0, [r1, #0]
{
   1da56:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1da58:	f7ff ff73 	bl	1d942 <_double_byte>
   1da5c:	4605      	mov	r5, r0
   1da5e:	7860      	ldrb	r0, [r4, #1]
   1da60:	f7ff ff6f 	bl	1d942 <_double_byte>
   1da64:	78a2      	ldrb	r2, [r4, #2]
   1da66:	7863      	ldrb	r3, [r4, #1]
   1da68:	4053      	eors	r3, r2
   1da6a:	78e2      	ldrb	r2, [r4, #3]
   1da6c:	4053      	eors	r3, r2
   1da6e:	405d      	eors	r5, r3
   1da70:	4045      	eors	r5, r0
   1da72:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1da74:	7860      	ldrb	r0, [r4, #1]
   1da76:	7827      	ldrb	r7, [r4, #0]
   1da78:	f7ff ff63 	bl	1d942 <_double_byte>
   1da7c:	4605      	mov	r5, r0
   1da7e:	78a0      	ldrb	r0, [r4, #2]
   1da80:	f7ff ff5f 	bl	1d942 <_double_byte>
   1da84:	78a3      	ldrb	r3, [r4, #2]
   1da86:	405f      	eors	r7, r3
   1da88:	78e3      	ldrb	r3, [r4, #3]
   1da8a:	405f      	eors	r7, r3
   1da8c:	407d      	eors	r5, r7
   1da8e:	4045      	eors	r5, r0
   1da90:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1da92:	78a0      	ldrb	r0, [r4, #2]
   1da94:	7865      	ldrb	r5, [r4, #1]
   1da96:	7827      	ldrb	r7, [r4, #0]
   1da98:	f7ff ff53 	bl	1d942 <_double_byte>
   1da9c:	406f      	eors	r7, r5
   1da9e:	4605      	mov	r5, r0
   1daa0:	78e0      	ldrb	r0, [r4, #3]
   1daa2:	f7ff ff4e 	bl	1d942 <_double_byte>
   1daa6:	78e3      	ldrb	r3, [r4, #3]
   1daa8:	405f      	eors	r7, r3
   1daaa:	407d      	eors	r5, r7
   1daac:	4045      	eors	r5, r0
   1daae:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1dab0:	7820      	ldrb	r0, [r4, #0]
   1dab2:	f7ff ff46 	bl	1d942 <_double_byte>
   1dab6:	7863      	ldrb	r3, [r4, #1]
   1dab8:	7825      	ldrb	r5, [r4, #0]
   1daba:	405d      	eors	r5, r3
   1dabc:	78a3      	ldrb	r3, [r4, #2]
   1dabe:	405d      	eors	r5, r3
   1dac0:	4045      	eors	r5, r0
   1dac2:	78e0      	ldrb	r0, [r4, #3]
   1dac4:	f7ff ff3d 	bl	1d942 <_double_byte>
   1dac8:	b2ed      	uxtb	r5, r5
   1daca:	4045      	eors	r5, r0
   1dacc:	70f5      	strb	r5, [r6, #3]
}
   1dace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001dad0 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1dad0:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1dad2:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1dad4:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1dad6:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1dada:	2b00      	cmp	r3, #0
   1dadc:	bfb4      	ite	lt
   1dade:	2387      	movlt	r3, #135	; 0x87
   1dae0:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1dae2:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1dae6:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1daea:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1daec:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1daf0:	d002      	beq.n	1daf8 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1daf2:	7813      	ldrb	r3, [r2, #0]
   1daf4:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1daf6:	e7f4      	b.n	1dae2 <gf_double+0x12>
	}
}
   1daf8:	bd10      	pop	{r4, pc}

0001dafa <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1dafa:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1dafc:	b120      	cbz	r0, 1db08 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1dafe:	2258      	movs	r2, #88	; 0x58
   1db00:	2100      	movs	r1, #0
   1db02:	f7ff ff1c 	bl	1d93e <_set>
   1db06:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1db08:	bd08      	pop	{r3, pc}

0001db0a <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1db0a:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1db0c:	4604      	mov	r4, r0
   1db0e:	b188      	cbz	r0, 1db34 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1db10:	2210      	movs	r2, #16
   1db12:	2100      	movs	r1, #0
   1db14:	f7ff ff13 	bl	1d93e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1db18:	2210      	movs	r2, #16
   1db1a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1db1e:	2100      	movs	r1, #0
   1db20:	f7ff ff0d 	bl	1d93e <_set>
	s->leftover_offset = 0;
   1db24:	2300      	movs	r3, #0
   1db26:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1db28:	2200      	movs	r2, #0
   1db2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1db2e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1db32:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1db34:	bd10      	pop	{r4, pc}

0001db36 <tc_cmac_setup>:
{
   1db36:	b570      	push	{r4, r5, r6, lr}
   1db38:	460d      	mov	r5, r1
   1db3a:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1db3c:	4604      	mov	r4, r0
   1db3e:	b310      	cbz	r0, 1db86 <tc_cmac_setup+0x50>
   1db40:	b311      	cbz	r1, 1db88 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1db42:	2258      	movs	r2, #88	; 0x58
   1db44:	2100      	movs	r1, #0
   1db46:	f7ff fefa 	bl	1d93e <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1db4a:	4629      	mov	r1, r5
	s->sched = sched;
   1db4c:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1db4e:	4630      	mov	r0, r6
   1db50:	f7f4 feba 	bl	128c8 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1db54:	2210      	movs	r2, #16
   1db56:	2100      	movs	r1, #0
   1db58:	4620      	mov	r0, r4
   1db5a:	f7ff fef0 	bl	1d93e <_set>
	gf_double (s->K1, s->iv);
   1db5e:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1db62:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1db64:	4621      	mov	r1, r4
   1db66:	4620      	mov	r0, r4
   1db68:	f7f4 ff00 	bl	1296c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1db6c:	4621      	mov	r1, r4
   1db6e:	4628      	mov	r0, r5
   1db70:	f7ff ffae 	bl	1dad0 <gf_double>
	gf_double (s->K2, s->K1);
   1db74:	4629      	mov	r1, r5
   1db76:	f104 0020 	add.w	r0, r4, #32
   1db7a:	f7ff ffa9 	bl	1dad0 <gf_double>
	tc_cmac_init(s);
   1db7e:	4620      	mov	r0, r4
   1db80:	f7ff ffc3 	bl	1db0a <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1db84:	2001      	movs	r0, #1
}
   1db86:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1db88:	4608      	mov	r0, r1
   1db8a:	e7fc      	b.n	1db86 <tc_cmac_setup+0x50>

0001db8c <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1db8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1db90:	460d      	mov	r5, r1
   1db92:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1db94:	4604      	mov	r4, r0
   1db96:	2800      	cmp	r0, #0
   1db98:	d062      	beq.n	1dc60 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1db9a:	b912      	cbnz	r2, 1dba2 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1db9c:	2001      	movs	r0, #1
}
   1db9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1dba2:	2900      	cmp	r1, #0
   1dba4:	d05c      	beq.n	1dc60 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   1dba6:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   1dbaa:	ea50 0301 	orrs.w	r3, r0, r1
   1dbae:	d057      	beq.n	1dc60 <tc_cmac_update+0xd4>
	s->countdown--;
   1dbb0:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   1dbb4:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   1dbb8:	f141 33ff 	adc.w	r3, r1, #4294967295
   1dbbc:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1dbc0:	f1b8 0f00 	cmp.w	r8, #0
   1dbc4:	d02a      	beq.n	1dc1c <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1dbc6:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   1dbca:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1dbce:	42be      	cmp	r6, r7
   1dbd0:	4420      	add	r0, r4
   1dbd2:	d208      	bcs.n	1dbe6 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1dbd4:	462a      	mov	r2, r5
   1dbd6:	4633      	mov	r3, r6
   1dbd8:	4631      	mov	r1, r6
   1dbda:	f7ff fea3 	bl	1d924 <_copy>
			s->leftover_offset += data_length;
   1dbde:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1dbe0:	4432      	add	r2, r6
   1dbe2:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1dbe4:	e7da      	b.n	1db9c <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1dbe6:	463b      	mov	r3, r7
   1dbe8:	462a      	mov	r2, r5
   1dbea:	4639      	mov	r1, r7
   1dbec:	f7ff fe9a 	bl	1d924 <_copy>
		data_length -= remaining_space;
   1dbf0:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1dbf2:	2300      	movs	r3, #0
   1dbf4:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1dbf6:	4446      	add	r6, r8
		data += remaining_space;
   1dbf8:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dbfa:	1e63      	subs	r3, r4, #1
   1dbfc:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1dc00:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1dc04:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dc08:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1dc0a:	ea82 0200 	eor.w	r2, r2, r0
   1dc0e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dc10:	d1f6      	bne.n	1dc00 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1dc12:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1dc14:	4621      	mov	r1, r4
   1dc16:	4620      	mov	r0, r4
   1dc18:	f7f4 fea8 	bl	1296c <tc_aes_encrypt>
   1dc1c:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1dc20:	2e10      	cmp	r6, #16
   1dc22:	d80a      	bhi.n	1dc3a <tc_cmac_update+0xae>
	if (data_length > 0) {
   1dc24:	2e00      	cmp	r6, #0
   1dc26:	d0b9      	beq.n	1db9c <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1dc28:	4633      	mov	r3, r6
   1dc2a:	462a      	mov	r2, r5
   1dc2c:	4631      	mov	r1, r6
   1dc2e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1dc32:	f7ff fe77 	bl	1d924 <_copy>
		s->leftover_offset = data_length;
   1dc36:	6466      	str	r6, [r4, #68]	; 0x44
   1dc38:	e7b0      	b.n	1db9c <tc_cmac_update+0x10>
   1dc3a:	1e63      	subs	r3, r4, #1
   1dc3c:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1dc3e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1dc42:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dc46:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1dc48:	ea82 0200 	eor.w	r2, r2, r0
   1dc4c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dc4e:	d1f6      	bne.n	1dc3e <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1dc50:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1dc52:	4621      	mov	r1, r4
   1dc54:	4620      	mov	r0, r4
   1dc56:	f7f4 fe89 	bl	1296c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1dc5a:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1dc5c:	3e10      	subs	r6, #16
   1dc5e:	e7df      	b.n	1dc20 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   1dc60:	2000      	movs	r0, #0
   1dc62:	e79c      	b.n	1db9e <tc_cmac_update+0x12>

0001dc64 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1dc64:	b570      	push	{r4, r5, r6, lr}
   1dc66:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1dc68:	4605      	mov	r5, r0
   1dc6a:	b1e8      	cbz	r0, 1dca8 <tc_cmac_final+0x44>
   1dc6c:	b369      	cbz	r1, 1dcca <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1dc6e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1dc70:	2a10      	cmp	r2, #16
   1dc72:	d11a      	bne.n	1dcaa <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1dc74:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dc76:	1e63      	subs	r3, r4, #1
   1dc78:	3901      	subs	r1, #1
   1dc7a:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1dc7e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1dc82:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1dc86:	4072      	eors	r2, r6
   1dc88:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dc8c:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1dc8e:	ea82 0206 	eor.w	r2, r2, r6
   1dc92:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dc94:	d1f3      	bne.n	1dc7e <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1dc96:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1dc98:	4621      	mov	r1, r4
   1dc9a:	4628      	mov	r0, r5
   1dc9c:	f7f4 fe66 	bl	1296c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1dca0:	4620      	mov	r0, r4
   1dca2:	f7ff ff2a 	bl	1dafa <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1dca6:	2001      	movs	r0, #1
}
   1dca8:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1dcaa:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1dcae:	2100      	movs	r1, #0
   1dcb0:	f1c2 0210 	rsb	r2, r2, #16
   1dcb4:	4420      	add	r0, r4
   1dcb6:	f7ff fe42 	bl	1d93e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1dcba:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1dcbc:	4423      	add	r3, r4
   1dcbe:	2280      	movs	r2, #128	; 0x80
   1dcc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1dcc4:	f104 0120 	add.w	r1, r4, #32
   1dcc8:	e7d5      	b.n	1dc76 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1dcca:	4608      	mov	r0, r1
   1dccc:	e7ec      	b.n	1dca8 <tc_cmac_final+0x44>

0001dcce <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   1dcce:	2000      	movs	r0, #0
   1dcd0:	f7f4 bada 	b.w	12288 <sys_reboot>

0001dcd4 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1dcd4:	2100      	movs	r1, #0
   1dcd6:	2001      	movs	r0, #1
   1dcd8:	f000 b800 	b.w	1dcdc <z_arm_fatal_error>

0001dcdc <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1dcdc:	f002 b960 	b.w	1ffa0 <z_fatal_error>

0001dce0 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1dce0:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1dce2:	6800      	ldr	r0, [r0, #0]
   1dce4:	f002 b95c 	b.w	1ffa0 <z_fatal_error>

0001dce8 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1dce8:	b508      	push	{r3, lr}
	handler();
   1dcea:	f7f5 f88b 	bl	12e04 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1dcee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1dcf2:	f7f5 b9e7 	b.w	130c4 <z_arm_exc_exit>

0001dcf6 <malloc_prepare>:
}
   1dcf6:	2000      	movs	r0, #0
   1dcf8:	4770      	bx	lr

0001dcfa <_stdout_hook_default>:
}
   1dcfa:	f04f 30ff 	mov.w	r0, #4294967295
   1dcfe:	4770      	bx	lr

0001dd00 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   1dd00:	b084      	sub	sp, #16
   1dd02:	ab04      	add	r3, sp, #16
   1dd04:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1dd08:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1dd0c:	2b06      	cmp	r3, #6
   1dd0e:	d108      	bne.n	1dd22 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1dd10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dd14:	2201      	movs	r2, #1
   1dd16:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1dd1a:	f3bf 8f4f 	dsb	sy
        __WFE();
   1dd1e:	bf20      	wfe
    while (true)
   1dd20:	e7fd      	b.n	1dd1e <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1dd22:	b004      	add	sp, #16
   1dd24:	4770      	bx	lr

0001dd26 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1dd26:	b084      	sub	sp, #16
   1dd28:	ab04      	add	r3, sp, #16
   1dd2a:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1dd2e:	2300      	movs	r3, #0
   1dd30:	f383 8811 	msr	BASEPRI, r3
   1dd34:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1dd38:	b004      	add	sp, #16
   1dd3a:	4770      	bx	lr

0001dd3c <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1dd3c:	b510      	push	{r4, lr}
   1dd3e:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1dd40:	7801      	ldrb	r1, [r0, #0]
   1dd42:	7822      	ldrb	r2, [r4, #0]
   1dd44:	428a      	cmp	r2, r1
{
   1dd46:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1dd48:	d00e      	beq.n	1dd68 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   1dd4a:	4669      	mov	r1, sp
   1dd4c:	f7f5 fb3e 	bl	133cc <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1dd50:	a905      	add	r1, sp, #20
   1dd52:	4620      	mov	r0, r4
   1dd54:	f7f5 fb3a 	bl	133cc <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1dd58:	2210      	movs	r2, #16
   1dd5a:	f10d 0115 	add.w	r1, sp, #21
   1dd5e:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1dd62:	f002 fe7c 	bl	20a5e <memcmp>
   1dd66:	e007      	b.n	1dd78 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   1dd68:	2a01      	cmp	r2, #1
   1dd6a:	d007      	beq.n	1dd7c <bt_uuid_cmp+0x40>
   1dd6c:	2a02      	cmp	r2, #2
   1dd6e:	d008      	beq.n	1dd82 <bt_uuid_cmp+0x46>
   1dd70:	b95a      	cbnz	r2, 1dd8a <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1dd72:	8840      	ldrh	r0, [r0, #2]
   1dd74:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1dd76:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   1dd78:	b00a      	add	sp, #40	; 0x28
   1dd7a:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1dd7c:	6840      	ldr	r0, [r0, #4]
   1dd7e:	6863      	ldr	r3, [r4, #4]
   1dd80:	e7f9      	b.n	1dd76 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1dd82:	2210      	movs	r2, #16
   1dd84:	1c61      	adds	r1, r4, #1
   1dd86:	3001      	adds	r0, #1
   1dd88:	e7eb      	b.n	1dd62 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   1dd8a:	f06f 0015 	mvn.w	r0, #21
   1dd8e:	e7f3      	b.n	1dd78 <bt_uuid_cmp+0x3c>

0001dd90 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1dd90:	2a04      	cmp	r2, #4
{
   1dd92:	b530      	push	{r4, r5, lr}
	switch (data_len) {
   1dd94:	d00d      	beq.n	1ddb2 <bt_uuid_create+0x22>
   1dd96:	2a10      	cmp	r2, #16
   1dd98:	d019      	beq.n	1ddce <bt_uuid_create+0x3e>
   1dd9a:	2a02      	cmp	r2, #2
   1dd9c:	f04f 0300 	mov.w	r3, #0
   1dda0:	d121      	bne.n	1dde6 <bt_uuid_create+0x56>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   1dda2:	7003      	strb	r3, [r0, #0]
   1dda4:	784a      	ldrb	r2, [r1, #1]
   1dda6:	780b      	ldrb	r3, [r1, #0]
   1dda8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1ddac:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1ddae:	2001      	movs	r0, #1
}
   1ddb0:	bd30      	pop	{r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   1ddb2:	2301      	movs	r3, #1
   1ddb4:	7003      	strb	r3, [r0, #0]
   1ddb6:	788a      	ldrb	r2, [r1, #2]
   1ddb8:	78cc      	ldrb	r4, [r1, #3]
   1ddba:	784d      	ldrb	r5, [r1, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1ddbc:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   1ddc0:	780a      	ldrb	r2, [r1, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1ddc2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1ddc6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1ddca:	6042      	str	r2, [r0, #4]
		break;
   1ddcc:	e7ef      	b.n	1ddae <bt_uuid_create+0x1e>
		uuid->type = BT_UUID_TYPE_128;
   1ddce:	2302      	movs	r3, #2
   1ddd0:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ddd4:	f101 0310 	add.w	r3, r1, #16
   1ddd8:	f851 2b04 	ldr.w	r2, [r1], #4
   1dddc:	f840 2b04 	str.w	r2, [r0], #4
   1dde0:	4299      	cmp	r1, r3
   1dde2:	d1f9      	bne.n	1ddd8 <bt_uuid_create+0x48>
   1dde4:	e7e3      	b.n	1ddae <bt_uuid_create+0x1e>
	switch (data_len) {
   1dde6:	4618      	mov	r0, r3
   1dde8:	e7e2      	b.n	1ddb0 <bt_uuid_create+0x20>

0001ddea <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1ddea:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1ddec:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1ddee:	2106      	movs	r1, #6
{
   1ddf0:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1ddf2:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1ddf6:	f7f9 ffe3 	bl	17dc0 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1ddfa:	b918      	cbnz	r0, 1de04 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1ddfc:	79a3      	ldrb	r3, [r4, #6]
   1ddfe:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1de02:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1de04:	bd10      	pop	{r4, pc}

0001de06 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1de06:	280f      	cmp	r0, #15
   1de08:	d806      	bhi.n	1de18 <bt_hci_evt_get_flags+0x12>
   1de0a:	280d      	cmp	r0, #13
   1de0c:	d80b      	bhi.n	1de26 <bt_hci_evt_get_flags+0x20>
   1de0e:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1de10:	bf14      	ite	ne
   1de12:	2002      	movne	r0, #2
   1de14:	2003      	moveq	r0, #3
   1de16:	4770      	bx	lr
	switch (evt) {
   1de18:	2813      	cmp	r0, #19
   1de1a:	d004      	beq.n	1de26 <bt_hci_evt_get_flags+0x20>
   1de1c:	281a      	cmp	r0, #26
   1de1e:	bf14      	ite	ne
   1de20:	2002      	movne	r0, #2
   1de22:	2001      	moveq	r0, #1
   1de24:	4770      	bx	lr
   1de26:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1de28:	4770      	bx	lr

0001de2a <handle_event>:
{
   1de2a:	b410      	push	{r4}
   1de2c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1de30:	4604      	mov	r4, r0
   1de32:	4608      	mov	r0, r1
		if (handler->event != event) {
   1de34:	7811      	ldrb	r1, [r2, #0]
   1de36:	42a1      	cmp	r1, r4
   1de38:	d004      	beq.n	1de44 <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   1de3a:	3208      	adds	r2, #8
   1de3c:	429a      	cmp	r2, r3
   1de3e:	d1f9      	bne.n	1de34 <handle_event+0xa>
}
   1de40:	bc10      	pop	{r4}
   1de42:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   1de44:	8981      	ldrh	r1, [r0, #12]
   1de46:	7853      	ldrb	r3, [r2, #1]
   1de48:	4299      	cmp	r1, r3
   1de4a:	d3f9      	bcc.n	1de40 <handle_event+0x16>
		handler->handler(buf);
   1de4c:	6853      	ldr	r3, [r2, #4]
}
   1de4e:	bc10      	pop	{r4}
		handler->handler(buf);
   1de50:	4718      	bx	r3

0001de52 <hci_data_buf_overflow>:
}
   1de52:	4770      	bx	lr

0001de54 <hci_disconn_complete>:
{
   1de54:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1de56:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   1de58:	7835      	ldrb	r5, [r6, #0]
   1de5a:	b985      	cbnz	r5, 1de7e <hci_disconn_complete+0x2a>
	conn = bt_conn_lookup_handle(handle);
   1de5c:	f8b6 0001 	ldrh.w	r0, [r6, #1]
   1de60:	f7f6 ffe6 	bl	14e30 <bt_conn_lookup_handle>
	if (!conn) {
   1de64:	4604      	mov	r4, r0
   1de66:	b150      	cbz	r0, 1de7e <hci_disconn_complete+0x2a>
	conn->err = evt->reason;
   1de68:	78f3      	ldrb	r3, [r6, #3]
   1de6a:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1de6c:	4629      	mov	r1, r5
   1de6e:	f7f6 ffeb 	bl	14e48 <bt_conn_set_state>
	conn->handle = 0U;
   1de72:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
   1de74:	4620      	mov	r0, r4
}
   1de76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1de7a:	f000 bc72 	b.w	1e762 <bt_conn_unref>
}
   1de7e:	bd70      	pop	{r4, r5, r6, pc}

0001de80 <le_data_len_change>:
{
   1de80:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1de82:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1de84:	8818      	ldrh	r0, [r3, #0]
   1de86:	f7f6 ffd3 	bl	14e30 <bt_conn_lookup_handle>
	if (!conn) {
   1de8a:	b118      	cbz	r0, 1de94 <le_data_len_change+0x14>
}
   1de8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   1de90:	f000 bc67 	b.w	1e762 <bt_conn_unref>
}
   1de94:	bd08      	pop	{r3, pc}

0001de96 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   1de96:	2101      	movs	r1, #1
   1de98:	3008      	adds	r0, #8
   1de9a:	f001 beec 	b.w	1fc76 <net_buf_simple_pull_mem>

0001de9e <bt_addr_copy>:
   1de9e:	680b      	ldr	r3, [r1, #0]
   1dea0:	6003      	str	r3, [r0, #0]
   1dea2:	888b      	ldrh	r3, [r1, #4]
   1dea4:	8083      	strh	r3, [r0, #4]
 *  @param src Bluetooth device address source buffer.
 */
static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
}
   1dea6:	4770      	bx	lr

0001dea8 <bt_addr_le_copy>:
   1dea8:	680b      	ldr	r3, [r1, #0]
   1deaa:	6003      	str	r3, [r0, #0]
   1deac:	888b      	ldrh	r3, [r1, #4]
   1deae:	8083      	strh	r3, [r0, #4]
   1deb0:	798b      	ldrb	r3, [r1, #6]
   1deb2:	7183      	strb	r3, [r0, #6]
 *  @param src Bluetooth LE device address source buffer.
 */
static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
}
   1deb4:	4770      	bx	lr

0001deb6 <hci_vendor_event>:
   1deb6:	4770      	bx	lr

0001deb8 <hci_num_completed_packets>:
{
   1deb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   1debc:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1debe:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   1dec0:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   1dec2:	783b      	ldrb	r3, [r7, #0]
   1dec4:	429d      	cmp	r5, r3
   1dec6:	db01      	blt.n	1decc <hci_num_completed_packets+0x14>
}
   1dec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1decc:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   1ded0:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   1ded4:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   1ded8:	f7f6 ffaa 	bl	14e30 <bt_conn_lookup_handle>
		if (!conn) {
   1dedc:	4604      	mov	r4, r0
   1dede:	b350      	cbz	r0, 1df36 <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   1dee0:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   1dee4:	b326      	cbz	r6, 1df30 <hci_num_completed_packets+0x78>
	__asm__ volatile(
   1dee6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1deea:	f3ef 8211 	mrs	r2, BASEPRI
   1deee:	f383 8811 	msr	BASEPRI, r3
   1def2:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   1def6:	69e3      	ldr	r3, [r4, #28]
   1def8:	b16b      	cbz	r3, 1df16 <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   1defa:	3b01      	subs	r3, #1
   1defc:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1defe:	f382 8811 	msr	BASEPRI, r2
   1df02:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1df06:	4620      	mov	r0, r4
   1df08:	f7f6 fee6 	bl	14cd8 <bt_conn_get_pkts>
   1df0c:	3e01      	subs	r6, #1
   1df0e:	f7fb f801 	bl	18f14 <z_impl_k_sem_give>
   1df12:	b2b6      	uxth	r6, r6
   1df14:	e7e6      	b.n	1dee4 <hci_num_completed_packets+0x2c>
Z_GENLIST_IS_EMPTY(slist)
   1df16:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1df18:	b12b      	cbz	r3, 1df26 <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1df1a:	69a1      	ldr	r1, [r4, #24]
   1df1c:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   1df1e:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1df20:	428b      	cmp	r3, r1
	list->tail = node;
   1df22:	bf08      	it	eq
   1df24:	61a0      	streq	r0, [r4, #24]
   1df26:	f382 8811 	msr	BASEPRI, r2
   1df2a:	f3bf 8f6f 	isb	sy
			if (!node) {
   1df2e:	b923      	cbnz	r3, 1df3a <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   1df30:	4620      	mov	r0, r4
   1df32:	f000 fc16 	bl	1e762 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   1df36:	3501      	adds	r5, #1
   1df38:	e7c3      	b.n	1dec2 <hci_num_completed_packets+0xa>
	__asm__ volatile(
   1df3a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1df3e:	f3ef 8111 	mrs	r1, BASEPRI
   1df42:	f382 8811 	msr	BASEPRI, r2
   1df46:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1df4a:	68da      	ldr	r2, [r3, #12]
   1df4c:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   1df4e:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   1df52:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   1df54:	f8c3 800c 	str.w	r8, [r3, #12]
   1df58:	b94a      	cbnz	r2, 1df6e <hci_num_completed_packets+0xb6>
	list->head = node;
   1df5a:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   1df5e:	f381 8811 	msr	BASEPRI, r1
   1df62:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1df66:	4648      	mov	r0, r9
   1df68:	f7fb f94a 	bl	19200 <k_work_submit>
   1df6c:	e7cb      	b.n	1df06 <hci_num_completed_packets+0x4e>
	parent->next = child;
   1df6e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1df70:	6263      	str	r3, [r4, #36]	; 0x24
}
   1df72:	e7f4      	b.n	1df5e <hci_num_completed_packets+0xa6>

0001df74 <le_conn_update_complete>:
{
   1df74:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1df76:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1df78:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1df7c:	f7f6 ff58 	bl	14e30 <bt_conn_lookup_handle>
	if (!conn) {
   1df80:	4604      	mov	r4, r0
   1df82:	b1c0      	cbz	r0, 1dfb6 <le_conn_update_complete+0x42>
	if (!evt->status) {
   1df84:	782b      	ldrb	r3, [r5, #0]
   1df86:	b9c3      	cbnz	r3, 1dfba <le_conn_update_complete+0x46>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1df88:	792a      	ldrb	r2, [r5, #4]
   1df8a:	78eb      	ldrb	r3, [r5, #3]
   1df8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1df90:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   1df94:	79aa      	ldrb	r2, [r5, #6]
   1df96:	796b      	ldrb	r3, [r5, #5]
   1df98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1df9c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1dfa0:	79eb      	ldrb	r3, [r5, #7]
   1dfa2:	7a2a      	ldrb	r2, [r5, #8]
   1dfa4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1dfa8:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   1dfac:	f7f7 f802 	bl	14fb4 <notify_le_param_updated>
	bt_conn_unref(conn);
   1dfb0:	4620      	mov	r0, r4
   1dfb2:	f000 fbd6 	bl	1e762 <bt_conn_unref>
}
   1dfb6:	b003      	add	sp, #12
   1dfb8:	bd30      	pop	{r4, r5, pc}
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1dfba:	2b1a      	cmp	r3, #26
   1dfbc:	d1f8      	bne.n	1dfb0 <le_conn_update_complete+0x3c>
   1dfbe:	78c3      	ldrb	r3, [r0, #3]
   1dfc0:	2b01      	cmp	r3, #1
   1dfc2:	d1f5      	bne.n	1dfb0 <le_conn_update_complete+0x3c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dfc4:	f3bf 8f5b 	dmb	ish
   1dfc8:	1d03      	adds	r3, r0, #4
   1dfca:	e853 2f00 	ldrex	r2, [r3]
   1dfce:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   1dfd2:	e843 1500 	strex	r5, r1, [r3]
   1dfd6:	2d00      	cmp	r5, #0
   1dfd8:	d1f7      	bne.n	1dfca <le_conn_update_complete+0x56>
   1dfda:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_SLAVE &&
   1dfde:	0553      	lsls	r3, r2, #21
   1dfe0:	d4e6      	bmi.n	1dfb0 <le_conn_update_complete+0x3c>
		param.interval_min = conn->le.interval_min;
   1dfe2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1dfe6:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   1dfe8:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   1dfea:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1dfee:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1dff0:	f7f7 fa56 	bl	154a0 <bt_l2cap_update_conn_param>
   1dff4:	e7dc      	b.n	1dfb0 <le_conn_update_complete+0x3c>

0001dff6 <hci_le_read_max_data_len>:
{
   1dff6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1dff8:	4606      	mov	r6, r0
   1dffa:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1dffc:	aa01      	add	r2, sp, #4
   1dffe:	2100      	movs	r1, #0
   1e000:	f242 002f 	movw	r0, #8239	; 0x202f
   1e004:	f7f5 fc28 	bl	13858 <bt_hci_cmd_send_sync>
	if (err) {
   1e008:	4604      	mov	r4, r0
   1e00a:	b948      	cbnz	r0, 1e020 <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   1e00c:	9801      	ldr	r0, [sp, #4]
   1e00e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1e010:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1e014:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1e016:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1e01a:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1e01c:	f7f8 fd4a 	bl	16ab4 <net_buf_unref>
}
   1e020:	4620      	mov	r0, r4
   1e022:	b002      	add	sp, #8
   1e024:	bd70      	pop	{r4, r5, r6, pc}

0001e026 <bt_hci_disconnect>:
{
   1e026:	b570      	push	{r4, r5, r6, lr}
   1e028:	4606      	mov	r6, r0
   1e02a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1e02c:	f240 4006 	movw	r0, #1030	; 0x406
   1e030:	2103      	movs	r1, #3
   1e032:	f7f5 fbd9 	bl	137e8 <bt_hci_cmd_create>
	if (!buf) {
   1e036:	4604      	mov	r4, r0
   1e038:	b168      	cbz	r0, 1e056 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1e03a:	2103      	movs	r1, #3
   1e03c:	3008      	adds	r0, #8
   1e03e:	f001 fdf2 	bl	1fc26 <net_buf_simple_add>
	disconn->reason = reason;
   1e042:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1e044:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1e046:	4621      	mov	r1, r4
   1e048:	2200      	movs	r2, #0
}
   1e04a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1e04e:	f240 4006 	movw	r0, #1030	; 0x406
   1e052:	f7f5 bc01 	b.w	13858 <bt_hci_cmd_send_sync>
}
   1e056:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e05a:	bd70      	pop	{r4, r5, r6, pc}

0001e05c <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1e05c:	8802      	ldrh	r2, [r0, #0]
   1e05e:	8843      	ldrh	r3, [r0, #2]
   1e060:	429a      	cmp	r2, r3
{
   1e062:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1e064:	d818      	bhi.n	1e098 <bt_le_conn_params_valid+0x3c>
   1e066:	2a05      	cmp	r2, #5
   1e068:	d916      	bls.n	1e098 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1e06a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1e06e:	d813      	bhi.n	1e098 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   1e070:	8884      	ldrh	r4, [r0, #4]
   1e072:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   1e076:	d20f      	bcs.n	1e098 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1e078:	88c1      	ldrh	r1, [r0, #6]
   1e07a:	f1a1 020a 	sub.w	r2, r1, #10
   1e07e:	b292      	uxth	r2, r2
   1e080:	f640 4076 	movw	r0, #3190	; 0xc76
   1e084:	4282      	cmp	r2, r0
   1e086:	d807      	bhi.n	1e098 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   1e088:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   1e08c:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   1e090:	bf34      	ite	cc
   1e092:	2001      	movcc	r0, #1
   1e094:	2000      	movcs	r0, #0
}
   1e096:	bd10      	pop	{r4, pc}
		return false;
   1e098:	2000      	movs	r0, #0
   1e09a:	e7fc      	b.n	1e096 <bt_le_conn_params_valid+0x3a>

0001e09c <bt_le_set_data_len>:
{
   1e09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e09e:	4607      	mov	r7, r0
   1e0a0:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1e0a2:	f242 0022 	movw	r0, #8226	; 0x2022
   1e0a6:	2106      	movs	r1, #6
{
   1e0a8:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1e0aa:	f7f5 fb9d 	bl	137e8 <bt_hci_cmd_create>
	if (!buf) {
   1e0ae:	4604      	mov	r4, r0
   1e0b0:	b170      	cbz	r0, 1e0d0 <bt_le_set_data_len+0x34>
   1e0b2:	2106      	movs	r1, #6
   1e0b4:	3008      	adds	r0, #8
   1e0b6:	f001 fdb6 	bl	1fc26 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e0ba:	883b      	ldrh	r3, [r7, #0]
   1e0bc:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1e0be:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1e0c0:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1e0c2:	4621      	mov	r1, r4
   1e0c4:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1e0c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1e0cc:	f7f5 bdee 	b.w	13cac <bt_hci_cmd_send>
}
   1e0d0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e0d6 <bt_le_set_phy>:
{
   1e0d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e0da:	4680      	mov	r8, r0
   1e0dc:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1e0de:	f242 0032 	movw	r0, #8242	; 0x2032
   1e0e2:	2107      	movs	r1, #7
{
   1e0e4:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1e0e8:	4616      	mov	r6, r2
   1e0ea:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1e0ec:	f7f5 fb7c 	bl	137e8 <bt_hci_cmd_create>
	if (!buf) {
   1e0f0:	4604      	mov	r4, r0
   1e0f2:	b190      	cbz	r0, 1e11a <bt_le_set_phy+0x44>
   1e0f4:	2107      	movs	r1, #7
   1e0f6:	3008      	adds	r0, #8
   1e0f8:	f001 fd95 	bl	1fc26 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e0fc:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1e100:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1e102:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1e104:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e106:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1e108:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1e10c:	4621      	mov	r1, r4
   1e10e:	f242 0032 	movw	r0, #8242	; 0x2032
}
   1e112:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1e116:	f7f5 bdc9 	b.w	13cac <bt_hci_cmd_send>
}
   1e11a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e11e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e122 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1e122:	6880      	ldr	r0, [r0, #8]
   1e124:	f7f5 be4a 	b.w	13dbc <bt_hci_le_enh_conn_complete>

0001e128 <le_legacy_conn_complete>:
{
   1e128:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1e12a:	6884      	ldr	r4, [r0, #8]
{
   1e12c:	b08a      	sub	sp, #40	; 0x28
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1e12e:	f7f6 fb49 	bl	147c4 <bt_le_adv_lookup_legacy>
	(void)bt_le_lim_adv_cancel_timeout(adv);
   1e132:	f000 fa62 	bl	1e5fa <bt_le_lim_adv_cancel_timeout>
	enh.status         = evt->status;
   1e136:	7823      	ldrb	r3, [r4, #0]
   1e138:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1e13c:	f8b4 3001 	ldrh.w	r3, [r4, #1]
   1e140:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1e144:	78e3      	ldrb	r3, [r4, #3]
   1e146:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1e14a:	f8b4 300b 	ldrh.w	r3, [r4, #11]
   1e14e:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1e152:	f8b4 300d 	ldrh.w	r3, [r4, #13]
   1e156:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1e15a:	f8b4 300f 	ldrh.w	r3, [r4, #15]
   1e15e:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1e162:	7c63      	ldrb	r3, [r4, #17]
   1e164:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1e168:	1d21      	adds	r1, r4, #4
   1e16a:	a803      	add	r0, sp, #12
   1e16c:	f7ff fe9c 	bl	1dea8 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1e170:	2200      	movs	r2, #0
   1e172:	4669      	mov	r1, sp
   1e174:	f10d 0013 	add.w	r0, sp, #19
   1e178:	9200      	str	r2, [sp, #0]
   1e17a:	f8ad 2004 	strh.w	r2, [sp, #4]
   1e17e:	f7ff fe8e 	bl	1de9e <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1e182:	4669      	mov	r1, sp
   1e184:	f10d 0019 	add.w	r0, sp, #25
   1e188:	9200      	str	r2, [sp, #0]
   1e18a:	f8ad 2004 	strh.w	r2, [sp, #4]
   1e18e:	f7ff fe86 	bl	1de9e <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   1e192:	a802      	add	r0, sp, #8
   1e194:	f7f5 fe12 	bl	13dbc <bt_hci_le_enh_conn_complete>
}
   1e198:	b00a      	add	sp, #40	; 0x28
   1e19a:	bd10      	pop	{r4, pc}

0001e19c <le_phy_update_complete>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1e19c:	6883      	ldr	r3, [r0, #8]
{
   1e19e:	b510      	push	{r4, lr}
	conn = bt_conn_lookup_handle(handle);
   1e1a0:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1e1a4:	f7f6 fe44 	bl	14e30 <bt_conn_lookup_handle>
	if (!conn) {
   1e1a8:	4604      	mov	r4, r0
   1e1aa:	b310      	cbz	r0, 1e1f2 <le_phy_update_complete+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e1ac:	f3bf 8f5b 	dmb	ish
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   1e1b0:	1d03      	adds	r3, r0, #4
   1e1b2:	e853 2f00 	ldrex	r2, [r3]
   1e1b6:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   1e1ba:	e843 1c00 	strex	ip, r1, [r3]
   1e1be:	f1bc 0f00 	cmp.w	ip, #0
   1e1c2:	d1f6      	bne.n	1e1b2 <le_phy_update_complete+0x16>
   1e1c4:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1e1c8:	0612      	lsls	r2, r2, #24
   1e1ca:	d50d      	bpl.n	1e1e8 <le_phy_update_complete+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e1cc:	f3bf 8f5b 	dmb	ish
   1e1d0:	e853 2f00 	ldrex	r2, [r3]
   1e1d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   1e1d8:	e843 2100 	strex	r1, r2, [r3]
   1e1dc:	2900      	cmp	r1, #0
   1e1de:	d1f7      	bne.n	1e1d0 <le_phy_update_complete+0x34>
   1e1e0:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   1e1e4:	f7f5 fd84 	bl	13cf0 <conn_auto_initiate>
	bt_conn_unref(conn);
   1e1e8:	4620      	mov	r0, r4
}
   1e1ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1e1ee:	f000 bab8 	b.w	1e762 <bt_conn_unref>
}
   1e1f2:	bd10      	pop	{r4, pc}

0001e1f4 <le_remote_feat_complete>:
{
   1e1f4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1e1f6:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1e1f8:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1e1fc:	f7f6 fe18 	bl	14e30 <bt_conn_lookup_handle>
	if (!conn) {
   1e200:	4604      	mov	r4, r0
   1e202:	b1e8      	cbz	r0, 1e240 <le_remote_feat_complete+0x4c>
	if (!evt->status) {
   1e204:	782b      	ldrb	r3, [r5, #0]
   1e206:	b933      	cbnz	r3, 1e216 <le_remote_feat_complete+0x22>
   1e208:	f855 3f03 	ldr.w	r3, [r5, #3]!
   1e20c:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
   1e210:	686b      	ldr	r3, [r5, #4]
   1e212:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
   1e216:	1d23      	adds	r3, r4, #4
   1e218:	f3bf 8f5b 	dmb	ish
   1e21c:	e853 2f00 	ldrex	r2, [r3]
   1e220:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1e224:	e843 2100 	strex	r1, r2, [r3]
   1e228:	2900      	cmp	r1, #0
   1e22a:	d1f7      	bne.n	1e21c <le_remote_feat_complete+0x28>
   1e22c:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   1e230:	4620      	mov	r0, r4
   1e232:	f7f5 fd5d 	bl	13cf0 <conn_auto_initiate>
	bt_conn_unref(conn);
   1e236:	4620      	mov	r0, r4
}
   1e238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1e23c:	f000 ba91 	b.w	1e762 <bt_conn_unref>
}
   1e240:	bd38      	pop	{r3, r4, r5, pc}

0001e242 <le_conn_param_neg_reply>:
{
   1e242:	b570      	push	{r4, r5, r6, lr}
   1e244:	4606      	mov	r6, r0
   1e246:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1e248:	f242 0021 	movw	r0, #8225	; 0x2021
   1e24c:	2103      	movs	r1, #3
   1e24e:	f7f5 facb 	bl	137e8 <bt_hci_cmd_create>
	if (!buf) {
   1e252:	4604      	mov	r4, r0
   1e254:	b160      	cbz	r0, 1e270 <le_conn_param_neg_reply+0x2e>
   1e256:	2103      	movs	r1, #3
   1e258:	3008      	adds	r0, #8
   1e25a:	f001 fce4 	bl	1fc26 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   1e25e:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   1e260:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1e262:	4621      	mov	r1, r4
   1e264:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1e268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1e26c:	f7f5 bd1e 	b.w	13cac <bt_hci_cmd_send>
}
   1e270:	bd70      	pop	{r4, r5, r6, pc}

0001e272 <le_conn_param_req>:
{
   1e272:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1e274:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1e276:	78d9      	ldrb	r1, [r3, #3]
   1e278:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1e27a:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1e27c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1e280:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1e284:	7959      	ldrb	r1, [r3, #5]
   1e286:	791a      	ldrb	r2, [r3, #4]
   1e288:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1e28c:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1e290:	799a      	ldrb	r2, [r3, #6]
   1e292:	79d9      	ldrb	r1, [r3, #7]
   1e294:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1e298:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1e29c:	7a1a      	ldrb	r2, [r3, #8]
   1e29e:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   1e2a0:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1e2a2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   1e2a6:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1e2a8:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   1e2ac:	f7f6 fdc0 	bl	14e30 <bt_conn_lookup_handle>
	if (!conn) {
   1e2b0:	4606      	mov	r6, r0
   1e2b2:	b928      	cbnz	r0, 1e2c0 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1e2b4:	2102      	movs	r1, #2
   1e2b6:	4620      	mov	r0, r4
   1e2b8:	f7ff ffc3 	bl	1e242 <le_conn_param_neg_reply>
}
   1e2bc:	b003      	add	sp, #12
   1e2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   1e2c0:	4669      	mov	r1, sp
   1e2c2:	f7f6 feaf 	bl	15024 <le_param_req>
   1e2c6:	b938      	cbnz	r0, 1e2d8 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1e2c8:	211e      	movs	r1, #30
   1e2ca:	4620      	mov	r0, r4
   1e2cc:	f7ff ffb9 	bl	1e242 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1e2d0:	4630      	mov	r0, r6
   1e2d2:	f000 fa46 	bl	1e762 <bt_conn_unref>
   1e2d6:	e7f1      	b.n	1e2bc <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1e2d8:	210e      	movs	r1, #14
   1e2da:	f242 0020 	movw	r0, #8224	; 0x2020
   1e2de:	f7f5 fa83 	bl	137e8 <bt_hci_cmd_create>
	if (!buf) {
   1e2e2:	4605      	mov	r5, r0
   1e2e4:	2800      	cmp	r0, #0
   1e2e6:	d0f3      	beq.n	1e2d0 <le_conn_param_req+0x5e>
   1e2e8:	210e      	movs	r1, #14
   1e2ea:	3008      	adds	r0, #8
   1e2ec:	f001 fc9b 	bl	1fc26 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1e2f0:	220e      	movs	r2, #14
   1e2f2:	4604      	mov	r4, r0
   1e2f4:	2100      	movs	r1, #0
   1e2f6:	f002 fbfb 	bl	20af0 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1e2fa:	f8bd 3000 	ldrh.w	r3, [sp]
   1e2fe:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1e300:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1e304:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1e306:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1e30a:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1e30c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   1e310:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1e312:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1e314:	4629      	mov	r1, r5
   1e316:	f242 0020 	movw	r0, #8224	; 0x2020
   1e31a:	f7f5 fcc7 	bl	13cac <bt_hci_cmd_send>
   1e31e:	e7d7      	b.n	1e2d0 <le_conn_param_req+0x5e>

0001e320 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   1e320:	2000      	movs	r0, #0
   1e322:	4770      	bx	lr

0001e324 <bt_addr_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e324:	680b      	ldr	r3, [r1, #0]
   1e326:	6003      	str	r3, [r0, #0]
   1e328:	888b      	ldrh	r3, [r1, #4]
   1e32a:	8083      	strh	r3, [r0, #4]
}
   1e32c:	4770      	bx	lr

0001e32e <bt_addr_le_copy>:
   1e32e:	680b      	ldr	r3, [r1, #0]
   1e330:	6003      	str	r3, [r0, #0]
   1e332:	888b      	ldrh	r3, [r1, #4]
   1e334:	8083      	strh	r3, [r0, #4]
   1e336:	798b      	ldrb	r3, [r1, #6]
   1e338:	7183      	strb	r3, [r0, #6]
}
   1e33a:	4770      	bx	lr

0001e33c <bt_lookup_id_addr>:
}
   1e33c:	4608      	mov	r0, r1
   1e33e:	4770      	bx	lr

0001e340 <bt_id_set_adv_private_addr>:
{
   1e340:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1e342:	2106      	movs	r1, #6
   1e344:	4668      	mov	r0, sp
   1e346:	f7f9 fd3b 	bl	17dc0 <bt_rand>
	if (err) {
   1e34a:	b940      	cbnz	r0, 1e35e <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1e34c:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   1e350:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1e352:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e356:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   1e35a:	f7f5 fffd 	bl	14358 <set_random_address>
}
   1e35e:	b003      	add	sp, #12
   1e360:	f85d fb04 	ldr.w	pc, [sp], #4

0001e364 <bt_id_adv_random_addr_check>:
}
   1e364:	2001      	movs	r0, #1
   1e366:	4770      	bx	lr

0001e368 <get_adv_channel_map>:
{
   1e368:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1e36a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1e36e:	bf0c      	ite	eq
   1e370:	2007      	moveq	r0, #7
   1e372:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1e374:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1e376:	bf48      	it	mi
   1e378:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1e37c:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1e37e:	bf48      	it	mi
   1e380:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1e384:	4770      	bx	lr

0001e386 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e386:	f3bf 8f5b 	dmb	ish
   1e38a:	6800      	ldr	r0, [r0, #0]
   1e38c:	f3bf 8f5b 	dmb	ish
}
   1e390:	4770      	bx	lr

0001e392 <atomic_and>:
{
   1e392:	4603      	mov	r3, r0
}
   1e394:	f3bf 8f5b 	dmb	ish
   1e398:	e853 0f00 	ldrex	r0, [r3]
   1e39c:	ea00 0201 	and.w	r2, r0, r1
   1e3a0:	e843 2c00 	strex	ip, r2, [r3]
   1e3a4:	f1bc 0f00 	cmp.w	ip, #0
   1e3a8:	d1f6      	bne.n	1e398 <atomic_and+0x6>
   1e3aa:	f3bf 8f5b 	dmb	ish
   1e3ae:	4770      	bx	lr

0001e3b0 <bt_addr_le_copy>:
   1e3b0:	680b      	ldr	r3, [r1, #0]
   1e3b2:	6003      	str	r3, [r0, #0]
   1e3b4:	888b      	ldrh	r3, [r1, #4]
   1e3b6:	8083      	strh	r3, [r0, #4]
   1e3b8:	798b      	ldrb	r3, [r1, #6]
   1e3ba:	7183      	strb	r3, [r0, #6]
   1e3bc:	4770      	bx	lr

0001e3be <hci_set_ad>:
{
   1e3be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3c2:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1e3c4:	2120      	movs	r1, #32
{
   1e3c6:	4682      	mov	sl, r0
   1e3c8:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1e3ca:	f7f5 fa0d 	bl	137e8 <bt_hci_cmd_create>
	if (!buf) {
   1e3ce:	4606      	mov	r6, r0
   1e3d0:	2800      	cmp	r0, #0
   1e3d2:	d04a      	beq.n	1e46a <hci_set_ad+0xac>
   1e3d4:	2120      	movs	r1, #32
   1e3d6:	3008      	adds	r0, #8
   1e3d8:	f001 fc25 	bl	1fc26 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1e3dc:	2220      	movs	r2, #32
   1e3de:	2100      	movs	r1, #0
   1e3e0:	4681      	mov	r9, r0
   1e3e2:	f002 fb85 	bl	20af0 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1e3e6:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   1e3ea:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   1e3ee:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   1e3f0:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   1e3f2:	f8d4 8000 	ldr.w	r8, [r4]
   1e3f6:	2300      	movs	r3, #0
   1e3f8:	6862      	ldr	r2, [r4, #4]
   1e3fa:	4293      	cmp	r3, r2
   1e3fc:	d30d      	bcc.n	1e41a <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   1e3fe:	9b00      	ldr	r3, [sp, #0]
   1e400:	3408      	adds	r4, #8
   1e402:	42a3      	cmp	r3, r4
   1e404:	d1f5      	bne.n	1e3f2 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1e406:	2200      	movs	r2, #0
   1e408:	4631      	mov	r1, r6
   1e40a:	4650      	mov	r0, sl
	*data_len = set_data_len;
   1e40c:	f889 5000 	strb.w	r5, [r9]
}
   1e410:	b003      	add	sp, #12
   1e412:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1e416:	f7f5 ba1f 	b.w	13858 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   1e41a:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   1e41e:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1e422:	1ca8      	adds	r0, r5, #2
   1e424:	1881      	adds	r1, r0, r2
   1e426:	291f      	cmp	r1, #31
   1e428:	d908      	bls.n	1e43c <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1e42a:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   1e42e:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1e432:	d11f      	bne.n	1e474 <hci_set_ad+0xb6>
   1e434:	2a00      	cmp	r2, #0
   1e436:	dd1d      	ble.n	1e474 <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   1e438:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   1e43c:	b2d7      	uxtb	r7, r2
   1e43e:	1c79      	adds	r1, r7, #1
   1e440:	f80b 1005 	strb.w	r1, [fp, r5]
   1e444:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   1e446:	b2c9      	uxtb	r1, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e448:	fa5b f080 	uxtab	r0, fp, r0
   1e44c:	f80b c001 	strb.w	ip, [fp, r1]
   1e450:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1e454:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   1e456:	3702      	adds	r7, #2
   1e458:	f002 fb0f 	bl	20a7a <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   1e45c:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   1e45e:	443d      	add	r5, r7
   1e460:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   1e462:	3301      	adds	r3, #1
   1e464:	f108 0808 	add.w	r8, r8, #8
   1e468:	e7c6      	b.n	1e3f8 <hci_set_ad+0x3a>
		return -ENOBUFS;
   1e46a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1e46e:	b003      	add	sp, #12
   1e470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   1e474:	4630      	mov	r0, r6
   1e476:	f7f8 fb1d 	bl	16ab4 <net_buf_unref>
		return err;
   1e47a:	f06f 0015 	mvn.w	r0, #21
   1e47e:	e7f6      	b.n	1e46e <hci_set_ad+0xb0>

0001e480 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e480:	2301      	movs	r3, #1
{
   1e482:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e484:	fa03 f101 	lsl.w	r1, r3, r1
{
   1e488:	4604      	mov	r4, r0
	if (val) {
   1e48a:	b162      	cbz	r2, 1e4a6 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e48c:	f3bf 8f5b 	dmb	ish
   1e490:	e854 3f00 	ldrex	r3, [r4]
   1e494:	430b      	orrs	r3, r1
   1e496:	e844 3200 	strex	r2, r3, [r4]
   1e49a:	2a00      	cmp	r2, #0
   1e49c:	d1f8      	bne.n	1e490 <atomic_set_bit_to+0x10>
   1e49e:	f3bf 8f5b 	dmb	ish
	}
}
   1e4a2:	bc10      	pop	{r4}
   1e4a4:	4770      	bx	lr
   1e4a6:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e4a8:	43c9      	mvns	r1, r1
   1e4aa:	f7ff bf72 	b.w	1e392 <atomic_and>

0001e4ae <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1e4ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e4b2:	b087      	sub	sp, #28
   1e4b4:	4605      	mov	r5, r0
   1e4b6:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
   1e4ba:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   1e4be:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
   1e4c2:	460c      	mov	r4, r1
   1e4c4:	4693      	mov	fp, r2
	struct bt_ad d[2] = {};
   1e4c6:	2100      	movs	r1, #0
   1e4c8:	2210      	movs	r2, #16
   1e4ca:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1e4cc:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
   1e4ce:	f002 fb0f 	bl	20af0 <memset>
	if (use_name) {
   1e4d2:	b187      	cbz	r7, 1e4f6 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   1e4d4:	f7f5 ff22 	bl	1431c <bt_get_name>
   1e4d8:	4681      	mov	r9, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1e4da:	2c00      	cmp	r4, #0
   1e4dc:	d13e      	bne.n	1e55c <le_adv_update.constprop.0+0xae>
   1e4de:	2e00      	cmp	r6, #0
   1e4e0:	d148      	bne.n	1e574 <le_adv_update.constprop.0+0xc6>
		data = (struct bt_data)BT_DATA(
   1e4e2:	4648      	mov	r0, r9
   1e4e4:	f7ed ff0a 	bl	c2fc <strlen>
   1e4e8:	2209      	movs	r2, #9
   1e4ea:	f88d 2000 	strb.w	r2, [sp]
   1e4ee:	f88d 0001 	strb.w	r0, [sp, #1]
   1e4f2:	f8cd 9004 	str.w	r9, [sp, #4]
		d[0].len = ad_len;
   1e4f6:	e9cd 4b02 	strd	r4, fp, [sp, #8]
		if (use_name && (!scannable || force_name_in_ad)) {
   1e4fa:	2f00      	cmp	r7, #0
   1e4fc:	d03c      	beq.n	1e578 <le_adv_update.constprop.0+0xca>
   1e4fe:	f1ba 0f00 	cmp.w	sl, #0
   1e502:	d002      	beq.n	1e50a <le_adv_update.constprop.0+0x5c>
   1e504:	f1b8 0f00 	cmp.w	r8, #0
   1e508:	d036      	beq.n	1e578 <le_adv_update.constprop.0+0xca>
			d[1].len = 1;
   1e50a:	2301      	movs	r3, #1
			d[1].data = &data;
   1e50c:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1e510:	9305      	str	r3, [sp, #20]
			d_len = 2;
   1e512:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1e514:	a902      	add	r1, sp, #8
   1e516:	f242 0008 	movw	r0, #8200	; 0x2008
   1e51a:	f7ff ff50 	bl	1e3be <hci_set_ad>
		if (err) {
   1e51e:	4604      	mov	r4, r0
   1e520:	b978      	cbnz	r0, 1e542 <le_adv_update.constprop.0+0x94>
	if (scannable) {
   1e522:	f1ba 0f00 	cmp.w	sl, #0
   1e526:	d129      	bne.n	1e57c <le_adv_update.constprop.0+0xce>
   1e528:	3510      	adds	r5, #16
   1e52a:	f3bf 8f5b 	dmb	ish
   1e52e:	e855 3f00 	ldrex	r3, [r5]
   1e532:	f043 0304 	orr.w	r3, r3, #4
   1e536:	e845 3200 	strex	r2, r3, [r5]
   1e53a:	2a00      	cmp	r2, #0
   1e53c:	d1f7      	bne.n	1e52e <le_adv_update.constprop.0+0x80>
   1e53e:	f3bf 8f5b 	dmb	ish
}
   1e542:	4620      	mov	r0, r4
   1e544:	b007      	add	sp, #28
   1e546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1e54a:	f814 1032 	ldrb.w	r1, [r4, r2, lsl #3]
   1e54e:	3908      	subs	r1, #8
   1e550:	2901      	cmp	r1, #1
   1e552:	d92a      	bls.n	1e5aa <le_adv_update.constprop.0+0xfc>
	for (i = 0; i < ad_len; i++) {
   1e554:	3201      	adds	r2, #1
   1e556:	4593      	cmp	fp, r2
   1e558:	d1f7      	bne.n	1e54a <le_adv_update.constprop.0+0x9c>
   1e55a:	e7c0      	b.n	1e4de <le_adv_update.constprop.0+0x30>
   1e55c:	2200      	movs	r2, #0
   1e55e:	e7fa      	b.n	1e556 <le_adv_update.constprop.0+0xa8>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1e560:	f816 1032 	ldrb.w	r1, [r6, r2, lsl #3]
   1e564:	3908      	subs	r1, #8
   1e566:	2901      	cmp	r1, #1
   1e568:	d91f      	bls.n	1e5aa <le_adv_update.constprop.0+0xfc>
	for (i = 0; i < ad_len; i++) {
   1e56a:	3201      	adds	r2, #1
   1e56c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e56e:	4293      	cmp	r3, r2
   1e570:	d1f6      	bne.n	1e560 <le_adv_update.constprop.0+0xb2>
   1e572:	e7b6      	b.n	1e4e2 <le_adv_update.constprop.0+0x34>
   1e574:	2200      	movs	r2, #0
   1e576:	e7f9      	b.n	1e56c <le_adv_update.constprop.0+0xbe>
		d_len = 1;
   1e578:	2201      	movs	r2, #1
   1e57a:	e7cb      	b.n	1e514 <le_adv_update.constprop.0+0x66>
		d[0].len = sd_len;
   1e57c:	9b10      	ldr	r3, [sp, #64]	; 0x40
		d[0].data = sd;
   1e57e:	9602      	str	r6, [sp, #8]
		d[0].len = sd_len;
   1e580:	9303      	str	r3, [sp, #12]
		if (use_name && !force_name_in_ad) {
   1e582:	b187      	cbz	r7, 1e5a6 <le_adv_update.constprop.0+0xf8>
   1e584:	f1b8 0f00 	cmp.w	r8, #0
   1e588:	d10d      	bne.n	1e5a6 <le_adv_update.constprop.0+0xf8>
			d[1].len = 1;
   1e58a:	2301      	movs	r3, #1
			d[1].data = &data;
   1e58c:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1e590:	9305      	str	r3, [sp, #20]
			d_len = 2;
   1e592:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1e594:	a902      	add	r1, sp, #8
   1e596:	f242 0009 	movw	r0, #8201	; 0x2009
   1e59a:	f7ff ff10 	bl	1e3be <hci_set_ad>
		if (err) {
   1e59e:	2800      	cmp	r0, #0
   1e5a0:	d0c2      	beq.n	1e528 <le_adv_update.constprop.0+0x7a>
   1e5a2:	4604      	mov	r4, r0
   1e5a4:	e7cd      	b.n	1e542 <le_adv_update.constprop.0+0x94>
		d_len = 1;
   1e5a6:	2201      	movs	r2, #1
   1e5a8:	e7f4      	b.n	1e594 <le_adv_update.constprop.0+0xe6>
			return -EINVAL;
   1e5aa:	f06f 0415 	mvn.w	r4, #21
   1e5ae:	e7c8      	b.n	1e542 <le_adv_update.constprop.0+0x94>

0001e5b0 <bt_le_adv_set_enable_legacy>:
{
   1e5b0:	b570      	push	{r4, r5, r6, lr}
   1e5b2:	4606      	mov	r6, r0
   1e5b4:	b086      	sub	sp, #24
   1e5b6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1e5b8:	f242 000a 	movw	r0, #8202	; 0x200a
   1e5bc:	2101      	movs	r1, #1
   1e5be:	f7f5 f913 	bl	137e8 <bt_hci_cmd_create>
	if (!buf) {
   1e5c2:	4604      	mov	r4, r0
   1e5c4:	b1b0      	cbz	r0, 1e5f4 <bt_le_adv_set_enable_legacy+0x44>
	if (enable) {
   1e5c6:	3008      	adds	r0, #8
   1e5c8:	b195      	cbz	r5, 1e5f0 <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   1e5ca:	2101      	movs	r1, #1
   1e5cc:	f001 fb3b 	bl	1fc46 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1e5d0:	f106 0210 	add.w	r2, r6, #16
   1e5d4:	a903      	add	r1, sp, #12
   1e5d6:	4620      	mov	r0, r4
   1e5d8:	9500      	str	r5, [sp, #0]
   1e5da:	2306      	movs	r3, #6
   1e5dc:	f7f5 f8f2 	bl	137c4 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1e5e0:	2200      	movs	r2, #0
   1e5e2:	4621      	mov	r1, r4
   1e5e4:	f242 000a 	movw	r0, #8202	; 0x200a
   1e5e8:	f7f5 f936 	bl	13858 <bt_hci_cmd_send_sync>
}
   1e5ec:	b006      	add	sp, #24
   1e5ee:	bd70      	pop	{r4, r5, r6, pc}
   1e5f0:	4629      	mov	r1, r5
   1e5f2:	e7eb      	b.n	1e5cc <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1e5f4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e5f8:	e7f8      	b.n	1e5ec <bt_le_adv_set_enable_legacy+0x3c>

0001e5fa <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   1e5fa:	3018      	adds	r0, #24
   1e5fc:	f001 bf2a 	b.w	20454 <k_work_cancel_delayable>

0001e600 <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   1e600:	f7f6 ba32 	b.w	14a68 <bt_le_adv_stop>

0001e604 <tx_notify>:
{
   1e604:	b570      	push	{r4, r5, r6, lr}
   1e606:	4604      	mov	r4, r0
	__asm__ volatile(
   1e608:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e60c:	f3ef 8311 	mrs	r3, BASEPRI
   1e610:	f382 8811 	msr	BASEPRI, r2
   1e614:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1e618:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1e61a:	b920      	cbnz	r0, 1e626 <tx_notify+0x22>
	__asm__ volatile(
   1e61c:	f383 8811 	msr	BASEPRI, r3
   1e620:	f3bf 8f6f 	isb	sy
}
   1e624:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e626:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1e628:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1e62a:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e62c:	4288      	cmp	r0, r1
	list->tail = node;
   1e62e:	bf08      	it	eq
   1e630:	6262      	streq	r2, [r4, #36]	; 0x24
   1e632:	f383 8811 	msr	BASEPRI, r3
   1e636:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1e63a:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1e63e:	f7f6 faa1 	bl	14b84 <tx_free>
		cb(conn, user_data);
   1e642:	4631      	mov	r1, r6
   1e644:	4620      	mov	r0, r4
   1e646:	47a8      	blx	r5
	while (1) {
   1e648:	e7de      	b.n	1e608 <tx_notify+0x4>

0001e64a <tx_complete_work>:
	tx_notify(conn);
   1e64a:	3828      	subs	r0, #40	; 0x28
   1e64c:	f7ff bfda 	b.w	1e604 <tx_notify>

0001e650 <bt_conn_reset_rx_state>:
{
   1e650:	b510      	push	{r4, lr}
   1e652:	4604      	mov	r4, r0
	if (!conn->rx) {
   1e654:	6900      	ldr	r0, [r0, #16]
   1e656:	b118      	cbz	r0, 1e660 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1e658:	f7f8 fa2c 	bl	16ab4 <net_buf_unref>
	conn->rx = NULL;
   1e65c:	2300      	movs	r3, #0
   1e65e:	6123      	str	r3, [r4, #16]
}
   1e660:	bd10      	pop	{r4, pc}

0001e662 <conn_cleanup>:
{
   1e662:	b570      	push	{r4, r5, r6, lr}
   1e664:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1e666:	f100 0638 	add.w	r6, r0, #56	; 0x38
   1e66a:	2200      	movs	r2, #0
   1e66c:	2300      	movs	r3, #0
   1e66e:	4630      	mov	r0, r6
   1e670:	f001 fa88 	bl	1fb84 <net_buf_get>
   1e674:	4605      	mov	r5, r0
   1e676:	b950      	cbnz	r0, 1e68e <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   1e678:	4620      	mov	r0, r4
   1e67a:	f7ff ffe9 	bl	1e650 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1e67e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1e682:	2200      	movs	r2, #0
}
   1e684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1e688:	2300      	movs	r3, #0
   1e68a:	f7fa be57 	b.w	1933c <k_work_reschedule>
		if (tx_data(buf)->tx) {
   1e68e:	6968      	ldr	r0, [r5, #20]
   1e690:	b108      	cbz	r0, 1e696 <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   1e692:	f7f6 fa77 	bl	14b84 <tx_free>
		net_buf_unref(buf);
   1e696:	4628      	mov	r0, r5
   1e698:	f7f8 fa0c 	bl	16ab4 <net_buf_unref>
   1e69c:	e7e5      	b.n	1e66a <conn_cleanup+0x8>

0001e69e <bt_conn_recv>:
{
   1e69e:	b570      	push	{r4, r5, r6, lr}
   1e6a0:	4616      	mov	r6, r2
   1e6a2:	4604      	mov	r4, r0
   1e6a4:	460d      	mov	r5, r1
	tx_notify(conn);
   1e6a6:	f7ff ffad 	bl	1e604 <tx_notify>
	switch (flags) {
   1e6aa:	2e01      	cmp	r6, #1
   1e6ac:	d01a      	beq.n	1e6e4 <bt_conn_recv+0x46>
   1e6ae:	2e02      	cmp	r6, #2
   1e6b0:	d11a      	bne.n	1e6e8 <bt_conn_recv+0x4a>
		if (conn->rx) {
   1e6b2:	6923      	ldr	r3, [r4, #16]
   1e6b4:	b113      	cbz	r3, 1e6bc <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   1e6b6:	4620      	mov	r0, r4
   1e6b8:	f7ff ffca 	bl	1e650 <bt_conn_reset_rx_state>
		conn->rx = buf;
   1e6bc:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1e6be:	6921      	ldr	r1, [r4, #16]
   1e6c0:	898a      	ldrh	r2, [r1, #12]
   1e6c2:	2a01      	cmp	r2, #1
   1e6c4:	d931      	bls.n	1e72a <bt_conn_recv+0x8c>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1e6c6:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   1e6c8:	7845      	ldrb	r5, [r0, #1]
   1e6ca:	7803      	ldrb	r3, [r0, #0]
   1e6cc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   1e6d0:	3304      	adds	r3, #4
   1e6d2:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1e6d4:	429a      	cmp	r2, r3
   1e6d6:	d328      	bcc.n	1e72a <bt_conn_recv+0x8c>
	if (conn->rx->len > acl_total_len) {
   1e6d8:	d920      	bls.n	1e71c <bt_conn_recv+0x7e>
		bt_conn_reset_rx_state(conn);
   1e6da:	4620      	mov	r0, r4
}
   1e6dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1e6e0:	f7ff bfb6 	b.w	1e650 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1e6e4:	6920      	ldr	r0, [r4, #16]
   1e6e6:	b918      	cbnz	r0, 1e6f0 <bt_conn_recv+0x52>
		bt_conn_reset_rx_state(conn);
   1e6e8:	4620      	mov	r0, r4
   1e6ea:	f7ff ffb1 	bl	1e650 <bt_conn_reset_rx_state>
   1e6ee:	e001      	b.n	1e6f4 <bt_conn_recv+0x56>
		if (!buf->len) {
   1e6f0:	89ae      	ldrh	r6, [r5, #12]
   1e6f2:	b926      	cbnz	r6, 1e6fe <bt_conn_recv+0x60>
		net_buf_unref(buf);
   1e6f4:	4628      	mov	r0, r5
}
   1e6f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   1e6fa:	f7f8 b9db 	b.w	16ab4 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   1e6fe:	3008      	adds	r0, #8
   1e700:	f001 facd 	bl	1fc9e <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1e704:	4286      	cmp	r6, r0
   1e706:	d8ef      	bhi.n	1e6e8 <bt_conn_recv+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e708:	6920      	ldr	r0, [r4, #16]
   1e70a:	89aa      	ldrh	r2, [r5, #12]
   1e70c:	68a9      	ldr	r1, [r5, #8]
   1e70e:	3008      	adds	r0, #8
   1e710:	f001 fa8f 	bl	1fc32 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1e714:	4628      	mov	r0, r5
   1e716:	f7f8 f9cd 	bl	16ab4 <net_buf_unref>
		break;
   1e71a:	e7d0      	b.n	1e6be <bt_conn_recv+0x20>
	conn->rx = NULL;
   1e71c:	2300      	movs	r3, #0
   1e71e:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf);
   1e720:	4620      	mov	r0, r4
}
   1e722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   1e726:	f000 b9de 	b.w	1eae6 <bt_l2cap_recv>
}
   1e72a:	bd70      	pop	{r4, r5, r6, pc}

0001e72c <bt_conn_ref>:
{
   1e72c:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1e72e:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e732:	f3bf 8f5b 	dmb	ish
   1e736:	6813      	ldr	r3, [r2, #0]
   1e738:	f3bf 8f5b 	dmb	ish
		if (!old) {
   1e73c:	b17b      	cbz	r3, 1e75e <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e73e:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1e742:	1c59      	adds	r1, r3, #1
   1e744:	e852 4f00 	ldrex	r4, [r2]
   1e748:	429c      	cmp	r4, r3
   1e74a:	d104      	bne.n	1e756 <bt_conn_ref+0x2a>
   1e74c:	e842 1c00 	strex	ip, r1, [r2]
   1e750:	f1bc 0f00 	cmp.w	ip, #0
   1e754:	d1f6      	bne.n	1e744 <bt_conn_ref+0x18>
   1e756:	f3bf 8f5b 	dmb	ish
   1e75a:	d1ea      	bne.n	1e732 <bt_conn_ref+0x6>
}
   1e75c:	bd10      	pop	{r4, pc}
			return NULL;
   1e75e:	4618      	mov	r0, r3
   1e760:	e7fc      	b.n	1e75c <bt_conn_ref+0x30>

0001e762 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   1e762:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1e766:	f3bf 8f5b 	dmb	ish
   1e76a:	e853 2f00 	ldrex	r2, [r3]
   1e76e:	3a01      	subs	r2, #1
   1e770:	e843 2100 	strex	r1, r2, [r3]
   1e774:	2900      	cmp	r1, #0
   1e776:	d1f8      	bne.n	1e76a <bt_conn_unref+0x8>
   1e778:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1e77c:	7883      	ldrb	r3, [r0, #2]
   1e77e:	2b01      	cmp	r3, #1
   1e780:	d108      	bne.n	1e794 <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e782:	f3bf 8f5b 	dmb	ish
   1e786:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1e78a:	f3bf 8f5b 	dmb	ish
   1e78e:	b90b      	cbnz	r3, 1e794 <bt_conn_unref+0x32>
		bt_le_adv_resume();
   1e790:	f7f6 b9b8 	b.w	14b04 <bt_le_adv_resume>
}
   1e794:	4770      	bx	lr

0001e796 <conn_lookup_handle>:
{
   1e796:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e79a:	4607      	mov	r7, r0
   1e79c:	460e      	mov	r6, r1
   1e79e:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1e7a0:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1e7a2:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1e7a6:	42b4      	cmp	r4, r6
   1e7a8:	d103      	bne.n	1e7b2 <conn_lookup_handle+0x1c>
	return NULL;
   1e7aa:	2300      	movs	r3, #0
}
   1e7ac:	4618      	mov	r0, r3
   1e7ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1e7b2:	fb09 7004 	mla	r0, r9, r4, r7
   1e7b6:	f7ff ffb9 	bl	1e72c <bt_conn_ref>
   1e7ba:	4603      	mov	r3, r0
		if (!conn) {
   1e7bc:	b158      	cbz	r0, 1e7d6 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1e7be:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1e7c0:	2d01      	cmp	r5, #1
   1e7c2:	d002      	beq.n	1e7ca <conn_lookup_handle+0x34>
   1e7c4:	3d07      	subs	r5, #7
   1e7c6:	2d01      	cmp	r5, #1
   1e7c8:	d803      	bhi.n	1e7d2 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1e7ca:	881a      	ldrh	r2, [r3, #0]
   1e7cc:	4542      	cmp	r2, r8
   1e7ce:	d0ed      	beq.n	1e7ac <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1e7d0:	4618      	mov	r0, r3
   1e7d2:	f7ff ffc6 	bl	1e762 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1e7d6:	3401      	adds	r4, #1
   1e7d8:	e7e5      	b.n	1e7a6 <conn_lookup_handle+0x10>

0001e7da <bt_conn_connected>:
{
   1e7da:	b510      	push	{r4, lr}
   1e7dc:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1e7de:	f7f6 fe03 	bl	153e8 <bt_l2cap_connected>
	notify_connected(conn);
   1e7e2:	4620      	mov	r0, r4
}
   1e7e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1e7e8:	f7f6 b9d6 	b.w	14b98 <notify_connected>

0001e7ec <bt_conn_get_security>:
}
   1e7ec:	2001      	movs	r0, #1
   1e7ee:	4770      	bx	lr

0001e7f0 <bt_conn_is_peer_addr_le>:
{
   1e7f0:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1e7f2:	7a03      	ldrb	r3, [r0, #8]
   1e7f4:	428b      	cmp	r3, r1
{
   1e7f6:	4604      	mov	r4, r0
   1e7f8:	4615      	mov	r5, r2
	if (id != conn->id) {
   1e7fa:	d115      	bne.n	1e828 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1e7fc:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1e800:	2207      	movs	r2, #7
   1e802:	4628      	mov	r0, r5
   1e804:	f002 f92b 	bl	20a5e <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1e808:	b180      	cbz	r0, 1e82c <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1e80a:	78e3      	ldrb	r3, [r4, #3]
   1e80c:	2207      	movs	r2, #7
   1e80e:	b943      	cbnz	r3, 1e822 <bt_conn_is_peer_addr_le+0x32>
   1e810:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1e814:	4628      	mov	r0, r5
   1e816:	f002 f922 	bl	20a5e <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1e81a:	fab0 f080 	clz	r0, r0
   1e81e:	0940      	lsrs	r0, r0, #5
}
   1e820:	bd38      	pop	{r3, r4, r5, pc}
   1e822:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1e826:	e7f5      	b.n	1e814 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1e828:	2000      	movs	r0, #0
   1e82a:	e7f9      	b.n	1e820 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1e82c:	2001      	movs	r0, #1
   1e82e:	e7f7      	b.n	1e820 <bt_conn_is_peer_addr_le+0x30>

0001e830 <bt_conn_exists_le>:
{
   1e830:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1e832:	f7f6 fc3b 	bl	150ac <bt_conn_lookup_addr_le>
	if (conn) {
   1e836:	b110      	cbz	r0, 1e83e <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   1e838:	f7ff ff93 	bl	1e762 <bt_conn_unref>
		return true;
   1e83c:	2001      	movs	r0, #1
}
   1e83e:	bd08      	pop	{r3, pc}

0001e840 <bt_conn_le_conn_update>:
{
   1e840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e842:	4607      	mov	r7, r0
   1e844:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1e846:	f242 0013 	movw	r0, #8211	; 0x2013
   1e84a:	210e      	movs	r1, #14
   1e84c:	f7f4 ffcc 	bl	137e8 <bt_hci_cmd_create>
	if (!buf) {
   1e850:	4606      	mov	r6, r0
   1e852:	b1d0      	cbz	r0, 1e88a <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1e854:	210e      	movs	r1, #14
   1e856:	3008      	adds	r0, #8
   1e858:	f001 f9e5 	bl	1fc26 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1e85c:	220e      	movs	r2, #14
   1e85e:	4604      	mov	r4, r0
   1e860:	2100      	movs	r1, #0
   1e862:	f002 f945 	bl	20af0 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1e866:	883b      	ldrh	r3, [r7, #0]
   1e868:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1e86a:	882b      	ldrh	r3, [r5, #0]
   1e86c:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1e86e:	886b      	ldrh	r3, [r5, #2]
   1e870:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1e872:	88ab      	ldrh	r3, [r5, #4]
   1e874:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1e876:	88eb      	ldrh	r3, [r5, #6]
   1e878:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e87a:	4631      	mov	r1, r6
   1e87c:	2200      	movs	r2, #0
}
   1e87e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e882:	f242 0013 	movw	r0, #8211	; 0x2013
   1e886:	f7f4 bfe7 	b.w	13858 <bt_hci_cmd_send_sync>
}
   1e88a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e890 <bt_conn_le_param_update>:
{
   1e890:	b410      	push	{r4}
	if (conn->le.interval >= param->interval_min &&
   1e892:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   1e896:	880c      	ldrh	r4, [r1, #0]
   1e898:	429c      	cmp	r4, r3
   1e89a:	f100 0204 	add.w	r2, r0, #4
   1e89e:	d81c      	bhi.n	1e8da <bt_conn_le_param_update+0x4a>
   1e8a0:	884c      	ldrh	r4, [r1, #2]
   1e8a2:	429c      	cmp	r4, r3
   1e8a4:	d319      	bcc.n	1e8da <bt_conn_le_param_update+0x4a>
	    conn->le.interval <= param->interval_max &&
   1e8a6:	f8b0 40a4 	ldrh.w	r4, [r0, #164]	; 0xa4
   1e8aa:	888b      	ldrh	r3, [r1, #4]
   1e8ac:	429c      	cmp	r4, r3
   1e8ae:	d114      	bne.n	1e8da <bt_conn_le_param_update+0x4a>
	    conn->le.latency == param->latency &&
   1e8b0:	f8b0 40a6 	ldrh.w	r4, [r0, #166]	; 0xa6
   1e8b4:	88cb      	ldrh	r3, [r1, #6]
   1e8b6:	429c      	cmp	r4, r3
   1e8b8:	d10f      	bne.n	1e8da <bt_conn_le_param_update+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e8ba:	f3bf 8f5b 	dmb	ish
   1e8be:	e852 3f00 	ldrex	r3, [r2]
   1e8c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   1e8c6:	e842 3100 	strex	r1, r3, [r2]
   1e8ca:	2900      	cmp	r1, #0
   1e8cc:	d1f7      	bne.n	1e8be <bt_conn_le_param_update+0x2e>
   1e8ce:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
   1e8d2:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   1e8d6:	bc10      	pop	{r4}
   1e8d8:	4770      	bx	lr
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e8da:	f3bf 8f5b 	dmb	ish
   1e8de:	6844      	ldr	r4, [r0, #4]
   1e8e0:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
   1e8e4:	f3c4 2300 	ubfx	r3, r4, #8, #1
   1e8e8:	05e4      	lsls	r4, r4, #23
   1e8ea:	d502      	bpl.n	1e8f2 <bt_conn_le_param_update+0x62>
}
   1e8ec:	bc10      	pop	{r4}
			return send_conn_le_param_update(conn, param);
   1e8ee:	f7f6 bc1d 	b.w	1512c <send_conn_le_param_update>
		conn->le.interval_min = param->interval_min;
   1e8f2:	880c      	ldrh	r4, [r1, #0]
   1e8f4:	f8a0 40a0 	strh.w	r4, [r0, #160]	; 0xa0
		conn->le.interval_max = param->interval_max;
   1e8f8:	884c      	ldrh	r4, [r1, #2]
   1e8fa:	f8a0 40a2 	strh.w	r4, [r0, #162]	; 0xa2
		conn->le.pending_latency = param->latency;
   1e8fe:	888c      	ldrh	r4, [r1, #4]
		conn->le.pending_timeout = param->timeout;
   1e900:	88c9      	ldrh	r1, [r1, #6]
		conn->le.pending_latency = param->latency;
   1e902:	f8a0 40a8 	strh.w	r4, [r0, #168]	; 0xa8
		conn->le.pending_timeout = param->timeout;
   1e906:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e90a:	f3bf 8f5b 	dmb	ish
   1e90e:	e852 1f00 	ldrex	r1, [r2]
   1e912:	f441 7100 	orr.w	r1, r1, #512	; 0x200
   1e916:	e842 1000 	strex	r0, r1, [r2]
   1e91a:	2800      	cmp	r0, #0
   1e91c:	d1f7      	bne.n	1e90e <bt_conn_le_param_update+0x7e>
   1e91e:	f3bf 8f5b 	dmb	ish
	return 0;
   1e922:	4618      	mov	r0, r3
   1e924:	e7d7      	b.n	1e8d6 <bt_conn_le_param_update+0x46>

0001e926 <l2cap_connected>:
}
   1e926:	4770      	bx	lr

0001e928 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   1e928:	3010      	adds	r0, #16
   1e92a:	f001 bd93 	b.w	20454 <k_work_cancel_delayable>

0001e92e <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1e92e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e930:	4607      	mov	r7, r0
   1e932:	460e      	mov	r6, r1
   1e934:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   1e936:	2300      	movs	r3, #0
   1e938:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e93c:	2104      	movs	r1, #4
   1e93e:	2000      	movs	r0, #0
   1e940:	f7f6 fc72 	bl	15228 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1e944:	4604      	mov	r4, r0
   1e946:	b130      	cbz	r0, 1e956 <l2cap_create_le_sig_pdu.isra.0+0x28>
   1e948:	2104      	movs	r1, #4
   1e94a:	3008      	adds	r0, #8
   1e94c:	f001 f96b 	bl	1fc26 <net_buf_simple_add>
	hdr->code = code;
   1e950:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   1e952:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1e954:	8045      	strh	r5, [r0, #2]
}
   1e956:	4620      	mov	r0, r4
   1e958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e95a <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e95a:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1e95c:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e95e:	b17b      	cbz	r3, 1e980 <bt_l2cap_chan_remove+0x26>
   1e960:	3b08      	subs	r3, #8
   1e962:	2200      	movs	r2, #0
   1e964:	b163      	cbz	r3, 1e980 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1e966:	428b      	cmp	r3, r1
   1e968:	f103 0408 	add.w	r4, r3, #8
   1e96c:	d10f      	bne.n	1e98e <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   1e96e:	688b      	ldr	r3, [r1, #8]
   1e970:	b93a      	cbnz	r2, 1e982 <bt_l2cap_chan_remove+0x28>
   1e972:	6d42      	ldr	r2, [r0, #84]	; 0x54
	list->head = node;
   1e974:	6503      	str	r3, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1e976:	4294      	cmp	r4, r2
   1e978:	d100      	bne.n	1e97c <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1e97a:	6543      	str	r3, [r0, #84]	; 0x54
	parent->next = child;
   1e97c:	2300      	movs	r3, #0
   1e97e:	608b      	str	r3, [r1, #8]
}
   1e980:	bd10      	pop	{r4, pc}
   1e982:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e984:	6d43      	ldr	r3, [r0, #84]	; 0x54
   1e986:	429c      	cmp	r4, r3
	list->tail = node;
   1e988:	bf08      	it	eq
   1e98a:	6542      	streq	r2, [r0, #84]	; 0x54
}
   1e98c:	e7f6      	b.n	1e97c <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e98e:	2c00      	cmp	r4, #0
   1e990:	d0f6      	beq.n	1e980 <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e992:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e994:	2b00      	cmp	r3, #0
   1e996:	d0f3      	beq.n	1e980 <bt_l2cap_chan_remove+0x26>
   1e998:	3b08      	subs	r3, #8
   1e99a:	4622      	mov	r2, r4
   1e99c:	e7e2      	b.n	1e964 <bt_l2cap_chan_remove+0xa>

0001e99e <bt_l2cap_chan_del>:
{
   1e99e:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1e9a0:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1e9a4:	4604      	mov	r4, r0
	if (!chan->conn) {
   1e9a6:	b123      	cbz	r3, 1e9b2 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1e9a8:	686b      	ldr	r3, [r5, #4]
   1e9aa:	b103      	cbz	r3, 1e9ae <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1e9ac:	4798      	blx	r3
	chan->conn = NULL;
   1e9ae:	2300      	movs	r3, #0
   1e9b0:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1e9b2:	68e3      	ldr	r3, [r4, #12]
   1e9b4:	b10b      	cbz	r3, 1e9ba <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1e9b6:	4620      	mov	r0, r4
   1e9b8:	4798      	blx	r3
	if (ops->released) {
   1e9ba:	69eb      	ldr	r3, [r5, #28]
   1e9bc:	b11b      	cbz	r3, 1e9c6 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1e9be:	4620      	mov	r0, r4
}
   1e9c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1e9c4:	4718      	bx	r3
}
   1e9c6:	bd70      	pop	{r4, r5, r6, pc}

0001e9c8 <l2cap_rtx_timeout>:
{
   1e9c8:	b508      	push	{r3, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   1e9ca:	f1a0 0110 	sub.w	r1, r0, #16
   1e9ce:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1e9d2:	f7ff ffc2 	bl	1e95a <bt_l2cap_chan_remove>
}
   1e9d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_l2cap_chan_del(&chan->chan);
   1e9da:	4608      	mov	r0, r1
   1e9dc:	f7ff bfdf 	b.w	1e99e <bt_l2cap_chan_del>

0001e9e0 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e9e0:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1e9e2:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e9e4:	b18b      	cbz	r3, 1ea0a <bt_l2cap_disconnected+0x2a>
   1e9e6:	f1b3 0008 	subs.w	r0, r3, #8
   1e9ea:	d00e      	beq.n	1ea0a <bt_l2cap_disconnected+0x2a>
   1e9ec:	681c      	ldr	r4, [r3, #0]
   1e9ee:	b104      	cbz	r4, 1e9f2 <bt_l2cap_disconnected+0x12>
   1e9f0:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1e9f2:	f7ff ffd4 	bl	1e99e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e9f6:	b144      	cbz	r4, 1ea0a <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e9f8:	f114 0308 	adds.w	r3, r4, #8
   1e9fc:	d002      	beq.n	1ea04 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e9fe:	68a3      	ldr	r3, [r4, #8]
   1ea00:	b103      	cbz	r3, 1ea04 <bt_l2cap_disconnected+0x24>
   1ea02:	3b08      	subs	r3, #8
{
   1ea04:	4620      	mov	r0, r4
   1ea06:	461c      	mov	r4, r3
   1ea08:	e7f3      	b.n	1e9f2 <bt_l2cap_disconnected+0x12>
}
   1ea0a:	bd10      	pop	{r4, pc}

0001ea0c <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1ea0c:	3104      	adds	r1, #4
   1ea0e:	f7f6 bc0b 	b.w	15228 <bt_conn_create_pdu_timeout>

0001ea12 <bt_l2cap_send_cb>:
{
   1ea12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ea16:	4614      	mov	r4, r2
   1ea18:	4605      	mov	r5, r0
   1ea1a:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1ea1c:	f102 0008 	add.w	r0, r2, #8
   1ea20:	2104      	movs	r1, #4
   1ea22:	461e      	mov	r6, r3
   1ea24:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1ea28:	f001 f915 	bl	1fc56 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1ea2c:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1ea2e:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1ea30:	3a04      	subs	r2, #4
   1ea32:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1ea34:	4643      	mov	r3, r8
   1ea36:	4632      	mov	r2, r6
   1ea38:	4621      	mov	r1, r4
   1ea3a:	4628      	mov	r0, r5
}
   1ea3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1ea40:	f7f6 b982 	b.w	14d48 <bt_conn_send_cb>

0001ea44 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   1ea44:	898b      	ldrh	r3, [r1, #12]
   1ea46:	2b03      	cmp	r3, #3
{
   1ea48:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ea4a:	4605      	mov	r5, r0
   1ea4c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1ea4e:	d927      	bls.n	1eaa0 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1ea50:	2104      	movs	r1, #4
   1ea52:	f104 0008 	add.w	r0, r4, #8
   1ea56:	f001 f90e 	bl	1fc76 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1ea5a:	89a3      	ldrh	r3, [r4, #12]
   1ea5c:	8842      	ldrh	r2, [r0, #2]
   1ea5e:	429a      	cmp	r2, r3
   1ea60:	d11e      	bne.n	1eaa0 <l2cap_recv+0x5c>
	if (!hdr->ident) {
   1ea62:	7841      	ldrb	r1, [r0, #1]
   1ea64:	b1e1      	cbz	r1, 1eaa0 <l2cap_recv+0x5c>
	switch (hdr->code) {
   1ea66:	7803      	ldrb	r3, [r0, #0]
   1ea68:	2b01      	cmp	r3, #1
   1ea6a:	d019      	beq.n	1eaa0 <l2cap_recv+0x5c>
   1ea6c:	2b13      	cmp	r3, #19
   1ea6e:	d017      	beq.n	1eaa0 <l2cap_recv+0x5c>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1ea70:	2202      	movs	r2, #2
   1ea72:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1ea74:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1ea76:	f7ff ff5a 	bl	1e92e <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1ea7a:	4604      	mov	r4, r0
   1ea7c:	b180      	cbz	r0, 1eaa0 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   1ea7e:	2102      	movs	r1, #2
   1ea80:	3008      	adds	r0, #8
   1ea82:	f001 f8d0 	bl	1fc26 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1ea86:	2300      	movs	r3, #0
   1ea88:	7003      	strb	r3, [r0, #0]
   1ea8a:	7043      	strb	r3, [r0, #1]
   1ea8c:	4622      	mov	r2, r4
   1ea8e:	9300      	str	r3, [sp, #0]
   1ea90:	2105      	movs	r1, #5
   1ea92:	4628      	mov	r0, r5
   1ea94:	f7ff ffbd 	bl	1ea12 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1ea98:	b110      	cbz	r0, 1eaa0 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   1ea9a:	4620      	mov	r0, r4
   1ea9c:	f7f8 f80a 	bl	16ab4 <net_buf_unref>
}
   1eaa0:	2000      	movs	r0, #0
   1eaa2:	b003      	add	sp, #12
   1eaa4:	bd30      	pop	{r4, r5, pc}

0001eaa6 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1eaa6:	6d00      	ldr	r0, [r0, #80]	; 0x50
   1eaa8:	b160      	cbz	r0, 1eac4 <bt_l2cap_le_lookup_tx_cid+0x1e>
   1eaaa:	3808      	subs	r0, #8
   1eaac:	b900      	cbnz	r0, 1eab0 <bt_l2cap_le_lookup_tx_cid+0xa>
   1eaae:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1eab0:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
   1eab4:	428b      	cmp	r3, r1
   1eab6:	d005      	beq.n	1eac4 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1eab8:	f110 0308 	adds.w	r3, r0, #8
   1eabc:	d001      	beq.n	1eac2 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1eabe:	6880      	ldr	r0, [r0, #8]
   1eac0:	e7f2      	b.n	1eaa8 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1eac2:	4618      	mov	r0, r3
}
   1eac4:	4770      	bx	lr

0001eac6 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1eac6:	6d00      	ldr	r0, [r0, #80]	; 0x50
   1eac8:	b160      	cbz	r0, 1eae4 <bt_l2cap_le_lookup_rx_cid+0x1e>
   1eaca:	3808      	subs	r0, #8
   1eacc:	b900      	cbnz	r0, 1ead0 <bt_l2cap_le_lookup_rx_cid+0xa>
   1eace:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1ead0:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   1ead4:	428b      	cmp	r3, r1
   1ead6:	d005      	beq.n	1eae4 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ead8:	f110 0308 	adds.w	r3, r0, #8
   1eadc:	d001      	beq.n	1eae2 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1eade:	6880      	ldr	r0, [r0, #8]
   1eae0:	e7f2      	b.n	1eac8 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1eae2:	4618      	mov	r0, r3
}
   1eae4:	4770      	bx	lr

0001eae6 <bt_l2cap_recv>:
{
   1eae6:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1eae8:	898b      	ldrh	r3, [r1, #12]
   1eaea:	2b03      	cmp	r3, #3
{
   1eaec:	4605      	mov	r5, r0
   1eaee:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1eaf0:	d804      	bhi.n	1eafc <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   1eaf2:	4620      	mov	r0, r4
}
   1eaf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1eaf8:	f7f7 bfdc 	b.w	16ab4 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1eafc:	2104      	movs	r1, #4
   1eafe:	f104 0008 	add.w	r0, r4, #8
   1eb02:	f001 f8b8 	bl	1fc76 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1eb06:	8841      	ldrh	r1, [r0, #2]
   1eb08:	4628      	mov	r0, r5
   1eb0a:	f7ff ffdc 	bl	1eac6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1eb0e:	2800      	cmp	r0, #0
   1eb10:	d0ef      	beq.n	1eaf2 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   1eb12:	6843      	ldr	r3, [r0, #4]
   1eb14:	4621      	mov	r1, r4
   1eb16:	691b      	ldr	r3, [r3, #16]
   1eb18:	4798      	blx	r3
   1eb1a:	e7ea      	b.n	1eaf2 <bt_l2cap_recv+0xc>

0001eb1c <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1eb1c:	4770      	bx	lr

0001eb1e <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1eb1e:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   1eb20:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1eb22:	b128      	cbz	r0, 1eb30 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1eb24:	6859      	ldr	r1, [r3, #4]
   1eb26:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1eb28:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1eb2a:	4288      	cmp	r0, r1
	list->tail = node;
   1eb2c:	bf08      	it	eq
   1eb2e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1eb30:	4770      	bx	lr

0001eb32 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1eb32:	4603      	mov	r3, r0
   1eb34:	6800      	ldr	r0, [r0, #0]
   1eb36:	2200      	movs	r2, #0
   1eb38:	b900      	cbnz	r0, 1eb3c <sys_slist_find_and_remove+0xa>
   1eb3a:	4770      	bx	lr
   1eb3c:	4288      	cmp	r0, r1
   1eb3e:	d110      	bne.n	1eb62 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   1eb40:	6808      	ldr	r0, [r1, #0]
   1eb42:	b942      	cbnz	r2, 1eb56 <sys_slist_find_and_remove+0x24>
   1eb44:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1eb46:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1eb48:	4291      	cmp	r1, r2
   1eb4a:	d100      	bne.n	1eb4e <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1eb4c:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1eb4e:	2300      	movs	r3, #0
   1eb50:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1eb52:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   1eb54:	4770      	bx	lr
	parent->next = child;
   1eb56:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1eb58:	6858      	ldr	r0, [r3, #4]
   1eb5a:	4281      	cmp	r1, r0
	list->tail = node;
   1eb5c:	bf08      	it	eq
   1eb5e:	605a      	streq	r2, [r3, #4]
}
   1eb60:	e7f5      	b.n	1eb4e <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1eb62:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1eb64:	6800      	ldr	r0, [r0, #0]
   1eb66:	e7e7      	b.n	1eb38 <sys_slist_find_and_remove+0x6>

0001eb68 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1eb68:	4603      	mov	r3, r0
	size_t bytes = 0;
   1eb6a:	2000      	movs	r0, #0

	while (buf) {
   1eb6c:	b903      	cbnz	r3, 1eb70 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1eb6e:	4770      	bx	lr
		bytes += buf->len;
   1eb70:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1eb72:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1eb74:	4410      	add	r0, r2
		buf = buf->frags;
   1eb76:	e7f9      	b.n	1eb6c <net_buf_frags_len+0x4>

0001eb78 <att_sent>:
	if (chan->ops->sent) {
   1eb78:	684b      	ldr	r3, [r1, #4]
   1eb7a:	695b      	ldr	r3, [r3, #20]
{
   1eb7c:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1eb7e:	b103      	cbz	r3, 1eb82 <att_sent+0xa>
		chan->ops->sent(chan);
   1eb80:	4718      	bx	r3
}
   1eb82:	4770      	bx	lr

0001eb84 <attr_read_type_cb>:
{
   1eb84:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1eb86:	68d4      	ldr	r4, [r2, #12]
   1eb88:	7823      	ldrb	r3, [r4, #0]
   1eb8a:	3102      	adds	r1, #2
   1eb8c:	b913      	cbnz	r3, 1eb94 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1eb8e:	7021      	strb	r1, [r4, #0]
	return true;
   1eb90:	2001      	movs	r0, #1
   1eb92:	e006      	b.n	1eba2 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1eb94:	428b      	cmp	r3, r1
   1eb96:	d0fb      	beq.n	1eb90 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1eb98:	8983      	ldrh	r3, [r0, #12]
   1eb9a:	3b02      	subs	r3, #2
   1eb9c:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1eb9e:	2000      	movs	r0, #0
   1eba0:	6110      	str	r0, [r2, #16]
}
   1eba2:	bd10      	pop	{r4, pc}

0001eba4 <att_prepare_write_req>:
}
   1eba4:	2006      	movs	r0, #6
   1eba6:	4770      	bx	lr

0001eba8 <att_op_get_type>:
	switch (op) {
   1eba8:	281e      	cmp	r0, #30
   1ebaa:	d816      	bhi.n	1ebda <att_op_get_type+0x32>
   1ebac:	b308      	cbz	r0, 1ebf2 <att_op_get_type+0x4a>
   1ebae:	1e43      	subs	r3, r0, #1
   1ebb0:	2b1d      	cmp	r3, #29
   1ebb2:	d81e      	bhi.n	1ebf2 <att_op_get_type+0x4a>
   1ebb4:	e8df f003 	tbb	[pc, r3]
   1ebb8:	23172317 	.word	0x23172317
   1ebbc:	23172317 	.word	0x23172317
   1ebc0:	23172317 	.word	0x23172317
   1ebc4:	23172317 	.word	0x23172317
   1ebc8:	1d172317 	.word	0x1d172317
   1ebcc:	2317231d 	.word	0x2317231d
   1ebd0:	1d191d17 	.word	0x1d191d17
   1ebd4:	0f1b      	.short	0x0f1b
   1ebd6:	2004      	movs	r0, #4
   1ebd8:	4770      	bx	lr
   1ebda:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1ebde:	2b52      	cmp	r3, #82	; 0x52
   1ebe0:	d107      	bne.n	1ebf2 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1ebe2:	2000      	movs	r0, #0
}
   1ebe4:	4770      	bx	lr
		return ATT_RESPONSE;
   1ebe6:	2002      	movs	r0, #2
   1ebe8:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1ebea:	2003      	movs	r0, #3
   1ebec:	4770      	bx	lr
		return ATT_INDICATION;
   1ebee:	2005      	movs	r0, #5
   1ebf0:	4770      	bx	lr
		return ATT_COMMAND;
   1ebf2:	f010 0f40 	tst.w	r0, #64	; 0x40
   1ebf6:	bf0c      	ite	eq
   1ebf8:	2006      	moveq	r0, #6
   1ebfa:	2000      	movne	r0, #0
   1ebfc:	4770      	bx	lr
		return ATT_REQUEST;
   1ebfe:	2001      	movs	r0, #1
   1ec00:	4770      	bx	lr

0001ec02 <bt_gatt_foreach_attr>:
{
   1ec02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1ec04:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1ec08:	2300      	movs	r3, #0
   1ec0a:	9300      	str	r3, [sp, #0]
   1ec0c:	461a      	mov	r2, r3
   1ec0e:	f7f7 fb47 	bl	162a0 <bt_gatt_foreach_attr_type>
}
   1ec12:	b005      	add	sp, #20
   1ec14:	f85d fb04 	ldr.w	pc, [sp], #4

0001ec18 <att_chan_read>:
{
   1ec18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ec1c:	4680      	mov	r8, r0
   1ec1e:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1ec20:	4610      	mov	r0, r2
{
   1ec22:	4699      	mov	r9, r3
   1ec24:	468b      	mov	fp, r1
   1ec26:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1ec28:	f7ff ff9e 	bl	1eb68 <net_buf_frags_len>
   1ec2c:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
   1ec30:	4283      	cmp	r3, r0
   1ec32:	d97a      	bls.n	1ed2a <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1ec34:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1ec38:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1ec3a:	4630      	mov	r0, r6
   1ec3c:	f000 ffd1 	bl	1fbe2 <net_buf_frag_last>
	size_t len, total = 0;
   1ec40:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1ec44:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1ec46:	4630      	mov	r0, r6
   1ec48:	f7ff ff8e 	bl	1eb68 <net_buf_frags_len>
   1ec4c:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   1ec50:	f105 0708 	add.w	r7, r5, #8
   1ec54:	1a24      	subs	r4, r4, r0
   1ec56:	4638      	mov	r0, r7
   1ec58:	f001 f821 	bl	1fc9e <net_buf_simple_tailroom>
   1ec5c:	4284      	cmp	r4, r0
   1ec5e:	d211      	bcs.n	1ec84 <att_chan_read+0x6c>
   1ec60:	4630      	mov	r0, r6
   1ec62:	f7ff ff81 	bl	1eb68 <net_buf_frags_len>
   1ec66:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   1ec6a:	1a24      	subs	r4, r4, r0
		if (!len) {
   1ec6c:	bb34      	cbnz	r4, 1ecbc <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1ec6e:	79b0      	ldrb	r0, [r6, #6]
   1ec70:	f7f7 fe64 	bl	1693c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1ec74:	2200      	movs	r2, #0
   1ec76:	2300      	movs	r3, #0
   1ec78:	f000 ff7f 	bl	1fb7a <net_buf_alloc_fixed>
			if (!frag) {
   1ec7c:	4605      	mov	r5, r0
   1ec7e:	b930      	cbnz	r0, 1ec8e <att_chan_read+0x76>
	return total;
   1ec80:	4657      	mov	r7, sl
   1ec82:	e02c      	b.n	1ecde <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1ec84:	4638      	mov	r0, r7
   1ec86:	f001 f80a 	bl	1fc9e <net_buf_simple_tailroom>
   1ec8a:	4604      	mov	r4, r0
   1ec8c:	e7ee      	b.n	1ec6c <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1ec8e:	4601      	mov	r1, r0
   1ec90:	4630      	mov	r0, r6
   1ec92:	f000 ffb7 	bl	1fc04 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1ec96:	4630      	mov	r0, r6
   1ec98:	f7ff ff66 	bl	1eb68 <net_buf_frags_len>
   1ec9c:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   1eca0:	f105 0708 	add.w	r7, r5, #8
   1eca4:	1a24      	subs	r4, r4, r0
   1eca6:	4638      	mov	r0, r7
   1eca8:	f000 fff9 	bl	1fc9e <net_buf_simple_tailroom>
   1ecac:	4284      	cmp	r4, r0
   1ecae:	d21a      	bcs.n	1ece6 <att_chan_read+0xce>
   1ecb0:	4630      	mov	r0, r6
   1ecb2:	f7ff ff59 	bl	1eb68 <net_buf_frags_len>
   1ecb6:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   1ecba:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1ecbc:	68a9      	ldr	r1, [r5, #8]
   1ecbe:	89aa      	ldrh	r2, [r5, #12]
   1ecc0:	f8db 7004 	ldr.w	r7, [fp, #4]
   1ecc4:	9803      	ldr	r0, [sp, #12]
   1ecc6:	f8cd 9000 	str.w	r9, [sp]
   1ecca:	440a      	add	r2, r1
   1eccc:	b2a3      	uxth	r3, r4
   1ecce:	4659      	mov	r1, fp
   1ecd0:	47b8      	blx	r7
		if (read < 0) {
   1ecd2:	1e07      	subs	r7, r0, #0
   1ecd4:	da0c      	bge.n	1ecf0 <att_chan_read+0xd8>
				return total;
   1ecd6:	f1ba 0f00 	cmp.w	sl, #0
   1ecda:	bf18      	it	ne
   1ecdc:	4657      	movne	r7, sl
}
   1ecde:	4638      	mov	r0, r7
   1ece0:	b005      	add	sp, #20
   1ece2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ece6:	4638      	mov	r0, r7
   1ece8:	f000 ffd9 	bl	1fc9e <net_buf_simple_tailroom>
   1ecec:	4604      	mov	r4, r0
   1ecee:	e7e5      	b.n	1ecbc <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1ecf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ecf2:	b993      	cbnz	r3, 1ed1a <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1ecf4:	4639      	mov	r1, r7
   1ecf6:	f105 0008 	add.w	r0, r5, #8
   1ecfa:	f000 ff94 	bl	1fc26 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1ecfe:	4630      	mov	r0, r6
   1ed00:	f7ff ff32 	bl	1eb68 <net_buf_frags_len>
   1ed04:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
		offset += read;
   1ed08:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1ed0a:	4283      	cmp	r3, r0
		total += read;
   1ed0c:	44ba      	add	sl, r7
		offset += read;
   1ed0e:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1ed12:	d9b5      	bls.n	1ec80 <att_chan_read+0x68>
   1ed14:	42a7      	cmp	r7, r4
   1ed16:	d096      	beq.n	1ec46 <att_chan_read+0x2e>
   1ed18:	e7b2      	b.n	1ec80 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1ed1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1ed1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ed1e:	4639      	mov	r1, r7
   1ed20:	4628      	mov	r0, r5
   1ed22:	4798      	blx	r3
   1ed24:	2800      	cmp	r0, #0
   1ed26:	d1e5      	bne.n	1ecf4 <att_chan_read+0xdc>
   1ed28:	e7aa      	b.n	1ec80 <att_chan_read+0x68>
		return 0;
   1ed2a:	2700      	movs	r7, #0
   1ed2c:	e7d7      	b.n	1ecde <att_chan_read+0xc6>

0001ed2e <find_type_cb>:
{
   1ed2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   1ed32:	f8d2 9000 	ldr.w	r9, [r2]
{
   1ed36:	b091      	sub	sp, #68	; 0x44
   1ed38:	4607      	mov	r7, r0
   1ed3a:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ed3c:	2500      	movs	r5, #0
   1ed3e:	f642 0301 	movw	r3, #10241	; 0x2801
   1ed42:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1ed44:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ed48:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1ed4c:	a90b      	add	r1, sp, #44	; 0x2c
{
   1ed4e:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ed50:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1ed54:	f7fe fff2 	bl	1dd3c <bt_uuid_cmp>
   1ed58:	2800      	cmp	r0, #0
   1ed5a:	d079      	beq.n	1ee50 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1ed5c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1ed60:	6838      	ldr	r0, [r7, #0]
   1ed62:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1ed66:	a90b      	add	r1, sp, #44	; 0x2c
   1ed68:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1ed6c:	f7fe ffe6 	bl	1dd3c <bt_uuid_cmp>
   1ed70:	b138      	cbz	r0, 1ed82 <find_type_cb+0x54>
		if (data->group &&
   1ed72:	68a3      	ldr	r3, [r4, #8]
   1ed74:	b11b      	cbz	r3, 1ed7e <find_type_cb+0x50>
   1ed76:	885a      	ldrh	r2, [r3, #2]
   1ed78:	42b2      	cmp	r2, r6
   1ed7a:	d200      	bcs.n	1ed7e <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1ed7c:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1ed7e:	2001      	movs	r0, #1
   1ed80:	e009      	b.n	1ed96 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1ed82:	6861      	ldr	r1, [r4, #4]
   1ed84:	4608      	mov	r0, r1
   1ed86:	f7ff feef 	bl	1eb68 <net_buf_frags_len>
   1ed8a:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
   1ed8e:	1a1b      	subs	r3, r3, r0
   1ed90:	2b03      	cmp	r3, #3
   1ed92:	d803      	bhi.n	1ed9c <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1ed94:	2000      	movs	r0, #0
}
   1ed96:	b011      	add	sp, #68	; 0x44
   1ed98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1ed9c:	4608      	mov	r0, r1
   1ed9e:	f000 ff20 	bl	1fbe2 <net_buf_frag_last>
   1eda2:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1eda4:	6860      	ldr	r0, [r4, #4]
   1eda6:	f7ff fedf 	bl	1eb68 <net_buf_frags_len>
   1edaa:	f8b9 a086 	ldrh.w	sl, [r9, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   1edae:	f105 0b08 	add.w	fp, r5, #8
   1edb2:	ebaa 0a00 	sub.w	sl, sl, r0
   1edb6:	4658      	mov	r0, fp
   1edb8:	f000 ff71 	bl	1fc9e <net_buf_simple_tailroom>
   1edbc:	4582      	cmp	sl, r0
   1edbe:	d23f      	bcs.n	1ee40 <find_type_cb+0x112>
   1edc0:	6860      	ldr	r0, [r4, #4]
   1edc2:	f7ff fed1 	bl	1eb68 <net_buf_frags_len>
   1edc6:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
   1edca:	1a18      	subs	r0, r3, r0
	if (!len) {
   1edcc:	b970      	cbnz	r0, 1edec <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1edce:	6863      	ldr	r3, [r4, #4]
   1edd0:	7998      	ldrb	r0, [r3, #6]
   1edd2:	f7f7 fdb3 	bl	1693c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1edd6:	2200      	movs	r2, #0
   1edd8:	2300      	movs	r3, #0
   1edda:	f000 fece 	bl	1fb7a <net_buf_alloc_fixed>
		if (!frag) {
   1edde:	4605      	mov	r5, r0
   1ede0:	2800      	cmp	r0, #0
   1ede2:	d0d7      	beq.n	1ed94 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1ede4:	4601      	mov	r1, r0
   1ede6:	6860      	ldr	r0, [r4, #4]
   1ede8:	f000 ff0c 	bl	1fc04 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1edec:	2300      	movs	r3, #0
   1edee:	9300      	str	r3, [sp, #0]
   1edf0:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1edf4:	4639      	mov	r1, r7
   1edf6:	2310      	movs	r3, #16
   1edf8:	aa02      	add	r2, sp, #8
   1edfa:	4640      	mov	r0, r8
   1edfc:	47c8      	blx	r9
	if (read < 0) {
   1edfe:	1e07      	subs	r7, r0, #0
   1ee00:	db26      	blt.n	1ee50 <find_type_cb+0x122>
	if (read != data->value_len) {
   1ee02:	7c22      	ldrb	r2, [r4, #16]
   1ee04:	68e0      	ldr	r0, [r4, #12]
   1ee06:	42ba      	cmp	r2, r7
   1ee08:	d01e      	beq.n	1ee48 <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1ee0a:	4601      	mov	r1, r0
   1ee0c:	a80b      	add	r0, sp, #44	; 0x2c
   1ee0e:	f7fe ffbf 	bl	1dd90 <bt_uuid_create>
   1ee12:	b1e8      	cbz	r0, 1ee50 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1ee14:	b2fa      	uxtb	r2, r7
   1ee16:	a902      	add	r1, sp, #8
   1ee18:	a806      	add	r0, sp, #24
   1ee1a:	f7fe ffb9 	bl	1dd90 <bt_uuid_create>
   1ee1e:	b1b8      	cbz	r0, 1ee50 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1ee20:	a906      	add	r1, sp, #24
   1ee22:	a80b      	add	r0, sp, #44	; 0x2c
   1ee24:	f7fe ff8a 	bl	1dd3c <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1ee28:	b990      	cbnz	r0, 1ee50 <find_type_cb+0x122>
	data->err = 0x00;
   1ee2a:	2300      	movs	r3, #0
   1ee2c:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1ee2e:	2104      	movs	r1, #4
   1ee30:	f105 0008 	add.w	r0, r5, #8
   1ee34:	f000 fef7 	bl	1fc26 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1ee38:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1ee3a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1ee3c:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1ee3e:	e79e      	b.n	1ed7e <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1ee40:	4658      	mov	r0, fp
   1ee42:	f000 ff2c 	bl	1fc9e <net_buf_simple_tailroom>
   1ee46:	e7c1      	b.n	1edcc <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   1ee48:	a902      	add	r1, sp, #8
   1ee4a:	f001 fe08 	bl	20a5e <memcmp>
   1ee4e:	e7eb      	b.n	1ee28 <find_type_cb+0xfa>
	data->group = NULL;
   1ee50:	2300      	movs	r3, #0
   1ee52:	60a3      	str	r3, [r4, #8]
   1ee54:	e793      	b.n	1ed7e <find_type_cb+0x50>

0001ee56 <att_chan_mtu_updated>:
{
   1ee56:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   1ee58:	6806      	ldr	r6, [r0, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ee5a:	6a72      	ldr	r2, [r6, #36]	; 0x24
   1ee5c:	b30a      	cbz	r2, 1eea2 <att_chan_mtu_updated+0x4c>
   1ee5e:	f5b2 74a2 	subs.w	r4, r2, #324	; 0x144
   1ee62:	d01d      	beq.n	1eea0 <att_chan_mtu_updated+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ee64:	6813      	ldr	r3, [r2, #0]
   1ee66:	b10b      	cbz	r3, 1ee6c <att_chan_mtu_updated+0x16>
   1ee68:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1ee6c:	2200      	movs	r2, #0
   1ee6e:	4611      	mov	r1, r2
		if (chan == updated_chan) {
   1ee70:	42a0      	cmp	r0, r4
   1ee72:	d009      	beq.n	1ee88 <att_chan_mtu_updated+0x32>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1ee74:	f8b4 5086 	ldrh.w	r5, [r4, #134]	; 0x86
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1ee78:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1ee7c:	42a9      	cmp	r1, r5
   1ee7e:	bf38      	it	cc
   1ee80:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1ee82:	42a2      	cmp	r2, r4
   1ee84:	bf38      	it	cc
   1ee86:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ee88:	b163      	cbz	r3, 1eea4 <att_chan_mtu_updated+0x4e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ee8a:	f513 75a2 	adds.w	r5, r3, #324	; 0x144
   1ee8e:	d004      	beq.n	1ee9a <att_chan_mtu_updated+0x44>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ee90:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
   1ee94:	b10d      	cbz	r5, 1ee9a <att_chan_mtu_updated+0x44>
   1ee96:	f5a5 75a2 	sub.w	r5, r5, #324	; 0x144
{
   1ee9a:	461c      	mov	r4, r3
   1ee9c:	462b      	mov	r3, r5
   1ee9e:	e7e7      	b.n	1ee70 <att_chan_mtu_updated+0x1a>
   1eea0:	4622      	mov	r2, r4
   1eea2:	4611      	mov	r1, r2
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1eea4:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
   1eea8:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
   1eeac:	428b      	cmp	r3, r1
   1eeae:	d801      	bhi.n	1eeb4 <att_chan_mtu_updated+0x5e>
   1eeb0:	4290      	cmp	r0, r2
   1eeb2:	d909      	bls.n	1eec8 <att_chan_mtu_updated+0x72>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1eeb4:	4282      	cmp	r2, r0
   1eeb6:	bf38      	it	cc
   1eeb8:	4602      	movcc	r2, r0
   1eeba:	4299      	cmp	r1, r3
   1eebc:	6830      	ldr	r0, [r6, #0]
   1eebe:	bf38      	it	cc
   1eec0:	4619      	movcc	r1, r3
}
   1eec2:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1eec4:	f7f7 bcbe 	b.w	16844 <bt_gatt_att_max_mtu_changed>
}
   1eec8:	bc70      	pop	{r4, r5, r6}
   1eeca:	4770      	bx	lr

0001eecc <attr_read_group_cb>:
	if (!data->rsp->len) {
   1eecc:	68d0      	ldr	r0, [r2, #12]
   1eece:	7803      	ldrb	r3, [r0, #0]
   1eed0:	3104      	adds	r1, #4
   1eed2:	b913      	cbnz	r3, 1eeda <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1eed4:	7001      	strb	r1, [r0, #0]
	return true;
   1eed6:	2001      	movs	r0, #1
}
   1eed8:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1eeda:	428b      	cmp	r3, r1
   1eedc:	d0fb      	beq.n	1eed6 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1eede:	6891      	ldr	r1, [r2, #8]
   1eee0:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   1eee2:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1eee4:	3b04      	subs	r3, #4
   1eee6:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1eee8:	6110      	str	r0, [r2, #16]
		return false;
   1eeea:	4770      	bx	lr

0001eeec <chan_req_send>:
{
   1eeec:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1eeee:	688e      	ldr	r6, [r1, #8]
{
   1eef0:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1eef2:	4630      	mov	r0, r6
{
   1eef4:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1eef6:	f7ff fe37 	bl	1eb68 <net_buf_frags_len>
   1eefa:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
   1eefe:	4283      	cmp	r3, r0
   1ef00:	d30a      	bcc.n	1ef18 <chan_req_send+0x2c>
	req->buf = NULL;
   1ef02:	2200      	movs	r2, #0
	chan->req = req;
   1ef04:	f8c5 10f4 	str.w	r1, [r5, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   1ef08:	4628      	mov	r0, r5
	req->buf = NULL;
   1ef0a:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   1ef0c:	4631      	mov	r1, r6
   1ef0e:	f7f6 fbc7 	bl	156a0 <chan_send>
	if (err) {
   1ef12:	b100      	cbz	r0, 1ef16 <chan_req_send+0x2a>
		req->buf = buf;
   1ef14:	60a6      	str	r6, [r4, #8]
}
   1ef16:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1ef18:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1ef1c:	e7fb      	b.n	1ef16 <chan_req_send+0x2a>

0001ef1e <process_queue>:
{
   1ef1e:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1ef20:	2200      	movs	r2, #0
{
   1ef22:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1ef24:	2300      	movs	r3, #0
   1ef26:	4608      	mov	r0, r1
{
   1ef28:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1ef2a:	f000 fe2b 	bl	1fb84 <net_buf_get>
	if (buf) {
   1ef2e:	4605      	mov	r5, r0
   1ef30:	b160      	cbz	r0, 1ef4c <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1ef32:	4601      	mov	r1, r0
   1ef34:	2200      	movs	r2, #0
   1ef36:	4620      	mov	r0, r4
   1ef38:	f7f6 fbb2 	bl	156a0 <chan_send>
		if (err) {
   1ef3c:	4604      	mov	r4, r0
   1ef3e:	b118      	cbz	r0, 1ef48 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1ef40:	4629      	mov	r1, r5
   1ef42:	4630      	mov	r0, r6
   1ef44:	f001 f997 	bl	20276 <k_queue_prepend>
}
   1ef48:	4620      	mov	r0, r4
   1ef4a:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1ef4c:	f06f 0401 	mvn.w	r4, #1
   1ef50:	e7fa      	b.n	1ef48 <process_queue+0x2a>

0001ef52 <chan_req_sent>:
	if (chan->req) {
   1ef52:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1ef56:	b133      	cbz	r3, 1ef66 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1ef58:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1ef5c:	2300      	movs	r3, #0
   1ef5e:	f500 7088 	add.w	r0, r0, #272	; 0x110
   1ef62:	f7fa b9eb 	b.w	1933c <k_work_reschedule>
}
   1ef66:	4770      	bx	lr

0001ef68 <find_info_cb>:
{
   1ef68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1ef6a:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1ef6c:	6816      	ldr	r6, [r2, #0]
{
   1ef6e:	4605      	mov	r5, r0
   1ef70:	460f      	mov	r7, r1
   1ef72:	4614      	mov	r4, r2
	if (!data->rsp) {
   1ef74:	b963      	cbnz	r3, 1ef90 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1ef76:	6850      	ldr	r0, [r2, #4]
   1ef78:	2101      	movs	r1, #1
   1ef7a:	3008      	adds	r0, #8
   1ef7c:	f000 fe53 	bl	1fc26 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1ef80:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1ef82:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1ef84:	781b      	ldrb	r3, [r3, #0]
   1ef86:	2b00      	cmp	r3, #0
   1ef88:	bf0c      	ite	eq
   1ef8a:	2301      	moveq	r3, #1
   1ef8c:	2302      	movne	r3, #2
   1ef8e:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1ef90:	68a3      	ldr	r3, [r4, #8]
   1ef92:	781b      	ldrb	r3, [r3, #0]
   1ef94:	2b01      	cmp	r3, #1
   1ef96:	d003      	beq.n	1efa0 <find_info_cb+0x38>
   1ef98:	2b02      	cmp	r3, #2
   1ef9a:	d019      	beq.n	1efd0 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1ef9c:	2000      	movs	r0, #0
   1ef9e:	e016      	b.n	1efce <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1efa0:	682b      	ldr	r3, [r5, #0]
   1efa2:	781b      	ldrb	r3, [r3, #0]
   1efa4:	2b00      	cmp	r3, #0
   1efa6:	d1f9      	bne.n	1ef9c <find_info_cb+0x34>
   1efa8:	6860      	ldr	r0, [r4, #4]
   1efaa:	2104      	movs	r1, #4
   1efac:	3008      	adds	r0, #8
   1efae:	f000 fe3a 	bl	1fc26 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1efb2:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1efb4:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1efb6:	885b      	ldrh	r3, [r3, #2]
   1efb8:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1efba:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   1efbc:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   1efbe:	899b      	ldrh	r3, [r3, #12]
   1efc0:	f8b6 0086 	ldrh.w	r0, [r6, #134]	; 0x86
   1efc4:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1efc6:	2804      	cmp	r0, #4
   1efc8:	bf94      	ite	ls
   1efca:	2000      	movls	r0, #0
   1efcc:	2001      	movhi	r0, #1
}
   1efce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1efd0:	682b      	ldr	r3, [r5, #0]
   1efd2:	781b      	ldrb	r3, [r3, #0]
   1efd4:	2b02      	cmp	r3, #2
   1efd6:	d1e1      	bne.n	1ef9c <find_info_cb+0x34>
   1efd8:	6860      	ldr	r0, [r4, #4]
   1efda:	2112      	movs	r1, #18
   1efdc:	3008      	adds	r0, #8
   1efde:	f000 fe22 	bl	1fc26 <net_buf_simple_add>
   1efe2:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1efe4:	682a      	ldr	r2, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1efe6:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   1efe8:	f823 7b02 	strh.w	r7, [r3], #2
   1efec:	1c51      	adds	r1, r2, #1
   1efee:	3211      	adds	r2, #17
   1eff0:	f851 0b04 	ldr.w	r0, [r1], #4
   1eff4:	f843 0b04 	str.w	r0, [r3], #4
   1eff8:	4291      	cmp	r1, r2
   1effa:	d1f9      	bne.n	1eff0 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   1effc:	6863      	ldr	r3, [r4, #4]
   1effe:	f8b6 0086 	ldrh.w	r0, [r6, #134]	; 0x86
   1f002:	899b      	ldrh	r3, [r3, #12]
   1f004:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1f006:	2812      	cmp	r0, #18
   1f008:	e7de      	b.n	1efc8 <find_info_cb+0x60>

0001f00a <att_exec_write_req>:
   1f00a:	2006      	movs	r0, #6
   1f00c:	4770      	bx	lr

0001f00e <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f00e:	30f0      	adds	r0, #240	; 0xf0
   1f010:	f3bf 8f5b 	dmb	ish
   1f014:	e850 3f00 	ldrex	r3, [r0]
   1f018:	f023 0301 	bic.w	r3, r3, #1
   1f01c:	e840 3200 	strex	r2, r3, [r0]
   1f020:	2a00      	cmp	r2, #0
   1f022:	d1f7      	bne.n	1f014 <chan_rsp_sent+0x6>
   1f024:	f3bf 8f5b 	dmb	ish
}
   1f028:	4770      	bx	lr

0001f02a <chan_cfm_sent>:
   1f02a:	30f0      	adds	r0, #240	; 0xf0
   1f02c:	f3bf 8f5b 	dmb	ish
   1f030:	e850 3f00 	ldrex	r3, [r0]
   1f034:	f023 0302 	bic.w	r3, r3, #2
   1f038:	e840 3200 	strex	r2, r3, [r0]
   1f03c:	2a00      	cmp	r2, #0
   1f03e:	d1f7      	bne.n	1f030 <chan_cfm_sent+0x6>
   1f040:	f3bf 8f5b 	dmb	ish
}
   1f044:	4770      	bx	lr

0001f046 <att_get>:
{
   1f046:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1f048:	7a83      	ldrb	r3, [r0, #10]
   1f04a:	2b07      	cmp	r3, #7
   1f04c:	d001      	beq.n	1f052 <att_get+0xc>
		return NULL;
   1f04e:	2000      	movs	r0, #0
}
   1f050:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1f052:	2104      	movs	r1, #4
   1f054:	f7ff fd37 	bl	1eac6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1f058:	2800      	cmp	r0, #0
   1f05a:	d0f8      	beq.n	1f04e <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f05c:	f3bf 8f5b 	dmb	ish
   1f060:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   1f064:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1f068:	075b      	lsls	r3, r3, #29
   1f06a:	d4f0      	bmi.n	1f04e <att_get+0x8>
	return att_chan->att;
   1f06c:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1f070:	e7ee      	b.n	1f050 <att_get+0xa>

0001f072 <bt_att_status>:
{
   1f072:	b538      	push	{r3, r4, r5, lr}
   1f074:	f3bf 8f5b 	dmb	ish
   1f078:	680b      	ldr	r3, [r1, #0]
   1f07a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1f07e:	07db      	lsls	r3, r3, #31
{
   1f080:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1f082:	d519      	bpl.n	1f0b8 <bt_att_status+0x46>
	if (!chan->att) {
   1f084:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1f088:	b1b0      	cbz	r0, 1f0b8 <bt_att_status+0x46>
	if (chan->req) {
   1f08a:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1f08e:	b99b      	cbnz	r3, 1f0b8 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   1f090:	3004      	adds	r0, #4
   1f092:	f7ff fd44 	bl	1eb1e <sys_slist_get>
	if (!node) {
   1f096:	4604      	mov	r4, r0
   1f098:	b170      	cbz	r0, 1f0b8 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   1f09a:	4601      	mov	r1, r0
   1f09c:	f1a5 0008 	sub.w	r0, r5, #8
   1f0a0:	f7ff ff24 	bl	1eeec <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f0a4:	2800      	cmp	r0, #0
   1f0a6:	da07      	bge.n	1f0b8 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   1f0a8:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   1f0ac:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1f0ae:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f0b0:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1f0b2:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f0b4:	b902      	cbnz	r2, 1f0b8 <bt_att_status+0x46>
	list->tail = node;
   1f0b6:	609c      	str	r4, [r3, #8]
}
   1f0b8:	bd38      	pop	{r3, r4, r5, pc}

0001f0ba <att_req_send_process>:
{
   1f0ba:	b570      	push	{r4, r5, r6, lr}
   1f0bc:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1f0be:	3004      	adds	r0, #4
   1f0c0:	f7ff fd2d 	bl	1eb1e <sys_slist_get>
	if (!node) {
   1f0c4:	4606      	mov	r6, r0
   1f0c6:	b1c0      	cbz	r0, 1f0fa <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f0c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1f0ca:	b153      	cbz	r3, 1f0e2 <att_req_send_process+0x28>
   1f0cc:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   1f0d0:	d007      	beq.n	1f0e2 <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f0d2:	681c      	ldr	r4, [r3, #0]
   1f0d4:	b10c      	cbz	r4, 1f0da <att_req_send_process+0x20>
   1f0d6:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
		if (!chan->req) {
   1f0da:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1f0de:	b13b      	cbz	r3, 1f0f0 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f0e0:	b964      	cbnz	r4, 1f0fc <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   1f0e2:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1f0e4:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f0e6:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1f0e8:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f0ea:	b933      	cbnz	r3, 1f0fa <att_req_send_process+0x40>
	list->tail = node;
   1f0ec:	60ae      	str	r6, [r5, #8]
}
   1f0ee:	e004      	b.n	1f0fa <att_req_send_process+0x40>
	return chan_req_send(chan, req);
   1f0f0:	4631      	mov	r1, r6
   1f0f2:	f7ff fefb 	bl	1eeec <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f0f6:	2800      	cmp	r0, #0
   1f0f8:	dbf2      	blt.n	1f0e0 <att_req_send_process+0x26>
}
   1f0fa:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f0fc:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   1f100:	d004      	beq.n	1f10c <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f102:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f106:	b10b      	cbz	r3, 1f10c <att_req_send_process+0x52>
   1f108:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1f10c:	4620      	mov	r0, r4
   1f10e:	461c      	mov	r4, r3
   1f110:	e7e3      	b.n	1f0da <att_req_send_process+0x20>

0001f112 <write_cb>:
{
   1f112:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f114:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1f116:	4601      	mov	r1, r0
{
   1f118:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1f11a:	222a      	movs	r2, #42	; 0x2a
   1f11c:	6820      	ldr	r0, [r4, #0]
   1f11e:	f000 fc78 	bl	1fa12 <bt_gatt_check_perm>
   1f122:	4605      	mov	r5, r0
   1f124:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1f126:	bb00      	cbnz	r0, 1f16a <write_cb+0x58>
	if (!data->req) {
   1f128:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1f12a:	68b7      	ldr	r7, [r6, #8]
   1f12c:	68e2      	ldr	r2, [r4, #12]
   1f12e:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   1f130:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1f132:	bf14      	ite	ne
   1f134:	2300      	movne	r3, #0
   1f136:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1f138:	9301      	str	r3, [sp, #4]
   1f13a:	8a63      	ldrh	r3, [r4, #18]
   1f13c:	9300      	str	r3, [sp, #0]
   1f13e:	4631      	mov	r1, r6
   1f140:	8a23      	ldrh	r3, [r4, #16]
   1f142:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1f144:	1e03      	subs	r3, r0, #0
   1f146:	db05      	blt.n	1f154 <write_cb+0x42>
   1f148:	8a22      	ldrh	r2, [r4, #16]
   1f14a:	4293      	cmp	r3, r2
   1f14c:	d10b      	bne.n	1f166 <write_cb+0x54>
	data->err = 0U;
   1f14e:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1f150:	2501      	movs	r5, #1
   1f152:	e005      	b.n	1f160 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1f154:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1f158:	d305      	bcc.n	1f166 <write_cb+0x54>
		return -err;
   1f15a:	425b      	negs	r3, r3
   1f15c:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1f15e:	7523      	strb	r3, [r4, #20]
}
   1f160:	4628      	mov	r0, r5
   1f162:	b003      	add	sp, #12
   1f164:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1f166:	230e      	movs	r3, #14
   1f168:	e7f9      	b.n	1f15e <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1f16a:	2500      	movs	r5, #0
   1f16c:	e7f8      	b.n	1f160 <write_cb+0x4e>

0001f16e <bt_att_sent>:
{
   1f16e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1f170:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   1f174:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   1f178:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1f17a:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1f17e:	b10b      	cbz	r3, 1f184 <bt_att_sent+0x16>
		chan->sent(chan);
   1f180:	4638      	mov	r0, r7
   1f182:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f184:	f3bf 8f5b 	dmb	ish
   1f188:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   1f18c:	e853 2f00 	ldrex	r2, [r3]
   1f190:	f022 0210 	bic.w	r2, r2, #16
   1f194:	e843 2100 	strex	r1, r2, [r3]
   1f198:	2900      	cmp	r1, #0
   1f19a:	d1f7      	bne.n	1f18c <bt_att_sent+0x1e>
   1f19c:	f3bf 8f5b 	dmb	ish
	if (!att) {
   1f1a0:	b30c      	cbz	r4, 1f1e6 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1f1a2:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1f1a6:	b98b      	cbnz	r3, 1f1cc <bt_att_sent+0x5e>
   1f1a8:	6863      	ldr	r3, [r4, #4]
   1f1aa:	b17b      	cbz	r3, 1f1cc <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1f1ac:	1d20      	adds	r0, r4, #4
   1f1ae:	f7ff fcb6 	bl	1eb1e <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f1b2:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1f1b4:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f1b6:	4638      	mov	r0, r7
   1f1b8:	f7ff fe98 	bl	1eeec <chan_req_send>
   1f1bc:	2800      	cmp	r0, #0
   1f1be:	da12      	bge.n	1f1e6 <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   1f1c0:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1f1c2:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f1c4:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1f1c6:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f1c8:	b903      	cbnz	r3, 1f1cc <bt_att_sent+0x5e>
	list->tail = node;
   1f1ca:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1f1cc:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   1f1d0:	4638      	mov	r0, r7
   1f1d2:	f7ff fea4 	bl	1ef1e <process_queue>
	if (!err) {
   1f1d6:	b130      	cbz	r0, 1f1e6 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   1f1d8:	f104 010c 	add.w	r1, r4, #12
   1f1dc:	4638      	mov	r0, r7
}
   1f1de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1f1e2:	f7ff be9c 	b.w	1ef1e <process_queue>
}
   1f1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f1e8 <read_cb>:
{
   1f1e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1f1ec:	f8d2 8000 	ldr.w	r8, [r2]
{
   1f1f0:	4606      	mov	r6, r0
	data->err = 0x00;
   1f1f2:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1f1f4:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   1f1f8:	7317      	strb	r7, [r2, #12]
{
   1f1fa:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1f1fc:	4631      	mov	r1, r6
   1f1fe:	2215      	movs	r2, #21
   1f200:	f000 fc07 	bl	1fa12 <bt_gatt_check_perm>
   1f204:	4604      	mov	r4, r0
   1f206:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1f208:	b9a0      	cbnz	r0, 1f234 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1f20a:	e9cd 0000 	strd	r0, r0, [sp]
   1f20e:	88ab      	ldrh	r3, [r5, #4]
   1f210:	68aa      	ldr	r2, [r5, #8]
   1f212:	4631      	mov	r1, r6
   1f214:	4640      	mov	r0, r8
   1f216:	f7ff fcff 	bl	1ec18 <att_chan_read>
	if (ret < 0) {
   1f21a:	1e03      	subs	r3, r0, #0
   1f21c:	da0c      	bge.n	1f238 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1f21e:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1f222:	bf26      	itte	cs
   1f224:	425b      	negcs	r3, r3
   1f226:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1f228:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   1f22a:	732b      	strb	r3, [r5, #12]
}
   1f22c:	4620      	mov	r0, r4
   1f22e:	b002      	add	sp, #8
   1f230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1f234:	463c      	mov	r4, r7
   1f236:	e7f9      	b.n	1f22c <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1f238:	2401      	movs	r4, #1
   1f23a:	e7f7      	b.n	1f22c <read_cb+0x44>

0001f23c <bt_att_chan_create_pdu>:
{
   1f23c:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1f23e:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
   1f242:	3201      	adds	r2, #1
   1f244:	429a      	cmp	r2, r3
{
   1f246:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1f248:	d81b      	bhi.n	1f282 <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   1f24a:	4608      	mov	r0, r1
   1f24c:	f7ff fcac 	bl	1eba8 <att_op_get_type>
   1f250:	2802      	cmp	r0, #2
   1f252:	d001      	beq.n	1f258 <bt_att_chan_create_pdu+0x1c>
   1f254:	2804      	cmp	r0, #4
   1f256:	d10f      	bne.n	1f278 <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1f258:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1f25c:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1f25e:	2100      	movs	r1, #0
   1f260:	4608      	mov	r0, r1
   1f262:	f7ff fbd3 	bl	1ea0c <bt_l2cap_create_pdu_timeout>
   1f266:	4604      	mov	r4, r0
	if (!buf) {
   1f268:	b120      	cbz	r0, 1f274 <bt_att_chan_create_pdu+0x38>
   1f26a:	2101      	movs	r1, #1
   1f26c:	3008      	adds	r0, #8
   1f26e:	f000 fcda 	bl	1fc26 <net_buf_simple_add>
	hdr->code = op;
   1f272:	7005      	strb	r5, [r0, #0]
}
   1f274:	4620      	mov	r0, r4
   1f276:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   1f278:	f04f 32ff 	mov.w	r2, #4294967295
   1f27c:	f04f 33ff 	mov.w	r3, #4294967295
   1f280:	e7ed      	b.n	1f25e <bt_att_chan_create_pdu+0x22>
		return NULL;
   1f282:	2400      	movs	r4, #0
   1f284:	e7f6      	b.n	1f274 <bt_att_chan_create_pdu+0x38>

0001f286 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1f286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f28a:	4688      	mov	r8, r1
   1f28c:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1f28e:	2101      	movs	r1, #1
   1f290:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1f292:	4605      	mov	r5, r0
   1f294:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1f296:	f7ff ffd1 	bl	1f23c <bt_att_chan_create_pdu>
	if (!buf) {
   1f29a:	4604      	mov	r4, r0
   1f29c:	b170      	cbz	r0, 1f2bc <send_err_rsp.part.0+0x36>
   1f29e:	2104      	movs	r1, #4
   1f2a0:	3008      	adds	r0, #8
   1f2a2:	f000 fcc0 	bl	1fc26 <net_buf_simple_add>
	rsp->request = req;
   1f2a6:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   1f2aa:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1f2ac:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1f2b0:	4621      	mov	r1, r4
   1f2b2:	4628      	mov	r0, r5
}
   1f2b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1f2b8:	f7f6 ba50 	b.w	1575c <bt_att_chan_send_rsp.constprop.0>
}
   1f2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f2c0 <bt_att_create_pdu>:
{
   1f2c0:	b570      	push	{r4, r5, r6, lr}
   1f2c2:	460e      	mov	r6, r1
   1f2c4:	4615      	mov	r5, r2
	att = att_get(conn);
   1f2c6:	f7ff febe 	bl	1f046 <att_get>
	if (!att) {
   1f2ca:	b170      	cbz	r0, 1f2ea <bt_att_create_pdu+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f2cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1f2ce:	b163      	cbz	r3, 1f2ea <bt_att_create_pdu+0x2a>
   1f2d0:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   1f2d4:	d009      	beq.n	1f2ea <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f2d6:	681b      	ldr	r3, [r3, #0]
   1f2d8:	b10b      	cbz	r3, 1f2de <bt_att_create_pdu+0x1e>
   1f2da:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1f2de:	1c6a      	adds	r2, r5, #1
   1f2e0:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
   1f2e4:	428a      	cmp	r2, r1
   1f2e6:	d902      	bls.n	1f2ee <bt_att_create_pdu+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f2e8:	b93b      	cbnz	r3, 1f2fa <bt_att_create_pdu+0x3a>
}
   1f2ea:	2000      	movs	r0, #0
   1f2ec:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1f2ee:	462a      	mov	r2, r5
   1f2f0:	4631      	mov	r1, r6
}
   1f2f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1f2f6:	f7ff bfa1 	b.w	1f23c <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f2fa:	f513 74a2 	adds.w	r4, r3, #324	; 0x144
   1f2fe:	d004      	beq.n	1f30a <bt_att_create_pdu+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f300:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f304:	b10c      	cbz	r4, 1f30a <bt_att_create_pdu+0x4a>
   1f306:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   1f30a:	4618      	mov	r0, r3
   1f30c:	4623      	mov	r3, r4
   1f30e:	e7e7      	b.n	1f2e0 <bt_att_create_pdu+0x20>

0001f310 <att_read_blob_req>:
{
   1f310:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1f312:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1f314:	8813      	ldrh	r3, [r2, #0]
   1f316:	8852      	ldrh	r2, [r2, #2]
   1f318:	9200      	str	r2, [sp, #0]
   1f31a:	210c      	movs	r1, #12
   1f31c:	220d      	movs	r2, #13
   1f31e:	f7f6 fc7d 	bl	15c1c <att_read_rsp>
}
   1f322:	b003      	add	sp, #12
   1f324:	f85d fb04 	ldr.w	pc, [sp], #4

0001f328 <att_read_req>:
{
   1f328:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1f32a:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1f32c:	2200      	movs	r2, #0
   1f32e:	881b      	ldrh	r3, [r3, #0]
   1f330:	9200      	str	r2, [sp, #0]
   1f332:	210a      	movs	r1, #10
   1f334:	220b      	movs	r2, #11
   1f336:	f7f6 fc71 	bl	15c1c <att_read_rsp>
}
   1f33a:	b003      	add	sp, #12
   1f33c:	f85d fb04 	ldr.w	pc, [sp], #4

0001f340 <att_mtu_req>:
{
   1f340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1f342:	6803      	ldr	r3, [r0, #0]
{
   1f344:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   1f346:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f348:	f3bf 8f5b 	dmb	ish
   1f34c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1f350:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1f354:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   1f358:	071b      	lsls	r3, r3, #28
   1f35a:	d421      	bmi.n	1f3a0 <att_mtu_req+0x60>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1f35c:	688b      	ldr	r3, [r1, #8]
   1f35e:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1f360:	2e16      	cmp	r6, #22
   1f362:	d91f      	bls.n	1f3a4 <att_mtu_req+0x64>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1f364:	2202      	movs	r2, #2
   1f366:	2103      	movs	r1, #3
   1f368:	f7ff ffaa 	bl	1f2c0 <bt_att_create_pdu>
	if (!pdu) {
   1f36c:	4607      	mov	r7, r0
   1f36e:	b1d8      	cbz	r0, 1f3a8 <att_mtu_req+0x68>
   1f370:	2102      	movs	r1, #2
   1f372:	3008      	adds	r0, #8
   1f374:	f000 fc57 	bl	1fc26 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1f378:	f06f 0308 	mvn.w	r3, #8
   1f37c:	7003      	strb	r3, [r0, #0]
   1f37e:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1f380:	4639      	mov	r1, r7
   1f382:	4620      	mov	r0, r4
   1f384:	f7f6 f9ea 	bl	1575c <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1f388:	2ef7      	cmp	r6, #247	; 0xf7
   1f38a:	bf28      	it	cs
   1f38c:	26f7      	movcs	r6, #247	; 0xf7
	att_chan_mtu_updated(chan);
   1f38e:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1f390:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1f394:	f8a4 6086 	strh.w	r6, [r4, #134]	; 0x86
	att_chan_mtu_updated(chan);
   1f398:	f7ff fd5d 	bl	1ee56 <att_chan_mtu_updated>
	return 0;
   1f39c:	4628      	mov	r0, r5
}
   1f39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1f3a0:	2006      	movs	r0, #6
   1f3a2:	e7fc      	b.n	1f39e <att_mtu_req+0x5e>
		return BT_ATT_ERR_INVALID_PDU;
   1f3a4:	2004      	movs	r0, #4
   1f3a6:	e7fa      	b.n	1f39e <att_mtu_req+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   1f3a8:	200e      	movs	r0, #14
   1f3aa:	e7f8      	b.n	1f39e <att_mtu_req+0x5e>

0001f3ac <bt_att_init>:
	bt_gatt_init();
   1f3ac:	f7f6 bef2 	b.w	16194 <bt_gatt_init>

0001f3b0 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1f3b0:	898a      	ldrh	r2, [r1, #12]
   1f3b2:	6889      	ldr	r1, [r1, #8]
   1f3b4:	2300      	movs	r3, #0
   1f3b6:	f7f6 bda3 	b.w	15f00 <att_handle_rsp>

0001f3ba <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   1f3ba:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
   1f3be:	f7f6 bdd1 	b.w	15f64 <bt_att_disconnected>

0001f3c2 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1f3c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f3c6:	4607      	mov	r7, r0
   1f3c8:	460d      	mov	r5, r1
   1f3ca:	4616      	mov	r6, r2
   1f3cc:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1f3ce:	f7ff fe3a 	bl	1f046 <att_get>
	if (!att) {
   1f3d2:	4604      	mov	r4, r0
   1f3d4:	b938      	cbnz	r0, 1f3e6 <bt_att_send+0x24>
		net_buf_unref(buf);
   1f3d6:	4628      	mov	r0, r5
   1f3d8:	f7f7 fb6c 	bl	16ab4 <net_buf_unref>
		return -ENOTCONN;
   1f3dc:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1f3e0:	b002      	add	sp, #8
   1f3e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1f3e6:	b146      	cbz	r6, 1f3fa <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1f3e8:	f8cd 8000 	str.w	r8, [sp]
   1f3ec:	4633      	mov	r3, r6
   1f3ee:	462a      	mov	r2, r5
   1f3f0:	2104      	movs	r1, #4
   1f3f2:	4638      	mov	r0, r7
   1f3f4:	f7ff fb0d 	bl	1ea12 <bt_l2cap_send_cb>
   1f3f8:	e7f2      	b.n	1f3e0 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   1f3fa:	f100 060c 	add.w	r6, r0, #12
   1f3fe:	4629      	mov	r1, r5
   1f400:	4630      	mov	r0, r6
   1f402:	f000 fbdd 	bl	1fbc0 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1f406:	2200      	movs	r2, #0
   1f408:	2300      	movs	r3, #0
   1f40a:	4630      	mov	r0, r6
   1f40c:	f000 fbba 	bl	1fb84 <net_buf_get>
	if (!buf) {
   1f410:	4605      	mov	r5, r0
   1f412:	b908      	cbnz	r0, 1f418 <bt_att_send+0x56>
	return 0;
   1f414:	2000      	movs	r0, #0
   1f416:	e7e3      	b.n	1f3e0 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f418:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f41a:	b1c3      	cbz	r3, 1f44e <bt_att_send+0x8c>
   1f41c:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   1f420:	d015      	beq.n	1f44e <bt_att_send+0x8c>
   1f422:	681c      	ldr	r4, [r3, #0]
   1f424:	b10c      	cbz	r4, 1f42a <bt_att_send+0x68>
   1f426:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   1f42a:	2200      	movs	r2, #0
   1f42c:	4629      	mov	r1, r5
   1f42e:	f7f6 f937 	bl	156a0 <chan_send>
		if (err >= 0) {
   1f432:	2800      	cmp	r0, #0
   1f434:	daee      	bge.n	1f414 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f436:	b154      	cbz	r4, 1f44e <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f438:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   1f43c:	d004      	beq.n	1f448 <bt_att_send+0x86>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f43e:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   1f442:	b10b      	cbz	r3, 1f448 <bt_att_send+0x86>
   1f444:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1f448:	4620      	mov	r0, r4
   1f44a:	461c      	mov	r4, r3
   1f44c:	e7ed      	b.n	1f42a <bt_att_send+0x68>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1f44e:	4629      	mov	r1, r5
   1f450:	4630      	mov	r0, r6
   1f452:	f000 ff10 	bl	20276 <k_queue_prepend>
   1f456:	e7dd      	b.n	1f414 <bt_att_send+0x52>

0001f458 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1f458:	b510      	push	{r4, lr}
   1f45a:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1f45c:	f7ff fdf3 	bl	1f046 <att_get>
	if (!att) {
   1f460:	b160      	cbz	r0, 1f47c <bt_att_req_send+0x24>
	parent->next = child;
   1f462:	2300      	movs	r3, #0
   1f464:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1f466:	6883      	ldr	r3, [r0, #8]
   1f468:	b92b      	cbnz	r3, 1f476 <bt_att_req_send+0x1e>
	list->head = node;
   1f46a:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1f46e:	f7ff fe24 	bl	1f0ba <att_req_send_process>

	return 0;
   1f472:	2000      	movs	r0, #0
}
   1f474:	bd10      	pop	{r4, pc}
	parent->next = child;
   1f476:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1f478:	6084      	str	r4, [r0, #8]
}
   1f47a:	e7f8      	b.n	1f46e <bt_att_req_send+0x16>
		return -ENOTCONN;
   1f47c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1f480:	e7f8      	b.n	1f474 <bt_att_req_send+0x1c>

0001f482 <gatt_ccc_changed>:
{
   1f482:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1f484:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1f486:	895a      	ldrh	r2, [r3, #10]
   1f488:	428a      	cmp	r2, r1
   1f48a:	d003      	beq.n	1f494 <gatt_ccc_changed+0x12>
		ccc->value = value;
   1f48c:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1f48e:	68db      	ldr	r3, [r3, #12]
   1f490:	b103      	cbz	r3, 1f494 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1f492:	4718      	bx	r3
}
   1f494:	4770      	bx	lr

0001f496 <gatt_indicate_rsp>:
{
   1f496:	b510      	push	{r4, lr}
   1f498:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   1f49a:	68a3      	ldr	r3, [r4, #8]
{
   1f49c:	460a      	mov	r2, r1
	if (params->func) {
   1f49e:	b10b      	cbz	r3, 1f4a4 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1f4a0:	4621      	mov	r1, r4
   1f4a2:	4798      	blx	r3
	params->_ref--;
   1f4a4:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1f4a6:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1f4a8:	3b01      	subs	r3, #1
   1f4aa:	b2db      	uxtb	r3, r3
   1f4ac:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1f4ae:	b122      	cbz	r2, 1f4ba <gatt_indicate_rsp+0x24>
   1f4b0:	b91b      	cbnz	r3, 1f4ba <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1f4b2:	4620      	mov	r0, r4
}
   1f4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1f4b8:	4710      	bx	r2
}
   1f4ba:	bd10      	pop	{r4, pc}

0001f4bc <match_uuid>:
	data->attr = attr;
   1f4bc:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1f4be:	8091      	strh	r1, [r2, #4]
}
   1f4c0:	2000      	movs	r0, #0
   1f4c2:	4770      	bx	lr

0001f4c4 <write_name>:
{
   1f4c4:	b570      	push	{r4, r5, r6, lr}
   1f4c6:	b092      	sub	sp, #72	; 0x48
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   1f4c8:	2100      	movs	r1, #0
{
   1f4ca:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   1f4ce:	9101      	str	r1, [sp, #4]
{
   1f4d0:	4616      	mov	r6, r2
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   1f4d2:	a802      	add	r0, sp, #8
   1f4d4:	223d      	movs	r2, #61	; 0x3d
{
   1f4d6:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   1f4d8:	f001 fb0a 	bl	20af0 <memset>
	if (offset >= sizeof(value)) {
   1f4dc:	2d40      	cmp	r5, #64	; 0x40
   1f4de:	d80e      	bhi.n	1f4fe <write_name+0x3a>
	if (offset + len >= sizeof(value)) {
   1f4e0:	4425      	add	r5, r4
   1f4e2:	2d40      	cmp	r5, #64	; 0x40
   1f4e4:	dc0e      	bgt.n	1f504 <write_name+0x40>
	memcpy(value, buf, len);
   1f4e6:	2341      	movs	r3, #65	; 0x41
   1f4e8:	4622      	mov	r2, r4
   1f4ea:	4631      	mov	r1, r6
   1f4ec:	a801      	add	r0, sp, #4
   1f4ee:	f001 fad2 	bl	20a96 <__memcpy_chk>
	bt_set_name(value);
   1f4f2:	a801      	add	r0, sp, #4
   1f4f4:	f7f4 fe70 	bl	141d8 <bt_set_name>
}
   1f4f8:	4620      	mov	r0, r4
   1f4fa:	b012      	add	sp, #72	; 0x48
   1f4fc:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f4fe:	f06f 0406 	mvn.w	r4, #6
   1f502:	e7f9      	b.n	1f4f8 <write_name+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1f504:	f06f 040c 	mvn.w	r4, #12
   1f508:	e7f6      	b.n	1f4f8 <write_name+0x34>

0001f50a <gen_hash_m>:
{
   1f50a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f50c:	6807      	ldr	r7, [r0, #0]
   1f50e:	783d      	ldrb	r5, [r7, #0]
{
   1f510:	b089      	sub	sp, #36	; 0x24
   1f512:	4606      	mov	r6, r0
   1f514:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f516:	b10d      	cbz	r5, 1f51c <gen_hash_m+0x12>
	switch (u16->val) {
   1f518:	2501      	movs	r5, #1
   1f51a:	e014      	b.n	1f546 <gen_hash_m+0x3c>
   1f51c:	887b      	ldrh	r3, [r7, #2]
   1f51e:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1f522:	d004      	beq.n	1f52e <gen_hash_m+0x24>
   1f524:	d812      	bhi.n	1f54c <gen_hash_m+0x42>
   1f526:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1f52a:	2b03      	cmp	r3, #3
   1f52c:	d8f4      	bhi.n	1f518 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1f52e:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f532:	2202      	movs	r2, #2
   1f534:	f10d 010e 	add.w	r1, sp, #14
   1f538:	4620      	mov	r0, r4
   1f53a:	f7fe fb27 	bl	1db8c <tc_cmac_update>
   1f53e:	b9e0      	cbnz	r0, 1f57a <gen_hash_m+0x70>
			state->err = -EINVAL;
   1f540:	f06f 0315 	mvn.w	r3, #21
   1f544:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1f546:	4628      	mov	r0, r5
   1f548:	b009      	add	sp, #36	; 0x24
   1f54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1f54c:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1f550:	33ff      	adds	r3, #255	; 0xff
   1f552:	b29b      	uxth	r3, r3
   1f554:	2b04      	cmp	r3, #4
   1f556:	d8df      	bhi.n	1f518 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1f558:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f55c:	2202      	movs	r2, #2
   1f55e:	f10d 010e 	add.w	r1, sp, #14
   1f562:	4620      	mov	r0, r4
   1f564:	f7fe fb12 	bl	1db8c <tc_cmac_update>
   1f568:	2800      	cmp	r0, #0
   1f56a:	d0e9      	beq.n	1f540 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1f56c:	887b      	ldrh	r3, [r7, #2]
   1f56e:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f572:	2202      	movs	r2, #2
   1f574:	f10d 010e 	add.w	r1, sp, #14
   1f578:	e017      	b.n	1f5aa <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1f57a:	887b      	ldrh	r3, [r7, #2]
   1f57c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f580:	2202      	movs	r2, #2
   1f582:	f10d 010e 	add.w	r1, sp, #14
   1f586:	4620      	mov	r0, r4
   1f588:	f7fe fb00 	bl	1db8c <tc_cmac_update>
   1f58c:	2800      	cmp	r0, #0
   1f58e:	d0d7      	beq.n	1f540 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1f590:	2000      	movs	r0, #0
   1f592:	2310      	movs	r3, #16
   1f594:	eb0d 0203 	add.w	r2, sp, r3
   1f598:	6877      	ldr	r7, [r6, #4]
   1f59a:	9000      	str	r0, [sp, #0]
   1f59c:	4631      	mov	r1, r6
   1f59e:	47b8      	blx	r7
		if (len < 0) {
   1f5a0:	1e02      	subs	r2, r0, #0
   1f5a2:	da01      	bge.n	1f5a8 <gen_hash_m+0x9e>
			state->err = len;
   1f5a4:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1f5a6:	e7ce      	b.n	1f546 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1f5a8:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f5aa:	4620      	mov	r0, r4
   1f5ac:	f7fe faee 	bl	1db8c <tc_cmac_update>
   1f5b0:	2800      	cmp	r0, #0
   1f5b2:	d1b1      	bne.n	1f518 <gen_hash_m+0xe>
   1f5b4:	e7c4      	b.n	1f540 <gen_hash_m+0x36>

0001f5b6 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f5b6:	2301      	movs	r3, #1
   1f5b8:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f5ba:	f3bf 8f5b 	dmb	ish
   1f5be:	e850 2f00 	ldrex	r2, [r0]
   1f5c2:	431a      	orrs	r2, r3
   1f5c4:	e840 2100 	strex	r1, r2, [r0]
   1f5c8:	2900      	cmp	r1, #0
   1f5ca:	d1f8      	bne.n	1f5be <atomic_set_bit+0x8>
   1f5cc:	f3bf 8f5b 	dmb	ish
}
   1f5d0:	4770      	bx	lr

0001f5d2 <bt_addr_le_copy>:
   1f5d2:	680b      	ldr	r3, [r1, #0]
   1f5d4:	6003      	str	r3, [r0, #0]
   1f5d6:	888b      	ldrh	r3, [r1, #4]
   1f5d8:	8083      	strh	r3, [r0, #4]
   1f5da:	798b      	ldrb	r3, [r1, #6]
   1f5dc:	7183      	strb	r3, [r0, #6]
}
   1f5de:	4770      	bx	lr

0001f5e0 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   1f5e0:	2300      	movs	r3, #0
   1f5e2:	6003      	str	r3, [r0, #0]
   1f5e4:	6043      	str	r3, [r0, #4]
   1f5e6:	6083      	str	r3, [r0, #8]
}
   1f5e8:	4770      	bx	lr

0001f5ea <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   1f5ea:	b538      	push	{r3, r4, r5, lr}
   1f5ec:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	if (offset > value_len) {
   1f5f0:	4295      	cmp	r5, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   1f5f2:	460c      	mov	r4, r1
   1f5f4:	4611      	mov	r1, r2
	if (offset > value_len) {
   1f5f6:	d30a      	bcc.n	1f60e <bt_gatt_attr_read.constprop.0+0x24>
	len = MIN(buf_len, value_len - offset);
   1f5f8:	1aad      	subs	r5, r5, r2
   1f5fa:	42a5      	cmp	r5, r4
   1f5fc:	bfa8      	it	ge
   1f5fe:	4625      	movge	r5, r4
   1f600:	b2ad      	uxth	r5, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1f602:	462a      	mov	r2, r5
   1f604:	4419      	add	r1, r3
   1f606:	f001 fa38 	bl	20a7a <memcpy>
}
   1f60a:	4628      	mov	r0, r5
   1f60c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f60e:	f06f 0506 	mvn.w	r5, #6
   1f612:	e7fa      	b.n	1f60a <bt_gatt_attr_read.constprop.0+0x20>

0001f614 <bt_gatt_attr_read_service>:
{
   1f614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1f616:	460c      	mov	r4, r1
   1f618:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   1f61a:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   1f61c:	781c      	ldrb	r4, [r3, #0]
{
   1f61e:	4610      	mov	r0, r2
   1f620:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   1f624:	b954      	cbnz	r4, 1f63c <bt_gatt_attr_read_service+0x28>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1f626:	885b      	ldrh	r3, [r3, #2]
   1f628:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1f62c:	2302      	movs	r3, #2
   1f62e:	9300      	str	r3, [sp, #0]
   1f630:	f10d 030e 	add.w	r3, sp, #14
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1f634:	f7ff ffd9 	bl	1f5ea <bt_gatt_attr_read.constprop.0>
}
   1f638:	b004      	add	sp, #16
   1f63a:	bd10      	pop	{r4, pc}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1f63c:	2410      	movs	r4, #16
   1f63e:	9400      	str	r4, [sp, #0]
   1f640:	3301      	adds	r3, #1
   1f642:	e7f7      	b.n	1f634 <bt_gatt_attr_read_service+0x20>

0001f644 <read_name>:
{
   1f644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f648:	4614      	mov	r4, r2
   1f64a:	461d      	mov	r5, r3
   1f64c:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   1f650:	f7f4 fe64 	bl	1431c <bt_get_name>
   1f654:	4606      	mov	r6, r0
				 strlen(name));
   1f656:	f7ec fe51 	bl	c2fc <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1f65a:	b280      	uxth	r0, r0
   1f65c:	9006      	str	r0, [sp, #24]
   1f65e:	4633      	mov	r3, r6
   1f660:	463a      	mov	r2, r7
   1f662:	4629      	mov	r1, r5
   1f664:	4620      	mov	r0, r4
}
   1f666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1f66a:	f7ff bfbe 	b.w	1f5ea <bt_gatt_attr_read.constprop.0>

0001f66e <read_appearance>:
{
   1f66e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1f670:	4619      	mov	r1, r3
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1f672:	2300      	movs	r3, #0
   1f674:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1f678:	2302      	movs	r3, #2
   1f67a:	9300      	str	r3, [sp, #0]
{
   1f67c:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1f67e:	f10d 030e 	add.w	r3, sp, #14
   1f682:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   1f686:	f7ff ffb0 	bl	1f5ea <bt_gatt_attr_read.constprop.0>
}
   1f68a:	b005      	add	sp, #20
   1f68c:	f85d fb04 	ldr.w	pc, [sp], #4

0001f690 <clear_cf_cfg>:
{
   1f690:	b513      	push	{r0, r1, r4, lr}
   1f692:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1f694:	2400      	movs	r4, #0
   1f696:	4669      	mov	r1, sp
   1f698:	3001      	adds	r0, #1
   1f69a:	9400      	str	r4, [sp, #0]
   1f69c:	f8cd 4003 	str.w	r4, [sp, #3]
   1f6a0:	f7ff ff97 	bl	1f5d2 <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   1f6a4:	7214      	strb	r4, [r2, #8]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f6a6:	320c      	adds	r2, #12
   1f6a8:	f3bf 8f5b 	dmb	ish
   1f6ac:	e852 3f00 	ldrex	r3, [r2]
   1f6b0:	e842 4100 	strex	r1, r4, [r2]
   1f6b4:	2900      	cmp	r1, #0
   1f6b6:	d1f9      	bne.n	1f6ac <clear_cf_cfg+0x1c>
   1f6b8:	f3bf 8f5b 	dmb	ish
}
   1f6bc:	b002      	add	sp, #8
   1f6be:	bd10      	pop	{r4, pc}

0001f6c0 <sc_save>:
{
   1f6c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f6c4:	4680      	mov	r8, r0
   1f6c6:	460f      	mov	r7, r1
   1f6c8:	4616      	mov	r6, r2
   1f6ca:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1f6cc:	f7f6 fcb8 	bl	16040 <find_sc_cfg>
	if (!cfg) {
   1f6d0:	4604      	mov	r4, r0
   1f6d2:	b960      	cbnz	r0, 1f6ee <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1f6d4:	4669      	mov	r1, sp
   1f6d6:	9000      	str	r0, [sp, #0]
   1f6d8:	f8cd 0003 	str.w	r0, [sp, #3]
   1f6dc:	f7f6 fcb0 	bl	16040 <find_sc_cfg>
		if (!cfg) {
   1f6e0:	4604      	mov	r4, r0
   1f6e2:	b178      	cbz	r0, 1f704 <sc_save+0x44>
		cfg->id = id;
   1f6e4:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1f6e8:	4639      	mov	r1, r7
   1f6ea:	f7ff ff72 	bl	1f5d2 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1f6ee:	8922      	ldrh	r2, [r4, #8]
   1f6f0:	8963      	ldrh	r3, [r4, #10]
   1f6f2:	b91a      	cbnz	r2, 1f6fc <sc_save+0x3c>
   1f6f4:	b923      	cbnz	r3, 1f700 <sc_save+0x40>
		cfg->data.start = start;
   1f6f6:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1f6f8:	8165      	strh	r5, [r4, #10]
   1f6fa:	e003      	b.n	1f704 <sc_save+0x44>
	if (new_start >= *start && new_end <= *end) {
   1f6fc:	4296      	cmp	r6, r2
   1f6fe:	d304      	bcc.n	1f70a <sc_save+0x4a>
   1f700:	429d      	cmp	r5, r3
   1f702:	d8f9      	bhi.n	1f6f8 <sc_save+0x38>
}
   1f704:	b002      	add	sp, #8
   1f706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*start = new_start;
   1f70a:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1f70c:	e7f8      	b.n	1f700 <sc_save+0x40>

0001f70e <sc_clear>:
{
   1f70e:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1f710:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   1f714:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1f716:	4629      	mov	r1, r5
   1f718:	7a00      	ldrb	r0, [r0, #8]
   1f71a:	f7fe fe01 	bl	1e320 <bt_addr_le_is_bonded>
   1f71e:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1f720:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1f722:	f7f6 fc8d 	bl	16040 <find_sc_cfg>
		if (cfg) {
   1f726:	b118      	cbz	r0, 1f730 <sc_clear+0x22>
}
   1f728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   1f72c:	f7ff bf58 	b.w	1f5e0 <clear_sc_cfg>
}
   1f730:	bd38      	pop	{r3, r4, r5, pc}

0001f732 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1f732:	2a02      	cmp	r2, #2
{
   1f734:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1f736:	d108      	bne.n	1f74a <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1f738:	2300      	movs	r3, #0
   1f73a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1f73e:	461a      	mov	r2, r3
   1f740:	7a00      	ldrb	r0, [r0, #8]
   1f742:	f7ff ffbd 	bl	1f6c0 <sc_save>
}
   1f746:	2002      	movs	r0, #2
   1f748:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1f74a:	f7ff ffe0 	bl	1f70e <sc_clear>
   1f74e:	e7fa      	b.n	1f746 <sc_ccc_cfg_write+0x14>

0001f750 <sc_restore_rsp>:
{
   1f750:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1f752:	f7f6 fc85 	bl	16060 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1f756:	b140      	cbz	r0, 1f76a <sc_restore_rsp+0x1a>
   1f758:	7a03      	ldrb	r3, [r0, #8]
   1f75a:	07db      	lsls	r3, r3, #31
   1f75c:	d505      	bpl.n	1f76a <sc_restore_rsp+0x1a>
}
   1f75e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1f762:	2100      	movs	r1, #0
   1f764:	300c      	adds	r0, #12
   1f766:	f7ff bf26 	b.w	1f5b6 <atomic_set_bit>
}
   1f76a:	bd08      	pop	{r3, pc}

0001f76c <cf_write>:
{
   1f76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f770:	4698      	mov	r8, r3
   1f772:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1f776:	2b01      	cmp	r3, #1
{
   1f778:	4606      	mov	r6, r0
   1f77a:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1f77c:	d830      	bhi.n	1f7e0 <cf_write+0x74>
	if (offset + len > sizeof(cfg->data)) {
   1f77e:	4443      	add	r3, r8
   1f780:	2b01      	cmp	r3, #1
   1f782:	4645      	mov	r5, r8
   1f784:	dc2f      	bgt.n	1f7e6 <cf_write+0x7a>
	cfg = find_cf_cfg(conn);
   1f786:	f7f6 fc6b 	bl	16060 <find_cf_cfg>
	if (!cfg) {
   1f78a:	4604      	mov	r4, r0
   1f78c:	b918      	cbnz	r0, 1f796 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1f78e:	f7f6 fc67 	bl	16060 <find_cf_cfg>
	if (!cfg) {
   1f792:	4604      	mov	r4, r0
   1f794:	b350      	cbz	r0, 1f7ec <cf_write+0x80>
{
   1f796:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1f798:	f1b8 0f00 	cmp.w	r8, #0
   1f79c:	d10e      	bne.n	1f7bc <cf_write+0x50>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1f79e:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1f7a2:	1c60      	adds	r0, r4, #1
   1f7a4:	f7ff ff15 	bl	1f5d2 <bt_addr_le_copy>
	cfg->id = conn->id;
   1f7a8:	4620      	mov	r0, r4
   1f7aa:	7a33      	ldrb	r3, [r6, #8]
   1f7ac:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1f7b0:	2100      	movs	r1, #0
   1f7b2:	f7ff ff00 	bl	1f5b6 <atomic_set_bit>
}
   1f7b6:	4628      	mov	r0, r5
   1f7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1f7bc:	7a20      	ldrb	r0, [r4, #8]
   1f7be:	fa20 f301 	lsr.w	r3, r0, r1
   1f7c2:	07da      	lsls	r2, r3, #31
   1f7c4:	d503      	bpl.n	1f7ce <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   1f7c6:	783b      	ldrb	r3, [r7, #0]
   1f7c8:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1f7ca:	07db      	lsls	r3, r3, #31
   1f7cc:	d511      	bpl.n	1f7f2 <cf_write+0x86>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1f7ce:	3101      	adds	r1, #1
   1f7d0:	2903      	cmp	r1, #3
   1f7d2:	d1e1      	bne.n	1f798 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1f7d4:	783b      	ldrb	r3, [r7, #0]
   1f7d6:	f003 0307 	and.w	r3, r3, #7
   1f7da:	4318      	orrs	r0, r3
   1f7dc:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1f7de:	e7de      	b.n	1f79e <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f7e0:	f06f 0506 	mvn.w	r5, #6
   1f7e4:	e7e7      	b.n	1f7b6 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1f7e6:	f06f 050c 	mvn.w	r5, #12
   1f7ea:	e7e4      	b.n	1f7b6 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1f7ec:	f06f 0510 	mvn.w	r5, #16
   1f7f0:	e7e1      	b.n	1f7b6 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1f7f2:	f06f 0512 	mvn.w	r5, #18
   1f7f6:	e7de      	b.n	1f7b6 <cf_write+0x4a>

0001f7f8 <cf_read>:
{
   1f7f8:	b530      	push	{r4, r5, lr}
   1f7fa:	b085      	sub	sp, #20
   1f7fc:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   1f7fe:	2300      	movs	r3, #0
{
   1f800:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   1f802:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   1f806:	f7f6 fc2b 	bl	16060 <find_cf_cfg>
	if (cfg) {
   1f80a:	b110      	cbz	r0, 1f812 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   1f80c:	7a03      	ldrb	r3, [r0, #8]
   1f80e:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1f812:	2301      	movs	r3, #1
   1f814:	9300      	str	r3, [sp, #0]
   1f816:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1f81a:	ab03      	add	r3, sp, #12
   1f81c:	4629      	mov	r1, r5
   1f81e:	4620      	mov	r0, r4
   1f820:	f7ff fee3 	bl	1f5ea <bt_gatt_attr_read.constprop.0>
}
   1f824:	b005      	add	sp, #20
   1f826:	bd30      	pop	{r4, r5, pc}

0001f828 <find_ccc_cfg>:
{
   1f828:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f82a:	460c      	mov	r4, r1
   1f82c:	1c4d      	adds	r5, r1, #1
		if (conn) {
   1f82e:	b148      	cbz	r0, 1f844 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1f830:	7809      	ldrb	r1, [r1, #0]
   1f832:	462a      	mov	r2, r5
   1f834:	f7fe ffdc 	bl	1e7f0 <bt_conn_is_peer_addr_le>
   1f838:	2800      	cmp	r0, #0
	return NULL;
   1f83a:	bf08      	it	eq
   1f83c:	2400      	moveq	r4, #0
}
   1f83e:	4620      	mov	r0, r4
   1f840:	b003      	add	sp, #12
   1f842:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1f844:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
   1f846:	2207      	movs	r2, #7
   1f848:	f8cd 0003 	str.w	r0, [sp, #3]
   1f84c:	4669      	mov	r1, sp
   1f84e:	4628      	mov	r0, r5
   1f850:	f001 f905 	bl	20a5e <memcmp>
   1f854:	2800      	cmp	r0, #0
	return NULL;
   1f856:	bf18      	it	ne
   1f858:	2400      	movne	r4, #0
   1f85a:	e7f0      	b.n	1f83e <find_ccc_cfg+0x16>

0001f85c <bt_gatt_attr_write_ccc>:
{
   1f85c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1f860:	461f      	mov	r7, r3
   1f862:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1f866:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1f86a:	4606      	mov	r6, r0
   1f86c:	4688      	mov	r8, r1
	if (offset) {
   1f86e:	2b00      	cmp	r3, #0
   1f870:	d144      	bne.n	1f8fc <bt_gatt_attr_write_ccc+0xa0>
	if (!len || len > sizeof(uint16_t)) {
   1f872:	1e7b      	subs	r3, r7, #1
   1f874:	2b01      	cmp	r3, #1
   1f876:	d844      	bhi.n	1f902 <bt_gatt_attr_write_ccc+0xa6>
	if (len < sizeof(uint16_t)) {
   1f878:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   1f87a:	7815      	ldrb	r5, [r2, #0]
   1f87c:	bf18      	it	ne
   1f87e:	7852      	ldrbne	r2, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   1f880:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   1f882:	bf0c      	ite	eq
   1f884:	b2ad      	uxtheq	r5, r5
   1f886:	ea45 2502 	orrne.w	r5, r5, r2, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1f88a:	f7ff ffcd 	bl	1f828 <find_ccc_cfg>
	if (!cfg) {
   1f88e:	4604      	mov	r4, r0
   1f890:	b980      	cbnz	r0, 1f8b4 <bt_gatt_attr_write_ccc+0x58>
		if (!value) {
   1f892:	b91d      	cbnz	r5, 1f89c <bt_gatt_attr_write_ccc+0x40>
			return len;
   1f894:	4638      	mov	r0, r7
}
   1f896:	b003      	add	sp, #12
   1f898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1f89c:	4649      	mov	r1, r9
   1f89e:	f7ff ffc3 	bl	1f828 <find_ccc_cfg>
		if (!cfg) {
   1f8a2:	4604      	mov	r4, r0
   1f8a4:	b380      	cbz	r0, 1f908 <bt_gatt_attr_write_ccc+0xac>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1f8a6:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1f8aa:	3001      	adds	r0, #1
   1f8ac:	f7ff fe91 	bl	1f5d2 <bt_addr_le_copy>
		cfg->id = conn->id;
   1f8b0:	7a33      	ldrb	r3, [r6, #8]
   1f8b2:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1f8b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1f8b8:	b9a3      	cbnz	r3, 1f8e4 <bt_gatt_attr_write_ccc+0x88>
	if (cfg->value != ccc->value) {
   1f8ba:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   1f8be:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1f8c0:	42ab      	cmp	r3, r5
   1f8c2:	d003      	beq.n	1f8cc <bt_gatt_attr_write_ccc+0x70>
		gatt_ccc_changed(attr, ccc);
   1f8c4:	4649      	mov	r1, r9
   1f8c6:	4640      	mov	r0, r8
   1f8c8:	f7ff fddb 	bl	1f482 <gatt_ccc_changed>
	if (!value) {
   1f8cc:	2d00      	cmp	r5, #0
   1f8ce:	d1e1      	bne.n	1f894 <bt_gatt_attr_write_ccc+0x38>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1f8d0:	4669      	mov	r1, sp
   1f8d2:	1c60      	adds	r0, r4, #1
   1f8d4:	9500      	str	r5, [sp, #0]
   1f8d6:	f8cd 5003 	str.w	r5, [sp, #3]
   1f8da:	f7ff fe7a 	bl	1f5d2 <bt_addr_le_copy>
	cfg->id = 0U;
   1f8de:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1f8e0:	8125      	strh	r5, [r4, #8]
}
   1f8e2:	e7d7      	b.n	1f894 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1f8e4:	462a      	mov	r2, r5
   1f8e6:	4641      	mov	r1, r8
   1f8e8:	4630      	mov	r0, r6
   1f8ea:	4798      	blx	r3
		if (write < 0) {
   1f8ec:	2800      	cmp	r0, #0
   1f8ee:	dbd2      	blt.n	1f896 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   1f8f0:	3801      	subs	r0, #1
   1f8f2:	2801      	cmp	r0, #1
   1f8f4:	d9e1      	bls.n	1f8ba <bt_gatt_attr_write_ccc+0x5e>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1f8f6:	f06f 000d 	mvn.w	r0, #13
   1f8fa:	e7cc      	b.n	1f896 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f8fc:	f06f 0006 	mvn.w	r0, #6
   1f900:	e7c9      	b.n	1f896 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1f902:	f06f 000c 	mvn.w	r0, #12
   1f906:	e7c6      	b.n	1f896 <bt_gatt_attr_write_ccc+0x3a>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1f908:	f06f 0010 	mvn.w	r0, #16
   1f90c:	e7c3      	b.n	1f896 <bt_gatt_attr_write_ccc+0x3a>

0001f90e <bt_gatt_attr_read_ccc>:
{
   1f90e:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1f910:	68c9      	ldr	r1, [r1, #12]
{
   1f912:	b085      	sub	sp, #20
   1f914:	4614      	mov	r4, r2
   1f916:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   1f918:	f7ff ff86 	bl	1f828 <find_ccc_cfg>
	if (cfg) {
   1f91c:	b100      	cbz	r0, 1f920 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   1f91e:	8900      	ldrh	r0, [r0, #8]
   1f920:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1f924:	2302      	movs	r3, #2
   1f926:	9300      	str	r3, [sp, #0]
   1f928:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1f92c:	f10d 030e 	add.w	r3, sp, #14
   1f930:	4629      	mov	r1, r5
   1f932:	4620      	mov	r0, r4
   1f934:	f7ff fe59 	bl	1f5ea <bt_gatt_attr_read.constprop.0>
}
   1f938:	b005      	add	sp, #20
   1f93a:	bd30      	pop	{r4, r5, pc}

0001f93c <bt_gatt_attr_read>:
{
   1f93c:	b538      	push	{r3, r4, r5, lr}
   1f93e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f942:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   1f946:	428d      	cmp	r5, r1
{
   1f948:	4610      	mov	r0, r2
	if (offset > value_len) {
   1f94a:	d30b      	bcc.n	1f964 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1f94c:	1a6d      	subs	r5, r5, r1
   1f94e:	429d      	cmp	r5, r3
   1f950:	bfa8      	it	ge
   1f952:	461d      	movge	r5, r3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1f954:	9b05      	ldr	r3, [sp, #20]
   1f956:	b2ad      	uxth	r5, r5
   1f958:	462a      	mov	r2, r5
   1f95a:	4419      	add	r1, r3
   1f95c:	f001 f88d 	bl	20a7a <memcpy>
}
   1f960:	4628      	mov	r0, r5
   1f962:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f964:	f06f 0506 	mvn.w	r5, #6
   1f968:	e7fa      	b.n	1f960 <bt_gatt_attr_read+0x24>

0001f96a <bt_gatt_attr_value_handle>:
{
   1f96a:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1f96c:	4604      	mov	r4, r0
   1f96e:	b910      	cbnz	r0, 1f976 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1f970:	2000      	movs	r0, #0
}
   1f972:	b002      	add	sp, #8
   1f974:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1f976:	2300      	movs	r3, #0
   1f978:	f88d 3004 	strb.w	r3, [sp, #4]
   1f97c:	6800      	ldr	r0, [r0, #0]
   1f97e:	f642 0303 	movw	r3, #10243	; 0x2803
   1f982:	a901      	add	r1, sp, #4
   1f984:	f8ad 3006 	strh.w	r3, [sp, #6]
   1f988:	f7fe f9d8 	bl	1dd3c <bt_uuid_cmp>
   1f98c:	2800      	cmp	r0, #0
   1f98e:	d1ef      	bne.n	1f970 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1f990:	68e3      	ldr	r3, [r4, #12]
   1f992:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1f994:	2800      	cmp	r0, #0
   1f996:	d1ec      	bne.n	1f972 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1f998:	4620      	mov	r0, r4
   1f99a:	f7f6 fc51 	bl	16240 <bt_gatt_attr_get_handle>
   1f99e:	3001      	adds	r0, #1
   1f9a0:	b280      	uxth	r0, r0
	return handle;
   1f9a2:	e7e6      	b.n	1f972 <bt_gatt_attr_value_handle+0x8>

0001f9a4 <bt_gatt_attr_read_chrc>:
{
   1f9a4:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1f9a6:	68ce      	ldr	r6, [r1, #12]
{
   1f9a8:	b088      	sub	sp, #32
   1f9aa:	4608      	mov	r0, r1
   1f9ac:	461d      	mov	r5, r3
	pdu.properties = chrc->properties;
   1f9ae:	79b3      	ldrb	r3, [r6, #6]
   1f9b0:	f88d 300c 	strb.w	r3, [sp, #12]
{
   1f9b4:	4614      	mov	r4, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1f9b6:	f7ff ffd8 	bl	1f96a <bt_gatt_attr_value_handle>
   1f9ba:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1f9be:	6830      	ldr	r0, [r6, #0]
   1f9c0:	7803      	ldrb	r3, [r0, #0]
   1f9c2:	b96b      	cbnz	r3, 1f9e0 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1f9c4:	8843      	ldrh	r3, [r0, #2]
   1f9c6:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   1f9ca:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1f9cc:	9300      	str	r3, [sp, #0]
   1f9ce:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   1f9d2:	ab03      	add	r3, sp, #12
   1f9d4:	4629      	mov	r1, r5
   1f9d6:	4620      	mov	r0, r4
   1f9d8:	f7ff fe07 	bl	1f5ea <bt_gatt_attr_read.constprop.0>
}
   1f9dc:	b008      	add	sp, #32
   1f9de:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1f9e0:	1c43      	adds	r3, r0, #1
   1f9e2:	f10d 020f 	add.w	r2, sp, #15
   1f9e6:	3011      	adds	r0, #17
   1f9e8:	f853 1b04 	ldr.w	r1, [r3], #4
   1f9ec:	f842 1b04 	str.w	r1, [r2], #4
   1f9f0:	4283      	cmp	r3, r0
   1f9f2:	d1f9      	bne.n	1f9e8 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   1f9f4:	2313      	movs	r3, #19
   1f9f6:	e7e9      	b.n	1f9cc <bt_gatt_attr_read_chrc+0x28>

0001f9f8 <bt_gatt_foreach_attr>:
{
   1f9f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1f9fa:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1f9fe:	2300      	movs	r3, #0
   1fa00:	9300      	str	r3, [sp, #0]
   1fa02:	461a      	mov	r2, r3
   1fa04:	f7f6 fc4c 	bl	162a0 <bt_gatt_foreach_attr_type>
}
   1fa08:	b005      	add	sp, #20
   1fa0a:	f85d fb04 	ldr.w	pc, [sp], #4

0001fa0e <db_hash_process>:
	db_hash_gen(true);
   1fa0e:	f7f6 bca1 	b.w	16354 <db_hash_gen.isra.0>

0001fa12 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1fa12:	07d3      	lsls	r3, r2, #31
{
   1fa14:	b510      	push	{r4, lr}
   1fa16:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1fa18:	d504      	bpl.n	1fa24 <bt_gatt_check_perm+0x12>
   1fa1a:	f014 0f15 	tst.w	r4, #21
   1fa1e:	d017      	beq.n	1fa50 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1fa20:	684b      	ldr	r3, [r1, #4]
   1fa22:	b1ab      	cbz	r3, 1fa50 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1fa24:	0793      	lsls	r3, r2, #30
   1fa26:	d504      	bpl.n	1fa32 <bt_gatt_check_perm+0x20>
   1fa28:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1fa2c:	d012      	beq.n	1fa54 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1fa2e:	688b      	ldr	r3, [r1, #8]
   1fa30:	b183      	cbz	r3, 1fa54 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1fa32:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1fa34:	f014 0f30 	tst.w	r4, #48	; 0x30
   1fa38:	d104      	bne.n	1fa44 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1fa3a:	f014 000c 	ands.w	r0, r4, #12
   1fa3e:	bf18      	it	ne
   1fa40:	200f      	movne	r0, #15
}
   1fa42:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1fa44:	f7fe fed2 	bl	1e7ec <bt_conn_get_security>
   1fa48:	2802      	cmp	r0, #2
   1fa4a:	d8f6      	bhi.n	1fa3a <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1fa4c:	2005      	movs	r0, #5
   1fa4e:	e7f8      	b.n	1fa42 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1fa50:	2002      	movs	r0, #2
   1fa52:	e7f6      	b.n	1fa42 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1fa54:	2003      	movs	r0, #3
   1fa56:	e7f4      	b.n	1fa42 <bt_gatt_check_perm+0x30>

0001fa58 <gatt_notify>:
{
   1fa58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fa5c:	4614      	mov	r4, r2
   1fa5e:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1fa60:	2214      	movs	r2, #20
   1fa62:	6861      	ldr	r1, [r4, #4]
{
   1fa64:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1fa66:	f7ff ffd4 	bl	1fa12 <bt_gatt_check_perm>
   1fa6a:	bb08      	cbnz	r0, 1fab0 <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   1fa6c:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1fa6e:	211b      	movs	r1, #27
   1fa70:	3202      	adds	r2, #2
   1fa72:	4638      	mov	r0, r7
   1fa74:	f7ff fc24 	bl	1f2c0 <bt_att_create_pdu>
	if (!buf) {
   1fa78:	4605      	mov	r5, r0
   1fa7a:	b1e8      	cbz	r0, 1fab8 <gatt_notify+0x60>
   1fa7c:	f100 0908 	add.w	r9, r0, #8
   1fa80:	2102      	movs	r1, #2
   1fa82:	4648      	mov	r0, r9
   1fa84:	f000 f8cf 	bl	1fc26 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1fa88:	4606      	mov	r6, r0
   1fa8a:	89a1      	ldrh	r1, [r4, #12]
   1fa8c:	f826 8b02 	strh.w	r8, [r6], #2
   1fa90:	4648      	mov	r0, r9
   1fa92:	f000 f8c8 	bl	1fc26 <net_buf_simple_add>
   1fa96:	89a2      	ldrh	r2, [r4, #12]
   1fa98:	68a1      	ldr	r1, [r4, #8]
   1fa9a:	4630      	mov	r0, r6
   1fa9c:	f000 ffed 	bl	20a7a <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1faa0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1faa4:	4629      	mov	r1, r5
   1faa6:	4638      	mov	r0, r7
}
   1faa8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1faac:	f7ff bc89 	b.w	1f3c2 <bt_att_send>
		return -EPERM;
   1fab0:	f04f 30ff 	mov.w	r0, #4294967295
}
   1fab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   1fab8:	f06f 000b 	mvn.w	r0, #11
   1fabc:	e7fa      	b.n	1fab4 <gatt_notify+0x5c>

0001fabe <bt_gatt_change_aware>:
{
   1fabe:	b510      	push	{r4, lr}
   1fac0:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1fac2:	f7f6 facd 	bl	16060 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1fac6:	4603      	mov	r3, r0
   1fac8:	b910      	cbnz	r0, 1fad0 <bt_gatt_change_aware+0x12>
		return true;
   1faca:	2401      	movs	r4, #1
}
   1facc:	4620      	mov	r0, r4
   1face:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1fad0:	7a02      	ldrb	r2, [r0, #8]
   1fad2:	07d2      	lsls	r2, r2, #31
   1fad4:	d5f9      	bpl.n	1faca <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fad6:	f3bf 8f5b 	dmb	ish
   1fada:	68d9      	ldr	r1, [r3, #12]
   1fadc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1fae0:	f011 0101 	ands.w	r1, r1, #1
   1fae4:	f100 000c 	add.w	r0, r0, #12
   1fae8:	d1ef      	bne.n	1faca <bt_gatt_change_aware+0xc>
	if (!req) {
   1faea:	2c00      	cmp	r4, #0
   1faec:	d0ee      	beq.n	1facc <bt_gatt_change_aware+0xe>
   1faee:	f3bf 8f5b 	dmb	ish
   1faf2:	68db      	ldr	r3, [r3, #12]
   1faf4:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1faf8:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1fafc:	079b      	lsls	r3, r3, #30
   1fafe:	d50e      	bpl.n	1fb1e <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fb00:	f3bf 8f5b 	dmb	ish
   1fb04:	e850 3f00 	ldrex	r3, [r0]
   1fb08:	f023 0302 	bic.w	r3, r3, #2
   1fb0c:	e840 3200 	strex	r2, r3, [r0]
   1fb10:	2a00      	cmp	r2, #0
   1fb12:	d1f7      	bne.n	1fb04 <bt_gatt_change_aware+0x46>
   1fb14:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1fb18:	f7ff fd4d 	bl	1f5b6 <atomic_set_bit>
	return false;
   1fb1c:	e7d6      	b.n	1facc <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1fb1e:	2101      	movs	r1, #1
   1fb20:	e7fa      	b.n	1fb18 <bt_gatt_change_aware+0x5a>

0001fb22 <bt_smp_recv>:
{
   1fb22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1fb24:	2100      	movs	r1, #0
   1fb26:	f04f 32ff 	mov.w	r2, #4294967295
   1fb2a:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   1fb2e:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1fb30:	4608      	mov	r0, r1
   1fb32:	f7fe ff6b 	bl	1ea0c <bt_l2cap_create_pdu_timeout>
   1fb36:	f100 0608 	add.w	r6, r0, #8
   1fb3a:	4604      	mov	r4, r0
   1fb3c:	2101      	movs	r1, #1
   1fb3e:	4630      	mov	r0, r6
   1fb40:	f000 f871 	bl	1fc26 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1fb44:	2505      	movs	r5, #5
   1fb46:	7005      	strb	r5, [r0, #0]
   1fb48:	2101      	movs	r1, #1
   1fb4a:	4630      	mov	r0, r6
   1fb4c:	f000 f86b 	bl	1fc26 <net_buf_simple_add>
   1fb50:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1fb52:	7005      	strb	r5, [r0, #0]
   1fb54:	4622      	mov	r2, r4
   1fb56:	9300      	str	r3, [sp, #0]
   1fb58:	2106      	movs	r1, #6
   1fb5a:	4638      	mov	r0, r7
   1fb5c:	f7fe ff59 	bl	1ea12 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   1fb60:	b110      	cbz	r0, 1fb68 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   1fb62:	4620      	mov	r0, r4
   1fb64:	f7f6 ffa6 	bl	16ab4 <net_buf_unref>
}
   1fb68:	2000      	movs	r0, #0
   1fb6a:	b003      	add	sp, #12
   1fb6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fb6e <bt_smp_sign>:
   1fb6e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1fb72:	4770      	bx	lr

0001fb74 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1fb74:	2000      	movs	r0, #0
   1fb76:	4770      	bx	lr

0001fb78 <fixed_data_unref>:
}
   1fb78:	4770      	bx	lr

0001fb7a <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1fb7a:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1fb7c:	6849      	ldr	r1, [r1, #4]
   1fb7e:	6809      	ldr	r1, [r1, #0]
   1fb80:	f7f6 bf0c 	b.w	1699c <net_buf_alloc_len>

0001fb84 <net_buf_get>:
{
   1fb84:	b570      	push	{r4, r5, r6, lr}
   1fb86:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1fb88:	f7f9 f990 	bl	18eac <z_impl_k_queue_get>
	if (!buf) {
   1fb8c:	4605      	mov	r5, r0
   1fb8e:	b128      	cbz	r0, 1fb9c <net_buf_get+0x18>
   1fb90:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1fb92:	7963      	ldrb	r3, [r4, #5]
   1fb94:	f013 0301 	ands.w	r3, r3, #1
   1fb98:	d102      	bne.n	1fba0 <net_buf_get+0x1c>
	frag->frags = NULL;
   1fb9a:	6023      	str	r3, [r4, #0]
}
   1fb9c:	4628      	mov	r0, r5
   1fb9e:	bd70      	pop	{r4, r5, r6, pc}
   1fba0:	2300      	movs	r3, #0
   1fba2:	2200      	movs	r2, #0
   1fba4:	4630      	mov	r0, r6
   1fba6:	f7f9 f981 	bl	18eac <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1fbaa:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1fbac:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1fbae:	f023 0301 	bic.w	r3, r3, #1
   1fbb2:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1fbb4:	4604      	mov	r4, r0
   1fbb6:	e7ec      	b.n	1fb92 <net_buf_get+0xe>

0001fbb8 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1fbb8:	6883      	ldr	r3, [r0, #8]
   1fbba:	440b      	add	r3, r1
   1fbbc:	6003      	str	r3, [r0, #0]
}
   1fbbe:	4770      	bx	lr

0001fbc0 <net_buf_put>:
{
   1fbc0:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1fbc2:	460a      	mov	r2, r1
   1fbc4:	6814      	ldr	r4, [r2, #0]
   1fbc6:	b914      	cbnz	r4, 1fbce <net_buf_put+0xe>
}
   1fbc8:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1fbca:	f000 bb5e 	b.w	2028a <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1fbce:	7953      	ldrb	r3, [r2, #5]
   1fbd0:	f043 0301 	orr.w	r3, r3, #1
   1fbd4:	7153      	strb	r3, [r2, #5]
   1fbd6:	4622      	mov	r2, r4
   1fbd8:	e7f4      	b.n	1fbc4 <net_buf_put+0x4>

0001fbda <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1fbda:	7902      	ldrb	r2, [r0, #4]
   1fbdc:	3201      	adds	r2, #1
   1fbde:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1fbe0:	4770      	bx	lr

0001fbe2 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1fbe2:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1fbe4:	4618      	mov	r0, r3
   1fbe6:	681b      	ldr	r3, [r3, #0]
   1fbe8:	2b00      	cmp	r3, #0
   1fbea:	d1fb      	bne.n	1fbe4 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1fbec:	4770      	bx	lr

0001fbee <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1fbee:	6802      	ldr	r2, [r0, #0]
{
   1fbf0:	b510      	push	{r4, lr}
	if (parent->frags) {
   1fbf2:	b12a      	cbz	r2, 1fc00 <net_buf_frag_insert+0x12>
   1fbf4:	460b      	mov	r3, r1
	while (buf->frags) {
   1fbf6:	461c      	mov	r4, r3
   1fbf8:	681b      	ldr	r3, [r3, #0]
   1fbfa:	2b00      	cmp	r3, #0
   1fbfc:	d1fb      	bne.n	1fbf6 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1fbfe:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1fc00:	6001      	str	r1, [r0, #0]
}
   1fc02:	bd10      	pop	{r4, pc}

0001fc04 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1fc04:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1fc06:	4604      	mov	r4, r0
   1fc08:	b920      	cbnz	r0, 1fc14 <net_buf_frag_add+0x10>
	buf->ref++;
   1fc0a:	790b      	ldrb	r3, [r1, #4]
   1fc0c:	3301      	adds	r3, #1
   1fc0e:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   1fc10:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1fc12:	bd10      	pop	{r4, pc}
   1fc14:	4603      	mov	r3, r0
	while (buf->frags) {
   1fc16:	4618      	mov	r0, r3
   1fc18:	681b      	ldr	r3, [r3, #0]
   1fc1a:	2b00      	cmp	r3, #0
   1fc1c:	d1fb      	bne.n	1fc16 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1fc1e:	f7ff ffe6 	bl	1fbee <net_buf_frag_insert>
   1fc22:	4620      	mov	r0, r4
   1fc24:	e7f5      	b.n	1fc12 <net_buf_frag_add+0xe>

0001fc26 <net_buf_simple_add>:
	return buf->data + buf->len;
   1fc26:	8883      	ldrh	r3, [r0, #4]
   1fc28:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1fc2a:	4419      	add	r1, r3
   1fc2c:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1fc2e:	18d0      	adds	r0, r2, r3
   1fc30:	4770      	bx	lr

0001fc32 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1fc32:	b510      	push	{r4, lr}
   1fc34:	6803      	ldr	r3, [r0, #0]
   1fc36:	8884      	ldrh	r4, [r0, #4]
   1fc38:	4423      	add	r3, r4
	buf->len += len;
   1fc3a:	4414      	add	r4, r2
   1fc3c:	8084      	strh	r4, [r0, #4]
   1fc3e:	4618      	mov	r0, r3
   1fc40:	f000 ff1b 	bl	20a7a <memcpy>
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
}
   1fc44:	bd10      	pop	{r4, pc}

0001fc46 <net_buf_simple_add_u8>:
   1fc46:	8883      	ldrh	r3, [r0, #4]
   1fc48:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1fc4a:	b510      	push	{r4, lr}
	buf->len += len;
   1fc4c:	1c5c      	adds	r4, r3, #1
   1fc4e:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1fc50:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1fc52:	18d0      	adds	r0, r2, r3
   1fc54:	bd10      	pop	{r4, pc}

0001fc56 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1fc56:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1fc58:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1fc5a:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1fc5c:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1fc5e:	4411      	add	r1, r2
	buf->data -= len;
   1fc60:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1fc62:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1fc64:	4770      	bx	lr

0001fc66 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1fc66:	8882      	ldrh	r2, [r0, #4]
   1fc68:	1a52      	subs	r2, r2, r1
{
   1fc6a:	4603      	mov	r3, r0
	buf->len -= len;
   1fc6c:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1fc6e:	6800      	ldr	r0, [r0, #0]
   1fc70:	4408      	add	r0, r1
   1fc72:	6018      	str	r0, [r3, #0]
}
   1fc74:	4770      	bx	lr

0001fc76 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1fc76:	4603      	mov	r3, r0
	void *data = buf->data;
   1fc78:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1fc7a:	889a      	ldrh	r2, [r3, #4]
   1fc7c:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1fc7e:	4401      	add	r1, r0
	buf->len -= len;
   1fc80:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1fc82:	6019      	str	r1, [r3, #0]

	return data;
}
   1fc84:	4770      	bx	lr

0001fc86 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1fc86:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1fc88:	6803      	ldr	r3, [r0, #0]
   1fc8a:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1fc8c:	2102      	movs	r1, #2
   1fc8e:	f7ff ffea 	bl	1fc66 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1fc92:	4620      	mov	r0, r4
   1fc94:	bd10      	pop	{r4, pc}

0001fc96 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1fc96:	6802      	ldr	r2, [r0, #0]
   1fc98:	6880      	ldr	r0, [r0, #8]
}
   1fc9a:	1a10      	subs	r0, r2, r0
   1fc9c:	4770      	bx	lr

0001fc9e <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1fc9e:	8883      	ldrh	r3, [r0, #4]
   1fca0:	88c2      	ldrh	r2, [r0, #6]
   1fca2:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1fca4:	6803      	ldr	r3, [r0, #0]
   1fca6:	6880      	ldr	r0, [r0, #8]
   1fca8:	1a18      	subs	r0, r3, r0
}
   1fcaa:	1a10      	subs	r0, r2, r0
   1fcac:	4770      	bx	lr

0001fcae <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   1fcae:	b570      	push	{r4, r5, r6, lr}
   1fcb0:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1fcb2:	6801      	ldr	r1, [r0, #0]
{
   1fcb4:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1fcb6:	b189      	cbz	r1, 1fcdc <gpio_fire_callbacks+0x2e>
	return node->next;
   1fcb8:	680c      	ldr	r4, [r1, #0]
   1fcba:	2c00      	cmp	r4, #0
   1fcbc:	bf38      	it	cc
   1fcbe:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   1fcc0:	688a      	ldr	r2, [r1, #8]
   1fcc2:	402a      	ands	r2, r5
   1fcc4:	d002      	beq.n	1fccc <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1fcc6:	684b      	ldr	r3, [r1, #4]
   1fcc8:	4630      	mov	r0, r6
   1fcca:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1fccc:	b134      	cbz	r4, 1fcdc <gpio_fire_callbacks+0x2e>
   1fcce:	6823      	ldr	r3, [r4, #0]
   1fcd0:	2b00      	cmp	r3, #0
   1fcd2:	bf38      	it	cc
   1fcd4:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1fcd6:	4621      	mov	r1, r4
   1fcd8:	461c      	mov	r4, r3
   1fcda:	e7f1      	b.n	1fcc0 <gpio_fire_callbacks+0x12>
		}
	}
}
   1fcdc:	bd70      	pop	{r4, r5, r6, pc}

0001fcde <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fcde:	6843      	ldr	r3, [r0, #4]
   1fce0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1fce2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1fce6:	600b      	str	r3, [r1, #0]
}
   1fce8:	2000      	movs	r0, #0
   1fcea:	4770      	bx	lr

0001fcec <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fcec:	6843      	ldr	r3, [r0, #4]
   1fcee:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1fcf0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1fcf4:	4042      	eors	r2, r0
   1fcf6:	400a      	ands	r2, r1
   1fcf8:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1fcfa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1fcfe:	2000      	movs	r0, #0
   1fd00:	4770      	bx	lr

0001fd02 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fd02:	6843      	ldr	r3, [r0, #4]
   1fd04:	685b      	ldr	r3, [r3, #4]
}
   1fd06:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1fd08:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1fd0c:	4770      	bx	lr

0001fd0e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fd0e:	6843      	ldr	r3, [r0, #4]
   1fd10:	685b      	ldr	r3, [r3, #4]
}
   1fd12:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1fd14:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1fd18:	4770      	bx	lr

0001fd1a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fd1a:	6843      	ldr	r3, [r0, #4]
   1fd1c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1fd1e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1fd22:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1fd24:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1fd28:	2000      	movs	r0, #0
   1fd2a:	4770      	bx	lr

0001fd2c <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1fd2c:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
   1fd2e:	6858      	ldr	r0, [r3, #4]
{
   1fd30:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   1fd32:	b158      	cbz	r0, 1fd4c <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1fd34:	2400      	movs	r4, #0
   1fd36:	4281      	cmp	r1, r0
   1fd38:	d113      	bne.n	1fd62 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1fd3a:	6808      	ldr	r0, [r1, #0]
   1fd3c:	b95c      	cbnz	r4, 1fd56 <gpio_nrfx_manage_callback+0x2a>
   1fd3e:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   1fd40:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1fd42:	42a1      	cmp	r1, r4
   1fd44:	d100      	bne.n	1fd48 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1fd46:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1fd48:	2000      	movs	r0, #0
   1fd4a:	6008      	str	r0, [r1, #0]
	if (set) {
   1fd4c:	b972      	cbnz	r2, 1fd6c <gpio_nrfx_manage_callback+0x40>
	return 0;
   1fd4e:	2000      	movs	r0, #0
}
   1fd50:	bd30      	pop	{r4, r5, pc}
   1fd52:	4628      	mov	r0, r5
   1fd54:	e7ef      	b.n	1fd36 <gpio_nrfx_manage_callback+0xa>
   1fd56:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1fd58:	6898      	ldr	r0, [r3, #8]
   1fd5a:	4281      	cmp	r1, r0
	list->tail = node;
   1fd5c:	bf08      	it	eq
   1fd5e:	609c      	streq	r4, [r3, #8]
}
   1fd60:	e7f2      	b.n	1fd48 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1fd62:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1fd64:	4604      	mov	r4, r0
   1fd66:	2d00      	cmp	r5, #0
   1fd68:	d1f3      	bne.n	1fd52 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1fd6a:	b13a      	cbz	r2, 1fd7c <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1fd6c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1fd6e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1fd70:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   1fd72:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1fd74:	2800      	cmp	r0, #0
   1fd76:	d1ea      	bne.n	1fd4e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1fd78:	6099      	str	r1, [r3, #8]
}
   1fd7a:	e7e9      	b.n	1fd50 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1fd7c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1fd80:	e7e6      	b.n	1fd50 <gpio_nrfx_manage_callback+0x24>

0001fd82 <cfg_level_pins>:
{
   1fd82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   1fd86:	6907      	ldr	r7, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1fd88:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1fd8c:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1fd8e:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   1fd92:	4313      	orrs	r3, r2
   1fd94:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   1fd98:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1fd9a:	2500      	movs	r5, #0
	while (level_pins) {
   1fd9c:	b90c      	cbnz	r4, 1fda2 <cfg_level_pins+0x20>
}
   1fd9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1fda2:	4226      	tst	r6, r4
   1fda4:	d010      	beq.n	1fdc8 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1fda6:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1fda8:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1fdac:	40e9      	lsrs	r1, r5
   1fdae:	f001 0101 	and.w	r1, r1, #1
   1fdb2:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1fdb6:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1fdba:	b2c9      	uxtb	r1, r1
   1fdbc:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1fdc0:	f7f6 ff24 	bl	16c0c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1fdc4:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1fdc8:	3501      	adds	r5, #1
		bit <<= 1;
   1fdca:	0076      	lsls	r6, r6, #1
   1fdcc:	e7e6      	b.n	1fd9c <cfg_level_pins+0x1a>

0001fdce <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   1fdce:	07ca      	lsls	r2, r1, #31
	nrfx_twim_t const *inst = &(get_dev_config(dev)->twim);
   1fdd0:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   1fdd2:	d405      	bmi.n	1fde0 <i2c_nrfx_twim_configure+0x12>
	switch (I2C_SPEED_GET(dev_config)) {
   1fdd4:	f3c1 0242 	ubfx	r2, r1, #1, #3
   1fdd8:	2a01      	cmp	r2, #1
   1fdda:	d004      	beq.n	1fde6 <i2c_nrfx_twim_configure+0x18>
   1fddc:	2a02      	cmp	r2, #2
   1fdde:	d00b      	beq.n	1fdf8 <i2c_nrfx_twim_configure+0x2a>
		return -EINVAL;
   1fde0:	f06f 0015 	mvn.w	r0, #21
}
   1fde4:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
   1fde6:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
   1fde8:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   1fdec:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   1fdf0:	6903      	ldr	r3, [r0, #16]
	return 0;
   1fdf2:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   1fdf4:	6359      	str	r1, [r3, #52]	; 0x34
	return 0;
   1fdf6:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
   1fdf8:	681b      	ldr	r3, [r3, #0]
   1fdfa:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   1fdfe:	e7f5      	b.n	1fdec <i2c_nrfx_twim_configure+0x1e>

0001fe00 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   1fe00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1fe02:	460f      	mov	r7, r1
   1fe04:	4616      	mov	r6, r2
	}

#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   1fe06:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   1fe0a:	2400      	movs	r4, #0
	int res = -EINVAL;
   1fe0c:	f06f 0015 	mvn.w	r0, #21
	/** This is a call from a secure app, in which case entropy is
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   1fe10:	42a6      	cmp	r6, r4
   1fe12:	d801      	bhi.n	1fe18 <entropy_cc3xx_rng_get_entropy+0x18>
		offset += chunk_size;
	}
#endif

	return res;
}
   1fe14:	b003      	add	sp, #12
   1fe16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1fe18:	1b33      	subs	r3, r6, r4
   1fe1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1fe1e:	bf38      	it	cc
   1fe20:	461d      	movcc	r5, r3
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
   1fe22:	462a      	mov	r2, r5
   1fe24:	ab01      	add	r3, sp, #4
   1fe26:	1939      	adds	r1, r7, r4
   1fe28:	2000      	movs	r0, #0
   1fe2a:	f7fa f8b7 	bl	19f9c <nrf_cc3xx_platform_ctr_drbg_get>
		if (olen != chunk_size) {
   1fe2e:	9b01      	ldr	r3, [sp, #4]
   1fe30:	42ab      	cmp	r3, r5
   1fe32:	d103      	bne.n	1fe3c <entropy_cc3xx_rng_get_entropy+0x3c>
		if (res != 0) {
   1fe34:	2800      	cmp	r0, #0
   1fe36:	d1ed      	bne.n	1fe14 <entropy_cc3xx_rng_get_entropy+0x14>
		offset += chunk_size;
   1fe38:	442c      	add	r4, r5
   1fe3a:	e7e9      	b.n	1fe10 <entropy_cc3xx_rng_get_entropy+0x10>
			return -EINVAL;
   1fe3c:	f06f 0015 	mvn.w	r0, #21
   1fe40:	e7e8      	b.n	1fe14 <entropy_cc3xx_rng_get_entropy+0x14>

0001fe42 <entropy_cc3xx_rng_init>:
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   1fe42:	2200      	movs	r2, #0
{
   1fe44:	b508      	push	{r3, lr}
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   1fe46:	4611      	mov	r1, r2
   1fe48:	4610      	mov	r0, r2
   1fe4a:	f7fa f873 	bl	19f34 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
   1fe4e:	2800      	cmp	r0, #0
			return -EINVAL;
		}
	#endif

	return 0;
}
   1fe50:	bf18      	it	ne
   1fe52:	f06f 0015 	mvnne.w	r0, #21
   1fe56:	bd08      	pop	{r3, pc}

0001fe58 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1fe58:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   1fe5a:	2000      	movs	r0, #0
   1fe5c:	f7f3 fa96 	bl	1338c <sys_arch_reboot>

0001fe60 <sdc_assertion_handler>:
	k_oops();
   1fe60:	4040      	eors	r0, r0
   1fe62:	f380 8811 	msr	BASEPRI, r0
   1fe66:	f04f 0003 	mov.w	r0, #3
   1fe6a:	df02      	svc	2
}
   1fe6c:	4770      	bx	lr

0001fe6e <rand_prio_high_vector_get>:
   1fe6e:	f7f7 bb57 	b.w	17520 <rand_prio_low_vector_get>

0001fe72 <m_assert_handler>:
	k_oops();
   1fe72:	4040      	eors	r0, r0
   1fe74:	f380 8811 	msr	BASEPRI, r0
   1fe78:	f04f 0003 	mov.w	r0, #3
   1fe7c:	df02      	svc	2
}
   1fe7e:	4770      	bx	lr

0001fe80 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1fe80:	4668      	mov	r0, sp
   1fe82:	f020 0107 	bic.w	r1, r0, #7
   1fe86:	468d      	mov	sp, r1
   1fe88:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   1fe8a:	f7e3 fb9b 	bl	35c4 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   1fe8e:	f7f2 ff41 	bl	12d14 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1fe92:	f7f3 f917 	bl	130c4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1fe96:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1fe9a:	4685      	mov	sp, r0
   1fe9c:	4770      	bx	lr

0001fe9e <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1fe9e:	4668      	mov	r0, sp
   1fea0:	f020 0107 	bic.w	r1, r0, #7
   1fea4:	468d      	mov	sp, r1
   1fea6:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   1fea8:	f7e3 fb0e 	bl	34c8 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   1feac:	f7f2 ff32 	bl	12d14 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1feb0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1feb4:	4685      	mov	sp, r0
   1feb6:	4770      	bx	lr

0001feb8 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1feb8:	4668      	mov	r0, sp
   1feba:	f020 0107 	bic.w	r1, r0, #7
   1febe:	468d      	mov	sp, r1
   1fec0:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   1fec2:	f7ec fa5b 	bl	c37c <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   1fec6:	f7f2 ff25 	bl	12d14 <_arch_isr_direct_pm>
   1feca:	f7f3 f8fb 	bl	130c4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1fece:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1fed2:	4685      	mov	sp, r0
   1fed4:	4770      	bx	lr

0001fed6 <nrfx_clock_stop>:
	switch (domain) {
   1fed6:	2801      	cmp	r0, #1
   1fed8:	d101      	bne.n	1fede <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   1feda:	f7e4 b969 	b.w	41b0 <mpsl_clock_hfclk_release>
}
   1fede:	4770      	bx	lr

0001fee0 <nrfx_clock_enable>:
}
   1fee0:	4770      	bx	lr

0001fee2 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   1fee2:	f7e3 bf83 	b.w	3dec <MPSL_IRQ_CLOCK_Handler>

0001fee6 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   1fee6:	f7f9 bfc9 	b.w	19e7c <nrf_cc3xx_platform_init>

0001feea <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   1feea:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1feec:	f7f2 fda8 	bl	12a40 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1fef0:	f7f2 fe5a 	bl	12ba8 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   1fef4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   1fef8:	f7f9 bfc0 	b.w	19e7c <nrf_cc3xx_platform_init>

0001fefc <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1fefc:	4700      	bx	r0

0001fefe <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1fefe:	f000 bc26 	b.w	2074e <z_impl_k_busy_wait>

0001ff02 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   1ff02:	7b0a      	ldrb	r2, [r1, #12]
{
   1ff04:	4603      	mov	r3, r0
   1ff06:	2a03      	cmp	r2, #3
   1ff08:	d829      	bhi.n	1ff5e <xfer_completeness_check+0x5c>
   1ff0a:	e8df f002 	tbb	[pc, r2]
   1ff0e:	2521      	.short	0x2521
   1ff10:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1ff12:	688a      	ldr	r2, [r1, #8]
   1ff14:	0350      	lsls	r0, r2, #13
   1ff16:	d504      	bpl.n	1ff22 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   1ff18:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   1ff1c:	6908      	ldr	r0, [r1, #16]
   1ff1e:	4290      	cmp	r0, r2
   1ff20:	d107      	bne.n	1ff32 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1ff22:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   1ff24:	0352      	lsls	r2, r2, #13
   1ff26:	d41a      	bmi.n	1ff5e <xfer_completeness_check+0x5c>
   1ff28:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1ff2c:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1ff2e:	4291      	cmp	r1, r2
   1ff30:	d015      	beq.n	1ff5e <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1ff32:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1ff34:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1ff36:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1ff3a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1ff3e:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   1ff40:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1ff44:	6908      	ldr	r0, [r1, #16]
   1ff46:	4290      	cmp	r0, r2
   1ff48:	d1f3      	bne.n	1ff32 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   1ff4a:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   1ff4e:	e7ed      	b.n	1ff2c <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   1ff50:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1ff54:	6909      	ldr	r1, [r1, #16]
   1ff56:	e7ea      	b.n	1ff2e <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   1ff58:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   1ff5c:	e7fa      	b.n	1ff54 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   1ff5e:	2001      	movs	r0, #1
}
   1ff60:	4770      	bx	lr

0001ff62 <nrf_gpio_pin_set>:
{
   1ff62:	b507      	push	{r0, r1, r2, lr}
   1ff64:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ff66:	a801      	add	r0, sp, #4
   1ff68:	f7f8 fc06 	bl	18778 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ff6c:	9a01      	ldr	r2, [sp, #4]
   1ff6e:	2301      	movs	r3, #1
   1ff70:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1ff72:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   1ff76:	b003      	add	sp, #12
   1ff78:	f85d fb04 	ldr.w	pc, [sp], #4

0001ff7c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1ff7c:	f7f8 bc6e 	b.w	1885c <_DoInit>

0001ff80 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1ff80:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1ff82:	f7ff fffb 	bl	1ff7c <SEGGER_RTT_Init>

	return 0;
}
   1ff86:	2000      	movs	r0, #0
   1ff88:	bd08      	pop	{r3, pc}

0001ff8a <z_device_state_init>:
}
   1ff8a:	4770      	bx	lr

0001ff8c <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1ff8c:	b138      	cbz	r0, 1ff9e <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1ff8e:	68c3      	ldr	r3, [r0, #12]
   1ff90:	8818      	ldrh	r0, [r3, #0]
   1ff92:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1ff96:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1ff9a:	4258      	negs	r0, r3
   1ff9c:	4158      	adcs	r0, r3
}
   1ff9e:	4770      	bx	lr

0001ffa0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1ffa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ffa2:	4605      	mov	r5, r0
   1ffa4:	460e      	mov	r6, r1
	__asm__ volatile(
   1ffa6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ffaa:	f3ef 8711 	mrs	r7, BASEPRI
   1ffae:	f383 8811 	msr	BASEPRI, r3
   1ffb2:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1ffb6:	f7f9 fccb 	bl	19950 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1ffba:	4631      	mov	r1, r6
   1ffbc:	4604      	mov	r4, r0
   1ffbe:	4628      	mov	r0, r5
   1ffc0:	f7ff ff4a 	bl	1fe58 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1ffc4:	f387 8811 	msr	BASEPRI, r7
   1ffc8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1ffcc:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1ffce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1ffd2:	f7f3 b8d3 	b.w	1317c <z_impl_k_thread_abort>

0001ffd6 <k_heap_init>:
{
   1ffd6:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1ffd8:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1ffdc:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1ffe0:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1ffe2:	f7fd bb44 	b.w	1d66e <sys_heap_init>

0001ffe6 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1ffe6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ffea:	b087      	sub	sp, #28
   1ffec:	4604      	mov	r4, r0
   1ffee:	460e      	mov	r6, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1fff0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   1fff4:	4617      	mov	r7, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1fff6:	f000 fbae 	bl	20756 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1fffa:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1fffe:	4605      	mov	r5, r0
   20000:	4688      	mov	r8, r1
	__asm__ volatile(
   20002:	f04f 0340 	mov.w	r3, #64	; 0x40
   20006:	f3ef 8b11 	mrs	fp, BASEPRI
   2000a:	f383 8811 	msr	BASEPRI, r3
   2000e:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   20012:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   20016:	463a      	mov	r2, r7
   20018:	4631      	mov	r1, r6
   2001a:	4620      	mov	r0, r4
   2001c:	f7fd faac 	bl	1d578 <sys_heap_aligned_alloc>
   20020:	9005      	str	r0, [sp, #20]
		now = sys_clock_tick_get();
   20022:	f7f9 fe6d 	bl	19d00 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   20026:	9b05      	ldr	r3, [sp, #20]
   20028:	b13b      	cbz	r3, 2003a <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   2002a:	f38b 8811 	msr	BASEPRI, fp
   2002e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   20032:	4618      	mov	r0, r3
   20034:	b007      	add	sp, #28
   20036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2003a:	1a2a      	subs	r2, r5, r0
   2003c:	9202      	str	r2, [sp, #8]
   2003e:	eb68 0201 	sbc.w	r2, r8, r1
   20042:	9203      	str	r2, [sp, #12]
   20044:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   20048:	2901      	cmp	r1, #1
   2004a:	f172 0200 	sbcs.w	r2, r2, #0
   2004e:	dbec      	blt.n	2002a <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   20050:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20054:	4659      	mov	r1, fp
   20056:	e9cd 2300 	strd	r2, r3, [sp]
   2005a:	4648      	mov	r0, r9
   2005c:	4652      	mov	r2, sl
   2005e:	f7f9 fa3f 	bl	194e0 <z_pend_curr>
	__asm__ volatile(
   20062:	f04f 0340 	mov.w	r3, #64	; 0x40
   20066:	f3ef 8b11 	mrs	fp, BASEPRI
   2006a:	f383 8811 	msr	BASEPRI, r3
   2006e:	f3bf 8f6f 	isb	sy
   20072:	e7d0      	b.n	20016 <k_heap_aligned_alloc+0x30>

00020074 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   20074:	b538      	push	{r3, r4, r5, lr}
   20076:	4604      	mov	r4, r0
   20078:	f04f 0340 	mov.w	r3, #64	; 0x40
   2007c:	f3ef 8511 	mrs	r5, BASEPRI
   20080:	f383 8811 	msr	BASEPRI, r3
   20084:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   20088:	f7fd fa29 	bl	1d4de <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2008c:	f104 000c 	add.w	r0, r4, #12
   20090:	f000 faea 	bl	20668 <z_unpend_all>
   20094:	b130      	cbz	r0, 200a4 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   20096:	4629      	mov	r1, r5
   20098:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2009c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   200a0:	f7f9 b99a 	b.w	193d8 <z_reschedule>
	__asm__ volatile(
   200a4:	f385 8811 	msr	BASEPRI, r5
   200a8:	f3bf 8f6f 	isb	sy
}
   200ac:	bd38      	pop	{r3, r4, r5, pc}

000200ae <k_mem_slab_init>:
{
   200ae:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   200b0:	2400      	movs	r4, #0
   200b2:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   200b4:	ea41 0402 	orr.w	r4, r1, r2
   200b8:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   200bc:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   200c0:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   200c2:	d10c      	bne.n	200de <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   200c4:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   200c6:	42a3      	cmp	r3, r4
   200c8:	d103      	bne.n	200d2 <k_mem_slab_init+0x24>
   200ca:	e9c0 0000 	strd	r0, r0, [r0]
}
   200ce:	2000      	movs	r0, #0
}
   200d0:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   200d2:	6945      	ldr	r5, [r0, #20]
   200d4:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   200d6:	3401      	adds	r4, #1
		slab->free_list = p;
   200d8:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   200da:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   200dc:	e7f3      	b.n	200c6 <k_mem_slab_init+0x18>
		return -EINVAL;
   200de:	f06f 0015 	mvn.w	r0, #21
	return rc;
   200e2:	e7f5      	b.n	200d0 <k_mem_slab_init+0x22>

000200e4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   200e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   200e6:	4604      	mov	r4, r0
   200e8:	460d      	mov	r5, r1
	__asm__ volatile(
   200ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   200ee:	f3ef 8611 	mrs	r6, BASEPRI
   200f2:	f383 8811 	msr	BASEPRI, r3
   200f6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   200fa:	6947      	ldr	r7, [r0, #20]
   200fc:	b977      	cbnz	r7, 2011c <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   200fe:	f000 fa9b 	bl	20638 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   20102:	b158      	cbz	r0, 2011c <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   20104:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   20106:	6142      	str	r2, [r0, #20]
   20108:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   2010a:	f000 fa63 	bl	205d4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2010e:	4631      	mov	r1, r6
   20110:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   20114:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   20118:	f7f9 b95e 	b.w	193d8 <z_reschedule>
	**(char ***) mem = slab->free_list;
   2011c:	682b      	ldr	r3, [r5, #0]
   2011e:	6962      	ldr	r2, [r4, #20]
   20120:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   20122:	682b      	ldr	r3, [r5, #0]
   20124:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   20126:	69a3      	ldr	r3, [r4, #24]
   20128:	3b01      	subs	r3, #1
   2012a:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2012c:	f386 8811 	msr	BASEPRI, r6
   20130:	f3bf 8f6f 	isb	sy
}
   20134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020136 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   20136:	f3ef 8005 	mrs	r0, IPSR
}
   2013a:	3800      	subs	r0, #0
   2013c:	bf18      	it	ne
   2013e:	2001      	movne	r0, #1
   20140:	4770      	bx	lr

00020142 <z_impl_k_thread_name_set>:
}
   20142:	f06f 0057 	mvn.w	r0, #87	; 0x57
   20146:	4770      	bx	lr

00020148 <z_impl_k_thread_start>:
	z_sched_start(thread);
   20148:	f7f9 bae4 	b.w	19714 <z_sched_start>

0002014c <z_pm_save_idle_exit>:
{
   2014c:	b508      	push	{r3, lr}
	pm_system_resume();
   2014e:	f7f2 f8ed 	bl	1232c <pm_system_resume>
}
   20152:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   20156:	f7fd bbe3 	b.w	1d920 <sys_clock_idle_exit>

0002015a <z_impl_k_mutex_init>:
{
   2015a:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2015c:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2015e:	e9c3 0002 	strd	r0, r0, [r3, #8]
   20162:	e9c3 3300 	strd	r3, r3, [r3]
}
   20166:	4770      	bx	lr

00020168 <queue_insert>:
{
   20168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2016c:	4699      	mov	r9, r3
   2016e:	4604      	mov	r4, r0
   20170:	f89d 3020 	ldrb.w	r3, [sp, #32]
   20174:	460d      	mov	r5, r1
   20176:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20178:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2017c:	f04f 0240 	mov.w	r2, #64	; 0x40
   20180:	f3ef 8711 	mrs	r7, BASEPRI
   20184:	f382 8811 	msr	BASEPRI, r2
   20188:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2018c:	b103      	cbz	r3, 20190 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   2018e:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   20190:	4630      	mov	r0, r6
   20192:	f000 fa51 	bl	20638 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   20196:	b158      	cbz	r0, 201b0 <queue_insert+0x48>
   20198:	2400      	movs	r4, #0
   2019a:	67c4      	str	r4, [r0, #124]	; 0x7c
   2019c:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   201a0:	f000 fa18 	bl	205d4 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   201a4:	4630      	mov	r0, r6
   201a6:	4639      	mov	r1, r7
   201a8:	f7f9 f916 	bl	193d8 <z_reschedule>
	return 0;
   201ac:	2000      	movs	r0, #0
   201ae:	e00c      	b.n	201ca <queue_insert+0x62>
	if (alloc) {
   201b0:	f1b9 0f00 	cmp.w	r9, #0
   201b4:	d01b      	beq.n	201ee <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   201b6:	2108      	movs	r1, #8
   201b8:	f7f9 fe40 	bl	19e3c <z_thread_aligned_alloc>
		if (anode == NULL) {
   201bc:	b938      	cbnz	r0, 201ce <queue_insert+0x66>
	__asm__ volatile(
   201be:	f387 8811 	msr	BASEPRI, r7
   201c2:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   201c6:	f06f 000b 	mvn.w	r0, #11
}
   201ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   201ce:	2301      	movs	r3, #1
		anode->data = data;
   201d0:	f8c0 8004 	str.w	r8, [r0, #4]
   201d4:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   201d6:	6803      	ldr	r3, [r0, #0]
   201d8:	f003 0203 	and.w	r2, r3, #3
   201dc:	b95d      	cbnz	r5, 201f6 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   201de:	6823      	ldr	r3, [r4, #0]
   201e0:	4313      	orrs	r3, r2
   201e2:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   201e4:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   201e6:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   201e8:	b973      	cbnz	r3, 20208 <queue_insert+0xa0>
	list->tail = node;
   201ea:	6060      	str	r0, [r4, #4]
}
   201ec:	e00c      	b.n	20208 <queue_insert+0xa0>
	node->next_and_flags = flags;
   201ee:	f8c8 9000 	str.w	r9, [r8]
}
   201f2:	4640      	mov	r0, r8
   201f4:	e7ef      	b.n	201d6 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   201f6:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   201f8:	f033 0303 	bics.w	r3, r3, #3
   201fc:	d110      	bne.n	20220 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   201fe:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   20200:	6862      	ldr	r2, [r4, #4]
   20202:	b93a      	cbnz	r2, 20214 <queue_insert+0xac>
	list->head = node;
   20204:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   20208:	2104      	movs	r1, #4
   2020a:	f104 0010 	add.w	r0, r4, #16
   2020e:	f000 fc0f 	bl	20a30 <z_handle_obj_poll_events>
   20212:	e7c7      	b.n	201a4 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20214:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20216:	f003 0303 	and.w	r3, r3, #3
   2021a:	4303      	orrs	r3, r0
   2021c:	6013      	str	r3, [r2, #0]
   2021e:	e7e4      	b.n	201ea <queue_insert+0x82>
   20220:	4313      	orrs	r3, r2
   20222:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20224:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20226:	f003 0303 	and.w	r3, r3, #3
   2022a:	4303      	orrs	r3, r0
   2022c:	602b      	str	r3, [r5, #0]
}
   2022e:	e7eb      	b.n	20208 <queue_insert+0xa0>

00020230 <z_queue_node_peek>:
{
   20230:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   20232:	4604      	mov	r4, r0
   20234:	b130      	cbz	r0, 20244 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20236:	6802      	ldr	r2, [r0, #0]
   20238:	0793      	lsls	r3, r2, #30
   2023a:	d003      	beq.n	20244 <z_queue_node_peek+0x14>
		ret = anode->data;
   2023c:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2023e:	b109      	cbz	r1, 20244 <z_queue_node_peek+0x14>
			k_free(anode);
   20240:	f000 fc04 	bl	20a4c <k_free>
}
   20244:	4620      	mov	r0, r4
   20246:	bd10      	pop	{r4, pc}

00020248 <z_impl_k_queue_init>:
	list->head = NULL;
   20248:	2300      	movs	r3, #0
	list->tail = NULL;
   2024a:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   2024e:	f100 0308 	add.w	r3, r0, #8
   20252:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   20256:	f100 0310 	add.w	r3, r0, #16
   2025a:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2025e:	4770      	bx	lr

00020260 <k_queue_append>:
{
   20260:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   20262:	2301      	movs	r3, #1
   20264:	9300      	str	r3, [sp, #0]
   20266:	2300      	movs	r3, #0
{
   20268:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2026a:	4619      	mov	r1, r3
   2026c:	f7ff ff7c 	bl	20168 <queue_insert>
}
   20270:	b003      	add	sp, #12
   20272:	f85d fb04 	ldr.w	pc, [sp], #4

00020276 <k_queue_prepend>:
{
   20276:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   20278:	2300      	movs	r3, #0
{
   2027a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2027c:	9300      	str	r3, [sp, #0]
   2027e:	4619      	mov	r1, r3
   20280:	f7ff ff72 	bl	20168 <queue_insert>
}
   20284:	b003      	add	sp, #12
   20286:	f85d fb04 	ldr.w	pc, [sp], #4

0002028a <k_queue_append_list>:
{
   2028a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2028e:	4605      	mov	r5, r0
   20290:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   20292:	460c      	mov	r4, r1
   20294:	b391      	cbz	r1, 202fc <k_queue_append_list+0x72>
   20296:	b38a      	cbz	r2, 202fc <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20298:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   2029c:	f04f 0340 	mov.w	r3, #64	; 0x40
   202a0:	f3ef 8811 	mrs	r8, BASEPRI
   202a4:	f383 8811 	msr	BASEPRI, r3
   202a8:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   202ac:	4638      	mov	r0, r7
   202ae:	f000 f9c3 	bl	20638 <z_unpend_first_thread>
   202b2:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   202b6:	b920      	cbnz	r0, 202c2 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   202b8:	686b      	ldr	r3, [r5, #4]
   202ba:	b9cb      	cbnz	r3, 202f0 <k_queue_append_list+0x66>
	list->head = node;
   202bc:	602c      	str	r4, [r5, #0]
	list->tail = node;
   202be:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   202c0:	e00a      	b.n	202d8 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   202c2:	6144      	str	r4, [r0, #20]
   202c4:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   202c8:	f000 f984 	bl	205d4 <z_ready_thread>
		head = *(void **)head;
   202cc:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   202ce:	4638      	mov	r0, r7
   202d0:	f000 f9b2 	bl	20638 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   202d4:	2c00      	cmp	r4, #0
   202d6:	d1ee      	bne.n	202b6 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   202d8:	2104      	movs	r1, #4
   202da:	f105 0010 	add.w	r0, r5, #16
   202de:	f000 fba7 	bl	20a30 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   202e2:	4638      	mov	r0, r7
   202e4:	4641      	mov	r1, r8
   202e6:	f7f9 f877 	bl	193d8 <z_reschedule>
	return 0;
   202ea:	2000      	movs	r0, #0
}
   202ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   202f0:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   202f2:	f001 0103 	and.w	r1, r1, #3
   202f6:	430c      	orrs	r4, r1
   202f8:	601c      	str	r4, [r3, #0]
}
   202fa:	e7e0      	b.n	202be <k_queue_append_list+0x34>
		return -EINVAL;
   202fc:	f06f 0015 	mvn.w	r0, #21
   20300:	e7f4      	b.n	202ec <k_queue_append_list+0x62>

00020302 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   20302:	b15a      	cbz	r2, 2031c <z_impl_k_sem_init+0x1a>
   20304:	428a      	cmp	r2, r1
   20306:	d309      	bcc.n	2031c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   20308:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2030c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   20310:	e9c0 0000 	strd	r0, r0, [r0]
   20314:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   20318:	2000      	movs	r0, #0
   2031a:	4770      	bx	lr
		return -EINVAL;
   2031c:	f06f 0015 	mvn.w	r0, #21
}
   20320:	4770      	bx	lr

00020322 <notify_queue_locked>:
	if (queue != NULL) {
   20322:	b120      	cbz	r0, 2032e <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   20324:	2200      	movs	r2, #0
   20326:	4611      	mov	r1, r2
   20328:	3088      	adds	r0, #136	; 0x88
   2032a:	f000 b9ad 	b.w	20688 <z_sched_wake>
}
   2032e:	4770      	bx	lr

00020330 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   20330:	68c3      	ldr	r3, [r0, #12]
{
   20332:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   20334:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   20338:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2033c:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   2033e:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   20340:	d502      	bpl.n	20348 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   20342:	3010      	adds	r0, #16
   20344:	f000 f9bd 	bl	206c2 <z_abort_timeout>
}
   20348:	4620      	mov	r0, r4
   2034a:	bd10      	pop	{r4, pc}

0002034c <cancel_async_locked>:
{
   2034c:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2034e:	68c0      	ldr	r0, [r0, #12]
{
   20350:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20352:	0784      	lsls	r4, r0, #30
   20354:	f3c0 0140 	ubfx	r1, r0, #1, #1
   20358:	d416      	bmi.n	20388 <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   2035a:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2035e:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   20360:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   20362:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   20364:	d510      	bpl.n	20388 <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20366:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   2036a:	b168      	cbz	r0, 20388 <cancel_async_locked+0x3c>
   2036c:	4283      	cmp	r3, r0
   2036e:	d11d      	bne.n	203ac <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   20370:	6818      	ldr	r0, [r3, #0]
   20372:	b999      	cbnz	r1, 2039c <cancel_async_locked+0x50>
   20374:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   20378:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   2037c:	428b      	cmp	r3, r1
   2037e:	d101      	bne.n	20384 <cancel_async_locked+0x38>
	list->tail = node;
   20380:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   20384:	2200      	movs	r2, #0
   20386:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   20388:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   2038a:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   2038e:	bf1e      	ittt	ne
   20390:	f042 0202 	orrne.w	r2, r2, #2
   20394:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   20396:	f002 000f 	andne.w	r0, r2, #15
}
   2039a:	bd10      	pop	{r4, pc}
   2039c:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2039e:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   203a2:	4283      	cmp	r3, r0
	list->tail = node;
   203a4:	bf08      	it	eq
   203a6:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   203aa:	e7eb      	b.n	20384 <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   203ac:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   203ae:	6800      	ldr	r0, [r0, #0]
   203b0:	e7db      	b.n	2036a <cancel_async_locked+0x1e>

000203b2 <work_timeout>:
{
   203b2:	b513      	push	{r0, r1, r4, lr}
   203b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   203b8:	f3ef 8411 	mrs	r4, BASEPRI
   203bc:	f383 8811 	msr	BASEPRI, r3
   203c0:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   203c4:	2300      	movs	r3, #0
   203c6:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   203c8:	f850 3c04 	ldr.w	r3, [r0, #-4]
	*flagp &= ~BIT(bit);
   203cc:	f023 0208 	bic.w	r2, r3, #8
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   203d0:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   203d2:	f840 2c04 	str.w	r2, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   203d6:	d505      	bpl.n	203e4 <work_timeout+0x32>
		queue = dw->queue;
   203d8:	6983      	ldr	r3, [r0, #24]
   203da:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   203dc:	a901      	add	r1, sp, #4
   203de:	3810      	subs	r0, #16
   203e0:	f7f8 febe 	bl	19160 <submit_to_queue_locked>
	__asm__ volatile(
   203e4:	f384 8811 	msr	BASEPRI, r4
   203e8:	f3bf 8f6f 	isb	sy
}
   203ec:	b002      	add	sp, #8
   203ee:	bd10      	pop	{r4, pc}

000203f0 <k_work_init>:
{
   203f0:	b538      	push	{r3, r4, r5, lr}
   203f2:	4604      	mov	r4, r0
   203f4:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   203f6:	2210      	movs	r2, #16
   203f8:	2100      	movs	r1, #0
   203fa:	f000 fb79 	bl	20af0 <memset>
   203fe:	6065      	str	r5, [r4, #4]
}
   20400:	bd38      	pop	{r3, r4, r5, pc}

00020402 <k_work_submit_to_queue>:
{
   20402:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20404:	9001      	str	r0, [sp, #4]
   20406:	4608      	mov	r0, r1
	__asm__ volatile(
   20408:	f04f 0340 	mov.w	r3, #64	; 0x40
   2040c:	f3ef 8511 	mrs	r5, BASEPRI
   20410:	f383 8811 	msr	BASEPRI, r3
   20414:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   20418:	a901      	add	r1, sp, #4
   2041a:	f7f8 fea1 	bl	19160 <submit_to_queue_locked>
   2041e:	4604      	mov	r4, r0
	__asm__ volatile(
   20420:	f385 8811 	msr	BASEPRI, r5
   20424:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   20428:	2800      	cmp	r0, #0
   2042a:	dd04      	ble.n	20436 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   2042c:	f7f9 fa96 	bl	1995c <z_impl_k_is_preempt_thread>
   20430:	b108      	cbz	r0, 20436 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   20432:	f7f9 f9e5 	bl	19800 <z_impl_k_yield>
}
   20436:	4620      	mov	r0, r4
   20438:	b003      	add	sp, #12
   2043a:	bd30      	pop	{r4, r5, pc}

0002043c <k_work_init_delayable>:
{
   2043c:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   2043e:	2230      	movs	r2, #48	; 0x30
{
   20440:	4604      	mov	r4, r0
   20442:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   20444:	2100      	movs	r1, #0
   20446:	f000 fb53 	bl	20af0 <memset>
   2044a:	f44f 7380 	mov.w	r3, #256	; 0x100
   2044e:	6065      	str	r5, [r4, #4]
   20450:	60e3      	str	r3, [r4, #12]
}
   20452:	bd38      	pop	{r3, r4, r5, pc}

00020454 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   20454:	b538      	push	{r3, r4, r5, lr}
   20456:	4604      	mov	r4, r0
	__asm__ volatile(
   20458:	f04f 0340 	mov.w	r3, #64	; 0x40
   2045c:	f3ef 8511 	mrs	r5, BASEPRI
   20460:	f383 8811 	msr	BASEPRI, r3
   20464:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   20468:	f7ff ff62 	bl	20330 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2046c:	4620      	mov	r0, r4
   2046e:	f7ff ff6d 	bl	2034c <cancel_async_locked>
	__asm__ volatile(
   20472:	f385 8811 	msr	BASEPRI, r5
   20476:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2047a:	bd38      	pop	{r3, r4, r5, pc}

0002047c <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2047e:	4604      	mov	r4, r0
   20480:	460d      	mov	r5, r1
	__asm__ volatile(
   20482:	f04f 0340 	mov.w	r3, #64	; 0x40
   20486:	f3ef 8711 	mrs	r7, BASEPRI
   2048a:	f383 8811 	msr	BASEPRI, r3
   2048e:	f3bf 8f6f 	isb	sy
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20492:	f3bf 8f5b 	dmb	ish
   20496:	68c3      	ldr	r3, [r0, #12]
   20498:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   2049c:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   204a0:	2b00      	cmp	r3, #0
   204a2:	bf14      	ite	ne
   204a4:	2601      	movne	r6, #1
   204a6:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   204a8:	d009      	beq.n	204be <k_work_cancel_delayable_sync+0x42>
	(void)unschedule_locked(dwork);
   204aa:	f7ff ff41 	bl	20330 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   204ae:	4620      	mov	r0, r4
   204b0:	f7ff ff4c 	bl	2034c <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   204b4:	4629      	mov	r1, r5
   204b6:	4620      	mov	r0, r4
   204b8:	f7f8 fe34 	bl	19124 <cancel_sync_locked>
   204bc:	4603      	mov	r3, r0
	__asm__ volatile(
   204be:	f387 8811 	msr	BASEPRI, r7
   204c2:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   204c6:	b13b      	cbz	r3, 204d8 <k_work_cancel_delayable_sync+0x5c>
	return z_impl_k_sem_take(sem, timeout);
   204c8:	f04f 32ff 	mov.w	r2, #4294967295
   204cc:	f04f 33ff 	mov.w	r3, #4294967295
   204d0:	f105 0008 	add.w	r0, r5, #8
   204d4:	f7f8 fd44 	bl	18f60 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   204d8:	4630      	mov	r0, r6
   204da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000204dc <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   204dc:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   204e0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   204e2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   204e4:	2300      	movs	r3, #0
	node->prev = NULL;
   204e6:	e9c0 3300 	strd	r3, r3, [r0]
}
   204ea:	4770      	bx	lr

000204ec <unpend_thread_no_timeout>:
{
   204ec:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   204ee:	f7ff fff5 	bl	204dc <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   204f2:	7b43      	ldrb	r3, [r0, #13]
   204f4:	f023 0302 	bic.w	r3, r3, #2
   204f8:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   204fa:	2300      	movs	r3, #0
   204fc:	6083      	str	r3, [r0, #8]
}
   204fe:	bd08      	pop	{r3, pc}

00020500 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   20500:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   20504:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   20508:	4283      	cmp	r3, r0
		return b2 - b1;
   2050a:	bf14      	ite	ne
   2050c:	1ac0      	subne	r0, r0, r3
	return 0;
   2050e:	2000      	moveq	r0, #0
}
   20510:	4770      	bx	lr

00020512 <z_unpend_thread>:
{
   20512:	b510      	push	{r4, lr}
	__asm__ volatile(
   20514:	f04f 0340 	mov.w	r3, #64	; 0x40
   20518:	f3ef 8411 	mrs	r4, BASEPRI
   2051c:	f383 8811 	msr	BASEPRI, r3
   20520:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   20524:	f7ff ffe2 	bl	204ec <unpend_thread_no_timeout>
	__asm__ volatile(
   20528:	f384 8811 	msr	BASEPRI, r4
   2052c:	f3bf 8f6f 	isb	sy
}
   20530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20534:	3018      	adds	r0, #24
   20536:	f000 b8c4 	b.w	206c2 <z_abort_timeout>

0002053a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2053a:	4603      	mov	r3, r0
   2053c:	b920      	cbnz	r0, 20548 <z_reschedule_irqlock+0xe>
   2053e:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   20542:	b90a      	cbnz	r2, 20548 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   20544:	f7f2 bb46 	b.w	12bd4 <arch_swap>
   20548:	f383 8811 	msr	BASEPRI, r3
   2054c:	f3bf 8f6f 	isb	sy
}
   20550:	4770      	bx	lr

00020552 <z_reschedule_unlocked>:
	__asm__ volatile(
   20552:	f04f 0340 	mov.w	r3, #64	; 0x40
   20556:	f3ef 8011 	mrs	r0, BASEPRI
   2055a:	f383 8811 	msr	BASEPRI, r3
   2055e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   20562:	f7ff bfea 	b.w	2053a <z_reschedule_irqlock>

00020566 <z_priq_dumb_best>:
{
   20566:	4603      	mov	r3, r0
	return list->head == list;
   20568:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2056a:	4283      	cmp	r3, r0
   2056c:	d003      	beq.n	20576 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   2056e:	2800      	cmp	r0, #0
   20570:	bf38      	it	cc
   20572:	2000      	movcc	r0, #0
   20574:	4770      	bx	lr
	struct k_thread *thread = NULL;
   20576:	2000      	movs	r0, #0
}
   20578:	4770      	bx	lr

0002057a <add_to_waitq_locked>:
{
   2057a:	b538      	push	{r3, r4, r5, lr}
   2057c:	4604      	mov	r4, r0
   2057e:	460d      	mov	r5, r1
	unready_thread(thread);
   20580:	f7f8 ff70 	bl	19464 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   20584:	7b63      	ldrb	r3, [r4, #13]
   20586:	f043 0302 	orr.w	r3, r3, #2
   2058a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2058c:	b1b5      	cbz	r5, 205bc <add_to_waitq_locked+0x42>
	return list->head == list;
   2058e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   20590:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20592:	429d      	cmp	r5, r3
   20594:	bf08      	it	eq
   20596:	2300      	moveq	r3, #0
   20598:	2b00      	cmp	r3, #0
   2059a:	bf38      	it	cc
   2059c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2059e:	b19b      	cbz	r3, 205c8 <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   205a0:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   205a4:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   205a8:	4291      	cmp	r1, r2
   205aa:	d008      	beq.n	205be <add_to_waitq_locked+0x44>
		return b2 - b1;
   205ac:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   205ae:	2a00      	cmp	r2, #0
   205b0:	dd05      	ble.n	205be <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   205b2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   205b4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   205b8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   205ba:	605c      	str	r4, [r3, #4]
}
   205bc:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   205be:	686a      	ldr	r2, [r5, #4]
   205c0:	4293      	cmp	r3, r2
   205c2:	d001      	beq.n	205c8 <add_to_waitq_locked+0x4e>
   205c4:	681b      	ldr	r3, [r3, #0]
   205c6:	e7ea      	b.n	2059e <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   205c8:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   205ca:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   205ce:	601c      	str	r4, [r3, #0]
	list->tail = node;
   205d0:	606c      	str	r4, [r5, #4]
   205d2:	e7f3      	b.n	205bc <add_to_waitq_locked+0x42>

000205d4 <z_ready_thread>:
{
   205d4:	b510      	push	{r4, lr}
   205d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   205da:	f3ef 8411 	mrs	r4, BASEPRI
   205de:	f383 8811 	msr	BASEPRI, r3
   205e2:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   205e6:	f7f9 f85d 	bl	196a4 <ready_thread>
	__asm__ volatile(
   205ea:	f384 8811 	msr	BASEPRI, r4
   205ee:	f3bf 8f6f 	isb	sy
}
   205f2:	bd10      	pop	{r4, pc}

000205f4 <z_thread_timeout>:
{
   205f4:	b510      	push	{r4, lr}
   205f6:	4601      	mov	r1, r0
	__asm__ volatile(
   205f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   205fc:	f3ef 8411 	mrs	r4, BASEPRI
   20600:	f383 8811 	msr	BASEPRI, r3
   20604:	f3bf 8f6f 	isb	sy
		if (!killed) {
   20608:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   2060c:	f013 0f28 	tst.w	r3, #40	; 0x28
   20610:	d10d      	bne.n	2062e <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   20612:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   20616:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   20618:	b10b      	cbz	r3, 2061e <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   2061a:	f7ff ff67 	bl	204ec <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2061e:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   20622:	f023 0314 	bic.w	r3, r3, #20
   20626:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   2062a:	f7f9 f83b 	bl	196a4 <ready_thread>
	__asm__ volatile(
   2062e:	f384 8811 	msr	BASEPRI, r4
   20632:	f3bf 8f6f 	isb	sy
}
   20636:	bd10      	pop	{r4, pc}

00020638 <z_unpend_first_thread>:
{
   20638:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2063a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2063e:	f3ef 8511 	mrs	r5, BASEPRI
   20642:	f383 8811 	msr	BASEPRI, r3
   20646:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2064a:	f7ff ff8c 	bl	20566 <z_priq_dumb_best>
		if (thread != NULL) {
   2064e:	4604      	mov	r4, r0
   20650:	b120      	cbz	r0, 2065c <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   20652:	f7ff ff4b 	bl	204ec <unpend_thread_no_timeout>
   20656:	3018      	adds	r0, #24
   20658:	f000 f833 	bl	206c2 <z_abort_timeout>
	__asm__ volatile(
   2065c:	f385 8811 	msr	BASEPRI, r5
   20660:	f3bf 8f6f 	isb	sy
}
   20664:	4620      	mov	r0, r4
   20666:	bd38      	pop	{r3, r4, r5, pc}

00020668 <z_unpend_all>:
{
   20668:	b538      	push	{r3, r4, r5, lr}
   2066a:	4605      	mov	r5, r0
	int need_sched = 0;
   2066c:	2000      	movs	r0, #0
	return list->head == list;
   2066e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20670:	42a5      	cmp	r5, r4
   20672:	d000      	beq.n	20676 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   20674:	b904      	cbnz	r4, 20678 <z_unpend_all+0x10>
}
   20676:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   20678:	4620      	mov	r0, r4
   2067a:	f7ff ff4a 	bl	20512 <z_unpend_thread>
		z_ready_thread(thread);
   2067e:	4620      	mov	r0, r4
   20680:	f7ff ffa8 	bl	205d4 <z_ready_thread>
		need_sched = 1;
   20684:	2001      	movs	r0, #1
   20686:	e7f2      	b.n	2066e <z_unpend_all+0x6>

00020688 <z_sched_wake>:
{
   20688:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2068a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2068e:	f3ef 8511 	mrs	r5, BASEPRI
   20692:	f383 8811 	msr	BASEPRI, r3
   20696:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2069a:	f7ff ff64 	bl	20566 <z_priq_dumb_best>
		if (thread != NULL) {
   2069e:	4604      	mov	r4, r0
   206a0:	b150      	cbz	r0, 206b8 <z_sched_wake+0x30>
   206a2:	67c1      	str	r1, [r0, #124]	; 0x7c
   206a4:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   206a6:	f7ff ff21 	bl	204ec <unpend_thread_no_timeout>
   206aa:	3018      	adds	r0, #24
   206ac:	f000 f809 	bl	206c2 <z_abort_timeout>
			ready_thread(thread);
   206b0:	4620      	mov	r0, r4
   206b2:	f7f8 fff7 	bl	196a4 <ready_thread>
			ret = true;
   206b6:	2001      	movs	r0, #1
	__asm__ volatile(
   206b8:	f385 8811 	msr	BASEPRI, r5
   206bc:	f3bf 8f6f 	isb	sy
}
   206c0:	bd38      	pop	{r3, r4, r5, pc}

000206c2 <z_abort_timeout>:
{
   206c2:	b510      	push	{r4, lr}
	__asm__ volatile(
   206c4:	f04f 0240 	mov.w	r2, #64	; 0x40
   206c8:	f3ef 8411 	mrs	r4, BASEPRI
   206cc:	f382 8811 	msr	BASEPRI, r2
   206d0:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   206d4:	6803      	ldr	r3, [r0, #0]
   206d6:	b13b      	cbz	r3, 206e8 <z_abort_timeout+0x26>
			remove_timeout(to);
   206d8:	f7f9 f9d8 	bl	19a8c <remove_timeout>
			ret = 0;
   206dc:	2000      	movs	r0, #0
	__asm__ volatile(
   206de:	f384 8811 	msr	BASEPRI, r4
   206e2:	f3bf 8f6f 	isb	sy
}
   206e6:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   206e8:	f06f 0015 	mvn.w	r0, #21
   206ec:	e7f7      	b.n	206de <z_abort_timeout+0x1c>

000206ee <z_get_next_timeout_expiry>:
{
   206ee:	b510      	push	{r4, lr}
	__asm__ volatile(
   206f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   206f4:	f3ef 8411 	mrs	r4, BASEPRI
   206f8:	f383 8811 	msr	BASEPRI, r3
   206fc:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   20700:	f7f9 f9de 	bl	19ac0 <next_timeout>
	__asm__ volatile(
   20704:	f384 8811 	msr	BASEPRI, r4
   20708:	f3bf 8f6f 	isb	sy
}
   2070c:	bd10      	pop	{r4, pc}

0002070e <z_set_timeout_expiry>:
{
   2070e:	b570      	push	{r4, r5, r6, lr}
   20710:	4604      	mov	r4, r0
   20712:	460d      	mov	r5, r1
	__asm__ volatile(
   20714:	f04f 0340 	mov.w	r3, #64	; 0x40
   20718:	f3ef 8611 	mrs	r6, BASEPRI
   2071c:	f383 8811 	msr	BASEPRI, r3
   20720:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   20724:	f7f9 f9cc 	bl	19ac0 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   20728:	2801      	cmp	r0, #1
   2072a:	dd05      	ble.n	20738 <z_set_timeout_expiry+0x2a>
   2072c:	42a0      	cmp	r0, r4
   2072e:	db03      	blt.n	20738 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   20730:	4629      	mov	r1, r5
   20732:	4620      	mov	r0, r4
   20734:	f7f2 f888 	bl	12848 <sys_clock_set_timeout>
	__asm__ volatile(
   20738:	f386 8811 	msr	BASEPRI, r6
   2073c:	f3bf 8f6f 	isb	sy
}
   20740:	bd70      	pop	{r4, r5, r6, pc}

00020742 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   20742:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   20744:	f7f9 fadc 	bl	19d00 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   20748:	bd08      	pop	{r3, pc}

0002074a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2074a:	f7f9 bad9 	b.w	19d00 <sys_clock_tick_get>

0002074e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2074e:	b108      	cbz	r0, 20754 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   20750:	f7f2 be32 	b.w	133b8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   20754:	4770      	bx	lr

00020756 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   20756:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20758:	1c4b      	adds	r3, r1, #1
   2075a:	bf08      	it	eq
   2075c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   20760:	4604      	mov	r4, r0
   20762:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20764:	d013      	beq.n	2078e <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20766:	ea54 0105 	orrs.w	r1, r4, r5
   2076a:	d103      	bne.n	20774 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2076c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   20770:	f7f9 bac6 	b.w	19d00 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   20774:	f06f 0101 	mvn.w	r1, #1
   20778:	1a0a      	subs	r2, r1, r0
   2077a:	f04f 31ff 	mov.w	r1, #4294967295
   2077e:	eb61 0305 	sbc.w	r3, r1, r5
   20782:	2a00      	cmp	r2, #0
   20784:	f173 0100 	sbcs.w	r1, r3, #0
   20788:	db02      	blt.n	20790 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   2078a:	4610      	mov	r0, r2
   2078c:	4619      	mov	r1, r3
}
   2078e:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   20790:	f7f9 fab6 	bl	19d00 <sys_clock_tick_get>
   20794:	2c01      	cmp	r4, #1
   20796:	f175 0300 	sbcs.w	r3, r5, #0
   2079a:	bfbc      	itt	lt
   2079c:	2401      	movlt	r4, #1
   2079e:	2500      	movlt	r5, #0
   207a0:	1820      	adds	r0, r4, r0
   207a2:	eb45 0101 	adc.w	r1, r5, r1
   207a6:	e7f2      	b.n	2078e <sys_clock_timeout_end_calc+0x38>

000207a8 <clear_event_registrations>:
	while (num_events--) {
   207a8:	2314      	movs	r3, #20
{
   207aa:	b570      	push	{r4, r5, r6, lr}
   207ac:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   207b0:	2400      	movs	r4, #0
   207b2:	2601      	movs	r6, #1
	while (num_events--) {
   207b4:	4281      	cmp	r1, r0
   207b6:	d100      	bne.n	207ba <clear_event_registrations+0x12>
}
   207b8:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   207ba:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   207be:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   207c2:	f003 031f 	and.w	r3, r3, #31
   207c6:	2b08      	cmp	r3, #8
   207c8:	d80d      	bhi.n	207e6 <clear_event_registrations+0x3e>
   207ca:	fa06 f303 	lsl.w	r3, r6, r3
   207ce:	f413 7f8b 	tst.w	r3, #278	; 0x116
   207d2:	d008      	beq.n	207e6 <clear_event_registrations+0x3e>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   207d4:	f851 3c14 	ldr.w	r3, [r1, #-20]
   207d8:	b12b      	cbz	r3, 207e6 <clear_event_registrations+0x3e>
	sys_dnode_t *const prev = node->prev;
   207da:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
   207de:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   207e0:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   207e2:	e941 4405 	strd	r4, r4, [r1, #-20]
   207e6:	f382 8811 	msr	BASEPRI, r2
   207ea:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   207ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   207f2:	f3ef 8211 	mrs	r2, BASEPRI
   207f6:	f383 8811 	msr	BASEPRI, r3
   207fa:	f3bf 8f6f 	isb	sy
   207fe:	3914      	subs	r1, #20
   20800:	e7d8      	b.n	207b4 <clear_event_registrations+0xc>

00020802 <add_event>:
{
   20802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20804:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   20806:	e9d0 2300 	ldrd	r2, r3, [r0]
   2080a:	4290      	cmp	r0, r2
   2080c:	4604      	mov	r4, r0
   2080e:	460d      	mov	r5, r1
   20810:	d105      	bne.n	2081e <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   20812:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   20814:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   20818:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2081a:	6065      	str	r5, [r4, #4]
}
   2081c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2081e:	2b00      	cmp	r3, #0
   20820:	d0f7      	beq.n	20812 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   20822:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   20824:	b100      	cbz	r0, 20828 <add_event+0x26>
   20826:	3860      	subs	r0, #96	; 0x60
   20828:	b107      	cbz	r7, 2082c <add_event+0x2a>
   2082a:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2082c:	4639      	mov	r1, r7
   2082e:	f7ff fe67 	bl	20500 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   20832:	2800      	cmp	r0, #0
   20834:	dced      	bgt.n	20812 <add_event+0x10>
	return list->head == list;
   20836:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20838:	42b4      	cmp	r4, r6
   2083a:	d0ea      	beq.n	20812 <add_event+0x10>
   2083c:	2e00      	cmp	r6, #0
   2083e:	bf38      	it	cc
   20840:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   20842:	2e00      	cmp	r6, #0
   20844:	d0e5      	beq.n	20812 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   20846:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   20848:	b101      	cbz	r1, 2084c <add_event+0x4a>
   2084a:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2084c:	4638      	mov	r0, r7
   2084e:	f7ff fe57 	bl	20500 <z_sched_prio_cmp>
   20852:	2800      	cmp	r0, #0
   20854:	dd05      	ble.n	20862 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   20856:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   20858:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2085c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2085e:	6075      	str	r5, [r6, #4]
			return;
   20860:	e7dc      	b.n	2081c <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   20862:	6863      	ldr	r3, [r4, #4]
   20864:	42b3      	cmp	r3, r6
   20866:	d0d4      	beq.n	20812 <add_event+0x10>
   20868:	6836      	ldr	r6, [r6, #0]
   2086a:	e7ea      	b.n	20842 <add_event+0x40>

0002086c <register_events>:
{
   2086c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   20870:	2500      	movs	r5, #0
{
   20872:	468b      	mov	fp, r1
   20874:	4614      	mov	r4, r2
   20876:	461f      	mov	r7, r3
   20878:	4682      	mov	sl, r0
	int events_registered = 0;
   2087a:	462e      	mov	r6, r5
	event->poller = NULL;
   2087c:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2087e:	455d      	cmp	r5, fp
   20880:	db02      	blt.n	20888 <register_events+0x1c>
}
   20882:	4630      	mov	r0, r6
   20884:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20888:	f04f 0340 	mov.w	r3, #64	; 0x40
   2088c:	f3ef 8911 	mrs	r9, BASEPRI
   20890:	f383 8811 	msr	BASEPRI, r3
   20894:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   20898:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2089c:	f003 031f 	and.w	r3, r3, #31
   208a0:	3b01      	subs	r3, #1
   208a2:	2b07      	cmp	r3, #7
   208a4:	d80f      	bhi.n	208c6 <register_events+0x5a>
   208a6:	e8df f003 	tbb	[pc, r3]
   208aa:	041e      	.short	0x041e
   208ac:	0e0e0a0e 	.word	0x0e0e0a0e
   208b0:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   208b2:	f8da 3010 	ldr.w	r3, [sl, #16]
   208b6:	689b      	ldr	r3, [r3, #8]
   208b8:	b12b      	cbz	r3, 208c6 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   208ba:	2302      	movs	r3, #2
   208bc:	e020      	b.n	20900 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   208be:	f8da 3010 	ldr.w	r3, [sl, #16]
   208c2:	681b      	ldr	r3, [r3, #0]
   208c4:	bb8b      	cbnz	r3, 2092a <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   208c6:	bb47      	cbnz	r7, 2091a <register_events+0xae>
   208c8:	7823      	ldrb	r3, [r4, #0]
   208ca:	b333      	cbz	r3, 2091a <register_events+0xae>
	switch (event->type) {
   208cc:	f89a 300d 	ldrb.w	r3, [sl, #13]
   208d0:	f003 031f 	and.w	r3, r3, #31
   208d4:	3b01      	subs	r3, #1
   208d6:	2b07      	cmp	r3, #7
   208d8:	d830      	bhi.n	2093c <register_events+0xd0>
   208da:	e8df f003 	tbb	[pc, r3]
   208de:	2833      	.short	0x2833
   208e0:	2f2f282f 	.word	0x2f2f282f
   208e4:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   208e6:	f8da 3010 	ldr.w	r3, [sl, #16]
   208ea:	689b      	ldr	r3, [r3, #8]
   208ec:	2b00      	cmp	r3, #0
   208ee:	d0ea      	beq.n	208c6 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   208f0:	2301      	movs	r3, #1
   208f2:	e005      	b.n	20900 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   208f4:	f8da 3010 	ldr.w	r3, [sl, #16]
   208f8:	6a1b      	ldr	r3, [r3, #32]
   208fa:	2b00      	cmp	r3, #0
   208fc:	d0e3      	beq.n	208c6 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   208fe:	2310      	movs	r3, #16
	event->state |= state;
   20900:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   20904:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   20908:	f3c2 3145 	ubfx	r1, r2, #13, #6
   2090c:	430b      	orrs	r3, r1
   2090e:	f363 3252 	bfi	r2, r3, #13, #6
   20912:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   20916:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2091a:	f389 8811 	msr	BASEPRI, r9
   2091e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   20922:	3501      	adds	r5, #1
   20924:	f10a 0a14 	add.w	sl, sl, #20
   20928:	e7a9      	b.n	2087e <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2092a:	2304      	movs	r3, #4
   2092c:	e7e8      	b.n	20900 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2092e:	f8da 0010 	ldr.w	r0, [sl, #16]
   20932:	4622      	mov	r2, r4
   20934:	4651      	mov	r1, sl
   20936:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   20938:	f7ff ff63 	bl	20802 <add_event>
	event->poller = poller;
   2093c:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   20940:	3601      	adds	r6, #1
   20942:	e7ea      	b.n	2091a <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   20944:	f8da 0010 	ldr.w	r0, [sl, #16]
   20948:	4622      	mov	r2, r4
   2094a:	4651      	mov	r1, sl
   2094c:	e7f4      	b.n	20938 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2094e:	f8da 0010 	ldr.w	r0, [sl, #16]
   20952:	4622      	mov	r2, r4
   20954:	4651      	mov	r1, sl
   20956:	3024      	adds	r0, #36	; 0x24
   20958:	e7ee      	b.n	20938 <register_events+0xcc>

0002095a <signal_poll_event>:
{
   2095a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2095e:	6884      	ldr	r4, [r0, #8]
{
   20960:	4605      	mov	r5, r0
   20962:	460e      	mov	r6, r1
	if (poller != NULL) {
   20964:	b144      	cbz	r4, 20978 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   20966:	7863      	ldrb	r3, [r4, #1]
   20968:	2b01      	cmp	r3, #1
   2096a:	d138      	bne.n	209de <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   2096c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   20970:	f013 0302 	ands.w	r3, r3, #2
   20974:	d10a      	bne.n	2098c <signal_poll_event+0x32>
		poller->is_polling = false;
   20976:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   20978:	68eb      	ldr	r3, [r5, #12]
   2097a:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2097e:	430e      	orrs	r6, r1
	event->poller = NULL;
   20980:	2000      	movs	r0, #0
	event->state |= state;
   20982:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   20986:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   20988:	60eb      	str	r3, [r5, #12]
	return retcode;
   2098a:	e00d      	b.n	209a8 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   2098c:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   20990:	f04f 31ff 	mov.w	r1, #4294967295
   20994:	f06f 0001 	mvn.w	r0, #1
   20998:	428b      	cmp	r3, r1
   2099a:	bf08      	it	eq
   2099c:	4282      	cmpeq	r2, r0
   2099e:	d105      	bne.n	209ac <signal_poll_event+0x52>
		poller->is_polling = false;
   209a0:	2300      	movs	r3, #0
   209a2:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   209a4:	f06f 000a 	mvn.w	r0, #10
}
   209a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   209ac:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   209b0:	4640      	mov	r0, r8
   209b2:	f7ff fdae 	bl	20512 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   209b6:	2e08      	cmp	r6, #8
   209b8:	bf0c      	ite	eq
   209ba:	f06f 0303 	mvneq.w	r3, #3
   209be:	2300      	movne	r3, #0
   209c0:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   209c2:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   209c6:	06db      	lsls	r3, r3, #27
   209c8:	d102      	bne.n	209d0 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   209ca:	f854 7c48 	ldr.w	r7, [r4, #-72]
   209ce:	b10f      	cbz	r7, 209d4 <signal_poll_event+0x7a>
		poller->is_polling = false;
   209d0:	2300      	movs	r3, #0
   209d2:	e7d0      	b.n	20976 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   209d4:	4640      	mov	r0, r8
   209d6:	f7ff fdfd 	bl	205d4 <z_ready_thread>
		poller->is_polling = false;
   209da:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   209dc:	e7cc      	b.n	20978 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   209de:	2b02      	cmp	r3, #2
   209e0:	d1f6      	bne.n	209d0 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   209e2:	7823      	ldrb	r3, [r4, #0]
   209e4:	2b00      	cmp	r3, #0
   209e6:	d0c7      	beq.n	20978 <signal_poll_event+0x1e>
   209e8:	f854 7c04 	ldr.w	r7, [r4, #-4]
   209ec:	2f00      	cmp	r7, #0
   209ee:	d0f4      	beq.n	209da <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   209f0:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   209f4:	f1a4 0914 	sub.w	r9, r4, #20
   209f8:	f104 0014 	add.w	r0, r4, #20
   209fc:	f7ff fe61 	bl	206c2 <z_abort_timeout>
		twork->poll_result = 0;
   20a00:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   20a04:	4649      	mov	r1, r9
   20a06:	4638      	mov	r0, r7
   20a08:	f7ff fcfb 	bl	20402 <k_work_submit_to_queue>
		poller->is_polling = false;
   20a0c:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   20a10:	e7b2      	b.n	20978 <signal_poll_event+0x1e>

00020a12 <k_poll_event_init>:
{
   20a12:	b510      	push	{r4, lr}
	event->type = type;
   20a14:	04d2      	lsls	r2, r2, #19
   20a16:	0209      	lsls	r1, r1, #8
   20a18:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   20a1c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   20a20:	430a      	orrs	r2, r1
   20a22:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   20a24:	2400      	movs	r4, #0
	event->type = type;
   20a26:	430a      	orrs	r2, r1
	event->obj = obj;
   20a28:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   20a2c:	6084      	str	r4, [r0, #8]
}
   20a2e:	bd10      	pop	{r4, pc}

00020a30 <z_handle_obj_poll_events>:
{
   20a30:	4603      	mov	r3, r0
	return list->head == list;
   20a32:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   20a34:	4283      	cmp	r3, r0
   20a36:	d008      	beq.n	20a4a <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   20a38:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   20a3c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   20a3e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20a40:	2300      	movs	r3, #0
	node->prev = NULL;
   20a42:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   20a46:	f7ff bf88 	b.w	2095a <signal_poll_event>
}
   20a4a:	4770      	bx	lr

00020a4c <k_free>:
	if (ptr != NULL) {
   20a4c:	b120      	cbz	r0, 20a58 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   20a4e:	1f01      	subs	r1, r0, #4
   20a50:	f850 0c04 	ldr.w	r0, [r0, #-4]
   20a54:	f7ff bb0e 	b.w	20074 <k_heap_free>
}
   20a58:	4770      	bx	lr

00020a5a <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   20a5a:	4770      	bx	lr

00020a5c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   20a5c:	4770      	bx	lr

00020a5e <memcmp>:
   20a5e:	b530      	push	{r4, r5, lr}
   20a60:	3901      	subs	r1, #1
   20a62:	2400      	movs	r4, #0
   20a64:	42a2      	cmp	r2, r4
   20a66:	d101      	bne.n	20a6c <memcmp+0xe>
   20a68:	2000      	movs	r0, #0
   20a6a:	e005      	b.n	20a78 <memcmp+0x1a>
   20a6c:	5d03      	ldrb	r3, [r0, r4]
   20a6e:	3401      	adds	r4, #1
   20a70:	5d0d      	ldrb	r5, [r1, r4]
   20a72:	42ab      	cmp	r3, r5
   20a74:	d0f6      	beq.n	20a64 <memcmp+0x6>
   20a76:	1b58      	subs	r0, r3, r5
   20a78:	bd30      	pop	{r4, r5, pc}

00020a7a <memcpy>:
   20a7a:	440a      	add	r2, r1
   20a7c:	4291      	cmp	r1, r2
   20a7e:	f100 33ff 	add.w	r3, r0, #4294967295
   20a82:	d100      	bne.n	20a86 <memcpy+0xc>
   20a84:	4770      	bx	lr
   20a86:	b510      	push	{r4, lr}
   20a88:	f811 4b01 	ldrb.w	r4, [r1], #1
   20a8c:	f803 4f01 	strb.w	r4, [r3, #1]!
   20a90:	4291      	cmp	r1, r2
   20a92:	d1f9      	bne.n	20a88 <memcpy+0xe>
   20a94:	bd10      	pop	{r4, pc}

00020a96 <__memcpy_chk>:
   20a96:	429a      	cmp	r2, r3
   20a98:	b508      	push	{r3, lr}
   20a9a:	d901      	bls.n	20aa0 <__memcpy_chk+0xa>
   20a9c:	f7f2 fc54 	bl	13348 <__chk_fail>
   20aa0:	4281      	cmp	r1, r0
   20aa2:	d804      	bhi.n	20aae <__memcpy_chk+0x18>
   20aa4:	188b      	adds	r3, r1, r2
   20aa6:	4298      	cmp	r0, r3
   20aa8:	d3f8      	bcc.n	20a9c <__memcpy_chk+0x6>
   20aaa:	4281      	cmp	r1, r0
   20aac:	d102      	bne.n	20ab4 <__memcpy_chk+0x1e>
   20aae:	1883      	adds	r3, r0, r2
   20ab0:	4299      	cmp	r1, r3
   20ab2:	d3f3      	bcc.n	20a9c <__memcpy_chk+0x6>
   20ab4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   20ab8:	f7ff bfdf 	b.w	20a7a <memcpy>

00020abc <memmove>:
   20abc:	4288      	cmp	r0, r1
   20abe:	b510      	push	{r4, lr}
   20ac0:	eb01 0402 	add.w	r4, r1, r2
   20ac4:	d902      	bls.n	20acc <memmove+0x10>
   20ac6:	4284      	cmp	r4, r0
   20ac8:	4623      	mov	r3, r4
   20aca:	d807      	bhi.n	20adc <memmove+0x20>
   20acc:	1e43      	subs	r3, r0, #1
   20ace:	42a1      	cmp	r1, r4
   20ad0:	d008      	beq.n	20ae4 <memmove+0x28>
   20ad2:	f811 2b01 	ldrb.w	r2, [r1], #1
   20ad6:	f803 2f01 	strb.w	r2, [r3, #1]!
   20ada:	e7f8      	b.n	20ace <memmove+0x12>
   20adc:	4402      	add	r2, r0
   20ade:	4601      	mov	r1, r0
   20ae0:	428a      	cmp	r2, r1
   20ae2:	d100      	bne.n	20ae6 <memmove+0x2a>
   20ae4:	bd10      	pop	{r4, pc}
   20ae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   20aea:	f802 4d01 	strb.w	r4, [r2, #-1]!
   20aee:	e7f7      	b.n	20ae0 <memmove+0x24>

00020af0 <memset>:
   20af0:	4402      	add	r2, r0
   20af2:	4603      	mov	r3, r0
   20af4:	4293      	cmp	r3, r2
   20af6:	d100      	bne.n	20afa <memset+0xa>
   20af8:	4770      	bx	lr
   20afa:	f803 1b01 	strb.w	r1, [r3], #1
   20afe:	e7f9      	b.n	20af4 <memset+0x4>

00020b00 <strcpy>:
   20b00:	4603      	mov	r3, r0
   20b02:	f811 2b01 	ldrb.w	r2, [r1], #1
   20b06:	f803 2b01 	strb.w	r2, [r3], #1
   20b0a:	2a00      	cmp	r2, #0
   20b0c:	d1f9      	bne.n	20b02 <strcpy+0x2>
   20b0e:	4770      	bx	lr

00020b10 <__strncpy_chk>:
   20b10:	429a      	cmp	r2, r3
   20b12:	b508      	push	{r3, lr}
   20b14:	d901      	bls.n	20b1a <__strncpy_chk+0xa>
   20b16:	f7f2 fc17 	bl	13348 <__chk_fail>
   20b1a:	4281      	cmp	r1, r0
   20b1c:	d804      	bhi.n	20b28 <__strncpy_chk+0x18>
   20b1e:	188b      	adds	r3, r1, r2
   20b20:	4298      	cmp	r0, r3
   20b22:	d3f8      	bcc.n	20b16 <__strncpy_chk+0x6>
   20b24:	4281      	cmp	r1, r0
   20b26:	d102      	bne.n	20b2e <__strncpy_chk+0x1e>
   20b28:	1883      	adds	r3, r0, r2
   20b2a:	4299      	cmp	r1, r3
   20b2c:	d3f3      	bcc.n	20b16 <__strncpy_chk+0x6>
   20b2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   20b32:	f000 b80d 	b.w	20b50 <strncpy>

00020b36 <strnlen>:
   20b36:	b510      	push	{r4, lr}
   20b38:	4602      	mov	r2, r0
   20b3a:	4401      	add	r1, r0
   20b3c:	428a      	cmp	r2, r1
   20b3e:	4613      	mov	r3, r2
   20b40:	d101      	bne.n	20b46 <strnlen+0x10>
   20b42:	1a18      	subs	r0, r3, r0
   20b44:	bd10      	pop	{r4, pc}
   20b46:	781c      	ldrb	r4, [r3, #0]
   20b48:	3201      	adds	r2, #1
   20b4a:	2c00      	cmp	r4, #0
   20b4c:	d1f6      	bne.n	20b3c <strnlen+0x6>
   20b4e:	e7f8      	b.n	20b42 <strnlen+0xc>

00020b50 <strncpy>:
   20b50:	b510      	push	{r4, lr}
   20b52:	3901      	subs	r1, #1
   20b54:	4603      	mov	r3, r0
   20b56:	b132      	cbz	r2, 20b66 <strncpy+0x16>
   20b58:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   20b5c:	f803 4b01 	strb.w	r4, [r3], #1
   20b60:	3a01      	subs	r2, #1
   20b62:	2c00      	cmp	r4, #0
   20b64:	d1f7      	bne.n	20b56 <strncpy+0x6>
   20b66:	441a      	add	r2, r3
   20b68:	2100      	movs	r1, #0
   20b6a:	4293      	cmp	r3, r2
   20b6c:	d100      	bne.n	20b70 <strncpy+0x20>
   20b6e:	bd10      	pop	{r4, pc}
   20b70:	f803 1b01 	strb.w	r1, [r3], #1
   20b74:	e7f9      	b.n	20b6a <strncpy+0x1a>
	...

00020b78 <z_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   20b78:	f7f7 b9f4 	b.w	17f64 <SystemInit>
