
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	80 5a 00 20 29 39 01 00 81 04 02 00 fd 38 01 00     .Z. )9.......8..
  10:	fd 38 01 00 fd 38 01 00 fd 38 01 00 00 00 00 00     .8...8...8......
	...
  2c:	05 36 01 00 fd 38 01 00 00 00 00 00 b1 35 01 00     .6...8.......5..
  3c:	fd 38 01 00                                         .8..

00000040 <_irq_vector_table>:
  40:	b5 36 01 00 1f 2d 02 00 b5 36 01 00 b5 36 01 00     .6...-...6...6..
  50:	b5 36 01 00 b5 36 01 00 b5 36 01 00 b5 36 01 00     .6...6...6...6..
  60:	cd 2c 02 00 b5 36 01 00 b5 36 01 00 05 2d 02 00     .,...6...6...-..
  70:	b5 36 01 00 b5 36 01 00 b5 36 01 00 b5 36 01 00     .6...6...6...6..
  80:	b5 36 01 00 b5 36 01 00 b5 36 01 00 b5 36 01 00     .6...6...6...6..
  90:	b5 36 01 00 b5 36 01 00 b5 36 01 00 b5 36 01 00     .6...6...6...6..
  a0:	b5 36 01 00 b5 36 01 00 b5 36 01 00 b5 36 01 00     .6...6...6...6..
  b0:	b5 36 01 00 b5 36 01 00 b5 36 01 00 b5 36 01 00     .6...6...6...6..
  c0:	b5 36 01 00 b5 36 01 00 b5 36 01 00 b5 36 01 00     .6...6...6...6..
  d0:	b5 36 01 00 b5 36 01 00 b5 36 01 00 b5 36 01 00     .6...6...6...6..
  e0:	b5 36 01 00 b5 36 01 00 b5 36 01 00 b5 36 01 00     .6...6...6...6..
  f0:	b5 36 01 00 b5 36 01 00 b5 36 01 00 b5 36 01 00     .6...6...6...6..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x106>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xf2>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x51>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x3c>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x24>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x158>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x24>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x86>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x82>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x9c>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xea>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xd2>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x166>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x12a>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x148>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x50>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x50>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x50>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_BT_HCI_TX_STACK_SIZE+0x54>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb0>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_BT_HCI_TX_STACK_SIZE+0x3e>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_BT_HCI_TX_STACK_SIZE+0x7e>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_BT_HCI_TX_STACK_SIZE+0x9a>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_BT_HCI_TX_STACK_SIZE+0x70>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_BT_HCI_TX_STACK_SIZE+0x70>
     89a:	e712      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>

0000089c <__gedf2>:
     89c:	f04f 3cff 	mov.w	ip, #4294967295
     8a0:	e006      	b.n	8b0 <__cmpdf2+0x4>
     8a2:	bf00      	nop

000008a4 <__ledf2>:
     8a4:	f04f 0c01 	mov.w	ip, #1
     8a8:	e002      	b.n	8b0 <__cmpdf2+0x4>
     8aa:	bf00      	nop

000008ac <__cmpdf2>:
     8ac:	f04f 0c01 	mov.w	ip, #1
     8b0:	f84d cd04 	str.w	ip, [sp, #-4]!
     8b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     8b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     8c0:	bf18      	it	ne
     8c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     8c6:	d01b      	beq.n	900 <__cmpdf2+0x54>
     8c8:	b001      	add	sp, #4
     8ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     8ce:	bf0c      	ite	eq
     8d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     8d4:	ea91 0f03 	teqne	r1, r3
     8d8:	bf02      	ittt	eq
     8da:	ea90 0f02 	teqeq	r0, r2
     8de:	2000      	moveq	r0, #0
     8e0:	4770      	bxeq	lr
     8e2:	f110 0f00 	cmn.w	r0, #0
     8e6:	ea91 0f03 	teq	r1, r3
     8ea:	bf58      	it	pl
     8ec:	4299      	cmppl	r1, r3
     8ee:	bf08      	it	eq
     8f0:	4290      	cmpeq	r0, r2
     8f2:	bf2c      	ite	cs
     8f4:	17d8      	asrcs	r0, r3, #31
     8f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     8fa:	f040 0001 	orr.w	r0, r0, #1
     8fe:	4770      	bx	lr
     900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     908:	d102      	bne.n	910 <__cmpdf2+0x64>
     90a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     90e:	d107      	bne.n	920 <__cmpdf2+0x74>
     910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     918:	d1d6      	bne.n	8c8 <__cmpdf2+0x1c>
     91a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     91e:	d0d3      	beq.n	8c8 <__cmpdf2+0x1c>
     920:	f85d 0b04 	ldr.w	r0, [sp], #4
     924:	4770      	bx	lr
     926:	bf00      	nop

00000928 <__aeabi_cdrcmple>:
     928:	4684      	mov	ip, r0
     92a:	4610      	mov	r0, r2
     92c:	4662      	mov	r2, ip
     92e:	468c      	mov	ip, r1
     930:	4619      	mov	r1, r3
     932:	4663      	mov	r3, ip
     934:	e000      	b.n	938 <__aeabi_cdcmpeq>
     936:	bf00      	nop

00000938 <__aeabi_cdcmpeq>:
     938:	b501      	push	{r0, lr}
     93a:	f7ff ffb7 	bl	8ac <__cmpdf2>
     93e:	2800      	cmp	r0, #0
     940:	bf48      	it	mi
     942:	f110 0f00 	cmnmi.w	r0, #0
     946:	bd01      	pop	{r0, pc}

00000948 <__aeabi_dcmpeq>:
     948:	f84d ed08 	str.w	lr, [sp, #-8]!
     94c:	f7ff fff4 	bl	938 <__aeabi_cdcmpeq>
     950:	bf0c      	ite	eq
     952:	2001      	moveq	r0, #1
     954:	2000      	movne	r0, #0
     956:	f85d fb08 	ldr.w	pc, [sp], #8
     95a:	bf00      	nop

0000095c <__aeabi_dcmplt>:
     95c:	f84d ed08 	str.w	lr, [sp, #-8]!
     960:	f7ff ffea 	bl	938 <__aeabi_cdcmpeq>
     964:	bf34      	ite	cc
     966:	2001      	movcc	r0, #1
     968:	2000      	movcs	r0, #0
     96a:	f85d fb08 	ldr.w	pc, [sp], #8
     96e:	bf00      	nop

00000970 <__aeabi_dcmple>:
     970:	f84d ed08 	str.w	lr, [sp, #-8]!
     974:	f7ff ffe0 	bl	938 <__aeabi_cdcmpeq>
     978:	bf94      	ite	ls
     97a:	2001      	movls	r0, #1
     97c:	2000      	movhi	r0, #0
     97e:	f85d fb08 	ldr.w	pc, [sp], #8
     982:	bf00      	nop

00000984 <__aeabi_dcmpge>:
     984:	f84d ed08 	str.w	lr, [sp, #-8]!
     988:	f7ff ffce 	bl	928 <__aeabi_cdrcmple>
     98c:	bf94      	ite	ls
     98e:	2001      	movls	r0, #1
     990:	2000      	movhi	r0, #0
     992:	f85d fb08 	ldr.w	pc, [sp], #8
     996:	bf00      	nop

00000998 <__aeabi_dcmpgt>:
     998:	f84d ed08 	str.w	lr, [sp, #-8]!
     99c:	f7ff ffc4 	bl	928 <__aeabi_cdrcmple>
     9a0:	bf34      	ite	cc
     9a2:	2001      	movcc	r0, #1
     9a4:	2000      	movcs	r0, #0
     9a6:	f85d fb08 	ldr.w	pc, [sp], #8
     9aa:	bf00      	nop

000009ac <__aeabi_d2f>:
     9ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
     9b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     9b4:	bf24      	itt	cs
     9b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     9ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     9be:	d90d      	bls.n	9dc <__aeabi_d2f+0x30>
     9c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     9c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     9c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     9cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     9d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     9d4:	bf08      	it	eq
     9d6:	f020 0001 	biceq.w	r0, r0, #1
     9da:	4770      	bx	lr
     9dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     9e0:	d121      	bne.n	a26 <__aeabi_d2f+0x7a>
     9e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     9e6:	bfbc      	itt	lt
     9e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     9ec:	4770      	bxlt	lr
     9ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     9f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     9f6:	f1c2 0218 	rsb	r2, r2, #24
     9fa:	f1c2 0c20 	rsb	ip, r2, #32
     9fe:	fa10 f30c 	lsls.w	r3, r0, ip
     a02:	fa20 f002 	lsr.w	r0, r0, r2
     a06:	bf18      	it	ne
     a08:	f040 0001 	orrne.w	r0, r0, #1
     a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     a14:	fa03 fc0c 	lsl.w	ip, r3, ip
     a18:	ea40 000c 	orr.w	r0, r0, ip
     a1c:	fa23 f302 	lsr.w	r3, r3, r2
     a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
     a24:	e7cc      	b.n	9c0 <__aeabi_d2f+0x14>
     a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
     a2a:	d107      	bne.n	a3c <__aeabi_d2f+0x90>
     a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     a30:	bf1e      	ittt	ne
     a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     a3a:	4770      	bxne	lr
     a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a48:	4770      	bx	lr
     a4a:	bf00      	nop

00000a4c <__aeabi_frsub>:
     a4c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     a50:	e002      	b.n	a58 <__addsf3>
     a52:	bf00      	nop

00000a54 <__aeabi_fsub>:
     a54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000a58 <__addsf3>:
     a58:	0042      	lsls	r2, r0, #1
     a5a:	bf1f      	itttt	ne
     a5c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     a60:	ea92 0f03 	teqne	r2, r3
     a64:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     a68:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     a6c:	d06a      	beq.n	b44 <__data_size+0x7b>
     a6e:	ea4f 6212 	mov.w	r2, r2, lsr #24
     a72:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     a76:	bfc1      	itttt	gt
     a78:	18d2      	addgt	r2, r2, r3
     a7a:	4041      	eorgt	r1, r0
     a7c:	4048      	eorgt	r0, r1
     a7e:	4041      	eorgt	r1, r0
     a80:	bfb8      	it	lt
     a82:	425b      	neglt	r3, r3
     a84:	2b19      	cmp	r3, #25
     a86:	bf88      	it	hi
     a88:	4770      	bxhi	lr
     a8a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     a8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a96:	bf18      	it	ne
     a98:	4240      	negne	r0, r0
     a9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a9e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     aa2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     aa6:	bf18      	it	ne
     aa8:	4249      	negne	r1, r1
     aaa:	ea92 0f03 	teq	r2, r3
     aae:	d03f      	beq.n	b30 <__data_size+0x67>
     ab0:	f1a2 0201 	sub.w	r2, r2, #1
     ab4:	fa41 fc03 	asr.w	ip, r1, r3
     ab8:	eb10 000c 	adds.w	r0, r0, ip
     abc:	f1c3 0320 	rsb	r3, r3, #32
     ac0:	fa01 f103 	lsl.w	r1, r1, r3
     ac4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     ac8:	d502      	bpl.n	ad0 <__data_size+0x7>
     aca:	4249      	negs	r1, r1
     acc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     ad0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     ad4:	d313      	bcc.n	afe <__data_size+0x35>
     ad6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     ada:	d306      	bcc.n	aea <__data_size+0x21>
     adc:	0840      	lsrs	r0, r0, #1
     ade:	ea4f 0131 	mov.w	r1, r1, rrx
     ae2:	f102 0201 	add.w	r2, r2, #1
     ae6:	2afe      	cmp	r2, #254	; 0xfe
     ae8:	d251      	bcs.n	b8e <__data_size+0xc5>
     aea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     aee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     af2:	bf08      	it	eq
     af4:	f020 0001 	biceq.w	r0, r0, #1
     af8:	ea40 0003 	orr.w	r0, r0, r3
     afc:	4770      	bx	lr
     afe:	0049      	lsls	r1, r1, #1
     b00:	eb40 0000 	adc.w	r0, r0, r0
     b04:	3a01      	subs	r2, #1
     b06:	bf28      	it	cs
     b08:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     b0c:	d2ed      	bcs.n	aea <__data_size+0x21>
     b0e:	fab0 fc80 	clz	ip, r0
     b12:	f1ac 0c08 	sub.w	ip, ip, #8
     b16:	ebb2 020c 	subs.w	r2, r2, ip
     b1a:	fa00 f00c 	lsl.w	r0, r0, ip
     b1e:	bfaa      	itet	ge
     b20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     b24:	4252      	neglt	r2, r2
     b26:	4318      	orrge	r0, r3
     b28:	bfbc      	itt	lt
     b2a:	40d0      	lsrlt	r0, r2
     b2c:	4318      	orrlt	r0, r3
     b2e:	4770      	bx	lr
     b30:	f092 0f00 	teq	r2, #0
     b34:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     b38:	bf06      	itte	eq
     b3a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     b3e:	3201      	addeq	r2, #1
     b40:	3b01      	subne	r3, #1
     b42:	e7b5      	b.n	ab0 <__addsf3+0x58>
     b44:	ea4f 0341 	mov.w	r3, r1, lsl #1
     b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     b4c:	bf18      	it	ne
     b4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     b52:	d021      	beq.n	b98 <__data_size+0xcf>
     b54:	ea92 0f03 	teq	r2, r3
     b58:	d004      	beq.n	b64 <__data_size+0x9b>
     b5a:	f092 0f00 	teq	r2, #0
     b5e:	bf08      	it	eq
     b60:	4608      	moveq	r0, r1
     b62:	4770      	bx	lr
     b64:	ea90 0f01 	teq	r0, r1
     b68:	bf1c      	itt	ne
     b6a:	2000      	movne	r0, #0
     b6c:	4770      	bxne	lr
     b6e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     b72:	d104      	bne.n	b7e <__data_size+0xb5>
     b74:	0040      	lsls	r0, r0, #1
     b76:	bf28      	it	cs
     b78:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     b7c:	4770      	bx	lr
     b7e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     b82:	bf3c      	itt	cc
     b84:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     b88:	4770      	bxcc	lr
     b8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     b8e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b96:	4770      	bx	lr
     b98:	ea7f 6222 	mvns.w	r2, r2, asr #24
     b9c:	bf16      	itet	ne
     b9e:	4608      	movne	r0, r1
     ba0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     ba4:	4601      	movne	r1, r0
     ba6:	0242      	lsls	r2, r0, #9
     ba8:	bf06      	itte	eq
     baa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     bae:	ea90 0f01 	teqeq	r0, r1
     bb2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     bb6:	4770      	bx	lr

00000bb8 <__aeabi_ui2f>:
     bb8:	f04f 0300 	mov.w	r3, #0
     bbc:	e004      	b.n	bc8 <__aeabi_i2f+0x8>
     bbe:	bf00      	nop

00000bc0 <__aeabi_i2f>:
     bc0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     bc4:	bf48      	it	mi
     bc6:	4240      	negmi	r0, r0
     bc8:	ea5f 0c00 	movs.w	ip, r0
     bcc:	bf08      	it	eq
     bce:	4770      	bxeq	lr
     bd0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     bd4:	4601      	mov	r1, r0
     bd6:	f04f 0000 	mov.w	r0, #0
     bda:	e01c      	b.n	c16 <__aeabi_l2f+0x2a>

00000bdc <__aeabi_ul2f>:
     bdc:	ea50 0201 	orrs.w	r2, r0, r1
     be0:	bf08      	it	eq
     be2:	4770      	bxeq	lr
     be4:	f04f 0300 	mov.w	r3, #0
     be8:	e00a      	b.n	c00 <__aeabi_l2f+0x14>
     bea:	bf00      	nop

00000bec <__aeabi_l2f>:
     bec:	ea50 0201 	orrs.w	r2, r0, r1
     bf0:	bf08      	it	eq
     bf2:	4770      	bxeq	lr
     bf4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     bf8:	d502      	bpl.n	c00 <__aeabi_l2f+0x14>
     bfa:	4240      	negs	r0, r0
     bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     c00:	ea5f 0c01 	movs.w	ip, r1
     c04:	bf02      	ittt	eq
     c06:	4684      	moveq	ip, r0
     c08:	4601      	moveq	r1, r0
     c0a:	2000      	moveq	r0, #0
     c0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     c10:	bf08      	it	eq
     c12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     c16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     c1a:	fabc f28c 	clz	r2, ip
     c1e:	3a08      	subs	r2, #8
     c20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     c24:	db10      	blt.n	c48 <__aeabi_l2f+0x5c>
     c26:	fa01 fc02 	lsl.w	ip, r1, r2
     c2a:	4463      	add	r3, ip
     c2c:	fa00 fc02 	lsl.w	ip, r0, r2
     c30:	f1c2 0220 	rsb	r2, r2, #32
     c34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     c38:	fa20 f202 	lsr.w	r2, r0, r2
     c3c:	eb43 0002 	adc.w	r0, r3, r2
     c40:	bf08      	it	eq
     c42:	f020 0001 	biceq.w	r0, r0, #1
     c46:	4770      	bx	lr
     c48:	f102 0220 	add.w	r2, r2, #32
     c4c:	fa01 fc02 	lsl.w	ip, r1, r2
     c50:	f1c2 0220 	rsb	r2, r2, #32
     c54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     c58:	fa21 f202 	lsr.w	r2, r1, r2
     c5c:	eb43 0002 	adc.w	r0, r3, r2
     c60:	bf08      	it	eq
     c62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     c66:	4770      	bx	lr

00000c68 <__aeabi_fmul>:
     c68:	f04f 0cff 	mov.w	ip, #255	; 0xff
     c6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     c70:	bf1e      	ittt	ne
     c72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     c76:	ea92 0f0c 	teqne	r2, ip
     c7a:	ea93 0f0c 	teqne	r3, ip
     c7e:	d06f      	beq.n	d60 <__aeabi_fmul+0xf8>
     c80:	441a      	add	r2, r3
     c82:	ea80 0c01 	eor.w	ip, r0, r1
     c86:	0240      	lsls	r0, r0, #9
     c88:	bf18      	it	ne
     c8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     c8e:	d01e      	beq.n	cce <__aeabi_fmul+0x66>
     c90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     c94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     c98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     c9c:	fba0 3101 	umull	r3, r1, r0, r1
     ca0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     ca4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     ca8:	bf3e      	ittt	cc
     caa:	0049      	lslcc	r1, r1, #1
     cac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     cb0:	005b      	lslcc	r3, r3, #1
     cb2:	ea40 0001 	orr.w	r0, r0, r1
     cb6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     cba:	2afd      	cmp	r2, #253	; 0xfd
     cbc:	d81d      	bhi.n	cfa <__aeabi_fmul+0x92>
     cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     cc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     cc6:	bf08      	it	eq
     cc8:	f020 0001 	biceq.w	r0, r0, #1
     ccc:	4770      	bx	lr
     cce:	f090 0f00 	teq	r0, #0
     cd2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     cd6:	bf08      	it	eq
     cd8:	0249      	lsleq	r1, r1, #9
     cda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     cde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     ce2:	3a7f      	subs	r2, #127	; 0x7f
     ce4:	bfc2      	ittt	gt
     ce6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     cea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     cee:	4770      	bxgt	lr
     cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     cf4:	f04f 0300 	mov.w	r3, #0
     cf8:	3a01      	subs	r2, #1
     cfa:	dc5d      	bgt.n	db8 <__aeabi_fmul+0x150>
     cfc:	f112 0f19 	cmn.w	r2, #25
     d00:	bfdc      	itt	le
     d02:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     d06:	4770      	bxle	lr
     d08:	f1c2 0200 	rsb	r2, r2, #0
     d0c:	0041      	lsls	r1, r0, #1
     d0e:	fa21 f102 	lsr.w	r1, r1, r2
     d12:	f1c2 0220 	rsb	r2, r2, #32
     d16:	fa00 fc02 	lsl.w	ip, r0, r2
     d1a:	ea5f 0031 	movs.w	r0, r1, rrx
     d1e:	f140 0000 	adc.w	r0, r0, #0
     d22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     d26:	bf08      	it	eq
     d28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     d2c:	4770      	bx	lr
     d2e:	f092 0f00 	teq	r2, #0
     d32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     d36:	bf02      	ittt	eq
     d38:	0040      	lsleq	r0, r0, #1
     d3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     d3e:	3a01      	subeq	r2, #1
     d40:	d0f9      	beq.n	d36 <__aeabi_fmul+0xce>
     d42:	ea40 000c 	orr.w	r0, r0, ip
     d46:	f093 0f00 	teq	r3, #0
     d4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     d4e:	bf02      	ittt	eq
     d50:	0049      	lsleq	r1, r1, #1
     d52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     d56:	3b01      	subeq	r3, #1
     d58:	d0f9      	beq.n	d4e <__aeabi_fmul+0xe6>
     d5a:	ea41 010c 	orr.w	r1, r1, ip
     d5e:	e78f      	b.n	c80 <__aeabi_fmul+0x18>
     d60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     d64:	ea92 0f0c 	teq	r2, ip
     d68:	bf18      	it	ne
     d6a:	ea93 0f0c 	teqne	r3, ip
     d6e:	d00a      	beq.n	d86 <__aeabi_fmul+0x11e>
     d70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     d74:	bf18      	it	ne
     d76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     d7a:	d1d8      	bne.n	d2e <__aeabi_fmul+0xc6>
     d7c:	ea80 0001 	eor.w	r0, r0, r1
     d80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     d84:	4770      	bx	lr
     d86:	f090 0f00 	teq	r0, #0
     d8a:	bf17      	itett	ne
     d8c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     d90:	4608      	moveq	r0, r1
     d92:	f091 0f00 	teqne	r1, #0
     d96:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     d9a:	d014      	beq.n	dc6 <__aeabi_fmul+0x15e>
     d9c:	ea92 0f0c 	teq	r2, ip
     da0:	d101      	bne.n	da6 <__aeabi_fmul+0x13e>
     da2:	0242      	lsls	r2, r0, #9
     da4:	d10f      	bne.n	dc6 <__aeabi_fmul+0x15e>
     da6:	ea93 0f0c 	teq	r3, ip
     daa:	d103      	bne.n	db4 <__aeabi_fmul+0x14c>
     dac:	024b      	lsls	r3, r1, #9
     dae:	bf18      	it	ne
     db0:	4608      	movne	r0, r1
     db2:	d108      	bne.n	dc6 <__aeabi_fmul+0x15e>
     db4:	ea80 0001 	eor.w	r0, r0, r1
     db8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     dbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     dc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     dc4:	4770      	bx	lr
     dc6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     dca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     dce:	4770      	bx	lr

00000dd0 <__aeabi_fdiv>:
     dd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
     dd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     dd8:	bf1e      	ittt	ne
     dda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     dde:	ea92 0f0c 	teqne	r2, ip
     de2:	ea93 0f0c 	teqne	r3, ip
     de6:	d069      	beq.n	ebc <__aeabi_fdiv+0xec>
     de8:	eba2 0203 	sub.w	r2, r2, r3
     dec:	ea80 0c01 	eor.w	ip, r0, r1
     df0:	0249      	lsls	r1, r1, #9
     df2:	ea4f 2040 	mov.w	r0, r0, lsl #9
     df6:	d037      	beq.n	e68 <__aeabi_fdiv+0x98>
     df8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     dfc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     e00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     e04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     e08:	428b      	cmp	r3, r1
     e0a:	bf38      	it	cc
     e0c:	005b      	lslcc	r3, r3, #1
     e0e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     e12:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     e16:	428b      	cmp	r3, r1
     e18:	bf24      	itt	cs
     e1a:	1a5b      	subcs	r3, r3, r1
     e1c:	ea40 000c 	orrcs.w	r0, r0, ip
     e20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     e24:	bf24      	itt	cs
     e26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     e2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     e2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     e32:	bf24      	itt	cs
     e34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     e38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     e3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     e40:	bf24      	itt	cs
     e42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     e46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     e4a:	011b      	lsls	r3, r3, #4
     e4c:	bf18      	it	ne
     e4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     e52:	d1e0      	bne.n	e16 <__aeabi_fdiv+0x46>
     e54:	2afd      	cmp	r2, #253	; 0xfd
     e56:	f63f af50 	bhi.w	cfa <__aeabi_fmul+0x92>
     e5a:	428b      	cmp	r3, r1
     e5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     e60:	bf08      	it	eq
     e62:	f020 0001 	biceq.w	r0, r0, #1
     e66:	4770      	bx	lr
     e68:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     e6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     e70:	327f      	adds	r2, #127	; 0x7f
     e72:	bfc2      	ittt	gt
     e74:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     e78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     e7c:	4770      	bxgt	lr
     e7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     e82:	f04f 0300 	mov.w	r3, #0
     e86:	3a01      	subs	r2, #1
     e88:	e737      	b.n	cfa <__aeabi_fmul+0x92>
     e8a:	f092 0f00 	teq	r2, #0
     e8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     e92:	bf02      	ittt	eq
     e94:	0040      	lsleq	r0, r0, #1
     e96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     e9a:	3a01      	subeq	r2, #1
     e9c:	d0f9      	beq.n	e92 <__aeabi_fdiv+0xc2>
     e9e:	ea40 000c 	orr.w	r0, r0, ip
     ea2:	f093 0f00 	teq	r3, #0
     ea6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     eaa:	bf02      	ittt	eq
     eac:	0049      	lsleq	r1, r1, #1
     eae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     eb2:	3b01      	subeq	r3, #1
     eb4:	d0f9      	beq.n	eaa <__aeabi_fdiv+0xda>
     eb6:	ea41 010c 	orr.w	r1, r1, ip
     eba:	e795      	b.n	de8 <__aeabi_fdiv+0x18>
     ebc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     ec0:	ea92 0f0c 	teq	r2, ip
     ec4:	d108      	bne.n	ed8 <__aeabi_fdiv+0x108>
     ec6:	0242      	lsls	r2, r0, #9
     ec8:	f47f af7d 	bne.w	dc6 <__aeabi_fmul+0x15e>
     ecc:	ea93 0f0c 	teq	r3, ip
     ed0:	f47f af70 	bne.w	db4 <__aeabi_fmul+0x14c>
     ed4:	4608      	mov	r0, r1
     ed6:	e776      	b.n	dc6 <__aeabi_fmul+0x15e>
     ed8:	ea93 0f0c 	teq	r3, ip
     edc:	d104      	bne.n	ee8 <__aeabi_fdiv+0x118>
     ede:	024b      	lsls	r3, r1, #9
     ee0:	f43f af4c 	beq.w	d7c <__aeabi_fmul+0x114>
     ee4:	4608      	mov	r0, r1
     ee6:	e76e      	b.n	dc6 <__aeabi_fmul+0x15e>
     ee8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     eec:	bf18      	it	ne
     eee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     ef2:	d1ca      	bne.n	e8a <__aeabi_fdiv+0xba>
     ef4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     ef8:	f47f af5c 	bne.w	db4 <__aeabi_fmul+0x14c>
     efc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     f00:	f47f af3c 	bne.w	d7c <__aeabi_fmul+0x114>
     f04:	e75f      	b.n	dc6 <__aeabi_fmul+0x15e>
     f06:	bf00      	nop

00000f08 <__gesf2>:
     f08:	f04f 3cff 	mov.w	ip, #4294967295
     f0c:	e006      	b.n	f1c <__cmpsf2+0x4>
     f0e:	bf00      	nop

00000f10 <__lesf2>:
     f10:	f04f 0c01 	mov.w	ip, #1
     f14:	e002      	b.n	f1c <__cmpsf2+0x4>
     f16:	bf00      	nop

00000f18 <__cmpsf2>:
     f18:	f04f 0c01 	mov.w	ip, #1
     f1c:	f84d cd04 	str.w	ip, [sp, #-4]!
     f20:	ea4f 0240 	mov.w	r2, r0, lsl #1
     f24:	ea4f 0341 	mov.w	r3, r1, lsl #1
     f28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     f2c:	bf18      	it	ne
     f2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     f32:	d011      	beq.n	f58 <__cmpsf2+0x40>
     f34:	b001      	add	sp, #4
     f36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     f3a:	bf18      	it	ne
     f3c:	ea90 0f01 	teqne	r0, r1
     f40:	bf58      	it	pl
     f42:	ebb2 0003 	subspl.w	r0, r2, r3
     f46:	bf88      	it	hi
     f48:	17c8      	asrhi	r0, r1, #31
     f4a:	bf38      	it	cc
     f4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     f50:	bf18      	it	ne
     f52:	f040 0001 	orrne.w	r0, r0, #1
     f56:	4770      	bx	lr
     f58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     f5c:	d102      	bne.n	f64 <__cmpsf2+0x4c>
     f5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
     f62:	d105      	bne.n	f70 <__cmpsf2+0x58>
     f64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
     f68:	d1e4      	bne.n	f34 <__cmpsf2+0x1c>
     f6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
     f6e:	d0e1      	beq.n	f34 <__cmpsf2+0x1c>
     f70:	f85d 0b04 	ldr.w	r0, [sp], #4
     f74:	4770      	bx	lr
     f76:	bf00      	nop

00000f78 <__aeabi_cfrcmple>:
     f78:	4684      	mov	ip, r0
     f7a:	4608      	mov	r0, r1
     f7c:	4661      	mov	r1, ip
     f7e:	e7ff      	b.n	f80 <__aeabi_cfcmpeq>

00000f80 <__aeabi_cfcmpeq>:
     f80:	b50f      	push	{r0, r1, r2, r3, lr}
     f82:	f7ff ffc9 	bl	f18 <__cmpsf2>
     f86:	2800      	cmp	r0, #0
     f88:	bf48      	it	mi
     f8a:	f110 0f00 	cmnmi.w	r0, #0
     f8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00000f90 <__aeabi_fcmpeq>:
     f90:	f84d ed08 	str.w	lr, [sp, #-8]!
     f94:	f7ff fff4 	bl	f80 <__aeabi_cfcmpeq>
     f98:	bf0c      	ite	eq
     f9a:	2001      	moveq	r0, #1
     f9c:	2000      	movne	r0, #0
     f9e:	f85d fb08 	ldr.w	pc, [sp], #8
     fa2:	bf00      	nop

00000fa4 <__aeabi_fcmplt>:
     fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
     fa8:	f7ff ffea 	bl	f80 <__aeabi_cfcmpeq>
     fac:	bf34      	ite	cc
     fae:	2001      	movcc	r0, #1
     fb0:	2000      	movcs	r0, #0
     fb2:	f85d fb08 	ldr.w	pc, [sp], #8
     fb6:	bf00      	nop

00000fb8 <__aeabi_fcmple>:
     fb8:	f84d ed08 	str.w	lr, [sp, #-8]!
     fbc:	f7ff ffe0 	bl	f80 <__aeabi_cfcmpeq>
     fc0:	bf94      	ite	ls
     fc2:	2001      	movls	r0, #1
     fc4:	2000      	movhi	r0, #0
     fc6:	f85d fb08 	ldr.w	pc, [sp], #8
     fca:	bf00      	nop

00000fcc <__aeabi_fcmpge>:
     fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
     fd0:	f7ff ffd2 	bl	f78 <__aeabi_cfrcmple>
     fd4:	bf94      	ite	ls
     fd6:	2001      	movls	r0, #1
     fd8:	2000      	movhi	r0, #0
     fda:	f85d fb08 	ldr.w	pc, [sp], #8
     fde:	bf00      	nop

00000fe0 <__aeabi_fcmpgt>:
     fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
     fe4:	f7ff ffc8 	bl	f78 <__aeabi_cfrcmple>
     fe8:	bf34      	ite	cc
     fea:	2001      	movcc	r0, #1
     fec:	2000      	movcs	r0, #0
     fee:	f85d fb08 	ldr.w	pc, [sp], #8
     ff2:	bf00      	nop

00000ff4 <__aeabi_f2uiz>:
     ff4:	0042      	lsls	r2, r0, #1
     ff6:	d20e      	bcs.n	1016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
     ff8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     ffc:	d30b      	bcc.n	1016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
     ffe:	f04f 039e 	mov.w	r3, #158	; 0x9e
    1002:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    1006:	d409      	bmi.n	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
    1008:	ea4f 2300 	mov.w	r3, r0, lsl #8
    100c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1010:	fa23 f002 	lsr.w	r0, r3, r2
    1014:	4770      	bx	lr
    1016:	f04f 0000 	mov.w	r0, #0
    101a:	4770      	bx	lr
    101c:	f112 0f61 	cmn.w	r2, #97	; 0x61
    1020:	d101      	bne.n	1026 <CONFIG_FPROTECT_BLOCK_SIZE+0x26>
    1022:	0242      	lsls	r2, r0, #9
    1024:	d102      	bne.n	102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
    1026:	f04f 30ff 	mov.w	r0, #4294967295
    102a:	4770      	bx	lr
    102c:	f04f 0000 	mov.w	r0, #0
    1030:	4770      	bx	lr
    1032:	bf00      	nop

00001034 <__aeabi_uldivmod>:
    1034:	b953      	cbnz	r3, 104c <__aeabi_uldivmod+0x18>
    1036:	b94a      	cbnz	r2, 104c <__aeabi_uldivmod+0x18>
    1038:	2900      	cmp	r1, #0
    103a:	bf08      	it	eq
    103c:	2800      	cmpeq	r0, #0
    103e:	bf1c      	itt	ne
    1040:	f04f 31ff 	movne.w	r1, #4294967295
    1044:	f04f 30ff 	movne.w	r0, #4294967295
    1048:	f000 b82c 	b.w	10a4 <__aeabi_idiv0>
    104c:	f1ad 0c08 	sub.w	ip, sp, #8
    1050:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1054:	f00b fcbe 	bl	c9d4 <__udivmoddi4>
    1058:	f8dd e004 	ldr.w	lr, [sp, #4]
    105c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1060:	b004      	add	sp, #16
    1062:	4770      	bx	lr

00001064 <__aeabi_f2ulz>:
    1064:	b5d0      	push	{r4, r6, r7, lr}
    1066:	f7ff f9af 	bl	3c8 <__aeabi_f2d>
    106a:	4b0c      	ldr	r3, [pc, #48]	; (109c <__aeabi_f2ulz+0x38>)
    106c:	2200      	movs	r2, #0
    106e:	4606      	mov	r6, r0
    1070:	460f      	mov	r7, r1
    1072:	f7ff fa01 	bl	478 <__aeabi_dmul>
    1076:	f000 f817 	bl	10a8 <__aeabi_d2uiz>
    107a:	4604      	mov	r4, r0
    107c:	f7ff f982 	bl	384 <__aeabi_ui2d>
    1080:	4b07      	ldr	r3, [pc, #28]	; (10a0 <__aeabi_f2ulz+0x3c>)
    1082:	2200      	movs	r2, #0
    1084:	f7ff f9f8 	bl	478 <__aeabi_dmul>
    1088:	4602      	mov	r2, r0
    108a:	460b      	mov	r3, r1
    108c:	4630      	mov	r0, r6
    108e:	4639      	mov	r1, r7
    1090:	f7ff f83a 	bl	108 <__aeabi_dsub>
    1094:	f000 f808 	bl	10a8 <__aeabi_d2uiz>
    1098:	4621      	mov	r1, r4
    109a:	bdd0      	pop	{r4, r6, r7, pc}
    109c:	3df00000 	.word	0x3df00000
    10a0:	41f00000 	.word	0x41f00000

000010a4 <__aeabi_idiv0>:
    10a4:	4770      	bx	lr
    10a6:	bf00      	nop

000010a8 <__aeabi_d2uiz>:
    10a8:	004a      	lsls	r2, r1, #1
    10aa:	d211      	bcs.n	10d0 <__aeabi_d2uiz+0x28>
    10ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    10b0:	d211      	bcs.n	10d6 <__aeabi_d2uiz+0x2e>
    10b2:	d50d      	bpl.n	10d0 <__aeabi_d2uiz+0x28>
    10b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    10b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    10bc:	d40e      	bmi.n	10dc <__aeabi_d2uiz+0x34>
    10be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    10c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    10c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    10ca:	fa23 f002 	lsr.w	r0, r3, r2
    10ce:	4770      	bx	lr
    10d0:	f04f 0000 	mov.w	r0, #0
    10d4:	4770      	bx	lr
    10d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    10da:	d102      	bne.n	10e2 <__aeabi_d2uiz+0x3a>
    10dc:	f04f 30ff 	mov.w	r0, #4294967295
    10e0:	4770      	bx	lr
    10e2:	f04f 0000 	mov.w	r0, #0
    10e6:	4770      	bx	lr

000010e8 <ocrypto_bigint_add256>:
    10e8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    10ec:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    10f0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    10f4:	185b      	adds	r3, r3, r1
    10f6:	eb54 040c 	adcs.w	r4, r4, ip
    10fa:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    10fe:	414d      	adcs	r5, r1
    1100:	eb56 060c 	adcs.w	r6, r6, ip
    1104:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1108:	414f      	adcs	r7, r1
    110a:	eb58 080c 	adcs.w	r8, r8, ip
    110e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1112:	eb59 0901 	adcs.w	r9, r9, r1
    1116:	eb5a 0a0c 	adcs.w	sl, sl, ip
    111a:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    111e:	4180      	sbcs	r0, r0
    1120:	3001      	adds	r0, #1
    1122:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1126:	4770      	bx	lr

00001128 <ocrypto_bigint_sub256>:
    1128:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    112c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    1130:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1134:	1a5b      	subs	r3, r3, r1
    1136:	eb74 040c 	sbcs.w	r4, r4, ip
    113a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    113e:	418d      	sbcs	r5, r1
    1140:	eb76 060c 	sbcs.w	r6, r6, ip
    1144:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1148:	418f      	sbcs	r7, r1
    114a:	eb78 080c 	sbcs.w	r8, r8, ip
    114e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1152:	eb79 0901 	sbcs.w	r9, r9, r1
    1156:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    115a:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    115e:	4180      	sbcs	r0, r0
    1160:	4240      	negs	r0, r0
    1162:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1166:	4770      	bx	lr

00001168 <ocrypto_bigint_cadd256>:
    1168:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    116c:	4252      	negs	r2, r2
    116e:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    1172:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    1176:	4017      	ands	r7, r2
    1178:	19db      	adds	r3, r3, r7
    117a:	ea18 0802 	ands.w	r8, r8, r2
    117e:	eb54 0408 	adcs.w	r4, r4, r8
    1182:	ea19 0902 	ands.w	r9, r9, r2
    1186:	eb55 0509 	adcs.w	r5, r5, r9
    118a:	ea1a 0a02 	ands.w	sl, sl, r2
    118e:	eb56 060a 	adcs.w	r6, r6, sl
    1192:	c078      	stmia	r0!, {r3, r4, r5, r6}
    1194:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    1198:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    119c:	4017      	ands	r7, r2
    119e:	417b      	adcs	r3, r7
    11a0:	ea18 0802 	ands.w	r8, r8, r2
    11a4:	eb54 0408 	adcs.w	r4, r4, r8
    11a8:	ea19 0902 	ands.w	r9, r9, r2
    11ac:	eb55 0509 	adcs.w	r5, r5, r9
    11b0:	ea1a 0a02 	ands.w	sl, sl, r2
    11b4:	eb56 060a 	adcs.w	r6, r6, sl
    11b8:	c078      	stmia	r0!, {r3, r4, r5, r6}
    11ba:	4180      	sbcs	r0, r0
    11bc:	3001      	adds	r0, #1
    11be:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    11c2:	4770      	bx	lr

000011c4 <ocrypto_bigint_csub256>:
    11c4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    11c8:	4252      	negs	r2, r2
    11ca:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    11ce:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    11d2:	4017      	ands	r7, r2
    11d4:	1bdb      	subs	r3, r3, r7
    11d6:	ea18 0802 	ands.w	r8, r8, r2
    11da:	eb74 0408 	sbcs.w	r4, r4, r8
    11de:	ea19 0902 	ands.w	r9, r9, r2
    11e2:	eb75 0509 	sbcs.w	r5, r5, r9
    11e6:	ea1a 0a02 	ands.w	sl, sl, r2
    11ea:	eb76 060a 	sbcs.w	r6, r6, sl
    11ee:	c078      	stmia	r0!, {r3, r4, r5, r6}
    11f0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    11f4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    11f8:	4017      	ands	r7, r2
    11fa:	41bb      	sbcs	r3, r7
    11fc:	ea18 0802 	ands.w	r8, r8, r2
    1200:	eb74 0408 	sbcs.w	r4, r4, r8
    1204:	ea19 0902 	ands.w	r9, r9, r2
    1208:	eb75 0509 	sbcs.w	r5, r5, r9
    120c:	ea1a 0a02 	ands.w	sl, sl, r2
    1210:	eb76 060a 	sbcs.w	r6, r6, sl
    1214:	c078      	stmia	r0!, {r3, r4, r5, r6}
    1216:	4180      	sbcs	r0, r0
    1218:	4240      	negs	r0, r0
    121a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    121e:	4770      	bx	lr

00001220 <ocrypto_bigint_cswap256>:
    1220:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    1224:	4252      	negs	r2, r2
    1226:	f04f 0804 	mov.w	r8, #4

0000122a <cswap256_loop>:
    122a:	e890 0030 	ldmia.w	r0, {r4, r5}
    122e:	e891 00c0 	ldmia.w	r1, {r6, r7}
    1232:	1ba3      	subs	r3, r4, r6
    1234:	4013      	ands	r3, r2
    1236:	1ae4      	subs	r4, r4, r3
    1238:	18f6      	adds	r6, r6, r3
    123a:	1beb      	subs	r3, r5, r7
    123c:	4013      	ands	r3, r2
    123e:	1aed      	subs	r5, r5, r3
    1240:	18ff      	adds	r7, r7, r3
    1242:	c030      	stmia	r0!, {r4, r5}
    1244:	c1c0      	stmia	r1!, {r6, r7}
    1246:	f1b8 0801 	subs.w	r8, r8, #1
    124a:	d1ee      	bne.n	122a <cswap256_loop>
    124c:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
    1250:	4770      	bx	lr
    1252:	bf00      	nop

00001254 <ocrypto_mul256_noframe>:
    1254:	b500      	push	{lr}
    1256:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
    125a:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
    125e:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
    1262:	b402      	push	{r1}
    1264:	fba7 5102 	umull	r5, r1, r7, r2
    1268:	950a      	str	r5, [sp, #40]	; 0x28
    126a:	fba8 0b02 	umull	r0, fp, r8, r2
    126e:	fbe7 1063 	umaal	r1, r0, r7, r3
    1272:	fbe9 b062 	umaal	fp, r0, r9, r2
    1276:	910b      	str	r1, [sp, #44]	; 0x2c
    1278:	fba8 5103 	umull	r5, r1, r8, r3
    127c:	fbea 0162 	umaal	r0, r1, sl, r2
    1280:	fbe7 b564 	umaal	fp, r5, r7, r4
    1284:	fbe7 0566 	umaal	r0, r5, r7, r6
    1288:	fbe8 1566 	umaal	r1, r5, r8, r6
    128c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    1290:	fba9 b603 	umull	fp, r6, r9, r3
    1294:	fbea 1663 	umaal	r1, r6, sl, r3
    1298:	fbec 5663 	umaal	r5, r6, ip, r3
    129c:	fbe8 0b64 	umaal	r0, fp, r8, r4
    12a0:	fbe9 1b64 	umaal	r1, fp, r9, r4
    12a4:	fbea 5b64 	umaal	r5, fp, sl, r4
    12a8:	fbec 6b64 	umaal	r6, fp, ip, r4
    12ac:	900d      	str	r0, [sp, #52]	; 0x34
    12ae:	fbac 3002 	umull	r3, r0, ip, r2
    12b2:	9c05      	ldr	r4, [sp, #20]
    12b4:	fbee 5062 	umaal	r5, r0, lr, r2
    12b8:	fbe9 6064 	umaal	r6, r0, r9, r4
    12bc:	fbea b064 	umaal	fp, r0, sl, r4
    12c0:	fbe7 3164 	umaal	r3, r1, r7, r4
    12c4:	fbe8 5164 	umaal	r5, r1, r8, r4
    12c8:	9c06      	ldr	r4, [sp, #24]
    12ca:	fbe8 6164 	umaal	r6, r1, r8, r4
    12ce:	fbe9 b164 	umaal	fp, r1, r9, r4
    12d2:	fbea 0164 	umaal	r0, r1, sl, r4
    12d6:	930e      	str	r3, [sp, #56]	; 0x38
    12d8:	fba7 3204 	umull	r3, r2, r7, r4
    12dc:	9c07      	ldr	r4, [sp, #28]
    12de:	fbe7 6264 	umaal	r6, r2, r7, r4
    12e2:	fbe8 b264 	umaal	fp, r2, r8, r4
    12e6:	fbe9 0264 	umaal	r0, r2, r9, r4
    12ea:	fbea 1264 	umaal	r1, r2, sl, r4
    12ee:	9c04      	ldr	r4, [sp, #16]
    12f0:	fbe9 5364 	umaal	r5, r3, r9, r4
    12f4:	fbea 6364 	umaal	r6, r3, sl, r4
    12f8:	9c08      	ldr	r4, [sp, #32]
    12fa:	fbe7 b364 	umaal	fp, r3, r7, r4
    12fe:	fbe8 0364 	umaal	r0, r3, r8, r4
    1302:	fbe9 1364 	umaal	r1, r3, r9, r4
    1306:	fbea 2364 	umaal	r2, r3, sl, r4
    130a:	950f      	str	r5, [sp, #60]	; 0x3c
    130c:	f85d 9b04 	ldr.w	r9, [sp], #4
    1310:	e899 0600 	ldmia.w	r9, {r9, sl}
    1314:	f8dd 8000 	ldr.w	r8, [sp]
    1318:	fba9 5408 	umull	r5, r4, r9, r8
    131c:	fbea b468 	umaal	fp, r4, sl, r8
    1320:	f8dd 8010 	ldr.w	r8, [sp, #16]
    1324:	fbec 0468 	umaal	r0, r4, ip, r8
    1328:	fbee 1468 	umaal	r1, r4, lr, r8
    132c:	fbe9 2468 	umaal	r2, r4, r9, r8
    1330:	fbea 3468 	umaal	r3, r4, sl, r8
    1334:	f8dd 8004 	ldr.w	r8, [sp, #4]
    1338:	fbee 6568 	umaal	r6, r5, lr, r8
    133c:	fbe9 b568 	umaal	fp, r5, r9, r8
    1340:	fbea 0568 	umaal	r0, r5, sl, r8
    1344:	f8dd 8014 	ldr.w	r8, [sp, #20]
    1348:	fbec 1568 	umaal	r1, r5, ip, r8
    134c:	fbee 2568 	umaal	r2, r5, lr, r8
    1350:	fbe9 3568 	umaal	r3, r5, r9, r8
    1354:	fbea 4568 	umaal	r4, r5, sl, r8
    1358:	960f      	str	r6, [sp, #60]	; 0x3c
    135a:	f8dd 8008 	ldr.w	r8, [sp, #8]
    135e:	fbae 7608 	umull	r7, r6, lr, r8
    1362:	fbe9 0668 	umaal	r0, r6, r9, r8
    1366:	fbea 1668 	umaal	r1, r6, sl, r8
    136a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    136e:	fbec 2668 	umaal	r2, r6, ip, r8
    1372:	fbee 3668 	umaal	r3, r6, lr, r8
    1376:	fbe9 4668 	umaal	r4, r6, r9, r8
    137a:	fbea 5668 	umaal	r5, r6, sl, r8
    137e:	f8dd 800c 	ldr.w	r8, [sp, #12]
    1382:	fbec b768 	umaal	fp, r7, ip, r8
    1386:	fbee 0768 	umaal	r0, r7, lr, r8
    138a:	fbe9 1768 	umaal	r1, r7, r9, r8
    138e:	fbea 2768 	umaal	r2, r7, sl, r8
    1392:	f8dd 801c 	ldr.w	r8, [sp, #28]
    1396:	fbec 3768 	umaal	r3, r7, ip, r8
    139a:	fbee 4768 	umaal	r4, r7, lr, r8
    139e:	fbe9 5768 	umaal	r5, r7, r9, r8
    13a2:	fbea 6768 	umaal	r6, r7, sl, r8
    13a6:	b008      	add	sp, #32
    13a8:	bd00      	pop	{pc}
    13aa:	bf00      	nop

000013ac <ocrypto_bigint_mul256>:
    13ac:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    13b0:	b087      	sub	sp, #28
    13b2:	f7ff ff4f 	bl	1254 <ocrypto_mul256_noframe>
    13b6:	f8dd 801c 	ldr.w	r8, [sp, #28]
    13ba:	f108 0820 	add.w	r8, r8, #32
    13be:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    13c2:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    13c4:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
    13c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000013cc <ocrypto_sqr256_noframe>:
    13cc:	b500      	push	{lr}
    13ce:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
    13d2:	fba3 5203 	umull	r5, r2, r3, r3
    13d6:	9501      	str	r5, [sp, #4]
    13d8:	fba3 0104 	umull	r0, r1, r3, r4
    13dc:	fbe3 2064 	umaal	r2, r0, r3, r4
    13e0:	fbe3 1067 	umaal	r1, r0, r3, r7
    13e4:	9202      	str	r2, [sp, #8]
    13e6:	fba3 5207 	umull	r5, r2, r3, r7
    13ea:	fbe3 0268 	umaal	r0, r2, r3, r8
    13ee:	fbe4 1564 	umaal	r1, r5, r4, r4
    13f2:	fbe3 0568 	umaal	r0, r5, r3, r8
    13f6:	fbe3 2569 	umaal	r2, r5, r3, r9
    13fa:	9103      	str	r1, [sp, #12]
    13fc:	fba4 b607 	umull	fp, r6, r4, r7
    1400:	fbe3 2669 	umaal	r2, r6, r3, r9
    1404:	fbe3 566a 	umaal	r5, r6, r3, sl
    1408:	fbe4 0b67 	umaal	r0, fp, r4, r7
    140c:	fbe4 2b68 	umaal	r2, fp, r4, r8
    1410:	fbe3 5b6a 	umaal	r5, fp, r3, sl
    1414:	fbe3 6b6c 	umaal	r6, fp, r3, ip
    1418:	9004      	str	r0, [sp, #16]
    141a:	fba4 1008 	umull	r1, r0, r4, r8
    141e:	fbe4 5069 	umaal	r5, r0, r4, r9
    1422:	fbe3 606c 	umaal	r6, r0, r3, ip
    1426:	fbe3 b06e 	umaal	fp, r0, r3, lr
    142a:	fbe7 2167 	umaal	r2, r1, r7, r7
    142e:	fbe4 5169 	umaal	r5, r1, r4, r9
    1432:	fbe4 616a 	umaal	r6, r1, r4, sl
    1436:	fbe3 b16e 	umaal	fp, r1, r3, lr
    143a:	fbe4 016e 	umaal	r0, r1, r4, lr
    143e:	9205      	str	r2, [sp, #20]
    1440:	fba7 3208 	umull	r3, r2, r7, r8
    1444:	fbe4 626a 	umaal	r6, r2, r4, sl
    1448:	fbe4 b26c 	umaal	fp, r2, r4, ip
    144c:	fbe4 026e 	umaal	r0, r2, r4, lr
    1450:	fbe7 126e 	umaal	r1, r2, r7, lr
    1454:	fbe7 5368 	umaal	r5, r3, r7, r8
    1458:	fbe7 6369 	umaal	r6, r3, r7, r9
    145c:	fbe4 b36c 	umaal	fp, r3, r4, ip
    1460:	fbe7 036c 	umaal	r0, r3, r7, ip
    1464:	fbe7 136e 	umaal	r1, r3, r7, lr
    1468:	fbe8 236e 	umaal	r2, r3, r8, lr
    146c:	9506      	str	r5, [sp, #24]
    146e:	fba7 5409 	umull	r5, r4, r7, r9
    1472:	fbe7 b46a 	umaal	fp, r4, r7, sl
    1476:	fbe7 046c 	umaal	r0, r4, r7, ip
    147a:	fbe8 146c 	umaal	r1, r4, r8, ip
    147e:	fbe8 246e 	umaal	r2, r4, r8, lr
    1482:	fbe9 346e 	umaal	r3, r4, r9, lr
    1486:	fbe8 6568 	umaal	r6, r5, r8, r8
    148a:	fbe7 b56a 	umaal	fp, r5, r7, sl
    148e:	fbe8 056a 	umaal	r0, r5, r8, sl
    1492:	fbe8 156c 	umaal	r1, r5, r8, ip
    1496:	fbe9 256c 	umaal	r2, r5, r9, ip
    149a:	fbe9 356e 	umaal	r3, r5, r9, lr
    149e:	fbea 456e 	umaal	r4, r5, sl, lr
    14a2:	9607      	str	r6, [sp, #28]
    14a4:	fba8 7609 	umull	r7, r6, r8, r9
    14a8:	fbe8 066a 	umaal	r0, r6, r8, sl
    14ac:	fbe9 166a 	umaal	r1, r6, r9, sl
    14b0:	fbe9 266c 	umaal	r2, r6, r9, ip
    14b4:	fbea 366c 	umaal	r3, r6, sl, ip
    14b8:	fbea 466e 	umaal	r4, r6, sl, lr
    14bc:	fbec 566e 	umaal	r5, r6, ip, lr
    14c0:	fbe8 b769 	umaal	fp, r7, r8, r9
    14c4:	fbe9 0769 	umaal	r0, r7, r9, r9
    14c8:	fbe9 176a 	umaal	r1, r7, r9, sl
    14cc:	fbea 276a 	umaal	r2, r7, sl, sl
    14d0:	fbea 376c 	umaal	r3, r7, sl, ip
    14d4:	fbec 476c 	umaal	r4, r7, ip, ip
    14d8:	fbec 576e 	umaal	r5, r7, ip, lr
    14dc:	fbee 676e 	umaal	r6, r7, lr, lr
    14e0:	bd00      	pop	{pc}
    14e2:	bf00      	nop

000014e4 <ocrypto_bigint_sqr256>:
    14e4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14e8:	b087      	sub	sp, #28
    14ea:	f7ff ff6f 	bl	13cc <ocrypto_sqr256_noframe>
    14ee:	f8dd 801c 	ldr.w	r8, [sp, #28]
    14f2:	f108 0820 	add.w	r8, r8, #32
    14f6:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    14fa:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    14fc:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
    1500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001504 <ocrypto_constant_time_equal>:
    1504:	b430      	push	{r4, r5}
    1506:	f04f 0300 	mov.w	r3, #0

0000150a <constant_time_equal_loop>:
    150a:	f810 4b01 	ldrb.w	r4, [r0], #1
    150e:	f811 5b01 	ldrb.w	r5, [r1], #1
    1512:	3a01      	subs	r2, #1
    1514:	ea84 0405 	eor.w	r4, r4, r5
    1518:	ea43 0304 	orr.w	r3, r3, r4
    151c:	d1f5      	bne.n	150a <constant_time_equal_loop>
    151e:	f1a3 0301 	sub.w	r3, r3, #1
    1522:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    1526:	bc30      	pop	{r4, r5}
    1528:	4770      	bx	lr
    152a:	bf00      	nop

0000152c <ocrypto_constant_time_is_zero>:
    152c:	f04f 0300 	mov.w	r3, #0

00001530 <constant_time_is_zero_loop>:
    1530:	f810 2b01 	ldrb.w	r2, [r0], #1
    1534:	3901      	subs	r1, #1
    1536:	ea43 0302 	orr.w	r3, r3, r2
    153a:	d1f9      	bne.n	1530 <constant_time_is_zero_loop>
    153c:	f1a3 0301 	sub.w	r3, r3, #1
    1540:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    1544:	4770      	bx	lr
    1546:	bf00      	nop

00001548 <ocrypto_constant_time_xor>:
    1548:	b430      	push	{r4, r5}

0000154a <constant_time_xor_loop>:
    154a:	f811 4b01 	ldrb.w	r4, [r1], #1
    154e:	f812 5b01 	ldrb.w	r5, [r2], #1
    1552:	406c      	eors	r4, r5
    1554:	f800 4b01 	strb.w	r4, [r0], #1
    1558:	3b01      	subs	r3, #1
    155a:	d1f6      	bne.n	154a <constant_time_xor_loop>
    155c:	bc30      	pop	{r4, r5}
    155e:	4770      	bx	lr

00001560 <ocrypto_mod_p256_add>:
    1560:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1564:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    1568:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    156c:	185b      	adds	r3, r3, r1
    156e:	eb54 040c 	adcs.w	r4, r4, ip
    1572:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1576:	414d      	adcs	r5, r1
    1578:	eb56 060c 	adcs.w	r6, r6, ip
    157c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1580:	414f      	adcs	r7, r1
    1582:	eb58 080c 	adcs.w	r8, r8, ip
    1586:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    158a:	eb59 0901 	adcs.w	r9, r9, r1
    158e:	eb5a 0a0c 	adcs.w	sl, sl, ip
    1592:	4189      	sbcs	r1, r1
    1594:	f1b3 33ff 	subs.w	r3, r3, #4294967295
    1598:	f174 34ff 	sbcs.w	r4, r4, #4294967295
    159c:	f175 35ff 	sbcs.w	r5, r5, #4294967295
    15a0:	f176 0600 	sbcs.w	r6, r6, #0
    15a4:	f177 0700 	sbcs.w	r7, r7, #0
    15a8:	f178 0800 	sbcs.w	r8, r8, #0
    15ac:	f179 0901 	sbcs.w	r9, r9, #1
    15b0:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
    15b4:	f151 0100 	adcs.w	r1, r1, #0
    15b8:	185b      	adds	r3, r3, r1
    15ba:	414c      	adcs	r4, r1
    15bc:	414d      	adcs	r5, r1
    15be:	f156 0600 	adcs.w	r6, r6, #0
    15c2:	f157 0700 	adcs.w	r7, r7, #0
    15c6:	f158 0800 	adcs.w	r8, r8, #0
    15ca:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
    15ce:	eb5a 0a01 	adcs.w	sl, sl, r1
    15d2:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    15d6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    15da:	4770      	bx	lr

000015dc <ocrypto_mod_p256_sub>:
    15dc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    15e0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    15e4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    15e8:	1a5b      	subs	r3, r3, r1
    15ea:	eb74 040c 	sbcs.w	r4, r4, ip
    15ee:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    15f2:	418d      	sbcs	r5, r1
    15f4:	eb76 060c 	sbcs.w	r6, r6, ip
    15f8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    15fc:	418f      	sbcs	r7, r1
    15fe:	eb78 080c 	sbcs.w	r8, r8, ip
    1602:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1606:	eb79 0901 	sbcs.w	r9, r9, r1
    160a:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    160e:	4189      	sbcs	r1, r1
    1610:	185b      	adds	r3, r3, r1
    1612:	414c      	adcs	r4, r1
    1614:	414d      	adcs	r5, r1
    1616:	f156 0600 	adcs.w	r6, r6, #0
    161a:	f157 0700 	adcs.w	r7, r7, #0
    161e:	f158 0800 	adcs.w	r8, r8, #0
    1622:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
    1626:	eb5a 0a01 	adcs.w	sl, sl, r1
    162a:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    162e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1632:	4770      	bx	lr

00001634 <mul_reduce>:
    1634:	eb18 0804 	adds.w	r8, r8, r4
    1638:	eb59 0905 	adcs.w	r9, r9, r5
    163c:	eb5a 0a06 	adcs.w	sl, sl, r6
    1640:	eb5b 0b07 	adcs.w	fp, fp, r7
    1644:	f05f 0c00 	movs.w	ip, #0
    1648:	f14c 0c00 	adc.w	ip, ip, #0
    164c:	eb18 0805 	adds.w	r8, r8, r5
    1650:	eb59 0906 	adcs.w	r9, r9, r6
    1654:	eb5a 0a07 	adcs.w	sl, sl, r7
    1658:	eb5b 0b07 	adcs.w	fp, fp, r7
    165c:	eb50 000c 	adcs.w	r0, r0, ip
    1660:	f05f 0c00 	movs.w	ip, #0
    1664:	eb51 010c 	adcs.w	r1, r1, ip
    1668:	eb52 020c 	adcs.w	r2, r2, ip
    166c:	4163      	adcs	r3, r4
    166e:	f14c 0c00 	adc.w	ip, ip, #0
    1672:	ebb8 0807 	subs.w	r8, r8, r7
    1676:	f179 0900 	sbcs.w	r9, r9, #0
    167a:	f17a 0a00 	sbcs.w	sl, sl, #0
    167e:	eb7b 0b04 	sbcs.w	fp, fp, r4
    1682:	41a8      	sbcs	r0, r5
    1684:	41b1      	sbcs	r1, r6
    1686:	41a2      	sbcs	r2, r4
    1688:	41b3      	sbcs	r3, r6
    168a:	f16c 0c00 	sbc.w	ip, ip, #0
    168e:	ebbb 0b05 	subs.w	fp, fp, r5
    1692:	41b0      	sbcs	r0, r6
    1694:	41b9      	sbcs	r1, r7
    1696:	41aa      	sbcs	r2, r5
    1698:	41bb      	sbcs	r3, r7
    169a:	f16c 0c00 	sbc.w	ip, ip, #0
    169e:	ea6f 74ec 	mvn.w	r4, ip, asr #31
    16a2:	ebb8 0804 	subs.w	r8, r8, r4
    16a6:	eb79 0904 	sbcs.w	r9, r9, r4
    16aa:	eb7a 0a04 	sbcs.w	sl, sl, r4
    16ae:	f17b 0b00 	sbcs.w	fp, fp, #0
    16b2:	f170 0000 	sbcs.w	r0, r0, #0
    16b6:	f171 0100 	sbcs.w	r1, r1, #0
    16ba:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
    16be:	41a3      	sbcs	r3, r4
    16c0:	f16c 0c00 	sbc.w	ip, ip, #0
    16c4:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
    16c8:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
    16cc:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
    16d0:	f15b 0b00 	adcs.w	fp, fp, #0
    16d4:	f150 0400 	adcs.w	r4, r0, #0
    16d8:	f151 0500 	adcs.w	r5, r1, #0
    16dc:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
    16e0:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
    16e4:	f14c 0c00 	adc.w	ip, ip, #0
    16e8:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
    16ec:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
    16f0:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
    16f4:	f15b 0300 	adcs.w	r3, fp, #0
    16f8:	f154 0400 	adcs.w	r4, r4, #0
    16fc:	f155 0500 	adcs.w	r5, r5, #0
    1700:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
    1704:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
    1708:	4770      	bx	lr
    170a:	bf00      	nop

0000170c <ocrypto_mod_p256_mul>:
    170c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1710:	b087      	sub	sp, #28
    1712:	f7ff fd9f 	bl	1254 <ocrypto_mul256_noframe>
    1716:	f8dd 8010 	ldr.w	r8, [sp, #16]
    171a:	f8dd 9014 	ldr.w	r9, [sp, #20]
    171e:	f8dd a018 	ldr.w	sl, [sp, #24]
    1722:	f7ff ff87 	bl	1634 <mul_reduce>
    1726:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    172a:	f7ff ff83 	bl	1634 <mul_reduce>
    172e:	b003      	add	sp, #12
    1730:	f85d 8b04 	ldr.w	r8, [sp], #4
    1734:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    1738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000173c <ocrypto_mod_p256_sqr>:
    173c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1740:	b087      	sub	sp, #28
    1742:	f7ff fe43 	bl	13cc <ocrypto_sqr256_noframe>
    1746:	f8dd 8010 	ldr.w	r8, [sp, #16]
    174a:	f8dd 9014 	ldr.w	r9, [sp, #20]
    174e:	f8dd a018 	ldr.w	sl, [sp, #24]
    1752:	f7ff ff6f 	bl	1634 <mul_reduce>
    1756:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    175a:	f7ff ff6b 	bl	1634 <mul_reduce>
    175e:	b003      	add	sp, #12
    1760:	f85d 8b04 	ldr.w	r8, [sp], #4
    1764:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    1768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000176c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
    176c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    176e:	4615      	mov	r5, r2
    1770:	4a0a      	ldr	r2, [pc, #40]	; (179c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x30>)
    1772:	461c      	mov	r4, r3
    1774:	6856      	ldr	r6, [r2, #4]
    1776:	b12e      	cbz	r6, 1784 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
    1778:	b001      	add	sp, #4
    177a:	462a      	mov	r2, r5
    177c:	46b4      	mov	ip, r6
    177e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1782:	4760      	bx	ip
    1784:	2000      	movs	r0, #0
    1786:	f88d 0000 	strb.w	r0, [sp]
    178a:	4668      	mov	r0, sp
    178c:	f00b fa75 	bl	cc7a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
    1790:	f89d 0000 	ldrb.w	r0, [sp]
    1794:	1a28      	subs	r0, r5, r0
    1796:	7020      	strb	r0, [r4, #0]
    1798:	2000      	movs	r0, #0
    179a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    179c:	20000008 	.word	0x20000008

000017a0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    17a0:	4801      	ldr	r0, [pc, #4]	; (17a8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    17a2:	7800      	ldrb	r0, [r0, #0]
    17a4:	4770      	bx	lr
    17a6:	0000      	.short	0x0000
    17a8:	20000010 	.word	0x20000010

000017ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    17ac:	4905      	ldr	r1, [pc, #20]	; (17c4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    17ae:	780a      	ldrb	r2, [r1, #0]
    17b0:	4290      	cmp	r0, r2
    17b2:	d301      	bcc.n	17b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    17b4:	2000      	movs	r0, #0
    17b6:	4770      	bx	lr
    17b8:	6849      	ldr	r1, [r1, #4]
    17ba:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    17be:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    17c2:	4770      	bx	lr
    17c4:	20000010 	.word	0x20000010
    17c8:	b570      	push	{r4, r5, r6, lr}
    17ca:	4605      	mov	r5, r0
    17cc:	2a20      	cmp	r2, #32
    17ce:	d027      	beq.n	1820 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
    17d0:	4819      	ldr	r0, [pc, #100]	; (1838 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
    17d2:	4c1a      	ldr	r4, [pc, #104]	; (183c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
    17d4:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    17d8:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    17dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    17e0:	2920      	cmp	r1, #32
    17e2:	d022      	beq.n	182a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
    17e4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    17e8:	7840      	ldrb	r0, [r0, #1]
    17ea:	784c      	ldrb	r4, [r1, #1]
    17ec:	7048      	strb	r0, [r1, #1]
    17ee:	4620      	mov	r0, r4
    17f0:	4601      	mov	r1, r0
    17f2:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    17f6:	4291      	cmp	r1, r2
    17f8:	7005      	strb	r5, [r0, #0]
    17fa:	7840      	ldrb	r0, [r0, #1]
    17fc:	d1f8      	bne.n	17f0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
    17fe:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    1802:	2a20      	cmp	r2, #32
    1804:	bf1a      	itte	ne
    1806:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    180a:	7054      	strbne	r4, [r2, #1]
    180c:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    1810:	2220      	movs	r2, #32
    1812:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    1816:	f88c 2001 	strb.w	r2, [ip, #1]
    181a:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    181e:	bd70      	pop	{r4, r5, r6, pc}
    1820:	f240 218a 	movw	r1, #650	; 0x28a
    1824:	2070      	movs	r0, #112	; 0x70
    1826:	f003 f94d 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    182a:	f893 4020 	ldrb.w	r4, [r3, #32]
    182e:	7840      	ldrb	r0, [r0, #1]
    1830:	f883 0020 	strb.w	r0, [r3, #32]
    1834:	e7db      	b.n	17ee <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
    1836:	0000      	.short	0x0000
    1838:	20001140 	.word	0x20001140
    183c:	200011c0 	.word	0x200011c0
    1840:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1844:	b085      	sub	sp, #20
    1846:	4615      	mov	r5, r2
    1848:	460c      	mov	r4, r1
    184a:	f002 f8dd 	bl	3a08 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    184e:	4428      	add	r0, r5
    1850:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1854:	9002      	str	r0, [sp, #8]
    1856:	6821      	ldr	r1, [r4, #0]
    1858:	1a08      	subs	r0, r1, r0
    185a:	0200      	lsls	r0, r0, #8
    185c:	17c1      	asrs	r1, r0, #31
    185e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1862:	1200      	asrs	r0, r0, #8
    1864:	2800      	cmp	r0, #0
    1866:	f300 80d5 	bgt.w	1a14 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x268>
    186a:	48ac      	ldr	r0, [pc, #688]	; (1b1c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x370>)
    186c:	9f08      	ldr	r7, [sp, #32]
    186e:	4eac      	ldr	r6, [pc, #688]	; (1b20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x374>)
    1870:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    1874:	9003      	str	r0, [sp, #12]
    1876:	f890 5020 	ldrb.w	r5, [r0, #32]
    187a:	2020      	movs	r0, #32
    187c:	46e9      	mov	r9, sp
    187e:	f10d 0804 	add.w	r8, sp, #4
    1882:	f88d 0000 	strb.w	r0, [sp]
    1886:	f506 7a40 	add.w	sl, r6, #768	; 0x300
    188a:	2d20      	cmp	r5, #32
    188c:	bf18      	it	ne
    188e:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
    1892:	d025      	beq.n	18e0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    1894:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1898:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    189c:	6822      	ldr	r2, [r4, #0]
    189e:	68c1      	ldr	r1, [r0, #12]
    18a0:	1a51      	subs	r1, r2, r1
    18a2:	0209      	lsls	r1, r1, #8
    18a4:	17ca      	asrs	r2, r1, #31
    18a6:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    18aa:	3008      	adds	r0, #8
    18ac:	1209      	asrs	r1, r1, #8
    18ae:	d417      	bmi.n	18e0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    18b0:	8961      	ldrh	r1, [r4, #10]
    18b2:	b171      	cbz	r1, 18d2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    18b4:	8941      	ldrh	r1, [r0, #10]
    18b6:	b961      	cbnz	r1, 18d2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    18b8:	f000 fda6 	bl	2408 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6bc>
    18bc:	f002 f8a4 	bl	3a08 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    18c0:	6821      	ldr	r1, [r4, #0]
    18c2:	1a08      	subs	r0, r1, r0
    18c4:	0200      	lsls	r0, r0, #8
    18c6:	17c1      	asrs	r1, r0, #31
    18c8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    18cc:	1200      	asrs	r0, r0, #8
    18ce:	2833      	cmp	r0, #51	; 0x33
    18d0:	db06      	blt.n	18e0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    18d2:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    18d6:	f889 5000 	strb.w	r5, [r9]
    18da:	7845      	ldrb	r5, [r0, #1]
    18dc:	2d20      	cmp	r5, #32
    18de:	d1d9      	bne.n	1894 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe8>
    18e0:	f899 0000 	ldrb.w	r0, [r9]
    18e4:	f888 0000 	strb.w	r0, [r8]
    18e8:	46a1      	mov	r9, r4
    18ea:	2d20      	cmp	r5, #32
    18ec:	bf1c      	itt	ne
    18ee:	488d      	ldrne	r0, [pc, #564]	; (1b24 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    18f0:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    18f4:	f000 810e 	beq.w	1b14 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    18f8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    18fc:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
    1900:	f8d9 2004 	ldr.w	r2, [r9, #4]
    1904:	f8da 1008 	ldr.w	r1, [sl, #8]
    1908:	4648      	mov	r0, r9
    190a:	1a89      	subs	r1, r1, r2
    190c:	0209      	lsls	r1, r1, #8
    190e:	17ca      	asrs	r2, r1, #31
    1910:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1914:	f10a 0708 	add.w	r7, sl, #8
    1918:	1209      	asrs	r1, r1, #8
    191a:	d415      	bmi.n	1948 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x19c>
    191c:	8979      	ldrh	r1, [r7, #10]
    191e:	2900      	cmp	r1, #0
    1920:	f000 80f8 	beq.w	1b14 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1924:	8941      	ldrh	r1, [r0, #10]
    1926:	2900      	cmp	r1, #0
    1928:	f040 80f4 	bne.w	1b14 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    192c:	f000 fd6c 	bl	2408 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6bc>
    1930:	f002 f86a 	bl	3a08 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1934:	6839      	ldr	r1, [r7, #0]
    1936:	1a08      	subs	r0, r1, r0
    1938:	0200      	lsls	r0, r0, #8
    193a:	17c1      	asrs	r1, r0, #31
    193c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1940:	1200      	asrs	r0, r0, #8
    1942:	2833      	cmp	r0, #51	; 0x33
    1944:	f280 80e6 	bge.w	1b14 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1948:	f888 5000 	strb.w	r5, [r8]
    194c:	f89a 1014 	ldrb.w	r1, [sl, #20]
    1950:	f899 000c 	ldrb.w	r0, [r9, #12]
    1954:	4281      	cmp	r1, r0
    1956:	d906      	bls.n	1966 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    1958:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    195c:	7845      	ldrb	r5, [r0, #1]
    195e:	2d20      	cmp	r5, #32
    1960:	d1ca      	bne.n	18f8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14c>
    1962:	f000 b8d7 	b.w	1b14 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1966:	f89d 0004 	ldrb.w	r0, [sp, #4]
    196a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    196e:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
    1972:	8a68      	ldrh	r0, [r5, #18]
    1974:	68ef      	ldr	r7, [r5, #12]
    1976:	2800      	cmp	r0, #0
    1978:	d143      	bne.n	1a02 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    197a:	8960      	ldrh	r0, [r4, #10]
    197c:	b3e8      	cbz	r0, 19fa <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x24e>
    197e:	68a8      	ldr	r0, [r5, #8]
    1980:	f00b f99b 	bl	ccba <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1984:	8a69      	ldrh	r1, [r5, #18]
    1986:	7c2a      	ldrb	r2, [r5, #16]
    1988:	4b67      	ldr	r3, [pc, #412]	; (1b28 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x37c>)
    198a:	4411      	add	r1, r2
    198c:	1c49      	adds	r1, r1, #1
    198e:	1842      	adds	r2, r0, r1
    1990:	4298      	cmp	r0, r3
    1992:	d904      	bls.n	199e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f2>
    1994:	f240 51d6 	movw	r1, #1494	; 0x5d6
    1998:	2070      	movs	r0, #112	; 0x70
    199a:	f003 f893 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    199e:	4863      	ldr	r0, [pc, #396]	; (1b2c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x380>)
    19a0:	4281      	cmp	r1, r0
    19a2:	dd04      	ble.n	19ae <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x202>
    19a4:	f240 51d7 	movw	r1, #1495	; 0x5d7
    19a8:	2070      	movs	r0, #112	; 0x70
    19aa:	f003 f88b 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19ae:	4860      	ldr	r0, [pc, #384]	; (1b30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x384>)
    19b0:	4281      	cmp	r1, r0
    19b2:	da04      	bge.n	19be <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x212>
    19b4:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    19b8:	2070      	movs	r0, #112	; 0x70
    19ba:	f003 f883 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19be:	485d      	ldr	r0, [pc, #372]	; (1b34 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x388>)
    19c0:	4290      	cmp	r0, r2
    19c2:	bfdc      	itt	le
    19c4:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    19c8:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    19cc:	dd05      	ble.n	19da <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x22e>
    19ce:	2a00      	cmp	r2, #0
    19d0:	bfbc      	itt	lt
    19d2:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    19d6:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    19da:	4610      	mov	r0, r2
    19dc:	f002 f814 	bl	3a08 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    19e0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    19e4:	1a78      	subs	r0, r7, r1
    19e6:	0200      	lsls	r0, r0, #8
    19e8:	17c2      	asrs	r2, r0, #31
    19ea:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    19ee:	1200      	asrs	r0, r0, #8
    19f0:	2833      	cmp	r0, #51	; 0x33
    19f2:	bfb8      	it	lt
    19f4:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
    19f8:	e000      	b.n	19fc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x250>
    19fa:	e002      	b.n	1a02 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    19fc:	bfb8      	it	lt
    19fe:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
    1a02:	9802      	ldr	r0, [sp, #8]
    1a04:	1a38      	subs	r0, r7, r0
    1a06:	0200      	lsls	r0, r0, #8
    1a08:	17c1      	asrs	r1, r0, #31
    1a0a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1a0e:	1200      	asrs	r0, r0, #8
    1a10:	2800      	cmp	r0, #0
    1a12:	dd03      	ble.n	1a1c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x270>
    1a14:	b009      	add	sp, #36	; 0x24
    1a16:	2000      	movs	r0, #0
    1a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a1c:	e9d4 1000 	ldrd	r1, r0, [r4]
    1a20:	1a40      	subs	r0, r0, r1
    1a22:	4438      	add	r0, r7
    1a24:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
    1a28:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1a2c:	e9c4 1000 	strd	r1, r0, [r4]
    1a30:	9803      	ldr	r0, [sp, #12]
    1a32:	f8dd 8020 	ldr.w	r8, [sp, #32]
    1a36:	466f      	mov	r7, sp
    1a38:	f890 5020 	ldrb.w	r5, [r0, #32]
    1a3c:	2020      	movs	r0, #32
    1a3e:	f10d 0a04 	add.w	sl, sp, #4
    1a42:	f88d 0000 	strb.w	r0, [sp]
    1a46:	2d20      	cmp	r5, #32
    1a48:	bf1c      	itt	ne
    1a4a:	4836      	ldrne	r0, [pc, #216]	; (1b24 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    1a4c:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
    1a50:	d025      	beq.n	1a9e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    1a52:	bf00      	nop
    1a54:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1a58:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1a5c:	6822      	ldr	r2, [r4, #0]
    1a5e:	68c1      	ldr	r1, [r0, #12]
    1a60:	1a51      	subs	r1, r2, r1
    1a62:	0209      	lsls	r1, r1, #8
    1a64:	17ca      	asrs	r2, r1, #31
    1a66:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1a6a:	3008      	adds	r0, #8
    1a6c:	1209      	asrs	r1, r1, #8
    1a6e:	d416      	bmi.n	1a9e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    1a70:	8961      	ldrh	r1, [r4, #10]
    1a72:	b171      	cbz	r1, 1a92 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    1a74:	8941      	ldrh	r1, [r0, #10]
    1a76:	b961      	cbnz	r1, 1a92 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    1a78:	f000 fcc6 	bl	2408 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6bc>
    1a7c:	f001 ffc4 	bl	3a08 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1a80:	6821      	ldr	r1, [r4, #0]
    1a82:	1a08      	subs	r0, r1, r0
    1a84:	0200      	lsls	r0, r0, #8
    1a86:	17c1      	asrs	r1, r0, #31
    1a88:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1a8c:	1200      	asrs	r0, r0, #8
    1a8e:	2833      	cmp	r0, #51	; 0x33
    1a90:	db05      	blt.n	1a9e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    1a92:	eb09 0045 	add.w	r0, r9, r5, lsl #1
    1a96:	703d      	strb	r5, [r7, #0]
    1a98:	7845      	ldrb	r5, [r0, #1]
    1a9a:	2d20      	cmp	r5, #32
    1a9c:	d1da      	bne.n	1a54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2a8>
    1a9e:	7838      	ldrb	r0, [r7, #0]
    1aa0:	f88a 0000 	strb.w	r0, [sl]
    1aa4:	4627      	mov	r7, r4
    1aa6:	2d20      	cmp	r5, #32
    1aa8:	bf1c      	itt	ne
    1aaa:	481e      	ldrne	r0, [pc, #120]	; (1b24 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    1aac:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    1ab0:	d030      	beq.n	1b14 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1ab2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1ab6:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
    1aba:	6879      	ldr	r1, [r7, #4]
    1abc:	f8d9 2008 	ldr.w	r2, [r9, #8]
    1ac0:	4638      	mov	r0, r7
    1ac2:	1a51      	subs	r1, r2, r1
    1ac4:	0209      	lsls	r1, r1, #8
    1ac6:	17ca      	asrs	r2, r1, #31
    1ac8:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1acc:	f109 0808 	add.w	r8, r9, #8
    1ad0:	1209      	asrs	r1, r1, #8
    1ad2:	d412      	bmi.n	1afa <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x34e>
    1ad4:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    1ad8:	b1e1      	cbz	r1, 1b14 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1ada:	8941      	ldrh	r1, [r0, #10]
    1adc:	b9d1      	cbnz	r1, 1b14 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1ade:	f000 fc93 	bl	2408 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6bc>
    1ae2:	f001 ff91 	bl	3a08 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1ae6:	f8d8 1000 	ldr.w	r1, [r8]
    1aea:	1a08      	subs	r0, r1, r0
    1aec:	0200      	lsls	r0, r0, #8
    1aee:	17c1      	asrs	r1, r0, #31
    1af0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1af4:	1200      	asrs	r0, r0, #8
    1af6:	2833      	cmp	r0, #51	; 0x33
    1af8:	da0c      	bge.n	1b14 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1afa:	f88a 5000 	strb.w	r5, [sl]
    1afe:	f899 0014 	ldrb.w	r0, [r9, #20]
    1b02:	7b39      	ldrb	r1, [r7, #12]
    1b04:	4288      	cmp	r0, r1
    1b06:	f67f af2e 	bls.w	1966 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    1b0a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1b0e:	7845      	ldrb	r5, [r0, #1]
    1b10:	2d20      	cmp	r5, #32
    1b12:	d1ce      	bne.n	1ab2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x306>
    1b14:	b009      	add	sp, #36	; 0x24
    1b16:	2001      	movs	r0, #1
    1b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b1c:	200011c0 	.word	0x200011c0
    1b20:	20000e40 	.word	0x20000e40
    1b24:	20001140 	.word	0x20001140
    1b28:	1e847fff 	.word	0x1e847fff
    1b2c:	0f424000 	.word	0x0f424000
    1b30:	f0bdc000 	.word	0xf0bdc000
    1b34:	1e848000 	.word	0x1e848000
    1b38:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1b3c:	4604      	mov	r4, r0
    1b3e:	483c      	ldr	r0, [pc, #240]	; (1c30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x484>)
    1b40:	460e      	mov	r6, r1
    1b42:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    1b46:	4f3b      	ldr	r7, [pc, #236]	; (1c34 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x488>)
    1b48:	f890 5020 	ldrb.w	r5, [r0, #32]
    1b4c:	2020      	movs	r0, #32
    1b4e:	4698      	mov	r8, r3
    1b50:	4692      	mov	sl, r2
    1b52:	7010      	strb	r0, [r2, #0]
    1b54:	f507 7940 	add.w	r9, r7, #768	; 0x300
    1b58:	2d20      	cmp	r5, #32
    1b5a:	bf18      	it	ne
    1b5c:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
    1b60:	d028      	beq.n	1bb4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    1b62:	bf00      	nop
    1b64:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1b68:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    1b6c:	f100 0108 	add.w	r1, r0, #8
    1b70:	68c0      	ldr	r0, [r0, #12]
    1b72:	6822      	ldr	r2, [r4, #0]
    1b74:	1a10      	subs	r0, r2, r0
    1b76:	0200      	lsls	r0, r0, #8
    1b78:	17c2      	asrs	r2, r0, #31
    1b7a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1b7e:	1200      	asrs	r0, r0, #8
    1b80:	d418      	bmi.n	1bb4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    1b82:	8960      	ldrh	r0, [r4, #10]
    1b84:	b178      	cbz	r0, 1ba6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    1b86:	8948      	ldrh	r0, [r1, #10]
    1b88:	b968      	cbnz	r0, 1ba6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    1b8a:	4608      	mov	r0, r1
    1b8c:	f000 fc3c 	bl	2408 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6bc>
    1b90:	f001 ff3a 	bl	3a08 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1b94:	6821      	ldr	r1, [r4, #0]
    1b96:	1a08      	subs	r0, r1, r0
    1b98:	0200      	lsls	r0, r0, #8
    1b9a:	17c1      	asrs	r1, r0, #31
    1b9c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1ba0:	1200      	asrs	r0, r0, #8
    1ba2:	2833      	cmp	r0, #51	; 0x33
    1ba4:	db06      	blt.n	1bb4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    1ba6:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1baa:	f88a 5000 	strb.w	r5, [sl]
    1bae:	7845      	ldrb	r5, [r0, #1]
    1bb0:	2d20      	cmp	r5, #32
    1bb2:	d1d7      	bne.n	1b64 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3b8>
    1bb4:	f89a 0000 	ldrb.w	r0, [sl]
    1bb8:	f888 0000 	strb.w	r0, [r8]
    1bbc:	2d20      	cmp	r5, #32
    1bbe:	bf18      	it	ne
    1bc0:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
    1bc4:	d030      	beq.n	1c28 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1bc6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1bca:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
    1bce:	6861      	ldr	r1, [r4, #4]
    1bd0:	f8d9 2008 	ldr.w	r2, [r9, #8]
    1bd4:	4620      	mov	r0, r4
    1bd6:	1a51      	subs	r1, r2, r1
    1bd8:	0209      	lsls	r1, r1, #8
    1bda:	17ca      	asrs	r2, r1, #31
    1bdc:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1be0:	f109 0608 	add.w	r6, r9, #8
    1be4:	1209      	asrs	r1, r1, #8
    1be6:	d410      	bmi.n	1c0a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x45e>
    1be8:	8971      	ldrh	r1, [r6, #10]
    1bea:	b1e9      	cbz	r1, 1c28 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1bec:	8941      	ldrh	r1, [r0, #10]
    1bee:	b9d9      	cbnz	r1, 1c28 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1bf0:	f000 fc0a 	bl	2408 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6bc>
    1bf4:	f001 ff08 	bl	3a08 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1bf8:	6831      	ldr	r1, [r6, #0]
    1bfa:	1a08      	subs	r0, r1, r0
    1bfc:	0200      	lsls	r0, r0, #8
    1bfe:	17c1      	asrs	r1, r0, #31
    1c00:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1c04:	1200      	asrs	r0, r0, #8
    1c06:	2833      	cmp	r0, #51	; 0x33
    1c08:	da0e      	bge.n	1c28 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1c0a:	f888 5000 	strb.w	r5, [r8]
    1c0e:	f899 0014 	ldrb.w	r0, [r9, #20]
    1c12:	7b21      	ldrb	r1, [r4, #12]
    1c14:	4288      	cmp	r0, r1
    1c16:	d802      	bhi.n	1c1e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x472>
    1c18:	2000      	movs	r0, #0
    1c1a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1c1e:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    1c22:	7845      	ldrb	r5, [r0, #1]
    1c24:	2d20      	cmp	r5, #32
    1c26:	d1ce      	bne.n	1bc6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x41a>
    1c28:	2001      	movs	r0, #1
    1c2a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1c2e:	0000      	.short	0x0000
    1c30:	200011c0 	.word	0x200011c0
    1c34:	20000e40 	.word	0x20000e40
    1c38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c3c:	b096      	sub	sp, #88	; 0x58
    1c3e:	4615      	mov	r5, r2
    1c40:	468a      	mov	sl, r1
    1c42:	2600      	movs	r6, #0
    1c44:	f002 f968 	bl	3f18 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    1c48:	4604      	mov	r4, r0
    1c4a:	f1ba 0f01 	cmp.w	sl, #1
    1c4e:	bf18      	it	ne
    1c50:	f1ba 0f02 	cmpne.w	sl, #2
    1c54:	d005      	beq.n	1c62 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x4b6>
    1c56:	f640 1163 	movw	r1, #2403	; 0x963
    1c5a:	f04f 0070 	mov.w	r0, #112	; 0x70
    1c5e:	f002 ff31 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c62:	49ff      	ldr	r1, [pc, #1020]	; (2060 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x314>)
    1c64:	2001      	movs	r0, #1
    1c66:	6008      	str	r0, [r1, #0]
    1c68:	49fe      	ldr	r1, [pc, #1016]	; (2064 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x318>)
    1c6a:	68c9      	ldr	r1, [r1, #12]
    1c6c:	6008      	str	r0, [r1, #0]
    1c6e:	f04f 0b00 	mov.w	fp, #0
    1c72:	f88d b046 	strb.w	fp, [sp, #70]	; 0x46
    1c76:	1e80      	subs	r0, r0, #2
    1c78:	900c      	str	r0, [sp, #48]	; 0x30
    1c7a:	49fb      	ldr	r1, [pc, #1004]	; (2068 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x31c>)
    1c7c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1c80:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    1c84:	3308      	adds	r3, #8
    1c86:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    1c8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1c8c:	af0d      	add	r7, sp, #52	; 0x34
    1c8e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    1c92:	a80d      	add	r0, sp, #52	; 0x34
    1c94:	f000 fbb8 	bl	2408 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6bc>
    1c98:	900b      	str	r0, [sp, #44]	; 0x2c
    1c9a:	48f3      	ldr	r0, [pc, #972]	; (2068 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x31c>)
    1c9c:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
    1ca0:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
    1ca4:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    1ca8:	f1b8 0f00 	cmp.w	r8, #0
    1cac:	bf14      	ite	ne
    1cae:	f04f 0901 	movne.w	r9, #1
    1cb2:	f04f 0900 	moveq.w	r9, #0
    1cb6:	980d      	ldr	r0, [sp, #52]	; 0x34
    1cb8:	9014      	str	r0, [sp, #80]	; 0x50
    1cba:	f1b9 0f00 	cmp.w	r9, #0
    1cbe:	d009      	beq.n	1cd4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x528>
    1cc0:	48ea      	ldr	r0, [pc, #936]	; (206c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x320>)
    1cc2:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    1cc6:	b928      	cbnz	r0, 1cd4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x528>
    1cc8:	f002 fe84 	bl	49d4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1ccc:	2800      	cmp	r0, #0
    1cce:	bf08      	it	eq
    1cd0:	2701      	moveq	r7, #1
    1cd2:	d000      	beq.n	1cd6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x52a>
    1cd4:	2700      	movs	r7, #0
    1cd6:	48e6      	ldr	r0, [pc, #920]	; (2070 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x324>)
    1cd8:	2100      	movs	r1, #0
    1cda:	460d      	mov	r5, r1
    1cdc:	7800      	ldrb	r0, [r0, #0]
    1cde:	2801      	cmp	r0, #1
    1ce0:	bf18      	it	ne
    1ce2:	2803      	cmpne	r0, #3
    1ce4:	d13b      	bne.n	1d5e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12>
    1ce6:	48e2      	ldr	r0, [pc, #904]	; (2070 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x324>)
    1ce8:	8846      	ldrh	r6, [r0, #2]
    1cea:	4546      	cmp	r6, r8
    1cec:	d937      	bls.n	1d5e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12>
    1cee:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1cf0:	43f3      	mvns	r3, r6
    1cf2:	f8df e380 	ldr.w	lr, [pc, #896]	; 2074 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x328>
    1cf6:	18c8      	adds	r0, r1, r3
    1cf8:	f10d 0c0c 	add.w	ip, sp, #12
    1cfc:	aa15      	add	r2, sp, #84	; 0x54
    1cfe:	4571      	cmp	r1, lr
    1d00:	d904      	bls.n	1d0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x560>
    1d02:	f240 51d6 	movw	r1, #1494	; 0x5d6
    1d06:	2070      	movs	r0, #112	; 0x70
    1d08:	f002 fedc 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d0c:	49da      	ldr	r1, [pc, #872]	; (2078 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x32c>)
    1d0e:	428b      	cmp	r3, r1
    1d10:	dd04      	ble.n	1d1c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x570>
    1d12:	f240 51d7 	movw	r1, #1495	; 0x5d7
    1d16:	2070      	movs	r0, #112	; 0x70
    1d18:	f002 fed4 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d1c:	49d7      	ldr	r1, [pc, #860]	; (207c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x330>)
    1d1e:	428b      	cmp	r3, r1
    1d20:	da04      	bge.n	1d2c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x580>
    1d22:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    1d26:	2070      	movs	r0, #112	; 0x70
    1d28:	f002 fecc 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d2c:	49d4      	ldr	r1, [pc, #848]	; (2080 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x334>)
    1d2e:	4281      	cmp	r1, r0
    1d30:	bfdc      	itt	le
    1d32:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1d36:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1d3a:	dd05      	ble.n	1d48 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x59c>
    1d3c:	2800      	cmp	r0, #0
    1d3e:	bfbc      	itt	lt
    1d40:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1d44:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1d48:	4661      	mov	r1, ip
    1d4a:	f001 fe79 	bl	3a40 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1d4e:	9803      	ldr	r0, [sp, #12]
    1d50:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d54:	9003      	str	r0, [sp, #12]
    1d56:	990d      	ldr	r1, [sp, #52]	; 0x34
    1d58:	1a08      	subs	r0, r1, r0
    1d5a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1d5e:	2f00      	cmp	r7, #0
    1d60:	bf18      	it	ne
    1d62:	2532      	movne	r5, #50	; 0x32
    1d64:	d104      	bne.n	1d70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24>
    1d66:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    1d6a:	2800      	cmp	r0, #0
    1d6c:	bf18      	it	ne
    1d6e:	2502      	movne	r5, #2
    1d70:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1d74:	d008      	beq.n	1d88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>
    1d76:	980d      	ldr	r0, [sp, #52]	; 0x34
    1d78:	1b00      	subs	r0, r0, r4
    1d7a:	0200      	lsls	r0, r0, #8
    1d7c:	17c2      	asrs	r2, r0, #31
    1d7e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1d82:	1200      	asrs	r0, r0, #8
    1d84:	2801      	cmp	r0, #1
    1d86:	da02      	bge.n	1d8e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x42>
    1d88:	2203      	movs	r2, #3
    1d8a:	9816      	ldr	r0, [sp, #88]	; 0x58
    1d8c:	e00b      	b.n	1da6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5a>
    1d8e:	b147      	cbz	r7, 1da2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x56>
    1d90:	48b6      	ldr	r0, [pc, #728]	; (206c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x320>)
    1d92:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1d96:	b120      	cbz	r0, 1da2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x56>
    1d98:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    1d9c:	1c05      	adds	r5, r0, #0
    1d9e:	bf18      	it	ne
    1da0:	2502      	movne	r5, #2
    1da2:	4620      	mov	r0, r4
    1da4:	2200      	movs	r2, #0
    1da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1da8:	442a      	add	r2, r5
    1daa:	1a5b      	subs	r3, r3, r1
    1dac:	f023 4c7f 	bic.w	ip, r3, #4278190080	; 0xff000000
    1db0:	f1ac 0301 	sub.w	r3, ip, #1
    1db4:	f023 457f 	bic.w	r5, r3, #4278190080	; 0xff000000
    1db8:	1a2b      	subs	r3, r5, r0
    1dba:	021b      	lsls	r3, r3, #8
    1dbc:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    1dc0:	eb03 631e 	add.w	r3, r3, lr, lsr #24
    1dc4:	121b      	asrs	r3, r3, #8
    1dc6:	4293      	cmp	r3, r2
    1dc8:	db04      	blt.n	1dd4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x88>
    1dca:	2900      	cmp	r1, #0
    1dcc:	bf18      	it	ne
    1dce:	f8cd c034 	strne.w	ip, [sp, #52]	; 0x34
    1dd2:	e027      	b.n	1e24 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd8>
    1dd4:	b189      	cbz	r1, 1dfa <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xae>
    1dd6:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    1dda:	b91b      	cbnz	r3, 1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1ddc:	4ba4      	ldr	r3, [pc, #656]	; (2070 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x324>)
    1dde:	781b      	ldrb	r3, [r3, #0]
    1de0:	2b03      	cmp	r3, #3
    1de2:	d00a      	beq.n	1dfa <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xae>
    1de4:	b927      	cbnz	r7, 1df0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa4>
    1de6:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
    1dea:	2900      	cmp	r1, #0
    1dec:	bf18      	it	ne
    1dee:	1e92      	subne	r2, r2, #2
    1df0:	2100      	movs	r1, #0
    1df2:	f88d b044 	strb.w	fp, [sp, #68]	; 0x44
    1df6:	460e      	mov	r6, r1
    1df8:	e007      	b.n	1e0a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xbe>
    1dfa:	b937      	cbnz	r7, 1e0a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xbe>
    1dfc:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
    1e00:	2b00      	cmp	r3, #0
    1e02:	bf1c      	itt	ne
    1e04:	f88d b044 	strbne.w	fp, [sp, #68]	; 0x44
    1e08:	1e92      	subne	r2, r2, #2
    1e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1e0c:	1a59      	subs	r1, r3, r1
    1e0e:	1e49      	subs	r1, r1, #1
    1e10:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    1e14:	1a28      	subs	r0, r5, r0
    1e16:	0200      	lsls	r0, r0, #8
    1e18:	17c1      	asrs	r1, r0, #31
    1e1a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1e1e:	1200      	asrs	r0, r0, #8
    1e20:	4290      	cmp	r0, r2
    1e22:	db7c      	blt.n	1f1e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d2>
    1e24:	9709      	str	r7, [sp, #36]	; 0x24
    1e26:	465f      	mov	r7, fp
    1e28:	f001 ff6c 	bl	3d04 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1e2c:	1a28      	subs	r0, r5, r0
    1e2e:	0200      	lsls	r0, r0, #8
    1e30:	17c1      	asrs	r1, r0, #31
    1e32:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1e36:	1200      	asrs	r0, r0, #8
    1e38:	283d      	cmp	r0, #61	; 0x3d
    1e3a:	da20      	bge.n	1e7e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x132>
    1e3c:	f1ba 0f01 	cmp.w	sl, #1
    1e40:	d002      	beq.n	1e48 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfc>
    1e42:	9809      	ldr	r0, [sp, #36]	; 0x24
    1e44:	b140      	cbz	r0, 1e58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    1e46:	e012      	b.n	1e6e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x122>
    1e48:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1e4c:	d11c      	bne.n	1e88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13c>
    1e4e:	f44f 610e 	mov.w	r1, #2272	; 0x8e0
    1e52:	2070      	movs	r0, #112	; 0x70
    1e54:	f002 fe36 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e58:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1e5c:	d007      	beq.n	1e6e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x122>
    1e5e:	1b60      	subs	r0, r4, r5
    1e60:	0200      	lsls	r0, r0, #8
    1e62:	17c1      	asrs	r1, r0, #31
    1e64:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1e68:	1200      	asrs	r0, r0, #8
    1e6a:	2804      	cmp	r0, #4
    1e6c:	dd04      	ble.n	1e78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12c>
    1e6e:	462c      	mov	r4, r5
    1e70:	4620      	mov	r0, r4
    1e72:	f001 ff4d 	bl	3d10 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1e76:	e007      	b.n	1e88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13c>
    1e78:	2800      	cmp	r0, #0
    1e7a:	dc6d      	bgt.n	1f58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20c>
    1e7c:	e004      	b.n	1e88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13c>
    1e7e:	462c      	mov	r4, r5
    1e80:	4620      	mov	r0, r4
    1e82:	f001 ff45 	bl	3d10 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1e86:	464f      	mov	r7, r9
    1e88:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1e8c:	d05f      	beq.n	1f4e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x202>
    1e8e:	980d      	ldr	r0, [sp, #52]	; 0x34
    1e90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1e92:	1b00      	subs	r0, r0, r4
    1e94:	1b12      	subs	r2, r2, r4
    1e96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1e9a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1e9e:	2801      	cmp	r0, #1
    1ea0:	d35a      	bcc.n	1f58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20c>
    1ea2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    1ea6:	bf98      	it	ls
    1ea8:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    1eac:	d854      	bhi.n	1f58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20c>
    1eae:	4620      	mov	r0, r4
    1eb0:	f00a ff03 	bl	ccba <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1eb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1eb6:	4b70      	ldr	r3, [pc, #448]	; (2078 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x32c>)
    1eb8:	1a0d      	subs	r5, r1, r0
    1eba:	1aeb      	subs	r3, r5, r3
    1ebc:	465a      	mov	r2, fp
    1ebe:	f17b 0300 	sbcs.w	r3, fp, #0
    1ec2:	d319      	bcc.n	1ef8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ac>
    1ec4:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 2078 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x32c>
    1ec8:	1a43      	subs	r3, r0, r1
    1eca:	ebb3 0c0c 	subs.w	ip, r3, ip
    1ece:	f172 0c00 	sbcs.w	ip, r2, #0
    1ed2:	d311      	bcc.n	1ef8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ac>
    1ed4:	f8df c19c 	ldr.w	ip, [pc, #412]	; 2074 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x328>
    1ed8:	45ac      	cmp	ip, r5
    1eda:	bf3e      	ittt	cc
    1edc:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    1ee0:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    1ee4:	1845      	addcc	r5, r0, r1
    1ee6:	d307      	bcc.n	1ef8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ac>
    1ee8:	459c      	cmp	ip, r3
    1eea:	d239      	bcs.n	1f60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x214>
    1eec:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    1ef0:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    1ef4:	4408      	add	r0, r1
    1ef6:	4245      	negs	r5, r0
    1ef8:	f8df b170 	ldr.w	fp, [pc, #368]	; 206c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x320>
    1efc:	f89b 001e 	ldrb.w	r0, [fp, #30]
    1f00:	b398      	cbz	r0, 1f6a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21e>
    1f02:	4650      	mov	r0, sl
    1f04:	f04f 0a00 	mov.w	sl, #0
    1f08:	2801      	cmp	r0, #1
    1f0a:	d005      	beq.n	1f18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1cc>
    1f0c:	2002      	movs	r0, #2
    1f0e:	f002 f95b 	bl	41c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1f12:	2001      	movs	r0, #1
    1f14:	f002 f958 	bl	41c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1f18:	45b0      	cmp	r8, r6
    1f1a:	d232      	bcs.n	1f82 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x236>
    1f1c:	e000      	b.n	1f20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d4>
    1f1e:	e01b      	b.n	1f58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20c>
    1f20:	eba5 0106 	sub.w	r1, r5, r6
    1f24:	f04f 0301 	mov.w	r3, #1
    1f28:	f04f 0203 	mov.w	r2, #3
    1f2c:	f04f 0002 	mov.w	r0, #2
    1f30:	f002 f876 	bl	4020 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1f34:	2800      	cmp	r0, #0
    1f36:	bf08      	it	eq
    1f38:	f04f 0a01 	moveq.w	sl, #1
    1f3c:	f1b8 0f00 	cmp.w	r8, #0
    1f40:	d039      	beq.n	1fb6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26a>
    1f42:	2301      	movs	r3, #1
    1f44:	eba5 0108 	sub.w	r1, r5, r8
    1f48:	2203      	movs	r2, #3
    1f4a:	4618      	mov	r0, r3
    1f4c:	e027      	b.n	1f9e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x252>
    1f4e:	f640 11fd 	movw	r1, #2557	; 0x9fd
    1f52:	2070      	movs	r0, #112	; 0x70
    1f54:	f002 fdb6 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f58:	b019      	add	sp, #100	; 0x64
    1f5a:	2000      	movs	r0, #0
    1f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f60:	f640 21dd 	movw	r1, #2781	; 0xadd
    1f64:	2070      	movs	r0, #112	; 0x70
    1f66:	f002 fdad 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f6a:	45b0      	cmp	r8, r6
    1f6c:	bf34      	ite	cc
    1f6e:	4630      	movcc	r0, r6
    1f70:	4640      	movcs	r0, r8
    1f72:	301e      	adds	r0, #30
    1f74:	42a8      	cmp	r0, r5
    1f76:	dbc4      	blt.n	1f02 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b6>
    1f78:	f44f 6121 	mov.w	r1, #2576	; 0xa10
    1f7c:	2070      	movs	r0, #112	; 0x70
    1f7e:	f002 fda1 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f82:	d910      	bls.n	1fa6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x25a>
    1f84:	2301      	movs	r3, #1
    1f86:	eba5 0108 	sub.w	r1, r5, r8
    1f8a:	2203      	movs	r2, #3
    1f8c:	4618      	mov	r0, r3
    1f8e:	f002 f847 	bl	4020 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1f92:	b3e0      	cbz	r0, 200e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c2>
    1f94:	b17e      	cbz	r6, 1fb6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26a>
    1f96:	1ba9      	subs	r1, r5, r6
    1f98:	2301      	movs	r3, #1
    1f9a:	2203      	movs	r2, #3
    1f9c:	2002      	movs	r0, #2
    1f9e:	f002 f83f 	bl	4020 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1fa2:	b3a0      	cbz	r0, 200e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c2>
    1fa4:	e007      	b.n	1fb6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26a>
    1fa6:	ea56 0008 	orrs.w	r0, r6, r8
    1faa:	d004      	beq.n	1fb6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26a>
    1fac:	f640 1147 	movw	r1, #2375	; 0x947
    1fb0:	2070      	movs	r0, #112	; 0x70
    1fb2:	f002 fd87 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fb6:	2301      	movs	r3, #1
    1fb8:	2203      	movs	r2, #3
    1fba:	4629      	mov	r1, r5
    1fbc:	2000      	movs	r0, #0
    1fbe:	f002 f82f 	bl	4020 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1fc2:	b320      	cbz	r0, 200e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c2>
    1fc4:	2601      	movs	r6, #1
    1fc6:	f1ba 0f00 	cmp.w	sl, #0
    1fca:	d004      	beq.n	1fd6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28a>
    1fcc:	9814      	ldr	r0, [sp, #80]	; 0x50
    1fce:	900d      	str	r0, [sp, #52]	; 0x34
    1fd0:	2000      	movs	r0, #0
    1fd2:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    1fd6:	f1b9 0f00 	cmp.w	r9, #0
    1fda:	bf04      	itt	eq
    1fdc:	f89b 002d 	ldrbeq.w	r0, [fp, #45]	; 0x2d
    1fe0:	2800      	cmpeq	r0, #0
    1fe2:	d000      	beq.n	1fe6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x29a>
    1fe4:	b32f      	cbz	r7, 2032 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2e6>
    1fe6:	f89b 002c 	ldrb.w	r0, [fp, #44]	; 0x2c
    1fea:	b120      	cbz	r0, 1ff6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2aa>
    1fec:	f002 fbc8 	bl	4780 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1ff0:	2000      	movs	r0, #0
    1ff2:	f88b 002c 	strb.w	r0, [fp, #44]	; 0x2c
    1ff6:	b1ff      	cbz	r7, 2038 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ec>
    1ff8:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    1ffc:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2000:	2301      	movs	r3, #1
    2002:	2203      	movs	r2, #3
    2004:	2005      	movs	r0, #5
    2006:	f002 f80b 	bl	4020 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    200a:	b340      	cbz	r0, 205e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x312>
    200c:	e000      	b.n	2010 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c4>
    200e:	e006      	b.n	201e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d2>
    2010:	f89b 002d 	ldrb.w	r0, [fp, #45]	; 0x2d
    2014:	2800      	cmp	r0, #0
    2016:	bf08      	it	eq
    2018:	f88b 602d 	strbeq.w	r6, [fp, #45]	; 0x2d
    201c:	e015      	b.n	204a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2fe>
    201e:	2002      	movs	r0, #2
    2020:	f002 f8d2 	bl	41c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2024:	2001      	movs	r0, #1
    2026:	f002 f8cf 	bl	41c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    202a:	b019      	add	sp, #100	; 0x64
    202c:	2000      	movs	r0, #0
    202e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2032:	f89b 002c 	ldrb.w	r0, [fp, #44]	; 0x2c
    2036:	b328      	cbz	r0, 2084 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x338>
    2038:	f89b 002d 	ldrb.w	r0, [fp, #45]	; 0x2d
    203c:	b128      	cbz	r0, 204a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2fe>
    203e:	2005      	movs	r0, #5
    2040:	f002 f8c2 	bl	41c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2044:	2000      	movs	r0, #0
    2046:	f88b 002d 	strb.w	r0, [fp, #45]	; 0x2d
    204a:	eba5 0008 	sub.w	r0, r5, r8
    204e:	f1a0 0119 	sub.w	r1, r0, #25
    2052:	2900      	cmp	r1, #0
    2054:	dc23      	bgt.n	209e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x352>
    2056:	f640 2142 	movw	r1, #2626	; 0xa42
    205a:	2070      	movs	r0, #112	; 0x70
    205c:	e013      	b.n	2086 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x33a>
    205e:	e019      	b.n	2094 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x348>
    2060:	40000508 	.word	0x40000508
    2064:	20000018 	.word	0x20000018
    2068:	20000e40 	.word	0x20000e40
    206c:	200011c0 	.word	0x200011c0
    2070:	20000020 	.word	0x20000020
    2074:	1e847fff 	.word	0x1e847fff
    2078:	0f424000 	.word	0x0f424000
    207c:	f0bdc000 	.word	0xf0bdc000
    2080:	1e848000 	.word	0x1e848000
    2084:	e001      	b.n	208a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x33e>
    2086:	f002 fd1d 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    208a:	f002 fb95 	bl	47b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    208e:	f88b 602c 	strb.w	r6, [fp, #44]	; 0x2c
    2092:	e7b0      	b.n	1ff6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2aa>
    2094:	f240 3112 	movw	r1, #786	; 0x312
    2098:	2070      	movs	r0, #112	; 0x70
    209a:	f002 fd13 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    209e:	2203      	movs	r2, #3
    20a0:	2301      	movs	r3, #1
    20a2:	4610      	mov	r0, r2
    20a4:	f001 ffbc 	bl	4020 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    20a8:	b300      	cbz	r0, 20ec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3a0>
    20aa:	4913      	ldr	r1, [pc, #76]	; (20f8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3ac>)
    20ac:	2000      	movs	r0, #0
    20ae:	68c9      	ldr	r1, [r1, #12]
    20b0:	6008      	str	r0, [r1, #0]
    20b2:	4912      	ldr	r1, [pc, #72]	; (20fc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3b0>)
    20b4:	6008      	str	r0, [r1, #0]
    20b6:	ac0a      	add	r4, sp, #40	; 0x28
    20b8:	4811      	ldr	r0, [pc, #68]	; (2100 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3b4>)
    20ba:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    20be:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
    20c2:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
    20c6:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
    20ca:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
    20ce:	ac0e      	add	r4, sp, #56	; 0x38
    20d0:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    20d4:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
    20d8:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
    20dc:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
    20e0:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
    20e4:	b019      	add	sp, #100	; 0x64
    20e6:	2001      	movs	r0, #1
    20e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20ec:	f640 214a 	movw	r1, #2634	; 0xa4a
    20f0:	2070      	movs	r0, #112	; 0x70
    20f2:	f002 fce7 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20f6:	0000      	.short	0x0000
    20f8:	20000018 	.word	0x20000018
    20fc:	40000508 	.word	0x40000508
    2100:	20000e40 	.word	0x20000e40
    2104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2108:	4606      	mov	r6, r0
    210a:	b083      	sub	sp, #12
    210c:	7808      	ldrb	r0, [r1, #0]
    210e:	7390      	strb	r0, [r2, #14]
    2110:	7acf      	ldrb	r7, [r1, #11]
    2112:	7357      	strb	r7, [r2, #13]
    2114:	7a88      	ldrb	r0, [r1, #10]
    2116:	7310      	strb	r0, [r2, #12]
    2118:	8908      	ldrh	r0, [r1, #8]
    211a:	4614      	mov	r4, r2
    211c:	8150      	strh	r0, [r2, #10]
    211e:	460d      	mov	r5, r1
    2120:	780a      	ldrb	r2, [r1, #0]
    2122:	495f      	ldr	r1, [pc, #380]	; (22a0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x554>)
    2124:	4699      	mov	r9, r3
    2126:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    212a:	424b      	negs	r3, r1
    212c:	f1ac 0801 	sub.w	r8, ip, #1
    2130:	b15a      	cbz	r2, 214a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3fe>
    2132:	43c0      	mvns	r0, r0
    2134:	f8d5 8004 	ldr.w	r8, [r5, #4]
    2138:	f104 0208 	add.w	r2, r4, #8
    213c:	4288      	cmp	r0, r1
    213e:	dd3d      	ble.n	21bc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x470>
    2140:	f240 51d7 	movw	r1, #1495	; 0x5d7
    2144:	2070      	movs	r0, #112	; 0x70
    2146:	f002 fcbd 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    214a:	68ee      	ldr	r6, [r5, #12]
    214c:	686d      	ldr	r5, [r5, #4]
    214e:	ea6f 0900 	mvn.w	r9, r0
    2152:	f104 0208 	add.w	r2, r4, #8
    2156:	eb06 0009 	add.w	r0, r6, r9
    215a:	4546      	cmp	r6, r8
    215c:	d904      	bls.n	2168 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x41c>
    215e:	f240 51d6 	movw	r1, #1494	; 0x5d6
    2162:	2070      	movs	r0, #112	; 0x70
    2164:	f002 fcae 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2168:	4589      	cmp	r9, r1
    216a:	dce9      	bgt.n	2140 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3f4>
    216c:	4599      	cmp	r9, r3
    216e:	db28      	blt.n	21c2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x476>
    2170:	4584      	cmp	ip, r0
    2172:	bfdc      	itt	le
    2174:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2178:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    217c:	dd05      	ble.n	218a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x43e>
    217e:	2800      	cmp	r0, #0
    2180:	bfbc      	itt	lt
    2182:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2186:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    218a:	4621      	mov	r1, r4
    218c:	f001 fc58 	bl	3a40 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2190:	6820      	ldr	r0, [r4, #0]
    2192:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2196:	1970      	adds	r0, r6, r5
    2198:	1c40      	adds	r0, r0, #1
    219a:	6021      	str	r1, [r4, #0]
    219c:	2f00      	cmp	r7, #0
    219e:	bf08      	it	eq
    21a0:	307a      	addeq	r0, #122	; 0x7a
    21a2:	d003      	beq.n	21ac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x460>
    21a4:	2f01      	cmp	r7, #1
    21a6:	bf08      	it	eq
    21a8:	3048      	addeq	r0, #72	; 0x48
    21aa:	d12d      	bne.n	2208 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4bc>
    21ac:	f001 fc2c 	bl	3a08 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    21b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    21b4:	6060      	str	r0, [r4, #4]
    21b6:	b003      	add	sp, #12
    21b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    21bc:	4601      	mov	r1, r0
    21be:	4298      	cmp	r0, r3
    21c0:	da04      	bge.n	21cc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x480>
    21c2:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    21c6:	2070      	movs	r0, #112	; 0x70
    21c8:	f002 fc7c 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    21cc:	4584      	cmp	ip, r0
    21ce:	bfdc      	itt	le
    21d0:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    21d4:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    21d8:	dd05      	ble.n	21e6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x49a>
    21da:	2800      	cmp	r0, #0
    21dc:	bfbc      	itt	lt
    21de:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    21e2:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    21e6:	4621      	mov	r1, r4
    21e8:	f001 fc2a 	bl	3a40 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    21ec:	6820      	ldr	r0, [r4, #0]
    21ee:	2f00      	cmp	r7, #0
    21f0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    21f4:	f108 0001 	add.w	r0, r8, #1
    21f8:	6021      	str	r1, [r4, #0]
    21fa:	bf08      	it	eq
    21fc:	307a      	addeq	r0, #122	; 0x7a
    21fe:	d008      	beq.n	2212 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c6>
    2200:	2f01      	cmp	r7, #1
    2202:	bf08      	it	eq
    2204:	3048      	addeq	r0, #72	; 0x48
    2206:	d004      	beq.n	2212 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c6>
    2208:	f240 617e 	movw	r1, #1662	; 0x67e
    220c:	2070      	movs	r0, #112	; 0x70
    220e:	f002 fc59 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2212:	f001 fbf9 	bl	3a08 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2216:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    221a:	6061      	str	r1, [r4, #4]
    221c:	8960      	ldrh	r0, [r4, #10]
    221e:	aa01      	add	r2, sp, #4
    2220:	4669      	mov	r1, sp
    2222:	f001 fc0d 	bl	3a40 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2226:	481f      	ldr	r0, [pc, #124]	; (22a4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x558>)
    2228:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    222c:	2920      	cmp	r1, #32
    222e:	d023      	beq.n	2278 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x52c>
    2230:	6900      	ldr	r0, [r0, #16]
    2232:	1d40      	adds	r0, r0, #5
    2234:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2238:	e9d4 2100 	ldrd	r2, r1, [r4]
    223c:	1a89      	subs	r1, r1, r2
    223e:	6020      	str	r0, [r4, #0]
    2240:	4408      	add	r0, r1
    2242:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2246:	6060      	str	r0, [r4, #4]
    2248:	464b      	mov	r3, r9
    224a:	4632      	mov	r2, r6
    224c:	4621      	mov	r1, r4
    224e:	68e8      	ldr	r0, [r5, #12]
    2250:	f7ff faf6 	bl	1840 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    2254:	2800      	cmp	r0, #0
    2256:	bf1c      	itt	ne
    2258:	b003      	addne	sp, #12
    225a:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    225e:	e9d4 1000 	ldrd	r1, r0, [r4]
    2262:	1a40      	subs	r0, r0, r1
    2264:	4430      	add	r0, r6
    2266:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    226a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    226e:	e9c4 1000 	strd	r1, r0, [r4]
    2272:	b003      	add	sp, #12
    2274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2278:	8960      	ldrh	r0, [r4, #10]
    227a:	f106 0709 	add.w	r7, r6, #9
    227e:	b120      	cbz	r0, 228a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x53e>
    2280:	f002 fba8 	bl	49d4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2284:	2800      	cmp	r0, #0
    2286:	bf08      	it	eq
    2288:	3732      	addeq	r7, #50	; 0x32
    228a:	4807      	ldr	r0, [pc, #28]	; (22a8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x55c>)
    228c:	7841      	ldrb	r1, [r0, #1]
    228e:	9800      	ldr	r0, [sp, #0]
    2290:	4281      	cmp	r1, r0
    2292:	bf84      	itt	hi
    2294:	1a08      	subhi	r0, r1, r0
    2296:	4407      	addhi	r7, r0
    2298:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    229c:	e7cc      	b.n	2238 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4ec>
    229e:	0000      	.short	0x0000
    22a0:	0f424000 	.word	0x0f424000
    22a4:	200011c0 	.word	0x200011c0
    22a8:	20000020 	.word	0x20000020
    22ac:	b570      	push	{r4, r5, r6, lr}
    22ae:	4d1e      	ldr	r5, [pc, #120]	; (2328 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5dc>)
    22b0:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    22b4:	2820      	cmp	r0, #32
    22b6:	bf18      	it	ne
    22b8:	bd70      	popne	{r4, r5, r6, pc}
    22ba:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    22be:	eb05 0082 	add.w	r0, r5, r2, lsl #2
    22c2:	f890 4020 	ldrb.w	r4, [r0, #32]
    22c6:	2c20      	cmp	r4, #32
    22c8:	d029      	beq.n	231e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5d2>
    22ca:	4b18      	ldr	r3, [pc, #96]	; (232c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5e0>)
    22cc:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    22d0:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    22d4:	7849      	ldrb	r1, [r1, #1]
    22d6:	f880 1020 	strb.w	r1, [r0, #32]
    22da:	21ff      	movs	r1, #255	; 0xff
    22dc:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    22e0:	f885 102b 	strb.w	r1, [r5, #43]	; 0x2b
    22e4:	f885 402f 	strb.w	r4, [r5, #47]	; 0x2f
    22e8:	4621      	mov	r1, r4
    22ea:	2002      	movs	r0, #2
    22ec:	f000 f8c6 	bl	247c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x730>
    22f0:	2000      	movs	r0, #0
    22f2:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
    22f6:	77a8      	strb	r0, [r5, #30]
    22f8:	490d      	ldr	r1, [pc, #52]	; (2330 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5e4>)
    22fa:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    22fe:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    2302:	7d00      	ldrb	r0, [r0, #20]
    2304:	2800      	cmp	r0, #0
    2306:	bf08      	it	eq
    2308:	f002 fd32 	bleq	4d70 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    230c:	4809      	ldr	r0, [pc, #36]	; (2334 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5e8>)
    230e:	6841      	ldr	r1, [r0, #4]
    2310:	2900      	cmp	r1, #0
    2312:	bf08      	it	eq
    2314:	bd70      	popeq	{r4, r5, r6, pc}
    2316:	2000      	movs	r0, #0
    2318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    231c:	4708      	bx	r1
    231e:	f240 3152 	movw	r1, #850	; 0x352
    2322:	2070      	movs	r0, #112	; 0x70
    2324:	f002 fbce 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2328:	200011c0 	.word	0x200011c0
    232c:	20001140 	.word	0x20001140
    2330:	20000e40 	.word	0x20000e40
    2334:	20000018 	.word	0x20000018
    2338:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    233c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 23f8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6ac>
    2340:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    2344:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    2348:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    234c:	2c20      	cmp	r4, #32
    234e:	bf08      	it	eq
    2350:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2354:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 23fc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6b0>
    2358:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 2400 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6b4>
    235c:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    2360:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    2364:	2607      	movs	r6, #7
    2366:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    236a:	2801      	cmp	r0, #1
    236c:	d00e      	beq.n	238c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x640>
    236e:	2804      	cmp	r0, #4
    2370:	bf08      	it	eq
    2372:	2602      	moveq	r6, #2
    2374:	d00a      	beq.n	238c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x640>
    2376:	2805      	cmp	r0, #5
    2378:	bf0c      	ite	eq
    237a:	2603      	moveq	r6, #3
    237c:	2806      	cmpne	r0, #6
    237e:	d005      	beq.n	238c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x640>
    2380:	f640 01aa 	movw	r1, #2218	; 0x8aa
    2384:	f04f 0070 	mov.w	r0, #112	; 0x70
    2388:	f002 fb9c 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    238c:	f1bb 0f00 	cmp.w	fp, #0
    2390:	bf18      	it	ne
    2392:	f3af 8000 	nopne.w
    2396:	f3ef 8010 	mrs	r0, PRIMASK
    239a:	b672      	cpsid	i
    239c:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    23a0:	784a      	ldrb	r2, [r1, #1]
    23a2:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    23a6:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    23aa:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    23ae:	42a2      	cmp	r2, r4
    23b0:	bf04      	itt	eq
    23b2:	2220      	moveq	r2, #32
    23b4:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    23b8:	b1b8      	cbz	r0, 23ea <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x69e>
    23ba:	462a      	mov	r2, r5
    23bc:	4621      	mov	r1, r4
    23be:	2001      	movs	r0, #1
    23c0:	f000 f85c 	bl	247c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x730>
    23c4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    23c8:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    23cc:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    23d0:	6840      	ldr	r0, [r0, #4]
    23d2:	4631      	mov	r1, r6
    23d4:	4790      	blx	r2
    23d6:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    23da:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    23de:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    23e2:	2c20      	cmp	r4, #32
    23e4:	d1bc      	bne.n	2360 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x614>
    23e6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    23ea:	4806      	ldr	r0, [pc, #24]	; (2404 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6b8>)
    23ec:	2800      	cmp	r0, #0
    23ee:	bf18      	it	ne
    23f0:	f3af 8000 	nopne.w
    23f4:	b662      	cpsie	i
    23f6:	e7e0      	b.n	23ba <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x66e>
    23f8:	200011c0 	.word	0x200011c0
    23fc:	00000000 	.word	0x00000000
    2400:	20001140 	.word	0x20001140
    2404:	00000000 	.word	0x00000000
    2408:	b510      	push	{r4, lr}
    240a:	4604      	mov	r4, r0
    240c:	6800      	ldr	r0, [r0, #0]
    240e:	f00a fc54 	bl	ccba <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2412:	4602      	mov	r2, r0
    2414:	8960      	ldrh	r0, [r4, #10]
    2416:	7a21      	ldrb	r1, [r4, #8]
    2418:	4b14      	ldr	r3, [pc, #80]	; (246c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x720>)
    241a:	4408      	add	r0, r1
    241c:	1c41      	adds	r1, r0, #1
    241e:	1850      	adds	r0, r2, r1
    2420:	429a      	cmp	r2, r3
    2422:	d904      	bls.n	242e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6e2>
    2424:	f240 51d6 	movw	r1, #1494	; 0x5d6
    2428:	2070      	movs	r0, #112	; 0x70
    242a:	f002 fb4b 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    242e:	4a10      	ldr	r2, [pc, #64]	; (2470 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x724>)
    2430:	4291      	cmp	r1, r2
    2432:	dd04      	ble.n	243e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6f2>
    2434:	f240 51d7 	movw	r1, #1495	; 0x5d7
    2438:	2070      	movs	r0, #112	; 0x70
    243a:	f002 fb43 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    243e:	4a0d      	ldr	r2, [pc, #52]	; (2474 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x728>)
    2440:	4291      	cmp	r1, r2
    2442:	da04      	bge.n	244e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x702>
    2444:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    2448:	2070      	movs	r0, #112	; 0x70
    244a:	f002 fb3b 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    244e:	490a      	ldr	r1, [pc, #40]	; (2478 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x72c>)
    2450:	4281      	cmp	r1, r0
    2452:	bfde      	ittt	le
    2454:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2458:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    245c:	bd10      	pople	{r4, pc}
    245e:	2800      	cmp	r0, #0
    2460:	bfbc      	itt	lt
    2462:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2466:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    246a:	bd10      	pop	{r4, pc}
    246c:	1e847fff 	.word	0x1e847fff
    2470:	0f424000 	.word	0x0f424000
    2474:	f0bdc000 	.word	0xf0bdc000
    2478:	1e848000 	.word	0x1e848000
    247c:	f8df c054 	ldr.w	ip, [pc, #84]	; 24d4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x788>
    2480:	b510      	push	{r4, lr}
    2482:	2300      	movs	r3, #0
    2484:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    2488:	2807      	cmp	r0, #7
    248a:	d21e      	bcs.n	24ca <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x77e>
    248c:	e8df f000 	tbb	[pc, r0]
    2490:	05050505 	.word	0x05050505
    2494:	00040404 	.word	0x00040404
    2498:	2301      	movs	r3, #1
    249a:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    249e:	2b00      	cmp	r3, #0
    24a0:	bf08      	it	eq
    24a2:	bd10      	popeq	{r4, pc}
    24a4:	480c      	ldr	r0, [pc, #48]	; (24d8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x78c>)
    24a6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    24aa:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    24ae:	2820      	cmp	r0, #32
    24b0:	bf0e      	itee	eq
    24b2:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    24b6:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    24ba:	7041      	strbne	r1, [r0, #1]
    24bc:	2020      	movs	r0, #32
    24be:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    24c2:	7058      	strb	r0, [r3, #1]
    24c4:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    24c8:	bd10      	pop	{r4, pc}
    24ca:	f44f 7118 	mov.w	r1, #608	; 0x260
    24ce:	2070      	movs	r0, #112	; 0x70
    24d0:	f002 faf8 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24d4:	20001140 	.word	0x20001140
    24d8:	200011c0 	.word	0x200011c0
    24dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24e0:	4681      	mov	r9, r0
    24e2:	4856      	ldr	r0, [pc, #344]	; (263c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8f0>)
    24e4:	4688      	mov	r8, r1
    24e6:	eb00 0088 	add.w	r0, r0, r8, lsl #2
    24ea:	9000      	str	r0, [sp, #0]
    24ec:	f890 4020 	ldrb.w	r4, [r0, #32]
    24f0:	f1b9 0f01 	cmp.w	r9, #1
    24f4:	4625      	mov	r5, r4
    24f6:	bf18      	it	ne
    24f8:	f1b9 0f02 	cmpne.w	r9, #2
    24fc:	d005      	beq.n	250a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7be>
    24fe:	f640 2181 	movw	r1, #2689	; 0xa81
    2502:	f04f 0070 	mov.w	r0, #112	; 0x70
    2506:	f002 fadd 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    250a:	2700      	movs	r7, #0
    250c:	2d20      	cmp	r5, #32
    250e:	d044      	beq.n	259a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84e>
    2510:	484a      	ldr	r0, [pc, #296]	; (263c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8f0>)
    2512:	2600      	movs	r6, #0
    2514:	7f80      	ldrb	r0, [r0, #30]
    2516:	2800      	cmp	r0, #0
    2518:	bf08      	it	eq
    251a:	2602      	moveq	r6, #2
    251c:	f001 fbf2 	bl	3d04 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2520:	f8df a11c 	ldr.w	sl, [pc, #284]	; 2640 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8f4>
    2524:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2528:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    252c:	688a      	ldr	r2, [r1, #8]
    252e:	68c9      	ldr	r1, [r1, #12]
    2530:	1a12      	subs	r2, r2, r0
    2532:	1a09      	subs	r1, r1, r0
    2534:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2538:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    253c:	4296      	cmp	r6, r2
    253e:	bf99      	ittee	ls
    2540:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    2544:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    2548:	4a3e      	ldrhi	r2, [pc, #248]	; (2644 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8f8>)
    254a:	eb02 1b88 	addhi.w	fp, r2, r8, lsl #6
    254e:	d922      	bls.n	2596 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84a>
    2550:	4622      	mov	r2, r4
    2552:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    2556:	784c      	ldrb	r4, [r1, #1]
    2558:	2c20      	cmp	r4, #32
    255a:	d014      	beq.n	2586 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x83a>
    255c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2560:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    2564:	f8d1 c008 	ldr.w	ip, [r1, #8]
    2568:	68c9      	ldr	r1, [r1, #12]
    256a:	ebac 0c00 	sub.w	ip, ip, r0
    256e:	1a09      	subs	r1, r1, r0
    2570:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    2574:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2578:	4566      	cmp	r6, ip
    257a:	bf9c      	itt	ls
    257c:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    2580:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    2584:	d8e4      	bhi.n	2550 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x804>
    2586:	2a20      	cmp	r2, #32
    2588:	d005      	beq.n	2596 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84a>
    258a:	4643      	mov	r3, r8
    258c:	2120      	movs	r1, #32
    258e:	2004      	movs	r0, #4
    2590:	f7ff f91a 	bl	17c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    2594:	4604      	mov	r4, r0
    2596:	42ac      	cmp	r4, r5
    2598:	d116      	bne.n	25c8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x87c>
    259a:	482b      	ldr	r0, [pc, #172]	; (2648 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8fc>)
    259c:	2800      	cmp	r0, #0
    259e:	bf18      	it	ne
    25a0:	f3af 8000 	nopne.w
    25a4:	f001 fbae 	bl	3d04 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    25a8:	4c24      	ldr	r4, [pc, #144]	; (263c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8f0>)
    25aa:	4603      	mov	r3, r0
    25ac:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    25b0:	2820      	cmp	r0, #32
    25b2:	d00c      	beq.n	25ce <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x882>
    25b4:	68e0      	ldr	r0, [r4, #12]
    25b6:	1c99      	adds	r1, r3, #2
    25b8:	1a08      	subs	r0, r1, r0
    25ba:	0200      	lsls	r0, r0, #8
    25bc:	17c1      	asrs	r1, r0, #31
    25be:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    25c2:	1200      	asrs	r0, r0, #8
    25c4:	2800      	cmp	r0, #0
    25c6:	dd02      	ble.n	25ce <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x882>
    25c8:	2000      	movs	r0, #0
    25ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25ce:	2d20      	cmp	r5, #32
    25d0:	d00d      	beq.n	25ee <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8a2>
    25d2:	462a      	mov	r2, r5
    25d4:	4649      	mov	r1, r9
    25d6:	4618      	mov	r0, r3
    25d8:	f7ff fb2e 	bl	1c38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x48c>
    25dc:	b320      	cbz	r0, 2628 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8dc>
    25de:	9800      	ldr	r0, [sp, #0]
    25e0:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    25e4:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    25e8:	2001      	movs	r0, #1
    25ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25ee:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    25f2:	b118      	cbz	r0, 25fc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8b0>
    25f4:	f002 f8c4 	bl	4780 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    25f8:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    25fc:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2600:	b120      	cbz	r0, 260c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8c0>
    2602:	2005      	movs	r0, #5
    2604:	f001 fde0 	bl	41c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2608:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    260c:	2004      	movs	r0, #4
    260e:	f001 fddb 	bl	41c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2612:	f001 fe49 	bl	42a8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2616:	2020      	movs	r0, #32
    2618:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    261c:	480b      	ldr	r0, [pc, #44]	; (264c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x900>)
    261e:	68c0      	ldr	r0, [r0, #12]
    2620:	6007      	str	r7, [r0, #0]
    2622:	480b      	ldr	r0, [pc, #44]	; (2650 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x904>)
    2624:	6007      	str	r7, [r0, #0]
    2626:	e7df      	b.n	25e8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x89c>
    2628:	4643      	mov	r3, r8
    262a:	462a      	mov	r2, r5
    262c:	2120      	movs	r1, #32
    262e:	2004      	movs	r0, #4
    2630:	f7ff f8ca 	bl	17c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    2634:	2000      	movs	r0, #0
    2636:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    263a:	0000      	.short	0x0000
    263c:	200011c0 	.word	0x200011c0
    2640:	20000e40 	.word	0x20000e40
    2644:	20001140 	.word	0x20001140
    2648:	00000000 	.word	0x00000000
    264c:	20000018 	.word	0x20000018
    2650:	40000508 	.word	0x40000508

00002654 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    2654:	4906      	ldr	r1, [pc, #24]	; (2670 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    2656:	b510      	push	{r4, lr}
    2658:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    265c:	2a20      	cmp	r2, #32
    265e:	bf1c      	itt	ne
    2660:	7788      	strbne	r0, [r1, #30]
    2662:	bd10      	popne	{r4, pc}
    2664:	f240 31b1 	movw	r1, #945	; 0x3b1
    2668:	2070      	movs	r0, #112	; 0x70
    266a:	f002 fa2b 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    266e:	0000      	.short	0x0000
    2670:	200011c0 	.word	0x200011c0

00002674 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    2674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2678:	4e5e      	ldr	r6, [pc, #376]	; (27f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    267a:	4607      	mov	r7, r0
    267c:	b085      	sub	sp, #20
    267e:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    2682:	4688      	mov	r8, r1
    2684:	2820      	cmp	r0, #32
    2686:	d051      	beq.n	272c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb8>
    2688:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    268c:	f106 040c 	add.w	r4, r6, #12
    2690:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2694:	f5a6 7960 	sub.w	r9, r6, #896	; 0x380
    2698:	eb09 0ac0 	add.w	sl, r9, r0, lsl #3
    269c:	2020      	movs	r0, #32
    269e:	f88d 0000 	strb.w	r0, [sp]
    26a2:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    26a6:	aa03      	add	r2, sp, #12
    26a8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    26ac:	a901      	add	r1, sp, #4
    26ae:	f890 5020 	ldrb.w	r5, [r0, #32]
    26b2:	6930      	ldr	r0, [r6, #16]
    26b4:	9002      	str	r0, [sp, #8]
    26b6:	6830      	ldr	r0, [r6, #0]
    26b8:	4438      	add	r0, r7
    26ba:	f001 f9c1 	bl	3a40 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    26be:	f8da 000c 	ldr.w	r0, [sl, #12]
    26c2:	9901      	ldr	r1, [sp, #4]
    26c4:	2f65      	cmp	r7, #101	; 0x65
    26c6:	4408      	add	r0, r1
    26c8:	d335      	bcc.n	2736 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    26ca:	4b4b      	ldr	r3, [pc, #300]	; (27f8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x184>)
    26cc:	2100      	movs	r1, #0
    26ce:	1bdb      	subs	r3, r3, r7
    26d0:	4189      	sbcs	r1, r1
    26d2:	d330      	bcc.n	2736 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    26d4:	6821      	ldr	r1, [r4, #0]
    26d6:	1a41      	subs	r1, r0, r1
    26d8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    26dc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    26e0:	d829      	bhi.n	2736 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    26e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    26e6:	6060      	str	r0, [r4, #4]
    26e8:	4630      	mov	r0, r6
    26ea:	f884 800c 	strb.w	r8, [r4, #12]
    26ee:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    26f2:	46ea      	mov	sl, sp
    26f4:	2d20      	cmp	r5, #32
    26f6:	bf1c      	itt	ne
    26f8:	4940      	ldrne	r1, [pc, #256]	; (27fc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x188>)
    26fa:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    26fe:	d03e      	beq.n	277e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10a>
    2700:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    2704:	eb09 08c0 	add.w	r8, r9, r0, lsl #3
    2708:	6860      	ldr	r0, [r4, #4]
    270a:	f8d8 2008 	ldr.w	r2, [r8, #8]
    270e:	4621      	mov	r1, r4
    2710:	1a10      	subs	r0, r2, r0
    2712:	0200      	lsls	r0, r0, #8
    2714:	17c2      	asrs	r2, r0, #31
    2716:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    271a:	f108 0608 	add.w	r6, r8, #8
    271e:	1200      	asrs	r0, r0, #8
    2720:	d41b      	bmi.n	275a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe6>
    2722:	8970      	ldrh	r0, [r6, #10]
    2724:	b358      	cbz	r0, 277e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10a>
    2726:	8948      	ldrh	r0, [r1, #10]
    2728:	b148      	cbz	r0, 273e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    272a:	e028      	b.n	277e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10a>
    272c:	f640 314c 	movw	r1, #2892	; 0xb4c
    2730:	2070      	movs	r0, #112	; 0x70
    2732:	f002 f9c7 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2736:	b005      	add	sp, #20
    2738:	2001      	movs	r0, #1
    273a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    273e:	4620      	mov	r0, r4
    2740:	f7ff fe62 	bl	2408 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6bc>
    2744:	f001 f960 	bl	3a08 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2748:	6831      	ldr	r1, [r6, #0]
    274a:	1a08      	subs	r0, r1, r0
    274c:	0200      	lsls	r0, r0, #8
    274e:	17c1      	asrs	r1, r0, #31
    2750:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2754:	1200      	asrs	r0, r0, #8
    2756:	2833      	cmp	r0, #51	; 0x33
    2758:	da11      	bge.n	277e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10a>
    275a:	f88a 5000 	strb.w	r5, [sl]
    275e:	f898 1014 	ldrb.w	r1, [r8, #20]
    2762:	7b20      	ldrb	r0, [r4, #12]
    2764:	4281      	cmp	r1, r0
    2766:	d805      	bhi.n	2774 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    2768:	9802      	ldr	r0, [sp, #8]
    276a:	6060      	str	r0, [r4, #4]
    276c:	b005      	add	sp, #20
    276e:	2002      	movs	r0, #2
    2770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2774:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    2778:	7845      	ldrb	r5, [r0, #1]
    277a:	2d20      	cmp	r5, #32
    277c:	d1c0      	bne.n	2700 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x8c>
    277e:	2005      	movs	r0, #5
    2780:	f001 fd22 	bl	41c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2784:	4c1b      	ldr	r4, [pc, #108]	; (27f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    2786:	f04f 30ff 	mov.w	r0, #4294967295
    278a:	60a0      	str	r0, [r4, #8]
    278c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    2790:	f89d 2000 	ldrb.w	r2, [sp]
    2794:	2120      	movs	r1, #32
    2796:	2a20      	cmp	r2, #32
    2798:	bf13      	iteet	ne
    279a:	2005      	movne	r0, #5
    279c:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    27a0:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    27a4:	f7ff f810 	blne	17c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    27a8:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    27ac:	4913      	ldr	r1, [pc, #76]	; (27fc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x188>)
    27ae:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    27b2:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    27b6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    27ba:	7048      	strb	r0, [r1, #1]
    27bc:	6820      	ldr	r0, [r4, #0]
    27be:	4438      	add	r0, r7
    27c0:	6020      	str	r0, [r4, #0]
    27c2:	20ff      	movs	r0, #255	; 0xff
    27c4:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    27c8:	7e60      	ldrb	r0, [r4, #25]
    27ca:	2801      	cmp	r0, #1
    27cc:	d105      	bne.n	27da <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x166>
    27ce:	6920      	ldr	r0, [r4, #16]
    27d0:	1e40      	subs	r0, r0, #1
    27d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    27d6:	f001 fb3d 	bl	3e54 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    27da:	f89d 0000 	ldrb.w	r0, [sp]
    27de:	2820      	cmp	r0, #32
    27e0:	d003      	beq.n	27ea <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x176>
    27e2:	4807      	ldr	r0, [pc, #28]	; (2800 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x18c>)
    27e4:	7840      	ldrb	r0, [r0, #1]
    27e6:	f002 fa3d 	bl	4c64 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    27ea:	b005      	add	sp, #20
    27ec:	2000      	movs	r0, #0
    27ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27f2:	0000      	.short	0x0000
    27f4:	200011c0 	.word	0x200011c0
    27f8:	0f424000 	.word	0x0f424000
    27fc:	20001140 	.word	0x20001140
    2800:	20000018 	.word	0x20000018

00002804 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    2804:	4806      	ldr	r0, [pc, #24]	; (2820 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    2806:	b510      	push	{r4, lr}
    2808:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    280c:	2920      	cmp	r1, #32
    280e:	bf1c      	itt	ne
    2810:	7e00      	ldrbne	r0, [r0, #24]
    2812:	bd10      	popne	{r4, pc}
    2814:	f640 3145 	movw	r1, #2885	; 0xb45
    2818:	2070      	movs	r0, #112	; 0x70
    281a:	f002 f953 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    281e:	0000      	.short	0x0000
    2820:	200011c0 	.word	0x200011c0

00002824 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    2824:	4602      	mov	r2, r0
    2826:	4b14      	ldr	r3, [pc, #80]	; (2878 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    2828:	b510      	push	{r4, lr}
    282a:	4408      	add	r0, r1
    282c:	429a      	cmp	r2, r3
    282e:	d904      	bls.n	283a <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    2830:	f240 51d6 	movw	r1, #1494	; 0x5d6
    2834:	2070      	movs	r0, #112	; 0x70
    2836:	f002 f945 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    283a:	4a10      	ldr	r2, [pc, #64]	; (287c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    283c:	4291      	cmp	r1, r2
    283e:	dd04      	ble.n	284a <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    2840:	f240 51d7 	movw	r1, #1495	; 0x5d7
    2844:	2070      	movs	r0, #112	; 0x70
    2846:	f002 f93d 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    284a:	4a0d      	ldr	r2, [pc, #52]	; (2880 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    284c:	4291      	cmp	r1, r2
    284e:	da04      	bge.n	285a <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    2850:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    2854:	2070      	movs	r0, #112	; 0x70
    2856:	f002 f935 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    285a:	490a      	ldr	r1, [pc, #40]	; (2884 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    285c:	4281      	cmp	r1, r0
    285e:	bfde      	ittt	le
    2860:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2864:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2868:	bd10      	pople	{r4, pc}
    286a:	2800      	cmp	r0, #0
    286c:	bfbc      	itt	lt
    286e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2872:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2876:	bd10      	pop	{r4, pc}
    2878:	1e847fff 	.word	0x1e847fff
    287c:	0f424000 	.word	0x0f424000
    2880:	f0bdc000 	.word	0xf0bdc000
    2884:	1e848000 	.word	0x1e848000

00002888 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    2888:	4b15      	ldr	r3, [pc, #84]	; (28e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x58>)
    288a:	1a0a      	subs	r2, r1, r0
    288c:	f04f 0c00 	mov.w	ip, #0
    2890:	1ad3      	subs	r3, r2, r3
    2892:	f17c 0300 	sbcs.w	r3, ip, #0
    2896:	bf3c      	itt	cc
    2898:	4610      	movcc	r0, r2
    289a:	4770      	bxcc	lr
    289c:	b510      	push	{r4, lr}
    289e:	1a43      	subs	r3, r0, r1
    28a0:	4c0f      	ldr	r4, [pc, #60]	; (28e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x58>)
    28a2:	1b1c      	subs	r4, r3, r4
    28a4:	f17c 0c00 	sbcs.w	ip, ip, #0
    28a8:	bf3c      	itt	cc
    28aa:	4610      	movcc	r0, r2
    28ac:	bd10      	popcc	{r4, pc}
    28ae:	f8df c034 	ldr.w	ip, [pc, #52]	; 28e4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x5c>
    28b2:	4594      	cmp	ip, r2
    28b4:	bf3f      	itttt	cc
    28b6:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    28ba:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    28be:	4408      	addcc	r0, r1
    28c0:	bd10      	popcc	{r4, pc}
    28c2:	459c      	cmp	ip, r3
    28c4:	d206      	bcs.n	28d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x4c>
    28c6:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    28ca:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    28ce:	4408      	add	r0, r1
    28d0:	4240      	negs	r0, r0
    28d2:	bd10      	pop	{r4, pc}
    28d4:	f640 21dd 	movw	r1, #2781	; 0xadd
    28d8:	2070      	movs	r0, #112	; 0x70
    28da:	f002 f8f3 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    28de:	0000      	.short	0x0000
    28e0:	0f424000 	.word	0x0f424000
    28e4:	1e847fff 	.word	0x1e847fff

000028e8 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    28e8:	490e      	ldr	r1, [pc, #56]	; (2924 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    28ea:	b510      	push	{r4, lr}
    28ec:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    28f0:	2820      	cmp	r0, #32
    28f2:	d012      	beq.n	291a <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    28f4:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    28f8:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    28fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2900:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    2904:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    2908:	6840      	ldr	r0, [r0, #4]
    290a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    290e:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    2912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2916:	2104      	movs	r1, #4
    2918:	4710      	bx	r2
    291a:	f640 018d 	movw	r1, #2189	; 0x88d
    291e:	2070      	movs	r0, #112	; 0x70
    2920:	f002 f8d0 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2924:	200011c0 	.word	0x200011c0

00002928 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    2928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    292a:	4d6c      	ldr	r5, [pc, #432]	; (2adc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    292c:	4a6c      	ldr	r2, [pc, #432]	; (2ae0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    292e:	f505 7460 	add.w	r4, r5, #896	; 0x380
    2932:	2601      	movs	r6, #1
    2934:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    2938:	2808      	cmp	r0, #8
    293a:	d26e      	bcs.n	2a1a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf2>
    293c:	e8df f000 	tbb	[pc, r0]
    2940:	ab997304 	.word	0xab997304
    2944:	b5b043c9 	.word	0xb5b043c9
    2948:	b919      	cbnz	r1, 2952 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    294a:	f001 ff35 	bl	47b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    294e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    2952:	8ae0      	ldrh	r0, [r4, #22]
    2954:	b110      	cbz	r0, 295c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    2956:	f002 f83d 	bl	49d4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    295a:	b190      	cbz	r0, 2982 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    295c:	f7ff fca6 	bl	22ac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x560>
    2960:	20ff      	movs	r0, #255	; 0xff
    2962:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2966:	68a1      	ldr	r1, [r4, #8]
    2968:	f1b1 3fff 	cmp.w	r1, #4294967295
    296c:	d005      	beq.n	297a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x52>
    296e:	2301      	movs	r3, #1
    2970:	2203      	movs	r2, #3
    2972:	2005      	movs	r0, #5
    2974:	f001 fb54 	bl	4020 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2978:	b140      	cbz	r0, 298c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x64>
    297a:	7e60      	ldrb	r0, [r4, #25]
    297c:	2801      	cmp	r0, #1
    297e:	d110      	bne.n	29a2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x7a>
    2980:	e009      	b.n	2996 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6e>
    2982:	f640 013d 	movw	r1, #2109	; 0x83d
    2986:	2070      	movs	r0, #112	; 0x70
    2988:	f002 f89c 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    298c:	f640 0142 	movw	r1, #2114	; 0x842
    2990:	2070      	movs	r0, #112	; 0x70
    2992:	f002 f897 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2996:	6920      	ldr	r0, [r4, #16]
    2998:	1e40      	subs	r0, r0, #1
    299a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    299e:	f001 fa59 	bl	3e54 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    29a2:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    29a6:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    29aa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    29ae:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    29b2:	6840      	ldr	r0, [r0, #4]
    29b4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    29b8:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    29bc:	b001      	add	sp, #4
    29be:	2101      	movs	r1, #1
    29c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    29c4:	4710      	bx	r2
    29c6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    29ca:	b140      	cbz	r0, 29de <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb6>
    29cc:	b919      	cbnz	r1, 29d6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xae>
    29ce:	f001 fef3 	bl	47b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    29d2:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    29d6:	2000      	movs	r0, #0
    29d8:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    29dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    29de:	f7ff fc65 	bl	22ac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x560>
    29e2:	f04f 30ff 	mov.w	r0, #4294967295
    29e6:	60a0      	str	r0, [r4, #8]
    29e8:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    29ec:	f88d 0000 	strb.w	r0, [sp]
    29f0:	f89d 0000 	ldrb.w	r0, [sp]
    29f4:	b190      	cbz	r0, 2a1c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf4>
    29f6:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    29fa:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    29fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2a02:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2a06:	6840      	ldr	r0, [r0, #4]
    2a08:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2a0c:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2a10:	b001      	add	sp, #4
    2a12:	2106      	movs	r1, #6
    2a14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2a18:	4710      	bx	r2
    2a1a:	e05a      	b.n	2ad2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1aa>
    2a1c:	f640 015a 	movw	r1, #2138	; 0x85a
    2a20:	2070      	movs	r0, #112	; 0x70
    2a22:	f002 f84f 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a26:	f7ff fc41 	bl	22ac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x560>
    2a2a:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2a2e:	f001 ffd1 	bl	49d4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2a32:	b118      	cbz	r0, 2a3c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x114>
    2a34:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    2a38:	b128      	cbz	r0, 2a46 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11e>
    2a3a:	e008      	b.n	2a4e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    2a3c:	f640 0168 	movw	r1, #2152	; 0x868
    2a40:	2070      	movs	r0, #112	; 0x70
    2a42:	f002 f83f 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a46:	f001 feb7 	bl	47b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2a4a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    2a4e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2a52:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2a56:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2a5a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2a5e:	6840      	ldr	r0, [r0, #4]
    2a60:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2a64:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2a68:	b001      	add	sp, #4
    2a6a:	2100      	movs	r1, #0
    2a6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2a70:	4710      	bx	r2
    2a72:	f001 fc63 	bl	433c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    2a76:	8ae0      	ldrh	r0, [r4, #22]
    2a78:	b110      	cbz	r0, 2a80 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x158>
    2a7a:	f001 ffab 	bl	49d4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2a7e:	b128      	cbz	r0, 2a8c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x164>
    2a80:	4818      	ldr	r0, [pc, #96]	; (2ae4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    2a82:	7800      	ldrb	r0, [r0, #0]
    2a84:	2803      	cmp	r0, #3
    2a86:	bf08      	it	eq
    2a88:	7766      	strbeq	r6, [r4, #29]
    2a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a8c:	f640 0172 	movw	r1, #2162	; 0x872
    2a90:	2070      	movs	r0, #112	; 0x70
    2a92:	f002 f817 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a96:	4814      	ldr	r0, [pc, #80]	; (2ae8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    2a98:	6006      	str	r6, [r0, #0]
    2a9a:	68d0      	ldr	r0, [r2, #12]
    2a9c:	6006      	str	r6, [r0, #0]
    2a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2aa0:	7810      	ldrb	r0, [r2, #0]
    2aa2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2aa6:	f002 b8dd 	b.w	4c64 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2aaa:	f7ff fbff 	bl	22ac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x560>
    2aae:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2ab2:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2ab6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2aba:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2abe:	6840      	ldr	r0, [r0, #4]
    2ac0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2ac4:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2ac8:	b001      	add	sp, #4
    2aca:	2105      	movs	r1, #5
    2acc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2ad0:	4710      	bx	r2
    2ad2:	f640 0185 	movw	r1, #2181	; 0x885
    2ad6:	2070      	movs	r0, #112	; 0x70
    2ad8:	f001 fff4 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2adc:	20000e40 	.word	0x20000e40
    2ae0:	20000018 	.word	0x20000018
    2ae4:	20000020 	.word	0x20000020
    2ae8:	40000508 	.word	0x40000508

00002aec <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    2aec:	4803      	ldr	r0, [pc, #12]	; (2afc <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    2aee:	b510      	push	{r4, lr}
    2af0:	7840      	ldrb	r0, [r0, #1]
    2af2:	f00a f8e2 	bl	ccba <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2af6:	b280      	uxth	r0, r0
    2af8:	bd10      	pop	{r4, pc}
    2afa:	0000      	.short	0x0000
    2afc:	20000020 	.word	0x20000020

00002b00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    2b00:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b04:	4682      	mov	sl, r0
    2b06:	48e0      	ldr	r0, [pc, #896]	; (2e88 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    2b08:	b08b      	sub	sp, #44	; 0x2c
    2b0a:	6800      	ldr	r0, [r0, #0]
    2b0c:	4ddf      	ldr	r5, [pc, #892]	; (2e8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    2b0e:	05c0      	lsls	r0, r0, #23
    2b10:	0dc0      	lsrs	r0, r0, #23
    2b12:	d00e      	beq.n	2b32 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    2b14:	3810      	subs	r0, #16
    2b16:	b240      	sxtb	r0, r0
    2b18:	2800      	cmp	r0, #0
    2b1a:	bfb8      	it	lt
    2b1c:	f000 000f 	andlt.w	r0, r0, #15
    2b20:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2b24:	bfac      	ite	ge
    2b26:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2b2a:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2b2e:	0940      	lsrs	r0, r0, #5
    2b30:	d00d      	beq.n	2b4e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    2b32:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b34:	f04f 0b00 	mov.w	fp, #0
    2b38:	7800      	ldrb	r0, [r0, #0]
    2b3a:	2800      	cmp	r0, #0
    2b3c:	bf18      	it	ne
    2b3e:	2801      	cmpne	r0, #1
    2b40:	d018      	beq.n	2b74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2b42:	f240 711c 	movw	r1, #1820	; 0x71c
    2b46:	f04f 0070 	mov.w	r0, #112	; 0x70
    2b4a:	f001 ffbb 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b4e:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2b52:	f04f 0b01 	mov.w	fp, #1
    2b56:	2820      	cmp	r0, #32
    2b58:	d007      	beq.n	2b6a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    2b5a:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b5c:	7800      	ldrb	r0, [r0, #0]
    2b5e:	b148      	cbz	r0, 2b74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2b60:	f44f 61e3 	mov.w	r1, #1816	; 0x718
    2b64:	2070      	movs	r0, #112	; 0x70
    2b66:	f001 ffad 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b6a:	f240 7115 	movw	r1, #1813	; 0x715
    2b6e:	2070      	movs	r0, #112	; 0x70
    2b70:	f001 ffa8 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b74:	4cc6      	ldr	r4, [pc, #792]	; (2e90 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    2b76:	b124      	cbz	r4, 2b82 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    2b78:	2100      	movs	r1, #0
    2b7a:	f240 701f 	movw	r0, #1823	; 0x71f
    2b7e:	f3af 8000 	nop.w
    2b82:	49c4      	ldr	r1, [pc, #784]	; (2e94 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    2b84:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    2b88:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    2b8c:	f04f 0801 	mov.w	r8, #1
    2b90:	9000      	str	r0, [sp, #0]
    2b92:	b124      	cbz	r4, 2b9e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    2b94:	2100      	movs	r1, #0
    2b96:	f240 7027 	movw	r0, #1831	; 0x727
    2b9a:	f3af 8000 	nop.w
    2b9e:	f1b8 0f00 	cmp.w	r8, #0
    2ba2:	d009      	beq.n	2bb8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    2ba4:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    2ba8:	f04f 0900 	mov.w	r9, #0
    2bac:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    2bb0:	f1bb 0f00 	cmp.w	fp, #0
    2bb4:	d007      	beq.n	2bc6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    2bb6:	e032      	b.n	2c1e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    2bb8:	48b7      	ldr	r0, [pc, #732]	; (2e98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    2bba:	2800      	cmp	r0, #0
    2bbc:	bf18      	it	ne
    2bbe:	f3af 8000 	nopne.w
    2bc2:	b662      	cpsie	i
    2bc4:	e7ee      	b.n	2ba4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    2bc6:	4637      	mov	r7, r6
    2bc8:	2001      	movs	r0, #1
    2bca:	ea20 0607 	bic.w	r6, r0, r7
    2bce:	48b3      	ldr	r0, [pc, #716]	; (2e9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39c>)
    2bd0:	2240      	movs	r2, #64	; 0x40
    2bd2:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2bd6:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2bda:	f00a f9dc 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2bde:	b124      	cbz	r4, 2bea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    2be0:	2100      	movs	r1, #0
    2be2:	f240 509a 	movw	r0, #1434	; 0x59a
    2be6:	f3af 8000 	nop.w
    2bea:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    2bee:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2bf2:	6a09      	ldr	r1, [r1, #32]
    2bf4:	6201      	str	r1, [r0, #32]
    2bf6:	b124      	cbz	r4, 2c02 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    2bf8:	2100      	movs	r1, #0
    2bfa:	f240 509e 	movw	r0, #1438	; 0x59e
    2bfe:	f3af 8000 	nop.w
    2c02:	b124      	cbz	r4, 2c0e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    2c04:	2100      	movs	r1, #0
    2c06:	f240 7031 	movw	r0, #1841	; 0x731
    2c0a:	f3af 8000 	nop.w
    2c0e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2c12:	f88d 0004 	strb.w	r0, [sp, #4]
    2c16:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2c1a:	2800      	cmp	r0, #0
    2c1c:	d1b9      	bne.n	2b92 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2c1e:	b124      	cbz	r4, 2c2a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    2c20:	2100      	movs	r1, #0
    2c22:	f240 703b 	movw	r0, #1851	; 0x73b
    2c26:	f3af 8000 	nop.w
    2c2a:	f001 f86b 	bl	3d04 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2c2e:	4680      	mov	r8, r0
    2c30:	4633      	mov	r3, r6
    2c32:	aa06      	add	r2, sp, #24
    2c34:	990c      	ldr	r1, [sp, #48]	; 0x30
    2c36:	f7ff fa65 	bl	2104 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3b8>
    2c3a:	b124      	cbz	r4, 2c46 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    2c3c:	2100      	movs	r1, #0
    2c3e:	f240 7042 	movw	r0, #1858	; 0x742
    2c42:	f3af 8000 	nop.w
    2c46:	4995      	ldr	r1, [pc, #596]	; (2e9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39c>)
    2c48:	a806      	add	r0, sp, #24
    2c4a:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    2c4e:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    2c52:	2901      	cmp	r1, #1
    2c54:	bf18      	it	ne
    2c56:	2902      	cmpne	r1, #2
    2c58:	d136      	bne.n	2cc8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    2c5a:	9906      	ldr	r1, [sp, #24]
    2c5c:	9a07      	ldr	r2, [sp, #28]
    2c5e:	eba1 0108 	sub.w	r1, r1, r8
    2c62:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2c66:	eba2 0208 	sub.w	r2, r2, r8
    2c6a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2c6e:	2902      	cmp	r1, #2
    2c70:	d370      	bcc.n	2d54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x254>
    2c72:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    2c76:	bf98      	it	ls
    2c78:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    2c7c:	d86a      	bhi.n	2d54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x254>
    2c7e:	f04f 0901 	mov.w	r9, #1
    2c82:	ab01      	add	r3, sp, #4
    2c84:	aa05      	add	r2, sp, #20
    2c86:	4631      	mov	r1, r6
    2c88:	f7fe ff56 	bl	1b38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x38c>
    2c8c:	2800      	cmp	r0, #0
    2c8e:	d069      	beq.n	2d64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x264>
    2c90:	f89d 1014 	ldrb.w	r1, [sp, #20]
    2c94:	f89d 2004 	ldrb.w	r2, [sp, #4]
    2c98:	4633      	mov	r3, r6
    2c9a:	428a      	cmp	r2, r1
    2c9c:	d066      	beq.n	2d6c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    2c9e:	2005      	movs	r0, #5
    2ca0:	f7fe fd92 	bl	17c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    2ca4:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    2ca8:	7048      	strb	r0, [r1, #1]
    2caa:	f89d 0014 	ldrb.w	r0, [sp, #20]
    2cae:	2820      	cmp	r0, #32
    2cb0:	bf1c      	itt	ne
    2cb2:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    2cb6:	f880 a001 	strbne.w	sl, [r0, #1]
    2cba:	d061      	beq.n	2d80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x280>
    2cbc:	4632      	mov	r2, r6
    2cbe:	4651      	mov	r1, sl
    2cc0:	f05f 0003 	movs.w	r0, #3
    2cc4:	f7ff fbda 	bl	247c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x730>
    2cc8:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2ccc:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    2cd0:	f88d 0004 	strb.w	r0, [sp, #4]
    2cd4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2cd8:	2800      	cmp	r0, #0
    2cda:	bf14      	ite	ne
    2cdc:	2701      	movne	r7, #1
    2cde:	2700      	moveq	r7, #0
    2ce0:	b124      	cbz	r4, 2cec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    2ce2:	2100      	movs	r1, #0
    2ce4:	f240 7049 	movw	r0, #1865	; 0x749
    2ce8:	f3af 8000 	nop.w
    2cec:	486c      	ldr	r0, [pc, #432]	; (2ea0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a0>)
    2cee:	2800      	cmp	r0, #0
    2cf0:	bf18      	it	ne
    2cf2:	f3af 8000 	nopne.w
    2cf6:	f3ef 8810 	mrs	r8, PRIMASK
    2cfa:	b672      	cpsid	i
    2cfc:	b124      	cbz	r4, 2d08 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x208>
    2cfe:	2100      	movs	r1, #0
    2d00:	f240 704f 	movw	r0, #1871	; 0x74f
    2d04:	f3af 8000 	nop.w
    2d08:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2d0c:	f88d 0004 	strb.w	r0, [sp, #4]
    2d10:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2d14:	2800      	cmp	r0, #0
    2d16:	f47f af3c 	bne.w	2b92 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2d1a:	b124      	cbz	r4, 2d26 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x226>
    2d1c:	2100      	movs	r1, #0
    2d1e:	f240 7057 	movw	r0, #1879	; 0x757
    2d22:	f3af 8000 	nop.w
    2d26:	f10d 0e18 	add.w	lr, sp, #24
    2d2a:	9800      	ldr	r0, [sp, #0]
    2d2c:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    2d30:	f100 0008 	add.w	r0, r0, #8
    2d34:	f1b9 0f00 	cmp.w	r9, #0
    2d38:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    2d3c:	d04c      	beq.n	2dd8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    2d3e:	b124      	cbz	r4, 2d4a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24a>
    2d40:	2100      	movs	r1, #0
    2d42:	f240 7064 	movw	r0, #1892	; 0x764
    2d46:	f3af 8000 	nop.w
    2d4a:	f1bb 0f00 	cmp.w	fp, #0
    2d4e:	d134      	bne.n	2dba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    2d50:	e01e      	b.n	2d90 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    2d52:	e7ff      	b.n	2d54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x254>
    2d54:	4632      	mov	r2, r6
    2d56:	4651      	mov	r1, sl
    2d58:	2004      	movs	r0, #4
    2d5a:	f7ff fb8f 	bl	247c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x730>
    2d5e:	f04f 0901 	mov.w	r9, #1
    2d62:	e7b1      	b.n	2cc8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    2d64:	4632      	mov	r2, r6
    2d66:	4651      	mov	r1, sl
    2d68:	2004      	movs	r0, #4
    2d6a:	e7ab      	b.n	2cc4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c4>
    2d6c:	2920      	cmp	r1, #32
    2d6e:	bf19      	ittee	ne
    2d70:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    2d74:	7840      	ldrbne	r0, [r0, #1]
    2d76:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    2d7a:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    2d7e:	e791      	b.n	2ca4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    2d80:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2d84:	f880 a020 	strb.w	sl, [r0, #32]
    2d88:	21ff      	movs	r1, #255	; 0xff
    2d8a:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    2d8e:	e795      	b.n	2cbc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1bc>
    2d90:	b19f      	cbz	r7, 2dba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    2d92:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2d96:	2820      	cmp	r0, #32
    2d98:	d10f      	bne.n	2dba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    2d9a:	b124      	cbz	r4, 2da6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a6>
    2d9c:	2100      	movs	r1, #0
    2d9e:	f240 7069 	movw	r0, #1897	; 0x769
    2da2:	f3af 8000 	nop.w
    2da6:	4631      	mov	r1, r6
    2da8:	2002      	movs	r0, #2
    2daa:	f7ff fb97 	bl	24dc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x790>
    2dae:	b920      	cbnz	r0, 2dba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    2db0:	980c      	ldr	r0, [sp, #48]	; 0x30
    2db2:	7800      	ldrb	r0, [r0, #0]
    2db4:	b3f0      	cbz	r0, 2e34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x334>
    2db6:	2801      	cmp	r0, #1
    2db8:	d04c      	beq.n	2e54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x354>
    2dba:	b124      	cbz	r4, 2dc6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c6>
    2dbc:	2100      	movs	r1, #0
    2dbe:	f240 7086 	movw	r0, #1926	; 0x786
    2dc2:	f3af 8000 	nop.w
    2dc6:	f1bb 0f00 	cmp.w	fp, #0
    2dca:	bf1c      	itt	ne
    2dcc:	20ff      	movne	r0, #255	; 0xff
    2dce:	f885 002b 	strbne.w	r0, [r5, #43]	; 0x2b
    2dd2:	d048      	beq.n	2e66 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    2dd4:	f04f 0901 	mov.w	r9, #1
    2dd8:	b124      	cbz	r4, 2de4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e4>
    2dda:	2100      	movs	r1, #0
    2ddc:	f240 7097 	movw	r0, #1943	; 0x797
    2de0:	f3af 8000 	nop.w
    2de4:	f1b8 0f00 	cmp.w	r8, #0
    2de8:	d047      	beq.n	2e7a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37a>
    2dea:	b124      	cbz	r4, 2df6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f6>
    2dec:	2100      	movs	r1, #0
    2dee:	f240 709b 	movw	r0, #1947	; 0x79b
    2df2:	f3af 8000 	nop.w
    2df6:	f1b9 0f00 	cmp.w	r9, #0
    2dfa:	d011      	beq.n	2e20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    2dfc:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2e00:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2e04:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    2e08:	2820      	cmp	r0, #32
    2e0a:	d009      	beq.n	2e20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    2e0c:	b124      	cbz	r4, 2e18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x318>
    2e0e:	2100      	movs	r1, #0
    2e10:	f240 70a2 	movw	r0, #1954	; 0x7a2
    2e14:	f3af 8000 	nop.w
    2e18:	4822      	ldr	r0, [pc, #136]	; (2ea4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a4>)
    2e1a:	7840      	ldrb	r0, [r0, #1]
    2e1c:	f001 ff22 	bl	4c64 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2e20:	b124      	cbz	r4, 2e2c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    2e22:	2100      	movs	r1, #0
    2e24:	f240 70a7 	movw	r0, #1959	; 0x7a7
    2e28:	f3af 8000 	nop.w
    2e2c:	b00d      	add	sp, #52	; 0x34
    2e2e:	4648      	mov	r0, r9
    2e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e34:	e7ff      	b.n	2e36 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    2e36:	b124      	cbz	r4, 2e42 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x342>
    2e38:	2100      	movs	r1, #0
    2e3a:	f240 7071 	movw	r0, #1905	; 0x771
    2e3e:	f3af 8000 	nop.w
    2e42:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    2e46:	4651      	mov	r1, sl
    2e48:	2004      	movs	r0, #4
    2e4a:	f7ff fb17 	bl	247c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x730>
    2e4e:	f04f 0901 	mov.w	r9, #1
    2e52:	e7c1      	b.n	2dd8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    2e54:	2c00      	cmp	r4, #0
    2e56:	f43f ae9c 	beq.w	2b92 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2e5a:	2100      	movs	r1, #0
    2e5c:	f240 707c 	movw	r0, #1916	; 0x77c
    2e60:	f3af 8000 	nop.w
    2e64:	e695      	b.n	2b92 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2e66:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    2e6a:	2001      	movs	r0, #1
    2e6c:	4388      	bics	r0, r1
    2e6e:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    2e72:	20ff      	movs	r0, #255	; 0xff
    2e74:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    2e78:	e7ac      	b.n	2dd4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    2e7a:	4807      	ldr	r0, [pc, #28]	; (2e98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    2e7c:	2800      	cmp	r0, #0
    2e7e:	bf18      	it	ne
    2e80:	f3af 8000 	nopne.w
    2e84:	b662      	cpsie	i
    2e86:	e7b0      	b.n	2dea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    2e88:	e000ed04 	.word	0xe000ed04
    2e8c:	200011c0 	.word	0x200011c0
    2e90:	00000000 	.word	0x00000000
    2e94:	20000e40 	.word	0x20000e40
    2e98:	00000000 	.word	0x00000000
    2e9c:	20001140 	.word	0x20001140
    2ea0:	00000000 	.word	0x00000000
    2ea4:	20000018 	.word	0x20000018

00002ea8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    2ea8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2eac:	48a4      	ldr	r0, [pc, #656]	; (3140 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x298>)
    2eae:	b086      	sub	sp, #24
    2eb0:	6800      	ldr	r0, [r0, #0]
    2eb2:	05c0      	lsls	r0, r0, #23
    2eb4:	0dc0      	lsrs	r0, r0, #23
    2eb6:	d011      	beq.n	2edc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    2eb8:	3810      	subs	r0, #16
    2eba:	b240      	sxtb	r0, r0
    2ebc:	2800      	cmp	r0, #0
    2ebe:	bfb8      	it	lt
    2ec0:	f000 000f 	andlt.w	r0, r0, #15
    2ec4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2ec8:	bfac      	ite	ge
    2eca:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2ece:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2ed2:	0940      	lsrs	r0, r0, #5
    2ed4:	bf08      	it	eq
    2ed6:	f04f 0901 	moveq.w	r9, #1
    2eda:	d001      	beq.n	2ee0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    2edc:	f04f 0900 	mov.w	r9, #0
    2ee0:	9806      	ldr	r0, [sp, #24]
    2ee2:	7800      	ldrb	r0, [r0, #0]
    2ee4:	2800      	cmp	r0, #0
    2ee6:	bf1e      	ittt	ne
    2ee8:	2000      	movne	r0, #0
    2eea:	b007      	addne	sp, #28
    2eec:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ef0:	f04f 0b00 	mov.w	fp, #0
    2ef4:	4d93      	ldr	r5, [pc, #588]	; (3144 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x29c>)
    2ef6:	4c94      	ldr	r4, [pc, #592]	; (3148 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a0>)
    2ef8:	46da      	mov	sl, fp
    2efa:	b125      	cbz	r5, 2f06 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x5e>
    2efc:	2100      	movs	r1, #0
    2efe:	f240 6025 	movw	r0, #1573	; 0x625
    2f02:	f3af 8000 	nop.w
    2f06:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    2f0a:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    2f0e:	f04f 0800 	mov.w	r8, #0
    2f12:	b125      	cbz	r5, 2f1e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x76>
    2f14:	2100      	movs	r1, #0
    2f16:	f240 602a 	movw	r0, #1578	; 0x62a
    2f1a:	f3af 8000 	nop.w
    2f1e:	f1b9 0f00 	cmp.w	r9, #0
    2f22:	d11d      	bne.n	2f60 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xb8>
    2f24:	4637      	mov	r7, r6
    2f26:	2001      	movs	r0, #1
    2f28:	ea20 0607 	bic.w	r6, r0, r7
    2f2c:	4887      	ldr	r0, [pc, #540]	; (314c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a4>)
    2f2e:	2240      	movs	r2, #64	; 0x40
    2f30:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2f34:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2f38:	f00a f82d 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2f3c:	b125      	cbz	r5, 2f48 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa0>
    2f3e:	2100      	movs	r1, #0
    2f40:	f240 509a 	movw	r0, #1434	; 0x59a
    2f44:	f3af 8000 	nop.w
    2f48:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    2f4c:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    2f50:	6a09      	ldr	r1, [r1, #32]
    2f52:	6201      	str	r1, [r0, #32]
    2f54:	b125      	cbz	r5, 2f60 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xb8>
    2f56:	2100      	movs	r1, #0
    2f58:	f240 509e 	movw	r0, #1438	; 0x59e
    2f5c:	f3af 8000 	nop.w
    2f60:	b125      	cbz	r5, 2f6c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    2f62:	2100      	movs	r1, #0
    2f64:	f240 6032 	movw	r0, #1586	; 0x632
    2f68:	f3af 8000 	nop.w
    2f6c:	f000 feca 	bl	3d04 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2f70:	4607      	mov	r7, r0
    2f72:	4633      	mov	r3, r6
    2f74:	466a      	mov	r2, sp
    2f76:	9906      	ldr	r1, [sp, #24]
    2f78:	f7ff f8c4 	bl	2104 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3b8>
    2f7c:	b125      	cbz	r5, 2f88 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    2f7e:	2100      	movs	r1, #0
    2f80:	f44f 60c7 	mov.w	r0, #1592	; 0x638
    2f84:	f3af 8000 	nop.w
    2f88:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2f8c:	2820      	cmp	r0, #32
    2f8e:	d014      	beq.n	2fba <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x112>
    2f90:	6920      	ldr	r0, [r4, #16]
    2f92:	9900      	ldr	r1, [sp, #0]
    2f94:	1a09      	subs	r1, r1, r0
    2f96:	0209      	lsls	r1, r1, #8
    2f98:	17ca      	asrs	r2, r1, #31
    2f9a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    2f9e:	1209      	asrs	r1, r1, #8
    2fa0:	d50b      	bpl.n	2fba <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x112>
    2fa2:	e9dd 1200 	ldrd	r1, r2, [sp]
    2fa6:	1a51      	subs	r1, r2, r1
    2fa8:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    2fac:	4408      	add	r0, r1
    2fae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2fb2:	e9cd 2000 	strd	r2, r0, [sp]
    2fb6:	f04f 0801 	mov.w	r8, #1
    2fba:	b14d      	cbz	r5, 2fd0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x128>
    2fbc:	2100      	movs	r1, #0
    2fbe:	f240 6042 	movw	r0, #1602	; 0x642
    2fc2:	f3af 8000 	nop.w
    2fc6:	2100      	movs	r1, #0
    2fc8:	f44f 60c9 	mov.w	r0, #1608	; 0x648
    2fcc:	f3af 8000 	nop.w
    2fd0:	9800      	ldr	r0, [sp, #0]
    2fd2:	9901      	ldr	r1, [sp, #4]
    2fd4:	1bc0      	subs	r0, r0, r7
    2fd6:	1bc9      	subs	r1, r1, r7
    2fd8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2fdc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2fe0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2fe4:	bf98      	it	ls
    2fe6:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    2fea:	d803      	bhi.n	2ff4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14c>
    2fec:	f1b9 0f00 	cmp.w	r9, #0
    2ff0:	d10c      	bne.n	300c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x164>
    2ff2:	e003      	b.n	2ffc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x154>
    2ff4:	f1b9 0f00 	cmp.w	r9, #0
    2ff8:	d038      	beq.n	306c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c4>
    2ffa:	e094      	b.n	3126 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27e>
    2ffc:	4633      	mov	r3, r6
    2ffe:	463a      	mov	r2, r7
    3000:	4669      	mov	r1, sp
    3002:	4853      	ldr	r0, [pc, #332]	; (3150 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    3004:	f7fe fc1c 	bl	1840 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    3008:	ea48 0800 	orr.w	r8, r8, r0
    300c:	f1b8 0f00 	cmp.w	r8, #0
    3010:	d022      	beq.n	3058 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    3012:	9800      	ldr	r0, [sp, #0]
    3014:	f009 fe51 	bl	ccba <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3018:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    301c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    3020:	4b4c      	ldr	r3, [pc, #304]	; (3154 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    3022:	4411      	add	r1, r2
    3024:	1c49      	adds	r1, r1, #1
    3026:	1842      	adds	r2, r0, r1
    3028:	4298      	cmp	r0, r3
    302a:	d841      	bhi.n	30b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x208>
    302c:	4848      	ldr	r0, [pc, #288]	; (3150 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    302e:	4281      	cmp	r1, r0
    3030:	dc5a      	bgt.n	30e8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x240>
    3032:	4240      	negs	r0, r0
    3034:	4281      	cmp	r1, r0
    3036:	db5f      	blt.n	30f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>
    3038:	1c58      	adds	r0, r3, #1
    303a:	4290      	cmp	r0, r2
    303c:	bfdc      	itt	le
    303e:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    3042:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    3046:	dd05      	ble.n	3054 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ac>
    3048:	2a00      	cmp	r2, #0
    304a:	bfbc      	itt	lt
    304c:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    3050:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    3054:	9806      	ldr	r0, [sp, #24]
    3056:	60c2      	str	r2, [r0, #12]
    3058:	f04f 0b01 	mov.w	fp, #1
    305c:	2d00      	cmp	r5, #0
    305e:	d062      	beq.n	3126 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27e>
    3060:	2100      	movs	r1, #0
    3062:	f240 605b 	movw	r0, #1627	; 0x65b
    3066:	f3af 8000 	nop.w
    306a:	e05c      	b.n	3126 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27e>
    306c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    3070:	aa05      	add	r2, sp, #20
    3072:	a904      	add	r1, sp, #16
    3074:	f000 fce4 	bl	3a40 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    3078:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    307c:	2820      	cmp	r0, #32
    307e:	d01c      	beq.n	30ba <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x212>
    3080:	6920      	ldr	r0, [r4, #16]
    3082:	1d40      	adds	r0, r0, #5
    3084:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3088:	e9dd 2100 	ldrd	r2, r1, [sp]
    308c:	1a89      	subs	r1, r1, r2
    308e:	4401      	add	r1, r0
    3090:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    3094:	e9cd 0100 	strd	r0, r1, [sp]
    3098:	f009 fe0f 	bl	ccba <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    309c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    30a0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    30a4:	4b2b      	ldr	r3, [pc, #172]	; (3154 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    30a6:	4411      	add	r1, r2
    30a8:	1c4a      	adds	r2, r1, #1
    30aa:	1881      	adds	r1, r0, r2
    30ac:	4298      	cmp	r0, r3
    30ae:	d918      	bls.n	30e2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x23a>
    30b0:	f240 51d6 	movw	r1, #1494	; 0x5d6
    30b4:	2070      	movs	r0, #112	; 0x70
    30b6:	f001 fd05 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    30ba:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    30be:	f107 0609 	add.w	r6, r7, #9
    30c2:	b120      	cbz	r0, 30ce <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x226>
    30c4:	f001 fc86 	bl	49d4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    30c8:	2800      	cmp	r0, #0
    30ca:	bf08      	it	eq
    30cc:	3632      	addeq	r6, #50	; 0x32
    30ce:	4822      	ldr	r0, [pc, #136]	; (3158 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    30d0:	9904      	ldr	r1, [sp, #16]
    30d2:	7840      	ldrb	r0, [r0, #1]
    30d4:	4288      	cmp	r0, r1
    30d6:	bf84      	itt	hi
    30d8:	1a40      	subhi	r0, r0, r1
    30da:	4406      	addhi	r6, r0
    30dc:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    30e0:	e7d2      	b.n	3088 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e0>
    30e2:	481b      	ldr	r0, [pc, #108]	; (3150 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    30e4:	4282      	cmp	r2, r0
    30e6:	dd04      	ble.n	30f2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24a>
    30e8:	f240 51d7 	movw	r1, #1495	; 0x5d7
    30ec:	2070      	movs	r0, #112	; 0x70
    30ee:	f001 fce9 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    30f2:	481a      	ldr	r0, [pc, #104]	; (315c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    30f4:	4282      	cmp	r2, r0
    30f6:	da04      	bge.n	3102 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25a>
    30f8:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    30fc:	2070      	movs	r0, #112	; 0x70
    30fe:	f001 fce1 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3102:	4817      	ldr	r0, [pc, #92]	; (3160 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>)
    3104:	4288      	cmp	r0, r1
    3106:	bfdc      	itt	le
    3108:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    310c:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    3110:	dd05      	ble.n	311e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x276>
    3112:	2900      	cmp	r1, #0
    3114:	bfbc      	itt	lt
    3116:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    311a:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    311e:	9806      	ldr	r0, [sp, #24]
    3120:	f04f 0b01 	mov.w	fp, #1
    3124:	60c1      	str	r1, [r0, #12]
    3126:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    312a:	f88d 0010 	strb.w	r0, [sp, #16]
    312e:	f89d 0010 	ldrb.w	r0, [sp, #16]
    3132:	2800      	cmp	r0, #0
    3134:	f47f aee1 	bne.w	2efa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    3138:	b007      	add	sp, #28
    313a:	4658      	mov	r0, fp
    313c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3140:	e000ed04 	.word	0xe000ed04
    3144:	00000000 	.word	0x00000000
    3148:	200011c0 	.word	0x200011c0
    314c:	20001140 	.word	0x20001140
    3150:	0f424000 	.word	0x0f424000
    3154:	1e847fff 	.word	0x1e847fff
    3158:	20000020 	.word	0x20000020
    315c:	f0bdc000 	.word	0xf0bdc000
    3160:	1e848000 	.word	0x1e848000

00003164 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    3164:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3168:	4d8a      	ldr	r5, [pc, #552]	; (3394 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    316a:	b08c      	sub	sp, #48	; 0x30
    316c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    3170:	2000      	movs	r0, #0
    3172:	4c89      	ldr	r4, [pc, #548]	; (3398 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    3174:	2701      	movs	r7, #1
    3176:	4681      	mov	r9, r0
    3178:	f1a5 0880 	sub.w	r8, r5, #128	; 0x80
    317c:	9008      	str	r0, [sp, #32]
    317e:	b124      	cbz	r4, 318a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x26>
    3180:	2100      	movs	r1, #0
    3182:	f240 70b6 	movw	r0, #1974	; 0x7b6
    3186:	f3af 8000 	nop.w
    318a:	2f00      	cmp	r7, #0
    318c:	d039      	beq.n	3202 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9e>
    318e:	bf00      	nop
    3190:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    3194:	b124      	cbz	r4, 31a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x3c>
    3196:	2100      	movs	r1, #0
    3198:	f240 70bb 	movw	r0, #1979	; 0x7bb
    319c:	f3af 8000 	nop.w
    31a0:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    31a4:	2001      	movs	r0, #1
    31a6:	ea20 060a 	bic.w	r6, r0, sl
    31aa:	eb08 1086 	add.w	r0, r8, r6, lsl #6
    31ae:	eb08 118a 	add.w	r1, r8, sl, lsl #6
    31b2:	4683      	mov	fp, r0
    31b4:	2240      	movs	r2, #64	; 0x40
    31b6:	f009 feee 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    31ba:	b124      	cbz	r4, 31c6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x62>
    31bc:	2100      	movs	r1, #0
    31be:	f240 509a 	movw	r0, #1434	; 0x59a
    31c2:	f3af 8000 	nop.w
    31c6:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    31ca:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    31ce:	9000      	str	r0, [sp, #0]
    31d0:	6a09      	ldr	r1, [r1, #32]
    31d2:	6201      	str	r1, [r0, #32]
    31d4:	b124      	cbz	r4, 31e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x7c>
    31d6:	2100      	movs	r1, #0
    31d8:	f240 509e 	movw	r0, #1438	; 0x59e
    31dc:	f3af 8000 	nop.w
    31e0:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    31e4:	f88d 0008 	strb.w	r0, [sp, #8]
    31e8:	f89d 0008 	ldrb.w	r0, [sp, #8]
    31ec:	b180      	cbz	r0, 3210 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xac>
    31ee:	2c00      	cmp	r4, #0
    31f0:	bf1c      	itt	ne
    31f2:	2100      	movne	r1, #0
    31f4:	f240 70c1 	movwne	r0, #1985	; 0x7c1
    31f8:	d0c1      	beq.n	317e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a>
    31fa:	bf00      	nop
    31fc:	f3af 8000 	nop.w
    3200:	e7bd      	b.n	317e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a>
    3202:	4866      	ldr	r0, [pc, #408]	; (339c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>)
    3204:	2800      	cmp	r0, #0
    3206:	bf18      	it	ne
    3208:	f3af 8000 	nopne.w
    320c:	b662      	cpsie	i
    320e:	e7bf      	b.n	3190 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    3210:	b124      	cbz	r4, 321c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb8>
    3212:	2100      	movs	r1, #0
    3214:	f240 70c5 	movw	r0, #1989	; 0x7c5
    3218:	f3af 8000 	nop.w
    321c:	980c      	ldr	r0, [sp, #48]	; 0x30
    321e:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    3222:	2803      	cmp	r0, #3
    3224:	d178      	bne.n	3318 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b4>
    3226:	f8dd a000 	ldr.w	sl, [sp]
    322a:	f8cd a014 	str.w	sl, [sp, #20]
    322e:	990c      	ldr	r1, [sp, #48]	; 0x30
    3230:	f89a 0020 	ldrb.w	r0, [sl, #32]
    3234:	4288      	cmp	r0, r1
    3236:	bf14      	ite	ne
    3238:	f04f 0b00 	movne.w	fp, #0
    323c:	f04f 0b01 	moveq.w	fp, #1
    3240:	f10a 0c20 	add.w	ip, sl, #32
    3244:	4686      	mov	lr, r0
    3246:	2220      	movs	r2, #32
    3248:	eb08 1386 	add.w	r3, r8, r6, lsl #6
    324c:	e003      	b.n	3256 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf2>
    324e:	4602      	mov	r2, r0
    3250:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    3254:	7840      	ldrb	r0, [r0, #1]
    3256:	4288      	cmp	r0, r1
    3258:	d002      	beq.n	3260 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    325a:	2820      	cmp	r0, #32
    325c:	d00a      	beq.n	3274 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x110>
    325e:	e7f6      	b.n	324e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xea>
    3260:	2820      	cmp	r0, #32
    3262:	d007      	beq.n	3274 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x110>
    3264:	4586      	cmp	lr, r0
    3266:	d107      	bne.n	3278 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    3268:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    326c:	7840      	ldrb	r0, [r0, #1]
    326e:	f88c 0000 	strb.w	r0, [ip]
    3272:	e007      	b.n	3284 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x120>
    3274:	4648      	mov	r0, r9
    3276:	e00c      	b.n	3292 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12e>
    3278:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    327c:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    3280:	7840      	ldrb	r0, [r0, #1]
    3282:	7048      	strb	r0, [r1, #1]
    3284:	b124      	cbz	r4, 3290 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12c>
    3286:	2100      	movs	r1, #0
    3288:	f240 5004 	movw	r0, #1284	; 0x504
    328c:	f3af 8000 	nop.w
    3290:	2001      	movs	r0, #1
    3292:	ea10 0f0b 	tst.w	r0, fp
    3296:	bf1c      	itt	ne
    3298:	21ff      	movne	r1, #255	; 0xff
    329a:	f88a 1023 	strbne.w	r1, [sl, #35]	; 0x23
    329e:	2800      	cmp	r0, #0
    32a0:	d058      	beq.n	3354 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    32a2:	b124      	cbz	r4, 32ae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14a>
    32a4:	2100      	movs	r1, #0
    32a6:	f240 70ca 	movw	r0, #1994	; 0x7ca
    32aa:	f3af 8000 	nop.w
    32ae:	4632      	mov	r2, r6
    32b0:	2001      	movs	r0, #1
    32b2:	990c      	ldr	r1, [sp, #48]	; 0x30
    32b4:	f7ff f8e2 	bl	247c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x730>
    32b8:	9805      	ldr	r0, [sp, #20]
    32ba:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    32be:	f88d 0008 	strb.w	r0, [sp, #8]
    32c2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    32c6:	2800      	cmp	r0, #0
    32c8:	bf14      	ite	ne
    32ca:	f04f 0a01 	movne.w	sl, #1
    32ce:	f04f 0a00 	moveq.w	sl, #0
    32d2:	b124      	cbz	r4, 32de <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x17a>
    32d4:	2100      	movs	r1, #0
    32d6:	f240 70d5 	movw	r0, #2005	; 0x7d5
    32da:	f3af 8000 	nop.w
    32de:	4830      	ldr	r0, [pc, #192]	; (33a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x23c>)
    32e0:	2800      	cmp	r0, #0
    32e2:	bf18      	it	ne
    32e4:	f3af 8000 	nopne.w
    32e8:	f3ef 8710 	mrs	r7, PRIMASK
    32ec:	b672      	cpsid	i
    32ee:	b124      	cbz	r4, 32fa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x196>
    32f0:	2100      	movs	r1, #0
    32f2:	f240 70da 	movw	r0, #2010	; 0x7da
    32f6:	f3af 8000 	nop.w
    32fa:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    32fe:	f88d 0008 	strb.w	r0, [sp, #8]
    3302:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3306:	b140      	cbz	r0, 331a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b6>
    3308:	2c00      	cmp	r4, #0
    330a:	bf1c      	itt	ne
    330c:	2100      	movne	r1, #0
    330e:	f240 70de 	movwne	r0, #2014	; 0x7de
    3312:	f43f af34 	beq.w	317e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a>
    3316:	e771      	b.n	31fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x98>
    3318:	e01c      	b.n	3354 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    331a:	f1ba 0f00 	cmp.w	sl, #0
    331e:	d008      	beq.n	3332 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ce>
    3320:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    3324:	2820      	cmp	r0, #32
    3326:	d104      	bne.n	3332 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ce>
    3328:	4631      	mov	r1, r6
    332a:	2002      	movs	r0, #2
    332c:	f7ff f8d6 	bl	24dc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x790>
    3330:	b308      	cbz	r0, 3376 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x212>
    3332:	b124      	cbz	r4, 333e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1da>
    3334:	2100      	movs	r1, #0
    3336:	f240 70f2 	movw	r0, #2034	; 0x7f2
    333a:	f3af 8000 	nop.w
    333e:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    3342:	2001      	movs	r0, #1
    3344:	4388      	bics	r0, r1
    3346:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    334a:	20ff      	movs	r0, #255	; 0xff
    334c:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    3350:	2001      	movs	r0, #1
    3352:	9008      	str	r0, [sp, #32]
    3354:	b124      	cbz	r4, 3360 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fc>
    3356:	2100      	movs	r1, #0
    3358:	f240 70fb 	movw	r0, #2043	; 0x7fb
    335c:	f3af 8000 	nop.w
    3360:	b18f      	cbz	r7, 3386 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x222>
    3362:	b124      	cbz	r4, 336e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    3364:	2100      	movs	r1, #0
    3366:	f240 70ff 	movw	r0, #2047	; 0x7ff
    336a:	f3af 8000 	nop.w
    336e:	9808      	ldr	r0, [sp, #32]
    3370:	b00d      	add	sp, #52	; 0x34
    3372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3376:	2c00      	cmp	r4, #0
    3378:	d0f2      	beq.n	3360 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fc>
    337a:	2100      	movs	r1, #0
    337c:	f240 70ed 	movw	r0, #2029	; 0x7ed
    3380:	f3af 8000 	nop.w
    3384:	e7e7      	b.n	3356 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    3386:	4805      	ldr	r0, [pc, #20]	; (339c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>)
    3388:	2800      	cmp	r0, #0
    338a:	bf18      	it	ne
    338c:	f3af 8000 	nopne.w
    3390:	b662      	cpsie	i
    3392:	e7e6      	b.n	3362 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    3394:	200011c0 	.word	0x200011c0
	...

000033a4 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    33a4:	2820      	cmp	r0, #32
    33a6:	bf24      	itt	cs
    33a8:	2000      	movcs	r0, #0
    33aa:	4770      	bxcs	lr
    33ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    33b0:	4b03      	ldr	r3, [pc, #12]	; (33c0 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    33b2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
    33b6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    33ba:	6042      	str	r2, [r0, #4]
    33bc:	2001      	movs	r0, #1
    33be:	4770      	bx	lr
    33c0:	20000e40 	.word	0x20000e40

000033c4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    33c4:	b510      	push	{r4, lr}
    33c6:	2820      	cmp	r0, #32
    33c8:	d211      	bcs.n	33ee <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    33ca:	490e      	ldr	r1, [pc, #56]	; (3404 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    33cc:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    33d0:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    33d4:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    33d8:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    33dc:	b13b      	cbz	r3, 33ee <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    33de:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    33e2:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    33e6:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    33ea:	2a01      	cmp	r2, #1
    33ec:	d001      	beq.n	33f2 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    33ee:	2000      	movs	r0, #0
    33f0:	bd10      	pop	{r4, pc}
    33f2:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    33f6:	4601      	mov	r1, r0
    33f8:	2000      	movs	r0, #0
    33fa:	f7ff f83f 	bl	247c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x730>
    33fe:	2001      	movs	r0, #1
    3400:	bd10      	pop	{r4, pc}
    3402:	0000      	.short	0x0000
    3404:	200011c0 	.word	0x200011c0

00003408 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    3408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    340c:	4e81      	ldr	r6, [pc, #516]	; (3614 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    340e:	4680      	mov	r8, r0
    3410:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    3414:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    3418:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    341c:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    3420:	2800      	cmp	r0, #0
    3422:	d068      	beq.n	34f6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    3424:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    3428:	4d7b      	ldr	r5, [pc, #492]	; (3618 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    342a:	b125      	cbz	r5, 3436 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    342c:	2100      	movs	r1, #0
    342e:	f640 3092 	movw	r0, #2962	; 0xb92
    3432:	f3af 8000 	nop.w
    3436:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    343a:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    343e:	2801      	cmp	r0, #1
    3440:	d018      	beq.n	3474 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    3442:	b2c0      	uxtb	r0, r0
    3444:	2804      	cmp	r0, #4
    3446:	bf1c      	itt	ne
    3448:	2805      	cmpne	r0, #5
    344a:	2806      	cmpne	r0, #6
    344c:	d058      	beq.n	3500 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    344e:	b12d      	cbz	r5, 345c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    3450:	f04f 0100 	mov.w	r1, #0
    3454:	f640 309e 	movw	r0, #2974	; 0xb9e
    3458:	f3af 8000 	nop.w
    345c:	f001 fc58 	bl	4d10 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3460:	b125      	cbz	r5, 346c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    3462:	2100      	movs	r1, #0
    3464:	f640 30a2 	movw	r0, #2978	; 0xba2
    3468:	f3af 8000 	nop.w
    346c:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    3470:	2801      	cmp	r0, #1
    3472:	d1e6      	bne.n	3442 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    3474:	2401      	movs	r4, #1
    3476:	b125      	cbz	r5, 3482 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    3478:	2100      	movs	r1, #0
    347a:	f640 30a9 	movw	r0, #2985	; 0xba9
    347e:	f3af 8000 	nop.w
    3482:	2c00      	cmp	r4, #0
    3484:	d042      	beq.n	350c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    3486:	2000      	movs	r0, #0
    3488:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    348c:	b125      	cbz	r5, 3498 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    348e:	2100      	movs	r1, #0
    3490:	f640 30ae 	movw	r0, #2990	; 0xbae
    3494:	f3af 8000 	nop.w
    3498:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    349c:	2001      	movs	r0, #1
    349e:	ea20 090b 	bic.w	r9, r0, fp
    34a2:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    34a6:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    34aa:	2240      	movs	r2, #64	; 0x40
    34ac:	f009 fd73 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    34b0:	b125      	cbz	r5, 34bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    34b2:	2100      	movs	r1, #0
    34b4:	f240 509a 	movw	r0, #1434	; 0x59a
    34b8:	f3af 8000 	nop.w
    34bc:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    34c0:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    34c4:	6a00      	ldr	r0, [r0, #32]
    34c6:	f8ca 0020 	str.w	r0, [sl, #32]
    34ca:	b125      	cbz	r5, 34d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    34cc:	2100      	movs	r1, #0
    34ce:	f240 509e 	movw	r0, #1438	; 0x59e
    34d2:	f3af 8000 	nop.w
    34d6:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    34da:	f88d 0000 	strb.w	r0, [sp]
    34de:	f89d 0000 	ldrb.w	r0, [sp]
    34e2:	b1d0      	cbz	r0, 351a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    34e4:	2d00      	cmp	r5, #0
    34e6:	bf1c      	itt	ne
    34e8:	2100      	movne	r1, #0
    34ea:	f640 30b4 	movwne	r0, #2996	; 0xbb4
    34ee:	d0c2      	beq.n	3476 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    34f0:	f3af 8000 	nop.w
    34f4:	e7bf      	b.n	3476 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    34f6:	f640 3189 	movw	r1, #2953	; 0xb89
    34fa:	2070      	movs	r0, #112	; 0x70
    34fc:	f001 fae2 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3500:	464a      	mov	r2, r9
    3502:	4641      	mov	r1, r8
    3504:	2001      	movs	r0, #1
    3506:	f7fe ffb9 	bl	247c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x730>
    350a:	e7a9      	b.n	3460 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    350c:	4843      	ldr	r0, [pc, #268]	; (361c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    350e:	2800      	cmp	r0, #0
    3510:	bf18      	it	ne
    3512:	f3af 8000 	nopne.w
    3516:	b662      	cpsie	i
    3518:	e7b5      	b.n	3486 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    351a:	b125      	cbz	r5, 3526 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    351c:	2100      	movs	r1, #0
    351e:	f640 30b8 	movw	r0, #3000	; 0xbb8
    3522:	f3af 8000 	nop.w
    3526:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    352a:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    352e:	4640      	mov	r0, r8
    3530:	461c      	mov	r4, r3
    3532:	f04f 0b20 	mov.w	fp, #32
    3536:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    353a:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    353e:	e004      	b.n	354a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x142>
    3540:	46a3      	mov	fp, r4
    3542:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    3546:	f89c 4001 	ldrb.w	r4, [ip, #1]
    354a:	4284      	cmp	r4, r0
    354c:	d002      	beq.n	3554 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14c>
    354e:	2c20      	cmp	r4, #32
    3550:	d02b      	beq.n	35aa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    3552:	e7f5      	b.n	3540 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x138>
    3554:	2c20      	cmp	r4, #32
    3556:	d028      	beq.n	35aa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    3558:	42a3      	cmp	r3, r4
    355a:	d104      	bne.n	3566 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    355c:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    3560:	7840      	ldrb	r0, [r0, #1]
    3562:	7008      	strb	r0, [r1, #0]
    3564:	e005      	b.n	3572 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x16a>
    3566:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    356a:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    356e:	7840      	ldrb	r0, [r0, #1]
    3570:	7048      	strb	r0, [r1, #1]
    3572:	f1ba 0f00 	cmp.w	sl, #0
    3576:	d011      	beq.n	359c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x194>
    3578:	b125      	cbz	r5, 3584 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    357a:	2100      	movs	r1, #0
    357c:	f240 40fc 	movw	r0, #1276	; 0x4fc
    3580:	f3af 8000 	nop.w
    3584:	f89a 0000 	ldrb.w	r0, [sl]
    3588:	42a0      	cmp	r0, r4
    358a:	d107      	bne.n	359c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x194>
    358c:	b125      	cbz	r5, 3598 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    358e:	2100      	movs	r1, #0
    3590:	f240 40ff 	movw	r0, #1279	; 0x4ff
    3594:	f3af 8000 	nop.w
    3598:	f88a b000 	strb.w	fp, [sl]
    359c:	b15d      	cbz	r5, 35b6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ae>
    359e:	2100      	movs	r1, #0
    35a0:	f240 5004 	movw	r0, #1284	; 0x504
    35a4:	f3af 8000 	nop.w
    35a8:	e000      	b.n	35ac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a4>
    35aa:	b125      	cbz	r5, 35b6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ae>
    35ac:	2100      	movs	r1, #0
    35ae:	f640 30bc 	movw	r0, #3004	; 0xbbc
    35b2:	f3af 8000 	nop.w
    35b6:	481a      	ldr	r0, [pc, #104]	; (3620 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x218>)
    35b8:	2800      	cmp	r0, #0
    35ba:	bf18      	it	ne
    35bc:	f3af 8000 	nopne.w
    35c0:	f3ef 8410 	mrs	r4, PRIMASK
    35c4:	b672      	cpsid	i
    35c6:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    35ca:	f88d 0000 	strb.w	r0, [sp]
    35ce:	f89d 0000 	ldrb.w	r0, [sp]
    35d2:	b138      	cbz	r0, 35e4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1dc>
    35d4:	2d00      	cmp	r5, #0
    35d6:	bf1c      	itt	ne
    35d8:	2100      	movne	r1, #0
    35da:	f640 30c2 	movwne	r0, #3010	; 0xbc2
    35de:	f43f af4a 	beq.w	3476 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    35e2:	e785      	b.n	34f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    35e4:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    35e8:	20ff      	movs	r0, #255	; 0xff
    35ea:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    35ee:	b154      	cbz	r4, 3606 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fe>
    35f0:	2d00      	cmp	r5, #0
    35f2:	bf08      	it	eq
    35f4:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    35f8:	2100      	movs	r1, #0
    35fa:	f640 30cf 	movw	r0, #3023	; 0xbcf
    35fe:	f3af 8000 	nop.w
    3602:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3606:	4805      	ldr	r0, [pc, #20]	; (361c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    3608:	2800      	cmp	r0, #0
    360a:	bf18      	it	ne
    360c:	f3af 8000 	nopne.w
    3610:	b662      	cpsie	i
    3612:	e7ed      	b.n	35f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e8>
    3614:	200011c0 	.word	0x200011c0
	...

00003624 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    3624:	b570      	push	{r4, r5, r6, lr}
    3626:	460d      	mov	r5, r1
    3628:	4606      	mov	r6, r0
    362a:	f001 f9c1 	bl	49b0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    362e:	480f      	ldr	r0, [pc, #60]	; (366c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    3630:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    3634:	2400      	movs	r4, #0
    3636:	3880      	subs	r0, #128	; 0x80
    3638:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    363c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    3640:	b129      	cbz	r1, 364e <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    3642:	1c61      	adds	r1, r4, #1
    3644:	b2cc      	uxtb	r4, r1
    3646:	2c20      	cmp	r4, #32
    3648:	d3f8      	bcc.n	363c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    364a:	2020      	movs	r0, #32
    364c:	bd70      	pop	{r4, r5, r6, pc}
    364e:	4808      	ldr	r0, [pc, #32]	; (3670 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    3650:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    3654:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    3658:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    365c:	4621      	mov	r1, r4
    365e:	6045      	str	r5, [r0, #4]
    3660:	2001      	movs	r0, #1
    3662:	f7fe ff0b 	bl	247c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x730>
    3666:	4620      	mov	r0, r4
    3668:	bd70      	pop	{r4, r5, r6, pc}
    366a:	0000      	.short	0x0000
    366c:	200011c0 	.word	0x200011c0
    3670:	20000e40 	.word	0x20000e40

00003674 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    3674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3678:	b082      	sub	sp, #8
    367a:	f000 fb43 	bl	3d04 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    367e:	4605      	mov	r5, r0
    3680:	f000 fe12 	bl	42a8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    3684:	4c66      	ldr	r4, [pc, #408]	; (3820 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>)
    3686:	68a0      	ldr	r0, [r4, #8]
    3688:	f1b0 3fff 	cmp.w	r0, #4294967295
    368c:	bf1c      	itt	ne
    368e:	f04f 30ff 	movne.w	r0, #4294967295
    3692:	60a0      	strne	r0, [r4, #8]
    3694:	7fa0      	ldrb	r0, [r4, #30]
    3696:	4f63      	ldr	r7, [pc, #396]	; (3824 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    3698:	b990      	cbnz	r0, 36c0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4c>
    369a:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
    369e:	1a40      	subs	r0, r0, r1
    36a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    36a4:	f44f 710c 	mov.w	r1, #560	; 0x230
    36a8:	f009 fb34 	bl	cd14 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    36ac:	6921      	ldr	r1, [r4, #16]
    36ae:	4408      	add	r0, r1
    36b0:	1a28      	subs	r0, r5, r0
    36b2:	0200      	lsls	r0, r0, #8
    36b4:	17c1      	asrs	r1, r0, #31
    36b6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    36ba:	1200      	asrs	r0, r0, #8
    36bc:	0fc0      	lsrs	r0, r0, #31
    36be:	d013      	beq.n	36e8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    36c0:	7e60      	ldrb	r0, [r4, #25]
    36c2:	b328      	cbz	r0, 3710 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    36c4:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    36c8:	f88d 0000 	strb.w	r0, [sp]
    36cc:	f89d 0000 	ldrb.w	r0, [sp]
    36d0:	b1f0      	cbz	r0, 3710 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    36d2:	f000 fc27 	bl	3f24 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    36d6:	bf00      	nop
    36d8:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    36dc:	b1f0      	cbz	r0, 371c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    36de:	f240 4111 	movw	r1, #1041	; 0x411
    36e2:	2070      	movs	r0, #112	; 0x70
    36e4:	f001 f9ee 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    36e8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    36ec:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    36f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    36f4:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    36f8:	6840      	ldr	r0, [r0, #4]
    36fa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    36fe:	f857 2031 	ldr.w	r2, [r7, r1, lsl #3]
    3702:	2108      	movs	r1, #8
    3704:	4790      	blx	r2
    3706:	f240 31f9 	movw	r1, #1017	; 0x3f9
    370a:	2070      	movs	r0, #112	; 0x70
    370c:	f001 f9da 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3710:	1ce8      	adds	r0, r5, #3
    3712:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3716:	f000 fafb 	bl	3d10 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    371a:	e7dd      	b.n	36d8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    371c:	2001      	movs	r0, #1
    371e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    3722:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    3726:	2820      	cmp	r0, #32
    3728:	d024      	beq.n	3774 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x100>
    372a:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    372e:	2020      	movs	r0, #32
    3730:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    3734:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    3738:	2600      	movs	r6, #0
    373a:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    373e:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    3742:	4839      	ldr	r0, [pc, #228]	; (3828 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>)
    3744:	6026      	str	r6, [r4, #0]
    3746:	7800      	ldrb	r0, [r0, #0]
    3748:	2802      	cmp	r0, #2
    374a:	bf16      	itet	ne
    374c:	2803      	cmpne	r0, #3
    374e:	2001      	moveq	r0, #1
    3750:	2000      	movne	r0, #0
    3752:	7720      	strb	r0, [r4, #28]
    3754:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
    3758:	eb04 0a89 	add.w	sl, r4, r9, lsl #2
    375c:	f89a 0020 	ldrb.w	r0, [sl, #32]
    3760:	2820      	cmp	r0, #32
    3762:	d02f      	beq.n	37c4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x150>
    3764:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3768:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    376c:	7d81      	ldrb	r1, [r0, #22]
    376e:	2901      	cmp	r1, #1
    3770:	d005      	beq.n	377e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    3772:	e027      	b.n	37c4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x150>
    3774:	f240 4114 	movw	r1, #1044	; 0x414
    3778:	2070      	movs	r0, #112	; 0x70
    377a:	f001 f9a3 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    377e:	462f      	mov	r7, r5
    3780:	f100 0508 	add.w	r5, r0, #8
    3784:	8a40      	ldrh	r0, [r0, #18]
    3786:	aa01      	add	r2, sp, #4
    3788:	4669      	mov	r1, sp
    378a:	f000 f959 	bl	3a40 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    378e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    3792:	2820      	cmp	r0, #32
    3794:	d004      	beq.n	37a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    3796:	6920      	ldr	r0, [r4, #16]
    3798:	1d40      	adds	r0, r0, #5
    379a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    379e:	e009      	b.n	37b4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x140>
    37a0:	8968      	ldrh	r0, [r5, #10]
    37a2:	3709      	adds	r7, #9
    37a4:	b120      	cbz	r0, 37b0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x13c>
    37a6:	f001 f915 	bl	49d4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    37aa:	2800      	cmp	r0, #0
    37ac:	bf08      	it	eq
    37ae:	3732      	addeq	r7, #50	; 0x32
    37b0:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    37b4:	e9d5 2100 	ldrd	r2, r1, [r5]
    37b8:	1a89      	subs	r1, r1, r2
    37ba:	6028      	str	r0, [r5, #0]
    37bc:	4408      	add	r0, r1
    37be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    37c2:	6068      	str	r0, [r5, #4]
    37c4:	4649      	mov	r1, r9
    37c6:	2001      	movs	r0, #1
    37c8:	f7fe fe88 	bl	24dc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x790>
    37cc:	2800      	cmp	r0, #0
    37ce:	d0f9      	beq.n	37c4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x150>
    37d0:	4816      	ldr	r0, [pc, #88]	; (382c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    37d2:	eb00 1089 	add.w	r0, r0, r9, lsl #6
    37d6:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    37da:	2802      	cmp	r0, #2
    37dc:	d104      	bne.n	37e8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x174>
    37de:	464a      	mov	r2, r9
    37e0:	4641      	mov	r1, r8
    37e2:	2006      	movs	r0, #6
    37e4:	f7fe fe4a 	bl	247c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x730>
    37e8:	20ff      	movs	r0, #255	; 0xff
    37ea:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    37ee:	f89a 0021 	ldrb.w	r0, [sl, #33]	; 0x21
    37f2:	4d0f      	ldr	r5, [pc, #60]	; (3830 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    37f4:	2820      	cmp	r0, #32
    37f6:	bf1c      	itt	ne
    37f8:	7868      	ldrbne	r0, [r5, #1]
    37fa:	f001 fa33 	blne	4c64 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    37fe:	7f20      	ldrb	r0, [r4, #28]
    3800:	b118      	cbz	r0, 380a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    3802:	f000 fd9b 	bl	433c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    3806:	7726      	strb	r6, [r4, #28]
    3808:	7766      	strb	r6, [r4, #29]
    380a:	6869      	ldr	r1, [r5, #4]
    380c:	2900      	cmp	r1, #0
    380e:	bf04      	itt	eq
    3810:	b002      	addeq	sp, #8
    3812:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3816:	2064      	movs	r0, #100	; 0x64
    3818:	b002      	add	sp, #8
    381a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    381e:	4708      	bx	r1
    3820:	200011c0 	.word	0x200011c0
    3824:	20000e40 	.word	0x20000e40
    3828:	20000020 	.word	0x20000020
    382c:	20001140 	.word	0x20001140
    3830:	20000018 	.word	0x20000018

00003834 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    3834:	b510      	push	{r4, lr}
    3836:	4c32      	ldr	r4, [pc, #200]	; (3900 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    3838:	b082      	sub	sp, #8
    383a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    383e:	2920      	cmp	r1, #32
    3840:	d008      	beq.n	3854 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    3842:	68a1      	ldr	r1, [r4, #8]
    3844:	f1b1 3fff 	cmp.w	r1, #4294967295
    3848:	d009      	beq.n	385e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    384a:	f640 21ba 	movw	r1, #2746	; 0xaba
    384e:	2070      	movs	r0, #112	; 0x70
    3850:	f001 f938 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3854:	f640 21b9 	movw	r1, #2745	; 0xab9
    3858:	2070      	movs	r0, #112	; 0x70
    385a:	f001 f933 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    385e:	6862      	ldr	r2, [r4, #4]
    3860:	4601      	mov	r1, r0
    3862:	4b28      	ldr	r3, [pc, #160]	; (3904 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    3864:	1850      	adds	r0, r2, r1
    3866:	429a      	cmp	r2, r3
    3868:	d904      	bls.n	3874 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    386a:	f240 51d6 	movw	r1, #1494	; 0x5d6
    386e:	2070      	movs	r0, #112	; 0x70
    3870:	f001 f928 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3874:	4a24      	ldr	r2, [pc, #144]	; (3908 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    3876:	4291      	cmp	r1, r2
    3878:	dd04      	ble.n	3884 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    387a:	f240 51d7 	movw	r1, #1495	; 0x5d7
    387e:	2070      	movs	r0, #112	; 0x70
    3880:	f001 f920 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3884:	4a21      	ldr	r2, [pc, #132]	; (390c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    3886:	4291      	cmp	r1, r2
    3888:	da04      	bge.n	3894 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    388a:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    388e:	2070      	movs	r0, #112	; 0x70
    3890:	f001 f918 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3894:	491e      	ldr	r1, [pc, #120]	; (3910 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    3896:	4281      	cmp	r1, r0
    3898:	bfdc      	itt	le
    389a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    389e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    38a2:	dd05      	ble.n	38b0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    38a4:	2800      	cmp	r0, #0
    38a6:	bfbc      	itt	lt
    38a8:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    38ac:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    38b0:	aa01      	add	r2, sp, #4
    38b2:	4669      	mov	r1, sp
    38b4:	f000 f8c4 	bl	3a40 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    38b8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    38bc:	280f      	cmp	r0, #15
    38be:	bf8c      	ite	hi
    38c0:	2001      	movhi	r0, #1
    38c2:	2000      	movls	r0, #0
    38c4:	9900      	ldr	r1, [sp, #0]
    38c6:	4408      	add	r0, r1
    38c8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    38cc:	60a1      	str	r1, [r4, #8]
    38ce:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    38d2:	f88d 0000 	strb.w	r0, [sp]
    38d6:	f89d 0000 	ldrb.w	r0, [sp]
    38da:	2800      	cmp	r0, #0
    38dc:	bf04      	itt	eq
    38de:	b002      	addeq	sp, #8
    38e0:	bd10      	popeq	{r4, pc}
    38e2:	2301      	movs	r3, #1
    38e4:	2203      	movs	r2, #3
    38e6:	2005      	movs	r0, #5
    38e8:	f000 fb9a 	bl	4020 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    38ec:	2800      	cmp	r0, #0
    38ee:	bf1c      	itt	ne
    38f0:	b002      	addne	sp, #8
    38f2:	bd10      	popne	{r4, pc}
    38f4:	f640 21c2 	movw	r1, #2754	; 0xac2
    38f8:	2070      	movs	r0, #112	; 0x70
    38fa:	f001 f8e3 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    38fe:	0000      	.short	0x0000
    3900:	200011c0 	.word	0x200011c0
    3904:	1e847fff 	.word	0x1e847fff
    3908:	0f424000 	.word	0x0f424000
    390c:	f0bdc000 	.word	0xf0bdc000
    3910:	1e848000 	.word	0x1e848000

00003914 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    3914:	b570      	push	{r4, r5, r6, lr}
    3916:	4c1e      	ldr	r4, [pc, #120]	; (3990 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    3918:	2120      	movs	r1, #32
    391a:	f884 1020 	strb.w	r1, [r4, #32]
    391e:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    3922:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    3926:	2000      	movs	r0, #0
    3928:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    392c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3930:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    3934:	1e42      	subs	r2, r0, #1
    3936:	60a2      	str	r2, [r4, #8]
    3938:	6020      	str	r0, [r4, #0]
    393a:	77a0      	strb	r0, [r4, #30]
    393c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    3940:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    3944:	7720      	strb	r0, [r4, #28]
    3946:	7760      	strb	r0, [r4, #29]
    3948:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    394c:	4911      	ldr	r1, [pc, #68]	; (3994 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    394e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    3952:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    3956:	7008      	strb	r0, [r1, #0]
    3958:	7048      	strb	r0, [r1, #1]
    395a:	8048      	strh	r0, [r1, #2]
    395c:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    3960:	2210      	movs	r2, #16
    3962:	7088      	strb	r0, [r1, #2]
    3964:	f801 0f04 	strb.w	r0, [r1, #4]!
    3968:	1e52      	subs	r2, r2, #1
    396a:	d1fa      	bne.n	3962 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    396c:	4d0a      	ldr	r5, [pc, #40]	; (3998 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    396e:	2601      	movs	r6, #1
    3970:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    3974:	20ff      	movs	r0, #255	; 0xff
    3976:	7028      	strb	r0, [r5, #0]
    3978:	4808      	ldr	r0, [pc, #32]	; (399c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    397a:	f001 f955 	bl	4c28 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    397e:	7068      	strb	r0, [r5, #1]
    3980:	f001 f9b0 	bl	4ce4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    3984:	60e8      	str	r0, [r5, #12]
    3986:	f000 fd07 	bl	4398 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    398a:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    398e:	bd70      	pop	{r4, r5, r6, pc}
    3990:	200011c0 	.word	0x200011c0
    3994:	20000020 	.word	0x20000020
    3998:	20000018 	.word	0x20000018
    399c:	00002339 	.word	0x00002339

000039a0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    39a0:	b570      	push	{r4, r5, r6, lr}
    39a2:	4604      	mov	r4, r0
    39a4:	4615      	mov	r5, r2
    39a6:	4608      	mov	r0, r1
    39a8:	f009 f987 	bl	ccba <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    39ac:	4b14      	ldr	r3, [pc, #80]	; (3a00 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x60>)
    39ae:	1b01      	subs	r1, r0, r4
    39b0:	2200      	movs	r2, #0
    39b2:	1acb      	subs	r3, r1, r3
    39b4:	f172 0300 	sbcs.w	r3, r2, #0
    39b8:	d318      	bcc.n	39ec <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>
    39ba:	f8df c044 	ldr.w	ip, [pc, #68]	; 3a00 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x60>
    39be:	1a23      	subs	r3, r4, r0
    39c0:	ebb3 0c0c 	subs.w	ip, r3, ip
    39c4:	f172 0200 	sbcs.w	r2, r2, #0
    39c8:	d310      	bcc.n	39ec <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>
    39ca:	4a0e      	ldr	r2, [pc, #56]	; (3a04 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>)
    39cc:	428a      	cmp	r2, r1
    39ce:	bf3e      	ittt	cc
    39d0:	f5c4 2190 	rsbcc	r1, r4, #294912	; 0x48000
    39d4:	f101 51f4 	addcc.w	r1, r1, #511705088	; 0x1e800000
    39d8:	4401      	addcc	r1, r0
    39da:	d307      	bcc.n	39ec <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>
    39dc:	429a      	cmp	r2, r3
    39de:	d209      	bcs.n	39f4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x54>
    39e0:	f5c0 2090 	rsb	r0, r0, #294912	; 0x48000
    39e4:	f100 50f4 	add.w	r0, r0, #511705088	; 0x1e800000
    39e8:	4420      	add	r0, r4
    39ea:	4241      	negs	r1, r0
    39ec:	f101 000f 	add.w	r0, r1, #15
    39f0:	1a28      	subs	r0, r5, r0
    39f2:	bd70      	pop	{r4, r5, r6, pc}
    39f4:	f640 21dd 	movw	r1, #2781	; 0xadd
    39f8:	2070      	movs	r0, #112	; 0x70
    39fa:	f001 f863 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    39fe:	0000      	.short	0x0000
    3a00:	0f424000 	.word	0x0f424000
    3a04:	1e847fff 	.word	0x1e847fff

00003a08 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    3a08:	0b41      	lsrs	r1, r0, #13
    3a0a:	f248 6237 	movw	r2, #34359	; 0x8637
    3a0e:	4351      	muls	r1, r2
    3a10:	0c0a      	lsrs	r2, r1, #16
    3a12:	4b09      	ldr	r3, [pc, #36]	; (3a38 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    3a14:	0251      	lsls	r1, r2, #9
    3a16:	fb02 0203 	mla	r2, r2, r3, r0
    3a1a:	4808      	ldr	r0, [pc, #32]	; (3a3c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    3a1c:	4350      	muls	r0, r2
    3a1e:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    3a22:	306e      	adds	r0, #110	; 0x6e
    3a24:	0d40      	lsrs	r0, r0, #21
    3a26:	425b      	negs	r3, r3
    3a28:	fb10 f303 	smulbb	r3, r0, r3
    3a2c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    3a30:	bf88      	it	hi
    3a32:	1c49      	addhi	r1, r1, #1
    3a34:	4408      	add	r0, r1
    3a36:	4770      	bx	lr
    3a38:	ffffc2f7 	.word	0xffffc2f7
    3a3c:	00010c6f 	.word	0x00010c6f

00003a40 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    3a40:	0b43      	lsrs	r3, r0, #13
    3a42:	f248 6c37 	movw	ip, #34359	; 0x8637
    3a46:	fb03 f30c 	mul.w	r3, r3, ip
    3a4a:	b430      	push	{r4, r5}
    3a4c:	0c1b      	lsrs	r3, r3, #16
    3a4e:	f8df c044 	ldr.w	ip, [pc, #68]	; 3a94 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    3a52:	025c      	lsls	r4, r3, #9
    3a54:	fb03 030c 	mla	r3, r3, ip, r0
    3a58:	480f      	ldr	r0, [pc, #60]	; (3a98 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    3a5a:	4358      	muls	r0, r3
    3a5c:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    3a60:	eb04 000c 	add.w	r0, r4, ip
    3a64:	f643 5409 	movw	r4, #15625	; 0x3d09
    3a68:	fb1c f404 	smulbb	r4, ip, r4
    3a6c:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    3a70:	f643 5508 	movw	r5, #15624	; 0x3d08
    3a74:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    3a78:	442c      	add	r4, r5
    3a7a:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    3a7e:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    3a82:	bf84      	itt	hi
    3a84:	f04f 0c00 	movhi.w	ip, #0
    3a88:	1c40      	addhi	r0, r0, #1
    3a8a:	6008      	str	r0, [r1, #0]
    3a8c:	f882 c000 	strb.w	ip, [r2]
    3a90:	bc30      	pop	{r4, r5}
    3a92:	4770      	bx	lr
    3a94:	ffffc2f7 	.word	0xffffc2f7
    3a98:	00010c6f 	.word	0x00010c6f

00003a9c <MPSL_IRQ_RTC0_Handler>:
    3a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3aa0:	4c38      	ldr	r4, [pc, #224]	; (3b84 <MPSL_IRQ_RTC0_Handler+0xe8>)
    3aa2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3aa6:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 3b88 <MPSL_IRQ_RTC0_Handler+0xec>
    3aaa:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    3aae:	f44f 6600 	mov.w	r6, #2048	; 0x800
    3ab2:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    3ab6:	f04f 0500 	mov.w	r5, #0
    3aba:	d019      	beq.n	3af0 <MPSL_IRQ_RTC0_Handler+0x54>
    3abc:	4833      	ldr	r0, [pc, #204]	; (3b8c <MPSL_IRQ_RTC0_Handler+0xf0>)
    3abe:	6800      	ldr	r0, [r0, #0]
    3ac0:	b1b0      	cbz	r0, 3af0 <MPSL_IRQ_RTC0_Handler+0x54>
    3ac2:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    3ac6:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3aca:	f8d4 0540 	ldr.w	r0, [r4, #1344]	; 0x540
    3ace:	f8d8 1000 	ldr.w	r1, [r8]
    3ad2:	1a40      	subs	r0, r0, r1
    3ad4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3ad8:	2802      	cmp	r0, #2
    3ada:	d302      	bcc.n	3ae2 <MPSL_IRQ_RTC0_Handler+0x46>
    3adc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3ae0:	d906      	bls.n	3af0 <MPSL_IRQ_RTC0_Handler+0x54>
    3ae2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3ae6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3aea:	2004      	movs	r0, #4
    3aec:	f7fe ff1c 	bl	2928 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3af0:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3af4:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3af8:	d01a      	beq.n	3b30 <MPSL_IRQ_RTC0_Handler+0x94>
    3afa:	4825      	ldr	r0, [pc, #148]	; (3b90 <MPSL_IRQ_RTC0_Handler+0xf4>)
    3afc:	6800      	ldr	r0, [r0, #0]
    3afe:	b1b8      	cbz	r0, 3b30 <MPSL_IRQ_RTC0_Handler+0x94>
    3b00:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    3b04:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3b08:	4822      	ldr	r0, [pc, #136]	; (3b94 <MPSL_IRQ_RTC0_Handler+0xf8>)
    3b0a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3b0e:	f8d8 1000 	ldr.w	r1, [r8]
    3b12:	1a40      	subs	r0, r0, r1
    3b14:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3b18:	2802      	cmp	r0, #2
    3b1a:	d302      	bcc.n	3b22 <MPSL_IRQ_RTC0_Handler+0x86>
    3b1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3b20:	d906      	bls.n	3b30 <MPSL_IRQ_RTC0_Handler+0x94>
    3b22:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3b26:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3b2a:	2005      	movs	r0, #5
    3b2c:	f7fe fefc 	bl	2928 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3b30:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3b34:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3b38:	bf08      	it	eq
    3b3a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b3e:	4816      	ldr	r0, [pc, #88]	; (3b98 <MPSL_IRQ_RTC0_Handler+0xfc>)
    3b40:	6800      	ldr	r0, [r0, #0]
    3b42:	2800      	cmp	r0, #0
    3b44:	bf08      	it	eq
    3b46:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b4a:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    3b4e:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3b52:	4812      	ldr	r0, [pc, #72]	; (3b9c <MPSL_IRQ_RTC0_Handler+0x100>)
    3b54:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3b58:	f8d8 1000 	ldr.w	r1, [r8]
    3b5c:	1a40      	subs	r0, r0, r1
    3b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3b62:	2802      	cmp	r0, #2
    3b64:	d304      	bcc.n	3b70 <MPSL_IRQ_RTC0_Handler+0xd4>
    3b66:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3b6a:	bf98      	it	ls
    3b6c:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b70:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3b74:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3b7c:	2006      	movs	r0, #6
    3b7e:	f7fe bed3 	b.w	2928 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3b82:	0000      	.short	0x0000
    3b84:	4000b000 	.word	0x4000b000
    3b88:	4000b504 	.word	0x4000b504
    3b8c:	4000b140 	.word	0x4000b140
    3b90:	4000b144 	.word	0x4000b144
    3b94:	4000b004 	.word	0x4000b004
    3b98:	4000b148 	.word	0x4000b148
    3b9c:	4000b008 	.word	0x4000b008

00003ba0 <MPSL_IRQ_TIMER0_Handler>:
    3ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ba4:	4d38      	ldr	r5, [pc, #224]	; (3c88 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    3ba6:	7828      	ldrb	r0, [r5, #0]
    3ba8:	2804      	cmp	r0, #4
    3baa:	d068      	beq.n	3c7e <MPSL_IRQ_TIMER0_Handler+0xde>
    3bac:	1ce8      	adds	r0, r5, #3
    3bae:	2201      	movs	r2, #1
    3bb0:	7801      	ldrb	r1, [r0, #0]
    3bb2:	b159      	cbz	r1, 3bcc <MPSL_IRQ_TIMER0_Handler+0x2c>
    3bb4:	2901      	cmp	r1, #1
    3bb6:	bf08      	it	eq
    3bb8:	706a      	strbeq	r2, [r5, #1]
    3bba:	d002      	beq.n	3bc2 <MPSL_IRQ_TIMER0_Handler+0x22>
    3bbc:	7869      	ldrb	r1, [r5, #1]
    3bbe:	2900      	cmp	r1, #0
    3bc0:	d058      	beq.n	3c74 <MPSL_IRQ_TIMER0_Handler+0xd4>
    3bc2:	2102      	movs	r1, #2
    3bc4:	7001      	strb	r1, [r0, #0]
    3bc6:	7840      	ldrb	r0, [r0, #1]
    3bc8:	f000 fafe 	bl	41c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3bcc:	4c2f      	ldr	r4, [pc, #188]	; (3c8c <MPSL_IRQ_TIMER0_Handler+0xec>)
    3bce:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3bd2:	f04f 0800 	mov.w	r8, #0
    3bd6:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    3bda:	f44f 7780 	mov.w	r7, #256	; 0x100
    3bde:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    3be2:	d00a      	beq.n	3bfa <MPSL_IRQ_TIMER0_Handler+0x5a>
    3be4:	482a      	ldr	r0, [pc, #168]	; (3c90 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    3be6:	6800      	ldr	r0, [r0, #0]
    3be8:	b138      	cbz	r0, 3bfa <MPSL_IRQ_TIMER0_Handler+0x5a>
    3bea:	2003      	movs	r0, #3
    3bec:	f000 faec 	bl	41c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3bf0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3bf4:	2003      	movs	r0, #3
    3bf6:	f7fe fe97 	bl	2928 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3bfa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3bfe:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3c02:	d00a      	beq.n	3c1a <MPSL_IRQ_TIMER0_Handler+0x7a>
    3c04:	4823      	ldr	r0, [pc, #140]	; (3c94 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    3c06:	6800      	ldr	r0, [r0, #0]
    3c08:	b138      	cbz	r0, 3c1a <MPSL_IRQ_TIMER0_Handler+0x7a>
    3c0a:	2002      	movs	r0, #2
    3c0c:	f000 fadc 	bl	41c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3c10:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3c14:	2002      	movs	r0, #2
    3c16:	f7fe fe87 	bl	2928 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3c1a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3c1e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3c22:	d00a      	beq.n	3c3a <MPSL_IRQ_TIMER0_Handler+0x9a>
    3c24:	481c      	ldr	r0, [pc, #112]	; (3c98 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    3c26:	6800      	ldr	r0, [r0, #0]
    3c28:	b138      	cbz	r0, 3c3a <MPSL_IRQ_TIMER0_Handler+0x9a>
    3c2a:	2001      	movs	r0, #1
    3c2c:	f000 facc 	bl	41c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3c30:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3c34:	2001      	movs	r0, #1
    3c36:	f7fe fe77 	bl	2928 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3c3a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3c3e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    3c42:	bf08      	it	eq
    3c44:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c48:	4814      	ldr	r0, [pc, #80]	; (3c9c <MPSL_IRQ_TIMER0_Handler+0xfc>)
    3c4a:	6800      	ldr	r0, [r0, #0]
    3c4c:	2800      	cmp	r0, #0
    3c4e:	bf08      	it	eq
    3c50:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c54:	2000      	movs	r0, #0
    3c56:	f000 fab7 	bl	41c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3c5a:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3c5e:	2004      	movs	r0, #4
    3c60:	7028      	strb	r0, [r5, #0]
    3c62:	f8c5 8008 	str.w	r8, [r5, #8]
    3c66:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    3c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3c6e:	2000      	movs	r0, #0
    3c70:	f7fe be5a 	b.w	2928 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3c74:	f240 412b 	movw	r1, #1067	; 0x42b
    3c78:	206c      	movs	r0, #108	; 0x6c
    3c7a:	f000 ff23 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3c82:	2007      	movs	r0, #7
    3c84:	f7fe be50 	b.w	2928 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3c88:	20000028 	.word	0x20000028
    3c8c:	40008000 	.word	0x40008000
    3c90:	4000814c 	.word	0x4000814c
    3c94:	40008148 	.word	0x40008148
    3c98:	40008144 	.word	0x40008144
    3c9c:	40008140 	.word	0x40008140
    3ca0:	2201      	movs	r2, #1
    3ca2:	0211      	lsls	r1, r2, #8
    3ca4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3ca8:	2000      	movs	r0, #0
    3caa:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    3cae:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    3cb2:	f3bf 8f4f 	dsb	sy
    3cb6:	f3bf 8f6f 	isb	sy
    3cba:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    3cbe:	490e      	ldr	r1, [pc, #56]	; (3cf8 <MPSL_IRQ_TIMER0_Handler+0x158>)
    3cc0:	f841 2f04 	str.w	r2, [r1, #4]!
    3cc4:	1e43      	subs	r3, r0, #1
    3cc6:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    3cca:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    3cce:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    3cd2:	4b0a      	ldr	r3, [pc, #40]	; (3cfc <MPSL_IRQ_TIMER0_Handler+0x15c>)
    3cd4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3cd8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3cdc:	1d1b      	adds	r3, r3, #4
    3cde:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3ce2:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3ce6:	1d1b      	adds	r3, r3, #4
    3ce8:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3cec:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3cf0:	60ca      	str	r2, [r1, #12]
    3cf2:	4903      	ldr	r1, [pc, #12]	; (3d00 <MPSL_IRQ_TIMER0_Handler+0x160>)
    3cf4:	7048      	strb	r0, [r1, #1]
    3cf6:	4770      	bx	lr
    3cf8:	40008000 	.word	0x40008000
    3cfc:	40008004 	.word	0x40008004
    3d00:	20000028 	.word	0x20000028

00003d04 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    3d04:	4801      	ldr	r0, [pc, #4]	; (3d0c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    3d06:	6800      	ldr	r0, [r0, #0]
    3d08:	4770      	bx	lr
    3d0a:	0000      	.short	0x0000
    3d0c:	4000b504 	.word	0x4000b504

00003d10 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    3d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3d14:	4e48      	ldr	r6, [pc, #288]	; (3e38 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    3d16:	4605      	mov	r5, r0
    3d18:	1ef7      	subs	r7, r6, #3
    3d1a:	7833      	ldrb	r3, [r6, #0]
    3d1c:	68f9      	ldr	r1, [r7, #12]
    3d1e:	2b01      	cmp	r3, #1
    3d20:	bf04      	itt	eq
    3d22:	42a9      	cmpeq	r1, r5
    3d24:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3d28:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3d2c:	4a43      	ldr	r2, [pc, #268]	; (3e3c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    3d2e:	6010      	str	r0, [r2, #0]
    3d30:	4a43      	ldr	r2, [pc, #268]	; (3e40 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    3d32:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    3d36:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    3d3a:	f102 0004 	add.w	r0, r2, #4
    3d3e:	f04f 0400 	mov.w	r4, #0
    3d42:	2b00      	cmp	r3, #0
    3d44:	d063      	beq.n	3e0e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    3d46:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    3d4a:	f8c2 c348 	str.w	ip, [r2, #840]	; 0x348
    3d4e:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3d52:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    3d56:	483b      	ldr	r0, [pc, #236]	; (3e44 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    3d58:	6800      	ldr	r0, [r0, #0]
    3d5a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    3d5e:	f04f 0801 	mov.w	r8, #1
    3d62:	2800      	cmp	r0, #0
    3d64:	bf04      	itt	eq
    3d66:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    3d6a:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
    3d6e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3d72:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    3d76:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    3d7a:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    3d7e:	4832      	ldr	r0, [pc, #200]	; (3e48 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    3d80:	f8d0 c000 	ldr.w	ip, [r0]
    3d84:	eba5 0c0c 	sub.w	ip, r5, ip
    3d88:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    3d8c:	f1bc 0f02 	cmp.w	ip, #2
    3d90:	d34a      	bcc.n	3e28 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>
    3d92:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    3d96:	d847      	bhi.n	3e28 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>
    3d98:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
    3d9c:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    3da0:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
    3da4:	b12b      	cbz	r3, 3db2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa2>
    3da6:	6802      	ldr	r2, [r0, #0]
    3da8:	1a8a      	subs	r2, r1, r2
    3daa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3dae:	2a02      	cmp	r2, #2
    3db0:	d3f9      	bcc.n	3da6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x96>
    3db2:	f8c7 8008 	str.w	r8, [r7, #8]
    3db6:	703c      	strb	r4, [r7, #0]
    3db8:	f7ff ff72 	bl	3ca0 <MPSL_IRQ_TIMER0_Handler+0x100>
    3dbc:	4823      	ldr	r0, [pc, #140]	; (3e4c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    3dbe:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    3dc2:	f364 0101 	bfi	r1, r4, #0, #2
    3dc6:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    3dca:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    3dce:	2102      	movs	r1, #2
    3dd0:	f361 0201 	bfi	r2, r1, #0, #2
    3dd4:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    3dd8:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    3ddc:	2104      	movs	r1, #4
    3dde:	f361 0203 	bfi	r2, r1, #0, #4
    3de2:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    3de6:	f8c0 800c 	str.w	r8, [r0, #12]
    3dea:	68b9      	ldr	r1, [r7, #8]
    3dec:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3df0:	1580      	asrs	r0, r0, #22
    3df2:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    3df6:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    3dfa:	4915      	ldr	r1, [pc, #84]	; (3e50 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    3dfc:	05c0      	lsls	r0, r0, #23
    3dfe:	6008      	str	r0, [r1, #0]
    3e00:	2004      	movs	r0, #4
    3e02:	60fd      	str	r5, [r7, #12]
    3e04:	7070      	strb	r0, [r6, #1]
    3e06:	f886 8000 	strb.w	r8, [r6]
    3e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3e0e:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    3e12:	f8c2 c348 	str.w	ip, [r2, #840]	; 0x348
    3e16:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    3e1a:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    3e1e:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3e22:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    3e26:	e796      	b.n	3d56 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x46>
    3e28:	2000      	movs	r0, #0
    3e2a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3e2e:	f240 2169 	movw	r1, #617	; 0x269
    3e32:	206c      	movs	r0, #108	; 0x6c
    3e34:	f000 fe46 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3e38:	2000002b 	.word	0x2000002b
    3e3c:	4001f508 	.word	0x4001f508
    3e40:	4000b000 	.word	0x4000b000
    3e44:	4000b148 	.word	0x4000b148
    3e48:	4000b504 	.word	0x4000b504
    3e4c:	40008000 	.word	0x40008000
    3e50:	4001f504 	.word	0x4001f504

00003e54 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    3e54:	b570      	push	{r4, r5, r6, lr}
    3e56:	4c2a      	ldr	r4, [pc, #168]	; (3f00 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    3e58:	68e1      	ldr	r1, [r4, #12]
    3e5a:	4281      	cmp	r1, r0
    3e5c:	bf14      	ite	ne
    3e5e:	2201      	movne	r2, #1
    3e60:	2200      	moveq	r2, #0
    3e62:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 3f04 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    3e66:	f89c 5000 	ldrb.w	r5, [ip]
    3e6a:	2d02      	cmp	r5, #2
    3e6c:	d002      	beq.n	3e74 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    3e6e:	2a00      	cmp	r2, #0
    3e70:	d034      	beq.n	3edc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    3e72:	e002      	b.n	3e7a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    3e74:	2a00      	cmp	r2, #0
    3e76:	bf08      	it	eq
    3e78:	bd70      	popeq	{r4, r5, r6, pc}
    3e7a:	7862      	ldrb	r2, [r4, #1]
    3e7c:	b39a      	cbz	r2, 3ee6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    3e7e:	4b22      	ldr	r3, [pc, #136]	; (3f08 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    3e80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3e84:	601a      	str	r2, [r3, #0]
    3e86:	4b21      	ldr	r3, [pc, #132]	; (3f0c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    3e88:	1392      	asrs	r2, r2, #14
    3e8a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    3e8e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    3e92:	2200      	movs	r2, #0
    3e94:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    3e98:	4a1d      	ldr	r2, [pc, #116]	; (3f10 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    3e9a:	6816      	ldr	r6, [r2, #0]
    3e9c:	1b86      	subs	r6, r0, r6
    3e9e:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    3ea2:	2e02      	cmp	r6, #2
    3ea4:	d324      	bcc.n	3ef0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3ea6:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    3eaa:	d821      	bhi.n	3ef0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3eac:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3eb0:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    3eb4:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    3eb8:	b12d      	cbz	r5, 3ec6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    3eba:	6813      	ldr	r3, [r2, #0]
    3ebc:	1acb      	subs	r3, r1, r3
    3ebe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3ec2:	2b02      	cmp	r3, #2
    3ec4:	d3f9      	bcc.n	3eba <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    3ec6:	4b13      	ldr	r3, [pc, #76]	; (3f14 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    3ec8:	2102      	movs	r1, #2
    3eca:	074a      	lsls	r2, r1, #29
    3ecc:	601a      	str	r2, [r3, #0]
    3ece:	60e0      	str	r0, [r4, #12]
    3ed0:	2004      	movs	r0, #4
    3ed2:	f88c 0001 	strb.w	r0, [ip, #1]
    3ed6:	f88c 1000 	strb.w	r1, [ip]
    3eda:	bd70      	pop	{r4, r5, r6, pc}
    3edc:	f240 2177 	movw	r1, #631	; 0x277
    3ee0:	206c      	movs	r0, #108	; 0x6c
    3ee2:	f000 fdef 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ee6:	f240 217b 	movw	r1, #635	; 0x27b
    3eea:	206c      	movs	r0, #108	; 0x6c
    3eec:	f000 fdea 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ef0:	2000      	movs	r0, #0
    3ef2:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3ef6:	f240 2187 	movw	r1, #647	; 0x287
    3efa:	206c      	movs	r0, #108	; 0x6c
    3efc:	f000 fde2 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3f00:	20000028 	.word	0x20000028
    3f04:	2000002b 	.word	0x2000002b
    3f08:	4001f508 	.word	0x4001f508
    3f0c:	4000b000 	.word	0x4000b000
    3f10:	4000b504 	.word	0x4000b504
    3f14:	4001f504 	.word	0x4001f504

00003f18 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    3f18:	4801      	ldr	r0, [pc, #4]	; (3f20 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    3f1a:	68c0      	ldr	r0, [r0, #12]
    3f1c:	4770      	bx	lr
    3f1e:	0000      	.short	0x0000
    3f20:	20000028 	.word	0x20000028

00003f24 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    3f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f28:	4836      	ldr	r0, [pc, #216]	; (4004 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    3f2a:	f46f 2180 	mvn.w	r1, #262144	; 0x40000
    3f2e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3f32:	4a35      	ldr	r2, [pc, #212]	; (4008 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    3f34:	f100 0c04 	add.w	ip, r0, #4
    3f38:	2100      	movs	r1, #0
    3f3a:	7813      	ldrb	r3, [r2, #0]
    3f3c:	b16b      	cbz	r3, 3f5a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    3f3e:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    3f42:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    3f46:	f8cc 1540 	str.w	r1, [ip, #1344]	; 0x540
    3f4a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3f4e:	482f      	ldr	r0, [pc, #188]	; (400c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    3f50:	6800      	ldr	r0, [r0, #0]
    3f52:	f04f 0c01 	mov.w	ip, #1
    3f56:	b998      	cbnz	r0, 3f80 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5c>
    3f58:	e00c      	b.n	3f74 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x50>
    3f5a:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    3f5e:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    3f62:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3f66:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3f6a:	f8cc 1540 	str.w	r1, [ip, #1344]	; 0x540
    3f6e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3f72:	e7ec      	b.n	3f4e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2a>
    3f74:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    3f78:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3f7c:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    3f80:	2b02      	cmp	r3, #2
    3f82:	d004      	beq.n	3f8e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6a>
    3f84:	f240 2193 	movw	r1, #659	; 0x293
    3f88:	206c      	movs	r0, #108	; 0x6c
    3f8a:	f000 fd9b 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3f8e:	4e20      	ldr	r6, [pc, #128]	; (4010 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    3f90:	6830      	ldr	r0, [r6, #0]
    3f92:	4c20      	ldr	r4, [pc, #128]	; (4014 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    3f94:	1cc0      	adds	r0, r0, #3
    3f96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3f9a:	68e3      	ldr	r3, [r4, #12]
    3f9c:	4d1e      	ldr	r5, [pc, #120]	; (4018 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    3f9e:	4298      	cmp	r0, r3
    3fa0:	d00b      	beq.n	3fba <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3fa2:	6837      	ldr	r7, [r6, #0]
    3fa4:	1bdf      	subs	r7, r3, r7
    3fa6:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    3faa:	2f04      	cmp	r7, #4
    3fac:	d305      	bcc.n	3fba <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3fae:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    3fb2:	d802      	bhi.n	3fba <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3fb4:	f7ff feac 	bl	3d10 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3fb8:	e01e      	b.n	3ff8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>
    3fba:	6830      	ldr	r0, [r6, #0]
    3fbc:	1a18      	subs	r0, r3, r0
    3fbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3fc2:	2802      	cmp	r0, #2
    3fc4:	d315      	bcc.n	3ff2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xce>
    3fc6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3fca:	d812      	bhi.n	3ff2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xce>
    3fcc:	4b13      	ldr	r3, [pc, #76]	; (401c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    3fce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3fd2:	6018      	str	r0, [r3, #0]
    3fd4:	f8c4 c008 	str.w	ip, [r4, #8]
    3fd8:	7021      	strb	r1, [r4, #0]
    3fda:	f8c5 c004 	str.w	ip, [r5, #4]
    3fde:	f8c5 c00c 	str.w	ip, [r5, #12]
    3fe2:	0040      	lsls	r0, r0, #1
    3fe4:	1f19      	subs	r1, r3, #4
    3fe6:	6008      	str	r0, [r1, #0]
    3fe8:	2004      	movs	r0, #4
    3fea:	7050      	strb	r0, [r2, #1]
    3fec:	f882 c000 	strb.w	ip, [r2]
    3ff0:	e002      	b.n	3ff8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>
    3ff2:	f8c4 c008 	str.w	ip, [r4, #8]
    3ff6:	7021      	strb	r1, [r4, #0]
    3ff8:	68a0      	ldr	r0, [r4, #8]
    3ffa:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4002:	0000      	.short	0x0000
    4004:	4000b000 	.word	0x4000b000
    4008:	2000002b 	.word	0x2000002b
    400c:	4000b148 	.word	0x4000b148
    4010:	4000b504 	.word	0x4000b504
    4014:	20000028 	.word	0x20000028
    4018:	40008000 	.word	0x40008000
    401c:	4001f508 	.word	0x4001f508

00004020 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    4020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4024:	4c63      	ldr	r4, [pc, #396]	; (41b4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x194>)
    4026:	2700      	movs	r7, #0
    4028:	2601      	movs	r6, #1
    402a:	f894 c000 	ldrb.w	ip, [r4]
    402e:	7865      	ldrb	r5, [r4, #1]
    4030:	f44f 74a0 	mov.w	r4, #320	; 0x140
    4034:	2807      	cmp	r0, #7
    4036:	d27b      	bcs.n	4130 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x110>
    4038:	e8df f000 	tbb	[pc, r0]
    403c:	04040404 	.word	0x04040404
    4040:	006a6a6a 	.word	0x006a6a6a
    4044:	f8df 8170 	ldr.w	r8, [pc, #368]	; 41b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x198>
    4048:	f8d8 900c 	ldr.w	r9, [r8, #12]
    404c:	f1b9 7f80 	cmp.w	r9, #16777216	; 0x1000000
    4050:	bf04      	itt	eq
    4052:	f898 8001 	ldrbeq.w	r8, [r8, #1]
    4056:	f1b8 0f00 	cmpeq.w	r8, #0
    405a:	d003      	beq.n	4064 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x44>
    405c:	f1bc 0f02 	cmp.w	ip, #2
    4060:	d005      	beq.n	406e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4e>
    4062:	e02c      	b.n	40be <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9e>
    4064:	f240 21d6 	movw	r1, #726	; 0x2d6
    4068:	206c      	movs	r0, #108	; 0x6c
    406a:	f000 fd2b 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    406e:	f1a5 0804 	sub.w	r8, r5, #4
    4072:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    4076:	eb04 0488 	add.w	r4, r4, r8, lsl #2
    407a:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
    407e:	f508 4830 	add.w	r8, r8, #45056	; 0xb000
    4082:	2400      	movs	r4, #0
    4084:	f1bc 0f01 	cmp.w	ip, #1
    4088:	d003      	beq.n	4092 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x72>
    408a:	f1bc 0f02 	cmp.w	ip, #2
    408e:	d00a      	beq.n	40a6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    4090:	e012      	b.n	40b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x98>
    4092:	2d04      	cmp	r5, #4
    4094:	bf24      	itt	cs
    4096:	f8d8 9000 	ldrcs.w	r9, [r8]
    409a:	f1b9 0f00 	cmpcs.w	r9, #0
    409e:	bf08      	it	eq
    40a0:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
    40a4:	e008      	b.n	40b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x98>
    40a6:	2d04      	cmp	r5, #4
    40a8:	bf24      	itt	cs
    40aa:	f8d8 9000 	ldrcs.w	r9, [r8]
    40ae:	f1b9 0f00 	cmpcs.w	r9, #0
    40b2:	bf08      	it	eq
    40b4:	f044 4480 	orreq.w	r4, r4, #1073741824	; 0x40000000
    40b8:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    40bc:	d1e1      	bne.n	4082 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    40be:	4c3f      	ldr	r4, [pc, #252]	; (41bc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x19c>)
    40c0:	f100 0c10 	add.w	ip, r0, #16
    40c4:	fa06 fc0c 	lsl.w	ip, r6, ip
    40c8:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    40cc:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    40d0:	b1aa      	cbz	r2, 40fe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xde>
    40d2:	f04f 0840 	mov.w	r8, #64	; 0x40
    40d6:	eb08 0880 	add.w	r8, r8, r0, lsl #2
    40da:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    40de:	44a0      	add	r8, r4
    40e0:	f8c8 6000 	str.w	r6, [r8]
    40e4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    40e8:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    40ec:	eba1 0000 	sub.w	r0, r1, r0
    40f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    40f4:	4290      	cmp	r0, r2
    40f6:	bf38      	it	cc
    40f8:	f8c5 7540 	strcc.w	r7, [r5, #1344]	; 0x540
    40fc:	d351      	bcc.n	41a2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x182>
    40fe:	f8c5 1540 	str.w	r1, [r5, #1344]	; 0x540
    4102:	2b01      	cmp	r3, #1
    4104:	bf08      	it	eq
    4106:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    410a:	2001      	movs	r0, #1
    410c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4110:	f1bc 0f00 	cmp.w	ip, #0
    4114:	d006      	beq.n	4124 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x104>
    4116:	4285      	cmp	r5, r0
    4118:	d104      	bne.n	4124 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x104>
    411a:	f240 21f9 	movw	r1, #761	; 0x2f9
    411e:	206c      	movs	r0, #108	; 0x6c
    4120:	f000 fcd0 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4124:	f1a0 0c04 	sub.w	ip, r0, #4
    4128:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    412c:	2b01      	cmp	r3, #1
    412e:	e000      	b.n	4132 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x112>
    4130:	e03a      	b.n	41a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    4132:	bf0c      	ite	eq
    4134:	2501      	moveq	r5, #1
    4136:	2500      	movne	r5, #0
    4138:	f1bc 0f03 	cmp.w	ip, #3
    413c:	d304      	bcc.n	4148 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x128>
    413e:	f240 11bd 	movw	r1, #445	; 0x1bd
    4142:	206c      	movs	r0, #108	; 0x6c
    4144:	f000 fcbe 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4148:	f10c 0310 	add.w	r3, ip, #16
    414c:	fa06 f303 	lsl.w	r3, r6, r3
    4150:	4e1b      	ldr	r6, [pc, #108]	; (41c0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a0>)
    4152:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
    4156:	f8c6 3348 	str.w	r3, [r6, #840]	; 0x348
    415a:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
    415e:	f846 700c 	str.w	r7, [r6, ip]
    4162:	1f00      	subs	r0, r0, #4
    4164:	b2c0      	uxtb	r0, r0
    4166:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    416a:	b17a      	cbz	r2, 418c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16c>
    416c:	f8df c054 	ldr.w	ip, [pc, #84]	; 41c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a4>
    4170:	f8dc c000 	ldr.w	ip, [ip]
    4174:	eba1 0c0c 	sub.w	ip, r1, ip
    4178:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    417c:	4562      	cmp	r2, ip
    417e:	bf92      	itee	ls
    4180:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    4184:	2100      	movhi	r1, #0
    4186:	f8c0 1540 	strhi.w	r1, [r0, #1344]	; 0x540
    418a:	d80a      	bhi.n	41a2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x182>
    418c:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    4190:	2d00      	cmp	r5, #0
    4192:	bf18      	it	ne
    4194:	f8c6 3304 	strne.w	r3, [r6, #772]	; 0x304
    4198:	f8c6 3344 	str.w	r3, [r6, #836]	; 0x344
    419c:	2001      	movs	r0, #1
    419e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    41a2:	2000      	movs	r0, #0
    41a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    41a8:	f240 21fe 	movw	r1, #766	; 0x2fe
    41ac:	206c      	movs	r0, #108	; 0x6c
    41ae:	f000 fc89 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    41b2:	0000      	.short	0x0000
    41b4:	2000002b 	.word	0x2000002b
    41b8:	20000028 	.word	0x20000028
    41bc:	40008000 	.word	0x40008000
    41c0:	4000b000 	.word	0x4000b000
    41c4:	4000b504 	.word	0x4000b504

000041c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    41c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    41cc:	2601      	movs	r6, #1
    41ce:	2700      	movs	r7, #0
    41d0:	f44f 78a0 	mov.w	r8, #320	; 0x140
    41d4:	2807      	cmp	r0, #7
    41d6:	d251      	bcs.n	427c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    41d8:	e8df f000 	tbb	[pc, r0]
    41dc:	04040404 	.word	0x04040404
    41e0:	00191919 	.word	0x00191919
    41e4:	f100 0110 	add.w	r1, r0, #16
    41e8:	fa06 f201 	lsl.w	r2, r6, r1
    41ec:	4926      	ldr	r1, [pc, #152]	; (4288 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    41ee:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    41f2:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    41f6:	2200      	movs	r2, #0
    41f8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    41fc:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    4200:	508f      	str	r7, [r1, r2]
    4202:	4922      	ldr	r1, [pc, #136]	; (428c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    4204:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    4208:	9000      	str	r0, [sp, #0]
    420a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    420e:	4d20      	ldr	r5, [pc, #128]	; (4290 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    4210:	1f01      	subs	r1, r0, #4
    4212:	b2cc      	uxtb	r4, r1
    4214:	7829      	ldrb	r1, [r5, #0]
    4216:	b179      	cbz	r1, 4238 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    4218:	786a      	ldrb	r2, [r5, #1]
    421a:	4282      	cmp	r2, r0
    421c:	d10c      	bne.n	4238 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    421e:	4a1d      	ldr	r2, [pc, #116]	; (4294 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    4220:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    4224:	6010      	str	r0, [r2, #0]
    4226:	2901      	cmp	r1, #1
    4228:	bf08      	it	eq
    422a:	f7ff fd39 	bleq	3ca0 <MPSL_IRQ_TIMER0_Handler+0x100>
    422e:	702f      	strb	r7, [r5, #0]
    4230:	4919      	ldr	r1, [pc, #100]	; (4298 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    4232:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    4236:	60c8      	str	r0, [r1, #12]
    4238:	4918      	ldr	r1, [pc, #96]	; (429c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    423a:	f104 0010 	add.w	r0, r4, #16
    423e:	fa06 f000 	lsl.w	r0, r6, r0
    4242:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    4246:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    424a:	00a0      	lsls	r0, r4, #2
    424c:	4408      	add	r0, r1
    424e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    4252:	4a13      	ldr	r2, [pc, #76]	; (42a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    4254:	6812      	ldr	r2, [r2, #0]
    4256:	1a80      	subs	r0, r0, r2
    4258:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    425c:	2802      	cmp	r0, #2
    425e:	d307      	bcc.n	4270 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    4260:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    4264:	2000      	movs	r0, #0
    4266:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    426a:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    426e:	500f      	str	r7, [r1, r0]
    4270:	480c      	ldr	r0, [pc, #48]	; (42a4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    4272:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    4276:	9000      	str	r0, [sp, #0]
    4278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    427c:	f240 317f 	movw	r1, #895	; 0x37f
    4280:	206c      	movs	r0, #108	; 0x6c
    4282:	f000 fc1f 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4286:	0000      	.short	0x0000
    4288:	40008000 	.word	0x40008000
    428c:	40008140 	.word	0x40008140
    4290:	2000002b 	.word	0x2000002b
    4294:	4001f508 	.word	0x4001f508
    4298:	20000028 	.word	0x20000028
    429c:	4000b000 	.word	0x4000b000
    42a0:	4000b504 	.word	0x4000b504
    42a4:	4000b140 	.word	0x4000b140

000042a8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    42a8:	4920      	ldr	r1, [pc, #128]	; (432c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    42aa:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    42ae:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    42b2:	481f      	ldr	r0, [pc, #124]	; (4330 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    42b4:	1d0a      	adds	r2, r1, #4
    42b6:	7803      	ldrb	r3, [r0, #0]
    42b8:	2000      	movs	r0, #0
    42ba:	b15b      	cbz	r3, 42d4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    42bc:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    42c0:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    42c4:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    42c8:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    42cc:	4919      	ldr	r1, [pc, #100]	; (4334 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    42ce:	6809      	ldr	r1, [r1, #0]
    42d0:	b999      	cbnz	r1, 42fa <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x52>
    42d2:	e00c      	b.n	42ee <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x46>
    42d4:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    42d8:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    42dc:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    42e0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    42e4:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    42e8:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    42ec:	e7ee      	b.n	42cc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x24>
    42ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    42f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
    42f6:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    42fa:	490f      	ldr	r1, [pc, #60]	; (4338 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    42fc:	f04f 32ff 	mov.w	r2, #4294967295
    4300:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4304:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    4308:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    430c:	1d0a      	adds	r2, r1, #4
    430e:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    4312:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    4316:	1d12      	adds	r2, r2, #4
    4318:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    431c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    4320:	1d12      	adds	r2, r2, #4
    4322:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    4326:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    432a:	4770      	bx	lr
    432c:	4000b000 	.word	0x4000b000
    4330:	2000002b 	.word	0x2000002b
    4334:	4000b148 	.word	0x4000b148
    4338:	40008000 	.word	0x40008000

0000433c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    433c:	4808      	ldr	r0, [pc, #32]	; (4360 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    433e:	f990 0002 	ldrsb.w	r0, [r0, #2]
    4342:	2800      	cmp	r0, #0
    4344:	bfb8      	it	lt
    4346:	4770      	bxlt	lr
    4348:	f000 011f 	and.w	r1, r0, #31
    434c:	2201      	movs	r2, #1
    434e:	fa02 f101 	lsl.w	r1, r2, r1
    4352:	0940      	lsrs	r0, r0, #5
    4354:	0080      	lsls	r0, r0, #2
    4356:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    435a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    435e:	4770      	bx	lr
    4360:	20000028 	.word	0x20000028

00004364 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    4364:	b510      	push	{r4, lr}
    4366:	2807      	cmp	r0, #7
    4368:	d20d      	bcs.n	4386 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    436a:	e8df f000 	tbb	[pc, r0]
    436e:	0404      	.short	0x0404
    4370:	06060404 	.word	0x06060404
    4374:	0006      	.short	0x0006
    4376:	4906      	ldr	r1, [pc, #24]	; (4390 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    4378:	e002      	b.n	4380 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    437a:	1f00      	subs	r0, r0, #4
    437c:	4905      	ldr	r1, [pc, #20]	; (4394 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    437e:	b2c0      	uxtb	r0, r0
    4380:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    4384:	bd10      	pop	{r4, pc}
    4386:	f240 3122 	movw	r1, #802	; 0x322
    438a:	206c      	movs	r0, #108	; 0x6c
    438c:	f000 fb9a 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4390:	40008140 	.word	0x40008140
    4394:	4000b140 	.word	0x4000b140

00004398 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    4398:	b570      	push	{r4, r5, r6, lr}
    439a:	481a      	ldr	r0, [pc, #104]	; (4404 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    439c:	2400      	movs	r4, #0
    439e:	2104      	movs	r1, #4
    43a0:	7004      	strb	r4, [r0, #0]
    43a2:	1ec0      	subs	r0, r0, #3
    43a4:	7001      	strb	r1, [r0, #0]
    43a6:	0589      	lsls	r1, r1, #22
    43a8:	60c1      	str	r1, [r0, #12]
    43aa:	f7ff fc79 	bl	3ca0 <MPSL_IRQ_TIMER0_Handler+0x100>
    43ae:	2301      	movs	r3, #1
    43b0:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    43b4:	02dd      	lsls	r5, r3, #11
    43b6:	f8cc 5180 	str.w	r5, [ip, #384]	; 0x180
    43ba:	f3bf 8f4f 	dsb	sy
    43be:	f3bf 8f6f 	isb	sy
    43c2:	f8cc 5280 	str.w	r5, [ip, #640]	; 0x280
    43c6:	4a10      	ldr	r2, [pc, #64]	; (4408 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    43c8:	6053      	str	r3, [r2, #4]
    43ca:	6093      	str	r3, [r2, #8]
    43cc:	480f      	ldr	r0, [pc, #60]	; (440c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    43ce:	6801      	ldr	r1, [r0, #0]
    43d0:	2900      	cmp	r1, #0
    43d2:	d1fc      	bne.n	43ce <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    43d4:	1e48      	subs	r0, r1, #1
    43d6:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    43da:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    43de:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    43e2:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    43e6:	480a      	ldr	r0, [pc, #40]	; (4410 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    43e8:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    43ec:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    43f0:	1d00      	adds	r0, r0, #4
    43f2:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    43f6:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    43fa:	f8cc 5100 	str.w	r5, [ip, #256]	; 0x100
    43fe:	6013      	str	r3, [r2, #0]
    4400:	bd70      	pop	{r4, r5, r6, pc}
    4402:	0000      	.short	0x0000
    4404:	2000002b 	.word	0x2000002b
    4408:	4000b000 	.word	0x4000b000
    440c:	4000b504 	.word	0x4000b504
    4410:	4000b004 	.word	0x4000b004

00004414 <MPSL_IRQ_CLOCK_Handler>:
    4414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4418:	4c16      	ldr	r4, [pc, #88]	; (4474 <MPSL_IRQ_CLOCK_Handler+0x60>)
    441a:	7a60      	ldrb	r0, [r4, #9]
    441c:	2800      	cmp	r0, #0
    441e:	d027      	beq.n	4470 <MPSL_IRQ_CLOCK_Handler+0x5c>
    4420:	f44f 7180 	mov.w	r1, #256	; 0x100
    4424:	058d      	lsls	r5, r1, #22
    4426:	4628      	mov	r0, r5
    4428:	f008 fc98 	bl	cd5c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    442c:	4680      	mov	r8, r0
    442e:	f44f 7182 	mov.w	r1, #260	; 0x104
    4432:	4628      	mov	r0, r5
    4434:	f008 fc92 	bl	cd5c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4438:	2600      	movs	r6, #0
    443a:	4607      	mov	r7, r0
    443c:	f1b8 0f00 	cmp.w	r8, #0
    4440:	d009      	beq.n	4456 <MPSL_IRQ_CLOCK_Handler+0x42>
    4442:	2001      	movs	r0, #1
    4444:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4448:	7920      	ldrb	r0, [r4, #4]
    444a:	b120      	cbz	r0, 4456 <MPSL_IRQ_CLOCK_Handler+0x42>
    444c:	7126      	strb	r6, [r4, #4]
    444e:	69e0      	ldr	r0, [r4, #28]
    4450:	b108      	cbz	r0, 4456 <MPSL_IRQ_CLOCK_Handler+0x42>
    4452:	4780      	blx	r0
    4454:	61e6      	str	r6, [r4, #28]
    4456:	b137      	cbz	r7, 4466 <MPSL_IRQ_CLOCK_Handler+0x52>
    4458:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    445c:	2002      	movs	r0, #2
    445e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4462:	f000 fa63 	bl	492c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    4466:	4640      	mov	r0, r8
    4468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    446c:	f000 b858 	b.w	4520 <MPSL_IRQ_CLOCK_Handler+0x10c>
    4470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4474:	20000038 	.word	0x20000038
    4478:	b510      	push	{r4, lr}
    447a:	f008 fd19 	bl	ceb0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    447e:	b930      	cbnz	r0, 448e <MPSL_IRQ_CLOCK_Handler+0x7a>
    4480:	f008 fd37 	bl	cef2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4484:	b918      	cbnz	r0, 448e <MPSL_IRQ_CLOCK_Handler+0x7a>
    4486:	f008 fd6a 	bl	cf5e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    448a:	2800      	cmp	r0, #0
    448c:	d002      	beq.n	4494 <MPSL_IRQ_CLOCK_Handler+0x80>
    448e:	4902      	ldr	r1, [pc, #8]	; (4498 <MPSL_IRQ_CLOCK_Handler+0x84>)
    4490:	2002      	movs	r0, #2
    4492:	6008      	str	r0, [r1, #0]
    4494:	bd10      	pop	{r4, pc}
    4496:	0000      	.short	0x0000
    4498:	40000c34 	.word	0x40000c34
    449c:	b570      	push	{r4, r5, r6, lr}
    449e:	f000 f98b 	bl	47b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    44a2:	f000 fa97 	bl	49d4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    44a6:	4c09      	ldr	r4, [pc, #36]	; (44cc <MPSL_IRQ_CLOCK_Handler+0xb8>)
    44a8:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    44ac:	b130      	cbz	r0, 44bc <MPSL_IRQ_CLOCK_Handler+0xa8>
    44ae:	f7ff ffe3 	bl	4478 <MPSL_IRQ_CLOCK_Handler+0x64>
    44b2:	2001      	movs	r0, #1
    44b4:	6128      	str	r0, [r5, #16]
    44b6:	2004      	movs	r0, #4
    44b8:	72a0      	strb	r0, [r4, #10]
    44ba:	e004      	b.n	44c6 <MPSL_IRQ_CLOCK_Handler+0xb2>
    44bc:	2003      	movs	r0, #3
    44be:	72a0      	strb	r0, [r4, #10]
    44c0:	2001      	movs	r0, #1
    44c2:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    44c6:	2000      	movs	r0, #0
    44c8:	71e0      	strb	r0, [r4, #7]
    44ca:	bd70      	pop	{r4, r5, r6, pc}
    44cc:	20000038 	.word	0x20000038
    44d0:	b570      	push	{r4, r5, r6, lr}
    44d2:	4c12      	ldr	r4, [pc, #72]	; (451c <MPSL_IRQ_CLOCK_Handler+0x108>)
    44d4:	79a0      	ldrb	r0, [r4, #6]
    44d6:	b1e0      	cbz	r0, 4512 <MPSL_IRQ_CLOCK_Handler+0xfe>
    44d8:	79e1      	ldrb	r1, [r4, #7]
    44da:	1e40      	subs	r0, r0, #1
    44dc:	4281      	cmp	r1, r0
    44de:	da18      	bge.n	4512 <MPSL_IRQ_CLOCK_Handler+0xfe>
    44e0:	f000 fa78 	bl	49d4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    44e4:	4605      	mov	r5, r0
    44e6:	f000 fb5d 	bl	4ba4 <mpsl_temperature_get>
    44ea:	79a1      	ldrb	r1, [r4, #6]
    44ec:	2901      	cmp	r1, #1
    44ee:	d902      	bls.n	44f6 <MPSL_IRQ_CLOCK_Handler+0xe2>
    44f0:	79e1      	ldrb	r1, [r4, #7]
    44f2:	1c49      	adds	r1, r1, #1
    44f4:	71e1      	strb	r1, [r4, #7]
    44f6:	b10d      	cbz	r5, 44fc <MPSL_IRQ_CLOCK_Handler+0xe8>
    44f8:	6961      	ldr	r1, [r4, #20]
    44fa:	e000      	b.n	44fe <MPSL_IRQ_CLOCK_Handler+0xea>
    44fc:	6921      	ldr	r1, [r4, #16]
    44fe:	1a41      	subs	r1, r0, r1
    4500:	2902      	cmp	r1, #2
    4502:	da02      	bge.n	450a <MPSL_IRQ_CLOCK_Handler+0xf6>
    4504:	f111 0f02 	cmn.w	r1, #2
    4508:	dc07      	bgt.n	451a <MPSL_IRQ_CLOCK_Handler+0x106>
    450a:	b10d      	cbz	r5, 4510 <MPSL_IRQ_CLOCK_Handler+0xfc>
    450c:	6160      	str	r0, [r4, #20]
    450e:	e000      	b.n	4512 <MPSL_IRQ_CLOCK_Handler+0xfe>
    4510:	6120      	str	r0, [r4, #16]
    4512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4516:	f7ff bfc1 	b.w	449c <MPSL_IRQ_CLOCK_Handler+0x88>
    451a:	bd70      	pop	{r4, r5, r6, pc}
    451c:	20000038 	.word	0x20000038
    4520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4524:	4606      	mov	r6, r0
    4526:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    452a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    452e:	4628      	mov	r0, r5
    4530:	f008 fc14 	bl	cd5c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4534:	4680      	mov	r8, r0
    4536:	f44f 7188 	mov.w	r1, #272	; 0x110
    453a:	4628      	mov	r0, r5
    453c:	f008 fc0e 	bl	cd5c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4540:	4c27      	ldr	r4, [pc, #156]	; (45e0 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    4542:	4682      	mov	sl, r0
    4544:	7827      	ldrb	r7, [r4, #0]
    4546:	f104 0008 	add.w	r0, r4, #8
    454a:	f008 fc7b 	bl	ce44 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    454e:	b110      	cbz	r0, 4556 <MPSL_IRQ_CLOCK_Handler+0x142>
    4550:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    4554:	e016      	b.n	4584 <MPSL_IRQ_CLOCK_Handler+0x170>
    4556:	f04f 0901 	mov.w	r9, #1
    455a:	b146      	cbz	r6, 456e <MPSL_IRQ_CLOCK_Handler+0x15a>
    455c:	7aa0      	ldrb	r0, [r4, #10]
    455e:	2803      	cmp	r0, #3
    4560:	d105      	bne.n	456e <MPSL_IRQ_CLOCK_Handler+0x15a>
    4562:	2004      	movs	r0, #4
    4564:	72a0      	strb	r0, [r4, #10]
    4566:	f7ff ff87 	bl	4478 <MPSL_IRQ_CLOCK_Handler+0x64>
    456a:	f8c5 9010 	str.w	r9, [r5, #16]
    456e:	2600      	movs	r6, #0
    4570:	f1b8 0f00 	cmp.w	r8, #0
    4574:	d018      	beq.n	45a8 <MPSL_IRQ_CLOCK_Handler+0x194>
    4576:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    457a:	7aa0      	ldrb	r0, [r4, #10]
    457c:	2804      	cmp	r0, #4
    457e:	d004      	beq.n	458a <MPSL_IRQ_CLOCK_Handler+0x176>
    4580:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    4584:	206d      	movs	r0, #109	; 0x6d
    4586:	f000 fa9d 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    458a:	f008 fc91 	bl	ceb0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    458e:	b928      	cbnz	r0, 459c <MPSL_IRQ_CLOCK_Handler+0x188>
    4590:	f008 fcaf 	bl	cef2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4594:	b910      	cbnz	r0, 459c <MPSL_IRQ_CLOCK_Handler+0x188>
    4596:	f008 fce2 	bl	cf5e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    459a:	b108      	cbz	r0, 45a0 <MPSL_IRQ_CLOCK_Handler+0x18c>
    459c:	4811      	ldr	r0, [pc, #68]	; (45e4 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    459e:	6006      	str	r6, [r0, #0]
    45a0:	2002      	movs	r0, #2
    45a2:	72a0      	strb	r0, [r4, #10]
    45a4:	f000 f8ec 	bl	4780 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    45a8:	f1ba 0f00 	cmp.w	sl, #0
    45ac:	d008      	beq.n	45c0 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    45ae:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    45b2:	7aa0      	ldrb	r0, [r4, #10]
    45b4:	2802      	cmp	r0, #2
    45b6:	d101      	bne.n	45bc <MPSL_IRQ_CLOCK_Handler+0x1a8>
    45b8:	f7ff ff8a 	bl	44d0 <MPSL_IRQ_CLOCK_Handler+0xbc>
    45bc:	f8c5 9014 	str.w	r9, [r5, #20]
    45c0:	b13f      	cbz	r7, 45d2 <MPSL_IRQ_CLOCK_Handler+0x1be>
    45c2:	7026      	strb	r6, [r4, #0]
    45c4:	7aa0      	ldrb	r0, [r4, #10]
    45c6:	2802      	cmp	r0, #2
    45c8:	d101      	bne.n	45ce <MPSL_IRQ_CLOCK_Handler+0x1ba>
    45ca:	f7ff ff67 	bl	449c <MPSL_IRQ_CLOCK_Handler+0x88>
    45ce:	f000 f8d7 	bl	4780 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    45d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    45d6:	4802      	ldr	r0, [pc, #8]	; (45e0 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    45d8:	3008      	adds	r0, #8
    45da:	f008 bc4a 	b.w	ce72 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    45de:	0000      	.short	0x0000
    45e0:	20000038 	.word	0x20000038
    45e4:	40000c34 	.word	0x40000c34
    45e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    45ec:	4c5f      	ldr	r4, [pc, #380]	; (476c <MPSL_IRQ_CLOCK_Handler+0x358>)
    45ee:	2700      	movs	r7, #0
    45f0:	4606      	mov	r6, r0
    45f2:	61a7      	str	r7, [r4, #24]
    45f4:	7842      	ldrb	r2, [r0, #1]
    45f6:	7881      	ldrb	r1, [r0, #2]
    45f8:	7800      	ldrb	r0, [r0, #0]
    45fa:	72e0      	strb	r0, [r4, #11]
    45fc:	7162      	strb	r2, [r4, #5]
    45fe:	71a1      	strb	r1, [r4, #6]
    4600:	71e7      	strb	r7, [r4, #7]
    4602:	f04f 0801 	mov.w	r8, #1
    4606:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    460a:	2805      	cmp	r0, #5
    460c:	d225      	bcs.n	465a <MPSL_IRQ_CLOCK_Handler+0x246>
    460e:	e8df f000 	tbb	[pc, r0]
    4612:	0310      	.short	0x0310
    4614:	00222006 	.word	0x00222006
    4618:	f8c4 8018 	str.w	r8, [r4, #24]
    461c:	e009      	b.n	4632 <MPSL_IRQ_CLOCK_Handler+0x21e>
    461e:	f000 f8cb 	bl	47b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4622:	2101      	movs	r1, #1
    4624:	4628      	mov	r0, r5
    4626:	f008 fb9e 	bl	cd66 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    462a:	2800      	cmp	r0, #0
    462c:	d0f9      	beq.n	4622 <MPSL_IRQ_CLOCK_Handler+0x20e>
    462e:	2002      	movs	r0, #2
    4630:	61a0      	str	r0, [r4, #24]
    4632:	f008 fbc4 	bl	cdbe <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    4636:	b1b0      	cbz	r0, 4666 <MPSL_IRQ_CLOCK_Handler+0x252>
    4638:	f000 f9e6 	bl	4a08 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    463c:	7e21      	ldrb	r1, [r4, #24]
    463e:	f001 0103 	and.w	r1, r1, #3
    4642:	4288      	cmp	r0, r1
    4644:	d10f      	bne.n	4666 <MPSL_IRQ_CLOCK_Handler+0x252>
    4646:	79b0      	ldrb	r0, [r6, #6]
    4648:	b150      	cbz	r0, 4660 <MPSL_IRQ_CLOCK_Handler+0x24c>
    464a:	2002      	movs	r0, #2
    464c:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4650:	e070      	b.n	4734 <MPSL_IRQ_CLOCK_Handler+0x320>
    4652:	4847      	ldr	r0, [pc, #284]	; (4770 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    4654:	e7ec      	b.n	4630 <MPSL_IRQ_CLOCK_Handler+0x21c>
    4656:	4847      	ldr	r0, [pc, #284]	; (4774 <MPSL_IRQ_CLOCK_Handler+0x360>)
    4658:	e7ea      	b.n	4630 <MPSL_IRQ_CLOCK_Handler+0x21c>
    465a:	f240 312b 	movw	r1, #811	; 0x32b
    465e:	e04d      	b.n	46fc <MPSL_IRQ_CLOCK_Handler+0x2e8>
    4660:	f000 f9a6 	bl	49b0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    4664:	e066      	b.n	4734 <MPSL_IRQ_CLOCK_Handler+0x320>
    4666:	f8c5 800c 	str.w	r8, [r5, #12]
    466a:	f44f 7a82 	mov.w	sl, #260	; 0x104
    466e:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    4672:	69a0      	ldr	r0, [r4, #24]
    4674:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    4678:	f008 fc06 	bl	ce88 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    467c:	b940      	cbnz	r0, 4690 <MPSL_IRQ_CLOCK_Handler+0x27c>
    467e:	f008 fc0d 	bl	ce9c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4682:	b928      	cbnz	r0, 4690 <MPSL_IRQ_CLOCK_Handler+0x27c>
    4684:	f008 fc21 	bl	ceca <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4688:	b910      	cbnz	r0, 4690 <MPSL_IRQ_CLOCK_Handler+0x27c>
    468a:	f008 fc32 	bl	cef2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    468e:	b138      	cbz	r0, 46a0 <MPSL_IRQ_CLOCK_Handler+0x28c>
    4690:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    4694:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    4698:	4937      	ldr	r1, [pc, #220]	; (4778 <MPSL_IRQ_CLOCK_Handler+0x364>)
    469a:	f3c0 3042 	ubfx	r0, r0, #13, #3
    469e:	6008      	str	r0, [r1, #0]
    46a0:	f008 fbf2 	bl	ce88 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    46a4:	b940      	cbnz	r0, 46b8 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    46a6:	f008 fbf9 	bl	ce9c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    46aa:	b928      	cbnz	r0, 46b8 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    46ac:	f008 fc0d 	bl	ceca <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    46b0:	b910      	cbnz	r0, 46b8 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    46b2:	f008 fc1e 	bl	cef2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    46b6:	b118      	cbz	r0, 46c0 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    46b8:	492f      	ldr	r1, [pc, #188]	; (4778 <MPSL_IRQ_CLOCK_Handler+0x364>)
    46ba:	3110      	adds	r1, #16
    46bc:	f8c1 8000 	str.w	r8, [r1]
    46c0:	f8c5 8008 	str.w	r8, [r5, #8]
    46c4:	2002      	movs	r0, #2
    46c6:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    46ca:	79b0      	ldrb	r0, [r6, #6]
    46cc:	bb90      	cbnz	r0, 4734 <MPSL_IRQ_CLOCK_Handler+0x320>
    46ce:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    46d2:	f010 0f02 	tst.w	r0, #2
    46d6:	d00f      	beq.n	46f8 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    46d8:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 477c <MPSL_IRQ_CLOCK_Handler+0x368>
    46dc:	f8d9 1000 	ldr.w	r1, [r9]
    46e0:	43c9      	mvns	r1, r1
    46e2:	f341 1100 	sbfx	r1, r1, #4, #1
    46e6:	f101 0801 	add.w	r8, r1, #1
    46ea:	f8d9 1000 	ldr.w	r1, [r9]
    46ee:	f041 0110 	orr.w	r1, r1, #16
    46f2:	f8c9 1000 	str.w	r1, [r9]
    46f6:	e007      	b.n	4708 <MPSL_IRQ_CLOCK_Handler+0x2f4>
    46f8:	f44f 713b 	mov.w	r1, #748	; 0x2ec
    46fc:	206d      	movs	r0, #109	; 0x6d
    46fe:	f000 f9e1 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4702:	bf00      	nop
    4704:	f000 fb04 	bl	4d10 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4708:	4651      	mov	r1, sl
    470a:	4628      	mov	r0, r5
    470c:	f008 fb26 	bl	cd5c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4710:	2800      	cmp	r0, #0
    4712:	d0f7      	beq.n	4704 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    4714:	f000 f94c 	bl	49b0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    4718:	f1b8 0f00 	cmp.w	r8, #0
    471c:	d105      	bne.n	472a <MPSL_IRQ_CLOCK_Handler+0x316>
    471e:	f8d9 1000 	ldr.w	r1, [r9]
    4722:	f021 0110 	bic.w	r1, r1, #16
    4726:	f8c9 1000 	str.w	r1, [r9]
    472a:	2002      	movs	r0, #2
    472c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4730:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    4734:	79a0      	ldrb	r0, [r4, #6]
    4736:	b170      	cbz	r0, 4756 <MPSL_IRQ_CLOCK_Handler+0x342>
    4738:	7830      	ldrb	r0, [r6, #0]
    473a:	b960      	cbnz	r0, 4756 <MPSL_IRQ_CLOCK_Handler+0x342>
    473c:	f000 f94a 	bl	49d4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4740:	4606      	mov	r6, r0
    4742:	f000 fa2f 	bl	4ba4 <mpsl_temperature_get>
    4746:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    474a:	b116      	cbz	r6, 4752 <MPSL_IRQ_CLOCK_Handler+0x33e>
    474c:	e9c4 1004 	strd	r1, r0, [r4, #16]
    4750:	e001      	b.n	4756 <MPSL_IRQ_CLOCK_Handler+0x342>
    4752:	e9c4 0104 	strd	r0, r1, [r4, #16]
    4756:	2101      	movs	r1, #1
    4758:	4628      	mov	r0, r5
    475a:	f008 fb04 	bl	cd66 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    475e:	b108      	cbz	r0, 4764 <MPSL_IRQ_CLOCK_Handler+0x350>
    4760:	f000 f932 	bl	49c8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    4764:	72a7      	strb	r7, [r4, #10]
    4766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    476a:	0000      	.short	0x0000
    476c:	20000038 	.word	0x20000038
    4770:	00020001 	.word	0x00020001
    4774:	00030001 	.word	0x00030001
    4778:	4000053c 	.word	0x4000053c
    477c:	e000ed10 	.word	0xe000ed10

00004780 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    4780:	b510      	push	{r4, lr}
    4782:	f3ef 8410 	mrs	r4, PRIMASK
    4786:	b672      	cpsid	i
    4788:	480a      	ldr	r0, [pc, #40]	; (47b4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    478a:	7841      	ldrb	r1, [r0, #1]
    478c:	b129      	cbz	r1, 479a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    478e:	7841      	ldrb	r1, [r0, #1]
    4790:	1e49      	subs	r1, r1, #1
    4792:	7041      	strb	r1, [r0, #1]
    4794:	7841      	ldrb	r1, [r0, #1]
    4796:	b129      	cbz	r1, 47a4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    4798:	e008      	b.n	47ac <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    479a:	f240 110d 	movw	r1, #269	; 0x10d
    479e:	206d      	movs	r0, #109	; 0x6d
    47a0:	f000 f990 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    47a4:	7880      	ldrb	r0, [r0, #2]
    47a6:	b908      	cbnz	r0, 47ac <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    47a8:	f000 f922 	bl	49f0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    47ac:	2c00      	cmp	r4, #0
    47ae:	d100      	bne.n	47b2 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    47b0:	b662      	cpsie	i
    47b2:	bd10      	pop	{r4, pc}
    47b4:	20000038 	.word	0x20000038

000047b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    47b8:	b510      	push	{r4, lr}
    47ba:	f3ef 8410 	mrs	r4, PRIMASK
    47be:	b672      	cpsid	i
    47c0:	4806      	ldr	r0, [pc, #24]	; (47dc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    47c2:	7841      	ldrb	r1, [r0, #1]
    47c4:	1c49      	adds	r1, r1, #1
    47c6:	7041      	strb	r1, [r0, #1]
    47c8:	7840      	ldrb	r0, [r0, #1]
    47ca:	2801      	cmp	r0, #1
    47cc:	d101      	bne.n	47d2 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    47ce:	f008 fae1 	bl	cd94 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    47d2:	2c00      	cmp	r4, #0
    47d4:	d100      	bne.n	47d8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    47d6:	b662      	cpsie	i
    47d8:	bd10      	pop	{r4, pc}
    47da:	0000      	.short	0x0000
    47dc:	20000038 	.word	0x20000038

000047e0 <mpsl_clock_hfclk_release>:
    47e0:	4805      	ldr	r0, [pc, #20]	; (47f8 <mpsl_clock_hfclk_release+0x18>)
    47e2:	b510      	push	{r4, lr}
    47e4:	78c1      	ldrb	r1, [r0, #3]
    47e6:	b121      	cbz	r1, 47f2 <mpsl_clock_hfclk_release+0x12>
    47e8:	2100      	movs	r1, #0
    47ea:	7101      	strb	r1, [r0, #4]
    47ec:	70c1      	strb	r1, [r0, #3]
    47ee:	f7ff ffc7 	bl	4780 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    47f2:	2000      	movs	r0, #0
    47f4:	bd10      	pop	{r4, pc}
    47f6:	0000      	.short	0x0000
    47f8:	20000038 	.word	0x20000038

000047fc <mpsl_clock_hfclk_request>:
    47fc:	b570      	push	{r4, r5, r6, lr}
    47fe:	4c0c      	ldr	r4, [pc, #48]	; (4830 <mpsl_clock_hfclk_request+0x34>)
    4800:	78e1      	ldrb	r1, [r4, #3]
    4802:	b961      	cbnz	r1, 481e <mpsl_clock_hfclk_request+0x22>
    4804:	2501      	movs	r5, #1
    4806:	70e5      	strb	r5, [r4, #3]
    4808:	61e0      	str	r0, [r4, #28]
    480a:	f7ff ffd5 	bl	47b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    480e:	f000 f8e1 	bl	49d4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4812:	b130      	cbz	r0, 4822 <mpsl_clock_hfclk_request+0x26>
    4814:	69e0      	ldr	r0, [r4, #28]
    4816:	b110      	cbz	r0, 481e <mpsl_clock_hfclk_request+0x22>
    4818:	4780      	blx	r0
    481a:	2000      	movs	r0, #0
    481c:	61e0      	str	r0, [r4, #28]
    481e:	2000      	movs	r0, #0
    4820:	bd70      	pop	{r4, r5, r6, pc}
    4822:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4826:	7125      	strb	r5, [r4, #4]
    4828:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    482c:	e7f7      	b.n	481e <mpsl_clock_hfclk_request+0x22>
    482e:	0000      	.short	0x0000
    4830:	20000038 	.word	0x20000038

00004834 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    4834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4838:	0004      	movs	r4, r0
    483a:	f06f 0015 	mvn.w	r0, #21
    483e:	d03c      	beq.n	48ba <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4840:	7821      	ldrb	r1, [r4, #0]
    4842:	2904      	cmp	r1, #4
    4844:	d839      	bhi.n	48ba <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4846:	2900      	cmp	r1, #0
    4848:	7861      	ldrb	r1, [r4, #1]
    484a:	d038      	beq.n	48be <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    484c:	2900      	cmp	r1, #0
    484e:	d134      	bne.n	48ba <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4850:	78a1      	ldrb	r1, [r4, #2]
    4852:	2900      	cmp	r1, #0
    4854:	d131      	bne.n	48ba <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4856:	2000      	movs	r0, #0
    4858:	f008 fa4b 	bl	ccf2 <MPSL_IRQ_RADIO_Handler+0x1e>
    485c:	2000      	movs	r0, #0
    485e:	f008 fa3b 	bl	ccd8 <MPSL_IRQ_RADIO_Handler+0x4>
    4862:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    4866:	f04f 31ff 	mov.w	r1, #4294967295
    486a:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    486e:	2500      	movs	r5, #0
    4870:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
    4874:	f8c8 5104 	str.w	r5, [r8, #260]	; 0x104
    4878:	f8c8 510c 	str.w	r5, [r8, #268]	; 0x10c
    487c:	f8c8 5110 	str.w	r5, [r8, #272]	; 0x110
    4880:	4e13      	ldr	r6, [pc, #76]	; (48d0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x9c>)
    4882:	7075      	strb	r5, [r6, #1]
    4884:	88a0      	ldrh	r0, [r4, #4]
    4886:	81b0      	strh	r0, [r6, #12]
    4888:	f008 fa7b 	bl	cd82 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    488c:	2701      	movs	r7, #1
    488e:	b108      	cbz	r0, 4894 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    4890:	70f7      	strb	r7, [r6, #3]
    4892:	7077      	strb	r7, [r6, #1]
    4894:	2101      	movs	r1, #1
    4896:	4640      	mov	r0, r8
    4898:	f008 fa65 	bl	cd66 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    489c:	b108      	cbz	r0, 48a2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    489e:	f000 f893 	bl	49c8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    48a2:	4620      	mov	r0, r4
    48a4:	f7ff fea0 	bl	45e8 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    48a8:	7277      	strb	r7, [r6, #9]
    48aa:	2000      	movs	r0, #0
    48ac:	f008 fa14 	bl	ccd8 <MPSL_IRQ_RADIO_Handler+0x4>
    48b0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    48b4:	4628      	mov	r0, r5
    48b6:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    48ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    48be:	2900      	cmp	r1, #0
    48c0:	d0fb      	beq.n	48ba <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    48c2:	2920      	cmp	r1, #32
    48c4:	d8f9      	bhi.n	48ba <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    48c6:	78a1      	ldrb	r1, [r4, #2]
    48c8:	2921      	cmp	r1, #33	; 0x21
    48ca:	d9c4      	bls.n	4856 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    48cc:	e7f5      	b.n	48ba <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    48ce:	0000      	.short	0x0000
    48d0:	20000038 	.word	0x20000038

000048d4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    48d4:	4801      	ldr	r0, [pc, #4]	; (48dc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    48d6:	8980      	ldrh	r0, [r0, #12]
    48d8:	4770      	bx	lr
    48da:	0000      	.short	0x0000
    48dc:	20000038 	.word	0x20000038

000048e0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    48e0:	b510      	push	{r4, lr}
    48e2:	480d      	ldr	r0, [pc, #52]	; (4918 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    48e4:	f008 faae 	bl	ce44 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    48e8:	490b      	ldr	r1, [pc, #44]	; (4918 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    48ea:	3908      	subs	r1, #8
    48ec:	b148      	cbz	r0, 4902 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    48ee:	2001      	movs	r0, #1
    48f0:	7008      	strb	r0, [r1, #0]
    48f2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    48f6:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    48fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    48fe:	f7ff bf5b 	b.w	47b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4902:	7a88      	ldrb	r0, [r1, #10]
    4904:	2802      	cmp	r0, #2
    4906:	d101      	bne.n	490c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    4908:	f7ff fdc8 	bl	449c <MPSL_IRQ_CLOCK_Handler+0x88>
    490c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4910:	4801      	ldr	r0, [pc, #4]	; (4918 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4912:	f008 baae 	b.w	ce72 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4916:	0000      	.short	0x0000
    4918:	20000040 	.word	0x20000040

0000491c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    491c:	4802      	ldr	r0, [pc, #8]	; (4928 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    491e:	7a80      	ldrb	r0, [r0, #10]
    4920:	2800      	cmp	r0, #0
    4922:	d000      	beq.n	4926 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    4924:	2001      	movs	r0, #1
    4926:	4770      	bx	lr
    4928:	20000038 	.word	0x20000038

0000492c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    492e:	4d1f      	ldr	r5, [pc, #124]	; (49ac <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4930:	7ae8      	ldrb	r0, [r5, #11]
    4932:	2800      	cmp	r0, #0
    4934:	d10f      	bne.n	4956 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4936:	7e28      	ldrb	r0, [r5, #24]
    4938:	f000 0003 	and.w	r0, r0, #3
    493c:	f008 fa2f 	bl	cd9e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4940:	2800      	cmp	r0, #0
    4942:	d008      	beq.n	4956 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4944:	f3ef 8110 	mrs	r1, PRIMASK
    4948:	b672      	cpsid	i
    494a:	f7ff ffe7 	bl	491c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    494e:	b118      	cbz	r0, 4958 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    4950:	2900      	cmp	r1, #0
    4952:	d100      	bne.n	4956 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4954:	b662      	cpsie	i
    4956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4958:	2601      	movs	r6, #1
    495a:	72ae      	strb	r6, [r5, #10]
    495c:	b901      	cbnz	r1, 4960 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    495e:	b662      	cpsie	i
    4960:	2018      	movs	r0, #24
    4962:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4966:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    496a:	61a6      	str	r6, [r4, #24]
    496c:	f44f 7020 	mov.w	r0, #640	; 0x280
    4970:	f8ad 0000 	strh.w	r0, [sp]
    4974:	f8bd 0000 	ldrh.w	r0, [sp]
    4978:	1e41      	subs	r1, r0, #1
    497a:	f8ad 1000 	strh.w	r1, [sp]
    497e:	d2f9      	bcs.n	4974 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    4980:	2700      	movs	r7, #0
    4982:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    4986:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    498a:	4808      	ldr	r0, [pc, #32]	; (49ac <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    498c:	3008      	adds	r0, #8
    498e:	f008 fa6c 	bl	ce6a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4992:	702f      	strb	r7, [r5, #0]
    4994:	f7ff fd82 	bl	449c <MPSL_IRQ_CLOCK_Handler+0x88>
    4998:	6166      	str	r6, [r4, #20]
    499a:	7968      	ldrb	r0, [r5, #5]
    499c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    49a0:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    49a4:	2018      	movs	r0, #24
    49a6:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    49aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49ac:	20000038 	.word	0x20000038

000049b0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    49b0:	b510      	push	{r4, lr}
    49b2:	4c04      	ldr	r4, [pc, #16]	; (49c4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    49b4:	7e20      	ldrb	r0, [r4, #24]
    49b6:	f000 0003 	and.w	r0, r0, #3
    49ba:	f008 f9f0 	bl	cd9e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    49be:	2800      	cmp	r0, #0
    49c0:	d0f8      	beq.n	49b4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    49c2:	bd10      	pop	{r4, pc}
    49c4:	20000038 	.word	0x20000038

000049c8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    49c8:	4901      	ldr	r1, [pc, #4]	; (49d0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    49ca:	2001      	movs	r0, #1
    49cc:	7008      	strb	r0, [r1, #0]
    49ce:	4770      	bx	lr
    49d0:	200002ac 	.word	0x200002ac

000049d4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    49d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    49d8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    49dc:	b918      	cbnz	r0, 49e6 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    49de:	4803      	ldr	r0, [pc, #12]	; (49ec <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    49e0:	7800      	ldrb	r0, [r0, #0]
    49e2:	2800      	cmp	r0, #0
    49e4:	d000      	beq.n	49e8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    49e6:	2001      	movs	r0, #1
    49e8:	4770      	bx	lr
    49ea:	0000      	.short	0x0000
    49ec:	200002ac 	.word	0x200002ac

000049f0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    49f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    49f4:	2101      	movs	r1, #1
    49f6:	6041      	str	r1, [r0, #4]
    49f8:	2100      	movs	r1, #0
    49fa:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    49fe:	4801      	ldr	r0, [pc, #4]	; (4a04 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    4a00:	7001      	strb	r1, [r0, #0]
    4a02:	4770      	bx	lr
    4a04:	200002ac 	.word	0x200002ac

00004a08 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    4a08:	4802      	ldr	r0, [pc, #8]	; (4a14 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    4a0a:	6800      	ldr	r0, [r0, #0]
    4a0c:	f000 0003 	and.w	r0, r0, #3
    4a10:	4770      	bx	lr
    4a12:	0000      	.short	0x0000
    4a14:	4000041c 	.word	0x4000041c
    4a18:	b510      	push	{r4, lr}
    4a1a:	b131      	cbz	r1, 4a2a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    4a1c:	2901      	cmp	r1, #1
    4a1e:	d007      	beq.n	4a30 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    4a20:	f240 3102 	movw	r1, #770	; 0x302
    4a24:	a005      	add	r0, pc, #20	; (adr r0, 4a3c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    4a26:	f000 f821 	bl	4a6c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    4a2a:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    4a2e:	e001      	b.n	4a34 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    4a30:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    4a34:	f000 0001 	and.w	r0, r0, #1
    4a38:	bd10      	pop	{r4, pc}
    4a3a:	0000      	.short	0x0000
    4a3c:	5f66726e 	.word	0x5f66726e
    4a40:	636f6c63 	.word	0x636f6c63
    4a44:	00682e6b 	.word	0x00682e6b
    4a48:	f3bf 8f4f 	dsb	sy
    4a4c:	4805      	ldr	r0, [pc, #20]	; (4a64 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    4a4e:	6801      	ldr	r1, [r0, #0]
    4a50:	4a05      	ldr	r2, [pc, #20]	; (4a68 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    4a52:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4a56:	4311      	orrs	r1, r2
    4a58:	6001      	str	r1, [r0, #0]
    4a5a:	f3bf 8f4f 	dsb	sy
    4a5e:	bf00      	nop
    4a60:	e7fd      	b.n	4a5e <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    4a62:	0000      	.short	0x0000
    4a64:	e000ed0c 	.word	0xe000ed0c
    4a68:	05fa0004 	.word	0x05fa0004

00004a6c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    4a6c:	b672      	cpsid	i
    4a6e:	4a03      	ldr	r2, [pc, #12]	; (4a7c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    4a70:	6852      	ldr	r2, [r2, #4]
    4a72:	b102      	cbz	r2, 4a76 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    4a74:	4790      	blx	r2
    4a76:	f7ff ffe7 	bl	4a48 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    4a7a:	0000      	.short	0x0000
    4a7c:	20000058 	.word	0x20000058
    4a80:	4806      	ldr	r0, [pc, #24]	; (4a9c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    4a82:	b510      	push	{r4, lr}
    4a84:	2100      	movs	r1, #0
    4a86:	6001      	str	r1, [r0, #0]
    4a88:	2101      	movs	r1, #1
    4a8a:	6001      	str	r1, [r0, #0]
    4a8c:	4608      	mov	r0, r1
    4a8e:	f008 f9ad 	bl	cdec <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    4a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4a96:	2001      	movs	r0, #1
    4a98:	f008 b99b 	b.w	cdd2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4a9c:	40001ffc 	.word	0x40001ffc
    4aa0:	4807      	ldr	r0, [pc, #28]	; (4ac0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    4aa2:	b510      	push	{r4, lr}
    4aa4:	2101      	movs	r1, #1
    4aa6:	6041      	str	r1, [r0, #4]
    4aa8:	1e89      	subs	r1, r1, #2
    4aaa:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    4aae:	200c      	movs	r0, #12
    4ab0:	f008 f99c 	bl	cdec <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    4ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4ab8:	200c      	movs	r0, #12
    4aba:	f008 b98a 	b.w	cdd2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4abe:	0000      	.short	0x0000
    4ac0:	4000c000 	.word	0x4000c000

00004ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    4ac4:	b50e      	push	{r1, r2, r3, lr}
    4ac6:	b672      	cpsid	i
    4ac8:	4a0f      	ldr	r2, [pc, #60]	; (4b08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    4aca:	6855      	ldr	r5, [r2, #4]
    4acc:	b1d5      	cbz	r5, 4b04 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    4ace:	2200      	movs	r2, #0
    4ad0:	4603      	mov	r3, r0
    4ad2:	466e      	mov	r6, sp
    4ad4:	240a      	movs	r4, #10
    4ad6:	e003      	b.n	4ae0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    4ad8:	fbb0 f0f4 	udiv	r0, r0, r4
    4adc:	1c52      	adds	r2, r2, #1
    4ade:	b2d2      	uxtb	r2, r2
    4ae0:	2800      	cmp	r0, #0
    4ae2:	d1f9      	bne.n	4ad8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    4ae4:	54b0      	strb	r0, [r6, r2]
    4ae6:	e009      	b.n	4afc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    4ae8:	fbb3 f0f4 	udiv	r0, r3, r4
    4aec:	fb04 3010 	mls	r0, r4, r0, r3
    4af0:	fbb3 f3f4 	udiv	r3, r3, r4
    4af4:	1e52      	subs	r2, r2, #1
    4af6:	b2d2      	uxtb	r2, r2
    4af8:	3030      	adds	r0, #48	; 0x30
    4afa:	54b0      	strb	r0, [r6, r2]
    4afc:	2a00      	cmp	r2, #0
    4afe:	d1f3      	bne.n	4ae8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    4b00:	4630      	mov	r0, r6
    4b02:	47a8      	blx	r5
    4b04:	f7ff ffa0 	bl	4a48 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    4b08:	20000058 	.word	0x20000058

00004b0c <mpsl_init>:
    4b0c:	b570      	push	{r4, r5, r6, lr}
    4b0e:	4c17      	ldr	r4, [pc, #92]	; (4b6c <mpsl_init+0x60>)
    4b10:	4606      	mov	r6, r0
    4b12:	460d      	mov	r5, r1
    4b14:	7860      	ldrb	r0, [r4, #1]
    4b16:	b110      	cbz	r0, 4b1e <mpsl_init+0x12>
    4b18:	f04f 30ff 	mov.w	r0, #4294967295
    4b1c:	bd70      	pop	{r4, r5, r6, pc}
    4b1e:	b906      	cbnz	r6, 4b22 <mpsl_init+0x16>
    4b20:	4e13      	ldr	r6, [pc, #76]	; (4b70 <mpsl_init+0x64>)
    4b22:	6062      	str	r2, [r4, #4]
    4b24:	7025      	strb	r5, [r4, #0]
    4b26:	f7ff ffab 	bl	4a80 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    4b2a:	f7ff ffb9 	bl	4aa0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    4b2e:	4630      	mov	r0, r6
    4b30:	f7ff fe80 	bl	4834 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    4b34:	0006      	movs	r6, r0
    4b36:	d1f1      	bne.n	4b1c <mpsl_init+0x10>
    4b38:	f7fe feec 	bl	3914 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    4b3c:	f7ff fef6 	bl	492c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    4b40:	f008 f8a1 	bl	cc86 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    4b44:	4628      	mov	r0, r5
    4b46:	f008 f944 	bl	cdd2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4b4a:	2001      	movs	r0, #1
    4b4c:	2d00      	cmp	r5, #0
    4b4e:	db09      	blt.n	4b64 <mpsl_init+0x58>
    4b50:	f005 011f 	and.w	r1, r5, #31
    4b54:	fa00 f101 	lsl.w	r1, r0, r1
    4b58:	096a      	lsrs	r2, r5, #5
    4b5a:	0092      	lsls	r2, r2, #2
    4b5c:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4b60:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    4b64:	7060      	strb	r0, [r4, #1]
    4b66:	4630      	mov	r0, r6
    4b68:	bd70      	pop	{r4, r5, r6, pc}
    4b6a:	0000      	.short	0x0000
    4b6c:	20000058 	.word	0x20000058
    4b70:	0000ce0e 	.word	0x0000ce0e

00004b74 <mpsl_is_initialized>:
    4b74:	4801      	ldr	r0, [pc, #4]	; (4b7c <mpsl_is_initialized+0x8>)
    4b76:	7840      	ldrb	r0, [r0, #1]
    4b78:	4770      	bx	lr
    4b7a:	0000      	.short	0x0000
    4b7c:	20000058 	.word	0x20000058

00004b80 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    4b80:	4807      	ldr	r0, [pc, #28]	; (4ba0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    4b82:	f990 0000 	ldrsb.w	r0, [r0]
    4b86:	2800      	cmp	r0, #0
    4b88:	db09      	blt.n	4b9e <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    4b8a:	f000 021f 	and.w	r2, r0, #31
    4b8e:	2101      	movs	r1, #1
    4b90:	4091      	lsls	r1, r2
    4b92:	0940      	lsrs	r0, r0, #5
    4b94:	0080      	lsls	r0, r0, #2
    4b96:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    4b9a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4b9e:	4770      	bx	lr
    4ba0:	20000058 	.word	0x20000058

00004ba4 <mpsl_temperature_get>:
    4ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ba8:	2601      	movs	r6, #1
    4baa:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4bae:	0331      	lsls	r1, r6, #12
    4bb0:	f04f 0800 	mov.w	r8, #0
    4bb4:	4640      	mov	r0, r8
    4bb6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    4bba:	f3bf 8f4f 	dsb	sy
    4bbe:	f3bf 8f6f 	isb	sy
    4bc2:	4c16      	ldr	r4, [pc, #88]	; (4c1c <mpsl_temperature_get+0x78>)
    4bc4:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    4bc8:	200c      	movs	r0, #12
    4bca:	f008 f92e 	bl	ce2a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    4bce:	4d14      	ldr	r5, [pc, #80]	; (4c20 <mpsl_temperature_get+0x7c>)
    4bd0:	6828      	ldr	r0, [r5, #0]
    4bd2:	43c0      	mvns	r0, r0
    4bd4:	f340 1700 	sbfx	r7, r0, #4, #1
    4bd8:	6828      	ldr	r0, [r5, #0]
    4bda:	f040 0010 	orr.w	r0, r0, #16
    4bde:	6028      	str	r0, [r5, #0]
    4be0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    4be4:	6026      	str	r6, [r4, #0]
    4be6:	1c7f      	adds	r7, r7, #1
    4be8:	e002      	b.n	4bf0 <mpsl_temperature_get+0x4c>
    4bea:	bf00      	nop
    4bec:	f000 f890 	bl	4d10 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4bf0:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4bf4:	2800      	cmp	r0, #0
    4bf6:	d0f9      	beq.n	4bec <mpsl_temperature_get+0x48>
    4bf8:	b91f      	cbnz	r7, 4c02 <mpsl_temperature_get+0x5e>
    4bfa:	6828      	ldr	r0, [r5, #0]
    4bfc:	f020 0010 	bic.w	r0, r0, #16
    4c00:	6028      	str	r0, [r5, #0]
    4c02:	4808      	ldr	r0, [pc, #32]	; (4c24 <mpsl_temperature_get+0x80>)
    4c04:	6805      	ldr	r5, [r0, #0]
    4c06:	6066      	str	r6, [r4, #4]
    4c08:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    4c0c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4c10:	200c      	movs	r0, #12
    4c12:	f008 f90a 	bl	ce2a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    4c16:	4628      	mov	r0, r5
    4c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c1c:	4000c000 	.word	0x4000c000
    4c20:	e000ed10 	.word	0xe000ed10
    4c24:	4000c508 	.word	0x4000c508

00004c28 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    4c28:	b510      	push	{r4, lr}
    4c2a:	4602      	mov	r2, r0
    4c2c:	2005      	movs	r0, #5
    4c2e:	490c      	ldr	r1, [pc, #48]	; (4c60 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    4c30:	e004      	b.n	4c3c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    4c32:	bf00      	nop
    4c34:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    4c38:	791b      	ldrb	r3, [r3, #4]
    4c3a:	b133      	cbz	r3, 4c4a <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    4c3c:	1e40      	subs	r0, r0, #1
    4c3e:	b2c0      	uxtb	r0, r0
    4c40:	d2f8      	bcs.n	4c34 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    4c42:	2148      	movs	r1, #72	; 0x48
    4c44:	2069      	movs	r0, #105	; 0x69
    4c46:	f7ff ff3d 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4c4a:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    4c4e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    4c52:	2200      	movs	r2, #0
    4c54:	714a      	strb	r2, [r1, #5]
    4c56:	718a      	strb	r2, [r1, #6]
    4c58:	2201      	movs	r2, #1
    4c5a:	710a      	strb	r2, [r1, #4]
    4c5c:	bd10      	pop	{r4, pc}
    4c5e:	0000      	.short	0x0000
    4c60:	200011f4 	.word	0x200011f4

00004c64 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    4c64:	b510      	push	{r4, lr}
    4c66:	2805      	cmp	r0, #5
    4c68:	d301      	bcc.n	4c6e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    4c6a:	2158      	movs	r1, #88	; 0x58
    4c6c:	e006      	b.n	4c7c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    4c6e:	490a      	ldr	r1, [pc, #40]	; (4c98 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    4c70:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    4c74:	7901      	ldrb	r1, [r0, #4]
    4c76:	2901      	cmp	r1, #1
    4c78:	d003      	beq.n	4c82 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    4c7a:	2159      	movs	r1, #89	; 0x59
    4c7c:	2069      	movs	r0, #105	; 0x69
    4c7e:	f7ff ff21 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4c82:	7941      	ldrb	r1, [r0, #5]
    4c84:	7982      	ldrb	r2, [r0, #6]
    4c86:	1c49      	adds	r1, r1, #1
    4c88:	b2c9      	uxtb	r1, r1
    4c8a:	428a      	cmp	r2, r1
    4c8c:	d000      	beq.n	4c90 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    4c8e:	7141      	strb	r1, [r0, #5]
    4c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4c94:	f7ff bf74 	b.w	4b80 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    4c98:	200011f4 	.word	0x200011f4

00004c9c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    4c9c:	b570      	push	{r4, r5, r6, lr}
    4c9e:	2505      	movs	r5, #5
    4ca0:	4e0e      	ldr	r6, [pc, #56]	; (4cdc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    4ca2:	4c0f      	ldr	r4, [pc, #60]	; (4ce0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    4ca4:	e016      	b.n	4cd4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4ca6:	7821      	ldrb	r1, [r4, #0]
    4ca8:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    4cac:	7902      	ldrb	r2, [r0, #4]
    4cae:	2a01      	cmp	r2, #1
    4cb0:	d108      	bne.n	4cc4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4cb2:	7942      	ldrb	r2, [r0, #5]
    4cb4:	7983      	ldrb	r3, [r0, #6]
    4cb6:	429a      	cmp	r2, r3
    4cb8:	d004      	beq.n	4cc4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4cba:	7942      	ldrb	r2, [r0, #5]
    4cbc:	7182      	strb	r2, [r0, #6]
    4cbe:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    4cc2:	4780      	blx	r0
    4cc4:	7820      	ldrb	r0, [r4, #0]
    4cc6:	1c40      	adds	r0, r0, #1
    4cc8:	b2c0      	uxtb	r0, r0
    4cca:	7020      	strb	r0, [r4, #0]
    4ccc:	2805      	cmp	r0, #5
    4cce:	d301      	bcc.n	4cd4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4cd0:	2000      	movs	r0, #0
    4cd2:	7020      	strb	r0, [r4, #0]
    4cd4:	1e6d      	subs	r5, r5, #1
    4cd6:	b2ed      	uxtb	r5, r5
    4cd8:	d2e5      	bcs.n	4ca6 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    4cda:	bd70      	pop	{r4, r5, r6, pc}
    4cdc:	200011f4 	.word	0x200011f4
    4ce0:	200002ad 	.word	0x200002ad

00004ce4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    4ce4:	b500      	push	{lr}
    4ce6:	f008 f8cf 	bl	ce88 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4cea:	b940      	cbnz	r0, 4cfe <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4cec:	f008 f8d6 	bl	ce9c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4cf0:	b928      	cbnz	r0, 4cfe <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4cf2:	f008 f8ea 	bl	ceca <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4cf6:	b910      	cbnz	r0, 4cfe <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4cf8:	f008 f8fb 	bl	cef2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4cfc:	b108      	cbz	r0, 4d02 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    4cfe:	4802      	ldr	r0, [pc, #8]	; (4d08 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    4d00:	bd00      	pop	{pc}
    4d02:	4802      	ldr	r0, [pc, #8]	; (4d0c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    4d04:	bd00      	pop	{pc}
    4d06:	0000      	.short	0x0000
    4d08:	4000050c 	.word	0x4000050c
    4d0c:	4001e700 	.word	0x4001e700

00004d10 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    4d10:	b510      	push	{r4, lr}
    4d12:	f008 f8ee 	bl	cef2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4d16:	b330      	cbz	r0, 4d66 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    4d18:	f3ef 8010 	mrs	r0, PRIMASK
    4d1c:	b1c8      	cbz	r0, 4d52 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    4d1e:	2100      	movs	r1, #0
    4d20:	b672      	cpsid	i
    4d22:	4812      	ldr	r0, [pc, #72]	; (4d6c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    4d24:	6802      	ldr	r2, [r0, #0]
    4d26:	6803      	ldr	r3, [r0, #0]
    4d28:	f3c2 1200 	ubfx	r2, r2, #4, #1
    4d2c:	f043 0310 	orr.w	r3, r3, #16
    4d30:	6003      	str	r3, [r0, #0]
    4d32:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4d36:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    4d3a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    4d3e:	431c      	orrs	r4, r3
    4d40:	d000      	beq.n	4d44 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    4d42:	bf40      	sev
    4d44:	bf20      	wfe
    4d46:	bf00      	nop
    4d48:	bf00      	nop
    4d4a:	bf00      	nop
    4d4c:	bf00      	nop
    4d4e:	b112      	cbz	r2, 4d56 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    4d50:	e005      	b.n	4d5e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    4d52:	2101      	movs	r1, #1
    4d54:	e7e4      	b.n	4d20 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    4d56:	6802      	ldr	r2, [r0, #0]
    4d58:	f022 0210 	bic.w	r2, r2, #16
    4d5c:	6002      	str	r2, [r0, #0]
    4d5e:	2900      	cmp	r1, #0
    4d60:	d000      	beq.n	4d64 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    4d62:	b662      	cpsie	i
    4d64:	bd10      	pop	{r4, pc}
    4d66:	bf20      	wfe
    4d68:	bd10      	pop	{r4, pc}
    4d6a:	0000      	.short	0x0000
    4d6c:	e000ed10 	.word	0xe000ed10

00004d70 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    4d70:	4901      	ldr	r1, [pc, #4]	; (4d78 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    4d72:	2001      	movs	r0, #1
    4d74:	7088      	strb	r0, [r1, #2]
    4d76:	4770      	bx	lr
    4d78:	20000060 	.word	0x20000060

00004d7c <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    4d7c:	0000d163 0000d193 0000d17f 0000d16d     c...........m...
    4d8c:	0000d179 0000d167 0000d161 0000d15f     y...g...a..._...
    4d9c:	0000d18f 0000d185 0000d173 0000d159     ........s...Y...
    4dac:	0000d151 0000d155 0000d14b              Q...U...K...

00004db8 <mpsl_fem_disable>:
    4db8:	4801      	ldr	r0, [pc, #4]	; (4dc0 <mpsl_fem_disable+0x8>)
    4dba:	6800      	ldr	r0, [r0, #0]
    4dbc:	6800      	ldr	r0, [r0, #0]
    4dbe:	4700      	bx	r0
    4dc0:	20000074 	.word	0x20000074

00004dc4 <mpsl_fem_lna_configuration_clear>:
    4dc4:	4801      	ldr	r0, [pc, #4]	; (4dcc <mpsl_fem_lna_configuration_clear+0x8>)
    4dc6:	6800      	ldr	r0, [r0, #0]
    4dc8:	6940      	ldr	r0, [r0, #20]
    4dca:	4700      	bx	r0
    4dcc:	20000074 	.word	0x20000074

00004dd0 <mpsl_fem_lna_configuration_set>:
    4dd0:	4a01      	ldr	r2, [pc, #4]	; (4dd8 <mpsl_fem_lna_configuration_set+0x8>)
    4dd2:	6812      	ldr	r2, [r2, #0]
    4dd4:	68d2      	ldr	r2, [r2, #12]
    4dd6:	4710      	bx	r2
    4dd8:	20000074 	.word	0x20000074

00004ddc <mpsl_fem_pa_configuration_clear>:
    4ddc:	4801      	ldr	r0, [pc, #4]	; (4de4 <mpsl_fem_pa_configuration_clear+0x8>)
    4dde:	6800      	ldr	r0, [r0, #0]
    4de0:	6900      	ldr	r0, [r0, #16]
    4de2:	4700      	bx	r0
    4de4:	20000074 	.word	0x20000074

00004de8 <mpsl_fem_pa_configuration_set>:
    4de8:	4a01      	ldr	r2, [pc, #4]	; (4df0 <mpsl_fem_pa_configuration_set+0x8>)
    4dea:	6812      	ldr	r2, [r2, #0]
    4dec:	6892      	ldr	r2, [r2, #8]
    4dee:	4710      	bx	r2
    4df0:	20000074 	.word	0x20000074

00004df4 <mpsl_fem_pa_is_configured>:
    4df4:	4901      	ldr	r1, [pc, #4]	; (4dfc <mpsl_fem_pa_is_configured+0x8>)
    4df6:	6809      	ldr	r1, [r1, #0]
    4df8:	6a89      	ldr	r1, [r1, #40]	; 0x28
    4dfa:	4708      	bx	r1
    4dfc:	20000074 	.word	0x20000074

00004e00 <mpsl_fem_device_config_254_apply_get>:
    4e00:	4801      	ldr	r0, [pc, #4]	; (4e08 <mpsl_fem_device_config_254_apply_get+0x8>)
    4e02:	7800      	ldrb	r0, [r0, #0]
    4e04:	4770      	bx	lr
    4e06:	0000      	.short	0x0000
    4e08:	200002ae 	.word	0x200002ae
    4e0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4e0e:	4c17      	ldr	r4, [pc, #92]	; (4e6c <mpsl_fem_device_config_254_apply_get+0x6c>)
    4e10:	7a20      	ldrb	r0, [r4, #8]
    4e12:	2802      	cmp	r0, #2
    4e14:	d200      	bcs.n	4e18 <mpsl_fem_device_config_254_apply_get+0x18>
    4e16:	2002      	movs	r0, #2
    4e18:	f88d 0001 	strb.w	r0, [sp, #1]
    4e1c:	79e0      	ldrb	r0, [r4, #7]
    4e1e:	2803      	cmp	r0, #3
    4e20:	d200      	bcs.n	4e24 <mpsl_fem_device_config_254_apply_get+0x24>
    4e22:	2003      	movs	r0, #3
    4e24:	f88d 0000 	strb.w	r0, [sp]
    4e28:	79a0      	ldrb	r0, [r4, #6]
    4e2a:	f8ad 0004 	strh.w	r0, [sp, #4]
    4e2e:	7960      	ldrb	r0, [r4, #5]
    4e30:	f8ad 0002 	strh.w	r0, [sp, #2]
    4e34:	4668      	mov	r0, sp
    4e36:	f006 f9bb 	bl	b1b0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    4e3a:	b108      	cbz	r0, 4e40 <mpsl_fem_device_config_254_apply_get+0x40>
    4e3c:	2183      	movs	r1, #131	; 0x83
    4e3e:	e010      	b.n	4e62 <mpsl_fem_device_config_254_apply_get+0x62>
    4e40:	68e0      	ldr	r0, [r4, #12]
    4e42:	9002      	str	r0, [sp, #8]
    4e44:	a802      	add	r0, sp, #8
    4e46:	f006 f9c9 	bl	b1dc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    4e4a:	b108      	cbz	r0, 4e50 <mpsl_fem_device_config_254_apply_get+0x50>
    4e4c:	2187      	movs	r1, #135	; 0x87
    4e4e:	e008      	b.n	4e62 <mpsl_fem_device_config_254_apply_get+0x62>
    4e50:	4807      	ldr	r0, [pc, #28]	; (4e70 <mpsl_fem_device_config_254_apply_get+0x70>)
    4e52:	6800      	ldr	r0, [r0, #0]
    4e54:	9003      	str	r0, [sp, #12]
    4e56:	a803      	add	r0, sp, #12
    4e58:	f00b fa83 	bl	10362 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    4e5c:	2800      	cmp	r0, #0
    4e5e:	d003      	beq.n	4e68 <mpsl_fem_device_config_254_apply_get+0x68>
    4e60:	218b      	movs	r1, #139	; 0x8b
    4e62:	2003      	movs	r0, #3
    4e64:	f000 f8e2 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e68:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    4e6a:	0000      	.short	0x0000
    4e6c:	2000121c 	.word	0x2000121c
    4e70:	00005114 	.word	0x00005114

00004e74 <sdc_build_revision_get>:
    4e74:	b510      	push	{r4, lr}
    4e76:	b128      	cbz	r0, 4e84 <sdc_build_revision_get+0x10>
    4e78:	2214      	movs	r2, #20
    4e7a:	4904      	ldr	r1, [pc, #16]	; (4e8c <sdc_build_revision_get+0x18>)
    4e7c:	f008 f88b 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4e80:	2000      	movs	r0, #0
    4e82:	bd10      	pop	{r4, pc}
    4e84:	f06f 0015 	mvn.w	r0, #21
    4e88:	bd10      	pop	{r4, pc}
    4e8a:	0000      	.short	0x0000
    4e8c:	00005130 	.word	0x00005130

00004e90 <sdc_cfg_set>:
    4e90:	b570      	push	{r4, r5, r6, lr}
    4e92:	0003      	movs	r3, r0
    4e94:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    4e98:	d103      	bne.n	4ea2 <sdc_cfg_set+0x12>
    4e9a:	4c29      	ldr	r4, [pc, #164]	; (4f40 <sdc_cfg_set+0xb0>)
    4e9c:	7863      	ldrb	r3, [r4, #1]
    4e9e:	b10b      	cbz	r3, 4ea4 <sdc_cfg_set+0x14>
    4ea0:	1180      	asrs	r0, r0, #6
    4ea2:	bd70      	pop	{r4, r5, r6, pc}
    4ea4:	b309      	cbz	r1, 4eea <sdc_cfg_set+0x5a>
    4ea6:	f06f 0515 	mvn.w	r5, #21
    4eaa:	b37a      	cbz	r2, 4f0c <sdc_cfg_set+0x7c>
    4eac:	4b25      	ldr	r3, [pc, #148]	; (4f44 <sdc_cfg_set+0xb4>)
    4eae:	290c      	cmp	r1, #12
    4eb0:	d241      	bcs.n	4f36 <sdc_cfg_set+0xa6>
    4eb2:	e8df f001 	tbb	[pc, r1]
    4eb6:	0640      	.short	0x0640
    4eb8:	13100c09 	.word	0x13100c09
    4ebc:	2616231b 	.word	0x2616231b
    4ec0:	312c      	.short	0x312c
    4ec2:	7810      	ldrb	r0, [r2, #0]
    4ec4:	7018      	strb	r0, [r3, #0]
    4ec6:	e02b      	b.n	4f20 <sdc_cfg_set+0x90>
    4ec8:	7810      	ldrb	r0, [r2, #0]
    4eca:	7058      	strb	r0, [r3, #1]
    4ecc:	e028      	b.n	4f20 <sdc_cfg_set+0x90>
    4ece:	6810      	ldr	r0, [r2, #0]
    4ed0:	f8c3 0005 	str.w	r0, [r3, #5]
    4ed4:	e024      	b.n	4f20 <sdc_cfg_set+0x90>
    4ed6:	6810      	ldr	r0, [r2, #0]
    4ed8:	60d8      	str	r0, [r3, #12]
    4eda:	e021      	b.n	4f20 <sdc_cfg_set+0x90>
    4edc:	7810      	ldrb	r0, [r2, #0]
    4ede:	7098      	strb	r0, [r3, #2]
    4ee0:	e01e      	b.n	4f20 <sdc_cfg_set+0x90>
    4ee2:	7811      	ldrb	r1, [r2, #0]
    4ee4:	2900      	cmp	r1, #0
    4ee6:	d1dc      	bne.n	4ea2 <sdc_cfg_set+0x12>
    4ee8:	70d9      	strb	r1, [r3, #3]
    4eea:	e019      	b.n	4f20 <sdc_cfg_set+0x90>
    4eec:	78e0      	ldrb	r0, [r4, #3]
    4eee:	b110      	cbz	r0, 4ef6 <sdc_cfg_set+0x66>
    4ef0:	7810      	ldrb	r0, [r2, #0]
    4ef2:	2802      	cmp	r0, #2
    4ef4:	d31f      	bcc.n	4f36 <sdc_cfg_set+0xa6>
    4ef6:	7810      	ldrb	r0, [r2, #0]
    4ef8:	7418      	strb	r0, [r3, #16]
    4efa:	e011      	b.n	4f20 <sdc_cfg_set+0x90>
    4efc:	8810      	ldrh	r0, [r2, #0]
    4efe:	8258      	strh	r0, [r3, #18]
    4f00:	e00e      	b.n	4f20 <sdc_cfg_set+0x90>
    4f02:	7811      	ldrb	r1, [r2, #0]
    4f04:	2900      	cmp	r1, #0
    4f06:	d1cc      	bne.n	4ea2 <sdc_cfg_set+0x12>
    4f08:	7119      	strb	r1, [r3, #4]
    4f0a:	e009      	b.n	4f20 <sdc_cfg_set+0x90>
    4f0c:	e013      	b.n	4f36 <sdc_cfg_set+0xa6>
    4f0e:	7810      	ldrb	r0, [r2, #0]
    4f10:	2802      	cmp	r0, #2
    4f12:	d310      	bcc.n	4f36 <sdc_cfg_set+0xa6>
    4f14:	7518      	strb	r0, [r3, #20]
    4f16:	e003      	b.n	4f20 <sdc_cfg_set+0x90>
    4f18:	7811      	ldrb	r1, [r2, #0]
    4f1a:	2900      	cmp	r1, #0
    4f1c:	d1c1      	bne.n	4ea2 <sdc_cfg_set+0x12>
    4f1e:	7559      	strb	r1, [r3, #21]
    4f20:	2201      	movs	r2, #1
    4f22:	4908      	ldr	r1, [pc, #32]	; (4f44 <sdc_cfg_set+0xb4>)
    4f24:	2000      	movs	r0, #0
    4f26:	f008 f955 	bl	d1d4 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x28>
    4f2a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    4f2e:	db04      	blt.n	4f3a <sdc_cfg_set+0xaa>
    4f30:	f06f 000b 	mvn.w	r0, #11
    4f34:	bd70      	pop	{r4, r5, r6, pc}
    4f36:	4628      	mov	r0, r5
    4f38:	bd70      	pop	{r4, r5, r6, pc}
    4f3a:	2101      	movs	r1, #1
    4f3c:	70a1      	strb	r1, [r4, #2]
    4f3e:	bd70      	pop	{r4, r5, r6, pc}
    4f40:	20000078 	.word	0x20000078
    4f44:	2000121c 	.word	0x2000121c

00004f48 <sdc_enable>:
    4f48:	b570      	push	{r4, r5, r6, lr}
    4f4a:	460c      	mov	r4, r1
    4f4c:	0005      	movs	r5, r0
    4f4e:	d019      	beq.n	4f84 <sdc_enable+0x3c>
    4f50:	b1c4      	cbz	r4, 4f84 <sdc_enable+0x3c>
    4f52:	f000 f913 	bl	517c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    4f56:	b1c0      	cbz	r0, 4f8a <sdc_enable+0x42>
    4f58:	4628      	mov	r0, r5
    4f5a:	f7ff fe65 	bl	4c28 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4f5e:	4d0c      	ldr	r5, [pc, #48]	; (4f90 <sdc_enable+0x48>)
    4f60:	2200      	movs	r2, #0
    4f62:	490c      	ldr	r1, [pc, #48]	; (4f94 <sdc_enable+0x4c>)
    4f64:	7028      	strb	r0, [r5, #0]
    4f66:	4620      	mov	r0, r4
    4f68:	f008 f934 	bl	d1d4 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x28>
    4f6c:	f00b fef8 	bl	10d60 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    4f70:	2100      	movs	r1, #0
    4f72:	7828      	ldrb	r0, [r5, #0]
    4f74:	f006 faee 	bl	b554 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4f78:	f7ff ff48 	bl	4e0c <mpsl_fem_device_config_254_apply_get+0xc>
    4f7c:	2001      	movs	r0, #1
    4f7e:	7068      	strb	r0, [r5, #1]
    4f80:	2000      	movs	r0, #0
    4f82:	bd70      	pop	{r4, r5, r6, pc}
    4f84:	f06f 0015 	mvn.w	r0, #21
    4f88:	bd70      	pop	{r4, r5, r6, pc}
    4f8a:	f04f 30ff 	mov.w	r0, #4294967295
    4f8e:	bd70      	pop	{r4, r5, r6, pc}
    4f90:	20000078 	.word	0x20000078
    4f94:	2000121c 	.word	0x2000121c

00004f98 <sdc_init>:
    4f98:	b530      	push	{r4, r5, lr}
    4f9a:	b087      	sub	sp, #28
    4f9c:	0005      	movs	r5, r0
    4f9e:	d00c      	beq.n	4fba <sdc_init+0x22>
    4fa0:	f7ff fde8 	bl	4b74 <mpsl_is_initialized>
    4fa4:	f04f 34ff 	mov.w	r4, #4294967295
    4fa8:	b120      	cbz	r0, 4fb4 <sdc_init+0x1c>
    4faa:	f7ff fc93 	bl	48d4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    4fae:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    4fb2:	d905      	bls.n	4fc0 <sdc_init+0x28>
    4fb4:	4620      	mov	r0, r4
    4fb6:	b007      	add	sp, #28
    4fb8:	bd30      	pop	{r4, r5, pc}
    4fba:	f06f 0015 	mvn.w	r0, #21
    4fbe:	e7fa      	b.n	4fb6 <sdc_init+0x1e>
    4fc0:	4c15      	ldr	r4, [pc, #84]	; (5018 <sdc_init+0x80>)
    4fc2:	4816      	ldr	r0, [pc, #88]	; (501c <sdc_init+0x84>)
    4fc4:	6065      	str	r5, [r4, #4]
    4fc6:	f000 f9e9 	bl	539c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    4fca:	2000      	movs	r0, #0
    4fcc:	7060      	strb	r0, [r4, #1]
    4fce:	70a0      	strb	r0, [r4, #2]
    4fd0:	70e0      	strb	r0, [r4, #3]
    4fd2:	4601      	mov	r1, r0
    4fd4:	2218      	movs	r2, #24
    4fd6:	4668      	mov	r0, sp
    4fd8:	f008 f857 	bl	d08a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4fdc:	2218      	movs	r2, #24
    4fde:	4910      	ldr	r1, [pc, #64]	; (5020 <sdc_init+0x88>)
    4fe0:	4668      	mov	r0, sp
    4fe2:	f007 ffd8 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4fe6:	2218      	movs	r2, #24
    4fe8:	4669      	mov	r1, sp
    4fea:	480e      	ldr	r0, [pc, #56]	; (5024 <sdc_init+0x8c>)
    4fec:	f007 ffd3 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4ff0:	f3ef 8410 	mrs	r4, PRIMASK
    4ff4:	b672      	cpsid	i
    4ff6:	f06f 000c 	mvn.w	r0, #12
    4ffa:	f000 fd47 	bl	5a8c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    4ffe:	480a      	ldr	r0, [pc, #40]	; (5028 <sdc_init+0x90>)
    5000:	f000 fe12 	bl	5c28 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    5004:	b118      	cbz	r0, 500e <sdc_init+0x76>
    5006:	2198      	movs	r1, #152	; 0x98
    5008:	2003      	movs	r0, #3
    500a:	f000 f80f 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    500e:	b904      	cbnz	r4, 5012 <sdc_init+0x7a>
    5010:	b662      	cpsie	i
    5012:	2000      	movs	r0, #0
    5014:	e7cf      	b.n	4fb6 <sdc_init+0x1e>
    5016:	0000      	.short	0x0000
    5018:	20000078 	.word	0x20000078
    501c:	00004e0d 	.word	0x00004e0d
    5020:	00005118 	.word	0x00005118
    5024:	2000121c 	.word	0x2000121c
    5028:	000051a9 	.word	0x000051a9

0000502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    502c:	b50e      	push	{r1, r2, r3, lr}
    502e:	b672      	cpsid	i
    5030:	4a15      	ldr	r2, [pc, #84]	; (5088 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    5032:	6855      	ldr	r5, [r2, #4]
    5034:	b1d5      	cbz	r5, 506c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    5036:	2200      	movs	r2, #0
    5038:	4603      	mov	r3, r0
    503a:	466e      	mov	r6, sp
    503c:	240a      	movs	r4, #10
    503e:	e003      	b.n	5048 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    5040:	fbb0 f0f4 	udiv	r0, r0, r4
    5044:	1c52      	adds	r2, r2, #1
    5046:	b2d2      	uxtb	r2, r2
    5048:	2800      	cmp	r0, #0
    504a:	d1f9      	bne.n	5040 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    504c:	54b0      	strb	r0, [r6, r2]
    504e:	e009      	b.n	5064 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    5050:	fbb3 f0f4 	udiv	r0, r3, r4
    5054:	fb04 3010 	mls	r0, r4, r0, r3
    5058:	fbb3 f3f4 	udiv	r3, r3, r4
    505c:	1e52      	subs	r2, r2, #1
    505e:	b2d2      	uxtb	r2, r2
    5060:	3030      	adds	r0, #48	; 0x30
    5062:	54b0      	strb	r0, [r6, r2]
    5064:	2a00      	cmp	r2, #0
    5066:	d1f3      	bne.n	5050 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    5068:	4630      	mov	r0, r6
    506a:	47a8      	blx	r5
    506c:	f3bf 8f4f 	dsb	sy
    5070:	4806      	ldr	r0, [pc, #24]	; (508c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    5072:	6801      	ldr	r1, [r0, #0]
    5074:	4a06      	ldr	r2, [pc, #24]	; (5090 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    5076:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    507a:	4311      	orrs	r1, r2
    507c:	6001      	str	r1, [r0, #0]
    507e:	f3bf 8f4f 	dsb	sy
    5082:	bf00      	nop
    5084:	e7fd      	b.n	5082 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    5086:	0000      	.short	0x0000
    5088:	20000078 	.word	0x20000078
    508c:	e000ed0c 	.word	0xe000ed0c
    5090:	05fa0004 	.word	0x05fa0004

00005094 <sdc_support_adv>:
    5094:	4806      	ldr	r0, [pc, #24]	; (50b0 <sdc_support_adv+0x1c>)
    5096:	b510      	push	{r4, lr}
    5098:	7881      	ldrb	r1, [r0, #2]
    509a:	7840      	ldrb	r0, [r0, #1]
    509c:	4301      	orrs	r1, r0
    509e:	d002      	beq.n	50a6 <sdc_support_adv+0x12>
    50a0:	f04f 30ff 	mov.w	r0, #4294967295
    50a4:	bd10      	pop	{r4, pc}
    50a6:	f006 fa71 	bl	b58c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    50aa:	2000      	movs	r0, #0
    50ac:	bd10      	pop	{r4, pc}
    50ae:	0000      	.short	0x0000
    50b0:	20000078 	.word	0x20000078

000050b4 <sdc_support_dle>:
    50b4:	4806      	ldr	r0, [pc, #24]	; (50d0 <sdc_support_dle+0x1c>)
    50b6:	b510      	push	{r4, lr}
    50b8:	7881      	ldrb	r1, [r0, #2]
    50ba:	7840      	ldrb	r0, [r0, #1]
    50bc:	4301      	orrs	r1, r0
    50be:	d002      	beq.n	50c6 <sdc_support_dle+0x12>
    50c0:	f04f 30ff 	mov.w	r0, #4294967295
    50c4:	bd10      	pop	{r4, pc}
    50c6:	f006 f8a1 	bl	b20c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    50ca:	2000      	movs	r0, #0
    50cc:	bd10      	pop	{r4, pc}
    50ce:	0000      	.short	0x0000
    50d0:	20000078 	.word	0x20000078

000050d4 <sdc_support_le_2m_phy>:
    50d4:	4806      	ldr	r0, [pc, #24]	; (50f0 <sdc_support_le_2m_phy+0x1c>)
    50d6:	b510      	push	{r4, lr}
    50d8:	7881      	ldrb	r1, [r0, #2]
    50da:	7840      	ldrb	r0, [r0, #1]
    50dc:	4301      	orrs	r1, r0
    50de:	d002      	beq.n	50e6 <sdc_support_le_2m_phy+0x12>
    50e0:	f04f 30ff 	mov.w	r0, #4294967295
    50e4:	bd10      	pop	{r4, pc}
    50e6:	f00b fb0f 	bl	10708 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    50ea:	2000      	movs	r0, #0
    50ec:	bd10      	pop	{r4, pc}
    50ee:	0000      	.short	0x0000
    50f0:	20000078 	.word	0x20000078

000050f4 <sdc_support_peripheral>:
    50f4:	4806      	ldr	r0, [pc, #24]	; (5110 <sdc_support_peripheral+0x1c>)
    50f6:	b510      	push	{r4, lr}
    50f8:	7881      	ldrb	r1, [r0, #2]
    50fa:	7840      	ldrb	r0, [r0, #1]
    50fc:	4301      	orrs	r1, r0
    50fe:	d002      	beq.n	5106 <sdc_support_peripheral+0x12>
    5100:	f04f 30ff 	mov.w	r0, #4294967295
    5104:	bd10      	pop	{r4, pc}
    5106:	f006 fa53 	bl	b5b0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    510a:	2000      	movs	r0, #0
    510c:	bd10      	pop	{r4, pc}
    510e:	0000      	.short	0x0000
    5110:	20000078 	.word	0x20000078
    5114:	00000001 	.word	0x00000001
    5118:	00010101 	.word	0x00010101
    511c:	031b1b00 	.word	0x031b1b00
    5120:	00000002 	.word	0x00000002
    5124:	00001d4c 	.word	0x00001d4c
    5128:	001f0003 	.word	0x001f0003
    512c:	00000000 	.word	0x00000000
    5130:	182a7833 	.word	0x182a7833
    5134:	6161f520 	.word	0x6161f520
    5138:	60778ba6 	.word	0x60778ba6
    513c:	2a398362 	.word	0x2a398362
    5140:	e414f17c 	.word	0xe414f17c

00005144 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    5144:	4a05      	ldr	r2, [pc, #20]	; (515c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    5146:	b510      	push	{r4, lr}
    5148:	6852      	ldr	r2, [r2, #4]
    514a:	b112      	cbz	r2, 5152 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    514c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5150:	4710      	bx	r2
    5152:	2192      	movs	r1, #146	; 0x92
    5154:	2004      	movs	r0, #4
    5156:	f7ff ff69 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    515a:	0000      	.short	0x0000
    515c:	20001234 	.word	0x20001234

00005160 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    5160:	4a05      	ldr	r2, [pc, #20]	; (5178 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    5162:	b510      	push	{r4, lr}
    5164:	6892      	ldr	r2, [r2, #8]
    5166:	b112      	cbz	r2, 516e <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    5168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    516c:	4710      	bx	r2
    516e:	2198      	movs	r1, #152	; 0x98
    5170:	2004      	movs	r0, #4
    5172:	f7ff ff5b 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5176:	0000      	.short	0x0000
    5178:	20001234 	.word	0x20001234

0000517c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    517c:	4805      	ldr	r0, [pc, #20]	; (5194 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    517e:	6801      	ldr	r1, [r0, #0]
    5180:	b129      	cbz	r1, 518e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    5182:	6841      	ldr	r1, [r0, #4]
    5184:	b119      	cbz	r1, 518e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    5186:	6880      	ldr	r0, [r0, #8]
    5188:	b108      	cbz	r0, 518e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    518a:	2001      	movs	r0, #1
    518c:	4770      	bx	lr
    518e:	2000      	movs	r0, #0
    5190:	4770      	bx	lr
    5192:	0000      	.short	0x0000
    5194:	20001234 	.word	0x20001234

00005198 <sdc_rand_source_register>:
    5198:	4902      	ldr	r1, [pc, #8]	; (51a4 <sdc_rand_source_register+0xc>)
    519a:	c80d      	ldmia	r0, {r0, r2, r3}
    519c:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    51a0:	2000      	movs	r0, #0
    51a2:	4770      	bx	lr
    51a4:	20001234 	.word	0x20001234

000051a8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    51a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51aa:	4c12      	ldr	r4, [pc, #72]	; (51f4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    51ac:	2600      	movs	r6, #0
    51ae:	6825      	ldr	r5, [r4, #0]
    51b0:	e011      	b.n	51d6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    51b2:	9800      	ldr	r0, [sp, #0]
    51b4:	2802      	cmp	r0, #2
    51b6:	d002      	beq.n	51be <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    51b8:	2803      	cmp	r0, #3
    51ba:	d10c      	bne.n	51d6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    51bc:	e006      	b.n	51cc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    51be:	6820      	ldr	r0, [r4, #0]
    51c0:	b110      	cbz	r0, 51c8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    51c2:	2000      	movs	r0, #0
    51c4:	6026      	str	r6, [r4, #0]
    51c6:	e005      	b.n	51d4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    51c8:	2128      	movs	r1, #40	; 0x28
    51ca:	e00c      	b.n	51e6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    51cc:	6820      	ldr	r0, [r4, #0]
    51ce:	b168      	cbz	r0, 51ec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    51d0:	2001      	movs	r0, #1
    51d2:	6026      	str	r6, [r4, #0]
    51d4:	47a8      	blx	r5
    51d6:	4668      	mov	r0, sp
    51d8:	f000 fcf8 	bl	5bcc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    51dc:	2800      	cmp	r0, #0
    51de:	d0e8      	beq.n	51b2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    51e0:	2805      	cmp	r0, #5
    51e2:	d005      	beq.n	51f0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    51e4:	2135      	movs	r1, #53	; 0x35
    51e6:	2004      	movs	r0, #4
    51e8:	f7ff ff20 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51ec:	212d      	movs	r1, #45	; 0x2d
    51ee:	e7fa      	b.n	51e6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    51f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    51f2:	0000      	.short	0x0000
    51f4:	20000080 	.word	0x20000080
    51f8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    51fa:	4c1f      	ldr	r4, [pc, #124]	; (5278 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    51fc:	4605      	mov	r5, r0
    51fe:	7820      	ldrb	r0, [r4, #0]
    5200:	b140      	cbz	r0, 5214 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    5202:	78a2      	ldrb	r2, [r4, #2]
    5204:	1c61      	adds	r1, r4, #1
    5206:	4628      	mov	r0, r5
    5208:	1c92      	adds	r2, r2, #2
    520a:	f007 fec4 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    520e:	2000      	movs	r0, #0
    5210:	7020      	strb	r0, [r4, #0]
    5212:	e021      	b.n	5258 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    5214:	4819      	ldr	r0, [pc, #100]	; (527c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    5216:	f001 ffe1 	bl	71dc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    521a:	2800      	cmp	r0, #0
    521c:	d01d      	beq.n	525a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    521e:	4c17      	ldr	r4, [pc, #92]	; (527c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    5220:	7820      	ldrb	r0, [r4, #0]
    5222:	2811      	cmp	r0, #17
    5224:	d104      	bne.n	5230 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    5226:	210a      	movs	r1, #10
    5228:	203e      	movs	r0, #62	; 0x3e
    522a:	f008 f859 	bl	d2e0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    522e:	b118      	cbz	r0, 5238 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    5230:	7820      	ldrb	r0, [r4, #0]
    5232:	2808      	cmp	r0, #8
    5234:	d005      	beq.n	5242 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    5236:	e009      	b.n	524c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    5238:	4910      	ldr	r1, [pc, #64]	; (527c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    523a:	4628      	mov	r0, r5
    523c:	f008 fa5a 	bl	d6f4 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    5240:	e00a      	b.n	5258 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    5242:	2105      	movs	r1, #5
    5244:	203e      	movs	r0, #62	; 0x3e
    5246:	f008 f84b 	bl	d2e0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    524a:	b138      	cbz	r0, 525c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    524c:	490b      	ldr	r1, [pc, #44]	; (527c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    524e:	4628      	mov	r0, r5
    5250:	f008 f8a4 	bl	d39c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    5254:	2800      	cmp	r0, #0
    5256:	d000      	beq.n	525a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    5258:	2001      	movs	r0, #1
    525a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    525c:	88a0      	ldrh	r0, [r4, #4]
    525e:	f8ad 0000 	strh.w	r0, [sp]
    5262:	a901      	add	r1, sp, #4
    5264:	4668      	mov	r0, sp
    5266:	f008 fb63 	bl	d930 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    526a:	2800      	cmp	r0, #0
    526c:	d0f5      	beq.n	525a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    526e:	219c      	movs	r1, #156	; 0x9c
    5270:	2008      	movs	r0, #8
    5272:	f7ff fedb 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5276:	0000      	.short	0x0000
    5278:	200013d2 	.word	0x200013d2
    527c:	200012d0 	.word	0x200012d0
    5280:	b570      	push	{r4, r5, r6, lr}
    5282:	780a      	ldrb	r2, [r1, #0]
    5284:	7082      	strb	r2, [r0, #2]
    5286:	b33a      	cbz	r2, 52d8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    5288:	2a01      	cmp	r2, #1
    528a:	d825      	bhi.n	52d8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    528c:	2313      	movs	r3, #19
    528e:	7003      	strb	r3, [r0, #0]
    5290:	2300      	movs	r3, #0
    5292:	e00a      	b.n	52aa <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x102>
    5294:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    5298:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    529c:	78a6      	ldrb	r6, [r4, #2]
    529e:	70ee      	strb	r6, [r5, #3]
    52a0:	8864      	ldrh	r4, [r4, #2]
    52a2:	0a24      	lsrs	r4, r4, #8
    52a4:	1c5b      	adds	r3, r3, #1
    52a6:	712c      	strb	r4, [r5, #4]
    52a8:	b2db      	uxtb	r3, r3
    52aa:	4293      	cmp	r3, r2
    52ac:	d3f2      	bcc.n	5294 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    52ae:	2300      	movs	r3, #0
    52b0:	e00b      	b.n	52ca <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x122>
    52b2:	bf00      	nop
    52b4:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    52b8:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    52bc:	792e      	ldrb	r6, [r5, #4]
    52be:	7166      	strb	r6, [r4, #5]
    52c0:	88ad      	ldrh	r5, [r5, #4]
    52c2:	0a2d      	lsrs	r5, r5, #8
    52c4:	1c5b      	adds	r3, r3, #1
    52c6:	71a5      	strb	r5, [r4, #6]
    52c8:	b2db      	uxtb	r3, r3
    52ca:	4293      	cmp	r3, r2
    52cc:	d3f2      	bcc.n	52b4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>
    52ce:	2101      	movs	r1, #1
    52d0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    52d4:	b2c0      	uxtb	r0, r0
    52d6:	bd70      	pop	{r4, r5, r6, pc}
    52d8:	2000      	movs	r0, #0
    52da:	bd70      	pop	{r4, r5, r6, pc}

000052dc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    52dc:	2101      	movs	r1, #1
    52de:	4a0c      	ldr	r2, [pc, #48]	; (5310 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    52e0:	2840      	cmp	r0, #64	; 0x40
    52e2:	d20c      	bcs.n	52fe <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    52e4:	2820      	cmp	r0, #32
    52e6:	d803      	bhi.n	52f0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    52e8:	1e40      	subs	r0, r0, #1
    52ea:	4081      	lsls	r1, r0
    52ec:	6810      	ldr	r0, [r2, #0]
    52ee:	e002      	b.n	52f6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    52f0:	3821      	subs	r0, #33	; 0x21
    52f2:	4081      	lsls	r1, r0
    52f4:	6850      	ldr	r0, [r2, #4]
    52f6:	4201      	tst	r1, r0
    52f8:	d107      	bne.n	530a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    52fa:	2000      	movs	r0, #0
    52fc:	4770      	bx	lr
    52fe:	28ff      	cmp	r0, #255	; 0xff
    5300:	d003      	beq.n	530a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    5302:	3840      	subs	r0, #64	; 0x40
    5304:	4081      	lsls	r1, r0
    5306:	6890      	ldr	r0, [r2, #8]
    5308:	e7f5      	b.n	52f6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    530a:	2001      	movs	r0, #1
    530c:	4770      	bx	lr
    530e:	0000      	.short	0x0000
    5310:	20000084 	.word	0x20000084

00005314 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    5314:	2101      	movs	r1, #1
    5316:	1e40      	subs	r0, r0, #1
    5318:	4081      	lsls	r1, r0
    531a:	4804      	ldr	r0, [pc, #16]	; (532c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    531c:	68c0      	ldr	r0, [r0, #12]
    531e:	4201      	tst	r1, r0
    5320:	d001      	beq.n	5326 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    5322:	2001      	movs	r0, #1
    5324:	4770      	bx	lr
    5326:	2000      	movs	r0, #0
    5328:	4770      	bx	lr
    532a:	0000      	.short	0x0000
    532c:	20000084 	.word	0x20000084

00005330 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    5330:	4901      	ldr	r1, [pc, #4]	; (5338 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    5332:	6800      	ldr	r0, [r0, #0]
    5334:	60c8      	str	r0, [r1, #12]
    5336:	4770      	bx	lr
    5338:	20000084 	.word	0x20000084

0000533c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    533c:	4904      	ldr	r1, [pc, #16]	; (5350 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    533e:	6802      	ldr	r2, [r0, #0]
    5340:	6840      	ldr	r0, [r0, #4]
    5342:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    5346:	600a      	str	r2, [r1, #0]
    5348:	4a02      	ldr	r2, [pc, #8]	; (5354 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    534a:	4310      	orrs	r0, r2
    534c:	6048      	str	r0, [r1, #4]
    534e:	4770      	bx	lr
    5350:	20000084 	.word	0x20000084
    5354:	024007f8 	.word	0x024007f8

00005358 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    5358:	4901      	ldr	r1, [pc, #4]	; (5360 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    535a:	6800      	ldr	r0, [r0, #0]
    535c:	6088      	str	r0, [r1, #8]
    535e:	4770      	bx	lr
    5360:	20000084 	.word	0x20000084

00005364 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    5364:	4805      	ldr	r0, [pc, #20]	; (537c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    5366:	f04f 31ff 	mov.w	r1, #4294967295
    536a:	6001      	str	r1, [r0, #0]
    536c:	0cc9      	lsrs	r1, r1, #19
    536e:	6041      	str	r1, [r0, #4]
    5370:	2100      	movs	r1, #0
    5372:	6081      	str	r1, [r0, #8]
    5374:	211f      	movs	r1, #31
    5376:	60c1      	str	r1, [r0, #12]
    5378:	4770      	bx	lr
    537a:	0000      	.short	0x0000
    537c:	20000084 	.word	0x20000084

00005380 <sdc_hci_cmd_cb_reset>:
    5380:	b510      	push	{r4, lr}
    5382:	f7ff ffef 	bl	5364 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    5386:	f00b f930 	bl	105ea <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    538a:	4604      	mov	r4, r0
    538c:	4802      	ldr	r0, [pc, #8]	; (5398 <sdc_hci_cmd_cb_reset+0x18>)
    538e:	6800      	ldr	r0, [r0, #0]
    5390:	b100      	cbz	r0, 5394 <sdc_hci_cmd_cb_reset+0x14>
    5392:	4780      	blx	r0
    5394:	4620      	mov	r0, r4
    5396:	bd10      	pop	{r4, pc}
    5398:	20000094 	.word	0x20000094

0000539c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    539c:	4901      	ldr	r1, [pc, #4]	; (53a4 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    539e:	6008      	str	r0, [r1, #0]
    53a0:	4770      	bx	lr
    53a2:	0000      	.short	0x0000
    53a4:	20000094 	.word	0x20000094

000053a8 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    53a8:	2102      	movs	r1, #2
    53aa:	8001      	strh	r1, [r0, #0]
    53ac:	8041      	strh	r1, [r0, #2]
    53ae:	2100      	movs	r1, #0
    53b0:	7101      	strb	r1, [r0, #4]
    53b2:	2133      	movs	r1, #51	; 0x33
    53b4:	7141      	strb	r1, [r0, #5]
    53b6:	f642 2178 	movw	r1, #10872	; 0x2a78
    53ba:	80c1      	strh	r1, [r0, #6]
    53bc:	4901      	ldr	r1, [pc, #4]	; (53c4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    53be:	6081      	str	r1, [r0, #8]
    53c0:	2000      	movs	r0, #0
    53c2:	4770      	bx	lr
    53c4:	61f52018 	.word	0x61f52018

000053c8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    53c8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    53ca:	4604      	mov	r4, r0
    53cc:	4669      	mov	r1, sp
    53ce:	f008 fe11 	bl	dff4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    53d2:	b170      	cbz	r0, 53f2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    53d4:	f240 215a 	movw	r1, #602	; 0x25a
    53d8:	e008      	b.n	53ec <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    53da:	bf00      	nop
    53dc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    53e0:	4621      	mov	r1, r4
    53e2:	f000 f8ab 	bl	553c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    53e6:	b120      	cbz	r0, 53f2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    53e8:	f240 215f 	movw	r1, #607	; 0x25f
    53ec:	2017      	movs	r0, #23
    53ee:	f7ff fe1d 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53f2:	4668      	mov	r0, sp
    53f4:	f000 f852 	bl	549c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    53f8:	2800      	cmp	r0, #0
    53fa:	d0ef      	beq.n	53dc <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    53fc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00005400 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    5400:	b510      	push	{r4, lr}
    5402:	2802      	cmp	r0, #2
    5404:	d304      	bcc.n	5410 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    5406:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    540a:	2017      	movs	r0, #23
    540c:	f7ff fe0e 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5410:	4901      	ldr	r1, [pc, #4]	; (5418 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    5412:	5c08      	ldrb	r0, [r1, r0]
    5414:	bd10      	pop	{r4, pc}
    5416:	0000      	.short	0x0000
    5418:	20001240 	.word	0x20001240

0000541c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    541c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    541e:	0005      	movs	r5, r0
    5420:	9500      	str	r5, [sp, #0]
    5422:	d010      	beq.n	5446 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2a>
    5424:	2600      	movs	r6, #0
    5426:	7808      	ldrb	r0, [r1, #0]
    5428:	7849      	ldrb	r1, [r1, #1]
    542a:	4604      	mov	r4, r0
    542c:	42a1      	cmp	r1, r4
    542e:	d900      	bls.n	5432 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    5430:	460c      	mov	r4, r1
    5432:	1cea      	adds	r2, r5, #3
    5434:	f022 0203 	bic.w	r2, r2, #3
    5438:	42aa      	cmp	r2, r5
    543a:	d006      	beq.n	544a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    543c:	f240 1179 	movw	r1, #377	; 0x179
    5440:	2017      	movs	r0, #23
    5442:	f7ff fdf3 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5446:	2601      	movs	r6, #1
    5448:	e7ed      	b.n	5426 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    544a:	4f13      	ldr	r7, [pc, #76]	; (5498 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    544c:	7038      	strb	r0, [r7, #0]
    544e:	7079      	strb	r1, [r7, #1]
    5450:	4631      	mov	r1, r6
    5452:	4668      	mov	r0, sp
    5454:	f000 f8ee 	bl	5634 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    5458:	2100      	movs	r1, #0
    545a:	460b      	mov	r3, r1
    545c:	9800      	ldr	r0, [sp, #0]
    545e:	1cc0      	adds	r0, r0, #3
    5460:	f020 0003 	bic.w	r0, r0, #3
    5464:	9000      	str	r0, [sp, #0]
    5466:	b96e      	cbnz	r6, 5484 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    5468:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    546c:	60d0      	str	r0, [r2, #12]
    546e:	2000      	movs	r0, #0
    5470:	e006      	b.n	5480 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    5472:	bf00      	nop
    5474:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    5478:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    547c:	1c40      	adds	r0, r0, #1
    547e:	b2c0      	uxtb	r0, r0
    5480:	42a0      	cmp	r0, r4
    5482:	d3f7      	bcc.n	5474 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    5484:	9800      	ldr	r0, [sp, #0]
    5486:	1c49      	adds	r1, r1, #1
    5488:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    548c:	b2c9      	uxtb	r1, r1
    548e:	9000      	str	r0, [sp, #0]
    5490:	2902      	cmp	r1, #2
    5492:	d3e3      	bcc.n	545c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x40>
    5494:	1b40      	subs	r0, r0, r5
    5496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5498:	20001240 	.word	0x20001240

0000549c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    549c:	b570      	push	{r4, r5, r6, lr}
    549e:	4604      	mov	r4, r0
    54a0:	f008 ff54 	bl	e34c <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    54a4:	b108      	cbz	r0, 54aa <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    54a6:	2010      	movs	r0, #16
    54a8:	bd70      	pop	{r4, r5, r6, pc}
    54aa:	7825      	ldrb	r5, [r4, #0]
    54ac:	f000 f8fe 	bl	56ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    54b0:	4602      	mov	r2, r0
    54b2:	480c      	ldr	r0, [pc, #48]	; (54e4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    54b4:	8861      	ldrh	r1, [r4, #2]
    54b6:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    54ba:	e00e      	b.n	54da <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    54bc:	68c3      	ldr	r3, [r0, #12]
    54be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    54c2:	b143      	cbz	r3, 54d6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    54c4:	1c4a      	adds	r2, r1, #1
    54c6:	8062      	strh	r2, [r4, #2]
    54c8:	80a1      	strh	r1, [r4, #4]
    54ca:	68c0      	ldr	r0, [r0, #12]
    54cc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    54d0:	60a0      	str	r0, [r4, #8]
    54d2:	2000      	movs	r0, #0
    54d4:	bd70      	pop	{r4, r5, r6, pc}
    54d6:	1c49      	adds	r1, r1, #1
    54d8:	b289      	uxth	r1, r1
    54da:	4291      	cmp	r1, r2
    54dc:	d3ee      	bcc.n	54bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    54de:	8061      	strh	r1, [r4, #2]
    54e0:	2005      	movs	r0, #5
    54e2:	bd70      	pop	{r4, r5, r6, pc}
    54e4:	20001240 	.word	0x20001240

000054e8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    54e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    54ec:	b121      	cbz	r1, 54f8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    54ee:	2901      	cmp	r1, #1
    54f0:	d002      	beq.n	54f8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    54f2:	2000      	movs	r0, #0
    54f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    54f8:	4c0f      	ldr	r4, [pc, #60]	; (5538 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    54fa:	2700      	movs	r7, #0
    54fc:	463b      	mov	r3, r7
    54fe:	f64f 76ff 	movw	r6, #65535	; 0xffff
    5502:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    5506:	f814 c001 	ldrb.w	ip, [r4, r1]
    550a:	e00a      	b.n	5522 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    550c:	19dc      	adds	r4, r3, r7
    550e:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    5512:	b2a4      	uxth	r4, r4
    5514:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    5518:	f1be 0f00 	cmp.w	lr, #0
    551c:	d004      	beq.n	5528 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    551e:	1c5b      	adds	r3, r3, #1
    5520:	b29b      	uxth	r3, r3
    5522:	459c      	cmp	ip, r3
    5524:	d8f2      	bhi.n	550c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    5526:	4634      	mov	r4, r6
    5528:	8004      	strh	r4, [r0, #0]
    552a:	4620      	mov	r0, r4
    552c:	42b4      	cmp	r4, r6
    552e:	d0e0      	beq.n	54f2 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    5530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5534:	f000 b834 	b.w	55a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    5538:	20001240 	.word	0x20001240

0000553c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    553c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5540:	4606      	mov	r6, r0
    5542:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    5546:	460c      	mov	r4, r1
    5548:	f243 0702 	movw	r7, #12290	; 0x3002
    554c:	38ff      	subs	r0, #255	; 0xff
    554e:	d020      	beq.n	5592 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    5550:	2c02      	cmp	r4, #2
    5552:	d302      	bcc.n	555a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    5554:	2007      	movs	r0, #7
    5556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    555a:	4630      	mov	r0, r6
    555c:	f000 f85a 	bl	5614 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    5560:	0005      	movs	r5, r0
    5562:	d016      	beq.n	5592 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    5564:	480c      	ldr	r0, [pc, #48]	; (5598 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    5566:	4629      	mov	r1, r5
    5568:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    556c:	4630      	mov	r0, r6
    556e:	4790      	blx	r2
    5570:	480a      	ldr	r0, [pc, #40]	; (559c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    5572:	2100      	movs	r1, #0
    5574:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    5578:	68f8      	ldr	r0, [r7, #12]
    557a:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    557e:	4620      	mov	r0, r4
    5580:	f000 f88a 	bl	5698 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5584:	4602      	mov	r2, r0
    5586:	4629      	mov	r1, r5
    5588:	6878      	ldr	r0, [r7, #4]
    558a:	f008 fd12 	bl	dfb2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    558e:	2000      	movs	r0, #0
    5590:	e7e1      	b.n	5556 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    5592:	4638      	mov	r0, r7
    5594:	e7df      	b.n	5556 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    5596:	0000      	.short	0x0000
    5598:	000056cc 	.word	0x000056cc
    559c:	20001240 	.word	0x20001240
    55a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55a4:	4690      	mov	r8, r2
    55a6:	460d      	mov	r5, r1
    55a8:	4607      	mov	r7, r0
    55aa:	f008 fd34 	bl	e016 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    55ae:	b148      	cbz	r0, 55c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    55b0:	4816      	ldr	r0, [pc, #88]	; (560c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    55b2:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    55b6:	68f0      	ldr	r0, [r6, #12]
    55b8:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    55bc:	b128      	cbz	r0, 55ca <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    55be:	f44f 719d 	mov.w	r1, #314	; 0x13a
    55c2:	e015      	b.n	55f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    55c4:	f240 1139 	movw	r1, #313	; 0x139
    55c8:	e012      	b.n	55f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    55ca:	6870      	ldr	r0, [r6, #4]
    55cc:	2800      	cmp	r0, #0
    55ce:	d01a      	beq.n	5606 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    55d0:	4628      	mov	r0, r5
    55d2:	f000 f861 	bl	5698 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    55d6:	4601      	mov	r1, r0
    55d8:	6870      	ldr	r0, [r6, #4]
    55da:	f008 fc9c 	bl	df16 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    55de:	0004      	movs	r4, r0
    55e0:	d010      	beq.n	5604 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    55e2:	68f0      	ldr	r0, [r6, #12]
    55e4:	2d02      	cmp	r5, #2
    55e6:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    55ea:	d304      	bcc.n	55f6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    55ec:	f240 1145 	movw	r1, #325	; 0x145
    55f0:	2017      	movs	r0, #23
    55f2:	f7ff fd1b 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    55f6:	4806      	ldr	r0, [pc, #24]	; (5610 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    55f8:	4642      	mov	r2, r8
    55fa:	4621      	mov	r1, r4
    55fc:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    5600:	4638      	mov	r0, r7
    5602:	4798      	blx	r3
    5604:	4620      	mov	r0, r4
    5606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    560a:	0000      	.short	0x0000
    560c:	20001240 	.word	0x20001240
    5610:	000056c4 	.word	0x000056c4
    5614:	b570      	push	{r4, r5, r6, lr}
    5616:	460c      	mov	r4, r1
    5618:	4605      	mov	r5, r0
    561a:	f008 fcfc 	bl	e016 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    561e:	2800      	cmp	r0, #0
    5620:	d005      	beq.n	562e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    5622:	4803      	ldr	r0, [pc, #12]	; (5630 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    5624:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5628:	68c0      	ldr	r0, [r0, #12]
    562a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    562e:	bd70      	pop	{r4, r5, r6, pc}
    5630:	20001240 	.word	0x20001240
    5634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5638:	4e16      	ldr	r6, [pc, #88]	; (5694 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    563a:	4688      	mov	r8, r1
    563c:	4605      	mov	r5, r0
    563e:	2400      	movs	r4, #0
    5640:	6828      	ldr	r0, [r5, #0]
    5642:	1cc0      	adds	r0, r0, #3
    5644:	f020 0003 	bic.w	r0, r0, #3
    5648:	6028      	str	r0, [r5, #0]
    564a:	4620      	mov	r0, r4
    564c:	f000 f824 	bl	5698 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5650:	5d31      	ldrb	r1, [r6, r4]
    5652:	4348      	muls	r0, r1
    5654:	f1b8 0f00 	cmp.w	r8, #0
    5658:	d001      	beq.n	565e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    565a:	2200      	movs	r2, #0
    565c:	e000      	b.n	5660 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    565e:	682a      	ldr	r2, [r5, #0]
    5660:	4601      	mov	r1, r0
    5662:	9200      	str	r2, [sp, #0]
    5664:	b132      	cbz	r2, 5674 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    5666:	2700      	movs	r7, #0
    5668:	ea4f 000d 	mov.w	r0, sp
    566c:	f008 fc80 	bl	df70 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5670:	b11f      	cbz	r7, 567a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    5672:	e006      	b.n	5682 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    5674:	2701      	movs	r7, #1
    5676:	2000      	movs	r0, #0
    5678:	e7f8      	b.n	566c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    567a:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    567e:	9a00      	ldr	r2, [sp, #0]
    5680:	604a      	str	r2, [r1, #4]
    5682:	6829      	ldr	r1, [r5, #0]
    5684:	1c64      	adds	r4, r4, #1
    5686:	4408      	add	r0, r1
    5688:	b2e4      	uxtb	r4, r4
    568a:	6028      	str	r0, [r5, #0]
    568c:	2c02      	cmp	r4, #2
    568e:	d3d7      	bcc.n	5640 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    5690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5694:	20001240 	.word	0x20001240
    5698:	4903      	ldr	r1, [pc, #12]	; (56a8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    569a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    569e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    56a2:	1cc0      	adds	r0, r0, #3
    56a4:	4008      	ands	r0, r1
    56a6:	4770      	bx	lr
    56a8:	000056c0 	.word	0x000056c0
    56ac:	4903      	ldr	r1, [pc, #12]	; (56bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    56ae:	7808      	ldrb	r0, [r1, #0]
    56b0:	7849      	ldrb	r1, [r1, #1]
    56b2:	4288      	cmp	r0, r1
    56b4:	d200      	bcs.n	56b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    56b6:	4608      	mov	r0, r1
    56b8:	4770      	bx	lr
    56ba:	0000      	.short	0x0000
    56bc:	20001240 	.word	0x20001240
    56c0:	00d40228 	.word	0x00d40228
    56c4:	0000e02b 	.word	0x0000e02b
    56c8:	0000e02b 	.word	0x0000e02b
    56cc:	0000fb9d 	.word	0x0000fb9d
    56d0:	0000f06b 	.word	0x0000f06b

000056d4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    56d4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56d8:	4c26      	ldr	r4, [pc, #152]	; (5774 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    56da:	4680      	mov	r8, r0
    56dc:	b081      	sub	sp, #4
    56de:	6820      	ldr	r0, [r4, #0]
    56e0:	469a      	mov	sl, r3
    56e2:	4693      	mov	fp, r2
    56e4:	b158      	cbz	r0, 56fe <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    56e6:	7a02      	ldrb	r2, [r0, #8]
    56e8:	4542      	cmp	r2, r8
    56ea:	d903      	bls.n	56f4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    56ec:	6841      	ldr	r1, [r0, #4]
    56ee:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    56f2:	b140      	cbz	r0, 5706 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    56f4:	f243 0002 	movw	r0, #12290	; 0x3002
    56f8:	b005      	add	sp, #20
    56fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    56fe:	21a5      	movs	r1, #165	; 0xa5
    5700:	2018      	movs	r0, #24
    5702:	f7ff fc93 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5706:	4619      	mov	r1, r3
    5708:	9802      	ldr	r0, [sp, #8]
    570a:	f008 fca6 	bl	e05a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    570e:	b286      	uxth	r6, r0
    5710:	4658      	mov	r0, fp
    5712:	990e      	ldr	r1, [sp, #56]	; 0x38
    5714:	f008 fc98 	bl	e048 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    5718:	b285      	uxth	r5, r0
    571a:	1970      	adds	r0, r6, r5
    571c:	1d00      	adds	r0, r0, #4
    571e:	b287      	uxth	r7, r0
    5720:	6820      	ldr	r0, [r4, #0]
    5722:	46a1      	mov	r9, r4
    5724:	4639      	mov	r1, r7
    5726:	6800      	ldr	r0, [r0, #0]
    5728:	f008 fbf5 	bl	df16 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    572c:	0004      	movs	r4, r0
    572e:	d01f      	beq.n	5770 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    5730:	8067      	strh	r7, [r4, #2]
    5732:	8025      	strh	r5, [r4, #0]
    5734:	4629      	mov	r1, r5
    5736:	1d20      	adds	r0, r4, #4
    5738:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    573a:	4607      	mov	r7, r0
    573c:	465a      	mov	r2, fp
    573e:	2301      	movs	r3, #1
    5740:	9500      	str	r5, [sp, #0]
    5742:	f008 fb48 	bl	ddd6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    5746:	8820      	ldrh	r0, [r4, #0]
    5748:	4631      	mov	r1, r6
    574a:	4438      	add	r0, r7
    574c:	2301      	movs	r3, #1
    574e:	9a02      	ldr	r2, [sp, #8]
    5750:	f8cd a000 	str.w	sl, [sp]
    5754:	f008 fb3f 	bl	ddd6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    5758:	8820      	ldrh	r0, [r4, #0]
    575a:	19c1      	adds	r1, r0, r7
    575c:	4638      	mov	r0, r7
    575e:	f008 fb6b 	bl	de38 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    5762:	f8d9 0000 	ldr.w	r0, [r9]
    5766:	6841      	ldr	r1, [r0, #4]
    5768:	2000      	movs	r0, #0
    576a:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    576e:	e7c3      	b.n	56f8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5770:	2004      	movs	r0, #4
    5772:	e7c1      	b.n	56f8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5774:	20000098 	.word	0x20000098

00005778 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    5778:	b570      	push	{r4, r5, r6, lr}
    577a:	4c14      	ldr	r4, [pc, #80]	; (57cc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    577c:	6823      	ldr	r3, [r4, #0]
    577e:	b18b      	cbz	r3, 57a4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    5780:	7a19      	ldrb	r1, [r3, #8]
    5782:	4281      	cmp	r1, r0
    5784:	d912      	bls.n	57ac <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    5786:	685a      	ldr	r2, [r3, #4]
    5788:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    578c:	b171      	cbz	r1, 57ac <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    578e:	2500      	movs	r5, #0
    5790:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    5794:	884a      	ldrh	r2, [r1, #2]
    5796:	6818      	ldr	r0, [r3, #0]
    5798:	f008 fc0b 	bl	dfb2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    579c:	6821      	ldr	r1, [r4, #0]
    579e:	2000      	movs	r0, #0
    57a0:	7a0a      	ldrb	r2, [r1, #8]
    57a2:	e00c      	b.n	57be <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    57a4:	21c8      	movs	r1, #200	; 0xc8
    57a6:	2018      	movs	r0, #24
    57a8:	f7ff fc40 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57ac:	f243 0002 	movw	r0, #12290	; 0x3002
    57b0:	bd70      	pop	{r4, r5, r6, pc}
    57b2:	684b      	ldr	r3, [r1, #4]
    57b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    57b8:	b933      	cbnz	r3, 57c8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    57ba:	1c40      	adds	r0, r0, #1
    57bc:	b2c0      	uxtb	r0, r0
    57be:	4282      	cmp	r2, r0
    57c0:	d8f7      	bhi.n	57b2 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    57c2:	6808      	ldr	r0, [r1, #0]
    57c4:	f008 fbea 	bl	df9c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    57c8:	2000      	movs	r0, #0
    57ca:	bd70      	pop	{r4, r5, r6, pc}
    57cc:	20000098 	.word	0x20000098

000057d0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    57d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    57d4:	460d      	mov	r5, r1
    57d6:	0004      	movs	r4, r0
    57d8:	4690      	mov	r8, r2
    57da:	f04f 0600 	mov.w	r6, #0
    57de:	d009      	beq.n	57f4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    57e0:	2700      	movs	r7, #0
    57e2:	1ce0      	adds	r0, r4, #3
    57e4:	f020 0003 	bic.w	r0, r0, #3
    57e8:	42a0      	cmp	r0, r4
    57ea:	d005      	beq.n	57f8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    57ec:	2186      	movs	r1, #134	; 0x86
    57ee:	2018      	movs	r0, #24
    57f0:	f7ff fc1c 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57f4:	2701      	movs	r7, #1
    57f6:	e7f4      	b.n	57e2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    57f8:	b1cd      	cbz	r5, 582e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    57fa:	4611      	mov	r1, r2
    57fc:	2000      	movs	r0, #0
    57fe:	f008 fbb7 	bl	df70 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5802:	300c      	adds	r0, #12
    5804:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    5808:	b98f      	cbnz	r7, 582e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    580a:	4f0a      	ldr	r7, [pc, #40]	; (5834 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    580c:	f104 000c 	add.w	r0, r4, #12
    5810:	00aa      	lsls	r2, r5, #2
    5812:	603c      	str	r4, [r7, #0]
    5814:	7225      	strb	r5, [r4, #8]
    5816:	6060      	str	r0, [r4, #4]
    5818:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    581c:	6020      	str	r0, [r4, #0]
    581e:	2100      	movs	r1, #0
    5820:	6860      	ldr	r0, [r4, #4]
    5822:	f007 fc32 	bl	d08a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5826:	4641      	mov	r1, r8
    5828:	6838      	ldr	r0, [r7, #0]
    582a:	f008 fba1 	bl	df70 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    582e:	4630      	mov	r0, r6
    5830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5834:	20000098 	.word	0x20000098

00005838 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    5838:	b570      	push	{r4, r5, r6, lr}
    583a:	4d08      	ldr	r5, [pc, #32]	; (585c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    583c:	6828      	ldr	r0, [r5, #0]
    583e:	2800      	cmp	r0, #0
    5840:	d00a      	beq.n	5858 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    5842:	2400      	movs	r4, #0
    5844:	e004      	b.n	5850 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    5846:	4620      	mov	r0, r4
    5848:	f7ff ff96 	bl	5778 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    584c:	1c64      	adds	r4, r4, #1
    584e:	b2e4      	uxtb	r4, r4
    5850:	6828      	ldr	r0, [r5, #0]
    5852:	7a00      	ldrb	r0, [r0, #8]
    5854:	42a0      	cmp	r0, r4
    5856:	d8f6      	bhi.n	5846 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    5858:	bd70      	pop	{r4, r5, r6, pc}
    585a:	0000      	.short	0x0000
    585c:	20000098 	.word	0x20000098

00005860 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    5860:	4909      	ldr	r1, [pc, #36]	; (5888 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    5862:	b510      	push	{r4, lr}
    5864:	4602      	mov	r2, r0
    5866:	6809      	ldr	r1, [r1, #0]
    5868:	2000      	movs	r0, #0
    586a:	b149      	cbz	r1, 5880 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    586c:	7a0b      	ldrb	r3, [r1, #8]
    586e:	4293      	cmp	r3, r2
    5870:	d905      	bls.n	587e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    5872:	6849      	ldr	r1, [r1, #4]
    5874:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    5878:	2900      	cmp	r1, #0
    587a:	d000      	beq.n	587e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    587c:	1d08      	adds	r0, r1, #4
    587e:	bd10      	pop	{r4, pc}
    5880:	21ee      	movs	r1, #238	; 0xee
    5882:	2018      	movs	r0, #24
    5884:	f7ff fbd2 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5888:	20000098 	.word	0x20000098

0000588c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    588c:	490a      	ldr	r1, [pc, #40]	; (58b8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    588e:	b510      	push	{r4, lr}
    5890:	4602      	mov	r2, r0
    5892:	6809      	ldr	r1, [r1, #0]
    5894:	2000      	movs	r0, #0
    5896:	b159      	cbz	r1, 58b0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    5898:	7a0b      	ldrb	r3, [r1, #8]
    589a:	4293      	cmp	r3, r2
    589c:	d907      	bls.n	58ae <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    589e:	6849      	ldr	r1, [r1, #4]
    58a0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    58a4:	2900      	cmp	r1, #0
    58a6:	d002      	beq.n	58ae <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    58a8:	f831 0b04 	ldrh.w	r0, [r1], #4
    58ac:	4408      	add	r0, r1
    58ae:	bd10      	pop	{r4, pc}
    58b0:	21fc      	movs	r1, #252	; 0xfc
    58b2:	2018      	movs	r0, #24
    58b4:	f7ff fbba 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    58b8:	20000098 	.word	0x20000098
    58bc:	b570      	push	{r4, r5, r6, lr}
    58be:	4b1e      	ldr	r3, [pc, #120]	; (5938 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    58c0:	6845      	ldr	r5, [r0, #4]
    58c2:	4604      	mov	r4, r0
    58c4:	2200      	movs	r2, #0
    58c6:	b1a1      	cbz	r1, 58f2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    58c8:	2001      	movs	r0, #1
    58ca:	7060      	strb	r0, [r4, #1]
    58cc:	8858      	ldrh	r0, [r3, #2]
    58ce:	0881      	lsrs	r1, r0, #2
    58d0:	f05f 0000 	movs.w	r0, #0
    58d4:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    58d8:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    58dc:	831a      	strh	r2, [r3, #24]
    58de:	8419      	strh	r1, [r3, #32]
    58e0:	fb00 5301 	mla	r3, r0, r1, r5
    58e4:	6073      	str	r3, [r6, #4]
    58e6:	1823      	adds	r3, r4, r0
    58e8:	1c40      	adds	r0, r0, #1
    58ea:	751a      	strb	r2, [r3, #20]
    58ec:	2804      	cmp	r0, #4
    58ee:	d3f1      	bcc.n	58d4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    58f0:	bd70      	pop	{r4, r5, r6, pc}
    58f2:	7062      	strb	r2, [r4, #1]
    58f4:	f05f 0000 	movs.w	r0, #0
    58f8:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    58fc:	830a      	strh	r2, [r1, #24]
    58fe:	840a      	strh	r2, [r1, #32]
    5900:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    5904:	604a      	str	r2, [r1, #4]
    5906:	1821      	adds	r1, r4, r0
    5908:	1c40      	adds	r0, r0, #1
    590a:	750a      	strb	r2, [r1, #20]
    590c:	2804      	cmp	r0, #4
    590e:	d3f3      	bcc.n	58f8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    5910:	8858      	ldrh	r0, [r3, #2]
    5912:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    5916:	d201      	bcs.n	591c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    5918:	0846      	lsrs	r6, r0, #1
    591a:	e000      	b.n	591e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    591c:	26ff      	movs	r6, #255	; 0xff
    591e:	f008 fc0f 	bl	e140 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    5922:	6065      	str	r5, [r4, #4]
    5924:	8420      	strh	r0, [r4, #32]
    5926:	1829      	adds	r1, r5, r0
    5928:	60a1      	str	r1, [r4, #8]
    592a:	8466      	strh	r6, [r4, #34]	; 0x22
    592c:	60e5      	str	r5, [r4, #12]
    592e:	84a0      	strh	r0, [r4, #36]	; 0x24
    5930:	6121      	str	r1, [r4, #16]
    5932:	84e6      	strh	r6, [r4, #38]	; 0x26
    5934:	bd70      	pop	{r4, r5, r6, pc}
    5936:	0000      	.short	0x0000
    5938:	2000009c 	.word	0x2000009c

0000593c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    593c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5940:	b170      	cbz	r0, 5960 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    5942:	2500      	movs	r5, #0
    5944:	4411      	add	r1, r2
    5946:	b2cc      	uxtb	r4, r1
    5948:	4e24      	ldr	r6, [pc, #144]	; (59dc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xa0>)
    594a:	1cc1      	adds	r1, r0, #3
    594c:	2700      	movs	r7, #0
    594e:	f021 0103 	bic.w	r1, r1, #3
    5952:	7034      	strb	r4, [r6, #0]
    5954:	4281      	cmp	r1, r0
    5956:	d005      	beq.n	5964 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
    5958:	214e      	movs	r1, #78	; 0x4e
    595a:	2009      	movs	r0, #9
    595c:	f7ff fb66 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5960:	2501      	movs	r5, #1
    5962:	e7ef      	b.n	5944 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    5964:	2b1f      	cmp	r3, #31
    5966:	d804      	bhi.n	5972 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x36>
    5968:	f64f 71ff 	movw	r1, #65535	; 0xffff
    596c:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    5970:	e009      	b.n	5986 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    5972:	0059      	lsls	r1, r3, #1
    5974:	2bff      	cmp	r3, #255	; 0xff
    5976:	d90b      	bls.n	5990 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x54>
    5978:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    597c:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    5980:	d200      	bcs.n	5984 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5982:	4611      	mov	r1, r2
    5984:	b289      	uxth	r1, r1
    5986:	1cc9      	adds	r1, r1, #3
    5988:	f021 0303 	bic.w	r3, r1, #3
    598c:	b135      	cbz	r5, 599c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    598e:	e007      	b.n	59a0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x64>
    5990:	227c      	movs	r2, #124	; 0x7c
    5992:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    5996:	d3f5      	bcc.n	5984 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5998:	217c      	movs	r1, #124	; 0x7c
    599a:	e7f3      	b.n	5984 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    599c:	6070      	str	r0, [r6, #4]
    599e:	8073      	strh	r3, [r6, #2]
    59a0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    59a4:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
    59a8:	2100      	movs	r1, #0
    59aa:	6876      	ldr	r6, [r6, #4]
    59ac:	f04f 0c01 	mov.w	ip, #1
    59b0:	e00d      	b.n	59ce <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x92>
    59b2:	b94d      	cbnz	r5, 59c8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8c>
    59b4:	eb01 0781 	add.w	r7, r1, r1, lsl #2
    59b8:	eb00 0e02 	add.w	lr, r0, r2
    59bc:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    59c0:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    59c4:	f8c7 e004 	str.w	lr, [r7, #4]
    59c8:	1c49      	adds	r1, r1, #1
    59ca:	441a      	add	r2, r3
    59cc:	b2c9      	uxtb	r1, r1
    59ce:	42a1      	cmp	r1, r4
    59d0:	d3ef      	bcc.n	59b2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x76>
    59d2:	1dd2      	adds	r2, r2, #7
    59d4:	f022 0007 	bic.w	r0, r2, #7
    59d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59dc:	2000009c 	.word	0x2000009c

000059e0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    59e0:	b570      	push	{r4, r5, r6, lr}
    59e2:	4a10      	ldr	r2, [pc, #64]	; (5a24 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    59e4:	2000      	movs	r0, #0
    59e6:	6851      	ldr	r1, [r2, #4]
    59e8:	7812      	ldrb	r2, [r2, #0]
    59ea:	e014      	b.n	5a16 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    59ec:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    59f0:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    59f4:	b16b      	cbz	r3, 5a12 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    59f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    59fa:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    59fe:	d00c      	beq.n	5a1a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    5a00:	2500      	movs	r5, #0
    5a02:	70a5      	strb	r5, [r4, #2]
    5a04:	2101      	movs	r1, #1
    5a06:	4620      	mov	r0, r4
    5a08:	f7ff ff58 	bl	58bc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    5a0c:	7025      	strb	r5, [r4, #0]
    5a0e:	4620      	mov	r0, r4
    5a10:	bd70      	pop	{r4, r5, r6, pc}
    5a12:	1c40      	adds	r0, r0, #1
    5a14:	b2c0      	uxtb	r0, r0
    5a16:	4290      	cmp	r0, r2
    5a18:	d3e8      	bcc.n	59ec <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    5a1a:	21a9      	movs	r1, #169	; 0xa9
    5a1c:	2009      	movs	r0, #9
    5a1e:	f7ff fb05 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a22:	0000      	.short	0x0000
    5a24:	2000009c 	.word	0x2000009c

00005a28 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    5a28:	4804      	ldr	r0, [pc, #16]	; (5a3c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    5a2a:	b510      	push	{r4, lr}
    5a2c:	8840      	ldrh	r0, [r0, #2]
    5a2e:	0884      	lsrs	r4, r0, #2
    5a30:	f008 fb86 	bl	e140 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    5a34:	4284      	cmp	r4, r0
    5a36:	d300      	bcc.n	5a3a <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    5a38:	4620      	mov	r0, r4
    5a3a:	bd10      	pop	{r4, pc}
    5a3c:	2000009c 	.word	0x2000009c
    5a40:	b530      	push	{r4, r5, lr}
    5a42:	490d      	ldr	r1, [pc, #52]	; (5a78 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    5a44:	2001      	movs	r0, #1
    5a46:	6048      	str	r0, [r1, #4]
    5a48:	1e82      	subs	r2, r0, #2
    5a4a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    5a4e:	490b      	ldr	r1, [pc, #44]	; (5a7c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    5a50:	6088      	str	r0, [r1, #8]
    5a52:	2300      	movs	r3, #0
    5a54:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    5a58:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    5a5c:	4c08      	ldr	r4, [pc, #32]	; (5a80 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    5a5e:	6023      	str	r3, [r4, #0]
    5a60:	1d25      	adds	r5, r4, #4
    5a62:	6028      	str	r0, [r5, #0]
    5a64:	6088      	str	r0, [r1, #8]
    5a66:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    5a6a:	6023      	str	r3, [r4, #0]
    5a6c:	6028      	str	r0, [r5, #0]
    5a6e:	4906      	ldr	r1, [pc, #24]	; (5a88 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    5a70:	4804      	ldr	r0, [pc, #16]	; (5a84 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    5a72:	6008      	str	r0, [r1, #0]
    5a74:	bd30      	pop	{r4, r5, pc}
    5a76:	0000      	.short	0x0000
    5a78:	4000e000 	.word	0x4000e000
    5a7c:	4000f000 	.word	0x4000f000
    5a80:	4000f500 	.word	0x4000f500
    5a84:	3ff60000 	.word	0x3ff60000
    5a88:	4001f508 	.word	0x4001f508

00005a8c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    5a8c:	b510      	push	{r4, lr}
    5a8e:	4604      	mov	r4, r0
    5a90:	f7ff ffd6 	bl	5a40 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    5a94:	f008 fc27 	bl	e2e6 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    5a98:	f000 f888 	bl	5bac <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    5a9c:	4905      	ldr	r1, [pc, #20]	; (5ab4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>)
    5a9e:	4804      	ldr	r0, [pc, #16]	; (5ab0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    5aa0:	6008      	str	r0, [r1, #0]
    5aa2:	4620      	mov	r0, r4
    5aa4:	f000 f8b8 	bl	5c18 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    5aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5aac:	f000 b8d0 	b.w	5c50 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    5ab0:	3ff60000 	.word	0x3ff60000
    5ab4:	4001f508 	.word	0x4001f508
    5ab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5abc:	4682      	mov	sl, r0
    5abe:	4838      	ldr	r0, [pc, #224]	; (5ba0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    5ac0:	f007 f9c0 	bl	ce44 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5ac4:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 5ba0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>
    5ac8:	b128      	cbz	r0, 5ad6 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4a>
    5aca:	2601      	movs	r6, #1
    5acc:	f10b 0001 	add.w	r0, fp, #1
    5ad0:	21ff      	movs	r1, #255	; 0xff
    5ad2:	7001      	strb	r1, [r0, #0]
    5ad4:	e000      	b.n	5ad8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4c>
    5ad6:	2600      	movs	r6, #0
    5ad8:	f44f 7580 	mov.w	r5, #256	; 0x100
    5adc:	4c31      	ldr	r4, [pc, #196]	; (5ba4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>)
    5ade:	f04f 0800 	mov.w	r8, #0
    5ae2:	1d2f      	adds	r7, r5, #4
    5ae4:	2101      	movs	r1, #1
    5ae6:	6061      	str	r1, [r4, #4]
    5ae8:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    5aec:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    5af0:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    5af4:	6021      	str	r1, [r4, #0]
    5af6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 5ba8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x11c>
    5afa:	e01c      	b.n	5b36 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5afc:	f8d9 0000 	ldr.w	r0, [r9]
    5b00:	06c0      	lsls	r0, r0, #27
    5b02:	d518      	bpl.n	5b36 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5b04:	200e      	movs	r0, #14
    5b06:	f008 fbfd 	bl	e304 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    5b0a:	f3ef 8010 	mrs	r0, PRIMASK
    5b0e:	9000      	str	r0, [sp, #0]
    5b10:	b672      	cpsid	i
    5b12:	2103      	movs	r1, #3
    5b14:	4620      	mov	r0, r4
    5b16:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    5b1a:	4629      	mov	r1, r5
    5b1c:	f008 fbff 	bl	e31e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5b20:	b930      	cbnz	r0, 5b30 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    5b22:	4639      	mov	r1, r7
    5b24:	4620      	mov	r0, r4
    5b26:	f008 fbfa 	bl	e31e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5b2a:	b908      	cbnz	r0, 5b30 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    5b2c:	f7ff f8f0 	bl	4d10 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    5b30:	9800      	ldr	r0, [sp, #0]
    5b32:	b900      	cbnz	r0, 5b36 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5b34:	b662      	cpsie	i
    5b36:	4629      	mov	r1, r5
    5b38:	4620      	mov	r0, r4
    5b3a:	f008 fbf0 	bl	e31e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5b3e:	b928      	cbnz	r0, 5b4c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xc0>
    5b40:	4639      	mov	r1, r7
    5b42:	4620      	mov	r0, r4
    5b44:	f008 fbeb 	bl	e31e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5b48:	2800      	cmp	r0, #0
    5b4a:	d0d7      	beq.n	5afc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x70>
    5b4c:	4639      	mov	r1, r7
    5b4e:	4620      	mov	r0, r4
    5b50:	f008 fbe5 	bl	e31e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5b54:	2800      	cmp	r0, #0
    5b56:	d1c5      	bne.n	5ae4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x58>
    5b58:	bb06      	cbnz	r6, 5b9c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    5b5a:	f89b 1001 	ldrb.w	r1, [fp, #1]
    5b5e:	f88d 1000 	strb.w	r1, [sp]
    5b62:	9900      	ldr	r1, [sp, #0]
    5b64:	9100      	str	r1, [sp, #0]
    5b66:	f89d 1000 	ldrb.w	r1, [sp]
    5b6a:	b109      	cbz	r1, 5b70 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe4>
    5b6c:	2501      	movs	r5, #1
    5b6e:	e000      	b.n	5b72 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe6>
    5b70:	2500      	movs	r5, #0
    5b72:	f10b 0001 	add.w	r0, fp, #1
    5b76:	f880 8000 	strb.w	r8, [r0]
    5b7a:	2003      	movs	r0, #3
    5b7c:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    5b80:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    5b84:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    5b88:	200e      	movs	r0, #14
    5b8a:	f008 fbbb 	bl	e304 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    5b8e:	4804      	ldr	r0, [pc, #16]	; (5ba0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    5b90:	f007 f96f 	bl	ce72 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    5b94:	b115      	cbz	r5, 5b9c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    5b96:	2011      	movs	r0, #17
    5b98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5b9c:	2000      	movs	r0, #0
    5b9e:	e7fb      	b.n	5b98 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    5ba0:	200002af 	.word	0x200002af
    5ba4:	4000e000 	.word	0x4000e000
    5ba8:	e000ed10 	.word	0xe000ed10

00005bac <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    5bac:	b510      	push	{r4, lr}
    5bae:	4806      	ldr	r0, [pc, #24]	; (5bc8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    5bb0:	f007 f95b 	bl	ce6a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    5bb4:	b118      	cbz	r0, 5bbe <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    5bb6:	2127      	movs	r1, #39	; 0x27
    5bb8:	201d      	movs	r0, #29
    5bba:	f7ff fa37 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bbe:	4802      	ldr	r0, [pc, #8]	; (5bc8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    5bc0:	2100      	movs	r1, #0
    5bc2:	7041      	strb	r1, [r0, #1]
    5bc4:	bd10      	pop	{r4, pc}
    5bc6:	0000      	.short	0x0000
    5bc8:	200002af 	.word	0x200002af

00005bcc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    5bcc:	b570      	push	{r4, r5, r6, lr}
    5bce:	4911      	ldr	r1, [pc, #68]	; (5c14 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    5bd0:	680a      	ldr	r2, [r1, #0]
    5bd2:	b1ea      	cbz	r2, 5c10 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    5bd4:	2300      	movs	r3, #0
    5bd6:	461d      	mov	r5, r3
    5bd8:	2401      	movs	r4, #1
    5bda:	684a      	ldr	r2, [r1, #4]
    5bdc:	1c52      	adds	r2, r2, #1
    5bde:	604a      	str	r2, [r1, #4]
    5be0:	2a09      	cmp	r2, #9
    5be2:	d300      	bcc.n	5be6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    5be4:	604d      	str	r5, [r1, #4]
    5be6:	790e      	ldrb	r6, [r1, #4]
    5be8:	fa04 f206 	lsl.w	r2, r4, r6
    5bec:	680e      	ldr	r6, [r1, #0]
    5bee:	4216      	tst	r6, r2
    5bf0:	d00b      	beq.n	5c0a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    5bf2:	f3ef 8310 	mrs	r3, PRIMASK
    5bf6:	b672      	cpsid	i
    5bf8:	680c      	ldr	r4, [r1, #0]
    5bfa:	4394      	bics	r4, r2
    5bfc:	600c      	str	r4, [r1, #0]
    5bfe:	b903      	cbnz	r3, 5c02 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    5c00:	b662      	cpsie	i
    5c02:	6849      	ldr	r1, [r1, #4]
    5c04:	6001      	str	r1, [r0, #0]
    5c06:	2000      	movs	r0, #0
    5c08:	bd70      	pop	{r4, r5, r6, pc}
    5c0a:	1c5b      	adds	r3, r3, #1
    5c0c:	2b09      	cmp	r3, #9
    5c0e:	d3e4      	bcc.n	5bda <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    5c10:	2005      	movs	r0, #5
    5c12:	bd70      	pop	{r4, r5, r6, pc}
    5c14:	200000a4 	.word	0x200000a4

00005c18 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    5c18:	4802      	ldr	r0, [pc, #8]	; (5c24 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    5c1a:	2100      	movs	r1, #0
    5c1c:	6001      	str	r1, [r0, #0]
    5c1e:	6041      	str	r1, [r0, #4]
    5c20:	4770      	bx	lr
    5c22:	0000      	.short	0x0000
    5c24:	200000a4 	.word	0x200000a4

00005c28 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    5c28:	b510      	push	{r4, lr}
    5c2a:	4c08      	ldr	r4, [pc, #32]	; (5c4c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    5c2c:	7861      	ldrb	r1, [r4, #1]
    5c2e:	b109      	cbz	r1, 5c34 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    5c30:	200f      	movs	r0, #15
    5c32:	bd10      	pop	{r4, pc}
    5c34:	f7fe fff8 	bl	4c28 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    5c38:	7020      	strb	r0, [r4, #0]
    5c3a:	28ff      	cmp	r0, #255	; 0xff
    5c3c:	d001      	beq.n	5c42 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    5c3e:	2000      	movs	r0, #0
    5c40:	bd10      	pop	{r4, pc}
    5c42:	2178      	movs	r1, #120	; 0x78
    5c44:	201f      	movs	r0, #31
    5c46:	f7ff f9f1 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c4a:	0000      	.short	0x0000
    5c4c:	200000ac 	.word	0x200000ac

00005c50 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    5c50:	4901      	ldr	r1, [pc, #4]	; (5c58 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    5c52:	2000      	movs	r0, #0
    5c54:	7048      	strb	r0, [r1, #1]
    5c56:	4770      	bx	lr
    5c58:	200000ac 	.word	0x200000ac

00005c5c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    5c5c:	4806      	ldr	r0, [pc, #24]	; (5c78 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    5c5e:	4a07      	ldr	r2, [pc, #28]	; (5c7c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    5c60:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    5c62:	8852      	ldrh	r2, [r2, #2]
    5c64:	4291      	cmp	r1, r2
    5c66:	d104      	bne.n	5c72 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5c68:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    5c6c:	b108      	cbz	r0, 5c72 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5c6e:	2000      	movs	r0, #0
    5c70:	4770      	bx	lr
    5c72:	2001      	movs	r0, #1
    5c74:	4770      	bx	lr
    5c76:	0000      	.short	0x0000
    5c78:	200014d4 	.word	0x200014d4
    5c7c:	20000294 	.word	0x20000294

00005c80 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    5c80:	4901      	ldr	r1, [pc, #4]	; (5c88 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    5c82:	8048      	strh	r0, [r1, #2]
    5c84:	4770      	bx	lr
    5c86:	0000      	.short	0x0000
    5c88:	20000294 	.word	0x20000294

00005c8c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    5c8c:	4808      	ldr	r0, [pc, #32]	; (5cb0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    5c8e:	4a09      	ldr	r2, [pc, #36]	; (5cb4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    5c90:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    5c92:	8852      	ldrh	r2, [r2, #2]
    5c94:	4291      	cmp	r1, r2
    5c96:	d109      	bne.n	5cac <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5c98:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5c9c:	8481      	strh	r1, [r0, #36]	; 0x24
    5c9e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    5ca2:	b119      	cbz	r1, 5cac <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5ca4:	2100      	movs	r1, #0
    5ca6:	7001      	strb	r1, [r0, #0]
    5ca8:	2001      	movs	r0, #1
    5caa:	4770      	bx	lr
    5cac:	2000      	movs	r0, #0
    5cae:	4770      	bx	lr
    5cb0:	200014d4 	.word	0x200014d4
    5cb4:	20000294 	.word	0x20000294

00005cb8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    5cb8:	4807      	ldr	r0, [pc, #28]	; (5cd8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    5cba:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    5cbe:	2901      	cmp	r1, #1
    5cc0:	d007      	beq.n	5cd2 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    5cc2:	2101      	movs	r1, #1
    5cc4:	7001      	strb	r1, [r0, #0]
    5cc6:	4805      	ldr	r0, [pc, #20]	; (5cdc <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    5cc8:	4903      	ldr	r1, [pc, #12]	; (5cd8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    5cca:	8800      	ldrh	r0, [r0, #0]
    5ccc:	8488      	strh	r0, [r1, #36]	; 0x24
    5cce:	2001      	movs	r0, #1
    5cd0:	4770      	bx	lr
    5cd2:	2000      	movs	r0, #0
    5cd4:	4770      	bx	lr
    5cd6:	0000      	.short	0x0000
    5cd8:	200014d4 	.word	0x200014d4
    5cdc:	20000294 	.word	0x20000294

00005ce0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    5ce0:	4906      	ldr	r1, [pc, #24]	; (5cfc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    5ce2:	4b07      	ldr	r3, [pc, #28]	; (5d00 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    5ce4:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5ce6:	885b      	ldrh	r3, [r3, #2]
    5ce8:	429a      	cmp	r2, r3
    5cea:	d105      	bne.n	5cf8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    5cec:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5cf0:	b112      	cbz	r2, 5cf8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    5cf2:	6001      	str	r1, [r0, #0]
    5cf4:	2001      	movs	r0, #1
    5cf6:	4770      	bx	lr
    5cf8:	2000      	movs	r0, #0
    5cfa:	4770      	bx	lr
    5cfc:	200014d4 	.word	0x200014d4
    5d00:	20000294 	.word	0x20000294

00005d04 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    5d04:	4909      	ldr	r1, [pc, #36]	; (5d2c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5d06:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5d08:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    5d0c:	3bff      	subs	r3, #255	; 0xff
    5d0e:	d002      	beq.n	5d16 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    5d10:	2100      	movs	r1, #0
    5d12:	6001      	str	r1, [r0, #0]
    5d14:	e007      	b.n	5d26 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5d16:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5d1a:	4904      	ldr	r1, [pc, #16]	; (5d2c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5d1c:	2a01      	cmp	r2, #1
    5d1e:	d002      	beq.n	5d26 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5d20:	6001      	str	r1, [r0, #0]
    5d22:	2001      	movs	r0, #1
    5d24:	4770      	bx	lr
    5d26:	2000      	movs	r0, #0
    5d28:	4770      	bx	lr
    5d2a:	0000      	.short	0x0000
    5d2c:	200014d4 	.word	0x200014d4

00005d30 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    5d30:	4901      	ldr	r1, [pc, #4]	; (5d38 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    5d32:	8008      	strh	r0, [r1, #0]
    5d34:	4770      	bx	lr
    5d36:	0000      	.short	0x0000
    5d38:	20000294 	.word	0x20000294

00005d3c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    5d3c:	4905      	ldr	r1, [pc, #20]	; (5d54 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    5d3e:	2000      	movs	r0, #0
    5d40:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5d44:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5d48:	8488      	strh	r0, [r1, #36]	; 0x24
    5d4a:	4903      	ldr	r1, [pc, #12]	; (5d58 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    5d4c:	8008      	strh	r0, [r1, #0]
    5d4e:	8048      	strh	r0, [r1, #2]
    5d50:	4770      	bx	lr
    5d52:	0000      	.short	0x0000
    5d54:	200014d4 	.word	0x200014d4
    5d58:	20000294 	.word	0x20000294
    5d5c:	4905      	ldr	r1, [pc, #20]	; (5d74 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    5d5e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5d60:	4282      	cmp	r2, r0
    5d62:	d105      	bne.n	5d70 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    5d64:	2000      	movs	r0, #0
    5d66:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5d6a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5d6e:	8488      	strh	r0, [r1, #36]	; 0x24
    5d70:	4770      	bx	lr
    5d72:	0000      	.short	0x0000
    5d74:	200014d4 	.word	0x200014d4

00005d78 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    5d78:	4a0a      	ldr	r2, [pc, #40]	; (5da4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    5d7a:	b110      	cbz	r0, 5d82 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    5d7c:	2801      	cmp	r0, #1
    5d7e:	d007      	beq.n	5d90 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    5d80:	e00e      	b.n	5da0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5d82:	7850      	ldrb	r0, [r2, #1]
    5d84:	b160      	cbz	r0, 5da0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5d86:	f8d2 0002 	ldr.w	r0, [r2, #2]
    5d8a:	6008      	str	r0, [r1, #0]
    5d8c:	88d0      	ldrh	r0, [r2, #6]
    5d8e:	e004      	b.n	5d9a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    5d90:	7810      	ldrb	r0, [r2, #0]
    5d92:	b128      	cbz	r0, 5da0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5d94:	6890      	ldr	r0, [r2, #8]
    5d96:	6008      	str	r0, [r1, #0]
    5d98:	8990      	ldrh	r0, [r2, #12]
    5d9a:	8088      	strh	r0, [r1, #4]
    5d9c:	2001      	movs	r0, #1
    5d9e:	4770      	bx	lr
    5da0:	2000      	movs	r0, #0
    5da2:	4770      	bx	lr
    5da4:	200002b1 	.word	0x200002b1

00005da8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    5da8:	4a08      	ldr	r2, [pc, #32]	; (5dcc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    5daa:	2301      	movs	r3, #1
    5dac:	b138      	cbz	r0, 5dbe <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    5dae:	2801      	cmp	r0, #1
    5db0:	d104      	bne.n	5dbc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    5db2:	7013      	strb	r3, [r2, #0]
    5db4:	6808      	ldr	r0, [r1, #0]
    5db6:	6090      	str	r0, [r2, #8]
    5db8:	8888      	ldrh	r0, [r1, #4]
    5dba:	8190      	strh	r0, [r2, #12]
    5dbc:	4770      	bx	lr
    5dbe:	7053      	strb	r3, [r2, #1]
    5dc0:	6808      	ldr	r0, [r1, #0]
    5dc2:	f8c2 0002 	str.w	r0, [r2, #2]
    5dc6:	8888      	ldrh	r0, [r1, #4]
    5dc8:	80d0      	strh	r0, [r2, #6]
    5dca:	4770      	bx	lr
    5dcc:	200002b1 	.word	0x200002b1

00005dd0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    5dd0:	4906      	ldr	r1, [pc, #24]	; (5dec <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    5dd2:	b110      	cbz	r0, 5dda <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    5dd4:	2801      	cmp	r0, #1
    5dd6:	d002      	beq.n	5dde <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    5dd8:	e005      	b.n	5de6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5dda:	7848      	ldrb	r0, [r1, #1]
    5ddc:	e000      	b.n	5de0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    5dde:	7808      	ldrb	r0, [r1, #0]
    5de0:	b108      	cbz	r0, 5de6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5de2:	2001      	movs	r0, #1
    5de4:	4770      	bx	lr
    5de6:	2000      	movs	r0, #0
    5de8:	4770      	bx	lr
    5dea:	0000      	.short	0x0000
    5dec:	200002b1 	.word	0x200002b1

00005df0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    5df0:	4901      	ldr	r1, [pc, #4]	; (5df8 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    5df2:	7748      	strb	r0, [r1, #29]
    5df4:	4770      	bx	lr
    5df6:	0000      	.short	0x0000
    5df8:	20000e22 	.word	0x20000e22

00005dfc <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    5dfc:	4801      	ldr	r0, [pc, #4]	; (5e04 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    5dfe:	78c0      	ldrb	r0, [r0, #3]
    5e00:	4770      	bx	lr
    5e02:	0000      	.short	0x0000
    5e04:	200000c8 	.word	0x200000c8

00005e08 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    5e08:	4801      	ldr	r0, [pc, #4]	; (5e10 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    5e0a:	7900      	ldrb	r0, [r0, #4]
    5e0c:	4770      	bx	lr
    5e0e:	0000      	.short	0x0000
    5e10:	200000c8 	.word	0x200000c8

00005e14 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    5e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5e18:	4c14      	ldr	r4, [pc, #80]	; (5e6c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x58>)
    5e1a:	4606      	mov	r6, r0
    5e1c:	7f60      	ldrb	r0, [r4, #29]
    5e1e:	b318      	cbz	r0, 5e68 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x54>
    5e20:	7f20      	ldrb	r0, [r4, #28]
    5e22:	f88d 0000 	strb.w	r0, [sp]
    5e26:	9800      	ldr	r0, [sp, #0]
    5e28:	9000      	str	r0, [sp, #0]
    5e2a:	f89d 0000 	ldrb.w	r0, [sp]
    5e2e:	2700      	movs	r7, #0
    5e30:	b1d0      	cbz	r0, 5e68 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x54>
    5e32:	f104 051c 	add.w	r5, r4, #28
    5e36:	f04f 081a 	mov.w	r8, #26
    5e3a:	f104 090e 	add.w	r9, r4, #14
    5e3e:	7f20      	ldrb	r0, [r4, #28]
    5e40:	f88d 0000 	strb.w	r0, [sp]
    5e44:	9800      	ldr	r0, [sp, #0]
    5e46:	9000      	str	r0, [sp, #0]
    5e48:	f89d 0000 	ldrb.w	r0, [sp]
    5e4c:	b148      	cbz	r0, 5e62 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4e>
    5e4e:	702f      	strb	r7, [r5, #0]
    5e50:	7077      	strb	r7, [r6, #1]
    5e52:	f886 8000 	strb.w	r8, [r6]
    5e56:	220e      	movs	r2, #14
    5e58:	4649      	mov	r1, r9
    5e5a:	1d30      	adds	r0, r6, #4
    5e5c:	f007 f89b 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5e60:	e7ed      	b.n	5e3e <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x2a>
    5e62:	2001      	movs	r0, #1
    5e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5e68:	2000      	movs	r0, #0
    5e6a:	e7fb      	b.n	5e64 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>
    5e6c:	20000e22 	.word	0x20000e22

00005e70 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5e70:	b510      	push	{r4, lr}
    5e72:	4604      	mov	r4, r0
    5e74:	f000 f950 	bl	6118 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    5e78:	b118      	cbz	r0, 5e82 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    5e7a:	21be      	movs	r1, #190	; 0xbe
    5e7c:	2027      	movs	r0, #39	; 0x27
    5e7e:	f7ff f8d5 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e82:	4803      	ldr	r0, [pc, #12]	; (5e90 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    5e84:	2101      	movs	r1, #1
    5e86:	f008 fe31 	bl	eaec <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5e8a:	4802      	ldr	r0, [pc, #8]	; (5e94 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    5e8c:	62c4      	str	r4, [r0, #44]	; 0x2c
    5e8e:	bd10      	pop	{r4, pc}
    5e90:	20000e00 	.word	0x20000e00
    5e94:	200000c8 	.word	0x200000c8

00005e98 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    5e98:	4901      	ldr	r1, [pc, #4]	; (5ea0 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    5e9a:	2001      	movs	r0, #1
    5e9c:	7188      	strb	r0, [r1, #6]
    5e9e:	4770      	bx	lr
    5ea0:	200000c8 	.word	0x200000c8

00005ea4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ea8:	4c5d      	ldr	r4, [pc, #372]	; (6020 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>)
    5eaa:	9d06      	ldr	r5, [sp, #24]
    5eac:	7826      	ldrb	r6, [r4, #0]
    5eae:	2e00      	cmp	r6, #0
    5eb0:	d16a      	bne.n	5f88 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    5eb2:	2a00      	cmp	r2, #0
    5eb4:	d068      	beq.n	5f88 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    5eb6:	2b00      	cmp	r3, #0
    5eb8:	d066      	beq.n	5f88 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    5eba:	2d00      	cmp	r5, #0
    5ebc:	d064      	beq.n	5f88 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    5ebe:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    5ec2:	f104 0614 	add.w	r6, r4, #20
    5ec6:	2000      	movs	r0, #0
    5ec8:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    5ecc:	71a0      	strb	r0, [r4, #6]
    5ece:	7160      	strb	r0, [r4, #5]
    5ed0:	70e0      	strb	r0, [r4, #3]
    5ed2:	70a0      	strb	r0, [r4, #2]
    5ed4:	7120      	strb	r0, [r4, #4]
    5ed6:	81a0      	strh	r0, [r4, #12]
    5ed8:	81e0      	strh	r0, [r4, #14]
    5eda:	f000 f955 	bl	6188 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5ede:	4606      	mov	r6, r0
    5ee0:	f000 f94c 	bl	617c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5ee4:	4605      	mov	r5, r0
    5ee6:	f005 ffeb 	bl	bec0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    5eea:	f005 fd1d 	bl	b928 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5eee:	f995 0072 	ldrsb.w	r0, [r5, #114]	; 0x72
    5ef2:	f006 f86b 	bl	bfcc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    5ef6:	f105 001c 	add.w	r0, r5, #28
    5efa:	f006 f951 	bl	c1a0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    5efe:	6968      	ldr	r0, [r5, #20]
    5f00:	f006 f944 	bl	c18c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    5f04:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    5f08:	f006 f97e 	bl	c208 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    5f0c:	f104 0038 	add.w	r0, r4, #56	; 0x38
    5f10:	6840      	ldr	r0, [r0, #4]
    5f12:	f890 0184 	ldrb.w	r0, [r0, #388]	; 0x184
    5f16:	b108      	cbz	r0, 5f1c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    5f18:	f005 ff42 	bl	bda0 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    5f1c:	f895 106f 	ldrb.w	r1, [r5, #111]	; 0x6f
    5f20:	2001      	movs	r0, #1
    5f22:	f005 fe75 	bl	bc10 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    5f26:	2800      	cmp	r0, #0
    5f28:	d073      	beq.n	6012 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16e>
    5f2a:	483e      	ldr	r0, [pc, #248]	; (6024 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x180>)
    5f2c:	f005 fee8 	bl	bd00 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    5f30:	8828      	ldrh	r0, [r5, #0]
    5f32:	f7ff fcab 	bl	588c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5f36:	6320      	str	r0, [r4, #48]	; 0x30
    5f38:	8828      	ldrh	r0, [r5, #0]
    5f3a:	f7ff fc91 	bl	5860 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5f3e:	6360      	str	r0, [r4, #52]	; 0x34
    5f40:	f106 0168 	add.w	r1, r6, #104	; 0x68
    5f44:	4838      	ldr	r0, [pc, #224]	; (6028 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5f46:	c98e      	ldmia	r1, {r1, r2, r3, r7}
    5f48:	f100 0808 	add.w	r8, r0, #8
    5f4c:	e888 008e 	stmia.w	r8, {r1, r2, r3, r7}
    5f50:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    5f52:	f8c0 1021 	str.w	r1, [r0, #33]	; 0x21
    5f56:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    5f58:	f8c0 1025 	str.w	r1, [r0, #37]	; 0x25
    5f5c:	f000 f99a 	bl	6294 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x160>
    5f60:	4601      	mov	r1, r0
    5f62:	8fa8      	ldrh	r0, [r5, #60]	; 0x3c
    5f64:	f008 fb55 	bl	e612 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5f68:	8f29      	ldrh	r1, [r5, #56]	; 0x38
    5f6a:	4281      	cmp	r1, r0
    5f6c:	d200      	bcs.n	5f70 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xcc>
    5f6e:	4608      	mov	r0, r1
    5f70:	7220      	strb	r0, [r4, #8]
    5f72:	46a0      	mov	r8, r4
    5f74:	f895 106f 	ldrb.w	r1, [r5, #111]	; 0x6f
    5f78:	f8b5 0042 	ldrh.w	r0, [r5, #66]	; 0x42
    5f7c:	7cf7      	ldrb	r7, [r6, #19]
    5f7e:	f8b5 4040 	ldrh.w	r4, [r5, #64]	; 0x40
    5f82:	2908      	cmp	r1, #8
    5f84:	d104      	bne.n	5f90 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    5f86:	e002      	b.n	5f8e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xea>
    5f88:	f240 1115 	movw	r1, #277	; 0x115
    5f8c:	e045      	b.n	601a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    5f8e:	2104      	movs	r1, #4
    5f90:	f008 fb3f 	bl	e612 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5f94:	b90f      	cbnz	r7, 5f9a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf6>
    5f96:	1d00      	adds	r0, r0, #4
    5f98:	b280      	uxth	r0, r0
    5f9a:	4284      	cmp	r4, r0
    5f9c:	d200      	bcs.n	5fa0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfc>
    5f9e:	4620      	mov	r0, r4
    5fa0:	b2c4      	uxtb	r4, r0
    5fa2:	f888 4009 	strb.w	r4, [r8, #9]
    5fa6:	7cf1      	ldrb	r1, [r6, #19]
    5fa8:	2900      	cmp	r1, #0
    5faa:	d001      	beq.n	5fb0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x10c>
    5fac:	f04f 0104 	mov.w	r1, #4
    5fb0:	4421      	add	r1, r4
    5fb2:	f888 1007 	strb.w	r1, [r8, #7]
    5fb6:	d014      	beq.n	5fe2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x13e>
    5fb8:	481b      	ldr	r0, [pc, #108]	; (6028 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5fba:	f04f 0701 	mov.w	r7, #1
    5fbe:	f100 0008 	add.w	r0, r0, #8
    5fc2:	7607      	strb	r7, [r0, #24]
    5fc4:	e9d6 1218 	ldrd	r1, r2, [r6, #96]	; 0x60
    5fc8:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5fcc:	f895 006f 	ldrb.w	r0, [r5, #111]	; 0x6f
    5fd0:	f008 fa25 	bl	e41e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5fd4:	4914      	ldr	r1, [pc, #80]	; (6028 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5fd6:	4603      	mov	r3, r0
    5fd8:	4622      	mov	r2, r4
    5fda:	3108      	adds	r1, #8
    5fdc:	4638      	mov	r0, r7
    5fde:	f005 fc0f 	bl	b800 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    5fe2:	2001      	movs	r0, #1
    5fe4:	f000 fb7e 	bl	66e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b0>
    5fe8:	4810      	ldr	r0, [pc, #64]	; (602c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    5fea:	6800      	ldr	r0, [r0, #0]
    5fec:	2803      	cmp	r0, #3
    5fee:	d012      	beq.n	6016 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    5ff0:	280b      	cmp	r0, #11
    5ff2:	d010      	beq.n	6016 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    5ff4:	480c      	ldr	r0, [pc, #48]	; (6028 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5ff6:	220e      	movs	r2, #14
    5ff8:	2100      	movs	r1, #0
    5ffa:	3052      	adds	r0, #82	; 0x52
    5ffc:	f007 f845 	bl	d08a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6000:	4809      	ldr	r0, [pc, #36]	; (6028 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    6002:	88b1      	ldrh	r1, [r6, #4]
    6004:	3052      	adds	r0, #82	; 0x52
    6006:	8041      	strh	r1, [r0, #2]
    6008:	8829      	ldrh	r1, [r5, #0]
    600a:	8001      	strh	r1, [r0, #0]
    600c:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    6010:	7101      	strb	r1, [r0, #4]
    6012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6016:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
    601a:	2027      	movs	r0, #39	; 0x27
    601c:	f7ff f806 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6020:	200000c8 	.word	0x200000c8
    6024:	000068e4 	.word	0x000068e4
    6028:	20000dd0 	.word	0x20000dd0
    602c:	40001550 	.word	0x40001550

00006030 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    6030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6034:	4605      	mov	r5, r0
    6036:	f000 f8a7 	bl	6188 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    603a:	4e32      	ldr	r6, [pc, #200]	; (6104 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd4>)
    603c:	4604      	mov	r4, r0
    603e:	f04f 0800 	mov.w	r8, #0
    6042:	6a70      	ldr	r0, [r6, #36]	; 0x24
    6044:	7847      	ldrb	r7, [r0, #1]
    6046:	b10d      	cbz	r5, 604c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x1c>
    6048:	2d01      	cmp	r5, #1
    604a:	d101      	bne.n	6050 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    604c:	f886 8001 	strb.w	r8, [r6, #1]
    6050:	7870      	ldrb	r0, [r6, #1]
    6052:	f04f 0901 	mov.w	r9, #1
    6056:	b150      	cbz	r0, 606e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x3e>
    6058:	2801      	cmp	r0, #1
    605a:	d01a      	beq.n	6092 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x62>
    605c:	2802      	cmp	r0, #2
    605e:	d034      	beq.n	60ca <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9a>
    6060:	2803      	cmp	r0, #3
    6062:	d048      	beq.n	60f6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc6>
    6064:	f240 4114 	movw	r1, #1044	; 0x414
    6068:	2027      	movs	r0, #39	; 0x27
    606a:	f7fe ffdf 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    606e:	2d01      	cmp	r5, #1
    6070:	d032      	beq.n	60d8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    6072:	f000 f8fb 	bl	626c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    6076:	4639      	mov	r1, r7
    6078:	2201      	movs	r2, #1
    607a:	6b70      	ldr	r0, [r6, #52]	; 0x34
    607c:	f007 fd35 	bl	daea <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    6080:	e028      	b.n	60d4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa4>
    6082:	bf00      	nop
    6084:	f884 8008 	strb.w	r8, [r4, #8]
    6088:	e031      	b.n	60ee <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    608a:	bf00      	nop
    608c:	f884 9008 	strb.w	r9, [r4, #8]
    6090:	e02d      	b.n	60ee <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    6092:	2d01      	cmp	r5, #1
    6094:	d008      	beq.n	60a8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>
    6096:	f000 f8e9 	bl	626c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    609a:	4639      	mov	r1, r7
    609c:	2200      	movs	r2, #0
    609e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    60a0:	f007 fd23 	bl	daea <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    60a4:	2d02      	cmp	r5, #2
    60a6:	d00b      	beq.n	60c0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    60a8:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    60ac:	1c40      	adds	r0, r0, #1
    60ae:	f141 0100 	adc.w	r1, r1, #0
    60b2:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    60b6:	7a20      	ldrb	r0, [r4, #8]
    60b8:	2801      	cmp	r0, #1
    60ba:	d003      	beq.n	60c4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    60bc:	f884 9008 	strb.w	r9, [r4, #8]
    60c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    60c4:	f884 8008 	strb.w	r8, [r4, #8]
    60c8:	e7fa      	b.n	60c0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    60ca:	2d01      	cmp	r5, #1
    60cc:	d004      	beq.n	60d8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    60ce:	6b70      	ldr	r0, [r6, #52]	; 0x34
    60d0:	f007 ff1c 	bl	df0c <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    60d4:	2d02      	cmp	r5, #2
    60d6:	d0f3      	beq.n	60c0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    60d8:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    60dc:	1c40      	adds	r0, r0, #1
    60de:	f141 0100 	adc.w	r1, r1, #0
    60e2:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    60e6:	7a20      	ldrb	r0, [r4, #8]
    60e8:	2801      	cmp	r0, #1
    60ea:	d1cf      	bne.n	608c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x5c>
    60ec:	e7ca      	b.n	6084 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x54>
    60ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    60f2:	f001 b8d1 	b.w	7298 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    60f6:	2d01      	cmp	r5, #1
    60f8:	d0e2      	beq.n	60c0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    60fa:	6b70      	ldr	r0, [r6, #52]	; 0x34
    60fc:	f007 ff06 	bl	df0c <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    6100:	e7f5      	b.n	60ee <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    6102:	0000      	.short	0x0000
    6104:	200000c8 	.word	0x200000c8

00006108 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    6108:	4802      	ldr	r0, [pc, #8]	; (6114 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    610a:	89c0      	ldrh	r0, [r0, #14]
    610c:	f3c0 2080 	ubfx	r0, r0, #10, #1
    6110:	4770      	bx	lr
    6112:	0000      	.short	0x0000
    6114:	200000c8 	.word	0x200000c8

00006118 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    6118:	4804      	ldr	r0, [pc, #16]	; (612c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    611a:	7800      	ldrb	r0, [r0, #0]
    611c:	b108      	cbz	r0, 6122 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    611e:	200c      	movs	r0, #12
    6120:	4770      	bx	lr
    6122:	4903      	ldr	r1, [pc, #12]	; (6130 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    6124:	2000      	movs	r0, #0
    6126:	7748      	strb	r0, [r1, #29]
    6128:	4770      	bx	lr
    612a:	0000      	.short	0x0000
    612c:	200000c8 	.word	0x200000c8
    6130:	20000e22 	.word	0x20000e22

00006134 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    6134:	480c      	ldr	r0, [pc, #48]	; (6168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    6136:	b510      	push	{r4, lr}
    6138:	7801      	ldrb	r1, [r0, #0]
    613a:	b149      	cbz	r1, 6150 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    613c:	f100 0138 	add.w	r1, r0, #56	; 0x38
    6140:	7800      	ldrb	r0, [r0, #0]
    6142:	2802      	cmp	r0, #2
    6144:	d008      	beq.n	6158 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    6146:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    614a:	2027      	movs	r0, #39	; 0x27
    614c:	f7fe ff6e 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6154:	f000 b9e6 	b.w	6524 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    6158:	6848      	ldr	r0, [r1, #4]
    615a:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    615e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6162:	f005 bdd5 	b.w	bd10 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    6166:	0000      	.short	0x0000
    6168:	200000c8 	.word	0x200000c8
    616c:	4a02      	ldr	r2, [pc, #8]	; (6178 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    616e:	8993      	ldrh	r3, [r2, #12]
    6170:	4303      	orrs	r3, r0
    6172:	8193      	strh	r3, [r2, #12]
    6174:	6952      	ldr	r2, [r2, #20]
    6176:	4710      	bx	r2
    6178:	200000c8 	.word	0x200000c8
    617c:	4801      	ldr	r0, [pc, #4]	; (6184 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    617e:	6840      	ldr	r0, [r0, #4]
    6180:	4770      	bx	lr
    6182:	0000      	.short	0x0000
    6184:	20000100 	.word	0x20000100
    6188:	4801      	ldr	r0, [pc, #4]	; (6190 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    618a:	6840      	ldr	r0, [r0, #4]
    618c:	3078      	adds	r0, #120	; 0x78
    618e:	4770      	bx	lr
    6190:	20000100 	.word	0x20000100
    6194:	4a01      	ldr	r2, [pc, #4]	; (619c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    6196:	2100      	movs	r1, #0
    6198:	6952      	ldr	r2, [r2, #20]
    619a:	4710      	bx	r2
    619c:	200000c8 	.word	0x200000c8
    61a0:	b570      	push	{r4, r5, r6, lr}
    61a2:	f7ff fff1 	bl	6188 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    61a6:	4604      	mov	r4, r0
    61a8:	f7ff ffe8 	bl	617c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    61ac:	4605      	mov	r5, r0
    61ae:	4621      	mov	r1, r4
    61b0:	f008 fab2 	bl	e718 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    61b4:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
    61b8:	2901      	cmp	r1, #1
    61ba:	d114      	bne.n	61e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    61bc:	2800      	cmp	r0, #0
    61be:	d012      	beq.n	61e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    61c0:	4809      	ldr	r0, [pc, #36]	; (61e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    61c2:	6842      	ldr	r2, [r0, #4]
    61c4:	8828      	ldrh	r0, [r5, #0]
    61c6:	f8a2 0206 	strh.w	r0, [r2, #518]	; 0x206
    61ca:	7a60      	ldrb	r0, [r4, #9]
    61cc:	f882 0208 	strb.w	r0, [r2, #520]	; 0x208
    61d0:	7aa0      	ldrb	r0, [r4, #10]
    61d2:	f882 0209 	strb.w	r0, [r2, #521]	; 0x209
    61d6:	f502 7201 	add.w	r2, r2, #516	; 0x204
    61da:	20ff      	movs	r0, #255	; 0xff
    61dc:	7010      	strb	r0, [r2, #0]
    61de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    61e2:	f001 b859 	b.w	7298 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    61e6:	bd70      	pop	{r4, r5, r6, pc}
    61e8:	20000100 	.word	0x20000100
    61ec:	b570      	push	{r4, r5, r6, lr}
    61ee:	4605      	mov	r5, r0
    61f0:	2901      	cmp	r1, #1
    61f2:	d818      	bhi.n	6226 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    61f4:	4c12      	ldr	r4, [pc, #72]	; (6240 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>)
    61f6:	69a1      	ldr	r1, [r4, #24]
    61f8:	4788      	blx	r1
    61fa:	b1a0      	cbz	r0, 6226 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    61fc:	7960      	ldrb	r0, [r4, #5]
    61fe:	b990      	cbnz	r0, 6226 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    6200:	b9e5      	cbnz	r5, 623c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    6202:	f104 0010 	add.w	r0, r4, #16
    6206:	7801      	ldrb	r1, [r0, #0]
    6208:	06c8      	lsls	r0, r1, #27
    620a:	d405      	bmi.n	6218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    620c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    620e:	7800      	ldrb	r0, [r0, #0]
    6210:	06c0      	lsls	r0, r0, #27
    6212:	d401      	bmi.n	6218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    6214:	2001      	movs	r0, #1
    6216:	e000      	b.n	621a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    6218:	2000      	movs	r0, #0
    621a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    621c:	b92a      	cbnz	r2, 622a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    621e:	8962      	ldrh	r2, [r4, #10]
    6220:	b11a      	cbz	r2, 622a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    6222:	06c9      	lsls	r1, r1, #27
    6224:	d401      	bmi.n	622a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    6226:	2001      	movs	r0, #1
    6228:	bd70      	pop	{r4, r5, r6, pc}
    622a:	89a1      	ldrh	r1, [r4, #12]
    622c:	078a      	lsls	r2, r1, #30
    622e:	d503      	bpl.n	6238 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    6230:	6a22      	ldr	r2, [r4, #32]
    6232:	78d2      	ldrb	r2, [r2, #3]
    6234:	2a02      	cmp	r2, #2
    6236:	d001      	beq.n	623c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    6238:	4308      	orrs	r0, r1
    623a:	d1f4      	bne.n	6226 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    623c:	2000      	movs	r0, #0
    623e:	bd70      	pop	{r4, r5, r6, pc}
    6240:	200000c8 	.word	0x200000c8
    6244:	b530      	push	{r4, r5, lr}
    6246:	4b08      	ldr	r3, [pc, #32]	; (6268 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>)
    6248:	88dd      	ldrh	r5, [r3, #6]
    624a:	891c      	ldrh	r4, [r3, #8]
    624c:	b12a      	cbz	r2, 625a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x126>
    624e:	b908      	cbnz	r0, 6254 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    6250:	b905      	cbnz	r5, 6254 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    6252:	b114      	cbz	r4, 625a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x126>
    6254:	8958      	ldrh	r0, [r3, #10]
    6256:	1c40      	adds	r0, r0, #1
    6258:	8158      	strh	r0, [r3, #10]
    625a:	b111      	cbz	r1, 6262 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12e>
    625c:	1c6d      	adds	r5, r5, #1
    625e:	80dd      	strh	r5, [r3, #6]
    6260:	bd30      	pop	{r4, r5, pc}
    6262:	1c64      	adds	r4, r4, #1
    6264:	811c      	strh	r4, [r3, #8]
    6266:	bd30      	pop	{r4, r5, pc}
    6268:	20000e22 	.word	0x20000e22
    626c:	b510      	push	{r4, lr}
    626e:	4c08      	ldr	r4, [pc, #32]	; (6290 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x15c>)
    6270:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6272:	b138      	cbz	r0, 6284 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x150>
    6274:	8962      	ldrh	r2, [r4, #10]
    6276:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6278:	1cd2      	adds	r2, r2, #3
    627a:	f006 fe8c 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    627e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6280:	6260      	str	r0, [r4, #36]	; 0x24
    6282:	bd10      	pop	{r4, pc}
    6284:	f240 415a 	movw	r1, #1114	; 0x45a
    6288:	2027      	movs	r0, #39	; 0x27
    628a:	f7fe fecf 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    628e:	0000      	.short	0x0000
    6290:	200000c8 	.word	0x200000c8
    6294:	b510      	push	{r4, lr}
    6296:	f7ff ff71 	bl	617c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    629a:	4604      	mov	r4, r0
    629c:	f7ff ff74 	bl	6188 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    62a0:	4601      	mov	r1, r0
    62a2:	7b42      	ldrb	r2, [r0, #13]
    62a4:	4815      	ldr	r0, [pc, #84]	; (62fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c8>)
    62a6:	2a24      	cmp	r2, #36	; 0x24
    62a8:	d00e      	beq.n	62c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x194>
    62aa:	7b89      	ldrb	r1, [r1, #14]
    62ac:	2924      	cmp	r1, #36	; 0x24
    62ae:	d00b      	beq.n	62c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x194>
    62b0:	2a1f      	cmp	r2, #31
    62b2:	d00d      	beq.n	62d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x19c>
    62b4:	2a20      	cmp	r2, #32
    62b6:	d00b      	beq.n	62d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x19c>
    62b8:	2922      	cmp	r1, #34	; 0x22
    62ba:	d00f      	beq.n	62dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a8>
    62bc:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    62c0:	2804      	cmp	r0, #4
    62c2:	d100      	bne.n	62c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x192>
    62c4:	2008      	movs	r0, #8
    62c6:	bd10      	pop	{r4, pc}
    62c8:	6840      	ldr	r0, [r0, #4]
    62ca:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    62ce:	e00e      	b.n	62ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ba>
    62d0:	2922      	cmp	r1, #34	; 0x22
    62d2:	d003      	beq.n	62dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a8>
    62d4:	6840      	ldr	r0, [r0, #4]
    62d6:	f890 01c0 	ldrb.w	r0, [r0, #448]	; 0x1c0
    62da:	e005      	b.n	62e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b4>
    62dc:	6841      	ldr	r1, [r0, #4]
    62de:	f891 01c0 	ldrb.w	r0, [r1, #448]	; 0x1c0
    62e2:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    62e6:	4008      	ands	r0, r1
    62e8:	f008 f88f 	bl	e40a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    62ec:	4601      	mov	r1, r0
    62ee:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    62f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    62f6:	f008 b8a0 	b.w	e43a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    62fa:	0000      	.short	0x0000
    62fc:	20000100 	.word	0x20000100
    6300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6304:	4689      	mov	r9, r1
    6306:	4607      	mov	r7, r0
    6308:	f7ff ff3e 	bl	6188 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    630c:	4c55      	ldr	r4, [pc, #340]	; (6464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>)
    630e:	f04f 0800 	mov.w	r8, #0
    6312:	4605      	mov	r5, r0
    6314:	f88d 8000 	strb.w	r8, [sp]
    6318:	7820      	ldrb	r0, [r4, #0]
    631a:	4646      	mov	r6, r8
    631c:	2802      	cmp	r0, #2
    631e:	d004      	beq.n	632a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1f6>
    6320:	f240 41de 	movw	r1, #1246	; 0x4de
    6324:	2027      	movs	r0, #39	; 0x27
    6326:	f7fe fe81 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    632a:	7ba0      	ldrb	r0, [r4, #14]
    632c:	0640      	lsls	r0, r0, #25
    632e:	d406      	bmi.n	633e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    6330:	2040      	movs	r0, #64	; 0x40
    6332:	f7ff ff2f 	bl	6194 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6336:	89e0      	ldrh	r0, [r4, #14]
    6338:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    633c:	81e0      	strh	r0, [r4, #14]
    633e:	7ce8      	ldrb	r0, [r5, #19]
    6340:	b3d7      	cbz	r7, 63b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x284>
    6342:	b180      	cbz	r0, 6366 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    6344:	f005 fb2a 	bl	b99c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    6348:	f005 fb04 	bl	b954 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    634c:	b958      	cbnz	r0, 6366 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    634e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6350:	7841      	ldrb	r1, [r0, #1]
    6352:	b141      	cbz	r1, 6366 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    6354:	7800      	ldrb	r0, [r0, #0]
    6356:	7a29      	ldrb	r1, [r5, #8]
    6358:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    635c:	4288      	cmp	r0, r1
    635e:	d102      	bne.n	6366 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    6360:	2001      	movs	r0, #1
    6362:	70a0      	strb	r0, [r4, #2]
    6364:	e060      	b.n	6428 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>
    6366:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6368:	7841      	ldrb	r1, [r0, #1]
    636a:	8161      	strh	r1, [r4, #10]
    636c:	b121      	cbz	r1, 6378 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x244>
    636e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6370:	f007 fd99 	bl	dea6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    6374:	62a0      	str	r0, [r4, #40]	; 0x28
    6376:	e000      	b.n	637a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x246>
    6378:	62a6      	str	r6, [r4, #40]	; 0x28
    637a:	89e0      	ldrh	r0, [r4, #14]
    637c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    6380:	81e0      	strh	r0, [r4, #14]
    6382:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6384:	79e9      	ldrb	r1, [r5, #7]
    6386:	7800      	ldrb	r0, [r0, #0]
    6388:	f3c0 0080 	ubfx	r0, r0, #2, #1
    638c:	4288      	cmp	r0, r1
    638e:	d006      	beq.n	639e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    6390:	f000 f95a 	bl	6648 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x514>
    6394:	89e0      	ldrh	r0, [r4, #14]
    6396:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    639a:	81e0      	strh	r0, [r4, #14]
    639c:	e001      	b.n	63a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26e>
    639e:	f04f 0801 	mov.w	r8, #1
    63a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    63a4:	7a29      	ldrb	r1, [r5, #8]
    63a6:	7800      	ldrb	r0, [r0, #0]
    63a8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    63ac:	4288      	cmp	r0, r1
    63ae:	d10e      	bne.n	63ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29a>
    63b0:	4668      	mov	r0, sp
    63b2:	f000 f90b 	bl	65cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    63b6:	e00a      	b.n	63ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29a>
    63b8:	e7ff      	b.n	63ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x286>
    63ba:	b108      	cbz	r0, 63c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28c>
    63bc:	f005 fae8 	bl	b990 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    63c0:	78e0      	ldrb	r0, [r4, #3]
    63c2:	1c40      	adds	r0, r0, #1
    63c4:	70e0      	strb	r0, [r4, #3]
    63c6:	89e0      	ldrh	r0, [r4, #14]
    63c8:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    63cc:	81e0      	strh	r0, [r4, #14]
    63ce:	7ca8      	ldrb	r0, [r5, #18]
    63d0:	b188      	cbz	r0, 63f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c2>
    63d2:	f7ff fed3 	bl	617c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    63d6:	4924      	ldr	r1, [pc, #144]	; (6468 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x334>)
    63d8:	760e      	strb	r6, [r1, #24]
    63da:	e9d5 2316 	ldrd	r2, r3, [r5, #88]	; 0x58
    63de:	e9c1 2304 	strd	r2, r3, [r1, #16]
    63e2:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    63e6:	f008 f81a 	bl	e41e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    63ea:	4603      	mov	r3, r0
    63ec:	22fb      	movs	r2, #251	; 0xfb
    63ee:	491e      	ldr	r1, [pc, #120]	; (6468 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x334>)
    63f0:	4630      	mov	r0, r6
    63f2:	f005 fa05 	bl	b800 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    63f6:	f1b9 0f00 	cmp.w	r9, #0
    63fa:	d104      	bne.n	6406 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d2>
    63fc:	78e1      	ldrb	r1, [r4, #3]
    63fe:	2001      	movs	r0, #1
    6400:	f7ff fef4 	bl	61ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    6404:	b1a0      	cbz	r0, 6430 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2fc>
    6406:	f005 fead 	bl	c164 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    640a:	f89d 0000 	ldrb.w	r0, [sp]
    640e:	b110      	cbz	r0, 6416 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e2>
    6410:	2000      	movs	r0, #0
    6412:	f7ff fe0d 	bl	6030 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    6416:	88a8      	ldrh	r0, [r5, #4]
    6418:	4642      	mov	r2, r8
    641a:	4639      	mov	r1, r7
    641c:	f7ff ff12 	bl	6244 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    6420:	b117      	cbz	r7, 6428 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>
    6422:	70e6      	strb	r6, [r4, #3]
    6424:	f7ff febc 	bl	61a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    6428:	f000 f87c 	bl	6524 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    642c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6430:	f89d 0000 	ldrb.w	r0, [sp]
    6434:	b110      	cbz	r0, 643c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x308>
    6436:	2001      	movs	r0, #1
    6438:	f7ff fdfa 	bl	6030 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    643c:	2000      	movs	r0, #0
    643e:	f000 f98d 	bl	675c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x628>
    6442:	f89d 0000 	ldrb.w	r0, [sp]
    6446:	b110      	cbz	r0, 644e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31a>
    6448:	2002      	movs	r0, #2
    644a:	f7ff fdf1 	bl	6030 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    644e:	88a8      	ldrh	r0, [r5, #4]
    6450:	4642      	mov	r2, r8
    6452:	4639      	mov	r1, r7
    6454:	f7ff fef6 	bl	6244 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    6458:	2f00      	cmp	r7, #0
    645a:	d0e7      	beq.n	642c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>
    645c:	70e6      	strb	r6, [r4, #3]
    645e:	f7ff fe9f 	bl	61a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    6462:	e7e3      	b.n	642c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>
    6464:	200000c8 	.word	0x200000c8
    6468:	20000dd8 	.word	0x20000dd8
    646c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6470:	460f      	mov	r7, r1
    6472:	4680      	mov	r8, r0
    6474:	f7ff fe88 	bl	6188 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6478:	4d28      	ldr	r5, [pc, #160]	; (651c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e8>)
    647a:	4604      	mov	r4, r0
    647c:	7828      	ldrb	r0, [r5, #0]
    647e:	2801      	cmp	r0, #1
    6480:	d004      	beq.n	648c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    6482:	f240 4169 	movw	r1, #1129	; 0x469
    6486:	2027      	movs	r0, #39	; 0x27
    6488:	f7fe fdd0 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    648c:	7861      	ldrb	r1, [r4, #1]
    648e:	2000      	movs	r0, #0
    6490:	2601      	movs	r6, #1
    6492:	b129      	cbz	r1, 64a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36c>
    6494:	7060      	strb	r0, [r4, #1]
    6496:	2100      	movs	r1, #0
    6498:	2004      	movs	r0, #4
    649a:	f7ff fe67 	bl	616c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    649e:	70e6      	strb	r6, [r4, #3]
    64a0:	6a29      	ldr	r1, [r5, #32]
    64a2:	7808      	ldrb	r0, [r1, #0]
    64a4:	43c0      	mvns	r0, r0
    64a6:	0780      	lsls	r0, r0, #30
    64a8:	d109      	bne.n	64be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38a>
    64aa:	79a0      	ldrb	r0, [r4, #6]
    64ac:	bb78      	cbnz	r0, 650e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3da>
    64ae:	2002      	movs	r0, #2
    64b0:	f7ff fe5c 	bl	616c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    64b4:	6a28      	ldr	r0, [r5, #32]
    64b6:	7800      	ldrb	r0, [r0, #0]
    64b8:	43c0      	mvns	r0, r0
    64ba:	0780      	lsls	r0, r0, #30
    64bc:	d027      	beq.n	650e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3da>
    64be:	6a28      	ldr	r0, [r5, #32]
    64c0:	7840      	ldrb	r0, [r0, #1]
    64c2:	b110      	cbz	r0, 64ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x396>
    64c4:	2002      	movs	r0, #2
    64c6:	71a0      	strb	r0, [r4, #6]
    64c8:	e000      	b.n	64cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    64ca:	71a6      	strb	r6, [r4, #6]
    64cc:	7ce0      	ldrb	r0, [r4, #19]
    64ce:	b190      	cbz	r0, 64f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    64d0:	f7ff fe54 	bl	617c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    64d4:	4912      	ldr	r1, [pc, #72]	; (6520 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ec>)
    64d6:	7a6d      	ldrb	r5, [r5, #9]
    64d8:	760e      	strb	r6, [r1, #24]
    64da:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    64de:	e9c1 2304 	strd	r2, r3, [r1, #16]
    64e2:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    64e6:	f007 ff9a 	bl	e41e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    64ea:	4603      	mov	r3, r0
    64ec:	462a      	mov	r2, r5
    64ee:	490c      	ldr	r1, [pc, #48]	; (6520 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ec>)
    64f0:	4630      	mov	r0, r6
    64f2:	f005 f985 	bl	b800 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    64f6:	ea37 0708 	bics.w	r7, r7, r8
    64fa:	d004      	beq.n	6506 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d2>
    64fc:	2100      	movs	r1, #0
    64fe:	4608      	mov	r0, r1
    6500:	f7ff fe74 	bl	61ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    6504:	b128      	cbz	r0, 6512 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3de>
    6506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    650a:	f000 b80b 	b.w	6524 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    650e:	2003      	movs	r0, #3
    6510:	e7d9      	b.n	64c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x392>
    6512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6516:	2000      	movs	r0, #0
    6518:	f000 b8e4 	b.w	66e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b0>
    651c:	200000c8 	.word	0x200000c8
    6520:	20000dd8 	.word	0x20000dd8
    6524:	b510      	push	{r4, lr}
    6526:	f005 fad7 	bl	bad8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    652a:	f005 f9fd 	bl	b928 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    652e:	4c0c      	ldr	r4, [pc, #48]	; (6560 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>)
    6530:	89e0      	ldrh	r0, [r4, #14]
    6532:	f7ff fe2f 	bl	6194 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6536:	69e2      	ldr	r2, [r4, #28]
    6538:	7961      	ldrb	r1, [r4, #5]
    653a:	78a0      	ldrb	r0, [r4, #2]
    653c:	4790      	blx	r2
    653e:	4809      	ldr	r0, [pc, #36]	; (6564 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>)
    6540:	7f40      	ldrb	r0, [r0, #29]
    6542:	b150      	cbz	r0, 655a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x426>
    6544:	4907      	ldr	r1, [pc, #28]	; (6564 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>)
    6546:	220e      	movs	r2, #14
    6548:	f101 000e 	add.w	r0, r1, #14
    654c:	f006 fd23 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6550:	4804      	ldr	r0, [pc, #16]	; (6564 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>)
    6552:	21ff      	movs	r1, #255	; 0xff
    6554:	7701      	strb	r1, [r0, #28]
    6556:	f000 fe9f 	bl	7298 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    655a:	2000      	movs	r0, #0
    655c:	7020      	strb	r0, [r4, #0]
    655e:	bd10      	pop	{r4, pc}
    6560:	200000c8 	.word	0x200000c8
    6564:	20000e22 	.word	0x20000e22
    6568:	4808      	ldr	r0, [pc, #32]	; (658c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x458>)
    656a:	b510      	push	{r4, lr}
    656c:	7800      	ldrb	r0, [r0, #0]
    656e:	2802      	cmp	r0, #2
    6570:	d004      	beq.n	657c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    6572:	f44f 7108 	mov.w	r1, #544	; 0x220
    6576:	2027      	movs	r0, #39	; 0x27
    6578:	f7fe fd58 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    657c:	4904      	ldr	r1, [pc, #16]	; (6590 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>)
    657e:	2001      	movs	r0, #1
    6580:	7308      	strb	r0, [r1, #12]
    6582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6586:	f7ff bfcd 	b.w	6524 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    658a:	0000      	.short	0x0000
    658c:	200000c8 	.word	0x200000c8
    6590:	20000e22 	.word	0x20000e22
    6594:	4b0c      	ldr	r3, [pc, #48]	; (65c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x494>)
    6596:	b430      	push	{r4, r5}
    6598:	79db      	ldrb	r3, [r3, #7]
    659a:	b93a      	cbnz	r2, 65ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
    659c:	2bff      	cmp	r3, #255	; 0xff
    659e:	d105      	bne.n	65ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
    65a0:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    65a4:	f890 406e 	ldrb.w	r4, [r0, #110]	; 0x6e
    65a8:	42a2      	cmp	r2, r4
    65aa:	d00a      	beq.n	65c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48e>
    65ac:	b129      	cbz	r1, 65ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x486>
    65ae:	f890 106f 	ldrb.w	r1, [r0, #111]	; 0x6f
    65b2:	bc30      	pop	{r4, r5}
    65b4:	4618      	mov	r0, r3
    65b6:	f005 bdfd 	b.w	c1b4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    65ba:	23ff      	movs	r3, #255	; 0xff
    65bc:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
    65c0:	e7f7      	b.n	65b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x47e>
    65c2:	bc30      	pop	{r4, r5}
    65c4:	4770      	bx	lr
    65c6:	0000      	.short	0x0000
    65c8:	200000c8 	.word	0x200000c8
    65cc:	b570      	push	{r4, r5, r6, lr}
    65ce:	4606      	mov	r6, r0
    65d0:	f7ff fdda 	bl	6188 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    65d4:	4a1b      	ldr	r2, [pc, #108]	; (6644 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x510>)
    65d6:	4604      	mov	r4, r0
    65d8:	2501      	movs	r5, #1
    65da:	6a51      	ldr	r1, [r2, #36]	; 0x24
    65dc:	7808      	ldrb	r0, [r1, #0]
    65de:	f000 0003 	and.w	r0, r0, #3
    65e2:	2801      	cmp	r0, #1
    65e4:	d00c      	beq.n	6600 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4cc>
    65e6:	2802      	cmp	r0, #2
    65e8:	d00a      	beq.n	6600 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4cc>
    65ea:	2803      	cmp	r0, #3
    65ec:	d121      	bne.n	6632 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4fe>
    65ee:	7065      	strb	r5, [r4, #1]
    65f0:	89d0      	ldrh	r0, [r2, #14]
    65f2:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    65f6:	81d0      	strh	r0, [r2, #14]
    65f8:	2001      	movs	r0, #1
    65fa:	f7ff fdb7 	bl	616c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    65fe:	e018      	b.n	6632 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4fe>
    6600:	7848      	ldrb	r0, [r1, #1]
    6602:	b1b0      	cbz	r0, 6632 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4fe>
    6604:	89d1      	ldrh	r1, [r2, #14]
    6606:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    660a:	81d1      	strh	r1, [r2, #14]
    660c:	6a91      	ldr	r1, [r2, #40]	; 0x28
    660e:	2900      	cmp	r1, #0
    6610:	d009      	beq.n	6626 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f2>
    6612:	28fb      	cmp	r0, #251	; 0xfb
    6614:	d808      	bhi.n	6628 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f4>
    6616:	7990      	ldrb	r0, [r2, #6]
    6618:	b120      	cbz	r0, 6624 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f0>
    661a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    661e:	2020      	movs	r0, #32
    6620:	f7ff bdb8 	b.w	6194 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6624:	7035      	strb	r5, [r6, #0]
    6626:	bd70      	pop	{r4, r5, r6, pc}
    6628:	7950      	ldrb	r0, [r2, #5]
    662a:	f040 0010 	orr.w	r0, r0, #16
    662e:	7150      	strb	r0, [r2, #5]
    6630:	bd70      	pop	{r4, r5, r6, pc}
    6632:	7a20      	ldrb	r0, [r4, #8]
    6634:	2801      	cmp	r0, #1
    6636:	d001      	beq.n	663c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x508>
    6638:	7225      	strb	r5, [r4, #8]
    663a:	bd70      	pop	{r4, r5, r6, pc}
    663c:	2000      	movs	r0, #0
    663e:	7220      	strb	r0, [r4, #8]
    6640:	bd70      	pop	{r4, r5, r6, pc}
    6642:	0000      	.short	0x0000
    6644:	200000c8 	.word	0x200000c8
    6648:	b538      	push	{r3, r4, r5, lr}
    664a:	f7ff fd9d 	bl	6188 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    664e:	4604      	mov	r4, r0
    6650:	7980      	ldrb	r0, [r0, #6]
    6652:	2800      	cmp	r0, #0
    6654:	d02f      	beq.n	66b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x582>
    6656:	2802      	cmp	r0, #2
    6658:	d10e      	bne.n	6678 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x544>
    665a:	481c      	ldr	r0, [pc, #112]	; (66cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>)
    665c:	4669      	mov	r1, sp
    665e:	6b00      	ldr	r0, [r0, #48]	; 0x30
    6660:	f007 fa18 	bl	da94 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    6664:	b340      	cbz	r0, 66b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x584>
    6666:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    666a:	1c40      	adds	r0, r0, #1
    666c:	f141 0100 	adc.w	r1, r1, #0
    6670:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    6674:	f000 fe10 	bl	7298 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6678:	2500      	movs	r5, #0
    667a:	71a5      	strb	r5, [r4, #6]
    667c:	78e0      	ldrb	r0, [r4, #3]
    667e:	b120      	cbz	r0, 668a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x556>
    6680:	70e5      	strb	r5, [r4, #3]
    6682:	2100      	movs	r1, #0
    6684:	2010      	movs	r0, #16
    6686:	f7ff fd71 	bl	616c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    668a:	78a0      	ldrb	r0, [r4, #2]
    668c:	b170      	cbz	r0, 66ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x578>
    668e:	70a5      	strb	r5, [r4, #2]
    6690:	f7ff fafc 	bl	5c8c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    6694:	b198      	cbz	r0, 66be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x58a>
    6696:	2100      	movs	r1, #0
    6698:	2008      	movs	r0, #8
    669a:	f7ff fd67 	bl	616c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    669e:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    66a2:	1c40      	adds	r0, r0, #1
    66a4:	f141 0100 	adc.w	r1, r1, #0
    66a8:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    66ac:	79e0      	ldrb	r0, [r4, #7]
    66ae:	2801      	cmp	r0, #1
    66b0:	d00a      	beq.n	66c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x594>
    66b2:	2001      	movs	r0, #1
    66b4:	71e0      	strb	r0, [r4, #7]
    66b6:	bd38      	pop	{r3, r4, r5, pc}
    66b8:	f240 31af 	movw	r1, #943	; 0x3af
    66bc:	e001      	b.n	66c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x58e>
    66be:	f240 31c7 	movw	r1, #967	; 0x3c7
    66c2:	2027      	movs	r0, #39	; 0x27
    66c4:	f7fe fcb2 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    66c8:	71e5      	strb	r5, [r4, #7]
    66ca:	bd38      	pop	{r3, r4, r5, pc}
    66cc:	200000c8 	.word	0x200000c8
    66d0:	4803      	ldr	r0, [pc, #12]	; (66e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ac>)
    66d2:	7800      	ldrb	r0, [r0, #0]
    66d4:	2800      	cmp	r0, #0
    66d6:	d001      	beq.n	66dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5a8>
    66d8:	f7ff bf24 	b.w	6524 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    66dc:	4770      	bx	lr
    66de:	0000      	.short	0x0000
    66e0:	200000c8 	.word	0x200000c8
    66e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66e8:	4606      	mov	r6, r0
    66ea:	f7ff fd47 	bl	617c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    66ee:	4680      	mov	r8, r0
    66f0:	f7ff fd4a 	bl	6188 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    66f4:	4c16      	ldr	r4, [pc, #88]	; (6750 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x61c>)
    66f6:	4605      	mov	r5, r0
    66f8:	4632      	mov	r2, r6
    66fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    66fc:	6260      	str	r0, [r4, #36]	; 0x24
    66fe:	2101      	movs	r1, #1
    6700:	4640      	mov	r0, r8
    6702:	f7ff ff47 	bl	6594 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    6706:	7ce8      	ldrb	r0, [r5, #19]
    6708:	2700      	movs	r7, #0
    670a:	b170      	cbz	r0, 672a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5f6>
    670c:	4811      	ldr	r0, [pc, #68]	; (6754 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x620>)
    670e:	f005 fc7f 	bl	c010 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6712:	4811      	ldr	r0, [pc, #68]	; (6758 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x624>)
    6714:	2101      	movs	r1, #1
    6716:	7601      	strb	r1, [r0, #24]
    6718:	e9d5 1218 	ldrd	r1, r2, [r5, #96]	; 0x60
    671c:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6720:	490c      	ldr	r1, [pc, #48]	; (6754 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x620>)
    6722:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6724:	f005 f8be 	bl	b8a4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    6728:	e004      	b.n	6734 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x600>
    672a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    672c:	f005 fc70 	bl	c010 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6730:	f005 f8fa 	bl	b928 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6734:	b916      	cbnz	r6, 673c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x608>
    6736:	4638      	mov	r0, r7
    6738:	f005 fb0e 	bl	bd58 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    673c:	2100      	movs	r1, #0
    673e:	f898 206e 	ldrb.w	r2, [r8, #110]	; 0x6e
    6742:	4608      	mov	r0, r1
    6744:	f005 fcf0 	bl	c128 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6748:	2002      	movs	r0, #2
    674a:	7020      	strb	r0, [r4, #0]
    674c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6750:	200000c8 	.word	0x200000c8
    6754:	20000cd0 	.word	0x20000cd0
    6758:	20000dd8 	.word	0x20000dd8
    675c:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6760:	4604      	mov	r4, r0
    6762:	f7ff fd11 	bl	6188 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6766:	4605      	mov	r5, r0
    6768:	f7ff fd08 	bl	617c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    676c:	2700      	movs	r7, #0
    676e:	4606      	mov	r6, r0
    6770:	f8df 9164 	ldr.w	r9, [pc, #356]	; 68d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a4>
    6774:	f88d 7000 	strb.w	r7, [sp]
    6778:	4622      	mov	r2, r4
    677a:	4639      	mov	r1, r7
    677c:	f7ff ff0a 	bl	6594 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    6780:	79a8      	ldrb	r0, [r5, #6]
    6782:	f04f 0801 	mov.w	r8, #1
    6786:	f1a9 0420 	sub.w	r4, r9, #32
    678a:	b140      	cbz	r0, 679e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x66a>
    678c:	2801      	cmp	r0, #1
    678e:	d020      	beq.n	67d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69e>
    6790:	2802      	cmp	r0, #2
    6792:	d02f      	beq.n	67f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c0>
    6794:	2803      	cmp	r0, #3
    6796:	d03b      	beq.n	6810 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6dc>
    6798:	f240 21cb 	movw	r1, #715	; 0x2cb
    679c:	e057      	b.n	684e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71a>
    679e:	7a20      	ldrb	r0, [r4, #8]
    67a0:	2154      	movs	r1, #84	; 0x54
    67a2:	f8ad 0004 	strh.w	r0, [sp, #4]
    67a6:	5388      	strh	r0, [r1, r6]
    67a8:	4648      	mov	r0, r9
    67aa:	f7ff fa99 	bl	5ce0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    67ae:	b130      	cbz	r0, 67be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68a>
    67b0:	2080      	movs	r0, #128	; 0x80
    67b2:	6a21      	ldr	r1, [r4, #32]
    67b4:	f7ff fcda 	bl	616c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    67b8:	f885 8002 	strb.w	r8, [r5, #2]
    67bc:	e02c      	b.n	6818 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    67be:	466a      	mov	r2, sp
    67c0:	a901      	add	r1, sp, #4
    67c2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    67c4:	f007 fe43 	bl	e44e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    67c8:	6220      	str	r0, [r4, #32]
    67ca:	b110      	cbz	r0, 67d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69e>
    67cc:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
    67d0:	b111      	cbz	r1, 67d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a4>
    67d2:	4842      	ldr	r0, [pc, #264]	; (68dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a8>)
    67d4:	6220      	str	r0, [r4, #32]
    67d6:	e01f      	b.n	6818 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    67d8:	f89d 1000 	ldrb.w	r1, [sp]
    67dc:	b921      	cbnz	r1, 67e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b4>
    67de:	8007      	strh	r7, [r0, #0]
    67e0:	7087      	strb	r7, [r0, #2]
    67e2:	2101      	movs	r1, #1
    67e4:	f008 f982 	bl	eaec <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    67e8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    67ec:	6a20      	ldr	r0, [r4, #32]
    67ee:	f008 f941 	bl	ea74 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    67f2:	e011      	b.n	6818 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    67f4:	f8b6 0054 	ldrh.w	r0, [r6, #84]	; 0x54
    67f8:	f8ad 0004 	strh.w	r0, [sp, #4]
    67fc:	466a      	mov	r2, sp
    67fe:	a901      	add	r1, sp, #4
    6800:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6802:	f007 fe24 	bl	e44e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    6806:	6220      	str	r0, [r4, #32]
    6808:	b930      	cbnz	r0, 6818 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    680a:	f44f 712f 	mov.w	r1, #700	; 0x2bc
    680e:	e01e      	b.n	684e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71a>
    6810:	4648      	mov	r0, r9
    6812:	f7ff fa65 	bl	5ce0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6816:	b1c0      	cbz	r0, 684a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x716>
    6818:	6a20      	ldr	r0, [r4, #32]
    681a:	2308      	movs	r3, #8
    681c:	7801      	ldrb	r1, [r0, #0]
    681e:	f021 0108 	bic.w	r1, r1, #8
    6822:	7001      	strb	r1, [r0, #0]
    6824:	79ea      	ldrb	r2, [r5, #7]
    6826:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    682a:	4311      	orrs	r1, r2
    682c:	f021 0104 	bic.w	r1, r1, #4
    6830:	7001      	strb	r1, [r0, #0]
    6832:	7a2a      	ldrb	r2, [r5, #8]
    6834:	2304      	movs	r3, #4
    6836:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    683a:	4311      	orrs	r1, r2
    683c:	f021 0110 	bic.w	r1, r1, #16
    6840:	7001      	strb	r1, [r0, #0]
    6842:	43c9      	mvns	r1, r1
    6844:	0789      	lsls	r1, r1, #30
    6846:	d005      	beq.n	6854 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x720>
    6848:	e007      	b.n	685a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x726>
    684a:	f240 21c5 	movw	r1, #709	; 0x2c5
    684e:	2027      	movs	r0, #39	; 0x27
    6850:	f7fe fbec 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6854:	78c0      	ldrb	r0, [r0, #3]
    6856:	2802      	cmp	r0, #2
    6858:	d00f      	beq.n	687a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x746>
    685a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    685c:	f007 fa46 	bl	dcec <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    6860:	b108      	cbz	r0, 6866 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
    6862:	2101      	movs	r1, #1
    6864:	e00a      	b.n	687c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x748>
    6866:	6a20      	ldr	r0, [r4, #32]
    6868:	7800      	ldrb	r0, [r0, #0]
    686a:	43c0      	mvns	r0, r0
    686c:	0780      	lsls	r0, r0, #30
    686e:	d004      	beq.n	687a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x746>
    6870:	f7ff f9f4 	bl	5c5c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    6874:	f080 0101 	eor.w	r1, r0, #1
    6878:	e000      	b.n	687c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x748>
    687a:	2100      	movs	r1, #0
    687c:	6a20      	ldr	r0, [r4, #32]
    687e:	7802      	ldrb	r2, [r0, #0]
    6880:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    6884:	7001      	strb	r1, [r0, #0]
    6886:	7ca9      	ldrb	r1, [r5, #18]
    6888:	b181      	cbz	r1, 68ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x778>
    688a:	7841      	ldrb	r1, [r0, #1]
    688c:	b171      	cbz	r1, 68ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x778>
    688e:	4814      	ldr	r0, [pc, #80]	; (68e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7ac>)
    6890:	f005 fbbe 	bl	c010 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6894:	4811      	ldr	r0, [pc, #68]	; (68dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a8>)
    6896:	3828      	subs	r0, #40	; 0x28
    6898:	7607      	strb	r7, [r0, #24]
    689a:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    689e:	e9c0 1204 	strd	r1, r2, [r0, #16]
    68a2:	480f      	ldr	r0, [pc, #60]	; (68e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7ac>)
    68a4:	6a21      	ldr	r1, [r4, #32]
    68a6:	f004 fffd 	bl	b8a4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    68aa:	e003      	b.n	68b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x780>
    68ac:	f005 fbb0 	bl	c010 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    68b0:	f005 f83a 	bl	b928 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    68b4:	f896 206f 	ldrb.w	r2, [r6, #111]	; 0x6f
    68b8:	2101      	movs	r1, #1
    68ba:	2000      	movs	r0, #0
    68bc:	f005 fc34 	bl	c128 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    68c0:	f884 8004 	strb.w	r8, [r4, #4]
    68c4:	6a21      	ldr	r1, [r4, #32]
    68c6:	880a      	ldrh	r2, [r1, #0]
    68c8:	8222      	strh	r2, [r4, #16]
    68ca:	7889      	ldrb	r1, [r1, #2]
    68cc:	74a1      	strb	r1, [r4, #18]
    68ce:	f884 8000 	strb.w	r8, [r4]
    68d2:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    68d6:	0000      	.short	0x0000
    68d8:	200000e8 	.word	0x200000e8
    68dc:	20000e00 	.word	0x20000e00
    68e0:	20000cd0 	.word	0x20000cd0
    68e4:	00006569 	.word	0x00006569
    68e8:	00006301 	.word	0x00006301
    68ec:	0000646d 	.word	0x0000646d
    68f0:	000066d1 	.word	0x000066d1

000068f4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    68f4:	4800      	ldr	r0, [pc, #0]	; (68f8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    68f6:	4770      	bx	lr
    68f8:	200016cd 	.word	0x200016cd

000068fc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    68fc:	4904      	ldr	r1, [pc, #16]	; (6910 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    68fe:	788a      	ldrb	r2, [r1, #2]
    6900:	4282      	cmp	r2, r0
    6902:	d903      	bls.n	690c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    6904:	4408      	add	r0, r1
    6906:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    690a:	4770      	bx	lr
    690c:	2000      	movs	r0, #0
    690e:	4770      	bx	lr
    6910:	200014fa 	.word	0x200014fa

00006914 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    6914:	4904      	ldr	r1, [pc, #16]	; (6928 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    6916:	788a      	ldrb	r2, [r1, #2]
    6918:	4282      	cmp	r2, r0
    691a:	d903      	bls.n	6924 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    691c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6920:	3083      	adds	r0, #131	; 0x83
    6922:	4770      	bx	lr
    6924:	2000      	movs	r0, #0
    6926:	4770      	bx	lr
    6928:	200014fa 	.word	0x200014fa

0000692c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    692c:	4a05      	ldr	r2, [pc, #20]	; (6944 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    692e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6932:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6936:	6802      	ldr	r2, [r0, #0]
    6938:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    693c:	8880      	ldrh	r0, [r0, #4]
    693e:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    6942:	4770      	bx	lr
    6944:	200014fa 	.word	0x200014fa

00006948 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    6948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    694c:	460e      	mov	r6, r1
    694e:	4607      	mov	r7, r0
    6950:	4615      	mov	r5, r2
    6952:	2106      	movs	r1, #6
    6954:	4630      	mov	r0, r6
    6956:	f007 ff69 	bl	e82c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    695a:	4c0d      	ldr	r4, [pc, #52]	; (6990 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    695c:	b160      	cbz	r0, 6978 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    695e:	2000      	movs	r0, #0
    6960:	e004      	b.n	696c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    6962:	1821      	adds	r1, r4, r0
    6964:	1c40      	adds	r0, r0, #1
    6966:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    696a:	b2c0      	uxtb	r0, r0
    696c:	78a1      	ldrb	r1, [r4, #2]
    696e:	4281      	cmp	r1, r0
    6970:	d8f7      	bhi.n	6962 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    6972:	2001      	movs	r0, #1
    6974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6978:	4631      	mov	r1, r6
    697a:	4638      	mov	r0, r7
    697c:	f007 fd76 	bl	e46c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6980:	2808      	cmp	r0, #8
    6982:	d003      	beq.n	698c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    6984:	4420      	add	r0, r4
    6986:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    698a:	e7f2      	b.n	6972 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    698c:	2000      	movs	r0, #0
    698e:	e7f1      	b.n	6974 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    6990:	200014fa 	.word	0x200014fa

00006994 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    6994:	4904      	ldr	r1, [pc, #16]	; (69a8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    6996:	788a      	ldrb	r2, [r1, #2]
    6998:	4282      	cmp	r2, r0
    699a:	d903      	bls.n	69a4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    699c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    69a0:	1cc0      	adds	r0, r0, #3
    69a2:	4770      	bx	lr
    69a4:	2000      	movs	r0, #0
    69a6:	4770      	bx	lr
    69a8:	200014fa 	.word	0x200014fa

000069ac <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    69ac:	b510      	push	{r4, lr}
    69ae:	f240 12d3 	movw	r2, #467	; 0x1d3
    69b2:	2100      	movs	r1, #0
    69b4:	4808      	ldr	r0, [pc, #32]	; (69d8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    69b6:	f006 fb68 	bl	d08a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    69ba:	2208      	movs	r2, #8
    69bc:	21ff      	movs	r1, #255	; 0xff
    69be:	4807      	ldr	r0, [pc, #28]	; (69dc <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    69c0:	f006 fb63 	bl	d08a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    69c4:	4805      	ldr	r0, [pc, #20]	; (69dc <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    69c6:	2100      	movs	r1, #0
    69c8:	1f00      	subs	r0, r0, #4
    69ca:	7001      	strb	r1, [r0, #0]
    69cc:	7041      	strb	r1, [r0, #1]
    69ce:	f44f 7161 	mov.w	r1, #900	; 0x384
    69d2:	8041      	strh	r1, [r0, #2]
    69d4:	bd10      	pop	{r4, pc}
    69d6:	0000      	.short	0x0000
    69d8:	200014fa 	.word	0x200014fa
    69dc:	2000029c 	.word	0x2000029c

000069e0 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    69e0:	4901      	ldr	r1, [pc, #4]	; (69e8 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    69e2:	7008      	strb	r0, [r1, #0]
    69e4:	4770      	bx	lr
    69e6:	0000      	.short	0x0000
    69e8:	20000298 	.word	0x20000298

000069ec <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    69ec:	4801      	ldr	r0, [pc, #4]	; (69f4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    69ee:	7800      	ldrb	r0, [r0, #0]
    69f0:	4770      	bx	lr
    69f2:	0000      	.short	0x0000
    69f4:	20000298 	.word	0x20000298

000069f8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    69f8:	4b0b      	ldr	r3, [pc, #44]	; (6a28 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    69fa:	b510      	push	{r4, lr}
    69fc:	789c      	ldrb	r4, [r3, #2]
    69fe:	4284      	cmp	r4, r0
    6a00:	d90f      	bls.n	6a22 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    6a02:	4418      	add	r0, r3
    6a04:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    6a08:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6a0c:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    6a10:	700b      	strb	r3, [r1, #0]
    6a12:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    6a16:	6011      	str	r1, [r2, #0]
    6a18:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    6a1c:	8090      	strh	r0, [r2, #4]
    6a1e:	2001      	movs	r0, #1
    6a20:	bd10      	pop	{r4, pc}
    6a22:	2000      	movs	r0, #0
    6a24:	bd10      	pop	{r4, pc}
    6a26:	0000      	.short	0x0000
    6a28:	200014fa 	.word	0x200014fa

00006a2c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    6a2c:	4907      	ldr	r1, [pc, #28]	; (6a4c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    6a2e:	788a      	ldrb	r2, [r1, #2]
    6a30:	4282      	cmp	r2, r0
    6a32:	d909      	bls.n	6a48 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    6a34:	4408      	add	r0, r1
    6a36:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    6a3a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    6a3e:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6a42:	f000 0001 	and.w	r0, r0, #1
    6a46:	4770      	bx	lr
    6a48:	2000      	movs	r0, #0
    6a4a:	4770      	bx	lr
    6a4c:	200014fa 	.word	0x200014fa

00006a50 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    6a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6a54:	4698      	mov	r8, r3
    6a56:	4691      	mov	r9, r2
    6a58:	460c      	mov	r4, r1
    6a5a:	4605      	mov	r5, r0
    6a5c:	f000 f936 	bl	6ccc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    6a60:	4606      	mov	r6, r0
    6a62:	2810      	cmp	r0, #16
    6a64:	d006      	beq.n	6a74 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    6a66:	f000 f901 	bl	6c6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6a6a:	2810      	cmp	r0, #16
    6a6c:	d002      	beq.n	6a74 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    6a6e:	2012      	movs	r0, #18
    6a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a74:	4f18      	ldr	r7, [pc, #96]	; (6ad8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    6a76:	78b8      	ldrb	r0, [r7, #2]
    6a78:	2808      	cmp	r0, #8
    6a7a:	d22a      	bcs.n	6ad2 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    6a7c:	2e10      	cmp	r6, #16
    6a7e:	d105      	bne.n	6a8c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    6a80:	2200      	movs	r2, #0
    6a82:	4621      	mov	r1, r4
    6a84:	4628      	mov	r0, r5
    6a86:	f000 f905 	bl	6c94 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    6a8a:	4606      	mov	r6, r0
    6a8c:	78bc      	ldrb	r4, [r7, #2]
    6a8e:	2210      	movs	r2, #16
    6a90:	1c60      	adds	r0, r4, #1
    6a92:	70b8      	strb	r0, [r7, #2]
    6a94:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    6a98:	1ce8      	adds	r0, r5, #3
    6a9a:	4649      	mov	r1, r9
    6a9c:	f007 fe2f 	bl	e6fe <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6aa0:	f105 0083 	add.w	r0, r5, #131	; 0x83
    6aa4:	2210      	movs	r2, #16
    6aa6:	4641      	mov	r1, r8
    6aa8:	f007 fe29 	bl	e6fe <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6aac:	2110      	movs	r1, #16
    6aae:	4640      	mov	r0, r8
    6ab0:	f007 febc 	bl	e82c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6ab4:	443c      	add	r4, r7
    6ab6:	2110      	movs	r1, #16
    6ab8:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    6abc:	4648      	mov	r0, r9
    6abe:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    6ac2:	f007 feb3 	bl	e82c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6ac6:	77e0      	strb	r0, [r4, #31]
    6ac8:	f804 6c29 	strb.w	r6, [r4, #-41]
    6acc:	2000      	movs	r0, #0
    6ace:	73e0      	strb	r0, [r4, #15]
    6ad0:	e7ce      	b.n	6a70 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    6ad2:	2007      	movs	r0, #7
    6ad4:	e7cc      	b.n	6a70 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    6ad6:	0000      	.short	0x0000
    6ad8:	200014fa 	.word	0x200014fa

00006adc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    6adc:	4806      	ldr	r0, [pc, #24]	; (6af8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    6ade:	b510      	push	{r4, lr}
    6ae0:	7880      	ldrb	r0, [r0, #2]
    6ae2:	1e40      	subs	r0, r0, #1
    6ae4:	b244      	sxtb	r4, r0
    6ae6:	e004      	b.n	6af2 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    6ae8:	b2e0      	uxtb	r0, r4
    6aea:	f000 f935 	bl	6d58 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>
    6aee:	1e64      	subs	r4, r4, #1
    6af0:	b264      	sxtb	r4, r4
    6af2:	2c00      	cmp	r4, #0
    6af4:	daf8      	bge.n	6ae8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    6af6:	bd10      	pop	{r4, pc}
    6af8:	200014fa 	.word	0x200014fa

00006afc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    6afc:	4801      	ldr	r0, [pc, #4]	; (6b04 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    6afe:	8840      	ldrh	r0, [r0, #2]
    6b00:	4770      	bx	lr
    6b02:	0000      	.short	0x0000
    6b04:	20000298 	.word	0x20000298

00006b08 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    6b08:	b138      	cbz	r0, 6b1a <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    6b0a:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    6b0e:	4288      	cmp	r0, r1
    6b10:	d803      	bhi.n	6b1a <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    6b12:	4903      	ldr	r1, [pc, #12]	; (6b20 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    6b14:	8048      	strh	r0, [r1, #2]
    6b16:	2001      	movs	r0, #1
    6b18:	4770      	bx	lr
    6b1a:	2000      	movs	r0, #0
    6b1c:	4770      	bx	lr
    6b1e:	0000      	.short	0x0000
    6b20:	20000298 	.word	0x20000298

00006b24 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    6b24:	4905      	ldr	r1, [pc, #20]	; (6b3c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    6b26:	788a      	ldrb	r2, [r1, #2]
    6b28:	4282      	cmp	r2, r0
    6b2a:	d903      	bls.n	6b34 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    6b2c:	4408      	add	r0, r1
    6b2e:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6b32:	b108      	cbz	r0, 6b38 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    6b34:	2000      	movs	r0, #0
    6b36:	4770      	bx	lr
    6b38:	2001      	movs	r0, #1
    6b3a:	4770      	bx	lr
    6b3c:	200014fa 	.word	0x200014fa

00006b40 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    6b40:	b570      	push	{r4, r5, r6, lr}
    6b42:	460d      	mov	r5, r1
    6b44:	4606      	mov	r6, r0
    6b46:	f000 f8c1 	bl	6ccc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    6b4a:	4c10      	ldr	r4, [pc, #64]	; (6b8c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    6b4c:	2810      	cmp	r0, #16
    6b4e:	d007      	beq.n	6b60 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6b50:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    6b54:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    6b58:	07c9      	lsls	r1, r1, #31
    6b5a:	d001      	beq.n	6b60 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6b5c:	2001      	movs	r0, #1
    6b5e:	bd70      	pop	{r4, r5, r6, pc}
    6b60:	7861      	ldrb	r1, [r4, #1]
    6b62:	2908      	cmp	r1, #8
    6b64:	d210      	bcs.n	6b88 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    6b66:	2810      	cmp	r0, #16
    6b68:	d008      	beq.n	6b7c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    6b6a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    6b6e:	2101      	movs	r1, #1
    6b70:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    6b74:	7860      	ldrb	r0, [r4, #1]
    6b76:	1c40      	adds	r0, r0, #1
    6b78:	7060      	strb	r0, [r4, #1]
    6b7a:	e7ef      	b.n	6b5c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    6b7c:	2201      	movs	r2, #1
    6b7e:	4629      	mov	r1, r5
    6b80:	4630      	mov	r0, r6
    6b82:	f000 f887 	bl	6c94 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    6b86:	e7f5      	b.n	6b74 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    6b88:	2000      	movs	r0, #0
    6b8a:	bd70      	pop	{r4, r5, r6, pc}
    6b8c:	200014fa 	.word	0x200014fa

00006b90 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    6b90:	b570      	push	{r4, r5, r6, lr}
    6b92:	4d0b      	ldr	r5, [pc, #44]	; (6bc0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    6b94:	7828      	ldrb	r0, [r5, #0]
    6b96:	1e40      	subs	r0, r0, #1
    6b98:	b244      	sxtb	r4, r0
    6b9a:	e00a      	b.n	6bb2 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    6b9c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    6ba0:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6ba4:	07c0      	lsls	r0, r0, #31
    6ba6:	d002      	beq.n	6bae <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    6ba8:	b2e0      	uxtb	r0, r4
    6baa:	f000 f91d 	bl	6de8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>
    6bae:	1e64      	subs	r4, r4, #1
    6bb0:	b264      	sxtb	r4, r4
    6bb2:	2c00      	cmp	r4, #0
    6bb4:	daf2      	bge.n	6b9c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    6bb6:	4903      	ldr	r1, [pc, #12]	; (6bc4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    6bb8:	2000      	movs	r0, #0
    6bba:	7048      	strb	r0, [r1, #1]
    6bbc:	bd70      	pop	{r4, r5, r6, pc}
    6bbe:	0000      	.short	0x0000
    6bc0:	200014fa 	.word	0x200014fa
    6bc4:	20000298 	.word	0x20000298

00006bc8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    6bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6bcc:	2400      	movs	r4, #0
    6bce:	4625      	mov	r5, r4
    6bd0:	4e18      	ldr	r6, [pc, #96]	; (6c34 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    6bd2:	e029      	b.n	6c28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    6bd4:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    6bd8:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    6bdc:	07c0      	lsls	r0, r0, #31
    6bde:	d021      	beq.n	6c24 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    6be0:	4628      	mov	r0, r5
    6be2:	f000 f843 	bl	6c6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6be6:	4603      	mov	r3, r0
    6be8:	f7ff fed4 	bl	6994 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6bec:	4601      	mov	r1, r0
    6bee:	2000      	movs	r0, #0
    6bf0:	2b10      	cmp	r3, #16
    6bf2:	d009      	beq.n	6c08 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6bf4:	18f2      	adds	r2, r6, r3
    6bf6:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    6bfa:	f1bc 0f01 	cmp.w	ip, #1
    6bfe:	d002      	beq.n	6c06 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    6c00:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    6c04:	b102      	cbz	r2, 6c08 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6c06:	2001      	movs	r0, #1
    6c08:	1e40      	subs	r0, r0, #1
    6c0a:	4201      	tst	r1, r0
    6c0c:	d10a      	bne.n	6c24 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    6c0e:	480a      	ldr	r0, [pc, #40]	; (6c38 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    6c10:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    6c14:	5503      	strb	r3, [r0, r4]
    6c16:	4620      	mov	r0, r4
    6c18:	1c64      	adds	r4, r4, #1
    6c1a:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    6c1e:	b2e4      	uxtb	r4, r4
    6c20:	f005 fbae 	bl	c380 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    6c24:	1c6d      	adds	r5, r5, #1
    6c26:	b2ed      	uxtb	r5, r5
    6c28:	7830      	ldrb	r0, [r6, #0]
    6c2a:	42a8      	cmp	r0, r5
    6c2c:	d8d2      	bhi.n	6bd4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    6c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6c32:	0000      	.short	0x0000
    6c34:	200014fa 	.word	0x200014fa
    6c38:	2000029c 	.word	0x2000029c
    6c3c:	4602      	mov	r2, r0
    6c3e:	4809      	ldr	r0, [pc, #36]	; (6c64 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    6c40:	b510      	push	{r4, lr}
    6c42:	7800      	ldrb	r0, [r0, #0]
    6c44:	460b      	mov	r3, r1
    6c46:	b158      	cbz	r0, 6c60 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6c48:	4807      	ldr	r0, [pc, #28]	; (6c68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6c4a:	7881      	ldrb	r1, [r0, #2]
    6c4c:	b141      	cbz	r1, 6c60 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6c4e:	b10b      	cbz	r3, 6c54 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    6c50:	1cc0      	adds	r0, r0, #3
    6c52:	e001      	b.n	6c58 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    6c54:	4804      	ldr	r0, [pc, #16]	; (6c68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6c56:	3083      	adds	r0, #131	; 0x83
    6c58:	f004 fd2c 	bl	b6b4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    6c5c:	2001      	movs	r0, #1
    6c5e:	bd10      	pop	{r4, pc}
    6c60:	2000      	movs	r0, #0
    6c62:	bd10      	pop	{r4, pc}
    6c64:	20000298 	.word	0x20000298
    6c68:	200014fa 	.word	0x200014fa
    6c6c:	4908      	ldr	r1, [pc, #32]	; (6c90 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    6c6e:	b510      	push	{r4, lr}
    6c70:	4603      	mov	r3, r0
    6c72:	2000      	movs	r0, #0
    6c74:	788a      	ldrb	r2, [r1, #2]
    6c76:	e006      	b.n	6c86 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    6c78:	180c      	adds	r4, r1, r0
    6c7a:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    6c7e:	429c      	cmp	r4, r3
    6c80:	d004      	beq.n	6c8c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    6c82:	1c40      	adds	r0, r0, #1
    6c84:	b2c0      	uxtb	r0, r0
    6c86:	4282      	cmp	r2, r0
    6c88:	d8f6      	bhi.n	6c78 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    6c8a:	2010      	movs	r0, #16
    6c8c:	bd10      	pop	{r4, pc}
    6c8e:	0000      	.short	0x0000
    6c90:	200014fa 	.word	0x200014fa
    6c94:	b570      	push	{r4, r5, r6, lr}
    6c96:	4b0c      	ldr	r3, [pc, #48]	; (6cc8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    6c98:	4604      	mov	r4, r0
    6c9a:	7818      	ldrb	r0, [r3, #0]
    6c9c:	1c45      	adds	r5, r0, #1
    6c9e:	701d      	strb	r5, [r3, #0]
    6ca0:	2810      	cmp	r0, #16
    6ca2:	d303      	bcc.n	6cac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    6ca4:	2146      	movs	r1, #70	; 0x46
    6ca6:	2028      	movs	r0, #40	; 0x28
    6ca8:	f7fe f9c0 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cac:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    6cb0:	680d      	ldr	r5, [r1, #0]
    6cb2:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    6cb6:	8889      	ldrh	r1, [r1, #4]
    6cb8:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    6cbc:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    6cc0:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    6cc4:	bd70      	pop	{r4, r5, r6, pc}
    6cc6:	0000      	.short	0x0000
    6cc8:	200014fa 	.word	0x200014fa
    6ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6cd0:	460e      	mov	r6, r1
    6cd2:	4607      	mov	r7, r0
    6cd4:	2400      	movs	r4, #0
    6cd6:	4d0c      	ldr	r5, [pc, #48]	; (6d08 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x140>)
    6cd8:	e00e      	b.n	6cf8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x130>
    6cda:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
    6cde:	4630      	mov	r0, r6
    6ce0:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    6ce4:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    6ce8:	4297      	cmp	r7, r2
    6cea:	d103      	bne.n	6cf4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12c>
    6cec:	2206      	movs	r2, #6
    6cee:	f006 f940 	bl	cf72 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6cf2:	b138      	cbz	r0, 6d04 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13c>
    6cf4:	1c64      	adds	r4, r4, #1
    6cf6:	b2e4      	uxtb	r4, r4
    6cf8:	7828      	ldrb	r0, [r5, #0]
    6cfa:	42a0      	cmp	r0, r4
    6cfc:	d8ed      	bhi.n	6cda <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x112>
    6cfe:	2010      	movs	r0, #16
    6d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d04:	4620      	mov	r0, r4
    6d06:	e7fb      	b.n	6d00 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x138>
    6d08:	200014fa 	.word	0x200014fa
    6d0c:	b570      	push	{r4, r5, r6, lr}
    6d0e:	4605      	mov	r5, r0
    6d10:	f7ff ffac 	bl	6c6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6d14:	2810      	cmp	r0, #16
    6d16:	d11c      	bne.n	6d52 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18a>
    6d18:	4c0e      	ldr	r4, [pc, #56]	; (6d54 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18c>)
    6d1a:	7820      	ldrb	r0, [r4, #0]
    6d1c:	1e40      	subs	r0, r0, #1
    6d1e:	b2c0      	uxtb	r0, r0
    6d20:	7020      	strb	r0, [r4, #0]
    6d22:	42a8      	cmp	r0, r5
    6d24:	d015      	beq.n	6d52 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18a>
    6d26:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    6d2a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    6d2e:	f502 7080 	add.w	r0, r2, #256	; 0x100
    6d32:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    6d36:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    6d3a:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    6d3e:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    6d42:	7820      	ldrb	r0, [r4, #0]
    6d44:	f7ff ff92 	bl	6c6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6d48:	2810      	cmp	r0, #16
    6d4a:	d002      	beq.n	6d52 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18a>
    6d4c:	4420      	add	r0, r4
    6d4e:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    6d52:	bd70      	pop	{r4, r5, r6, pc}
    6d54:	200014fa 	.word	0x200014fa
    6d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d5c:	4c21      	ldr	r4, [pc, #132]	; (6de4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21c>)
    6d5e:	4606      	mov	r6, r0
    6d60:	19a7      	adds	r7, r4, r6
    6d62:	78a0      	ldrb	r0, [r4, #2]
    6d64:	1e40      	subs	r0, r0, #1
    6d66:	b2c5      	uxtb	r5, r0
    6d68:	70a5      	strb	r5, [r4, #2]
    6d6a:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    6d6e:	42ae      	cmp	r6, r5
    6d70:	d02a      	beq.n	6dc8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x200>
    6d72:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    6d76:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    6d7a:	f10a 0103 	add.w	r1, sl, #3
    6d7e:	f109 0003 	add.w	r0, r9, #3
    6d82:	2210      	movs	r2, #16
    6d84:	f006 f907 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6d88:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    6d8c:	f109 0083 	add.w	r0, r9, #131	; 0x83
    6d90:	2210      	movs	r2, #16
    6d92:	f006 f900 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6d96:	1960      	adds	r0, r4, r5
    6d98:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    6d9c:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    6da0:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    6da4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    6da8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6dac:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    6db0:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    6db4:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    6db8:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    6dbc:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    6dc0:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6dc4:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    6dc8:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    6dcc:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6dd0:	07c0      	lsls	r0, r0, #31
    6dd2:	d104      	bne.n	6dde <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x216>
    6dd4:	4640      	mov	r0, r8
    6dd6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6dda:	f7ff bf97 	b.w	6d0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>
    6dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6de2:	0000      	.short	0x0000
    6de4:	200014fa 	.word	0x200014fa
    6de8:	4905      	ldr	r1, [pc, #20]	; (6e00 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x238>)
    6dea:	784a      	ldrb	r2, [r1, #1]
    6dec:	1e52      	subs	r2, r2, #1
    6dee:	704a      	strb	r2, [r1, #1]
    6df0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    6df4:	2200      	movs	r2, #0
    6df6:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    6dfa:	f7ff bf87 	b.w	6d0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>
    6dfe:	0000      	.short	0x0000
    6e00:	200014fa 	.word	0x200014fa

00006e04 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    6e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e08:	4604      	mov	r4, r0
    6e0a:	f04f 0801 	mov.w	r8, #1
    6e0e:	2500      	movs	r5, #0
    6e10:	b181      	cbz	r1, 6e34 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x30>
    6e12:	f104 078e 	add.w	r7, r4, #142	; 0x8e
    6e16:	1e7e      	subs	r6, r7, #1
    6e18:	f104 0078 	add.w	r0, r4, #120	; 0x78
    6e1c:	2901      	cmp	r1, #1
    6e1e:	d020      	beq.n	6e62 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5e>
    6e20:	2902      	cmp	r1, #2
    6e22:	d042      	beq.n	6eaa <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa6>
    6e24:	2903      	cmp	r1, #3
    6e26:	d11a      	bne.n	6e5e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    6e28:	4639      	mov	r1, r7
    6e2a:	4630      	mov	r0, r6
    6e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6e30:	f007 bd2c 	b.w	e88c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6e34:	f44f 720a 	mov.w	r2, #552	; 0x228
    6e38:	2100      	movs	r1, #0
    6e3a:	f006 f926 	bl	d08a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6e3e:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
    6e42:	3484      	adds	r4, #132	; 0x84
    6e44:	f004 fc06 	bl	b654 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6e48:	f644 112b 	movw	r1, #18731	; 0x492b
    6e4c:	4008      	ands	r0, r1
    6e4e:	6420      	str	r0, [r4, #64]	; 0x40
    6e50:	6465      	str	r5, [r4, #68]	; 0x44
    6e52:	20fe      	movs	r0, #254	; 0xfe
    6e54:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
    6e58:	207f      	movs	r0, #127	; 0x7f
    6e5a:	f804 0c03 	strb.w	r0, [r4, #-3]
    6e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e62:	f8a4 511e 	strh.w	r5, [r4, #286]	; 0x11e
    6e66:	f884 5113 	strb.w	r5, [r4, #275]	; 0x113
    6e6a:	4a14      	ldr	r2, [pc, #80]	; (6ebc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb8>)
    6e6c:	6921      	ldr	r1, [r4, #16]
    6e6e:	440a      	add	r2, r1
    6e70:	fbb2 f2f1 	udiv	r2, r2, r1
    6e74:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
    6e78:	f640 32b8 	movw	r2, #3000	; 0xbb8
    6e7c:	f8a4 20a8 	strh.w	r2, [r4, #168]	; 0xa8
    6e80:	8b63      	ldrh	r3, [r4, #26]
    6e82:	460a      	mov	r2, r1
    6e84:	f000 f81c 	bl	6ec0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>
    6e88:	4639      	mov	r1, r7
    6e8a:	4630      	mov	r0, r6
    6e8c:	f007 fcfe 	bl	e88c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6e90:	f006 f84b 	bl	cf2a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    6e94:	b118      	cbz	r0, 6e9e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x9a>
    6e96:	6960      	ldr	r0, [r4, #20]
    6e98:	f000 fb5e 	bl	7558 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    6e9c:	b110      	cbz	r0, 6ea4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa0>
    6e9e:	f884 5184 	strb.w	r5, [r4, #388]	; 0x184
    6ea2:	e7dc      	b.n	6e5e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    6ea4:	f884 8184 	strb.w	r8, [r4, #388]	; 0x184
    6ea8:	e7d9      	b.n	6e5e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    6eaa:	f8b4 31b2 	ldrh.w	r3, [r4, #434]	; 0x1b2
    6eae:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
    6eb2:	6921      	ldr	r1, [r4, #16]
    6eb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6eb8:	f000 b802 	b.w	6ec0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>
    6ebc:	01c9c37f 	.word	0x01c9c37f
    6ec0:	b530      	push	{r4, r5, lr}
    6ec2:	2400      	movs	r4, #0
    6ec4:	8684      	strh	r4, [r0, #52]	; 0x34
    6ec6:	8f04      	ldrh	r4, [r0, #56]	; 0x38
    6ec8:	4d13      	ldr	r5, [pc, #76]	; (6f18 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x114>)
    6eca:	434c      	muls	r4, r1
    6ecc:	fbb4 f4f2 	udiv	r4, r4, r2
    6ed0:	8704      	strh	r4, [r0, #56]	; 0x38
    6ed2:	f242 7410 	movw	r4, #10000	; 0x2710
    6ed6:	4363      	muls	r3, r4
    6ed8:	fbb3 f3f2 	udiv	r3, r3, r2
    6edc:	1c5b      	adds	r3, r3, #1
    6ede:	b29b      	uxth	r3, r3
    6ee0:	fb03 f402 	mul.w	r4, r3, r2
    6ee4:	86c3      	strh	r3, [r0, #54]	; 0x36
    6ee6:	42ac      	cmp	r4, r5
    6ee8:	d901      	bls.n	6eee <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xea>
    6eea:	1e5b      	subs	r3, r3, #1
    6eec:	86c3      	strh	r3, [r0, #54]	; 0x36
    6eee:	4b0b      	ldr	r3, [pc, #44]	; (6f1c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x118>)
    6ef0:	f240 2471 	movw	r4, #625	; 0x271
    6ef4:	fbb3 f3f2 	udiv	r3, r3, r2
    6ef8:	1c5b      	adds	r3, r3, #1
    6efa:	8783      	strh	r3, [r0, #60]	; 0x3c
    6efc:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    6efe:	4363      	muls	r3, r4
    6f00:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    6f04:	1e5b      	subs	r3, r3, #1
    6f06:	fbb3 f3f2 	udiv	r3, r3, r2
    6f0a:	62c3      	str	r3, [r0, #44]	; 0x2c
    6f0c:	6a83      	ldr	r3, [r0, #40]	; 0x28
    6f0e:	434b      	muls	r3, r1
    6f10:	fbb3 f1f2 	udiv	r1, r3, r2
    6f14:	6281      	str	r1, [r0, #40]	; 0x28
    6f16:	bd30      	pop	{r4, r5, pc}
    6f18:	01e84800 	.word	0x01e84800
    6f1c:	02625a00 	.word	0x02625a00

00006f20 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    6f20:	b570      	push	{r4, r5, r6, lr}
    6f22:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    6f26:	b28b      	uxth	r3, r1
    6f28:	7ac5      	ldrb	r5, [r0, #11]
    6f2a:	ea83 0102 	eor.w	r1, r3, r2
    6f2e:	2200      	movs	r2, #0
    6f30:	b2cc      	uxtb	r4, r1
    6f32:	0a09      	lsrs	r1, r1, #8
    6f34:	fa94 f4a4 	rbit	r4, r4
    6f38:	fa91 f1a1 	rbit	r1, r1
    6f3c:	0e24      	lsrs	r4, r4, #24
    6f3e:	0e09      	lsrs	r1, r1, #24
    6f40:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    6f44:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    6f48:	1c52      	adds	r2, r2, #1
    6f4a:	4419      	add	r1, r3
    6f4c:	b2d2      	uxtb	r2, r2
    6f4e:	b289      	uxth	r1, r1
    6f50:	2a03      	cmp	r2, #3
    6f52:	d3ed      	bcc.n	6f30 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    6f54:	4059      	eors	r1, r3
    6f56:	2225      	movs	r2, #37	; 0x25
    6f58:	fbb1 f3f2 	udiv	r3, r1, r2
    6f5c:	fb02 1213 	mls	r2, r2, r3, r1
    6f60:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    6f64:	f002 0607 	and.w	r6, r2, #7
    6f68:	785b      	ldrb	r3, [r3, #1]
    6f6a:	2401      	movs	r4, #1
    6f6c:	fa04 f606 	lsl.w	r6, r4, r6
    6f70:	4233      	tst	r3, r6
    6f72:	d001      	beq.n	6f78 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    6f74:	4610      	mov	r0, r2
    6f76:	bd70      	pop	{r4, r5, r6, pc}
    6f78:	434d      	muls	r5, r1
    6f7a:	0c29      	lsrs	r1, r5, #16
    6f7c:	1c49      	adds	r1, r1, #1
    6f7e:	b2c9      	uxtb	r1, r1
    6f80:	2200      	movs	r2, #0
    6f82:	1885      	adds	r5, r0, r2
    6f84:	79ab      	ldrb	r3, [r5, #6]
    6f86:	428b      	cmp	r3, r1
    6f88:	d312      	bcc.n	6fb0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    6f8a:	f895 5001 	ldrb.w	r5, [r5, #1]
    6f8e:	2300      	movs	r3, #0
    6f90:	fa04 f603 	lsl.w	r6, r4, r3
    6f94:	4235      	tst	r5, r6
    6f96:	d001      	beq.n	6f9c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    6f98:	1e49      	subs	r1, r1, #1
    6f9a:	b2c9      	uxtb	r1, r1
    6f9c:	b121      	cbz	r1, 6fa8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    6f9e:	1c5b      	adds	r3, r3, #1
    6fa0:	b2db      	uxtb	r3, r3
    6fa2:	2b08      	cmp	r3, #8
    6fa4:	d3f4      	bcc.n	6f90 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    6fa6:	e005      	b.n	6fb4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    6fa8:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    6fac:	b2c0      	uxtb	r0, r0
    6fae:	bd70      	pop	{r4, r5, r6, pc}
    6fb0:	1ac9      	subs	r1, r1, r3
    6fb2:	b2c9      	uxtb	r1, r1
    6fb4:	1c52      	adds	r2, r2, #1
    6fb6:	b2d2      	uxtb	r2, r2
    6fb8:	2a05      	cmp	r2, #5
    6fba:	d3e2      	bcc.n	6f82 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    6fbc:	f240 110d 	movw	r1, #269	; 0x10d
    6fc0:	2046      	movs	r0, #70	; 0x46
    6fc2:	f7fe f833 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fc6:	0000      	movs	r0, r0
    6fc8:	b570      	push	{r4, r5, r6, lr}
    6fca:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    6fce:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    6fd2:	2401      	movs	r4, #1
    6fd4:	fb03 2101 	mla	r1, r3, r1, r2
    6fd8:	2225      	movs	r2, #37	; 0x25
    6fda:	fbb1 f3f2 	udiv	r3, r1, r2
    6fde:	fb02 1113 	mls	r1, r2, r3, r1
    6fe2:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    6fe6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    6fea:	f001 0307 	and.w	r3, r1, #7
    6fee:	7d92      	ldrb	r2, [r2, #22]
    6ff0:	fa04 f303 	lsl.w	r3, r4, r3
    6ff4:	421a      	tst	r2, r3
    6ff6:	d003      	beq.n	7000 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    6ff8:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    6ffc:	2000      	movs	r0, #0
    6ffe:	bd70      	pop	{r4, r5, r6, pc}
    7000:	f890 2020 	ldrb.w	r2, [r0, #32]
    7004:	fbb1 f3f2 	udiv	r3, r1, r2
    7008:	fb02 1113 	mls	r1, r2, r3, r1
    700c:	1c49      	adds	r1, r1, #1
    700e:	b2c9      	uxtb	r1, r1
    7010:	2300      	movs	r3, #0
    7012:	18c5      	adds	r5, r0, r3
    7014:	7eea      	ldrb	r2, [r5, #27]
    7016:	428a      	cmp	r2, r1
    7018:	d311      	bcc.n	703e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    701a:	f895 5016 	ldrb.w	r5, [r5, #22]
    701e:	2200      	movs	r2, #0
    7020:	fa04 f602 	lsl.w	r6, r4, r2
    7024:	4235      	tst	r5, r6
    7026:	d001      	beq.n	702c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    7028:	1e49      	subs	r1, r1, #1
    702a:	b2c9      	uxtb	r1, r1
    702c:	b121      	cbz	r1, 7038 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    702e:	1c52      	adds	r2, r2, #1
    7030:	b2d2      	uxtb	r2, r2
    7032:	2a08      	cmp	r2, #8
    7034:	d3f4      	bcc.n	7020 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    7036:	e004      	b.n	7042 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    7038:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    703c:	e7dc      	b.n	6ff8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    703e:	1a89      	subs	r1, r1, r2
    7040:	b2c9      	uxtb	r1, r1
    7042:	1c5b      	adds	r3, r3, #1
    7044:	b2db      	uxtb	r3, r3
    7046:	2b05      	cmp	r3, #5
    7048:	d3e3      	bcc.n	7012 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    704a:	201f      	movs	r0, #31
    704c:	bd70      	pop	{r4, r5, r6, pc}
	...

00007050 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    7050:	7841      	ldrb	r1, [r0, #1]
    7052:	b141      	cbz	r1, 7066 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    7054:	78c0      	ldrb	r0, [r0, #3]
    7056:	281a      	cmp	r0, #26
    7058:	d203      	bcs.n	7062 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    705a:	4a04      	ldr	r2, [pc, #16]	; (706c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    705c:	5c10      	ldrb	r0, [r2, r0]
    705e:	4288      	cmp	r0, r1
    7060:	d101      	bne.n	7066 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    7062:	2001      	movs	r0, #1
    7064:	4770      	bx	lr
    7066:	2000      	movs	r0, #0
    7068:	4770      	bx	lr
    706a:	0000      	.short	0x0000
    706c:	00010e3e 	.word	0x00010e3e

00007070 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    7070:	b50c      	push	{r2, r3, lr}
    7072:	a20b      	add	r2, pc, #44	; (adr r2, 70a0 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    7074:	e9d2 1200 	ldrd	r1, r2, [r2]
    7078:	e9cd 1200 	strd	r1, r2, [sp]
    707c:	7901      	ldrb	r1, [r0, #4]
    707e:	7940      	ldrb	r0, [r0, #5]
    7080:	f001 0207 	and.w	r2, r1, #7
    7084:	4669      	mov	r1, sp
    7086:	f81d 2002 	ldrb.w	r2, [sp, r2]
    708a:	2a01      	cmp	r2, #1
    708c:	d804      	bhi.n	7098 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    708e:	f000 0007 	and.w	r0, r0, #7
    7092:	5c08      	ldrb	r0, [r1, r0]
    7094:	2801      	cmp	r0, #1
    7096:	d901      	bls.n	709c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    7098:	2000      	movs	r0, #0
    709a:	bd0c      	pop	{r2, r3, pc}
    709c:	2001      	movs	r0, #1
    709e:	bd0c      	pop	{r2, r3, pc}
    70a0:	02010100 	.word	0x02010100
    70a4:	03020201 	.word	0x03020201

000070a8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    70a8:	b510      	push	{r4, lr}
    70aa:	2201      	movs	r2, #1
    70ac:	70c1      	strb	r1, [r0, #3]
    70ae:	291a      	cmp	r1, #26
    70b0:	d202      	bcs.n	70b8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    70b2:	4a06      	ldr	r2, [pc, #24]	; (70cc <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    70b4:	5c52      	ldrb	r2, [r2, r1]
    70b6:	e006      	b.n	70c6 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    70b8:	29ff      	cmp	r1, #255	; 0xff
    70ba:	d004      	beq.n	70c6 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    70bc:	f240 31e2 	movw	r1, #994	; 0x3e2
    70c0:	202a      	movs	r0, #42	; 0x2a
    70c2:	f7fd ffb3 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    70c6:	7042      	strb	r2, [r0, #1]
    70c8:	bd10      	pop	{r4, pc}
    70ca:	0000      	.short	0x0000
    70cc:	00010e3e 	.word	0x00010e3e

000070d0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    70d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70d4:	4c12      	ldr	r4, [pc, #72]	; (7120 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    70d6:	4607      	mov	r7, r0
    70d8:	460e      	mov	r6, r1
    70da:	7da0      	ldrb	r0, [r4, #22]
    70dc:	b110      	cbz	r0, 70e4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    70de:	8b20      	ldrh	r0, [r4, #24]
    70e0:	2800      	cmp	r0, #0
    70e2:	d012      	beq.n	710a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    70e4:	480e      	ldr	r0, [pc, #56]	; (7120 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    70e6:	3014      	adds	r0, #20
    70e8:	4680      	mov	r8, r0
    70ea:	f007 fd7e 	bl	ebea <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    70ee:	b9a8      	cbnz	r0, 711c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    70f0:	8aa5      	ldrh	r5, [r4, #20]
    70f2:	8aa0      	ldrh	r0, [r4, #20]
    70f4:	4632      	mov	r2, r6
    70f6:	4639      	mov	r1, r7
    70f8:	f007 fdbb 	bl	ec72 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    70fc:	b138      	cbz	r0, 710e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    70fe:	7da0      	ldrb	r0, [r4, #22]
    7100:	b110      	cbz	r0, 7108 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    7102:	8b20      	ldrh	r0, [r4, #24]
    7104:	1e40      	subs	r0, r0, #1
    7106:	8320      	strh	r0, [r4, #24]
    7108:	2001      	movs	r0, #1
    710a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    710e:	4640      	mov	r0, r8
    7110:	f007 fd6b 	bl	ebea <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    7114:	b910      	cbnz	r0, 711c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    7116:	8aa0      	ldrh	r0, [r4, #20]
    7118:	42a8      	cmp	r0, r5
    711a:	d1ea      	bne.n	70f2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    711c:	2000      	movs	r0, #0
    711e:	e7f4      	b.n	710a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    7120:	20001254 	.word	0x20001254
    7124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    7128:	468a      	mov	sl, r1
    712a:	4699      	mov	r9, r3
    712c:	4615      	mov	r5, r2
    712e:	4604      	mov	r4, r0
    7130:	a901      	add	r1, sp, #4
    7132:	f007 f9de 	bl	e4f2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7136:	bbe0      	cbnz	r0, 71b2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe2>
    7138:	9f02      	ldr	r7, [sp, #8]
    713a:	f04f 0800 	mov.w	r8, #0
    713e:	3778      	adds	r7, #120	; 0x78
    7140:	b18d      	cbz	r5, 7166 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x96>
    7142:	4620      	mov	r0, r4
    7144:	f7fe fba2 	bl	588c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    7148:	0004      	movs	r4, r0
    714a:	d00f      	beq.n	716c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    714c:	4629      	mov	r1, r5
    714e:	f006 fd9f 	bl	dc90 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    7152:	0006      	movs	r6, r0
    7154:	d003      	beq.n	715e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    7156:	481d      	ldr	r0, [pc, #116]	; (71cc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xfc>)
    7158:	8840      	ldrh	r0, [r0, #2]
    715a:	42a8      	cmp	r0, r5
    715c:	d208      	bcs.n	7170 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa0>
    715e:	2000      	movs	r0, #0
    7160:	b004      	add	sp, #16
    7162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7166:	2001      	movs	r0, #1
    7168:	7538      	strb	r0, [r7, #20]
    716a:	e029      	b.n	71c0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    716c:	216e      	movs	r1, #110	; 0x6e
    716e:	e02a      	b.n	71c6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf6>
    7170:	4620      	mov	r0, r4
    7172:	4631      	mov	r1, r6
    7174:	aa03      	add	r2, sp, #12
    7176:	f006 fd84 	bl	dc82 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    717a:	9803      	ldr	r0, [sp, #12]
    717c:	f8a0 8000 	strh.w	r8, [r0]
    7180:	f880 8002 	strb.w	r8, [r0, #2]
    7184:	7d39      	ldrb	r1, [r7, #20]
    7186:	b109      	cbz	r1, 718c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    7188:	f04f 0a02 	mov.w	sl, #2
    718c:	4651      	mov	r1, sl
    718e:	f007 fcad 	bl	eaec <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    7192:	4631      	mov	r1, r6
    7194:	2603      	movs	r6, #3
    7196:	4620      	mov	r0, r4
    7198:	464a      	mov	r2, r9
    719a:	462b      	mov	r3, r5
    719c:	9600      	str	r6, [sp, #0]
    719e:	f006 fc52 	bl	da46 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    71a2:	4620      	mov	r0, r4
    71a4:	4629      	mov	r1, r5
    71a6:	f006 fd10 	bl	dbca <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    71aa:	b158      	cbz	r0, 71c4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf4>
    71ac:	4644      	mov	r4, r8
    71ae:	a801      	add	r0, sp, #4
    71b0:	e000      	b.n	71b4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    71b2:	e005      	b.n	71c0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    71b4:	f007 fd3a 	bl	ec2c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    71b8:	9802      	ldr	r0, [sp, #8]
    71ba:	f8a0 410a 	strh.w	r4, [r0, #266]	; 0x10a
    71be:	753c      	strb	r4, [r7, #20]
    71c0:	2001      	movs	r0, #1
    71c2:	e7cd      	b.n	7160 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x90>
    71c4:	2184      	movs	r1, #132	; 0x84
    71c6:	202b      	movs	r0, #43	; 0x2b
    71c8:	f7fd ff30 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    71cc:	20001254 	.word	0x20001254

000071d0 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    71d0:	4901      	ldr	r1, [pc, #4]	; (71d8 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    71d2:	2001      	movs	r0, #1
    71d4:	7008      	strb	r0, [r1, #0]
    71d6:	4770      	bx	lr
    71d8:	200002a5 	.word	0x200002a5

000071dc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    71dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71e0:	0006      	movs	r6, r0
    71e2:	d00a      	beq.n	71fa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    71e4:	4825      	ldr	r0, [pc, #148]	; (727c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
    71e6:	7801      	ldrb	r1, [r0, #0]
    71e8:	b151      	cbz	r1, 7200 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    71ea:	2100      	movs	r1, #0
    71ec:	7071      	strb	r1, [r6, #1]
    71ee:	2203      	movs	r2, #3
    71f0:	7032      	strb	r2, [r6, #0]
    71f2:	2201      	movs	r2, #1
    71f4:	7132      	strb	r2, [r6, #4]
    71f6:	7001      	strb	r1, [r0, #0]
    71f8:	e03a      	b.n	7270 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    71fa:	f240 21c7 	movw	r1, #711	; 0x2c7
    71fe:	e009      	b.n	7214 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    7200:	4c1e      	ldr	r4, [pc, #120]	; (727c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
    7202:	1ce4      	adds	r4, r4, #3
    7204:	7820      	ldrb	r0, [r4, #0]
    7206:	b940      	cbnz	r0, 721a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    7208:	1ca0      	adds	r0, r4, #2
    720a:	f007 fd7b 	bl	ed04 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    720e:	b120      	cbz	r0, 721a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    7210:	f240 21d6 	movw	r1, #726	; 0x2d6
    7214:	2010      	movs	r0, #16
    7216:	f7fd ff09 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    721a:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    721e:	2000      	movs	r0, #0
    7220:	f7fe f8ee 	bl	5400 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    7224:	4f16      	ldr	r7, [pc, #88]	; (7280 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    7226:	4605      	mov	r5, r0
    7228:	6838      	ldr	r0, [r7, #0]
    722a:	b160      	cbz	r0, 7246 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
    722c:	8860      	ldrh	r0, [r4, #2]
    722e:	42a8      	cmp	r0, r5
    7230:	d309      	bcc.n	7246 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
    7232:	1b40      	subs	r0, r0, r5
    7234:	b2c0      	uxtb	r0, r0
    7236:	2101      	movs	r1, #1
    7238:	f006 fed2 	bl	dfe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    723c:	b158      	cbz	r0, 7256 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
    723e:	4631      	mov	r1, r6
    7240:	f000 f84e 	bl	72e0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c>
    7244:	e006      	b.n	7254 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x78>
    7246:	480f      	ldr	r0, [pc, #60]	; (7284 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>)
    7248:	6800      	ldr	r0, [r0, #0]
    724a:	b120      	cbz	r0, 7256 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
    724c:	8860      	ldrh	r0, [r4, #2]
    724e:	4631      	mov	r1, r6
    7250:	f000 f8de 	bl	7410 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>
    7254:	b960      	cbnz	r0, 7270 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    7256:	1ca0      	adds	r0, r4, #2
    7258:	f007 fd54 	bl	ed04 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    725c:	b910      	cbnz	r0, 7264 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    725e:	8861      	ldrh	r1, [r4, #2]
    7260:	4541      	cmp	r1, r8
    7262:	d1e1      	bne.n	7228 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c>
    7264:	4808      	ldr	r0, [pc, #32]	; (7288 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>)
    7266:	6801      	ldr	r1, [r0, #0]
    7268:	b129      	cbz	r1, 7276 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    726a:	4630      	mov	r0, r6
    726c:	4788      	blx	r1
    726e:	b110      	cbz	r0, 7276 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    7270:	2001      	movs	r0, #1
    7272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7276:	2000      	movs	r0, #0
    7278:	e7fb      	b.n	7272 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x96>
    727a:	0000      	.short	0x0000
    727c:	200002a5 	.word	0x200002a5
    7280:	20000108 	.word	0x20000108
    7284:	2000010c 	.word	0x2000010c
    7288:	20000110 	.word	0x20000110

0000728c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    728c:	4901      	ldr	r1, [pc, #4]	; (7294 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    728e:	7008      	strb	r0, [r1, #0]
    7290:	f000 b956 	b.w	7540 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28c>
    7294:	200002a4 	.word	0x200002a4

00007298 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    7298:	4801      	ldr	r0, [pc, #4]	; (72a0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    729a:	7800      	ldrb	r0, [r0, #0]
    729c:	f7fd bce2 	b.w	4c64 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    72a0:	200002a4 	.word	0x200002a4

000072a4 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    72a4:	4902      	ldr	r1, [pc, #8]	; (72b0 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    72a6:	4801      	ldr	r0, [pc, #4]	; (72ac <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    72a8:	6008      	str	r0, [r1, #0]
    72aa:	4770      	bx	lr
    72ac:	000076ad 	.word	0x000076ad
    72b0:	20000108 	.word	0x20000108

000072b4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    72b4:	4905      	ldr	r1, [pc, #20]	; (72cc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
    72b6:	4804      	ldr	r0, [pc, #16]	; (72c8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
    72b8:	6008      	str	r0, [r1, #0]
    72ba:	4906      	ldr	r1, [pc, #24]	; (72d4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
    72bc:	4804      	ldr	r0, [pc, #16]	; (72d0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
    72be:	6008      	str	r0, [r1, #0]
    72c0:	4906      	ldr	r1, [pc, #24]	; (72dc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
    72c2:	4805      	ldr	r0, [pc, #20]	; (72d8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
    72c4:	6008      	str	r0, [r1, #0]
    72c6:	4770      	bx	lr
    72c8:	000076ad 	.word	0x000076ad
    72cc:	20000108 	.word	0x20000108
    72d0:	00008e89 	.word	0x00008e89
    72d4:	2000010c 	.word	0x2000010c
    72d8:	00005e15 	.word	0x00005e15
    72dc:	20000110 	.word	0x20000110
    72e0:	b570      	push	{r4, r5, r6, lr}
    72e2:	0005      	movs	r5, r0
    72e4:	460c      	mov	r4, r1
    72e6:	d02e      	beq.n	7346 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    72e8:	4818      	ldr	r0, [pc, #96]	; (734c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x98>)
    72ea:	6802      	ldr	r2, [r0, #0]
    72ec:	b35a      	cbz	r2, 7346 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    72ee:	4628      	mov	r0, r5
    72f0:	4790      	blx	r2
    72f2:	b340      	cbz	r0, 7346 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    72f4:	7820      	ldrb	r0, [r4, #0]
    72f6:	2811      	cmp	r0, #17
    72f8:	d002      	beq.n	7300 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4c>
    72fa:	2814      	cmp	r0, #20
    72fc:	d003      	beq.n	7306 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x52>
    72fe:	e020      	b.n	7342 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    7300:	7920      	ldrb	r0, [r4, #4]
    7302:	b1f0      	cbz	r0, 7342 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    7304:	e00a      	b.n	731c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    7306:	7920      	ldrb	r0, [r4, #4]
    7308:	b120      	cbz	r0, 7314 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x60>
    730a:	4628      	mov	r0, r5
    730c:	f007 ff11 	bl	f132 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    7310:	b120      	cbz	r0, 731c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    7312:	e016      	b.n	7342 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    7314:	490e      	ldr	r1, [pc, #56]	; (7350 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9c>)
    7316:	2000      	movs	r0, #0
    7318:	7008      	strb	r0, [r1, #0]
    731a:	e012      	b.n	7342 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    731c:	88e4      	ldrh	r4, [r4, #6]
    731e:	2100      	movs	r1, #0
    7320:	4620      	mov	r0, r4
    7322:	f006 fe5d 	bl	dfe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7326:	b160      	cbz	r0, 7342 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    7328:	8800      	ldrh	r0, [r0, #0]
    732a:	f007 f814 	bl	e356 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    732e:	2100      	movs	r1, #0
    7330:	4620      	mov	r0, r4
    7332:	f7fe f903 	bl	553c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7336:	b120      	cbz	r0, 7342 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    7338:	f240 1171 	movw	r1, #369	; 0x171
    733c:	2010      	movs	r0, #16
    733e:	f7fd fe75 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7342:	2001      	movs	r0, #1
    7344:	bd70      	pop	{r4, r5, r6, pc}
    7346:	2000      	movs	r0, #0
    7348:	bd70      	pop	{r4, r5, r6, pc}
    734a:	0000      	.short	0x0000
    734c:	20000108 	.word	0x20000108
    7350:	200002a8 	.word	0x200002a8
    7354:	b510      	push	{r4, lr}
    7356:	492d      	ldr	r1, [pc, #180]	; (740c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x158>)
    7358:	b086      	sub	sp, #24
    735a:	7c8a      	ldrb	r2, [r1, #18]
    735c:	7801      	ldrb	r1, [r0, #0]
    735e:	07d3      	lsls	r3, r2, #31
    7360:	d101      	bne.n	7366 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb2>
    7362:	2919      	cmp	r1, #25
    7364:	d004      	beq.n	7370 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xbc>
    7366:	2918      	cmp	r1, #24
    7368:	d01f      	beq.n	73aa <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf6>
    736a:	2912      	cmp	r1, #18
    736c:	d046      	beq.n	73fc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x148>
    736e:	e04a      	b.n	7406 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    7370:	8880      	ldrh	r0, [r0, #4]
    7372:	f8ad 0000 	strh.w	r0, [sp]
    7376:	a902      	add	r1, sp, #8
    7378:	f007 f8bb 	bl	e4f2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    737c:	b110      	cbz	r0, 7384 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd0>
    737e:	f44f 71c4 	mov.w	r1, #392	; 0x188
    7382:	e035      	b.n	73f0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    7384:	9803      	ldr	r0, [sp, #12]
    7386:	f810 1f6a 	ldrb.w	r1, [r0, #106]!
    738a:	f88d 1002 	strb.w	r1, [sp, #2]
    738e:	7841      	ldrb	r1, [r0, #1]
    7390:	f88d 1003 	strb.w	r1, [sp, #3]
    7394:	8840      	ldrh	r0, [r0, #2]
    7396:	f8ad 0004 	strh.w	r0, [sp, #4]
    739a:	2102      	movs	r1, #2
    739c:	4668      	mov	r0, sp
    739e:	f009 f94b 	bl	10638 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    73a2:	b340      	cbz	r0, 73f6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    73a4:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    73a8:	e022      	b.n	73f0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    73aa:	0791      	lsls	r1, r2, #30
    73ac:	d42b      	bmi.n	7406 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    73ae:	8884      	ldrh	r4, [r0, #4]
    73b0:	a903      	add	r1, sp, #12
    73b2:	4620      	mov	r0, r4
    73b4:	f008 ff5f 	bl	10276 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    73b8:	b110      	cbz	r0, 73c0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x10c>
    73ba:	f240 11a5 	movw	r1, #421	; 0x1a5
    73be:	e017      	b.n	73f0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    73c0:	f8ad 4000 	strh.w	r4, [sp]
    73c4:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    73c8:	f8ad 0002 	strh.w	r0, [sp, #2]
    73cc:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    73d0:	f8ad 0004 	strh.w	r0, [sp, #4]
    73d4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    73d8:	f8ad 0006 	strh.w	r0, [sp, #6]
    73dc:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    73e0:	f8ad 0008 	strh.w	r0, [sp, #8]
    73e4:	4668      	mov	r0, sp
    73e6:	f008 ffc4 	bl	10372 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    73ea:	b120      	cbz	r0, 73f6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    73ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    73f0:	2010      	movs	r0, #16
    73f2:	f7fd fe1b 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    73f6:	2001      	movs	r0, #1
    73f8:	b006      	add	sp, #24
    73fa:	bd10      	pop	{r4, pc}
    73fc:	0751      	lsls	r1, r2, #29
    73fe:	d402      	bmi.n	7406 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    7400:	7b80      	ldrb	r0, [r0, #14]
    7402:	07c0      	lsls	r0, r0, #31
    7404:	d0f7      	beq.n	73f6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    7406:	2000      	movs	r0, #0
    7408:	e7f6      	b.n	73f8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x144>
    740a:	0000      	.short	0x0000
    740c:	20001254 	.word	0x20001254
    7410:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7414:	460c      	mov	r4, r1
    7416:	4680      	mov	r8, r0
    7418:	4669      	mov	r1, sp
    741a:	f007 f86a 	bl	e4f2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    741e:	2800      	cmp	r0, #0
    7420:	d17d      	bne.n	751e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26a>
    7422:	4d46      	ldr	r5, [pc, #280]	; (753c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x288>)
    7424:	4681      	mov	r9, r0
    7426:	9801      	ldr	r0, [sp, #4]
    7428:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    742c:	2800      	cmp	r0, #0
    742e:	d059      	beq.n	74e4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x230>
    7430:	682a      	ldr	r2, [r5, #0]
    7432:	b14a      	cbz	r2, 7448 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x194>
    7434:	4621      	mov	r1, r4
    7436:	4640      	mov	r0, r8
    7438:	4790      	blx	r2
    743a:	b128      	cbz	r0, 7448 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x194>
    743c:	4620      	mov	r0, r4
    743e:	f7ff ff89 	bl	7354 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa0>
    7442:	2800      	cmp	r0, #0
    7444:	d1ef      	bne.n	7426 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x172>
    7446:	e04c      	b.n	74e2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22e>
    7448:	9d01      	ldr	r5, [sp, #4]
    744a:	f895 0144 	ldrb.w	r0, [r5, #324]	; 0x144
    744e:	f04f 0b01 	mov.w	fp, #1
    7452:	3578      	adds	r5, #120	; 0x78
    7454:	b950      	cbnz	r0, 746c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1b8>
    7456:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    745a:	f88d 0008 	strb.w	r0, [sp, #8]
    745e:	9802      	ldr	r0, [sp, #8]
    7460:	9002      	str	r0, [sp, #8]
    7462:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7466:	b108      	cbz	r0, 746c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1b8>
    7468:	2001      	movs	r0, #1
    746a:	e000      	b.n	746e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1ba>
    746c:	2000      	movs	r0, #0
    746e:	4682      	mov	sl, r0
    7470:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
    7474:	b1b8      	cbz	r0, 74a6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1f2>
    7476:	f895 0046 	ldrb.w	r0, [r5, #70]	; 0x46
    747a:	0780      	lsls	r0, r0, #30
    747c:	d513      	bpl.n	74a6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1f2>
    747e:	f884 9001 	strb.w	r9, [r4, #1]
    7482:	f884 b000 	strb.w	fp, [r4]
    7486:	f884 9004 	strb.w	r9, [r4, #4]
    748a:	f8a4 8005 	strh.w	r8, [r4, #5]
    748e:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
    7492:	71e1      	strb	r1, [r4, #7]
    7494:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
    7498:	8121      	strh	r1, [r4, #8]
    749a:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    749e:	8161      	strh	r1, [r4, #10]
    74a0:	f885 9045 	strb.w	r9, [r5, #69]	; 0x45
    74a4:	e01d      	b.n	74e2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22e>
    74a6:	4640      	mov	r0, r8
    74a8:	f7fe f9f0 	bl	588c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    74ac:	0007      	movs	r7, r0
    74ae:	d00d      	beq.n	74cc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x218>
    74b0:	f006 fbaf 	bl	dc12 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    74b4:	0006      	movs	r6, r0
    74b6:	d017      	beq.n	74e8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x234>
    74b8:	f884 9001 	strb.w	r9, [r4, #1]
    74bc:	200d      	movs	r0, #13
    74be:	7020      	strb	r0, [r4, #0]
    74c0:	f8a4 8006 	strh.w	r8, [r4, #6]
    74c4:	8126      	strh	r6, [r4, #8]
    74c6:	f884 b004 	strb.w	fp, [r4, #4]
    74ca:	e007      	b.n	74dc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x228>
    74cc:	f240 212d 	movw	r1, #557	; 0x22d
    74d0:	e02e      	b.n	7530 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x27c>
    74d2:	2100      	movs	r1, #0
    74d4:	4638      	mov	r0, r7
    74d6:	460a      	mov	r2, r1
    74d8:	f006 fcb1 	bl	de3e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    74dc:	1e76      	subs	r6, r6, #1
    74de:	b2b6      	uxth	r6, r6
    74e0:	d2f7      	bcs.n	74d2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x21e>
    74e2:	2001      	movs	r0, #1
    74e4:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    74e8:	4640      	mov	r0, r8
    74ea:	f7fe f9b9 	bl	5860 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    74ee:	b1e8      	cbz	r0, 752c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    74f0:	f1ba 0f00 	cmp.w	sl, #0
    74f4:	d01f      	beq.n	7536 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x282>
    74f6:	f006 fabd 	bl	da74 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    74fa:	b180      	cbz	r0, 751e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26a>
    74fc:	4640      	mov	r0, r8
    74fe:	f006 ff2a 	bl	e356 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    7502:	2100      	movs	r1, #0
    7504:	4640      	mov	r0, r8
    7506:	f7fe f819 	bl	553c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    750a:	f884 9001 	strb.w	r9, [r4, #1]
    750e:	210a      	movs	r1, #10
    7510:	7021      	strb	r1, [r4, #0]
    7512:	f884 9004 	strb.w	r9, [r4, #4]
    7516:	4648      	mov	r0, r9
    7518:	f8a4 8005 	strh.w	r8, [r4, #5]
    751c:	e000      	b.n	7520 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26c>
    751e:	e00a      	b.n	7536 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x282>
    7520:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    7524:	71e1      	strb	r1, [r4, #7]
    7526:	3524      	adds	r5, #36	; 0x24
    7528:	7028      	strb	r0, [r5, #0]
    752a:	e7da      	b.n	74e2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22e>
    752c:	f44f 7111 	mov.w	r1, #580	; 0x244
    7530:	2010      	movs	r0, #16
    7532:	f7fd fd7b 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7536:	2000      	movs	r0, #0
    7538:	e7d4      	b.n	74e4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x230>
    753a:	0000      	.short	0x0000
    753c:	2000010c 	.word	0x2000010c
    7540:	4804      	ldr	r0, [pc, #16]	; (7554 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2a0>)
    7542:	2100      	movs	r1, #0
    7544:	f64f 72ff 	movw	r2, #65535	; 0xffff
    7548:	7001      	strb	r1, [r0, #0]
    754a:	8042      	strh	r2, [r0, #2]
    754c:	1f00      	subs	r0, r0, #4
    754e:	f8a0 1001 	strh.w	r1, [r0, #1]
    7552:	4770      	bx	lr
    7554:	200002a8 	.word	0x200002a8

00007558 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    7558:	b5f0      	push	{r4, r5, r6, r7, lr}
    755a:	f06f 021f 	mvn.w	r2, #31
    755e:	0c01      	lsrs	r1, r0, #16
    7560:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    7564:	251f      	movs	r5, #31
    7566:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    756a:	3854      	subs	r0, #84	; 0x54
    756c:	d00d      	beq.n	758a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    756e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    7572:	3855      	subs	r0, #85	; 0x55
    7574:	d009      	beq.n	758a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7576:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    757a:	38aa      	subs	r0, #170	; 0xaa
    757c:	d005      	beq.n	758a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    757e:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    7582:	38aa      	subs	r0, #170	; 0xaa
    7584:	d001      	beq.n	758a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7586:	2001      	movs	r0, #1
    7588:	e000      	b.n	758c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    758a:	2000      	movs	r0, #0
    758c:	2200      	movs	r2, #0
    758e:	4613      	mov	r3, r2
    7590:	ea4f 0402 	mov.w	r4, r2
    7594:	ea82 0701 	eor.w	r7, r2, r1
    7598:	43ff      	mvns	r7, r7
    759a:	431f      	orrs	r7, r3
    759c:	1c7f      	adds	r7, r7, #1
    759e:	d00f      	beq.n	75c0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    75a0:	f006 0701 	and.w	r7, r6, #1
    75a4:	0852      	lsrs	r2, r2, #1
    75a6:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    75aa:	f005 0701 	and.w	r7, r5, #1
    75ae:	085b      	lsrs	r3, r3, #1
    75b0:	0876      	lsrs	r6, r6, #1
    75b2:	086d      	lsrs	r5, r5, #1
    75b4:	1c64      	adds	r4, r4, #1
    75b6:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    75ba:	2c16      	cmp	r4, #22
    75bc:	d3ea      	bcc.n	7594 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    75be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    75c0:	2000      	movs	r0, #0
    75c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000075c4 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>:
    75c4:	b510      	push	{r4, lr}
    75c6:	e9d0 2100 	ldrd	r2, r1, [r0]
    75ca:	4b09      	ldr	r3, [pc, #36]	; (75f0 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x2c>)
    75cc:	4c09      	ldr	r4, [pc, #36]	; (75f4 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x30>)
    75ce:	4353      	muls	r3, r2
    75d0:	4354      	muls	r4, r2
    75d2:	4051      	eors	r1, r2
    75d4:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    75d8:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    75dc:	ea4f 41f1 	mov.w	r1, r1, ror #19
    75e0:	e9c0 2100 	strd	r2, r1, [r0]
    75e4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    75e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    75ec:	4618      	mov	r0, r3
    75ee:	bd10      	pop	{r4, pc}
    75f0:	c6ef3760 	.word	0xc6ef3760
    75f4:	9e3779bb 	.word	0x9e3779bb

000075f8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    75f8:	b570      	push	{r4, r5, r6, lr}
    75fa:	4604      	mov	r4, r0
    75fc:	7c00      	ldrb	r0, [r0, #16]
    75fe:	b300      	cbz	r0, 7642 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    7600:	2802      	cmp	r0, #2
    7602:	d01e      	beq.n	7642 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    7604:	f05f 0001 	movs.w	r0, #1
    7608:	f104 0149 	add.w	r1, r4, #73	; 0x49
    760c:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    7610:	460d      	mov	r5, r1
    7612:	b1c0      	cbz	r0, 7646 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    7614:	7de0      	ldrb	r0, [r4, #23]
    7616:	b1f0      	cbz	r0, 7656 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    7618:	f8d4 0011 	ldr.w	r0, [r4, #17]
    761c:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    7620:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    7624:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    7628:	7c20      	ldrb	r0, [r4, #16]
    762a:	f007 fce5 	bl	eff8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    762e:	7620      	strb	r0, [r4, #24]
    7630:	2008      	movs	r0, #8
    7632:	7660      	strb	r0, [r4, #25]
    7634:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7638:	4629      	mov	r1, r5
    763a:	f007 fcc9 	bl	efd0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    763e:	b9a8      	cbnz	r0, 766c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    7640:	e00e      	b.n	7660 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    7642:	2000      	movs	r0, #0
    7644:	e7e0      	b.n	7608 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    7646:	2000      	movs	r0, #0
    7648:	f7fe fb96 	bl	5d78 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    764c:	2800      	cmp	r0, #0
    764e:	d1eb      	bne.n	7628 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    7650:	f240 41ad 	movw	r1, #1197	; 0x4ad
    7654:	e001      	b.n	765a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    7656:	f240 41b1 	movw	r1, #1201	; 0x4b1
    765a:	202d      	movs	r0, #45	; 0x2d
    765c:	f7fd fce6 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7660:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7664:	4629      	mov	r1, r5
    7666:	f007 fcbc 	bl	efe2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    766a:	b100      	cbz	r0, 766e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    766c:	2001      	movs	r0, #1
    766e:	76a0      	strb	r0, [r4, #26]
    7670:	7e20      	ldrb	r0, [r4, #24]
    7672:	b130      	cbz	r0, 7682 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    7674:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    7678:	f104 0150 	add.w	r1, r4, #80	; 0x50
    767c:	f006 fef6 	bl	e46c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    7680:	7660      	strb	r0, [r4, #25]
    7682:	2500      	movs	r5, #0
    7684:	6425      	str	r5, [r4, #64]	; 0x40
    7686:	f005 fb11 	bl	ccac <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    768a:	6460      	str	r0, [r4, #68]	; 0x44
    768c:	2100      	movs	r1, #0
    768e:	4620      	mov	r0, r4
    7690:	f007 fddd 	bl	f24e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x90>
    7694:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
    7698:	78a0      	ldrb	r0, [r4, #2]
    769a:	0740      	lsls	r0, r0, #29
    769c:	d505      	bpl.n	76aa <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xb2>
    769e:	4620      	mov	r0, r4
    76a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    76a4:	2100      	movs	r1, #0
    76a6:	f000 bdff 	b.w	82a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a8>
    76aa:	bd70      	pop	{r4, r5, r6, pc}

000076ac <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    76ac:	b508      	push	{r3, lr}
    76ae:	f890 2094 	ldrb.w	r2, [r0, #148]	; 0x94
    76b2:	f88d 2000 	strb.w	r2, [sp]
    76b6:	9a00      	ldr	r2, [sp, #0]
    76b8:	9200      	str	r2, [sp, #0]
    76ba:	f89d 3000 	ldrb.w	r3, [sp]
    76be:	2200      	movs	r2, #0
    76c0:	b163      	cbz	r3, 76dc <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    76c2:	704a      	strb	r2, [r1, #1]
    76c4:	2317      	movs	r3, #23
    76c6:	700b      	strb	r3, [r1, #0]
    76c8:	f850 3f95 	ldr.w	r3, [r0, #149]!
    76cc:	604b      	str	r3, [r1, #4]
    76ce:	6843      	ldr	r3, [r0, #4]
    76d0:	608b      	str	r3, [r1, #8]
    76d2:	7a03      	ldrb	r3, [r0, #8]
    76d4:	730b      	strb	r3, [r1, #12]
    76d6:	f800 2c01 	strb.w	r2, [r0, #-1]
    76da:	e03b      	b.n	7754 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    76dc:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    76e0:	f88d 3000 	strb.w	r3, [sp]
    76e4:	9b00      	ldr	r3, [sp, #0]
    76e6:	9300      	str	r3, [sp, #0]
    76e8:	f89d 3000 	ldrb.w	r3, [sp]
    76ec:	b143      	cbz	r3, 7700 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    76ee:	704a      	strb	r2, [r1, #1]
    76f0:	2305      	movs	r3, #5
    76f2:	700b      	strb	r3, [r1, #0]
    76f4:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
    76f8:	604b      	str	r3, [r1, #4]
    76fa:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
    76fe:	e029      	b.n	7754 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    7700:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    7704:	f88d 3000 	strb.w	r3, [sp]
    7708:	9b00      	ldr	r3, [sp, #0]
    770a:	9300      	str	r3, [sp, #0]
    770c:	f89d 3000 	ldrb.w	r3, [sp]
    7710:	b11b      	cbz	r3, 771a <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    7712:	bf00      	nop
    7714:	f007 fd71 	bl	f1fa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    7718:	e01c      	b.n	7754 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    771a:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    771e:	f88d 3000 	strb.w	r3, [sp]
    7722:	9b00      	ldr	r3, [sp, #0]
    7724:	9300      	str	r3, [sp, #0]
    7726:	f89d 3000 	ldrb.w	r3, [sp]
    772a:	b1ab      	cbz	r3, 7758 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    772c:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    7730:	f88d 3000 	strb.w	r3, [sp]
    7734:	9b00      	ldr	r3, [sp, #0]
    7736:	9300      	str	r3, [sp, #0]
    7738:	f89d 3000 	ldrb.w	r3, [sp]
    773c:	2b00      	cmp	r3, #0
    773e:	d1e9      	bne.n	7714 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    7740:	704a      	strb	r2, [r1, #1]
    7742:	2314      	movs	r3, #20
    7744:	700b      	strb	r3, [r1, #0]
    7746:	f850 3f88 	ldr.w	r3, [r0, #136]!
    774a:	604b      	str	r3, [r1, #4]
    774c:	8883      	ldrh	r3, [r0, #4]
    774e:	810b      	strh	r3, [r1, #8]
    7750:	f800 2c02 	strb.w	r2, [r0, #-2]
    7754:	2001      	movs	r0, #1
    7756:	bd08      	pop	{r3, pc}
    7758:	2000      	movs	r0, #0
    775a:	bd08      	pop	{r3, pc}

0000775c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    775c:	b530      	push	{r4, r5, lr}
    775e:	460c      	mov	r4, r1
    7760:	b08d      	sub	sp, #52	; 0x34
    7762:	4605      	mov	r5, r0
    7764:	4601      	mov	r1, r0
    7766:	2220      	movs	r2, #32
    7768:	a802      	add	r0, sp, #8
    776a:	f005 fc14 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    776e:	a80a      	add	r0, sp, #40	; 0x28
    7770:	f007 fe1a 	bl	f3a8 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    7774:	7aa0      	ldrb	r0, [r4, #10]
    7776:	f88d 0018 	strb.w	r0, [sp, #24]
    777a:	7820      	ldrb	r0, [r4, #0]
    777c:	f88d 0008 	strb.w	r0, [sp, #8]
    7780:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    7784:	f8ad 0000 	strh.w	r0, [sp]
    7788:	f89d 0000 	ldrb.w	r0, [sp]
    778c:	f000 0101 	and.w	r1, r0, #1
    7790:	f3c0 0240 	ubfx	r2, r0, #1, #1
    7794:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    7798:	f3c0 0280 	ubfx	r2, r0, #2, #1
    779c:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    77a0:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    77a4:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    77a8:	f3c0 1200 	ubfx	r2, r0, #4, #1
    77ac:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    77b0:	f3c0 1240 	ubfx	r2, r0, #5, #1
    77b4:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    77b8:	f3c0 1080 	ubfx	r0, r0, #6, #1
    77bc:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    77c0:	f8ad 000a 	strh.w	r0, [sp, #10]
    77c4:	7d20      	ldrb	r0, [r4, #20]
    77c6:	2801      	cmp	r0, #1
    77c8:	d006      	beq.n	77d8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    77ca:	2802      	cmp	r0, #2
    77cc:	d004      	beq.n	77d8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    77ce:	f240 2186 	movw	r1, #646	; 0x286
    77d2:	2006      	movs	r0, #6
    77d4:	f7fd fc2a 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77d8:	f88d 000c 	strb.w	r0, [sp, #12]
    77dc:	7a61      	ldrb	r1, [r4, #9]
    77de:	a80a      	add	r0, sp, #40	; 0x28
    77e0:	f007 fdc9 	bl	f376 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    77e4:	7d20      	ldrb	r0, [r4, #20]
    77e6:	2101      	movs	r1, #1
    77e8:	2802      	cmp	r0, #2
    77ea:	d102      	bne.n	77f2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    77ec:	7d60      	ldrb	r0, [r4, #21]
    77ee:	1c40      	adds	r0, r0, #1
    77f0:	b2c1      	uxtb	r1, r0
    77f2:	7ea0      	ldrb	r0, [r4, #26]
    77f4:	1c40      	adds	r0, r0, #1
    77f6:	b2c2      	uxtb	r2, r0
    77f8:	a80a      	add	r0, sp, #40	; 0x28
    77fa:	f007 fd83 	bl	f304 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    77fe:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    7802:	0700      	lsls	r0, r0, #28
    7804:	d501      	bpl.n	780a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    7806:	2000      	movs	r0, #0
    7808:	e020      	b.n	784c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    780a:	a80a      	add	r0, sp, #40	; 0x28
    780c:	f007 fd8c 	bl	f328 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7810:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    7814:	2228      	movs	r2, #40	; 0x28
    7816:	f000 fded 	bl	83f4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    781a:	f240 2171 	movw	r1, #625	; 0x271
    781e:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    7822:	fbb0 f0f1 	udiv	r0, r0, r1
    7826:	4348      	muls	r0, r1
    7828:	f8d4 1002 	ldr.w	r1, [r4, #2]
    782c:	f240 2371 	movw	r3, #625	; 0x271
    7830:	0a0a      	lsrs	r2, r1, #8
    7832:	f240 2171 	movw	r1, #625	; 0x271
    7836:	434a      	muls	r2, r1
    7838:	f8d4 1005 	ldr.w	r1, [r4, #5]
    783c:	0a09      	lsrs	r1, r1, #8
    783e:	4359      	muls	r1, r3
    7840:	4290      	cmp	r0, r2
    7842:	d801      	bhi.n	7848 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    7844:	9204      	str	r2, [sp, #16]
    7846:	e004      	b.n	7852 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    7848:	4288      	cmp	r0, r1
    784a:	d801      	bhi.n	7850 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    784c:	9004      	str	r0, [sp, #16]
    784e:	e000      	b.n	7852 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    7850:	9104      	str	r1, [sp, #16]
    7852:	7ca0      	ldrb	r0, [r4, #18]
    7854:	f88d 0017 	strb.w	r0, [sp, #23]
    7858:	7e20      	ldrb	r0, [r4, #24]
    785a:	2801      	cmp	r0, #1
    785c:	d000      	beq.n	7860 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    785e:	2000      	movs	r0, #0
    7860:	f88d 0014 	strb.w	r0, [sp, #20]
    7864:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    7866:	f006 fc79 	bl	e15c <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    786a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    786c:	f006 fd1a 	bl	e2a4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    7870:	2220      	movs	r2, #32
    7872:	a902      	add	r1, sp, #8
    7874:	4628      	mov	r0, r5
    7876:	f005 fb8e 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    787a:	980a      	ldr	r0, [sp, #40]	; 0x28
    787c:	6228      	str	r0, [r5, #32]
    787e:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    7882:	84a8      	strh	r0, [r5, #36]	; 0x24
    7884:	7ae0      	ldrb	r0, [r4, #11]
    7886:	b168      	cbz	r0, 78a4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    7888:	2802      	cmp	r0, #2
    788a:	d00b      	beq.n	78a4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    788c:	f05f 0001 	movs.w	r0, #1
    7890:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    7894:	68e0      	ldr	r0, [r4, #12]
    7896:	6528      	str	r0, [r5, #80]	; 0x50
    7898:	8a20      	ldrh	r0, [r4, #16]
    789a:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    789e:	b00d      	add	sp, #52	; 0x34
    78a0:	2000      	movs	r0, #0
    78a2:	bd30      	pop	{r4, r5, pc}
    78a4:	2000      	movs	r0, #0
    78a6:	e7f3      	b.n	7890 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

000078a8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    78a8:	4a0a      	ldr	r2, [pc, #40]	; (78d4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    78aa:	b510      	push	{r4, lr}
    78ac:	2100      	movs	r1, #0
    78ae:	7011      	strb	r1, [r2, #0]
    78b0:	4c09      	ldr	r4, [pc, #36]	; (78d8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    78b2:	6060      	str	r0, [r4, #4]
    78b4:	f000 f822 	bl	78fc <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    78b8:	b110      	cbz	r0, 78c0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    78ba:	f240 312d 	movw	r1, #813	; 0x32d
    78be:	e004      	b.n	78ca <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    78c0:	68a0      	ldr	r0, [r4, #8]
    78c2:	2800      	cmp	r0, #0
    78c4:	d104      	bne.n	78d0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    78c6:	f44f 714c 	mov.w	r1, #816	; 0x330
    78ca:	202d      	movs	r0, #45	; 0x2d
    78cc:	f7fd fbae 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    78d0:	bd10      	pop	{r4, pc}
    78d2:	0000      	.short	0x0000
    78d4:	20001270 	.word	0x20001270
    78d8:	20000114 	.word	0x20000114

000078dc <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    78dc:	4902      	ldr	r1, [pc, #8]	; (78e8 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    78de:	4801      	ldr	r0, [pc, #4]	; (78e4 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    78e0:	6088      	str	r0, [r1, #8]
    78e2:	4770      	bx	lr
    78e4:	000083dc 	.word	0x000083dc
    78e8:	20000114 	.word	0x20000114

000078ec <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    78ec:	4902      	ldr	r1, [pc, #8]	; (78f8 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    78ee:	6008      	str	r0, [r1, #0]
    78f0:	6889      	ldr	r1, [r1, #8]
    78f2:	6809      	ldr	r1, [r1, #0]
    78f4:	4708      	bx	r1
    78f6:	0000      	.short	0x0000
    78f8:	20000114 	.word	0x20000114

000078fc <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    78fc:	4808      	ldr	r0, [pc, #32]	; (7920 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    78fe:	b510      	push	{r4, lr}
    7900:	7800      	ldrb	r0, [r0, #0]
    7902:	b110      	cbz	r0, 790a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    7904:	240c      	movs	r4, #12
    7906:	4620      	mov	r0, r4
    7908:	bd10      	pop	{r4, pc}
    790a:	2400      	movs	r4, #0
    790c:	2218      	movs	r2, #24
    790e:	4621      	mov	r1, r4
    7910:	4803      	ldr	r0, [pc, #12]	; (7920 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    7912:	f005 fbba 	bl	d08a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7916:	f004 f8bf 	bl	ba98 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    791a:	f003 fee3 	bl	b6e4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    791e:	e7f2      	b.n	7906 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    7920:	20001270 	.word	0x20001270

00007924 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    7924:	4904      	ldr	r1, [pc, #16]	; (7938 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    7926:	b510      	push	{r4, lr}
    7928:	7809      	ldrb	r1, [r1, #0]
    792a:	2901      	cmp	r1, #1
    792c:	d101      	bne.n	7932 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    792e:	f000 fb85 	bl	803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>
    7932:	2000      	movs	r0, #0
    7934:	bd10      	pop	{r4, pc}
    7936:	0000      	.short	0x0000
    7938:	20001270 	.word	0x20001270

0000793c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    793c:	4902      	ldr	r1, [pc, #8]	; (7948 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    793e:	4801      	ldr	r0, [pc, #4]	; (7944 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    7940:	6008      	str	r0, [r1, #0]
    7942:	4770      	bx	lr
    7944:	00008189 	.word	0x00008189
    7948:	20000120 	.word	0x20000120
    794c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7950:	000f      	movs	r7, r1
    7952:	4604      	mov	r4, r0
    7954:	d023      	beq.n	799e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    7956:	f104 0020 	add.w	r0, r4, #32
    795a:	4605      	mov	r5, r0
    795c:	f007 fd0d 	bl	f37a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7960:	b9b0      	cbnz	r0, 7990 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    7962:	78a0      	ldrb	r0, [r4, #2]
    7964:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7968:	b350      	cbz	r0, 79c0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    796a:	4628      	mov	r0, r5
    796c:	f007 fcdc 	bl	f328 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7970:	4606      	mov	r6, r0
    7972:	4628      	mov	r0, r5
    7974:	f007 fd01 	bl	f37a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7978:	1a30      	subs	r0, r6, r0
    797a:	b2c0      	uxtb	r0, r0
    797c:	f007 fd52 	bl	f424 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7980:	4601      	mov	r1, r0
    7982:	4835      	ldr	r0, [pc, #212]	; (7a58 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    7984:	6842      	ldr	r2, [r0, #4]
    7986:	4411      	add	r1, r2
    7988:	6041      	str	r1, [r0, #4]
    798a:	4628      	mov	r0, r5
    798c:	f007 fd13 	bl	f3b6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7990:	4628      	mov	r0, r5
    7992:	f007 fcd5 	bl	f340 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7996:	4601      	mov	r1, r0
    7998:	4620      	mov	r0, r4
    799a:	f007 fc94 	bl	f2c6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
    799e:	4d2f      	ldr	r5, [pc, #188]	; (7a5c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    79a0:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    79a4:	2100      	movs	r1, #0
    79a6:	6868      	ldr	r0, [r5, #4]
    79a8:	8001      	strh	r1, [r0, #0]
    79aa:	f007 fca2 	bl	f2f2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x134>
    79ae:	8860      	ldrh	r0, [r4, #2]
    79b0:	2813      	cmp	r0, #19
    79b2:	d013      	beq.n	79dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    79b4:	dc09      	bgt.n	79ca <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    79b6:	2810      	cmp	r0, #16
    79b8:	d036      	beq.n	7a28 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    79ba:	2812      	cmp	r0, #18
    79bc:	d109      	bne.n	79d2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    79be:	e031      	b.n	7a24 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    79c0:	4620      	mov	r0, r4
    79c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    79c6:	f000 bb39 	b.w	803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>
    79ca:	2815      	cmp	r0, #21
    79cc:	d00f      	beq.n	79ee <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    79ce:	281d      	cmp	r0, #29
    79d0:	d00d      	beq.n	79ee <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    79d2:	f240 616f 	movw	r1, #1647	; 0x66f
    79d6:	202d      	movs	r0, #45	; 0x2d
    79d8:	f7fd fb28 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79dc:	2100      	movs	r1, #0
    79de:	6868      	ldr	r0, [r5, #4]
    79e0:	f007 f8bc 	bl	eb5c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    79e4:	2101      	movs	r1, #1
    79e6:	6868      	ldr	r0, [r5, #4]
    79e8:	f007 fc83 	bl	f2f2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x134>
    79ec:	e020      	b.n	7a30 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    79ee:	2101      	movs	r1, #1
    79f0:	6868      	ldr	r0, [r5, #4]
    79f2:	f007 f8b3 	bl	eb5c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    79f6:	2101      	movs	r1, #1
    79f8:	6868      	ldr	r0, [r5, #4]
    79fa:	f007 fc7a 	bl	f2f2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x134>
    79fe:	b136      	cbz	r6, 7a0e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    7a00:	f104 0157 	add.w	r1, r4, #87	; 0x57
    7a04:	6868      	ldr	r0, [r5, #4]
    7a06:	f007 f8c4 	bl	eb92 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7a0a:	2101      	movs	r1, #1
    7a0c:	e006      	b.n	7a1c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    7a0e:	f104 0150 	add.w	r1, r4, #80	; 0x50
    7a12:	6868      	ldr	r0, [r5, #4]
    7a14:	f007 f8bd 	bl	eb92 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7a18:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    7a1c:	6868      	ldr	r0, [r5, #4]
    7a1e:	f007 f8be 	bl	eb9e <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7a22:	e005      	b.n	7a30 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    7a24:	2106      	movs	r1, #6
    7a26:	e000      	b.n	7a2a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    7a28:	2102      	movs	r1, #2
    7a2a:	6868      	ldr	r0, [r5, #4]
    7a2c:	f007 f896 	bl	eb5c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7a30:	4620      	mov	r0, r4
    7a32:	f000 fcaf 	bl	8394 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x394>
    7a36:	8860      	ldrh	r0, [r4, #2]
    7a38:	281d      	cmp	r0, #29
    7a3a:	d006      	beq.n	7a4a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    7a3c:	2815      	cmp	r0, #21
    7a3e:	d004      	beq.n	7a4a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    7a40:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    7a42:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7a44:	6868      	ldr	r0, [r5, #4]
    7a46:	f007 f879 	bl	eb3c <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    7a4a:	4639      	mov	r1, r7
    7a4c:	4620      	mov	r0, r4
    7a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7a52:	f000 b9f1 	b.w	7e38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ec>
    7a56:	0000      	.short	0x0000
    7a58:	20001270 	.word	0x20001270
    7a5c:	20000114 	.word	0x20000114
    7a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a64:	4d2e      	ldr	r5, [pc, #184]	; (7b20 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    7a66:	4607      	mov	r7, r0
    7a68:	7828      	ldrb	r0, [r5, #0]
    7a6a:	2802      	cmp	r0, #2
    7a6c:	d005      	beq.n	7a7a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    7a6e:	7828      	ldrb	r0, [r5, #0]
    7a70:	2803      	cmp	r0, #3
    7a72:	d002      	beq.n	7a7a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    7a74:	f640 41e5 	movw	r1, #3301	; 0xce5
    7a78:	e028      	b.n	7acc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x190>
    7a7a:	4c2a      	ldr	r4, [pc, #168]	; (7b24 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    7a7c:	6820      	ldr	r0, [r4, #0]
    7a7e:	7b01      	ldrb	r1, [r0, #12]
    7a80:	b109      	cbz	r1, 7a86 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    7a82:	f007 fc2b 	bl	f2dc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11e>
    7a86:	f8d4 c004 	ldr.w	ip, [r4, #4]
    7a8a:	f04f 0800 	mov.w	r8, #0
    7a8e:	f89c 0000 	ldrb.w	r0, [ip]
    7a92:	f000 060f 	and.w	r6, r0, #15
    7a96:	b33f      	cbz	r7, 7ae8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7a98:	6821      	ldr	r1, [r4, #0]
    7a9a:	09c0      	lsrs	r0, r0, #7
    7a9c:	f101 0349 	add.w	r3, r1, #73	; 0x49
    7aa0:	f891 2048 	ldrb.w	r2, [r1, #72]	; 0x48
    7aa4:	f10c 0109 	add.w	r1, ip, #9
    7aa8:	f006 fc59 	bl	e35e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7aac:	b1e0      	cbz	r0, 7ae8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7aae:	4641      	mov	r1, r8
    7ab0:	6860      	ldr	r0, [r4, #4]
    7ab2:	f007 f833 	bl	eb1c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    7ab6:	b1b8      	cbz	r0, 7ae8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7ab8:	782a      	ldrb	r2, [r5, #0]
    7aba:	6820      	ldr	r0, [r4, #0]
    7abc:	4631      	mov	r1, r6
    7abe:	2a02      	cmp	r2, #2
    7ac0:	d007      	beq.n	7ad2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    7ac2:	782a      	ldrb	r2, [r5, #0]
    7ac4:	2a03      	cmp	r2, #3
    7ac6:	d004      	beq.n	7ad2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    7ac8:	f640 41be 	movw	r1, #3262	; 0xcbe
    7acc:	202d      	movs	r0, #45	; 0x2d
    7ace:	f7fd faad 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ad2:	68a2      	ldr	r2, [r4, #8]
    7ad4:	782b      	ldrb	r3, [r5, #0]
    7ad6:	6952      	ldr	r2, [r2, #20]
    7ad8:	f06f 0607 	mvn.w	r6, #7
    7adc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    7ae0:	58d2      	ldr	r2, [r2, r3]
    7ae2:	4790      	blx	r2
    7ae4:	4606      	mov	r6, r0
    7ae6:	e000      	b.n	7aea <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    7ae8:	2601      	movs	r6, #1
    7aea:	7ba8      	ldrb	r0, [r5, #14]
    7aec:	b118      	cbz	r0, 7af6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ba>
    7aee:	f003 ffd3 	bl	ba98 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7af2:	f003 fdf7 	bl	b6e4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7af6:	2e00      	cmp	r6, #0
    7af8:	d00f      	beq.n	7b1a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1de>
    7afa:	6820      	ldr	r0, [r4, #0]
    7afc:	f007 fca8 	bl	f450 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7b00:	b130      	cbz	r0, 7b10 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d4>
    7b02:	f003 ffe9 	bl	bad8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7b06:	68a0      	ldr	r0, [r4, #8]
    7b08:	6880      	ldr	r0, [r0, #8]
    7b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7b0e:	4700      	bx	r0
    7b10:	6820      	ldr	r0, [r4, #0]
    7b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7b16:	f000 ba91 	b.w	803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>
    7b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b1e:	0000      	.short	0x0000
    7b20:	20001270 	.word	0x20001270
    7b24:	20000114 	.word	0x20000114
    7b28:	b510      	push	{r4, lr}
    7b2a:	2903      	cmp	r1, #3
    7b2c:	d002      	beq.n	7b34 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    7b2e:	2905      	cmp	r1, #5
    7b30:	d10a      	bne.n	7b48 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    7b32:	e002      	b.n	7b3a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    7b34:	f000 fb7c 	bl	8230 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x230>
    7b38:	e003      	b.n	7b42 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    7b3a:	4904      	ldr	r1, [pc, #16]	; (7b4c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    7b3c:	6809      	ldr	r1, [r1, #0]
    7b3e:	b109      	cbz	r1, 7b44 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    7b40:	4788      	blx	r1
    7b42:	b108      	cbz	r0, 7b48 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    7b44:	2000      	movs	r0, #0
    7b46:	bd10      	pop	{r4, pc}
    7b48:	2001      	movs	r0, #1
    7b4a:	bd10      	pop	{r4, pc}
    7b4c:	20000120 	.word	0x20000120
    7b50:	4a09      	ldr	r2, [pc, #36]	; (7b78 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    7b52:	0003      	movs	r3, r0
    7b54:	6810      	ldr	r0, [r2, #0]
    7b56:	d001      	beq.n	7b5c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    7b58:	f000 ba70 	b.w	803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>
    7b5c:	2900      	cmp	r1, #0
    7b5e:	d009      	beq.n	7b74 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    7b60:	6891      	ldr	r1, [r2, #8]
    7b62:	4a06      	ldr	r2, [pc, #24]	; (7b7c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    7b64:	6909      	ldr	r1, [r1, #16]
    7b66:	7812      	ldrb	r2, [r2, #0]
    7b68:	f06f 030f 	mvn.w	r3, #15
    7b6c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    7b70:	5889      	ldr	r1, [r1, r2]
    7b72:	4708      	bx	r1
    7b74:	4770      	bx	lr
    7b76:	0000      	.short	0x0000
    7b78:	20000114 	.word	0x20000114
    7b7c:	20001270 	.word	0x20001270
    7b80:	b570      	push	{r4, r5, r6, lr}
    7b82:	4604      	mov	r4, r0
    7b84:	8840      	ldrh	r0, [r0, #2]
    7b86:	2810      	cmp	r0, #16
    7b88:	d019      	beq.n	7bbe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    7b8a:	4d10      	ldr	r5, [pc, #64]	; (7bcc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    7b8c:	7ba8      	ldrb	r0, [r5, #14]
    7b8e:	b120      	cbz	r0, 7b9a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    7b90:	f003 fdc8 	bl	b724 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    7b94:	2040      	movs	r0, #64	; 0x40
    7b96:	f003 ff8d 	bl	bab4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    7b9a:	480d      	ldr	r0, [pc, #52]	; (7bd0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    7b9c:	6840      	ldr	r0, [r0, #4]
    7b9e:	f004 fa37 	bl	c010 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7ba2:	78a0      	ldrb	r0, [r4, #2]
    7ba4:	0740      	lsls	r0, r0, #29
    7ba6:	d404      	bmi.n	7bb2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    7ba8:	2100      	movs	r1, #0
    7baa:	7922      	ldrb	r2, [r4, #4]
    7bac:	4608      	mov	r0, r1
    7bae:	f004 fabb 	bl	c128 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7bb2:	2000      	movs	r0, #0
    7bb4:	f004 f8d0 	bl	bd58 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7bb8:	2002      	movs	r0, #2
    7bba:	7028      	strb	r0, [r5, #0]
    7bbc:	bd70      	pop	{r4, r5, r6, pc}
    7bbe:	4620      	mov	r0, r4
    7bc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7bc4:	2101      	movs	r1, #1
    7bc6:	f7ff bec1 	b.w	794c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7bca:	0000      	.short	0x0000
    7bcc:	20001270 	.word	0x20001270
    7bd0:	20000114 	.word	0x20000114
    7bd4:	b510      	push	{r4, lr}
    7bd6:	4c12      	ldr	r4, [pc, #72]	; (7c20 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    7bd8:	6820      	ldr	r0, [r4, #0]
    7bda:	f000 f825 	bl	7c28 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    7bde:	6820      	ldr	r0, [r4, #0]
    7be0:	f007 fc36 	bl	f450 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7be4:	2800      	cmp	r0, #0
    7be6:	6820      	ldr	r0, [r4, #0]
    7be8:	d00b      	beq.n	7c02 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    7bea:	490e      	ldr	r1, [pc, #56]	; (7c24 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
    7bec:	780a      	ldrb	r2, [r1, #0]
    7bee:	2a02      	cmp	r2, #2
    7bf0:	d00b      	beq.n	7c0a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    7bf2:	780a      	ldrb	r2, [r1, #0]
    7bf4:	2a03      	cmp	r2, #3
    7bf6:	d008      	beq.n	7c0a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    7bf8:	f44f 613f 	mov.w	r1, #3056	; 0xbf0
    7bfc:	202d      	movs	r0, #45	; 0x2d
    7bfe:	f7fd fa15 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7c06:	f000 ba19 	b.w	803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>
    7c0a:	68a2      	ldr	r2, [r4, #8]
    7c0c:	7809      	ldrb	r1, [r1, #0]
    7c0e:	68d2      	ldr	r2, [r2, #12]
    7c10:	f06f 0307 	mvn.w	r3, #7
    7c14:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    7c18:	5851      	ldr	r1, [r2, r1]
    7c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7c1e:	4708      	bx	r1
    7c20:	20000114 	.word	0x20000114
    7c24:	20001270 	.word	0x20001270
    7c28:	b510      	push	{r4, lr}
    7c2a:	7b01      	ldrb	r1, [r0, #12]
    7c2c:	b109      	cbz	r1, 7c32 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
    7c2e:	f007 fb55 	bl	f2dc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11e>
    7c32:	4805      	ldr	r0, [pc, #20]	; (7c48 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30c>)
    7c34:	7b80      	ldrb	r0, [r0, #14]
    7c36:	2800      	cmp	r0, #0
    7c38:	d005      	beq.n	7c46 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30a>
    7c3a:	f003 ff2d 	bl	ba98 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7c42:	f003 bd4f 	b.w	b6e4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7c46:	bd10      	pop	{r4, pc}
    7c48:	20001270 	.word	0x20001270

00007c4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    7c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c50:	4d5e      	ldr	r5, [pc, #376]	; (7dcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    7c52:	4604      	mov	r4, r0
    7c54:	b08a      	sub	sp, #40	; 0x28
    7c56:	7828      	ldrb	r0, [r5, #0]
    7c58:	bbf0      	cbnz	r0, 7cd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    7c5a:	7820      	ldrb	r0, [r4, #0]
    7c5c:	28ff      	cmp	r0, #255	; 0xff
    7c5e:	d03e      	beq.n	7cde <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x92>
    7c60:	2600      	movs	r6, #0
    7c62:	81ae      	strh	r6, [r5, #12]
    7c64:	606e      	str	r6, [r5, #4]
    7c66:	706e      	strb	r6, [r5, #1]
    7c68:	70ae      	strb	r6, [r5, #2]
    7c6a:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
    7c6e:	4b58      	ldr	r3, [pc, #352]	; (7dd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    7c70:	af06      	add	r7, sp, #24
    7c72:	f8df 9160 	ldr.w	r9, [pc, #352]	; 7dd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>
    7c76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    7c78:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    7c7c:	f8d9 0008 	ldr.w	r0, [r9, #8]
    7c80:	6840      	ldr	r0, [r0, #4]
    7c82:	9009      	str	r0, [sp, #36]	; 0x24
    7c84:	a806      	add	r0, sp, #24
    7c86:	f004 f83b 	bl	bd00 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    7c8a:	f004 f919 	bl	bec0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    7c8e:	f004 fba5 	bl	c3dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    7c92:	f003 ff01 	bl	ba98 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7c96:	f003 fd25 	bl	b6e4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7c9a:	484f      	ldr	r0, [pc, #316]	; (7dd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    7c9c:	f004 fa76 	bl	c18c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    7ca0:	484b      	ldr	r0, [pc, #300]	; (7dd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    7ca2:	1f00      	subs	r0, r0, #4
    7ca4:	f004 fa7c 	bl	c1a0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    7ca8:	f104 0020 	add.w	r0, r4, #32
    7cac:	4607      	mov	r7, r0
    7cae:	f007 fb82 	bl	f3b6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7cb2:	4638      	mov	r0, r7
    7cb4:	f007 fb44 	bl	f340 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7cb8:	4601      	mov	r1, r0
    7cba:	4620      	mov	r0, r4
    7cbc:	f007 fb03 	bl	f2c6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
    7cc0:	f994 000e 	ldrsb.w	r0, [r4, #14]
    7cc4:	f004 f982 	bl	bfcc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    7cc8:	7921      	ldrb	r1, [r4, #4]
    7cca:	2000      	movs	r0, #0
    7ccc:	f003 ffa0 	bl	bc10 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    7cd0:	60a8      	str	r0, [r5, #8]
    7cd2:	b140      	cbz	r0, 7ce6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9a>
    7cd4:	7ea0      	ldrb	r0, [r4, #26]
    7cd6:	e000      	b.n	7cda <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    7cd8:	e001      	b.n	7cde <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x92>
    7cda:	b960      	cbnz	r0, 7cf6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xaa>
    7cdc:	e006      	b.n	7cec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa0>
    7cde:	200c      	movs	r0, #12
    7ce0:	b00a      	add	sp, #40	; 0x28
    7ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7ce6:	2001      	movs	r0, #1
    7ce8:	7028      	strb	r0, [r5, #0]
    7cea:	e06c      	b.n	7dc6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    7cec:	7e20      	ldrb	r0, [r4, #24]
    7cee:	b910      	cbnz	r0, 7cf6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xaa>
    7cf0:	78a0      	ldrb	r0, [r4, #2]
    7cf2:	0740      	lsls	r0, r0, #29
    7cf4:	d529      	bpl.n	7d4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    7cf6:	f004 ffd9 	bl	ccac <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7cfa:	4682      	mov	sl, r0
    7cfc:	4651      	mov	r1, sl
    7cfe:	6c60      	ldr	r0, [r4, #68]	; 0x44
    7d00:	f7fa fdc2 	bl	2888 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7d04:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 7ddc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x190>
    7d08:	4607      	mov	r7, r0
    7d0a:	fb90 f1f8 	sdiv	r1, r0, r8
    7d0e:	fb08 7011 	mls	r0, r8, r1, r7
    7d12:	4241      	negs	r1, r0
    7d14:	4650      	mov	r0, sl
    7d16:	f7fa fd85 	bl	2824 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7d1a:	6460      	str	r0, [r4, #68]	; 0x44
    7d1c:	fb97 f0f8 	sdiv	r0, r7, r8
    7d20:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7d22:	4408      	add	r0, r1
    7d24:	6420      	str	r0, [r4, #64]	; 0x40
    7d26:	f7fe fee9 	bl	6afc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    7d2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7d2c:	4288      	cmp	r0, r1
    7d2e:	d80c      	bhi.n	7d4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    7d30:	e9c4 6a10 	strd	r6, sl, [r4, #64]	; 0x40
    7d34:	2101      	movs	r1, #1
    7d36:	4620      	mov	r0, r4
    7d38:	f007 fa89 	bl	f24e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x90>
    7d3c:	78a0      	ldrb	r0, [r4, #2]
    7d3e:	0740      	lsls	r0, r0, #29
    7d40:	d503      	bpl.n	7d4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    7d42:	2101      	movs	r1, #1
    7d44:	4620      	mov	r0, r4
    7d46:	f000 faaf 	bl	82a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a8>
    7d4a:	f104 0130 	add.w	r1, r4, #48	; 0x30
    7d4e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7d50:	f006 fa77 	bl	e242 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    7d54:	f104 0138 	add.w	r1, r4, #56	; 0x38
    7d58:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7d5a:	f006 fa75 	bl	e248 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    7d5e:	f7fe ff33 	bl	6bc8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    7d62:	f8d9 0004 	ldr.w	r0, [r9, #4]
    7d66:	1cc0      	adds	r0, r0, #3
    7d68:	f006 fb73 	bl	e452 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    7d6c:	73a8      	strb	r0, [r5, #14]
    7d6e:	78a0      	ldrb	r0, [r4, #2]
    7d70:	07c0      	lsls	r0, r0, #31
    7d72:	d028      	beq.n	7dc6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    7d74:	a903      	add	r1, sp, #12
    7d76:	2000      	movs	r0, #0
    7d78:	f006 f93c 	bl	dff4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7d7c:	b120      	cbz	r0, 7d88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13c>
    7d7e:	f640 11b9 	movw	r1, #2489	; 0x9b9
    7d82:	202d      	movs	r0, #45	; 0x2d
    7d84:	f7fd f952 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d88:	20ff      	movs	r0, #255	; 0xff
    7d8a:	73e8      	strb	r0, [r5, #15]
    7d8c:	69e6      	ldr	r6, [r4, #28]
    7d8e:	f106 070a 	add.w	r7, r6, #10
    7d92:	e013      	b.n	7dbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
    7d94:	9c05      	ldr	r4, [sp, #20]
    7d96:	42b4      	cmp	r4, r6
    7d98:	d010      	beq.n	7dbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
    7d9a:	7a72      	ldrb	r2, [r6, #9]
    7d9c:	7a60      	ldrb	r0, [r4, #9]
    7d9e:	463b      	mov	r3, r7
    7da0:	f104 010a 	add.w	r1, r4, #10
    7da4:	f006 fadb 	bl	e35e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7da8:	b140      	cbz	r0, 7dbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
    7daa:	78a0      	ldrb	r0, [r4, #2]
    7dac:	73e8      	strb	r0, [r5, #15]
    7dae:	f8d4 0003 	ldr.w	r0, [r4, #3]
    7db2:	6128      	str	r0, [r5, #16]
    7db4:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    7db8:	82a8      	strh	r0, [r5, #20]
    7dba:	e004      	b.n	7dc6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    7dbc:	a803      	add	r0, sp, #12
    7dbe:	f7fd fb6d 	bl	549c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7dc2:	2800      	cmp	r0, #0
    7dc4:	d0e6      	beq.n	7d94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x148>
    7dc6:	2000      	movs	r0, #0
    7dc8:	e78a      	b.n	7ce0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x94>
    7dca:	0000      	.short	0x0000
    7dcc:	20001270 	.word	0x20001270
    7dd0:	000083bc 	.word	0x000083bc
    7dd4:	20000114 	.word	0x20000114
    7dd8:	8e89bed6 	.word	0x8e89bed6
    7ddc:	000f4240 	.word	0x000f4240
    7de0:	b510      	push	{r4, lr}
    7de2:	4604      	mov	r4, r0
    7de4:	f7ff ff32 	bl	7c4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    7de8:	2800      	cmp	r0, #0
    7dea:	d108      	bne.n	7dfe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b2>
    7dec:	4804      	ldr	r0, [pc, #16]	; (7e00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b4>)
    7dee:	7800      	ldrb	r0, [r0, #0]
    7df0:	2801      	cmp	r0, #1
    7df2:	d003      	beq.n	7dfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>
    7df4:	2100      	movs	r1, #0
    7df6:	4620      	mov	r0, r4
    7df8:	f7ff fda8 	bl	794c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7dfc:	2000      	movs	r0, #0
    7dfe:	bd10      	pop	{r4, pc}
    7e00:	20001270 	.word	0x20001270
    7e04:	480a      	ldr	r0, [pc, #40]	; (7e30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
    7e06:	b510      	push	{r4, lr}
    7e08:	490a      	ldr	r1, [pc, #40]	; (7e34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>)
    7e0a:	6804      	ldr	r4, [r0, #0]
    7e0c:	7808      	ldrb	r0, [r1, #0]
    7e0e:	2800      	cmp	r0, #0
    7e10:	d00d      	beq.n	7e2e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e2>
    7e12:	7808      	ldrb	r0, [r1, #0]
    7e14:	2802      	cmp	r0, #2
    7e16:	d002      	beq.n	7e1e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d2>
    7e18:	7808      	ldrb	r0, [r1, #0]
    7e1a:	2803      	cmp	r0, #3
    7e1c:	d102      	bne.n	7e24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d8>
    7e1e:	4620      	mov	r0, r4
    7e20:	f7ff ff02 	bl	7c28 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    7e24:	4620      	mov	r0, r4
    7e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7e2a:	f000 b907 	b.w	803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>
    7e2e:	bd10      	pop	{r4, pc}
    7e30:	20000114 	.word	0x20000114
    7e34:	20001270 	.word	0x20001270
    7e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e3c:	4604      	mov	r4, r0
    7e3e:	4827      	ldr	r0, [pc, #156]	; (7edc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x290>)
    7e40:	460d      	mov	r5, r1
    7e42:	6840      	ldr	r0, [r0, #4]
    7e44:	f004 f8e4 	bl	c010 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7e48:	4e25      	ldr	r6, [pc, #148]	; (7ee0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>)
    7e4a:	2004      	movs	r0, #4
    7e4c:	7030      	strb	r0, [r6, #0]
    7e4e:	b325      	cbz	r5, 7e9a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    7e50:	8860      	ldrh	r0, [r4, #2]
    7e52:	2810      	cmp	r0, #16
    7e54:	d02a      	beq.n	7eac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x260>
    7e56:	f104 0020 	add.w	r0, r4, #32
    7e5a:	4680      	mov	r8, r0
    7e5c:	68b5      	ldr	r5, [r6, #8]
    7e5e:	f007 fa63 	bl	f328 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7e62:	4607      	mov	r7, r0
    7e64:	4640      	mov	r0, r8
    7e66:	f007 fa88 	bl	f37a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7e6a:	1a38      	subs	r0, r7, r0
    7e6c:	1e40      	subs	r0, r0, #1
    7e6e:	b2c0      	uxtb	r0, r0
    7e70:	8861      	ldrh	r1, [r4, #2]
    7e72:	2228      	movs	r2, #40	; 0x28
    7e74:	f000 fade 	bl	8434 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    7e78:	4405      	add	r5, r0
    7e7a:	78a0      	ldrb	r0, [r4, #2]
    7e7c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7e80:	b130      	cbz	r0, 7e90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    7e82:	6870      	ldr	r0, [r6, #4]
    7e84:	4405      	add	r5, r0
    7e86:	f007 fad1 	bl	f42c <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    7e8a:	4428      	add	r0, r5
    7e8c:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
    7e90:	7922      	ldrb	r2, [r4, #4]
    7e92:	4629      	mov	r1, r5
    7e94:	2000      	movs	r0, #0
    7e96:	f004 f8d1 	bl	c03c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    7e9a:	8860      	ldrh	r0, [r4, #2]
    7e9c:	2813      	cmp	r0, #19
    7e9e:	d013      	beq.n	7ec8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    7ea0:	dc09      	bgt.n	7eb6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26a>
    7ea2:	2810      	cmp	r0, #16
    7ea4:	d017      	beq.n	7ed6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28a>
    7ea6:	2812      	cmp	r0, #18
    7ea8:	d109      	bne.n	7ebe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    7eaa:	e00d      	b.n	7ec8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    7eac:	7921      	ldrb	r1, [r4, #4]
    7eae:	2000      	movs	r0, #0
    7eb0:	f003 fe62 	bl	bb78 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    7eb4:	e7f1      	b.n	7e9a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    7eb6:	2815      	cmp	r0, #21
    7eb8:	d006      	beq.n	7ec8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    7eba:	281d      	cmp	r0, #29
    7ebc:	d004      	beq.n	7ec8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    7ebe:	f640 5173 	movw	r1, #3443	; 0xd73
    7ec2:	202d      	movs	r0, #45	; 0x2d
    7ec4:	f7fd f8b2 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ec8:	7922      	ldrb	r2, [r4, #4]
    7eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7ece:	2101      	movs	r1, #1
    7ed0:	2000      	movs	r0, #0
    7ed2:	f004 b929 	b.w	c128 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7eda:	0000      	.short	0x0000
    7edc:	20000114 	.word	0x20000114
    7ee0:	20001270 	.word	0x20001270
    7ee4:	b510      	push	{r4, lr}
    7ee6:	4604      	mov	r4, r0
    7ee8:	7800      	ldrb	r0, [r0, #0]
    7eea:	460b      	mov	r3, r1
    7eec:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    7ef0:	29ff      	cmp	r1, #255	; 0xff
    7ef2:	d010      	beq.n	7f16 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ca>
    7ef4:	f104 0297 	add.w	r2, r4, #151	; 0x97
    7ef8:	1e51      	subs	r1, r2, #1
    7efa:	4618      	mov	r0, r3
    7efc:	f7fe fd7c 	bl	69f8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7f00:	b130      	cbz	r0, 7f10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2c4>
    7f02:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    7f06:	f040 0002 	orr.w	r0, r0, #2
    7f0a:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    7f0e:	e011      	b.n	7f34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e8>
    7f10:	f640 71af 	movw	r1, #4015	; 0xfaf
    7f14:	e020      	b.n	7f58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30c>
    7f16:	4812      	ldr	r0, [pc, #72]	; (7f60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x314>)
    7f18:	6840      	ldr	r0, [r0, #4]
    7f1a:	7801      	ldrb	r1, [r0, #0]
    7f1c:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7f20:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
    7f24:	f8d0 1003 	ldr.w	r1, [r0, #3]
    7f28:	f8c4 1097 	str.w	r1, [r4, #151]	; 0x97
    7f2c:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    7f30:	f8a4 009b 	strh.w	r0, [r4, #155]	; 0x9b
    7f34:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    7f38:	287f      	cmp	r0, #127	; 0x7f
    7f3a:	d00b      	beq.n	7f54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x308>
    7f3c:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
    7f40:	207f      	movs	r0, #127	; 0x7f
    7f42:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    7f46:	347e      	adds	r4, #126	; 0x7e
    7f48:	20ff      	movs	r0, #255	; 0xff
    7f4a:	75a0      	strb	r0, [r4, #22]
    7f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7f50:	f7ff b9a2 	b.w	7298 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7f54:	f640 6125 	movw	r1, #3621	; 0xe25
    7f58:	202d      	movs	r0, #45	; 0x2d
    7f5a:	f7fd f867 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f5e:	0000      	.short	0x0000
    7f60:	20000114 	.word	0x20000114
    7f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7f68:	4690      	mov	r8, r2
    7f6a:	460e      	mov	r6, r1
    7f6c:	4604      	mov	r4, r0
    7f6e:	2903      	cmp	r1, #3
    7f70:	d004      	beq.n	7f7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    7f72:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    7f76:	b108      	cbz	r0, 7f7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    7f78:	2001      	movs	r0, #1
    7f7a:	e000      	b.n	7f7e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x332>
    7f7c:	2000      	movs	r0, #0
    7f7e:	4681      	mov	r9, r0
    7f80:	f003 fda4 	bl	bacc <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    7f84:	4605      	mov	r5, r0
    7f86:	2e03      	cmp	r6, #3
    7f88:	d003      	beq.n	7f92 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x346>
    7f8a:	2701      	movs	r7, #1
    7f8c:	2e05      	cmp	r6, #5
    7f8e:	d005      	beq.n	7f9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x350>
    7f90:	e008      	b.n	7fa4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x358>
    7f92:	78a0      	ldrb	r0, [r4, #2]
    7f94:	2702      	movs	r7, #2
    7f96:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7f9a:	e001      	b.n	7fa0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x354>
    7f9c:	78a0      	ldrb	r0, [r4, #2]
    7f9e:	07c0      	lsls	r0, r0, #31
    7fa0:	2800      	cmp	r0, #0
    7fa2:	d042      	beq.n	802a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a>
    7fa4:	f1b9 0f00 	cmp.w	r9, #0
    7fa8:	d13e      	bne.n	8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    7faa:	4822      	ldr	r0, [pc, #136]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    7fac:	7b80      	ldrb	r0, [r0, #14]
    7fae:	b140      	cbz	r0, 7fc2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x376>
    7fb0:	f006 fa52 	bl	e458 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    7fb4:	f888 0000 	strb.w	r0, [r8]
    7fb8:	28ff      	cmp	r0, #255	; 0xff
    7fba:	d002      	beq.n	7fc2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x376>
    7fbc:	f7fe fd36 	bl	6a2c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    7fc0:	4305      	orrs	r5, r0
    7fc2:	4e1d      	ldr	r6, [pc, #116]	; (8038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>)
    7fc4:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    7fc8:	f104 0350 	add.w	r3, r4, #80	; 0x50
    7fcc:	6871      	ldr	r1, [r6, #4]
    7fce:	f811 0b03 	ldrb.w	r0, [r1], #3
    7fd2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7fd6:	f006 f9c2 	bl	e35e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7fda:	f898 1000 	ldrb.w	r1, [r8]
    7fde:	29ff      	cmp	r1, #255	; 0xff
    7fe0:	d004      	beq.n	7fec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    7fe2:	b990      	cbnz	r0, 800a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa>
    7fe4:	7e60      	ldrb	r0, [r4, #25]
    7fe6:	4288      	cmp	r0, r1
    7fe8:	d00f      	beq.n	800a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa>
    7fea:	e008      	b.n	7ffe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    7fec:	b138      	cbz	r0, 7ffe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    7fee:	6871      	ldr	r1, [r6, #4]
    7ff0:	f811 0b03 	ldrb.w	r0, [r1], #3
    7ff4:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7ff8:	f007 f8e6 	bl	f1c8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    7ffc:	b128      	cbz	r0, 800a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa>
    7ffe:	2000      	movs	r0, #0
    8000:	78a1      	ldrb	r1, [r4, #2]
    8002:	0749      	lsls	r1, r1, #29
    8004:	d503      	bpl.n	800e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe>
    8006:	b990      	cbnz	r0, 802e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e>
    8008:	e00e      	b.n	8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    800a:	2001      	movs	r0, #1
    800c:	e7f8      	b.n	8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>
    800e:	b975      	cbnz	r5, 802e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e>
    8010:	7be0      	ldrb	r0, [r4, #15]
    8012:	b108      	cbz	r0, 8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>
    8014:	42b8      	cmp	r0, r7
    8016:	d107      	bne.n	8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    8018:	6871      	ldr	r1, [r6, #4]
    801a:	f811 0b03 	ldrb.w	r0, [r1], #3
    801e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8022:	f007 f8d1 	bl	f1c8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    8026:	b110      	cbz	r0, 802e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e>
    8028:	2000      	movs	r0, #0
    802a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    802e:	2001      	movs	r0, #1
    8030:	e7fb      	b.n	802a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a>
    8032:	0000      	.short	0x0000
    8034:	20001270 	.word	0x20001270
    8038:	20000114 	.word	0x20000114
    803c:	b570      	push	{r4, r5, r6, lr}
    803e:	4604      	mov	r4, r0
    8040:	6a80      	ldr	r0, [r0, #40]	; 0x28
    8042:	4d13      	ldr	r5, [pc, #76]	; (8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>)
    8044:	1c40      	adds	r0, r0, #1
    8046:	62a0      	str	r0, [r4, #40]	; 0x28
    8048:	7ba8      	ldrb	r0, [r5, #14]
    804a:	2600      	movs	r6, #0
    804c:	b120      	cbz	r0, 8058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    804e:	f003 fd23 	bl	ba98 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8052:	f003 fb47 	bl	b6e4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    8056:	73ae      	strb	r6, [r5, #14]
    8058:	702e      	strb	r6, [r5, #0]
    805a:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    805e:	b108      	cbz	r0, 8064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>
    8060:	2101      	movs	r1, #1
    8062:	e00f      	b.n	8084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>
    8064:	7b60      	ldrb	r0, [r4, #13]
    8066:	b160      	cbz	r0, 8082 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x82>
    8068:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    806a:	4288      	cmp	r0, r1
    806c:	d809      	bhi.n	8082 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x82>
    806e:	2101      	movs	r1, #1
    8070:	4620      	mov	r0, r4
    8072:	f007 fa02 	bl	f47a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    8076:	78a0      	ldrb	r0, [r4, #2]
    8078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    807c:	07c0      	lsls	r0, r0, #31
    807e:	f7ff b90b 	b.w	7298 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8082:	2100      	movs	r1, #0
    8084:	4620      	mov	r0, r4
    8086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    808a:	f007 b9f6 	b.w	f47a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    808e:	0000      	.short	0x0000
    8090:	20001270 	.word	0x20001270
    8094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8098:	4604      	mov	r4, r0
    809a:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    809e:	4617      	mov	r7, r2
    80a0:	460d      	mov	r5, r1
    80a2:	f88d 0000 	strb.w	r0, [sp]
    80a6:	9800      	ldr	r0, [sp, #0]
    80a8:	9000      	str	r0, [sp, #0]
    80aa:	f89d 0000 	ldrb.w	r0, [sp]
    80ae:	b110      	cbz	r0, 80b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb6>
    80b0:	f640 4124 	movw	r1, #3108	; 0xc24
    80b4:	e054      	b.n	8160 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x160>
    80b6:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    80ba:	2600      	movs	r6, #0
    80bc:	8828      	ldrh	r0, [r5, #0]
    80be:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    80c2:	2b00      	cmp	r3, #0
    80c4:	d15c      	bne.n	8180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x180>
    80c6:	6928      	ldr	r0, [r5, #16]
    80c8:	f006 fa24 	bl	e514 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    80cc:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    80d0:	8b28      	ldrh	r0, [r5, #24]
    80d2:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
    80d6:	8b68      	ldrh	r0, [r5, #26]
    80d8:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
    80dc:	f895 0185 	ldrb.w	r0, [r5, #389]	; 0x185
    80e0:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    80e4:	7e21      	ldrb	r1, [r4, #24]
    80e6:	f104 0849 	add.w	r8, r4, #73	; 0x49
    80ea:	b129      	cbz	r1, 80f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf8>
    80ec:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    80f0:	4641      	mov	r1, r8
    80f2:	f006 ff76 	bl	efe2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    80f6:	b940      	cbnz	r0, 810a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10a>
    80f8:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    80fc:	b170      	cbz	r0, 811c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11c>
    80fe:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    8102:	4641      	mov	r1, r8
    8104:	f006 ff64 	bl	efd0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    8108:	b140      	cbz	r0, 811c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11c>
    810a:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    810e:	f8c4 0072 	str.w	r0, [r4, #114]	; 0x72
    8112:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    8116:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    811a:	e003      	b.n	8124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>
    811c:	f8c4 6072 	str.w	r6, [r4, #114]	; 0x72
    8120:	f8a4 6076 	strh.w	r6, [r4, #118]	; 0x76
    8124:	4817      	ldr	r0, [pc, #92]	; (8184 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x184>)
    8126:	2fff      	cmp	r7, #255	; 0xff
    8128:	6840      	ldr	r0, [r0, #4]
    812a:	7801      	ldrb	r1, [r0, #0]
    812c:	f3c1 1180 	ubfx	r1, r1, #6, #1
    8130:	f884 106b 	strb.w	r1, [r4, #107]	; 0x6b
    8134:	f850 1f03 	ldr.w	r1, [r0, #3]!
    8138:	d015      	beq.n	8166 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x166>
    813a:	67a1      	str	r1, [r4, #120]	; 0x78
    813c:	8880      	ldrh	r0, [r0, #4]
    813e:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    8142:	f104 026c 	add.w	r2, r4, #108	; 0x6c
    8146:	1e51      	subs	r1, r2, #1
    8148:	4638      	mov	r0, r7
    814a:	f7fe fc55 	bl	69f8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    814e:	b128      	cbz	r0, 815c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15c>
    8150:	f814 0f6b 	ldrb.w	r0, [r4, #107]!
    8154:	f040 0002 	orr.w	r0, r0, #2
    8158:	7020      	strb	r0, [r4, #0]
    815a:	e00a      	b.n	8172 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x172>
    815c:	f640 4145 	movw	r1, #3141	; 0xc45
    8160:	202d      	movs	r0, #45	; 0x2d
    8162:	f7fc ff63 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8166:	f844 1f6c 	str.w	r1, [r4, #108]!
    816a:	8880      	ldrh	r0, [r0, #4]
    816c:	80a0      	strh	r0, [r4, #4]
    816e:	60e6      	str	r6, [r4, #12]
    8170:	8226      	strh	r6, [r4, #16]
    8172:	8828      	ldrh	r0, [r5, #0]
    8174:	f7fd fb74 	bl	5860 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8178:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    817c:	f005 be17 	b.w	ddae <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    8180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8184:	20000114 	.word	0x20000114
    8188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    818c:	27ff      	movs	r7, #255	; 0xff
    818e:	4604      	mov	r4, r0
    8190:	2601      	movs	r6, #1
    8192:	f88d 7000 	strb.w	r7, [sp]
    8196:	466a      	mov	r2, sp
    8198:	2105      	movs	r1, #5
    819a:	f7ff fee3 	bl	7f64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    819e:	b170      	cbz	r0, 81be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1be>
    81a0:	4d22      	ldr	r5, [pc, #136]	; (822c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22c>)
    81a2:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8228 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x228>
    81a6:	6869      	ldr	r1, [r5, #4]
    81a8:	f898 200f 	ldrb.w	r2, [r8, #15]
    81ac:	f108 0310 	add.w	r3, r8, #16
    81b0:	f811 0b03 	ldrb.w	r0, [r1], #3
    81b4:	f3c0 1080 	ubfx	r0, r0, #6, #1
    81b8:	f006 f8d1 	bl	e35e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    81bc:	b118      	cbz	r0, 81c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c6>
    81be:	2600      	movs	r6, #0
    81c0:	4630      	mov	r0, r6
    81c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    81c6:	686a      	ldr	r2, [r5, #4]
    81c8:	69e0      	ldr	r0, [r4, #28]
    81ca:	7812      	ldrb	r2, [r2, #0]
    81cc:	f810 1f8d 	ldrb.w	r1, [r0, #141]!
    81d0:	f3c2 1240 	ubfx	r2, r2, #5, #1
    81d4:	4011      	ands	r1, r2
    81d6:	7001      	strb	r1, [r0, #0]
    81d8:	2201      	movs	r2, #1
    81da:	4620      	mov	r0, r4
    81dc:	69e1      	ldr	r1, [r4, #28]
    81de:	f000 f891 	bl	8304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>
    81e2:	2300      	movs	r3, #0
    81e4:	f89d 2000 	ldrb.w	r2, [sp]
    81e8:	4620      	mov	r0, r4
    81ea:	69e1      	ldr	r1, [r4, #28]
    81ec:	f7ff ff52 	bl	8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>
    81f0:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    81f4:	f7ff f850 	bl	7298 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    81f8:	2100      	movs	r1, #0
    81fa:	f888 1000 	strb.w	r1, [r8]
    81fe:	460a      	mov	r2, r1
    8200:	4621      	mov	r1, r4
    8202:	69e0      	ldr	r0, [r4, #28]
    8204:	f000 fa58 	bl	86b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    8208:	6868      	ldr	r0, [r5, #4]
    820a:	69e1      	ldr	r1, [r4, #28]
    820c:	f8d0 2003 	ldr.w	r2, [r0, #3]
    8210:	f841 2f03 	str.w	r2, [r1, #3]!
    8214:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    8218:	808a      	strh	r2, [r1, #4]
    821a:	7800      	ldrb	r0, [r0, #0]
    821c:	69e1      	ldr	r1, [r4, #28]
    821e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8222:	7088      	strb	r0, [r1, #2]
    8224:	e7cc      	b.n	81c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c0>
    8226:	0000      	.short	0x0000
    8228:	20001270 	.word	0x20001270
    822c:	20000114 	.word	0x20000114
    8230:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    8234:	4604      	mov	r4, r0
    8236:	20ff      	movs	r0, #255	; 0xff
    8238:	f88d 0000 	strb.w	r0, [sp]
    823c:	2501      	movs	r5, #1
    823e:	466a      	mov	r2, sp
    8240:	2103      	movs	r1, #3
    8242:	4620      	mov	r0, r4
    8244:	f7ff fe8e 	bl	7f64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    8248:	b328      	cbz	r0, 8296 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x296>
    824a:	7b20      	ldrb	r0, [r4, #12]
    824c:	2700      	movs	r7, #0
    824e:	b168      	cbz	r0, 826c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26c>
    8250:	f894 0094 	ldrb.w	r0, [r4, #148]	; 0x94
    8254:	f88d 0004 	strb.w	r0, [sp, #4]
    8258:	9801      	ldr	r0, [sp, #4]
    825a:	9001      	str	r0, [sp, #4]
    825c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    8260:	b920      	cbnz	r0, 826c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26c>
    8262:	f89d 1000 	ldrb.w	r1, [sp]
    8266:	4620      	mov	r0, r4
    8268:	f7ff fe3c 	bl	7ee4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>
    826c:	4e0c      	ldr	r6, [pc, #48]	; (82a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a0>)
    826e:	2104      	movs	r1, #4
    8270:	6870      	ldr	r0, [r6, #4]
    8272:	8007      	strh	r7, [r0, #0]
    8274:	f006 fc72 	bl	eb5c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    8278:	4620      	mov	r0, r4
    827a:	f000 f88b 	bl	8394 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x394>
    827e:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    8280:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    8282:	6870      	ldr	r0, [r6, #4]
    8284:	f006 fca1 	bl	ebca <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    8288:	4906      	ldr	r1, [pc, #24]	; (82a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a4>)
    828a:	2005      	movs	r0, #5
    828c:	7008      	strb	r0, [r1, #0]
    828e:	6870      	ldr	r0, [r6, #4]
    8290:	f003 febe 	bl	c010 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    8294:	e000      	b.n	8298 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x298>
    8296:	2500      	movs	r5, #0
    8298:	4628      	mov	r0, r5
    829a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    829e:	0000      	.short	0x0000
    82a0:	20000114 	.word	0x20000114
    82a4:	20001270 	.word	0x20001270
    82a8:	b570      	push	{r4, r5, r6, lr}
    82aa:	4604      	mov	r4, r0
    82ac:	460e      	mov	r6, r1
    82ae:	7e40      	ldrb	r0, [r0, #25]
    82b0:	f7fe fb70 	bl	6994 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    82b4:	0005      	movs	r5, r0
    82b6:	d019      	beq.n	82ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    82b8:	2110      	movs	r1, #16
    82ba:	f006 fab7 	bl	e82c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    82be:	2800      	cmp	r0, #0
    82c0:	d114      	bne.n	82ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    82c2:	2001      	movs	r0, #1
    82c4:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    82c8:	f104 0157 	add.w	r1, r4, #87	; 0x57
    82cc:	4632      	mov	r2, r6
    82ce:	460c      	mov	r4, r1
    82d0:	4628      	mov	r0, r5
    82d2:	f006 f863 	bl	e39c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    82d6:	4621      	mov	r1, r4
    82d8:	4c05      	ldr	r4, [pc, #20]	; (82f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f0>)
    82da:	6860      	ldr	r0, [r4, #4]
    82dc:	f006 fc59 	bl	eb92 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    82e0:	6860      	ldr	r0, [r4, #4]
    82e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82e6:	2101      	movs	r1, #1
    82e8:	f006 bc59 	b.w	eb9e <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    82ec:	bd70      	pop	{r4, r5, r6, pc}
    82ee:	0000      	.short	0x0000
    82f0:	20000114 	.word	0x20000114
    82f4:	4802      	ldr	r0, [pc, #8]	; (8300 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x300>)
    82f6:	2101      	movs	r1, #1
    82f8:	6800      	ldr	r0, [r0, #0]
    82fa:	f7ff bb27 	b.w	794c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    82fe:	0000      	.short	0x0000
    8300:	20000114 	.word	0x20000114
    8304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8308:	4e21      	ldr	r6, [pc, #132]	; (8390 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x390>)
    830a:	4680      	mov	r8, r0
    830c:	460c      	mov	r4, r1
    830e:	6870      	ldr	r0, [r6, #4]
    8310:	4615      	mov	r5, r2
    8312:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    8316:	6161      	str	r1, [r4, #20]
    8318:	8881      	ldrh	r1, [r0, #4]
    831a:	83a1      	strh	r1, [r4, #28]
    831c:	7981      	ldrb	r1, [r0, #6]
    831e:	77a1      	strb	r1, [r4, #30]
    8320:	8940      	ldrh	r0, [r0, #10]
    8322:	f006 f8f3 	bl	e50c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    8326:	4607      	mov	r7, r0
    8328:	6120      	str	r0, [r4, #16]
    832a:	6870      	ldr	r0, [r6, #4]
    832c:	4639      	mov	r1, r7
    832e:	7d80      	ldrb	r0, [r0, #22]
    8330:	f006 fa77 	bl	e822 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8334:	8420      	strh	r0, [r4, #32]
    8336:	6870      	ldr	r0, [r6, #4]
    8338:	4639      	mov	r1, r7
    833a:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    833e:	f006 fa6c 	bl	e81a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    8342:	6260      	str	r0, [r4, #36]	; 0x24
    8344:	6870      	ldr	r0, [r6, #4]
    8346:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    834a:	8321      	strh	r1, [r4, #24]
    834c:	8841      	ldrh	r1, [r0, #2]
    834e:	8361      	strh	r1, [r4, #26]
    8350:	6841      	ldr	r1, [r0, #4]
    8352:	f8c4 108e 	str.w	r1, [r4, #142]	; 0x8e
    8356:	7a01      	ldrb	r1, [r0, #8]
    8358:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
    835c:	7a41      	ldrb	r1, [r0, #9]
    835e:	f001 011f 	and.w	r1, r1, #31
    8362:	f884 1099 	strb.w	r1, [r4, #153]	; 0x99
    8366:	7a40      	ldrb	r0, [r0, #9]
    8368:	0940      	lsrs	r0, r0, #5
    836a:	f884 0185 	strb.w	r0, [r4, #389]	; 0x185
    836e:	f104 0066 	add.w	r0, r4, #102	; 0x66
    8372:	7205      	strb	r5, [r0, #8]
    8374:	7245      	strb	r5, [r0, #9]
    8376:	21ff      	movs	r1, #255	; 0xff
    8378:	7281      	strb	r1, [r0, #10]
    837a:	2100      	movs	r1, #0
    837c:	3836      	subs	r0, #54	; 0x36
    837e:	f006 fd9a 	bl	eeb6 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    8382:	f898 000e 	ldrb.w	r0, [r8, #14]
    8386:	f884 0072 	strb.w	r0, [r4, #114]	; 0x72
    838a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    838e:	0000      	.short	0x0000
    8390:	20000114 	.word	0x20000114
    8394:	b570      	push	{r4, r5, r6, lr}
    8396:	4d07      	ldr	r5, [pc, #28]	; (83b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3b4>)
    8398:	4604      	mov	r4, r0
    839a:	f100 0149 	add.w	r1, r0, #73	; 0x49
    839e:	6868      	ldr	r0, [r5, #4]
    83a0:	f006 fc04 	bl	ebac <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    83a4:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    83a8:	6868      	ldr	r0, [r5, #4]
    83aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    83ae:	f006 bc03 	b.w	ebb8 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    83b2:	0000      	.short	0x0000
    83b4:	20000114 	.word	0x20000114
    83b8:	00555555 	.word	0x00555555
    83bc:	00007bd5 	.word	0x00007bd5
    83c0:	00007a61 	.word	0x00007a61
    83c4:	00007b51 	.word	0x00007b51
    83c8:	00000000 	.word	0x00000000
    83cc:	00007b29 	.word	0x00007b29
    83d0:	00007b81 	.word	0x00007b81
    83d4:	0000f1ef 	.word	0x0000f1ef
    83d8:	0000f1f5 	.word	0x0000f1f5
    83dc:	00007de1 	.word	0x00007de1
    83e0:	00007e05 	.word	0x00007e05
    83e4:	000082f5 	.word	0x000082f5
    83e8:	000083d8 	.word	0x000083d8
    83ec:	000083d0 	.word	0x000083d0
    83f0:	000083cc 	.word	0x000083cc

000083f4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    83f4:	b510      	push	{r4, lr}
    83f6:	1e42      	subs	r2, r0, #1
    83f8:	2a02      	cmp	r2, #2
    83fa:	d901      	bls.n	8400 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    83fc:	21ca      	movs	r1, #202	; 0xca
    83fe:	e009      	b.n	8414 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    8400:	1e40      	subs	r0, r0, #1
    8402:	2910      	cmp	r1, #16
    8404:	d009      	beq.n	841a <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    8406:	2912      	cmp	r1, #18
    8408:	d00c      	beq.n	8424 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    840a:	2913      	cmp	r1, #19
    840c:	d00a      	beq.n	8424 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    840e:	2915      	cmp	r1, #21
    8410:	d005      	beq.n	841e <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    8412:	21d8      	movs	r1, #216	; 0xd8
    8414:	202f      	movs	r0, #47	; 0x2f
    8416:	f7fc fe09 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    841a:	4905      	ldr	r1, [pc, #20]	; (8430 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    841c:	e004      	b.n	8428 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    841e:	4904      	ldr	r1, [pc, #16]	; (8430 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    8420:	1d89      	adds	r1, r1, #6
    8422:	e001      	b.n	8428 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    8424:	4902      	ldr	r1, [pc, #8]	; (8430 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    8426:	1f89      	subs	r1, r1, #6
    8428:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    842c:	bd10      	pop	{r4, pc}
    842e:	0000      	.short	0x0000
    8430:	0000f444 	.word	0x0000f444

00008434 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    8434:	1e42      	subs	r2, r0, #1
    8436:	b510      	push	{r4, lr}
    8438:	b2d2      	uxtb	r2, r2
    843a:	2a01      	cmp	r2, #1
    843c:	d903      	bls.n	8446 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    843e:	291d      	cmp	r1, #29
    8440:	d001      	beq.n	8446 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    8442:	21ee      	movs	r1, #238	; 0xee
    8444:	e00d      	b.n	8462 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    8446:	2913      	cmp	r1, #19
    8448:	d013      	beq.n	8472 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    844a:	dc04      	bgt.n	8456 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    844c:	2910      	cmp	r1, #16
    844e:	d00b      	beq.n	8468 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    8450:	2912      	cmp	r1, #18
    8452:	d104      	bne.n	845e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    8454:	e00d      	b.n	8472 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    8456:	2915      	cmp	r1, #21
    8458:	d008      	beq.n	846c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    845a:	291d      	cmp	r1, #29
    845c:	d00e      	beq.n	847c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    845e:	f44f 7181 	mov.w	r1, #258	; 0x102
    8462:	202f      	movs	r0, #47	; 0x2f
    8464:	f7fc fde2 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8468:	4807      	ldr	r0, [pc, #28]	; (8488 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    846a:	e004      	b.n	8476 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    846c:	4806      	ldr	r0, [pc, #24]	; (8488 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    846e:	3008      	adds	r0, #8
    8470:	e001      	b.n	8476 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    8472:	4805      	ldr	r0, [pc, #20]	; (8488 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    8474:	1d00      	adds	r0, r0, #4
    8476:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    847a:	bd10      	pop	{r4, pc}
    847c:	f240 315a 	movw	r1, #858	; 0x35a
    8480:	fb10 f001 	smulbb	r0, r0, r1
    8484:	bd10      	pop	{r4, pc}
    8486:	0000      	.short	0x0000
    8488:	0000f432 	.word	0x0000f432

0000848c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    848c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8490:	4604      	mov	r4, r0
    8492:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    8496:	4615      	mov	r5, r2
    8498:	460f      	mov	r7, r1
    849a:	2800      	cmp	r0, #0
    849c:	d157      	bne.n	854e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc2>
    849e:	4621      	mov	r1, r4
    84a0:	4841      	ldr	r0, [pc, #260]	; (85a8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>)
    84a2:	f7fb f8bf 	bl	3624 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    84a6:	4606      	mov	r6, r0
    84a8:	2820      	cmp	r0, #32
    84aa:	d050      	beq.n	854e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc2>
    84ac:	2234      	movs	r2, #52	; 0x34
    84ae:	2100      	movs	r1, #0
    84b0:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    84b4:	f004 fde9 	bl	d08a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    84b8:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
    84bc:	2601      	movs	r6, #1
    84be:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
    84c2:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
    84c6:	b13f      	cbz	r7, 84d8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4c>
    84c8:	2000      	movs	r0, #0
    84ca:	f000 fbfb 	bl	8cc4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    84ce:	f000 0007 	and.w	r0, r0, #7
    84d2:	1c40      	adds	r0, r0, #1
    84d4:	f887 0134 	strb.w	r0, [r7, #308]	; 0x134
    84d8:	4620      	mov	r0, r4
    84da:	f007 f996 	bl	f80a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2e2>
    84de:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    84e2:	2002      	movs	r0, #2
    84e4:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    84e8:	f884 60c3 	strb.w	r6, [r4, #195]	; 0xc3
    84ec:	2700      	movs	r7, #0
    84ee:	f804 7fb8 	strb.w	r7, [r4, #184]!
    84f2:	f7fa fafb 	bl	2aec <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    84f6:	8921      	ldrh	r1, [r4, #8]
    84f8:	3cb8      	subs	r4, #184	; 0xb8
    84fa:	4288      	cmp	r0, r1
    84fc:	d800      	bhi.n	8500 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x74>
    84fe:	4608      	mov	r0, r1
    8500:	f200 60bf 	addw	r0, r0, #1727	; 0x6bf
    8504:	fa1f f880 	uxth.w	r8, r0
    8508:	4620      	mov	r0, r4
    850a:	f006 fe12 	bl	f132 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    850e:	b308      	cbz	r0, 8554 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc8>
    8510:	f008 fc0c 	bl	10d2c <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    8514:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    8518:	b281      	uxth	r1, r0
    851a:	4628      	mov	r0, r5
    851c:	f004 fbfa 	bl	cd14 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8520:	4428      	add	r0, r5
    8522:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    8526:	34a4      	adds	r4, #164	; 0xa4
    8528:	f004 fbc0 	bl	ccac <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    852c:	4641      	mov	r1, r8
    852e:	f7fa f979 	bl	2824 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8532:	6220      	str	r0, [r4, #32]
    8534:	f804 7c03 	strb.w	r7, [r4, #-3]
    8538:	7126      	strb	r6, [r4, #4]
    853a:	2001      	movs	r0, #1
    853c:	f006 ff72 	bl	f424 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    8540:	f200 100d 	addw	r0, r0, #269	; 0x10d
    8544:	1a28      	subs	r0, r5, r0
    8546:	62a7      	str	r7, [r4, #40]	; 0x28
    8548:	60a0      	str	r0, [r4, #8]
    854a:	3ca4      	subs	r4, #164	; 0xa4
    854c:	e017      	b.n	857e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xf2>
    854e:	200c      	movs	r0, #12
    8550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8554:	4620      	mov	r0, r4
    8556:	f007 f8ab 	bl	f6b0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x188>
    855a:	f844 0fbc 	str.w	r0, [r4, #188]!
    855e:	f804 6c1b 	strb.w	r6, [r4, #-27]
    8562:	f004 fba3 	bl	ccac <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8566:	4606      	mov	r6, r0
    8568:	2000      	movs	r0, #0
    856a:	f007 f9fd 	bl	f968 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x440>
    856e:	eb00 0108 	add.w	r1, r0, r8
    8572:	4630      	mov	r0, r6
    8574:	f7fa f956 	bl	2824 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8578:	6125      	str	r5, [r4, #16]
    857a:	60a0      	str	r0, [r4, #8]
    857c:	3cbc      	subs	r4, #188	; 0xbc
    857e:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    8582:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    8586:	f007 f93e 	bl	f806 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2de>
    858a:	b138      	cbz	r0, 859c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x110>
    858c:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
    8590:	2100      	movs	r1, #0
    8592:	4620      	mov	r0, r4
    8594:	f006 fdf9 	bl	f18a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8598:	2000      	movs	r0, #0
    859a:	e7d9      	b.n	8550 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc4>
    859c:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    85a0:	2030      	movs	r0, #48	; 0x30
    85a2:	f7fc fd43 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85a6:	0000      	.short	0x0000
    85a8:	0000f97d 	.word	0x0000f97d

000085ac <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    85ac:	4808      	ldr	r0, [pc, #32]	; (85d0 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
    85ae:	b510      	push	{r4, lr}
    85b0:	2100      	movs	r1, #0
    85b2:	7001      	strb	r1, [r0, #0]
    85b4:	2201      	movs	r2, #1
    85b6:	7082      	strb	r2, [r0, #2]
    85b8:	7041      	strb	r1, [r0, #1]
    85ba:	3018      	adds	r0, #24
    85bc:	f006 fcfb 	bl	efb6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    85c0:	4803      	ldr	r0, [pc, #12]	; (85d0 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
    85c2:	3020      	adds	r0, #32
    85c4:	f006 fcf7 	bl	efb6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    85c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    85cc:	f006 bf95 	b.w	f4fa <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    85d0:	20000124 	.word	0x20000124

000085d4 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    85d4:	4901      	ldr	r1, [pc, #4]	; (85dc <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    85d6:	7008      	strb	r0, [r1, #0]
    85d8:	4770      	bx	lr
    85da:	0000      	.short	0x0000
    85dc:	20000124 	.word	0x20000124

000085e0 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    85e0:	4905      	ldr	r1, [pc, #20]	; (85f8 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x18>)
    85e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    85e6:	fbb1 f1f2 	udiv	r1, r1, r2
    85ea:	b510      	push	{r4, lr}
    85ec:	f201 2191 	addw	r1, r1, #657	; 0x291
    85f0:	f006 fc7a 	bl	eee8 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    85f4:	b280      	uxth	r0, r0
    85f6:	bd10      	pop	{r4, pc}
    85f8:	0001527d 	.word	0x0001527d

000085fc <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    85fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8600:	4c10      	ldr	r4, [pc, #64]	; (8644 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    8602:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    8606:	f003 fc0b 	bl	be20 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    860a:	4606      	mov	r6, r0
    860c:	7820      	ldrb	r0, [r4, #0]
    860e:	b128      	cbz	r0, 861c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    8610:	4632      	mov	r2, r6
    8612:	4639      	mov	r1, r7
    8614:	4628      	mov	r0, r5
    8616:	f005 ff83 	bl	e520 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    861a:	4605      	mov	r5, r0
    861c:	6860      	ldr	r0, [r4, #4]
    861e:	4285      	cmp	r5, r0
    8620:	d005      	beq.n	862e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    8622:	68e1      	ldr	r1, [r4, #12]
    8624:	1a28      	subs	r0, r5, r0
    8626:	4408      	add	r0, r1
    8628:	60e0      	str	r0, [r4, #12]
    862a:	f7fb f903 	bl	3834 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    862e:	6065      	str	r5, [r4, #4]
    8630:	42ae      	cmp	r6, r5
    8632:	d801      	bhi.n	8638 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    8634:	7860      	ldrb	r0, [r4, #1]
    8636:	b110      	cbz	r0, 863e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    8638:	2000      	movs	r0, #0
    863a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    863e:	2001      	movs	r0, #1
    8640:	e7fb      	b.n	863a <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    8642:	0000      	.short	0x0000
    8644:	20000124 	.word	0x20000124

00008648 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    8648:	b510      	push	{r4, lr}
    864a:	4604      	mov	r4, r0
    864c:	2906      	cmp	r1, #6
    864e:	d22c      	bcs.n	86aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x62>
    8650:	e8df f001 	tbb	[pc, r1]
    8654:	0e030b05 	.word	0x0e030b05
    8658:	260f      	.short	0x260f
    865a:	2100      	movs	r1, #0
    865c:	e000      	b.n	8660 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18>
    865e:	2101      	movs	r1, #1
    8660:	4620      	mov	r0, r4
    8662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8666:	f000 b8f9 	b.w	885c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>
    866a:	2003      	movs	r0, #3
    866c:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
    8670:	bd10      	pop	{r4, pc}
    8672:	f003 fbe3 	bl	be3c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    8676:	f8c4 0180 	str.w	r0, [r4, #384]	; 0x180
    867a:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    867e:	f003 fcab 	bl	bfd8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8682:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
    8686:	1a09      	subs	r1, r1, r0
    8688:	480a      	ldr	r0, [pc, #40]	; (86b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6c>)
    868a:	6842      	ldr	r2, [r0, #4]
    868c:	440a      	add	r2, r1
    868e:	6042      	str	r2, [r0, #4]
    8690:	6882      	ldr	r2, [r0, #8]
    8692:	4411      	add	r1, r2
    8694:	6081      	str	r1, [r0, #8]
    8696:	4620      	mov	r0, r4
    8698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    869c:	f007 b846 	b.w	f72c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x204>
    86a0:	4620      	mov	r0, r4
    86a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    86a6:	f007 b82c 	b.w	f702 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1da>
    86aa:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    86ae:	2030      	movs	r0, #48	; 0x30
    86b0:	f7fc fcbc 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    86b4:	20000124 	.word	0x20000124

000086b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    86b8:	b570      	push	{r4, r5, r6, lr}
    86ba:	460c      	mov	r4, r1
    86bc:	4605      	mov	r5, r0
    86be:	b112      	cbz	r2, 86c6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    86c0:	f240 7182 	movw	r1, #1922	; 0x782
    86c4:	e010      	b.n	86e8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    86c6:	f003 fbab 	bl	be20 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    86ca:	4601      	mov	r1, r0
    86cc:	2200      	movs	r2, #0
    86ce:	4620      	mov	r0, r4
    86d0:	f007 f900 	bl	f8d4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3ac>
    86d4:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    86d8:	462a      	mov	r2, r5
    86da:	4905      	ldr	r1, [pc, #20]	; (86f0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    86dc:	f7fa fe62 	bl	33a4 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    86e0:	2800      	cmp	r0, #0
    86e2:	d104      	bne.n	86ee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    86e4:	f240 716b 	movw	r1, #1899	; 0x76b
    86e8:	2030      	movs	r0, #48	; 0x30
    86ea:	f7fc fc9f 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    86ee:	bd70      	pop	{r4, r5, r6, pc}
    86f0:	0000fa1d 	.word	0x0000fa1d
    86f4:	b510      	push	{r4, lr}
    86f6:	280c      	cmp	r0, #12
    86f8:	d304      	bcc.n	8704 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    86fa:	f240 3127 	movw	r1, #807	; 0x327
    86fe:	2006      	movs	r0, #6
    8700:	f7fc fc94 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8704:	4901      	ldr	r1, [pc, #4]	; (870c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    8706:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    870a:	bd10      	pop	{r4, pc}
    870c:	0000fafe 	.word	0x0000fafe
    8710:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    8712:	4c18      	ldr	r4, [pc, #96]	; (8774 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbc>)
    8714:	2001      	movs	r0, #1
    8716:	7060      	strb	r0, [r4, #1]
    8718:	f64f 75ff 	movw	r5, #65535	; 0xffff
    871c:	e00b      	b.n	8736 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e>
    871e:	2100      	movs	r1, #0
    8720:	f005 fc5e 	bl	dfe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8724:	0006      	movs	r6, r0
    8726:	d010      	beq.n	874a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    8728:	f896 0178 	ldrb.w	r0, [r6, #376]	; 0x178
    872c:	f7fa fe6c 	bl	3408 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8730:	4630      	mov	r0, r6
    8732:	f007 f8c2 	bl	f8ba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x392>
    8736:	4669      	mov	r1, sp
    8738:	2000      	movs	r0, #0
    873a:	f005 fc5b 	bl	dff4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    873e:	b180      	cbz	r0, 8762 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8740:	f44f 7187 	mov.w	r1, #270	; 0x10e
    8744:	2030      	movs	r0, #48	; 0x30
    8746:	f7fc fc71 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    874a:	f44f 7197 	mov.w	r1, #302	; 0x12e
    874e:	e7f9      	b.n	8744 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>
    8750:	9802      	ldr	r0, [sp, #8]
    8752:	b130      	cbz	r0, 8762 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8754:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    8758:	b119      	cbz	r1, 8762 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    875a:	8800      	ldrh	r0, [r0, #0]
    875c:	42a8      	cmp	r0, r5
    875e:	d1de      	bne.n	871e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x66>
    8760:	e004      	b.n	876c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>
    8762:	4668      	mov	r0, sp
    8764:	f7fc fe9a 	bl	549c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8768:	2800      	cmp	r0, #0
    876a:	d0f1      	beq.n	8750 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x98>
    876c:	2000      	movs	r0, #0
    876e:	7060      	strb	r0, [r4, #1]
    8770:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8772:	0000      	.short	0x0000
    8774:	20000124 	.word	0x20000124
    8778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    877c:	4604      	mov	r4, r0
    877e:	4836      	ldr	r0, [pc, #216]	; (8858 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a0>)
    8780:	461e      	mov	r6, r3
    8782:	4690      	mov	r8, r2
    8784:	7880      	ldrb	r0, [r0, #2]
    8786:	4689      	mov	r9, r1
    8788:	2500      	movs	r5, #0
    878a:	b368      	cbz	r0, 87e8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    878c:	f7fc f8c6 	bl	491c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    8790:	b350      	cbz	r0, 87e8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    8792:	f8b4 0130 	ldrh.w	r0, [r4, #304]	; 0x130
    8796:	2802      	cmp	r0, #2
    8798:	d326      	bcc.n	87e8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    879a:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    879e:	2802      	cmp	r0, #2
    87a0:	d022      	beq.n	87e8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    87a2:	f894 015a 	ldrb.w	r0, [r4, #346]	; 0x15a
    87a6:	b9f8      	cbnz	r0, 87e8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    87a8:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
    87ac:	f7ff ffa2 	bl	86f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    87b0:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    87b4:	b281      	uxth	r1, r0
    87b6:	8031      	strh	r1, [r6, #0]
    87b8:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    87bc:	2700      	movs	r7, #0
    87be:	2801      	cmp	r0, #1
    87c0:	d015      	beq.n	87ee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x136>
    87c2:	6920      	ldr	r0, [r4, #16]
    87c4:	f004 faa6 	bl	cd14 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    87c8:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
    87cc:	b280      	uxth	r0, r0
    87ce:	4442      	add	r2, r8
    87d0:	eba2 0109 	sub.w	r1, r2, r9
    87d4:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
    87d8:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
    87dc:	1a82      	subs	r2, r0, r2
    87de:	fb01 7502 	mla	r5, r1, r2, r7
    87e2:	2001      	movs	r0, #1
    87e4:	f884 015a 	strb.w	r0, [r4, #346]	; 0x15a
    87e8:	4628      	mov	r0, r5
    87ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    87ee:	f894 0089 	ldrb.w	r0, [r4, #137]	; 0x89
    87f2:	2803      	cmp	r0, #3
    87f4:	d02c      	beq.n	8850 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x198>
    87f6:	2101      	movs	r1, #1
    87f8:	2000      	movs	r0, #0
    87fa:	f005 ff4b 	bl	e694 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    87fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8800:	1847      	adds	r7, r0, r1
    8802:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    8806:	8831      	ldrh	r1, [r6, #0]
    8808:	34e0      	adds	r4, #224	; 0xe0
    880a:	f004 fa83 	bl	cd14 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    880e:	6da2      	ldr	r2, [r4, #88]	; 0x58
    8810:	6e21      	ldr	r1, [r4, #96]	; 0x60
    8812:	1a82      	subs	r2, r0, r2
    8814:	fb01 5502 	mla	r5, r1, r2, r5
    8818:	65a0      	str	r0, [r4, #88]	; 0x58
    881a:	8831      	ldrh	r1, [r6, #0]
    881c:	4638      	mov	r0, r7
    881e:	f004 fa79 	bl	cd14 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8822:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    8824:	66a0      	str	r0, [r4, #104]	; 0x68
    8826:	1a41      	subs	r1, r0, r1
    8828:	440d      	add	r5, r1
    882a:	8831      	ldrh	r1, [r6, #0]
    882c:	f854 0cd0 	ldr.w	r0, [r4, #-208]
    8830:	f004 fa70 	bl	cd14 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8834:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    8836:	4442      	add	r2, r8
    8838:	eba2 0109 	sub.w	r1, r2, r9
    883c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    883e:	1a89      	subs	r1, r1, r2
    8840:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    8842:	1e49      	subs	r1, r1, #1
    8844:	1a82      	subs	r2, r0, r2
    8846:	fb01 5502 	mla	r5, r1, r2, r5
    884a:	66e0      	str	r0, [r4, #108]	; 0x6c
    884c:	3ce0      	subs	r4, #224	; 0xe0
    884e:	e7c8      	b.n	87e2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x12a>
    8850:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    8854:	e7d3      	b.n	87fe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x146>
    8856:	0000      	.short	0x0000
    8858:	20000124 	.word	0x20000124
    885c:	b538      	push	{r3, r4, r5, lr}
    885e:	2500      	movs	r5, #0
    8860:	4604      	mov	r4, r0
    8862:	2901      	cmp	r1, #1
    8864:	d102      	bne.n	886c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b4>
    8866:	4811      	ldr	r0, [pc, #68]	; (88ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>)
    8868:	7840      	ldrb	r0, [r0, #1]
    886a:	b178      	cbz	r0, 888c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1d4>
    886c:	2004      	movs	r0, #4
    886e:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
    8872:	bf00      	nop
    8874:	f006 ff53 	bl	f71e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f6>
    8878:	f8a4 5176 	strh.w	r5, [r4, #374]	; 0x176
    887c:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    8880:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    8884:	f504 749d 	add.w	r4, r4, #314	; 0x13a
    8888:	77e5      	strb	r5, [r4, #31]
    888a:	bd38      	pop	{r3, r4, r5, pc}
    888c:	9500      	str	r5, [sp, #0]
    888e:	f8b4 110c 	ldrh.w	r1, [r4, #268]	; 0x10c
    8892:	2301      	movs	r3, #1
    8894:	2200      	movs	r2, #0
    8896:	4620      	mov	r0, r4
    8898:	f000 f80a 	bl	88b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    889c:	2800      	cmp	r0, #0
    889e:	d0e9      	beq.n	8874 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1bc>
    88a0:	f240 61cd 	movw	r1, #1741	; 0x6cd
    88a4:	2030      	movs	r0, #48	; 0x30
    88a6:	f7fc fbc1 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88aa:	0000      	.short	0x0000
    88ac:	20000124 	.word	0x20000124
    88b0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    88b4:	4604      	mov	r4, r0
    88b6:	b085      	sub	sp, #20
    88b8:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    88bc:	4699      	mov	r9, r3
    88be:	e9cd 3000 	strd	r3, r0, [sp]
    88c2:	460f      	mov	r7, r1
    88c4:	f008 fa32 	bl	10d2c <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    88c8:	4605      	mov	r5, r0
    88ca:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
    88ce:	f7ff ff11 	bl	86f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    88d2:	4428      	add	r0, r5
    88d4:	f8ad 0008 	strh.w	r0, [sp, #8]
    88d8:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    88dc:	280d      	cmp	r0, #13
    88de:	d004      	beq.n	88ea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    88e0:	2000      	movs	r0, #0
    88e2:	9003      	str	r0, [sp, #12]
    88e4:	9807      	ldr	r0, [sp, #28]
    88e6:	b110      	cbz	r0, 88ee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    88e8:	e02e      	b.n	8948 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    88ea:	2001      	movs	r0, #1
    88ec:	e7f9      	b.n	88e2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x22a>
    88ee:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    88f2:	2803      	cmp	r0, #3
    88f4:	d128      	bne.n	8948 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    88f6:	9803      	ldr	r0, [sp, #12]
    88f8:	b330      	cbz	r0, 8948 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    88fa:	f8b4 01a4 	ldrh.w	r0, [r4, #420]	; 0x1a4
    88fe:	42b8      	cmp	r0, r7
    8900:	d122      	bne.n	8948 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    8902:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
    8906:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    890a:	6920      	ldr	r0, [r4, #16]
    890c:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    8910:	f8b4 0176 	ldrh.w	r0, [r4, #374]	; 0x176
    8914:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
    8918:	4408      	add	r0, r1
    891a:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
    891e:	4620      	mov	r0, r4
    8920:	f007 f90d 	bl	fb3e <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    8924:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
    8928:	6260      	str	r0, [r4, #36]	; 0x24
    892a:	f8b4 01a6 	ldrh.w	r0, [r4, #422]	; 0x1a6
    892e:	8420      	strh	r0, [r4, #32]
    8930:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
    8934:	6120      	str	r0, [r4, #16]
    8936:	f8b4 01b0 	ldrh.w	r0, [r4, #432]	; 0x1b0
    893a:	8320      	strh	r0, [r4, #24]
    893c:	f8b4 01b2 	ldrh.w	r0, [r4, #434]	; 0x1b2
    8940:	8360      	strh	r0, [r4, #26]
    8942:	2002      	movs	r0, #2
    8944:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
    8948:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    894c:	f504 75ae 	add.w	r5, r4, #348	; 0x15c
    8950:	1a38      	subs	r0, r7, r0
    8952:	fa0f fa80 	sxth.w	sl, r0
    8956:	f8b4 0174 	ldrh.w	r0, [r4, #372]	; 0x174
    895a:	1a38      	subs	r0, r7, r0
    895c:	fa0f f880 	sxth.w	r8, r0
    8960:	f1b8 0f00 	cmp.w	r8, #0
    8964:	da06      	bge.n	8974 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2bc>
    8966:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    896a:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
    896e:	2001      	movs	r0, #1
    8970:	46d0      	mov	r8, sl
    8972:	9000      	str	r0, [sp, #0]
    8974:	ab02      	add	r3, sp, #8
    8976:	4652      	mov	r2, sl
    8978:	4641      	mov	r1, r8
    897a:	4620      	mov	r0, r4
    897c:	f7ff fefc 	bl	8778 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xc0>
    8980:	9004      	str	r0, [sp, #16]
    8982:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    8986:	f8df b338 	ldr.w	fp, [pc, #824]	; 8cc0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    898a:	b140      	cbz	r0, 899e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2e6>
    898c:	2801      	cmp	r0, #1
    898e:	d07d      	beq.n	8a8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d4>
    8990:	2802      	cmp	r0, #2
    8992:	d052      	beq.n	8a3a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x382>
    8994:	2803      	cmp	r0, #3
    8996:	d07a      	beq.n	8a8e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d6>
    8998:	f240 5151 	movw	r1, #1361	; 0x551
    899c:	e18c      	b.n	8cb8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    899e:	2101      	movs	r1, #1
    89a0:	2000      	movs	r0, #0
    89a2:	f005 fe77 	bl	e694 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    89a6:	4606      	mov	r6, r0
    89a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    89aa:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    89ae:	4430      	add	r0, r6
    89b0:	f004 f9b0 	bl	cd14 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    89b4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    89b8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    89bc:	6920      	ldr	r0, [r4, #16]
    89be:	f004 f9a9 	bl	cd14 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    89c2:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
    89c6:	a901      	add	r1, sp, #4
    89c8:	4668      	mov	r0, sp
    89ca:	f003 f991 	bl	bcf0 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    89ce:	e9dd 1200 	ldrd	r1, r2, [sp]
    89d2:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
    89d6:	f7fa ffe3 	bl	39a0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    89da:	4682      	mov	sl, r0
    89dc:	4620      	mov	r0, r4
    89de:	f006 fe90 	bl	f702 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1da>
    89e2:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    89e6:	f8d4 817c 	ldr.w	r8, [r4, #380]	; 0x17c
    89ea:	f003 fb21 	bl	c030 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    89ee:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    89f2:	4401      	add	r1, r0
    89f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    89f8:	fbb1 f0f0 	udiv	r0, r1, r0
    89fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    89fe:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    8a02:	4431      	add	r1, r6
    8a04:	1a08      	subs	r0, r1, r0
    8a06:	1a81      	subs	r1, r0, r2
    8a08:	4441      	add	r1, r8
    8a0a:	3920      	subs	r1, #32
    8a0c:	eba1 060a 	sub.w	r6, r1, sl
    8a10:	0050      	lsls	r0, r2, #1
    8a12:	8c21      	ldrh	r1, [r4, #32]
    8a14:	3060      	adds	r0, #96	; 0x60
    8a16:	4401      	add	r1, r0
    8a18:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8a1c:	f006 fee1 	bl	f7e2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    8a20:	3022      	adds	r0, #34	; 0x22
    8a22:	f8cb 0010 	str.w	r0, [fp, #16]
    8a26:	f8d4 017c 	ldr.w	r0, [r4, #380]	; 0x17c
    8a2a:	4659      	mov	r1, fp
    8a2c:	1a30      	subs	r0, r6, r0
    8a2e:	f5b0 7fdc 	cmp.w	r0, #440	; 0x1b8
    8a32:	d859      	bhi.n	8ae8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x430>
    8a34:	f240 41ea 	movw	r1, #1258	; 0x4ea
    8a38:	e13e      	b.n	8cb8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    8a3a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    8a3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8a40:	4408      	add	r0, r1
    8a42:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    8a46:	f004 f965 	bl	cd14 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8a4a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    8a4e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    8a52:	6920      	ldr	r0, [r4, #16]
    8a54:	f004 f95e 	bl	cd14 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8a58:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
    8a5c:	4620      	mov	r0, r4
    8a5e:	f006 fe50 	bl	f702 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1da>
    8a62:	f8b4 011e 	ldrh.w	r0, [r4, #286]	; 0x11e
    8a66:	bb10      	cbnz	r0, 8aae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f6>
    8a68:	f1b9 0f00 	cmp.w	r9, #0
    8a6c:	d01f      	beq.n	8aae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f6>
    8a6e:	f894 806f 	ldrb.w	r8, [r4, #111]	; 0x6f
    8a72:	4640      	mov	r0, r8
    8a74:	f003 fadc 	bl	c030 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8a78:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8a7c:	4401      	add	r1, r0
    8a7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8a82:	fbb1 f0f0 	udiv	r0, r1, r0
    8a86:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    8a8a:	e001      	b.n	8a90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d8>
    8a8c:	e02d      	b.n	8aea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x432>
    8a8e:	e049      	b.n	8b24 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x46c>
    8a90:	4408      	add	r0, r1
    8a92:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8a94:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    8a98:	4411      	add	r1, r2
    8a9a:	1a0e      	subs	r6, r1, r0
    8a9c:	4640      	mov	r0, r8
    8a9e:	f003 fa9b 	bl	bfd8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8aa2:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
    8aa6:	1a08      	subs	r0, r1, r0
    8aa8:	4406      	add	r6, r0
    8aaa:	3e20      	subs	r6, #32
    8aac:	e006      	b.n	8abc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x404>
    8aae:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8ab0:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    8ab4:	4408      	add	r0, r1
    8ab6:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    8aba:	1a46      	subs	r6, r0, r1
    8abc:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    8ac0:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    8ac4:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    8ac8:	fb01 0002 	mla	r0, r1, r2, r0
    8acc:	0040      	lsls	r0, r0, #1
    8ace:	8c21      	ldrh	r1, [r4, #32]
    8ad0:	3060      	adds	r0, #96	; 0x60
    8ad2:	4401      	add	r1, r0
    8ad4:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8ad8:	f006 fe83 	bl	f7e2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    8adc:	f8cb 0010 	str.w	r0, [fp, #16]
    8ae0:	2001      	movs	r0, #1
    8ae2:	4659      	mov	r1, fp
    8ae4:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
    8ae8:	e062      	b.n	8bb0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    8aea:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
    8aee:	6920      	ldr	r0, [r4, #16]
    8af0:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
    8af4:	1a46      	subs	r6, r0, r1
    8af6:	eb02 000a 	add.w	r0, r2, sl
    8afa:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    8afe:	f8d4 c138 	ldr.w	ip, [r4, #312]	; 0x138
    8b02:	1a80      	subs	r0, r0, r2
    8b04:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    8b08:	1e40      	subs	r0, r0, #1
    8b0a:	fb0c 3202 	mla	r2, ip, r2, r3
    8b0e:	fb00 2001 	mla	r0, r0, r1, r2
    8b12:	0040      	lsls	r0, r0, #1
    8b14:	8c21      	ldrh	r1, [r4, #32]
    8b16:	3060      	adds	r0, #96	; 0x60
    8b18:	4401      	add	r1, r0
    8b1a:	fb06 f608 	mul.w	r6, r6, r8
    8b1e:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8b22:	e040      	b.n	8ba6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4ee>
    8b24:	6920      	ldr	r0, [r4, #16]
    8b26:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
    8b2a:	fb00 f008 	mul.w	r0, r0, r8
    8b2e:	fb08 0611 	mls	r6, r8, r1, r0
    8b32:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
    8b36:	2824      	cmp	r0, #36	; 0x24
    8b38:	d003      	beq.n	8b42 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x48a>
    8b3a:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    8b3e:	2824      	cmp	r0, #36	; 0x24
    8b40:	d109      	bne.n	8b56 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    8b42:	f8b4 01a4 	ldrh.w	r0, [r4, #420]	; 0x1a4
    8b46:	1a38      	subs	r0, r7, r0
    8b48:	b200      	sxth	r0, r0
    8b4a:	2800      	cmp	r0, #0
    8b4c:	db03      	blt.n	8b56 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    8b4e:	f894 01a7 	ldrb.w	r0, [r4, #423]	; 0x1a7
    8b52:	b100      	cbz	r0, 8b56 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    8b54:	9001      	str	r0, [sp, #4]
    8b56:	9800      	ldr	r0, [sp, #0]
    8b58:	b1d8      	cbz	r0, 8b92 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    8b5a:	f8b4 011e 	ldrh.w	r0, [r4, #286]	; 0x11e
    8b5e:	b9c0      	cbnz	r0, 8b92 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    8b60:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
    8b64:	2800      	cmp	r0, #0
    8b66:	d07d      	beq.n	8c64 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ac>
    8b68:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8b6c:	f003 fa60 	bl	c030 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8b70:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8b74:	4401      	add	r1, r0
    8b76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8b7a:	fbb1 f0f0 	udiv	r0, r1, r0
    8b7e:	1a36      	subs	r6, r6, r0
    8b80:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8b84:	f003 fa28 	bl	bfd8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8b88:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
    8b8c:	1a08      	subs	r0, r1, r0
    8b8e:	4406      	add	r6, r0
    8b90:	3e20      	subs	r6, #32
    8b92:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
    8b96:	eb01 000a 	add.w	r0, r1, sl
    8b9a:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
    8b9e:	4348      	muls	r0, r1
    8ba0:	0041      	lsls	r1, r0, #1
    8ba2:	3160      	adds	r1, #96	; 0x60
    8ba4:	9801      	ldr	r0, [sp, #4]
    8ba6:	f006 fe1c 	bl	f7e2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    8baa:	4659      	mov	r1, fp
    8bac:	f8cb 0010 	str.w	r0, [fp, #16]
    8bb0:	9804      	ldr	r0, [sp, #16]
    8bb2:	6909      	ldr	r1, [r1, #16]
    8bb4:	1a32      	subs	r2, r6, r0
    8bb6:	f8d4 614c 	ldr.w	r6, [r4, #332]	; 0x14c
    8bba:	6920      	ldr	r0, [r4, #16]
    8bbc:	1b80      	subs	r0, r0, r6
    8bbe:	f2a0 2043 	subw	r0, r0, #579	; 0x243
    8bc2:	f8cb 0014 	str.w	r0, [fp, #20]
    8bc6:	4281      	cmp	r1, r0
    8bc8:	d800      	bhi.n	8bcc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x514>
    8bca:	4608      	mov	r0, r1
    8bcc:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
    8bd0:	2600      	movs	r6, #0
    8bd2:	702e      	strb	r6, [r5, #0]
    8bd4:	2064      	movs	r0, #100	; 0x64
    8bd6:	8128      	strh	r0, [r5, #8]
    8bd8:	4611      	mov	r1, r2
    8bda:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
    8bde:	f7f9 fe21 	bl	2824 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8be2:	60e8      	str	r0, [r5, #12]
    8be4:	f104 0030 	add.w	r0, r4, #48	; 0x30
    8be8:	f006 f94f 	bl	ee8a <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8bec:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    8bf0:	4408      	add	r0, r1
    8bf2:	6068      	str	r0, [r5, #4]
    8bf4:	68e8      	ldr	r0, [r5, #12]
    8bf6:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
    8bfa:	f8a4 7174 	strh.w	r7, [r4, #372]	; 0x174
    8bfe:	72ae      	strb	r6, [r5, #10]
    8c00:	f8b4 0108 	ldrh.w	r0, [r4, #264]	; 0x108
    8c04:	1bc0      	subs	r0, r0, r7
    8c06:	b200      	sxth	r0, r0
    8c08:	2800      	cmp	r0, #0
    8c0a:	dd01      	ble.n	8c10 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x558>
    8c0c:	2002      	movs	r0, #2
    8c0e:	72a8      	strb	r0, [r5, #10]
    8c10:	9803      	ldr	r0, [sp, #12]
    8c12:	b340      	cbz	r0, 8c66 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ae>
    8c14:	f1b9 0f00 	cmp.w	r9, #0
    8c18:	d01e      	beq.n	8c58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a0>
    8c1a:	bf00      	nop
    8c1c:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
    8c20:	b379      	cbz	r1, 8c82 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ca>
    8c22:	f8b4 0132 	ldrh.w	r0, [r4, #306]	; 0x132
    8c26:	bf00      	nop
    8c28:	f8a4 0132 	strh.w	r0, [r4, #306]	; 0x132
    8c2c:	f894 2134 	ldrb.w	r2, [r4, #308]	; 0x134
    8c30:	1c40      	adds	r0, r0, #1
    8c32:	4342      	muls	r2, r0
    8c34:	428a      	cmp	r2, r1
    8c36:	d20f      	bcs.n	8c58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a0>
    8c38:	7aa8      	ldrb	r0, [r5, #10]
    8c3a:	b168      	cbz	r0, 8c58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a0>
    8c3c:	72ae      	strb	r6, [r5, #10]
    8c3e:	f8b4 0132 	ldrh.w	r0, [r4, #306]	; 0x132
    8c42:	1c40      	adds	r0, r0, #1
    8c44:	f8a4 0132 	strh.w	r0, [r4, #306]	; 0x132
    8c48:	2001      	movs	r0, #1
    8c4a:	f000 f83b 	bl	8cc4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    8c4e:	f000 0007 	and.w	r0, r0, #7
    8c52:	1c40      	adds	r0, r0, #1
    8c54:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    8c58:	f894 0178 	ldrb.w	r0, [r4, #376]	; 0x178
    8c5c:	4629      	mov	r1, r5
    8c5e:	f006 fdd2 	bl	f806 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2de>
    8c62:	e001      	b.n	8c68 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b0>
    8c64:	e00a      	b.n	8c7c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c4>
    8c66:	e00d      	b.n	8c84 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5cc>
    8c68:	b320      	cbz	r0, 8cb4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
    8c6a:	9807      	ldr	r0, [sp, #28]
    8c6c:	f080 0001 	eor.w	r0, r0, #1
    8c70:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
    8c74:	2000      	movs	r0, #0
    8c76:	b009      	add	sp, #36	; 0x24
    8c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c7c:	f240 513c 	movw	r1, #1340	; 0x53c
    8c80:	e01a      	b.n	8cb8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    8c82:	e015      	b.n	8cb0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f8>
    8c84:	f1b9 0f00 	cmp.w	r9, #0
    8c88:	d1c8      	bne.n	8c1c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
    8c8a:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    8c8e:	2800      	cmp	r0, #0
    8c90:	d0e2      	beq.n	8c58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a0>
    8c92:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
    8c96:	6920      	ldr	r0, [r4, #16]
    8c98:	1a41      	subs	r1, r0, r1
    8c9a:	4628      	mov	r0, r5
    8c9c:	f005 fd0c 	bl	e6b8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8ca0:	0400      	lsls	r0, r0, #16
    8ca2:	0c00      	lsrs	r0, r0, #16
    8ca4:	d0d8      	beq.n	8c58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a0>
    8ca6:	9912      	ldr	r1, [sp, #72]	; 0x48
    8ca8:	b101      	cbz	r1, 8cac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f4>
    8caa:	8008      	strh	r0, [r1, #0]
    8cac:	2001      	movs	r0, #1
    8cae:	e7e2      	b.n	8c76 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5be>
    8cb0:	2000      	movs	r0, #0
    8cb2:	e7b9      	b.n	8c28 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x570>
    8cb4:	f240 519b 	movw	r1, #1435	; 0x59b
    8cb8:	2030      	movs	r0, #48	; 0x30
    8cba:	f7fc f9b7 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cbe:	0000      	.short	0x0000
    8cc0:	20000124 	.word	0x20000124
    8cc4:	b108      	cbz	r0, 8cca <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x612>
    8cc6:	4803      	ldr	r0, [pc, #12]	; (8cd4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61c>)
    8cc8:	e001      	b.n	8cce <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x616>
    8cca:	4802      	ldr	r0, [pc, #8]	; (8cd4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61c>)
    8ccc:	3008      	adds	r0, #8
    8cce:	f7fe bc79 	b.w	75c4 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>
    8cd2:	0000      	.short	0x0000
    8cd4:	2000013c 	.word	0x2000013c
    8cd8:	b570      	push	{r4, r5, r6, lr}
    8cda:	4604      	mov	r4, r0
    8cdc:	f7f9 ff06 	bl	2aec <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    8ce0:	2864      	cmp	r0, #100	; 0x64
    8ce2:	d901      	bls.n	8ce8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x630>
    8ce4:	4605      	mov	r5, r0
    8ce6:	e000      	b.n	8cea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x632>
    8ce8:	2564      	movs	r5, #100	; 0x64
    8cea:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8cee:	2128      	movs	r1, #40	; 0x28
    8cf0:	f006 fc75 	bl	f5de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
    8cf4:	4428      	add	r0, r5
    8cf6:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
    8cfa:	f200 203d 	addw	r0, r0, #573	; 0x23d
    8cfe:	180e      	adds	r6, r1, r0
    8d00:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8d04:	2128      	movs	r1, #40	; 0x28
    8d06:	f006 fc6a 	bl	f5de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
    8d0a:	f200 22a1 	addw	r2, r0, #673	; 0x2a1
    8d0e:	4620      	mov	r0, r4
    8d10:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8d12:	f006 f857 	bl	edc4 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8d16:	4605      	mov	r5, r0
    8d18:	4632      	mov	r2, r6
    8d1a:	4620      	mov	r0, r4
    8d1c:	6921      	ldr	r1, [r4, #16]
    8d1e:	f006 f851 	bl	edc4 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8d22:	4907      	ldr	r1, [pc, #28]	; (8d40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x688>)
    8d24:	4285      	cmp	r5, r0
    8d26:	6088      	str	r0, [r1, #8]
    8d28:	d200      	bcs.n	8d2c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x674>
    8d2a:	4628      	mov	r0, r5
    8d2c:	6048      	str	r0, [r1, #4]
    8d2e:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    8d32:	f5a0 70b3 	sub.w	r0, r0, #358	; 0x166
    8d36:	60c8      	str	r0, [r1, #12]
    8d38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8d3c:	f7fa bd7a 	b.w	3834 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8d40:	20000124 	.word	0x20000124
    8d44:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    8d46:	4604      	mov	r4, r0
    8d48:	f003 ffb0 	bl	ccac <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8d4c:	4601      	mov	r1, r0
    8d4e:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    8d52:	f7f9 fd99 	bl	2888 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8d56:	4601      	mov	r1, r0
    8d58:	6922      	ldr	r2, [r4, #16]
    8d5a:	2000      	movs	r0, #0
    8d5c:	b10a      	cbz	r2, 8d62 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6aa>
    8d5e:	fbb1 f0f2 	udiv	r0, r1, r2
    8d62:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
    8d66:	290d      	cmp	r1, #13
    8d68:	d00c      	beq.n	8d84 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6cc>
    8d6a:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    8d6e:	f8b4 1156 	ldrh.w	r1, [r4, #342]	; 0x156
    8d72:	1813      	adds	r3, r2, r0
    8d74:	1acb      	subs	r3, r1, r3
    8d76:	b21b      	sxth	r3, r3
    8d78:	2b00      	cmp	r3, #0
    8d7a:	db06      	blt.n	8d8a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6d2>
    8d7c:	1c49      	adds	r1, r1, #1
    8d7e:	f8a4 1156 	strh.w	r1, [r4, #342]	; 0x156
    8d82:	e006      	b.n	8d92 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6da>
    8d84:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    8d88:	e012      	b.n	8db0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6f8>
    8d8a:	1c40      	adds	r0, r0, #1
    8d8c:	4410      	add	r0, r2
    8d8e:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    8d92:	f894 0159 	ldrb.w	r0, [r4, #345]	; 0x159
    8d96:	f88d 0000 	strb.w	r0, [sp]
    8d9a:	9800      	ldr	r0, [sp, #0]
    8d9c:	9000      	str	r0, [sp, #0]
    8d9e:	f89d 0000 	ldrb.w	r0, [sp]
    8da2:	b940      	cbnz	r0, 8db6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6fe>
    8da4:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    8da8:	f8b4 110c 	ldrh.w	r1, [r4, #268]	; 0x10c
    8dac:	4288      	cmp	r0, r1
    8dae:	d102      	bne.n	8db6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6fe>
    8db0:	1c40      	adds	r0, r0, #1
    8db2:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    8db6:	f8b4 0176 	ldrh.w	r0, [r4, #374]	; 0x176
    8dba:	1c40      	adds	r0, r0, #1
    8dbc:	f8a4 0176 	strh.w	r0, [r4, #374]	; 0x176
    8dc0:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    8dc4:	f8b4 10ac 	ldrh.w	r1, [r4, #172]	; 0xac
    8dc8:	1a40      	subs	r0, r0, r1
    8dca:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    8dce:	1e40      	subs	r0, r0, #1
    8dd0:	4408      	add	r0, r1
    8dd2:	b285      	uxth	r5, r0
    8dd4:	e023      	b.n	8e1e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x766>
    8dd6:	a801      	add	r0, sp, #4
    8dd8:	2300      	movs	r3, #0
    8dda:	9000      	str	r0, [sp, #0]
    8ddc:	461a      	mov	r2, r3
    8dde:	4620      	mov	r0, r4
    8de0:	f7ff fd66 	bl	88b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    8de4:	2800      	cmp	r0, #0
    8de6:	d036      	beq.n	8e56 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x79e>
    8de8:	2801      	cmp	r0, #1
    8dea:	d004      	beq.n	8df6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x73e>
    8dec:	f240 6152 	movw	r1, #1618	; 0x652
    8df0:	2030      	movs	r0, #48	; 0x30
    8df2:	f7fc f91b 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8df6:	f8b4 1156 	ldrh.w	r1, [r4, #342]	; 0x156
    8dfa:	f8b4 0108 	ldrh.w	r0, [r4, #264]	; 0x108
    8dfe:	1a0a      	subs	r2, r1, r0
    8e00:	b212      	sxth	r2, r2
    8e02:	2a00      	cmp	r2, #0
    8e04:	da06      	bge.n	8e14 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x75c>
    8e06:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8e0a:	440a      	add	r2, r1
    8e0c:	1aaa      	subs	r2, r5, r2
    8e0e:	b212      	sxth	r2, r2
    8e10:	2a00      	cmp	r2, #0
    8e12:	db02      	blt.n	8e1a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x762>
    8e14:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    8e18:	4408      	add	r0, r1
    8e1a:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    8e1e:	f8b4 1156 	ldrh.w	r1, [r4, #342]	; 0x156
    8e22:	1a68      	subs	r0, r5, r1
    8e24:	b200      	sxth	r0, r0
    8e26:	2800      	cmp	r0, #0
    8e28:	dad5      	bge.n	8dd6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x71e>
    8e2a:	f894 0089 	ldrb.w	r0, [r4, #137]	; 0x89
    8e2e:	b180      	cbz	r0, 8e52 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x79a>
    8e30:	f05f 0008 	movs.w	r0, #8
    8e34:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
    8e38:	20ff      	movs	r0, #255	; 0xff
    8e3a:	f884 009c 	strb.w	r0, [r4, #156]	; 0x9c
    8e3e:	4620      	mov	r0, r4
    8e40:	f006 feb2 	bl	fba8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    8e44:	4620      	mov	r0, r4
    8e46:	f006 fd38 	bl	f8ba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x392>
    8e4a:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    8e4e:	f7fe ba23 	b.w	7298 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8e52:	203e      	movs	r0, #62	; 0x3e
    8e54:	e7ee      	b.n	8e34 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x77c>
    8e56:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00008e58 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    8e58:	4806      	ldr	r0, [pc, #24]	; (8e74 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    8e5a:	4905      	ldr	r1, [pc, #20]	; (8e70 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    8e5c:	6501      	str	r1, [r0, #80]	; 0x50
    8e5e:	4906      	ldr	r1, [pc, #24]	; (8e78 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    8e60:	6541      	str	r1, [r0, #84]	; 0x54
    8e62:	4807      	ldr	r0, [pc, #28]	; (8e80 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    8e64:	4905      	ldr	r1, [pc, #20]	; (8e7c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    8e66:	6501      	str	r1, [r0, #80]	; 0x50
    8e68:	4906      	ldr	r1, [pc, #24]	; (8e84 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    8e6a:	6541      	str	r1, [r0, #84]	; 0x54
    8e6c:	4770      	bx	lr
    8e6e:	0000      	.short	0x0000
    8e70:	0000a439 	.word	0x0000a439
    8e74:	20000160 	.word	0x20000160
    8e78:	0000a519 	.word	0x0000a519
    8e7c:	0000ab89 	.word	0x0000ab89
    8e80:	200001c8 	.word	0x200001c8
    8e84:	0000abb9 	.word	0x0000abb9

00008e88 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    8e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e8a:	460d      	mov	r5, r1
    8e8c:	4607      	mov	r7, r0
    8e8e:	2100      	movs	r1, #0
    8e90:	f005 f8a6 	bl	dfe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8e94:	1e04      	subs	r4, r0, #0
    8e96:	d050      	beq.n	8f3a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    8e98:	f894 0078 	ldrb.w	r0, [r4, #120]	; 0x78
    8e9c:	2800      	cmp	r0, #0
    8e9e:	d04c      	beq.n	8f3a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    8ea0:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
    8ea4:	f88d 0000 	strb.w	r0, [sp]
    8ea8:	9800      	ldr	r0, [sp, #0]
    8eaa:	9000      	str	r0, [sp, #0]
    8eac:	f89d 0000 	ldrb.w	r0, [sp]
    8eb0:	2600      	movs	r6, #0
    8eb2:	b118      	cbz	r0, 8ebc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
    8eb4:	706e      	strb	r6, [r5, #1]
    8eb6:	2007      	movs	r0, #7
    8eb8:	7028      	strb	r0, [r5, #0]
    8eba:	e00d      	b.n	8ed8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x50>
    8ebc:	f894 01d4 	ldrb.w	r0, [r4, #468]	; 0x1d4
    8ec0:	b390      	cbz	r0, 8f28 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
    8ec2:	f894 01d4 	ldrb.w	r0, [r4, #468]	; 0x1d4
    8ec6:	280b      	cmp	r0, #11
    8ec8:	d02f      	beq.n	8f2a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa2>
    8eca:	280c      	cmp	r0, #12
    8ecc:	d01c      	beq.n	8f08 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
    8ece:	f640 21dc 	movw	r1, #2780	; 0xadc
    8ed2:	2031      	movs	r0, #49	; 0x31
    8ed4:	f7fc f8aa 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ed8:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
    8edc:	f88d 0000 	strb.w	r0, [sp]
    8ee0:	9800      	ldr	r0, [sp, #0]
    8ee2:	9000      	str	r0, [sp, #0]
    8ee4:	f89d 0000 	ldrb.w	r0, [sp]
    8ee8:	b160      	cbz	r0, 8f04 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x7c>
    8eea:	f884 61c8 	strb.w	r6, [r4, #456]	; 0x1c8
    8eee:	8526      	strh	r6, [r4, #40]	; 0x28
    8ef0:	f8d4 01ca 	ldr.w	r0, [r4, #458]	; 0x1ca
    8ef4:	6068      	str	r0, [r5, #4]
    8ef6:	f8d4 01ce 	ldr.w	r0, [r4, #462]	; 0x1ce
    8efa:	60a8      	str	r0, [r5, #8]
    8efc:	f8b4 01d2 	ldrh.w	r0, [r4, #466]	; 0x1d2
    8f00:	81a8      	strh	r0, [r5, #12]
    8f02:	e7e9      	b.n	8ed8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x50>
    8f04:	712e      	strb	r6, [r5, #4]
    8f06:	e0fa      	b.n	90fe <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    8f08:	8820      	ldrh	r0, [r4, #0]
    8f0a:	f7fc fca9 	bl	5860 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8f0e:	4607      	mov	r7, r0
    8f10:	f004 ff2c 	bl	dd6c <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    8f14:	b980      	cbnz	r0, 8f38 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    8f16:	706e      	strb	r6, [r5, #1]
    8f18:	200c      	movs	r0, #12
    8f1a:	7028      	strb	r0, [r5, #0]
    8f1c:	f894 01d6 	ldrb.w	r0, [r4, #470]	; 0x1d6
    8f20:	7128      	strb	r0, [r5, #4]
    8f22:	8820      	ldrh	r0, [r4, #0]
    8f24:	80e8      	strh	r0, [r5, #6]
    8f26:	e014      	b.n	8f52 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xca>
    8f28:	e019      	b.n	8f5e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
    8f2a:	8820      	ldrh	r0, [r4, #0]
    8f2c:	f7fc fc98 	bl	5860 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8f30:	4607      	mov	r7, r0
    8f32:	f004 ff1b 	bl	dd6c <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    8f36:	b108      	cbz	r0, 8f3c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb4>
    8f38:	2000      	movs	r0, #0
    8f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8f3c:	706e      	strb	r6, [r5, #1]
    8f3e:	200b      	movs	r0, #11
    8f40:	7028      	strb	r0, [r5, #0]
    8f42:	f894 01d6 	ldrb.w	r0, [r4, #470]	; 0x1d6
    8f46:	7128      	strb	r0, [r5, #4]
    8f48:	8820      	ldrh	r0, [r4, #0]
    8f4a:	80e8      	strh	r0, [r5, #6]
    8f4c:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
    8f50:	7228      	strb	r0, [r5, #8]
    8f52:	f884 61d4 	strb.w	r6, [r4, #468]	; 0x1d4
    8f56:	4638      	mov	r0, r7
    8f58:	f004 ff23 	bl	dda2 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    8f5c:	e0cf      	b.n	90fe <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    8f5e:	f894 020a 	ldrb.w	r0, [r4, #522]	; 0x20a
    8f62:	f88d 0000 	strb.w	r0, [sp]
    8f66:	9800      	ldr	r0, [sp, #0]
    8f68:	9000      	str	r0, [sp, #0]
    8f6a:	f89d 0000 	ldrb.w	r0, [sp]
    8f6e:	b130      	cbz	r0, 8f7e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
    8f70:	706e      	strb	r6, [r5, #1]
    8f72:	200e      	movs	r0, #14
    8f74:	7028      	strb	r0, [r5, #0]
    8f76:	80af      	strh	r7, [r5, #4]
    8f78:	f884 620a 	strb.w	r6, [r4, #522]	; 0x20a
    8f7c:	e0bf      	b.n	90fe <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    8f7e:	f894 01dc 	ldrb.w	r0, [r4, #476]	; 0x1dc
    8f82:	f88d 0000 	strb.w	r0, [sp]
    8f86:	9800      	ldr	r0, [sp, #0]
    8f88:	9000      	str	r0, [sp, #0]
    8f8a:	f89d 0000 	ldrb.w	r0, [sp]
    8f8e:	b198      	cbz	r0, 8fb8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
    8f90:	706e      	strb	r6, [r5, #1]
    8f92:	2008      	movs	r0, #8
    8f94:	7028      	strb	r0, [r5, #0]
    8f96:	8820      	ldrh	r0, [r4, #0]
    8f98:	80a8      	strh	r0, [r5, #4]
    8f9a:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
    8f9e:	f8c5 1006 	str.w	r1, [r5, #6]
    8fa2:	f8d4 11e4 	ldr.w	r1, [r4, #484]	; 0x1e4
    8fa6:	f8c5 100a 	str.w	r1, [r5, #10]
    8faa:	f8b4 01e8 	ldrh.w	r0, [r4, #488]	; 0x1e8
    8fae:	81e8      	strh	r0, [r5, #14]
    8fb0:	f504 74ee 	add.w	r4, r4, #476	; 0x1dc
    8fb4:	7026      	strb	r6, [r4, #0]
    8fb6:	e0a2      	b.n	90fe <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    8fb8:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8fbc:	f88d 0000 	strb.w	r0, [sp]
    8fc0:	9800      	ldr	r0, [sp, #0]
    8fc2:	9000      	str	r0, [sp, #0]
    8fc4:	f89d 0000 	ldrb.w	r0, [sp]
    8fc8:	b118      	cbz	r0, 8fd2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x14a>
    8fca:	706e      	strb	r6, [r5, #1]
    8fcc:	2016      	movs	r0, #22
    8fce:	7028      	strb	r0, [r5, #0]
    8fd0:	e017      	b.n	9002 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x17a>
    8fd2:	f894 021a 	ldrb.w	r0, [r4, #538]	; 0x21a
    8fd6:	f88d 0000 	strb.w	r0, [sp]
    8fda:	9800      	ldr	r0, [sp, #0]
    8fdc:	9000      	str	r0, [sp, #0]
    8fde:	f89d 0000 	ldrb.w	r0, [sp]
    8fe2:	b1e8      	cbz	r0, 9020 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x198>
    8fe4:	706e      	strb	r6, [r5, #1]
    8fe6:	2006      	movs	r0, #6
    8fe8:	7028      	strb	r0, [r5, #0]
    8fea:	f8d4 021c 	ldr.w	r0, [r4, #540]	; 0x21c
    8fee:	6068      	str	r0, [r5, #4]
    8ff0:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
    8ff4:	60a8      	str	r0, [r5, #8]
    8ff6:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
    8ffa:	60e8      	str	r0, [r5, #12]
    8ffc:	f504 7407 	add.w	r4, r4, #540	; 0x21c
    9000:	e032      	b.n	9068 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e0>
    9002:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    9006:	f88d 0000 	strb.w	r0, [sp]
    900a:	9800      	ldr	r0, [sp, #0]
    900c:	9000      	str	r0, [sp, #0]
    900e:	f89d 0000 	ldrb.w	r0, [sp]
    9012:	b358      	cbz	r0, 906c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e4>
    9014:	f884 6204 	strb.w	r6, [r4, #516]	; 0x204
    9018:	f8d4 0206 	ldr.w	r0, [r4, #518]	; 0x206
    901c:	6068      	str	r0, [r5, #4]
    901e:	e7f0      	b.n	9002 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x17a>
    9020:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
    9024:	f88d 0000 	strb.w	r0, [sp]
    9028:	9800      	ldr	r0, [sp, #0]
    902a:	9000      	str	r0, [sp, #0]
    902c:	f89d 0000 	ldrb.w	r0, [sp]
    9030:	b118      	cbz	r0, 903a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1b2>
    9032:	706e      	strb	r6, [r5, #1]
    9034:	2012      	movs	r0, #18
    9036:	7028      	strb	r0, [r5, #0]
    9038:	e019      	b.n	906e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e6>
    903a:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
    903e:	f88d 0000 	strb.w	r0, [sp]
    9042:	9800      	ldr	r0, [sp, #0]
    9044:	9000      	str	r0, [sp, #0]
    9046:	f89d 0000 	ldrb.w	r0, [sp]
    904a:	b328      	cbz	r0, 9098 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x210>
    904c:	706e      	strb	r6, [r5, #1]
    904e:	2018      	movs	r0, #24
    9050:	7028      	strb	r0, [r5, #0]
    9052:	f8d4 01fa 	ldr.w	r0, [r4, #506]	; 0x1fa
    9056:	6068      	str	r0, [r5, #4]
    9058:	f8d4 01fe 	ldr.w	r0, [r4, #510]	; 0x1fe
    905c:	60a8      	str	r0, [r5, #8]
    905e:	f8b4 0202 	ldrh.w	r0, [r4, #514]	; 0x202
    9062:	81a8      	strh	r0, [r5, #12]
    9064:	f504 74fd 	add.w	r4, r4, #506	; 0x1fa
    9068:	f804 6c02 	strb.w	r6, [r4, #-2]
    906c:	e047      	b.n	90fe <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    906e:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
    9072:	f88d 0000 	strb.w	r0, [sp]
    9076:	9800      	ldr	r0, [sp, #0]
    9078:	9000      	str	r0, [sp, #0]
    907a:	f89d 0000 	ldrb.w	r0, [sp]
    907e:	b3e8      	cbz	r0, 90fc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x274>
    9080:	f884 61ea 	strb.w	r6, [r4, #490]	; 0x1ea
    9084:	f8d4 01ec 	ldr.w	r0, [r4, #492]	; 0x1ec
    9088:	6068      	str	r0, [r5, #4]
    908a:	f8d4 01f0 	ldr.w	r0, [r4, #496]	; 0x1f0
    908e:	60a8      	str	r0, [r5, #8]
    9090:	f8d4 01f4 	ldr.w	r0, [r4, #500]	; 0x1f4
    9094:	60e8      	str	r0, [r5, #12]
    9096:	e7ea      	b.n	906e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e6>
    9098:	f894 020c 	ldrb.w	r0, [r4, #524]	; 0x20c
    909c:	f88d 0000 	strb.w	r0, [sp]
    90a0:	9800      	ldr	r0, [sp, #0]
    90a2:	9000      	str	r0, [sp, #0]
    90a4:	f89d 0000 	ldrb.w	r0, [sp]
    90a8:	b138      	cbz	r0, 90ba <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x232>
    90aa:	2019      	movs	r0, #25
    90ac:	7028      	strb	r0, [r5, #0]
    90ae:	f8d4 020e 	ldr.w	r0, [r4, #526]	; 0x20e
    90b2:	6068      	str	r0, [r5, #4]
    90b4:	f884 620c 	strb.w	r6, [r4, #524]	; 0x20c
    90b8:	e021      	b.n	90fe <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    90ba:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
    90be:	f88d 0000 	strb.w	r0, [sp]
    90c2:	9800      	ldr	r0, [sp, #0]
    90c4:	9000      	str	r0, [sp, #0]
    90c6:	f89d 0000 	ldrb.w	r0, [sp]
    90ca:	2800      	cmp	r0, #0
    90cc:	f43f af35 	beq.w	8f3a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    90d0:	706e      	strb	r6, [r5, #1]
    90d2:	2013      	movs	r0, #19
    90d4:	f885 0000 	strb.w	r0, [r5]
    90d8:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
    90dc:	f88d 0000 	strb.w	r0, [sp]
    90e0:	9800      	ldr	r0, [sp, #0]
    90e2:	9000      	str	r0, [sp, #0]
    90e4:	f89d 0000 	ldrb.w	r0, [sp]
    90e8:	b140      	cbz	r0, 90fc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x274>
    90ea:	f884 6212 	strb.w	r6, [r4, #530]	; 0x212
    90ee:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
    90f2:	6068      	str	r0, [r5, #4]
    90f4:	f8b4 0218 	ldrh.w	r0, [r4, #536]	; 0x218
    90f8:	8128      	strh	r0, [r5, #8]
    90fa:	e7ed      	b.n	90d8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x250>
    90fc:	e7ff      	b.n	90fe <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    90fe:	2001      	movs	r0, #1
    9100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00009104 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    9104:	481d      	ldr	r0, [pc, #116]	; (917c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    9106:	491c      	ldr	r1, [pc, #112]	; (9178 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
    9108:	6081      	str	r1, [r0, #8]
    910a:	491d      	ldr	r1, [pc, #116]	; (9180 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    910c:	6041      	str	r1, [r0, #4]
    910e:	491d      	ldr	r1, [pc, #116]	; (9184 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    9110:	6001      	str	r1, [r0, #0]
    9112:	491d      	ldr	r1, [pc, #116]	; (9188 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    9114:	6281      	str	r1, [r0, #40]	; 0x28
    9116:	491d      	ldr	r1, [pc, #116]	; (918c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    9118:	62c1      	str	r1, [r0, #44]	; 0x2c
    911a:	491d      	ldr	r1, [pc, #116]	; (9190 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    911c:	60c1      	str	r1, [r0, #12]
    911e:	491d      	ldr	r1, [pc, #116]	; (9194 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    9120:	6181      	str	r1, [r0, #24]
    9122:	491d      	ldr	r1, [pc, #116]	; (9198 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    9124:	6301      	str	r1, [r0, #48]	; 0x30
    9126:	491d      	ldr	r1, [pc, #116]	; (919c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    9128:	6201      	str	r1, [r0, #32]
    912a:	491d      	ldr	r1, [pc, #116]	; (91a0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    912c:	64c1      	str	r1, [r0, #76]	; 0x4c
    912e:	491d      	ldr	r1, [pc, #116]	; (91a4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    9130:	6481      	str	r1, [r0, #72]	; 0x48
    9132:	491d      	ldr	r1, [pc, #116]	; (91a8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    9134:	6441      	str	r1, [r0, #68]	; 0x44
    9136:	491d      	ldr	r1, [pc, #116]	; (91ac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    9138:	6341      	str	r1, [r0, #52]	; 0x34
    913a:	491d      	ldr	r1, [pc, #116]	; (91b0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    913c:	61c1      	str	r1, [r0, #28]
    913e:	491d      	ldr	r1, [pc, #116]	; (91b4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    9140:	6241      	str	r1, [r0, #36]	; 0x24
    9142:	481e      	ldr	r0, [pc, #120]	; (91bc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    9144:	491c      	ldr	r1, [pc, #112]	; (91b8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    9146:	6081      	str	r1, [r0, #8]
    9148:	491d      	ldr	r1, [pc, #116]	; (91c0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    914a:	61c1      	str	r1, [r0, #28]
    914c:	491d      	ldr	r1, [pc, #116]	; (91c4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    914e:	6241      	str	r1, [r0, #36]	; 0x24
    9150:	491d      	ldr	r1, [pc, #116]	; (91c8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    9152:	62c1      	str	r1, [r0, #44]	; 0x2c
    9154:	491d      	ldr	r1, [pc, #116]	; (91cc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    9156:	6101      	str	r1, [r0, #16]
    9158:	491d      	ldr	r1, [pc, #116]	; (91d0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    915a:	6141      	str	r1, [r0, #20]
    915c:	491d      	ldr	r1, [pc, #116]	; (91d4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    915e:	6441      	str	r1, [r0, #68]	; 0x44
    9160:	6341      	str	r1, [r0, #52]	; 0x34
    9162:	491d      	ldr	r1, [pc, #116]	; (91d8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    9164:	6181      	str	r1, [r0, #24]
    9166:	491d      	ldr	r1, [pc, #116]	; (91dc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    9168:	6301      	str	r1, [r0, #48]	; 0x30
    916a:	491d      	ldr	r1, [pc, #116]	; (91e0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    916c:	6481      	str	r1, [r0, #72]	; 0x48
    916e:	491d      	ldr	r1, [pc, #116]	; (91e4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    9170:	64c1      	str	r1, [r0, #76]	; 0x4c
    9172:	491d      	ldr	r1, [pc, #116]	; (91e8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    9174:	6381      	str	r1, [r0, #56]	; 0x38
    9176:	4770      	bx	lr
    9178:	0000a8bd 	.word	0x0000a8bd
    917c:	20000160 	.word	0x20000160
    9180:	0000a19d 	.word	0x0000a19d
    9184:	0000a1f9 	.word	0x0000a1f9
    9188:	0000a5e1 	.word	0x0000a5e1
    918c:	0000a625 	.word	0x0000a625
    9190:	0000a2a5 	.word	0x0000a2a5
    9194:	0000a895 	.word	0x0000a895
    9198:	0000a9d5 	.word	0x0000a9d5
    919c:	0000a351 	.word	0x0000a351
    91a0:	0000a5b5 	.word	0x0000a5b5
    91a4:	0000a589 	.word	0x0000a589
    91a8:	0000a855 	.word	0x0000a855
    91ac:	0000a885 	.word	0x0000a885
    91b0:	0000a8f1 	.word	0x0000a8f1
    91b4:	0000a39d 	.word	0x0000a39d
    91b8:	0000ada1 	.word	0x0000ada1
    91bc:	200001c8 	.word	0x200001c8
    91c0:	0000adc9 	.word	0x0000adc9
    91c4:	0000ab59 	.word	0x0000ab59
    91c8:	0000ac31 	.word	0x0000ac31
    91cc:	0000ab2d 	.word	0x0000ab2d
    91d0:	0000ad09 	.word	0x0000ad09
    91d4:	0000acb5 	.word	0x0000acb5
    91d8:	0000ad2d 	.word	0x0000ad2d
    91dc:	0000ae21 	.word	0x0000ae21
    91e0:	0000abe9 	.word	0x0000abe9
    91e4:	0000ac19 	.word	0x0000ac19
    91e8:	0000acd9 	.word	0x0000acd9

000091ec <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    91ec:	4806      	ldr	r0, [pc, #24]	; (9208 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    91ee:	4905      	ldr	r1, [pc, #20]	; (9204 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    91f0:	6581      	str	r1, [r0, #88]	; 0x58
    91f2:	4906      	ldr	r1, [pc, #24]	; (920c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    91f4:	6601      	str	r1, [r0, #96]	; 0x60
    91f6:	4807      	ldr	r0, [pc, #28]	; (9214 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    91f8:	4905      	ldr	r1, [pc, #20]	; (9210 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    91fa:	6581      	str	r1, [r0, #88]	; 0x58
    91fc:	4906      	ldr	r1, [pc, #24]	; (9218 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    91fe:	65c1      	str	r1, [r0, #92]	; 0x5c
    9200:	4770      	bx	lr
    9202:	0000      	.short	0x0000
    9204:	0000a645 	.word	0x0000a645
    9208:	20000160 	.word	0x20000160
    920c:	0000a719 	.word	0x0000a719
    9210:	0000ac5d 	.word	0x0000ac5d
    9214:	200001c8 	.word	0x200001c8
    9218:	0000ac8d 	.word	0x0000ac8d

0000921c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    921c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9220:	2101      	movs	r1, #1
    9222:	4c7d      	ldr	r4, [pc, #500]	; (9418 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    9224:	2500      	movs	r5, #0
    9226:	f361 0207 	bfi	r2, r1, #0, #8
    922a:	8065      	strh	r5, [r4, #2]
    922c:	7065      	strb	r5, [r4, #1]
    922e:	7025      	strb	r5, [r4, #0]
    9230:	60a0      	str	r0, [r4, #8]
    9232:	4690      	mov	r8, r2
    9234:	4606      	mov	r6, r0
    9236:	f880 1113 	strb.w	r1, [r0, #275]	; 0x113
    923a:	8800      	ldrh	r0, [r0, #0]
    923c:	f7fc fb26 	bl	588c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    9240:	b180      	cbz	r0, 9264 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
    9242:	68a0      	ldr	r0, [r4, #8]
    9244:	8800      	ldrh	r0, [r0, #0]
    9246:	f7fc fd73 	bl	5d30 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    924a:	68a0      	ldr	r0, [r4, #8]
    924c:	8800      	ldrh	r0, [r0, #0]
    924e:	f7fc fd17 	bl	5c80 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    9252:	68a0      	ldr	r0, [r4, #8]
    9254:	f8b0 110a 	ldrh.w	r1, [r0, #266]	; 0x10a
    9258:	b1c9      	cbz	r1, 928e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    925a:	3078      	adds	r0, #120	; 0x78
    925c:	f006 fcb3 	bl	fbc6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9260:	b118      	cbz	r0, 926a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e>
    9262:	e014      	b.n	928e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    9264:	f640 31b9 	movw	r1, #3001	; 0xbb9
    9268:	e06c      	b.n	9344 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128>
    926a:	68a0      	ldr	r0, [r4, #8]
    926c:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    9270:	f88d 1000 	strb.w	r1, [sp]
    9274:	9900      	ldr	r1, [sp, #0]
    9276:	9100      	str	r1, [sp, #0]
    9278:	f89d 1000 	ldrb.w	r1, [sp]
    927c:	b139      	cbz	r1, 928e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    927e:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9282:	2301      	movs	r3, #1
    9284:	4619      	mov	r1, r3
    9286:	3078      	adds	r0, #120	; 0x78
    9288:	f005 f95d 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    928c:	b180      	cbz	r0, 92b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94>
    928e:	68a0      	ldr	r0, [r4, #8]
    9290:	3078      	adds	r0, #120	; 0x78
    9292:	f006 fc98 	bl	fbc6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9296:	b128      	cbz	r0, 92a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88>
    9298:	68a0      	ldr	r0, [r4, #8]
    929a:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    929e:	bf00      	nop
    92a0:	f000 fbb4 	bl	9a0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7f0>
    92a4:	68a0      	ldr	r0, [r4, #8]
    92a6:	f890 1115 	ldrb.w	r1, [r0, #277]	; 0x115
    92aa:	b189      	cbz	r1, 92d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb4>
    92ac:	80a5      	strh	r5, [r4, #4]
    92ae:	e01e      	b.n	92ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2>
    92b0:	68a0      	ldr	r0, [r4, #8]
    92b2:	f8a0 50b0 	strh.w	r5, [r0, #176]	; 0xb0
    92b6:	f890 1189 	ldrb.w	r1, [r0, #393]	; 0x189
    92ba:	f880 10fe 	strb.w	r1, [r0, #254]	; 0xfe
    92be:	2100      	movs	r1, #0
    92c0:	2002      	movs	r0, #2
    92c2:	f000 fe43 	bl	9f4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    92c6:	68a0      	ldr	r0, [r4, #8]
    92c8:	f880 5112 	strb.w	r5, [r0, #274]	; 0x112
    92cc:	2002      	movs	r0, #2
    92ce:	e7e7      	b.n	92a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    92d0:	f890 11c8 	ldrb.w	r1, [r0, #456]	; 0x1c8
    92d4:	f88d 1000 	strb.w	r1, [sp]
    92d8:	9900      	ldr	r1, [sp, #0]
    92da:	9100      	str	r1, [sp, #0]
    92dc:	f89d 1000 	ldrb.w	r1, [sp]
    92e0:	b919      	cbnz	r1, 92ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    92e2:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    92e4:	8b02      	ldrh	r2, [r0, #24]
    92e6:	4291      	cmp	r1, r2
    92e8:	d800      	bhi.n	92ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0>
    92ea:	8b01      	ldrh	r1, [r0, #24]
    92ec:	80a1      	strh	r1, [r4, #4]
    92ee:	f8b0 110e 	ldrh.w	r1, [r0, #270]	; 0x10e
    92f2:	1e49      	subs	r1, r1, #1
    92f4:	b28f      	uxth	r7, r1
    92f6:	f8b0 1110 	ldrh.w	r1, [r0, #272]	; 0x110
    92fa:	4439      	add	r1, r7
    92fc:	f8a0 1110 	strh.w	r1, [r0, #272]	; 0x110
    9300:	f830 1fac 	ldrh.w	r1, [r0, #172]!
    9304:	4439      	add	r1, r7
    9306:	8001      	strh	r1, [r0, #0]
    9308:	f001 fdb8 	bl	ae7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c60>
    930c:	b120      	cbz	r0, 9318 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc>
    930e:	68a0      	ldr	r0, [r4, #8]
    9310:	f850 1fa0 	ldr.w	r1, [r0, #160]!
    9314:	4439      	add	r1, r7
    9316:	6001      	str	r1, [r0, #0]
    9318:	68a1      	ldr	r1, [r4, #8]
    931a:	f8b1 010a 	ldrh.w	r0, [r1, #266]	; 0x10a
    931e:	2801      	cmp	r0, #1
    9320:	d802      	bhi.n	9328 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c>
    9322:	1c40      	adds	r0, r0, #1
    9324:	f8a1 010a 	strh.w	r0, [r1, #266]	; 0x10a
    9328:	b10f      	cbz	r7, 932e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x112>
    932a:	f881 511c 	strb.w	r5, [r1, #284]	; 0x11c
    932e:	f881 5112 	strb.w	r5, [r1, #274]	; 0x112
    9332:	f8b1 210e 	ldrh.w	r2, [r1, #270]	; 0x10e
    9336:	f101 0078 	add.w	r0, r1, #120	; 0x78
    933a:	f005 fa86 	bl	e84a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    933e:	b120      	cbz	r0, 934a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e>
    9340:	f640 31fd 	movw	r1, #3069	; 0xbfd
    9344:	2031      	movs	r0, #49	; 0x31
    9346:	f7fb fe71 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    934a:	68a0      	ldr	r0, [r4, #8]
    934c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9350:	290b      	cmp	r1, #11
    9352:	d001      	beq.n	9358 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c>
    9354:	290c      	cmp	r1, #12
    9356:	d119      	bne.n	938c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170>
    9358:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
    935c:	f8b0 31a4 	ldrh.w	r3, [r0, #420]	; 0x1a4
    9360:	1ad2      	subs	r2, r2, r3
    9362:	b212      	sxth	r2, r2
    9364:	2a00      	cmp	r2, #0
    9366:	db11      	blt.n	938c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170>
    9368:	f8d0 11a6 	ldr.w	r1, [r0, #422]	; 0x1a6
    936c:	f8c0 108e 	str.w	r1, [r0, #142]	; 0x8e
    9370:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    9374:	f880 1092 	strb.w	r1, [r0, #146]	; 0x92
    9378:	2103      	movs	r1, #3
    937a:	f7fd fd43 	bl	6e04 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    937e:	68a0      	ldr	r0, [r4, #8]
    9380:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    9384:	21ff      	movs	r1, #255	; 0xff
    9386:	f880 10cc 	strb.w	r1, [r0, #204]	; 0xcc
    938a:	e026      	b.n	93da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be>
    938c:	2924      	cmp	r1, #36	; 0x24
    938e:	d111      	bne.n	93b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198>
    9390:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    9394:	f8b0 21a4 	ldrh.w	r2, [r0, #420]	; 0x1a4
    9398:	1a89      	subs	r1, r1, r2
    939a:	b209      	sxth	r1, r1
    939c:	2900      	cmp	r1, #0
    939e:	db09      	blt.n	93b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198>
    93a0:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    93a4:	f000 fe84 	bl	a0b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe94>
    93a8:	2800      	cmp	r0, #0
    93aa:	68a0      	ldr	r0, [r4, #8]
    93ac:	f880 51be 	strb.w	r5, [r0, #446]	; 0x1be
    93b0:	d029      	beq.n	9406 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ea>
    93b2:	e012      	b.n	93da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be>
    93b4:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    93b8:	2924      	cmp	r1, #36	; 0x24
    93ba:	d001      	beq.n	93c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a4>
    93bc:	2925      	cmp	r1, #37	; 0x25
    93be:	d10c      	bne.n	93da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be>
    93c0:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    93c4:	f8b0 21a4 	ldrh.w	r2, [r0, #420]	; 0x1a4
    93c8:	1a89      	subs	r1, r1, r2
    93ca:	b209      	sxth	r1, r1
    93cc:	2900      	cmp	r1, #0
    93ce:	db04      	blt.n	93da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be>
    93d0:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    93d4:	f000 fe6c 	bl	a0b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe94>
    93d8:	b1a8      	cbz	r0, 9406 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ea>
    93da:	4810      	ldr	r0, [pc, #64]	; (941c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    93dc:	9000      	str	r0, [sp, #0]
    93de:	4b10      	ldr	r3, [pc, #64]	; (9420 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>)
    93e0:	4a10      	ldr	r2, [pc, #64]	; (9424 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x208>)
    93e2:	4631      	mov	r1, r6
    93e4:	4640      	mov	r0, r8
    93e6:	f7fc fd5d 	bl	5ea4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    93ea:	68a0      	ldr	r0, [r4, #8]
    93ec:	2301      	movs	r3, #1
    93ee:	2105      	movs	r1, #5
    93f0:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    93f4:	3078      	adds	r0, #120	; 0x78
    93f6:	f005 f8a6 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    93fa:	2800      	cmp	r0, #0
    93fc:	d009      	beq.n	9412 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f6>
    93fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9402:	f7fc bd49 	b.w	5e98 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    9406:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    940a:	2100      	movs	r1, #0
    940c:	4608      	mov	r0, r1
    940e:	f000 bbd3 	b.w	9bb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x99c>
    9412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9416:	0000      	.short	0x0000
    9418:	2000014c 	.word	0x2000014c
    941c:	00009bb9 	.word	0x00009bb9
    9420:	000096c5 	.word	0x000096c5
    9424:	00009ffd 	.word	0x00009ffd
    9428:	b570      	push	{r4, r5, r6, lr}
    942a:	4c0f      	ldr	r4, [pc, #60]	; (9468 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>)
    942c:	68a5      	ldr	r5, [r4, #8]
    942e:	f895 1085 	ldrb.w	r1, [r5, #133]	; 0x85
    9432:	2920      	cmp	r1, #32
    9434:	d002      	beq.n	943c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x220>
    9436:	2926      	cmp	r1, #38	; 0x26
    9438:	d003      	beq.n	9442 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x226>
    943a:	e011      	b.n	9460 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x244>
    943c:	f000 fe8a 	bl	a154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    9440:	e008      	b.n	9454 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x238>
    9442:	f895 2086 	ldrb.w	r2, [r5, #134]	; 0x86
    9446:	2301      	movs	r3, #1
    9448:	210b      	movs	r1, #11
    944a:	f105 0078 	add.w	r0, r5, #120	; 0x78
    944e:	f005 f87a 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9452:	b138      	cbz	r0, 9464 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x248>
    9454:	68a1      	ldr	r1, [r4, #8]
    9456:	2000      	movs	r0, #0
    9458:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    945c:	f881 00b6 	strb.w	r0, [r1, #182]	; 0xb6
    9460:	2000      	movs	r0, #0
    9462:	bd70      	pop	{r4, r5, r6, pc}
    9464:	202a      	movs	r0, #42	; 0x2a
    9466:	e7e9      	b.n	943c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x220>
    9468:	2000014c 	.word	0x2000014c
    946c:	4804      	ldr	r0, [pc, #16]	; (9480 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>)
    946e:	2100      	movs	r1, #0
    9470:	6880      	ldr	r0, [r0, #8]
    9472:	f820 1fb8 	strh.w	r1, [r0, #184]!
    9476:	7881      	ldrb	r1, [r0, #2]
    9478:	1c49      	adds	r1, r1, #1
    947a:	7081      	strb	r1, [r0, #2]
    947c:	4770      	bx	lr
    947e:	0000      	.short	0x0000
    9480:	2000014c 	.word	0x2000014c
    9484:	4807      	ldr	r0, [pc, #28]	; (94a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x288>)
    9486:	b510      	push	{r4, lr}
    9488:	6881      	ldr	r1, [r0, #8]
    948a:	f811 0fba 	ldrb.w	r0, [r1, #186]!
    948e:	1e40      	subs	r0, r0, #1
    9490:	b240      	sxtb	r0, r0
    9492:	7008      	strb	r0, [r1, #0]
    9494:	2800      	cmp	r0, #0
    9496:	da04      	bge.n	94a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x286>
    9498:	f44f 71c7 	mov.w	r1, #398	; 0x18e
    949c:	2031      	movs	r0, #49	; 0x31
    949e:	f7fb fdc5 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    94a2:	bd10      	pop	{r4, pc}
    94a4:	2000014c 	.word	0x2000014c
    94a8:	491a      	ldr	r1, [pc, #104]	; (9514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>)
    94aa:	b508      	push	{r3, lr}
    94ac:	6889      	ldr	r1, [r1, #8]
    94ae:	f891 2086 	ldrb.w	r2, [r1, #134]	; 0x86
    94b2:	b1b8      	cbz	r0, 94e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c8>
    94b4:	2a10      	cmp	r2, #16
    94b6:	d006      	beq.n	94c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2aa>
    94b8:	2a14      	cmp	r2, #20
    94ba:	d007      	beq.n	94cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b0>
    94bc:	2a15      	cmp	r2, #21
    94be:	d008      	beq.n	94d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b6>
    94c0:	2a1b      	cmp	r2, #27
    94c2:	d122      	bne.n	950a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    94c4:	e008      	b.n	94d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    94c6:	2101      	movs	r1, #1
    94c8:	200b      	movs	r0, #11
    94ca:	e007      	b.n	94dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>
    94cc:	f001 fade 	bl	aa8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1870>
    94d0:	e006      	b.n	94e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
    94d2:	f000 fd59 	bl	9f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    94d6:	e003      	b.n	94e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
    94d8:	2101      	movs	r1, #1
    94da:	2006      	movs	r0, #6
    94dc:	f000 fd36 	bl	9f4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    94e0:	2001      	movs	r0, #1
    94e2:	bd08      	pop	{r3, pc}
    94e4:	2a21      	cmp	r2, #33	; 0x21
    94e6:	d110      	bne.n	950a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    94e8:	f891 01be 	ldrb.w	r0, [r1, #446]	; 0x1be
    94ec:	2802      	cmp	r0, #2
    94ee:	d00e      	beq.n	950e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f2>
    94f0:	f891 01be 	ldrb.w	r0, [r1, #446]	; 0x1be
    94f4:	2801      	cmp	r0, #1
    94f6:	d108      	bne.n	950a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    94f8:	f891 01bf 	ldrb.w	r0, [r1, #447]	; 0x1bf
    94fc:	f88d 0000 	strb.w	r0, [sp]
    9500:	9800      	ldr	r0, [sp, #0]
    9502:	9000      	str	r0, [sp, #0]
    9504:	f89d 0000 	ldrb.w	r0, [sp]
    9508:	b108      	cbz	r0, 950e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f2>
    950a:	2000      	movs	r0, #0
    950c:	bd08      	pop	{r3, pc}
    950e:	2101      	movs	r1, #1
    9510:	2017      	movs	r0, #23
    9512:	e7e3      	b.n	94dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>
    9514:	2000014c 	.word	0x2000014c
    9518:	b538      	push	{r3, r4, r5, lr}
    951a:	2800      	cmp	r0, #0
    951c:	d16d      	bne.n	95fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3de>
    951e:	4c38      	ldr	r4, [pc, #224]	; (9600 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e4>)
    9520:	68a0      	ldr	r0, [r4, #8]
    9522:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    9526:	07ca      	lsls	r2, r1, #31
    9528:	d002      	beq.n	9530 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x314>
    952a:	2101      	movs	r1, #1
    952c:	2009      	movs	r0, #9
    952e:	e05d      	b.n	95ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d0>
    9530:	078a      	lsls	r2, r1, #30
    9532:	d50a      	bpl.n	954a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x32e>
    9534:	2101      	movs	r1, #1
    9536:	200c      	movs	r0, #12
    9538:	f000 fd08 	bl	9f4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    953c:	68a0      	ldr	r0, [r4, #8]
    953e:	f810 1fbe 	ldrb.w	r1, [r0, #190]!
    9542:	f041 0101 	orr.w	r1, r1, #1
    9546:	7001      	strb	r1, [r0, #0]
    9548:	e052      	b.n	95f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d4>
    954a:	074a      	lsls	r2, r1, #29
    954c:	d502      	bpl.n	9554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x338>
    954e:	2101      	movs	r1, #1
    9550:	2013      	movs	r0, #19
    9552:	e04b      	b.n	95ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d0>
    9554:	070a      	lsls	r2, r1, #28
    9556:	d505      	bpl.n	9564 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    9558:	f810 1ff9 	ldrb.w	r1, [r0, #249]!
    955c:	7141      	strb	r1, [r0, #5]
    955e:	2101      	movs	r1, #1
    9560:	2007      	movs	r0, #7
    9562:	e043      	b.n	95ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d0>
    9564:	f011 0f30 	tst.w	r1, #48	; 0x30
    9568:	d047      	beq.n	95fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3de>
    956a:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    956e:	f88d 1000 	strb.w	r1, [sp]
    9572:	9900      	ldr	r1, [sp, #0]
    9574:	9100      	str	r1, [sp, #0]
    9576:	f89d 1000 	ldrb.w	r1, [sp]
    957a:	bbd9      	cbnz	r1, 95f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d8>
    957c:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    9580:	2500      	movs	r5, #0
    9582:	f88d 1000 	strb.w	r1, [sp]
    9586:	9900      	ldr	r1, [sp, #0]
    9588:	9100      	str	r1, [sp, #0]
    958a:	f89d 1000 	ldrb.w	r1, [sp]
    958e:	b1c9      	cbz	r1, 95c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    9590:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9594:	2924      	cmp	r1, #36	; 0x24
    9596:	d02e      	beq.n	95f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3da>
    9598:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    959c:	2924      	cmp	r1, #36	; 0x24
    959e:	d02a      	beq.n	95f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3da>
    95a0:	f05f 0300 	movs.w	r3, #0
    95a4:	f500 72d3 	add.w	r2, r0, #422	; 0x1a6
    95a8:	f500 71da 	add.w	r1, r0, #436	; 0x1b4
    95ac:	f005 fbfc 	bl	eda8 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    95b0:	68a0      	ldr	r0, [r4, #8]
    95b2:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    95b6:	f021 0120 	bic.w	r1, r1, #32
    95ba:	f041 0110 	orr.w	r1, r1, #16
    95be:	7001      	strb	r1, [r0, #0]
    95c0:	f880 512d 	strb.w	r5, [r0, #301]	; 0x12d
    95c4:	68a0      	ldr	r0, [r4, #8]
    95c6:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    95ca:	06c9      	lsls	r1, r1, #27
    95cc:	d515      	bpl.n	95fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3de>
    95ce:	f005 fc06 	bl	edde <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    95d2:	f000 f911 	bl	97f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5dc>
    95d6:	68a0      	ldr	r0, [r4, #8]
    95d8:	f100 0130 	add.w	r1, r0, #48	; 0x30
    95dc:	4602      	mov	r2, r0
    95de:	8bc8      	ldrh	r0, [r1, #30]
    95e0:	f822 0ffe 	strh.w	r0, [r2, #254]!
    95e4:	8c48      	ldrh	r0, [r1, #34]	; 0x22
    95e6:	8050      	strh	r0, [r2, #2]
    95e8:	2101      	movs	r1, #1
    95ea:	2015      	movs	r0, #21
    95ec:	f000 fcae 	bl	9f4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    95f0:	2001      	movs	r0, #1
    95f2:	bd38      	pop	{r3, r4, r5, pc}
    95f4:	e001      	b.n	95fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3de>
    95f6:	2301      	movs	r3, #1
    95f8:	e7d4      	b.n	95a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x388>
    95fa:	2000      	movs	r0, #0
    95fc:	e7f9      	b.n	95f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
    95fe:	0000      	.short	0x0000
    9600:	2000014c 	.word	0x2000014c
    9604:	b570      	push	{r4, r5, r6, lr}
    9606:	460d      	mov	r5, r1
    9608:	4606      	mov	r6, r0
    960a:	f005 fa0f 	bl	ea2c <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    960e:	4604      	mov	r4, r0
    9610:	4630      	mov	r0, r6
    9612:	f005 fa17 	bl	ea44 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    9616:	4629      	mov	r1, r5
    9618:	f000 f81e 	bl	9658 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43c>
    961c:	b1b8      	cbz	r0, 964e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x432>
    961e:	4620      	mov	r0, r4
    9620:	f005 f82a 	bl	e678 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    9624:	0001      	movs	r1, r0
    9626:	d00d      	beq.n	9644 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x428>
    9628:	480a      	ldr	r0, [pc, #40]	; (9654 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>)
    962a:	6880      	ldr	r0, [r0, #8]
    962c:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    9630:	428a      	cmp	r2, r1
    9632:	d007      	beq.n	9644 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x428>
    9634:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    9638:	2901      	cmp	r1, #1
    963a:	d005      	beq.n	9648 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42c>
    963c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    9640:	4220      	tst	r0, r4
    9642:	d004      	beq.n	964e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x432>
    9644:	2001      	movs	r0, #1
    9646:	bd70      	pop	{r4, r5, r6, pc}
    9648:	f890 01c1 	ldrb.w	r0, [r0, #449]	; 0x1c1
    964c:	e7f8      	b.n	9640 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x424>
    964e:	2000      	movs	r0, #0
    9650:	bd70      	pop	{r4, r5, r6, pc}
    9652:	0000      	.short	0x0000
    9654:	2000014c 	.word	0x2000014c
    9658:	b570      	push	{r4, r5, r6, lr}
    965a:	460d      	mov	r5, r1
    965c:	4604      	mov	r4, r0
    965e:	f005 f80b 	bl	e678 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    9662:	b350      	cbz	r0, 96ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    9664:	4916      	ldr	r1, [pc, #88]	; (96c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a4>)
    9666:	6889      	ldr	r1, [r1, #8]
    9668:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
    966c:	4282      	cmp	r2, r0
    966e:	d024      	beq.n	96ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    9670:	f891 31be 	ldrb.w	r3, [r1, #446]	; 0x1be
    9674:	2b01      	cmp	r3, #1
    9676:	d005      	beq.n	9684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x468>
    9678:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
    967c:	4223      	tst	r3, r4
    967e:	d013      	beq.n	96a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48c>
    9680:	b11d      	cbz	r5, 968a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    9682:	e01a      	b.n	96ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    9684:	f891 31c0 	ldrb.w	r3, [r1, #448]	; 0x1c0
    9688:	e7f8      	b.n	967c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
    968a:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    968e:	4221      	tst	r1, r4
    9690:	d113      	bne.n	96ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    9692:	b15a      	cbz	r2, 96ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x490>
    9694:	2a04      	cmp	r2, #4
    9696:	d00e      	beq.n	96b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49a>
    9698:	2804      	cmp	r0, #4
    969a:	d00c      	beq.n	96b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49a>
    969c:	2a08      	cmp	r2, #8
    969e:	d00a      	beq.n	96b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49a>
    96a0:	2808      	cmp	r0, #8
    96a2:	d008      	beq.n	96b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49a>
    96a4:	4282      	cmp	r2, r0
    96a6:	d908      	bls.n	96ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    96a8:	2000      	movs	r0, #0
    96aa:	bd70      	pop	{r4, r5, r6, pc}
    96ac:	f240 1155 	movw	r1, #341	; 0x155
    96b0:	2006      	movs	r0, #6
    96b2:	f7fb fcbb 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96b6:	4282      	cmp	r2, r0
    96b8:	d3f6      	bcc.n	96a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48c>
    96ba:	2001      	movs	r0, #1
    96bc:	bd70      	pop	{r4, r5, r6, pc}
    96be:	0000      	.short	0x0000
    96c0:	2000014c 	.word	0x2000014c
    96c4:	490c      	ldr	r1, [pc, #48]	; (96f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4dc>)
    96c6:	4602      	mov	r2, r0
    96c8:	7848      	ldrb	r0, [r1, #1]
    96ca:	b998      	cbnz	r0, 96f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d8>
    96cc:	4608      	mov	r0, r1
    96ce:	6880      	ldr	r0, [r0, #8]
    96d0:	b142      	cbz	r2, 96e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c8>
    96d2:	7889      	ldrb	r1, [r1, #2]
    96d4:	0709      	lsls	r1, r1, #28
    96d6:	d503      	bpl.n	96e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c4>
    96d8:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
    96dc:	2808      	cmp	r0, #8
    96de:	d009      	beq.n	96f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d8>
    96e0:	2001      	movs	r0, #1
    96e2:	4770      	bx	lr
    96e4:	f100 0130 	add.w	r1, r0, #48	; 0x30
    96e8:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    96ea:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    96ec:	428a      	cmp	r2, r1
    96ee:	d801      	bhi.n	96f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d8>
    96f0:	f7fe bf84 	b.w	85fc <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    96f4:	2000      	movs	r0, #0
    96f6:	4770      	bx	lr
    96f8:	2000014c 	.word	0x2000014c
    96fc:	b538      	push	{r3, r4, r5, lr}
    96fe:	4c3d      	ldr	r4, [pc, #244]	; (97f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d8>)
    9700:	4605      	mov	r5, r0
    9702:	68a0      	ldr	r0, [r4, #8]
    9704:	3078      	adds	r0, #120	; 0x78
    9706:	f006 fa5e 	bl	fbc6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    970a:	2800      	cmp	r0, #0
    970c:	d170      	bne.n	97f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    970e:	2d00      	cmp	r5, #0
    9710:	d16e      	bne.n	97f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    9712:	68a0      	ldr	r0, [r4, #8]
    9714:	2301      	movs	r3, #1
    9716:	4619      	mov	r1, r3
    9718:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    971c:	3078      	adds	r0, #120	; 0x78
    971e:	f004 ff12 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9722:	2800      	cmp	r0, #0
    9724:	d164      	bne.n	97f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    9726:	68a0      	ldr	r0, [r4, #8]
    9728:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    972c:	f88d 1000 	strb.w	r1, [sp]
    9730:	9900      	ldr	r1, [sp, #0]
    9732:	9100      	str	r1, [sp, #0]
    9734:	f89d 2000 	ldrb.w	r2, [sp]
    9738:	2100      	movs	r1, #0
    973a:	b142      	cbz	r2, 974e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x532>
    973c:	f8a0 10b0 	strh.w	r1, [r0, #176]	; 0xb0
    9740:	f890 1189 	ldrb.w	r1, [r0, #393]	; 0x189
    9744:	f880 10fe 	strb.w	r1, [r0, #254]	; 0xfe
    9748:	2100      	movs	r1, #0
    974a:	2002      	movs	r0, #2
    974c:	e045      	b.n	97da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    974e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9752:	2301      	movs	r3, #1
    9754:	2104      	movs	r1, #4
    9756:	3078      	adds	r0, #120	; 0x78
    9758:	f004 fef5 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    975c:	4605      	mov	r5, r0
    975e:	f7ff fedb 	bl	9518 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2fc>
    9762:	2800      	cmp	r0, #0
    9764:	d144      	bne.n	97f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    9766:	4628      	mov	r0, r5
    9768:	f7ff fe9e 	bl	94a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28c>
    976c:	2800      	cmp	r0, #0
    976e:	d13f      	bne.n	97f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    9770:	68a0      	ldr	r0, [r4, #8]
    9772:	2301      	movs	r3, #1
    9774:	2100      	movs	r1, #0
    9776:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    977a:	3078      	adds	r0, #120	; 0x78
    977c:	f004 fee3 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9780:	b178      	cbz	r0, 97a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    9782:	68a0      	ldr	r0, [r4, #8]
    9784:	2301      	movs	r3, #1
    9786:	2104      	movs	r1, #4
    9788:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    978c:	3078      	adds	r0, #120	; 0x78
    978e:	f004 feda 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9792:	b930      	cbnz	r0, 97a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    9794:	68a0      	ldr	r0, [r4, #8]
    9796:	f890 00aa 	ldrb.w	r0, [r0, #170]	; 0xaa
    979a:	b110      	cbz	r0, 97a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    979c:	2100      	movs	r1, #0
    979e:	2012      	movs	r0, #18
    97a0:	e01b      	b.n	97da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    97a2:	68a0      	ldr	r0, [r4, #8]
    97a4:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    97a8:	290a      	cmp	r1, #10
    97aa:	d01a      	beq.n	97e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    97ac:	2d00      	cmp	r5, #0
    97ae:	d11f      	bne.n	97f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    97b0:	f000 fb18 	bl	9de4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc8>
    97b4:	2800      	cmp	r0, #0
    97b6:	d11b      	bne.n	97f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    97b8:	68a0      	ldr	r0, [r4, #8]
    97ba:	2301      	movs	r3, #1
    97bc:	2100      	movs	r1, #0
    97be:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    97c2:	3078      	adds	r0, #120	; 0x78
    97c4:	f004 febf 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    97c8:	2800      	cmp	r0, #0
    97ca:	d011      	beq.n	97f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    97cc:	68a0      	ldr	r0, [r4, #8]
    97ce:	f890 019c 	ldrb.w	r0, [r0, #412]	; 0x19c
    97d2:	2800      	cmp	r0, #0
    97d4:	d00c      	beq.n	97f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    97d6:	2100      	movs	r1, #0
    97d8:	20ff      	movs	r0, #255	; 0xff
    97da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    97de:	f000 bbb5 	b.w	9f4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    97e2:	f810 1ffa 	ldrb.w	r1, [r0, #250]!
    97e6:	7101      	strb	r1, [r0, #4]
    97e8:	2100      	movs	r1, #0
    97ea:	2007      	movs	r0, #7
    97ec:	e7f5      	b.n	97da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    97ee:	e7ff      	b.n	97f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    97f0:	bd38      	pop	{r3, r4, r5, pc}
    97f2:	0000      	.short	0x0000
    97f4:	2000014c 	.word	0x2000014c
    97f8:	480a      	ldr	r0, [pc, #40]	; (9824 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x608>)
    97fa:	b510      	push	{r4, lr}
    97fc:	6881      	ldr	r1, [r0, #8]
    97fe:	f891 0064 	ldrb.w	r0, [r1, #100]	; 0x64
    9802:	2801      	cmp	r0, #1
    9804:	d009      	beq.n	981a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fe>
    9806:	8808      	ldrh	r0, [r1, #0]
    9808:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    980c:	3130      	adds	r1, #48	; 0x30
    980e:	f005 faa7 	bl	ed60 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9816:	f7fd bd3f 	b.w	7298 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    981a:	2002      	movs	r0, #2
    981c:	f881 0064 	strb.w	r0, [r1, #100]	; 0x64
    9820:	bd10      	pop	{r4, pc}
    9822:	0000      	.short	0x0000
    9824:	2000014c 	.word	0x2000014c
    9828:	b570      	push	{r4, r5, r6, lr}
    982a:	4c25      	ldr	r4, [pc, #148]	; (98c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>)
    982c:	0005      	movs	r5, r0
    982e:	d12f      	bne.n	9890 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x674>
    9830:	f000 f8a4 	bl	997c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>
    9834:	f000 f848 	bl	98c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ac>
    9838:	0005      	movs	r5, r0
    983a:	d129      	bne.n	9890 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x674>
    983c:	8860      	ldrh	r0, [r4, #2]
    983e:	0741      	lsls	r1, r0, #29
    9840:	d506      	bpl.n	9850 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x634>
    9842:	68a1      	ldr	r1, [r4, #8]
    9844:	f891 1088 	ldrb.w	r1, [r1, #136]	; 0x88
    9848:	2907      	cmp	r1, #7
    984a:	d101      	bne.n	9850 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x634>
    984c:	2101      	movs	r1, #1
    984e:	7021      	strb	r1, [r4, #0]
    9850:	0780      	lsls	r0, r0, #30
    9852:	d512      	bpl.n	987a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x65e>
    9854:	68e0      	ldr	r0, [r4, #12]
    9856:	78c0      	ldrb	r0, [r0, #3]
    9858:	281a      	cmp	r0, #26
    985a:	d205      	bcs.n	9868 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64c>
    985c:	4919      	ldr	r1, [pc, #100]	; (98c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a8>)
    985e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    9862:	b109      	cbz	r1, 9868 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64c>
    9864:	4788      	blx	r1
    9866:	e008      	b.n	987a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x65e>
    9868:	28ff      	cmp	r0, #255	; 0xff
    986a:	d004      	beq.n	9876 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x65a>
    986c:	f240 7144 	movw	r1, #1860	; 0x744
    9870:	2031      	movs	r0, #49	; 0x31
    9872:	f7fb fbdb 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9876:	f001 f94d 	bl	ab14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f8>
    987a:	78a0      	ldrb	r0, [r4, #2]
    987c:	06c0      	lsls	r0, r0, #27
    987e:	d507      	bpl.n	9890 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x674>
    9880:	68a0      	ldr	r0, [r4, #8]
    9882:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9886:	290b      	cmp	r1, #11
    9888:	d102      	bne.n	9890 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x674>
    988a:	210c      	movs	r1, #12
    988c:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    9890:	7860      	ldrb	r0, [r4, #1]
    9892:	0700      	lsls	r0, r0, #28
    9894:	d511      	bpl.n	98ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69e>
    9896:	68a0      	ldr	r0, [r4, #8]
    9898:	2301      	movs	r3, #1
    989a:	2105      	movs	r1, #5
    989c:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    98a0:	3078      	adds	r0, #120	; 0x78
    98a2:	f004 fe50 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98a6:	b128      	cbz	r0, 98b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    98a8:	68a1      	ldr	r1, [r4, #8]
    98aa:	2508      	movs	r5, #8
    98ac:	2000      	movs	r0, #0
    98ae:	f881 01d4 	strb.w	r0, [r1, #468]	; 0x1d4
    98b2:	e002      	b.n	98ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69e>
    98b4:	2000      	movs	r0, #0
    98b6:	f7fc fbbb 	bl	6030 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    98ba:	4628      	mov	r0, r5
    98bc:	bd70      	pop	{r4, r5, r6, pc}
    98be:	0000      	.short	0x0000
    98c0:	2000014c 	.word	0x2000014c
    98c4:	200001c8 	.word	0x200001c8
    98c8:	b570      	push	{r4, r5, r6, lr}
    98ca:	4c2a      	ldr	r4, [pc, #168]	; (9974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x758>)
    98cc:	2000      	movs	r0, #0
    98ce:	78a1      	ldrb	r1, [r4, #2]
    98d0:	07c9      	lsls	r1, r1, #31
    98d2:	d015      	beq.n	9900 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e4>
    98d4:	6920      	ldr	r0, [r4, #16]
    98d6:	2301      	movs	r3, #1
    98d8:	2105      	movs	r1, #5
    98da:	78c5      	ldrb	r5, [r0, #3]
    98dc:	68a0      	ldr	r0, [r4, #8]
    98de:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    98e2:	3078      	adds	r0, #120	; 0x78
    98e4:	f004 fe2f 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98e8:	b158      	cbz	r0, 9902 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e6>
    98ea:	1ead      	subs	r5, r5, #2
    98ec:	2d0a      	cmp	r5, #10
    98ee:	d206      	bcs.n	98fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e2>
    98f0:	e8df f005 	tbb	[pc, r5]
    98f4:	05050707 	.word	0x05050707
    98f8:	05050707 	.word	0x05050707
    98fc:	0707      	.short	0x0707
    98fe:	2008      	movs	r0, #8
    9900:	bd70      	pop	{r4, r5, r6, pc}
    9902:	6920      	ldr	r0, [r4, #16]
    9904:	f7fd fba4 	bl	7050 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    9908:	b138      	cbz	r0, 991a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
    990a:	6920      	ldr	r0, [r4, #16]
    990c:	78c5      	ldrb	r5, [r0, #3]
    990e:	b145      	cbz	r5, 9922 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    9910:	2d01      	cmp	r5, #1
    9912:	d006      	beq.n	9922 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    9914:	2d16      	cmp	r5, #22
    9916:	d118      	bne.n	994a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    9918:	e003      	b.n	9922 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    991a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    991e:	f000 bd73 	b.w	a408 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11ec>
    9922:	68a0      	ldr	r0, [r4, #8]
    9924:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9928:	f004 fe5b 	bl	e5e2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    992c:	b168      	cbz	r0, 994a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    992e:	68a1      	ldr	r1, [r4, #8]
    9930:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    9934:	281f      	cmp	r0, #31
    9936:	d008      	beq.n	994a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    9938:	2820      	cmp	r0, #32
    993a:	d003      	beq.n	9944 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    993c:	2d16      	cmp	r5, #22
    993e:	d00c      	beq.n	995a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73e>
    9940:	2002      	movs	r0, #2
    9942:	bd70      	pop	{r4, r5, r6, pc}
    9944:	2026      	movs	r0, #38	; 0x26
    9946:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    994a:	2d1a      	cmp	r5, #26
    994c:	d207      	bcs.n	995e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    994e:	480a      	ldr	r0, [pc, #40]	; (9978 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75c>)
    9950:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    9954:	b118      	cbz	r0, 995e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    9956:	4780      	blx	r0
    9958:	e003      	b.n	9962 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x746>
    995a:	2020      	movs	r0, #32
    995c:	bd70      	pop	{r4, r5, r6, pc}
    995e:	f000 fd53 	bl	a408 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11ec>
    9962:	68a2      	ldr	r2, [r4, #8]
    9964:	e9f2 1336 	ldrd	r1, r3, [r2, #216]!	; 0xd8
    9968:	1c49      	adds	r1, r1, #1
    996a:	f143 0300 	adc.w	r3, r3, #0
    996e:	e9c2 1300 	strd	r1, r3, [r2]
    9972:	bd70      	pop	{r4, r5, r6, pc}
    9974:	2000014c 	.word	0x2000014c
    9978:	20000160 	.word	0x20000160
    997c:	b570      	push	{r4, r5, r6, lr}
    997e:	4c22      	ldr	r4, [pc, #136]	; (9a08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ec>)
    9980:	78a0      	ldrb	r0, [r4, #2]
    9982:	0700      	lsls	r0, r0, #28
    9984:	d53e      	bpl.n	9a04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>
    9986:	68a0      	ldr	r0, [r4, #8]
    9988:	3078      	adds	r0, #120	; 0x78
    998a:	f006 f91c 	bl	fbc6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    998e:	b148      	cbz	r0, 99a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>
    9990:	68a0      	ldr	r0, [r4, #8]
    9992:	21fe      	movs	r1, #254	; 0xfe
    9994:	2500      	movs	r5, #0
    9996:	f880 10fc 	strb.w	r1, [r0, #252]	; 0xfc
    999a:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    999e:	2919      	cmp	r1, #25
    99a0:	d10c      	bne.n	99bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7a0>
    99a2:	e004      	b.n	99ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x792>
    99a4:	f240 714e 	movw	r1, #1870	; 0x74e
    99a8:	2031      	movs	r0, #49	; 0x31
    99aa:	f7fb fb3f 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99ae:	f880 50bb 	strb.w	r5, [r0, #187]	; 0xbb
    99b2:	f7ff fd67 	bl	9484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    99b6:	68a0      	ldr	r0, [r4, #8]
    99b8:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    99bc:	68a0      	ldr	r0, [r4, #8]
    99be:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    99c2:	291f      	cmp	r1, #31
    99c4:	d002      	beq.n	99cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b0>
    99c6:	2927      	cmp	r1, #39	; 0x27
    99c8:	d113      	bne.n	99f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7d6>
    99ca:	e00b      	b.n	99e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c8>
    99cc:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    99d0:	f004 fe07 	bl	e5e2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    99d4:	b108      	cbz	r0, 99da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7be>
    99d6:	2026      	movs	r0, #38	; 0x26
    99d8:	e000      	b.n	99dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c0>
    99da:	2020      	movs	r0, #32
    99dc:	68a1      	ldr	r1, [r4, #8]
    99de:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    99e2:	e006      	b.n	99f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7d6>
    99e4:	2101      	movs	r1, #1
    99e6:	f880 119d 	strb.w	r1, [r0, #413]	; 0x19d
    99ea:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    99ee:	f880 50b6 	strb.w	r5, [r0, #182]	; 0xb6
    99f2:	68a0      	ldr	r0, [r4, #8]
    99f4:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    99f8:	2908      	cmp	r1, #8
    99fa:	d103      	bne.n	9a04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>
    99fc:	2102      	movs	r1, #2
    99fe:	7021      	strb	r1, [r4, #0]
    9a00:	f880 10fc 	strb.w	r1, [r0, #252]	; 0xfc
    9a04:	bd70      	pop	{r4, r5, r6, pc}
    9a06:	0000      	.short	0x0000
    9a08:	2000014c 	.word	0x2000014c
    9a0c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    9a0e:	4606      	mov	r6, r0
    9a10:	4668      	mov	r0, sp
    9a12:	f7fc f977 	bl	5d04 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    9a16:	b318      	cbz	r0, 9a60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x844>
    9a18:	2222      	movs	r2, #34	; 0x22
    9a1a:	2100      	movs	r1, #0
    9a1c:	9800      	ldr	r0, [sp, #0]
    9a1e:	f003 fb34 	bl	d08a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9a22:	2103      	movs	r1, #3
    9a24:	9800      	ldr	r0, [sp, #0]
    9a26:	f005 f861 	bl	eaec <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    9a2a:	9800      	ldr	r0, [sp, #0]
    9a2c:	7801      	ldrb	r1, [r0, #0]
    9a2e:	f021 0110 	bic.w	r1, r1, #16
    9a32:	7001      	strb	r1, [r0, #0]
    9a34:	4631      	mov	r1, r6
    9a36:	f7fd fb37 	bl	70a8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    9a3a:	2500      	movs	r5, #0
    9a3c:	4c5d      	ldr	r4, [pc, #372]	; (9bb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x998>)
    9a3e:	f644 172f 	movw	r7, #18735	; 0x492f
    9a42:	2e0e      	cmp	r6, #14
    9a44:	d07e      	beq.n	9b44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>
    9a46:	dc0e      	bgt.n	9a66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84a>
    9a48:	f1a6 0602 	sub.w	r6, r6, #2
    9a4c:	2e0c      	cmp	r6, #12
    9a4e:	d21c      	bcs.n	9a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x86e>
    9a50:	e8df f006 	tbb	[pc, r6]
    9a54:	a5491b1e 	.word	0xa5491b1e
    9a58:	551b1ea5 	.word	0x551b1ea5
    9a5c:	3034a51b 	.word	0x3034a51b
    9a60:	f640 1178 	movw	r1, #2424	; 0x978
    9a64:	e0a1      	b.n	9baa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98e>
    9a66:	2e15      	cmp	r6, #21
    9a68:	d05b      	beq.n	9b22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x906>
    9a6a:	dc08      	bgt.n	9a7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x862>
    9a6c:	2e11      	cmp	r6, #17
    9a6e:	d014      	beq.n	9a9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87e>
    9a70:	2e12      	cmp	r6, #18
    9a72:	d01e      	beq.n	9ab2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x896>
    9a74:	2e13      	cmp	r6, #19
    9a76:	d01c      	beq.n	9ab2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x896>
    9a78:	2e14      	cmp	r6, #20
    9a7a:	d106      	bne.n	9a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x86e>
    9a7c:	e051      	b.n	9b22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x906>
    9a7e:	2e16      	cmp	r6, #22
    9a80:	d027      	beq.n	9ad2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8b6>
    9a82:	2e17      	cmp	r6, #23
    9a84:	d068      	beq.n	9b58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x93c>
    9a86:	2eff      	cmp	r6, #255	; 0xff
    9a88:	d071      	beq.n	9b6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x952>
    9a8a:	f640 11eb 	movw	r1, #2539	; 0x9eb
    9a8e:	e08c      	b.n	9baa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98e>
    9a90:	68a1      	ldr	r1, [r4, #8]
    9a92:	9800      	ldr	r0, [sp, #0]
    9a94:	f891 10fe 	ldrb.w	r1, [r1, #254]	; 0xfe
    9a98:	e00e      	b.n	9ab8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x89c>
    9a9a:	68a0      	ldr	r0, [r4, #8]
    9a9c:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
    9aa0:	9800      	ldr	r0, [sp, #0]
    9aa2:	f004 ffff 	bl	eaa4 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    9aa6:	68a0      	ldr	r0, [r4, #8]
    9aa8:	f890 10ff 	ldrb.w	r1, [r0, #255]	; 0xff
    9aac:	9800      	ldr	r0, [sp, #0]
    9aae:	f004 fffb 	bl	eaa8 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    9ab2:	e074      	b.n	9b9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    9ab4:	9800      	ldr	r0, [sp, #0]
    9ab6:	2106      	movs	r1, #6
    9ab8:	7101      	strb	r1, [r0, #4]
    9aba:	e070      	b.n	9b9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    9abc:	9800      	ldr	r0, [sp, #0]
    9abe:	210c      	movs	r1, #12
    9ac0:	7101      	strb	r1, [r0, #4]
    9ac2:	2159      	movs	r1, #89	; 0x59
    9ac4:	7141      	strb	r1, [r0, #5]
    9ac6:	7185      	strb	r5, [r0, #6]
    9ac8:	2136      	movs	r1, #54	; 0x36
    9aca:	71c1      	strb	r1, [r0, #7]
    9acc:	2111      	movs	r1, #17
    9ace:	7201      	strb	r1, [r0, #8]
    9ad0:	e065      	b.n	9b9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    9ad2:	9800      	ldr	r0, [sp, #0]
    9ad4:	f8d4 1008 	ldr.w	r1, [r4, #8]
    9ad8:	f891 21c0 	ldrb.w	r2, [r1, #448]	; 0x1c0
    9adc:	7102      	strb	r2, [r0, #4]
    9ade:	f891 11c1 	ldrb.w	r1, [r1, #449]	; 0x1c1
    9ae2:	7141      	strb	r1, [r0, #5]
    9ae4:	e05b      	b.n	9b9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    9ae6:	68a1      	ldr	r1, [r4, #8]
    9ae8:	9800      	ldr	r0, [sp, #0]
    9aea:	f501 7194 	add.w	r1, r1, #296	; 0x128
    9aee:	f004 ffee 	bl	eace <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    9af2:	68a1      	ldr	r1, [r4, #8]
    9af4:	9800      	ldr	r0, [sp, #0]
    9af6:	31f4      	adds	r1, #244	; 0xf4
    9af8:	f004 ffe6 	bl	eac8 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    9afc:	e04f      	b.n	9b9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    9afe:	f001 fda9 	bl	b654 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9b02:	4038      	ands	r0, r7
    9b04:	e9cd 0501 	strd	r0, r5, [sp, #4]
    9b08:	68a1      	ldr	r1, [r4, #8]
    9b0a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9b0e:	f891 10c4 	ldrb.w	r1, [r1, #196]	; 0xc4
    9b12:	4008      	ands	r0, r1
    9b14:	f88d 0004 	strb.w	r0, [sp, #4]
    9b18:	a901      	add	r1, sp, #4
    9b1a:	9800      	ldr	r0, [sp, #0]
    9b1c:	f004 ffe1 	bl	eae2 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    9b20:	e03d      	b.n	9b9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    9b22:	68a0      	ldr	r0, [r4, #8]
    9b24:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
    9b28:	9800      	ldr	r0, [sp, #0]
    9b2a:	f004 ffe7 	bl	eafc <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    9b2e:	68a0      	ldr	r0, [r4, #8]
    9b30:	f8b0 1100 	ldrh.w	r1, [r0, #256]	; 0x100
    9b34:	9800      	ldr	r0, [sp, #0]
    9b36:	f004 ffe5 	bl	eb04 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    9b3a:	68a0      	ldr	r0, [r4, #8]
    9b3c:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    9b40:	9800      	ldr	r0, [sp, #0]
    9b42:	e000      	b.n	9b46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x92a>
    9b44:	e014      	b.n	9b70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x954>
    9b46:	f004 ffe1 	bl	eb0c <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    9b4a:	68a0      	ldr	r0, [r4, #8]
    9b4c:	f8b0 10fe 	ldrh.w	r1, [r0, #254]	; 0xfe
    9b50:	9800      	ldr	r0, [sp, #0]
    9b52:	f004 ffdf 	bl	eb14 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    9b56:	e022      	b.n	9b9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    9b58:	68a1      	ldr	r1, [r4, #8]
    9b5a:	f891 01be 	ldrb.w	r0, [r1, #446]	; 0x1be
    9b5e:	2801      	cmp	r0, #1
    9b60:	9800      	ldr	r0, [sp, #0]
    9b62:	d0b9      	beq.n	9ad8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8bc>
    9b64:	f811 2f6a 	ldrb.w	r2, [r1, #106]!
    9b68:	7102      	strb	r2, [r0, #4]
    9b6a:	7849      	ldrb	r1, [r1, #1]
    9b6c:	e7b9      	b.n	9ae2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c6>
    9b6e:	e00e      	b.n	9b8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x972>
    9b70:	9501      	str	r5, [sp, #4]
    9b72:	9502      	str	r5, [sp, #8]
    9b74:	f001 fd6e 	bl	b654 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9b78:	4038      	ands	r0, r7
    9b7a:	f88d 0004 	strb.w	r0, [sp, #4]
    9b7e:	0a00      	lsrs	r0, r0, #8
    9b80:	f88d 0005 	strb.w	r0, [sp, #5]
    9b84:	a901      	add	r1, sp, #4
    9b86:	9800      	ldr	r0, [sp, #0]
    9b88:	f004 ffa6 	bl	ead8 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    9b8c:	e007      	b.n	9b9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    9b8e:	68a0      	ldr	r0, [r4, #8]
    9b90:	f890 219f 	ldrb.w	r2, [r0, #415]	; 0x19f
    9b94:	f8d0 11a0 	ldr.w	r1, [r0, #416]	; 0x1a0
    9b98:	9800      	ldr	r0, [sp, #0]
    9b9a:	f004 ff87 	bl	eaac <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    9b9e:	f7fc f88b 	bl	5cb8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    9ba2:	2800      	cmp	r0, #0
    9ba4:	d104      	bne.n	9bb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x994>
    9ba6:	f640 11ef 	movw	r1, #2543	; 0x9ef
    9baa:	2031      	movs	r0, #49	; 0x31
    9bac:	f7fb fa3e 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9bb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9bb2:	0000      	.short	0x0000
    9bb4:	2000014c 	.word	0x2000014c
    9bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9bbc:	4c88      	ldr	r4, [pc, #544]	; (9de0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc4>)
    9bbe:	4682      	mov	sl, r0
    9bc0:	4689      	mov	r9, r1
    9bc2:	68a0      	ldr	r0, [r4, #8]
    9bc4:	8800      	ldrh	r0, [r0, #0]
    9bc6:	f7fb fe61 	bl	588c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    9bca:	0006      	movs	r6, r0
    9bcc:	d00a      	beq.n	9be4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9c8>
    9bce:	8860      	ldrh	r0, [r4, #2]
    9bd0:	f04f 0500 	mov.w	r5, #0
    9bd4:	05c0      	lsls	r0, r0, #23
    9bd6:	68a0      	ldr	r0, [r4, #8]
    9bd8:	d509      	bpl.n	9bee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    9bda:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
    9bde:	f880 511c 	strb.w	r5, [r0, #284]	; 0x11c
    9be2:	e008      	b.n	9bf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9da>
    9be4:	f640 5197 	movw	r1, #3479	; 0xd97
    9be8:	2031      	movs	r0, #49	; 0x31
    9bea:	f7fb fa1f 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9bee:	f830 1fac 	ldrh.w	r1, [r0, #172]!
    9bf2:	1c49      	adds	r1, r1, #1
    9bf4:	8001      	strh	r1, [r0, #0]
    9bf6:	f001 f941 	bl	ae7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c60>
    9bfa:	f04f 0801 	mov.w	r8, #1
    9bfe:	b328      	cbz	r0, 9c4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    9c00:	8860      	ldrh	r0, [r4, #2]
    9c02:	0500      	lsls	r0, r0, #20
    9c04:	d506      	bpl.n	9c14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    9c06:	68a0      	ldr	r0, [r4, #8]
    9c08:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    9c0c:	b111      	cbz	r1, 9c14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    9c0e:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
    9c12:	e01b      	b.n	9c4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    9c14:	68a0      	ldr	r0, [r4, #8]
    9c16:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    9c1a:	1c49      	adds	r1, r1, #1
    9c1c:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    9c20:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    9c24:	428a      	cmp	r2, r1
    9c26:	d301      	bcc.n	9c2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa10>
    9c28:	1a53      	subs	r3, r2, r1
    9c2a:	e000      	b.n	9c2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa12>
    9c2c:	2300      	movs	r3, #0
    9c2e:	88a7      	ldrh	r7, [r4, #4]
    9c30:	1d7f      	adds	r7, r7, #5
    9c32:	42bb      	cmp	r3, r7
    9c34:	d801      	bhi.n	9c3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1e>
    9c36:	f880 80aa 	strb.w	r8, [r0, #170]	; 0xaa
    9c3a:	4291      	cmp	r1, r2
    9c3c:	d306      	bcc.n	9c4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    9c3e:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
    9c42:	21ff      	movs	r1, #255	; 0xff
    9c44:	f880 120a 	strb.w	r1, [r0, #522]	; 0x20a
    9c48:	f7fd fb26 	bl	7298 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9c4c:	8860      	ldrh	r0, [r4, #2]
    9c4e:	f04f 0702 	mov.w	r7, #2
    9c52:	f410 7f40 	tst.w	r0, #768	; 0x300
    9c56:	d00e      	beq.n	9c76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    9c58:	68a0      	ldr	r0, [r4, #8]
    9c5a:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    9c5e:	b111      	cbz	r1, 9c66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4a>
    9c60:	2903      	cmp	r1, #3
    9c62:	d108      	bne.n	9c76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    9c64:	e002      	b.n	9c6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa50>
    9c66:	f880 8089 	strb.w	r8, [r0, #137]	; 0x89
    9c6a:	e001      	b.n	9c70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa54>
    9c6c:	f880 7089 	strb.w	r7, [r0, #137]	; 0x89
    9c70:	2101      	movs	r1, #1
    9c72:	f7fe fce9 	bl	8648 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9c76:	68a0      	ldr	r0, [r4, #8]
    9c78:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    9c7c:	2901      	cmp	r1, #1
    9c7e:	d104      	bne.n	9c8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6e>
    9c80:	8861      	ldrh	r1, [r4, #2]
    9c82:	0549      	lsls	r1, r1, #21
    9c84:	d501      	bpl.n	9c8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6e>
    9c86:	f880 7089 	strb.w	r7, [r0, #137]	; 0x89
    9c8a:	f1ba 0f00 	cmp.w	sl, #0
    9c8e:	d176      	bne.n	9d7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    9c90:	78a1      	ldrb	r1, [r4, #2]
    9c92:	0649      	lsls	r1, r1, #25
    9c94:	d502      	bpl.n	9c9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa80>
    9c96:	f8a0 5130 	strh.w	r5, [r0, #304]	; 0x130
    9c9a:	e004      	b.n	9ca6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa8a>
    9c9c:	f8b0 1130 	ldrh.w	r1, [r0, #304]	; 0x130
    9ca0:	1c49      	adds	r1, r1, #1
    9ca2:	f8a0 1130 	strh.w	r1, [r0, #304]	; 0x130
    9ca6:	4648      	mov	r0, r9
    9ca8:	f7ff fdbe 	bl	9828 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x60c>
    9cac:	ea40 0009 	orr.w	r0, r0, r9
    9cb0:	4681      	mov	r9, r0
    9cb2:	f7ff fd23 	bl	96fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e0>
    9cb6:	68a7      	ldr	r7, [r4, #8]
    9cb8:	f8b7 0110 	ldrh.w	r0, [r7, #272]	; 0x110
    9cbc:	1c40      	adds	r0, r0, #1
    9cbe:	f8a7 0110 	strh.w	r0, [r7, #272]	; 0x110
    9cc2:	f897 0114 	ldrb.w	r0, [r7, #276]	; 0x114
    9cc6:	b128      	cbz	r0, 9cd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xab8>
    9cc8:	f7fc fa1e 	bl	6108 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    9ccc:	b1b0      	cbz	r0, 9cfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae0>
    9cce:	f8a7 5110 	strh.w	r5, [r7, #272]	; 0x110
    9cd2:	e013      	b.n	9cfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae0>
    9cd4:	f7fc f898 	bl	5e08 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    9cd8:	b108      	cbz	r0, 9cde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac2>
    9cda:	f8a7 5110 	strh.w	r5, [r7, #272]	; 0x110
    9cde:	f7fc f88d 	bl	5dfc <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    9ce2:	b158      	cbz	r0, 9cfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae0>
    9ce4:	f897 011c 	ldrb.w	r0, [r7, #284]	; 0x11c
    9ce8:	1c40      	adds	r0, r0, #1
    9cea:	b2c0      	uxtb	r0, r0
    9cec:	f887 011c 	strb.w	r0, [r7, #284]	; 0x11c
    9cf0:	2802      	cmp	r0, #2
    9cf2:	d903      	bls.n	9cfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae0>
    9cf4:	f8a7 5110 	strh.w	r5, [r7, #272]	; 0x110
    9cf8:	f887 511c 	strb.w	r5, [r7, #284]	; 0x11c
    9cfc:	68a0      	ldr	r0, [r4, #8]
    9cfe:	2301      	movs	r3, #1
    9d00:	2100      	movs	r1, #0
    9d02:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9d06:	3078      	adds	r0, #120	; 0x78
    9d08:	f004 fc1d 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d0c:	b920      	cbnz	r0, 9d18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xafc>
    9d0e:	68a0      	ldr	r0, [r4, #8]
    9d10:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9d14:	280c      	cmp	r0, #12
    9d16:	d15f      	bne.n	9dd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>
    9d18:	68a0      	ldr	r0, [r4, #8]
    9d1a:	2301      	movs	r3, #1
    9d1c:	2100      	movs	r1, #0
    9d1e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9d22:	3078      	adds	r0, #120	; 0x78
    9d24:	f004 fc0f 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d28:	b350      	cbz	r0, 9d80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    9d2a:	68a0      	ldr	r0, [r4, #8]
    9d2c:	2301      	movs	r3, #1
    9d2e:	2100      	movs	r1, #0
    9d30:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9d34:	3078      	adds	r0, #120	; 0x78
    9d36:	f004 fc06 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d3a:	b308      	cbz	r0, 9d80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    9d3c:	68a0      	ldr	r0, [r4, #8]
    9d3e:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    9d42:	2902      	cmp	r1, #2
    9d44:	d148      	bne.n	9dd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>
    9d46:	f890 011c 	ldrb.w	r0, [r0, #284]	; 0x11c
    9d4a:	b9c8      	cbnz	r0, 9d80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    9d4c:	4630      	mov	r0, r6
    9d4e:	f003 fe91 	bl	da74 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    9d52:	b1a8      	cbz	r0, 9d80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    9d54:	68a0      	ldr	r0, [r4, #8]
    9d56:	3078      	adds	r0, #120	; 0x78
    9d58:	f005 ff35 	bl	fbc6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9d5c:	b980      	cbnz	r0, 9d80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    9d5e:	68a1      	ldr	r1, [r4, #8]
    9d60:	f8b1 010a 	ldrh.w	r0, [r1, #266]	; 0x10a
    9d64:	2801      	cmp	r0, #1
    9d66:	d937      	bls.n	9dd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>
    9d68:	f881 8112 	strb.w	r8, [r1, #274]	; 0x112
    9d6c:	f8b1 20ae 	ldrh.w	r2, [r1, #174]	; 0xae
    9d70:	f8b1 00ac 	ldrh.w	r0, [r1, #172]	; 0xac
    9d74:	1e93      	subs	r3, r2, #2
    9d76:	4298      	cmp	r0, r3
    9d78:	db03      	blt.n	9d82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb66>
    9d7a:	2001      	movs	r0, #1
    9d7c:	e004      	b.n	9d88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    9d7e:	e01d      	b.n	9dbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba0>
    9d80:	e02a      	b.n	9dd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>
    9d82:	1a10      	subs	r0, r2, r0
    9d84:	1e40      	subs	r0, r0, #1
    9d86:	b280      	uxth	r0, r0
    9d88:	f8b1 2110 	ldrh.w	r2, [r1, #272]	; 0x110
    9d8c:	88a3      	ldrh	r3, [r4, #4]
    9d8e:	429a      	cmp	r2, r3
    9d90:	d301      	bcc.n	9d96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb7a>
    9d92:	2201      	movs	r2, #1
    9d94:	e002      	b.n	9d9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    9d96:	1a9a      	subs	r2, r3, r2
    9d98:	1c52      	adds	r2, r2, #1
    9d9a:	b292      	uxth	r2, r2
    9d9c:	4290      	cmp	r0, r2
    9d9e:	d900      	bls.n	9da2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb86>
    9da0:	4610      	mov	r0, r2
    9da2:	2801      	cmp	r0, #1
    9da4:	d102      	bne.n	9dac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb90>
    9da6:	bf00      	nop
    9da8:	f881 5112 	strb.w	r5, [r1, #274]	; 0x112
    9dac:	68a1      	ldr	r1, [r4, #8]
    9dae:	f8b1 207c 	ldrh.w	r2, [r1, #124]	; 0x7c
    9db2:	4410      	add	r0, r2
    9db4:	f8a1 010c 	strh.w	r0, [r1, #268]	; 0x10c
    9db8:	f001 f92c 	bl	b014 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1df8>
    9dbc:	78a0      	ldrb	r0, [r4, #2]
    9dbe:	464a      	mov	r2, r9
    9dc0:	f3c0 1180 	ubfx	r1, r0, #6, #1
    9dc4:	4650      	mov	r0, sl
    9dc6:	f001 f86d 	bl	aea4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c88>
    9dca:	68a0      	ldr	r0, [r4, #8]
    9dcc:	f880 5113 	strb.w	r5, [r0, #275]	; 0x113
    9dd0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9dd4:	f7fb bf5a 	b.w	5c8c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    9dd8:	2001      	movs	r0, #1
    9dda:	68a1      	ldr	r1, [r4, #8]
    9ddc:	e7e4      	b.n	9da8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb8c>
    9dde:	0000      	.short	0x0000
    9de0:	2000014c 	.word	0x2000014c
    9de4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9de6:	4c58      	ldr	r4, [pc, #352]	; (9f48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>)
    9de8:	2301      	movs	r3, #1
    9dea:	2100      	movs	r1, #0
    9dec:	68a0      	ldr	r0, [r4, #8]
    9dee:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9df2:	3078      	adds	r0, #120	; 0x78
    9df4:	f004 fba7 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9df8:	2800      	cmp	r0, #0
    9dfa:	d07d      	beq.n	9ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcdc>
    9dfc:	68a0      	ldr	r0, [r4, #8]
    9dfe:	f890 11c5 	ldrb.w	r1, [r0, #453]	; 0x1c5
    9e02:	2500      	movs	r5, #0
    9e04:	b139      	cbz	r1, 9e16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbfa>
    9e06:	2100      	movs	r1, #0
    9e08:	200e      	movs	r0, #14
    9e0a:	f000 f89f 	bl	9f4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9e0e:	68a0      	ldr	r0, [r4, #8]
    9e10:	f880 51c5 	strb.w	r5, [r0, #453]	; 0x1c5
    9e14:	e095      	b.n	9f42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd26>
    9e16:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    9e1a:	b119      	cbz	r1, 9e24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc08>
    9e1c:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    9e20:	0789      	lsls	r1, r1, #30
    9e22:	d016      	beq.n	9e52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc36>
    9e24:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    9e28:	f88d 1004 	strb.w	r1, [sp, #4]
    9e2c:	9901      	ldr	r1, [sp, #4]
    9e2e:	9101      	str	r1, [sp, #4]
    9e30:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9e34:	b141      	cbz	r1, 9e48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc2c>
    9e36:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    9e3a:	f88d 1000 	strb.w	r1, [sp]
    9e3e:	9900      	ldr	r1, [sp, #0]
    9e40:	9100      	str	r1, [sp, #0]
    9e42:	f89d 1000 	ldrb.w	r1, [sp]
    9e46:	b189      	cbz	r1, 9e6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc50>
    9e48:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    9e4c:	2901      	cmp	r1, #1
    9e4e:	d02f      	beq.n	9eb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc94>
    9e50:	e071      	b.n	9f36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1a>
    9e52:	2100      	movs	r1, #0
    9e54:	200c      	movs	r0, #12
    9e56:	f000 f879 	bl	9f4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9e5a:	68a0      	ldr	r0, [r4, #8]
    9e5c:	f810 1fbe 	ldrb.w	r1, [r0, #190]!
    9e60:	f041 0101 	orr.w	r1, r1, #1
    9e64:	7001      	strb	r1, [r0, #0]
    9e66:	f880 5106 	strb.w	r5, [r0, #262]	; 0x106
    9e6a:	e06a      	b.n	9f42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd26>
    9e6c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9e70:	2924      	cmp	r1, #36	; 0x24
    9e72:	d01b      	beq.n	9eac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc90>
    9e74:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9e78:	2924      	cmp	r1, #36	; 0x24
    9e7a:	d017      	beq.n	9eac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc90>
    9e7c:	f05f 0300 	movs.w	r3, #0
    9e80:	f500 72d3 	add.w	r2, r0, #422	; 0x1a6
    9e84:	f500 71da 	add.w	r1, r0, #436	; 0x1b4
    9e88:	f004 ff8e 	bl	eda8 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9e8c:	68a0      	ldr	r0, [r4, #8]
    9e8e:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    9e92:	2100      	movs	r1, #0
    9e94:	2014      	movs	r0, #20
    9e96:	f000 f859 	bl	9f4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9e9a:	68a1      	ldr	r1, [r4, #8]
    9e9c:	f101 0030 	add.w	r0, r1, #48	; 0x30
    9ea0:	8bc2      	ldrh	r2, [r0, #30]
    9ea2:	f821 2ffe 	strh.w	r2, [r1, #254]!
    9ea6:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9ea8:	8048      	strh	r0, [r1, #2]
    9eaa:	e04a      	b.n	9f42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd26>
    9eac:	2301      	movs	r3, #1
    9eae:	e7e7      	b.n	9e80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc64>
    9eb0:	f890 11bf 	ldrb.w	r1, [r0, #447]	; 0x1bf
    9eb4:	f88d 1000 	strb.w	r1, [sp]
    9eb8:	9900      	ldr	r1, [sp, #0]
    9eba:	9100      	str	r1, [sp, #0]
    9ebc:	f89d 1000 	ldrb.w	r1, [sp]
    9ec0:	bb31      	cbnz	r1, 9f10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf4>
    9ec2:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9ec6:	2301      	movs	r3, #1
    9ec8:	210b      	movs	r1, #11
    9eca:	3078      	adds	r0, #120	; 0x78
    9ecc:	f004 fb3b 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ed0:	b9f0      	cbnz	r0, 9f10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf4>
    9ed2:	68a0      	ldr	r0, [r4, #8]
    9ed4:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    9ed8:	f005 fe7d 	bl	fbd6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9edc:	4605      	mov	r5, r0
    9ede:	68a0      	ldr	r0, [r4, #8]
    9ee0:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    9ee4:	f005 fe77 	bl	fbd6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9ee8:	4606      	mov	r6, r0
    9eea:	68a0      	ldr	r0, [r4, #8]
    9eec:	f890 11c0 	ldrb.w	r1, [r0, #448]	; 0x1c0
    9ef0:	4628      	mov	r0, r5
    9ef2:	f005 fe7b 	bl	fbec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    9ef6:	e000      	b.n	9efa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcde>
    9ef8:	e01e      	b.n	9f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1c>
    9efa:	b150      	cbz	r0, 9f12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf6>
    9efc:	68a0      	ldr	r0, [r4, #8]
    9efe:	f890 11c1 	ldrb.w	r1, [r0, #449]	; 0x1c1
    9f02:	4630      	mov	r0, r6
    9f04:	f005 fe72 	bl	fbec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    9f08:	b118      	cbz	r0, 9f12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf6>
    9f0a:	2000      	movs	r0, #0
    9f0c:	f000 f922 	bl	a154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    9f10:	e011      	b.n	9f36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1a>
    9f12:	68a0      	ldr	r0, [r4, #8]
    9f14:	2301      	movs	r3, #1
    9f16:	2103      	movs	r1, #3
    9f18:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9f1c:	3078      	adds	r0, #120	; 0x78
    9f1e:	f004 fb12 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f22:	b940      	cbnz	r0, 9f36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1a>
    9f24:	68a0      	ldr	r0, [r4, #8]
    9f26:	2301      	movs	r3, #1
    9f28:	2102      	movs	r1, #2
    9f2a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9f2e:	3078      	adds	r0, #120	; 0x78
    9f30:	f004 fb09 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f34:	b108      	cbz	r0, 9f3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1e>
    9f36:	2000      	movs	r0, #0
    9f38:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9f3a:	2100      	movs	r1, #0
    9f3c:	2016      	movs	r0, #22
    9f3e:	f000 f805 	bl	9f4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9f42:	2001      	movs	r0, #1
    9f44:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9f46:	0000      	.short	0x0000
    9f48:	2000014c 	.word	0x2000014c
    9f4c:	b570      	push	{r4, r5, r6, lr}
    9f4e:	4c0d      	ldr	r4, [pc, #52]	; (9f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd68>)
    9f50:	4606      	mov	r6, r0
    9f52:	460d      	mov	r5, r1
    9f54:	68a0      	ldr	r0, [r4, #8]
    9f56:	3078      	adds	r0, #120	; 0x78
    9f58:	f005 fe35 	bl	fbc6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9f5c:	b120      	cbz	r0, 9f68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9f5e:	f640 2102 	movw	r1, #2562	; 0xa02
    9f62:	2031      	movs	r0, #49	; 0x31
    9f64:	f7fb f862 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f68:	68a2      	ldr	r2, [r4, #8]
    9f6a:	2000      	movs	r0, #0
    9f6c:	f882 60fc 	strb.w	r6, [r2, #252]	; 0xfc
    9f70:	b115      	cbz	r5, 9f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd5c>
    9f72:	f8a2 00b8 	strh.w	r0, [r2, #184]	; 0xb8
    9f76:	bd70      	pop	{r4, r5, r6, pc}
    9f78:	f822 0fb2 	strh.w	r0, [r2, #178]!
    9f7c:	2001      	movs	r0, #1
    9f7e:	7110      	strb	r0, [r2, #4]
    9f80:	bd70      	pop	{r4, r5, r6, pc}
    9f82:	0000      	.short	0x0000
    9f84:	2000014c 	.word	0x2000014c
    9f88:	b570      	push	{r4, r5, r6, lr}
    9f8a:	4c1b      	ldr	r4, [pc, #108]	; (9ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xddc>)
    9f8c:	2500      	movs	r5, #0
    9f8e:	68a0      	ldr	r0, [r4, #8]
    9f90:	f890 118b 	ldrb.w	r1, [r0, #395]	; 0x18b
    9f94:	2901      	cmp	r1, #1
    9f96:	d00a      	beq.n	9fae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd92>
    9f98:	2902      	cmp	r1, #2
    9f9a:	d12c      	bne.n	9ff6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdda>
    9f9c:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    9fa0:	2206      	movs	r2, #6
    9fa2:	b1a1      	cbz	r1, 9fce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdb2>
    9fa4:	f880 20fe 	strb.w	r2, [r0, #254]	; 0xfe
    9fa8:	2101      	movs	r1, #1
    9faa:	2002      	movs	r0, #2
    9fac:	e01e      	b.n	9fec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    9fae:	f890 11d4 	ldrb.w	r1, [r0, #468]	; 0x1d4
    9fb2:	2900      	cmp	r1, #0
    9fb4:	d11f      	bne.n	9ff6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdda>
    9fb6:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
    9fba:	f500 7190 	add.w	r1, r0, #288	; 0x120
    9fbe:	2200      	movs	r2, #0
    9fc0:	f500 70c6 	add.w	r0, r0, #396	; 0x18c
    9fc4:	f004 fa77 	bl	e4b6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    9fc8:	2101      	movs	r1, #1
    9fca:	2005      	movs	r0, #5
    9fcc:	e00e      	b.n	9fec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    9fce:	21c4      	movs	r1, #196	; 0xc4
    9fd0:	5c09      	ldrb	r1, [r1, r0]
    9fd2:	0889      	lsrs	r1, r1, #2
    9fd4:	f011 0f01 	tst.w	r1, #1
    9fd8:	d005      	beq.n	9fe6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdca>
    9fda:	2311      	movs	r3, #17
    9fdc:	2103      	movs	r1, #3
    9fde:	f800 1ffe 	strb.w	r1, [r0, #254]!
    9fe2:	7042      	strb	r2, [r0, #1]
    9fe4:	e000      	b.n	9fe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdcc>
    9fe6:	230d      	movs	r3, #13
    9fe8:	2101      	movs	r1, #1
    9fea:	4618      	mov	r0, r3
    9fec:	f7ff ffae 	bl	9f4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9ff0:	68a0      	ldr	r0, [r4, #8]
    9ff2:	f880 518b 	strb.w	r5, [r0, #395]	; 0x18b
    9ff6:	bd70      	pop	{r4, r5, r6, pc}
    9ff8:	2000014c 	.word	0x2000014c
    9ffc:	b570      	push	{r4, r5, r6, lr}
    9ffe:	4a2b      	ldr	r2, [pc, #172]	; (a0ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe90>)
    a000:	4603      	mov	r3, r0
    a002:	8850      	ldrh	r0, [r2, #2]
    a004:	4318      	orrs	r0, r3
    a006:	8050      	strh	r0, [r2, #2]
    a008:	4610      	mov	r0, r2
    a00a:	2b40      	cmp	r3, #64	; 0x40
    a00c:	6880      	ldr	r0, [r0, #8]
    a00e:	d00d      	beq.n	a02c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe10>
    a010:	079e      	lsls	r6, r3, #30
    a012:	f04f 0500 	mov.w	r5, #0
    a016:	f04f 0401 	mov.w	r4, #1
    a01a:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    a01e:	d50c      	bpl.n	a03a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1e>
    a020:	b14e      	cbz	r6, a036 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1a>
    a022:	f640 5104 	movw	r1, #3332	; 0xd04
    a026:	2031      	movs	r0, #49	; 0x31
    a028:	f7fb f800 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a02c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a030:	2104      	movs	r1, #4
    a032:	f7fe bb09 	b.w	8648 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a036:	60d1      	str	r1, [r2, #12]
    a038:	e01c      	b.n	a074 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe58>
    a03a:	b1c6      	cbz	r6, a06e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    a03c:	6111      	str	r1, [r2, #16]
    a03e:	78c9      	ldrb	r1, [r1, #3]
    a040:	2906      	cmp	r1, #6
    a042:	d002      	beq.n	a04a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe2e>
    a044:	290b      	cmp	r1, #11
    a046:	d112      	bne.n	a06e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    a048:	e009      	b.n	a05e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe42>
    a04a:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a04e:	2917      	cmp	r1, #23
    a050:	d10d      	bne.n	a06e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    a052:	2100      	movs	r1, #0
    a054:	e9c0 1134 	strd	r1, r1, [r0, #208]	; 0xd0
    a058:	f880 408a 	strb.w	r4, [r0, #138]	; 0x8a
    a05c:	e007      	b.n	a06e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    a05e:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a062:	2911      	cmp	r1, #17
    a064:	d103      	bne.n	a06e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    a066:	f880 508a 	strb.w	r5, [r0, #138]	; 0x8a
    a06a:	f880 40bc 	strb.w	r4, [r0, #188]	; 0xbc
    a06e:	0799      	lsls	r1, r3, #30
    a070:	d516      	bpl.n	a0a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    a072:	68d1      	ldr	r1, [r2, #12]
    a074:	78c9      	ldrb	r1, [r1, #3]
    a076:	2905      	cmp	r1, #5
    a078:	d002      	beq.n	a080 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe64>
    a07a:	290b      	cmp	r1, #11
    a07c:	d110      	bne.n	a0a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    a07e:	e009      	b.n	a094 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe78>
    a080:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a084:	2915      	cmp	r1, #21
    a086:	d10b      	bne.n	a0a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    a088:	2100      	movs	r1, #0
    a08a:	e9e0 1136 	strd	r1, r1, [r0, #216]!	; 0xd8
    a08e:	f800 4c4d 	strb.w	r4, [r0, #-77]
    a092:	e005      	b.n	a0a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    a094:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a098:	2910      	cmp	r1, #16
    a09a:	d101      	bne.n	a0a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    a09c:	f880 508b 	strb.w	r5, [r0, #139]	; 0x8b
    a0a0:	0698      	lsls	r0, r3, #26
    a0a2:	d501      	bpl.n	a0a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    a0a4:	2008      	movs	r0, #8
    a0a6:	7050      	strb	r0, [r2, #1]
    a0a8:	bd70      	pop	{r4, r5, r6, pc}
    a0aa:	0000      	.short	0x0000
    a0ac:	2000014c 	.word	0x2000014c
    a0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0b4:	4c26      	ldr	r4, [pc, #152]	; (a150 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf34>)
    a0b6:	2501      	movs	r5, #1
    a0b8:	68a2      	ldr	r2, [r4, #8]
    a0ba:	f892 01a6 	ldrb.w	r0, [r2, #422]	; 0x1a6
    a0be:	b108      	cbz	r0, a0c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea8>
    a0c0:	2601      	movs	r6, #1
    a0c2:	e000      	b.n	a0c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeaa>
    a0c4:	2600      	movs	r6, #0
    a0c6:	f892 11a7 	ldrb.w	r1, [r2, #423]	; 0x1a7
    a0ca:	b109      	cbz	r1, a0d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb4>
    a0cc:	2701      	movs	r7, #1
    a0ce:	e000      	b.n	a0d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb6>
    a0d0:	2700      	movs	r7, #0
    a0d2:	b90e      	cbnz	r6, a0d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xebc>
    a0d4:	f892 006e 	ldrb.w	r0, [r2, #110]	; 0x6e
    a0d8:	b90f      	cbnz	r7, a0de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xec2>
    a0da:	f892 106f 	ldrb.w	r1, [r2, #111]	; 0x6f
    a0de:	f102 0366 	add.w	r3, r2, #102	; 0x66
    a0e2:	7218      	strb	r0, [r3, #8]
    a0e4:	7259      	strb	r1, [r3, #9]
    a0e6:	20ff      	movs	r0, #255	; 0xff
    a0e8:	7298      	strb	r0, [r3, #10]
    a0ea:	f892 01be 	ldrb.w	r0, [r2, #446]	; 0x1be
    a0ee:	2801      	cmp	r0, #1
    a0f0:	d001      	beq.n	a0f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeda>
    a0f2:	b906      	cbnz	r6, a0f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeda>
    a0f4:	b117      	cbz	r7, a0fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee0>
    a0f6:	2000      	movs	r0, #0
    a0f8:	f000 f82c 	bl	a154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    a0fc:	68a0      	ldr	r0, [r4, #8]
    a0fe:	3030      	adds	r0, #48	; 0x30
    a100:	f004 fec3 	bl	ee8a <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    a104:	4606      	mov	r6, r0
    a106:	2105      	movs	r1, #5
    a108:	68a0      	ldr	r0, [r4, #8]
    a10a:	f7fe fa9d 	bl	8648 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a10e:	68a0      	ldr	r0, [r4, #8]
    a110:	3030      	adds	r0, #48	; 0x30
    a112:	f004 feba 	bl	ee8a <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    a116:	4607      	mov	r7, r0
    a118:	42be      	cmp	r6, r7
    a11a:	d20a      	bcs.n	a132 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf16>
    a11c:	f7f8 fb72 	bl	2804 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    a120:	4601      	mov	r1, r0
    a122:	1bb8      	subs	r0, r7, r6
    a124:	2865      	cmp	r0, #101	; 0x65
    a126:	d200      	bcs.n	a12a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0e>
    a128:	2065      	movs	r0, #101	; 0x65
    a12a:	f7f8 faa3 	bl	2674 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    a12e:	b100      	cbz	r0, a132 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf16>
    a130:	2500      	movs	r5, #0
    a132:	68a0      	ldr	r0, [r4, #8]
    a134:	f004 fe53 	bl	edde <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a138:	b130      	cbz	r0, a148 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf2c>
    a13a:	68a1      	ldr	r1, [r4, #8]
    a13c:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    a140:	8808      	ldrh	r0, [r1, #0]
    a142:	3130      	adds	r1, #48	; 0x30
    a144:	f004 fe0c 	bl	ed60 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    a148:	4628      	mov	r0, r5
    a14a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a14e:	0000      	.short	0x0000
    a150:	2000014c 	.word	0x2000014c
    a154:	b510      	push	{r4, lr}
    a156:	4c10      	ldr	r4, [pc, #64]	; (a198 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf7c>)
    a158:	68a1      	ldr	r1, [r4, #8]
    a15a:	880a      	ldrh	r2, [r1, #0]
    a15c:	f8a1 2216 	strh.w	r2, [r1, #534]	; 0x216
    a160:	f881 0214 	strb.w	r0, [r1, #532]	; 0x214
    a164:	f891 006e 	ldrb.w	r0, [r1, #110]	; 0x6e
    a168:	f005 fd35 	bl	fbd6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    a16c:	68a1      	ldr	r1, [r4, #8]
    a16e:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
    a172:	f891 006f 	ldrb.w	r0, [r1, #111]	; 0x6f
    a176:	f005 fd2e 	bl	fbd6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    a17a:	68a2      	ldr	r2, [r4, #8]
    a17c:	f202 2112 	addw	r1, r2, #530	; 0x212
    a180:	f882 0219 	strb.w	r0, [r2, #537]	; 0x219
    a184:	20ff      	movs	r0, #255	; 0xff
    a186:	7008      	strb	r0, [r1, #0]
    a188:	2000      	movs	r0, #0
    a18a:	f882 01be 	strb.w	r0, [r2, #446]	; 0x1be
    a18e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a192:	f7fd b881 	b.w	7298 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a196:	0000      	.short	0x0000
    a198:	2000014c 	.word	0x2000014c
    a19c:	b510      	push	{r4, lr}
    a19e:	4c15      	ldr	r4, [pc, #84]	; (a1f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd8>)
    a1a0:	2301      	movs	r3, #1
    a1a2:	2100      	movs	r1, #0
    a1a4:	68a0      	ldr	r0, [r4, #8]
    a1a6:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a1aa:	3078      	adds	r0, #120	; 0x78
    a1ac:	f004 f9cb 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1b0:	b190      	cbz	r0, a1d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfbc>
    a1b2:	6920      	ldr	r0, [r4, #16]
    a1b4:	f004 fc0e 	bl	e9d4 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    a1b8:	68a1      	ldr	r1, [r4, #8]
    a1ba:	f8a1 01a4 	strh.w	r0, [r1, #420]	; 0x1a4
    a1be:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    a1c2:	f005 fd21 	bl	fc08 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a1c6:	b148      	cbz	r0, a1dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc0>
    a1c8:	68a0      	ldr	r0, [r4, #8]
    a1ca:	2128      	movs	r1, #40	; 0x28
    a1cc:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    a1d0:	307e      	adds	r0, #126	; 0x7e
    a1d2:	21ff      	movs	r1, #255	; 0xff
    a1d4:	7781      	strb	r1, [r0, #30]
    a1d6:	e00b      	b.n	a1f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd4>
    a1d8:	2001      	movs	r0, #1
    a1da:	bd10      	pop	{r4, pc}
    a1dc:	68a1      	ldr	r1, [r4, #8]
    a1de:	6920      	ldr	r0, [r4, #16]
    a1e0:	f501 71d3 	add.w	r1, r1, #422	; 0x1a6
    a1e4:	f004 fbf1 	bl	e9ca <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    a1e8:	68a1      	ldr	r1, [r4, #8]
    a1ea:	200b      	movs	r0, #11
    a1ec:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a1f0:	2000      	movs	r0, #0
    a1f2:	bd10      	pop	{r4, pc}
    a1f4:	2000014c 	.word	0x2000014c
    a1f8:	b570      	push	{r4, r5, r6, lr}
    a1fa:	4c29      	ldr	r4, [pc, #164]	; (a2a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1084>)
    a1fc:	2301      	movs	r3, #1
    a1fe:	2100      	movs	r1, #0
    a200:	68a0      	ldr	r0, [r4, #8]
    a202:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a206:	3078      	adds	r0, #120	; 0x78
    a208:	f004 f99d 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a20c:	b1b8      	cbz	r0, a23e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1022>
    a20e:	2100      	movs	r1, #0
    a210:	6920      	ldr	r0, [r4, #16]
    a212:	f004 fbb2 	bl	e97a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    a216:	b1a0      	cbz	r0, a242 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1026>
    a218:	6920      	ldr	r0, [r4, #16]
    a21a:	68a1      	ldr	r1, [r4, #8]
    a21c:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    a220:	f8a1 01a4 	strh.w	r0, [r1, #420]	; 0x1a4
    a224:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    a228:	f005 fcee 	bl	fc08 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a22c:	b168      	cbz	r0, a24a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x102e>
    a22e:	68a0      	ldr	r0, [r4, #8]
    a230:	2128      	movs	r1, #40	; 0x28
    a232:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    a236:	307e      	adds	r0, #126	; 0x7e
    a238:	21ff      	movs	r1, #255	; 0xff
    a23a:	7781      	strb	r1, [r0, #30]
    a23c:	e02e      	b.n	a29c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1080>
    a23e:	2001      	movs	r0, #1
    a240:	bd70      	pop	{r4, r5, r6, pc}
    a242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a246:	f000 b8df 	b.w	a408 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11ec>
    a24a:	6920      	ldr	r0, [r4, #16]
    a24c:	f004 fbc5 	bl	e9da <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    a250:	f004 f95c 	bl	e50c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    a254:	4605      	mov	r5, r0
    a256:	68a0      	ldr	r0, [r4, #8]
    a258:	4629      	mov	r1, r5
    a25a:	f8c0 51ac 	str.w	r5, [r0, #428]	; 0x1ac
    a25e:	6920      	ldr	r0, [r4, #16]
    a260:	7900      	ldrb	r0, [r0, #4]
    a262:	f004 fade 	bl	e822 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    a266:	68a1      	ldr	r1, [r4, #8]
    a268:	f8a1 01a6 	strh.w	r0, [r1, #422]	; 0x1a6
    a26c:	6920      	ldr	r0, [r4, #16]
    a26e:	4629      	mov	r1, r5
    a270:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    a274:	f004 fad1 	bl	e81a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    a278:	68a1      	ldr	r1, [r4, #8]
    a27a:	f8c1 01a8 	str.w	r0, [r1, #424]	; 0x1a8
    a27e:	6920      	ldr	r0, [r4, #16]
    a280:	f004 fbae 	bl	e9e0 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    a284:	68a1      	ldr	r1, [r4, #8]
    a286:	f8a1 01b0 	strh.w	r0, [r1, #432]	; 0x1b0
    a28a:	6920      	ldr	r0, [r4, #16]
    a28c:	f004 fbab 	bl	e9e6 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    a290:	68a1      	ldr	r1, [r4, #8]
    a292:	f8a1 01b2 	strh.w	r0, [r1, #434]	; 0x1b2
    a296:	200d      	movs	r0, #13
    a298:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a29c:	2000      	movs	r0, #0
    a29e:	bd70      	pop	{r4, r5, r6, pc}
    a2a0:	2000014c 	.word	0x2000014c
    a2a4:	b538      	push	{r3, r4, r5, lr}
    a2a6:	4c29      	ldr	r4, [pc, #164]	; (a34c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1130>)
    a2a8:	2301      	movs	r3, #1
    a2aa:	2100      	movs	r1, #0
    a2ac:	68a0      	ldr	r0, [r4, #8]
    a2ae:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a2b2:	3078      	adds	r0, #120	; 0x78
    a2b4:	f004 f947 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a2b8:	b970      	cbnz	r0, a2d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10bc>
    a2ba:	68a0      	ldr	r0, [r4, #8]
    a2bc:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a2c0:	2a12      	cmp	r2, #18
    a2c2:	d009      	beq.n	a2d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10bc>
    a2c4:	2301      	movs	r3, #1
    a2c6:	2105      	movs	r1, #5
    a2c8:	3078      	adds	r0, #120	; 0x78
    a2ca:	f004 f93c 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a2ce:	b108      	cbz	r0, a2d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b8>
    a2d0:	2008      	movs	r0, #8
    a2d2:	bd38      	pop	{r3, r4, r5, pc}
    a2d4:	2001      	movs	r0, #1
    a2d6:	bd38      	pop	{r3, r4, r5, pc}
    a2d8:	68a0      	ldr	r0, [r4, #8]
    a2da:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    a2de:	b908      	cbnz	r0, a2e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c8>
    a2e0:	f7ff f8c4 	bl	946c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a2e4:	68a1      	ldr	r1, [r4, #8]
    a2e6:	6920      	ldr	r0, [r4, #16]
    a2e8:	f501 7190 	add.w	r1, r1, #288	; 0x120
    a2ec:	f004 fb8a 	bl	ea04 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    a2f0:	68a1      	ldr	r1, [r4, #8]
    a2f2:	6920      	ldr	r0, [r4, #16]
    a2f4:	31f0      	adds	r1, #240	; 0xf0
    a2f6:	f004 fb7c 	bl	e9f2 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    a2fa:	68a1      	ldr	r1, [r4, #8]
    a2fc:	f891 01dc 	ldrb.w	r0, [r1, #476]	; 0x1dc
    a300:	f88d 0000 	strb.w	r0, [sp]
    a304:	9800      	ldr	r0, [sp, #0]
    a306:	9000      	str	r0, [sp, #0]
    a308:	f89d 0000 	ldrb.w	r0, [sp]
    a30c:	b120      	cbz	r0, a318 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10fc>
    a30e:	f44f 7127 	mov.w	r1, #668	; 0x29c
    a312:	2031      	movs	r0, #49	; 0x31
    a314:	f7fa fe8a 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a318:	8808      	ldrh	r0, [r1, #0]
    a31a:	f8a1 01de 	strh.w	r0, [r1, #478]	; 0x1de
    a31e:	f501 71f0 	add.w	r1, r1, #480	; 0x1e0
    a322:	6920      	ldr	r0, [r4, #16]
    a324:	f004 fb69 	bl	e9fa <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    a328:	68a1      	ldr	r1, [r4, #8]
    a32a:	6920      	ldr	r0, [r4, #16]
    a32c:	f501 71f4 	add.w	r1, r1, #488	; 0x1e8
    a330:	f004 fb5c 	bl	e9ec <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    a334:	68a0      	ldr	r0, [r4, #8]
    a336:	4601      	mov	r1, r0
    a338:	22ff      	movs	r2, #255	; 0xff
    a33a:	f880 21dc 	strb.w	r2, [r0, #476]	; 0x1dc
    a33e:	2014      	movs	r0, #20
    a340:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a344:	f7fc ffa8 	bl	7298 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a348:	2000      	movs	r0, #0
    a34a:	bd38      	pop	{r3, r4, r5, pc}
    a34c:	2000014c 	.word	0x2000014c
    a350:	b51c      	push	{r2, r3, r4, lr}
    a352:	4c11      	ldr	r4, [pc, #68]	; (a398 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x117c>)
    a354:	68a0      	ldr	r0, [r4, #8]
    a356:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a35a:	07c0      	lsls	r0, r0, #31
    a35c:	d001      	beq.n	a362 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1146>
    a35e:	2001      	movs	r0, #1
    a360:	bd1c      	pop	{r2, r3, r4, pc}
    a362:	4669      	mov	r1, sp
    a364:	6920      	ldr	r0, [r4, #16]
    a366:	f004 fb53 	bl	ea10 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    a36a:	f001 f973 	bl	b654 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a36e:	f644 112f 	movw	r1, #18735	; 0x492f
    a372:	4008      	ands	r0, r1
    a374:	68a2      	ldr	r2, [r4, #8]
    a376:	9900      	ldr	r1, [sp, #0]
    a378:	2300      	movs	r3, #0
    a37a:	4001      	ands	r1, r0
    a37c:	f842 1fc4 	str.w	r1, [r2, #196]!
    a380:	6053      	str	r3, [r2, #4]
    a382:	f7ff f873 	bl	946c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a386:	68a0      	ldr	r0, [r4, #8]
    a388:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a38c:	f041 0101 	orr.w	r1, r1, #1
    a390:	7001      	strb	r1, [r0, #0]
    a392:	2000      	movs	r0, #0
    a394:	bd1c      	pop	{r2, r3, r4, pc}
    a396:	0000      	.short	0x0000
    a398:	2000014c 	.word	0x2000014c
    a39c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a39e:	4c19      	ldr	r4, [pc, #100]	; (a404 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11e8>)
    a3a0:	2301      	movs	r3, #1
    a3a2:	2107      	movs	r1, #7
    a3a4:	68a0      	ldr	r0, [r4, #8]
    a3a6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a3aa:	3078      	adds	r0, #120	; 0x78
    a3ac:	f004 f8cb 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a3b0:	b330      	cbz	r0, a400 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11e4>
    a3b2:	4669      	mov	r1, sp
    a3b4:	6920      	ldr	r0, [r4, #16]
    a3b6:	f004 fb30 	bl	ea1a <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    a3ba:	68a6      	ldr	r6, [r4, #8]
    a3bc:	9d00      	ldr	r5, [sp, #0]
    a3be:	36c4      	adds	r6, #196	; 0xc4
    a3c0:	f001 f948 	bl	b654 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a3c4:	4005      	ands	r5, r0
    a3c6:	f644 102f 	movw	r0, #18735	; 0x492f
    a3ca:	4005      	ands	r5, r0
    a3cc:	2100      	movs	r1, #0
    a3ce:	6035      	str	r5, [r6, #0]
    a3d0:	6071      	str	r1, [r6, #4]
    a3d2:	68a0      	ldr	r0, [r4, #8]
    a3d4:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
    a3d8:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a3dc:	8802      	ldrh	r2, [r0, #0]
    a3de:	f8a0 221e 	strh.w	r2, [r0, #542]	; 0x21e
    a3e2:	f880 121c 	strb.w	r1, [r0, #540]	; 0x21c
    a3e6:	9a00      	ldr	r2, [sp, #0]
    a3e8:	f8c0 2220 	str.w	r2, [r0, #544]	; 0x220
    a3ec:	9a01      	ldr	r2, [sp, #4]
    a3ee:	f8c0 2224 	str.w	r2, [r0, #548]	; 0x224
    a3f2:	21ff      	movs	r1, #255	; 0xff
    a3f4:	f880 121a 	strb.w	r1, [r0, #538]	; 0x21a
    a3f8:	f7fc ff4e 	bl	7298 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a3fc:	2000      	movs	r0, #0
    a3fe:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a400:	2001      	movs	r0, #1
    a402:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a404:	2000014c 	.word	0x2000014c
    a408:	4a0a      	ldr	r2, [pc, #40]	; (a434 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>)
    a40a:	b510      	push	{r4, lr}
    a40c:	6890      	ldr	r0, [r2, #8]
    a40e:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a412:	070b      	lsls	r3, r1, #28
    a414:	d501      	bpl.n	a41a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11fe>
    a416:	2001      	movs	r0, #1
    a418:	bd10      	pop	{r4, pc}
    a41a:	f041 0108 	orr.w	r1, r1, #8
    a41e:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    a422:	6911      	ldr	r1, [r2, #16]
    a424:	78c9      	ldrb	r1, [r1, #3]
    a426:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
    a42a:	f7ff f81f 	bl	946c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a42e:	2000      	movs	r0, #0
    a430:	bd10      	pop	{r4, pc}
    a432:	0000      	.short	0x0000
    a434:	2000014c 	.word	0x2000014c
    a438:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a43c:	4c35      	ldr	r4, [pc, #212]	; (a514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f8>)
    a43e:	68a0      	ldr	r0, [r4, #8]
    a440:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a444:	f010 0f30 	tst.w	r0, #48	; 0x30
    a448:	d002      	beq.n	a450 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1234>
    a44a:	2001      	movs	r0, #1
    a44c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a450:	6920      	ldr	r0, [r4, #16]
    a452:	f004 fafd 	bl	ea50 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a456:	b328      	cbz	r0, a4a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1288>
    a458:	6920      	ldr	r0, [r4, #16]
    a45a:	f004 faeb 	bl	ea34 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a45e:	4607      	mov	r7, r0
    a460:	6920      	ldr	r0, [r4, #16]
    a462:	f004 faeb 	bl	ea3c <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a466:	4606      	mov	r6, r0
    a468:	6920      	ldr	r0, [r4, #16]
    a46a:	f004 fae1 	bl	ea30 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a46e:	4605      	mov	r5, r0
    a470:	6920      	ldr	r0, [r4, #16]
    a472:	f004 fae1 	bl	ea38 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a476:	4601      	mov	r1, r0
    a478:	9700      	str	r7, [sp, #0]
    a47a:	68a0      	ldr	r0, [r4, #8]
    a47c:	4633      	mov	r3, r6
    a47e:	462a      	mov	r2, r5
    a480:	3030      	adds	r0, #48	; 0x30
    a482:	f004 fd3c 	bl	eefe <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a486:	78a0      	ldrb	r0, [r4, #2]
    a488:	0781      	lsls	r1, r0, #30
    a48a:	f04f 0001 	mov.w	r0, #1
    a48e:	d503      	bpl.n	a498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x127c>
    a490:	68e1      	ldr	r1, [r4, #12]
    a492:	78c9      	ldrb	r1, [r1, #3]
    a494:	2914      	cmp	r1, #20
    a496:	d009      	beq.n	a4ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1290>
    a498:	68a1      	ldr	r1, [r4, #8]
    a49a:	f891 1085 	ldrb.w	r1, [r1, #133]	; 0x85
    a49e:	291c      	cmp	r1, #28
    a4a0:	d004      	beq.n	a4ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1290>
    a4a2:	e006      	b.n	a4b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1296>
    a4a4:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a4a8:	f7ff bfae 	b.w	a408 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11ec>
    a4ac:	68a1      	ldr	r1, [r4, #8]
    a4ae:	f881 0064 	strb.w	r0, [r1, #100]	; 0x64
    a4b2:	68a1      	ldr	r1, [r4, #8]
    a4b4:	f891 0064 	ldrb.w	r0, [r1, #100]	; 0x64
    a4b8:	2801      	cmp	r0, #1
    a4ba:	d011      	beq.n	a4e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12c4>
    a4bc:	f891 01b5 	ldrb.w	r0, [r1, #437]	; 0x1b5
    a4c0:	f88d 0004 	strb.w	r0, [sp, #4]
    a4c4:	9801      	ldr	r0, [sp, #4]
    a4c6:	9001      	str	r0, [sp, #4]
    a4c8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a4cc:	b940      	cbnz	r0, a4e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12c4>
    a4ce:	f891 01b4 	ldrb.w	r0, [r1, #436]	; 0x1b4
    a4d2:	f88d 0000 	strb.w	r0, [sp]
    a4d6:	9800      	ldr	r0, [sp, #0]
    a4d8:	9000      	str	r0, [sp, #0]
    a4da:	f89d 0000 	ldrb.w	r0, [sp]
    a4de:	b148      	cbz	r0, a4f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d8>
    a4e0:	f811 0f87 	ldrb.w	r0, [r1, #135]!
    a4e4:	f040 0010 	orr.w	r0, r0, #16
    a4e8:	f881 0000 	strb.w	r0, [r1]
    a4ec:	f7fe ffbe 	bl	946c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a4f0:	2000      	movs	r0, #0
    a4f2:	e7ab      	b.n	a44c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1230>
    a4f4:	f891 0087 	ldrb.w	r0, [r1, #135]	; 0x87
    a4f8:	f501 72fc 	add.w	r2, r1, #504	; 0x1f8
    a4fc:	f040 0020 	orr.w	r0, r0, #32
    a500:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
    a504:	f831 0b30 	ldrh.w	r0, [r1], #48
    a508:	f004 fd00 	bl	ef0c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    a50c:	f7fc fec4 	bl	7298 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a510:	e7ec      	b.n	a4ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d0>
    a512:	0000      	.short	0x0000
    a514:	2000014c 	.word	0x2000014c
    a518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a51a:	4c1a      	ldr	r4, [pc, #104]	; (a584 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1368>)
    a51c:	2301      	movs	r3, #1
    a51e:	210a      	movs	r1, #10
    a520:	68a0      	ldr	r0, [r4, #8]
    a522:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a526:	3078      	adds	r0, #120	; 0x78
    a528:	f004 f80d 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a52c:	b338      	cbz	r0, a57e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1362>
    a52e:	6920      	ldr	r0, [r4, #16]
    a530:	f004 fa8e 	bl	ea50 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a534:	b1c8      	cbz	r0, a56a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134e>
    a536:	6920      	ldr	r0, [r4, #16]
    a538:	f004 fa7c 	bl	ea34 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a53c:	4607      	mov	r7, r0
    a53e:	6920      	ldr	r0, [r4, #16]
    a540:	f004 fa7c 	bl	ea3c <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a544:	4606      	mov	r6, r0
    a546:	6920      	ldr	r0, [r4, #16]
    a548:	f004 fa72 	bl	ea30 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a54c:	4605      	mov	r5, r0
    a54e:	6920      	ldr	r0, [r4, #16]
    a550:	f004 fa72 	bl	ea38 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a554:	4601      	mov	r1, r0
    a556:	9700      	str	r7, [sp, #0]
    a558:	68a0      	ldr	r0, [r4, #8]
    a55a:	4633      	mov	r3, r6
    a55c:	462a      	mov	r2, r5
    a55e:	3030      	adds	r0, #48	; 0x30
    a560:	f004 fccd 	bl	eefe <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a564:	68a0      	ldr	r0, [r4, #8]
    a566:	f004 fc3a 	bl	edde <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a56a:	68a1      	ldr	r1, [r4, #8]
    a56c:	2000      	movs	r0, #0
    a56e:	f881 00b6 	strb.w	r0, [r1, #182]	; 0xb6
    a572:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a576:	f7ff f93f 	bl	97f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5dc>
    a57a:	2000      	movs	r0, #0
    a57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a57e:	2001      	movs	r0, #1
    a580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a582:	0000      	.short	0x0000
    a584:	2000014c 	.word	0x2000014c
    a588:	b510      	push	{r4, lr}
    a58a:	4c09      	ldr	r4, [pc, #36]	; (a5b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1394>)
    a58c:	68a0      	ldr	r0, [r4, #8]
    a58e:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a592:	0740      	lsls	r0, r0, #29
    a594:	d501      	bpl.n	a59a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x137e>
    a596:	2001      	movs	r0, #1
    a598:	bd10      	pop	{r4, pc}
    a59a:	f7fe ff67 	bl	946c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a59e:	68a0      	ldr	r0, [r4, #8]
    a5a0:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a5a4:	f041 0104 	orr.w	r1, r1, #4
    a5a8:	7001      	strb	r1, [r0, #0]
    a5aa:	2000      	movs	r0, #0
    a5ac:	bd10      	pop	{r4, pc}
    a5ae:	0000      	.short	0x0000
    a5b0:	2000014c 	.word	0x2000014c
    a5b4:	b510      	push	{r4, lr}
    a5b6:	4c09      	ldr	r4, [pc, #36]	; (a5dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c0>)
    a5b8:	2301      	movs	r3, #1
    a5ba:	2109      	movs	r1, #9
    a5bc:	68a0      	ldr	r0, [r4, #8]
    a5be:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a5c2:	3078      	adds	r0, #120	; 0x78
    a5c4:	f003 ffbf 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a5c8:	2800      	cmp	r0, #0
    a5ca:	d006      	beq.n	a5da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13be>
    a5cc:	68a1      	ldr	r1, [r4, #8]
    a5ce:	2000      	movs	r0, #0
    a5d0:	f801 0faa 	strb.w	r0, [r1, #170]!
    a5d4:	7308      	strb	r0, [r1, #12]
    a5d6:	f801 0c25 	strb.w	r0, [r1, #-37]
    a5da:	bd10      	pop	{r4, pc}
    a5dc:	2000014c 	.word	0x2000014c
    a5e0:	b510      	push	{r4, lr}
    a5e2:	4c0f      	ldr	r4, [pc, #60]	; (a620 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1404>)
    a5e4:	2301      	movs	r3, #1
    a5e6:	2100      	movs	r1, #0
    a5e8:	68a0      	ldr	r0, [r4, #8]
    a5ea:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a5ee:	3078      	adds	r0, #120	; 0x78
    a5f0:	f003 ffa9 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a5f4:	b138      	cbz	r0, a606 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13ea>
    a5f6:	f7fe ff39 	bl	946c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a5fa:	68a1      	ldr	r1, [r4, #8]
    a5fc:	2010      	movs	r0, #16
    a5fe:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a602:	2000      	movs	r0, #0
    a604:	bd10      	pop	{r4, pc}
    a606:	68a0      	ldr	r0, [r4, #8]
    a608:	2301      	movs	r3, #1
    a60a:	2105      	movs	r1, #5
    a60c:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a610:	3078      	adds	r0, #120	; 0x78
    a612:	f003 ff98 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a616:	b108      	cbz	r0, a61c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1400>
    a618:	2008      	movs	r0, #8
    a61a:	bd10      	pop	{r4, pc}
    a61c:	2001      	movs	r0, #1
    a61e:	bd10      	pop	{r4, pc}
    a620:	2000014c 	.word	0x2000014c
    a624:	4806      	ldr	r0, [pc, #24]	; (a640 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>)
    a626:	6880      	ldr	r0, [r0, #8]
    a628:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a62c:	2911      	cmp	r1, #17
    a62e:	d001      	beq.n	a634 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1418>
    a630:	2002      	movs	r0, #2
    a632:	4770      	bx	lr
    a634:	2112      	movs	r1, #18
    a636:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a63a:	2000      	movs	r0, #0
    a63c:	4770      	bx	lr
    a63e:	0000      	.short	0x0000
    a640:	2000014c 	.word	0x2000014c
    a644:	b538      	push	{r3, r4, r5, lr}
    a646:	4c33      	ldr	r4, [pc, #204]	; (a714 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14f8>)
    a648:	2301      	movs	r3, #1
    a64a:	210b      	movs	r1, #11
    a64c:	68a0      	ldr	r0, [r4, #8]
    a64e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a652:	3078      	adds	r0, #120	; 0x78
    a654:	f003 ff77 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a658:	bb70      	cbnz	r0, a6b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
    a65a:	68a0      	ldr	r0, [r4, #8]
    a65c:	2301      	movs	r3, #1
    a65e:	2100      	movs	r1, #0
    a660:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a664:	3078      	adds	r0, #120	; 0x78
    a666:	f003 ff6e 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a66a:	b318      	cbz	r0, a6b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1498>
    a66c:	68a0      	ldr	r0, [r4, #8]
    a66e:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    a672:	2824      	cmp	r0, #36	; 0x24
    a674:	d020      	beq.n	a6b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
    a676:	6920      	ldr	r0, [r4, #16]
    a678:	f004 fa06 	bl	ea88 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    a67c:	b1f0      	cbz	r0, a6bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a0>
    a67e:	68a0      	ldr	r0, [r4, #8]
    a680:	2102      	movs	r1, #2
    a682:	30c4      	adds	r0, #196	; 0xc4
    a684:	f005 fa51 	bl	fb2a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x602>
    a688:	6921      	ldr	r1, [r4, #16]
    a68a:	7948      	ldrb	r0, [r1, #5]
    a68c:	f000 0207 	and.w	r2, r0, #7
    a690:	68a0      	ldr	r0, [r4, #8]
    a692:	f880 2067 	strb.w	r2, [r0, #103]	; 0x67
    a696:	7909      	ldrb	r1, [r1, #4]
    a698:	f001 0107 	and.w	r1, r1, #7
    a69c:	f880 1066 	strb.w	r1, [r0, #102]	; 0x66
    a6a0:	f890 31bf 	ldrb.w	r3, [r0, #447]	; 0x1bf
    a6a4:	f88d 3000 	strb.w	r3, [sp]
    a6a8:	9b00      	ldr	r3, [sp, #0]
    a6aa:	9300      	str	r3, [sp, #0]
    a6ac:	f89d 3000 	ldrb.w	r3, [sp]
    a6b0:	bb3b      	cbnz	r3, a702 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e6>
    a6b2:	e007      	b.n	a6c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a8>
    a6b4:	2001      	movs	r0, #1
    a6b6:	bd38      	pop	{r3, r4, r5, pc}
    a6b8:	2020      	movs	r0, #32
    a6ba:	bd38      	pop	{r3, r4, r5, pc}
    a6bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a6c0:	f7ff bea2 	b.w	a408 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11ec>
    a6c4:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
    a6c8:	2b01      	cmp	r3, #1
    a6ca:	d01a      	beq.n	a702 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e6>
    a6cc:	f100 036e 	add.w	r3, r0, #110	; 0x6e
    a6d0:	785d      	ldrb	r5, [r3, #1]
    a6d2:	428d      	cmp	r5, r1
    a6d4:	d106      	bne.n	a6e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>
    a6d6:	7819      	ldrb	r1, [r3, #0]
    a6d8:	4291      	cmp	r1, r2
    a6da:	d103      	bne.n	a6e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>
    a6dc:	2102      	movs	r1, #2
    a6de:	f880 11be 	strb.w	r1, [r0, #446]	; 0x1be
    a6e2:	e00e      	b.n	a702 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e6>
    a6e4:	f200 210e 	addw	r1, r0, #526	; 0x20e
    a6e8:	8802      	ldrh	r2, [r0, #0]
    a6ea:	f821 2902 	strh.w	r2, [r1], #-2
    a6ee:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    a6f2:	710a      	strb	r2, [r1, #4]
    a6f4:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    a6f8:	7148      	strb	r0, [r1, #5]
    a6fa:	20ff      	movs	r0, #255	; 0xff
    a6fc:	7008      	strb	r0, [r1, #0]
    a6fe:	f7fc fdcb 	bl	7298 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a702:	68a1      	ldr	r1, [r4, #8]
    a704:	2021      	movs	r0, #33	; 0x21
    a706:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a70a:	f7fe feaf 	bl	946c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a70e:	2000      	movs	r0, #0
    a710:	bd38      	pop	{r3, r4, r5, pc}
    a712:	0000      	.short	0x0000
    a714:	2000014c 	.word	0x2000014c
    a718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a71c:	4c4c      	ldr	r4, [pc, #304]	; (a850 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>)
    a71e:	68a0      	ldr	r0, [r4, #8]
    a720:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a724:	2920      	cmp	r1, #32
    a726:	d009      	beq.n	a73c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1520>
    a728:	f05f 0700 	movs.w	r7, #0
    a72c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a730:	2922      	cmp	r1, #34	; 0x22
    a732:	d005      	beq.n	a740 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1524>
    a734:	b36f      	cbz	r7, a792 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1576>
    a736:	f100 0585 	add.w	r5, r0, #133	; 0x85
    a73a:	e003      	b.n	a744 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1528>
    a73c:	2701      	movs	r7, #1
    a73e:	e7f5      	b.n	a72c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1510>
    a740:	f100 0586 	add.w	r5, r0, #134	; 0x86
    a744:	2102      	movs	r1, #2
    a746:	30c4      	adds	r0, #196	; 0xc4
    a748:	f005 f9ef 	bl	fb2a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x602>
    a74c:	6920      	ldr	r0, [r4, #16]
    a74e:	f7fc fc8f 	bl	7070 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    a752:	2600      	movs	r6, #0
    a754:	b300      	cbz	r0, a798 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x157c>
    a756:	4639      	mov	r1, r7
    a758:	6920      	ldr	r0, [r4, #16]
    a75a:	f7fe ff53 	bl	9604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e8>
    a75e:	b1d8      	cbz	r0, a798 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x157c>
    a760:	466a      	mov	r2, sp
    a762:	6921      	ldr	r1, [r4, #16]
    a764:	68a0      	ldr	r0, [r4, #8]
    a766:	f004 f812 	bl	e78e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    a76a:	b380      	cbz	r0, a7ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b2>
    a76c:	6920      	ldr	r0, [r4, #16]
    a76e:	f004 f967 	bl	ea40 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    a772:	68a1      	ldr	r1, [r4, #8]
    a774:	f8a1 01a4 	strh.w	r0, [r1, #420]	; 0x1a4
    a778:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    a77c:	f005 fa44 	bl	fc08 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a780:	b3d0      	cbz	r0, a7f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15dc>
    a782:	68a0      	ldr	r0, [r4, #8]
    a784:	2128      	movs	r1, #40	; 0x28
    a786:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    a78a:	307e      	adds	r0, #126	; 0x7e
    a78c:	21ff      	movs	r1, #255	; 0xff
    a78e:	7781      	strb	r1, [r0, #30]
    a790:	e052      	b.n	a838 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    a792:	2002      	movs	r0, #2
    a794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a798:	68a0      	ldr	r0, [r4, #8]
    a79a:	f04f 0800 	mov.w	r8, #0
    a79e:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a7a2:	2901      	cmp	r1, #1
    a7a4:	d014      	beq.n	a7d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b4>
    a7a6:	f880 61be 	strb.w	r6, [r0, #446]	; 0x1be
    a7aa:	b1ef      	cbz	r7, a7e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15cc>
    a7ac:	6920      	ldr	r0, [r4, #16]
    a7ae:	68a1      	ldr	r1, [r4, #8]
    a7b0:	2201      	movs	r2, #1
    a7b2:	78c0      	ldrb	r0, [r0, #3]
    a7b4:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
    a7b8:	4082      	lsls	r2, r0
    a7ba:	f3c2 6000 	ubfx	r0, r2, #24, #1
    a7be:	b158      	cbz	r0, a7d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15bc>
    a7c0:	200a      	movs	r0, #10
    a7c2:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a7c6:	f891 00b6 	ldrb.w	r0, [r1, #182]	; 0xb6
    a7ca:	b998      	cbnz	r0, a7f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15d8>
    a7cc:	e007      	b.n	a7de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c2>
    a7ce:	e014      	b.n	a7fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15de>
    a7d0:	201e      	movs	r0, #30
    a7d2:	f7ff fcbf 	bl	a154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    a7d6:	e7e8      	b.n	a7aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x158e>
    a7d8:	f240 31bf 	movw	r1, #959	; 0x3bf
    a7dc:	e001      	b.n	a7e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c6>
    a7de:	f240 31c7 	movw	r1, #967	; 0x3c7
    a7e2:	2031      	movs	r0, #49	; 0x31
    a7e4:	f7fa fc22 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a7e8:	702e      	strb	r6, [r5, #0]
    a7ea:	f7fe fe4b 	bl	9484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    a7ee:	f7ff fe0b 	bl	a408 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11ec>
    a7f2:	4680      	mov	r8, r0
    a7f4:	4640      	mov	r0, r8
    a7f6:	e7cd      	b.n	a794 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1578>
    a7f8:	e013      	b.n	a822 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1606>
    a7fa:	68a0      	ldr	r0, [r4, #8]
    a7fc:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a800:	2901      	cmp	r1, #1
    a802:	d009      	beq.n	a818 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15fc>
    a804:	f880 61be 	strb.w	r6, [r0, #446]	; 0x1be
    a808:	68a0      	ldr	r0, [r4, #8]
    a80a:	f100 0186 	add.w	r1, r0, #134	; 0x86
    a80e:	428d      	cmp	r5, r1
    a810:	d112      	bne.n	a838 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    a812:	f880 6086 	strb.w	r6, [r0, #134]	; 0x86
    a816:	e00f      	b.n	a838 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    a818:	2000      	movs	r0, #0
    a81a:	f7ff fc9b 	bl	a154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    a81e:	702e      	strb	r6, [r5, #0]
    a820:	e7f2      	b.n	a808 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ec>
    a822:	68a0      	ldr	r0, [r4, #8]
    a824:	f89d 1000 	ldrb.w	r1, [sp]
    a828:	f880 11a6 	strb.w	r1, [r0, #422]	; 0x1a6
    a82c:	f89d 1001 	ldrb.w	r1, [sp, #1]
    a830:	f880 11a7 	strb.w	r1, [r0, #423]	; 0x1a7
    a834:	2024      	movs	r0, #36	; 0x24
    a836:	7028      	strb	r0, [r5, #0]
    a838:	68a0      	ldr	r0, [r4, #8]
    a83a:	f100 0186 	add.w	r1, r0, #134	; 0x86
    a83e:	428d      	cmp	r5, r1
    a840:	d102      	bne.n	a848 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x162c>
    a842:	f7fe fe1f 	bl	9484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    a846:	e001      	b.n	a84c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    a848:	f880 60b6 	strb.w	r6, [r0, #182]	; 0xb6
    a84c:	2000      	movs	r0, #0
    a84e:	e7a1      	b.n	a794 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1578>
    a850:	2000014c 	.word	0x2000014c
    a854:	b510      	push	{r4, lr}
    a856:	4c0a      	ldr	r4, [pc, #40]	; (a880 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1664>)
    a858:	2102      	movs	r1, #2
    a85a:	68a0      	ldr	r0, [r4, #8]
    a85c:	30c4      	adds	r0, #196	; 0xc4
    a85e:	f005 f964 	bl	fb2a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x602>
    a862:	6920      	ldr	r0, [r4, #16]
    a864:	f004 f91a 	bl	ea9c <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    a868:	2816      	cmp	r0, #22
    a86a:	d001      	beq.n	a870 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1654>
    a86c:	2000      	movs	r0, #0
    a86e:	bd10      	pop	{r4, pc}
    a870:	6920      	ldr	r0, [r4, #16]
    a872:	f004 f915 	bl	eaa0 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    a876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a87a:	f7fe bdd5 	b.w	9428 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x20c>
    a87e:	0000      	.short	0x0000
    a880:	2000014c 	.word	0x2000014c
    a884:	4802      	ldr	r0, [pc, #8]	; (a890 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1674>)
    a886:	6900      	ldr	r0, [r0, #16]
    a888:	7900      	ldrb	r0, [r0, #4]
    a88a:	f7fe bdcd 	b.w	9428 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x20c>
    a88e:	0000      	.short	0x0000
    a890:	2000014c 	.word	0x2000014c
    a894:	b510      	push	{r4, lr}
    a896:	4c08      	ldr	r4, [pc, #32]	; (a8b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x169c>)
    a898:	68a0      	ldr	r0, [r4, #8]
    a89a:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    a89e:	2817      	cmp	r0, #23
    a8a0:	d001      	beq.n	a8a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x168a>
    a8a2:	2002      	movs	r0, #2
    a8a4:	bd10      	pop	{r4, pc}
    a8a6:	f7fe fded 	bl	9484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    a8aa:	68a1      	ldr	r1, [r4, #8]
    a8ac:	201b      	movs	r0, #27
    a8ae:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a8b2:	2000      	movs	r0, #0
    a8b4:	bd10      	pop	{r4, pc}
    a8b6:	0000      	.short	0x0000
    a8b8:	2000014c 	.word	0x2000014c
    a8bc:	b510      	push	{r4, lr}
    a8be:	4c0b      	ldr	r4, [pc, #44]	; (a8ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>)
    a8c0:	2301      	movs	r3, #1
    a8c2:	4619      	mov	r1, r3
    a8c4:	68a0      	ldr	r0, [r4, #8]
    a8c6:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    a8ca:	3078      	adds	r0, #120	; 0x78
    a8cc:	f003 fe3b 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a8d0:	b108      	cbz	r0, a8d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ba>
    a8d2:	2000      	movs	r0, #0
    a8d4:	bd10      	pop	{r4, pc}
    a8d6:	6920      	ldr	r0, [r4, #16]
    a8d8:	f004 f8b6 	bl	ea48 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    a8dc:	68a1      	ldr	r1, [r4, #8]
    a8de:	f881 018a 	strb.w	r0, [r1, #394]	; 0x18a
    a8e2:	2007      	movs	r0, #7
    a8e4:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    a8e8:	e7f3      	b.n	a8d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b6>
    a8ea:	0000      	.short	0x0000
    a8ec:	2000014c 	.word	0x2000014c
    a8f0:	b570      	push	{r4, r5, r6, lr}
    a8f2:	4d37      	ldr	r5, [pc, #220]	; (a9d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b4>)
    a8f4:	2600      	movs	r6, #0
    a8f6:	4628      	mov	r0, r5
    a8f8:	68a9      	ldr	r1, [r5, #8]
    a8fa:	6900      	ldr	r0, [r0, #16]
    a8fc:	f891 3085 	ldrb.w	r3, [r1, #133]	; 0x85
    a900:	7900      	ldrb	r0, [r0, #4]
    a902:	2b0e      	cmp	r3, #14
    a904:	d101      	bne.n	a90a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ee>
    a906:	2812      	cmp	r0, #18
    a908:	d006      	beq.n	a918 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16fc>
    a90a:	4a31      	ldr	r2, [pc, #196]	; (a9d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b4>)
    a90c:	2400      	movs	r4, #0
    a90e:	6892      	ldr	r2, [r2, #8]
    a910:	32c4      	adds	r2, #196	; 0xc4
    a912:	2b1c      	cmp	r3, #28
    a914:	d004      	beq.n	a920 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1704>
    a916:	e005      	b.n	a924 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1708>
    a918:	f7ff fe4c 	bl	a5b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1398>
    a91c:	4606      	mov	r6, r0
    a91e:	e054      	b.n	a9ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a920:	2814      	cmp	r0, #20
    a922:	d002      	beq.n	a92a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170e>
    a924:	2b04      	cmp	r3, #4
    a926:	d00b      	beq.n	a940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1724>
    a928:	e00c      	b.n	a944 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1728>
    a92a:	f881 4085 	strb.w	r4, [r1, #133]	; 0x85
    a92e:	f881 40b6 	strb.w	r4, [r1, #182]	; 0xb6
    a932:	2105      	movs	r1, #5
    a934:	4610      	mov	r0, r2
    a936:	f005 f8ee 	bl	fb16 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ee>
    a93a:	f7fe ff5d 	bl	97f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5dc>
    a93e:	e044      	b.n	a9ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a940:	280e      	cmp	r0, #14
    a942:	d002      	beq.n	a94a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x172e>
    a944:	2b20      	cmp	r3, #32
    a946:	d010      	beq.n	a96a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    a948:	e011      	b.n	a96e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1752>
    a94a:	f881 4085 	strb.w	r4, [r1, #133]	; 0x85
    a94e:	f881 40b6 	strb.w	r4, [r1, #182]	; 0xb6
    a952:	8808      	ldrh	r0, [r1, #0]
    a954:	f8a1 021e 	strh.w	r0, [r1, #542]	; 0x21e
    a958:	201a      	movs	r0, #26
    a95a:	f881 021c 	strb.w	r0, [r1, #540]	; 0x21c
    a95e:	20ff      	movs	r0, #255	; 0xff
    a960:	f881 021a 	strb.w	r0, [r1, #538]	; 0x21a
    a964:	f7fc fc98 	bl	7298 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a968:	e02f      	b.n	a9ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a96a:	2816      	cmp	r0, #22
    a96c:	d006      	beq.n	a97c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1760>
    a96e:	2b26      	cmp	r3, #38	; 0x26
    a970:	d101      	bne.n	a976 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175a>
    a972:	2816      	cmp	r0, #22
    a974:	d002      	beq.n	a97c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1760>
    a976:	2817      	cmp	r0, #23
    a978:	d014      	beq.n	a9a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1788>
    a97a:	e026      	b.n	a9ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a97c:	f801 4f85 	strb.w	r4, [r1, #133]!
    a980:	f881 4031 	strb.w	r4, [r1, #49]	; 0x31
    a984:	7848      	ldrb	r0, [r1, #1]
    a986:	2821      	cmp	r0, #33	; 0x21
    a988:	d01f      	beq.n	a9ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a98a:	2108      	movs	r1, #8
    a98c:	4610      	mov	r0, r2
    a98e:	f005 f8c2 	bl	fb16 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ee>
    a992:	68a8      	ldr	r0, [r5, #8]
    a994:	210b      	movs	r1, #11
    a996:	30c4      	adds	r0, #196	; 0xc4
    a998:	f005 f8bd 	bl	fb16 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ee>
    a99c:	201a      	movs	r0, #26
    a99e:	f7ff fbd9 	bl	a154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    a9a2:	e012      	b.n	a9ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a9a4:	f891 0086 	ldrb.w	r0, [r1, #134]	; 0x86
    a9a8:	2822      	cmp	r0, #34	; 0x22
    a9aa:	d10e      	bne.n	a9ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a9ac:	f881 4086 	strb.w	r4, [r1, #134]	; 0x86
    a9b0:	f7fe fd68 	bl	9484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    a9b4:	68a8      	ldr	r0, [r5, #8]
    a9b6:	f890 01be 	ldrb.w	r0, [r0, #446]	; 0x1be
    a9ba:	2801      	cmp	r0, #1
    a9bc:	d102      	bne.n	a9c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17a8>
    a9be:	2000      	movs	r0, #0
    a9c0:	f7ff fbc8 	bl	a154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    a9c4:	68a8      	ldr	r0, [r5, #8]
    a9c6:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    a9ca:	4630      	mov	r0, r6
    a9cc:	bd70      	pop	{r4, r5, r6, pc}
    a9ce:	0000      	.short	0x0000
    a9d0:	2000014c 	.word	0x2000014c
    a9d4:	b570      	push	{r4, r5, r6, lr}
    a9d6:	4c2c      	ldr	r4, [pc, #176]	; (aa88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x186c>)
    a9d8:	68a0      	ldr	r0, [r4, #8]
    a9da:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a9de:	0789      	lsls	r1, r1, #30
    a9e0:	d507      	bpl.n	a9f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d6>
    a9e2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a9e6:	2301      	movs	r3, #1
    a9e8:	2108      	movs	r1, #8
    a9ea:	3078      	adds	r0, #120	; 0x78
    a9ec:	f003 fdab 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a9f0:	b1e8      	cbz	r0, aa2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1812>
    a9f2:	68a0      	ldr	r0, [r4, #8]
    a9f4:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
    a9f8:	0780      	lsls	r0, r0, #30
    a9fa:	d412      	bmi.n	aa22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1806>
    a9fc:	6920      	ldr	r0, [r4, #16]
    a9fe:	f004 f825 	bl	ea4c <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    aa02:	68a1      	ldr	r1, [r4, #8]
    aa04:	f881 00bf 	strb.w	r0, [r1, #191]	; 0xbf
    aa08:	6920      	ldr	r0, [r4, #16]
    aa0a:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    aa0e:	f8a1 20c0 	strh.w	r2, [r1, #192]	; 0xc0
    aa12:	8840      	ldrh	r0, [r0, #2]
    aa14:	f8a1 00c2 	strh.w	r0, [r1, #194]	; 0xc2
    aa18:	f811 0fbe 	ldrb.w	r0, [r1, #190]!
    aa1c:	f040 0002 	orr.w	r0, r0, #2
    aa20:	7008      	strb	r0, [r1, #0]
    aa22:	68a0      	ldr	r0, [r4, #8]
    aa24:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    aa28:	07c9      	lsls	r1, r1, #31
    aa2a:	d002      	beq.n	aa32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1816>
    aa2c:	e010      	b.n	aa50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1834>
    aa2e:	2001      	movs	r0, #1
    aa30:	bd70      	pop	{r4, r5, r6, pc}
    aa32:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    aa36:	078a      	lsls	r2, r1, #30
    aa38:	d504      	bpl.n	aa44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>
    aa3a:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    aa3e:	2031      	movs	r0, #49	; 0x31
    aa40:	f7fa faf4 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa44:	f041 0102 	orr.w	r1, r1, #2
    aa48:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    aa4c:	f7fe fd0e 	bl	946c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    aa50:	68a0      	ldr	r0, [r4, #8]
    aa52:	2500      	movs	r5, #0
    aa54:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    aa58:	2906      	cmp	r1, #6
    aa5a:	d105      	bne.n	aa68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184c>
    aa5c:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    aa60:	f880 50b6 	strb.w	r5, [r0, #182]	; 0xb6
    aa64:	f7fc fc18 	bl	7298 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    aa68:	68a0      	ldr	r0, [r4, #8]
    aa6a:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    aa6e:	b149      	cbz	r1, aa84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1868>
    aa70:	f880 51c4 	strb.w	r5, [r0, #452]	; 0x1c4
    aa74:	f7fc fc10 	bl	7298 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    aa78:	68a0      	ldr	r0, [r4, #8]
    aa7a:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    aa7e:	b909      	cbnz	r1, aa84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1868>
    aa80:	f880 50b6 	strb.w	r5, [r0, #182]	; 0xb6
    aa84:	2000      	movs	r0, #0
    aa86:	bd70      	pop	{r4, r5, r6, pc}
    aa88:	2000014c 	.word	0x2000014c
    aa8c:	b510      	push	{r4, lr}
    aa8e:	4c20      	ldr	r4, [pc, #128]	; (ab10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f4>)
    aa90:	68a3      	ldr	r3, [r4, #8]
    aa92:	f893 0102 	ldrb.w	r0, [r3, #258]	; 0x102
    aa96:	2808      	cmp	r0, #8
    aa98:	d20f      	bcs.n	aaba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x189e>
    aa9a:	f100 0208 	add.w	r2, r0, #8
    aa9e:	f1c0 0008 	rsb	r0, r0, #8
    aaa2:	b2c1      	uxtb	r1, r0
    aaa4:	1898      	adds	r0, r3, r2
    aaa6:	f500 7090 	add.w	r0, r0, #288	; 0x120
    aaaa:	f7fa fb4b 	bl	5144 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    aaae:	68a1      	ldr	r1, [r4, #8]
    aab0:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    aab4:	4410      	add	r0, r2
    aab6:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    aaba:	68a3      	ldr	r3, [r4, #8]
    aabc:	f893 0102 	ldrb.w	r0, [r3, #258]	; 0x102
    aac0:	3808      	subs	r0, #8
    aac2:	2804      	cmp	r0, #4
    aac4:	d20d      	bcs.n	aae2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c6>
    aac6:	1d02      	adds	r2, r0, #4
    aac8:	f1c0 0004 	rsb	r0, r0, #4
    aacc:	b2c1      	uxtb	r1, r0
    aace:	1898      	adds	r0, r3, r2
    aad0:	30f0      	adds	r0, #240	; 0xf0
    aad2:	f7fa fb37 	bl	5144 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    aad6:	68a1      	ldr	r1, [r4, #8]
    aad8:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    aadc:	4410      	add	r0, r2
    aade:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    aae2:	68a0      	ldr	r0, [r4, #8]
    aae4:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    aae8:	290c      	cmp	r1, #12
    aaea:	d30f      	bcc.n	ab0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f0>
    aaec:	d005      	beq.n	aafa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18de>
    aaee:	f240 71b6 	movw	r1, #1974	; 0x7b6
    aaf2:	f04f 0031 	mov.w	r0, #49	; 0x31
    aaf6:	f7fa fa99 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aafa:	2100      	movs	r1, #0
    aafc:	f880 1102 	strb.w	r1, [r0, #258]	; 0x102
    ab00:	2101      	movs	r1, #1
    ab02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ab06:	2004      	movs	r0, #4
    ab08:	f7ff ba20 	b.w	9f4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    ab0c:	bd10      	pop	{r4, pc}
    ab0e:	0000      	.short	0x0000
    ab10:	2000014c 	.word	0x2000014c
    ab14:	4804      	ldr	r0, [pc, #16]	; (ab28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190c>)
    ab16:	2127      	movs	r1, #39	; 0x27
    ab18:	6880      	ldr	r0, [r0, #8]
    ab1a:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    ab1e:	2100      	movs	r1, #0
    ab20:	f880 119c 	strb.w	r1, [r0, #412]	; 0x19c
    ab24:	4770      	bx	lr
    ab26:	0000      	.short	0x0000
    ab28:	2000014c 	.word	0x2000014c
    ab2c:	4809      	ldr	r0, [pc, #36]	; (ab54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1938>)
    ab2e:	b510      	push	{r4, lr}
    ab30:	6880      	ldr	r0, [r0, #8]
    ab32:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ab36:	2914      	cmp	r1, #20
    ab38:	d004      	beq.n	ab44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1928>
    ab3a:	f240 6191 	movw	r1, #1681	; 0x691
    ab3e:	2031      	movs	r0, #49	; 0x31
    ab40:	f7fa fa74 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab44:	2101      	movs	r1, #1
    ab46:	f880 10bb 	strb.w	r1, [r0, #187]	; 0xbb
    ab4a:	2115      	movs	r1, #21
    ab4c:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    ab50:	bd10      	pop	{r4, pc}
    ab52:	0000      	.short	0x0000
    ab54:	2000014c 	.word	0x2000014c
    ab58:	b510      	push	{r4, lr}
    ab5a:	4c0a      	ldr	r4, [pc, #40]	; (ab84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>)
    ab5c:	68a0      	ldr	r0, [r4, #8]
    ab5e:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    ab62:	07c0      	lsls	r0, r0, #31
    ab64:	d008      	beq.n	ab78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x195c>
    ab66:	f7fe fc8d 	bl	9484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    ab6a:	68a0      	ldr	r0, [r4, #8]
    ab6c:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    ab70:	f021 0101 	bic.w	r1, r1, #1
    ab74:	7001      	strb	r1, [r0, #0]
    ab76:	bd10      	pop	{r4, pc}
    ab78:	f240 617c 	movw	r1, #1660	; 0x67c
    ab7c:	2031      	movs	r0, #49	; 0x31
    ab7e:	f7fa fa55 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab82:	0000      	.short	0x0000
    ab84:	2000014c 	.word	0x2000014c
    ab88:	b510      	push	{r4, lr}
    ab8a:	4c0a      	ldr	r4, [pc, #40]	; (abb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1998>)
    ab8c:	2301      	movs	r3, #1
    ab8e:	2100      	movs	r1, #0
    ab90:	68a0      	ldr	r0, [r4, #8]
    ab92:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ab96:	3078      	adds	r0, #120	; 0x78
    ab98:	f003 fcd5 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ab9c:	b120      	cbz	r0, aba8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>
    ab9e:	68a1      	ldr	r1, [r4, #8]
    aba0:	201c      	movs	r0, #28
    aba2:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    aba6:	bd10      	pop	{r4, pc}
    aba8:	f240 61ff 	movw	r1, #1791	; 0x6ff
    abac:	2031      	movs	r0, #49	; 0x31
    abae:	f7fa fa3d 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    abb2:	0000      	.short	0x0000
    abb4:	2000014c 	.word	0x2000014c
    abb8:	480a      	ldr	r0, [pc, #40]	; (abe4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c8>)
    abba:	b510      	push	{r4, lr}
    abbc:	6880      	ldr	r0, [r0, #8]
    abbe:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    abc2:	f3c1 1201 	ubfx	r2, r1, #4, #2
    abc6:	2a01      	cmp	r2, #1
    abc8:	d004      	beq.n	abd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b8>
    abca:	f240 7106 	movw	r1, #1798	; 0x706
    abce:	2031      	movs	r0, #49	; 0x31
    abd0:	f7fa fa2c 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    abd4:	f021 0110 	bic.w	r1, r1, #16
    abd8:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    abdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    abe0:	f7fe bc50 	b.w	9484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    abe4:	2000014c 	.word	0x2000014c
    abe8:	b510      	push	{r4, lr}
    abea:	4c0a      	ldr	r4, [pc, #40]	; (ac14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f8>)
    abec:	2301      	movs	r3, #1
    abee:	2100      	movs	r1, #0
    abf0:	68a0      	ldr	r0, [r4, #8]
    abf2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    abf6:	3078      	adds	r0, #120	; 0x78
    abf8:	f003 fca5 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    abfc:	b120      	cbz	r0, ac08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ec>
    abfe:	68a1      	ldr	r1, [r4, #8]
    ac00:	200e      	movs	r0, #14
    ac02:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    ac06:	bd10      	pop	{r4, pc}
    ac08:	f240 61f2 	movw	r1, #1778	; 0x6f2
    ac0c:	2031      	movs	r0, #49	; 0x31
    ac0e:	f7fa fa0d 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac12:	0000      	.short	0x0000
    ac14:	2000014c 	.word	0x2000014c
    ac18:	4804      	ldr	r0, [pc, #16]	; (ac2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a10>)
    ac1a:	6880      	ldr	r0, [r0, #8]
    ac1c:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    ac20:	f021 0104 	bic.w	r1, r1, #4
    ac24:	7001      	strb	r1, [r0, #0]
    ac26:	f7fe bc2d 	b.w	9484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    ac2a:	0000      	.short	0x0000
    ac2c:	2000014c 	.word	0x2000014c
    ac30:	4809      	ldr	r0, [pc, #36]	; (ac58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a3c>)
    ac32:	b510      	push	{r4, lr}
    ac34:	6880      	ldr	r0, [r0, #8]
    ac36:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ac3a:	2910      	cmp	r1, #16
    ac3c:	d004      	beq.n	ac48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2c>
    ac3e:	f240 6189 	movw	r1, #1673	; 0x689
    ac42:	2031      	movs	r0, #49	; 0x31
    ac44:	f7fa f9f2 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac48:	2101      	movs	r1, #1
    ac4a:	f880 10bb 	strb.w	r1, [r0, #187]	; 0xbb
    ac4e:	2111      	movs	r1, #17
    ac50:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    ac54:	bd10      	pop	{r4, pc}
    ac56:	0000      	.short	0x0000
    ac58:	2000014c 	.word	0x2000014c
    ac5c:	b510      	push	{r4, lr}
    ac5e:	4c0a      	ldr	r4, [pc, #40]	; (ac88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    ac60:	2301      	movs	r3, #1
    ac62:	2100      	movs	r1, #0
    ac64:	68a0      	ldr	r0, [r4, #8]
    ac66:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ac6a:	3078      	adds	r0, #120	; 0x78
    ac6c:	f003 fc6b 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ac70:	b120      	cbz	r0, ac7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a60>
    ac72:	68a1      	ldr	r1, [r4, #8]
    ac74:	201f      	movs	r0, #31
    ac76:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    ac7a:	bd10      	pop	{r4, pc}
    ac7c:	f240 7112 	movw	r1, #1810	; 0x712
    ac80:	2031      	movs	r0, #49	; 0x31
    ac82:	f7fa f9d3 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac86:	0000      	.short	0x0000
    ac88:	2000014c 	.word	0x2000014c
    ac8c:	4808      	ldr	r0, [pc, #32]	; (acb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a94>)
    ac8e:	b510      	push	{r4, lr}
    ac90:	6880      	ldr	r0, [r0, #8]
    ac92:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ac96:	2921      	cmp	r1, #33	; 0x21
    ac98:	d005      	beq.n	aca6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a8a>
    ac9a:	b121      	cbz	r1, aca6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a8a>
    ac9c:	f240 7119 	movw	r1, #1817	; 0x719
    aca0:	2031      	movs	r0, #49	; 0x31
    aca2:	f7fa f9c3 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aca6:	2122      	movs	r1, #34	; 0x22
    aca8:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    acac:	bd10      	pop	{r4, pc}
    acae:	0000      	.short	0x0000
    acb0:	2000014c 	.word	0x2000014c
    acb4:	4807      	ldr	r0, [pc, #28]	; (acd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ab8>)
    acb6:	b510      	push	{r4, lr}
    acb8:	6880      	ldr	r0, [r0, #8]
    acba:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    acbe:	2915      	cmp	r1, #21
    acc0:	d004      	beq.n	accc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ab0>
    acc2:	f240 619e 	movw	r1, #1694	; 0x69e
    acc6:	2031      	movs	r0, #49	; 0x31
    acc8:	f7fa f9b0 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    accc:	2119      	movs	r1, #25
    acce:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    acd2:	bd10      	pop	{r4, pc}
    acd4:	2000014c 	.word	0x2000014c
    acd8:	b510      	push	{r4, lr}
    acda:	4c0a      	ldr	r4, [pc, #40]	; (ad04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae8>)
    acdc:	2301      	movs	r3, #1
    acde:	2100      	movs	r1, #0
    ace0:	68a0      	ldr	r0, [r4, #8]
    ace2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ace6:	3078      	adds	r0, #120	; 0x78
    ace8:	f003 fc2d 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    acec:	b120      	cbz	r0, acf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1adc>
    acee:	68a1      	ldr	r1, [r4, #8]
    acf0:	2004      	movs	r0, #4
    acf2:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    acf6:	bd10      	pop	{r4, pc}
    acf8:	f240 6183 	movw	r1, #1667	; 0x683
    acfc:	2031      	movs	r0, #49	; 0x31
    acfe:	f7fa f995 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad02:	0000      	.short	0x0000
    ad04:	2000014c 	.word	0x2000014c
    ad08:	4807      	ldr	r0, [pc, #28]	; (ad28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b0c>)
    ad0a:	b510      	push	{r4, lr}
    ad0c:	6880      	ldr	r0, [r0, #8]
    ad0e:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ad12:	2915      	cmp	r1, #21
    ad14:	d004      	beq.n	ad20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b04>
    ad16:	f44f 61d3 	mov.w	r1, #1688	; 0x698
    ad1a:	2031      	movs	r0, #49	; 0x31
    ad1c:	f7fa f986 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad20:	2117      	movs	r1, #23
    ad22:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    ad26:	bd10      	pop	{r4, pc}
    ad28:	2000014c 	.word	0x2000014c
    ad2c:	b570      	push	{r4, r5, r6, lr}
    ad2e:	4d1b      	ldr	r5, [pc, #108]	; (ad9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b80>)
    ad30:	68a8      	ldr	r0, [r5, #8]
    ad32:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ad36:	291b      	cmp	r1, #27
    ad38:	d002      	beq.n	ad40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b24>
    ad3a:	f44f 61d7 	mov.w	r1, #1720	; 0x6b8
    ad3e:	e007      	b.n	ad50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b34>
    ad40:	2400      	movs	r4, #0
    ad42:	f880 40bb 	strb.w	r4, [r0, #187]	; 0xbb
    ad46:	f890 11d4 	ldrb.w	r1, [r0, #468]	; 0x1d4
    ad4a:	b121      	cbz	r1, ad56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b3a>
    ad4c:	f240 61bc 	movw	r1, #1724	; 0x6bc
    ad50:	2031      	movs	r0, #49	; 0x31
    ad52:	f7fa f96b 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad56:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    ad5a:	b141      	cbz	r1, ad6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b52>
    ad5c:	f880 40bc 	strb.w	r4, [r0, #188]	; 0xbc
    ad60:	8801      	ldrh	r1, [r0, #0]
    ad62:	f8a0 11d8 	strh.w	r1, [r0, #472]	; 0x1d8
    ad66:	f880 41d6 	strb.w	r4, [r0, #470]	; 0x1d6
    ad6a:	210c      	movs	r1, #12
    ad6c:	e008      	b.n	ad80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b64>
    ad6e:	8801      	ldrh	r1, [r0, #0]
    ad70:	f8a0 11d8 	strh.w	r1, [r0, #472]	; 0x1d8
    ad74:	f880 41d6 	strb.w	r4, [r0, #470]	; 0x1d6
    ad78:	2101      	movs	r1, #1
    ad7a:	f880 11da 	strb.w	r1, [r0, #474]	; 0x1da
    ad7e:	210b      	movs	r1, #11
    ad80:	f880 11d4 	strb.w	r1, [r0, #468]	; 0x1d4
    ad84:	8800      	ldrh	r0, [r0, #0]
    ad86:	f7fa fd6b 	bl	5860 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    ad8a:	f003 f810 	bl	ddae <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    ad8e:	f7fc fa83 	bl	7298 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ad92:	68a8      	ldr	r0, [r5, #8]
    ad94:	f880 4086 	strb.w	r4, [r0, #134]	; 0x86
    ad98:	bd70      	pop	{r4, r5, r6, pc}
    ad9a:	0000      	.short	0x0000
    ad9c:	2000014c 	.word	0x2000014c
    ada0:	b510      	push	{r4, lr}
    ada2:	4c08      	ldr	r4, [pc, #32]	; (adc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba8>)
    ada4:	2301      	movs	r3, #1
    ada6:	4619      	mov	r1, r3
    ada8:	68a0      	ldr	r0, [r4, #8]
    adaa:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    adae:	3078      	adds	r0, #120	; 0x78
    adb0:	f003 fbc9 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    adb4:	2800      	cmp	r0, #0
    adb6:	d103      	bne.n	adc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba4>
    adb8:	68a1      	ldr	r1, [r4, #8]
    adba:	2008      	movs	r0, #8
    adbc:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    adc0:	bd10      	pop	{r4, pc}
    adc2:	0000      	.short	0x0000
    adc4:	2000014c 	.word	0x2000014c
    adc8:	4814      	ldr	r0, [pc, #80]	; (ae1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c00>)
    adca:	b510      	push	{r4, lr}
    adcc:	68c1      	ldr	r1, [r0, #12]
    adce:	6880      	ldr	r0, [r0, #8]
    add0:	7909      	ldrb	r1, [r1, #4]
    add2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    add6:	2a0a      	cmp	r2, #10
    add8:	d109      	bne.n	adee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bd2>
    adda:	f890 20fa 	ldrb.w	r2, [r0, #250]	; 0xfa
    adde:	428a      	cmp	r2, r1
    ade0:	d105      	bne.n	adee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bd2>
    ade2:	2100      	movs	r1, #0
    ade4:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    ade8:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
    adec:	bd10      	pop	{r4, pc}
    adee:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    adf2:	0713      	lsls	r3, r2, #28
    adf4:	d507      	bpl.n	ae06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bea>
    adf6:	f022 0108 	bic.w	r1, r2, #8
    adfa:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    adfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ae02:	f7fe bb3f 	b.w	9484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    ae06:	29ff      	cmp	r1, #255	; 0xff
    ae08:	d004      	beq.n	ae14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bf8>
    ae0a:	f240 6176 	movw	r1, #1654	; 0x676
    ae0e:	2031      	movs	r0, #49	; 0x31
    ae10:	f7fa f90c 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ae18:	f7ff be7c 	b.w	ab14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f8>
    ae1c:	2000014c 	.word	0x2000014c
    ae20:	b510      	push	{r4, lr}
    ae22:	4c15      	ldr	r4, [pc, #84]	; (ae78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c5c>)
    ae24:	68a0      	ldr	r0, [r4, #8]
    ae26:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    ae2a:	0789      	lsls	r1, r1, #30
    ae2c:	d411      	bmi.n	ae52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c36>
    ae2e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ae32:	2301      	movs	r3, #1
    ae34:	2100      	movs	r1, #0
    ae36:	3078      	adds	r0, #120	; 0x78
    ae38:	f003 fb85 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae3c:	b120      	cbz	r0, ae48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c2c>
    ae3e:	68a1      	ldr	r1, [r4, #8]
    ae40:	2006      	movs	r0, #6
    ae42:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    ae46:	e009      	b.n	ae5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c40>
    ae48:	f240 61de 	movw	r1, #1758	; 0x6de
    ae4c:	2031      	movs	r0, #49	; 0x31
    ae4e:	f7fa f8ed 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae52:	2100      	movs	r1, #0
    ae54:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
    ae58:	f880 11c4 	strb.w	r1, [r0, #452]	; 0x1c4
    ae5c:	68a0      	ldr	r0, [r4, #8]
    ae5e:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    ae62:	0780      	lsls	r0, r0, #30
    ae64:	d507      	bpl.n	ae76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c5a>
    ae66:	f7fe fb0d 	bl	9484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    ae6a:	68a0      	ldr	r0, [r4, #8]
    ae6c:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    ae70:	f021 0102 	bic.w	r1, r1, #2
    ae74:	7001      	strb	r1, [r0, #0]
    ae76:	bd10      	pop	{r4, pc}
    ae78:	2000014c 	.word	0x2000014c
    ae7c:	4808      	ldr	r0, [pc, #32]	; (aea0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c84>)
    ae7e:	b510      	push	{r4, lr}
    ae80:	6880      	ldr	r0, [r0, #8]
    ae82:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    ae86:	b941      	cbnz	r1, ae9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c7e>
    ae88:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    ae8c:	2301      	movs	r3, #1
    ae8e:	2106      	movs	r1, #6
    ae90:	3078      	adds	r0, #120	; 0x78
    ae92:	f003 fb58 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae96:	2800      	cmp	r0, #0
    ae98:	d000      	beq.n	ae9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c80>
    ae9a:	2001      	movs	r0, #1
    ae9c:	bd10      	pop	{r4, pc}
    ae9e:	0000      	.short	0x0000
    aea0:	2000014c 	.word	0x2000014c
    aea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aea6:	4c5a      	ldr	r4, [pc, #360]	; (b010 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1df4>)
    aea8:	4606      	mov	r6, r0
    aeaa:	4615      	mov	r5, r2
    aeac:	68a0      	ldr	r0, [r4, #8]
    aeae:	2200      	movs	r2, #0
    aeb0:	b111      	cbz	r1, aeb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c9c>
    aeb2:	f8a0 211e 	strh.w	r2, [r0, #286]	; 0x11e
    aeb6:	e006      	b.n	aec6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1caa>
    aeb8:	f8b0 111e 	ldrh.w	r1, [r0, #286]	; 0x11e
    aebc:	f8b0 210e 	ldrh.w	r2, [r0, #270]	; 0x10e
    aec0:	4411      	add	r1, r2
    aec2:	f8a0 111e 	strh.w	r1, [r0, #286]	; 0x11e
    aec6:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    aeca:	f88d 1000 	strb.w	r1, [sp]
    aece:	9900      	ldr	r1, [sp, #0]
    aed0:	9100      	str	r1, [sp, #0]
    aed2:	f89d 1000 	ldrb.w	r1, [sp]
    aed6:	b939      	cbnz	r1, aee8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ccc>
    aed8:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    aedc:	2301      	movs	r3, #1
    aede:	4619      	mov	r1, r3
    aee0:	3078      	adds	r0, #120	; 0x78
    aee2:	f003 fb30 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aee6:	b130      	cbz	r0, aef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cda>
    aee8:	68a0      	ldr	r0, [r4, #8]
    aeea:	f830 1fb0 	ldrh.w	r1, [r0, #176]!
    aeee:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    aef2:	4411      	add	r1, r2
    aef4:	8001      	strh	r1, [r0, #0]
    aef6:	68a0      	ldr	r0, [r4, #8]
    aef8:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
    aefc:	b132      	cbz	r2, af0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cf0>
    aefe:	f8b0 10b2 	ldrh.w	r1, [r0, #178]	; 0xb2
    af02:	f8b0 310e 	ldrh.w	r3, [r0, #270]	; 0x10e
    af06:	4419      	add	r1, r3
    af08:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    af0c:	f990 70ba 	ldrsb.w	r7, [r0, #186]	; 0xba
    af10:	2f00      	cmp	r7, #0
    af12:	dd06      	ble.n	af22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d06>
    af14:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
    af18:	f8b0 310e 	ldrh.w	r3, [r0, #270]	; 0x10e
    af1c:	4419      	add	r1, r3
    af1e:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8
    af22:	233d      	movs	r3, #61	; 0x3d
    af24:	21ff      	movs	r1, #255	; 0xff
    af26:	b116      	cbz	r6, af2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d12>
    af28:	f880 309d 	strb.w	r3, [r0, #157]	; 0x9d
    af2c:	e012      	b.n	af54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d38>
    af2e:	7824      	ldrb	r4, [r4, #0]
    af30:	2c02      	cmp	r4, #2
    af32:	d009      	beq.n	af48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d2c>
    af34:	2c01      	cmp	r4, #1
    af36:	d011      	beq.n	af5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d40>
    af38:	b33d      	cbz	r5, af8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d6e>
    af3a:	f100 029c 	add.w	r2, r0, #156	; 0x9c
    af3e:	7011      	strb	r1, [r2, #0]
    af40:	06e9      	lsls	r1, r5, #27
    af42:	d50e      	bpl.n	af62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d46>
    af44:	211e      	movs	r1, #30
    af46:	e018      	b.n	af7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d5e>
    af48:	f890 20fe 	ldrb.w	r2, [r0, #254]	; 0xfe
    af4c:	2a06      	cmp	r2, #6
    af4e:	d044      	beq.n	afda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbe>
    af50:	2216      	movs	r2, #22
    af52:	e042      	b.n	afda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbe>
    af54:	f100 029c 	add.w	r2, r0, #156	; 0x9c
    af58:	7011      	strb	r1, [r2, #0]
    af5a:	e047      	b.n	afec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    af5c:	f890 218a 	ldrb.w	r2, [r0, #394]	; 0x18a
    af60:	e03b      	b.n	afda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbe>
    af62:	0729      	lsls	r1, r5, #28
    af64:	d502      	bpl.n	af6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d50>
    af66:	f880 309d 	strb.w	r3, [r0, #157]	; 0x9d
    af6a:	e03f      	b.n	afec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    af6c:	06a9      	lsls	r1, r5, #26
    af6e:	d501      	bpl.n	af74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d58>
    af70:	2123      	movs	r1, #35	; 0x23
    af72:	e002      	b.n	af7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d5e>
    af74:	07a9      	lsls	r1, r5, #30
    af76:	d003      	beq.n	af80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d64>
    af78:	212a      	movs	r1, #42	; 0x2a
    af7a:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    af7e:	e035      	b.n	afec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    af80:	f640 41b1 	movw	r1, #3249	; 0xcb1
    af84:	2031      	movs	r0, #49	; 0x31
    af86:	f7fa f851 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af8a:	b12a      	cbz	r2, af98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7c>
    af8c:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	; 0xb2
    af90:	f8b0 30b4 	ldrh.w	r3, [r0, #180]	; 0xb4
    af94:	429a      	cmp	r2, r3
    af96:	d216      	bcs.n	afc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1daa>
    af98:	2f00      	cmp	r7, #0
    af9a:	dd05      	ble.n	afa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d8c>
    af9c:	f8b0 20b8 	ldrh.w	r2, [r0, #184]	; 0xb8
    afa0:	f8b0 30b4 	ldrh.w	r3, [r0, #180]	; 0xb4
    afa4:	429a      	cmp	r2, r3
    afa6:	d20e      	bcs.n	afc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1daa>
    afa8:	f8b0 30b0 	ldrh.w	r3, [r0, #176]	; 0xb0
    afac:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
    afb0:	4293      	cmp	r3, r2
    afb2:	d30a      	bcc.n	afca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dae>
    afb4:	f890 3188 	ldrb.w	r3, [r0, #392]	; 0x188
    afb8:	f88d 3000 	strb.w	r3, [sp]
    afbc:	9b00      	ldr	r3, [sp, #0]
    afbe:	9300      	str	r3, [sp, #0]
    afc0:	f89d 3000 	ldrb.w	r3, [sp]
    afc4:	b10b      	cbz	r3, afca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dae>
    afc6:	2222      	movs	r2, #34	; 0x22
    afc8:	e007      	b.n	afda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbe>
    afca:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
    afce:	b13b      	cbz	r3, afe0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc4>
    afd0:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
    afd4:	4293      	cmp	r3, r2
    afd6:	d309      	bcc.n	afec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    afd8:	2208      	movs	r2, #8
    afda:	f880 209d 	strb.w	r2, [r0, #157]	; 0x9d
    afde:	e7b9      	b.n	af54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d38>
    afe0:	f8b0 20ac 	ldrh.w	r2, [r0, #172]	; 0xac
    afe4:	2a06      	cmp	r2, #6
    afe6:	d301      	bcc.n	afec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    afe8:	223e      	movs	r2, #62	; 0x3e
    afea:	e7f6      	b.n	afda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbe>
    afec:	f890 109c 	ldrb.w	r1, [r0, #156]	; 0x9c
    aff0:	f88d 1000 	strb.w	r1, [sp]
    aff4:	9900      	ldr	r1, [sp, #0]
    aff6:	9100      	str	r1, [sp, #0]
    aff8:	f89d 1000 	ldrb.w	r1, [sp]
    affc:	b119      	cbz	r1, b006 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dea>
    affe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b002:	f004 bdd1 	b.w	fba8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    b006:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b00a:	2100      	movs	r1, #0
    b00c:	f7fd bb1c 	b.w	8648 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    b010:	2000014c 	.word	0x2000014c
    b014:	b570      	push	{r4, r5, r6, lr}
    b016:	4d2d      	ldr	r5, [pc, #180]	; (b0cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eb0>)
    b018:	68a8      	ldr	r0, [r5, #8]
    b01a:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    b01e:	b151      	cbz	r1, b036 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e1a>
    b020:	2901      	cmp	r1, #1
    b022:	d008      	beq.n	b036 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e1a>
    b024:	2902      	cmp	r1, #2
    b026:	d009      	beq.n	b03c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e20>
    b028:	2903      	cmp	r1, #3
    b02a:	d007      	beq.n	b03c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e20>
    b02c:	f640 216d 	movw	r1, #2669	; 0xa6d
    b030:	2031      	movs	r0, #49	; 0x31
    b032:	f7f9 fffb 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b036:	f8b0 110c 	ldrh.w	r1, [r0, #268]	; 0x10c
    b03a:	e035      	b.n	b0a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e8c>
    b03c:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    b040:	2908      	cmp	r1, #8
    b042:	d034      	beq.n	b0ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e92>
    b044:	f8b0 10ac 	ldrh.w	r1, [r0, #172]	; 0xac
    b048:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
    b04c:	2400      	movs	r4, #0
    b04e:	1c8b      	adds	r3, r1, #2
    b050:	429a      	cmp	r2, r3
    b052:	d306      	bcc.n	b062 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e46>
    b054:	1a51      	subs	r1, r2, r1
    b056:	1e89      	subs	r1, r1, #2
    b058:	040c      	lsls	r4, r1, #16
    b05a:	0c24      	lsrs	r4, r4, #16
    b05c:	d001      	beq.n	b062 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e46>
    b05e:	1e64      	subs	r4, r4, #1
    b060:	b2a4      	uxth	r4, r4
    b062:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
    b066:	b139      	cbz	r1, b078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e5c>
    b068:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b06c:	2301      	movs	r3, #1
    b06e:	2109      	movs	r1, #9
    b070:	3078      	adds	r0, #120	; 0x78
    b072:	f003 fa68 	bl	e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b076:	b330      	cbz	r0, b0c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eaa>
    b078:	f7ff ff00 	bl	ae7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c60>
    b07c:	b168      	cbz	r0, b09a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e7e>
    b07e:	68a9      	ldr	r1, [r5, #8]
    b080:	2000      	movs	r0, #0
    b082:	31a0      	adds	r1, #160	; 0xa0
    b084:	c906      	ldmia	r1, {r1, r2}
    b086:	1c8b      	adds	r3, r1, #2
    b088:	429a      	cmp	r2, r3
    b08a:	d303      	bcc.n	b094 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e78>
    b08c:	1a50      	subs	r0, r2, r1
    b08e:	1e80      	subs	r0, r0, #2
    b090:	d000      	beq.n	b094 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e78>
    b092:	1e40      	subs	r0, r0, #1
    b094:	42a0      	cmp	r0, r4
    b096:	d200      	bcs.n	b09a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e7e>
    b098:	b284      	uxth	r4, r0
    b09a:	b10c      	cbz	r4, b0a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e84>
    b09c:	1e64      	subs	r4, r4, #1
    b09e:	b2a4      	uxth	r4, r4
    b0a0:	68a8      	ldr	r0, [r5, #8]
    b0a2:	f8b0 110c 	ldrh.w	r1, [r0, #268]	; 0x10c
    b0a6:	4421      	add	r1, r4
    b0a8:	f8a0 1108 	strh.w	r1, [r0, #264]	; 0x108
    b0ac:	bd70      	pop	{r4, r5, r6, pc}
    b0ae:	f8b0 10ac 	ldrh.w	r1, [r0, #172]	; 0xac
    b0b2:	2903      	cmp	r1, #3
    b0b4:	d3bf      	bcc.n	b036 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e1a>
    b0b6:	f830 1f7c 	ldrh.w	r1, [r0, #124]!
    b0ba:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    b0bc:	4411      	add	r1, r2
    b0be:	1c49      	adds	r1, r1, #1
    b0c0:	f8a0 108c 	strh.w	r1, [r0, #140]	; 0x8c
    b0c4:	bd70      	pop	{r4, r5, r6, pc}
    b0c6:	2400      	movs	r4, #0
    b0c8:	e7ea      	b.n	b0a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e84>
    b0ca:	0000      	.short	0x0000
    b0cc:	2000014c 	.word	0x2000014c

0000b0d0 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    b0d0:	4903      	ldr	r1, [pc, #12]	; (b0e0 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    b0d2:	884a      	ldrh	r2, [r1, #2]
    b0d4:	8002      	strh	r2, [r0, #0]
    b0d6:	7809      	ldrb	r1, [r1, #0]
    b0d8:	7081      	strb	r1, [r0, #2]
    b0da:	2000      	movs	r0, #0
    b0dc:	4770      	bx	lr
    b0de:	0000      	.short	0x0000
    b0e0:	20001254 	.word	0x20001254

0000b0e4 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    b0e4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    b0e6:	460c      	mov	r4, r1
    b0e8:	4605      	mov	r5, r0
    b0ea:	8800      	ldrh	r0, [r0, #0]
    b0ec:	4669      	mov	r1, sp
    b0ee:	f003 fa00 	bl	e4f2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b0f2:	2200      	movs	r2, #0
    b0f4:	b128      	cbz	r0, b102 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    b0f6:	f8c4 2002 	str.w	r2, [r4, #2]
    b0fa:	71a2      	strb	r2, [r4, #6]
    b0fc:	8022      	strh	r2, [r4, #0]
    b0fe:	2002      	movs	r0, #2
    b100:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b102:	9901      	ldr	r1, [sp, #4]
    b104:	f111 0178 	adds.w	r1, r1, #120	; 0x78
    b108:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
    b10c:	f8d1 0016 	ldr.w	r0, [r1, #22]
    b110:	f8c4 0002 	str.w	r0, [r4, #2]
    b114:	7e88      	ldrb	r0, [r1, #26]
    b116:	71a0      	strb	r0, [r4, #6]
    b118:	8828      	ldrh	r0, [r5, #0]
    b11a:	8020      	strh	r0, [r4, #0]
    b11c:	f891 0054 	ldrb.w	r0, [r1, #84]	; 0x54
    b120:	f88d 0008 	strb.w	r0, [sp, #8]
    b124:	9802      	ldr	r0, [sp, #8]
    b126:	9002      	str	r0, [sp, #8]
    b128:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b12c:	2800      	cmp	r0, #0
    b12e:	d1eb      	bne.n	b108 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    b130:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

0000b134 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    b134:	b510      	push	{r4, lr}
    b136:	4604      	mov	r4, r0
    b138:	f005 fc66 	bl	10a08 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    b13c:	b130      	cbz	r0, b14c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    b13e:	4804      	ldr	r0, [pc, #16]	; (b150 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    b140:	8881      	ldrh	r1, [r0, #4]
    b142:	8021      	strh	r1, [r4, #0]
    b144:	88c0      	ldrh	r0, [r0, #6]
    b146:	8060      	strh	r0, [r4, #2]
    b148:	2000      	movs	r0, #0
    b14a:	bd10      	pop	{r4, pc}
    b14c:	2001      	movs	r0, #1
    b14e:	bd10      	pop	{r4, pc}
    b150:	20000234 	.word	0x20000234

0000b154 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    b154:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    b156:	4605      	mov	r5, r0
    b158:	f005 fc78 	bl	10a4c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x344>
    b15c:	b310      	cbz	r0, b1a4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x50>
    b15e:	2400      	movs	r4, #0
    b160:	a802      	add	r0, sp, #8
    b162:	f88d 4004 	strb.w	r4, [sp, #4]
    b166:	f88d 4008 	strb.w	r4, [sp, #8]
    b16a:	9000      	str	r0, [sp, #0]
    b16c:	78aa      	ldrb	r2, [r5, #2]
    b16e:	7869      	ldrb	r1, [r5, #1]
    b170:	7828      	ldrb	r0, [r5, #0]
    b172:	ab01      	add	r3, sp, #4
    b174:	f005 fd3b 	bl	10bee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e6>
    b178:	2800      	cmp	r0, #0
    b17a:	d112      	bne.n	b1a2 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4e>
    b17c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b180:	f005 fbaa 	bl	108d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    b184:	b180      	cbz	r0, b1a8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    b186:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b18a:	f005 fba5 	bl	108d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    b18e:	b158      	cbz	r0, b1a8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    b190:	4806      	ldr	r0, [pc, #24]	; (b1ac <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>)
    b192:	f89d 1004 	ldrb.w	r1, [sp, #4]
    b196:	7381      	strb	r1, [r0, #14]
    b198:	f89d 1008 	ldrb.w	r1, [sp, #8]
    b19c:	73c1      	strb	r1, [r0, #15]
    b19e:	8204      	strh	r4, [r0, #16]
    b1a0:	2000      	movs	r0, #0
    b1a2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b1a4:	2001      	movs	r0, #1
    b1a6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b1a8:	2011      	movs	r0, #17
    b1aa:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b1ac:	20001254 	.word	0x20001254

0000b1b0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    b1b0:	7801      	ldrb	r1, [r0, #0]
    b1b2:	b171      	cbz	r1, b1d2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b1b4:	7841      	ldrb	r1, [r0, #1]
    b1b6:	b161      	cbz	r1, b1d2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b1b8:	8841      	ldrh	r1, [r0, #2]
    b1ba:	291b      	cmp	r1, #27
    b1bc:	d309      	bcc.n	b1d2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b1be:	8881      	ldrh	r1, [r0, #4]
    b1c0:	291b      	cmp	r1, #27
    b1c2:	d306      	bcc.n	b1d2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b1c4:	4904      	ldr	r1, [pc, #16]	; (b1d8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    b1c6:	6802      	ldr	r2, [r0, #0]
    b1c8:	600a      	str	r2, [r1, #0]
    b1ca:	8880      	ldrh	r0, [r0, #4]
    b1cc:	8088      	strh	r0, [r1, #4]
    b1ce:	2000      	movs	r0, #0
    b1d0:	4770      	bx	lr
    b1d2:	2012      	movs	r0, #18
    b1d4:	4770      	bx	lr
    b1d6:	0000      	.short	0x0000
    b1d8:	20001254 	.word	0x20001254

0000b1dc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    b1dc:	6800      	ldr	r0, [r0, #0]
    b1de:	f240 41e2 	movw	r1, #1250	; 0x4e2
    b1e2:	4288      	cmp	r0, r1
    b1e4:	d303      	bcc.n	b1ee <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    b1e6:	4903      	ldr	r1, [pc, #12]	; (b1f4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    b1e8:	6088      	str	r0, [r1, #8]
    b1ea:	2000      	movs	r0, #0
    b1ec:	4770      	bx	lr
    b1ee:	2012      	movs	r0, #18
    b1f0:	4770      	bx	lr
    b1f2:	0000      	.short	0x0000
    b1f4:	20001254 	.word	0x20001254

0000b1f8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    b1f8:	4a03      	ldr	r2, [pc, #12]	; (b208 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    b1fa:	e9d2 1200 	ldrd	r1, r2, [r2]
    b1fe:	6001      	str	r1, [r0, #0]
    b200:	6042      	str	r2, [r0, #4]
    b202:	2000      	movs	r0, #0
    b204:	4770      	bx	lr
    b206:	0000      	.short	0x0000
    b208:	0000b534 	.word	0x0000b534

0000b20c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    b20c:	b510      	push	{r4, lr}
    b20e:	2005      	movs	r0, #5
    b210:	f000 fa14 	bl	b63c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    b214:	f7fd fe20 	bl	8e58 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    b218:	4902      	ldr	r1, [pc, #8]	; (b224 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    b21a:	4801      	ldr	r0, [pc, #4]	; (b220 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    b21c:	6008      	str	r0, [r1, #0]
    b21e:	bd10      	pop	{r4, pc}
    b220:	0000b27d 	.word	0x0000b27d
    b224:	20000230 	.word	0x20000230

0000b228 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    b228:	b510      	push	{r4, lr}
    b22a:	f003 f8b6 	bl	e39a <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    b22e:	f7fb fbbd 	bl	69ac <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    b232:	f000 fa25 	bl	b680 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    b236:	f003 fd63 	bl	ed00 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    b23a:	480e      	ldr	r0, [pc, #56]	; (b274 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>)
    b23c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b240:	4b0d      	ldr	r3, [pc, #52]	; (b278 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50>)
    b242:	8281      	strh	r1, [r0, #20]
    b244:	2100      	movs	r1, #0
    b246:	7581      	strb	r1, [r0, #22]
    b248:	8301      	strh	r1, [r0, #24]
    b24a:	221b      	movs	r2, #27
    b24c:	801a      	strh	r2, [r3, #0]
    b24e:	f44f 74a4 	mov.w	r4, #328	; 0x148
    b252:	805c      	strh	r4, [r3, #2]
    b254:	809a      	strh	r2, [r3, #4]
    b256:	80dc      	strh	r4, [r3, #6]
    b258:	7381      	strb	r1, [r0, #14]
    b25a:	73c1      	strb	r1, [r0, #15]
    b25c:	2303      	movs	r3, #3
    b25e:	7003      	strb	r3, [r0, #0]
    b260:	2302      	movs	r3, #2
    b262:	7043      	strb	r3, [r0, #1]
    b264:	8042      	strh	r2, [r0, #2]
    b266:	8082      	strh	r2, [r0, #4]
    b268:	f640 62a6 	movw	r2, #3750	; 0xea6
    b26c:	6082      	str	r2, [r0, #8]
    b26e:	7481      	strb	r1, [r0, #18]
    b270:	7301      	strb	r1, [r0, #12]
    b272:	bd10      	pop	{r4, pc}
    b274:	20001254 	.word	0x20001254
    b278:	20000234 	.word	0x20000234
    b27c:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b280:	4692      	mov	sl, r2
    b282:	460f      	mov	r7, r1
    b284:	4681      	mov	r9, r0
    b286:	f005 fbbf 	bl	10a08 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    b28a:	2800      	cmp	r0, #0
    b28c:	d063      	beq.n	b356 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    b28e:	4933      	ldr	r1, [pc, #204]	; (b35c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x134>)
    b290:	f8b9 2058 	ldrh.w	r2, [r9, #88]	; 0x58
    b294:	f8b9 6056 	ldrh.w	r6, [r9, #86]	; 0x56
    b298:	8808      	ldrh	r0, [r1, #0]
    b29a:	4290      	cmp	r0, r2
    b29c:	d300      	bcc.n	b2a0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x78>
    b29e:	4610      	mov	r0, r2
    b2a0:	4680      	mov	r8, r0
    b2a2:	8888      	ldrh	r0, [r1, #4]
    b2a4:	42b0      	cmp	r0, r6
    b2a6:	d200      	bcs.n	b2aa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x82>
    b2a8:	4606      	mov	r6, r0
    b2aa:	884c      	ldrh	r4, [r1, #2]
    b2ac:	f640 0048 	movw	r0, #2120	; 0x848
    b2b0:	4284      	cmp	r4, r0
    b2b2:	d300      	bcc.n	b2b6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8e>
    b2b4:	4604      	mov	r4, r0
    b2b6:	88cd      	ldrh	r5, [r1, #6]
    b2b8:	4285      	cmp	r5, r0
    b2ba:	d300      	bcc.n	b2be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
    b2bc:	4605      	mov	r5, r0
    b2be:	4284      	cmp	r4, r0
    b2c0:	d300      	bcc.n	b2c4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    b2c2:	4604      	mov	r4, r0
    b2c4:	f44f 71a4 	mov.w	r1, #328	; 0x148
    b2c8:	2e1b      	cmp	r6, #27
    b2ca:	d001      	beq.n	b2d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa8>
    b2cc:	428d      	cmp	r5, r1
    b2ce:	d104      	bne.n	b2da <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb2>
    b2d0:	f1b8 0f1b 	cmp.w	r8, #27
    b2d4:	d03f      	beq.n	b356 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    b2d6:	428c      	cmp	r4, r1
    b2d8:	d03d      	beq.n	b356 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    b2da:	466a      	mov	r2, sp
    b2dc:	4651      	mov	r1, sl
    b2de:	4648      	mov	r0, r9
    b2e0:	f005 fb1d 	bl	1091e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    b2e4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    b2e8:	4641      	mov	r1, r8
    b2ea:	4540      	cmp	r0, r8
    b2ec:	d900      	bls.n	b2f0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
    b2ee:	4608      	mov	r0, r1
    b2f0:	80f8      	strh	r0, [r7, #6]
    b2f2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    b2f6:	42a1      	cmp	r1, r4
    b2f8:	d800      	bhi.n	b2fc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd4>
    b2fa:	460c      	mov	r4, r1
    b2fc:	813c      	strh	r4, [r7, #8]
    b2fe:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    b302:	42b1      	cmp	r1, r6
    b304:	d800      	bhi.n	b308 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
    b306:	460e      	mov	r6, r1
    b308:	807e      	strh	r6, [r7, #2]
    b30a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    b30e:	42a9      	cmp	r1, r5
    b310:	d900      	bls.n	b314 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xec>
    b312:	4629      	mov	r1, r5
    b314:	80b9      	strh	r1, [r7, #4]
    b316:	22ff      	movs	r2, #255	; 0xff
    b318:	703a      	strb	r2, [r7, #0]
    b31a:	381b      	subs	r0, #27
    b31c:	28e0      	cmp	r0, #224	; 0xe0
    b31e:	d902      	bls.n	b326 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfe>
    b320:	f44f 614e 	mov.w	r1, #3296	; 0xce0
    b324:	e014      	b.n	b350 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    b326:	3e1b      	subs	r6, #27
    b328:	2ee0      	cmp	r6, #224	; 0xe0
    b32a:	d902      	bls.n	b332 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x10a>
    b32c:	f640 41e2 	movw	r1, #3298	; 0xce2
    b330:	e00e      	b.n	b350 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    b332:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    b336:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    b33a:	4284      	cmp	r4, r0
    b33c:	d902      	bls.n	b344 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x11c>
    b33e:	f640 41e4 	movw	r1, #3300	; 0xce4
    b342:	e005      	b.n	b350 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    b344:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    b348:	4281      	cmp	r1, r0
    b34a:	d904      	bls.n	b356 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    b34c:	f640 41e6 	movw	r1, #3302	; 0xce6
    b350:	2039      	movs	r0, #57	; 0x39
    b352:	f7f9 fe6b 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b356:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b35a:	0000      	.short	0x0000
    b35c:	20000234 	.word	0x20000234

0000b360 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    b360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b364:	b088      	sub	sp, #32
    b366:	460c      	mov	r4, r1
    b368:	4606      	mov	r6, r0
    b36a:	f003 feef 	bl	f14c <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    b36e:	b198      	cbz	r0, b398 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    b370:	4630      	mov	r0, r6
    b372:	f003 fede 	bl	f132 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    b376:	b130      	cbz	r0, b386 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    b378:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    b37c:	2012      	movs	r0, #18
    b37e:	2900      	cmp	r1, #0
    b380:	d00b      	beq.n	b39a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b382:	2980      	cmp	r1, #128	; 0x80
    b384:	d809      	bhi.n	b39a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b386:	4630      	mov	r0, r6
    b388:	f003 fec2 	bl	f110 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    b38c:	b140      	cbz	r0, b3a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b38e:	4630      	mov	r0, r6
    b390:	f003 fe3a 	bl	f008 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    b394:	b130      	cbz	r0, b3a4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    b396:	e009      	b.n	b3ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    b398:	2042      	movs	r0, #66	; 0x42
    b39a:	b008      	add	sp, #32
    b39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b3a0:	200c      	movs	r0, #12
    b3a2:	e7fa      	b.n	b39a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b3a4:	4630      	mov	r0, r6
    b3a6:	f003 febe 	bl	f126 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    b3aa:	b3a8      	cbz	r0, b418 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    b3ac:	4630      	mov	r0, r6
    b3ae:	f004 f8a1 	bl	f4f4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    b3b2:	2800      	cmp	r0, #0
    b3b4:	d1f4      	bne.n	b3a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b3b6:	4630      	mov	r0, r6
    b3b8:	f003 fe41 	bl	f03e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    b3bc:	2800      	cmp	r0, #0
    b3be:	d1ef      	bne.n	b3a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b3c0:	4630      	mov	r0, r6
    b3c2:	f7fc f919 	bl	75f8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    b3c6:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    b3ca:	f242 7110 	movw	r1, #10000	; 0x2710
    b3ce:	fb00 f801 	mul.w	r8, r0, r1
    b3d2:	78e1      	ldrb	r1, [r4, #3]
    b3d4:	4630      	mov	r0, r6
    b3d6:	f003 fe92 	bl	f0fe <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    b3da:	4630      	mov	r0, r6
    b3dc:	f003 fea5 	bl	f12a <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    b3e0:	b1e8      	cbz	r0, b41e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    b3e2:	2200      	movs	r2, #0
    b3e4:	4611      	mov	r1, r2
    b3e6:	a801      	add	r0, sp, #4
    b3e8:	f7fa f87e 	bl	54e8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    b3ec:	0004      	movs	r4, r0
    b3ee:	d06a      	beq.n	b4c6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    b3f0:	2100      	movs	r1, #0
    b3f2:	f7fb fd07 	bl	6e04 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    b3f6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    b3fa:	8020      	strh	r0, [r4, #0]
    b3fc:	4621      	mov	r1, r4
    b3fe:	4630      	mov	r0, r6
    b400:	f003 feb7 	bl	f172 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    b404:	f005 fb00 	bl	10a08 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    b408:	4d3a      	ldr	r5, [pc, #232]	; (b4f4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    b40a:	2800      	cmp	r0, #0
    b40c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    b410:	d00f      	beq.n	b432 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    b412:	886a      	ldrh	r2, [r5, #2]
    b414:	88a9      	ldrh	r1, [r5, #4]
    b416:	e00e      	b.n	b436 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    b418:	e7ff      	b.n	b41a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    b41a:	2012      	movs	r0, #18
    b41c:	e7bd      	b.n	b39a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b41e:	4642      	mov	r2, r8
    b420:	2100      	movs	r1, #0
    b422:	4630      	mov	r0, r6
    b424:	f7fd f832 	bl	848c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    b428:	2800      	cmp	r0, #0
    b42a:	d0b6      	beq.n	b39a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b42c:	f241 41ab 	movw	r1, #5291	; 0x14ab
    b430:	e053      	b.n	b4da <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    b432:	221b      	movs	r2, #27
    b434:	4611      	mov	r1, r2
    b436:	84c2      	strh	r2, [r0, #38]	; 0x26
    b438:	8501      	strh	r1, [r0, #40]	; 0x28
    b43a:	68a8      	ldr	r0, [r5, #8]
    b43c:	6320      	str	r0, [r4, #48]	; 0x30
    b43e:	f641 574c 	movw	r7, #7500	; 0x1d4c
    b442:	4630      	mov	r0, r6
    b444:	f003 fe79 	bl	f13a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    b448:	b910      	cbnz	r0, b450 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    b44a:	4630      	mov	r0, r6
    b44c:	f003 fe8f 	bl	f16e <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    b450:	6127      	str	r7, [r4, #16]
    b452:	8821      	ldrh	r1, [r4, #0]
    b454:	f8ad 1008 	strh.w	r1, [sp, #8]
    b458:	7ba9      	ldrb	r1, [r5, #14]
    b45a:	f88d 100a 	strb.w	r1, [sp, #10]
    b45e:	7be9      	ldrb	r1, [r5, #15]
    b460:	f88d 100b 	strb.w	r1, [sp, #11]
    b464:	8a29      	ldrh	r1, [r5, #16]
    b466:	f8ad 100c 	strh.w	r1, [sp, #12]
    b46a:	a905      	add	r1, sp, #20
    b46c:	9100      	str	r1, [sp, #0]
    b46e:	2001      	movs	r0, #1
    b470:	ab04      	add	r3, sp, #16
    b472:	aa02      	add	r2, sp, #8
    b474:	4621      	mov	r1, r4
    b476:	f005 fa88 	bl	1098a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    b47a:	b140      	cbz	r0, b48e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    b47c:	2100      	movs	r1, #0
    b47e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    b482:	f7fa f85b 	bl	553c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    b486:	b1f0      	cbz	r0, b4c6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    b488:	f241 41f7 	movw	r1, #5367	; 0x14f7
    b48c:	e025      	b.n	b4da <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    b48e:	f89d 0010 	ldrb.w	r0, [sp, #16]
    b492:	f88d 0018 	strb.w	r0, [sp, #24]
    b496:	f89d 0014 	ldrb.w	r0, [sp, #20]
    b49a:	f88d 0019 	strb.w	r0, [sp, #25]
    b49e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    b4a2:	f8ad 001a 	strh.w	r0, [sp, #26]
    b4a6:	a906      	add	r1, sp, #24
    b4a8:	4620      	mov	r0, r4
    b4aa:	f003 f8e1 	bl	e670 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    b4ae:	7868      	ldrb	r0, [r5, #1]
    b4b0:	9000      	str	r0, [sp, #0]
    b4b2:	782b      	ldrb	r3, [r5, #0]
    b4b4:	88aa      	ldrh	r2, [r5, #4]
    b4b6:	8869      	ldrh	r1, [r5, #2]
    b4b8:	8820      	ldrh	r0, [r4, #0]
    b4ba:	f7fa f90b 	bl	56d4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    b4be:	b120      	cbz	r0, b4ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    b4c0:	f241 5102 	movw	r1, #5378	; 0x1502
    b4c4:	e009      	b.n	b4da <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    b4c6:	2009      	movs	r0, #9
    b4c8:	e767      	b.n	b39a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b4ca:	4642      	mov	r2, r8
    b4cc:	4621      	mov	r1, r4
    b4ce:	4630      	mov	r0, r6
    b4d0:	f7fc ffdc 	bl	848c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    b4d4:	b120      	cbz	r0, b4e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    b4d6:	f241 5104 	movw	r1, #5380	; 0x1504
    b4da:	2039      	movs	r0, #57	; 0x39
    b4dc:	f7f9 fda6 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b4e0:	4805      	ldr	r0, [pc, #20]	; (b4f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    b4e2:	6803      	ldr	r3, [r0, #0]
    b4e4:	b123      	cbz	r3, b4f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    b4e6:	2200      	movs	r2, #0
    b4e8:	f504 71da 	add.w	r1, r4, #436	; 0x1b4
    b4ec:	4620      	mov	r0, r4
    b4ee:	4798      	blx	r3
    b4f0:	2000      	movs	r0, #0
    b4f2:	e752      	b.n	b39a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b4f4:	20001254 	.word	0x20001254
    b4f8:	20000230 	.word	0x20000230
    b4fc:	b510      	push	{r4, lr}
    b4fe:	4604      	mov	r4, r0
    b500:	88c1      	ldrh	r1, [r0, #6]
    b502:	8880      	ldrh	r0, [r0, #4]
    b504:	f005 f9fd 	bl	10902 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    b508:	2800      	cmp	r0, #0
    b50a:	d10f      	bne.n	b52c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1cc>
    b50c:	8861      	ldrh	r1, [r4, #2]
    b50e:	8820      	ldrh	r0, [r4, #0]
    b510:	f005 f9f7 	bl	10902 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    b514:	2800      	cmp	r0, #0
    b516:	d109      	bne.n	b52c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1cc>
    b518:	4805      	ldr	r0, [pc, #20]	; (b530 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d0>)
    b51a:	88a1      	ldrh	r1, [r4, #4]
    b51c:	8081      	strh	r1, [r0, #4]
    b51e:	8821      	ldrh	r1, [r4, #0]
    b520:	8001      	strh	r1, [r0, #0]
    b522:	88e1      	ldrh	r1, [r4, #6]
    b524:	80c1      	strh	r1, [r0, #6]
    b526:	8861      	ldrh	r1, [r4, #2]
    b528:	8041      	strh	r1, [r0, #2]
    b52a:	2000      	movs	r0, #0
    b52c:	bd10      	pop	{r4, pc}
    b52e:	0000      	.short	0x0000
    b530:	20000234 	.word	0x20000234
    b534:	0c11360c 	.word	0x0c11360c
    b538:	11360059 	.word	0x11360059
    b53c:	05060708 	.word	0x05060708
    b540:	00020304 	.word	0x00020304
    b544:	f0f4f8fc 	.word	0xf0f4f8fc
    b548:	0304d8ec 	.word	0x0304d8ec
    b54c:	f4f8fc00 	.word	0xf4f8fc00
    b550:	00d8ecf0 	.word	0x00d8ecf0

0000b554 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    b554:	b510      	push	{r4, lr}
    b556:	f7fb fe99 	bl	728c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    b55a:	4804      	ldr	r0, [pc, #16]	; (b56c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    b55c:	6840      	ldr	r0, [r0, #4]
    b55e:	f005 fbbe 	bl	10cde <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5d6>
    b562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b566:	f005 b865 	b.w	10634 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    b56a:	0000      	.short	0x0000
    b56c:	2000023c 	.word	0x2000023c

0000b570 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    b570:	b510      	push	{r4, lr}
    b572:	4c05      	ldr	r4, [pc, #20]	; (b588 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x18>)
    b574:	68a0      	ldr	r0, [r4, #8]
    b576:	f005 fbb2 	bl	10cde <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5d6>
    b57a:	68e0      	ldr	r0, [r4, #12]
    b57c:	f005 fbaf 	bl	10cde <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5d6>
    b580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b584:	f7ff be50 	b.w	b228 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    b588:	2000023c 	.word	0x2000023c

0000b58c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    b58c:	b510      	push	{r4, lr}
    b58e:	4905      	ldr	r1, [pc, #20]	; (b5a4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    b590:	4805      	ldr	r0, [pc, #20]	; (b5a8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b592:	f005 fb97 	bl	10cc4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5bc>
    b596:	4804      	ldr	r0, [pc, #16]	; (b5a8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b59c:	4903      	ldr	r1, [pc, #12]	; (b5ac <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    b59e:	1d00      	adds	r0, r0, #4
    b5a0:	f005 bb90 	b.w	10cc4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5bc>
    b5a4:	2000024c 	.word	0x2000024c
    b5a8:	20000240 	.word	0x20000240
    b5ac:	20000254 	.word	0x20000254

0000b5b0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    b5b0:	b510      	push	{r4, lr}
    b5b2:	4908      	ldr	r1, [pc, #32]	; (b5d4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    b5b4:	4808      	ldr	r0, [pc, #32]	; (b5d8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b5b6:	f005 fb85 	bl	10cc4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5bc>
    b5ba:	4807      	ldr	r0, [pc, #28]	; (b5d8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b5bc:	4907      	ldr	r1, [pc, #28]	; (b5dc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    b5be:	1d00      	adds	r0, r0, #4
    b5c0:	f005 fb80 	bl	10cc4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5bc>
    b5c4:	4804      	ldr	r0, [pc, #16]	; (b5d8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b5c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b5ca:	4905      	ldr	r1, [pc, #20]	; (b5e0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    b5cc:	3008      	adds	r0, #8
    b5ce:	f005 bb79 	b.w	10cc4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5bc>
    b5d2:	0000      	.short	0x0000
    b5d4:	20000264 	.word	0x20000264
    b5d8:	20000240 	.word	0x20000240
    b5dc:	2000026c 	.word	0x2000026c
    b5e0:	2000025c 	.word	0x2000025c

0000b5e4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    b5e4:	4801      	ldr	r0, [pc, #4]	; (b5ec <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    b5e6:	7800      	ldrb	r0, [r0, #0]
    b5e8:	4770      	bx	lr
    b5ea:	0000      	.short	0x0000
    b5ec:	2000023c 	.word	0x2000023c
    b5f0:	b510      	push	{r4, lr}
    b5f2:	f7fc f973 	bl	78dc <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    b5f6:	f7fc ffd9 	bl	85ac <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    b5fa:	4803      	ldr	r0, [pc, #12]	; (b608 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    b5fc:	f7fc f954 	bl	78a8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    b600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b604:	f7fb be4e 	b.w	72a4 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    b608:	200016dd 	.word	0x200016dd
    b60c:	4909      	ldr	r1, [pc, #36]	; (b634 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    b60e:	b510      	push	{r4, lr}
    b610:	2001      	movs	r0, #1
    b612:	7008      	strb	r0, [r1, #0]
    b614:	f7fc f992 	bl	793c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    b618:	f7fd fd74 	bl	9104 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    b61c:	f002 fe9d 	bl	e35a <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    b620:	4805      	ldr	r0, [pc, #20]	; (b638 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    b622:	f7fa fc25 	bl	5e70 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    b626:	2000      	movs	r0, #0
    b628:	f7f9 fece 	bl	53c8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    b62c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b630:	f7fb be40 	b.w	72b4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    b634:	2000023c 	.word	0x2000023c
    b638:	200016dd 	.word	0x200016dd

0000b63c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    b63c:	4a04      	ldr	r2, [pc, #16]	; (b650 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    b63e:	08c1      	lsrs	r1, r0, #3
    b640:	f000 0307 	and.w	r3, r0, #7
    b644:	2001      	movs	r0, #1
    b646:	4098      	lsls	r0, r3
    b648:	5c53      	ldrb	r3, [r2, r1]
    b64a:	4303      	orrs	r3, r0
    b64c:	5453      	strb	r3, [r2, r1]
    b64e:	4770      	bx	lr
    b650:	20000000 	.word	0x20000000

0000b654 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    b654:	4901      	ldr	r1, [pc, #4]	; (b65c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    b656:	e9d1 0100 	ldrd	r0, r1, [r1]
    b65a:	4770      	bx	lr
    b65c:	20000000 	.word	0x20000000

0000b660 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    b660:	4806      	ldr	r0, [pc, #24]	; (b67c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    b662:	8801      	ldrh	r1, [r0, #0]
    b664:	7900      	ldrb	r0, [r0, #4]
    b666:	0602      	lsls	r2, r0, #24
    b668:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    b66c:	f000 0001 	and.w	r0, r0, #1
    b670:	1800      	adds	r0, r0, r0
    b672:	b2c0      	uxtb	r0, r0
    b674:	f040 0001 	orr.w	r0, r0, #1
    b678:	4770      	bx	lr
    b67a:	0000      	.short	0x0000
    b67c:	20000000 	.word	0x20000000

0000b680 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    b680:	b510      	push	{r4, lr}
    b682:	f7f9 f927 	bl	48d4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    b686:	2200      	movs	r2, #0
    b688:	4b08      	ldr	r3, [pc, #32]	; (b6ac <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    b68a:	4611      	mov	r1, r2
    b68c:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    b690:	4284      	cmp	r4, r0
    b692:	d303      	bcc.n	b69c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    b694:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    b698:	7882      	ldrb	r2, [r0, #2]
    b69a:	e003      	b.n	b6a4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    b69c:	1c49      	adds	r1, r1, #1
    b69e:	b2c9      	uxtb	r1, r1
    b6a0:	290c      	cmp	r1, #12
    b6a2:	d3f3      	bcc.n	b68c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    b6a4:	4802      	ldr	r0, [pc, #8]	; (b6b0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    b6a6:	7002      	strb	r2, [r0, #0]
    b6a8:	bd10      	pop	{r4, pc}
    b6aa:	0000      	.short	0x0000
    b6ac:	00010d30 	.word	0x00010d30
    b6b0:	200002bf 	.word	0x200002bf

0000b6b4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    b6b4:	b570      	push	{r4, r5, r6, lr}
    b6b6:	4605      	mov	r5, r0
    b6b8:	4616      	mov	r6, r2
    b6ba:	460c      	mov	r4, r1
    b6bc:	2002      	movs	r0, #2
    b6be:	f000 f9b7 	bl	ba30 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b6c2:	4906      	ldr	r1, [pc, #24]	; (b6dc <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    b6c4:	2001      	movs	r0, #1
    b6c6:	1ef6      	subs	r6, r6, #3
    b6c8:	7008      	strb	r0, [r1, #0]
    b6ca:	4805      	ldr	r0, [pc, #20]	; (b6e0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b6cc:	6006      	str	r6, [r0, #0]
    b6ce:	4804      	ldr	r0, [pc, #16]	; (b6e0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b6d0:	3808      	subs	r0, #8
    b6d2:	6005      	str	r5, [r0, #0]
    b6d4:	1f00      	subs	r0, r0, #4
    b6d6:	6004      	str	r4, [r0, #0]
    b6d8:	bd70      	pop	{r4, r5, r6, pc}
    b6da:	0000      	.short	0x0000
    b6dc:	200002c0 	.word	0x200002c0
    b6e0:	4000f510 	.word	0x4000f510

0000b6e4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    b6e4:	b510      	push	{r4, lr}
    b6e6:	4c0c      	ldr	r4, [pc, #48]	; (b718 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    b6e8:	7820      	ldrb	r0, [r4, #0]
    b6ea:	b180      	cbz	r0, b70e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    b6ec:	490b      	ldr	r1, [pc, #44]	; (b71c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    b6ee:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b6f2:	6008      	str	r0, [r1, #0]
    b6f4:	f000 f86a 	bl	b7cc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b6f8:	2100      	movs	r1, #0
    b6fa:	b120      	cbz	r0, b706 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    b6fc:	2001      	movs	r0, #1
    b6fe:	7060      	strb	r0, [r4, #1]
    b700:	4807      	ldr	r0, [pc, #28]	; (b720 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    b702:	6800      	ldr	r0, [r0, #0]
    b704:	e001      	b.n	b70a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    b706:	7061      	strb	r1, [r4, #1]
    b708:	2010      	movs	r0, #16
    b70a:	70a0      	strb	r0, [r4, #2]
    b70c:	7021      	strb	r1, [r4, #0]
    b70e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b712:	2000      	movs	r0, #0
    b714:	f000 b98c 	b.w	ba30 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b718:	200002c0 	.word	0x200002c0
    b71c:	4001f508 	.word	0x4001f508
    b720:	4000f400 	.word	0x4000f400

0000b724 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    b724:	b510      	push	{r4, lr}
    b726:	2002      	movs	r0, #2
    b728:	f000 f982 	bl	ba30 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b72c:	4904      	ldr	r1, [pc, #16]	; (b740 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    b72e:	2001      	movs	r0, #1
    b730:	7008      	strb	r0, [r1, #0]
    b732:	f000 f859 	bl	b7e8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    b736:	4903      	ldr	r1, [pc, #12]	; (b744 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    b738:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b73c:	6008      	str	r0, [r1, #0]
    b73e:	bd10      	pop	{r4, pc}
    b740:	200002c0 	.word	0x200002c0
    b744:	4001f504 	.word	0x4001f504

0000b748 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    b748:	4803      	ldr	r0, [pc, #12]	; (b758 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    b74a:	2100      	movs	r1, #0
    b74c:	7001      	strb	r1, [r0, #0]
    b74e:	7041      	strb	r1, [r0, #1]
    b750:	2110      	movs	r1, #16
    b752:	7081      	strb	r1, [r0, #2]
    b754:	4770      	bx	lr
    b756:	0000      	.short	0x0000
    b758:	200002c0 	.word	0x200002c0

0000b75c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    b75c:	4807      	ldr	r0, [pc, #28]	; (b77c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    b75e:	b510      	push	{r4, lr}
    b760:	7801      	ldrb	r1, [r0, #0]
    b762:	b141      	cbz	r1, b776 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    b764:	f000 f832 	bl	b7cc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b768:	b118      	cbz	r0, b772 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    b76a:	4805      	ldr	r0, [pc, #20]	; (b780 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    b76c:	6800      	ldr	r0, [r0, #0]
    b76e:	b2c0      	uxtb	r0, r0
    b770:	bd10      	pop	{r4, pc}
    b772:	2010      	movs	r0, #16
    b774:	bd10      	pop	{r4, pc}
    b776:	7880      	ldrb	r0, [r0, #2]
    b778:	bd10      	pop	{r4, pc}
    b77a:	0000      	.short	0x0000
    b77c:	200002c0 	.word	0x200002c0
    b780:	4000f400 	.word	0x4000f400

0000b784 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    b784:	4808      	ldr	r0, [pc, #32]	; (b7a8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    b786:	b510      	push	{r4, lr}
    b788:	7801      	ldrb	r1, [r0, #0]
    b78a:	b159      	cbz	r1, b7a4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    b78c:	4807      	ldr	r0, [pc, #28]	; (b7ac <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    b78e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b792:	b128      	cbz	r0, b7a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    b794:	f000 f80c 	bl	b7b0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b798:	2800      	cmp	r0, #0
    b79a:	d000      	beq.n	b79e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    b79c:	2001      	movs	r0, #1
    b79e:	bd10      	pop	{r4, pc}
    b7a0:	2002      	movs	r0, #2
    b7a2:	bd10      	pop	{r4, pc}
    b7a4:	7840      	ldrb	r0, [r0, #1]
    b7a6:	bd10      	pop	{r4, pc}
    b7a8:	200002c0 	.word	0x200002c0
    b7ac:	4000f000 	.word	0x4000f000
    b7b0:	4805      	ldr	r0, [pc, #20]	; (b7c8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    b7b2:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    b7b6:	b111      	cbz	r1, b7be <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    b7b8:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b7bc:	b108      	cbz	r0, b7c2 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    b7be:	2000      	movs	r0, #0
    b7c0:	4770      	bx	lr
    b7c2:	2001      	movs	r0, #1
    b7c4:	4770      	bx	lr
    b7c6:	0000      	.short	0x0000
    b7c8:	4000f000 	.word	0x4000f000
    b7cc:	4805      	ldr	r0, [pc, #20]	; (b7e4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    b7ce:	b510      	push	{r4, lr}
    b7d0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b7d4:	b120      	cbz	r0, b7e0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b7d6:	f7ff ffeb 	bl	b7b0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b7da:	b108      	cbz	r0, b7e0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b7dc:	2001      	movs	r0, #1
    b7de:	bd10      	pop	{r4, pc}
    b7e0:	2000      	movs	r0, #0
    b7e2:	bd10      	pop	{r4, pc}
    b7e4:	4000f000 	.word	0x4000f000
    b7e8:	4804      	ldr	r0, [pc, #16]	; (b7fc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    b7ea:	2100      	movs	r1, #0
    b7ec:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b7f0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b7f4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b7f8:	4770      	bx	lr
    b7fa:	0000      	.short	0x0000
    b7fc:	4000f000 	.word	0x4000f000

0000b800 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    b800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b804:	4604      	mov	r4, r0
    b806:	461e      	mov	r6, r3
    b808:	4690      	mov	r8, r2
    b80a:	460f      	mov	r7, r1
    b80c:	2001      	movs	r0, #1
    b80e:	f000 f90f 	bl	ba30 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b812:	4d1e      	ldr	r5, [pc, #120]	; (b88c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    b814:	481e      	ldr	r0, [pc, #120]	; (b890 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    b816:	f004 0103 	and.w	r1, r4, #3
    b81a:	712e      	strb	r6, [r5, #4]
    b81c:	6800      	ldr	r0, [r0, #0]
    b81e:	0432      	lsls	r2, r6, #16
    b820:	f361 0007 	bfi	r0, r1, #0, #8
    b824:	f366 200f 	bfi	r0, r6, #8, #8
    b828:	0c00      	lsrs	r0, r0, #16
    b82a:	4e1a      	ldr	r6, [pc, #104]	; (b894 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    b82c:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    b830:	4308      	orrs	r0, r1
    b832:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    b836:	4818      	ldr	r0, [pc, #96]	; (b898 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    b838:	6007      	str	r7, [r0, #0]
    b83a:	f001 fb5a 	bl	cef2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b83e:	b938      	cbnz	r0, b850 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    b840:	4815      	ldr	r0, [pc, #84]	; (b898 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    b842:	3010      	adds	r0, #16
    b844:	6801      	ldr	r1, [r0, #0]
    b846:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    b84a:	ea41 0108 	orr.w	r1, r1, r8
    b84e:	6001      	str	r1, [r0, #0]
    b850:	f000 f8e4 	bl	ba1c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    b854:	b10c      	cbz	r4, b85a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    b856:	2c04      	cmp	r4, #4
    b858:	d107      	bne.n	b86a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    b85a:	4811      	ldr	r0, [pc, #68]	; (b8a0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    b85c:	490d      	ldr	r1, [pc, #52]	; (b894 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    b85e:	4a0f      	ldr	r2, [pc, #60]	; (b89c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    b860:	1d09      	adds	r1, r1, #4
    b862:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    b866:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    b86a:	2001      	movs	r0, #1
    b86c:	7068      	strb	r0, [r5, #1]
    b86e:	70ec      	strb	r4, [r5, #3]
    b870:	b11c      	cbz	r4, b87a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    b872:	2c01      	cmp	r4, #1
    b874:	d001      	beq.n	b87a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    b876:	2c02      	cmp	r4, #2
    b878:	d106      	bne.n	b888 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    b87a:	7028      	strb	r0, [r5, #0]
    b87c:	2100      	movs	r1, #0
    b87e:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    b882:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    b886:	6030      	str	r0, [r6, #0]
    b888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b88c:	200002c3 	.word	0x200002c3
    b890:	0000ba2c 	.word	0x0000ba2c
    b894:	4000f000 	.word	0x4000f000
    b898:	4000f508 	.word	0x4000f508
    b89c:	4000f100 	.word	0x4000f100
    b8a0:	4001f088 	.word	0x4001f088

0000b8a4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    b8a4:	b570      	push	{r4, r5, r6, lr}
    b8a6:	4a1c      	ldr	r2, [pc, #112]	; (b918 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    b8a8:	7853      	ldrb	r3, [r2, #1]
    b8aa:	b1a3      	cbz	r3, b8d6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    b8ac:	4b1b      	ldr	r3, [pc, #108]	; (b91c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    b8ae:	6019      	str	r1, [r3, #0]
    b8b0:	1d19      	adds	r1, r3, #4
    b8b2:	6008      	str	r0, [r1, #0]
    b8b4:	2501      	movs	r5, #1
    b8b6:	7095      	strb	r5, [r2, #2]
    b8b8:	4610      	mov	r0, r2
    b8ba:	78d6      	ldrb	r6, [r2, #3]
    b8bc:	4b18      	ldr	r3, [pc, #96]	; (b920 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    b8be:	7800      	ldrb	r0, [r0, #0]
    b8c0:	4c18      	ldr	r4, [pc, #96]	; (b924 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    b8c2:	2100      	movs	r1, #0
    b8c4:	b156      	cbz	r6, b8dc <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    b8c6:	2e04      	cmp	r6, #4
    b8c8:	d01b      	beq.n	b902 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    b8ca:	b308      	cbz	r0, b910 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    b8cc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    b8d0:	0668      	lsls	r0, r5, #25
    b8d2:	6018      	str	r0, [r3, #0]
    b8d4:	bd70      	pop	{r4, r5, r6, pc}
    b8d6:	f44f 71c2 	mov.w	r1, #388	; 0x184
    b8da:	e01a      	b.n	b912 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    b8dc:	b178      	cbz	r0, b8fe <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    b8de:	4620      	mov	r0, r4
    b8e0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    b8e4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    b8e8:	601e      	str	r6, [r3, #0]
    b8ea:	1271      	asrs	r1, r6, #9
    b8ec:	f005 fa55 	bl	10d9a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    b8f0:	2800      	cmp	r0, #0
    b8f2:	d0ef      	beq.n	b8d4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    b8f4:	6065      	str	r5, [r4, #4]
    b8f6:	480a      	ldr	r0, [pc, #40]	; (b920 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    b8f8:	1d00      	adds	r0, r0, #4
    b8fa:	6006      	str	r6, [r0, #0]
    b8fc:	bd70      	pop	{r4, r5, r6, pc}
    b8fe:	21b3      	movs	r1, #179	; 0xb3
    b900:	e007      	b.n	b912 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    b902:	7015      	strb	r5, [r2, #0]
    b904:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    b908:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    b90c:	6025      	str	r5, [r4, #0]
    b90e:	bd70      	pop	{r4, r5, r6, pc}
    b910:	21c6      	movs	r1, #198	; 0xc6
    b912:	203c      	movs	r0, #60	; 0x3c
    b914:	f7f9 fb8a 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b918:	200002c3 	.word	0x200002c3
    b91c:	4000f50c 	.word	0x4000f50c
    b920:	4001f504 	.word	0x4001f504
    b924:	4000f000 	.word	0x4000f000

0000b928 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    b928:	b570      	push	{r4, r5, r6, lr}
    b92a:	4d05      	ldr	r5, [pc, #20]	; (b940 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    b92c:	2400      	movs	r4, #0
    b92e:	7828      	ldrb	r0, [r5, #0]
    b930:	b110      	cbz	r0, b938 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    b932:	f000 f873 	bl	ba1c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    b936:	702c      	strb	r4, [r5, #0]
    b938:	706c      	strb	r4, [r5, #1]
    b93a:	70ac      	strb	r4, [r5, #2]
    b93c:	bd70      	pop	{r4, r5, r6, pc}
    b93e:	0000      	.short	0x0000
    b940:	200002c3 	.word	0x200002c3

0000b944 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    b944:	4802      	ldr	r0, [pc, #8]	; (b950 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    b946:	2100      	movs	r1, #0
    b948:	7001      	strb	r1, [r0, #0]
    b94a:	7041      	strb	r1, [r0, #1]
    b94c:	7081      	strb	r1, [r0, #2]
    b94e:	4770      	bx	lr
    b950:	200002c3 	.word	0x200002c3

0000b954 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    b954:	480b      	ldr	r0, [pc, #44]	; (b984 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    b956:	b510      	push	{r4, lr}
    b958:	7800      	ldrb	r0, [r0, #0]
    b95a:	b158      	cbz	r0, b974 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    b95c:	f44f 7182 	mov.w	r1, #260	; 0x104
    b960:	4809      	ldr	r0, [pc, #36]	; (b988 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    b962:	f005 fa1a 	bl	10d9a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    b966:	b140      	cbz	r0, b97a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    b968:	4808      	ldr	r0, [pc, #32]	; (b98c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    b96a:	6800      	ldr	r0, [r0, #0]
    b96c:	2800      	cmp	r0, #0
    b96e:	d000      	beq.n	b972 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    b970:	2001      	movs	r0, #1
    b972:	bd10      	pop	{r4, pc}
    b974:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    b978:	e001      	b.n	b97e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    b97a:	f240 11e5 	movw	r1, #485	; 0x1e5
    b97e:	203c      	movs	r0, #60	; 0x3c
    b980:	f7f9 fb54 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b984:	200002c3 	.word	0x200002c3
    b988:	4000f000 	.word	0x4000f000
    b98c:	4000f400 	.word	0x4000f400

0000b990 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    b990:	4801      	ldr	r0, [pc, #4]	; (b998 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    b992:	2101      	movs	r1, #1
    b994:	6081      	str	r1, [r0, #8]
    b996:	4770      	bx	lr
    b998:	4000f000 	.word	0x4000f000

0000b99c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    b99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b9a0:	481b      	ldr	r0, [pc, #108]	; (ba10 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    b9a2:	7800      	ldrb	r0, [r0, #0]
    b9a4:	b1d8      	cbz	r0, b9de <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    b9a6:	f8df 806c 	ldr.w	r8, [pc, #108]	; ba14 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b9aa:	f44f 7682 	mov.w	r6, #260	; 0x104
    b9ae:	4631      	mov	r1, r6
    b9b0:	4640      	mov	r0, r8
    b9b2:	f005 f9f2 	bl	10d9a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    b9b6:	2800      	cmp	r0, #0
    b9b8:	d128      	bne.n	ba0c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    b9ba:	2002      	movs	r0, #2
    b9bc:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    b9c0:	4c15      	ldr	r4, [pc, #84]	; (ba18 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    b9c2:	6820      	ldr	r0, [r4, #0]
    b9c4:	43c0      	mvns	r0, r0
    b9c6:	f340 1500 	sbfx	r5, r0, #4, #1
    b9ca:	6820      	ldr	r0, [r4, #0]
    b9cc:	f040 0010 	orr.w	r0, r0, #16
    b9d0:	6020      	str	r0, [r4, #0]
    b9d2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    b9d6:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b9da:	1c6d      	adds	r5, r5, #1
    b9dc:	e008      	b.n	b9f0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    b9de:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    b9e2:	203c      	movs	r0, #60	; 0x3c
    b9e4:	f7f9 fb22 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b9e8:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    b9ec:	f7f9 f990 	bl	4d10 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    b9f0:	4631      	mov	r1, r6
    b9f2:	4640      	mov	r0, r8
    b9f4:	f005 f9d1 	bl	10d9a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    b9f8:	2800      	cmp	r0, #0
    b9fa:	d0f5      	beq.n	b9e8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    b9fc:	b91d      	cbnz	r5, ba06 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    b9fe:	6820      	ldr	r0, [r4, #0]
    ba00:	f020 0010 	bic.w	r0, r0, #16
    ba04:	6020      	str	r0, [r4, #0]
    ba06:	2002      	movs	r0, #2
    ba08:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    ba0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ba10:	200002c3 	.word	0x200002c3
    ba14:	4000f000 	.word	0x4000f000
    ba18:	e000ed10 	.word	0xe000ed10
    ba1c:	4902      	ldr	r1, [pc, #8]	; (ba28 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    ba1e:	4801      	ldr	r0, [pc, #4]	; (ba24 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    ba20:	6008      	str	r0, [r1, #0]
    ba22:	4770      	bx	lr
    ba24:	02020000 	.word	0x02020000
    ba28:	4001f508 	.word	0x4001f508
    ba2c:	00010000 	.word	0x00010000

0000ba30 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    ba30:	b510      	push	{r4, lr}
    ba32:	4604      	mov	r4, r0
    ba34:	f000 f820 	bl	ba78 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    ba38:	2c00      	cmp	r4, #0
    ba3a:	d00e      	beq.n	ba5a <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    ba3c:	4a0b      	ldr	r2, [pc, #44]	; (ba6c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    ba3e:	480b      	ldr	r0, [pc, #44]	; (ba6c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    ba40:	490b      	ldr	r1, [pc, #44]	; (ba70 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    ba42:	3214      	adds	r2, #20
    ba44:	2c01      	cmp	r4, #1
    ba46:	d005      	beq.n	ba54 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    ba48:	2c02      	cmp	r4, #2
    ba4a:	d007      	beq.n	ba5c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    ba4c:	2181      	movs	r1, #129	; 0x81
    ba4e:	203d      	movs	r0, #61	; 0x3d
    ba50:	f7f9 faec 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba54:	2302      	movs	r3, #2
    ba56:	6003      	str	r3, [r0, #0]
    ba58:	6011      	str	r1, [r2, #0]
    ba5a:	bd10      	pop	{r4, pc}
    ba5c:	2303      	movs	r3, #3
    ba5e:	6003      	str	r3, [r0, #0]
    ba60:	6011      	str	r1, [r2, #0]
    ba62:	4904      	ldr	r1, [pc, #16]	; (ba74 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    ba64:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    ba68:	6008      	str	r0, [r1, #0]
    ba6a:	bd10      	pop	{r4, pc}
    ba6c:	4000f500 	.word	0x4000f500
    ba70:	200017df 	.word	0x200017df
    ba74:	4001f504 	.word	0x4001f504
    ba78:	4805      	ldr	r0, [pc, #20]	; (ba90 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    ba7a:	b510      	push	{r4, lr}
    ba7c:	2100      	movs	r1, #0
    ba7e:	6001      	str	r1, [r0, #0]
    ba80:	6001      	str	r1, [r0, #0]
    ba82:	f7ff ff51 	bl	b928 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    ba86:	4903      	ldr	r1, [pc, #12]	; (ba94 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    ba88:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    ba8c:	6008      	str	r0, [r1, #0]
    ba8e:	bd10      	pop	{r4, pc}
    ba90:	4000f500 	.word	0x4000f500
    ba94:	4001f508 	.word	0x4001f508

0000ba98 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    ba98:	4805      	ldr	r0, [pc, #20]	; (bab0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    ba9a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    ba9e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    baa2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    baa6:	2100      	movs	r1, #0
    baa8:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    baac:	4770      	bx	lr
    baae:	0000      	.short	0x0000
    bab0:	40001000 	.word	0x40001000

0000bab4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    bab4:	4904      	ldr	r1, [pc, #16]	; (bac8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    bab6:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    baba:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    babe:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    bac2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    bac6:	4770      	bx	lr
    bac8:	40001000 	.word	0x40001000

0000bacc <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    bacc:	4801      	ldr	r0, [pc, #4]	; (bad4 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    bace:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    bad2:	4770      	bx	lr
    bad4:	20001298 	.word	0x20001298

0000bad8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    bad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bada:	4c23      	ldr	r4, [pc, #140]	; (bb68 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>)
    badc:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    bae0:	f010 0f10 	tst.w	r0, #16
    bae4:	d001      	beq.n	baea <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    bae6:	2701      	movs	r7, #1
    bae8:	e000      	b.n	baec <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    baea:	2700      	movs	r7, #0
    baec:	2010      	movs	r0, #16
    baee:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    baf2:	2002      	movs	r0, #2
    baf4:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    baf8:	481c      	ldr	r0, [pc, #112]	; (bb6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    bafa:	2500      	movs	r5, #0
    bafc:	491d      	ldr	r1, [pc, #116]	; (bb74 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    bafe:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    bb02:	481b      	ldr	r0, [pc, #108]	; (bb70 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    bb04:	6008      	str	r0, [r1, #0]
    bb06:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    bb0a:	f44f 7688 	mov.w	r6, #272	; 0x110
    bb0e:	f010 0fff 	tst.w	r0, #255	; 0xff
    bb12:	d018      	beq.n	bb46 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    bb14:	20ff      	movs	r0, #255	; 0xff
    bb16:	f88d 0000 	strb.w	r0, [sp]
    bb1a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    bb1e:	2001      	movs	r0, #1
    bb20:	6120      	str	r0, [r4, #16]
    bb22:	e004      	b.n	bb2e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x56>
    bb24:	f89d 0000 	ldrb.w	r0, [sp]
    bb28:	1e40      	subs	r0, r0, #1
    bb2a:	f88d 0000 	strb.w	r0, [sp]
    bb2e:	f89d 0000 	ldrb.w	r0, [sp]
    bb32:	b128      	cbz	r0, bb40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x68>
    bb34:	4631      	mov	r1, r6
    bb36:	4620      	mov	r0, r4
    bb38:	f005 f95e 	bl	10df8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    bb3c:	2800      	cmp	r0, #0
    bb3e:	d0f1      	beq.n	bb24 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4c>
    bb40:	f89d 0000 	ldrb.w	r0, [sp]
    bb44:	b158      	cbz	r0, bb5e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x86>
    bb46:	f000 fccd 	bl	c4e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    bb4a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    bb4e:	f000 fe6f 	bl	c830 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    bb52:	2f00      	cmp	r7, #0
    bb54:	d002      	beq.n	bb5c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    bb56:	2010      	movs	r0, #16
    bb58:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    bb5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bb5e:	f640 0171 	movw	r1, #2161	; 0x871
    bb62:	203e      	movs	r0, #62	; 0x3e
    bb64:	f7f9 fa62 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb68:	40001000 	.word	0x40001000
    bb6c:	20001298 	.word	0x20001298
    bb70:	0c0e0000 	.word	0x0c0e0000
    bb74:	4001f508 	.word	0x4001f508

0000bb78 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    bb78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb7c:	4d20      	ldr	r5, [pc, #128]	; (bc00 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    bb7e:	4607      	mov	r7, r0
    bb80:	4688      	mov	r8, r1
    bb82:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    bb86:	07c1      	lsls	r1, r0, #31
    bb88:	d018      	beq.n	bbbc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    bb8a:	4a1e      	ldr	r2, [pc, #120]	; (bc04 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    bb8c:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    bb90:	6011      	str	r1, [r2, #0]
    bb92:	4c1d      	ldr	r4, [pc, #116]	; (bc08 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    bb94:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    bb98:	f041 0101 	orr.w	r1, r1, #1
    bb9c:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    bba0:	f040 0002 	orr.w	r0, r0, #2
    bba4:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    bba8:	4640      	mov	r0, r8
    bbaa:	f000 fa1b 	bl	bfe4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    bbae:	f000 fc37 	bl	c420 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    bbb2:	2601      	movs	r6, #1
    bbb4:	b13f      	cbz	r7, bbc6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    bbb6:	2f01      	cmp	r7, #1
    bbb8:	d00e      	beq.n	bbd8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    bbba:	e016      	b.n	bbea <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    bbbc:	f240 7102 	movw	r1, #1794	; 0x702
    bbc0:	203e      	movs	r0, #62	; 0x3e
    bbc2:	f7f9 fa33 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bbc6:	4640      	mov	r0, r8
    bbc8:	f000 fc5a 	bl	c480 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    bbcc:	4640      	mov	r0, r8
    bbce:	f000 fc0b 	bl	c3e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    bbd2:	726e      	strb	r6, [r5, #9]
    bbd4:	6026      	str	r6, [r4, #0]
    bbd6:	e008      	b.n	bbea <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    bbd8:	f000 fc7a 	bl	c4d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    bbdc:	f000 fdc4 	bl	c768 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>
    bbe0:	2002      	movs	r0, #2
    bbe2:	7268      	strb	r0, [r5, #9]
    bbe4:	f000 fcb0 	bl	c548 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x16c>
    bbe8:	6066      	str	r6, [r4, #4]
    bbea:	4808      	ldr	r0, [pc, #32]	; (bc0c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    bbec:	64c6      	str	r6, [r0, #76]	; 0x4c
    bbee:	4807      	ldr	r0, [pc, #28]	; (bc0c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    bbf0:	300c      	adds	r0, #12
    bbf2:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    bbf6:	4638      	mov	r0, r7
    bbf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bbfc:	f000 bdea 	b.w	c7d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f8>
    bc00:	20001298 	.word	0x20001298
    bc04:	4001f504 	.word	0x4001f504
    bc08:	40001000 	.word	0x40001000
    bc0c:	40008000 	.word	0x40008000

0000bc10 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    bc10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bc14:	4d32      	ldr	r5, [pc, #200]	; (bce0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd0>)
    bc16:	4606      	mov	r6, r0
    bc18:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    bc1c:	4689      	mov	r9, r1
    bc1e:	6028      	str	r0, [r5, #0]
    bc20:	4c30      	ldr	r4, [pc, #192]	; (bce4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd4>)
    bc22:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    bc26:	f040 0002 	orr.w	r0, r0, #2
    bc2a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    bc2e:	4608      	mov	r0, r1
    bc30:	f000 f9d8 	bl	bfe4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    bc34:	f000 fbf4 	bl	c420 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    bc38:	f8df 80ac 	ldr.w	r8, [pc, #172]	; bce8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd8>
    bc3c:	2700      	movs	r7, #0
    bc3e:	b116      	cbz	r6, bc46 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    bc40:	2e01      	cmp	r6, #1
    bc42:	d022      	beq.n	bc8a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x7a>
    bc44:	e03a      	b.n	bcbc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xac>
    bc46:	4648      	mov	r0, r9
    bc48:	f000 fc1a 	bl	c480 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    bc4c:	79e0      	ldrb	r0, [r4, #7]
    bc4e:	2801      	cmp	r0, #1
    bc50:	d105      	bne.n	bc5e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    bc52:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    bc56:	f041 0108 	orr.w	r1, r1, #8
    bc5a:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    bc5e:	4648      	mov	r0, r9
    bc60:	f000 fbc2 	bl	c3e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    bc64:	2001      	movs	r0, #1
    bc66:	7260      	strb	r0, [r4, #9]
    bc68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    bc6a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    bc6e:	62a0      	str	r0, [r4, #40]	; 0x28
    bc70:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    bc74:	6028      	str	r0, [r5, #0]
    bc76:	491d      	ldr	r1, [pc, #116]	; (bcec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    bc78:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    bc7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    bc80:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    bc84:	fbb0 f7f1 	udiv	r7, r0, r1
    bc88:	e018      	b.n	bcbc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xac>
    bc8a:	f000 fc21 	bl	c4d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    bc8e:	f000 fd6b 	bl	c768 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>
    bc92:	79e0      	ldrb	r0, [r4, #7]
    bc94:	2801      	cmp	r0, #1
    bc96:	d105      	bne.n	bca4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x94>
    bc98:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    bc9c:	f041 0104 	orr.w	r1, r1, #4
    bca0:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    bca4:	2002      	movs	r0, #2
    bca6:	7260      	strb	r0, [r4, #9]
    bca8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    bcaa:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    bcae:	62a0      	str	r0, [r4, #40]	; 0x28
    bcb0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    bcb4:	6028      	str	r0, [r5, #0]
    bcb6:	2729      	movs	r7, #41	; 0x29
    bcb8:	f000 fc46 	bl	c548 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x16c>
    bcbc:	f000 fc90 	bl	c5e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    bcc0:	f000 fff1 	bl	cca6 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    bcc4:	6800      	ldr	r0, [r0, #0]
    bcc6:	2801      	cmp	r0, #1
    bcc8:	d006      	beq.n	bcd8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc8>
    bcca:	2100      	movs	r1, #0
    bccc:	4630      	mov	r0, r6
    bcce:	f000 fd81 	bl	c7d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f8>
    bcd2:	4638      	mov	r0, r7
    bcd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bcd8:	f7ff fefe 	bl	bad8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    bcdc:	2000      	movs	r0, #0
    bcde:	e7f9      	b.n	bcd4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>
    bce0:	4001f504 	.word	0x4001f504
    bce4:	20001298 	.word	0x20001298
    bce8:	40001000 	.word	0x40001000
    bcec:	0000c8b0 	.word	0x0000c8b0

0000bcf0 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    bcf0:	4a02      	ldr	r2, [pc, #8]	; (bcfc <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    bcf2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    bcf4:	6003      	str	r3, [r0, #0]
    bcf6:	6b50      	ldr	r0, [r2, #52]	; 0x34
    bcf8:	6008      	str	r0, [r1, #0]
    bcfa:	4770      	bx	lr
    bcfc:	20001298 	.word	0x20001298

0000bd00 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    bd00:	b510      	push	{r4, lr}
    bd02:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    bd04:	4901      	ldr	r1, [pc, #4]	; (bd0c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    bd06:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    bd0a:	bd10      	pop	{r4, pc}
    bd0c:	20001288 	.word	0x20001288

0000bd10 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    bd10:	490f      	ldr	r1, [pc, #60]	; (bd50 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    bd12:	b510      	push	{r4, lr}
    bd14:	69ca      	ldr	r2, [r1, #28]
    bd16:	4282      	cmp	r2, r0
    bd18:	d302      	bcc.n	bd20 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    bd1a:	f640 01f7 	movw	r1, #2295	; 0x8f7
    bd1e:	e00b      	b.n	bd38 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    bd20:	2201      	movs	r2, #1
    bd22:	730a      	strb	r2, [r1, #12]
    bd24:	6108      	str	r0, [r1, #16]
    bd26:	490b      	ldr	r1, [pc, #44]	; (bd54 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    bd28:	644a      	str	r2, [r1, #68]	; 0x44
    bd2a:	1d0a      	adds	r2, r1, #4
    bd2c:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    bd30:	4283      	cmp	r3, r0
    bd32:	d304      	bcc.n	bd3e <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    bd34:	f44f 6110 	mov.w	r1, #2304	; 0x900
    bd38:	203e      	movs	r0, #62	; 0x3e
    bd3a:	f7f9 f977 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd3e:	2300      	movs	r3, #0
    bd40:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    bd44:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    bd48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bd4c:	f000 bd16 	b.w	c77c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>
    bd50:	20001298 	.word	0x20001298
    bd54:	40008000 	.word	0x40008000

0000bd58 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    bd58:	b570      	push	{r4, r5, r6, lr}
    bd5a:	4c0f      	ldr	r4, [pc, #60]	; (bd98 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    bd5c:	4603      	mov	r3, r0
    bd5e:	2002      	movs	r0, #2
    bd60:	7320      	strb	r0, [r4, #12]
    bd62:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    bd66:	2096      	movs	r0, #150	; 0x96
    bd68:	f894 1020 	ldrb.w	r1, [r4, #32]
    bd6c:	7d22      	ldrb	r2, [r4, #20]
    bd6e:	2d01      	cmp	r5, #1
    bd70:	d00e      	beq.n	bd90 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    bd72:	f000 fdc5 	bl	c900 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    bd76:	6120      	str	r0, [r4, #16]
    bd78:	4808      	ldr	r0, [pc, #32]	; (bd9c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    bd7a:	2100      	movs	r1, #0
    bd7c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bd80:	6921      	ldr	r1, [r4, #16]
    bd82:	69e0      	ldr	r0, [r4, #28]
    bd84:	4408      	add	r0, r1
    bd86:	4905      	ldr	r1, [pc, #20]	; (bd9c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    bd88:	1d09      	adds	r1, r1, #4
    bd8a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bd8e:	bd70      	pop	{r4, r5, r6, pc}
    bd90:	f000 fdd4 	bl	c93c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    bd94:	e7ef      	b.n	bd76 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    bd96:	0000      	.short	0x0000
    bd98:	20001298 	.word	0x20001298
    bd9c:	40008000 	.word	0x40008000

0000bda0 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    bda0:	b510      	push	{r4, lr}
    bda2:	f001 f8c2 	bl	cf2a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bda6:	2800      	cmp	r0, #0
    bda8:	d006      	beq.n	bdb8 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    bdaa:	4804      	ldr	r0, [pc, #16]	; (bdbc <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    bdac:	6801      	ldr	r1, [r0, #0]
    bdae:	f021 0101 	bic.w	r1, r1, #1
    bdb2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    bdb6:	6001      	str	r1, [r0, #0]
    bdb8:	bd10      	pop	{r4, pc}
    bdba:	0000      	.short	0x0000
    bdbc:	40001774 	.word	0x40001774

0000bdc0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    bdc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bdc4:	2238      	movs	r2, #56	; 0x38
    bdc6:	2100      	movs	r1, #0
    bdc8:	4813      	ldr	r0, [pc, #76]	; (be18 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    bdca:	f001 f95e 	bl	d08a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bdce:	f000 fd2f 	bl	c830 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    bdd2:	f001 f863 	bl	ce9c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bdd6:	4d11      	ldr	r5, [pc, #68]	; (be1c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    bdd8:	4e10      	ldr	r6, [pc, #64]	; (be1c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    bdda:	2400      	movs	r4, #0
    bddc:	4f0f      	ldr	r7, [pc, #60]	; (be1c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    bdde:	3508      	adds	r5, #8
    bde0:	3610      	adds	r6, #16
    bde2:	b928      	cbnz	r0, bdf0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    bde4:	f001 f871 	bl	ceca <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bde8:	b910      	cbnz	r0, bdf0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    bdea:	f001 f878 	bl	cede <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    bdee:	b108      	cbz	r0, bdf4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    bdf0:	2224      	movs	r2, #36	; 0x24
    bdf2:	e006      	b.n	be02 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    bdf4:	f001 f8b3 	bl	cf5e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bdf8:	b910      	cbnz	r0, be00 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    bdfa:	f001 f8a6 	bl	cf4a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    bdfe:	b140      	cbz	r0, be12 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    be00:	2240      	movs	r2, #64	; 0x40
    be02:	21ff      	movs	r1, #255	; 0xff
    be04:	4638      	mov	r0, r7
    be06:	f001 f940 	bl	d08a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    be0a:	602c      	str	r4, [r5, #0]
    be0c:	6034      	str	r4, [r6, #0]
    be0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    be12:	2238      	movs	r2, #56	; 0x38
    be14:	e7f5      	b.n	be02 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    be16:	0000      	.short	0x0000
    be18:	20001298 	.word	0x20001298
    be1c:	40000e00 	.word	0x40000e00

0000be20 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    be20:	4805      	ldr	r0, [pc, #20]	; (be38 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x18>)
    be22:	b510      	push	{r4, lr}
    be24:	69c0      	ldr	r0, [r0, #28]
    be26:	2800      	cmp	r0, #0
    be28:	d104      	bne.n	be34 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x14>
    be2a:	f240 2139 	movw	r1, #569	; 0x239
    be2e:	203e      	movs	r0, #62	; 0x3e
    be30:	f7f9 f8fc 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be34:	bd10      	pop	{r4, pc}
    be36:	0000      	.short	0x0000
    be38:	20001298 	.word	0x20001298

0000be3c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    be3c:	4805      	ldr	r0, [pc, #20]	; (be54 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x18>)
    be3e:	b510      	push	{r4, lr}
    be40:	6980      	ldr	r0, [r0, #24]
    be42:	2800      	cmp	r0, #0
    be44:	d104      	bne.n	be50 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x14>
    be46:	f240 2133 	movw	r1, #563	; 0x233
    be4a:	203e      	movs	r0, #62	; 0x3e
    be4c:	f7f9 f8ee 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be50:	bd10      	pop	{r4, pc}
    be52:	0000      	.short	0x0000
    be54:	20001298 	.word	0x20001298

0000be58 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    be58:	b510      	push	{r4, lr}
    be5a:	f000 fc9d 	bl	c798 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3bc>
    be5e:	f7ff fe3b 	bl	bad8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    be62:	f7f8 ffa9 	bl	4db8 <mpsl_fem_disable>
    be66:	b130      	cbz	r0, be76 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    be68:	1c40      	adds	r0, r0, #1
    be6a:	d004      	beq.n	be76 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    be6c:	f240 5102 	movw	r1, #1282	; 0x502
    be70:	203e      	movs	r0, #62	; 0x3e
    be72:	f7f9 f8db 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be76:	480f      	ldr	r0, [pc, #60]	; (beb4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    be78:	4a0f      	ldr	r2, [pc, #60]	; (beb8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    be7a:	6a81      	ldr	r1, [r0, #40]	; 0x28
    be7c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    be80:	6011      	str	r1, [r2, #0]
    be82:	2400      	movs	r4, #0
    be84:	6284      	str	r4, [r0, #40]	; 0x28
    be86:	7304      	strb	r4, [r0, #12]
    be88:	61c4      	str	r4, [r0, #28]
    be8a:	6184      	str	r4, [r0, #24]
    be8c:	f000 fc84 	bl	c798 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3bc>
    be90:	480a      	ldr	r0, [pc, #40]	; (bebc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    be92:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    be96:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    be9a:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    be9e:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    bea2:	2001      	movs	r0, #1
    bea4:	f004 ff97 	bl	10dd6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    bea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    beac:	2001      	movs	r0, #1
    beae:	f004 bf85 	b.w	10dbc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    beb2:	0000      	.short	0x0000
    beb4:	20001298 	.word	0x20001298
    beb8:	4001f508 	.word	0x4001f508
    bebc:	40008000 	.word	0x40008000

0000bec0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    bec0:	b570      	push	{r4, r5, r6, lr}
    bec2:	2001      	movs	r0, #1
    bec4:	f004 ff87 	bl	10dd6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    bec8:	4c37      	ldr	r4, [pc, #220]	; (bfa8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    beca:	2000      	movs	r0, #0
    becc:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    bed0:	2001      	movs	r0, #1
    bed2:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    bed6:	f001 f818 	bl	cf0a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    beda:	4d34      	ldr	r5, [pc, #208]	; (bfac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    bedc:	b118      	cbz	r0, bee6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    bede:	6828      	ldr	r0, [r5, #0]
    bee0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    bee4:	6028      	str	r0, [r5, #0]
    bee6:	f001 f804 	bl	cef2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    beea:	b128      	cbz	r0, bef8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    beec:	6828      	ldr	r0, [r5, #0]
    beee:	4930      	ldr	r1, [pc, #192]	; (bfb0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    bef0:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    bef4:	4308      	orrs	r0, r1
    bef6:	6028      	str	r0, [r5, #0]
    bef8:	f001 f817 	bl	cf2a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    befc:	b138      	cbz	r0, bf0e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    befe:	482b      	ldr	r0, [pc, #172]	; (bfac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    bf00:	1d00      	adds	r0, r0, #4
    bf02:	6801      	ldr	r1, [r0, #0]
    bf04:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    bf08:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    bf0c:	6001      	str	r1, [r0, #0]
    bf0e:	4927      	ldr	r1, [pc, #156]	; (bfac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    bf10:	4828      	ldr	r0, [pc, #160]	; (bfb4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    bf12:	313c      	adds	r1, #60	; 0x3c
    bf14:	6008      	str	r0, [r1, #0]
    bf16:	f7f8 ff73 	bl	4e00 <mpsl_fem_device_config_254_apply_get>
    bf1a:	b140      	cbz	r0, bf2e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    bf1c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bf20:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    bf24:	1c41      	adds	r1, r0, #1
    bf26:	d002      	beq.n	bf2e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    bf28:	4920      	ldr	r1, [pc, #128]	; (bfac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    bf2a:	3110      	adds	r1, #16
    bf2c:	6008      	str	r0, [r1, #0]
    bf2e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    bf32:	6e00      	ldr	r0, [r0, #96]	; 0x60
    bf34:	1c41      	adds	r1, r0, #1
    bf36:	d004      	beq.n	bf42 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    bf38:	491f      	ldr	r1, [pc, #124]	; (bfb8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    bf3a:	680a      	ldr	r2, [r1, #0]
    bf3c:	f360 4217 	bfi	r2, r0, #16, #8
    bf40:	600a      	str	r2, [r1, #0]
    bf42:	f240 1103 	movw	r1, #259	; 0x103
    bf46:	f240 605b 	movw	r0, #1627	; 0x65b
    bf4a:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    bf4e:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    bf52:	2001      	movs	r0, #1
    bf54:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    bf58:	f000 f844 	bl	bfe4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    bf5c:	f240 2001 	movw	r0, #513	; 0x201
    bf60:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    bf64:	2002      	movs	r0, #2
    bf66:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    bf6a:	4915      	ldr	r1, [pc, #84]	; (bfc0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    bf6c:	4813      	ldr	r0, [pc, #76]	; (bfbc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    bf6e:	6008      	str	r0, [r1, #0]
    bf70:	4914      	ldr	r1, [pc, #80]	; (bfc4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    bf72:	2000      	movs	r0, #0
    bf74:	4d14      	ldr	r5, [pc, #80]	; (bfc8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    bf76:	8608      	strh	r0, [r1, #48]	; 0x30
    bf78:	3110      	adds	r1, #16
    bf7a:	61c8      	str	r0, [r1, #28]
    bf7c:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    bf80:	7028      	strb	r0, [r5, #0]
    bf82:	2001      	movs	r0, #1
    bf84:	f004 ff1a 	bl	10dbc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    bf88:	2010      	movs	r0, #16
    bf8a:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    bf8e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bf92:	2002      	movs	r0, #2
    bf94:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    bf98:	6868      	ldr	r0, [r5, #4]
    bf9a:	2800      	cmp	r0, #0
    bf9c:	d002      	beq.n	bfa4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    bf9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bfa2:	4700      	bx	r0
    bfa4:	bd70      	pop	{r4, r5, r6, pc}
    bfa6:	0000      	.short	0x0000
    bfa8:	40001000 	.word	0x40001000
    bfac:	4000173c 	.word	0x4000173c
    bfb0:	80000096 	.word	0x80000096
    bfb4:	8900002c 	.word	0x8900002c
    bfb8:	4000158c 	.word	0x4000158c
    bfbc:	0c0e0000 	.word	0x0c0e0000
    bfc0:	4001f508 	.word	0x4001f508
    bfc4:	20001288 	.word	0x20001288
    bfc8:	20000274 	.word	0x20000274

0000bfcc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    bfcc:	4901      	ldr	r1, [pc, #4]	; (bfd4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    bfce:	7548      	strb	r0, [r1, #21]
    bfd0:	4770      	bx	lr
    bfd2:	0000      	.short	0x0000
    bfd4:	20001298 	.word	0x20001298

0000bfd8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    bfd8:	4901      	ldr	r1, [pc, #4]	; (bfe0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    bfda:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    bfde:	4770      	bx	lr
    bfe0:	0000c8dc 	.word	0x0000c8dc

0000bfe4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    bfe4:	4908      	ldr	r1, [pc, #32]	; (c008 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    bfe6:	b510      	push	{r4, lr}
    bfe8:	7508      	strb	r0, [r1, #20]
    bfea:	4908      	ldr	r1, [pc, #32]	; (c00c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    bfec:	2801      	cmp	r0, #1
    bfee:	d006      	beq.n	bffe <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    bff0:	2802      	cmp	r0, #2
    bff2:	d006      	beq.n	c002 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    bff4:	f640 41e8 	movw	r1, #3304	; 0xce8
    bff8:	203e      	movs	r0, #62	; 0x3e
    bffa:	f7f9 f817 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bffe:	2003      	movs	r0, #3
    c000:	e000      	b.n	c004 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    c002:	2004      	movs	r0, #4
    c004:	6008      	str	r0, [r1, #0]
    c006:	bd10      	pop	{r4, pc}
    c008:	20001298 	.word	0x20001298
    c00c:	40001510 	.word	0x40001510

0000c010 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    c010:	4905      	ldr	r1, [pc, #20]	; (c028 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    c012:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    c016:	4805      	ldr	r0, [pc, #20]	; (c02c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    c018:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    c01c:	f041 0101 	orr.w	r1, r1, #1
    c020:	7001      	strb	r1, [r0, #0]
    c022:	f000 baa3 	b.w	c56c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    c026:	0000      	.short	0x0000
    c028:	40001000 	.word	0x40001000
    c02c:	20001298 	.word	0x20001298

0000c030 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    c030:	4901      	ldr	r1, [pc, #4]	; (c038 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    c032:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    c036:	4770      	bx	lr
    c038:	0000c8e8 	.word	0x0000c8e8

0000c03c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    c03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c040:	4e32      	ldr	r6, [pc, #200]	; (c10c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    c042:	4607      	mov	r7, r0
    c044:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c048:	4689      	mov	r9, r1
    c04a:	4614      	mov	r4, r2
    c04c:	6030      	str	r0, [r6, #0]
    c04e:	4610      	mov	r0, r2
    c050:	f7ff ffc8 	bl	bfe4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    c054:	f000 f9e4 	bl	c420 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    c058:	f8df a0b4 	ldr.w	sl, [pc, #180]	; c110 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    c05c:	4d2d      	ldr	r5, [pc, #180]	; (c114 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    c05e:	f04f 0801 	mov.w	r8, #1
    c062:	b127      	cbz	r7, c06e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    c064:	2f01      	cmp	r7, #1
    c066:	d015      	beq.n	c094 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    c068:	f240 71f1 	movw	r1, #2033	; 0x7f1
    c06c:	e044      	b.n	c0f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    c06e:	4620      	mov	r0, r4
    c070:	f000 fa06 	bl	c480 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    c074:	4620      	mov	r0, r4
    c076:	f000 f9b7 	bl	c3e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c07a:	4827      	ldr	r0, [pc, #156]	; (c118 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>)
    c07c:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
    c080:	4648      	mov	r0, r9
    c082:	f000 fbdd 	bl	c840 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x464>
    c086:	4604      	mov	r4, r0
    c088:	4650      	mov	r0, sl
    c08a:	f000 fb97 	bl	c7bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    c08e:	f885 8009 	strb.w	r8, [r5, #9]
    c092:	e011      	b.n	c0b8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x7c>
    c094:	f000 fa1c 	bl	c4d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    c098:	f000 fb66 	bl	c768 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>
    c09c:	f000 fa54 	bl	c548 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x16c>
    c0a0:	f649 71ba 	movw	r1, #40890	; 0x9fba
    c0a4:	4648      	mov	r0, r9
    c0a6:	f000 fbcb 	bl	c840 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x464>
    c0aa:	4604      	mov	r4, r0
    c0ac:	4818      	ldr	r0, [pc, #96]	; (c110 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    c0ae:	1d00      	adds	r0, r0, #4
    c0b0:	f000 fb84 	bl	c7bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    c0b4:	2002      	movs	r0, #2
    c0b6:	7268      	strb	r0, [r5, #9]
    c0b8:	f8df 9060 	ldr.w	r9, [pc, #96]	; c11c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>
    c0bc:	f8c9 4540 	str.w	r4, [r9, #1344]	; 0x540
    c0c0:	4918      	ldr	r1, [pc, #96]	; (c124 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    c0c2:	4817      	ldr	r0, [pc, #92]	; (c120 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    c0c4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    c0c8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    c0ca:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    c0ce:	62a8      	str	r0, [r5, #40]	; 0x28
    c0d0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    c0d4:	6030      	str	r0, [r6, #0]
    c0d6:	2010      	movs	r0, #16
    c0d8:	f8ca 0304 	str.w	r0, [sl, #772]	; 0x304
    c0dc:	03c0      	lsls	r0, r0, #15
    c0de:	6030      	str	r0, [r6, #0]
    c0e0:	f000 fa7e 	bl	c5e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    c0e4:	f8c9 804c 	str.w	r8, [r9, #76]	; 0x4c
    c0e8:	480c      	ldr	r0, [pc, #48]	; (c11c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    c0ea:	300c      	adds	r0, #12
    c0ec:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    c0f0:	42a0      	cmp	r0, r4
    c0f2:	d304      	bcc.n	c0fe <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc2>
    c0f4:	f640 0118 	movw	r1, #2072	; 0x818
    c0f8:	203e      	movs	r0, #62	; 0x3e
    c0fa:	f7f8 ff97 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c0fe:	4621      	mov	r1, r4
    c100:	4638      	mov	r0, r7
    c102:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c106:	f000 bb65 	b.w	c7d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f8>
    c10a:	0000      	.short	0x0000
    c10c:	4001f504 	.word	0x4001f504
    c110:	40001000 	.word	0x40001000
    c114:	20001298 	.word	0x20001298
    c118:	0000c8b0 	.word	0x0000c8b0
    c11c:	40008000 	.word	0x40008000
    c120:	40008140 	.word	0x40008140
    c124:	4001f098 	.word	0x4001f098

0000c128 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    c128:	4b0d      	ldr	r3, [pc, #52]	; (c160 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    c12a:	b510      	push	{r4, lr}
    c12c:	71d8      	strb	r0, [r3, #7]
    c12e:	729a      	strb	r2, [r3, #10]
    c130:	b151      	cbz	r1, c148 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    c132:	2002      	movs	r0, #2
    c134:	7218      	strb	r0, [r3, #8]
    c136:	2801      	cmp	r0, #1
    c138:	d008      	beq.n	c14c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    c13a:	2802      	cmp	r0, #2
    c13c:	d00f      	beq.n	c15e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    c13e:	f640 210d 	movw	r1, #2573	; 0xa0d
    c142:	203e      	movs	r0, #62	; 0x3e
    c144:	f7f8 ff72 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c148:	2001      	movs	r0, #1
    c14a:	e7f3      	b.n	c134 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    c14c:	7a58      	ldrb	r0, [r3, #9]
    c14e:	2802      	cmp	r0, #2
    c150:	d105      	bne.n	c15e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    c152:	f000 f9bd 	bl	c4d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    c156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c15a:	f000 bb05 	b.w	c768 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>
    c15e:	bd10      	pop	{r4, pc}
    c160:	20001298 	.word	0x20001298

0000c164 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    c164:	4902      	ldr	r1, [pc, #8]	; (c170 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    c166:	2000      	movs	r0, #0
    c168:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c16c:	4770      	bx	lr
    c16e:	0000      	.short	0x0000
    c170:	40008000 	.word	0x40008000

0000c174 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    c174:	4904      	ldr	r1, [pc, #16]	; (c188 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    c176:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    c17a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    c17e:	4249      	negs	r1, r1
    c180:	7001      	strb	r1, [r0, #0]
    c182:	2001      	movs	r0, #1
    c184:	4770      	bx	lr
    c186:	0000      	.short	0x0000
    c188:	40001000 	.word	0x40001000

0000c18c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    c18c:	4903      	ldr	r1, [pc, #12]	; (c19c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    c18e:	0e02      	lsrs	r2, r0, #24
    c190:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    c194:	0200      	lsls	r0, r0, #8
    c196:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    c19a:	4770      	bx	lr
    c19c:	40001000 	.word	0x40001000

0000c1a0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    c1a0:	6800      	ldr	r0, [r0, #0]
    c1a2:	4903      	ldr	r1, [pc, #12]	; (c1b0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    c1a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c1a8:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    c1ac:	4770      	bx	lr
    c1ae:	0000      	.short	0x0000
    c1b0:	40001000 	.word	0x40001000

0000c1b4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    c1b4:	b510      	push	{r4, lr}
    c1b6:	2200      	movs	r2, #0
    c1b8:	2901      	cmp	r1, #1
    c1ba:	d006      	beq.n	c1ca <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    c1bc:	2902      	cmp	r1, #2
    c1be:	d002      	beq.n	c1c6 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    c1c0:	f240 219d 	movw	r1, #669	; 0x29d
    c1c4:	e014      	b.n	c1f0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    c1c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c1ca:	490b      	ldr	r1, [pc, #44]	; (c1f8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    c1cc:	430a      	orrs	r2, r1
    c1ce:	490b      	ldr	r1, [pc, #44]	; (c1fc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    c1d0:	600a      	str	r2, [r1, #0]
    c1d2:	490b      	ldr	r1, [pc, #44]	; (c200 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    c1d4:	4308      	orrs	r0, r1
    c1d6:	4909      	ldr	r1, [pc, #36]	; (c1fc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    c1d8:	1d09      	adds	r1, r1, #4
    c1da:	6008      	str	r0, [r1, #0]
    c1dc:	4809      	ldr	r0, [pc, #36]	; (c204 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    c1de:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    c1e2:	b2c0      	uxtb	r0, r0
    c1e4:	2803      	cmp	r0, #3
    c1e6:	d001      	beq.n	c1ec <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    c1e8:	280b      	cmp	r0, #11
    c1ea:	d104      	bne.n	c1f6 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    c1ec:	f240 21b5 	movw	r1, #693	; 0x2b5
    c1f0:	203e      	movs	r0, #62	; 0x3e
    c1f2:	f7f8 ff1b 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1f6:	bd10      	pop	{r4, pc}
    c1f8:	00100108 	.word	0x00100108
    c1fc:	40001514 	.word	0x40001514
    c200:	02030000 	.word	0x02030000
    c204:	40001000 	.word	0x40001000

0000c208 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    c208:	4901      	ldr	r1, [pc, #4]	; (c210 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    c20a:	7588      	strb	r0, [r1, #22]
    c20c:	4770      	bx	lr
    c20e:	0000      	.short	0x0000
    c210:	20001298 	.word	0x20001298

0000c214 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    c214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c218:	4853      	ldr	r0, [pc, #332]	; (c368 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    c21a:	f04f 0a01 	mov.w	sl, #1
    c21e:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    c222:	4851      	ldr	r0, [pc, #324]	; (c368 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    c224:	300c      	adds	r0, #12
    c226:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    c22a:	f7f7 fd6b 	bl	3d04 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    c22e:	4d4f      	ldr	r5, [pc, #316]	; (c36c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    c230:	e9c5 070c 	strd	r0, r7, [r5, #48]	; 0x30
    c234:	f000 f956 	bl	c4e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    c238:	494d      	ldr	r1, [pc, #308]	; (c370 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    c23a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    c23c:	6008      	str	r0, [r1, #0]
    c23e:	f8df 9134 	ldr.w	r9, [pc, #308]	; c374 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    c242:	2600      	movs	r6, #0
    c244:	62ae      	str	r6, [r5, #40]	; 0x28
    c246:	f8d9 1200 	ldr.w	r1, [r9, #512]	; 0x200
    c24a:	f240 121d 	movw	r2, #285	; 0x11d
    c24e:	4391      	bics	r1, r2
    c250:	f8c9 1200 	str.w	r1, [r9, #512]	; 0x200
    c254:	f885 602c 	strb.w	r6, [r5, #44]	; 0x2c
    c258:	f000 f9d6 	bl	c608 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x22c>
    c25c:	4604      	mov	r4, r0
    c25e:	4842      	ldr	r0, [pc, #264]	; (c368 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    c260:	3008      	adds	r0, #8
    c262:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    c266:	61e8      	str	r0, [r5, #28]
    c268:	f895 0021 	ldrb.w	r0, [r5, #33]	; 0x21
    c26c:	7d28      	ldrb	r0, [r5, #20]
    c26e:	f885 0020 	strb.w	r0, [r5, #32]
    c272:	7a68      	ldrb	r0, [r5, #9]
    c274:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
    c278:	61ae      	str	r6, [r5, #24]
    c27a:	4e3f      	ldr	r6, [pc, #252]	; (c378 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    c27c:	07a0      	lsls	r0, r4, #30
    c27e:	d502      	bpl.n	c286 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x72>
    c280:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    c284:	61a8      	str	r0, [r5, #24]
    c286:	0720      	lsls	r0, r4, #28
    c288:	d502      	bpl.n	c290 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x7c>
    c28a:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    c28e:	61a8      	str	r0, [r5, #24]
    c290:	f04f 0800 	mov.w	r8, #0
    c294:	4639      	mov	r1, r7
    c296:	4620      	mov	r0, r4
    c298:	f000 fa2c 	bl	c6f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>
    c29c:	b918      	cbnz	r0, c2a6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    c29e:	f8c9 a010 	str.w	sl, [r9, #16]
    c2a2:	f04f 0801 	mov.w	r8, #1
    c2a6:	4f31      	ldr	r7, [pc, #196]	; (c36c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    c2a8:	07e0      	lsls	r0, r4, #31
    c2aa:	f1a7 0710 	sub.w	r7, r7, #16
    c2ae:	d002      	beq.n	c2b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa2>
    c2b0:	6838      	ldr	r0, [r7, #0]
    c2b2:	4780      	blx	r0
    c2b4:	e032      	b.n	c31c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    c2b6:	07a0      	lsls	r0, r4, #30
    c2b8:	d527      	bpl.n	c30a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    c2ba:	0760      	lsls	r0, r4, #29
    c2bc:	d41f      	bmi.n	c2fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c2be:	f000 fe34 	bl	cf2a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c2c2:	b9e0      	cbnz	r0, c2fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c2c4:	f000 fe21 	bl	cf0a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c2c8:	b9c8      	cbnz	r0, c2fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c2ca:	482c      	ldr	r0, [pc, #176]	; (c37c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    c2cc:	6800      	ldr	r0, [r0, #0]
    c2ce:	f3c0 5342 	ubfx	r3, r0, #21, #3
    c2d2:	f3c0 6200 	ubfx	r2, r0, #24, #1
    c2d6:	f000 010f 	and.w	r1, r0, #15
    c2da:	f3c0 1c03 	ubfx	ip, r0, #4, #4
    c2de:	f3c0 2003 	ubfx	r0, r0, #8, #4
    c2e2:	b162      	cbz	r2, c2fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c2e4:	b119      	cbz	r1, c2ee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c2e6:	f1bc 0f00 	cmp.w	ip, #0
    c2ea:	d000      	beq.n	c2ee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c2ec:	b938      	cbnz	r0, c2fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c2ee:	4823      	ldr	r0, [pc, #140]	; (c37c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    c2f0:	1d00      	adds	r0, r0, #4
    c2f2:	6800      	ldr	r0, [r0, #0]
    c2f4:	b118      	cbz	r0, c2fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c2f6:	2b03      	cmp	r3, #3
    c2f8:	d201      	bcs.n	c2fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c2fa:	f044 0404 	orr.w	r4, r4, #4
    c2fe:	f344 0080 	sbfx	r0, r4, #2, #1
    c302:	4641      	mov	r1, r8
    c304:	1c40      	adds	r0, r0, #1
    c306:	687a      	ldr	r2, [r7, #4]
    c308:	e007      	b.n	c31a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    c30a:	f014 0f28 	tst.w	r4, #40	; 0x28
    c30e:	d005      	beq.n	c31c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    c310:	f344 1140 	sbfx	r1, r4, #5, #1
    c314:	68ba      	ldr	r2, [r7, #8]
    c316:	4640      	mov	r0, r8
    c318:	1c49      	adds	r1, r1, #1
    c31a:	4790      	blx	r2
    c31c:	06e0      	lsls	r0, r4, #27
    c31e:	d501      	bpl.n	c324 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x110>
    c320:	68f8      	ldr	r0, [r7, #12]
    c322:	4780      	blx	r0
    c324:	7a68      	ldrb	r0, [r5, #9]
    c326:	2802      	cmp	r0, #2
    c328:	d11c      	bne.n	c364 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    c32a:	7b28      	ldrb	r0, [r5, #12]
    c32c:	2800      	cmp	r0, #0
    c32e:	d019      	beq.n	c364 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    c330:	2802      	cmp	r0, #2
    c332:	d004      	beq.n	c33e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
    c334:	2801      	cmp	r0, #1
    c336:	d006      	beq.n	c346 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x132>
    c338:	f640 31e3 	movw	r1, #3043	; 0xbe3
    c33c:	e009      	b.n	c352 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    c33e:	6929      	ldr	r1, [r5, #16]
    c340:	69e8      	ldr	r0, [r5, #28]
    c342:	4408      	add	r0, r1
    c344:	e008      	b.n	c358 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    c346:	69e9      	ldr	r1, [r5, #28]
    c348:	6928      	ldr	r0, [r5, #16]
    c34a:	4288      	cmp	r0, r1
    c34c:	d804      	bhi.n	c358 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    c34e:	f640 31e4 	movw	r1, #3044	; 0xbe4
    c352:	203e      	movs	r0, #62	; 0x3e
    c354:	f7f8 fe6a 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c358:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    c35c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c360:	f000 ba0c 	b.w	c77c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>
    c364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c368:	40008000 	.word	0x40008000
    c36c:	20001298 	.word	0x20001298
    c370:	4001f508 	.word	0x4001f508
    c374:	40001000 	.word	0x40001000
    c378:	40008004 	.word	0x40008004
    c37c:	40001450 	.word	0x40001450

0000c380 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    c380:	b570      	push	{r4, r5, r6, lr}
    c382:	4b15      	ldr	r3, [pc, #84]	; (c3d8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x58>)
    c384:	888c      	ldrh	r4, [r1, #4]
    c386:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    c38a:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    c38e:	780c      	ldrb	r4, [r1, #0]
    c390:	f8d1 1001 	ldr.w	r1, [r1, #1]
    c394:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    c398:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    c39c:	f8d3 4640 	ldr.w	r4, [r3, #1600]	; 0x640
    c3a0:	2101      	movs	r1, #1
    c3a2:	4081      	lsls	r1, r0
    c3a4:	430c      	orrs	r4, r1
    c3a6:	b2e4      	uxtb	r4, r4
    c3a8:	b132      	cbz	r2, c3b8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x38>
    c3aa:	2a01      	cmp	r2, #1
    c3ac:	d00a      	beq.n	c3c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44>
    c3ae:	f240 5164 	movw	r1, #1380	; 0x564
    c3b2:	203e      	movs	r0, #62	; 0x3e
    c3b4:	f7f8 fe3a 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c3b8:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    c3bc:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c3c0:	4388      	bics	r0, r1
    c3c2:	e004      	b.n	c3ce <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e>
    c3c4:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    c3c8:	ea41 2010 	orr.w	r0, r1, r0, lsr #8
    c3cc:	b2c0      	uxtb	r0, r0
    c3ce:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    c3d2:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    c3d6:	bd70      	pop	{r4, r5, r6, pc}
    c3d8:	40001000 	.word	0x40001000

0000c3dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    c3dc:	4901      	ldr	r1, [pc, #4]	; (c3e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    c3de:	2001      	movs	r0, #1
    c3e0:	7008      	strb	r0, [r1, #0]
    c3e2:	4770      	bx	lr
    c3e4:	20000274 	.word	0x20000274
    c3e8:	b510      	push	{r4, lr}
    c3ea:	4604      	mov	r4, r0
    c3ec:	f000 fd9d 	bl	cf2a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c3f0:	2800      	cmp	r0, #0
    c3f2:	d00e      	beq.n	c412 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    c3f4:	4a09      	ldr	r2, [pc, #36]	; (c41c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    c3f6:	6811      	ldr	r1, [r2, #0]
    c3f8:	0650      	lsls	r0, r2, #25
    c3fa:	2c02      	cmp	r4, #2
    c3fc:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    c400:	d008      	beq.n	c414 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    c402:	f3c0 2006 	ubfx	r0, r0, #8, #7
    c406:	bf00      	nop
    c408:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    c40c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    c410:	6010      	str	r0, [r2, #0]
    c412:	bd10      	pop	{r4, pc}
    c414:	f3c0 6006 	ubfx	r0, r0, #24, #7
    c418:	e7f6      	b.n	c408 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    c41a:	0000      	.short	0x0000
    c41c:	40001588 	.word	0x40001588
    c420:	4815      	ldr	r0, [pc, #84]	; (c478 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x9c>)
    c422:	7d81      	ldrb	r1, [r0, #22]
    c424:	2925      	cmp	r1, #37	; 0x25
    c426:	d00a      	beq.n	c43e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x62>
    c428:	2926      	cmp	r1, #38	; 0x26
    c42a:	d00b      	beq.n	c444 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    c42c:	2927      	cmp	r1, #39	; 0x27
    c42e:	d00c      	beq.n	c44a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
    c430:	7d80      	ldrb	r0, [r0, #22]
    c432:	0040      	lsls	r0, r0, #1
    c434:	290a      	cmp	r1, #10
    c436:	d80b      	bhi.n	c450 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x74>
    c438:	f600 1064 	addw	r0, r0, #2404	; 0x964
    c43c:	e00a      	b.n	c454 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>
    c43e:	f640 1062 	movw	r0, #2402	; 0x962
    c442:	e00f      	b.n	c464 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    c444:	f640 107a 	movw	r0, #2426	; 0x97a
    c448:	e00c      	b.n	c464 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    c44a:	f44f 601b 	mov.w	r0, #2480	; 0x9b0
    c44e:	e009      	b.n	c464 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    c450:	f600 1066 	addw	r0, r0, #2406	; 0x966
    c454:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    c458:	d204      	bcs.n	c464 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    c45a:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    c45e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    c462:	e001      	b.n	c468 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>
    c464:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    c468:	4a04      	ldr	r2, [pc, #16]	; (c47c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa0>)
    c46a:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    c46e:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    c472:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    c476:	4770      	bx	lr
    c478:	20001298 	.word	0x20001298
    c47c:	40001000 	.word	0x40001000
    c480:	4912      	ldr	r1, [pc, #72]	; (c4cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    c482:	b508      	push	{r3, lr}
    c484:	f991 2015 	ldrsb.w	r2, [r1, #21]
    c488:	7d89      	ldrb	r1, [r1, #22]
    c48a:	2801      	cmp	r0, #1
    c48c:	d00a      	beq.n	c4a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>
    c48e:	2802      	cmp	r0, #2
    c490:	d00a      	beq.n	c4a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    c492:	2804      	cmp	r0, #4
    c494:	d00a      	beq.n	c4ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>
    c496:	2808      	cmp	r0, #8
    c498:	d00a      	beq.n	c4b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    c49a:	f240 31fe 	movw	r1, #1022	; 0x3fe
    c49e:	2006      	movs	r0, #6
    c4a0:	f7f8 fdc4 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c4a4:	2000      	movs	r0, #0
    c4a6:	e004      	b.n	c4b2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    c4a8:	2001      	movs	r0, #1
    c4aa:	e002      	b.n	c4b2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    c4ac:	2003      	movs	r0, #3
    c4ae:	e000      	b.n	c4b2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    c4b0:	2002      	movs	r0, #2
    c4b2:	466b      	mov	r3, sp
    c4b4:	f7f5 f95a 	bl	176c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    c4b8:	b118      	cbz	r0, c4c2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe6>
    c4ba:	f240 5196 	movw	r1, #1430	; 0x596
    c4be:	203e      	movs	r0, #62	; 0x3e
    c4c0:	e7ee      	b.n	c4a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc4>
    c4c2:	f99d 0000 	ldrsb.w	r0, [sp]
    c4c6:	f000 fa59 	bl	c97c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    c4ca:	bd08      	pop	{r3, pc}
    c4cc:	20001298 	.word	0x20001298
    c4d0:	4803      	ldr	r0, [pc, #12]	; (c4e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>)
    c4d2:	7a01      	ldrb	r1, [r0, #8]
    c4d4:	2901      	cmp	r1, #1
    c4d6:	d102      	bne.n	c4de <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x102>
    c4d8:	7a80      	ldrb	r0, [r0, #10]
    c4da:	f7ff bfd1 	b.w	c480 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    c4de:	4770      	bx	lr
    c4e0:	20001298 	.word	0x20001298
    c4e4:	480d      	ldr	r0, [pc, #52]	; (c51c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x140>)
    c4e6:	b510      	push	{r4, lr}
    c4e8:	7a40      	ldrb	r0, [r0, #9]
    c4ea:	2801      	cmp	r0, #1
    c4ec:	d00c      	beq.n	c508 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12c>
    c4ee:	2802      	cmp	r0, #2
    c4f0:	d113      	bne.n	c51a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x13e>
    c4f2:	f7f8 fc67 	bl	4dc4 <mpsl_fem_lna_configuration_clear>
    c4f6:	2800      	cmp	r0, #0
    c4f8:	d00f      	beq.n	c51a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x13e>
    c4fa:	1c40      	adds	r0, r0, #1
    c4fc:	d00d      	beq.n	c51a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x13e>
    c4fe:	f640 0188 	movw	r1, #2184	; 0x888
    c502:	203e      	movs	r0, #62	; 0x3e
    c504:	f7f8 fd92 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c508:	f7f8 fc68 	bl	4ddc <mpsl_fem_pa_configuration_clear>
    c50c:	2800      	cmp	r0, #0
    c50e:	d004      	beq.n	c51a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x13e>
    c510:	1c40      	adds	r0, r0, #1
    c512:	d002      	beq.n	c51a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x13e>
    c514:	f640 0182 	movw	r1, #2178	; 0x882
    c518:	e7f3      	b.n	c502 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x126>
    c51a:	bd10      	pop	{r4, pc}
    c51c:	20001298 	.word	0x20001298
    c520:	4808      	ldr	r0, [pc, #32]	; (c544 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>)
    c522:	2100      	movs	r1, #0
    c524:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c528:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    c52c:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    c530:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    c534:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    c538:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    c53c:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    c540:	4770      	bx	lr
    c542:	0000      	.short	0x0000
    c544:	40001000 	.word	0x40001000
    c548:	b510      	push	{r4, lr}
    c54a:	f000 fcee 	bl	cf2a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c54e:	2800      	cmp	r0, #0
    c550:	d108      	bne.n	c564 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    c552:	f000 fcda 	bl	cf0a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c556:	2800      	cmp	r0, #0
    c558:	d104      	bne.n	c564 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    c55a:	4803      	ldr	r0, [pc, #12]	; (c568 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    c55c:	6801      	ldr	r1, [r0, #0]
    c55e:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    c562:	6001      	str	r1, [r0, #0]
    c564:	bd10      	pop	{r4, pc}
    c566:	0000      	.short	0x0000
    c568:	40001568 	.word	0x40001568
    c56c:	4818      	ldr	r0, [pc, #96]	; (c5d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f4>)
    c56e:	b510      	push	{r4, lr}
    c570:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    c574:	07c1      	lsls	r1, r0, #31
    c576:	d029      	beq.n	c5cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    c578:	0781      	lsls	r1, r0, #30
    c57a:	d514      	bpl.n	c5a6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ca>
    c57c:	4815      	ldr	r0, [pc, #84]	; (c5d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f8>)
    c57e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c582:	f041 0101 	orr.w	r1, r1, #1
    c586:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c58a:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    c58e:	b2c0      	uxtb	r0, r0
    c590:	280b      	cmp	r0, #11
    c592:	d005      	beq.n	c5a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c4>
    c594:	280a      	cmp	r0, #10
    c596:	d003      	beq.n	c5a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c4>
    c598:	2803      	cmp	r0, #3
    c59a:	d001      	beq.n	c5a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c4>
    c59c:	2802      	cmp	r0, #2
    c59e:	d115      	bne.n	c5cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    c5a0:	f240 51c7 	movw	r1, #1479	; 0x5c7
    c5a4:	e00f      	b.n	c5c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ea>
    c5a6:	0740      	lsls	r0, r0, #29
    c5a8:	d510      	bpl.n	c5cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    c5aa:	480a      	ldr	r0, [pc, #40]	; (c5d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f8>)
    c5ac:	490a      	ldr	r1, [pc, #40]	; (c5d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1fc>)
    c5ae:	3008      	adds	r0, #8
    c5b0:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c5b4:	f44f 71a0 	mov.w	r1, #320	; 0x140
    c5b8:	4808      	ldr	r0, [pc, #32]	; (c5dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>)
    c5ba:	f004 fc22 	bl	10e02 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    c5be:	2800      	cmp	r0, #0
    c5c0:	d004      	beq.n	c5cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    c5c2:	f240 51cf 	movw	r1, #1487	; 0x5cf
    c5c6:	203e      	movs	r0, #62	; 0x3e
    c5c8:	f7f8 fd30 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c5cc:	bd10      	pop	{r4, pc}
    c5ce:	0000      	.short	0x0000
    c5d0:	20001298 	.word	0x20001298
    c5d4:	40001000 	.word	0x40001000
    c5d8:	4001f098 	.word	0x4001f098
    c5dc:	40008000 	.word	0x40008000
    c5e0:	4808      	ldr	r0, [pc, #32]	; (c604 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x228>)
    c5e2:	4601      	mov	r1, r0
    c5e4:	79c2      	ldrb	r2, [r0, #7]
    c5e6:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    c5ea:	b112      	cbz	r2, c5f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x216>
    c5ec:	2a01      	cmp	r2, #1
    c5ee:	d003      	beq.n	c5f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x21c>
    c5f0:	e006      	b.n	c600 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c5f2:	f041 0102 	orr.w	r1, r1, #2
    c5f6:	e001      	b.n	c5fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x220>
    c5f8:	f041 0104 	orr.w	r1, r1, #4
    c5fc:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    c600:	f7ff bfb4 	b.w	c56c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    c604:	20001298 	.word	0x20001298
    c608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c60c:	4d35      	ldr	r5, [pc, #212]	; (c6e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x308>)
    c60e:	2400      	movs	r4, #0
    c610:	7b28      	ldrb	r0, [r5, #12]
    c612:	b138      	cbz	r0, c624 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    c614:	f44f 71a2 	mov.w	r1, #324	; 0x144
    c618:	4833      	ldr	r0, [pc, #204]	; (c6e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x30c>)
    c61a:	f004 fbf2 	bl	10e02 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    c61e:	b108      	cbz	r0, c624 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    c620:	2601      	movs	r6, #1
    c622:	e000      	b.n	c626 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    c624:	2600      	movs	r6, #0
    c626:	7a68      	ldrb	r0, [r5, #9]
    c628:	4f30      	ldr	r7, [pc, #192]	; (c6ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>)
    c62a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    c62e:	2801      	cmp	r0, #1
    c630:	d002      	beq.n	c638 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x25c>
    c632:	2802      	cmp	r0, #2
    c634:	d008      	beq.n	c648 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>
    c636:	e018      	b.n	c66a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28e>
    c638:	4638      	mov	r0, r7
    c63a:	f004 fbdd 	bl	10df8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c63e:	b108      	cbz	r0, c644 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>
    c640:	2408      	movs	r4, #8
    c642:	e012      	b.n	c66a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28e>
    c644:	2400      	movs	r4, #0
    c646:	e010      	b.n	c66a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28e>
    c648:	4638      	mov	r0, r7
    c64a:	f004 fbd5 	bl	10df8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c64e:	b100      	cbz	r0, c652 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x276>
    c650:	2002      	movs	r0, #2
    c652:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
    c656:	43c9      	mvns	r1, r1
    c658:	f341 0100 	sbfx	r1, r1, #0, #1
    c65c:	1c49      	adds	r1, r1, #1
    c65e:	d001      	beq.n	c664 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x288>
    c660:	2400      	movs	r4, #0
    c662:	e000      	b.n	c666 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28a>
    c664:	2404      	movs	r4, #4
    c666:	4304      	orrs	r4, r0
    c668:	4334      	orrs	r4, r6
    c66a:	f014 0f0b 	tst.w	r4, #11
    c66e:	d107      	bne.n	c680 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    c670:	f44f 7188 	mov.w	r1, #272	; 0x110
    c674:	4638      	mov	r0, r7
    c676:	f004 fbbf 	bl	10df8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c67a:	b100      	cbz	r0, c67e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    c67c:	2010      	movs	r0, #16
    c67e:	4304      	orrs	r4, r0
    c680:	481b      	ldr	r0, [pc, #108]	; (c6f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x314>)
    c682:	7800      	ldrb	r0, [r0, #0]
    c684:	b1f8      	cbz	r0, c6c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ea>
    c686:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    c68a:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    c68e:	d007      	beq.n	c6a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    c690:	f44f 718a 	mov.w	r1, #276	; 0x114
    c694:	4638      	mov	r0, r7
    c696:	f004 fbaf 	bl	10df8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c69a:	b108      	cbz	r0, c6a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    c69c:	2001      	movs	r0, #1
    c69e:	e000      	b.n	c6a2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c6>
    c6a0:	2000      	movs	r0, #0
    c6a2:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    c6a6:	b13e      	cbz	r6, c6b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c6a8:	f44f 718c 	mov.w	r1, #280	; 0x118
    c6ac:	4638      	mov	r0, r7
    c6ae:	f004 fba3 	bl	10df8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c6b2:	b108      	cbz	r0, c6b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c6b4:	2001      	movs	r0, #1
    c6b6:	e000      	b.n	c6ba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2de>
    c6b8:	2000      	movs	r0, #0
    c6ba:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    c6be:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    c6c2:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    c6c6:	f7ff ff2b 	bl	c520 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x144>
    c6ca:	06e0      	lsls	r0, r4, #27
    c6cc:	d506      	bpl.n	c6dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    c6ce:	0720      	lsls	r0, r4, #28
    c6d0:	d404      	bmi.n	c6dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    c6d2:	7a68      	ldrb	r0, [r5, #9]
    c6d4:	2801      	cmp	r0, #1
    c6d6:	d101      	bne.n	c6dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    c6d8:	f044 0420 	orr.w	r4, r4, #32
    c6dc:	4620      	mov	r0, r4
    c6de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c6e2:	0000      	.short	0x0000
    c6e4:	20001298 	.word	0x20001298
    c6e8:	40008000 	.word	0x40008000
    c6ec:	40001000 	.word	0x40001000
    c6f0:	20000274 	.word	0x20000274
    c6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c6f8:	4c19      	ldr	r4, [pc, #100]	; (c760 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x384>)
    c6fa:	460d      	mov	r5, r1
    c6fc:	7a21      	ldrb	r1, [r4, #8]
    c6fe:	b129      	cbz	r1, c70c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>
    c700:	f010 0f11 	tst.w	r0, #17
    c704:	d00b      	beq.n	c71e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x342>
    c706:	f7ff f9e7 	bl	bad8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c70a:	e027      	b.n	c75c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
    c70c:	4915      	ldr	r1, [pc, #84]	; (c764 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>)
    c70e:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c712:	6008      	str	r0, [r1, #0]
    c714:	f000 f88c 	bl	c830 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    c718:	2000      	movs	r0, #0
    c71a:	7320      	strb	r0, [r4, #12]
    c71c:	e01e      	b.n	c75c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
    c71e:	2901      	cmp	r1, #1
    c720:	d001      	beq.n	c726 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34a>
    c722:	2601      	movs	r6, #1
    c724:	e000      	b.n	c728 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    c726:	2600      	movs	r6, #0
    c728:	79e0      	ldrb	r0, [r4, #7]
    c72a:	2801      	cmp	r0, #1
    c72c:	d00e      	beq.n	c74c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x370>
    c72e:	2700      	movs	r7, #0
    c730:	f000 f87e 	bl	c830 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    c734:	2196      	movs	r1, #150	; 0x96
    c736:	4630      	mov	r0, r6
    c738:	f000 f890 	bl	c85c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x480>
    c73c:	4601      	mov	r1, r0
    c73e:	b14f      	cbz	r7, c754 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x378>
    c740:	353b      	adds	r5, #59	; 0x3b
    c742:	428d      	cmp	r5, r1
    c744:	d904      	bls.n	c750 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    c746:	2000      	movs	r0, #0
    c748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c74c:	2701      	movs	r7, #1
    c74e:	e7ef      	b.n	c730 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    c750:	2001      	movs	r0, #1
    c752:	71e0      	strb	r0, [r4, #7]
    c754:	7aa2      	ldrb	r2, [r4, #10]
    c756:	4630      	mov	r0, r6
    c758:	f7ff fc70 	bl	c03c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    c75c:	2001      	movs	r0, #1
    c75e:	e7f3      	b.n	c748 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36c>
    c760:	20001298 	.word	0x20001298
    c764:	4001f508 	.word	0x4001f508
    c768:	4803      	ldr	r0, [pc, #12]	; (c778 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>)
    c76a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c76e:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    c772:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c776:	4770      	bx	lr
    c778:	40001000 	.word	0x40001000
    c77c:	4804      	ldr	r0, [pc, #16]	; (c790 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>)
    c77e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c780:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c784:	6281      	str	r1, [r0, #40]	; 0x28
    c786:	4903      	ldr	r1, [pc, #12]	; (c794 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>)
    c788:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c78c:	6008      	str	r0, [r1, #0]
    c78e:	4770      	bx	lr
    c790:	20001298 	.word	0x20001298
    c794:	4001f504 	.word	0x4001f504
    c798:	4a07      	ldr	r2, [pc, #28]	; (c7b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    c79a:	2000      	movs	r0, #0
    c79c:	3208      	adds	r2, #8
    c79e:	4906      	ldr	r1, [pc, #24]	; (c7b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    c7a0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c7a4:	1d0a      	adds	r2, r1, #4
    c7a6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c7aa:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c7ae:	4902      	ldr	r1, [pc, #8]	; (c7b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    c7b0:	310c      	adds	r1, #12
    c7b2:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c7b6:	4770      	bx	lr
    c7b8:	40008000 	.word	0x40008000
    c7bc:	4903      	ldr	r1, [pc, #12]	; (c7cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>)
    c7be:	79c9      	ldrb	r1, [r1, #7]
    c7c0:	2900      	cmp	r1, #0
    c7c2:	d102      	bne.n	c7ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ee>
    c7c4:	4902      	ldr	r1, [pc, #8]	; (c7d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f4>)
    c7c6:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c7ca:	4770      	bx	lr
    c7cc:	20001298 	.word	0x20001298
    c7d0:	4001f098 	.word	0x4001f098
    c7d4:	b510      	push	{r4, lr}
    c7d6:	4a14      	ldr	r2, [pc, #80]	; (c828 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44c>)
    c7d8:	b120      	cbz	r0, c7e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    c7da:	2801      	cmp	r0, #1
    c7dc:	d011      	beq.n	c802 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x426>
    c7de:	f240 61fc 	movw	r1, #1788	; 0x6fc
    c7e2:	e01c      	b.n	c81e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x442>
    c7e4:	f101 0028 	add.w	r0, r1, #40	; 0x28
    c7e8:	e9c2 1002 	strd	r1, r0, [r2, #8]
    c7ec:	490f      	ldr	r1, [pc, #60]	; (c82c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x450>)
    c7ee:	480e      	ldr	r0, [pc, #56]	; (c828 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44c>)
    c7f0:	f7f8 fafa 	bl	4de8 <mpsl_fem_pa_configuration_set>
    c7f4:	2800      	cmp	r0, #0
    c7f6:	d015      	beq.n	c824 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c7f8:	1c40      	adds	r0, r0, #1
    c7fa:	d013      	beq.n	c824 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c7fc:	f240 61eb 	movw	r1, #1771	; 0x6eb
    c800:	e00d      	b.n	c81e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x442>
    c802:	f101 0029 	add.w	r0, r1, #41	; 0x29
    c806:	e9c2 1002 	strd	r1, r0, [r2, #8]
    c80a:	4908      	ldr	r1, [pc, #32]	; (c82c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x450>)
    c80c:	4806      	ldr	r0, [pc, #24]	; (c828 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44c>)
    c80e:	f7f8 fadf 	bl	4dd0 <mpsl_fem_lna_configuration_set>
    c812:	2800      	cmp	r0, #0
    c814:	d006      	beq.n	c824 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c816:	1c40      	adds	r0, r0, #1
    c818:	d004      	beq.n	c824 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c81a:	f44f 61df 	mov.w	r1, #1784	; 0x6f8
    c81e:	203e      	movs	r0, #62	; 0x3e
    c820:	f7f8 fc04 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c824:	bd10      	pop	{r4, pc}
    c826:	0000      	.short	0x0000
    c828:	2000027c 	.word	0x2000027c
    c82c:	0000c8b8 	.word	0x0000c8b8
    c830:	4802      	ldr	r0, [pc, #8]	; (c83c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>)
    c832:	2100      	movs	r1, #0
    c834:	71c1      	strb	r1, [r0, #7]
    c836:	7201      	strb	r1, [r0, #8]
    c838:	7241      	strb	r1, [r0, #9]
    c83a:	4770      	bx	lr
    c83c:	20001298 	.word	0x20001298
    c840:	4a05      	ldr	r2, [pc, #20]	; (c858 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47c>)
    c842:	79d2      	ldrb	r2, [r2, #7]
    c844:	2a01      	cmp	r2, #1
    c846:	d006      	beq.n	c856 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47a>
    c848:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c84c:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    c850:	fbb1 f1f2 	udiv	r1, r1, r2
    c854:	1a40      	subs	r0, r0, r1
    c856:	4770      	bx	lr
    c858:	20001298 	.word	0x20001298
    c85c:	b570      	push	{r4, r5, r6, lr}
    c85e:	4c13      	ldr	r4, [pc, #76]	; (c8ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4d0>)
    c860:	4603      	mov	r3, r0
    c862:	460d      	mov	r5, r1
    c864:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    c868:	2000      	movs	r0, #0
    c86a:	b15a      	cbz	r2, c884 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a8>
    c86c:	4621      	mov	r1, r4
    c86e:	f891 1020 	ldrb.w	r1, [r1, #32]
    c872:	b163      	cbz	r3, c88e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4b2>
    c874:	2b01      	cmp	r3, #1
    c876:	d111      	bne.n	c89c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c0>
    c878:	2a01      	cmp	r2, #1
    c87a:	4628      	mov	r0, r5
    c87c:	d012      	beq.n	c8a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c8>
    c87e:	f004 fac5 	bl	10e0c <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    c882:	e009      	b.n	c898 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>
    c884:	f640 0134 	movw	r1, #2100	; 0x834
    c888:	203e      	movs	r0, #62	; 0x3e
    c88a:	f7f8 fbcf 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c88e:	2a01      	cmp	r2, #1
    c890:	4628      	mov	r0, r5
    c892:	d004      	beq.n	c89e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c2>
    c894:	f004 fac8 	bl	10e28 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    c898:	69e1      	ldr	r1, [r4, #28]
    c89a:	4408      	add	r0, r1
    c89c:	bd70      	pop	{r4, r5, r6, pc}
    c89e:	f000 f881 	bl	c9a4 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    c8a2:	e7f9      	b.n	c898 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>
    c8a4:	f000 f870 	bl	c988 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    c8a8:	e7f6      	b.n	c898 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>
    c8aa:	0000      	.short	0x0000
    c8ac:	20001298 	.word	0x20001298
    c8b0:	a62c0000 	.word	0xa62c0000
    c8b4:	0000a1e0 	.word	0x0000a1e0
    c8b8:	00000001 	.word	0x00000001
    c8bc:	40001110 	.word	0x40001110
	...
    c8d4:	00001e14 	.word	0x00001e14
    c8d8:	00001130 	.word	0x00001130
    c8dc:	00000000 	.word	0x00000000
    c8e0:	00000028 	.word	0x00000028
    c8e4:	00000018 	.word	0x00000018
    c8e8:	00000000 	.word	0x00000000
    c8ec:	00001e14 	.word	0x00001e14
    c8f0:	00001130 	.word	0x00001130
    c8f4:	00000000 	.word	0x00000000
    c8f8:	00001770 	.word	0x00001770
    c8fc:	00000fa0 	.word	0x00000fa0

0000c900 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    c900:	b570      	push	{r4, r5, r6, lr}
    c902:	4605      	mov	r5, r0
    c904:	4614      	mov	r4, r2
    c906:	4608      	mov	r0, r1
    c908:	f7ff fb92 	bl	c030 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    c90c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    c910:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    c914:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    c918:	4807      	ldr	r0, [pc, #28]	; (c938 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    c91a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    c91e:	4408      	add	r0, r1
    c920:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c924:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    c928:	fbb0 f5f1 	udiv	r5, r0, r1
    c92c:	4620      	mov	r0, r4
    c92e:	f7ff fb53 	bl	bfd8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    c932:	4428      	add	r0, r5
    c934:	1d40      	adds	r0, r0, #5
    c936:	bd70      	pop	{r4, r5, r6, pc}
    c938:	0000c9c8 	.word	0x0000c9c8

0000c93c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    c93c:	b570      	push	{r4, r5, r6, lr}
    c93e:	4d0e      	ldr	r5, [pc, #56]	; (c978 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    c940:	461c      	mov	r4, r3
    c942:	3d08      	subs	r5, #8
    c944:	4b0c      	ldr	r3, [pc, #48]	; (c978 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    c946:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    c94a:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    c94e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c952:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    c956:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c95a:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    c95e:	4418      	add	r0, r3
    c960:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c964:	fbb0 f5f1 	udiv	r5, r0, r1
    c968:	4610      	mov	r0, r2
    c96a:	f7ff fb35 	bl	bfd8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    c96e:	4428      	add	r0, r5
    c970:	4420      	add	r0, r4
    c972:	1d40      	adds	r0, r0, #5
    c974:	bd70      	pop	{r4, r5, r6, pc}
    c976:	0000      	.short	0x0000
    c978:	0000c9c8 	.word	0x0000c9c8

0000c97c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    c97c:	4901      	ldr	r1, [pc, #4]	; (c984 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    c97e:	b2c0      	uxtb	r0, r0
    c980:	6008      	str	r0, [r1, #0]
    c982:	4770      	bx	lr
    c984:	4000150c 	.word	0x4000150c

0000c988 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    c988:	4a05      	ldr	r2, [pc, #20]	; (c9a0 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    c98a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    c98e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c992:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    c996:	fbb1 f1f2 	udiv	r1, r1, r2
    c99a:	4408      	add	r0, r1
    c99c:	1e80      	subs	r0, r0, #2
    c99e:	4770      	bx	lr
    c9a0:	0000c9c0 	.word	0x0000c9c0

0000c9a4 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    c9a4:	4a05      	ldr	r2, [pc, #20]	; (c9bc <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    c9a6:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    c9aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c9ae:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    c9b2:	fbb1 f1f2 	udiv	r1, r1, r2
    c9b6:	4408      	add	r0, r1
    c9b8:	4770      	bx	lr
    c9ba:	0000      	.short	0x0000
    c9bc:	0000c9c0 	.word	0x0000c9c0
    c9c0:	05dc0000 	.word	0x05dc0000
    c9c4:	000003e8 	.word	0x000003e8
    c9c8:	00000000 	.word	0x00000000
    c9cc:	00001e14 	.word	0x00001e14
    c9d0:	00001130 	.word	0x00001130

0000c9d4 <__udivmoddi4>:
    c9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c9d8:	4607      	mov	r7, r0
    c9da:	468c      	mov	ip, r1
    c9dc:	4608      	mov	r0, r1
    c9de:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c9e0:	4615      	mov	r5, r2
    c9e2:	463c      	mov	r4, r7
    c9e4:	4619      	mov	r1, r3
    c9e6:	2b00      	cmp	r3, #0
    c9e8:	f040 80c6 	bne.w	cb78 <__udivmoddi4+0x1a4>
    c9ec:	4282      	cmp	r2, r0
    c9ee:	fab2 f782 	clz	r7, r2
    c9f2:	d946      	bls.n	ca82 <__udivmoddi4+0xae>
    c9f4:	b14f      	cbz	r7, ca0a <__udivmoddi4+0x36>
    c9f6:	f1c7 0e20 	rsb	lr, r7, #32
    c9fa:	fa24 fe0e 	lsr.w	lr, r4, lr
    c9fe:	fa00 f307 	lsl.w	r3, r0, r7
    ca02:	40bd      	lsls	r5, r7
    ca04:	ea4e 0c03 	orr.w	ip, lr, r3
    ca08:	40bc      	lsls	r4, r7
    ca0a:	ea4f 4815 	mov.w	r8, r5, lsr #16
    ca0e:	fa1f fe85 	uxth.w	lr, r5
    ca12:	fbbc f9f8 	udiv	r9, ip, r8
    ca16:	0c22      	lsrs	r2, r4, #16
    ca18:	fb08 c319 	mls	r3, r8, r9, ip
    ca1c:	fb09 fa0e 	mul.w	sl, r9, lr
    ca20:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    ca24:	459a      	cmp	sl, r3
    ca26:	d928      	bls.n	ca7a <__udivmoddi4+0xa6>
    ca28:	18eb      	adds	r3, r5, r3
    ca2a:	f109 30ff 	add.w	r0, r9, #4294967295
    ca2e:	d204      	bcs.n	ca3a <__udivmoddi4+0x66>
    ca30:	459a      	cmp	sl, r3
    ca32:	d902      	bls.n	ca3a <__udivmoddi4+0x66>
    ca34:	f1a9 0002 	sub.w	r0, r9, #2
    ca38:	442b      	add	r3, r5
    ca3a:	eba3 030a 	sub.w	r3, r3, sl
    ca3e:	b2a4      	uxth	r4, r4
    ca40:	fbb3 f2f8 	udiv	r2, r3, r8
    ca44:	fb08 3312 	mls	r3, r8, r2, r3
    ca48:	fb02 fe0e 	mul.w	lr, r2, lr
    ca4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    ca50:	45a6      	cmp	lr, r4
    ca52:	d914      	bls.n	ca7e <__udivmoddi4+0xaa>
    ca54:	192c      	adds	r4, r5, r4
    ca56:	f102 33ff 	add.w	r3, r2, #4294967295
    ca5a:	d203      	bcs.n	ca64 <__udivmoddi4+0x90>
    ca5c:	45a6      	cmp	lr, r4
    ca5e:	d901      	bls.n	ca64 <__udivmoddi4+0x90>
    ca60:	1e93      	subs	r3, r2, #2
    ca62:	442c      	add	r4, r5
    ca64:	eba4 040e 	sub.w	r4, r4, lr
    ca68:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    ca6c:	b11e      	cbz	r6, ca76 <__udivmoddi4+0xa2>
    ca6e:	40fc      	lsrs	r4, r7
    ca70:	2300      	movs	r3, #0
    ca72:	6034      	str	r4, [r6, #0]
    ca74:	6073      	str	r3, [r6, #4]
    ca76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ca7a:	4648      	mov	r0, r9
    ca7c:	e7dd      	b.n	ca3a <__udivmoddi4+0x66>
    ca7e:	4613      	mov	r3, r2
    ca80:	e7f0      	b.n	ca64 <__udivmoddi4+0x90>
    ca82:	b902      	cbnz	r2, ca86 <__udivmoddi4+0xb2>
    ca84:	deff      	udf	#255	; 0xff
    ca86:	bb87      	cbnz	r7, caea <__udivmoddi4+0x116>
    ca88:	1a83      	subs	r3, r0, r2
    ca8a:	2101      	movs	r1, #1
    ca8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    ca90:	b2aa      	uxth	r2, r5
    ca92:	fbb3 fcfe 	udiv	ip, r3, lr
    ca96:	0c20      	lsrs	r0, r4, #16
    ca98:	fb0e 331c 	mls	r3, lr, ip, r3
    ca9c:	fb0c f802 	mul.w	r8, ip, r2
    caa0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    caa4:	4598      	cmp	r8, r3
    caa6:	d963      	bls.n	cb70 <__udivmoddi4+0x19c>
    caa8:	18eb      	adds	r3, r5, r3
    caaa:	f10c 30ff 	add.w	r0, ip, #4294967295
    caae:	d204      	bcs.n	caba <__udivmoddi4+0xe6>
    cab0:	4598      	cmp	r8, r3
    cab2:	d902      	bls.n	caba <__udivmoddi4+0xe6>
    cab4:	f1ac 0002 	sub.w	r0, ip, #2
    cab8:	442b      	add	r3, r5
    caba:	eba3 0308 	sub.w	r3, r3, r8
    cabe:	b2a4      	uxth	r4, r4
    cac0:	fbb3 fcfe 	udiv	ip, r3, lr
    cac4:	fb0e 331c 	mls	r3, lr, ip, r3
    cac8:	fb0c f202 	mul.w	r2, ip, r2
    cacc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    cad0:	42a2      	cmp	r2, r4
    cad2:	d94f      	bls.n	cb74 <__udivmoddi4+0x1a0>
    cad4:	192c      	adds	r4, r5, r4
    cad6:	f10c 33ff 	add.w	r3, ip, #4294967295
    cada:	d204      	bcs.n	cae6 <__udivmoddi4+0x112>
    cadc:	42a2      	cmp	r2, r4
    cade:	d902      	bls.n	cae6 <__udivmoddi4+0x112>
    cae0:	f1ac 0302 	sub.w	r3, ip, #2
    cae4:	442c      	add	r4, r5
    cae6:	1aa4      	subs	r4, r4, r2
    cae8:	e7be      	b.n	ca68 <__udivmoddi4+0x94>
    caea:	f1c7 0c20 	rsb	ip, r7, #32
    caee:	fa20 f80c 	lsr.w	r8, r0, ip
    caf2:	fa00 f307 	lsl.w	r3, r0, r7
    caf6:	fa24 fc0c 	lsr.w	ip, r4, ip
    cafa:	40bd      	lsls	r5, r7
    cafc:	ea4c 0203 	orr.w	r2, ip, r3
    cb00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cb04:	b2ab      	uxth	r3, r5
    cb06:	fbb8 fcfe 	udiv	ip, r8, lr
    cb0a:	0c11      	lsrs	r1, r2, #16
    cb0c:	fb0e 801c 	mls	r0, lr, ip, r8
    cb10:	fb0c f903 	mul.w	r9, ip, r3
    cb14:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    cb18:	4581      	cmp	r9, r0
    cb1a:	fa04 f407 	lsl.w	r4, r4, r7
    cb1e:	d923      	bls.n	cb68 <__udivmoddi4+0x194>
    cb20:	1828      	adds	r0, r5, r0
    cb22:	f10c 31ff 	add.w	r1, ip, #4294967295
    cb26:	d204      	bcs.n	cb32 <__udivmoddi4+0x15e>
    cb28:	4581      	cmp	r9, r0
    cb2a:	d902      	bls.n	cb32 <__udivmoddi4+0x15e>
    cb2c:	f1ac 0102 	sub.w	r1, ip, #2
    cb30:	4428      	add	r0, r5
    cb32:	eba0 0009 	sub.w	r0, r0, r9
    cb36:	b292      	uxth	r2, r2
    cb38:	fbb0 fcfe 	udiv	ip, r0, lr
    cb3c:	fb0e 001c 	mls	r0, lr, ip, r0
    cb40:	fb0c f803 	mul.w	r8, ip, r3
    cb44:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    cb48:	4598      	cmp	r8, r3
    cb4a:	d90f      	bls.n	cb6c <__udivmoddi4+0x198>
    cb4c:	18eb      	adds	r3, r5, r3
    cb4e:	f10c 32ff 	add.w	r2, ip, #4294967295
    cb52:	d204      	bcs.n	cb5e <__udivmoddi4+0x18a>
    cb54:	4598      	cmp	r8, r3
    cb56:	d902      	bls.n	cb5e <__udivmoddi4+0x18a>
    cb58:	f1ac 0202 	sub.w	r2, ip, #2
    cb5c:	442b      	add	r3, r5
    cb5e:	eba3 0308 	sub.w	r3, r3, r8
    cb62:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    cb66:	e791      	b.n	ca8c <__udivmoddi4+0xb8>
    cb68:	4661      	mov	r1, ip
    cb6a:	e7e2      	b.n	cb32 <__udivmoddi4+0x15e>
    cb6c:	4662      	mov	r2, ip
    cb6e:	e7f6      	b.n	cb5e <__udivmoddi4+0x18a>
    cb70:	4660      	mov	r0, ip
    cb72:	e7a2      	b.n	caba <__udivmoddi4+0xe6>
    cb74:	4663      	mov	r3, ip
    cb76:	e7b6      	b.n	cae6 <__udivmoddi4+0x112>
    cb78:	4283      	cmp	r3, r0
    cb7a:	d905      	bls.n	cb88 <__udivmoddi4+0x1b4>
    cb7c:	b10e      	cbz	r6, cb82 <__udivmoddi4+0x1ae>
    cb7e:	e9c6 7000 	strd	r7, r0, [r6]
    cb82:	2100      	movs	r1, #0
    cb84:	4608      	mov	r0, r1
    cb86:	e776      	b.n	ca76 <__udivmoddi4+0xa2>
    cb88:	fab3 f183 	clz	r1, r3
    cb8c:	b981      	cbnz	r1, cbb0 <__udivmoddi4+0x1dc>
    cb8e:	4283      	cmp	r3, r0
    cb90:	d301      	bcc.n	cb96 <__udivmoddi4+0x1c2>
    cb92:	42ba      	cmp	r2, r7
    cb94:	d80a      	bhi.n	cbac <__udivmoddi4+0x1d8>
    cb96:	1abc      	subs	r4, r7, r2
    cb98:	eb60 0303 	sbc.w	r3, r0, r3
    cb9c:	2001      	movs	r0, #1
    cb9e:	469c      	mov	ip, r3
    cba0:	2e00      	cmp	r6, #0
    cba2:	d068      	beq.n	cc76 <__udivmoddi4+0x2a2>
    cba4:	e9c6 4c00 	strd	r4, ip, [r6]
    cba8:	2100      	movs	r1, #0
    cbaa:	e764      	b.n	ca76 <__udivmoddi4+0xa2>
    cbac:	4608      	mov	r0, r1
    cbae:	e7f7      	b.n	cba0 <__udivmoddi4+0x1cc>
    cbb0:	f1c1 0c20 	rsb	ip, r1, #32
    cbb4:	408b      	lsls	r3, r1
    cbb6:	fa22 f40c 	lsr.w	r4, r2, ip
    cbba:	431c      	orrs	r4, r3
    cbbc:	fa02 f501 	lsl.w	r5, r2, r1
    cbc0:	fa00 f301 	lsl.w	r3, r0, r1
    cbc4:	fa27 f20c 	lsr.w	r2, r7, ip
    cbc8:	fa20 fb0c 	lsr.w	fp, r0, ip
    cbcc:	ea4f 4914 	mov.w	r9, r4, lsr #16
    cbd0:	4313      	orrs	r3, r2
    cbd2:	fbbb f8f9 	udiv	r8, fp, r9
    cbd6:	fa1f fe84 	uxth.w	lr, r4
    cbda:	fb09 bb18 	mls	fp, r9, r8, fp
    cbde:	0c1a      	lsrs	r2, r3, #16
    cbe0:	fb08 fa0e 	mul.w	sl, r8, lr
    cbe4:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    cbe8:	4592      	cmp	sl, r2
    cbea:	fa07 f701 	lsl.w	r7, r7, r1
    cbee:	d93e      	bls.n	cc6e <__udivmoddi4+0x29a>
    cbf0:	18a2      	adds	r2, r4, r2
    cbf2:	f108 30ff 	add.w	r0, r8, #4294967295
    cbf6:	d204      	bcs.n	cc02 <__udivmoddi4+0x22e>
    cbf8:	4592      	cmp	sl, r2
    cbfa:	d902      	bls.n	cc02 <__udivmoddi4+0x22e>
    cbfc:	f1a8 0002 	sub.w	r0, r8, #2
    cc00:	4422      	add	r2, r4
    cc02:	eba2 020a 	sub.w	r2, r2, sl
    cc06:	b29b      	uxth	r3, r3
    cc08:	fbb2 f8f9 	udiv	r8, r2, r9
    cc0c:	fb09 2218 	mls	r2, r9, r8, r2
    cc10:	fb08 fe0e 	mul.w	lr, r8, lr
    cc14:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    cc18:	4596      	cmp	lr, r2
    cc1a:	d92a      	bls.n	cc72 <__udivmoddi4+0x29e>
    cc1c:	18a2      	adds	r2, r4, r2
    cc1e:	f108 33ff 	add.w	r3, r8, #4294967295
    cc22:	d204      	bcs.n	cc2e <__udivmoddi4+0x25a>
    cc24:	4596      	cmp	lr, r2
    cc26:	d902      	bls.n	cc2e <__udivmoddi4+0x25a>
    cc28:	f1a8 0302 	sub.w	r3, r8, #2
    cc2c:	4422      	add	r2, r4
    cc2e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    cc32:	fba0 9305 	umull	r9, r3, r0, r5
    cc36:	eba2 020e 	sub.w	r2, r2, lr
    cc3a:	429a      	cmp	r2, r3
    cc3c:	46ce      	mov	lr, r9
    cc3e:	4698      	mov	r8, r3
    cc40:	d302      	bcc.n	cc48 <__udivmoddi4+0x274>
    cc42:	d106      	bne.n	cc52 <__udivmoddi4+0x27e>
    cc44:	454f      	cmp	r7, r9
    cc46:	d204      	bcs.n	cc52 <__udivmoddi4+0x27e>
    cc48:	ebb9 0e05 	subs.w	lr, r9, r5
    cc4c:	eb63 0804 	sbc.w	r8, r3, r4
    cc50:	3801      	subs	r0, #1
    cc52:	b186      	cbz	r6, cc76 <__udivmoddi4+0x2a2>
    cc54:	ebb7 030e 	subs.w	r3, r7, lr
    cc58:	eb62 0708 	sbc.w	r7, r2, r8
    cc5c:	fa07 fc0c 	lsl.w	ip, r7, ip
    cc60:	40cb      	lsrs	r3, r1
    cc62:	ea4c 0303 	orr.w	r3, ip, r3
    cc66:	40cf      	lsrs	r7, r1
    cc68:	e9c6 3700 	strd	r3, r7, [r6]
    cc6c:	e79c      	b.n	cba8 <__udivmoddi4+0x1d4>
    cc6e:	4640      	mov	r0, r8
    cc70:	e7c7      	b.n	cc02 <__udivmoddi4+0x22e>
    cc72:	4643      	mov	r3, r8
    cc74:	e7db      	b.n	cc2e <__udivmoddi4+0x25a>
    cc76:	4631      	mov	r1, r6
    cc78:	e6fd      	b.n	ca76 <__udivmoddi4+0xa2>

0000cc7a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    cc7a:	4770      	bx	lr
    cc7c:	2100      	movs	r1, #0
    cc7e:	7081      	strb	r1, [r0, #2]
    cc80:	7001      	strb	r1, [r0, #0]
    cc82:	7041      	strb	r1, [r0, #1]
    cc84:	4770      	bx	lr

0000cc86 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    cc86:	b570      	push	{r4, r5, r6, lr}
    cc88:	f7f4 fd8a 	bl	17a0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    cc8c:	4605      	mov	r5, r0
    cc8e:	2400      	movs	r4, #0
    cc90:	e006      	b.n	cca0 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    cc92:	4620      	mov	r0, r4
    cc94:	f7f4 fd8a 	bl	17ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    cc98:	f7ff fff0 	bl	cc7c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    cc9c:	1c64      	adds	r4, r4, #1
    cc9e:	b2e4      	uxtb	r4, r4
    cca0:	42ac      	cmp	r4, r5
    cca2:	d3f6      	bcc.n	cc92 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    cca4:	bd70      	pop	{r4, r5, r6, pc}

0000cca6 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    cca6:	2000      	movs	r0, #0
    cca8:	f7f7 bb5c 	b.w	4364 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000ccac <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    ccac:	b510      	push	{r4, lr}
    ccae:	f7f7 f829 	bl	3d04 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    ccb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ccb6:	f000 b800 	b.w	ccba <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000ccba <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    ccba:	0a41      	lsrs	r1, r0, #9
    ccbc:	f643 5209 	movw	r2, #15625	; 0x3d09
    ccc0:	4351      	muls	r1, r2
    ccc2:	f3c0 0008 	ubfx	r0, r0, #0, #9
    ccc6:	fb10 f002 	smulbb	r0, r0, r2
    ccca:	f500 7080 	add.w	r0, r0, #256	; 0x100
    ccce:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    ccd2:	4770      	bx	lr

0000ccd4 <MPSL_IRQ_RADIO_Handler>:
    ccd4:	f7f5 be08 	b.w	28e8 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    ccd8:	2800      	cmp	r0, #0
    ccda:	db09      	blt.n	ccf0 <MPSL_IRQ_RADIO_Handler+0x1c>
    ccdc:	f000 021f 	and.w	r2, r0, #31
    cce0:	2101      	movs	r1, #1
    cce2:	4091      	lsls	r1, r2
    cce4:	0940      	lsrs	r0, r0, #5
    cce6:	0080      	lsls	r0, r0, #2
    cce8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ccec:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ccf0:	4770      	bx	lr
    ccf2:	2800      	cmp	r0, #0
    ccf4:	db0d      	blt.n	cd12 <MPSL_IRQ_RADIO_Handler+0x3e>
    ccf6:	f000 021f 	and.w	r2, r0, #31
    ccfa:	2101      	movs	r1, #1
    ccfc:	4091      	lsls	r1, r2
    ccfe:	0940      	lsrs	r0, r0, #5
    cd00:	0080      	lsls	r0, r0, #2
    cd02:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cd06:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    cd0a:	f3bf 8f4f 	dsb	sy
    cd0e:	f3bf 8f6f 	isb	sy
    cd12:	4770      	bx	lr

0000cd14 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    cd14:	b570      	push	{r4, r5, r6, lr}
    cd16:	4602      	mov	r2, r0
    cd18:	2000      	movs	r0, #0
    cd1a:	2900      	cmp	r1, #0
    cd1c:	d01d      	beq.n	cd5a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    cd1e:	fba2 0101 	umull	r0, r1, r2, r1
    cd22:	0a40      	lsrs	r0, r0, #9
    cd24:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    cd28:	0a49      	lsrs	r1, r1, #9
    cd2a:	1c40      	adds	r0, r0, #1
    cd2c:	f141 0100 	adc.w	r1, r1, #0
    cd30:	f240 72a1 	movw	r2, #1953	; 0x7a1
    cd34:	1883      	adds	r3, r0, r2
    cd36:	f141 0100 	adc.w	r1, r1, #0
    cd3a:	1c5b      	adds	r3, r3, #1
    cd3c:	f141 0400 	adc.w	r4, r1, #0
    cd40:	2100      	movs	r1, #0
    cd42:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    cd46:	41a1      	sbcs	r1, r4
    cd48:	d203      	bcs.n	cd52 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    cd4a:	2171      	movs	r1, #113	; 0x71
    cd4c:	206d      	movs	r0, #109	; 0x6d
    cd4e:	f7f7 feb9 	bl	4ac4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    cd52:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    cd56:	fbb0 f0f2 	udiv	r0, r0, r2
    cd5a:	bd70      	pop	{r4, r5, r6, pc}
    cd5c:	5840      	ldr	r0, [r0, r1]
    cd5e:	2800      	cmp	r0, #0
    cd60:	d000      	beq.n	cd64 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    cd62:	2001      	movs	r0, #1
    cd64:	4770      	bx	lr
    cd66:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    cd6a:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    cd6e:	f002 0201 	and.w	r2, r2, #1
    cd72:	03c0      	lsls	r0, r0, #15
    cd74:	d503      	bpl.n	cd7e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    cd76:	428a      	cmp	r2, r1
    cd78:	d101      	bne.n	cd7e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    cd7a:	2001      	movs	r0, #1
    cd7c:	4770      	bx	lr
    cd7e:	2000      	movs	r0, #0
    cd80:	4770      	bx	lr

0000cd82 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    cd82:	b510      	push	{r4, lr}
    cd84:	2101      	movs	r1, #1
    cd86:	0788      	lsls	r0, r1, #30
    cd88:	f7f7 fe46 	bl	4a18 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    cd8c:	2800      	cmp	r0, #0
    cd8e:	d000      	beq.n	cd92 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    cd90:	2001      	movs	r0, #1
    cd92:	bd10      	pop	{r4, pc}

0000cd94 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    cd94:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    cd98:	2101      	movs	r1, #1
    cd9a:	6001      	str	r1, [r0, #0]
    cd9c:	4770      	bx	lr

0000cd9e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    cd9e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    cda2:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    cda6:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    cdaa:	f002 0203 	and.w	r2, r2, #3
    cdae:	03c9      	lsls	r1, r1, #15
    cdb0:	d503      	bpl.n	cdba <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    cdb2:	4282      	cmp	r2, r0
    cdb4:	d101      	bne.n	cdba <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    cdb6:	2001      	movs	r0, #1
    cdb8:	4770      	bx	lr
    cdba:	2000      	movs	r0, #0
    cdbc:	4770      	bx	lr

0000cdbe <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    cdbe:	b510      	push	{r4, lr}
    cdc0:	2100      	movs	r1, #0
    cdc2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    cdc6:	f7f7 fe27 	bl	4a18 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    cdca:	2800      	cmp	r0, #0
    cdcc:	d000      	beq.n	cdd0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    cdce:	2001      	movs	r0, #1
    cdd0:	bd10      	pop	{r4, pc}
    cdd2:	2800      	cmp	r0, #0
    cdd4:	db09      	blt.n	cdea <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    cdd6:	f000 021f 	and.w	r2, r0, #31
    cdda:	2101      	movs	r1, #1
    cddc:	4091      	lsls	r1, r2
    cdde:	0940      	lsrs	r0, r0, #5
    cde0:	0080      	lsls	r0, r0, #2
    cde2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cde6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    cdea:	4770      	bx	lr
    cdec:	2800      	cmp	r0, #0
    cdee:	db0d      	blt.n	ce0c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    cdf0:	f000 021f 	and.w	r2, r0, #31
    cdf4:	2101      	movs	r1, #1
    cdf6:	4091      	lsls	r1, r2
    cdf8:	0940      	lsrs	r0, r0, #5
    cdfa:	0080      	lsls	r0, r0, #2
    cdfc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ce00:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    ce04:	f3bf 8f4f 	dsb	sy
    ce08:	f3bf 8f6f 	isb	sy
    ce0c:	4770      	bx	lr
    ce0e:	1000      	.short	0x1000
    ce10:	00fa0002 	.word	0x00fa0002
    ce14:	63d00000 	.word	0x63d00000
    ce18:	364ec2a6 	.word	0x364ec2a6
    ce1c:	cd2bf983 	.word	0xcd2bf983
    ce20:	3cbc91b0 	.word	0x3cbc91b0
    ce24:	b3088b82 	.word	0xb3088b82
    ce28:	9c3d      	.short	0x9c3d
    ce2a:	2800      	cmp	r0, #0
    ce2c:	db09      	blt.n	ce42 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    ce2e:	f000 021f 	and.w	r2, r0, #31
    ce32:	2101      	movs	r1, #1
    ce34:	4091      	lsls	r1, r2
    ce36:	0940      	lsrs	r0, r0, #5
    ce38:	0080      	lsls	r0, r0, #2
    ce3a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ce3e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ce42:	4770      	bx	lr

0000ce44 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    ce44:	f3ef 8110 	mrs	r1, PRIMASK
    ce48:	b672      	cpsid	i
    ce4a:	7802      	ldrb	r2, [r0, #0]
    ce4c:	2a01      	cmp	r2, #1
    ce4e:	d001      	beq.n	ce54 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    ce50:	2201      	movs	r2, #1
    ce52:	e000      	b.n	ce56 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    ce54:	2200      	movs	r2, #0
    ce56:	2301      	movs	r3, #1
    ce58:	7003      	strb	r3, [r0, #0]
    ce5a:	b901      	cbnz	r1, ce5e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    ce5c:	b662      	cpsie	i
    ce5e:	b10a      	cbz	r2, ce64 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    ce60:	2000      	movs	r0, #0
    ce62:	4770      	bx	lr
    ce64:	f06f 0022 	mvn.w	r0, #34	; 0x22
    ce68:	4770      	bx	lr

0000ce6a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    ce6a:	2100      	movs	r1, #0
    ce6c:	7001      	strb	r1, [r0, #0]
    ce6e:	4608      	mov	r0, r1
    ce70:	4770      	bx	lr

0000ce72 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    ce72:	f3ef 8110 	mrs	r1, PRIMASK
    ce76:	b672      	cpsid	i
    ce78:	2200      	movs	r2, #0
    ce7a:	7002      	strb	r2, [r0, #0]
    ce7c:	b901      	cbnz	r1, ce80 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    ce7e:	b662      	cpsie	i
    ce80:	2000      	movs	r0, #0
    ce82:	4770      	bx	lr

0000ce84 <mpsl_low_priority_process>:
    ce84:	f7f7 bf0a 	b.w	4c9c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000ce88 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    ce88:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ce8c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ce90:	280f      	cmp	r0, #15
    ce92:	d001      	beq.n	ce98 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    ce94:	2000      	movs	r0, #0
    ce96:	4770      	bx	lr
    ce98:	2001      	movs	r0, #1
    ce9a:	4770      	bx	lr

0000ce9c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    ce9c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cea0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cea4:	280a      	cmp	r0, #10
    cea6:	d001      	beq.n	ceac <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    cea8:	2000      	movs	r0, #0
    ceaa:	4770      	bx	lr
    ceac:	2001      	movs	r0, #1
    ceae:	4770      	bx	lr

0000ceb0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    ceb0:	b500      	push	{lr}
    ceb2:	f7ff fff3 	bl	ce9c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    ceb6:	b120      	cbz	r0, cec2 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    ceb8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cebc:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    cec0:	b108      	cbz	r0, cec6 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    cec2:	2000      	movs	r0, #0
    cec4:	bd00      	pop	{pc}
    cec6:	2001      	movs	r0, #1
    cec8:	bd00      	pop	{pc}

0000ceca <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    ceca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cece:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ced2:	280e      	cmp	r0, #14
    ced4:	d001      	beq.n	ceda <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    ced6:	2000      	movs	r0, #0
    ced8:	4770      	bx	lr
    ceda:	2001      	movs	r0, #1
    cedc:	4770      	bx	lr

0000cede <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    cede:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cee2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cee6:	2810      	cmp	r0, #16
    cee8:	d001      	beq.n	ceee <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    ceea:	2000      	movs	r0, #0
    ceec:	4770      	bx	lr
    ceee:	2001      	movs	r0, #1
    cef0:	4770      	bx	lr

0000cef2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    cef2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cef6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cefa:	2806      	cmp	r0, #6
    cefc:	d003      	beq.n	cf06 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    cefe:	1c40      	adds	r0, r0, #1
    cf00:	d001      	beq.n	cf06 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    cf02:	2000      	movs	r0, #0
    cf04:	4770      	bx	lr
    cf06:	2001      	movs	r0, #1
    cf08:	4770      	bx	lr

0000cf0a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    cf0a:	b500      	push	{lr}
    cf0c:	f7ff fff1 	bl	cef2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    cf10:	b148      	cbz	r0, cf26 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    cf12:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cf16:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    cf1a:	2806      	cmp	r0, #6
    cf1c:	d303      	bcc.n	cf26 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    cf1e:	1c40      	adds	r0, r0, #1
    cf20:	d001      	beq.n	cf26 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    cf22:	2001      	movs	r0, #1
    cf24:	bd00      	pop	{pc}
    cf26:	2000      	movs	r0, #0
    cf28:	bd00      	pop	{pc}

0000cf2a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    cf2a:	b500      	push	{lr}
    cf2c:	f7ff ffe1 	bl	cef2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    cf30:	b138      	cbz	r0, cf42 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    cf32:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cf36:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    cf3a:	2806      	cmp	r0, #6
    cf3c:	d303      	bcc.n	cf46 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    cf3e:	1c40      	adds	r0, r0, #1
    cf40:	d001      	beq.n	cf46 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    cf42:	2000      	movs	r0, #0
    cf44:	bd00      	pop	{pc}
    cf46:	2001      	movs	r0, #1
    cf48:	bd00      	pop	{pc}

0000cf4a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    cf4a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cf4e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cf52:	280d      	cmp	r0, #13
    cf54:	d001      	beq.n	cf5a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    cf56:	2000      	movs	r0, #0
    cf58:	4770      	bx	lr
    cf5a:	2001      	movs	r0, #1
    cf5c:	4770      	bx	lr

0000cf5e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    cf5e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cf62:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cf66:	2808      	cmp	r0, #8
    cf68:	d001      	beq.n	cf6e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    cf6a:	2000      	movs	r0, #0
    cf6c:	4770      	bx	lr
    cf6e:	2001      	movs	r0, #1
    cf70:	4770      	bx	lr

0000cf72 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    cf72:	2a00      	cmp	r2, #0
    cf74:	bf04      	itt	eq
    cf76:	2000      	moveq	r0, #0
    cf78:	4770      	bxeq	lr
    cf7a:	1e52      	subs	r2, r2, #1
    cf7c:	d007      	beq.n	cf8e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    cf7e:	7803      	ldrb	r3, [r0, #0]
    cf80:	f891 c000 	ldrb.w	ip, [r1]
    cf84:	4563      	cmp	r3, ip
    cf86:	bf04      	itt	eq
    cf88:	1c40      	addeq	r0, r0, #1
    cf8a:	1c49      	addeq	r1, r1, #1
    cf8c:	d0f5      	beq.n	cf7a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    cf8e:	7800      	ldrb	r0, [r0, #0]
    cf90:	7809      	ldrb	r1, [r1, #0]
    cf92:	1a40      	subs	r0, r0, r1
    cf94:	4770      	bx	lr

0000cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    cf96:	b4f0      	push	{r4, r5, r6, r7}
    cf98:	ea80 0c01 	eor.w	ip, r0, r1
    cf9c:	4603      	mov	r3, r0
    cf9e:	f01c 0f03 	tst.w	ip, #3
    cfa2:	d13c      	bne.n	d01e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    cfa4:	f013 0f03 	tst.w	r3, #3
    cfa8:	d00b      	beq.n	cfc2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    cfaa:	2a00      	cmp	r2, #0
    cfac:	bf04      	itt	eq
    cfae:	bcf0      	popeq	{r4, r5, r6, r7}
    cfb0:	4770      	bxeq	lr
    cfb2:	f811 cb01 	ldrb.w	ip, [r1], #1
    cfb6:	f803 cb01 	strb.w	ip, [r3], #1
    cfba:	1e52      	subs	r2, r2, #1
    cfbc:	f013 0f03 	tst.w	r3, #3
    cfc0:	d1f3      	bne.n	cfaa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    cfc2:	2a03      	cmp	r2, #3
    cfc4:	d94f      	bls.n	d066 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    cfc6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    cfca:	d24c      	bcs.n	d066 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    cfcc:	f1c2 0c00 	rsb	ip, r2, #0
    cfd0:	ea4f 74ec 	mov.w	r4, ip, asr #31
    cfd4:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    cfd8:	ea4f 0cac 	mov.w	ip, ip, asr #2
    cfdc:	f1cc 0c00 	rsb	ip, ip, #0
    cfe0:	f1bc 0f00 	cmp.w	ip, #0
    cfe4:	dd1b      	ble.n	d01e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    cfe6:	1f0d      	subs	r5, r1, #4
    cfe8:	1f1c      	subs	r4, r3, #4
    cfea:	f01c 0f01 	tst.w	ip, #1
    cfee:	d003      	beq.n	cff8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    cff0:	f855 6f04 	ldr.w	r6, [r5, #4]!
    cff4:	f844 6f04 	str.w	r6, [r4, #4]!
    cff8:	ea5f 066c 	movs.w	r6, ip, asr #1
    cffc:	d007      	beq.n	d00e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    cffe:	686f      	ldr	r7, [r5, #4]
    d000:	6067      	str	r7, [r4, #4]
    d002:	f855 7f08 	ldr.w	r7, [r5, #8]!
    d006:	f844 7f08 	str.w	r7, [r4, #8]!
    d00a:	1e76      	subs	r6, r6, #1
    d00c:	d1f7      	bne.n	cffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    d00e:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    d012:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    d016:	f1cc 0c00 	rsb	ip, ip, #0
    d01a:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    d01e:	2a00      	cmp	r2, #0
    d020:	bf04      	itt	eq
    d022:	bcf0      	popeq	{r4, r5, r6, r7}
    d024:	4770      	bxeq	lr
    d026:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d02a:	d226      	bcs.n	d07a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d02c:	2a00      	cmp	r2, #0
    d02e:	bfdc      	itt	le
    d030:	bcf0      	pople	{r4, r5, r6, r7}
    d032:	4770      	bxle	lr
    d034:	1e49      	subs	r1, r1, #1
    d036:	1e5b      	subs	r3, r3, #1
    d038:	f012 0f01 	tst.w	r2, #1
    d03c:	d003      	beq.n	d046 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    d03e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    d042:	f803 cf01 	strb.w	ip, [r3, #1]!
    d046:	1052      	asrs	r2, r2, #1
    d048:	bf04      	itt	eq
    d04a:	bcf0      	popeq	{r4, r5, r6, r7}
    d04c:	4770      	bxeq	lr
    d04e:	f891 c001 	ldrb.w	ip, [r1, #1]
    d052:	f883 c001 	strb.w	ip, [r3, #1]
    d056:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    d05a:	f803 cf02 	strb.w	ip, [r3, #2]!
    d05e:	1e52      	subs	r2, r2, #1
    d060:	d1f5      	bne.n	d04e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    d062:	bcf0      	pop	{r4, r5, r6, r7}
    d064:	4770      	bx	lr
    d066:	2a04      	cmp	r2, #4
    d068:	d3d9      	bcc.n	d01e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d06a:	f851 cb04 	ldr.w	ip, [r1], #4
    d06e:	1f12      	subs	r2, r2, #4
    d070:	f843 cb04 	str.w	ip, [r3], #4
    d074:	2a04      	cmp	r2, #4
    d076:	d2f8      	bcs.n	d06a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    d078:	e7d1      	b.n	d01e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d07a:	f811 cb01 	ldrb.w	ip, [r1], #1
    d07e:	f803 cb01 	strb.w	ip, [r3], #1
    d082:	1e52      	subs	r2, r2, #1
    d084:	d1f9      	bne.n	d07a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d086:	bcf0      	pop	{r4, r5, r6, r7}
    d088:	4770      	bx	lr

0000d08a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    d08a:	b470      	push	{r4, r5, r6}
    d08c:	4603      	mov	r3, r0
    d08e:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    d092:	f010 0f03 	tst.w	r0, #3
    d096:	d009      	beq.n	d0ac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    d098:	2a00      	cmp	r2, #0
    d09a:	bf04      	itt	eq
    d09c:	bc70      	popeq	{r4, r5, r6}
    d09e:	4770      	bxeq	lr
    d0a0:	f803 cb01 	strb.w	ip, [r3], #1
    d0a4:	1e52      	subs	r2, r2, #1
    d0a6:	f013 0f03 	tst.w	r3, #3
    d0aa:	d1f5      	bne.n	d098 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    d0ac:	b2c9      	uxtb	r1, r1
    d0ae:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    d0b2:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    d0b6:	2a03      	cmp	r2, #3
    d0b8:	d939      	bls.n	d12e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d0ba:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d0be:	d236      	bcs.n	d12e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d0c0:	4251      	negs	r1, r2
    d0c2:	17cc      	asrs	r4, r1, #31
    d0c4:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    d0c8:	1089      	asrs	r1, r1, #2
    d0ca:	424e      	negs	r6, r1
    d0cc:	2e00      	cmp	r6, #0
    d0ce:	dd11      	ble.n	d0f4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d0d0:	1f19      	subs	r1, r3, #4
    d0d2:	f016 0f01 	tst.w	r6, #1
    d0d6:	bf18      	it	ne
    d0d8:	f841 5f04 	strne.w	r5, [r1, #4]!
    d0dc:	1074      	asrs	r4, r6, #1
    d0de:	d004      	beq.n	d0ea <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    d0e0:	604d      	str	r5, [r1, #4]
    d0e2:	f841 5f08 	str.w	r5, [r1, #8]!
    d0e6:	1e64      	subs	r4, r4, #1
    d0e8:	d1fa      	bne.n	d0e0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    d0ea:	4271      	negs	r1, r6
    d0ec:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    d0f0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    d0f4:	2a00      	cmp	r2, #0
    d0f6:	bf04      	itt	eq
    d0f8:	bc70      	popeq	{r4, r5, r6}
    d0fa:	4770      	bxeq	lr
    d0fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d100:	d21d      	bcs.n	d13e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d102:	2a00      	cmp	r2, #0
    d104:	bfdc      	itt	le
    d106:	bc70      	pople	{r4, r5, r6}
    d108:	4770      	bxle	lr
    d10a:	1e59      	subs	r1, r3, #1
    d10c:	f012 0f01 	tst.w	r2, #1
    d110:	bf18      	it	ne
    d112:	f801 cf01 	strbne.w	ip, [r1, #1]!
    d116:	1052      	asrs	r2, r2, #1
    d118:	bf04      	itt	eq
    d11a:	bc70      	popeq	{r4, r5, r6}
    d11c:	4770      	bxeq	lr
    d11e:	f881 c001 	strb.w	ip, [r1, #1]
    d122:	f801 cf02 	strb.w	ip, [r1, #2]!
    d126:	1e52      	subs	r2, r2, #1
    d128:	d1f9      	bne.n	d11e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    d12a:	bc70      	pop	{r4, r5, r6}
    d12c:	4770      	bx	lr
    d12e:	2a04      	cmp	r2, #4
    d130:	d3e0      	bcc.n	d0f4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d132:	1f12      	subs	r2, r2, #4
    d134:	f843 5b04 	str.w	r5, [r3], #4
    d138:	2a04      	cmp	r2, #4
    d13a:	d2fa      	bcs.n	d132 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    d13c:	e7da      	b.n	d0f4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d13e:	f803 cb01 	strb.w	ip, [r3], #1
    d142:	1e52      	subs	r2, r2, #1
    d144:	d1fb      	bne.n	d13e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d146:	bc70      	pop	{r4, r5, r6}
    d148:	4770      	bx	lr
    d14a:	f04f 30ff 	mov.w	r0, #4294967295
    d14e:	4770      	bx	lr
    d150:	2000      	movs	r0, #0
    d152:	4770      	bx	lr
    d154:	2000      	movs	r0, #0
    d156:	4770      	bx	lr
    d158:	f04f 30ff 	mov.w	r0, #4294967295
    d15c:	4770      	bx	lr
    d15e:	4770      	bx	lr
    d160:	4770      	bx	lr
    d162:	2000      	movs	r0, #0
    d164:	4770      	bx	lr
    d166:	f04f 30ff 	mov.w	r0, #4294967295
    d16a:	4770      	bx	lr
    d16c:	f04f 30ff 	mov.w	r0, #4294967295
    d170:	4770      	bx	lr
    d172:	2100      	movs	r1, #0
    d174:	7001      	strb	r1, [r0, #0]
    d176:	4770      	bx	lr
    d178:	f04f 30ff 	mov.w	r0, #4294967295
    d17c:	4770      	bx	lr
    d17e:	f04f 30ff 	mov.w	r0, #4294967295
    d182:	4770      	bx	lr
    d184:	2800      	cmp	r0, #0
    d186:	d001      	beq.n	d18c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x102>
    d188:	f06f 0015 	mvn.w	r0, #21
    d18c:	4770      	bx	lr
    d18e:	2000      	movs	r0, #0
    d190:	4770      	bx	lr
    d192:	2200      	movs	r2, #0
    d194:	f000 b80a 	b.w	d1ac <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000d198 <mpsl_fem_lna_is_configured>:
    d198:	b510      	push	{r4, lr}
    d19a:	2100      	movs	r1, #0
    d19c:	4608      	mov	r0, r1
    d19e:	f7f7 fe17 	bl	4dd0 <mpsl_fem_lna_configuration_set>
    d1a2:	b108      	cbz	r0, d1a8 <mpsl_fem_lna_is_configured+0x10>
    d1a4:	2000      	movs	r0, #0
    d1a6:	bd10      	pop	{r4, pc}
    d1a8:	2001      	movs	r0, #1
    d1aa:	bd10      	pop	{r4, pc}

0000d1ac <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    d1ac:	b530      	push	{r4, r5, lr}
    d1ae:	4603      	mov	r3, r0
    d1b0:	2000      	movs	r0, #0
    d1b2:	1a9b      	subs	r3, r3, r2
    d1b4:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    d1b8:	f06f 0415 	mvn.w	r4, #21
    d1bc:	42ab      	cmp	r3, r5
    d1be:	da02      	bge.n	d1c6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    d1c0:	4620      	mov	r0, r4
    d1c2:	462b      	mov	r3, r5
    d1c4:	e003      	b.n	d1ce <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x22>
    d1c6:	2b7f      	cmp	r3, #127	; 0x7f
    d1c8:	dd01      	ble.n	d1ce <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x22>
    d1ca:	4620      	mov	r0, r4
    d1cc:	237f      	movs	r3, #127	; 0x7f
    d1ce:	700b      	strb	r3, [r1, #0]
    d1d0:	704a      	strb	r2, [r1, #1]
    d1d2:	bd30      	pop	{r4, r5, pc}
    d1d4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    d1d8:	4605      	mov	r5, r0
    d1da:	f100 0003 	add.w	r0, r0, #3
    d1de:	f020 0003 	bic.w	r0, r0, #3
    d1e2:	460c      	mov	r4, r1
    d1e4:	9000      	str	r0, [sp, #0]
    d1e6:	7849      	ldrb	r1, [r1, #1]
    d1e8:	f88d 1004 	strb.w	r1, [sp, #4]
    d1ec:	78a1      	ldrb	r1, [r4, #2]
    d1ee:	0016      	movs	r6, r2
    d1f0:	f88d 1005 	strb.w	r1, [sp, #5]
    d1f4:	d000      	beq.n	d1f8 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x4c>
    d1f6:	2000      	movs	r0, #0
    d1f8:	a901      	add	r1, sp, #4
    d1fa:	f7f8 f90f 	bl	541c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    d1fe:	9900      	ldr	r1, [sp, #0]
    d200:	4408      	add	r0, r1
    d202:	9000      	str	r0, [sp, #0]
    d204:	78a1      	ldrb	r1, [r4, #2]
    d206:	b141      	cbz	r1, d21a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x6e>
    d208:	8a63      	ldrh	r3, [r4, #18]
    d20a:	78e2      	ldrb	r2, [r4, #3]
    d20c:	b106      	cbz	r6, d210 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x64>
    d20e:	2000      	movs	r0, #0
    d210:	f7f8 fb94 	bl	593c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    d214:	9900      	ldr	r1, [sp, #0]
    d216:	4408      	add	r0, r1
    d218:	9000      	str	r0, [sp, #0]
    d21a:	4632      	mov	r2, r6
    d21c:	4621      	mov	r1, r4
    d21e:	4668      	mov	r0, sp
    d220:	f000 f808 	bl	d234 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x88>
    d224:	9800      	ldr	r0, [sp, #0]
    d226:	1dc0      	adds	r0, r0, #7
    d228:	f020 0007 	bic.w	r0, r0, #7
    d22c:	9000      	str	r0, [sp, #0]
    d22e:	1b40      	subs	r0, r0, r5
    d230:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    d234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d238:	4606      	mov	r6, r0
    d23a:	460c      	mov	r4, r1
    d23c:	7808      	ldrb	r0, [r1, #0]
    d23e:	7849      	ldrb	r1, [r1, #1]
    d240:	2700      	movs	r7, #0
    d242:	4408      	add	r0, r1
    d244:	4691      	mov	r9, r2
    d246:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    d24a:	463d      	mov	r5, r7
    d24c:	e00e      	b.n	d26c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xc0>
    d24e:	7a23      	ldrb	r3, [r4, #8]
    d250:	2b02      	cmp	r3, #2
    d252:	d200      	bcs.n	d256 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xaa>
    d254:	2302      	movs	r3, #2
    d256:	79e2      	ldrb	r2, [r4, #7]
    d258:	2a03      	cmp	r2, #3
    d25a:	d200      	bcs.n	d25e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xb2>
    d25c:	2203      	movs	r2, #3
    d25e:	79a1      	ldrb	r1, [r4, #6]
    d260:	7960      	ldrb	r0, [r4, #5]
    d262:	f000 fee3 	bl	e02c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    d266:	1c6d      	adds	r5, r5, #1
    d268:	4407      	add	r7, r0
    d26a:	b2ed      	uxtb	r5, r5
    d26c:	4545      	cmp	r5, r8
    d26e:	d3ee      	bcc.n	d24e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xa2>
    d270:	6830      	ldr	r0, [r6, #0]
    d272:	1cc0      	adds	r0, r0, #3
    d274:	f020 0003 	bic.w	r0, r0, #3
    d278:	6030      	str	r0, [r6, #0]
    d27a:	f1b9 0f00 	cmp.w	r9, #0
    d27e:	d000      	beq.n	d282 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xd6>
    d280:	2000      	movs	r0, #0
    d282:	463a      	mov	r2, r7
    d284:	4641      	mov	r1, r8
    d286:	f7f8 faa3 	bl	57d0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    d28a:	6831      	ldr	r1, [r6, #0]
    d28c:	4408      	add	r0, r1
    d28e:	6030      	str	r0, [r6, #0]
    d290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d294 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    d294:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    d296:	4604      	mov	r4, r0
    d298:	1d01      	adds	r1, r0, #4
    d29a:	4668      	mov	r0, sp
    d29c:	f7f9 ff18 	bl	70d0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    d2a0:	2800      	cmp	r0, #0
    d2a2:	d004      	beq.n	d2ae <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    d2a4:	4669      	mov	r1, sp
    d2a6:	4620      	mov	r0, r4
    d2a8:	f000 f848 	bl	d33c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    d2ac:	2001      	movs	r0, #1
    d2ae:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000d2b0 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    d2b0:	b50e      	push	{r1, r2, r3, lr}
    d2b2:	4601      	mov	r1, r0
    d2b4:	4668      	mov	r0, sp
    d2b6:	f000 f827 	bl	d308 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    d2ba:	4668      	mov	r0, sp
    d2bc:	f001 fcc2 	bl	ec44 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    d2c0:	bd0e      	pop	{r1, r2, r3, pc}

0000d2c2 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    d2c2:	b510      	push	{r4, lr}
    d2c4:	4604      	mov	r4, r0
    d2c6:	4620      	mov	r0, r4
    d2c8:	f7f7 ff96 	bl	51f8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    d2cc:	2800      	cmp	r0, #0
    d2ce:	d006      	beq.n	d2de <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    d2d0:	78a1      	ldrb	r1, [r4, #2]
    d2d2:	7820      	ldrb	r0, [r4, #0]
    d2d4:	f000 f804 	bl	d2e0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    d2d8:	2800      	cmp	r0, #0
    d2da:	d0f4      	beq.n	d2c6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    d2dc:	2001      	movs	r0, #1
    d2de:	bd10      	pop	{r4, pc}
    d2e0:	b570      	push	{r4, r5, r6, lr}
    d2e2:	460c      	mov	r4, r1
    d2e4:	4605      	mov	r5, r0
    d2e6:	f7f7 fff9 	bl	52dc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    d2ea:	2800      	cmp	r0, #0
    d2ec:	d002      	beq.n	d2f4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    d2ee:	2d3e      	cmp	r5, #62	; 0x3e
    d2f0:	d001      	beq.n	d2f6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    d2f2:	2001      	movs	r0, #1
    d2f4:	bd70      	pop	{r4, r5, r6, pc}
    d2f6:	2c12      	cmp	r4, #18
    d2f8:	d004      	beq.n	d304 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    d2fa:	4620      	mov	r0, r4
    d2fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d300:	f7f8 b808 	b.w	5314 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    d304:	2000      	movs	r0, #0
    d306:	bd70      	pop	{r4, r5, r6, pc}

0000d308 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    d308:	880a      	ldrh	r2, [r1, #0]
    d30a:	f3c2 020b 	ubfx	r2, r2, #0, #12
    d30e:	8002      	strh	r2, [r0, #0]
    d310:	884a      	ldrh	r2, [r1, #2]
    d312:	8042      	strh	r2, [r0, #2]
    d314:	784a      	ldrb	r2, [r1, #1]
    d316:	0993      	lsrs	r3, r2, #6
    d318:	2200      	movs	r2, #0
    d31a:	7142      	strb	r2, [r0, #5]
    d31c:	784b      	ldrb	r3, [r1, #1]
    d31e:	f3c3 1301 	ubfx	r3, r3, #4, #2
    d322:	b11b      	cbz	r3, d32c <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d324:	2b01      	cmp	r3, #1
    d326:	d005      	beq.n	d334 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    d328:	2b02      	cmp	r3, #2
    d32a:	d005      	beq.n	d338 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    d32c:	7102      	strb	r2, [r0, #4]
    d32e:	1d09      	adds	r1, r1, #4
    d330:	6081      	str	r1, [r0, #8]
    d332:	4770      	bx	lr
    d334:	2201      	movs	r2, #1
    d336:	e7f9      	b.n	d32c <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d338:	2202      	movs	r2, #2
    d33a:	e7f7      	b.n	d32c <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000d33c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    d33c:	b510      	push	{r4, lr}
    d33e:	460c      	mov	r4, r1
    d340:	7809      	ldrb	r1, [r1, #0]
    d342:	7001      	strb	r1, [r0, #0]
    d344:	7841      	ldrb	r1, [r0, #1]
    d346:	f021 010f 	bic.w	r1, r1, #15
    d34a:	7041      	strb	r1, [r0, #1]
    d34c:	8822      	ldrh	r2, [r4, #0]
    d34e:	f3c2 2203 	ubfx	r2, r2, #8, #4
    d352:	4311      	orrs	r1, r2
    d354:	7041      	strb	r1, [r0, #1]
    d356:	78a2      	ldrb	r2, [r4, #2]
    d358:	7082      	strb	r2, [r0, #2]
    d35a:	8862      	ldrh	r2, [r4, #2]
    d35c:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    d360:	0a12      	lsrs	r2, r2, #8
    d362:	70c2      	strb	r2, [r0, #3]
    d364:	7041      	strb	r1, [r0, #1]
    d366:	7922      	ldrb	r2, [r4, #4]
    d368:	f002 0203 	and.w	r2, r2, #3
    d36c:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    d370:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    d374:	7041      	strb	r1, [r0, #1]
    d376:	7962      	ldrb	r2, [r4, #5]
    d378:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    d37c:	7041      	strb	r1, [r0, #1]
    d37e:	68a1      	ldr	r1, [r4, #8]
    d380:	1d02      	adds	r2, r0, #4
    d382:	4291      	cmp	r1, r2
    d384:	d006      	beq.n	d394 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    d386:	8862      	ldrh	r2, [r4, #2]
    d388:	2afb      	cmp	r2, #251	; 0xfb
    d38a:	d300      	bcc.n	d38e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    d38c:	22fb      	movs	r2, #251	; 0xfb
    d38e:	1d00      	adds	r0, r0, #4
    d390:	f7ff fe01 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d394:	78a0      	ldrb	r0, [r4, #2]
    d396:	1d00      	adds	r0, r0, #4
    d398:	b2c0      	uxtb	r0, r0
    d39a:	bd10      	pop	{r4, pc}

0000d39c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    d39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d3a0:	4604      	mov	r4, r0
    d3a2:	780f      	ldrb	r7, [r1, #0]
    d3a4:	2000      	movs	r0, #0
    d3a6:	250c      	movs	r5, #12
    d3a8:	2605      	movs	r6, #5
    d3aa:	223e      	movs	r2, #62	; 0x3e
    d3ac:	23ff      	movs	r3, #255	; 0xff
    d3ae:	2f1b      	cmp	r7, #27
    d3b0:	d27d      	bcs.n	d4ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    d3b2:	e8df f007 	tbb	[pc, r7]
    d3b6:	0ee9      	.short	0x0ee9
    d3b8:	632d2725 	.word	0x632d2725
    d3bc:	ae9b816d 	.word	0xae9b816d
    d3c0:	e1c6bbb0 	.word	0xe1c6bbb0
    d3c4:	31e9e9f3 	.word	0x31e9e9f3
    d3c8:	f0fcd4d1 	.word	0xf0fcd4d1
    d3cc:	ecedeeef 	.word	0xecedeeef
    d3d0:	00eb      	.short	0x00eb
    d3d2:	7025      	strb	r5, [r4, #0]
    d3d4:	7908      	ldrb	r0, [r1, #4]
    d3d6:	70a0      	strb	r0, [r4, #2]
    d3d8:	7948      	ldrb	r0, [r1, #5]
    d3da:	70e0      	strb	r0, [r4, #3]
    d3dc:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    d3e0:	0a00      	lsrs	r0, r0, #8
    d3e2:	7120      	strb	r0, [r4, #4]
    d3e4:	79c8      	ldrb	r0, [r1, #7]
    d3e6:	7160      	strb	r0, [r4, #5]
    d3e8:	7a08      	ldrb	r0, [r1, #8]
    d3ea:	71a0      	strb	r0, [r4, #6]
    d3ec:	8908      	ldrh	r0, [r1, #8]
    d3ee:	0a00      	lsrs	r0, r0, #8
    d3f0:	71e0      	strb	r0, [r4, #7]
    d3f2:	7a88      	ldrb	r0, [r1, #10]
    d3f4:	7220      	strb	r0, [r4, #8]
    d3f6:	8948      	ldrh	r0, [r1, #10]
    d3f8:	0a00      	lsrs	r0, r0, #8
    d3fa:	7260      	strb	r0, [r4, #9]
    d3fc:	2008      	movs	r0, #8
    d3fe:	e0c1      	b.n	d584 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d400:	2010      	movs	r0, #16
    d402:	e000      	b.n	d406 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    d404:	201a      	movs	r0, #26
    d406:	7020      	strb	r0, [r4, #0]
    d408:	7908      	ldrb	r0, [r1, #4]
    d40a:	70a0      	strb	r0, [r4, #2]
    d40c:	2001      	movs	r0, #1
    d40e:	e0b9      	b.n	d584 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d410:	4620      	mov	r0, r4
    d412:	f000 f948 	bl	d6a6 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    d416:	e0b3      	b.n	d580 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e4>
    d418:	7022      	strb	r2, [r4, #0]
    d41a:	200a      	movs	r0, #10
    d41c:	70a0      	strb	r0, [r4, #2]
    d41e:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    d422:	70e0      	strb	r0, [r4, #3]
    d424:	7888      	ldrb	r0, [r1, #2]
    d426:	7120      	strb	r0, [r4, #4]
    d428:	8848      	ldrh	r0, [r1, #2]
    d42a:	0a00      	lsrs	r0, r0, #8
    d42c:	7160      	strb	r0, [r4, #5]
    d42e:	7908      	ldrb	r0, [r1, #4]
    d430:	71a0      	strb	r0, [r4, #6]
    d432:	7948      	ldrb	r0, [r1, #5]
    d434:	71e0      	strb	r0, [r4, #7]
    d436:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d43a:	60a0      	str	r0, [r4, #8]
    d43c:	8948      	ldrh	r0, [r1, #10]
    d43e:	81a0      	strh	r0, [r4, #12]
    d440:	68c8      	ldr	r0, [r1, #12]
    d442:	f8c4 000e 	str.w	r0, [r4, #14]
    d446:	8a08      	ldrh	r0, [r1, #16]
    d448:	8260      	strh	r0, [r4, #18]
    d44a:	f8d1 0012 	ldr.w	r0, [r1, #18]
    d44e:	6160      	str	r0, [r4, #20]
    d450:	8ac8      	ldrh	r0, [r1, #22]
    d452:	8320      	strh	r0, [r4, #24]
    d454:	7e08      	ldrb	r0, [r1, #24]
    d456:	76a0      	strb	r0, [r4, #26]
    d458:	8b08      	ldrh	r0, [r1, #24]
    d45a:	0a00      	lsrs	r0, r0, #8
    d45c:	76e0      	strb	r0, [r4, #27]
    d45e:	7e88      	ldrb	r0, [r1, #26]
    d460:	7720      	strb	r0, [r4, #28]
    d462:	8b48      	ldrh	r0, [r1, #26]
    d464:	0a00      	lsrs	r0, r0, #8
    d466:	7760      	strb	r0, [r4, #29]
    d468:	7f08      	ldrb	r0, [r1, #28]
    d46a:	77a0      	strb	r0, [r4, #30]
    d46c:	8b88      	ldrh	r0, [r1, #28]
    d46e:	0a00      	lsrs	r0, r0, #8
    d470:	77e0      	strb	r0, [r4, #31]
    d472:	7f88      	ldrb	r0, [r1, #30]
    d474:	f884 0020 	strb.w	r0, [r4, #32]
    d478:	201f      	movs	r0, #31
    d47a:	e083      	b.n	d584 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d47c:	7022      	strb	r2, [r4, #0]
    d47e:	2014      	movs	r0, #20
    d480:	70a0      	strb	r0, [r4, #2]
    d482:	7908      	ldrb	r0, [r1, #4]
    d484:	70e0      	strb	r0, [r4, #3]
    d486:	8888      	ldrh	r0, [r1, #4]
    d488:	0a00      	lsrs	r0, r0, #8
    d48a:	7120      	strb	r0, [r4, #4]
    d48c:	7988      	ldrb	r0, [r1, #6]
    d48e:	e0a6      	b.n	d5de <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    d490:	7022      	strb	r2, [r4, #0]
    d492:	2004      	movs	r0, #4
    d494:	70a0      	strb	r0, [r4, #2]
    d496:	7908      	ldrb	r0, [r1, #4]
    d498:	70e0      	strb	r0, [r4, #3]
    d49a:	7988      	ldrb	r0, [r1, #6]
    d49c:	7120      	strb	r0, [r4, #4]
    d49e:	88c8      	ldrh	r0, [r1, #6]
    d4a0:	0a00      	lsrs	r0, r0, #8
    d4a2:	7160      	strb	r0, [r4, #5]
    d4a4:	6888      	ldr	r0, [r1, #8]
    d4a6:	f8c4 0006 	str.w	r0, [r4, #6]
    d4aa:	68c8      	ldr	r0, [r1, #12]
    d4ac:	e000      	b.n	d4b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    d4ae:	e06b      	b.n	d588 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    d4b0:	f8c4 000a 	str.w	r0, [r4, #10]
    d4b4:	200c      	movs	r0, #12
    d4b6:	e065      	b.n	d584 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d4b8:	7022      	strb	r2, [r4, #0]
    d4ba:	2003      	movs	r0, #3
    d4bc:	70a0      	strb	r0, [r4, #2]
    d4be:	7908      	ldrb	r0, [r1, #4]
    d4c0:	70e0      	strb	r0, [r4, #3]
    d4c2:	7988      	ldrb	r0, [r1, #6]
    d4c4:	7120      	strb	r0, [r4, #4]
    d4c6:	88c8      	ldrh	r0, [r1, #6]
    d4c8:	0a00      	lsrs	r0, r0, #8
    d4ca:	7160      	strb	r0, [r4, #5]
    d4cc:	7a08      	ldrb	r0, [r1, #8]
    d4ce:	71a0      	strb	r0, [r4, #6]
    d4d0:	8908      	ldrh	r0, [r1, #8]
    d4d2:	0a00      	lsrs	r0, r0, #8
    d4d4:	71e0      	strb	r0, [r4, #7]
    d4d6:	7a88      	ldrb	r0, [r1, #10]
    d4d8:	7220      	strb	r0, [r4, #8]
    d4da:	8948      	ldrh	r0, [r1, #10]
    d4dc:	0a00      	lsrs	r0, r0, #8
    d4de:	7260      	strb	r0, [r4, #9]
    d4e0:	7b08      	ldrb	r0, [r1, #12]
    d4e2:	72a0      	strb	r0, [r4, #10]
    d4e4:	8988      	ldrh	r0, [r1, #12]
    d4e6:	0a00      	lsrs	r0, r0, #8
    d4e8:	72e0      	strb	r0, [r4, #11]
    d4ea:	e0b5      	b.n	d658 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2bc>
    d4ec:	7022      	strb	r2, [r4, #0]
    d4ee:	70a6      	strb	r6, [r4, #2]
    d4f0:	7908      	ldrb	r0, [r1, #4]
    d4f2:	70e0      	strb	r0, [r4, #3]
    d4f4:	8888      	ldrh	r0, [r1, #4]
    d4f6:	0a00      	lsrs	r0, r0, #8
    d4f8:	7120      	strb	r0, [r4, #4]
    d4fa:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d4fe:	f8c4 0005 	str.w	r0, [r4, #5]
    d502:	f8d1 000a 	ldr.w	r0, [r1, #10]
    d506:	f8c4 0009 	str.w	r0, [r4, #9]
    d50a:	89c8      	ldrh	r0, [r1, #14]
    d50c:	f8a4 000d 	strh.w	r0, [r4, #13]
    d510:	e0c7      	b.n	d6a2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x306>
    d512:	2011      	movs	r0, #17
    d514:	e043      	b.n	d59e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x202>
    d516:	7026      	strb	r6, [r4, #0]
    d518:	7908      	ldrb	r0, [r1, #4]
    d51a:	70a0      	strb	r0, [r4, #2]
    d51c:	7948      	ldrb	r0, [r1, #5]
    d51e:	70e0      	strb	r0, [r4, #3]
    d520:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    d524:	0a00      	lsrs	r0, r0, #8
    d526:	7120      	strb	r0, [r4, #4]
    d528:	79c8      	ldrb	r0, [r1, #7]
    d52a:	e058      	b.n	d5de <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    d52c:	2008      	movs	r0, #8
    d52e:	7020      	strb	r0, [r4, #0]
    d530:	7908      	ldrb	r0, [r1, #4]
    d532:	70a0      	strb	r0, [r4, #2]
    d534:	7988      	ldrb	r0, [r1, #6]
    d536:	70e0      	strb	r0, [r4, #3]
    d538:	88c8      	ldrh	r0, [r1, #6]
    d53a:	0a00      	lsrs	r0, r0, #8
    d53c:	7120      	strb	r0, [r4, #4]
    d53e:	7a08      	ldrb	r0, [r1, #8]
    d540:	e04d      	b.n	d5de <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    d542:	2030      	movs	r0, #48	; 0x30
    d544:	7020      	strb	r0, [r4, #0]
    d546:	7908      	ldrb	r0, [r1, #4]
    d548:	70a0      	strb	r0, [r4, #2]
    d54a:	7988      	ldrb	r0, [r1, #6]
    d54c:	70e0      	strb	r0, [r4, #3]
    d54e:	88c8      	ldrh	r0, [r1, #6]
    d550:	0a00      	lsrs	r0, r0, #8
    d552:	7120      	strb	r0, [r4, #4]
    d554:	2003      	movs	r0, #3
    d556:	e015      	b.n	d584 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d558:	7022      	strb	r2, [r4, #0]
    d55a:	2007      	movs	r0, #7
    d55c:	e044      	b.n	d5e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24c>
    d55e:	7022      	strb	r2, [r4, #0]
    d560:	70a5      	strb	r5, [r4, #2]
    d562:	7908      	ldrb	r0, [r1, #4]
    d564:	70e0      	strb	r0, [r4, #3]
    d566:	7988      	ldrb	r0, [r1, #6]
    d568:	7120      	strb	r0, [r4, #4]
    d56a:	88c8      	ldrh	r0, [r1, #6]
    d56c:	0a00      	lsrs	r0, r0, #8
    d56e:	7160      	strb	r0, [r4, #5]
    d570:	7a08      	ldrb	r0, [r1, #8]
    d572:	71a0      	strb	r0, [r4, #6]
    d574:	7a48      	ldrb	r0, [r1, #9]
    d576:	e027      	b.n	d5c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
    d578:	4620      	mov	r0, r4
    d57a:	1d09      	adds	r1, r1, #4
    d57c:	f7f7 fe80 	bl	5280 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    d580:	2800      	cmp	r0, #0
    d582:	d001      	beq.n	d588 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    d584:	7060      	strb	r0, [r4, #1]
    d586:	1c80      	adds	r0, r0, #2
    d588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d58c:	e074      	b.n	d678 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    d58e:	e047      	b.n	d620 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    d590:	e028      	b.n	d5e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x248>
    d592:	e053      	b.n	d63c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a0>
    d594:	e062      	b.n	d65c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    d596:	e01a      	b.n	d5ce <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x232>
    d598:	e009      	b.n	d5ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x212>
    d59a:	e7ff      	b.n	d59c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x200>
    d59c:	2057      	movs	r0, #87	; 0x57
    d59e:	7020      	strb	r0, [r4, #0]
    d5a0:	7908      	ldrb	r0, [r1, #4]
    d5a2:	70a0      	strb	r0, [r4, #2]
    d5a4:	8888      	ldrh	r0, [r1, #4]
    d5a6:	0a00      	lsrs	r0, r0, #8
    d5a8:	70e0      	strb	r0, [r4, #3]
    d5aa:	2002      	movs	r0, #2
    d5ac:	e7ea      	b.n	d584 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d5ae:	7022      	strb	r2, [r4, #0]
    d5b0:	2012      	movs	r0, #18
    d5b2:	70a0      	strb	r0, [r4, #2]
    d5b4:	7908      	ldrb	r0, [r1, #4]
    d5b6:	70e0      	strb	r0, [r4, #3]
    d5b8:	7948      	ldrb	r0, [r1, #5]
    d5ba:	7120      	strb	r0, [r4, #4]
    d5bc:	7988      	ldrb	r0, [r1, #6]
    d5be:	7160      	strb	r0, [r4, #5]
    d5c0:	88c8      	ldrh	r0, [r1, #6]
    d5c2:	0a00      	lsrs	r0, r0, #8
    d5c4:	71a0      	strb	r0, [r4, #6]
    d5c6:	7a08      	ldrb	r0, [r1, #8]
    d5c8:	71e0      	strb	r0, [r4, #7]
    d5ca:	2006      	movs	r0, #6
    d5cc:	e7da      	b.n	d584 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d5ce:	7023      	strb	r3, [r4, #0]
    d5d0:	20a1      	movs	r0, #161	; 0xa1
    d5d2:	70a0      	strb	r0, [r4, #2]
    d5d4:	7908      	ldrb	r0, [r1, #4]
    d5d6:	70e0      	strb	r0, [r4, #3]
    d5d8:	7948      	ldrb	r0, [r1, #5]
    d5da:	7120      	strb	r0, [r4, #4]
    d5dc:	2000      	movs	r0, #0
    d5de:	7160      	strb	r0, [r4, #5]
    d5e0:	2004      	movs	r0, #4
    d5e2:	e7cf      	b.n	d584 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d5e4:	7023      	strb	r3, [r4, #0]
    d5e6:	20a2      	movs	r0, #162	; 0xa2
    d5e8:	70a0      	strb	r0, [r4, #2]
    d5ea:	7908      	ldrb	r0, [r1, #4]
    d5ec:	70e0      	strb	r0, [r4, #3]
    d5ee:	8888      	ldrh	r0, [r1, #4]
    d5f0:	0a00      	lsrs	r0, r0, #8
    d5f2:	7120      	strb	r0, [r4, #4]
    d5f4:	7988      	ldrb	r0, [r1, #6]
    d5f6:	7160      	strb	r0, [r4, #5]
    d5f8:	88c8      	ldrh	r0, [r1, #6]
    d5fa:	0a00      	lsrs	r0, r0, #8
    d5fc:	71a0      	strb	r0, [r4, #6]
    d5fe:	7a08      	ldrb	r0, [r1, #8]
    d600:	71e0      	strb	r0, [r4, #7]
    d602:	8908      	ldrh	r0, [r1, #8]
    d604:	0a00      	lsrs	r0, r0, #8
    d606:	7220      	strb	r0, [r4, #8]
    d608:	7a88      	ldrb	r0, [r1, #10]
    d60a:	7260      	strb	r0, [r4, #9]
    d60c:	8948      	ldrh	r0, [r1, #10]
    d60e:	0a00      	lsrs	r0, r0, #8
    d610:	72a0      	strb	r0, [r4, #10]
    d612:	7b08      	ldrb	r0, [r1, #12]
    d614:	72e0      	strb	r0, [r4, #11]
    d616:	8988      	ldrh	r0, [r1, #12]
    d618:	0a00      	lsrs	r0, r0, #8
    d61a:	7320      	strb	r0, [r4, #12]
    d61c:	200b      	movs	r0, #11
    d61e:	e7b1      	b.n	d584 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d620:	7023      	strb	r3, [r4, #0]
    d622:	20a3      	movs	r0, #163	; 0xa3
    d624:	70a0      	strb	r0, [r4, #2]
    d626:	7908      	ldrb	r0, [r1, #4]
    d628:	70e0      	strb	r0, [r4, #3]
    d62a:	8888      	ldrh	r0, [r1, #4]
    d62c:	0a00      	lsrs	r0, r0, #8
    d62e:	7120      	strb	r0, [r4, #4]
    d630:	7988      	ldrb	r0, [r1, #6]
    d632:	7160      	strb	r0, [r4, #5]
    d634:	79c8      	ldrb	r0, [r1, #7]
    d636:	71a0      	strb	r0, [r4, #6]
    d638:	2005      	movs	r0, #5
    d63a:	e7a3      	b.n	d584 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d63c:	7022      	strb	r2, [r4, #0]
    d63e:	2013      	movs	r0, #19
    d640:	70a0      	strb	r0, [r4, #2]
    d642:	7908      	ldrb	r0, [r1, #4]
    d644:	70e0      	strb	r0, [r4, #3]
    d646:	7948      	ldrb	r0, [r1, #5]
    d648:	7120      	strb	r0, [r4, #4]
    d64a:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d64e:	f8c4 0005 	str.w	r0, [r4, #5]
    d652:	8948      	ldrh	r0, [r1, #10]
    d654:	f8a4 0009 	strh.w	r0, [r4, #9]
    d658:	200a      	movs	r0, #10
    d65a:	e793      	b.n	d584 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d65c:	7023      	strb	r3, [r4, #0]
    d65e:	20a4      	movs	r0, #164	; 0xa4
    d660:	70a0      	strb	r0, [r4, #2]
    d662:	7908      	ldrb	r0, [r1, #4]
    d664:	70e0      	strb	r0, [r4, #3]
    d666:	8888      	ldrh	r0, [r1, #4]
    d668:	0a00      	lsrs	r0, r0, #8
    d66a:	7120      	strb	r0, [r4, #4]
    d66c:	7988      	ldrb	r0, [r1, #6]
    d66e:	7160      	strb	r0, [r4, #5]
    d670:	79c8      	ldrb	r0, [r1, #7]
    d672:	71a0      	strb	r0, [r4, #6]
    d674:	2007      	movs	r0, #7
    d676:	e785      	b.n	d584 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d678:	7023      	strb	r3, [r4, #0]
    d67a:	2080      	movs	r0, #128	; 0x80
    d67c:	70a0      	strb	r0, [r4, #2]
    d67e:	888a      	ldrh	r2, [r1, #4]
    d680:	f8a4 2003 	strh.w	r2, [r4, #3]
    d684:	88ca      	ldrh	r2, [r1, #6]
    d686:	f8a4 2005 	strh.w	r2, [r4, #5]
    d68a:	7a0a      	ldrb	r2, [r1, #8]
    d68c:	71e2      	strb	r2, [r4, #7]
    d68e:	894a      	ldrh	r2, [r1, #10]
    d690:	8122      	strh	r2, [r4, #8]
    d692:	898a      	ldrh	r2, [r1, #12]
    d694:	8162      	strh	r2, [r4, #10]
    d696:	89ca      	ldrh	r2, [r1, #14]
    d698:	81a2      	strh	r2, [r4, #12]
    d69a:	7c09      	ldrb	r1, [r1, #16]
    d69c:	f001 0101 	and.w	r1, r1, #1
    d6a0:	73a1      	strb	r1, [r4, #14]
    d6a2:	200d      	movs	r0, #13
    d6a4:	e76e      	b.n	d584 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>

0000d6a6 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    d6a6:	223e      	movs	r2, #62	; 0x3e
    d6a8:	7002      	strb	r2, [r0, #0]
    d6aa:	2201      	movs	r2, #1
    d6ac:	7082      	strb	r2, [r0, #2]
    d6ae:	790a      	ldrb	r2, [r1, #4]
    d6b0:	70c2      	strb	r2, [r0, #3]
    d6b2:	798a      	ldrb	r2, [r1, #6]
    d6b4:	7102      	strb	r2, [r0, #4]
    d6b6:	88ca      	ldrh	r2, [r1, #6]
    d6b8:	0a12      	lsrs	r2, r2, #8
    d6ba:	7142      	strb	r2, [r0, #5]
    d6bc:	7a0a      	ldrb	r2, [r1, #8]
    d6be:	7182      	strb	r2, [r0, #6]
    d6c0:	7a4a      	ldrb	r2, [r1, #9]
    d6c2:	71c2      	strb	r2, [r0, #7]
    d6c4:	f8d1 200a 	ldr.w	r2, [r1, #10]
    d6c8:	6082      	str	r2, [r0, #8]
    d6ca:	89ca      	ldrh	r2, [r1, #14]
    d6cc:	8182      	strh	r2, [r0, #12]
    d6ce:	7c0a      	ldrb	r2, [r1, #16]
    d6d0:	7382      	strb	r2, [r0, #14]
    d6d2:	8a0a      	ldrh	r2, [r1, #16]
    d6d4:	0a12      	lsrs	r2, r2, #8
    d6d6:	73c2      	strb	r2, [r0, #15]
    d6d8:	7c8a      	ldrb	r2, [r1, #18]
    d6da:	7402      	strb	r2, [r0, #16]
    d6dc:	8a4a      	ldrh	r2, [r1, #18]
    d6de:	0a12      	lsrs	r2, r2, #8
    d6e0:	7442      	strb	r2, [r0, #17]
    d6e2:	7d0a      	ldrb	r2, [r1, #20]
    d6e4:	7482      	strb	r2, [r0, #18]
    d6e6:	8a8a      	ldrh	r2, [r1, #20]
    d6e8:	0a12      	lsrs	r2, r2, #8
    d6ea:	74c2      	strb	r2, [r0, #19]
    d6ec:	7d89      	ldrb	r1, [r1, #22]
    d6ee:	7501      	strb	r1, [r0, #20]
    d6f0:	2013      	movs	r0, #19
    d6f2:	4770      	bx	lr

0000d6f4 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    d6f4:	223e      	movs	r2, #62	; 0x3e
    d6f6:	7002      	strb	r2, [r0, #0]
    d6f8:	2201      	movs	r2, #1
    d6fa:	7082      	strb	r2, [r0, #2]
    d6fc:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    d700:	70c2      	strb	r2, [r0, #3]
    d702:	788a      	ldrb	r2, [r1, #2]
    d704:	7102      	strb	r2, [r0, #4]
    d706:	884a      	ldrh	r2, [r1, #2]
    d708:	0a12      	lsrs	r2, r2, #8
    d70a:	7142      	strb	r2, [r0, #5]
    d70c:	790a      	ldrb	r2, [r1, #4]
    d70e:	7182      	strb	r2, [r0, #6]
    d710:	794a      	ldrb	r2, [r1, #5]
    d712:	71c2      	strb	r2, [r0, #7]
    d714:	f8d1 2006 	ldr.w	r2, [r1, #6]
    d718:	6082      	str	r2, [r0, #8]
    d71a:	894a      	ldrh	r2, [r1, #10]
    d71c:	8182      	strh	r2, [r0, #12]
    d71e:	7e0a      	ldrb	r2, [r1, #24]
    d720:	7382      	strb	r2, [r0, #14]
    d722:	8b0a      	ldrh	r2, [r1, #24]
    d724:	0a12      	lsrs	r2, r2, #8
    d726:	73c2      	strb	r2, [r0, #15]
    d728:	7e8a      	ldrb	r2, [r1, #26]
    d72a:	7402      	strb	r2, [r0, #16]
    d72c:	8b4a      	ldrh	r2, [r1, #26]
    d72e:	0a12      	lsrs	r2, r2, #8
    d730:	7442      	strb	r2, [r0, #17]
    d732:	7f0a      	ldrb	r2, [r1, #28]
    d734:	7482      	strb	r2, [r0, #18]
    d736:	8b8a      	ldrh	r2, [r1, #28]
    d738:	0a12      	lsrs	r2, r2, #8
    d73a:	74c2      	strb	r2, [r0, #19]
    d73c:	7f89      	ldrb	r1, [r1, #30]
    d73e:	7501      	strb	r1, [r0, #20]
    d740:	2113      	movs	r1, #19
    d742:	7041      	strb	r1, [r0, #1]
    d744:	4608      	mov	r0, r1
    d746:	4770      	bx	lr

0000d748 <sdc_hci_data_get>:
    d748:	b510      	push	{r4, lr}
    d74a:	b120      	cbz	r0, d756 <sdc_hci_data_get+0xe>
    d74c:	f7ff fda2 	bl	d294 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    d750:	b120      	cbz	r0, d75c <sdc_hci_data_get+0x14>
    d752:	2000      	movs	r0, #0
    d754:	bd10      	pop	{r4, pc}
    d756:	f06f 0015 	mvn.w	r0, #21
    d75a:	bd10      	pop	{r4, pc}
    d75c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d760:	bd10      	pop	{r4, pc}

0000d762 <sdc_hci_data_put>:
    d762:	b510      	push	{r4, lr}
    d764:	f06f 0415 	mvn.w	r4, #21
    d768:	b120      	cbz	r0, d774 <sdc_hci_data_put+0x12>
    d76a:	f7ff fda1 	bl	d2b0 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    d76e:	b108      	cbz	r0, d774 <sdc_hci_data_put+0x12>
    d770:	2000      	movs	r0, #0
    d772:	bd10      	pop	{r4, pc}
    d774:	4620      	mov	r0, r4
    d776:	bd10      	pop	{r4, pc}

0000d778 <sdc_hci_evt_get>:
    d778:	b510      	push	{r4, lr}
    d77a:	b120      	cbz	r0, d786 <sdc_hci_evt_get+0xe>
    d77c:	f7ff fda1 	bl	d2c2 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    d780:	b120      	cbz	r0, d78c <sdc_hci_evt_get+0x14>
    d782:	2000      	movs	r0, #0
    d784:	bd10      	pop	{r4, pc}
    d786:	f06f 0015 	mvn.w	r0, #21
    d78a:	bd10      	pop	{r4, pc}
    d78c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d790:	bd10      	pop	{r4, pc}

0000d792 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    d792:	f002 becf 	b.w	10534 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000d796 <sdc_hci_cmd_cb_read_transmit_power_level>:
    d796:	f002 bf11 	b.w	105bc <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000d79a <sdc_hci_cmd_cb_set_event_mask>:
    d79a:	b510      	push	{r4, lr}
    d79c:	f7f7 fdce 	bl	533c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d7a0:	2000      	movs	r0, #0
    d7a2:	bd10      	pop	{r4, pc}

0000d7a4 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    d7a4:	b510      	push	{r4, lr}
    d7a6:	f7f7 fdd7 	bl	5358 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    d7aa:	2000      	movs	r0, #0
    d7ac:	bd10      	pop	{r4, pc}

0000d7ae <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    d7ae:	f002 bf21 	b.w	105f4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000d7b2 <sdc_hci_cmd_vs_conn_event_extend>:
    d7b2:	b508      	push	{r3, lr}
    d7b4:	7800      	ldrb	r0, [r0, #0]
    d7b6:	f88d 0000 	strb.w	r0, [sp]
    d7ba:	4668      	mov	r0, sp
    d7bc:	f002 fdd1 	bl	10362 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d7c0:	bd08      	pop	{r3, pc}

0000d7c2 <sdc_hci_cmd_vs_conn_update>:
    d7c2:	2001      	movs	r0, #1
    d7c4:	4770      	bx	lr

0000d7c6 <sdc_hci_cmd_vs_event_length_set>:
    d7c6:	f7fd bd09 	b.w	b1dc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d7ca <sdc_hci_cmd_vs_llpm_mode_set>:
    d7ca:	2001      	movs	r0, #1
    d7cc:	4770      	bx	lr

0000d7ce <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d7ce:	7800      	ldrb	r0, [r0, #0]
    d7d0:	b100      	cbz	r0, d7d4 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d7d2:	2001      	movs	r0, #1
    d7d4:	f002 bd4a 	b.w	1026c <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d7d8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    d7d8:	b570      	push	{r4, r5, r6, lr}
    d7da:	4605      	mov	r5, r0
    d7dc:	2210      	movs	r2, #16
    d7de:	2100      	movs	r1, #0
    d7e0:	f7ff fc53 	bl	d08a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d7e4:	2210      	movs	r2, #16
    d7e6:	2100      	movs	r1, #0
    d7e8:	f105 0010 	add.w	r0, r5, #16
    d7ec:	f7ff fc4d 	bl	d08a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d7f0:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    d7f4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d7f8:	1c40      	adds	r0, r0, #1
    d7fa:	d10b      	bne.n	d814 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d7fc:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d800:	1c40      	adds	r0, r0, #1
    d802:	d107      	bne.n	d814 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d804:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d808:	1c40      	adds	r0, r0, #1
    d80a:	d103      	bne.n	d814 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d80c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d810:	1c40      	adds	r0, r0, #1
    d812:	d00b      	beq.n	d82c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    d814:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    d818:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d81c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    d820:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d824:	612a      	str	r2, [r5, #16]
    d826:	6168      	str	r0, [r5, #20]
    d828:	61a9      	str	r1, [r5, #24]
    d82a:	61eb      	str	r3, [r5, #28]
    d82c:	2000      	movs	r0, #0
    d82e:	f7f8 facf 	bl	5dd0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d832:	b918      	cbnz	r0, d83c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    d834:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    d838:	07c0      	lsls	r0, r0, #31
    d83a:	d118      	bne.n	d86e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d83c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d840:	1c40      	adds	r0, r0, #1
    d842:	d10b      	bne.n	d85c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d844:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d848:	1c40      	adds	r0, r0, #1
    d84a:	d107      	bne.n	d85c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d84c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d850:	1c40      	adds	r0, r0, #1
    d852:	d103      	bne.n	d85c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d854:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d858:	1c40      	adds	r0, r0, #1
    d85a:	d008      	beq.n	d86e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d85c:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d860:	6861      	ldr	r1, [r4, #4]
    d862:	68a2      	ldr	r2, [r4, #8]
    d864:	68e3      	ldr	r3, [r4, #12]
    d866:	6028      	str	r0, [r5, #0]
    d868:	6069      	str	r1, [r5, #4]
    d86a:	60aa      	str	r2, [r5, #8]
    d86c:	60eb      	str	r3, [r5, #12]
    d86e:	2000      	movs	r0, #0
    d870:	bd70      	pop	{r4, r5, r6, pc}

0000d872 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d872:	b538      	push	{r3, r4, r5, lr}
    d874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d878:	4604      	mov	r4, r0
    d87a:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d87e:	1c40      	adds	r0, r0, #1
    d880:	d105      	bne.n	d88e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d882:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d886:	43c0      	mvns	r0, r0
    d888:	0400      	lsls	r0, r0, #16
    d88a:	0c00      	lsrs	r0, r0, #16
    d88c:	d03e      	beq.n	d90c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d88e:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d892:	07c0      	lsls	r0, r0, #31
    d894:	d03a      	beq.n	d90c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d896:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d89a:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    d89e:	f8ad 1000 	strh.w	r1, [sp]
    d8a2:	f8c4 0001 	str.w	r0, [r4, #1]
    d8a6:	f8bd 0000 	ldrh.w	r0, [sp]
    d8aa:	f8a4 0005 	strh.w	r0, [r4, #5]
    d8ae:	79a0      	ldrb	r0, [r4, #6]
    d8b0:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    d8b4:	71a0      	strb	r0, [r4, #6]
    d8b6:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    d8ba:	1c40      	adds	r0, r0, #1
    d8bc:	d00f      	beq.n	d8de <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d8be:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    d8c2:	1c40      	adds	r0, r0, #1
    d8c4:	d00b      	beq.n	d8de <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d8c6:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    d8ca:	1c40      	adds	r0, r0, #1
    d8cc:	d007      	beq.n	d8de <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d8ce:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    d8d2:	1c40      	adds	r0, r0, #1
    d8d4:	d003      	beq.n	d8de <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d8d6:	2000      	movs	r0, #0
    d8d8:	f7f8 fa7a 	bl	5dd0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d8dc:	b140      	cbz	r0, d8f0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    d8de:	2210      	movs	r2, #16
    d8e0:	2100      	movs	r1, #0
    d8e2:	1de0      	adds	r0, r4, #7
    d8e4:	f7ff fbd1 	bl	d08a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d8e8:	2001      	movs	r0, #1
    d8ea:	7020      	strb	r0, [r4, #0]
    d8ec:	2000      	movs	r0, #0
    d8ee:	bd38      	pop	{r3, r4, r5, pc}
    d8f0:	f855 2f90 	ldr.w	r2, [r5, #144]!
    d8f4:	6869      	ldr	r1, [r5, #4]
    d8f6:	68a8      	ldr	r0, [r5, #8]
    d8f8:	68eb      	ldr	r3, [r5, #12]
    d8fa:	f8c4 2007 	str.w	r2, [r4, #7]
    d8fe:	f8c4 100b 	str.w	r1, [r4, #11]
    d902:	f8c4 000f 	str.w	r0, [r4, #15]
    d906:	f8c4 3013 	str.w	r3, [r4, #19]
    d90a:	e7ed      	b.n	d8e8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d90c:	2000      	movs	r0, #0
    d90e:	e7ec      	b.n	d8ea <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000d910 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d910:	f002 bd19 	b.w	10346 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d914 <sdc_hci_cmd_ip_read_bd_addr>:
    d914:	f002 be1f 	b.w	10556 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d918 <sdc_hci_cmd_ip_read_local_version_information>:
    d918:	f7fd bc6e 	b.w	b1f8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d91c <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d91c:	f002 b9ff 	b.w	fd1e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d920 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    d920:	f002 b9e2 	b.w	fce8 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000d924 <sdc_hci_cmd_le_clear_filter_accept_list>:
    d924:	f002 ba1f 	b.w	fd66 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d928 <sdc_hci_cmd_le_clear_resolving_list>:
    d928:	f002 ba10 	b.w	fd4c <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000d92c <sdc_hci_cmd_le_encrypt>:
    d92c:	f002 ba25 	b.w	fd7a <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d930 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    d930:	8802      	ldrh	r2, [r0, #0]
    d932:	800a      	strh	r2, [r1, #0]
    d934:	f002 ba2a 	b.w	fd8c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000d938 <sdc_hci_cmd_le_long_term_key_request_reply>:
    d938:	8802      	ldrh	r2, [r0, #0]
    d93a:	800a      	strh	r2, [r1, #0]
    d93c:	f002 ba3f 	b.w	fdbe <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000d940 <sdc_hci_cmd_le_rand>:
    d940:	f002 ba67 	b.w	fe12 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d944 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    d944:	f002 ba6b 	b.w	fe1e <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000d948 <sdc_hci_cmd_le_read_buffer_size>:
    d948:	f7fd bbc2 	b.w	b0d0 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d94c <sdc_hci_cmd_le_read_channel_map>:
    d94c:	f7fd bbca 	b.w	b0e4 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d950 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d950:	f002 bad1 	b.w	fef6 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d954 <sdc_hci_cmd_le_read_max_data_length>:
    d954:	f002 ba6c 	b.w	fe30 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d958 <sdc_hci_cmd_le_read_phy>:
    d958:	f002 ba7a 	b.w	fe50 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d95c <sdc_hci_cmd_le_read_remote_features>:
    d95c:	f002 baa1 	b.w	fea2 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d960 <sdc_hci_cmd_le_read_resolving_list_size>:
    d960:	f002 babc 	b.w	fedc <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000d964 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d964:	f7fd bbe6 	b.w	b134 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d968 <sdc_hci_cmd_le_read_transmit_power>:
    d968:	f002 babc 	b.w	fee4 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d96c <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    d96c:	f002 bae0 	b.w	ff30 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d970 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    d970:	f002 bac5 	b.w	fefe <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000d974 <sdc_hci_cmd_le_set_address_resolution_enable>:
    d974:	f002 baf1 	b.w	ff5a <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000d978 <sdc_hci_cmd_le_set_adv_data>:
    d978:	f002 bafd 	b.w	ff76 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000d97c <sdc_hci_cmd_le_set_adv_enable>:
    d97c:	f002 bb10 	b.w	ffa0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000d980 <sdc_hci_cmd_le_set_adv_params>:
    d980:	f002 bb41 	b.w	10006 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000d984 <sdc_hci_cmd_le_set_data_length>:
    d984:	f002 bbd4 	b.w	10130 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d988 <sdc_hci_cmd_le_set_default_phy>:
    d988:	f7fd bbe4 	b.w	b154 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d98c <sdc_hci_cmd_le_set_event_mask>:
    d98c:	b510      	push	{r4, lr}
    d98e:	f7f7 fccf 	bl	5330 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d992:	2000      	movs	r0, #0
    d994:	bd10      	pop	{r4, pc}

0000d996 <sdc_hci_cmd_le_set_phy>:
    d996:	f002 bbf2 	b.w	1017e <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d99a <sdc_hci_cmd_le_set_privacy_mode>:
    d99a:	f002 bc0e 	b.w	101ba <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000d99e <sdc_hci_cmd_le_set_random_address>:
    d99e:	f002 bc22 	b.w	101e6 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d9a2 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    d9a2:	f002 bc2e 	b.w	10202 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000d9a6 <sdc_hci_cmd_le_set_scan_response_data>:
    d9a6:	f002 bc35 	b.w	10214 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000d9aa <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d9aa:	f002 bc48 	b.w	1023e <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d9ae <sdc_hci_cmd_lc_disconnect>:
    d9ae:	f002 b947 	b.w	fc40 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d9b2 <sdc_hci_cmd_lc_read_remote_version_information>:
    d9b2:	f002 bddc 	b.w	1056e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d9b6:	b570      	push	{r4, r5, r6, lr}
    d9b8:	880b      	ldrh	r3, [r1, #0]
    d9ba:	7f04      	ldrb	r4, [r0, #28]
    d9bc:	f100 0524 	add.w	r5, r0, #36	; 0x24
    d9c0:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    d9c4:	8802      	ldrh	r2, [r0, #0]
    d9c6:	4435      	add	r5, r6
    d9c8:	1da4      	adds	r4, r4, #6
    d9ca:	882d      	ldrh	r5, [r5, #0]
    d9cc:	4422      	add	r2, r4
    d9ce:	b292      	uxth	r2, r2
    d9d0:	4425      	add	r5, r4
    d9d2:	1e54      	subs	r4, r2, #1
    d9d4:	442c      	add	r4, r5
    d9d6:	fb94 f4f2 	sdiv	r4, r4, r2
    d9da:	fb02 6204 	mla	r2, r2, r4, r6
    d9de:	8840      	ldrh	r0, [r0, #2]
    d9e0:	b292      	uxth	r2, r2
    d9e2:	4290      	cmp	r0, r2
    d9e4:	d903      	bls.n	d9ee <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d9e6:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d9ea:	4310      	orrs	r0, r2
    d9ec:	e002      	b.n	d9f4 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d9ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d9f2:	4398      	bics	r0, r3
    d9f4:	8008      	strh	r0, [r1, #0]
    d9f6:	bd70      	pop	{r4, r5, r6, pc}
    d9f8:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    d9fc:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    da00:	429a      	cmp	r2, r3
    da02:	d107      	bne.n	da14 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    da04:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    da08:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    da0c:	4288      	cmp	r0, r1
    da0e:	d001      	beq.n	da14 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    da10:	2001      	movs	r0, #1
    da12:	4770      	bx	lr
    da14:	2000      	movs	r0, #0
    da16:	4770      	bx	lr

0000da18 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    da18:	b570      	push	{r4, r5, r6, lr}
    da1a:	7f00      	ldrb	r0, [r0, #28]
    da1c:	461c      	mov	r4, r3
    da1e:	1d80      	adds	r0, r0, #6
    da20:	4408      	add	r0, r1
    da22:	4613      	mov	r3, r2
    da24:	8809      	ldrh	r1, [r1, #0]
    da26:	9a04      	ldr	r2, [sp, #16]
    da28:	1cc9      	adds	r1, r1, #3
    da2a:	b289      	uxth	r1, r1
    da2c:	1915      	adds	r5, r2, r4
    da2e:	1ec0      	subs	r0, r0, #3
    da30:	428d      	cmp	r5, r1
    da32:	d805      	bhi.n	da40 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    da34:	1881      	adds	r1, r0, r2
    da36:	4622      	mov	r2, r4
    da38:	4618      	mov	r0, r3
    da3a:	f7ff faac 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    da3e:	e000      	b.n	da42 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    da40:	2400      	movs	r4, #0
    da42:	4620      	mov	r0, r4
    da44:	bd70      	pop	{r4, r5, r6, pc}

0000da46 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    da46:	b570      	push	{r4, r5, r6, lr}
    da48:	7f00      	ldrb	r0, [r0, #28]
    da4a:	461c      	mov	r4, r3
    da4c:	1d80      	adds	r0, r0, #6
    da4e:	4408      	add	r0, r1
    da50:	4613      	mov	r3, r2
    da52:	8809      	ldrh	r1, [r1, #0]
    da54:	9a04      	ldr	r2, [sp, #16]
    da56:	1cc9      	adds	r1, r1, #3
    da58:	b289      	uxth	r1, r1
    da5a:	1915      	adds	r5, r2, r4
    da5c:	1ec0      	subs	r0, r0, #3
    da5e:	428d      	cmp	r5, r1
    da60:	d805      	bhi.n	da6e <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    da62:	4410      	add	r0, r2
    da64:	4622      	mov	r2, r4
    da66:	4619      	mov	r1, r3
    da68:	f7ff fa95 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    da6c:	e000      	b.n	da70 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    da6e:	2400      	movs	r4, #0
    da70:	4620      	mov	r0, r4
    da72:	bd70      	pop	{r4, r5, r6, pc}

0000da74 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    da74:	8881      	ldrh	r1, [r0, #4]
    da76:	88c0      	ldrh	r0, [r0, #6]
    da78:	4288      	cmp	r0, r1
    da7a:	d101      	bne.n	da80 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    da7c:	2001      	movs	r0, #1
    da7e:	4770      	bx	lr
    da80:	2000      	movs	r0, #0
    da82:	4770      	bx	lr

0000da84 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    da84:	8881      	ldrh	r1, [r0, #4]
    da86:	8900      	ldrh	r0, [r0, #8]
    da88:	4288      	cmp	r0, r1
    da8a:	d101      	bne.n	da90 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    da8c:	2001      	movs	r0, #1
    da8e:	4770      	bx	lr
    da90:	2000      	movs	r0, #0
    da92:	4770      	bx	lr

0000da94 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    da94:	b570      	push	{r4, r5, r6, lr}
    da96:	460d      	mov	r5, r1
    da98:	4604      	mov	r4, r0
    da9a:	f100 0124 	add.w	r1, r0, #36	; 0x24
    da9e:	8880      	ldrh	r0, [r0, #4]
    daa0:	2600      	movs	r6, #0
    daa2:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    daa6:	4401      	add	r1, r0
    daa8:	702e      	strb	r6, [r5, #0]
    daaa:	8a20      	ldrh	r0, [r4, #16]
    daac:	2800      	cmp	r0, #0
    daae:	d01b      	beq.n	dae8 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x54>
    dab0:	89a2      	ldrh	r2, [r4, #12]
    dab2:	4410      	add	r0, r2
    dab4:	b280      	uxth	r0, r0
    dab6:	81a0      	strh	r0, [r4, #12]
    dab8:	880a      	ldrh	r2, [r1, #0]
    daba:	4290      	cmp	r0, r2
    dabc:	d905      	bls.n	daca <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x36>
    dabe:	f44f 71b3 	mov.w	r1, #358	; 0x166
    dac2:	f04f 0014 	mov.w	r0, #20
    dac6:	f7f7 fab1 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    daca:	d10b      	bne.n	dae4 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x50>
    dacc:	69a0      	ldr	r0, [r4, #24]
    dace:	b108      	cbz	r0, dad4 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x40>
    dad0:	7f40      	ldrb	r0, [r0, #29]
    dad2:	7088      	strb	r0, [r1, #2]
    dad4:	f104 0104 	add.w	r1, r4, #4
    dad8:	4620      	mov	r0, r4
    dada:	f7ff ff6c 	bl	d9b6 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    dade:	81a6      	strh	r6, [r4, #12]
    dae0:	2001      	movs	r0, #1
    dae2:	7028      	strb	r0, [r5, #0]
    dae4:	8226      	strh	r6, [r4, #16]
    dae6:	2001      	movs	r0, #1
    dae8:	bd70      	pop	{r4, r5, r6, pc}

0000daea <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    daea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    daec:	4604      	mov	r4, r0
    daee:	f100 0324 	add.w	r3, r0, #36	; 0x24
    daf2:	88c0      	ldrh	r0, [r0, #6]
    daf4:	460e      	mov	r6, r1
    daf6:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    dafa:	8a60      	ldrh	r0, [r4, #18]
    dafc:	19d9      	adds	r1, r3, r7
    dafe:	b108      	cbz	r0, db04 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    db00:	42b0      	cmp	r0, r6
    db02:	d201      	bcs.n	db08 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    db04:	2000      	movs	r0, #0
    db06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    db08:	89e0      	ldrh	r0, [r4, #14]
    db0a:	2500      	movs	r5, #0
    db0c:	b140      	cbz	r0, db20 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    db0e:	f8b1 c000 	ldrh.w	ip, [r1]
    db12:	4560      	cmp	r0, ip
    db14:	d008      	beq.n	db28 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    db16:	f44f 7114 	mov.w	r1, #592	; 0x250
    db1a:	2014      	movs	r0, #20
    db1c:	f7f7 fa86 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db20:	7f60      	ldrb	r0, [r4, #29]
    db22:	7088      	strb	r0, [r1, #2]
    db24:	800d      	strh	r5, [r1, #0]
    db26:	e00e      	b.n	db46 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    db28:	f894 c01c 	ldrb.w	ip, [r4, #28]
    db2c:	4418      	add	r0, r3
    db2e:	f10c 0c06 	add.w	ip, ip, #6
    db32:	44bc      	add	ip, r7
    db34:	4460      	add	r0, ip
    db36:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    db3a:	f820 cc03 	strh.w	ip, [r0, #-3]
    db3e:	f894 c020 	ldrb.w	ip, [r4, #32]
    db42:	f800 cc01 	strb.w	ip, [r0, #-1]
    db46:	89e0      	ldrh	r0, [r4, #14]
    db48:	4430      	add	r0, r6
    db4a:	81e0      	strh	r0, [r4, #14]
    db4c:	8808      	ldrh	r0, [r1, #0]
    db4e:	4430      	add	r0, r6
    db50:	8008      	strh	r0, [r1, #0]
    db52:	b19a      	cbz	r2, db7c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    db54:	1da1      	adds	r1, r4, #6
    db56:	4620      	mov	r0, r4
    db58:	f7ff ff2d 	bl	d9b6 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    db5c:	81e5      	strh	r5, [r4, #14]
    db5e:	7f60      	ldrb	r0, [r4, #29]
    db60:	1c40      	adds	r0, r0, #1
    db62:	7760      	strb	r0, [r4, #29]
    db64:	7da0      	ldrb	r0, [r4, #22]
    db66:	f88d 0000 	strb.w	r0, [sp]
    db6a:	9800      	ldr	r0, [sp, #0]
    db6c:	9000      	str	r0, [sp, #0]
    db6e:	f89d 0000 	ldrb.w	r0, [sp]
    db72:	b178      	cbz	r0, db94 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    db74:	88e0      	ldrh	r0, [r4, #6]
    db76:	82a0      	strh	r0, [r4, #20]
    db78:	75a5      	strb	r5, [r4, #22]
    db7a:	e00b      	b.n	db94 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    db7c:	7f20      	ldrb	r0, [r4, #28]
    db7e:	89e1      	ldrh	r1, [r4, #14]
    db80:	1d80      	adds	r0, r0, #6
    db82:	4438      	add	r0, r7
    db84:	4419      	add	r1, r3
    db86:	4408      	add	r0, r1
    db88:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    db8c:	83e1      	strh	r1, [r4, #30]
    db8e:	7880      	ldrb	r0, [r0, #2]
    db90:	f884 0020 	strb.w	r0, [r4, #32]
    db94:	8265      	strh	r5, [r4, #18]
    db96:	2001      	movs	r0, #1
    db98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000db9a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    db9a:	b510      	push	{r4, lr}
    db9c:	4604      	mov	r4, r0
    db9e:	88c0      	ldrh	r0, [r0, #6]
    dba0:	88a1      	ldrh	r1, [r4, #4]
    dba2:	4281      	cmp	r1, r0
    dba4:	d007      	beq.n	dbb6 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    dba6:	89a0      	ldrh	r0, [r4, #12]
    dba8:	b928      	cbnz	r0, dbb6 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    dbaa:	8a20      	ldrh	r0, [r4, #16]
    dbac:	b918      	cbnz	r0, dbb6 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    dbae:	88a0      	ldrh	r0, [r4, #4]
    dbb0:	8aa1      	ldrh	r1, [r4, #20]
    dbb2:	4288      	cmp	r0, r1
    dbb4:	d101      	bne.n	dbba <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    dbb6:	2000      	movs	r0, #0
    dbb8:	bd10      	pop	{r4, pc}
    dbba:	1d21      	adds	r1, r4, #4
    dbbc:	4620      	mov	r0, r4
    dbbe:	f7ff fefa 	bl	d9b6 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    dbc2:	2000      	movs	r0, #0
    dbc4:	8220      	strh	r0, [r4, #16]
    dbc6:	2001      	movs	r0, #1
    dbc8:	bd10      	pop	{r4, pc}

0000dbca <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    dbca:	b510      	push	{r4, lr}
    dbcc:	4604      	mov	r4, r0
    dbce:	f100 0224 	add.w	r2, r0, #36	; 0x24
    dbd2:	88c0      	ldrh	r0, [r0, #6]
    dbd4:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    dbd8:	4402      	add	r2, r0
    dbda:	8820      	ldrh	r0, [r4, #0]
    dbdc:	2845      	cmp	r0, #69	; 0x45
    dbde:	d200      	bcs.n	dbe2 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    dbe0:	2045      	movs	r0, #69	; 0x45
    dbe2:	4288      	cmp	r0, r1
    dbe4:	d204      	bcs.n	dbf0 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    dbe6:	f240 1119 	movw	r1, #281	; 0x119
    dbea:	2014      	movs	r0, #20
    dbec:	f7f7 fa1e 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbf0:	7de0      	ldrb	r0, [r4, #23]
    dbf2:	2800      	cmp	r0, #0
    dbf4:	d003      	beq.n	dbfe <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    dbf6:	8810      	ldrh	r0, [r2, #0]
    dbf8:	4288      	cmp	r0, r1
    dbfa:	d201      	bcs.n	dc00 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    dbfc:	2000      	movs	r0, #0
    dbfe:	bd10      	pop	{r4, pc}
    dc00:	8011      	strh	r1, [r2, #0]
    dc02:	1da1      	adds	r1, r4, #6
    dc04:	4620      	mov	r0, r4
    dc06:	f7ff fed6 	bl	d9b6 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    dc0a:	2000      	movs	r0, #0
    dc0c:	75e0      	strb	r0, [r4, #23]
    dc0e:	2001      	movs	r0, #1
    dc10:	bd10      	pop	{r4, pc}

0000dc12 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    dc12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc16:	8941      	ldrh	r1, [r0, #10]
    dc18:	8886      	ldrh	r6, [r0, #4]
    dc1a:	4604      	mov	r4, r0
    dc1c:	2500      	movs	r5, #0
    dc1e:	f100 070a 	add.w	r7, r0, #10
    dc22:	e006      	b.n	dc32 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    dc24:	4639      	mov	r1, r7
    dc26:	4620      	mov	r0, r4
    dc28:	f7ff fec5 	bl	d9b6 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    dc2c:	1c6d      	adds	r5, r5, #1
    dc2e:	8961      	ldrh	r1, [r4, #10]
    dc30:	b2ad      	uxth	r5, r5
    dc32:	42b1      	cmp	r1, r6
    dc34:	d1f6      	bne.n	dc24 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    dc36:	4628      	mov	r0, r5
    dc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000dc3c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    dc3c:	b530      	push	{r4, r5, lr}
    dc3e:	88c4      	ldrh	r4, [r0, #6]
    dc40:	8881      	ldrh	r1, [r0, #4]
    dc42:	f100 0224 	add.w	r2, r0, #36	; 0x24
    dc46:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    dc4a:	4413      	add	r3, r2
    dc4c:	8882      	ldrh	r2, [r0, #4]
    dc4e:	8a85      	ldrh	r5, [r0, #20]
    dc50:	42aa      	cmp	r2, r5
    dc52:	d012      	beq.n	dc7a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    dc54:	42a1      	cmp	r1, r4
    dc56:	d010      	beq.n	dc7a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    dc58:	8981      	ldrh	r1, [r0, #12]
    dc5a:	b971      	cbnz	r1, dc7a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    dc5c:	6982      	ldr	r2, [r0, #24]
    dc5e:	b172      	cbz	r2, dc7e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    dc60:	4610      	mov	r0, r2
    dc62:	f7ff ff0f 	bl	da84 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    dc66:	b950      	cbnz	r0, dc7e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    dc68:	8910      	ldrh	r0, [r2, #8]
    dc6a:	3224      	adds	r2, #36	; 0x24
    dc6c:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    dc70:	4410      	add	r0, r2
    dc72:	7899      	ldrb	r1, [r3, #2]
    dc74:	7880      	ldrb	r0, [r0, #2]
    dc76:	4288      	cmp	r0, r1
    dc78:	d101      	bne.n	dc7e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    dc7a:	2000      	movs	r0, #0
    dc7c:	bd30      	pop	{r4, r5, pc}
    dc7e:	4618      	mov	r0, r3
    dc80:	bd30      	pop	{r4, r5, pc}

0000dc82 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    dc82:	7f00      	ldrb	r0, [r0, #28]
    dc84:	1d80      	adds	r0, r0, #6
    dc86:	4408      	add	r0, r1
    dc88:	1ec0      	subs	r0, r0, #3
    dc8a:	6010      	str	r0, [r2, #0]
    dc8c:	8808      	ldrh	r0, [r1, #0]
    dc8e:	4770      	bx	lr

0000dc90 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    dc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc94:	460e      	mov	r6, r1
    dc96:	88c1      	ldrh	r1, [r0, #6]
    dc98:	8902      	ldrh	r2, [r0, #8]
    dc9a:	4604      	mov	r4, r0
    dc9c:	f100 0824 	add.w	r8, r0, #36	; 0x24
    dca0:	8800      	ldrh	r0, [r0, #0]
    dca2:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    dca6:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    dcaa:	2845      	cmp	r0, #69	; 0x45
    dcac:	d200      	bcs.n	dcb0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    dcae:	2045      	movs	r0, #69	; 0x45
    dcb0:	42b0      	cmp	r0, r6
    dcb2:	d203      	bcs.n	dcbc <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    dcb4:	21db      	movs	r1, #219	; 0xdb
    dcb6:	2014      	movs	r0, #20
    dcb8:	f7f7 f9b8 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dcbc:	4610      	mov	r0, r2
    dcbe:	f7ff fe9b 	bl	d9f8 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    dcc2:	b110      	cbz	r0, dcca <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    dcc4:	2000      	movs	r0, #0
    dcc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dcca:	42af      	cmp	r7, r5
    dccc:	d908      	bls.n	dce0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    dcce:	7f21      	ldrb	r1, [r4, #28]
    dcd0:	1b78      	subs	r0, r7, r5
    dcd2:	1a40      	subs	r0, r0, r1
    dcd4:	1f80      	subs	r0, r0, #6
    dcd6:	4286      	cmp	r6, r0
    dcd8:	dd02      	ble.n	dce0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    dcda:	2000      	movs	r0, #0
    dcdc:	75e0      	strb	r0, [r4, #23]
    dcde:	e7f1      	b.n	dcc4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    dce0:	eb08 0005 	add.w	r0, r8, r5
    dce4:	2101      	movs	r1, #1
    dce6:	8006      	strh	r6, [r0, #0]
    dce8:	75e1      	strb	r1, [r4, #23]
    dcea:	e7ec      	b.n	dcc6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000dcec <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    dcec:	b538      	push	{r3, r4, r5, lr}
    dcee:	88c4      	ldrh	r4, [r0, #6]
    dcf0:	8881      	ldrh	r1, [r0, #4]
    dcf2:	f100 0224 	add.w	r2, r0, #36	; 0x24
    dcf6:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    dcfa:	441a      	add	r2, r3
    dcfc:	42a1      	cmp	r1, r4
    dcfe:	d010      	beq.n	dd22 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    dd00:	8983      	ldrh	r3, [r0, #12]
    dd02:	8a05      	ldrh	r5, [r0, #16]
    dd04:	8812      	ldrh	r2, [r2, #0]
    dd06:	442b      	add	r3, r5
    dd08:	4293      	cmp	r3, r2
    dd0a:	d308      	bcc.n	dd1e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    dd0c:	f8ad 1000 	strh.w	r1, [sp]
    dd10:	4669      	mov	r1, sp
    dd12:	f7ff fe50 	bl	d9b6 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    dd16:	f8bd 0000 	ldrh.w	r0, [sp]
    dd1a:	42a0      	cmp	r0, r4
    dd1c:	d001      	beq.n	dd22 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    dd1e:	2001      	movs	r0, #1
    dd20:	bd38      	pop	{r3, r4, r5, pc}
    dd22:	2000      	movs	r0, #0
    dd24:	bd38      	pop	{r3, r4, r5, pc}

0000dd26 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    dd26:	b570      	push	{r4, r5, r6, lr}
    dd28:	88c6      	ldrh	r6, [r0, #6]
    dd2a:	8885      	ldrh	r5, [r0, #4]
    dd2c:	4603      	mov	r3, r0
    dd2e:	f100 0424 	add.w	r4, r0, #36	; 0x24
    dd32:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    dd36:	4420      	add	r0, r4
    dd38:	42b5      	cmp	r5, r6
    dd3a:	d102      	bne.n	dd42 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    dd3c:	2000      	movs	r0, #0
    dd3e:	8218      	strh	r0, [r3, #16]
    dd40:	bd70      	pop	{r4, r5, r6, pc}
    dd42:	8804      	ldrh	r4, [r0, #0]
    dd44:	899d      	ldrh	r5, [r3, #12]
    dd46:	7f1e      	ldrb	r6, [r3, #28]
    dd48:	1b64      	subs	r4, r4, r5
    dd4a:	4435      	add	r5, r6
    dd4c:	4428      	add	r0, r5
    dd4e:	880d      	ldrh	r5, [r1, #0]
    dd50:	b2a4      	uxth	r4, r4
    dd52:	1cc0      	adds	r0, r0, #3
    dd54:	42a5      	cmp	r5, r4
    dd56:	d900      	bls.n	dd5a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    dd58:	800c      	strh	r4, [r1, #0]
    dd5a:	899c      	ldrh	r4, [r3, #12]
    dd5c:	b124      	cbz	r4, dd68 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    dd5e:	2400      	movs	r4, #0
    dd60:	7014      	strb	r4, [r2, #0]
    dd62:	8809      	ldrh	r1, [r1, #0]
    dd64:	8219      	strh	r1, [r3, #16]
    dd66:	bd70      	pop	{r4, r5, r6, pc}
    dd68:	2401      	movs	r4, #1
    dd6a:	e7f9      	b.n	dd60 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000dd6c <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    dd6c:	b508      	push	{r3, lr}
    dd6e:	8a81      	ldrh	r1, [r0, #20]
    dd70:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    dd74:	3aff      	subs	r2, #255	; 0xff
    dd76:	d008      	beq.n	dd8a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    dd78:	7d82      	ldrb	r2, [r0, #22]
    dd7a:	f88d 2000 	strb.w	r2, [sp]
    dd7e:	9a00      	ldr	r2, [sp, #0]
    dd80:	9200      	str	r2, [sp, #0]
    dd82:	f89d 2000 	ldrb.w	r2, [sp]
    dd86:	b952      	cbnz	r2, dd9e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    dd88:	e004      	b.n	dd94 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    dd8a:	f240 318d 	movw	r1, #909	; 0x38d
    dd8e:	2014      	movs	r0, #20
    dd90:	f7f7 f94c 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd94:	8880      	ldrh	r0, [r0, #4]
    dd96:	4281      	cmp	r1, r0
    dd98:	d101      	bne.n	dd9e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    dd9a:	2000      	movs	r0, #0
    dd9c:	bd08      	pop	{r3, pc}
    dd9e:	2001      	movs	r0, #1
    dda0:	bd08      	pop	{r3, pc}

0000dda2 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    dda2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dda6:	8281      	strh	r1, [r0, #20]
    dda8:	2100      	movs	r1, #0
    ddaa:	7581      	strb	r1, [r0, #22]
    ddac:	4770      	bx	lr

0000ddae <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    ddae:	b510      	push	{r4, lr}
    ddb0:	8a81      	ldrh	r1, [r0, #20]
    ddb2:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    ddb6:	3aff      	subs	r2, #255	; 0xff
    ddb8:	d004      	beq.n	ddc4 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    ddba:	f240 3169 	movw	r1, #873	; 0x369
    ddbe:	2014      	movs	r0, #20
    ddc0:	f7f7 f934 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ddc4:	88c1      	ldrh	r1, [r0, #6]
    ddc6:	8281      	strh	r1, [r0, #20]
    ddc8:	89c1      	ldrh	r1, [r0, #14]
    ddca:	b109      	cbz	r1, ddd0 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    ddcc:	21ff      	movs	r1, #255	; 0xff
    ddce:	e000      	b.n	ddd2 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    ddd0:	2100      	movs	r1, #0
    ddd2:	7581      	strb	r1, [r0, #22]
    ddd4:	bd10      	pop	{r4, pc}

0000ddd6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    ddd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ddda:	461d      	mov	r5, r3
    dddc:	4616      	mov	r6, r2
    ddde:	9f06      	ldr	r7, [sp, #24]
    dde0:	460b      	mov	r3, r1
    dde2:	4604      	mov	r4, r0
    dde4:	463a      	mov	r2, r7
    dde6:	4629      	mov	r1, r5
    dde8:	4630      	mov	r0, r6
    ddea:	f000 f84f 	bl	de8c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    ddee:	4283      	cmp	r3, r0
    ddf0:	d201      	bcs.n	ddf6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    ddf2:	21a8      	movs	r1, #168	; 0xa8
    ddf4:	e018      	b.n	de28 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    ddf6:	1ce0      	adds	r0, r4, #3
    ddf8:	f020 0103 	bic.w	r1, r0, #3
    ddfc:	4620      	mov	r0, r4
    ddfe:	42a1      	cmp	r1, r4
    de00:	d001      	beq.n	de06 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    de02:	21a9      	movs	r1, #169	; 0xa9
    de04:	e010      	b.n	de28 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    de06:	2224      	movs	r2, #36	; 0x24
    de08:	2100      	movs	r1, #0
    de0a:	f7ff f93e 	bl	d08a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    de0e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    de12:	82a0      	strh	r0, [r4, #20]
    de14:	19a8      	adds	r0, r5, r6
    de16:	1d80      	adds	r0, r0, #6
    de18:	4378      	muls	r0, r7
    de1a:	b280      	uxth	r0, r0
    de1c:	7725      	strb	r5, [r4, #28]
    de1e:	8060      	strh	r0, [r4, #2]
    de20:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    de24:	d903      	bls.n	de2e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    de26:	21af      	movs	r1, #175	; 0xaf
    de28:	2014      	movs	r0, #20
    de2a:	f7f7 f8ff 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de2e:	8026      	strh	r6, [r4, #0]
    de30:	2000      	movs	r0, #0
    de32:	7760      	strb	r0, [r4, #29]
    de34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000de38 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    de38:	6181      	str	r1, [r0, #24]
    de3a:	6188      	str	r0, [r1, #24]
    de3c:	4770      	bx	lr

0000de3e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    de3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de42:	460b      	mov	r3, r1
    de44:	4604      	mov	r4, r0
    de46:	f100 0124 	add.w	r1, r0, #36	; 0x24
    de4a:	8905      	ldrh	r5, [r0, #8]
    de4c:	8946      	ldrh	r6, [r0, #10]
    de4e:	8880      	ldrh	r0, [r0, #4]
    de50:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    de54:	4439      	add	r1, r7
    de56:	460f      	mov	r7, r1
    de58:	4285      	cmp	r5, r0
    de5a:	d102      	bne.n	de62 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    de5c:	2000      	movs	r0, #0
    de5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    de62:	b10a      	cbz	r2, de68 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    de64:	1cc8      	adds	r0, r1, #3
    de66:	6010      	str	r0, [r2, #0]
    de68:	b123      	cbz	r3, de74 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    de6a:	7f22      	ldrb	r2, [r4, #28]
    de6c:	1cf9      	adds	r1, r7, #3
    de6e:	4618      	mov	r0, r3
    de70:	f7ff f891 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    de74:	883f      	ldrh	r7, [r7, #0]
    de76:	f104 0108 	add.w	r1, r4, #8
    de7a:	4620      	mov	r0, r4
    de7c:	f7ff fd9b 	bl	d9b6 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    de80:	42b5      	cmp	r5, r6
    de82:	d101      	bne.n	de88 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    de84:	8920      	ldrh	r0, [r4, #8]
    de86:	8160      	strh	r0, [r4, #10]
    de88:	4638      	mov	r0, r7
    de8a:	e7e8      	b.n	de5e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000de8c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    de8c:	4401      	add	r1, r0
    de8e:	1d89      	adds	r1, r1, #6
    de90:	4351      	muls	r1, r2
    de92:	b28a      	uxth	r2, r1
    de94:	2100      	movs	r1, #0
    de96:	2845      	cmp	r0, #69	; 0x45
    de98:	d201      	bcs.n	de9e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    de9a:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    de9e:	3224      	adds	r2, #36	; 0x24
    dea0:	1850      	adds	r0, r2, r1
    dea2:	b280      	uxth	r0, r0
    dea4:	4770      	bx	lr

0000dea6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    dea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    deaa:	4688      	mov	r8, r1
    deac:	88c1      	ldrh	r1, [r0, #6]
    deae:	4604      	mov	r4, r0
    deb0:	8900      	ldrh	r0, [r0, #8]
    deb2:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    deb6:	f104 0524 	add.w	r5, r4, #36	; 0x24
    deba:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    debe:	eb05 0906 	add.w	r9, r5, r6
    dec2:	f7ff fd99 	bl	d9f8 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    dec6:	2200      	movs	r2, #0
    dec8:	b998      	cbnz	r0, def2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    deca:	8820      	ldrh	r0, [r4, #0]
    decc:	2845      	cmp	r0, #69	; 0x45
    dece:	d200      	bcs.n	ded2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    ded0:	2045      	movs	r0, #69	; 0x45
    ded2:	42b7      	cmp	r7, r6
    ded4:	d906      	bls.n	dee4 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    ded6:	7f23      	ldrb	r3, [r4, #28]
    ded8:	1bb9      	subs	r1, r7, r6
    deda:	1ac9      	subs	r1, r1, r3
    dedc:	1f89      	subs	r1, r1, #6
    dede:	4281      	cmp	r1, r0
    dee0:	da00      	bge.n	dee4 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    dee2:	4608      	mov	r0, r1
    dee4:	89e1      	ldrh	r1, [r4, #14]
    dee6:	b111      	cbz	r1, deee <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    dee8:	f8b9 3000 	ldrh.w	r3, [r9]
    deec:	1ac0      	subs	r0, r0, r3
    deee:	4540      	cmp	r0, r8
    def0:	da03      	bge.n	defa <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    def2:	8262      	strh	r2, [r4, #18]
    def4:	2000      	movs	r0, #0
    def6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    defa:	7f20      	ldrb	r0, [r4, #28]
    defc:	4429      	add	r1, r5
    defe:	1d80      	adds	r0, r0, #6
    df00:	4430      	add	r0, r6
    df02:	4408      	add	r0, r1
    df04:	f8a4 8012 	strh.w	r8, [r4, #18]
    df08:	1ec0      	subs	r0, r0, #3
    df0a:	e7f4      	b.n	def6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000df0c <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    df0c:	2100      	movs	r1, #0
    df0e:	81c1      	strh	r1, [r0, #14]
    df10:	8241      	strh	r1, [r0, #18]
    df12:	7581      	strb	r1, [r0, #22]
    df14:	4770      	bx	lr

0000df16 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    df16:	b570      	push	{r4, r5, r6, lr}
    df18:	2300      	movs	r3, #0
    df1a:	2908      	cmp	r1, #8
    df1c:	d204      	bcs.n	df28 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    df1e:	f240 11cb 	movw	r1, #459	; 0x1cb
    df22:	2015      	movs	r0, #21
    df24:	f7f7 f882 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df28:	6802      	ldr	r2, [r0, #0]
    df2a:	b90a      	cbnz	r2, df30 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    df2c:	e01e      	b.n	df6c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    df2e:	4610      	mov	r0, r2
    df30:	6802      	ldr	r2, [r0, #0]
    df32:	8893      	ldrh	r3, [r2, #4]
    df34:	428b      	cmp	r3, r1
    df36:	d002      	beq.n	df3e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    df38:	6813      	ldr	r3, [r2, #0]
    df3a:	2b00      	cmp	r3, #0
    df3c:	d1f7      	bne.n	df2e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    df3e:	8894      	ldrh	r4, [r2, #4]
    df40:	4613      	mov	r3, r2
    df42:	428c      	cmp	r4, r1
    df44:	d101      	bne.n	df4a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    df46:	6811      	ldr	r1, [r2, #0]
    df48:	e00d      	b.n	df66 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    df4a:	f101 0508 	add.w	r5, r1, #8
    df4e:	b2ae      	uxth	r6, r5
    df50:	2500      	movs	r5, #0
    df52:	42b4      	cmp	r4, r6
    df54:	d309      	bcc.n	df6a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    df56:	1a64      	subs	r4, r4, r1
    df58:	4411      	add	r1, r2
    df5a:	600d      	str	r5, [r1, #0]
    df5c:	808c      	strh	r4, [r1, #4]
    df5e:	6802      	ldr	r2, [r0, #0]
    df60:	6812      	ldr	r2, [r2, #0]
    df62:	6002      	str	r2, [r0, #0]
    df64:	600a      	str	r2, [r1, #0]
    df66:	6001      	str	r1, [r0, #0]
    df68:	e000      	b.n	df6c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    df6a:	2300      	movs	r3, #0
    df6c:	4618      	mov	r0, r3
    df6e:	bd70      	pop	{r4, r5, r6, pc}

0000df70 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    df70:	b510      	push	{r4, lr}
    df72:	000c      	movs	r4, r1
    df74:	d006      	beq.n	df84 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    df76:	2c08      	cmp	r4, #8
    df78:	d209      	bcs.n	df8e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    df7a:	f240 1195 	movw	r1, #405	; 0x195
    df7e:	2015      	movs	r0, #21
    df80:	f7f7 f854 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df84:	b108      	cbz	r0, df8a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    df86:	2100      	movs	r1, #0
    df88:	6001      	str	r1, [r0, #0]
    df8a:	2000      	movs	r0, #0
    df8c:	bd10      	pop	{r4, pc}
    df8e:	b118      	cbz	r0, df98 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    df90:	b2a1      	uxth	r1, r4
    df92:	6800      	ldr	r0, [r0, #0]
    df94:	f000 f814 	bl	dfc0 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    df98:	1d20      	adds	r0, r4, #4
    df9a:	bd10      	pop	{r4, pc}

0000df9c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    df9c:	2100      	movs	r1, #0
    df9e:	6802      	ldr	r2, [r0, #0]
    dfa0:	e003      	b.n	dfaa <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    dfa2:	8893      	ldrh	r3, [r2, #4]
    dfa4:	6812      	ldr	r2, [r2, #0]
    dfa6:	4419      	add	r1, r3
    dfa8:	b289      	uxth	r1, r1
    dfaa:	2a00      	cmp	r2, #0
    dfac:	d1f9      	bne.n	dfa2 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    dfae:	f000 b807 	b.w	dfc0 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000dfb2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    dfb2:	2300      	movs	r3, #0
    dfb4:	600b      	str	r3, [r1, #0]
    dfb6:	808a      	strh	r2, [r1, #4]
    dfb8:	6802      	ldr	r2, [r0, #0]
    dfba:	600a      	str	r2, [r1, #0]
    dfbc:	6001      	str	r1, [r0, #0]
    dfbe:	4770      	bx	lr
    dfc0:	2300      	movs	r3, #0
    dfc2:	6043      	str	r3, [r0, #4]
    dfc4:	1d02      	adds	r2, r0, #4
    dfc6:	8101      	strh	r1, [r0, #8]
    dfc8:	6002      	str	r2, [r0, #0]
    dfca:	4770      	bx	lr

0000dfcc <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    dfcc:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    dfd0:	3bff      	subs	r3, #255	; 0xff
    dfd2:	d001      	beq.n	dfd8 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    dfd4:	2902      	cmp	r1, #2
    dfd6:	d301      	bcc.n	dfdc <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    dfd8:	2000      	movs	r0, #0
    dfda:	4770      	bx	lr
    dfdc:	f7f7 bae0 	b.w	55a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000dfe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    dfe0:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    dfe4:	3aff      	subs	r2, #255	; 0xff
    dfe6:	d001      	beq.n	dfec <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    dfe8:	2902      	cmp	r1, #2
    dfea:	d301      	bcc.n	dff0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    dfec:	2000      	movs	r0, #0
    dfee:	4770      	bx	lr
    dff0:	f7f7 bb10 	b.w	5614 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000dff4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    dff4:	b570      	push	{r4, r5, r6, lr}
    dff6:	4605      	mov	r5, r0
    dff8:	460c      	mov	r4, r1
    dffa:	4608      	mov	r0, r1
    dffc:	f000 f9a6 	bl	e34c <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    e000:	b108      	cbz	r0, e006 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    e002:	2010      	movs	r0, #16
    e004:	bd70      	pop	{r4, r5, r6, pc}
    e006:	2d02      	cmp	r5, #2
    e008:	d301      	bcc.n	e00e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    e00a:	2007      	movs	r0, #7
    e00c:	bd70      	pop	{r4, r5, r6, pc}
    e00e:	7025      	strb	r5, [r4, #0]
    e010:	2000      	movs	r0, #0
    e012:	8060      	strh	r0, [r4, #2]
    e014:	bd70      	pop	{r4, r5, r6, pc}
    e016:	b510      	push	{r4, lr}
    e018:	4604      	mov	r4, r0
    e01a:	f7f7 fb47 	bl	56ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    e01e:	42a0      	cmp	r0, r4
    e020:	d901      	bls.n	e026 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    e022:	2001      	movs	r0, #1
    e024:	bd10      	pop	{r4, pc}
    e026:	2000      	movs	r0, #0
    e028:	bd10      	pop	{r4, pc}
    e02a:	4770      	bx	lr

0000e02c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    e02c:	b570      	push	{r4, r5, r6, lr}
    e02e:	460e      	mov	r6, r1
    e030:	461d      	mov	r5, r3
    e032:	4611      	mov	r1, r2
    e034:	f000 f811 	bl	e05a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    e038:	4604      	mov	r4, r0
    e03a:	4629      	mov	r1, r5
    e03c:	4630      	mov	r0, r6
    e03e:	f000 f803 	bl	e048 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    e042:	4420      	add	r0, r4
    e044:	1d00      	adds	r0, r0, #4
    e046:	bd70      	pop	{r4, r5, r6, pc}
    e048:	b510      	push	{r4, lr}
    e04a:	460a      	mov	r2, r1
    e04c:	2101      	movs	r1, #1
    e04e:	f7ff ff1d 	bl	de8c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e052:	1cc0      	adds	r0, r0, #3
    e054:	f020 0003 	bic.w	r0, r0, #3
    e058:	bd10      	pop	{r4, pc}
    e05a:	b510      	push	{r4, lr}
    e05c:	460a      	mov	r2, r1
    e05e:	2101      	movs	r1, #1
    e060:	f7ff ff14 	bl	de8c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e064:	1cc0      	adds	r0, r0, #3
    e066:	f020 0003 	bic.w	r0, r0, #3
    e06a:	bd10      	pop	{r4, pc}
    e06c:	b109      	cbz	r1, e072 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    e06e:	2100      	movs	r1, #0
    e070:	e000      	b.n	e074 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x48>
    e072:	2102      	movs	r1, #2
    e074:	1843      	adds	r3, r0, r1
    e076:	7d1a      	ldrb	r2, [r3, #20]
    e078:	2a02      	cmp	r2, #2
    e07a:	d008      	beq.n	e08e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    e07c:	7d5b      	ldrb	r3, [r3, #21]
    e07e:	2b02      	cmp	r3, #2
    e080:	d009      	beq.n	e096 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    e082:	2a03      	cmp	r2, #3
    e084:	d003      	beq.n	e08e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    e086:	2b03      	cmp	r3, #3
    e088:	d005      	beq.n	e096 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    e08a:	2000      	movs	r0, #0
    e08c:	4770      	bx	lr
    e08e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e092:	8b00      	ldrh	r0, [r0, #24]
    e094:	4770      	bx	lr
    e096:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e09a:	8b40      	ldrh	r0, [r0, #26]
    e09c:	4770      	bx	lr
    e09e:	b109      	cbz	r1, e0a4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    e0a0:	2100      	movs	r1, #0
    e0a2:	e000      	b.n	e0a6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
    e0a4:	2102      	movs	r1, #2
    e0a6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e0aa:	8b01      	ldrh	r1, [r0, #24]
    e0ac:	b911      	cbnz	r1, e0b4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x88>
    e0ae:	8b40      	ldrh	r0, [r0, #26]
    e0b0:	2800      	cmp	r0, #0
    e0b2:	d000      	beq.n	e0b6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8a>
    e0b4:	2001      	movs	r0, #1
    e0b6:	4770      	bx	lr
    e0b8:	b538      	push	{r3, r4, r5, lr}
    e0ba:	7883      	ldrb	r3, [r0, #2]
    e0bc:	f88d 3000 	strb.w	r3, [sp]
    e0c0:	9b00      	ldr	r3, [sp, #0]
    e0c2:	9300      	str	r3, [sp, #0]
    e0c4:	f89d 3000 	ldrb.w	r3, [sp]
    e0c8:	b95b      	cbnz	r3, e0e2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb6>
    e0ca:	2400      	movs	r4, #0
    e0cc:	b10a      	cbz	r2, e0d2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa6>
    e0ce:	2300      	movs	r3, #0
    e0d0:	e000      	b.n	e0d4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa8>
    e0d2:	2302      	movs	r3, #2
    e0d4:	18c2      	adds	r2, r0, r3
    e0d6:	7d15      	ldrb	r5, [r2, #20]
    e0d8:	2d02      	cmp	r5, #2
    e0da:	d004      	beq.n	e0e6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    e0dc:	7d52      	ldrb	r2, [r2, #21]
    e0de:	2a02      	cmp	r2, #2
    e0e0:	d004      	beq.n	e0ec <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    e0e2:	2000      	movs	r0, #0
    e0e4:	bd38      	pop	{r3, r4, r5, pc}
    e0e6:	461a      	mov	r2, r3
    e0e8:	1c5b      	adds	r3, r3, #1
    e0ea:	e000      	b.n	e0ee <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc2>
    e0ec:	1c5a      	adds	r2, r3, #1
    e0ee:	b179      	cbz	r1, e110 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe4>
    e0f0:	18c5      	adds	r5, r0, r3
    e0f2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e0f6:	752c      	strb	r4, [r5, #20]
    e0f8:	831c      	strh	r4, [r3, #24]
    e0fa:	2303      	movs	r3, #3
    e0fc:	1884      	adds	r4, r0, r2
    e0fe:	7523      	strb	r3, [r4, #20]
    e100:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    e104:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    e108:	685b      	ldr	r3, [r3, #4]
    e10a:	600b      	str	r3, [r1, #0]
    e10c:	8b00      	ldrh	r0, [r0, #24]
    e10e:	8088      	strh	r0, [r1, #4]
    e110:	2001      	movs	r0, #1
    e112:	bd38      	pop	{r3, r4, r5, pc}
    e114:	b510      	push	{r4, lr}
    e116:	b109      	cbz	r1, e11c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf0>
    e118:	2100      	movs	r1, #0
    e11a:	e000      	b.n	e11e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf2>
    e11c:	2102      	movs	r1, #2
    e11e:	1843      	adds	r3, r0, r1
    e120:	7d1c      	ldrb	r4, [r3, #20]
    e122:	4294      	cmp	r4, r2
    e124:	d103      	bne.n	e12e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>
    e126:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e12a:	8b00      	ldrh	r0, [r0, #24]
    e12c:	bd10      	pop	{r4, pc}
    e12e:	7d5b      	ldrb	r3, [r3, #21]
    e130:	4293      	cmp	r3, r2
    e132:	d103      	bne.n	e13c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x110>
    e134:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e138:	8b40      	ldrh	r0, [r0, #26]
    e13a:	bd10      	pop	{r4, pc}
    e13c:	2000      	movs	r0, #0
    e13e:	bd10      	pop	{r4, pc}
    e140:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    e144:	d201      	bcs.n	e14a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11e>
    e146:	0841      	lsrs	r1, r0, #1
    e148:	e000      	b.n	e14c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x120>
    e14a:	21ff      	movs	r1, #255	; 0xff
    e14c:	1a40      	subs	r0, r0, r1
    e14e:	f240 6172 	movw	r1, #1650	; 0x672
    e152:	4288      	cmp	r0, r1
    e154:	db00      	blt.n	e158 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x12c>
    e156:	4608      	mov	r0, r1
    e158:	b280      	uxth	r0, r0
    e15a:	4770      	bx	lr

0000e15c <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    e15c:	2101      	movs	r1, #1
    e15e:	f7ff bf85 	b.w	e06c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>

0000e162 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    e162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e166:	4606      	mov	r6, r0
    e168:	f342 0780 	sbfx	r7, r2, #2, #1
    e16c:	7848      	ldrb	r0, [r1, #1]
    e16e:	460c      	mov	r4, r1
    e170:	f022 0504 	bic.w	r5, r2, #4
    e174:	1c7f      	adds	r7, r7, #1
    e176:	b100      	cbz	r0, e17a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    e178:	b90d      	cbnz	r5, e17e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    e17a:	4328      	orrs	r0, r5
    e17c:	d104      	bne.n	e188 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    e17e:	b145      	cbz	r5, e192 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    e180:	2100      	movs	r1, #0
    e182:	4620      	mov	r0, r4
    e184:	f7f7 fb9a 	bl	58bc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    e188:	20ff      	movs	r0, #255	; 0xff
    e18a:	70a0      	strb	r0, [r4, #2]
    e18c:	b11f      	cbz	r7, e196 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    e18e:	2000      	movs	r0, #0
    e190:	e002      	b.n	e198 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    e192:	2101      	movs	r1, #1
    e194:	e7f5      	b.n	e182 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    e196:	2002      	movs	r0, #2
    e198:	1821      	adds	r1, r4, r0
    e19a:	7d09      	ldrb	r1, [r1, #20]
    e19c:	2903      	cmp	r1, #3
    e19e:	d102      	bne.n	e1a6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    e1a0:	2d02      	cmp	r5, #2
    e1a2:	d000      	beq.n	e1a6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    e1a4:	1c40      	adds	r0, r0, #1
    e1a6:	1822      	adds	r2, r4, r0
    e1a8:	2101      	movs	r1, #1
    e1aa:	7511      	strb	r1, [r2, #20]
    e1ac:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    e1b0:	2200      	movs	r2, #0
    e1b2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    e1b6:	830a      	strh	r2, [r1, #24]
    e1b8:	6840      	ldr	r0, [r0, #4]
    e1ba:	70a2      	strb	r2, [r4, #2]
    e1bc:	4631      	mov	r1, r6
    e1be:	f362 010f 	bfi	r1, r2, #0, #16
    e1c2:	e9c6 0100 	strd	r0, r1, [r6]
    e1c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e1ca <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    e1ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e1ce:	461e      	mov	r6, r3
    e1d0:	4613      	mov	r3, r2
    e1d2:	4604      	mov	r4, r0
    e1d4:	b109      	cbz	r1, e1da <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    e1d6:	2000      	movs	r0, #0
    e1d8:	e000      	b.n	e1dc <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    e1da:	2002      	movs	r0, #2
    e1dc:	21ff      	movs	r1, #255	; 0xff
    e1de:	70a1      	strb	r1, [r4, #2]
    e1e0:	1821      	adds	r1, r4, r0
    e1e2:	7d0a      	ldrb	r2, [r1, #20]
    e1e4:	2a01      	cmp	r2, #1
    e1e6:	d003      	beq.n	e1f0 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    e1e8:	7d49      	ldrb	r1, [r1, #21]
    e1ea:	2901      	cmp	r1, #1
    e1ec:	d10c      	bne.n	e208 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    e1ee:	1c40      	adds	r0, r0, #1
    e1f0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    e1f4:	2700      	movs	r7, #0
    e1f6:	8b29      	ldrh	r1, [r5, #24]
    e1f8:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    e1fc:	198a      	adds	r2, r1, r6
    e1fe:	4562      	cmp	r2, ip
    e200:	d905      	bls.n	e20e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    e202:	4420      	add	r0, r4
    e204:	832f      	strh	r7, [r5, #24]
    e206:	7507      	strb	r7, [r0, #20]
    e208:	2000      	movs	r0, #0
    e20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e20e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    e212:	4632      	mov	r2, r6
    e214:	6840      	ldr	r0, [r0, #4]
    e216:	4408      	add	r0, r1
    e218:	4619      	mov	r1, r3
    e21a:	f7fe febc 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e21e:	8b28      	ldrh	r0, [r5, #24]
    e220:	4430      	add	r0, r6
    e222:	8328      	strh	r0, [r5, #24]
    e224:	70a7      	strb	r7, [r4, #2]
    e226:	2001      	movs	r0, #1
    e228:	e7ef      	b.n	e20a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000e22a <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    e22a:	2202      	movs	r2, #2
    e22c:	2100      	movs	r1, #0
    e22e:	f7ff bf71 	b.w	e114 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000e232 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    e232:	b510      	push	{r4, lr}
    e234:	2101      	movs	r1, #1
    e236:	f7ff ff32 	bl	e09e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x72>
    e23a:	2800      	cmp	r0, #0
    e23c:	d000      	beq.n	e240 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    e23e:	2001      	movs	r0, #1
    e240:	bd10      	pop	{r4, pc}

0000e242 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    e242:	2201      	movs	r2, #1
    e244:	f7ff bf38 	b.w	e0b8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000e248 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    e248:	2200      	movs	r2, #0
    e24a:	f7ff bf35 	b.w	e0b8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000e24e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    e24e:	b570      	push	{r4, r5, r6, lr}
    e250:	b109      	cbz	r1, e256 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    e252:	2300      	movs	r3, #0
    e254:	e000      	b.n	e258 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    e256:	2302      	movs	r3, #2
    e258:	21ff      	movs	r1, #255	; 0xff
    e25a:	7081      	strb	r1, [r0, #2]
    e25c:	18c1      	adds	r1, r0, r3
    e25e:	2402      	movs	r4, #2
    e260:	7d0d      	ldrb	r5, [r1, #20]
    e262:	2d01      	cmp	r5, #1
    e264:	d007      	beq.n	e276 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    e266:	7d4d      	ldrb	r5, [r1, #21]
    e268:	2d01      	cmp	r5, #1
    e26a:	d009      	beq.n	e280 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    e26c:	f44f 718b 	mov.w	r1, #278	; 0x116
    e270:	2009      	movs	r0, #9
    e272:	f7f6 fedb 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e276:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e27a:	831a      	strh	r2, [r3, #24]
    e27c:	750c      	strb	r4, [r1, #20]
    e27e:	e003      	b.n	e288 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    e280:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e284:	835a      	strh	r2, [r3, #26]
    e286:	754c      	strb	r4, [r1, #21]
    e288:	2100      	movs	r1, #0
    e28a:	7081      	strb	r1, [r0, #2]
    e28c:	bd70      	pop	{r4, r5, r6, pc}

0000e28e <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    e28e:	2101      	movs	r1, #1
    e290:	7001      	strb	r1, [r0, #0]
    e292:	4770      	bx	lr

0000e294 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    e294:	2201      	movs	r2, #1
    e296:	4611      	mov	r1, r2
    e298:	f7ff bf3c 	b.w	e114 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000e29c <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    e29c:	2201      	movs	r2, #1
    e29e:	2100      	movs	r1, #0
    e2a0:	f7ff bf38 	b.w	e114 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000e2a4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    e2a4:	2100      	movs	r1, #0
    e2a6:	f7ff bee1 	b.w	e06c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    e2aa:	2800      	cmp	r0, #0
    e2ac:	db09      	blt.n	e2c2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    e2ae:	f000 021f 	and.w	r2, r0, #31
    e2b2:	2101      	movs	r1, #1
    e2b4:	4091      	lsls	r1, r2
    e2b6:	0940      	lsrs	r0, r0, #5
    e2b8:	0080      	lsls	r0, r0, #2
    e2ba:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e2be:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e2c2:	4770      	bx	lr
    e2c4:	2800      	cmp	r0, #0
    e2c6:	db0d      	blt.n	e2e4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    e2c8:	f000 021f 	and.w	r2, r0, #31
    e2cc:	2101      	movs	r1, #1
    e2ce:	4091      	lsls	r1, r2
    e2d0:	0940      	lsrs	r0, r0, #5
    e2d2:	0080      	lsls	r0, r0, #2
    e2d4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e2d8:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    e2dc:	f3bf 8f4f 	dsb	sy
    e2e0:	f3bf 8f6f 	isb	sy
    e2e4:	4770      	bx	lr
    e2e6:	b510      	push	{r4, lr}
    e2e8:	200e      	movs	r0, #14
    e2ea:	f7ff ffeb 	bl	e2c4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    e2ee:	200e      	movs	r0, #14
    e2f0:	f7ff ffdb 	bl	e2aa <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    e2f4:	200f      	movs	r0, #15
    e2f6:	f7ff ffe5 	bl	e2c4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    e2fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e2fe:	200f      	movs	r0, #15
    e300:	f7ff bfd3 	b.w	e2aa <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    e304:	2800      	cmp	r0, #0
    e306:	db09      	blt.n	e31c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    e308:	f000 021f 	and.w	r2, r0, #31
    e30c:	2101      	movs	r1, #1
    e30e:	4091      	lsls	r1, r2
    e310:	0940      	lsrs	r0, r0, #5
    e312:	0080      	lsls	r0, r0, #2
    e314:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e318:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e31c:	4770      	bx	lr
    e31e:	5840      	ldr	r0, [r0, r1]
    e320:	2800      	cmp	r0, #0
    e322:	d000      	beq.n	e326 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    e324:	2001      	movs	r0, #1
    e326:	4770      	bx	lr

0000e328 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    e328:	b510      	push	{r4, lr}
    e32a:	4604      	mov	r4, r0
    e32c:	4620      	mov	r0, r4
    e32e:	f7f7 fbc3 	bl	5ab8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>
    e332:	2811      	cmp	r0, #17
    e334:	d0fa      	beq.n	e32c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    e336:	bd10      	pop	{r4, pc}

0000e338 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    e338:	b510      	push	{r4, lr}
    e33a:	f7ff fff5 	bl	e328 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    e33e:	2800      	cmp	r0, #0
    e340:	d003      	beq.n	e34a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    e342:	21a0      	movs	r1, #160	; 0xa0
    e344:	201d      	movs	r0, #29
    e346:	f7f6 fe71 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e34a:	bd10      	pop	{r4, pc}

0000e34c <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    e34c:	b108      	cbz	r0, e352 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    e34e:	2000      	movs	r0, #0
    e350:	4770      	bx	lr
    e352:	2001      	movs	r0, #1
    e354:	4770      	bx	lr

0000e356 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    e356:	f7f7 bd01 	b.w	5d5c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000e35a <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    e35a:	f7f7 bcef 	b.w	5d3c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000e35e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    e35e:	b510      	push	{r4, lr}
    e360:	4604      	mov	r4, r0
    e362:	4608      	mov	r0, r1
    e364:	4619      	mov	r1, r3
    e366:	4294      	cmp	r4, r2
    e368:	d103      	bne.n	e372 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x14>
    e36a:	2206      	movs	r2, #6
    e36c:	f7fe fe01 	bl	cf72 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    e370:	b108      	cbz	r0, e376 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x18>
    e372:	2000      	movs	r0, #0
    e374:	bd10      	pop	{r4, pc}
    e376:	2001      	movs	r0, #1
    e378:	bd10      	pop	{r4, pc}

0000e37a <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    e37a:	b510      	push	{r4, lr}
    e37c:	2900      	cmp	r1, #0
    e37e:	4604      	mov	r4, r0
    e380:	f04f 0106 	mov.w	r1, #6
    e384:	d002      	beq.n	e38c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    e386:	f7f6 fedd 	bl	5144 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e38a:	e001      	b.n	e390 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    e38c:	f7f6 fee8 	bl	5160 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e390:	7960      	ldrb	r0, [r4, #5]
    e392:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    e396:	7160      	strb	r0, [r4, #5]
    e398:	bd10      	pop	{r4, pc}

0000e39a <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    e39a:	4770      	bx	lr

0000e39c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    e39c:	b530      	push	{r4, r5, lr}
    e39e:	460c      	mov	r4, r1
    e3a0:	4605      	mov	r5, r0
    e3a2:	b08d      	sub	sp, #52	; 0x34
    e3a4:	f04f 0103 	mov.w	r1, #3
    e3a8:	f104 0003 	add.w	r0, r4, #3
    e3ac:	b112      	cbz	r2, e3b4 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    e3ae:	f7f6 fec9 	bl	5144 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e3b2:	e001      	b.n	e3b8 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    e3b4:	f7f6 fed4 	bl	5160 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e3b8:	7960      	ldrb	r0, [r4, #5]
    e3ba:	220d      	movs	r2, #13
    e3bc:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    e3c0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    e3c4:	7160      	strb	r0, [r4, #5]
    e3c6:	2100      	movs	r1, #0
    e3c8:	a804      	add	r0, sp, #16
    e3ca:	f7fe fe5e 	bl	d08a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e3ce:	78e0      	ldrb	r0, [r4, #3]
    e3d0:	f88d 001f 	strb.w	r0, [sp, #31]
    e3d4:	7920      	ldrb	r0, [r4, #4]
    e3d6:	f88d 001e 	strb.w	r0, [sp, #30]
    e3da:	7960      	ldrb	r0, [r4, #5]
    e3dc:	f88d 001d 	strb.w	r0, [sp, #29]
    e3e0:	2210      	movs	r2, #16
    e3e2:	4629      	mov	r1, r5
    e3e4:	4668      	mov	r0, sp
    e3e6:	f7fe fdd6 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e3ea:	4668      	mov	r0, sp
    e3ec:	f7ff ffa4 	bl	e338 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e3f0:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    e3f4:	7020      	strb	r0, [r4, #0]
    e3f6:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    e3fa:	7060      	strb	r0, [r4, #1]
    e3fc:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    e400:	70a0      	strb	r0, [r4, #2]
    e402:	b00d      	add	sp, #52	; 0x34
    e404:	bd30      	pop	{r4, r5, pc}

0000e406 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    e406:	f7f8 b88d 	b.w	6524 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    e40a:	07c1      	lsls	r1, r0, #31
    e40c:	d001      	beq.n	e412 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    e40e:	2001      	movs	r0, #1
    e410:	4770      	bx	lr
    e412:	0780      	lsls	r0, r0, #30
    e414:	d501      	bpl.n	e41a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    e416:	2002      	movs	r0, #2
    e418:	4770      	bx	lr
    e41a:	2000      	movs	r0, #0
    e41c:	4770      	bx	lr
    e41e:	b510      	push	{r4, lr}
    e420:	2801      	cmp	r0, #1
    e422:	d008      	beq.n	e436 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    e424:	2802      	cmp	r0, #2
    e426:	d004      	beq.n	e432 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    e428:	f240 31be 	movw	r1, #958	; 0x3be
    e42c:	2006      	movs	r0, #6
    e42e:	f7f6 fdfd 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e432:	2001      	movs	r0, #1
    e434:	bd10      	pop	{r4, pc}
    e436:	2000      	movs	r0, #0
    e438:	bd10      	pop	{r4, pc}
    e43a:	2900      	cmp	r1, #0
    e43c:	d004      	beq.n	e448 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    e43e:	2801      	cmp	r0, #1
    e440:	d003      	beq.n	e44a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    e442:	2901      	cmp	r1, #1
    e444:	d001      	beq.n	e44a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    e446:	2002      	movs	r0, #2
    e448:	4770      	bx	lr
    e44a:	2001      	movs	r0, #1
    e44c:	4770      	bx	lr
    e44e:	f7ff bc6a 	b.w	dd26 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000e452 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    e452:	2101      	movs	r1, #1
    e454:	f7f8 bbf2 	b.w	6c3c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000e458 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    e458:	b510      	push	{r4, lr}
    e45a:	f002 fc8c 	bl	10d76 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    e45e:	b118      	cbz	r0, e468 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    e460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e464:	f7fd b97a 	b.w	b75c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    e468:	20ff      	movs	r0, #255	; 0xff
    e46a:	bd10      	pop	{r4, pc}

0000e46c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    e46c:	b510      	push	{r4, lr}
    e46e:	f7f8 fc2d 	bl	6ccc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e472:	2810      	cmp	r0, #16
    e474:	d003      	beq.n	e47e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    e476:	f7f8 fbf9 	bl	6c6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    e47a:	2810      	cmp	r0, #16
    e47c:	d100      	bne.n	e480 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    e47e:	2008      	movs	r0, #8
    e480:	bd10      	pop	{r4, pc}

0000e482 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    e482:	b510      	push	{r4, lr}
    e484:	f7f8 fc22 	bl	6ccc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e488:	2810      	cmp	r0, #16
    e48a:	d007      	beq.n	e49c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    e48c:	f7f8 fbee 	bl	6c6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    e490:	2810      	cmp	r0, #16
    e492:	d003      	beq.n	e49c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    e494:	f7f8 fc60 	bl	6d58 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>
    e498:	2001      	movs	r0, #1
    e49a:	bd10      	pop	{r4, pc}
    e49c:	2000      	movs	r0, #0
    e49e:	bd10      	pop	{r4, pc}

0000e4a0 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    e4a0:	b510      	push	{r4, lr}
    e4a2:	f7f8 fc13 	bl	6ccc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e4a6:	2810      	cmp	r0, #16
    e4a8:	d003      	beq.n	e4b2 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    e4aa:	f7f8 fc9d 	bl	6de8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>
    e4ae:	2001      	movs	r0, #1
    e4b0:	bd10      	pop	{r4, pc}
    e4b2:	2000      	movs	r0, #0
    e4b4:	bd10      	pop	{r4, pc}

0000e4b6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    e4b6:	b570      	push	{r4, r5, r6, lr}
    e4b8:	460e      	mov	r6, r1
    e4ba:	b08c      	sub	sp, #48	; 0x30
    e4bc:	4614      	mov	r4, r2
    e4be:	4601      	mov	r1, r0
    e4c0:	461d      	mov	r5, r3
    e4c2:	2210      	movs	r2, #16
    e4c4:	4668      	mov	r0, sp
    e4c6:	f000 f91a 	bl	e6fe <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e4ca:	2210      	movs	r2, #16
    e4cc:	4631      	mov	r1, r6
    e4ce:	a804      	add	r0, sp, #16
    e4d0:	f000 f915 	bl	e6fe <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e4d4:	4668      	mov	r0, sp
    e4d6:	f7ff ff2f 	bl	e338 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e4da:	a908      	add	r1, sp, #32
    e4dc:	f04f 0210 	mov.w	r2, #16
    e4e0:	4628      	mov	r0, r5
    e4e2:	b11c      	cbz	r4, e4ec <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    e4e4:	f000 f90b 	bl	e6fe <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e4e8:	b00c      	add	sp, #48	; 0x30
    e4ea:	bd70      	pop	{r4, r5, r6, pc}
    e4ec:	f7fe fd53 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e4f0:	e7fa      	b.n	e4e8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000e4f2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    e4f2:	b510      	push	{r4, lr}
    e4f4:	460c      	mov	r4, r1
    e4f6:	2100      	movs	r1, #0
    e4f8:	f7ff fd72 	bl	dfe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e4fc:	6060      	str	r0, [r4, #4]
    e4fe:	b118      	cbz	r0, e508 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    e500:	2001      	movs	r0, #1
    e502:	7020      	strb	r0, [r4, #0]
    e504:	2000      	movs	r0, #0
    e506:	bd10      	pop	{r4, pc}
    e508:	2002      	movs	r0, #2
    e50a:	bd10      	pop	{r4, pc}

0000e50c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    e50c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e510:	4348      	muls	r0, r1
    e512:	4770      	bx	lr

0000e514 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    e514:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e518:	fbb0 f0f1 	udiv	r0, r0, r1
    e51c:	b280      	uxth	r0, r0
    e51e:	4770      	bx	lr

0000e520 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    e520:	b570      	push	{r4, r5, r6, lr}
    e522:	4604      	mov	r4, r0
    e524:	4290      	cmp	r0, r2
    e526:	d20b      	bcs.n	e540 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    e528:	1b10      	subs	r0, r2, r4
    e52a:	2865      	cmp	r0, #101	; 0x65
    e52c:	d200      	bcs.n	e530 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    e52e:	2065      	movs	r0, #101	; 0x65
    e530:	1825      	adds	r5, r4, r0
    e532:	428d      	cmp	r5, r1
    e534:	d803      	bhi.n	e53e <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    e536:	2103      	movs	r1, #3
    e538:	f7f4 f89c 	bl	2674 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    e53c:	b108      	cbz	r0, e542 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    e53e:	4620      	mov	r0, r4
    e540:	bd70      	pop	{r4, r5, r6, pc}
    e542:	4628      	mov	r0, r5
    e544:	bd70      	pop	{r4, r5, r6, pc}

0000e546 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    e546:	b510      	push	{r4, lr}
    e548:	f1a2 030f 	sub.w	r3, r2, #15
    e54c:	290c      	cmp	r1, #12
    e54e:	d244      	bcs.n	e5da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e550:	e8df f001 	tbb	[pc, r1]
    e554:	120d0806 	.word	0x120d0806
    e558:	241c1815 	.word	0x241c1815
    e55c:	312a4127 	.word	0x312a4127
    e560:	b3c2      	cbz	r2, e5d4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    e562:	e03a      	b.n	e5da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e564:	2a07      	cmp	r2, #7
    e566:	d03a      	beq.n	e5de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e568:	2a08      	cmp	r2, #8
    e56a:	d038      	beq.n	e5de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e56c:	e035      	b.n	e5da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e56e:	2a0c      	cmp	r2, #12
    e570:	d035      	beq.n	e5de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e572:	2a0b      	cmp	r2, #11
    e574:	d033      	beq.n	e5de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e576:	e030      	b.n	e5da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e578:	2a0d      	cmp	r2, #13
    e57a:	d030      	beq.n	e5de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e57c:	e02d      	b.n	e5da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e57e:	2b0c      	cmp	r3, #12
    e580:	d92d      	bls.n	e5de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e582:	e02a      	b.n	e5da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e584:	3a10      	subs	r2, #16
    e586:	2a0b      	cmp	r2, #11
    e588:	d929      	bls.n	e5de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e58a:	e026      	b.n	e5da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e58c:	2b03      	cmp	r3, #3
    e58e:	d926      	bls.n	e5de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e590:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    e594:	b308      	cbz	r0, e5da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e596:	2a1b      	cmp	r2, #27
    e598:	d921      	bls.n	e5de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e59a:	e01e      	b.n	e5da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e59c:	2a04      	cmp	r2, #4
    e59e:	d01e      	beq.n	e5de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e5a0:	e01b      	b.n	e5da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e5a2:	2a06      	cmp	r2, #6
    e5a4:	d01b      	beq.n	e5de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e5a6:	e018      	b.n	e5da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e5a8:	2a1c      	cmp	r2, #28
    e5aa:	d018      	beq.n	e5de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e5ac:	2a1d      	cmp	r2, #29
    e5ae:	d016      	beq.n	e5de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e5b0:	2a1e      	cmp	r2, #30
    e5b2:	d014      	beq.n	e5de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e5b4:	e011      	b.n	e5da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e5b6:	2a1f      	cmp	r2, #31
    e5b8:	d011      	beq.n	e5de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e5ba:	2a20      	cmp	r2, #32
    e5bc:	d00f      	beq.n	e5de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e5be:	2a21      	cmp	r2, #33	; 0x21
    e5c0:	d00d      	beq.n	e5de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e5c2:	2a22      	cmp	r2, #34	; 0x22
    e5c4:	d00b      	beq.n	e5de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e5c6:	2a23      	cmp	r2, #35	; 0x23
    e5c8:	d009      	beq.n	e5de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e5ca:	2a24      	cmp	r2, #36	; 0x24
    e5cc:	d007      	beq.n	e5de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e5ce:	2a26      	cmp	r2, #38	; 0x26
    e5d0:	d005      	beq.n	e5de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e5d2:	e002      	b.n	e5da <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e5d4:	e003      	b.n	e5de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e5d6:	2a0e      	cmp	r2, #14
    e5d8:	d001      	beq.n	e5de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e5da:	2000      	movs	r0, #0
    e5dc:	bd10      	pop	{r4, pc}
    e5de:	2001      	movs	r0, #1
    e5e0:	bd10      	pop	{r4, pc}

0000e5e2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    e5e2:	280c      	cmp	r0, #12
    e5e4:	d013      	beq.n	e60e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e5e6:	280b      	cmp	r0, #11
    e5e8:	d011      	beq.n	e60e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e5ea:	280d      	cmp	r0, #13
    e5ec:	d00f      	beq.n	e60e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e5ee:	281f      	cmp	r0, #31
    e5f0:	d00d      	beq.n	e60e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e5f2:	2820      	cmp	r0, #32
    e5f4:	d00b      	beq.n	e60e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e5f6:	2821      	cmp	r0, #33	; 0x21
    e5f8:	d009      	beq.n	e60e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e5fa:	2822      	cmp	r0, #34	; 0x22
    e5fc:	d007      	beq.n	e60e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e5fe:	2823      	cmp	r0, #35	; 0x23
    e600:	d005      	beq.n	e60e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e602:	2824      	cmp	r0, #36	; 0x24
    e604:	d003      	beq.n	e60e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e606:	2826      	cmp	r0, #38	; 0x26
    e608:	d001      	beq.n	e60e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e60a:	2000      	movs	r0, #0
    e60c:	4770      	bx	lr
    e60e:	2001      	movs	r0, #1
    e610:	4770      	bx	lr

0000e612 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    e612:	f011 0f0c 	tst.w	r1, #12
    e616:	d016      	beq.n	e646 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    e618:	074a      	lsls	r2, r1, #29
    e61a:	f44f 7116 	mov.w	r1, #600	; 0x258
    e61e:	2a00      	cmp	r2, #0
    e620:	da02      	bge.n	e628 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    e622:	f04f 0210 	mov.w	r2, #16
    e626:	e001      	b.n	e62c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    e628:	f04f 0240 	mov.w	r2, #64	; 0x40
    e62c:	da01      	bge.n	e632 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    e62e:	f04f 0196 	mov.w	r1, #150	; 0x96
    e632:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    e636:	eba0 0301 	sub.w	r3, r0, r1
    e63a:	4288      	cmp	r0, r1
    e63c:	d910      	bls.n	e660 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    e63e:	fb93 f0f2 	sdiv	r0, r3, r2
    e642:	b280      	uxth	r0, r0
    e644:	4770      	bx	lr
    e646:	2902      	cmp	r1, #2
    e648:	d002      	beq.n	e650 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    e64a:	2870      	cmp	r0, #112	; 0x70
    e64c:	d80a      	bhi.n	e664 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    e64e:	e007      	b.n	e660 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    e650:	283c      	cmp	r0, #60	; 0x3c
    e652:	d905      	bls.n	e660 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    e654:	383c      	subs	r0, #60	; 0x3c
    e656:	17c1      	asrs	r1, r0, #31
    e658:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    e65c:	1080      	asrs	r0, r0, #2
    e65e:	e7f0      	b.n	e642 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    e660:	2000      	movs	r0, #0
    e662:	e7ee      	b.n	e642 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    e664:	3870      	subs	r0, #112	; 0x70
    e666:	17c1      	asrs	r1, r0, #31
    e668:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    e66c:	10c0      	asrs	r0, r0, #3
    e66e:	e7e8      	b.n	e642 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000e670 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    e670:	6809      	ldr	r1, [r1, #0]
    e672:	f8c0 106a 	str.w	r1, [r0, #106]	; 0x6a
    e676:	4770      	bx	lr

0000e678 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    e678:	07c1      	lsls	r1, r0, #31
    e67a:	d001      	beq.n	e680 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    e67c:	2001      	movs	r0, #1
    e67e:	4770      	bx	lr
    e680:	0781      	lsls	r1, r0, #30
    e682:	d501      	bpl.n	e688 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    e684:	2002      	movs	r0, #2
    e686:	4770      	bx	lr
    e688:	0740      	lsls	r0, r0, #29
    e68a:	d501      	bpl.n	e690 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    e68c:	2008      	movs	r0, #8
    e68e:	4770      	bx	lr
    e690:	2000      	movs	r0, #0
    e692:	4770      	bx	lr

0000e694 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    e694:	b510      	push	{r4, lr}
    e696:	f640 12c4 	movw	r2, #2500	; 0x9c4
    e69a:	2901      	cmp	r1, #1
    e69c:	d006      	beq.n	e6ac <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    e69e:	2902      	cmp	r1, #2
    e6a0:	d005      	beq.n	e6ae <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    e6a2:	f240 31a1 	movw	r1, #929	; 0x3a1
    e6a6:	2029      	movs	r0, #41	; 0x29
    e6a8:	f7f6 fcc0 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6ac:	b108      	cbz	r0, e6b2 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    e6ae:	4610      	mov	r0, r2
    e6b0:	bd10      	pop	{r4, pc}
    e6b2:	f240 40e2 	movw	r0, #1250	; 0x4e2
    e6b6:	bd10      	pop	{r4, pc}

0000e6b8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    e6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e6bc:	460c      	mov	r4, r1
    e6be:	4605      	mov	r5, r0
    e6c0:	68c6      	ldr	r6, [r0, #12]
    e6c2:	f7f4 fbf1 	bl	2ea8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    e6c6:	b198      	cbz	r0, e6f0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    e6c8:	b1bc      	cbz	r4, e6fa <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    e6ca:	4630      	mov	r0, r6
    e6cc:	68e9      	ldr	r1, [r5, #12]
    e6ce:	f7f4 f8db 	bl	2888 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    e6d2:	2800      	cmp	r0, #0
    e6d4:	dd11      	ble.n	e6fa <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    e6d6:	4420      	add	r0, r4
    e6d8:	1e40      	subs	r0, r0, #1
    e6da:	fbb0 f7f4 	udiv	r7, r0, r4
    e6de:	fb07 f104 	mul.w	r1, r7, r4
    e6e2:	4630      	mov	r0, r6
    e6e4:	f7f4 f89e 	bl	2824 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e6e8:	60e8      	str	r0, [r5, #12]
    e6ea:	4638      	mov	r0, r7
    e6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e6f0:	f240 2126 	movw	r1, #550	; 0x226
    e6f4:	2029      	movs	r0, #41	; 0x29
    e6f6:	f7f6 fc99 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6fa:	2000      	movs	r0, #0
    e6fc:	e7f6      	b.n	e6ec <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000e6fe <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    e6fe:	b530      	push	{r4, r5, lr}
    e700:	4613      	mov	r3, r2
    e702:	e006      	b.n	e712 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    e704:	18cc      	adds	r4, r1, r3
    e706:	1ad5      	subs	r5, r2, r3
    e708:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    e70c:	1e5b      	subs	r3, r3, #1
    e70e:	5544      	strb	r4, [r0, r5]
    e710:	b2db      	uxtb	r3, r3
    e712:	2b00      	cmp	r3, #0
    e714:	d1f6      	bne.n	e704 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    e716:	bd30      	pop	{r4, r5, pc}

0000e718 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    e718:	b538      	push	{r3, r4, r5, lr}
    e71a:	4605      	mov	r5, r0
    e71c:	460c      	mov	r4, r1
    e71e:	4668      	mov	r0, sp
    e720:	f7fd fd28 	bl	c174 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e724:	b310      	cbz	r0, e76c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    e726:	f99d 0000 	ldrsb.w	r0, [sp]
    e72a:	7260      	strb	r0, [r4, #9]
    e72c:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    e730:	72a1      	strb	r1, [r4, #10]
    e732:	f994 100b 	ldrsb.w	r1, [r4, #11]
    e736:	2200      	movs	r2, #0
    e738:	1a41      	subs	r1, r0, r1
    e73a:	d500      	bpl.n	e73e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    e73c:	4249      	negs	r1, r1
    e73e:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
    e742:	428b      	cmp	r3, r1
    e744:	dc10      	bgt.n	e768 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e746:	2bff      	cmp	r3, #255	; 0xff
    e748:	d00e      	beq.n	e768 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e74a:	7b21      	ldrb	r1, [r4, #12]
    e74c:	1c49      	adds	r1, r1, #1
    e74e:	b2c9      	uxtb	r1, r1
    e750:	7321      	strb	r1, [r4, #12]
    e752:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    e756:	4299      	cmp	r1, r3
    e758:	d802      	bhi.n	e760 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    e75a:	7ae1      	ldrb	r1, [r4, #11]
    e75c:	297f      	cmp	r1, #127	; 0x7f
    e75e:	d103      	bne.n	e768 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e760:	72e0      	strb	r0, [r4, #11]
    e762:	2000      	movs	r0, #0
    e764:	7320      	strb	r0, [r4, #12]
    e766:	2201      	movs	r2, #1
    e768:	4610      	mov	r0, r2
    e76a:	bd38      	pop	{r3, r4, r5, pc}
    e76c:	207f      	movs	r0, #127	; 0x7f
    e76e:	7260      	strb	r0, [r4, #9]
    e770:	2000      	movs	r0, #0
    e772:	bd38      	pop	{r3, r4, r5, pc}

0000e774 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    e774:	2300      	movs	r3, #0
    e776:	6283      	str	r3, [r0, #40]	; 0x28
    e778:	8602      	strh	r2, [r0, #48]	; 0x30
    e77a:	f240 2371 	movw	r3, #625	; 0x271
    e77e:	435a      	muls	r2, r3
    e780:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    e784:	1e52      	subs	r2, r2, #1
    e786:	fbb2 f1f1 	udiv	r1, r2, r1
    e78a:	62c1      	str	r1, [r0, #44]	; 0x2c
    e78c:	4770      	bx	lr

0000e78e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    e78e:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e792:	4607      	mov	r7, r0
    e794:	4690      	mov	r8, r2
    e796:	468b      	mov	fp, r1
    e798:	2601      	movs	r6, #1
    e79a:	4608      	mov	r0, r1
    e79c:	f000 f946 	bl	ea2c <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    e7a0:	4682      	mov	sl, r0
    e7a2:	4658      	mov	r0, fp
    e7a4:	f000 f94e 	bl	ea44 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    e7a8:	4681      	mov	r9, r0
    e7aa:	f7ff ff65 	bl	e678 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    e7ae:	4604      	mov	r4, r0
    e7b0:	4650      	mov	r0, sl
    e7b2:	f7ff ff61 	bl	e678 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    e7b6:	4605      	mov	r5, r0
    e7b8:	ea54 0005 	orrs.w	r0, r4, r5
    e7bc:	d100      	bne.n	e7c0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    e7be:	2600      	movs	r6, #0
    e7c0:	f7fc ff4e 	bl	b660 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    e7c4:	ea10 0f09 	tst.w	r0, r9
    e7c8:	d100      	bne.n	e7cc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    e7ca:	2400      	movs	r4, #0
    e7cc:	f7fc ff48 	bl	b660 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    e7d0:	ea10 0f0a 	tst.w	r0, sl
    e7d4:	d100      	bne.n	e7d8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    e7d6:	2500      	movs	r5, #0
    e7d8:	f897 006e 	ldrb.w	r0, [r7, #110]	; 0x6e
    e7dc:	42a0      	cmp	r0, r4
    e7de:	d100      	bne.n	e7e2 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    e7e0:	2400      	movs	r4, #0
    e7e2:	f888 4000 	strb.w	r4, [r8]
    e7e6:	f897 006f 	ldrb.w	r0, [r7, #111]	; 0x6f
    e7ea:	42a8      	cmp	r0, r5
    e7ec:	d100      	bne.n	e7f0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    e7ee:	2500      	movs	r5, #0
    e7f0:	f888 5001 	strb.w	r5, [r8, #1]
    e7f4:	b974      	cbnz	r4, e814 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e7f6:	b96d      	cbnz	r5, e814 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e7f8:	4658      	mov	r0, fp
    e7fa:	f000 f921 	bl	ea40 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    e7fe:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
    e802:	1a40      	subs	r0, r0, r1
    e804:	b200      	sxth	r0, r0
    e806:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    e80a:	4288      	cmp	r0, r1
    e80c:	dc01      	bgt.n	e812 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    e80e:	2800      	cmp	r0, #0
    e810:	dc00      	bgt.n	e814 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e812:	2600      	movs	r6, #0
    e814:	4630      	mov	r0, r6
    e816:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000e81a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    e81a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e81e:	4348      	muls	r0, r1
    e820:	4770      	bx	lr

0000e822 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    e822:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e826:	fb10 f001 	smulbb	r0, r0, r1
    e82a:	4770      	bx	lr

0000e82c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    e82c:	b510      	push	{r4, lr}
    e82e:	2300      	movs	r3, #0
    e830:	461a      	mov	r2, r3
    e832:	e003      	b.n	e83c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    e834:	5c84      	ldrb	r4, [r0, r2]
    e836:	4323      	orrs	r3, r4
    e838:	1c52      	adds	r2, r2, #1
    e83a:	b2d2      	uxtb	r2, r2
    e83c:	428a      	cmp	r2, r1
    e83e:	d3f9      	bcc.n	e834 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    e840:	b10b      	cbz	r3, e846 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    e842:	2000      	movs	r0, #0
    e844:	bd10      	pop	{r4, pc}
    e846:	2001      	movs	r0, #1
    e848:	bd10      	pop	{r4, pc}

0000e84a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    e84a:	b510      	push	{r4, lr}
    e84c:	4604      	mov	r4, r0
    e84e:	f890 0020 	ldrb.w	r0, [r0, #32]
    e852:	b108      	cbz	r0, e858 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    e854:	2825      	cmp	r0, #37	; 0x25
    e856:	d901      	bls.n	e85c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    e858:	2012      	movs	r0, #18
    e85a:	bd10      	pop	{r4, pc}
    e85c:	b12a      	cbz	r2, e86a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    e85e:	7d60      	ldrb	r0, [r4, #21]
    e860:	b128      	cbz	r0, e86e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    e862:	2801      	cmp	r0, #1
    e864:	d009      	beq.n	e87a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    e866:	201f      	movs	r0, #31
    e868:	bd10      	pop	{r4, pc}
    e86a:	2000      	movs	r0, #0
    e86c:	bd10      	pop	{r4, pc}
    e86e:	4620      	mov	r0, r4
    e870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e874:	4611      	mov	r1, r2
    e876:	f7f8 bba7 	b.w	6fc8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    e87a:	88a2      	ldrh	r2, [r4, #4]
    e87c:	6949      	ldr	r1, [r1, #20]
    e87e:	f104 0015 	add.w	r0, r4, #21
    e882:	f7f8 fb4d 	bl	6f20 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    e886:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    e88a:	e7ee      	b.n	e86a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000e88c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    e88c:	b530      	push	{r4, r5, lr}
    e88e:	1c42      	adds	r2, r0, #1
    e890:	428a      	cmp	r2, r1
    e892:	d004      	beq.n	e89e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    e894:	680a      	ldr	r2, [r1, #0]
    e896:	f8c0 2001 	str.w	r2, [r0, #1]
    e89a:	7909      	ldrb	r1, [r1, #4]
    e89c:	7141      	strb	r1, [r0, #5]
    e89e:	7941      	ldrb	r1, [r0, #5]
    e8a0:	f001 011f 	and.w	r1, r1, #31
    e8a4:	7141      	strb	r1, [r0, #5]
    e8a6:	2100      	movs	r1, #0
    e8a8:	72c1      	strb	r1, [r0, #11]
    e8aa:	1843      	adds	r3, r0, r1
    e8ac:	1c49      	adds	r1, r1, #1
    e8ae:	785c      	ldrb	r4, [r3, #1]
    e8b0:	b2c9      	uxtb	r1, r1
    e8b2:	f004 0201 	and.w	r2, r4, #1
    e8b6:	0864      	lsrs	r4, r4, #1
    e8b8:	f004 0501 	and.w	r5, r4, #1
    e8bc:	4415      	add	r5, r2
    e8be:	0862      	lsrs	r2, r4, #1
    e8c0:	f002 0401 	and.w	r4, r2, #1
    e8c4:	442c      	add	r4, r5
    e8c6:	0852      	lsrs	r2, r2, #1
    e8c8:	f002 0501 	and.w	r5, r2, #1
    e8cc:	442c      	add	r4, r5
    e8ce:	0852      	lsrs	r2, r2, #1
    e8d0:	f002 0501 	and.w	r5, r2, #1
    e8d4:	442c      	add	r4, r5
    e8d6:	0852      	lsrs	r2, r2, #1
    e8d8:	f002 0501 	and.w	r5, r2, #1
    e8dc:	442c      	add	r4, r5
    e8de:	0852      	lsrs	r2, r2, #1
    e8e0:	f002 0501 	and.w	r5, r2, #1
    e8e4:	442c      	add	r4, r5
    e8e6:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    e8ea:	719a      	strb	r2, [r3, #6]
    e8ec:	7ac3      	ldrb	r3, [r0, #11]
    e8ee:	2905      	cmp	r1, #5
    e8f0:	441a      	add	r2, r3
    e8f2:	72c2      	strb	r2, [r0, #11]
    e8f4:	d3d9      	bcc.n	e8aa <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    e8f6:	bd30      	pop	{r4, r5, pc}
    e8f8:	b570      	push	{r4, r5, r6, lr}
    e8fa:	f8d0 201f 	ldr.w	r2, [r0, #31]
    e8fe:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    e902:	f012 0fff 	tst.w	r2, #255	; 0xff
    e906:	f023 031f 	bic.w	r3, r3, #31
    e90a:	d108      	bne.n	e91e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e90c:	f3c2 2407 	ubfx	r4, r2, #8, #8
    e910:	b92c      	cbnz	r4, e91e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e912:	f3c2 4407 	ubfx	r4, r2, #16, #8
    e916:	b914      	cbnz	r4, e91e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e918:	0e12      	lsrs	r2, r2, #24
    e91a:	d100      	bne.n	e91e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e91c:	b35b      	cbz	r3, e976 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e91e:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    e922:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    e926:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    e92a:	7d83      	ldrb	r3, [r0, #22]
    e92c:	b141      	cbz	r1, e940 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    e92e:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e932:	d905      	bls.n	e940 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    e934:	f640 5107 	movw	r1, #3335	; 0xd07
    e938:	428a      	cmp	r2, r1
    e93a:	d801      	bhi.n	e940 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    e93c:	2101      	movs	r1, #1
    e93e:	e000      	b.n	e942 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    e940:	2100      	movs	r1, #0
    e942:	7846      	ldrb	r6, [r0, #1]
    e944:	2e22      	cmp	r6, #34	; 0x22
    e946:	d116      	bne.n	e976 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e948:	b959      	cbnz	r1, e962 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xd6>
    e94a:	1f91      	subs	r1, r2, #6
    e94c:	f640 467a 	movw	r6, #3194	; 0xc7a
    e950:	42b1      	cmp	r1, r6
    e952:	d810      	bhi.n	e976 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e954:	b17b      	cbz	r3, e976 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e956:	2b08      	cmp	r3, #8
    e958:	d80d      	bhi.n	e976 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e95a:	4293      	cmp	r3, r2
    e95c:	d20b      	bcs.n	e976 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e95e:	4294      	cmp	r4, r2
    e960:	d809      	bhi.n	e976 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e962:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    e966:	d206      	bcs.n	e976 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e968:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    e96c:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    e970:	d801      	bhi.n	e976 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e972:	2001      	movs	r0, #1
    e974:	bd70      	pop	{r4, r5, r6, pc}
    e976:	2000      	movs	r0, #0
    e978:	bd70      	pop	{r4, r5, r6, pc}

0000e97a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    e97a:	b570      	push	{r4, r5, r6, lr}
    e97c:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    e980:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    e984:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    e988:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    e98c:	88c0      	ldrh	r0, [r0, #6]
    e98e:	b131      	cbz	r1, e99e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    e990:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e994:	d903      	bls.n	e99e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    e996:	f640 5107 	movw	r1, #3335	; 0xd07
    e99a:	428a      	cmp	r2, r1
    e99c:	d90b      	bls.n	e9b6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    e99e:	1f91      	subs	r1, r2, #6
    e9a0:	f640 467a 	movw	r6, #3194	; 0xc7a
    e9a4:	42b1      	cmp	r1, r6
    e9a6:	d80e      	bhi.n	e9c6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e9a8:	b16b      	cbz	r3, e9c6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e9aa:	2b08      	cmp	r3, #8
    e9ac:	d80b      	bhi.n	e9c6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e9ae:	4293      	cmp	r3, r2
    e9b0:	d209      	bcs.n	e9c6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e9b2:	4294      	cmp	r4, r2
    e9b4:	d807      	bhi.n	e9c6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e9b6:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    e9ba:	d204      	bcs.n	e9c6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e9bc:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    e9c0:	d801      	bhi.n	e9c6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e9c2:	2001      	movs	r0, #1
    e9c4:	bd70      	pop	{r4, r5, r6, pc}
    e9c6:	2000      	movs	r0, #0
    e9c8:	bd70      	pop	{r4, r5, r6, pc}

0000e9ca <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    e9ca:	6842      	ldr	r2, [r0, #4]
    e9cc:	600a      	str	r2, [r1, #0]
    e9ce:	7a00      	ldrb	r0, [r0, #8]
    e9d0:	7108      	strb	r0, [r1, #4]
    e9d2:	4770      	bx	lr

0000e9d4 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    e9d4:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e9d8:	4770      	bx	lr

0000e9da <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    e9da:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    e9de:	4770      	bx	lr

0000e9e0 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    e9e0:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e9e4:	4770      	bx	lr

0000e9e6 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    e9e6:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    e9ea:	4770      	bx	lr

0000e9ec <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    e9ec:	8980      	ldrh	r0, [r0, #12]
    e9ee:	8008      	strh	r0, [r1, #0]
    e9f0:	4770      	bx	lr

0000e9f2 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    e9f2:	f8d0 0016 	ldr.w	r0, [r0, #22]
    e9f6:	6008      	str	r0, [r1, #0]
    e9f8:	4770      	bx	lr

0000e9fa <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    e9fa:	6842      	ldr	r2, [r0, #4]
    e9fc:	600a      	str	r2, [r1, #0]
    e9fe:	6880      	ldr	r0, [r0, #8]
    ea00:	6048      	str	r0, [r1, #4]
    ea02:	4770      	bx	lr

0000ea04 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    ea04:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    ea08:	600a      	str	r2, [r1, #0]
    ea0a:	6840      	ldr	r0, [r0, #4]
    ea0c:	6048      	str	r0, [r1, #4]
    ea0e:	4770      	bx	lr

0000ea10 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    ea10:	6842      	ldr	r2, [r0, #4]
    ea12:	600a      	str	r2, [r1, #0]
    ea14:	6880      	ldr	r0, [r0, #8]
    ea16:	6048      	str	r0, [r1, #4]
    ea18:	4770      	bx	lr

0000ea1a <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
    ea1a:	6842      	ldr	r2, [r0, #4]
    ea1c:	600a      	str	r2, [r1, #0]
    ea1e:	6880      	ldr	r0, [r0, #8]
    ea20:	6048      	str	r0, [r1, #4]
    ea22:	4770      	bx	lr

0000ea24 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    ea24:	7800      	ldrb	r0, [r0, #0]
    ea26:	f000 0003 	and.w	r0, r0, #3
    ea2a:	4770      	bx	lr

0000ea2c <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    ea2c:	7900      	ldrb	r0, [r0, #4]
    ea2e:	4770      	bx	lr

0000ea30 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    ea30:	8880      	ldrh	r0, [r0, #4]
    ea32:	4770      	bx	lr

0000ea34 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    ea34:	88c0      	ldrh	r0, [r0, #6]
    ea36:	4770      	bx	lr

0000ea38 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    ea38:	8900      	ldrh	r0, [r0, #8]
    ea3a:	4770      	bx	lr

0000ea3c <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    ea3c:	8940      	ldrh	r0, [r0, #10]
    ea3e:	4770      	bx	lr

0000ea40 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    ea40:	88c0      	ldrh	r0, [r0, #6]
    ea42:	4770      	bx	lr

0000ea44 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    ea44:	7940      	ldrb	r0, [r0, #5]
    ea46:	4770      	bx	lr

0000ea48 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    ea48:	7900      	ldrb	r0, [r0, #4]
    ea4a:	4770      	bx	lr

0000ea4c <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    ea4c:	7900      	ldrb	r0, [r0, #4]
    ea4e:	4770      	bx	lr

0000ea50 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    ea50:	8901      	ldrh	r1, [r0, #8]
    ea52:	291b      	cmp	r1, #27
    ea54:	d30c      	bcc.n	ea70 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ea56:	8941      	ldrh	r1, [r0, #10]
    ea58:	f44f 72a4 	mov.w	r2, #328	; 0x148
    ea5c:	4291      	cmp	r1, r2
    ea5e:	d307      	bcc.n	ea70 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ea60:	8881      	ldrh	r1, [r0, #4]
    ea62:	291b      	cmp	r1, #27
    ea64:	d304      	bcc.n	ea70 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ea66:	88c0      	ldrh	r0, [r0, #6]
    ea68:	4290      	cmp	r0, r2
    ea6a:	d301      	bcc.n	ea70 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ea6c:	2001      	movs	r0, #1
    ea6e:	4770      	bx	lr
    ea70:	2000      	movs	r0, #0
    ea72:	4770      	bx	lr

0000ea74 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    ea74:	b510      	push	{r4, lr}
    ea76:	29fb      	cmp	r1, #251	; 0xfb
    ea78:	d904      	bls.n	ea84 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    ea7a:	f240 5193 	movw	r1, #1427	; 0x593
    ea7e:	202a      	movs	r0, #42	; 0x2a
    ea80:	f7f6 fad4 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea84:	7041      	strb	r1, [r0, #1]
    ea86:	bd10      	pop	{r4, pc}

0000ea88 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    ea88:	7901      	ldrb	r1, [r0, #4]
    ea8a:	0749      	lsls	r1, r1, #29
    ea8c:	d004      	beq.n	ea98 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    ea8e:	7940      	ldrb	r0, [r0, #5]
    ea90:	0740      	lsls	r0, r0, #29
    ea92:	d001      	beq.n	ea98 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    ea94:	2001      	movs	r0, #1
    ea96:	4770      	bx	lr
    ea98:	2000      	movs	r0, #0
    ea9a:	4770      	bx	lr

0000ea9c <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    ea9c:	7900      	ldrb	r0, [r0, #4]
    ea9e:	4770      	bx	lr

0000eaa0 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    eaa0:	7940      	ldrb	r0, [r0, #5]
    eaa2:	4770      	bx	lr

0000eaa4 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    eaa4:	7101      	strb	r1, [r0, #4]
    eaa6:	4770      	bx	lr

0000eaa8 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    eaa8:	7141      	strb	r1, [r0, #5]
    eaaa:	4770      	bx	lr

0000eaac <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    eaac:	b510      	push	{r4, lr}
    eaae:	2a1b      	cmp	r2, #27
    eab0:	d904      	bls.n	eabc <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    eab2:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
    eab6:	202a      	movs	r0, #42	; 0x2a
    eab8:	f7f6 fab8 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eabc:	7042      	strb	r2, [r0, #1]
    eabe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eac2:	1cc0      	adds	r0, r0, #3
    eac4:	f7fe ba67 	b.w	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000eac8 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    eac8:	6809      	ldr	r1, [r1, #0]
    eaca:	60c1      	str	r1, [r0, #12]
    eacc:	4770      	bx	lr

0000eace <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    eace:	680a      	ldr	r2, [r1, #0]
    ead0:	6042      	str	r2, [r0, #4]
    ead2:	6849      	ldr	r1, [r1, #4]
    ead4:	6081      	str	r1, [r0, #8]
    ead6:	4770      	bx	lr

0000ead8 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    ead8:	680a      	ldr	r2, [r1, #0]
    eada:	6042      	str	r2, [r0, #4]
    eadc:	6849      	ldr	r1, [r1, #4]
    eade:	6081      	str	r1, [r0, #8]
    eae0:	4770      	bx	lr

0000eae2 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    eae2:	680a      	ldr	r2, [r1, #0]
    eae4:	6042      	str	r2, [r0, #4]
    eae6:	6849      	ldr	r1, [r1, #4]
    eae8:	6081      	str	r1, [r0, #8]
    eaea:	4770      	bx	lr

0000eaec <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    eaec:	7802      	ldrb	r2, [r0, #0]
    eaee:	f001 0103 	and.w	r1, r1, #3
    eaf2:	f022 0203 	bic.w	r2, r2, #3
    eaf6:	430a      	orrs	r2, r1
    eaf8:	7002      	strb	r2, [r0, #0]
    eafa:	4770      	bx	lr

0000eafc <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    eafc:	7101      	strb	r1, [r0, #4]
    eafe:	0a09      	lsrs	r1, r1, #8
    eb00:	7141      	strb	r1, [r0, #5]
    eb02:	4770      	bx	lr

0000eb04 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    eb04:	7181      	strb	r1, [r0, #6]
    eb06:	0a09      	lsrs	r1, r1, #8
    eb08:	71c1      	strb	r1, [r0, #7]
    eb0a:	4770      	bx	lr

0000eb0c <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    eb0c:	7201      	strb	r1, [r0, #8]
    eb0e:	0a09      	lsrs	r1, r1, #8
    eb10:	7241      	strb	r1, [r0, #9]
    eb12:	4770      	bx	lr

0000eb14 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    eb14:	7281      	strb	r1, [r0, #10]
    eb16:	0a09      	lsrs	r1, r1, #8
    eb18:	72c1      	strb	r1, [r0, #11]
    eb1a:	4770      	bx	lr

0000eb1c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    eb1c:	7802      	ldrb	r2, [r0, #0]
    eb1e:	f002 020f 	and.w	r2, r2, #15
    eb22:	2a03      	cmp	r2, #3
    eb24:	d003      	beq.n	eb2e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x12>
    eb26:	2a05      	cmp	r2, #5
    eb28:	d104      	bne.n	eb34 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x18>
    eb2a:	f7ff bee5 	b.w	e8f8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    eb2e:	7840      	ldrb	r0, [r0, #1]
    eb30:	280c      	cmp	r0, #12
    eb32:	d001      	beq.n	eb38 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x1c>
    eb34:	2000      	movs	r0, #0
    eb36:	4770      	bx	lr
    eb38:	2001      	movs	r0, #1
    eb3a:	4770      	bx	lr

0000eb3c <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    eb3c:	b570      	push	{r4, r5, r6, lr}
    eb3e:	4614      	mov	r4, r2
    eb40:	4605      	mov	r5, r0
    eb42:	2a1f      	cmp	r2, #31
    eb44:	d903      	bls.n	eb4e <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    eb46:	21b2      	movs	r1, #178	; 0xb2
    eb48:	202a      	movs	r0, #42	; 0x2a
    eb4a:	f7f6 fa6f 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb4e:	f105 0009 	add.w	r0, r5, #9
    eb52:	f7fe fa20 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    eb56:	1da4      	adds	r4, r4, #6
    eb58:	706c      	strb	r4, [r5, #1]
    eb5a:	bd70      	pop	{r4, r5, r6, pc}

0000eb5c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    eb5c:	b510      	push	{r4, lr}
    eb5e:	7802      	ldrb	r2, [r0, #0]
    eb60:	f001 030f 	and.w	r3, r1, #15
    eb64:	f022 020f 	bic.w	r2, r2, #15
    eb68:	431a      	orrs	r2, r3
    eb6a:	7002      	strb	r2, [r0, #0]
    eb6c:	2907      	cmp	r1, #7
    eb6e:	d20c      	bcs.n	eb8a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    eb70:	e8df f001 	tbb	[pc, r1]
    eb74:	06040604 	.word	0x06040604
    eb78:	00040804 	.word	0x00040804
    eb7c:	2106      	movs	r1, #6
    eb7e:	e002      	b.n	eb86 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    eb80:	210c      	movs	r1, #12
    eb82:	e000      	b.n	eb86 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    eb84:	2122      	movs	r1, #34	; 0x22
    eb86:	7041      	strb	r1, [r0, #1]
    eb88:	bd10      	pop	{r4, pc}
    eb8a:	216e      	movs	r1, #110	; 0x6e
    eb8c:	202a      	movs	r0, #42	; 0x2a
    eb8e:	f7f6 fa4d 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000eb92 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    eb92:	680a      	ldr	r2, [r1, #0]
    eb94:	f840 2f09 	str.w	r2, [r0, #9]!
    eb98:	8889      	ldrh	r1, [r1, #4]
    eb9a:	8081      	strh	r1, [r0, #4]
    eb9c:	4770      	bx	lr

0000eb9e <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    eb9e:	7802      	ldrb	r2, [r0, #0]
    eba0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    eba4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    eba8:	7002      	strb	r2, [r0, #0]
    ebaa:	4770      	bx	lr

0000ebac <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    ebac:	680a      	ldr	r2, [r1, #0]
    ebae:	f840 2f03 	str.w	r2, [r0, #3]!
    ebb2:	8889      	ldrh	r1, [r1, #4]
    ebb4:	8081      	strh	r1, [r0, #4]
    ebb6:	4770      	bx	lr

0000ebb8 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    ebb8:	7802      	ldrb	r2, [r0, #0]
    ebba:	2340      	movs	r3, #64	; 0x40
    ebbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    ebc0:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    ebc4:	430a      	orrs	r2, r1
    ebc6:	7002      	strb	r2, [r0, #0]
    ebc8:	4770      	bx	lr

0000ebca <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    ebca:	b570      	push	{r4, r5, r6, lr}
    ebcc:	4614      	mov	r4, r2
    ebce:	4605      	mov	r5, r0
    ebd0:	2a1f      	cmp	r2, #31
    ebd2:	d903      	bls.n	ebdc <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    ebd4:	21d4      	movs	r1, #212	; 0xd4
    ebd6:	202a      	movs	r0, #42	; 0x2a
    ebd8:	f7f6 fa28 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ebdc:	f105 0009 	add.w	r0, r5, #9
    ebe0:	f7fe f9d9 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ebe4:	1da4      	adds	r4, r4, #6
    ebe6:	706c      	strb	r4, [r5, #1]
    ebe8:	bd70      	pop	{r4, r5, r6, pc}

0000ebea <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    ebea:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ebee:	4604      	mov	r4, r0
    ebf0:	2000      	movs	r0, #0
    ebf2:	f7f6 fc05 	bl	5400 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    ebf6:	2600      	movs	r6, #0
    ebf8:	4605      	mov	r5, r0
    ebfa:	4637      	mov	r7, r6
    ebfc:	e00e      	b.n	ec1c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    ebfe:	8820      	ldrh	r0, [r4, #0]
    ec00:	1c40      	adds	r0, r0, #1
    ec02:	b280      	uxth	r0, r0
    ec04:	8020      	strh	r0, [r4, #0]
    ec06:	42a8      	cmp	r0, r5
    ec08:	d300      	bcc.n	ec0c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    ec0a:	8027      	strh	r7, [r4, #0]
    ec0c:	8820      	ldrh	r0, [r4, #0]
    ec0e:	4669      	mov	r1, sp
    ec10:	f7ff fc6f 	bl	e4f2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ec14:	2800      	cmp	r0, #0
    ec16:	d007      	beq.n	ec28 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    ec18:	1c76      	adds	r6, r6, #1
    ec1a:	b2f6      	uxtb	r6, r6
    ec1c:	42ae      	cmp	r6, r5
    ec1e:	d3ee      	bcc.n	ebfe <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    ec20:	f64f 70ff 	movw	r0, #65535	; 0xffff
    ec24:	8020      	strh	r0, [r4, #0]
    ec26:	2012      	movs	r0, #18
    ec28:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000ec2c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    ec2c:	6841      	ldr	r1, [r0, #4]
    ec2e:	2200      	movs	r2, #0
    ec30:	f891 3112 	ldrb.w	r3, [r1, #274]	; 0x112
    ec34:	2b00      	cmp	r3, #0
    ec36:	d004      	beq.n	ec42 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    ec38:	f881 2112 	strb.w	r2, [r1, #274]	; 0x112
    ec3c:	6840      	ldr	r0, [r0, #4]
    ec3e:	f000 bc73 	b.w	f528 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    ec42:	4770      	bx	lr

0000ec44 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    ec44:	b510      	push	{r4, lr}
    ec46:	7901      	ldrb	r1, [r0, #4]
    ec48:	b119      	cbz	r1, ec52 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    ec4a:	2901      	cmp	r1, #1
    ec4c:	d006      	beq.n	ec5c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    ec4e:	2000      	movs	r0, #0
    ec50:	bd10      	pop	{r4, pc}
    ec52:	8842      	ldrh	r2, [r0, #2]
    ec54:	6883      	ldr	r3, [r0, #8]
    ec56:	8800      	ldrh	r0, [r0, #0]
    ec58:	2102      	movs	r1, #2
    ec5a:	e003      	b.n	ec64 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    ec5c:	8842      	ldrh	r2, [r0, #2]
    ec5e:	6883      	ldr	r3, [r0, #8]
    ec60:	8800      	ldrh	r0, [r0, #0]
    ec62:	2101      	movs	r1, #1
    ec64:	f7f8 fa5e 	bl	7124 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    ec68:	b908      	cbnz	r0, ec6e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    ec6a:	f7f8 fab1 	bl	71d0 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    ec6e:	2001      	movs	r0, #1
    ec70:	bd10      	pop	{r4, pc}
    ec72:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ec76:	460e      	mov	r6, r1
    ec78:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    ec7c:	4617      	mov	r7, r2
    ec7e:	39ff      	subs	r1, #255	; 0xff
    ec80:	d014      	beq.n	ecac <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    ec82:	8030      	strh	r0, [r6, #0]
    ec84:	2100      	movs	r1, #0
    ec86:	7171      	strb	r1, [r6, #5]
    ec88:	f7f6 fdea 	bl	5860 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    ec8c:	4604      	mov	r4, r0
    ec8e:	f7fe ffd5 	bl	dc3c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    ec92:	0005      	movs	r5, r0
    ec94:	d00a      	beq.n	ecac <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    ec96:	4620      	mov	r0, r4
    ec98:	4629      	mov	r1, r5
    ec9a:	aa01      	add	r2, sp, #4
    ec9c:	f7fe fff1 	bl	dc82 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    eca0:	8070      	strh	r0, [r6, #2]
    eca2:	b130      	cbz	r0, ecb2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    eca4:	28fb      	cmp	r0, #251	; 0xfb
    eca6:	d906      	bls.n	ecb6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    eca8:	21ae      	movs	r1, #174	; 0xae
    ecaa:	e026      	b.n	ecfa <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    ecac:	2000      	movs	r0, #0
    ecae:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ecb2:	21ad      	movs	r1, #173	; 0xad
    ecb4:	e021      	b.n	ecfa <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    ecb6:	9801      	ldr	r0, [sp, #4]
    ecb8:	f7ff feb4 	bl	ea24 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    ecbc:	2801      	cmp	r0, #1
    ecbe:	d003      	beq.n	ecc8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    ecc0:	2802      	cmp	r0, #2
    ecc2:	d001      	beq.n	ecc8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    ecc4:	21bd      	movs	r1, #189	; 0xbd
    ecc6:	e018      	b.n	ecfa <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    ecc8:	7130      	strb	r0, [r6, #4]
    ecca:	4629      	mov	r1, r5
    eccc:	8873      	ldrh	r3, [r6, #2]
    ecce:	2503      	movs	r5, #3
    ecd0:	4620      	mov	r0, r4
    ecd2:	463a      	mov	r2, r7
    ecd4:	9500      	str	r5, [sp, #0]
    ecd6:	f7fe fe9f 	bl	da18 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    ecda:	4620      	mov	r0, r4
    ecdc:	60b7      	str	r7, [r6, #8]
    ecde:	f7fe ff5c 	bl	db9a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    ece2:	b138      	cbz	r0, ecf4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    ece4:	2100      	movs	r1, #0
    ece6:	4620      	mov	r0, r4
    ece8:	460a      	mov	r2, r1
    ecea:	f7ff f8a8 	bl	de3e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    ecee:	b118      	cbz	r0, ecf8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    ecf0:	2001      	movs	r0, #1
    ecf2:	e7dc      	b.n	ecae <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    ecf4:	21cd      	movs	r1, #205	; 0xcd
    ecf6:	e000      	b.n	ecfa <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    ecf8:	21d2      	movs	r1, #210	; 0xd2
    ecfa:	202b      	movs	r0, #43	; 0x2b
    ecfc:	f7f6 f996 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ed00 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    ed00:	f7f8 bc1e 	b.w	7540 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28c>
    ed04:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ed08:	4604      	mov	r4, r0
    ed0a:	2000      	movs	r0, #0
    ed0c:	f7f6 fb78 	bl	5400 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    ed10:	4605      	mov	r5, r0
    ed12:	2001      	movs	r0, #1
    ed14:	f7f6 fb74 	bl	5400 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    ed18:	4428      	add	r0, r5
    ed1a:	2600      	movs	r6, #0
    ed1c:	b2c7      	uxtb	r7, r0
    ed1e:	46b0      	mov	r8, r6
    ed20:	e017      	b.n	ed52 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x52>
    ed22:	8820      	ldrh	r0, [r4, #0]
    ed24:	1c40      	adds	r0, r0, #1
    ed26:	b280      	uxth	r0, r0
    ed28:	8020      	strh	r0, [r4, #0]
    ed2a:	42b8      	cmp	r0, r7
    ed2c:	d302      	bcc.n	ed34 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x34>
    ed2e:	4640      	mov	r0, r8
    ed30:	f8a4 8000 	strh.w	r8, [r4]
    ed34:	b280      	uxth	r0, r0
    ed36:	42a8      	cmp	r0, r5
    ed38:	d304      	bcc.n	ed44 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    ed3a:	42b8      	cmp	r0, r7
    ed3c:	d202      	bcs.n	ed44 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    ed3e:	2000      	movs	r0, #0
    ed40:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ed44:	4669      	mov	r1, sp
    ed46:	f7ff fbd4 	bl	e4f2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ed4a:	2800      	cmp	r0, #0
    ed4c:	d0f8      	beq.n	ed40 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>
    ed4e:	1c76      	adds	r6, r6, #1
    ed50:	b2f6      	uxtb	r6, r6
    ed52:	42be      	cmp	r6, r7
    ed54:	d3e5      	bcc.n	ed22 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x22>
    ed56:	f64f 70ff 	movw	r0, #65535	; 0xffff
    ed5a:	8020      	strh	r0, [r4, #0]
    ed5c:	2012      	movs	r0, #18
    ed5e:	e7ef      	b.n	ed40 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>

0000ed60 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    ed60:	b570      	push	{r4, r5, r6, lr}
    ed62:	8050      	strh	r0, [r2, #2]
    ed64:	890c      	ldrh	r4, [r1, #8]
    ed66:	8094      	strh	r4, [r2, #4]
    ed68:	898b      	ldrh	r3, [r1, #12]
    ed6a:	80d3      	strh	r3, [r2, #6]
    ed6c:	8948      	ldrh	r0, [r1, #10]
    ed6e:	8110      	strh	r0, [r2, #8]
    ed70:	89cd      	ldrh	r5, [r1, #14]
    ed72:	8155      	strh	r5, [r2, #10]
    ed74:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    ed76:	42ae      	cmp	r6, r5
    ed78:	d108      	bne.n	ed8c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    ed7a:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    ed7c:	4285      	cmp	r5, r0
    ed7e:	d105      	bne.n	ed8c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    ed80:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    ed82:	429d      	cmp	r5, r3
    ed84:	d102      	bne.n	ed8c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    ed86:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    ed88:	42a3      	cmp	r3, r4
    ed8a:	d001      	beq.n	ed90 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    ed8c:	2301      	movs	r3, #1
    ed8e:	e000      	b.n	ed92 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    ed90:	2300      	movs	r3, #0
    ed92:	7313      	strb	r3, [r2, #12]
    ed94:	8548      	strh	r0, [r1, #42]	; 0x2a
    ed96:	8950      	ldrh	r0, [r2, #10]
    ed98:	85c8      	strh	r0, [r1, #46]	; 0x2e
    ed9a:	8890      	ldrh	r0, [r2, #4]
    ed9c:	8588      	strh	r0, [r1, #44]	; 0x2c
    ed9e:	88d0      	ldrh	r0, [r2, #6]
    eda0:	8608      	strh	r0, [r1, #48]	; 0x30
    eda2:	20ff      	movs	r0, #255	; 0xff
    eda4:	7010      	strb	r0, [r2, #0]
    eda6:	bd70      	pop	{r4, r5, r6, pc}

0000eda8 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    eda8:	b510      	push	{r4, lr}
    edaa:	888c      	ldrh	r4, [r1, #4]
    edac:	890a      	ldrh	r2, [r1, #8]
    edae:	884b      	ldrh	r3, [r1, #2]
    edb0:	88c9      	ldrh	r1, [r1, #6]
    edb2:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
    edb6:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
    edba:	f8a0 404e 	strh.w	r4, [r0, #78]	; 0x4e
    edbe:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    edc2:	bd10      	pop	{r4, pc}

0000edc4 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    edc4:	b570      	push	{r4, r5, r6, lr}
    edc6:	4615      	mov	r5, r2
    edc8:	460c      	mov	r4, r1
    edca:	f000 f8c9 	bl	ef60 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    edce:	3096      	adds	r0, #150	; 0x96
    edd0:	4428      	add	r0, r5
    edd2:	42a0      	cmp	r0, r4
    edd4:	d801      	bhi.n	edda <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    edd6:	1a20      	subs	r0, r4, r0
    edd8:	bd70      	pop	{r4, r5, r6, pc}
    edda:	2000      	movs	r0, #0
    eddc:	bd70      	pop	{r4, r5, r6, pc}

0000edde <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    edde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ede2:	4604      	mov	r4, r0
    ede4:	8f47      	ldrh	r7, [r0, #58]	; 0x3a
    ede6:	8fc6      	ldrh	r6, [r0, #62]	; 0x3e
    ede8:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
    edec:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    edf0:	4285      	cmp	r5, r0
    edf2:	d300      	bcc.n	edf6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    edf4:	4605      	mov	r5, r0
    edf6:	4620      	mov	r0, r4
    edf8:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
    edfc:	f000 f8a0 	bl	ef40 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    ee00:	4601      	mov	r1, r0
    ee02:	8765      	strh	r5, [r4, #58]	; 0x3a
    ee04:	87e1      	strh	r1, [r4, #62]	; 0x3e
    ee06:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
    ee0a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    ee0e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    ee12:	4680      	mov	r8, r0
    ee14:	42aa      	cmp	r2, r5
    ee16:	d200      	bcs.n	ee1a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    ee18:	462a      	mov	r2, r5
    ee1a:	428b      	cmp	r3, r1
    ee1c:	d200      	bcs.n	ee20 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x42>
    ee1e:	460b      	mov	r3, r1
    ee20:	8202      	strh	r2, [r0, #16]
    ee22:	f8a8 3012 	strh.w	r3, [r8, #18]
    ee26:	42bd      	cmp	r5, r7
    ee28:	d101      	bne.n	ee2e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    ee2a:	42b1      	cmp	r1, r6
    ee2c:	d001      	beq.n	ee32 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x54>
    ee2e:	2001      	movs	r0, #1
    ee30:	e000      	b.n	ee34 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x56>
    ee32:	2000      	movs	r0, #0
    ee34:	4681      	mov	r9, r0
    ee36:	f8b4 504c 	ldrh.w	r5, [r4, #76]	; 0x4c
    ee3a:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
    ee3e:	8f27      	ldrh	r7, [r4, #56]	; 0x38
    ee40:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
    ee42:	4285      	cmp	r5, r0
    ee44:	d300      	bcc.n	ee48 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x6a>
    ee46:	4605      	mov	r5, r0
    ee48:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
    ee4c:	4620      	mov	r0, r4
    ee4e:	f000 f87f 	bl	ef50 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    ee52:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
    ee56:	2902      	cmp	r1, #2
    ee58:	d108      	bne.n	ee6c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8e>
    ee5a:	42af      	cmp	r7, r5
    ee5c:	d200      	bcs.n	ee60 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x82>
    ee5e:	463d      	mov	r5, r7
    ee60:	4286      	cmp	r6, r0
    ee62:	d200      	bcs.n	ee66 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x88>
    ee64:	4630      	mov	r0, r6
    ee66:	2100      	movs	r1, #0
    ee68:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
    ee6c:	f8a8 5008 	strh.w	r5, [r8, #8]
    ee70:	f8a8 000c 	strh.w	r0, [r8, #12]
    ee74:	42bd      	cmp	r5, r7
    ee76:	d101      	bne.n	ee7c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    ee78:	42b0      	cmp	r0, r6
    ee7a:	d001      	beq.n	ee80 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa2>
    ee7c:	2001      	movs	r0, #1
    ee7e:	e000      	b.n	ee82 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa4>
    ee80:	2000      	movs	r0, #0
    ee82:	ea40 0009 	orr.w	r0, r0, r9
    ee86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000ee8a <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    ee8a:	6840      	ldr	r0, [r0, #4]
    ee8c:	4770      	bx	lr

0000ee8e <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    ee8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee92:	4616      	mov	r6, r2
    ee94:	460f      	mov	r7, r1
    ee96:	4604      	mov	r4, r0
    ee98:	f000 f862 	bl	ef60 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    ee9c:	4605      	mov	r5, r0
    ee9e:	463a      	mov	r2, r7
    eea0:	6921      	ldr	r1, [r4, #16]
    eea2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    eea4:	f000 f847 	bl	ef36 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    eea8:	19a9      	adds	r1, r5, r6
    eeaa:	4281      	cmp	r1, r0
    eeac:	d300      	bcc.n	eeb0 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    eeae:	4608      	mov	r0, r1
    eeb0:	6360      	str	r0, [r4, #52]	; 0x34
    eeb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000eeb6 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    eeb6:	221b      	movs	r2, #27
    eeb8:	8402      	strh	r2, [r0, #32]
    eeba:	8382      	strh	r2, [r0, #28]
    eebc:	82c2      	strh	r2, [r0, #22]
    eebe:	8282      	strh	r2, [r0, #20]
    eec0:	8142      	strh	r2, [r0, #10]
    eec2:	8202      	strh	r2, [r0, #16]
    eec4:	8102      	strh	r2, [r0, #8]
    eec6:	8542      	strh	r2, [r0, #42]	; 0x2a
    eec8:	8582      	strh	r2, [r0, #44]	; 0x2c
    eeca:	8482      	strh	r2, [r0, #36]	; 0x24
    eecc:	2900      	cmp	r1, #0
    eece:	d10a      	bne.n	eee6 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    eed0:	f44f 71a4 	mov.w	r1, #328	; 0x148
    eed4:	8441      	strh	r1, [r0, #34]	; 0x22
    eed6:	83c1      	strh	r1, [r0, #30]
    eed8:	8341      	strh	r1, [r0, #26]
    eeda:	8301      	strh	r1, [r0, #24]
    eedc:	81c1      	strh	r1, [r0, #14]
    eede:	8241      	strh	r1, [r0, #18]
    eee0:	8181      	strh	r1, [r0, #12]
    eee2:	85c1      	strh	r1, [r0, #46]	; 0x2e
    eee4:	8601      	strh	r1, [r0, #48]	; 0x30
    eee6:	4770      	bx	lr

0000eee8 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    eee8:	6800      	ldr	r0, [r0, #0]
    eeea:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    eeee:	4290      	cmp	r0, r2
    eef0:	d903      	bls.n	eefa <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    eef2:	1a40      	subs	r0, r0, r1
    eef4:	389c      	subs	r0, #156	; 0x9c
    eef6:	0840      	lsrs	r0, r0, #1
    eef8:	4770      	bx	lr
    eefa:	2000      	movs	r0, #0
    eefc:	4770      	bx	lr

0000eefe <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    eefe:	b510      	push	{r4, lr}
    ef00:	9c02      	ldr	r4, [sp, #8]
    ef02:	8281      	strh	r1, [r0, #20]
    ef04:	82c2      	strh	r2, [r0, #22]
    ef06:	8303      	strh	r3, [r0, #24]
    ef08:	8344      	strh	r4, [r0, #26]
    ef0a:	bd10      	pop	{r4, pc}

0000ef0c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    ef0c:	8050      	strh	r0, [r2, #2]
    ef0e:	8a88      	ldrh	r0, [r1, #20]
    ef10:	8090      	strh	r0, [r2, #4]
    ef12:	8ac8      	ldrh	r0, [r1, #22]
    ef14:	80d0      	strh	r0, [r2, #6]
    ef16:	8b08      	ldrh	r0, [r1, #24]
    ef18:	8110      	strh	r0, [r2, #8]
    ef1a:	8b48      	ldrh	r0, [r1, #26]
    ef1c:	8150      	strh	r0, [r2, #10]
    ef1e:	20ff      	movs	r0, #255	; 0xff
    ef20:	7010      	strb	r0, [r2, #0]
    ef22:	4770      	bx	lr
    ef24:	2902      	cmp	r1, #2
    ef26:	d003      	beq.n	ef30 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    ef28:	00c0      	lsls	r0, r0, #3
    ef2a:	3070      	adds	r0, #112	; 0x70
    ef2c:	b280      	uxth	r0, r0
    ef2e:	4770      	bx	lr
    ef30:	0080      	lsls	r0, r0, #2
    ef32:	303c      	adds	r0, #60	; 0x3c
    ef34:	e7fa      	b.n	ef2c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    ef36:	4288      	cmp	r0, r1
    ef38:	d300      	bcc.n	ef3c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    ef3a:	4608      	mov	r0, r1
    ef3c:	1a80      	subs	r0, r0, r2
    ef3e:	4770      	bx	lr
    ef40:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
    ef44:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
    ef48:	4281      	cmp	r1, r0
    ef4a:	d200      	bcs.n	ef4e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    ef4c:	4608      	mov	r0, r1
    ef4e:	4770      	bx	lr
    ef50:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    ef54:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    ef58:	4281      	cmp	r1, r0
    ef5a:	d200      	bcs.n	ef5e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    ef5c:	4608      	mov	r0, r1
    ef5e:	4770      	bx	lr
    ef60:	2196      	movs	r1, #150	; 0x96
    ef62:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
    ef66:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
    ef6a:	f000 b800 	b.w	ef6e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    ef6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef72:	460d      	mov	r5, r1
    ef74:	4606      	mov	r6, r0
    ef76:	4698      	mov	r8, r3
    ef78:	4617      	mov	r7, r2
    ef7a:	8f00      	ldrh	r0, [r0, #56]	; 0x38
    ef7c:	4611      	mov	r1, r2
    ef7e:	f7ff ffd1 	bl	ef24 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    ef82:	4604      	mov	r4, r0
    ef84:	4639      	mov	r1, r7
    ef86:	4630      	mov	r0, r6
    ef88:	f7ff ffe2 	bl	ef50 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    ef8c:	42a0      	cmp	r0, r4
    ef8e:	d200      	bcs.n	ef92 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    ef90:	4604      	mov	r4, r0
    ef92:	f8b6 0040 	ldrh.w	r0, [r6, #64]	; 0x40
    ef96:	4641      	mov	r1, r8
    ef98:	f7ff ffc4 	bl	ef24 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    ef9c:	4607      	mov	r7, r0
    ef9e:	4641      	mov	r1, r8
    efa0:	4630      	mov	r0, r6
    efa2:	f7ff ffcd 	bl	ef40 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    efa6:	42b8      	cmp	r0, r7
    efa8:	d300      	bcc.n	efac <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa0>
    efaa:	4638      	mov	r0, r7
    efac:	4420      	add	r0, r4
    efae:	4428      	add	r0, r5
    efb0:	1d80      	adds	r0, r0, #6
    efb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000efb6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    efb6:	b510      	push	{r4, lr}
    efb8:	4604      	mov	r4, r0
    efba:	2108      	movs	r1, #8
    efbc:	4620      	mov	r0, r4
    efbe:	f7f6 f8cf 	bl	5160 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    efc2:	6820      	ldr	r0, [r4, #0]
    efc4:	2800      	cmp	r0, #0
    efc6:	d102      	bne.n	efce <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x18>
    efc8:	6860      	ldr	r0, [r4, #4]
    efca:	2800      	cmp	r0, #0
    efcc:	d0f5      	beq.n	efba <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
    efce:	bd10      	pop	{r4, pc}
    efd0:	2801      	cmp	r0, #1
    efd2:	d102      	bne.n	efda <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x24>
    efd4:	7948      	ldrb	r0, [r1, #5]
    efd6:	0980      	lsrs	r0, r0, #6
    efd8:	d001      	beq.n	efde <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x28>
    efda:	2000      	movs	r0, #0
    efdc:	4770      	bx	lr
    efde:	2001      	movs	r0, #1
    efe0:	4770      	bx	lr
    efe2:	2801      	cmp	r0, #1
    efe4:	d106      	bne.n	eff4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    efe6:	7948      	ldrb	r0, [r1, #5]
    efe8:	2101      	movs	r1, #1
    efea:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    efee:	d101      	bne.n	eff4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    eff0:	2001      	movs	r0, #1
    eff2:	4770      	bx	lr
    eff4:	2000      	movs	r0, #0
    eff6:	4770      	bx	lr
    eff8:	2802      	cmp	r0, #2
    effa:	d003      	beq.n	f004 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
    effc:	2803      	cmp	r0, #3
    effe:	d001      	beq.n	f004 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
    f000:	2000      	movs	r0, #0
    f002:	4770      	bx	lr
    f004:	2001      	movs	r0, #1
    f006:	4770      	bx	lr

0000f008 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    f008:	b510      	push	{r4, lr}
    f00a:	4604      	mov	r4, r0
    f00c:	7c00      	ldrb	r0, [r0, #16]
    f00e:	f7ff fff3 	bl	eff8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    f012:	b148      	cbz	r0, f028 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    f014:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    f018:	f104 0150 	add.w	r1, r4, #80	; 0x50
    f01c:	f7ff fa26 	bl	e46c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    f020:	2808      	cmp	r0, #8
    f022:	d001      	beq.n	f028 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    f024:	2001      	movs	r0, #1
    f026:	bd10      	pop	{r4, pc}
    f028:	7c20      	ldrb	r0, [r4, #16]
    f02a:	b118      	cbz	r0, f034 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    f02c:	2802      	cmp	r0, #2
    f02e:	d001      	beq.n	f034 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    f030:	7de0      	ldrb	r0, [r4, #23]
    f032:	bd10      	pop	{r4, pc}
    f034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f038:	2000      	movs	r0, #0
    f03a:	f7f6 bec9 	b.w	5dd0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000f03e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    f03e:	b508      	push	{r3, lr}
    f040:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
    f044:	f88d 1000 	strb.w	r1, [sp]
    f048:	9900      	ldr	r1, [sp, #0]
    f04a:	9100      	str	r1, [sp, #0]
    f04c:	f89d 1000 	ldrb.w	r1, [sp]
    f050:	b109      	cbz	r1, f056 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    f052:	2001      	movs	r0, #1
    f054:	bd08      	pop	{r3, pc}
    f056:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    f05a:	f88d 0000 	strb.w	r0, [sp]
    f05e:	9800      	ldr	r0, [sp, #0]
    f060:	9000      	str	r0, [sp, #0]
    f062:	f89d 0000 	ldrb.w	r0, [sp]
    f066:	2000      	movs	r0, #0
    f068:	bd08      	pop	{r3, pc}

0000f06a <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    f06a:	20ff      	movs	r0, #255	; 0xff
    f06c:	7008      	strb	r0, [r1, #0]
    f06e:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    f070:	f7ff b90d 	b.w	e28e <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000f074 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    f074:	b51c      	push	{r2, r3, r4, lr}
    f076:	4604      	mov	r4, r0
    f078:	22d4      	movs	r2, #212	; 0xd4
    f07a:	2100      	movs	r1, #0
    f07c:	f7fe f805 	bl	d08a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f080:	20ff      	movs	r0, #255	; 0xff
    f082:	7020      	strb	r0, [r4, #0]
    f084:	207f      	movs	r0, #127	; 0x7f
    f086:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    f08a:	2013      	movs	r0, #19
    f08c:	8060      	strh	r0, [r4, #2]
    f08e:	f7f6 fca7 	bl	59e0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    f092:	4601      	mov	r1, r0
    f094:	62e0      	str	r0, [r4, #44]	; 0x2c
    f096:	2200      	movs	r2, #0
    f098:	4668      	mov	r0, sp
    f09a:	f7ff f862 	bl	e162 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f09e:	2200      	movs	r2, #0
    f0a0:	2101      	movs	r1, #1
    f0a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f0a4:	f7ff f8d3 	bl	e24e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f0a8:	2204      	movs	r2, #4
    f0aa:	4668      	mov	r0, sp
    f0ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f0ae:	f7ff f858 	bl	e162 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f0b2:	2200      	movs	r2, #0
    f0b4:	4611      	mov	r1, r2
    f0b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f0b8:	f7ff f8c9 	bl	e24e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f0bc:	2000      	movs	r0, #0
    f0be:	73a0      	strb	r0, [r4, #14]
    f0c0:	f104 0020 	add.w	r0, r4, #32
    f0c4:	e8bd 401c 	ldmia.w	sp!, {r2, r3, r4, lr}
    f0c8:	f000 b96e 	b.w	f3a8 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000f0cc <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    f0cc:	7880      	ldrb	r0, [r0, #2]
    f0ce:	f3c0 0080 	ubfx	r0, r0, #2, #1
    f0d2:	b108      	cbz	r0, f0d8 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    f0d4:	2000      	movs	r0, #0
    f0d6:	4770      	bx	lr
    f0d8:	201f      	movs	r0, #31
    f0da:	4770      	bx	lr

0000f0dc <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    f0dc:	f7f8 bfae 	b.w	803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>

0000f0e0 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    f0e0:	6880      	ldr	r0, [r0, #8]
    f0e2:	4770      	bx	lr

0000f0e4 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    f0e4:	2001      	movs	r0, #1
    f0e6:	4770      	bx	lr

0000f0e8 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    f0e8:	b510      	push	{r4, lr}
    f0ea:	4604      	mov	r4, r0
    f0ec:	3020      	adds	r0, #32
    f0ee:	f000 f91b 	bl	f328 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    f0f2:	8861      	ldrh	r1, [r4, #2]
    f0f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0f8:	2228      	movs	r2, #40	; 0x28
    f0fa:	f7f9 b97b 	b.w	83f4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000f0fe <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    f0fe:	2200      	movs	r2, #0
    f100:	6282      	str	r2, [r0, #40]	; 0x28
    f102:	8843      	ldrh	r3, [r0, #2]
    f104:	2b1d      	cmp	r3, #29
    f106:	d001      	beq.n	f10c <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    f108:	7341      	strb	r1, [r0, #13]
    f10a:	4770      	bx	lr
    f10c:	7342      	strb	r2, [r0, #13]
    f10e:	4770      	bx	lr

0000f110 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    f110:	b510      	push	{r4, lr}
    f112:	2400      	movs	r4, #0
    f114:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    f116:	f7ff f888 	bl	e22a <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    f11a:	b100      	cbz	r0, f11e <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    f11c:	2001      	movs	r0, #1
    f11e:	4384      	bics	r4, r0
    f120:	f084 0001 	eor.w	r0, r4, #1
    f124:	bd10      	pop	{r4, pc}

0000f126 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    f126:	2000      	movs	r0, #0
    f128:	4770      	bx	lr

0000f12a <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    f12a:	7880      	ldrb	r0, [r0, #2]
    f12c:	f000 0001 	and.w	r0, r0, #1
    f130:	4770      	bx	lr

0000f132 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    f132:	7880      	ldrb	r0, [r0, #2]
    f134:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    f138:	4770      	bx	lr

0000f13a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    f13a:	2001      	movs	r0, #1
    f13c:	4770      	bx	lr

0000f13e <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    f13e:	7880      	ldrb	r0, [r0, #2]
    f140:	f3c0 0040 	ubfx	r0, r0, #1, #1
    f144:	4770      	bx	lr

0000f146 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    f146:	f990 000e 	ldrsb.w	r0, [r0, #14]
    f14a:	4770      	bx	lr

0000f14c <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    f14c:	7800      	ldrb	r0, [r0, #0]
    f14e:	28ff      	cmp	r0, #255	; 0xff
    f150:	d001      	beq.n	f156 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    f152:	2001      	movs	r0, #1
    f154:	4770      	bx	lr
    f156:	2000      	movs	r0, #0
    f158:	4770      	bx	lr

0000f15a <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    f15a:	680a      	ldr	r2, [r1, #0]
    f15c:	f840 2f11 	str.w	r2, [r0, #17]!
    f160:	8889      	ldrh	r1, [r1, #4]
    f162:	8081      	strh	r1, [r0, #4]
    f164:	2101      	movs	r1, #1
    f166:	7181      	strb	r1, [r0, #6]
    f168:	4770      	bx	lr

0000f16a <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    f16a:	7b00      	ldrb	r0, [r0, #12]
    f16c:	4770      	bx	lr

0000f16e <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    f16e:	2001      	movs	r0, #1
    f170:	4770      	bx	lr

0000f172 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    f172:	61c1      	str	r1, [r0, #28]
    f174:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
    f178:	724a      	strb	r2, [r1, #9]
    f17a:	f8d0 2049 	ldr.w	r2, [r0, #73]	; 0x49
    f17e:	f8c1 200a 	str.w	r2, [r1, #10]
    f182:	f8b0 004d 	ldrh.w	r0, [r0, #77]	; 0x4d
    f186:	81c8      	strh	r0, [r1, #14]
    f188:	4770      	bx	lr

0000f18a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    f18a:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    f18e:	4770      	bx	lr

0000f190 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    f190:	b510      	push	{r4, lr}
    f192:	4604      	mov	r4, r0
    f194:	7880      	ldrb	r0, [r0, #2]
    f196:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    f19a:	b140      	cbz	r0, f1ae <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    f19c:	233c      	movs	r3, #60	; 0x3c
    f19e:	22ff      	movs	r2, #255	; 0xff
    f1a0:	4620      	mov	r0, r4
    f1a2:	69e1      	ldr	r1, [r4, #28]
    f1a4:	f7f8 ff76 	bl	8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>
    f1a8:	20ff      	movs	r0, #255	; 0xff
    f1aa:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
    f1ae:	78a0      	ldrb	r0, [r4, #2]
    f1b0:	07c0      	lsls	r0, r0, #31
    f1b2:	f7f8 f871 	bl	7298 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f1b6:	2001      	movs	r0, #1
    f1b8:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
    f1bc:	bd10      	pop	{r4, pc}

0000f1be <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    f1be:	7bc0      	ldrb	r0, [r0, #15]
    f1c0:	2800      	cmp	r0, #0
    f1c2:	d000      	beq.n	f1c6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    f1c4:	2001      	movs	r0, #1
    f1c6:	4770      	bx	lr
    f1c8:	b510      	push	{r4, lr}
    f1ca:	f7ff f94f 	bl	e46c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    f1ce:	4604      	mov	r4, r0
    f1d0:	f7f7 fca8 	bl	6b24 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    f1d4:	b138      	cbz	r0, f1e6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    f1d6:	4620      	mov	r0, r4
    f1d8:	f7f7 fbdc 	bl	6994 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    f1dc:	b118      	cbz	r0, f1e6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    f1de:	2110      	movs	r1, #16
    f1e0:	f7ff fb24 	bl	e82c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    f1e4:	b108      	cbz	r0, f1ea <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    f1e6:	2000      	movs	r0, #0
    f1e8:	bd10      	pop	{r4, pc}
    f1ea:	2001      	movs	r0, #1
    f1ec:	bd10      	pop	{r4, pc}
    f1ee:	2101      	movs	r1, #1
    f1f0:	f7f8 bbac 	b.w	794c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    f1f4:	2101      	movs	r1, #1
    f1f6:	f7f8 bba9 	b.w	794c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    f1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f1fe:	4604      	mov	r4, r0
    f200:	2700      	movs	r7, #0
    f202:	704f      	strb	r7, [r1, #1]
    f204:	2011      	movs	r0, #17
    f206:	460d      	mov	r5, r1
    f208:	7008      	strb	r0, [r1, #0]
    f20a:	2220      	movs	r2, #32
    f20c:	f104 0166 	add.w	r1, r4, #102	; 0x66
    f210:	1d28      	adds	r0, r5, #4
    f212:	f7fd fec0 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f216:	2601      	movs	r6, #1
    f218:	722e      	strb	r6, [r5, #8]
    f21a:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    f21e:	7928      	ldrb	r0, [r5, #4]
    f220:	2800      	cmp	r0, #0
    f222:	d112      	bne.n	f24a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8c>
    f224:	88e8      	ldrh	r0, [r5, #6]
    f226:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    f22a:	69e0      	ldr	r0, [r4, #28]
    f22c:	f890 108d 	ldrb.w	r1, [r0, #141]	; 0x8d
    f230:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
    f234:	21ff      	movs	r1, #255	; 0xff
    f236:	f884 108e 	strb.w	r1, [r4, #142]	; 0x8e
    f23a:	8800      	ldrh	r0, [r0, #0]
    f23c:	f7f6 fb10 	bl	5860 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f240:	f7fe fdaf 	bl	dda2 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    f244:	69e0      	ldr	r0, [r4, #28]
    f246:	f880 6078 	strb.w	r6, [r0, #120]	; 0x78
    f24a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f24e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f252:	4604      	mov	r4, r0
    f254:	460f      	mov	r7, r1
    f256:	7e40      	ldrb	r0, [r0, #25]
    f258:	f7f7 fb5c 	bl	6914 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    f25c:	4606      	mov	r6, r0
    f25e:	7e20      	ldrb	r0, [r4, #24]
    f260:	f104 0549 	add.w	r5, r4, #73	; 0x49
    f264:	b120      	cbz	r0, f270 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb2>
    f266:	b11e      	cbz	r6, f270 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb2>
    f268:	7e60      	ldrb	r0, [r4, #25]
    f26a:	f7f7 fb47 	bl	68fc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    f26e:	b1a0      	cbz	r0, f29a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xdc>
    f270:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    f274:	2800      	cmp	r0, #0
    f276:	d024      	beq.n	f2c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x104>
    f278:	7ea0      	ldrb	r0, [r4, #26]
    f27a:	2800      	cmp	r0, #0
    f27c:	d021      	beq.n	f2c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x104>
    f27e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    f282:	4629      	mov	r1, r5
    f284:	f7ff fead 	bl	efe2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    f288:	b1a8      	cbz	r0, f2b6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf8>
    f28a:	f7f7 fb33 	bl	68f4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    f28e:	463a      	mov	r2, r7
    f290:	4629      	mov	r1, r5
    f292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f296:	f7ff b881 	b.w	e39c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    f29a:	2001      	movs	r0, #1
    f29c:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    f2a0:	463a      	mov	r2, r7
    f2a2:	4629      	mov	r1, r5
    f2a4:	4630      	mov	r0, r6
    f2a6:	f7ff f879 	bl	e39c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    f2aa:	7e61      	ldrb	r1, [r4, #25]
    f2ac:	4628      	mov	r0, r5
    f2ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f2b2:	f7f7 bb3b 	b.w	692c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    f2b6:	4639      	mov	r1, r7
    f2b8:	4628      	mov	r0, r5
    f2ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f2be:	f7ff b85c 	b.w	e37a <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    f2c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f2c6:	b510      	push	{r4, lr}
    f2c8:	4604      	mov	r4, r0
    f2ca:	4608      	mov	r0, r1
    f2cc:	f7fc ff9c 	bl	c208 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    f2d0:	7921      	ldrb	r1, [r4, #4]
    f2d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f2d6:	2025      	movs	r0, #37	; 0x25
    f2d8:	f7fc bf6c 	b.w	c1b4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    f2dc:	b510      	push	{r4, lr}
    f2de:	4604      	mov	r4, r0
    f2e0:	3026      	adds	r0, #38	; 0x26
    f2e2:	f7fc ff47 	bl	c174 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    f2e6:	2800      	cmp	r0, #0
    f2e8:	d102      	bne.n	f2f0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    f2ea:	207f      	movs	r0, #127	; 0x7f
    f2ec:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    f2f0:	bd10      	pop	{r4, pc}
    f2f2:	7802      	ldrb	r2, [r0, #0]
    f2f4:	2320      	movs	r3, #32
    f2f6:	f022 0220 	bic.w	r2, r2, #32
    f2fa:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    f2fe:	430a      	orrs	r2, r1
    f300:	7002      	strb	r2, [r0, #0]
    f302:	4770      	bx	lr

0000f304 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    f304:	b570      	push	{r4, r5, r6, lr}
    f306:	7001      	strb	r1, [r0, #0]
    f308:	7042      	strb	r2, [r0, #1]
    f30a:	4614      	mov	r4, r2
    f30c:	460d      	mov	r5, r1
    f30e:	7880      	ldrb	r0, [r0, #2]
    f310:	f000 f87f 	bl	f412 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f314:	fb10 f005 	smulbb	r0, r0, r5
    f318:	4360      	muls	r0, r4
    f31a:	28ff      	cmp	r0, #255	; 0xff
    f31c:	d303      	bcc.n	f326 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    f31e:	215c      	movs	r1, #92	; 0x5c
    f320:	202e      	movs	r0, #46	; 0x2e
    f322:	f7f5 fe83 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f326:	bd70      	pop	{r4, r5, r6, pc}

0000f328 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    f328:	b510      	push	{r4, lr}
    f32a:	4604      	mov	r4, r0
    f32c:	7880      	ldrb	r0, [r0, #2]
    f32e:	f000 f870 	bl	f412 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f332:	7861      	ldrb	r1, [r4, #1]
    f334:	7822      	ldrb	r2, [r4, #0]
    f336:	fb11 f102 	smulbb	r1, r1, r2
    f33a:	4348      	muls	r0, r1
    f33c:	b2c0      	uxtb	r0, r0
    f33e:	bd10      	pop	{r4, pc}

0000f340 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    f340:	b510      	push	{r4, lr}
    f342:	4604      	mov	r4, r0
    f344:	f000 f84d 	bl	f3e2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    f348:	7961      	ldrb	r1, [r4, #5]
    f34a:	1c49      	adds	r1, r1, #1
    f34c:	b2c9      	uxtb	r1, r1
    f34e:	7161      	strb	r1, [r4, #5]
    f350:	7862      	ldrb	r2, [r4, #1]
    f352:	4291      	cmp	r1, r2
    f354:	d10b      	bne.n	f36e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    f356:	2200      	movs	r2, #0
    f358:	7162      	strb	r2, [r4, #5]
    f35a:	78e1      	ldrb	r1, [r4, #3]
    f35c:	4301      	orrs	r1, r0
    f35e:	70e1      	strb	r1, [r4, #3]
    f360:	78a3      	ldrb	r3, [r4, #2]
    f362:	4299      	cmp	r1, r3
    f364:	d103      	bne.n	f36e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    f366:	70e2      	strb	r2, [r4, #3]
    f368:	7921      	ldrb	r1, [r4, #4]
    f36a:	1c49      	adds	r1, r1, #1
    f36c:	7121      	strb	r1, [r4, #4]
    f36e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f372:	f000 b825 	b.w	f3c0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000f376 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    f376:	7081      	strb	r1, [r0, #2]
    f378:	4770      	bx	lr

0000f37a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    f37a:	b570      	push	{r4, r5, r6, lr}
    f37c:	4604      	mov	r4, r0
    f37e:	7880      	ldrb	r0, [r0, #2]
    f380:	f000 f847 	bl	f412 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f384:	7861      	ldrb	r1, [r4, #1]
    f386:	fb11 f500 	smulbb	r5, r1, r0
    f38a:	78e0      	ldrb	r0, [r4, #3]
    f38c:	f000 f841 	bl	f412 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f390:	7861      	ldrb	r1, [r4, #1]
    f392:	7962      	ldrb	r2, [r4, #5]
    f394:	fb10 2001 	smlabb	r0, r0, r1, r2
    f398:	7821      	ldrb	r1, [r4, #0]
    f39a:	7922      	ldrb	r2, [r4, #4]
    f39c:	1a89      	subs	r1, r1, r2
    f39e:	fb11 f105 	smulbb	r1, r1, r5
    f3a2:	1a08      	subs	r0, r1, r0
    f3a4:	b2c0      	uxtb	r0, r0
    f3a6:	bd70      	pop	{r4, r5, r6, pc}

0000f3a8 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    f3a8:	2100      	movs	r1, #0
    f3aa:	6001      	str	r1, [r0, #0]
    f3ac:	8081      	strh	r1, [r0, #4]
    f3ae:	2101      	movs	r1, #1
    f3b0:	7041      	strb	r1, [r0, #1]
    f3b2:	7001      	strb	r1, [r0, #0]
    f3b4:	4770      	bx	lr

0000f3b6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    f3b6:	2100      	movs	r1, #0
    f3b8:	70c1      	strb	r1, [r0, #3]
    f3ba:	7141      	strb	r1, [r0, #5]
    f3bc:	7101      	strb	r1, [r0, #4]
    f3be:	4770      	bx	lr
    f3c0:	b510      	push	{r4, lr}
    f3c2:	2801      	cmp	r0, #1
    f3c4:	d007      	beq.n	f3d6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    f3c6:	2802      	cmp	r0, #2
    f3c8:	d007      	beq.n	f3da <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    f3ca:	2804      	cmp	r0, #4
    f3cc:	d007      	beq.n	f3de <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    f3ce:	2139      	movs	r1, #57	; 0x39
    f3d0:	202e      	movs	r0, #46	; 0x2e
    f3d2:	f7f5 fe2b 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3d6:	2025      	movs	r0, #37	; 0x25
    f3d8:	bd10      	pop	{r4, pc}
    f3da:	2026      	movs	r0, #38	; 0x26
    f3dc:	bd10      	pop	{r4, pc}
    f3de:	2027      	movs	r0, #39	; 0x27
    f3e0:	bd10      	pop	{r4, pc}
    f3e2:	4601      	mov	r1, r0
    f3e4:	2000      	movs	r0, #0
    f3e6:	788a      	ldrb	r2, [r1, #2]
    f3e8:	07d3      	lsls	r3, r2, #31
    f3ea:	d002      	beq.n	f3f2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    f3ec:	78cb      	ldrb	r3, [r1, #3]
    f3ee:	07db      	lsls	r3, r3, #31
    f3f0:	d006      	beq.n	f400 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    f3f2:	0793      	lsls	r3, r2, #30
    f3f4:	d506      	bpl.n	f404 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    f3f6:	78cb      	ldrb	r3, [r1, #3]
    f3f8:	079b      	lsls	r3, r3, #30
    f3fa:	d403      	bmi.n	f404 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    f3fc:	2002      	movs	r0, #2
    f3fe:	4770      	bx	lr
    f400:	2001      	movs	r0, #1
    f402:	4770      	bx	lr
    f404:	0752      	lsls	r2, r2, #29
    f406:	d5fc      	bpl.n	f402 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    f408:	78c9      	ldrb	r1, [r1, #3]
    f40a:	0749      	lsls	r1, r1, #29
    f40c:	d4f9      	bmi.n	f402 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    f40e:	2004      	movs	r0, #4
    f410:	4770      	bx	lr
    f412:	f3c0 0180 	ubfx	r1, r0, #2, #1
    f416:	f3c0 0240 	ubfx	r2, r0, #1, #1
    f41a:	4411      	add	r1, r2
    f41c:	f000 0001 	and.w	r0, r0, #1
    f420:	4408      	add	r0, r1
    f422:	4770      	bx	lr

0000f424 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    f424:	f240 315a 	movw	r1, #858	; 0x35a
    f428:	4348      	muls	r0, r1
    f42a:	4770      	bx	lr

0000f42c <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    f42c:	f240 20ef 	movw	r0, #751	; 0x2ef
    f430:	4770      	bx	lr
    f432:	020e      	.short	0x020e
    f434:	0630041c 	.word	0x0630041c
    f438:	035a0c60 	.word	0x035a0c60
    f43c:	05c506b4 	.word	0x05c506b4
    f440:	12250bf5 	.word	0x12250bf5
    f444:	03b101a3 	.word	0x03b101a3
    f448:	02ef05bf 	.word	0x02ef05bf
    f44c:	09a30649 	.word	0x09a30649

0000f450 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    f450:	b510      	push	{r4, lr}
    f452:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    f456:	b109      	cbz	r1, f45c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    f458:	2000      	movs	r0, #0
    f45a:	bd10      	pop	{r4, pc}
    f45c:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    f460:	b949      	cbnz	r1, f476 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    f462:	f890 10a8 	ldrb.w	r1, [r0, #168]	; 0xa8
    f466:	b131      	cbz	r1, f476 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    f468:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
    f46c:	428a      	cmp	r2, r1
    f46e:	d902      	bls.n	f476 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    f470:	f7ff fe8e 	bl	f190 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f474:	e7f0      	b.n	f458 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    f476:	2001      	movs	r0, #1
    f478:	bd10      	pop	{r4, pc}

0000f47a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    f47a:	b510      	push	{r4, lr}
    f47c:	b131      	cbz	r1, f48c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    f47e:	2901      	cmp	r1, #1
    f480:	d008      	beq.n	f494 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    f482:	f240 7192 	movw	r1, #1938	; 0x792
    f486:	2030      	movs	r0, #48	; 0x30
    f488:	f7f5 fdd0 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f48c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f490:	f000 b9da 	b.w	f848 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x320>
    f494:	2100      	movs	r1, #0
    f496:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
    f49a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f49e:	f000 b93e 	b.w	f71e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f6>

0000f4a2 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    f4a2:	b510      	push	{r4, lr}
    f4a4:	4604      	mov	r4, r0
    f4a6:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    f4aa:	2800      	cmp	r0, #0
    f4ac:	d019      	beq.n	f4e2 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    f4ae:	2001      	movs	r0, #1
    f4b0:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
    f4b4:	4601      	mov	r1, r0
    f4b6:	4620      	mov	r0, r4
    f4b8:	f7ff fe67 	bl	f18a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    f4bc:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    f4c0:	b170      	cbz	r0, f4e0 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    f4c2:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    f4c6:	f7f3 fe4d 	bl	3164 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    f4ca:	7820      	ldrb	r0, [r4, #0]
    f4cc:	f7f3 ff9c 	bl	3408 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    f4d0:	f814 09a0 	ldrb.w	r0, [r4], #-160
    f4d4:	f7f3 ff76 	bl	33c4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f4d8:	b120      	cbz	r0, f4e4 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    f4da:	2000      	movs	r0, #0
    f4dc:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
    f4e0:	2000      	movs	r0, #0
    f4e2:	bd10      	pop	{r4, pc}
    f4e4:	f240 2107 	movw	r1, #519	; 0x207
    f4e8:	2030      	movs	r0, #48	; 0x30
    f4ea:	f7f5 fd9f 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f4ee <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    f4ee:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    f4f2:	4770      	bx	lr

0000f4f4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    f4f4:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    f4f8:	4770      	bx	lr

0000f4fa <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    f4fa:	b50e      	push	{r1, r2, r3, lr}
    f4fc:	4669      	mov	r1, sp
    f4fe:	2001      	movs	r0, #1
    f500:	f7fe fd78 	bl	dff4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f504:	b138      	cbz	r0, f516 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1c>
    f506:	f44f 71a1 	mov.w	r1, #322	; 0x142
    f50a:	2030      	movs	r0, #48	; 0x30
    f50c:	f7f5 fd8e 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f510:	9802      	ldr	r0, [sp, #8]
    f512:	f7ff ffc6 	bl	f4a2 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    f516:	4668      	mov	r0, sp
    f518:	f7f5 ffc0 	bl	549c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f51c:	2800      	cmp	r0, #0
    f51e:	d0f7      	beq.n	f510 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x16>
    f520:	f7f9 f8f6 	bl	8710 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    f524:	2000      	movs	r0, #0
    f526:	bd0e      	pop	{r1, r2, r3, pc}

0000f528 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    f528:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f52a:	4604      	mov	r4, r0
    f52c:	f890 0113 	ldrb.w	r0, [r0, #275]	; 0x113
    f530:	2800      	cmp	r0, #0
    f532:	d153      	bne.n	f5dc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    f534:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    f538:	2803      	cmp	r0, #3
    f53a:	d14f      	bne.n	f5dc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    f53c:	f7fd fbb6 	bl	ccac <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    f540:	4601      	mov	r1, r0
    f542:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    f546:	f7f3 f99f 	bl	2888 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    f54a:	2800      	cmp	r0, #0
    f54c:	dd46      	ble.n	f5dc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    f54e:	6921      	ldr	r1, [r4, #16]
    f550:	b111      	cbz	r1, f558 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30>
    f552:	fbb0 f0f1 	udiv	r0, r0, r1
    f556:	e000      	b.n	f55a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x32>
    f558:	2000      	movs	r0, #0
    f55a:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    f55e:	1c40      	adds	r0, r0, #1
    f560:	4408      	add	r0, r1
    f562:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
    f566:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    f56a:	f8b4 110c 	ldrh.w	r1, [r4, #268]	; 0x10c
    f56e:	1a08      	subs	r0, r1, r0
    f570:	b200      	sxth	r0, r0
    f572:	2800      	cmp	r0, #0
    f574:	dd32      	ble.n	f5dc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    f576:	f894 0178 	ldrb.w	r0, [r4, #376]	; 0x178
    f57a:	f7f3 fdf3 	bl	3164 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    f57e:	2800      	cmp	r0, #0
    f580:	d02c      	beq.n	f5dc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    f582:	20ff      	movs	r0, #255	; 0xff
    f584:	f884 0159 	strb.w	r0, [r4, #345]	; 0x159
    f588:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    f58c:	f8b4 10ac 	ldrh.w	r1, [r4, #172]	; 0xac
    f590:	ae01      	add	r6, sp, #4
    f592:	1a40      	subs	r0, r0, r1
    f594:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    f598:	1e40      	subs	r0, r0, #1
    f59a:	4408      	add	r0, r1
    f59c:	b285      	uxth	r5, r0
    f59e:	e017      	b.n	f5d0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xa8>
    f5a0:	9600      	str	r6, [sp, #0]
    f5a2:	f8b4 1154 	ldrh.w	r1, [r4, #340]	; 0x154
    f5a6:	2300      	movs	r3, #0
    f5a8:	2201      	movs	r2, #1
    f5aa:	4620      	mov	r0, r4
    f5ac:	f7f9 f980 	bl	88b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    f5b0:	2800      	cmp	r0, #0
    f5b2:	d013      	beq.n	f5dc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    f5b4:	2801      	cmp	r0, #1
    f5b6:	d004      	beq.n	f5c2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x9a>
    f5b8:	f240 6105 	movw	r1, #1541	; 0x605
    f5bc:	2030      	movs	r0, #48	; 0x30
    f5be:	f7f5 fd35 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5c2:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    f5c6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    f5ca:	4408      	add	r0, r1
    f5cc:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
    f5d0:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    f5d4:	1a28      	subs	r0, r5, r0
    f5d6:	b200      	sxth	r0, r0
    f5d8:	2800      	cmp	r0, #0
    f5da:	dae1      	bge.n	f5a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x78>
    f5dc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f5de:	2000      	movs	r0, #0
    f5e0:	4770      	bx	lr
    f5e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f5e6:	4604      	mov	r4, r0
    f5e8:	2501      	movs	r5, #1
    f5ea:	f000 f90e 	bl	f80a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2e2>
    f5ee:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    f5f2:	2000      	movs	r0, #0
    f5f4:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    f5f8:	2701      	movs	r7, #1
    f5fa:	f884 70c3 	strb.w	r7, [r4, #195]	; 0xc3
    f5fe:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    f602:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
    f606:	b160      	cbz	r0, f622 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xfa>
    f608:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f60c:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    f610:	f7f3 f908 	bl	2824 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    f614:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    f618:	2100      	movs	r1, #0
    f61a:	4630      	mov	r0, r6
    f61c:	f7ff f84c 	bl	e6b8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f620:	e00f      	b.n	f642 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x11a>
    f622:	4620      	mov	r0, r4
    f624:	f7ff fd5c 	bl	f0e0 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f628:	4605      	mov	r5, r0
    f62a:	4629      	mov	r1, r5
    f62c:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    f630:	f7f3 f8f8 	bl	2824 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    f634:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    f638:	4629      	mov	r1, r5
    f63a:	4630      	mov	r0, r6
    f63c:	f7ff f83c 	bl	e6b8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f640:	1c45      	adds	r5, r0, #1
    f642:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    f646:	1c41      	adds	r1, r0, #1
    f648:	290a      	cmp	r1, #10
    f64a:	d202      	bcs.n	f652 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x12a>
    f64c:	4428      	add	r0, r5
    f64e:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    f652:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    f656:	b138      	cbz	r0, f668 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x140>
    f658:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    f65c:	1c40      	adds	r0, r0, #1
    f65e:	280a      	cmp	r0, #10
    f660:	d302      	bcc.n	f668 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x140>
    f662:	f884 70c2 	strb.w	r7, [r4, #194]	; 0xc2
    f666:	e002      	b.n	f66e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x146>
    f668:	2002      	movs	r0, #2
    f66a:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    f66e:	2100      	movs	r1, #0
    f670:	4620      	mov	r0, r4
    f672:	f000 f823 	bl	f6bc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x194>
    f676:	b120      	cbz	r0, f682 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15a>
    f678:	4620      	mov	r0, r4
    f67a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f67e:	f000 b80e 	b.w	f69e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x176>
    f682:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    f686:	4631      	mov	r1, r6
    f688:	f000 f8bd 	bl	f806 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2de>
    f68c:	2800      	cmp	r0, #0
    f68e:	d104      	bne.n	f69a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x172>
    f690:	f240 61a6 	movw	r1, #1702	; 0x6a6
    f694:	2030      	movs	r0, #48	; 0x30
    f696:	f7f5 fcc9 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f69e:	b510      	push	{r4, lr}
    f6a0:	4604      	mov	r4, r0
    f6a2:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    f6a6:	f7f3 fe8d 	bl	33c4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f6aa:	2000      	movs	r0, #0
    f6ac:	7520      	strb	r0, [r4, #20]
    f6ae:	bd10      	pop	{r4, pc}
    f6b0:	b510      	push	{r4, lr}
    f6b2:	f7ff fd19 	bl	f0e8 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    f6b6:	f200 100d 	addw	r0, r0, #269	; 0x10d
    f6ba:	bd10      	pop	{r4, pc}
    f6bc:	b570      	push	{r4, r5, r6, lr}
    f6be:	4604      	mov	r4, r0
    f6c0:	f890 00d0 	ldrb.w	r0, [r0, #208]	; 0xd0
    f6c4:	460d      	mov	r5, r1
    f6c6:	b108      	cbz	r0, f6cc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1a4>
    f6c8:	2001      	movs	r0, #1
    f6ca:	bd70      	pop	{r4, r5, r6, pc}
    f6cc:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    f6d0:	b1a8      	cbz	r0, f6fe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    f6d2:	4620      	mov	r0, r4
    f6d4:	f7ff fd04 	bl	f0e0 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f6d8:	4405      	add	r5, r0
    f6da:	4620      	mov	r0, r4
    f6dc:	f7ff ffe8 	bl	f6b0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x188>
    f6e0:	1941      	adds	r1, r0, r5
    f6e2:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    f6e6:	4288      	cmp	r0, r1
    f6e8:	d206      	bcs.n	f6f8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d0>
    f6ea:	2001      	movs	r0, #1
    f6ec:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    f6f0:	4620      	mov	r0, r4
    f6f2:	f7ff fd4d 	bl	f190 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f6f6:	e7e7      	b.n	f6c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1a0>
    f6f8:	1b40      	subs	r0, r0, r5
    f6fa:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    f6fe:	2000      	movs	r0, #0
    f700:	bd70      	pop	{r4, r5, r6, pc}
    f702:	b510      	push	{r4, lr}
    f704:	4604      	mov	r4, r0
    f706:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    f70a:	f000 f9eb 	bl	fae4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5bc>
    f70e:	4602      	mov	r2, r0
    f710:	4620      	mov	r0, r4
    f712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f716:	f240 111b 	movw	r1, #283	; 0x11b
    f71a:	f7ff bbb8 	b.w	ee8e <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    f71e:	b510      	push	{r4, lr}
    f720:	f7fc fb9a 	bl	be58 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    f724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f728:	f7f3 bfa4 	b.w	3674 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    f72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f730:	4604      	mov	r4, r0
    f732:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    f736:	2800      	cmp	r0, #0
    f738:	d051      	beq.n	f7de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    f73a:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    f73e:	2803      	cmp	r0, #3
    f740:	d14d      	bne.n	f7de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    f742:	f894 906f 	ldrb.w	r9, [r4, #111]	; 0x6f
    f746:	f001 faf1 	bl	10d2c <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    f74a:	4605      	mov	r5, r0
    f74c:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
    f750:	f7f8 ffd0 	bl	86f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    f754:	4428      	add	r0, r5
    f756:	b286      	uxth	r6, r0
    f758:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
    f75c:	f7f8 ffca 	bl	86f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    f760:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    f764:	fa1f f880 	uxth.w	r8, r0
    f768:	4648      	mov	r0, r9
    f76a:	f7fc fc35 	bl	bfd8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f76e:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
    f772:	1a0d      	subs	r5, r1, r0
    f774:	4648      	mov	r0, r9
    f776:	f7fc fc5b 	bl	c030 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f77a:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    f77e:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f782:	fbb0 f0fa 	udiv	r0, r0, sl
    f786:	1a2d      	subs	r5, r5, r0
    f788:	4648      	mov	r0, r9
    f78a:	f7fc fc25 	bl	bfd8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f78e:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    f792:	1a0f      	subs	r7, r1, r0
    f794:	4648      	mov	r0, r9
    f796:	f7fc fc4b 	bl	c030 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f79a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f79e:	4401      	add	r1, r0
    f7a0:	fbb1 f0fa 	udiv	r0, r1, sl
    f7a4:	1a39      	subs	r1, r7, r0
    f7a6:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    f7aa:	4370      	muls	r0, r6
    f7ac:	fbb0 f2f8 	udiv	r2, r0, r8
    f7b0:	2029      	movs	r0, #41	; 0x29
    f7b2:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    f7b6:	3260      	adds	r2, #96	; 0x60
    f7b8:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    f7bc:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    f7c0:	42a9      	cmp	r1, r5
    f7c2:	d801      	bhi.n	f7c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2a0>
    f7c4:	4285      	cmp	r5, r0
    f7c6:	d901      	bls.n	f7cc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2a4>
    f7c8:	f7f5 f88a 	bl	48e0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    f7cc:	4631      	mov	r1, r6
    f7ce:	6920      	ldr	r0, [r4, #16]
    f7d0:	f7fd faa0 	bl	cd14 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    f7d4:	2100      	movs	r1, #0
    f7d6:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
    f7da:	f884 115a 	strb.w	r1, [r4, #346]	; 0x15a
    f7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f7e2:	b570      	push	{r4, r5, r6, lr}
    f7e4:	460c      	mov	r4, r1
    f7e6:	4605      	mov	r5, r0
    f7e8:	f7fc fc22 	bl	c030 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f7ec:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f7f0:	4408      	add	r0, r1
    f7f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f7f6:	fbb0 f6f1 	udiv	r6, r0, r1
    f7fa:	4628      	mov	r0, r5
    f7fc:	f7fc fbec 	bl	bfd8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f800:	4430      	add	r0, r6
    f802:	4420      	add	r0, r4
    f804:	bd70      	pop	{r4, r5, r6, pc}
    f806:	f7f3 b97b 	b.w	2b00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f80a:	b538      	push	{r3, r4, r5, lr}
    f80c:	4604      	mov	r4, r0
    f80e:	f7ff fc94 	bl	f13a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f812:	b1b8      	cbz	r0, f844 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x31c>
    f814:	4620      	mov	r0, r4
    f816:	f7ff fc88 	bl	f12a <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f81a:	b918      	cbnz	r0, f824 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2fc>
    f81c:	4620      	mov	r0, r4
    f81e:	f7ff fc8e 	bl	f13e <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f822:	b138      	cbz	r0, f834 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30c>
    f824:	2449      	movs	r4, #73	; 0x49
    f826:	4668      	mov	r0, sp
    f828:	f7f5 fae4 	bl	4df4 <mpsl_fem_pa_is_configured>
    f82c:	f89d 0000 	ldrb.w	r0, [sp]
    f830:	b928      	cbnz	r0, f83e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x316>
    f832:	e001      	b.n	f838 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x310>
    f834:	2442      	movs	r4, #66	; 0x42
    f836:	e7f6      	b.n	f826 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2fe>
    f838:	f7fd fcae 	bl	d198 <mpsl_fem_lna_is_configured>
    f83c:	b100      	cbz	r0, f840 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x318>
    f83e:	1de4      	adds	r4, r4, #7
    f840:	4620      	mov	r0, r4
    f842:	bd38      	pop	{r3, r4, r5, pc}
    f844:	206b      	movs	r0, #107	; 0x6b
    f846:	bd38      	pop	{r3, r4, r5, pc}
    f848:	b570      	push	{r4, r5, r6, lr}
    f84a:	4604      	mov	r4, r0
    f84c:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
    f850:	2500      	movs	r5, #0
    f852:	b118      	cbz	r0, f85c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x334>
    f854:	2001      	movs	r0, #1
    f856:	f000 f887 	bl	f968 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x440>
    f85a:	4605      	mov	r5, r0
    f85c:	4620      	mov	r0, r4
    f85e:	f7ff fc3f 	bl	f0e0 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f862:	1941      	adds	r1, r0, r5
    f864:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    f868:	34b8      	adds	r4, #184	; 0xb8
    f86a:	f7f2 ffdb 	bl	2824 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    f86e:	2600      	movs	r6, #0
    f870:	60e0      	str	r0, [r4, #12]
    f872:	f804 6b0b 	strb.w	r6, [r4], #11
    f876:	2001      	movs	r0, #1
    f878:	f804 0901 	strb.w	r0, [r4], #-1
    f87c:	2002      	movs	r0, #2
    f87e:	f804 09c2 	strb.w	r0, [r4], #-194
    f882:	4620      	mov	r0, r4
    f884:	f7ff ffc1 	bl	f80a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2e2>
    f888:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    f88c:	4629      	mov	r1, r5
    f88e:	4620      	mov	r0, r4
    f890:	f7ff ff14 	bl	f6bc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x194>
    f894:	b930      	cbnz	r0, f8a4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x37c>
    f896:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    f89a:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    f89e:	f7ff ffb2 	bl	f806 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2de>
    f8a2:	b128      	cbz	r0, f8b0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x388>
    f8a4:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
    f8a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f8ac:	f7ff bf37 	b.w	f71e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f6>
    f8b0:	f240 61ef 	movw	r1, #1775	; 0x6ef
    f8b4:	2030      	movs	r0, #48	; 0x30
    f8b6:	f7f5 fbb9 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8ba:	b510      	push	{r4, lr}
    f8bc:	4604      	mov	r4, r0
    f8be:	2000      	movs	r0, #0
    f8c0:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
    f8c4:	f894 0178 	ldrb.w	r0, [r4, #376]	; 0x178
    f8c8:	f7f3 fd7c 	bl	33c4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f8cc:	2020      	movs	r0, #32
    f8ce:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
    f8d2:	bd10      	pop	{r4, pc}
    f8d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f8d8:	2500      	movs	r5, #0
    f8da:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
    f8de:	f8d0 60c4 	ldr.w	r6, [r0, #196]	; 0xc4
    f8e2:	4688      	mov	r8, r1
    f8e4:	4604      	mov	r4, r0
    f8e6:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    f8ea:	2701      	movs	r7, #1
    f8ec:	f880 70b5 	strb.w	r7, [r0, #181]	; 0xb5
    f8f0:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    f8f4:	4639      	mov	r1, r7
    f8f6:	34a0      	adds	r4, #160	; 0xa0
    f8f8:	f7f7 fa84 	bl	6e04 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    f8fc:	6860      	ldr	r0, [r4, #4]
    f8fe:	f8c0 616c 	str.w	r6, [r0, #364]	; 0x16c
    f902:	6861      	ldr	r1, [r4, #4]
    f904:	7820      	ldrb	r0, [r4, #0]
    f906:	f881 0178 	strb.w	r0, [r1, #376]	; 0x178
    f90a:	6861      	ldr	r1, [r4, #4]
    f90c:	f8c1 817c 	str.w	r8, [r1, #380]	; 0x17c
    f910:	6860      	ldr	r0, [r4, #4]
    f912:	f8c0 6170 	str.w	r6, [r0, #368]	; 0x170
    f916:	6864      	ldr	r4, [r4, #4]
    f918:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    f91c:	2300      	movs	r3, #0
    f91e:	f8a4 5174 	strh.w	r5, [r4, #372]	; 0x174
    f922:	461a      	mov	r2, r3
    f924:	4619      	mov	r1, r3
    f926:	4620      	mov	r0, r4
    f928:	9500      	str	r5, [sp, #0]
    f92a:	f7f8 ffc1 	bl	88b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    f92e:	b120      	cbz	r0, f93a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x412>
    f930:	f240 211b 	movw	r1, #539	; 0x21b
    f934:	2030      	movs	r0, #48	; 0x30
    f936:	f7f5 fb79 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f93a:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    f93e:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
    f942:	f884 7144 	strb.w	r7, [r4, #324]	; 0x144
    f946:	f8a4 5156 	strh.w	r5, [r4, #342]	; 0x156
    f94a:	f8a4 5154 	strh.w	r5, [r4, #340]	; 0x154
    f94e:	f504 74a0 	add.w	r4, r4, #320	; 0x140
    f952:	7665      	strb	r5, [r4, #25]
    f954:	f834 0cc4 	ldrh.w	r0, [r4, #-196]
    f958:	1e40      	subs	r0, r0, #1
    f95a:	f824 0cc4 	strh.w	r0, [r4, #-196]
    f95e:	86e5      	strh	r5, [r4, #54]	; 0x36
    f960:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f964:	f7ff bedb 	b.w	f71e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f6>
    f968:	b510      	push	{r4, lr}
    f96a:	f7f9 f9ab 	bl	8cc4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    f96e:	f242 7110 	movw	r1, #10000	; 0x2710
    f972:	fbb0 f2f1 	udiv	r2, r0, r1
    f976:	fb01 0012 	mls	r0, r1, r2, r0
    f97a:	bd10      	pop	{r4, pc}
    f97c:	b570      	push	{r4, r5, r6, lr}
    f97e:	b140      	cbz	r0, f992 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x46a>
    f980:	2909      	cmp	r1, #9
    f982:	d248      	bcs.n	fa16 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ee>
    f984:	e8df f001 	tbb	[pc, r1]
    f988:	3b3b1507 	.word	0x3b3b1507
    f98c:	3f294737 	.word	0x3f294737
    f990:	0043      	.short	0x0043
    f992:	21cd      	movs	r1, #205	; 0xcd
    f994:	e03c      	b.n	fa10 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    f996:	4604      	mov	r4, r0
    f998:	f7f7 ffa8 	bl	78ec <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    f99c:	b110      	cbz	r0, f9a4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x47c>
    f99e:	f240 2179 	movw	r1, #633	; 0x279
    f9a2:	e035      	b.n	fa10 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    f9a4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    f9a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f9ac:	38fc      	subs	r0, #252	; 0xfc
    f9ae:	f7f3 bf41 	b.w	3834 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    f9b2:	4605      	mov	r5, r0
    f9b4:	f7ff fbbd 	bl	f132 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f9b8:	b9a8      	cbnz	r0, f9e6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4be>
    f9ba:	4628      	mov	r0, r5
    f9bc:	f7ff fe78 	bl	f6b0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x188>
    f9c0:	4604      	mov	r4, r0
    f9c2:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    f9c6:	42a0      	cmp	r0, r4
    f9c8:	d20b      	bcs.n	f9e2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ba>
    f9ca:	1a20      	subs	r0, r4, r0
    f9cc:	2103      	movs	r1, #3
    f9ce:	f7f2 fe51 	bl	2674 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    f9d2:	b130      	cbz	r0, f9e2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ba>
    f9d4:	4628      	mov	r0, r5
    f9d6:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    f9da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f9de:	f7ff bb7d 	b.w	f0dc <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    f9e2:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    f9e6:	4628      	mov	r0, r5
    f9e8:	f7f7 ff9c 	bl	7924 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    f9ec:	2800      	cmp	r0, #0
    f9ee:	d014      	beq.n	fa1a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
    f9f0:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    f9f4:	e00c      	b.n	fa10 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    f9f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f9fa:	f7fc bc0b 	b.w	c214 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f9fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fa02:	f7ff bdee 	b.w	f5e2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xba>
    fa06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fa0a:	f7ff be48 	b.w	f69e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x176>
    fa0e:	21ed      	movs	r1, #237	; 0xed
    fa10:	2030      	movs	r0, #48	; 0x30
    fa12:	f7f5 fb0b 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa16:	21f1      	movs	r1, #241	; 0xf1
    fa18:	e7fa      	b.n	fa10 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    fa1a:	bd70      	pop	{r4, r5, r6, pc}
    fa1c:	b510      	push	{r4, lr}
    fa1e:	0004      	movs	r4, r0
    fa20:	d008      	beq.n	fa34 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x50c>
    fa22:	2909      	cmp	r1, #9
    fa24:	d25c      	bcs.n	fae0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b8>
    fa26:	e8df f001 	tbb	[pc, r1]
    fa2a:	3607      	.short	0x3607
    fa2c:	5b3a3e3e 	.word	0x5b3a3e3e
    fa30:	00574a43 	.word	0x00574a43
    fa34:	2196      	movs	r1, #150	; 0x96
    fa36:	e050      	b.n	fada <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b2>
    fa38:	2100      	movs	r1, #0
    fa3a:	f8c4 1180 	str.w	r1, [r4, #384]	; 0x180
    fa3e:	f894 1158 	ldrb.w	r1, [r4, #344]	; 0x158
    fa42:	4620      	mov	r0, r4
    fa44:	b189      	cbz	r1, fa6a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x542>
    fa46:	f8b0 2156 	ldrh.w	r2, [r0, #342]	; 0x156
    fa4a:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    fa4e:	428a      	cmp	r2, r1
    fa50:	d106      	bne.n	fa60 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x538>
    fa52:	f8b0 210c 	ldrh.w	r2, [r0, #268]	; 0x10c
    fa56:	1a51      	subs	r1, r2, r1
    fa58:	f8a0 110e 	strh.w	r1, [r0, #270]	; 0x10e
    fa5c:	4611      	mov	r1, r2
    fa5e:	e00d      	b.n	fa7c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x554>
    fa60:	1a51      	subs	r1, r2, r1
    fa62:	f8a0 110e 	strh.w	r1, [r0, #270]	; 0x10e
    fa66:	b291      	uxth	r1, r2
    fa68:	e008      	b.n	fa7c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x554>
    fa6a:	f8b0 1154 	ldrh.w	r1, [r0, #340]	; 0x154
    fa6e:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
    fa72:	1a89      	subs	r1, r1, r2
    fa74:	f8a0 110e 	strh.w	r1, [r0, #270]	; 0x10e
    fa78:	f8b0 1154 	ldrh.w	r1, [r0, #340]	; 0x154
    fa7c:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
    fa80:	f8d0 1168 	ldr.w	r1, [r0, #360]	; 0x168
    fa84:	f8c0 116c 	str.w	r1, [r0, #364]	; 0x16c
    fa88:	f7f9 fbc8 	bl	921c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    fa8c:	4620      	mov	r0, r4
    fa8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa92:	f7f9 b921 	b.w	8cd8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x620>
    fa96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa9a:	f000 b883 	b.w	fba4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    fa9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    faa2:	f7fc bbb7 	b.w	c214 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    faa6:	4620      	mov	r0, r4
    faa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    faac:	f7f9 b94a 	b.w	8d44 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x68c>
    fab0:	2001      	movs	r0, #1
    fab2:	f7f2 fdcf 	bl	2654 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    fab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    faba:	f7fe bca4 	b.w	e406 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    fabe:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    fac2:	2804      	cmp	r0, #4
    fac4:	d001      	beq.n	faca <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a2>
    fac6:	21b8      	movs	r1, #184	; 0xb8
    fac8:	e007      	b.n	fada <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b2>
    faca:	4620      	mov	r0, r4
    facc:	f7ff fef5 	bl	f8ba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x392>
    fad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fad4:	f7f7 bbe0 	b.w	7298 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    fad8:	21c1      	movs	r1, #193	; 0xc1
    fada:	2030      	movs	r0, #48	; 0x30
    fadc:	f7f5 faa6 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fae0:	21c5      	movs	r1, #197	; 0xc5
    fae2:	e7fa      	b.n	fada <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b2>
    fae4:	b510      	push	{r4, lr}
    fae6:	f7fc faa3 	bl	c030 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    faea:	f64d 7141 	movw	r1, #57153	; 0xdf41
    faee:	4408      	add	r0, r1
    faf0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    faf4:	fbb0 f0f1 	udiv	r0, r0, r1
    faf8:	f500 70bb 	add.w	r0, r0, #374	; 0x176
    fafc:	bd10      	pop	{r4, pc}
    fafe:	01f4      	.short	0x01f4
    fb00:	009600fa 	.word	0x009600fa
    fb04:	004b0064 	.word	0x004b0064
    fb08:	001e0032 	.word	0x001e0032
    fb0c:	000a0014 	.word	0x000a0014
    fb10:	00020005 	.word	0x00020005
    fb14:	0001      	.short	0x0001
    fb16:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    fb1a:	f001 0307 	and.w	r3, r1, #7
    fb1e:	7802      	ldrb	r2, [r0, #0]
    fb20:	2101      	movs	r1, #1
    fb22:	4099      	lsls	r1, r3
    fb24:	438a      	bics	r2, r1
    fb26:	7002      	strb	r2, [r0, #0]
    fb28:	4770      	bx	lr
    fb2a:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    fb2e:	f001 0307 	and.w	r3, r1, #7
    fb32:	7810      	ldrb	r0, [r2, #0]
    fb34:	2101      	movs	r1, #1
    fb36:	4099      	lsls	r1, r3
    fb38:	4308      	orrs	r0, r1
    fb3a:	7010      	strb	r0, [r2, #0]
    fb3c:	4770      	bx	lr

0000fb3e <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    fb3e:	b510      	push	{r4, lr}
    fb40:	4604      	mov	r4, r0
    fb42:	f8d0 01ac 	ldr.w	r0, [r0, #428]	; 0x1ac
    fb46:	6921      	ldr	r1, [r4, #16]
    fb48:	4288      	cmp	r0, r1
    fb4a:	d109      	bne.n	fb60 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    fb4c:	f8b4 11b0 	ldrh.w	r1, [r4, #432]	; 0x1b0
    fb50:	8b22      	ldrh	r2, [r4, #24]
    fb52:	4291      	cmp	r1, r2
    fb54:	d104      	bne.n	fb60 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    fb56:	f8b4 11b2 	ldrh.w	r1, [r4, #434]	; 0x1b2
    fb5a:	8b62      	ldrh	r2, [r4, #26]
    fb5c:	4291      	cmp	r1, r2
    fb5e:	d013      	beq.n	fb88 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4a>
    fb60:	8821      	ldrh	r1, [r4, #0]
    fb62:	f8a4 11cc 	strh.w	r1, [r4, #460]	; 0x1cc
    fb66:	f7fe fcd5 	bl	e514 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    fb6a:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    fb6e:	f8b4 01b0 	ldrh.w	r0, [r4, #432]	; 0x1b0
    fb72:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    fb76:	f8b4 01b2 	ldrh.w	r0, [r4, #434]	; 0x1b2
    fb7a:	f8a4 01d2 	strh.w	r0, [r4, #466]	; 0x1d2
    fb7e:	20ff      	movs	r0, #255	; 0xff
    fb80:	f884 01c8 	strb.w	r0, [r4, #456]	; 0x1c8
    fb84:	f7f7 fb88 	bl	7298 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    fb88:	2102      	movs	r1, #2
    fb8a:	4620      	mov	r0, r4
    fb8c:	f7f7 f93a 	bl	6e04 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    fb90:	2000      	movs	r0, #0
    fb92:	f804 0f86 	strb.w	r0, [r4, #134]!
    fb96:	2003      	movs	r0, #3
    fb98:	70e0      	strb	r0, [r4, #3]
    fb9a:	bd10      	pop	{r4, pc}

0000fb9c <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    fb9c:	f7f5 bdec 	b.w	5778 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000fba0 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    fba0:	2000      	movs	r0, #0
    fba2:	4770      	bx	lr

0000fba4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    fba4:	f7f6 bac6 	b.w	6134 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000fba8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    fba8:	2100      	movs	r1, #0
    fbaa:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    fbae:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    fbb2:	f880 1089 	strb.w	r1, [r0, #137]	; 0x89
    fbb6:	f890 1113 	ldrb.w	r1, [r0, #275]	; 0x113
    fbba:	b109      	cbz	r1, fbc0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    fbbc:	2102      	movs	r1, #2
    fbbe:	e000      	b.n	fbc2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    fbc0:	2103      	movs	r1, #3
    fbc2:	f7f8 bd41 	b.w	8648 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    fbc6:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    fbca:	28fe      	cmp	r0, #254	; 0xfe
    fbcc:	d001      	beq.n	fbd2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    fbce:	2001      	movs	r0, #1
    fbd0:	4770      	bx	lr
    fbd2:	2000      	movs	r0, #0
    fbd4:	4770      	bx	lr
    fbd6:	b510      	push	{r4, lr}
    fbd8:	2801      	cmp	r0, #1
    fbda:	d006      	beq.n	fbea <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    fbdc:	2802      	cmp	r0, #2
    fbde:	d004      	beq.n	fbea <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    fbe0:	f44f 711d 	mov.w	r1, #628	; 0x274
    fbe4:	2006      	movs	r0, #6
    fbe6:	f7f5 fa21 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fbea:	bd10      	pop	{r4, pc}
    fbec:	2801      	cmp	r0, #1
    fbee:	d002      	beq.n	fbf6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    fbf0:	2802      	cmp	r0, #2
    fbf2:	d105      	bne.n	fc00 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    fbf4:	e002      	b.n	fbfc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    fbf6:	2901      	cmp	r1, #1
    fbf8:	d004      	beq.n	fc04 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    fbfa:	e001      	b.n	fc00 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    fbfc:	2902      	cmp	r1, #2
    fbfe:	d001      	beq.n	fc04 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    fc00:	2000      	movs	r0, #0
    fc02:	4770      	bx	lr
    fc04:	2001      	movs	r0, #1
    fc06:	4770      	bx	lr
    fc08:	1a40      	subs	r0, r0, r1
    fc0a:	b200      	sxth	r0, r0
    fc0c:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    fc10:	4288      	cmp	r0, r1
    fc12:	dc01      	bgt.n	fc18 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    fc14:	2800      	cmp	r0, #0
    fc16:	dc01      	bgt.n	fc1c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    fc18:	2001      	movs	r0, #1
    fc1a:	4770      	bx	lr
    fc1c:	2000      	movs	r0, #0
    fc1e:	4770      	bx	lr
    fc20:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    fc24:	f001 0107 	and.w	r1, r1, #7
    fc28:	7800      	ldrb	r0, [r0, #0]
    fc2a:	40c8      	lsrs	r0, r1
    fc2c:	f000 0001 	and.w	r0, r0, #1
    fc30:	4770      	bx	lr
    fc32:	b118      	cbz	r0, fc3c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x94>
    fc34:	2802      	cmp	r0, #2
    fc36:	d001      	beq.n	fc3c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x94>
    fc38:	2001      	movs	r0, #1
    fc3a:	4770      	bx	lr
    fc3c:	2000      	movs	r0, #0
    fc3e:	4770      	bx	lr

0000fc40 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    fc40:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    fc42:	7881      	ldrb	r1, [r0, #2]
    fc44:	4604      	mov	r4, r0
    fc46:	291a      	cmp	r1, #26
    fc48:	d025      	beq.n	fc96 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    fc4a:	dc0e      	bgt.n	fc6a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    fc4c:	2916      	cmp	r1, #22
    fc4e:	d22c      	bcs.n	fcaa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fc50:	e8df f001 	tbb	[pc, r1]
    fc54:	2b2b2b2b 	.word	0x2b2b2b2b
    fc58:	2b2b212b 	.word	0x2b2b212b
    fc5c:	2b2b2b2b 	.word	0x2b2b2b2b
    fc60:	2b2b2b2b 	.word	0x2b2b2b2b
    fc64:	212b2b2b 	.word	0x212b2b2b
    fc68:	2121      	.short	0x2121
    fc6a:	292a      	cmp	r1, #42	; 0x2a
    fc6c:	d01d      	beq.n	fcaa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fc6e:	dc0b      	bgt.n	fc88 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    fc70:	f1a1 011e 	sub.w	r1, r1, #30
    fc74:	290c      	cmp	r1, #12
    fc76:	d218      	bcs.n	fcaa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fc78:	e8df f001 	tbb	[pc, r1]
    fc7c:	17171717 	.word	0x17171717
    fc80:	17171717 	.word	0x17171717
    fc84:	0d171717 	.word	0x0d171717
    fc88:	393a      	subs	r1, #58	; 0x3a
    fc8a:	2904      	cmp	r1, #4
    fc8c:	d20d      	bcs.n	fcaa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fc8e:	e8df f001 	tbb	[pc, r1]
    fc92:	020c      	.short	0x020c
    fc94:	020c      	.short	0x020c
    fc96:	8820      	ldrh	r0, [r4, #0]
    fc98:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    fc9c:	d205      	bcs.n	fcaa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fc9e:	4669      	mov	r1, sp
    fca0:	f7fe fc27 	bl	e4f2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fca4:	b118      	cbz	r0, fcae <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    fca6:	2002      	movs	r0, #2
    fca8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fcaa:	2012      	movs	r0, #18
    fcac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fcae:	9d01      	ldr	r5, [sp, #4]
    fcb0:	4668      	mov	r0, sp
    fcb2:	462e      	mov	r6, r5
    fcb4:	f505 75c4 	add.w	r5, r5, #392	; 0x188
    fcb8:	f206 1689 	addw	r6, r6, #393	; 0x189
    fcbc:	f000 fead 	bl	10a1a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
    fcc0:	b138      	cbz	r0, fcd2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x92>
    fcc2:	7828      	ldrb	r0, [r5, #0]
    fcc4:	f88d 0008 	strb.w	r0, [sp, #8]
    fcc8:	9802      	ldr	r0, [sp, #8]
    fcca:	9002      	str	r0, [sp, #8]
    fccc:	f89d 0008 	ldrb.w	r0, [sp, #8]
    fcd0:	b108      	cbz	r0, fcd6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x96>
    fcd2:	200c      	movs	r0, #12
    fcd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fcd6:	20ff      	movs	r0, #255	; 0xff
    fcd8:	7028      	strb	r0, [r5, #0]
    fcda:	78a0      	ldrb	r0, [r4, #2]
    fcdc:	7030      	strb	r0, [r6, #0]
    fcde:	4668      	mov	r0, sp
    fce0:	f7fe ffa4 	bl	ec2c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    fce4:	2000      	movs	r0, #0
    fce6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000fce8 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    fce8:	b510      	push	{r4, lr}
    fcea:	4604      	mov	r4, r0
    fcec:	7800      	ldrb	r0, [r0, #0]
    fcee:	b118      	cbz	r0, fcf8 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    fcf0:	2801      	cmp	r0, #1
    fcf2:	d001      	beq.n	fcf8 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    fcf4:	2012      	movs	r0, #18
    fcf6:	bd10      	pop	{r4, pc}
    fcf8:	f000 fec8 	bl	10a8c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x384>
    fcfc:	b120      	cbz	r0, fd08 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    fcfe:	f7f6 fe75 	bl	69ec <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fd02:	b108      	cbz	r0, fd08 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    fd04:	200c      	movs	r0, #12
    fd06:	bd10      	pop	{r4, pc}
    fd08:	7820      	ldrb	r0, [r4, #0]
    fd0a:	f7ff ff92 	bl	fc32 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8a>
    fd0e:	1de2      	adds	r2, r4, #7
    fd10:	f104 0317 	add.w	r3, r4, #23
    fd14:	1c61      	adds	r1, r4, #1
    fd16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fd1a:	f7f6 be99 	b.w	6a50 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000fd1e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    fd1e:	b510      	push	{r4, lr}
    fd20:	4604      	mov	r4, r0
    fd22:	f000 ffa0 	bl	10c66 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55e>
    fd26:	b108      	cbz	r0, fd2c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    fd28:	200c      	movs	r0, #12
    fd2a:	bd10      	pop	{r4, pc}
    fd2c:	7820      	ldrb	r0, [r4, #0]
    fd2e:	b118      	cbz	r0, fd38 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fd30:	2801      	cmp	r0, #1
    fd32:	d001      	beq.n	fd38 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fd34:	2012      	movs	r0, #18
    fd36:	bd10      	pop	{r4, pc}
    fd38:	f7ff ff7b 	bl	fc32 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8a>
    fd3c:	1c61      	adds	r1, r4, #1
    fd3e:	f7f6 feff 	bl	6b40 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    fd42:	b108      	cbz	r0, fd48 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    fd44:	2000      	movs	r0, #0
    fd46:	bd10      	pop	{r4, pc}
    fd48:	2007      	movs	r0, #7
    fd4a:	bd10      	pop	{r4, pc}

0000fd4c <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    fd4c:	b510      	push	{r4, lr}
    fd4e:	f000 fe9d 	bl	10a8c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x384>
    fd52:	b120      	cbz	r0, fd5e <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    fd54:	f7f6 fe4a 	bl	69ec <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fd58:	b108      	cbz	r0, fd5e <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    fd5a:	200c      	movs	r0, #12
    fd5c:	bd10      	pop	{r4, pc}
    fd5e:	f7f6 febd 	bl	6adc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    fd62:	2000      	movs	r0, #0
    fd64:	bd10      	pop	{r4, pc}

0000fd66 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    fd66:	b510      	push	{r4, lr}
    fd68:	f000 ff7d 	bl	10c66 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55e>
    fd6c:	b108      	cbz	r0, fd72 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    fd6e:	200c      	movs	r0, #12
    fd70:	bd10      	pop	{r4, pc}
    fd72:	f7f6 ff0d 	bl	6b90 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    fd76:	2000      	movs	r0, #0
    fd78:	bd10      	pop	{r4, pc}

0000fd7a <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    fd7a:	b510      	push	{r4, lr}
    fd7c:	460b      	mov	r3, r1
    fd7e:	2201      	movs	r2, #1
    fd80:	f100 0110 	add.w	r1, r0, #16
    fd84:	f7fe fb97 	bl	e4b6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    fd88:	2000      	movs	r0, #0
    fd8a:	bd10      	pop	{r4, pc}

0000fd8c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    fd8c:	b510      	push	{r4, lr}
    fd8e:	8800      	ldrh	r0, [r0, #0]
    fd90:	2100      	movs	r1, #0
    fd92:	f7fe f925 	bl	dfe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fd96:	b118      	cbz	r0, fda0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    fd98:	f890 118b 	ldrb.w	r1, [r0, #395]	; 0x18b
    fd9c:	b111      	cbz	r1, fda4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    fd9e:	e007      	b.n	fdb0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    fda0:	2002      	movs	r0, #2
    fda2:	bd10      	pop	{r4, pc}
    fda4:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    fda8:	2914      	cmp	r1, #20
    fdaa:	d003      	beq.n	fdb4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fdac:	2915      	cmp	r1, #21
    fdae:	d001      	beq.n	fdb4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fdb0:	200c      	movs	r0, #12
    fdb2:	bd10      	pop	{r4, pc}
    fdb4:	2102      	movs	r1, #2
    fdb6:	f880 118b 	strb.w	r1, [r0, #395]	; 0x18b
    fdba:	2000      	movs	r0, #0
    fdbc:	bd10      	pop	{r4, pc}

0000fdbe <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    fdbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fdc0:	4605      	mov	r5, r0
    fdc2:	8800      	ldrh	r0, [r0, #0]
    fdc4:	2100      	movs	r1, #0
    fdc6:	f7fe f90b 	bl	dfe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fdca:	0004      	movs	r4, r0
    fdcc:	d003      	beq.n	fdd6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    fdce:	f894 018b 	ldrb.w	r0, [r4, #395]	; 0x18b
    fdd2:	b110      	cbz	r0, fdda <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    fdd4:	e011      	b.n	fdfa <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fdd6:	2002      	movs	r0, #2
    fdd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fdda:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    fdde:	2814      	cmp	r0, #20
    fde0:	d001      	beq.n	fde6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    fde2:	2815      	cmp	r0, #21
    fde4:	d109      	bne.n	fdfa <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fde6:	f894 01dc 	ldrb.w	r0, [r4, #476]	; 0x1dc
    fdea:	f88d 0000 	strb.w	r0, [sp]
    fdee:	9800      	ldr	r0, [sp, #0]
    fdf0:	9000      	str	r0, [sp, #0]
    fdf2:	f89d 0000 	ldrb.w	r0, [sp]
    fdf6:	2601      	movs	r6, #1
    fdf8:	b108      	cbz	r0, fdfe <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
    fdfa:	200c      	movs	r0, #12
    fdfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fdfe:	2210      	movs	r2, #16
    fe00:	1ca9      	adds	r1, r5, #2
    fe02:	f504 70c6 	add.w	r0, r4, #396	; 0x18c
    fe06:	f7fd f8c6 	bl	cf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fe0a:	f884 618b 	strb.w	r6, [r4, #395]	; 0x18b
    fe0e:	2000      	movs	r0, #0
    fe10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fe12 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    fe12:	b510      	push	{r4, lr}
    fe14:	2108      	movs	r1, #8
    fe16:	f7f5 f9a3 	bl	5160 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    fe1a:	2000      	movs	r0, #0
    fe1c:	bd10      	pop	{r4, pc}

0000fe1e <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    fe1e:	b510      	push	{r4, lr}
    fe20:	4604      	mov	r4, r0
    fe22:	f000 fe1c 	bl	10a5e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x356>
    fe26:	f7ff f98e 	bl	f146 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    fe2a:	7020      	strb	r0, [r4, #0]
    fe2c:	2000      	movs	r0, #0
    fe2e:	bd10      	pop	{r4, pc}

0000fe30 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    fe30:	b510      	push	{r4, lr}
    fe32:	4604      	mov	r4, r0
    fe34:	f000 fde8 	bl	10a08 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    fe38:	b140      	cbz	r0, fe4c <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    fe3a:	20fb      	movs	r0, #251	; 0xfb
    fe3c:	8020      	strh	r0, [r4, #0]
    fe3e:	f640 0148 	movw	r1, #2120	; 0x848
    fe42:	8061      	strh	r1, [r4, #2]
    fe44:	80a0      	strh	r0, [r4, #4]
    fe46:	80e1      	strh	r1, [r4, #6]
    fe48:	2000      	movs	r0, #0
    fe4a:	bd10      	pop	{r4, pc}
    fe4c:	2001      	movs	r0, #1
    fe4e:	bd10      	pop	{r4, pc}

0000fe50 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    fe50:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    fe52:	460d      	mov	r5, r1
    fe54:	4606      	mov	r6, r0
    fe56:	f000 fdf9 	bl	10a4c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x344>
    fe5a:	b300      	cbz	r0, fe9e <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x4e>
    fe5c:	8830      	ldrh	r0, [r6, #0]
    fe5e:	4669      	mov	r1, sp
    fe60:	f7fe fb47 	bl	e4f2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fe64:	2800      	cmp	r0, #0
    fe66:	d119      	bne.n	fe9c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x4c>
    fe68:	9c01      	ldr	r4, [sp, #4]
    fe6a:	2700      	movs	r7, #0
    fe6c:	f884 7070 	strb.w	r7, [r4, #112]	; 0x70
    fe70:	f814 0f6e 	ldrb.w	r0, [r4, #110]!
    fe74:	f000 fc64 	bl	10740 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    fe78:	70a8      	strb	r0, [r5, #2]
    fe7a:	7860      	ldrb	r0, [r4, #1]
    fe7c:	f000 fc60 	bl	10740 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    fe80:	70e8      	strb	r0, [r5, #3]
    fe82:	78a0      	ldrb	r0, [r4, #2]
    fe84:	f88d 0008 	strb.w	r0, [sp, #8]
    fe88:	9802      	ldr	r0, [sp, #8]
    fe8a:	9002      	str	r0, [sp, #8]
    fe8c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    fe90:	3c6e      	subs	r4, #110	; 0x6e
    fe92:	2800      	cmp	r0, #0
    fe94:	d1ea      	bne.n	fe6c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x1c>
    fe96:	8830      	ldrh	r0, [r6, #0]
    fe98:	8028      	strh	r0, [r5, #0]
    fe9a:	2000      	movs	r0, #0
    fe9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fe9e:	2001      	movs	r0, #1
    fea0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000fea2 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    fea2:	b51c      	push	{r2, r3, r4, lr}
    fea4:	8800      	ldrh	r0, [r0, #0]
    fea6:	4669      	mov	r1, sp
    fea8:	f7fe fb23 	bl	e4f2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    feac:	2800      	cmp	r0, #0
    feae:	d10c      	bne.n	feca <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    feb0:	f89d 0000 	ldrb.w	r0, [sp]
    feb4:	2801      	cmp	r0, #1
    feb6:	d10f      	bne.n	fed8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x36>
    feb8:	9801      	ldr	r0, [sp, #4]
    feba:	f000 fdb1 	bl	10a20 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x318>
    febe:	b128      	cbz	r0, fecc <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    fec0:	9801      	ldr	r0, [sp, #4]
    fec2:	f890 01c5 	ldrb.w	r0, [r0, #453]	; 0x1c5
    fec6:	b118      	cbz	r0, fed0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2e>
    fec8:	203a      	movs	r0, #58	; 0x3a
    feca:	bd1c      	pop	{r2, r3, r4, pc}
    fecc:	2002      	movs	r0, #2
    fece:	bd1c      	pop	{r2, r3, r4, pc}
    fed0:	9901      	ldr	r1, [sp, #4]
    fed2:	2001      	movs	r0, #1
    fed4:	f881 01c5 	strb.w	r0, [r1, #453]	; 0x1c5
    fed8:	2000      	movs	r0, #0
    feda:	bd1c      	pop	{r2, r3, r4, pc}

0000fedc <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    fedc:	2108      	movs	r1, #8
    fede:	7001      	strb	r1, [r0, #0]
    fee0:	2000      	movs	r0, #0
    fee2:	4770      	bx	lr

0000fee4 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    fee4:	b510      	push	{r4, lr}
    fee6:	4604      	mov	r4, r0
    fee8:	20d8      	movs	r0, #216	; 0xd8
    feea:	7020      	strb	r0, [r4, #0]
    feec:	f000 fd6d 	bl	109ca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
    fef0:	7060      	strb	r0, [r4, #1]
    fef2:	2000      	movs	r0, #0
    fef4:	bd10      	pop	{r4, pc}

0000fef6 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    fef6:	2108      	movs	r1, #8
    fef8:	7001      	strb	r1, [r0, #0]
    fefa:	2000      	movs	r0, #0
    fefc:	4770      	bx	lr

0000fefe <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    fefe:	b510      	push	{r4, lr}
    ff00:	4604      	mov	r4, r0
    ff02:	7800      	ldrb	r0, [r0, #0]
    ff04:	b108      	cbz	r0, ff0a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    ff06:	2801      	cmp	r0, #1
    ff08:	d110      	bne.n	ff2c <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    ff0a:	f000 fdbf 	bl	10a8c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x384>
    ff0e:	b120      	cbz	r0, ff1a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    ff10:	f7f6 fd6c 	bl	69ec <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ff14:	b108      	cbz	r0, ff1a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    ff16:	200c      	movs	r0, #12
    ff18:	bd10      	pop	{r4, pc}
    ff1a:	7820      	ldrb	r0, [r4, #0]
    ff1c:	f7ff fe89 	bl	fc32 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8a>
    ff20:	1c61      	adds	r1, r4, #1
    ff22:	f7fe faae 	bl	e482 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    ff26:	b108      	cbz	r0, ff2c <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    ff28:	2000      	movs	r0, #0
    ff2a:	bd10      	pop	{r4, pc}
    ff2c:	2012      	movs	r0, #18
    ff2e:	bd10      	pop	{r4, pc}

0000ff30 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    ff30:	b510      	push	{r4, lr}
    ff32:	4604      	mov	r4, r0
    ff34:	f000 fe97 	bl	10c66 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55e>
    ff38:	b108      	cbz	r0, ff3e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    ff3a:	200c      	movs	r0, #12
    ff3c:	bd10      	pop	{r4, pc}
    ff3e:	7820      	ldrb	r0, [r4, #0]
    ff40:	b108      	cbz	r0, ff46 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    ff42:	2801      	cmp	r0, #1
    ff44:	d107      	bne.n	ff56 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    ff46:	f7ff fe74 	bl	fc32 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8a>
    ff4a:	1c61      	adds	r1, r4, #1
    ff4c:	f7fe faa8 	bl	e4a0 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    ff50:	b108      	cbz	r0, ff56 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    ff52:	2000      	movs	r0, #0
    ff54:	bd10      	pop	{r4, pc}
    ff56:	2012      	movs	r0, #18
    ff58:	bd10      	pop	{r4, pc}

0000ff5a <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    ff5a:	b510      	push	{r4, lr}
    ff5c:	4604      	mov	r4, r0
    ff5e:	f000 fd95 	bl	10a8c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x384>
    ff62:	b108      	cbz	r0, ff68 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    ff64:	200c      	movs	r0, #12
    ff66:	bd10      	pop	{r4, pc}
    ff68:	7820      	ldrb	r0, [r4, #0]
    ff6a:	f000 0001 	and.w	r0, r0, #1
    ff6e:	f7f6 fd37 	bl	69e0 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    ff72:	2000      	movs	r0, #0
    ff74:	bd10      	pop	{r4, pc}

0000ff76 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    ff76:	b51c      	push	{r2, r3, r4, lr}
    ff78:	4604      	mov	r4, r0
    ff7a:	f000 fd70 	bl	10a5e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x356>
    ff7e:	2000      	movs	r0, #0
    ff80:	f88d 0002 	strb.w	r0, [sp, #2]
    ff84:	2103      	movs	r1, #3
    ff86:	f88d 1001 	strb.w	r1, [sp, #1]
    ff8a:	f814 1b01 	ldrb.w	r1, [r4], #1
    ff8e:	f88d 1003 	strb.w	r1, [sp, #3]
    ff92:	f88d 0000 	strb.w	r0, [sp]
    ff96:	4668      	mov	r0, sp
    ff98:	9401      	str	r4, [sp, #4]
    ff9a:	f000 f9f6 	bl	1038a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    ff9e:	bd1c      	pop	{r2, r3, r4, pc}

0000ffa0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    ffa0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    ffa2:	4605      	mov	r5, r0
    ffa4:	f000 fd5b 	bl	10a5e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x356>
    ffa8:	4606      	mov	r6, r0
    ffaa:	7828      	ldrb	r0, [r5, #0]
    ffac:	2400      	movs	r4, #0
    ffae:	b160      	cbz	r0, ffca <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    ffb0:	f88d 4000 	strb.w	r4, [sp]
    ffb4:	2001      	movs	r0, #1
    ffb6:	f10d 0101 	add.w	r1, sp, #1
    ffba:	f7f5 fedd 	bl	5d78 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    ffbe:	b120      	cbz	r0, ffca <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    ffc0:	4668      	mov	r0, sp
    ffc2:	f000 f897 	bl	100f4 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    ffc6:	2800      	cmp	r0, #0
    ffc8:	d112      	bne.n	fff0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    ffca:	f88d 400c 	strb.w	r4, [sp, #12]
    ffce:	4630      	mov	r0, r6
    ffd0:	f7ff f8af 	bl	f132 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    ffd4:	b118      	cbz	r0, ffde <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    ffd6:	2080      	movs	r0, #128	; 0x80
    ffd8:	f8ad 000d 	strh.w	r0, [sp, #13]
    ffdc:	e001      	b.n	ffe2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    ffde:	f8ad 400d 	strh.w	r4, [sp, #13]
    ffe2:	f88d 400f 	strb.w	r4, [sp, #15]
    ffe6:	7828      	ldrb	r0, [r5, #0]
    ffe8:	2801      	cmp	r0, #1
    ffea:	d003      	beq.n	fff4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    ffec:	b138      	cbz	r0, fffe <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    ffee:	2012      	movs	r0, #18
    fff0:	b004      	add	sp, #16
    fff2:	bd70      	pop	{r4, r5, r6, pc}
    fff4:	a903      	add	r1, sp, #12
    fff6:	4630      	mov	r0, r6
    fff8:	f7fb f9b2 	bl	b360 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    fffc:	e7f8      	b.n	fff0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fffe:	4630      	mov	r0, r6
   10000:	f000 fd4b 	bl	10a9a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x392>
   10004:	e7f4      	b.n	fff0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

00010006 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
   10006:	b530      	push	{r4, r5, lr}
   10008:	b08b      	sub	sp, #44	; 0x2c
   1000a:	4604      	mov	r4, r0
   1000c:	f000 fd27 	bl	10a5e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x356>
   10010:	4602      	mov	r2, r0
   10012:	7920      	ldrb	r0, [r4, #4]
   10014:	2804      	cmp	r0, #4
   10016:	d803      	bhi.n	10020 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
   10018:	8860      	ldrh	r0, [r4, #2]
   1001a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   1001e:	d902      	bls.n	10026 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
   10020:	2012      	movs	r0, #18
   10022:	b00b      	add	sp, #44	; 0x2c
   10024:	bd30      	pop	{r4, r5, pc}
   10026:	2500      	movs	r5, #0
   10028:	f88d 5004 	strb.w	r5, [sp, #4]
   1002c:	7921      	ldrb	r1, [r4, #4]
   1002e:	9500      	str	r5, [sp, #0]
   10030:	f89d 0000 	ldrb.w	r0, [sp]
   10034:	2905      	cmp	r1, #5
   10036:	f040 0010 	orr.w	r0, r0, #16
   1003a:	f88d 0000 	strb.w	r0, [sp]
   1003e:	d254      	bcs.n	100ea <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
   10040:	e8df f001 	tbb	[pc, r1]
   10044:	11050803 	.word	0x11050803
   10048:	000b      	.short	0x000b
   1004a:	f040 0001 	orr.w	r0, r0, #1
   1004e:	f040 0002 	orr.w	r0, r0, #2
   10052:	e006      	b.n	10062 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
   10054:	f040 0009 	orr.w	r0, r0, #9
   10058:	e001      	b.n	1005e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
   1005a:	f040 0001 	orr.w	r0, r0, #1
   1005e:	f040 0004 	orr.w	r0, r0, #4
   10062:	f88d 0000 	strb.w	r0, [sp]
   10066:	f8bd 0000 	ldrh.w	r0, [sp]
   1006a:	9000      	str	r0, [sp, #0]
   1006c:	f8bd 0000 	ldrh.w	r0, [sp]
   10070:	f8ad 0005 	strh.w	r0, [sp, #5]
   10074:	8821      	ldrh	r1, [r4, #0]
   10076:	f8dd 0006 	ldr.w	r0, [sp, #6]
   1007a:	f361 201f 	bfi	r0, r1, #8, #24
   1007e:	f8cd 0006 	str.w	r0, [sp, #6]
   10082:	8861      	ldrh	r1, [r4, #2]
   10084:	f8dd 0009 	ldr.w	r0, [sp, #9]
   10088:	f361 201f 	bfi	r0, r1, #8, #24
   1008c:	f8cd 0009 	str.w	r0, [sp, #9]
   10090:	7b60      	ldrb	r0, [r4, #13]
   10092:	f88d 000d 	strb.w	r0, [sp, #13]
   10096:	7960      	ldrb	r0, [r4, #5]
   10098:	f88d 000e 	strb.w	r0, [sp, #14]
   1009c:	79a0      	ldrb	r0, [r4, #6]
   1009e:	f88d 000f 	strb.w	r0, [sp, #15]
   100a2:	f8d4 0007 	ldr.w	r0, [r4, #7]
   100a6:	9004      	str	r0, [sp, #16]
   100a8:	f8b4 000b 	ldrh.w	r0, [r4, #11]
   100ac:	f8ad 0014 	strh.w	r0, [sp, #20]
   100b0:	7ba0      	ldrb	r0, [r4, #14]
   100b2:	f88d 0016 	strb.w	r0, [sp, #22]
   100b6:	207f      	movs	r0, #127	; 0x7f
   100b8:	f88d 0017 	strb.w	r0, [sp, #23]
   100bc:	2001      	movs	r0, #1
   100be:	f88d 0018 	strb.w	r0, [sp, #24]
   100c2:	f88d 5019 	strb.w	r5, [sp, #25]
   100c6:	f88d 001a 	strb.w	r0, [sp, #26]
   100ca:	f88d 501b 	strb.w	r5, [sp, #27]
   100ce:	4610      	mov	r0, r2
   100d0:	f7ff f84b 	bl	f16a <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
   100d4:	f88d 001c 	strb.w	r0, [sp, #28]
   100d8:	f88d 501d 	strb.w	r5, [sp, #29]
   100dc:	f88d 501e 	strb.w	r5, [sp, #30]
   100e0:	a909      	add	r1, sp, #36	; 0x24
   100e2:	a801      	add	r0, sp, #4
   100e4:	f000 f8dc 	bl	102a0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
   100e8:	e79b      	b.n	10022 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
   100ea:	f241 01ff 	movw	r1, #4351	; 0x10ff
   100ee:	2039      	movs	r0, #57	; 0x39
   100f0:	f7f4 ff9c 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000100f4 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
   100f4:	b570      	push	{r4, r5, r6, lr}
   100f6:	4604      	mov	r4, r0
   100f8:	7800      	ldrb	r0, [r0, #0]
   100fa:	2101      	movs	r1, #1
   100fc:	f7fd ff70 	bl	dfe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10100:	0005      	movs	r5, r0
   10102:	d007      	beq.n	10114 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
   10104:	f7ff f9f6 	bl	f4f4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10108:	b160      	cbz	r0, 10124 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   1010a:	4628      	mov	r0, r5
   1010c:	f7ff f817 	bl	f13e <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10110:	b110      	cbz	r0, 10118 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
   10112:	e005      	b.n	10120 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
   10114:	2042      	movs	r0, #66	; 0x42
   10116:	bd70      	pop	{r4, r5, r6, pc}
   10118:	4628      	mov	r0, r5
   1011a:	f7ff f806 	bl	f12a <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   1011e:	b108      	cbz	r0, 10124 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   10120:	200c      	movs	r0, #12
   10122:	bd70      	pop	{r4, r5, r6, pc}
   10124:	1c61      	adds	r1, r4, #1
   10126:	4628      	mov	r0, r5
   10128:	f7ff f817 	bl	f15a <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
   1012c:	2000      	movs	r0, #0
   1012e:	bd70      	pop	{r4, r5, r6, pc}

00010130 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   10130:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10132:	460d      	mov	r5, r1
   10134:	4604      	mov	r4, r0
   10136:	f000 fc67 	bl	10a08 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   1013a:	b130      	cbz	r0, 1014a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   1013c:	88a2      	ldrh	r2, [r4, #4]
   1013e:	f244 2090 	movw	r0, #17040	; 0x4290
   10142:	4282      	cmp	r2, r0
   10144:	d903      	bls.n	1014e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
   10146:	2012      	movs	r0, #18
   10148:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1014a:	2001      	movs	r0, #1
   1014c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1014e:	f640 0048 	movw	r0, #2120	; 0x848
   10152:	4282      	cmp	r2, r0
   10154:	d300      	bcc.n	10158 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
   10156:	4602      	mov	r2, r0
   10158:	8820      	ldrh	r0, [r4, #0]
   1015a:	f8ad 0000 	strh.w	r0, [sp]
   1015e:	8860      	ldrh	r0, [r4, #2]
   10160:	f8ad 0002 	strh.w	r0, [sp, #2]
   10164:	f8ad 2004 	strh.w	r2, [sp, #4]
   10168:	8860      	ldrh	r0, [r4, #2]
   1016a:	f8ad 0006 	strh.w	r0, [sp, #6]
   1016e:	f8ad 2008 	strh.w	r2, [sp, #8]
   10172:	8820      	ldrh	r0, [r4, #0]
   10174:	8028      	strh	r0, [r5, #0]
   10176:	4668      	mov	r0, sp
   10178:	f000 fcb5 	bl	10ae6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
   1017c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0001017e <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   1017e:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10180:	4604      	mov	r4, r0
   10182:	f000 fc63 	bl	10a4c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x344>
   10186:	b1b0      	cbz	r0, 101b6 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x38>
   10188:	f10d 0007 	add.w	r0, sp, #7
   1018c:	9000      	str	r0, [sp, #0]
   1018e:	7922      	ldrb	r2, [r4, #4]
   10190:	78e1      	ldrb	r1, [r4, #3]
   10192:	78a0      	ldrb	r0, [r4, #2]
   10194:	f10d 0306 	add.w	r3, sp, #6
   10198:	f000 fd29 	bl	10bee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e6>
   1019c:	2800      	cmp	r0, #0
   1019e:	d109      	bne.n	101b4 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x36>
   101a0:	8820      	ldrh	r0, [r4, #0]
   101a2:	f8ad 0004 	strh.w	r0, [sp, #4]
   101a6:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   101aa:	f8ad 0008 	strh.w	r0, [sp, #8]
   101ae:	a801      	add	r0, sp, #4
   101b0:	f000 f9a6 	bl	10500 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   101b4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   101b6:	2001      	movs	r0, #1
   101b8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000101ba <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
   101ba:	b510      	push	{r4, lr}
   101bc:	4604      	mov	r4, r0
   101be:	f000 fc65 	bl	10a8c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x384>
   101c2:	b120      	cbz	r0, 101ce <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   101c4:	f7f6 fc12 	bl	69ec <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   101c8:	b108      	cbz	r0, 101ce <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   101ca:	200c      	movs	r0, #12
   101cc:	bd10      	pop	{r4, pc}
   101ce:	7820      	ldrb	r0, [r4, #0]
   101d0:	f7ff fd2f 	bl	fc32 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8a>
   101d4:	79e2      	ldrb	r2, [r4, #7]
   101d6:	1c61      	adds	r1, r4, #1
   101d8:	f7f6 fbb6 	bl	6948 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
   101dc:	b108      	cbz	r0, 101e2 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
   101de:	2000      	movs	r0, #0
   101e0:	bd10      	pop	{r4, pc}
   101e2:	2002      	movs	r0, #2
   101e4:	bd10      	pop	{r4, pc}

000101e6 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   101e6:	b510      	push	{r4, lr}
   101e8:	4604      	mov	r4, r0
   101ea:	2001      	movs	r0, #1
   101ec:	f000 facb 	bl	10786 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
   101f0:	b128      	cbz	r0, 101fe <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   101f2:	4621      	mov	r1, r4
   101f4:	2001      	movs	r0, #1
   101f6:	f7f5 fdd7 	bl	5da8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   101fa:	2000      	movs	r0, #0
   101fc:	bd10      	pop	{r4, pc}
   101fe:	200c      	movs	r0, #12
   10200:	bd10      	pop	{r4, pc}

00010202 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
   10202:	b510      	push	{r4, lr}
   10204:	8800      	ldrh	r0, [r0, #0]
   10206:	f7f6 fc7f 	bl	6b08 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
   1020a:	b108      	cbz	r0, 10210 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
   1020c:	2000      	movs	r0, #0
   1020e:	bd10      	pop	{r4, pc}
   10210:	2030      	movs	r0, #48	; 0x30
   10212:	bd10      	pop	{r4, pc}

00010214 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
   10214:	b51c      	push	{r2, r3, r4, lr}
   10216:	4604      	mov	r4, r0
   10218:	f000 fc21 	bl	10a5e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x356>
   1021c:	2000      	movs	r0, #0
   1021e:	f88d 0000 	strb.w	r0, [sp]
   10222:	f88d 0002 	strb.w	r0, [sp, #2]
   10226:	2003      	movs	r0, #3
   10228:	f88d 0001 	strb.w	r0, [sp, #1]
   1022c:	f814 0b01 	ldrb.w	r0, [r4], #1
   10230:	f88d 0003 	strb.w	r0, [sp, #3]
   10234:	4668      	mov	r0, sp
   10236:	9401      	str	r4, [sp, #4]
   10238:	f000 f910 	bl	1045c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   1023c:	bd1c      	pop	{r2, r3, r4, pc}

0001023e <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   1023e:	b51c      	push	{r2, r3, r4, lr}
   10240:	4604      	mov	r4, r0
   10242:	f000 fbe1 	bl	10a08 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   10246:	b178      	cbz	r0, 10268 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
   10248:	8820      	ldrh	r0, [r4, #0]
   1024a:	f8ad 0000 	strh.w	r0, [sp]
   1024e:	8860      	ldrh	r0, [r4, #2]
   10250:	f8ad 0002 	strh.w	r0, [sp, #2]
   10254:	8820      	ldrh	r0, [r4, #0]
   10256:	f8ad 0004 	strh.w	r0, [sp, #4]
   1025a:	8860      	ldrh	r0, [r4, #2]
   1025c:	f8ad 0006 	strh.w	r0, [sp, #6]
   10260:	4668      	mov	r0, sp
   10262:	f7fb f94b 	bl	b4fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
   10266:	bd1c      	pop	{r2, r3, r4, pc}
   10268:	2001      	movs	r0, #1
   1026a:	bd1c      	pop	{r2, r3, r4, pc}

0001026c <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   1026c:	b510      	push	{r4, lr}
   1026e:	f7f5 fdbf 	bl	5df0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   10272:	2000      	movs	r0, #0
   10274:	bd10      	pop	{r4, pc}

00010276 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   10276:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10278:	460c      	mov	r4, r1
   1027a:	4605      	mov	r5, r0
   1027c:	f000 fbc4 	bl	10a08 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   10280:	b160      	cbz	r0, 1029c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
   10282:	4669      	mov	r1, sp
   10284:	4628      	mov	r0, r5
   10286:	f7fe f934 	bl	e4f2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1028a:	2800      	cmp	r0, #0
   1028c:	d105      	bne.n	1029a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
   1028e:	2100      	movs	r1, #0
   10290:	4622      	mov	r2, r4
   10292:	9801      	ldr	r0, [sp, #4]
   10294:	f000 fb43 	bl	1091e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
   10298:	2000      	movs	r0, #0
   1029a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1029c:	2001      	movs	r0, #1
   1029e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

000102a0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
   102a0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   102a4:	460f      	mov	r7, r1
   102a6:	4605      	mov	r5, r0
   102a8:	7806      	ldrb	r6, [r0, #0]
   102aa:	f000 fac8 	bl	1083e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x136>
   102ae:	2800      	cmp	r0, #0
   102b0:	d10a      	bne.n	102c8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   102b2:	4628      	mov	r0, r5
   102b4:	f000 fa9d 	bl	107f2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xea>
   102b8:	2800      	cmp	r0, #0
   102ba:	d105      	bne.n	102c8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   102bc:	2001      	movs	r0, #1
   102be:	f7f5 f89f 	bl	5400 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   102c2:	4286      	cmp	r6, r0
   102c4:	d302      	bcc.n	102cc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
   102c6:	2007      	movs	r0, #7
   102c8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   102cc:	2101      	movs	r1, #1
   102ce:	4630      	mov	r0, r6
   102d0:	f7fd fe86 	bl	dfe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   102d4:	0004      	movs	r4, r0
   102d6:	d004      	beq.n	102e2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
   102d8:	f7ff f90c 	bl	f4f4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   102dc:	b150      	cbz	r0, 102f4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x54>
   102de:	200c      	movs	r0, #12
   102e0:	e7f2      	b.n	102c8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   102e2:	2200      	movs	r2, #0
   102e4:	2101      	movs	r1, #1
   102e6:	4630      	mov	r0, r6
   102e8:	f7fd fe70 	bl	dfcc <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   102ec:	0004      	movs	r4, r0
   102ee:	d00f      	beq.n	10310 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x70>
   102f0:	f7fe fec0 	bl	f074 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   102f4:	4620      	mov	r0, r4
   102f6:	f7fe ff26 	bl	f146 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   102fa:	7038      	strb	r0, [r7, #0]
   102fc:	74e8      	strb	r0, [r5, #19]
   102fe:	4629      	mov	r1, r5
   10300:	4620      	mov	r0, r4
   10302:	f7f7 fa2b 	bl	775c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
   10306:	4606      	mov	r6, r0
   10308:	7e68      	ldrb	r0, [r5, #25]
   1030a:	b1d0      	cbz	r0, 10342 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
   1030c:	b12e      	cbz	r6, 1031a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7a>
   1030e:	e018      	b.n	10342 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
   10310:	f241 218a 	movw	r1, #4746	; 0x128a
   10314:	2039      	movs	r0, #57	; 0x39
   10316:	f7f4 fe89 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1031a:	2200      	movs	r2, #0
   1031c:	4668      	mov	r0, sp
   1031e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   10320:	f7fd ff1f 	bl	e162 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   10324:	2200      	movs	r2, #0
   10326:	2101      	movs	r1, #1
   10328:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1032a:	f7fd ff90 	bl	e24e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   1032e:	2204      	movs	r2, #4
   10330:	4668      	mov	r0, sp
   10332:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   10334:	f7fd ff15 	bl	e162 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   10338:	2200      	movs	r2, #0
   1033a:	4611      	mov	r1, r2
   1033c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1033e:	f7fd ff86 	bl	e24e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10342:	4630      	mov	r0, r6
   10344:	e7c0      	b.n	102c8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>

00010346 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   10346:	b510      	push	{r4, lr}
   10348:	4604      	mov	r4, r0
   1034a:	2000      	movs	r0, #0
   1034c:	f000 fa1b 	bl	10786 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
   10350:	b128      	cbz	r0, 1035e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   10352:	4621      	mov	r1, r4
   10354:	2000      	movs	r0, #0
   10356:	f7f5 fd27 	bl	5da8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   1035a:	2000      	movs	r0, #0
   1035c:	bd10      	pop	{r4, pc}
   1035e:	200c      	movs	r0, #12
   10360:	bd10      	pop	{r4, pc}

00010362 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   10362:	b510      	push	{r4, lr}
   10364:	7800      	ldrb	r0, [r0, #0]
   10366:	f000 0001 	and.w	r0, r0, #1
   1036a:	f7f8 f933 	bl	85d4 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   1036e:	2000      	movs	r0, #0
   10370:	bd10      	pop	{r4, pc}

00010372 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   10372:	b510      	push	{r4, lr}
   10374:	4604      	mov	r4, r0
   10376:	f000 fb47 	bl	10a08 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   1037a:	b120      	cbz	r0, 10386 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
   1037c:	4620      	mov	r0, r4
   1037e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10382:	f000 bbb0 	b.w	10ae6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
   10386:	2001      	movs	r0, #1
   10388:	bd10      	pop	{r4, pc}

0001038a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   1038a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1038e:	4606      	mov	r6, r0
   10390:	7845      	ldrb	r5, [r0, #1]
   10392:	7800      	ldrb	r0, [r0, #0]
   10394:	2101      	movs	r1, #1
   10396:	f7fd fe23 	bl	dfe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1039a:	0004      	movs	r4, r0
   1039c:	d01e      	beq.n	103dc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
   1039e:	f7fe fe95 	bl	f0cc <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   103a2:	78f1      	ldrb	r1, [r6, #3]
   103a4:	4281      	cmp	r1, r0
   103a6:	d800      	bhi.n	103aa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
   103a8:	4608      	mov	r0, r1
   103aa:	4607      	mov	r7, r0
   103ac:	2d04      	cmp	r5, #4
   103ae:	d018      	beq.n	103e2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
   103b0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   103b2:	f7fd ff6f 	bl	e294 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   103b6:	4438      	add	r0, r7
   103b8:	b281      	uxth	r1, r0
   103ba:	4620      	mov	r0, r4
   103bc:	2201      	movs	r2, #1
   103be:	f000 f9f4 	bl	107aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
   103c2:	2800      	cmp	r0, #0
   103c4:	d10b      	bne.n	103de <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   103c6:	2d03      	cmp	r5, #3
   103c8:	d000      	beq.n	103cc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   103ca:	b1df      	cbz	r7, 10404 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   103cc:	4620      	mov	r0, r4
   103ce:	f7fe feb4 	bl	f13a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   103d2:	7871      	ldrb	r1, [r6, #1]
   103d4:	2903      	cmp	r1, #3
   103d6:	d010      	beq.n	103fa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   103d8:	b9a0      	cbnz	r0, 10404 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   103da:	e004      	b.n	103e6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
   103dc:	2042      	movs	r0, #66	; 0x42
   103de:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   103e2:	b97f      	cbnz	r7, 10404 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   103e4:	e7f2      	b.n	103cc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   103e6:	2904      	cmp	r1, #4
   103e8:	d107      	bne.n	103fa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   103ea:	4620      	mov	r0, r4
   103ec:	f7ff f882 	bl	f4f4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   103f0:	b140      	cbz	r0, 10404 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   103f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   103f4:	f7fd ff1d 	bl	e232 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   103f8:	b120      	cbz	r0, 10404 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   103fa:	2d01      	cmp	r5, #1
   103fc:	d004      	beq.n	10408 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   103fe:	2d03      	cmp	r5, #3
   10400:	d002      	beq.n	10408 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   10402:	e00e      	b.n	10422 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
   10404:	2012      	movs	r0, #18
   10406:	e7ea      	b.n	103de <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10408:	4620      	mov	r0, r4
   1040a:	f7fe fe96 	bl	f13a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1040e:	b108      	cbz	r0, 10414 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
   10410:	2200      	movs	r2, #0
   10412:	e002      	b.n	1041a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   10414:	2d01      	cmp	r5, #1
   10416:	d013      	beq.n	10440 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
   10418:	2201      	movs	r2, #1
   1041a:	4668      	mov	r0, sp
   1041c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1041e:	f7fd fea0 	bl	e162 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   10422:	2d04      	cmp	r5, #4
   10424:	d018      	beq.n	10458 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   10426:	6872      	ldr	r2, [r6, #4]
   10428:	463b      	mov	r3, r7
   1042a:	2101      	movs	r1, #1
   1042c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1042e:	f7fd fecc 	bl	e1ca <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   10432:	b138      	cbz	r0, 10444 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
   10434:	7870      	ldrb	r0, [r6, #1]
   10436:	2802      	cmp	r0, #2
   10438:	d006      	beq.n	10448 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   1043a:	2803      	cmp	r0, #3
   1043c:	d004      	beq.n	10448 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   1043e:	e00b      	b.n	10458 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   10440:	2202      	movs	r2, #2
   10442:	e7ea      	b.n	1041a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   10444:	2007      	movs	r0, #7
   10446:	e7ca      	b.n	103de <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10448:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1044a:	f7fd ff23 	bl	e294 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   1044e:	4602      	mov	r2, r0
   10450:	2101      	movs	r1, #1
   10452:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10454:	f7fd fefb 	bl	e24e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10458:	2000      	movs	r0, #0
   1045a:	e7c0      	b.n	103de <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0001045c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   1045c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10460:	4607      	mov	r7, r0
   10462:	7845      	ldrb	r5, [r0, #1]
   10464:	78c6      	ldrb	r6, [r0, #3]
   10466:	7800      	ldrb	r0, [r0, #0]
   10468:	2101      	movs	r1, #1
   1046a:	f7fd fdb9 	bl	dfe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1046e:	0004      	movs	r4, r0
   10470:	d003      	beq.n	1047a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
   10472:	f7fe fe64 	bl	f13e <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10476:	b118      	cbz	r0, 10480 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
   10478:	e003      	b.n	10482 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   1047a:	2042      	movs	r0, #66	; 0x42
   1047c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10480:	2600      	movs	r6, #0
   10482:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10484:	f7fd ff0a 	bl	e29c <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   10488:	4430      	add	r0, r6
   1048a:	b281      	uxth	r1, r0
   1048c:	4688      	mov	r8, r1
   1048e:	4620      	mov	r0, r4
   10490:	2201      	movs	r2, #1
   10492:	f000 f98a 	bl	107aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
   10496:	2800      	cmp	r0, #0
   10498:	d1f0      	bne.n	1047c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   1049a:	2d04      	cmp	r5, #4
   1049c:	d008      	beq.n	104b0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   1049e:	2d03      	cmp	r5, #3
   104a0:	d00a      	beq.n	104b8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
   104a2:	b12e      	cbz	r6, 104b0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   104a4:	4620      	mov	r0, r4
   104a6:	f7ff f825 	bl	f4f4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   104aa:	b118      	cbz	r0, 104b4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
   104ac:	200c      	movs	r0, #12
   104ae:	e7e5      	b.n	1047c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   104b0:	2012      	movs	r0, #18
   104b2:	e7e3      	b.n	1047c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   104b4:	2d01      	cmp	r5, #1
   104b6:	d10c      	bne.n	104d2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   104b8:	4620      	mov	r0, r4
   104ba:	f7fe fe3e 	bl	f13a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   104be:	b108      	cbz	r0, 104c4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   104c0:	2204      	movs	r2, #4
   104c2:	e002      	b.n	104ca <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   104c4:	2d01      	cmp	r5, #1
   104c6:	d010      	beq.n	104ea <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   104c8:	2205      	movs	r2, #5
   104ca:	4668      	mov	r0, sp
   104cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   104ce:	f7fd fe48 	bl	e162 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   104d2:	687a      	ldr	r2, [r7, #4]
   104d4:	4633      	mov	r3, r6
   104d6:	2100      	movs	r1, #0
   104d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   104da:	f7fd fe76 	bl	e1ca <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   104de:	b130      	cbz	r0, 104ee <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   104e0:	2d02      	cmp	r5, #2
   104e2:	d006      	beq.n	104f2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   104e4:	2d03      	cmp	r5, #3
   104e6:	d004      	beq.n	104f2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   104e8:	e008      	b.n	104fc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   104ea:	2206      	movs	r2, #6
   104ec:	e7ed      	b.n	104ca <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   104ee:	2007      	movs	r0, #7
   104f0:	e7c4      	b.n	1047c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   104f2:	4642      	mov	r2, r8
   104f4:	2100      	movs	r1, #0
   104f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   104f8:	f7fd fea9 	bl	e24e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   104fc:	2000      	movs	r0, #0
   104fe:	e7bd      	b.n	1047c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

00010500 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   10500:	b510      	push	{r4, lr}
   10502:	4604      	mov	r4, r0
   10504:	8880      	ldrh	r0, [r0, #4]
   10506:	b128      	cbz	r0, 10514 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10508:	2801      	cmp	r0, #1
   1050a:	d003      	beq.n	10514 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1050c:	2802      	cmp	r0, #2
   1050e:	d001      	beq.n	10514 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10510:	2012      	movs	r0, #18
   10512:	bd10      	pop	{r4, pc}
   10514:	78e0      	ldrb	r0, [r4, #3]
   10516:	f000 f9df 	bl	108d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
   1051a:	b148      	cbz	r0, 10530 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   1051c:	78a0      	ldrb	r0, [r4, #2]
   1051e:	f000 f9db 	bl	108d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
   10522:	b128      	cbz	r0, 10530 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10524:	4620      	mov	r0, r4
   10526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1052a:	2101      	movs	r1, #1
   1052c:	f000 b884 	b.w	10638 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   10530:	2011      	movs	r0, #17
   10532:	bd10      	pop	{r4, pc}

00010534 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   10534:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10536:	460c      	mov	r4, r1
   10538:	4605      	mov	r5, r0
   1053a:	8800      	ldrh	r0, [r0, #0]
   1053c:	4669      	mov	r1, sp
   1053e:	f7fd ffd8 	bl	e4f2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10542:	2800      	cmp	r0, #0
   10544:	d106      	bne.n	10554 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   10546:	9801      	ldr	r0, [sp, #4]
   10548:	8829      	ldrh	r1, [r5, #0]
   1054a:	8021      	strh	r1, [r4, #0]
   1054c:	f8b0 00a8 	ldrh.w	r0, [r0, #168]	; 0xa8
   10550:	8060      	strh	r0, [r4, #2]
   10552:	2000      	movs	r0, #0
   10554:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00010556 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   10556:	b510      	push	{r4, lr}
   10558:	4604      	mov	r4, r0
   1055a:	4601      	mov	r1, r0
   1055c:	2000      	movs	r0, #0
   1055e:	f7f5 fc0b 	bl	5d78 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   10562:	b910      	cbnz	r0, 1056a <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   10564:	2000      	movs	r0, #0
   10566:	6020      	str	r0, [r4, #0]
   10568:	80a0      	strh	r0, [r4, #4]
   1056a:	2000      	movs	r0, #0
   1056c:	bd10      	pop	{r4, pc}

0001056e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   1056e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10570:	8800      	ldrh	r0, [r0, #0]
   10572:	4669      	mov	r1, sp
   10574:	f7fd ffbd 	bl	e4f2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10578:	b958      	cbnz	r0, 10592 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
   1057a:	4668      	mov	r0, sp
   1057c:	f000 fa4d 	bl	10a1a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
   10580:	b138      	cbz	r0, 10592 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
   10582:	9c01      	ldr	r4, [sp, #4]
   10584:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
   10588:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   1058c:	3478      	adds	r4, #120	; 0x78
   1058e:	b929      	cbnz	r1, 1059c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
   10590:	e001      	b.n	10596 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
   10592:	2002      	movs	r0, #2
   10594:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10596:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   1059a:	b109      	cbz	r1, 105a0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
   1059c:	203a      	movs	r0, #58	; 0x3a
   1059e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   105a0:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
   105a4:	f04f 0501 	mov.w	r5, #1
   105a8:	0789      	lsls	r1, r1, #30
   105aa:	d103      	bne.n	105b4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
   105ac:	7005      	strb	r5, [r0, #0]
   105ae:	4668      	mov	r0, sp
   105b0:	f7fe fb3c 	bl	ec2c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   105b4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
   105b8:	2000      	movs	r0, #0
   105ba:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

000105bc <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   105bc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   105be:	460c      	mov	r4, r1
   105c0:	4605      	mov	r5, r0
   105c2:	8800      	ldrh	r0, [r0, #0]
   105c4:	4669      	mov	r1, sp
   105c6:	f7fd ff94 	bl	e4f2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   105ca:	b108      	cbz	r0, 105d0 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   105cc:	2002      	movs	r0, #2
   105ce:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   105d0:	78a8      	ldrb	r0, [r5, #2]
   105d2:	b130      	cbz	r0, 105e2 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
   105d4:	f000 f9f9 	bl	109ca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
   105d8:	70a0      	strb	r0, [r4, #2]
   105da:	8828      	ldrh	r0, [r5, #0]
   105dc:	8020      	strh	r0, [r4, #0]
   105de:	2000      	movs	r0, #0
   105e0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   105e2:	9801      	ldr	r0, [sp, #4]
   105e4:	f890 0072 	ldrb.w	r0, [r0, #114]	; 0x72
   105e8:	e7f6      	b.n	105d8 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

000105ea <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   105ea:	b510      	push	{r4, lr}
   105ec:	f7fa ffc0 	bl	b570 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   105f0:	2000      	movs	r0, #0
   105f2:	bd10      	pop	{r4, pc}

000105f4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   105f4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   105f8:	4604      	mov	r4, r0
   105fa:	8840      	ldrh	r0, [r0, #2]
   105fc:	460d      	mov	r5, r1
   105fe:	b1b8      	cbz	r0, 10630 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   10600:	8820      	ldrh	r0, [r4, #0]
   10602:	4669      	mov	r1, sp
   10604:	f7fd ff75 	bl	e4f2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10608:	2800      	cmp	r0, #0
   1060a:	d10f      	bne.n	1062c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   1060c:	8820      	ldrh	r0, [r4, #0]
   1060e:	8028      	strh	r0, [r5, #0]
   10610:	9e01      	ldr	r6, [sp, #4]
   10612:	f106 0510 	add.w	r5, r6, #16
   10616:	3678      	adds	r6, #120	; 0x78
   10618:	682f      	ldr	r7, [r5, #0]
   1061a:	8862      	ldrh	r2, [r4, #2]
   1061c:	4639      	mov	r1, r7
   1061e:	4630      	mov	r0, r6
   10620:	f7fe f8a8 	bl	e774 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   10624:	6828      	ldr	r0, [r5, #0]
   10626:	42b8      	cmp	r0, r7
   10628:	d1f6      	bne.n	10618 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   1062a:	2000      	movs	r0, #0
   1062c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10630:	2012      	movs	r0, #18
   10632:	e7fb      	b.n	1062c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

00010634 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   10634:	f7fa bdf8 	b.w	b228 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00010638 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   10638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1063c:	b086      	sub	sp, #24
   1063e:	468a      	mov	sl, r1
   10640:	4606      	mov	r6, r0
   10642:	8800      	ldrh	r0, [r0, #0]
   10644:	a901      	add	r1, sp, #4
   10646:	f7fd ff54 	bl	e4f2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1064a:	2800      	cmp	r0, #0
   1064c:	d13b      	bne.n	106c6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   1064e:	9802      	ldr	r0, [sp, #8]
   10650:	f04f 0800 	mov.w	r8, #0
   10654:	4601      	mov	r1, r0
   10656:	4689      	mov	r9, r1
   10658:	f890 120c 	ldrb.w	r1, [r0, #524]	; 0x20c
   1065c:	f88d 1000 	strb.w	r1, [sp]
   10660:	9900      	ldr	r1, [sp, #0]
   10662:	9100      	str	r1, [sp, #0]
   10664:	f89d 1000 	ldrb.w	r1, [sp]
   10668:	3078      	adds	r0, #120	; 0x78
   1066a:	b109      	cbz	r1, 10670 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   1066c:	2501      	movs	r5, #1
   1066e:	e000      	b.n	10672 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   10670:	2500      	movs	r5, #0
   10672:	7b81      	ldrb	r1, [r0, #14]
   10674:	2921      	cmp	r1, #33	; 0x21
   10676:	d100      	bne.n	1067a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   10678:	b13d      	cbz	r5, 1068a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   1067a:	2400      	movs	r4, #0
   1067c:	304c      	adds	r0, #76	; 0x4c
   1067e:	2108      	movs	r1, #8
   10680:	4607      	mov	r7, r0
   10682:	f7ff facd 	bl	fc20 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
   10686:	b110      	cbz	r0, 1068e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   10688:	e007      	b.n	1069a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   1068a:	2401      	movs	r4, #1
   1068c:	e7f6      	b.n	1067c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   1068e:	210b      	movs	r1, #11
   10690:	4638      	mov	r0, r7
   10692:	f7ff fac5 	bl	fc20 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
   10696:	b900      	cbnz	r0, 1069a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   10698:	b1a4      	cbz	r4, 106c4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8c>
   1069a:	a804      	add	r0, sp, #16
   1069c:	9000      	str	r0, [sp, #0]
   1069e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   106a2:	ab03      	add	r3, sp, #12
   106a4:	4632      	mov	r2, r6
   106a6:	4649      	mov	r1, r9
   106a8:	f000 f96f 	bl	1098a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
   106ac:	0007      	movs	r7, r0
   106ae:	d10a      	bne.n	106c6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   106b0:	f89d 0004 	ldrb.w	r0, [sp, #4]
   106b4:	9c02      	ldr	r4, [sp, #8]
   106b6:	b148      	cbz	r0, 106cc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
   106b8:	f504 74df 	add.w	r4, r4, #446	; 0x1be
   106bc:	20ff      	movs	r0, #255	; 0xff
   106be:	7060      	strb	r0, [r4, #1]
   106c0:	b94d      	cbnz	r5, 106d6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
   106c2:	e006      	b.n	106d2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9a>
   106c4:	201a      	movs	r0, #26
   106c6:	b006      	add	sp, #24
   106c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   106cc:	f504 749f 	add.w	r4, r4, #318	; 0x13e
   106d0:	e7f4      	b.n	106bc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   106d2:	7820      	ldrb	r0, [r4, #0]
   106d4:	b108      	cbz	r0, 106da <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa2>
   106d6:	273a      	movs	r7, #58	; 0x3a
   106d8:	e012      	b.n	10700 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc8>
   106da:	f884 a000 	strb.w	sl, [r4]
   106de:	f89d 100c 	ldrb.w	r1, [sp, #12]
   106e2:	70a1      	strb	r1, [r4, #2]
   106e4:	f89d 0010 	ldrb.w	r0, [sp, #16]
   106e8:	70e0      	strb	r0, [r4, #3]
   106ea:	f88d 1000 	strb.w	r1, [sp]
   106ee:	f88d 0001 	strb.w	r0, [sp, #1]
   106f2:	88b0      	ldrh	r0, [r6, #4]
   106f4:	f8ad 0002 	strh.w	r0, [sp, #2]
   106f8:	4669      	mov	r1, sp
   106fa:	4648      	mov	r0, r9
   106fc:	f7fd ffb8 	bl	e670 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   10700:	f884 8001 	strb.w	r8, [r4, #1]
   10704:	4638      	mov	r0, r7
   10706:	e7de      	b.n	106c6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>

00010708 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   10708:	b510      	push	{r4, lr}
   1070a:	2008      	movs	r0, #8
   1070c:	f7fa ff96 	bl	b63c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   10710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10714:	f7f8 bd6a 	b.w	91ec <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   10718:	f44f 71a4 	mov.w	r1, #328	; 0x148
   1071c:	4288      	cmp	r0, r1
   1071e:	d303      	bcc.n	10728 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
   10720:	f640 0148 	movw	r1, #2120	; 0x848
   10724:	4288      	cmp	r0, r1
   10726:	d300      	bcc.n	1072a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
   10728:	4608      	mov	r0, r1
   1072a:	4770      	bx	lr
   1072c:	07c1      	lsls	r1, r0, #31
   1072e:	d001      	beq.n	10734 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
   10730:	2001      	movs	r0, #1
   10732:	4770      	bx	lr
   10734:	0780      	lsls	r0, r0, #30
   10736:	d501      	bpl.n	1073c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
   10738:	2002      	movs	r0, #2
   1073a:	4770      	bx	lr
   1073c:	2000      	movs	r0, #0
   1073e:	4770      	bx	lr
   10740:	b510      	push	{r4, lr}
   10742:	2801      	cmp	r0, #1
   10744:	d006      	beq.n	10754 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
   10746:	2802      	cmp	r0, #2
   10748:	d004      	beq.n	10754 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
   1074a:	f44f 711d 	mov.w	r1, #628	; 0x274
   1074e:	2006      	movs	r0, #6
   10750:	f7f4 fc6c 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10754:	bd10      	pop	{r4, pc}
   10756:	b50e      	push	{r1, r2, r3, lr}
   10758:	4669      	mov	r1, sp
   1075a:	2001      	movs	r0, #1
   1075c:	f7fd fc4a 	bl	dff4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   10760:	b150      	cbz	r0, 10778 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
   10762:	f240 1153 	movw	r1, #339	; 0x153
   10766:	2039      	movs	r0, #57	; 0x39
   10768:	f7f4 fc60 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1076c:	9802      	ldr	r0, [sp, #8]
   1076e:	f7fe fec1 	bl	f4f4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10772:	b108      	cbz	r0, 10778 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
   10774:	2001      	movs	r0, #1
   10776:	bd0e      	pop	{r1, r2, r3, pc}
   10778:	4668      	mov	r0, sp
   1077a:	f7f4 fe8f 	bl	549c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1077e:	2800      	cmp	r0, #0
   10780:	d0f4      	beq.n	1076c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
   10782:	2000      	movs	r0, #0
   10784:	bd0e      	pop	{r1, r2, r3, pc}
   10786:	b510      	push	{r4, lr}
   10788:	f7ff ffe5 	bl	10756 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
   1078c:	b158      	cbz	r0, 107a6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
   1078e:	f000 f966 	bl	10a5e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x356>
   10792:	4604      	mov	r4, r0
   10794:	f7fe fcd3 	bl	f13e <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10798:	b918      	cbnz	r0, 107a2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
   1079a:	4620      	mov	r0, r4
   1079c:	f7fe fcc5 	bl	f12a <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   107a0:	b108      	cbz	r0, 107a6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
   107a2:	2000      	movs	r0, #0
   107a4:	bd10      	pop	{r4, pc}
   107a6:	2001      	movs	r0, #1
   107a8:	bd10      	pop	{r4, pc}
   107aa:	b570      	push	{r4, r5, r6, lr}
   107ac:	460c      	mov	r4, r1
   107ae:	4605      	mov	r5, r0
   107b0:	b112      	cbz	r2, 107b8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb0>
   107b2:	291f      	cmp	r1, #31
   107b4:	d80c      	bhi.n	107d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xc8>
   107b6:	e016      	b.n	107e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xde>
   107b8:	f7f5 f936 	bl	5a28 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   107bc:	42a0      	cmp	r0, r4
   107be:	d201      	bcs.n	107c4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xbc>
   107c0:	2007      	movs	r0, #7
   107c2:	bd70      	pop	{r4, r5, r6, pc}
   107c4:	4628      	mov	r0, r5
   107c6:	f7fe fcb8 	bl	f13a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   107ca:	b118      	cbz	r0, 107d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
   107cc:	2c1f      	cmp	r4, #31
   107ce:	d901      	bls.n	107d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
   107d0:	2012      	movs	r0, #18
   107d2:	bd70      	pop	{r4, r5, r6, pc}
   107d4:	4628      	mov	r0, r5
   107d6:	f7fe fcb9 	bl	f14c <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   107da:	b130      	cbz	r0, 107ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe2>
   107dc:	4621      	mov	r1, r4
   107de:	4628      	mov	r0, r5
   107e0:	f7fe fc80 	bl	f0e4 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   107e4:	b118      	cbz	r0, 107ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe6>
   107e6:	2000      	movs	r0, #0
   107e8:	bd70      	pop	{r4, r5, r6, pc}
   107ea:	2042      	movs	r0, #66	; 0x42
   107ec:	bd70      	pop	{r4, r5, r6, pc}
   107ee:	2045      	movs	r0, #69	; 0x45
   107f0:	bd70      	pop	{r4, r5, r6, pc}
   107f2:	b510      	push	{r4, lr}
   107f4:	4604      	mov	r4, r0
   107f6:	7840      	ldrb	r0, [r0, #1]
   107f8:	06c1      	lsls	r1, r0, #27
   107fa:	d51c      	bpl.n	10836 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   107fc:	07c0      	lsls	r0, r0, #31
   107fe:	d00b      	beq.n	10818 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   10800:	f7fa fef0 	bl	b5e4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   10804:	b1b8      	cbz	r0, 10836 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   10806:	7860      	ldrb	r0, [r4, #1]
   10808:	06c1      	lsls	r1, r0, #27
   1080a:	d405      	bmi.n	10818 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   1080c:	0700      	lsls	r0, r0, #28
   1080e:	d503      	bpl.n	10818 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   10810:	7d20      	ldrb	r0, [r4, #20]
   10812:	2802      	cmp	r0, #2
   10814:	d10f      	bne.n	10836 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   10816:	e010      	b.n	1083a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   10818:	7d20      	ldrb	r0, [r4, #20]
   1081a:	2802      	cmp	r0, #2
   1081c:	d001      	beq.n	10822 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x11a>
   1081e:	7ea0      	ldrb	r0, [r4, #26]
   10820:	b948      	cbnz	r0, 10836 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   10822:	7860      	ldrb	r0, [r4, #1]
   10824:	0700      	lsls	r0, r0, #28
   10826:	d408      	bmi.n	1083a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   10828:	f8d4 0005 	ldr.w	r0, [r4, #5]
   1082c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   10830:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   10834:	d201      	bcs.n	1083a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   10836:	2011      	movs	r0, #17
   10838:	bd10      	pop	{r4, pc}
   1083a:	2000      	movs	r0, #0
   1083c:	bd10      	pop	{r4, pc}
   1083e:	b538      	push	{r3, r4, r5, lr}
   10840:	4604      	mov	r4, r0
   10842:	7800      	ldrb	r0, [r0, #0]
   10844:	28ef      	cmp	r0, #239	; 0xef
   10846:	d843      	bhi.n	108d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10848:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   1084c:	f8ad 0000 	strh.w	r0, [sp]
   10850:	9800      	ldr	r0, [sp, #0]
   10852:	f000 f9e3 	bl	10c1c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x514>
   10856:	b3a0      	cbz	r0, 108c2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
   10858:	7861      	ldrb	r1, [r4, #1]
   1085a:	0708      	lsls	r0, r1, #28
   1085c:	d40b      	bmi.n	10876 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x16e>
   1085e:	f8d4 0002 	ldr.w	r0, [r4, #2]
   10862:	f8d4 3005 	ldr.w	r3, [r4, #5]
   10866:	0a02      	lsrs	r2, r0, #8
   10868:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   1086c:	d830      	bhi.n	108d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1086e:	2220      	movs	r2, #32
   10870:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   10874:	d82c      	bhi.n	108d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10876:	7a60      	ldrb	r0, [r4, #9]
   10878:	b318      	cbz	r0, 108c2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
   1087a:	2807      	cmp	r0, #7
   1087c:	d828      	bhi.n	108d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1087e:	7aa0      	ldrb	r0, [r4, #10]
   10880:	b128      	cbz	r0, 1088e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   10882:	2801      	cmp	r0, #1
   10884:	d003      	beq.n	1088e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   10886:	2802      	cmp	r0, #2
   10888:	d001      	beq.n	1088e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   1088a:	2803      	cmp	r0, #3
   1088c:	d120      	bne.n	108d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1088e:	074a      	lsls	r2, r1, #29
   10890:	d403      	bmi.n	1089a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
   10892:	2802      	cmp	r0, #2
   10894:	d001      	beq.n	1089a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
   10896:	2803      	cmp	r0, #3
   10898:	d105      	bne.n	108a6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19e>
   1089a:	7ae0      	ldrb	r0, [r4, #11]
   1089c:	b108      	cbz	r0, 108a2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
   1089e:	2801      	cmp	r0, #1
   108a0:	d116      	bne.n	108d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   108a2:	0748      	lsls	r0, r1, #29
   108a4:	d407      	bmi.n	108b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   108a6:	7ca0      	ldrb	r0, [r4, #18]
   108a8:	b128      	cbz	r0, 108b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   108aa:	2801      	cmp	r0, #1
   108ac:	d003      	beq.n	108b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   108ae:	2802      	cmp	r0, #2
   108b0:	d001      	beq.n	108b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   108b2:	2803      	cmp	r0, #3
   108b4:	d10c      	bne.n	108d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   108b6:	06c8      	lsls	r0, r1, #27
   108b8:	7d20      	ldrb	r0, [r4, #20]
   108ba:	d503      	bpl.n	108c4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1bc>
   108bc:	2801      	cmp	r0, #1
   108be:	d107      	bne.n	108d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   108c0:	e002      	b.n	108c8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c0>
   108c2:	e005      	b.n	108d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   108c4:	2802      	cmp	r0, #2
   108c6:	d003      	beq.n	108d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   108c8:	7e20      	ldrb	r0, [r4, #24]
   108ca:	b118      	cbz	r0, 108d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
   108cc:	2801      	cmp	r0, #1
   108ce:	d001      	beq.n	108d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
   108d0:	2012      	movs	r0, #18
   108d2:	bd38      	pop	{r3, r4, r5, pc}
   108d4:	2000      	movs	r0, #0
   108d6:	bd38      	pop	{r3, r4, r5, pc}
   108d8:	b510      	push	{r4, lr}
   108da:	0004      	movs	r4, r0
   108dc:	d005      	beq.n	108ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
   108de:	f7fa febf 	bl	b660 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   108e2:	4384      	bics	r4, r0
   108e4:	d001      	beq.n	108ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
   108e6:	2000      	movs	r0, #0
   108e8:	bd10      	pop	{r4, pc}
   108ea:	2001      	movs	r0, #1
   108ec:	bd10      	pop	{r4, pc}
   108ee:	28fb      	cmp	r0, #251	; 0xfb
   108f0:	d803      	bhi.n	108fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
   108f2:	f640 0048 	movw	r0, #2120	; 0x848
   108f6:	4281      	cmp	r1, r0
   108f8:	d901      	bls.n	108fe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
   108fa:	2011      	movs	r0, #17
   108fc:	4770      	bx	lr
   108fe:	2000      	movs	r0, #0
   10900:	4770      	bx	lr
   10902:	381b      	subs	r0, #27
   10904:	28e1      	cmp	r0, #225	; 0xe1
   10906:	d206      	bcs.n	10916 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
   10908:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   1090c:	d303      	bcc.n	10916 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
   1090e:	f244 2090 	movw	r0, #17040	; 0x4290
   10912:	4281      	cmp	r1, r0
   10914:	d901      	bls.n	1091a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x212>
   10916:	2012      	movs	r0, #18
   10918:	4770      	bx	lr
   1091a:	2000      	movs	r0, #0
   1091c:	4770      	bx	lr
   1091e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10922:	4606      	mov	r6, r0
   10924:	f8b0 7056 	ldrh.w	r7, [r0, #86]	; 0x56
   10928:	f8b0 4058 	ldrh.w	r4, [r0, #88]	; 0x58
   1092c:	4615      	mov	r5, r2
   1092e:	3030      	adds	r0, #48	; 0x30
   10930:	f7f7 fe56 	bl	85e0 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   10934:	4680      	mov	r8, r0
   10936:	2102      	movs	r1, #2
   10938:	f7fd fe6b 	bl	e612 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1093c:	4287      	cmp	r7, r0
   1093e:	d200      	bcs.n	10942 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23a>
   10940:	4638      	mov	r0, r7
   10942:	4607      	mov	r7, r0
   10944:	2102      	movs	r1, #2
   10946:	4640      	mov	r0, r8
   10948:	f7fd fe63 	bl	e612 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1094c:	4284      	cmp	r4, r0
   1094e:	d200      	bcs.n	10952 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24a>
   10950:	4620      	mov	r0, r4
   10952:	8831      	ldrh	r1, [r6, #0]
   10954:	8029      	strh	r1, [r5, #0]
   10956:	2f1b      	cmp	r7, #27
   10958:	d913      	bls.n	10982 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27a>
   1095a:	2ffb      	cmp	r7, #251	; 0xfb
   1095c:	d300      	bcc.n	10960 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
   1095e:	27fb      	movs	r7, #251	; 0xfb
   10960:	806f      	strh	r7, [r5, #2]
   10962:	281b      	cmp	r0, #27
   10964:	d90f      	bls.n	10986 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27e>
   10966:	28fb      	cmp	r0, #251	; 0xfb
   10968:	d300      	bcc.n	1096c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
   1096a:	20fb      	movs	r0, #251	; 0xfb
   1096c:	80e8      	strh	r0, [r5, #6]
   1096e:	4640      	mov	r0, r8
   10970:	f7ff fed2 	bl	10718 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
   10974:	80a8      	strh	r0, [r5, #4]
   10976:	4640      	mov	r0, r8
   10978:	f7ff fece 	bl	10718 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
   1097c:	8128      	strh	r0, [r5, #8]
   1097e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10982:	271b      	movs	r7, #27
   10984:	e7ec      	b.n	10960 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
   10986:	201b      	movs	r0, #27
   10988:	e7f0      	b.n	1096c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
   1098a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1098e:	7890      	ldrb	r0, [r2, #2]
   10990:	9e06      	ldr	r6, [sp, #24]
   10992:	461d      	mov	r5, r3
   10994:	4614      	mov	r4, r2
   10996:	b908      	cbnz	r0, 1099c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x294>
   10998:	f7fa fe62 	bl	b660 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1099c:	78e4      	ldrb	r4, [r4, #3]
   1099e:	4607      	mov	r7, r0
   109a0:	b914      	cbnz	r4, 109a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a0>
   109a2:	f7fa fe5d 	bl	b660 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   109a6:	4604      	mov	r4, r0
   109a8:	b16f      	cbz	r7, 109c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   109aa:	b164      	cbz	r4, 109c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   109ac:	4638      	mov	r0, r7
   109ae:	f7ff febd 	bl	1072c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
   109b2:	4620      	mov	r0, r4
   109b4:	f7ff feba 	bl	1072c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
   109b8:	b12f      	cbz	r7, 109c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   109ba:	b124      	cbz	r4, 109c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   109bc:	702f      	strb	r7, [r5, #0]
   109be:	7034      	strb	r4, [r6, #0]
   109c0:	2000      	movs	r0, #0
   109c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   109c6:	2009      	movs	r0, #9
   109c8:	e7fb      	b.n	109c2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2ba>
   109ca:	b510      	push	{r4, lr}
   109cc:	f7fc fa87 	bl	cede <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
   109d0:	b928      	cbnz	r0, 109de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
   109d2:	f7fc faba 	bl	cf4a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
   109d6:	b910      	cbnz	r0, 109de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
   109d8:	f7fc fac1 	bl	cf5e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   109dc:	b108      	cbz	r0, 109e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2da>
   109de:	2008      	movs	r0, #8
   109e0:	bd10      	pop	{r4, pc}
   109e2:	f7fc fa51 	bl	ce88 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   109e6:	b940      	cbnz	r0, 109fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   109e8:	f7fc fa58 	bl	ce9c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   109ec:	b928      	cbnz	r0, 109fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   109ee:	f7fc fa6c 	bl	ceca <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   109f2:	b910      	cbnz	r0, 109fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   109f4:	f7fc fa7d 	bl	cef2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   109f8:	b108      	cbz	r0, 109fe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f6>
   109fa:	2004      	movs	r0, #4
   109fc:	bd10      	pop	{r4, pc}
   109fe:	f240 51d6 	movw	r1, #1494	; 0x5d6
   10a02:	2039      	movs	r0, #57	; 0x39
   10a04:	f7f4 fb12 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10a08:	b510      	push	{r4, lr}
   10a0a:	f7fa fe23 	bl	b654 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   10a0e:	0940      	lsrs	r0, r0, #5
   10a10:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
   10a14:	f000 0001 	and.w	r0, r0, #1
   10a18:	bd10      	pop	{r4, pc}
   10a1a:	6840      	ldr	r0, [r0, #4]
   10a1c:	f000 b800 	b.w	10a20 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x318>
   10a20:	b508      	push	{r3, lr}
   10a22:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
   10a26:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
   10a2a:	f88d 0000 	strb.w	r0, [sp]
   10a2e:	9800      	ldr	r0, [sp, #0]
   10a30:	9000      	str	r0, [sp, #0]
   10a32:	f89d 0000 	ldrb.w	r0, [sp]
   10a36:	b100      	cbz	r0, 10a3a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x332>
   10a38:	2001      	movs	r0, #1
   10a3a:	1e40      	subs	r0, r0, #1
   10a3c:	4208      	tst	r0, r1
   10a3e:	d003      	beq.n	10a48 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x340>
   10a40:	2904      	cmp	r1, #4
   10a42:	d001      	beq.n	10a48 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x340>
   10a44:	2001      	movs	r0, #1
   10a46:	bd08      	pop	{r3, pc}
   10a48:	2000      	movs	r0, #0
   10a4a:	bd08      	pop	{r3, pc}
   10a4c:	b510      	push	{r4, lr}
   10a4e:	f7fa fe01 	bl	b654 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   10a52:	0a00      	lsrs	r0, r0, #8
   10a54:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   10a58:	f000 0001 	and.w	r0, r0, #1
   10a5c:	bd10      	pop	{r4, pc}
   10a5e:	b510      	push	{r4, lr}
   10a60:	2101      	movs	r1, #1
   10a62:	2000      	movs	r0, #0
   10a64:	f7fd fabc 	bl	dfe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10a68:	0004      	movs	r4, r0
   10a6a:	d108      	bne.n	10a7e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x376>
   10a6c:	2200      	movs	r2, #0
   10a6e:	2101      	movs	r1, #1
   10a70:	4610      	mov	r0, r2
   10a72:	f7fd faab 	bl	dfcc <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   10a76:	0004      	movs	r4, r0
   10a78:	d003      	beq.n	10a82 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x37a>
   10a7a:	f7fe fafb 	bl	f074 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   10a7e:	4620      	mov	r0, r4
   10a80:	bd10      	pop	{r4, pc}
   10a82:	f44f 7110 	mov.w	r1, #576	; 0x240
   10a86:	2039      	movs	r0, #57	; 0x39
   10a88:	f7f4 fad0 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10a8c:	b510      	push	{r4, lr}
   10a8e:	f7ff fe62 	bl	10756 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
   10a92:	2800      	cmp	r0, #0
   10a94:	d000      	beq.n	10a98 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x390>
   10a96:	2001      	movs	r0, #1
   10a98:	bd10      	pop	{r4, pc}
   10a9a:	b570      	push	{r4, r5, r6, lr}
   10a9c:	4605      	mov	r5, r0
   10a9e:	f7fe fb55 	bl	f14c <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10aa2:	b170      	cbz	r0, 10ac2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ba>
   10aa4:	4628      	mov	r0, r5
   10aa6:	f7fe fd25 	bl	f4f4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10aaa:	2800      	cmp	r0, #0
   10aac:	d008      	beq.n	10ac0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b8>
   10aae:	4628      	mov	r0, r5
   10ab0:	f7fe fd1d 	bl	f4ee <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   10ab4:	4604      	mov	r4, r0
   10ab6:	4628      	mov	r0, r5
   10ab8:	f7fe fcf3 	bl	f4a2 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   10abc:	b118      	cbz	r0, 10ac6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
   10abe:	200c      	movs	r0, #12
   10ac0:	bd70      	pop	{r4, r5, r6, pc}
   10ac2:	2042      	movs	r0, #66	; 0x42
   10ac4:	bd70      	pop	{r4, r5, r6, pc}
   10ac6:	b164      	cbz	r4, 10ae2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3da>
   10ac8:	8820      	ldrh	r0, [r4, #0]
   10aca:	f7fd fc44 	bl	e356 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   10ace:	8820      	ldrh	r0, [r4, #0]
   10ad0:	2100      	movs	r1, #0
   10ad2:	f7f4 fd33 	bl	553c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   10ad6:	b120      	cbz	r0, 10ae2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3da>
   10ad8:	f241 5129 	movw	r1, #5417	; 0x1529
   10adc:	2039      	movs	r0, #57	; 0x39
   10ade:	f7f4 faa5 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10ae2:	2000      	movs	r0, #0
   10ae4:	bd70      	pop	{r4, r5, r6, pc}
   10ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10aea:	b088      	sub	sp, #32
   10aec:	4604      	mov	r4, r0
   10aee:	8800      	ldrh	r0, [r0, #0]
   10af0:	a906      	add	r1, sp, #24
   10af2:	f7fd fcfe 	bl	e4f2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10af6:	2800      	cmp	r0, #0
   10af8:	d147      	bne.n	10b8a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x482>
   10afa:	9807      	ldr	r0, [sp, #28]
   10afc:	2700      	movs	r7, #0
   10afe:	f890 11f8 	ldrb.w	r1, [r0, #504]	; 0x1f8
   10b02:	f88d 1008 	strb.w	r1, [sp, #8]
   10b06:	9902      	ldr	r1, [sp, #8]
   10b08:	9102      	str	r1, [sp, #8]
   10b0a:	f89d 1008 	ldrb.w	r1, [sp, #8]
   10b0e:	3078      	adds	r0, #120	; 0x78
   10b10:	b101      	cbz	r1, 10b14 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x40c>
   10b12:	2101      	movs	r1, #1
   10b14:	f88d 100c 	strb.w	r1, [sp, #12]
   10b18:	7bc1      	ldrb	r1, [r0, #15]
   10b1a:	0689      	lsls	r1, r1, #26
   10b1c:	d502      	bpl.n	10b24 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x41c>
   10b1e:	f89d 100c 	ldrb.w	r1, [sp, #12]
   10b22:	b141      	cbz	r1, 10b36 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42e>
   10b24:	2100      	movs	r1, #0
   10b26:	f88d 1004 	strb.w	r1, [sp, #4]
   10b2a:	2105      	movs	r1, #5
   10b2c:	304c      	adds	r0, #76	; 0x4c
   10b2e:	f7ff f877 	bl	fc20 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
   10b32:	b110      	cbz	r0, 10b3a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
   10b34:	e004      	b.n	10b40 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x438>
   10b36:	2101      	movs	r1, #1
   10b38:	e7f5      	b.n	10b26 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x41e>
   10b3a:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10b3e:	b318      	cbz	r0, 10b88 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x480>
   10b40:	8921      	ldrh	r1, [r4, #8]
   10b42:	88e0      	ldrh	r0, [r4, #6]
   10b44:	f7ff fedd 	bl	10902 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
   10b48:	2800      	cmp	r0, #0
   10b4a:	d11e      	bne.n	10b8a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x482>
   10b4c:	88a1      	ldrh	r1, [r4, #4]
   10b4e:	8860      	ldrh	r0, [r4, #2]
   10b50:	f7ff fed7 	bl	10902 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
   10b54:	2800      	cmp	r0, #0
   10b56:	d118      	bne.n	10b8a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x482>
   10b58:	8921      	ldrh	r1, [r4, #8]
   10b5a:	88e0      	ldrh	r0, [r4, #6]
   10b5c:	f7ff fec7 	bl	108ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
   10b60:	2800      	cmp	r0, #0
   10b62:	d112      	bne.n	10b8a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x482>
   10b64:	88a1      	ldrh	r1, [r4, #4]
   10b66:	8860      	ldrh	r0, [r4, #2]
   10b68:	f7ff fec1 	bl	108ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
   10b6c:	0006      	movs	r6, r0
   10b6e:	d10c      	bne.n	10b8a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x482>
   10b70:	9807      	ldr	r0, [sp, #28]
   10b72:	f500 75da 	add.w	r5, r0, #436	; 0x1b4
   10b76:	f04f 08ff 	mov.w	r8, #255	; 0xff
   10b7a:	f885 8001 	strb.w	r8, [r5, #1]
   10b7e:	f89d 100c 	ldrb.w	r1, [sp, #12]
   10b82:	b129      	cbz	r1, 10b90 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x488>
   10b84:	263a      	movs	r6, #58	; 0x3a
   10b86:	e02f      	b.n	10be8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e0>
   10b88:	201a      	movs	r0, #26
   10b8a:	b008      	add	sp, #32
   10b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10b90:	4639      	mov	r1, r7
   10b92:	aa03      	add	r2, sp, #12
   10b94:	f7ff fec3 	bl	1091e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
   10b98:	8861      	ldrh	r1, [r4, #2]
   10b9a:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   10b9e:	4281      	cmp	r1, r0
   10ba0:	d200      	bcs.n	10ba4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x49c>
   10ba2:	4608      	mov	r0, r1
   10ba4:	80e8      	strh	r0, [r5, #6]
   10ba6:	88a1      	ldrh	r1, [r4, #4]
   10ba8:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   10bac:	4281      	cmp	r1, r0
   10bae:	d200      	bcs.n	10bb2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4aa>
   10bb0:	4608      	mov	r0, r1
   10bb2:	8128      	strh	r0, [r5, #8]
   10bb4:	88e2      	ldrh	r2, [r4, #6]
   10bb6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   10bba:	428a      	cmp	r2, r1
   10bbc:	d200      	bcs.n	10bc0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4b8>
   10bbe:	4611      	mov	r1, r2
   10bc0:	8069      	strh	r1, [r5, #2]
   10bc2:	8922      	ldrh	r2, [r4, #8]
   10bc4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   10bc8:	428a      	cmp	r2, r1
   10bca:	d200      	bcs.n	10bce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c6>
   10bcc:	4611      	mov	r1, r2
   10bce:	f640 0248 	movw	r2, #2120	; 0x848
   10bd2:	80a9      	strh	r1, [r5, #4]
   10bd4:	4291      	cmp	r1, r2
   10bd6:	d300      	bcc.n	10bda <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4d2>
   10bd8:	4611      	mov	r1, r2
   10bda:	80a9      	strh	r1, [r5, #4]
   10bdc:	4290      	cmp	r0, r2
   10bde:	d200      	bcs.n	10be2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4da>
   10be0:	4602      	mov	r2, r0
   10be2:	812a      	strh	r2, [r5, #8]
   10be4:	f885 8000 	strb.w	r8, [r5]
   10be8:	706f      	strb	r7, [r5, #1]
   10bea:	4630      	mov	r0, r6
   10bec:	e7cd      	b.n	10b8a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x482>
   10bee:	b530      	push	{r4, r5, lr}
   10bf0:	f340 0400 	sbfx	r4, r0, #0, #1
   10bf4:	f340 0040 	sbfx	r0, r0, #1, #1
   10bf8:	1c40      	adds	r0, r0, #1
   10bfa:	9d03      	ldr	r5, [sp, #12]
   10bfc:	1c64      	adds	r4, r4, #1
   10bfe:	d000      	beq.n	10c02 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4fa>
   10c00:	b119      	cbz	r1, 10c0a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x502>
   10c02:	b100      	cbz	r0, 10c06 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4fe>
   10c04:	b10a      	cbz	r2, 10c0a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x502>
   10c06:	b91c      	cbnz	r4, 10c10 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x508>
   10c08:	e001      	b.n	10c0e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x506>
   10c0a:	2011      	movs	r0, #17
   10c0c:	bd30      	pop	{r4, r5, pc}
   10c0e:	2100      	movs	r1, #0
   10c10:	7019      	strb	r1, [r3, #0]
   10c12:	b900      	cbnz	r0, 10c16 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x50e>
   10c14:	2200      	movs	r2, #0
   10c16:	702a      	strb	r2, [r5, #0]
   10c18:	2000      	movs	r0, #0
   10c1a:	bd30      	pop	{r4, r5, pc}
   10c1c:	b2c0      	uxtb	r0, r0
   10c1e:	06c1      	lsls	r1, r0, #27
   10c20:	d40c      	bmi.n	10c3c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x534>
   10c22:	0681      	lsls	r1, r0, #26
   10c24:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   10c28:	d503      	bpl.n	10c32 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x52a>
   10c2a:	b9d1      	cbnz	r1, 10c62 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   10c2c:	0781      	lsls	r1, r0, #30
   10c2e:	d418      	bmi.n	10c62 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   10c30:	e001      	b.n	10c36 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x52e>
   10c32:	2900      	cmp	r1, #0
   10c34:	d1fa      	bne.n	10c2c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x524>
   10c36:	0700      	lsls	r0, r0, #28
   10c38:	d413      	bmi.n	10c62 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   10c3a:	e010      	b.n	10c5e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x556>
   10c3c:	0641      	lsls	r1, r0, #25
   10c3e:	d410      	bmi.n	10c62 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   10c40:	0681      	lsls	r1, r0, #26
   10c42:	d40e      	bmi.n	10c62 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   10c44:	07c1      	lsls	r1, r0, #31
   10c46:	ea4f 7180 	mov.w	r1, r0, lsl #30
   10c4a:	d004      	beq.n	10c56 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x54e>
   10c4c:	2900      	cmp	r1, #0
   10c4e:	db02      	blt.n	10c56 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x54e>
   10c50:	0740      	lsls	r0, r0, #29
   10c52:	d404      	bmi.n	10c5e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x556>
   10c54:	e005      	b.n	10c62 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   10c56:	0701      	lsls	r1, r0, #28
   10c58:	d403      	bmi.n	10c62 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   10c5a:	0740      	lsls	r0, r0, #29
   10c5c:	d401      	bmi.n	10c62 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   10c5e:	2001      	movs	r0, #1
   10c60:	4770      	bx	lr
   10c62:	2000      	movs	r0, #0
   10c64:	4770      	bx	lr
   10c66:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10c68:	4669      	mov	r1, sp
   10c6a:	2001      	movs	r0, #1
   10c6c:	f7fd f9c2 	bl	dff4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   10c70:	b178      	cbz	r0, 10c92 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x58a>
   10c72:	f240 1171 	movw	r1, #369	; 0x171
   10c76:	2039      	movs	r0, #57	; 0x39
   10c78:	f7f4 f9d8 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10c7c:	9c02      	ldr	r4, [sp, #8]
   10c7e:	4620      	mov	r0, r4
   10c80:	f7fe fc38 	bl	f4f4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10c84:	b128      	cbz	r0, 10c92 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x58a>
   10c86:	4620      	mov	r0, r4
   10c88:	f7fe fa99 	bl	f1be <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   10c8c:	b108      	cbz	r0, 10c92 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x58a>
   10c8e:	2001      	movs	r0, #1
   10c90:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10c92:	4668      	mov	r0, sp
   10c94:	f7f4 fc02 	bl	549c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   10c98:	2800      	cmp	r0, #0
   10c9a:	d0ef      	beq.n	10c7c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x574>
   10c9c:	2000      	movs	r0, #0
   10c9e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10ca0:	b510      	push	{r4, lr}
   10ca2:	f7fe fc2a 	bl	f4fa <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   10ca6:	b108      	cbz	r0, 10cac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5a4>
   10ca8:	21e7      	movs	r1, #231	; 0xe7
   10caa:	e003      	b.n	10cb4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5ac>
   10cac:	f7f6 fe26 	bl	78fc <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   10cb0:	b118      	cbz	r0, 10cba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5b2>
   10cb2:	21ec      	movs	r1, #236	; 0xec
   10cb4:	2001      	movs	r0, #1
   10cb6:	f7f4 f9b9 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10cbe:	2001      	movs	r0, #1
   10cc0:	f7f4 bb82 	b.w	53c8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10cc4:	6802      	ldr	r2, [r0, #0]
   10cc6:	b912      	cbnz	r2, 10cce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5c6>
   10cc8:	6001      	str	r1, [r0, #0]
   10cca:	4770      	bx	lr
   10ccc:	4602      	mov	r2, r0
   10cce:	6850      	ldr	r0, [r2, #4]
   10cd0:	b108      	cbz	r0, 10cd6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5ce>
   10cd2:	428a      	cmp	r2, r1
   10cd4:	d1fa      	bne.n	10ccc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5c4>
   10cd6:	428a      	cmp	r2, r1
   10cd8:	d0f7      	beq.n	10cca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5c2>
   10cda:	6051      	str	r1, [r2, #4]
   10cdc:	4770      	bx	lr
   10cde:	b510      	push	{r4, lr}
   10ce0:	4604      	mov	r4, r0
   10ce2:	e002      	b.n	10cea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5e2>
   10ce4:	6820      	ldr	r0, [r4, #0]
   10ce6:	4780      	blx	r0
   10ce8:	6864      	ldr	r4, [r4, #4]
   10cea:	2c00      	cmp	r4, #0
   10cec:	d1fa      	bne.n	10ce4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5dc>
   10cee:	bd10      	pop	{r4, pc}
   10cf0:	b510      	push	{r4, lr}
   10cf2:	2000      	movs	r0, #0
   10cf4:	f7f4 fb68 	bl	53c8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10cf8:	f7f4 fd9e 	bl	5838 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   10cfc:	f7f5 f81e 	bl	5d3c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   10d00:	f7f5 fa0a 	bl	6118 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   10d04:	2800      	cmp	r0, #0
   10d06:	d003      	beq.n	10d10 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x608>
   10d08:	21c6      	movs	r1, #198	; 0xc6
   10d0a:	2001      	movs	r0, #1
   10d0c:	f7f4 f98e 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10d10:	bd10      	pop	{r4, pc}
   10d12:	b510      	push	{r4, lr}
   10d14:	f7ff ffc4 	bl	10ca0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x598>
   10d18:	f7fe ff42 	bl	fba0 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   10d1c:	2800      	cmp	r0, #0
   10d1e:	d004      	beq.n	10d2a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x622>
   10d20:	f240 1103 	movw	r1, #259	; 0x103
   10d24:	2001      	movs	r0, #1
   10d26:	f7f4 f981 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10d2a:	bd10      	pop	{r4, pc}

00010d2c <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   10d2c:	f7f3 bdd2 	b.w	48d4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   10d30:	000b0001 	.word	0x000b0001
   10d34:	000a0002 	.word	0x000a0002
   10d38:	00090005 	.word	0x00090005
   10d3c:	0008000a 	.word	0x0008000a
   10d40:	00070014 	.word	0x00070014
   10d44:	0006001e 	.word	0x0006001e
   10d48:	00050032 	.word	0x00050032
   10d4c:	0004004b 	.word	0x0004004b
   10d50:	00030064 	.word	0x00030064
   10d54:	00020096 	.word	0x00020096
   10d58:	000100fa 	.word	0x000100fa
   10d5c:	000001f4 	.word	0x000001f4

00010d60 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   10d60:	b510      	push	{r4, lr}
   10d62:	f7fb f82d 	bl	bdc0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   10d66:	f000 f81d 	bl	10da4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   10d6a:	f7fa fced 	bl	b748 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   10d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10d72:	f7fa bde7 	b.w	b944 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00010d76 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   10d76:	b510      	push	{r4, lr}
   10d78:	24c8      	movs	r4, #200	; 0xc8
   10d7a:	1e64      	subs	r4, r4, #1
   10d7c:	b2e4      	uxtb	r4, r4
   10d7e:	f7fa fd01 	bl	b784 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   10d82:	2802      	cmp	r0, #2
   10d84:	d003      	beq.n	10d8e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   10d86:	2801      	cmp	r0, #1
   10d88:	d000      	beq.n	10d8c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   10d8a:	2000      	movs	r0, #0
   10d8c:	bd10      	pop	{r4, pc}
   10d8e:	2c00      	cmp	r4, #0
   10d90:	d1f3      	bne.n	10d7a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   10d92:	219e      	movs	r1, #158	; 0x9e
   10d94:	203b      	movs	r0, #59	; 0x3b
   10d96:	f7f4 f949 	bl	502c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10d9a:	5840      	ldr	r0, [r0, r1]
   10d9c:	2800      	cmp	r0, #0
   10d9e:	d000      	beq.n	10da2 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   10da0:	2001      	movs	r0, #1
   10da2:	4770      	bx	lr

00010da4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   10da4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10da8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10dac:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   10db0:	f3bf 8f4f 	dsb	sy
   10db4:	f3bf 8f6f 	isb	sy
   10db8:	f7fa be5e 	b.w	ba78 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   10dbc:	2800      	cmp	r0, #0
   10dbe:	db09      	blt.n	10dd4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   10dc0:	f000 021f 	and.w	r2, r0, #31
   10dc4:	2101      	movs	r1, #1
   10dc6:	4091      	lsls	r1, r2
   10dc8:	0940      	lsrs	r0, r0, #5
   10dca:	0080      	lsls	r0, r0, #2
   10dcc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10dd0:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10dd4:	4770      	bx	lr
   10dd6:	2800      	cmp	r0, #0
   10dd8:	db0d      	blt.n	10df6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10dda:	f000 021f 	and.w	r2, r0, #31
   10dde:	2101      	movs	r1, #1
   10de0:	4091      	lsls	r1, r2
   10de2:	0940      	lsrs	r0, r0, #5
   10de4:	0080      	lsls	r0, r0, #2
   10de6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10dea:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10dee:	f3bf 8f4f 	dsb	sy
   10df2:	f3bf 8f6f 	isb	sy
   10df6:	4770      	bx	lr
   10df8:	5840      	ldr	r0, [r0, r1]
   10dfa:	2800      	cmp	r0, #0
   10dfc:	d000      	beq.n	10e00 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   10dfe:	2001      	movs	r0, #1
   10e00:	4770      	bx	lr
   10e02:	5840      	ldr	r0, [r0, r1]
   10e04:	2800      	cmp	r0, #0
   10e06:	d000      	beq.n	10e0a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   10e08:	2001      	movs	r0, #1
   10e0a:	4770      	bx	lr

00010e0c <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   10e0c:	b510      	push	{r4, lr}
   10e0e:	4604      	mov	r4, r0
   10e10:	4608      	mov	r0, r1
   10e12:	f7fb f90d 	bl	c030 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10e16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10e1a:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10e1e:	fbb0 f0f1 	udiv	r0, r0, r1
   10e22:	1a20      	subs	r0, r4, r0
   10e24:	1e80      	subs	r0, r0, #2
   10e26:	bd10      	pop	{r4, pc}

00010e28 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   10e28:	b510      	push	{r4, lr}
   10e2a:	4604      	mov	r4, r0
   10e2c:	4608      	mov	r0, r1
   10e2e:	f7fb f8ff 	bl	c030 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10e32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10e36:	fbb0 f0f1 	udiv	r0, r0, r1
   10e3a:	1a20      	subs	r0, r4, r0
   10e3c:	bd10      	pop	{r4, pc}
   10e3e:	080c      	.short	0x080c
   10e40:	010d1702 	.word	0x010d1702
   10e44:	09090201 	.word	0x09090201
   10e48:	02060101 	.word	0x02060101
   10e4c:	03181809 	.word	0x03181809
   10e50:	09090101 	.word	0x09090101
   10e54:	22050303 	.word	0x22050303

00010e58 <sendDataIMU>:
#include "icm42605.h"

static const struct gpio_dt_spec imuInt = GPIO_DT_SPEC_GET_OR(IMU_INT, gpios,{0});
static struct gpio_callback imuInt_cb_data;

static void sendDataIMU(){
   10e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return i2c_write(icm_dev, &dataBuffer, 2, devAddr);
}

static uint8_t readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest){
    uint8_t ret;
    ret = i2c_write(icm_dev, &subAddress, 1, address);
   10e5c:	4c74      	ldr	r4, [pc, #464]	; (11030 <sendDataIMU+0x1d8>)
static void sendDataIMU(){
   10e5e:	b08f      	sub	sp, #60	; 0x3c
static uint8_t readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest){
   10e60:	231d      	movs	r3, #29
   10e62:	f88d 301b 	strb.w	r3, [sp, #27]
    ret = i2c_write(icm_dev, &subAddress, 1, address);
   10e66:	2201      	movs	r2, #1
   10e68:	2368      	movs	r3, #104	; 0x68
   10e6a:	f10d 011b 	add.w	r1, sp, #27
   10e6e:	4620      	mov	r0, r4
   10e70:	f00e f949 	bl	1f106 <i2c_write.isra.0>
static inline int i2c_read(const struct device *dev, uint8_t *buf,
			   uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = buf;
   10e74:	ab0a      	add	r3, sp, #40	; 0x28
   10e76:	9307      	str	r3, [sp, #28]
	msg.len = num_bytes;
   10e78:	230e      	movs	r3, #14
   10e7a:	9308      	str	r3, [sp, #32]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   10e7c:	2303      	movs	r3, #3
   10e7e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   10e82:	68a3      	ldr	r3, [r4, #8]
   10e84:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 11034 <sendDataIMU+0x1dc>
   10e88:	689d      	ldr	r5, [r3, #8]
   10e8a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 11038 <sendDataIMU+0x1e0>
   10e8e:	4f6b      	ldr	r7, [pc, #428]	; (1103c <sendDataIMU+0x1e4>)
   10e90:	4e6b      	ldr	r6, [pc, #428]	; (11040 <sendDataIMU+0x1e8>)
   10e92:	2368      	movs	r3, #104	; 0x68
   10e94:	2201      	movs	r2, #1
   10e96:	a907      	add	r1, sp, #28
   10e98:	4620      	mov	r0, r4
   10e9a:	47a8      	blx	r5
static uint8_t readData()
{
    uint8_t rawData[14];  // x/y/z accel register data stored here
    uint8_t error=0;
    error = readBytes(ICM42605_ADDRESS, ICM42605_TEMP_DATA1, 14, &rawData[0]);  // Read the 14 raw data registers into data array
    if(error){
   10e9c:	b2c0      	uxtb	r0, r0
   10e9e:	2800      	cmp	r0, #0
   10ea0:	d148      	bne.n	10f34 <sendDataIMU+0xdc>
    //Gyr y
    destination[5] = ((int16_t)rawData[10] << 8) | rawData[11] ;
    //Gyr z
    destination[6] = ((int16_t)rawData[12] << 8) | rawData[13] ;
    t= destination[0];
    ax = destination[1] *_aRes;
   10ea2:	4968      	ldr	r1, [pc, #416]	; (11044 <sendDataIMU+0x1ec>)
   10ea4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   10ea8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   10eac:	f8bd 002a 	ldrh.w	r0, [sp, #42]	; 0x2a
   10eb0:	f8d1 8000 	ldr.w	r8, [r1]
   10eb4:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
   10eb8:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
   10ebc:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
   10ec0:	badb      	revsh	r3, r3
   10ec2:	bad2      	revsh	r2, r2
   10ec4:	bac0      	revsh	r0, r0
   10ec6:	9304      	str	r3, [sp, #16]
   10ec8:	9205      	str	r2, [sp, #20]
   10eca:	f7ef fe79 	bl	bc0 <__aeabi_i2f>
   10ece:	4641      	mov	r1, r8
   10ed0:	f7ef feca 	bl	c68 <__aeabi_fmul>
    ay = destination[2] *_aRes;
   10ed4:	9a05      	ldr	r2, [sp, #20]
    ax = destination[1] *_aRes;
   10ed6:	f8cb 0000 	str.w	r0, [fp]
    ay = destination[2] *_aRes;
   10eda:	4610      	mov	r0, r2
   10edc:	f7ef fe70 	bl	bc0 <__aeabi_i2f>
   10ee0:	4641      	mov	r1, r8
   10ee2:	f7ef fec1 	bl	c68 <__aeabi_fmul>
   10ee6:	4b58      	ldr	r3, [pc, #352]	; (11048 <sendDataIMU+0x1f0>)
   10ee8:	bae4      	revsh	r4, r4
   10eea:	6018      	str	r0, [r3, #0]
    az = destination[3] *_aRes;
   10eec:	4620      	mov	r0, r4
   10eee:	f7ef fe67 	bl	bc0 <__aeabi_i2f>
   10ef2:	4641      	mov	r1, r8
   10ef4:	f7ef feb8 	bl	c68 <__aeabi_fmul>

    gx = destination[4] *_gRes;
   10ef8:	4a54      	ldr	r2, [pc, #336]	; (1104c <sendDataIMU+0x1f4>)
   10efa:	9b04      	ldr	r3, [sp, #16]
   10efc:	6814      	ldr	r4, [r2, #0]
    az = destination[3] *_aRes;
   10efe:	f8c9 0000 	str.w	r0, [r9]
    gx = destination[4] *_gRes;
   10f02:	4618      	mov	r0, r3
   10f04:	f7ef fe5c 	bl	bc0 <__aeabi_i2f>
   10f08:	4621      	mov	r1, r4
   10f0a:	f7ef fead 	bl	c68 <__aeabi_fmul>
   10f0e:	fa9a faba 	revsh.w	sl, sl
   10f12:	6038      	str	r0, [r7, #0]
    gy = destination[5] *_gRes;
   10f14:	4650      	mov	r0, sl
   10f16:	f7ef fe53 	bl	bc0 <__aeabi_i2f>
   10f1a:	4621      	mov	r1, r4
   10f1c:	f7ef fea4 	bl	c68 <__aeabi_fmul>
   10f20:	baed      	revsh	r5, r5
   10f22:	6030      	str	r0, [r6, #0]
    gz = destination[6] *_gRes;
   10f24:	4628      	mov	r0, r5
   10f26:	f7ef fe4b 	bl	bc0 <__aeabi_i2f>
   10f2a:	4621      	mov	r1, r4
   10f2c:	f7ef fe9c 	bl	c68 <__aeabi_fmul>
   10f30:	4b47      	ldr	r3, [pc, #284]	; (11050 <sendDataIMU+0x1f8>)
   10f32:	6018      	str	r0, [r3, #0]
    	printk("ICM_A: x: %f y: %f z: %f \n",ax,ay,az);
   10f34:	f8db 0000 	ldr.w	r0, [fp]
   10f38:	f7ef fa46 	bl	3c8 <__aeabi_f2d>
   10f3c:	4604      	mov	r4, r0
   10f3e:	f8d9 0000 	ldr.w	r0, [r9]
   10f42:	460d      	mov	r5, r1
   10f44:	f7ef fa40 	bl	3c8 <__aeabi_f2d>
   10f48:	e9cd 0102 	strd	r0, r1, [sp, #8]
   10f4c:	4b3e      	ldr	r3, [pc, #248]	; (11048 <sendDataIMU+0x1f0>)
   10f4e:	6818      	ldr	r0, [r3, #0]
   10f50:	f7ef fa3a 	bl	3c8 <__aeabi_f2d>
   10f54:	4622      	mov	r2, r4
   10f56:	e9cd 0100 	strd	r0, r1, [sp]
   10f5a:	462b      	mov	r3, r5
   10f5c:	483d      	ldr	r0, [pc, #244]	; (11054 <sendDataIMU+0x1fc>)
   10f5e:	f00e fd48 	bl	1f9f2 <printk>
      printk("ICM_G: x: %f y: %f z: %f \n",gx,gy,gz);
   10f62:	6838      	ldr	r0, [r7, #0]
   10f64:	f7ef fa30 	bl	3c8 <__aeabi_f2d>
   10f68:	4b39      	ldr	r3, [pc, #228]	; (11050 <sendDataIMU+0x1f8>)
   10f6a:	4604      	mov	r4, r0
   10f6c:	6818      	ldr	r0, [r3, #0]
   10f6e:	460d      	mov	r5, r1
   10f70:	f7ef fa2a 	bl	3c8 <__aeabi_f2d>
   10f74:	e9cd 0102 	strd	r0, r1, [sp, #8]
   10f78:	6830      	ldr	r0, [r6, #0]
   10f7a:	f7ef fa25 	bl	3c8 <__aeabi_f2d>
   10f7e:	4622      	mov	r2, r4
   10f80:	e9cd 0100 	strd	r0, r1, [sp]
   10f84:	462b      	mov	r3, r5
   10f86:	4834      	ldr	r0, [pc, #208]	; (11058 <sendDataIMU+0x200>)
   10f88:	f00e fd33 	bl	1f9f2 <printk>
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   10f8c:	f012 fc02 	bl	23794 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   10f90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10f94:	fba0 0302 	umull	r0, r3, r0, r2
   10f98:	fb02 3101 	mla	r1, r2, r1, r3
   10f9c:	0bc0      	lsrs	r0, r0, #15
  float timestamp = k_uptime_get() /1000.0;
   10f9e:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   10fa2:	0bc9      	lsrs	r1, r1, #15
  icm_data.timestamp = timestamp;
   10fa4:	4c2d      	ldr	r4, [pc, #180]	; (1105c <sendDataIMU+0x204>)
  if(timestamp > oldTime +0.01){
   10fa6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 11060 <sendDataIMU+0x208>
  float timestamp = k_uptime_get() /1000.0;
   10faa:	f7ef fa37 	bl	41c <__aeabi_l2d>
   10fae:	2200      	movs	r2, #0
   10fb0:	4b2c      	ldr	r3, [pc, #176]	; (11064 <sendDataIMU+0x20c>)
   10fb2:	f7ef fb8b 	bl	6cc <__aeabi_ddiv>
   10fb6:	f7ef fcf9 	bl	9ac <__aeabi_d2f>
  icm_data.a_array[0] = icm_data.ax;
   10fba:	6823      	ldr	r3, [r4, #0]
   10fbc:	61e3      	str	r3, [r4, #28]
	icm_data.a_array[1] = icm_data.ay;
   10fbe:	6863      	ldr	r3, [r4, #4]
   10fc0:	6223      	str	r3, [r4, #32]
	icm_data.a_array[2] = icm_data.az;
   10fc2:	68a3      	ldr	r3, [r4, #8]
   10fc4:	6263      	str	r3, [r4, #36]	; 0x24
  icm_data.g_array[0] = icm_data.gx;
   10fc6:	68e3      	ldr	r3, [r4, #12]
   10fc8:	62e3      	str	r3, [r4, #44]	; 0x2c
	icm_data.g_array[1] = icm_data.gy;
   10fca:	6923      	ldr	r3, [r4, #16]
   10fcc:	6323      	str	r3, [r4, #48]	; 0x30
	icm_data.g_array[2] = icm_data.gz;
   10fce:	6963      	ldr	r3, [r4, #20]
   10fd0:	6363      	str	r3, [r4, #52]	; 0x34
  icm_data.timestamp = timestamp;
   10fd2:	61a0      	str	r0, [r4, #24]
	icm_data.a_array[3] = icm_data.timestamp;
   10fd4:	62a0      	str	r0, [r4, #40]	; 0x28
	icm_data.g_array[3] = icm_data.timestamp;
   10fd6:	63a0      	str	r0, [r4, #56]	; 0x38
  float timestamp = k_uptime_get() /1000.0;
   10fd8:	4605      	mov	r5, r0
  if(timestamp > oldTime +0.01){
   10fda:	f7ef f9f5 	bl	3c8 <__aeabi_f2d>
   10fde:	4606      	mov	r6, r0
   10fe0:	f8d8 0000 	ldr.w	r0, [r8]
   10fe4:	460f      	mov	r7, r1
   10fe6:	f7ef f9ef 	bl	3c8 <__aeabi_f2d>
   10fea:	a30f      	add	r3, pc, #60	; (adr r3, 11028 <sendDataIMU+0x1d0>)
   10fec:	e9d3 2300 	ldrd	r2, r3, [r3]
   10ff0:	f7ef f88c 	bl	10c <__adddf3>
   10ff4:	4602      	mov	r2, r0
   10ff6:	460b      	mov	r3, r1
   10ff8:	4630      	mov	r0, r6
   10ffa:	4639      	mov	r1, r7
   10ffc:	f7ef fccc 	bl	998 <__aeabi_dcmpgt>
   11000:	b168      	cbz	r0, 1101e <sendDataIMU+0x1c6>
    send_data(SENSOR_IMU_ACC_ID, &icm_data.a_array, 4*4);
   11002:	2210      	movs	r2, #16
   11004:	f104 011c 	add.w	r1, r4, #28
   11008:	2002      	movs	r0, #2
   1100a:	f000 fbc9 	bl	117a0 <send_data>
    send_data(SENSOR_IMU_GYR_ID, &icm_data.g_array, 4*4);
   1100e:	2210      	movs	r2, #16
   11010:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   11014:	2003      	movs	r0, #3
   11016:	f000 fbc3 	bl	117a0 <send_data>
    oldTime=timestamp;
   1101a:	f8c8 5000 	str.w	r5, [r8]
}
   1101e:	b00f      	add	sp, #60	; 0x3c
   11020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11024:	f3af 8000 	nop.w
   11028:	47ae147b 	.word	0x47ae147b
   1102c:	3f847ae1 	.word	0x3f847ae1
   11030:	00023c74 	.word	0x00023c74
   11034:	20002060 	.word	0x20002060
   11038:	20002068 	.word	0x20002068
   1103c:	2000207c 	.word	0x2000207c
   11040:	20002080 	.word	0x20002080
   11044:	20002058 	.word	0x20002058
   11048:	20002064 	.word	0x20002064
   1104c:	2000205c 	.word	0x2000205c
   11050:	20002084 	.word	0x20002084
   11054:	00024c11 	.word	0x00024c11
   11058:	00024c2c 	.word	0x00024c2c
   1105c:	20000570 	.word	0x20000570
   11060:	20002094 	.word	0x20002094
   11064:	408f4000 	.word	0x408f4000

00011068 <set_config_mpr>:
    send_data(SENSOR_MPR_ID, &mpr_data.array, 4*3);
}

void set_config_mpr() 
{
    mpr_data.timer_interval = mpr_data.config[1];
   11068:	4b03      	ldr	r3, [pc, #12]	; (11078 <set_config_mpr+0x10>)
   1106a:	7c9a      	ldrb	r2, [r3, #18]
    
    //Ensure minimum of 30ms
    if (mpr_data.timer_interval < 3) {mpr_data.timer_interval = 3;}
   1106c:	2a02      	cmp	r2, #2
   1106e:	bf98      	it	ls
   11070:	2203      	movls	r2, #3
   11072:	741a      	strb	r2, [r3, #16]
}
   11074:	4770      	bx	lr
   11076:	bf00      	nop
   11078:	20000518 	.word	0x20000518

0001107c <mpr_data_ready>:
	k_work_submit(&work_mpr);
   1107c:	4801      	ldr	r0, [pc, #4]	; (11084 <mpr_data_ready+0x8>)
   1107e:	f00a b987 	b.w	1b390 <k_work_submit>
   11082:	bf00      	nop
   11084:	20002018 	.word	0x20002018

00011088 <send_data_mpr>:
{
   11088:	b570      	push	{r4, r5, r6, lr}
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
   1108a:	4c1e      	ldr	r4, [pc, #120]	; (11104 <send_data_mpr+0x7c>)
   1108c:	68a5      	ldr	r5, [r4, #8]
   1108e:	2139      	movs	r1, #57	; 0x39
   11090:	68eb      	ldr	r3, [r5, #12]
   11092:	4620      	mov	r0, r4
   11094:	4798      	blx	r3
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
   11096:	4e1c      	ldr	r6, [pc, #112]	; (11108 <send_data_mpr+0x80>)
   11098:	692b      	ldr	r3, [r5, #16]
   1109a:	4632      	mov	r2, r6
   1109c:	210e      	movs	r1, #14
   1109e:	4620      	mov	r0, r4
   110a0:	4798      	blx	r3
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline float sensor_value_to_float(const struct sensor_value *val) 
{
	return (float)val->val1 + (float)val->val2 / 1000000;
   110a2:	6870      	ldr	r0, [r6, #4]
    mpr_data.pressure = sensor_value_to_float(&mpr_press);
   110a4:	4c19      	ldr	r4, [pc, #100]	; (1110c <send_data_mpr+0x84>)
   110a6:	f7ef fd8b 	bl	bc0 <__aeabi_i2f>
   110aa:	4919      	ldr	r1, [pc, #100]	; (11110 <send_data_mpr+0x88>)
   110ac:	f7ef fe90 	bl	dd0 <__aeabi_fdiv>
   110b0:	4605      	mov	r5, r0
   110b2:	6830      	ldr	r0, [r6, #0]
   110b4:	f7ef fd84 	bl	bc0 <__aeabi_i2f>
   110b8:	4601      	mov	r1, r0
   110ba:	4628      	mov	r0, r5
   110bc:	f7ef fccc 	bl	a58 <__addsf3>
   110c0:	6020      	str	r0, [r4, #0]
   110c2:	f012 fb67 	bl	23794 <z_impl_k_uptime_ticks>
   110c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   110ca:	fba0 0302 	umull	r0, r3, r0, r2
   110ce:	fb02 3101 	mla	r1, r2, r1, r3
   110d2:	0bc0      	lsrs	r0, r0, #15
    float timestamp = k_uptime_get() /1000.0;
   110d4:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   110d8:	0bc9      	lsrs	r1, r1, #15
   110da:	f7ef f99f 	bl	41c <__aeabi_l2d>
   110de:	4b0d      	ldr	r3, [pc, #52]	; (11114 <send_data_mpr+0x8c>)
   110e0:	2200      	movs	r2, #0
   110e2:	f7ef faf3 	bl	6cc <__aeabi_ddiv>
   110e6:	f7ef fc61 	bl	9ac <__aeabi_d2f>
    mpr_data.array[0] = mpr_data.pressure;
   110ea:	6823      	ldr	r3, [r4, #0]
    mpr_data.timestamp = timestamp;
   110ec:	6060      	str	r0, [r4, #4]
    mpr_data.array[1] = mpr_data.timestamp;
   110ee:	60e0      	str	r0, [r4, #12]
    mpr_data.array[0] = mpr_data.pressure;
   110f0:	60a3      	str	r3, [r4, #8]
    send_data(SENSOR_MPR_ID, &mpr_data.array, 4*3);
   110f2:	f104 0108 	add.w	r1, r4, #8
   110f6:	220c      	movs	r2, #12
}
   110f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    send_data(SENSOR_MPR_ID, &mpr_data.array, 4*3);
   110fc:	2006      	movs	r0, #6
   110fe:	f000 bb4f 	b.w	117a0 <send_data>
   11102:	bf00      	nop
   11104:	00023ca4 	.word	0x00023ca4
   11108:	20002010 	.word	0x20002010
   1110c:	20000518 	.word	0x20000518
   11110:	49742400 	.word	0x49742400
   11114:	408f4000 	.word	0x408f4000

00011118 <init_mpr>:
{   
   11118:	b510      	push	{r4, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   1111a:	480c      	ldr	r0, [pc, #48]	; (1114c <init_mpr+0x34>)
   1111c:	f011 ff1b 	bl	22f56 <z_device_is_ready>
    if(!device_is_ready(mpr_dev)){
   11120:	4604      	mov	r4, r0
   11122:	b920      	cbnz	r0, 1112e <init_mpr+0x16>
        printk("Device not ready or not found");
   11124:	480a      	ldr	r0, [pc, #40]	; (11150 <init_mpr+0x38>)
   11126:	f00e fc64 	bl	1f9f2 <printk>
}
   1112a:	4620      	mov	r0, r4
   1112c:	bd10      	pop	{r4, pc}
    k_work_init(&work_mpr, send_data_mpr);
   1112e:	4909      	ldr	r1, [pc, #36]	; (11154 <init_mpr+0x3c>)
   11130:	4809      	ldr	r0, [pc, #36]	; (11158 <init_mpr+0x40>)
   11132:	f012 f951 	bl	233d8 <k_work_init>
	k_work_init(&config_work_mpr, set_config_mpr);
   11136:	4909      	ldr	r1, [pc, #36]	; (1115c <init_mpr+0x44>)
   11138:	4809      	ldr	r0, [pc, #36]	; (11160 <init_mpr+0x48>)
   1113a:	f012 f94d 	bl	233d8 <k_work_init>
    k_timer_init(&timer_mpr, mpr_data_ready, NULL);
   1113e:	4909      	ldr	r1, [pc, #36]	; (11164 <init_mpr+0x4c>)
   11140:	4809      	ldr	r0, [pc, #36]	; (11168 <init_mpr+0x50>)
   11142:	2200      	movs	r2, #0
   11144:	f012 fb57 	bl	237f6 <k_timer_init>
    return true;
   11148:	e7ef      	b.n	1112a <init_mpr+0x12>
   1114a:	bf00      	nop
   1114c:	00023ca4 	.word	0x00023ca4
   11150:	00024bdc 	.word	0x00024bdc
   11154:	00011089 	.word	0x00011089
   11158:	20002018 	.word	0x20002018
   1115c:	00011069 	.word	0x00011069
   11160:	20002000 	.word	0x20002000
   11164:	0001107d 	.word	0x0001107d
   11168:	200018f0 	.word	0x200018f0

0001116c <set_config_shtc>:
    send_data(SENSOR_SHTC_ID, &shtc_data.array, 4*3);
}

void set_config_shtc() 
{
    shtc_data.timer_interval = shtc_data.config[1];
   1116c:	4b03      	ldr	r3, [pc, #12]	; (1117c <set_config_shtc+0x10>)
   1116e:	7e9a      	ldrb	r2, [r3, #26]
    
    //Ensure minimum of 30ms
    if (shtc_data.timer_interval < 3) {shtc_data.timer_interval = 3;}
   11170:	2a02      	cmp	r2, #2
   11172:	bf98      	it	ls
   11174:	2203      	movls	r2, #3
   11176:	761a      	strb	r2, [r3, #24]
}
   11178:	4770      	bx	lr
   1117a:	bf00      	nop
   1117c:	20000540 	.word	0x20000540

00011180 <shtc_data_ready>:
	k_work_submit(&work_shtc);
   11180:	4801      	ldr	r0, [pc, #4]	; (11188 <shtc_data_ready+0x8>)
   11182:	f00a b905 	b.w	1b390 <k_work_submit>
   11186:	bf00      	nop
   11188:	20002048 	.word	0x20002048

0001118c <send_data_shtc>:
{
   1118c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
   1118e:	4c29      	ldr	r4, [pc, #164]	; (11234 <send_data_shtc+0xa8>)
   11190:	68a5      	ldr	r5, [r4, #8]
   11192:	2139      	movs	r1, #57	; 0x39
   11194:	68eb      	ldr	r3, [r5, #12]
   11196:	4620      	mov	r0, r4
   11198:	4798      	blx	r3
	return api->channel_get(dev, chan, val);
   1119a:	4f27      	ldr	r7, [pc, #156]	; (11238 <send_data_shtc+0xac>)
   1119c:	692b      	ldr	r3, [r5, #16]
   1119e:	463a      	mov	r2, r7
   111a0:	210d      	movs	r1, #13
   111a2:	4620      	mov	r0, r4
   111a4:	4798      	blx	r3
   111a6:	4e25      	ldr	r6, [pc, #148]	; (1123c <send_data_shtc+0xb0>)
   111a8:	692b      	ldr	r3, [r5, #16]
   111aa:	4632      	mov	r2, r6
   111ac:	2110      	movs	r1, #16
   111ae:	4620      	mov	r0, r4
   111b0:	4798      	blx	r3
   111b2:	6878      	ldr	r0, [r7, #4]
    shtc_data.temperature = sensor_value_to_float(&shtc_temp);
   111b4:	4c22      	ldr	r4, [pc, #136]	; (11240 <send_data_shtc+0xb4>)
   111b6:	f7ef fd03 	bl	bc0 <__aeabi_i2f>
   111ba:	4922      	ldr	r1, [pc, #136]	; (11244 <send_data_shtc+0xb8>)
   111bc:	f7ef fe08 	bl	dd0 <__aeabi_fdiv>
   111c0:	4605      	mov	r5, r0
   111c2:	6838      	ldr	r0, [r7, #0]
   111c4:	f7ef fcfc 	bl	bc0 <__aeabi_i2f>
   111c8:	4601      	mov	r1, r0
   111ca:	4628      	mov	r0, r5
   111cc:	f7ef fc44 	bl	a58 <__addsf3>
   111d0:	6060      	str	r0, [r4, #4]
   111d2:	6870      	ldr	r0, [r6, #4]
   111d4:	f7ef fcf4 	bl	bc0 <__aeabi_i2f>
   111d8:	491a      	ldr	r1, [pc, #104]	; (11244 <send_data_shtc+0xb8>)
   111da:	f7ef fdf9 	bl	dd0 <__aeabi_fdiv>
   111de:	4605      	mov	r5, r0
   111e0:	6830      	ldr	r0, [r6, #0]
   111e2:	f7ef fced 	bl	bc0 <__aeabi_i2f>
   111e6:	4601      	mov	r1, r0
   111e8:	4628      	mov	r0, r5
   111ea:	f7ef fc35 	bl	a58 <__addsf3>
    shtc_data.humidity = sensor_value_to_float(&shtc_humid);
   111ee:	6020      	str	r0, [r4, #0]
   111f0:	f012 fad0 	bl	23794 <z_impl_k_uptime_ticks>
   111f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   111f8:	fba0 0302 	umull	r0, r3, r0, r2
   111fc:	fb02 3101 	mla	r1, r2, r1, r3
   11200:	0bc0      	lsrs	r0, r0, #15
    float timestamp = k_uptime_get() /1000.0;
   11202:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   11206:	0bc9      	lsrs	r1, r1, #15
   11208:	f7ef f908 	bl	41c <__aeabi_l2d>
   1120c:	4b0e      	ldr	r3, [pc, #56]	; (11248 <send_data_shtc+0xbc>)
   1120e:	2200      	movs	r2, #0
   11210:	f7ef fa5c 	bl	6cc <__aeabi_ddiv>
   11214:	f7ef fbca 	bl	9ac <__aeabi_d2f>
    shtc_data.array[0] = shtc_data.temperature;
   11218:	6863      	ldr	r3, [r4, #4]
   1121a:	60e3      	str	r3, [r4, #12]
    send_data(SENSOR_SHTC_ID, &shtc_data.array, 4*3);
   1121c:	220c      	movs	r2, #12
    shtc_data.array[1] = shtc_data.humidity;
   1121e:	6823      	ldr	r3, [r4, #0]
    shtc_data.timestamp = timestamp;
   11220:	60a0      	str	r0, [r4, #8]
    shtc_data.array[2] = shtc_data.timestamp;
   11222:	6160      	str	r0, [r4, #20]
    shtc_data.array[1] = shtc_data.humidity;
   11224:	6123      	str	r3, [r4, #16]
    send_data(SENSOR_SHTC_ID, &shtc_data.array, 4*3);
   11226:	18a1      	adds	r1, r4, r2
   11228:	2004      	movs	r0, #4
}
   1122a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    send_data(SENSOR_SHTC_ID, &shtc_data.array, 4*3);
   1122e:	f000 bab7 	b.w	117a0 <send_data>
   11232:	bf00      	nop
   11234:	00023cbc 	.word	0x00023cbc
   11238:	20002040 	.word	0x20002040
   1123c:	20002038 	.word	0x20002038
   11240:	20000540 	.word	0x20000540
   11244:	49742400 	.word	0x49742400
   11248:	408f4000 	.word	0x408f4000

0001124c <init_shtc>:
{   
   1124c:	b510      	push	{r4, lr}
   1124e:	480c      	ldr	r0, [pc, #48]	; (11280 <init_shtc+0x34>)
   11250:	f011 fe81 	bl	22f56 <z_device_is_ready>
    if(!device_is_ready(shtc_dev)){
   11254:	4604      	mov	r4, r0
   11256:	b920      	cbnz	r0, 11262 <init_shtc+0x16>
        printk("Device not ready or not found");
   11258:	480a      	ldr	r0, [pc, #40]	; (11284 <init_shtc+0x38>)
   1125a:	f00e fbca 	bl	1f9f2 <printk>
}
   1125e:	4620      	mov	r0, r4
   11260:	bd10      	pop	{r4, pc}
    k_work_init(&work_shtc, send_data_shtc);
   11262:	4909      	ldr	r1, [pc, #36]	; (11288 <init_shtc+0x3c>)
   11264:	4809      	ldr	r0, [pc, #36]	; (1128c <init_shtc+0x40>)
   11266:	f012 f8b7 	bl	233d8 <k_work_init>
	k_work_init(&config_work_shtc, set_config_shtc);
   1126a:	4909      	ldr	r1, [pc, #36]	; (11290 <init_shtc+0x44>)
   1126c:	4809      	ldr	r0, [pc, #36]	; (11294 <init_shtc+0x48>)
   1126e:	f012 f8b3 	bl	233d8 <k_work_init>
    k_timer_init(&timer_shtc, shtc_data_ready, NULL);
   11272:	4909      	ldr	r1, [pc, #36]	; (11298 <init_shtc+0x4c>)
   11274:	4809      	ldr	r0, [pc, #36]	; (1129c <init_shtc+0x50>)
   11276:	2200      	movs	r2, #0
   11278:	f012 fabd 	bl	237f6 <k_timer_init>
    return true;
   1127c:	e7ef      	b.n	1125e <init_shtc+0x12>
   1127e:	bf00      	nop
   11280:	00023cbc 	.word	0x00023cbc
   11284:	00024bdc 	.word	0x00024bdc
   11288:	0001118d 	.word	0x0001118d
   1128c:	20002048 	.word	0x20002048
   11290:	0001116d 	.word	0x0001116d
   11294:	20002028 	.word	0x20002028
   11298:	00011181 	.word	0x00011181
   1129c:	20001928 	.word	0x20001928

000112a0 <submit_config_shtc>:

extern void submit_config_shtc()
{	
    k_work_submit(&config_work_shtc);
   112a0:	4801      	ldr	r0, [pc, #4]	; (112a8 <submit_config_shtc+0x8>)
   112a2:	f00a b875 	b.w	1b390 <k_work_submit>
   112a6:	bf00      	nop
   112a8:	20002028 	.word	0x20002028

000112ac <set_config_icm>:
  if (DEBUG) {printk("ICM Setting config...\n");}
   112ac:	4801      	ldr	r0, [pc, #4]	; (112b4 <set_config_icm+0x8>)
   112ae:	f00e bba0 	b.w	1f9f2 <printk>
   112b2:	bf00      	nop
   112b4:	00024bfa 	.word	0x00024bfa

000112b8 <imuDataReady>:
	k_work_submit(&work_icm);
   112b8:	4801      	ldr	r0, [pc, #4]	; (112c0 <imuDataReady+0x8>)
   112ba:	f00a b869 	b.w	1b390 <k_work_submit>
   112be:	bf00      	nop
   112c0:	20002098 	.word	0x20002098

000112c4 <writeByte.constprop.0.isra.0>:
static uint8_t writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data){
   112c4:	b507      	push	{r0, r1, r2, lr}
    return i2c_write(icm_dev, &dataBuffer, 2, devAddr);
   112c6:	2368      	movs	r3, #104	; 0x68
	  dataBuffer[0]=regAddr;
   112c8:	f88d 0004 	strb.w	r0, [sp, #4]
    dataBuffer[1]=data;
   112cc:	f88d 1005 	strb.w	r1, [sp, #5]
    return i2c_write(icm_dev, &dataBuffer, 2, devAddr);
   112d0:	4803      	ldr	r0, [pc, #12]	; (112e0 <writeByte.constprop.0.isra.0+0x1c>)
   112d2:	2202      	movs	r2, #2
   112d4:	a901      	add	r1, sp, #4
   112d6:	f00d ff16 	bl	1f106 <i2c_write.isra.0>
}
   112da:	b003      	add	sp, #12
   112dc:	f85d fb04 	ldr.w	pc, [sp], #4
   112e0:	00023c74 	.word	0x00023c74

000112e4 <readByte.constprop.0>:
static uint8_t readByte(uint8_t i2cAddress, uint8_t subAddress){
   112e4:	b530      	push	{r4, r5, lr}
	ret = i2c_write(icm_dev, &subAddress, 1, i2cAddress);
   112e6:	4c0e      	ldr	r4, [pc, #56]	; (11320 <readByte.constprop.0+0x3c>)
static uint8_t readByte(uint8_t i2cAddress, uint8_t subAddress){
   112e8:	b087      	sub	sp, #28
	ret = i2c_write(icm_dev, &subAddress, 1, i2cAddress);
   112ea:	2368      	movs	r3, #104	; 0x68
static uint8_t readByte(uint8_t i2cAddress, uint8_t subAddress){
   112ec:	f88d 0007 	strb.w	r0, [sp, #7]
	ret = i2c_write(icm_dev, &subAddress, 1, i2cAddress);
   112f0:	2201      	movs	r2, #1
   112f2:	f10d 0107 	add.w	r1, sp, #7
   112f6:	4620      	mov	r0, r4
   112f8:	f00d ff05 	bl	1f106 <i2c_write.isra.0>
	msg.buf = buf;
   112fc:	f10d 030b 	add.w	r3, sp, #11
   11300:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
   11302:	2201      	movs	r2, #1
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   11304:	2303      	movs	r3, #3
	msg.len = num_bytes;
   11306:	9204      	str	r2, [sp, #16]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   11308:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1130c:	68a3      	ldr	r3, [r4, #8]
   1130e:	a903      	add	r1, sp, #12
   11310:	689d      	ldr	r5, [r3, #8]
   11312:	4620      	mov	r0, r4
   11314:	2368      	movs	r3, #104	; 0x68
   11316:	47a8      	blx	r5
}
   11318:	b2c0      	uxtb	r0, r0
   1131a:	b007      	add	sp, #28
   1131c:	bd30      	pop	{r4, r5, pc}
   1131e:	bf00      	nop
   11320:	00023c74 	.word	0x00023c74

00011324 <init_Interrupt_IMU>:
int8_t init_Interrupt_IMU(){
   11324:	b570      	push	{r4, r5, r6, lr}
	k_work_init(&work_icm, sendDataIMU);
   11326:	4924      	ldr	r1, [pc, #144]	; (113b8 <init_Interrupt_IMU+0x94>)
   11328:	4824      	ldr	r0, [pc, #144]	; (113bc <init_Interrupt_IMU+0x98>)
   1132a:	f012 f855 	bl	233d8 <k_work_init>
	k_work_init(&config_icm, set_config_icm);
   1132e:	4924      	ldr	r1, [pc, #144]	; (113c0 <init_Interrupt_IMU+0x9c>)
   11330:	4824      	ldr	r0, [pc, #144]	; (113c4 <init_Interrupt_IMU+0xa0>)
   11332:	f012 f851 	bl	233d8 <k_work_init>
   11336:	4d24      	ldr	r5, [pc, #144]	; (113c8 <init_Interrupt_IMU+0xa4>)
   11338:	4628      	mov	r0, r5
   1133a:	f011 fe0c 	bl	22f56 <z_device_is_ready>
    if (!device_is_ready(imuInt.port)) {
   1133e:	b930      	cbnz	r0, 1134e <init_Interrupt_IMU+0x2a>
		printk("Error: imu interrupt %s is not ready\n",
   11340:	6829      	ldr	r1, [r5, #0]
   11342:	4822      	ldr	r0, [pc, #136]	; (113cc <init_Interrupt_IMU+0xa8>)
   11344:	f00e fb55 	bl	1f9f2 <printk>
		return 1;
   11348:	2401      	movs	r4, #1
}
   1134a:	4620      	mov	r0, r4
   1134c:	bd70      	pop	{r4, r5, r6, pc}
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   1134e:	692a      	ldr	r2, [r5, #16]
	const struct gpio_driver_api *api =
   11350:	68ae      	ldr	r6, [r5, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   11352:	6813      	ldr	r3, [r2, #0]
   11354:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   11358:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
   1135a:	2118      	movs	r1, #24
   1135c:	6833      	ldr	r3, [r6, #0]
   1135e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   11362:	4628      	mov	r0, r5
   11364:	4798      	blx	r3
	returnValue = gpio_pin_configure_dt(&imuInt, GPIO_INPUT);
   11366:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   11368:	b134      	cbz	r4, 11378 <init_Interrupt_IMU+0x54>
		printk("Error %d: failed to configure %s pin %d\n",
   1136a:	682a      	ldr	r2, [r5, #0]
   1136c:	4818      	ldr	r0, [pc, #96]	; (113d0 <init_Interrupt_IMU+0xac>)
   1136e:	2318      	movs	r3, #24
   11370:	4621      	mov	r1, r4
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   11372:	f00e fb3e 	bl	1f9f2 <printk>
		return returnValue;
   11376:	e7e8      	b.n	1134a <init_Interrupt_IMU+0x26>
	return api->pin_interrupt_configure(port, pin, mode, trig);
   11378:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1137c:	69b4      	ldr	r4, [r6, #24]
   1137e:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
   11382:	2118      	movs	r1, #24
   11384:	4628      	mov	r0, r5
   11386:	47a0      	blx	r4
	returnValue = gpio_pin_interrupt_configure_dt(&imuInt,GPIO_INT_EDGE_RISING);
   11388:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   1138a:	b124      	cbz	r4, 11396 <init_Interrupt_IMU+0x72>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   1138c:	682a      	ldr	r2, [r5, #0]
   1138e:	4811      	ldr	r0, [pc, #68]	; (113d4 <init_Interrupt_IMU+0xb0>)
   11390:	2318      	movs	r3, #24
   11392:	4621      	mov	r1, r4
   11394:	e7ed      	b.n	11372 <init_Interrupt_IMU+0x4e>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   11396:	4910      	ldr	r1, [pc, #64]	; (113d8 <init_Interrupt_IMU+0xb4>)
   11398:	4b10      	ldr	r3, [pc, #64]	; (113dc <init_Interrupt_IMU+0xb8>)
   1139a:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   1139c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   113a0:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   113a2:	69f3      	ldr	r3, [r6, #28]
   113a4:	b113      	cbz	r3, 113ac <init_Interrupt_IMU+0x88>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   113a6:	2201      	movs	r2, #1
   113a8:	4628      	mov	r0, r5
   113aa:	4798      	blx	r3
	printk("Set up IMU at %s pin %d\n", imuInt.port->name, imuInt.pin);
   113ac:	6829      	ldr	r1, [r5, #0]
   113ae:	480c      	ldr	r0, [pc, #48]	; (113e0 <init_Interrupt_IMU+0xbc>)
   113b0:	2218      	movs	r2, #24
   113b2:	f00e fb1e 	bl	1f9f2 <printk>
  return returnValue;
   113b6:	e7c8      	b.n	1134a <init_Interrupt_IMU+0x26>
   113b8:	00010e59 	.word	0x00010e59
   113bc:	20002098 	.word	0x20002098
   113c0:	000112ad 	.word	0x000112ad
   113c4:	2000206c 	.word	0x2000206c
   113c8:	00023be4 	.word	0x00023be4
   113cc:	00024c47 	.word	0x00024c47
   113d0:	00024c6d 	.word	0x00024c6d
   113d4:	00024c96 	.word	0x00024c96
   113d8:	20002088 	.word	0x20002088
   113dc:	000112b9 	.word	0x000112b9
   113e0:	00024ccc 	.word	0x00024ccc

000113e4 <submit_config_icm>:
	k_work_submit(&config_icm);
   113e4:	4801      	ldr	r0, [pc, #4]	; (113ec <submit_config_icm+0x8>)
   113e6:	f009 bfd3 	b.w	1b390 <k_work_submit>
   113ea:	bf00      	nop
   113ec:	2000206c 	.word	0x2000206c

000113f0 <init_icm>:
extern void init_icm(uint8_t Ascale, uint8_t Gscale, uint8_t AODR, uint8_t GODR){
   113f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   113f2:	4607      	mov	r7, r0
  uint8_t temp = readByte(ICM42605_ADDRESS, ICM42605_DEVICE_CONFIG);
   113f4:	2011      	movs	r0, #17
extern void init_icm(uint8_t Ascale, uint8_t Gscale, uint8_t AODR, uint8_t GODR){
   113f6:	460e      	mov	r6, r1
   113f8:	4614      	mov	r4, r2
   113fa:	461d      	mov	r5, r3
  uint8_t temp = readByte(ICM42605_ADDRESS, ICM42605_DEVICE_CONFIG);
   113fc:	f7ff ff72 	bl	112e4 <readByte.constprop.0>
  writeByte(ICM42605_ADDRESS, ICM42605_DEVICE_CONFIG, temp | 0x01); // Set bit 0 to 1 to reset ICM42605
   11400:	f040 0101 	orr.w	r1, r0, #1
   11404:	b2c9      	uxtb	r1, r1
   11406:	2011      	movs	r0, #17
   11408:	f7ff ff5c 	bl	112c4 <writeByte.constprop.0.isra.0>
	return z_impl_k_sleep(timeout);
   1140c:	2100      	movs	r1, #0
   1140e:	f44f 70a4 	mov.w	r0, #328	; 0x148
   11412:	f00a fb37 	bl	1ba84 <z_impl_k_sleep>
   11416:	2100      	movs	r1, #0
   11418:	f640 40cd 	movw	r0, #3277	; 0xccd
   1141c:	f00a fb32 	bl	1ba84 <z_impl_k_sleep>
    uint8_t temp = readByte(ICM42605_ADDRESS, ICM42605_DRIVE_CONFIG);      
   11420:	2013      	movs	r0, #19
   11422:	f7ff ff5f 	bl	112e4 <readByte.constprop.0>
    temp ^= (-0 ^ temp) & (1UL << 5);
   11426:	f000 01c9 	and.w	r1, r0, #201	; 0xc9
    writeByte(ICM42605_ADDRESS, ICM42605_DRIVE_CONFIG, temp);// set i2c slew rate to 20-60ns
   1142a:	f041 0109 	orr.w	r1, r1, #9
   1142e:	2013      	movs	r0, #19
   11430:	f7ff ff48 	bl	112c4 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INTF_CONFIG6);      
   11434:	207c      	movs	r0, #124	; 0x7c
   11436:	f7ff ff55 	bl	112e4 <readByte.constprop.0>
    temp ^= (-0 ^ temp) & (1UL << 1);
   1143a:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
    writeByte(ICM42605_ADDRESS, ICM42605_INTF_CONFIG6, temp);// 
   1143e:	f041 0110 	orr.w	r1, r1, #16
   11442:	207c      	movs	r0, #124	; 0x7c
   11444:	f7ff ff3e 	bl	112c4 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INTF_CONFIG4);      
   11448:	207a      	movs	r0, #122	; 0x7a
   1144a:	f7ff ff4b 	bl	112e4 <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_INTF_CONFIG4, temp);// 
   1144e:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
   11452:	207a      	movs	r0, #122	; 0x7a
   11454:	f7ff ff36 	bl	112c4 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_GYRO_CONFIG0);
   11458:	204f      	movs	r0, #79	; 0x4f
   1145a:	f7ff ff43 	bl	112e4 <readByte.constprop.0>
    temp = temp & ~(0xEF) ; // set all to 0 
   1145e:	f000 0110 	and.w	r1, r0, #16
    writeByte(ICM42605_ADDRESS, ICM42605_GYRO_CONFIG0, temp | GODR | Gscale << 5); // gyro full scale and data rate
   11462:	4329      	orrs	r1, r5
   11464:	ea41 1146 	orr.w	r1, r1, r6, lsl #5
   11468:	b2c9      	uxtb	r1, r1
   1146a:	204f      	movs	r0, #79	; 0x4f
   1146c:	f7ff ff2a 	bl	112c4 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_ACCEL_CONFIG0);
   11470:	2050      	movs	r0, #80	; 0x50
   11472:	f7ff ff37 	bl	112e4 <readByte.constprop.0>
    temp = temp & ~(0xEF) ; // set all to 0 
   11476:	f000 0110 	and.w	r1, r0, #16
    writeByte(ICM42605_ADDRESS, ICM42605_ACCEL_CONFIG0, temp | AODR | Ascale << 5); // set accel full scale and data rate
   1147a:	4321      	orrs	r1, r4
   1147c:	ea41 1147 	orr.w	r1, r1, r7, lsl #5
   11480:	b2c9      	uxtb	r1, r1
   11482:	2050      	movs	r0, #80	; 0x50
   11484:	f7ff ff1e 	bl	112c4 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_GYRO_CONFIG1);
   11488:	2051      	movs	r0, #81	; 0x51
   1148a:	f7ff ff2b 	bl	112e4 <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_GYRO_CONFIG1, temp | 0xD0); // set temperature sensor low pass filter to 5Hz, use first order gyro filter
   1148e:	f060 012f 	orn	r1, r0, #47	; 0x2f
   11492:	b2c9      	uxtb	r1, r1
   11494:	2051      	movs	r0, #81	; 0x51
   11496:	f7ff ff15 	bl	112c4 <writeByte.constprop.0.isra.0>
   1149a:	2100      	movs	r1, #0
   1149c:	f640 40cd 	movw	r0, #3277	; 0xccd
   114a0:	f00a faf0 	bl	1ba84 <z_impl_k_sleep>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INT_CONFIG);
   114a4:	2014      	movs	r0, #20
   114a6:	f7ff ff1d 	bl	112e4 <readByte.constprop.0>
    temp ^= (-activeHigh ^ temp) & (1UL << 0);  // bit 0
   114aa:	43c3      	mvns	r3, r0
   114ac:	f003 0301 	and.w	r3, r3, #1
   114b0:	4043      	eors	r3, r0
   114b2:	b2db      	uxtb	r3, r3
    temp ^= (-pushPull ^ temp) & (1UL << 1);
   114b4:	43d9      	mvns	r1, r3
   114b6:	f001 0102 	and.w	r1, r1, #2
   114ba:	4059      	eors	r1, r3
    writeByte(ICM42605_ADDRESS, ICM42605_INT_CONFIG, temp);
   114bc:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
   114c0:	2014      	movs	r0, #20
   114c2:	f7ff feff 	bl	112c4 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INT_CONFIG1);
   114c6:	2064      	movs	r0, #100	; 0x64
   114c8:	f7ff ff0c 	bl	112e4 <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_INT_CONFIG1, temp & ~(0x10) ); // set bit 4 to zero for proper function of INT1 and INT2
   114cc:	f000 01ef 	and.w	r1, r0, #239	; 0xef
   114d0:	2064      	movs	r0, #100	; 0x64
   114d2:	f7ff fef7 	bl	112c4 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INT_CONFIG0);
   114d6:	2063      	movs	r0, #99	; 0x63
   114d8:	f7ff ff04 	bl	112e4 <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_INT_CONFIG0, temp);
   114dc:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
   114e0:	2063      	movs	r0, #99	; 0x63
   114e2:	f7ff feef 	bl	112c4 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INT_SOURCE0);
   114e6:	2065      	movs	r0, #101	; 0x65
   114e8:	f7ff fefc 	bl	112e4 <readByte.constprop.0>
    temp ^= (-0 ^ temp) & (1UL << 6);
   114ec:	f000 0188 	and.w	r1, r0, #136	; 0x88
    writeByte(ICM42605_ADDRESS, ICM42605_INT_SOURCE0, temp ); // route data ready interrupt to INT1
   114f0:	f041 0108 	orr.w	r1, r1, #8
   114f4:	2065      	movs	r0, #101	; 0x65
   114f6:	f7ff fee5 	bl	112c4 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INT_SOURCE3);
   114fa:	2068      	movs	r0, #104	; 0x68
   114fc:	f7ff fef2 	bl	112e4 <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_INT_SOURCE3, temp | 0x01 ); // route AGC interrupt interrupt to INT2
   11500:	f040 0101 	orr.w	r1, r0, #1
   11504:	b2c9      	uxtb	r1, r1
   11506:	2068      	movs	r0, #104	; 0x68
   11508:	f7ff fedc 	bl	112c4 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_REG_BANK_SEL);
   1150c:	2076      	movs	r0, #118	; 0x76
   1150e:	f7ff fee9 	bl	112e4 <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_REG_BANK_SEL, temp | 0x04 ); // select Bank 4
   11512:	f040 0104 	orr.w	r1, r0, #4
   11516:	b2c9      	uxtb	r1, r1
   11518:	2076      	movs	r0, #118	; 0x76
   1151a:	f7ff fed3 	bl	112c4 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_APEX_CONFIG5);
   1151e:	2044      	movs	r0, #68	; 0x44
   11520:	f7ff fee0 	bl	112e4 <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_APEX_CONFIG5, temp & ~(0x07) ); // select unitary mounting matrix
   11524:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   11528:	2044      	movs	r0, #68	; 0x44
   1152a:	f7ff fecb 	bl	112c4 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_REG_BANK_SEL);
   1152e:	2076      	movs	r0, #118	; 0x76
   11530:	f7ff fed8 	bl	112e4 <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_REG_BANK_SEL, temp & ~(0x07) ); // select Bank 0
   11534:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   11538:	2076      	movs	r0, #118	; 0x76
   1153a:	f7ff fec3 	bl	112c4 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_PWR_MGMT0); // make sure not to disturb reserved bit values
   1153e:	204e      	movs	r0, #78	; 0x4e
   11540:	f7ff fed0 	bl	112e4 <readByte.constprop.0>
   11544:	4601      	mov	r1, r0
    writeByte(ICM42605_ADDRESS, ICM42605_PWR_MGMT0, temp | 0x00);  // disable gyro and accel
   11546:	204e      	movs	r0, #78	; 0x4e
   11548:	f7ff febc 	bl	112c4 <writeByte.constprop.0.isra.0>
  switch (Ascale)
   1154c:	2f03      	cmp	r7, #3
   1154e:	d807      	bhi.n	11560 <init_icm+0x170>
   11550:	e8df f007 	tbb	[pc, r7]
   11554:	020e1216 	.word	0x020e1216
      _aRes = 2.0f / 32768.0f;
   11558:	4b1c      	ldr	r3, [pc, #112]	; (115cc <init_icm+0x1dc>)
   1155a:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
      _aRes = 16.0f / 32768.0f;
   1155e:	601a      	str	r2, [r3, #0]
  switch (Gscale)
   11560:	2e07      	cmp	r6, #7
   11562:	d814      	bhi.n	1158e <init_icm+0x19e>
   11564:	e8df f006 	tbb	[pc, r6]
   11568:	25282b2e 	.word	0x25282b2e
   1156c:	101c1f22 	.word	0x101c1f22
      _aRes = 4.0f / 32768.0f;
   11570:	4b16      	ldr	r3, [pc, #88]	; (115cc <init_icm+0x1dc>)
   11572:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
   11576:	e7f2      	b.n	1155e <init_icm+0x16e>
      _aRes = 8.0f / 32768.0f;
   11578:	4b14      	ldr	r3, [pc, #80]	; (115cc <init_icm+0x1dc>)
   1157a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
   1157e:	e7ee      	b.n	1155e <init_icm+0x16e>
      _aRes = 16.0f / 32768.0f;
   11580:	4b12      	ldr	r3, [pc, #72]	; (115cc <init_icm+0x1dc>)
   11582:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
   11586:	e7ea      	b.n	1155e <init_icm+0x16e>
      _gRes = 15.125f / 32768.0f;
   11588:	4b11      	ldr	r3, [pc, #68]	; (115d0 <init_icm+0x1e0>)
   1158a:	4a12      	ldr	r2, [pc, #72]	; (115d4 <init_icm+0x1e4>)
      _gRes = 2000.0f / 32768.0f;
   1158c:	601a      	str	r2, [r3, #0]
   1158e:	f44f 70a4 	mov.w	r0, #328	; 0x148
   11592:	2100      	movs	r1, #0
   11594:	f00a fa76 	bl	1ba84 <z_impl_k_sleep>
}
   11598:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  init_Interrupt_IMU();
   1159c:	f7ff bec2 	b.w	11324 <init_Interrupt_IMU>
      _gRes = 31.25f / 32768.0f;
   115a0:	4b0b      	ldr	r3, [pc, #44]	; (115d0 <init_icm+0x1e0>)
   115a2:	4a0d      	ldr	r2, [pc, #52]	; (115d8 <init_icm+0x1e8>)
   115a4:	e7f2      	b.n	1158c <init_icm+0x19c>
      _gRes = 62.5f / 32768.0f;
   115a6:	4b0a      	ldr	r3, [pc, #40]	; (115d0 <init_icm+0x1e0>)
   115a8:	4a0c      	ldr	r2, [pc, #48]	; (115dc <init_icm+0x1ec>)
   115aa:	e7ef      	b.n	1158c <init_icm+0x19c>
      _gRes = 125.0f / 32768.0f;
   115ac:	4b08      	ldr	r3, [pc, #32]	; (115d0 <init_icm+0x1e0>)
   115ae:	4a0c      	ldr	r2, [pc, #48]	; (115e0 <init_icm+0x1f0>)
   115b0:	e7ec      	b.n	1158c <init_icm+0x19c>
      _gRes = 250.0f / 32768.0f;
   115b2:	4b07      	ldr	r3, [pc, #28]	; (115d0 <init_icm+0x1e0>)
   115b4:	4a0b      	ldr	r2, [pc, #44]	; (115e4 <init_icm+0x1f4>)
   115b6:	e7e9      	b.n	1158c <init_icm+0x19c>
      _gRes = 500.0f / 32768.0f;
   115b8:	4b05      	ldr	r3, [pc, #20]	; (115d0 <init_icm+0x1e0>)
   115ba:	4a0b      	ldr	r2, [pc, #44]	; (115e8 <init_icm+0x1f8>)
   115bc:	e7e6      	b.n	1158c <init_icm+0x19c>
      _gRes = 1000.0f / 32768.0f;
   115be:	4b04      	ldr	r3, [pc, #16]	; (115d0 <init_icm+0x1e0>)
   115c0:	4a0a      	ldr	r2, [pc, #40]	; (115ec <init_icm+0x1fc>)
   115c2:	e7e3      	b.n	1158c <init_icm+0x19c>
      _gRes = 2000.0f / 32768.0f;
   115c4:	4b02      	ldr	r3, [pc, #8]	; (115d0 <init_icm+0x1e0>)
   115c6:	4a0a      	ldr	r2, [pc, #40]	; (115f0 <init_icm+0x200>)
   115c8:	e7e0      	b.n	1158c <init_icm+0x19c>
   115ca:	bf00      	nop
   115cc:	20002058 	.word	0x20002058
   115d0:	2000205c 	.word	0x2000205c
   115d4:	39f20000 	.word	0x39f20000
   115d8:	3a7a0000 	.word	0x3a7a0000
   115dc:	3afa0000 	.word	0x3afa0000
   115e0:	3b7a0000 	.word	0x3b7a0000
   115e4:	3bfa0000 	.word	0x3bfa0000
   115e8:	3c7a0000 	.word	0x3c7a0000
   115ec:	3cfa0000 	.word	0x3cfa0000
   115f0:	3d7a0000 	.word	0x3d7a0000

000115f4 <config_submits>:

	return bt_gatt_attr_read(conn, attr, buf, len, offset, value, sizeof(value));
}

static ssize_t config_submits(struct bt_conn *conn, const struct bt_gatt_attr *attr, const void *buf, uint16_t len, uint16_t offset,uint8_t flags)
{
   115f4:	b570      	push	{r4, r5, r6, lr}
   115f6:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   115fa:	460c      	mov	r4, r1
	uint8_t *value = attr->user_data;
	if (offset + len > sizeof(config_data)) {
   115fc:	461d      	mov	r5, r3
   115fe:	18c3      	adds	r3, r0, r3
   11600:	2b14      	cmp	r3, #20
	uint8_t *value = attr->user_data;
   11602:	68e6      	ldr	r6, [r4, #12]
{
   11604:	4611      	mov	r1, r2
	if (offset + len > sizeof(config_data)) {
   11606:	dc1d      	bgt.n	11644 <config_submits+0x50>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}
	memcpy(value + offset, buf, len);
   11608:	462a      	mov	r2, r5
   1160a:	4430      	add	r0, r6
   1160c:	f00e ffa0 	bl	20550 <memcpy>
	
	if(attr->uuid == &bmp_cnfg.uuid){
   11610:	6822      	ldr	r2, [r4, #0]
   11612:	4b0e      	ldr	r3, [pc, #56]	; (1164c <config_submits+0x58>)
   11614:	429a      	cmp	r2, r3
   11616:	d101      	bne.n	1161c <config_submits+0x28>
		submit_config_bmp();
   11618:	f000 ff14 	bl	12444 <submit_config_bmp>
	}
	if(attr->uuid == &shtc_cnfg.uuid){
   1161c:	6822      	ldr	r2, [r4, #0]
   1161e:	4b0c      	ldr	r3, [pc, #48]	; (11650 <config_submits+0x5c>)
   11620:	429a      	cmp	r2, r3
   11622:	d101      	bne.n	11628 <config_submits+0x34>
		submit_config_shtc();
   11624:	f7ff fe3c 	bl	112a0 <submit_config_shtc>
	}
	if(attr->uuid == &mlx_cnfg.uuid){
   11628:	6822      	ldr	r2, [r4, #0]
   1162a:	4b0a      	ldr	r3, [pc, #40]	; (11654 <config_submits+0x60>)
   1162c:	429a      	cmp	r2, r3
   1162e:	d101      	bne.n	11634 <config_submits+0x40>
		submit_config_mlx();
   11630:	f000 fa00 	bl	11a34 <submit_config_mlx>
	}
	if(attr->uuid == &icm_cnfg.uuid){
   11634:	6822      	ldr	r2, [r4, #0]
   11636:	4b08      	ldr	r3, [pc, #32]	; (11658 <config_submits+0x64>)
   11638:	429a      	cmp	r2, r3
   1163a:	d101      	bne.n	11640 <config_submits+0x4c>
		submit_config_icm();
   1163c:	f7ff fed2 	bl	113e4 <submit_config_icm>
	}
	return len;
};
   11640:	4628      	mov	r0, r5
   11642:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   11644:	f06f 0506 	mvn.w	r5, #6
   11648:	e7fa      	b.n	11640 <config_submits+0x4c>
   1164a:	bf00      	nop
   1164c:	20000a1d 	.word	0x20000a1d
   11650:	20000aa5 	.word	0x20000aa5
   11654:	20000a83 	.word	0x20000a83
   11658:	20000a50 	.word	0x20000a50

0001165c <read_u16>:
{
   1165c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   11660:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
   11664:	460c      	mov	r4, r1
   11666:	4606      	mov	r6, r0
		printk("len: %i\n",len);
   11668:	4619      	mov	r1, r3
   1166a:	480b      	ldr	r0, [pc, #44]	; (11698 <read_u16+0x3c>)
{
   1166c:	461d      	mov	r5, r3
   1166e:	4617      	mov	r7, r2
		printk("len: %i\n",len);
   11670:	f00e f9bf 	bl	1f9f2 <printk>
		printk("offset: %i\n",offset);
   11674:	4641      	mov	r1, r8
   11676:	4809      	ldr	r0, [pc, #36]	; (1169c <read_u16+0x40>)
   11678:	f00e f9bb 	bl	1f9f2 <printk>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value, sizeof(value));
   1167c:	2304      	movs	r3, #4
   1167e:	9302      	str	r3, [sp, #8]
   11680:	68e3      	ldr	r3, [r4, #12]
   11682:	463a      	mov	r2, r7
   11684:	e9cd 8300 	strd	r8, r3, [sp]
   11688:	4621      	mov	r1, r4
   1168a:	462b      	mov	r3, r5
   1168c:	4630      	mov	r0, r6
   1168e:	f010 fdad 	bl	221ec <bt_gatt_attr_read>
}
   11692:	b004      	add	sp, #16
   11694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11698:	00024ce5 	.word	0x00024ce5
   1169c:	00024cee 	.word	0x00024cee

000116a0 <disconnected>:
	led_blink_times(blue_led_dev,3);
	k_timer_start(&timer_bas,K_SECONDS(1),K_SECONDS(1));
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
   116a0:	b508      	push	{r3, lr}
	printk("Disconnected (reason 0x%02x)\n", reason);
   116a2:	4804      	ldr	r0, [pc, #16]	; (116b4 <disconnected+0x14>)
   116a4:	f00e f9a5 	bl	1f9f2 <printk>
	z_impl_k_timer_stop(timer);
   116a8:	4803      	ldr	r0, [pc, #12]	; (116b8 <disconnected+0x18>)
	k_timer_stop(&timer_bas);
	//sleep_bmp(true);
	//sleep_shtc(true);
	//sleep_mpr(true);
	//sleep_mlx(true);
}
   116aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   116ae:	f012 b8ae 	b.w	2380e <z_impl_k_timer_stop>
   116b2:	bf00      	nop
   116b4:	00024cfa 	.word	0x00024cfa
   116b8:	20001960 	.word	0x20001960

000116bc <connected>:
{
   116bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   116be:	460c      	mov	r4, r1
   116c0:	4605      	mov	r5, r0
	printk("Device with index %i trying to connect...\n",bt_conn_index(conn));
   116c2:	f004 f88d 	bl	157e0 <bt_conn_index>
   116c6:	4601      	mov	r1, r0
   116c8:	480e      	ldr	r0, [pc, #56]	; (11704 <connected+0x48>)
   116ca:	f00e f992 	bl	1f9f2 <printk>
	bt_conn_le_param_update(conn,&conn_paramter);
   116ce:	490e      	ldr	r1, [pc, #56]	; (11708 <connected+0x4c>)
   116d0:	4628      	mov	r0, r5
   116d2:	f00f fce7 	bl	210a4 <bt_conn_le_param_update>
	if (err) {
   116d6:	b18c      	cbz	r4, 116fc <connected+0x40>
		printk("Connection failed (err 0x%02x)\n", err);
   116d8:	480c      	ldr	r0, [pc, #48]	; (1170c <connected+0x50>)
   116da:	4621      	mov	r1, r4
   116dc:	f00e f989 	bl	1f9f2 <printk>
	led_blink_times(blue_led_dev,3);
   116e0:	480b      	ldr	r0, [pc, #44]	; (11710 <connected+0x54>)
   116e2:	2103      	movs	r1, #3
   116e4:	f00d fcf2 	bl	1f0cc <led_blink_times>
   116e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   116ec:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
   116ee:	4809      	ldr	r0, [pc, #36]	; (11714 <connected+0x58>)
   116f0:	e9cd 2300 	strd	r2, r3, [sp]
   116f4:	f00a fbe2 	bl	1bebc <z_impl_k_timer_start>
}
   116f8:	b003      	add	sp, #12
   116fa:	bd30      	pop	{r4, r5, pc}
		printk("Connected\n");
   116fc:	4806      	ldr	r0, [pc, #24]	; (11718 <connected+0x5c>)
   116fe:	f00e f978 	bl	1f9f2 <printk>
   11702:	e7ed      	b.n	116e0 <connected+0x24>
   11704:	00024d18 	.word	0x00024d18
   11708:	00024bc4 	.word	0x00024bc4
   1170c:	00024d43 	.word	0x00024d43
   11710:	00023c8c 	.word	0x00023c8c
   11714:	20001960 	.word	0x20001960
   11718:	00024d63 	.word	0x00024d63

0001171c <bt_gatt_notify_uuid.constprop.0.isra.0>:
 *  @param data Pointer to Attribute data.
 *  @param len  Attribute value length.
 *
 *  @return 0 in case of success or negative value in case of error.
 */
static inline int bt_gatt_notify_uuid(struct bt_conn *conn,
   1171c:	b570      	push	{r4, r5, r6, lr}
   1171e:	b086      	sub	sp, #24
   11720:	4606      	mov	r6, r0
   11722:	460d      	mov	r5, r1
   11724:	4614      	mov	r4, r2
				      const struct bt_gatt_attr *attr,
				      const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   11726:	2100      	movs	r1, #0
   11728:	2218      	movs	r2, #24
   1172a:	4668      	mov	r0, sp
   1172c:	f00e ff1b 	bl	20566 <memset>

	params.uuid = uuid;
	params.attr = attr;
   11730:	4b05      	ldr	r3, [pc, #20]	; (11748 <bt_gatt_notify_uuid.constprop.0.isra.0+0x2c>)
	params.uuid = uuid;
   11732:	9600      	str	r6, [sp, #0]
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
   11734:	4669      	mov	r1, sp
   11736:	2000      	movs	r0, #0
	params.data = data;
   11738:	e9cd 3501 	strd	r3, r5, [sp, #4]
	params.len = len;
   1173c:	f8ad 400c 	strh.w	r4, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
   11740:	f005 fbc2 	bl	16ec8 <bt_gatt_notify_cb>
}
   11744:	b006      	add	sp, #24
   11746:	bd70      	pop	{r4, r5, r6, pc}
   11748:	00023fd4 	.word	0x00023fd4

0001174c <init_ble>:
static struct bt_conn_cb conn_callbacks = {
	.connected = connected,
	.disconnected = disconnected,
};

void init_ble(){
   1174c:	b507      	push	{r0, r1, r2, lr}
	bt_enable(NULL);
   1174e:	2000      	movs	r0, #0
   11750:	f003 f976 	bl	14a40 <bt_enable>
	printk("Bluetooth initialized\n");
   11754:	480c      	ldr	r0, [pc, #48]	; (11788 <init_ble+0x3c>)
   11756:	f00e f94c 	bl	1f9f2 <printk>
	err = bt_le_adv_start(&adv_param_normal, ad, ARRAY_SIZE(ad), NULL, 0);
   1175a:	2300      	movs	r3, #0
   1175c:	490b      	ldr	r1, [pc, #44]	; (1178c <init_ble+0x40>)
   1175e:	480c      	ldr	r0, [pc, #48]	; (11790 <init_ble+0x44>)
   11760:	9300      	str	r3, [sp, #0]
   11762:	2203      	movs	r2, #3
   11764:	f003 fd66 	bl	15234 <bt_le_adv_start>
	if (err) {
   11768:	4601      	mov	r1, r0
   1176a:	b140      	cbz	r0, 1177e <init_ble+0x32>
		printk("Advertising failed to start (err %d)\n", err);
   1176c:	4809      	ldr	r0, [pc, #36]	; (11794 <init_ble+0x48>)
   1176e:	f00e f940 	bl	1f9f2 <printk>
	bt_ready();
	bt_conn_cb_register(&conn_callbacks);
   11772:	4809      	ldr	r0, [pc, #36]	; (11798 <init_ble+0x4c>)
};
   11774:	b003      	add	sp, #12
   11776:	f85d eb04 	ldr.w	lr, [sp], #4
	bt_conn_cb_register(&conn_callbacks);
   1177a:	f004 b8d5 	b.w	15928 <bt_conn_cb_register>
	printk("Advertising successfully started\n");
   1177e:	4807      	ldr	r0, [pc, #28]	; (1179c <init_ble+0x50>)
   11780:	f00e f937 	bl	1f9f2 <printk>
   11784:	e7f5      	b.n	11772 <init_ble+0x26>
   11786:	bf00      	nop
   11788:	00024d6e 	.word	0x00024d6e
   1178c:	00023fa8 	.word	0x00023fa8
   11790:	00023fc0 	.word	0x00023fc0
   11794:	00024d85 	.word	0x00024d85
   11798:	20000640 	.word	0x20000640
   1179c:	00024dab 	.word	0x00024dab

000117a0 <send_data>:

extern void send_data(uint8_t ID, float* DATA,uint8_t LEN){
	if(ID == SENSOR_IMU_ACC_ID){
   117a0:	2802      	cmp	r0, #2
   117a2:	d102      	bne.n	117aa <send_data+0xa>
		bt_gatt_notify_uuid(NULL, &icm_uuid_acc.uuid,&phyphox_gatt.attrs[0],DATA,LEN);
   117a4:	4809      	ldr	r0, [pc, #36]	; (117cc <send_data+0x2c>)
		bt_gatt_notify_uuid(NULL, &shtc_uuid.uuid,&phyphox_gatt.attrs[0],DATA,LEN);
		return;
	}
	if (ID == SENSOR_MLX_ID)
	{
		bt_gatt_notify_uuid(NULL, &mlx_uuid.uuid,&phyphox_gatt.attrs[0],DATA,LEN);
   117a6:	f7ff bfb9 	b.w	1171c <bt_gatt_notify_uuid.constprop.0.isra.0>
	if(ID == SENSOR_IMU_GYR_ID){
   117aa:	2803      	cmp	r0, #3
   117ac:	d101      	bne.n	117b2 <send_data+0x12>
		bt_gatt_notify_uuid(NULL, &icm_uuid_gyr.uuid,&phyphox_gatt.attrs[0],DATA,LEN);
   117ae:	4808      	ldr	r0, [pc, #32]	; (117d0 <send_data+0x30>)
   117b0:	e7f9      	b.n	117a6 <send_data+0x6>
	if(ID == SENSOR_BMP384_ID){
   117b2:	2801      	cmp	r0, #1
   117b4:	d101      	bne.n	117ba <send_data+0x1a>
		bt_gatt_notify_uuid(NULL, &bmp_uuid.uuid,&phyphox_gatt.attrs[0],DATA,LEN);
   117b6:	4807      	ldr	r0, [pc, #28]	; (117d4 <send_data+0x34>)
   117b8:	e7f5      	b.n	117a6 <send_data+0x6>
	if (ID == SENSOR_SHTC_ID)
   117ba:	2804      	cmp	r0, #4
   117bc:	d101      	bne.n	117c2 <send_data+0x22>
		bt_gatt_notify_uuid(NULL, &shtc_uuid.uuid,&phyphox_gatt.attrs[0],DATA,LEN);
   117be:	4806      	ldr	r0, [pc, #24]	; (117d8 <send_data+0x38>)
   117c0:	e7f1      	b.n	117a6 <send_data+0x6>
	if (ID == SENSOR_MLX_ID)
   117c2:	2805      	cmp	r0, #5
   117c4:	d101      	bne.n	117ca <send_data+0x2a>
		bt_gatt_notify_uuid(NULL, &mlx_uuid.uuid,&phyphox_gatt.attrs[0],DATA,LEN);
   117c6:	4805      	ldr	r0, [pc, #20]	; (117dc <send_data+0x3c>)
   117c8:	e7ed      	b.n	117a6 <send_data+0x6>
		return;
	}
   117ca:	4770      	bx	lr
   117cc:	20000a61 	.word	0x20000a61
   117d0:	20000a72 	.word	0x20000a72
   117d4:	20000a2e 	.word	0x20000a2e
   117d8:	20000ab6 	.word	0x20000ab6
   117dc:	20000a94 	.word	0x20000a94

000117e0 <sendDataMLX>:
{
	//printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
	k_work_submit(&work_mlx);

}
extern void sendDataMLX(){
   117e0:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
    mlx_readData(&mlx_data.x,&mlx_data.y,&mlx_data.z,mlx_dev);
   117e2:	4c20      	ldr	r4, [pc, #128]	; (11864 <sendDataMLX+0x84>)
   117e4:	4b20      	ldr	r3, [pc, #128]	; (11868 <sendDataMLX+0x88>)
   117e6:	f104 0208 	add.w	r2, r4, #8
   117ea:	1d21      	adds	r1, r4, #4
   117ec:	4620      	mov	r0, r4
   117ee:	f000 fa3d 	bl	11c6c <mlx_readData>
	if(PRINT_SENSOR_DATA){
    	printk("MLX: x: %f y: %f z: %f \n",mlx_data.x,mlx_data.y,mlx_data.z);
   117f2:	6820      	ldr	r0, [r4, #0]
   117f4:	f7ee fde8 	bl	3c8 <__aeabi_f2d>
   117f8:	4606      	mov	r6, r0
   117fa:	68a0      	ldr	r0, [r4, #8]
   117fc:	460f      	mov	r7, r1
   117fe:	f7ee fde3 	bl	3c8 <__aeabi_f2d>
   11802:	e9cd 0102 	strd	r0, r1, [sp, #8]
   11806:	6860      	ldr	r0, [r4, #4]
   11808:	f7ee fdde 	bl	3c8 <__aeabi_f2d>
   1180c:	4632      	mov	r2, r6
   1180e:	e9cd 0100 	strd	r0, r1, [sp]
   11812:	463b      	mov	r3, r7
   11814:	4815      	ldr	r0, [pc, #84]	; (1186c <sendDataMLX+0x8c>)
   11816:	f00e f8ec 	bl	1f9f2 <printk>
	return z_impl_k_uptime_ticks();
   1181a:	f011 ffbb 	bl	23794 <z_impl_k_uptime_ticks>
   1181e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11822:	fba0 0302 	umull	r0, r3, r0, r2
   11826:	fb02 3101 	mla	r1, r2, r1, r3
   1182a:	0bc0      	lsrs	r0, r0, #15
	}
	
	float timestamp = k_uptime_get() /1000.0;
   1182c:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   11830:	0bc9      	lsrs	r1, r1, #15
   11832:	f7ee fdf3 	bl	41c <__aeabi_l2d>
   11836:	4b0e      	ldr	r3, [pc, #56]	; (11870 <sendDataMLX+0x90>)
   11838:	2200      	movs	r2, #0
   1183a:	f7ee ff47 	bl	6cc <__aeabi_ddiv>
   1183e:	f7ef f8b5 	bl	9ac <__aeabi_d2f>
	mlx_data.timestamp = timestamp;

	mlx_data.array[0] = mlx_data.x;
   11842:	6823      	ldr	r3, [r4, #0]
   11844:	6123      	str	r3, [r4, #16]
	mlx_data.array[1] = mlx_data.y;
   11846:	6863      	ldr	r3, [r4, #4]
   11848:	6163      	str	r3, [r4, #20]
	mlx_data.array[2] = mlx_data.z;
	mlx_data.array[3] = mlx_data.timestamp;

	send_data(SENSOR_MLX_ID, &mlx_data.array, sizeof(mlx_data.array));
   1184a:	2210      	movs	r2, #16
	mlx_data.array[2] = mlx_data.z;
   1184c:	68a3      	ldr	r3, [r4, #8]
	mlx_data.timestamp = timestamp;
   1184e:	60e0      	str	r0, [r4, #12]
	mlx_data.array[3] = mlx_data.timestamp;
   11850:	61e0      	str	r0, [r4, #28]
	send_data(SENSOR_MLX_ID, &mlx_data.array, sizeof(mlx_data.array));
   11852:	18a1      	adds	r1, r4, r2
   11854:	2005      	movs	r0, #5
	mlx_data.array[2] = mlx_data.z;
   11856:	61a3      	str	r3, [r4, #24]
}
   11858:	b004      	add	sp, #16
   1185a:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	send_data(SENSOR_MLX_ID, &mlx_data.array, sizeof(mlx_data.array));
   1185e:	f7ff bf9f 	b.w	117a0 <send_data>
   11862:	bf00      	nop
   11864:	200020e4 	.word	0x200020e4
   11868:	00023c74 	.word	0x00023c74
   1186c:	00024dcd 	.word	0x00024dcd
   11870:	408f4000 	.word	0x408f4000

00011874 <mlx_int1_triggered>:
	k_work_submit(&work_mlx);
   11874:	4801      	ldr	r0, [pc, #4]	; (1187c <mlx_int1_triggered+0x8>)
   11876:	f009 bd8b 	b.w	1b390 <k_work_submit>
   1187a:	bf00      	nop
   1187c:	20002124 	.word	0x20002124

00011880 <init_interrupt_mlx>:

int8_t init_interrupt_mlx(){
   11880:	b570      	push	{r4, r5, r6, lr}
    int8_t returnValue;

	k_work_init(&work_mlx, sendDataMLX);
   11882:	4924      	ldr	r1, [pc, #144]	; (11914 <init_interrupt_mlx+0x94>)
   11884:	4824      	ldr	r0, [pc, #144]	; (11918 <init_interrupt_mlx+0x98>)
   11886:	f011 fda7 	bl	233d8 <k_work_init>
	k_work_init(&config_mlx, set_config_mlx);
   1188a:	4924      	ldr	r1, [pc, #144]	; (1191c <init_interrupt_mlx+0x9c>)
   1188c:	4824      	ldr	r0, [pc, #144]	; (11920 <init_interrupt_mlx+0xa0>)
   1188e:	f011 fda3 	bl	233d8 <k_work_init>
   11892:	4d24      	ldr	r5, [pc, #144]	; (11924 <init_interrupt_mlx+0xa4>)
   11894:	4628      	mov	r0, r5
   11896:	f011 fb5e 	bl	22f56 <z_device_is_ready>


    if (!device_is_ready(mlx_int1.port)) {
   1189a:	b930      	cbnz	r0, 118aa <init_interrupt_mlx+0x2a>
		printk("Error: button device %s is not ready\n",
   1189c:	6829      	ldr	r1, [r5, #0]
   1189e:	4822      	ldr	r0, [pc, #136]	; (11928 <init_interrupt_mlx+0xa8>)
   118a0:	f00e f8a7 	bl	1f9f2 <printk>
		       mlx_int1.port->name);
		return 1;
   118a4:	2401      	movs	r4, #1
	gpio_init_callback(&mlx_int1_cb_data, mlx_int1_triggered, BIT(mlx_int1.pin));
	gpio_add_callback(mlx_int1.port, &mlx_int1_cb_data);
	printk("Set up mlx_int1 at %s pin %d\n", mlx_int1.port->name, mlx_int1.pin);

    return returnValue;
}
   118a6:	4620      	mov	r0, r4
   118a8:	bd70      	pop	{r4, r5, r6, pc}
	struct gpio_driver_data *data =
   118aa:	692a      	ldr	r2, [r5, #16]
	const struct gpio_driver_api *api =
   118ac:	68ae      	ldr	r6, [r5, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   118ae:	6813      	ldr	r3, [r2, #0]
   118b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   118b4:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   118b6:	210f      	movs	r1, #15
   118b8:	6833      	ldr	r3, [r6, #0]
   118ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   118be:	4628      	mov	r0, r5
   118c0:	4798      	blx	r3
	returnValue = gpio_pin_configure_dt(&mlx_int1, GPIO_INPUT);
   118c2:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   118c4:	b134      	cbz	r4, 118d4 <init_interrupt_mlx+0x54>
		printk("Error %d: failed to configure %s pin %d\n",
   118c6:	682a      	ldr	r2, [r5, #0]
   118c8:	4818      	ldr	r0, [pc, #96]	; (1192c <init_interrupt_mlx+0xac>)
   118ca:	230f      	movs	r3, #15
   118cc:	4621      	mov	r1, r4
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   118ce:	f00e f890 	bl	1f9f2 <printk>
		return returnValue;
   118d2:	e7e8      	b.n	118a6 <init_interrupt_mlx+0x26>
	return api->pin_interrupt_configure(port, pin, mode, trig);
   118d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   118d8:	69b4      	ldr	r4, [r6, #24]
   118da:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
   118de:	210f      	movs	r1, #15
   118e0:	4628      	mov	r0, r5
   118e2:	47a0      	blx	r4
	returnValue = gpio_pin_interrupt_configure_dt(&mlx_int1,GPIO_INT_EDGE_RISING);
   118e4:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   118e6:	b124      	cbz	r4, 118f2 <init_interrupt_mlx+0x72>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   118e8:	682a      	ldr	r2, [r5, #0]
   118ea:	4811      	ldr	r0, [pc, #68]	; (11930 <init_interrupt_mlx+0xb0>)
   118ec:	230f      	movs	r3, #15
   118ee:	4621      	mov	r1, r4
   118f0:	e7ed      	b.n	118ce <init_interrupt_mlx+0x4e>
	callback->handler = handler;
   118f2:	4910      	ldr	r1, [pc, #64]	; (11934 <init_interrupt_mlx+0xb4>)
   118f4:	4b10      	ldr	r3, [pc, #64]	; (11938 <init_interrupt_mlx+0xb8>)
   118f6:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   118f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   118fc:	608b      	str	r3, [r1, #8]
	if (api->manage_callback == NULL) {
   118fe:	69f3      	ldr	r3, [r6, #28]
   11900:	b113      	cbz	r3, 11908 <init_interrupt_mlx+0x88>
	return api->manage_callback(port, callback, true);
   11902:	2201      	movs	r2, #1
   11904:	4628      	mov	r0, r5
   11906:	4798      	blx	r3
	printk("Set up mlx_int1 at %s pin %d\n", mlx_int1.port->name, mlx_int1.pin);
   11908:	6829      	ldr	r1, [r5, #0]
   1190a:	480c      	ldr	r0, [pc, #48]	; (1193c <init_interrupt_mlx+0xbc>)
   1190c:	220f      	movs	r2, #15
   1190e:	f00e f870 	bl	1f9f2 <printk>
    return returnValue;
   11912:	e7c8      	b.n	118a6 <init_interrupt_mlx+0x26>
   11914:	000117e1 	.word	0x000117e1
   11918:	20002124 	.word	0x20002124
   1191c:	00011981 	.word	0x00011981
   11920:	200020d4 	.word	0x200020d4
   11924:	00023be4 	.word	0x00023be4
   11928:	00024de6 	.word	0x00024de6
   1192c:	00024c6d 	.word	0x00024c6d
   11930:	00024c96 	.word	0x00024c96
   11934:	20002118 	.word	0x20002118
   11938:	00011875 	.word	0x00011875
   1193c:	00024e0c 	.word	0x00024e0c

00011940 <init_mlx>:
extern int8_t init_mlx(){
   11940:	b538      	push	{r3, r4, r5, lr}
    bool err = mlx_init(mlx_dev);
   11942:	4d07      	ldr	r5, [pc, #28]	; (11960 <init_mlx+0x20>)
   11944:	4628      	mov	r0, r5
   11946:	f00d fcda 	bl	1f2fe <mlx_init>
   1194a:	4604      	mov	r4, r0
	init_interrupt_mlx();
   1194c:	f7ff ff98 	bl	11880 <init_interrupt_mlx>

extern uint8_t sleep_mlx(bool SLEEP) {
	if(SLEEP){
		return mlx_exitMode(mlx_dev);
   11950:	4628      	mov	r0, r5
   11952:	f00d fc6f 	bl	1f234 <mlx_exitMode>
}
   11956:	1e20      	subs	r0, r4, #0
   11958:	bf18      	it	ne
   1195a:	2001      	movne	r0, #1
   1195c:	bd38      	pop	{r3, r4, r5, pc}
   1195e:	bf00      	nop
   11960:	00023c74 	.word	0x00023c74

00011964 <sleep_mlx>:
extern uint8_t sleep_mlx(bool SLEEP) {
   11964:	b508      	push	{r3, lr}
	if(SLEEP){
   11966:	b920      	cbnz	r0, 11972 <sleep_mlx+0xe>
	}else{
		return startBurstMode(mlx_dev);
	}
}
   11968:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return startBurstMode(mlx_dev);
   1196c:	4803      	ldr	r0, [pc, #12]	; (1197c <sleep_mlx+0x18>)
   1196e:	f00d bcb2 	b.w	1f2d6 <startBurstMode>
		return mlx_exitMode(mlx_dev);
   11972:	4802      	ldr	r0, [pc, #8]	; (1197c <sleep_mlx+0x18>)
   11974:	f00d fc5e 	bl	1f234 <mlx_exitMode>
   11978:	b2c0      	uxtb	r0, r0
}
   1197a:	bd08      	pop	{r3, pc}
   1197c:	00023c74 	.word	0x00023c74

00011980 <set_config_mlx>:

static void set_config_mlx(){
   11980:	b510      	push	{r4, lr}
	if (DEBUG) {printk("MLX Setting config...\n");}

	if (!mlx_setGain(mlx_data.config[1], mlx_dev)) {
   11982:	4c23      	ldr	r4, [pc, #140]	; (11a10 <set_config_mlx+0x90>)
	if (DEBUG) {printk("MLX Setting config...\n");}
   11984:	4823      	ldr	r0, [pc, #140]	; (11a14 <set_config_mlx+0x94>)
   11986:	f00e f834 	bl	1f9f2 <printk>
	if (!mlx_setGain(mlx_data.config[1], mlx_dev)) {
   1198a:	4923      	ldr	r1, [pc, #140]	; (11a18 <set_config_mlx+0x98>)
   1198c:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
   11990:	f000 f856 	bl	11a40 <mlx_setGain>
   11994:	b910      	cbnz	r0, 1199c <set_config_mlx+0x1c>
		printk("MLX error set Gain\n");
   11996:	4821      	ldr	r0, [pc, #132]	; (11a1c <set_config_mlx+0x9c>)
   11998:	f00e f82b 	bl	1f9f2 <printk>
	}
	if (!mlx_setFilter(mlx_data.config[2], mlx_dev)) {
   1199c:	491e      	ldr	r1, [pc, #120]	; (11a18 <set_config_mlx+0x98>)
   1199e:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
   119a2:	f000 f8a1 	bl	11ae8 <mlx_setFilter>
   119a6:	b910      	cbnz	r0, 119ae <set_config_mlx+0x2e>
		printk("MLX error set Filter\n");
   119a8:	481d      	ldr	r0, [pc, #116]	; (11a20 <set_config_mlx+0xa0>)
   119aa:	f00e f822 	bl	1f9f2 <printk>
    }
	if (!mlx_setOversampling(mlx_data.config[3], mlx_dev)) {
   119ae:	491a      	ldr	r1, [pc, #104]	; (11a18 <set_config_mlx+0x98>)
   119b0:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
   119b4:	f000 f8b4 	bl	11b20 <mlx_setOversampling>
   119b8:	b910      	cbnz	r0, 119c0 <set_config_mlx+0x40>
		printk("MLX error set Oversampling\n");
   119ba:	481a      	ldr	r0, [pc, #104]	; (11a24 <set_config_mlx+0xa4>)
   119bc:	f00e f819 	bl	1f9f2 <printk>
    }
	/* Set resolution. */
	if (!mlx_setResolution(MLX90393_X, mlx_data.config[4], mlx_dev)){
   119c0:	4a15      	ldr	r2, [pc, #84]	; (11a18 <set_config_mlx+0x98>)
   119c2:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
   119c6:	2000      	movs	r0, #0
   119c8:	f000 f856 	bl	11a78 <mlx_setResolution>
   119cc:	b910      	cbnz	r0, 119d4 <set_config_mlx+0x54>
		printk("MLX error set X Resolution\n");
   119ce:	4816      	ldr	r0, [pc, #88]	; (11a28 <set_config_mlx+0xa8>)
   119d0:	f00e f80f 	bl	1f9f2 <printk>
	}
	if (!mlx_setResolution(MLX90393_Y, mlx_data.config[5], mlx_dev)){
   119d4:	4a10      	ldr	r2, [pc, #64]	; (11a18 <set_config_mlx+0x98>)
   119d6:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
   119da:	2001      	movs	r0, #1
   119dc:	f000 f84c 	bl	11a78 <mlx_setResolution>
   119e0:	b910      	cbnz	r0, 119e8 <set_config_mlx+0x68>
		printk("MLX error set Y Resolution\n");
   119e2:	4812      	ldr	r0, [pc, #72]	; (11a2c <set_config_mlx+0xac>)
   119e4:	f00e f805 	bl	1f9f2 <printk>
	}
	if (!mlx_setResolution(MLX90393_Z, mlx_data.config[6], mlx_dev)){
   119e8:	4a0b      	ldr	r2, [pc, #44]	; (11a18 <set_config_mlx+0x98>)
   119ea:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
   119ee:	2002      	movs	r0, #2
   119f0:	f000 f842 	bl	11a78 <mlx_setResolution>
   119f4:	b910      	cbnz	r0, 119fc <set_config_mlx+0x7c>
		printk("MLX error set Z Resolution\n");
   119f6:	480e      	ldr	r0, [pc, #56]	; (11a30 <set_config_mlx+0xb0>)
   119f8:	f00d fffb 	bl	1f9f2 <printk>
	}

	sleep_mlx(!mlx_data.config[0]);
   119fc:	f894 0020 	ldrb.w	r0, [r4, #32]
   11a00:	fab0 f080 	clz	r0, r0
}
   11a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sleep_mlx(!mlx_data.config[0]);
   11a08:	0940      	lsrs	r0, r0, #5
   11a0a:	f7ff bfab 	b.w	11964 <sleep_mlx>
   11a0e:	bf00      	nop
   11a10:	200020e4 	.word	0x200020e4
   11a14:	00024e2a 	.word	0x00024e2a
   11a18:	00023c74 	.word	0x00023c74
   11a1c:	00024e41 	.word	0x00024e41
   11a20:	00024e55 	.word	0x00024e55
   11a24:	00024e6b 	.word	0x00024e6b
   11a28:	00024e87 	.word	0x00024e87
   11a2c:	00024ea3 	.word	0x00024ea3
   11a30:	00024ebf 	.word	0x00024ebf

00011a34 <submit_config_mlx>:

extern void submit_config_mlx(){
	k_work_submit(&config_mlx);
   11a34:	4801      	ldr	r0, [pc, #4]	; (11a3c <submit_config_mlx+0x8>)
   11a36:	f009 bcab 	b.w	1b390 <k_work_submit>
   11a3a:	bf00      	nop
   11a3c:	200020d4 	.word	0x200020d4

00011a40 <mlx_setGain>:
/**
 * Sets the sensor gain to the specified level.
 * @param gain  The gain level to set.
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_setGain(mlx90393_gain_t gain, struct device *mlx_device_t) {
   11a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
  _gain = gain;
   11a42:	4b0c      	ldr	r3, [pc, #48]	; (11a74 <mlx_setGain+0x34>)
bool mlx_setGain(mlx90393_gain_t gain, struct device *mlx_device_t) {
   11a44:	4605      	mov	r5, r0
   11a46:	460c      	mov	r4, r1
  _gain = gain;
   11a48:	7018      	strb	r0, [r3, #0]

  uint16_t data;
  readRegister(MLX90393_CONF1, &data, mlx_device_t);
   11a4a:	460a      	mov	r2, r1
   11a4c:	2000      	movs	r0, #0
   11a4e:	f10d 0106 	add.w	r1, sp, #6
   11a52:	f00d fbd3 	bl	1f1fc <readRegister>

  // mask off gain bits
  data &= ~0x0070;
   11a56:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  // set gain bits
  data |= gain << MLX90393_GAIN_SHIFT;
   11a5e:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   11a62:	b281      	uxth	r1, r0

  return writeRegister(MLX90393_CONF1, data, mlx_device_t);
   11a64:	4622      	mov	r2, r4
   11a66:	2000      	movs	r0, #0
  data |= gain << MLX90393_GAIN_SHIFT;
   11a68:	f8ad 1006 	strh.w	r1, [sp, #6]
  return writeRegister(MLX90393_CONF1, data, mlx_device_t);
   11a6c:	f00d fbac 	bl	1f1c8 <writeRegister>
}
   11a70:	b003      	add	sp, #12
   11a72:	bd30      	pop	{r4, r5, pc}
   11a74:	200035b5 	.word	0x200035b5

00011a78 <mlx_setResolution>:
 * @param axis  The axis to set.
 * @param resolution  The resolution level to set.
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_setResolution(enum mlx90393_axis axis,
                                      enum mlx90393_resolution resolution, struct device *mlx_device_t) {
   11a78:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11a7a:	4606      	mov	r6, r0
   11a7c:	460c      	mov	r4, r1

  uint16_t data;
  readRegister(MLX90393_CONF3, &data, mlx_device_t);
   11a7e:	2002      	movs	r0, #2
   11a80:	f10d 0106 	add.w	r1, sp, #6
                                      enum mlx90393_resolution resolution, struct device *mlx_device_t) {
   11a84:	4615      	mov	r5, r2
  readRegister(MLX90393_CONF3, &data, mlx_device_t);
   11a86:	f00d fbb9 	bl	1f1fc <readRegister>

  switch (axis) {
   11a8a:	2e01      	cmp	r6, #1
   11a8c:	d014      	beq.n	11ab8 <mlx_setResolution+0x40>
   11a8e:	2e02      	cmp	r6, #2
   11a90:	d01b      	beq.n	11aca <mlx_setResolution+0x52>
   11a92:	b94e      	cbnz	r6, 11aa8 <mlx_setResolution+0x30>
  case MLX90393_X:
    _res_x = resolution;
    data &= ~0x0060;
   11a94:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    _res_x = resolution;
   11a98:	4b10      	ldr	r3, [pc, #64]	; (11adc <mlx_setResolution+0x64>)
    data &= ~0x0060;
   11a9a:	f021 0160 	bic.w	r1, r1, #96	; 0x60
    _res_x = resolution;
   11a9e:	701c      	strb	r4, [r3, #0]
    data |= resolution << 5;
   11aa0:	ea41 1444 	orr.w	r4, r1, r4, lsl #5
    data |= resolution << 7;
    break;
  case MLX90393_Z:
    _res_z = resolution;
    data &= ~0x0600;
    data |= resolution << 9;
   11aa4:	f8ad 4006 	strh.w	r4, [sp, #6]
    break;
  }

  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   11aa8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   11aac:	462a      	mov	r2, r5
   11aae:	2002      	movs	r0, #2
   11ab0:	f00d fb8a 	bl	1f1c8 <writeRegister>
}
   11ab4:	b002      	add	sp, #8
   11ab6:	bd70      	pop	{r4, r5, r6, pc}
    data &= ~0x0180;
   11ab8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    _res_y = resolution;
   11abc:	4b08      	ldr	r3, [pc, #32]	; (11ae0 <mlx_setResolution+0x68>)
    data &= ~0x0180;
   11abe:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
    _res_y = resolution;
   11ac2:	701c      	strb	r4, [r3, #0]
    data |= resolution << 7;
   11ac4:	ea41 14c4 	orr.w	r4, r1, r4, lsl #7
   11ac8:	e7ec      	b.n	11aa4 <mlx_setResolution+0x2c>
    data &= ~0x0600;
   11aca:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    _res_z = resolution;
   11ace:	4b05      	ldr	r3, [pc, #20]	; (11ae4 <mlx_setResolution+0x6c>)
    data &= ~0x0600;
   11ad0:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
    _res_z = resolution;
   11ad4:	701c      	strb	r4, [r3, #0]
    data |= resolution << 9;
   11ad6:	ea41 2444 	orr.w	r4, r1, r4, lsl #9
   11ada:	e7e3      	b.n	11aa4 <mlx_setResolution+0x2c>
   11adc:	200035b7 	.word	0x200035b7
   11ae0:	200035b8 	.word	0x200035b8
   11ae4:	200035b9 	.word	0x200035b9

00011ae8 <mlx_setFilter>:
/**
 * Sets the digital filter.
 * @param filter The digital filter setting.
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_setFilter(enum mlx90393_filter filter, struct device *mlx_device_t) {
   11ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  _dig_filt = filter;
   11aea:	4b0c      	ldr	r3, [pc, #48]	; (11b1c <mlx_setFilter+0x34>)
bool mlx_setFilter(enum mlx90393_filter filter, struct device *mlx_device_t) {
   11aec:	4605      	mov	r5, r0
   11aee:	460c      	mov	r4, r1
  _dig_filt = filter;
   11af0:	7018      	strb	r0, [r3, #0]

  uint16_t data;
  readRegister(MLX90393_CONF3, &data, mlx_device_t);
   11af2:	460a      	mov	r2, r1
   11af4:	2002      	movs	r0, #2
   11af6:	f10d 0106 	add.w	r1, sp, #6
   11afa:	f00d fb7f 	bl	1f1fc <readRegister>

  data &= ~0x1C;
   11afe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11b02:	f023 031c 	bic.w	r3, r3, #28
  data |= filter << 2;
   11b06:	ea43 0085 	orr.w	r0, r3, r5, lsl #2
   11b0a:	b281      	uxth	r1, r0

  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   11b0c:	4622      	mov	r2, r4
   11b0e:	2002      	movs	r0, #2
  data |= filter << 2;
   11b10:	f8ad 1006 	strh.w	r1, [sp, #6]
  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   11b14:	f00d fb58 	bl	1f1c8 <writeRegister>
}
   11b18:	b003      	add	sp, #12
   11b1a:	bd30      	pop	{r4, r5, pc}
   11b1c:	200035b4 	.word	0x200035b4

00011b20 <mlx_setOversampling>:
 * Sets the oversampling.
 * @param oversampling The oversampling value to use.
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_setOversampling(
    enum mlx90393_oversampling oversampling, struct device *mlx_device_t) {
   11b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
  _osr = oversampling;
   11b22:	4b0c      	ldr	r3, [pc, #48]	; (11b54 <mlx_setOversampling+0x34>)
    enum mlx90393_oversampling oversampling, struct device *mlx_device_t) {
   11b24:	4605      	mov	r5, r0
   11b26:	460c      	mov	r4, r1
  _osr = oversampling;
   11b28:	7018      	strb	r0, [r3, #0]

  uint16_t data;
  readRegister(MLX90393_CONF3, &data, mlx_device_t);
   11b2a:	460a      	mov	r2, r1
   11b2c:	2002      	movs	r0, #2
   11b2e:	f10d 0106 	add.w	r1, sp, #6
   11b32:	f00d fb63 	bl	1f1fc <readRegister>

  data &= ~0x03;
   11b36:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11b3a:	f023 0303 	bic.w	r3, r3, #3
  data |= oversampling;
   11b3e:	ea43 0005 	orr.w	r0, r3, r5
   11b42:	b281      	uxth	r1, r0

  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   11b44:	4622      	mov	r2, r4
   11b46:	2002      	movs	r0, #2
  data |= oversampling;
   11b48:	f8ad 1006 	strh.w	r1, [sp, #6]
  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   11b4c:	f00d fb3c 	bl	1f1c8 <writeRegister>
}
   11b50:	b003      	add	sp, #12
   11b52:	bd30      	pop	{r4, r5, pc}
   11b54:	200035b6 	.word	0x200035b6

00011b58 <mlx_readMeasurement>:
 * @param y     Pointer to where the 'y' value should be stored.
 * @param z     Pointer to where the 'z' value should be stored.
 *
 * @return True on command success
 */
bool mlx_readMeasurement(float *x, float *y, float *z, struct device *mlx_device_t) {
   11b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b5c:	b087      	sub	sp, #28
   11b5e:	4690      	mov	r8, r2
  uint8_t tx[1] = {MLX90393_REG_RM | MLX90393_AXIS_ALL};
   11b60:	224e      	movs	r2, #78	; 0x4e
   11b62:	f88d 200c 	strb.w	r2, [sp, #12]
  /* Convert data to uT and float. */
  xi = (rx[0] << 8) | rx[1];
  yi = (rx[2] << 8) | rx[3];
  zi = (rx[4] << 8) | rx[5];

  if (_res_x == MLX90393_RES_18)
   11b66:	4e3c      	ldr	r6, [pc, #240]	; (11c58 <mlx_readMeasurement+0x100>)
  uint8_t rx[6] = {0};
   11b68:	2200      	movs	r2, #0
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {  
   11b6a:	e9cd 2300 	strd	r2, r3, [sp]
  uint8_t rx[6] = {0};
   11b6e:	9204      	str	r2, [sp, #16]
   11b70:	f8ad 2014 	strh.w	r2, [sp, #20]
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {  
   11b74:	2306      	movs	r3, #6
   11b76:	aa04      	add	r2, sp, #16
bool mlx_readMeasurement(float *x, float *y, float *z, struct device *mlx_device_t) {
   11b78:	4683      	mov	fp, r0
   11b7a:	468a      	mov	sl, r1
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {  
   11b7c:	a803      	add	r0, sp, #12
   11b7e:	2101      	movs	r1, #1
   11b80:	f00d facf 	bl	1f122 <transceive>
  xi = (rx[0] << 8) | rx[1];
   11b84:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   11b88:	f8bd 5012 	ldrh.w	r5, [sp, #18]
   11b8c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  if (_res_x == MLX90393_RES_18)
   11b90:	7837      	ldrb	r7, [r6, #0]
   11b92:	ba42      	rev16	r2, r0
   11b94:	ba6b      	rev16	r3, r5
   11b96:	ba61      	rev16	r1, r4
   11b98:	2f02      	cmp	r7, #2
   11b9a:	b290      	uxth	r0, r2
  yi = (rx[2] << 8) | rx[3];
   11b9c:	b29d      	uxth	r5, r3
  zi = (rx[4] << 8) | rx[5];
   11b9e:	b28c      	uxth	r4, r1
  if (_res_x == MLX90393_RES_18)
   11ba0:	d103      	bne.n	11baa <mlx_readMeasurement+0x52>
    xi -= 0x8000;
   11ba2:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
  if (_res_x == MLX90393_RES_19)
    xi -= 0x4000;
   11ba6:	b200      	sxth	r0, r0
   11ba8:	e002      	b.n	11bb0 <mlx_readMeasurement+0x58>
  if (_res_x == MLX90393_RES_19)
   11baa:	2f03      	cmp	r7, #3
   11bac:	d008      	beq.n	11bc0 <mlx_readMeasurement+0x68>
   11bae:	b210      	sxth	r0, r2
  if (_res_y == MLX90393_RES_18)
   11bb0:	4a2a      	ldr	r2, [pc, #168]	; (11c5c <mlx_readMeasurement+0x104>)
   11bb2:	7816      	ldrb	r6, [r2, #0]
   11bb4:	2e02      	cmp	r6, #2
   11bb6:	d106      	bne.n	11bc6 <mlx_readMeasurement+0x6e>
    yi -= 0x8000;
   11bb8:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
  if (_res_y == MLX90393_RES_19)
    yi -= 0x4000;
   11bbc:	b22d      	sxth	r5, r5
   11bbe:	e005      	b.n	11bcc <mlx_readMeasurement+0x74>
    xi -= 0x4000;
   11bc0:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
   11bc4:	e7ef      	b.n	11ba6 <mlx_readMeasurement+0x4e>
  if (_res_y == MLX90393_RES_19)
   11bc6:	2e03      	cmp	r6, #3
   11bc8:	d008      	beq.n	11bdc <mlx_readMeasurement+0x84>
   11bca:	b21d      	sxth	r5, r3
  if (_res_z == MLX90393_RES_18)
   11bcc:	4b24      	ldr	r3, [pc, #144]	; (11c60 <mlx_readMeasurement+0x108>)
   11bce:	781e      	ldrb	r6, [r3, #0]
   11bd0:	2e02      	cmp	r6, #2
   11bd2:	d106      	bne.n	11be2 <mlx_readMeasurement+0x8a>
    zi -= 0x8000;
   11bd4:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
  if (_res_z == MLX90393_RES_19)
    zi -= 0x4000;
   11bd8:	b224      	sxth	r4, r4
   11bda:	e005      	b.n	11be8 <mlx_readMeasurement+0x90>
    yi -= 0x4000;
   11bdc:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
   11be0:	e7ec      	b.n	11bbc <mlx_readMeasurement+0x64>
  if (_res_z == MLX90393_RES_19)
   11be2:	2e03      	cmp	r6, #3
   11be4:	d035      	beq.n	11c52 <mlx_readMeasurement+0xfa>
   11be6:	b20c      	sxth	r4, r1

  *x = (float)xi * mlx90393_lsb_lookup[0][_gain][_res_x][0];
   11be8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 11c64 <mlx_readMeasurement+0x10c>
   11bec:	4e1e      	ldr	r6, [pc, #120]	; (11c68 <mlx_readMeasurement+0x110>)
   11bee:	f899 1000 	ldrb.w	r1, [r9]
   11bf2:	eb07 0781 	add.w	r7, r7, r1, lsl #2
   11bf6:	f7ee ffe3 	bl	bc0 <__aeabi_i2f>
   11bfa:	4601      	mov	r1, r0
   11bfc:	f856 0037 	ldr.w	r0, [r6, r7, lsl #3]
   11c00:	f7ef f832 	bl	c68 <__aeabi_fmul>
  *y = (float)yi * mlx90393_lsb_lookup[0][_gain][_res_y][0];
   11c04:	4a15      	ldr	r2, [pc, #84]	; (11c5c <mlx_readMeasurement+0x104>)
  *x = (float)xi * mlx90393_lsb_lookup[0][_gain][_res_x][0];
   11c06:	f8cb 0000 	str.w	r0, [fp]
  *y = (float)yi * mlx90393_lsb_lookup[0][_gain][_res_y][0];
   11c0a:	7817      	ldrb	r7, [r2, #0]
   11c0c:	f899 1000 	ldrb.w	r1, [r9]
   11c10:	4628      	mov	r0, r5
   11c12:	eb07 0781 	add.w	r7, r7, r1, lsl #2
   11c16:	f7ee ffd3 	bl	bc0 <__aeabi_i2f>
   11c1a:	4601      	mov	r1, r0
   11c1c:	f856 0037 	ldr.w	r0, [r6, r7, lsl #3]
   11c20:	f7ef f822 	bl	c68 <__aeabi_fmul>
  *z = (float)zi * mlx90393_lsb_lookup[0][_gain][_res_z][1];
   11c24:	4b0e      	ldr	r3, [pc, #56]	; (11c60 <mlx_readMeasurement+0x108>)
  *y = (float)yi * mlx90393_lsb_lookup[0][_gain][_res_y][0];
   11c26:	f8ca 0000 	str.w	r0, [sl]
  *z = (float)zi * mlx90393_lsb_lookup[0][_gain][_res_z][1];
   11c2a:	f899 2000 	ldrb.w	r2, [r9]
   11c2e:	781b      	ldrb	r3, [r3, #0]
   11c30:	4620      	mov	r0, r4
   11c32:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   11c36:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   11c3a:	f7ee ffc1 	bl	bc0 <__aeabi_i2f>
   11c3e:	4601      	mov	r1, r0
   11c40:	6870      	ldr	r0, [r6, #4]
   11c42:	f7ef f811 	bl	c68 <__aeabi_fmul>
   11c46:	f8c8 0000 	str.w	r0, [r8]

  return true;
}
   11c4a:	2001      	movs	r0, #1
   11c4c:	b007      	add	sp, #28
   11c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    zi -= 0x4000;
   11c52:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
   11c56:	e7bf      	b.n	11bd8 <mlx_readMeasurement+0x80>
   11c58:	200035b7 	.word	0x200035b7
   11c5c:	200035b8 	.word	0x200035b8
   11c60:	200035b9 	.word	0x200035b9
   11c64:	200035b5 	.word	0x200035b5
   11c68:	000240d8 	.word	0x000240d8

00011c6c <mlx_readData>:
 * @param y     Pointer to where the 'y' value should be stored.
 * @param z     Pointer to where the 'z' value should be stored.
 *
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_readData(float *x, float *y, float *z, struct device *mlx_device_t) {
   11c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c70:	4606      	mov	r6, r0
  if (!startSingleMeasurement(mlx_device_t)) {
   11c72:	4618      	mov	r0, r3
bool mlx_readData(float *x, float *y, float *z, struct device *mlx_device_t) {
   11c74:	460f      	mov	r7, r1
   11c76:	4690      	mov	r8, r2
   11c78:	461d      	mov	r5, r3
  if (!startSingleMeasurement(mlx_device_t)) {
   11c7a:	f00d fb1d 	bl	1f2b8 <startSingleMeasurement>
   11c7e:	b370      	cbz	r0, 11cde <mlx_readData+0x72>
  }
  // See MLX90393 Getting Started Guide for fancy formula
  // tconv = f(OSR, DIG_FILT, OSR2, ZYXT)
  // For now, using Table 18 from datasheet
  // Without +10ms delay measurement doesn't always seem to work
  k_sleep(K_MSEC(mlx90393_tconv[_dig_filt][_osr] + 10));
   11c80:	4b18      	ldr	r3, [pc, #96]	; (11ce4 <mlx_readData+0x78>)
   11c82:	4919      	ldr	r1, [pc, #100]	; (11ce8 <mlx_readData+0x7c>)
   11c84:	781a      	ldrb	r2, [r3, #0]
   11c86:	4b19      	ldr	r3, [pc, #100]	; (11cec <mlx_readData+0x80>)
   11c88:	781b      	ldrb	r3, [r3, #0]
   11c8a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   11c8e:	4a18      	ldr	r2, [pc, #96]	; (11cf0 <mlx_readData+0x84>)
   11c90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   11c94:	f7ee fee0 	bl	a58 <__addsf3>
   11c98:	2100      	movs	r1, #0
   11c9a:	4604      	mov	r4, r0
   11c9c:	f7ef f9a0 	bl	fe0 <__aeabi_fcmpgt>
   11ca0:	b1d8      	cbz	r0, 11cda <mlx_readData+0x6e>
   11ca2:	4620      	mov	r0, r4
   11ca4:	f7ef f9de 	bl	1064 <__aeabi_f2ulz>
   11ca8:	03c9      	lsls	r1, r1, #15
   11caa:	03c4      	lsls	r4, r0, #15
   11cac:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   11cb0:	f240 30e7 	movw	r0, #999	; 0x3e7
   11cb4:	1820      	adds	r0, r4, r0
   11cb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11cba:	f04f 0300 	mov.w	r3, #0
   11cbe:	f141 0100 	adc.w	r1, r1, #0
   11cc2:	f7ef f9b7 	bl	1034 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   11cc6:	f009 fedd 	bl	1ba84 <z_impl_k_sleep>
	//k_sleep(K_SECONDS(1));

  return mlx_readMeasurement(x, y, z, mlx_device_t);
   11cca:	462b      	mov	r3, r5
   11ccc:	4642      	mov	r2, r8
   11cce:	4639      	mov	r1, r7
   11cd0:	4630      	mov	r0, r6
  return 0;
}
   11cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return mlx_readMeasurement(x, y, z, mlx_device_t);
   11cd6:	f7ff bf3f 	b.w	11b58 <mlx_readMeasurement>
  k_sleep(K_MSEC(mlx90393_tconv[_dig_filt][_osr] + 10));
   11cda:	4601      	mov	r1, r0
   11cdc:	e7e4      	b.n	11ca8 <mlx_readData+0x3c>
}
   11cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11ce2:	bf00      	nop
   11ce4:	200035b4 	.word	0x200035b4
   11ce8:	41200000 	.word	0x41200000
   11cec:	200035b6 	.word	0x200035b6
   11cf0:	000242d8 	.word	0x000242d8

00011cf4 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_dev *dev)
{
   11cf4:	b570      	push	{r4, r5, r6, lr}
   11cf6:	4605      	mov	r5, r0
   11cf8:	b092      	sub	sp, #72	; 0x48
     * be considered in the sum. */
    uint32_t meas_t = 234;
    uint32_t meas_t_p = 0;

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
   11cfa:	4921      	ldr	r1, [pc, #132]	; (11d80 <validate_osr_and_odr_settings+0x8c>)
   11cfc:	2248      	movs	r2, #72	; 0x48
   11cfe:	4668      	mov	r0, sp
   11d00:	f00e fc26 	bl	20550 <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (dev->settings.press_en)
   11d04:	f895 40b1 	ldrb.w	r4, [r5, #177]	; 0xb1
   11d08:	b16c      	cbz	r4, 11d26 <validate_osr_and_odr_settings+0x32>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(dev);
   11d0a:	f895 40b3 	ldrb.w	r4, [r5, #179]	; 0xb3
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
    float pow_output = 1;
   11d0e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000

    while (power != 0)
   11d12:	bb44      	cbnz	r4, 11d66 <validate_osr_and_odr_settings+0x72>
    press_meas_t = (BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
   11d14:	491b      	ldr	r1, [pc, #108]	; (11d84 <validate_osr_and_odr_settings+0x90>)
   11d16:	f7ee ffa7 	bl	c68 <__aeabi_fmul>
   11d1a:	491b      	ldr	r1, [pc, #108]	; (11d88 <validate_osr_and_odr_settings+0x94>)
   11d1c:	f7ee fe9c 	bl	a58 <__addsf3>
   11d20:	f7ef f968 	bl	ff4 <__aeabi_f2uiz>
   11d24:	4604      	mov	r4, r0
    if (dev->settings.temp_en)
   11d26:	f895 30b2 	ldrb.w	r3, [r5, #178]	; 0xb2
   11d2a:	b16b      	cbz	r3, 11d48 <validate_osr_and_odr_settings+0x54>
        meas_t_p += calculate_temp_meas_time(dev);
   11d2c:	f895 60b4 	ldrb.w	r6, [r5, #180]	; 0xb4
    float pow_output = 1;
   11d30:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    while (power != 0)
   11d34:	b9ee      	cbnz	r6, 11d72 <validate_osr_and_odr_settings+0x7e>
    temp_meas_t = (BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
   11d36:	4913      	ldr	r1, [pc, #76]	; (11d84 <validate_osr_and_odr_settings+0x90>)
   11d38:	f7ee ff96 	bl	c68 <__aeabi_fmul>
   11d3c:	4913      	ldr	r1, [pc, #76]	; (11d8c <validate_osr_and_odr_settings+0x98>)
   11d3e:	f7ee fe8b 	bl	a58 <__addsf3>
   11d42:	f7ef f957 	bl	ff4 <__aeabi_f2uiz>
        meas_t_p += calculate_temp_meas_time(dev);
   11d46:	4404      	add	r4, r0
    rslt = verify_meas_time_and_odr_duration(meas_t, odr[dev->settings.odr_filter.odr]);
   11d48:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
   11d4c:	aa12      	add	r2, sp, #72	; 0x48
   11d4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    meas_t += meas_t_p;
   11d52:	34ea      	adds	r4, #234	; 0xea
    if (meas_t < odr_duration)
   11d54:	f853 3c48 	ldr.w	r3, [r3, #-72]
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
   11d58:	42a3      	cmp	r3, r4
}
   11d5a:	bf94      	ite	ls
   11d5c:	f06f 0002 	mvnls.w	r0, #2
   11d60:	2000      	movhi	r0, #0
   11d62:	b012      	add	sp, #72	; 0x48
   11d64:	bd70      	pop	{r4, r5, r6, pc}
    {
        pow_output = (float) base * pow_output;
   11d66:	4601      	mov	r1, r0
        power--;
   11d68:	3c01      	subs	r4, #1
        pow_output = (float) base * pow_output;
   11d6a:	f7ee fe75 	bl	a58 <__addsf3>
        power--;
   11d6e:	b2e4      	uxtb	r4, r4
   11d70:	e7cf      	b.n	11d12 <validate_osr_and_odr_settings+0x1e>
        pow_output = (float) base * pow_output;
   11d72:	4601      	mov	r1, r0
        power--;
   11d74:	3e01      	subs	r6, #1
        pow_output = (float) base * pow_output;
   11d76:	f7ee fe6f 	bl	a58 <__addsf3>
        power--;
   11d7a:	b2f6      	uxtb	r6, r6
   11d7c:	e7da      	b.n	11d34 <validate_osr_and_odr_settings+0x40>
   11d7e:	bf00      	nop
   11d80:	00023ef0 	.word	0x00023ef0
   11d84:	44fa0000 	.word	0x44fa0000
   11d88:	43c40000 	.word	0x43c40000
   11d8c:	439c8000 	.word	0x439c8000

00011d90 <bmp3_set_sensor_settings>:
{
   11d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11d92:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
   11d94:	4608      	mov	r0, r1
{
   11d96:	460d      	mov	r5, r1
    rslt = null_ptr_check(dev);
   11d98:	f00d fae8 	bl	1f36c <null_ptr_check>
    if (rslt == BMP3_OK)
   11d9c:	2800      	cmp	r0, #0
   11d9e:	f040 811e 	bne.w	11fde <bmp3_set_sensor_settings+0x24e>
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
    uint8_t settings_changed = FALSE;

    if (sub_settings & desired_settings)
   11da2:	f014 0f06 	tst.w	r4, #6
   11da6:	d029      	beq.n	11dfc <bmp3_set_sensor_settings+0x6c>
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   11da8:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   11daa:	460b      	mov	r3, r1
   11dac:	2201      	movs	r2, #1
   11dae:	a901      	add	r1, sp, #4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   11db0:	f88d 0000 	strb.w	r0, [sp]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   11db4:	f00d fbd3 	bl	1f55e <bmp3_get_regs>
    if (rslt == BMP3_OK)
   11db8:	bb00      	cbnz	r0, 11dfc <bmp3_set_sensor_settings+0x6c>
        if (desired_settings & BMP3_SEL_PRESS_EN)
   11dba:	07a7      	lsls	r7, r4, #30
   11dbc:	d50a      	bpl.n	11dd4 <bmp3_set_sensor_settings+0x44>
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, dev->settings.press_en);
   11dbe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   11dc2:	f895 20b1 	ldrb.w	r2, [r5, #177]	; 0xb1
   11dc6:	f023 0301 	bic.w	r3, r3, #1
   11dca:	f002 0201 	and.w	r2, r2, #1
   11dce:	4313      	orrs	r3, r2
   11dd0:	f88d 3004 	strb.w	r3, [sp, #4]
        if (desired_settings & BMP3_SEL_TEMP_EN)
   11dd4:	0766      	lsls	r6, r4, #29
   11dd6:	d50b      	bpl.n	11df0 <bmp3_set_sensor_settings+0x60>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, dev->settings.temp_en);
   11dd8:	f895 30b2 	ldrb.w	r3, [r5, #178]	; 0xb2
   11ddc:	f89d 2004 	ldrb.w	r2, [sp, #4]
   11de0:	005b      	lsls	r3, r3, #1
   11de2:	f003 0302 	and.w	r3, r3, #2
   11de6:	f022 0202 	bic.w	r2, r2, #2
   11dea:	4313      	orrs	r3, r2
   11dec:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
   11df0:	462b      	mov	r3, r5
   11df2:	2201      	movs	r2, #1
   11df4:	a901      	add	r1, sp, #4
   11df6:	4668      	mov	r0, sp
   11df8:	f00d fbf2 	bl	1f5e0 <bmp3_set_regs>
    if (sub_settings & desired_settings)
   11dfc:	f014 0ff0 	tst.w	r4, #240	; 0xf0
   11e00:	d072      	beq.n	11ee8 <bmp3_set_sensor_settings+0x158>
        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings) && (!rslt))
   11e02:	2800      	cmp	r0, #0
   11e04:	d170      	bne.n	11ee8 <bmp3_set_sensor_settings+0x158>
    uint8_t reg_addr[3] = { 0 };
   11e06:	4b78      	ldr	r3, [pc, #480]	; (11fe8 <bmp3_set_sensor_settings+0x258>)
   11e08:	f88d 0002 	strb.w	r0, [sp, #2]
   11e0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
   11e10:	f8ad 3000 	strh.w	r3, [sp]
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
   11e14:	2204      	movs	r2, #4
   11e16:	462b      	mov	r3, r5
   11e18:	eb0d 0102 	add.w	r1, sp, r2
   11e1c:	201c      	movs	r0, #28
   11e1e:	f00d fb9e 	bl	1f55e <bmp3_get_regs>
    if (rslt == BMP3_OK)
   11e22:	2800      	cmp	r0, #0
   11e24:	d160      	bne.n	11ee8 <bmp3_set_sensor_settings+0x158>
    if (sub_settings & desired_settings)
   11e26:	f014 0f30 	tst.w	r4, #48	; 0x30
   11e2a:	f000 80da 	beq.w	11fe2 <bmp3_set_sensor_settings+0x252>
        if (settings & BMP3_SEL_PRESS_OS)
   11e2e:	06e0      	lsls	r0, r4, #27
   11e30:	f895 20b4 	ldrb.w	r2, [r5, #180]	; 0xb4
   11e34:	d50a      	bpl.n	11e4c <bmp3_set_sensor_settings+0xbc>
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
   11e36:	f89d 3004 	ldrb.w	r3, [sp, #4]
   11e3a:	f895 10b3 	ldrb.w	r1, [r5, #179]	; 0xb3
   11e3e:	f023 0307 	bic.w	r3, r3, #7
   11e42:	f001 0107 	and.w	r1, r1, #7
   11e46:	430b      	orrs	r3, r1
   11e48:	f88d 3004 	strb.w	r3, [sp, #4]
        if (settings & BMP3_SEL_TEMP_OS)
   11e4c:	06a1      	lsls	r1, r4, #26
   11e4e:	d509      	bpl.n	11e64 <bmp3_set_sensor_settings+0xd4>
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
   11e50:	f89d 3004 	ldrb.w	r3, [sp, #4]
   11e54:	00d2      	lsls	r2, r2, #3
   11e56:	f023 0338 	bic.w	r3, r3, #56	; 0x38
   11e5a:	f002 0238 	and.w	r2, r2, #56	; 0x38
   11e5e:	4313      	orrs	r3, r2
   11e60:	f88d 3004 	strb.w	r3, [sp, #4]
        addr[*len] = BMP3_REG_OSR;
   11e64:	231c      	movs	r3, #28
   11e66:	f88d 3000 	strb.w	r3, [sp]
}
   11e6a:	2601      	movs	r6, #1
    if (sub_settings & desired_settings)
   11e6c:	0622      	lsls	r2, r4, #24
   11e6e:	d518      	bpl.n	11ea2 <bmp3_set_sensor_settings+0x112>
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
   11e70:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
   11e74:	2b11      	cmp	r3, #17
        osr_settings->odr = BMP3_ODR_0_001_HZ;
   11e76:	bf84      	itt	hi
   11e78:	2311      	movhi	r3, #17
   11e7a:	f885 30b6 	strbhi.w	r3, [r5, #182]	; 0xb6
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
   11e7e:	ab02      	add	r3, sp, #8
   11e80:	1999      	adds	r1, r3, r6
   11e82:	f895 20b6 	ldrb.w	r2, [r5, #182]	; 0xb6
   11e86:	f89d 3005 	ldrb.w	r3, [sp, #5]
   11e8a:	f002 021f 	and.w	r2, r2, #31
   11e8e:	f023 031f 	bic.w	r3, r3, #31
   11e92:	4313      	orrs	r3, r2
   11e94:	f801 3c04 	strb.w	r3, [r1, #-4]
    (*len)++;
   11e98:	3601      	adds	r6, #1
    addr[*len] = BMP3_REG_ODR;
   11e9a:	231d      	movs	r3, #29
   11e9c:	f801 3c08 	strb.w	r3, [r1, #-8]
    (*len)++;
   11ea0:	b2f6      	uxtb	r6, r6
    if (sub_settings & desired_settings)
   11ea2:	0663      	lsls	r3, r4, #25
   11ea4:	d512      	bpl.n	11ecc <bmp3_set_sensor_settings+0x13c>
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
   11ea6:	ab02      	add	r3, sp, #8
   11ea8:	1999      	adds	r1, r3, r6
   11eaa:	f895 30b5 	ldrb.w	r3, [r5, #181]	; 0xb5
   11eae:	f89d 2007 	ldrb.w	r2, [sp, #7]
   11eb2:	005b      	lsls	r3, r3, #1
   11eb4:	f003 030e 	and.w	r3, r3, #14
   11eb8:	f022 020e 	bic.w	r2, r2, #14
   11ebc:	4313      	orrs	r3, r2
   11ebe:	f801 3c04 	strb.w	r3, [r1, #-4]
    (*len)++;
   11ec2:	3601      	adds	r6, #1
    addr[*len] = BMP3_REG_CONFIG;
   11ec4:	231f      	movs	r3, #31
   11ec6:	f801 3c08 	strb.w	r3, [r1, #-8]
    (*len)++;
   11eca:	b2f6      	uxtb	r6, r6
        if (dev->settings.op_mode == BMP3_MODE_NORMAL)
   11ecc:	f895 30b0 	ldrb.w	r3, [r5, #176]	; 0xb0
   11ed0:	2b03      	cmp	r3, #3
   11ed2:	d103      	bne.n	11edc <bmp3_set_sensor_settings+0x14c>
            rslt = validate_osr_and_odr_settings(dev);
   11ed4:	4628      	mov	r0, r5
   11ed6:	f7ff ff0d 	bl	11cf4 <validate_osr_and_odr_settings>
        if (rslt == BMP3_OK)
   11eda:	b928      	cbnz	r0, 11ee8 <bmp3_set_sensor_settings+0x158>
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
   11edc:	462b      	mov	r3, r5
   11ede:	4632      	mov	r2, r6
   11ee0:	a901      	add	r1, sp, #4
   11ee2:	4668      	mov	r0, sp
   11ee4:	f00d fb7c 	bl	1f5e0 <bmp3_set_regs>
    if (sub_settings & desired_settings)
   11ee8:	f414 6fe1 	tst.w	r4, #1800	; 0x708
   11eec:	d048      	beq.n	11f80 <bmp3_set_sensor_settings+0x1f0>
        if (are_settings_changed(BMP3_INT_CTRL, desired_settings) && (!rslt))
   11eee:	2800      	cmp	r0, #0
   11ef0:	d146      	bne.n	11f80 <bmp3_set_sensor_settings+0x1f0>
    reg_addr = BMP3_REG_INT_CTRL;
   11ef2:	2019      	movs	r0, #25
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   11ef4:	462b      	mov	r3, r5
   11ef6:	2201      	movs	r2, #1
   11ef8:	4669      	mov	r1, sp
    reg_addr = BMP3_REG_INT_CTRL;
   11efa:	f88d 0004 	strb.w	r0, [sp, #4]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   11efe:	f00d fb2e 	bl	1f55e <bmp3_get_regs>
    if (rslt == BMP3_OK)
   11f02:	2800      	cmp	r0, #0
   11f04:	d13c      	bne.n	11f80 <bmp3_set_sensor_settings+0x1f0>
        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
   11f06:	05e7      	lsls	r7, r4, #23
        int_settings = dev->settings.int_settings;
   11f08:	f895 00b8 	ldrb.w	r0, [r5, #184]	; 0xb8
   11f0c:	f895 10b9 	ldrb.w	r1, [r5, #185]	; 0xb9
   11f10:	f895 20ba 	ldrb.w	r2, [r5, #186]	; 0xba
        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
   11f14:	d50a      	bpl.n	11f2c <bmp3_set_sensor_settings+0x19c>
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
   11f16:	f89d 3000 	ldrb.w	r3, [sp]
   11f1a:	f895 60b7 	ldrb.w	r6, [r5, #183]	; 0xb7
   11f1e:	f023 0301 	bic.w	r3, r3, #1
   11f22:	f006 0601 	and.w	r6, r6, #1
   11f26:	4333      	orrs	r3, r6
   11f28:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_LEVEL)
   11f2c:	05a6      	lsls	r6, r4, #22
   11f2e:	d509      	bpl.n	11f44 <bmp3_set_sensor_settings+0x1b4>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
   11f30:	f89d 3000 	ldrb.w	r3, [sp]
   11f34:	0040      	lsls	r0, r0, #1
   11f36:	f023 0302 	bic.w	r3, r3, #2
   11f3a:	f000 0002 	and.w	r0, r0, #2
   11f3e:	4303      	orrs	r3, r0
   11f40:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_LATCH)
   11f44:	0560      	lsls	r0, r4, #21
   11f46:	d509      	bpl.n	11f5c <bmp3_set_sensor_settings+0x1cc>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
   11f48:	f89d 3000 	ldrb.w	r3, [sp]
   11f4c:	0089      	lsls	r1, r1, #2
   11f4e:	f023 0304 	bic.w	r3, r3, #4
   11f52:	f001 0104 	and.w	r1, r1, #4
   11f56:	430b      	orrs	r3, r1
   11f58:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_DRDY_EN)
   11f5c:	0721      	lsls	r1, r4, #28
   11f5e:	d509      	bpl.n	11f74 <bmp3_set_sensor_settings+0x1e4>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
   11f60:	f89d 3000 	ldrb.w	r3, [sp]
   11f64:	0192      	lsls	r2, r2, #6
   11f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   11f6a:	f002 0240 	and.w	r2, r2, #64	; 0x40
   11f6e:	4313      	orrs	r3, r2
   11f70:	f88d 3000 	strb.w	r3, [sp]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
   11f74:	462b      	mov	r3, r5
   11f76:	2201      	movs	r2, #1
   11f78:	4669      	mov	r1, sp
   11f7a:	a801      	add	r0, sp, #4
   11f7c:	f00d fb30 	bl	1f5e0 <bmp3_set_regs>
    if (sub_settings & desired_settings)
   11f80:	f414 5fc0 	tst.w	r4, #6144	; 0x1800
   11f84:	d02b      	beq.n	11fde <bmp3_set_sensor_settings+0x24e>
        if (are_settings_changed(BMP3_ADV_SETT, desired_settings) && (!rslt))
   11f86:	bb50      	cbnz	r0, 11fde <bmp3_set_sensor_settings+0x24e>
    reg_addr = BMP3_REG_IF_CONF;
   11f88:	201a      	movs	r0, #26
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   11f8a:	462b      	mov	r3, r5
   11f8c:	2201      	movs	r2, #1
   11f8e:	a901      	add	r1, sp, #4
    struct bmp3_adv_settings adv_settings = dev->settings.adv_settings;
   11f90:	f895 70bb 	ldrb.w	r7, [r5, #187]	; 0xbb
   11f94:	f895 60bc 	ldrb.w	r6, [r5, #188]	; 0xbc
    reg_addr = BMP3_REG_IF_CONF;
   11f98:	f88d 0000 	strb.w	r0, [sp]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   11f9c:	f00d fadf 	bl	1f55e <bmp3_get_regs>
    if (rslt == BMP3_OK)
   11fa0:	b9e8      	cbnz	r0, 11fde <bmp3_set_sensor_settings+0x24e>
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
   11fa2:	0522      	lsls	r2, r4, #20
   11fa4:	d509      	bpl.n	11fba <bmp3_set_sensor_settings+0x22a>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
   11fa6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   11faa:	007f      	lsls	r7, r7, #1
   11fac:	f023 0302 	bic.w	r3, r3, #2
   11fb0:	f007 0702 	and.w	r7, r7, #2
   11fb4:	433b      	orrs	r3, r7
   11fb6:	f88d 3004 	strb.w	r3, [sp, #4]
        if (desired_settings & BMP3_SEL_I2C_WDT)
   11fba:	04e3      	lsls	r3, r4, #19
   11fbc:	d509      	bpl.n	11fd2 <bmp3_set_sensor_settings+0x242>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
   11fbe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   11fc2:	00b6      	lsls	r6, r6, #2
   11fc4:	f023 0304 	bic.w	r3, r3, #4
   11fc8:	f006 0604 	and.w	r6, r6, #4
   11fcc:	4333      	orrs	r3, r6
   11fce:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
   11fd2:	462b      	mov	r3, r5
   11fd4:	2201      	movs	r2, #1
   11fd6:	a901      	add	r1, sp, #4
   11fd8:	4668      	mov	r0, sp
   11fda:	f00d fb01 	bl	1f5e0 <bmp3_set_regs>
}
   11fde:	b003      	add	sp, #12
   11fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t len = 0;
   11fe2:	4606      	mov	r6, r0
   11fe4:	e742      	b.n	11e6c <bmp3_set_sensor_settings+0xdc>
   11fe6:	bf00      	nop
   11fe8:	00023ef0 	.word	0x00023ef0

00011fec <bmp3_init>:
{
   11fec:	b530      	push	{r4, r5, lr}
   11fee:	b089      	sub	sp, #36	; 0x24
    uint8_t chip_id = 0;
   11ff0:	2300      	movs	r3, #0
{
   11ff2:	4604      	mov	r4, r0
    uint8_t chip_id = 0;
   11ff4:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_ptr_check(dev);
   11ff8:	f00d f9b8 	bl	1f36c <null_ptr_check>
    if (rslt == BMP3_OK)
   11ffc:	4605      	mov	r5, r0
   11ffe:	2800      	cmp	r0, #0
   12000:	f040 80d8 	bne.w	121b4 <bmp3_init+0x1c8>
        if (dev->intf != BMP3_I2C_INTF)
   12004:	7a23      	ldrb	r3, [r4, #8]
   12006:	3b01      	subs	r3, #1
   12008:	bf18      	it	ne
   1200a:	2301      	movne	r3, #1
   1200c:	72a3      	strb	r3, [r4, #10]
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
   1200e:	2201      	movs	r2, #1
   12010:	4623      	mov	r3, r4
   12012:	f10d 0107 	add.w	r1, sp, #7
   12016:	f00d faa2 	bl	1f55e <bmp3_get_regs>
        if (rslt == BMP3_OK)
   1201a:	4605      	mov	r5, r0
   1201c:	2800      	cmp	r0, #0
   1201e:	f040 80c9 	bne.w	121b4 <bmp3_init+0x1c8>
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
   12022:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12026:	2b50      	cmp	r3, #80	; 0x50
   12028:	d002      	beq.n	12030 <bmp3_init+0x44>
   1202a:	2b60      	cmp	r3, #96	; 0x60
   1202c:	f040 80c5 	bne.w	121ba <bmp3_init+0x1ce>
                dev->chip_id = chip_id;
   12030:	7023      	strb	r3, [r4, #0]
                rslt = bmp3_soft_reset(dev);
   12032:	4620      	mov	r0, r4
   12034:	f00d fb3e 	bl	1f6b4 <bmp3_soft_reset>
                if (rslt == BMP3_OK)
   12038:	4605      	mov	r5, r0
   1203a:	2800      	cmp	r0, #0
   1203c:	f040 80ba 	bne.w	121b4 <bmp3_init+0x1c8>
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
   12040:	4601      	mov	r1, r0
   12042:	9002      	str	r0, [sp, #8]
   12044:	2211      	movs	r2, #17
   12046:	a803      	add	r0, sp, #12
   12048:	f00e fa8d 	bl	20566 <memset>
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
   1204c:	4623      	mov	r3, r4
   1204e:	2215      	movs	r2, #21
   12050:	a902      	add	r1, sp, #8
   12052:	2031      	movs	r0, #49	; 0x31
   12054:	f00d fa83 	bl	1f55e <bmp3_get_regs>
   12058:	4605      	mov	r5, r0
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
   1205a:	f8bd 0008 	ldrh.w	r0, [sp, #8]
   1205e:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
   12062:	f7ee f98f 	bl	384 <__aeabi_ui2d>
   12066:	4b56      	ldr	r3, [pc, #344]	; (121c0 <bmp3_init+0x1d4>)
   12068:	2200      	movs	r2, #0
   1206a:	f7ee fa05 	bl	478 <__aeabi_dmul>
   1206e:	e9c4 0106 	strd	r0, r1, [r4, #24]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
   12072:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   12076:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
   1207a:	f7ee f983 	bl	384 <__aeabi_ui2d>
   1207e:	4b51      	ldr	r3, [pc, #324]	; (121c4 <bmp3_init+0x1d8>)
   12080:	2200      	movs	r2, #0
   12082:	f7ee f9f9 	bl	478 <__aeabi_dmul>
   12086:	e9c4 0108 	strd	r0, r1, [r4, #32]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
   1208a:	f99d 000c 	ldrsb.w	r0, [sp, #12]
   1208e:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
   12092:	f7ee f987 	bl	3a4 <__aeabi_i2d>
   12096:	4b4c      	ldr	r3, [pc, #304]	; (121c8 <bmp3_init+0x1dc>)
   12098:	2200      	movs	r2, #0
   1209a:	f7ee f9ed 	bl	478 <__aeabi_dmul>
   1209e:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
   120a2:	f9bd 000d 	ldrsh.w	r0, [sp, #13]
   120a6:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
   120aa:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
   120ae:	f7ee f979 	bl	3a4 <__aeabi_i2d>
   120b2:	4b46      	ldr	r3, [pc, #280]	; (121cc <bmp3_init+0x1e0>)
   120b4:	2200      	movs	r2, #0
   120b6:	f7ee f9df 	bl	478 <__aeabi_dmul>
   120ba:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
   120be:	f9bd 000f 	ldrsh.w	r0, [sp, #15]
   120c2:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
   120c6:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
   120ca:	f7ee f96b 	bl	3a4 <__aeabi_i2d>
   120ce:	4b40      	ldr	r3, [pc, #256]	; (121d0 <bmp3_init+0x1e4>)
   120d0:	2200      	movs	r2, #0
   120d2:	f7ee f9d1 	bl	478 <__aeabi_dmul>
   120d6:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
   120da:	f99d 0011 	ldrsb.w	r0, [sp, #17]
   120de:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
   120e2:	f7ee f95f 	bl	3a4 <__aeabi_i2d>
   120e6:	4b3b      	ldr	r3, [pc, #236]	; (121d4 <bmp3_init+0x1e8>)
   120e8:	2200      	movs	r2, #0
   120ea:	f7ee f9c5 	bl	478 <__aeabi_dmul>
   120ee:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
   120f2:	f99d 0012 	ldrsb.w	r0, [sp, #18]
   120f6:	f884 009b 	strb.w	r0, [r4, #155]	; 0x9b
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
   120fa:	f7ee f953 	bl	3a4 <__aeabi_i2d>
   120fe:	4b36      	ldr	r3, [pc, #216]	; (121d8 <bmp3_init+0x1ec>)
   12100:	2200      	movs	r2, #0
   12102:	f7ee f9b9 	bl	478 <__aeabi_dmul>
   12106:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
   1210a:	f8bd 0013 	ldrh.w	r0, [sp, #19]
   1210e:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
   12112:	f7ee f937 	bl	384 <__aeabi_ui2d>
   12116:	4b31      	ldr	r3, [pc, #196]	; (121dc <bmp3_init+0x1f0>)
   12118:	2200      	movs	r2, #0
   1211a:	f7ee f9ad 	bl	478 <__aeabi_dmul>
   1211e:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
   12122:	f8bd 0015 	ldrh.w	r0, [sp, #21]
   12126:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
   1212a:	f7ee f92b 	bl	384 <__aeabi_ui2d>
   1212e:	4b2c      	ldr	r3, [pc, #176]	; (121e0 <bmp3_init+0x1f4>)
   12130:	2200      	movs	r2, #0
   12132:	f7ee f9a1 	bl	478 <__aeabi_dmul>
   12136:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
   1213a:	f99d 0017 	ldrsb.w	r0, [sp, #23]
   1213e:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
   12142:	f7ee f92f 	bl	3a4 <__aeabi_i2d>
   12146:	4b27      	ldr	r3, [pc, #156]	; (121e4 <bmp3_init+0x1f8>)
   12148:	2200      	movs	r2, #0
   1214a:	f7ee f995 	bl	478 <__aeabi_dmul>
   1214e:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
   12152:	f99d 0018 	ldrsb.w	r0, [sp, #24]
   12156:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
   1215a:	f7ee f923 	bl	3a4 <__aeabi_i2d>
   1215e:	2200      	movs	r2, #0
   12160:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
   12164:	f7ee f988 	bl	478 <__aeabi_dmul>
   12168:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
   1216c:	f9bd 0019 	ldrsh.w	r0, [sp, #25]
   12170:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
   12174:	f7ee f916 	bl	3a4 <__aeabi_i2d>
   12178:	4b13      	ldr	r3, [pc, #76]	; (121c8 <bmp3_init+0x1dc>)
   1217a:	2200      	movs	r2, #0
   1217c:	f7ee f97c 	bl	478 <__aeabi_dmul>
   12180:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
   12184:	f99d 001b 	ldrsb.w	r0, [sp, #27]
   12188:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
   1218c:	f7ee f90a 	bl	3a4 <__aeabi_i2d>
   12190:	4b0d      	ldr	r3, [pc, #52]	; (121c8 <bmp3_init+0x1dc>)
   12192:	2200      	movs	r2, #0
   12194:	f7ee f970 	bl	478 <__aeabi_dmul>
   12198:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
   1219c:	f99d 001c 	ldrsb.w	r0, [sp, #28]
   121a0:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
   121a4:	f7ee f8fe 	bl	3a4 <__aeabi_i2d>
   121a8:	4b0f      	ldr	r3, [pc, #60]	; (121e8 <bmp3_init+0x1fc>)
   121aa:	2200      	movs	r2, #0
   121ac:	f7ee f964 	bl	478 <__aeabi_dmul>
   121b0:	e9c4 0120 	strd	r0, r1, [r4, #128]	; 0x80
}
   121b4:	4628      	mov	r0, r5
   121b6:	b009      	add	sp, #36	; 0x24
   121b8:	bd30      	pop	{r4, r5, pc}
                rslt = BMP3_E_DEV_NOT_FOUND;
   121ba:	f06f 0501 	mvn.w	r5, #1
   121be:	e7f9      	b.n	121b4 <bmp3_init+0x1c8>
   121c0:	40700000 	.word	0x40700000
   121c4:	3e100000 	.word	0x3e100000
   121c8:	3cf00000 	.word	0x3cf00000
   121cc:	3eb00000 	.word	0x3eb00000
   121d0:	3e200000 	.word	0x3e200000
   121d4:	3df00000 	.word	0x3df00000
   121d8:	3da00000 	.word	0x3da00000
   121dc:	40200000 	.word	0x40200000
   121e0:	3f900000 	.word	0x3f900000
   121e4:	3f700000 	.word	0x3f700000
   121e8:	3be00000 	.word	0x3be00000

000121ec <send_data_bmp>:

static void app_us_delay(uint32_t period, void *intf_ptr) {
	return k_busy_wait(period);
}

extern void send_data_bmp(void){
   121ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bmpResult = bmp3_get_sensor_data(sensor_comp, &myData, &bmp388_dev);
   121ee:	4b1f      	ldr	r3, [pc, #124]	; (1226c <send_data_bmp+0x80>)
   121f0:	4d1f      	ldr	r5, [pc, #124]	; (12270 <send_data_bmp+0x84>)
   121f2:	4a20      	ldr	r2, [pc, #128]	; (12274 <send_data_bmp+0x88>)
   121f4:	7818      	ldrb	r0, [r3, #0]
	if(PRINT_SENSOR_DATA){
		printk("BMP: pressure: %f temp: %f\n", myData.pressure,myData.temperature);
	}

	bmp_data.pressure = myData.pressure;
   121f6:	4c20      	ldr	r4, [pc, #128]	; (12278 <send_data_bmp+0x8c>)
    bmpResult = bmp3_get_sensor_data(sensor_comp, &myData, &bmp388_dev);
   121f8:	4629      	mov	r1, r5
   121fa:	f00d fb22 	bl	1f842 <bmp3_get_sensor_data>
   121fe:	4b1f      	ldr	r3, [pc, #124]	; (1227c <send_data_bmp+0x90>)
   12200:	7018      	strb	r0, [r3, #0]
		printk("BMP: pressure: %f temp: %f\n", myData.pressure,myData.temperature);
   12202:	e9d5 2300 	ldrd	r2, r3, [r5]
   12206:	481e      	ldr	r0, [pc, #120]	; (12280 <send_data_bmp+0x94>)
   12208:	e9cd 2300 	strd	r2, r3, [sp]
   1220c:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   12210:	f00d fbef 	bl	1f9f2 <printk>
	bmp_data.pressure = myData.pressure;
   12214:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
   12218:	f7ee fbc8 	bl	9ac <__aeabi_d2f>
   1221c:	6020      	str	r0, [r4, #0]
	bmp_data.temperature = myData.temperature;
   1221e:	e9d5 0100 	ldrd	r0, r1, [r5]
   12222:	f7ee fbc3 	bl	9ac <__aeabi_d2f>
   12226:	6060      	str	r0, [r4, #4]
	return z_impl_k_uptime_ticks();
   12228:	f011 fab4 	bl	23794 <z_impl_k_uptime_ticks>
   1222c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12230:	fba0 0302 	umull	r0, r3, r0, r2
   12234:	fb02 3101 	mla	r1, r2, r1, r3
   12238:	0bc0      	lsrs	r0, r0, #15
	
	float timestamp = k_uptime_get() /1000.0;
   1223a:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   1223e:	0bc9      	lsrs	r1, r1, #15
   12240:	f7ee f8ec 	bl	41c <__aeabi_l2d>
   12244:	4b0f      	ldr	r3, [pc, #60]	; (12284 <send_data_bmp+0x98>)
   12246:	2200      	movs	r2, #0
   12248:	f7ee fa40 	bl	6cc <__aeabi_ddiv>
   1224c:	f7ee fbae 	bl	9ac <__aeabi_d2f>
	bmp_data.timestamp=timestamp;

	bmp_data.array[0] = bmp_data.pressure;
   12250:	6823      	ldr	r3, [r4, #0]
   12252:	60e3      	str	r3, [r4, #12]
	bmp_data.array[1] = bmp_data.temperature;
	bmp_data.array[2] = bmp_data.timestamp;

	send_data(SENSOR_BMP384_ID, &bmp_data.array, 4*3);
   12254:	220c      	movs	r2, #12
	bmp_data.array[1] = bmp_data.temperature;
   12256:	6863      	ldr	r3, [r4, #4]
	bmp_data.timestamp=timestamp;
   12258:	60a0      	str	r0, [r4, #8]
	bmp_data.array[2] = bmp_data.timestamp;
   1225a:	6160      	str	r0, [r4, #20]
	send_data(SENSOR_BMP384_ID, &bmp_data.array, 4*3);
   1225c:	18a1      	adds	r1, r4, r2
   1225e:	2001      	movs	r0, #1
	bmp_data.array[1] = bmp_data.temperature;
   12260:	6123      	str	r3, [r4, #16]
}
   12262:	b003      	add	sp, #12
   12264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	send_data(SENSOR_BMP384_ID, &bmp_data.array, 4*3);
   12268:	f7ff ba9a 	b.w	117a0 <send_data>
   1226c:	20000ac7 	.word	0x20000ac7
   12270:	20001a68 	.word	0x20001a68
   12274:	20001998 	.word	0x20001998
   12278:	20002140 	.word	0x20002140
   1227c:	200035ba 	.word	0x200035ba
   12280:	00024edb 	.word	0x00024edb
   12284:	408f4000 	.word	0x408f4000

00012288 <bmpDataReady>:
static const struct gpio_dt_spec bmpInt = GPIO_DT_SPEC_GET_OR(BMP_INT, gpios,{0});
static struct gpio_callback bmpInt_cb_data;

static void bmpDataReady(const struct device *dev, struct gpio_callback *cb,uint32_t pins)
{
	k_work_submit(&work_bmp);
   12288:	4801      	ldr	r0, [pc, #4]	; (12290 <bmpDataReady+0x8>)
   1228a:	f009 b881 	b.w	1b390 <k_work_submit>
   1228e:	bf00      	nop
   12290:	2000217c 	.word	0x2000217c

00012294 <init_Interrupt_BMP>:
	
	k_sleep(K_MSEC(100));
	sleep_bmp(!bmp_data.config[0]);
}

int8_t init_Interrupt_BMP(){
   12294:	b570      	push	{r4, r5, r6, lr}
	if (DEBUG){printk("BMP: init interrupt\n");};
   12296:	4826      	ldr	r0, [pc, #152]	; (12330 <init_Interrupt_BMP+0x9c>)
   12298:	f00d fbab 	bl	1f9f2 <printk>

    int8_t returnValue;

	k_work_init(&work_bmp, send_data_bmp);
   1229c:	4925      	ldr	r1, [pc, #148]	; (12334 <init_Interrupt_BMP+0xa0>)
   1229e:	4826      	ldr	r0, [pc, #152]	; (12338 <init_Interrupt_BMP+0xa4>)
   122a0:	f011 f89a 	bl	233d8 <k_work_init>
	k_work_init(&config_work_bmp, set_config_bmp);
   122a4:	4925      	ldr	r1, [pc, #148]	; (1233c <init_Interrupt_BMP+0xa8>)
   122a6:	4826      	ldr	r0, [pc, #152]	; (12340 <init_Interrupt_BMP+0xac>)
   122a8:	f011 f896 	bl	233d8 <k_work_init>
   122ac:	4d25      	ldr	r5, [pc, #148]	; (12344 <init_Interrupt_BMP+0xb0>)
   122ae:	4628      	mov	r0, r5
   122b0:	f010 fe51 	bl	22f56 <z_device_is_ready>

    if (!device_is_ready(bmpInt.port)) {
   122b4:	b930      	cbnz	r0, 122c4 <init_Interrupt_BMP+0x30>
		printk("Error: bmp interrupt %s is not ready\n",
   122b6:	6829      	ldr	r1, [r5, #0]
   122b8:	4823      	ldr	r0, [pc, #140]	; (12348 <init_Interrupt_BMP+0xb4>)
   122ba:	f00d fb9a 	bl	1f9f2 <printk>
		       bmpInt.port->name);
		return 1;
   122be:	2401      	movs	r4, #1
	gpio_add_callback(bmpInt.port, &bmpInt_cb_data);

	if(DEBUG){printk("BMP: Set up BMP Interrupt button at %s pin %d\n", bmpInt.port->name, bmpInt.pin);}
	
    return returnValue;
}
   122c0:	4620      	mov	r0, r4
   122c2:	bd70      	pop	{r4, r5, r6, pc}
	struct gpio_driver_data *data =
   122c4:	692a      	ldr	r2, [r5, #16]
	const struct gpio_driver_api *api =
   122c6:	68ae      	ldr	r6, [r5, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   122c8:	6813      	ldr	r3, [r2, #0]
   122ca:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   122ce:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   122d0:	2111      	movs	r1, #17
   122d2:	6833      	ldr	r3, [r6, #0]
   122d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   122d8:	4628      	mov	r0, r5
   122da:	4798      	blx	r3
	returnValue = gpio_pin_configure_dt(&bmpInt, GPIO_INPUT);
   122dc:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   122de:	b134      	cbz	r4, 122ee <init_Interrupt_BMP+0x5a>
		printk("Error %d: failed to configure %s pin %d\n",
   122e0:	682a      	ldr	r2, [r5, #0]
   122e2:	481a      	ldr	r0, [pc, #104]	; (1234c <init_Interrupt_BMP+0xb8>)
   122e4:	2311      	movs	r3, #17
   122e6:	4621      	mov	r1, r4
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   122e8:	f00d fb83 	bl	1f9f2 <printk>
		return returnValue;
   122ec:	e7e8      	b.n	122c0 <init_Interrupt_BMP+0x2c>
	return api->pin_interrupt_configure(port, pin, mode, trig);
   122ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   122f2:	69b4      	ldr	r4, [r6, #24]
   122f4:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
   122f8:	2111      	movs	r1, #17
   122fa:	4628      	mov	r0, r5
   122fc:	47a0      	blx	r4
	returnValue = gpio_pin_interrupt_configure_dt(&bmpInt,GPIO_INT_EDGE_RISING);
   122fe:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   12300:	b124      	cbz	r4, 1230c <init_Interrupt_BMP+0x78>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   12302:	682a      	ldr	r2, [r5, #0]
   12304:	4812      	ldr	r0, [pc, #72]	; (12350 <init_Interrupt_BMP+0xbc>)
   12306:	2311      	movs	r3, #17
   12308:	4621      	mov	r1, r4
   1230a:	e7ed      	b.n	122e8 <init_Interrupt_BMP+0x54>
	callback->handler = handler;
   1230c:	4911      	ldr	r1, [pc, #68]	; (12354 <init_Interrupt_BMP+0xc0>)
   1230e:	4b12      	ldr	r3, [pc, #72]	; (12358 <init_Interrupt_BMP+0xc4>)
   12310:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   12312:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   12316:	608b      	str	r3, [r1, #8]
	if (api->manage_callback == NULL) {
   12318:	69f3      	ldr	r3, [r6, #28]
   1231a:	b113      	cbz	r3, 12322 <init_Interrupt_BMP+0x8e>
	return api->manage_callback(port, callback, true);
   1231c:	2201      	movs	r2, #1
   1231e:	4628      	mov	r0, r5
   12320:	4798      	blx	r3
	if(DEBUG){printk("BMP: Set up BMP Interrupt button at %s pin %d\n", bmpInt.port->name, bmpInt.pin);}
   12322:	6829      	ldr	r1, [r5, #0]
   12324:	480d      	ldr	r0, [pc, #52]	; (1235c <init_Interrupt_BMP+0xc8>)
   12326:	2211      	movs	r2, #17
   12328:	f00d fb63 	bl	1f9f2 <printk>
    return returnValue;
   1232c:	e7c8      	b.n	122c0 <init_Interrupt_BMP+0x2c>
   1232e:	bf00      	nop
   12330:	00024ef7 	.word	0x00024ef7
   12334:	000121ed 	.word	0x000121ed
   12338:	2000217c 	.word	0x2000217c
   1233c:	00012485 	.word	0x00012485
   12340:	2000216c 	.word	0x2000216c
   12344:	00023be4 	.word	0x00023be4
   12348:	00024f0c 	.word	0x00024f0c
   1234c:	00024c6d 	.word	0x00024c6d
   12350:	00024c96 	.word	0x00024c96
   12354:	20002134 	.word	0x20002134
   12358:	00012289 	.word	0x00012289
   1235c:	00024f32 	.word	0x00024f32

00012360 <init_bmp>:

extern bool init_bmp(){
   12360:	b570      	push	{r4, r5, r6, lr}

	if (DEBUG){printk("BMP: init BMP\n");};
   12362:	482d      	ldr	r0, [pc, #180]	; (12418 <init_bmp+0xb8>)
	bmp388_dev.intf = BMP3_I2C_INTF;
   12364:	4c2d      	ldr	r4, [pc, #180]	; (1241c <init_bmp+0xbc>)
	bmp388_dev.intf_ptr = bmp_dev;
	bmp388_dev.intf_rslt = bmpResult;
   12366:	4d2e      	ldr	r5, [pc, #184]	; (12420 <init_bmp+0xc0>)
	if (DEBUG){printk("BMP: init BMP\n");};
   12368:	f00d fb43 	bl	1f9f2 <printk>
	bmp388_dev.intf = BMP3_I2C_INTF;
   1236c:	2301      	movs	r3, #1
   1236e:	7223      	strb	r3, [r4, #8]
	bmp388_dev.intf_ptr = bmp_dev;
   12370:	4b2c      	ldr	r3, [pc, #176]	; (12424 <init_bmp+0xc4>)
   12372:	6063      	str	r3, [r4, #4]
	bmp388_dev.intf_rslt = bmpResult;
   12374:	782b      	ldrb	r3, [r5, #0]
   12376:	7263      	strb	r3, [r4, #9]
	bmp388_dev.dummy_byte = dByte;
   12378:	2300      	movs	r3, #0
   1237a:	72a3      	strb	r3, [r4, #10]
	bmp388_dev.read = app_i2c_read;
   1237c:	4b2a      	ldr	r3, [pc, #168]	; (12428 <init_bmp+0xc8>)
   1237e:	60e3      	str	r3, [r4, #12]
	bmp388_dev.write = app_i2c_write;
   12380:	4b2a      	ldr	r3, [pc, #168]	; (1242c <init_bmp+0xcc>)
   12382:	6123      	str	r3, [r4, #16]
	bmp388_dev.delay_us = app_us_delay;
	bmpResult = bmp3_init(&bmp388_dev);
   12384:	4620      	mov	r0, r4
	bmp388_dev.delay_us = app_us_delay;
   12386:	4b2a      	ldr	r3, [pc, #168]	; (12430 <init_bmp+0xd0>)
   12388:	6163      	str	r3, [r4, #20]
	bmpResult = bmp3_init(&bmp388_dev);
   1238a:	f7ff fe2f 	bl	11fec <bmp3_init>
   1238e:	4601      	mov	r1, r0
   12390:	7028      	strb	r0, [r5, #0]

	if(bmpResult != 0){
   12392:	b110      	cbz	r0, 1239a <init_bmp+0x3a>
		printk("init error: %i \n",bmpResult);
   12394:	4827      	ldr	r0, [pc, #156]	; (12434 <init_bmp+0xd4>)
   12396:	f00d fb2c 	bl	1f9f2 <printk>
	uint16_t settings_sel;
    bmp388_dev.settings.press_en = BMP3_ENABLE;
    bmp388_dev.settings.temp_en = BMP3_ENABLE;
    bmp388_dev.settings.odr_filter.press_os = BMP3_OVERSAMPLING_2X;
    bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
    bmp388_dev.settings.int_settings.drdy_en =BMP3_ENABLE;
   1239a:	2301      	movs	r3, #1
   1239c:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
    bmp388_dev.settings.odr_filter.iir_filter = BMP3_IIR_FILTER_COEFF_3;
    bmp388_dev.settings.int_settings.level = BMP3_INT_PIN_ACTIVE_HIGH;
   123a0:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
    bmp388_dev.settings.press_en = BMP3_ENABLE;
   123a4:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
    bmp388_dev.settings.temp_en = BMP3_ENABLE;
   123a8:	f240 1301 	movw	r3, #257	; 0x101
   123ac:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
    bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
   123b0:	f44f 7300 	mov.w	r3, #512	; 0x200
    bmp388_dev.settings.odr_filter.odr = BMP3_ODR_1_5_HZ;
	settings_sel = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR |BMP3_SEL_DRDY_EN| BMP3_SEL_LEVEL |BMP3_SEL_IIR_FILTER;
	bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev); 
   123b4:	4919      	ldr	r1, [pc, #100]	; (1241c <init_bmp+0xbc>)
    bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
   123b6:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
	bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev); 
   123ba:	f240 20fe 	movw	r0, #766	; 0x2fe
    bmp388_dev.settings.odr_filter.odr = BMP3_ODR_1_5_HZ;
   123be:	2307      	movs	r3, #7
   123c0:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
	bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev); 
   123c4:	f7ff fce4 	bl	11d90 <bmp3_set_sensor_settings>
   123c8:	4601      	mov	r1, r0
   123ca:	7028      	strb	r0, [r5, #0]

	if(bmpResult != 0){
   123cc:	b9a0      	cbnz	r0, 123f8 <init_bmp+0x98>
		printk("BMP: set settings error: %i \n",bmpResult);
	}          
	if (bmpResult == BMP3_SENSOR_OK){
        bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL;
        bmpResult = bmp3_set_op_mode(&bmp388_dev);
   123ce:	4813      	ldr	r0, [pc, #76]	; (1241c <init_bmp+0xbc>)
        bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL;
   123d0:	2603      	movs	r6, #3
   123d2:	f884 60b0 	strb.w	r6, [r4, #176]	; 0xb0
        bmpResult = bmp3_set_op_mode(&bmp388_dev);
   123d6:	f00d f9bf 	bl	1f758 <bmp3_set_op_mode>
   123da:	7028      	strb	r0, [r5, #0]
        if (bmpResult == BMP3_SENSOR_OK)
   123dc:	b1a0      	cbz	r0, 12408 <init_bmp+0xa8>
	k_work_submit(&config_work_bmp);
};

extern uint8_t sleep_bmp(bool SLEEP){
	if(SLEEP){
		if (DEBUG){printk("BMP: sleeping\n");};
   123de:	4816      	ldr	r0, [pc, #88]	; (12438 <init_bmp+0xd8>)
   123e0:	f00d fb07 	bl	1f9f2 <printk>
		bmp388_dev.settings.op_mode = BMP3_MODE_SLEEP;
   123e4:	2300      	movs	r3, #0
		return bmp3_set_op_mode(&bmp388_dev);
   123e6:	480d      	ldr	r0, [pc, #52]	; (1241c <init_bmp+0xbc>)
		bmp388_dev.settings.op_mode = BMP3_MODE_SLEEP;
   123e8:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
		return bmp3_set_op_mode(&bmp388_dev);
   123ec:	f00d f9b4 	bl	1f758 <bmp3_set_op_mode>
	bmpResult = sleep_bmp(true);
   123f0:	7028      	strb	r0, [r5, #0]
	init_Interrupt_BMP();
   123f2:	f7ff ff4f 	bl	12294 <init_Interrupt_BMP>
}
   123f6:	bd70      	pop	{r4, r5, r6, pc}
		printk("BMP: set settings error: %i \n",bmpResult);
   123f8:	4810      	ldr	r0, [pc, #64]	; (1243c <init_bmp+0xdc>)
   123fa:	f00d fafa 	bl	1f9f2 <printk>
	if (bmpResult == BMP3_SENSOR_OK){
   123fe:	f995 3000 	ldrsb.w	r3, [r5]
   12402:	2b00      	cmp	r3, #0
   12404:	d1eb      	bne.n	123de <init_bmp+0x7e>
   12406:	e7e2      	b.n	123ce <init_bmp+0x6e>
            bmp388_dev.delay_us(40000, bmp388_dev.intf_ptr);
   12408:	6963      	ldr	r3, [r4, #20]
   1240a:	6861      	ldr	r1, [r4, #4]
   1240c:	f649 4040 	movw	r0, #40000	; 0x9c40
   12410:	4798      	blx	r3
            sensor_comp = BMP3_PRESS | BMP3_TEMP;
   12412:	4b0b      	ldr	r3, [pc, #44]	; (12440 <init_bmp+0xe0>)
   12414:	701e      	strb	r6, [r3, #0]
   12416:	e7e2      	b.n	123de <init_bmp+0x7e>
   12418:	00024f61 	.word	0x00024f61
   1241c:	20001998 	.word	0x20001998
   12420:	200035ba 	.word	0x200035ba
   12424:	00023c74 	.word	0x00023c74
   12428:	0001f905 	.word	0x0001f905
   1242c:	0001f8c3 	.word	0x0001f8c3
   12430:	0001f8bf 	.word	0x0001f8bf
   12434:	00024f70 	.word	0x00024f70
   12438:	00024f9f 	.word	0x00024f9f
   1243c:	00024f81 	.word	0x00024f81
   12440:	20000ac7 	.word	0x20000ac7

00012444 <submit_config_bmp>:
	k_work_submit(&config_work_bmp);
   12444:	4801      	ldr	r0, [pc, #4]	; (1244c <submit_config_bmp+0x8>)
   12446:	f008 bfa3 	b.w	1b390 <k_work_submit>
   1244a:	bf00      	nop
   1244c:	2000216c 	.word	0x2000216c

00012450 <sleep_bmp>:
extern uint8_t sleep_bmp(bool SLEEP){
   12450:	b510      	push	{r4, lr}
   12452:	4c09      	ldr	r4, [pc, #36]	; (12478 <sleep_bmp+0x28>)
	if(SLEEP){
   12454:	b150      	cbz	r0, 1246c <sleep_bmp+0x1c>
		if (DEBUG){printk("BMP: sleeping\n");};
   12456:	4809      	ldr	r0, [pc, #36]	; (1247c <sleep_bmp+0x2c>)
   12458:	f00d facb 	bl	1f9f2 <printk>
		bmp388_dev.settings.op_mode = BMP3_MODE_SLEEP;
   1245c:	2300      	movs	r3, #0
	}else{
		if (DEBUG){printk("BMP: awaking\n");};
		bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL;
		return bmp3_set_op_mode(&bmp388_dev);
   1245e:	4620      	mov	r0, r4
		bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL;
   12460:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
		return bmp3_set_op_mode(&bmp388_dev);
   12464:	f00d f978 	bl	1f758 <bmp3_set_op_mode>
   12468:	b2c0      	uxtb	r0, r0
	}
};
   1246a:	bd10      	pop	{r4, pc}
		if (DEBUG){printk("BMP: awaking\n");};
   1246c:	4804      	ldr	r0, [pc, #16]	; (12480 <sleep_bmp+0x30>)
   1246e:	f00d fac0 	bl	1f9f2 <printk>
		bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL;
   12472:	2303      	movs	r3, #3
   12474:	e7f3      	b.n	1245e <sleep_bmp+0xe>
   12476:	bf00      	nop
   12478:	20001998 	.word	0x20001998
   1247c:	00024f9f 	.word	0x00024f9f
   12480:	00024fae 	.word	0x00024fae

00012484 <set_config_bmp>:
void set_config_bmp(){
   12484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t oversampling = bmp_data.config[1];
   12486:	4d1f      	ldr	r5, [pc, #124]	; (12504 <set_config_bmp+0x80>)
    bmp388_dev.settings.press_en = BMP3_ENABLE;
   12488:	4c1f      	ldr	r4, [pc, #124]	; (12508 <set_config_bmp+0x84>)
	if (DEBUG){printk("BMP: setting config BMP\n");};
   1248a:	4820      	ldr	r0, [pc, #128]	; (1250c <set_config_bmp+0x88>)
    bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev);           
   1248c:	4f20      	ldr	r7, [pc, #128]	; (12510 <set_config_bmp+0x8c>)
	if (DEBUG){printk("BMP: setting config BMP\n");};
   1248e:	f00d fab0 	bl	1f9f2 <printk>
	uint8_t oversampling = bmp_data.config[1];
   12492:	7e68      	ldrb	r0, [r5, #25]
	uint8_t filter = bmp_data.config[2];
   12494:	7ea9      	ldrb	r1, [r5, #26]
    bmp388_dev.settings.odr_filter.press_os = oversampling;
   12496:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
    bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
   1249a:	2000      	movs	r0, #0
    bmp388_dev.settings.press_en = BMP3_ENABLE;
   1249c:	2301      	movs	r3, #1
	uint8_t rate = bmp_data.config[3];
   1249e:	7eea      	ldrb	r2, [r5, #27]
    bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
   124a0:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
    bmp388_dev.settings.odr_filter.iir_filter = filter;
   124a4:	f884 10b5 	strb.w	r1, [r4, #181]	; 0xb5
    bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev);           
   124a8:	20f0      	movs	r0, #240	; 0xf0
   124aa:	4621      	mov	r1, r4
    bmp388_dev.settings.press_en = BMP3_ENABLE;
   124ac:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
    bmp388_dev.settings.temp_en = BMP3_ENABLE;
   124b0:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
    bmp388_dev.settings.int_settings.drdy_en =BMP3_ENABLE;
   124b4:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
    bmp388_dev.settings.odr_filter.odr =rate;//BMP3_ODR_25_HZ;
   124b8:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
    bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev);           
   124bc:	f7ff fc68 	bl	11d90 <bmp3_set_sensor_settings>
   124c0:	7038      	strb	r0, [r7, #0]
     if (bmpResult == BMP3_SENSOR_OK){
   124c2:	b988      	cbnz	r0, 124e8 <set_config_bmp+0x64>
        bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL; 
   124c4:	2603      	movs	r6, #3
        bmpResult = bmp3_set_op_mode(&bmp388_dev);
   124c6:	4620      	mov	r0, r4
        bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL; 
   124c8:	f884 60b0 	strb.w	r6, [r4, #176]	; 0xb0
        bmpResult = bmp3_set_op_mode(&bmp388_dev);
   124cc:	f00d f944 	bl	1f758 <bmp3_set_op_mode>
   124d0:	7038      	strb	r0, [r7, #0]
        if (bmpResult == BMP3_SENSOR_OK)
   124d2:	b948      	cbnz	r0, 124e8 <set_config_bmp+0x64>
			if (DEBUG){printk("BMP mode set successfully\n");}
   124d4:	480f      	ldr	r0, [pc, #60]	; (12514 <set_config_bmp+0x90>)
   124d6:	f00d fa8c 	bl	1f9f2 <printk>
            bmp388_dev.delay_us(40000, bmp388_dev.intf_ptr);
   124da:	6963      	ldr	r3, [r4, #20]
   124dc:	6861      	ldr	r1, [r4, #4]
   124de:	f649 4040 	movw	r0, #40000	; 0x9c40
   124e2:	4798      	blx	r3
            sensor_comp = BMP3_PRESS | BMP3_TEMP;
   124e4:	4b0c      	ldr	r3, [pc, #48]	; (12518 <set_config_bmp+0x94>)
   124e6:	701e      	strb	r6, [r3, #0]
	return z_impl_k_sleep(timeout);
   124e8:	f640 40cd 	movw	r0, #3277	; 0xccd
   124ec:	2100      	movs	r1, #0
   124ee:	f009 fac9 	bl	1ba84 <z_impl_k_sleep>
	sleep_bmp(!bmp_data.config[0]);
   124f2:	7e28      	ldrb	r0, [r5, #24]
   124f4:	fab0 f080 	clz	r0, r0
}
   124f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	sleep_bmp(!bmp_data.config[0]);
   124fc:	0940      	lsrs	r0, r0, #5
   124fe:	f7ff bfa7 	b.w	12450 <sleep_bmp>
   12502:	bf00      	nop
   12504:	20002140 	.word	0x20002140
   12508:	20001998 	.word	0x20001998
   1250c:	00024fbc 	.word	0x00024fbc
   12510:	200035ba 	.word	0x200035ba
   12514:	00024fd5 	.word	0x00024fd5
   12518:	20000ac7 	.word	0x20000ac7

0001251c <main>:
//#include "waermelehre/ds18b20_sensor.h"

#define SLEEP_TIME_MS	1

void main(void)
{
   1251c:	b570      	push	{r4, r5, r6, lr}
	printk("Hello World %s\n", CONFIG_BOARD);
   1251e:	4912      	ldr	r1, [pc, #72]	; (12568 <main+0x4c>)
   12520:	4812      	ldr	r0, [pc, #72]	; (1256c <main+0x50>)
   12522:	f00d fa66 	bl	1f9f2 <printk>
			    uint32_t delay_on, uint32_t delay_off);

static inline int z_impl_led_blink(const struct device *dev, uint32_t led,
				   uint32_t delay_on, uint32_t delay_off)
{
	const struct led_driver_api *api =
   12526:	4c12      	ldr	r4, [pc, #72]	; (12570 <main+0x54>)
		(const struct led_driver_api *)dev->api;

	if (api->blink == NULL) {
   12528:	68a3      	ldr	r3, [r4, #8]
   1252a:	689d      	ldr	r5, [r3, #8]
   1252c:	b12d      	cbz	r5, 1253a <main+0x1e>
		return -ENOSYS;
	}
	return api->blink(dev, led, delay_on, delay_off);
   1252e:	f44f 7396 	mov.w	r3, #300	; 0x12c
   12532:	461a      	mov	r2, r3
   12534:	2100      	movs	r1, #0
   12536:	4620      	mov	r0, r4
   12538:	47a8      	blx	r5
	led_blink(red_led_dev,0,LED_ON_TIME_MS,LED_SLEEP_TIME_MS); 	// blink led until init done (led_off at the end)

	init_ble();
   1253a:	f7ff f907 	bl	1174c <init_ble>

	init_shtc();
   1253e:	f7fe fe85 	bl	1124c <init_shtc>
	init_mpr();
   12542:	f7fe fde9 	bl	11118 <init_mpr>
	init_bmp();
   12546:	f7ff ff0b 	bl	12360 <init_bmp>
	init_mlx();
   1254a:	f7ff f9f9 	bl	11940 <init_mlx>
	init_icm(AFS_2G, GFS_15_125DPS, AODR_25Hz, GODR_25Hz);
   1254e:	230a      	movs	r3, #10
   12550:	461a      	mov	r2, r3
   12552:	2107      	movs	r1, #7
   12554:	2003      	movs	r0, #3
   12556:	f7fe ff4b 	bl	113f0 <init_icm>
static inline int z_impl_led_off(const struct device *dev, uint32_t led)
{
	const struct led_driver_api *api =
		(const struct led_driver_api *)dev->api;

	return api->off(dev, led);
   1255a:	68a3      	ldr	r3, [r4, #8]
   1255c:	4804      	ldr	r0, [pc, #16]	; (12570 <main+0x54>)
   1255e:	685b      	ldr	r3, [r3, #4]
		iTemp = read_temperature();

		printk("The temperature is now : \n%d from method 1\n%d from method 2\n%d from method 3\n\n", (int)fTemp1, (int)fTemp2, iTemp);
	}
	*/
}
   12560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12564:	2100      	movs	r1, #0
   12566:	4718      	bx	r3
   12568:	00024ff0 	.word	0x00024ff0
   1256c:	00025002 	.word	0x00025002
   12570:	00023c8c 	.word	0x00023c8c

00012574 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   12574:	680b      	ldr	r3, [r1, #0]
   12576:	3301      	adds	r3, #1
   12578:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   1257a:	4b01      	ldr	r3, [pc, #4]	; (12580 <char_out+0xc>)
   1257c:	681b      	ldr	r3, [r3, #0]
   1257e:	4718      	bx	r3
   12580:	20000684 	.word	0x20000684

00012584 <__printk_hook_install>:
	_char_out = fn;
   12584:	4b01      	ldr	r3, [pc, #4]	; (1258c <__printk_hook_install+0x8>)
   12586:	6018      	str	r0, [r3, #0]
}
   12588:	4770      	bx	lr
   1258a:	bf00      	nop
   1258c:	20000684 	.word	0x20000684

00012590 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   12590:	b507      	push	{r0, r1, r2, lr}
   12592:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
   12594:	2100      	movs	r1, #0
{
   12596:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
   12598:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
   1259a:	4803      	ldr	r0, [pc, #12]	; (125a8 <vprintk+0x18>)
   1259c:	a901      	add	r1, sp, #4
   1259e:	f000 f8e5 	bl	1276c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   125a2:	b003      	add	sp, #12
   125a4:	f85d fb04 	ldr.w	pc, [sp], #4
   125a8:	00012575 	.word	0x00012575

000125ac <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   125ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   125b0:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   125b4:	f019 0808 	ands.w	r8, r9, #8
{
   125b8:	4604      	mov	r4, r0
   125ba:	4693      	mov	fp, r2
	if (processing) {
   125bc:	d00d      	beq.n	125da <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   125be:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   125c0:	bf0c      	ite	eq
   125c2:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   125c6:	f049 0920 	orrne.w	r9, r9, #32
   125ca:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   125ce:	f38b 8811 	msr	BASEPRI, fp
   125d2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   125d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   125da:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   125de:	2902      	cmp	r1, #2
   125e0:	d107      	bne.n	125f2 <process_event+0x46>
			evt = process_recheck(mgr);
   125e2:	4620      	mov	r0, r4
   125e4:	f00d fa12 	bl	1fa0c <process_recheck>
		if (evt == EVT_NOP) {
   125e8:	2800      	cmp	r0, #0
   125ea:	d0f0      	beq.n	125ce <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   125ec:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   125ee:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
   125f0:	d14e      	bne.n	12690 <process_event+0xe4>
			res = mgr->last_res;
   125f2:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   125f4:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   125f6:	2f00      	cmp	r7, #0
   125f8:	da15      	bge.n	12626 <process_event+0x7a>
		*clients = mgr->clients;
   125fa:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   125fc:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   12600:	e9c4 8800 	strd	r8, r8, [r4]
   12604:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   12608:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   1260a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1260c:	8b21      	ldrh	r1, [r4, #24]
   1260e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12612:	45ca      	cmp	sl, r9
   12614:	d002      	beq.n	1261c <process_event+0x70>
		if (do_monitors
   12616:	68a3      	ldr	r3, [r4, #8]
   12618:	2b00      	cmp	r3, #0
   1261a:	d15a      	bne.n	126d2 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
   1261c:	b90d      	cbnz	r5, 12622 <process_event+0x76>
		    || (transit != NULL)) {
   1261e:	2e00      	cmp	r6, #0
   12620:	d071      	beq.n	12706 <process_event+0x15a>
   12622:	2300      	movs	r3, #0
   12624:	e056      	b.n	126d4 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12626:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1262a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1262c:	2a01      	cmp	r2, #1
   1262e:	d81e      	bhi.n	1266e <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12630:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   12634:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   12636:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12638:	b289      	uxth	r1, r1
   1263a:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   1263e:	d10a      	bne.n	12656 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12640:	b13d      	cbz	r5, 12652 <process_event+0xa6>
   12642:	8b63      	ldrh	r3, [r4, #26]
   12644:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   12646:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
   12648:	3301      	adds	r3, #1
   1264a:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1264c:	2a00      	cmp	r2, #0
   1264e:	d1fa      	bne.n	12646 <process_event+0x9a>
   12650:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12652:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   12656:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   12658:	4620      	mov	r0, r4
   1265a:	f00d f9d7 	bl	1fa0c <process_recheck>
   1265e:	4606      	mov	r6, r0
   12660:	2800      	cmp	r0, #0
   12662:	d0d3      	beq.n	1260c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12664:	8b23      	ldrh	r3, [r4, #24]
   12666:	f043 0320 	orr.w	r3, r3, #32
   1266a:	8323      	strh	r3, [r4, #24]
   1266c:	e7cd      	b.n	1260a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1266e:	2b04      	cmp	r3, #4
   12670:	d10c      	bne.n	1268c <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12672:	f021 0107 	bic.w	r1, r1, #7
   12676:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   12678:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   1267a:	4620      	mov	r0, r4
   1267c:	f00d f9c6 	bl	1fa0c <process_recheck>
   12680:	4605      	mov	r5, r0
   12682:	2800      	cmp	r0, #0
   12684:	d0c1      	beq.n	1260a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12686:	f041 0120 	orr.w	r1, r1, #32
   1268a:	8321      	strh	r1, [r4, #24]
   1268c:	2500      	movs	r5, #0
   1268e:	e7bc      	b.n	1260a <process_event+0x5e>
		} else if (evt == EVT_START) {
   12690:	2803      	cmp	r0, #3
   12692:	d109      	bne.n	126a8 <process_event+0xfc>
			transit = mgr->transitions->start;
   12694:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12696:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   1269a:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1269c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   126a0:	8323      	strh	r3, [r4, #24]
}
   126a2:	2500      	movs	r5, #0
		res = 0;
   126a4:	462f      	mov	r7, r5
   126a6:	e7b1      	b.n	1260c <process_event+0x60>
		} else if (evt == EVT_STOP) {
   126a8:	2804      	cmp	r0, #4
   126aa:	d106      	bne.n	126ba <process_event+0x10e>
			transit = mgr->transitions->stop;
   126ac:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   126ae:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   126b2:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   126b4:	f043 0304 	orr.w	r3, r3, #4
   126b8:	e7f2      	b.n	126a0 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
   126ba:	2805      	cmp	r0, #5
   126bc:	d106      	bne.n	126cc <process_event+0x120>
			transit = mgr->transitions->reset;
   126be:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   126c0:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   126c4:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   126c6:	f043 0305 	orr.w	r3, r3, #5
   126ca:	e7e9      	b.n	126a0 <process_event+0xf4>
   126cc:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   126ce:	462e      	mov	r6, r5
   126d0:	e7e8      	b.n	126a4 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
   126d2:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   126d4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   126d8:	8321      	strh	r1, [r4, #24]
   126da:	f38b 8811 	msr	BASEPRI, fp
   126de:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   126e2:	b9fb      	cbnz	r3, 12724 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
   126e4:	bb85      	cbnz	r5, 12748 <process_event+0x19c>
			if (transit != NULL) {
   126e6:	b116      	cbz	r6, 126ee <process_event+0x142>
				transit(mgr, transition_complete);
   126e8:	491f      	ldr	r1, [pc, #124]	; (12768 <process_event+0x1bc>)
   126ea:	4620      	mov	r0, r4
   126ec:	47b0      	blx	r6
	__asm__ volatile(
   126ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   126f2:	f3ef 8b11 	mrs	fp, BASEPRI
   126f6:	f383 8812 	msr	BASEPRI_MAX, r3
   126fa:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   126fe:	8b23      	ldrh	r3, [r4, #24]
   12700:	f023 0308 	bic.w	r3, r3, #8
   12704:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   12706:	8b23      	ldrh	r3, [r4, #24]
   12708:	06da      	lsls	r2, r3, #27
   1270a:	d525      	bpl.n	12758 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1270c:	f023 0310 	bic.w	r3, r3, #16
   12710:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   12712:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   12714:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   12718:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   1271c:	2900      	cmp	r1, #0
   1271e:	f47f af5e 	bne.w	125de <process_event+0x32>
out:
   12722:	e754      	b.n	125ce <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   12724:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12726:	2900      	cmp	r1, #0
   12728:	d0dc      	beq.n	126e4 <process_event+0x138>
	return node->next;
   1272a:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
   1272e:	f8d1 b004 	ldr.w	fp, [r1, #4]
   12732:	463b      	mov	r3, r7
   12734:	4652      	mov	r2, sl
   12736:	4620      	mov	r0, r4
   12738:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1273a:	f1b9 0f00 	cmp.w	r9, #0
   1273e:	d0d1      	beq.n	126e4 <process_event+0x138>
   12740:	4649      	mov	r1, r9
   12742:	f8d9 9000 	ldr.w	r9, [r9]
   12746:	e7f2      	b.n	1272e <process_event+0x182>
   12748:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   1274a:	463b      	mov	r3, r7
   1274c:	4652      	mov	r2, sl
   1274e:	4620      	mov	r0, r4
   12750:	682d      	ldr	r5, [r5, #0]
   12752:	f00d f977 	bl	1fa44 <notify_one>
   12756:	e7c5      	b.n	126e4 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   12758:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1275c:	bf1e      	ittt	ne
   1275e:	f023 0320 	bicne.w	r3, r3, #32
   12762:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   12764:	2102      	movne	r1, #2
   12766:	e7d5      	b.n	12714 <process_event+0x168>
   12768:	0001fa71 	.word	0x0001fa71

0001276c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   1276c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12770:	b091      	sub	sp, #68	; 0x44
   12772:	468b      	mov	fp, r1
   12774:	9002      	str	r0, [sp, #8]
   12776:	4692      	mov	sl, r2
   12778:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1277a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1277c:	f89a 0000 	ldrb.w	r0, [sl]
   12780:	b908      	cbnz	r0, 12786 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   12782:	4628      	mov	r0, r5
   12784:	e35f      	b.n	12e46 <cbvprintf+0x6da>
		if (*fp != '%') {
   12786:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   12788:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
   1278c:	d007      	beq.n	1279e <cbvprintf+0x32>
			OUTC('%');
   1278e:	9b02      	ldr	r3, [sp, #8]
   12790:	4659      	mov	r1, fp
   12792:	4798      	blx	r3
   12794:	2800      	cmp	r0, #0
   12796:	f2c0 8356 	blt.w	12e46 <cbvprintf+0x6da>
   1279a:	3501      	adds	r5, #1
			break;
   1279c:	e212      	b.n	12bc4 <cbvprintf+0x458>
		} state = {
   1279e:	2218      	movs	r2, #24
   127a0:	2100      	movs	r1, #0
   127a2:	a80a      	add	r0, sp, #40	; 0x28
   127a4:	f00d fedf 	bl	20566 <memset>
	if (*sp == '%') {
   127a8:	f89a 3001 	ldrb.w	r3, [sl, #1]
   127ac:	2b25      	cmp	r3, #37	; 0x25
   127ae:	d078      	beq.n	128a2 <cbvprintf+0x136>
   127b0:	2200      	movs	r2, #0
   127b2:	4610      	mov	r0, r2
   127b4:	4696      	mov	lr, r2
   127b6:	4694      	mov	ip, r2
   127b8:	4616      	mov	r6, r2
   127ba:	4639      	mov	r1, r7
		switch (*sp) {
   127bc:	f817 3b01 	ldrb.w	r3, [r7], #1
   127c0:	2b2b      	cmp	r3, #43	; 0x2b
   127c2:	f000 809d 	beq.w	12900 <cbvprintf+0x194>
   127c6:	f200 8094 	bhi.w	128f2 <cbvprintf+0x186>
   127ca:	2b20      	cmp	r3, #32
   127cc:	f000 809b 	beq.w	12906 <cbvprintf+0x19a>
   127d0:	2b23      	cmp	r3, #35	; 0x23
   127d2:	f000 809b 	beq.w	1290c <cbvprintf+0x1a0>
   127d6:	b12e      	cbz	r6, 127e4 <cbvprintf+0x78>
   127d8:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   127dc:	f046 0604 	orr.w	r6, r6, #4
   127e0:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   127e4:	f1bc 0f00 	cmp.w	ip, #0
   127e8:	d005      	beq.n	127f6 <cbvprintf+0x8a>
   127ea:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   127ee:	f046 0608 	orr.w	r6, r6, #8
   127f2:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   127f6:	f1be 0f00 	cmp.w	lr, #0
   127fa:	d005      	beq.n	12808 <cbvprintf+0x9c>
   127fc:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   12800:	f046 0610 	orr.w	r6, r6, #16
   12804:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   12808:	b128      	cbz	r0, 12816 <cbvprintf+0xaa>
   1280a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   1280e:	f040 0020 	orr.w	r0, r0, #32
   12812:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   12816:	b12a      	cbz	r2, 12824 <cbvprintf+0xb8>
   12818:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   1281c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   12820:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   12824:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12828:	f002 0044 	and.w	r0, r2, #68	; 0x44
   1282c:	2844      	cmp	r0, #68	; 0x44
   1282e:	d103      	bne.n	12838 <cbvprintf+0xcc>
		conv->flag_zero = false;
   12830:	f36f 1286 	bfc	r2, #6, #1
   12834:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   12838:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   1283c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   1283e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   12842:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   12846:	d17b      	bne.n	12940 <cbvprintf+0x1d4>
		conv->width_star = true;
   12848:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1284c:	f042 0201 	orr.w	r2, r2, #1
			++sp;
   12850:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   12852:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   12856:	781a      	ldrb	r2, [r3, #0]
   12858:	2a2e      	cmp	r2, #46	; 0x2e
   1285a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1285e:	bf0c      	ite	eq
   12860:	2101      	moveq	r1, #1
   12862:	2100      	movne	r1, #0
   12864:	f361 0241 	bfi	r2, r1, #1, #1
   12868:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   1286c:	d174      	bne.n	12958 <cbvprintf+0x1ec>
	if (*sp == '*') {
   1286e:	785a      	ldrb	r2, [r3, #1]
   12870:	2a2a      	cmp	r2, #42	; 0x2a
   12872:	d06a      	beq.n	1294a <cbvprintf+0x1de>
	++sp;
   12874:	3301      	adds	r3, #1
	size_t val = 0;
   12876:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   12878:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1287a:	4618      	mov	r0, r3
   1287c:	f810 2b01 	ldrb.w	r2, [r0], #1
   12880:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   12884:	2f09      	cmp	r7, #9
   12886:	f240 808e 	bls.w	129a6 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   1288a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   1288e:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   12890:	f3c2 0040 	ubfx	r0, r2, #1, #1
   12894:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   12898:	f361 0241 	bfi	r2, r1, #1, #1
   1289c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   128a0:	e05a      	b.n	12958 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
   128a2:	f10a 0702 	add.w	r7, sl, #2
   128a6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   128aa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   128ae:	07d9      	lsls	r1, r3, #31
   128b0:	f140 8149 	bpl.w	12b46 <cbvprintf+0x3da>
			width = va_arg(ap, int);
   128b4:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   128b8:	f1b9 0f00 	cmp.w	r9, #0
   128bc:	da07      	bge.n	128ce <cbvprintf+0x162>
				conv->flag_dash = true;
   128be:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   128c2:	f042 0204 	orr.w	r2, r2, #4
   128c6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
   128ca:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
   128ce:	075a      	lsls	r2, r3, #29
   128d0:	f140 8142 	bpl.w	12b58 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
   128d4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   128d8:	f1b8 0f00 	cmp.w	r8, #0
   128dc:	f280 8141 	bge.w	12b62 <cbvprintf+0x3f6>
				conv->prec_present = false;
   128e0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   128e4:	f36f 0341 	bfc	r3, #1, #1
   128e8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   128ec:	f04f 38ff 	mov.w	r8, #4294967295
   128f0:	e137      	b.n	12b62 <cbvprintf+0x3f6>
		switch (*sp) {
   128f2:	2b2d      	cmp	r3, #45	; 0x2d
   128f4:	d00c      	beq.n	12910 <cbvprintf+0x1a4>
   128f6:	2b30      	cmp	r3, #48	; 0x30
   128f8:	f47f af6d 	bne.w	127d6 <cbvprintf+0x6a>
			conv->flag_zero = true;
   128fc:	2201      	movs	r2, #1
	} while (loop);
   128fe:	e75c      	b.n	127ba <cbvprintf+0x4e>
			conv->flag_plus = true;
   12900:	f04f 0c01 	mov.w	ip, #1
   12904:	e759      	b.n	127ba <cbvprintf+0x4e>
			conv->flag_space = true;
   12906:	f04f 0e01 	mov.w	lr, #1
   1290a:	e756      	b.n	127ba <cbvprintf+0x4e>
			conv->flag_hash = true;
   1290c:	2001      	movs	r0, #1
   1290e:	e754      	b.n	127ba <cbvprintf+0x4e>
		switch (*sp) {
   12910:	2601      	movs	r6, #1
   12912:	e752      	b.n	127ba <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
   12914:	fb0c 0202 	mla	r2, ip, r2, r0
   12918:	3a30      	subs	r2, #48	; 0x30
   1291a:	4633      	mov	r3, r6
   1291c:	461e      	mov	r6, r3
   1291e:	f816 0b01 	ldrb.w	r0, [r6], #1
   12922:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   12926:	2f09      	cmp	r7, #9
   12928:	d9f4      	bls.n	12914 <cbvprintf+0x1a8>
	if (sp != wp) {
   1292a:	4299      	cmp	r1, r3
   1292c:	d093      	beq.n	12856 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   1292e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   12932:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   12934:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   12936:	f362 0141 	bfi	r1, r2, #1, #1
   1293a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   1293e:	e78a      	b.n	12856 <cbvprintf+0xea>
   12940:	460b      	mov	r3, r1
	size_t val = 0;
   12942:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   12944:	f04f 0c0a 	mov.w	ip, #10
   12948:	e7e8      	b.n	1291c <cbvprintf+0x1b0>
		conv->prec_star = true;
   1294a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1294e:	f042 0204 	orr.w	r2, r2, #4
   12952:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   12956:	3302      	adds	r3, #2
	switch (*sp) {
   12958:	461f      	mov	r7, r3
   1295a:	f817 2b01 	ldrb.w	r2, [r7], #1
   1295e:	2a6c      	cmp	r2, #108	; 0x6c
   12960:	d041      	beq.n	129e6 <cbvprintf+0x27a>
   12962:	d825      	bhi.n	129b0 <cbvprintf+0x244>
   12964:	2a68      	cmp	r2, #104	; 0x68
   12966:	d02b      	beq.n	129c0 <cbvprintf+0x254>
   12968:	2a6a      	cmp	r2, #106	; 0x6a
   1296a:	d046      	beq.n	129fa <cbvprintf+0x28e>
   1296c:	2a4c      	cmp	r2, #76	; 0x4c
   1296e:	d04c      	beq.n	12a0a <cbvprintf+0x29e>
   12970:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   12972:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   12976:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
   1297a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   1297e:	2a78      	cmp	r2, #120	; 0x78
   12980:	f200 80d9 	bhi.w	12b36 <cbvprintf+0x3ca>
   12984:	2a57      	cmp	r2, #87	; 0x57
   12986:	d84d      	bhi.n	12a24 <cbvprintf+0x2b8>
   12988:	2a41      	cmp	r2, #65	; 0x41
   1298a:	d003      	beq.n	12994 <cbvprintf+0x228>
   1298c:	3a45      	subs	r2, #69	; 0x45
   1298e:	2a02      	cmp	r2, #2
   12990:	f200 80d1 	bhi.w	12b36 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   12994:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12998:	2204      	movs	r2, #4
   1299a:	f362 0302 	bfi	r3, r2, #0, #3
   1299e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   129a2:	2301      	movs	r3, #1
			break;
   129a4:	e09e      	b.n	12ae4 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
   129a6:	fb06 2101 	mla	r1, r6, r1, r2
   129aa:	3930      	subs	r1, #48	; 0x30
   129ac:	4603      	mov	r3, r0
   129ae:	e764      	b.n	1287a <cbvprintf+0x10e>
	switch (*sp) {
   129b0:	2a74      	cmp	r2, #116	; 0x74
   129b2:	d026      	beq.n	12a02 <cbvprintf+0x296>
   129b4:	2a7a      	cmp	r2, #122	; 0x7a
   129b6:	d1db      	bne.n	12970 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
   129b8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   129bc:	2206      	movs	r2, #6
   129be:	e00d      	b.n	129dc <cbvprintf+0x270>
		if (*++sp == 'h') {
   129c0:	785a      	ldrb	r2, [r3, #1]
   129c2:	2a68      	cmp	r2, #104	; 0x68
   129c4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   129c8:	d106      	bne.n	129d8 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
   129ca:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   129cc:	f361 02c6 	bfi	r2, r1, #3, #4
   129d0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   129d4:	1c9f      	adds	r7, r3, #2
   129d6:	e7cc      	b.n	12972 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
   129d8:	4613      	mov	r3, r2
   129da:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   129dc:	f362 03c6 	bfi	r3, r2, #3, #4
   129e0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   129e4:	e7c5      	b.n	12972 <cbvprintf+0x206>
		if (*++sp == 'l') {
   129e6:	785a      	ldrb	r2, [r3, #1]
   129e8:	2a6c      	cmp	r2, #108	; 0x6c
   129ea:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   129ee:	d101      	bne.n	129f4 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
   129f0:	2104      	movs	r1, #4
   129f2:	e7eb      	b.n	129cc <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
   129f4:	4613      	mov	r3, r2
   129f6:	2203      	movs	r2, #3
   129f8:	e7f0      	b.n	129dc <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
   129fa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   129fe:	2205      	movs	r2, #5
   12a00:	e7ec      	b.n	129dc <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
   12a02:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12a06:	2207      	movs	r2, #7
   12a08:	e7e8      	b.n	129dc <cbvprintf+0x270>
		conv->unsupported = true;
   12a0a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   12a0e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   12a12:	f023 0302 	bic.w	r3, r3, #2
   12a16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   12a1a:	f043 0302 	orr.w	r3, r3, #2
   12a1e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   12a22:	e7a6      	b.n	12972 <cbvprintf+0x206>
	switch (conv->specifier) {
   12a24:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   12a28:	2920      	cmp	r1, #32
   12a2a:	f200 8084 	bhi.w	12b36 <cbvprintf+0x3ca>
   12a2e:	a001      	add	r0, pc, #4	; (adr r0, 12a34 <cbvprintf+0x2c8>)
   12a30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   12a34:	00012af9 	.word	0x00012af9
   12a38:	00012b37 	.word	0x00012b37
   12a3c:	00012b37 	.word	0x00012b37
   12a40:	00012b37 	.word	0x00012b37
   12a44:	00012b37 	.word	0x00012b37
   12a48:	00012b37 	.word	0x00012b37
   12a4c:	00012b37 	.word	0x00012b37
   12a50:	00012b37 	.word	0x00012b37
   12a54:	00012b37 	.word	0x00012b37
   12a58:	00012995 	.word	0x00012995
   12a5c:	00012b37 	.word	0x00012b37
   12a60:	00012af9 	.word	0x00012af9
   12a64:	00012ab9 	.word	0x00012ab9
   12a68:	00012995 	.word	0x00012995
   12a6c:	00012995 	.word	0x00012995
   12a70:	00012995 	.word	0x00012995
   12a74:	00012b37 	.word	0x00012b37
   12a78:	00012ab9 	.word	0x00012ab9
   12a7c:	00012b37 	.word	0x00012b37
   12a80:	00012b37 	.word	0x00012b37
   12a84:	00012b37 	.word	0x00012b37
   12a88:	00012b37 	.word	0x00012b37
   12a8c:	00012b01 	.word	0x00012b01
   12a90:	00012af9 	.word	0x00012af9
   12a94:	00012b1d 	.word	0x00012b1d
   12a98:	00012b37 	.word	0x00012b37
   12a9c:	00012b37 	.word	0x00012b37
   12aa0:	00012b1d 	.word	0x00012b1d
   12aa4:	00012b37 	.word	0x00012b37
   12aa8:	00012af9 	.word	0x00012af9
   12aac:	00012b37 	.word	0x00012b37
   12ab0:	00012b37 	.word	0x00012b37
   12ab4:	00012af9 	.word	0x00012af9
		conv->specifier_cat = SPECIFIER_SINT;
   12ab8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   12abc:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   12abe:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   12ac2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12ac6:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   12ac8:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   12acc:	bf02      	ittt	eq
   12ace:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   12ad2:	f041 0101 	orreq.w	r1, r1, #1
   12ad6:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   12ada:	2a63      	cmp	r2, #99	; 0x63
   12adc:	d131      	bne.n	12b42 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   12ade:	3b00      	subs	r3, #0
   12ae0:	bf18      	it	ne
   12ae2:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   12ae4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12ae8:	f3c2 0140 	ubfx	r1, r2, #1, #1
   12aec:	430b      	orrs	r3, r1
   12aee:	f363 0241 	bfi	r2, r3, #1, #1
   12af2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   12af6:	e6d8      	b.n	128aa <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   12af8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   12afc:	2002      	movs	r0, #2
   12afe:	e7de      	b.n	12abe <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   12b00:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   12b04:	f003 0378 	and.w	r3, r3, #120	; 0x78
   12b08:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   12b0c:	2103      	movs	r1, #3
   12b0e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12b12:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   12b14:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   12b18:	4143      	adcs	r3, r0
   12b1a:	e7e3      	b.n	12ae4 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   12b1c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   12b20:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   12b22:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   12b26:	f361 0202 	bfi	r2, r1, #0, #3
   12b2a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   12b2e:	bf14      	ite	ne
   12b30:	2301      	movne	r3, #1
   12b32:	2300      	moveq	r3, #0
   12b34:	e7d6      	b.n	12ae4 <cbvprintf+0x378>
		conv->invalid = true;
   12b36:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12b3a:	f043 0301 	orr.w	r3, r3, #1
   12b3e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   12b42:	2300      	movs	r3, #0
   12b44:	e7ce      	b.n	12ae4 <cbvprintf+0x378>
		} else if (conv->width_present) {
   12b46:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   12b4a:	2a00      	cmp	r2, #0
			width = conv->width_value;
   12b4c:	bfb4      	ite	lt
   12b4e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
   12b52:	f04f 39ff 	movge.w	r9, #4294967295
   12b56:	e6ba      	b.n	128ce <cbvprintf+0x162>
		} else if (conv->prec_present) {
   12b58:	079b      	lsls	r3, r3, #30
   12b5a:	f57f aec7 	bpl.w	128ec <cbvprintf+0x180>
			precision = conv->prec_value;
   12b5e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
   12b62:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
   12b66:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   12b68:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   12b6c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
   12b70:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   12b74:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   12b76:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   12b7a:	d138      	bne.n	12bee <cbvprintf+0x482>
			switch (length_mod) {
   12b7c:	1ecb      	subs	r3, r1, #3
   12b7e:	2b04      	cmp	r3, #4
   12b80:	d822      	bhi.n	12bc8 <cbvprintf+0x45c>
   12b82:	e8df f003 	tbb	[pc, r3]
   12b86:	0903      	.short	0x0903
   12b88:	2109      	.short	0x2109
   12b8a:	21          	.byte	0x21
   12b8b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   12b8c:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
   12b90:	17da      	asrs	r2, r3, #31
   12b92:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
   12b96:	e006      	b.n	12ba6 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
   12b98:	3407      	adds	r4, #7
   12b9a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   12b9e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   12ba2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   12ba6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12baa:	f013 0603 	ands.w	r6, r3, #3
   12bae:	d056      	beq.n	12c5e <cbvprintf+0x4f2>
			OUTS(sp, fp);
   12bb0:	9802      	ldr	r0, [sp, #8]
   12bb2:	463b      	mov	r3, r7
   12bb4:	4652      	mov	r2, sl
   12bb6:	4659      	mov	r1, fp
   12bb8:	f00d f9e9 	bl	1ff8e <outs>
   12bbc:	2800      	cmp	r0, #0
   12bbe:	f2c0 8142 	blt.w	12e46 <cbvprintf+0x6da>
   12bc2:	4405      	add	r5, r0
			continue;
   12bc4:	46ba      	mov	sl, r7
   12bc6:	e5d9      	b.n	1277c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12bc8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   12bcc:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12bce:	ea4f 72e3 	mov.w	r2, r3, asr #31
   12bd2:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   12bd6:	d105      	bne.n	12be4 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
   12bd8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   12bdc:	930a      	str	r3, [sp, #40]	; 0x28
   12bde:	2300      	movs	r3, #0
   12be0:	930b      	str	r3, [sp, #44]	; 0x2c
   12be2:	e7e0      	b.n	12ba6 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
   12be4:	2902      	cmp	r1, #2
   12be6:	d1de      	bne.n	12ba6 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
   12be8:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   12bec:	e7d0      	b.n	12b90 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   12bee:	2b02      	cmp	r3, #2
   12bf0:	d123      	bne.n	12c3a <cbvprintf+0x4ce>
			switch (length_mod) {
   12bf2:	1ecb      	subs	r3, r1, #3
   12bf4:	2b04      	cmp	r3, #4
   12bf6:	d813      	bhi.n	12c20 <cbvprintf+0x4b4>
   12bf8:	e8df f003 	tbb	[pc, r3]
   12bfc:	120a0a03 	.word	0x120a0a03
   12c00:	12          	.byte	0x12
   12c01:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   12c02:	6822      	ldr	r2, [r4, #0]
   12c04:	920a      	str	r2, [sp, #40]	; 0x28
   12c06:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
   12c08:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
   12c0a:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   12c0c:	4604      	mov	r4, r0
   12c0e:	e7ca      	b.n	12ba6 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
   12c10:	1de0      	adds	r0, r4, #7
   12c12:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
   12c16:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   12c1a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   12c1e:	e7f5      	b.n	12c0c <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
   12c20:	f854 3b04 	ldr.w	r3, [r4], #4
   12c24:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   12c26:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   12c28:	f04f 0300 	mov.w	r3, #0
   12c2c:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   12c2e:	d0d3      	beq.n	12bd8 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
   12c30:	2902      	cmp	r1, #2
   12c32:	d1b8      	bne.n	12ba6 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
   12c34:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   12c38:	e7d0      	b.n	12bdc <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
   12c3a:	2b04      	cmp	r3, #4
   12c3c:	d109      	bne.n	12c52 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
   12c3e:	1de3      	adds	r3, r4, #7
   12c40:	f023 0307 	bic.w	r3, r3, #7
   12c44:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
   12c48:	e9d3 2300 	ldrd	r2, r3, [r3]
   12c4c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   12c50:	e7a9      	b.n	12ba6 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
   12c52:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   12c54:	bf04      	itt	eq
   12c56:	f854 3b04 	ldreq.w	r3, [r4], #4
   12c5a:	930a      	streq	r3, [sp, #40]	; 0x28
   12c5c:	e7a3      	b.n	12ba6 <cbvprintf+0x43a>
		switch (conv->specifier) {
   12c5e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   12c62:	2878      	cmp	r0, #120	; 0x78
   12c64:	d8ae      	bhi.n	12bc4 <cbvprintf+0x458>
   12c66:	2862      	cmp	r0, #98	; 0x62
   12c68:	d822      	bhi.n	12cb0 <cbvprintf+0x544>
   12c6a:	2825      	cmp	r0, #37	; 0x25
   12c6c:	f43f ad8f 	beq.w	1278e <cbvprintf+0x22>
   12c70:	2858      	cmp	r0, #88	; 0x58
   12c72:	d1a7      	bne.n	12bc4 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
   12c74:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   12c78:	9300      	str	r3, [sp, #0]
   12c7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   12c7e:	ab04      	add	r3, sp, #16
   12c80:	aa0c      	add	r2, sp, #48	; 0x30
   12c82:	f00d f93e 	bl	1ff02 <encode_uint>
   12c86:	4682      	mov	sl, r0
			if (precision >= 0) {
   12c88:	f1b8 0f00 	cmp.w	r8, #0
   12c8c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   12c90:	db0c      	blt.n	12cac <cbvprintf+0x540>
				conv->flag_zero = false;
   12c92:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   12c96:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   12c9a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   12c9e:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   12ca0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   12ca4:	d902      	bls.n	12cac <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
   12ca6:	eba8 0303 	sub.w	r3, r8, r3
   12caa:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   12cac:	4680      	mov	r8, r0
   12cae:	e03d      	b.n	12d2c <cbvprintf+0x5c0>
		switch (conv->specifier) {
   12cb0:	3863      	subs	r0, #99	; 0x63
   12cb2:	2815      	cmp	r0, #21
   12cb4:	d886      	bhi.n	12bc4 <cbvprintf+0x458>
   12cb6:	a201      	add	r2, pc, #4	; (adr r2, 12cbc <cbvprintf+0x550>)
   12cb8:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   12cbc:	00012d3d 	.word	0x00012d3d
   12cc0:	00012da1 	.word	0x00012da1
   12cc4:	00012bc5 	.word	0x00012bc5
   12cc8:	00012bc5 	.word	0x00012bc5
   12ccc:	00012bc5 	.word	0x00012bc5
   12cd0:	00012bc5 	.word	0x00012bc5
   12cd4:	00012da1 	.word	0x00012da1
   12cd8:	00012bc5 	.word	0x00012bc5
   12cdc:	00012bc5 	.word	0x00012bc5
   12ce0:	00012bc5 	.word	0x00012bc5
   12ce4:	00012bc5 	.word	0x00012bc5
   12ce8:	00012dfb 	.word	0x00012dfb
   12cec:	00012dc9 	.word	0x00012dc9
   12cf0:	00012dcd 	.word	0x00012dcd
   12cf4:	00012bc5 	.word	0x00012bc5
   12cf8:	00012bc5 	.word	0x00012bc5
   12cfc:	00012d15 	.word	0x00012d15
   12d00:	00012bc5 	.word	0x00012bc5
   12d04:	00012dc9 	.word	0x00012dc9
   12d08:	00012bc5 	.word	0x00012bc5
   12d0c:	00012bc5 	.word	0x00012bc5
   12d10:	00012dc9 	.word	0x00012dc9
			if (precision >= 0) {
   12d14:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   12d18:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   12d1c:	db0a      	blt.n	12d34 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
   12d1e:	4641      	mov	r1, r8
   12d20:	4650      	mov	r0, sl
   12d22:	f00d fbd7 	bl	204d4 <strnlen>
			bpe = bps + len;
   12d26:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
   12d2a:	2600      	movs	r6, #0
		if (bps == NULL) {
   12d2c:	f1ba 0f00 	cmp.w	sl, #0
   12d30:	d10c      	bne.n	12d4c <cbvprintf+0x5e0>
   12d32:	e747      	b.n	12bc4 <cbvprintf+0x458>
				len = strlen(bps);
   12d34:	4650      	mov	r0, sl
   12d36:	f00d fbc6 	bl	204c6 <strlen>
   12d3a:	e7f4      	b.n	12d26 <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12d3e:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
   12d42:	2600      	movs	r6, #0
			bps = buf;
   12d44:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
   12d48:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
   12d4c:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   12d50:	b106      	cbz	r6, 12d54 <cbvprintf+0x5e8>
			nj_len += 1U;
   12d52:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   12d54:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   12d58:	06d0      	lsls	r0, r2, #27
   12d5a:	d568      	bpl.n	12e2e <cbvprintf+0x6c2>
			nj_len += 2U;
   12d5c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   12d5e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   12d60:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   12d62:	bf48      	it	mi
   12d64:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   12d66:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   12d68:	bf48      	it	mi
   12d6a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   12d6c:	f1b9 0f00 	cmp.w	r9, #0
   12d70:	dd76      	ble.n	12e60 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
   12d72:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   12d76:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   12d7a:	f3c2 0380 	ubfx	r3, r2, #2, #1
   12d7e:	9303      	str	r3, [sp, #12]
   12d80:	0753      	lsls	r3, r2, #29
   12d82:	d46d      	bmi.n	12e60 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
   12d84:	0650      	lsls	r0, r2, #25
   12d86:	d561      	bpl.n	12e4c <cbvprintf+0x6e0>
					if (sign != 0) {
   12d88:	b146      	cbz	r6, 12d9c <cbvprintf+0x630>
						OUTC(sign);
   12d8a:	9b02      	ldr	r3, [sp, #8]
   12d8c:	4659      	mov	r1, fp
   12d8e:	4630      	mov	r0, r6
   12d90:	4798      	blx	r3
   12d92:	2800      	cmp	r0, #0
   12d94:	db57      	blt.n	12e46 <cbvprintf+0x6da>
						sign = 0;
   12d96:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   12d98:	3501      	adds	r5, #1
						sign = 0;
   12d9a:	461e      	mov	r6, r3
					pad = '0';
   12d9c:	2330      	movs	r3, #48	; 0x30
   12d9e:	e056      	b.n	12e4e <cbvprintf+0x6e2>
			if (conv->flag_plus) {
   12da0:	071e      	lsls	r6, r3, #28
   12da2:	d40f      	bmi.n	12dc4 <cbvprintf+0x658>
				sign = ' ';
   12da4:	f013 0610 	ands.w	r6, r3, #16
   12da8:	bf18      	it	ne
   12daa:	2620      	movne	r6, #32
			sint = value->sint;
   12dac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   12db0:	2b00      	cmp	r3, #0
   12db2:	f6bf af5f 	bge.w	12c74 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
   12db6:	4252      	negs	r2, r2
   12db8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   12dbc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
   12dc0:	262d      	movs	r6, #45	; 0x2d
   12dc2:	e757      	b.n	12c74 <cbvprintf+0x508>
				sign = '+';
   12dc4:	262b      	movs	r6, #43	; 0x2b
   12dc6:	e7f1      	b.n	12dac <cbvprintf+0x640>
		switch (conv->specifier) {
   12dc8:	2600      	movs	r6, #0
   12dca:	e753      	b.n	12c74 <cbvprintf+0x508>
			if (value->ptr != NULL) {
   12dcc:	980a      	ldr	r0, [sp, #40]	; 0x28
   12dce:	b340      	cbz	r0, 12e22 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12dd0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   12dd4:	9300      	str	r3, [sp, #0]
   12dd6:	aa0c      	add	r2, sp, #48	; 0x30
   12dd8:	ab04      	add	r3, sp, #16
   12dda:	2100      	movs	r1, #0
   12ddc:	f00d f891 	bl	1ff02 <encode_uint>
				conv->altform_0c = true;
   12de0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   12de4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   12de8:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   12dec:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12df0:	4682      	mov	sl, r0
				conv->altform_0c = true;
   12df2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
   12df6:	2600      	movs	r6, #0
				goto prec_int_pad0;
   12df8:	e746      	b.n	12c88 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
   12dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   12dfc:	2907      	cmp	r1, #7
   12dfe:	f63f aee1 	bhi.w	12bc4 <cbvprintf+0x458>
   12e02:	e8df f001 	tbb	[pc, r1]
   12e06:	040c      	.short	0x040c
   12e08:	08080c06 	.word	0x08080c06
   12e0c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   12e0e:	701d      	strb	r5, [r3, #0]
		break;
   12e10:	e6d8      	b.n	12bc4 <cbvprintf+0x458>
		*(short *)dp = (short)count;
   12e12:	801d      	strh	r5, [r3, #0]
		break;
   12e14:	e6d6      	b.n	12bc4 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
   12e16:	17ea      	asrs	r2, r5, #31
   12e18:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   12e1c:	e6d2      	b.n	12bc4 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   12e1e:	601d      	str	r5, [r3, #0]
		break;
   12e20:	e6d0      	b.n	12bc4 <cbvprintf+0x458>
			bps = "(nil)";
   12e22:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 12eec <cbvprintf+0x780>
   12e26:	4606      	mov	r6, r0
			bpe = bps + 5;
   12e28:	f10a 0805 	add.w	r8, sl, #5
   12e2c:	e78e      	b.n	12d4c <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
   12e2e:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   12e30:	bf48      	it	mi
   12e32:	3301      	addmi	r3, #1
   12e34:	e793      	b.n	12d5e <cbvprintf+0x5f2>
					OUTC(pad);
   12e36:	4618      	mov	r0, r3
   12e38:	9303      	str	r3, [sp, #12]
   12e3a:	4659      	mov	r1, fp
   12e3c:	9b02      	ldr	r3, [sp, #8]
   12e3e:	4798      	blx	r3
   12e40:	2800      	cmp	r0, #0
   12e42:	9b03      	ldr	r3, [sp, #12]
   12e44:	da04      	bge.n	12e50 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
   12e46:	b011      	add	sp, #68	; 0x44
   12e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   12e4c:	2320      	movs	r3, #32
   12e4e:	444d      	add	r5, r9
   12e50:	464a      	mov	r2, r9
				while (width-- > 0) {
   12e52:	2a00      	cmp	r2, #0
   12e54:	eba5 0109 	sub.w	r1, r5, r9
   12e58:	f109 39ff 	add.w	r9, r9, #4294967295
   12e5c:	dceb      	bgt.n	12e36 <cbvprintf+0x6ca>
   12e5e:	460d      	mov	r5, r1
		if (sign != 0) {
   12e60:	b136      	cbz	r6, 12e70 <cbvprintf+0x704>
			OUTC(sign);
   12e62:	9b02      	ldr	r3, [sp, #8]
   12e64:	4659      	mov	r1, fp
   12e66:	4630      	mov	r0, r6
   12e68:	4798      	blx	r3
   12e6a:	2800      	cmp	r0, #0
   12e6c:	dbeb      	blt.n	12e46 <cbvprintf+0x6da>
   12e6e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   12e70:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12e74:	06d9      	lsls	r1, r3, #27
   12e76:	d401      	bmi.n	12e7c <cbvprintf+0x710>
   12e78:	071a      	lsls	r2, r3, #28
   12e7a:	d506      	bpl.n	12e8a <cbvprintf+0x71e>
				OUTC('0');
   12e7c:	9b02      	ldr	r3, [sp, #8]
   12e7e:	4659      	mov	r1, fp
   12e80:	2030      	movs	r0, #48	; 0x30
   12e82:	4798      	blx	r3
   12e84:	2800      	cmp	r0, #0
   12e86:	dbde      	blt.n	12e46 <cbvprintf+0x6da>
   12e88:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   12e8a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12e8e:	06db      	lsls	r3, r3, #27
   12e90:	d507      	bpl.n	12ea2 <cbvprintf+0x736>
				OUTC(conv->specifier);
   12e92:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   12e96:	9b02      	ldr	r3, [sp, #8]
   12e98:	4659      	mov	r1, fp
   12e9a:	4798      	blx	r3
   12e9c:	2800      	cmp	r0, #0
   12e9e:	dbd2      	blt.n	12e46 <cbvprintf+0x6da>
   12ea0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   12ea2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   12ea4:	442e      	add	r6, r5
   12ea6:	1b73      	subs	r3, r6, r5
   12ea8:	2b00      	cmp	r3, #0
   12eaa:	dc16      	bgt.n	12eda <cbvprintf+0x76e>
			OUTS(bps, bpe);
   12eac:	9802      	ldr	r0, [sp, #8]
   12eae:	4643      	mov	r3, r8
   12eb0:	4652      	mov	r2, sl
   12eb2:	4659      	mov	r1, fp
   12eb4:	f00d f86b 	bl	1ff8e <outs>
   12eb8:	2800      	cmp	r0, #0
   12eba:	dbc4      	blt.n	12e46 <cbvprintf+0x6da>
   12ebc:	4405      	add	r5, r0
		while (width > 0) {
   12ebe:	44a9      	add	r9, r5
   12ec0:	eba9 0305 	sub.w	r3, r9, r5
   12ec4:	2b00      	cmp	r3, #0
   12ec6:	f77f ae7d 	ble.w	12bc4 <cbvprintf+0x458>
			OUTC(' ');
   12eca:	9b02      	ldr	r3, [sp, #8]
   12ecc:	4659      	mov	r1, fp
   12ece:	2020      	movs	r0, #32
   12ed0:	4798      	blx	r3
   12ed2:	2800      	cmp	r0, #0
   12ed4:	dbb7      	blt.n	12e46 <cbvprintf+0x6da>
   12ed6:	3501      	adds	r5, #1
			--width;
   12ed8:	e7f2      	b.n	12ec0 <cbvprintf+0x754>
				OUTC('0');
   12eda:	9b02      	ldr	r3, [sp, #8]
   12edc:	4659      	mov	r1, fp
   12ede:	2030      	movs	r0, #48	; 0x30
   12ee0:	4798      	blx	r3
   12ee2:	2800      	cmp	r0, #0
   12ee4:	dbaf      	blt.n	12e46 <cbvprintf+0x6da>
   12ee6:	3501      	adds	r5, #1
   12ee8:	e7dd      	b.n	12ea6 <cbvprintf+0x73a>
   12eea:	bf00      	nop
   12eec:	00025012 	.word	0x00025012

00012ef0 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   12ef0:	b508      	push	{r3, lr}
   12ef2:	f04f 0240 	mov.w	r2, #64	; 0x40
   12ef6:	f3ef 8311 	mrs	r3, BASEPRI
   12efa:	f382 8812 	msr	BASEPRI_MAX, r2
   12efe:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   12f02:	f000 fe75 	bl	13bf0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   12f06:	4803      	ldr	r0, [pc, #12]	; (12f14 <sys_reboot+0x24>)
   12f08:	f00c fd73 	bl	1f9f2 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   12f0c:	f000 faa4 	bl	13458 <arch_cpu_idle>
   12f10:	e7fc      	b.n	12f0c <sys_reboot+0x1c>
   12f12:	bf00      	nop
   12f14:	00025018 	.word	0x00025018

00012f18 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   12f18:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   12f1a:	4c08      	ldr	r4, [pc, #32]	; (12f3c <read_blvl+0x24>)
{
   12f1c:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   12f1e:	7824      	ldrb	r4, [r4, #0]
   12f20:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   12f24:	2401      	movs	r4, #1
   12f26:	9402      	str	r4, [sp, #8]
   12f28:	f10d 0417 	add.w	r4, sp, #23
   12f2c:	9401      	str	r4, [sp, #4]
   12f2e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   12f32:	9400      	str	r4, [sp, #0]
   12f34:	f00f f95a 	bl	221ec <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   12f38:	b006      	add	sp, #24
   12f3a:	bd10      	pop	{r4, pc}
   12f3c:	20000ac8 	.word	0x20000ac8

00012f40 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   12f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12f44:	4605      	mov	r5, r0
   12f46:	f04f 0340 	mov.w	r3, #64	; 0x40
   12f4a:	f3ef 8611 	mrs	r6, BASEPRI
   12f4e:	f383 8812 	msr	BASEPRI_MAX, r3
   12f52:	f3bf 8f6f 	isb	sy
	return list->head;
   12f56:	4b0e      	ldr	r3, [pc, #56]	; (12f90 <pm_state_notify+0x50>)
   12f58:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12f5a:	b19c      	cbz	r4, 12f84 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   12f5c:	4f0d      	ldr	r7, [pc, #52]	; (12f94 <pm_state_notify+0x54>)
   12f5e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 12f98 <pm_state_notify+0x58>
   12f62:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   12f66:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   12f6a:	2d00      	cmp	r5, #0
   12f6c:	bf08      	it	eq
   12f6e:	4613      	moveq	r3, r2
		if (callback) {
   12f70:	b12b      	cbz	r3, 12f7e <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   12f72:	f898 2014 	ldrb.w	r2, [r8, #20]
   12f76:	fb09 f202 	mul.w	r2, r9, r2
   12f7a:	5cb8      	ldrb	r0, [r7, r2]
   12f7c:	4798      	blx	r3
	return node->next;
   12f7e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12f80:	2c00      	cmp	r4, #0
   12f82:	d1f0      	bne.n	12f66 <pm_state_notify+0x26>
	__asm__ volatile(
   12f84:	f386 8811 	msr	BASEPRI, r6
   12f88:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   12f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12f90:	2000218c 	.word	0x2000218c
   12f94:	20002194 	.word	0x20002194
   12f98:	20002a9c 	.word	0x20002a9c

00012f9c <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12f9c:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   12f9e:	2301      	movs	r3, #1
   12fa0:	f000 001f 	and.w	r0, r0, #31
   12fa4:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12fa8:	4b07      	ldr	r3, [pc, #28]	; (12fc8 <atomic_clear_bit.constprop.0+0x2c>)
   12faa:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12fae:	43c0      	mvns	r0, r0
   12fb0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   12fb4:	e853 2f00 	ldrex	r2, [r3]
   12fb8:	4002      	ands	r2, r0
   12fba:	e843 2100 	strex	r1, r2, [r3]
   12fbe:	2900      	cmp	r1, #0
   12fc0:	d1f8      	bne.n	12fb4 <atomic_clear_bit.constprop.0+0x18>
   12fc2:	f3bf 8f5b 	dmb	ish
}
   12fc6:	4770      	bx	lr
   12fc8:	200021a0 	.word	0x200021a0

00012fcc <pm_system_resume>:

void pm_system_resume(void)
{
   12fcc:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
   12fce:	4b1a      	ldr	r3, [pc, #104]	; (13038 <pm_system_resume+0x6c>)
   12fd0:	7d1c      	ldrb	r4, [r3, #20]
   12fd2:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   12fd6:	f004 031f 	and.w	r3, r4, #31
   12fda:	2201      	movs	r2, #1
   12fdc:	409a      	lsls	r2, r3
   12fde:	4b17      	ldr	r3, [pc, #92]	; (1303c <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12fe0:	0961      	lsrs	r1, r4, #5
   12fe2:	43d0      	mvns	r0, r2
   12fe4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   12fe8:	e853 1f00 	ldrex	r1, [r3]
   12fec:	ea01 0500 	and.w	r5, r1, r0
   12ff0:	e843 5c00 	strex	ip, r5, [r3]
   12ff4:	f1bc 0f00 	cmp.w	ip, #0
   12ff8:	d1f6      	bne.n	12fe8 <pm_system_resume+0x1c>
   12ffa:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   12ffe:	4211      	tst	r1, r2
   13000:	d013      	beq.n	1302a <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
   13002:	4b0f      	ldr	r3, [pc, #60]	; (13040 <pm_system_resume+0x74>)
   13004:	4d0f      	ldr	r5, [pc, #60]	; (13044 <pm_system_resume+0x78>)
   13006:	b18b      	cbz	r3, 1302c <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
   13008:	230c      	movs	r3, #12
   1300a:	4363      	muls	r3, r4
   1300c:	18ea      	adds	r2, r5, r3
   1300e:	5ce8      	ldrb	r0, [r5, r3]
   13010:	7851      	ldrb	r1, [r2, #1]
   13012:	f00d fac0 	bl	20596 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   13016:	2000      	movs	r0, #0
   13018:	f7ff ff92 	bl	12f40 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   1301c:	230c      	movs	r3, #12
   1301e:	435c      	muls	r4, r3
   13020:	192a      	adds	r2, r5, r4
   13022:	2300      	movs	r3, #0
   13024:	512b      	str	r3, [r5, r4]
   13026:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   1302a:	bd38      	pop	{r3, r4, r5, pc}
   1302c:	f383 8811 	msr	BASEPRI, r3
   13030:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   13034:	e7ef      	b.n	13016 <pm_system_resume+0x4a>
   13036:	bf00      	nop
   13038:	20002a9c 	.word	0x20002a9c
   1303c:	200021a4 	.word	0x200021a4
   13040:	00020597 	.word	0x00020597
   13044:	20002194 	.word	0x20002194

00013048 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   13048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   1304c:	4b32      	ldr	r3, [pc, #200]	; (13118 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1304e:	4a33      	ldr	r2, [pc, #204]	; (1311c <pm_system_suspend+0xd4>)
   13050:	7d1c      	ldrb	r4, [r3, #20]
   13052:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13056:	0963      	lsrs	r3, r4, #5
   13058:	ea4f 0983 	mov.w	r9, r3, lsl #2
   1305c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13060:	4e2f      	ldr	r6, [pc, #188]	; (13120 <pm_system_suspend+0xd8>)
   13062:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   13066:	f004 081f 	and.w	r8, r4, #31
   1306a:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   1306e:	f013 0f01 	tst.w	r3, #1
{
   13072:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   13074:	d10a      	bne.n	1308c <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   13076:	4601      	mov	r1, r0
   13078:	4620      	mov	r0, r4
   1307a:	f000 f869 	bl	13150 <pm_policy_next_state>
		if (info != NULL) {
   1307e:	b128      	cbz	r0, 1308c <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
   13080:	c807      	ldmia	r0, {r0, r1, r2}
   13082:	230c      	movs	r3, #12
   13084:	fb03 6304 	mla	r3, r3, r4, r6
   13088:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   1308c:	230c      	movs	r3, #12
   1308e:	4363      	muls	r3, r4
   13090:	18f2      	adds	r2, r6, r3
   13092:	5cf5      	ldrb	r5, [r6, r3]
   13094:	b92d      	cbnz	r5, 130a2 <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
   13096:	4620      	mov	r0, r4
   13098:	f7ff ff80 	bl	12f9c <atomic_clear_bit.constprop.0>
		ret = false;
   1309c:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
   1309e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
   130a2:	1c7b      	adds	r3, r7, #1
   130a4:	d00f      	beq.n	130c6 <pm_system_suspend+0x7e>
			return (uint32_t)((t * to_hz + off) / from_hz);
   130a6:	f8d2 c008 	ldr.w	ip, [r2, #8]
   130aa:	481e      	ldr	r0, [pc, #120]	; (13124 <pm_system_suspend+0xdc>)
   130ac:	4a1e      	ldr	r2, [pc, #120]	; (13128 <pm_system_suspend+0xe0>)
   130ae:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   130b2:	2100      	movs	r1, #0
   130b4:	2300      	movs	r3, #0
   130b6:	fbec 0105 	umlal	r0, r1, ip, r5
   130ba:	f7ed ffbb 	bl	1034 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   130be:	2101      	movs	r1, #1
   130c0:	1a38      	subs	r0, r7, r0
   130c2:	f010 fb49 	bl	23758 <z_set_timeout_expiry>
	k_sched_lock();
   130c6:	f008 fa5d 	bl	1b584 <k_sched_lock>
	pm_state_notify(true);
   130ca:	2001      	movs	r0, #1
   130cc:	f7ff ff38 	bl	12f40 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   130d0:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   130d4:	2301      	movs	r3, #1
   130d6:	fa03 f808 	lsl.w	r8, r3, r8
   130da:	4b14      	ldr	r3, [pc, #80]	; (1312c <pm_system_suspend+0xe4>)
   130dc:	4499      	add	r9, r3
   130de:	e859 3f00 	ldrex	r3, [r9]
   130e2:	ea43 0308 	orr.w	r3, r3, r8
   130e6:	e849 3200 	strex	r2, r3, [r9]
   130ea:	2a00      	cmp	r2, #0
   130ec:	d1f7      	bne.n	130de <pm_system_suspend+0x96>
   130ee:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   130f2:	4b0f      	ldr	r3, [pc, #60]	; (13130 <pm_system_suspend+0xe8>)
   130f4:	b133      	cbz	r3, 13104 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
   130f6:	230c      	movs	r3, #12
   130f8:	4363      	muls	r3, r4
   130fa:	18f2      	adds	r2, r6, r3
   130fc:	5cf0      	ldrb	r0, [r6, r3]
   130fe:	7851      	ldrb	r1, [r2, #1]
   13100:	f00d fa3d 	bl	2057e <pm_state_set>
	pm_system_resume();
   13104:	f7ff ff62 	bl	12fcc <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
   13108:	4620      	mov	r0, r4
   1310a:	f7ff ff47 	bl	12f9c <atomic_clear_bit.constprop.0>
	k_sched_unlock();
   1310e:	f008 fc09 	bl	1b924 <k_sched_unlock>
	bool ret = true;
   13112:	2001      	movs	r0, #1
   13114:	e7c3      	b.n	1309e <pm_system_suspend+0x56>
   13116:	bf00      	nop
   13118:	20002a9c 	.word	0x20002a9c
   1311c:	200021a0 	.word	0x200021a0
   13120:	20002194 	.word	0x20002194
   13124:	000f423f 	.word	0x000f423f
   13128:	000f4240 	.word	0x000f4240
   1312c:	200021a4 	.word	0x200021a4
   13130:	0002057f 	.word	0x0002057f

00013134 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13134:	4b05      	ldr	r3, [pc, #20]	; (1314c <pm_policy_state_lock_is_active+0x18>)
   13136:	f3bf 8f5b 	dmb	ish
   1313a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1313e:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
   13142:	3800      	subs	r0, #0
   13144:	bf18      	it	ne
   13146:	2001      	movne	r0, #1
   13148:	4770      	bx	lr
   1314a:	bf00      	nop
   1314c:	200021a8 	.word	0x200021a8

00013150 <pm_policy_next_state>:
{
   13150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13154:	b085      	sub	sp, #20
   13156:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   13158:	a903      	add	r1, sp, #12
   1315a:	f000 f847 	bl	131ec <pm_state_cpu_get_all>
   1315e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 131e0 <pm_policy_next_state+0x90>
   13162:	f8df a080 	ldr.w	sl, [pc, #128]	; 131e4 <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   13166:	1e44      	subs	r4, r0, #1
   13168:	b224      	sxth	r4, r4
   1316a:	f04f 0b00 	mov.w	fp, #0
   1316e:	1c63      	adds	r3, r4, #1
   13170:	d104      	bne.n	1317c <pm_policy_next_state+0x2c>
	return NULL;
   13172:	2600      	movs	r6, #0
}
   13174:	4630      	mov	r0, r6
   13176:	b005      	add	sp, #20
   13178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   1317c:	9a03      	ldr	r2, [sp, #12]
   1317e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   13182:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
   13186:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   1318a:	f7ff ffd3 	bl	13134 <pm_policy_state_lock_is_active>
   1318e:	4605      	mov	r5, r0
   13190:	bb10      	cbnz	r0, 131d8 <pm_policy_next_state+0x88>
   13192:	6870      	ldr	r0, [r6, #4]
   13194:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   13198:	46c4      	mov	ip, r8
   1319a:	4629      	mov	r1, r5
   1319c:	fbe0 c109 	umlal	ip, r1, r0, r9
   131a0:	4652      	mov	r2, sl
   131a2:	465b      	mov	r3, fp
   131a4:	4660      	mov	r0, ip
   131a6:	f7ed ff45 	bl	1034 <__aeabi_uldivmod>
   131aa:	9001      	str	r0, [sp, #4]
   131ac:	68b0      	ldr	r0, [r6, #8]
   131ae:	46c4      	mov	ip, r8
   131b0:	4629      	mov	r1, r5
   131b2:	fbe0 c109 	umlal	ip, r1, r0, r9
   131b6:	465b      	mov	r3, fp
   131b8:	4652      	mov	r2, sl
   131ba:	4660      	mov	r0, ip
   131bc:	f7ed ff3a 	bl	1034 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   131c0:	4b09      	ldr	r3, [pc, #36]	; (131e8 <pm_policy_next_state+0x98>)
   131c2:	681b      	ldr	r3, [r3, #0]
   131c4:	1c59      	adds	r1, r3, #1
   131c6:	d001      	beq.n	131cc <pm_policy_next_state+0x7c>
   131c8:	4283      	cmp	r3, r0
   131ca:	d905      	bls.n	131d8 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
   131cc:	1c7a      	adds	r2, r7, #1
   131ce:	d0d1      	beq.n	13174 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
   131d0:	9b01      	ldr	r3, [sp, #4]
   131d2:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   131d4:	42b8      	cmp	r0, r7
   131d6:	d9cd      	bls.n	13174 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   131d8:	3c01      	subs	r4, #1
   131da:	b224      	sxth	r4, r4
   131dc:	e7c7      	b.n	1316e <pm_policy_next_state+0x1e>
   131de:	bf00      	nop
   131e0:	000f423f 	.word	0x000f423f
   131e4:	000f4240 	.word	0x000f4240
   131e8:	200006d0 	.word	0x200006d0

000131ec <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   131ec:	b908      	cbnz	r0, 131f2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   131ee:	4b02      	ldr	r3, [pc, #8]	; (131f8 <pm_state_cpu_get_all+0xc>)
   131f0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   131f2:	2000      	movs	r0, #0
   131f4:	4770      	bx	lr
   131f6:	bf00      	nop
   131f8:	00024484 	.word	0x00024484

000131fc <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   131fc:	4904      	ldr	r1, [pc, #16]	; (13210 <sub_bytes+0x14>)
   131fe:	1e43      	subs	r3, r0, #1
   13200:	300f      	adds	r0, #15
   13202:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   13206:	5c8a      	ldrb	r2, [r1, r2]
   13208:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   1320a:	4283      	cmp	r3, r0
   1320c:	d1f9      	bne.n	13202 <sub_bytes+0x6>
	}
}
   1320e:	4770      	bx	lr
   13210:	00025053 	.word	0x00025053

00013214 <tc_aes128_set_encrypt_key>:
{
   13214:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   13216:	4e26      	ldr	r6, [pc, #152]	; (132b0 <tc_aes128_set_encrypt_key+0x9c>)
{
   13218:	4607      	mov	r7, r0
   1321a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   1321c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   1321e:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   13220:	ad01      	add	r5, sp, #4
   13222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13224:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   13226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13228:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1322c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   13230:	4638      	mov	r0, r7
   13232:	2f00      	cmp	r7, #0
   13234:	d038      	beq.n	132a8 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   13236:	2c00      	cmp	r4, #0
   13238:	d038      	beq.n	132ac <tc_aes128_set_encrypt_key+0x98>
   1323a:	1f38      	subs	r0, r7, #4
   1323c:	4621      	mov	r1, r4
   1323e:	4602      	mov	r2, r0
   13240:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   13242:	784b      	ldrb	r3, [r1, #1]
   13244:	780d      	ldrb	r5, [r1, #0]
   13246:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   13248:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   1324c:	78cd      	ldrb	r5, [r1, #3]
   1324e:	432b      	orrs	r3, r5
   13250:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   13252:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   13254:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   13258:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1325a:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   1325e:	d1f0      	bne.n	13242 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   13260:	4c14      	ldr	r4, [pc, #80]	; (132b4 <tc_aes128_set_encrypt_key+0xa0>)
   13262:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   13264:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   13266:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   13268:	d116      	bne.n	13298 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1326a:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1326e:	5ca5      	ldrb	r5, [r4, r2]
   13270:	0e1a      	lsrs	r2, r3, #24
   13272:	5ca2      	ldrb	r2, [r4, r2]
   13274:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   13278:	f3c3 2507 	ubfx	r5, r3, #8, #8
   1327c:	b2db      	uxtb	r3, r3
   1327e:	5d65      	ldrb	r5, [r4, r5]
   13280:	5ce3      	ldrb	r3, [r4, r3]
   13282:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   13286:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1328a:	ad0c      	add	r5, sp, #48	; 0x30
   1328c:	f021 0303 	bic.w	r3, r1, #3
   13290:	442b      	add	r3, r5
   13292:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   13296:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   13298:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   1329c:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   1329e:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   132a0:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   132a2:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   132a4:	d1de      	bne.n	13264 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   132a6:	2001      	movs	r0, #1
}
   132a8:	b00d      	add	sp, #52	; 0x34
   132aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   132ac:	4620      	mov	r0, r4
   132ae:	e7fb      	b.n	132a8 <tc_aes128_set_encrypt_key+0x94>
   132b0:	00023f3c 	.word	0x00023f3c
   132b4:	00025053 	.word	0x00025053

000132b8 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   132b8:	4801      	ldr	r0, [pc, #4]	; (132c0 <nrf_cc3xx_platform_abort_init+0x8>)
   132ba:	f009 bab5 	b.w	1c828 <nrf_cc3xx_platform_set_abort>
   132be:	bf00      	nop
   132c0:	00024484 	.word	0x00024484

000132c4 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   132c4:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   132c6:	4604      	mov	r4, r0
   132c8:	b918      	cbnz	r0, 132d2 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   132ca:	4b0d      	ldr	r3, [pc, #52]	; (13300 <mutex_free_platform+0x3c>)
   132cc:	480d      	ldr	r0, [pc, #52]	; (13304 <mutex_free_platform+0x40>)
   132ce:	685b      	ldr	r3, [r3, #4]
   132d0:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   132d2:	6861      	ldr	r1, [r4, #4]
   132d4:	2908      	cmp	r1, #8
   132d6:	d00d      	beq.n	132f4 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   132d8:	f031 0304 	bics.w	r3, r1, #4
   132dc:	d00a      	beq.n	132f4 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   132de:	f011 0102 	ands.w	r1, r1, #2
   132e2:	d008      	beq.n	132f6 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   132e4:	4808      	ldr	r0, [pc, #32]	; (13308 <mutex_free_platform+0x44>)
   132e6:	4621      	mov	r1, r4
   132e8:	f00f fedf 	bl	230aa <k_mem_slab_free>
        mutex->mutex = NULL;
   132ec:	2300      	movs	r3, #0
   132ee:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   132f0:	2300      	movs	r3, #0
   132f2:	6063      	str	r3, [r4, #4]
}
   132f4:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   132f6:	6820      	ldr	r0, [r4, #0]
   132f8:	2214      	movs	r2, #20
   132fa:	f00d f934 	bl	20566 <memset>
   132fe:	e7f7      	b.n	132f0 <mutex_free_platform+0x2c>
   13300:	200008bc 	.word	0x200008bc
   13304:	00025153 	.word	0x00025153
   13308:	200021c4 	.word	0x200021c4

0001330c <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1330c:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   1330e:	b308      	cbz	r0, 13354 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   13310:	6843      	ldr	r3, [r0, #4]
   13312:	2b04      	cmp	r3, #4
   13314:	d110      	bne.n	13338 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13316:	2201      	movs	r2, #1
   13318:	6803      	ldr	r3, [r0, #0]
   1331a:	f3bf 8f5b 	dmb	ish
   1331e:	e853 1f00 	ldrex	r1, [r3]
   13322:	2900      	cmp	r1, #0
   13324:	d103      	bne.n	1332e <mutex_lock_platform+0x22>
   13326:	e843 2000 	strex	r0, r2, [r3]
   1332a:	2800      	cmp	r0, #0
   1332c:	d1f7      	bne.n	1331e <mutex_lock_platform+0x12>
   1332e:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13332:	d10b      	bne.n	1334c <mutex_lock_platform+0x40>
   13334:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   13336:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   13338:	b153      	cbz	r3, 13350 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
   1333a:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   1333c:	f04f 32ff 	mov.w	r2, #4294967295
   13340:	f04f 33ff 	mov.w	r3, #4294967295
   13344:	f007 fdca 	bl	1aedc <z_impl_k_mutex_lock>
        if (ret == 0) {
   13348:	2800      	cmp	r0, #0
   1334a:	d0f3      	beq.n	13334 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1334c:	4803      	ldr	r0, [pc, #12]	; (1335c <mutex_lock_platform+0x50>)
   1334e:	e7f2      	b.n	13336 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   13350:	4803      	ldr	r0, [pc, #12]	; (13360 <mutex_lock_platform+0x54>)
   13352:	e7f0      	b.n	13336 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   13354:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   13358:	e7ed      	b.n	13336 <mutex_lock_platform+0x2a>
   1335a:	bf00      	nop
   1335c:	ffff8fe9 	.word	0xffff8fe9
   13360:	ffff8fea 	.word	0xffff8fea

00013364 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13364:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   13366:	b1d0      	cbz	r0, 1339e <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   13368:	6843      	ldr	r3, [r0, #4]
   1336a:	2b04      	cmp	r3, #4
   1336c:	d111      	bne.n	13392 <mutex_unlock_platform+0x2e>
   1336e:	2200      	movs	r2, #0
   13370:	6803      	ldr	r3, [r0, #0]
   13372:	f3bf 8f5b 	dmb	ish
   13376:	e853 1f00 	ldrex	r1, [r3]
   1337a:	2901      	cmp	r1, #1
   1337c:	d103      	bne.n	13386 <mutex_unlock_platform+0x22>
   1337e:	e843 2000 	strex	r0, r2, [r3]
   13382:	2800      	cmp	r0, #0
   13384:	d1f7      	bne.n	13376 <mutex_unlock_platform+0x12>
   13386:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1338a:	4807      	ldr	r0, [pc, #28]	; (133a8 <mutex_unlock_platform+0x44>)
   1338c:	bf08      	it	eq
   1338e:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   13390:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   13392:	b13b      	cbz	r3, 133a4 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
   13394:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   13396:	f007 fe19 	bl	1afcc <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   1339a:	2000      	movs	r0, #0
   1339c:	e7f8      	b.n	13390 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1339e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   133a2:	e7f5      	b.n	13390 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   133a4:	4801      	ldr	r0, [pc, #4]	; (133ac <mutex_unlock_platform+0x48>)
   133a6:	e7f3      	b.n	13390 <mutex_unlock_platform+0x2c>
   133a8:	ffff8fe9 	.word	0xffff8fe9
   133ac:	ffff8fea 	.word	0xffff8fea

000133b0 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   133b0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   133b2:	4604      	mov	r4, r0
   133b4:	b918      	cbnz	r0, 133be <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   133b6:	4b16      	ldr	r3, [pc, #88]	; (13410 <mutex_init_platform+0x60>)
   133b8:	4816      	ldr	r0, [pc, #88]	; (13414 <mutex_init_platform+0x64>)
   133ba:	685b      	ldr	r3, [r3, #4]
   133bc:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   133be:	6863      	ldr	r3, [r4, #4]
   133c0:	2b04      	cmp	r3, #4
   133c2:	d023      	beq.n	1340c <mutex_init_platform+0x5c>
   133c4:	2b08      	cmp	r3, #8
   133c6:	d021      	beq.n	1340c <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   133c8:	b9cb      	cbnz	r3, 133fe <mutex_init_platform+0x4e>
   133ca:	6823      	ldr	r3, [r4, #0]
   133cc:	b9bb      	cbnz	r3, 133fe <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   133ce:	4812      	ldr	r0, [pc, #72]	; (13418 <mutex_init_platform+0x68>)
   133d0:	f04f 32ff 	mov.w	r2, #4294967295
   133d4:	f04f 33ff 	mov.w	r3, #4294967295
   133d8:	4621      	mov	r1, r4
   133da:	f007 fc7b 	bl	1acd4 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   133de:	b908      	cbnz	r0, 133e4 <mutex_init_platform+0x34>
   133e0:	6823      	ldr	r3, [r4, #0]
   133e2:	b91b      	cbnz	r3, 133ec <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   133e4:	4b0a      	ldr	r3, [pc, #40]	; (13410 <mutex_init_platform+0x60>)
   133e6:	480d      	ldr	r0, [pc, #52]	; (1341c <mutex_init_platform+0x6c>)
   133e8:	685b      	ldr	r3, [r3, #4]
   133ea:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   133ec:	6820      	ldr	r0, [r4, #0]
   133ee:	2214      	movs	r2, #20
   133f0:	2100      	movs	r1, #0
   133f2:	f00d f8b8 	bl	20566 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   133f6:	6863      	ldr	r3, [r4, #4]
   133f8:	f043 0302 	orr.w	r3, r3, #2
   133fc:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   133fe:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   13400:	f00f fe96 	bl	23130 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   13404:	6863      	ldr	r3, [r4, #4]
   13406:	f043 0301 	orr.w	r3, r3, #1
   1340a:	6063      	str	r3, [r4, #4]
}
   1340c:	bd10      	pop	{r4, pc}
   1340e:	bf00      	nop
   13410:	200008bc 	.word	0x200008bc
   13414:	00025153 	.word	0x00025153
   13418:	200021c4 	.word	0x200021c4
   1341c:	00025179 	.word	0x00025179

00013420 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   13420:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   13422:	4906      	ldr	r1, [pc, #24]	; (1343c <nrf_cc3xx_platform_mutex_init+0x1c>)
   13424:	4806      	ldr	r0, [pc, #24]	; (13440 <nrf_cc3xx_platform_mutex_init+0x20>)
   13426:	2340      	movs	r3, #64	; 0x40
   13428:	2214      	movs	r2, #20
   1342a:	f00f fe23 	bl	23074 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   1342e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   13432:	4904      	ldr	r1, [pc, #16]	; (13444 <nrf_cc3xx_platform_mutex_init+0x24>)
   13434:	4804      	ldr	r0, [pc, #16]	; (13448 <nrf_cc3xx_platform_mutex_init+0x28>)
   13436:	f009 baab 	b.w	1c990 <nrf_cc3xx_platform_set_mutexes>
   1343a:	bf00      	nop
   1343c:	200021e0 	.word	0x200021e0
   13440:	200021c4 	.word	0x200021c4
   13444:	0002449c 	.word	0x0002449c
   13448:	0002448c 	.word	0x0002448c

0001344c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1344c:	4901      	ldr	r1, [pc, #4]	; (13454 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1344e:	2210      	movs	r2, #16
	str	r2, [r1]
   13450:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   13452:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   13454:	e000ed10 	.word	0xe000ed10

00013458 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   13458:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1345a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1345c:	f380 8811 	msr	BASEPRI, r0
	isb
   13460:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   13464:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   13468:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1346a:	b662      	cpsie	i
	isb
   1346c:	f3bf 8f6f 	isb	sy

	bx	lr
   13470:	4770      	bx	lr
   13472:	bf00      	nop

00013474 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   13474:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   13476:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   13478:	f381 8811 	msr	BASEPRI, r1

	wfe
   1347c:	bf20      	wfe

	msr	BASEPRI, r0
   1347e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   13482:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   13484:	4770      	bx	lr
   13486:	bf00      	nop

00013488 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   13488:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1348a:	2b00      	cmp	r3, #0
   1348c:	db08      	blt.n	134a0 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1348e:	2201      	movs	r2, #1
   13490:	f000 001f 	and.w	r0, r0, #31
   13494:	fa02 f000 	lsl.w	r0, r2, r0
   13498:	095b      	lsrs	r3, r3, #5
   1349a:	4a02      	ldr	r2, [pc, #8]	; (134a4 <arch_irq_enable+0x1c>)
   1349c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   134a0:	4770      	bx	lr
   134a2:	bf00      	nop
   134a4:	e000e100 	.word	0xe000e100

000134a8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   134a8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   134aa:	2b00      	cmp	r3, #0
   134ac:	db0d      	blt.n	134ca <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   134ae:	2201      	movs	r2, #1
   134b0:	095b      	lsrs	r3, r3, #5
   134b2:	f000 001f 	and.w	r0, r0, #31
   134b6:	fa02 f000 	lsl.w	r0, r2, r0
   134ba:	3320      	adds	r3, #32
   134bc:	4a03      	ldr	r2, [pc, #12]	; (134cc <arch_irq_disable+0x24>)
   134be:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   134c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   134c6:	f3bf 8f6f 	isb	sy
}
   134ca:	4770      	bx	lr
   134cc:	e000e100 	.word	0xe000e100

000134d0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   134d0:	4b05      	ldr	r3, [pc, #20]	; (134e8 <arch_irq_is_enabled+0x18>)
   134d2:	0942      	lsrs	r2, r0, #5
   134d4:	f000 001f 	and.w	r0, r0, #31
   134d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   134dc:	2301      	movs	r3, #1
   134de:	fa03 f000 	lsl.w	r0, r3, r0
}
   134e2:	4010      	ands	r0, r2
   134e4:	4770      	bx	lr
   134e6:	bf00      	nop
   134e8:	e000e100 	.word	0xe000e100

000134ec <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   134ec:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   134ee:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   134f0:	bf54      	ite	pl
   134f2:	1c8b      	addpl	r3, r1, #2
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   134f4:	2300      	movmi	r3, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   134f6:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   134f8:	bfac      	ite	ge
   134fa:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   134fe:	4a07      	ldrlt	r2, [pc, #28]	; (1351c <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13500:	ea4f 1343 	mov.w	r3, r3, lsl #5
   13504:	bfac      	ite	ge
   13506:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1350a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1350e:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13510:	bfb4      	ite	lt
   13512:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13514:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   13518:	4770      	bx	lr
   1351a:	bf00      	nop
   1351c:	e000ed14 	.word	0xe000ed14

00013520 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   13520:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   13522:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   13524:	4b04      	ldr	r3, [pc, #16]	; (13538 <_arch_isr_direct_pm+0x18>)
   13526:	699a      	ldr	r2, [r3, #24]
   13528:	b11a      	cbz	r2, 13532 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   1352a:	2200      	movs	r2, #0
   1352c:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   1352e:	f00f fdf0 	bl	23112 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   13532:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   13534:	bd08      	pop	{r3, pc}
   13536:	bf00      	nop
   13538:	20002a9c 	.word	0x20002a9c

0001353c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1353c:	bf30      	wfi
    b z_SysNmiOnReset
   1353e:	f7ff bffd 	b.w	1353c <z_SysNmiOnReset>
   13542:	bf00      	nop

00013544 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13544:	4a0b      	ldr	r2, [pc, #44]	; (13574 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   13546:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13548:	4b0b      	ldr	r3, [pc, #44]	; (13578 <z_arm_prep_c+0x34>)
   1354a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1354e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   13550:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13554:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   13558:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1355c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   13560:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   13564:	f007 fad2 	bl	1ab0c <z_bss_zero>
	z_data_copy();
   13568:	f008 fb10 	bl	1bb8c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1356c:	f000 f9d0 	bl	13910 <z_arm_interrupt_init>
	z_cstart();
   13570:	f007 fb10 	bl	1ab94 <z_cstart>
   13574:	00000000 	.word	0x00000000
   13578:	e000ed00 	.word	0xe000ed00

0001357c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   1357c:	4a09      	ldr	r2, [pc, #36]	; (135a4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1357e:	490a      	ldr	r1, [pc, #40]	; (135a8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   13580:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   13582:	6809      	ldr	r1, [r1, #0]
   13584:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13586:	4909      	ldr	r1, [pc, #36]	; (135ac <arch_swap+0x30>)
	_current->arch.basepri = key;
   13588:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1358a:	684b      	ldr	r3, [r1, #4]
   1358c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13590:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   13592:	2300      	movs	r3, #0
   13594:	f383 8811 	msr	BASEPRI, r3
   13598:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1359c:	6893      	ldr	r3, [r2, #8]
}
   1359e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   135a0:	4770      	bx	lr
   135a2:	bf00      	nop
   135a4:	20002a9c 	.word	0x20002a9c
   135a8:	00024938 	.word	0x00024938
   135ac:	e000ed00 	.word	0xe000ed00

000135b0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   135b0:	4912      	ldr	r1, [pc, #72]	; (135fc <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   135b2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   135b4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   135b8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   135ba:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   135be:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   135c2:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   135c4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   135c8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   135cc:	4f0c      	ldr	r7, [pc, #48]	; (13600 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   135ce:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   135d2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   135d4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   135d6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   135d8:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   135da:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   135dc:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   135de:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   135e2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   135e4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   135e6:	f000 fa2f 	bl	13a48 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   135ea:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   135ee:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   135f2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   135f6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   135fa:	4770      	bx	lr
    ldr r1, =_kernel
   135fc:	20002a9c 	.word	0x20002a9c
    ldr v4, =_SCS_ICSR
   13600:	e000ed04 	.word	0xe000ed04

00013604 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   13604:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   13608:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1360a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1360e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   13612:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   13614:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   13618:	2902      	cmp	r1, #2
    beq _oops
   1361a:	d0ff      	beq.n	1361c <_oops>

0001361c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1361c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1361e:	f00c ff27 	bl	20470 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   13622:	bd01      	pop	{r0, pc}

00013624 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   13624:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   13628:	9b00      	ldr	r3, [sp, #0]
   1362a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   1362e:	490a      	ldr	r1, [pc, #40]	; (13658 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   13630:	9b01      	ldr	r3, [sp, #4]
   13632:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   13636:	9b02      	ldr	r3, [sp, #8]
   13638:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   1363c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   13640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   13644:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   13648:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   1364c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1364e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   13650:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   13652:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   13654:	4770      	bx	lr
   13656:	bf00      	nop
   13658:	0001fb63 	.word	0x0001fb63

0001365c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   1365c:	4a09      	ldr	r2, [pc, #36]	; (13684 <z_check_thread_stack_fail+0x28>)
{
   1365e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   13660:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   13662:	b170      	cbz	r0, 13682 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13664:	f113 0f16 	cmn.w	r3, #22
   13668:	6e80      	ldr	r0, [r0, #104]	; 0x68
   1366a:	d005      	beq.n	13678 <z_check_thread_stack_fail+0x1c>
   1366c:	f1a0 0220 	sub.w	r2, r0, #32
   13670:	429a      	cmp	r2, r3
   13672:	d805      	bhi.n	13680 <z_check_thread_stack_fail+0x24>
   13674:	4283      	cmp	r3, r0
   13676:	d203      	bcs.n	13680 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   13678:	4281      	cmp	r1, r0
   1367a:	bf28      	it	cs
   1367c:	2000      	movcs	r0, #0
   1367e:	4770      	bx	lr
   13680:	2000      	movs	r0, #0
}
   13682:	4770      	bx	lr
   13684:	20002a9c 	.word	0x20002a9c

00013688 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   13688:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1368a:	4b09      	ldr	r3, [pc, #36]	; (136b0 <arch_switch_to_main_thread+0x28>)
   1368c:	6098      	str	r0, [r3, #8]
{
   1368e:	460d      	mov	r5, r1
   13690:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   13692:	f000 f9d9 	bl	13a48 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   13696:	4620      	mov	r0, r4
   13698:	f385 8809 	msr	PSP, r5
   1369c:	2100      	movs	r1, #0
   1369e:	b663      	cpsie	if
   136a0:	f381 8811 	msr	BASEPRI, r1
   136a4:	f3bf 8f6f 	isb	sy
   136a8:	2200      	movs	r2, #0
   136aa:	2300      	movs	r3, #0
   136ac:	f00c fa59 	bl	1fb62 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   136b0:	20002a9c 	.word	0x20002a9c

000136b4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   136b4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   136b6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   136b8:	4a0b      	ldr	r2, [pc, #44]	; (136e8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   136ba:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   136bc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   136be:	bf1e      	ittt	ne
	movne	r1, #0
   136c0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   136c2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   136c4:	f00f fd25 	blne	23112 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   136c8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   136ca:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   136ce:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   136d2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   136d6:	4905      	ldr	r1, [pc, #20]	; (136ec <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   136d8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   136da:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   136dc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   136de:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   136e2:	4903      	ldr	r1, [pc, #12]	; (136f0 <_isr_wrapper+0x3c>)
	bx r1
   136e4:	4708      	bx	r1
   136e6:	0000      	.short	0x0000
	ldr r2, =_kernel
   136e8:	20002a9c 	.word	0x20002a9c
	ldr r1, =_sw_isr_table
   136ec:	00023cd4 	.word	0x00023cd4
	ldr r1, =z_arm_int_exit
   136f0:	000136f5 	.word	0x000136f5

000136f4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   136f4:	4b04      	ldr	r3, [pc, #16]	; (13708 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   136f6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   136f8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   136fa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   136fc:	d003      	beq.n	13706 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   136fe:	4903      	ldr	r1, [pc, #12]	; (1370c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   13700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   13704:	600a      	str	r2, [r1, #0]

00013706 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   13706:	4770      	bx	lr
	ldr r3, =_kernel
   13708:	20002a9c 	.word	0x20002a9c
	ldr r1, =_SCS_ICSR
   1370c:	e000ed04 	.word	0xe000ed04

00013710 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   13710:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13712:	4b1c      	ldr	r3, [pc, #112]	; (13784 <mem_manage_fault+0x74>)
{
   13714:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13716:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   13718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1371a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
   1371c:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1371e:	0790      	lsls	r0, r2, #30
   13720:	d520      	bpl.n	13764 <mem_manage_fault+0x54>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   13722:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   13724:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13726:	0612      	lsls	r2, r2, #24
   13728:	d51c      	bpl.n	13764 <mem_manage_fault+0x54>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
   1372a:	b119      	cbz	r1, 13734 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1372c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1372e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   13732:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   13734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   13736:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1373a:	06d2      	lsls	r2, r2, #27
   1373c:	d415      	bmi.n	1376a <mem_manage_fault+0x5a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13740:	079b      	lsls	r3, r3, #30
   13742:	d412      	bmi.n	1376a <mem_manage_fault+0x5a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13744:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   13746:	4b0f      	ldr	r3, [pc, #60]	; (13784 <mem_manage_fault+0x74>)
   13748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1374a:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   1374c:	bf42      	ittt	mi
   1374e:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   13750:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   13754:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   13756:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13758:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   1375c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   1375e:	2300      	movs	r3, #0
   13760:	7023      	strb	r3, [r4, #0]

	return reason;
}
   13762:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
   13764:	f06f 0015 	mvn.w	r0, #21
   13768:	e7e4      	b.n	13734 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   1376a:	4b06      	ldr	r3, [pc, #24]	; (13784 <mem_manage_fault+0x74>)
   1376c:	685b      	ldr	r3, [r3, #4]
   1376e:	0519      	lsls	r1, r3, #20
   13770:	d5e8      	bpl.n	13744 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   13772:	4629      	mov	r1, r5
   13774:	f7ff ff72 	bl	1365c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   13778:	2800      	cmp	r0, #0
   1377a:	d0e3      	beq.n	13744 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1377c:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   13780:	2002      	movs	r0, #2
   13782:	e7e0      	b.n	13746 <mem_manage_fault+0x36>
   13784:	e000ed00 	.word	0xe000ed00

00013788 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13788:	4b0d      	ldr	r3, [pc, #52]	; (137c0 <bus_fault.constprop.0+0x38>)
   1378a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1378c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1378e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13790:	0592      	lsls	r2, r2, #22
   13792:	d508      	bpl.n	137a6 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   13794:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   13796:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13798:	0412      	lsls	r2, r2, #16
   1379a:	d504      	bpl.n	137a6 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   1379c:	b118      	cbz	r0, 137a6 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1379e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   137a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   137a4:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   137a6:	4b06      	ldr	r3, [pc, #24]	; (137c0 <bus_fault.constprop.0+0x38>)
   137a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   137aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   137ac:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   137ae:	bf58      	it	pl
   137b0:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   137b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   137b4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   137b6:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   137ba:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   137bc:	7008      	strb	r0, [r1, #0]

	return reason;
}
   137be:	4770      	bx	lr
   137c0:	e000ed00 	.word	0xe000ed00

000137c4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   137c4:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   137c6:	4b48      	ldr	r3, [pc, #288]	; (138e8 <z_arm_fault+0x124>)
   137c8:	685b      	ldr	r3, [r3, #4]
{
   137ca:	b08a      	sub	sp, #40	; 0x28
   137cc:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   137ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
   137d2:	2600      	movs	r6, #0
   137d4:	f386 8811 	msr	BASEPRI, r6
   137d8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   137dc:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
   137e0:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
   137e4:	d111      	bne.n	1380a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   137e6:	f002 010c 	and.w	r1, r2, #12
   137ea:	2908      	cmp	r1, #8
   137ec:	d00d      	beq.n	1380a <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   137ee:	0711      	lsls	r1, r2, #28
   137f0:	d401      	bmi.n	137f6 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   137f2:	4605      	mov	r5, r0
			*nested_exc = true;
   137f4:	2601      	movs	r6, #1
	*recoverable = false;
   137f6:	2200      	movs	r2, #0
	switch (fault) {
   137f8:	3b03      	subs	r3, #3
	*recoverable = false;
   137fa:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   137fe:	2b03      	cmp	r3, #3
   13800:	d86b      	bhi.n	138da <z_arm_fault+0x116>
   13802:	e8df f003 	tbb	[pc, r3]
   13806:	5504      	.short	0x5504
   13808:	5d59      	.short	0x5d59
		return NULL;
   1380a:	4635      	mov	r5, r6
   1380c:	e7f3      	b.n	137f6 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1380e:	4b36      	ldr	r3, [pc, #216]	; (138e8 <z_arm_fault+0x124>)
   13810:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   13812:	f014 0402 	ands.w	r4, r4, #2
   13816:	d160      	bne.n	138da <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   13818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1381a:	2a00      	cmp	r2, #0
   1381c:	db15      	blt.n	1384a <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1381e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   13820:	0052      	lsls	r2, r2, #1
   13822:	d512      	bpl.n	1384a <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
   13824:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   13826:	f832 1c02 	ldrh.w	r1, [r2, #-2]
   1382a:	f64d 7202 	movw	r2, #57090	; 0xdf02
   1382e:	4291      	cmp	r1, r2
   13830:	d00a      	beq.n	13848 <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
   13832:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   13836:	b30a      	cbz	r2, 1387c <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
   13838:	f10d 0207 	add.w	r2, sp, #7
   1383c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   1383e:	4628      	mov	r0, r5
   13840:	f7ff ff66 	bl	13710 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
   13844:	4604      	mov	r4, r0
		break;
   13846:	e000      	b.n	1384a <z_arm_fault+0x86>
			reason = esf->basic.r0;
   13848:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1384a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1384e:	b99b      	cbnz	r3, 13878 <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   13850:	2220      	movs	r2, #32
   13852:	4629      	mov	r1, r5
   13854:	a802      	add	r0, sp, #8
   13856:	f00c fe7b 	bl	20550 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1385a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1385c:	2e00      	cmp	r6, #0
   1385e:	d03e      	beq.n	138de <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   13860:	f3c3 0208 	ubfx	r2, r3, #0, #9
   13864:	b922      	cbnz	r2, 13870 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   13866:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1386a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1386e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   13870:	a902      	add	r1, sp, #8
   13872:	4620      	mov	r0, r4
   13874:	f00c fdfa 	bl	2046c <z_arm_fatal_error>
}
   13878:	b00a      	add	sp, #40	; 0x28
   1387a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
   1387c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
   13880:	b12a      	cbz	r2, 1388e <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
   13882:	f10d 0107 	add.w	r1, sp, #7
   13886:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   13888:	f7ff ff7e 	bl	13788 <bus_fault.constprop.0>
   1388c:	e7da      	b.n	13844 <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
   1388e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
   13890:	b292      	uxth	r2, r2
   13892:	2a00      	cmp	r2, #0
   13894:	d0d9      	beq.n	1384a <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   13896:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   13898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1389a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1389c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1389e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   138a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   138a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   138a4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   138a8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   138ac:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
   138ae:	e7cc      	b.n	1384a <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
   138b0:	f10d 0207 	add.w	r2, sp, #7
   138b4:	2100      	movs	r1, #0
   138b6:	e7c2      	b.n	1383e <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
   138b8:	f10d 0107 	add.w	r1, sp, #7
   138bc:	2000      	movs	r0, #0
   138be:	e7e3      	b.n	13888 <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   138c0:	4b09      	ldr	r3, [pc, #36]	; (138e8 <z_arm_fault+0x124>)
   138c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   138c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   138c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   138c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   138ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   138cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   138ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   138d0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   138d4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   138d8:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   138da:	2400      	movs	r4, #0
   138dc:	e7b5      	b.n	1384a <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   138de:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   138e2:	f023 0301 	bic.w	r3, r3, #1
   138e6:	e7c2      	b.n	1386e <z_arm_fault+0xaa>
   138e8:	e000ed00 	.word	0xe000ed00

000138ec <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   138ec:	4a02      	ldr	r2, [pc, #8]	; (138f8 <z_arm_fault_init+0xc>)
   138ee:	6953      	ldr	r3, [r2, #20]
   138f0:	f043 0310 	orr.w	r3, r3, #16
   138f4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   138f6:	4770      	bx	lr
   138f8:	e000ed00 	.word	0xe000ed00

000138fc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   138fc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   13900:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   13904:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   13906:	4672      	mov	r2, lr
	bl z_arm_fault
   13908:	f7ff ff5c 	bl	137c4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1390c:	bd01      	pop	{r0, pc}
   1390e:	bf00      	nop

00013910 <z_arm_interrupt_init>:
   13910:	4804      	ldr	r0, [pc, #16]	; (13924 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   13912:	2300      	movs	r3, #0
   13914:	2140      	movs	r1, #64	; 0x40
   13916:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   13918:	3301      	adds	r3, #1
   1391a:	2b30      	cmp	r3, #48	; 0x30
   1391c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   13920:	d1f9      	bne.n	13916 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   13922:	4770      	bx	lr
   13924:	e000e100 	.word	0xe000e100

00013928 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   13928:	2000      	movs	r0, #0
    msr CONTROL, r0
   1392a:	f380 8814 	msr	CONTROL, r0
    isb
   1392e:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   13932:	f010 f8e5 	bl	23b00 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   13936:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   13938:	490d      	ldr	r1, [pc, #52]	; (13970 <__start+0x48>)
    str r0, [r1]
   1393a:	6008      	str	r0, [r1, #0]
    dsb
   1393c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13940:	480c      	ldr	r0, [pc, #48]	; (13974 <__start+0x4c>)
    msr msp, r0
   13942:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   13946:	f000 f82b 	bl	139a0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1394a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   1394c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   13950:	4809      	ldr	r0, [pc, #36]	; (13978 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   13952:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   13956:	1840      	adds	r0, r0, r1
    msr PSP, r0
   13958:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1395c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   13960:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   13962:	4308      	orrs	r0, r1
    msr CONTROL, r0
   13964:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   13968:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1396c:	f7ff fdea 	bl	13544 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   13970:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13974:	20005a80 	.word	0x20005a80
    ldr r0, =z_interrupt_stacks
   13978:	20005c00 	.word	0x20005c00

0001397c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   1397c:	4907      	ldr	r1, [pc, #28]	; (1399c <z_arm_clear_arm_mpu_config+0x20>)
   1397e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   13982:	2300      	movs	r3, #0
	int num_regions =
   13984:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   13988:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   1398a:	4293      	cmp	r3, r2
   1398c:	d100      	bne.n	13990 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   1398e:	4770      	bx	lr
  MPU->RNR = rnr;
   13990:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   13994:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   13998:	3301      	adds	r3, #1
   1399a:	e7f6      	b.n	1398a <z_arm_clear_arm_mpu_config+0xe>
   1399c:	e000ed00 	.word	0xe000ed00

000139a0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   139a0:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   139a2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   139a4:	2300      	movs	r3, #0
   139a6:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   139aa:	f7ff ffe7 	bl	1397c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   139ae:	4b14      	ldr	r3, [pc, #80]	; (13a00 <z_arm_init_arch_hw_at_boot+0x60>)
   139b0:	f04f 32ff 	mov.w	r2, #4294967295
   139b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   139b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   139bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   139c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   139c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   139c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   139cc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   139d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   139d4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   139d8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   139dc:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   139e0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   139e4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   139e8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   139ec:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   139f0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   139f4:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   139f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   139fa:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   139fe:	bd08      	pop	{r3, pc}
   13a00:	e000e100 	.word	0xe000e100

00013a04 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   13a04:	4b08      	ldr	r3, [pc, #32]	; (13a28 <z_impl_k_thread_abort+0x24>)
   13a06:	689b      	ldr	r3, [r3, #8]
   13a08:	4283      	cmp	r3, r0
   13a0a:	d10b      	bne.n	13a24 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13a0c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   13a10:	b143      	cbz	r3, 13a24 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13a12:	4b06      	ldr	r3, [pc, #24]	; (13a2c <z_impl_k_thread_abort+0x28>)
   13a14:	685a      	ldr	r2, [r3, #4]
   13a16:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   13a1a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   13a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   13a1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   13a22:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   13a24:	f008 b84e 	b.w	1bac4 <z_thread_abort>
   13a28:	20002a9c 	.word	0x20002a9c
   13a2c:	e000ed00 	.word	0xe000ed00

00013a30 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13a30:	4b02      	ldr	r3, [pc, #8]	; (13a3c <z_arm_configure_static_mpu_regions+0xc>)
   13a32:	4a03      	ldr	r2, [pc, #12]	; (13a40 <z_arm_configure_static_mpu_regions+0x10>)
   13a34:	4803      	ldr	r0, [pc, #12]	; (13a44 <z_arm_configure_static_mpu_regions+0x14>)
   13a36:	2101      	movs	r1, #1
   13a38:	f000 b86e 	b.w	13b18 <arm_core_mpu_configure_static_mpu_regions>
   13a3c:	20040000 	.word	0x20040000
   13a40:	20000000 	.word	0x20000000
   13a44:	000244b0 	.word	0x000244b0

00013a48 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   13a48:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   13a4a:	4b05      	ldr	r3, [pc, #20]	; (13a60 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   13a4c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   13a4e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   13a50:	4a04      	ldr	r2, [pc, #16]	; (13a64 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   13a52:	2120      	movs	r1, #32
   13a54:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   13a58:	4618      	mov	r0, r3
   13a5a:	2101      	movs	r1, #1
   13a5c:	f000 b866 	b.w	13b2c <arm_core_mpu_configure_dynamic_mpu_regions>
   13a60:	200026e0 	.word	0x200026e0
   13a64:	150b0000 	.word	0x150b0000

00013a68 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   13a68:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   13a6a:	4f1f      	ldr	r7, [pc, #124]	; (13ae8 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   13a6c:	2600      	movs	r6, #0
   13a6e:	428e      	cmp	r6, r1
   13a70:	db01      	blt.n	13a76 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   13a72:	4610      	mov	r0, r2
   13a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   13a76:	6844      	ldr	r4, [r0, #4]
   13a78:	b39c      	cbz	r4, 13ae2 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
   13a7a:	b153      	cbz	r3, 13a92 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   13a7c:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   13a80:	ea14 0f0c 	tst.w	r4, ip
   13a84:	d118      	bne.n	13ab8 <mpu_configure_regions+0x50>
		&&
   13a86:	2c1f      	cmp	r4, #31
   13a88:	d916      	bls.n	13ab8 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
   13a8a:	6805      	ldr	r5, [r0, #0]
		&&
   13a8c:	ea1c 0f05 	tst.w	ip, r5
   13a90:	d112      	bne.n	13ab8 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   13a92:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   13a94:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   13a96:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   13a9a:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
   13a9c:	d90f      	bls.n	13abe <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
   13a9e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   13aa2:	d80e      	bhi.n	13ac2 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   13aa4:	3c01      	subs	r4, #1
   13aa6:	fab4 f484 	clz	r4, r4
   13aaa:	f1c4 041f 	rsb	r4, r4, #31
   13aae:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   13ab0:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   13ab2:	ea4c 0404 	orr.w	r4, ip, r4
   13ab6:	d906      	bls.n	13ac6 <mpu_configure_regions+0x5e>
			return -EINVAL;
   13ab8:	f06f 0215 	mvn.w	r2, #21
   13abc:	e7d9      	b.n	13a72 <mpu_configure_regions+0xa>
		return REGION_32B;
   13abe:	2408      	movs	r4, #8
   13ac0:	e7f6      	b.n	13ab0 <mpu_configure_regions+0x48>
		return REGION_4G;
   13ac2:	243e      	movs	r4, #62	; 0x3e
   13ac4:	e7f4      	b.n	13ab0 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13ac6:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
   13aca:	4315      	orrs	r5, r2
   13acc:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13ad0:	f044 0401 	orr.w	r4, r4, #1
   13ad4:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13ad8:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
   13adc:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13ade:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   13ae2:	3601      	adds	r6, #1
   13ae4:	300c      	adds	r0, #12
   13ae6:	e7c2      	b.n	13a6e <mpu_configure_regions+0x6>
   13ae8:	e000ed00 	.word	0xe000ed00

00013aec <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   13aec:	4b04      	ldr	r3, [pc, #16]	; (13b00 <arm_core_mpu_enable+0x14>)
   13aee:	2205      	movs	r2, #5
   13af0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   13af4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13af8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   13afc:	4770      	bx	lr
   13afe:	bf00      	nop
   13b00:	e000ed00 	.word	0xe000ed00

00013b04 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   13b04:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   13b08:	4b02      	ldr	r3, [pc, #8]	; (13b14 <arm_core_mpu_disable+0x10>)
   13b0a:	2200      	movs	r2, #0
   13b0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   13b10:	4770      	bx	lr
   13b12:	bf00      	nop
   13b14:	e000ed00 	.word	0xe000ed00

00013b18 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   13b18:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   13b1a:	4c03      	ldr	r4, [pc, #12]	; (13b28 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   13b1c:	2301      	movs	r3, #1
   13b1e:	7822      	ldrb	r2, [r4, #0]
   13b20:	f7ff ffa2 	bl	13a68 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   13b24:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   13b26:	bd10      	pop	{r4, pc}
   13b28:	200035bb 	.word	0x200035bb

00013b2c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   13b2c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   13b2e:	4a09      	ldr	r2, [pc, #36]	; (13b54 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   13b30:	2300      	movs	r3, #0
   13b32:	7812      	ldrb	r2, [r2, #0]
   13b34:	f7ff ff98 	bl	13a68 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   13b38:	f110 0f16 	cmn.w	r0, #22
   13b3c:	d002      	beq.n	13b44 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
   13b3e:	4a06      	ldr	r2, [pc, #24]	; (13b58 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   13b40:	2807      	cmp	r0, #7
   13b42:	dd00      	ble.n	13b46 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   13b44:	bd08      	pop	{r3, pc}
   13b46:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   13b4a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
   13b4e:	3001      	adds	r0, #1
   13b50:	e7f6      	b.n	13b40 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
   13b52:	bf00      	nop
   13b54:	200035bb 	.word	0x200035bb
   13b58:	e000ed00 	.word	0xe000ed00

00013b5c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   13b5c:	4914      	ldr	r1, [pc, #80]	; (13bb0 <z_arm_mpu_init+0x54>)
   13b5e:	6808      	ldr	r0, [r1, #0]
   13b60:	2808      	cmp	r0, #8
{
   13b62:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   13b64:	d821      	bhi.n	13baa <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   13b66:	f7ff ffcd 	bl	13b04 <arm_core_mpu_disable>
   13b6a:	4c12      	ldr	r4, [pc, #72]	; (13bb4 <z_arm_mpu_init+0x58>)
   13b6c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13b6e:	2200      	movs	r2, #0
   13b70:	4290      	cmp	r0, r2
   13b72:	f101 010c 	add.w	r1, r1, #12
   13b76:	d105      	bne.n	13b84 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   13b78:	4b0f      	ldr	r3, [pc, #60]	; (13bb8 <z_arm_mpu_init+0x5c>)
   13b7a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   13b7c:	f7ff ffb6 	bl	13aec <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   13b80:	2000      	movs	r0, #0
}
   13b82:	bd10      	pop	{r4, pc}
   13b84:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13b88:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   13b8c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   13b90:	4313      	orrs	r3, r2
   13b92:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13b96:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13b9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
   13b9e:	f043 0301 	orr.w	r3, r3, #1
   13ba2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13ba6:	3201      	adds	r2, #1
   13ba8:	e7e2      	b.n	13b70 <z_arm_mpu_init+0x14>
		return -1;
   13baa:	f04f 30ff 	mov.w	r0, #4294967295
   13bae:	e7e8      	b.n	13b82 <z_arm_mpu_init+0x26>
   13bb0:	000244bc 	.word	0x000244bc
   13bb4:	e000ed00 	.word	0xe000ed00
   13bb8:	200035bb 	.word	0x200035bb

00013bbc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   13bbc:	4b01      	ldr	r3, [pc, #4]	; (13bc4 <__stdout_hook_install+0x8>)
   13bbe:	6018      	str	r0, [r3, #0]
}
   13bc0:	4770      	bx	lr
   13bc2:	bf00      	nop
   13bc4:	200006f4 	.word	0x200006f4

00013bc8 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   13bc8:	f04f 0240 	mov.w	r2, #64	; 0x40
   13bcc:	f3ef 8311 	mrs	r3, BASEPRI
   13bd0:	f382 8812 	msr	BASEPRI_MAX, r2
   13bd4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   13bd8:	4a04      	ldr	r2, [pc, #16]	; (13bec <nordicsemi_nrf52_init+0x24>)
   13bda:	2101      	movs	r1, #1
   13bdc:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   13be0:	f383 8811 	msr	BASEPRI, r3
   13be4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   13be8:	2000      	movs	r0, #0
   13bea:	4770      	bx	lr
   13bec:	4001e000 	.word	0x4001e000

00013bf0 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
   13bf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13bf4:	b2c0      	uxtb	r0, r0
   13bf6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   13bfa:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13bfe:	4905      	ldr	r1, [pc, #20]	; (13c14 <sys_arch_reboot+0x24>)
   13c00:	4b05      	ldr	r3, [pc, #20]	; (13c18 <sys_arch_reboot+0x28>)
   13c02:	68ca      	ldr	r2, [r1, #12]
   13c04:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13c08:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13c0a:	60cb      	str	r3, [r1, #12]
   13c0c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   13c10:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   13c12:	e7fd      	b.n	13c10 <sys_arch_reboot+0x20>
   13c14:	e000ed00 	.word	0xe000ed00
   13c18:	05fa0004 	.word	0x05fa0004

00013c1c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   13c1c:	b120      	cbz	r0, 13c28 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   13c1e:	4b03      	ldr	r3, [pc, #12]	; (13c2c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   13c20:	0180      	lsls	r0, r0, #6
   13c22:	f043 0301 	orr.w	r3, r3, #1
   13c26:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   13c28:	4770      	bx	lr
   13c2a:	bf00      	nop
   13c2c:	00023fa0 	.word	0x00023fa0

00013c30 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   13c30:	b430      	push	{r4, r5}
   13c32:	4603      	mov	r3, r0
   13c34:	4608      	mov	r0, r1
	switch (src->type) {
   13c36:	781a      	ldrb	r2, [r3, #0]
   13c38:	2a01      	cmp	r2, #1
   13c3a:	d013      	beq.n	13c64 <uuid_to_uuid128+0x34>
   13c3c:	2a02      	cmp	r2, #2
   13c3e:	d026      	beq.n	13c8e <uuid_to_uuid128+0x5e>
   13c40:	b972      	cbnz	r2, 13c60 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   13c42:	4a15      	ldr	r2, [pc, #84]	; (13c98 <uuid_to_uuid128+0x68>)
   13c44:	f102 0410 	add.w	r4, r2, #16
   13c48:	f852 5b04 	ldr.w	r5, [r2], #4
   13c4c:	f841 5b04 	str.w	r5, [r1], #4
   13c50:	42a2      	cmp	r2, r4
   13c52:	d1f9      	bne.n	13c48 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
   13c54:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
   13c56:	7812      	ldrb	r2, [r2, #0]
   13c58:	700a      	strb	r2, [r1, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   13c5a:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   13c5c:	0a1b      	lsrs	r3, r3, #8
   13c5e:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   13c60:	bc30      	pop	{r4, r5}
   13c62:	4770      	bx	lr
		*dst = uuid128_base;
   13c64:	4a0c      	ldr	r2, [pc, #48]	; (13c98 <uuid_to_uuid128+0x68>)
   13c66:	f102 0410 	add.w	r4, r2, #16
   13c6a:	f852 5b04 	ldr.w	r5, [r2], #4
   13c6e:	f841 5b04 	str.w	r5, [r1], #4
   13c72:	42a2      	cmp	r2, r4
   13c74:	d1f9      	bne.n	13c6a <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
   13c76:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
   13c78:	7812      	ldrb	r2, [r2, #0]
   13c7a:	700a      	strb	r2, [r1, #0]
   13c7c:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   13c80:	7343      	strb	r3, [r0, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   13c82:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   13c84:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   13c86:	0a1b      	lsrs	r3, r3, #8
   13c88:	7382      	strb	r2, [r0, #14]
   13c8a:	7403      	strb	r3, [r0, #16]
}
   13c8c:	e7e8      	b.n	13c60 <uuid_to_uuid128+0x30>
}
   13c8e:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   13c90:	2211      	movs	r2, #17
   13c92:	4619      	mov	r1, r3
   13c94:	f00c bc5c 	b.w	20550 <memcpy>
   13c98:	000251b5 	.word	0x000251b5

00013c9c <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   13c9c:	b538      	push	{r3, r4, r5, lr}
   13c9e:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   13ca0:	4805      	ldr	r0, [pc, #20]	; (13cb8 <bt_buf_get_rx+0x1c>)
   13ca2:	f00e fbe4 	bl	2246e <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   13ca6:	4604      	mov	r4, r0
   13ca8:	b120      	cbz	r0, 13cb4 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   13caa:	2100      	movs	r1, #0
   13cac:	3008      	adds	r0, #8
   13cae:	f00e fbfd 	bl	224ac <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13cb2:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   13cb4:	4620      	mov	r0, r4
   13cb6:	bd38      	pop	{r3, r4, r5, pc}
   13cb8:	20000c78 	.word	0x20000c78

00013cbc <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   13cbc:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   13cbe:	490b      	ldr	r1, [pc, #44]	; (13cec <bt_buf_get_cmd_complete+0x30>)
{
   13cc0:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   13cc2:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
{
   13cc6:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   13cc8:	b920      	cbnz	r0, 13cd4 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   13cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13cce:	2001      	movs	r0, #1
   13cd0:	f7ff bfe4 	b.w	13c9c <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   13cd4:	f00e fc44 	bl	22560 <net_buf_ref>
   13cd8:	2301      	movs	r3, #1
		buf->len = 0U;
   13cda:	2100      	movs	r1, #0
   13cdc:	7503      	strb	r3, [r0, #20]
   13cde:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   13ce0:	4604      	mov	r4, r0
   13ce2:	3008      	adds	r0, #8
   13ce4:	f00e fbe2 	bl	224ac <net_buf_simple_reserve>
}
   13ce8:	4620      	mov	r0, r4
   13cea:	bd10      	pop	{r4, pc}
   13cec:	200002c8 	.word	0x200002c8

00013cf0 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   13cf0:	b570      	push	{r4, r5, r6, lr}
   13cf2:	4604      	mov	r4, r0
	switch (evt) {
   13cf4:	2c0f      	cmp	r4, #15
{
   13cf6:	460d      	mov	r5, r1
   13cf8:	4610      	mov	r0, r2
   13cfa:	4619      	mov	r1, r3
	switch (evt) {
   13cfc:	d805      	bhi.n	13d0a <bt_buf_get_evt+0x1a>
   13cfe:	2c0d      	cmp	r4, #13
   13d00:	d912      	bls.n	13d28 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   13d02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   13d06:	f7ff bfd9 	b.w	13cbc <bt_buf_get_cmd_complete>
	switch (evt) {
   13d0a:	2c13      	cmp	r4, #19
   13d0c:	d10c      	bne.n	13d28 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   13d0e:	480b      	ldr	r0, [pc, #44]	; (13d3c <bt_buf_get_evt+0x4c>)
   13d10:	f00e fbad 	bl	2246e <net_buf_alloc_fixed>
			if (buf) {
   13d14:	4604      	mov	r4, r0
   13d16:	b128      	cbz	r0, 13d24 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   13d18:	2100      	movs	r1, #0
   13d1a:	3008      	adds	r0, #8
   13d1c:	f00e fbc6 	bl	224ac <net_buf_simple_reserve>
   13d20:	2301      	movs	r3, #1
   13d22:	7523      	strb	r3, [r4, #20]
}
   13d24:	4620      	mov	r0, r4
   13d26:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   13d28:	4602      	mov	r2, r0
   13d2a:	460b      	mov	r3, r1
		if (discardable) {
   13d2c:	b10d      	cbz	r5, 13d32 <bt_buf_get_evt+0x42>
   13d2e:	4804      	ldr	r0, [pc, #16]	; (13d40 <bt_buf_get_evt+0x50>)
   13d30:	e7ee      	b.n	13d10 <bt_buf_get_evt+0x20>
}
   13d32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13d36:	2001      	movs	r0, #1
   13d38:	f7ff bfb0 	b.w	13c9c <bt_buf_get_rx>
   13d3c:	20000ca4 	.word	0x20000ca4
   13d40:	20000bf4 	.word	0x20000bf4

00013d44 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   13d44:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   13d46:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
   13d48:	781a      	ldrb	r2, [r3, #0]
   13d4a:	b972      	cbnz	r2, 13d6a <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13d4c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   13d50:	4620      	mov	r0, r4
   13d52:	f001 fc8d 	bl	15670 <bt_conn_lookup_handle>
	if (!conn) {
   13d56:	4605      	mov	r5, r0
   13d58:	b940      	cbnz	r0, 13d6c <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   13d5a:	4b08      	ldr	r3, [pc, #32]	; (13d7c <hci_disconn_complete_prio+0x38>)
   13d5c:	881a      	ldrh	r2, [r3, #0]
   13d5e:	b922      	cbnz	r2, 13d6a <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   13d60:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   13d64:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   13d68:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   13d6a:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   13d6c:	2101      	movs	r1, #1
   13d6e:	f001 fc87 	bl	15680 <bt_conn_set_state>
	bt_conn_unref(conn);
   13d72:	4628      	mov	r0, r5
}
   13d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   13d78:	f00d b8fd 	b.w	20f76 <bt_conn_unref>
   13d7c:	200035a0 	.word	0x200035a0

00013d80 <hci_le_meta_event>:
#endif /* CONFIG_BT_DF_CONNECTION_CTE_REQ */

};

static void hci_le_meta_event(struct net_buf *buf)
{
   13d80:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   13d82:	2101      	movs	r1, #1
   13d84:	4604      	mov	r4, r0
   13d86:	3008      	adds	r0, #8
   13d88:	f00e fc37 	bl	225fa <net_buf_simple_pull_mem>

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   13d8c:	4621      	mov	r1, r4
   13d8e:	4a03      	ldr	r2, [pc, #12]	; (13d9c <hci_le_meta_event+0x1c>)
   13d90:	7800      	ldrb	r0, [r0, #0]
}
   13d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   13d96:	2307      	movs	r3, #7
   13d98:	f00c bc6c 	b.w	20674 <handle_event>
   13d9c:	0002450c 	.word	0x0002450c

00013da0 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   13da0:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   13da2:	4c0c      	ldr	r4, [pc, #48]	; (13dd4 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   13da4:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   13da6:	2205      	movs	r2, #5
   13da8:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   13dac:	f001 fdfc 	bl	159a8 <bt_conn_lookup_state_le>
		if (!conn) {
   13db0:	b970      	cbnz	r0, 13dd0 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   13db2:	4b09      	ldr	r3, [pc, #36]	; (13dd8 <find_pending_connect.part.0+0x38>)
   13db4:	6818      	ldr	r0, [r3, #0]
   13db6:	889a      	ldrh	r2, [r3, #4]
   13db8:	9000      	str	r0, [sp, #0]
   13dba:	799b      	ldrb	r3, [r3, #6]
   13dbc:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   13dc0:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   13dc4:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   13dc8:	2204      	movs	r2, #4
   13dca:	4669      	mov	r1, sp
   13dcc:	f001 fdec 	bl	159a8 <bt_conn_lookup_state_le>
}
   13dd0:	b002      	add	sp, #8
   13dd2:	bd10      	pop	{r4, pc}
   13dd4:	200002c8 	.word	0x200002c8
   13dd8:	00023f7c 	.word	0x00023f7c

00013ddc <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   13ddc:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   13dde:	483c      	ldr	r0, [pc, #240]	; (13ed0 <rx_work_handler+0xf4>)
   13de0:	f00e fb86 	bl	224f0 <net_buf_slist_get>
	if (!buf) {
   13de4:	4604      	mov	r4, r0
   13de6:	2800      	cmp	r0, #0
   13de8:	d071      	beq.n	13ece <rx_work_handler+0xf2>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   13dea:	7d03      	ldrb	r3, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
   13dec:	2b01      	cmp	r3, #1
   13dee:	d03f      	beq.n	13e70 <rx_work_handler+0x94>
   13df0:	2b03      	cmp	r3, #3
   13df2:	d11f      	bne.n	13e34 <rx_work_handler+0x58>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13df4:	8983      	ldrh	r3, [r0, #12]
   13df6:	2b03      	cmp	r3, #3
   13df8:	d80c      	bhi.n	13e14 <rx_work_handler+0x38>
   13dfa:	4a36      	ldr	r2, [pc, #216]	; (13ed4 <rx_work_handler+0xf8>)
   13dfc:	4936      	ldr	r1, [pc, #216]	; (13ed8 <rx_work_handler+0xfc>)
   13dfe:	4837      	ldr	r0, [pc, #220]	; (13edc <rx_work_handler+0x100>)
   13e00:	f240 13d9 	movw	r3, #473	; 0x1d9
   13e04:	f00c f8d9 	bl	1ffba <assert_print>
   13e08:	4040      	eors	r0, r0
   13e0a:	f380 8811 	msr	BASEPRI, r0
   13e0e:	f04f 0003 	mov.w	r0, #3
   13e12:	df02      	svc	2
   13e14:	2104      	movs	r1, #4
   13e16:	f104 0008 	add.w	r0, r4, #8
   13e1a:	f00e fbee 	bl	225fa <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   13e1e:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   13e20:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   13e22:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   13e24:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   13e26:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   13e28:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   13e2c:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   13e2e:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   13e30:	d003      	beq.n	13e3a <rx_work_handler+0x5e>
	net_buf_unref(buf);
   13e32:	4620      	mov	r0, r4
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   13e34:	f003 fa98 	bl	17368 <net_buf_unref>
		break;
   13e38:	e00f      	b.n	13e5a <rx_work_handler+0x7e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   13e3a:	f001 fc19 	bl	15670 <bt_conn_lookup_handle>
	if (!conn) {
   13e3e:	4605      	mov	r5, r0
   13e40:	2800      	cmp	r0, #0
   13e42:	d0f6      	beq.n	13e32 <rx_work_handler+0x56>
	acl(buf)->index = bt_conn_index(conn);
   13e44:	f001 fccc 	bl	157e0 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   13e48:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   13e4a:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   13e4c:	4621      	mov	r1, r4
   13e4e:	4628      	mov	r0, r5
   13e50:	f00d f829 	bl	20ea6 <bt_conn_recv>
	bt_conn_unref(conn);
   13e54:	4628      	mov	r0, r5
   13e56:	f00d f88e 	bl	20f76 <bt_conn_unref>
	return list->head;
   13e5a:	4b21      	ldr	r3, [pc, #132]	; (13ee0 <rx_work_handler+0x104>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   13e5c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   13e60:	2b00      	cmp	r3, #0
   13e62:	d034      	beq.n	13ece <rx_work_handler+0xf2>
#endif
		if (err < 0) {
			BT_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   13e64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   13e68:	491e      	ldr	r1, [pc, #120]	; (13ee4 <rx_work_handler+0x108>)
   13e6a:	481f      	ldr	r0, [pc, #124]	; (13ee8 <rx_work_handler+0x10c>)
   13e6c:	f00f bacd 	b.w	2340a <k_work_submit_to_queue>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13e70:	8983      	ldrh	r3, [r0, #12]
   13e72:	2b01      	cmp	r3, #1
   13e74:	d80c      	bhi.n	13e90 <rx_work_handler+0xb4>
   13e76:	4a17      	ldr	r2, [pc, #92]	; (13ed4 <rx_work_handler+0xf8>)
   13e78:	4917      	ldr	r1, [pc, #92]	; (13ed8 <rx_work_handler+0xfc>)
   13e7a:	4818      	ldr	r0, [pc, #96]	; (13edc <rx_work_handler+0x100>)
   13e7c:	f640 1337 	movw	r3, #2359	; 0x937
   13e80:	f00c f89b 	bl	1ffba <assert_print>
   13e84:	4040      	eors	r0, r0
   13e86:	f380 8811 	msr	BASEPRI, r0
   13e8a:	f04f 0003 	mov.w	r0, #3
   13e8e:	df02      	svc	2
   13e90:	2102      	movs	r1, #2
   13e92:	f104 0008 	add.w	r0, r4, #8
   13e96:	f00e fbb0 	bl	225fa <net_buf_simple_pull_mem>
   13e9a:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   13e9c:	7800      	ldrb	r0, [r0, #0]
   13e9e:	f00c fbd7 	bl	20650 <bt_hci_evt_get_flags>
   13ea2:	0783      	lsls	r3, r0, #30
   13ea4:	d40c      	bmi.n	13ec0 <rx_work_handler+0xe4>
   13ea6:	4a0b      	ldr	r2, [pc, #44]	; (13ed4 <rx_work_handler+0xf8>)
   13ea8:	4910      	ldr	r1, [pc, #64]	; (13eec <rx_work_handler+0x110>)
   13eaa:	480c      	ldr	r0, [pc, #48]	; (13edc <rx_work_handler+0x100>)
   13eac:	f640 133b 	movw	r3, #2363	; 0x93b
   13eb0:	f00c f883 	bl	1ffba <assert_print>
   13eb4:	4040      	eors	r0, r0
   13eb6:	f380 8811 	msr	BASEPRI, r0
   13eba:	f04f 0003 	mov.w	r0, #3
   13ebe:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   13ec0:	4a0b      	ldr	r2, [pc, #44]	; (13ef0 <rx_work_handler+0x114>)
   13ec2:	7828      	ldrb	r0, [r5, #0]
   13ec4:	2304      	movs	r3, #4
   13ec6:	4621      	mov	r1, r4
   13ec8:	f00c fbd4 	bl	20674 <handle_event>
   13ecc:	e7b1      	b.n	13e32 <rx_work_handler+0x56>
}
   13ece:	bd70      	pop	{r4, r5, r6, pc}
   13ed0:	200003fc 	.word	0x200003fc
   13ed4:	000251c6 	.word	0x000251c6
   13ed8:	000251fa 	.word	0x000251fa
   13edc:	00025213 	.word	0x00025213
   13ee0:	200002c8 	.word	0x200002c8
   13ee4:	20000734 	.word	0x20000734
   13ee8:	20001a78 	.word	0x20001a78
   13eec:	00025230 	.word	0x00025230
   13ef0:	00024554 	.word	0x00024554

00013ef4 <hci_cmd_done>:
{
   13ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13ef6:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   13ef8:	7990      	ldrb	r0, [r2, #6]
{
   13efa:	460e      	mov	r6, r1
   13efc:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   13efe:	f003 f96f 	bl	171e0 <net_buf_pool_get>
   13f02:	4b28      	ldr	r3, [pc, #160]	; (13fa4 <hci_cmd_done+0xb0>)
   13f04:	4283      	cmp	r3, r0
   13f06:	d14b      	bne.n	13fa0 <hci_cmd_done+0xac>
	if (cmd(buf)->opcode != opcode) {
   13f08:	4620      	mov	r0, r4
   13f0a:	f003 f971 	bl	171f0 <net_buf_id>
   13f0e:	4d26      	ldr	r5, [pc, #152]	; (13fa8 <hci_cmd_done+0xb4>)
   13f10:	230c      	movs	r3, #12
   13f12:	fb03 5000 	mla	r0, r3, r0, r5
   13f16:	8843      	ldrh	r3, [r0, #2]
   13f18:	42bb      	cmp	r3, r7
   13f1a:	d141      	bne.n	13fa0 <hci_cmd_done+0xac>
	if (bt_dev.sent_cmd) {
   13f1c:	4f23      	ldr	r7, [pc, #140]	; (13fac <hci_cmd_done+0xb8>)
   13f1e:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   13f22:	b120      	cbz	r0, 13f2e <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
   13f24:	f003 fa20 	bl	17368 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   13f28:	2300      	movs	r3, #0
   13f2a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   13f2e:	4620      	mov	r0, r4
   13f30:	f003 f95e 	bl	171f0 <net_buf_id>
   13f34:	270c      	movs	r7, #12
   13f36:	fb07 5000 	mla	r0, r7, r0, r5
   13f3a:	6843      	ldr	r3, [r0, #4]
   13f3c:	b19b      	cbz	r3, 13f66 <hci_cmd_done+0x72>
   13f3e:	b996      	cbnz	r6, 13f66 <hci_cmd_done+0x72>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   13f40:	4620      	mov	r0, r4
   13f42:	f003 f955 	bl	171f0 <net_buf_id>
   13f46:	fb07 5000 	mla	r0, r7, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   13f4a:	2101      	movs	r1, #1
   13f4c:	6842      	ldr	r2, [r0, #4]
   13f4e:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   13f52:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   13f54:	f003 071f 	and.w	r7, r3, #31
   13f58:	40b9      	lsls	r1, r7
	if (val) {
   13f5a:	095b      	lsrs	r3, r3, #5
   13f5c:	b1d2      	cbz	r2, 13f94 <hci_cmd_done+0xa0>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13f5e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   13f62:	f00c fbc8 	bl	206f6 <atomic_or>
	if (cmd(buf)->sync) {
   13f66:	4620      	mov	r0, r4
   13f68:	f003 f942 	bl	171f0 <net_buf_id>
   13f6c:	270c      	movs	r7, #12
   13f6e:	fb07 5000 	mla	r0, r7, r0, r5
   13f72:	6883      	ldr	r3, [r0, #8]
   13f74:	b1a3      	cbz	r3, 13fa0 <hci_cmd_done+0xac>
		cmd(buf)->status = status;
   13f76:	4620      	mov	r0, r4
   13f78:	f003 f93a 	bl	171f0 <net_buf_id>
   13f7c:	4378      	muls	r0, r7
   13f7e:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   13f80:	4620      	mov	r0, r4
   13f82:	f003 f935 	bl	171f0 <net_buf_id>
   13f86:	fb07 5500 	mla	r5, r7, r0, r5
   13f8a:	68a8      	ldr	r0, [r5, #8]
}
   13f8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   13f90:	f007 b892 	b.w	1b0b8 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13f94:	43c9      	mvns	r1, r1
   13f96:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   13f9a:	f00c fc21 	bl	207e0 <atomic_and.isra.0>
   13f9e:	e7e2      	b.n	13f66 <hci_cmd_done+0x72>
   13fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13fa2:	bf00      	nop
   13fa4:	20000c4c 	.word	0x20000c4c
   13fa8:	200026ec 	.word	0x200026ec
   13fac:	200002c8 	.word	0x200002c8

00013fb0 <hci_cmd_status>:
{
   13fb0:	b538      	push	{r3, r4, r5, lr}
   13fb2:	2104      	movs	r1, #4
   13fb4:	4604      	mov	r4, r0
   13fb6:	3008      	adds	r0, #8
   13fb8:	f00e fb1f 	bl	225fa <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   13fbc:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   13fbe:	7801      	ldrb	r1, [r0, #0]
   13fc0:	8840      	ldrh	r0, [r0, #2]
   13fc2:	4622      	mov	r2, r4
   13fc4:	f7ff ff96 	bl	13ef4 <hci_cmd_done>
	if (ncmd) {
   13fc8:	b125      	cbz	r5, 13fd4 <hci_cmd_status+0x24>
   13fca:	4803      	ldr	r0, [pc, #12]	; (13fd8 <hci_cmd_status+0x28>)
}
   13fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13fd0:	f007 b872 	b.w	1b0b8 <z_impl_k_sem_give>
   13fd4:	bd38      	pop	{r3, r4, r5, pc}
   13fd6:	bf00      	nop
   13fd8:	200003e0 	.word	0x200003e0

00013fdc <hci_cmd_complete>:
{
   13fdc:	b538      	push	{r3, r4, r5, lr}
   13fde:	2103      	movs	r1, #3
   13fe0:	4604      	mov	r4, r0
   13fe2:	3008      	adds	r0, #8
   13fe4:	f00e fb09 	bl	225fa <net_buf_simple_pull_mem>
	status = buf->data[0];
   13fe8:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   13fea:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   13fec:	7819      	ldrb	r1, [r3, #0]
   13fee:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   13ff2:	4622      	mov	r2, r4
   13ff4:	f7ff ff7e 	bl	13ef4 <hci_cmd_done>
	if (ncmd) {
   13ff8:	b125      	cbz	r5, 14004 <hci_cmd_complete+0x28>
   13ffa:	4803      	ldr	r0, [pc, #12]	; (14008 <hci_cmd_complete+0x2c>)
}
   13ffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14000:	f007 b85a 	b.w	1b0b8 <z_impl_k_sem_give>
   14004:	bd38      	pop	{r3, r4, r5, pc}
   14006:	bf00      	nop
   14008:	200003e0 	.word	0x200003e0

0001400c <bt_hci_cmd_state_set_init>:
{
   1400c:	b510      	push	{r4, lr}
	state->bit = bit;
   1400e:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   14012:	f89d 3008 	ldrb.w	r3, [sp, #8]
   14016:	720b      	strb	r3, [r1, #8]
{
   14018:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   1401a:	f003 f8e9 	bl	171f0 <net_buf_id>
   1401e:	4b03      	ldr	r3, [pc, #12]	; (1402c <bt_hci_cmd_state_set_init+0x20>)
   14020:	220c      	movs	r2, #12
   14022:	fb02 3300 	mla	r3, r2, r0, r3
   14026:	605c      	str	r4, [r3, #4]
}
   14028:	bd10      	pop	{r4, pc}
   1402a:	bf00      	nop
   1402c:	200026ec 	.word	0x200026ec

00014030 <bt_hci_cmd_create>:
{
   14030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   14034:	f04f 32ff 	mov.w	r2, #4294967295
   14038:	f04f 33ff 	mov.w	r3, #4294967295
   1403c:	4606      	mov	r6, r0
   1403e:	4817      	ldr	r0, [pc, #92]	; (1409c <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   14040:	4d17      	ldr	r5, [pc, #92]	; (140a0 <bt_hci_cmd_create+0x70>)
{
   14042:	460f      	mov	r7, r1
   14044:	f00e fa13 	bl	2246e <net_buf_alloc_fixed>
   14048:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   1404a:	f100 0a08 	add.w	sl, r0, #8
   1404e:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14050:	f04f 0800 	mov.w	r8, #0
   14054:	4650      	mov	r0, sl
   14056:	f00e fa29 	bl	224ac <net_buf_simple_reserve>
   1405a:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   1405e:	4620      	mov	r0, r4
   14060:	f003 f8c6 	bl	171f0 <net_buf_id>
   14064:	f04f 090c 	mov.w	r9, #12
   14068:	fb09 5000 	mla	r0, r9, r0, r5
   1406c:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   1406e:	4620      	mov	r0, r4
   14070:	f003 f8be 	bl	171f0 <net_buf_id>
   14074:	fb09 5000 	mla	r0, r9, r0, r5
   14078:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   1407c:	4620      	mov	r0, r4
   1407e:	f003 f8b7 	bl	171f0 <net_buf_id>
   14082:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   14086:	2103      	movs	r1, #3
   14088:	f8c5 8004 	str.w	r8, [r5, #4]
   1408c:	4650      	mov	r0, sl
   1408e:	f00e fa8d 	bl	225ac <net_buf_simple_add>
	hdr->param_len = param_len;
   14092:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   14094:	8006      	strh	r6, [r0, #0]
}
   14096:	4620      	mov	r0, r4
   14098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1409c:	20000c4c 	.word	0x20000c4c
   140a0:	200026ec 	.word	0x200026ec

000140a4 <bt_hci_cmd_send_sync>:
{
   140a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   140a6:	4615      	mov	r5, r2
   140a8:	b087      	sub	sp, #28
	if (!buf) {
   140aa:	460c      	mov	r4, r1
   140ac:	b921      	cbnz	r1, 140b8 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   140ae:	f7ff ffbf 	bl	14030 <bt_hci_cmd_create>
		if (!buf) {
   140b2:	4604      	mov	r4, r0
   140b4:	2800      	cmp	r0, #0
   140b6:	d048      	beq.n	1414a <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   140b8:	2201      	movs	r2, #1
   140ba:	2100      	movs	r1, #0
   140bc:	4668      	mov	r0, sp
   140be:	f00f f90b 	bl	232d8 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   140c2:	4620      	mov	r0, r4
   140c4:	f003 f894 	bl	171f0 <net_buf_id>
   140c8:	4f21      	ldr	r7, [pc, #132]	; (14150 <bt_hci_cmd_send_sync+0xac>)
   140ca:	230c      	movs	r3, #12
   140cc:	fb03 7000 	mla	r0, r3, r0, r7
   140d0:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   140d4:	4620      	mov	r0, r4
   140d6:	f00e fa43 	bl	22560 <net_buf_ref>
   140da:	4601      	mov	r1, r0
   140dc:	481d      	ldr	r0, [pc, #116]	; (14154 <bt_hci_cmd_send_sync+0xb0>)
   140de:	f00e fa32 	bl	22546 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   140e2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   140e6:	2300      	movs	r3, #0
   140e8:	4668      	mov	r0, sp
   140ea:	f007 f80b 	bl	1b104 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   140ee:	4606      	mov	r6, r0
   140f0:	b180      	cbz	r0, 14114 <bt_hci_cmd_send_sync+0x70>
   140f2:	4a19      	ldr	r2, [pc, #100]	; (14158 <bt_hci_cmd_send_sync+0xb4>)
   140f4:	4919      	ldr	r1, [pc, #100]	; (1415c <bt_hci_cmd_send_sync+0xb8>)
   140f6:	481a      	ldr	r0, [pc, #104]	; (14160 <bt_hci_cmd_send_sync+0xbc>)
   140f8:	f240 1335 	movw	r3, #309	; 0x135
   140fc:	f00b ff5d 	bl	1ffba <assert_print>
   14100:	4818      	ldr	r0, [pc, #96]	; (14164 <bt_hci_cmd_send_sync+0xc0>)
   14102:	4631      	mov	r1, r6
   14104:	f00b ff59 	bl	1ffba <assert_print>
   14108:	4040      	eors	r0, r0
   1410a:	f380 8811 	msr	BASEPRI, r0
   1410e:	f04f 0003 	mov.w	r0, #3
   14112:	df02      	svc	2
	status = cmd(buf)->status;
   14114:	4620      	mov	r0, r4
   14116:	f003 f86b 	bl	171f0 <net_buf_id>
   1411a:	230c      	movs	r3, #12
   1411c:	4358      	muls	r0, r3
   1411e:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
   14120:	b156      	cbz	r6, 14138 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   14122:	4620      	mov	r0, r4
   14124:	f003 f920 	bl	17368 <net_buf_unref>
			return -EIO;
   14128:	2e09      	cmp	r6, #9
   1412a:	bf0c      	ite	eq
   1412c:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   14130:	f06f 0004 	mvnne.w	r0, #4
}
   14134:	b007      	add	sp, #28
   14136:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   14138:	b115      	cbz	r5, 14140 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   1413a:	602c      	str	r4, [r5, #0]
	return 0;
   1413c:	4630      	mov	r0, r6
   1413e:	e7f9      	b.n	14134 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   14140:	4620      	mov	r0, r4
   14142:	f003 f911 	bl	17368 <net_buf_unref>
	return 0;
   14146:	4628      	mov	r0, r5
   14148:	e7f4      	b.n	14134 <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
   1414a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1414e:	e7f1      	b.n	14134 <bt_hci_cmd_send_sync+0x90>
   14150:	200026ec 	.word	0x200026ec
   14154:	20000404 	.word	0x20000404
   14158:	000251c6 	.word	0x000251c6
   1415c:	0002525e 	.word	0x0002525e
   14160:	00025213 	.word	0x00025213
   14164:	00025267 	.word	0x00025267

00014168 <bt_hci_le_enh_conn_complete>:
{
   14168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1416c:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
   14170:	4a82      	ldr	r2, [pc, #520]	; (1437c <bt_hci_le_enh_conn_complete+0x214>)
	if (evt->status) {
   14172:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
   14174:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   14176:	ea6f 5307 	mvn.w	r3, r7, lsl #20
   1417a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   1417e:	b29b      	uxth	r3, r3
   14180:	4299      	cmp	r1, r3
   14182:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   14186:	bf08      	it	eq
   14188:	8016      	strheq	r6, [r2, #0]
{
   1418a:	b089      	sub	sp, #36	; 0x24
   1418c:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1418e:	fa1f f887 	uxth.w	r8, r7
			return true;
   14192:	bf08      	it	eq
   14194:	2601      	moveq	r6, #1
	if (evt->status) {
   14196:	b1c4      	cbz	r4, 141ca <bt_hci_le_enh_conn_complete+0x62>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14198:	2c3c      	cmp	r4, #60	; 0x3c
   1419a:	d14a      	bne.n	14232 <bt_hci_le_enh_conn_complete+0xca>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1419c:	f000 ff20 	bl	14fe0 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   141a0:	f06f 0140 	mvn.w	r1, #64	; 0x40
   141a4:	3010      	adds	r0, #16
   141a6:	f00c fb1b 	bl	207e0 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   141aa:	2000      	movs	r0, #0
   141ac:	f7ff fdf8 	bl	13da0 <find_pending_connect.part.0>
		if (!conn) {
   141b0:	4605      	mov	r5, r0
   141b2:	2800      	cmp	r0, #0
   141b4:	d03d      	beq.n	14232 <bt_hci_le_enh_conn_complete+0xca>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   141b6:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   141b8:	2100      	movs	r1, #0
   141ba:	f001 fa61 	bl	15680 <bt_conn_set_state>
		bt_conn_unref(conn);
   141be:	4628      	mov	r0, r5
}
   141c0:	b009      	add	sp, #36	; 0x24
   141c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   141c6:	f00c bed6 	b.w	20f76 <bt_conn_unref>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   141ca:	7903      	ldrb	r3, [r0, #4]
   141cc:	3b02      	subs	r3, #2
   141ce:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   141d0:	f100 0904 	add.w	r9, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   141d4:	d830      	bhi.n	14238 <bt_hci_le_enh_conn_complete+0xd0>
 *  @param dst Bluetooth LE device address destination buffer.
 *  @param src Bluetooth LE device address source buffer.
 */
static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
   141d6:	2207      	movs	r2, #7
   141d8:	4649      	mov	r1, r9
   141da:	a806      	add	r0, sp, #24
   141dc:	f00c f9b8 	bl	20550 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   141e0:	f89d 3018 	ldrb.w	r3, [sp, #24]
	memcpy(dst, src, sizeof(*dst));
   141e4:	2206      	movs	r2, #6
   141e6:	3b02      	subs	r3, #2
   141e8:	f105 0111 	add.w	r1, r5, #17
   141ec:	f10d 0011 	add.w	r0, sp, #17
   141f0:	f88d 3018 	strb.w	r3, [sp, #24]
   141f4:	f00c f9ac 	bl	20550 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   141f8:	2301      	movs	r3, #1
   141fa:	f88d 3010 	strb.w	r3, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   141fe:	78eb      	ldrb	r3, [r5, #3]
   14200:	2b01      	cmp	r3, #1
   14202:	d112      	bne.n	1422a <bt_hci_le_enh_conn_complete+0xc2>
   14204:	a806      	add	r0, sp, #24
   14206:	f7ff fdcb 	bl	13da0 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1420a:	78eb      	ldrb	r3, [r5, #3]
   1420c:	2b01      	cmp	r3, #1
   1420e:	4604      	mov	r4, r0
   14210:	d10a      	bne.n	14228 <bt_hci_le_enh_conn_complete+0xc0>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   14212:	f000 fee5 	bl	14fe0 <bt_le_adv_lookup_legacy>
   14216:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1421a:	4681      	mov	r9, r0
   1421c:	3010      	adds	r0, #16
   1421e:	f00c fadf 	bl	207e0 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   14222:	4648      	mov	r0, r9
   14224:	f00c fded 	bl	20e02 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   14228:	b9dc      	cbnz	r4, 14262 <bt_hci_le_enh_conn_complete+0xfa>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   1422a:	211f      	movs	r1, #31
   1422c:	4640      	mov	r0, r8
   1422e:	f00c fb5a 	bl	208e6 <bt_hci_disconnect>
}
   14232:	b009      	add	sp, #36	; 0x24
   14234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   14238:	78c3      	ldrb	r3, [r0, #3]
   1423a:	2b01      	cmp	r3, #1
   1423c:	bf04      	itt	eq
   1423e:	4b50      	ldreq	r3, [pc, #320]	; (14380 <bt_hci_le_enh_conn_complete+0x218>)
   14240:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   14244:	4649      	mov	r1, r9
   14246:	4620      	mov	r0, r4
   14248:	f00c fc7d 	bl	20b46 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   1424c:	2207      	movs	r2, #7
   1424e:	4601      	mov	r1, r0
   14250:	a806      	add	r0, sp, #24
   14252:	f00c f97d 	bl	20550 <memcpy>
   14256:	2207      	movs	r2, #7
   14258:	4649      	mov	r1, r9
   1425a:	a804      	add	r0, sp, #16
   1425c:	f00c f978 	bl	20550 <memcpy>
}
   14260:	e7cd      	b.n	141fe <bt_hci_le_enh_conn_complete+0x96>
	conn->handle = handle;
   14262:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
   14264:	2207      	movs	r2, #7
   14266:	f820 7b88 	strh.w	r7, [r0], #136
   1426a:	a906      	add	r1, sp, #24
   1426c:	f00c f970 	bl	20550 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   14270:	7e2a      	ldrb	r2, [r5, #24]
   14272:	7deb      	ldrb	r3, [r5, #23]
   14274:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14278:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   1427c:	7eaa      	ldrb	r2, [r5, #26]
   1427e:	7e6b      	ldrb	r3, [r5, #25]
   14280:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14284:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   14288:	7f2a      	ldrb	r2, [r5, #28]
   1428a:	7eeb      	ldrb	r3, [r5, #27]
   1428c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14290:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   14294:	78eb      	ldrb	r3, [r5, #3]
   14296:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   14298:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1429a:	2b01      	cmp	r3, #1
	conn->err = 0U;
   1429c:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1429e:	d117      	bne.n	142d0 <bt_hci_le_enh_conn_complete+0x168>
   142a0:	2207      	movs	r2, #7
   142a2:	a904      	add	r1, sp, #16
   142a4:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   142a8:	f00c f952 	bl	20550 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   142ac:	f000 fe98 	bl	14fe0 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   142b0:	7a21      	ldrb	r1, [r4, #8]
   142b2:	4d33      	ldr	r5, [pc, #204]	; (14380 <bt_hci_le_enh_conn_complete+0x218>)
   142b4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   142b8:	4429      	add	r1, r5
   142ba:	2207      	movs	r2, #7
   142bc:	f104 0096 	add.w	r0, r4, #150	; 0x96
   142c0:	f00c f946 	bl	20550 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   142c4:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
   142c8:	065d      	lsls	r5, r3, #25
   142ca:	d501      	bpl.n	142d0 <bt_hci_le_enh_conn_complete+0x168>
			bt_le_adv_resume();
   142cc:	f001 f834 	bl	15338 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   142d0:	2107      	movs	r1, #7
   142d2:	4620      	mov	r0, r4
   142d4:	f001 f9d4 	bl	15680 <bt_conn_set_state>
	if (is_disconnected) {
   142d8:	b11e      	cbz	r6, 142e2 <bt_hci_le_enh_conn_complete+0x17a>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   142da:	2101      	movs	r1, #1
   142dc:	4620      	mov	r0, r4
   142de:	f001 f9cf 	bl	15680 <bt_conn_set_state>
	bt_conn_connected(conn);
   142e2:	4620      	mov	r0, r4
   142e4:	f00c fe83 	bl	20fee <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   142e8:	7aa3      	ldrb	r3, [r4, #10]
   142ea:	2b07      	cmp	r3, #7
   142ec:	d142      	bne.n	14374 <bt_hci_le_enh_conn_complete+0x20c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   142ee:	f3bf 8f5b 	dmb	ish
   142f2:	6863      	ldr	r3, [r4, #4]
   142f4:	4e22      	ldr	r6, [pc, #136]	; (14380 <bt_hci_le_enh_conn_complete+0x218>)
   142f6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   142fa:	f413 6f00 	tst.w	r3, #2048	; 0x800
   142fe:	d118      	bne.n	14332 <bt_hci_le_enh_conn_complete+0x1ca>
   14300:	78e3      	ldrb	r3, [r4, #3]
   14302:	b11b      	cbz	r3, 1430c <bt_hci_le_enh_conn_complete+0x1a4>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   14304:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   14308:	0718      	lsls	r0, r3, #28
   1430a:	d512      	bpl.n	14332 <bt_hci_le_enh_conn_complete+0x1ca>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   1430c:	2102      	movs	r1, #2
   1430e:	f242 0016 	movw	r0, #8214	; 0x2016
   14312:	f7ff fe8d 	bl	14030 <bt_hci_cmd_create>
	if (!buf) {
   14316:	4605      	mov	r5, r0
   14318:	b158      	cbz	r0, 14332 <bt_hci_le_enh_conn_complete+0x1ca>
   1431a:	2102      	movs	r1, #2
   1431c:	3008      	adds	r0, #8
   1431e:	f00e f945 	bl	225ac <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   14322:	8823      	ldrh	r3, [r4, #0]
   14324:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   14326:	2200      	movs	r2, #0
   14328:	4629      	mov	r1, r5
   1432a:	f242 0016 	movw	r0, #8214	; 0x2016
   1432e:	f7ff feb9 	bl	140a4 <bt_hci_cmd_send_sync>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   14332:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   14336:	07d9      	lsls	r1, r3, #31
   14338:	d506      	bpl.n	14348 <bt_hci_le_enh_conn_complete+0x1e0>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   1433a:	2100      	movs	r1, #0
   1433c:	2302      	movs	r3, #2
   1433e:	9100      	str	r1, [sp, #0]
   14340:	461a      	mov	r2, r3
   14342:	4620      	mov	r0, r4
   14344:	f00c fb08 	bl	20958 <bt_le_set_phy>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   14348:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   1434c:	069a      	lsls	r2, r3, #26
   1434e:	d511      	bpl.n	14374 <bt_hci_le_enh_conn_complete+0x20c>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   14350:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
   14354:	689b      	ldr	r3, [r3, #8]
   14356:	079b      	lsls	r3, r3, #30
   14358:	d50c      	bpl.n	14374 <bt_hci_le_enh_conn_complete+0x20c>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1435a:	f10d 010e 	add.w	r1, sp, #14
   1435e:	a803      	add	r0, sp, #12
   14360:	f00c faa9 	bl	208b6 <hci_le_read_max_data_len>
			if (!err) {
   14364:	b930      	cbnz	r0, 14374 <bt_hci_le_enh_conn_complete+0x20c>
				err = bt_le_set_data_len(conn,
   14366:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1436a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1436e:	4620      	mov	r0, r4
   14370:	f00c fad4 	bl	2091c <bt_le_set_data_len>
	bt_conn_unref(conn);
   14374:	4620      	mov	r0, r4
   14376:	f00c fdfe 	bl	20f76 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1437a:	e75a      	b.n	14232 <bt_hci_le_enh_conn_complete+0xca>
   1437c:	200035a0 	.word	0x200035a0
   14380:	200002c8 	.word	0x200002c8

00014384 <bt_send>:
	return bt_dev.drv->send(buf);
   14384:	4b02      	ldr	r3, [pc, #8]	; (14390 <bt_send+0xc>)
   14386:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   1438a:	695b      	ldr	r3, [r3, #20]
   1438c:	4718      	bx	r3
   1438e:	bf00      	nop
   14390:	200002c8 	.word	0x200002c8

00014394 <bt_hci_cmd_send>:
{
   14394:	b538      	push	{r3, r4, r5, lr}
   14396:	4605      	mov	r5, r0
	if (!buf) {
   14398:	460c      	mov	r4, r1
   1439a:	b919      	cbnz	r1, 143a4 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   1439c:	f7ff fe48 	bl	14030 <bt_hci_cmd_create>
		if (!buf) {
   143a0:	4604      	mov	r4, r0
   143a2:	b198      	cbz	r0, 143cc <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   143a4:	f640 4335 	movw	r3, #3125	; 0xc35
   143a8:	429d      	cmp	r5, r3
   143aa:	d109      	bne.n	143c0 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
   143ac:	4620      	mov	r0, r4
   143ae:	f7ff ffe9 	bl	14384 <bt_send>
		if (err) {
   143b2:	4605      	mov	r5, r0
   143b4:	b110      	cbz	r0, 143bc <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
   143b6:	4620      	mov	r0, r4
   143b8:	f002 ffd6 	bl	17368 <net_buf_unref>
}
   143bc:	4628      	mov	r0, r5
   143be:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   143c0:	4804      	ldr	r0, [pc, #16]	; (143d4 <bt_hci_cmd_send+0x40>)
   143c2:	4621      	mov	r1, r4
   143c4:	f00e f8bf 	bl	22546 <net_buf_put>
	return 0;
   143c8:	2500      	movs	r5, #0
   143ca:	e7f7      	b.n	143bc <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   143cc:	f06f 0568 	mvn.w	r5, #104	; 0x68
   143d0:	e7f4      	b.n	143bc <bt_hci_cmd_send+0x28>
   143d2:	bf00      	nop
   143d4:	20000404 	.word	0x20000404

000143d8 <hci_tx_thread>:
{
   143d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   143dc:	f8df 8108 	ldr.w	r8, [pc, #264]	; 144e8 <hci_tx_thread+0x110>
		BT_ASSERT(err == 0);
   143e0:	f8df a108 	ldr.w	sl, [pc, #264]	; 144ec <hci_tx_thread+0x114>
		events[0].state = K_POLL_STATE_NOT_READY;
   143e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   143e8:	4841      	ldr	r0, [pc, #260]	; (144f0 <hci_tx_thread+0x118>)
		events[0].state = K_POLL_STATE_NOT_READY;
   143ea:	f36f 3352 	bfc	r3, #13, #6
   143ee:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   143f2:	f001 f8ff 	bl	155f4 <bt_conn_prepare_events>
   143f6:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   143f8:	483b      	ldr	r0, [pc, #236]	; (144e8 <hci_tx_thread+0x110>)
   143fa:	f04f 32ff 	mov.w	r2, #4294967295
   143fe:	f04f 33ff 	mov.w	r3, #4294967295
   14402:	4629      	mov	r1, r5
   14404:	f007 fdac 	bl	1bf60 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   14408:	b160      	cbz	r0, 14424 <hci_tx_thread+0x4c>
   1440a:	493a      	ldr	r1, [pc, #232]	; (144f4 <hci_tx_thread+0x11c>)
   1440c:	483a      	ldr	r0, [pc, #232]	; (144f8 <hci_tx_thread+0x120>)
   1440e:	f640 13b3 	movw	r3, #2483	; 0x9b3
   14412:	4652      	mov	r2, sl
   14414:	f00b fdd1 	bl	1ffba <assert_print>
   14418:	4040      	eors	r0, r0
   1441a:	f380 8811 	msr	BASEPRI, r0
   1441e:	f04f 0003 	mov.w	r0, #3
   14422:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   14424:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 144fc <hci_tx_thread+0x124>
{
   14428:	4e2f      	ldr	r6, [pc, #188]	; (144e8 <hci_tx_thread+0x110>)
	return z_impl_k_sem_take(sem, timeout);
   1442a:	f5a9 779e 	sub.w	r7, r9, #316	; 0x13c
   1442e:	f1a9 0b24 	sub.w	fp, r9, #36	; 0x24
	for (; count; ev++, count--) {
   14432:	b915      	cbnz	r5, 1443a <hci_tx_thread+0x62>
	z_impl_k_yield();
   14434:	f007 fa9e 	bl	1b974 <z_impl_k_yield>
	while (1) {
   14438:	e7d4      	b.n	143e4 <hci_tx_thread+0xc>
		switch (ev->state) {
   1443a:	68f3      	ldr	r3, [r6, #12]
   1443c:	f3c3 3345 	ubfx	r3, r3, #13, #6
   14440:	2b04      	cmp	r3, #4
   14442:	d147      	bne.n	144d4 <hci_tx_thread+0xfc>
			if (ev->tag == BT_EVENT_CMD_TX) {
   14444:	7b33      	ldrb	r3, [r6, #12]
   14446:	2b00      	cmp	r3, #0
   14448:	d147      	bne.n	144da <hci_tx_thread+0x102>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1444a:	2200      	movs	r2, #0
   1444c:	2300      	movs	r3, #0
   1444e:	4648      	mov	r0, r9
   14450:	f00e f812 	bl	22478 <net_buf_get>
	BT_ASSERT(buf);
   14454:	4604      	mov	r4, r0
   14456:	b960      	cbnz	r0, 14472 <hci_tx_thread+0x9a>
   14458:	4929      	ldr	r1, [pc, #164]	; (14500 <hci_tx_thread+0x128>)
   1445a:	4827      	ldr	r0, [pc, #156]	; (144f8 <hci_tx_thread+0x120>)
   1445c:	f640 134a 	movw	r3, #2378	; 0x94a
   14460:	4652      	mov	r2, sl
   14462:	f00b fdaa 	bl	1ffba <assert_print>
   14466:	4040      	eors	r0, r0
   14468:	f380 8811 	msr	BASEPRI, r0
   1446c:	f04f 0003 	mov.w	r0, #3
   14470:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   14472:	f04f 32ff 	mov.w	r2, #4294967295
   14476:	f04f 33ff 	mov.w	r3, #4294967295
   1447a:	4658      	mov	r0, fp
   1447c:	f006 fe42 	bl	1b104 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   14480:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   14484:	b120      	cbz	r0, 14490 <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
   14486:	f002 ff6f 	bl	17368 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1448a:	2300      	movs	r3, #0
   1448c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   14490:	4620      	mov	r0, r4
   14492:	f00e f865 	bl	22560 <net_buf_ref>
   14496:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	err = bt_send(buf);
   1449a:	4620      	mov	r0, r4
   1449c:	f7ff ff72 	bl	14384 <bt_send>
	if (err) {
   144a0:	b1c0      	cbz	r0, 144d4 <hci_tx_thread+0xfc>
	z_impl_k_sem_give(sem);
   144a2:	4818      	ldr	r0, [pc, #96]	; (14504 <hci_tx_thread+0x12c>)
   144a4:	f006 fe08 	bl	1b0b8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   144a8:	4620      	mov	r0, r4
   144aa:	f002 fea1 	bl	171f0 <net_buf_id>
   144ae:	4b16      	ldr	r3, [pc, #88]	; (14508 <hci_tx_thread+0x130>)
   144b0:	220c      	movs	r2, #12
   144b2:	fb02 3000 	mla	r0, r2, r0, r3
   144b6:	211f      	movs	r1, #31
   144b8:	8840      	ldrh	r0, [r0, #2]
   144ba:	4622      	mov	r2, r4
   144bc:	f7ff fd1a 	bl	13ef4 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   144c0:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   144c4:	f002 ff50 	bl	17368 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   144c8:	2300      	movs	r3, #0
		net_buf_unref(buf);
   144ca:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   144cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		net_buf_unref(buf);
   144d0:	f002 ff4a 	bl	17368 <net_buf_unref>
	for (; count; ev++, count--) {
   144d4:	3614      	adds	r6, #20
   144d6:	3d01      	subs	r5, #1
   144d8:	e7ab      	b.n	14432 <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   144da:	2b01      	cmp	r3, #1
   144dc:	d1fa      	bne.n	144d4 <hci_tx_thread+0xfc>
					conn = CONTAINER_OF(ev->fifo,
   144de:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   144e0:	3838      	subs	r0, #56	; 0x38
   144e2:	f001 fb61 	bl	15ba8 <bt_conn_process_tx>
   144e6:	e7f5      	b.n	144d4 <hci_tx_thread+0xfc>
   144e8:	200006f8 	.word	0x200006f8
   144ec:	000251c6 	.word	0x000251c6
   144f0:	2000070c 	.word	0x2000070c
   144f4:	0002525e 	.word	0x0002525e
   144f8:	00025213 	.word	0x00025213
   144fc:	20000404 	.word	0x20000404
   14500:	00025287 	.word	0x00025287
   14504:	200003e0 	.word	0x200003e0
   14508:	200026ec 	.word	0x200026ec

0001450c <hci_event_prio>:
{
   1450c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14510:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   14512:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   14516:	4630      	mov	r0, r6
   14518:	f00e f87f 	bl	2261a <net_buf_simple_headroom>
	state->len = buf->len;
   1451c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14520:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   14524:	4605      	mov	r5, r0
   14526:	d80c      	bhi.n	14542 <hci_event_prio+0x36>
   14528:	4a1c      	ldr	r2, [pc, #112]	; (1459c <hci_event_prio+0x90>)
   1452a:	491d      	ldr	r1, [pc, #116]	; (145a0 <hci_event_prio+0x94>)
   1452c:	481d      	ldr	r0, [pc, #116]	; (145a4 <hci_event_prio+0x98>)
   1452e:	f640 534f 	movw	r3, #3407	; 0xd4f
   14532:	f00b fd42 	bl	1ffba <assert_print>
   14536:	4040      	eors	r0, r0
   14538:	f380 8811 	msr	BASEPRI, r0
   1453c:	f04f 0003 	mov.w	r0, #3
   14540:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   14542:	4630      	mov	r0, r6
   14544:	2102      	movs	r1, #2
   14546:	f00e f858 	bl	225fa <net_buf_simple_pull_mem>
   1454a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1454c:	7800      	ldrb	r0, [r0, #0]
   1454e:	f00c f87f 	bl	20650 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   14552:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14554:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   14556:	d40c      	bmi.n	14572 <hci_event_prio+0x66>
   14558:	4a10      	ldr	r2, [pc, #64]	; (1459c <hci_event_prio+0x90>)
   1455a:	4913      	ldr	r1, [pc, #76]	; (145a8 <hci_event_prio+0x9c>)
   1455c:	4811      	ldr	r0, [pc, #68]	; (145a4 <hci_event_prio+0x98>)
   1455e:	f640 5353 	movw	r3, #3411	; 0xd53
   14562:	f00b fd2a 	bl	1ffba <assert_print>
   14566:	4040      	eors	r0, r0
   14568:	f380 8811 	msr	BASEPRI, r0
   1456c:	f04f 0003 	mov.w	r0, #3
   14570:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   14572:	2305      	movs	r3, #5
   14574:	4a0d      	ldr	r2, [pc, #52]	; (145ac <hci_event_prio+0xa0>)
   14576:	7838      	ldrb	r0, [r7, #0]
   14578:	4621      	mov	r1, r4
   1457a:	f00c f87b 	bl	20674 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1457e:	07b3      	lsls	r3, r6, #30
   14580:	d507      	bpl.n	14592 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   14582:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   14584:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   14588:	fa10 f585 	uxtah	r5, r0, r5
   1458c:	60a5      	str	r5, [r4, #8]
}
   1458e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   14592:	4620      	mov	r0, r4
}
   14594:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   14598:	f002 bee6 	b.w	17368 <net_buf_unref>
   1459c:	000251c6 	.word	0x000251c6
   145a0:	000251fa 	.word	0x000251fa
   145a4:	00025213 	.word	0x00025213
   145a8:	0002528b 	.word	0x0002528b
   145ac:	00024574 	.word	0x00024574

000145b0 <bt_recv>:
{
   145b0:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   145b2:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   145b4:	2b01      	cmp	r3, #1
{
   145b6:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   145b8:	d00b      	beq.n	145d2 <bt_recv+0x22>
   145ba:	2b03      	cmp	r3, #3
   145bc:	d117      	bne.n	145ee <bt_recv+0x3e>
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   145be:	480e      	ldr	r0, [pc, #56]	; (145f8 <bt_recv+0x48>)
   145c0:	4629      	mov	r1, r5
   145c2:	f00d ff77 	bl	224b4 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   145c6:	490d      	ldr	r1, [pc, #52]	; (145fc <bt_recv+0x4c>)
   145c8:	480d      	ldr	r0, [pc, #52]	; (14600 <bt_recv+0x50>)
   145ca:	f00e ff1e 	bl	2340a <k_work_submit_to_queue>
		return 0;
   145ce:	2000      	movs	r0, #0
}
   145d0:	e00c      	b.n	145ec <bt_recv+0x3c>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   145d2:	6883      	ldr	r3, [r0, #8]
   145d4:	7818      	ldrb	r0, [r3, #0]
   145d6:	f00c f83b 	bl	20650 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   145da:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   145dc:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   145de:	d502      	bpl.n	145e6 <bt_recv+0x36>
			hci_event_prio(buf);
   145e0:	4628      	mov	r0, r5
   145e2:	f7ff ff93 	bl	1450c <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   145e6:	f014 0002 	ands.w	r0, r4, #2
   145ea:	d1e8      	bne.n	145be <bt_recv+0xe>
}
   145ec:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   145ee:	f002 febb 	bl	17368 <net_buf_unref>
		return -EINVAL;
   145f2:	f06f 0015 	mvn.w	r0, #21
   145f6:	e7f9      	b.n	145ec <bt_recv+0x3c>
   145f8:	200003fc 	.word	0x200003fc
   145fc:	20000734 	.word	0x20000734
   14600:	20001a78 	.word	0x20001a78

00014604 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   14604:	4a08      	ldr	r2, [pc, #32]	; (14628 <bt_hci_driver_register+0x24>)
{
   14606:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   14608:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   1460c:	b930      	cbnz	r0, 1461c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   1460e:	68d9      	ldr	r1, [r3, #12]
   14610:	b139      	cbz	r1, 14622 <bt_hci_driver_register+0x1e>
   14612:	6959      	ldr	r1, [r3, #20]
   14614:	b129      	cbz	r1, 14622 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   14616:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
   1461a:	4770      	bx	lr
		return -EALREADY;
   1461c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14620:	4770      	bx	lr
		return -EINVAL;
   14622:	f06f 0015 	mvn.w	r0, #21
}
   14626:	4770      	bx	lr
   14628:	200002c8 	.word	0x200002c8

0001462c <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1462c:	4801      	ldr	r0, [pc, #4]	; (14634 <bt_finalize_init+0x8>)
   1462e:	2104      	movs	r1, #4
   14630:	f00c b861 	b.w	206f6 <atomic_or>
   14634:	20000394 	.word	0x20000394

00014638 <bt_init>:
{
   14638:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   1463a:	4d3e      	ldr	r5, [pc, #248]	; (14734 <bt_init+0xfc>)
   1463c:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   14640:	6899      	ldr	r1, [r3, #8]
   14642:	f011 0101 	ands.w	r1, r1, #1
   14646:	d121      	bne.n	1468c <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   14648:	aa01      	add	r2, sp, #4
   1464a:	f640 4003 	movw	r0, #3075	; 0xc03
   1464e:	f7ff fd29 	bl	140a4 <bt_hci_cmd_send_sync>
		if (err) {
   14652:	4604      	mov	r4, r0
   14654:	2800      	cmp	r0, #0
   14656:	d169      	bne.n	1472c <bt_init+0xf4>
	uint8_t status = buf->data[0];
   14658:	9b01      	ldr	r3, [sp, #4]
   1465a:	689b      	ldr	r3, [r3, #8]
	if (status) {
   1465c:	781b      	ldrb	r3, [r3, #0]
   1465e:	b993      	cbnz	r3, 14686 <bt_init+0x4e>
   14660:	f3bf 8f5b 	dmb	ish
   14664:	462b      	mov	r3, r5
   14666:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   1466a:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   1466e:	f002 0209 	and.w	r2, r2, #9
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14672:	f3bf 8f5b 	dmb	ish
   14676:	e853 1f00 	ldrex	r1, [r3]
   1467a:	e843 2000 	strex	r0, r2, [r3]
   1467e:	2800      	cmp	r0, #0
   14680:	d1f9      	bne.n	14676 <bt_init+0x3e>
   14682:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   14686:	9801      	ldr	r0, [sp, #4]
   14688:	f002 fe6e 	bl	17368 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   1468c:	aa01      	add	r2, sp, #4
   1468e:	2100      	movs	r1, #0
   14690:	f241 0003 	movw	r0, #4099	; 0x1003
   14694:	f7ff fd06 	bl	140a4 <bt_hci_cmd_send_sync>
	if (err) {
   14698:	4604      	mov	r4, r0
   1469a:	2800      	cmp	r0, #0
   1469c:	d146      	bne.n	1472c <bt_init+0xf4>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   1469e:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   146a0:	4825      	ldr	r0, [pc, #148]	; (14738 <bt_init+0x100>)
   146a2:	6899      	ldr	r1, [r3, #8]
   146a4:	2208      	movs	r2, #8
   146a6:	3101      	adds	r1, #1
   146a8:	f00b ff52 	bl	20550 <memcpy>
	net_buf_unref(rsp);
   146ac:	9801      	ldr	r0, [sp, #4]
   146ae:	f002 fe5b 	bl	17368 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   146b2:	4621      	mov	r1, r4
   146b4:	aa01      	add	r2, sp, #4
   146b6:	f241 0001 	movw	r0, #4097	; 0x1001
   146ba:	f7ff fcf3 	bl	140a4 <bt_hci_cmd_send_sync>
	if (err) {
   146be:	4604      	mov	r4, r0
   146c0:	2800      	cmp	r0, #0
   146c2:	d133      	bne.n	1472c <bt_init+0xf4>
	read_local_ver_complete(rsp);
   146c4:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   146c6:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   146c8:	785a      	ldrb	r2, [r3, #1]
   146ca:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   146ce:	78d9      	ldrb	r1, [r3, #3]
   146d0:	789a      	ldrb	r2, [r3, #2]
   146d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   146d6:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   146da:	791a      	ldrb	r2, [r3, #4]
   146dc:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   146e0:	7a19      	ldrb	r1, [r3, #8]
   146e2:	79da      	ldrb	r2, [r3, #7]
   146e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   146e8:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   146ec:	795a      	ldrb	r2, [r3, #5]
   146ee:	799b      	ldrb	r3, [r3, #6]
   146f0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   146f4:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   146f8:	f002 fe36 	bl	17368 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   146fc:	4621      	mov	r1, r4
   146fe:	aa01      	add	r2, sp, #4
   14700:	f241 0002 	movw	r0, #4098	; 0x1002
   14704:	f7ff fcce 	bl	140a4 <bt_hci_cmd_send_sync>
	if (err) {
   14708:	4604      	mov	r4, r0
   1470a:	b978      	cbnz	r0, 1472c <bt_init+0xf4>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   1470c:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   1470e:	480b      	ldr	r0, [pc, #44]	; (1473c <bt_init+0x104>)
   14710:	6899      	ldr	r1, [r3, #8]
   14712:	2240      	movs	r2, #64	; 0x40
   14714:	3101      	adds	r1, #1
   14716:	f00b ff1b 	bl	20550 <memcpy>
	net_buf_unref(rsp);
   1471a:	9801      	ldr	r0, [sp, #4]
   1471c:	f002 fe24 	bl	17368 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   14720:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   14724:	065e      	lsls	r6, r3, #25
   14726:	d40b      	bmi.n	14740 <bt_init+0x108>
		return -ENODEV;
   14728:	f06f 0412 	mvn.w	r4, #18
}
   1472c:	4620      	mov	r0, r4
   1472e:	b002      	add	sp, #8
   14730:	bd70      	pop	{r4, r5, r6, pc}
   14732:	bf00      	nop
   14734:	200002c8 	.word	0x200002c8
   14738:	20000338 	.word	0x20000338
   1473c:	20000340 	.word	0x20000340
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   14740:	4621      	mov	r1, r4
   14742:	aa01      	add	r2, sp, #4
   14744:	f242 0003 	movw	r0, #8195	; 0x2003
   14748:	f7ff fcac 	bl	140a4 <bt_hci_cmd_send_sync>
	if (err) {
   1474c:	4604      	mov	r4, r0
   1474e:	2800      	cmp	r0, #0
   14750:	d1ec      	bne.n	1472c <bt_init+0xf4>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   14752:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   14754:	48a1      	ldr	r0, [pc, #644]	; (149dc <bt_init+0x3a4>)
   14756:	6899      	ldr	r1, [r3, #8]
   14758:	2208      	movs	r2, #8
   1475a:	3101      	adds	r1, #1
   1475c:	f00b fef8 	bl	20550 <memcpy>
	net_buf_unref(rsp);
   14760:	9801      	ldr	r0, [sp, #4]
   14762:	f002 fe01 	bl	17368 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   14766:	4621      	mov	r1, r4
   14768:	aa01      	add	r2, sp, #4
   1476a:	f242 0002 	movw	r0, #8194	; 0x2002
   1476e:	f7ff fc99 	bl	140a4 <bt_hci_cmd_send_sync>
		if (err) {
   14772:	4604      	mov	r4, r0
   14774:	2800      	cmp	r0, #0
   14776:	d1d9      	bne.n	1472c <bt_init+0xf4>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   14778:	9b01      	ldr	r3, [sp, #4]
   1477a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   1477c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   14780:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   14784:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   14786:	b121      	cbz	r1, 14792 <bt_init+0x15a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   14788:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1478a:	4895      	ldr	r0, [pc, #596]	; (149e0 <bt_init+0x3a8>)
   1478c:	4611      	mov	r1, r2
   1478e:	f00e fda3 	bl	232d8 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   14792:	9801      	ldr	r0, [sp, #4]
   14794:	f002 fde8 	bl	17368 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   14798:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   1479c:	f016 0620 	ands.w	r6, r6, #32
   147a0:	f000 80f9 	beq.w	14996 <bt_init+0x35e>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   147a4:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   147a8:	071c      	lsls	r4, r3, #28
   147aa:	d512      	bpl.n	147d2 <bt_init+0x19a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   147ac:	aa01      	add	r2, sp, #4
   147ae:	2100      	movs	r1, #0
   147b0:	f242 001c 	movw	r0, #8220	; 0x201c
   147b4:	f7ff fc76 	bl	140a4 <bt_hci_cmd_send_sync>
		if (err) {
   147b8:	4604      	mov	r4, r0
   147ba:	2800      	cmp	r0, #0
   147bc:	d1b6      	bne.n	1472c <bt_init+0xf4>
		le_read_supp_states_complete(rsp);
   147be:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   147c0:	6883      	ldr	r3, [r0, #8]
   147c2:	f8d3 2001 	ldr.w	r2, [r3, #1]
   147c6:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   147ca:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   147ce:	f002 fdcb 	bl	17368 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   147d2:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   147d6:	0698      	lsls	r0, r3, #26
   147d8:	d523      	bpl.n	14822 <bt_init+0x1ea>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   147da:	f10d 0102 	add.w	r1, sp, #2
   147de:	4668      	mov	r0, sp
   147e0:	f00c f869 	bl	208b6 <hci_le_read_max_data_len>
		if (err) {
   147e4:	4604      	mov	r4, r0
   147e6:	2800      	cmp	r0, #0
   147e8:	d1a0      	bne.n	1472c <bt_init+0xf4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   147ea:	2104      	movs	r1, #4
   147ec:	f242 0024 	movw	r0, #8228	; 0x2024
   147f0:	f7ff fc1e 	bl	14030 <bt_hci_cmd_create>
		if (!buf) {
   147f4:	4606      	mov	r6, r0
   147f6:	2800      	cmp	r0, #0
   147f8:	f000 80d4 	beq.w	149a4 <bt_init+0x36c>
	return net_buf_simple_add(&buf->b, len);
   147fc:	2104      	movs	r1, #4
   147fe:	3008      	adds	r0, #8
   14800:	f00d fed4 	bl	225ac <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   14804:	f8bd 3000 	ldrh.w	r3, [sp]
   14808:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1480a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1480e:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   14810:	4622      	mov	r2, r4
   14812:	4631      	mov	r1, r6
   14814:	f242 0024 	movw	r0, #8228	; 0x2024
   14818:	f7ff fc44 	bl	140a4 <bt_hci_cmd_send_sync>
		if (err) {
   1481c:	4604      	mov	r4, r0
   1481e:	2800      	cmp	r0, #0
   14820:	d184      	bne.n	1472c <bt_init+0xf4>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   14822:	2108      	movs	r1, #8
   14824:	f242 0001 	movw	r0, #8193	; 0x2001
   14828:	f7ff fc02 	bl	14030 <bt_hci_cmd_create>
	if (!buf) {
   1482c:	4604      	mov	r4, r0
   1482e:	2800      	cmp	r0, #0
   14830:	f000 80b8 	beq.w	149a4 <bt_init+0x36c>
   14834:	2108      	movs	r1, #8
   14836:	4408      	add	r0, r1
   14838:	f00d feb8 	bl	225ac <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   1483c:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   14840:	f012 0f02 	tst.w	r2, #2
   14844:	bf14      	ite	ne
   14846:	232f      	movne	r3, #47	; 0x2f
   14848:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   1484a:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1484c:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   14850:	bf48      	it	mi
   14852:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   14856:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   1485a:	bf18      	it	ne
   1485c:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   14860:	2200      	movs	r2, #0
   14862:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   14864:	f3c3 2307 	ubfx	r3, r3, #8, #8
   14868:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   1486a:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   1486c:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   1486e:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   14870:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   14872:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   14874:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   14876:	4621      	mov	r1, r4
   14878:	f242 0001 	movw	r0, #8193	; 0x2001
   1487c:	f7ff fc12 	bl	140a4 <bt_hci_cmd_send_sync>
	if (err) {
   14880:	4604      	mov	r4, r0
   14882:	2800      	cmp	r0, #0
   14884:	f47f af52 	bne.w	1472c <bt_init+0xf4>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   14888:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   1488c:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   14890:	069a      	lsls	r2, r3, #26
   14892:	f100 809c 	bmi.w	149ce <bt_init+0x396>
	if (bt_dev.le.acl_mtu) {
   14896:	b9d9      	cbnz	r1, 148d0 <bt_init+0x298>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   14898:	aa01      	add	r2, sp, #4
   1489a:	f241 0005 	movw	r0, #4101	; 0x1005
   1489e:	f7ff fc01 	bl	140a4 <bt_hci_cmd_send_sync>
	if (err) {
   148a2:	4604      	mov	r4, r0
   148a4:	2800      	cmp	r0, #0
   148a6:	f47f af41 	bne.w	1472c <bt_init+0xf4>
	if (bt_dev.le.acl_mtu) {
   148aa:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   148ae:	b963      	cbnz	r3, 148ca <bt_init+0x292>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   148b0:	9b01      	ldr	r3, [sp, #4]
   148b2:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   148b4:	785a      	ldrb	r2, [r3, #1]
   148b6:	7899      	ldrb	r1, [r3, #2]
   148b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   148bc:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   148c0:	889a      	ldrh	r2, [r3, #4]
   148c2:	4847      	ldr	r0, [pc, #284]	; (149e0 <bt_init+0x3a8>)
   148c4:	4611      	mov	r1, r2
   148c6:	f00e fd07 	bl	232d8 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   148ca:	9801      	ldr	r0, [sp, #4]
   148cc:	f002 fd4c 	bl	17368 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   148d0:	2108      	movs	r1, #8
   148d2:	f640 4001 	movw	r0, #3073	; 0xc01
   148d6:	f7ff fbab 	bl	14030 <bt_hci_cmd_create>
	if (!buf) {
   148da:	4604      	mov	r4, r0
   148dc:	2800      	cmp	r0, #0
   148de:	d061      	beq.n	149a4 <bt_init+0x36c>
   148e0:	2108      	movs	r1, #8
   148e2:	4408      	add	r0, r1
   148e4:	f00d fe62 	bl	225ac <net_buf_simple_add>
	dst[0] = val;
   148e8:	2310      	movs	r3, #16
   148ea:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   148ec:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   148ee:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   148f0:	7043      	strb	r3, [r0, #1]
   148f2:	2602      	movs	r6, #2
   148f4:	2320      	movs	r3, #32
	dst[0] = val;
   148f6:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   148f8:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   148fa:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   148fc:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   148fe:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   14900:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   14902:	4621      	mov	r1, r4
   14904:	f640 4001 	movw	r0, #3073	; 0xc01
   14908:	f7ff fbcc 	bl	140a4 <bt_hci_cmd_send_sync>
	if (err) {
   1490c:	4604      	mov	r4, r0
   1490e:	2800      	cmp	r0, #0
   14910:	f47f af0c 	bne.w	1472c <bt_init+0xf4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   14914:	4601      	mov	r1, r0
   14916:	aa01      	add	r2, sp, #4
   14918:	f64f 4001 	movw	r0, #64513	; 0xfc01
   1491c:	f7ff fbc2 	bl	140a4 <bt_hci_cmd_send_sync>
	if (err) {
   14920:	4604      	mov	r4, r0
   14922:	bb48      	cbnz	r0, 14978 <bt_init+0x340>
	net_buf_unref(rsp);
   14924:	9801      	ldr	r0, [sp, #4]
   14926:	f002 fd1f 	bl	17368 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   1492a:	4621      	mov	r1, r4
   1492c:	aa01      	add	r2, sp, #4
   1492e:	f64f 4002 	movw	r0, #64514	; 0xfc02
   14932:	f7ff fbb7 	bl	140a4 <bt_hci_cmd_send_sync>
	if (err) {
   14936:	4604      	mov	r4, r0
   14938:	b9f0      	cbnz	r0, 14978 <bt_init+0x340>
	rp.cmds = (void *)rsp->data;
   1493a:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   1493c:	4829      	ldr	r0, [pc, #164]	; (149e4 <bt_init+0x3ac>)
   1493e:	6899      	ldr	r1, [r3, #8]
   14940:	4632      	mov	r2, r6
   14942:	3101      	adds	r1, #1
   14944:	f00b fe04 	bl	20550 <memcpy>
	net_buf_unref(rsp);
   14948:	9801      	ldr	r0, [sp, #4]
   1494a:	f002 fd0d 	bl	17368 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   1494e:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   14952:	075b      	lsls	r3, r3, #29
   14954:	d510      	bpl.n	14978 <bt_init+0x340>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   14956:	aa01      	add	r2, sp, #4
   14958:	4621      	mov	r1, r4
   1495a:	f64f 4003 	movw	r0, #64515	; 0xfc03
   1495e:	f7ff fba1 	bl	140a4 <bt_hci_cmd_send_sync>
		if (err) {
   14962:	b948      	cbnz	r0, 14978 <bt_init+0x340>
		rp.feat = (void *)rsp->data;
   14964:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   14966:	4820      	ldr	r0, [pc, #128]	; (149e8 <bt_init+0x3b0>)
   14968:	6899      	ldr	r1, [r3, #8]
   1496a:	2201      	movs	r2, #1
   1496c:	4411      	add	r1, r2
   1496e:	f00b fdef 	bl	20550 <memcpy>
		net_buf_unref(rsp);
   14972:	9801      	ldr	r0, [sp, #4]
   14974:	f002 fcf8 	bl	17368 <net_buf_unref>
	err = bt_id_init();
   14978:	f000 fa92 	bl	14ea0 <bt_id_init>
	if (err) {
   1497c:	4604      	mov	r4, r0
   1497e:	2800      	cmp	r0, #0
   14980:	f47f aed4 	bne.w	1472c <bt_init+0xf4>
		err = bt_conn_init();
   14984:	f001 f976 	bl	15c74 <bt_conn_init>
		if (err) {
   14988:	4604      	mov	r4, r0
   1498a:	2800      	cmp	r0, #0
   1498c:	f47f aece 	bne.w	1472c <bt_init+0xf4>
	bt_finalize_init();
   14990:	f7ff fe4c 	bl	1462c <bt_finalize_init>
	return 0;
   14994:	e6ca      	b.n	1472c <bt_init+0xf4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   14996:	2102      	movs	r1, #2
   14998:	f640 406d 	movw	r0, #3181	; 0xc6d
   1499c:	f7ff fb48 	bl	14030 <bt_hci_cmd_create>
		if (!buf) {
   149a0:	4604      	mov	r4, r0
   149a2:	b910      	cbnz	r0, 149aa <bt_init+0x372>
		return -ENOBUFS;
   149a4:	f06f 0468 	mvn.w	r4, #104	; 0x68
   149a8:	e6c0      	b.n	1472c <bt_init+0xf4>
   149aa:	2102      	movs	r1, #2
   149ac:	3008      	adds	r0, #8
   149ae:	f00d fdfd 	bl	225ac <net_buf_simple_add>
		cp_le->le = 0x01;
   149b2:	2301      	movs	r3, #1
   149b4:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   149b6:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   149b8:	4621      	mov	r1, r4
   149ba:	4632      	mov	r2, r6
   149bc:	f640 406d 	movw	r0, #3181	; 0xc6d
   149c0:	f7ff fb70 	bl	140a4 <bt_hci_cmd_send_sync>
		if (err) {
   149c4:	4604      	mov	r4, r0
   149c6:	2800      	cmp	r0, #0
   149c8:	f43f aeec 	beq.w	147a4 <bt_init+0x16c>
   149cc:	e6ae      	b.n	1472c <bt_init+0xf4>
	else if (!bt_dev.le.acl_mtu) {
   149ce:	2900      	cmp	r1, #0
   149d0:	f47f af7e 	bne.w	148d0 <bt_init+0x298>
		return -EIO;
   149d4:	f06f 0404 	mvn.w	r4, #4
   149d8:	e6a8      	b.n	1472c <bt_init+0xf4>
   149da:	bf00      	nop
   149dc:	20000398 	.word	0x20000398
   149e0:	200003c8 	.word	0x200003c8
   149e4:	20000381 	.word	0x20000381
   149e8:	20000380 	.word	0x20000380

000149ec <init_work>:
{
   149ec:	b510      	push	{r4, lr}
	err = bt_init();
   149ee:	f7ff fe23 	bl	14638 <bt_init>
	if (ready_cb) {
   149f2:	4b03      	ldr	r3, [pc, #12]	; (14a00 <init_work+0x14>)
   149f4:	681b      	ldr	r3, [r3, #0]
   149f6:	b113      	cbz	r3, 149fe <init_work+0x12>
}
   149f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   149fc:	4718      	bx	r3
}
   149fe:	bd10      	pop	{r4, pc}
   14a00:	20002704 	.word	0x20002704

00014a04 <bt_set_name>:
#else
BUILD_ASSERT(DEVICE_NAME_LEN < 248);
#endif

int bt_set_name(const char *name)
{
   14a04:	b570      	push	{r4, r5, r6, lr}
   14a06:	4606      	mov	r6, r0
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	size_t len = strlen(name);
   14a08:	f00b fd5d 	bl	204c6 <strlen>
	int err;

	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   14a0c:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
   14a0e:	4605      	mov	r5, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   14a10:	d811      	bhi.n	14a36 <bt_set_name+0x32>
		return -ENOMEM;
	}

	if (!strcmp(bt_dev.name, name)) {
   14a12:	4c0a      	ldr	r4, [pc, #40]	; (14a3c <bt_set_name+0x38>)
   14a14:	4631      	mov	r1, r6
   14a16:	f504 70ac 	add.w	r0, r4, #344	; 0x158
   14a1a:	f00b fd64 	bl	204e6 <strcmp>
   14a1e:	b148      	cbz	r0, 14a34 <bt_set_name+0x30>
		return 0;
	}

	strncpy(bt_dev.name, name, len);
   14a20:	f504 70ac 	add.w	r0, r4, #344	; 0x158
   14a24:	462a      	mov	r2, r5
   14a26:	4631      	mov	r1, r6
	bt_dev.name[len] = '\0';
   14a28:	442c      	add	r4, r5
	strncpy(bt_dev.name, name, len);
   14a2a:	f00b fd3a 	bl	204a2 <strncpy>
	bt_dev.name[len] = '\0';
   14a2e:	2000      	movs	r0, #0
   14a30:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158

	return 0;
#else
	return -ENOMEM;
#endif
}
   14a34:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   14a36:	f06f 000b 	mvn.w	r0, #11
   14a3a:	e7fb      	b.n	14a34 <bt_set_name+0x30>
   14a3c:	200002c8 	.word	0x200002c8

00014a40 <bt_enable>:
{
   14a40:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
   14a42:	4d2a      	ldr	r5, [pc, #168]	; (14aec <bt_enable+0xac>)
   14a44:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
   14a48:	b088      	sub	sp, #32
   14a4a:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   14a4c:	2b00      	cmp	r3, #0
   14a4e:	d046      	beq.n	14ade <bt_enable+0x9e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14a50:	f06f 0102 	mvn.w	r1, #2
   14a54:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   14a58:	f00b fec2 	bl	207e0 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   14a5c:	2101      	movs	r1, #1
   14a5e:	f00b fe4a 	bl	206f6 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14a62:	ea10 0401 	ands.w	r4, r0, r1
   14a66:	d13d      	bne.n	14ae4 <bt_enable+0xa4>
		err = bt_set_name(CONFIG_BT_DEVICE_NAME);
   14a68:	4821      	ldr	r0, [pc, #132]	; (14af0 <bt_enable+0xb0>)
   14a6a:	f7ff ffcb 	bl	14a04 <bt_set_name>
	ready_cb = cb;
   14a6e:	4b21      	ldr	r3, [pc, #132]	; (14af4 <bt_enable+0xb4>)
   14a70:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14a72:	2200      	movs	r2, #0
   14a74:	2300      	movs	r3, #0
   14a76:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14a7a:	f06f 0308 	mvn.w	r3, #8
   14a7e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   14a82:	e9cd 4400 	strd	r4, r4, [sp]
   14a86:	4b1c      	ldr	r3, [pc, #112]	; (14af8 <bt_enable+0xb8>)
   14a88:	491c      	ldr	r1, [pc, #112]	; (14afc <bt_enable+0xbc>)
   14a8a:	9404      	str	r4, [sp, #16]
   14a8c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   14a90:	481b      	ldr	r0, [pc, #108]	; (14b00 <bt_enable+0xc0>)
   14a92:	f006 f97f 	bl	1ad94 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   14a96:	491b      	ldr	r1, [pc, #108]	; (14b04 <bt_enable+0xc4>)
   14a98:	4819      	ldr	r0, [pc, #100]	; (14b00 <bt_enable+0xc0>)
   14a9a:	f00e fb35 	bl	23108 <z_impl_k_thread_name_set>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   14a9e:	491a      	ldr	r1, [pc, #104]	; (14b08 <bt_enable+0xc8>)
   14aa0:	481a      	ldr	r0, [pc, #104]	; (14b0c <bt_enable+0xcc>)
   14aa2:	9400      	str	r4, [sp, #0]
   14aa4:	f06f 0307 	mvn.w	r3, #7
   14aa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14aac:	f006 fc76 	bl	1b39c <k_work_queue_start>
   14ab0:	4917      	ldr	r1, [pc, #92]	; (14b10 <bt_enable+0xd0>)
   14ab2:	4816      	ldr	r0, [pc, #88]	; (14b0c <bt_enable+0xcc>)
   14ab4:	f00e fb28 	bl	23108 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   14ab8:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   14abc:	68db      	ldr	r3, [r3, #12]
   14abe:	4798      	blx	r3
	if (err) {
   14ac0:	4604      	mov	r4, r0
   14ac2:	b948      	cbnz	r0, 14ad8 <bt_enable+0x98>
	if (!cb) {
   14ac4:	b926      	cbnz	r6, 14ad0 <bt_enable+0x90>
}
   14ac6:	b008      	add	sp, #32
   14ac8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   14acc:	f7ff bdb4 	b.w	14638 <bt_init>
	k_work_submit(&bt_dev.init);
   14ad0:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   14ad4:	f006 fc5c 	bl	1b390 <k_work_submit>
}
   14ad8:	4620      	mov	r0, r4
   14ada:	b008      	add	sp, #32
   14adc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   14ade:	f06f 0412 	mvn.w	r4, #18
   14ae2:	e7f9      	b.n	14ad8 <bt_enable+0x98>
		return -EALREADY;
   14ae4:	f06f 0477 	mvn.w	r4, #119	; 0x77
   14ae8:	e7f6      	b.n	14ad8 <bt_enable+0x98>
   14aea:	bf00      	nop
   14aec:	200002c8 	.word	0x200002c8
   14af0:	000252a4 	.word	0x000252a4
   14af4:	20002704 	.word	0x20002704
   14af8:	000143d9 	.word	0x000143d9
   14afc:	20004480 	.word	0x20004480
   14b00:	20001b18 	.word	0x20001b18
   14b04:	000252ae 	.word	0x000252ae
   14b08:	20004060 	.word	0x20004060
   14b0c:	20001a78 	.word	0x20001a78
   14b10:	000252b4 	.word	0x000252b4

00014b14 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   14b14:	4800      	ldr	r0, [pc, #0]	; (14b18 <bt_get_name+0x4>)
   14b16:	4770      	bx	lr
   14b18:	20000420 	.word	0x20000420

00014b1c <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   14b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   14b1e:	4f0b      	ldr	r7, [pc, #44]	; (14b4c <id_find+0x30>)
{
   14b20:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   14b22:	2500      	movs	r5, #0
   14b24:	79fb      	ldrb	r3, [r7, #7]
   14b26:	b2ec      	uxtb	r4, r5
   14b28:	42a3      	cmp	r3, r4
   14b2a:	d802      	bhi.n	14b32 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   14b2c:	f06f 0401 	mvn.w	r4, #1
   14b30:	e009      	b.n	14b46 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   14b32:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   14b36:	2207      	movs	r2, #7
   14b38:	4439      	add	r1, r7
   14b3a:	4630      	mov	r0, r6
   14b3c:	f00b fcdf 	bl	204fe <memcmp>
   14b40:	3501      	adds	r5, #1
   14b42:	2800      	cmp	r0, #0
   14b44:	d1ee      	bne.n	14b24 <id_find+0x8>
}
   14b46:	4620      	mov	r0, r4
   14b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14b4a:	bf00      	nop
   14b4c:	200002c8 	.word	0x200002c8

00014b50 <set_random_address>:
{
   14b50:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   14b52:	4914      	ldr	r1, [pc, #80]	; (14ba4 <set_random_address+0x54>)
   14b54:	2206      	movs	r2, #6
   14b56:	4605      	mov	r5, r0
   14b58:	f00b fcd1 	bl	204fe <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   14b5c:	4604      	mov	r4, r0
   14b5e:	b1e0      	cbz	r0, 14b9a <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   14b60:	2106      	movs	r1, #6
   14b62:	f242 0005 	movw	r0, #8197	; 0x2005
   14b66:	f7ff fa63 	bl	14030 <bt_hci_cmd_create>
	if (!buf) {
   14b6a:	4604      	mov	r4, r0
   14b6c:	b1b8      	cbz	r0, 14b9e <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14b6e:	2206      	movs	r2, #6
   14b70:	4629      	mov	r1, r5
   14b72:	3008      	adds	r0, #8
   14b74:	f00d fd20 	bl	225b8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   14b78:	4621      	mov	r1, r4
   14b7a:	2200      	movs	r2, #0
   14b7c:	f242 0005 	movw	r0, #8197	; 0x2005
   14b80:	f7ff fa90 	bl	140a4 <bt_hci_cmd_send_sync>
	if (err) {
   14b84:	4604      	mov	r4, r0
   14b86:	b940      	cbnz	r0, 14b9a <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   14b88:	2206      	movs	r2, #6
   14b8a:	4806      	ldr	r0, [pc, #24]	; (14ba4 <set_random_address+0x54>)
   14b8c:	4629      	mov	r1, r5
   14b8e:	f00b fcdf 	bl	20550 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   14b92:	4b05      	ldr	r3, [pc, #20]	; (14ba8 <set_random_address+0x58>)
   14b94:	2201      	movs	r2, #1
   14b96:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
   14b9a:	4620      	mov	r0, r4
   14b9c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   14b9e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14ba2:	e7fa      	b.n	14b9a <set_random_address+0x4a>
   14ba4:	20000329 	.word	0x20000329
   14ba8:	200002c8 	.word	0x200002c8

00014bac <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   14bac:	b530      	push	{r4, r5, lr}
   14bae:	4604      	mov	r4, r0
   14bb0:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   14bb2:	460d      	mov	r5, r1
   14bb4:	b1a1      	cbz	r1, 14be0 <id_create.constprop.0+0x34>
   14bb6:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   14bb8:	2207      	movs	r2, #7
   14bba:	a902      	add	r1, sp, #8
   14bbc:	4628      	mov	r0, r5
   14bbe:	9302      	str	r3, [sp, #8]
   14bc0:	f8cd 300b 	str.w	r3, [sp, #11]
   14bc4:	f00b fc9b 	bl	204fe <memcmp>
   14bc8:	b150      	cbz	r0, 14be0 <id_create.constprop.0+0x34>
	memcpy(dst, src, sizeof(*dst));
   14bca:	4812      	ldr	r0, [pc, #72]	; (14c14 <id_create.constprop.0+0x68>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   14bcc:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   14bd0:	2207      	movs	r2, #7
   14bd2:	4629      	mov	r1, r5
   14bd4:	4420      	add	r0, r4
   14bd6:	f00b fcbb 	bl	20550 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   14bda:	2000      	movs	r0, #0
}
   14bdc:	b005      	add	sp, #20
   14bde:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   14be0:	4668      	mov	r0, sp
   14be2:	f00b fd27 	bl	20634 <bt_addr_le_create_static>
			if (err) {
   14be6:	2800      	cmp	r0, #0
   14be8:	d1f8      	bne.n	14bdc <id_create.constprop.0+0x30>
		} while (id_find(&new_addr) >= 0);
   14bea:	4668      	mov	r0, sp
   14bec:	f7ff ff96 	bl	14b1c <id_find>
   14bf0:	2800      	cmp	r0, #0
   14bf2:	daf5      	bge.n	14be0 <id_create.constprop.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   14bf4:	4807      	ldr	r0, [pc, #28]	; (14c14 <id_create.constprop.0+0x68>)
   14bf6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   14bfa:	4404      	add	r4, r0
   14bfc:	2207      	movs	r2, #7
   14bfe:	4669      	mov	r1, sp
   14c00:	4620      	mov	r0, r4
   14c02:	f00b fca5 	bl	20550 <memcpy>
		if (addr) {
   14c06:	2d00      	cmp	r5, #0
   14c08:	d0e7      	beq.n	14bda <id_create.constprop.0+0x2e>
   14c0a:	2207      	movs	r2, #7
   14c0c:	4621      	mov	r1, r4
   14c0e:	4628      	mov	r0, r5
   14c10:	e7e1      	b.n	14bd6 <id_create.constprop.0+0x2a>
   14c12:	bf00      	nop
   14c14:	200002c8 	.word	0x200002c8

00014c18 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   14c18:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14c1a:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   14c1c:	4605      	mov	r5, r0
   14c1e:	b918      	cbnz	r0, 14c28 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   14c20:	b1ec      	cbz	r4, 14c5e <bt_id_create+0x46>
		return -EINVAL;
   14c22:	f06f 0015 	mvn.w	r0, #21
   14c26:	e018      	b.n	14c5a <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   14c28:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   14c2a:	2207      	movs	r2, #7
   14c2c:	4669      	mov	r1, sp
   14c2e:	9300      	str	r3, [sp, #0]
   14c30:	f8cd 3003 	str.w	r3, [sp, #3]
   14c34:	f00b fc63 	bl	204fe <memcmp>
   14c38:	2800      	cmp	r0, #0
   14c3a:	d0f1      	beq.n	14c20 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   14c3c:	782b      	ldrb	r3, [r5, #0]
   14c3e:	2b01      	cmp	r3, #1
   14c40:	d1ef      	bne.n	14c22 <bt_id_create+0xa>
   14c42:	79ab      	ldrb	r3, [r5, #6]
   14c44:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14c48:	2bc0      	cmp	r3, #192	; 0xc0
   14c4a:	d1ea      	bne.n	14c22 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   14c4c:	4628      	mov	r0, r5
   14c4e:	f7ff ff65 	bl	14b1c <id_find>
   14c52:	2800      	cmp	r0, #0
   14c54:	dbe4      	blt.n	14c20 <bt_id_create+0x8>
			return -EALREADY;
   14c56:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   14c5a:	b002      	add	sp, #8
   14c5c:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   14c5e:	4e13      	ldr	r6, [pc, #76]	; (14cac <bt_id_create+0x94>)
   14c60:	79f3      	ldrb	r3, [r6, #7]
   14c62:	2b01      	cmp	r3, #1
   14c64:	d01e      	beq.n	14ca4 <bt_id_create+0x8c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14c66:	f3bf 8f5b 	dmb	ish
   14c6a:	f8d6 30cc 	ldr.w	r3, [r6, #204]	; 0xcc
   14c6e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14c72:	07db      	lsls	r3, r3, #31
   14c74:	d40b      	bmi.n	14c8e <bt_id_create+0x76>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   14c76:	2d00      	cmp	r5, #0
   14c78:	d0d3      	beq.n	14c22 <bt_id_create+0xa>
   14c7a:	2207      	movs	r2, #7
   14c7c:	4669      	mov	r1, sp
   14c7e:	4628      	mov	r0, r5
   14c80:	9400      	str	r4, [sp, #0]
   14c82:	f8cd 4003 	str.w	r4, [sp, #3]
   14c86:	f00b fc3a 	bl	204fe <memcmp>
   14c8a:	2800      	cmp	r0, #0
   14c8c:	d0c9      	beq.n	14c22 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   14c8e:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
   14c90:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   14c92:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
   14c94:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   14c96:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
   14c98:	f7ff ff88 	bl	14bac <id_create.constprop.0>
	new_id = bt_dev.id_count++;
   14c9c:	2800      	cmp	r0, #0
   14c9e:	bf08      	it	eq
   14ca0:	4620      	moveq	r0, r4
   14ca2:	e7da      	b.n	14c5a <bt_id_create+0x42>
		return -ENOMEM;
   14ca4:	f06f 000b 	mvn.w	r0, #11
   14ca8:	e7d7      	b.n	14c5a <bt_id_create+0x42>
   14caa:	bf00      	nop
   14cac:	200002c8 	.word	0x200002c8

00014cb0 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   14cb0:	b570      	push	{r4, r5, r6, lr}
   14cb2:	b086      	sub	sp, #24
   14cb4:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   14cb6:	aa01      	add	r2, sp, #4
   14cb8:	2100      	movs	r1, #0
   14cba:	f241 0009 	movw	r0, #4105	; 0x1009
   14cbe:	f7ff f9f1 	bl	140a4 <bt_hci_cmd_send_sync>
	if (err) {
   14cc2:	4604      	mov	r4, r0
   14cc4:	b970      	cbnz	r0, 14ce4 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   14cc6:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   14cc8:	9002      	str	r0, [sp, #8]
   14cca:	689d      	ldr	r5, [r3, #8]
   14ccc:	f8ad 000c 	strh.w	r0, [sp, #12]
   14cd0:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   14cd2:	2206      	movs	r2, #6
   14cd4:	a902      	add	r1, sp, #8
   14cd6:	4628      	mov	r0, r5
   14cd8:	f00b fc11 	bl	204fe <memcmp>
   14cdc:	b920      	cbnz	r0, 14ce8 <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   14cde:	9801      	ldr	r0, [sp, #4]
   14ce0:	f002 fb42 	bl	17368 <net_buf_unref>
		return 0U;
   14ce4:	2000      	movs	r0, #0
   14ce6:	e016      	b.n	14d16 <bt_id_read_public_addr+0x66>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   14ce8:	4b0c      	ldr	r3, [pc, #48]	; (14d1c <bt_id_read_public_addr+0x6c>)
   14cea:	6818      	ldr	r0, [r3, #0]
   14cec:	9004      	str	r0, [sp, #16]
   14cee:	889b      	ldrh	r3, [r3, #4]
   14cf0:	f8ad 3014 	strh.w	r3, [sp, #20]
   14cf4:	2206      	movs	r2, #6
   14cf6:	a904      	add	r1, sp, #16
   14cf8:	4628      	mov	r0, r5
   14cfa:	f00b fc00 	bl	204fe <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   14cfe:	2800      	cmp	r0, #0
   14d00:	d0ed      	beq.n	14cde <bt_id_read_public_addr+0x2e>
	memcpy(dst, src, sizeof(*dst));
   14d02:	2206      	movs	r2, #6
   14d04:	4629      	mov	r1, r5
   14d06:	1c70      	adds	r0, r6, #1
   14d08:	f00b fc22 	bl	20550 <memcpy>
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
   14d0c:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   14d0e:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   14d10:	f002 fb2a 	bl	17368 <net_buf_unref>
	return 1U;
   14d14:	2001      	movs	r0, #1
}
   14d16:	b006      	add	sp, #24
   14d18:	bd70      	pop	{r4, r5, r6, pc}
   14d1a:	bf00      	nop
   14d1c:	00023f83 	.word	0x00023f83

00014d20 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   14d20:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   14d22:	4668      	mov	r0, sp
   14d24:	f7ff ffc4 	bl	14cb0 <bt_id_read_public_addr>
   14d28:	4b04      	ldr	r3, [pc, #16]	; (14d3c <bt_setup_public_id_addr+0x1c>)
   14d2a:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   14d2c:	b118      	cbz	r0, 14d36 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   14d2e:	4669      	mov	r1, sp
   14d30:	2000      	movs	r0, #0
   14d32:	f7ff ff3b 	bl	14bac <id_create.constprop.0>
}
   14d36:	b003      	add	sp, #12
   14d38:	f85d fb04 	ldr.w	pc, [sp], #4
   14d3c:	200002c8 	.word	0x200002c8

00014d40 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   14d40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   14d44:	4b15      	ldr	r3, [pc, #84]	; (14d9c <bt_read_static_addr+0x5c>)
   14d46:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   14d4a:	f014 0401 	ands.w	r4, r4, #1
{
   14d4e:	4607      	mov	r7, r0
   14d50:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   14d52:	d015      	beq.n	14d80 <bt_read_static_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   14d54:	aa01      	add	r2, sp, #4
   14d56:	2100      	movs	r1, #0
   14d58:	f64f 4009 	movw	r0, #64521	; 0xfc09
   14d5c:	f7ff f9a2 	bl	140a4 <bt_hci_cmd_send_sync>
	if (err) {
   14d60:	4605      	mov	r5, r0
   14d62:	b9c8      	cbnz	r0, 14d98 <bt_read_static_addr+0x58>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   14d64:	9b01      	ldr	r3, [sp, #4]
   14d66:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   14d68:	785c      	ldrb	r4, [r3, #1]
   14d6a:	42b4      	cmp	r4, r6
   14d6c:	bf28      	it	cs
   14d6e:	4634      	movcs	r4, r6
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   14d70:	f04f 0816 	mov.w	r8, #22
   14d74:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   14d76:	42a5      	cmp	r5, r4
   14d78:	db06      	blt.n	14d88 <bt_read_static_addr+0x48>
	}

	net_buf_unref(rsp);
   14d7a:	9801      	ldr	r0, [sp, #4]
   14d7c:	f002 faf4 	bl	17368 <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   14d80:	4620      	mov	r0, r4
   14d82:	b002      	add	sp, #8
   14d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   14d88:	fb08 7005 	mla	r0, r8, r5, r7
   14d8c:	2216      	movs	r2, #22
   14d8e:	4631      	mov	r1, r6
   14d90:	f00b fbde 	bl	20550 <memcpy>
	for (i = 0; i < cnt; i++) {
   14d94:	3501      	adds	r5, #1
   14d96:	e7ee      	b.n	14d76 <bt_read_static_addr+0x36>
		return 0;
   14d98:	2400      	movs	r4, #0
   14d9a:	e7f1      	b.n	14d80 <bt_read_static_addr+0x40>
   14d9c:	200002c8 	.word	0x200002c8

00014da0 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   14da0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   14da2:	4e15      	ldr	r6, [pc, #84]	; (14df8 <bt_setup_random_id_addr+0x58>)
   14da4:	79f4      	ldrb	r4, [r6, #7]
{
   14da6:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   14da8:	b9f4      	cbnz	r4, 14de8 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   14daa:	2101      	movs	r1, #1
   14dac:	a802      	add	r0, sp, #8
   14dae:	f7ff ffc7 	bl	14d40 <bt_read_static_addr>
   14db2:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   14db4:	b1c0      	cbz	r0, 14de8 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   14db6:	2716      	movs	r7, #22
   14db8:	ab02      	add	r3, sp, #8
   14dba:	b2e5      	uxtb	r5, r4
   14dbc:	fb07 3105 	mla	r1, r7, r5, r3
   14dc0:	2206      	movs	r2, #6
   14dc2:	f10d 0001 	add.w	r0, sp, #1
   14dc6:	f00b fbc3 	bl	20550 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   14dca:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
   14dcc:	4669      	mov	r1, sp
   14dce:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   14dd0:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   14dd4:	f7ff feea 	bl	14bac <id_create.constprop.0>
				if (err) {
   14dd8:	b920      	cbnz	r0, 14de4 <bt_setup_random_id_addr+0x44>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   14dda:	79f2      	ldrb	r2, [r6, #7]
   14ddc:	3401      	adds	r4, #1
   14dde:	b2e3      	uxtb	r3, r4
   14de0:	429a      	cmp	r2, r3
   14de2:	d8e9      	bhi.n	14db8 <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   14de4:	b009      	add	sp, #36	; 0x24
   14de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   14de8:	2100      	movs	r1, #0
   14dea:	4608      	mov	r0, r1
}
   14dec:	b009      	add	sp, #36	; 0x24
   14dee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   14df2:	f7ff bf11 	b.w	14c18 <bt_id_create>
   14df6:	bf00      	nop
   14df8:	200002c8 	.word	0x200002c8

00014dfc <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   14dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   14e00:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   14e04:	7805      	ldrb	r5, [r0, #0]
{
   14e06:	460e      	mov	r6, r1
   14e08:	4690      	mov	r8, r2
   14e0a:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   14e0c:	d026      	beq.n	14e5c <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   14e0e:	4c23      	ldr	r4, [pc, #140]	; (14e9c <bt_id_set_adv_own_addr+0xa0>)
   14e10:	b12a      	cbz	r2, 14e1e <bt_id_set_adv_own_addr+0x22>
   14e12:	0688      	lsls	r0, r1, #26
   14e14:	d503      	bpl.n	14e1e <bt_id_set_adv_own_addr+0x22>
   14e16:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   14e1a:	0659      	lsls	r1, r3, #25
   14e1c:	d53a      	bpl.n	14e94 <bt_id_set_adv_own_addr+0x98>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   14e1e:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   14e22:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   14e26:	5ce3      	ldrb	r3, [r4, r3]
   14e28:	2b01      	cmp	r3, #1
   14e2a:	d008      	beq.n	14e3e <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   14e2c:	eba9 0505 	sub.w	r5, r9, r5
   14e30:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   14e32:	f1b8 0f00 	cmp.w	r8, #0
   14e36:	d10c      	bne.n	14e52 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   14e38:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   14e3a:	2000      	movs	r0, #0
   14e3c:	e007      	b.n	14e4e <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   14e3e:	2007      	movs	r0, #7
   14e40:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   14e44:	4420      	add	r0, r4
   14e46:	f7ff fe83 	bl	14b50 <set_random_address>
				if (err) {
   14e4a:	2800      	cmp	r0, #0
   14e4c:	d0ee      	beq.n	14e2c <bt_id_set_adv_own_addr+0x30>
}
   14e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   14e52:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   14e54:	bf48      	it	mi
   14e56:	f043 0302 	orrmi.w	r3, r3, #2
   14e5a:	e7ed      	b.n	14e38 <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   14e5c:	074b      	lsls	r3, r1, #29
   14e5e:	d515      	bpl.n	14e8c <bt_id_set_adv_own_addr+0x90>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   14e60:	f8df 8038 	ldr.w	r8, [pc, #56]	; 14e9c <bt_id_set_adv_own_addr+0xa0>
   14e64:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   14e68:	00ee      	lsls	r6, r5, #3
   14e6a:	f818 3003 	ldrb.w	r3, [r8, r3]
   14e6e:	2b01      	cmp	r3, #1
   14e70:	d10a      	bne.n	14e88 <bt_id_set_adv_own_addr+0x8c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   14e72:	2007      	movs	r0, #7
   14e74:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   14e78:	4440      	add	r0, r8
   14e7a:	f7ff fe69 	bl	14b50 <set_random_address>
			*own_addr_type = id_addr->type;
   14e7e:	1b75      	subs	r5, r6, r5
   14e80:	f818 3005 	ldrb.w	r3, [r8, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   14e84:	703b      	strb	r3, [r7, #0]
		if (err) {
   14e86:	e7e2      	b.n	14e4e <bt_id_set_adv_own_addr+0x52>
	int err = 0;
   14e88:	4620      	mov	r0, r4
   14e8a:	e7f8      	b.n	14e7e <bt_id_set_adv_own_addr+0x82>
			err = bt_id_set_adv_private_addr(adv);
   14e8c:	f00b fe5d 	bl	20b4a <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   14e90:	2301      	movs	r3, #1
   14e92:	e7f7      	b.n	14e84 <bt_id_set_adv_own_addr+0x88>
			return -ENOTSUP;
   14e94:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14e98:	e7d9      	b.n	14e4e <bt_id_set_adv_own_addr+0x52>
   14e9a:	bf00      	nop
   14e9c:	200002c8 	.word	0x200002c8

00014ea0 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   14ea0:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   14ea2:	4c0a      	ldr	r4, [pc, #40]	; (14ecc <bt_id_init+0x2c>)
   14ea4:	79e3      	ldrb	r3, [r4, #7]
   14ea6:	b10b      	cbz	r3, 14eac <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   14ea8:	2000      	movs	r0, #0
}
   14eaa:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   14eac:	f7ff ff38 	bl	14d20 <bt_setup_public_id_addr>
		if (err) {
   14eb0:	2800      	cmp	r0, #0
   14eb2:	d1fa      	bne.n	14eaa <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   14eb4:	79e3      	ldrb	r3, [r4, #7]
   14eb6:	2b00      	cmp	r3, #0
   14eb8:	d1f6      	bne.n	14ea8 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   14eba:	f7ff ff71 	bl	14da0 <bt_setup_random_id_addr>
		if (err) {
   14ebe:	2800      	cmp	r0, #0
   14ec0:	d1f3      	bne.n	14eaa <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
   14ec2:	1c60      	adds	r0, r4, #1
}
   14ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
   14ec8:	f7ff be42 	b.w	14b50 <set_random_address>
   14ecc:	200002c8 	.word	0x200002c8

00014ed0 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   14ed0:	6843      	ldr	r3, [r0, #4]
{
   14ed2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14ed4:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   14ed6:	0558      	lsls	r0, r3, #21
   14ed8:	d502      	bpl.n	14ee0 <valid_adv_param+0x10>
		return false;
   14eda:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   14edc:	b003      	add	sp, #12
   14ede:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   14ee0:	6922      	ldr	r2, [r4, #16]
   14ee2:	b10a      	cbz	r2, 14ee8 <valid_adv_param+0x18>
   14ee4:	07d9      	lsls	r1, r3, #31
   14ee6:	d5f8      	bpl.n	14eda <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   14ee8:	4d1a      	ldr	r5, [pc, #104]	; (14f54 <valid_adv_param+0x84>)
   14eea:	7820      	ldrb	r0, [r4, #0]
   14eec:	79eb      	ldrb	r3, [r5, #7]
   14eee:	4283      	cmp	r3, r0
   14ef0:	d9f3      	bls.n	14eda <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   14ef2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   14ef6:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   14ef8:	2207      	movs	r2, #7
   14efa:	4669      	mov	r1, sp
   14efc:	4428      	add	r0, r5
   14efe:	9300      	str	r3, [sp, #0]
   14f00:	f8cd 3003 	str.w	r3, [sp, #3]
   14f04:	f00b fafb 	bl	204fe <memcmp>
	if (param->id >= bt_dev.id_count ||
   14f08:	2800      	cmp	r0, #0
   14f0a:	d0e6      	beq.n	14eda <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   14f0c:	6860      	ldr	r0, [r4, #4]
   14f0e:	07c2      	lsls	r2, r0, #31
   14f10:	d406      	bmi.n	14f20 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   14f12:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   14f16:	2b08      	cmp	r3, #8
   14f18:	d802      	bhi.n	14f20 <valid_adv_param+0x50>
   14f1a:	68a3      	ldr	r3, [r4, #8]
   14f1c:	2b9f      	cmp	r3, #159	; 0x9f
   14f1e:	d9dc      	bls.n	14eda <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   14f20:	f010 0f30 	tst.w	r0, #48	; 0x30
   14f24:	d002      	beq.n	14f2c <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   14f26:	6923      	ldr	r3, [r4, #16]
   14f28:	2b00      	cmp	r3, #0
   14f2a:	d0d6      	beq.n	14eda <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   14f2c:	06c3      	lsls	r3, r0, #27
   14f2e:	d401      	bmi.n	14f34 <valid_adv_param+0x64>
   14f30:	6923      	ldr	r3, [r4, #16]
   14f32:	b943      	cbnz	r3, 14f46 <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   14f34:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   14f38:	429a      	cmp	r2, r3
   14f3a:	d8ce      	bhi.n	14eda <valid_adv_param+0xa>
   14f3c:	2a1f      	cmp	r2, #31
   14f3e:	d9cc      	bls.n	14eda <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   14f40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   14f44:	d8c9      	bhi.n	14eda <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   14f46:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   14f4a:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   14f4e:	bf18      	it	ne
   14f50:	2001      	movne	r0, #1
   14f52:	e7c3      	b.n	14edc <valid_adv_param+0xc>
   14f54:	200002c8 	.word	0x200002c8

00014f58 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   14f58:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   14f5a:	4606      	mov	r6, r0
   14f5c:	4b1e      	ldr	r3, [pc, #120]	; (14fd8 <le_adv_start_add_conn+0x80>)
   14f5e:	f816 2b09 	ldrb.w	r2, [r6], #9
   14f62:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   14f66:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   14f68:	2300      	movs	r3, #0
{
   14f6a:	4605      	mov	r5, r0
   14f6c:	2207      	movs	r2, #7
   14f6e:	460f      	mov	r7, r1
   14f70:	4630      	mov	r0, r6
   14f72:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   14f74:	9300      	str	r3, [sp, #0]
   14f76:	f8cd 3003 	str.w	r3, [sp, #3]
   14f7a:	f00b fac0 	bl	204fe <memcmp>
   14f7e:	782a      	ldrb	r2, [r5, #0]
   14f80:	4604      	mov	r4, r0
   14f82:	b9a8      	cbnz	r0, 14fb0 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   14f84:	4b15      	ldr	r3, [pc, #84]	; (14fdc <le_adv_start_add_conn+0x84>)
   14f86:	6818      	ldr	r0, [r3, #0]
   14f88:	8899      	ldrh	r1, [r3, #4]
   14f8a:	9002      	str	r0, [sp, #8]
   14f8c:	799b      	ldrb	r3, [r3, #6]
   14f8e:	f8ad 100c 	strh.w	r1, [sp, #12]
   14f92:	4610      	mov	r0, r2
   14f94:	a902      	add	r1, sp, #8
   14f96:	f88d 300e 	strb.w	r3, [sp, #14]
   14f9a:	f000 fccd 	bl	15938 <bt_conn_add_le>
		if (!conn) {
   14f9e:	4605      	mov	r5, r0
   14fa0:	b1b8      	cbz	r0, 14fd2 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   14fa2:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   14fa4:	f000 fb6c 	bl	15680 <bt_conn_set_state>
	*out_conn = conn;
   14fa8:	603d      	str	r5, [r7, #0]
	return 0;
}
   14faa:	4620      	mov	r0, r4
   14fac:	b005      	add	sp, #20
   14fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   14fb0:	4631      	mov	r1, r6
   14fb2:	4610      	mov	r0, r2
   14fb4:	f00c f846 	bl	21044 <bt_conn_exists_le>
   14fb8:	4604      	mov	r4, r0
   14fba:	b938      	cbnz	r0, 14fcc <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   14fbc:	7828      	ldrb	r0, [r5, #0]
   14fbe:	4631      	mov	r1, r6
   14fc0:	f000 fcba 	bl	15938 <bt_conn_add_le>
	if (!conn) {
   14fc4:	4605      	mov	r5, r0
   14fc6:	b120      	cbz	r0, 14fd2 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   14fc8:	2105      	movs	r1, #5
   14fca:	e7eb      	b.n	14fa4 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   14fcc:	f06f 0415 	mvn.w	r4, #21
   14fd0:	e7eb      	b.n	14faa <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   14fd2:	f06f 040b 	mvn.w	r4, #11
   14fd6:	e7e8      	b.n	14faa <le_adv_start_add_conn+0x52>
   14fd8:	200002c8 	.word	0x200002c8
   14fdc:	00023f89 	.word	0x00023f89

00014fe0 <bt_le_adv_lookup_legacy>:
}
   14fe0:	4800      	ldr	r0, [pc, #0]	; (14fe4 <bt_le_adv_lookup_legacy+0x4>)
   14fe2:	4770      	bx	lr
   14fe4:	200002e0 	.word	0x200002e0

00014fe8 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   14fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   14fec:	690e      	ldr	r6, [r1, #16]
{
   14fee:	b08f      	sub	sp, #60	; 0x3c
   14ff0:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   14ff2:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   14ff4:	ebb6 0903 	subs.w	r9, r6, r3
{
   14ff8:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14ffa:	488c      	ldr	r0, [pc, #560]	; (1522c <bt_le_adv_start_legacy+0x244>)
   14ffc:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   14ffe:	bf18      	it	ne
   15000:	f04f 0901 	movne.w	r9, #1
	struct bt_conn *conn = NULL;
   15004:	9307      	str	r3, [sp, #28]
   15006:	f00b fdc3 	bl	20b90 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1500a:	0747      	lsls	r7, r0, #29
{
   1500c:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1500e:	f140 8102 	bpl.w	15216 <bt_le_adv_start_legacy+0x22e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   15012:	4608      	mov	r0, r1
   15014:	f7ff ff5c 	bl	14ed0 <valid_adv_param>
   15018:	b928      	cbnz	r0, 15026 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   1501a:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   1501e:	4658      	mov	r0, fp
   15020:	b00f      	add	sp, #60	; 0x3c
   15022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   15026:	4620      	mov	r0, r4
   15028:	f00b fda1 	bl	20b6e <bt_id_adv_random_addr_check>
   1502c:	4680      	mov	r8, r0
   1502e:	2800      	cmp	r0, #0
   15030:	d0f3      	beq.n	1501a <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   15032:	f105 0710 	add.w	r7, r5, #16
   15036:	4638      	mov	r0, r7
   15038:	f00b fdaa 	bl	20b90 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1503c:	f3c0 1b80 	ubfx	fp, r0, #6, #1
   15040:	0640      	lsls	r0, r0, #25
   15042:	f100 80eb 	bmi.w	1521c <bt_le_adv_start_legacy+0x234>
	(void)memset(&set_param, 0, sizeof(set_param));
   15046:	220f      	movs	r2, #15
   15048:	4659      	mov	r1, fp
   1504a:	a80a      	add	r0, sp, #40	; 0x28
   1504c:	f00b fa8b 	bl	20566 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   15050:	68a3      	ldr	r3, [r4, #8]
   15052:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   15056:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   15058:	68e3      	ldr	r3, [r4, #12]
   1505a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   1505e:	f00b fd88 	bl	20b72 <get_adv_channel_map>
	if (adv->id != param->id) {
   15062:	782a      	ldrb	r2, [r5, #0]
   15064:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   15066:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   1506a:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   1506c:	f88d b036 	strb.w	fp, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   15070:	d004      	beq.n	1507c <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15072:	486e      	ldr	r0, [pc, #440]	; (1522c <bt_le_adv_start_legacy+0x244>)
   15074:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   15078:	f00b fd90 	bl	20b9c <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   1507c:	4a6c      	ldr	r2, [pc, #432]	; (15230 <bt_le_adv_start_legacy+0x248>)
	adv->id = param->id;
   1507e:	7823      	ldrb	r3, [r4, #0]
   15080:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   15082:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   15086:	6861      	ldr	r1, [r4, #4]
   15088:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   1508c:	464a      	mov	r2, r9
   1508e:	4628      	mov	r0, r5
   15090:	f7ff feb4 	bl	14dfc <bt_id_set_adv_own_addr>
	if (err) {
   15094:	4683      	mov	fp, r0
   15096:	2800      	cmp	r0, #0
   15098:	d1c1      	bne.n	1501e <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   1509a:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
   1509e:	2e00      	cmp	r6, #0
   150a0:	d049      	beq.n	15136 <bt_le_adv_start_legacy+0x14e>
	memcpy(dst, src, sizeof(*dst));
   150a2:	6921      	ldr	r1, [r4, #16]
   150a4:	2207      	movs	r2, #7
   150a6:	f00b fa53 	bl	20550 <memcpy>
	name_type = get_adv_name_type_param(param);
   150aa:	4620      	mov	r0, r4
   150ac:	f00b fe74 	bl	20d98 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   150b0:	6863      	ldr	r3, [r4, #4]
   150b2:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   150b4:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   150b6:	d547      	bpl.n	15148 <bt_le_adv_start_legacy+0x160>
		if (dir_adv) {
   150b8:	2e00      	cmp	r6, #0
   150ba:	d042      	beq.n	15142 <bt_le_adv_start_legacy+0x15a>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   150bc:	f013 0f10 	tst.w	r3, #16
   150c0:	bf14      	ite	ne
   150c2:	2304      	movne	r3, #4
   150c4:	2301      	moveq	r3, #1
   150c6:	6921      	ldr	r1, [r4, #16]
   150c8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   150cc:	2207      	movs	r2, #7
   150ce:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   150d2:	f00b fa3d 	bl	20550 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   150d6:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   150da:	210f      	movs	r1, #15
   150dc:	f242 0006 	movw	r0, #8198	; 0x2006
   150e0:	f7fe ffa6 	bl	14030 <bt_hci_cmd_create>
	if (!buf) {
   150e4:	4683      	mov	fp, r0
   150e6:	2800      	cmp	r0, #0
   150e8:	f000 809b 	beq.w	15222 <bt_le_adv_start_legacy+0x23a>
   150ec:	220f      	movs	r2, #15
   150ee:	a90a      	add	r1, sp, #40	; 0x28
   150f0:	3008      	adds	r0, #8
   150f2:	f00d fa61 	bl	225b8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   150f6:	2200      	movs	r2, #0
   150f8:	4659      	mov	r1, fp
   150fa:	f242 0006 	movw	r0, #8198	; 0x2006
   150fe:	f7fe ffd1 	bl	140a4 <bt_hci_cmd_send_sync>
	if (err) {
   15102:	2800      	cmp	r0, #0
   15104:	f040 8090 	bne.w	15228 <bt_le_adv_start_legacy+0x240>
	if (!dir_adv) {
   15108:	b376      	cbz	r6, 15168 <bt_le_adv_start_legacy+0x180>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1510a:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1510c:	07db      	lsls	r3, r3, #31
   1510e:	d439      	bmi.n	15184 <bt_le_adv_start_legacy+0x19c>
	return bt_le_adv_set_enable_legacy(adv, enable);
   15110:	2101      	movs	r1, #1
   15112:	4628      	mov	r0, r5
   15114:	f00b fe50 	bl	20db8 <bt_le_adv_set_enable_legacy>
	if (err) {
   15118:	4683      	mov	fp, r0
   1511a:	9807      	ldr	r0, [sp, #28]
   1511c:	f1bb 0f00 	cmp.w	fp, #0
   15120:	d073      	beq.n	1520a <bt_le_adv_start_legacy+0x222>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   15122:	2800      	cmp	r0, #0
   15124:	f43f af7b 	beq.w	1501e <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15128:	2100      	movs	r1, #0
   1512a:	f000 faa9 	bl	15680 <bt_conn_set_state>
			bt_conn_unref(conn);
   1512e:	9807      	ldr	r0, [sp, #28]
   15130:	f00b ff21 	bl	20f76 <bt_conn_unref>
   15134:	e773      	b.n	1501e <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   15136:	9608      	str	r6, [sp, #32]
   15138:	2207      	movs	r2, #7
   1513a:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
   1513e:	a908      	add	r1, sp, #32
   15140:	e7b1      	b.n	150a6 <bt_le_adv_start_legacy+0xbe>
			set_param.type = BT_HCI_ADV_IND;
   15142:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   15146:	e7c8      	b.n	150da <bt_le_adv_start_legacy+0xf2>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   15148:	059a      	lsls	r2, r3, #22
   1514a:	d403      	bmi.n	15154 <bt_le_adv_start_legacy+0x16c>
   1514c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1514e:	b90b      	cbnz	r3, 15154 <bt_le_adv_start_legacy+0x16c>
   15150:	2802      	cmp	r0, #2
   15152:	d103      	bne.n	1515c <bt_le_adv_start_legacy+0x174>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   15154:	2302      	movs	r3, #2
   15156:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1515a:	e7be      	b.n	150da <bt_le_adv_start_legacy+0xf2>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   1515c:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   1515e:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   15162:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   15166:	e7b8      	b.n	150da <bt_le_adv_start_legacy+0xf2>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   15168:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1516a:	9300      	str	r3, [sp, #0]
   1516c:	e9cd 8901 	strd	r8, r9, [sp, #4]
   15170:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15172:	9905      	ldr	r1, [sp, #20]
   15174:	4652      	mov	r2, sl
   15176:	4628      	mov	r0, r5
   15178:	f00b fd97 	bl	20caa <le_adv_update.constprop.0>
		if (err) {
   1517c:	4683      	mov	fp, r0
   1517e:	2800      	cmp	r0, #0
   15180:	d0c3      	beq.n	1510a <bt_le_adv_start_legacy+0x122>
   15182:	e74c      	b.n	1501e <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   15184:	a907      	add	r1, sp, #28
   15186:	4628      	mov	r0, r5
   15188:	f7ff fee6 	bl	14f58 <le_adv_start_add_conn>
		if (err) {
   1518c:	4683      	mov	fp, r0
   1518e:	2800      	cmp	r0, #0
   15190:	d0be      	beq.n	15110 <bt_le_adv_start_legacy+0x128>
			if (err == -ENOMEM && !dir_adv &&
   15192:	f110 0f0c 	cmn.w	r0, #12
   15196:	f47f af42 	bne.w	1501e <bt_le_adv_start_legacy+0x36>
   1519a:	2e00      	cmp	r6, #0
   1519c:	f47f af3f 	bne.w	1501e <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   151a0:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   151a2:	0798      	lsls	r0, r3, #30
   151a4:	f53f af3b 	bmi.w	1501e <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   151a8:	6862      	ldr	r2, [r4, #4]
   151aa:	f082 0202 	eor.w	r2, r2, #2
   151ae:	f3c2 0b40 	ubfx	fp, r2, #1, #1
   151b2:	f00b 0201 	and.w	r2, fp, #1
   151b6:	210d      	movs	r1, #13
   151b8:	4638      	mov	r0, r7
   151ba:	f00b fd5f 	bl	20c7c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   151be:	f109 33ff 	add.w	r3, r9, #4294967295
   151c2:	425a      	negs	r2, r3
   151c4:	415a      	adcs	r2, r3
   151c6:	2107      	movs	r1, #7
   151c8:	4638      	mov	r0, r7
   151ca:	f00b fd57 	bl	20c7c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   151ce:	f1a9 0102 	sub.w	r1, r9, #2
   151d2:	424a      	negs	r2, r1
   151d4:	414a      	adcs	r2, r1
   151d6:	4638      	mov	r0, r7
   151d8:	2108      	movs	r1, #8
   151da:	f00b fd4f 	bl	20c7c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   151de:	6862      	ldr	r2, [r4, #4]
   151e0:	2109      	movs	r1, #9
   151e2:	f002 0201 	and.w	r2, r2, #1
   151e6:	4638      	mov	r0, r7
   151e8:	f00b fd48 	bl	20c7c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   151ec:	4642      	mov	r2, r8
   151ee:	210a      	movs	r1, #10
   151f0:	4638      	mov	r0, r7
   151f2:	f00b fd43 	bl	20c7c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   151f6:	6862      	ldr	r2, [r4, #4]
   151f8:	210c      	movs	r1, #12
   151fa:	f3c2 0280 	ubfx	r2, r2, #2, #1
   151fe:	4638      	mov	r0, r7
   15200:	f00b fd3c 	bl	20c7c <atomic_set_bit_to>
	return 0;
   15204:	f04f 0b00 	mov.w	fp, #0
   15208:	e709      	b.n	1501e <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1520a:	b108      	cbz	r0, 15210 <bt_le_adv_start_legacy+0x228>
		bt_conn_unref(conn);
   1520c:	f00b feb3 	bl	20f76 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   15210:	2e00      	cmp	r6, #0
   15212:	d1ce      	bne.n	151b2 <bt_le_adv_start_legacy+0x1ca>
   15214:	e7c8      	b.n	151a8 <bt_le_adv_start_legacy+0x1c0>
		return -EAGAIN;
   15216:	f06f 0b0a 	mvn.w	fp, #10
   1521a:	e700      	b.n	1501e <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   1521c:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   15220:	e6fd      	b.n	1501e <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   15222:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   15226:	e6fa      	b.n	1501e <bt_le_adv_start_legacy+0x36>
   15228:	4683      	mov	fp, r0
   1522a:	e6f8      	b.n	1501e <bt_le_adv_start_legacy+0x36>
   1522c:	20000394 	.word	0x20000394
   15230:	200002c8 	.word	0x200002c8

00015234 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   15234:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15236:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   15238:	9a06      	ldr	r2, [sp, #24]
{
   1523a:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1523c:	e9cd 3200 	strd	r3, r2, [sp]
   15240:	462b      	mov	r3, r5
   15242:	460a      	mov	r2, r1
   15244:	4601      	mov	r1, r0
   15246:	4811      	ldr	r0, [pc, #68]	; (1528c <bt_le_adv_start+0x58>)
   15248:	f7ff fece 	bl	14fe8 <bt_le_adv_start_legacy>
   1524c:	4621      	mov	r1, r4
   1524e:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   15250:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   15252:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   15256:	429d      	cmp	r5, r3
   15258:	d102      	bne.n	15260 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   1525a:	4630      	mov	r0, r6
   1525c:	b002      	add	sp, #8
   1525e:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   15260:	880a      	ldrh	r2, [r1, #0]
   15262:	4282      	cmp	r2, r0
   15264:	d104      	bne.n	15270 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   15266:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   15268:	b112      	cbz	r2, 15270 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   1526a:	7812      	ldrb	r2, [r2, #0]
   1526c:	07d2      	lsls	r2, r2, #31
   1526e:	d402      	bmi.n	15276 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   15270:	3301      	adds	r3, #1
   15272:	3108      	adds	r1, #8
   15274:	e7ef      	b.n	15256 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   15276:	4906      	ldr	r1, [pc, #24]	; (15290 <bt_le_adv_start+0x5c>)
   15278:	4806      	ldr	r0, [pc, #24]	; (15294 <bt_le_adv_start+0x60>)
   1527a:	f00e f8e8 	bl	2344e <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   1527e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   15282:	2300      	movs	r3, #0
   15284:	4803      	ldr	r0, [pc, #12]	; (15294 <bt_le_adv_start+0x60>)
   15286:	f006 f91f 	bl	1b4c8 <k_work_reschedule>
   1528a:	e7e6      	b.n	1525a <bt_le_adv_start+0x26>
   1528c:	200002e0 	.word	0x200002e0
   15290:	00020e09 	.word	0x00020e09
   15294:	200002f8 	.word	0x200002f8

00015298 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   15298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!adv) {
		BT_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   1529a:	4822      	ldr	r0, [pc, #136]	; (15324 <bt_le_adv_stop+0x8c>)
   1529c:	f00b fdb1 	bl	20e02 <bt_le_lim_adv_cancel_timeout>
   152a0:	4821      	ldr	r0, [pc, #132]	; (15328 <bt_le_adv_stop+0x90>)
   152a2:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   152a6:	f00b fc79 	bl	20b9c <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   152aa:	481f      	ldr	r0, [pc, #124]	; (15328 <bt_le_adv_stop+0x90>)
   152ac:	f00b fc70 	bl	20b90 <atomic_get>
   152b0:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   152b2:	065a      	lsls	r2, r3, #25
   152b4:	f3c0 1080 	ubfx	r0, r0, #6, #1
   152b8:	d531      	bpl.n	1531e <bt_le_adv_stop+0x86>
   152ba:	481b      	ldr	r0, [pc, #108]	; (15328 <bt_le_adv_stop+0x90>)
   152bc:	f00b fc68 	bl	20b90 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   152c0:	0583      	lsls	r3, r0, #22
   152c2:	d521      	bpl.n	15308 <bt_le_adv_stop+0x70>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   152c4:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   152c6:	4819      	ldr	r0, [pc, #100]	; (1532c <bt_le_adv_stop+0x94>)
   152c8:	9300      	str	r3, [sp, #0]
   152ca:	2207      	movs	r2, #7
   152cc:	4669      	mov	r1, sp
   152ce:	f8cd 3003 	str.w	r3, [sp, #3]
   152d2:	f00b f914 	bl	204fe <memcmp>
   152d6:	4b16      	ldr	r3, [pc, #88]	; (15330 <bt_le_adv_stop+0x98>)
   152d8:	b9e8      	cbnz	r0, 15316 <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   152da:	4a16      	ldr	r2, [pc, #88]	; (15334 <bt_le_adv_stop+0x9c>)
   152dc:	8891      	ldrh	r1, [r2, #4]
   152de:	6810      	ldr	r0, [r2, #0]
   152e0:	7992      	ldrb	r2, [r2, #6]
   152e2:	f8ad 100c 	strh.w	r1, [sp, #12]
   152e6:	f88d 200e 	strb.w	r2, [sp, #14]
   152ea:	9002      	str	r0, [sp, #8]
   152ec:	2204      	movs	r2, #4
   152ee:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   152f0:	7e18      	ldrb	r0, [r3, #24]
   152f2:	f000 fb59 	bl	159a8 <bt_conn_lookup_state_le>
   152f6:	4604      	mov	r4, r0
	if (conn) {
   152f8:	b130      	cbz	r0, 15308 <bt_le_adv_stop+0x70>
		conn->err = status;
   152fa:	2100      	movs	r1, #0
   152fc:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   152fe:	f000 f9bf 	bl	15680 <bt_conn_set_state>
		bt_conn_unref(conn);
   15302:	4620      	mov	r0, r4
   15304:	f00b fe37 	bl	20f76 <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   15308:	4806      	ldr	r0, [pc, #24]	; (15324 <bt_le_adv_stop+0x8c>)
   1530a:	2100      	movs	r1, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   1530c:	b004      	add	sp, #16
   1530e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   15312:	f00b bd51 	b.w	20db8 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   15316:	2205      	movs	r2, #5
   15318:	f103 0121 	add.w	r1, r3, #33	; 0x21
   1531c:	e7e8      	b.n	152f0 <bt_le_adv_stop+0x58>
}
   1531e:	b004      	add	sp, #16
   15320:	bd10      	pop	{r4, pc}
   15322:	bf00      	nop
   15324:	200002e0 	.word	0x200002e0
   15328:	200002f0 	.word	0x200002f0
   1532c:	200002e9 	.word	0x200002e9
   15330:	200002c8 	.word	0x200002c8
   15334:	00023f89 	.word	0x00023f89

00015338 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   15338:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1533a:	481e      	ldr	r0, [pc, #120]	; (153b4 <bt_le_adv_resume+0x7c>)
   1533c:	4c1d      	ldr	r4, [pc, #116]	; (153b4 <bt_le_adv_resume+0x7c>)
   1533e:	f00b fc27 	bl	20b90 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   15342:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   15346:	d032      	beq.n	153ae <bt_le_adv_resume+0x76>
   15348:	4620      	mov	r0, r4
   1534a:	f00b fc21 	bl	20b90 <atomic_get>
   1534e:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   15350:	f3c0 1580 	ubfx	r5, r0, #6, #1
   15354:	d42b      	bmi.n	153ae <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15356:	4620      	mov	r0, r4
   15358:	f00b fc1a 	bl	20b90 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   1535c:	0583      	lsls	r3, r0, #22
   1535e:	d526      	bpl.n	153ae <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   15360:	a901      	add	r1, sp, #4
   15362:	f1a4 0010 	sub.w	r0, r4, #16
   15366:	f7ff fdf7 	bl	14f58 <le_adv_start_add_conn>
	if (err) {
   1536a:	bb00      	cbnz	r0, 153ae <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
   1536c:	2101      	movs	r1, #1
   1536e:	f1a4 0010 	sub.w	r0, r4, #16
   15372:	f00b fd21 	bl	20db8 <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
   15376:	b150      	cbz	r0, 1538e <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15378:	4629      	mov	r1, r5
   1537a:	9801      	ldr	r0, [sp, #4]
   1537c:	f000 f980 	bl	15680 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15380:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   15384:	4620      	mov	r0, r4
   15386:	f00b fc09 	bl	20b9c <atomic_and>
	return (old & mask) != 0;
   1538a:	f3c0 3540 	ubfx	r5, r0, #13, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   1538e:	9801      	ldr	r0, [sp, #4]
   15390:	f00b fdf1 	bl	20f76 <bt_conn_unref>
	if (persist_paused) {
   15394:	b15d      	cbz	r5, 153ae <bt_le_adv_resume+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15396:	f3bf 8f5b 	dmb	ish
   1539a:	e854 3f00 	ldrex	r3, [r4]
   1539e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   153a2:	e844 3200 	strex	r2, r3, [r4]
   153a6:	2a00      	cmp	r2, #0
   153a8:	d1f7      	bne.n	1539a <bt_le_adv_resume+0x62>
   153aa:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   153ae:	b003      	add	sp, #12
   153b0:	bd30      	pop	{r4, r5, pc}
   153b2:	bf00      	nop
   153b4:	200002f0 	.word	0x200002f0

000153b8 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   153b8:	4b0b      	ldr	r3, [pc, #44]	; (153e8 <notify_connected+0x30>)
{
   153ba:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   153bc:	681d      	ldr	r5, [r3, #0]
{
   153be:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   153c0:	b925      	cbnz	r5, 153cc <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   153c2:	4d0a      	ldr	r5, [pc, #40]	; (153ec <notify_connected+0x34>)
   153c4:	4e0a      	ldr	r6, [pc, #40]	; (153f0 <notify_connected+0x38>)
   153c6:	42b5      	cmp	r5, r6
   153c8:	d307      	bcc.n	153da <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   153ca:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   153cc:	682b      	ldr	r3, [r5, #0]
   153ce:	b113      	cbz	r3, 153d6 <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   153d0:	7a61      	ldrb	r1, [r4, #9]
   153d2:	4620      	mov	r0, r4
   153d4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   153d6:	692d      	ldr	r5, [r5, #16]
   153d8:	e7f2      	b.n	153c0 <notify_connected+0x8>
		if (cb->connected) {
   153da:	682b      	ldr	r3, [r5, #0]
   153dc:	b113      	cbz	r3, 153e4 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   153de:	7a61      	ldrb	r1, [r4, #9]
   153e0:	4620      	mov	r0, r4
   153e2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   153e4:	3514      	adds	r5, #20
   153e6:	e7ee      	b.n	153c6 <notify_connected+0xe>
   153e8:	20002708 	.word	0x20002708
   153ec:	00023e78 	.word	0x00023e78
   153f0:	00023e78 	.word	0x00023e78

000153f4 <tx_free>:
	tx->cb = NULL;
   153f4:	2300      	movs	r3, #0
	tx->user_data = NULL;
   153f6:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   153fa:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   153fc:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   153fe:	4801      	ldr	r0, [pc, #4]	; (15404 <tx_free+0x10>)
   15400:	f00d bf19 	b.w	23236 <k_queue_append>
   15404:	20000bb0 	.word	0x20000bb0

00015408 <send_frag>:
{
   15408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   1540c:	694d      	ldr	r5, [r1, #20]
{
   1540e:	4604      	mov	r4, r0
   15410:	460e      	mov	r6, r1
   15412:	4690      	mov	r8, r2
   15414:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   15416:	f04f 33ff 	mov.w	r3, #4294967295
   1541a:	483e      	ldr	r0, [pc, #248]	; (15514 <send_frag+0x10c>)
   1541c:	f04f 32ff 	mov.w	r2, #4294967295
   15420:	f005 fe70 	bl	1b104 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   15424:	7aa3      	ldrb	r3, [r4, #10]
   15426:	2b07      	cmp	r3, #7
   15428:	d146      	bne.n	154b8 <send_frag+0xb0>
	__asm__ volatile(
   1542a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1542e:	f3ef 8211 	mrs	r2, BASEPRI
   15432:	f383 8812 	msr	BASEPRI_MAX, r3
   15436:	f3bf 8f6f 	isb	sy
	if (tx) {
   1543a:	69a3      	ldr	r3, [r4, #24]
   1543c:	2d00      	cmp	r5, #0
   1543e:	d04d      	beq.n	154dc <send_frag+0xd4>
	parent->next = child;
   15440:	2100      	movs	r1, #0
   15442:	6029      	str	r1, [r5, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   15444:	2b00      	cmp	r3, #0
   15446:	d146      	bne.n	154d6 <send_frag+0xce>
	list->head = node;
   15448:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   1544c:	f382 8811 	msr	BASEPRI, r2
   15450:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   15454:	2104      	movs	r1, #4
   15456:	f106 0008 	add.w	r0, r6, #8
   1545a:	f00d f8be 	bl	225da <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1545e:	8823      	ldrh	r3, [r4, #0]
   15460:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   15464:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   15468:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1546a:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1546e:	3b04      	subs	r3, #4
   15470:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15472:	2302      	movs	r3, #2
   15474:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   15476:	4630      	mov	r0, r6
   15478:	f7fe ff84 	bl	14384 <bt_send>
	if (err) {
   1547c:	2800      	cmp	r0, #0
   1547e:	d047      	beq.n	15510 <send_frag+0x108>
	__asm__ volatile(
   15480:	f04f 0340 	mov.w	r3, #64	; 0x40
   15484:	f3ef 8011 	mrs	r0, BASEPRI
   15488:	f383 8812 	msr	BASEPRI_MAX, r3
   1548c:	f3bf 8f6f 	isb	sy
		if (tx) {
   15490:	2d00      	cmp	r5, #0
   15492:	d037      	beq.n	15504 <send_frag+0xfc>
	return list->head;
   15494:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15496:	2200      	movs	r2, #0
   15498:	b153      	cbz	r3, 154b0 <send_frag+0xa8>
   1549a:	429d      	cmp	r5, r3
   1549c:	d12f      	bne.n	154fe <send_frag+0xf6>
	return node->next;
   1549e:	682b      	ldr	r3, [r5, #0]
	return list->tail;
   154a0:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   154a2:	bb3a      	cbnz	r2, 154f4 <send_frag+0xec>
   154a4:	42a9      	cmp	r1, r5
	list->head = node;
   154a6:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   154a8:	d100      	bne.n	154ac <send_frag+0xa4>
	list->tail = node;
   154aa:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   154ac:	2300      	movs	r3, #0
   154ae:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   154b0:	f380 8811 	msr	BASEPRI, r0
   154b4:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   154b8:	4816      	ldr	r0, [pc, #88]	; (15514 <send_frag+0x10c>)
   154ba:	f005 fdfd 	bl	1b0b8 <z_impl_k_sem_give>
	if (tx) {
   154be:	b115      	cbz	r5, 154c6 <send_frag+0xbe>
		tx_free(tx);
   154c0:	4628      	mov	r0, r5
   154c2:	f7ff ff97 	bl	153f4 <tx_free>
	if (always_consume) {
   154c6:	b11f      	cbz	r7, 154d0 <send_frag+0xc8>
		net_buf_unref(buf);
   154c8:	4630      	mov	r0, r6
   154ca:	f001 ff4d 	bl	17368 <net_buf_unref>
	return false;
   154ce:	2700      	movs	r7, #0
}
   154d0:	4638      	mov	r0, r7
   154d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   154d6:	601d      	str	r5, [r3, #0]
	list->tail = node;
   154d8:	61a5      	str	r5, [r4, #24]
}
   154da:	e7b7      	b.n	1544c <send_frag+0x44>
		if (tail_tx) {
   154dc:	b133      	cbz	r3, 154ec <send_frag+0xe4>
			pending_no_cb = &tail_tx->pending_no_cb;
   154de:	f103 090c 	add.w	r9, r3, #12
   154e2:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   154e4:	3301      	adds	r3, #1
   154e6:	f8c9 3000 	str.w	r3, [r9]
   154ea:	e7af      	b.n	1544c <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   154ec:	69e3      	ldr	r3, [r4, #28]
   154ee:	f104 091c 	add.w	r9, r4, #28
   154f2:	e7f7      	b.n	154e4 <send_frag+0xdc>
Z_GENLIST_REMOVE(slist, snode)
   154f4:	42a9      	cmp	r1, r5
	parent->next = child;
   154f6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   154f8:	bf08      	it	eq
   154fa:	61a2      	streq	r2, [r4, #24]
}
   154fc:	e7d6      	b.n	154ac <send_frag+0xa4>
	return node->next;
   154fe:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15500:	681b      	ldr	r3, [r3, #0]
   15502:	e7c9      	b.n	15498 <send_frag+0x90>
			(*pending_no_cb)--;
   15504:	f8d9 3000 	ldr.w	r3, [r9]
   15508:	3b01      	subs	r3, #1
   1550a:	f8c9 3000 	str.w	r3, [r9]
   1550e:	e7cf      	b.n	154b0 <send_frag+0xa8>
	return true;
   15510:	2701      	movs	r7, #1
   15512:	e7dd      	b.n	154d0 <send_frag+0xc8>
   15514:	200003c8 	.word	0x200003c8

00015518 <bt_conn_get_pkts>:
}
   15518:	4800      	ldr	r0, [pc, #0]	; (1551c <bt_conn_get_pkts+0x4>)
   1551a:	4770      	bx	lr
   1551c:	200003c8 	.word	0x200003c8

00015520 <bt_conn_new>:
{
   15520:	b538      	push	{r3, r4, r5, lr}
   15522:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   15524:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   15526:	2501      	movs	r5, #1
   15528:	428b      	cmp	r3, r1
   1552a:	d102      	bne.n	15532 <bt_conn_new+0x12>
		return NULL;
   1552c:	2400      	movs	r4, #0
}
   1552e:	4620      	mov	r0, r4
   15530:	bd38      	pop	{r3, r4, r5, pc}
   15532:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   15536:	f3bf 8f5b 	dmb	ish
   1553a:	e852 0f00 	ldrex	r0, [r2]
   1553e:	2800      	cmp	r0, #0
   15540:	d104      	bne.n	1554c <bt_conn_new+0x2c>
   15542:	e842 5c00 	strex	ip, r5, [r2]
   15546:	f1bc 0f00 	cmp.w	ip, #0
   1554a:	d1f6      	bne.n	1553a <bt_conn_new+0x1a>
   1554c:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   15550:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   15554:	d002      	beq.n	1555c <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   15556:	3301      	adds	r3, #1
   15558:	4604      	mov	r4, r0
   1555a:	e7e5      	b.n	15528 <bt_conn_new+0x8>
	if (!conn) {
   1555c:	2c00      	cmp	r4, #0
   1555e:	d0e6      	beq.n	1552e <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   15560:	22b8      	movs	r2, #184	; 0xb8
   15562:	2100      	movs	r1, #0
   15564:	4620      	mov	r0, r4
   15566:	f00a fffe 	bl	20566 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1556a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1556e:	4904      	ldr	r1, [pc, #16]	; (15580 <bt_conn_new+0x60>)
   15570:	f00d ff6d 	bl	2344e <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   15574:	4903      	ldr	r1, [pc, #12]	; (15584 <bt_conn_new+0x64>)
   15576:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1557a:	f00d ff2d 	bl	233d8 <k_work_init>
	return conn;
   1557e:	e7d6      	b.n	1552e <bt_conn_new+0xe>
   15580:	00015a59 	.word	0x00015a59
   15584:	00020e53 	.word	0x00020e53

00015588 <bt_conn_send_cb>:
{
   15588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1558a:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1558c:	7a83      	ldrb	r3, [r0, #10]
   1558e:	2b07      	cmp	r3, #7
{
   15590:	4604      	mov	r4, r0
   15592:	460d      	mov	r5, r1
   15594:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   15596:	d114      	bne.n	155c2 <bt_conn_send_cb+0x3a>
	if (cb) {
   15598:	b312      	cbz	r2, 155e0 <bt_conn_send_cb+0x58>
	return z_impl_z_current_get();
   1559a:	f006 fa8d 	bl	1bab8 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1559e:	4b13      	ldr	r3, [pc, #76]	; (155ec <bt_conn_send_cb+0x64>)
   155a0:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   155a2:	4813      	ldr	r0, [pc, #76]	; (155f0 <bt_conn_send_cb+0x68>)
   155a4:	bf07      	ittee	eq
   155a6:	2200      	moveq	r2, #0
   155a8:	2300      	moveq	r3, #0
   155aa:	f04f 32ff 	movne.w	r2, #4294967295
   155ae:	f04f 33ff 	movne.w	r3, #4294967295
   155b2:	f005 fd4d 	bl	1b050 <z_impl_k_queue_get>
		if (!tx) {
   155b6:	b1a8      	cbz	r0, 155e4 <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
   155b8:	7aa3      	ldrb	r3, [r4, #10]
   155ba:	2b07      	cmp	r3, #7
   155bc:	d004      	beq.n	155c8 <bt_conn_send_cb+0x40>
			tx_free(tx);
   155be:	f7ff ff19 	bl	153f4 <tx_free>
		return -ENOTCONN;
   155c2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   155c6:	e00a      	b.n	155de <bt_conn_send_cb+0x56>
		tx->pending_no_cb = 0U;
   155c8:	2300      	movs	r3, #0
		tx->user_data = user_data;
   155ca:	e9c0 6701 	strd	r6, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   155ce:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   155d0:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   155d2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   155d6:	4629      	mov	r1, r5
   155d8:	f00c ffb5 	bl	22546 <net_buf_put>
	return 0;
   155dc:	2000      	movs	r0, #0
}
   155de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_data(buf)->tx = NULL;
   155e0:	614a      	str	r2, [r1, #20]
   155e2:	e7f6      	b.n	155d2 <bt_conn_send_cb+0x4a>
			return -ENOBUFS;
   155e4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   155e8:	e7f9      	b.n	155de <bt_conn_send_cb+0x56>
   155ea:	bf00      	nop
   155ec:	20001f58 	.word	0x20001f58
   155f0:	20000bb0 	.word	0x20000bb0

000155f4 <bt_conn_prepare_events>:
	conn_change.signaled = 0U;
   155f4:	4b1b      	ldr	r3, [pc, #108]	; (15664 <bt_conn_prepare_events+0x70>)
{
   155f6:	b510      	push	{r4, lr}
	conn_change.signaled = 0U;
   155f8:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   155fa:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
   155fc:	609a      	str	r2, [r3, #8]
{
   155fe:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   15600:	f00e fa51 	bl	23aa6 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15604:	f3bf 8f5b 	dmb	ish
   15608:	4b17      	ldr	r3, [pc, #92]	; (15668 <bt_conn_prepare_events+0x74>)
   1560a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   1560e:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   15612:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
   15616:	b90a      	cbnz	r2, 1561c <bt_conn_prepare_events+0x28>
		conn_cleanup(conn);
   15618:	2001      	movs	r0, #1
}
   1561a:	bd10      	pop	{r4, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1561c:	7a9a      	ldrb	r2, [r3, #10]
   1561e:	b99a      	cbnz	r2, 15648 <bt_conn_prepare_events+0x54>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15620:	f3bf 8f5b 	dmb	ish
   15624:	1d1a      	adds	r2, r3, #4
   15626:	e852 1f00 	ldrex	r1, [r2]
   1562a:	f021 0c40 	bic.w	ip, r1, #64	; 0x40
   1562e:	e842 ce00 	strex	lr, ip, [r2]
   15632:	f1be 0f00 	cmp.w	lr, #0
   15636:	d1f6      	bne.n	15626 <bt_conn_prepare_events+0x32>
   15638:	f3bf 8f5b 	dmb	ish
   1563c:	064a      	lsls	r2, r1, #25
   1563e:	d503      	bpl.n	15648 <bt_conn_prepare_events+0x54>
		conn_cleanup(conn);
   15640:	4618      	mov	r0, r3
   15642:	f00b fc12 	bl	20e6a <conn_cleanup>
   15646:	e7e7      	b.n	15618 <bt_conn_prepare_events+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
   15648:	7a9b      	ldrb	r3, [r3, #10]
   1564a:	2b07      	cmp	r3, #7
   1564c:	d1e4      	bne.n	15618 <bt_conn_prepare_events+0x24>
	k_poll_event_init(&events[0],
   1564e:	4b07      	ldr	r3, [pc, #28]	; (1566c <bt_conn_prepare_events+0x78>)
   15650:	2200      	movs	r2, #0
   15652:	2104      	movs	r1, #4
   15654:	f00e fa27 	bl	23aa6 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   15658:	2301      	movs	r3, #1
   1565a:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   1565e:	2002      	movs	r0, #2
	return ev_count;
   15660:	e7db      	b.n	1561a <bt_conn_prepare_events+0x26>
   15662:	bf00      	nop
   15664:	20000744 	.word	0x20000744
   15668:	20001b98 	.word	0x20001b98
   1566c:	20001bd0 	.word	0x20001bd0

00015670 <bt_conn_lookup_handle>:
{
   15670:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   15672:	2101      	movs	r1, #1
   15674:	4801      	ldr	r0, [pc, #4]	; (1567c <bt_conn_lookup_handle+0xc>)
   15676:	f00b bc98 	b.w	20faa <conn_lookup_handle>
   1567a:	bf00      	nop
   1567c:	20001b98 	.word	0x20001b98

00015680 <bt_conn_set_state>:
{
   15680:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   15682:	7a85      	ldrb	r5, [r0, #10]
   15684:	428d      	cmp	r5, r1
{
   15686:	4604      	mov	r4, r0
	if (conn->state == state) {
   15688:	f000 80a4 	beq.w	157d4 <bt_conn_set_state+0x154>
	conn->state = state;
   1568c:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   1568e:	b925      	cbnz	r5, 1569a <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
   15690:	7883      	ldrb	r3, [r0, #2]
   15692:	2b08      	cmp	r3, #8
   15694:	d001      	beq.n	1569a <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
   15696:	f00b fc53 	bl	20f40 <bt_conn_ref>
	switch (conn->state) {
   1569a:	7aa3      	ldrb	r3, [r4, #10]
   1569c:	2b01      	cmp	r3, #1
   1569e:	d116      	bne.n	156ce <bt_conn_set_state+0x4e>
	z_impl_k_sem_give(sem);
   156a0:	4d4d      	ldr	r5, [pc, #308]	; (157d8 <bt_conn_set_state+0x158>)
		tx->pending_no_cb = 0U;
   156a2:	2600      	movs	r6, #0
	__asm__ volatile(
   156a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   156a8:	f3ef 8211 	mrs	r2, BASEPRI
   156ac:	f383 8812 	msr	BASEPRI_MAX, r3
   156b0:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   156b4:	69e3      	ldr	r3, [r4, #28]
   156b6:	2b00      	cmp	r3, #0
   156b8:	d06d      	beq.n	15796 <bt_conn_set_state+0x116>
			conn->pending_no_cb--;
   156ba:	3b01      	subs	r3, #1
   156bc:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   156be:	f382 8811 	msr	BASEPRI, r2
   156c2:	f3bf 8f6f 	isb	sy
   156c6:	4628      	mov	r0, r5
   156c8:	f005 fcf6 	bl	1b0b8 <z_impl_k_sem_give>
}
   156cc:	e7ea      	b.n	156a4 <bt_conn_set_state+0x24>
	switch (conn->state) {
   156ce:	2b07      	cmp	r3, #7
   156d0:	d009      	beq.n	156e6 <bt_conn_set_state+0x66>
   156d2:	2b00      	cmp	r3, #0
   156d4:	d17e      	bne.n	157d4 <bt_conn_set_state+0x154>
		if (conn->type == BT_CONN_TYPE_SCO) {
   156d6:	78a3      	ldrb	r3, [r4, #2]
   156d8:	2b04      	cmp	r3, #4
   156da:	d11e      	bne.n	1571a <bt_conn_set_state+0x9a>
			bt_conn_unref(conn);
   156dc:	4620      	mov	r0, r4
}
   156de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   156e2:	f00b bc48 	b.w	20f76 <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
   156e6:	78a3      	ldrb	r3, [r4, #2]
   156e8:	2b04      	cmp	r3, #4
   156ea:	d073      	beq.n	157d4 <bt_conn_set_state+0x154>
	z_impl_k_queue_init(queue);
   156ec:	f104 0038 	add.w	r0, r4, #56	; 0x38
   156f0:	f00d fd95 	bl	2321e <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   156f4:	4839      	ldr	r0, [pc, #228]	; (157dc <bt_conn_set_state+0x15c>)
   156f6:	2100      	movs	r1, #0
   156f8:	f006 fc8e 	bl	1c018 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   156fc:	2300      	movs	r3, #0
	list->tail = NULL;
   156fe:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15702:	78e3      	ldrb	r3, [r4, #3]
   15704:	2b01      	cmp	r3, #1
   15706:	d165      	bne.n	157d4 <bt_conn_set_state+0x154>
			k_work_schedule(&conn->deferred_work,
   15708:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1570c:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   15710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   15714:	2300      	movs	r3, #0
   15716:	f005 bea3 	b.w	1b460 <k_work_schedule>
		switch (old_state) {
   1571a:	3d01      	subs	r5, #1
   1571c:	2d05      	cmp	r5, #5
   1571e:	d859      	bhi.n	157d4 <bt_conn_set_state+0x154>
   15720:	a301      	add	r3, pc, #4	; (adr r3, 15728 <bt_conn_set_state+0xa8>)
   15722:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   15726:	bf00      	nop
   15728:	00015741 	.word	0x00015741
   1572c:	00015789 	.word	0x00015789
   15730:	000156dd 	.word	0x000156dd
   15734:	000156dd 	.word	0x000156dd
   15738:	00015789 	.word	0x00015789
   1573c:	00015789 	.word	0x00015789
			tx_notify(conn);
   15740:	4620      	mov	r0, r4
   15742:	f00b fb63 	bl	20e0c <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   15746:	78a3      	ldrb	r3, [r4, #2]
   15748:	2b01      	cmp	r3, #1
   1574a:	d10a      	bne.n	15762 <bt_conn_set_state+0xe2>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   1574c:	f104 0558 	add.w	r5, r4, #88	; 0x58
   15750:	4628      	mov	r0, r5
   15752:	f00d fe88 	bl	23466 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   15756:	f010 0f0c 	tst.w	r0, #12
   1575a:	d002      	beq.n	15762 <bt_conn_set_state+0xe2>
				k_work_cancel_delayable(&conn->deferred_work);
   1575c:	4628      	mov	r0, r5
   1575e:	f00d fe84 	bl	2346a <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15762:	f3bf 8f5b 	dmb	ish
   15766:	3404      	adds	r4, #4
   15768:	e854 3f00 	ldrex	r3, [r4]
   1576c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15770:	e844 3200 	strex	r2, r3, [r4]
   15774:	2a00      	cmp	r2, #0
   15776:	d1f7      	bne.n	15768 <bt_conn_set_state+0xe8>
   15778:	f3bf 8f5b 	dmb	ish
   1577c:	4817      	ldr	r0, [pc, #92]	; (157dc <bt_conn_set_state+0x15c>)
}
   1577e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15782:	2100      	movs	r1, #0
   15784:	f006 bc48 	b.w	1c018 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   15788:	7a63      	ldrb	r3, [r4, #9]
   1578a:	2b00      	cmp	r3, #0
   1578c:	d0a6      	beq.n	156dc <bt_conn_set_state+0x5c>
				notify_connected(conn);
   1578e:	4620      	mov	r0, r4
   15790:	f7ff fe12 	bl	153b8 <notify_connected>
   15794:	e7a2      	b.n	156dc <bt_conn_set_state+0x5c>
	return list->head;
   15796:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   15798:	b128      	cbz	r0, 157a6 <bt_conn_set_state+0x126>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1579a:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   1579c:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   1579e:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   157a0:	4288      	cmp	r0, r1
	list->tail = node;
   157a2:	bf08      	it	eq
   157a4:	61a3      	streq	r3, [r4, #24]
   157a6:	f382 8811 	msr	BASEPRI, r2
   157aa:	f3bf 8f6f 	isb	sy
		if (!node) {
   157ae:	b188      	cbz	r0, 157d4 <bt_conn_set_state+0x154>
	__asm__ volatile(
   157b0:	f04f 0240 	mov.w	r2, #64	; 0x40
   157b4:	f3ef 8311 	mrs	r3, BASEPRI
   157b8:	f382 8812 	msr	BASEPRI_MAX, r2
   157bc:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   157c0:	68c2      	ldr	r2, [r0, #12]
   157c2:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   157c4:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   157c6:	f383 8811 	msr	BASEPRI, r3
   157ca:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   157ce:	f7ff fe11 	bl	153f4 <tx_free>
   157d2:	e778      	b.n	156c6 <bt_conn_set_state+0x46>
}
   157d4:	bd70      	pop	{r4, r5, r6, pc}
   157d6:	bf00      	nop
   157d8:	200003c8 	.word	0x200003c8
   157dc:	20000744 	.word	0x20000744

000157e0 <bt_conn_index>:
		index = conn - acl_conns;
   157e0:	4b03      	ldr	r3, [pc, #12]	; (157f0 <bt_conn_index+0x10>)
   157e2:	1ac0      	subs	r0, r0, r3
   157e4:	4b03      	ldr	r3, [pc, #12]	; (157f4 <bt_conn_index+0x14>)
   157e6:	1180      	asrs	r0, r0, #6
   157e8:	4358      	muls	r0, r3
}
   157ea:	b2c0      	uxtb	r0, r0
   157ec:	4770      	bx	lr
   157ee:	bf00      	nop
   157f0:	20001b98 	.word	0x20001b98
   157f4:	aaaaaaab 	.word	0xaaaaaaab

000157f8 <bt_conn_create_pdu_timeout>:
{
   157f8:	b538      	push	{r3, r4, r5, lr}
   157fa:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   157fc:	4906      	ldr	r1, [pc, #24]	; (15818 <bt_conn_create_pdu_timeout+0x20>)
   157fe:	2800      	cmp	r0, #0
   15800:	bf08      	it	eq
   15802:	4608      	moveq	r0, r1
   15804:	f00c fe33 	bl	2246e <net_buf_alloc_fixed>
	if (!buf) {
   15808:	4604      	mov	r4, r0
   1580a:	b118      	cbz	r0, 15814 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
   1580c:	1d29      	adds	r1, r5, #4
   1580e:	3008      	adds	r0, #8
   15810:	f00c fe4c 	bl	224ac <net_buf_simple_reserve>
}
   15814:	4620      	mov	r0, r4
   15816:	bd38      	pop	{r3, r4, r5, pc}
   15818:	20000bc8 	.word	0x20000bc8

0001581c <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   1581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1581e:	f3bf 8f5b 	dmb	ish
   15822:	6842      	ldr	r2, [r0, #4]
   15824:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   15828:	05d2      	lsls	r2, r2, #23
{
   1582a:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1582c:	f100 0304 	add.w	r3, r0, #4
   15830:	d519      	bpl.n	15866 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   15832:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   15836:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
   1583a:	4291      	cmp	r1, r2
   1583c:	d813      	bhi.n	15866 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   1583e:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
   15842:	4291      	cmp	r1, r2
   15844:	d30f      	bcc.n	15866 <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   15846:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
   1584a:	4291      	cmp	r1, r2
   1584c:	d10b      	bne.n	15866 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1584e:	f3bf 8f5b 	dmb	ish
   15852:	e853 2f00 	ldrex	r2, [r3]
   15856:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   1585a:	e843 2100 	strex	r1, r2, [r3]
   1585e:	2900      	cmp	r1, #0
   15860:	d1f7      	bne.n	15852 <notify_le_param_updated+0x36>
   15862:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   15866:	4b10      	ldr	r3, [pc, #64]	; (158a8 <notify_le_param_updated+0x8c>)
   15868:	681d      	ldr	r5, [r3, #0]
   1586a:	b925      	cbnz	r5, 15876 <notify_le_param_updated+0x5a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1586c:	4d0f      	ldr	r5, [pc, #60]	; (158ac <notify_le_param_updated+0x90>)
   1586e:	4f10      	ldr	r7, [pc, #64]	; (158b0 <notify_le_param_updated+0x94>)
   15870:	42bd      	cmp	r5, r7
   15872:	d30c      	bcc.n	1588e <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   15874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   15876:	68ee      	ldr	r6, [r5, #12]
   15878:	b13e      	cbz	r6, 1588a <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
   1587a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1587e:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   15882:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   15886:	4620      	mov	r0, r4
   15888:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1588a:	692d      	ldr	r5, [r5, #16]
   1588c:	e7ed      	b.n	1586a <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
   1588e:	68ee      	ldr	r6, [r5, #12]
   15890:	b13e      	cbz	r6, 158a2 <notify_le_param_updated+0x86>
			cb->le_param_updated(conn, conn->le.interval,
   15892:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   15896:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1589a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1589e:	4620      	mov	r0, r4
   158a0:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   158a2:	3514      	adds	r5, #20
   158a4:	e7e4      	b.n	15870 <notify_le_param_updated+0x54>
   158a6:	bf00      	nop
   158a8:	20002708 	.word	0x20002708
   158ac:	00023e78 	.word	0x00023e78
   158b0:	00023e78 	.word	0x00023e78

000158b4 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   158b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   158b8:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   158ba:	4608      	mov	r0, r1
{
   158bc:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   158be:	f00b f8ae 	bl	20a1e <bt_le_conn_params_valid>
   158c2:	4605      	mov	r5, r0
   158c4:	b918      	cbnz	r0, 158ce <le_param_req+0x1a>
		return false;
   158c6:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   158c8:	4628      	mov	r0, r5
   158ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   158ce:	4b13      	ldr	r3, [pc, #76]	; (1591c <le_param_req+0x68>)
   158d0:	681e      	ldr	r6, [r3, #0]
   158d2:	b946      	cbnz	r6, 158e6 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   158d4:	4e12      	ldr	r6, [pc, #72]	; (15920 <le_param_req+0x6c>)
   158d6:	f8df 804c 	ldr.w	r8, [pc, #76]	; 15924 <le_param_req+0x70>
   158da:	4546      	cmp	r6, r8
   158dc:	d2f4      	bcs.n	158c8 <le_param_req+0x14>
		if (!cb->le_param_req) {
   158de:	68b3      	ldr	r3, [r6, #8]
   158e0:	b983      	cbnz	r3, 15904 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   158e2:	3614      	adds	r6, #20
   158e4:	e7f9      	b.n	158da <le_param_req+0x26>
		if (!cb->le_param_req) {
   158e6:	68b3      	ldr	r3, [r6, #8]
   158e8:	b90b      	cbnz	r3, 158ee <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   158ea:	6936      	ldr	r6, [r6, #16]
   158ec:	e7f1      	b.n	158d2 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   158ee:	4621      	mov	r1, r4
   158f0:	4638      	mov	r0, r7
   158f2:	4798      	blx	r3
   158f4:	2800      	cmp	r0, #0
   158f6:	d0e6      	beq.n	158c6 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   158f8:	4620      	mov	r0, r4
   158fa:	f00b f890 	bl	20a1e <bt_le_conn_params_valid>
   158fe:	2800      	cmp	r0, #0
   15900:	d1f3      	bne.n	158ea <le_param_req+0x36>
   15902:	e7e0      	b.n	158c6 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   15904:	4621      	mov	r1, r4
   15906:	4638      	mov	r0, r7
   15908:	4798      	blx	r3
   1590a:	2800      	cmp	r0, #0
   1590c:	d0db      	beq.n	158c6 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1590e:	4620      	mov	r0, r4
   15910:	f00b f885 	bl	20a1e <bt_le_conn_params_valid>
   15914:	2800      	cmp	r0, #0
   15916:	d1e4      	bne.n	158e2 <le_param_req+0x2e>
   15918:	e7d5      	b.n	158c6 <le_param_req+0x12>
   1591a:	bf00      	nop
   1591c:	20002708 	.word	0x20002708
   15920:	00023e78 	.word	0x00023e78
   15924:	00023e78 	.word	0x00023e78

00015928 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   15928:	4b02      	ldr	r3, [pc, #8]	; (15934 <bt_conn_cb_register+0xc>)
   1592a:	681a      	ldr	r2, [r3, #0]
   1592c:	6102      	str	r2, [r0, #16]
	callback_list = cb;
   1592e:	6018      	str	r0, [r3, #0]
}
   15930:	4770      	bx	lr
   15932:	bf00      	nop
   15934:	20002708 	.word	0x20002708

00015938 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   15938:	b570      	push	{r4, r5, r6, lr}
   1593a:	4606      	mov	r6, r0
   1593c:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1593e:	4809      	ldr	r0, [pc, #36]	; (15964 <bt_conn_add_le+0x2c>)
   15940:	2101      	movs	r1, #1
   15942:	f7ff fded 	bl	15520 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   15946:	4604      	mov	r4, r0
   15948:	b150      	cbz	r0, 15960 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
   1594a:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   1594c:	2207      	movs	r2, #7
   1594e:	4629      	mov	r1, r5
   15950:	3088      	adds	r0, #136	; 0x88
   15952:	f00a fdfd 	bl	20550 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   15956:	2301      	movs	r3, #1
   15958:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1595a:	4b03      	ldr	r3, [pc, #12]	; (15968 <bt_conn_add_le+0x30>)
   1595c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   15960:	4620      	mov	r0, r4
   15962:	bd70      	pop	{r4, r5, r6, pc}
   15964:	20001b98 	.word	0x20001b98
   15968:	00280018 	.word	0x00280018

0001596c <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   1596c:	b570      	push	{r4, r5, r6, lr}
   1596e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15970:	480c      	ldr	r0, [pc, #48]	; (159a4 <bt_conn_lookup_addr_le+0x38>)
{
   15972:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15974:	f00b fae4 	bl	20f40 <bt_conn_ref>

		if (!conn) {
   15978:	4604      	mov	r4, r0
   1597a:	b128      	cbz	r0, 15988 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1597c:	7883      	ldrb	r3, [r0, #2]
   1597e:	2b01      	cmp	r3, #1
   15980:	d004      	beq.n	1598c <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   15982:	f00b faf8 	bl	20f76 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   15986:	2400      	movs	r4, #0
}
   15988:	4620      	mov	r0, r4
   1598a:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1598c:	4629      	mov	r1, r5
   1598e:	4632      	mov	r2, r6
   15990:	f00b fb38 	bl	21004 <bt_conn_is_peer_addr_le>
   15994:	4605      	mov	r5, r0
   15996:	2800      	cmp	r0, #0
   15998:	d1f6      	bne.n	15988 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   1599a:	4620      	mov	r0, r4
   1599c:	f00b faeb 	bl	20f76 <bt_conn_unref>
	return NULL;
   159a0:	462c      	mov	r4, r5
			continue;
   159a2:	e7f1      	b.n	15988 <bt_conn_lookup_addr_le+0x1c>
   159a4:	20001b98 	.word	0x20001b98

000159a8 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   159a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   159aa:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   159ac:	480e      	ldr	r0, [pc, #56]	; (159e8 <bt_conn_lookup_state_le+0x40>)
{
   159ae:	460e      	mov	r6, r1
   159b0:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   159b2:	f00b fac5 	bl	20f40 <bt_conn_ref>

		if (!conn) {
   159b6:	4604      	mov	r4, r0
   159b8:	b1a0      	cbz	r0, 159e4 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   159ba:	7883      	ldrb	r3, [r0, #2]
   159bc:	2b01      	cmp	r3, #1
   159be:	d003      	beq.n	159c8 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   159c0:	f00b fad9 	bl	20f76 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   159c4:	2400      	movs	r4, #0
			continue;
   159c6:	e00d      	b.n	159e4 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   159c8:	b136      	cbz	r6, 159d8 <bt_conn_lookup_state_le+0x30>
   159ca:	4632      	mov	r2, r6
   159cc:	4629      	mov	r1, r5
   159ce:	f00b fb19 	bl	21004 <bt_conn_is_peer_addr_le>
   159d2:	b908      	cbnz	r0, 159d8 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   159d4:	4620      	mov	r0, r4
   159d6:	e7f3      	b.n	159c0 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   159d8:	7aa3      	ldrb	r3, [r4, #10]
   159da:	42bb      	cmp	r3, r7
   159dc:	d1fa      	bne.n	159d4 <bt_conn_lookup_state_le+0x2c>
   159de:	7a23      	ldrb	r3, [r4, #8]
   159e0:	42ab      	cmp	r3, r5
   159e2:	d1f7      	bne.n	159d4 <bt_conn_lookup_state_le+0x2c>
}
   159e4:	4620      	mov	r0, r4
   159e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   159e8:	20001b98 	.word	0x20001b98

000159ec <send_conn_le_param_update>:
{
   159ec:	b538      	push	{r3, r4, r5, lr}
   159ee:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   159f0:	4608      	mov	r0, r1
{
   159f2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   159f4:	f00b f813 	bl	20a1e <bt_le_conn_params_valid>
   159f8:	b348      	cbz	r0, 15a4e <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   159fa:	4b16      	ldr	r3, [pc, #88]	; (15a54 <send_conn_le_param_update+0x68>)
   159fc:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   15a00:	0799      	lsls	r1, r3, #30
   15a02:	d407      	bmi.n	15a14 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   15a04:	78e3      	ldrb	r3, [r4, #3]
   15a06:	b183      	cbz	r3, 15a2a <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   15a08:	4629      	mov	r1, r5
   15a0a:	4620      	mov	r0, r4
}
   15a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   15a10:	f000 b9ac 	b.w	15d6c <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   15a14:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   15a18:	079a      	lsls	r2, r3, #30
   15a1a:	d5f3      	bpl.n	15a04 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15a1c:	f3bf 8f5b 	dmb	ish
   15a20:	6863      	ldr	r3, [r4, #4]
   15a22:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   15a26:	059b      	lsls	r3, r3, #22
   15a28:	d4ec      	bmi.n	15a04 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   15a2a:	4629      	mov	r1, r5
   15a2c:	4620      	mov	r0, r4
   15a2e:	f00b fb11 	bl	21054 <bt_conn_le_conn_update>
		if (rc == 0) {
   15a32:	b958      	cbnz	r0, 15a4c <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   15a34:	882b      	ldrh	r3, [r5, #0]
   15a36:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   15a3a:	886b      	ldrh	r3, [r5, #2]
   15a3c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   15a40:	88ab      	ldrh	r3, [r5, #4]
   15a42:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   15a46:	88eb      	ldrh	r3, [r5, #6]
   15a48:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   15a4c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   15a4e:	f06f 0015 	mvn.w	r0, #21
   15a52:	e7fb      	b.n	15a4c <send_conn_le_param_update+0x60>
   15a54:	200002c8 	.word	0x200002c8

00015a58 <deferred_work>:
{
   15a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   15a5a:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   15a5e:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   15a60:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   15a64:	b9fb      	cbnz	r3, 15aa6 <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
   15a66:	4628      	mov	r0, r5
   15a68:	f00b fb94 	bl	21194 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   15a6c:	4b2c      	ldr	r3, [pc, #176]	; (15b20 <deferred_work+0xc8>)
   15a6e:	681e      	ldr	r6, [r3, #0]
   15a70:	b94e      	cbnz	r6, 15a86 <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15a72:	4e2c      	ldr	r6, [pc, #176]	; (15b24 <deferred_work+0xcc>)
   15a74:	4f2c      	ldr	r7, [pc, #176]	; (15b28 <deferred_work+0xd0>)
   15a76:	42be      	cmp	r6, r7
   15a78:	d30d      	bcc.n	15a96 <deferred_work+0x3e>
		bt_conn_unref(conn);
   15a7a:	4628      	mov	r0, r5
}
   15a7c:	b003      	add	sp, #12
   15a7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   15a82:	f00b ba78 	b.w	20f76 <bt_conn_unref>
		if (cb->disconnected) {
   15a86:	6873      	ldr	r3, [r6, #4]
   15a88:	b11b      	cbz	r3, 15a92 <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
   15a8a:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   15a8e:	4628      	mov	r0, r5
   15a90:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15a92:	6936      	ldr	r6, [r6, #16]
   15a94:	e7ec      	b.n	15a70 <deferred_work+0x18>
		if (cb->disconnected) {
   15a96:	6873      	ldr	r3, [r6, #4]
   15a98:	b11b      	cbz	r3, 15aa2 <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
   15a9a:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   15a9e:	4628      	mov	r0, r5
   15aa0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15aa2:	3614      	adds	r6, #20
   15aa4:	e7e7      	b.n	15a76 <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   15aa6:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   15aaa:	2b01      	cmp	r3, #1
   15aac:	d12f      	bne.n	15b0e <deferred_work+0xb6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15aae:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   15ab2:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
   15ab6:	e856 3f00 	ldrex	r3, [r6]
   15aba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
   15abe:	e846 2100 	strex	r1, r2, [r6]
   15ac2:	2900      	cmp	r1, #0
   15ac4:	d1f7      	bne.n	15ab6 <deferred_work+0x5e>
   15ac6:	f3bf 8f5b 	dmb	ish
   15aca:	05db      	lsls	r3, r3, #23
   15acc:	d521      	bpl.n	15b12 <deferred_work+0xba>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   15ace:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   15ad2:	f8ad 3000 	strh.w	r3, [sp]
   15ad6:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   15ada:	f8ad 3002 	strh.w	r3, [sp, #2]
   15ade:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   15ae2:	f8ad 3004 	strh.w	r3, [sp, #4]
   15ae6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   15aea:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   15aee:	4669      	mov	r1, sp
   15af0:	4628      	mov	r0, r5
   15af2:	f7ff ff7b 	bl	159ec <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15af6:	f3bf 8f5b 	dmb	ish
   15afa:	e856 3f00 	ldrex	r3, [r6]
   15afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   15b02:	e846 3200 	strex	r2, r3, [r6]
   15b06:	2a00      	cmp	r2, #0
   15b08:	d1f7      	bne.n	15afa <deferred_work+0xa2>
   15b0a:	f3bf 8f5b 	dmb	ish
}
   15b0e:	b003      	add	sp, #12
   15b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   15b12:	4a06      	ldr	r2, [pc, #24]	; (15b2c <deferred_work+0xd4>)
   15b14:	6810      	ldr	r0, [r2, #0]
   15b16:	6851      	ldr	r1, [r2, #4]
   15b18:	466b      	mov	r3, sp
   15b1a:	c303      	stmia	r3!, {r0, r1}
   15b1c:	e7e7      	b.n	15aee <deferred_work+0x96>
   15b1e:	bf00      	nop
   15b20:	20002708 	.word	0x20002708
   15b24:	00023e78 	.word	0x00023e78
   15b28:	00023e78 	.word	0x00023e78
   15b2c:	00023f74 	.word	0x00023f74

00015b30 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   15b30:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   15b32:	4801      	ldr	r0, [pc, #4]	; (15b38 <bt_conn_create_frag_timeout+0x8>)
   15b34:	f7ff be60 	b.w	157f8 <bt_conn_create_pdu_timeout>
   15b38:	20000c20 	.word	0x20000c20

00015b3c <create_frag>:
{
   15b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15b40:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   15b42:	f04f 33ff 	mov.w	r3, #4294967295
   15b46:	f04f 32ff 	mov.w	r2, #4294967295
   15b4a:	2000      	movs	r0, #0
{
   15b4c:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   15b4e:	f7ff ffef 	bl	15b30 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   15b52:	7ab3      	ldrb	r3, [r6, #10]
   15b54:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   15b56:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   15b58:	f04f 0600 	mov.w	r6, #0
   15b5c:	d005      	beq.n	15b6a <create_frag+0x2e>
		net_buf_unref(frag);
   15b5e:	f001 fc03 	bl	17368 <net_buf_unref>
		return NULL;
   15b62:	4635      	mov	r5, r6
}
   15b64:	4628      	mov	r0, r5
   15b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   15b6a:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   15b6c:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   15b70:	4e0c      	ldr	r6, [pc, #48]	; (15ba4 <create_frag+0x68>)
   15b72:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   15b74:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   15b78:	f00c fd53 	bl	22622 <net_buf_simple_tailroom>
   15b7c:	4580      	cmp	r8, r0
   15b7e:	d20c      	bcs.n	15b9a <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   15b80:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15b84:	f854 1f08 	ldr.w	r1, [r4, #8]!
   15b88:	4632      	mov	r2, r6
   15b8a:	4638      	mov	r0, r7
   15b8c:	f00c fd14 	bl	225b8 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   15b90:	4631      	mov	r1, r6
   15b92:	4620      	mov	r0, r4
   15b94:	f00c fd29 	bl	225ea <net_buf_simple_pull>
   15b98:	e7e4      	b.n	15b64 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   15b9a:	4638      	mov	r0, r7
   15b9c:	f00c fd41 	bl	22622 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   15ba0:	b286      	uxth	r6, r0
   15ba2:	e7ef      	b.n	15b84 <create_frag+0x48>
   15ba4:	200002c8 	.word	0x200002c8

00015ba8 <bt_conn_process_tx>:
{
   15ba8:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   15baa:	7a83      	ldrb	r3, [r0, #10]
{
   15bac:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   15bae:	b993      	cbnz	r3, 15bd6 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15bb0:	f3bf 8f5b 	dmb	ish
   15bb4:	1d03      	adds	r3, r0, #4
   15bb6:	e853 2f00 	ldrex	r2, [r3]
   15bba:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   15bbe:	e843 1500 	strex	r5, r1, [r3]
   15bc2:	2d00      	cmp	r5, #0
   15bc4:	d1f7      	bne.n	15bb6 <bt_conn_process_tx+0xe>
   15bc6:	f3bf 8f5b 	dmb	ish
   15bca:	0653      	lsls	r3, r2, #25
   15bcc:	d503      	bpl.n	15bd6 <bt_conn_process_tx+0x2e>
}
   15bce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   15bd2:	f00b b94a 	b.w	20e6a <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   15bd6:	2200      	movs	r2, #0
   15bd8:	2300      	movs	r3, #0
   15bda:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15bde:	f00c fc4b 	bl	22478 <net_buf_get>
	BT_ASSERT(buf);
   15be2:	4605      	mov	r5, r0
   15be4:	b960      	cbnz	r0, 15c00 <bt_conn_process_tx+0x58>
   15be6:	4a1f      	ldr	r2, [pc, #124]	; (15c64 <bt_conn_process_tx+0xbc>)
   15be8:	491f      	ldr	r1, [pc, #124]	; (15c68 <bt_conn_process_tx+0xc0>)
   15bea:	4820      	ldr	r0, [pc, #128]	; (15c6c <bt_conn_process_tx+0xc4>)
   15bec:	f44f 733a 	mov.w	r3, #744	; 0x2e8
   15bf0:	f00a f9e3 	bl	1ffba <assert_print>
   15bf4:	4040      	eors	r0, r0
   15bf6:	f380 8811 	msr	BASEPRI, r0
   15bfa:	f04f 0003 	mov.w	r0, #3
   15bfe:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   15c00:	4e1b      	ldr	r6, [pc, #108]	; (15c70 <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
   15c02:	89aa      	ldrh	r2, [r5, #12]
   15c04:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   15c08:	429a      	cmp	r2, r3
   15c0a:	d807      	bhi.n	15c1c <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   15c0c:	2300      	movs	r3, #0
   15c0e:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   15c10:	4629      	mov	r1, r5
   15c12:	4620      	mov	r0, r4
   15c14:	f7ff fbf8 	bl	15408 <send_frag>
	if (!send_buf(conn, buf)) {
   15c18:	b130      	cbz	r0, 15c28 <bt_conn_process_tx+0x80>
}
   15c1a:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   15c1c:	4629      	mov	r1, r5
   15c1e:	4620      	mov	r0, r4
   15c20:	f7ff ff8c 	bl	15b3c <create_frag>
	if (!frag) {
   15c24:	4601      	mov	r1, r0
   15c26:	b920      	cbnz	r0, 15c32 <bt_conn_process_tx+0x8a>
		net_buf_unref(buf);
   15c28:	4628      	mov	r0, r5
}
   15c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   15c2e:	f001 bb9b 	b.w	17368 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   15c32:	2301      	movs	r3, #1
   15c34:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   15c36:	4620      	mov	r0, r4
   15c38:	f7ff fbe6 	bl	15408 <send_frag>
   15c3c:	2800      	cmp	r0, #0
   15c3e:	d0f3      	beq.n	15c28 <bt_conn_process_tx+0x80>
	while (buf->len > conn_mtu(conn)) {
   15c40:	89aa      	ldrh	r2, [r5, #12]
   15c42:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   15c46:	429a      	cmp	r2, r3
   15c48:	d802      	bhi.n	15c50 <bt_conn_process_tx+0xa8>
	return send_frag(conn, buf, FRAG_END, false);
   15c4a:	2300      	movs	r3, #0
   15c4c:	2203      	movs	r2, #3
   15c4e:	e7df      	b.n	15c10 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   15c50:	4629      	mov	r1, r5
   15c52:	4620      	mov	r0, r4
   15c54:	f7ff ff72 	bl	15b3c <create_frag>
		if (!frag) {
   15c58:	4601      	mov	r1, r0
   15c5a:	2800      	cmp	r0, #0
   15c5c:	d0e4      	beq.n	15c28 <bt_conn_process_tx+0x80>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   15c5e:	2301      	movs	r3, #1
   15c60:	461a      	mov	r2, r3
   15c62:	e7e8      	b.n	15c36 <bt_conn_process_tx+0x8e>
   15c64:	000252ba 	.word	0x000252ba
   15c68:	00025287 	.word	0x00025287
   15c6c:	00025213 	.word	0x00025213
   15c70:	200002c8 	.word	0x200002c8

00015c74 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   15c74:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   15c76:	490b      	ldr	r1, [pc, #44]	; (15ca4 <bt_conn_init+0x30>)
   15c78:	480b      	ldr	r0, [pc, #44]	; (15ca8 <bt_conn_init+0x34>)
   15c7a:	f00d fadc 	bl	23236 <k_queue_append>
   15c7e:	490b      	ldr	r1, [pc, #44]	; (15cac <bt_conn_init+0x38>)
   15c80:	4809      	ldr	r0, [pc, #36]	; (15ca8 <bt_conn_init+0x34>)
   15c82:	f00d fad8 	bl	23236 <k_queue_append>
   15c86:	490a      	ldr	r1, [pc, #40]	; (15cb0 <bt_conn_init+0x3c>)
   15c88:	4807      	ldr	r0, [pc, #28]	; (15ca8 <bt_conn_init+0x34>)
   15c8a:	f00d fad4 	bl	23236 <k_queue_append>
	}

	bt_att_init();
   15c8e:	f00b ff70 	bl	21b72 <bt_att_init>

	err = bt_smp_init();
   15c92:	f00c fbe9 	bl	22468 <bt_smp_init>
	if (err) {
   15c96:	4604      	mov	r4, r0
   15c98:	b908      	cbnz	r0, 15c9e <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   15c9a:	f00b fafe 	bl	2129a <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   15c9e:	4620      	mov	r0, r4
   15ca0:	bd10      	pop	{r4, pc}
   15ca2:	bf00      	nop
   15ca4:	2000270c 	.word	0x2000270c
   15ca8:	20000bb0 	.word	0x20000bb0
   15cac:	2000271c 	.word	0x2000271c
   15cb0:	2000272c 	.word	0x2000272c

00015cb4 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   15cb4:	4b04      	ldr	r3, [pc, #16]	; (15cc8 <l2cap_accept+0x14>)
   15cb6:	6818      	ldr	r0, [r3, #0]
   15cb8:	b918      	cbnz	r0, 15cc2 <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   15cba:	4a04      	ldr	r2, [pc, #16]	; (15ccc <l2cap_accept+0x18>)
   15cbc:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   15cbe:	600b      	str	r3, [r1, #0]

		return 0;
   15cc0:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   15cc2:	f06f 000b 	mvn.w	r0, #11
}
   15cc6:	4770      	bx	lr
   15cc8:	2000273c 	.word	0x2000273c
   15ccc:	000245bc 	.word	0x000245bc

00015cd0 <bt_l2cap_connected>:
{
   15cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15cd2:	4d24      	ldr	r5, [pc, #144]	; (15d64 <bt_l2cap_connected+0x94>)
   15cd4:	4f24      	ldr	r7, [pc, #144]	; (15d68 <bt_l2cap_connected+0x98>)
{
   15cd6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15cd8:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15cda:	42bd      	cmp	r5, r7
   15cdc:	d301      	bcc.n	15ce2 <bt_l2cap_connected+0x12>
}
   15cde:	b003      	add	sp, #12
   15ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   15ce2:	686b      	ldr	r3, [r5, #4]
   15ce4:	a901      	add	r1, sp, #4
   15ce6:	4620      	mov	r0, r4
   15ce8:	4798      	blx	r3
   15cea:	2800      	cmp	r0, #0
   15cec:	db34      	blt.n	15d58 <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   15cee:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   15cf0:	882a      	ldrh	r2, [r5, #0]
   15cf2:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   15cf4:	849a      	strh	r2, [r3, #36]	; 0x24
   15cf6:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   15cfa:	68a8      	ldr	r0, [r5, #8]
   15cfc:	f3bf 8f5b 	dmb	ish
   15d00:	e852 1f00 	ldrex	r1, [r2]
   15d04:	e842 6c00 	strex	ip, r6, [r2]
   15d08:	f1bc 0f00 	cmp.w	ip, #0
   15d0c:	d1f8      	bne.n	15d00 <bt_l2cap_connected+0x30>
   15d0e:	f3bf 8f5b 	dmb	ish
	return list->tail;
   15d12:	6d61      	ldr	r1, [r4, #84]	; 0x54
	parent->next = child;
   15d14:	609e      	str	r6, [r3, #8]
	sys_slist_append(&conn->channels, &chan->node);
   15d16:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   15d1a:	b9f9      	cbnz	r1, 15d5c <bt_l2cap_connected+0x8c>
	list->head = node;
   15d1c:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->destroy = destroy;
   15d20:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   15d22:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   15d24:	601c      	str	r4, [r3, #0]
		if (chan->ops->connected) {
   15d26:	6843      	ldr	r3, [r0, #4]
   15d28:	681b      	ldr	r3, [r3, #0]
   15d2a:	b103      	cbz	r3, 15d2e <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
   15d2c:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15d2e:	9b01      	ldr	r3, [sp, #4]
   15d30:	f3bf 8f5b 	dmb	ish
   15d34:	3310      	adds	r3, #16
   15d36:	e853 2f00 	ldrex	r2, [r3]
   15d3a:	f042 0201 	orr.w	r2, r2, #1
   15d3e:	e843 2100 	strex	r1, r2, [r3]
   15d42:	2900      	cmp	r1, #0
   15d44:	d1f7      	bne.n	15d36 <bt_l2cap_connected+0x66>
   15d46:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   15d4a:	9801      	ldr	r0, [sp, #4]
   15d4c:	6843      	ldr	r3, [r0, #4]
   15d4e:	699b      	ldr	r3, [r3, #24]
   15d50:	b113      	cbz	r3, 15d58 <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
   15d52:	f100 0110 	add.w	r1, r0, #16
   15d56:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15d58:	350c      	adds	r5, #12
   15d5a:	e7be      	b.n	15cda <bt_l2cap_connected+0xa>
	parent->next = child;
   15d5c:	600a      	str	r2, [r1, #0]
	list->tail = node;
   15d5e:	6562      	str	r2, [r4, #84]	; 0x54
}
   15d60:	e7de      	b.n	15d20 <bt_l2cap_connected+0x50>
   15d62:	bf00      	nop
   15d64:	00023e54 	.word	0x00023e54
   15d68:	00023e78 	.word	0x00023e78

00015d6c <bt_l2cap_update_conn_param>:
{
   15d6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15d6e:	460d      	mov	r5, r1
	ident++;
   15d70:	4916      	ldr	r1, [pc, #88]	; (15dcc <bt_l2cap_update_conn_param+0x60>)
   15d72:	780b      	ldrb	r3, [r1, #0]
   15d74:	3301      	adds	r3, #1
	if (!ident) {
   15d76:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   15d7a:	bf08      	it	eq
   15d7c:	2301      	moveq	r3, #1
   15d7e:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   15d80:	7809      	ldrb	r1, [r1, #0]
{
   15d82:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   15d84:	2208      	movs	r2, #8
   15d86:	2012      	movs	r0, #18
   15d88:	f00b f9d8 	bl	2113c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   15d8c:	4604      	mov	r4, r0
   15d8e:	b1d0      	cbz	r0, 15dc6 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   15d90:	2108      	movs	r1, #8
   15d92:	4408      	add	r0, r1
   15d94:	f00c fc0a 	bl	225ac <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   15d98:	882b      	ldrh	r3, [r5, #0]
   15d9a:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   15d9c:	886b      	ldrh	r3, [r5, #2]
   15d9e:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   15da0:	88ab      	ldrh	r3, [r5, #4]
   15da2:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   15da4:	88eb      	ldrh	r3, [r5, #6]
   15da6:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   15da8:	2300      	movs	r3, #0
   15daa:	9300      	str	r3, [sp, #0]
   15dac:	4622      	mov	r2, r4
   15dae:	2105      	movs	r1, #5
   15db0:	4630      	mov	r0, r6
   15db2:	f00b fa03 	bl	211bc <bt_l2cap_send_cb>
	if (err) {
   15db6:	4605      	mov	r5, r0
   15db8:	b110      	cbz	r0, 15dc0 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   15dba:	4620      	mov	r0, r4
   15dbc:	f001 fad4 	bl	17368 <net_buf_unref>
}
   15dc0:	4628      	mov	r0, r5
   15dc2:	b002      	add	sp, #8
   15dc4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   15dc6:	f06f 050b 	mvn.w	r5, #11
   15dca:	e7f9      	b.n	15dc0 <bt_l2cap_update_conn_param+0x54>
   15dcc:	200035bc 	.word	0x200035bc

00015dd0 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   15dd0:	4b02      	ldr	r3, [pc, #8]	; (15ddc <att_cfm_sent+0xc>)
   15dd2:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc

	att_sent(conn, user_data);
   15dd6:	f00b ba73 	b.w	212c0 <att_sent>
   15dda:	bf00      	nop
   15ddc:	00021811 	.word	0x00021811

00015de0 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   15de0:	4b02      	ldr	r3, [pc, #8]	; (15dec <att_rsp_sent+0xc>)
   15de2:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc

	att_sent(conn, user_data);
   15de6:	f00b ba6b 	b.w	212c0 <att_sent>
   15dea:	bf00      	nop
   15dec:	00021971 	.word	0x00021971

00015df0 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   15df0:	4b02      	ldr	r3, [pc, #8]	; (15dfc <att_req_sent+0xc>)
   15df2:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc

	att_sent(conn, user_data);
   15df6:	f00b ba63 	b.w	212c0 <att_sent>
   15dfa:	bf00      	nop
   15dfc:	000215e9 	.word	0x000215e9

00015e00 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   15e00:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   15e02:	3804      	subs	r0, #4
   15e04:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   15e06:	a901      	add	r1, sp, #4
   15e08:	4802      	ldr	r0, [pc, #8]	; (15e14 <bt_att_released+0x14>)
   15e0a:	f00d f94e 	bl	230aa <k_mem_slab_free>
}
   15e0e:	b003      	add	sp, #12
   15e10:	f85d fb04 	ldr.w	pc, [sp], #4
   15e14:	20000b14 	.word	0x20000b14

00015e18 <read_group_cb>:
{
   15e18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   15e1c:	4605      	mov	r5, r0
   15e1e:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15e20:	f04f 0800 	mov.w	r8, #0
   15e24:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15e28:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   15e2a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15e2c:	f88d 8008 	strb.w	r8, [sp, #8]
   15e30:	a902      	add	r1, sp, #8
{
   15e32:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15e34:	f8ad 300a 	strh.w	r3, [sp, #10]
   15e38:	f00a fbb3 	bl	205a2 <bt_uuid_cmp>
   15e3c:	b1a0      	cbz	r0, 15e68 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15e3e:	f642 0301 	movw	r3, #10241	; 0x2801
   15e42:	6828      	ldr	r0, [r5, #0]
   15e44:	f88d 800c 	strb.w	r8, [sp, #12]
   15e48:	a903      	add	r1, sp, #12
   15e4a:	f8ad 300e 	strh.w	r3, [sp, #14]
   15e4e:	f00a fba8 	bl	205a2 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15e52:	b148      	cbz	r0, 15e68 <read_group_cb+0x50>
		if (data->group &&
   15e54:	6923      	ldr	r3, [r4, #16]
   15e56:	b11b      	cbz	r3, 15e60 <read_group_cb+0x48>
   15e58:	885a      	ldrh	r2, [r3, #2]
   15e5a:	42b2      	cmp	r2, r6
   15e5c:	d200      	bcs.n	15e60 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   15e5e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   15e60:	2001      	movs	r0, #1
}
   15e62:	b004      	add	sp, #16
   15e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   15e68:	6861      	ldr	r1, [r4, #4]
   15e6a:	6828      	ldr	r0, [r5, #0]
   15e6c:	f00a fb99 	bl	205a2 <bt_uuid_cmp>
   15e70:	b110      	cbz	r0, 15e78 <read_group_cb+0x60>
		data->group = NULL;
   15e72:	2300      	movs	r3, #0
   15e74:	6123      	str	r3, [r4, #16]
   15e76:	e7f3      	b.n	15e60 <read_group_cb+0x48>
	if (data->rsp->len &&
   15e78:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   15e7a:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   15e7c:	781a      	ldrb	r2, [r3, #0]
   15e7e:	b132      	cbz	r2, 15e8e <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   15e80:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   15e82:	8981      	ldrh	r1, [r0, #12]
   15e84:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   15e86:	4293      	cmp	r3, r2
   15e88:	da01      	bge.n	15e8e <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   15e8a:	2000      	movs	r0, #0
   15e8c:	e7e9      	b.n	15e62 <read_group_cb+0x4a>
   15e8e:	2104      	movs	r1, #4
   15e90:	3008      	adds	r0, #8
   15e92:	f00c fb8b 	bl	225ac <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15e96:	4b09      	ldr	r3, [pc, #36]	; (15ebc <read_group_cb+0xa4>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   15e98:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15e9a:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   15e9c:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   15e9e:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15ea0:	4629      	mov	r1, r5
   15ea2:	9300      	str	r3, [sp, #0]
   15ea4:	9401      	str	r4, [sp, #4]
   15ea6:	2300      	movs	r3, #0
   15ea8:	4638      	mov	r0, r7
   15eaa:	f00b fbd9 	bl	21660 <att_chan_read>
	if (read < 0) {
   15eae:	2800      	cmp	r0, #0
   15eb0:	dbeb      	blt.n	15e8a <read_group_cb+0x72>
	if (!data->group) {
   15eb2:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   15eb4:	3800      	subs	r0, #0
   15eb6:	bf18      	it	ne
   15eb8:	2001      	movne	r0, #1
   15eba:	e7d2      	b.n	15e62 <read_group_cb+0x4a>
   15ebc:	000215ad 	.word	0x000215ad

00015ec0 <chan_send>:
{
   15ec0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	hdr = (void *)buf->data;
   15ec4:	688b      	ldr	r3, [r1, #8]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15ec6:	f3bf 8f5b 	dmb	ish
{
   15eca:	4617      	mov	r7, r2
   15ecc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
   15ed0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   15ed4:	0752      	lsls	r2, r2, #29
{
   15ed6:	4606      	mov	r6, r0
   15ed8:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   15eda:	d546      	bpl.n	15f6a <chan_send+0xaa>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   15edc:	781b      	ldrb	r3, [r3, #0]
   15ede:	2bd2      	cmp	r3, #210	; 0xd2
   15ee0:	d10c      	bne.n	15efc <chan_send+0x3c>
		err = bt_smp_sign(chan->att->conn, buf);
   15ee2:	6803      	ldr	r3, [r0, #0]
   15ee4:	6818      	ldr	r0, [r3, #0]
   15ee6:	f00c fabc 	bl	22462 <bt_smp_sign>
		if (err) {
   15eea:	4605      	mov	r5, r0
   15eec:	b130      	cbz	r0, 15efc <chan_send+0x3c>
			net_buf_unref(buf);
   15eee:	4620      	mov	r0, r4
   15ef0:	f001 fa3a 	bl	17368 <net_buf_unref>
}
   15ef4:	4628      	mov	r0, r5
   15ef6:	b003      	add	sp, #12
   15ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   15efc:	f104 0008 	add.w	r0, r4, #8
   15f00:	f00c fb8b 	bl	2261a <net_buf_simple_headroom>
	state->len = buf->len;
   15f04:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   15f08:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   15f0a:	b957      	cbnz	r7, 15f22 <chan_send+0x62>
	switch (att_op_get_type(buf->data[0])) {
   15f0c:	68a3      	ldr	r3, [r4, #8]
   15f0e:	7818      	ldrb	r0, [r3, #0]
   15f10:	f00b f9ee 	bl	212f0 <att_op_get_type>
   15f14:	3801      	subs	r0, #1
   15f16:	b2c0      	uxtb	r0, r0
   15f18:	2804      	cmp	r0, #4
   15f1a:	bf9c      	itt	ls
   15f1c:	4b14      	ldrls	r3, [pc, #80]	; (15f70 <chan_send+0xb0>)
   15f1e:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15f22:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   15f24:	f8c6 70e0 	str.w	r7, [r6, #224]	; 0xe0
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15f28:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   15f2a:	4b12      	ldr	r3, [pc, #72]	; (15f74 <chan_send+0xb4>)
   15f2c:	429f      	cmp	r7, r3
   15f2e:	d018      	beq.n	15f62 <chan_send+0xa2>
	} else if (cb == chan_cfm_sent) {
   15f30:	4b11      	ldr	r3, [pc, #68]	; (15f78 <chan_send+0xb8>)
   15f32:	429f      	cmp	r7, r3
   15f34:	d017      	beq.n	15f66 <chan_send+0xa6>
		return att_sent;
   15f36:	4911      	ldr	r1, [pc, #68]	; (15f7c <chan_send+0xbc>)
   15f38:	4b11      	ldr	r3, [pc, #68]	; (15f80 <chan_send+0xc0>)
   15f3a:	4a12      	ldr	r2, [pc, #72]	; (15f84 <chan_send+0xc4>)
   15f3c:	428f      	cmp	r7, r1
   15f3e:	bf18      	it	ne
   15f40:	4613      	movne	r3, r2
			       &chan->chan.chan);
   15f42:	3604      	adds	r6, #4
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15f44:	9600      	str	r6, [sp, #0]
   15f46:	4622      	mov	r2, r4
   15f48:	2104      	movs	r1, #4
   15f4a:	f00b f937 	bl	211bc <bt_l2cap_send_cb>
	if (err) {
   15f4e:	4605      	mov	r5, r0
   15f50:	2800      	cmp	r0, #0
   15f52:	d0cf      	beq.n	15ef4 <chan_send+0x34>
	buf->data = buf->__buf + state->offset;
   15f54:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   15f56:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   15f5a:	fa10 f088 	uxtah	r0, r0, r8
   15f5e:	60a0      	str	r0, [r4, #8]
}
   15f60:	e7c8      	b.n	15ef4 <chan_send+0x34>
		return att_rsp_sent;
   15f62:	4b09      	ldr	r3, [pc, #36]	; (15f88 <chan_send+0xc8>)
   15f64:	e7ed      	b.n	15f42 <chan_send+0x82>
		return att_cfm_sent;
   15f66:	4b09      	ldr	r3, [pc, #36]	; (15f8c <chan_send+0xcc>)
   15f68:	e7eb      	b.n	15f42 <chan_send+0x82>
		return -EINVAL;
   15f6a:	f06f 0515 	mvn.w	r5, #21
   15f6e:	e7c1      	b.n	15ef4 <chan_send+0x34>
   15f70:	000245e0 	.word	0x000245e0
   15f74:	00021971 	.word	0x00021971
   15f78:	00021811 	.word	0x00021811
   15f7c:	000215e9 	.word	0x000215e9
   15f80:	00015df1 	.word	0x00015df1
   15f84:	000212c1 	.word	0x000212c1
   15f88:	00015de1 	.word	0x00015de1
   15f8c:	00015dd1 	.word	0x00015dd1

00015f90 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   15f90:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   15f92:	4a07      	ldr	r2, [pc, #28]	; (15fb0 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   15f94:	4604      	mov	r4, r0
   15f96:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   15f98:	f7ff ff92 	bl	15ec0 <chan_send>
	if (err) {
   15f9c:	b130      	cbz	r0, 15fac <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   15f9e:	4629      	mov	r1, r5
   15fa0:	f104 0098 	add.w	r0, r4, #152	; 0x98
}
   15fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   15fa8:	f00c bacd 	b.w	22546 <net_buf_put>
}
   15fac:	bd38      	pop	{r3, r4, r5, pc}
   15fae:	bf00      	nop
   15fb0:	00021971 	.word	0x00021971

00015fb4 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   15fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   15fb6:	2300      	movs	r3, #0
{
   15fb8:	4607      	mov	r7, r0
   15fba:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   15fbc:	4829      	ldr	r0, [pc, #164]	; (16064 <bt_att_accept+0xb0>)
   15fbe:	2200      	movs	r2, #0
   15fc0:	4669      	mov	r1, sp
   15fc2:	f004 fe87 	bl	1acd4 <k_mem_slab_alloc>
   15fc6:	4605      	mov	r5, r0
   15fc8:	b110      	cbz	r0, 15fd0 <bt_att_accept+0x1c>
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   15fca:	f06f 050b 	mvn.w	r5, #11
   15fce:	e045      	b.n	1605c <bt_att_accept+0xa8>
	return z_impl_z_current_get();
   15fd0:	f005 fd72 	bl	1bab8 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   15fd4:	4b24      	ldr	r3, [pc, #144]	; (16068 <bt_att_accept+0xb4>)
	(void)memset(att, 0, sizeof(*att));
   15fd6:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   15fd8:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   15fda:	222c      	movs	r2, #44	; 0x2c
   15fdc:	9800      	ldr	r0, [sp, #0]
   15fde:	f00a fac2 	bl	20566 <memset>
	att->conn = conn;
   15fe2:	9c00      	ldr	r4, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   15fe4:	4821      	ldr	r0, [pc, #132]	; (1606c <bt_att_accept+0xb8>)
	list->tail = NULL;
   15fe6:	60a5      	str	r5, [r4, #8]
	list->head = NULL;
   15fe8:	e9c4 7500 	strd	r7, r5, [r4]
	list->tail = NULL;
   15fec:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
   15ff0:	2200      	movs	r2, #0
   15ff2:	2300      	movs	r3, #0
   15ff4:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   15ff6:	9501      	str	r5, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   15ff8:	f004 fe6c 	bl	1acd4 <k_mem_slab_alloc>
   15ffc:	4605      	mov	r5, r0
   15ffe:	2800      	cmp	r0, #0
   16000:	d1e3      	bne.n	15fca <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
   16002:	4601      	mov	r1, r0
   16004:	22e8      	movs	r2, #232	; 0xe8
   16006:	9801      	ldr	r0, [sp, #4]
   16008:	f00a faad 	bl	20566 <memset>
	chan->chan.chan.ops = &ops;
   1600c:	9801      	ldr	r0, [sp, #4]
   1600e:	4b18      	ldr	r3, [pc, #96]	; (16070 <bt_att_accept+0xbc>)
   16010:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   16012:	3098      	adds	r0, #152	; 0x98
   16014:	f00d f903 	bl	2321e <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16018:	9b01      	ldr	r3, [sp, #4]
   1601a:	f3bf 8f5b 	dmb	ish
   1601e:	3390      	adds	r3, #144	; 0x90
   16020:	e853 2f00 	ldrex	r2, [r3]
   16024:	e843 5100 	strex	r1, r5, [r3]
   16028:	2900      	cmp	r1, #0
   1602a:	d1f9      	bne.n	16020 <bt_att_accept+0x6c>
   1602c:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   16030:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
   16032:	6a63      	ldr	r3, [r4, #36]	; 0x24
	chan->att = att;
   16034:	603c      	str	r4, [r7, #0]
	if (sys_slist_is_empty(&att->chans)) {
   16036:	b91b      	cbnz	r3, 16040 <bt_att_accept+0x8c>
   16038:	f104 000c 	add.w	r0, r4, #12
   1603c:	f00d f8ef 	bl	2321e <z_impl_k_queue_init>
	parent->next = child;
   16040:	6a62      	ldr	r2, [r4, #36]	; 0x24
   16042:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
Z_GENLIST_PREPEND(slist, snode)
   16046:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   16048:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
	list->head = node;
   1604c:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   1604e:	b902      	cbnz	r2, 16052 <bt_att_accept+0x9e>
	list->tail = node;
   16050:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
   16052:	9b01      	ldr	r3, [sp, #4]
	if (!chan) {
   16054:	2b00      	cmp	r3, #0
   16056:	d0b8      	beq.n	15fca <bt_att_accept+0x16>
	}

	*ch = &chan->chan.chan;
   16058:	3304      	adds	r3, #4
   1605a:	6033      	str	r3, [r6, #0]

	return 0;
}
   1605c:	4628      	mov	r0, r5
   1605e:	b003      	add	sp, #12
   16060:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16062:	bf00      	nop
   16064:	20000af8 	.word	0x20000af8
   16068:	200027c8 	.word	0x200027c8
   1606c:	20000b14 	.word	0x20000b14
   16070:	20000754 	.word	0x20000754

00016074 <read_type_cb>:
{
   16074:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   16078:	f8d2 8000 	ldr.w	r8, [r2]
{
   1607c:	4606      	mov	r6, r0
   1607e:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16080:	6800      	ldr	r0, [r0, #0]
   16082:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   16084:	f8d8 5004 	ldr.w	r5, [r8, #4]
{
   16088:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1608a:	f00a fa8a 	bl	205a2 <bt_uuid_cmp>
   1608e:	4607      	mov	r7, r0
   16090:	2800      	cmp	r0, #0
   16092:	d13e      	bne.n	16112 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   16094:	4628      	mov	r0, r5
   16096:	2215      	movs	r2, #21
   16098:	4631      	mov	r1, r6
   1609a:	f00c f919 	bl	222d0 <bt_gatt_check_perm>
   1609e:	4605      	mov	r5, r0
   160a0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   160a2:	b148      	cbz	r0, 160b8 <read_type_cb+0x44>
		if (data->rsp->len) {
   160a4:	68e3      	ldr	r3, [r4, #12]
   160a6:	781b      	ldrb	r3, [r3, #0]
   160a8:	b923      	cbnz	r3, 160b4 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   160aa:	2500      	movs	r5, #0
}
   160ac:	4628      	mov	r0, r5
   160ae:	b003      	add	sp, #12
   160b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   160b4:	7527      	strb	r7, [r4, #20]
   160b6:	e7f8      	b.n	160aa <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   160b8:	68a0      	ldr	r0, [r4, #8]
   160ba:	f00c fa55 	bl	22568 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   160be:	2102      	movs	r1, #2
   160c0:	3008      	adds	r0, #8
   160c2:	f00c fa73 	bl	225ac <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   160c6:	4b14      	ldr	r3, [pc, #80]	; (16118 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   160c8:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   160ca:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   160cc:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   160d0:	4631      	mov	r1, r6
   160d2:	9300      	str	r3, [sp, #0]
   160d4:	9401      	str	r4, [sp, #4]
   160d6:	462b      	mov	r3, r5
   160d8:	4640      	mov	r0, r8
   160da:	f00b fac1 	bl	21660 <att_chan_read>
	if (read < 0) {
   160de:	2800      	cmp	r0, #0
   160e0:	da07      	bge.n	160f2 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   160e2:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   160e6:	bf26      	itte	cs
   160e8:	4240      	negcs	r0, r0
   160ea:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   160ec:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   160ee:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   160f0:	e7dc      	b.n	160ac <read_type_cb+0x38>
	if (!data->item) {
   160f2:	6923      	ldr	r3, [r4, #16]
   160f4:	2b00      	cmp	r3, #0
   160f6:	d0d8      	beq.n	160aa <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   160f8:	68a0      	ldr	r0, [r4, #8]
   160fa:	f00b f8d9 	bl	212b0 <net_buf_frags_len>
   160fe:	f8b8 502a 	ldrh.w	r5, [r8, #42]	; 0x2a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16102:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   16104:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16106:	7818      	ldrb	r0, [r3, #0]
   16108:	4285      	cmp	r5, r0
   1610a:	bf94      	ite	ls
   1610c:	2500      	movls	r5, #0
   1610e:	2501      	movhi	r5, #1
   16110:	e7cc      	b.n	160ac <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   16112:	2501      	movs	r5, #1
   16114:	e7ca      	b.n	160ac <read_type_cb+0x38>
   16116:	bf00      	nop
   16118:	000212cd 	.word	0x000212cd

0001611c <bt_att_connected>:
{
   1611c:	b510      	push	{r4, lr}
   1611e:	4604      	mov	r4, r0
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
   16120:	f104 038c 	add.w	r3, r4, #140	; 0x8c
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   16124:	3804      	subs	r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16126:	f3bf 8f5b 	dmb	ish
   1612a:	e853 2f00 	ldrex	r2, [r3]
   1612e:	f042 0204 	orr.w	r2, r2, #4
   16132:	e843 2100 	strex	r1, r2, [r3]
   16136:	2900      	cmp	r1, #0
   16138:	d1f7      	bne.n	1612a <bt_att_connected+0xe>
   1613a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1613e:	f3bf 8f5b 	dmb	ish
   16142:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   16146:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   1614a:	071b      	lsls	r3, r3, #28
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1614c:	bf5e      	ittt	pl
   1614e:	2317      	movpl	r3, #23
   16150:	84e3      	strhpl	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   16152:	82e3      	strhpl	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   16154:	f00b f9fa 	bl	2154c <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   16158:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   1615c:	4903      	ldr	r1, [pc, #12]	; (1616c <bt_att_connected+0x50>)
   1615e:	f00d f976 	bl	2344e <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   16162:	6820      	ldr	r0, [r4, #0]
}
   16164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   16168:	f000 bfe4 	b.w	17134 <bt_gatt_connected>
   1616c:	00021b81 	.word	0x00021b81

00016170 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   16170:	898b      	ldrh	r3, [r1, #12]
{
   16172:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16176:	4606      	mov	r6, r0
   16178:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1617a:	2b00      	cmp	r3, #0
   1617c:	d047      	beq.n	1620e <bt_att_recv+0x9e>
	return net_buf_simple_pull_mem(&buf->b, len);
   1617e:	2101      	movs	r1, #1
   16180:	f104 0008 	add.w	r0, r4, #8
   16184:	f00c fa39 	bl	225fa <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   16188:	f856 3c04 	ldr.w	r3, [r6, #-4]
   1618c:	4607      	mov	r7, r0
   1618e:	2b00      	cmp	r3, #0
   16190:	d03d      	beq.n	1620e <bt_att_recv+0x9e>
		if (hdr->code == handlers[i].op) {
   16192:	7801      	ldrb	r1, [r0, #0]
   16194:	4d22      	ldr	r5, [pc, #136]	; (16220 <bt_att_recv+0xb0>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   16196:	f1a6 0804 	sub.w	r8, r6, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1619a:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   1619c:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   161a0:	428a      	cmp	r2, r1
   161a2:	d10d      	bne.n	161c0 <bt_att_recv+0x50>
		if (handler->type == ATT_REQUEST &&
   161a4:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   161a8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   161ac:	f893 a002 	ldrb.w	sl, [r3, #2]
   161b0:	f1ba 0f01 	cmp.w	sl, #1
   161b4:	d014      	beq.n	161e0 <bt_att_recv+0x70>
		} else if (handler->type == ATT_INDICATION &&
   161b6:	f1ba 0f05 	cmp.w	sl, #5
   161ba:	d117      	bne.n	161ec <bt_att_recv+0x7c>
			   atomic_test_and_set_bit(att_chan->flags,
   161bc:	2101      	movs	r1, #1
   161be:	e010      	b.n	161e2 <bt_att_recv+0x72>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   161c0:	3301      	adds	r3, #1
   161c2:	2b0d      	cmp	r3, #13
   161c4:	d1ea      	bne.n	1619c <bt_att_recv+0x2c>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   161c6:	4608      	mov	r0, r1
   161c8:	f00b f892 	bl	212f0 <att_op_get_type>
   161cc:	b1f8      	cbz	r0, 1620e <bt_att_recv+0x9e>
   161ce:	2805      	cmp	r0, #5
   161d0:	d01d      	beq.n	1620e <bt_att_recv+0x9e>
	if (!req) {
   161d2:	b1e1      	cbz	r1, 1620e <bt_att_recv+0x9e>
   161d4:	2306      	movs	r3, #6
   161d6:	2200      	movs	r2, #0
   161d8:	4640      	mov	r0, r8
   161da:	f00b fc1e 	bl	21a1a <send_err_rsp.part.0>
   161de:	e016      	b.n	1620e <bt_att_recv+0x9e>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   161e0:	2100      	movs	r1, #0
   161e2:	f106 008c 	add.w	r0, r6, #140	; 0x8c
   161e6:	f00b fb23 	bl	21830 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   161ea:	b980      	cbnz	r0, 1620e <bt_att_recv+0x9e>
	if (buf->len < handler->expect_len) {
   161ec:	444d      	add	r5, r9
   161ee:	89a2      	ldrh	r2, [r4, #12]
   161f0:	786b      	ldrb	r3, [r5, #1]
   161f2:	429a      	cmp	r2, r3
   161f4:	d30e      	bcc.n	16214 <bt_att_recv+0xa4>
		err = handler->func(att_chan, buf);
   161f6:	686b      	ldr	r3, [r5, #4]
   161f8:	4621      	mov	r1, r4
   161fa:	4640      	mov	r0, r8
   161fc:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   161fe:	f1ba 0f01 	cmp.w	sl, #1
		err = handler->func(att_chan, buf);
   16202:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   16204:	d103      	bne.n	1620e <bt_att_recv+0x9e>
   16206:	b110      	cbz	r0, 1620e <bt_att_recv+0x9e>
		send_err_rsp(att_chan, hdr->code, 0, err);
   16208:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   1620a:	2900      	cmp	r1, #0
   1620c:	d1e3      	bne.n	161d6 <bt_att_recv+0x66>
}
   1620e:	2000      	movs	r0, #0
   16210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (handler->type == ATT_REQUEST && err) {
   16214:	f1ba 0f01 	cmp.w	sl, #1
   16218:	d1f9      	bne.n	1620e <bt_att_recv+0x9e>
		err = BT_ATT_ERR_INVALID_PDU;
   1621a:	2304      	movs	r3, #4
   1621c:	e7f4      	b.n	16208 <bt_att_recv+0x98>
   1621e:	bf00      	nop
   16220:	000245f4 	.word	0x000245f4

00016224 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16228:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1622a:	6803      	ldr	r3, [r0, #0]
   1622c:	460e      	mov	r6, r1
   1622e:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16230:	b087      	sub	sp, #28
   16232:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16234:	bf18      	it	ne
   16236:	2101      	movne	r1, #1
   16238:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1623a:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1623c:	f00c f89e 	bl	2237c <bt_gatt_change_aware>
   16240:	b958      	cbnz	r0, 1625a <att_write_rsp.constprop.0+0x36>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   16242:	2105      	movs	r1, #5
   16244:	f104 0090 	add.w	r0, r4, #144	; 0x90
   16248:	f00b faf2 	bl	21830 <atomic_test_and_set_bit>
   1624c:	2800      	cmp	r0, #0
   1624e:	d04a      	beq.n	162e6 <att_write_rsp.constprop.0+0xc2>
			return 0;
   16250:	2500      	movs	r5, #0
}
   16252:	4628      	mov	r0, r5
   16254:	b007      	add	sp, #28
   16256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!handle) {
   1625a:	2f00      	cmp	r7, #0
   1625c:	d045      	beq.n	162ea <att_write_rsp.constprop.0+0xc6>
	(void)memset(&data, 0, sizeof(data));
   1625e:	2218      	movs	r2, #24
   16260:	2100      	movs	r1, #0
   16262:	4668      	mov	r0, sp
   16264:	f00a f97f 	bl	20566 <memset>
	if (rsp) {
   16268:	f1b8 0f00 	cmp.w	r8, #0
   1626c:	d12a      	bne.n	162c4 <att_write_rsp.constprop.0+0xa0>
	data.conn = chan->att->conn;
   1626e:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16270:	4a1f      	ldr	r2, [pc, #124]	; (162f0 <att_write_rsp.constprop.0+0xcc>)
	data.conn = chan->att->conn;
   16272:	681b      	ldr	r3, [r3, #0]
   16274:	9300      	str	r3, [sp, #0]
	data.value = value;
   16276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16278:	9303      	str	r3, [sp, #12]
	data.len = len;
   1627a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   1627e:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16282:	2301      	movs	r3, #1
   16284:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
   16288:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1628c:	466b      	mov	r3, sp
   1628e:	4639      	mov	r1, r7
   16290:	4638      	mov	r0, r7
	data.req = req;
   16292:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   16296:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1629a:	f00b f86e 	bl	2137a <bt_gatt_foreach_attr>
	if (data.err) {
   1629e:	f89d 5014 	ldrb.w	r5, [sp, #20]
   162a2:	b1cd      	cbz	r5, 162d8 <att_write_rsp.constprop.0+0xb4>
		if (rsp) {
   162a4:	f1b8 0f00 	cmp.w	r8, #0
   162a8:	d0d2      	beq.n	16250 <att_write_rsp.constprop.0+0x2c>
			net_buf_unref(data.buf);
   162aa:	9801      	ldr	r0, [sp, #4]
   162ac:	f001 f85c 	bl	17368 <net_buf_unref>
	if (!req) {
   162b0:	2e00      	cmp	r6, #0
   162b2:	d0cd      	beq.n	16250 <att_write_rsp.constprop.0+0x2c>
   162b4:	f89d 3014 	ldrb.w	r3, [sp, #20]
   162b8:	463a      	mov	r2, r7
   162ba:	4631      	mov	r1, r6
   162bc:	4620      	mov	r0, r4
   162be:	f00b fbac 	bl	21a1a <send_err_rsp.part.0>
   162c2:	e7c5      	b.n	16250 <att_write_rsp.constprop.0+0x2c>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   162c4:	2200      	movs	r2, #0
   162c6:	4641      	mov	r1, r8
   162c8:	4620      	mov	r0, r4
   162ca:	f00b fb82 	bl	219d2 <bt_att_chan_create_pdu>
   162ce:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   162d0:	2800      	cmp	r0, #0
   162d2:	d1cc      	bne.n	1626e <att_write_rsp.constprop.0+0x4a>
			return BT_ATT_ERR_UNLIKELY;
   162d4:	250e      	movs	r5, #14
   162d6:	e7bc      	b.n	16252 <att_write_rsp.constprop.0+0x2e>
	if (data.buf) {
   162d8:	9901      	ldr	r1, [sp, #4]
   162da:	2900      	cmp	r1, #0
   162dc:	d0b8      	beq.n	16250 <att_write_rsp.constprop.0+0x2c>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   162de:	4620      	mov	r0, r4
   162e0:	f7ff fe56 	bl	15f90 <bt_att_chan_send_rsp.constprop.0>
   162e4:	e7b5      	b.n	16252 <att_write_rsp.constprop.0+0x2e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   162e6:	2512      	movs	r5, #18
   162e8:	e7b3      	b.n	16252 <att_write_rsp.constprop.0+0x2e>
		return BT_ATT_ERR_INVALID_HANDLE;
   162ea:	2501      	movs	r5, #1
   162ec:	e7b1      	b.n	16252 <att_write_rsp.constprop.0+0x2e>
   162ee:	bf00      	nop
   162f0:	000215fd 	.word	0x000215fd

000162f4 <att_read_group_req>:
{
   162f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   162f8:	898c      	ldrh	r4, [r1, #12]
   162fa:	3c04      	subs	r4, #4
   162fc:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   162fe:	2c02      	cmp	r4, #2
{
   16300:	4605      	mov	r5, r0
   16302:	b08c      	sub	sp, #48	; 0x30
   16304:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   16306:	d001      	beq.n	1630c <att_read_group_req+0x18>
   16308:	2c10      	cmp	r4, #16
   1630a:	d16e      	bne.n	163ea <att_read_group_req+0xf6>
   1630c:	2104      	movs	r1, #4
   1630e:	3008      	adds	r0, #8
   16310:	f00c f973 	bl	225fa <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16314:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   16318:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1631a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1631c:	1d01      	adds	r1, r0, #4
   1631e:	4622      	mov	r2, r4
   16320:	4640      	mov	r0, r8
   16322:	f00a f96c 	bl	205fe <bt_uuid_create>
   16326:	2800      	cmp	r0, #0
   16328:	d061      	beq.n	163ee <att_read_group_req+0xfa>
	if (!start || !end) {
   1632a:	2e00      	cmp	r6, #0
   1632c:	d03a      	beq.n	163a4 <att_read_group_req+0xb0>
   1632e:	2400      	movs	r4, #0
   16330:	2f00      	cmp	r7, #0
   16332:	d036      	beq.n	163a2 <att_read_group_req+0xae>
	if (start > end) {
   16334:	42be      	cmp	r6, r7
   16336:	d835      	bhi.n	163a4 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   16338:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1633c:	a901      	add	r1, sp, #4
   1633e:	4640      	mov	r0, r8
   16340:	f88d 4004 	strb.w	r4, [sp, #4]
   16344:	f8ad 3006 	strh.w	r3, [sp, #6]
   16348:	f00a f92b 	bl	205a2 <bt_uuid_cmp>
   1634c:	2800      	cmp	r0, #0
   1634e:	d134      	bne.n	163ba <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   16350:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   16352:	2214      	movs	r2, #20
   16354:	2100      	movs	r1, #0
   16356:	a807      	add	r0, sp, #28
   16358:	f00a f905 	bl	20566 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1635c:	2201      	movs	r2, #1
   1635e:	2111      	movs	r1, #17
   16360:	4620      	mov	r0, r4
   16362:	f00b fb9d 	bl	21aa0 <bt_att_create_pdu>
   16366:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   16368:	2800      	cmp	r0, #0
   1636a:	d040      	beq.n	163ee <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   1636c:	2101      	movs	r1, #1
   1636e:	3008      	adds	r0, #8
	data.uuid = uuid;
   16370:	e9cd 5807 	strd	r5, r8, [sp, #28]
   16374:	f00c f91a 	bl	225ac <net_buf_simple_add>
	data.rsp->len = 0U;
   16378:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1637c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1637e:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   16380:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   16384:	4a1b      	ldr	r2, [pc, #108]	; (163f4 <att_read_group_req+0x100>)
	data.group = NULL;
   16386:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1638a:	4639      	mov	r1, r7
   1638c:	4630      	mov	r0, r6
   1638e:	f00a fff4 	bl	2137a <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   16392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16394:	781c      	ldrb	r4, [r3, #0]
   16396:	bb1c      	cbnz	r4, 163e0 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   16398:	9809      	ldr	r0, [sp, #36]	; 0x24
   1639a:	f000 ffe5 	bl	17368 <net_buf_unref>
	if (!req) {
   1639e:	230a      	movs	r3, #10
   163a0:	e018      	b.n	163d4 <att_read_group_req+0xe0>
			*err = 0U;
   163a2:	463e      	mov	r6, r7
	if (!req) {
   163a4:	2301      	movs	r3, #1
   163a6:	4632      	mov	r2, r6
   163a8:	2110      	movs	r1, #16
   163aa:	4628      	mov	r0, r5
   163ac:	f00b fb35 	bl	21a1a <send_err_rsp.part.0>
		return 0;
   163b0:	2400      	movs	r4, #0
}
   163b2:	4620      	mov	r0, r4
   163b4:	b00c      	add	sp, #48	; 0x30
   163b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   163ba:	f642 0301 	movw	r3, #10241	; 0x2801
   163be:	a907      	add	r1, sp, #28
   163c0:	4640      	mov	r0, r8
   163c2:	f88d 401c 	strb.w	r4, [sp, #28]
   163c6:	f8ad 301e 	strh.w	r3, [sp, #30]
   163ca:	f00a f8ea 	bl	205a2 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   163ce:	2800      	cmp	r0, #0
   163d0:	d0be      	beq.n	16350 <att_read_group_req+0x5c>
	if (!req) {
   163d2:	2310      	movs	r3, #16
   163d4:	4632      	mov	r2, r6
   163d6:	2110      	movs	r1, #16
   163d8:	4628      	mov	r0, r5
   163da:	f00b fb1e 	bl	21a1a <send_err_rsp.part.0>
		return 0;
   163de:	e7e8      	b.n	163b2 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   163e0:	9909      	ldr	r1, [sp, #36]	; 0x24
   163e2:	4628      	mov	r0, r5
   163e4:	f7ff fdd4 	bl	15f90 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   163e8:	e7e2      	b.n	163b0 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   163ea:	2404      	movs	r4, #4
   163ec:	e7e1      	b.n	163b2 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   163ee:	240e      	movs	r4, #14
   163f0:	e7df      	b.n	163b2 <att_read_group_req+0xbe>
   163f2:	bf00      	nop
   163f4:	00015e19 	.word	0x00015e19

000163f8 <att_read_mult_req>:
{
   163f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   163fc:	6846      	ldr	r6, [r0, #4]
{
   163fe:	b085      	sub	sp, #20
   16400:	4604      	mov	r4, r0
   16402:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   16404:	4630      	mov	r0, r6
   16406:	2101      	movs	r1, #1
   16408:	f00b ffb8 	bl	2237c <bt_gatt_change_aware>
   1640c:	b958      	cbnz	r0, 16426 <att_read_mult_req+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1640e:	2105      	movs	r1, #5
   16410:	f104 0090 	add.w	r0, r4, #144	; 0x90
   16414:	f00b fa0c 	bl	21830 <atomic_test_and_set_bit>
			return 0;
   16418:	2800      	cmp	r0, #0
   1641a:	bf0c      	ite	eq
   1641c:	2012      	moveq	r0, #18
   1641e:	2000      	movne	r0, #0
}
   16420:	b005      	add	sp, #20
   16422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   16426:	2210      	movs	r2, #16
   16428:	2100      	movs	r1, #0
   1642a:	4668      	mov	r0, sp
   1642c:	f00a f89b 	bl	20566 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   16430:	2200      	movs	r2, #0
   16432:	210f      	movs	r1, #15
   16434:	4630      	mov	r0, r6
   16436:	f00b fb33 	bl	21aa0 <bt_att_create_pdu>
   1643a:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1643c:	b348      	cbz	r0, 16492 <att_read_mult_req+0x9a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1643e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 16498 <att_read_mult_req+0xa0>
	data.chan = chan;
   16442:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   16444:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   16448:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1644c:	89ab      	ldrh	r3, [r5, #12]
   1644e:	2b01      	cmp	r3, #1
   16450:	d804      	bhi.n	1645c <att_read_mult_req+0x64>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16452:	9902      	ldr	r1, [sp, #8]
   16454:	4620      	mov	r0, r4
   16456:	f7ff fd9b 	bl	15f90 <bt_att_chan_send_rsp.constprop.0>
   1645a:	e018      	b.n	1648e <att_read_mult_req+0x96>
   1645c:	4638      	mov	r0, r7
   1645e:	f00c f8d4 	bl	2260a <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16462:	466b      	mov	r3, sp
   16464:	464a      	mov	r2, r9
   16466:	4601      	mov	r1, r0
   16468:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1646a:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1646e:	f00a ff84 	bl	2137a <bt_gatt_foreach_attr>
		if (data.err) {
   16472:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16476:	2b00      	cmp	r3, #0
   16478:	d0e8      	beq.n	1644c <att_read_mult_req+0x54>
			net_buf_unref(data.buf);
   1647a:	9802      	ldr	r0, [sp, #8]
   1647c:	f000 ff74 	bl	17368 <net_buf_unref>
	if (!req) {
   16480:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16484:	4632      	mov	r2, r6
   16486:	210e      	movs	r1, #14
   16488:	4620      	mov	r0, r4
   1648a:	f00b fac6 	bl	21a1a <send_err_rsp.part.0>
	return 0;
   1648e:	2000      	movs	r0, #0
   16490:	e7c6      	b.n	16420 <att_read_mult_req+0x28>
		return BT_ATT_ERR_UNLIKELY;
   16492:	200e      	movs	r0, #14
   16494:	e7c4      	b.n	16420 <att_read_mult_req+0x28>
   16496:	bf00      	nop
   16498:	0002185b 	.word	0x0002185b

0001649c <att_read_rsp>:
{
   1649c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   164a0:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   164a4:	4604      	mov	r4, r0
   164a6:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   164a8:	4640      	mov	r0, r8
   164aa:	2101      	movs	r1, #1
{
   164ac:	4615      	mov	r5, r2
   164ae:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   164b0:	f00b ff64 	bl	2237c <bt_gatt_change_aware>
   164b4:	b960      	cbnz	r0, 164d0 <att_read_rsp+0x34>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   164b6:	2105      	movs	r1, #5
   164b8:	f104 0090 	add.w	r0, r4, #144	; 0x90
   164bc:	f00b f9b8 	bl	21830 <atomic_test_and_set_bit>
			return 0;
   164c0:	2800      	cmp	r0, #0
   164c2:	bf0c      	ite	eq
   164c4:	2512      	moveq	r5, #18
   164c6:	2500      	movne	r5, #0
}
   164c8:	4628      	mov	r0, r5
   164ca:	b004      	add	sp, #16
   164cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   164d0:	b36e      	cbz	r6, 1652e <att_read_rsp+0x92>
	(void)memset(&data, 0, sizeof(data));
   164d2:	2210      	movs	r2, #16
   164d4:	2100      	movs	r1, #0
   164d6:	4668      	mov	r0, sp
   164d8:	f00a f845 	bl	20566 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   164dc:	2200      	movs	r2, #0
   164de:	4629      	mov	r1, r5
   164e0:	4640      	mov	r0, r8
   164e2:	f00b fadd 	bl	21aa0 <bt_att_create_pdu>
   164e6:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   164e8:	b318      	cbz	r0, 16532 <att_read_rsp+0x96>
	data.offset = offset;
   164ea:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   164ee:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   164f2:	2301      	movs	r3, #1
   164f4:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   164f8:	4a0f      	ldr	r2, [pc, #60]	; (16538 <att_read_rsp+0x9c>)
	data.chan = chan;
   164fa:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   164fc:	466b      	mov	r3, sp
   164fe:	4631      	mov	r1, r6
   16500:	4630      	mov	r0, r6
   16502:	f00a ff3a 	bl	2137a <bt_gatt_foreach_attr>
	if (data.err) {
   16506:	f89d 500c 	ldrb.w	r5, [sp, #12]
   1650a:	b15d      	cbz	r5, 16524 <att_read_rsp+0x88>
		net_buf_unref(data.buf);
   1650c:	9802      	ldr	r0, [sp, #8]
   1650e:	f000 ff2b 	bl	17368 <net_buf_unref>
	if (!req) {
   16512:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16516:	4632      	mov	r2, r6
   16518:	4639      	mov	r1, r7
   1651a:	4620      	mov	r0, r4
   1651c:	f00b fa7d 	bl	21a1a <send_err_rsp.part.0>
		return 0;
   16520:	2500      	movs	r5, #0
   16522:	e7d1      	b.n	164c8 <att_read_rsp+0x2c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16524:	9902      	ldr	r1, [sp, #8]
   16526:	4620      	mov	r0, r4
   16528:	f7ff fd32 	bl	15f90 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   1652c:	e7cc      	b.n	164c8 <att_read_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1652e:	2501      	movs	r5, #1
   16530:	e7ca      	b.n	164c8 <att_read_rsp+0x2c>
		return BT_ATT_ERR_UNLIKELY;
   16532:	250e      	movs	r5, #14
   16534:	e7c8      	b.n	164c8 <att_read_rsp+0x2c>
   16536:	bf00      	nop
   16538:	0002185b 	.word	0x0002185b

0001653c <att_read_type_req>:
{
   1653c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   16540:	898c      	ldrh	r4, [r1, #12]
   16542:	3c04      	subs	r4, #4
   16544:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   16546:	2c02      	cmp	r4, #2
{
   16548:	4605      	mov	r5, r0
   1654a:	b08c      	sub	sp, #48	; 0x30
   1654c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1654e:	d001      	beq.n	16554 <att_read_type_req+0x18>
   16550:	2c10      	cmp	r4, #16
   16552:	d14f      	bne.n	165f4 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   16554:	2104      	movs	r1, #4
   16556:	3008      	adds	r0, #8
   16558:	f00c f84f 	bl	225fa <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1655c:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   16560:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16562:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16564:	1d01      	adds	r1, r0, #4
   16566:	4622      	mov	r2, r4
   16568:	4640      	mov	r0, r8
   1656a:	f00a f848 	bl	205fe <bt_uuid_create>
   1656e:	b188      	cbz	r0, 16594 <att_read_type_req+0x58>
	if (!start || !end) {
   16570:	b19e      	cbz	r6, 1659a <att_read_type_req+0x5e>
   16572:	b18f      	cbz	r7, 16598 <att_read_type_req+0x5c>
	if (start > end) {
   16574:	42b7      	cmp	r7, r6
   16576:	d310      	bcc.n	1659a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   16578:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1657a:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   1657c:	2100      	movs	r1, #0
   1657e:	eb0d 0002 	add.w	r0, sp, r2
   16582:	f009 fff0 	bl	20566 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   16586:	2201      	movs	r2, #1
   16588:	2109      	movs	r1, #9
   1658a:	4620      	mov	r0, r4
   1658c:	f00b fa88 	bl	21aa0 <bt_att_create_pdu>
   16590:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   16592:	b968      	cbnz	r0, 165b0 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   16594:	240e      	movs	r4, #14
   16596:	e007      	b.n	165a8 <att_read_type_req+0x6c>
			*err = 0U;
   16598:	463e      	mov	r6, r7
	if (!req) {
   1659a:	2301      	movs	r3, #1
   1659c:	4632      	mov	r2, r6
   1659e:	2108      	movs	r1, #8
   165a0:	4628      	mov	r0, r5
   165a2:	f00b fa3a 	bl	21a1a <send_err_rsp.part.0>
		return 0;
   165a6:	2400      	movs	r4, #0
}
   165a8:	4620      	mov	r0, r4
   165aa:	b00c      	add	sp, #48	; 0x30
   165ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   165b0:	2101      	movs	r1, #1
   165b2:	3008      	adds	r0, #8
	data.uuid = uuid;
   165b4:	e9cd 5806 	strd	r5, r8, [sp, #24]
   165b8:	f00b fff8 	bl	225ac <net_buf_simple_add>
	data.rsp->len = 0U;
   165bc:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   165c0:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   165c2:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   165c4:	4a0c      	ldr	r2, [pc, #48]	; (165f8 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   165c6:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   165ca:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   165cc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   165d0:	4630      	mov	r0, r6
   165d2:	ab06      	add	r3, sp, #24
   165d4:	f00a fed1 	bl	2137a <bt_gatt_foreach_attr>
	if (data.err) {
   165d8:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   165dc:	b12c      	cbz	r4, 165ea <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   165de:	9808      	ldr	r0, [sp, #32]
   165e0:	f000 fec2 	bl	17368 <net_buf_unref>
	if (!req) {
   165e4:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   165e8:	e7d8      	b.n	1659c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   165ea:	9908      	ldr	r1, [sp, #32]
   165ec:	4628      	mov	r0, r5
   165ee:	f7ff fccf 	bl	15f90 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   165f2:	e7d9      	b.n	165a8 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   165f4:	2404      	movs	r4, #4
   165f6:	e7d7      	b.n	165a8 <att_read_type_req+0x6c>
   165f8:	00016075 	.word	0x00016075

000165fc <att_find_type_req>:
{
   165fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16600:	4688      	mov	r8, r1
   16602:	b086      	sub	sp, #24
   16604:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   16606:	2106      	movs	r1, #6
   16608:	f108 0008 	add.w	r0, r8, #8
   1660c:	f00b fff5 	bl	225fa <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   16610:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   16612:	b317      	cbz	r7, 1665a <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   16614:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   16618:	f1b9 0f00 	cmp.w	r9, #0
   1661c:	d01c      	beq.n	16658 <att_find_type_req+0x5c>
	if (start > end) {
   1661e:	454f      	cmp	r7, r9
   16620:	d81b      	bhi.n	1665a <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   16622:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   16624:	f8ad 3002 	strh.w	r3, [sp, #2]
   16628:	2400      	movs	r4, #0
   1662a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1662e:	a901      	add	r1, sp, #4
   16630:	4668      	mov	r0, sp
	value = buf->data;
   16632:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   16636:	f88d 4000 	strb.w	r4, [sp]
   1663a:	f88d 4004 	strb.w	r4, [sp, #4]
   1663e:	f8ad 3006 	strh.w	r3, [sp, #6]
   16642:	f009 ffae 	bl	205a2 <bt_uuid_cmp>
   16646:	4606      	mov	r6, r0
   16648:	b190      	cbz	r0, 16670 <att_find_type_req+0x74>
	if (!req) {
   1664a:	230a      	movs	r3, #10
   1664c:	463a      	mov	r2, r7
   1664e:	2106      	movs	r1, #6
   16650:	4628      	mov	r0, r5
   16652:	f00b f9e2 	bl	21a1a <send_err_rsp.part.0>
		return 0;
   16656:	e007      	b.n	16668 <att_find_type_req+0x6c>
			*err = 0U;
   16658:	464f      	mov	r7, r9
	if (!req) {
   1665a:	2301      	movs	r3, #1
   1665c:	463a      	mov	r2, r7
   1665e:	2106      	movs	r1, #6
   16660:	4628      	mov	r0, r5
   16662:	f00b f9da 	bl	21a1a <send_err_rsp.part.0>
		return 0;
   16666:	2400      	movs	r4, #0
}
   16668:	4620      	mov	r0, r4
   1666a:	b006      	add	sp, #24
   1666c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   16670:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   16674:	f8d5 8004 	ldr.w	r8, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   16678:	4601      	mov	r1, r0
   1667a:	2214      	movs	r2, #20
   1667c:	a801      	add	r0, sp, #4
   1667e:	f009 ff72 	bl	20566 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   16682:	4632      	mov	r2, r6
   16684:	2107      	movs	r1, #7
   16686:	4640      	mov	r0, r8
   16688:	f00b fa0a 	bl	21aa0 <bt_att_create_pdu>
   1668c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1668e:	b1d8      	cbz	r0, 166c8 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16690:	230a      	movs	r3, #10
   16692:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16696:	4a0d      	ldr	r2, [pc, #52]	; (166cc <att_find_type_req+0xd0>)
	data.value_len = value_len;
   16698:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1669c:	ab01      	add	r3, sp, #4
   1669e:	4649      	mov	r1, r9
   166a0:	4638      	mov	r0, r7
	data.value = value;
   166a2:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   166a6:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   166a8:	f00a fe67 	bl	2137a <bt_gatt_foreach_attr>
	if (data.err) {
   166ac:	f89d 4015 	ldrb.w	r4, [sp, #21]
   166b0:	b12c      	cbz	r4, 166be <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   166b2:	9802      	ldr	r0, [sp, #8]
   166b4:	f000 fe58 	bl	17368 <net_buf_unref>
	if (!req) {
   166b8:	f89d 3015 	ldrb.w	r3, [sp, #21]
   166bc:	e7ce      	b.n	1665c <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   166be:	9902      	ldr	r1, [sp, #8]
   166c0:	4628      	mov	r0, r5
   166c2:	f7ff fc65 	bl	15f90 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   166c6:	e7cf      	b.n	16668 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   166c8:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   166ca:	e7cd      	b.n	16668 <att_find_type_req+0x6c>
   166cc:	00021391 	.word	0x00021391

000166d0 <att_find_info_req>:
{
   166d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   166d2:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   166d4:	881e      	ldrh	r6, [r3, #0]
{
   166d6:	b085      	sub	sp, #20
   166d8:	4605      	mov	r5, r0
	if (!start || !end) {
   166da:	b19e      	cbz	r6, 16704 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   166dc:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   166de:	b184      	cbz	r4, 16702 <att_find_info_req+0x32>
	if (start > end) {
   166e0:	42b4      	cmp	r4, r6
   166e2:	d30f      	bcc.n	16704 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   166e4:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   166e6:	2210      	movs	r2, #16
   166e8:	2100      	movs	r1, #0
   166ea:	4668      	mov	r0, sp
   166ec:	f009 ff3b 	bl	20566 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   166f0:	2200      	movs	r2, #0
   166f2:	2105      	movs	r1, #5
   166f4:	4638      	mov	r0, r7
   166f6:	f00b f9d3 	bl	21aa0 <bt_att_create_pdu>
   166fa:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   166fc:	b958      	cbnz	r0, 16716 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   166fe:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   16700:	e007      	b.n	16712 <att_find_info_req+0x42>
			*err = 0U;
   16702:	4626      	mov	r6, r4
	if (!req) {
   16704:	2301      	movs	r3, #1
   16706:	4632      	mov	r2, r6
   16708:	2104      	movs	r1, #4
   1670a:	4628      	mov	r0, r5
   1670c:	f00b f985 	bl	21a1a <send_err_rsp.part.0>
	return 0;
   16710:	2000      	movs	r0, #0
}
   16712:	b005      	add	sp, #20
   16714:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   16716:	4621      	mov	r1, r4
   16718:	4a08      	ldr	r2, [pc, #32]	; (1673c <att_find_info_req+0x6c>)
	data.chan = chan;
   1671a:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1671c:	466b      	mov	r3, sp
   1671e:	4630      	mov	r0, r6
   16720:	f00a fe2b 	bl	2137a <bt_gatt_foreach_attr>
	if (!data.rsp) {
   16724:	9c02      	ldr	r4, [sp, #8]
   16726:	b924      	cbnz	r4, 16732 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   16728:	9801      	ldr	r0, [sp, #4]
   1672a:	f000 fe1d 	bl	17368 <net_buf_unref>
	if (!req) {
   1672e:	230a      	movs	r3, #10
   16730:	e7e9      	b.n	16706 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16732:	9901      	ldr	r1, [sp, #4]
   16734:	4628      	mov	r0, r5
   16736:	f7ff fc2b 	bl	15f90 <bt_att_chan_send_rsp.constprop.0>
   1673a:	e7e9      	b.n	16710 <att_find_info_req+0x40>
   1673c:	000214b9 	.word	0x000214b9

00016740 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   16740:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   16742:	2300      	movs	r3, #0
{
   16744:	4605      	mov	r5, r0
   16746:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   16748:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1674a:	f005 f9b5 	bl	1bab8 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1674e:	4b0b      	ldr	r3, [pc, #44]	; (1677c <bt_att_req_alloc+0x3c>)
   16750:	681b      	ldr	r3, [r3, #0]
   16752:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   16754:	bf04      	itt	eq
   16756:	2500      	moveq	r5, #0
   16758:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1675a:	a901      	add	r1, sp, #4
   1675c:	4808      	ldr	r0, [pc, #32]	; (16780 <bt_att_req_alloc+0x40>)
   1675e:	462a      	mov	r2, r5
   16760:	4623      	mov	r3, r4
   16762:	f004 fab7 	bl	1acd4 <k_mem_slab_alloc>
   16766:	4601      	mov	r1, r0
   16768:	b930      	cbnz	r0, 16778 <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1676a:	9801      	ldr	r0, [sp, #4]
   1676c:	2210      	movs	r2, #16
   1676e:	f009 fefa 	bl	20566 <memset>

	return req;
   16772:	9801      	ldr	r0, [sp, #4]
}
   16774:	b003      	add	sp, #12
   16776:	bd30      	pop	{r4, r5, pc}
		return NULL;
   16778:	2000      	movs	r0, #0
   1677a:	e7fb      	b.n	16774 <bt_att_req_alloc+0x34>
   1677c:	200027c8 	.word	0x200027c8
   16780:	20000b30 	.word	0x20000b30

00016784 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   16784:	b507      	push	{r0, r1, r2, lr}
   16786:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   16788:	6880      	ldr	r0, [r0, #8]
   1678a:	b120      	cbz	r0, 16796 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   1678c:	f000 fdec 	bl	17368 <net_buf_unref>
		req->buf = NULL;
   16790:	9b01      	ldr	r3, [sp, #4]
   16792:	2200      	movs	r2, #0
   16794:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   16796:	4803      	ldr	r0, [pc, #12]	; (167a4 <bt_att_req_free+0x20>)
   16798:	a901      	add	r1, sp, #4
   1679a:	f00c fc86 	bl	230aa <k_mem_slab_free>
}
   1679e:	b003      	add	sp, #12
   167a0:	f85d fb04 	ldr.w	pc, [sp], #4
   167a4:	20000b30 	.word	0x20000b30

000167a8 <att_handle_rsp>:
{
   167a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   167ac:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   167ae:	30b0      	adds	r0, #176	; 0xb0
{
   167b0:	4688      	mov	r8, r1
   167b2:	4691      	mov	r9, r2
   167b4:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
   167b6:	f00c fe58 	bl	2346a <k_work_cancel_delayable>
	if (!chan->req) {
   167ba:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   167be:	2600      	movs	r6, #0
   167c0:	b1f0      	cbz	r0, 16800 <att_handle_rsp+0x58>
	if (chan->req == &cancel) {
   167c2:	4b10      	ldr	r3, [pc, #64]	; (16804 <att_handle_rsp+0x5c>)
   167c4:	4298      	cmp	r0, r3
   167c6:	d112      	bne.n	167ee <att_handle_rsp+0x46>
		chan->req = NULL;
   167c8:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
	bt_att_func_t func = NULL;
   167cc:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
   167ce:	6820      	ldr	r0, [r4, #0]
   167d0:	f00b f86d 	bl	218ae <att_req_send_process>
	if (func) {
   167d4:	b13d      	cbz	r5, 167e6 <att_handle_rsp+0x3e>
		func(chan->att->conn, err, pdu, len, params);
   167d6:	6820      	ldr	r0, [r4, #0]
   167d8:	f8cd a000 	str.w	sl, [sp]
   167dc:	6800      	ldr	r0, [r0, #0]
   167de:	464b      	mov	r3, r9
   167e0:	4642      	mov	r2, r8
   167e2:	4639      	mov	r1, r7
   167e4:	47a8      	blx	r5
}
   167e6:	2000      	movs	r0, #0
   167e8:	b002      	add	sp, #8
   167ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
   167ee:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   167f0:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
   167f2:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   167f6:	f7ff ffc5 	bl	16784 <bt_att_req_free>
	chan->req = NULL;
   167fa:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
   167fe:	e7e6      	b.n	167ce <att_handle_rsp+0x26>
	bt_att_func_t func = NULL;
   16800:	4605      	mov	r5, r0
   16802:	e7e4      	b.n	167ce <att_handle_rsp+0x26>
   16804:	200027cc 	.word	0x200027cc

00016808 <bt_att_disconnected>:
{
   16808:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   1680a:	f850 5c04 	ldr.w	r5, [r0, #-4]
{
   1680e:	b085      	sub	sp, #20
   16810:	4604      	mov	r4, r0
	if (!att_chan->att) {
   16812:	2d00      	cmp	r5, #0
   16814:	d04c      	beq.n	168b0 <bt_att_disconnected+0xa8>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   16816:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   1681a:	f105 0024 	add.w	r0, r5, #36	; 0x24
   1681e:	f00a ffdf 	bl	217e0 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   16822:	1f26      	subs	r6, r4, #4
   16824:	f104 0794 	add.w	r7, r4, #148	; 0x94
   16828:	2200      	movs	r2, #0
   1682a:	2300      	movs	r3, #0
   1682c:	4638      	mov	r0, r7
   1682e:	f00b fe23 	bl	22478 <net_buf_get>
   16832:	4602      	mov	r2, r0
   16834:	bb18      	cbnz	r0, 1687e <bt_att_disconnected+0x76>
	if (chan->req) {
   16836:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1683a:	b123      	cbz	r3, 16846 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1683c:	4601      	mov	r1, r0
   1683e:	230e      	movs	r3, #14
   16840:	4630      	mov	r0, r6
   16842:	f7ff ffb1 	bl	167a8 <att_handle_rsp>
	chan->att = NULL;
   16846:	2300      	movs	r3, #0
   16848:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   1684c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1684e:	2b00      	cmp	r3, #0
   16850:	d12e      	bne.n	168b0 <bt_att_disconnected+0xa8>
	att_reset(att);
   16852:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   16854:	9803      	ldr	r0, [sp, #12]
   16856:	2200      	movs	r2, #0
   16858:	2300      	movs	r3, #0
   1685a:	300c      	adds	r0, #12
   1685c:	f00b fe0c 	bl	22478 <net_buf_get>
   16860:	b980      	cbnz	r0, 16884 <bt_att_disconnected+0x7c>
	while (!sys_slist_is_empty(&att->reqs)) {
   16862:	9803      	ldr	r0, [sp, #12]
	return list->head;
   16864:	6845      	ldr	r5, [r0, #4]
   16866:	b985      	cbnz	r5, 1688a <bt_att_disconnected+0x82>
	att->conn = NULL;
   16868:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1686a:	a903      	add	r1, sp, #12
   1686c:	4811      	ldr	r0, [pc, #68]	; (168b4 <bt_att_disconnected+0xac>)
   1686e:	f00c fc1c 	bl	230aa <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   16872:	6820      	ldr	r0, [r4, #0]
}
   16874:	b005      	add	sp, #20
   16876:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   1687a:	f000 bc7f 	b.w	1717c <bt_gatt_disconnected>
		net_buf_unref(buf);
   1687e:	f000 fd73 	bl	17368 <net_buf_unref>
   16882:	e7d1      	b.n	16828 <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   16884:	f000 fd70 	bl	17368 <net_buf_unref>
   16888:	e7e4      	b.n	16854 <bt_att_disconnected+0x4c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1688a:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   1688c:	686e      	ldr	r6, [r5, #4]
	return node->next;
   1688e:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   16890:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16892:	4295      	cmp	r5, r2
	list->tail = node;
   16894:	bf08      	it	eq
   16896:	6083      	streq	r3, [r0, #8]
   16898:	b136      	cbz	r6, 168a8 <bt_att_disconnected+0xa0>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1689a:	68eb      	ldr	r3, [r5, #12]
   1689c:	9300      	str	r3, [sp, #0]
   1689e:	2300      	movs	r3, #0
   168a0:	6800      	ldr	r0, [r0, #0]
   168a2:	461a      	mov	r2, r3
   168a4:	210e      	movs	r1, #14
   168a6:	47b0      	blx	r6
		bt_att_req_free(req);
   168a8:	4628      	mov	r0, r5
   168aa:	f7ff ff6b 	bl	16784 <bt_att_req_free>
   168ae:	e7d8      	b.n	16862 <bt_att_disconnected+0x5a>
}
   168b0:	b005      	add	sp, #20
   168b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   168b4:	20000af8 	.word	0x20000af8

000168b8 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   168b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   168ba:	4d0d      	ldr	r5, [pc, #52]	; (168f0 <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   168bc:	4604      	mov	r4, r0
   168be:	b968      	cbnz	r0, 168dc <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   168c0:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
   168c2:	2207      	movs	r2, #7
   168c4:	f8cd 0003 	str.w	r0, [sp, #3]
   168c8:	4669      	mov	r1, sp
   168ca:	1c68      	adds	r0, r5, #1
   168cc:	f009 fe17 	bl	204fe <memcmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   168d0:	2800      	cmp	r0, #0
   168d2:	bf08      	it	eq
   168d4:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
   168d6:	4620      	mov	r0, r4
   168d8:	b003      	add	sp, #12
   168da:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   168dc:	462a      	mov	r2, r5
   168de:	f812 1b01 	ldrb.w	r1, [r2], #1
   168e2:	f00a fb8f 	bl	21004 <bt_conn_is_peer_addr_le>
	return NULL;
   168e6:	2800      	cmp	r0, #0
   168e8:	bf14      	ite	ne
   168ea:	462c      	movne	r4, r5
   168ec:	2400      	moveq	r4, #0
   168ee:	e7f2      	b.n	168d6 <find_cf_cfg+0x1e>
   168f0:	200027e4 	.word	0x200027e4

000168f4 <find_sc_cfg>:
{
   168f4:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   168f6:	4c06      	ldr	r4, [pc, #24]	; (16910 <find_sc_cfg+0x1c>)
   168f8:	7823      	ldrb	r3, [r4, #0]
   168fa:	4283      	cmp	r3, r0
   168fc:	d104      	bne.n	16908 <find_sc_cfg+0x14>
   168fe:	2207      	movs	r2, #7
   16900:	1c60      	adds	r0, r4, #1
   16902:	f009 fdfc 	bl	204fe <memcmp>
   16906:	b108      	cbz	r0, 1690c <find_sc_cfg+0x18>
	return NULL;
   16908:	2000      	movs	r0, #0
}
   1690a:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   1690c:	4620      	mov	r0, r4
   1690e:	e7fc      	b.n	1690a <find_sc_cfg+0x16>
   16910:	200035a4 	.word	0x200035a4

00016914 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   16914:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   16918:	4b23      	ldr	r3, [pc, #140]	; (169a8 <disconnected_cb+0x94>)
{
   1691a:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1691c:	6882      	ldr	r2, [r0, #8]
   1691e:	429a      	cmp	r2, r3
{
   16920:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16922:	d102      	bne.n	1692a <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   16924:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   16926:	8963      	ldrh	r3, [r4, #10]
   16928:	bb03      	cbnz	r3, 1696c <disconnected_cb+0x58>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   1692a:	2001      	movs	r0, #1
   1692c:	b002      	add	sp, #8
   1692e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   16932:	f105 0888 	add.w	r8, r5, #136	; 0x88
   16936:	7a28      	ldrb	r0, [r5, #8]
   16938:	4641      	mov	r1, r8
   1693a:	f00a f902 	bl	20b42 <bt_addr_le_is_bonded>
   1693e:	b980      	cbnz	r0, 16962 <disconnected_cb+0x4e>
				if (ccc == &sc_ccc) {
   16940:	4b1a      	ldr	r3, [pc, #104]	; (169ac <disconnected_cb+0x98>)
   16942:	429c      	cmp	r4, r3
   16944:	d102      	bne.n	1694c <disconnected_cb+0x38>
					sc_clear(conn);
   16946:	4628      	mov	r0, r5
   16948:	f00b fc0d 	bl	22166 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1694c:	2500      	movs	r5, #0
   1694e:	4669      	mov	r1, sp
   16950:	4630      	mov	r0, r6
   16952:	9500      	str	r5, [sp, #0]
   16954:	f8cd 5003 	str.w	r5, [sp, #3]
   16958:	f00b f9b8 	bl	21ccc <bt_addr_le_copy>
	cfg->id = 0U;
   1695c:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1695e:	8125      	strh	r5, [r4, #8]
	if (!value_used) {
   16960:	e019      	b.n	16996 <disconnected_cb+0x82>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   16962:	4641      	mov	r1, r8
   16964:	4630      	mov	r0, r6
   16966:	f00b f9b1 	bl	21ccc <bt_addr_le_copy>
	if (!value_used) {
   1696a:	e014      	b.n	16996 <disconnected_cb+0x82>
		if (!cfg->value) {
   1696c:	8923      	ldrh	r3, [r4, #8]
   1696e:	b193      	cbz	r3, 16996 <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16970:	4626      	mov	r6, r4
   16972:	4628      	mov	r0, r5
   16974:	f816 1b01 	ldrb.w	r1, [r6], #1
   16978:	4632      	mov	r2, r6
   1697a:	f00a fb43 	bl	21004 <bt_conn_is_peer_addr_le>
   1697e:	2800      	cmp	r0, #0
   16980:	d1d7      	bne.n	16932 <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   16982:	7820      	ldrb	r0, [r4, #0]
   16984:	4631      	mov	r1, r6
   16986:	f7fe fff1 	bl	1596c <bt_conn_lookup_addr_le>
			if (tmp) {
   1698a:	b120      	cbz	r0, 16996 <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
   1698c:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
   1698e:	f00a faf2 	bl	20f76 <bt_conn_unref>
	if (!value_used) {
   16992:	2d07      	cmp	r5, #7
   16994:	d0c9      	beq.n	1692a <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   16996:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   16998:	2100      	movs	r1, #0
   1699a:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1699c:	2b00      	cmp	r3, #0
   1699e:	d0c4      	beq.n	1692a <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   169a0:	4638      	mov	r0, r7
   169a2:	4798      	blx	r3
   169a4:	e7c1      	b.n	1692a <disconnected_cb+0x16>
   169a6:	bf00      	nop
   169a8:	0002202d 	.word	0x0002202d
   169ac:	200007a8 	.word	0x200007a8

000169b0 <sc_indicate_rsp>:
{
   169b0:	b510      	push	{r4, lr}
   169b2:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   169b4:	4816      	ldr	r0, [pc, #88]	; (16a10 <sc_indicate_rsp+0x60>)
   169b6:	f3bf 8f5b 	dmb	ish
   169ba:	f100 0350 	add.w	r3, r0, #80	; 0x50
   169be:	e853 2f00 	ldrex	r2, [r3]
   169c2:	f022 0202 	bic.w	r2, r2, #2
   169c6:	e843 2100 	strex	r1, r2, [r3]
   169ca:	2900      	cmp	r1, #0
   169cc:	d1f7      	bne.n	169be <sc_indicate_rsp+0xe>
   169ce:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   169d2:	f3bf 8f5b 	dmb	ish
   169d6:	6d03      	ldr	r3, [r0, #80]	; 0x50
   169d8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   169dc:	07da      	lsls	r2, r3, #31
   169de:	d504      	bpl.n	169ea <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
   169e0:	2200      	movs	r2, #0
   169e2:	2300      	movs	r3, #0
   169e4:	3020      	adds	r0, #32
   169e6:	f004 fd6f 	bl	1b4c8 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   169ea:	4620      	mov	r0, r4
   169ec:	f00b f924 	bl	21c38 <bt_att_fixed_chan_only>
   169f0:	b160      	cbz	r0, 16a0c <sc_indicate_rsp+0x5c>
		cfg = find_cf_cfg(conn);
   169f2:	4620      	mov	r0, r4
   169f4:	f7ff ff60 	bl	168b8 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   169f8:	b140      	cbz	r0, 16a0c <sc_indicate_rsp+0x5c>
   169fa:	7a03      	ldrb	r3, [r0, #8]
   169fc:	07db      	lsls	r3, r3, #31
   169fe:	d505      	bpl.n	16a0c <sc_indicate_rsp+0x5c>
}
   16a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   16a04:	2100      	movs	r1, #0
   16a06:	300c      	adds	r0, #12
   16a08:	f00b b9f7 	b.w	21dfa <atomic_set_bit>
}
   16a0c:	bd10      	pop	{r4, pc}
   16a0e:	bf00      	nop
   16a10:	20001cc0 	.word	0x20001cc0

00016a14 <bt_gatt_init>:
{
   16a14:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   16a16:	4b20      	ldr	r3, [pc, #128]	; (16a98 <bt_gatt_init+0x84>)
   16a18:	f3bf 8f5b 	dmb	ish
   16a1c:	2201      	movs	r2, #1
   16a1e:	e853 1f00 	ldrex	r1, [r3]
   16a22:	2900      	cmp	r1, #0
   16a24:	d103      	bne.n	16a2e <bt_gatt_init+0x1a>
   16a26:	e843 2000 	strex	r0, r2, [r3]
   16a2a:	2800      	cmp	r0, #0
   16a2c:	d1f7      	bne.n	16a1e <bt_gatt_init+0xa>
   16a2e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   16a32:	d130      	bne.n	16a96 <bt_gatt_init+0x82>
   16a34:	f3bf 8f5b 	dmb	ish
   16a38:	4b18      	ldr	r3, [pc, #96]	; (16a9c <bt_gatt_init+0x88>)
   16a3a:	e853 1f00 	ldrex	r1, [r3]
   16a3e:	2900      	cmp	r1, #0
   16a40:	d103      	bne.n	16a4a <bt_gatt_init+0x36>
   16a42:	e843 2000 	strex	r0, r2, [r3]
   16a46:	2800      	cmp	r0, #0
   16a48:	d1f7      	bne.n	16a3a <bt_gatt_init+0x26>
   16a4a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   16a4e:	d108      	bne.n	16a62 <bt_gatt_init+0x4e>
   16a50:	4913      	ldr	r1, [pc, #76]	; (16aa0 <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16a52:	4a14      	ldr	r2, [pc, #80]	; (16aa4 <bt_gatt_init+0x90>)
   16a54:	880b      	ldrh	r3, [r1, #0]
   16a56:	4c14      	ldr	r4, [pc, #80]	; (16aa8 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
   16a58:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16a5a:	42a2      	cmp	r2, r4
   16a5c:	d315      	bcc.n	16a8a <bt_gatt_init+0x76>
   16a5e:	b100      	cbz	r0, 16a62 <bt_gatt_init+0x4e>
   16a60:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   16a62:	4b12      	ldr	r3, [pc, #72]	; (16aac <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   16a64:	4912      	ldr	r1, [pc, #72]	; (16ab0 <bt_gatt_init+0x9c>)
   16a66:	4813      	ldr	r0, [pc, #76]	; (16ab4 <bt_gatt_init+0xa0>)
   16a68:	2200      	movs	r2, #0
	list->tail = NULL;
   16a6a:	e9c3 2200 	strd	r2, r2, [r3]
   16a6e:	f00c fcee 	bl	2344e <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   16a72:	4810      	ldr	r0, [pc, #64]	; (16ab4 <bt_gatt_init+0xa0>)
   16a74:	f44f 72a4 	mov.w	r2, #328	; 0x148
   16a78:	2300      	movs	r3, #0
   16a7a:	f004 fcf1 	bl	1b460 <k_work_schedule>
}
   16a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   16a82:	490d      	ldr	r1, [pc, #52]	; (16ab8 <bt_gatt_init+0xa4>)
   16a84:	480d      	ldr	r0, [pc, #52]	; (16abc <bt_gatt_init+0xa8>)
   16a86:	f00c bce2 	b.w	2344e <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   16a8a:	6850      	ldr	r0, [r2, #4]
   16a8c:	4403      	add	r3, r0
   16a8e:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16a90:	3208      	adds	r2, #8
   16a92:	2001      	movs	r0, #1
   16a94:	e7e1      	b.n	16a5a <bt_gatt_init+0x46>
}
   16a96:	bd10      	pop	{r4, pc}
   16a98:	200027f4 	.word	0x200027f4
   16a9c:	20002810 	.word	0x20002810
   16aa0:	200035a2 	.word	0x200035a2
   16aa4:	00023e78 	.word	0x00023e78
   16aa8:	00023ea0 	.word	0x00023ea0
   16aac:	200027dc 	.word	0x200027dc
   16ab0:	000222cd 	.word	0x000222cd
   16ab4:	20001c68 	.word	0x20001c68
   16ab8:	00016e59 	.word	0x00016e59
   16abc:	20001ce0 	.word	0x20001ce0

00016ac0 <bt_gatt_attr_get_handle>:
{
   16ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   16ac4:	4603      	mov	r3, r0
   16ac6:	b148      	cbz	r0, 16adc <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   16ac8:	8a00      	ldrh	r0, [r0, #16]
   16aca:	b938      	cbnz	r0, 16adc <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16acc:	4912      	ldr	r1, [pc, #72]	; (16b18 <bt_gatt_attr_get_handle+0x58>)
   16ace:	f8df e04c 	ldr.w	lr, [pc, #76]	; 16b1c <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   16ad2:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   16ad4:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16ad8:	4571      	cmp	r1, lr
   16ada:	d301      	bcc.n	16ae0 <bt_gatt_attr_get_handle+0x20>
}
   16adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   16ae0:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   16ae4:	42bb      	cmp	r3, r7
   16ae6:	d304      	bcc.n	16af2 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   16ae8:	fb0c 7206 	mla	r2, ip, r6, r7
   16aec:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   16aee:	4293      	cmp	r3, r2
   16af0:	d90e      	bls.n	16b10 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   16af2:	19a2      	adds	r2, r4, r6
   16af4:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16af6:	3108      	adds	r1, #8
   16af8:	4614      	mov	r4, r2
   16afa:	e7ed      	b.n	16ad8 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   16afc:	fb0c 7805 	mla	r8, ip, r5, r7
   16b00:	4543      	cmp	r3, r8
   16b02:	d007      	beq.n	16b14 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   16b04:	3501      	adds	r5, #1
   16b06:	1962      	adds	r2, r4, r5
   16b08:	42b5      	cmp	r5, r6
   16b0a:	b292      	uxth	r2, r2
   16b0c:	d1f6      	bne.n	16afc <bt_gatt_attr_get_handle+0x3c>
   16b0e:	e7f2      	b.n	16af6 <bt_gatt_attr_get_handle+0x36>
   16b10:	2500      	movs	r5, #0
   16b12:	e7f8      	b.n	16b06 <bt_gatt_attr_get_handle+0x46>
   16b14:	4610      	mov	r0, r2
   16b16:	e7e1      	b.n	16adc <bt_gatt_attr_get_handle+0x1c>
   16b18:	00023e78 	.word	0x00023e78
   16b1c:	00023ea0 	.word	0x00023ea0

00016b20 <bt_gatt_foreach_attr_type>:
{
   16b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b24:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   16b28:	9100      	str	r1, [sp, #0]
   16b2a:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   16b2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16b30:	2d00      	cmp	r5, #0
   16b32:	bf08      	it	eq
   16b34:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   16b36:	4b24      	ldr	r3, [pc, #144]	; (16bc8 <bt_gatt_foreach_attr_type+0xa8>)
   16b38:	881b      	ldrh	r3, [r3, #0]
   16b3a:	4283      	cmp	r3, r0
{
   16b3c:	4607      	mov	r7, r0
   16b3e:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   16b40:	d23c      	bcs.n	16bbc <bt_gatt_foreach_attr_type+0x9c>
}
   16b42:	b003      	add	sp, #12
   16b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   16b48:	6873      	ldr	r3, [r6, #4]
   16b4a:	4423      	add	r3, r4
   16b4c:	42bb      	cmp	r3, r7
   16b4e:	d232      	bcs.n	16bb6 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   16b50:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16b52:	3608      	adds	r6, #8
   16b54:	4b1d      	ldr	r3, [pc, #116]	; (16bcc <bt_gatt_foreach_attr_type+0xac>)
   16b56:	429e      	cmp	r6, r3
   16b58:	d3f6      	bcc.n	16b48 <bt_gatt_foreach_attr_type+0x28>
   16b5a:	e7f2      	b.n	16b42 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   16b5c:	5889      	ldr	r1, [r1, r2]
   16b5e:	9301      	str	r3, [sp, #4]
   16b60:	4640      	mov	r0, r8
   16b62:	f009 fd1e 	bl	205a2 <bt_uuid_cmp>
   16b66:	9b01      	ldr	r3, [sp, #4]
   16b68:	b190      	cbz	r0, 16b90 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   16b6a:	3401      	adds	r4, #1
   16b6c:	f10a 0a01 	add.w	sl, sl, #1
   16b70:	b2a4      	uxth	r4, r4
   16b72:	6873      	ldr	r3, [r6, #4]
   16b74:	4553      	cmp	r3, sl
   16b76:	d9ec      	bls.n	16b52 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   16b78:	9b00      	ldr	r3, [sp, #0]
   16b7a:	429c      	cmp	r4, r3
   16b7c:	d8e1      	bhi.n	16b42 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   16b7e:	42bc      	cmp	r4, r7
   16b80:	d3f3      	bcc.n	16b6a <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16b82:	6831      	ldr	r1, [r6, #0]
   16b84:	fb0b f20a 	mul.w	r2, fp, sl
   16b88:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   16b8a:	f1b8 0f00 	cmp.w	r8, #0
   16b8e:	d1e5      	bne.n	16b5c <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   16b90:	f1b9 0f00 	cmp.w	r9, #0
   16b94:	d10b      	bne.n	16bae <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   16b96:	3d01      	subs	r5, #1
   16b98:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   16b9a:	4618      	mov	r0, r3
   16b9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16ba0:	4621      	mov	r1, r4
   16ba2:	4798      	blx	r3
	if (!*num_matches) {
   16ba4:	2d00      	cmp	r5, #0
   16ba6:	d0cc      	beq.n	16b42 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16ba8:	2800      	cmp	r0, #0
   16baa:	d1de      	bne.n	16b6a <bt_gatt_foreach_attr_type+0x4a>
   16bac:	e7c9      	b.n	16b42 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   16bae:	68da      	ldr	r2, [r3, #12]
   16bb0:	4591      	cmp	r9, r2
   16bb2:	d1da      	bne.n	16b6a <bt_gatt_foreach_attr_type+0x4a>
   16bb4:	e7ef      	b.n	16b96 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   16bb6:	f04f 0a00 	mov.w	sl, #0
   16bba:	e7da      	b.n	16b72 <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16bbc:	4e04      	ldr	r6, [pc, #16]	; (16bd0 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   16bbe:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16bc0:	f04f 0b14 	mov.w	fp, #20
   16bc4:	e7c6      	b.n	16b54 <bt_gatt_foreach_attr_type+0x34>
   16bc6:	bf00      	nop
   16bc8:	200035a2 	.word	0x200035a2
   16bcc:	00023ea0 	.word	0x00023ea0
   16bd0:	00023e78 	.word	0x00023e78

00016bd4 <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
   16bd4:	b510      	push	{r4, lr}
   16bd6:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   16bd8:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   16bda:	aa1c      	add	r2, sp, #112	; 0x70
   16bdc:	4669      	mov	r1, sp
   16bde:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   16be0:	e9cd 3300 	strd	r3, r3, [sp]
   16be4:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   16be8:	f009 fb71 	bl	202ce <tc_cmac_setup>
   16bec:	b320      	cbz	r0, 16c38 <db_hash_gen.constprop.0+0x64>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   16bee:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16bf2:	2001      	movs	r0, #1
   16bf4:	4a11      	ldr	r2, [pc, #68]	; (16c3c <db_hash_gen.constprop.0+0x68>)
   16bf6:	ab04      	add	r3, sp, #16
   16bf8:	f00b fb5d 	bl	222b6 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   16bfc:	4810      	ldr	r0, [pc, #64]	; (16c40 <db_hash_gen.constprop.0+0x6c>)
   16bfe:	a904      	add	r1, sp, #16
   16c00:	f009 fbfb 	bl	203fa <tc_cmac_final>
   16c04:	b1c0      	cbz	r0, 16c38 <db_hash_gen.constprop.0+0x64>
   16c06:	4b0e      	ldr	r3, [pc, #56]	; (16c40 <db_hash_gen.constprop.0+0x6c>)
   16c08:	2208      	movs	r2, #8
   16c0a:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   16c0e:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   16c10:	780c      	ldrb	r4, [r1, #0]
   16c12:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   16c16:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   16c18:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   16c1c:	d1f7      	bne.n	16c0e <db_hash_gen.constprop.0+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16c1e:	f3bf 8f5b 	dmb	ish
   16c22:	4b08      	ldr	r3, [pc, #32]	; (16c44 <db_hash_gen.constprop.0+0x70>)
   16c24:	e853 2f00 	ldrex	r2, [r3]
   16c28:	f042 0204 	orr.w	r2, r2, #4
   16c2c:	e843 2100 	strex	r1, r2, [r3]
   16c30:	2900      	cmp	r1, #0
   16c32:	d1f7      	bne.n	16c24 <db_hash_gen.constprop.0+0x50>
   16c34:	f3bf 8f5b 	dmb	ish
}
   16c38:	b048      	add	sp, #288	; 0x120
   16c3a:	bd10      	pop	{r4, pc}
   16c3c:	00021d17 	.word	0x00021d17
   16c40:	20001c58 	.word	0x20001c58
   16c44:	20001d10 	.word	0x20001d10

00016c48 <db_hash_read>:
{
   16c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16c4c:	491d      	ldr	r1, [pc, #116]	; (16cc4 <db_hash_read+0x7c>)
{
   16c4e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   16c52:	4680      	mov	r8, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16c54:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   16c58:	461f      	mov	r7, r3
   16c5a:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16c5c:	f00c fc19 	bl	23492 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16c60:	f3bf 8f5b 	dmb	ish
   16c64:	4b18      	ldr	r3, [pc, #96]	; (16cc8 <db_hash_read+0x80>)
   16c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   16c68:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   16c6c:	0759      	lsls	r1, r3, #29
   16c6e:	d401      	bmi.n	16c74 <db_hash_read+0x2c>
		db_hash_gen(true);
   16c70:	f7ff ffb0 	bl	16bd4 <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   16c74:	4640      	mov	r0, r8
   16c76:	f7ff fe1f 	bl	168b8 <find_cf_cfg>
	if (cfg &&
   16c7a:	4601      	mov	r1, r0
   16c7c:	b170      	cbz	r0, 16c9c <db_hash_read+0x54>
   16c7e:	7a03      	ldrb	r3, [r0, #8]
   16c80:	07da      	lsls	r2, r3, #31
   16c82:	d50b      	bpl.n	16c9c <db_hash_read+0x54>
   16c84:	f3bf 8f5b 	dmb	ish
   16c88:	68cb      	ldr	r3, [r1, #12]
   16c8a:	f3bf 8f5b 	dmb	ish
	    CF_ROBUST_CACHING(cfg) &&
   16c8e:	07db      	lsls	r3, r3, #31
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   16c90:	f100 000c 	add.w	r0, r0, #12
	    CF_ROBUST_CACHING(cfg) &&
   16c94:	d402      	bmi.n	16c9c <db_hash_read+0x54>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   16c96:	2101      	movs	r1, #1
   16c98:	f00b f8af 	bl	21dfa <atomic_set_bit>
	if (offset > value_len) {
   16c9c:	2e10      	cmp	r6, #16
   16c9e:	d80d      	bhi.n	16cbc <db_hash_read+0x74>
	len = MIN(buf_len, value_len - offset);
   16ca0:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   16ca4:	4909      	ldr	r1, [pc, #36]	; (16ccc <db_hash_read+0x84>)
	len = MIN(buf_len, value_len - offset);
   16ca6:	42bc      	cmp	r4, r7
   16ca8:	bfa8      	it	ge
   16caa:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   16cac:	4622      	mov	r2, r4
   16cae:	4431      	add	r1, r6
   16cb0:	4628      	mov	r0, r5
   16cb2:	f009 fc4d 	bl	20550 <memcpy>
}
   16cb6:	4620      	mov	r0, r4
   16cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   16cbc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   16cc0:	e7f9      	b.n	16cb6 <db_hash_read+0x6e>
   16cc2:	bf00      	nop
   16cc4:	20001c98 	.word	0x20001c98
   16cc8:	20001cc0 	.word	0x20001cc0
   16ccc:	20001c58 	.word	0x20001c58

00016cd0 <gatt_indicate>:
{
   16cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16cd4:	4615      	mov	r5, r2
   16cd6:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   16cd8:	2214      	movs	r2, #20
   16cda:	6869      	ldr	r1, [r5, #4]
{
   16cdc:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   16cde:	f00b faf7 	bl	222d0 <bt_gatt_check_perm>
   16ce2:	2800      	cmp	r0, #0
   16ce4:	d139      	bne.n	16d5a <gatt_indicate+0x8a>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   16ce6:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   16cea:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   16cec:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   16cee:	f7ff fd27 	bl	16740 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   16cf2:	3602      	adds	r6, #2
	if (!req) {
   16cf4:	4604      	mov	r4, r0
   16cf6:	b920      	cbnz	r0, 16d02 <gatt_indicate+0x32>
		return -ENOMEM;
   16cf8:	f06f 050b 	mvn.w	r5, #11
}
   16cfc:	4628      	mov	r0, r5
   16cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
   16d02:	4b17      	ldr	r3, [pc, #92]	; (16d60 <gatt_indicate+0x90>)
   16d04:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   16d06:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   16d08:	4632      	mov	r2, r6
   16d0a:	211d      	movs	r1, #29
   16d0c:	4640      	mov	r0, r8
   16d0e:	f00a fec7 	bl	21aa0 <bt_att_create_pdu>
	if (!buf) {
   16d12:	4606      	mov	r6, r0
   16d14:	b918      	cbnz	r0, 16d1e <gatt_indicate+0x4e>
		bt_att_req_free(req);
   16d16:	4620      	mov	r0, r4
   16d18:	f7ff fd34 	bl	16784 <bt_att_req_free>
   16d1c:	e7ec      	b.n	16cf8 <gatt_indicate+0x28>
	return net_buf_simple_add(&buf->b, len);
   16d1e:	f100 0a08 	add.w	sl, r0, #8
   16d22:	2102      	movs	r1, #2
   16d24:	4650      	mov	r0, sl
   16d26:	f00b fc41 	bl	225ac <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   16d2a:	4607      	mov	r7, r0
   16d2c:	8aa9      	ldrh	r1, [r5, #20]
   16d2e:	f827 9b02 	strh.w	r9, [r7], #2
   16d32:	4650      	mov	r0, sl
   16d34:	f00b fc3a 	bl	225ac <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   16d38:	8aaa      	ldrh	r2, [r5, #20]
   16d3a:	6929      	ldr	r1, [r5, #16]
   16d3c:	4638      	mov	r0, r7
   16d3e:	f009 fc07 	bl	20550 <memcpy>
	req->buf = buf;
   16d42:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   16d44:	4621      	mov	r1, r4
   16d46:	4640      	mov	r0, r8
   16d48:	f00a ff61 	bl	21c0e <bt_att_req_send>
	if (err) {
   16d4c:	4605      	mov	r5, r0
   16d4e:	2800      	cmp	r0, #0
   16d50:	d0d4      	beq.n	16cfc <gatt_indicate+0x2c>
		bt_att_req_free(req);
   16d52:	4620      	mov	r0, r4
   16d54:	f7ff fd16 	bl	16784 <bt_att_req_free>
   16d58:	e7d0      	b.n	16cfc <gatt_indicate+0x2c>
		return -EPERM;
   16d5a:	f04f 35ff 	mov.w	r5, #4294967295
   16d5e:	e7cd      	b.n	16cfc <gatt_indicate+0x2c>
   16d60:	00021c9f 	.word	0x00021c9f

00016d64 <bt_gatt_indicate>:
{
   16d64:	b530      	push	{r4, r5, lr}
   16d66:	4b39      	ldr	r3, [pc, #228]	; (16e4c <bt_gatt_indicate+0xe8>)
   16d68:	f3bf 8f5b 	dmb	ish
   16d6c:	681b      	ldr	r3, [r3, #0]
   16d6e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16d72:	075a      	lsls	r2, r3, #29
{
   16d74:	b08b      	sub	sp, #44	; 0x2c
   16d76:	4604      	mov	r4, r0
   16d78:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16d7a:	d561      	bpl.n	16e40 <bt_gatt_indicate+0xdc>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   16d7c:	b110      	cbz	r0, 16d84 <bt_gatt_indicate+0x20>
   16d7e:	7a83      	ldrb	r3, [r0, #10]
   16d80:	2b07      	cmp	r3, #7
   16d82:	d160      	bne.n	16e46 <bt_gatt_indicate+0xe2>
	data.attr = params->attr;
   16d84:	6868      	ldr	r0, [r5, #4]
   16d86:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16d88:	f7ff fe9a 	bl	16ac0 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   16d8c:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16d8e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   16d92:	b33a      	cbz	r2, 16de4 <bt_gatt_indicate+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16d94:	a905      	add	r1, sp, #20
   16d96:	9102      	str	r1, [sp, #8]
   16d98:	492d      	ldr	r1, [pc, #180]	; (16e50 <bt_gatt_indicate+0xec>)
   16d9a:	9101      	str	r1, [sp, #4]
   16d9c:	2101      	movs	r1, #1
	found->attr = NULL;
   16d9e:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16da0:	9100      	str	r1, [sp, #0]
   16da2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   16da6:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16da8:	f7ff feba 	bl	16b20 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   16dac:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   16dae:	b91b      	cbnz	r3, 16db8 <bt_gatt_indicate+0x54>
			return -ENOENT;
   16db0:	f06f 0001 	mvn.w	r0, #1
}
   16db4:	b00b      	add	sp, #44	; 0x2c
   16db6:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   16db8:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   16dba:	9b05      	ldr	r3, [sp, #20]
   16dbc:	6818      	ldr	r0, [r3, #0]
   16dbe:	2300      	movs	r3, #0
   16dc0:	f88d 3010 	strb.w	r3, [sp, #16]
   16dc4:	a904      	add	r1, sp, #16
   16dc6:	f642 0303 	movw	r3, #10243	; 0x2803
   16dca:	f8ad 3012 	strh.w	r3, [sp, #18]
   16dce:	f009 fbe8 	bl	205a2 <bt_uuid_cmp>
   16dd2:	b970      	cbnz	r0, 16df2 <bt_gatt_indicate+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   16dd4:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   16dd6:	68c3      	ldr	r3, [r0, #12]
   16dd8:	799b      	ldrb	r3, [r3, #6]
   16dda:	069b      	lsls	r3, r3, #26
   16ddc:	d405      	bmi.n	16dea <bt_gatt_indicate+0x86>
			return -EINVAL;
   16dde:	f06f 0015 	mvn.w	r0, #21
   16de2:	e7e7      	b.n	16db4 <bt_gatt_indicate+0x50>
		if (!data.handle) {
   16de4:	2800      	cmp	r0, #0
   16de6:	d1e8      	bne.n	16dba <bt_gatt_indicate+0x56>
   16de8:	e7e2      	b.n	16db0 <bt_gatt_indicate+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   16dea:	f00b fa16 	bl	2221a <bt_gatt_attr_value_handle>
   16dee:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   16df2:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   16df6:	b13c      	cbz	r4, 16e08 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
   16df8:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   16dfa:	4601      	mov	r1, r0
		params->_ref = 1;
   16dfc:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   16dfe:	462a      	mov	r2, r5
   16e00:	4620      	mov	r0, r4
   16e02:	f7ff ff65 	bl	16cd0 <gatt_indicate>
   16e06:	e7d5      	b.n	16db4 <bt_gatt_indicate+0x50>
	data.err = -ENOTCONN;
   16e08:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   16e0c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   16e0e:	2302      	movs	r3, #2
   16e10:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16e14:	f642 1302 	movw	r3, #10498	; 0x2902
   16e18:	f8ad 3012 	strh.w	r3, [sp, #18]
   16e1c:	ab05      	add	r3, sp, #20
   16e1e:	9302      	str	r3, [sp, #8]
   16e20:	4b0c      	ldr	r3, [pc, #48]	; (16e54 <bt_gatt_indicate+0xf0>)
   16e22:	9301      	str	r3, [sp, #4]
   16e24:	2301      	movs	r3, #1
   16e26:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   16e28:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16e2a:	4623      	mov	r3, r4
   16e2c:	aa04      	add	r2, sp, #16
   16e2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   16e32:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16e34:	f88d 4010 	strb.w	r4, [sp, #16]
   16e38:	f7ff fe72 	bl	16b20 <bt_gatt_foreach_attr_type>
	return data.err;
   16e3c:	9807      	ldr	r0, [sp, #28]
   16e3e:	e7b9      	b.n	16db4 <bt_gatt_indicate+0x50>
		return -EAGAIN;
   16e40:	f06f 000a 	mvn.w	r0, #10
   16e44:	e7b6      	b.n	16db4 <bt_gatt_indicate+0x50>
		return -ENOTCONN;
   16e46:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16e4a:	e7b3      	b.n	16db4 <bt_gatt_indicate+0x50>
   16e4c:	20000394 	.word	0x20000394
   16e50:	00021cc5 	.word	0x00021cc5
   16e54:	00016fb5 	.word	0x00016fb5

00016e58 <sc_process>:
{
   16e58:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   16e5a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   16e5e:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   16e62:	f830 2c06 	ldrh.w	r2, [r0, #-6]
   16e66:	f8ad 2006 	strh.w	r2, [sp, #6]
{
   16e6a:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   16e6c:	f1a0 0120 	sub.w	r1, r0, #32
   16e70:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16e74:	f3bf 8f5b 	dmb	ish
   16e78:	e854 2f00 	ldrex	r2, [r4]
   16e7c:	f022 0201 	bic.w	r2, r2, #1
   16e80:	e844 2000 	strex	r0, r2, [r4]
   16e84:	2800      	cmp	r0, #0
   16e86:	d1f7      	bne.n	16e78 <sc_process+0x20>
   16e88:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   16e8c:	4a0c      	ldr	r2, [pc, #48]	; (16ec0 <sc_process+0x68>)
   16e8e:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   16e92:	4a0c      	ldr	r2, [pc, #48]	; (16ec4 <sc_process+0x6c>)
   16e94:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   16e98:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   16e9a:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   16e9c:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   16ea0:	2204      	movs	r2, #4
	sc->start = 0U;
   16ea2:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   16ea6:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   16eaa:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   16eae:	f7ff ff59 	bl	16d64 <bt_gatt_indicate>
   16eb2:	b918      	cbnz	r0, 16ebc <sc_process+0x64>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   16eb4:	2101      	movs	r1, #1
   16eb6:	4620      	mov	r0, r4
   16eb8:	f00a ff9f 	bl	21dfa <atomic_set_bit>
}
   16ebc:	b002      	add	sp, #8
   16ebe:	bd10      	pop	{r4, pc}
   16ec0:	00024684 	.word	0x00024684
   16ec4:	000169b1 	.word	0x000169b1

00016ec8 <bt_gatt_notify_cb>:
{
   16ec8:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16eca:	4b37      	ldr	r3, [pc, #220]	; (16fa8 <bt_gatt_notify_cb+0xe0>)
   16ecc:	f3bf 8f5b 	dmb	ish
   16ed0:	681b      	ldr	r3, [r3, #0]
   16ed2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16ed6:	075a      	lsls	r2, r3, #29
{
   16ed8:	b08b      	sub	sp, #44	; 0x2c
   16eda:	4604      	mov	r4, r0
   16edc:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16ede:	d55d      	bpl.n	16f9c <bt_gatt_notify_cb+0xd4>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   16ee0:	b110      	cbz	r0, 16ee8 <bt_gatt_notify_cb+0x20>
   16ee2:	7a83      	ldrb	r3, [r0, #10]
   16ee4:	2b07      	cmp	r3, #7
   16ee6:	d15c      	bne.n	16fa2 <bt_gatt_notify_cb+0xda>
	data.attr = params->attr;
   16ee8:	6868      	ldr	r0, [r5, #4]
   16eea:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16eec:	f7ff fde8 	bl	16ac0 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   16ef0:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16ef2:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   16ef6:	b33a      	cbz	r2, 16f48 <bt_gatt_notify_cb+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16ef8:	a905      	add	r1, sp, #20
   16efa:	9102      	str	r1, [sp, #8]
   16efc:	492b      	ldr	r1, [pc, #172]	; (16fac <bt_gatt_notify_cb+0xe4>)
   16efe:	9101      	str	r1, [sp, #4]
   16f00:	2101      	movs	r1, #1
	found->attr = NULL;
   16f02:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16f04:	9100      	str	r1, [sp, #0]
   16f06:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   16f0a:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16f0c:	f7ff fe08 	bl	16b20 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   16f10:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   16f12:	b91b      	cbnz	r3, 16f1c <bt_gatt_notify_cb+0x54>
			return -ENOENT;
   16f14:	f06f 0001 	mvn.w	r0, #1
}
   16f18:	b00b      	add	sp, #44	; 0x2c
   16f1a:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   16f1c:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   16f1e:	9b05      	ldr	r3, [sp, #20]
   16f20:	6818      	ldr	r0, [r3, #0]
   16f22:	2300      	movs	r3, #0
   16f24:	f88d 3010 	strb.w	r3, [sp, #16]
   16f28:	a904      	add	r1, sp, #16
   16f2a:	f642 0303 	movw	r3, #10243	; 0x2803
   16f2e:	f8ad 3012 	strh.w	r3, [sp, #18]
   16f32:	f009 fb36 	bl	205a2 <bt_uuid_cmp>
   16f36:	b970      	cbnz	r0, 16f56 <bt_gatt_notify_cb+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   16f38:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   16f3a:	68c3      	ldr	r3, [r0, #12]
   16f3c:	799b      	ldrb	r3, [r3, #6]
   16f3e:	06db      	lsls	r3, r3, #27
   16f40:	d405      	bmi.n	16f4e <bt_gatt_notify_cb+0x86>
			return -EINVAL;
   16f42:	f06f 0015 	mvn.w	r0, #21
   16f46:	e7e7      	b.n	16f18 <bt_gatt_notify_cb+0x50>
		if (!data.handle) {
   16f48:	2800      	cmp	r0, #0
   16f4a:	d1e8      	bne.n	16f1e <bt_gatt_notify_cb+0x56>
   16f4c:	e7e2      	b.n	16f14 <bt_gatt_notify_cb+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   16f4e:	f00b f964 	bl	2221a <bt_gatt_attr_value_handle>
   16f52:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   16f56:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   16f5a:	b12c      	cbz	r4, 16f68 <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
   16f5c:	4601      	mov	r1, r0
   16f5e:	462a      	mov	r2, r5
   16f60:	4620      	mov	r0, r4
   16f62:	f00b f9d8 	bl	22316 <gatt_notify>
   16f66:	e7d7      	b.n	16f18 <bt_gatt_notify_cb+0x50>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16f68:	f642 1202 	movw	r2, #10498	; 0x2902
   16f6c:	f8ad 2012 	strh.w	r2, [sp, #18]
   16f70:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   16f72:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16f76:	9202      	str	r2, [sp, #8]
   16f78:	4a0d      	ldr	r2, [pc, #52]	; (16fb0 <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
   16f7a:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   16f7c:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16f7e:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   16f82:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16f86:	aa04      	add	r2, sp, #16
   16f88:	4623      	mov	r3, r4
   16f8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   16f8e:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16f90:	f88d 4010 	strb.w	r4, [sp, #16]
   16f94:	f7ff fdc4 	bl	16b20 <bt_gatt_foreach_attr_type>
	return data.err;
   16f98:	9807      	ldr	r0, [sp, #28]
   16f9a:	e7bd      	b.n	16f18 <bt_gatt_notify_cb+0x50>
		return -EAGAIN;
   16f9c:	f06f 000a 	mvn.w	r0, #10
   16fa0:	e7ba      	b.n	16f18 <bt_gatt_notify_cb+0x50>
		return -ENOTCONN;
   16fa2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16fa6:	e7b7      	b.n	16f18 <bt_gatt_notify_cb+0x50>
   16fa8:	20000394 	.word	0x20000394
   16fac:	00021cc5 	.word	0x00021cc5
   16fb0:	00016fb5 	.word	0x00016fb5

00016fb4 <notify_cb>:
{
   16fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16fb6:	4b32      	ldr	r3, [pc, #200]	; (17080 <notify_cb+0xcc>)
{
   16fb8:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16fba:	6882      	ldr	r2, [r0, #8]
   16fbc:	429a      	cmp	r2, r3
{
   16fbe:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16fc0:	d12e      	bne.n	17020 <notify_cb+0x6c>
	ccc = attr->user_data;
   16fc2:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   16fc4:	4b2f      	ldr	r3, [pc, #188]	; (17084 <notify_cb+0xd0>)
   16fc6:	429f      	cmp	r7, r3
   16fc8:	d11a      	bne.n	17000 <notify_cb+0x4c>
   16fca:	4d2f      	ldr	r5, [pc, #188]	; (17088 <notify_cb+0xd4>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   16fcc:	2300      	movs	r3, #0
   16fce:	2207      	movs	r2, #7
   16fd0:	4669      	mov	r1, sp
   16fd2:	1c68      	adds	r0, r5, #1
   16fd4:	9300      	str	r3, [sp, #0]
   16fd6:	f8cd 3003 	str.w	r3, [sp, #3]
   16fda:	f009 fa90 	bl	204fe <memcmp>
   16fde:	b178      	cbz	r0, 17000 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   16fe0:	4629      	mov	r1, r5
   16fe2:	2207      	movs	r2, #7
   16fe4:	f811 0b01 	ldrb.w	r0, [r1], #1
   16fe8:	f7fe fcde 	bl	159a8 <bt_conn_lookup_state_le>
			if (!conn) {
   16fec:	b9e0      	cbnz	r0, 17028 <notify_cb+0x74>
				sc = (struct sc_data *)data->ind_params->data;
   16fee:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   16ff0:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   16ff2:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   16ff4:	f811 0b01 	ldrb.w	r0, [r1], #1
   16ff8:	8853      	ldrh	r3, [r2, #2]
   16ffa:	8812      	ldrh	r2, [r2, #0]
   16ffc:	f00b f88c 	bl	22118 <sc_save>
		if (cfg->value != data->type) {
   17000:	893a      	ldrh	r2, [r7, #8]
   17002:	89a3      	ldrh	r3, [r4, #12]
   17004:	429a      	cmp	r2, r3
   17006:	d10b      	bne.n	17020 <notify_cb+0x6c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   17008:	4639      	mov	r1, r7
   1700a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1700e:	f7fe fcad 	bl	1596c <bt_conn_lookup_addr_le>
		if (!conn) {
   17012:	4605      	mov	r5, r0
   17014:	b120      	cbz	r0, 17020 <notify_cb+0x6c>
		if (conn->state != BT_CONN_CONNECTED) {
   17016:	7a83      	ldrb	r3, [r0, #10]
   17018:	2b07      	cmp	r3, #7
   1701a:	d008      	beq.n	1702e <notify_cb+0x7a>
			bt_conn_unref(conn);
   1701c:	f009 ffab 	bl	20f76 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   17020:	2701      	movs	r7, #1
}
   17022:	4638      	mov	r0, r7
   17024:	b003      	add	sp, #12
   17026:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   17028:	f009 ffa5 	bl	20f76 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1702c:	e7e8      	b.n	17000 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1702e:	697b      	ldr	r3, [r7, #20]
   17030:	b123      	cbz	r3, 1703c <notify_cb+0x88>
   17032:	4631      	mov	r1, r6
   17034:	4798      	blx	r3
   17036:	b908      	cbnz	r0, 1703c <notify_cb+0x88>
			bt_conn_unref(conn);
   17038:	4628      	mov	r0, r5
   1703a:	e7ef      	b.n	1701c <notify_cb+0x68>
		if (bt_gatt_check_perm(conn, attr,
   1703c:	2214      	movs	r2, #20
   1703e:	4631      	mov	r1, r6
   17040:	4628      	mov	r0, r5
   17042:	f00b f945 	bl	222d0 <bt_gatt_check_perm>
   17046:	4607      	mov	r7, r0
   17048:	2800      	cmp	r0, #0
   1704a:	d1e9      	bne.n	17020 <notify_cb+0x6c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   1704c:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   1704e:	88a1      	ldrh	r1, [r4, #4]
   17050:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   17052:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   17054:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   17056:	d10f      	bne.n	17078 <notify_cb+0xc4>
			err = gatt_indicate(conn, data->handle,
   17058:	f7ff fe3a 	bl	16cd0 <gatt_indicate>
			if (err == 0) {
   1705c:	4606      	mov	r6, r0
   1705e:	b918      	cbnz	r0, 17068 <notify_cb+0xb4>
				data->ind_params->_ref++;
   17060:	6922      	ldr	r2, [r4, #16]
   17062:	7d93      	ldrb	r3, [r2, #22]
   17064:	3301      	adds	r3, #1
   17066:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   17068:	4628      	mov	r0, r5
   1706a:	f009 ff84 	bl	20f76 <bt_conn_unref>
		if (err < 0) {
   1706e:	2e00      	cmp	r6, #0
   17070:	dbd7      	blt.n	17022 <notify_cb+0x6e>
		data->err = 0;
   17072:	2300      	movs	r3, #0
   17074:	60a3      	str	r3, [r4, #8]
   17076:	e7d3      	b.n	17020 <notify_cb+0x6c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   17078:	f00b f94d 	bl	22316 <gatt_notify>
   1707c:	4606      	mov	r6, r0
   1707e:	e7f3      	b.n	17068 <notify_cb+0xb4>
   17080:	0002202d 	.word	0x0002202d
   17084:	200007a8 	.word	0x200007a8
   17088:	200035a4 	.word	0x200035a4

0001708c <update_ccc>:
{
   1708c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1708e:	4b24      	ldr	r3, [pc, #144]	; (17120 <update_ccc+0x94>)
	struct bt_conn *conn = data->conn;
   17090:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   17092:	6882      	ldr	r2, [r0, #8]
   17094:	429a      	cmp	r2, r3
{
   17096:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17098:	d13f      	bne.n	1711a <update_ccc+0x8e>
	ccc = attr->user_data;
   1709a:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   1709c:	8933      	ldrh	r3, [r6, #8]
   1709e:	2b00      	cmp	r3, #0
   170a0:	d03b      	beq.n	1711a <update_ccc+0x8e>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   170a2:	4632      	mov	r2, r6
   170a4:	4620      	mov	r0, r4
   170a6:	f812 1b01 	ldrb.w	r1, [r2], #1
   170aa:	f009 ffab 	bl	21004 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   170ae:	2800      	cmp	r0, #0
   170b0:	d033      	beq.n	1711a <update_ccc+0x8e>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   170b2:	222a      	movs	r2, #42	; 0x2a
   170b4:	4629      	mov	r1, r5
   170b6:	4620      	mov	r0, r4
   170b8:	f00b f90a 	bl	222d0 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   170bc:	2803      	cmp	r0, #3
   170be:	d02c      	beq.n	1711a <update_ccc+0x8e>
		gatt_ccc_changed(attr, ccc);
   170c0:	4631      	mov	r1, r6
   170c2:	4628      	mov	r0, r5
   170c4:	f00a fde1 	bl	21c8a <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   170c8:	4b16      	ldr	r3, [pc, #88]	; (17124 <update_ccc+0x98>)
   170ca:	429e      	cmp	r6, r3
   170cc:	d125      	bne.n	1711a <update_ccc+0x8e>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   170ce:	7a20      	ldrb	r0, [r4, #8]
   170d0:	f104 0188 	add.w	r1, r4, #136	; 0x88
   170d4:	f7ff fc0e 	bl	168f4 <find_sc_cfg>
	if (!cfg) {
   170d8:	b1f8      	cbz	r0, 1711a <update_ccc+0x8e>
	if (!(cfg->data.start || cfg->data.end)) {
   170da:	8902      	ldrh	r2, [r0, #8]
   170dc:	8943      	ldrh	r3, [r0, #10]
   170de:	ea53 0102 	orrs.w	r1, r3, r2
   170e2:	d01a      	beq.n	1711a <update_ccc+0x8e>
	index = bt_conn_index(conn);
   170e4:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   170e6:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   170ea:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   170ee:	f7fe fb77 	bl	157e0 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   170f2:	490d      	ldr	r1, [pc, #52]	; (17128 <update_ccc+0x9c>)
   170f4:	4a0d      	ldr	r2, [pc, #52]	; (1712c <update_ccc+0xa0>)
   170f6:	2318      	movs	r3, #24
   170f8:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   170fc:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   170fe:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   17100:	4a0b      	ldr	r2, [pc, #44]	; (17130 <update_ccc+0xa4>)
   17102:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   17104:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17106:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1710a:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1710c:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1710e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   17112:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17114:	4620      	mov	r0, r4
   17116:	f7ff fe25 	bl	16d64 <bt_gatt_indicate>
}
   1711a:	2001      	movs	r0, #1
   1711c:	b002      	add	sp, #8
   1711e:	bd70      	pop	{r4, r5, r6, pc}
   17120:	0002202d 	.word	0x0002202d
   17124:	200007a8 	.word	0x200007a8
   17128:	200027f8 	.word	0x200027f8
   1712c:	00024684 	.word	0x00024684
   17130:	000221ad 	.word	0x000221ad

00017134 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   17134:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   17136:	4a06      	ldr	r2, [pc, #24]	; (17150 <bt_gatt_connected+0x1c>)
	data.conn = conn;
   17138:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1713a:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1713c:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1713e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   17142:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   17146:	f00b f8b6 	bl	222b6 <bt_gatt_foreach_attr>
	if (err) {
		BT_WARN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1714a:	b003      	add	sp, #12
   1714c:	f85d fb04 	ldr.w	pc, [sp], #4
   17150:	0001708d 	.word	0x0001708d

00017154 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   17154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   17156:	4b08      	ldr	r3, [pc, #32]	; (17178 <bt_gatt_att_max_mtu_changed+0x24>)
   17158:	681c      	ldr	r4, [r3, #0]
   1715a:	4605      	mov	r5, r0
   1715c:	460e      	mov	r6, r1
   1715e:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   17160:	b14c      	cbz	r4, 17176 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   17162:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   17166:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   17168:	b11b      	cbz	r3, 17172 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1716a:	463a      	mov	r2, r7
   1716c:	4631      	mov	r1, r6
   1716e:	4628      	mov	r0, r5
   17170:	4798      	blx	r3
	return node->next;
   17172:	6864      	ldr	r4, [r4, #4]
   17174:	e7f4      	b.n	17160 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   17176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17178:	200027dc 	.word	0x200027dc

0001717c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1717c:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1717e:	4603      	mov	r3, r0
   17180:	4a0f      	ldr	r2, [pc, #60]	; (171c0 <bt_gatt_disconnected+0x44>)
{
   17182:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   17184:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17188:	2001      	movs	r0, #1
   1718a:	f00b f894 	bl	222b6 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1718e:	4620      	mov	r0, r4
   17190:	f7ff fb92 	bl	168b8 <find_cf_cfg>
	if (!cfg) {
   17194:	4605      	mov	r5, r0
   17196:	b188      	cbz	r0, 171bc <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17198:	f104 0688 	add.w	r6, r4, #136	; 0x88
   1719c:	7a20      	ldrb	r0, [r4, #8]
   1719e:	4631      	mov	r1, r6
   171a0:	f009 fccf 	bl	20b42 <bt_addr_le_is_bonded>
   171a4:	b920      	cbnz	r0, 171b0 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   171a6:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   171a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   171ac:	f00a be08 	b.w	21dc0 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   171b0:	4631      	mov	r1, r6
   171b2:	1c68      	adds	r0, r5, #1
}
   171b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   171b8:	f00a bd88 	b.w	21ccc <bt_addr_le_copy>
}
   171bc:	bd70      	pop	{r4, r5, r6, pc}
   171be:	bf00      	nop
   171c0:	00016915 	.word	0x00016915

000171c4 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   171c4:	4b04      	ldr	r3, [pc, #16]	; (171d8 <bt_smp_accept+0x14>)
   171c6:	6818      	ldr	r0, [r3, #0]
   171c8:	b918      	cbnz	r0, 171d2 <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
   171ca:	4a04      	ldr	r2, [pc, #16]	; (171dc <bt_smp_accept+0x18>)
   171cc:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
   171ce:	600b      	str	r3, [r1, #0]

		return 0;
   171d0:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   171d2:	f06f 000b 	mvn.w	r0, #11
}
   171d6:	4770      	bx	lr
   171d8:	20002814 	.word	0x20002814
   171dc:	00024788 	.word	0x00024788

000171e0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   171e0:	4b02      	ldr	r3, [pc, #8]	; (171ec <net_buf_pool_get+0xc>)
   171e2:	222c      	movs	r2, #44	; 0x2c
   171e4:	fb02 3000 	mla	r0, r2, r0, r3
   171e8:	4770      	bx	lr
   171ea:	bf00      	nop
   171ec:	20000bc8 	.word	0x20000bc8

000171f0 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   171f0:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   171f2:	4b06      	ldr	r3, [pc, #24]	; (1720c <net_buf_id+0x1c>)
   171f4:	212c      	movs	r1, #44	; 0x2c
   171f6:	fb01 3302 	mla	r3, r1, r2, r3
   171fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   171fc:	7f1b      	ldrb	r3, [r3, #28]
   171fe:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   17200:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   17202:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   17206:	fbb0 f0f3 	udiv	r0, r0, r3
   1720a:	4770      	bx	lr
   1720c:	20000bc8 	.word	0x20000bc8

00017210 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   17210:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   17212:	4b0a      	ldr	r3, [pc, #40]	; (1723c <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17214:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   17216:	242c      	movs	r4, #44	; 0x2c
   17218:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1721c:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1721e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17220:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   17222:	6823      	ldr	r3, [r4, #0]
   17224:	429a      	cmp	r2, r3
   17226:	bf94      	ite	ls
   17228:	600a      	strls	r2, [r1, #0]
   1722a:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1722c:	f7ff ffe0 	bl	171f0 <net_buf_id>
   17230:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   17234:	fb02 3000 	mla	r0, r2, r0, r3
   17238:	bd10      	pop	{r4, pc}
   1723a:	bf00      	nop
   1723c:	20000bc8 	.word	0x20000bc8

00017240 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   17240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17244:	4605      	mov	r5, r0
   17246:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   17248:	4610      	mov	r0, r2
   1724a:	4619      	mov	r1, r3
{
   1724c:	4691      	mov	r9, r2
   1724e:	4698      	mov	r8, r3
   17250:	4617      	mov	r7, r2
   17252:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   17254:	f00c faa4 	bl	237a0 <sys_clock_timeout_end_calc>
   17258:	4682      	mov	sl, r0
   1725a:	468b      	mov	fp, r1
	__asm__ volatile(
   1725c:	f04f 0340 	mov.w	r3, #64	; 0x40
   17260:	f3ef 8111 	mrs	r1, BASEPRI
   17264:	f383 8812 	msr	BASEPRI_MAX, r3
   17268:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1726c:	8b6b      	ldrh	r3, [r5, #26]
   1726e:	2b00      	cmp	r3, #0
   17270:	d05a      	beq.n	17328 <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   17272:	8b2a      	ldrh	r2, [r5, #24]
   17274:	429a      	cmp	r2, r3
   17276:	d93e      	bls.n	172f6 <net_buf_alloc_len+0xb6>
   17278:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1727a:	2200      	movs	r2, #0
   1727c:	2300      	movs	r3, #0
   1727e:	4628      	mov	r0, r5
   17280:	f003 fee6 	bl	1b050 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   17284:	9900      	ldr	r1, [sp, #0]
   17286:	4604      	mov	r4, r0
   17288:	2800      	cmp	r0, #0
   1728a:	d034      	beq.n	172f6 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   1728c:	f381 8811 	msr	BASEPRI, r1
   17290:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   17294:	9b01      	ldr	r3, [sp, #4]
   17296:	2b00      	cmp	r3, #0
   17298:	d056      	beq.n	17348 <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1729a:	ea58 0309 	orrs.w	r3, r8, r9
   1729e:	d00f      	beq.n	172c0 <net_buf_alloc_len+0x80>
   172a0:	f1b8 3fff 	cmp.w	r8, #4294967295
   172a4:	bf08      	it	eq
   172a6:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   172aa:	d009      	beq.n	172c0 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   172ac:	f004 fda8 	bl	1be00 <sys_clock_tick_get>
   172b0:	ebba 0700 	subs.w	r7, sl, r0
   172b4:	eb6b 0601 	sbc.w	r6, fp, r1
   172b8:	2e00      	cmp	r6, #0
   172ba:	bfbc      	itt	lt
   172bc:	2700      	movlt	r7, #0
   172be:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   172c0:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   172c2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 17360 <net_buf_alloc_len+0x120>
   172c6:	f04f 092c 	mov.w	r9, #44	; 0x2c
   172ca:	fb09 8303 	mla	r3, r9, r3, r8
   172ce:	463a      	mov	r2, r7
   172d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   172d2:	681b      	ldr	r3, [r3, #0]
   172d4:	a901      	add	r1, sp, #4
   172d6:	681d      	ldr	r5, [r3, #0]
   172d8:	4620      	mov	r0, r4
   172da:	4633      	mov	r3, r6
   172dc:	47a8      	blx	r5
   172de:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   172e0:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   172e2:	2800      	cmp	r0, #0
   172e4:	d131      	bne.n	1734a <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   172e6:	79a0      	ldrb	r0, [r4, #6]
   172e8:	4621      	mov	r1, r4
   172ea:	fb00 8009 	mla	r0, r0, r9, r8
   172ee:	f00b ffad 	bl	2324c <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   172f2:	462c      	mov	r4, r5
}
   172f4:	e024      	b.n	17340 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   172f6:	8b68      	ldrh	r0, [r5, #26]
   172f8:	1e43      	subs	r3, r0, #1
   172fa:	836b      	strh	r3, [r5, #26]
   172fc:	f381 8811 	msr	BASEPRI, r1
   17300:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   17304:	7f2a      	ldrb	r2, [r5, #28]
   17306:	f102 0417 	add.w	r4, r2, #23
   1730a:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1730e:	8b2c      	ldrh	r4, [r5, #24]
   17310:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   17312:	6aac      	ldr	r4, [r5, #40]	; 0x28
   17314:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   17318:	4811      	ldr	r0, [pc, #68]	; (17360 <net_buf_alloc_len+0x120>)
   1731a:	4b12      	ldr	r3, [pc, #72]	; (17364 <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   1731c:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   1731e:	1a2d      	subs	r5, r5, r0
   17320:	10ad      	asrs	r5, r5, #2
   17322:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   17324:	71a5      	strb	r5, [r4, #6]
		goto success;
   17326:	e7b5      	b.n	17294 <net_buf_alloc_len+0x54>
   17328:	f381 8811 	msr	BASEPRI, r1
   1732c:	f3bf 8f6f 	isb	sy
   17330:	464a      	mov	r2, r9
   17332:	4643      	mov	r3, r8
   17334:	4628      	mov	r0, r5
   17336:	f003 fe8b 	bl	1b050 <z_impl_k_queue_get>
	if (!buf) {
   1733a:	4604      	mov	r4, r0
   1733c:	2800      	cmp	r0, #0
   1733e:	d1a9      	bne.n	17294 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   17340:	4620      	mov	r0, r4
   17342:	b003      	add	sp, #12
   17344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   17348:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1734a:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1734c:	2201      	movs	r2, #1
	buf->frags = NULL;
   1734e:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   17350:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   17352:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   17354:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   17356:	6923      	ldr	r3, [r4, #16]
   17358:	81e2      	strh	r2, [r4, #14]
   1735a:	60a3      	str	r3, [r4, #8]
	return buf;
   1735c:	e7f0      	b.n	17340 <net_buf_alloc_len+0x100>
   1735e:	bf00      	nop
   17360:	20000bc8 	.word	0x20000bc8
   17364:	ba2e8ba3 	.word	0xba2e8ba3

00017368 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   17368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1736c:	4d16      	ldr	r5, [pc, #88]	; (173c8 <net_buf_unref+0x60>)
   1736e:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   17370:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   17372:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   17374:	b90c      	cbnz	r4, 1737a <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   17376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1737a:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1737c:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   17380:	3b01      	subs	r3, #1
   17382:	b2db      	uxtb	r3, r3
   17384:	7123      	strb	r3, [r4, #4]
   17386:	2b00      	cmp	r3, #0
   17388:	d1f5      	bne.n	17376 <net_buf_unref+0xe>
		if (buf->__buf) {
   1738a:	6921      	ldr	r1, [r4, #16]
   1738c:	b159      	cbz	r1, 173a6 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1738e:	7963      	ldrb	r3, [r4, #5]
   17390:	079b      	lsls	r3, r3, #30
   17392:	d407      	bmi.n	173a4 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17394:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   17396:	fb07 5303 	mla	r3, r7, r3, r5
   1739a:	4620      	mov	r0, r4
   1739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1739e:	681b      	ldr	r3, [r3, #0]
   173a0:	689b      	ldr	r3, [r3, #8]
   173a2:	4798      	blx	r3
			buf->__buf = NULL;
   173a4:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   173a6:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   173a8:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   173aa:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   173ae:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   173b0:	6a1b      	ldr	r3, [r3, #32]
   173b2:	b11b      	cbz	r3, 173bc <net_buf_unref+0x54>
			pool->destroy(buf);
   173b4:	4620      	mov	r0, r4
   173b6:	4798      	blx	r3
{
   173b8:	4644      	mov	r4, r8
   173ba:	e7db      	b.n	17374 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   173bc:	4621      	mov	r1, r4
   173be:	fb00 5007 	mla	r0, r0, r7, r5
   173c2:	f00b ff43 	bl	2324c <k_queue_prepend>
}
   173c6:	e7f7      	b.n	173b8 <net_buf_unref+0x50>
   173c8:	20000bc8 	.word	0x20000bc8

000173cc <adc_nrfx_channel_setup>:
	nrf_saadc_channel_config_t config = {
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
   173cc:	7908      	ldrb	r0, [r1, #4]
{
   173ce:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   173d0:	f000 041f 	and.w	r4, r0, #31

	if (channel_id >= SAADC_CH_NUM) {
   173d4:	2c07      	cmp	r4, #7
   173d6:	d81f      	bhi.n	17418 <adc_nrfx_channel_setup+0x4c>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
   173d8:	780b      	ldrb	r3, [r1, #0]
   173da:	2b09      	cmp	r3, #9
   173dc:	d81c      	bhi.n	17418 <adc_nrfx_channel_setup+0x4c>
   173de:	e8df f003 	tbb	[pc, r3]
   173e2:	0606      	.short	0x0606
   173e4:	1b060606 	.word	0x1b060606
   173e8:	201b1e05 	.word	0x201b1e05
		break;
	case ADC_GAIN_1_2:
		config.gain = NRF_SAADC_GAIN1_2;
		break;
	case ADC_GAIN_1:
		config.gain = NRF_SAADC_GAIN1;
   173ec:	2305      	movs	r3, #5
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
   173ee:	784a      	ldrb	r2, [r1, #1]
   173f0:	2a03      	cmp	r2, #3
   173f2:	d018      	beq.n	17426 <adc_nrfx_channel_setup+0x5a>
   173f4:	2a04      	cmp	r2, #4
   173f6:	d10f      	bne.n	17418 <adc_nrfx_channel_setup+0x4c>
	nrf_saadc_channel_config_t config = {
   173f8:	2500      	movs	r5, #0
	default:
		LOG_ERR("Selected ADC reference is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->acquisition_time) {
   173fa:	884a      	ldrh	r2, [r1, #2]
   173fc:	f244 060a 	movw	r6, #16394	; 0x400a
   17400:	42b2      	cmp	r2, r6
   17402:	d044      	beq.n	1748e <adc_nrfx_channel_setup+0xc2>
   17404:	d811      	bhi.n	1742a <adc_nrfx_channel_setup+0x5e>
   17406:	f244 0603 	movw	r6, #16387	; 0x4003
   1740a:	42b2      	cmp	r2, r6
   1740c:	d03b      	beq.n	17486 <adc_nrfx_channel_setup+0xba>
   1740e:	f244 0605 	movw	r6, #16389	; 0x4005
   17412:	42b2      	cmp	r2, r6
   17414:	d039      	beq.n	1748a <adc_nrfx_channel_setup+0xbe>
   17416:	b3d2      	cbz	r2, 1748e <adc_nrfx_channel_setup+0xc2>
   17418:	f06f 0015 	mvn.w	r0, #21
   1741c:	e032      	b.n	17484 <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
   1741e:	2306      	movs	r3, #6
		break;
   17420:	e7e5      	b.n	173ee <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
   17422:	2307      	movs	r3, #7
		break;
   17424:	e7e3      	b.n	173ee <adc_nrfx_channel_setup+0x22>
	switch (channel_cfg->reference) {
   17426:	2501      	movs	r5, #1
   17428:	e7e7      	b.n	173fa <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
   1742a:	f244 0614 	movw	r6, #16404	; 0x4014
   1742e:	42b2      	cmp	r2, r6
   17430:	d02f      	beq.n	17492 <adc_nrfx_channel_setup+0xc6>
   17432:	f244 0628 	movw	r6, #16424	; 0x4028
   17436:	42b2      	cmp	r2, r6
   17438:	d02d      	beq.n	17496 <adc_nrfx_channel_setup+0xca>
   1743a:	f244 060f 	movw	r6, #16399	; 0x400f
   1743e:	42b2      	cmp	r2, r6
   17440:	d1ea      	bne.n	17418 <adc_nrfx_channel_setup+0x4c>
	case ADC_ACQ_TIME_DEFAULT:
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 10):
		config.acq_time = NRF_SAADC_ACQTIME_10US;
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 15):
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   17442:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   17444:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   17448:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1744a:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   1744e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   17452:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   17456:	0122      	lsls	r2, r4, #4
   17458:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1745c:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   17460:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   17462:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   17466:	0123      	lsls	r3, r4, #4
   17468:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1746c:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   17470:	798a      	ldrb	r2, [r1, #6]
   17472:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   17476:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   1747a:	4b08      	ldr	r3, [pc, #32]	; (1749c <adc_nrfx_channel_setup+0xd0>)
   1747c:	441c      	add	r4, r3
   1747e:	794b      	ldrb	r3, [r1, #5]
   17480:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8

	return 0;
}
   17484:	bd70      	pop	{r4, r5, r6, pc}
	nrf_saadc_channel_config_t config = {
   17486:	2200      	movs	r2, #0
   17488:	e7dc      	b.n	17444 <adc_nrfx_channel_setup+0x78>
	switch (channel_cfg->acquisition_time) {
   1748a:	2201      	movs	r2, #1
   1748c:	e7da      	b.n	17444 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   1748e:	2202      	movs	r2, #2
   17490:	e7d8      	b.n	17444 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   17492:	2204      	movs	r2, #4
   17494:	e7d6      	b.n	17444 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   17496:	2205      	movs	r2, #5
   17498:	e7d4      	b.n	17444 <adc_nrfx_channel_setup+0x78>
   1749a:	bf00      	nop
   1749c:	20000468 	.word	0x20000468

000174a0 <adc_context_start_sampling.isra.0>:
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   174a0:	4b04      	ldr	r3, [pc, #16]	; (174b4 <adc_context_start_sampling.isra.0+0x14>)
   174a2:	2201      	movs	r2, #1
   174a4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   174a8:	b108      	cbz	r0, 174ae <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   174aa:	60da      	str	r2, [r3, #12]
}
   174ac:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   174ae:	601a      	str	r2, [r3, #0]
   174b0:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   174b2:	4770      	bx	lr
   174b4:	40007000 	.word	0x40007000

000174b8 <start_read.constprop.0>:
	}

	return 0;
}

static int start_read(const struct device *dev,
   174b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   174ba:	4605      	mov	r5, r0
		      const struct adc_sequence *sequence)
{
	int error;
	uint32_t selected_channels = sequence->channels;
   174bc:	6840      	ldr	r0, [r0, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
   174be:	b910      	cbnz	r0, 174c6 <start_read.constprop.0+0xe>
	switch (sequence->resolution) {
   174c0:	f06f 0015 	mvn.w	r0, #21
   174c4:	e09d      	b.n	17602 <start_read.constprop.0+0x14a>
	if (!selected_channels ||
   174c6:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
   174ca:	d1f9      	bne.n	174c0 <start_read.constprop.0+0x8>
    p_reg->CH[channel].PSELP = pselp;
   174cc:	4c57      	ldr	r4, [pc, #348]	; (1762c <start_read.constprop.0+0x174>)
	do {
		if (selected_channels & BIT(channel_id)) {
			/* Signal an error if a selected channel has not been
			 * configured yet.
			 */
			if (m_data.positive_inputs[channel_id] == 0U) {
   174ce:	4f58      	ldr	r7, [pc, #352]	; (17630 <start_read.constprop.0+0x178>)
	active_channels = 0U;
   174d0:	461a      	mov	r2, r3
		if (selected_channels & BIT(channel_id)) {
   174d2:	fa20 f103 	lsr.w	r1, r0, r3
   174d6:	f011 0101 	ands.w	r1, r1, #1
   174da:	d033      	beq.n	17544 <start_read.constprop.0+0x8c>
			if (m_data.positive_inputs[channel_id] == 0U) {
   174dc:	18f9      	adds	r1, r7, r3
   174de:	f891 c0a8 	ldrb.w	ip, [r1, #168]	; 0xa8
   174e2:	f1bc 0f00 	cmp.w	ip, #0
   174e6:	d0eb      	beq.n	174c0 <start_read.constprop.0+0x8>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   174e8:	eb04 1e03 	add.w	lr, r4, r3, lsl #4
			 * event is not generated) after switching to a single
			 * channel sampling and back. Thus, when oversampling
			 * is not used (hence, the multiple channel sampling is
			 * possible), the burst mode have to be deactivated.
			 */
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   174ec:	7c6e      	ldrb	r6, [r5, #17]
   174ee:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
   174f2:	3e00      	subs	r6, #0
   174f4:	bf18      	it	ne
   174f6:	2601      	movne	r6, #1
   174f8:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
   174fc:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
   17500:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   17504:	f103 0151 	add.w	r1, r3, #81	; 0x51
   17508:	0109      	lsls	r1, r1, #4
					NRF_SAADC_BURST_DISABLED));
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				m_data.positive_inputs[channel_id]);
			++active_channels;
   1750a:	3201      	adds	r2, #1
   1750c:	f844 c001 	str.w	ip, [r4, r1]
   17510:	b2d2      	uxtb	r2, r2
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);
   17512:	3301      	adds	r3, #1
   17514:	2b08      	cmp	r3, #8
   17516:	d1dc      	bne.n	174d2 <start_read.constprop.0+0x1a>
	switch (sequence->resolution) {
   17518:	7c2b      	ldrb	r3, [r5, #16]
   1751a:	3b08      	subs	r3, #8
   1751c:	2b06      	cmp	r3, #6
   1751e:	d8cf      	bhi.n	174c0 <start_read.constprop.0+0x8>
   17520:	a101      	add	r1, pc, #4	; (adr r1, 17528 <start_read.constprop.0+0x70>)
   17522:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   17526:	bf00      	nop
   17528:	0001760f 	.word	0x0001760f
   1752c:	000174c1 	.word	0x000174c1
   17530:	0001754f 	.word	0x0001754f
   17534:	000174c1 	.word	0x000174c1
   17538:	00017607 	.word	0x00017607
   1753c:	000174c1 	.word	0x000174c1
   17540:	0001760b 	.word	0x0001760b
   17544:	f103 0651 	add.w	r6, r3, #81	; 0x51
   17548:	0136      	lsls	r6, r6, #4
   1754a:	51a1      	str	r1, [r4, r6]
}
   1754c:	e7e1      	b.n	17512 <start_read.constprop.0+0x5a>
   1754e:	2301      	movs	r3, #1
    p_reg->RESOLUTION = resolution;
   17550:	4936      	ldr	r1, [pc, #216]	; (1762c <start_read.constprop.0+0x174>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   17552:	2a01      	cmp	r2, #1
   17554:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_resolution(sequence);
	if (error) {
		return error;
	}

	error = set_oversampling(sequence, active_channels);
   17558:	7c6b      	ldrb	r3, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1755a:	d95a      	bls.n	17612 <start_read.constprop.0+0x15a>
   1755c:	2b00      	cmp	r3, #0
   1755e:	d1af      	bne.n	174c0 <start_read.constprop.0+0x8>
    p_reg->OVERSAMPLE = oversample;
   17560:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   17564:	6829      	ldr	r1, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   17566:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   17568:	b111      	cbz	r1, 17570 <start_read.constprop.0+0xb8>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   1756a:	8989      	ldrh	r1, [r1, #12]
   1756c:	fb01 3303 	mla	r3, r1, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
   17570:	68e9      	ldr	r1, [r5, #12]
   17572:	4299      	cmp	r1, r3
   17574:	d357      	bcc.n	17626 <start_read.constprop.0+0x16e>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   17576:	4b2d      	ldr	r3, [pc, #180]	; (1762c <start_read.constprop.0+0x174>)
   17578:	68a9      	ldr	r1, [r5, #8]
   1757a:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   1757e:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
   17580:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   17584:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   17586:	4c2a      	ldr	r4, [pc, #168]	; (17630 <start_read.constprop.0+0x178>)
   17588:	f104 067c 	add.w	r6, r4, #124	; 0x7c
   1758c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1758e:	683b      	ldr	r3, [r7, #0]
   17590:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
   17592:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
   17594:	2600      	movs	r6, #0
   17596:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
   17598:	4627      	mov	r7, r4
   1759a:	2b00      	cmp	r3, #0
   1759c:	d03c      	beq.n	17618 <start_read.constprop.0+0x160>
		ctx->options = *sequence->options;
   1759e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   175a0:	f104 0590 	add.w	r5, r4, #144	; 0x90
   175a4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   175a8:	67e5      	str	r5, [r4, #124]	; 0x7c
		ctx->sampling_index = 0U;
   175aa:	f8a4 60a0 	strh.w	r6, [r4, #160]	; 0xa0

		if (ctx->options.interval_us != 0U) {
   175ae:	b398      	cbz	r0, 17618 <start_read.constprop.0+0x160>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   175b0:	f3bf 8f5b 	dmb	ish
   175b4:	e857 3f00 	ldrex	r3, [r7]
   175b8:	e847 6200 	strex	r2, r6, [r7]
   175bc:	2a00      	cmp	r2, #0
   175be:	d1f9      	bne.n	175b4 <start_read.constprop.0+0xfc>
   175c0:	f3bf 8f5b 	dmb	ish
			return ((t * to_hz + off) / from_hz);
   175c4:	481b      	ldr	r0, [pc, #108]	; (17634 <start_read.constprop.0+0x17c>)
   175c6:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
   175ca:	4a1b      	ldr	r2, [pc, #108]	; (17638 <start_read.constprop.0+0x180>)
   175cc:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   175d0:	4631      	mov	r1, r6
   175d2:	2300      	movs	r3, #0
   175d4:	fbe7 0105 	umlal	r0, r1, r7, r5
   175d8:	f7e9 fd2c 	bl	1034 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   175dc:	2200      	movs	r2, #0
   175de:	e9cd 0100 	strd	r0, r1, [sp]
   175e2:	2300      	movs	r3, #0
   175e4:	f104 0008 	add.w	r0, r4, #8
   175e8:	f004 fc68 	bl	1bebc <z_impl_k_timer_start>
	if (ctx->asynchronous) {
   175ec:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   175f0:	b9bb      	cbnz	r3, 17622 <start_read.constprop.0+0x16a>
	return z_impl_k_sem_take(sem, timeout);
   175f2:	4812      	ldr	r0, [pc, #72]	; (1763c <start_read.constprop.0+0x184>)
   175f4:	f04f 32ff 	mov.w	r2, #4294967295
   175f8:	f04f 33ff 	mov.w	r3, #4294967295
   175fc:	f003 fd82 	bl	1b104 <z_impl_k_sem_take>
	return ctx->status;
   17600:	6f20      	ldr	r0, [r4, #112]	; 0x70

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
   17602:	b003      	add	sp, #12
   17604:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   17606:	2302      	movs	r3, #2
		break;
   17608:	e7a2      	b.n	17550 <start_read.constprop.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   1760a:	2303      	movs	r3, #3
		break;
   1760c:	e7a0      	b.n	17550 <start_read.constprop.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   1760e:	2300      	movs	r3, #0
   17610:	e79e      	b.n	17550 <start_read.constprop.0+0x98>
	switch (sequence->oversampling) {
   17612:	2b08      	cmp	r3, #8
   17614:	d9a4      	bls.n	17560 <start_read.constprop.0+0xa8>
   17616:	e753      	b.n	174c0 <start_read.constprop.0+0x8>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   17618:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
   1761c:	f7ff ff40 	bl	174a0 <adc_context_start_sampling.isra.0>
   17620:	e7e4      	b.n	175ec <start_read.constprop.0+0x134>
		return 0;
   17622:	2000      	movs	r0, #0
	return error;
   17624:	e7ed      	b.n	17602 <start_read.constprop.0+0x14a>
		return -ENOMEM;
   17626:	f06f 000b 	mvn.w	r0, #11
   1762a:	e7ea      	b.n	17602 <start_read.constprop.0+0x14a>
   1762c:	40007000 	.word	0x40007000
   17630:	20000468 	.word	0x20000468
   17634:	000f423f 	.word	0x000f423f
   17638:	000f4240 	.word	0x000f4240
   1763c:	200004c0 	.word	0x200004c0

00017640 <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(const struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
   17640:	b570      	push	{r4, r5, r6, lr}
   17642:	460c      	mov	r4, r1
   17644:	4616      	mov	r6, r2
   17646:	4d0d      	ldr	r5, [pc, #52]	; (1767c <adc_nrfx_read_async+0x3c>)
   17648:	f04f 32ff 	mov.w	r2, #4294967295
   1764c:	f04f 33ff 	mov.w	r3, #4294967295
   17650:	f105 0040 	add.w	r0, r5, #64	; 0x40
   17654:	f003 fd56 	bl	1b104 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
   17658:	2301      	movs	r3, #1
	int error;

	adc_context_lock(&m_data.ctx, true, async);
	error = start_read(dev, sequence);
   1765a:	4620      	mov	r0, r4
   1765c:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
   17660:	676e      	str	r6, [r5, #116]	; 0x74
   17662:	f7ff ff29 	bl	174b8 <start_read.constprop.0>
	if (ctx->asynchronous && (status == 0)) {
   17666:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
   1766a:	4604      	mov	r4, r0
   1766c:	b103      	cbz	r3, 17670 <adc_nrfx_read_async+0x30>
   1766e:	b110      	cbz	r0, 17676 <adc_nrfx_read_async+0x36>
	z_impl_k_sem_give(sem);
   17670:	4803      	ldr	r0, [pc, #12]	; (17680 <adc_nrfx_read_async+0x40>)
   17672:	f003 fd21 	bl	1b0b8 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
   17676:	4620      	mov	r0, r4
   17678:	bd70      	pop	{r4, r5, r6, pc}
   1767a:	bf00      	nop
   1767c:	20000468 	.word	0x20000468
   17680:	200004a8 	.word	0x200004a8

00017684 <adc_nrfx_read>:
{
   17684:	b538      	push	{r3, r4, r5, lr}
   17686:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
   17688:	4d0c      	ldr	r5, [pc, #48]	; (176bc <adc_nrfx_read+0x38>)
   1768a:	f04f 32ff 	mov.w	r2, #4294967295
   1768e:	f04f 33ff 	mov.w	r3, #4294967295
   17692:	f105 0040 	add.w	r0, r5, #64	; 0x40
   17696:	f003 fd35 	bl	1b104 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
   1769a:	2300      	movs	r3, #0
	error = start_read(dev, sequence);
   1769c:	4620      	mov	r0, r4
   1769e:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
   176a2:	676b      	str	r3, [r5, #116]	; 0x74
   176a4:	f7ff ff08 	bl	174b8 <start_read.constprop.0>
	if (ctx->asynchronous && (status == 0)) {
   176a8:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
   176ac:	4604      	mov	r4, r0
   176ae:	b103      	cbz	r3, 176b2 <adc_nrfx_read+0x2e>
   176b0:	b110      	cbz	r0, 176b8 <adc_nrfx_read+0x34>
	z_impl_k_sem_give(sem);
   176b2:	4803      	ldr	r0, [pc, #12]	; (176c0 <adc_nrfx_read+0x3c>)
   176b4:	f003 fd00 	bl	1b0b8 <z_impl_k_sem_give>
}
   176b8:	4620      	mov	r0, r4
   176ba:	bd38      	pop	{r3, r4, r5, pc}
   176bc:	20000468 	.word	0x20000468
   176c0:	200004a8 	.word	0x200004a8

000176c4 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   176c4:	4b0e      	ldr	r3, [pc, #56]	; (17700 <init_saadc+0x3c>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   176c6:	b510      	push	{r4, lr}
   176c8:	2400      	movs	r4, #0
   176ca:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   176ce:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   176d2:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   176d6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   176da:	2212      	movs	r2, #18
   176dc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   176e0:	2007      	movs	r0, #7
   176e2:	f7fb fed1 	bl	13488 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   176e6:	4622      	mov	r2, r4
   176e8:	2101      	movs	r1, #1
   176ea:	2007      	movs	r0, #7
   176ec:	f7fb fefe 	bl	134ec <z_arm_irq_priority_set>
	return sem->count;
   176f0:	4804      	ldr	r0, [pc, #16]	; (17704 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   176f2:	6c83      	ldr	r3, [r0, #72]	; 0x48
   176f4:	b913      	cbnz	r3, 176fc <init_saadc+0x38>
   176f6:	3040      	adds	r0, #64	; 0x40
   176f8:	f003 fcde 	bl	1b0b8 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   176fc:	2000      	movs	r0, #0
   176fe:	bd10      	pop	{r4, pc}
   17700:	40007000 	.word	0x40007000
   17704:	20000468 	.word	0x20000468

00017708 <saadc_irq_handler>:
{
   17708:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1770a:	4b35      	ldr	r3, [pc, #212]	; (177e0 <saadc_irq_handler+0xd8>)
   1770c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   17710:	2a00      	cmp	r2, #0
   17712:	d057      	beq.n	177c4 <saadc_irq_handler+0xbc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17714:	2200      	movs	r2, #0
   17716:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   1771a:	4c32      	ldr	r4, [pc, #200]	; (177e4 <saadc_irq_handler+0xdc>)
   1771c:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17720:	2101      	movs	r1, #1
   17722:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   17724:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   17728:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   1772a:	4625      	mov	r5, r4
   1772c:	b3db      	cbz	r3, 177a6 <saadc_irq_handler+0x9e>
		adc_sequence_callback callback = ctx->options.callback;
   1772e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
   17732:	b143      	cbz	r3, 17746 <saadc_irq_handler+0x3e>
			action = callback(dev,
   17734:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
   17738:	f104 017c 	add.w	r1, r4, #124	; 0x7c
   1773c:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   1773e:	2801      	cmp	r0, #1
   17740:	d014      	beq.n	1776c <saadc_irq_handler+0x64>
   17742:	2802      	cmp	r0, #2
   17744:	d029      	beq.n	1779a <saadc_irq_handler+0x92>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   17746:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   1774a:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
   1774e:	429a      	cmp	r2, r3
   17750:	d923      	bls.n	1779a <saadc_irq_handler+0x92>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   17752:	3301      	adds	r3, #1
   17754:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   17758:	4b21      	ldr	r3, [pc, #132]	; (177e0 <saadc_irq_handler+0xd8>)
   1775a:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   1775e:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   17762:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   17764:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   17768:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   1776c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   17770:	b92b      	cbnz	r3, 1777e <saadc_irq_handler+0x76>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
   17772:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
}
   17776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1777a:	f7ff be91 	b.w	174a0 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1777e:	f3bf 8f5b 	dmb	ish
   17782:	e855 3f00 	ldrex	r3, [r5]
   17786:	1e5a      	subs	r2, r3, #1
   17788:	e845 2100 	strex	r1, r2, [r5]
   1778c:	2900      	cmp	r1, #0
   1778e:	d1f8      	bne.n	17782 <saadc_irq_handler+0x7a>
   17790:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   17794:	2b01      	cmp	r3, #1
   17796:	dcec      	bgt.n	17772 <saadc_irq_handler+0x6a>
   17798:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   1779a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1779e:	b113      	cbz	r3, 177a6 <saadc_irq_handler+0x9e>
	z_impl_k_timer_stop(timer);
   177a0:	4811      	ldr	r0, [pc, #68]	; (177e8 <saadc_irq_handler+0xe0>)
   177a2:	f00c f834 	bl	2380e <z_impl_k_timer_stop>
	if (ctx->asynchronous) {
   177a6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   177aa:	b14b      	cbz	r3, 177c0 <saadc_irq_handler+0xb8>
		if (ctx->signal) {
   177ac:	6f60      	ldr	r0, [r4, #116]	; 0x74
   177ae:	b110      	cbz	r0, 177b6 <saadc_irq_handler+0xae>
	return z_impl_k_poll_signal_raise(sig, result);
   177b0:	2100      	movs	r1, #0
   177b2:	f004 fc31 	bl	1c018 <z_impl_k_poll_signal_raise>
	z_impl_k_sem_give(sem);
   177b6:	480d      	ldr	r0, [pc, #52]	; (177ec <saadc_irq_handler+0xe4>)
   177b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   177bc:	f003 bc7c 	b.w	1b0b8 <z_impl_k_sem_give>
   177c0:	480b      	ldr	r0, [pc, #44]	; (177f0 <saadc_irq_handler+0xe8>)
   177c2:	e7f9      	b.n	177b8 <saadc_irq_handler+0xb0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   177c4:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   177c8:	2900      	cmp	r1, #0
   177ca:	d0e5      	beq.n	17798 <saadc_irq_handler+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   177cc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   177d0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   177d4:	2201      	movs	r2, #1
   177d6:	609a      	str	r2, [r3, #8]
   177d8:	601a      	str	r2, [r3, #0]
   177da:	605a      	str	r2, [r3, #4]
}
   177dc:	e7dc      	b.n	17798 <saadc_irq_handler+0x90>
   177de:	bf00      	nop
   177e0:	40007000 	.word	0x40007000
   177e4:	20000468 	.word	0x20000468
   177e8:	20000470 	.word	0x20000470
   177ec:	200004a8 	.word	0x200004a8
   177f0:	200004c0 	.word	0x200004c0

000177f4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   177f4:	4b08      	ldr	r3, [pc, #32]	; (17818 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   177f6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   177f8:	1ac3      	subs	r3, r0, r3
{
   177fa:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   177fc:	4907      	ldr	r1, [pc, #28]	; (1781c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   177fe:	109b      	asrs	r3, r3, #2
{
   17800:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   17802:	4359      	muls	r1, r3
   17804:	4806      	ldr	r0, [pc, #24]	; (17820 <onoff_stop+0x2c>)
   17806:	2240      	movs	r2, #64	; 0x40
   17808:	f00a ff46 	bl	22698 <stop>
	notify(mgr, res);
   1780c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1780e:	4601      	mov	r1, r0
	notify(mgr, res);
   17810:	4620      	mov	r0, r4
}
   17812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   17816:	4718      	bx	r3
   17818:	200028b0 	.word	0x200028b0
   1781c:	b6db6db7 	.word	0xb6db6db7
   17820:	00023bcc 	.word	0x00023bcc

00017824 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   17824:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   17826:	4c0c      	ldr	r4, [pc, #48]	; (17858 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   17828:	4a0c      	ldr	r2, [pc, #48]	; (1785c <onoff_start+0x38>)
   1782a:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   1782c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1782e:	9300      	str	r3, [sp, #0]
{
   17830:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   17832:	460b      	mov	r3, r1
   17834:	490a      	ldr	r1, [pc, #40]	; (17860 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   17836:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   17838:	4361      	muls	r1, r4
{
   1783a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1783c:	4809      	ldr	r0, [pc, #36]	; (17864 <onoff_start+0x40>)
   1783e:	f00a ff57 	bl	226f0 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   17842:	1e01      	subs	r1, r0, #0
   17844:	da05      	bge.n	17852 <onoff_start+0x2e>
		notify(mgr, err);
   17846:	4630      	mov	r0, r6
   17848:	462b      	mov	r3, r5
	}
}
   1784a:	b002      	add	sp, #8
   1784c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   17850:	4718      	bx	r3
}
   17852:	b002      	add	sp, #8
   17854:	bd70      	pop	{r4, r5, r6, pc}
   17856:	bf00      	nop
   17858:	200028b0 	.word	0x200028b0
   1785c:	00022761 	.word	0x00022761
   17860:	b6db6db7 	.word	0xb6db6db7
   17864:	00023bcc 	.word	0x00023bcc

00017868 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   17868:	2200      	movs	r2, #0
{
   1786a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1786c:	2101      	movs	r1, #1
{
   1786e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   17870:	4610      	mov	r0, r2
   17872:	f7fb fe3b 	bl	134ec <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   17876:	480f      	ldr	r0, [pc, #60]	; (178b4 <clk_init+0x4c>)
   17878:	f002 f840 	bl	198fc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1787c:	4b0e      	ldr	r3, [pc, #56]	; (178b8 <clk_init+0x50>)
   1787e:	4298      	cmp	r0, r3
   17880:	d115      	bne.n	178ae <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   17882:	f00b fa60 	bl	22d46 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   17886:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   17888:	490c      	ldr	r1, [pc, #48]	; (178bc <clk_init+0x54>)
   1788a:	4630      	mov	r0, r6
   1788c:	f008 f90d 	bl	1faaa <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   17890:	2800      	cmp	r0, #0
   17892:	db0b      	blt.n	178ac <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
   17894:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   17896:	4909      	ldr	r1, [pc, #36]	; (178bc <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   17898:	2501      	movs	r5, #1
   1789a:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1789c:	f104 001c 	add.w	r0, r4, #28
   178a0:	f008 f903 	bl	1faaa <onoff_manager_init>
		if (err < 0) {
   178a4:	2800      	cmp	r0, #0
   178a6:	db01      	blt.n	178ac <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   178a8:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   178aa:	2000      	movs	r0, #0
}
   178ac:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   178ae:	f06f 0004 	mvn.w	r0, #4
   178b2:	e7fb      	b.n	178ac <clk_init+0x44>
   178b4:	000178f5 	.word	0x000178f5
   178b8:	0bad0000 	.word	0x0bad0000
   178bc:	000247f0 	.word	0x000247f0

000178c0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   178c0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   178c2:	230c      	movs	r3, #12
   178c4:	4809      	ldr	r0, [pc, #36]	; (178ec <clkstarted_handle.constprop.0+0x2c>)
   178c6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   178c8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   178ca:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   178cc:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   178d0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   178d2:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   178d4:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   178d6:	4418      	add	r0, r3
   178d8:	f00a fecb 	bl	22672 <set_on_state>
	if (callback) {
   178dc:	b12d      	cbz	r5, 178ea <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   178de:	4632      	mov	r2, r6
   178e0:	462b      	mov	r3, r5
   178e2:	4803      	ldr	r0, [pc, #12]	; (178f0 <clkstarted_handle.constprop.0+0x30>)
}
   178e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   178e8:	4718      	bx	r3
}
   178ea:	bd70      	pop	{r4, r5, r6, pc}
   178ec:	200028b0 	.word	0x200028b0
   178f0:	00023bcc 	.word	0x00023bcc

000178f4 <clock_event_handler>:
	switch (event) {
   178f4:	b110      	cbz	r0, 178fc <clock_event_handler+0x8>
   178f6:	2801      	cmp	r0, #1
   178f8:	d004      	beq.n	17904 <clock_event_handler+0x10>
   178fa:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   178fc:	4b03      	ldr	r3, [pc, #12]	; (1790c <clock_event_handler+0x18>)
   178fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   17900:	075b      	lsls	r3, r3, #29
   17902:	d101      	bne.n	17908 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   17904:	f7ff bfdc 	b.w	178c0 <clkstarted_handle.constprop.0>
}
   17908:	4770      	bx	lr
   1790a:	bf00      	nop
   1790c:	200028b0 	.word	0x200028b0

00017910 <generic_hfclk_start>:
{
   17910:	b508      	push	{r3, lr}
	__asm__ volatile(
   17912:	f04f 0340 	mov.w	r3, #64	; 0x40
   17916:	f3ef 8111 	mrs	r1, BASEPRI
   1791a:	f383 8812 	msr	BASEPRI_MAX, r3
   1791e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   17922:	4a12      	ldr	r2, [pc, #72]	; (1796c <generic_hfclk_start+0x5c>)
   17924:	6813      	ldr	r3, [r2, #0]
   17926:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1792a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1792e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   17930:	d00c      	beq.n	1794c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   17932:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   17936:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1793a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1793e:	f013 0301 	ands.w	r3, r3, #1
   17942:	d003      	beq.n	1794c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   17944:	480a      	ldr	r0, [pc, #40]	; (17970 <generic_hfclk_start+0x60>)
   17946:	f00a fe94 	bl	22672 <set_on_state>
			already_started = true;
   1794a:	2301      	movs	r3, #1
	__asm__ volatile(
   1794c:	f381 8811 	msr	BASEPRI, r1
   17950:	f3bf 8f6f 	isb	sy
	if (already_started) {
   17954:	b123      	cbz	r3, 17960 <generic_hfclk_start+0x50>
}
   17956:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1795a:	2000      	movs	r0, #0
   1795c:	f7ff bfb0 	b.w	178c0 <clkstarted_handle.constprop.0>
}
   17960:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   17964:	2001      	movs	r0, #1
   17966:	f001 bfb9 	b.w	198dc <nrfx_clock_start>
   1796a:	bf00      	nop
   1796c:	20002900 	.word	0x20002900
   17970:	200028f0 	.word	0x200028f0

00017974 <api_blocking_start>:
{
   17974:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   17976:	2200      	movs	r2, #0
   17978:	2301      	movs	r3, #1
   1797a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1797e:	ab04      	add	r3, sp, #16
   17980:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   17984:	4a09      	ldr	r2, [pc, #36]	; (179ac <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   17986:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1798a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1798c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   17990:	f00a fedf 	bl	22752 <api_start>
	if (err < 0) {
   17994:	2800      	cmp	r0, #0
   17996:	db05      	blt.n	179a4 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   17998:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1799c:	2300      	movs	r3, #0
   1799e:	4668      	mov	r0, sp
   179a0:	f003 fbb0 	bl	1b104 <z_impl_k_sem_take>
}
   179a4:	b007      	add	sp, #28
   179a6:	f85d fb04 	ldr.w	pc, [sp], #4
   179aa:	bf00      	nop
   179ac:	0002277f 	.word	0x0002277f

000179b0 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   179b0:	4b09      	ldr	r3, [pc, #36]	; (179d8 <generic_hfclk_stop+0x28>)
   179b2:	f3bf 8f5b 	dmb	ish
   179b6:	e853 2f00 	ldrex	r2, [r3]
   179ba:	f022 0102 	bic.w	r1, r2, #2
   179be:	e843 1000 	strex	r0, r1, [r3]
   179c2:	2800      	cmp	r0, #0
   179c4:	d1f7      	bne.n	179b6 <generic_hfclk_stop+0x6>
   179c6:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   179ca:	07d3      	lsls	r3, r2, #31
   179cc:	d402      	bmi.n	179d4 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   179ce:	2001      	movs	r0, #1
   179d0:	f00b b9b4 	b.w	22d3c <nrfx_clock_stop>
}
   179d4:	4770      	bx	lr
   179d6:	bf00      	nop
   179d8:	20002900 	.word	0x20002900

000179dc <z_nrf_clock_control_lf_on>:
{
   179dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   179de:	4928      	ldr	r1, [pc, #160]	; (17a80 <z_nrf_clock_control_lf_on+0xa4>)
   179e0:	f3bf 8f5b 	dmb	ish
   179e4:	4606      	mov	r6, r0
   179e6:	2201      	movs	r2, #1
   179e8:	e851 3f00 	ldrex	r3, [r1]
   179ec:	e841 2000 	strex	r0, r2, [r1]
   179f0:	2800      	cmp	r0, #0
   179f2:	d1f9      	bne.n	179e8 <z_nrf_clock_control_lf_on+0xc>
   179f4:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   179f8:	b933      	cbnz	r3, 17a08 <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   179fa:	4922      	ldr	r1, [pc, #136]	; (17a84 <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
   179fc:	4822      	ldr	r0, [pc, #136]	; (17a88 <z_nrf_clock_control_lf_on+0xac>)
   179fe:	604b      	str	r3, [r1, #4]
   17a00:	60cb      	str	r3, [r1, #12]
   17a02:	608a      	str	r2, [r1, #8]
   17a04:	f008 f864 	bl	1fad0 <onoff_request>
	switch (start_mode) {
   17a08:	1e73      	subs	r3, r6, #1
   17a0a:	2b01      	cmp	r3, #1
   17a0c:	d820      	bhi.n	17a50 <z_nrf_clock_control_lf_on+0x74>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   17a0e:	f00b fb75 	bl	230fc <k_is_in_isr>
   17a12:	4604      	mov	r4, r0
   17a14:	b910      	cbnz	r0, 17a1c <z_nrf_clock_control_lf_on+0x40>
	return !z_sys_post_kernel;
   17a16:	4b1d      	ldr	r3, [pc, #116]	; (17a8c <z_nrf_clock_control_lf_on+0xb0>)
	int key = isr_mode ? irq_lock() : 0;
   17a18:	781b      	ldrb	r3, [r3, #0]
   17a1a:	bb53      	cbnz	r3, 17a72 <z_nrf_clock_control_lf_on+0x96>
	__asm__ volatile(
   17a1c:	f04f 0340 	mov.w	r3, #64	; 0x40
   17a20:	f3ef 8511 	mrs	r5, BASEPRI
   17a24:	f383 8812 	msr	BASEPRI_MAX, r3
   17a28:	f3bf 8f6f 	isb	sy
   17a2c:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   17a2e:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
   17a32:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   17a36:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
   17a3a:	03d2      	lsls	r2, r2, #15
   17a3c:	d509      	bpl.n	17a52 <z_nrf_clock_control_lf_on+0x76>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   17a3e:	079b      	lsls	r3, r3, #30
   17a40:	d001      	beq.n	17a46 <z_nrf_clock_control_lf_on+0x6a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   17a42:	2e01      	cmp	r6, #1
   17a44:	d105      	bne.n	17a52 <z_nrf_clock_control_lf_on+0x76>
	if (isr_mode) {
   17a46:	b174      	cbz	r4, 17a66 <z_nrf_clock_control_lf_on+0x8a>
	__asm__ volatile(
   17a48:	f385 8811 	msr	BASEPRI, r5
   17a4c:	f3bf 8f6f 	isb	sy
}
   17a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   17a52:	b11c      	cbz	r4, 17a5c <z_nrf_clock_control_lf_on+0x80>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   17a54:	4628      	mov	r0, r5
   17a56:	f7fb fd0d 	bl	13474 <arch_cpu_atomic_idle>
}
   17a5a:	e7ea      	b.n	17a32 <z_nrf_clock_control_lf_on+0x56>
	return z_impl_k_sleep(timeout);
   17a5c:	2100      	movs	r1, #0
   17a5e:	2021      	movs	r0, #33	; 0x21
   17a60:	f004 f810 	bl	1ba84 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   17a64:	e7e5      	b.n	17a32 <z_nrf_clock_control_lf_on+0x56>
    p_reg->INTENSET = mask;
   17a66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17a6a:	2202      	movs	r2, #2
   17a6c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   17a70:	e7ee      	b.n	17a50 <z_nrf_clock_control_lf_on+0x74>
    p_reg->INTENCLR = mask;
   17a72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17a76:	2202      	movs	r2, #2
   17a78:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   17a7c:	4605      	mov	r5, r0
}
   17a7e:	e7d6      	b.n	17a2e <z_nrf_clock_control_lf_on+0x52>
   17a80:	20002904 	.word	0x20002904
   17a84:	200028a0 	.word	0x200028a0
   17a88:	200028cc 	.word	0x200028cc
   17a8c:	2000404b 	.word	0x2000404b

00017a90 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   17a90:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   17a92:	4c04      	ldr	r4, [pc, #16]	; (17aa4 <rtt_console_init+0x14>)
   17a94:	4620      	mov	r0, r4
   17a96:	f7fa fd75 	bl	12584 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   17a9a:	4620      	mov	r0, r4
   17a9c:	f7fc f88e 	bl	13bbc <__stdout_hook_install>

	return 0;
}
   17aa0:	2000      	movs	r0, #0
   17aa2:	bd10      	pop	{r4, pc}
   17aa4:	00017aa9 	.word	0x00017aa9

00017aa8 <rtt_console_out>:
{
   17aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17aaa:	4e14      	ldr	r6, [pc, #80]	; (17afc <rtt_console_out+0x54>)
	char c = (char)character;
   17aac:	f88d 0007 	strb.w	r0, [sp, #7]
{
   17ab0:	4604      	mov	r4, r0
	char c = (char)character;
   17ab2:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
   17ab4:	f3ef 8711 	mrs	r7, BASEPRI
   17ab8:	f04f 0120 	mov.w	r1, #32
   17abc:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   17ac0:	2201      	movs	r2, #1
   17ac2:	f10d 0107 	add.w	r1, sp, #7
   17ac6:	2000      	movs	r0, #0
   17ac8:	f002 ff8c 	bl	1a9e4 <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
   17acc:	f387 8811 	msr	BASEPRI, r7
		if (cnt) {
   17ad0:	b120      	cbz	r0, 17adc <rtt_console_out+0x34>
			host_present = true;
   17ad2:	2301      	movs	r3, #1
   17ad4:	7033      	strb	r3, [r6, #0]
}
   17ad6:	4620      	mov	r0, r4
   17ad8:	b003      	add	sp, #12
   17ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
   17adc:	7833      	ldrb	r3, [r6, #0]
   17ade:	2b00      	cmp	r3, #0
   17ae0:	d0f9      	beq.n	17ad6 <rtt_console_out+0x2e>
			if (max_cnt) {
   17ae2:	3d01      	subs	r5, #1
   17ae4:	d008      	beq.n	17af8 <rtt_console_out+0x50>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   17ae6:	f00b fb09 	bl	230fc <k_is_in_isr>
   17aea:	2800      	cmp	r0, #0
   17aec:	d1e2      	bne.n	17ab4 <rtt_console_out+0xc>
   17aee:	2100      	movs	r1, #0
   17af0:	2042      	movs	r0, #66	; 0x42
   17af2:	f003 ffc7 	bl	1ba84 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
   17af6:	e7dd      	b.n	17ab4 <rtt_console_out+0xc>
				host_present = false;
   17af8:	7035      	strb	r5, [r6, #0]
   17afa:	e7ec      	b.n	17ad6 <rtt_console_out+0x2e>
   17afc:	200035bd 	.word	0x200035bd

00017b00 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   17b00:	b530      	push	{r4, r5, lr}
	return port->config;
   17b02:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   17b04:	7b04      	ldrb	r4, [r0, #12]
   17b06:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   17b0a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   17b0e:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   17b12:	b085      	sub	sp, #20
   17b14:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   17b18:	d104      	bne.n	17b24 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   17b1a:	4628      	mov	r0, r5
   17b1c:	f002 fa80 	bl	1a020 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   17b20:	2000      	movs	r0, #0
   17b22:	e032      	b.n	17b8a <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
   17b24:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   17b28:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   17b2c:	d12f      	bne.n	17b8e <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   17b2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   17b32:	bf0c      	ite	eq
   17b34:	2304      	moveq	r3, #4
   17b36:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   17b38:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   17b3c:	6883      	ldr	r3, [r0, #8]
   17b3e:	fa23 f101 	lsr.w	r1, r3, r1
   17b42:	07c9      	lsls	r1, r1, #31
   17b44:	d42f      	bmi.n	17ba6 <gpio_nrfx_pin_interrupt_configure+0xa6>
   17b46:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   17b4a:	d12c      	bne.n	17ba6 <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   17b4c:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   17b4e:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   17b50:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   17b54:	4a1c      	ldr	r2, [pc, #112]	; (17bc8 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   17b56:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   17b5a:	bf18      	it	ne
   17b5c:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   17b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   17b64:	07db      	lsls	r3, r3, #31
   17b66:	d41e      	bmi.n	17ba6 <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   17b68:	f10d 0407 	add.w	r4, sp, #7
   17b6c:	4621      	mov	r1, r4
   17b6e:	4628      	mov	r0, r5
   17b70:	f002 f9ba 	bl	19ee8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   17b74:	4b15      	ldr	r3, [pc, #84]	; (17bcc <gpio_nrfx_pin_interrupt_configure+0xcc>)
   17b76:	4298      	cmp	r0, r3
   17b78:	d114      	bne.n	17ba4 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
   17b7a:	4620      	mov	r0, r4
   17b7c:	f002 fa02 	bl	19f84 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   17b80:	4b13      	ldr	r3, [pc, #76]	; (17bd0 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   17b82:	4298      	cmp	r0, r3
   17b84:	d00e      	beq.n	17ba4 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
   17b86:	f06f 000b 	mvn.w	r0, #11
}
   17b8a:	b005      	add	sp, #20
   17b8c:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   17b8e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   17b92:	d005      	beq.n	17ba0 <gpio_nrfx_pin_interrupt_configure+0xa0>
   17b94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   17b98:	bf0c      	ite	eq
   17b9a:	2302      	moveq	r3, #2
   17b9c:	2301      	movne	r3, #1
   17b9e:	e7cb      	b.n	17b38 <gpio_nrfx_pin_interrupt_configure+0x38>
   17ba0:	2303      	movs	r3, #3
   17ba2:	e7c9      	b.n	17b38 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   17ba4:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   17ba6:	2300      	movs	r3, #0
   17ba8:	4619      	mov	r1, r3
   17baa:	aa02      	add	r2, sp, #8
   17bac:	4628      	mov	r0, r5
   17bae:	f002 f875 	bl	19c9c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   17bb2:	4b07      	ldr	r3, [pc, #28]	; (17bd0 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   17bb4:	4298      	cmp	r0, r3
   17bb6:	d104      	bne.n	17bc2 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   17bb8:	2101      	movs	r1, #1
   17bba:	4628      	mov	r0, r5
   17bbc:	f002 f9e8 	bl	19f90 <nrfx_gpiote_trigger_enable>
   17bc0:	e7ae      	b.n	17b20 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   17bc2:	f06f 0004 	mvn.w	r0, #4
   17bc6:	e7e0      	b.n	17b8a <gpio_nrfx_pin_interrupt_configure+0x8a>
   17bc8:	50000300 	.word	0x50000300
   17bcc:	0bad0004 	.word	0x0bad0004
   17bd0:	0bad0000 	.word	0x0bad0000

00017bd4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   17bd4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   17bd6:	f002 f9c5 	bl	19f64 <nrfx_gpiote_is_init>
   17bda:	4604      	mov	r4, r0
   17bdc:	b968      	cbnz	r0, 17bfa <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   17bde:	f002 f999 	bl	19f14 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   17be2:	4b08      	ldr	r3, [pc, #32]	; (17c04 <gpio_nrfx_init+0x30>)
   17be4:	4298      	cmp	r0, r3
   17be6:	d10a      	bne.n	17bfe <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   17be8:	4807      	ldr	r0, [pc, #28]	; (17c08 <gpio_nrfx_init+0x34>)
   17bea:	4621      	mov	r1, r4
   17bec:	f002 f976 	bl	19edc <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   17bf0:	4622      	mov	r2, r4
   17bf2:	2105      	movs	r1, #5
   17bf4:	2006      	movs	r0, #6
   17bf6:	f7fb fc79 	bl	134ec <z_arm_irq_priority_set>
		return 0;
   17bfa:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   17bfc:	bd10      	pop	{r4, pc}
		return -EIO;
   17bfe:	f06f 0004 	mvn.w	r0, #4
   17c02:	e7fb      	b.n	17bfc <gpio_nrfx_init+0x28>
   17c04:	0bad0000 	.word	0x0bad0000
   17c08:	00017c0d 	.word	0x00017c0d

00017c0c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   17c0c:	0942      	lsrs	r2, r0, #5
{
   17c0e:	b570      	push	{r4, r5, r6, lr}
   17c10:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   17c12:	d002      	beq.n	17c1a <nrfx_gpio_handler+0xe>
   17c14:	2a01      	cmp	r2, #1
   17c16:	d015      	beq.n	17c44 <nrfx_gpio_handler+0x38>
}
   17c18:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   17c1a:	4e0b      	ldr	r6, [pc, #44]	; (17c48 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   17c1c:	6932      	ldr	r2, [r6, #16]
   17c1e:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   17c20:	2900      	cmp	r1, #0
   17c22:	d0f9      	beq.n	17c18 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   17c24:	f003 031f 	and.w	r3, r3, #31
   17c28:	2501      	movs	r5, #1
   17c2a:	680c      	ldr	r4, [r1, #0]
   17c2c:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   17c2e:	688a      	ldr	r2, [r1, #8]
   17c30:	402a      	ands	r2, r5
   17c32:	d002      	beq.n	17c3a <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   17c34:	684b      	ldr	r3, [r1, #4]
   17c36:	4630      	mov	r0, r6
   17c38:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   17c3a:	2c00      	cmp	r4, #0
   17c3c:	d0ec      	beq.n	17c18 <nrfx_gpio_handler+0xc>
   17c3e:	4621      	mov	r1, r4
   17c40:	6824      	ldr	r4, [r4, #0]
   17c42:	e7f4      	b.n	17c2e <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   17c44:	4e01      	ldr	r6, [pc, #4]	; (17c4c <nrfx_gpio_handler+0x40>)
   17c46:	e7e9      	b.n	17c1c <nrfx_gpio_handler+0x10>
   17c48:	00023be4 	.word	0x00023be4
   17c4c:	00023bfc 	.word	0x00023bfc

00017c50 <gpio_nrfx_pin_configure>:
{
   17c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   17c54:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   17c56:	7b3b      	ldrb	r3, [r7, #12]
   17c58:	f001 051f 	and.w	r5, r1, #31
{
   17c5c:	b085      	sub	sp, #20
   17c5e:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   17c60:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   17c64:	4614      	mov	r4, r2
   17c66:	b9ca      	cbnz	r2, 17c9c <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   17c68:	a902      	add	r1, sp, #8
   17c6a:	4628      	mov	r0, r5
   17c6c:	f002 f93c 	bl	19ee8 <nrfx_gpiote_channel_get>
   17c70:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   17c72:	4628      	mov	r0, r5
   17c74:	f002 f9fc 	bl	1a070 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   17c78:	4b4a      	ldr	r3, [pc, #296]	; (17da4 <gpio_nrfx_pin_configure+0x154>)
   17c7a:	4298      	cmp	r0, r3
   17c7c:	d004      	beq.n	17c88 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   17c7e:	f06f 0004 	mvn.w	r0, #4
}
   17c82:	b005      	add	sp, #20
   17c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   17c88:	4284      	cmp	r4, r0
   17c8a:	d105      	bne.n	17c98 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   17c8c:	f89d 0008 	ldrb.w	r0, [sp, #8]
   17c90:	f002 f972 	bl	19f78 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   17c94:	42a0      	cmp	r0, r4
   17c96:	d1f2      	bne.n	17c7e <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   17c98:	2000      	movs	r0, #0
   17c9a:	e7f2      	b.n	17c82 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   17c9c:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   17ca0:	f10d 0103 	add.w	r1, sp, #3
   17ca4:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   17ca6:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   17caa:	f002 f91d 	bl	19ee8 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   17cae:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   17cb0:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   17cb2:	aa02      	add	r2, sp, #8
   17cb4:	4649      	mov	r1, r9
   17cb6:	4628      	mov	r0, r5
   17cb8:	f001 fff0 	bl	19c9c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   17cbc:	4b39      	ldr	r3, [pc, #228]	; (17da4 <gpio_nrfx_pin_configure+0x154>)
   17cbe:	4298      	cmp	r0, r3
   17cc0:	d002      	beq.n	17cc8 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   17cc2:	f06f 0015 	mvn.w	r0, #21
   17cc6:	e7dc      	b.n	17c82 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   17cc8:	4580      	cmp	r8, r0
   17cca:	d103      	bne.n	17cd4 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   17ccc:	f89d 0003 	ldrb.w	r0, [sp, #3]
   17cd0:	f002 f952 	bl	19f78 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   17cd4:	03a3      	lsls	r3, r4, #14
   17cd6:	d551      	bpl.n	17d7c <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   17cd8:	f240 6306 	movw	r3, #1542	; 0x606
   17cdc:	4023      	ands	r3, r4
   17cde:	f240 2206 	movw	r2, #518	; 0x206
   17ce2:	4293      	cmp	r3, r2
   17ce4:	d03b      	beq.n	17d5e <gpio_nrfx_pin_configure+0x10e>
   17ce6:	d80c      	bhi.n	17d02 <gpio_nrfx_pin_configure+0xb2>
   17ce8:	2b06      	cmp	r3, #6
   17cea:	d015      	beq.n	17d18 <gpio_nrfx_pin_configure+0xc8>
   17cec:	d804      	bhi.n	17cf8 <gpio_nrfx_pin_configure+0xa8>
   17cee:	b19b      	cbz	r3, 17d18 <gpio_nrfx_pin_configure+0xc8>
   17cf0:	2b02      	cmp	r3, #2
   17cf2:	d1e6      	bne.n	17cc2 <gpio_nrfx_pin_configure+0x72>
   17cf4:	2304      	movs	r3, #4
   17cf6:	e00f      	b.n	17d18 <gpio_nrfx_pin_configure+0xc8>
   17cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   17cfc:	d1e1      	bne.n	17cc2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   17cfe:	2301      	movs	r3, #1
   17d00:	e00a      	b.n	17d18 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   17d02:	f240 4202 	movw	r2, #1026	; 0x402
   17d06:	4293      	cmp	r3, r2
   17d08:	d02b      	beq.n	17d62 <gpio_nrfx_pin_configure+0x112>
   17d0a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
   17d0e:	d02a      	beq.n	17d66 <gpio_nrfx_pin_configure+0x116>
   17d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   17d14:	d1d5      	bne.n	17cc2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   17d16:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   17d18:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   17d1c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   17d20:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   17d24:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   17d26:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   17d2a:	bf54      	ite	pl
   17d2c:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   17d30:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   17d32:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   17d34:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   17d38:	d517      	bpl.n	17d6a <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   17d3a:	687b      	ldr	r3, [r7, #4]
   17d3c:	2101      	movs	r1, #1
   17d3e:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   17d42:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   17d46:	2200      	movs	r2, #0
   17d48:	a901      	add	r1, sp, #4
   17d4a:	4628      	mov	r0, r5
   17d4c:	f002 f854 	bl	19df8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   17d50:	4b14      	ldr	r3, [pc, #80]	; (17da4 <gpio_nrfx_pin_configure+0x154>)
   17d52:	4298      	cmp	r0, r3
   17d54:	bf14      	ite	ne
   17d56:	f06f 0015 	mvnne.w	r0, #21
   17d5a:	2000      	moveq	r0, #0
   17d5c:	e791      	b.n	17c82 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   17d5e:	2307      	movs	r3, #7
   17d60:	e7da      	b.n	17d18 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
   17d62:	2305      	movs	r3, #5
   17d64:	e7d8      	b.n	17d18 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
   17d66:	2303      	movs	r3, #3
   17d68:	e7d6      	b.n	17d18 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   17d6a:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   17d6c:	bf41      	itttt	mi
   17d6e:	687b      	ldrmi	r3, [r7, #4]
   17d70:	2101      	movmi	r1, #1
   17d72:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   17d76:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   17d7a:	e7e4      	b.n	17d46 <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
   17d7c:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   17d7e:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   17d82:	bf54      	ite	pl
   17d84:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   17d88:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   17d8a:	461a      	mov	r2, r3
   17d8c:	a901      	add	r1, sp, #4
   17d8e:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   17d90:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   17d94:	f001 ff82 	bl	19c9c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   17d98:	4b02      	ldr	r3, [pc, #8]	; (17da4 <gpio_nrfx_pin_configure+0x154>)
   17d9a:	4298      	cmp	r0, r3
   17d9c:	f43f af7c 	beq.w	17c98 <gpio_nrfx_pin_configure+0x48>
   17da0:	e78f      	b.n	17cc2 <gpio_nrfx_pin_configure+0x72>
   17da2:	bf00      	nop
   17da4:	0bad0000 	.word	0x0bad0000

00017da8 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
   17da8:	b508      	push	{r3, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   17daa:	6903      	ldr	r3, [r0, #16]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   17dac:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
   17db0:	f002 fd7e 	bl	1a8b0 <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twim_bus_recover(dev_data->twim_config.scl,
					       dev_data->twim_config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   17db4:	4b03      	ldr	r3, [pc, #12]	; (17dc4 <i2c_nrfx_twim_recover_bus+0x1c>)
   17db6:	4298      	cmp	r0, r3
}
   17db8:	bf14      	ite	ne
   17dba:	f06f 000f 	mvnne.w	r0, #15
   17dbe:	2000      	moveq	r0, #0
   17dc0:	bd08      	pop	{r3, pc}
   17dc2:	bf00      	nop
   17dc4:	0bad0000 	.word	0x0bad0000

00017dc8 <init_twim>:
{
   17dc8:	b510      	push	{r4, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   17dca:	6904      	ldr	r4, [r0, #16]
	nrfx_err_t result = nrfx_twim_init(&dev_config->twim,
   17dcc:	4a08      	ldr	r2, [pc, #32]	; (17df0 <init_twim+0x28>)
   17dce:	6840      	ldr	r0, [r0, #4]
   17dd0:	4623      	mov	r3, r4
   17dd2:	f104 0130 	add.w	r1, r4, #48	; 0x30
   17dd6:	f002 fa4b 	bl	1a270 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   17dda:	4b06      	ldr	r3, [pc, #24]	; (17df4 <init_twim+0x2c>)
   17ddc:	4298      	cmp	r0, r3
	dev_data->twim_initialized = true;
   17dde:	bf03      	ittte	eq
   17de0:	2301      	moveq	r3, #1
   17de2:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
	return 0;
   17de6:	2000      	moveq	r0, #0
		return -EIO;
   17de8:	f06f 0004 	mvnne.w	r0, #4
}
   17dec:	bd10      	pop	{r4, pc}
   17dee:	bf00      	nop
   17df0:	00017df9 	.word	0x00017df9
   17df4:	0bad0000 	.word	0x0bad0000

00017df8 <event_handler>:
	switch (p_event->type) {
   17df8:	7803      	ldrb	r3, [r0, #0]
   17dfa:	2b01      	cmp	r3, #1
   17dfc:	d008      	beq.n	17e10 <event_handler+0x18>
   17dfe:	2b02      	cmp	r3, #2
   17e00:	d008      	beq.n	17e14 <event_handler+0x1c>
   17e02:	b94b      	cbnz	r3, 17e18 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   17e04:	4b05      	ldr	r3, [pc, #20]	; (17e1c <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   17e06:	644b      	str	r3, [r1, #68]	; 0x44
	z_impl_k_sem_give(sem);
   17e08:	f101 0018 	add.w	r0, r1, #24
   17e0c:	f003 b954 	b.w	1b0b8 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   17e10:	4b03      	ldr	r3, [pc, #12]	; (17e20 <event_handler+0x28>)
   17e12:	e7f8      	b.n	17e06 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   17e14:	4b03      	ldr	r3, [pc, #12]	; (17e24 <event_handler+0x2c>)
   17e16:	e7f6      	b.n	17e06 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   17e18:	4b03      	ldr	r3, [pc, #12]	; (17e28 <event_handler+0x30>)
   17e1a:	e7f4      	b.n	17e06 <event_handler+0xe>
   17e1c:	0bad0000 	.word	0x0bad0000
   17e20:	0bae0001 	.word	0x0bae0001
   17e24:	0bae0002 	.word	0x0bae0002
   17e28:	0bad0001 	.word	0x0bad0001

00017e2c <i2c_nrfx_twim_transfer>:
{
   17e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   17e30:	6847      	ldr	r7, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   17e32:	6906      	ldr	r6, [r0, #16]
{
   17e34:	b089      	sub	sp, #36	; 0x24
   17e36:	4698      	mov	r8, r3
   17e38:	4605      	mov	r5, r0
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   17e3a:	893b      	ldrh	r3, [r7, #8]
   17e3c:	9300      	str	r3, [sp, #0]
{
   17e3e:	460c      	mov	r4, r1
   17e40:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
   17e42:	2100      	movs	r1, #0
   17e44:	2214      	movs	r2, #20
   17e46:	a803      	add	r0, sp, #12
	uint8_t *msg_buf = dev_data->msg_buf;
   17e48:	f8d6 9048 	ldr.w	r9, [r6, #72]	; 0x48
	nrfx_twim_xfer_desc_t cur_xfer = {
   17e4c:	f008 fb8b 	bl	20566 <memset>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   17e50:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
	nrfx_twim_xfer_desc_t cur_xfer = {
   17e54:	f88d 800d 	strb.w	r8, [sp, #13]
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   17e58:	b1bb      	cbz	r3, 17e8a <i2c_nrfx_twim_transfer+0x5e>
	return z_impl_k_sem_take(sem, timeout);
   17e5a:	f04f 32ff 	mov.w	r2, #4294967295
   17e5e:	f04f 33ff 	mov.w	r3, #4294967295
   17e62:	4630      	mov	r0, r6
   17e64:	f003 f94e 	bl	1b104 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   17e68:	f106 0a18 	add.w	sl, r6, #24
   17e6c:	2200      	movs	r2, #0
   17e6e:	2300      	movs	r3, #0
   17e70:	4650      	mov	r0, sl
   17e72:	f003 f947 	bl	1b104 <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
   17e76:	4638      	mov	r0, r7
   17e78:	f002 fa5c 	bl	1a334 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   17e7c:	f04f 0800 	mov.w	r8, #0
	uint16_t msg_buf_used = 0;
   17e80:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
   17e82:	45d8      	cmp	r8, fp
   17e84:	d309      	bcc.n	17e9a <i2c_nrfx_twim_transfer+0x6e>
   17e86:	2400      	movs	r4, #0
   17e88:	e051      	b.n	17f2e <i2c_nrfx_twim_transfer+0x102>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   17e8a:	4628      	mov	r0, r5
   17e8c:	f7ff ff9c 	bl	17dc8 <init_twim>
   17e90:	2800      	cmp	r0, #0
   17e92:	dae2      	bge.n	17e5a <i2c_nrfx_twim_transfer+0x2e>
		return -EIO;
   17e94:	f06f 0404 	mvn.w	r4, #4
   17e98:	e04f      	b.n	17f3a <i2c_nrfx_twim_transfer+0x10e>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   17e9a:	7a21      	ldrb	r1, [r4, #8]
   17e9c:	070a      	lsls	r2, r1, #28
   17e9e:	f100 808f 	bmi.w	17fc0 <i2c_nrfx_twim_transfer+0x194>
		bool concat_next = ((i + 1) < num_msgs)
   17ea2:	f108 0801 	add.w	r8, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   17ea6:	45d8      	cmp	r8, fp
   17ea8:	6862      	ldr	r2, [r4, #4]
   17eaa:	d20a      	bcs.n	17ec2 <i2c_nrfx_twim_transfer+0x96>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   17eac:	078b      	lsls	r3, r1, #30
   17eae:	d408      	bmi.n	17ec2 <i2c_nrfx_twim_transfer+0x96>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   17eb0:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   17eb2:	ea81 0003 	eor.w	r0, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   17eb6:	f000 0001 	and.w	r0, r0, #1
   17eba:	f003 0304 	and.w	r3, r3, #4
   17ebe:	4303      	orrs	r3, r0
   17ec0:	d016      	beq.n	17ef0 <i2c_nrfx_twim_transfer+0xc4>
		if (concat_next || (msg_buf_used != 0)) {
   17ec2:	b1bd      	cbz	r5, 17ef4 <i2c_nrfx_twim_transfer+0xc8>
				&& ((msgs[i].flags & I2C_MSG_READ)
   17ec4:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   17ec6:	f8dd c000 	ldr.w	ip, [sp]
   17eca:	18a8      	adds	r0, r5, r2
   17ecc:	4560      	cmp	r0, ip
   17ece:	d87a      	bhi.n	17fc6 <i2c_nrfx_twim_transfer+0x19a>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   17ed0:	07c8      	lsls	r0, r1, #31
   17ed2:	d406      	bmi.n	17ee2 <i2c_nrfx_twim_transfer+0xb6>
				memcpy(msg_buf + msg_buf_used,
   17ed4:	6821      	ldr	r1, [r4, #0]
   17ed6:	9301      	str	r3, [sp, #4]
   17ed8:	eb09 0005 	add.w	r0, r9, r5
   17edc:	f008 fb38 	bl	20550 <memcpy>
   17ee0:	9b01      	ldr	r3, [sp, #4]
			msg_buf_used += msgs[i].len;
   17ee2:	6862      	ldr	r2, [r4, #4]
   17ee4:	4415      	add	r5, r2
   17ee6:	b2ad      	uxth	r5, r5
		if (concat_next) {
   17ee8:	2b00      	cmp	r3, #0
   17eea:	d037      	beq.n	17f5c <i2c_nrfx_twim_transfer+0x130>
   17eec:	340c      	adds	r4, #12
   17eee:	e7c8      	b.n	17e82 <i2c_nrfx_twim_transfer+0x56>
				&& ((msgs[i].flags & I2C_MSG_READ)
   17ef0:	2301      	movs	r3, #1
   17ef2:	e7e8      	b.n	17ec6 <i2c_nrfx_twim_transfer+0x9a>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   17ef4:	07c9      	lsls	r1, r1, #31
   17ef6:	d524      	bpl.n	17f42 <i2c_nrfx_twim_transfer+0x116>
			cur_xfer.p_primary_buf = msgs[i].buf;
   17ef8:	6823      	ldr	r3, [r4, #0]
   17efa:	9306      	str	r3, [sp, #24]
			cur_xfer.primary_length = msgs[i].len;
   17efc:	6863      	ldr	r3, [r4, #4]
   17efe:	9304      	str	r3, [sp, #16]
   17f00:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   17f02:	7a23      	ldrb	r3, [r4, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   17f04:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   17f08:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   17f0c:	f88d 200c 	strb.w	r2, [sp, #12]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   17f10:	a903      	add	r1, sp, #12
   17f12:	bf0c      	ite	eq
   17f14:	2220      	moveq	r2, #32
   17f16:	2200      	movne	r2, #0
   17f18:	4638      	mov	r0, r7
   17f1a:	f002 fa7d 	bl	1a418 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   17f1e:	4b2e      	ldr	r3, [pc, #184]	; (17fd8 <i2c_nrfx_twim_transfer+0x1ac>)
   17f20:	4298      	cmp	r0, r3
   17f22:	d021      	beq.n	17f68 <i2c_nrfx_twim_transfer+0x13c>
			if (res == NRFX_ERROR_BUSY) {
   17f24:	330b      	adds	r3, #11
   17f26:	4298      	cmp	r0, r3
   17f28:	d053      	beq.n	17fd2 <i2c_nrfx_twim_transfer+0x1a6>
			ret = -EIO;
   17f2a:	f06f 0404 	mvn.w	r4, #4
	nrfx_twim_disable(&dev_config->twim);
   17f2e:	4638      	mov	r0, r7
   17f30:	f002 fa10 	bl	1a354 <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
   17f34:	4630      	mov	r0, r6
   17f36:	f003 f8bf 	bl	1b0b8 <z_impl_k_sem_give>
}
   17f3a:	4620      	mov	r0, r4
   17f3c:	b009      	add	sp, #36	; 0x24
   17f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			   !nrfx_is_in_ram(msgs[i].buf)) {
   17f42:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   17f44:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   17f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   17f4c:	d0d4      	beq.n	17ef8 <i2c_nrfx_twim_transfer+0xcc>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   17f4e:	897b      	ldrh	r3, [r7, #10]
   17f50:	4293      	cmp	r3, r2
   17f52:	d33b      	bcc.n	17fcc <i2c_nrfx_twim_transfer+0x1a0>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
   17f54:	4648      	mov	r0, r9
   17f56:	f008 fafb 	bl	20550 <memcpy>
			msg_buf_used = msgs[i].len;
   17f5a:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
   17f5c:	2d00      	cmp	r5, #0
   17f5e:	d0cb      	beq.n	17ef8 <i2c_nrfx_twim_transfer+0xcc>
			cur_xfer.p_primary_buf = msg_buf;
   17f60:	f8cd 9018 	str.w	r9, [sp, #24]
			cur_xfer.primary_length = msg_buf_used;
   17f64:	9504      	str	r5, [sp, #16]
   17f66:	e7cc      	b.n	17f02 <i2c_nrfx_twim_transfer+0xd6>
	return z_impl_k_sem_take(sem, timeout);
   17f68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   17f6c:	2300      	movs	r3, #0
   17f6e:	4650      	mov	r0, sl
   17f70:	f003 f8c8 	bl	1b104 <z_impl_k_sem_take>
		if (ret != 0) {
   17f74:	b138      	cbz	r0, 17f86 <i2c_nrfx_twim_transfer+0x15a>
			nrfx_twim_disable(&dev_config->twim);
   17f76:	4638      	mov	r0, r7
   17f78:	f002 f9ec 	bl	1a354 <nrfx_twim_disable>
   17f7c:	e9d6 010c 	ldrd	r0, r1, [r6, #48]	; 0x30
   17f80:	f002 fc96 	bl	1a8b0 <nrfx_twi_twim_bus_recover>
   17f84:	e7d1      	b.n	17f2a <i2c_nrfx_twim_transfer+0xfe>
		res = dev_data->res;
   17f86:	6c73      	ldr	r3, [r6, #68]	; 0x44
		if (res != NRFX_SUCCESS) {
   17f88:	4a13      	ldr	r2, [pc, #76]	; (17fd8 <i2c_nrfx_twim_transfer+0x1ac>)
   17f8a:	4293      	cmp	r3, r2
   17f8c:	d1cd      	bne.n	17f2a <i2c_nrfx_twim_transfer+0xfe>
		if ((msgs[i].flags & I2C_MSG_READ)
   17f8e:	7a23      	ldrb	r3, [r4, #8]
   17f90:	07db      	lsls	r3, r3, #31
   17f92:	d401      	bmi.n	17f98 <i2c_nrfx_twim_transfer+0x16c>
		msg_buf_used = 0;
   17f94:	2500      	movs	r5, #0
   17f96:	e7a9      	b.n	17eec <i2c_nrfx_twim_transfer+0xc0>
		    && cur_xfer.p_primary_buf == msg_buf) {
   17f98:	9b06      	ldr	r3, [sp, #24]
   17f9a:	4599      	cmp	r9, r3
   17f9c:	d1fa      	bne.n	17f94 <i2c_nrfx_twim_transfer+0x168>
   17f9e:	4623      	mov	r3, r4
   17fa0:	e008      	b.n	17fb4 <i2c_nrfx_twim_transfer+0x188>
				msg_buf_used -= msgs[j].len;
   17fa2:	1aa9      	subs	r1, r5, r2
				memcpy(msgs[j].buf,
   17fa4:	68d8      	ldr	r0, [r3, #12]
   17fa6:	9301      	str	r3, [sp, #4]
				msg_buf_used -= msgs[j].len;
   17fa8:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
   17faa:	fa19 f181 	uxtah	r1, r9, r1
   17fae:	f008 facf 	bl	20550 <memcpy>
				j--;
   17fb2:	9b01      	ldr	r3, [sp, #4]
			while (msg_buf_used >= msgs[j].len) {
   17fb4:	685a      	ldr	r2, [r3, #4]
   17fb6:	4295      	cmp	r5, r2
   17fb8:	f1a3 030c 	sub.w	r3, r3, #12
   17fbc:	d2f1      	bcs.n	17fa2 <i2c_nrfx_twim_transfer+0x176>
   17fbe:	e7e9      	b.n	17f94 <i2c_nrfx_twim_transfer+0x168>
			ret = -ENOTSUP;
   17fc0:	f06f 0485 	mvn.w	r4, #133	; 0x85
   17fc4:	e7b3      	b.n	17f2e <i2c_nrfx_twim_transfer+0x102>
				ret = -ENOSPC;
   17fc6:	f06f 041b 	mvn.w	r4, #27
   17fca:	e7b0      	b.n	17f2e <i2c_nrfx_twim_transfer+0x102>
				ret = -EINVAL;
   17fcc:	f06f 0415 	mvn.w	r4, #21
   17fd0:	e7ad      	b.n	17f2e <i2c_nrfx_twim_transfer+0x102>
				ret = -EBUSY;
   17fd2:	f06f 040f 	mvn.w	r4, #15
   17fd6:	e7aa      	b.n	17f2e <i2c_nrfx_twim_transfer+0x102>
   17fd8:	0bad0000 	.word	0x0bad0000

00017fdc <mpr_channel_get>:

	__ASSERT_NO_MSG(chan == SENSOR_CHAN_PRESS);

	uint64_t value;

	mpr_convert_reg(&data->reg_val, &value);
   17fdc:	6903      	ldr	r3, [r0, #16]
	if (*reg > MPR_OUTPUT_MIN) {
   17fde:	4811      	ldr	r0, [pc, #68]	; (18024 <mpr_channel_get+0x48>)
   17fe0:	6859      	ldr	r1, [r3, #4]
   17fe2:	4281      	cmp	r1, r0
{
   17fe4:	b570      	push	{r4, r5, r6, lr}
   17fe6:	4616      	mov	r6, r2
	if (*reg > MPR_OUTPUT_MIN) {
   17fe8:	d919      	bls.n	1801e <mpr_channel_get+0x42>
		*value = (uint64_t)(*reg - MPR_OUTPUT_MIN) * (MPR_P_MAX - MPR_P_MIN);
   17fea:	1a09      	subs	r1, r1, r0
		*value *= MPR_CONVERSION_FACTOR;
   17fec:	480e      	ldr	r0, [pc, #56]	; (18028 <mpr_channel_get+0x4c>)
		*value /= MPR_OUTPUT_RANGE;
   17fee:	4a0f      	ldr	r2, [pc, #60]	; (1802c <mpr_channel_get+0x50>)
   17ff0:	2300      	movs	r3, #0
   17ff2:	fba1 0100 	umull	r0, r1, r1, r0
   17ff6:	f7e9 f81d 	bl	1034 <__aeabi_uldivmod>
   17ffa:	4605      	mov	r5, r0
   17ffc:	460c      	mov	r4, r1

	val->val1 = value / 1000000;
   17ffe:	4a0c      	ldr	r2, [pc, #48]	; (18030 <mpr_channel_get+0x54>)
   18000:	2300      	movs	r3, #0
   18002:	4628      	mov	r0, r5
   18004:	4621      	mov	r1, r4
   18006:	f7e9 f815 	bl	1034 <__aeabi_uldivmod>
	val->val2 = value % 1000000;
   1800a:	4621      	mov	r1, r4
	val->val1 = value / 1000000;
   1800c:	6030      	str	r0, [r6, #0]
	val->val2 = value % 1000000;
   1800e:	4a08      	ldr	r2, [pc, #32]	; (18030 <mpr_channel_get+0x54>)
   18010:	4628      	mov	r0, r5
   18012:	2300      	movs	r3, #0
   18014:	f7e9 f80e 	bl	1034 <__aeabi_uldivmod>

	return 0;
}
   18018:	2000      	movs	r0, #0
	val->val2 = value % 1000000;
   1801a:	6072      	str	r2, [r6, #4]
}
   1801c:	bd70      	pop	{r4, r5, r6, pc}
		*value = MPR_P_MIN;
   1801e:	2500      	movs	r5, #0
   18020:	462c      	mov	r4, r5
   18022:	e7ec      	b.n	17ffe <mpr_channel_get+0x22>
   18024:	0019999a 	.word	0x0019999a
   18028:	0a46241d 	.word	0x0a46241d
   1802c:	00cccccc 	.word	0x00cccccc
   18030:	000f4240 	.word	0x000f4240

00018034 <mpr_sample_fetch>:
{
   18034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t write_buf[] = { MPR_OUTPUT_MEASUREMENT_COMMAND, 0x00, 0x00 };
   18038:	4b28      	ldr	r3, [pc, #160]	; (180dc <mpr_sample_fetch+0xa8>)
	const struct mpr_config *cfg = dev->config;
   1803a:	6846      	ldr	r6, [r0, #4]
	uint8_t write_buf[] = { MPR_OUTPUT_MEASUREMENT_COMMAND, 0x00, 0x00 };
   1803c:	8819      	ldrh	r1, [r3, #0]
   1803e:	789b      	ldrb	r3, [r3, #2]
	struct mpr_data *data = dev->data;
   18040:	6905      	ldr	r5, [r0, #16]
{
   18042:	b087      	sub	sp, #28
	uint8_t write_buf[] = { MPR_OUTPUT_MEASUREMENT_COMMAND, 0x00, 0x00 };
   18044:	aa01      	add	r2, sp, #4
   18046:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t read_buf[4] = { 0x0 };
   1804a:	2300      	movs	r3, #0
   1804c:	9302      	str	r3, [sp, #8]
	uint8_t write_buf[] = { MPR_OUTPUT_MEASUREMENT_COMMAND, 0x00, 0x00 };
   1804e:	f8ad 1004 	strh.w	r1, [sp, #4]
	int rc = i2c_write(data->i2c_master, write_buf, sizeof(write_buf),
   18052:	6828      	ldr	r0, [r5, #0]
   18054:	88b3      	ldrh	r3, [r6, #4]
	msg.buf = (uint8_t *)buf;
   18056:	9203      	str	r2, [sp, #12]
	msg.len = num_bytes;
   18058:	2403      	movs	r4, #3
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1805a:	2202      	movs	r2, #2
	msg.len = num_bytes;
   1805c:	9404      	str	r4, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1805e:	f88d 2014 	strb.w	r2, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   18062:	6882      	ldr	r2, [r0, #8]
   18064:	a903      	add	r1, sp, #12
   18066:	6897      	ldr	r7, [r2, #8]
   18068:	2201      	movs	r2, #1
   1806a:	47b8      	blx	r7
	if (rc < 0) {
   1806c:	2800      	cmp	r0, #0
   1806e:	db26      	blt.n	180be <mpr_sample_fetch+0x8a>
	msg.buf = buf;
   18070:	af02      	add	r7, sp, #8
	msg.len = num_bytes;
   18072:	f04f 0804 	mov.w	r8, #4
	return z_impl_k_sleep(timeout);
   18076:	2100      	movs	r1, #0
   18078:	20a4      	movs	r0, #164	; 0xa4
   1807a:	f003 fd03 	bl	1ba84 <z_impl_k_sleep>
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1807e:	2203      	movs	r2, #3
		rc = i2c_read(data->i2c_master, read_buf, sizeof(read_buf),
   18080:	6828      	ldr	r0, [r5, #0]
   18082:	88b3      	ldrh	r3, [r6, #4]
   18084:	f88d 2014 	strb.w	r2, [sp, #20]
	msg.len = num_bytes;
   18088:	e9cd 7803 	strd	r7, r8, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1808c:	6882      	ldr	r2, [r0, #8]
   1808e:	a903      	add	r1, sp, #12
   18090:	f8d2 9008 	ldr.w	r9, [r2, #8]
   18094:	2201      	movs	r2, #1
   18096:	47c8      	blx	r9
		if (rc < 0) {
   18098:	2800      	cmp	r0, #0
   1809a:	db10      	blt.n	180be <mpr_sample_fetch+0x8a>
		if (!(*read_buf & MPR_STATUS_MASK_POWER_ON)
   1809c:	f89d 0008 	ldrb.w	r0, [sp, #8]
   180a0:	f000 0344 	and.w	r3, r0, #68	; 0x44
   180a4:	2b40      	cmp	r3, #64	; 0x40
   180a6:	d108      	bne.n	180ba <mpr_sample_fetch+0x86>
			|| (*read_buf & MPR_STATUS_MASK_MATH_SATURATION)) {
   180a8:	07c3      	lsls	r3, r0, #31
   180aa:	d406      	bmi.n	180ba <mpr_sample_fetch+0x86>
		if (!(*read_buf & MPR_STATUS_MASK_BUSY)) {
   180ac:	f010 0020 	ands.w	r0, r0, #32
   180b0:	d008      	beq.n	180c4 <mpr_sample_fetch+0x90>
	for (; retries > 0; retries--) {
   180b2:	3c01      	subs	r4, #1
   180b4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   180b8:	d1dd      	bne.n	18076 <mpr_sample_fetch+0x42>
			return -EIO;
   180ba:	f06f 0004 	mvn.w	r0, #4
}
   180be:	b007      	add	sp, #28
   180c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			| (read_buf[2] << 8)
   180c4:	f89d 300a 	ldrb.w	r3, [sp, #10]
	data->reg_val = (read_buf[1] << 16)
   180c8:	f89d 2009 	ldrb.w	r2, [sp, #9]
			| (read_buf[2] << 8)
   180cc:	021b      	lsls	r3, r3, #8
   180ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
			|  read_buf[3];
   180d2:	f89d 200b 	ldrb.w	r2, [sp, #11]
   180d6:	4313      	orrs	r3, r2
	data->reg_val = (read_buf[1] << 16)
   180d8:	606b      	str	r3, [r5, #4]
	return mpr_read_reg(dev);
   180da:	e7f0      	b.n	180be <mpr_sample_fetch+0x8a>
   180dc:	00023f90 	.word	0x00023f90

000180e0 <shtcx_read_words>:
			 shtcx_i2c_address(dev));
}

static int shtcx_read_words(const struct device *dev, uint16_t cmd, uint16_t *data,
		     uint16_t num_words, uint16_t max_duration_us)
{
   180e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct shtcx_config *cfg = dev->config;
   180e4:	6846      	ldr	r6, [r0, #4]
{
   180e6:	b088      	sub	sp, #32
   180e8:	4604      	mov	r4, r0
	uint32_t raw_len = num_words * (SHTCX_WORD_LEN + SHTCX_CRC8_LEN);
	uint16_t temp16;
	uint8_t rx_buf[SHTCX_MAX_READ_LEN];
	int dst = 0;

	status = shtcx_write_command(dev, cmd);
   180ea:	4630      	mov	r0, r6
{
   180ec:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
   180f0:	4617      	mov	r7, r2
	uint32_t raw_len = num_words * (SHTCX_WORD_LEN + SHTCX_CRC8_LEN);
   180f2:	eb03 0843 	add.w	r8, r3, r3, lsl #1
	status = shtcx_write_command(dev, cmd);
   180f6:	f00a fc64 	bl	229c2 <shtcx_write_command.isra.0>
	if (status != 0) {
   180fa:	2800      	cmp	r0, #0
   180fc:	d13f      	bne.n	1817e <shtcx_read_words+0x9e>
		LOG_DBG("Failed to initiate read");
		return -EIO;
	}

	if (!cfg->clock_stretching) {
   180fe:	79f1      	ldrb	r1, [r6, #7]
   18100:	b951      	cbnz	r1, 18118 <shtcx_read_words+0x38>
   18102:	4820      	ldr	r0, [pc, #128]	; (18184 <shtcx_read_words+0xa4>)
   18104:	4a20      	ldr	r2, [pc, #128]	; (18188 <shtcx_read_words+0xa8>)
   18106:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1810a:	2300      	movs	r3, #0
   1810c:	fbe6 0105 	umlal	r0, r1, r6, r5
   18110:	f7e8 ff90 	bl	1034 <__aeabi_uldivmod>
   18114:	f003 fcb6 	bl	1ba84 <z_impl_k_sleep>
	return dcp->base_address;
}

static inline const struct device *shtcx_i2c_bus(const struct device *dev)
{
	const struct shtcx_config *dcp = dev->config;
   18118:	6863      	ldr	r3, [r4, #4]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1811a:	2203      	movs	r2, #3
	msg.buf = buf;
   1811c:	ac03      	add	r4, sp, #12

	return dcp->bus;
   1811e:	6818      	ldr	r0, [r3, #0]
		k_sleep(K_USEC(max_duration_us));
	}

	status = i2c_read(shtcx_i2c_bus(dev), rx_buf, raw_len,
   18120:	791b      	ldrb	r3, [r3, #4]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   18122:	f88d 201c 	strb.w	r2, [sp, #28]
	msg.len = num_bytes;
   18126:	e9cd 4805 	strd	r4, r8, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1812a:	6882      	ldr	r2, [r0, #8]
   1812c:	a905      	add	r1, sp, #20
   1812e:	6895      	ldr	r5, [r2, #8]
   18130:	2201      	movs	r2, #1
   18132:	47a8      	blx	r5
			  shtcx_i2c_address(dev));
	if (status != 0) {
   18134:	4605      	mov	r5, r0
   18136:	bb10      	cbnz	r0, 1817e <shtcx_read_words+0x9e>
   18138:	3f02      	subs	r7, #2
		LOG_DBG("Failed to read data");
		return -EIO;
	}

	for (int i = 0; i < raw_len; i += (SHTCX_WORD_LEN + SHTCX_CRC8_LEN)) {
   1813a:	4681      	mov	r9, r0
	return crc8(buf, 2, 0x31, 0xFF, false);
   1813c:	4682      	mov	sl, r0
	return ((uint16_t)src[0] << 8) | src[1];
   1813e:	7823      	ldrb	r3, [r4, #0]
   18140:	7866      	ldrb	r6, [r4, #1]
   18142:	f8cd a000 	str.w	sl, [sp]
   18146:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	dst[0] = val >> 8;
   1814a:	0a33      	lsrs	r3, r6, #8
   1814c:	f88d 3014 	strb.w	r3, [sp, #20]
   18150:	2231      	movs	r2, #49	; 0x31
   18152:	23ff      	movs	r3, #255	; 0xff
   18154:	2102      	movs	r1, #2
   18156:	a805      	add	r0, sp, #20
	dst[1] = val;
   18158:	f88d 6015 	strb.w	r6, [sp, #21]
   1815c:	f007 fbfa 	bl	1f954 <crc8>
		temp16 = sys_get_be16(&rx_buf[i]);
		if (shtcx_compute_crc(temp16) != rx_buf[i+2]) {
   18160:	78a3      	ldrb	r3, [r4, #2]
   18162:	4283      	cmp	r3, r0
   18164:	d10b      	bne.n	1817e <shtcx_read_words+0x9e>
	for (int i = 0; i < raw_len; i += (SHTCX_WORD_LEN + SHTCX_CRC8_LEN)) {
   18166:	f109 0903 	add.w	r9, r9, #3
   1816a:	45c8      	cmp	r8, r9
			LOG_DBG("invalid received invalid crc");
			return -EIO;
		}

		data[dst++] = temp16;
   1816c:	f827 6f02 	strh.w	r6, [r7, #2]!
	for (int i = 0; i < raw_len; i += (SHTCX_WORD_LEN + SHTCX_CRC8_LEN)) {
   18170:	f104 0403 	add.w	r4, r4, #3
   18174:	d8e3      	bhi.n	1813e <shtcx_read_words+0x5e>
	}

	return 0;
}
   18176:	4628      	mov	r0, r5
   18178:	b008      	add	sp, #32
   1817a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EIO;
   1817e:	f06f 0504 	mvn.w	r5, #4
   18182:	e7f8      	b.n	18176 <shtcx_read_words+0x96>
   18184:	000f423f 	.word	0x000f423f
   18188:	000f4240 	.word	0x000f4240

0001818c <shtcx_sample_fetch>:
	return 0;
}

static int shtcx_sample_fetch(const struct device *dev,
			       enum sensor_channel chan)
{
   1818c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct shtcx_data *data = dev->data;
	const struct shtcx_config *cfg = dev->config;
   1818e:	6845      	ldr	r5, [r0, #4]
	struct shtcx_data *data = dev->data;
   18190:	6906      	ldr	r6, [r0, #16]

	__ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL);

	if (cfg->chip == SHTC3) {
   18192:	796b      	ldrb	r3, [r5, #5]
   18194:	2b01      	cmp	r3, #1
{
   18196:	4604      	mov	r4, r0
	if (cfg->chip == SHTC3) {
   18198:	d017      	beq.n	181ca <shtcx_sample_fetch+0x3e>
			return -EIO;
		}
	}

	if (shtcx_read_words(dev,
			     measure_cmd[cfg->measure_mode][cfg->clock_stretching],
   1819a:	79ab      	ldrb	r3, [r5, #6]
			     (uint16_t *)&data->sample, 2,
			     measure_wait_us[cfg->chip][cfg->measure_mode]) < 0) {
   1819c:	796a      	ldrb	r2, [r5, #5]
			     measure_cmd[cfg->measure_mode][cfg->clock_stretching],
   1819e:	79e9      	ldrb	r1, [r5, #7]
	if (shtcx_read_words(dev,
   181a0:	4814      	ldr	r0, [pc, #80]	; (181f4 <shtcx_sample_fetch+0x68>)
   181a2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   181a6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   181aa:	4a13      	ldr	r2, [pc, #76]	; (181f8 <shtcx_sample_fetch+0x6c>)
   181ac:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   181b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   181b4:	9300      	str	r3, [sp, #0]
   181b6:	4632      	mov	r2, r6
   181b8:	2302      	movs	r3, #2
   181ba:	4620      	mov	r0, r4
   181bc:	f7ff ff90 	bl	180e0 <shtcx_read_words>
   181c0:	2800      	cmp	r0, #0
   181c2:	da08      	bge.n	181d6 <shtcx_sample_fetch+0x4a>
	}

	if (cfg->chip == SHTC3) {
		if (shtcx_sleep(dev)) {
			LOG_DBG("Failed to initiate sleep");
			return -EIO;
   181c4:	f06f 0004 	mvn.w	r0, #4
   181c8:	e009      	b.n	181de <shtcx_sample_fetch+0x52>
		if (shtcx_wakeup(dev)) {
   181ca:	4628      	mov	r0, r5
   181cc:	f00a fc0f 	bl	229ee <shtcx_wakeup.isra.0>
   181d0:	2800      	cmp	r0, #0
   181d2:	d0e2      	beq.n	1819a <shtcx_sample_fetch+0xe>
   181d4:	e7f6      	b.n	181c4 <shtcx_sample_fetch+0x38>
	if (cfg->chip == SHTC3) {
   181d6:	796b      	ldrb	r3, [r5, #5]
   181d8:	2b01      	cmp	r3, #1
   181da:	d002      	beq.n	181e2 <shtcx_sample_fetch+0x56>
		}
	}

	return 0;
   181dc:	2000      	movs	r0, #0
}
   181de:	b002      	add	sp, #8
   181e0:	bd70      	pop	{r4, r5, r6, pc}
	if (shtcx_write_command(dev, SHTCX_CMD_SLEEP) < 0) {
   181e2:	6860      	ldr	r0, [r4, #4]
   181e4:	f24b 0198 	movw	r1, #45208	; 0xb098
   181e8:	f00a fbeb 	bl	229c2 <shtcx_write_command.isra.0>
   181ec:	2800      	cmp	r0, #0
   181ee:	daf5      	bge.n	181dc <shtcx_sample_fetch+0x50>
   181f0:	e7e8      	b.n	181c4 <shtcx_sample_fetch+0x38>
   181f2:	bf00      	nop
   181f4:	00024bcc 	.word	0x00024bcc
   181f8:	00024bd4 	.word	0x00024bd4

000181fc <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   181fc:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   181fe:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   18202:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   18204:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   18206:	6002      	str	r2, [r0, #0]
}
   18208:	4802      	ldr	r0, [pc, #8]	; (18214 <nrf_gpio_pin_port_decode+0x18>)
   1820a:	bf18      	it	ne
   1820c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   18210:	4770      	bx	lr
   18212:	bf00      	nop
   18214:	50000300 	.word	0x50000300

00018218 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   18218:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1821a:	794b      	ldrb	r3, [r1, #5]
   1821c:	2b01      	cmp	r3, #1
   1821e:	d026      	beq.n	1826e <uarte_nrfx_configure+0x56>
   18220:	2b03      	cmp	r3, #3
   18222:	d121      	bne.n	18268 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   18224:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   18226:	798b      	ldrb	r3, [r1, #6]
   18228:	2b03      	cmp	r3, #3
   1822a:	d11d      	bne.n	18268 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1822c:	79cc      	ldrb	r4, [r1, #7]
   1822e:	b10c      	cbz	r4, 18234 <uarte_nrfx_configure+0x1c>
   18230:	2c01      	cmp	r4, #1
   18232:	d119      	bne.n	18268 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   18234:	790a      	ldrb	r2, [r1, #4]
   18236:	b112      	cbz	r2, 1823e <uarte_nrfx_configure+0x26>
   18238:	2a02      	cmp	r2, #2
   1823a:	d115      	bne.n	18268 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1823c:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1823e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   18240:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   18242:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   18246:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   18248:	d065      	beq.n	18316 <uarte_nrfx_configure+0xfe>
   1824a:	d82d      	bhi.n	182a8 <uarte_nrfx_configure+0x90>
   1824c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   18250:	d064      	beq.n	1831c <uarte_nrfx_configure+0x104>
   18252:	d816      	bhi.n	18282 <uarte_nrfx_configure+0x6a>
   18254:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   18258:	d062      	beq.n	18320 <uarte_nrfx_configure+0x108>
   1825a:	d80a      	bhi.n	18272 <uarte_nrfx_configure+0x5a>
   1825c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   18260:	d061      	beq.n	18326 <uarte_nrfx_configure+0x10e>
   18262:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   18266:	d061      	beq.n	1832c <uarte_nrfx_configure+0x114>
   18268:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1826c:	e052      	b.n	18314 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   1826e:	2600      	movs	r6, #0
   18270:	e7d9      	b.n	18226 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   18272:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   18276:	d05c      	beq.n	18332 <uarte_nrfx_configure+0x11a>
   18278:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1827c:	d1f4      	bne.n	18268 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1827e:	4b37      	ldr	r3, [pc, #220]	; (1835c <uarte_nrfx_configure+0x144>)
   18280:	e03c      	b.n	182fc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   18282:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   18286:	d057      	beq.n	18338 <uarte_nrfx_configure+0x120>
   18288:	d807      	bhi.n	1829a <uarte_nrfx_configure+0x82>
   1828a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1828e:	d055      	beq.n	1833c <uarte_nrfx_configure+0x124>
   18290:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   18294:	d1e8      	bne.n	18268 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   18296:	4b32      	ldr	r3, [pc, #200]	; (18360 <uarte_nrfx_configure+0x148>)
   18298:	e030      	b.n	182fc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1829a:	f647 2712 	movw	r7, #31250	; 0x7a12
   1829e:	42bb      	cmp	r3, r7
   182a0:	d1e2      	bne.n	18268 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   182a2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   182a6:	e029      	b.n	182fc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   182a8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   182ac:	d048      	beq.n	18340 <uarte_nrfx_configure+0x128>
   182ae:	d813      	bhi.n	182d8 <uarte_nrfx_configure+0xc0>
   182b0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   182b4:	d047      	beq.n	18346 <uarte_nrfx_configure+0x12e>
   182b6:	d809      	bhi.n	182cc <uarte_nrfx_configure+0xb4>
   182b8:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   182bc:	42bb      	cmp	r3, r7
   182be:	d044      	beq.n	1834a <uarte_nrfx_configure+0x132>
   182c0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   182c4:	d1d0      	bne.n	18268 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   182c6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   182ca:	e017      	b.n	182fc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   182cc:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   182d0:	d1ca      	bne.n	18268 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   182d2:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   182d6:	e011      	b.n	182fc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   182d8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   182dc:	d038      	beq.n	18350 <uarte_nrfx_configure+0x138>
   182de:	d808      	bhi.n	182f2 <uarte_nrfx_configure+0xda>
   182e0:	4f20      	ldr	r7, [pc, #128]	; (18364 <uarte_nrfx_configure+0x14c>)
   182e2:	42bb      	cmp	r3, r7
   182e4:	d037      	beq.n	18356 <uarte_nrfx_configure+0x13e>
   182e6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   182ea:	d1bd      	bne.n	18268 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   182ec:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   182f0:	e004      	b.n	182fc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   182f2:	4f1d      	ldr	r7, [pc, #116]	; (18368 <uarte_nrfx_configure+0x150>)
   182f4:	42bb      	cmp	r3, r7
   182f6:	d1b7      	bne.n	18268 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   182f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   182fc:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   182fe:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   18302:	1d03      	adds	r3, r0, #4
   18304:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   18306:	4334      	orrs	r4, r6
   18308:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1830a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1830e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   18312:	2000      	movs	r0, #0
}
   18314:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   18316:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1831a:	e7ef      	b.n	182fc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1831c:	4b13      	ldr	r3, [pc, #76]	; (1836c <uarte_nrfx_configure+0x154>)
   1831e:	e7ed      	b.n	182fc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   18320:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   18324:	e7ea      	b.n	182fc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   18326:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1832a:	e7e7      	b.n	182fc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1832c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   18330:	e7e4      	b.n	182fc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   18332:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   18336:	e7e1      	b.n	182fc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   18338:	4b0d      	ldr	r3, [pc, #52]	; (18370 <uarte_nrfx_configure+0x158>)
   1833a:	e7df      	b.n	182fc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1833c:	4b0d      	ldr	r3, [pc, #52]	; (18374 <uarte_nrfx_configure+0x15c>)
   1833e:	e7dd      	b.n	182fc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   18340:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   18344:	e7da      	b.n	182fc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   18346:	4b0c      	ldr	r3, [pc, #48]	; (18378 <uarte_nrfx_configure+0x160>)
   18348:	e7d8      	b.n	182fc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1834a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1834e:	e7d5      	b.n	182fc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   18350:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   18354:	e7d2      	b.n	182fc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   18356:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1835a:	e7cf      	b.n	182fc <uarte_nrfx_configure+0xe4>
   1835c:	0013b000 	.word	0x0013b000
   18360:	004ea000 	.word	0x004ea000
   18364:	0003d090 	.word	0x0003d090
   18368:	000f4240 	.word	0x000f4240
   1836c:	00275000 	.word	0x00275000
   18370:	0075c000 	.word	0x0075c000
   18374:	003af000 	.word	0x003af000
   18378:	013a9000 	.word	0x013a9000

0001837c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1837c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   1837e:	6906      	ldr	r6, [r0, #16]
{
   18380:	4605      	mov	r5, r0
   18382:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   18384:	f00a feba 	bl	230fc <k_is_in_isr>
   18388:	b910      	cbnz	r0, 18390 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1838a:	4b2c      	ldr	r3, [pc, #176]	; (1843c <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
   1838c:	781b      	ldrb	r3, [r3, #0]
   1838e:	b983      	cbnz	r3, 183b2 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   18390:	f04f 0340 	mov.w	r3, #64	; 0x40
   18394:	f3ef 8411 	mrs	r4, BASEPRI
   18398:	f383 8812 	msr	BASEPRI_MAX, r3
   1839c:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   183a0:	6868      	ldr	r0, [r5, #4]
   183a2:	f00a fbbb 	bl	22b1c <is_tx_ready.isra.0>
   183a6:	bb28      	cbnz	r0, 183f4 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   183a8:	f384 8811 	msr	BASEPRI, r4
   183ac:	f3bf 8f6f 	isb	sy
}
   183b0:	e7ee      	b.n	18390 <uarte_nrfx_poll_out+0x14>
{
   183b2:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   183b4:	6868      	ldr	r0, [r5, #4]
   183b6:	f00a fbb1 	bl	22b1c <is_tx_ready.isra.0>
   183ba:	b970      	cbnz	r0, 183da <uarte_nrfx_poll_out+0x5e>
   183bc:	2001      	movs	r0, #1
   183be:	f00a fcda 	bl	22d76 <nrfx_busy_wait>
   183c2:	3c01      	subs	r4, #1
   183c4:	d1f6      	bne.n	183b4 <uarte_nrfx_poll_out+0x38>
   183c6:	2100      	movs	r1, #0
   183c8:	2021      	movs	r0, #33	; 0x21
   183ca:	f003 fb5b 	bl	1ba84 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   183ce:	e7f0      	b.n	183b2 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   183d0:	f384 8811 	msr	BASEPRI, r4
   183d4:	f3bf 8f6f 	isb	sy
}
   183d8:	e7f5      	b.n	183c6 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   183da:	f04f 0340 	mov.w	r3, #64	; 0x40
   183de:	f3ef 8411 	mrs	r4, BASEPRI
   183e2:	f383 8812 	msr	BASEPRI_MAX, r3
   183e6:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   183ea:	6868      	ldr	r0, [r5, #4]
   183ec:	f00a fb96 	bl	22b1c <is_tx_ready.isra.0>
   183f0:	2800      	cmp	r0, #0
   183f2:	d0ed      	beq.n	183d0 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   183f4:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
   183f8:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   183fa:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   183fc:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   183fe:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   18402:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18406:	2200      	movs	r2, #0
   18408:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1840c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   18410:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   18414:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   18418:	684a      	ldr	r2, [r1, #4]
   1841a:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1841c:	bf41      	itttt	mi
   1841e:	2208      	movmi	r2, #8
   18420:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   18424:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   18428:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1842c:	2201      	movs	r2, #1
   1842e:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   18430:	f384 8811 	msr	BASEPRI, r4
   18434:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   18438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1843a:	bf00      	nop
   1843c:	2000404b 	.word	0x2000404b

00018440 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   18440:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18444:	2200      	movs	r2, #0
   18446:	4607      	mov	r7, r0
   18448:	2101      	movs	r1, #1
   1844a:	2002      	movs	r0, #2
   1844c:	f7fb f84e 	bl	134ec <z_arm_irq_priority_set>
   18450:	2002      	movs	r0, #2
   18452:	f7fb f819 	bl	13488 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   18456:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1845a:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
   1845c:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   18460:	2300      	movs	r3, #0
   18462:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   18466:	6037      	str	r7, [r6, #0]
	uarte_nrfx_pins_configure(dev, false);
   18468:	687d      	ldr	r5, [r7, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1846a:	68eb      	ldr	r3, [r5, #12]
   1846c:	1c5a      	adds	r2, r3, #1
   1846e:	d013      	beq.n	18498 <uarte_0_init+0x58>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   18470:	a801      	add	r0, sp, #4
   18472:	9301      	str	r3, [sp, #4]
   18474:	f7ff fec2 	bl	181fc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   18478:	9a01      	ldr	r2, [sp, #4]
   1847a:	2301      	movs	r3, #1
   1847c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1847e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   18482:	68eb      	ldr	r3, [r5, #12]
   18484:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   18486:	a801      	add	r0, sp, #4
   18488:	f7ff feb8 	bl	181fc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1848c:	9b01      	ldr	r3, [sp, #4]
   1848e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   18492:	2203      	movs	r2, #3
   18494:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   18498:	6928      	ldr	r0, [r5, #16]
   1849a:	1c43      	adds	r3, r0, #1
   1849c:	d006      	beq.n	184ac <uarte_0_init+0x6c>
			nrf_gpio_cfg_input(cfg->rx_pin,
   1849e:	7f2b      	ldrb	r3, [r5, #28]
   184a0:	2b00      	cmp	r3, #0
   184a2:	bf14      	ite	ne
   184a4:	2103      	movne	r1, #3
   184a6:	2100      	moveq	r1, #0
   184a8:	f00a fb2a 	bl	22b00 <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   184ac:	696b      	ldr	r3, [r5, #20]
   184ae:	1c5a      	adds	r2, r3, #1
   184b0:	d013      	beq.n	184da <uarte_0_init+0x9a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   184b2:	a801      	add	r0, sp, #4
   184b4:	9301      	str	r3, [sp, #4]
   184b6:	f7ff fea1 	bl	181fc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   184ba:	9a01      	ldr	r2, [sp, #4]
   184bc:	2301      	movs	r3, #1
   184be:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   184c0:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   184c4:	696b      	ldr	r3, [r5, #20]
   184c6:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   184c8:	a801      	add	r0, sp, #4
   184ca:	f7ff fe97 	bl	181fc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   184ce:	9b01      	ldr	r3, [sp, #4]
   184d0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   184d4:	2203      	movs	r2, #3
   184d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   184da:	69a8      	ldr	r0, [r5, #24]
   184dc:	1c43      	adds	r3, r0, #1
   184de:	d006      	beq.n	184ee <uarte_0_init+0xae>
			nrf_gpio_cfg_input(cfg->cts_pin,
   184e0:	7f6b      	ldrb	r3, [r5, #29]
   184e2:	2b00      	cmp	r3, #0
   184e4:	bf14      	ite	ne
   184e6:	2103      	movne	r1, #3
   184e8:	2100      	moveq	r1, #0
   184ea:	f00a fb09 	bl	22b00 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   184ee:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
   184f2:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
   184f4:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   184f8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   184fc:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
	err = uarte_nrfx_configure(dev, &data->uart_config);
   18500:	4638      	mov	r0, r7
    p_reg->PSEL.RTS = pselrts;
   18502:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   18506:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   1850a:	1d31      	adds	r1, r6, #4
   1850c:	f7ff fe84 	bl	18218 <uarte_nrfx_configure>
	if (err) {
   18510:	4605      	mov	r5, r0
   18512:	2800      	cmp	r0, #0
   18514:	d146      	bne.n	185a4 <uarte_0_init+0x164>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   18516:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1851a:	0799      	lsls	r1, r3, #30
   1851c:	d519      	bpl.n	18552 <uarte_0_init+0x112>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1851e:	f106 0012 	add.w	r0, r6, #18
   18522:	f001 fe9f 	bl	1a264 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   18526:	4b23      	ldr	r3, [pc, #140]	; (185b4 <uarte_0_init+0x174>)
   18528:	4298      	cmp	r0, r3
   1852a:	d13f      	bne.n	185ac <uarte_0_init+0x16c>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1852c:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1852e:	00c3      	lsls	r3, r0, #3
   18530:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18534:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   18538:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1853c:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   18540:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   18544:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   18548:	4a1b      	ldr	r2, [pc, #108]	; (185b8 <uarte_0_init+0x178>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1854a:	2301      	movs	r3, #1
   1854c:	4083      	lsls	r3, r0
   1854e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   18552:	2308      	movs	r3, #8
   18554:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   18558:	f898 3008 	ldrb.w	r3, [r8, #8]
   1855c:	b95b      	cbnz	r3, 18576 <uarte_0_init+0x136>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1855e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   18562:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   18566:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1856a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1856e:	2301      	movs	r3, #1
   18570:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18574:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   18576:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1857a:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1857c:	bf5c      	itt	pl
   1857e:	f44f 7280 	movpl.w	r2, #256	; 0x100
   18582:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   18586:	06db      	lsls	r3, r3, #27
   18588:	bf44      	itt	mi
   1858a:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1858e:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   18592:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
   18594:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   18596:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1859a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1859e:	2301      	movs	r3, #1
   185a0:	60a3      	str	r3, [r4, #8]
   185a2:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   185a4:	4628      	mov	r0, r5
   185a6:	b002      	add	sp, #8
   185a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
   185ac:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   185b0:	e7f8      	b.n	185a4 <uarte_0_init+0x164>
   185b2:	bf00      	nop
   185b4:	0bad0000 	.word	0x0bad0000
   185b8:	4001f000 	.word	0x4001f000

000185bc <random_byte_get>:
	__asm__ volatile(
   185bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   185c0:	f3ef 8211 	mrs	r2, BASEPRI
   185c4:	f383 8812 	msr	BASEPRI_MAX, r3
   185c8:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   185cc:	4b09      	ldr	r3, [pc, #36]	; (185f4 <random_byte_get+0x38>)
   185ce:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   185d2:	b161      	cbz	r1, 185ee <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   185d4:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   185d6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   185da:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   185de:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   185e2:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   185e4:	f382 8811 	msr	BASEPRI, r2
   185e8:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   185ec:	4770      	bx	lr
	int retval = -EAGAIN;
   185ee:	f06f 000a 	mvn.w	r0, #10
   185f2:	e7f7      	b.n	185e4 <random_byte_get+0x28>
   185f4:	4000d000 	.word	0x4000d000

000185f8 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   185f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   185fa:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   185fc:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   185fe:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   18600:	f04f 0040 	mov.w	r0, #64	; 0x40
   18604:	f3ef 8e11 	mrs	lr, BASEPRI
   18608:	f380 8812 	msr	BASEPRI_MAX, r0
   1860c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   18610:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   18612:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   18616:	1ba4      	subs	r4, r4, r6
   18618:	403c      	ands	r4, r7
	if (available < len) {
   1861a:	42a2      	cmp	r2, r4
		len = available;
   1861c:	bf88      	it	hi
   1861e:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   18620:	18b0      	adds	r0, r6, r2
   18622:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   18624:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   18626:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   18628:	f38e 8811 	msr	BASEPRI, lr
   1862c:	f3bf 8f6f 	isb	sy
   18630:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   18632:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   18634:	4290      	cmp	r0, r2
   18636:	d119      	bne.n	1866c <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   18638:	4566      	cmp	r6, ip
   1863a:	d10d      	bne.n	18658 <rng_pool_get+0x60>
	__asm__ volatile(
   1863c:	f04f 0540 	mov.w	r5, #64	; 0x40
   18640:	f3ef 8011 	mrs	r0, BASEPRI
   18644:	f385 8812 	msr	BASEPRI_MAX, r5
   18648:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1864c:	781d      	ldrb	r5, [r3, #0]
   1864e:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   18650:	f380 8811 	msr	BASEPRI, r0
   18654:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   18658:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1865a:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1865c:	b290      	uxth	r0, r2
	available = available - len;
   1865e:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   18660:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   18662:	bf22      	ittt	cs
   18664:	4b06      	ldrcs	r3, [pc, #24]	; (18680 <rng_pool_get+0x88>)
   18666:	2201      	movcs	r2, #1
   18668:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1866a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1866c:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   18670:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   18672:	f89e e005 	ldrb.w	lr, [lr, #5]
   18676:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   1867a:	403d      	ands	r5, r7
   1867c:	e7da      	b.n	18634 <rng_pool_get+0x3c>
   1867e:	bf00      	nop
   18680:	4000d000 	.word	0x4000d000

00018684 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   18684:	43db      	mvns	r3, r3
{
   18686:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1868a:	f013 0501 	ands.w	r5, r3, #1
{
   1868e:	460e      	mov	r6, r1
   18690:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   18692:	d004      	beq.n	1869e <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   18694:	4821      	ldr	r0, [pc, #132]	; (1871c <entropy_nrf5_get_entropy_isr+0x98>)
   18696:	f7ff ffaf 	bl	185f8 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1869a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1869e:	b3a2      	cbz	r2, 1870a <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   186a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   186a4:	f3ef 8811 	mrs	r8, BASEPRI
   186a8:	f383 8812 	msr	BASEPRI_MAX, r3
   186ac:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   186b0:	200d      	movs	r0, #13
   186b2:	f7fa ff0d 	bl	134d0 <arch_irq_is_enabled>
   186b6:	4607      	mov	r7, r0
		irq_disable(IRQN);
   186b8:	200d      	movs	r0, #13
   186ba:	f7fa fef5 	bl	134a8 <arch_irq_disable>
	__asm__ volatile(
   186be:	f388 8811 	msr	BASEPRI, r8
   186c2:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   186c6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 18720 <entropy_nrf5_get_entropy_isr+0x9c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   186ca:	f8df 9058 	ldr.w	r9, [pc, #88]	; 18724 <entropy_nrf5_get_entropy_isr+0xa0>
   186ce:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   186d2:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   186d6:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   186da:	2301      	movs	r3, #1
   186dc:	f8c8 3000 	str.w	r3, [r8]
   186e0:	4625      	mov	r5, r4
   186e2:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   186e6:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   186ea:	b183      	cbz	r3, 1870e <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   186ec:	f7ff ff66 	bl	185bc <random_byte_get>
			if (byte < 0) {
   186f0:	1e03      	subs	r3, r0, #0
   186f2:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   186f6:	dbf6      	blt.n	186e6 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   186f8:	3d01      	subs	r5, #1
   186fa:	b2ad      	uxth	r5, r5
   186fc:	5573      	strb	r3, [r6, r5]
		} while (len);
   186fe:	2d00      	cmp	r5, #0
   18700:	d1f1      	bne.n	186e6 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   18702:	b117      	cbz	r7, 1870a <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   18704:	200d      	movs	r0, #13
   18706:	f7fa febf 	bl	13488 <arch_irq_enable>
	return cnt;
   1870a:	4620      	mov	r0, r4
   1870c:	e7c5      	b.n	1869a <entropy_nrf5_get_entropy_isr+0x16>
   1870e:	f3bf 8f4f 	dsb	sy
				__WFE();
   18712:	bf20      	wfe
				__SEV();
   18714:	bf40      	sev
				__WFE();
   18716:	bf20      	wfe
   18718:	e7e5      	b.n	186e6 <entropy_nrf5_get_entropy_isr+0x62>
   1871a:	bf00      	nop
   1871c:	20002958 	.word	0x20002958
   18720:	4000d000 	.word	0x4000d000
   18724:	e000e100 	.word	0xe000e100

00018728 <entropy_nrf5_get_entropy>:
{
   18728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1872c:	4f13      	ldr	r7, [pc, #76]	; (1877c <entropy_nrf5_get_entropy+0x54>)
   1872e:	460d      	mov	r5, r1
   18730:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   18732:	f107 0845 	add.w	r8, r7, #69	; 0x45
   18736:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1873a:	b914      	cbnz	r4, 18742 <entropy_nrf5_get_entropy+0x1a>
}
   1873c:	4620      	mov	r0, r4
   1873e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18742:	f04f 33ff 	mov.w	r3, #4294967295
   18746:	f04f 32ff 	mov.w	r2, #4294967295
   1874a:	4638      	mov	r0, r7
   1874c:	f002 fcda 	bl	1b104 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   18750:	4622      	mov	r2, r4
   18752:	4629      	mov	r1, r5
   18754:	4640      	mov	r0, r8
   18756:	f7ff ff4f 	bl	185f8 <rng_pool_get>
   1875a:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1875c:	4638      	mov	r0, r7
   1875e:	f002 fcab 	bl	1b0b8 <z_impl_k_sem_give>
		if (bytes == 0U) {
   18762:	b93e      	cbnz	r6, 18774 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   18764:	f04f 32ff 	mov.w	r2, #4294967295
   18768:	f04f 33ff 	mov.w	r3, #4294967295
   1876c:	4648      	mov	r0, r9
   1876e:	f002 fcc9 	bl	1b104 <z_impl_k_sem_take>
			continue;
   18772:	e7e2      	b.n	1873a <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   18774:	1ba4      	subs	r4, r4, r6
   18776:	b2a4      	uxth	r4, r4
		buf += bytes;
   18778:	4435      	add	r5, r6
   1877a:	e7de      	b.n	1873a <entropy_nrf5_get_entropy+0x12>
   1877c:	20002928 	.word	0x20002928

00018780 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   18780:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   18782:	4c19      	ldr	r4, [pc, #100]	; (187e8 <entropy_nrf5_init+0x68>)
   18784:	2201      	movs	r2, #1
   18786:	4611      	mov	r1, r2
   18788:	4620      	mov	r0, r4
   1878a:	f00a fda5 	bl	232d8 <z_impl_k_sem_init>
   1878e:	2201      	movs	r2, #1
   18790:	2100      	movs	r1, #0
   18792:	f104 0018 	add.w	r0, r4, #24
   18796:	f00a fd9f 	bl	232d8 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1879a:	f240 4307 	movw	r3, #1031	; 0x407
   1879e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   187a2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   187a6:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   187a8:	230c      	movs	r3, #12
   187aa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   187ae:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   187b0:	4b0e      	ldr	r3, [pc, #56]	; (187ec <entropy_nrf5_init+0x6c>)
   187b2:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   187b6:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   187ba:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   187be:	f022 0201 	bic.w	r2, r2, #1
   187c2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   187c6:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   187c8:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   187cc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   187d0:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   187d4:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   187d6:	6019      	str	r1, [r3, #0]
   187d8:	200d      	movs	r0, #13
   187da:	f7fa fe87 	bl	134ec <z_arm_irq_priority_set>
	irq_enable(IRQN);
   187de:	200d      	movs	r0, #13
   187e0:	f7fa fe52 	bl	13488 <arch_irq_enable>

	return 0;
}
   187e4:	4628      	mov	r0, r5
   187e6:	bd38      	pop	{r3, r4, r5, pc}
   187e8:	20002928 	.word	0x20002928
   187ec:	4000d000 	.word	0x4000d000

000187f0 <isr>:
{
   187f0:	b510      	push	{r4, lr}
	byte = random_byte_get();
   187f2:	f7ff fee3 	bl	185bc <random_byte_get>
	if (byte < 0) {
   187f6:	2800      	cmp	r0, #0
   187f8:	db20      	blt.n	1883c <isr+0x4c>
	uint8_t last  = rngp->last;
   187fa:	4b17      	ldr	r3, [pc, #92]	; (18858 <isr+0x68>)
   187fc:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   18800:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   18804:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   18808:	1a51      	subs	r1, r2, r1
   1880a:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1880e:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   18810:	d10d      	bne.n	1882e <isr+0x3e>
	uint8_t last  = rngp->last;
   18812:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   18816:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1881a:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1881e:	1a51      	subs	r1, r2, r1
   18820:	ea34 0101 	bics.w	r1, r4, r1
   18824:	d10b      	bne.n	1883e <isr+0x4e>
   18826:	4b0d      	ldr	r3, [pc, #52]	; (1885c <isr+0x6c>)
   18828:	2201      	movs	r2, #1
   1882a:	605a      	str	r2, [r3, #4]
}
   1882c:	e00e      	b.n	1884c <isr+0x5c>
	rngp->buffer[last] = byte;
   1882e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   18830:	3201      	adds	r2, #1
   18832:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   18834:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   18838:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1883c:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1883e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   18840:	3201      	adds	r2, #1
   18842:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   18844:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   18848:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1884c:	4804      	ldr	r0, [pc, #16]	; (18860 <isr+0x70>)
}
   1884e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18852:	f002 bc31 	b.w	1b0b8 <z_impl_k_sem_give>
   18856:	bf00      	nop
   18858:	20002928 	.word	0x20002928
   1885c:	4000d000 	.word	0x4000d000
   18860:	20002940 	.word	0x20002940

00018864 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   18864:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   18866:	2301      	movs	r3, #1
   18868:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1886a:	4a11      	ldr	r2, [pc, #68]	; (188b0 <compare_int_lock+0x4c>)
   1886c:	f3bf 8f5b 	dmb	ish
   18870:	43dc      	mvns	r4, r3
   18872:	e852 1f00 	ldrex	r1, [r2]
   18876:	ea01 0c04 	and.w	ip, r1, r4
   1887a:	e842 ce00 	strex	lr, ip, [r2]
   1887e:	f1be 0f00 	cmp.w	lr, #0
   18882:	d1f6      	bne.n	18872 <compare_int_lock+0xe>
   18884:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18888:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1888c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   18890:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   18894:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   18898:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1889c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   188a0:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   188a4:	420b      	tst	r3, r1
}
   188a6:	bf14      	ite	ne
   188a8:	2001      	movne	r0, #1
   188aa:	2000      	moveq	r0, #0
   188ac:	bd10      	pop	{r4, pc}
   188ae:	bf00      	nop
   188b0:	20002980 	.word	0x20002980

000188b4 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   188b4:	4919      	ldr	r1, [pc, #100]	; (1891c <sys_clock_timeout_handler+0x68>)
{
   188b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   188b8:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   188ba:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   188be:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   188c0:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   188c4:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   188c8:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   188ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   188ce:	d222      	bcs.n	18916 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   188d0:	4b13      	ldr	r3, [pc, #76]	; (18920 <sys_clock_timeout_handler+0x6c>)
   188d2:	681b      	ldr	r3, [r3, #0]
   188d4:	0a1a      	lsrs	r2, r3, #8
   188d6:	061b      	lsls	r3, r3, #24
   188d8:	195e      	adds	r6, r3, r5
   188da:	4b12      	ldr	r3, [pc, #72]	; (18924 <sys_clock_timeout_handler+0x70>)
   188dc:	f142 0700 	adc.w	r7, r2, #0
   188e0:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   188e4:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   188e6:	f003 fa2f 	bl	1bd48 <sys_clock_announce>
    return p_reg->CC[ch];
   188ea:	00a3      	lsls	r3, r4, #2
   188ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   188f0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   188f4:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   188f8:	42aa      	cmp	r2, r5
   188fa:	d10b      	bne.n	18914 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   188fc:	b91e      	cbnz	r6, 18906 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   188fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   18902:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   18906:	4b08      	ldr	r3, [pc, #32]	; (18928 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18908:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1890c:	fa00 f404 	lsl.w	r4, r0, r4
   18910:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   18914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   18916:	2600      	movs	r6, #0
   18918:	e7e5      	b.n	188e6 <sys_clock_timeout_handler+0x32>
   1891a:	bf00      	nop
   1891c:	20001d30 	.word	0x20001d30
   18920:	20002984 	.word	0x20002984
   18924:	20001d18 	.word	0x20001d18
   18928:	40011000 	.word	0x40011000

0001892c <compare_int_unlock>:
	if (key) {
   1892c:	b319      	cbz	r1, 18976 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1892e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   18932:	2301      	movs	r3, #1
   18934:	4a10      	ldr	r2, [pc, #64]	; (18978 <compare_int_unlock+0x4c>)
   18936:	4083      	lsls	r3, r0
   18938:	e852 1f00 	ldrex	r1, [r2]
   1893c:	4319      	orrs	r1, r3
   1893e:	e842 1c00 	strex	ip, r1, [r2]
   18942:	f1bc 0f00 	cmp.w	ip, #0
   18946:	d1f7      	bne.n	18938 <compare_int_unlock+0xc>
   18948:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1894c:	4a0b      	ldr	r2, [pc, #44]	; (1897c <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1894e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   18952:	4083      	lsls	r3, r0
   18954:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18958:	4b09      	ldr	r3, [pc, #36]	; (18980 <compare_int_unlock+0x54>)
   1895a:	f3bf 8f5b 	dmb	ish
   1895e:	681b      	ldr	r3, [r3, #0]
   18960:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   18964:	fa23 f000 	lsr.w	r0, r3, r0
   18968:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1896a:	bf42      	ittt	mi
   1896c:	4b05      	ldrmi	r3, [pc, #20]	; (18984 <compare_int_unlock+0x58>)
   1896e:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   18972:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   18976:	4770      	bx	lr
   18978:	20002980 	.word	0x20002980
   1897c:	40011000 	.word	0x40011000
   18980:	2000297c 	.word	0x2000297c
   18984:	e000e100 	.word	0xe000e100

00018988 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   18988:	4b0d      	ldr	r3, [pc, #52]	; (189c0 <z_nrf_rtc_timer_read+0x38>)
   1898a:	6818      	ldr	r0, [r3, #0]
   1898c:	0a01      	lsrs	r1, r0, #8
   1898e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   18990:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   18994:	4b0b      	ldr	r3, [pc, #44]	; (189c4 <z_nrf_rtc_timer_read+0x3c>)
   18996:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1899a:	1818      	adds	r0, r3, r0
   1899c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   189a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   189a4:	d20a      	bcs.n	189bc <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   189a6:	4b08      	ldr	r3, [pc, #32]	; (189c8 <z_nrf_rtc_timer_read+0x40>)
   189a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   189ac:	4290      	cmp	r0, r2
   189ae:	eb71 0303 	sbcs.w	r3, r1, r3
   189b2:	d203      	bcs.n	189bc <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   189b4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   189b8:	f141 0100 	adc.w	r1, r1, #0
}
   189bc:	4770      	bx	lr
   189be:	bf00      	nop
   189c0:	20002984 	.word	0x20002984
   189c4:	40011000 	.word	0x40011000
   189c8:	20001d18 	.word	0x20001d18

000189cc <compare_set>:
{
   189cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189d0:	b085      	sub	sp, #20
   189d2:	4616      	mov	r6, r2
   189d4:	4698      	mov	r8, r3
   189d6:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   189d8:	f7ff ff44 	bl	18864 <compare_int_lock>
   189dc:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   189de:	f7ff ffd3 	bl	18988 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   189e2:	42b0      	cmp	r0, r6
   189e4:	eb71 0308 	sbcs.w	r3, r1, r8
   189e8:	d278      	bcs.n	18adc <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   189ea:	4b46      	ldr	r3, [pc, #280]	; (18b04 <compare_set+0x138>)
   189ec:	1a30      	subs	r0, r6, r0
   189ee:	eb68 0101 	sbc.w	r1, r8, r1
   189f2:	4298      	cmp	r0, r3
   189f4:	f171 0300 	sbcs.w	r3, r1, #0
   189f8:	f080 8081 	bcs.w	18afe <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   189fc:	4b42      	ldr	r3, [pc, #264]	; (18b08 <compare_set+0x13c>)
   189fe:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   18a02:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   18a06:	45d8      	cmp	r8, fp
   18a08:	bf08      	it	eq
   18a0a:	4556      	cmpeq	r6, sl
   18a0c:	d051      	beq.n	18ab2 <compare_set+0xe6>
   18a0e:	ea4f 0985 	mov.w	r9, r5, lsl #2
   18a12:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   18a16:	f105 0750 	add.w	r7, r5, #80	; 0x50
   18a1a:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   18a1e:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18a20:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   18a24:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18a28:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   18a2a:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   18a2e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18a32:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   18a34:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   18a38:	4b34      	ldr	r3, [pc, #208]	; (18b0c <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18a3a:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   18a3e:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   18a40:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   18a44:	1a40      	subs	r0, r0, r1
   18a46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   18a4a:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   18a4e:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   18a50:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   18a54:	d107      	bne.n	18a66 <compare_set+0x9a>
   18a56:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   18a5a:	2013      	movs	r0, #19
   18a5c:	f00a fe9c 	bl	23798 <z_impl_k_busy_wait>
   18a60:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   18a64:	4b29      	ldr	r3, [pc, #164]	; (18b0c <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   18a66:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   18a6a:	eba4 000c 	sub.w	r0, r4, ip
   18a6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   18a72:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18a76:	bf88      	it	hi
   18a78:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18a7a:	2000      	movs	r0, #0
   18a7c:	6038      	str	r0, [r7, #0]
   18a7e:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   18a80:	9801      	ldr	r0, [sp, #4]
   18a82:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   18a86:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   18a8a:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   18a8e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   18a92:	4281      	cmp	r1, r0
   18a94:	d006      	beq.n	18aa4 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   18a96:	1a20      	subs	r0, r4, r0
   18a98:	3802      	subs	r0, #2
   18a9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   18a9e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18aa2:	d819      	bhi.n	18ad8 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   18aa4:	1aa4      	subs	r4, r4, r2
   18aa6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   18aaa:	eb14 0a06 	adds.w	sl, r4, r6
   18aae:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   18ab2:	4915      	ldr	r1, [pc, #84]	; (18b08 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   18ab4:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   18ab6:	012b      	lsls	r3, r5, #4
   18ab8:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   18abc:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   18ac0:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   18ac2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18ac4:	6053      	str	r3, [r2, #4]
	return ret;
   18ac6:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   18ac8:	4628      	mov	r0, r5
   18aca:	9900      	ldr	r1, [sp, #0]
   18acc:	f7ff ff2e 	bl	1892c <compare_int_unlock>
}
   18ad0:	4620      	mov	r0, r4
   18ad2:	b005      	add	sp, #20
   18ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ad8:	4620      	mov	r0, r4
   18ada:	e7b1      	b.n	18a40 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   18adc:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18ade:	4a0c      	ldr	r2, [pc, #48]	; (18b10 <compare_set+0x144>)
   18ae0:	f3bf 8f5b 	dmb	ish
   18ae4:	40ab      	lsls	r3, r5
   18ae6:	e852 1f00 	ldrex	r1, [r2]
   18aea:	4319      	orrs	r1, r3
   18aec:	e842 1000 	strex	r0, r1, [r2]
   18af0:	2800      	cmp	r0, #0
   18af2:	d1f8      	bne.n	18ae6 <compare_set+0x11a>
   18af4:	f3bf 8f5b 	dmb	ish
   18af8:	46b2      	mov	sl, r6
   18afa:	46c3      	mov	fp, r8
   18afc:	e7d9      	b.n	18ab2 <compare_set+0xe6>
			return -EINVAL;
   18afe:	f06f 0415 	mvn.w	r4, #21
   18b02:	e7e1      	b.n	18ac8 <compare_set+0xfc>
   18b04:	01000001 	.word	0x01000001
   18b08:	20001d20 	.word	0x20001d20
   18b0c:	40011000 	.word	0x40011000
   18b10:	2000297c 	.word	0x2000297c

00018b14 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   18b14:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   18b16:	4b19      	ldr	r3, [pc, #100]	; (18b7c <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   18b18:	4d19      	ldr	r5, [pc, #100]	; (18b80 <sys_clock_driver_init+0x6c>)
   18b1a:	2400      	movs	r4, #0
   18b1c:	f04f 30ff 	mov.w	r0, #4294967295
   18b20:	f04f 31ff 	mov.w	r1, #4294967295
   18b24:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   18b28:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   18b2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   18b30:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18b34:	4b13      	ldr	r3, [pc, #76]	; (18b84 <sys_clock_driver_init+0x70>)
   18b36:	2602      	movs	r6, #2
   18b38:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   18b3c:	2101      	movs	r1, #1
   18b3e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   18b42:	2011      	movs	r0, #17
   18b44:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   18b48:	4622      	mov	r2, r4
   18b4a:	f7fa fccf 	bl	134ec <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   18b4e:	2011      	movs	r0, #17
   18b50:	f7fa fc9a 	bl	13488 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   18b54:	4a0c      	ldr	r2, [pc, #48]	; (18b88 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   18b56:	2301      	movs	r3, #1
   18b58:	60ab      	str	r3, [r5, #8]
   18b5a:	602b      	str	r3, [r5, #0]
   18b5c:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   18b5e:	4b0b      	ldr	r3, [pc, #44]	; (18b8c <sys_clock_driver_init+0x78>)
   18b60:	4a0b      	ldr	r2, [pc, #44]	; (18b90 <sys_clock_driver_init+0x7c>)
   18b62:	9300      	str	r3, [sp, #0]
   18b64:	9401      	str	r4, [sp, #4]
   18b66:	2300      	movs	r3, #0
   18b68:	4620      	mov	r0, r4
   18b6a:	f7ff ff2f 	bl	189cc <compare_set>

	z_nrf_clock_control_lf_on(mode);
   18b6e:	4630      	mov	r0, r6
   18b70:	f7fe ff34 	bl	179dc <z_nrf_clock_control_lf_on>

	return 0;
}
   18b74:	4620      	mov	r0, r4
   18b76:	b002      	add	sp, #8
   18b78:	bd70      	pop	{r4, r5, r6, pc}
   18b7a:	bf00      	nop
   18b7c:	20001d20 	.word	0x20001d20
   18b80:	40011000 	.word	0x40011000
   18b84:	e000e100 	.word	0xe000e100
   18b88:	20002980 	.word	0x20002980
   18b8c:	000188b5 	.word	0x000188b5
   18b90:	007fffff 	.word	0x007fffff

00018b94 <rtc_nrf_isr>:
{
   18b94:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    return p_reg->INTENSET & mask;
   18b98:	4c2c      	ldr	r4, [pc, #176]	; (18c4c <rtc_nrf_isr+0xb8>)
   18b9a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   18b9e:	0799      	lsls	r1, r3, #30
   18ba0:	d50b      	bpl.n	18bba <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18ba2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   18ba6:	b143      	cbz	r3, 18bba <rtc_nrf_isr+0x26>
		overflow_cnt++;
   18ba8:	4a29      	ldr	r2, [pc, #164]	; (18c50 <rtc_nrf_isr+0xbc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18baa:	2300      	movs	r3, #0
   18bac:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   18bb0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   18bb4:	6813      	ldr	r3, [r2, #0]
   18bb6:	3301      	adds	r3, #1
   18bb8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18bba:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18bbe:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   18bc0:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   18bc4:	03d2      	lsls	r2, r2, #15
   18bc6:	d52d      	bpl.n	18c24 <rtc_nrf_isr+0x90>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18bc8:	f3bf 8f5b 	dmb	ish
   18bcc:	4a21      	ldr	r2, [pc, #132]	; (18c54 <rtc_nrf_isr+0xc0>)
   18bce:	e852 1f00 	ldrex	r1, [r2]
   18bd2:	f021 0001 	bic.w	r0, r1, #1
   18bd6:	e842 0500 	strex	r5, r0, [r2]
   18bda:	2d00      	cmp	r5, #0
   18bdc:	d1f7      	bne.n	18bce <rtc_nrf_isr+0x3a>
   18bde:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   18be2:	b911      	cbnz	r1, 18bea <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18be4:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
		if (result) {
   18be8:	b1e2      	cbz	r2, 18c24 <rtc_nrf_isr+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18bea:	2500      	movs	r5, #0
   18bec:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   18bf0:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18bf4:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   18bf8:	f7ff fec6 	bl	18988 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18bfc:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18c00:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   18c02:	4b15      	ldr	r3, [pc, #84]	; (18c58 <rtc_nrf_isr+0xc4>)
   18c04:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   18c08:	42b0      	cmp	r0, r6
   18c0a:	41b9      	sbcs	r1, r7
   18c0c:	d20f      	bcs.n	18c2e <rtc_nrf_isr+0x9a>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   18c0e:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18c10:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   18c14:	b141      	cbz	r1, 18c28 <rtc_nrf_isr+0x94>
			handler(chan, expire_time, user_context);
   18c16:	f8cd 8000 	str.w	r8, [sp]
   18c1a:	4632      	mov	r2, r6
   18c1c:	463b      	mov	r3, r7
   18c1e:	2000      	movs	r0, #0
   18c20:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   18c22:	e001      	b.n	18c28 <rtc_nrf_isr+0x94>
   18c24:	f383 8810 	msr	PRIMASK, r3
}
   18c28:	b002      	add	sp, #8
   18c2a:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   18c2e:	f04f 3aff 	mov.w	sl, #4294967295
   18c32:	f04f 3bff 	mov.w	fp, #4294967295
			user_context = cc_data[chan].user_context;
   18c36:	e9d3 1800 	ldrd	r1, r8, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   18c3a:	e9c3 ab02 	strd	sl, fp, [r3, #8]
			cc_data[chan].callback = NULL;
   18c3e:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   18c40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   18c44:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   18c48:	e7e2      	b.n	18c10 <rtc_nrf_isr+0x7c>
   18c4a:	bf00      	nop
   18c4c:	40011000 	.word	0x40011000
   18c50:	20002984 	.word	0x20002984
   18c54:	2000297c 	.word	0x2000297c
   18c58:	20001d20 	.word	0x20001d20

00018c5c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   18c5c:	1c43      	adds	r3, r0, #1
{
   18c5e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   18c60:	d021      	beq.n	18ca6 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   18c62:	2801      	cmp	r0, #1
   18c64:	dd21      	ble.n	18caa <sys_clock_set_timeout+0x4e>
   18c66:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18c6a:	da20      	bge.n	18cae <sys_clock_set_timeout+0x52>
   18c6c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   18c6e:	f7ff fe8b 	bl	18988 <z_nrf_rtc_timer_read>
   18c72:	4b10      	ldr	r3, [pc, #64]	; (18cb4 <sys_clock_set_timeout+0x58>)
   18c74:	e9d3 1300 	ldrd	r1, r3, [r3]
   18c78:	1a40      	subs	r0, r0, r1
		ticks = 0;
   18c7a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18c7e:	bf28      	it	cs
   18c80:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   18c82:	3001      	adds	r0, #1
   18c84:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   18c86:	480c      	ldr	r0, [pc, #48]	; (18cb8 <sys_clock_set_timeout+0x5c>)
   18c88:	4282      	cmp	r2, r0
   18c8a:	bf28      	it	cs
   18c8c:	4602      	movcs	r2, r0
   18c8e:	1852      	adds	r2, r2, r1
   18c90:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   18c94:	4909      	ldr	r1, [pc, #36]	; (18cbc <sys_clock_set_timeout+0x60>)
   18c96:	9001      	str	r0, [sp, #4]
   18c98:	9100      	str	r1, [sp, #0]
   18c9a:	f143 0300 	adc.w	r3, r3, #0
   18c9e:	f7ff fe95 	bl	189cc <compare_set>
}
   18ca2:	b002      	add	sp, #8
   18ca4:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   18ca6:	4804      	ldr	r0, [pc, #16]	; (18cb8 <sys_clock_set_timeout+0x5c>)
   18ca8:	e7e0      	b.n	18c6c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   18caa:	2400      	movs	r4, #0
   18cac:	e7df      	b.n	18c6e <sys_clock_set_timeout+0x12>
   18cae:	4c02      	ldr	r4, [pc, #8]	; (18cb8 <sys_clock_set_timeout+0x5c>)
   18cb0:	e7dd      	b.n	18c6e <sys_clock_set_timeout+0x12>
   18cb2:	bf00      	nop
   18cb4:	20001d30 	.word	0x20001d30
   18cb8:	007fffff 	.word	0x007fffff
   18cbc:	000188b5 	.word	0x000188b5

00018cc0 <sys_clock_elapsed>:
{
   18cc0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   18cc2:	f7ff fe61 	bl	18988 <z_nrf_rtc_timer_read>
   18cc6:	4b02      	ldr	r3, [pc, #8]	; (18cd0 <sys_clock_elapsed+0x10>)
   18cc8:	681b      	ldr	r3, [r3, #0]
}
   18cca:	1ac0      	subs	r0, r0, r3
   18ccc:	bd08      	pop	{r3, pc}
   18cce:	bf00      	nop
   18cd0:	20001d30 	.word	0x20001d30

00018cd4 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   18cd4:	4602      	mov	r2, r0
   18cd6:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   18cd8:	4801      	ldr	r0, [pc, #4]	; (18ce0 <multithreading_lock_acquire+0xc>)
   18cda:	f002 b8ff 	b.w	1aedc <z_impl_k_mutex_lock>
   18cde:	bf00      	nop
   18ce0:	20000b60 	.word	0x20000b60

00018ce4 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   18ce4:	4801      	ldr	r0, [pc, #4]	; (18cec <multithreading_lock_release+0x8>)
   18ce6:	f002 b971 	b.w	1afcc <z_impl_k_mutex_unlock>
   18cea:	bf00      	nop
   18cec:	20000b60 	.word	0x20000b60

00018cf0 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   18cf0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   18cf2:	4804      	ldr	r0, [pc, #16]	; (18d04 <hci_driver_init+0x14>)
   18cf4:	f7fb fc86 	bl	14604 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   18cf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   18cfc:	4802      	ldr	r0, [pc, #8]	; (18d08 <hci_driver_init+0x18>)
   18cfe:	f7ec b94b 	b.w	4f98 <sdc_init>
   18d02:	bf00      	nop
   18d04:	0002490c 	.word	0x0002490c
   18d08:	00022c13 	.word	0x00022c13

00018d0c <hci_driver_open>:
{
   18d0c:	b570      	push	{r4, r5, r6, lr}
   18d0e:	b088      	sub	sp, #32
		hci_ecdh_init();
   18d10:	f000 fd12 	bl	19738 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   18d14:	a803      	add	r0, sp, #12
   18d16:	f7ec f8ad 	bl	4e74 <sdc_build_revision_get>
			err = sdc_support_adv();
   18d1a:	f7ec f9bb 	bl	5094 <sdc_support_adv>
			if (err) {
   18d1e:	b118      	cbz	r0, 18d28 <hci_driver_open+0x1c>
				return -ENOTSUP;
   18d20:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   18d24:	b008      	add	sp, #32
   18d26:	bd70      	pop	{r4, r5, r6, pc}
		err = sdc_support_peripheral();
   18d28:	f7ec f9e4 	bl	50f4 <sdc_support_peripheral>
		if (err) {
   18d2c:	2800      	cmp	r0, #0
   18d2e:	d1f7      	bne.n	18d20 <hci_driver_open+0x14>
		err = sdc_support_dle();
   18d30:	f7ec f9c0 	bl	50b4 <sdc_support_dle>
		if (err) {
   18d34:	2800      	cmp	r0, #0
   18d36:	d1f3      	bne.n	18d20 <hci_driver_open+0x14>
		err = sdc_support_le_2m_phy();
   18d38:	f7ec f9cc 	bl	50d4 <sdc_support_le_2m_phy>
		if (err) {
   18d3c:	4605      	mov	r5, r0
   18d3e:	2800      	cmp	r0, #0
   18d40:	d1ee      	bne.n	18d20 <hci_driver_open+0x14>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18d42:	466c      	mov	r4, sp
   18d44:	4622      	mov	r2, r4
   18d46:	2101      	movs	r1, #1
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   18d48:	f88d 0000 	strb.w	r0, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18d4c:	f7ec f8a0 	bl	4e90 <sdc_cfg_set>
	if (required_memory < 0) {
   18d50:	2800      	cmp	r0, #0
   18d52:	dbe7      	blt.n	18d24 <hci_driver_open+0x18>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   18d54:	2601      	movs	r6, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18d56:	4622      	mov	r2, r4
   18d58:	2102      	movs	r1, #2
   18d5a:	4628      	mov	r0, r5
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   18d5c:	f88d 6000 	strb.w	r6, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18d60:	f7ec f896 	bl	4e90 <sdc_cfg_set>
	if (required_memory < 0) {
   18d64:	2800      	cmp	r0, #0
   18d66:	dbdd      	blt.n	18d24 <hci_driver_open+0x18>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   18d68:	4b2d      	ldr	r3, [pc, #180]	; (18e20 <hci_driver_open+0x114>)
   18d6a:	9300      	str	r3, [sp, #0]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18d6c:	4622      	mov	r2, r4
   18d6e:	2103      	movs	r1, #3
   18d70:	4628      	mov	r0, r5
   18d72:	f7ec f88d 	bl	4e90 <sdc_cfg_set>
	if (required_memory < 0) {
   18d76:	2800      	cmp	r0, #0
   18d78:	dbd4      	blt.n	18d24 <hci_driver_open+0x18>
	cfg.event_length.event_length_us =
   18d7a:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18d7e:	4622      	mov	r2, r4
   18d80:	2104      	movs	r1, #4
   18d82:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   18d84:	9300      	str	r3, [sp, #0]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18d86:	f7ec f883 	bl	4e90 <sdc_cfg_set>
	if (required_memory < 0) {
   18d8a:	2800      	cmp	r0, #0
   18d8c:	dbca      	blt.n	18d24 <hci_driver_open+0x18>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18d8e:	4622      	mov	r2, r4
   18d90:	2105      	movs	r1, #5
   18d92:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   18d94:	f88d 6000 	strb.w	r6, [sp]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18d98:	f7ec f87a 	bl	4e90 <sdc_cfg_set>
	if (required_memory < 0) {
   18d9c:	2800      	cmp	r0, #0
   18d9e:	dbc1      	blt.n	18d24 <hci_driver_open+0x18>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   18da0:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18da2:	4622      	mov	r2, r4
   18da4:	2107      	movs	r1, #7
   18da6:	4628      	mov	r0, r5
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   18da8:	f8ad 3000 	strh.w	r3, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18dac:	f7ec f870 	bl	4e90 <sdc_cfg_set>
		if (required_memory < 0) {
   18db0:	2800      	cmp	r0, #0
   18db2:	dbb7      	blt.n	18d24 <hci_driver_open+0x18>
	if (required_memory > sizeof(sdc_mempool)) {
   18db4:	f5b0 6fb0 	cmp.w	r0, #1408	; 0x580
   18db8:	dd08      	ble.n	18dcc <hci_driver_open+0xc0>
		k_panic();
   18dba:	4040      	eors	r0, r0
   18dbc:	f380 8811 	msr	BASEPRI, r0
   18dc0:	f04f 0004 	mov.w	r0, #4
   18dc4:	df02      	svc	2
		return -ENOMEM;
   18dc6:	f06f 000b 	mvn.w	r0, #11
   18dca:	e7ab      	b.n	18d24 <hci_driver_open+0x18>
   18dcc:	4815      	ldr	r0, [pc, #84]	; (18e24 <hci_driver_open+0x118>)
   18dce:	f00a f8c2 	bl	22f56 <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   18dd2:	b308      	cbz	r0, 18e18 <hci_driver_open+0x10c>
	sdc_rand_source_t rand_functions = {
   18dd4:	4b14      	ldr	r3, [pc, #80]	; (18e28 <hci_driver_open+0x11c>)
   18dd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   18dda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   18dde:	4620      	mov	r0, r4
   18de0:	f7ec f9da 	bl	5198 <sdc_rand_source_register>
	if (err) {
   18de4:	b9a8      	cbnz	r0, 18e12 <hci_driver_open+0x106>
	k_work_init(&receive_work, receive_work_handler);
   18de6:	4911      	ldr	r1, [pc, #68]	; (18e2c <hci_driver_open+0x120>)
   18de8:	4811      	ldr	r0, [pc, #68]	; (18e30 <hci_driver_open+0x124>)
   18dea:	f00a faf5 	bl	233d8 <k_work_init>
	err = MULTITHREADING_LOCK_ACQUIRE();
   18dee:	f04f 30ff 	mov.w	r0, #4294967295
   18df2:	f04f 31ff 	mov.w	r1, #4294967295
   18df6:	f7ff ff6d 	bl	18cd4 <multithreading_lock_acquire>
	if (!err) {
   18dfa:	4604      	mov	r4, r0
   18dfc:	b930      	cbnz	r0, 18e0c <hci_driver_open+0x100>
		err = sdc_enable(hci_driver_receive_process, sdc_mempool);
   18dfe:	490d      	ldr	r1, [pc, #52]	; (18e34 <hci_driver_open+0x128>)
   18e00:	480d      	ldr	r0, [pc, #52]	; (18e38 <hci_driver_open+0x12c>)
   18e02:	f7ec f8a1 	bl	4f48 <sdc_enable>
   18e06:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   18e08:	f7ff ff6c 	bl	18ce4 <multithreading_lock_release>
	if (err < 0) {
   18e0c:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   18e10:	e788      	b.n	18d24 <hci_driver_open+0x18>
		return -EINVAL;
   18e12:	f06f 0015 	mvn.w	r0, #21
   18e16:	e785      	b.n	18d24 <hci_driver_open+0x18>
		return -ENODEV;
   18e18:	f06f 0012 	mvn.w	r0, #18
   18e1c:	e782      	b.n	18d24 <hci_driver_open+0x18>
   18e1e:	bf00      	nop
   18e20:	02031b1b 	.word	0x02031b1b
   18e24:	00023c14 	.word	0x00023c14
   18e28:	00023f68 	.word	0x00023f68
   18e2c:	00022c91 	.word	0x00022c91
   18e30:	20002988 	.word	0x20002988
   18e34:	20003614 	.word	0x20003614
   18e38:	00018e8d 	.word	0x00018e8d

00018e3c <rand_prio_low_vector_get>:
{
   18e3c:	b538      	push	{r3, r4, r5, lr}
   18e3e:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   18e40:	4807      	ldr	r0, [pc, #28]	; (18e60 <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   18e42:	6883      	ldr	r3, [r0, #8]
   18e44:	685d      	ldr	r5, [r3, #4]
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   18e46:	460a      	mov	r2, r1
   18e48:	b135      	cbz	r5, 18e58 <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   18e4a:	2300      	movs	r3, #0
   18e4c:	4621      	mov	r1, r4
   18e4e:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   18e50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   18e54:	b2c0      	uxtb	r0, r0
   18e56:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   18e58:	f06f 0085 	mvn.w	r0, #133	; 0x85
   18e5c:	e7f8      	b.n	18e50 <rand_prio_low_vector_get+0x14>
   18e5e:	bf00      	nop
   18e60:	00023c14 	.word	0x00023c14

00018e64 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   18e64:	4901      	ldr	r1, [pc, #4]	; (18e6c <receive_signal_raise+0x8>)
   18e66:	4802      	ldr	r0, [pc, #8]	; (18e70 <receive_signal_raise+0xc>)
   18e68:	f00a bacf 	b.w	2340a <k_work_submit_to_queue>
   18e6c:	20002988 	.word	0x20002988
   18e70:	20001db8 	.word	0x20001db8

00018e74 <rand_prio_low_vector_get_blocking>:
{
   18e74:	b410      	push	{r4}
   18e76:	4603      	mov	r3, r0
   18e78:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
   18e7a:	4803      	ldr	r0, [pc, #12]	; (18e88 <rand_prio_low_vector_get_blocking+0x14>)
   18e7c:	6881      	ldr	r1, [r0, #8]
   18e7e:	680c      	ldr	r4, [r1, #0]
   18e80:	4619      	mov	r1, r3
   18e82:	4623      	mov	r3, r4
}
   18e84:	bc10      	pop	{r4}
   18e86:	4718      	bx	r3
   18e88:	00023c14 	.word	0x00023c14

00018e8c <hci_driver_receive_process>:
{
   18e8c:	b570      	push	{r4, r5, r6, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   18e8e:	f04f 30ff 	mov.w	r0, #4294967295
   18e92:	f04f 31ff 	mov.w	r1, #4294967295
   18e96:	f7ff ff1d 	bl	18cd4 <multithreading_lock_acquire>
	if (!errcode) {
   18e9a:	b338      	cbz	r0, 18eec <hci_driver_receive_process+0x60>
		return false;
   18e9c:	2400      	movs	r4, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   18e9e:	f04f 30ff 	mov.w	r0, #4294967295
   18ea2:	f04f 31ff 	mov.w	r1, #4294967295
   18ea6:	f7ff ff15 	bl	18cd4 <multithreading_lock_acquire>
	if (!errcode) {
   18eaa:	2800      	cmp	r0, #0
   18eac:	d14a      	bne.n	18f44 <hci_driver_receive_process+0xb8>
		errcode = sdc_hci_data_get(p_hci_buffer);
   18eae:	4d27      	ldr	r5, [pc, #156]	; (18f4c <hci_driver_receive_process+0xc0>)
   18eb0:	4628      	mov	r0, r5
   18eb2:	f7f4 fc49 	bl	d748 <sdc_hci_data_get>
   18eb6:	4606      	mov	r6, r0
		MULTITHREADING_LOCK_RELEASE();
   18eb8:	f7ff ff14 	bl	18ce4 <multithreading_lock_release>
	if (errcode) {
   18ebc:	2e00      	cmp	r6, #0
   18ebe:	d141      	bne.n	18f44 <hci_driver_receive_process+0xb8>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   18ec0:	f04f 32ff 	mov.w	r2, #4294967295
   18ec4:	f04f 33ff 	mov.w	r3, #4294967295
   18ec8:	2003      	movs	r0, #3
   18eca:	f7fa fee7 	bl	13c9c <bt_buf_get_rx>
	if (!data_buf) {
   18ece:	4604      	mov	r4, r0
   18ed0:	b140      	cbz	r0, 18ee4 <hci_driver_receive_process+0x58>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   18ed2:	886a      	ldrh	r2, [r5, #2]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18ed4:	4629      	mov	r1, r5
   18ed6:	3204      	adds	r2, #4
   18ed8:	3008      	adds	r0, #8
   18eda:	f009 fb6d 	bl	225b8 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   18ede:	4620      	mov	r0, r4
   18ee0:	f7fb fb66 	bl	145b0 <bt_recv>
}
   18ee4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		receive_signal_raise();
   18ee8:	f7ff bfbc 	b.w	18e64 <receive_signal_raise>
		errcode = hci_internal_evt_get(p_hci_buffer);
   18eec:	4d17      	ldr	r5, [pc, #92]	; (18f4c <hci_driver_receive_process+0xc0>)
   18eee:	4628      	mov	r0, r5
   18ef0:	f000 fb26 	bl	19540 <hci_internal_evt_get>
   18ef4:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   18ef6:	f7ff fef5 	bl	18ce4 <multithreading_lock_release>
	if (errcode) {
   18efa:	2c00      	cmp	r4, #0
   18efc:	d1ce      	bne.n	18e9c <hci_driver_receive_process+0x10>
	switch (hdr->evt) {
   18efe:	7828      	ldrb	r0, [r5, #0]
   18f00:	283e      	cmp	r0, #62	; 0x3e
   18f02:	d015      	beq.n	18f30 <hci_driver_receive_process+0xa4>
   18f04:	28ff      	cmp	r0, #255	; 0xff
   18f06:	d01a      	beq.n	18f3e <hci_driver_receive_process+0xb2>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   18f08:	f04f 32ff 	mov.w	r2, #4294967295
   18f0c:	f04f 33ff 	mov.w	r3, #4294967295
   18f10:	4621      	mov	r1, r4
   18f12:	f7fa feed 	bl	13cf0 <bt_buf_get_evt>
	if (!evt_buf) {
   18f16:	4604      	mov	r4, r0
   18f18:	b140      	cbz	r0, 18f2c <hci_driver_receive_process+0xa0>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   18f1a:	786a      	ldrb	r2, [r5, #1]
   18f1c:	490b      	ldr	r1, [pc, #44]	; (18f4c <hci_driver_receive_process+0xc0>)
   18f1e:	3202      	adds	r2, #2
   18f20:	3008      	adds	r0, #8
   18f22:	f009 fb49 	bl	225b8 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   18f26:	4620      	mov	r0, r4
   18f28:	f7fb fb42 	bl	145b0 <bt_recv>
	return true;
   18f2c:	2401      	movs	r4, #1
   18f2e:	e7b6      	b.n	18e9e <hci_driver_receive_process+0x12>
		switch (me->subevent) {
   18f30:	78ab      	ldrb	r3, [r5, #2]
   18f32:	2b02      	cmp	r3, #2
		switch (subevent) {
   18f34:	d1e8      	bne.n	18f08 <hci_driver_receive_process+0x7c>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   18f36:	2200      	movs	r2, #0
   18f38:	2300      	movs	r3, #0
		switch (subevent) {
   18f3a:	2401      	movs	r4, #1
   18f3c:	e7e8      	b.n	18f10 <hci_driver_receive_process+0x84>
   18f3e:	78ab      	ldrb	r3, [r5, #2]
   18f40:	2b80      	cmp	r3, #128	; 0x80
   18f42:	e7f7      	b.n	18f34 <hci_driver_receive_process+0xa8>
	if (received_evt || received_data) {
   18f44:	2c00      	cmp	r4, #0
   18f46:	d1cd      	bne.n	18ee4 <hci_driver_receive_process+0x58>
}
   18f48:	bd70      	pop	{r4, r5, r6, pc}
   18f4a:	bf00      	nop
   18f4c:	200035ce 	.word	0x200035ce

00018f50 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   18f50:	b538      	push	{r3, r4, r5, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   18f52:	4c8a      	ldr	r4, [pc, #552]	; (1917c <hci_internal_cmd_put+0x22c>)
   18f54:	7823      	ldrb	r3, [r4, #0]
   18f56:	2b00      	cmp	r3, #0
   18f58:	f040 82ed 	bne.w	19536 <hci_internal_cmd_put+0x5e6>
	return ((uint16_t)src[1] << 8) | src[0];
   18f5c:	8805      	ldrh	r5, [r0, #0]
	switch (BT_OGF(opcode)) {
   18f5e:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   18f62:	b22b      	sxth	r3, r5
   18f64:	ea4f 2295 	mov.w	r2, r5, lsr #10
   18f68:	d20d      	bcs.n	18f86 <hci_internal_cmd_put+0x36>
   18f6a:	b17a      	cbz	r2, 18f8c <hci_internal_cmd_put+0x3c>
   18f6c:	3a01      	subs	r2, #1
   18f6e:	2a07      	cmp	r2, #7
   18f70:	d80c      	bhi.n	18f8c <hci_internal_cmd_put+0x3c>
   18f72:	e8df f012 	tbh	[pc, r2, lsl #1]
   18f76:	000d      	.short	0x000d
   18f78:	0029000b 	.word	0x0029000b
   18f7c:	000b005d 	.word	0x000b005d
   18f80:	000b000b 	.word	0x000b000b
   18f84:	0107      	.short	0x0107
   18f86:	2a3f      	cmp	r2, #63	; 0x3f
   18f88:	f000 825e 	beq.w	19448 <hci_internal_cmd_put+0x4f8>
	switch (opcode)	{
   18f8c:	2001      	movs	r0, #1
   18f8e:	e00e      	b.n	18fae <hci_internal_cmd_put+0x5e>
	switch (opcode)	{
   18f90:	f240 4206 	movw	r2, #1030	; 0x406
   18f94:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   18f96:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   18f9a:	d006      	beq.n	18faa <hci_internal_cmd_put+0x5a>
   18f9c:	f240 421d 	movw	r2, #1053	; 0x41d
   18fa0:	4293      	cmp	r3, r2
   18fa2:	d1f3      	bne.n	18f8c <hci_internal_cmd_put+0x3c>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   18fa4:	f7f4 fd05 	bl	d9b2 <sdc_hci_cmd_lc_read_remote_version_information>
   18fa8:	e001      	b.n	18fae <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   18faa:	f7f4 fd00 	bl	d9ae <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   18fae:	230f      	movs	r3, #15
   18fb0:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   18fb2:	2304      	movs	r3, #4
   18fb4:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   18fb6:	2301      	movs	r3, #1
	evt_data->status = status_code;
   18fb8:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   18fba:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   18fbc:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   18fc0:	2301      	movs	r3, #1
   18fc2:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   18fc4:	2000      	movs	r0, #0
}
   18fc6:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   18fc8:	f640 4263 	movw	r2, #3171	; 0xc63
   18fcc:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   18fce:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   18fd2:	d025      	beq.n	19020 <hci_internal_cmd_put+0xd0>
   18fd4:	dc0f      	bgt.n	18ff6 <hci_internal_cmd_put+0xa6>
   18fd6:	f640 4203 	movw	r2, #3075	; 0xc03
   18fda:	4293      	cmp	r3, r2
   18fdc:	d018      	beq.n	19010 <hci_internal_cmd_put+0xc0>
   18fde:	f640 422d 	movw	r2, #3117	; 0xc2d
   18fe2:	4293      	cmp	r3, r2
   18fe4:	d017      	beq.n	19016 <hci_internal_cmd_put+0xc6>
   18fe6:	f640 4201 	movw	r2, #3073	; 0xc01
   18fea:	4293      	cmp	r3, r2
   18fec:	d1ce      	bne.n	18f8c <hci_internal_cmd_put+0x3c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   18fee:	f7f4 fbd4 	bl	d79a <sdc_hci_cmd_cb_set_event_mask>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   18ff2:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   18ff4:	e0be      	b.n	19174 <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   18ff6:	f640 427b 	movw	r2, #3195	; 0xc7b
   18ffa:	4293      	cmp	r3, r2
   18ffc:	d013      	beq.n	19026 <hci_internal_cmd_put+0xd6>
   18ffe:	f640 427c 	movw	r2, #3196	; 0xc7c
   19002:	4293      	cmp	r3, r2
   19004:	d1c2      	bne.n	18f8c <hci_internal_cmd_put+0x3c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   19006:	495e      	ldr	r1, [pc, #376]	; (19180 <hci_internal_cmd_put+0x230>)
   19008:	f7f4 fbd1 	bl	d7ae <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1900c:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1900e:	e0b1      	b.n	19174 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_reset();
   19010:	f7ec f9b6 	bl	5380 <sdc_hci_cmd_cb_reset>
   19014:	e7ed      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   19016:	495a      	ldr	r1, [pc, #360]	; (19180 <hci_internal_cmd_put+0x230>)
   19018:	f7f4 fbbd 	bl	d796 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1901c:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1901e:	e0a9      	b.n	19174 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   19020:	f7f4 fbc0 	bl	d7a4 <sdc_hci_cmd_cb_set_event_mask_page_2>
   19024:	e7e5      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   19026:	4956      	ldr	r1, [pc, #344]	; (19180 <hci_internal_cmd_put+0x230>)
   19028:	f7f4 fbb3 	bl	d792 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1902c:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1902e:	e0a1      	b.n	19174 <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   19030:	f5a5 5380 	sub.w	r3, r5, #4096	; 0x1000
   19034:	3b01      	subs	r3, #1
   19036:	2b08      	cmp	r3, #8
   19038:	d8a8      	bhi.n	18f8c <hci_internal_cmd_put+0x3c>
   1903a:	a201      	add	r2, pc, #4	; (adr r2, 19040 <hci_internal_cmd_put+0xf0>)
   1903c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19040:	00019065 	.word	0x00019065
   19044:	0001906f 	.word	0x0001906f
   19048:	00019155 	.word	0x00019155
   1904c:	00018f8d 	.word	0x00018f8d
   19050:	00018f8d 	.word	0x00018f8d
   19054:	00018f8d 	.word	0x00018f8d
   19058:	00018f8d 	.word	0x00018f8d
   1905c:	00018f8d 	.word	0x00018f8d
   19060:	0001916d 	.word	0x0001916d
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   19064:	4846      	ldr	r0, [pc, #280]	; (19180 <hci_internal_cmd_put+0x230>)
   19066:	f7f4 fc57 	bl	d918 <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1906a:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1906c:	e082      	b.n	19174 <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   1906e:	4844      	ldr	r0, [pc, #272]	; (19180 <hci_internal_cmd_put+0x230>)
   19070:	222f      	movs	r2, #47	; 0x2f
   19072:	2100      	movs	r1, #0
   19074:	f007 fa77 	bl	20566 <memset>
	cmds->hci_disconnect = 1;
   19078:	79e3      	ldrb	r3, [r4, #7]
   1907a:	f043 0320 	orr.w	r3, r3, #32
   1907e:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   19080:	7a63      	ldrb	r3, [r4, #9]
   19082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19086:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   19088:	7b23      	ldrb	r3, [r4, #12]
   1908a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1908e:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   19090:	7c63      	ldrb	r3, [r4, #17]
   19092:	f043 0304 	orr.w	r3, r3, #4
   19096:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   19098:	7d63      	ldrb	r3, [r4, #21]
   1909a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1909e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   190a2:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   190a4:	7da3      	ldrb	r3, [r4, #22]
   190a6:	f043 0302 	orr.w	r3, r3, #2
   190aa:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   190ac:	7f63      	ldrb	r3, [r4, #29]
   190ae:	f043 0304 	orr.w	r3, r3, #4
   190b2:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   190b4:	f894 3020 	ldrb.w	r3, [r4, #32]
   190b8:	f063 0308 	orn	r3, r3, #8
   190bc:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   190c0:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   190c4:	f063 033c 	orn	r3, r3, #60	; 0x3c
   190c8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   190cc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   190d0:	f063 030c 	orn	r3, r3, #12
   190d4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   190d8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   190dc:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   190e0:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   190e4:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   190e8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   190ec:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   190f0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   190f4:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   190f8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   190fc:	f063 033f 	orn	r3, r3, #63	; 0x3f
   19100:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   19104:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   19108:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   1910c:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   19110:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   19114:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   19118:	f063 0301 	orn	r3, r3, #1
   1911c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   19120:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   19124:	f043 0301 	orr.w	r3, r3, #1
   19128:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1912c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   19130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19134:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   19138:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1913c:	f043 0304 	orr.w	r3, r3, #4
   19140:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->hci_le_generate_dhkey_v2 = 1;
   19144:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   19148:	f043 0304 	orr.w	r3, r3, #4
   1914c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		return 0;
   19150:	2344      	movs	r3, #68	; 0x44
   19152:	e0f6      	b.n	19342 <hci_internal_cmd_put+0x3f2>
	memset(features, 0, sizeof(*features));
   19154:	480a      	ldr	r0, [pc, #40]	; (19180 <hci_internal_cmd_put+0x230>)
   19156:	2208      	movs	r2, #8
   19158:	2100      	movs	r1, #0
   1915a:	f007 fa04 	bl	20566 <memset>
	features->bdedr_not_supported = 1;
   1915e:	7ae3      	ldrb	r3, [r4, #11]
   19160:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   19164:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	*(buf + 4) = states2;
   19168:	72e3      	strb	r3, [r4, #11]
   1916a:	e0e9      	b.n	19340 <hci_internal_cmd_put+0x3f0>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1916c:	4804      	ldr	r0, [pc, #16]	; (19180 <hci_internal_cmd_put+0x230>)
   1916e:	f7f4 fbd1 	bl	d914 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   19172:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   19174:	2801      	cmp	r0, #1
   19176:	f040 80e5 	bne.w	19344 <hci_internal_cmd_put+0x3f4>
   1917a:	e718      	b.n	18fae <hci_internal_cmd_put+0x5e>
   1917c:	20003b94 	.word	0x20003b94
   19180:	20003b9b 	.word	0x20003b9b
	switch (opcode)	{
   19184:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
   19188:	3b01      	subs	r3, #1
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1918a:	3003      	adds	r0, #3
	switch (opcode)	{
   1918c:	2b5d      	cmp	r3, #93	; 0x5d
   1918e:	f63f aefd 	bhi.w	18f8c <hci_internal_cmd_put+0x3c>
   19192:	a201      	add	r2, pc, #4	; (adr r2, 19198 <hci_internal_cmd_put+0x248>)
   19194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19198:	00019311 	.word	0x00019311
   1919c:	00019317 	.word	0x00019317
   191a0:	0001931f 	.word	0x0001931f
   191a4:	00018f8d 	.word	0x00018f8d
   191a8:	00019355 	.word	0x00019355
   191ac:	0001935b 	.word	0x0001935b
   191b0:	00019361 	.word	0x00019361
   191b4:	0001936b 	.word	0x0001936b
   191b8:	00019371 	.word	0x00019371
   191bc:	00019377 	.word	0x00019377
   191c0:	00018f8d 	.word	0x00018f8d
   191c4:	00018f8d 	.word	0x00018f8d
   191c8:	00018f8d 	.word	0x00018f8d
   191cc:	00018f8d 	.word	0x00018f8d
   191d0:	0001937d 	.word	0x0001937d
   191d4:	00019385 	.word	0x00019385
   191d8:	0001938b 	.word	0x0001938b
   191dc:	00019391 	.word	0x00019391
   191e0:	00018f8d 	.word	0x00018f8d
   191e4:	00018f8d 	.word	0x00018f8d
   191e8:	00019397 	.word	0x00019397
   191ec:	000193a1 	.word	0x000193a1
   191f0:	000193a7 	.word	0x000193a7
   191f4:	000193b1 	.word	0x000193b1
   191f8:	00018f8d 	.word	0x00018f8d
   191fc:	000193b9 	.word	0x000193b9
   19200:	000193c1 	.word	0x000193c1
   19204:	000193c9 	.word	0x000193c9
   19208:	00018f8d 	.word	0x00018f8d
   1920c:	00018f8d 	.word	0x00018f8d
   19210:	00018f8d 	.word	0x00018f8d
   19214:	00018f8d 	.word	0x00018f8d
   19218:	00018f8d 	.word	0x00018f8d
   1921c:	000193d1 	.word	0x000193d1
   19220:	000193d9 	.word	0x000193d9
   19224:	000193e1 	.word	0x000193e1
   19228:	000193e7 	.word	0x000193e7
   1922c:	000193ed 	.word	0x000193ed
   19230:	000193f9 	.word	0x000193f9
   19234:	000193ff 	.word	0x000193ff
   19238:	00019405 	.word	0x00019405
   1923c:	0001940b 	.word	0x0001940b
   19240:	00018f8d 	.word	0x00018f8d
   19244:	00018f8d 	.word	0x00018f8d
   19248:	00019413 	.word	0x00019413
   1924c:	00019419 	.word	0x00019419
   19250:	0001941f 	.word	0x0001941f
   19254:	00019427 	.word	0x00019427
   19258:	0001942f 	.word	0x0001942f
   1925c:	00019435 	.word	0x00019435
   19260:	00018f8d 	.word	0x00018f8d
   19264:	00018f8d 	.word	0x00018f8d
   19268:	00018f8d 	.word	0x00018f8d
   1926c:	00018f8d 	.word	0x00018f8d
   19270:	00018f8d 	.word	0x00018f8d
   19274:	00018f8d 	.word	0x00018f8d
   19278:	00018f8d 	.word	0x00018f8d
   1927c:	00018f8d 	.word	0x00018f8d
   19280:	00018f8d 	.word	0x00018f8d
   19284:	00018f8d 	.word	0x00018f8d
   19288:	00018f8d 	.word	0x00018f8d
   1928c:	00018f8d 	.word	0x00018f8d
   19290:	00018f8d 	.word	0x00018f8d
   19294:	00018f8d 	.word	0x00018f8d
   19298:	00018f8d 	.word	0x00018f8d
   1929c:	00018f8d 	.word	0x00018f8d
   192a0:	00018f8d 	.word	0x00018f8d
   192a4:	00018f8d 	.word	0x00018f8d
   192a8:	00018f8d 	.word	0x00018f8d
   192ac:	00018f8d 	.word	0x00018f8d
   192b0:	00018f8d 	.word	0x00018f8d
   192b4:	00018f8d 	.word	0x00018f8d
   192b8:	00018f8d 	.word	0x00018f8d
   192bc:	00018f8d 	.word	0x00018f8d
   192c0:	0001943b 	.word	0x0001943b
   192c4:	00018f8d 	.word	0x00018f8d
   192c8:	00018f8d 	.word	0x00018f8d
   192cc:	00019443 	.word	0x00019443
   192d0:	00018f8d 	.word	0x00018f8d
   192d4:	00018f8d 	.word	0x00018f8d
   192d8:	00018f8d 	.word	0x00018f8d
   192dc:	00018f8d 	.word	0x00018f8d
   192e0:	00018f8d 	.word	0x00018f8d
   192e4:	00018f8d 	.word	0x00018f8d
   192e8:	00018f8d 	.word	0x00018f8d
   192ec:	00018f8d 	.word	0x00018f8d
   192f0:	00018f8d 	.word	0x00018f8d
   192f4:	00018f8d 	.word	0x00018f8d
   192f8:	00018f8d 	.word	0x00018f8d
   192fc:	00018f8d 	.word	0x00018f8d
   19300:	00018f8d 	.word	0x00018f8d
   19304:	00018f8d 	.word	0x00018f8d
   19308:	00018f8d 	.word	0x00018f8d
   1930c:	000193f3 	.word	0x000193f3
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   19310:	f7f4 fb3c 	bl	d98c <sdc_hci_cmd_le_set_event_mask>
   19314:	e66d      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   19316:	4889      	ldr	r0, [pc, #548]	; (1953c <hci_internal_cmd_put+0x5ec>)
   19318:	f7f4 fb16 	bl	d948 <sdc_hci_cmd_le_read_buffer_size>
   1931c:	e67e      	b.n	1901c <hci_internal_cmd_put+0xcc>
	memset(features, 0, sizeof(*features));
   1931e:	4887      	ldr	r0, [pc, #540]	; (1953c <hci_internal_cmd_put+0x5ec>)
   19320:	2205      	movs	r2, #5
   19322:	2100      	movs	r1, #0
   19324:	f007 f91f 	bl	20566 <memset>
	features->le_encryption = 1;
   19328:	79e3      	ldrb	r3, [r4, #7]
   1932a:	f023 037d 	bic.w	r3, r3, #125	; 0x7d
   1932e:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
   19332:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   19334:	7a23      	ldrb	r3, [r4, #8]
   19336:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1933a:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1933e:	7223      	strb	r3, [r4, #8]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   19340:	230c      	movs	r3, #12
		return 0;
   19342:	2000      	movs	r0, #0
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   19344:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   19346:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   19348:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1934a:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1934c:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1934e:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   19350:	71a0      	strb	r0, [r4, #6]
}
   19352:	e635      	b.n	18fc0 <hci_internal_cmd_put+0x70>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   19354:	f7f4 fb23 	bl	d99e <sdc_hci_cmd_le_set_random_address>
   19358:	e64b      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1935a:	f7f4 fb11 	bl	d980 <sdc_hci_cmd_le_set_adv_params>
   1935e:	e648      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   19360:	4876      	ldr	r0, [pc, #472]	; (1953c <hci_internal_cmd_put+0x5ec>)
   19362:	f7f4 faef 	bl	d944 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   19366:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   19368:	e704      	b.n	19174 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1936a:	f7f4 fb05 	bl	d978 <sdc_hci_cmd_le_set_adv_data>
   1936e:	e640      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   19370:	f7f4 fb19 	bl	d9a6 <sdc_hci_cmd_le_set_scan_response_data>
   19374:	e63d      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   19376:	f7f4 fb01 	bl	d97c <sdc_hci_cmd_le_set_adv_enable>
   1937a:	e63a      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1937c:	486f      	ldr	r0, [pc, #444]	; (1953c <hci_internal_cmd_put+0x5ec>)
   1937e:	f7f4 fae7 	bl	d950 <sdc_hci_cmd_le_read_filter_accept_list_size>
   19382:	e7f0      	b.n	19366 <hci_internal_cmd_put+0x416>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   19384:	f7f4 face 	bl	d924 <sdc_hci_cmd_le_clear_filter_accept_list>
   19388:	e633      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1938a:	f7f4 fac7 	bl	d91c <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   1938e:	e630      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   19390:	f7f4 faec 	bl	d96c <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   19394:	e62d      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   19396:	4969      	ldr	r1, [pc, #420]	; (1953c <hci_internal_cmd_put+0x5ec>)
   19398:	f7f4 fad8 	bl	d94c <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1939c:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1939e:	e6e9      	b.n	19174 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   193a0:	f7f4 fadc 	bl	d95c <sdc_hci_cmd_le_read_remote_features>
   193a4:	e603      	b.n	18fae <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   193a6:	4965      	ldr	r1, [pc, #404]	; (1953c <hci_internal_cmd_put+0x5ec>)
   193a8:	f7f4 fac0 	bl	d92c <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   193ac:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   193ae:	e6e1      	b.n	19174 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   193b0:	4862      	ldr	r0, [pc, #392]	; (1953c <hci_internal_cmd_put+0x5ec>)
   193b2:	f7f4 fac5 	bl	d940 <sdc_hci_cmd_le_rand>
   193b6:	e658      	b.n	1906a <hci_internal_cmd_put+0x11a>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   193b8:	4960      	ldr	r1, [pc, #384]	; (1953c <hci_internal_cmd_put+0x5ec>)
   193ba:	f7f4 fabd 	bl	d938 <sdc_hci_cmd_le_long_term_key_request_reply>
   193be:	e625      	b.n	1900c <hci_internal_cmd_put+0xbc>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   193c0:	495e      	ldr	r1, [pc, #376]	; (1953c <hci_internal_cmd_put+0x5ec>)
   193c2:	f7f4 fab5 	bl	d930 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   193c6:	e621      	b.n	1900c <hci_internal_cmd_put+0xbc>
	*buf = states1;
   193c8:	238f      	movs	r3, #143	; 0x8f
   193ca:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   193cc:	23c0      	movs	r3, #192	; 0xc0
   193ce:	e6cb      	b.n	19168 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   193d0:	495a      	ldr	r1, [pc, #360]	; (1953c <hci_internal_cmd_put+0x5ec>)
   193d2:	f7f4 fad7 	bl	d984 <sdc_hci_cmd_le_set_data_length>
   193d6:	e619      	b.n	1900c <hci_internal_cmd_put+0xbc>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   193d8:	4858      	ldr	r0, [pc, #352]	; (1953c <hci_internal_cmd_put+0x5ec>)
   193da:	f7f4 fac3 	bl	d964 <sdc_hci_cmd_le_read_suggested_default_data_length>
   193de:	e625      	b.n	1902c <hci_internal_cmd_put+0xdc>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   193e0:	f7f4 fae3 	bl	d9aa <sdc_hci_cmd_le_write_suggested_default_data_length>
   193e4:	e605      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
		return hci_cmd_le_read_local_p256_public_key();
   193e6:	f000 f9d1 	bl	1978c <hci_cmd_le_read_local_p256_public_key>
   193ea:	e5e0      	b.n	18fae <hci_internal_cmd_put+0x5e>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   193ec:	f009 fc5c 	bl	22ca8 <hci_cmd_le_generate_dhkey>
   193f0:	e5dd      	b.n	18fae <hci_internal_cmd_put+0x5e>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   193f2:	f009 fc5c 	bl	22cae <hci_cmd_le_generate_dhkey_v2>
   193f6:	e5fc      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   193f8:	f7f4 fa92 	bl	d920 <sdc_hci_cmd_le_add_device_to_resolving_list>
   193fc:	e5f9      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   193fe:	f7f4 fab7 	bl	d970 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   19402:	e5f6      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_clear_resolving_list();
   19404:	f7f4 fa90 	bl	d928 <sdc_hci_cmd_le_clear_resolving_list>
   19408:	e5f3      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1940a:	484c      	ldr	r0, [pc, #304]	; (1953c <hci_internal_cmd_put+0x5ec>)
   1940c:	f7f4 faa8 	bl	d960 <sdc_hci_cmd_le_read_resolving_list_size>
   19410:	e7a9      	b.n	19366 <hci_internal_cmd_put+0x416>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   19412:	f7f4 faaf 	bl	d974 <sdc_hci_cmd_le_set_address_resolution_enable>
   19416:	e5ec      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   19418:	f7f4 fac3 	bl	d9a2 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   1941c:	e5e9      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1941e:	4847      	ldr	r0, [pc, #284]	; (1953c <hci_internal_cmd_put+0x5ec>)
   19420:	f7f4 fa98 	bl	d954 <sdc_hci_cmd_le_read_max_data_length>
   19424:	e621      	b.n	1906a <hci_internal_cmd_put+0x11a>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   19426:	4945      	ldr	r1, [pc, #276]	; (1953c <hci_internal_cmd_put+0x5ec>)
   19428:	f7f4 fa96 	bl	d958 <sdc_hci_cmd_le_read_phy>
   1942c:	e5fe      	b.n	1902c <hci_internal_cmd_put+0xdc>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1942e:	f7f4 faab 	bl	d988 <sdc_hci_cmd_le_set_default_phy>
   19432:	e5de      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   19434:	f7f4 faaf 	bl	d996 <sdc_hci_cmd_le_set_phy>
   19438:	e5b9      	b.n	18fae <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1943a:	4840      	ldr	r0, [pc, #256]	; (1953c <hci_internal_cmd_put+0x5ec>)
   1943c:	f7f4 fa94 	bl	d968 <sdc_hci_cmd_le_read_transmit_power>
   19440:	e5e4      	b.n	1900c <hci_internal_cmd_put+0xbc>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   19442:	f7f4 faaa 	bl	d99a <sdc_hci_cmd_le_set_privacy_mode>
   19446:	e5d4      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
	switch (opcode)	{
   19448:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   1944c:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1944e:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   19452:	d821      	bhi.n	19498 <hci_internal_cmd_put+0x548>
   19454:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   19458:	f43f ad98 	beq.w	18f8c <hci_internal_cmd_put+0x3c>
   1945c:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   19460:	3b01      	subs	r3, #1
   19462:	2b09      	cmp	r3, #9
   19464:	f63f ad92 	bhi.w	18f8c <hci_internal_cmd_put+0x3c>
   19468:	a201      	add	r2, pc, #4	; (adr r2, 19470 <hci_internal_cmd_put+0x520>)
   1946a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1946e:	bf00      	nop
   19470:	000194b9 	.word	0x000194b9
   19474:	000194c3 	.word	0x000194c3
   19478:	00018f8d 	.word	0x00018f8d
   1947c:	00018f8d 	.word	0x00018f8d
   19480:	00018f8d 	.word	0x00018f8d
   19484:	000194fb 	.word	0x000194fb
   19488:	00018f8d 	.word	0x00018f8d
   1948c:	00018f8d 	.word	0x00018f8d
   19490:	000194e7 	.word	0x000194e7
   19494:	000194f1 	.word	0x000194f1
   19498:	f505 7340 	add.w	r3, r5, #768	; 0x300
   1949c:	b29b      	uxth	r3, r3
   1949e:	2b05      	cmp	r3, #5
   194a0:	f63f ad74 	bhi.w	18f8c <hci_internal_cmd_put+0x3c>
   194a4:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   194a8:	2b05      	cmp	r3, #5
   194aa:	f63f ad6f 	bhi.w	18f8c <hci_internal_cmd_put+0x3c>
   194ae:	e8df f003 	tbb	[pc, r3]
   194b2:	3327      	.short	0x3327
   194b4:	3f3c3936 	.word	0x3f3c3936
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   194b8:	4820      	ldr	r0, [pc, #128]	; (1953c <hci_internal_cmd_put+0x5ec>)
   194ba:	f7eb ff75 	bl	53a8 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   194be:	2310      	movs	r3, #16
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   194c0:	e658      	b.n	19174 <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   194c2:	481e      	ldr	r0, [pc, #120]	; (1953c <hci_internal_cmd_put+0x5ec>)
   194c4:	2202      	movs	r2, #2
   194c6:	2100      	movs	r1, #0
   194c8:	f007 f84d 	bl	20566 <memset>
	cmds->read_version_info = 1;
   194cc:	79e3      	ldrb	r3, [r4, #7]
   194ce:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   194d2:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   194d6:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   194d8:	7a23      	ldrb	r3, [r4, #8]
   194da:	f023 0307 	bic.w	r3, r3, #7
   194de:	f043 0307 	orr.w	r3, r3, #7
   194e2:	7223      	strb	r3, [r4, #8]
}
   194e4:	e634      	b.n	19150 <hci_internal_cmd_put+0x200>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   194e6:	4815      	ldr	r0, [pc, #84]	; (1953c <hci_internal_cmd_put+0x5ec>)
   194e8:	f7f4 f9c3 	bl	d872 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   194ec:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   194ee:	e641      	b.n	19174 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   194f0:	4812      	ldr	r0, [pc, #72]	; (1953c <hci_internal_cmd_put+0x5ec>)
   194f2:	f7f4 f971 	bl	d7d8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   194f6:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   194f8:	e63c      	b.n	19174 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   194fa:	f7f4 fa09 	bl	d910 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   194fe:	e578      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
	memset(cmds, 0, sizeof(*cmds));
   19500:	480e      	ldr	r0, [pc, #56]	; (1953c <hci_internal_cmd_put+0x5ec>)
   19502:	2202      	movs	r2, #2
   19504:	2100      	movs	r1, #0
   19506:	f007 f82e 	bl	20566 <memset>
	cmds->read_supported_vs_commands = 1;
   1950a:	79e3      	ldrb	r3, [r4, #7]
   1950c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   19510:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   19514:	71e3      	strb	r3, [r4, #7]
}
   19516:	e61b      	b.n	19150 <hci_internal_cmd_put+0x200>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   19518:	f7f4 f957 	bl	d7ca <sdc_hci_cmd_vs_llpm_mode_set>
   1951c:	e569      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1951e:	f7f4 f950 	bl	d7c2 <sdc_hci_cmd_vs_conn_update>
   19522:	e566      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   19524:	f7f4 f945 	bl	d7b2 <sdc_hci_cmd_vs_conn_event_extend>
   19528:	e563      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1952a:	f7f4 f950 	bl	d7ce <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1952e:	e560      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   19530:	f7f4 f949 	bl	d7c6 <sdc_hci_cmd_vs_event_length_set>
   19534:	e55d      	b.n	18ff2 <hci_internal_cmd_put+0xa2>
		return -NRF_EPERM;
   19536:	f04f 30ff 	mov.w	r0, #4294967295
   1953a:	e544      	b.n	18fc6 <hci_internal_cmd_put+0x76>
   1953c:	20003b9b 	.word	0x20003b9b

00019540 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   19540:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   19542:	4c07      	ldr	r4, [pc, #28]	; (19560 <hci_internal_evt_get+0x20>)
   19544:	7823      	ldrb	r3, [r4, #0]
   19546:	b91b      	cbnz	r3, 19550 <hci_internal_evt_get+0x10>

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   19548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   1954c:	f7f4 b914 	b.w	d778 <sdc_hci_evt_get>
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   19550:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   19552:	1c61      	adds	r1, r4, #1
   19554:	3202      	adds	r2, #2
   19556:	f006 fffb 	bl	20550 <memcpy>
		cmd_complete_or_status.occurred = false;
   1955a:	2000      	movs	r0, #0
   1955c:	7020      	strb	r0, [r4, #0]
}
   1955e:	bd10      	pop	{r4, pc}
   19560:	20003b94 	.word	0x20003b94

00019564 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   19564:	b570      	push	{r4, r5, r6, lr}
   19566:	4605      	mov	r5, r0
   19568:	460e      	mov	r6, r1
   1956a:	4c08      	ldr	r4, [pc, #32]	; (1958c <bt_rand+0x28>)
   1956c:	4620      	mov	r0, r4
   1956e:	f009 fcf2 	bl	22f56 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   19572:	b138      	cbz	r0, 19584 <bt_rand+0x20>
   19574:	68a3      	ldr	r3, [r4, #8]
   19576:	b2b2      	uxth	r2, r6
   19578:	4629      	mov	r1, r5
   1957a:	4620      	mov	r0, r4
   1957c:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
   1957e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   19582:	4718      	bx	r3
   19584:	f06f 0012 	mvn.w	r0, #18
   19588:	bd70      	pop	{r4, r5, r6, pc}
   1958a:	bf00      	nop
   1958c:	00023c14 	.word	0x00023c14

00019590 <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   19590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   19592:	4d1c      	ldr	r5, [pc, #112]	; (19604 <ecdh_p256_common_secret+0x74>)
   19594:	491c      	ldr	r1, [pc, #112]	; (19608 <ecdh_p256_common_secret+0x78>)
   19596:	f105 0220 	add.w	r2, r5, #32
   1959a:	2800      	cmp	r0, #0
   1959c:	bf08      	it	eq
   1959e:	4629      	moveq	r1, r5
   195a0:	4610      	mov	r0, r2
   195a2:	f002 fda1 	bl	1c0e8 <ocrypto_ecdh_p256_common_secret>
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   195a6:	f04f 32ff 	mov.w	r2, #4294967295
		return BT_HCI_ERR_INVALID_PARAM;
   195aa:	2800      	cmp	r0, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   195ac:	f04f 33ff 	mov.w	r3, #4294967295
   195b0:	f04f 0001 	mov.w	r0, #1
		return BT_HCI_ERR_INVALID_PARAM;
   195b4:	bf0c      	ite	eq
   195b6:	2700      	moveq	r7, #0
   195b8:	2712      	movne	r7, #18
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   195ba:	f7fa fb6f 	bl	13c9c <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   195be:	f100 0608 	add.w	r6, r0, #8
   195c2:	2102      	movs	r1, #2
   195c4:	4604      	mov	r4, r0
   195c6:	4630      	mov	r0, r6
   195c8:	f008 fff0 	bl	225ac <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   195cc:	233e      	movs	r3, #62	; 0x3e
   195ce:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   195d0:	2322      	movs	r3, #34	; 0x22
   195d2:	7043      	strb	r3, [r0, #1]
   195d4:	2101      	movs	r1, #1
   195d6:	4630      	mov	r0, r6
   195d8:	f008 ffe8 	bl	225ac <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   195dc:	2309      	movs	r3, #9
   195de:	7003      	strb	r3, [r0, #0]
   195e0:	2121      	movs	r1, #33	; 0x21
   195e2:	4630      	mov	r0, r6
   195e4:	f008 ffe2 	bl	225ac <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   195e8:	f800 7b01 	strb.w	r7, [r0], #1

	if (status) {
   195ec:	b12f      	cbz	r7, 195fa <ecdh_p256_common_secret+0x6a>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   195ee:	2220      	movs	r2, #32
   195f0:	21ff      	movs	r1, #255	; 0xff
   195f2:	f006 ffb8 	bl	20566 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   195f6:	4620      	mov	r0, r4
   195f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   195fa:	f105 0120 	add.w	r1, r5, #32
   195fe:	f009 fb49 	bl	22c94 <sys_memcpy_swap.constprop.0>
   19602:	e7f8      	b.n	195f6 <ecdh_p256_common_secret+0x66>
   19604:	20003bdb 	.word	0x20003bdb
   19608:	00025350 	.word	0x00025350

0001960c <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   1960c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1960e:	4e36      	ldr	r6, [pc, #216]	; (196e8 <ecdh_cmd_process+0xdc>)
   19610:	f3bf 8f5b 	dmb	ish
   19614:	6833      	ldr	r3, [r6, #0]
   19616:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   1961a:	2b02      	cmp	r3, #2
   1961c:	d059      	beq.n	196d2 <ecdh_cmd_process+0xc6>
   1961e:	2b04      	cmp	r3, #4
   19620:	d05c      	beq.n	196dc <ecdh_cmd_process+0xd0>
   19622:	2b01      	cmp	r3, #1
   19624:	d15c      	bne.n	196e0 <ecdh_cmd_process+0xd4>
		err = bt_rand(ecdh.private_key_be, 32);
   19626:	4c31      	ldr	r4, [pc, #196]	; (196ec <ecdh_cmd_process+0xe0>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   19628:	4f31      	ldr	r7, [pc, #196]	; (196f0 <ecdh_cmd_process+0xe4>)
		err = bt_rand(ecdh.private_key_be, 32);
   1962a:	2120      	movs	r1, #32
   1962c:	4620      	mov	r0, r4
   1962e:	f7ff ff99 	bl	19564 <bt_rand>
		if (err) {
   19632:	2800      	cmp	r0, #0
   19634:	d142      	bne.n	196bc <ecdh_cmd_process+0xb0>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   19636:	2220      	movs	r2, #32
   19638:	4639      	mov	r1, r7
   1963a:	4620      	mov	r0, r4
   1963c:	f006 ff5f 	bl	204fe <memcmp>
   19640:	2800      	cmp	r0, #0
   19642:	d0f2      	beq.n	1962a <ecdh_cmd_process+0x1e>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   19644:	482b      	ldr	r0, [pc, #172]	; (196f4 <ecdh_cmd_process+0xe8>)
   19646:	4621      	mov	r1, r4
   19648:	f002 fd3a 	bl	1c0c0 <ocrypto_ecdh_p256_public_key>
	} while (err);
   1964c:	4605      	mov	r5, r0
   1964e:	2800      	cmp	r0, #0
   19650:	d1eb      	bne.n	1962a <ecdh_cmd_process+0x1e>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   19652:	f04f 32ff 	mov.w	r2, #4294967295
   19656:	f04f 33ff 	mov.w	r3, #4294967295
   1965a:	2001      	movs	r0, #1
   1965c:	f7fa fb1e 	bl	13c9c <bt_buf_get_rx>
   19660:	f100 0708 	add.w	r7, r0, #8
   19664:	2102      	movs	r1, #2
   19666:	4604      	mov	r4, r0
   19668:	4638      	mov	r0, r7
   1966a:	f008 ff9f 	bl	225ac <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1966e:	233e      	movs	r3, #62	; 0x3e
   19670:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   19672:	2342      	movs	r3, #66	; 0x42
   19674:	7043      	strb	r3, [r0, #1]
   19676:	2101      	movs	r1, #1
   19678:	4638      	mov	r0, r7
   1967a:	f008 ff97 	bl	225ac <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1967e:	2308      	movs	r3, #8
   19680:	7003      	strb	r3, [r0, #0]
   19682:	2141      	movs	r1, #65	; 0x41
   19684:	4638      	mov	r0, r7
   19686:	f008 ff91 	bl	225ac <net_buf_simple_add>
   1968a:	4607      	mov	r7, r0
	evt->status = status;
   1968c:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   19690:	b1b5      	cbz	r5, 196c0 <ecdh_cmd_process+0xb4>
		(void)memset(evt->key, 0, sizeof(evt->key));
   19692:	2240      	movs	r2, #64	; 0x40
   19694:	2100      	movs	r1, #0
   19696:	f006 ff66 	bl	20566 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1969a:	f3bf 8f5b 	dmb	ish
   1969e:	2300      	movs	r3, #0
   196a0:	e856 2f00 	ldrex	r2, [r6]
   196a4:	e846 3100 	strex	r1, r3, [r6]
   196a8:	2900      	cmp	r1, #0
   196aa:	d1f9      	bne.n	196a0 <ecdh_cmd_process+0x94>
   196ac:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   196b0:	b1c4      	cbz	r4, 196e4 <ecdh_cmd_process+0xd8>
		bt_recv(buf);
   196b2:	4620      	mov	r0, r4
	}
}
   196b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_recv(buf);
   196b8:	f7fa bf7a 	b.w	145b0 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   196bc:	251f      	movs	r5, #31
   196be:	e7c8      	b.n	19652 <ecdh_cmd_process+0x46>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   196c0:	490c      	ldr	r1, [pc, #48]	; (196f4 <ecdh_cmd_process+0xe8>)
   196c2:	f009 fae7 	bl	22c94 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   196c6:	3120      	adds	r1, #32
   196c8:	f107 0021 	add.w	r0, r7, #33	; 0x21
   196cc:	f009 fae2 	bl	22c94 <sys_memcpy_swap.constprop.0>
		break;
   196d0:	e7e3      	b.n	1969a <ecdh_cmd_process+0x8e>
		buf = ecdh_p256_common_secret(false);
   196d2:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   196d4:	f7ff ff5c 	bl	19590 <ecdh_p256_common_secret>
   196d8:	4604      	mov	r4, r0
		break;
   196da:	e7de      	b.n	1969a <ecdh_cmd_process+0x8e>
		buf = ecdh_p256_common_secret(true);
   196dc:	2001      	movs	r0, #1
   196de:	e7f9      	b.n	196d4 <ecdh_cmd_process+0xc8>
	switch (atomic_get(&cmd)) {
   196e0:	2400      	movs	r4, #0
   196e2:	e7da      	b.n	1969a <ecdh_cmd_process+0x8e>
}
   196e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   196e6:	bf00      	nop
   196e8:	20002998 	.word	0x20002998
   196ec:	20003bdb 	.word	0x20003bdb
   196f0:	00025350 	.word	0x00025350
   196f4:	20003bfb 	.word	0x20003bfb

000196f8 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   196f8:	b510      	push	{r4, lr}
   196fa:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   196fc:	2210      	movs	r2, #16
   196fe:	2100      	movs	r1, #0
   19700:	a801      	add	r0, sp, #4
   19702:	f006 ff30 	bl	20566 <memset>
   19706:	4c0b      	ldr	r4, [pc, #44]	; (19734 <ecdh_thread+0x3c>)
   19708:	9405      	str	r4, [sp, #20]
   1970a:	2301      	movs	r3, #1
   1970c:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   19710:	f04f 32ff 	mov.w	r2, #4294967295
   19714:	f04f 33ff 	mov.w	r3, #4294967295
   19718:	2101      	movs	r1, #1
   1971a:	a801      	add	r0, sp, #4
   1971c:	f002 fc20 	bl	1bf60 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   19720:	4620      	mov	r0, r4
   19722:	f00a f9e2 	bl	23aea <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   19726:	9b04      	ldr	r3, [sp, #16]
   19728:	f36f 3352 	bfc	r3, #13, #6
   1972c:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   1972e:	f7ff ff6d 	bl	1960c <ecdh_cmd_process>
	while (true) {
   19732:	e7ed      	b.n	19710 <ecdh_thread+0x18>
   19734:	2000299c 	.word	0x2000299c

00019738 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   19738:	b510      	push	{r4, lr}
   1973a:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   1973c:	480e      	ldr	r0, [pc, #56]	; (19778 <hci_ecdh_init+0x40>)
   1973e:	f00a f9cf 	bl	23ae0 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19742:	4c0e      	ldr	r4, [pc, #56]	; (1977c <hci_ecdh_init+0x44>)
   19744:	490e      	ldr	r1, [pc, #56]	; (19780 <hci_ecdh_init+0x48>)
   19746:	2200      	movs	r2, #0
   19748:	2300      	movs	r3, #0
   1974a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1974e:	2300      	movs	r3, #0
   19750:	220a      	movs	r2, #10
   19752:	e9cd 2303 	strd	r2, r3, [sp, #12]
   19756:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1975a:	9300      	str	r3, [sp, #0]
   1975c:	f44f 7262 	mov.w	r2, #904	; 0x388
   19760:	4b08      	ldr	r3, [pc, #32]	; (19784 <hci_ecdh_init+0x4c>)
   19762:	4620      	mov	r0, r4
   19764:	f001 fb16 	bl	1ad94 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   19768:	4907      	ldr	r1, [pc, #28]	; (19788 <hci_ecdh_init+0x50>)
   1976a:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   1976c:	b008      	add	sp, #32
   1976e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19772:	f009 bcc9 	b.w	23108 <z_impl_k_thread_name_set>
   19776:	bf00      	nop
   19778:	2000299c 	.word	0x2000299c
   1977c:	20001d38 	.word	0x20001d38
   19780:	20004aa0 	.word	0x20004aa0
   19784:	000196f9 	.word	0x000196f9
   19788:	00025343 	.word	0x00025343

0001978c <hci_cmd_le_read_local_p256_public_key>:

uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   1978c:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1978e:	4b0b      	ldr	r3, [pc, #44]	; (197bc <hci_cmd_le_read_local_p256_public_key+0x30>)
   19790:	f3bf 8f5b 	dmb	ish
   19794:	2201      	movs	r2, #1
   19796:	e853 1f00 	ldrex	r1, [r3]
   1979a:	2900      	cmp	r1, #0
   1979c:	d103      	bne.n	197a6 <hci_cmd_le_read_local_p256_public_key+0x1a>
   1979e:	e843 2000 	strex	r0, r2, [r3]
   197a2:	2800      	cmp	r0, #0
   197a4:	d1f7      	bne.n	19796 <hci_cmd_le_read_local_p256_public_key+0xa>
   197a6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   197aa:	d105      	bne.n	197b8 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   197ac:	4804      	ldr	r0, [pc, #16]	; (197c0 <hci_cmd_le_read_local_p256_public_key+0x34>)
   197ae:	2100      	movs	r1, #0
   197b0:	f002 fc32 	bl	1c018 <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   197b4:	2000      	movs	r0, #0
}
   197b6:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   197b8:	200c      	movs	r0, #12
   197ba:	e7fc      	b.n	197b6 <hci_cmd_le_read_local_p256_public_key+0x2a>
   197bc:	20002998 	.word	0x20002998
   197c0:	2000299c 	.word	0x2000299c

000197c4 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   197c4:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   197c6:	2900      	cmp	r1, #0
   197c8:	4b11      	ldr	r3, [pc, #68]	; (19810 <cmd_le_generate_dhkey+0x4c>)
   197ca:	f3bf 8f5b 	dmb	ish
{
   197ce:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   197d0:	bf14      	ite	ne
   197d2:	2204      	movne	r2, #4
   197d4:	2202      	moveq	r2, #2
   197d6:	e853 1f00 	ldrex	r1, [r3]
   197da:	2900      	cmp	r1, #0
   197dc:	d103      	bne.n	197e6 <cmd_le_generate_dhkey+0x22>
   197de:	e843 2000 	strex	r0, r2, [r3]
   197e2:	2800      	cmp	r0, #0
   197e4:	d1f7      	bne.n	197d6 <cmd_le_generate_dhkey+0x12>
   197e6:	f3bf 8f5b 	dmb	ish
   197ea:	d10e      	bne.n	1980a <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   197ec:	4621      	mov	r1, r4
   197ee:	4809      	ldr	r0, [pc, #36]	; (19814 <cmd_le_generate_dhkey+0x50>)
   197f0:	f009 fa50 	bl	22c94 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   197f4:	4808      	ldr	r0, [pc, #32]	; (19818 <cmd_le_generate_dhkey+0x54>)
   197f6:	f104 0120 	add.w	r1, r4, #32
   197fa:	f009 fa4b 	bl	22c94 <sys_memcpy_swap.constprop.0>
   197fe:	4807      	ldr	r0, [pc, #28]	; (1981c <cmd_le_generate_dhkey+0x58>)
   19800:	2100      	movs	r1, #0
   19802:	f002 fc09 	bl	1c018 <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   19806:	2000      	movs	r0, #0
}
   19808:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1980a:	200c      	movs	r0, #12
   1980c:	e7fc      	b.n	19808 <cmd_le_generate_dhkey+0x44>
   1980e:	bf00      	nop
   19810:	20002998 	.word	0x20002998
   19814:	20003bfb 	.word	0x20003bfb
   19818:	20003c1b 	.word	0x20003c1b
   1981c:	2000299c 	.word	0x2000299c

00019820 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   19820:	4901      	ldr	r1, [pc, #4]	; (19828 <mpsl_low_prio_irq_handler+0x8>)
   19822:	4802      	ldr	r0, [pc, #8]	; (1982c <mpsl_low_prio_irq_handler+0xc>)
   19824:	f009 bdf1 	b.w	2340a <k_work_submit_to_queue>
   19828:	200029ac 	.word	0x200029ac
   1982c:	20001db8 	.word	0x20001db8

00019830 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   19830:	b513      	push	{r0, r1, r4, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   19832:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   19836:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   1983a:	2300      	movs	r3, #0
   1983c:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   19840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   19844:	f8ad 3000 	strh.w	r3, [sp]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   19848:	4a0d      	ldr	r2, [pc, #52]	; (19880 <mpsl_lib_init+0x50>)
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   1984a:	2302      	movs	r3, #2
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1984c:	2119      	movs	r1, #25
   1984e:	4668      	mov	r0, sp
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   19850:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   19854:	f7eb f95a 	bl	4b0c <mpsl_init>
	if (err) {
   19858:	4604      	mov	r4, r0
   1985a:	b970      	cbnz	r0, 1987a <mpsl_lib_init+0x4a>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1985c:	4601      	mov	r1, r0
   1985e:	2201      	movs	r2, #1
   19860:	2008      	movs	r0, #8
   19862:	f7f9 fe43 	bl	134ec <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   19866:	2201      	movs	r2, #1
   19868:	4621      	mov	r1, r4
   1986a:	200b      	movs	r0, #11
   1986c:	f7f9 fe3e 	bl	134ec <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   19870:	2201      	movs	r2, #1
   19872:	4621      	mov	r1, r4
   19874:	4610      	mov	r0, r2
   19876:	f7f9 fe39 	bl	134ec <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);

	return 0;
}
   1987a:	4620      	mov	r0, r4
   1987c:	b002      	add	sp, #8
   1987e:	bd10      	pop	{r4, pc}
   19880:	00022cbf 	.word	0x00022cbf

00019884 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   19884:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   19886:	4d0d      	ldr	r5, [pc, #52]	; (198bc <mpsl_low_prio_init+0x38>)
   19888:	490d      	ldr	r1, [pc, #52]	; (198c0 <mpsl_low_prio_init+0x3c>)
   1988a:	2400      	movs	r4, #0
   1988c:	9400      	str	r4, [sp, #0]
   1988e:	f06f 0309 	mvn.w	r3, #9
   19892:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19896:	4628      	mov	r0, r5
   19898:	f001 fd80 	bl	1b39c <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   1989c:	4909      	ldr	r1, [pc, #36]	; (198c4 <mpsl_low_prio_init+0x40>)
   1989e:	4628      	mov	r0, r5
   198a0:	f009 fc32 	bl	23108 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   198a4:	4908      	ldr	r1, [pc, #32]	; (198c8 <mpsl_low_prio_init+0x44>)
   198a6:	4809      	ldr	r0, [pc, #36]	; (198cc <mpsl_low_prio_init+0x48>)
   198a8:	f009 fd96 	bl	233d8 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   198ac:	4622      	mov	r2, r4
   198ae:	2104      	movs	r1, #4
   198b0:	2019      	movs	r0, #25
   198b2:	f7f9 fe1b 	bl	134ec <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   198b6:	4620      	mov	r0, r4
   198b8:	b003      	add	sp, #12
   198ba:	bd30      	pop	{r4, r5, pc}
   198bc:	20001db8 	.word	0x20001db8
   198c0:	20004e60 	.word	0x20004e60
   198c4:	00025370 	.word	0x00025370
   198c8:	00022ceb 	.word	0x00022ceb
   198cc:	200029ac 	.word	0x200029ac

000198d0 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   198d0:	4b01      	ldr	r3, [pc, #4]	; (198d8 <mpsl_hfclk_callback+0x8>)
   198d2:	2000      	movs	r0, #0
   198d4:	681b      	ldr	r3, [r3, #0]
   198d6:	4718      	bx	r3
   198d8:	200029bc 	.word	0x200029bc

000198dc <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   198dc:	b120      	cbz	r0, 198e8 <nrfx_clock_start+0xc>
   198de:	2801      	cmp	r0, #1
   198e0:	d106      	bne.n	198f0 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   198e2:	4804      	ldr	r0, [pc, #16]	; (198f4 <nrfx_clock_start+0x18>)
   198e4:	f7ea bf8a 	b.w	47fc <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   198e8:	4b03      	ldr	r3, [pc, #12]	; (198f8 <nrfx_clock_start+0x1c>)
   198ea:	2001      	movs	r0, #1
   198ec:	681b      	ldr	r3, [r3, #0]
   198ee:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   198f0:	4770      	bx	lr
   198f2:	bf00      	nop
   198f4:	000198d1 	.word	0x000198d1
   198f8:	200029bc 	.word	0x200029bc

000198fc <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   198fc:	4b01      	ldr	r3, [pc, #4]	; (19904 <nrfx_clock_init+0x8>)
   198fe:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   19900:	4801      	ldr	r0, [pc, #4]	; (19908 <nrfx_clock_init+0xc>)
   19902:	4770      	bx	lr
   19904:	200029bc 	.word	0x200029bc
   19908:	0bad0000 	.word	0x0bad0000

0001990c <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1990c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   19910:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   19914:	2a08      	cmp	r2, #8
   19916:	d106      	bne.n	19926 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19918:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   1991c:	2b05      	cmp	r3, #5
   1991e:	d802      	bhi.n	19926 <nrf52_errata_103+0x1a>
   19920:	4a02      	ldr	r2, [pc, #8]	; (1992c <nrf52_errata_103+0x20>)
   19922:	5cd0      	ldrb	r0, [r2, r3]
   19924:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   19926:	2000      	movs	r0, #0
    #endif
}
   19928:	4770      	bx	lr
   1992a:	bf00      	nop
   1992c:	00025380 	.word	0x00025380

00019930 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19930:	4a02      	ldr	r2, [pc, #8]	; (1993c <nvmc_wait+0xc>)
   19932:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   19936:	2b00      	cmp	r3, #0
   19938:	d0fb      	beq.n	19932 <nvmc_wait+0x2>
}
   1993a:	4770      	bx	lr
   1993c:	4001e000 	.word	0x4001e000

00019940 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   19940:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   19942:	f009 fa0e 	bl	22d62 <nrf52_errata_136>
   19946:	b140      	cbz	r0, 1995a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   19948:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1994c:	2200      	movs	r2, #0
   1994e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   19952:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   19956:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1995a:	f009 fa02 	bl	22d62 <nrf52_errata_136>
   1995e:	2800      	cmp	r0, #0
   19960:	d046      	beq.n	199f0 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   19962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19966:	4b60      	ldr	r3, [pc, #384]	; (19ae8 <SystemInit+0x1a8>)
   19968:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1996c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   19970:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   19974:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   19978:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1997c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   19980:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   19984:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   19988:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1998c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   19990:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   19994:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   19998:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1999c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   199a0:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   199a4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   199a8:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   199ac:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   199b0:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   199b4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   199b8:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   199bc:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   199c0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   199c4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   199c8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   199cc:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   199d0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   199d4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   199d8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   199dc:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   199e0:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   199e4:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   199e8:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   199ec:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   199f0:	f7ff ff8c 	bl	1990c <nrf52_errata_103>
   199f4:	b118      	cbz	r0, 199fe <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   199f6:	4b3d      	ldr	r3, [pc, #244]	; (19aec <SystemInit+0x1ac>)
   199f8:	4a3d      	ldr	r2, [pc, #244]	; (19af0 <SystemInit+0x1b0>)
   199fa:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   199fe:	f7ff ff85 	bl	1990c <nrf52_errata_103>
   19a02:	b118      	cbz	r0, 19a0c <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   19a04:	4b3b      	ldr	r3, [pc, #236]	; (19af4 <SystemInit+0x1b4>)
   19a06:	22fb      	movs	r2, #251	; 0xfb
   19a08:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   19a0c:	f7ff ff7e 	bl	1990c <nrf52_errata_103>
   19a10:	b170      	cbz	r0, 19a30 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   19a12:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   19a16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   19a1a:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   19a1e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   19a22:	f022 020f 	bic.w	r2, r2, #15
   19a26:	f003 030f 	and.w	r3, r3, #15
   19a2a:	4313      	orrs	r3, r2
   19a2c:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   19a30:	f7ff ff6c 	bl	1990c <nrf52_errata_103>
   19a34:	b120      	cbz	r0, 19a40 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   19a36:	4b30      	ldr	r3, [pc, #192]	; (19af8 <SystemInit+0x1b8>)
   19a38:	f44f 7200 	mov.w	r2, #512	; 0x200
   19a3c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   19a40:	f009 f98f 	bl	22d62 <nrf52_errata_136>
   19a44:	b148      	cbz	r0, 19a5a <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   19a46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19a4a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   19a4e:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   19a50:	bf44      	itt	mi
   19a52:	f06f 0201 	mvnmi.w	r2, #1
   19a56:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19a5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   19a5e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   19a62:	2a08      	cmp	r2, #8
   19a64:	d10e      	bne.n	19a84 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19a66:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   19a6a:	2b05      	cmp	r3, #5
   19a6c:	d802      	bhi.n	19a74 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   19a6e:	4a23      	ldr	r2, [pc, #140]	; (19afc <SystemInit+0x1bc>)
   19a70:	5cd3      	ldrb	r3, [r2, r3]
   19a72:	b13b      	cbz	r3, 19a84 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   19a74:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   19a78:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   19a7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19a80:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19a84:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   19a88:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   19a8c:	2a00      	cmp	r2, #0
   19a8e:	db03      	blt.n	19a98 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   19a90:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19a94:	2b00      	cmp	r3, #0
   19a96:	da22      	bge.n	19ade <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   19a98:	4919      	ldr	r1, [pc, #100]	; (19b00 <SystemInit+0x1c0>)
   19a9a:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   19a9c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   19aa0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   19aa4:	2412      	movs	r4, #18
    nvmc_wait();
   19aa6:	f7ff ff43 	bl	19930 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   19aaa:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   19aae:	f7ff ff3f 	bl	19930 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   19ab2:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   19ab6:	f7ff ff3b 	bl	19930 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   19aba:	2300      	movs	r3, #0
   19abc:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   19ac0:	f7ff ff36 	bl	19930 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   19ac4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   19ac8:	490e      	ldr	r1, [pc, #56]	; (19b04 <SystemInit+0x1c4>)
   19aca:	4b0f      	ldr	r3, [pc, #60]	; (19b08 <SystemInit+0x1c8>)
   19acc:	68ca      	ldr	r2, [r1, #12]
   19ace:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   19ad2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   19ad4:	60cb      	str	r3, [r1, #12]
   19ad6:	f3bf 8f4f 	dsb	sy
    __NOP();
   19ada:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   19adc:	e7fd      	b.n	19ada <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   19ade:	4b0b      	ldr	r3, [pc, #44]	; (19b0c <SystemInit+0x1cc>)
   19ae0:	4a0b      	ldr	r2, [pc, #44]	; (19b10 <SystemInit+0x1d0>)
   19ae2:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   19ae4:	bd10      	pop	{r4, pc}
   19ae6:	bf00      	nop
   19ae8:	4000c000 	.word	0x4000c000
   19aec:	40005000 	.word	0x40005000
   19af0:	00038148 	.word	0x00038148
   19af4:	4000f000 	.word	0x4000f000
   19af8:	40029000 	.word	0x40029000
   19afc:	0002537a 	.word	0x0002537a
   19b00:	4001e000 	.word	0x4001e000
   19b04:	e000ed00 	.word	0xe000ed00
   19b08:	05fa0004 	.word	0x05fa0004
   19b0c:	20000828 	.word	0x20000828
   19b10:	03d09000 	.word	0x03d09000

00019b14 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   19b14:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   19b16:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   19b18:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   19b1a:	fab2 f382 	clz	r3, r2
   19b1e:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   19b22:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   19b24:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   19b26:	d014      	beq.n	19b52 <nrfx_flag32_alloc+0x3e>
   19b28:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   19b2c:	fa05 f303 	lsl.w	r3, r5, r3
   19b30:	ea22 0303 	bic.w	r3, r2, r3
   19b34:	e850 6f00 	ldrex	r6, [r0]
   19b38:	4296      	cmp	r6, r2
   19b3a:	d104      	bne.n	19b46 <nrfx_flag32_alloc+0x32>
   19b3c:	e840 3c00 	strex	ip, r3, [r0]
   19b40:	f1bc 0f00 	cmp.w	ip, #0
   19b44:	d1f6      	bne.n	19b34 <nrfx_flag32_alloc+0x20>
   19b46:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   19b4a:	d1e5      	bne.n	19b18 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   19b4c:	4802      	ldr	r0, [pc, #8]	; (19b58 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   19b4e:	700c      	strb	r4, [r1, #0]
}
   19b50:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   19b52:	4802      	ldr	r0, [pc, #8]	; (19b5c <nrfx_flag32_alloc+0x48>)
   19b54:	e7fc      	b.n	19b50 <nrfx_flag32_alloc+0x3c>
   19b56:	bf00      	nop
   19b58:	0bad0000 	.word	0x0bad0000
   19b5c:	0bad0002 	.word	0x0bad0002

00019b60 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   19b60:	6803      	ldr	r3, [r0, #0]
   19b62:	40cb      	lsrs	r3, r1
   19b64:	07db      	lsls	r3, r3, #31
{
   19b66:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   19b68:	d415      	bmi.n	19b96 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   19b6a:	2301      	movs	r3, #1
   19b6c:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   19b70:	6803      	ldr	r3, [r0, #0]
   19b72:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   19b76:	ea41 0203 	orr.w	r2, r1, r3
   19b7a:	e850 4f00 	ldrex	r4, [r0]
   19b7e:	429c      	cmp	r4, r3
   19b80:	d104      	bne.n	19b8c <nrfx_flag32_free+0x2c>
   19b82:	e840 2c00 	strex	ip, r2, [r0]
   19b86:	f1bc 0f00 	cmp.w	ip, #0
   19b8a:	d1f6      	bne.n	19b7a <nrfx_flag32_free+0x1a>
   19b8c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   19b90:	d1ee      	bne.n	19b70 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   19b92:	4802      	ldr	r0, [pc, #8]	; (19b9c <nrfx_flag32_free+0x3c>)
}
   19b94:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   19b96:	4802      	ldr	r0, [pc, #8]	; (19ba0 <nrfx_flag32_free+0x40>)
   19b98:	e7fc      	b.n	19b94 <nrfx_flag32_free+0x34>
   19b9a:	bf00      	nop
   19b9c:	0bad0000 	.word	0x0bad0000
   19ba0:	0bad0004 	.word	0x0bad0004

00019ba4 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   19ba4:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   19ba6:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   19baa:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   19bac:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   19bae:	6002      	str	r2, [r0, #0]
}
   19bb0:	4802      	ldr	r0, [pc, #8]	; (19bbc <nrf_gpio_pin_port_decode+0x18>)
   19bb2:	bf18      	it	ne
   19bb4:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   19bb8:	4770      	bx	lr
   19bba:	bf00      	nop
   19bbc:	50000300 	.word	0x50000300

00019bc0 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   19bc0:	4b03      	ldr	r3, [pc, #12]	; (19bd0 <pin_in_use_by_te+0x10>)
   19bc2:	3008      	adds	r0, #8
   19bc4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   19bc8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   19bcc:	4770      	bx	lr
   19bce:	bf00      	nop
   19bd0:	2000082c 	.word	0x2000082c

00019bd4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   19bd4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   19bd6:	f100 0308 	add.w	r3, r0, #8
   19bda:	4c0c      	ldr	r4, [pc, #48]	; (19c0c <call_handler+0x38>)
   19bdc:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   19be0:	05da      	lsls	r2, r3, #23
{
   19be2:	4605      	mov	r5, r0
   19be4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   19be6:	d507      	bpl.n	19bf8 <call_handler+0x24>
   19be8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   19bec:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   19bf0:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   19bf4:	6852      	ldr	r2, [r2, #4]
   19bf6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   19bf8:	68a3      	ldr	r3, [r4, #8]
   19bfa:	b12b      	cbz	r3, 19c08 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   19bfc:	68e2      	ldr	r2, [r4, #12]
   19bfe:	4631      	mov	r1, r6
   19c00:	4628      	mov	r0, r5
    }
}
   19c02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   19c06:	4718      	bx	r3
}
   19c08:	bd70      	pop	{r4, r5, r6, pc}
   19c0a:	bf00      	nop
   19c0c:	2000082c 	.word	0x2000082c

00019c10 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   19c10:	4a12      	ldr	r2, [pc, #72]	; (19c5c <release_handler+0x4c>)
   19c12:	3008      	adds	r0, #8
{
   19c14:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   19c16:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   19c1a:	05d9      	lsls	r1, r3, #23
   19c1c:	d51b      	bpl.n	19c56 <release_handler+0x46>
   19c1e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   19c22:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   19c26:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   19c2a:	f102 0410 	add.w	r4, r2, #16
   19c2e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   19c30:	f834 3b02 	ldrh.w	r3, [r4], #2
   19c34:	f413 7f80 	tst.w	r3, #256	; 0x100
   19c38:	d003      	beq.n	19c42 <release_handler+0x32>
   19c3a:	f3c3 2343 	ubfx	r3, r3, #9, #4
   19c3e:	4299      	cmp	r1, r3
   19c40:	d009      	beq.n	19c56 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   19c42:	3001      	adds	r0, #1
   19c44:	2830      	cmp	r0, #48	; 0x30
   19c46:	d1f3      	bne.n	19c30 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   19c48:	2300      	movs	r3, #0
   19c4a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   19c4e:	4804      	ldr	r0, [pc, #16]	; (19c60 <release_handler+0x50>)
}
   19c50:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   19c52:	f7ff bf85 	b.w	19b60 <nrfx_flag32_free>
}
   19c56:	bc10      	pop	{r4}
   19c58:	4770      	bx	lr
   19c5a:	bf00      	nop
   19c5c:	2000082c 	.word	0x2000082c
   19c60:	200008a0 	.word	0x200008a0

00019c64 <pin_handler_trigger_uninit>:
{
   19c64:	b538      	push	{r3, r4, r5, lr}
   19c66:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   19c68:	f7ff ffaa 	bl	19bc0 <pin_in_use_by_te>
   19c6c:	4c09      	ldr	r4, [pc, #36]	; (19c94 <pin_handler_trigger_uninit+0x30>)
   19c6e:	f102 0508 	add.w	r5, r2, #8
   19c72:	b140      	cbz	r0, 19c86 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   19c74:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   19c78:	4907      	ldr	r1, [pc, #28]	; (19c98 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   19c7a:	0b5b      	lsrs	r3, r3, #13
   19c7c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   19c80:	2000      	movs	r0, #0
   19c82:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   19c86:	4610      	mov	r0, r2
   19c88:	f7ff ffc2 	bl	19c10 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   19c8c:	2300      	movs	r3, #0
   19c8e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   19c92:	bd38      	pop	{r3, r4, r5, pc}
   19c94:	2000082c 	.word	0x2000082c
   19c98:	40006000 	.word	0x40006000

00019c9c <nrfx_gpiote_input_configure>:
{
   19c9c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   19ca0:	4604      	mov	r4, r0
   19ca2:	4617      	mov	r7, r2
   19ca4:	461d      	mov	r5, r3
    if (p_input_config)
   19ca6:	b321      	cbz	r1, 19cf2 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19ca8:	4e4e      	ldr	r6, [pc, #312]	; (19de4 <nrfx_gpiote_input_configure+0x148>)
   19caa:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   19cae:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   19cb2:	079b      	lsls	r3, r3, #30
   19cb4:	d506      	bpl.n	19cc4 <nrfx_gpiote_input_configure+0x28>
   19cb6:	f7ff ff83 	bl	19bc0 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   19cba:	b118      	cbz	r0, 19cc4 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   19cbc:	484a      	ldr	r0, [pc, #296]	; (19de8 <nrfx_gpiote_input_configure+0x14c>)
}
   19cbe:	b004      	add	sp, #16
   19cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   19cc4:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   19cc6:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   19cca:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   19cce:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   19cd2:	f10d 020f 	add.w	r2, sp, #15
   19cd6:	460b      	mov	r3, r1
   19cd8:	4620      	mov	r0, r4
   19cda:	f10d 010e 	add.w	r1, sp, #14
   19cde:	f009 f84c 	bl	22d7a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   19ce2:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   19ce6:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   19cea:	f043 0301 	orr.w	r3, r3, #1
   19cee:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   19cf2:	b197      	cbz	r7, 19d1a <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19cf4:	4b3b      	ldr	r3, [pc, #236]	; (19de4 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   19cf6:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   19cf8:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19cfa:	f104 0008 	add.w	r0, r4, #8
   19cfe:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   19d02:	078f      	lsls	r7, r1, #30
   19d04:	d50c      	bpl.n	19d20 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   19d06:	2a00      	cmp	r2, #0
   19d08:	d1d8      	bne.n	19cbc <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   19d0a:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   19d0e:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   19d12:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   19d16:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   19d1a:	bbcd      	cbnz	r5, 19d90 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   19d1c:	4833      	ldr	r0, [pc, #204]	; (19dec <nrfx_gpiote_input_configure+0x150>)
   19d1e:	e7ce      	b.n	19cbe <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   19d20:	f021 0120 	bic.w	r1, r1, #32
   19d24:	04c9      	lsls	r1, r1, #19
   19d26:	0cc9      	lsrs	r1, r1, #19
   19d28:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   19d2c:	2a00      	cmp	r2, #0
   19d2e:	d0ec      	beq.n	19d0a <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   19d30:	2e03      	cmp	r6, #3
   19d32:	d8c3      	bhi.n	19cbc <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   19d34:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   19d36:	b92e      	cbnz	r6, 19d44 <nrfx_gpiote_input_configure+0xa8>
   19d38:	4a2d      	ldr	r2, [pc, #180]	; (19df0 <nrfx_gpiote_input_configure+0x154>)
   19d3a:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   19d3e:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   19d42:	e7e2      	b.n	19d0a <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   19d44:	00ba      	lsls	r2, r7, #2
   19d46:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   19d4a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   19d4e:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   19d52:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   19d56:	f02c 0c03 	bic.w	ip, ip, #3
   19d5a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   19d5e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   19d62:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   19d66:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   19d6a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19d6e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   19d72:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   19d76:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   19d7a:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   19d7e:	ea4c 0c0e 	orr.w	ip, ip, lr
   19d82:	f041 0120 	orr.w	r1, r1, #32
   19d86:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   19d8a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   19d8e:	e7bc      	b.n	19d0a <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   19d90:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   19d94:	4620      	mov	r0, r4
   19d96:	f7ff ff3b 	bl	19c10 <release_handler>
    if (!handler)
   19d9a:	2e00      	cmp	r6, #0
   19d9c:	d0be      	beq.n	19d1c <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   19d9e:	4d11      	ldr	r5, [pc, #68]	; (19de4 <nrfx_gpiote_input_configure+0x148>)
   19da0:	682b      	ldr	r3, [r5, #0]
   19da2:	429e      	cmp	r6, r3
   19da4:	d104      	bne.n	19db0 <nrfx_gpiote_input_configure+0x114>
   19da6:	686b      	ldr	r3, [r5, #4]
   19da8:	429f      	cmp	r7, r3
   19daa:	d101      	bne.n	19db0 <nrfx_gpiote_input_configure+0x114>
   19dac:	2200      	movs	r2, #0
   19dae:	e00a      	b.n	19dc6 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   19db0:	4810      	ldr	r0, [pc, #64]	; (19df4 <nrfx_gpiote_input_configure+0x158>)
   19db2:	f10d 010f 	add.w	r1, sp, #15
   19db6:	f7ff fead 	bl	19b14 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   19dba:	4b0c      	ldr	r3, [pc, #48]	; (19dec <nrfx_gpiote_input_configure+0x150>)
   19dbc:	4298      	cmp	r0, r3
   19dbe:	f47f af7e 	bne.w	19cbe <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   19dc2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   19dc6:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   19dca:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   19dce:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   19dd0:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   19dd2:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   19dd6:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   19dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   19dde:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   19de2:	e79b      	b.n	19d1c <nrfx_gpiote_input_configure+0x80>
   19de4:	2000082c 	.word	0x2000082c
   19de8:	0bad0004 	.word	0x0bad0004
   19dec:	0bad0000 	.word	0x0bad0000
   19df0:	40006000 	.word	0x40006000
   19df4:	200008a0 	.word	0x200008a0

00019df8 <nrfx_gpiote_output_configure>:
{
   19df8:	b5f0      	push	{r4, r5, r6, r7, lr}
   19dfa:	4604      	mov	r4, r0
   19dfc:	b085      	sub	sp, #20
   19dfe:	4615      	mov	r5, r2
    if (p_config)
   19e00:	b319      	cbz	r1, 19e4a <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19e02:	4e33      	ldr	r6, [pc, #204]	; (19ed0 <nrfx_gpiote_output_configure+0xd8>)
   19e04:	f100 0708 	add.w	r7, r0, #8
   19e08:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   19e0c:	0793      	lsls	r3, r2, #30
   19e0e:	d403      	bmi.n	19e18 <nrfx_gpiote_output_configure+0x20>
   19e10:	f7ff fed6 	bl	19bc0 <pin_in_use_by_te>
   19e14:	2800      	cmp	r0, #0
   19e16:	d158      	bne.n	19eca <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   19e18:	f012 0f1c 	tst.w	r2, #28
   19e1c:	d002      	beq.n	19e24 <nrfx_gpiote_output_configure+0x2c>
   19e1e:	784b      	ldrb	r3, [r1, #1]
   19e20:	2b01      	cmp	r3, #1
   19e22:	d052      	beq.n	19eca <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   19e24:	2301      	movs	r3, #1
   19e26:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   19e2a:	2300      	movs	r3, #0
   19e2c:	e9cd 1300 	strd	r1, r3, [sp]
   19e30:	1c4a      	adds	r2, r1, #1
   19e32:	1c8b      	adds	r3, r1, #2
   19e34:	4620      	mov	r0, r4
   19e36:	f10d 010f 	add.w	r1, sp, #15
   19e3a:	f008 ff9e 	bl	22d7a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   19e3e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   19e42:	f043 0303 	orr.w	r3, r3, #3
   19e46:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   19e4a:	b915      	cbnz	r5, 19e52 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   19e4c:	4821      	ldr	r0, [pc, #132]	; (19ed4 <nrfx_gpiote_output_configure+0xdc>)
}
   19e4e:	b005      	add	sp, #20
   19e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19e52:	4e1f      	ldr	r6, [pc, #124]	; (19ed0 <nrfx_gpiote_output_configure+0xd8>)
   19e54:	f104 0708 	add.w	r7, r4, #8
   19e58:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   19e5c:	0783      	lsls	r3, r0, #30
   19e5e:	d534      	bpl.n	19eca <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   19e60:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   19e64:	4661      	mov	r1, ip
   19e66:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   19e68:	f020 0020 	bic.w	r0, r0, #32
   19e6c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   19e70:	04c0      	lsls	r0, r0, #19
   19e72:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   19e76:	0cc0      	lsrs	r0, r0, #19
   19e78:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   19e7c:	2300      	movs	r3, #0
   19e7e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   19e82:	786a      	ldrb	r2, [r5, #1]
   19e84:	2a00      	cmp	r2, #0
   19e86:	d0e1      	beq.n	19e4c <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   19e88:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   19e8c:	78ad      	ldrb	r5, [r5, #2]
   19e8e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   19e92:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   19e96:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19e9a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   19e9e:	0223      	lsls	r3, r4, #8
   19ea0:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   19ea4:	0412      	lsls	r2, r2, #16
   19ea6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19eaa:	ea43 030e 	orr.w	r3, r3, lr
   19eae:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   19eb0:	052a      	lsls	r2, r5, #20
   19eb2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   19eb6:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19eba:	4313      	orrs	r3, r2
   19ebc:	f040 0020 	orr.w	r0, r0, #32
   19ec0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   19ec4:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   19ec8:	e7c0      	b.n	19e4c <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   19eca:	4803      	ldr	r0, [pc, #12]	; (19ed8 <nrfx_gpiote_output_configure+0xe0>)
   19ecc:	e7bf      	b.n	19e4e <nrfx_gpiote_output_configure+0x56>
   19ece:	bf00      	nop
   19ed0:	2000082c 	.word	0x2000082c
   19ed4:	0bad0000 	.word	0x0bad0000
   19ed8:	0bad0004 	.word	0x0bad0004

00019edc <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   19edc:	4b01      	ldr	r3, [pc, #4]	; (19ee4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   19ede:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   19ee2:	4770      	bx	lr
   19ee4:	2000082c 	.word	0x2000082c

00019ee8 <nrfx_gpiote_channel_get>:
{
   19ee8:	b508      	push	{r3, lr}
   19eea:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   19eec:	f7ff fe68 	bl	19bc0 <pin_in_use_by_te>
   19ef0:	b138      	cbz	r0, 19f02 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   19ef2:	4b05      	ldr	r3, [pc, #20]	; (19f08 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   19ef4:	4805      	ldr	r0, [pc, #20]	; (19f0c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   19ef6:	3208      	adds	r2, #8
   19ef8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   19efc:	0b5b      	lsrs	r3, r3, #13
   19efe:	700b      	strb	r3, [r1, #0]
}
   19f00:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   19f02:	4803      	ldr	r0, [pc, #12]	; (19f10 <nrfx_gpiote_channel_get+0x28>)
   19f04:	e7fc      	b.n	19f00 <nrfx_gpiote_channel_get+0x18>
   19f06:	bf00      	nop
   19f08:	2000082c 	.word	0x2000082c
   19f0c:	0bad0000 	.word	0x0bad0000
   19f10:	0bad0004 	.word	0x0bad0004

00019f14 <nrfx_gpiote_init>:
{
   19f14:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   19f16:	4c0f      	ldr	r4, [pc, #60]	; (19f54 <nrfx_gpiote_init+0x40>)
   19f18:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   19f1c:	b9bd      	cbnz	r5, 19f4e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   19f1e:	2260      	movs	r2, #96	; 0x60
   19f20:	4629      	mov	r1, r5
   19f22:	f104 0010 	add.w	r0, r4, #16
   19f26:	f006 fb1e 	bl	20566 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   19f2a:	2006      	movs	r0, #6
   19f2c:	f7f9 faac 	bl	13488 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19f30:	4b09      	ldr	r3, [pc, #36]	; (19f58 <nrfx_gpiote_init+0x44>)
    return err_code;
   19f32:	480a      	ldr	r0, [pc, #40]	; (19f5c <nrfx_gpiote_init+0x48>)
   19f34:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   19f38:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   19f3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   19f40:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   19f44:	2301      	movs	r3, #1
   19f46:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   19f4a:	6763      	str	r3, [r4, #116]	; 0x74
}
   19f4c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   19f4e:	4804      	ldr	r0, [pc, #16]	; (19f60 <nrfx_gpiote_init+0x4c>)
   19f50:	e7fc      	b.n	19f4c <nrfx_gpiote_init+0x38>
   19f52:	bf00      	nop
   19f54:	2000082c 	.word	0x2000082c
   19f58:	40006000 	.word	0x40006000
   19f5c:	0bad0000 	.word	0x0bad0000
   19f60:	0bad0005 	.word	0x0bad0005

00019f64 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   19f64:	4b03      	ldr	r3, [pc, #12]	; (19f74 <nrfx_gpiote_is_init+0x10>)
   19f66:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   19f6a:	3800      	subs	r0, #0
   19f6c:	bf18      	it	ne
   19f6e:	2001      	movne	r0, #1
   19f70:	4770      	bx	lr
   19f72:	bf00      	nop
   19f74:	2000082c 	.word	0x2000082c

00019f78 <nrfx_gpiote_channel_free>:
{
   19f78:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   19f7a:	4801      	ldr	r0, [pc, #4]	; (19f80 <nrfx_gpiote_channel_free+0x8>)
   19f7c:	f7ff bdf0 	b.w	19b60 <nrfx_flag32_free>
   19f80:	2000089c 	.word	0x2000089c

00019f84 <nrfx_gpiote_channel_alloc>:
{
   19f84:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   19f86:	4801      	ldr	r0, [pc, #4]	; (19f8c <nrfx_gpiote_channel_alloc+0x8>)
   19f88:	f7ff bdc4 	b.w	19b14 <nrfx_flag32_alloc>
   19f8c:	2000089c 	.word	0x2000089c

00019f90 <nrfx_gpiote_trigger_enable>:
{
   19f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
   19f92:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   19f94:	f7ff fe14 	bl	19bc0 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19f98:	f104 0208 	add.w	r2, r4, #8
   19f9c:	4b1e      	ldr	r3, [pc, #120]	; (1a018 <nrfx_gpiote_trigger_enable+0x88>)
   19f9e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   19fa2:	b1e8      	cbz	r0, 19fe0 <nrfx_gpiote_trigger_enable+0x50>
   19fa4:	f013 0502 	ands.w	r5, r3, #2
   19fa8:	d11a      	bne.n	19fe0 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   19faa:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   19fac:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   19fae:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   19fb2:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   19fb6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   19fba:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19fbe:	6005      	str	r5, [r0, #0]
   19fc0:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   19fc2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   19fc6:	f040 0001 	orr.w	r0, r0, #1
   19fca:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   19fce:	b129      	cbz	r1, 19fdc <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   19fd0:	2201      	movs	r2, #1
   19fd2:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   19fd6:	4a11      	ldr	r2, [pc, #68]	; (1a01c <nrfx_gpiote_trigger_enable+0x8c>)
   19fd8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   19fdc:	b003      	add	sp, #12
   19fde:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   19fe0:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   19fe4:	2b04      	cmp	r3, #4
   19fe6:	d012      	beq.n	1a00e <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   19fe8:	2b05      	cmp	r3, #5
   19fea:	d012      	beq.n	1a012 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   19fec:	a801      	add	r0, sp, #4
   19fee:	9401      	str	r4, [sp, #4]
   19ff0:	f7ff fdd8 	bl	19ba4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   19ff4:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   19ff6:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   19ffa:	40d9      	lsrs	r1, r3
   19ffc:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1a000:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1a002:	4620      	mov	r0, r4
}
   1a004:	b003      	add	sp, #12
   1a006:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1a00a:	f008 befd 	b.w	22e08 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1a00e:	2103      	movs	r1, #3
   1a010:	e7f7      	b.n	1a002 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1a012:	2102      	movs	r1, #2
   1a014:	e7f5      	b.n	1a002 <nrfx_gpiote_trigger_enable+0x72>
   1a016:	bf00      	nop
   1a018:	2000082c 	.word	0x2000082c
   1a01c:	40006000 	.word	0x40006000

0001a020 <nrfx_gpiote_trigger_disable>:
{
   1a020:	b508      	push	{r3, lr}
   1a022:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1a024:	f7ff fdcc 	bl	19bc0 <pin_in_use_by_te>
   1a028:	b1c0      	cbz	r0, 1a05c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1a02a:	f102 0108 	add.w	r1, r2, #8
   1a02e:	4b0e      	ldr	r3, [pc, #56]	; (1a068 <nrfx_gpiote_trigger_disable+0x48>)
   1a030:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1a034:	0799      	lsls	r1, r3, #30
   1a036:	d411      	bmi.n	1a05c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1a038:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1a03a:	2201      	movs	r2, #1
   1a03c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1a03e:	009b      	lsls	r3, r3, #2
   1a040:	490a      	ldr	r1, [pc, #40]	; (1a06c <nrfx_gpiote_trigger_disable+0x4c>)
   1a042:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a046:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1a04a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1a04e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1a052:	f022 0203 	bic.w	r2, r2, #3
   1a056:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1a05a:	bd08      	pop	{r3, pc}
   1a05c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1a060:	2100      	movs	r1, #0
   1a062:	4610      	mov	r0, r2
   1a064:	f008 bed0 	b.w	22e08 <nrf_gpio_cfg_sense_set>
   1a068:	2000082c 	.word	0x2000082c
   1a06c:	40006000 	.word	0x40006000

0001a070 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1a070:	4b0e      	ldr	r3, [pc, #56]	; (1a0ac <nrfx_gpiote_pin_uninit+0x3c>)
   1a072:	f100 0208 	add.w	r2, r0, #8
{
   1a076:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1a078:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1a07c:	07db      	lsls	r3, r3, #31
{
   1a07e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1a080:	d511      	bpl.n	1a0a6 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1a082:	f7ff ffcd 	bl	1a020 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1a086:	4620      	mov	r0, r4
   1a088:	f7ff fdec 	bl	19c64 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a08c:	a801      	add	r0, sp, #4
   1a08e:	9401      	str	r4, [sp, #4]
   1a090:	f7ff fd88 	bl	19ba4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1a094:	9b01      	ldr	r3, [sp, #4]
   1a096:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a09a:	2202      	movs	r2, #2
   1a09c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   1a0a0:	4803      	ldr	r0, [pc, #12]	; (1a0b0 <nrfx_gpiote_pin_uninit+0x40>)
}
   1a0a2:	b002      	add	sp, #8
   1a0a4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1a0a6:	4803      	ldr	r0, [pc, #12]	; (1a0b4 <nrfx_gpiote_pin_uninit+0x44>)
   1a0a8:	e7fb      	b.n	1a0a2 <nrfx_gpiote_pin_uninit+0x32>
   1a0aa:	bf00      	nop
   1a0ac:	2000082c 	.word	0x2000082c
   1a0b0:	0bad0000 	.word	0x0bad0000
   1a0b4:	0bad0004 	.word	0x0bad0004

0001a0b8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1a0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0bc:	4b64      	ldr	r3, [pc, #400]	; (1a250 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   1a0be:	4865      	ldr	r0, [pc, #404]	; (1a254 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1a0c0:	4965      	ldr	r1, [pc, #404]	; (1a258 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   1a0c2:	2600      	movs	r6, #0
{
   1a0c4:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1a0c6:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a0c8:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a0ca:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1a0cc:	b135      	cbz	r5, 1a0dc <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1a0ce:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1a0d2:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a0d4:	bf1e      	ittt	ne
   1a0d6:	601c      	strne	r4, [r3, #0]
   1a0d8:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1a0da:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1a0dc:	3304      	adds	r3, #4
   1a0de:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1a0e0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1a0e4:	d1f1      	bne.n	1a0ca <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a0e6:	f8df 816c 	ldr.w	r8, [pc, #364]	; 1a254 <nrfx_gpiote_irq_handler+0x19c>
   1a0ea:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1a0ee:	2b00      	cmp	r3, #0
   1a0f0:	f000 8091 	beq.w	1a216 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   1a0f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a0f8:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1a0fc:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1a0fe:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1a102:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   1a106:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1a108:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1a10c:	2700      	movs	r7, #0
            while (latch[i])
   1a10e:	f10d 0910 	add.w	r9, sp, #16
   1a112:	017b      	lsls	r3, r7, #5
   1a114:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1a116:	f04f 0a01 	mov.w	sl, #1
   1a11a:	e049      	b.n	1a1b0 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   1a11c:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1a11e:	4a4f      	ldr	r2, [pc, #316]	; (1a25c <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   1a120:	fa94 f4a4 	rbit	r4, r4
   1a124:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1a128:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1a12a:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1a12e:	08e0      	lsrs	r0, r4, #3
   1a130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1a134:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   1a136:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1a13a:	fa0a fc02 	lsl.w	ip, sl, r2
   1a13e:	f819 2000 	ldrb.w	r2, [r9, r0]
   1a142:	ea22 020c 	bic.w	r2, r2, ip
   1a146:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a14a:	a803      	add	r0, sp, #12
   1a14c:	f3c3 0582 	ubfx	r5, r3, #2, #3
   1a150:	0899      	lsrs	r1, r3, #2
   1a152:	f7ff fd27 	bl	19ba4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1a156:	9a03      	ldr	r2, [sp, #12]
   1a158:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   1a15c:	074b      	lsls	r3, r1, #29
   1a15e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1a162:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1a164:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   1a168:	d529      	bpl.n	1a1be <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   1a16a:	4620      	mov	r0, r4
   1a16c:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1a16e:	b2d5      	uxtb	r5, r2
   1a170:	f7ff fd30 	bl	19bd4 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a174:	a803      	add	r0, sp, #12
   1a176:	9403      	str	r4, [sp, #12]
   1a178:	f7ff fd14 	bl	19ba4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1a17c:	9b03      	ldr	r3, [sp, #12]
   1a17e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a182:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1a186:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1a18a:	429d      	cmp	r5, r3
   1a18c:	d107      	bne.n	1a19e <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1a18e:	2100      	movs	r1, #0
   1a190:	4620      	mov	r0, r4
   1a192:	f008 fe39 	bl	22e08 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1a196:	4629      	mov	r1, r5
   1a198:	4620      	mov	r0, r4
   1a19a:	f008 fe35 	bl	22e08 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a19e:	a803      	add	r0, sp, #12
   1a1a0:	9403      	str	r4, [sp, #12]
   1a1a2:	f7ff fcff 	bl	19ba4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1a1a6:	9b03      	ldr	r3, [sp, #12]
   1a1a8:	fa0a f303 	lsl.w	r3, sl, r3
   1a1ac:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   1a1b0:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   1a1b4:	2c00      	cmp	r4, #0
   1a1b6:	d1b1      	bne.n	1a11c <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1a1b8:	b9cf      	cbnz	r7, 1a1ee <nrfx_gpiote_irq_handler+0x136>
   1a1ba:	2701      	movs	r7, #1
   1a1bc:	e7a9      	b.n	1a112 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1a1be:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1a1c0:	bf0c      	ite	eq
   1a1c2:	2103      	moveq	r1, #3
   1a1c4:	2102      	movne	r1, #2
   1a1c6:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1a1c8:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1a1ca:	f008 fe1d 	bl	22e08 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1a1ce:	2d03      	cmp	r5, #3
   1a1d0:	d004      	beq.n	1a1dc <nrfx_gpiote_irq_handler+0x124>
   1a1d2:	9a01      	ldr	r2, [sp, #4]
   1a1d4:	2a02      	cmp	r2, #2
   1a1d6:	d106      	bne.n	1a1e6 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1a1d8:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1a1da:	d1e0      	bne.n	1a19e <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   1a1dc:	4659      	mov	r1, fp
   1a1de:	4620      	mov	r0, r4
   1a1e0:	f7ff fcf8 	bl	19bd4 <call_handler>
   1a1e4:	e7db      	b.n	1a19e <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1a1e6:	2a03      	cmp	r2, #3
   1a1e8:	d1d9      	bne.n	1a19e <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1a1ea:	2d02      	cmp	r5, #2
   1a1ec:	e7f5      	b.n	1a1da <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a1ee:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   1a1f2:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   1a1f6:	491a      	ldr	r1, [pc, #104]	; (1a260 <nrfx_gpiote_irq_handler+0x1a8>)
   1a1f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a1fc:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1a200:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1a202:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1a206:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   1a20a:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1a20c:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   1a210:	4313      	orrs	r3, r2
   1a212:	f47f af7b 	bne.w	1a10c <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   1a216:	2401      	movs	r4, #1
    while (mask)
   1a218:	b916      	cbnz	r6, 1a220 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1a21a:	b007      	add	sp, #28
   1a21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1a220:	fa96 f3a6 	rbit	r3, r6
   1a224:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1a228:	fa04 f203 	lsl.w	r2, r4, r3
   1a22c:	009b      	lsls	r3, r3, #2
   1a22e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a232:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1a236:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1a23a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1a23e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1a242:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1a246:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1a24a:	f7ff fcc3 	bl	19bd4 <call_handler>
   1a24e:	e7e3      	b.n	1a218 <nrfx_gpiote_irq_handler+0x160>
   1a250:	40006100 	.word	0x40006100
   1a254:	40006000 	.word	0x40006000
   1a258:	40006120 	.word	0x40006120
   1a25c:	2000082c 	.word	0x2000082c
   1a260:	50000300 	.word	0x50000300

0001a264 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1a264:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1a266:	4801      	ldr	r0, [pc, #4]	; (1a26c <nrfx_ppi_channel_alloc+0x8>)
   1a268:	f7ff bc54 	b.w	19b14 <nrfx_flag32_alloc>
   1a26c:	200008a8 	.word	0x200008a8

0001a270 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   1a270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1a274:	7906      	ldrb	r6, [r0, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1a276:	4d2b      	ldr	r5, [pc, #172]	; (1a324 <nrfx_twim_init+0xb4>)
   1a278:	f04f 0c34 	mov.w	ip, #52	; 0x34
   1a27c:	fb0c fc06 	mul.w	ip, ip, r6
   1a280:	eb05 040c 	add.w	r4, r5, ip
   1a284:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
   1a288:	2f00      	cmp	r7, #0
   1a28a:	d149      	bne.n	1a320 <nrfx_twim_init+0xb0>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   1a28c:	6800      	ldr	r0, [r0, #0]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
   1a28e:	6063      	str	r3, [r4, #4]
    p_cb->int_mask        = 0;
    p_cb->repeated        = false;
    p_cb->busy            = false;
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   1a290:	7b4b      	ldrb	r3, [r1, #13]
   1a292:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   1a296:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->handler         = event_handler;
   1a298:	f845 200c 	str.w	r2, [r5, ip]
    p_cb->int_mask        = 0;
   1a29c:	60a7      	str	r7, [r4, #8]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   1a29e:	f891 c00f 	ldrb.w	ip, [r1, #15]
    p_cb->repeated        = false;
   1a2a2:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
   1a2a6:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   1a2aa:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   1a2ae:	b1cb      	cbz	r3, 1a2e4 <nrfx_twim_init+0x74>
   1a2b0:	f1bc 0f00 	cmp.w	ip, #0
   1a2b4:	d105      	bne.n	1a2c2 <nrfx_twim_init+0x52>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   1a2b6:	e9d1 4300 	ldrd	r4, r3, [r1]

NRF_STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                         uint32_t scl_pin,
                                         uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
   1a2ba:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   1a2be:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   1a2c2:	688b      	ldr	r3, [r1, #8]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1a2c4:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524

    if (p_cb->handler)
   1a2c8:	b11a      	cbz	r2, 1a2d2 <nrfx_twim_init+0x62>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   1a2ca:	f340 3007 	sbfx	r0, r0, #12, #8
   1a2ce:	f7f9 f8db 	bl	13488 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1a2d2:	2334      	movs	r3, #52	; 0x34
   1a2d4:	fb03 5506 	mla	r5, r3, r6, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1a2d8:	4813      	ldr	r0, [pc, #76]	; (1a328 <nrfx_twim_init+0xb8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1a2da:	2301      	movs	r3, #1
   1a2dc:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   1a2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
   1a2e4:	680c      	ldr	r4, [r1, #0]
        case 1: return NRF_P1;
   1a2e6:	4b11      	ldr	r3, [pc, #68]	; (1a32c <nrfx_twim_init+0xbc>)
    *p_pin = pin_number & 0x1F;
   1a2e8:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
   1a2ec:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
   1a2ee:	2c01      	cmp	r4, #1
   1a2f0:	bf18      	it	ne
   1a2f2:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1a2f6:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
        case 1: return NRF_P1;
   1a2fa:	bf08      	it	eq
   1a2fc:	4698      	moveq	r8, r3
    reg->PIN_CNF[pin_number] = cnf;
   1a2fe:	f240 6e0c 	movw	lr, #1548	; 0x60c
   1a302:	f848 e024 	str.w	lr, [r8, r4, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
   1a306:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
   1a308:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
   1a30c:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
   1a30e:	2c01      	cmp	r4, #1
   1a310:	bf18      	it	ne
   1a312:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1a316:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
   1a31a:	f843 e024 	str.w	lr, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
   1a31e:	e7c7      	b.n	1a2b0 <nrfx_twim_init+0x40>
        return err_code;
   1a320:	4803      	ldr	r0, [pc, #12]	; (1a330 <nrfx_twim_init+0xc0>)
   1a322:	e7dd      	b.n	1a2e0 <nrfx_twim_init+0x70>
   1a324:	200029c0 	.word	0x200029c0
   1a328:	0bad0000 	.word	0x0bad0000
   1a32c:	50000300 	.word	0x50000300
   1a330:	0bad0005 	.word	0x0bad0005

0001a334 <nrfx_twim_enable>:
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
   1a334:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1a336:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1a338:	2106      	movs	r1, #6
   1a33a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1a33e:	4b04      	ldr	r3, [pc, #16]	; (1a350 <nrfx_twim_enable+0x1c>)
   1a340:	2134      	movs	r1, #52	; 0x34
   1a342:	fb01 3302 	mla	r3, r1, r2, r3
   1a346:	2202      	movs	r2, #2
   1a348:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   1a34c:	4770      	bx	lr
   1a34e:	bf00      	nop
   1a350:	200029c0 	.word	0x200029c0

0001a354 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1a354:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
   1a356:	4b0c      	ldr	r3, [pc, #48]	; (1a388 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   1a358:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   1a35a:	2034      	movs	r0, #52	; 0x34
   1a35c:	fb00 3301 	mla	r3, r0, r1, r3
   1a360:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   1a362:	480a      	ldr	r0, [pc, #40]	; (1a38c <nrfx_twim_disable+0x38>)
   1a364:	6099      	str	r1, [r3, #8]
   1a366:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   1a36a:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   1a36e:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   1a372:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1a376:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1a37a:	2201      	movs	r2, #1
   1a37c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
   1a380:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   1a384:	4770      	bx	lr
   1a386:	bf00      	nop
   1a388:	200029c0 	.word	0x200029c0
   1a38c:	019c0202 	.word	0x019c0202

0001a390 <nrfx_twim_uninit>:
{
   1a390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1a392:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->handler)
   1a394:	4d1e      	ldr	r5, [pc, #120]	; (1a410 <nrfx_twim_uninit+0x80>)
   1a396:	2334      	movs	r3, #52	; 0x34
   1a398:	4373      	muls	r3, r6
{
   1a39a:	4604      	mov	r4, r0
    if (p_cb->handler)
   1a39c:	58eb      	ldr	r3, [r5, r3]
   1a39e:	b123      	cbz	r3, 1a3aa <nrfx_twim_uninit+0x1a>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1a3a0:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_twim));
   1a3a2:	f340 3007 	sbfx	r0, r0, #12, #8
   1a3a6:	f7f9 f87f 	bl	134a8 <arch_irq_disable>
    nrfx_twim_disable(p_instance);
   1a3aa:	4620      	mov	r0, r4
   1a3ac:	f7ff ffd2 	bl	1a354 <nrfx_twim_disable>
    if (!p_cb->skip_gpio_cfg && !p_cb->hold_bus_uninit)
   1a3b0:	2334      	movs	r3, #52	; 0x34
   1a3b2:	fb03 5306 	mla	r3, r3, r6, r5
   1a3b6:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
   1a3ba:	bb0a      	cbnz	r2, 1a400 <nrfx_twim_uninit+0x70>
   1a3bc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   1a3c0:	b9f3      	cbnz	r3, 1a400 <nrfx_twim_uninit+0x70>
        nrf_gpio_cfg_default(nrf_twim_scl_pin_get(p_instance->p_twim));
   1a3c2:	6824      	ldr	r4, [r4, #0]
        case 1: return NRF_P1;
   1a3c4:	4b13      	ldr	r3, [pc, #76]	; (1a414 <nrfx_twim_uninit+0x84>)
    return p_reg->PSEL.SCL;
   1a3c6:	f8d4 2508 	ldr.w	r2, [r4, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   1a3ca:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   1a3ce:	0952      	lsrs	r2, r2, #5
        case 1: return NRF_P1;
   1a3d0:	2a01      	cmp	r2, #1
   1a3d2:	bf18      	it	ne
   1a3d4:	f04f 47a0 	movne.w	r7, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1a3d8:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
        case 1: return NRF_P1;
   1a3dc:	bf08      	it	eq
   1a3de:	461f      	moveq	r7, r3
    reg->PIN_CNF[pin_number] = cnf;
   1a3e0:	2002      	movs	r0, #2
   1a3e2:	f847 0022 	str.w	r0, [r7, r2, lsl #2]
    return p_reg->PSEL.SDA;
   1a3e6:	f8d4 250c 	ldr.w	r2, [r4, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
   1a3ea:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   1a3ee:	0952      	lsrs	r2, r2, #5
        case 1: return NRF_P1;
   1a3f0:	2a01      	cmp	r2, #1
   1a3f2:	bf18      	it	ne
   1a3f4:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1a3f8:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   1a3fc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   1a400:	2334      	movs	r3, #52	; 0x34
   1a402:	fb03 5506 	mla	r5, r3, r6, r5
   1a406:	2300      	movs	r3, #0
   1a408:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   1a40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a40e:	bf00      	nop
   1a410:	200029c0 	.word	0x200029c0
   1a414:	50000300 	.word	0x50000300

0001a418 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   1a418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
   1a41c:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 1a6f0 <nrfx_twim_xfer+0x2d8>
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1a420:	f890 e004 	ldrb.w	lr, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   1a424:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   1a426:	2334      	movs	r3, #52	; 0x34
   1a428:	fb03 c30e 	mla	r3, r3, lr, ip
{
   1a42c:	4617      	mov	r7, r2
    p_cb->error = false;
   1a42e:	2200      	movs	r2, #0
   1a430:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   1a434:	684b      	ldr	r3, [r1, #4]
{
   1a436:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   1a438:	b14b      	cbz	r3, 1a44e <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1a43a:	68cb      	ldr	r3, [r1, #12]
   1a43c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   1a440:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1a444:	d003      	beq.n	1a44e <nrfx_twim_xfer+0x36>
        return err_code;
   1a446:	4eab      	ldr	r6, [pc, #684]	; (1a6f4 <nrfx_twim_xfer+0x2dc>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1a448:	4630      	mov	r0, r6
   1a44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   1a44e:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
   1a450:	4ba9      	ldr	r3, [pc, #676]	; (1a6f8 <nrfx_twim_xfer+0x2e0>)
   1a452:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   1a456:	fb06 c60e 	mla	r6, r6, lr, ip
   1a45a:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   1a45e:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   1a462:	b123      	cbz	r3, 1a46e <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1a464:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   1a466:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
   1a46a:	4ea4      	ldr	r6, [pc, #656]	; (1a6fc <nrfx_twim_xfer+0x2e4>)
   1a46c:	e7ec      	b.n	1a448 <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   1a46e:	f017 0f14 	tst.w	r7, #20
   1a472:	bf0c      	ite	eq
   1a474:	2301      	moveq	r3, #1
   1a476:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   1a478:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   1a47c:	46a9      	mov	r9, r5
   1a47e:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   1a482:	f106 080c 	add.w	r8, r6, #12
   1a486:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   1a48a:	f8d9 3000 	ldr.w	r3, [r9]
   1a48e:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   1a492:	f3c7 1300 	ubfx	r3, r7, #4, #1
   1a496:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
   1a49a:	6237      	str	r7, [r6, #32]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   1a49c:	786b      	ldrb	r3, [r5, #1]
   1a49e:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a4a2:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   1a4a6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1a4aa:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   1a4ae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a4b2:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   1a4b6:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   1a4ba:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   1a4be:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   1a4c2:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   1a4c6:	bf18      	it	ne
   1a4c8:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   1a4ca:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   1a4ce:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   1a4d2:	bf18      	it	ne
   1a4d4:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   1a4d6:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   1a4da:	782a      	ldrb	r2, [r5, #0]
   1a4dc:	2a03      	cmp	r2, #3
   1a4de:	f200 80b5 	bhi.w	1a64c <nrfx_twim_xfer+0x234>
   1a4e2:	e8df f002 	tbb	[pc, r2]
   1a4e6:	a084      	.short	0xa084
   1a4e8:	0269      	.short	0x0269
   1a4ea:	692b      	ldr	r3, [r5, #16]
   1a4ec:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   1a4f0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   1a4f4:	d1a7      	bne.n	1a446 <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
   1a4f6:	f44f 7180 	mov.w	r1, #256	; 0x100
   1a4fa:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a4fe:	68e8      	ldr	r0, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1a500:	6869      	ldr	r1, [r5, #4]
   1a502:	f8c4 0544 	str.w	r0, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1a506:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a50a:	2100      	movs	r1, #0
   1a50c:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
   1a510:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a514:	2001      	movs	r0, #1
   1a516:	6220      	str	r0, [r4, #32]
   1a518:	60a0      	str	r0, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a51a:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   1a51e:	2800      	cmp	r0, #0
   1a520:	d0fb      	beq.n	1a51a <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a522:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
   1a526:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   1a52a:	68a9      	ldr	r1, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a52c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   1a530:	2334      	movs	r3, #52	; 0x34
   1a532:	fb03 c30e 	mla	r3, r3, lr, ip
    p_reg->TXD.MAXCNT = length;
   1a536:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
   1a53a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1a53e:	6099      	str	r1, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   1a540:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   1a542:	4e6f      	ldr	r6, [pc, #444]	; (1a700 <nrfx_twim_xfer+0x2e8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   1a544:	0739      	lsls	r1, r7, #28
   1a546:	d406      	bmi.n	1a556 <nrfx_twim_xfer+0x13e>
   1a548:	2a03      	cmp	r2, #3
   1a54a:	d004      	beq.n	1a556 <nrfx_twim_xfer+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a54c:	2201      	movs	r2, #1
   1a54e:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   1a550:	686b      	ldr	r3, [r5, #4]
   1a552:	b903      	cbnz	r3, 1a556 <nrfx_twim_xfer+0x13e>
   1a554:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   1a556:	2334      	movs	r3, #52	; 0x34
   1a558:	fb03 f30e 	mul.w	r3, r3, lr
   1a55c:	eb0c 0103 	add.w	r1, ip, r3
   1a560:	f85c 2003 	ldr.w	r2, [ip, r3]
   1a564:	2a00      	cmp	r2, #0
   1a566:	d174      	bne.n	1a652 <nrfx_twim_xfer+0x23a>
                transmission_finished = true;
   1a568:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a56a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1a56e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1a572:	2800      	cmp	r0, #0
   1a574:	f040 8088 	bne.w	1a688 <nrfx_twim_xfer+0x270>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   1a578:	3b00      	subs	r3, #0
   1a57a:	bf18      	it	ne
   1a57c:	2301      	movne	r3, #1
   1a57e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   1a582:	2800      	cmp	r0, #0
   1a584:	f000 8086 	beq.w	1a694 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a588:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a58c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a590:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   1a594:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   1a598:	b115      	cbz	r5, 1a5a0 <nrfx_twim_xfer+0x188>
   1a59a:	f410 7f00 	tst.w	r0, #512	; 0x200
   1a59e:	d104      	bne.n	1a5aa <nrfx_twim_xfer+0x192>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a5a0:	6221      	str	r1, [r4, #32]
   1a5a2:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   1a5a4:	2d00      	cmp	r5, #0
   1a5a6:	d0e0      	beq.n	1a56a <nrfx_twim_xfer+0x152>
                    transmission_finished = false;
   1a5a8:	2300      	movs	r3, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   1a5aa:	05c0      	lsls	r0, r0, #23
   1a5ac:	d572      	bpl.n	1a694 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a5ae:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
   1a5b2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        } while (!transmission_finished);
   1a5b6:	e7d8      	b.n	1a56a <nrfx_twim_xfer+0x152>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1a5b8:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a5ba:	68e9      	ldr	r1, [r5, #12]
   1a5bc:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1a5c0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   1a5c4:	692b      	ldr	r3, [r5, #16]
   1a5c6:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   1a5ca:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   1a5ce:	f47f af3a 	bne.w	1a446 <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   1a5d2:	68a9      	ldr	r1, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1a5d4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   1a5d8:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   1a5dc:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   1a5e0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1a5e4:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1a5e6:	fb03 c30e 	mla	r3, r3, lr, ip
   1a5ea:	2102      	movs	r1, #2
   1a5ec:	e012      	b.n	1a614 <nrfx_twim_xfer+0x1fc>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1a5ee:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a5f0:	68e9      	ldr	r1, [r5, #12]
   1a5f2:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   1a5f6:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
   1a5fa:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   1a5fe:	f04f 0334 	mov.w	r3, #52	; 0x34
   1a602:	d00b      	beq.n	1a61c <nrfx_twim_xfer+0x204>
    p_reg->SHORTS = mask;
   1a604:	f44f 7180 	mov.w	r1, #256	; 0x100
   1a608:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   1a60c:	fb03 c30e 	mla	r3, r3, lr, ip
   1a610:	f44f 2180 	mov.w	r1, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1a614:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a616:	2301      	movs	r3, #1
   1a618:	6223      	str	r3, [r4, #32]
   1a61a:	e791      	b.n	1a540 <nrfx_twim_xfer+0x128>
    p_reg->SHORTS = mask;
   1a61c:	f44f 7100 	mov.w	r1, #512	; 0x200
   1a620:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
   1a624:	e7df      	b.n	1a5e6 <nrfx_twim_xfer+0x1ce>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1a626:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1a628:	68e9      	ldr	r1, [r5, #12]
   1a62a:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1a62e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   1a632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1a636:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1a63a:	2334      	movs	r3, #52	; 0x34
   1a63c:	fb03 c30e 	mla	r3, r3, lr, ip
   1a640:	2102      	movs	r1, #2
   1a642:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a644:	2301      	movs	r3, #1
   1a646:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   1a648:	2300      	movs	r3, #0
   1a64a:	e77a      	b.n	1a542 <nrfx_twim_xfer+0x12a>
    switch (p_xfer_desc->type)
   1a64c:	4e2d      	ldr	r6, [pc, #180]	; (1a704 <nrfx_twim_xfer+0x2ec>)
   1a64e:	2308      	movs	r3, #8
   1a650:	e778      	b.n	1a544 <nrfx_twim_xfer+0x12c>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   1a652:	077a      	lsls	r2, r7, #29
            p_cb->int_mask = 0;
   1a654:	bf44      	itt	mi
   1a656:	2300      	movmi	r3, #0
   1a658:	608b      	strmi	r3, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   1a65a:	067b      	lsls	r3, r7, #25
   1a65c:	d406      	bmi.n	1a66c <nrfx_twim_xfer+0x254>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   1a65e:	2334      	movs	r3, #52	; 0x34
   1a660:	fb03 c30e 	mla	r3, r3, lr, ip
   1a664:	689a      	ldr	r2, [r3, #8]
   1a666:	f042 0202 	orr.w	r2, r2, #2
   1a66a:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   1a66c:	2334      	movs	r3, #52	; 0x34
   1a66e:	fb03 cc0e 	mla	ip, r3, lr, ip
   1a672:	f8dc 3008 	ldr.w	r3, [ip, #8]
   1a676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1a67a:	f8cc 3008 	str.w	r3, [ip, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1a67e:	f8dc 3008 	ldr.w	r3, [ip, #8]
    p_reg->INTENSET = mask;
   1a682:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   1a686:	e6df      	b.n	1a448 <nrfx_twim_xfer+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a688:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1a68c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
   1a690:	2301      	movs	r3, #1
   1a692:	e774      	b.n	1a57e <nrfx_twim_xfer+0x166>
        } while (!transmission_finished);
   1a694:	2b00      	cmp	r3, #0
   1a696:	f43f af68 	beq.w	1a56a <nrfx_twim_xfer+0x152>
        p_cb->busy = false;
   1a69a:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
   1a69c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1a6a0:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   1a6a4:	fb01 c20e 	mla	r2, r1, lr, ip
   1a6a8:	2000      	movs	r0, #0
   1a6aa:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   1a6ae:	b18b      	cbz	r3, 1a6d4 <nrfx_twim_xfer+0x2bc>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1a6b0:	4a15      	ldr	r2, [pc, #84]	; (1a708 <nrfx_twim_xfer+0x2f0>)
   1a6b2:	4e16      	ldr	r6, [pc, #88]	; (1a70c <nrfx_twim_xfer+0x2f4>)
   1a6b4:	f013 0f01 	tst.w	r3, #1
   1a6b8:	bf18      	it	ne
   1a6ba:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1a6bc:	f013 0f02 	tst.w	r3, #2
   1a6c0:	f102 0201 	add.w	r2, r2, #1
   1a6c4:	bf18      	it	ne
   1a6c6:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1a6c8:	f013 0f04 	tst.w	r3, #4
   1a6cc:	4b10      	ldr	r3, [pc, #64]	; (1a710 <nrfx_twim_xfer+0x2f8>)
   1a6ce:	bf18      	it	ne
   1a6d0:	461e      	movne	r6, r3
   1a6d2:	e6b9      	b.n	1a448 <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   1a6d4:	067b      	lsls	r3, r7, #25
   1a6d6:	f53f aeb7 	bmi.w	1a448 <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
   1a6da:	fb0e c101 	mla	r1, lr, r1, ip
   1a6de:	4620      	mov	r0, r4
   1a6e0:	f008 fba1 	bl	22e26 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   1a6e4:	4b09      	ldr	r3, [pc, #36]	; (1a70c <nrfx_twim_xfer+0x2f4>)
   1a6e6:	2800      	cmp	r0, #0
   1a6e8:	bf08      	it	eq
   1a6ea:	461e      	moveq	r6, r3
   1a6ec:	e6ac      	b.n	1a448 <nrfx_twim_xfer+0x30>
   1a6ee:	bf00      	nop
   1a6f0:	200029c0 	.word	0x200029c0
   1a6f4:	0bad000a 	.word	0x0bad000a
   1a6f8:	019c0202 	.word	0x019c0202
   1a6fc:	0bad000b 	.word	0x0bad000b
   1a700:	0bad0000 	.word	0x0bad0000
   1a704:	0bad0004 	.word	0x0bad0004
   1a708:	0bae0000 	.word	0x0bae0000
   1a70c:	0bad0001 	.word	0x0bad0001
   1a710:	0bae0002 	.word	0x0bae0002

0001a714 <nrfx_twim_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
   1a714:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a716:	4d5a      	ldr	r5, [pc, #360]	; (1a880 <nrfx_twim_0_irq_handler+0x16c>)
   1a718:	4c5a      	ldr	r4, [pc, #360]	; (1a884 <nrfx_twim_0_irq_handler+0x170>)
   1a71a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a71e:	b087      	sub	sp, #28
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   1a720:	b1fb      	cbz	r3, 1a762 <nrfx_twim_0_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a722:	2300      	movs	r3, #0
   1a724:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a728:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a72c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1a730:	b9bb      	cbnz	r3, 1a762 <nrfx_twim_0_irq_handler+0x4e>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   1a732:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   1a734:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1a738:	2302      	movs	r3, #2
   1a73a:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1a73c:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   1a73e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a742:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   1a746:	b11b      	cbz	r3, 1a750 <nrfx_twim_0_irq_handler+0x3c>
    return p_reg->SHORTS;
   1a748:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   1a74c:	059e      	lsls	r6, r3, #22
   1a74e:	d403      	bmi.n	1a758 <nrfx_twim_0_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a750:	4b4b      	ldr	r3, [pc, #300]	; (1a880 <nrfx_twim_0_irq_handler+0x16c>)
   1a752:	2201      	movs	r2, #1
   1a754:	621a      	str	r2, [r3, #32]
   1a756:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   1a758:	2301      	movs	r3, #1
   1a75a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
}
   1a75e:	b007      	add	sp, #28
   1a760:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a762:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1a766:	2b00      	cmp	r3, #0
   1a768:	d053      	beq.n	1a812 <nrfx_twim_0_irq_handler+0xfe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a76a:	2300      	movs	r3, #0
   1a76c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   1a770:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   1a774:	6a23      	ldr	r3, [r4, #32]
   1a776:	065d      	lsls	r5, r3, #25
   1a778:	d40a      	bmi.n	1a790 <nrfx_twim_0_irq_handler+0x7c>
   1a77a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1a77e:	b93b      	cbnz	r3, 1a790 <nrfx_twim_0_irq_handler+0x7c>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   1a780:	4940      	ldr	r1, [pc, #256]	; (1a884 <nrfx_twim_0_irq_handler+0x170>)
   1a782:	483f      	ldr	r0, [pc, #252]	; (1a880 <nrfx_twim_0_irq_handler+0x16c>)
   1a784:	f008 fb4f 	bl	22e26 <xfer_completeness_check>
   1a788:	f080 0001 	eor.w	r0, r0, #1
   1a78c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   1a790:	6a23      	ldr	r3, [r4, #32]
   1a792:	f013 0704 	ands.w	r7, r3, #4
   1a796:	d121      	bne.n	1a7dc <nrfx_twim_0_irq_handler+0xc8>
            event.xfer_desc = p_cb->xfer_desc;
   1a798:	4e3b      	ldr	r6, [pc, #236]	; (1a888 <nrfx_twim_0_irq_handler+0x174>)
            if (!p_cb->repeated || p_cb->error)
   1a79a:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
   1a79e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1a7a0:	ad01      	add	r5, sp, #4
   1a7a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1a7a4:	6833      	ldr	r3, [r6, #0]
   1a7a6:	602b      	str	r3, [r5, #0]
   1a7a8:	4b35      	ldr	r3, [pc, #212]	; (1a880 <nrfx_twim_0_irq_handler+0x16c>)
   1a7aa:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   1a7ae:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   1a7b2:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
   1a7b6:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   1a7ba:	f1bc 0f00 	cmp.w	ip, #0
   1a7be:	d002      	beq.n	1a7c6 <nrfx_twim_0_irq_handler+0xb2>
   1a7c0:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   1a7c4:	b152      	cbz	r2, 1a7dc <nrfx_twim_0_irq_handler+0xc8>
    p_reg->SHORTS = mask;
   1a7c6:	2200      	movs	r2, #0
   1a7c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   1a7cc:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   1a7ce:	4a2f      	ldr	r2, [pc, #188]	; (1a88c <nrfx_twim_0_irq_handler+0x178>)
   1a7d0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a7d4:	4b2e      	ldr	r3, [pc, #184]	; (1a890 <nrfx_twim_0_irq_handler+0x17c>)
   1a7d6:	2208      	movs	r2, #8
   1a7d8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   1a7dc:	4a28      	ldr	r2, [pc, #160]	; (1a880 <nrfx_twim_0_irq_handler+0x16c>)
   1a7de:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1a7e2:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   1a7e6:	0798      	lsls	r0, r3, #30
   1a7e8:	d53c      	bpl.n	1a864 <nrfx_twim_0_irq_handler+0x150>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   1a7ea:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   1a7ec:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   1a7f0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1a7f4:	b90b      	cbnz	r3, 1a7fa <nrfx_twim_0_irq_handler+0xe6>
        p_cb->busy = false;
   1a7f6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   1a7fa:	6a23      	ldr	r3, [r4, #32]
   1a7fc:	075b      	lsls	r3, r3, #29
   1a7fe:	d503      	bpl.n	1a808 <nrfx_twim_0_irq_handler+0xf4>
   1a800:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1a804:	2b00      	cmp	r3, #0
   1a806:	d0aa      	beq.n	1a75e <nrfx_twim_0_irq_handler+0x4a>
        p_cb->handler(&event, p_cb->p_context);
   1a808:	e9d4 3100 	ldrd	r3, r1, [r4]
   1a80c:	4668      	mov	r0, sp
   1a80e:	4798      	blx	r3
}
   1a810:	e7a5      	b.n	1a75e <nrfx_twim_0_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a812:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   1a816:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   1a81a:	7b23      	ldrb	r3, [r4, #12]
   1a81c:	b983      	cbnz	r3, 1a840 <nrfx_twim_0_irq_handler+0x12c>
            event.xfer_desc = p_cb->xfer_desc;
   1a81e:	4f1a      	ldr	r7, [pc, #104]	; (1a888 <nrfx_twim_0_irq_handler+0x174>)
   1a820:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1a822:	ae01      	add	r6, sp, #4
   1a824:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1a826:	683b      	ldr	r3, [r7, #0]
   1a828:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   1a82a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1a82e:	2b00      	cmp	r3, #0
   1a830:	d1d4      	bne.n	1a7dc <nrfx_twim_0_irq_handler+0xc8>
    p_reg->SHORTS = mask;
   1a832:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   1a836:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   1a838:	4b14      	ldr	r3, [pc, #80]	; (1a88c <nrfx_twim_0_irq_handler+0x178>)
   1a83a:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   1a83e:	e7c9      	b.n	1a7d4 <nrfx_twim_0_irq_handler+0xc0>
    p_reg->SHORTS = mask;
   1a840:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a844:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   1a848:	f240 2302 	movw	r3, #514	; 0x202
   1a84c:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   1a84e:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   1a852:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1a856:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   1a858:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a85c:	2301      	movs	r3, #1
   1a85e:	60ab      	str	r3, [r5, #8]
   1a860:	622b      	str	r3, [r5, #32]
            return;
   1a862:	e77c      	b.n	1a75e <nrfx_twim_0_irq_handler+0x4a>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   1a864:	0759      	lsls	r1, r3, #29
   1a866:	d501      	bpl.n	1a86c <nrfx_twim_0_irq_handler+0x158>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   1a868:	2302      	movs	r3, #2
   1a86a:	e7bf      	b.n	1a7ec <nrfx_twim_0_irq_handler+0xd8>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   1a86c:	07da      	lsls	r2, r3, #31
   1a86e:	d501      	bpl.n	1a874 <nrfx_twim_0_irq_handler+0x160>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   1a870:	2303      	movs	r3, #3
   1a872:	e7bb      	b.n	1a7ec <nrfx_twim_0_irq_handler+0xd8>
    else if (p_cb->error)
   1a874:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1a878:	2b00      	cmp	r3, #0
   1a87a:	d0b7      	beq.n	1a7ec <nrfx_twim_0_irq_handler+0xd8>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   1a87c:	2304      	movs	r3, #4
   1a87e:	e7b5      	b.n	1a7ec <nrfx_twim_0_irq_handler+0xd8>
   1a880:	40003000 	.word	0x40003000
   1a884:	200029c0 	.word	0x200029c0
   1a888:	200029cc 	.word	0x200029cc
   1a88c:	019c0202 	.word	0x019c0202
   1a890:	e000e100 	.word	0xe000e100

0001a894 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1a894:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1a896:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1a89a:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1a89c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1a89e:	6002      	str	r2, [r0, #0]
}
   1a8a0:	4802      	ldr	r0, [pc, #8]	; (1a8ac <nrf_gpio_pin_port_decode+0x18>)
   1a8a2:	bf18      	it	ne
   1a8a4:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1a8a8:	4770      	bx	lr
   1a8aa:	bf00      	nop
   1a8ac:	50000300 	.word	0x50000300

0001a8b0 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   1a8b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a8b2:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   1a8b4:	f008 fae7 	bl	22e86 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   1a8b8:	4608      	mov	r0, r1
   1a8ba:	f008 fae4 	bl	22e86 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a8be:	a801      	add	r0, sp, #4
   1a8c0:	9601      	str	r6, [sp, #4]
   1a8c2:	f7ff ffe7 	bl	1a894 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1a8c6:	9b01      	ldr	r3, [sp, #4]
   1a8c8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
   1a8cc:	460c      	mov	r4, r1
   1a8ce:	f240 610d 	movw	r1, #1549	; 0x60d
   1a8d2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a8d6:	a801      	add	r0, sp, #4
   1a8d8:	9401      	str	r4, [sp, #4]
   1a8da:	f7ff ffdb 	bl	1a894 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1a8de:	9b01      	ldr	r3, [sp, #4]
   1a8e0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   1a8e4:	2509      	movs	r5, #9
   1a8e6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
   1a8ea:	2004      	movs	r0, #4
   1a8ec:	f008 fa43 	bl	22d76 <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1a8f0:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a8f2:	a801      	add	r0, sp, #4
   1a8f4:	9401      	str	r4, [sp, #4]
   1a8f6:	f7ff ffcd 	bl	1a894 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1a8fa:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   1a8fc:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1a900:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   1a902:	07db      	lsls	r3, r3, #31
   1a904:	d415      	bmi.n	1a932 <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a906:	a801      	add	r0, sp, #4
   1a908:	9601      	str	r6, [sp, #4]
   1a90a:	f7ff ffc3 	bl	1a894 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1a90e:	9b01      	ldr	r3, [sp, #4]
   1a910:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   1a914:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   1a918:	2004      	movs	r0, #4
   1a91a:	f008 fa2c 	bl	22d76 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   1a91e:	4630      	mov	r0, r6
   1a920:	f008 fab1 	bl	22e86 <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
   1a924:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
   1a926:	2004      	movs	r0, #4
   1a928:	f008 fa25 	bl	22d76 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   1a92c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   1a930:	d1df      	bne.n	1a8f2 <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a932:	a801      	add	r0, sp, #4
   1a934:	9401      	str	r4, [sp, #4]
   1a936:	f7ff ffad 	bl	1a894 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1a93a:	9a01      	ldr	r2, [sp, #4]
   1a93c:	2301      	movs	r3, #1
   1a93e:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   1a940:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   1a944:	2004      	movs	r0, #4
   1a946:	f008 fa16 	bl	22d76 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   1a94a:	4620      	mov	r0, r4
   1a94c:	f008 fa9b 	bl	22e86 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   1a950:	2004      	movs	r0, #4
   1a952:	f008 fa10 	bl	22d76 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a956:	a801      	add	r0, sp, #4
   1a958:	9401      	str	r4, [sp, #4]
   1a95a:	f7ff ff9b 	bl	1a894 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1a95e:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   1a960:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   1a964:	4803      	ldr	r0, [pc, #12]	; (1a974 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1a966:	40d3      	lsrs	r3, r2
   1a968:	f003 0301 	and.w	r3, r3, #1
   1a96c:	1ac0      	subs	r0, r0, r3
   1a96e:	b003      	add	sp, #12
   1a970:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a972:	bf00      	nop
   1a974:	0bad0001 	.word	0x0bad0001

0001a978 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1a978:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1a97a:	4c14      	ldr	r4, [pc, #80]	; (1a9cc <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1a97c:	4a14      	ldr	r2, [pc, #80]	; (1a9d0 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1a97e:	4915      	ldr	r1, [pc, #84]	; (1a9d4 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1a980:	2303      	movs	r3, #3
   1a982:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1a984:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1a986:	4b14      	ldr	r3, [pc, #80]	; (1a9d8 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   1a988:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1a98a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1a98c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1a990:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1a992:	2300      	movs	r3, #0
   1a994:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1a996:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1a998:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1a99a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1a99c:	4a0f      	ldr	r2, [pc, #60]	; (1a9dc <_DoInit+0x64>)
   1a99e:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   1a9a0:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1a9a2:	2210      	movs	r2, #16
   1a9a4:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1a9a6:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1a9a8:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1a9aa:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1a9ac:	f005 fd6f 	bl	2048e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1a9b0:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   1a9b4:	490a      	ldr	r1, [pc, #40]	; (1a9e0 <_DoInit+0x68>)
   1a9b6:	4620      	mov	r0, r4
   1a9b8:	f005 fd69 	bl	2048e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1a9bc:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   1a9c0:	2320      	movs	r3, #32
   1a9c2:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1a9c4:	f3bf 8f5f 	dmb	sy
}
   1a9c8:	bd10      	pop	{r4, pc}
   1a9ca:	bf00      	nop
   1a9cc:	200029f4 	.word	0x200029f4
   1a9d0:	00025386 	.word	0x00025386
   1a9d4:	0002538f 	.word	0x0002538f
   1a9d8:	20003c4b 	.word	0x20003c4b
   1a9dc:	20003c3b 	.word	0x20003c3b
   1a9e0:	00025393 	.word	0x00025393

0001a9e4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1a9e4:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   1a9e6:	4b16      	ldr	r3, [pc, #88]	; (1aa40 <SEGGER_RTT_WriteNoLock+0x5c>)
   1a9e8:	2418      	movs	r4, #24
   1a9ea:	fb00 4504 	mla	r5, r0, r4, r4
   1a9ee:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   1a9f0:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1a9f4:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   1a9f6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   1a9f8:	2c01      	cmp	r4, #1
   1a9fa:	d00e      	beq.n	1aa1a <SEGGER_RTT_WriteNoLock+0x36>
   1a9fc:	2c02      	cmp	r4, #2
   1a9fe:	d018      	beq.n	1aa32 <SEGGER_RTT_WriteNoLock+0x4e>
   1aa00:	b9e4      	cbnz	r4, 1aa3c <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   1aa02:	4628      	mov	r0, r5
   1aa04:	f008 fa4c 	bl	22ea0 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   1aa08:	4286      	cmp	r6, r0
   1aa0a:	d804      	bhi.n	1aa16 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   1aa0c:	4632      	mov	r2, r6
   1aa0e:	4628      	mov	r0, r5
   1aa10:	f008 fa4f 	bl	22eb2 <_WriteNoCheck>
   1aa14:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   1aa16:	4620      	mov	r0, r4
   1aa18:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
   1aa1a:	4628      	mov	r0, r5
   1aa1c:	f008 fa40 	bl	22ea0 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   1aa20:	4286      	cmp	r6, r0
   1aa22:	4634      	mov	r4, r6
   1aa24:	bf28      	it	cs
   1aa26:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   1aa28:	4622      	mov	r2, r4
   1aa2a:	4628      	mov	r0, r5
   1aa2c:	f008 fa41 	bl	22eb2 <_WriteNoCheck>
    break;
   1aa30:	e7f1      	b.n	1aa16 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   1aa32:	4628      	mov	r0, r5
}
   1aa34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   1aa38:	f008 ba59 	b.w	22eee <_WriteBlocking>
  switch (pRing->Flags) {
   1aa3c:	2400      	movs	r4, #0
  return Status;
   1aa3e:	e7ea      	b.n	1aa16 <SEGGER_RTT_WriteNoLock+0x32>
   1aa40:	200029f4 	.word	0x200029f4

0001aa44 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1aa44:	4b0e      	ldr	r3, [pc, #56]	; (1aa80 <z_sys_init_run_level+0x3c>)
{
   1aa46:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1aa48:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1aa4c:	3001      	adds	r0, #1
   1aa4e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1aa52:	42a6      	cmp	r6, r4
   1aa54:	d800      	bhi.n	1aa58 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1aa56:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1aa58:	e9d4 3500 	ldrd	r3, r5, [r4]
   1aa5c:	4628      	mov	r0, r5
   1aa5e:	4798      	blx	r3
		if (dev != NULL) {
   1aa60:	b165      	cbz	r5, 1aa7c <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   1aa62:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   1aa64:	b130      	cbz	r0, 1aa74 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1aa66:	2800      	cmp	r0, #0
   1aa68:	bfb8      	it	lt
   1aa6a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1aa6c:	28ff      	cmp	r0, #255	; 0xff
   1aa6e:	bfa8      	it	ge
   1aa70:	20ff      	movge	r0, #255	; 0xff
   1aa72:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1aa74:	785a      	ldrb	r2, [r3, #1]
   1aa76:	f042 0201 	orr.w	r2, r2, #1
   1aa7a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1aa7c:	3408      	adds	r4, #8
   1aa7e:	e7e8      	b.n	1aa52 <z_sys_init_run_level+0xe>
   1aa80:	00024924 	.word	0x00024924

0001aa84 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1aa84:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1aa86:	4605      	mov	r5, r0
   1aa88:	b910      	cbnz	r0, 1aa90 <z_impl_device_get_binding+0xc>
		return NULL;
   1aa8a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   1aa8c:	4620      	mov	r0, r4
   1aa8e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   1aa90:	7803      	ldrb	r3, [r0, #0]
   1aa92:	2b00      	cmp	r3, #0
   1aa94:	d0f9      	beq.n	1aa8a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1aa96:	4c0e      	ldr	r4, [pc, #56]	; (1aad0 <z_impl_device_get_binding+0x4c>)
   1aa98:	4e0e      	ldr	r6, [pc, #56]	; (1aad4 <z_impl_device_get_binding+0x50>)
   1aa9a:	42b4      	cmp	r4, r6
   1aa9c:	d108      	bne.n	1aab0 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   1aa9e:	4c0c      	ldr	r4, [pc, #48]	; (1aad0 <z_impl_device_get_binding+0x4c>)
   1aaa0:	42b4      	cmp	r4, r6
   1aaa2:	d0f2      	beq.n	1aa8a <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1aaa4:	4620      	mov	r0, r4
   1aaa6:	f008 fa56 	bl	22f56 <z_device_is_ready>
   1aaaa:	b950      	cbnz	r0, 1aac2 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1aaac:	3418      	adds	r4, #24
   1aaae:	e7f7      	b.n	1aaa0 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   1aab0:	4620      	mov	r0, r4
   1aab2:	f008 fa50 	bl	22f56 <z_device_is_ready>
   1aab6:	b110      	cbz	r0, 1aabe <z_impl_device_get_binding+0x3a>
   1aab8:	6823      	ldr	r3, [r4, #0]
   1aaba:	42ab      	cmp	r3, r5
   1aabc:	d0e6      	beq.n	1aa8c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1aabe:	3418      	adds	r4, #24
   1aac0:	e7eb      	b.n	1aa9a <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1aac2:	6821      	ldr	r1, [r4, #0]
   1aac4:	4628      	mov	r0, r5
   1aac6:	f005 fd0e 	bl	204e6 <strcmp>
   1aaca:	2800      	cmp	r0, #0
   1aacc:	d1ee      	bne.n	1aaac <z_impl_device_get_binding+0x28>
   1aace:	e7dd      	b.n	1aa8c <z_impl_device_get_binding+0x8>
   1aad0:	00023bcc 	.word	0x00023bcc
   1aad4:	00023cd4 	.word	0x00023cd4

0001aad8 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1aad8:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1aada:	4b0a      	ldr	r3, [pc, #40]	; (1ab04 <bg_thread_main+0x2c>)
   1aadc:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1aade:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1aae0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1aae2:	f7ff ffaf 	bl	1aa44 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1aae6:	f001 fadf 	bl	1c0a8 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1aaea:	2003      	movs	r0, #3
   1aaec:	f7ff ffaa 	bl	1aa44 <z_sys_init_run_level>

	z_init_static_threads();
   1aaf0:	f000 f97c 	bl	1adec <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   1aaf4:	f7f7 fd12 	bl	1251c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1aaf8:	4a03      	ldr	r2, [pc, #12]	; (1ab08 <bg_thread_main+0x30>)
   1aafa:	7b13      	ldrb	r3, [r2, #12]
   1aafc:	f023 0301 	bic.w	r3, r3, #1
   1ab00:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1ab02:	bd08      	pop	{r3, pc}
   1ab04:	2000404b 	.word	0x2000404b
   1ab08:	20001ed8 	.word	0x20001ed8

0001ab0c <z_bss_zero>:
{
   1ab0c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1ab0e:	4803      	ldr	r0, [pc, #12]	; (1ab1c <z_bss_zero+0x10>)
   1ab10:	4a03      	ldr	r2, [pc, #12]	; (1ab20 <z_bss_zero+0x14>)
   1ab12:	2100      	movs	r1, #0
   1ab14:	1a12      	subs	r2, r2, r0
   1ab16:	f008 fa43 	bl	22fa0 <z_early_memset>
}
   1ab1a:	bd08      	pop	{r3, pc}
   1ab1c:	20000cd0 	.word	0x20000cd0
   1ab20:	2000404c 	.word	0x2000404c

0001ab24 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1ab24:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   1ab26:	2300      	movs	r3, #0
{
   1ab28:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1ab2a:	2201      	movs	r2, #1
   1ab2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   1ab30:	4e13      	ldr	r6, [pc, #76]	; (1ab80 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1ab32:	4d14      	ldr	r5, [pc, #80]	; (1ab84 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   1ab34:	9301      	str	r3, [sp, #4]
   1ab36:	220f      	movs	r2, #15
   1ab38:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1ab3c:	4912      	ldr	r1, [pc, #72]	; (1ab88 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1ab3e:	2318      	movs	r3, #24
   1ab40:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   1ab44:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   1ab48:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1ab4a:	f44f 70b0 	mov.w	r0, #352	; 0x160
   1ab4e:	fb00 1104 	mla	r1, r0, r4, r1
   1ab52:	4b0e      	ldr	r3, [pc, #56]	; (1ab8c <z_init_cpu+0x68>)
   1ab54:	9500      	str	r5, [sp, #0]
   1ab56:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1ab5a:	4630      	mov	r0, r6
   1ab5c:	f000 f8e8 	bl	1ad30 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ab60:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1ab62:	480b      	ldr	r0, [pc, #44]	; (1ab90 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
   1ab64:	752c      	strb	r4, [r5, #20]
   1ab66:	f023 0304 	bic.w	r3, r3, #4
   1ab6a:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1ab6c:	f44f 6302 	mov.w	r3, #2080	; 0x820
   1ab70:	fb03 0404 	mla	r4, r3, r4, r0
   1ab74:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1ab76:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   1ab78:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1ab7a:	b006      	add	sp, #24
   1ab7c:	bd70      	pop	{r4, r5, r6, pc}
   1ab7e:	bf00      	nop
   1ab80:	20001e58 	.word	0x20001e58
   1ab84:	20002a9c 	.word	0x20002a9c
   1ab88:	20005aa0 	.word	0x20005aa0
   1ab8c:	0001aea5 	.word	0x0001aea5
   1ab90:	20005c00 	.word	0x20005c00

0001ab94 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1ab94:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1ab96:	4b2e      	ldr	r3, [pc, #184]	; (1ac50 <z_cstart+0xbc>)
   1ab98:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1ab9a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1ab9e:	4d2d      	ldr	r5, [pc, #180]	; (1ac54 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   1aba0:	4e2d      	ldr	r6, [pc, #180]	; (1ac58 <z_cstart+0xc4>)
   1aba2:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1aba4:	4f2d      	ldr	r7, [pc, #180]	; (1ac5c <z_cstart+0xc8>)
   1aba6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1abaa:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1abac:	23e0      	movs	r3, #224	; 0xe0
   1abae:	2400      	movs	r4, #0
   1abb0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1abb4:	2320      	movs	r3, #32
   1abb6:	77eb      	strb	r3, [r5, #31]
   1abb8:	762c      	strb	r4, [r5, #24]
   1abba:	766c      	strb	r4, [r5, #25]
   1abbc:	76ac      	strb	r4, [r5, #26]
   1abbe:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1abc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1abc4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1abc8:	626b      	str	r3, [r5, #36]	; 0x24
   1abca:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1abce:	f7f8 fe8d 	bl	138ec <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1abd2:	f7f8 fc3b 	bl	1344c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1abd6:	f04f 33ff 	mov.w	r3, #4294967295
   1abda:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1abdc:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1abde:	f7f8 ffbd 	bl	13b5c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1abe2:	f7f8 ff25 	bl	13a30 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1abe6:	f240 1301 	movw	r3, #257	; 0x101
   1abea:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1abee:	ab06      	add	r3, sp, #24
   1abf0:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1abf2:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   1abf6:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1abf8:	f008 f9ac 	bl	22f54 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1abfc:	4620      	mov	r0, r4
   1abfe:	f7ff ff21 	bl	1aa44 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1ac02:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   1ac04:	4d16      	ldr	r5, [pc, #88]	; (1ac60 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1ac06:	f7ff ff1d 	bl	1aa44 <z_sys_init_run_level>
	z_sched_init();
   1ac0a:	f000 fea7 	bl	1b95c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1ac0e:	4b15      	ldr	r3, [pc, #84]	; (1ac64 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
   1ac10:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1ac12:	9305      	str	r3, [sp, #20]
   1ac14:	2301      	movs	r3, #1
   1ac16:	4914      	ldr	r1, [pc, #80]	; (1ac68 <z_cstart+0xd4>)
   1ac18:	9400      	str	r4, [sp, #0]
   1ac1a:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1ac1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1ac22:	463b      	mov	r3, r7
   1ac24:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1ac28:	4628      	mov	r0, r5
   1ac2a:	f000 f881 	bl	1ad30 <z_setup_new_thread>
   1ac2e:	7b6a      	ldrb	r2, [r5, #13]
   1ac30:	4606      	mov	r6, r0
   1ac32:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   1ac36:	4628      	mov	r0, r5
   1ac38:	736a      	strb	r2, [r5, #13]
   1ac3a:	f008 fcb1 	bl	235a0 <z_ready_thread>
	z_init_cpu(0);
   1ac3e:	4620      	mov	r0, r4
   1ac40:	f7ff ff70 	bl	1ab24 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1ac44:	463a      	mov	r2, r7
   1ac46:	4631      	mov	r1, r6
   1ac48:	4628      	mov	r0, r5
   1ac4a:	f7f8 fd1d 	bl	13688 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1ac4e:	bf00      	nop
   1ac50:	20006420 	.word	0x20006420
   1ac54:	e000ed00 	.word	0xe000ed00
   1ac58:	20002a9c 	.word	0x20002a9c
   1ac5c:	0001aad9 	.word	0x0001aad9
   1ac60:	20001ed8 	.word	0x20001ed8
   1ac64:	0002539a 	.word	0x0002539a
   1ac68:	20005280 	.word	0x20005280

0001ac6c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1ac6c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1ac6e:	4c06      	ldr	r4, [pc, #24]	; (1ac88 <statics_init+0x1c>)
   1ac70:	4d06      	ldr	r5, [pc, #24]	; (1ac8c <statics_init+0x20>)
   1ac72:	42ac      	cmp	r4, r5
   1ac74:	d301      	bcc.n	1ac7a <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1ac76:	2000      	movs	r0, #0
   1ac78:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1ac7a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1ac7e:	4620      	mov	r0, r4
   1ac80:	f008 f992 	bl	22fa8 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1ac84:	3414      	adds	r4, #20
   1ac86:	e7f4      	b.n	1ac72 <statics_init+0x6>
   1ac88:	20000b4c 	.word	0x20000b4c
   1ac8c:	20000b4c 	.word	0x20000b4c

0001ac90 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   1ac90:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1ac92:	4b0e      	ldr	r3, [pc, #56]	; (1accc <init_mem_slab_module+0x3c>)
   1ac94:	4c0e      	ldr	r4, [pc, #56]	; (1acd0 <init_mem_slab_module+0x40>)
   1ac96:	42a3      	cmp	r3, r4
   1ac98:	d301      	bcc.n	1ac9e <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   1ac9a:	2000      	movs	r0, #0
	return rc;
}
   1ac9c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1ac9e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1aca2:	ea41 0200 	orr.w	r2, r1, r0
   1aca6:	f012 0203 	ands.w	r2, r2, #3
   1acaa:	d10b      	bne.n	1acc4 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1acac:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1acae:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1acb0:	42aa      	cmp	r2, r5
   1acb2:	d101      	bne.n	1acb8 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1acb4:	331c      	adds	r3, #28
   1acb6:	e7ee      	b.n	1ac96 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1acb8:	695e      	ldr	r6, [r3, #20]
   1acba:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1acbc:	3201      	adds	r2, #1
		slab->free_list = p;
   1acbe:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1acc0:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1acc2:	e7f5      	b.n	1acb0 <init_mem_slab_module+0x20>
	return rc;
   1acc4:	f06f 0015 	mvn.w	r0, #21
   1acc8:	e7e8      	b.n	1ac9c <init_mem_slab_module+0xc>
   1acca:	bf00      	nop
   1accc:	20000af8 	.word	0x20000af8
   1acd0:	20000b4c 	.word	0x20000b4c

0001acd4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1acd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1acd6:	460c      	mov	r4, r1
	__asm__ volatile(
   1acd8:	f04f 0540 	mov.w	r5, #64	; 0x40
   1acdc:	f3ef 8111 	mrs	r1, BASEPRI
   1ace0:	f385 8812 	msr	BASEPRI_MAX, r5
   1ace4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1ace8:	6945      	ldr	r5, [r0, #20]
   1acea:	b15d      	cbz	r5, 1ad04 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1acec:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1acee:	682b      	ldr	r3, [r5, #0]
   1acf0:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1acf2:	6983      	ldr	r3, [r0, #24]
   1acf4:	3301      	adds	r3, #1
   1acf6:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1acf8:	2000      	movs	r0, #0
	__asm__ volatile(
   1acfa:	f381 8811 	msr	BASEPRI, r1
   1acfe:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1ad02:	e011      	b.n	1ad28 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1ad04:	ea52 0c03 	orrs.w	ip, r2, r3
   1ad08:	d103      	bne.n	1ad12 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1ad0a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1ad0c:	f06f 000b 	mvn.w	r0, #11
   1ad10:	e7f3      	b.n	1acfa <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1ad12:	e9cd 2300 	strd	r2, r3, [sp]
   1ad16:	4602      	mov	r2, r0
   1ad18:	3008      	adds	r0, #8
   1ad1a:	f000 fd75 	bl	1b808 <z_pend_curr>
		if (result == 0) {
   1ad1e:	b918      	cbnz	r0, 1ad28 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   1ad20:	4b02      	ldr	r3, [pc, #8]	; (1ad2c <k_mem_slab_alloc+0x58>)
   1ad22:	689b      	ldr	r3, [r3, #8]
   1ad24:	695b      	ldr	r3, [r3, #20]
   1ad26:	6023      	str	r3, [r4, #0]
}
   1ad28:	b003      	add	sp, #12
   1ad2a:	bd30      	pop	{r4, r5, pc}
   1ad2c:	20002a9c 	.word	0x20002a9c

0001ad30 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1ad30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1ad34:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1ad36:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1ad38:	2604      	movs	r6, #4
   1ad3a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1ad3c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1ad3e:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1ad40:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   1ad44:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1ad46:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1ad48:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ad4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1ad4e:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1ad50:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1ad54:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1ad56:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1ad5a:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1ad5e:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1ad60:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1ad62:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1ad64:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ad68:	9202      	str	r2, [sp, #8]
   1ad6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ad6c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1ad6e:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ad70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ad72:	9200      	str	r2, [sp, #0]
   1ad74:	4642      	mov	r2, r8
{
   1ad76:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ad78:	f7f8 fc54 	bl	13624 <arch_new_thread>
	if (!_current) {
   1ad7c:	4b04      	ldr	r3, [pc, #16]	; (1ad90 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   1ad7e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1ad80:	689b      	ldr	r3, [r3, #8]
   1ad82:	b103      	cbz	r3, 1ad86 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1ad84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1ad86:	6763      	str	r3, [r4, #116]	; 0x74
}
   1ad88:	4640      	mov	r0, r8
   1ad8a:	b004      	add	sp, #16
   1ad8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ad90:	20002a9c 	.word	0x20002a9c

0001ad94 <z_impl_k_thread_create>:
{
   1ad94:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ad96:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1ad98:	2700      	movs	r7, #0
   1ad9a:	9705      	str	r7, [sp, #20]
   1ad9c:	9f10      	ldr	r7, [sp, #64]	; 0x40
   1ad9e:	9704      	str	r7, [sp, #16]
   1ada0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   1ada2:	9703      	str	r7, [sp, #12]
   1ada4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1ada6:	9702      	str	r7, [sp, #8]
{
   1ada8:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1adac:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1adae:	9701      	str	r7, [sp, #4]
   1adb0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1adb2:	9700      	str	r7, [sp, #0]
{
   1adb4:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1adb6:	f7ff ffbb 	bl	1ad30 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1adba:	f1b5 3fff 	cmp.w	r5, #4294967295
   1adbe:	bf08      	it	eq
   1adc0:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1adc4:	d005      	beq.n	1add2 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1adc6:	ea55 0306 	orrs.w	r3, r5, r6
   1adca:	d105      	bne.n	1add8 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   1adcc:	4620      	mov	r0, r4
   1adce:	f000 fcbf 	bl	1b750 <z_sched_start>
}
   1add2:	4620      	mov	r0, r4
   1add4:	b007      	add	sp, #28
   1add6:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1add8:	4903      	ldr	r1, [pc, #12]	; (1ade8 <z_impl_k_thread_create+0x54>)
   1adda:	4632      	mov	r2, r6
   1addc:	462b      	mov	r3, r5
   1adde:	f104 0018 	add.w	r0, r4, #24
   1ade2:	f000 ff37 	bl	1bc54 <z_add_timeout>
   1ade6:	e7f4      	b.n	1add2 <z_impl_k_thread_create+0x3e>
   1ade8:	000235c1 	.word	0x000235c1

0001adec <z_init_static_threads>:
{
   1adec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1adf0:	4c29      	ldr	r4, [pc, #164]	; (1ae98 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1adf2:	4d2a      	ldr	r5, [pc, #168]	; (1ae9c <z_init_static_threads+0xb0>)
{
   1adf4:	b087      	sub	sp, #28
   1adf6:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1adf8:	42ae      	cmp	r6, r5
   1adfa:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1adfe:	d30f      	bcc.n	1ae20 <z_init_static_threads+0x34>
	k_sched_lock();
   1ae00:	f000 fbc0 	bl	1b584 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ae04:	4c24      	ldr	r4, [pc, #144]	; (1ae98 <z_init_static_threads+0xac>)
   1ae06:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1aea0 <z_init_static_threads+0xb4>
   1ae0a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1ae0e:	f240 37e7 	movw	r7, #999	; 0x3e7
   1ae12:	42ac      	cmp	r4, r5
   1ae14:	d320      	bcc.n	1ae58 <z_init_static_threads+0x6c>
}
   1ae16:	b007      	add	sp, #28
   1ae18:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1ae1c:	f000 bd82 	b.w	1b924 <k_sched_unlock>
		z_setup_new_thread(
   1ae20:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1ae24:	9305      	str	r3, [sp, #20]
   1ae26:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1ae2a:	9304      	str	r3, [sp, #16]
   1ae2c:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1ae30:	9303      	str	r3, [sp, #12]
   1ae32:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1ae36:	9302      	str	r3, [sp, #8]
   1ae38:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1ae3c:	9301      	str	r3, [sp, #4]
   1ae3e:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1ae42:	9300      	str	r3, [sp, #0]
   1ae44:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1ae48:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1ae4c:	f7ff ff70 	bl	1ad30 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1ae50:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1ae54:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1ae56:	e7ce      	b.n	1adf6 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1ae58:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ae5a:	1c5a      	adds	r2, r3, #1
   1ae5c:	d00d      	beq.n	1ae7a <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   1ae5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1ae62:	2100      	movs	r1, #0
   1ae64:	4638      	mov	r0, r7
   1ae66:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ae6a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1ae6e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ae72:	d104      	bne.n	1ae7e <z_init_static_threads+0x92>
	z_sched_start(thread);
   1ae74:	4640      	mov	r0, r8
   1ae76:	f000 fc6b 	bl	1b750 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ae7a:	3430      	adds	r4, #48	; 0x30
   1ae7c:	e7c9      	b.n	1ae12 <z_init_static_threads+0x26>
   1ae7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ae82:	2300      	movs	r3, #0
   1ae84:	f7e6 f8d6 	bl	1034 <__aeabi_uldivmod>
   1ae88:	4602      	mov	r2, r0
   1ae8a:	460b      	mov	r3, r1
   1ae8c:	f108 0018 	add.w	r0, r8, #24
   1ae90:	4649      	mov	r1, r9
   1ae92:	f000 fedf 	bl	1bc54 <z_add_timeout>
   1ae96:	e7f0      	b.n	1ae7a <z_init_static_threads+0x8e>
   1ae98:	20000af8 	.word	0x20000af8
   1ae9c:	20000af8 	.word	0x20000af8
   1aea0:	000235c1 	.word	0x000235c1

0001aea4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1aea4:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1aea6:	4c0b      	ldr	r4, [pc, #44]	; (1aed4 <idle+0x30>)
	return !z_sys_post_kernel;
   1aea8:	4d0b      	ldr	r5, [pc, #44]	; (1aed8 <idle+0x34>)
	__asm__ volatile(
   1aeaa:	f04f 0240 	mov.w	r2, #64	; 0x40
   1aeae:	f3ef 8311 	mrs	r3, BASEPRI
   1aeb2:	f382 8812 	msr	BASEPRI_MAX, r2
   1aeb6:	f3bf 8f6f 	isb	sy
   1aeba:	f008 fc3d 	bl	23738 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1aebe:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   1aec0:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1aec2:	b913      	cbnz	r3, 1aeca <idle+0x26>
	arch_cpu_idle();
   1aec4:	f7f8 fac8 	bl	13458 <arch_cpu_idle>
}
   1aec8:	e7ef      	b.n	1aeaa <idle+0x6>
   1aeca:	f7f8 f8bd 	bl	13048 <pm_system_suspend>
   1aece:	2800      	cmp	r0, #0
   1aed0:	d1eb      	bne.n	1aeaa <idle+0x6>
   1aed2:	e7f7      	b.n	1aec4 <idle+0x20>
   1aed4:	20002a9c 	.word	0x20002a9c
   1aed8:	2000404b 	.word	0x2000404b

0001aedc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1aedc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1aee0:	4604      	mov	r4, r0
   1aee2:	4617      	mov	r7, r2
   1aee4:	461e      	mov	r6, r3
   1aee6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1aeea:	f3ef 8811 	mrs	r8, BASEPRI
   1aeee:	f383 8812 	msr	BASEPRI_MAX, r3
   1aef2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1aef6:	68c3      	ldr	r3, [r0, #12]
   1aef8:	4a32      	ldr	r2, [pc, #200]	; (1afc4 <z_impl_k_mutex_lock+0xe8>)
   1aefa:	b16b      	cbz	r3, 1af18 <z_impl_k_mutex_lock+0x3c>
   1aefc:	6880      	ldr	r0, [r0, #8]
   1aefe:	6891      	ldr	r1, [r2, #8]
   1af00:	4288      	cmp	r0, r1
   1af02:	d019      	beq.n	1af38 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1af04:	ea57 0306 	orrs.w	r3, r7, r6
   1af08:	d118      	bne.n	1af3c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1af0a:	f388 8811 	msr	BASEPRI, r8
   1af0e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1af12:	f06f 000f 	mvn.w	r0, #15
   1af16:	e00c      	b.n	1af32 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1af18:	6891      	ldr	r1, [r2, #8]
   1af1a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1af1e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1af20:	3301      	adds	r3, #1
   1af22:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1af24:	6893      	ldr	r3, [r2, #8]
   1af26:	60a3      	str	r3, [r4, #8]
   1af28:	f388 8811 	msr	BASEPRI, r8
   1af2c:	f3bf 8f6f 	isb	sy
		return 0;
   1af30:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1af32:	b002      	add	sp, #8
   1af34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1af38:	6921      	ldr	r1, [r4, #16]
   1af3a:	e7f0      	b.n	1af1e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1af3c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1af40:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   1af44:	4299      	cmp	r1, r3
   1af46:	bfa8      	it	ge
   1af48:	4619      	movge	r1, r3
   1af4a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1af4e:	4291      	cmp	r1, r2
   1af50:	bfb8      	it	lt
   1af52:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1af54:	428b      	cmp	r3, r1
   1af56:	dd2e      	ble.n	1afb6 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   1af58:	f008 f8e2 	bl	23120 <adjust_owner_prio.isra.0>
   1af5c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1af5e:	e9cd 7600 	strd	r7, r6, [sp]
   1af62:	4819      	ldr	r0, [pc, #100]	; (1afc8 <z_impl_k_mutex_lock+0xec>)
   1af64:	4622      	mov	r2, r4
   1af66:	4641      	mov	r1, r8
   1af68:	f000 fc4e 	bl	1b808 <z_pend_curr>
	if (got_mutex == 0) {
   1af6c:	2800      	cmp	r0, #0
   1af6e:	d0e0      	beq.n	1af32 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1af70:	f04f 0340 	mov.w	r3, #64	; 0x40
   1af74:	f3ef 8611 	mrs	r6, BASEPRI
   1af78:	f383 8812 	msr	BASEPRI_MAX, r3
   1af7c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1af80:	6823      	ldr	r3, [r4, #0]
   1af82:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1af84:	429c      	cmp	r4, r3
   1af86:	d00a      	beq.n	1af9e <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1af88:	b14b      	cbz	r3, 1af9e <z_impl_k_mutex_lock+0xc2>
   1af8a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1af8e:	4299      	cmp	r1, r3
   1af90:	bfa8      	it	ge
   1af92:	4619      	movge	r1, r3
   1af94:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1af98:	4299      	cmp	r1, r3
   1af9a:	bfb8      	it	lt
   1af9c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1af9e:	68a0      	ldr	r0, [r4, #8]
   1afa0:	f008 f8be 	bl	23120 <adjust_owner_prio.isra.0>
   1afa4:	b900      	cbnz	r0, 1afa8 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   1afa6:	b145      	cbz	r5, 1afba <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1afa8:	4807      	ldr	r0, [pc, #28]	; (1afc8 <z_impl_k_mutex_lock+0xec>)
   1afaa:	4631      	mov	r1, r6
   1afac:	f000 fad8 	bl	1b560 <z_reschedule>
	return -EAGAIN;
   1afb0:	f06f 000a 	mvn.w	r0, #10
   1afb4:	e7bd      	b.n	1af32 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1afb6:	2500      	movs	r5, #0
   1afb8:	e7d1      	b.n	1af5e <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   1afba:	f386 8811 	msr	BASEPRI, r6
   1afbe:	f3bf 8f6f 	isb	sy
   1afc2:	e7f5      	b.n	1afb0 <z_impl_k_mutex_lock+0xd4>
   1afc4:	20002a9c 	.word	0x20002a9c
   1afc8:	2000404c 	.word	0x2000404c

0001afcc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1afcc:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1afce:	6883      	ldr	r3, [r0, #8]
{
   1afd0:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1afd2:	2b00      	cmp	r3, #0
   1afd4:	d032      	beq.n	1b03c <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1afd6:	4a1c      	ldr	r2, [pc, #112]	; (1b048 <z_impl_k_mutex_unlock+0x7c>)
   1afd8:	6892      	ldr	r2, [r2, #8]
   1afda:	4293      	cmp	r3, r2
   1afdc:	d131      	bne.n	1b042 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1afde:	7bda      	ldrb	r2, [r3, #15]
   1afe0:	3a01      	subs	r2, #1
   1afe2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1afe4:	68c3      	ldr	r3, [r0, #12]
   1afe6:	2b01      	cmp	r3, #1
   1afe8:	d905      	bls.n	1aff6 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1afea:	3b01      	subs	r3, #1
   1afec:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1afee:	f000 fc99 	bl	1b924 <k_sched_unlock>

	return 0;
   1aff2:	2000      	movs	r0, #0
}
   1aff4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1aff6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1affa:	f3ef 8511 	mrs	r5, BASEPRI
   1affe:	f383 8812 	msr	BASEPRI_MAX, r3
   1b002:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1b006:	6901      	ldr	r1, [r0, #16]
   1b008:	6880      	ldr	r0, [r0, #8]
   1b00a:	f008 f889 	bl	23120 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1b00e:	4620      	mov	r0, r4
   1b010:	f008 fb37 	bl	23682 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1b014:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1b016:	b158      	cbz	r0, 1b030 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   1b018:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1b01c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1b01e:	2200      	movs	r2, #0
   1b020:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1b022:	f008 fabd 	bl	235a0 <z_ready_thread>
		z_reschedule(&lock, key);
   1b026:	4809      	ldr	r0, [pc, #36]	; (1b04c <z_impl_k_mutex_unlock+0x80>)
   1b028:	4629      	mov	r1, r5
   1b02a:	f000 fa99 	bl	1b560 <z_reschedule>
   1b02e:	e7de      	b.n	1afee <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1b030:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1b032:	f385 8811 	msr	BASEPRI, r5
   1b036:	f3bf 8f6f 	isb	sy
   1b03a:	e7d8      	b.n	1afee <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1b03c:	f06f 0015 	mvn.w	r0, #21
   1b040:	e7d8      	b.n	1aff4 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1b042:	f04f 30ff 	mov.w	r0, #4294967295
   1b046:	e7d5      	b.n	1aff4 <z_impl_k_mutex_unlock+0x28>
   1b048:	20002a9c 	.word	0x20002a9c
   1b04c:	2000404c 	.word	0x2000404c

0001b050 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1b050:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b052:	4611      	mov	r1, r2
	__asm__ volatile(
   1b054:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b058:	f3ef 8511 	mrs	r5, BASEPRI
   1b05c:	f382 8812 	msr	BASEPRI_MAX, r2
   1b060:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1b064:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1b066:	b19c      	cbz	r4, 1b090 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1b068:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1b06a:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1b06c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1b070:	4294      	cmp	r4, r2
	list->head = node;
   1b072:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1b074:	bf08      	it	eq
   1b076:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1b078:	2101      	movs	r1, #1
   1b07a:	4620      	mov	r0, r4
   1b07c:	f008 f8c3 	bl	23206 <z_queue_node_peek>
   1b080:	4604      	mov	r4, r0
	__asm__ volatile(
   1b082:	f385 8811 	msr	BASEPRI, r5
   1b086:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1b08a:	4620      	mov	r0, r4
   1b08c:	b003      	add	sp, #12
   1b08e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b090:	ea51 0203 	orrs.w	r2, r1, r3
   1b094:	d0f5      	beq.n	1b082 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1b096:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1b09a:	e9cd 1300 	strd	r1, r3, [sp]
   1b09e:	4610      	mov	r0, r2
   1b0a0:	4629      	mov	r1, r5
   1b0a2:	f000 fbb1 	bl	1b808 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1b0a6:	2800      	cmp	r0, #0
   1b0a8:	d1ef      	bne.n	1b08a <z_impl_k_queue_get+0x3a>
   1b0aa:	4b02      	ldr	r3, [pc, #8]	; (1b0b4 <z_impl_k_queue_get+0x64>)
   1b0ac:	689b      	ldr	r3, [r3, #8]
   1b0ae:	695c      	ldr	r4, [r3, #20]
   1b0b0:	e7eb      	b.n	1b08a <z_impl_k_queue_get+0x3a>
   1b0b2:	bf00      	nop
   1b0b4:	20002a9c 	.word	0x20002a9c

0001b0b8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1b0b8:	b538      	push	{r3, r4, r5, lr}
   1b0ba:	4604      	mov	r4, r0
	__asm__ volatile(
   1b0bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b0c0:	f3ef 8511 	mrs	r5, BASEPRI
   1b0c4:	f383 8812 	msr	BASEPRI_MAX, r3
   1b0c8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1b0cc:	f008 fad9 	bl	23682 <z_unpend_first_thread>

	if (thread != NULL) {
   1b0d0:	b148      	cbz	r0, 1b0e6 <z_impl_k_sem_give+0x2e>
   1b0d2:	2200      	movs	r2, #0
   1b0d4:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1b0d6:	f008 fa63 	bl	235a0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1b0da:	4629      	mov	r1, r5
   1b0dc:	4808      	ldr	r0, [pc, #32]	; (1b100 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1b0de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1b0e2:	f000 ba3d 	b.w	1b560 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b0e6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1b0ea:	429a      	cmp	r2, r3
   1b0ec:	bf18      	it	ne
   1b0ee:	3301      	addne	r3, #1
   1b0f0:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1b0f2:	2102      	movs	r1, #2
   1b0f4:	f104 0010 	add.w	r0, r4, #16
   1b0f8:	f008 fce4 	bl	23ac4 <z_handle_obj_poll_events>
}
   1b0fc:	e7ed      	b.n	1b0da <z_impl_k_sem_give+0x22>
   1b0fe:	bf00      	nop
   1b100:	2000404c 	.word	0x2000404c

0001b104 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1b104:	b513      	push	{r0, r1, r4, lr}
   1b106:	f04f 0440 	mov.w	r4, #64	; 0x40
   1b10a:	f3ef 8111 	mrs	r1, BASEPRI
   1b10e:	f384 8812 	msr	BASEPRI_MAX, r4
   1b112:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1b116:	6884      	ldr	r4, [r0, #8]
   1b118:	b144      	cbz	r4, 1b12c <z_impl_k_sem_take+0x28>
		sem->count--;
   1b11a:	3c01      	subs	r4, #1
   1b11c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1b11e:	f381 8811 	msr	BASEPRI, r1
   1b122:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1b126:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1b128:	b002      	add	sp, #8
   1b12a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b12c:	ea52 0403 	orrs.w	r4, r2, r3
   1b130:	d106      	bne.n	1b140 <z_impl_k_sem_take+0x3c>
   1b132:	f381 8811 	msr	BASEPRI, r1
   1b136:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1b13a:	f06f 000f 	mvn.w	r0, #15
   1b13e:	e7f3      	b.n	1b128 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1b140:	e9cd 2300 	strd	r2, r3, [sp]
   1b144:	4602      	mov	r2, r0
   1b146:	4802      	ldr	r0, [pc, #8]	; (1b150 <z_impl_k_sem_take+0x4c>)
   1b148:	f000 fb5e 	bl	1b808 <z_pend_curr>
	return ret;
   1b14c:	e7ec      	b.n	1b128 <z_impl_k_sem_take+0x24>
   1b14e:	bf00      	nop
   1b150:	2000404c 	.word	0x2000404c

0001b154 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1b154:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1b156:	4b09      	ldr	r3, [pc, #36]	; (1b17c <k_sys_work_q_init+0x28>)
   1b158:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1b15a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1b15c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1b15e:	9300      	str	r3, [sp, #0]
   1b160:	4907      	ldr	r1, [pc, #28]	; (1b180 <k_sys_work_q_init+0x2c>)
   1b162:	4808      	ldr	r0, [pc, #32]	; (1b184 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1b164:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1b168:	f04f 33ff 	mov.w	r3, #4294967295
   1b16c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1b170:	f000 f914 	bl	1b39c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1b174:	4620      	mov	r0, r4
   1b176:	b004      	add	sp, #16
   1b178:	bd10      	pop	{r4, pc}
   1b17a:	bf00      	nop
   1b17c:	0002539f 	.word	0x0002539f
   1b180:	20006420 	.word	0x20006420
   1b184:	20001f58 	.word	0x20001f58

0001b188 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1b188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   1b18c:	4e47      	ldr	r6, [pc, #284]	; (1b2ac <work_queue_main+0x124>)
   1b18e:	b085      	sub	sp, #20
   1b190:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1b192:	f04f 38ff 	mov.w	r8, #4294967295
   1b196:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
   1b19a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b19e:	f3ef 8711 	mrs	r7, BASEPRI
   1b1a2:	f383 8812 	msr	BASEPRI_MAX, r3
   1b1a6:	f3bf 8f6f 	isb	sy
   1b1aa:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   1b1ae:	b98d      	cbnz	r5, 1b1d4 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   1b1b0:	2102      	movs	r1, #2
   1b1b2:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1b1b6:	f008 f89f 	bl	232f8 <flag_test_and_clear>
   1b1ba:	2800      	cmp	r0, #0
   1b1bc:	d135      	bne.n	1b22a <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1b1be:	2300      	movs	r3, #0
   1b1c0:	e9cd 8900 	strd	r8, r9, [sp]
   1b1c4:	9302      	str	r3, [sp, #8]
   1b1c6:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1b1ca:	4639      	mov	r1, r7
   1b1cc:	4838      	ldr	r0, [pc, #224]	; (1b2b0 <work_queue_main+0x128>)
   1b1ce:	f000 fccb 	bl	1bb68 <z_sched_wait>
			continue;
   1b1d2:	e7e2      	b.n	1b19a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b1d4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   1b1d8:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1b1da:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b1de:	4295      	cmp	r5, r2
   1b1e0:	d101      	bne.n	1b1e6 <work_queue_main+0x5e>
	list->tail = node;
   1b1e2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1b1e6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1b1ea:	f043 0302 	orr.w	r3, r3, #2
   1b1ee:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1b1f2:	68eb      	ldr	r3, [r5, #12]
   1b1f4:	f023 0304 	bic.w	r3, r3, #4
   1b1f8:	f043 0301 	orr.w	r3, r3, #1
   1b1fc:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1b1fe:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1b200:	f387 8811 	msr	BASEPRI, r7
   1b204:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1b208:	4628      	mov	r0, r5
   1b20a:	4798      	blx	r3
	__asm__ volatile(
   1b20c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b210:	f3ef 8b11 	mrs	fp, BASEPRI
   1b214:	f383 8812 	msr	BASEPRI_MAX, r3
   1b218:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1b21c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b21e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1b220:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b224:	d40b      	bmi.n	1b23e <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   1b226:	60ea      	str	r2, [r5, #12]
   1b228:	e00e      	b.n	1b248 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1b22a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1b22e:	2200      	movs	r2, #0
   1b230:	2101      	movs	r1, #1
   1b232:	4628      	mov	r0, r5
   1b234:	f008 fa4d 	bl	236d2 <z_sched_wake>
   1b238:	2800      	cmp	r0, #0
   1b23a:	d1f8      	bne.n	1b22e <work_queue_main+0xa6>
   1b23c:	e7bf      	b.n	1b1be <work_queue_main+0x36>
	return list->head;
   1b23e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1b240:	f023 0303 	bic.w	r3, r3, #3
   1b244:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1b246:	b970      	cbnz	r0, 1b266 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   1b248:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1b24c:	f023 0302 	bic.w	r3, r3, #2
   1b250:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1b254:	f38b 8811 	msr	BASEPRI, fp
   1b258:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1b25c:	05d8      	lsls	r0, r3, #23
   1b25e:	d49c      	bmi.n	1b19a <work_queue_main+0x12>
	z_impl_k_yield();
   1b260:	f000 fb88 	bl	1b974 <z_impl_k_yield>
}
   1b264:	e799      	b.n	1b19a <work_queue_main+0x12>
	return node->next;
   1b266:	2700      	movs	r7, #0
   1b268:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   1b26c:	463b      	mov	r3, r7
		if (wc->work == work) {
   1b26e:	6842      	ldr	r2, [r0, #4]
   1b270:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1b272:	4601      	mov	r1, r0
		if (wc->work == work) {
   1b274:	d10c      	bne.n	1b290 <work_queue_main+0x108>
	return node->next;
   1b276:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b278:	b997      	cbnz	r7, 1b2a0 <work_queue_main+0x118>
   1b27a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1b27c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b27e:	4282      	cmp	r2, r0
   1b280:	d100      	bne.n	1b284 <work_queue_main+0xfc>
	list->tail = node;
   1b282:	6071      	str	r1, [r6, #4]
	parent->next = child;
   1b284:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1b288:	f7ff ff16 	bl	1b0b8 <z_impl_k_sem_give>
}
   1b28c:	4639      	mov	r1, r7
   1b28e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1b290:	f1ba 0f00 	cmp.w	sl, #0
   1b294:	d0d8      	beq.n	1b248 <work_queue_main+0xc0>
	return node->next;
   1b296:	4650      	mov	r0, sl
   1b298:	460f      	mov	r7, r1
   1b29a:	f8da a000 	ldr.w	sl, [sl]
   1b29e:	e7e6      	b.n	1b26e <work_queue_main+0xe6>
	return list->tail;
   1b2a0:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   1b2a2:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b2a4:	4290      	cmp	r0, r2
	list->tail = node;
   1b2a6:	bf08      	it	eq
   1b2a8:	6077      	streq	r7, [r6, #4]
}
   1b2aa:	e7eb      	b.n	1b284 <work_queue_main+0xfc>
   1b2ac:	20002ac4 	.word	0x20002ac4
   1b2b0:	2000404c 	.word	0x2000404c

0001b2b4 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1b2b4:	68c3      	ldr	r3, [r0, #12]
{
   1b2b6:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1b2b8:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1b2bc:	079b      	lsls	r3, r3, #30
{
   1b2be:	4605      	mov	r5, r0
   1b2c0:	460c      	mov	r4, r1
	if (ret) {
   1b2c2:	d50d      	bpl.n	1b2e0 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b2c4:	2201      	movs	r2, #1
   1b2c6:	2100      	movs	r1, #0
   1b2c8:	f104 0008 	add.w	r0, r4, #8
   1b2cc:	f008 f804 	bl	232d8 <z_impl_k_sem_init>
	parent->next = child;
   1b2d0:	2300      	movs	r3, #0
   1b2d2:	6023      	str	r3, [r4, #0]
	return list->tail;
   1b2d4:	4b05      	ldr	r3, [pc, #20]	; (1b2ec <cancel_sync_locked+0x38>)
	canceler->work = work;
   1b2d6:	6065      	str	r5, [r4, #4]
   1b2d8:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1b2da:	b91a      	cbnz	r2, 1b2e4 <cancel_sync_locked+0x30>
	list->head = node;
   1b2dc:	e9c3 4400 	strd	r4, r4, [r3]
}
   1b2e0:	4630      	mov	r0, r6
   1b2e2:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1b2e4:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1b2e6:	605c      	str	r4, [r3, #4]
}
   1b2e8:	e7fa      	b.n	1b2e0 <cancel_sync_locked+0x2c>
   1b2ea:	bf00      	nop
   1b2ec:	20002ac4 	.word	0x20002ac4

0001b2f0 <submit_to_queue_locked>:
{
   1b2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1b2f2:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b2f4:	079a      	lsls	r2, r3, #30
{
   1b2f6:	4604      	mov	r4, r0
   1b2f8:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b2fa:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1b2fe:	d41f      	bmi.n	1b340 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1b300:	075f      	lsls	r7, r3, #29
   1b302:	d41f      	bmi.n	1b344 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   1b304:	680a      	ldr	r2, [r1, #0]
   1b306:	b90a      	cbnz	r2, 1b30c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1b308:	6882      	ldr	r2, [r0, #8]
   1b30a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1b30c:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   1b30e:	bf44      	itt	mi
   1b310:	68a3      	ldrmi	r3, [r4, #8]
   1b312:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   1b314:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   1b316:	bf4c      	ite	mi
   1b318:	2502      	movmi	r5, #2
		ret = 1;
   1b31a:	2501      	movpl	r5, #1
	if (queue == NULL) {
   1b31c:	b37f      	cbz	r7, 1b37e <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1b31e:	4b1b      	ldr	r3, [pc, #108]	; (1b38c <submit_to_queue_locked+0x9c>)
   1b320:	689b      	ldr	r3, [r3, #8]
   1b322:	42bb      	cmp	r3, r7
   1b324:	d111      	bne.n	1b34a <submit_to_queue_locked+0x5a>
   1b326:	f007 fee9 	bl	230fc <k_is_in_isr>
   1b32a:	f080 0001 	eor.w	r0, r0, #1
   1b32e:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   1b330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1b334:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1b336:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1b33a:	d523      	bpl.n	1b384 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   1b33c:	b13a      	cbz	r2, 1b34e <submit_to_queue_locked+0x5e>
   1b33e:	b940      	cbnz	r0, 1b352 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   1b340:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   1b344:	2300      	movs	r3, #0
   1b346:	6033      	str	r3, [r6, #0]
	return ret;
   1b348:	e013      	b.n	1b372 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1b34a:	2000      	movs	r0, #0
   1b34c:	e7f0      	b.n	1b330 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   1b34e:	071b      	lsls	r3, r3, #28
   1b350:	d4f6      	bmi.n	1b340 <submit_to_queue_locked+0x50>
	parent->next = child;
   1b352:	2300      	movs	r3, #0
   1b354:	6023      	str	r3, [r4, #0]
	return list->tail;
   1b356:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   1b35a:	b963      	cbnz	r3, 1b376 <submit_to_queue_locked+0x86>
	list->head = node;
   1b35c:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1b360:	4638      	mov	r0, r7
   1b362:	f007 ffe2 	bl	2332a <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1b366:	68e3      	ldr	r3, [r4, #12]
   1b368:	f043 0304 	orr.w	r3, r3, #4
   1b36c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1b36e:	6833      	ldr	r3, [r6, #0]
   1b370:	60a3      	str	r3, [r4, #8]
}
   1b372:	4628      	mov	r0, r5
   1b374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1b376:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b378:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   1b37c:	e7f0      	b.n	1b360 <submit_to_queue_locked+0x70>
		return -EINVAL;
   1b37e:	f06f 0515 	mvn.w	r5, #21
   1b382:	e7df      	b.n	1b344 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   1b384:	f06f 0512 	mvn.w	r5, #18
   1b388:	e7dc      	b.n	1b344 <submit_to_queue_locked+0x54>
   1b38a:	bf00      	nop
   1b38c:	20002a9c 	.word	0x20002a9c

0001b390 <k_work_submit>:
{
   1b390:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1b392:	4801      	ldr	r0, [pc, #4]	; (1b398 <k_work_submit+0x8>)
   1b394:	f008 b839 	b.w	2340a <k_work_submit_to_queue>
   1b398:	20001f58 	.word	0x20001f58

0001b39c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1b39c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b39e:	b089      	sub	sp, #36	; 0x24
   1b3a0:	4604      	mov	r4, r0
	list->head = NULL;
   1b3a2:	2000      	movs	r0, #0
	list->tail = NULL;
   1b3a4:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   1b3a8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1b3aa:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1b3ae:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1b3b2:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1b3b6:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1b3ba:	b31d      	cbz	r5, 1b404 <k_work_queue_start+0x68>
   1b3bc:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1b3be:	2800      	cmp	r0, #0
   1b3c0:	f240 1001 	movw	r0, #257	; 0x101
   1b3c4:	bf08      	it	eq
   1b3c6:	2001      	moveq	r0, #1
	*flagp = flags;
   1b3c8:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1b3cc:	2000      	movs	r0, #0
   1b3ce:	f04f 36ff 	mov.w	r6, #4294967295
   1b3d2:	f04f 37ff 	mov.w	r7, #4294967295
   1b3d6:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1b3da:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1b3de:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1b3e2:	4b09      	ldr	r3, [pc, #36]	; (1b408 <k_work_queue_start+0x6c>)
   1b3e4:	9400      	str	r4, [sp, #0]
   1b3e6:	4620      	mov	r0, r4
   1b3e8:	f7ff fcd4 	bl	1ad94 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1b3ec:	b125      	cbz	r5, 1b3f8 <k_work_queue_start+0x5c>
   1b3ee:	6829      	ldr	r1, [r5, #0]
   1b3f0:	b111      	cbz	r1, 1b3f8 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1b3f2:	4620      	mov	r0, r4
   1b3f4:	f007 fe88 	bl	23108 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1b3f8:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1b3fa:	b009      	add	sp, #36	; 0x24
   1b3fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1b400:	f007 be85 	b.w	2310e <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1b404:	2001      	movs	r0, #1
   1b406:	e7df      	b.n	1b3c8 <k_work_queue_start+0x2c>
   1b408:	0001b189 	.word	0x0001b189

0001b40c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1b40c:	b513      	push	{r0, r1, r4, lr}
   1b40e:	9001      	str	r0, [sp, #4]
   1b410:	4608      	mov	r0, r1
	__asm__ volatile(
   1b412:	f04f 0140 	mov.w	r1, #64	; 0x40
   1b416:	f3ef 8411 	mrs	r4, BASEPRI
   1b41a:	f381 8812 	msr	BASEPRI_MAX, r1
   1b41e:	f3bf 8f6f 	isb	sy
	return *flagp;
   1b422:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1b424:	f011 0f0e 	tst.w	r1, #14
   1b428:	d116      	bne.n	1b458 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b42a:	ea53 0c02 	orrs.w	ip, r3, r2
   1b42e:	d108      	bne.n	1b442 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   1b430:	a901      	add	r1, sp, #4
   1b432:	f7ff ff5d 	bl	1b2f0 <submit_to_queue_locked>
	__asm__ volatile(
   1b436:	f384 8811 	msr	BASEPRI, r4
   1b43a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1b43e:	b002      	add	sp, #8
   1b440:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   1b442:	f041 0108 	orr.w	r1, r1, #8
   1b446:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1b448:	9901      	ldr	r1, [sp, #4]
   1b44a:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b44c:	3010      	adds	r0, #16
   1b44e:	4903      	ldr	r1, [pc, #12]	; (1b45c <k_work_schedule_for_queue+0x50>)
   1b450:	f000 fc00 	bl	1bc54 <z_add_timeout>
	return ret;
   1b454:	2001      	movs	r0, #1
   1b456:	e7ee      	b.n	1b436 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   1b458:	2000      	movs	r0, #0
   1b45a:	e7ec      	b.n	1b436 <k_work_schedule_for_queue+0x2a>
   1b45c:	0002339b 	.word	0x0002339b

0001b460 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1b460:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1b462:	4801      	ldr	r0, [pc, #4]	; (1b468 <k_work_schedule+0x8>)
   1b464:	f7ff bfd2 	b.w	1b40c <k_work_schedule_for_queue>
   1b468:	20001f58 	.word	0x20001f58

0001b46c <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1b46c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b46e:	460c      	mov	r4, r1
   1b470:	9001      	str	r0, [sp, #4]
   1b472:	4616      	mov	r6, r2
   1b474:	461d      	mov	r5, r3
	__asm__ volatile(
   1b476:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b47a:	f3ef 8711 	mrs	r7, BASEPRI
   1b47e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b482:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1b486:	4608      	mov	r0, r1
   1b488:	f007 ff41 	bl	2330e <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b48c:	ea55 0306 	orrs.w	r3, r5, r6
   1b490:	d109      	bne.n	1b4a6 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1b492:	a901      	add	r1, sp, #4
   1b494:	4620      	mov	r0, r4
   1b496:	f7ff ff2b 	bl	1b2f0 <submit_to_queue_locked>
	__asm__ volatile(
   1b49a:	f387 8811 	msr	BASEPRI, r7
   1b49e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1b4a2:	b003      	add	sp, #12
   1b4a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1b4a6:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b4a8:	4906      	ldr	r1, [pc, #24]	; (1b4c4 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1b4aa:	f043 0308 	orr.w	r3, r3, #8
   1b4ae:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1b4b0:	9b01      	ldr	r3, [sp, #4]
   1b4b2:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b4b4:	f104 0010 	add.w	r0, r4, #16
   1b4b8:	4632      	mov	r2, r6
   1b4ba:	462b      	mov	r3, r5
   1b4bc:	f000 fbca 	bl	1bc54 <z_add_timeout>
	return ret;
   1b4c0:	2001      	movs	r0, #1
   1b4c2:	e7ea      	b.n	1b49a <k_work_reschedule_for_queue+0x2e>
   1b4c4:	0002339b 	.word	0x0002339b

0001b4c8 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1b4c8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1b4ca:	4801      	ldr	r0, [pc, #4]	; (1b4d0 <k_work_reschedule+0x8>)
   1b4cc:	f7ff bfce 	b.w	1b46c <k_work_reschedule_for_queue>
   1b4d0:	20001f58 	.word	0x20001f58

0001b4d4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   1b4d4:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   1b4d6:	4d07      	ldr	r5, [pc, #28]	; (1b4f4 <z_reset_time_slice+0x20>)
   1b4d8:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   1b4da:	b154      	cbz	r4, 1b4f2 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   1b4dc:	f7fd fbf0 	bl	18cc0 <sys_clock_elapsed>
   1b4e0:	4b05      	ldr	r3, [pc, #20]	; (1b4f8 <z_reset_time_slice+0x24>)
   1b4e2:	4404      	add	r4, r0
   1b4e4:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   1b4e6:	6828      	ldr	r0, [r5, #0]
   1b4e8:	2100      	movs	r1, #0
	}
}
   1b4ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   1b4ee:	f008 b933 	b.w	23758 <z_set_timeout_expiry>
}
   1b4f2:	bd38      	pop	{r3, r4, r5, pc}
   1b4f4:	20002ad4 	.word	0x20002ad4
   1b4f8:	20002a9c 	.word	0x20002a9c

0001b4fc <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1b4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b4fe:	4604      	mov	r4, r0
   1b500:	460d      	mov	r5, r1
	__asm__ volatile(
   1b502:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b506:	f3ef 8711 	mrs	r7, BASEPRI
   1b50a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b50e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1b512:	4e10      	ldr	r6, [pc, #64]	; (1b554 <k_sched_time_slice_set+0x58>)
   1b514:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1b516:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   1b51a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b51e:	6131      	str	r1, [r6, #16]
   1b520:	2300      	movs	r3, #0
   1b522:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b526:	fbe4 010c 	umlal	r0, r1, r4, ip
   1b52a:	f7e5 fd83 	bl	1034 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1b52e:	2c00      	cmp	r4, #0
   1b530:	4b09      	ldr	r3, [pc, #36]	; (1b558 <k_sched_time_slice_set+0x5c>)
   1b532:	dc0a      	bgt.n	1b54a <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   1b534:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1b536:	4b09      	ldr	r3, [pc, #36]	; (1b55c <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   1b538:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   1b53a:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   1b53c:	f7ff ffca 	bl	1b4d4 <z_reset_time_slice>
	__asm__ volatile(
   1b540:	f387 8811 	msr	BASEPRI, r7
   1b544:	f3bf 8f6f 	isb	sy
	}
}
   1b548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   1b54a:	2802      	cmp	r0, #2
   1b54c:	bfb8      	it	lt
   1b54e:	2002      	movlt	r0, #2
   1b550:	e7f0      	b.n	1b534 <k_sched_time_slice_set+0x38>
   1b552:	bf00      	nop
   1b554:	20002a9c 	.word	0x20002a9c
   1b558:	20002ad4 	.word	0x20002ad4
   1b55c:	20002ad0 	.word	0x20002ad0

0001b560 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1b560:	b949      	cbnz	r1, 1b576 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1b562:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1b566:	b930      	cbnz	r0, 1b576 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1b568:	4b05      	ldr	r3, [pc, #20]	; (1b580 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1b56a:	69da      	ldr	r2, [r3, #28]
   1b56c:	689b      	ldr	r3, [r3, #8]
   1b56e:	429a      	cmp	r2, r3
   1b570:	d001      	beq.n	1b576 <z_reschedule+0x16>
	ret = arch_swap(key);
   1b572:	f7f8 b803 	b.w	1357c <arch_swap>
   1b576:	f381 8811 	msr	BASEPRI, r1
   1b57a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1b57e:	4770      	bx	lr
   1b580:	20002a9c 	.word	0x20002a9c

0001b584 <k_sched_lock>:
	__asm__ volatile(
   1b584:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b588:	f3ef 8111 	mrs	r1, BASEPRI
   1b58c:	f383 8812 	msr	BASEPRI_MAX, r3
   1b590:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1b594:	4b04      	ldr	r3, [pc, #16]	; (1b5a8 <k_sched_lock+0x24>)
   1b596:	689a      	ldr	r2, [r3, #8]
   1b598:	7bd3      	ldrb	r3, [r2, #15]
   1b59a:	3b01      	subs	r3, #1
   1b59c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1b59e:	f381 8811 	msr	BASEPRI, r1
   1b5a2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1b5a6:	4770      	bx	lr
   1b5a8:	20002a9c 	.word	0x20002a9c

0001b5ac <update_cache>:
{
   1b5ac:	b538      	push	{r3, r4, r5, lr}
   1b5ae:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   1b5b0:	480c      	ldr	r0, [pc, #48]	; (1b5e4 <update_cache+0x38>)
   1b5b2:	4d0d      	ldr	r5, [pc, #52]	; (1b5e8 <update_cache+0x3c>)
   1b5b4:	f007 ffee 	bl	23594 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1b5b8:	4604      	mov	r4, r0
   1b5ba:	b900      	cbnz	r0, 1b5be <update_cache+0x12>
   1b5bc:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1b5be:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1b5c0:	b94a      	cbnz	r2, 1b5d6 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   1b5c2:	7b5a      	ldrb	r2, [r3, #13]
   1b5c4:	06d2      	lsls	r2, r2, #27
   1b5c6:	d106      	bne.n	1b5d6 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1b5c8:	69a2      	ldr	r2, [r4, #24]
   1b5ca:	b922      	cbnz	r2, 1b5d6 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   1b5cc:	89da      	ldrh	r2, [r3, #14]
   1b5ce:	2a7f      	cmp	r2, #127	; 0x7f
   1b5d0:	d901      	bls.n	1b5d6 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   1b5d2:	61eb      	str	r3, [r5, #28]
}
   1b5d4:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1b5d6:	429c      	cmp	r4, r3
   1b5d8:	d002      	beq.n	1b5e0 <update_cache+0x34>
			z_reset_time_slice(thread);
   1b5da:	4620      	mov	r0, r4
   1b5dc:	f7ff ff7a 	bl	1b4d4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1b5e0:	61ec      	str	r4, [r5, #28]
}
   1b5e2:	e7f7      	b.n	1b5d4 <update_cache+0x28>
   1b5e4:	20002abc 	.word	0x20002abc
   1b5e8:	20002a9c 	.word	0x20002a9c

0001b5ec <move_thread_to_end_of_prio_q>:
{
   1b5ec:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1b5ee:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1b5f2:	7b43      	ldrb	r3, [r0, #13]
   1b5f4:	2a00      	cmp	r2, #0
{
   1b5f6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1b5f8:	da04      	bge.n	1b604 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b5fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b5fe:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1b600:	f007 ff73 	bl	234ea <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1b604:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1b606:	4a15      	ldr	r2, [pc, #84]	; (1b65c <move_thread_to_end_of_prio_q+0x70>)
   1b608:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b60c:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1b60e:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b612:	f102 0520 	add.w	r5, r2, #32
   1b616:	42ab      	cmp	r3, r5
   1b618:	d01b      	beq.n	1b652 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b61a:	b1d3      	cbz	r3, 1b652 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   1b61c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1b620:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   1b624:	4286      	cmp	r6, r0
   1b626:	d00f      	beq.n	1b648 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   1b628:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b62a:	2800      	cmp	r0, #0
   1b62c:	dd0c      	ble.n	1b648 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1b62e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1b630:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1b634:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1b636:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1b638:	6890      	ldr	r0, [r2, #8]
   1b63a:	1a43      	subs	r3, r0, r1
   1b63c:	4258      	negs	r0, r3
}
   1b63e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1b642:	4158      	adcs	r0, r3
   1b644:	f7ff bfb2 	b.w	1b5ac <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1b648:	42a3      	cmp	r3, r4
   1b64a:	d002      	beq.n	1b652 <move_thread_to_end_of_prio_q+0x66>
   1b64c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b64e:	2b00      	cmp	r3, #0
   1b650:	d1e6      	bne.n	1b620 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   1b652:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   1b656:	6021      	str	r1, [r4, #0]
	list->tail = node;
   1b658:	6251      	str	r1, [r2, #36]	; 0x24
}
   1b65a:	e7ed      	b.n	1b638 <move_thread_to_end_of_prio_q+0x4c>
   1b65c:	20002a9c 	.word	0x20002a9c

0001b660 <z_time_slice>:
{
   1b660:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1b662:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b666:	f3ef 8511 	mrs	r5, BASEPRI
   1b66a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b66e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1b672:	4b17      	ldr	r3, [pc, #92]	; (1b6d0 <z_time_slice+0x70>)
   1b674:	4a17      	ldr	r2, [pc, #92]	; (1b6d4 <z_time_slice+0x74>)
   1b676:	689c      	ldr	r4, [r3, #8]
   1b678:	6811      	ldr	r1, [r2, #0]
   1b67a:	428c      	cmp	r4, r1
   1b67c:	d107      	bne.n	1b68e <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   1b67e:	4620      	mov	r0, r4
   1b680:	f7ff ff28 	bl	1b4d4 <z_reset_time_slice>
	__asm__ volatile(
   1b684:	f385 8811 	msr	BASEPRI, r5
   1b688:	f3bf 8f6f 	isb	sy
}
   1b68c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1b68e:	2100      	movs	r1, #0
   1b690:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   1b692:	4a11      	ldr	r2, [pc, #68]	; (1b6d8 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   1b694:	6812      	ldr	r2, [r2, #0]
   1b696:	b1c2      	cbz	r2, 1b6ca <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1b698:	89e2      	ldrh	r2, [r4, #14]
   1b69a:	2a7f      	cmp	r2, #127	; 0x7f
   1b69c:	d815      	bhi.n	1b6ca <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1b69e:	7b62      	ldrb	r2, [r4, #13]
   1b6a0:	06d2      	lsls	r2, r2, #27
   1b6a2:	d112      	bne.n	1b6ca <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1b6a4:	4a0d      	ldr	r2, [pc, #52]	; (1b6dc <z_time_slice+0x7c>)
   1b6a6:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1b6aa:	6812      	ldr	r2, [r2, #0]
   1b6ac:	4291      	cmp	r1, r2
   1b6ae:	db0c      	blt.n	1b6ca <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
   1b6b0:	4a0b      	ldr	r2, [pc, #44]	; (1b6e0 <z_time_slice+0x80>)
   1b6b2:	4294      	cmp	r4, r2
   1b6b4:	d009      	beq.n	1b6ca <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1b6b6:	691a      	ldr	r2, [r3, #16]
   1b6b8:	4282      	cmp	r2, r0
   1b6ba:	dc03      	bgt.n	1b6c4 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   1b6bc:	4620      	mov	r0, r4
   1b6be:	f7ff ff95 	bl	1b5ec <move_thread_to_end_of_prio_q>
   1b6c2:	e7dc      	b.n	1b67e <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   1b6c4:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   1b6c6:	611a      	str	r2, [r3, #16]
   1b6c8:	e7dc      	b.n	1b684 <z_time_slice+0x24>
   1b6ca:	2200      	movs	r2, #0
   1b6cc:	e7fb      	b.n	1b6c6 <z_time_slice+0x66>
   1b6ce:	bf00      	nop
   1b6d0:	20002a9c 	.word	0x20002a9c
   1b6d4:	20002acc 	.word	0x20002acc
   1b6d8:	20002ad4 	.word	0x20002ad4
   1b6dc:	20002ad0 	.word	0x20002ad0
   1b6e0:	20001e58 	.word	0x20001e58

0001b6e4 <ready_thread>:
{
   1b6e4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1b6e6:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1b6ea:	7b43      	ldrb	r3, [r0, #13]
   1b6ec:	2a00      	cmp	r2, #0
   1b6ee:	db2a      	blt.n	1b746 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b6f0:	06da      	lsls	r2, r3, #27
   1b6f2:	d128      	bne.n	1b746 <ready_thread+0x62>
   1b6f4:	6982      	ldr	r2, [r0, #24]
   1b6f6:	bb32      	cbnz	r2, 1b746 <ready_thread+0x62>
	return list->head == list;
   1b6f8:	4a14      	ldr	r2, [pc, #80]	; (1b74c <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1b6fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b6fe:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   1b700:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b704:	f102 0520 	add.w	r5, r2, #32
   1b708:	42ab      	cmp	r3, r5
   1b70a:	d017      	beq.n	1b73c <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b70c:	b1b3      	cbz	r3, 1b73c <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   1b70e:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1b712:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1b716:	428e      	cmp	r6, r1
   1b718:	d00b      	beq.n	1b732 <ready_thread+0x4e>
		return b2 - b1;
   1b71a:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b71c:	2900      	cmp	r1, #0
   1b71e:	dd08      	ble.n	1b732 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   1b720:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b722:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1b726:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1b728:	6058      	str	r0, [r3, #4]
}
   1b72a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1b72c:	2000      	movs	r0, #0
   1b72e:	f7ff bf3d 	b.w	1b5ac <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1b732:	42a3      	cmp	r3, r4
   1b734:	d002      	beq.n	1b73c <ready_thread+0x58>
   1b736:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b738:	2b00      	cmp	r3, #0
   1b73a:	d1ea      	bne.n	1b712 <ready_thread+0x2e>
	node->prev = tail;
   1b73c:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   1b740:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1b742:	6250      	str	r0, [r2, #36]	; 0x24
}
   1b744:	e7f1      	b.n	1b72a <ready_thread+0x46>
}
   1b746:	bc70      	pop	{r4, r5, r6}
   1b748:	4770      	bx	lr
   1b74a:	bf00      	nop
   1b74c:	20002a9c 	.word	0x20002a9c

0001b750 <z_sched_start>:
{
   1b750:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b752:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b756:	f3ef 8411 	mrs	r4, BASEPRI
   1b75a:	f382 8812 	msr	BASEPRI_MAX, r2
   1b75e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1b762:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1b764:	0751      	lsls	r1, r2, #29
   1b766:	d404      	bmi.n	1b772 <z_sched_start+0x22>
	__asm__ volatile(
   1b768:	f384 8811 	msr	BASEPRI, r4
   1b76c:	f3bf 8f6f 	isb	sy
}
   1b770:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b772:	f022 0204 	bic.w	r2, r2, #4
   1b776:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1b778:	f7ff ffb4 	bl	1b6e4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1b77c:	4621      	mov	r1, r4
   1b77e:	4802      	ldr	r0, [pc, #8]	; (1b788 <z_sched_start+0x38>)
}
   1b780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1b784:	f7ff beec 	b.w	1b560 <z_reschedule>
   1b788:	2000404c 	.word	0x2000404c

0001b78c <unready_thread>:
{
   1b78c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1b78e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1b792:	7b43      	ldrb	r3, [r0, #13]
   1b794:	2a00      	cmp	r2, #0
{
   1b796:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1b798:	da04      	bge.n	1b7a4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b79a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b79e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b7a0:	f007 fea3 	bl	234ea <sys_dlist_remove>
	update_cache(thread == _current);
   1b7a4:	4b04      	ldr	r3, [pc, #16]	; (1b7b8 <unready_thread+0x2c>)
   1b7a6:	6898      	ldr	r0, [r3, #8]
   1b7a8:	1a43      	subs	r3, r0, r1
   1b7aa:	4258      	negs	r0, r3
   1b7ac:	4158      	adcs	r0, r3
}
   1b7ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1b7b2:	f7ff befb 	b.w	1b5ac <update_cache>
   1b7b6:	bf00      	nop
   1b7b8:	20002a9c 	.word	0x20002a9c

0001b7bc <pend>:
{
   1b7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b7c0:	4606      	mov	r6, r0
   1b7c2:	4615      	mov	r5, r2
   1b7c4:	461c      	mov	r4, r3
	__asm__ volatile(
   1b7c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b7ca:	f3ef 8711 	mrs	r7, BASEPRI
   1b7ce:	f383 8812 	msr	BASEPRI_MAX, r3
   1b7d2:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1b7d6:	f007 ff15 	bl	23604 <add_to_waitq_locked>
	__asm__ volatile(
   1b7da:	f387 8811 	msr	BASEPRI, r7
   1b7de:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b7e2:	f1b4 3fff 	cmp.w	r4, #4294967295
   1b7e6:	bf08      	it	eq
   1b7e8:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1b7ec:	d008      	beq.n	1b800 <pend+0x44>
   1b7ee:	462a      	mov	r2, r5
   1b7f0:	4623      	mov	r3, r4
   1b7f2:	f106 0018 	add.w	r0, r6, #24
   1b7f6:	4903      	ldr	r1, [pc, #12]	; (1b804 <pend+0x48>)
}
   1b7f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b7fc:	f000 ba2a 	b.w	1bc54 <z_add_timeout>
   1b800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b804:	000235c1 	.word	0x000235c1

0001b808 <z_pend_curr>:
{
   1b808:	b510      	push	{r4, lr}
	pending_current = _current;
   1b80a:	4b07      	ldr	r3, [pc, #28]	; (1b828 <z_pend_curr+0x20>)
   1b80c:	6898      	ldr	r0, [r3, #8]
   1b80e:	4b07      	ldr	r3, [pc, #28]	; (1b82c <z_pend_curr+0x24>)
{
   1b810:	460c      	mov	r4, r1
	pending_current = _current;
   1b812:	6018      	str	r0, [r3, #0]
{
   1b814:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1b816:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1b81a:	f7ff ffcf 	bl	1b7bc <pend>
   1b81e:	4620      	mov	r0, r4
}
   1b820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b824:	f7f7 beaa 	b.w	1357c <arch_swap>
   1b828:	20002a9c 	.word	0x20002a9c
   1b82c:	20002acc 	.word	0x20002acc

0001b830 <z_set_prio>:
{
   1b830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b832:	4604      	mov	r4, r0
	__asm__ volatile(
   1b834:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b838:	f3ef 8611 	mrs	r6, BASEPRI
   1b83c:	f383 8812 	msr	BASEPRI_MAX, r3
   1b840:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   1b844:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b846:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   1b848:	b249      	sxtb	r1, r1
   1b84a:	d133      	bne.n	1b8b4 <z_set_prio+0x84>
		if (need_sched) {
   1b84c:	6982      	ldr	r2, [r0, #24]
   1b84e:	bb8a      	cbnz	r2, 1b8b4 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b854:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b856:	f007 fe48 	bl	234ea <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1b85a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   1b85c:	4a17      	ldr	r2, [pc, #92]	; (1b8bc <z_set_prio+0x8c>)
				thread->base.prio = prio;
   1b85e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1b860:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b864:	7343      	strb	r3, [r0, #13]
   1b866:	4610      	mov	r0, r2
   1b868:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b86c:	4283      	cmp	r3, r0
   1b86e:	d01b      	beq.n	1b8a8 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b870:	b1d3      	cbz	r3, 1b8a8 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   1b872:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   1b874:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1b878:	42a9      	cmp	r1, r5
   1b87a:	d010      	beq.n	1b89e <z_set_prio+0x6e>
		return b2 - b1;
   1b87c:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b87e:	2d00      	cmp	r5, #0
   1b880:	dd0d      	ble.n	1b89e <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   1b882:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b884:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1b888:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b88a:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1b88c:	2001      	movs	r0, #1
   1b88e:	f7ff fe8d 	bl	1b5ac <update_cache>
   1b892:	2001      	movs	r0, #1
	__asm__ volatile(
   1b894:	f386 8811 	msr	BASEPRI, r6
   1b898:	f3bf 8f6f 	isb	sy
}
   1b89c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b89e:	42bb      	cmp	r3, r7
   1b8a0:	d002      	beq.n	1b8a8 <z_set_prio+0x78>
   1b8a2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b8a4:	2b00      	cmp	r3, #0
   1b8a6:	d1e5      	bne.n	1b874 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   1b8a8:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   1b8aa:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   1b8ae:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b8b0:	6254      	str	r4, [r2, #36]	; 0x24
}
   1b8b2:	e7eb      	b.n	1b88c <z_set_prio+0x5c>
			thread->base.prio = prio;
   1b8b4:	73a1      	strb	r1, [r4, #14]
   1b8b6:	2000      	movs	r0, #0
   1b8b8:	e7ec      	b.n	1b894 <z_set_prio+0x64>
   1b8ba:	bf00      	nop
   1b8bc:	20002a9c 	.word	0x20002a9c

0001b8c0 <z_impl_k_thread_suspend>:
{
   1b8c0:	b570      	push	{r4, r5, r6, lr}
   1b8c2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1b8c4:	3018      	adds	r0, #24
   1b8c6:	f007 ff21 	bl	2370c <z_abort_timeout>
	__asm__ volatile(
   1b8ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b8ce:	f3ef 8611 	mrs	r6, BASEPRI
   1b8d2:	f383 8812 	msr	BASEPRI_MAX, r3
   1b8d6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1b8da:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   1b8de:	7b63      	ldrb	r3, [r4, #13]
   1b8e0:	2a00      	cmp	r2, #0
   1b8e2:	da05      	bge.n	1b8f0 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b8e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b8e8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b8ea:	4620      	mov	r0, r4
   1b8ec:	f007 fdfd 	bl	234ea <sys_dlist_remove>
		update_cache(thread == _current);
   1b8f0:	4d0b      	ldr	r5, [pc, #44]	; (1b920 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b8f2:	7b63      	ldrb	r3, [r4, #13]
   1b8f4:	68a8      	ldr	r0, [r5, #8]
   1b8f6:	f043 0310 	orr.w	r3, r3, #16
   1b8fa:	7363      	strb	r3, [r4, #13]
   1b8fc:	1b03      	subs	r3, r0, r4
   1b8fe:	4258      	negs	r0, r3
   1b900:	4158      	adcs	r0, r3
   1b902:	f7ff fe53 	bl	1b5ac <update_cache>
	__asm__ volatile(
   1b906:	f386 8811 	msr	BASEPRI, r6
   1b90a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1b90e:	68ab      	ldr	r3, [r5, #8]
   1b910:	42a3      	cmp	r3, r4
   1b912:	d103      	bne.n	1b91c <z_impl_k_thread_suspend+0x5c>
}
   1b914:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1b918:	f007 be32 	b.w	23580 <z_reschedule_unlocked>
}
   1b91c:	bd70      	pop	{r4, r5, r6, pc}
   1b91e:	bf00      	nop
   1b920:	20002a9c 	.word	0x20002a9c

0001b924 <k_sched_unlock>:
{
   1b924:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b926:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b92a:	f3ef 8411 	mrs	r4, BASEPRI
   1b92e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b932:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1b936:	4b08      	ldr	r3, [pc, #32]	; (1b958 <k_sched_unlock+0x34>)
   1b938:	689a      	ldr	r2, [r3, #8]
   1b93a:	7bd3      	ldrb	r3, [r2, #15]
   1b93c:	3301      	adds	r3, #1
   1b93e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1b940:	2000      	movs	r0, #0
   1b942:	f7ff fe33 	bl	1b5ac <update_cache>
	__asm__ volatile(
   1b946:	f384 8811 	msr	BASEPRI, r4
   1b94a:	f3bf 8f6f 	isb	sy
}
   1b94e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1b952:	f007 be15 	b.w	23580 <z_reschedule_unlocked>
   1b956:	bf00      	nop
   1b958:	20002a9c 	.word	0x20002a9c

0001b95c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1b95c:	4b04      	ldr	r3, [pc, #16]	; (1b970 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1b95e:	2100      	movs	r1, #0
   1b960:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1b964:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1b968:	4608      	mov	r0, r1
   1b96a:	f7ff bdc7 	b.w	1b4fc <k_sched_time_slice_set>
   1b96e:	bf00      	nop
   1b970:	20002a9c 	.word	0x20002a9c

0001b974 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1b974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1b976:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b97a:	f3ef 8511 	mrs	r5, BASEPRI
   1b97e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b982:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1b986:	491a      	ldr	r1, [pc, #104]	; (1b9f0 <z_impl_k_yield+0x7c>)
   1b988:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b98a:	7b43      	ldrb	r3, [r0, #13]
   1b98c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b990:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b992:	f007 fdaa 	bl	234ea <sys_dlist_remove>
	}
	queue_thread(_current);
   1b996:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1b998:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   1b99a:	4608      	mov	r0, r1
   1b99c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1b9a0:	735a      	strb	r2, [r3, #13]
   1b9a2:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b9a6:	4282      	cmp	r2, r0
   1b9a8:	d01c      	beq.n	1b9e4 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b9aa:	b1da      	cbz	r2, 1b9e4 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   1b9ac:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   1b9ae:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1b9b2:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   1b9b6:	42a6      	cmp	r6, r4
   1b9b8:	d00f      	beq.n	1b9da <z_impl_k_yield+0x66>
		return b2 - b1;
   1b9ba:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b9bc:	2c00      	cmp	r4, #0
   1b9be:	dd0c      	ble.n	1b9da <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   1b9c0:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1b9c2:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   1b9c6:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1b9c8:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1b9ca:	2001      	movs	r0, #1
   1b9cc:	f7ff fdee 	bl	1b5ac <update_cache>
   1b9d0:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   1b9d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1b9d6:	f7f7 bdd1 	b.w	1357c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1b9da:	42ba      	cmp	r2, r7
   1b9dc:	d002      	beq.n	1b9e4 <z_impl_k_yield+0x70>
   1b9de:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b9e0:	2a00      	cmp	r2, #0
   1b9e2:	d1e6      	bne.n	1b9b2 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   1b9e4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   1b9e6:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   1b9ea:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1b9ec:	624b      	str	r3, [r1, #36]	; 0x24
}
   1b9ee:	e7ec      	b.n	1b9ca <z_impl_k_yield+0x56>
   1b9f0:	20002a9c 	.word	0x20002a9c

0001b9f4 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1b9f4:	ea50 0301 	orrs.w	r3, r0, r1
{
   1b9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b9fc:	4605      	mov	r5, r0
   1b9fe:	460e      	mov	r6, r1
	if (ticks == 0) {
   1ba00:	d103      	bne.n	1ba0a <z_tick_sleep+0x16>
	z_impl_k_yield();
   1ba02:	f7ff ffb7 	bl	1b974 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   1ba06:	2000      	movs	r0, #0
   1ba08:	e033      	b.n	1ba72 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   1ba0a:	f06f 0401 	mvn.w	r4, #1
   1ba0e:	1a24      	subs	r4, r4, r0
   1ba10:	f04f 33ff 	mov.w	r3, #4294967295
   1ba14:	eb63 0301 	sbc.w	r3, r3, r1
   1ba18:	2c01      	cmp	r4, #1
   1ba1a:	f173 0300 	sbcs.w	r3, r3, #0
   1ba1e:	da02      	bge.n	1ba26 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1ba20:	f007 feb4 	bl	2378c <sys_clock_tick_get_32>
   1ba24:	1944      	adds	r4, r0, r5
   1ba26:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ba2a:	f3ef 8811 	mrs	r8, BASEPRI
   1ba2e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ba32:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1ba36:	4f10      	ldr	r7, [pc, #64]	; (1ba78 <z_tick_sleep+0x84>)
   1ba38:	4b10      	ldr	r3, [pc, #64]	; (1ba7c <z_tick_sleep+0x88>)
   1ba3a:	68b8      	ldr	r0, [r7, #8]
   1ba3c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1ba3e:	f7ff fea5 	bl	1b78c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1ba42:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1ba44:	490e      	ldr	r1, [pc, #56]	; (1ba80 <z_tick_sleep+0x8c>)
   1ba46:	462a      	mov	r2, r5
   1ba48:	4633      	mov	r3, r6
   1ba4a:	3018      	adds	r0, #24
   1ba4c:	f000 f902 	bl	1bc54 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1ba50:	68ba      	ldr	r2, [r7, #8]
   1ba52:	7b53      	ldrb	r3, [r2, #13]
   1ba54:	f043 0310 	orr.w	r3, r3, #16
   1ba58:	7353      	strb	r3, [r2, #13]
   1ba5a:	4640      	mov	r0, r8
   1ba5c:	f7f7 fd8e 	bl	1357c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1ba60:	f007 fe94 	bl	2378c <sys_clock_tick_get_32>
   1ba64:	1a20      	subs	r0, r4, r0
   1ba66:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1ba6a:	2801      	cmp	r0, #1
   1ba6c:	f173 0300 	sbcs.w	r3, r3, #0
   1ba70:	dbc9      	blt.n	1ba06 <z_tick_sleep+0x12>
}
   1ba72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ba76:	bf00      	nop
   1ba78:	20002a9c 	.word	0x20002a9c
   1ba7c:	20002acc 	.word	0x20002acc
   1ba80:	000235c1 	.word	0x000235c1

0001ba84 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ba84:	f1b1 3fff 	cmp.w	r1, #4294967295
   1ba88:	bf08      	it	eq
   1ba8a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1ba8e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ba90:	d106      	bne.n	1baa0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1ba92:	4b08      	ldr	r3, [pc, #32]	; (1bab4 <z_impl_k_sleep+0x30>)
   1ba94:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1ba96:	f7ff ff13 	bl	1b8c0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1ba9a:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1ba9e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1baa0:	f7ff ffa8 	bl	1b9f4 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   1baa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1baa8:	fb80 0303 	smull	r0, r3, r0, r3
   1baac:	0bc0      	lsrs	r0, r0, #15
   1baae:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1bab2:	e7f4      	b.n	1ba9e <z_impl_k_sleep+0x1a>
   1bab4:	20002a9c 	.word	0x20002a9c

0001bab8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1bab8:	4b01      	ldr	r3, [pc, #4]	; (1bac0 <z_impl_z_current_get+0x8>)
   1baba:	6898      	ldr	r0, [r3, #8]
   1babc:	4770      	bx	lr
   1babe:	bf00      	nop
   1bac0:	20002a9c 	.word	0x20002a9c

0001bac4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1bac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bac8:	4604      	mov	r4, r0
   1baca:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bace:	f3ef 8611 	mrs	r6, BASEPRI
   1bad2:	f383 8812 	msr	BASEPRI_MAX, r3
   1bad6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1bada:	7b43      	ldrb	r3, [r0, #13]
   1badc:	071a      	lsls	r2, r3, #28
   1bade:	d505      	bpl.n	1baec <z_thread_abort+0x28>
	__asm__ volatile(
   1bae0:	f386 8811 	msr	BASEPRI, r6
   1bae4:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1bae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1baec:	f023 0220 	bic.w	r2, r3, #32
   1baf0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1baf4:	09d2      	lsrs	r2, r2, #7
   1baf6:	d120      	bne.n	1bb3a <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1baf8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1bafa:	68a3      	ldr	r3, [r4, #8]
   1bafc:	b113      	cbz	r3, 1bb04 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   1bafe:	4620      	mov	r0, r4
   1bb00:	f007 fcfb 	bl	234fa <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1bb04:	f104 0018 	add.w	r0, r4, #24
   1bb08:	f007 fe00 	bl	2370c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1bb0c:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1bb10:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1bb14:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bb16:	42bd      	cmp	r5, r7
   1bb18:	d000      	beq.n	1bb1c <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1bb1a:	b9b5      	cbnz	r5, 1bb4a <z_thread_abort+0x86>
		update_cache(1);
   1bb1c:	2001      	movs	r0, #1
   1bb1e:	f7ff fd45 	bl	1b5ac <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1bb22:	4b10      	ldr	r3, [pc, #64]	; (1bb64 <z_thread_abort+0xa0>)
   1bb24:	689b      	ldr	r3, [r3, #8]
   1bb26:	42a3      	cmp	r3, r4
   1bb28:	d1da      	bne.n	1bae0 <z_thread_abort+0x1c>
   1bb2a:	f3ef 8305 	mrs	r3, IPSR
   1bb2e:	2b00      	cmp	r3, #0
   1bb30:	d1d6      	bne.n	1bae0 <z_thread_abort+0x1c>
   1bb32:	4630      	mov	r0, r6
   1bb34:	f7f7 fd22 	bl	1357c <arch_swap>
	return ret;
   1bb38:	e7d2      	b.n	1bae0 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bb3a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1bb3e:	f043 0308 	orr.w	r3, r3, #8
   1bb42:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1bb44:	f007 fcd1 	bl	234ea <sys_dlist_remove>
}
   1bb48:	e7d7      	b.n	1bafa <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   1bb4a:	4628      	mov	r0, r5
   1bb4c:	f007 fcd5 	bl	234fa <unpend_thread_no_timeout>
   1bb50:	f105 0018 	add.w	r0, r5, #24
   1bb54:	f007 fdda 	bl	2370c <z_abort_timeout>
   1bb58:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1bb5c:	4628      	mov	r0, r5
   1bb5e:	f7ff fdc1 	bl	1b6e4 <ready_thread>
   1bb62:	e7d7      	b.n	1bb14 <z_thread_abort+0x50>
   1bb64:	20002a9c 	.word	0x20002a9c

0001bb68 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1bb68:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1bb6a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1bb6e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1bb70:	e9cd 6700 	strd	r6, r7, [sp]
   1bb74:	f7ff fe48 	bl	1b808 <z_pend_curr>

	if (data != NULL) {
   1bb78:	b11c      	cbz	r4, 1bb82 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1bb7a:	4b03      	ldr	r3, [pc, #12]	; (1bb88 <z_sched_wait+0x20>)
   1bb7c:	689b      	ldr	r3, [r3, #8]
   1bb7e:	695b      	ldr	r3, [r3, #20]
   1bb80:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1bb82:	b002      	add	sp, #8
   1bb84:	bdd0      	pop	{r4, r6, r7, pc}
   1bb86:	bf00      	nop
   1bb88:	20002a9c 	.word	0x20002a9c

0001bb8c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   1bb8c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   1bb8e:	4806      	ldr	r0, [pc, #24]	; (1bba8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   1bb90:	4a06      	ldr	r2, [pc, #24]	; (1bbac <z_data_copy+0x20>)
   1bb92:	4907      	ldr	r1, [pc, #28]	; (1bbb0 <z_data_copy+0x24>)
   1bb94:	1a12      	subs	r2, r2, r0
   1bb96:	f007 fa05 	bl	22fa4 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1bb9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1bb9e:	4a05      	ldr	r2, [pc, #20]	; (1bbb4 <z_data_copy+0x28>)
   1bba0:	4905      	ldr	r1, [pc, #20]	; (1bbb8 <z_data_copy+0x2c>)
   1bba2:	4806      	ldr	r0, [pc, #24]	; (1bbbc <z_data_copy+0x30>)
   1bba4:	f007 b9fe 	b.w	22fa4 <z_early_memcpy>
   1bba8:	20000000 	.word	0x20000000
   1bbac:	20000cd0 	.word	0x20000cd0
   1bbb0:	000253dc 	.word	0x000253dc
   1bbb4:	00000000 	.word	0x00000000
   1bbb8:	000253dc 	.word	0x000253dc
   1bbbc:	20000000 	.word	0x20000000

0001bbc0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1bbc0:	4b03      	ldr	r3, [pc, #12]	; (1bbd0 <elapsed+0x10>)
   1bbc2:	681b      	ldr	r3, [r3, #0]
   1bbc4:	b90b      	cbnz	r3, 1bbca <elapsed+0xa>
   1bbc6:	f7fd b87b 	b.w	18cc0 <sys_clock_elapsed>
}
   1bbca:	2000      	movs	r0, #0
   1bbcc:	4770      	bx	lr
   1bbce:	bf00      	nop
   1bbd0:	20002ad8 	.word	0x20002ad8

0001bbd4 <next_timeout>:
	return list->head == list;
   1bbd4:	4b10      	ldr	r3, [pc, #64]	; (1bc18 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   1bbd6:	b510      	push	{r4, lr}
   1bbd8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bbda:	429c      	cmp	r4, r3
   1bbdc:	bf08      	it	eq
   1bbde:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1bbe0:	f7ff ffee 	bl	1bbc0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   1bbe4:	b1a4      	cbz	r4, 1bc10 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1bbe6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   1bbea:	1a1b      	subs	r3, r3, r0
   1bbec:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   1bbf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1bbf4:	f170 0200 	sbcs.w	r2, r0, #0
   1bbf8:	da0a      	bge.n	1bc10 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   1bbfa:	2800      	cmp	r0, #0
   1bbfc:	bfac      	ite	ge
   1bbfe:	4618      	movge	r0, r3
   1bc00:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1bc02:	4b06      	ldr	r3, [pc, #24]	; (1bc1c <next_timeout+0x48>)
   1bc04:	691b      	ldr	r3, [r3, #16]
   1bc06:	b113      	cbz	r3, 1bc0e <next_timeout+0x3a>
   1bc08:	4298      	cmp	r0, r3
   1bc0a:	bfa8      	it	ge
   1bc0c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1bc0e:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   1bc10:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1bc14:	e7f5      	b.n	1bc02 <next_timeout+0x2e>
   1bc16:	bf00      	nop
   1bc18:	200008ac 	.word	0x200008ac
   1bc1c:	20002a9c 	.word	0x20002a9c

0001bc20 <remove_timeout>:
{
   1bc20:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   1bc22:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bc24:	b168      	cbz	r0, 1bc42 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1bc26:	4a0a      	ldr	r2, [pc, #40]	; (1bc50 <remove_timeout+0x30>)
   1bc28:	6852      	ldr	r2, [r2, #4]
   1bc2a:	4290      	cmp	r0, r2
   1bc2c:	d009      	beq.n	1bc42 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1bc2e:	b143      	cbz	r3, 1bc42 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1bc30:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1bc34:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1bc38:	1912      	adds	r2, r2, r4
   1bc3a:	eb41 0105 	adc.w	r1, r1, r5
   1bc3e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1bc42:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1bc44:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1bc46:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1bc48:	2300      	movs	r3, #0
	node->prev = NULL;
   1bc4a:	e9c0 3300 	strd	r3, r3, [r0]
}
   1bc4e:	bd30      	pop	{r4, r5, pc}
   1bc50:	200008ac 	.word	0x200008ac

0001bc54 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bc54:	f1b3 3fff 	cmp.w	r3, #4294967295
   1bc58:	bf08      	it	eq
   1bc5a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1bc5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bc60:	4604      	mov	r4, r0
   1bc62:	461f      	mov	r7, r3
   1bc64:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bc66:	d067      	beq.n	1bd38 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1bc68:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1bc6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bc6e:	f3ef 8611 	mrs	r6, BASEPRI
   1bc72:	f383 8812 	msr	BASEPRI_MAX, r3
   1bc76:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1bc7a:	f06f 0201 	mvn.w	r2, #1
   1bc7e:	1b53      	subs	r3, r2, r5
   1bc80:	f04f 3cff 	mov.w	ip, #4294967295
   1bc84:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1bc88:	2b00      	cmp	r3, #0
   1bc8a:	db1b      	blt.n	1bcc4 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1bc8c:	4b2b      	ldr	r3, [pc, #172]	; (1bd3c <z_add_timeout+0xe8>)
   1bc8e:	e9d3 1300 	ldrd	r1, r3, [r3]
   1bc92:	1a52      	subs	r2, r2, r1
   1bc94:	eb6c 0303 	sbc.w	r3, ip, r3
   1bc98:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   1bc9a:	eb63 0307 	sbc.w	r3, r3, r7
   1bc9e:	2d01      	cmp	r5, #1
   1bca0:	f173 0200 	sbcs.w	r2, r3, #0
   1bca4:	bfbc      	itt	lt
   1bca6:	2501      	movlt	r5, #1
   1bca8:	2300      	movlt	r3, #0
   1bcaa:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   1bcae:	4824      	ldr	r0, [pc, #144]	; (1bd40 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   1bcb0:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bcb4:	4283      	cmp	r3, r0
   1bcb6:	d118      	bne.n	1bcea <z_add_timeout+0x96>
	node->prev = tail;
   1bcb8:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   1bcbc:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   1bcc0:	6044      	str	r4, [r0, #4]
}
   1bcc2:	e026      	b.n	1bd12 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1bcc4:	f7ff ff7c 	bl	1bbc0 <elapsed>
   1bcc8:	3501      	adds	r5, #1
   1bcca:	f147 0700 	adc.w	r7, r7, #0
   1bcce:	182d      	adds	r5, r5, r0
   1bcd0:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   1bcd4:	e9c4 5704 	strd	r5, r7, [r4, #16]
   1bcd8:	e7e9      	b.n	1bcae <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   1bcda:	1a52      	subs	r2, r2, r1
   1bcdc:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   1bce0:	459c      	cmp	ip, r3
   1bce2:	e9c4 2504 	strd	r2, r5, [r4, #16]
   1bce6:	d0e7      	beq.n	1bcb8 <z_add_timeout+0x64>
   1bce8:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1bcea:	2b00      	cmp	r3, #0
   1bcec:	d0e4      	beq.n	1bcb8 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   1bcee:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   1bcf2:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   1bcf6:	428a      	cmp	r2, r1
   1bcf8:	eb75 0e07 	sbcs.w	lr, r5, r7
   1bcfc:	daed      	bge.n	1bcda <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   1bcfe:	1a8a      	subs	r2, r1, r2
   1bd00:	eb67 0505 	sbc.w	r5, r7, r5
   1bd04:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1bd08:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1bd0a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1bd0e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1bd10:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1bd12:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bd14:	4283      	cmp	r3, r0
   1bd16:	d00b      	beq.n	1bd30 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1bd18:	429c      	cmp	r4, r3
   1bd1a:	d109      	bne.n	1bd30 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1bd1c:	f7ff ff5a 	bl	1bbd4 <next_timeout>

			if (next_time == 0 ||
   1bd20:	b118      	cbz	r0, 1bd2a <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   1bd22:	4b08      	ldr	r3, [pc, #32]	; (1bd44 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   1bd24:	691b      	ldr	r3, [r3, #16]
   1bd26:	4283      	cmp	r3, r0
   1bd28:	d002      	beq.n	1bd30 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   1bd2a:	2100      	movs	r1, #0
   1bd2c:	f7fc ff96 	bl	18c5c <sys_clock_set_timeout>
	__asm__ volatile(
   1bd30:	f386 8811 	msr	BASEPRI, r6
   1bd34:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1bd38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bd3a:	bf00      	nop
   1bd3c:	20001ff8 	.word	0x20001ff8
   1bd40:	200008ac 	.word	0x200008ac
   1bd44:	20002a9c 	.word	0x20002a9c

0001bd48 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1bd48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bd4c:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1bd4e:	f7ff fc87 	bl	1b660 <z_time_slice>
	__asm__ volatile(
   1bd52:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bd56:	f3ef 8411 	mrs	r4, BASEPRI
   1bd5a:	f383 8812 	msr	BASEPRI_MAX, r3
   1bd5e:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   1bd62:	4e24      	ldr	r6, [pc, #144]	; (1bdf4 <sys_clock_announce+0xac>)
	return list->head == list;
   1bd64:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1bdf8 <sys_clock_announce+0xb0>
   1bd68:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1bd6a:	4d24      	ldr	r5, [pc, #144]	; (1bdfc <sys_clock_announce+0xb4>)
   1bd6c:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1bd70:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bd72:	4540      	cmp	r0, r8
		curr_tick += dt;
   1bd74:	e9d5 1e00 	ldrd	r1, lr, [r5]
   1bd78:	ea4f 77e2 	mov.w	r7, r2, asr #31
   1bd7c:	d00b      	beq.n	1bd96 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1bd7e:	b150      	cbz	r0, 1bd96 <sys_clock_announce+0x4e>
   1bd80:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   1bd84:	429a      	cmp	r2, r3
   1bd86:	eb77 090c 	sbcs.w	r9, r7, ip
   1bd8a:	da16      	bge.n	1bdba <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1bd8c:	1a9b      	subs	r3, r3, r2
   1bd8e:	eb6c 0c07 	sbc.w	ip, ip, r7
   1bd92:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   1bd96:	1852      	adds	r2, r2, r1
   1bd98:	eb4e 0707 	adc.w	r7, lr, r7
   1bd9c:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   1bda0:	2500      	movs	r5, #0
   1bda2:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1bda4:	f7ff ff16 	bl	1bbd4 <next_timeout>
   1bda8:	4629      	mov	r1, r5
   1bdaa:	f7fc ff57 	bl	18c5c <sys_clock_set_timeout>
	__asm__ volatile(
   1bdae:	f384 8811 	msr	BASEPRI, r4
   1bdb2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1bdb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1bdba:	1859      	adds	r1, r3, r1
   1bdbc:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   1bdc0:	1ad3      	subs	r3, r2, r3
   1bdc2:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1bdc4:	2200      	movs	r2, #0
   1bdc6:	2300      	movs	r3, #0
   1bdc8:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   1bdcc:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   1bdd0:	f7ff ff26 	bl	1bc20 <remove_timeout>
   1bdd4:	f384 8811 	msr	BASEPRI, r4
   1bdd8:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1bddc:	6883      	ldr	r3, [r0, #8]
   1bdde:	4798      	blx	r3
	__asm__ volatile(
   1bde0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bde4:	f3ef 8411 	mrs	r4, BASEPRI
   1bde8:	f383 8812 	msr	BASEPRI_MAX, r3
   1bdec:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1bdf0:	e7bc      	b.n	1bd6c <sys_clock_announce+0x24>
   1bdf2:	bf00      	nop
   1bdf4:	20002ad8 	.word	0x20002ad8
   1bdf8:	200008ac 	.word	0x200008ac
   1bdfc:	20001ff8 	.word	0x20001ff8

0001be00 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1be00:	b510      	push	{r4, lr}
   1be02:	f04f 0340 	mov.w	r3, #64	; 0x40
   1be06:	f3ef 8411 	mrs	r4, BASEPRI
   1be0a:	f383 8812 	msr	BASEPRI_MAX, r3
   1be0e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1be12:	f7fc ff55 	bl	18cc0 <sys_clock_elapsed>
   1be16:	4a05      	ldr	r2, [pc, #20]	; (1be2c <sys_clock_tick_get+0x2c>)
   1be18:	e9d2 3100 	ldrd	r3, r1, [r2]
   1be1c:	18c0      	adds	r0, r0, r3
   1be1e:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   1be22:	f384 8811 	msr	BASEPRI, r4
   1be26:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1be2a:	bd10      	pop	{r4, pc}
   1be2c:	20001ff8 	.word	0x20001ff8

0001be30 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1be30:	b570      	push	{r4, r5, r6, lr}
   1be32:	4604      	mov	r4, r0
	__asm__ volatile(
   1be34:	f04f 0340 	mov.w	r3, #64	; 0x40
   1be38:	f3ef 8511 	mrs	r5, BASEPRI
   1be3c:	f383 8812 	msr	BASEPRI_MAX, r3
   1be40:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1be44:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   1be48:	3301      	adds	r3, #1
   1be4a:	f142 0200 	adc.w	r2, r2, #0
   1be4e:	2b02      	cmp	r3, #2
   1be50:	f172 0300 	sbcs.w	r3, r2, #0
   1be54:	d304      	bcc.n	1be60 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1be56:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1be5a:	4917      	ldr	r1, [pc, #92]	; (1beb8 <z_timer_expiration_handler+0x88>)
   1be5c:	f7ff fefa 	bl	1bc54 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1be60:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1be62:	3301      	adds	r3, #1
   1be64:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1be66:	6a23      	ldr	r3, [r4, #32]
   1be68:	b173      	cbz	r3, 1be88 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
   1be6a:	f385 8811 	msr	BASEPRI, r5
   1be6e:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   1be72:	6a23      	ldr	r3, [r4, #32]
   1be74:	4620      	mov	r0, r4
   1be76:	4798      	blx	r3
	__asm__ volatile(
   1be78:	f04f 0340 	mov.w	r3, #64	; 0x40
   1be7c:	f3ef 8511 	mrs	r5, BASEPRI
   1be80:	f383 8812 	msr	BASEPRI_MAX, r3
   1be84:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1be88:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1be8c:	42a6      	cmp	r6, r4
   1be8e:	d000      	beq.n	1be92 <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1be90:	b926      	cbnz	r6, 1be9c <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
   1be92:	f385 8811 	msr	BASEPRI, r5
   1be96:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   1be9a:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   1be9c:	4630      	mov	r0, r6
   1be9e:	f007 fb3f 	bl	23520 <z_unpend_thread_no_timeout>
   1bea2:	2300      	movs	r3, #0
   1bea4:	67f3      	str	r3, [r6, #124]	; 0x7c
   1bea6:	f385 8811 	msr	BASEPRI, r5
   1beaa:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   1beae:	4630      	mov	r0, r6
}
   1beb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   1beb4:	f007 bb74 	b.w	235a0 <z_ready_thread>
   1beb8:	0001be31 	.word	0x0001be31

0001bebc <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1bebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bec0:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1bec2:	f1b3 3fff 	cmp.w	r3, #4294967295
   1bec6:	bf08      	it	eq
   1bec8:	f1b1 3fff 	cmpeq.w	r1, #4294967295
{
   1becc:	4606      	mov	r6, r0
   1bece:	461c      	mov	r4, r3
   1bed0:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
   1bed4:	4689      	mov	r9, r1
   1bed6:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1bed8:	d03e      	beq.n	1bf58 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1beda:	f1b0 3fff 	cmp.w	r0, #4294967295
   1bede:	bf08      	it	eq
   1bee0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1bee4:	4615      	mov	r5, r2
   1bee6:	4607      	mov	r7, r0
   1bee8:	d014      	beq.n	1bf14 <z_impl_k_timer_start+0x58>
   1beea:	ea50 0302 	orrs.w	r3, r0, r2
   1beee:	d011      	beq.n	1bf14 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   1bef0:	f06f 0301 	mvn.w	r3, #1
   1bef4:	1a9b      	subs	r3, r3, r2
   1bef6:	f04f 33ff 	mov.w	r3, #4294967295
   1befa:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1befe:	2b00      	cmp	r3, #0
   1bf00:	da08      	bge.n	1bf14 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   1bf02:	2a02      	cmp	r2, #2
   1bf04:	f170 0300 	sbcs.w	r3, r0, #0
   1bf08:	bfbc      	itt	lt
   1bf0a:	2502      	movlt	r5, #2
   1bf0c:	2700      	movlt	r7, #0
   1bf0e:	3d01      	subs	r5, #1
   1bf10:	f147 37ff 	adc.w	r7, r7, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1bf14:	f06f 0301 	mvn.w	r3, #1
   1bf18:	1a5b      	subs	r3, r3, r1
   1bf1a:	f04f 33ff 	mov.w	r3, #4294967295
   1bf1e:	eb63 0304 	sbc.w	r3, r3, r4
   1bf22:	2b00      	cmp	r3, #0
   1bf24:	da09      	bge.n	1bf3a <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1bf26:	2901      	cmp	r1, #1
   1bf28:	f174 0300 	sbcs.w	r3, r4, #0
   1bf2c:	bfbc      	itt	lt
   1bf2e:	2101      	movlt	r1, #1
   1bf30:	2400      	movlt	r4, #0
   1bf32:	f111 39ff 	adds.w	r9, r1, #4294967295
   1bf36:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   1bf3a:	4630      	mov	r0, r6
   1bf3c:	f007 fbe6 	bl	2370c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1bf40:	2300      	movs	r3, #0
   1bf42:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
   1bf44:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bf48:	464a      	mov	r2, r9
   1bf4a:	4643      	mov	r3, r8
   1bf4c:	4630      	mov	r0, r6
   1bf4e:	4903      	ldr	r1, [pc, #12]	; (1bf5c <z_impl_k_timer_start+0xa0>)
		     duration);
}
   1bf50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bf54:	f7ff be7e 	b.w	1bc54 <z_add_timeout>
}
   1bf58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bf5c:	0001be31 	.word	0x0001be31

0001bf60 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1bf60:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1bf64:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1bf66:	4b29      	ldr	r3, [pc, #164]	; (1c00c <z_impl_k_poll+0xac>)
   1bf68:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   1bf6a:	2301      	movs	r3, #1
   1bf6c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   1bf70:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1bf74:	ea52 0305 	orrs.w	r3, r2, r5
{
   1bf78:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1bf7a:	bf0c      	ite	eq
   1bf7c:	2301      	moveq	r3, #1
   1bf7e:	2300      	movne	r3, #0
   1bf80:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   1bf84:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1bf86:	f007 fc8e 	bl	238a6 <register_events>
   1bf8a:	4681      	mov	r9, r0
	__asm__ volatile(
   1bf8c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bf90:	f3ef 8a11 	mrs	sl, BASEPRI
   1bf94:	f383 8812 	msr	BASEPRI_MAX, r3
   1bf98:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1bf9c:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   1bfa0:	b964      	cbnz	r4, 1bfbc <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1bfa2:	4601      	mov	r1, r0
   1bfa4:	4652      	mov	r2, sl
   1bfa6:	4640      	mov	r0, r8
   1bfa8:	f007 fd4e 	bl	23a48 <clear_event_registrations>
	__asm__ volatile(
   1bfac:	f38a 8811 	msr	BASEPRI, sl
   1bfb0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1bfb4:	4620      	mov	r0, r4
   1bfb6:	b002      	add	sp, #8
   1bfb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1bfbc:	2300      	movs	r3, #0
   1bfbe:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1bfc2:	ea56 0305 	orrs.w	r3, r6, r5
   1bfc6:	d106      	bne.n	1bfd6 <z_impl_k_poll+0x76>
   1bfc8:	f38a 8811 	msr	BASEPRI, sl
   1bfcc:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1bfd0:	f06f 040a 	mvn.w	r4, #10
   1bfd4:	e7ee      	b.n	1bfb4 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1bfd6:	e9cd 6500 	strd	r6, r5, [sp]
   1bfda:	4a0d      	ldr	r2, [pc, #52]	; (1c010 <z_impl_k_poll+0xb0>)
   1bfdc:	480d      	ldr	r0, [pc, #52]	; (1c014 <z_impl_k_poll+0xb4>)
   1bfde:	4651      	mov	r1, sl
   1bfe0:	f7ff fc12 	bl	1b808 <z_pend_curr>
   1bfe4:	4604      	mov	r4, r0
	__asm__ volatile(
   1bfe6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bfea:	f3ef 8511 	mrs	r5, BASEPRI
   1bfee:	f383 8812 	msr	BASEPRI_MAX, r3
   1bff2:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1bff6:	462a      	mov	r2, r5
   1bff8:	4649      	mov	r1, r9
   1bffa:	4640      	mov	r0, r8
   1bffc:	f007 fd24 	bl	23a48 <clear_event_registrations>
	__asm__ volatile(
   1c000:	f385 8811 	msr	BASEPRI, r5
   1c004:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1c008:	e7d4      	b.n	1bfb4 <z_impl_k_poll+0x54>
   1c00a:	bf00      	nop
   1c00c:	20002a9c 	.word	0x20002a9c
   1c010:	200008b4 	.word	0x200008b4
   1c014:	2000404c 	.word	0x2000404c

0001c018 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1c018:	b538      	push	{r3, r4, r5, lr}
   1c01a:	4603      	mov	r3, r0
	__asm__ volatile(
   1c01c:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c020:	f3ef 8511 	mrs	r5, BASEPRI
   1c024:	f382 8812 	msr	BASEPRI_MAX, r2
   1c028:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1c02c:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1c02e:	2101      	movs	r1, #1
   1c030:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1c032:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1c034:	4283      	cmp	r3, r0
   1c036:	d106      	bne.n	1c046 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1c038:	f385 8811 	msr	BASEPRI, r5
   1c03c:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1c040:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1c042:	4620      	mov	r0, r4
   1c044:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1c046:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1c04a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1c04c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c04e:	2300      	movs	r3, #0
	node->prev = NULL;
   1c050:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c054:	f007 fc9e 	bl	23994 <signal_poll_event>
	z_reschedule(&lock, key);
   1c058:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c05a:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1c05c:	4801      	ldr	r0, [pc, #4]	; (1c064 <z_impl_k_poll_signal_raise+0x4c>)
   1c05e:	f7ff fa7f 	bl	1b560 <z_reschedule>
	return rc;
   1c062:	e7ee      	b.n	1c042 <z_impl_k_poll_signal_raise+0x2a>
   1c064:	2000404c 	.word	0x2000404c

0001c068 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1c068:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c06a:	4606      	mov	r6, r0
   1c06c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1c06e:	f007 f845 	bl	230fc <k_is_in_isr>
   1c072:	b978      	cbnz	r0, 1c094 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1c074:	4b0b      	ldr	r3, [pc, #44]	; (1c0a4 <z_thread_aligned_alloc+0x3c>)
   1c076:	689b      	ldr	r3, [r3, #8]
   1c078:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1c07a:	b17c      	cbz	r4, 1c09c <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1c07c:	1d2a      	adds	r2, r5, #4
   1c07e:	d209      	bcs.n	1c094 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1c080:	2000      	movs	r0, #0
   1c082:	2100      	movs	r1, #0
   1c084:	e9cd 0100 	strd	r0, r1, [sp]
   1c088:	f046 0104 	orr.w	r1, r6, #4
   1c08c:	4620      	mov	r0, r4
   1c08e:	f006 ff93 	bl	22fb8 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1c092:	b908      	cbnz	r0, 1c098 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1c094:	2400      	movs	r4, #0
	}

	return ret;
   1c096:	e001      	b.n	1c09c <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   1c098:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1c09a:	1d04      	adds	r4, r0, #4
}
   1c09c:	4620      	mov	r0, r4
   1c09e:	b002      	add	sp, #8
   1c0a0:	bd70      	pop	{r4, r5, r6, pc}
   1c0a2:	bf00      	nop
   1c0a4:	20002a9c 	.word	0x20002a9c

0001c0a8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1c0a8:	4a02      	ldr	r2, [pc, #8]	; (1c0b4 <boot_banner+0xc>)
   1c0aa:	4903      	ldr	r1, [pc, #12]	; (1c0b8 <boot_banner+0x10>)
   1c0ac:	4803      	ldr	r0, [pc, #12]	; (1c0bc <boot_banner+0x14>)
   1c0ae:	f003 bca0 	b.w	1f9f2 <printk>
   1c0b2:	bf00      	nop
   1c0b4:	00024c2b 	.word	0x00024c2b
   1c0b8:	000253a8 	.word	0x000253a8
   1c0bc:	000253b5 	.word	0x000253b5

0001c0c0 <ocrypto_ecdh_p256_public_key>:
   1c0c0:	b530      	push	{r4, r5, lr}
   1c0c2:	b099      	sub	sp, #100	; 0x64
   1c0c4:	4605      	mov	r5, r0
   1c0c6:	4668      	mov	r0, sp
   1c0c8:	f000 f828 	bl	1c11c <ocrypto_sc_p256_from32bytes>
   1c0cc:	4669      	mov	r1, sp
   1c0ce:	4604      	mov	r4, r0
   1c0d0:	a808      	add	r0, sp, #32
   1c0d2:	f000 fa53 	bl	1c57c <ocrypto_curve_p256_scalarmult_base>
   1c0d6:	a908      	add	r1, sp, #32
   1c0d8:	4304      	orrs	r4, r0
   1c0da:	4628      	mov	r0, r5
   1c0dc:	f000 f98a 	bl	1c3f4 <ocrypto_curve_p256_to64bytes>
   1c0e0:	4620      	mov	r0, r4
   1c0e2:	b019      	add	sp, #100	; 0x64
   1c0e4:	bd30      	pop	{r4, r5, pc}
   1c0e6:	bf00      	nop

0001c0e8 <ocrypto_ecdh_p256_common_secret>:
   1c0e8:	b570      	push	{r4, r5, r6, lr}
   1c0ea:	b098      	sub	sp, #96	; 0x60
   1c0ec:	4605      	mov	r5, r0
   1c0ee:	4668      	mov	r0, sp
   1c0f0:	4616      	mov	r6, r2
   1c0f2:	f000 f813 	bl	1c11c <ocrypto_sc_p256_from32bytes>
   1c0f6:	4631      	mov	r1, r6
   1c0f8:	4604      	mov	r4, r0
   1c0fa:	a808      	add	r0, sp, #32
   1c0fc:	f000 f946 	bl	1c38c <ocrypto_curve_p256_from64bytes>
   1c100:	a908      	add	r1, sp, #32
   1c102:	466a      	mov	r2, sp
   1c104:	4304      	orrs	r4, r0
   1c106:	4608      	mov	r0, r1
   1c108:	f000 f982 	bl	1c410 <ocrypto_curve_p256_scalarmult>
   1c10c:	a908      	add	r1, sp, #32
   1c10e:	4304      	orrs	r4, r0
   1c110:	4628      	mov	r0, r5
   1c112:	f000 f96d 	bl	1c3f0 <ocrypto_curve_p256_to32bytes>
   1c116:	4620      	mov	r0, r4
   1c118:	b018      	add	sp, #96	; 0x60
   1c11a:	bd70      	pop	{r4, r5, r6, pc}

0001c11c <ocrypto_sc_p256_from32bytes>:
   1c11c:	b570      	push	{r4, r5, r6, lr}
   1c11e:	680b      	ldr	r3, [r1, #0]
   1c120:	4e12      	ldr	r6, [pc, #72]	; (1c16c <ocrypto_sc_p256_from32bytes+0x50>)
   1c122:	ba1b      	rev	r3, r3
   1c124:	61c3      	str	r3, [r0, #28]
   1c126:	684b      	ldr	r3, [r1, #4]
   1c128:	ba1b      	rev	r3, r3
   1c12a:	6183      	str	r3, [r0, #24]
   1c12c:	688b      	ldr	r3, [r1, #8]
   1c12e:	ba1b      	rev	r3, r3
   1c130:	6143      	str	r3, [r0, #20]
   1c132:	68cb      	ldr	r3, [r1, #12]
   1c134:	ba1b      	rev	r3, r3
   1c136:	6103      	str	r3, [r0, #16]
   1c138:	690b      	ldr	r3, [r1, #16]
   1c13a:	ba1b      	rev	r3, r3
   1c13c:	60c3      	str	r3, [r0, #12]
   1c13e:	694b      	ldr	r3, [r1, #20]
   1c140:	ba1b      	rev	r3, r3
   1c142:	6083      	str	r3, [r0, #8]
   1c144:	698b      	ldr	r3, [r1, #24]
   1c146:	ba1b      	rev	r3, r3
   1c148:	6043      	str	r3, [r0, #4]
   1c14a:	69cb      	ldr	r3, [r1, #28]
   1c14c:	ba1b      	rev	r3, r3
   1c14e:	4632      	mov	r2, r6
   1c150:	6003      	str	r3, [r0, #0]
   1c152:	4601      	mov	r1, r0
   1c154:	4604      	mov	r4, r0
   1c156:	f7e4 ffe7 	bl	1128 <ocrypto_bigint_sub256>
   1c15a:	4631      	mov	r1, r6
   1c15c:	4605      	mov	r5, r0
   1c15e:	4602      	mov	r2, r0
   1c160:	4620      	mov	r0, r4
   1c162:	f7e5 f801 	bl	1168 <ocrypto_bigint_cadd256>
   1c166:	1e68      	subs	r0, r5, #1
   1c168:	bd70      	pop	{r4, r5, r6, pc}
   1c16a:	bf00      	nop
   1c16c:	0002493c 	.word	0x0002493c

0001c170 <p256_zdblu>:
   1c170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c174:	b088      	sub	sp, #32
   1c176:	460c      	mov	r4, r1
   1c178:	4606      	mov	r6, r0
   1c17a:	f102 0120 	add.w	r1, r2, #32
   1c17e:	4668      	mov	r0, sp
   1c180:	f106 0720 	add.w	r7, r6, #32
   1c184:	4690      	mov	r8, r2
   1c186:	f7e5 fad9 	bl	173c <ocrypto_mod_p256_sqr>
   1c18a:	466a      	mov	r2, sp
   1c18c:	4669      	mov	r1, sp
   1c18e:	4668      	mov	r0, sp
   1c190:	f7e5 f9e6 	bl	1560 <ocrypto_mod_p256_add>
   1c194:	4669      	mov	r1, sp
   1c196:	4638      	mov	r0, r7
   1c198:	f7e5 fad0 	bl	173c <ocrypto_mod_p256_sqr>
   1c19c:	463a      	mov	r2, r7
   1c19e:	4639      	mov	r1, r7
   1c1a0:	4638      	mov	r0, r7
   1c1a2:	f104 0520 	add.w	r5, r4, #32
   1c1a6:	f7e5 f9db 	bl	1560 <ocrypto_mod_p256_add>
   1c1aa:	466a      	mov	r2, sp
   1c1ac:	4669      	mov	r1, sp
   1c1ae:	4668      	mov	r0, sp
   1c1b0:	f7e5 f9d6 	bl	1560 <ocrypto_mod_p256_add>
   1c1b4:	4641      	mov	r1, r8
   1c1b6:	4628      	mov	r0, r5
   1c1b8:	f7e5 fac0 	bl	173c <ocrypto_mod_p256_sqr>
   1c1bc:	466a      	mov	r2, sp
   1c1be:	4641      	mov	r1, r8
   1c1c0:	4630      	mov	r0, r6
   1c1c2:	f7e5 faa3 	bl	170c <ocrypto_mod_p256_mul>
   1c1c6:	462a      	mov	r2, r5
   1c1c8:	4629      	mov	r1, r5
   1c1ca:	4668      	mov	r0, sp
   1c1cc:	f7e5 f9c8 	bl	1560 <ocrypto_mod_p256_add>
   1c1d0:	462a      	mov	r2, r5
   1c1d2:	4669      	mov	r1, sp
   1c1d4:	4668      	mov	r0, sp
   1c1d6:	f7e5 f9c3 	bl	1560 <ocrypto_mod_p256_add>
   1c1da:	4a12      	ldr	r2, [pc, #72]	; (1c224 <p256_zdblu+0xb4>)
   1c1dc:	4669      	mov	r1, sp
   1c1de:	4668      	mov	r0, sp
   1c1e0:	f7e5 f9be 	bl	1560 <ocrypto_mod_p256_add>
   1c1e4:	4669      	mov	r1, sp
   1c1e6:	4620      	mov	r0, r4
   1c1e8:	f7e5 faa8 	bl	173c <ocrypto_mod_p256_sqr>
   1c1ec:	4632      	mov	r2, r6
   1c1ee:	4621      	mov	r1, r4
   1c1f0:	4620      	mov	r0, r4
   1c1f2:	f7e5 f9f3 	bl	15dc <ocrypto_mod_p256_sub>
   1c1f6:	4632      	mov	r2, r6
   1c1f8:	4621      	mov	r1, r4
   1c1fa:	4620      	mov	r0, r4
   1c1fc:	f7e5 f9ee 	bl	15dc <ocrypto_mod_p256_sub>
   1c200:	4622      	mov	r2, r4
   1c202:	4631      	mov	r1, r6
   1c204:	4628      	mov	r0, r5
   1c206:	f7e5 f9e9 	bl	15dc <ocrypto_mod_p256_sub>
   1c20a:	466a      	mov	r2, sp
   1c20c:	4629      	mov	r1, r5
   1c20e:	4628      	mov	r0, r5
   1c210:	f7e5 fa7c 	bl	170c <ocrypto_mod_p256_mul>
   1c214:	463a      	mov	r2, r7
   1c216:	4629      	mov	r1, r5
   1c218:	4628      	mov	r0, r5
   1c21a:	f7e5 f9df 	bl	15dc <ocrypto_mod_p256_sub>
   1c21e:	b008      	add	sp, #32
   1c220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c224:	000249dc 	.word	0x000249dc

0001c228 <p256_zaddc>:
   1c228:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c22a:	b099      	sub	sp, #100	; 0x64
   1c22c:	4604      	mov	r4, r0
   1c22e:	460d      	mov	r5, r1
   1c230:	460a      	mov	r2, r1
   1c232:	4601      	mov	r1, r0
   1c234:	4668      	mov	r0, sp
   1c236:	f7e5 f9d1 	bl	15dc <ocrypto_mod_p256_sub>
   1c23a:	4669      	mov	r1, sp
   1c23c:	4668      	mov	r0, sp
   1c23e:	f7e5 fa7d 	bl	173c <ocrypto_mod_p256_sqr>
   1c242:	466a      	mov	r2, sp
   1c244:	4621      	mov	r1, r4
   1c246:	a808      	add	r0, sp, #32
   1c248:	f105 0620 	add.w	r6, r5, #32
   1c24c:	f104 0720 	add.w	r7, r4, #32
   1c250:	f7e5 fa5c 	bl	170c <ocrypto_mod_p256_mul>
   1c254:	466a      	mov	r2, sp
   1c256:	4629      	mov	r1, r5
   1c258:	4668      	mov	r0, sp
   1c25a:	f7e5 fa57 	bl	170c <ocrypto_mod_p256_mul>
   1c25e:	4632      	mov	r2, r6
   1c260:	4639      	mov	r1, r7
   1c262:	a810      	add	r0, sp, #64	; 0x40
   1c264:	f7e5 f97c 	bl	1560 <ocrypto_mod_p256_add>
   1c268:	4632      	mov	r2, r6
   1c26a:	4639      	mov	r1, r7
   1c26c:	4630      	mov	r0, r6
   1c26e:	f7e5 f9b5 	bl	15dc <ocrypto_mod_p256_sub>
   1c272:	4631      	mov	r1, r6
   1c274:	4628      	mov	r0, r5
   1c276:	f7e5 fa61 	bl	173c <ocrypto_mod_p256_sqr>
   1c27a:	466a      	mov	r2, sp
   1c27c:	a908      	add	r1, sp, #32
   1c27e:	4620      	mov	r0, r4
   1c280:	f7e5 f96e 	bl	1560 <ocrypto_mod_p256_add>
   1c284:	4622      	mov	r2, r4
   1c286:	4629      	mov	r1, r5
   1c288:	4628      	mov	r0, r5
   1c28a:	f7e5 f9a7 	bl	15dc <ocrypto_mod_p256_sub>
   1c28e:	466a      	mov	r2, sp
   1c290:	a908      	add	r1, sp, #32
   1c292:	4668      	mov	r0, sp
   1c294:	f7e5 f9a2 	bl	15dc <ocrypto_mod_p256_sub>
   1c298:	466a      	mov	r2, sp
   1c29a:	4639      	mov	r1, r7
   1c29c:	4638      	mov	r0, r7
   1c29e:	f7e5 fa35 	bl	170c <ocrypto_mod_p256_mul>
   1c2a2:	462a      	mov	r2, r5
   1c2a4:	a908      	add	r1, sp, #32
   1c2a6:	4668      	mov	r0, sp
   1c2a8:	f7e5 f998 	bl	15dc <ocrypto_mod_p256_sub>
   1c2ac:	466a      	mov	r2, sp
   1c2ae:	4631      	mov	r1, r6
   1c2b0:	4630      	mov	r0, r6
   1c2b2:	f7e5 fa2b 	bl	170c <ocrypto_mod_p256_mul>
   1c2b6:	463a      	mov	r2, r7
   1c2b8:	4631      	mov	r1, r6
   1c2ba:	4630      	mov	r0, r6
   1c2bc:	f7e5 f98e 	bl	15dc <ocrypto_mod_p256_sub>
   1c2c0:	a910      	add	r1, sp, #64	; 0x40
   1c2c2:	4668      	mov	r0, sp
   1c2c4:	f7e5 fa3a 	bl	173c <ocrypto_mod_p256_sqr>
   1c2c8:	4622      	mov	r2, r4
   1c2ca:	4669      	mov	r1, sp
   1c2cc:	4620      	mov	r0, r4
   1c2ce:	f7e5 f985 	bl	15dc <ocrypto_mod_p256_sub>
   1c2d2:	a908      	add	r1, sp, #32
   1c2d4:	4622      	mov	r2, r4
   1c2d6:	4608      	mov	r0, r1
   1c2d8:	f7e5 f980 	bl	15dc <ocrypto_mod_p256_sub>
   1c2dc:	a910      	add	r1, sp, #64	; 0x40
   1c2de:	aa08      	add	r2, sp, #32
   1c2e0:	4608      	mov	r0, r1
   1c2e2:	f7e5 fa13 	bl	170c <ocrypto_mod_p256_mul>
   1c2e6:	463a      	mov	r2, r7
   1c2e8:	a910      	add	r1, sp, #64	; 0x40
   1c2ea:	4638      	mov	r0, r7
   1c2ec:	f7e5 f976 	bl	15dc <ocrypto_mod_p256_sub>
   1c2f0:	b019      	add	sp, #100	; 0x64
   1c2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c2f4 <p256_zaddu>:
   1c2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c2f8:	b088      	sub	sp, #32
   1c2fa:	460c      	mov	r4, r1
   1c2fc:	4605      	mov	r5, r0
   1c2fe:	4690      	mov	r8, r2
   1c300:	460a      	mov	r2, r1
   1c302:	4601      	mov	r1, r0
   1c304:	4668      	mov	r0, sp
   1c306:	f7e5 f969 	bl	15dc <ocrypto_mod_p256_sub>
   1c30a:	4669      	mov	r1, sp
   1c30c:	4668      	mov	r0, sp
   1c30e:	f7e5 fa15 	bl	173c <ocrypto_mod_p256_sqr>
   1c312:	466a      	mov	r2, sp
   1c314:	4629      	mov	r1, r5
   1c316:	4628      	mov	r0, r5
   1c318:	f104 0620 	add.w	r6, r4, #32
   1c31c:	f7e5 f9f6 	bl	170c <ocrypto_mod_p256_mul>
   1c320:	f105 0720 	add.w	r7, r5, #32
   1c324:	466a      	mov	r2, sp
   1c326:	4621      	mov	r1, r4
   1c328:	4668      	mov	r0, sp
   1c32a:	f7e5 f9ef 	bl	170c <ocrypto_mod_p256_mul>
   1c32e:	4632      	mov	r2, r6
   1c330:	4639      	mov	r1, r7
   1c332:	4630      	mov	r0, r6
   1c334:	f7e5 f952 	bl	15dc <ocrypto_mod_p256_sub>
   1c338:	4631      	mov	r1, r6
   1c33a:	4620      	mov	r0, r4
   1c33c:	f7e5 f9fe 	bl	173c <ocrypto_mod_p256_sqr>
   1c340:	462a      	mov	r2, r5
   1c342:	4621      	mov	r1, r4
   1c344:	4620      	mov	r0, r4
   1c346:	f7e5 f949 	bl	15dc <ocrypto_mod_p256_sub>
   1c34a:	466a      	mov	r2, sp
   1c34c:	4621      	mov	r1, r4
   1c34e:	4620      	mov	r0, r4
   1c350:	f7e5 f944 	bl	15dc <ocrypto_mod_p256_sub>
   1c354:	466a      	mov	r2, sp
   1c356:	4629      	mov	r1, r5
   1c358:	4640      	mov	r0, r8
   1c35a:	f7e5 f93f 	bl	15dc <ocrypto_mod_p256_sub>
   1c35e:	4642      	mov	r2, r8
   1c360:	4639      	mov	r1, r7
   1c362:	4638      	mov	r0, r7
   1c364:	f7e5 f9d2 	bl	170c <ocrypto_mod_p256_mul>
   1c368:	4622      	mov	r2, r4
   1c36a:	4629      	mov	r1, r5
   1c36c:	4668      	mov	r0, sp
   1c36e:	f7e5 f935 	bl	15dc <ocrypto_mod_p256_sub>
   1c372:	466a      	mov	r2, sp
   1c374:	4631      	mov	r1, r6
   1c376:	4630      	mov	r0, r6
   1c378:	f7e5 f9c8 	bl	170c <ocrypto_mod_p256_mul>
   1c37c:	463a      	mov	r2, r7
   1c37e:	4631      	mov	r1, r6
   1c380:	4630      	mov	r0, r6
   1c382:	f7e5 f92b 	bl	15dc <ocrypto_mod_p256_sub>
   1c386:	b008      	add	sp, #32
   1c388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c38c <ocrypto_curve_p256_from64bytes>:
   1c38c:	b570      	push	{r4, r5, r6, lr}
   1c38e:	f100 0620 	add.w	r6, r0, #32
   1c392:	b090      	sub	sp, #64	; 0x40
   1c394:	460d      	mov	r5, r1
   1c396:	4604      	mov	r4, r0
   1c398:	f000 f914 	bl	1c5c4 <ocrypto_mod_p256_from_bytes>
   1c39c:	f105 0120 	add.w	r1, r5, #32
   1c3a0:	4630      	mov	r0, r6
   1c3a2:	f000 f90f 	bl	1c5c4 <ocrypto_mod_p256_from_bytes>
   1c3a6:	4621      	mov	r1, r4
   1c3a8:	a808      	add	r0, sp, #32
   1c3aa:	f7e5 f9c7 	bl	173c <ocrypto_mod_p256_sqr>
   1c3ae:	a908      	add	r1, sp, #32
   1c3b0:	4608      	mov	r0, r1
   1c3b2:	4a0d      	ldr	r2, [pc, #52]	; (1c3e8 <ocrypto_curve_p256_from64bytes+0x5c>)
   1c3b4:	f7e5 f8d4 	bl	1560 <ocrypto_mod_p256_add>
   1c3b8:	a908      	add	r1, sp, #32
   1c3ba:	4622      	mov	r2, r4
   1c3bc:	4608      	mov	r0, r1
   1c3be:	f7e5 f9a5 	bl	170c <ocrypto_mod_p256_mul>
   1c3c2:	a908      	add	r1, sp, #32
   1c3c4:	4a09      	ldr	r2, [pc, #36]	; (1c3ec <ocrypto_curve_p256_from64bytes+0x60>)
   1c3c6:	4608      	mov	r0, r1
   1c3c8:	f7e5 f8ca 	bl	1560 <ocrypto_mod_p256_add>
   1c3cc:	4631      	mov	r1, r6
   1c3ce:	4668      	mov	r0, sp
   1c3d0:	f7e5 f9b4 	bl	173c <ocrypto_mod_p256_sqr>
   1c3d4:	2220      	movs	r2, #32
   1c3d6:	4669      	mov	r1, sp
   1c3d8:	eb0d 0002 	add.w	r0, sp, r2
   1c3dc:	f7e5 f892 	bl	1504 <ocrypto_constant_time_equal>
   1c3e0:	3801      	subs	r0, #1
   1c3e2:	b010      	add	sp, #64	; 0x40
   1c3e4:	bd70      	pop	{r4, r5, r6, pc}
   1c3e6:	bf00      	nop
   1c3e8:	000249dc 	.word	0x000249dc
   1c3ec:	000249fc 	.word	0x000249fc

0001c3f0 <ocrypto_curve_p256_to32bytes>:
   1c3f0:	f000 b902 	b.w	1c5f8 <ocrypto_mod_p256_to_bytes>

0001c3f4 <ocrypto_curve_p256_to64bytes>:
   1c3f4:	b538      	push	{r3, r4, r5, lr}
   1c3f6:	4604      	mov	r4, r0
   1c3f8:	460d      	mov	r5, r1
   1c3fa:	f000 f8fd 	bl	1c5f8 <ocrypto_mod_p256_to_bytes>
   1c3fe:	f105 0120 	add.w	r1, r5, #32
   1c402:	f104 0020 	add.w	r0, r4, #32
   1c406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1c40a:	f000 b8f5 	b.w	1c5f8 <ocrypto_mod_p256_to_bytes>
   1c40e:	bf00      	nop

0001c410 <ocrypto_curve_p256_scalarmult>:
   1c410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c414:	4613      	mov	r3, r2
   1c416:	b0b8      	sub	sp, #224	; 0xe0
   1c418:	4a54      	ldr	r2, [pc, #336]	; (1c56c <ocrypto_curve_p256_scalarmult+0x15c>)
   1c41a:	4689      	mov	r9, r1
   1c41c:	4680      	mov	r8, r0
   1c41e:	4619      	mov	r1, r3
   1c420:	a810      	add	r0, sp, #64	; 0x40
   1c422:	f7e4 fe81 	bl	1128 <ocrypto_bigint_sub256>
   1c426:	4952      	ldr	r1, [pc, #328]	; (1c570 <ocrypto_curve_p256_scalarmult+0x160>)
   1c428:	4602      	mov	r2, r0
   1c42a:	a810      	add	r0, sp, #64	; 0x40
   1c42c:	f7e4 fe9c 	bl	1168 <ocrypto_bigint_cadd256>
   1c430:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   1c432:	494e      	ldr	r1, [pc, #312]	; (1c56c <ocrypto_curve_p256_scalarmult+0x15c>)
   1c434:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   1c438:	4607      	mov	r7, r0
   1c43a:	f1c6 0201 	rsb	r2, r6, #1
   1c43e:	a810      	add	r0, sp, #64	; 0x40
   1c440:	f7e4 fe92 	bl	1168 <ocrypto_bigint_cadd256>
   1c444:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1c446:	464a      	mov	r2, r9
   1c448:	ea6f 0a03 	mvn.w	sl, r3
   1c44c:	a928      	add	r1, sp, #160	; 0xa0
   1c44e:	a818      	add	r0, sp, #96	; 0x60
   1c450:	f7ff fe8e 	bl	1c170 <p256_zdblu>
   1c454:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   1c458:	a920      	add	r1, sp, #128	; 0x80
   1c45a:	f1ca 0201 	rsb	r2, sl, #1
   1c45e:	4608      	mov	r0, r1
   1c460:	f000 f892 	bl	1c588 <ocrypto_mod_p256_cneg>
   1c464:	f1c7 0701 	rsb	r7, r7, #1
   1c468:	24fe      	movs	r4, #254	; 0xfe
   1c46a:	466a      	mov	r2, sp
   1c46c:	a918      	add	r1, sp, #96	; 0x60
   1c46e:	a828      	add	r0, sp, #160	; 0xa0
   1c470:	f7ff ff40 	bl	1c2f4 <p256_zaddu>
   1c474:	1162      	asrs	r2, r4, #5
   1c476:	ab38      	add	r3, sp, #224	; 0xe0
   1c478:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1c47c:	f004 011f 	and.w	r1, r4, #31
   1c480:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   1c484:	40cb      	lsrs	r3, r1
   1c486:	4655      	mov	r5, sl
   1c488:	f003 0a01 	and.w	sl, r3, #1
   1c48c:	ea8a 0505 	eor.w	r5, sl, r5
   1c490:	462a      	mov	r2, r5
   1c492:	a928      	add	r1, sp, #160	; 0xa0
   1c494:	a818      	add	r0, sp, #96	; 0x60
   1c496:	f7e4 fec3 	bl	1220 <ocrypto_bigint_cswap256>
   1c49a:	462a      	mov	r2, r5
   1c49c:	a930      	add	r1, sp, #192	; 0xc0
   1c49e:	a820      	add	r0, sp, #128	; 0x80
   1c4a0:	f7e4 febe 	bl	1220 <ocrypto_bigint_cswap256>
   1c4a4:	3c01      	subs	r4, #1
   1c4a6:	a928      	add	r1, sp, #160	; 0xa0
   1c4a8:	a818      	add	r0, sp, #96	; 0x60
   1c4aa:	f7ff febd 	bl	1c228 <p256_zaddc>
   1c4ae:	1c63      	adds	r3, r4, #1
   1c4b0:	d1db      	bne.n	1c46a <ocrypto_curve_p256_scalarmult+0x5a>
   1c4b2:	f1ca 0201 	rsb	r2, sl, #1
   1c4b6:	a920      	add	r1, sp, #128	; 0x80
   1c4b8:	a808      	add	r0, sp, #32
   1c4ba:	f000 f865 	bl	1c588 <ocrypto_mod_p256_cneg>
   1c4be:	ea86 060a 	eor.w	r6, r6, sl
   1c4c2:	466a      	mov	r2, sp
   1c4c4:	a918      	add	r1, sp, #96	; 0x60
   1c4c6:	a828      	add	r0, sp, #160	; 0xa0
   1c4c8:	f7ff ff14 	bl	1c2f4 <p256_zaddu>
   1c4cc:	a928      	add	r1, sp, #160	; 0xa0
   1c4ce:	4632      	mov	r2, r6
   1c4d0:	a818      	add	r0, sp, #96	; 0x60
   1c4d2:	f7e4 fea5 	bl	1220 <ocrypto_bigint_cswap256>
   1c4d6:	4632      	mov	r2, r6
   1c4d8:	a930      	add	r1, sp, #192	; 0xc0
   1c4da:	a820      	add	r0, sp, #128	; 0x80
   1c4dc:	f7e4 fea0 	bl	1220 <ocrypto_bigint_cswap256>
   1c4e0:	a908      	add	r1, sp, #32
   1c4e2:	466a      	mov	r2, sp
   1c4e4:	4608      	mov	r0, r1
   1c4e6:	f7e5 f911 	bl	170c <ocrypto_mod_p256_mul>
   1c4ea:	a908      	add	r1, sp, #32
   1c4ec:	4608      	mov	r0, r1
   1c4ee:	f000 f89d 	bl	1c62c <ocrypto_mod_p256_inv>
   1c4f2:	a908      	add	r1, sp, #32
   1c4f4:	f108 0420 	add.w	r4, r8, #32
   1c4f8:	f109 0220 	add.w	r2, r9, #32
   1c4fc:	4608      	mov	r0, r1
   1c4fe:	f7e5 f905 	bl	170c <ocrypto_mod_p256_mul>
   1c502:	a920      	add	r1, sp, #128	; 0x80
   1c504:	aa08      	add	r2, sp, #32
   1c506:	4620      	mov	r0, r4
   1c508:	f7e5 f900 	bl	170c <ocrypto_mod_p256_mul>
   1c50c:	aa08      	add	r2, sp, #32
   1c50e:	a918      	add	r1, sp, #96	; 0x60
   1c510:	4668      	mov	r0, sp
   1c512:	f7e5 f8fb 	bl	170c <ocrypto_mod_p256_mul>
   1c516:	4669      	mov	r1, sp
   1c518:	4668      	mov	r0, sp
   1c51a:	f7e5 f90f 	bl	173c <ocrypto_mod_p256_sqr>
   1c51e:	aa18      	add	r2, sp, #96	; 0x60
   1c520:	4669      	mov	r1, sp
   1c522:	a808      	add	r0, sp, #32
   1c524:	f7e5 f8f2 	bl	170c <ocrypto_mod_p256_mul>
   1c528:	4621      	mov	r1, r4
   1c52a:	4668      	mov	r0, sp
   1c52c:	f7e5 f906 	bl	173c <ocrypto_mod_p256_sqr>
   1c530:	aa08      	add	r2, sp, #32
   1c532:	4669      	mov	r1, sp
   1c534:	4610      	mov	r0, r2
   1c536:	f7e5 f851 	bl	15dc <ocrypto_mod_p256_sub>
   1c53a:	4a0e      	ldr	r2, [pc, #56]	; (1c574 <ocrypto_curve_p256_scalarmult+0x164>)
   1c53c:	a908      	add	r1, sp, #32
   1c53e:	4668      	mov	r0, sp
   1c540:	f7e5 f84c 	bl	15dc <ocrypto_mod_p256_sub>
   1c544:	4620      	mov	r0, r4
   1c546:	2120      	movs	r1, #32
   1c548:	f7e4 fff0 	bl	152c <ocrypto_constant_time_is_zero>
   1c54c:	a908      	add	r1, sp, #32
   1c54e:	4243      	negs	r3, r0
   1c550:	4602      	mov	r2, r0
   1c552:	4668      	mov	r0, sp
   1c554:	431f      	orrs	r7, r3
   1c556:	f7e4 fe63 	bl	1220 <ocrypto_bigint_cswap256>
   1c55a:	4640      	mov	r0, r8
   1c55c:	4a06      	ldr	r2, [pc, #24]	; (1c578 <ocrypto_curve_p256_scalarmult+0x168>)
   1c55e:	4669      	mov	r1, sp
   1c560:	f7e5 f8d4 	bl	170c <ocrypto_mod_p256_mul>
   1c564:	4638      	mov	r0, r7
   1c566:	b038      	add	sp, #224	; 0xe0
   1c568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c56c:	00024a1c 	.word	0x00024a1c
   1c570:	0002499c 	.word	0x0002499c
   1c574:	000249fc 	.word	0x000249fc
   1c578:	000249bc 	.word	0x000249bc

0001c57c <ocrypto_curve_p256_scalarmult_base>:
   1c57c:	460a      	mov	r2, r1
   1c57e:	4901      	ldr	r1, [pc, #4]	; (1c584 <ocrypto_curve_p256_scalarmult_base+0x8>)
   1c580:	f7ff bf46 	b.w	1c410 <ocrypto_curve_p256_scalarmult>
   1c584:	0002495c 	.word	0x0002495c

0001c588 <ocrypto_mod_p256_cneg>:
   1c588:	b570      	push	{r4, r5, r6, lr}
   1c58a:	b088      	sub	sp, #32
   1c58c:	4604      	mov	r4, r0
   1c58e:	460d      	mov	r5, r1
   1c590:	4616      	mov	r6, r2
   1c592:	2100      	movs	r1, #0
   1c594:	2220      	movs	r2, #32
   1c596:	4668      	mov	r0, sp
   1c598:	f003 ffe5 	bl	20566 <memset>
   1c59c:	2300      	movs	r3, #0
   1c59e:	4629      	mov	r1, r5
   1c5a0:	2220      	movs	r2, #32
   1c5a2:	4620      	mov	r0, r4
   1c5a4:	9300      	str	r3, [sp, #0]
   1c5a6:	f003 ffd3 	bl	20550 <memcpy>
   1c5aa:	462a      	mov	r2, r5
   1c5ac:	4669      	mov	r1, sp
   1c5ae:	4668      	mov	r0, sp
   1c5b0:	f7e5 f814 	bl	15dc <ocrypto_mod_p256_sub>
   1c5b4:	4632      	mov	r2, r6
   1c5b6:	4669      	mov	r1, sp
   1c5b8:	4620      	mov	r0, r4
   1c5ba:	f7e4 fe31 	bl	1220 <ocrypto_bigint_cswap256>
   1c5be:	b008      	add	sp, #32
   1c5c0:	bd70      	pop	{r4, r5, r6, pc}
   1c5c2:	bf00      	nop

0001c5c4 <ocrypto_mod_p256_from_bytes>:
   1c5c4:	680b      	ldr	r3, [r1, #0]
   1c5c6:	ba1b      	rev	r3, r3
   1c5c8:	61c3      	str	r3, [r0, #28]
   1c5ca:	684b      	ldr	r3, [r1, #4]
   1c5cc:	ba1b      	rev	r3, r3
   1c5ce:	6183      	str	r3, [r0, #24]
   1c5d0:	688b      	ldr	r3, [r1, #8]
   1c5d2:	ba1b      	rev	r3, r3
   1c5d4:	6143      	str	r3, [r0, #20]
   1c5d6:	68cb      	ldr	r3, [r1, #12]
   1c5d8:	ba1b      	rev	r3, r3
   1c5da:	6103      	str	r3, [r0, #16]
   1c5dc:	690b      	ldr	r3, [r1, #16]
   1c5de:	ba1b      	rev	r3, r3
   1c5e0:	60c3      	str	r3, [r0, #12]
   1c5e2:	694b      	ldr	r3, [r1, #20]
   1c5e4:	ba1b      	rev	r3, r3
   1c5e6:	6083      	str	r3, [r0, #8]
   1c5e8:	698b      	ldr	r3, [r1, #24]
   1c5ea:	ba1b      	rev	r3, r3
   1c5ec:	6043      	str	r3, [r0, #4]
   1c5ee:	69cb      	ldr	r3, [r1, #28]
   1c5f0:	ba1b      	rev	r3, r3
   1c5f2:	6003      	str	r3, [r0, #0]
   1c5f4:	4770      	bx	lr
   1c5f6:	bf00      	nop

0001c5f8 <ocrypto_mod_p256_to_bytes>:
   1c5f8:	69cb      	ldr	r3, [r1, #28]
   1c5fa:	ba1b      	rev	r3, r3
   1c5fc:	6003      	str	r3, [r0, #0]
   1c5fe:	698b      	ldr	r3, [r1, #24]
   1c600:	ba1b      	rev	r3, r3
   1c602:	6043      	str	r3, [r0, #4]
   1c604:	694b      	ldr	r3, [r1, #20]
   1c606:	ba1b      	rev	r3, r3
   1c608:	6083      	str	r3, [r0, #8]
   1c60a:	690b      	ldr	r3, [r1, #16]
   1c60c:	ba1b      	rev	r3, r3
   1c60e:	60c3      	str	r3, [r0, #12]
   1c610:	68cb      	ldr	r3, [r1, #12]
   1c612:	ba1b      	rev	r3, r3
   1c614:	6103      	str	r3, [r0, #16]
   1c616:	688b      	ldr	r3, [r1, #8]
   1c618:	ba1b      	rev	r3, r3
   1c61a:	6143      	str	r3, [r0, #20]
   1c61c:	684b      	ldr	r3, [r1, #4]
   1c61e:	ba1b      	rev	r3, r3
   1c620:	6183      	str	r3, [r0, #24]
   1c622:	680b      	ldr	r3, [r1, #0]
   1c624:	ba1b      	rev	r3, r3
   1c626:	61c3      	str	r3, [r0, #28]
   1c628:	4770      	bx	lr
   1c62a:	bf00      	nop

0001c62c <ocrypto_mod_p256_inv>:
   1c62c:	b570      	push	{r4, r5, r6, lr}
   1c62e:	b098      	sub	sp, #96	; 0x60
   1c630:	460d      	mov	r5, r1
   1c632:	4606      	mov	r6, r0
   1c634:	a810      	add	r0, sp, #64	; 0x40
   1c636:	f7e5 f881 	bl	173c <ocrypto_mod_p256_sqr>
   1c63a:	462a      	mov	r2, r5
   1c63c:	a910      	add	r1, sp, #64	; 0x40
   1c63e:	4668      	mov	r0, sp
   1c640:	f7e5 f864 	bl	170c <ocrypto_mod_p256_mul>
   1c644:	4669      	mov	r1, sp
   1c646:	a810      	add	r0, sp, #64	; 0x40
   1c648:	f7e5 f878 	bl	173c <ocrypto_mod_p256_sqr>
   1c64c:	a910      	add	r1, sp, #64	; 0x40
   1c64e:	4608      	mov	r0, r1
   1c650:	f7e5 f874 	bl	173c <ocrypto_mod_p256_sqr>
   1c654:	466a      	mov	r2, sp
   1c656:	a910      	add	r1, sp, #64	; 0x40
   1c658:	a808      	add	r0, sp, #32
   1c65a:	f7e5 f857 	bl	170c <ocrypto_mod_p256_mul>
   1c65e:	a908      	add	r1, sp, #32
   1c660:	a810      	add	r0, sp, #64	; 0x40
   1c662:	f7e5 f86b 	bl	173c <ocrypto_mod_p256_sqr>
   1c666:	a910      	add	r1, sp, #64	; 0x40
   1c668:	4608      	mov	r0, r1
   1c66a:	f7e5 f867 	bl	173c <ocrypto_mod_p256_sqr>
   1c66e:	a910      	add	r1, sp, #64	; 0x40
   1c670:	4608      	mov	r0, r1
   1c672:	f7e5 f863 	bl	173c <ocrypto_mod_p256_sqr>
   1c676:	a910      	add	r1, sp, #64	; 0x40
   1c678:	4608      	mov	r0, r1
   1c67a:	f7e5 f85f 	bl	173c <ocrypto_mod_p256_sqr>
   1c67e:	a910      	add	r1, sp, #64	; 0x40
   1c680:	aa08      	add	r2, sp, #32
   1c682:	4608      	mov	r0, r1
   1c684:	f7e5 f842 	bl	170c <ocrypto_mod_p256_mul>
   1c688:	a910      	add	r1, sp, #64	; 0x40
   1c68a:	4608      	mov	r0, r1
   1c68c:	f7e5 f856 	bl	173c <ocrypto_mod_p256_sqr>
   1c690:	a910      	add	r1, sp, #64	; 0x40
   1c692:	4608      	mov	r0, r1
   1c694:	f7e5 f852 	bl	173c <ocrypto_mod_p256_sqr>
   1c698:	a910      	add	r1, sp, #64	; 0x40
   1c69a:	466a      	mov	r2, sp
   1c69c:	a808      	add	r0, sp, #32
   1c69e:	f7e5 f835 	bl	170c <ocrypto_mod_p256_mul>
   1c6a2:	2405      	movs	r4, #5
   1c6a4:	a908      	add	r1, sp, #32
   1c6a6:	a810      	add	r0, sp, #64	; 0x40
   1c6a8:	f7e5 f848 	bl	173c <ocrypto_mod_p256_sqr>
   1c6ac:	a910      	add	r1, sp, #64	; 0x40
   1c6ae:	4608      	mov	r0, r1
   1c6b0:	f7e5 f844 	bl	173c <ocrypto_mod_p256_sqr>
   1c6b4:	3c01      	subs	r4, #1
   1c6b6:	a910      	add	r1, sp, #64	; 0x40
   1c6b8:	d1f5      	bne.n	1c6a6 <ocrypto_mod_p256_inv+0x7a>
   1c6ba:	aa08      	add	r2, sp, #32
   1c6bc:	4608      	mov	r0, r1
   1c6be:	f7e5 f825 	bl	170c <ocrypto_mod_p256_mul>
   1c6c2:	2405      	movs	r4, #5
   1c6c4:	a910      	add	r1, sp, #64	; 0x40
   1c6c6:	4608      	mov	r0, r1
   1c6c8:	f7e5 f838 	bl	173c <ocrypto_mod_p256_sqr>
   1c6cc:	a910      	add	r1, sp, #64	; 0x40
   1c6ce:	4608      	mov	r0, r1
   1c6d0:	f7e5 f834 	bl	173c <ocrypto_mod_p256_sqr>
   1c6d4:	3c01      	subs	r4, #1
   1c6d6:	d1f5      	bne.n	1c6c4 <ocrypto_mod_p256_inv+0x98>
   1c6d8:	a910      	add	r1, sp, #64	; 0x40
   1c6da:	aa08      	add	r2, sp, #32
   1c6dc:	4608      	mov	r0, r1
   1c6de:	f7e5 f815 	bl	170c <ocrypto_mod_p256_mul>
   1c6e2:	a910      	add	r1, sp, #64	; 0x40
   1c6e4:	a808      	add	r0, sp, #32
   1c6e6:	f7e5 f829 	bl	173c <ocrypto_mod_p256_sqr>
   1c6ea:	a908      	add	r1, sp, #32
   1c6ec:	4608      	mov	r0, r1
   1c6ee:	f7e5 f825 	bl	173c <ocrypto_mod_p256_sqr>
   1c6f2:	a908      	add	r1, sp, #32
   1c6f4:	466a      	mov	r2, sp
   1c6f6:	4668      	mov	r0, sp
   1c6f8:	f7e5 f808 	bl	170c <ocrypto_mod_p256_mul>
   1c6fc:	2410      	movs	r4, #16
   1c6fe:	4669      	mov	r1, sp
   1c700:	a810      	add	r0, sp, #64	; 0x40
   1c702:	f7e5 f81b 	bl	173c <ocrypto_mod_p256_sqr>
   1c706:	a910      	add	r1, sp, #64	; 0x40
   1c708:	4608      	mov	r0, r1
   1c70a:	f7e5 f817 	bl	173c <ocrypto_mod_p256_sqr>
   1c70e:	3c01      	subs	r4, #1
   1c710:	a910      	add	r1, sp, #64	; 0x40
   1c712:	d1f5      	bne.n	1c700 <ocrypto_mod_p256_inv+0xd4>
   1c714:	462a      	mov	r2, r5
   1c716:	4608      	mov	r0, r1
   1c718:	f7e4 fff8 	bl	170c <ocrypto_mod_p256_mul>
   1c71c:	2440      	movs	r4, #64	; 0x40
   1c71e:	a910      	add	r1, sp, #64	; 0x40
   1c720:	4608      	mov	r0, r1
   1c722:	f7e5 f80b 	bl	173c <ocrypto_mod_p256_sqr>
   1c726:	a910      	add	r1, sp, #64	; 0x40
   1c728:	4608      	mov	r0, r1
   1c72a:	f7e5 f807 	bl	173c <ocrypto_mod_p256_sqr>
   1c72e:	3c01      	subs	r4, #1
   1c730:	d1f5      	bne.n	1c71e <ocrypto_mod_p256_inv+0xf2>
   1c732:	a910      	add	r1, sp, #64	; 0x40
   1c734:	466a      	mov	r2, sp
   1c736:	4608      	mov	r0, r1
   1c738:	f7e4 ffe8 	bl	170c <ocrypto_mod_p256_mul>
   1c73c:	2410      	movs	r4, #16
   1c73e:	a910      	add	r1, sp, #64	; 0x40
   1c740:	4608      	mov	r0, r1
   1c742:	f7e4 fffb 	bl	173c <ocrypto_mod_p256_sqr>
   1c746:	a910      	add	r1, sp, #64	; 0x40
   1c748:	4608      	mov	r0, r1
   1c74a:	f7e4 fff7 	bl	173c <ocrypto_mod_p256_sqr>
   1c74e:	3c01      	subs	r4, #1
   1c750:	d1f5      	bne.n	1c73e <ocrypto_mod_p256_inv+0x112>
   1c752:	a910      	add	r1, sp, #64	; 0x40
   1c754:	466a      	mov	r2, sp
   1c756:	4608      	mov	r0, r1
   1c758:	f7e4 ffd8 	bl	170c <ocrypto_mod_p256_mul>
   1c75c:	2410      	movs	r4, #16
   1c75e:	a910      	add	r1, sp, #64	; 0x40
   1c760:	4608      	mov	r0, r1
   1c762:	f7e4 ffeb 	bl	173c <ocrypto_mod_p256_sqr>
   1c766:	a910      	add	r1, sp, #64	; 0x40
   1c768:	4608      	mov	r0, r1
   1c76a:	f7e4 ffe7 	bl	173c <ocrypto_mod_p256_sqr>
   1c76e:	3c01      	subs	r4, #1
   1c770:	d1f5      	bne.n	1c75e <ocrypto_mod_p256_inv+0x132>
   1c772:	a910      	add	r1, sp, #64	; 0x40
   1c774:	aa08      	add	r2, sp, #32
   1c776:	4608      	mov	r0, r1
   1c778:	f7e4 ffc8 	bl	170c <ocrypto_mod_p256_mul>
   1c77c:	462a      	mov	r2, r5
   1c77e:	a910      	add	r1, sp, #64	; 0x40
   1c780:	4630      	mov	r0, r6
   1c782:	f7e4 ffc3 	bl	170c <ocrypto_mod_p256_mul>
   1c786:	b018      	add	sp, #96	; 0x60
   1c788:	bd70      	pop	{r4, r5, r6, pc}
   1c78a:	bf00      	nop

0001c78c <nrf_cc3xx_platform_init>:
   1c78c:	b510      	push	{r4, lr}
   1c78e:	4c0c      	ldr	r4, [pc, #48]	; (1c7c0 <nrf_cc3xx_platform_init+0x34>)
   1c790:	6823      	ldr	r3, [r4, #0]
   1c792:	b113      	cbz	r3, 1c79a <nrf_cc3xx_platform_init+0xe>
   1c794:	4b0b      	ldr	r3, [pc, #44]	; (1c7c4 <nrf_cc3xx_platform_init+0x38>)
   1c796:	681b      	ldr	r3, [r3, #0]
   1c798:	b92b      	cbnz	r3, 1c7a6 <nrf_cc3xx_platform_init+0x1a>
   1c79a:	f000 fe7d 	bl	1d498 <CC_LibInit>
   1c79e:	b930      	cbnz	r0, 1c7ae <nrf_cc3xx_platform_init+0x22>
   1c7a0:	4b08      	ldr	r3, [pc, #32]	; (1c7c4 <nrf_cc3xx_platform_init+0x38>)
   1c7a2:	2201      	movs	r2, #1
   1c7a4:	601a      	str	r2, [r3, #0]
   1c7a6:	2301      	movs	r3, #1
   1c7a8:	6023      	str	r3, [r4, #0]
   1c7aa:	2000      	movs	r0, #0
   1c7ac:	bd10      	pop	{r4, pc}
   1c7ae:	3801      	subs	r0, #1
   1c7b0:	2806      	cmp	r0, #6
   1c7b2:	d901      	bls.n	1c7b8 <nrf_cc3xx_platform_init+0x2c>
   1c7b4:	4804      	ldr	r0, [pc, #16]	; (1c7c8 <nrf_cc3xx_platform_init+0x3c>)
   1c7b6:	bd10      	pop	{r4, pc}
   1c7b8:	4b04      	ldr	r3, [pc, #16]	; (1c7cc <nrf_cc3xx_platform_init+0x40>)
   1c7ba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1c7be:	bd10      	pop	{r4, pc}
   1c7c0:	20002adc 	.word	0x20002adc
   1c7c4:	20002ae0 	.word	0x20002ae0
   1c7c8:	ffff8ffe 	.word	0xffff8ffe
   1c7cc:	00024a3c 	.word	0x00024a3c

0001c7d0 <nrf_cc3xx_platform_abort>:
   1c7d0:	f3bf 8f4f 	dsb	sy
   1c7d4:	4905      	ldr	r1, [pc, #20]	; (1c7ec <nrf_cc3xx_platform_abort+0x1c>)
   1c7d6:	4b06      	ldr	r3, [pc, #24]	; (1c7f0 <nrf_cc3xx_platform_abort+0x20>)
   1c7d8:	68ca      	ldr	r2, [r1, #12]
   1c7da:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1c7de:	4313      	orrs	r3, r2
   1c7e0:	60cb      	str	r3, [r1, #12]
   1c7e2:	f3bf 8f4f 	dsb	sy
   1c7e6:	bf00      	nop
   1c7e8:	e7fd      	b.n	1c7e6 <nrf_cc3xx_platform_abort+0x16>
   1c7ea:	bf00      	nop
   1c7ec:	e000ed00 	.word	0xe000ed00
   1c7f0:	05fa0004 	.word	0x05fa0004

0001c7f4 <CC_PalAbort>:
   1c7f4:	b410      	push	{r4}
   1c7f6:	4b09      	ldr	r3, [pc, #36]	; (1c81c <CC_PalAbort+0x28>)
   1c7f8:	4909      	ldr	r1, [pc, #36]	; (1c820 <CC_PalAbort+0x2c>)
   1c7fa:	4c0a      	ldr	r4, [pc, #40]	; (1c824 <CC_PalAbort+0x30>)
   1c7fc:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   1c800:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1c804:	6849      	ldr	r1, [r1, #4]
   1c806:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1c80a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1c80e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1c812:	2300      	movs	r3, #0
   1c814:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   1c818:	bc10      	pop	{r4}
   1c81a:	4708      	bx	r1
   1c81c:	5002b000 	.word	0x5002b000
   1c820:	200008bc 	.word	0x200008bc
   1c824:	5002a000 	.word	0x5002a000

0001c828 <nrf_cc3xx_platform_set_abort>:
   1c828:	e9d0 1200 	ldrd	r1, r2, [r0]
   1c82c:	4b01      	ldr	r3, [pc, #4]	; (1c834 <nrf_cc3xx_platform_set_abort+0xc>)
   1c82e:	e9c3 1200 	strd	r1, r2, [r3]
   1c832:	4770      	bx	lr
   1c834:	200008bc 	.word	0x200008bc

0001c838 <nrf_cc3xx_platform_ctr_drbg_init>:
   1c838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c83c:	4c14      	ldr	r4, [pc, #80]	; (1c890 <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   1c83e:	4e15      	ldr	r6, [pc, #84]	; (1c894 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   1c840:	2800      	cmp	r0, #0
   1c842:	bf18      	it	ne
   1c844:	4604      	movne	r4, r0
   1c846:	b083      	sub	sp, #12
   1c848:	6823      	ldr	r3, [r4, #0]
   1c84a:	42b3      	cmp	r3, r6
   1c84c:	d01c      	beq.n	1c888 <nrf_cc3xx_platform_ctr_drbg_init+0x50>
   1c84e:	460d      	mov	r5, r1
   1c850:	4620      	mov	r0, r4
   1c852:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   1c856:	f104 0904 	add.w	r9, r4, #4
   1c85a:	4617      	mov	r7, r2
   1c85c:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   1c860:	f000 f8d0 	bl	1ca04 <mbedtls_platform_zeroize>
   1c864:	4648      	mov	r0, r9
   1c866:	f000 fd05 	bl	1d274 <cc_mbedtls_entropy_init>
   1c86a:	4640      	mov	r0, r8
   1c86c:	f000 fb32 	bl	1ced4 <cc_mbedtls_ctr_drbg_init>
   1c870:	4909      	ldr	r1, [pc, #36]	; (1c898 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   1c872:	9700      	str	r7, [sp, #0]
   1c874:	462b      	mov	r3, r5
   1c876:	464a      	mov	r2, r9
   1c878:	4640      	mov	r0, r8
   1c87a:	f000 fb41 	bl	1cf00 <cc_mbedtls_ctr_drbg_seed>
   1c87e:	b900      	cbnz	r0, 1c882 <nrf_cc3xx_platform_ctr_drbg_init+0x4a>
   1c880:	6026      	str	r6, [r4, #0]
   1c882:	b003      	add	sp, #12
   1c884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c888:	2000      	movs	r0, #0
   1c88a:	b003      	add	sp, #12
   1c88c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c890:	20002ae4 	.word	0x20002ae4
   1c894:	5ac9bca5 	.word	0x5ac9bca5
   1c898:	0001d2f5 	.word	0x0001d2f5

0001c89c <nrf_cc3xx_platform_ctr_drbg_get>:
   1c89c:	b570      	push	{r4, r5, r6, lr}
   1c89e:	4d0d      	ldr	r5, [pc, #52]	; (1c8d4 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   1c8a0:	2800      	cmp	r0, #0
   1c8a2:	bf18      	it	ne
   1c8a4:	4605      	movne	r5, r0
   1c8a6:	461e      	mov	r6, r3
   1c8a8:	6828      	ldr	r0, [r5, #0]
   1c8aa:	4b0b      	ldr	r3, [pc, #44]	; (1c8d8 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   1c8ac:	4298      	cmp	r0, r3
   1c8ae:	b082      	sub	sp, #8
   1c8b0:	d10d      	bne.n	1c8ce <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   1c8b2:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   1c8b6:	2500      	movs	r5, #0
   1c8b8:	9500      	str	r5, [sp, #0]
   1c8ba:	462b      	mov	r3, r5
   1c8bc:	4614      	mov	r4, r2
   1c8be:	f000 fb6d 	bl	1cf9c <cc_mbedtls_ctr_drbg_random_with_add>
   1c8c2:	2800      	cmp	r0, #0
   1c8c4:	bf18      	it	ne
   1c8c6:	462c      	movne	r4, r5
   1c8c8:	6034      	str	r4, [r6, #0]
   1c8ca:	b002      	add	sp, #8
   1c8cc:	bd70      	pop	{r4, r5, r6, pc}
   1c8ce:	4803      	ldr	r0, [pc, #12]	; (1c8dc <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   1c8d0:	e7fb      	b.n	1c8ca <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   1c8d2:	bf00      	nop
   1c8d4:	20002ae4 	.word	0x20002ae4
   1c8d8:	5ac9bca5 	.word	0x5ac9bca5
   1c8dc:	ffff8fe8 	.word	0xffff8fe8

0001c8e0 <mutex_free>:
   1c8e0:	b510      	push	{r4, lr}
   1c8e2:	4604      	mov	r4, r0
   1c8e4:	b130      	cbz	r0, 1c8f4 <mutex_free+0x14>
   1c8e6:	6863      	ldr	r3, [r4, #4]
   1c8e8:	06db      	lsls	r3, r3, #27
   1c8ea:	d502      	bpl.n	1c8f2 <mutex_free+0x12>
   1c8ec:	2300      	movs	r3, #0
   1c8ee:	6023      	str	r3, [r4, #0]
   1c8f0:	6063      	str	r3, [r4, #4]
   1c8f2:	bd10      	pop	{r4, pc}
   1c8f4:	4b02      	ldr	r3, [pc, #8]	; (1c900 <mutex_free+0x20>)
   1c8f6:	4803      	ldr	r0, [pc, #12]	; (1c904 <mutex_free+0x24>)
   1c8f8:	685b      	ldr	r3, [r3, #4]
   1c8fa:	4798      	blx	r3
   1c8fc:	e7f3      	b.n	1c8e6 <mutex_free+0x6>
   1c8fe:	bf00      	nop
   1c900:	200008bc 	.word	0x200008bc
   1c904:	00024a58 	.word	0x00024a58

0001c908 <mutex_lock>:
   1c908:	b1b0      	cbz	r0, 1c938 <mutex_lock+0x30>
   1c90a:	6843      	ldr	r3, [r0, #4]
   1c90c:	b193      	cbz	r3, 1c934 <mutex_lock+0x2c>
   1c90e:	06db      	lsls	r3, r3, #27
   1c910:	d50e      	bpl.n	1c930 <mutex_lock+0x28>
   1c912:	2301      	movs	r3, #1
   1c914:	e850 2f00 	ldrex	r2, [r0]
   1c918:	4619      	mov	r1, r3
   1c91a:	e840 1c00 	strex	ip, r1, [r0]
   1c91e:	f09c 0f00 	teq	ip, #0
   1c922:	d1f7      	bne.n	1c914 <mutex_lock+0xc>
   1c924:	2a01      	cmp	r2, #1
   1c926:	d0f5      	beq.n	1c914 <mutex_lock+0xc>
   1c928:	f3bf 8f5f 	dmb	sy
   1c92c:	2000      	movs	r0, #0
   1c92e:	4770      	bx	lr
   1c930:	4803      	ldr	r0, [pc, #12]	; (1c940 <mutex_lock+0x38>)
   1c932:	4770      	bx	lr
   1c934:	4803      	ldr	r0, [pc, #12]	; (1c944 <mutex_lock+0x3c>)
   1c936:	4770      	bx	lr
   1c938:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1c93c:	4770      	bx	lr
   1c93e:	bf00      	nop
   1c940:	ffff8fe9 	.word	0xffff8fe9
   1c944:	ffff8fea 	.word	0xffff8fea

0001c948 <mutex_unlock>:
   1c948:	b168      	cbz	r0, 1c966 <mutex_unlock+0x1e>
   1c94a:	6843      	ldr	r3, [r0, #4]
   1c94c:	b13b      	cbz	r3, 1c95e <mutex_unlock+0x16>
   1c94e:	06db      	lsls	r3, r3, #27
   1c950:	d507      	bpl.n	1c962 <mutex_unlock+0x1a>
   1c952:	f3bf 8f5f 	dmb	sy
   1c956:	2300      	movs	r3, #0
   1c958:	6003      	str	r3, [r0, #0]
   1c95a:	4618      	mov	r0, r3
   1c95c:	4770      	bx	lr
   1c95e:	4803      	ldr	r0, [pc, #12]	; (1c96c <mutex_unlock+0x24>)
   1c960:	4770      	bx	lr
   1c962:	4803      	ldr	r0, [pc, #12]	; (1c970 <mutex_unlock+0x28>)
   1c964:	4770      	bx	lr
   1c966:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1c96a:	4770      	bx	lr
   1c96c:	ffff8fea 	.word	0xffff8fea
   1c970:	ffff8fe9 	.word	0xffff8fe9

0001c974 <mutex_init>:
   1c974:	b510      	push	{r4, lr}
   1c976:	4604      	mov	r4, r0
   1c978:	b120      	cbz	r0, 1c984 <mutex_init+0x10>
   1c97a:	2200      	movs	r2, #0
   1c97c:	2311      	movs	r3, #17
   1c97e:	6022      	str	r2, [r4, #0]
   1c980:	6063      	str	r3, [r4, #4]
   1c982:	bd10      	pop	{r4, pc}
   1c984:	4801      	ldr	r0, [pc, #4]	; (1c98c <mutex_init+0x18>)
   1c986:	f7ff ff35 	bl	1c7f4 <CC_PalAbort>
   1c98a:	e7f6      	b.n	1c97a <mutex_init+0x6>
   1c98c:	00024a80 	.word	0x00024a80

0001c990 <nrf_cc3xx_platform_set_mutexes>:
   1c990:	b570      	push	{r4, r5, r6, lr}
   1c992:	e9d0 2300 	ldrd	r2, r3, [r0]
   1c996:	4c13      	ldr	r4, [pc, #76]	; (1c9e4 <nrf_cc3xx_platform_set_mutexes+0x54>)
   1c998:	4d13      	ldr	r5, [pc, #76]	; (1c9e8 <nrf_cc3xx_platform_set_mutexes+0x58>)
   1c99a:	6063      	str	r3, [r4, #4]
   1c99c:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   1c9a0:	e9c4 3002 	strd	r3, r0, [r4, #8]
   1c9a4:	6022      	str	r2, [r4, #0]
   1c9a6:	4b11      	ldr	r3, [pc, #68]	; (1c9ec <nrf_cc3xx_platform_set_mutexes+0x5c>)
   1c9a8:	6808      	ldr	r0, [r1, #0]
   1c9aa:	6018      	str	r0, [r3, #0]
   1c9ac:	6848      	ldr	r0, [r1, #4]
   1c9ae:	6058      	str	r0, [r3, #4]
   1c9b0:	6888      	ldr	r0, [r1, #8]
   1c9b2:	6098      	str	r0, [r3, #8]
   1c9b4:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   1c9b8:	60d8      	str	r0, [r3, #12]
   1c9ba:	6119      	str	r1, [r3, #16]
   1c9bc:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   1c9c0:	06db      	lsls	r3, r3, #27
   1c9c2:	d50d      	bpl.n	1c9e0 <nrf_cc3xx_platform_set_mutexes+0x50>
   1c9c4:	2300      	movs	r3, #0
   1c9c6:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
   1c9ca:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
   1c9ce:	f505 708a 	add.w	r0, r5, #276	; 0x114
   1c9d2:	4790      	blx	r2
   1c9d4:	6823      	ldr	r3, [r4, #0]
   1c9d6:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   1c9da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c9de:	4718      	bx	r3
   1c9e0:	bd70      	pop	{r4, r5, r6, pc}
   1c9e2:	bf00      	nop
   1c9e4:	200008cc 	.word	0x200008cc
   1c9e8:	20002ae4 	.word	0x20002ae4
   1c9ec:	200008dc 	.word	0x200008dc

0001c9f0 <mbedtls_zeroize_internal>:
   1c9f0:	b138      	cbz	r0, 1ca02 <mbedtls_zeroize_internal+0x12>
   1c9f2:	b131      	cbz	r1, 1ca02 <mbedtls_zeroize_internal+0x12>
   1c9f4:	4401      	add	r1, r0
   1c9f6:	2200      	movs	r2, #0
   1c9f8:	4603      	mov	r3, r0
   1c9fa:	3001      	adds	r0, #1
   1c9fc:	4281      	cmp	r1, r0
   1c9fe:	701a      	strb	r2, [r3, #0]
   1ca00:	d1fa      	bne.n	1c9f8 <mbedtls_zeroize_internal+0x8>
   1ca02:	4770      	bx	lr

0001ca04 <mbedtls_platform_zeroize>:
   1ca04:	b138      	cbz	r0, 1ca16 <mbedtls_platform_zeroize+0x12>
   1ca06:	b131      	cbz	r1, 1ca16 <mbedtls_platform_zeroize+0x12>
   1ca08:	4401      	add	r1, r0
   1ca0a:	2200      	movs	r2, #0
   1ca0c:	4603      	mov	r3, r0
   1ca0e:	3001      	adds	r0, #1
   1ca10:	4288      	cmp	r0, r1
   1ca12:	701a      	strb	r2, [r3, #0]
   1ca14:	d1fa      	bne.n	1ca0c <mbedtls_platform_zeroize+0x8>
   1ca16:	4770      	bx	lr

0001ca18 <block_cipher_df>:
   1ca18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca1c:	b0b7      	sub	sp, #220	; 0xdc
   1ca1e:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   1ca22:	9005      	str	r0, [sp, #20]
   1ca24:	f200 8147 	bhi.w	1ccb6 <block_cipher_df+0x29e>
   1ca28:	4614      	mov	r4, r2
   1ca2a:	460d      	mov	r5, r1
   1ca2c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1ca30:	2100      	movs	r1, #0
   1ca32:	48a2      	ldr	r0, [pc, #648]	; (1ccbc <block_cipher_df+0x2a4>)
   1ca34:	f003 fd97 	bl	20566 <memset>
   1ca38:	a819      	add	r0, sp, #100	; 0x64
   1ca3a:	f001 f9c1 	bl	1ddc0 <cc_mbedtls_aes_init>
   1ca3e:	489f      	ldr	r0, [pc, #636]	; (1ccbc <block_cipher_df+0x2a4>)
   1ca40:	2300      	movs	r3, #0
   1ca42:	8203      	strh	r3, [r0, #16]
   1ca44:	ba63      	rev16	r3, r4
   1ca46:	8243      	strh	r3, [r0, #18]
   1ca48:	2320      	movs	r3, #32
   1ca4a:	4629      	mov	r1, r5
   1ca4c:	75c3      	strb	r3, [r0, #23]
   1ca4e:	4605      	mov	r5, r0
   1ca50:	4622      	mov	r2, r4
   1ca52:	3018      	adds	r0, #24
   1ca54:	f003 fd7c 	bl	20550 <memcpy>
   1ca58:	462b      	mov	r3, r5
   1ca5a:	4423      	add	r3, r4
   1ca5c:	2280      	movs	r2, #128	; 0x80
   1ca5e:	761a      	strb	r2, [r3, #24]
   1ca60:	4b97      	ldr	r3, [pc, #604]	; (1ccc0 <block_cipher_df+0x2a8>)
   1ca62:	930d      	str	r3, [sp, #52]	; 0x34
   1ca64:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   1ca68:	930e      	str	r3, [sp, #56]	; 0x38
   1ca6a:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   1ca6e:	930f      	str	r3, [sp, #60]	; 0x3c
   1ca70:	a90d      	add	r1, sp, #52	; 0x34
   1ca72:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   1ca76:	a819      	add	r0, sp, #100	; 0x64
   1ca78:	9310      	str	r3, [sp, #64]	; 0x40
   1ca7a:	f001 f9b7 	bl	1ddec <cc_mbedtls_aes_setkey_enc>
   1ca7e:	4605      	mov	r5, r0
   1ca80:	2800      	cmp	r0, #0
   1ca82:	f040 80f4 	bne.w	1cc6e <block_cipher_df+0x256>
   1ca86:	f104 0319 	add.w	r3, r4, #25
   1ca8a:	9306      	str	r3, [sp, #24]
   1ca8c:	f10d 0820 	add.w	r8, sp, #32
   1ca90:	ab11      	add	r3, sp, #68	; 0x44
   1ca92:	9304      	str	r3, [sp, #16]
   1ca94:	9307      	str	r3, [sp, #28]
   1ca96:	46c1      	mov	r9, r8
   1ca98:	2210      	movs	r2, #16
   1ca9a:	2100      	movs	r1, #0
   1ca9c:	4648      	mov	r0, r9
   1ca9e:	f003 fd62 	bl	20566 <memset>
   1caa2:	f8df a220 	ldr.w	sl, [pc, #544]	; 1ccc4 <block_cipher_df+0x2ac>
   1caa6:	9b06      	ldr	r3, [sp, #24]
   1caa8:	9300      	str	r3, [sp, #0]
   1caaa:	f8cd 900c 	str.w	r9, [sp, #12]
   1caae:	f81a 0c08 	ldrb.w	r0, [sl, #-8]
   1cab2:	f81a 3c07 	ldrb.w	r3, [sl, #-7]
   1cab6:	f81a 2c10 	ldrb.w	r2, [sl, #-16]
   1caba:	f89d 5020 	ldrb.w	r5, [sp, #32]
   1cabe:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
   1cac2:	f89d c029 	ldrb.w	ip, [sp, #41]	; 0x29
   1cac6:	f81a 6c04 	ldrb.w	r6, [sl, #-4]
   1caca:	f81a 1c0c 	ldrb.w	r1, [sl, #-12]
   1cace:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   1cad2:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
   1cad6:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
   1cada:	406a      	eors	r2, r5
   1cadc:	ea8e 0e00 	eor.w	lr, lr, r0
   1cae0:	9d00      	ldr	r5, [sp, #0]
   1cae2:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
   1cae6:	9202      	str	r2, [sp, #8]
   1cae8:	ea8c 0c03 	eor.w	ip, ip, r3
   1caec:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
   1caf0:	f81a 2c0f 	ldrb.w	r2, [sl, #-15]
   1caf4:	2d10      	cmp	r5, #16
   1caf6:	ea80 0003 	eor.w	r0, r0, r3
   1cafa:	462b      	mov	r3, r5
   1cafc:	bf8c      	ite	hi
   1cafe:	3b10      	subhi	r3, #16
   1cb00:	1b6b      	subls	r3, r5, r5
   1cb02:	9300      	str	r3, [sp, #0]
   1cb04:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
   1cb08:	f81a 3c03 	ldrb.w	r3, [sl, #-3]
   1cb0c:	f81a 9c0e 	ldrb.w	r9, [sl, #-14]
   1cb10:	f81a 8c0a 	ldrb.w	r8, [sl, #-10]
   1cb14:	4061      	eors	r1, r4
   1cb16:	405f      	eors	r7, r3
   1cb18:	2400      	movs	r4, #0
   1cb1a:	406a      	eors	r2, r5
   1cb1c:	ea8b 0b06 	eor.w	fp, fp, r6
   1cb20:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
   1cb24:	f81a 6c02 	ldrb.w	r6, [sl, #-2]
   1cb28:	f81a 3c0b 	ldrb.w	r3, [sl, #-11]
   1cb2c:	9601      	str	r6, [sp, #4]
   1cb2e:	4626      	mov	r6, r4
   1cb30:	406b      	eors	r3, r5
   1cb32:	f36b 0607 	bfi	r6, fp, #0, #8
   1cb36:	4625      	mov	r5, r4
   1cb38:	f367 260f 	bfi	r6, r7, #8, #8
   1cb3c:	462f      	mov	r7, r5
   1cb3e:	f361 0707 	bfi	r7, r1, #0, #8
   1cb42:	9902      	ldr	r1, [sp, #8]
   1cb44:	f361 0507 	bfi	r5, r1, #0, #8
   1cb48:	f362 250f 	bfi	r5, r2, #8, #8
   1cb4c:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1cb50:	f81a 1c0d 	ldrb.w	r1, [sl, #-13]
   1cb54:	f363 270f 	bfi	r7, r3, #8, #8
   1cb58:	ea82 0909 	eor.w	r9, r2, r9
   1cb5c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1cb60:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   1cb64:	ea83 0808 	eor.w	r8, r3, r8
   1cb68:	404a      	eors	r2, r1
   1cb6a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1cb6e:	f81a 1c09 	ldrb.w	r1, [sl, #-9]
   1cb72:	f36e 0407 	bfi	r4, lr, #0, #8
   1cb76:	404b      	eors	r3, r1
   1cb78:	f368 4717 	bfi	r7, r8, #16, #8
   1cb7c:	f36c 240f 	bfi	r4, ip, #8, #8
   1cb80:	f363 671f 	bfi	r7, r3, #24, #8
   1cb84:	9b03      	ldr	r3, [sp, #12]
   1cb86:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
   1cb8a:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cb8e:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
   1cb92:	ea8c 0c0e 	eor.w	ip, ip, lr
   1cb96:	f36c 4617 	bfi	r6, ip, #16, #8
   1cb9a:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
   1cb9e:	f81a ec05 	ldrb.w	lr, [sl, #-5]
   1cba2:	ea8c 0c08 	eor.w	ip, ip, r8
   1cba6:	f36c 661f 	bfi	r6, ip, #24, #8
   1cbaa:	f369 4517 	bfi	r5, r9, #16, #8
   1cbae:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
   1cbb2:	960b      	str	r6, [sp, #44]	; 0x2c
   1cbb4:	f362 651f 	bfi	r5, r2, #24, #8
   1cbb8:	f360 4417 	bfi	r4, r0, #16, #8
   1cbbc:	9508      	str	r5, [sp, #32]
   1cbbe:	ea8c 050e 	eor.w	r5, ip, lr
   1cbc2:	f365 641f 	bfi	r4, r5, #24, #8
   1cbc6:	461a      	mov	r2, r3
   1cbc8:	2101      	movs	r1, #1
   1cbca:	a819      	add	r0, sp, #100	; 0x64
   1cbcc:	f10a 0a10 	add.w	sl, sl, #16
   1cbd0:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
   1cbd4:	f001 f924 	bl	1de20 <cc_mbedtls_aes_crypt_ecb>
   1cbd8:	2800      	cmp	r0, #0
   1cbda:	d168      	bne.n	1ccae <block_cipher_df+0x296>
   1cbdc:	9b00      	ldr	r3, [sp, #0]
   1cbde:	2b00      	cmp	r3, #0
   1cbe0:	f47f af65 	bne.w	1caae <block_cipher_df+0x96>
   1cbe4:	9c07      	ldr	r4, [sp, #28]
   1cbe6:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1cbea:	4620      	mov	r0, r4
   1cbec:	2210      	movs	r2, #16
   1cbee:	3410      	adds	r4, #16
   1cbf0:	4649      	mov	r1, r9
   1cbf2:	9407      	str	r4, [sp, #28]
   1cbf4:	f003 fcac 	bl	20550 <memcpy>
   1cbf8:	4a30      	ldr	r2, [pc, #192]	; (1ccbc <block_cipher_df+0x2a4>)
   1cbfa:	78d3      	ldrb	r3, [r2, #3]
   1cbfc:	3301      	adds	r3, #1
   1cbfe:	70d3      	strb	r3, [r2, #3]
   1cc00:	ab19      	add	r3, sp, #100	; 0x64
   1cc02:	429c      	cmp	r4, r3
   1cc04:	f47f af48 	bne.w	1ca98 <block_cipher_df+0x80>
   1cc08:	9904      	ldr	r1, [sp, #16]
   1cc0a:	2280      	movs	r2, #128	; 0x80
   1cc0c:	4618      	mov	r0, r3
   1cc0e:	f001 f8ed 	bl	1ddec <cc_mbedtls_aes_setkey_enc>
   1cc12:	46c8      	mov	r8, r9
   1cc14:	4605      	mov	r5, r0
   1cc16:	bb70      	cbnz	r0, 1cc76 <block_cipher_df+0x25e>
   1cc18:	9c05      	ldr	r4, [sp, #20]
   1cc1a:	f104 0620 	add.w	r6, r4, #32
   1cc1e:	ab15      	add	r3, sp, #84	; 0x54
   1cc20:	461a      	mov	r2, r3
   1cc22:	2101      	movs	r1, #1
   1cc24:	a819      	add	r0, sp, #100	; 0x64
   1cc26:	f001 f8fb 	bl	1de20 <cc_mbedtls_aes_crypt_ecb>
   1cc2a:	2210      	movs	r2, #16
   1cc2c:	4605      	mov	r5, r0
   1cc2e:	bb10      	cbnz	r0, 1cc76 <block_cipher_df+0x25e>
   1cc30:	4620      	mov	r0, r4
   1cc32:	a915      	add	r1, sp, #84	; 0x54
   1cc34:	3410      	adds	r4, #16
   1cc36:	f003 fc8b 	bl	20550 <memcpy>
   1cc3a:	42b4      	cmp	r4, r6
   1cc3c:	d1ef      	bne.n	1cc1e <block_cipher_df+0x206>
   1cc3e:	a819      	add	r0, sp, #100	; 0x64
   1cc40:	f001 f8ce 	bl	1dde0 <cc_mbedtls_aes_free>
   1cc44:	481d      	ldr	r0, [pc, #116]	; (1ccbc <block_cipher_df+0x2a4>)
   1cc46:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1cc4a:	f7ff fedb 	bl	1ca04 <mbedtls_platform_zeroize>
   1cc4e:	9804      	ldr	r0, [sp, #16]
   1cc50:	2120      	movs	r1, #32
   1cc52:	f7ff fed7 	bl	1ca04 <mbedtls_platform_zeroize>
   1cc56:	a80d      	add	r0, sp, #52	; 0x34
   1cc58:	2110      	movs	r1, #16
   1cc5a:	f7ff fed3 	bl	1ca04 <mbedtls_platform_zeroize>
   1cc5e:	4640      	mov	r0, r8
   1cc60:	2110      	movs	r1, #16
   1cc62:	f7ff fecf 	bl	1ca04 <mbedtls_platform_zeroize>
   1cc66:	4628      	mov	r0, r5
   1cc68:	b037      	add	sp, #220	; 0xdc
   1cc6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc6e:	ab11      	add	r3, sp, #68	; 0x44
   1cc70:	9304      	str	r3, [sp, #16]
   1cc72:	f10d 0820 	add.w	r8, sp, #32
   1cc76:	a819      	add	r0, sp, #100	; 0x64
   1cc78:	f001 f8b2 	bl	1dde0 <cc_mbedtls_aes_free>
   1cc7c:	480f      	ldr	r0, [pc, #60]	; (1ccbc <block_cipher_df+0x2a4>)
   1cc7e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1cc82:	f7ff febf 	bl	1ca04 <mbedtls_platform_zeroize>
   1cc86:	9804      	ldr	r0, [sp, #16]
   1cc88:	2120      	movs	r1, #32
   1cc8a:	f7ff febb 	bl	1ca04 <mbedtls_platform_zeroize>
   1cc8e:	a80d      	add	r0, sp, #52	; 0x34
   1cc90:	2110      	movs	r1, #16
   1cc92:	f7ff feb7 	bl	1ca04 <mbedtls_platform_zeroize>
   1cc96:	4640      	mov	r0, r8
   1cc98:	2110      	movs	r1, #16
   1cc9a:	f7ff feb3 	bl	1ca04 <mbedtls_platform_zeroize>
   1cc9e:	9805      	ldr	r0, [sp, #20]
   1cca0:	2120      	movs	r1, #32
   1cca2:	f7ff feaf 	bl	1ca04 <mbedtls_platform_zeroize>
   1cca6:	4628      	mov	r0, r5
   1cca8:	b037      	add	sp, #220	; 0xdc
   1ccaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ccae:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1ccb2:	4605      	mov	r5, r0
   1ccb4:	e7df      	b.n	1cc76 <block_cipher_df+0x25e>
   1ccb6:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1ccba:	e7f4      	b.n	1cca6 <block_cipher_df+0x28e>
   1ccbc:	20002cb4 	.word	0x20002cb4
   1ccc0:	03020100 	.word	0x03020100
   1ccc4:	20002cc4 	.word	0x20002cc4

0001ccc8 <ctr_drbg_update_internal>:
   1ccc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cccc:	b088      	sub	sp, #32
   1ccce:	4604      	mov	r4, r0
   1ccd0:	460d      	mov	r5, r1
   1ccd2:	2220      	movs	r2, #32
   1ccd4:	2100      	movs	r1, #0
   1ccd6:	4668      	mov	r0, sp
   1ccd8:	f003 fc45 	bl	20566 <memset>
   1ccdc:	f104 0620 	add.w	r6, r4, #32
   1cce0:	466f      	mov	r7, sp
   1cce2:	7be2      	ldrb	r2, [r4, #15]
   1cce4:	3201      	adds	r2, #1
   1cce6:	b2d2      	uxtb	r2, r2
   1cce8:	73e2      	strb	r2, [r4, #15]
   1ccea:	2a00      	cmp	r2, #0
   1ccec:	d14d      	bne.n	1cd8a <ctr_drbg_update_internal+0xc2>
   1ccee:	7ba2      	ldrb	r2, [r4, #14]
   1ccf0:	3201      	adds	r2, #1
   1ccf2:	b2d2      	uxtb	r2, r2
   1ccf4:	73a2      	strb	r2, [r4, #14]
   1ccf6:	2a00      	cmp	r2, #0
   1ccf8:	d147      	bne.n	1cd8a <ctr_drbg_update_internal+0xc2>
   1ccfa:	7b63      	ldrb	r3, [r4, #13]
   1ccfc:	3301      	adds	r3, #1
   1ccfe:	b2db      	uxtb	r3, r3
   1cd00:	7363      	strb	r3, [r4, #13]
   1cd02:	2b00      	cmp	r3, #0
   1cd04:	d141      	bne.n	1cd8a <ctr_drbg_update_internal+0xc2>
   1cd06:	7b23      	ldrb	r3, [r4, #12]
   1cd08:	3301      	adds	r3, #1
   1cd0a:	b2db      	uxtb	r3, r3
   1cd0c:	7323      	strb	r3, [r4, #12]
   1cd0e:	2b00      	cmp	r3, #0
   1cd10:	d13b      	bne.n	1cd8a <ctr_drbg_update_internal+0xc2>
   1cd12:	7ae3      	ldrb	r3, [r4, #11]
   1cd14:	3301      	adds	r3, #1
   1cd16:	b2db      	uxtb	r3, r3
   1cd18:	72e3      	strb	r3, [r4, #11]
   1cd1a:	2b00      	cmp	r3, #0
   1cd1c:	d135      	bne.n	1cd8a <ctr_drbg_update_internal+0xc2>
   1cd1e:	7aa3      	ldrb	r3, [r4, #10]
   1cd20:	3301      	adds	r3, #1
   1cd22:	b2db      	uxtb	r3, r3
   1cd24:	72a3      	strb	r3, [r4, #10]
   1cd26:	2b00      	cmp	r3, #0
   1cd28:	d12f      	bne.n	1cd8a <ctr_drbg_update_internal+0xc2>
   1cd2a:	7a63      	ldrb	r3, [r4, #9]
   1cd2c:	3301      	adds	r3, #1
   1cd2e:	b2db      	uxtb	r3, r3
   1cd30:	7263      	strb	r3, [r4, #9]
   1cd32:	bb53      	cbnz	r3, 1cd8a <ctr_drbg_update_internal+0xc2>
   1cd34:	7a23      	ldrb	r3, [r4, #8]
   1cd36:	3301      	adds	r3, #1
   1cd38:	b2db      	uxtb	r3, r3
   1cd3a:	7223      	strb	r3, [r4, #8]
   1cd3c:	bb2b      	cbnz	r3, 1cd8a <ctr_drbg_update_internal+0xc2>
   1cd3e:	79e3      	ldrb	r3, [r4, #7]
   1cd40:	3301      	adds	r3, #1
   1cd42:	b2db      	uxtb	r3, r3
   1cd44:	71e3      	strb	r3, [r4, #7]
   1cd46:	bb03      	cbnz	r3, 1cd8a <ctr_drbg_update_internal+0xc2>
   1cd48:	79a3      	ldrb	r3, [r4, #6]
   1cd4a:	3301      	adds	r3, #1
   1cd4c:	b2db      	uxtb	r3, r3
   1cd4e:	71a3      	strb	r3, [r4, #6]
   1cd50:	b9db      	cbnz	r3, 1cd8a <ctr_drbg_update_internal+0xc2>
   1cd52:	7963      	ldrb	r3, [r4, #5]
   1cd54:	3301      	adds	r3, #1
   1cd56:	b2db      	uxtb	r3, r3
   1cd58:	7163      	strb	r3, [r4, #5]
   1cd5a:	b9b3      	cbnz	r3, 1cd8a <ctr_drbg_update_internal+0xc2>
   1cd5c:	7923      	ldrb	r3, [r4, #4]
   1cd5e:	3301      	adds	r3, #1
   1cd60:	b2db      	uxtb	r3, r3
   1cd62:	7123      	strb	r3, [r4, #4]
   1cd64:	b98b      	cbnz	r3, 1cd8a <ctr_drbg_update_internal+0xc2>
   1cd66:	78e3      	ldrb	r3, [r4, #3]
   1cd68:	3301      	adds	r3, #1
   1cd6a:	b2db      	uxtb	r3, r3
   1cd6c:	70e3      	strb	r3, [r4, #3]
   1cd6e:	b963      	cbnz	r3, 1cd8a <ctr_drbg_update_internal+0xc2>
   1cd70:	78a3      	ldrb	r3, [r4, #2]
   1cd72:	3301      	adds	r3, #1
   1cd74:	b2db      	uxtb	r3, r3
   1cd76:	70a3      	strb	r3, [r4, #2]
   1cd78:	b93b      	cbnz	r3, 1cd8a <ctr_drbg_update_internal+0xc2>
   1cd7a:	7863      	ldrb	r3, [r4, #1]
   1cd7c:	3301      	adds	r3, #1
   1cd7e:	b2db      	uxtb	r3, r3
   1cd80:	7063      	strb	r3, [r4, #1]
   1cd82:	b913      	cbnz	r3, 1cd8a <ctr_drbg_update_internal+0xc2>
   1cd84:	7823      	ldrb	r3, [r4, #0]
   1cd86:	3301      	adds	r3, #1
   1cd88:	7023      	strb	r3, [r4, #0]
   1cd8a:	463b      	mov	r3, r7
   1cd8c:	4622      	mov	r2, r4
   1cd8e:	2101      	movs	r1, #1
   1cd90:	4630      	mov	r0, r6
   1cd92:	f001 f845 	bl	1de20 <cc_mbedtls_aes_crypt_ecb>
   1cd96:	4680      	mov	r8, r0
   1cd98:	bb50      	cbnz	r0, 1cdf0 <ctr_drbg_update_internal+0x128>
   1cd9a:	3710      	adds	r7, #16
   1cd9c:	ab08      	add	r3, sp, #32
   1cd9e:	429f      	cmp	r7, r3
   1cda0:	d19f      	bne.n	1cce2 <ctr_drbg_update_internal+0x1a>
   1cda2:	9a00      	ldr	r2, [sp, #0]
   1cda4:	682b      	ldr	r3, [r5, #0]
   1cda6:	9906      	ldr	r1, [sp, #24]
   1cda8:	4053      	eors	r3, r2
   1cdaa:	9300      	str	r3, [sp, #0]
   1cdac:	9a01      	ldr	r2, [sp, #4]
   1cdae:	686b      	ldr	r3, [r5, #4]
   1cdb0:	4053      	eors	r3, r2
   1cdb2:	9301      	str	r3, [sp, #4]
   1cdb4:	9a02      	ldr	r2, [sp, #8]
   1cdb6:	68ab      	ldr	r3, [r5, #8]
   1cdb8:	4053      	eors	r3, r2
   1cdba:	9302      	str	r3, [sp, #8]
   1cdbc:	9a03      	ldr	r2, [sp, #12]
   1cdbe:	68eb      	ldr	r3, [r5, #12]
   1cdc0:	4053      	eors	r3, r2
   1cdc2:	9303      	str	r3, [sp, #12]
   1cdc4:	9a04      	ldr	r2, [sp, #16]
   1cdc6:	692b      	ldr	r3, [r5, #16]
   1cdc8:	4053      	eors	r3, r2
   1cdca:	9304      	str	r3, [sp, #16]
   1cdcc:	9a05      	ldr	r2, [sp, #20]
   1cdce:	696b      	ldr	r3, [r5, #20]
   1cdd0:	4053      	eors	r3, r2
   1cdd2:	69aa      	ldr	r2, [r5, #24]
   1cdd4:	9305      	str	r3, [sp, #20]
   1cdd6:	404a      	eors	r2, r1
   1cdd8:	69eb      	ldr	r3, [r5, #28]
   1cdda:	9206      	str	r2, [sp, #24]
   1cddc:	9a07      	ldr	r2, [sp, #28]
   1cdde:	4630      	mov	r0, r6
   1cde0:	4053      	eors	r3, r2
   1cde2:	4669      	mov	r1, sp
   1cde4:	2280      	movs	r2, #128	; 0x80
   1cde6:	9307      	str	r3, [sp, #28]
   1cde8:	f001 f800 	bl	1ddec <cc_mbedtls_aes_setkey_enc>
   1cdec:	4680      	mov	r8, r0
   1cdee:	b138      	cbz	r0, 1ce00 <ctr_drbg_update_internal+0x138>
   1cdf0:	4668      	mov	r0, sp
   1cdf2:	2120      	movs	r1, #32
   1cdf4:	f7ff fe06 	bl	1ca04 <mbedtls_platform_zeroize>
   1cdf8:	4640      	mov	r0, r8
   1cdfa:	b008      	add	sp, #32
   1cdfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ce00:	2210      	movs	r2, #16
   1ce02:	eb0d 0102 	add.w	r1, sp, r2
   1ce06:	4620      	mov	r0, r4
   1ce08:	f003 fba2 	bl	20550 <memcpy>
   1ce0c:	e7f0      	b.n	1cdf0 <ctr_drbg_update_internal+0x128>
   1ce0e:	bf00      	nop

0001ce10 <mbedtls_ctr_drbg_reseed_internal>:
   1ce10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ce14:	4604      	mov	r4, r0
   1ce16:	6980      	ldr	r0, [r0, #24]
   1ce18:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   1ce1c:	d852      	bhi.n	1cec4 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1ce1e:	461d      	mov	r5, r3
   1ce20:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   1ce24:	42ab      	cmp	r3, r5
   1ce26:	d34d      	bcc.n	1cec4 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1ce28:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   1ce2c:	1a18      	subs	r0, r3, r0
   1ce2e:	4290      	cmp	r0, r2
   1ce30:	4616      	mov	r6, r2
   1ce32:	d347      	bcc.n	1cec4 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1ce34:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1ced0 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   1ce38:	f44f 72c0 	mov.w	r2, #384	; 0x180
   1ce3c:	460f      	mov	r7, r1
   1ce3e:	4648      	mov	r0, r9
   1ce40:	2100      	movs	r1, #0
   1ce42:	f003 fb90 	bl	20566 <memset>
   1ce46:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1ce4a:	69a2      	ldr	r2, [r4, #24]
   1ce4c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1ce50:	4649      	mov	r1, r9
   1ce52:	4798      	blx	r3
   1ce54:	2800      	cmp	r0, #0
   1ce56:	d138      	bne.n	1ceca <mbedtls_ctr_drbg_reseed_internal+0xba>
   1ce58:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1ce5c:	b13d      	cbz	r5, 1ce6e <mbedtls_ctr_drbg_reseed_internal+0x5e>
   1ce5e:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   1ce62:	462a      	mov	r2, r5
   1ce64:	eb09 0108 	add.w	r1, r9, r8
   1ce68:	4798      	blx	r3
   1ce6a:	bb70      	cbnz	r0, 1ceca <mbedtls_ctr_drbg_reseed_internal+0xba>
   1ce6c:	44a8      	add	r8, r5
   1ce6e:	b107      	cbz	r7, 1ce72 <mbedtls_ctr_drbg_reseed_internal+0x62>
   1ce70:	b9c6      	cbnz	r6, 1cea4 <mbedtls_ctr_drbg_reseed_internal+0x94>
   1ce72:	4917      	ldr	r1, [pc, #92]	; (1ced0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1ce74:	4642      	mov	r2, r8
   1ce76:	4608      	mov	r0, r1
   1ce78:	f7ff fdce 	bl	1ca18 <block_cipher_df>
   1ce7c:	4605      	mov	r5, r0
   1ce7e:	b138      	cbz	r0, 1ce90 <mbedtls_ctr_drbg_reseed_internal+0x80>
   1ce80:	4813      	ldr	r0, [pc, #76]	; (1ced0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1ce82:	f44f 71c0 	mov.w	r1, #384	; 0x180
   1ce86:	f7ff fdbd 	bl	1ca04 <mbedtls_platform_zeroize>
   1ce8a:	4628      	mov	r0, r5
   1ce8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ce90:	490f      	ldr	r1, [pc, #60]	; (1ced0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1ce92:	4620      	mov	r0, r4
   1ce94:	f7ff ff18 	bl	1ccc8 <ctr_drbg_update_internal>
   1ce98:	4605      	mov	r5, r0
   1ce9a:	2800      	cmp	r0, #0
   1ce9c:	d1f0      	bne.n	1ce80 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1ce9e:	2301      	movs	r3, #1
   1cea0:	6123      	str	r3, [r4, #16]
   1cea2:	e7ed      	b.n	1ce80 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1cea4:	eb09 0008 	add.w	r0, r9, r8
   1cea8:	4639      	mov	r1, r7
   1ceaa:	4632      	mov	r2, r6
   1ceac:	f003 fb50 	bl	20550 <memcpy>
   1ceb0:	4907      	ldr	r1, [pc, #28]	; (1ced0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1ceb2:	44b0      	add	r8, r6
   1ceb4:	4642      	mov	r2, r8
   1ceb6:	4608      	mov	r0, r1
   1ceb8:	f7ff fdae 	bl	1ca18 <block_cipher_df>
   1cebc:	4605      	mov	r5, r0
   1cebe:	2800      	cmp	r0, #0
   1cec0:	d1de      	bne.n	1ce80 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1cec2:	e7e5      	b.n	1ce90 <mbedtls_ctr_drbg_reseed_internal+0x80>
   1cec4:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1cec8:	e7df      	b.n	1ce8a <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1ceca:	f06f 0533 	mvn.w	r5, #51	; 0x33
   1cece:	e7dc      	b.n	1ce8a <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1ced0:	20002e54 	.word	0x20002e54

0001ced4 <cc_mbedtls_ctr_drbg_init>:
   1ced4:	b510      	push	{r4, lr}
   1ced6:	22a4      	movs	r2, #164	; 0xa4
   1ced8:	4604      	mov	r4, r0
   1ceda:	2100      	movs	r1, #0
   1cedc:	f003 fb43 	bl	20566 <memset>
   1cee0:	4b06      	ldr	r3, [pc, #24]	; (1cefc <cc_mbedtls_ctr_drbg_init+0x28>)
   1cee2:	f04f 31ff 	mov.w	r1, #4294967295
   1cee6:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   1ceea:	6121      	str	r1, [r4, #16]
   1ceec:	61e2      	str	r2, [r4, #28]
   1ceee:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1cef2:	681b      	ldr	r3, [r3, #0]
   1cef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cef8:	4718      	bx	r3
   1cefa:	bf00      	nop
   1cefc:	20000920 	.word	0x20000920

0001cf00 <cc_mbedtls_ctr_drbg_seed>:
   1cf00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cf04:	b085      	sub	sp, #20
   1cf06:	4605      	mov	r5, r0
   1cf08:	460f      	mov	r7, r1
   1cf0a:	4616      	mov	r6, r2
   1cf0c:	2100      	movs	r1, #0
   1cf0e:	2210      	movs	r2, #16
   1cf10:	4668      	mov	r0, sp
   1cf12:	4699      	mov	r9, r3
   1cf14:	f003 fb27 	bl	20566 <memset>
   1cf18:	4b1e      	ldr	r3, [pc, #120]	; (1cf94 <cc_mbedtls_ctr_drbg_seed+0x94>)
   1cf1a:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   1cf1e:	681b      	ldr	r3, [r3, #0]
   1cf20:	4640      	mov	r0, r8
   1cf22:	4798      	blx	r3
   1cf24:	b120      	cbz	r0, 1cf30 <cc_mbedtls_ctr_drbg_seed+0x30>
   1cf26:	4604      	mov	r4, r0
   1cf28:	4620      	mov	r0, r4
   1cf2a:	b005      	add	sp, #20
   1cf2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cf30:	f105 0420 	add.w	r4, r5, #32
   1cf34:	4620      	mov	r0, r4
   1cf36:	f000 ff43 	bl	1ddc0 <cc_mbedtls_aes_init>
   1cf3a:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   1cf3e:	69ae      	ldr	r6, [r5, #24]
   1cf40:	692b      	ldr	r3, [r5, #16]
   1cf42:	b9ee      	cbnz	r6, 1cf80 <cc_mbedtls_ctr_drbg_seed+0x80>
   1cf44:	2220      	movs	r2, #32
   1cf46:	2b00      	cmp	r3, #0
   1cf48:	61aa      	str	r2, [r5, #24]
   1cf4a:	db20      	blt.n	1cf8e <cc_mbedtls_ctr_drbg_seed+0x8e>
   1cf4c:	461e      	mov	r6, r3
   1cf4e:	4620      	mov	r0, r4
   1cf50:	4669      	mov	r1, sp
   1cf52:	2280      	movs	r2, #128	; 0x80
   1cf54:	f000 ff4a 	bl	1ddec <cc_mbedtls_aes_setkey_enc>
   1cf58:	4604      	mov	r4, r0
   1cf5a:	b930      	cbnz	r0, 1cf6a <cc_mbedtls_ctr_drbg_seed+0x6a>
   1cf5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1cf5e:	4633      	mov	r3, r6
   1cf60:	4649      	mov	r1, r9
   1cf62:	4628      	mov	r0, r5
   1cf64:	f7ff ff54 	bl	1ce10 <mbedtls_ctr_drbg_reseed_internal>
   1cf68:	4604      	mov	r4, r0
   1cf6a:	4b0b      	ldr	r3, [pc, #44]	; (1cf98 <cc_mbedtls_ctr_drbg_seed+0x98>)
   1cf6c:	4640      	mov	r0, r8
   1cf6e:	681b      	ldr	r3, [r3, #0]
   1cf70:	4798      	blx	r3
   1cf72:	2800      	cmp	r0, #0
   1cf74:	bf18      	it	ne
   1cf76:	4604      	movne	r4, r0
   1cf78:	4620      	mov	r0, r4
   1cf7a:	b005      	add	sp, #20
   1cf7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cf80:	2b00      	cmp	r3, #0
   1cf82:	dae3      	bge.n	1cf4c <cc_mbedtls_ctr_drbg_seed+0x4c>
   1cf84:	2e17      	cmp	r6, #23
   1cf86:	d802      	bhi.n	1cf8e <cc_mbedtls_ctr_drbg_seed+0x8e>
   1cf88:	3601      	adds	r6, #1
   1cf8a:	0876      	lsrs	r6, r6, #1
   1cf8c:	e7df      	b.n	1cf4e <cc_mbedtls_ctr_drbg_seed+0x4e>
   1cf8e:	2600      	movs	r6, #0
   1cf90:	e7dd      	b.n	1cf4e <cc_mbedtls_ctr_drbg_seed+0x4e>
   1cf92:	bf00      	nop
   1cf94:	20000924 	.word	0x20000924
   1cf98:	20000928 	.word	0x20000928

0001cf9c <cc_mbedtls_ctr_drbg_random_with_add>:
   1cf9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cfa0:	b08d      	sub	sp, #52	; 0x34
   1cfa2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1cfa6:	9f16      	ldr	r7, [sp, #88]	; 0x58
   1cfa8:	f200 80e3 	bhi.w	1d172 <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   1cfac:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   1cfb0:	f200 80dc 	bhi.w	1d16c <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   1cfb4:	4604      	mov	r4, r0
   1cfb6:	4615      	mov	r5, r2
   1cfb8:	460e      	mov	r6, r1
   1cfba:	2220      	movs	r2, #32
   1cfbc:	2100      	movs	r1, #0
   1cfbe:	a804      	add	r0, sp, #16
   1cfc0:	4698      	mov	r8, r3
   1cfc2:	f003 fad0 	bl	20566 <memset>
   1cfc6:	4b6c      	ldr	r3, [pc, #432]	; (1d178 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   1cfc8:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   1cfcc:	681b      	ldr	r3, [r3, #0]
   1cfce:	4648      	mov	r0, r9
   1cfd0:	4798      	blx	r3
   1cfd2:	4683      	mov	fp, r0
   1cfd4:	2800      	cmp	r0, #0
   1cfd6:	f040 8092 	bne.w	1d0fe <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1cfda:	6922      	ldr	r2, [r4, #16]
   1cfdc:	69e3      	ldr	r3, [r4, #28]
   1cfde:	429a      	cmp	r2, r3
   1cfe0:	f300 8091 	bgt.w	1d106 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   1cfe4:	6963      	ldr	r3, [r4, #20]
   1cfe6:	2b00      	cmp	r3, #0
   1cfe8:	f040 808d 	bne.w	1d106 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   1cfec:	2f00      	cmp	r7, #0
   1cfee:	f040 80a9 	bne.w	1d144 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   1cff2:	f8df a188 	ldr.w	sl, [pc, #392]	; 1d17c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1cff6:	466f      	mov	r7, sp
   1cff8:	2d00      	cmp	r5, #0
   1cffa:	f000 8098 	beq.w	1d12e <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   1cffe:	f104 0820 	add.w	r8, r4, #32
   1d002:	466f      	mov	r7, sp
   1d004:	e00e      	b.n	1d024 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   1d006:	2d10      	cmp	r5, #16
   1d008:	46ab      	mov	fp, r5
   1d00a:	bf28      	it	cs
   1d00c:	f04f 0b10 	movcs.w	fp, #16
   1d010:	4630      	mov	r0, r6
   1d012:	465a      	mov	r2, fp
   1d014:	4639      	mov	r1, r7
   1d016:	f003 fa9b 	bl	20550 <memcpy>
   1d01a:	ebb5 050b 	subs.w	r5, r5, fp
   1d01e:	445e      	add	r6, fp
   1d020:	f000 8085 	beq.w	1d12e <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   1d024:	7be3      	ldrb	r3, [r4, #15]
   1d026:	3301      	adds	r3, #1
   1d028:	b2db      	uxtb	r3, r3
   1d02a:	73e3      	strb	r3, [r4, #15]
   1d02c:	2b00      	cmp	r3, #0
   1d02e:	d14d      	bne.n	1d0cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d030:	7ba3      	ldrb	r3, [r4, #14]
   1d032:	3301      	adds	r3, #1
   1d034:	b2db      	uxtb	r3, r3
   1d036:	73a3      	strb	r3, [r4, #14]
   1d038:	2b00      	cmp	r3, #0
   1d03a:	d147      	bne.n	1d0cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d03c:	7b63      	ldrb	r3, [r4, #13]
   1d03e:	3301      	adds	r3, #1
   1d040:	b2db      	uxtb	r3, r3
   1d042:	7363      	strb	r3, [r4, #13]
   1d044:	2b00      	cmp	r3, #0
   1d046:	d141      	bne.n	1d0cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d048:	7b23      	ldrb	r3, [r4, #12]
   1d04a:	3301      	adds	r3, #1
   1d04c:	b2db      	uxtb	r3, r3
   1d04e:	7323      	strb	r3, [r4, #12]
   1d050:	2b00      	cmp	r3, #0
   1d052:	d13b      	bne.n	1d0cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d054:	7ae3      	ldrb	r3, [r4, #11]
   1d056:	3301      	adds	r3, #1
   1d058:	b2db      	uxtb	r3, r3
   1d05a:	72e3      	strb	r3, [r4, #11]
   1d05c:	2b00      	cmp	r3, #0
   1d05e:	d135      	bne.n	1d0cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d060:	7aa3      	ldrb	r3, [r4, #10]
   1d062:	3301      	adds	r3, #1
   1d064:	b2db      	uxtb	r3, r3
   1d066:	72a3      	strb	r3, [r4, #10]
   1d068:	2b00      	cmp	r3, #0
   1d06a:	d12f      	bne.n	1d0cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d06c:	7a63      	ldrb	r3, [r4, #9]
   1d06e:	3301      	adds	r3, #1
   1d070:	b2db      	uxtb	r3, r3
   1d072:	7263      	strb	r3, [r4, #9]
   1d074:	bb53      	cbnz	r3, 1d0cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d076:	7a23      	ldrb	r3, [r4, #8]
   1d078:	3301      	adds	r3, #1
   1d07a:	b2db      	uxtb	r3, r3
   1d07c:	7223      	strb	r3, [r4, #8]
   1d07e:	bb2b      	cbnz	r3, 1d0cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d080:	79e3      	ldrb	r3, [r4, #7]
   1d082:	3301      	adds	r3, #1
   1d084:	b2db      	uxtb	r3, r3
   1d086:	71e3      	strb	r3, [r4, #7]
   1d088:	bb03      	cbnz	r3, 1d0cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d08a:	79a3      	ldrb	r3, [r4, #6]
   1d08c:	3301      	adds	r3, #1
   1d08e:	b2db      	uxtb	r3, r3
   1d090:	71a3      	strb	r3, [r4, #6]
   1d092:	b9db      	cbnz	r3, 1d0cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d094:	7963      	ldrb	r3, [r4, #5]
   1d096:	3301      	adds	r3, #1
   1d098:	b2db      	uxtb	r3, r3
   1d09a:	7163      	strb	r3, [r4, #5]
   1d09c:	b9b3      	cbnz	r3, 1d0cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d09e:	7923      	ldrb	r3, [r4, #4]
   1d0a0:	3301      	adds	r3, #1
   1d0a2:	b2db      	uxtb	r3, r3
   1d0a4:	7123      	strb	r3, [r4, #4]
   1d0a6:	b98b      	cbnz	r3, 1d0cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d0a8:	78e3      	ldrb	r3, [r4, #3]
   1d0aa:	3301      	adds	r3, #1
   1d0ac:	b2db      	uxtb	r3, r3
   1d0ae:	70e3      	strb	r3, [r4, #3]
   1d0b0:	b963      	cbnz	r3, 1d0cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d0b2:	78a3      	ldrb	r3, [r4, #2]
   1d0b4:	3301      	adds	r3, #1
   1d0b6:	b2db      	uxtb	r3, r3
   1d0b8:	70a3      	strb	r3, [r4, #2]
   1d0ba:	b93b      	cbnz	r3, 1d0cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d0bc:	7863      	ldrb	r3, [r4, #1]
   1d0be:	3301      	adds	r3, #1
   1d0c0:	b2db      	uxtb	r3, r3
   1d0c2:	7063      	strb	r3, [r4, #1]
   1d0c4:	b913      	cbnz	r3, 1d0cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d0c6:	7823      	ldrb	r3, [r4, #0]
   1d0c8:	3301      	adds	r3, #1
   1d0ca:	7023      	strb	r3, [r4, #0]
   1d0cc:	463b      	mov	r3, r7
   1d0ce:	4622      	mov	r2, r4
   1d0d0:	2101      	movs	r1, #1
   1d0d2:	4640      	mov	r0, r8
   1d0d4:	f000 fea4 	bl	1de20 <cc_mbedtls_aes_crypt_ecb>
   1d0d8:	4683      	mov	fp, r0
   1d0da:	2800      	cmp	r0, #0
   1d0dc:	d093      	beq.n	1d006 <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   1d0de:	f8da 3000 	ldr.w	r3, [sl]
   1d0e2:	4648      	mov	r0, r9
   1d0e4:	4798      	blx	r3
   1d0e6:	2120      	movs	r1, #32
   1d0e8:	4603      	mov	r3, r0
   1d0ea:	a804      	add	r0, sp, #16
   1d0ec:	2b00      	cmp	r3, #0
   1d0ee:	bf18      	it	ne
   1d0f0:	469b      	movne	fp, r3
   1d0f2:	f7ff fc87 	bl	1ca04 <mbedtls_platform_zeroize>
   1d0f6:	2110      	movs	r1, #16
   1d0f8:	4638      	mov	r0, r7
   1d0fa:	f7ff fc83 	bl	1ca04 <mbedtls_platform_zeroize>
   1d0fe:	4658      	mov	r0, fp
   1d100:	b00d      	add	sp, #52	; 0x34
   1d102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d106:	463a      	mov	r2, r7
   1d108:	4641      	mov	r1, r8
   1d10a:	2300      	movs	r3, #0
   1d10c:	4620      	mov	r0, r4
   1d10e:	f7ff fe7f 	bl	1ce10 <mbedtls_ctr_drbg_reseed_internal>
   1d112:	f8df a068 	ldr.w	sl, [pc, #104]	; 1d17c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1d116:	2800      	cmp	r0, #0
   1d118:	f43f af6d 	beq.w	1cff6 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1d11c:	f8da 3000 	ldr.w	r3, [sl]
   1d120:	4648      	mov	r0, r9
   1d122:	4798      	blx	r3
   1d124:	4683      	mov	fp, r0
   1d126:	2800      	cmp	r0, #0
   1d128:	f43f af65 	beq.w	1cff6 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1d12c:	e7e7      	b.n	1d0fe <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1d12e:	a904      	add	r1, sp, #16
   1d130:	4620      	mov	r0, r4
   1d132:	f7ff fdc9 	bl	1ccc8 <ctr_drbg_update_internal>
   1d136:	4683      	mov	fp, r0
   1d138:	2800      	cmp	r0, #0
   1d13a:	d1d0      	bne.n	1d0de <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1d13c:	6923      	ldr	r3, [r4, #16]
   1d13e:	3301      	adds	r3, #1
   1d140:	6123      	str	r3, [r4, #16]
   1d142:	e7cc      	b.n	1d0de <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1d144:	463a      	mov	r2, r7
   1d146:	4641      	mov	r1, r8
   1d148:	a804      	add	r0, sp, #16
   1d14a:	f7ff fc65 	bl	1ca18 <block_cipher_df>
   1d14e:	4683      	mov	fp, r0
   1d150:	b118      	cbz	r0, 1d15a <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   1d152:	f8df a028 	ldr.w	sl, [pc, #40]	; 1d17c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1d156:	466f      	mov	r7, sp
   1d158:	e7c1      	b.n	1d0de <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1d15a:	a904      	add	r1, sp, #16
   1d15c:	4620      	mov	r0, r4
   1d15e:	f7ff fdb3 	bl	1ccc8 <ctr_drbg_update_internal>
   1d162:	4683      	mov	fp, r0
   1d164:	2800      	cmp	r0, #0
   1d166:	f43f af44 	beq.w	1cff2 <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   1d16a:	e7f2      	b.n	1d152 <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   1d16c:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   1d170:	e7c5      	b.n	1d0fe <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1d172:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   1d176:	e7c2      	b.n	1d0fe <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1d178:	20000924 	.word	0x20000924
   1d17c:	20000928 	.word	0x20000928

0001d180 <entropy_update>:
   1d180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d184:	2b20      	cmp	r3, #32
   1d186:	b08b      	sub	sp, #44	; 0x2c
   1d188:	461d      	mov	r5, r3
   1d18a:	4606      	mov	r6, r0
   1d18c:	4688      	mov	r8, r1
   1d18e:	4691      	mov	r9, r2
   1d190:	d826      	bhi.n	1d1e0 <entropy_update+0x60>
   1d192:	b2db      	uxtb	r3, r3
   1d194:	af02      	add	r7, sp, #8
   1d196:	6831      	ldr	r1, [r6, #0]
   1d198:	f88d 8004 	strb.w	r8, [sp, #4]
   1d19c:	f88d 3005 	strb.w	r3, [sp, #5]
   1d1a0:	f106 0804 	add.w	r8, r6, #4
   1d1a4:	b921      	cbnz	r1, 1d1b0 <entropy_update+0x30>
   1d1a6:	4640      	mov	r0, r8
   1d1a8:	f000 fe7e 	bl	1dea8 <cc_mbedtls_sha256_starts>
   1d1ac:	4604      	mov	r4, r0
   1d1ae:	b940      	cbnz	r0, 1d1c2 <entropy_update+0x42>
   1d1b0:	2301      	movs	r3, #1
   1d1b2:	6033      	str	r3, [r6, #0]
   1d1b4:	2202      	movs	r2, #2
   1d1b6:	a901      	add	r1, sp, #4
   1d1b8:	4640      	mov	r0, r8
   1d1ba:	f000 fe89 	bl	1ded0 <cc_mbedtls_sha256_update>
   1d1be:	4604      	mov	r4, r0
   1d1c0:	b138      	cbz	r0, 1d1d2 <entropy_update+0x52>
   1d1c2:	4638      	mov	r0, r7
   1d1c4:	2120      	movs	r1, #32
   1d1c6:	f7ff fc1d 	bl	1ca04 <mbedtls_platform_zeroize>
   1d1ca:	4620      	mov	r0, r4
   1d1cc:	b00b      	add	sp, #44	; 0x2c
   1d1ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d1d2:	462a      	mov	r2, r5
   1d1d4:	4649      	mov	r1, r9
   1d1d6:	4640      	mov	r0, r8
   1d1d8:	f000 fe7a 	bl	1ded0 <cc_mbedtls_sha256_update>
   1d1dc:	4604      	mov	r4, r0
   1d1de:	e7f0      	b.n	1d1c2 <entropy_update+0x42>
   1d1e0:	af02      	add	r7, sp, #8
   1d1e2:	4619      	mov	r1, r3
   1d1e4:	4610      	mov	r0, r2
   1d1e6:	2300      	movs	r3, #0
   1d1e8:	463a      	mov	r2, r7
   1d1ea:	f000 fffd 	bl	1e1e8 <cc_mbedtls_sha256>
   1d1ee:	4604      	mov	r4, r0
   1d1f0:	2800      	cmp	r0, #0
   1d1f2:	d1e6      	bne.n	1d1c2 <entropy_update+0x42>
   1d1f4:	2320      	movs	r3, #32
   1d1f6:	46b9      	mov	r9, r7
   1d1f8:	461d      	mov	r5, r3
   1d1fa:	e7cc      	b.n	1d196 <entropy_update+0x16>

0001d1fc <entropy_gather_internal.part.0>:
   1d1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d1fe:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   1d202:	b0a7      	sub	sp, #156	; 0x9c
   1d204:	2b00      	cmp	r3, #0
   1d206:	bfd8      	it	le
   1d208:	ae02      	addle	r6, sp, #8
   1d20a:	dd2c      	ble.n	1d266 <entropy_gather_internal.part.0+0x6a>
   1d20c:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   1d210:	4605      	mov	r5, r0
   1d212:	2300      	movs	r3, #0
   1d214:	ae02      	add	r6, sp, #8
   1d216:	9301      	str	r3, [sp, #4]
   1d218:	f1a4 0701 	sub.w	r7, r4, #1
   1d21c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   1d220:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   1d224:	ab01      	add	r3, sp, #4
   1d226:	2290      	movs	r2, #144	; 0x90
   1d228:	4631      	mov	r1, r6
   1d22a:	47a0      	blx	r4
   1d22c:	fab7 f787 	clz	r7, r7
   1d230:	097f      	lsrs	r7, r7, #5
   1d232:	4604      	mov	r4, r0
   1d234:	b910      	cbnz	r0, 1d23c <entropy_gather_internal.part.0+0x40>
   1d236:	9b01      	ldr	r3, [sp, #4]
   1d238:	b93b      	cbnz	r3, 1d24a <entropy_gather_internal.part.0+0x4e>
   1d23a:	b1a7      	cbz	r7, 1d266 <entropy_gather_internal.part.0+0x6a>
   1d23c:	4630      	mov	r0, r6
   1d23e:	2190      	movs	r1, #144	; 0x90
   1d240:	f7ff fbe0 	bl	1ca04 <mbedtls_platform_zeroize>
   1d244:	4620      	mov	r0, r4
   1d246:	b027      	add	sp, #156	; 0x9c
   1d248:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d24a:	4601      	mov	r1, r0
   1d24c:	4632      	mov	r2, r6
   1d24e:	4628      	mov	r0, r5
   1d250:	f7ff ff96 	bl	1d180 <entropy_update>
   1d254:	b950      	cbnz	r0, 1d26c <entropy_gather_internal.part.0+0x70>
   1d256:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   1d25a:	9a01      	ldr	r2, [sp, #4]
   1d25c:	4413      	add	r3, r2
   1d25e:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   1d262:	2f00      	cmp	r7, #0
   1d264:	d1ea      	bne.n	1d23c <entropy_gather_internal.part.0+0x40>
   1d266:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1d26a:	e7e7      	b.n	1d23c <entropy_gather_internal.part.0+0x40>
   1d26c:	4604      	mov	r4, r0
   1d26e:	4620      	mov	r0, r4
   1d270:	b027      	add	sp, #156	; 0x9c
   1d272:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d274 <cc_mbedtls_entropy_init>:
   1d274:	b570      	push	{r4, r5, r6, lr}
   1d276:	2500      	movs	r5, #0
   1d278:	4604      	mov	r4, r0
   1d27a:	2214      	movs	r2, #20
   1d27c:	4629      	mov	r1, r5
   1d27e:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   1d282:	30fc      	adds	r0, #252	; 0xfc
   1d284:	f003 f96f 	bl	20566 <memset>
   1d288:	4b16      	ldr	r3, [pc, #88]	; (1d2e4 <cc_mbedtls_entropy_init+0x70>)
   1d28a:	f504 7688 	add.w	r6, r4, #272	; 0x110
   1d28e:	681b      	ldr	r3, [r3, #0]
   1d290:	4630      	mov	r0, r6
   1d292:	4798      	blx	r3
   1d294:	4620      	mov	r0, r4
   1d296:	f840 5b04 	str.w	r5, [r0], #4
   1d29a:	f000 fdeb 	bl	1de74 <cc_mbedtls_sha256_init>
   1d29e:	4b12      	ldr	r3, [pc, #72]	; (1d2e8 <cc_mbedtls_entropy_init+0x74>)
   1d2a0:	4630      	mov	r0, r6
   1d2a2:	681b      	ldr	r3, [r3, #0]
   1d2a4:	4798      	blx	r3
   1d2a6:	b9d8      	cbnz	r0, 1d2e0 <cc_mbedtls_entropy_init+0x6c>
   1d2a8:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1d2ac:	42ab      	cmp	r3, r5
   1d2ae:	dc11      	bgt.n	1d2d4 <cc_mbedtls_entropy_init+0x60>
   1d2b0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1d2b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1d2b8:	2120      	movs	r1, #32
   1d2ba:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   1d2be:	2101      	movs	r1, #1
   1d2c0:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   1d2c4:	3301      	adds	r3, #1
   1d2c6:	4909      	ldr	r1, [pc, #36]	; (1d2ec <cc_mbedtls_entropy_init+0x78>)
   1d2c8:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   1d2cc:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   1d2d0:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   1d2d4:	4b06      	ldr	r3, [pc, #24]	; (1d2f0 <cc_mbedtls_entropy_init+0x7c>)
   1d2d6:	4630      	mov	r0, r6
   1d2d8:	681b      	ldr	r3, [r3, #0]
   1d2da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d2de:	4718      	bx	r3
   1d2e0:	bd70      	pop	{r4, r5, r6, pc}
   1d2e2:	bf00      	nop
   1d2e4:	20000920 	.word	0x20000920
   1d2e8:	20000924 	.word	0x20000924
   1d2ec:	0001dcc5 	.word	0x0001dcc5
   1d2f0:	20000928 	.word	0x20000928

0001d2f4 <cc_mbedtls_entropy_func>:
   1d2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d2f8:	2a20      	cmp	r2, #32
   1d2fa:	b088      	sub	sp, #32
   1d2fc:	d876      	bhi.n	1d3ec <cc_mbedtls_entropy_func+0xf8>
   1d2fe:	4b3d      	ldr	r3, [pc, #244]	; (1d3f4 <cc_mbedtls_entropy_func+0x100>)
   1d300:	f500 7988 	add.w	r9, r0, #272	; 0x110
   1d304:	681b      	ldr	r3, [r3, #0]
   1d306:	4604      	mov	r4, r0
   1d308:	4648      	mov	r0, r9
   1d30a:	4617      	mov	r7, r2
   1d30c:	4688      	mov	r8, r1
   1d30e:	4798      	blx	r3
   1d310:	4605      	mov	r5, r0
   1d312:	bba0      	cbnz	r0, 1d37e <cc_mbedtls_entropy_func+0x8a>
   1d314:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1d318:	f240 1601 	movw	r6, #257	; 0x101
   1d31c:	e001      	b.n	1d322 <cc_mbedtls_entropy_func+0x2e>
   1d31e:	3e01      	subs	r6, #1
   1d320:	d060      	beq.n	1d3e4 <cc_mbedtls_entropy_func+0xf0>
   1d322:	4620      	mov	r0, r4
   1d324:	b37b      	cbz	r3, 1d386 <cc_mbedtls_entropy_func+0x92>
   1d326:	f7ff ff69 	bl	1d1fc <entropy_gather_internal.part.0>
   1d32a:	4605      	mov	r5, r0
   1d32c:	bb68      	cbnz	r0, 1d38a <cc_mbedtls_entropy_func+0x96>
   1d32e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1d332:	2b00      	cmp	r3, #0
   1d334:	ddf3      	ble.n	1d31e <cc_mbedtls_entropy_func+0x2a>
   1d336:	e9d4 0241 	ldrd	r0, r2, [r4, #260]	; 0x104
   1d33a:	4290      	cmp	r0, r2
   1d33c:	d3ef      	bcc.n	1d31e <cc_mbedtls_entropy_func+0x2a>
   1d33e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d342:	2a01      	cmp	r2, #1
   1d344:	d1eb      	bne.n	1d31e <cc_mbedtls_entropy_func+0x2a>
   1d346:	281f      	cmp	r0, #31
   1d348:	d9e9      	bls.n	1d31e <cc_mbedtls_entropy_func+0x2a>
   1d34a:	466e      	mov	r6, sp
   1d34c:	4629      	mov	r1, r5
   1d34e:	2220      	movs	r2, #32
   1d350:	4630      	mov	r0, r6
   1d352:	f104 0a04 	add.w	sl, r4, #4
   1d356:	f003 f906 	bl	20566 <memset>
   1d35a:	4631      	mov	r1, r6
   1d35c:	4650      	mov	r0, sl
   1d35e:	f000 fde1 	bl	1df24 <cc_mbedtls_sha256_finish>
   1d362:	4605      	mov	r5, r0
   1d364:	b198      	cbz	r0, 1d38e <cc_mbedtls_entropy_func+0x9a>
   1d366:	2120      	movs	r1, #32
   1d368:	4630      	mov	r0, r6
   1d36a:	f7ff fb4b 	bl	1ca04 <mbedtls_platform_zeroize>
   1d36e:	4b22      	ldr	r3, [pc, #136]	; (1d3f8 <cc_mbedtls_entropy_func+0x104>)
   1d370:	4648      	mov	r0, r9
   1d372:	681b      	ldr	r3, [r3, #0]
   1d374:	4798      	blx	r3
   1d376:	2800      	cmp	r0, #0
   1d378:	bf18      	it	ne
   1d37a:	f06f 051d 	mvnne.w	r5, #29
   1d37e:	4628      	mov	r0, r5
   1d380:	b008      	add	sp, #32
   1d382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d386:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1d38a:	466e      	mov	r6, sp
   1d38c:	e7eb      	b.n	1d366 <cc_mbedtls_entropy_func+0x72>
   1d38e:	4650      	mov	r0, sl
   1d390:	f000 fd84 	bl	1de9c <cc_mbedtls_sha256_free>
   1d394:	4650      	mov	r0, sl
   1d396:	f000 fd6d 	bl	1de74 <cc_mbedtls_sha256_init>
   1d39a:	4629      	mov	r1, r5
   1d39c:	4650      	mov	r0, sl
   1d39e:	f000 fd83 	bl	1dea8 <cc_mbedtls_sha256_starts>
   1d3a2:	4605      	mov	r5, r0
   1d3a4:	2800      	cmp	r0, #0
   1d3a6:	d1de      	bne.n	1d366 <cc_mbedtls_entropy_func+0x72>
   1d3a8:	4650      	mov	r0, sl
   1d3aa:	2220      	movs	r2, #32
   1d3ac:	4631      	mov	r1, r6
   1d3ae:	f000 fd8f 	bl	1ded0 <cc_mbedtls_sha256_update>
   1d3b2:	4605      	mov	r5, r0
   1d3b4:	2800      	cmp	r0, #0
   1d3b6:	d1d6      	bne.n	1d366 <cc_mbedtls_entropy_func+0x72>
   1d3b8:	4603      	mov	r3, r0
   1d3ba:	4632      	mov	r2, r6
   1d3bc:	2120      	movs	r1, #32
   1d3be:	4630      	mov	r0, r6
   1d3c0:	f000 ff12 	bl	1e1e8 <cc_mbedtls_sha256>
   1d3c4:	4605      	mov	r5, r0
   1d3c6:	2800      	cmp	r0, #0
   1d3c8:	d1cd      	bne.n	1d366 <cc_mbedtls_entropy_func+0x72>
   1d3ca:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1d3ce:	2b00      	cmp	r3, #0
   1d3d0:	bfc4      	itt	gt
   1d3d2:	2300      	movgt	r3, #0
   1d3d4:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   1d3d8:	463a      	mov	r2, r7
   1d3da:	4640      	mov	r0, r8
   1d3dc:	4631      	mov	r1, r6
   1d3de:	f003 f8b7 	bl	20550 <memcpy>
   1d3e2:	e7c0      	b.n	1d366 <cc_mbedtls_entropy_func+0x72>
   1d3e4:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1d3e8:	466e      	mov	r6, sp
   1d3ea:	e7bc      	b.n	1d366 <cc_mbedtls_entropy_func+0x72>
   1d3ec:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1d3f0:	e7c5      	b.n	1d37e <cc_mbedtls_entropy_func+0x8a>
   1d3f2:	bf00      	nop
   1d3f4:	20000924 	.word	0x20000924
   1d3f8:	20000928 	.word	0x20000928

0001d3fc <RndStartupTest.constprop.0>:
   1d3fc:	b530      	push	{r4, r5, lr}
   1d3fe:	b08d      	sub	sp, #52	; 0x34
   1d400:	2100      	movs	r1, #0
   1d402:	2228      	movs	r2, #40	; 0x28
   1d404:	a802      	add	r0, sp, #8
   1d406:	9101      	str	r1, [sp, #4]
   1d408:	f003 f8ad 	bl	20566 <memset>
   1d40c:	a802      	add	r0, sp, #8
   1d40e:	f000 ff13 	bl	1e238 <RNG_PLAT_SetUserRngParameters>
   1d412:	4604      	mov	r4, r0
   1d414:	b110      	cbz	r0, 1d41c <RndStartupTest.constprop.0+0x20>
   1d416:	4620      	mov	r0, r4
   1d418:	b00d      	add	sp, #52	; 0x34
   1d41a:	bd30      	pop	{r4, r5, pc}
   1d41c:	4d18      	ldr	r5, [pc, #96]	; (1d480 <RndStartupTest.constprop.0+0x84>)
   1d41e:	f04f 31ff 	mov.w	r1, #4294967295
   1d422:	6828      	ldr	r0, [r5, #0]
   1d424:	f000 f93a 	bl	1d69c <CC_PalMutexLock>
   1d428:	4604      	mov	r4, r0
   1d42a:	b9c0      	cbnz	r0, 1d45e <RndStartupTest.constprop.0+0x62>
   1d42c:	2000      	movs	r0, #0
   1d42e:	f000 f965 	bl	1d6fc <CC_PalPowerSaveModeSelect>
   1d432:	bb00      	cbnz	r0, 1d476 <RndStartupTest.constprop.0+0x7a>
   1d434:	4a13      	ldr	r2, [pc, #76]	; (1d484 <RndStartupTest.constprop.0+0x88>)
   1d436:	a902      	add	r1, sp, #8
   1d438:	a801      	add	r0, sp, #4
   1d43a:	f000 fc35 	bl	1dca8 <LLF_RND_RunTrngStartupTest>
   1d43e:	4604      	mov	r4, r0
   1d440:	2001      	movs	r0, #1
   1d442:	f000 f95b 	bl	1d6fc <CC_PalPowerSaveModeSelect>
   1d446:	b990      	cbnz	r0, 1d46e <RndStartupTest.constprop.0+0x72>
   1d448:	6828      	ldr	r0, [r5, #0]
   1d44a:	f000 f92f 	bl	1d6ac <CC_PalMutexUnlock>
   1d44e:	2800      	cmp	r0, #0
   1d450:	d0e1      	beq.n	1d416 <RndStartupTest.constprop.0+0x1a>
   1d452:	480d      	ldr	r0, [pc, #52]	; (1d488 <RndStartupTest.constprop.0+0x8c>)
   1d454:	f7ff f9ce 	bl	1c7f4 <CC_PalAbort>
   1d458:	4620      	mov	r0, r4
   1d45a:	b00d      	add	sp, #52	; 0x34
   1d45c:	bd30      	pop	{r4, r5, pc}
   1d45e:	480b      	ldr	r0, [pc, #44]	; (1d48c <RndStartupTest.constprop.0+0x90>)
   1d460:	f7ff f9c8 	bl	1c7f4 <CC_PalAbort>
   1d464:	2c01      	cmp	r4, #1
   1d466:	bf08      	it	eq
   1d468:	2405      	moveq	r4, #5
   1d46a:	d0ed      	beq.n	1d448 <RndStartupTest.constprop.0+0x4c>
   1d46c:	e7de      	b.n	1d42c <RndStartupTest.constprop.0+0x30>
   1d46e:	4808      	ldr	r0, [pc, #32]	; (1d490 <RndStartupTest.constprop.0+0x94>)
   1d470:	f7ff f9c0 	bl	1c7f4 <CC_PalAbort>
   1d474:	e7e8      	b.n	1d448 <RndStartupTest.constprop.0+0x4c>
   1d476:	4807      	ldr	r0, [pc, #28]	; (1d494 <RndStartupTest.constprop.0+0x98>)
   1d478:	f7ff f9bc 	bl	1c7f4 <CC_PalAbort>
   1d47c:	e7da      	b.n	1d434 <RndStartupTest.constprop.0+0x38>
   1d47e:	bf00      	nop
   1d480:	2000091c 	.word	0x2000091c
   1d484:	2000303c 	.word	0x2000303c
   1d488:	00024afc 	.word	0x00024afc
   1d48c:	00024aa4 	.word	0x00024aa4
   1d490:	00024adc 	.word	0x00024adc
   1d494:	00024abc 	.word	0x00024abc

0001d498 <CC_LibInit>:
   1d498:	b510      	push	{r4, lr}
   1d49a:	b082      	sub	sp, #8
   1d49c:	f000 f850 	bl	1d540 <CC_HalInit>
   1d4a0:	b128      	cbz	r0, 1d4ae <CC_LibInit+0x16>
   1d4a2:	f000 f89f 	bl	1d5e4 <CC_PalTerminate>
   1d4a6:	2403      	movs	r4, #3
   1d4a8:	4620      	mov	r0, r4
   1d4aa:	b002      	add	sp, #8
   1d4ac:	bd10      	pop	{r4, pc}
   1d4ae:	f000 f86b 	bl	1d588 <CC_PalInit>
   1d4b2:	b9d8      	cbnz	r0, 1d4ec <CC_LibInit+0x54>
   1d4b4:	f000 f922 	bl	1d6fc <CC_PalPowerSaveModeSelect>
   1d4b8:	b9e0      	cbnz	r0, 1d4f4 <CC_LibInit+0x5c>
   1d4ba:	4c1e      	ldr	r4, [pc, #120]	; (1d534 <CC_LibInit+0x9c>)
   1d4bc:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   1d4c0:	0e1b      	lsrs	r3, r3, #24
   1d4c2:	2bf0      	cmp	r3, #240	; 0xf0
   1d4c4:	d10a      	bne.n	1d4dc <CC_LibInit+0x44>
   1d4c6:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   1d4ca:	4b1b      	ldr	r3, [pc, #108]	; (1d538 <CC_LibInit+0xa0>)
   1d4cc:	429a      	cmp	r2, r3
   1d4ce:	d029      	beq.n	1d524 <CC_LibInit+0x8c>
   1d4d0:	f000 f838 	bl	1d544 <CC_HalTerminate>
   1d4d4:	2407      	movs	r4, #7
   1d4d6:	f000 f885 	bl	1d5e4 <CC_PalTerminate>
   1d4da:	e7e5      	b.n	1d4a8 <CC_LibInit+0x10>
   1d4dc:	f000 f832 	bl	1d544 <CC_HalTerminate>
   1d4e0:	f000 f880 	bl	1d5e4 <CC_PalTerminate>
   1d4e4:	2406      	movs	r4, #6
   1d4e6:	4620      	mov	r0, r4
   1d4e8:	b002      	add	sp, #8
   1d4ea:	bd10      	pop	{r4, pc}
   1d4ec:	2404      	movs	r4, #4
   1d4ee:	4620      	mov	r0, r4
   1d4f0:	b002      	add	sp, #8
   1d4f2:	bd10      	pop	{r4, pc}
   1d4f4:	f000 f826 	bl	1d544 <CC_HalTerminate>
   1d4f8:	f000 f874 	bl	1d5e4 <CC_PalTerminate>
   1d4fc:	f7ff ff7e 	bl	1d3fc <RndStartupTest.constprop.0>
   1d500:	4604      	mov	r4, r0
   1d502:	b958      	cbnz	r0, 1d51c <CC_LibInit+0x84>
   1d504:	4602      	mov	r2, r0
   1d506:	4601      	mov	r1, r0
   1d508:	f7ff f996 	bl	1c838 <nrf_cc3xx_platform_ctr_drbg_init>
   1d50c:	b930      	cbnz	r0, 1d51c <CC_LibInit+0x84>
   1d50e:	490b      	ldr	r1, [pc, #44]	; (1d53c <CC_LibInit+0xa4>)
   1d510:	ab01      	add	r3, sp, #4
   1d512:	2268      	movs	r2, #104	; 0x68
   1d514:	f7ff f9c2 	bl	1c89c <nrf_cc3xx_platform_ctr_drbg_get>
   1d518:	2800      	cmp	r0, #0
   1d51a:	d0c5      	beq.n	1d4a8 <CC_LibInit+0x10>
   1d51c:	2405      	movs	r4, #5
   1d51e:	4620      	mov	r0, r4
   1d520:	b002      	add	sp, #8
   1d522:	bd10      	pop	{r4, pc}
   1d524:	2001      	movs	r0, #1
   1d526:	f000 f8e9 	bl	1d6fc <CC_PalPowerSaveModeSelect>
   1d52a:	2800      	cmp	r0, #0
   1d52c:	d1e2      	bne.n	1d4f4 <CC_LibInit+0x5c>
   1d52e:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   1d532:	e7e3      	b.n	1d4fc <CC_LibInit+0x64>
   1d534:	5002b000 	.word	0x5002b000
   1d538:	20e00000 	.word	0x20e00000
   1d53c:	20002fd4 	.word	0x20002fd4

0001d540 <CC_HalInit>:
   1d540:	2000      	movs	r0, #0
   1d542:	4770      	bx	lr

0001d544 <CC_HalTerminate>:
   1d544:	2000      	movs	r0, #0
   1d546:	4770      	bx	lr

0001d548 <CC_HalClearInterruptBit>:
   1d548:	0543      	lsls	r3, r0, #21
   1d54a:	d504      	bpl.n	1d556 <CC_HalClearInterruptBit+0xe>
   1d54c:	4b04      	ldr	r3, [pc, #16]	; (1d560 <CC_HalClearInterruptBit+0x18>)
   1d54e:	f04f 32ff 	mov.w	r2, #4294967295
   1d552:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1d556:	4b02      	ldr	r3, [pc, #8]	; (1d560 <CC_HalClearInterruptBit+0x18>)
   1d558:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   1d55c:	4770      	bx	lr
   1d55e:	bf00      	nop
   1d560:	5002b000 	.word	0x5002b000

0001d564 <CC_HalMaskInterrupt>:
   1d564:	4b01      	ldr	r3, [pc, #4]	; (1d56c <CC_HalMaskInterrupt+0x8>)
   1d566:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   1d56a:	4770      	bx	lr
   1d56c:	5002b000 	.word	0x5002b000

0001d570 <CC_HalWaitInterrupt>:
   1d570:	b108      	cbz	r0, 1d576 <CC_HalWaitInterrupt+0x6>
   1d572:	f000 b86b 	b.w	1d64c <CC_PalWaitInterrupt>
   1d576:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1d57a:	4770      	bx	lr

0001d57c <CC_HalWaitInterruptRND>:
   1d57c:	b108      	cbz	r0, 1d582 <CC_HalWaitInterruptRND+0x6>
   1d57e:	f000 b84f 	b.w	1d620 <CC_PalWaitInterruptRND>
   1d582:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1d586:	4770      	bx	lr

0001d588 <CC_PalInit>:
   1d588:	b510      	push	{r4, lr}
   1d58a:	4811      	ldr	r0, [pc, #68]	; (1d5d0 <CC_PalInit+0x48>)
   1d58c:	f000 f872 	bl	1d674 <CC_PalMutexCreate>
   1d590:	b100      	cbz	r0, 1d594 <CC_PalInit+0xc>
   1d592:	bd10      	pop	{r4, pc}
   1d594:	480f      	ldr	r0, [pc, #60]	; (1d5d4 <CC_PalInit+0x4c>)
   1d596:	f000 f86d 	bl	1d674 <CC_PalMutexCreate>
   1d59a:	2800      	cmp	r0, #0
   1d59c:	d1f9      	bne.n	1d592 <CC_PalInit+0xa>
   1d59e:	4c0e      	ldr	r4, [pc, #56]	; (1d5d8 <CC_PalInit+0x50>)
   1d5a0:	4620      	mov	r0, r4
   1d5a2:	f000 f867 	bl	1d674 <CC_PalMutexCreate>
   1d5a6:	2800      	cmp	r0, #0
   1d5a8:	d1f3      	bne.n	1d592 <CC_PalInit+0xa>
   1d5aa:	4b0c      	ldr	r3, [pc, #48]	; (1d5dc <CC_PalInit+0x54>)
   1d5ac:	480c      	ldr	r0, [pc, #48]	; (1d5e0 <CC_PalInit+0x58>)
   1d5ae:	601c      	str	r4, [r3, #0]
   1d5b0:	f000 f860 	bl	1d674 <CC_PalMutexCreate>
   1d5b4:	4601      	mov	r1, r0
   1d5b6:	2800      	cmp	r0, #0
   1d5b8:	d1eb      	bne.n	1d592 <CC_PalInit+0xa>
   1d5ba:	f000 f82d 	bl	1d618 <CC_PalDmaInit>
   1d5be:	4604      	mov	r4, r0
   1d5c0:	b108      	cbz	r0, 1d5c6 <CC_PalInit+0x3e>
   1d5c2:	4620      	mov	r0, r4
   1d5c4:	bd10      	pop	{r4, pc}
   1d5c6:	f000 f87b 	bl	1d6c0 <CC_PalPowerSaveModeInit>
   1d5ca:	4620      	mov	r0, r4
   1d5cc:	e7fa      	b.n	1d5c4 <CC_PalInit+0x3c>
   1d5ce:	bf00      	nop
   1d5d0:	20000918 	.word	0x20000918
   1d5d4:	2000090c 	.word	0x2000090c
   1d5d8:	20000914 	.word	0x20000914
   1d5dc:	2000091c 	.word	0x2000091c
   1d5e0:	20000910 	.word	0x20000910

0001d5e4 <CC_PalTerminate>:
   1d5e4:	b508      	push	{r3, lr}
   1d5e6:	4808      	ldr	r0, [pc, #32]	; (1d608 <CC_PalTerminate+0x24>)
   1d5e8:	f000 f84e 	bl	1d688 <CC_PalMutexDestroy>
   1d5ec:	4807      	ldr	r0, [pc, #28]	; (1d60c <CC_PalTerminate+0x28>)
   1d5ee:	f000 f84b 	bl	1d688 <CC_PalMutexDestroy>
   1d5f2:	4807      	ldr	r0, [pc, #28]	; (1d610 <CC_PalTerminate+0x2c>)
   1d5f4:	f000 f848 	bl	1d688 <CC_PalMutexDestroy>
   1d5f8:	4806      	ldr	r0, [pc, #24]	; (1d614 <CC_PalTerminate+0x30>)
   1d5fa:	f000 f845 	bl	1d688 <CC_PalMutexDestroy>
   1d5fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1d602:	f000 b80b 	b.w	1d61c <CC_PalDmaTerminate>
   1d606:	bf00      	nop
   1d608:	20000918 	.word	0x20000918
   1d60c:	2000090c 	.word	0x2000090c
   1d610:	20000914 	.word	0x20000914
   1d614:	20000910 	.word	0x20000910

0001d618 <CC_PalDmaInit>:
   1d618:	2000      	movs	r0, #0
   1d61a:	4770      	bx	lr

0001d61c <CC_PalDmaTerminate>:
   1d61c:	4770      	bx	lr
   1d61e:	bf00      	nop

0001d620 <CC_PalWaitInterruptRND>:
   1d620:	b410      	push	{r4}
   1d622:	4c09      	ldr	r4, [pc, #36]	; (1d648 <CC_PalWaitInterruptRND+0x28>)
   1d624:	4602      	mov	r2, r0
   1d626:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   1d62a:	4213      	tst	r3, r2
   1d62c:	d0fb      	beq.n	1d626 <CC_PalWaitInterruptRND+0x6>
   1d62e:	b121      	cbz	r1, 1d63a <CC_PalWaitInterruptRND+0x1a>
   1d630:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1d634:	600b      	str	r3, [r1, #0]
   1d636:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   1d63a:	4b03      	ldr	r3, [pc, #12]	; (1d648 <CC_PalWaitInterruptRND+0x28>)
   1d63c:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   1d640:	2000      	movs	r0, #0
   1d642:	bc10      	pop	{r4}
   1d644:	4770      	bx	lr
   1d646:	bf00      	nop
   1d648:	5002b000 	.word	0x5002b000

0001d64c <CC_PalWaitInterrupt>:
   1d64c:	4a04      	ldr	r2, [pc, #16]	; (1d660 <CC_PalWaitInterrupt+0x14>)
   1d64e:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   1d652:	4218      	tst	r0, r3
   1d654:	d0fb      	beq.n	1d64e <CC_PalWaitInterrupt+0x2>
   1d656:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   1d65a:	2000      	movs	r0, #0
   1d65c:	4770      	bx	lr
   1d65e:	bf00      	nop
   1d660:	5002b000 	.word	0x5002b000

0001d664 <CC_PalMemCopyPlat>:
   1d664:	f002 bf5c 	b.w	20520 <memmove>

0001d668 <CC_PalMemSetPlat>:
   1d668:	f002 bf7d 	b.w	20566 <memset>

0001d66c <CC_PalMemSetZeroPlat>:
   1d66c:	460a      	mov	r2, r1
   1d66e:	2100      	movs	r1, #0
   1d670:	f002 bf79 	b.w	20566 <memset>

0001d674 <CC_PalMutexCreate>:
   1d674:	b508      	push	{r3, lr}
   1d676:	4b03      	ldr	r3, [pc, #12]	; (1d684 <CC_PalMutexCreate+0x10>)
   1d678:	6802      	ldr	r2, [r0, #0]
   1d67a:	681b      	ldr	r3, [r3, #0]
   1d67c:	6810      	ldr	r0, [r2, #0]
   1d67e:	4798      	blx	r3
   1d680:	2000      	movs	r0, #0
   1d682:	bd08      	pop	{r3, pc}
   1d684:	200008cc 	.word	0x200008cc

0001d688 <CC_PalMutexDestroy>:
   1d688:	b508      	push	{r3, lr}
   1d68a:	4b03      	ldr	r3, [pc, #12]	; (1d698 <CC_PalMutexDestroy+0x10>)
   1d68c:	6802      	ldr	r2, [r0, #0]
   1d68e:	685b      	ldr	r3, [r3, #4]
   1d690:	6810      	ldr	r0, [r2, #0]
   1d692:	4798      	blx	r3
   1d694:	2000      	movs	r0, #0
   1d696:	bd08      	pop	{r3, pc}
   1d698:	200008cc 	.word	0x200008cc

0001d69c <CC_PalMutexLock>:
   1d69c:	4b02      	ldr	r3, [pc, #8]	; (1d6a8 <CC_PalMutexLock+0xc>)
   1d69e:	6802      	ldr	r2, [r0, #0]
   1d6a0:	689b      	ldr	r3, [r3, #8]
   1d6a2:	6810      	ldr	r0, [r2, #0]
   1d6a4:	4718      	bx	r3
   1d6a6:	bf00      	nop
   1d6a8:	200008cc 	.word	0x200008cc

0001d6ac <CC_PalMutexUnlock>:
   1d6ac:	b508      	push	{r3, lr}
   1d6ae:	4b03      	ldr	r3, [pc, #12]	; (1d6bc <CC_PalMutexUnlock+0x10>)
   1d6b0:	6802      	ldr	r2, [r0, #0]
   1d6b2:	68db      	ldr	r3, [r3, #12]
   1d6b4:	6810      	ldr	r0, [r2, #0]
   1d6b6:	4798      	blx	r3
   1d6b8:	2000      	movs	r0, #0
   1d6ba:	bd08      	pop	{r3, pc}
   1d6bc:	200008cc 	.word	0x200008cc

0001d6c0 <CC_PalPowerSaveModeInit>:
   1d6c0:	b570      	push	{r4, r5, r6, lr}
   1d6c2:	4c09      	ldr	r4, [pc, #36]	; (1d6e8 <CC_PalPowerSaveModeInit+0x28>)
   1d6c4:	4d09      	ldr	r5, [pc, #36]	; (1d6ec <CC_PalPowerSaveModeInit+0x2c>)
   1d6c6:	6920      	ldr	r0, [r4, #16]
   1d6c8:	68ab      	ldr	r3, [r5, #8]
   1d6ca:	4798      	blx	r3
   1d6cc:	b118      	cbz	r0, 1d6d6 <CC_PalPowerSaveModeInit+0x16>
   1d6ce:	4b08      	ldr	r3, [pc, #32]	; (1d6f0 <CC_PalPowerSaveModeInit+0x30>)
   1d6d0:	4808      	ldr	r0, [pc, #32]	; (1d6f4 <CC_PalPowerSaveModeInit+0x34>)
   1d6d2:	685b      	ldr	r3, [r3, #4]
   1d6d4:	4798      	blx	r3
   1d6d6:	4a08      	ldr	r2, [pc, #32]	; (1d6f8 <CC_PalPowerSaveModeInit+0x38>)
   1d6d8:	68eb      	ldr	r3, [r5, #12]
   1d6da:	6920      	ldr	r0, [r4, #16]
   1d6dc:	2100      	movs	r1, #0
   1d6de:	6011      	str	r1, [r2, #0]
   1d6e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d6e4:	4718      	bx	r3
   1d6e6:	bf00      	nop
   1d6e8:	200008dc 	.word	0x200008dc
   1d6ec:	200008cc 	.word	0x200008cc
   1d6f0:	200008bc 	.word	0x200008bc
   1d6f4:	00024b14 	.word	0x00024b14
   1d6f8:	2000325c 	.word	0x2000325c

0001d6fc <CC_PalPowerSaveModeSelect>:
   1d6fc:	b570      	push	{r4, r5, r6, lr}
   1d6fe:	4d1b      	ldr	r5, [pc, #108]	; (1d76c <CC_PalPowerSaveModeSelect+0x70>)
   1d700:	4e1b      	ldr	r6, [pc, #108]	; (1d770 <CC_PalPowerSaveModeSelect+0x74>)
   1d702:	4604      	mov	r4, r0
   1d704:	68b2      	ldr	r2, [r6, #8]
   1d706:	6928      	ldr	r0, [r5, #16]
   1d708:	4790      	blx	r2
   1d70a:	b9f8      	cbnz	r0, 1d74c <CC_PalPowerSaveModeSelect+0x50>
   1d70c:	b15c      	cbz	r4, 1d726 <CC_PalPowerSaveModeSelect+0x2a>
   1d70e:	4c19      	ldr	r4, [pc, #100]	; (1d774 <CC_PalPowerSaveModeSelect+0x78>)
   1d710:	6823      	ldr	r3, [r4, #0]
   1d712:	b1b3      	cbz	r3, 1d742 <CC_PalPowerSaveModeSelect+0x46>
   1d714:	2b01      	cmp	r3, #1
   1d716:	d01b      	beq.n	1d750 <CC_PalPowerSaveModeSelect+0x54>
   1d718:	3b01      	subs	r3, #1
   1d71a:	6023      	str	r3, [r4, #0]
   1d71c:	6928      	ldr	r0, [r5, #16]
   1d71e:	68f3      	ldr	r3, [r6, #12]
   1d720:	4798      	blx	r3
   1d722:	2000      	movs	r0, #0
   1d724:	bd70      	pop	{r4, r5, r6, pc}
   1d726:	4c13      	ldr	r4, [pc, #76]	; (1d774 <CC_PalPowerSaveModeSelect+0x78>)
   1d728:	6821      	ldr	r1, [r4, #0]
   1d72a:	b941      	cbnz	r1, 1d73e <CC_PalPowerSaveModeSelect+0x42>
   1d72c:	4b12      	ldr	r3, [pc, #72]	; (1d778 <CC_PalPowerSaveModeSelect+0x7c>)
   1d72e:	2201      	movs	r2, #1
   1d730:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1d734:	4a11      	ldr	r2, [pc, #68]	; (1d77c <CC_PalPowerSaveModeSelect+0x80>)
   1d736:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1d73a:	2b00      	cmp	r3, #0
   1d73c:	d1fb      	bne.n	1d736 <CC_PalPowerSaveModeSelect+0x3a>
   1d73e:	3101      	adds	r1, #1
   1d740:	6021      	str	r1, [r4, #0]
   1d742:	68f3      	ldr	r3, [r6, #12]
   1d744:	6928      	ldr	r0, [r5, #16]
   1d746:	4798      	blx	r3
   1d748:	2000      	movs	r0, #0
   1d74a:	bd70      	pop	{r4, r5, r6, pc}
   1d74c:	480c      	ldr	r0, [pc, #48]	; (1d780 <CC_PalPowerSaveModeSelect+0x84>)
   1d74e:	bd70      	pop	{r4, r5, r6, pc}
   1d750:	4a0a      	ldr	r2, [pc, #40]	; (1d77c <CC_PalPowerSaveModeSelect+0x80>)
   1d752:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1d756:	2b00      	cmp	r3, #0
   1d758:	d1fb      	bne.n	1d752 <CC_PalPowerSaveModeSelect+0x56>
   1d75a:	4a07      	ldr	r2, [pc, #28]	; (1d778 <CC_PalPowerSaveModeSelect+0x7c>)
   1d75c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   1d760:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   1d764:	f7ff fefe 	bl	1d564 <CC_HalMaskInterrupt>
   1d768:	6823      	ldr	r3, [r4, #0]
   1d76a:	e7d5      	b.n	1d718 <CC_PalPowerSaveModeSelect+0x1c>
   1d76c:	200008dc 	.word	0x200008dc
   1d770:	200008cc 	.word	0x200008cc
   1d774:	2000325c 	.word	0x2000325c
   1d778:	5002a000 	.word	0x5002a000
   1d77c:	5002b000 	.word	0x5002b000
   1d780:	ffff8fe9 	.word	0xffff8fe9

0001d784 <mutex_init>:
   1d784:	4b01      	ldr	r3, [pc, #4]	; (1d78c <mutex_init+0x8>)
   1d786:	681b      	ldr	r3, [r3, #0]
   1d788:	4718      	bx	r3
   1d78a:	bf00      	nop
   1d78c:	200008cc 	.word	0x200008cc

0001d790 <mutex_lock>:
   1d790:	4b01      	ldr	r3, [pc, #4]	; (1d798 <mutex_lock+0x8>)
   1d792:	689b      	ldr	r3, [r3, #8]
   1d794:	4718      	bx	r3
   1d796:	bf00      	nop
   1d798:	200008cc 	.word	0x200008cc

0001d79c <mutex_unlock>:
   1d79c:	4b01      	ldr	r3, [pc, #4]	; (1d7a4 <mutex_unlock+0x8>)
   1d79e:	68db      	ldr	r3, [r3, #12]
   1d7a0:	4718      	bx	r3
   1d7a2:	bf00      	nop
   1d7a4:	200008cc 	.word	0x200008cc

0001d7a8 <startTrngHW>:
   1d7a8:	2800      	cmp	r0, #0
   1d7aa:	f000 8084 	beq.w	1d8b6 <startTrngHW+0x10e>
   1d7ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d7b2:	460c      	mov	r4, r1
   1d7b4:	b083      	sub	sp, #12
   1d7b6:	2900      	cmp	r1, #0
   1d7b8:	d078      	beq.n	1d8ac <startTrngHW+0x104>
   1d7ba:	461d      	mov	r5, r3
   1d7bc:	2b00      	cmp	r3, #0
   1d7be:	d075      	beq.n	1d8ac <startTrngHW+0x104>
   1d7c0:	4607      	mov	r7, r0
   1d7c2:	b11a      	cbz	r2, 1d7cc <startTrngHW+0x24>
   1d7c4:	2201      	movs	r2, #1
   1d7c6:	2300      	movs	r3, #0
   1d7c8:	602a      	str	r2, [r5, #0]
   1d7ca:	6003      	str	r3, [r0, #0]
   1d7cc:	682b      	ldr	r3, [r5, #0]
   1d7ce:	2b00      	cmp	r3, #0
   1d7d0:	d067      	beq.n	1d8a2 <startTrngHW+0xfa>
   1d7d2:	4629      	mov	r1, r5
   1d7d4:	4620      	mov	r0, r4
   1d7d6:	f000 fded 	bl	1e3b4 <LLF_RND_GetFastestRosc>
   1d7da:	4603      	mov	r3, r0
   1d7dc:	2800      	cmp	r0, #0
   1d7de:	d161      	bne.n	1d8a4 <startTrngHW+0xfc>
   1d7e0:	6828      	ldr	r0, [r5, #0]
   1d7e2:	4621      	mov	r1, r4
   1d7e4:	f000 fdc8 	bl	1e378 <LLF_RND_GetRoscSampleCnt>
   1d7e8:	4603      	mov	r3, r0
   1d7ea:	2800      	cmp	r0, #0
   1d7ec:	d15a      	bne.n	1d8a4 <startTrngHW+0xfc>
   1d7ee:	682a      	ldr	r2, [r5, #0]
   1d7f0:	2a08      	cmp	r2, #8
   1d7f2:	d072      	beq.n	1d8da <startTrngHW+0x132>
   1d7f4:	2a04      	cmp	r2, #4
   1d7f6:	d073      	beq.n	1d8e0 <startTrngHW+0x138>
   1d7f8:	f1a2 0802 	sub.w	r8, r2, #2
   1d7fc:	fab8 f888 	clz	r8, r8
   1d800:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1d804:	4e38      	ldr	r6, [pc, #224]	; (1d8e8 <startTrngHW+0x140>)
   1d806:	2001      	movs	r0, #1
   1d808:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   1d80c:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
   1d810:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   1d814:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1d816:	f8c6 2130 	str.w	r2, [r6, #304]	; 0x130
   1d81a:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
   1d81e:	428a      	cmp	r2, r1
   1d820:	d1f6      	bne.n	1d810 <startTrngHW+0x68>
   1d822:	f04f 0900 	mov.w	r9, #0
   1d826:	9301      	str	r3, [sp, #4]
   1d828:	f04f 30ff 	mov.w	r0, #4294967295
   1d82c:	f8c6 912c 	str.w	r9, [r6, #300]	; 0x12c
   1d830:	f7ff fe8a 	bl	1d548 <CC_HalClearInterruptBit>
   1d834:	f06f 021b 	mvn.w	r2, #27
   1d838:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
   1d83c:	4648      	mov	r0, r9
   1d83e:	f7ff fe91 	bl	1d564 <CC_HalMaskInterrupt>
   1d842:	f8c6 810c 	str.w	r8, [r6, #268]	; 0x10c
   1d846:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   1d84a:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1d84e:	f7ff fe89 	bl	1d564 <CC_HalMaskInterrupt>
   1d852:	220a      	movs	r2, #10
   1d854:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
   1d858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d85a:	2b01      	cmp	r3, #1
   1d85c:	9b01      	ldr	r3, [sp, #4]
   1d85e:	d02d      	beq.n	1d8bc <startTrngHW+0x114>
   1d860:	6922      	ldr	r2, [r4, #16]
   1d862:	4922      	ldr	r1, [pc, #136]	; (1d8ec <startTrngHW+0x144>)
   1d864:	fba1 1202 	umull	r1, r2, r1, r2
   1d868:	0912      	lsrs	r2, r2, #4
   1d86a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1d86c:	fb01 f202 	mul.w	r2, r1, r2
   1d870:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1d874:	491c      	ldr	r1, [pc, #112]	; (1d8e8 <startTrngHW+0x140>)
   1d876:	03d2      	lsls	r2, r2, #15
   1d878:	0992      	lsrs	r2, r2, #6
   1d87a:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
   1d87e:	2201      	movs	r2, #1
   1d880:	f8c1 212c 	str.w	r2, [r1, #300]	; 0x12c
   1d884:	683a      	ldr	r2, [r7, #0]
   1d886:	6829      	ldr	r1, [r5, #0]
   1d888:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1d88c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   1d890:	603a      	str	r2, [r7, #0]
   1d892:	6829      	ldr	r1, [r5, #0]
   1d894:	4618      	mov	r0, r3
   1d896:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1d89a:	603a      	str	r2, [r7, #0]
   1d89c:	b003      	add	sp, #12
   1d89e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d8a2:	4b13      	ldr	r3, [pc, #76]	; (1d8f0 <startTrngHW+0x148>)
   1d8a4:	4618      	mov	r0, r3
   1d8a6:	b003      	add	sp, #12
   1d8a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d8ac:	4b11      	ldr	r3, [pc, #68]	; (1d8f4 <startTrngHW+0x14c>)
   1d8ae:	4618      	mov	r0, r3
   1d8b0:	b003      	add	sp, #12
   1d8b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d8b6:	4b0f      	ldr	r3, [pc, #60]	; (1d8f4 <startTrngHW+0x14c>)
   1d8b8:	4618      	mov	r0, r3
   1d8ba:	4770      	bx	lr
   1d8bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d8c0:	f8d2 1c0c 	ldr.w	r1, [r2, #3084]	; 0xc0c
   1d8c4:	3101      	adds	r1, #1
   1d8c6:	d006      	beq.n	1d8d6 <startTrngHW+0x12e>
   1d8c8:	f8d2 2c0c 	ldr.w	r2, [r2, #3084]	; 0xc0c
   1d8cc:	4907      	ldr	r1, [pc, #28]	; (1d8ec <startTrngHW+0x144>)
   1d8ce:	fba1 1202 	umull	r1, r2, r1, r2
   1d8d2:	0912      	lsrs	r2, r2, #4
   1d8d4:	e7c9      	b.n	1d86a <startTrngHW+0xc2>
   1d8d6:	2216      	movs	r2, #22
   1d8d8:	e7c7      	b.n	1d86a <startTrngHW+0xc2>
   1d8da:	f04f 0803 	mov.w	r8, #3
   1d8de:	e791      	b.n	1d804 <startTrngHW+0x5c>
   1d8e0:	f04f 0802 	mov.w	r8, #2
   1d8e4:	e78e      	b.n	1d804 <startTrngHW+0x5c>
   1d8e6:	bf00      	nop
   1d8e8:	5002b000 	.word	0x5002b000
   1d8ec:	aaaaaaab 	.word	0xaaaaaaab
   1d8f0:	00f10c31 	.word	0x00f10c31
   1d8f4:	00f10c35 	.word	0x00f10c35

0001d8f8 <LLF_RND_RepetitionCounterTest.part.0>:
   1d8f8:	b570      	push	{r4, r5, r6, lr}
   1d8fa:	00c9      	lsls	r1, r1, #3
   1d8fc:	2400      	movs	r4, #0
   1d8fe:	1e4e      	subs	r6, r1, #1
   1d900:	f04f 0c01 	mov.w	ip, #1
   1d904:	4625      	mov	r5, r4
   1d906:	46a6      	mov	lr, r4
   1d908:	e008      	b.n	1d91c <LLF_RND_RepetitionCounterTest.part.0+0x24>
   1d90a:	459e      	cmp	lr, r3
   1d90c:	d015      	beq.n	1d93a <LLF_RND_RepetitionCounterTest.part.0+0x42>
   1d90e:	2501      	movs	r5, #1
   1d910:	45b4      	cmp	ip, r6
   1d912:	d817      	bhi.n	1d944 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   1d914:	3401      	adds	r4, #1
   1d916:	f10c 0c01 	add.w	ip, ip, #1
   1d91a:	469e      	mov	lr, r3
   1d91c:	0963      	lsrs	r3, r4, #5
   1d91e:	f004 011f 	and.w	r1, r4, #31
   1d922:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1d926:	291f      	cmp	r1, #31
   1d928:	fa23 f301 	lsr.w	r3, r3, r1
   1d92c:	bf18      	it	ne
   1d92e:	f003 0301 	andne.w	r3, r3, #1
   1d932:	2c00      	cmp	r4, #0
   1d934:	d1e9      	bne.n	1d90a <LLF_RND_RepetitionCounterTest.part.0+0x12>
   1d936:	2501      	movs	r5, #1
   1d938:	e7ec      	b.n	1d914 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   1d93a:	3501      	adds	r5, #1
   1d93c:	4295      	cmp	r5, r2
   1d93e:	d1e7      	bne.n	1d910 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   1d940:	4801      	ldr	r0, [pc, #4]	; (1d948 <LLF_RND_RepetitionCounterTest.part.0+0x50>)
   1d942:	bd70      	pop	{r4, r5, r6, pc}
   1d944:	2000      	movs	r0, #0
   1d946:	bd70      	pop	{r4, r5, r6, pc}
   1d948:	00f10c36 	.word	0x00f10c36

0001d94c <LLF_RND_AdaptiveProportionTest>:
   1d94c:	2800      	cmp	r0, #0
   1d94e:	d03f      	beq.n	1d9d0 <LLF_RND_AdaptiveProportionTest+0x84>
   1d950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d954:	1e4c      	subs	r4, r1, #1
   1d956:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1d95a:	d228      	bcs.n	1d9ae <LLF_RND_AdaptiveProportionTest+0x62>
   1d95c:	b33b      	cbz	r3, 1d9ae <LLF_RND_AdaptiveProportionTest+0x62>
   1d95e:	b332      	cbz	r2, 1d9ae <LLF_RND_AdaptiveProportionTest+0x62>
   1d960:	f04f 0e00 	mov.w	lr, #0
   1d964:	00cf      	lsls	r7, r1, #3
   1d966:	4676      	mov	r6, lr
   1d968:	4675      	mov	r5, lr
   1d96a:	4674      	mov	r4, lr
   1d96c:	f103 38ff 	add.w	r8, r3, #4294967295
   1d970:	0961      	lsrs	r1, r4, #5
   1d972:	f004 0c1f 	and.w	ip, r4, #31
   1d976:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1d97a:	f1bc 0f1f 	cmp.w	ip, #31
   1d97e:	fa21 f10c 	lsr.w	r1, r1, ip
   1d982:	bf18      	it	ne
   1d984:	f001 0101 	andne.w	r1, r1, #1
   1d988:	b1a4      	cbz	r4, 1d9b4 <LLF_RND_AdaptiveProportionTest+0x68>
   1d98a:	42ab      	cmp	r3, r5
   1d98c:	d018      	beq.n	1d9c0 <LLF_RND_AdaptiveProportionTest+0x74>
   1d98e:	428e      	cmp	r6, r1
   1d990:	bf08      	it	eq
   1d992:	f10e 0e01 	addeq.w	lr, lr, #1
   1d996:	45a8      	cmp	r8, r5
   1d998:	d015      	beq.n	1d9c6 <LLF_RND_AdaptiveProportionTest+0x7a>
   1d99a:	3501      	adds	r5, #1
   1d99c:	4631      	mov	r1, r6
   1d99e:	3401      	adds	r4, #1
   1d9a0:	42bc      	cmp	r4, r7
   1d9a2:	d001      	beq.n	1d9a8 <LLF_RND_AdaptiveProportionTest+0x5c>
   1d9a4:	460e      	mov	r6, r1
   1d9a6:	e7e3      	b.n	1d970 <LLF_RND_AdaptiveProportionTest+0x24>
   1d9a8:	2000      	movs	r0, #0
   1d9aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d9ae:	4809      	ldr	r0, [pc, #36]	; (1d9d4 <LLF_RND_AdaptiveProportionTest+0x88>)
   1d9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d9b4:	f04f 0e01 	mov.w	lr, #1
   1d9b8:	4674      	mov	r4, lr
   1d9ba:	4675      	mov	r5, lr
   1d9bc:	460e      	mov	r6, r1
   1d9be:	e7d7      	b.n	1d970 <LLF_RND_AdaptiveProportionTest+0x24>
   1d9c0:	2501      	movs	r5, #1
   1d9c2:	46ae      	mov	lr, r5
   1d9c4:	e7eb      	b.n	1d99e <LLF_RND_AdaptiveProportionTest+0x52>
   1d9c6:	4572      	cmp	r2, lr
   1d9c8:	d3f1      	bcc.n	1d9ae <LLF_RND_AdaptiveProportionTest+0x62>
   1d9ca:	4631      	mov	r1, r6
   1d9cc:	461d      	mov	r5, r3
   1d9ce:	e7e6      	b.n	1d99e <LLF_RND_AdaptiveProportionTest+0x52>
   1d9d0:	4800      	ldr	r0, [pc, #0]	; (1d9d4 <LLF_RND_AdaptiveProportionTest+0x88>)
   1d9d2:	4770      	bx	lr
   1d9d4:	00f10c37 	.word	0x00f10c37

0001d9d8 <getTrngSource>:
   1d9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d9dc:	b091      	sub	sp, #68	; 0x44
   1d9de:	460d      	mov	r5, r1
   1d9e0:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   1d9e4:	4681      	mov	r9, r0
   1d9e6:	2900      	cmp	r1, #0
   1d9e8:	d14c      	bne.n	1da84 <getTrngSource+0xac>
   1d9ea:	6928      	ldr	r0, [r5, #16]
   1d9ec:	9006      	str	r0, [sp, #24]
   1d9ee:	981a      	ldr	r0, [sp, #104]	; 0x68
   1d9f0:	601c      	str	r4, [r3, #0]
   1d9f2:	2300      	movs	r3, #0
   1d9f4:	6003      	str	r3, [r0, #0]
   1d9f6:	2a00      	cmp	r2, #0
   1d9f8:	f000 8124 	beq.w	1dc44 <getTrngSource+0x26c>
   1d9fc:	4b9d      	ldr	r3, [pc, #628]	; (1dc74 <getTrngSource+0x29c>)
   1d9fe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1da00:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   1da04:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1da08:	429a      	cmp	r2, r3
   1da0a:	d147      	bne.n	1da9c <getTrngSource+0xc4>
   1da0c:	290a      	cmp	r1, #10
   1da0e:	d145      	bne.n	1da9c <getTrngSource+0xc4>
   1da10:	f899 3003 	ldrb.w	r3, [r9, #3]
   1da14:	9308      	str	r3, [sp, #32]
   1da16:	f104 0308 	add.w	r3, r4, #8
   1da1a:	9a06      	ldr	r2, [sp, #24]
   1da1c:	9307      	str	r3, [sp, #28]
   1da1e:	4b96      	ldr	r3, [pc, #600]	; (1dc78 <getTrngSource+0x2a0>)
   1da20:	4c94      	ldr	r4, [pc, #592]	; (1dc74 <getTrngSource+0x29c>)
   1da22:	fba3 1302 	umull	r1, r3, r3, r2
   1da26:	089b      	lsrs	r3, r3, #2
   1da28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1da2c:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   1da30:	9303      	str	r3, [sp, #12]
   1da32:	2304      	movs	r3, #4
   1da34:	9305      	str	r3, [sp, #20]
   1da36:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1da38:	9e06      	ldr	r6, [sp, #24]
   1da3a:	601e      	str	r6, [r3, #0]
   1da3c:	2e00      	cmp	r6, #0
   1da3e:	d033      	beq.n	1daa8 <getTrngSource+0xd0>
   1da40:	f8dd 801c 	ldr.w	r8, [sp, #28]
   1da44:	2700      	movs	r7, #0
   1da46:	f04f 0a01 	mov.w	sl, #1
   1da4a:	f000 fcc3 	bl	1e3d4 <LLF_RND_TurnOffTrng>
   1da4e:	2300      	movs	r3, #0
   1da50:	9309      	str	r3, [sp, #36]	; 0x24
   1da52:	f1b9 0f00 	cmp.w	r9, #0
   1da56:	f000 80df 	beq.w	1dc18 <getTrngSource+0x240>
   1da5a:	2d00      	cmp	r5, #0
   1da5c:	f000 80dc 	beq.w	1dc18 <getTrngSource+0x240>
   1da60:	9b08      	ldr	r3, [sp, #32]
   1da62:	b1eb      	cbz	r3, 1daa0 <getTrngSource+0xc8>
   1da64:	a908      	add	r1, sp, #32
   1da66:	4628      	mov	r0, r5
   1da68:	f000 fca4 	bl	1e3b4 <LLF_RND_GetFastestRosc>
   1da6c:	2800      	cmp	r0, #0
   1da6e:	d03e      	beq.n	1daee <getTrngSource+0x116>
   1da70:	4b82      	ldr	r3, [pc, #520]	; (1dc7c <getTrngSource+0x2a4>)
   1da72:	4298      	cmp	r0, r3
   1da74:	d118      	bne.n	1daa8 <getTrngSource+0xd0>
   1da76:	9003      	str	r0, [sp, #12]
   1da78:	f000 fcac 	bl	1e3d4 <LLF_RND_TurnOffTrng>
   1da7c:	9803      	ldr	r0, [sp, #12]
   1da7e:	b011      	add	sp, #68	; 0x44
   1da80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da84:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1da88:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   1da8c:	3601      	adds	r6, #1
   1da8e:	bf14      	ite	ne
   1da90:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   1da94:	f44f 7004 	moveq.w	r0, #528	; 0x210
   1da98:	9006      	str	r0, [sp, #24]
   1da9a:	e7a8      	b.n	1d9ee <getTrngSource+0x16>
   1da9c:	4878      	ldr	r0, [pc, #480]	; (1dc80 <getTrngSource+0x2a8>)
   1da9e:	e7ea      	b.n	1da76 <getTrngSource+0x9e>
   1daa0:	4878      	ldr	r0, [pc, #480]	; (1dc84 <getTrngSource+0x2ac>)
   1daa2:	4b76      	ldr	r3, [pc, #472]	; (1dc7c <getTrngSource+0x2a4>)
   1daa4:	4298      	cmp	r0, r3
   1daa6:	d0e6      	beq.n	1da76 <getTrngSource+0x9e>
   1daa8:	9b08      	ldr	r3, [sp, #32]
   1daaa:	2b08      	cmp	r3, #8
   1daac:	f000 80c8 	beq.w	1dc40 <getTrngSource+0x268>
   1dab0:	005b      	lsls	r3, r3, #1
   1dab2:	2200      	movs	r2, #0
   1dab4:	9308      	str	r3, [sp, #32]
   1dab6:	9200      	str	r2, [sp, #0]
   1dab8:	ab08      	add	r3, sp, #32
   1daba:	4629      	mov	r1, r5
   1dabc:	4648      	mov	r0, r9
   1dabe:	f7ff fe73 	bl	1d7a8 <startTrngHW>
   1dac2:	4b70      	ldr	r3, [pc, #448]	; (1dc84 <getTrngSource+0x2ac>)
   1dac4:	4298      	cmp	r0, r3
   1dac6:	f000 80b7 	beq.w	1dc38 <getTrngSource+0x260>
   1daca:	2800      	cmp	r0, #0
   1dacc:	d1d3      	bne.n	1da76 <getTrngSource+0x9e>
   1dace:	f8d9 2000 	ldr.w	r2, [r9]
   1dad2:	0a13      	lsrs	r3, r2, #8
   1dad4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1dad8:	4313      	orrs	r3, r2
   1dada:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1dade:	f8c9 3000 	str.w	r3, [r9]
   1dae2:	9b05      	ldr	r3, [sp, #20]
   1dae4:	3b01      	subs	r3, #1
   1dae6:	9305      	str	r3, [sp, #20]
   1dae8:	d1a5      	bne.n	1da36 <getTrngSource+0x5e>
   1daea:	2000      	movs	r0, #0
   1daec:	e7c3      	b.n	1da76 <getTrngSource+0x9e>
   1daee:	9808      	ldr	r0, [sp, #32]
   1daf0:	4629      	mov	r1, r5
   1daf2:	f000 fc41 	bl	1e378 <LLF_RND_GetRoscSampleCnt>
   1daf6:	2800      	cmp	r0, #0
   1daf8:	d1ba      	bne.n	1da70 <getTrngSource+0x98>
   1dafa:	9b08      	ldr	r3, [sp, #32]
   1dafc:	2b08      	cmp	r3, #8
   1dafe:	f000 8095 	beq.w	1dc2c <getTrngSource+0x254>
   1db02:	2b04      	cmp	r3, #4
   1db04:	f000 8095 	beq.w	1dc32 <getTrngSource+0x25a>
   1db08:	f1a3 0302 	sub.w	r3, r3, #2
   1db0c:	fab3 f383 	clz	r3, r3
   1db10:	095b      	lsrs	r3, r3, #5
   1db12:	9304      	str	r3, [sp, #16]
   1db14:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   1db18:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
   1db1c:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   1db20:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1db22:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   1db26:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   1db2a:	4293      	cmp	r3, r2
   1db2c:	d1f6      	bne.n	1db1c <getTrngSource+0x144>
   1db2e:	f04f 0b00 	mov.w	fp, #0
   1db32:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   1db36:	f04f 30ff 	mov.w	r0, #4294967295
   1db3a:	f7ff fd05 	bl	1d548 <CC_HalClearInterruptBit>
   1db3e:	f06f 031b 	mvn.w	r3, #27
   1db42:	4658      	mov	r0, fp
   1db44:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1db48:	f7ff fd0c 	bl	1d564 <CC_HalMaskInterrupt>
   1db4c:	9b04      	ldr	r3, [sp, #16]
   1db4e:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   1db52:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   1db56:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1db5a:	f7ff fd03 	bl	1d564 <CC_HalMaskInterrupt>
   1db5e:	230a      	movs	r3, #10
   1db60:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   1db64:	692b      	ldr	r3, [r5, #16]
   1db66:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   1db6a:	fbab 2303 	umull	r2, r3, fp, r3
   1db6e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1db70:	091b      	lsrs	r3, r3, #4
   1db72:	fb02 f303 	mul.w	r3, r2, r3
   1db76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1db7a:	03db      	lsls	r3, r3, #15
   1db7c:	099b      	lsrs	r3, r3, #6
   1db7e:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   1db82:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
   1db86:	9908      	ldr	r1, [sp, #32]
   1db88:	f8d9 2000 	ldr.w	r2, [r9]
   1db8c:	020b      	lsls	r3, r1, #8
   1db8e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1db92:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1db96:	4313      	orrs	r3, r2
   1db98:	f8c9 3000 	str.w	r3, [r9]
   1db9c:	a809      	add	r0, sp, #36	; 0x24
   1db9e:	f000 fbdb 	bl	1e358 <LLF_RND_WaitRngInterrupt>
   1dba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1dba4:	f003 031a 	and.w	r3, r3, #26
   1dba8:	4303      	orrs	r3, r0
   1dbaa:	f47f af7d 	bne.w	1daa8 <getTrngSource+0xd0>
   1dbae:	fbab 3b06 	umull	r3, fp, fp, r6
   1dbb2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1dbb6:	930a      	str	r3, [sp, #40]	; 0x28
   1dbb8:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   1dbbc:	930b      	str	r3, [sp, #44]	; 0x2c
   1dbbe:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1dbc2:	930c      	str	r3, [sp, #48]	; 0x30
   1dbc4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1dbc8:	930d      	str	r3, [sp, #52]	; 0x34
   1dbca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1dbce:	930e      	str	r3, [sp, #56]	; 0x38
   1dbd0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dbd4:	930f      	str	r3, [sp, #60]	; 0x3c
   1dbd6:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   1dbda:	d101      	bne.n	1dbe0 <getTrngSource+0x208>
   1dbdc:	9b03      	ldr	r3, [sp, #12]
   1dbde:	b9eb      	cbnz	r3, 1dc1c <getTrngSource+0x244>
   1dbe0:	4640      	mov	r0, r8
   1dbe2:	2218      	movs	r2, #24
   1dbe4:	a90a      	add	r1, sp, #40	; 0x28
   1dbe6:	3e18      	subs	r6, #24
   1dbe8:	f108 0818 	add.w	r8, r8, #24
   1dbec:	f7ff fd3a 	bl	1d664 <CC_PalMemCopyPlat>
   1dbf0:	3701      	adds	r7, #1
   1dbf2:	2e00      	cmp	r6, #0
   1dbf4:	f47f af29 	bne.w	1da4a <getTrngSource+0x72>
   1dbf8:	9b06      	ldr	r3, [sp, #24]
   1dbfa:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   1dbfe:	d836      	bhi.n	1dc6e <getTrngSource+0x296>
   1dc00:	9e07      	ldr	r6, [sp, #28]
   1dc02:	696a      	ldr	r2, [r5, #20]
   1dc04:	4619      	mov	r1, r3
   1dc06:	4630      	mov	r0, r6
   1dc08:	461f      	mov	r7, r3
   1dc0a:	f7ff fe75 	bl	1d8f8 <LLF_RND_RepetitionCounterTest.part.0>
   1dc0e:	b320      	cbz	r0, 1dc5a <getTrngSource+0x282>
   1dc10:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1dc12:	2300      	movs	r3, #0
   1dc14:	6013      	str	r3, [r2, #0]
   1dc16:	e72b      	b.n	1da70 <getTrngSource+0x98>
   1dc18:	481b      	ldr	r0, [pc, #108]	; (1dc88 <getTrngSource+0x2b0>)
   1dc1a:	e729      	b.n	1da70 <getTrngSource+0x98>
   1dc1c:	4640      	mov	r0, r8
   1dc1e:	461a      	mov	r2, r3
   1dc20:	a90a      	add	r1, sp, #40	; 0x28
   1dc22:	1af6      	subs	r6, r6, r3
   1dc24:	4498      	add	r8, r3
   1dc26:	f7ff fd1d 	bl	1d664 <CC_PalMemCopyPlat>
   1dc2a:	e7e1      	b.n	1dbf0 <getTrngSource+0x218>
   1dc2c:	2303      	movs	r3, #3
   1dc2e:	9304      	str	r3, [sp, #16]
   1dc30:	e770      	b.n	1db14 <getTrngSource+0x13c>
   1dc32:	2302      	movs	r3, #2
   1dc34:	9304      	str	r3, [sp, #16]
   1dc36:	e76d      	b.n	1db14 <getTrngSource+0x13c>
   1dc38:	6a2b      	ldr	r3, [r5, #32]
   1dc3a:	2b00      	cmp	r3, #0
   1dc3c:	f43f af1b 	beq.w	1da76 <getTrngSource+0x9e>
   1dc40:	4812      	ldr	r0, [pc, #72]	; (1dc8c <getTrngSource+0x2b4>)
   1dc42:	e718      	b.n	1da76 <getTrngSource+0x9e>
   1dc44:	9100      	str	r1, [sp, #0]
   1dc46:	ab08      	add	r3, sp, #32
   1dc48:	2201      	movs	r2, #1
   1dc4a:	4629      	mov	r1, r5
   1dc4c:	4648      	mov	r0, r9
   1dc4e:	f7ff fdab 	bl	1d7a8 <startTrngHW>
   1dc52:	2800      	cmp	r0, #0
   1dc54:	f43f aedf 	beq.w	1da16 <getTrngSource+0x3e>
   1dc58:	e70d      	b.n	1da76 <getTrngSource+0x9e>
   1dc5a:	69aa      	ldr	r2, [r5, #24]
   1dc5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1dc60:	4639      	mov	r1, r7
   1dc62:	4630      	mov	r0, r6
   1dc64:	f7ff fe72 	bl	1d94c <LLF_RND_AdaptiveProportionTest>
   1dc68:	2800      	cmp	r0, #0
   1dc6a:	d1d1      	bne.n	1dc10 <getTrngSource+0x238>
   1dc6c:	e73d      	b.n	1daea <getTrngSource+0x112>
   1dc6e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1dc70:	601e      	str	r6, [r3, #0]
   1dc72:	e719      	b.n	1daa8 <getTrngSource+0xd0>
   1dc74:	5002b000 	.word	0x5002b000
   1dc78:	aaaaaaab 	.word	0xaaaaaaab
   1dc7c:	00f10c02 	.word	0x00f10c02
   1dc80:	00f10c30 	.word	0x00f10c30
   1dc84:	00f10c31 	.word	0x00f10c31
   1dc88:	00f10c35 	.word	0x00f10c35
   1dc8c:	00f10c32 	.word	0x00f10c32

0001dc90 <LLF_RND_GetTrngSource>:
   1dc90:	b410      	push	{r4}
   1dc92:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   1dc96:	9401      	str	r4, [sp, #4]
   1dc98:	9c03      	ldr	r4, [sp, #12]
   1dc9a:	9402      	str	r4, [sp, #8]
   1dc9c:	2400      	movs	r4, #0
   1dc9e:	9403      	str	r4, [sp, #12]
   1dca0:	bc10      	pop	{r4}
   1dca2:	f7ff be99 	b.w	1d9d8 <getTrngSource>
   1dca6:	bf00      	nop

0001dca8 <LLF_RND_RunTrngStartupTest>:
   1dca8:	b510      	push	{r4, lr}
   1dcaa:	b086      	sub	sp, #24
   1dcac:	ab05      	add	r3, sp, #20
   1dcae:	2401      	movs	r4, #1
   1dcb0:	e9cd 2401 	strd	r2, r4, [sp, #4]
   1dcb4:	9300      	str	r3, [sp, #0]
   1dcb6:	2200      	movs	r2, #0
   1dcb8:	ab04      	add	r3, sp, #16
   1dcba:	f7ff fe8d 	bl	1d9d8 <getTrngSource>
   1dcbe:	b006      	add	sp, #24
   1dcc0:	bd10      	pop	{r4, pc}
   1dcc2:	bf00      	nop

0001dcc4 <mbedtls_hardware_poll>:
   1dcc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dcc6:	b089      	sub	sp, #36	; 0x24
   1dcc8:	9205      	str	r2, [sp, #20]
   1dcca:	2900      	cmp	r1, #0
   1dccc:	d064      	beq.n	1dd98 <mbedtls_hardware_poll+0xd4>
   1dcce:	461c      	mov	r4, r3
   1dcd0:	2b00      	cmp	r3, #0
   1dcd2:	d061      	beq.n	1dd98 <mbedtls_hardware_poll+0xd4>
   1dcd4:	4615      	mov	r5, r2
   1dcd6:	2a00      	cmp	r2, #0
   1dcd8:	d05e      	beq.n	1dd98 <mbedtls_hardware_poll+0xd4>
   1dcda:	4f31      	ldr	r7, [pc, #196]	; (1dda0 <mbedtls_hardware_poll+0xdc>)
   1dcdc:	460e      	mov	r6, r1
   1dcde:	6838      	ldr	r0, [r7, #0]
   1dce0:	f04f 31ff 	mov.w	r1, #4294967295
   1dce4:	f7ff fcda 	bl	1d69c <CC_PalMutexLock>
   1dce8:	2800      	cmp	r0, #0
   1dcea:	d14b      	bne.n	1dd84 <mbedtls_hardware_poll+0xc0>
   1dcec:	2000      	movs	r0, #0
   1dcee:	f7ff fd05 	bl	1d6fc <CC_PalPowerSaveModeSelect>
   1dcf2:	2800      	cmp	r0, #0
   1dcf4:	d142      	bne.n	1dd7c <mbedtls_hardware_poll+0xb8>
   1dcf6:	482b      	ldr	r0, [pc, #172]	; (1dda4 <mbedtls_hardware_poll+0xe0>)
   1dcf8:	f000 fa9e 	bl	1e238 <RNG_PLAT_SetUserRngParameters>
   1dcfc:	b1d8      	cbz	r0, 1dd36 <mbedtls_hardware_poll+0x72>
   1dcfe:	2001      	movs	r0, #1
   1dd00:	f04f 36ff 	mov.w	r6, #4294967295
   1dd04:	f7ff fcfa 	bl	1d6fc <CC_PalPowerSaveModeSelect>
   1dd08:	2800      	cmp	r0, #0
   1dd0a:	d133      	bne.n	1dd74 <mbedtls_hardware_poll+0xb0>
   1dd0c:	4826      	ldr	r0, [pc, #152]	; (1dda8 <mbedtls_hardware_poll+0xe4>)
   1dd0e:	f44f 7108 	mov.w	r1, #544	; 0x220
   1dd12:	f7fe fe6d 	bl	1c9f0 <mbedtls_zeroize_internal>
   1dd16:	4825      	ldr	r0, [pc, #148]	; (1ddac <mbedtls_hardware_poll+0xe8>)
   1dd18:	2104      	movs	r1, #4
   1dd1a:	f7fe fe69 	bl	1c9f0 <mbedtls_zeroize_internal>
   1dd1e:	4821      	ldr	r0, [pc, #132]	; (1dda4 <mbedtls_hardware_poll+0xe0>)
   1dd20:	2128      	movs	r1, #40	; 0x28
   1dd22:	f7fe fe65 	bl	1c9f0 <mbedtls_zeroize_internal>
   1dd26:	6838      	ldr	r0, [r7, #0]
   1dd28:	f7ff fcc0 	bl	1d6ac <CC_PalMutexUnlock>
   1dd2c:	2800      	cmp	r0, #0
   1dd2e:	d12d      	bne.n	1dd8c <mbedtls_hardware_poll+0xc8>
   1dd30:	4630      	mov	r0, r6
   1dd32:	b009      	add	sp, #36	; 0x24
   1dd34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dd36:	4b1c      	ldr	r3, [pc, #112]	; (1dda8 <mbedtls_hardware_poll+0xe4>)
   1dd38:	9302      	str	r3, [sp, #8]
   1dd3a:	ab07      	add	r3, sp, #28
   1dd3c:	9003      	str	r0, [sp, #12]
   1dd3e:	4602      	mov	r2, r0
   1dd40:	9300      	str	r3, [sp, #0]
   1dd42:	4918      	ldr	r1, [pc, #96]	; (1dda4 <mbedtls_hardware_poll+0xe0>)
   1dd44:	4819      	ldr	r0, [pc, #100]	; (1ddac <mbedtls_hardware_poll+0xe8>)
   1dd46:	9401      	str	r4, [sp, #4]
   1dd48:	ab05      	add	r3, sp, #20
   1dd4a:	f7ff ffa1 	bl	1dc90 <LLF_RND_GetTrngSource>
   1dd4e:	4603      	mov	r3, r0
   1dd50:	2800      	cmp	r0, #0
   1dd52:	d1d4      	bne.n	1dcfe <mbedtls_hardware_poll+0x3a>
   1dd54:	6822      	ldr	r2, [r4, #0]
   1dd56:	42aa      	cmp	r2, r5
   1dd58:	d3d1      	bcc.n	1dcfe <mbedtls_hardware_poll+0x3a>
   1dd5a:	9907      	ldr	r1, [sp, #28]
   1dd5c:	4630      	mov	r0, r6
   1dd5e:	3108      	adds	r1, #8
   1dd60:	462a      	mov	r2, r5
   1dd62:	461e      	mov	r6, r3
   1dd64:	f7ff fc7e 	bl	1d664 <CC_PalMemCopyPlat>
   1dd68:	6025      	str	r5, [r4, #0]
   1dd6a:	2001      	movs	r0, #1
   1dd6c:	f7ff fcc6 	bl	1d6fc <CC_PalPowerSaveModeSelect>
   1dd70:	2800      	cmp	r0, #0
   1dd72:	d0cb      	beq.n	1dd0c <mbedtls_hardware_poll+0x48>
   1dd74:	480e      	ldr	r0, [pc, #56]	; (1ddb0 <mbedtls_hardware_poll+0xec>)
   1dd76:	f7fe fd3d 	bl	1c7f4 <CC_PalAbort>
   1dd7a:	e7c7      	b.n	1dd0c <mbedtls_hardware_poll+0x48>
   1dd7c:	480d      	ldr	r0, [pc, #52]	; (1ddb4 <mbedtls_hardware_poll+0xf0>)
   1dd7e:	f7fe fd39 	bl	1c7f4 <CC_PalAbort>
   1dd82:	e7b8      	b.n	1dcf6 <mbedtls_hardware_poll+0x32>
   1dd84:	480c      	ldr	r0, [pc, #48]	; (1ddb8 <mbedtls_hardware_poll+0xf4>)
   1dd86:	f7fe fd35 	bl	1c7f4 <CC_PalAbort>
   1dd8a:	e7af      	b.n	1dcec <mbedtls_hardware_poll+0x28>
   1dd8c:	480b      	ldr	r0, [pc, #44]	; (1ddbc <mbedtls_hardware_poll+0xf8>)
   1dd8e:	f7fe fd31 	bl	1c7f4 <CC_PalAbort>
   1dd92:	4630      	mov	r0, r6
   1dd94:	b009      	add	sp, #36	; 0x24
   1dd96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dd98:	f04f 36ff 	mov.w	r6, #4294967295
   1dd9c:	e7c8      	b.n	1dd30 <mbedtls_hardware_poll+0x6c>
   1dd9e:	bf00      	nop
   1dda0:	2000091c 	.word	0x2000091c
   1dda4:	20003484 	.word	0x20003484
   1dda8:	20003264 	.word	0x20003264
   1ddac:	20003260 	.word	0x20003260
   1ddb0:	00024adc 	.word	0x00024adc
   1ddb4:	00024abc 	.word	0x00024abc
   1ddb8:	00024aa4 	.word	0x00024aa4
   1ddbc:	00024b34 	.word	0x00024b34

0001ddc0 <cc_mbedtls_aes_init>:
   1ddc0:	b510      	push	{r4, lr}
   1ddc2:	4604      	mov	r4, r0
   1ddc4:	b130      	cbz	r0, 1ddd4 <cc_mbedtls_aes_init+0x14>
   1ddc6:	2200      	movs	r2, #0
   1ddc8:	2301      	movs	r3, #1
   1ddca:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   1ddce:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   1ddd2:	bd10      	pop	{r4, pc}
   1ddd4:	4801      	ldr	r0, [pc, #4]	; (1dddc <cc_mbedtls_aes_init+0x1c>)
   1ddd6:	f7fe fd0d 	bl	1c7f4 <CC_PalAbort>
   1ddda:	e7f4      	b.n	1ddc6 <cc_mbedtls_aes_init+0x6>
   1dddc:	00024b4c 	.word	0x00024b4c

0001dde0 <cc_mbedtls_aes_free>:
   1dde0:	b118      	cbz	r0, 1ddea <cc_mbedtls_aes_free+0xa>
   1dde2:	2274      	movs	r2, #116	; 0x74
   1dde4:	2100      	movs	r1, #0
   1dde6:	f7ff bc3f 	b.w	1d668 <CC_PalMemSetPlat>
   1ddea:	4770      	bx	lr

0001ddec <cc_mbedtls_aes_setkey_enc>:
   1ddec:	b190      	cbz	r0, 1de14 <cc_mbedtls_aes_setkey_enc+0x28>
   1ddee:	b1a1      	cbz	r1, 1de1a <cc_mbedtls_aes_setkey_enc+0x2e>
   1ddf0:	b510      	push	{r4, lr}
   1ddf2:	2a80      	cmp	r2, #128	; 0x80
   1ddf4:	f04f 0400 	mov.w	r4, #0
   1ddf8:	6384      	str	r4, [r0, #56]	; 0x38
   1ddfa:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   1ddfe:	d106      	bne.n	1de0e <cc_mbedtls_aes_setkey_enc+0x22>
   1de00:	2210      	movs	r2, #16
   1de02:	6304      	str	r4, [r0, #48]	; 0x30
   1de04:	4410      	add	r0, r2
   1de06:	f7ff fc2d 	bl	1d664 <CC_PalMemCopyPlat>
   1de0a:	4620      	mov	r0, r4
   1de0c:	bd10      	pop	{r4, pc}
   1de0e:	f06f 001f 	mvn.w	r0, #31
   1de12:	bd10      	pop	{r4, pc}
   1de14:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1de18:	4770      	bx	lr
   1de1a:	f06f 001f 	mvn.w	r0, #31
   1de1e:	4770      	bx	lr

0001de20 <cc_mbedtls_aes_crypt_ecb>:
   1de20:	b328      	cbz	r0, 1de6e <cc_mbedtls_aes_crypt_ecb+0x4e>
   1de22:	b322      	cbz	r2, 1de6e <cc_mbedtls_aes_crypt_ecb+0x4e>
   1de24:	b31b      	cbz	r3, 1de6e <cc_mbedtls_aes_crypt_ecb+0x4e>
   1de26:	2901      	cmp	r1, #1
   1de28:	d821      	bhi.n	1de6e <cc_mbedtls_aes_crypt_ecb+0x4e>
   1de2a:	b570      	push	{r4, r5, r6, lr}
   1de2c:	4604      	mov	r4, r0
   1de2e:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1de30:	b086      	sub	sp, #24
   1de32:	d017      	beq.n	1de64 <cc_mbedtls_aes_crypt_ecb+0x44>
   1de34:	2901      	cmp	r1, #1
   1de36:	d117      	bne.n	1de68 <cc_mbedtls_aes_crypt_ecb+0x48>
   1de38:	2510      	movs	r5, #16
   1de3a:	2100      	movs	r1, #0
   1de3c:	eb0d 0605 	add.w	r6, sp, r5
   1de40:	6361      	str	r1, [r4, #52]	; 0x34
   1de42:	4610      	mov	r0, r2
   1de44:	9500      	str	r5, [sp, #0]
   1de46:	9601      	str	r6, [sp, #4]
   1de48:	aa02      	add	r2, sp, #8
   1de4a:	4629      	mov	r1, r5
   1de4c:	f000 face 	bl	1e3ec <SetDataBuffersInfo>
   1de50:	b950      	cbnz	r0, 1de68 <cc_mbedtls_aes_crypt_ecb+0x48>
   1de52:	462b      	mov	r3, r5
   1de54:	4632      	mov	r2, r6
   1de56:	a902      	add	r1, sp, #8
   1de58:	4620      	mov	r0, r4
   1de5a:	f000 fd37 	bl	1e8cc <ProcessAesDrv>
   1de5e:	b918      	cbnz	r0, 1de68 <cc_mbedtls_aes_crypt_ecb+0x48>
   1de60:	b006      	add	sp, #24
   1de62:	bd70      	pop	{r4, r5, r6, pc}
   1de64:	2900      	cmp	r1, #0
   1de66:	d0e7      	beq.n	1de38 <cc_mbedtls_aes_crypt_ecb+0x18>
   1de68:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1de6c:	e7f8      	b.n	1de60 <cc_mbedtls_aes_crypt_ecb+0x40>
   1de6e:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1de72:	4770      	bx	lr

0001de74 <cc_mbedtls_sha256_init>:
   1de74:	b510      	push	{r4, lr}
   1de76:	4604      	mov	r4, r0
   1de78:	b128      	cbz	r0, 1de86 <cc_mbedtls_sha256_init+0x12>
   1de7a:	4620      	mov	r0, r4
   1de7c:	21f4      	movs	r1, #244	; 0xf4
   1de7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1de82:	f7ff bbf3 	b.w	1d66c <CC_PalMemSetZeroPlat>
   1de86:	4804      	ldr	r0, [pc, #16]	; (1de98 <cc_mbedtls_sha256_init+0x24>)
   1de88:	f7fe fcb4 	bl	1c7f4 <CC_PalAbort>
   1de8c:	4620      	mov	r0, r4
   1de8e:	21f4      	movs	r1, #244	; 0xf4
   1de90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1de94:	f7ff bbea 	b.w	1d66c <CC_PalMemSetZeroPlat>
   1de98:	00024b60 	.word	0x00024b60

0001de9c <cc_mbedtls_sha256_free>:
   1de9c:	b110      	cbz	r0, 1dea4 <cc_mbedtls_sha256_free+0x8>
   1de9e:	21f4      	movs	r1, #244	; 0xf4
   1dea0:	f7fe bda6 	b.w	1c9f0 <mbedtls_zeroize_internal>
   1dea4:	4770      	bx	lr
   1dea6:	bf00      	nop

0001dea8 <cc_mbedtls_sha256_starts>:
   1dea8:	b508      	push	{r3, lr}
   1deaa:	b161      	cbz	r1, 1dec6 <cc_mbedtls_sha256_starts+0x1e>
   1deac:	2901      	cmp	r1, #1
   1deae:	d107      	bne.n	1dec0 <cc_mbedtls_sha256_starts+0x18>
   1deb0:	2102      	movs	r1, #2
   1deb2:	f000 f85b 	bl	1df6c <mbedtls_sha_starts_internal>
   1deb6:	2800      	cmp	r0, #0
   1deb8:	bf18      	it	ne
   1deba:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1debe:	bd08      	pop	{r3, pc}
   1dec0:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1dec4:	bd08      	pop	{r3, pc}
   1dec6:	2101      	movs	r1, #1
   1dec8:	f000 f850 	bl	1df6c <mbedtls_sha_starts_internal>
   1decc:	e7f3      	b.n	1deb6 <cc_mbedtls_sha256_starts+0xe>
   1dece:	bf00      	nop

0001ded0 <cc_mbedtls_sha256_update>:
   1ded0:	b530      	push	{r4, r5, lr}
   1ded2:	4605      	mov	r5, r0
   1ded4:	1888      	adds	r0, r1, r2
   1ded6:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   1deda:	b0a1      	sub	sp, #132	; 0x84
   1dedc:	460b      	mov	r3, r1
   1dede:	4614      	mov	r4, r2
   1dee0:	d801      	bhi.n	1dee6 <cc_mbedtls_sha256_update+0x16>
   1dee2:	2a80      	cmp	r2, #128	; 0x80
   1dee4:	d90c      	bls.n	1df00 <cc_mbedtls_sha256_update+0x30>
   1dee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1deea:	d917      	bls.n	1df1c <cc_mbedtls_sha256_update+0x4c>
   1deec:	4622      	mov	r2, r4
   1deee:	4619      	mov	r1, r3
   1def0:	4628      	mov	r0, r5
   1def2:	f000 f87d 	bl	1dff0 <mbedtls_sha_update_internal>
   1def6:	4604      	mov	r4, r0
   1def8:	b984      	cbnz	r4, 1df1c <cc_mbedtls_sha256_update+0x4c>
   1defa:	4620      	mov	r0, r4
   1defc:	b021      	add	sp, #132	; 0x84
   1defe:	bd30      	pop	{r4, r5, pc}
   1df00:	4668      	mov	r0, sp
   1df02:	f7ff fbaf 	bl	1d664 <CC_PalMemCopyPlat>
   1df06:	4622      	mov	r2, r4
   1df08:	4669      	mov	r1, sp
   1df0a:	4628      	mov	r0, r5
   1df0c:	f000 f870 	bl	1dff0 <mbedtls_sha_update_internal>
   1df10:	2180      	movs	r1, #128	; 0x80
   1df12:	4604      	mov	r4, r0
   1df14:	4668      	mov	r0, sp
   1df16:	f7ff fba9 	bl	1d66c <CC_PalMemSetZeroPlat>
   1df1a:	e7ed      	b.n	1def8 <cc_mbedtls_sha256_update+0x28>
   1df1c:	f06f 0436 	mvn.w	r4, #54	; 0x36
   1df20:	e7eb      	b.n	1defa <cc_mbedtls_sha256_update+0x2a>
   1df22:	bf00      	nop

0001df24 <cc_mbedtls_sha256_finish>:
   1df24:	b570      	push	{r4, r5, r6, lr}
   1df26:	b1e8      	cbz	r0, 1df64 <cc_mbedtls_sha256_finish+0x40>
   1df28:	460e      	mov	r6, r1
   1df2a:	b1d9      	cbz	r1, 1df64 <cc_mbedtls_sha256_finish+0x40>
   1df2c:	4604      	mov	r4, r0
   1df2e:	f000 f831 	bl	1df94 <mbedtls_sha_finish_internal>
   1df32:	4605      	mov	r5, r0
   1df34:	b9b0      	cbnz	r0, 1df64 <cc_mbedtls_sha256_finish+0x40>
   1df36:	6823      	ldr	r3, [r4, #0]
   1df38:	2b01      	cmp	r3, #1
   1df3a:	d00b      	beq.n	1df54 <cc_mbedtls_sha256_finish+0x30>
   1df3c:	2b02      	cmp	r3, #2
   1df3e:	d001      	beq.n	1df44 <cc_mbedtls_sha256_finish+0x20>
   1df40:	4628      	mov	r0, r5
   1df42:	bd70      	pop	{r4, r5, r6, pc}
   1df44:	221c      	movs	r2, #28
   1df46:	f104 0108 	add.w	r1, r4, #8
   1df4a:	4630      	mov	r0, r6
   1df4c:	f7ff fb8a 	bl	1d664 <CC_PalMemCopyPlat>
   1df50:	4628      	mov	r0, r5
   1df52:	bd70      	pop	{r4, r5, r6, pc}
   1df54:	2220      	movs	r2, #32
   1df56:	f104 0108 	add.w	r1, r4, #8
   1df5a:	4630      	mov	r0, r6
   1df5c:	f7ff fb82 	bl	1d664 <CC_PalMemCopyPlat>
   1df60:	4628      	mov	r0, r5
   1df62:	bd70      	pop	{r4, r5, r6, pc}
   1df64:	f06f 0536 	mvn.w	r5, #54	; 0x36
   1df68:	e7ea      	b.n	1df40 <cc_mbedtls_sha256_finish+0x1c>
   1df6a:	bf00      	nop

0001df6c <mbedtls_sha_starts_internal>:
   1df6c:	b178      	cbz	r0, 1df8e <mbedtls_sha_starts_internal+0x22>
   1df6e:	b538      	push	{r3, r4, r5, lr}
   1df70:	4604      	mov	r4, r0
   1df72:	460d      	mov	r5, r1
   1df74:	21f0      	movs	r1, #240	; 0xf0
   1df76:	f7ff fb79 	bl	1d66c <CC_PalMemSetZeroPlat>
   1df7a:	2340      	movs	r3, #64	; 0x40
   1df7c:	6025      	str	r5, [r4, #0]
   1df7e:	65e3      	str	r3, [r4, #92]	; 0x5c
   1df80:	4620      	mov	r0, r4
   1df82:	f000 fa67 	bl	1e454 <InitHashDrv>
   1df86:	3800      	subs	r0, #0
   1df88:	bf18      	it	ne
   1df8a:	2001      	movne	r0, #1
   1df8c:	bd38      	pop	{r3, r4, r5, pc}
   1df8e:	2001      	movs	r0, #1
   1df90:	4770      	bx	lr
   1df92:	bf00      	nop

0001df94 <mbedtls_sha_finish_internal>:
   1df94:	b570      	push	{r4, r5, r6, lr}
   1df96:	6e05      	ldr	r5, [r0, #96]	; 0x60
   1df98:	b0a4      	sub	sp, #144	; 0x90
   1df9a:	4604      	mov	r4, r0
   1df9c:	ae04      	add	r6, sp, #16
   1df9e:	b9e5      	cbnz	r5, 1dfda <mbedtls_sha_finish_internal+0x46>
   1dfa0:	2201      	movs	r2, #1
   1dfa2:	2300      	movs	r3, #0
   1dfa4:	6062      	str	r2, [r4, #4]
   1dfa6:	4630      	mov	r0, r6
   1dfa8:	e9cd 3300 	strd	r3, r3, [sp]
   1dfac:	aa02      	add	r2, sp, #8
   1dfae:	4629      	mov	r1, r5
   1dfb0:	f000 fa1c 	bl	1e3ec <SetDataBuffersInfo>
   1dfb4:	b110      	cbz	r0, 1dfbc <mbedtls_sha_finish_internal+0x28>
   1dfb6:	2001      	movs	r0, #1
   1dfb8:	b024      	add	sp, #144	; 0x90
   1dfba:	bd70      	pop	{r4, r5, r6, pc}
   1dfbc:	462a      	mov	r2, r5
   1dfbe:	a902      	add	r1, sp, #8
   1dfc0:	4620      	mov	r0, r4
   1dfc2:	f000 fa71 	bl	1e4a8 <ProcessHashDrv>
   1dfc6:	2800      	cmp	r0, #0
   1dfc8:	d1f5      	bne.n	1dfb6 <mbedtls_sha_finish_internal+0x22>
   1dfca:	4620      	mov	r0, r4
   1dfcc:	f000 fb82 	bl	1e6d4 <FinishHashDrv>
   1dfd0:	2800      	cmp	r0, #0
   1dfd2:	d1f0      	bne.n	1dfb6 <mbedtls_sha_finish_internal+0x22>
   1dfd4:	6620      	str	r0, [r4, #96]	; 0x60
   1dfd6:	b024      	add	sp, #144	; 0x90
   1dfd8:	bd70      	pop	{r4, r5, r6, pc}
   1dfda:	2d80      	cmp	r5, #128	; 0x80
   1dfdc:	462a      	mov	r2, r5
   1dfde:	f100 0164 	add.w	r1, r0, #100	; 0x64
   1dfe2:	bf28      	it	cs
   1dfe4:	2280      	movcs	r2, #128	; 0x80
   1dfe6:	4630      	mov	r0, r6
   1dfe8:	f7ff fb3c 	bl	1d664 <CC_PalMemCopyPlat>
   1dfec:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1dfee:	e7d7      	b.n	1dfa0 <mbedtls_sha_finish_internal+0xc>

0001dff0 <mbedtls_sha_update_internal>:
   1dff0:	2800      	cmp	r0, #0
   1dff2:	f000 80d9 	beq.w	1e1a8 <mbedtls_sha_update_internal+0x1b8>
   1dff6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dffa:	4617      	mov	r7, r2
   1dffc:	b0a5      	sub	sp, #148	; 0x94
   1dffe:	2a00      	cmp	r2, #0
   1e000:	f000 80a8 	beq.w	1e154 <mbedtls_sha_update_internal+0x164>
   1e004:	460c      	mov	r4, r1
   1e006:	2900      	cmp	r1, #0
   1e008:	d050      	beq.n	1e0ac <mbedtls_sha_update_internal+0xbc>
   1e00a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   1e00e:	4605      	mov	r5, r0
   1e010:	d32c      	bcc.n	1e06c <mbedtls_sha_update_internal+0x7c>
   1e012:	f64f 7aff 	movw	sl, #65535	; 0xffff
   1e016:	f5a2 477f 	sub.w	r7, r2, #65280	; 0xff00
   1e01a:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1e01c:	eb01 090a 	add.w	r9, r1, sl
   1e020:	3fff      	subs	r7, #255	; 0xff
   1e022:	f105 0b64 	add.w	fp, r5, #100	; 0x64
   1e026:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e028:	1a14      	subs	r4, r2, r0
   1e02a:	f5a9 467f 	sub.w	r6, r9, #65280	; 0xff00
   1e02e:	fbb4 f3f2 	udiv	r3, r4, r2
   1e032:	fb02 4413 	mls	r4, r2, r3, r4
   1e036:	3eff      	subs	r6, #255	; 0xff
   1e038:	2c00      	cmp	r4, #0
   1e03a:	d15f      	bne.n	1e0fc <mbedtls_sha_update_internal+0x10c>
   1e03c:	4282      	cmp	r2, r0
   1e03e:	f64f 74ff 	movw	r4, #65535	; 0xffff
   1e042:	d06c      	beq.n	1e11e <mbedtls_sha_update_internal+0x12e>
   1e044:	fbb4 f8f2 	udiv	r8, r4, r2
   1e048:	fb02 f808 	mul.w	r8, r2, r8
   1e04c:	f1b8 0f00 	cmp.w	r8, #0
   1e050:	d130      	bne.n	1e0b4 <mbedtls_sha_update_internal+0xc4>
   1e052:	2c00      	cmp	r4, #0
   1e054:	d145      	bne.n	1e0e2 <mbedtls_sha_update_internal+0xf2>
   1e056:	f5a7 437f 	sub.w	r3, r7, #65280	; 0xff00
   1e05a:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   1e05e:	464c      	mov	r4, r9
   1e060:	f1a3 03ff 	sub.w	r3, r3, #255	; 0xff
   1e064:	44d1      	add	r9, sl
   1e066:	d302      	bcc.n	1e06e <mbedtls_sha_update_internal+0x7e>
   1e068:	461f      	mov	r7, r3
   1e06a:	e7dc      	b.n	1e026 <mbedtls_sha_update_internal+0x36>
   1e06c:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1e06e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e070:	1a16      	subs	r6, r2, r0
   1e072:	fbb6 f3f2 	udiv	r3, r6, r2
   1e076:	fb02 6613 	mls	r6, r2, r3, r6
   1e07a:	42be      	cmp	r6, r7
   1e07c:	bf28      	it	cs
   1e07e:	463e      	movcs	r6, r7
   1e080:	2e00      	cmp	r6, #0
   1e082:	f040 8083 	bne.w	1e18c <mbedtls_sha_update_internal+0x19c>
   1e086:	4290      	cmp	r0, r2
   1e088:	f000 8090 	beq.w	1e1ac <mbedtls_sha_update_internal+0x1bc>
   1e08c:	fbb7 f6f2 	udiv	r6, r7, r2
   1e090:	fb02 f606 	mul.w	r6, r2, r6
   1e094:	2e00      	cmp	r6, #0
   1e096:	d06a      	beq.n	1e16e <mbedtls_sha_update_internal+0x17e>
   1e098:	2300      	movs	r3, #0
   1e09a:	e9cd 3300 	strd	r3, r3, [sp]
   1e09e:	aa02      	add	r2, sp, #8
   1e0a0:	4631      	mov	r1, r6
   1e0a2:	4620      	mov	r0, r4
   1e0a4:	f000 f9a2 	bl	1e3ec <SetDataBuffersInfo>
   1e0a8:	2800      	cmp	r0, #0
   1e0aa:	d057      	beq.n	1e15c <mbedtls_sha_update_internal+0x16c>
   1e0ac:	2001      	movs	r0, #1
   1e0ae:	b025      	add	sp, #148	; 0x94
   1e0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0b4:	2300      	movs	r3, #0
   1e0b6:	e9cd 3300 	strd	r3, r3, [sp]
   1e0ba:	aa02      	add	r2, sp, #8
   1e0bc:	4641      	mov	r1, r8
   1e0be:	4630      	mov	r0, r6
   1e0c0:	f000 f994 	bl	1e3ec <SetDataBuffersInfo>
   1e0c4:	2800      	cmp	r0, #0
   1e0c6:	d1f1      	bne.n	1e0ac <mbedtls_sha_update_internal+0xbc>
   1e0c8:	a902      	add	r1, sp, #8
   1e0ca:	4642      	mov	r2, r8
   1e0cc:	4628      	mov	r0, r5
   1e0ce:	f000 f9eb 	bl	1e4a8 <ProcessHashDrv>
   1e0d2:	2800      	cmp	r0, #0
   1e0d4:	d1ea      	bne.n	1e0ac <mbedtls_sha_update_internal+0xbc>
   1e0d6:	eba4 0408 	sub.w	r4, r4, r8
   1e0da:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1e0dc:	4446      	add	r6, r8
   1e0de:	2c00      	cmp	r4, #0
   1e0e0:	d0b9      	beq.n	1e056 <mbedtls_sha_update_internal+0x66>
   1e0e2:	3019      	adds	r0, #25
   1e0e4:	4631      	mov	r1, r6
   1e0e6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1e0ea:	4622      	mov	r2, r4
   1e0ec:	f7ff faba 	bl	1d664 <CC_PalMemCopyPlat>
   1e0f0:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1e0f2:	4420      	add	r0, r4
   1e0f4:	f5a7 437f 	sub.w	r3, r7, #65280	; 0xff00
   1e0f8:	6628      	str	r0, [r5, #96]	; 0x60
   1e0fa:	e7ae      	b.n	1e05a <mbedtls_sha_update_internal+0x6a>
   1e0fc:	4554      	cmp	r4, sl
   1e0fe:	bf28      	it	cs
   1e100:	4654      	movcs	r4, sl
   1e102:	4622      	mov	r2, r4
   1e104:	4631      	mov	r1, r6
   1e106:	4458      	add	r0, fp
   1e108:	f7ff faac 	bl	1d664 <CC_PalMemCopyPlat>
   1e10c:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1e10e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e110:	4420      	add	r0, r4
   1e112:	4282      	cmp	r2, r0
   1e114:	4426      	add	r6, r4
   1e116:	6628      	str	r0, [r5, #96]	; 0x60
   1e118:	ebaa 0404 	sub.w	r4, sl, r4
   1e11c:	d192      	bne.n	1e044 <mbedtls_sha_update_internal+0x54>
   1e11e:	2a80      	cmp	r2, #128	; 0x80
   1e120:	bf28      	it	cs
   1e122:	2280      	movcs	r2, #128	; 0x80
   1e124:	4659      	mov	r1, fp
   1e126:	a804      	add	r0, sp, #16
   1e128:	f7ff fa9c 	bl	1d664 <CC_PalMemCopyPlat>
   1e12c:	2300      	movs	r3, #0
   1e12e:	e9cd 3300 	strd	r3, r3, [sp]
   1e132:	aa02      	add	r2, sp, #8
   1e134:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   1e136:	a804      	add	r0, sp, #16
   1e138:	f000 f958 	bl	1e3ec <SetDataBuffersInfo>
   1e13c:	2800      	cmp	r0, #0
   1e13e:	d1b5      	bne.n	1e0ac <mbedtls_sha_update_internal+0xbc>
   1e140:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e142:	a902      	add	r1, sp, #8
   1e144:	4628      	mov	r0, r5
   1e146:	f000 f9af 	bl	1e4a8 <ProcessHashDrv>
   1e14a:	2800      	cmp	r0, #0
   1e14c:	d1ae      	bne.n	1e0ac <mbedtls_sha_update_internal+0xbc>
   1e14e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e150:	6628      	str	r0, [r5, #96]	; 0x60
   1e152:	e777      	b.n	1e044 <mbedtls_sha_update_internal+0x54>
   1e154:	4638      	mov	r0, r7
   1e156:	b025      	add	sp, #148	; 0x94
   1e158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e15c:	a902      	add	r1, sp, #8
   1e15e:	4632      	mov	r2, r6
   1e160:	4628      	mov	r0, r5
   1e162:	f000 f9a1 	bl	1e4a8 <ProcessHashDrv>
   1e166:	2800      	cmp	r0, #0
   1e168:	d1a0      	bne.n	1e0ac <mbedtls_sha_update_internal+0xbc>
   1e16a:	4434      	add	r4, r6
   1e16c:	1bbf      	subs	r7, r7, r6
   1e16e:	2f00      	cmp	r7, #0
   1e170:	d0f0      	beq.n	1e154 <mbedtls_sha_update_internal+0x164>
   1e172:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1e174:	3319      	adds	r3, #25
   1e176:	eb05 0083 	add.w	r0, r5, r3, lsl #2
   1e17a:	463a      	mov	r2, r7
   1e17c:	4621      	mov	r1, r4
   1e17e:	f7ff fa71 	bl	1d664 <CC_PalMemCopyPlat>
   1e182:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1e184:	443b      	add	r3, r7
   1e186:	2000      	movs	r0, #0
   1e188:	662b      	str	r3, [r5, #96]	; 0x60
   1e18a:	e790      	b.n	1e0ae <mbedtls_sha_update_internal+0xbe>
   1e18c:	f105 0364 	add.w	r3, r5, #100	; 0x64
   1e190:	4621      	mov	r1, r4
   1e192:	4632      	mov	r2, r6
   1e194:	4418      	add	r0, r3
   1e196:	f7ff fa65 	bl	1d664 <CC_PalMemCopyPlat>
   1e19a:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1e19c:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e19e:	4430      	add	r0, r6
   1e1a0:	1bbf      	subs	r7, r7, r6
   1e1a2:	4434      	add	r4, r6
   1e1a4:	6628      	str	r0, [r5, #96]	; 0x60
   1e1a6:	e76e      	b.n	1e086 <mbedtls_sha_update_internal+0x96>
   1e1a8:	2001      	movs	r0, #1
   1e1aa:	4770      	bx	lr
   1e1ac:	2a80      	cmp	r2, #128	; 0x80
   1e1ae:	bf28      	it	cs
   1e1b0:	2280      	movcs	r2, #128	; 0x80
   1e1b2:	f105 0164 	add.w	r1, r5, #100	; 0x64
   1e1b6:	a804      	add	r0, sp, #16
   1e1b8:	f7ff fa54 	bl	1d664 <CC_PalMemCopyPlat>
   1e1bc:	2300      	movs	r3, #0
   1e1be:	e9cd 3300 	strd	r3, r3, [sp]
   1e1c2:	a804      	add	r0, sp, #16
   1e1c4:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   1e1c6:	aa02      	add	r2, sp, #8
   1e1c8:	f000 f910 	bl	1e3ec <SetDataBuffersInfo>
   1e1cc:	2800      	cmp	r0, #0
   1e1ce:	f47f af6d 	bne.w	1e0ac <mbedtls_sha_update_internal+0xbc>
   1e1d2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e1d4:	a902      	add	r1, sp, #8
   1e1d6:	4628      	mov	r0, r5
   1e1d8:	f000 f966 	bl	1e4a8 <ProcessHashDrv>
   1e1dc:	2800      	cmp	r0, #0
   1e1de:	f47f af65 	bne.w	1e0ac <mbedtls_sha_update_internal+0xbc>
   1e1e2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e1e4:	6628      	str	r0, [r5, #96]	; 0x60
   1e1e6:	e751      	b.n	1e08c <mbedtls_sha_update_internal+0x9c>

0001e1e8 <cc_mbedtls_sha256>:
   1e1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e1ea:	461c      	mov	r4, r3
   1e1ec:	4605      	mov	r5, r0
   1e1ee:	4811      	ldr	r0, [pc, #68]	; (1e234 <cc_mbedtls_sha256+0x4c>)
   1e1f0:	460e      	mov	r6, r1
   1e1f2:	4617      	mov	r7, r2
   1e1f4:	f7ff fe3e 	bl	1de74 <cc_mbedtls_sha256_init>
   1e1f8:	4621      	mov	r1, r4
   1e1fa:	480e      	ldr	r0, [pc, #56]	; (1e234 <cc_mbedtls_sha256+0x4c>)
   1e1fc:	f7ff fe54 	bl	1dea8 <cc_mbedtls_sha256_starts>
   1e200:	4604      	mov	r4, r0
   1e202:	b120      	cbz	r0, 1e20e <cc_mbedtls_sha256+0x26>
   1e204:	480b      	ldr	r0, [pc, #44]	; (1e234 <cc_mbedtls_sha256+0x4c>)
   1e206:	f7ff fe49 	bl	1de9c <cc_mbedtls_sha256_free>
   1e20a:	4620      	mov	r0, r4
   1e20c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e20e:	4809      	ldr	r0, [pc, #36]	; (1e234 <cc_mbedtls_sha256+0x4c>)
   1e210:	4632      	mov	r2, r6
   1e212:	4629      	mov	r1, r5
   1e214:	f7ff fe5c 	bl	1ded0 <cc_mbedtls_sha256_update>
   1e218:	4604      	mov	r4, r0
   1e21a:	2800      	cmp	r0, #0
   1e21c:	d1f2      	bne.n	1e204 <cc_mbedtls_sha256+0x1c>
   1e21e:	4639      	mov	r1, r7
   1e220:	4804      	ldr	r0, [pc, #16]	; (1e234 <cc_mbedtls_sha256+0x4c>)
   1e222:	f7ff fe7f 	bl	1df24 <cc_mbedtls_sha256_finish>
   1e226:	4604      	mov	r4, r0
   1e228:	4802      	ldr	r0, [pc, #8]	; (1e234 <cc_mbedtls_sha256+0x4c>)
   1e22a:	f7ff fe37 	bl	1de9c <cc_mbedtls_sha256_free>
   1e22e:	4620      	mov	r0, r4
   1e230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e232:	bf00      	nop
   1e234:	200034ac 	.word	0x200034ac

0001e238 <RNG_PLAT_SetUserRngParameters>:
   1e238:	b530      	push	{r4, r5, lr}
   1e23a:	b083      	sub	sp, #12
   1e23c:	231c      	movs	r3, #28
   1e23e:	a901      	add	r1, sp, #4
   1e240:	4604      	mov	r4, r0
   1e242:	9301      	str	r3, [sp, #4]
   1e244:	f000 f834 	bl	1e2b0 <CC_PalTrngParamGet>
   1e248:	4605      	mov	r5, r0
   1e24a:	b938      	cbnz	r0, 1e25c <RNG_PLAT_SetUserRngParameters+0x24>
   1e24c:	9b01      	ldr	r3, [sp, #4]
   1e24e:	2b1c      	cmp	r3, #28
   1e250:	d007      	beq.n	1e262 <RNG_PLAT_SetUserRngParameters+0x2a>
   1e252:	4d15      	ldr	r5, [pc, #84]	; (1e2a8 <RNG_PLAT_SetUserRngParameters+0x70>)
   1e254:	211c      	movs	r1, #28
   1e256:	4620      	mov	r0, r4
   1e258:	f7ff fa08 	bl	1d66c <CC_PalMemSetZeroPlat>
   1e25c:	4628      	mov	r0, r5
   1e25e:	b003      	add	sp, #12
   1e260:	bd30      	pop	{r4, r5, pc}
   1e262:	e9d4 3200 	ldrd	r3, r2, [r4]
   1e266:	2101      	movs	r1, #1
   1e268:	3b00      	subs	r3, #0
   1e26a:	61e1      	str	r1, [r4, #28]
   1e26c:	bf18      	it	ne
   1e26e:	2301      	movne	r3, #1
   1e270:	b10a      	cbz	r2, 1e276 <RNG_PLAT_SetUserRngParameters+0x3e>
   1e272:	f043 0302 	orr.w	r3, r3, #2
   1e276:	68a2      	ldr	r2, [r4, #8]
   1e278:	b932      	cbnz	r2, 1e288 <RNG_PLAT_SetUserRngParameters+0x50>
   1e27a:	68e2      	ldr	r2, [r4, #12]
   1e27c:	b942      	cbnz	r2, 1e290 <RNG_PLAT_SetUserRngParameters+0x58>
   1e27e:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1e282:	b97b      	cbnz	r3, 1e2a4 <RNG_PLAT_SetUserRngParameters+0x6c>
   1e284:	4d09      	ldr	r5, [pc, #36]	; (1e2ac <RNG_PLAT_SetUserRngParameters+0x74>)
   1e286:	e7e5      	b.n	1e254 <RNG_PLAT_SetUserRngParameters+0x1c>
   1e288:	68e2      	ldr	r2, [r4, #12]
   1e28a:	f043 0304 	orr.w	r3, r3, #4
   1e28e:	b13a      	cbz	r2, 1e2a0 <RNG_PLAT_SetUserRngParameters+0x68>
   1e290:	f043 0308 	orr.w	r3, r3, #8
   1e294:	2200      	movs	r2, #0
   1e296:	4628      	mov	r0, r5
   1e298:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1e29c:	b003      	add	sp, #12
   1e29e:	bd30      	pop	{r4, r5, pc}
   1e2a0:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1e2a4:	4615      	mov	r5, r2
   1e2a6:	e7d9      	b.n	1e25c <RNG_PLAT_SetUserRngParameters+0x24>
   1e2a8:	00f00c37 	.word	0x00f00c37
   1e2ac:	00f00c0e 	.word	0x00f00c0e

0001e2b0 <CC_PalTrngParamGet>:
   1e2b0:	b118      	cbz	r0, 1e2ba <CC_PalTrngParamGet+0xa>
   1e2b2:	b111      	cbz	r1, 1e2ba <CC_PalTrngParamGet+0xa>
   1e2b4:	680b      	ldr	r3, [r1, #0]
   1e2b6:	2b1c      	cmp	r3, #28
   1e2b8:	d001      	beq.n	1e2be <CC_PalTrngParamGet+0xe>
   1e2ba:	2001      	movs	r0, #1
   1e2bc:	4770      	bx	lr
   1e2be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e2c2:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   1e2c6:	3201      	adds	r2, #1
   1e2c8:	bf14      	ite	ne
   1e2ca:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   1e2ce:	f241 225c 	movweq	r2, #4700	; 0x125c
   1e2d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e2d6:	6002      	str	r2, [r0, #0]
   1e2d8:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   1e2dc:	3201      	adds	r2, #1
   1e2de:	bf14      	ite	ne
   1e2e0:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   1e2e4:	f641 1264 	movweq	r2, #6500	; 0x1964
   1e2e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e2ec:	6042      	str	r2, [r0, #4]
   1e2ee:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   1e2f2:	3201      	adds	r2, #1
   1e2f4:	bf14      	ite	ne
   1e2f6:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   1e2fa:	f640 62d8 	movweq	r2, #3800	; 0xed8
   1e2fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e302:	6082      	str	r2, [r0, #8]
   1e304:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   1e308:	3201      	adds	r2, #1
   1e30a:	bf14      	ite	ne
   1e30c:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   1e310:	f241 3288 	movweq	r2, #5000	; 0x1388
   1e314:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e318:	60c2      	str	r2, [r0, #12]
   1e31a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   1e31e:	3201      	adds	r2, #1
   1e320:	bf14      	ite	ne
   1e322:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   1e326:	2290      	moveq	r2, #144	; 0x90
   1e328:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e32c:	6102      	str	r2, [r0, #16]
   1e32e:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   1e332:	3201      	adds	r2, #1
   1e334:	bf14      	ite	ne
   1e336:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   1e33a:	2251      	moveq	r2, #81	; 0x51
   1e33c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e340:	6142      	str	r2, [r0, #20]
   1e342:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   1e346:	3201      	adds	r2, #1
   1e348:	bf14      	ite	ne
   1e34a:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   1e34e:	f240 3337 	movweq	r3, #823	; 0x337
   1e352:	6183      	str	r3, [r0, #24]
   1e354:	2000      	movs	r0, #0
   1e356:	4770      	bx	lr

0001e358 <LLF_RND_WaitRngInterrupt>:
   1e358:	b508      	push	{r3, lr}
   1e35a:	4601      	mov	r1, r0
   1e35c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1e360:	f7ff f90c 	bl	1d57c <CC_HalWaitInterruptRND>
   1e364:	4b03      	ldr	r3, [pc, #12]	; (1e374 <LLF_RND_WaitRngInterrupt+0x1c>)
   1e366:	2200      	movs	r2, #0
   1e368:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   1e36c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   1e370:	bd08      	pop	{r3, pc}
   1e372:	bf00      	nop
   1e374:	5002b000 	.word	0x5002b000

0001e378 <LLF_RND_GetRoscSampleCnt>:
   1e378:	3801      	subs	r0, #1
   1e37a:	2807      	cmp	r0, #7
   1e37c:	d805      	bhi.n	1e38a <LLF_RND_GetRoscSampleCnt+0x12>
   1e37e:	e8df f000 	tbb	[pc, r0]
   1e382:	0e12      	.short	0x0e12
   1e384:	04040a04 	.word	0x04040a04
   1e388:	0604      	.short	0x0604
   1e38a:	4809      	ldr	r0, [pc, #36]	; (1e3b0 <LLF_RND_GetRoscSampleCnt+0x38>)
   1e38c:	4770      	bx	lr
   1e38e:	68cb      	ldr	r3, [r1, #12]
   1e390:	624b      	str	r3, [r1, #36]	; 0x24
   1e392:	2000      	movs	r0, #0
   1e394:	4770      	bx	lr
   1e396:	688b      	ldr	r3, [r1, #8]
   1e398:	624b      	str	r3, [r1, #36]	; 0x24
   1e39a:	2000      	movs	r0, #0
   1e39c:	4770      	bx	lr
   1e39e:	684b      	ldr	r3, [r1, #4]
   1e3a0:	624b      	str	r3, [r1, #36]	; 0x24
   1e3a2:	2000      	movs	r0, #0
   1e3a4:	4770      	bx	lr
   1e3a6:	680b      	ldr	r3, [r1, #0]
   1e3a8:	624b      	str	r3, [r1, #36]	; 0x24
   1e3aa:	2000      	movs	r0, #0
   1e3ac:	4770      	bx	lr
   1e3ae:	bf00      	nop
   1e3b0:	00f10c31 	.word	0x00f10c31

0001e3b4 <LLF_RND_GetFastestRosc>:
   1e3b4:	680b      	ldr	r3, [r1, #0]
   1e3b6:	e002      	b.n	1e3be <LLF_RND_GetFastestRosc+0xa>
   1e3b8:	2b08      	cmp	r3, #8
   1e3ba:	600b      	str	r3, [r1, #0]
   1e3bc:	d806      	bhi.n	1e3cc <LLF_RND_GetFastestRosc+0x18>
   1e3be:	6a02      	ldr	r2, [r0, #32]
   1e3c0:	4213      	tst	r3, r2
   1e3c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1e3c6:	d0f7      	beq.n	1e3b8 <LLF_RND_GetFastestRosc+0x4>
   1e3c8:	2000      	movs	r0, #0
   1e3ca:	4770      	bx	lr
   1e3cc:	4800      	ldr	r0, [pc, #0]	; (1e3d0 <LLF_RND_GetFastestRosc+0x1c>)
   1e3ce:	4770      	bx	lr
   1e3d0:	00f10c31 	.word	0x00f10c31

0001e3d4 <LLF_RND_TurnOffTrng>:
   1e3d4:	4b04      	ldr	r3, [pc, #16]	; (1e3e8 <LLF_RND_TurnOffTrng+0x14>)
   1e3d6:	2200      	movs	r2, #0
   1e3d8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   1e3dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1e3e0:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   1e3e4:	f7ff b8b0 	b.w	1d548 <CC_HalClearInterruptBit>
   1e3e8:	5002b000 	.word	0x5002b000

0001e3ec <SetDataBuffersInfo>:
   1e3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e3ee:	b083      	sub	sp, #12
   1e3f0:	461d      	mov	r5, r3
   1e3f2:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1e3f6:	f04f 0300 	mov.w	r3, #0
   1e3fa:	f88d 3007 	strb.w	r3, [sp, #7]
   1e3fe:	d324      	bcc.n	1e44a <SetDataBuffersInfo+0x5e>
   1e400:	468c      	mov	ip, r1
   1e402:	4484      	add	ip, r0
   1e404:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   1e408:	4604      	mov	r4, r0
   1e40a:	d81e      	bhi.n	1e44a <SetDataBuffersInfo+0x5e>
   1e40c:	4617      	mov	r7, r2
   1e40e:	f10d 0307 	add.w	r3, sp, #7
   1e412:	2201      	movs	r2, #1
   1e414:	f000 fe56 	bl	1f0c4 <CC_PalDataBufferAttrGet>
   1e418:	4606      	mov	r6, r0
   1e41a:	b9b0      	cbnz	r0, 1e44a <SetDataBuffersInfo+0x5e>
   1e41c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e41e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e422:	603c      	str	r4, [r7, #0]
   1e424:	713b      	strb	r3, [r7, #4]
   1e426:	b192      	cbz	r2, 1e44e <SetDataBuffersInfo+0x62>
   1e428:	b14d      	cbz	r5, 1e43e <SetDataBuffersInfo+0x52>
   1e42a:	4602      	mov	r2, r0
   1e42c:	9908      	ldr	r1, [sp, #32]
   1e42e:	f10d 0307 	add.w	r3, sp, #7
   1e432:	4628      	mov	r0, r5
   1e434:	f000 fe46 	bl	1f0c4 <CC_PalDataBufferAttrGet>
   1e438:	b938      	cbnz	r0, 1e44a <SetDataBuffersInfo+0x5e>
   1e43a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e43e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e440:	4630      	mov	r0, r6
   1e442:	6015      	str	r5, [r2, #0]
   1e444:	7113      	strb	r3, [r2, #4]
   1e446:	b003      	add	sp, #12
   1e448:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e44a:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   1e44e:	4630      	mov	r0, r6
   1e450:	b003      	add	sp, #12
   1e452:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e454 <InitHashDrv>:
   1e454:	b1e8      	cbz	r0, 1e492 <InitHashDrv+0x3e>
   1e456:	b510      	push	{r4, lr}
   1e458:	6804      	ldr	r4, [r0, #0]
   1e45a:	2c01      	cmp	r4, #1
   1e45c:	d004      	beq.n	1e468 <InitHashDrv+0x14>
   1e45e:	2c02      	cmp	r4, #2
   1e460:	d010      	beq.n	1e484 <InitHashDrv+0x30>
   1e462:	b144      	cbz	r4, 1e476 <InitHashDrv+0x22>
   1e464:	480c      	ldr	r0, [pc, #48]	; (1e498 <InitHashDrv+0x44>)
   1e466:	bd10      	pop	{r4, pc}
   1e468:	490c      	ldr	r1, [pc, #48]	; (1e49c <InitHashDrv+0x48>)
   1e46a:	2220      	movs	r2, #32
   1e46c:	3008      	adds	r0, #8
   1e46e:	f7ff f8f9 	bl	1d664 <CC_PalMemCopyPlat>
   1e472:	2000      	movs	r0, #0
   1e474:	bd10      	pop	{r4, pc}
   1e476:	490a      	ldr	r1, [pc, #40]	; (1e4a0 <InitHashDrv+0x4c>)
   1e478:	2214      	movs	r2, #20
   1e47a:	3008      	adds	r0, #8
   1e47c:	f7ff f8f2 	bl	1d664 <CC_PalMemCopyPlat>
   1e480:	4620      	mov	r0, r4
   1e482:	bd10      	pop	{r4, pc}
   1e484:	4907      	ldr	r1, [pc, #28]	; (1e4a4 <InitHashDrv+0x50>)
   1e486:	2220      	movs	r2, #32
   1e488:	3008      	adds	r0, #8
   1e48a:	f7ff f8eb 	bl	1d664 <CC_PalMemCopyPlat>
   1e48e:	2000      	movs	r0, #0
   1e490:	bd10      	pop	{r4, pc}
   1e492:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1e496:	4770      	bx	lr
   1e498:	00f30001 	.word	0x00f30001
   1e49c:	00024ba4 	.word	0x00024ba4
   1e4a0:	00024b70 	.word	0x00024b70
   1e4a4:	00024b84 	.word	0x00024b84

0001e4a8 <ProcessHashDrv>:
   1e4a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e4ac:	2900      	cmp	r1, #0
   1e4ae:	f000 80f9 	beq.w	1e6a4 <ProcessHashDrv+0x1fc>
   1e4b2:	4604      	mov	r4, r0
   1e4b4:	2800      	cmp	r0, #0
   1e4b6:	f000 80f9 	beq.w	1e6ac <ProcessHashDrv+0x204>
   1e4ba:	6803      	ldr	r3, [r0, #0]
   1e4bc:	4690      	mov	r8, r2
   1e4be:	460f      	mov	r7, r1
   1e4c0:	2b00      	cmp	r3, #0
   1e4c2:	f000 80c3 	beq.w	1e64c <ProcessHashDrv+0x1a4>
   1e4c6:	3b01      	subs	r3, #1
   1e4c8:	2b01      	cmp	r3, #1
   1e4ca:	f200 80d7 	bhi.w	1e67c <ProcessHashDrv+0x1d4>
   1e4ce:	4879      	ldr	r0, [pc, #484]	; (1e6b4 <ProcessHashDrv+0x20c>)
   1e4d0:	f04f 31ff 	mov.w	r1, #4294967295
   1e4d4:	f04f 0902 	mov.w	r9, #2
   1e4d8:	f7ff f8e0 	bl	1d69c <CC_PalMutexLock>
   1e4dc:	2800      	cmp	r0, #0
   1e4de:	f040 80bf 	bne.w	1e660 <ProcessHashDrv+0x1b8>
   1e4e2:	2000      	movs	r0, #0
   1e4e4:	f7ff f90a 	bl	1d6fc <CC_PalPowerSaveModeSelect>
   1e4e8:	4606      	mov	r6, r0
   1e4ea:	2800      	cmp	r0, #0
   1e4ec:	f040 80c2 	bne.w	1e674 <ProcessHashDrv+0x1cc>
   1e4f0:	4a71      	ldr	r2, [pc, #452]	; (1e6b8 <ProcessHashDrv+0x210>)
   1e4f2:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   1e4f6:	2b00      	cmp	r3, #0
   1e4f8:	d1fb      	bne.n	1e4f2 <ProcessHashDrv+0x4a>
   1e4fa:	4d6f      	ldr	r5, [pc, #444]	; (1e6b8 <ProcessHashDrv+0x210>)
   1e4fc:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   1e500:	2b00      	cmp	r3, #0
   1e502:	d1fb      	bne.n	1e4fc <ProcessHashDrv+0x54>
   1e504:	f04f 30ff 	mov.w	r0, #4294967295
   1e508:	f7ff f81e 	bl	1d548 <CC_HalClearInterruptBit>
   1e50c:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   1e510:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   1e514:	f7ff f826 	bl	1d564 <CC_HalMaskInterrupt>
   1e518:	2301      	movs	r3, #1
   1e51a:	2207      	movs	r2, #7
   1e51c:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   1e520:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   1e524:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   1e528:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1e52a:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   1e52e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1e530:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   1e534:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   1e538:	6823      	ldr	r3, [r4, #0]
   1e53a:	b15b      	cbz	r3, 1e554 <ProcessHashDrv+0xac>
   1e53c:	3b01      	subs	r3, #1
   1e53e:	2b01      	cmp	r3, #1
   1e540:	d818      	bhi.n	1e574 <ProcessHashDrv+0xcc>
   1e542:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e544:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   1e548:	6a23      	ldr	r3, [r4, #32]
   1e54a:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   1e54e:	69e3      	ldr	r3, [r4, #28]
   1e550:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   1e554:	4b58      	ldr	r3, [pc, #352]	; (1e6b8 <ProcessHashDrv+0x210>)
   1e556:	69a2      	ldr	r2, [r4, #24]
   1e558:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   1e55c:	6962      	ldr	r2, [r4, #20]
   1e55e:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   1e562:	6922      	ldr	r2, [r4, #16]
   1e564:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   1e568:	68e2      	ldr	r2, [r4, #12]
   1e56a:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   1e56e:	68a2      	ldr	r2, [r4, #8]
   1e570:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   1e574:	4a50      	ldr	r2, [pc, #320]	; (1e6b8 <ProcessHashDrv+0x210>)
   1e576:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e57a:	2b00      	cmp	r3, #0
   1e57c:	d1fb      	bne.n	1e576 <ProcessHashDrv+0xce>
   1e57e:	f1b8 0f00 	cmp.w	r8, #0
   1e582:	d05f      	beq.n	1e644 <ProcessHashDrv+0x19c>
   1e584:	6863      	ldr	r3, [r4, #4]
   1e586:	2b01      	cmp	r3, #1
   1e588:	bf08      	it	eq
   1e58a:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   1e58e:	4b4a      	ldr	r3, [pc, #296]	; (1e6b8 <ProcessHashDrv+0x210>)
   1e590:	683a      	ldr	r2, [r7, #0]
   1e592:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   1e596:	2040      	movs	r0, #64	; 0x40
   1e598:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   1e59c:	f7fe ffe8 	bl	1d570 <CC_HalWaitInterrupt>
   1e5a0:	4606      	mov	r6, r0
   1e5a2:	4a45      	ldr	r2, [pc, #276]	; (1e6b8 <ProcessHashDrv+0x210>)
   1e5a4:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e5a8:	2b00      	cmp	r3, #0
   1e5aa:	d1fb      	bne.n	1e5a4 <ProcessHashDrv+0xfc>
   1e5ac:	4a42      	ldr	r2, [pc, #264]	; (1e6b8 <ProcessHashDrv+0x210>)
   1e5ae:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   1e5b2:	2b00      	cmp	r3, #0
   1e5b4:	d1fb      	bne.n	1e5ae <ProcessHashDrv+0x106>
   1e5b6:	6823      	ldr	r3, [r4, #0]
   1e5b8:	b15b      	cbz	r3, 1e5d2 <ProcessHashDrv+0x12a>
   1e5ba:	3b01      	subs	r3, #1
   1e5bc:	2b01      	cmp	r3, #1
   1e5be:	d818      	bhi.n	1e5f2 <ProcessHashDrv+0x14a>
   1e5c0:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   1e5c4:	6263      	str	r3, [r4, #36]	; 0x24
   1e5c6:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   1e5ca:	6223      	str	r3, [r4, #32]
   1e5cc:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   1e5d0:	61e3      	str	r3, [r4, #28]
   1e5d2:	4b39      	ldr	r3, [pc, #228]	; (1e6b8 <ProcessHashDrv+0x210>)
   1e5d4:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1e5d8:	61a2      	str	r2, [r4, #24]
   1e5da:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   1e5de:	6162      	str	r2, [r4, #20]
   1e5e0:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   1e5e4:	6122      	str	r2, [r4, #16]
   1e5e6:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   1e5ea:	60e2      	str	r2, [r4, #12]
   1e5ec:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   1e5f0:	60a3      	str	r3, [r4, #8]
   1e5f2:	4a31      	ldr	r2, [pc, #196]	; (1e6b8 <ProcessHashDrv+0x210>)
   1e5f4:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   1e5f8:	64a1      	str	r1, [r4, #72]	; 0x48
   1e5fa:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   1e5fe:	64e1      	str	r1, [r4, #76]	; 0x4c
   1e600:	2300      	movs	r3, #0
   1e602:	2101      	movs	r1, #1
   1e604:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   1e608:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   1e60c:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   1e610:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e614:	2b00      	cmp	r3, #0
   1e616:	d1fb      	bne.n	1e610 <ProcessHashDrv+0x168>
   1e618:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   1e61c:	2e00      	cmp	r6, #0
   1e61e:	d13b      	bne.n	1e698 <ProcessHashDrv+0x1f0>
   1e620:	4b25      	ldr	r3, [pc, #148]	; (1e6b8 <ProcessHashDrv+0x210>)
   1e622:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   1e626:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1e62a:	f7fe ff9b 	bl	1d564 <CC_HalMaskInterrupt>
   1e62e:	2001      	movs	r0, #1
   1e630:	f7ff f864 	bl	1d6fc <CC_PalPowerSaveModeSelect>
   1e634:	bb60      	cbnz	r0, 1e690 <ProcessHashDrv+0x1e8>
   1e636:	481f      	ldr	r0, [pc, #124]	; (1e6b4 <ProcessHashDrv+0x20c>)
   1e638:	f7ff f838 	bl	1d6ac <CC_PalMutexUnlock>
   1e63c:	bb10      	cbnz	r0, 1e684 <ProcessHashDrv+0x1dc>
   1e63e:	4630      	mov	r0, r6
   1e640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e644:	2304      	movs	r3, #4
   1e646:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   1e64a:	e7aa      	b.n	1e5a2 <ProcessHashDrv+0xfa>
   1e64c:	4819      	ldr	r0, [pc, #100]	; (1e6b4 <ProcessHashDrv+0x20c>)
   1e64e:	f04f 31ff 	mov.w	r1, #4294967295
   1e652:	f04f 0901 	mov.w	r9, #1
   1e656:	f7ff f821 	bl	1d69c <CC_PalMutexLock>
   1e65a:	2800      	cmp	r0, #0
   1e65c:	f43f af41 	beq.w	1e4e2 <ProcessHashDrv+0x3a>
   1e660:	4816      	ldr	r0, [pc, #88]	; (1e6bc <ProcessHashDrv+0x214>)
   1e662:	f7fe f8c7 	bl	1c7f4 <CC_PalAbort>
   1e666:	2000      	movs	r0, #0
   1e668:	f7ff f848 	bl	1d6fc <CC_PalPowerSaveModeSelect>
   1e66c:	4606      	mov	r6, r0
   1e66e:	2800      	cmp	r0, #0
   1e670:	f43f af3e 	beq.w	1e4f0 <ProcessHashDrv+0x48>
   1e674:	4812      	ldr	r0, [pc, #72]	; (1e6c0 <ProcessHashDrv+0x218>)
   1e676:	f7fe f8bd 	bl	1c7f4 <CC_PalAbort>
   1e67a:	e739      	b.n	1e4f0 <ProcessHashDrv+0x48>
   1e67c:	4e11      	ldr	r6, [pc, #68]	; (1e6c4 <ProcessHashDrv+0x21c>)
   1e67e:	4630      	mov	r0, r6
   1e680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e684:	4810      	ldr	r0, [pc, #64]	; (1e6c8 <ProcessHashDrv+0x220>)
   1e686:	f7fe f8b5 	bl	1c7f4 <CC_PalAbort>
   1e68a:	4630      	mov	r0, r6
   1e68c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e690:	480e      	ldr	r0, [pc, #56]	; (1e6cc <ProcessHashDrv+0x224>)
   1e692:	f7fe f8af 	bl	1c7f4 <CC_PalAbort>
   1e696:	e7ce      	b.n	1e636 <ProcessHashDrv+0x18e>
   1e698:	2110      	movs	r1, #16
   1e69a:	f104 0008 	add.w	r0, r4, #8
   1e69e:	f7fe ffe5 	bl	1d66c <CC_PalMemSetZeroPlat>
   1e6a2:	e7bd      	b.n	1e620 <ProcessHashDrv+0x178>
   1e6a4:	4e0a      	ldr	r6, [pc, #40]	; (1e6d0 <ProcessHashDrv+0x228>)
   1e6a6:	4630      	mov	r0, r6
   1e6a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e6ac:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   1e6b0:	e7c5      	b.n	1e63e <ProcessHashDrv+0x196>
   1e6b2:	bf00      	nop
   1e6b4:	20000918 	.word	0x20000918
   1e6b8:	5002b000 	.word	0x5002b000
   1e6bc:	00024aa4 	.word	0x00024aa4
   1e6c0:	00024abc 	.word	0x00024abc
   1e6c4:	00f30001 	.word	0x00f30001
   1e6c8:	00024afc 	.word	0x00024afc
   1e6cc:	00024adc 	.word	0x00024adc
   1e6d0:	00f30003 	.word	0x00f30003

0001e6d4 <FinishHashDrv>:
   1e6d4:	b398      	cbz	r0, 1e73e <FinishHashDrv+0x6a>
   1e6d6:	b470      	push	{r4, r5, r6}
   1e6d8:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   1e6dc:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   1e6e0:	ba26      	rev	r6, r4
   1e6e2:	ba0d      	rev	r5, r1
   1e6e4:	ba14      	rev	r4, r2
   1e6e6:	ba19      	rev	r1, r3
   1e6e8:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   1e6ec:	ba12      	rev	r2, r2
   1e6ee:	e9c0 4104 	strd	r4, r1, [r0, #16]
   1e6f2:	6182      	str	r2, [r0, #24]
   1e6f4:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   1e6f8:	e9c0 6502 	strd	r6, r5, [r0, #8]
   1e6fc:	ba1b      	rev	r3, r3
   1e6fe:	ba25      	rev	r5, r4
   1e700:	e9c0 3507 	strd	r3, r5, [r0, #28]
   1e704:	ba14      	rev	r4, r2
   1e706:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   1e70a:	6a81      	ldr	r1, [r0, #40]	; 0x28
   1e70c:	ba12      	rev	r2, r2
   1e70e:	ba09      	rev	r1, r1
   1e710:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   1e714:	62c2      	str	r2, [r0, #44]	; 0x2c
   1e716:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   1e71a:	ba1b      	rev	r3, r3
   1e71c:	ba25      	rev	r5, r4
   1e71e:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   1e722:	ba14      	rev	r4, r2
   1e724:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   1e728:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   1e72a:	ba12      	rev	r2, r2
   1e72c:	ba09      	rev	r1, r1
   1e72e:	ba1b      	rev	r3, r3
   1e730:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   1e734:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   1e738:	2000      	movs	r0, #0
   1e73a:	bc70      	pop	{r4, r5, r6}
   1e73c:	4770      	bx	lr
   1e73e:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1e742:	4770      	bx	lr

0001e744 <LoadAesKey>:
   1e744:	2800      	cmp	r0, #0
   1e746:	d046      	beq.n	1e7d6 <LoadAesKey+0x92>
   1e748:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   1e74c:	2b00      	cmp	r3, #0
   1e74e:	d033      	beq.n	1e7b8 <LoadAesKey+0x74>
   1e750:	2b03      	cmp	r3, #3
   1e752:	b510      	push	{r4, lr}
   1e754:	d013      	beq.n	1e77e <LoadAesKey+0x3a>
   1e756:	4821      	ldr	r0, [pc, #132]	; (1e7dc <LoadAesKey+0x98>)
   1e758:	4c21      	ldr	r4, [pc, #132]	; (1e7e0 <LoadAesKey+0x9c>)
   1e75a:	6822      	ldr	r2, [r4, #0]
   1e75c:	4b21      	ldr	r3, [pc, #132]	; (1e7e4 <LoadAesKey+0xa0>)
   1e75e:	6812      	ldr	r2, [r2, #0]
   1e760:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1e764:	6822      	ldr	r2, [r4, #0]
   1e766:	6852      	ldr	r2, [r2, #4]
   1e768:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1e76c:	6822      	ldr	r2, [r4, #0]
   1e76e:	6892      	ldr	r2, [r2, #8]
   1e770:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1e774:	6822      	ldr	r2, [r4, #0]
   1e776:	68d2      	ldr	r2, [r2, #12]
   1e778:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1e77c:	bd10      	pop	{r4, pc}
   1e77e:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1e780:	6c00      	ldr	r0, [r0, #64]	; 0x40
   1e782:	4c17      	ldr	r4, [pc, #92]	; (1e7e0 <LoadAesKey+0x9c>)
   1e784:	f000 fb98 	bl	1eeb8 <kmu_validate_kdr_slot_and_size>
   1e788:	2800      	cmp	r0, #0
   1e78a:	d1e6      	bne.n	1e75a <LoadAesKey+0x16>
   1e78c:	6822      	ldr	r2, [r4, #0]
   1e78e:	4b15      	ldr	r3, [pc, #84]	; (1e7e4 <LoadAesKey+0xa0>)
   1e790:	6812      	ldr	r2, [r2, #0]
   1e792:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1e796:	6822      	ldr	r2, [r4, #0]
   1e798:	6852      	ldr	r2, [r2, #4]
   1e79a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1e79e:	6822      	ldr	r2, [r4, #0]
   1e7a0:	6892      	ldr	r2, [r2, #8]
   1e7a2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1e7a6:	6822      	ldr	r2, [r4, #0]
   1e7a8:	68d2      	ldr	r2, [r2, #12]
   1e7aa:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1e7ae:	f000 fb8f 	bl	1eed0 <kmu_use_kdr_key>
   1e7b2:	2800      	cmp	r0, #0
   1e7b4:	d1d1      	bne.n	1e75a <LoadAesKey+0x16>
   1e7b6:	bd10      	pop	{r4, pc}
   1e7b8:	4a0a      	ldr	r2, [pc, #40]	; (1e7e4 <LoadAesKey+0xa0>)
   1e7ba:	6901      	ldr	r1, [r0, #16]
   1e7bc:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
   1e7c0:	6941      	ldr	r1, [r0, #20]
   1e7c2:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
   1e7c6:	6981      	ldr	r1, [r0, #24]
   1e7c8:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
   1e7cc:	69c1      	ldr	r1, [r0, #28]
   1e7ce:	f8c2 140c 	str.w	r1, [r2, #1036]	; 0x40c
   1e7d2:	4618      	mov	r0, r3
   1e7d4:	4770      	bx	lr
   1e7d6:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   1e7da:	4770      	bx	lr
   1e7dc:	00f10009 	.word	0x00f10009
   1e7e0:	20000908 	.word	0x20000908
   1e7e4:	5002b000 	.word	0x5002b000

0001e7e8 <InitAes.part.0>:
   1e7e8:	4a37      	ldr	r2, [pc, #220]	; (1e8c8 <InitAes.part.0+0xe0>)
   1e7ea:	b538      	push	{r3, r4, r5, lr}
   1e7ec:	4604      	mov	r4, r0
   1e7ee:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e7f2:	2b00      	cmp	r3, #0
   1e7f4:	d1fb      	bne.n	1e7ee <InitAes.part.0+0x6>
   1e7f6:	4a34      	ldr	r2, [pc, #208]	; (1e8c8 <InitAes.part.0+0xe0>)
   1e7f8:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   1e7fc:	2b00      	cmp	r3, #0
   1e7fe:	d1fb      	bne.n	1e7f8 <InitAes.part.0+0x10>
   1e800:	4a31      	ldr	r2, [pc, #196]	; (1e8c8 <InitAes.part.0+0xe0>)
   1e802:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   1e806:	2b00      	cmp	r3, #0
   1e808:	d1fb      	bne.n	1e802 <InitAes.part.0+0x1a>
   1e80a:	4a2f      	ldr	r2, [pc, #188]	; (1e8c8 <InitAes.part.0+0xe0>)
   1e80c:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   1e810:	2b00      	cmp	r3, #0
   1e812:	d1fb      	bne.n	1e80c <InitAes.part.0+0x24>
   1e814:	4a2c      	ldr	r2, [pc, #176]	; (1e8c8 <InitAes.part.0+0xe0>)
   1e816:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   1e81a:	2b00      	cmp	r3, #0
   1e81c:	d1fb      	bne.n	1e816 <InitAes.part.0+0x2e>
   1e81e:	4d2a      	ldr	r5, [pc, #168]	; (1e8c8 <InitAes.part.0+0xe0>)
   1e820:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   1e824:	2b00      	cmp	r3, #0
   1e826:	d1fb      	bne.n	1e820 <InitAes.part.0+0x38>
   1e828:	f04f 30ff 	mov.w	r0, #4294967295
   1e82c:	f7fe fe8c 	bl	1d548 <CC_HalClearInterruptBit>
   1e830:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e832:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   1e836:	f023 0304 	bic.w	r3, r3, #4
   1e83a:	2b03      	cmp	r3, #3
   1e83c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1e83e:	d039      	beq.n	1e8b4 <InitAes.part.0+0xcc>
   1e840:	2b01      	cmp	r3, #1
   1e842:	bf0c      	ite	eq
   1e844:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   1e848:	f020 0020 	bicne.w	r0, r0, #32
   1e84c:	f7fe fe8a 	bl	1d564 <CC_HalMaskInterrupt>
   1e850:	4a1d      	ldr	r2, [pc, #116]	; (1e8c8 <InitAes.part.0+0xe0>)
   1e852:	2301      	movs	r3, #1
   1e854:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   1e858:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e85c:	2b00      	cmp	r3, #0
   1e85e:	d1fb      	bne.n	1e858 <InitAes.part.0+0x70>
   1e860:	4a19      	ldr	r2, [pc, #100]	; (1e8c8 <InitAes.part.0+0xe0>)
   1e862:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   1e866:	2b00      	cmp	r3, #0
   1e868:	d1fb      	bne.n	1e862 <InitAes.part.0+0x7a>
   1e86a:	4917      	ldr	r1, [pc, #92]	; (1e8c8 <InitAes.part.0+0xe0>)
   1e86c:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   1e870:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   1e874:	2b00      	cmp	r3, #0
   1e876:	d1fb      	bne.n	1e870 <InitAes.part.0+0x88>
   1e878:	4a13      	ldr	r2, [pc, #76]	; (1e8c8 <InitAes.part.0+0xe0>)
   1e87a:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   1e87e:	2b00      	cmp	r3, #0
   1e880:	d1fb      	bne.n	1e87a <InitAes.part.0+0x92>
   1e882:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1e884:	f022 0104 	bic.w	r1, r2, #4
   1e888:	2903      	cmp	r1, #3
   1e88a:	bf18      	it	ne
   1e88c:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   1e88e:	490e      	ldr	r1, [pc, #56]	; (1e8c8 <InitAes.part.0+0xe0>)
   1e890:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1e894:	bf18      	it	ne
   1e896:	f003 0301 	andne.w	r3, r3, #1
   1e89a:	f002 021c 	and.w	r2, r2, #28
   1e89e:	4313      	orrs	r3, r2
   1e8a0:	f8c1 34c0 	str.w	r3, [r1, #1216]	; 0x4c0
   1e8a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e8a6:	2b07      	cmp	r3, #7
   1e8a8:	bf04      	itt	eq
   1e8aa:	2301      	moveq	r3, #1
   1e8ac:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   1e8b0:	2000      	movs	r0, #0
   1e8b2:	bd38      	pop	{r3, r4, r5, pc}
   1e8b4:	2b01      	cmp	r3, #1
   1e8b6:	bf0c      	ite	eq
   1e8b8:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   1e8bc:	f020 0010 	bicne.w	r0, r0, #16
   1e8c0:	f7fe fe50 	bl	1d564 <CC_HalMaskInterrupt>
   1e8c4:	e7c4      	b.n	1e850 <InitAes.part.0+0x68>
   1e8c6:	bf00      	nop
   1e8c8:	5002b000 	.word	0x5002b000

0001e8cc <ProcessAesDrv>:
   1e8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e8d0:	b085      	sub	sp, #20
   1e8d2:	2900      	cmp	r1, #0
   1e8d4:	f000 80a6 	beq.w	1ea24 <ProcessAesDrv+0x158>
   1e8d8:	4690      	mov	r8, r2
   1e8da:	2a00      	cmp	r2, #0
   1e8dc:	f000 80a2 	beq.w	1ea24 <ProcessAesDrv+0x158>
   1e8e0:	4605      	mov	r5, r0
   1e8e2:	2800      	cmp	r0, #0
   1e8e4:	f000 813f 	beq.w	1eb66 <ProcessAesDrv+0x29a>
   1e8e8:	4699      	mov	r9, r3
   1e8ea:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1e8ec:	460e      	mov	r6, r1
   1e8ee:	2b00      	cmp	r3, #0
   1e8f0:	d151      	bne.n	1e996 <ProcessAesDrv+0xca>
   1e8f2:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   1e8f6:	d253      	bcs.n	1e9a0 <ProcessAesDrv+0xd4>
   1e8f8:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   1e8fc:	2b04      	cmp	r3, #4
   1e8fe:	f000 8115 	beq.w	1eb2c <ProcessAesDrv+0x260>
   1e902:	2700      	movs	r7, #0
   1e904:	48a8      	ldr	r0, [pc, #672]	; (1eba8 <ProcessAesDrv+0x2dc>)
   1e906:	f04f 31ff 	mov.w	r1, #4294967295
   1e90a:	f7fe fec7 	bl	1d69c <CC_PalMutexLock>
   1e90e:	2800      	cmp	r0, #0
   1e910:	f040 80eb 	bne.w	1eaea <ProcessAesDrv+0x21e>
   1e914:	2000      	movs	r0, #0
   1e916:	f7fe fef1 	bl	1d6fc <CC_PalPowerSaveModeSelect>
   1e91a:	2800      	cmp	r0, #0
   1e91c:	f040 80ee 	bne.w	1eafc <ProcessAesDrv+0x230>
   1e920:	48a2      	ldr	r0, [pc, #648]	; (1ebac <ProcessAesDrv+0x2e0>)
   1e922:	2301      	movs	r3, #1
   1e924:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   1e928:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   1e92c:	2c00      	cmp	r4, #0
   1e92e:	d1fb      	bne.n	1e928 <ProcessAesDrv+0x5c>
   1e930:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1e932:	2b03      	cmp	r3, #3
   1e934:	dc39      	bgt.n	1e9aa <ProcessAesDrv+0xde>
   1e936:	2b00      	cmp	r3, #0
   1e938:	da3a      	bge.n	1e9b0 <ProcessAesDrv+0xe4>
   1e93a:	4c9d      	ldr	r4, [pc, #628]	; (1ebb0 <ProcessAesDrv+0x2e4>)
   1e93c:	4a9b      	ldr	r2, [pc, #620]	; (1ebac <ProcessAesDrv+0x2e0>)
   1e93e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e942:	2b00      	cmp	r3, #0
   1e944:	d1fb      	bne.n	1e93e <ProcessAesDrv+0x72>
   1e946:	2f00      	cmp	r7, #0
   1e948:	f040 80e7 	bne.w	1eb1a <ProcessAesDrv+0x24e>
   1e94c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1e94e:	f023 0304 	bic.w	r3, r3, #4
   1e952:	2b03      	cmp	r3, #3
   1e954:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1e956:	d059      	beq.n	1ea0c <ProcessAesDrv+0x140>
   1e958:	2b01      	cmp	r3, #1
   1e95a:	4b94      	ldr	r3, [pc, #592]	; (1ebac <ProcessAesDrv+0x2e0>)
   1e95c:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   1e960:	bf0c      	ite	eq
   1e962:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   1e966:	f040 0020 	orrne.w	r0, r0, #32
   1e96a:	f7fe fdfb 	bl	1d564 <CC_HalMaskInterrupt>
   1e96e:	4b8f      	ldr	r3, [pc, #572]	; (1ebac <ProcessAesDrv+0x2e0>)
   1e970:	2200      	movs	r2, #0
   1e972:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   1e976:	2001      	movs	r0, #1
   1e978:	f7fe fec0 	bl	1d6fc <CC_PalPowerSaveModeSelect>
   1e97c:	2800      	cmp	r0, #0
   1e97e:	f040 80c8 	bne.w	1eb12 <ProcessAesDrv+0x246>
   1e982:	4889      	ldr	r0, [pc, #548]	; (1eba8 <ProcessAesDrv+0x2dc>)
   1e984:	f7fe fe92 	bl	1d6ac <CC_PalMutexUnlock>
   1e988:	2800      	cmp	r0, #0
   1e98a:	f040 80bb 	bne.w	1eb04 <ProcessAesDrv+0x238>
   1e98e:	4620      	mov	r0, r4
   1e990:	b005      	add	sp, #20
   1e992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e996:	2b01      	cmp	r3, #1
   1e998:	d1ae      	bne.n	1e8f8 <ProcessAesDrv+0x2c>
   1e99a:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   1e99e:	d3ab      	bcc.n	1e8f8 <ProcessAesDrv+0x2c>
   1e9a0:	4c84      	ldr	r4, [pc, #528]	; (1ebb4 <ProcessAesDrv+0x2e8>)
   1e9a2:	4620      	mov	r0, r4
   1e9a4:	b005      	add	sp, #20
   1e9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9aa:	3b06      	subs	r3, #6
   1e9ac:	2b01      	cmp	r3, #1
   1e9ae:	d8c4      	bhi.n	1e93a <ProcessAesDrv+0x6e>
   1e9b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1e9b2:	2b01      	cmp	r3, #1
   1e9b4:	f200 80d5 	bhi.w	1eb62 <ProcessAesDrv+0x296>
   1e9b8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1e9ba:	2b01      	cmp	r3, #1
   1e9bc:	d837      	bhi.n	1ea2e <ProcessAesDrv+0x162>
   1e9be:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1e9c0:	2b01      	cmp	r3, #1
   1e9c2:	f200 8126 	bhi.w	1ec12 <ProcessAesDrv+0x346>
   1e9c6:	4628      	mov	r0, r5
   1e9c8:	f7ff ff0e 	bl	1e7e8 <InitAes.part.0>
   1e9cc:	4604      	mov	r4, r0
   1e9ce:	2800      	cmp	r0, #0
   1e9d0:	d1b4      	bne.n	1e93c <ProcessAesDrv+0x70>
   1e9d2:	4628      	mov	r0, r5
   1e9d4:	f7ff feb6 	bl	1e744 <LoadAesKey>
   1e9d8:	4604      	mov	r4, r0
   1e9da:	2800      	cmp	r0, #0
   1e9dc:	d1ae      	bne.n	1e93c <ProcessAesDrv+0x70>
   1e9de:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1e9e0:	2b07      	cmp	r3, #7
   1e9e2:	d8aa      	bhi.n	1e93a <ProcessAesDrv+0x6e>
   1e9e4:	a201      	add	r2, pc, #4	; (adr r2, 1e9ec <ProcessAesDrv+0x120>)
   1e9e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e9ea:	bf00      	nop
   1e9ec:	0001ea4f 	.word	0x0001ea4f
   1e9f0:	0001ea33 	.word	0x0001ea33
   1e9f4:	0001ebd9 	.word	0x0001ebd9
   1e9f8:	0001ea33 	.word	0x0001ea33
   1e9fc:	0001e93b 	.word	0x0001e93b
   1ea00:	0001e93b 	.word	0x0001e93b
   1ea04:	0001ebd9 	.word	0x0001ebd9
   1ea08:	0001ea33 	.word	0x0001ea33
   1ea0c:	2b01      	cmp	r3, #1
   1ea0e:	4b67      	ldr	r3, [pc, #412]	; (1ebac <ProcessAesDrv+0x2e0>)
   1ea10:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   1ea14:	bf0c      	ite	eq
   1ea16:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   1ea1a:	f040 0010 	orrne.w	r0, r0, #16
   1ea1e:	f7fe fda1 	bl	1d564 <CC_HalMaskInterrupt>
   1ea22:	e7a4      	b.n	1e96e <ProcessAesDrv+0xa2>
   1ea24:	4c64      	ldr	r4, [pc, #400]	; (1ebb8 <ProcessAesDrv+0x2ec>)
   1ea26:	4620      	mov	r0, r4
   1ea28:	b005      	add	sp, #20
   1ea2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea2e:	4c63      	ldr	r4, [pc, #396]	; (1ebbc <ProcessAesDrv+0x2f0>)
   1ea30:	e784      	b.n	1e93c <ProcessAesDrv+0x70>
   1ea32:	4b5e      	ldr	r3, [pc, #376]	; (1ebac <ProcessAesDrv+0x2e0>)
   1ea34:	682a      	ldr	r2, [r5, #0]
   1ea36:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   1ea3a:	686a      	ldr	r2, [r5, #4]
   1ea3c:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   1ea40:	68aa      	ldr	r2, [r5, #8]
   1ea42:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   1ea46:	68ea      	ldr	r2, [r5, #12]
   1ea48:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   1ea4c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1ea4e:	6832      	ldr	r2, [r6, #0]
   1ea50:	f023 0304 	bic.w	r3, r3, #4
   1ea54:	2b03      	cmp	r3, #3
   1ea56:	d00d      	beq.n	1ea74 <ProcessAesDrv+0x1a8>
   1ea58:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1ea5a:	f8d8 1000 	ldr.w	r1, [r8]
   1ea5e:	2b01      	cmp	r3, #1
   1ea60:	4b52      	ldr	r3, [pc, #328]	; (1ebac <ProcessAesDrv+0x2e0>)
   1ea62:	bf0b      	itete	eq
   1ea64:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   1ea68:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   1ea6c:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   1ea70:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   1ea74:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1ea76:	2b01      	cmp	r3, #1
   1ea78:	4b4c      	ldr	r3, [pc, #304]	; (1ebac <ProcessAesDrv+0x2e0>)
   1ea7a:	bf0b      	itete	eq
   1ea7c:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   1ea80:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   1ea84:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   1ea88:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   1ea8c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1ea8e:	f023 0304 	bic.w	r3, r3, #4
   1ea92:	2b03      	cmp	r3, #3
   1ea94:	d06a      	beq.n	1eb6c <ProcessAesDrv+0x2a0>
   1ea96:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1ea98:	2b01      	cmp	r3, #1
   1ea9a:	bf0c      	ite	eq
   1ea9c:	2080      	moveq	r0, #128	; 0x80
   1ea9e:	2020      	movne	r0, #32
   1eaa0:	f7fe fd66 	bl	1d570 <CC_HalWaitInterrupt>
   1eaa4:	4604      	mov	r4, r0
   1eaa6:	2800      	cmp	r0, #0
   1eaa8:	f47f af48 	bne.w	1e93c <ProcessAesDrv+0x70>
   1eaac:	4b3f      	ldr	r3, [pc, #252]	; (1ebac <ProcessAesDrv+0x2e0>)
   1eaae:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   1eab2:	2c00      	cmp	r4, #0
   1eab4:	d1fb      	bne.n	1eaae <ProcessAesDrv+0x1e2>
   1eab6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1eab8:	3b01      	subs	r3, #1
   1eaba:	2b06      	cmp	r3, #6
   1eabc:	d812      	bhi.n	1eae4 <ProcessAesDrv+0x218>
   1eabe:	e8df f003 	tbb	[pc, r3]
   1eac2:	9a04      	.short	0x9a04
   1eac4:	9a111104 	.word	0x9a111104
   1eac8:	04          	.byte	0x04
   1eac9:	00          	.byte	0x00
   1eaca:	4b38      	ldr	r3, [pc, #224]	; (1ebac <ProcessAesDrv+0x2e0>)
   1eacc:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   1ead0:	602a      	str	r2, [r5, #0]
   1ead2:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   1ead6:	606a      	str	r2, [r5, #4]
   1ead8:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   1eadc:	60aa      	str	r2, [r5, #8]
   1eade:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   1eae2:	60eb      	str	r3, [r5, #12]
   1eae4:	2301      	movs	r3, #1
   1eae6:	65ab      	str	r3, [r5, #88]	; 0x58
   1eae8:	e728      	b.n	1e93c <ProcessAesDrv+0x70>
   1eaea:	4835      	ldr	r0, [pc, #212]	; (1ebc0 <ProcessAesDrv+0x2f4>)
   1eaec:	f7fd fe82 	bl	1c7f4 <CC_PalAbort>
   1eaf0:	2000      	movs	r0, #0
   1eaf2:	f7fe fe03 	bl	1d6fc <CC_PalPowerSaveModeSelect>
   1eaf6:	2800      	cmp	r0, #0
   1eaf8:	f43f af12 	beq.w	1e920 <ProcessAesDrv+0x54>
   1eafc:	4831      	ldr	r0, [pc, #196]	; (1ebc4 <ProcessAesDrv+0x2f8>)
   1eafe:	f7fd fe79 	bl	1c7f4 <CC_PalAbort>
   1eb02:	e70d      	b.n	1e920 <ProcessAesDrv+0x54>
   1eb04:	4830      	ldr	r0, [pc, #192]	; (1ebc8 <ProcessAesDrv+0x2fc>)
   1eb06:	f7fd fe75 	bl	1c7f4 <CC_PalAbort>
   1eb0a:	4620      	mov	r0, r4
   1eb0c:	b005      	add	sp, #20
   1eb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb12:	482e      	ldr	r0, [pc, #184]	; (1ebcc <ProcessAesDrv+0x300>)
   1eb14:	f7fd fe6e 	bl	1c7f4 <CC_PalAbort>
   1eb18:	e733      	b.n	1e982 <ProcessAesDrv+0xb6>
   1eb1a:	2304      	movs	r3, #4
   1eb1c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   1eb20:	2120      	movs	r1, #32
   1eb22:	f105 0010 	add.w	r0, r5, #16
   1eb26:	f7fe fda1 	bl	1d66c <CC_PalMemSetZeroPlat>
   1eb2a:	e70f      	b.n	1e94c <ProcessAesDrv+0x80>
   1eb2c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1eb2e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   1eb30:	f000 f9b6 	bl	1eea0 <kmu_validate_slot_and_size>
   1eb34:	b998      	cbnz	r0, 1eb5e <ProcessAesDrv+0x292>
   1eb36:	4f26      	ldr	r7, [pc, #152]	; (1ebd0 <ProcessAesDrv+0x304>)
   1eb38:	4c1c      	ldr	r4, [pc, #112]	; (1ebac <ProcessAesDrv+0x2e0>)
   1eb3a:	683b      	ldr	r3, [r7, #0]
   1eb3c:	681b      	ldr	r3, [r3, #0]
   1eb3e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   1eb42:	683b      	ldr	r3, [r7, #0]
   1eb44:	685b      	ldr	r3, [r3, #4]
   1eb46:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   1eb4a:	683b      	ldr	r3, [r7, #0]
   1eb4c:	689b      	ldr	r3, [r3, #8]
   1eb4e:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   1eb52:	683b      	ldr	r3, [r7, #0]
   1eb54:	68db      	ldr	r3, [r3, #12]
   1eb56:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   1eb5a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1eb5c:	b161      	cbz	r1, 1eb78 <ProcessAesDrv+0x2ac>
   1eb5e:	2701      	movs	r7, #1
   1eb60:	e6d0      	b.n	1e904 <ProcessAesDrv+0x38>
   1eb62:	4c1c      	ldr	r4, [pc, #112]	; (1ebd4 <ProcessAesDrv+0x308>)
   1eb64:	e6ea      	b.n	1e93c <ProcessAesDrv+0x70>
   1eb66:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   1eb6a:	e710      	b.n	1e98e <ProcessAesDrv+0xc2>
   1eb6c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1eb6e:	2b01      	cmp	r3, #1
   1eb70:	bf0c      	ite	eq
   1eb72:	2040      	moveq	r0, #64	; 0x40
   1eb74:	2010      	movne	r0, #16
   1eb76:	e793      	b.n	1eaa0 <ProcessAesDrv+0x1d4>
   1eb78:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1eb7a:	9301      	str	r3, [sp, #4]
   1eb7c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   1eb7e:	9300      	str	r3, [sp, #0]
   1eb80:	f105 0a10 	add.w	sl, r5, #16
   1eb84:	f04f 0b10 	mov.w	fp, #16
   1eb88:	f8cd a008 	str.w	sl, [sp, #8]
   1eb8c:	f8cd b00c 	str.w	fp, [sp, #12]
   1eb90:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   1eb94:	6c28      	ldr	r0, [r5, #64]	; 0x40
   1eb96:	f000 f9a5 	bl	1eee4 <kmu_derive_cmac>
   1eb9a:	2800      	cmp	r0, #0
   1eb9c:	d13b      	bne.n	1ec16 <ProcessAesDrv+0x34a>
   1eb9e:	2300      	movs	r3, #0
   1eba0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   1eba4:	e7db      	b.n	1eb5e <ProcessAesDrv+0x292>
   1eba6:	bf00      	nop
   1eba8:	20000918 	.word	0x20000918
   1ebac:	5002b000 	.word	0x5002b000
   1ebb0:	00f10001 	.word	0x00f10001
   1ebb4:	00f10005 	.word	0x00f10005
   1ebb8:	00f1000b 	.word	0x00f1000b
   1ebbc:	00f10003 	.word	0x00f10003
   1ebc0:	00024aa4 	.word	0x00024aa4
   1ebc4:	00024abc 	.word	0x00024abc
   1ebc8:	00024afc 	.word	0x00024afc
   1ebcc:	00024adc 	.word	0x00024adc
   1ebd0:	20000908 	.word	0x20000908
   1ebd4:	00f10002 	.word	0x00f10002
   1ebd8:	4b19      	ldr	r3, [pc, #100]	; (1ec40 <ProcessAesDrv+0x374>)
   1ebda:	682a      	ldr	r2, [r5, #0]
   1ebdc:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   1ebe0:	686a      	ldr	r2, [r5, #4]
   1ebe2:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   1ebe6:	68aa      	ldr	r2, [r5, #8]
   1ebe8:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   1ebec:	68ea      	ldr	r2, [r5, #12]
   1ebee:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   1ebf2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1ebf4:	e72b      	b.n	1ea4e <ProcessAesDrv+0x182>
   1ebf6:	4b12      	ldr	r3, [pc, #72]	; (1ec40 <ProcessAesDrv+0x374>)
   1ebf8:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   1ebfc:	602a      	str	r2, [r5, #0]
   1ebfe:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   1ec02:	606a      	str	r2, [r5, #4]
   1ec04:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   1ec08:	60aa      	str	r2, [r5, #8]
   1ec0a:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   1ec0e:	60eb      	str	r3, [r5, #12]
   1ec10:	e768      	b.n	1eae4 <ProcessAesDrv+0x218>
   1ec12:	4c0c      	ldr	r4, [pc, #48]	; (1ec44 <ProcessAesDrv+0x378>)
   1ec14:	e692      	b.n	1e93c <ProcessAesDrv+0x70>
   1ec16:	683b      	ldr	r3, [r7, #0]
   1ec18:	681b      	ldr	r3, [r3, #0]
   1ec1a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   1ec1e:	683b      	ldr	r3, [r7, #0]
   1ec20:	685b      	ldr	r3, [r3, #4]
   1ec22:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   1ec26:	683b      	ldr	r3, [r7, #0]
   1ec28:	689b      	ldr	r3, [r3, #8]
   1ec2a:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   1ec2e:	683b      	ldr	r3, [r7, #0]
   1ec30:	68db      	ldr	r3, [r3, #12]
   1ec32:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   1ec36:	4659      	mov	r1, fp
   1ec38:	4650      	mov	r0, sl
   1ec3a:	f7fe fd17 	bl	1d66c <CC_PalMemSetZeroPlat>
   1ec3e:	e7ae      	b.n	1eb9e <ProcessAesDrv+0x2d2>
   1ec40:	5002b000 	.word	0x5002b000
   1ec44:	00f10004 	.word	0x00f10004

0001ec48 <FinishAesDrv>:
   1ec48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ec4c:	b301      	cbz	r1, 1ec90 <FinishAesDrv+0x48>
   1ec4e:	b1fa      	cbz	r2, 1ec90 <FinishAesDrv+0x48>
   1ec50:	4604      	mov	r4, r0
   1ec52:	2800      	cmp	r0, #0
   1ec54:	d07c      	beq.n	1ed50 <FinishAesDrv+0x108>
   1ec56:	461d      	mov	r5, r3
   1ec58:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1ec5a:	2b07      	cmp	r3, #7
   1ec5c:	460e      	mov	r6, r1
   1ec5e:	d01b      	beq.n	1ec98 <FinishAesDrv+0x50>
   1ec60:	b95d      	cbnz	r5, 1ec7a <FinishAesDrv+0x32>
   1ec62:	2b03      	cmp	r3, #3
   1ec64:	d110      	bne.n	1ec88 <FinishAesDrv+0x40>
   1ec66:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1ec68:	b973      	cbnz	r3, 1ec88 <FinishAesDrv+0x40>
   1ec6a:	f100 0364 	add.w	r3, r0, #100	; 0x64
   1ec6e:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   1ec72:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   1ec76:	600b      	str	r3, [r1, #0]
   1ec78:	2510      	movs	r5, #16
   1ec7a:	462b      	mov	r3, r5
   1ec7c:	4631      	mov	r1, r6
   1ec7e:	4620      	mov	r0, r4
   1ec80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ec84:	f7ff be22 	b.w	1e8cc <ProcessAesDrv>
   1ec88:	462f      	mov	r7, r5
   1ec8a:	4638      	mov	r0, r7
   1ec8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ec90:	4f77      	ldr	r7, [pc, #476]	; (1ee70 <FinishAesDrv+0x228>)
   1ec92:	4638      	mov	r0, r7
   1ec94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ec98:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1ec9a:	2b00      	cmp	r3, #0
   1ec9c:	d15b      	bne.n	1ed56 <FinishAesDrv+0x10e>
   1ec9e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1eca2:	d25d      	bcs.n	1ed60 <FinishAesDrv+0x118>
   1eca4:	b915      	cbnz	r5, 1ecac <FinishAesDrv+0x64>
   1eca6:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1eca8:	2b00      	cmp	r3, #0
   1ecaa:	d159      	bne.n	1ed60 <FinishAesDrv+0x118>
   1ecac:	4871      	ldr	r0, [pc, #452]	; (1ee74 <FinishAesDrv+0x22c>)
   1ecae:	f04f 31ff 	mov.w	r1, #4294967295
   1ecb2:	f7fe fcf3 	bl	1d69c <CC_PalMutexLock>
   1ecb6:	2800      	cmp	r0, #0
   1ecb8:	f040 80b8 	bne.w	1ee2c <FinishAesDrv+0x1e4>
   1ecbc:	2000      	movs	r0, #0
   1ecbe:	f7fe fd1d 	bl	1d6fc <CC_PalPowerSaveModeSelect>
   1ecc2:	2800      	cmp	r0, #0
   1ecc4:	f040 80ae 	bne.w	1ee24 <FinishAesDrv+0x1dc>
   1ecc8:	4a6b      	ldr	r2, [pc, #428]	; (1ee78 <FinishAesDrv+0x230>)
   1ecca:	2301      	movs	r3, #1
   1eccc:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   1ecd0:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1ecd4:	2b00      	cmp	r3, #0
   1ecd6:	d1fb      	bne.n	1ecd0 <FinishAesDrv+0x88>
   1ecd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1ecda:	2b03      	cmp	r3, #3
   1ecdc:	dd20      	ble.n	1ed20 <FinishAesDrv+0xd8>
   1ecde:	3b06      	subs	r3, #6
   1ece0:	2b01      	cmp	r3, #1
   1ece2:	d81f      	bhi.n	1ed24 <FinishAesDrv+0xdc>
   1ece4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1ece6:	2b01      	cmp	r3, #1
   1ece8:	d83c      	bhi.n	1ed64 <FinishAesDrv+0x11c>
   1ecea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1ecec:	2b01      	cmp	r3, #1
   1ecee:	f200 80a5 	bhi.w	1ee3c <FinishAesDrv+0x1f4>
   1ecf2:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1ecf4:	2b01      	cmp	r3, #1
   1ecf6:	f200 80a3 	bhi.w	1ee40 <FinishAesDrv+0x1f8>
   1ecfa:	4620      	mov	r0, r4
   1ecfc:	f7ff fd74 	bl	1e7e8 <InitAes.part.0>
   1ed00:	4607      	mov	r7, r0
   1ed02:	b980      	cbnz	r0, 1ed26 <FinishAesDrv+0xde>
   1ed04:	4620      	mov	r0, r4
   1ed06:	f7ff fd1d 	bl	1e744 <LoadAesKey>
   1ed0a:	4607      	mov	r7, r0
   1ed0c:	b958      	cbnz	r0, 1ed26 <FinishAesDrv+0xde>
   1ed0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1ed10:	2b07      	cmp	r3, #7
   1ed12:	d807      	bhi.n	1ed24 <FinishAesDrv+0xdc>
   1ed14:	e8df f003 	tbb	[pc, r3]
   1ed18:	285c2835 	.word	0x285c2835
   1ed1c:	285c0606 	.word	0x285c0606
   1ed20:	2b00      	cmp	r3, #0
   1ed22:	dadf      	bge.n	1ece4 <FinishAesDrv+0x9c>
   1ed24:	4f55      	ldr	r7, [pc, #340]	; (1ee7c <FinishAesDrv+0x234>)
   1ed26:	4a54      	ldr	r2, [pc, #336]	; (1ee78 <FinishAesDrv+0x230>)
   1ed28:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1ed2c:	2b00      	cmp	r3, #0
   1ed2e:	d1fb      	bne.n	1ed28 <FinishAesDrv+0xe0>
   1ed30:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   1ed34:	2001      	movs	r0, #1
   1ed36:	f7fe fce1 	bl	1d6fc <CC_PalPowerSaveModeSelect>
   1ed3a:	2800      	cmp	r0, #0
   1ed3c:	d17a      	bne.n	1ee34 <FinishAesDrv+0x1ec>
   1ed3e:	484d      	ldr	r0, [pc, #308]	; (1ee74 <FinishAesDrv+0x22c>)
   1ed40:	f7fe fcb4 	bl	1d6ac <CC_PalMutexUnlock>
   1ed44:	2800      	cmp	r0, #0
   1ed46:	d0a0      	beq.n	1ec8a <FinishAesDrv+0x42>
   1ed48:	484d      	ldr	r0, [pc, #308]	; (1ee80 <FinishAesDrv+0x238>)
   1ed4a:	f7fd fd53 	bl	1c7f4 <CC_PalAbort>
   1ed4e:	e79c      	b.n	1ec8a <FinishAesDrv+0x42>
   1ed50:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   1ed54:	e799      	b.n	1ec8a <FinishAesDrv+0x42>
   1ed56:	2b01      	cmp	r3, #1
   1ed58:	d1a4      	bne.n	1eca4 <FinishAesDrv+0x5c>
   1ed5a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1ed5e:	d3a1      	bcc.n	1eca4 <FinishAesDrv+0x5c>
   1ed60:	4f48      	ldr	r7, [pc, #288]	; (1ee84 <FinishAesDrv+0x23c>)
   1ed62:	e792      	b.n	1ec8a <FinishAesDrv+0x42>
   1ed64:	4f48      	ldr	r7, [pc, #288]	; (1ee88 <FinishAesDrv+0x240>)
   1ed66:	e7de      	b.n	1ed26 <FinishAesDrv+0xde>
   1ed68:	4b43      	ldr	r3, [pc, #268]	; (1ee78 <FinishAesDrv+0x230>)
   1ed6a:	6822      	ldr	r2, [r4, #0]
   1ed6c:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   1ed70:	6862      	ldr	r2, [r4, #4]
   1ed72:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   1ed76:	68a2      	ldr	r2, [r4, #8]
   1ed78:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   1ed7c:	68e2      	ldr	r2, [r4, #12]
   1ed7e:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   1ed82:	4b3d      	ldr	r3, [pc, #244]	; (1ee78 <FinishAesDrv+0x230>)
   1ed84:	2201      	movs	r2, #1
   1ed86:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   1ed8a:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   1ed8e:	2d00      	cmp	r5, #0
   1ed90:	d158      	bne.n	1ee44 <FinishAesDrv+0x1fc>
   1ed92:	6da1      	ldr	r1, [r4, #88]	; 0x58
   1ed94:	b909      	cbnz	r1, 1ed9a <FinishAesDrv+0x152>
   1ed96:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   1ed9a:	4b37      	ldr	r3, [pc, #220]	; (1ee78 <FinishAesDrv+0x230>)
   1ed9c:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   1eda0:	2f00      	cmp	r7, #0
   1eda2:	d1fb      	bne.n	1ed9c <FinishAesDrv+0x154>
   1eda4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1eda6:	3b01      	subs	r3, #1
   1eda8:	2b06      	cmp	r3, #6
   1edaa:	d8bc      	bhi.n	1ed26 <FinishAesDrv+0xde>
   1edac:	a201      	add	r2, pc, #4	; (adr r2, 1edb4 <FinishAesDrv+0x16c>)
   1edae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1edb2:	bf00      	nop
   1edb4:	0001eded 	.word	0x0001eded
   1edb8:	0001ee09 	.word	0x0001ee09
   1edbc:	0001eded 	.word	0x0001eded
   1edc0:	0001ed27 	.word	0x0001ed27
   1edc4:	0001ed27 	.word	0x0001ed27
   1edc8:	0001ee09 	.word	0x0001ee09
   1edcc:	0001eded 	.word	0x0001eded
   1edd0:	4b29      	ldr	r3, [pc, #164]	; (1ee78 <FinishAesDrv+0x230>)
   1edd2:	6822      	ldr	r2, [r4, #0]
   1edd4:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   1edd8:	6862      	ldr	r2, [r4, #4]
   1edda:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   1edde:	68a2      	ldr	r2, [r4, #8]
   1ede0:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   1ede4:	68e2      	ldr	r2, [r4, #12]
   1ede6:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   1edea:	e7ca      	b.n	1ed82 <FinishAesDrv+0x13a>
   1edec:	4b22      	ldr	r3, [pc, #136]	; (1ee78 <FinishAesDrv+0x230>)
   1edee:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   1edf2:	6022      	str	r2, [r4, #0]
   1edf4:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   1edf8:	6062      	str	r2, [r4, #4]
   1edfa:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   1edfe:	60a2      	str	r2, [r4, #8]
   1ee00:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   1ee04:	60e3      	str	r3, [r4, #12]
   1ee06:	e78e      	b.n	1ed26 <FinishAesDrv+0xde>
   1ee08:	4b1b      	ldr	r3, [pc, #108]	; (1ee78 <FinishAesDrv+0x230>)
   1ee0a:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   1ee0e:	6022      	str	r2, [r4, #0]
   1ee10:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   1ee14:	6062      	str	r2, [r4, #4]
   1ee16:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   1ee1a:	60a2      	str	r2, [r4, #8]
   1ee1c:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   1ee20:	60e3      	str	r3, [r4, #12]
   1ee22:	e780      	b.n	1ed26 <FinishAesDrv+0xde>
   1ee24:	4819      	ldr	r0, [pc, #100]	; (1ee8c <FinishAesDrv+0x244>)
   1ee26:	f7fd fce5 	bl	1c7f4 <CC_PalAbort>
   1ee2a:	e74d      	b.n	1ecc8 <FinishAesDrv+0x80>
   1ee2c:	4818      	ldr	r0, [pc, #96]	; (1ee90 <FinishAesDrv+0x248>)
   1ee2e:	f7fd fce1 	bl	1c7f4 <CC_PalAbort>
   1ee32:	e743      	b.n	1ecbc <FinishAesDrv+0x74>
   1ee34:	4817      	ldr	r0, [pc, #92]	; (1ee94 <FinishAesDrv+0x24c>)
   1ee36:	f7fd fcdd 	bl	1c7f4 <CC_PalAbort>
   1ee3a:	e780      	b.n	1ed3e <FinishAesDrv+0xf6>
   1ee3c:	4f16      	ldr	r7, [pc, #88]	; (1ee98 <FinishAesDrv+0x250>)
   1ee3e:	e772      	b.n	1ed26 <FinishAesDrv+0xde>
   1ee40:	4f16      	ldr	r7, [pc, #88]	; (1ee9c <FinishAesDrv+0x254>)
   1ee42:	e770      	b.n	1ed26 <FinishAesDrv+0xde>
   1ee44:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   1ee46:	6832      	ldr	r2, [r6, #0]
   1ee48:	2901      	cmp	r1, #1
   1ee4a:	d00a      	beq.n	1ee62 <FinishAesDrv+0x21a>
   1ee4c:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
   1ee50:	2010      	movs	r0, #16
   1ee52:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   1ee56:	f7fe fb8b 	bl	1d570 <CC_HalWaitInterrupt>
   1ee5a:	4607      	mov	r7, r0
   1ee5c:	2800      	cmp	r0, #0
   1ee5e:	d09c      	beq.n	1ed9a <FinishAesDrv+0x152>
   1ee60:	e761      	b.n	1ed26 <FinishAesDrv+0xde>
   1ee62:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   1ee66:	2040      	movs	r0, #64	; 0x40
   1ee68:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   1ee6c:	e7f3      	b.n	1ee56 <FinishAesDrv+0x20e>
   1ee6e:	bf00      	nop
   1ee70:	00f1000b 	.word	0x00f1000b
   1ee74:	20000918 	.word	0x20000918
   1ee78:	5002b000 	.word	0x5002b000
   1ee7c:	00f10001 	.word	0x00f10001
   1ee80:	00024afc 	.word	0x00024afc
   1ee84:	00f10005 	.word	0x00f10005
   1ee88:	00f10002 	.word	0x00f10002
   1ee8c:	00024abc 	.word	0x00024abc
   1ee90:	00024aa4 	.word	0x00024aa4
   1ee94:	00024adc 	.word	0x00024adc
   1ee98:	00f10003 	.word	0x00f10003
   1ee9c:	00f10004 	.word	0x00f10004

0001eea0 <kmu_validate_slot_and_size>:
   1eea0:	b921      	cbnz	r1, 1eeac <kmu_validate_slot_and_size+0xc>
   1eea2:	4b03      	ldr	r3, [pc, #12]	; (1eeb0 <kmu_validate_slot_and_size+0x10>)
   1eea4:	2800      	cmp	r0, #0
   1eea6:	bf18      	it	ne
   1eea8:	4618      	movne	r0, r3
   1eeaa:	4770      	bx	lr
   1eeac:	4801      	ldr	r0, [pc, #4]	; (1eeb4 <kmu_validate_slot_and_size+0x14>)
   1eeae:	4770      	bx	lr
   1eeb0:	00f70001 	.word	0x00f70001
   1eeb4:	00f70003 	.word	0x00f70003

0001eeb8 <kmu_validate_kdr_slot_and_size>:
   1eeb8:	b921      	cbnz	r1, 1eec4 <kmu_validate_kdr_slot_and_size+0xc>
   1eeba:	4b03      	ldr	r3, [pc, #12]	; (1eec8 <kmu_validate_kdr_slot_and_size+0x10>)
   1eebc:	2800      	cmp	r0, #0
   1eebe:	bf18      	it	ne
   1eec0:	4618      	movne	r0, r3
   1eec2:	4770      	bx	lr
   1eec4:	4801      	ldr	r0, [pc, #4]	; (1eecc <kmu_validate_kdr_slot_and_size+0x14>)
   1eec6:	4770      	bx	lr
   1eec8:	00f70001 	.word	0x00f70001
   1eecc:	00f70003 	.word	0x00f70003

0001eed0 <kmu_use_kdr_key>:
   1eed0:	4b03      	ldr	r3, [pc, #12]	; (1eee0 <kmu_use_kdr_key+0x10>)
   1eed2:	2000      	movs	r0, #0
   1eed4:	2201      	movs	r2, #1
   1eed6:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   1eeda:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   1eede:	4770      	bx	lr
   1eee0:	5002b000 	.word	0x5002b000

0001eee4 <kmu_derive_cmac>:
   1eee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1eee8:	b0cc      	sub	sp, #304	; 0x130
   1eeea:	2400      	movs	r4, #0
   1eeec:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   1eeee:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   1eef2:	4681      	mov	r9, r0
   1eef4:	460f      	mov	r7, r1
   1eef6:	4616      	mov	r6, r2
   1eef8:	4621      	mov	r1, r4
   1eefa:	2274      	movs	r2, #116	; 0x74
   1eefc:	a80e      	add	r0, sp, #56	; 0x38
   1eefe:	469a      	mov	sl, r3
   1ef00:	f001 fb31 	bl	20566 <memset>
   1ef04:	2280      	movs	r2, #128	; 0x80
   1ef06:	4621      	mov	r1, r4
   1ef08:	a82c      	add	r0, sp, #176	; 0xb0
   1ef0a:	942b      	str	r4, [sp, #172]	; 0xac
   1ef0c:	f001 fb2b 	bl	20566 <memset>
   1ef10:	2384      	movs	r3, #132	; 0x84
   1ef12:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1ef16:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   1ef1a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   1ef1e:	9305      	str	r3, [sp, #20]
   1ef20:	d85e      	bhi.n	1efe0 <kmu_derive_cmac+0xfc>
   1ef22:	ab05      	add	r3, sp, #20
   1ef24:	4630      	mov	r0, r6
   1ef26:	ae2b      	add	r6, sp, #172	; 0xac
   1ef28:	9301      	str	r3, [sp, #4]
   1ef2a:	9502      	str	r5, [sp, #8]
   1ef2c:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   1ef30:	4651      	mov	r1, sl
   1ef32:	9600      	str	r6, [sp, #0]
   1ef34:	f000 f864 	bl	1f000 <UtilCmacBuildDataForDerivation>
   1ef38:	2800      	cmp	r0, #0
   1ef3a:	d14c      	bne.n	1efd6 <kmu_derive_cmac+0xf2>
   1ef3c:	2303      	movs	r3, #3
   1ef3e:	f88d 3013 	strb.w	r3, [sp, #19]
   1ef42:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1ef46:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   1ef4a:	2307      	movs	r3, #7
   1ef4c:	2200      	movs	r2, #0
   1ef4e:	901c      	str	r0, [sp, #112]	; 0x70
   1ef50:	2110      	movs	r1, #16
   1ef52:	a80e      	add	r0, sp, #56	; 0x38
   1ef54:	931b      	str	r3, [sp, #108]	; 0x6c
   1ef56:	2401      	movs	r4, #1
   1ef58:	2301      	movs	r3, #1
   1ef5a:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   1ef5e:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   1ef62:	971a      	str	r7, [sp, #104]	; 0x68
   1ef64:	9426      	str	r4, [sp, #152]	; 0x98
   1ef66:	f10d 0920 	add.w	r9, sp, #32
   1ef6a:	f7fe fb7f 	bl	1d66c <CC_PalMemSetZeroPlat>
   1ef6e:	2210      	movs	r2, #16
   1ef70:	9200      	str	r2, [sp, #0]
   1ef72:	9905      	ldr	r1, [sp, #20]
   1ef74:	f8cd 9004 	str.w	r9, [sp, #4]
   1ef78:	ab0a      	add	r3, sp, #40	; 0x28
   1ef7a:	4630      	mov	r0, r6
   1ef7c:	aa06      	add	r2, sp, #24
   1ef7e:	f7ff fa35 	bl	1e3ec <SetDataBuffersInfo>
   1ef82:	4607      	mov	r7, r0
   1ef84:	b170      	cbz	r0, 1efa4 <kmu_derive_cmac+0xc0>
   1ef86:	e01d      	b.n	1efc4 <kmu_derive_cmac+0xe0>
   1ef88:	a90e      	add	r1, sp, #56	; 0x38
   1ef8a:	eb08 0007 	add.w	r0, r8, r7
   1ef8e:	f7fe fb69 	bl	1d664 <CC_PalMemCopyPlat>
   1ef92:	2110      	movs	r1, #16
   1ef94:	a80e      	add	r0, sp, #56	; 0x38
   1ef96:	f7fe fb69 	bl	1d66c <CC_PalMemSetZeroPlat>
   1ef9a:	3401      	adds	r4, #1
   1ef9c:	1bad      	subs	r5, r5, r6
   1ef9e:	4437      	add	r7, r6
   1efa0:	b2e4      	uxtb	r4, r4
   1efa2:	d022      	beq.n	1efea <kmu_derive_cmac+0x106>
   1efa4:	2d10      	cmp	r5, #16
   1efa6:	464a      	mov	r2, r9
   1efa8:	9b05      	ldr	r3, [sp, #20]
   1efaa:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   1efae:	a906      	add	r1, sp, #24
   1efb0:	a80e      	add	r0, sp, #56	; 0x38
   1efb2:	462e      	mov	r6, r5
   1efb4:	bf28      	it	cs
   1efb6:	2610      	movcs	r6, #16
   1efb8:	f7ff fe46 	bl	1ec48 <FinishAesDrv>
   1efbc:	4632      	mov	r2, r6
   1efbe:	2800      	cmp	r0, #0
   1efc0:	d0e2      	beq.n	1ef88 <kmu_derive_cmac+0xa4>
   1efc2:	4607      	mov	r7, r0
   1efc4:	2274      	movs	r2, #116	; 0x74
   1efc6:	2100      	movs	r1, #0
   1efc8:	a80e      	add	r0, sp, #56	; 0x38
   1efca:	f7fe fb4d 	bl	1d668 <CC_PalMemSetPlat>
   1efce:	4638      	mov	r0, r7
   1efd0:	b04c      	add	sp, #304	; 0x130
   1efd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1efd6:	4f08      	ldr	r7, [pc, #32]	; (1eff8 <kmu_derive_cmac+0x114>)
   1efd8:	4638      	mov	r0, r7
   1efda:	b04c      	add	sp, #304	; 0x130
   1efdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1efe0:	4f06      	ldr	r7, [pc, #24]	; (1effc <kmu_derive_cmac+0x118>)
   1efe2:	4638      	mov	r0, r7
   1efe4:	b04c      	add	sp, #304	; 0x130
   1efe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1efea:	2274      	movs	r2, #116	; 0x74
   1efec:	2100      	movs	r1, #0
   1efee:	a80e      	add	r0, sp, #56	; 0x38
   1eff0:	462f      	mov	r7, r5
   1eff2:	f7fe fb39 	bl	1d668 <CC_PalMemSetPlat>
   1eff6:	e7ea      	b.n	1efce <kmu_derive_cmac+0xea>
   1eff8:	00f1000e 	.word	0x00f1000e
   1effc:	00f1000f 	.word	0x00f1000f

0001f000 <UtilCmacBuildDataForDerivation>:
   1f000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f004:	b082      	sub	sp, #8
   1f006:	461e      	mov	r6, r3
   1f008:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1f00a:	2300      	movs	r3, #0
   1f00c:	f5b4 6f7f 	cmp.w	r4, #4080	; 0xff0
   1f010:	9301      	str	r3, [sp, #4]
   1f012:	d83e      	bhi.n	1f092 <UtilCmacBuildDataForDerivation+0x92>
   1f014:	00e4      	lsls	r4, r4, #3
   1f016:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   1f01a:	4617      	mov	r7, r2
   1f01c:	f101 32ff 	add.w	r2, r1, #4294967295
   1f020:	bf34      	ite	cc
   1f022:	2303      	movcc	r3, #3
   1f024:	2304      	movcs	r3, #4
   1f026:	2a3f      	cmp	r2, #63	; 0x3f
   1f028:	460d      	mov	r5, r1
   1f02a:	9300      	str	r3, [sp, #0]
   1f02c:	d831      	bhi.n	1f092 <UtilCmacBuildDataForDerivation+0x92>
   1f02e:	b380      	cbz	r0, 1f092 <UtilCmacBuildDataForDerivation+0x92>
   1f030:	b116      	cbz	r6, 1f038 <UtilCmacBuildDataForDerivation+0x38>
   1f032:	b377      	cbz	r7, 1f092 <UtilCmacBuildDataForDerivation+0x92>
   1f034:	2e40      	cmp	r6, #64	; 0x40
   1f036:	d82c      	bhi.n	1f092 <UtilCmacBuildDataForDerivation+0x92>
   1f038:	9a08      	ldr	r2, [sp, #32]
   1f03a:	b352      	cbz	r2, 1f092 <UtilCmacBuildDataForDerivation+0x92>
   1f03c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f03e:	6811      	ldr	r1, [r2, #0]
   1f040:	b339      	cbz	r1, 1f092 <UtilCmacBuildDataForDerivation+0x92>
   1f042:	19aa      	adds	r2, r5, r6
   1f044:	4413      	add	r3, r2
   1f046:	4299      	cmp	r1, r3
   1f048:	d323      	bcc.n	1f092 <UtilCmacBuildDataForDerivation+0x92>
   1f04a:	9b08      	ldr	r3, [sp, #32]
   1f04c:	4601      	mov	r1, r0
   1f04e:	462a      	mov	r2, r5
   1f050:	1c58      	adds	r0, r3, #1
   1f052:	f7fe fb07 	bl	1d664 <CC_PalMemCopyPlat>
   1f056:	9b08      	ldr	r3, [sp, #32]
   1f058:	f105 0802 	add.w	r8, r5, #2
   1f05c:	441d      	add	r5, r3
   1f05e:	2300      	movs	r3, #0
   1f060:	706b      	strb	r3, [r5, #1]
   1f062:	bb26      	cbnz	r6, 1f0ae <UtilCmacBuildDataForDerivation+0xae>
   1f064:	2cff      	cmp	r4, #255	; 0xff
   1f066:	9400      	str	r4, [sp, #0]
   1f068:	d917      	bls.n	1f09a <UtilCmacBuildDataForDerivation+0x9a>
   1f06a:	0223      	lsls	r3, r4, #8
   1f06c:	b29b      	uxth	r3, r3
   1f06e:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
   1f072:	9b08      	ldr	r3, [sp, #32]
   1f074:	9401      	str	r4, [sp, #4]
   1f076:	eb03 0008 	add.w	r0, r3, r8
   1f07a:	2202      	movs	r2, #2
   1f07c:	a901      	add	r1, sp, #4
   1f07e:	f7fe faf1 	bl	1d664 <CC_PalMemCopyPlat>
   1f082:	f108 0302 	add.w	r3, r8, #2
   1f086:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f088:	2000      	movs	r0, #0
   1f08a:	6013      	str	r3, [r2, #0]
   1f08c:	b002      	add	sp, #8
   1f08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f092:	480b      	ldr	r0, [pc, #44]	; (1f0c0 <UtilCmacBuildDataForDerivation+0xc0>)
   1f094:	b002      	add	sp, #8
   1f096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f09a:	9b08      	ldr	r3, [sp, #32]
   1f09c:	2201      	movs	r2, #1
   1f09e:	eb03 0008 	add.w	r0, r3, r8
   1f0a2:	4669      	mov	r1, sp
   1f0a4:	f7fe fade 	bl	1d664 <CC_PalMemCopyPlat>
   1f0a8:	f108 0301 	add.w	r3, r8, #1
   1f0ac:	e7eb      	b.n	1f086 <UtilCmacBuildDataForDerivation+0x86>
   1f0ae:	9b08      	ldr	r3, [sp, #32]
   1f0b0:	4632      	mov	r2, r6
   1f0b2:	eb03 0008 	add.w	r0, r3, r8
   1f0b6:	4639      	mov	r1, r7
   1f0b8:	f7fe fad4 	bl	1d664 <CC_PalMemCopyPlat>
   1f0bc:	44b0      	add	r8, r6
   1f0be:	e7d1      	b.n	1f064 <UtilCmacBuildDataForDerivation+0x64>
   1f0c0:	80000006 	.word	0x80000006

0001f0c4 <CC_PalDataBufferAttrGet>:
   1f0c4:	2000      	movs	r0, #0
   1f0c6:	7018      	strb	r0, [r3, #0]
   1f0c8:	4770      	bx	lr
   1f0ca:	bf00      	nop

0001f0cc <led_blink_times>:
#include "led.h"

void led_blink_times(const struct device* led, uint8_t times)
{
   1f0cc:	b570      	push	{r4, r5, r6, lr}
   1f0ce:	4604      	mov	r4, r0
   1f0d0:	460d      	mov	r5, r1
    for (uint8_t i=0; i < times; i++) 
   1f0d2:	2600      	movs	r6, #0
   1f0d4:	42ae      	cmp	r6, r5
   1f0d6:	d100      	bne.n	1f0da <led_blink_times+0xe>
        led_on(led,0);
        k_msleep(LED_ON_TIME_MS);
        led_off(led,0);
        k_msleep(LED_SLEEP_TIME_MS);
    }
}
   1f0d8:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, led);
   1f0da:	68a3      	ldr	r3, [r4, #8]
   1f0dc:	2100      	movs	r1, #0
   1f0de:	681b      	ldr	r3, [r3, #0]
   1f0e0:	4620      	mov	r0, r4
   1f0e2:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
   1f0e4:	2100      	movs	r1, #0
   1f0e6:	f242 6067 	movw	r0, #9831	; 0x2667
   1f0ea:	f7fc fccb 	bl	1ba84 <z_impl_k_sleep>
	return api->off(dev, led);
   1f0ee:	68a3      	ldr	r3, [r4, #8]
   1f0f0:	2100      	movs	r1, #0
   1f0f2:	685b      	ldr	r3, [r3, #4]
   1f0f4:	4620      	mov	r0, r4
   1f0f6:	4798      	blx	r3
   1f0f8:	f242 6067 	movw	r0, #9831	; 0x2667
   1f0fc:	2100      	movs	r1, #0
   1f0fe:	f7fc fcc1 	bl	1ba84 <z_impl_k_sleep>
    for (uint8_t i=0; i < times; i++) 
   1f102:	3601      	adds	r6, #1
   1f104:	e7e6      	b.n	1f0d4 <led_blink_times+0x8>

0001f106 <i2c_write.isra.0>:
static inline int i2c_write(const struct device *dev, const uint8_t *buf,
   1f106:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
   1f108:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1f10c:	2202      	movs	r2, #2
   1f10e:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1f112:	6882      	ldr	r2, [r0, #8]
   1f114:	a901      	add	r1, sp, #4
   1f116:	6894      	ldr	r4, [r2, #8]
   1f118:	2201      	movs	r2, #1
   1f11a:	47a0      	blx	r4
}
   1f11c:	b004      	add	sp, #16
   1f11e:	bd10      	pop	{r4, pc}

0001f120 <ccc_cfg_changed>:
static bool notify_enabled;
static void ccc_cfg_changed(const struct bt_gatt_attr *attr,
				 uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY) ? 1 : 0;
}
   1f120:	4770      	bx	lr

0001f122 <transceive>:
                    uint8_t interdelay, struct device *mlx_device_t) {
   1f122:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f126:	b085      	sub	sp, #20
   1f128:	af00      	add	r7, sp, #0
   1f12a:	461d      	mov	r5, r3
   1f12c:	6b7e      	ldr	r6, [r7, #52]	; 0x34
  uint8_t rxbuf2[rxlen + 2];
   1f12e:	3309      	adds	r3, #9
   1f130:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
                    uint8_t interdelay, struct device *mlx_device_t) {
   1f134:	4681      	mov	r9, r0
   1f136:	4688      	mov	r8, r1
   1f138:	4614      	mov	r4, r2
  uint8_t rxbuf2[rxlen + 2];
   1f13a:	ebad 0d03 	sub.w	sp, sp, r3
  if (mlx_device_t == NULL) {
   1f13e:	b926      	cbnz	r6, 1f14a <transceive+0x28>
    return false;
   1f140:	2000      	movs	r0, #0
}
   1f142:	3714      	adds	r7, #20
   1f144:	46bd      	mov	sp, r7
   1f146:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f14a:	4630      	mov	r0, r6
   1f14c:	f003 ff03 	bl	22f56 <z_device_is_ready>
  if (!device_is_ready(mlx_device_t)) {
   1f150:	2800      	cmp	r0, #0
   1f152:	d0f5      	beq.n	1f140 <transceive+0x1e>
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1f154:	2302      	movs	r3, #2
  if (i2c_write(mlx_device_t,txbuf, txlen, MLX90393_DEFAULT_ADDR)) {
   1f156:	e9c7 9801 	strd	r9, r8, [r7, #4]
   1f15a:	733b      	strb	r3, [r7, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1f15c:	68b3      	ldr	r3, [r6, #8]
   1f15e:	2201      	movs	r2, #1
   1f160:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1f164:	1d39      	adds	r1, r7, #4
   1f166:	230c      	movs	r3, #12
   1f168:	4630      	mov	r0, r6
   1f16a:	47c0      	blx	r8
   1f16c:	b108      	cbz	r0, 1f172 <transceive+0x50>
    return MLX90393_STATUS_ERROR;
   1f16e:	20ff      	movs	r0, #255	; 0xff
   1f170:	e7e7      	b.n	1f142 <transceive+0x20>
   1f172:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
   1f176:	03c0      	lsls	r0, r0, #15
   1f178:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f17c:	2300      	movs	r3, #0
   1f17e:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   1f182:	2100      	movs	r1, #0
   1f184:	f7e1 ff56 	bl	1034 <__aeabi_uldivmod>
   1f188:	f7fc fc7c 	bl	1ba84 <z_impl_k_sleep>
  uint8_t rxbuf2[rxlen + 2];
   1f18c:	1c6b      	adds	r3, r5, #1
	msg.len = num_bytes;
   1f18e:	60bb      	str	r3, [r7, #8]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1f190:	2303      	movs	r3, #3
	msg.buf = buf;
   1f192:	f8c7 d004 	str.w	sp, [r7, #4]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1f196:	733b      	strb	r3, [r7, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1f198:	68b3      	ldr	r3, [r6, #8]
   1f19a:	2201      	movs	r2, #1
   1f19c:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1f1a0:	1d39      	adds	r1, r7, #4
   1f1a2:	230c      	movs	r3, #12
   1f1a4:	4630      	mov	r0, r6
   1f1a6:	47c0      	blx	r8
  if (i2c_read(mlx_device_t,rxbuf2, rxlen + 1,MLX90393_DEFAULT_ADDR)) {
   1f1a8:	2800      	cmp	r0, #0
   1f1aa:	d1e0      	bne.n	1f16e <transceive+0x4c>
  status = rxbuf2[0];
   1f1ac:	466b      	mov	r3, sp
   1f1ae:	4622      	mov	r2, r4
   1f1b0:	f813 0b01 	ldrb.w	r0, [r3], #1
  for (i = 0; i < rxlen; i++) {
   1f1b4:	4425      	add	r5, r4
   1f1b6:	4295      	cmp	r5, r2
   1f1b8:	d101      	bne.n	1f1be <transceive+0x9c>
  return (status >> 2);
   1f1ba:	0880      	lsrs	r0, r0, #2
   1f1bc:	e7c1      	b.n	1f142 <transceive+0x20>
    rxbuf[i] = rxbuf2[i + 1];
   1f1be:	f813 1b01 	ldrb.w	r1, [r3], #1
   1f1c2:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < rxlen; i++) {
   1f1c6:	e7f6      	b.n	1f1b6 <transceive+0x94>

0001f1c8 <writeRegister>:
bool writeRegister(uint8_t reg, uint16_t data, struct device *mlx_device_t) {
   1f1c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t tx[4] = {MLX90393_REG_WR,
   1f1ca:	2360      	movs	r3, #96	; 0x60
   1f1cc:	f88d 300c 	strb.w	r3, [sp, #12]
   1f1d0:	0a0b      	lsrs	r3, r1, #8
   1f1d2:	f88d 300d 	strb.w	r3, [sp, #13]
                   reg << 2};   // the register itself, shift up by 2 bits!
   1f1d6:	0080      	lsls	r0, r0, #2
  return (transceive(tx, sizeof(tx), NULL, 0, 0, mlx_device_t) == MLX90393_STATUS_OK);
   1f1d8:	2300      	movs	r3, #0
  uint8_t tx[4] = {MLX90393_REG_WR,
   1f1da:	f88d 100e 	strb.w	r1, [sp, #14]
   1f1de:	f88d 000f 	strb.w	r0, [sp, #15]
  return (transceive(tx, sizeof(tx), NULL, 0, 0, mlx_device_t) == MLX90393_STATUS_OK);
   1f1e2:	9201      	str	r2, [sp, #4]
   1f1e4:	9300      	str	r3, [sp, #0]
   1f1e6:	461a      	mov	r2, r3
   1f1e8:	2104      	movs	r1, #4
   1f1ea:	a803      	add	r0, sp, #12
   1f1ec:	f7ff ff99 	bl	1f122 <transceive>
}
   1f1f0:	fab0 f080 	clz	r0, r0
   1f1f4:	0940      	lsrs	r0, r0, #5
   1f1f6:	b005      	add	sp, #20
   1f1f8:	f85d fb04 	ldr.w	pc, [sp], #4

0001f1fc <readRegister>:
bool readRegister(uint8_t reg, uint16_t *data, struct device *mlx_device_t) {
   1f1fc:	b530      	push	{r4, r5, lr}
   1f1fe:	b085      	sub	sp, #20
  uint8_t tx[2] = {MLX90393_REG_RR,reg << 2}; // the register itself, shift up by 2 bits!
   1f200:	2350      	movs	r3, #80	; 0x50
   1f202:	0080      	lsls	r0, r0, #2
   1f204:	f88d 3008 	strb.w	r3, [sp, #8]
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {
   1f208:	2400      	movs	r4, #0
   1f20a:	2302      	movs	r3, #2
bool readRegister(uint8_t reg, uint16_t *data, struct device *mlx_device_t) {
   1f20c:	460d      	mov	r5, r1
  uint8_t tx[2] = {MLX90393_REG_RR,reg << 2}; // the register itself, shift up by 2 bits!
   1f20e:	f88d 0009 	strb.w	r0, [sp, #9]
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {
   1f212:	9201      	str	r2, [sp, #4]
   1f214:	9400      	str	r4, [sp, #0]
   1f216:	aa03      	add	r2, sp, #12
   1f218:	4619      	mov	r1, r3
   1f21a:	a802      	add	r0, sp, #8
   1f21c:	f7ff ff81 	bl	1f122 <transceive>
   1f220:	b930      	cbnz	r0, 1f230 <readRegister+0x34>
  *data = ((uint16_t)rx[0] << 8) | rx[1];
   1f222:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1f226:	ba5b      	rev16	r3, r3
   1f228:	802b      	strh	r3, [r5, #0]
  return true;
   1f22a:	2001      	movs	r0, #1
}
   1f22c:	b005      	add	sp, #20
   1f22e:	bd30      	pop	{r4, r5, pc}
    return false;
   1f230:	4620      	mov	r0, r4
   1f232:	e7fb      	b.n	1f22c <readRegister+0x30>

0001f234 <mlx_exitMode>:
bool mlx_exitMode(struct device *mlx_device_t) {
   1f234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t tx[1] = {MLX90393_REG_EX};
   1f236:	2380      	movs	r3, #128	; 0x80
   1f238:	f88d 300c 	strb.w	r3, [sp, #12]
  return (transceive(tx, sizeof(tx), NULL, 0, 0, mlx_device_t) == MLX90393_STATUS_OK);
   1f23c:	2300      	movs	r3, #0
   1f23e:	9001      	str	r0, [sp, #4]
   1f240:	9300      	str	r3, [sp, #0]
   1f242:	461a      	mov	r2, r3
   1f244:	2101      	movs	r1, #1
   1f246:	a803      	add	r0, sp, #12
   1f248:	f7ff ff6b 	bl	1f122 <transceive>
}
   1f24c:	fab0 f080 	clz	r0, r0
   1f250:	0940      	lsrs	r0, r0, #5
   1f252:	b005      	add	sp, #20
   1f254:	f85d fb04 	ldr.w	pc, [sp], #4

0001f258 <mlx_reset>:
bool mlx_reset(struct device *mlx_device_t) {
   1f258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t tx[1] = {MLX90393_REG_RT};
   1f25a:	23f0      	movs	r3, #240	; 0xf0
   1f25c:	f88d 300c 	strb.w	r3, [sp, #12]
  if (transceive(tx, sizeof(tx), NULL, 0, 5, mlx_device_t) != MLX90393_STATUS_RESET) {
   1f260:	2305      	movs	r3, #5
   1f262:	9300      	str	r3, [sp, #0]
   1f264:	2300      	movs	r3, #0
   1f266:	9001      	str	r0, [sp, #4]
   1f268:	461a      	mov	r2, r3
   1f26a:	2101      	movs	r1, #1
   1f26c:	a803      	add	r0, sp, #12
   1f26e:	f7ff ff58 	bl	1f122 <transceive>
}
   1f272:	1e43      	subs	r3, r0, #1
   1f274:	4258      	negs	r0, r3
   1f276:	4158      	adcs	r0, r3
   1f278:	b005      	add	sp, #20
   1f27a:	f85d fb04 	ldr.w	pc, [sp], #4

0001f27e <mlx_setTrigInt>:
bool mlx_setTrigInt(bool state, struct device *mlx_device_t) {
   1f27e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  readRegister(MLX90393_CONF2, &data, mlx_device_t);
   1f280:	460a      	mov	r2, r1
bool mlx_setTrigInt(bool state, struct device *mlx_device_t) {
   1f282:	4605      	mov	r5, r0
   1f284:	460c      	mov	r4, r1
  readRegister(MLX90393_CONF2, &data, mlx_device_t);
   1f286:	2001      	movs	r0, #1
   1f288:	f10d 0106 	add.w	r1, sp, #6
   1f28c:	f7ff ffb6 	bl	1f1fc <readRegister>
  data &= ~0x8000;
   1f290:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1f294:	f3c3 030e 	ubfx	r3, r3, #0, #15
  if (state) {
   1f298:	b94d      	cbnz	r5, 1f2ae <mlx_setTrigInt+0x30>
    data |= 0x8000;
   1f29a:	f8ad 3006 	strh.w	r3, [sp, #6]
  return writeRegister(MLX90393_CONF2, data, mlx_device_t);
   1f29e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   1f2a2:	4622      	mov	r2, r4
   1f2a4:	2001      	movs	r0, #1
   1f2a6:	f7ff ff8f 	bl	1f1c8 <writeRegister>
}
   1f2aa:	b003      	add	sp, #12
   1f2ac:	bd30      	pop	{r4, r5, pc}
    data |= 0x8000;
   1f2ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
   1f2b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
   1f2b6:	e7f0      	b.n	1f29a <mlx_setTrigInt+0x1c>

0001f2b8 <startSingleMeasurement>:
uint8_t startSingleMeasurement(struct device *mlx_device_t) {
   1f2b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t tx[1] = {MLX90393_REG_SM | MLX90393_AXIS_ALL};
   1f2ba:	233e      	movs	r3, #62	; 0x3e
   1f2bc:	f88d 300c 	strb.w	r3, [sp, #12]
  uint8_t stat = transceive(tx, sizeof(tx), NULL, 0, 0, mlx_device_t);
   1f2c0:	2300      	movs	r3, #0
   1f2c2:	9001      	str	r0, [sp, #4]
   1f2c4:	9300      	str	r3, [sp, #0]
   1f2c6:	461a      	mov	r2, r3
   1f2c8:	2101      	movs	r1, #1
   1f2ca:	a803      	add	r0, sp, #12
   1f2cc:	f7ff ff29 	bl	1f122 <transceive>
}
   1f2d0:	b005      	add	sp, #20
   1f2d2:	f85d fb04 	ldr.w	pc, [sp], #4

0001f2d6 <startBurstMode>:
uint8_t startBurstMode(struct device *mlx_device_t){
   1f2d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t tx[1] = {MLX90393_REG_SB | MLX90393_AXIS_ALL};  
   1f2d8:	231e      	movs	r3, #30
   1f2da:	f88d 300c 	strb.w	r3, [sp, #12]
    uint8_t stat = transceive(tx, sizeof(tx), NULL, 0, 0,mlx_device_t);
   1f2de:	2300      	movs	r3, #0
   1f2e0:	9001      	str	r0, [sp, #4]
   1f2e2:	9300      	str	r3, [sp, #0]
   1f2e4:	461a      	mov	r2, r3
   1f2e6:	2101      	movs	r1, #1
   1f2e8:	a803      	add	r0, sp, #12
   1f2ea:	f7ff ff1a 	bl	1f122 <transceive>
    if ((stat == MLX90393_STATUS_OK) || (stat == MLX90393_STATUS_SMMODE)) {
   1f2ee:	f010 0ff7 	tst.w	r0, #247	; 0xf7
}
   1f2f2:	bf0c      	ite	eq
   1f2f4:	2001      	moveq	r0, #1
   1f2f6:	2000      	movne	r0, #0
   1f2f8:	b005      	add	sp, #20
   1f2fa:	f85d fb04 	ldr.w	pc, [sp], #4

0001f2fe <mlx_init>:

bool mlx_init(struct device *mlx_device) {
   1f2fe:	b510      	push	{r4, lr}

	//const struct device *mlx_device = device_get_binding("I2C_1");
  

  if (mlx_device == NULL) {
   1f300:	4604      	mov	r4, r0
   1f302:	b388      	cbz	r0, 1f368 <mlx_init+0x6a>
   1f304:	f003 fe27 	bl	22f56 <z_device_is_ready>
    return false;
  }

  if (!device_is_ready(mlx_device)) {
   1f308:	b370      	cbz	r0, 1f368 <mlx_init+0x6a>
    return false;
  }

  if (!mlx_exitMode(mlx_device)){
   1f30a:	4620      	mov	r0, r4
   1f30c:	f7ff ff92 	bl	1f234 <mlx_exitMode>
   1f310:	b350      	cbz	r0, 1f368 <mlx_init+0x6a>
    return false;
  }

  if (!mlx_reset(mlx_device)) {
   1f312:	4620      	mov	r0, r4
   1f314:	f7ff ffa0 	bl	1f258 <mlx_reset>
   1f318:	b330      	cbz	r0, 1f368 <mlx_init+0x6a>
    return false;
  }

  /* Set gain and sensor config. */
  if (!mlx_setGain(MLX90393_GAIN_1X, mlx_device)) {
   1f31a:	4621      	mov	r1, r4
   1f31c:	2007      	movs	r0, #7
   1f31e:	f7f2 fb8f 	bl	11a40 <mlx_setGain>
   1f322:	b308      	cbz	r0, 1f368 <mlx_init+0x6a>
    return false;
  }

  /* Set resolution. */
  if (!mlx_setResolution(MLX90393_X, MLX90393_RES_16, mlx_device)){
   1f324:	2100      	movs	r1, #0
   1f326:	4622      	mov	r2, r4
   1f328:	4608      	mov	r0, r1
   1f32a:	f7f2 fba5 	bl	11a78 <mlx_setResolution>
   1f32e:	b1d8      	cbz	r0, 1f368 <mlx_init+0x6a>
    return false;
  }
  if (!mlx_setResolution(MLX90393_Y, MLX90393_RES_16, mlx_device)){
   1f330:	4622      	mov	r2, r4
   1f332:	2100      	movs	r1, #0
   1f334:	2001      	movs	r0, #1
   1f336:	f7f2 fb9f 	bl	11a78 <mlx_setResolution>
   1f33a:	b1a8      	cbz	r0, 1f368 <mlx_init+0x6a>
    return false;
  }
  if (!mlx_setResolution(MLX90393_Z, MLX90393_RES_16, mlx_device)){
   1f33c:	4622      	mov	r2, r4
   1f33e:	2100      	movs	r1, #0
   1f340:	2002      	movs	r0, #2
   1f342:	f7f2 fb99 	bl	11a78 <mlx_setResolution>
   1f346:	b178      	cbz	r0, 1f368 <mlx_init+0x6a>
    return false;
  }

  /* Set oversampling. */
  if (!mlx_setOversampling(MLX90393_OSR_3, mlx_device)) {
   1f348:	4621      	mov	r1, r4
   1f34a:	2003      	movs	r0, #3
   1f34c:	f7f2 fbe8 	bl	11b20 <mlx_setOversampling>
   1f350:	b150      	cbz	r0, 1f368 <mlx_init+0x6a>
    return false;
  }

  /* Set digital filtering. */
  if (!mlx_setFilter(MLX90393_FILTER_7, mlx_device)) {
   1f352:	4621      	mov	r1, r4
   1f354:	2007      	movs	r0, #7
   1f356:	f7f2 fbc7 	bl	11ae8 <mlx_setFilter>
   1f35a:	b128      	cbz	r0, 1f368 <mlx_init+0x6a>
    return false;
  }

  /* set INT pin to output interrupt */
  if (!mlx_setTrigInt(true, mlx_device)) {
   1f35c:	4621      	mov	r1, r4
   1f35e:	2001      	movs	r0, #1
  }

  

  return true;
   1f360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (!mlx_setTrigInt(true, mlx_device)) {
   1f364:	f7ff bf8b 	b.w	1f27e <mlx_setTrigInt>
   1f368:	2000      	movs	r0, #0
   1f36a:	bd10      	pop	{r4, pc}

0001f36c <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
   1f36c:	b158      	cbz	r0, 1f386 <null_ptr_check+0x1a>
   1f36e:	68c3      	ldr	r3, [r0, #12]
   1f370:	b14b      	cbz	r3, 1f386 <null_ptr_check+0x1a>
   1f372:	6903      	ldr	r3, [r0, #16]
   1f374:	b13b      	cbz	r3, 1f386 <null_ptr_check+0x1a>
   1f376:	6943      	ldr	r3, [r0, #20]
   1f378:	b12b      	cbz	r3, 1f386 <null_ptr_check+0x1a>
   1f37a:	6840      	ldr	r0, [r0, #4]
   1f37c:	fab0 f080 	clz	r0, r0
   1f380:	0940      	lsrs	r0, r0, #5
   1f382:	4240      	negs	r0, r0
   1f384:	4770      	bx	lr
        (dev->intf_ptr == NULL))
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
   1f386:	f04f 30ff 	mov.w	r0, #4294967295
        /* Device structure is fine */
        rslt = BMP3_OK;
    }

    return rslt;
}
   1f38a:	4770      	bx	lr

0001f38c <compensate_data>:
{
   1f38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f390:	4682      	mov	sl, r0
   1f392:	b087      	sub	sp, #28
   1f394:	460d      	mov	r5, r1
   1f396:	461c      	mov	r4, r3
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
   1f398:	4693      	mov	fp, r2
   1f39a:	2a00      	cmp	r2, #0
   1f39c:	f000 80dc 	beq.w	1f558 <compensate_data+0x1cc>
        if (sensor_comp & (BMP3_PRESS | BMP3_TEMP))
   1f3a0:	f010 0f03 	tst.w	r0, #3
   1f3a4:	d022      	beq.n	1f3ec <compensate_data+0x60>
    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
   1f3a6:	6848      	ldr	r0, [r1, #4]
   1f3a8:	f7e0 ffec 	bl	384 <__aeabi_ui2d>
   1f3ac:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f3b0:	f7e0 feaa 	bl	108 <__aeabi_dsub>
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   1f3b4:	4602      	mov	r2, r0
   1f3b6:	460b      	mov	r3, r1
    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
   1f3b8:	4606      	mov	r6, r0
   1f3ba:	460f      	mov	r7, r1
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   1f3bc:	f7e1 f85c 	bl	478 <__aeabi_dmul>
   1f3c0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1f3c4:	f7e1 f858 	bl	478 <__aeabi_dmul>
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
   1f3c8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   1f3cc:	4680      	mov	r8, r0
   1f3ce:	4689      	mov	r9, r1
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
   1f3d0:	4630      	mov	r0, r6
   1f3d2:	4639      	mov	r1, r7
   1f3d4:	f7e1 f850 	bl	478 <__aeabi_dmul>
   1f3d8:	4602      	mov	r2, r0
   1f3da:	460b      	mov	r3, r1
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   1f3dc:	4640      	mov	r0, r8
   1f3de:	4649      	mov	r1, r9
   1f3e0:	f7e0 fe94 	bl	10c <__adddf3>
   1f3e4:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
   1f3e8:	e9cb 0100 	strd	r0, r1, [fp]
        if (sensor_comp & BMP3_PRESS)
   1f3ec:	f01a 0001 	ands.w	r0, sl, #1
   1f3f0:	f000 80af 	beq.w	1f552 <compensate_data+0x1c6>
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
   1f3f4:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
        pow_output = (float) base * pow_output;
   1f3f8:	4619      	mov	r1, r3
   1f3fa:	4610      	mov	r0, r2
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
   1f3fc:	e9cd 2300 	strd	r2, r3, [sp]
        pow_output = (float) base * pow_output;
   1f400:	f7e1 fad4 	bl	9ac <__aeabi_d2f>
   1f404:	4601      	mov	r1, r0
   1f406:	4606      	mov	r6, r0
   1f408:	f7e1 fc2e 	bl	c68 <__aeabi_fmul>
   1f40c:	4607      	mov	r7, r0
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1f40e:	f7e0 ffdb 	bl	3c8 <__aeabi_f2d>
   1f412:	e9cd 0102 	strd	r0, r1, [sp, #8]
        pow_output = (float) base * pow_output;
   1f416:	4639      	mov	r1, r7
   1f418:	4630      	mov	r0, r6
   1f41a:	f7e1 fc25 	bl	c68 <__aeabi_fmul>
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1f41e:	f7e0 ffd3 	bl	3c8 <__aeabi_f2d>
   1f422:	e9cd 0104 	strd	r0, r1, [sp, #16]
    partial_out2 = uncomp_data->pressure *
   1f426:	6828      	ldr	r0, [r5, #0]
   1f428:	f7e0 ffac 	bl	384 <__aeabi_ui2d>
   1f42c:	4689      	mov	r9, r1
   1f42e:	4680      	mov	r8, r0
        pow_output = (float) base * pow_output;
   1f430:	f7e1 fabc 	bl	9ac <__aeabi_d2f>
   1f434:	4601      	mov	r1, r0
   1f436:	4682      	mov	sl, r0
   1f438:	f7e1 fc16 	bl	c68 <__aeabi_fmul>
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
   1f43c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
        pow_output = (float) base * pow_output;
   1f440:	4605      	mov	r5, r0
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
   1f442:	e9dd 0100 	ldrd	r0, r1, [sp]
   1f446:	f7e1 f817 	bl	478 <__aeabi_dmul>
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1f44a:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1f44e:	f7e0 fe5d 	bl	10c <__adddf3>
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1f452:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1f456:	4606      	mov	r6, r0
   1f458:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1f45a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1f45e:	f7e1 f80b 	bl	478 <__aeabi_dmul>
   1f462:	4602      	mov	r2, r0
   1f464:	460b      	mov	r3, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1f466:	4630      	mov	r0, r6
   1f468:	4639      	mov	r1, r7
   1f46a:	f7e0 fe4f 	bl	10c <__adddf3>
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1f46e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1f472:	4606      	mov	r6, r0
   1f474:	460f      	mov	r7, r1
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1f476:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f47a:	f7e0 fffd 	bl	478 <__aeabi_dmul>
   1f47e:	4602      	mov	r2, r0
   1f480:	460b      	mov	r3, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1f482:	4630      	mov	r0, r6
   1f484:	4639      	mov	r1, r7
   1f486:	f7e0 fe41 	bl	10c <__adddf3>
    partial_out2 = uncomp_data->pressure *
   1f48a:	4642      	mov	r2, r8
   1f48c:	464b      	mov	r3, r9
   1f48e:	f7e0 fff3 	bl	478 <__aeabi_dmul>
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
   1f492:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    partial_out2 = uncomp_data->pressure *
   1f496:	4680      	mov	r8, r0
   1f498:	4689      	mov	r9, r1
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
   1f49a:	e9dd 0100 	ldrd	r0, r1, [sp]
   1f49e:	f7e0 ffeb 	bl	478 <__aeabi_dmul>
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1f4a2:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   1f4a6:	f7e0 fe31 	bl	10c <__adddf3>
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1f4aa:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1f4ae:	4606      	mov	r6, r0
   1f4b0:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1f4b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1f4b6:	f7e0 ffdf 	bl	478 <__aeabi_dmul>
   1f4ba:	4602      	mov	r2, r0
   1f4bc:	460b      	mov	r3, r1
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1f4be:	4630      	mov	r0, r6
   1f4c0:	4639      	mov	r1, r7
   1f4c2:	f7e0 fe23 	bl	10c <__adddf3>
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1f4c6:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1f4ca:	4606      	mov	r6, r0
   1f4cc:	460f      	mov	r7, r1
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1f4ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f4d2:	f7e0 ffd1 	bl	478 <__aeabi_dmul>
   1f4d6:	4602      	mov	r2, r0
   1f4d8:	460b      	mov	r3, r1
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1f4da:	4630      	mov	r0, r6
   1f4dc:	4639      	mov	r1, r7
   1f4de:	f7e0 fe15 	bl	10c <__adddf3>
   1f4e2:	4602      	mov	r2, r0
   1f4e4:	460b      	mov	r3, r1
    comp_press = partial_out1 + partial_out2 + partial_data4;
   1f4e6:	4640      	mov	r0, r8
   1f4e8:	4649      	mov	r1, r9
   1f4ea:	f7e0 fe0f 	bl	10c <__adddf3>
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
   1f4ee:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    comp_press = partial_out1 + partial_out2 + partial_data4;
   1f4f2:	4606      	mov	r6, r0
   1f4f4:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
   1f4f6:	e9dd 0100 	ldrd	r0, r1, [sp]
   1f4fa:	f7e0 ffbd 	bl	478 <__aeabi_dmul>
   1f4fe:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
   1f502:	f7e0 fe03 	bl	10c <__adddf3>
   1f506:	4680      	mov	r8, r0
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
   1f508:	4628      	mov	r0, r5
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
   1f50a:	4689      	mov	r9, r1
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
   1f50c:	f7e0 ff5c 	bl	3c8 <__aeabi_f2d>
   1f510:	4602      	mov	r2, r0
   1f512:	460b      	mov	r3, r1
    partial_data3 = partial_data1 * partial_data2;
   1f514:	4640      	mov	r0, r8
   1f516:	4649      	mov	r1, r9
   1f518:	f7e0 ffae 	bl	478 <__aeabi_dmul>
   1f51c:	4680      	mov	r8, r0
   1f51e:	4689      	mov	r9, r1
        pow_output = (float) base * pow_output;
   1f520:	4650      	mov	r0, sl
   1f522:	4629      	mov	r1, r5
   1f524:	f7e1 fba0 	bl	c68 <__aeabi_fmul>
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
   1f528:	f7e0 ff4e 	bl	3c8 <__aeabi_f2d>
   1f52c:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
   1f530:	f7e0 ffa2 	bl	478 <__aeabi_dmul>
   1f534:	4602      	mov	r2, r0
   1f536:	460b      	mov	r3, r1
   1f538:	4640      	mov	r0, r8
   1f53a:	4649      	mov	r1, r9
   1f53c:	f7e0 fde6 	bl	10c <__adddf3>
   1f540:	4602      	mov	r2, r0
   1f542:	460b      	mov	r3, r1
    comp_press = partial_out1 + partial_out2 + partial_data4;
   1f544:	4630      	mov	r0, r6
   1f546:	4639      	mov	r1, r7
   1f548:	f7e0 fde0 	bl	10c <__adddf3>
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
   1f54c:	e9cb 0102 	strd	r0, r1, [fp, #8]
    int8_t rslt = BMP3_OK;
   1f550:	2000      	movs	r0, #0
}
   1f552:	b007      	add	sp, #28
   1f554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rslt = BMP3_E_NULL_PTR;
   1f558:	f04f 30ff 	mov.w	r0, #4294967295
   1f55c:	e7f9      	b.n	1f552 <compensate_data+0x1c6>

0001f55e <bmp3_get_regs>:
{
   1f55e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f562:	4606      	mov	r6, r0
   1f564:	af00      	add	r7, sp, #0
    rslt = null_ptr_check(dev);
   1f566:	4618      	mov	r0, r3
{
   1f568:	461c      	mov	r4, r3
    rslt = null_ptr_check(dev);
   1f56a:	f7ff feff 	bl	1f36c <null_ptr_check>
{
   1f56e:	4689      	mov	r9, r1
   1f570:	4690      	mov	r8, r2
    if ((rslt == BMP3_OK) && (reg_data != NULL))
   1f572:	4605      	mov	r5, r0
   1f574:	bb88      	cbnz	r0, 1f5da <bmp3_get_regs+0x7c>
   1f576:	b381      	cbz	r1, 1f5da <bmp3_get_regs+0x7c>
        uint32_t temp_len = len + dev->dummy_byte;
   1f578:	7aa0      	ldrb	r0, [r4, #10]
        if (dev->intf != BMP3_I2C_INTF)
   1f57a:	f894 c008 	ldrb.w	ip, [r4, #8]
        uint32_t temp_len = len + dev->dummy_byte;
   1f57e:	4410      	add	r0, r2
        uint8_t temp_buff[len + dev->dummy_byte];
   1f580:	1dc3      	adds	r3, r0, #7
   1f582:	f023 0307 	bic.w	r3, r3, #7
    {
   1f586:	46eb      	mov	fp, sp
        uint8_t temp_buff[len + dev->dummy_byte];
   1f588:	ebad 0d03 	sub.w	sp, sp, r3
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
   1f58c:	68e3      	ldr	r3, [r4, #12]
        if (dev->intf != BMP3_I2C_INTF)
   1f58e:	f1bc 0f01 	cmp.w	ip, #1
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
   1f592:	469e      	mov	lr, r3
        uint8_t temp_buff[len + dev->dummy_byte];
   1f594:	46ea      	mov	sl, sp
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
   1f596:	6863      	ldr	r3, [r4, #4]
        if (dev->intf != BMP3_I2C_INTF)
   1f598:	d01a      	beq.n	1f5d0 <bmp3_get_regs+0x72>
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
   1f59a:	4602      	mov	r2, r0
   1f59c:	4669      	mov	r1, sp
   1f59e:	f046 0080 	orr.w	r0, r6, #128	; 0x80
   1f5a2:	4676      	mov	r6, lr
   1f5a4:	47b0      	blx	r6
   1f5a6:	7260      	strb	r0, [r4, #9]
            for (idx = 0; idx < len; idx++)
   1f5a8:	4545      	cmp	r5, r8
   1f5aa:	d109      	bne.n	1f5c0 <bmp3_get_regs+0x62>
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
   1f5ac:	f994 0009 	ldrsb.w	r0, [r4, #9]
            rslt = BMP3_E_COMM_FAIL;
   1f5b0:	2800      	cmp	r0, #0
   1f5b2:	bf18      	it	ne
   1f5b4:	f06f 0006 	mvnne.w	r0, #6
   1f5b8:	46dd      	mov	sp, fp
}
   1f5ba:	46bd      	mov	sp, r7
   1f5bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
   1f5c0:	7aa3      	ldrb	r3, [r4, #10]
   1f5c2:	eb0a 0205 	add.w	r2, sl, r5
   1f5c6:	5cd3      	ldrb	r3, [r2, r3]
   1f5c8:	f809 3005 	strb.w	r3, [r9, r5]
            for (idx = 0; idx < len; idx++)
   1f5cc:	3501      	adds	r5, #1
   1f5ce:	e7eb      	b.n	1f5a8 <bmp3_get_regs+0x4a>
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
   1f5d0:	4630      	mov	r0, r6
   1f5d2:	4675      	mov	r5, lr
   1f5d4:	47a8      	blx	r5
   1f5d6:	7260      	strb	r0, [r4, #9]
   1f5d8:	e7e8      	b.n	1f5ac <bmp3_get_regs+0x4e>
        rslt = BMP3_E_NULL_PTR;
   1f5da:	f04f 30ff 	mov.w	r0, #4294967295
   1f5de:	e7ec      	b.n	1f5ba <bmp3_get_regs+0x5c>

0001f5e0 <bmp3_set_regs>:
{
   1f5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t temp_buff[len * 2];
   1f5e4:	ea4f 0842 	mov.w	r8, r2, lsl #1
{
   1f5e8:	461c      	mov	r4, r3
    uint8_t temp_buff[len * 2];
   1f5ea:	f108 0307 	add.w	r3, r8, #7
   1f5ee:	f023 0307 	bic.w	r3, r3, #7
{
   1f5f2:	af00      	add	r7, sp, #0
   1f5f4:	4606      	mov	r6, r0
    uint8_t temp_buff[len * 2];
   1f5f6:	ebad 0d03 	sub.w	sp, sp, r3
    rslt = null_ptr_check(dev);
   1f5fa:	4620      	mov	r0, r4
{
   1f5fc:	460d      	mov	r5, r1
    uint8_t temp_buff[len * 2];
   1f5fe:	4669      	mov	r1, sp
    rslt = null_ptr_check(dev);
   1f600:	f7ff feb4 	bl	1f36c <null_ptr_check>
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
   1f604:	bb70      	cbnz	r0, 1f664 <bmp3_set_regs+0x84>
   1f606:	b36e      	cbz	r6, 1f664 <bmp3_set_regs+0x84>
   1f608:	b365      	cbz	r5, 1f664 <bmp3_set_regs+0x84>
        if (len != 0)
   1f60a:	b372      	cbz	r2, 1f66a <bmp3_set_regs+0x8a>
            temp_buff[0] = reg_data[0];
   1f60c:	782b      	ldrb	r3, [r5, #0]
   1f60e:	f88d 3000 	strb.w	r3, [sp]
            if (dev->intf == BMP3_SPI_INTF)
   1f612:	7a23      	ldrb	r3, [r4, #8]
   1f614:	b303      	cbz	r3, 1f658 <bmp3_set_regs+0x78>
            if (len > 1)
   1f616:	2a01      	cmp	r2, #1
   1f618:	d00c      	beq.n	1f634 <bmp3_set_regs+0x54>
    for (index = 1; index < len; index++)
   1f61a:	2301      	movs	r3, #1
        temp_buff[(index * 2) - 1] = reg_addr[index];
   1f61c:	f101 3cff 	add.w	ip, r1, #4294967295
   1f620:	5cf0      	ldrb	r0, [r6, r3]
   1f622:	f80c 0013 	strb.w	r0, [ip, r3, lsl #1]
        temp_buff[index * 2] = reg_data[index];
   1f626:	5ce8      	ldrb	r0, [r5, r3]
   1f628:	f801 0013 	strb.w	r0, [r1, r3, lsl #1]
    for (index = 1; index < len; index++)
   1f62c:	3301      	adds	r3, #1
   1f62e:	429a      	cmp	r2, r3
   1f630:	d8f6      	bhi.n	1f620 <bmp3_set_regs+0x40>
                temp_len = len * 2;
   1f632:	4642      	mov	r2, r8
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
   1f634:	6925      	ldr	r5, [r4, #16]
   1f636:	6863      	ldr	r3, [r4, #4]
   1f638:	7830      	ldrb	r0, [r6, #0]
   1f63a:	47a8      	blx	r5
                rslt = BMP3_E_COMM_FAIL;
   1f63c:	2800      	cmp	r0, #0
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
   1f63e:	7260      	strb	r0, [r4, #9]
                rslt = BMP3_E_COMM_FAIL;
   1f640:	bf18      	it	ne
   1f642:	f06f 0006 	mvnne.w	r0, #6
}
   1f646:	46bd      	mov	sp, r7
   1f648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
   1f64c:	f816 c000 	ldrb.w	ip, [r6, r0]
   1f650:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
   1f654:	f806 c000 	strb.w	ip, [r6, r0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
   1f658:	b2d8      	uxtb	r0, r3
   1f65a:	4282      	cmp	r2, r0
   1f65c:	f103 0301 	add.w	r3, r3, #1
   1f660:	d8f4      	bhi.n	1f64c <bmp3_set_regs+0x6c>
   1f662:	e7d8      	b.n	1f616 <bmp3_set_regs+0x36>
        rslt = BMP3_E_NULL_PTR;
   1f664:	f04f 30ff 	mov.w	r0, #4294967295
   1f668:	e7ed      	b.n	1f646 <bmp3_set_regs+0x66>
            rslt = BMP3_E_INVALID_LEN;
   1f66a:	f06f 0005 	mvn.w	r0, #5
   1f66e:	e7ea      	b.n	1f646 <bmp3_set_regs+0x66>

0001f670 <write_power_mode>:
{
   1f670:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f672:	4604      	mov	r4, r0
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
   1f674:	4623      	mov	r3, r4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1f676:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
   1f678:	2201      	movs	r2, #1
   1f67a:	f10d 0107 	add.w	r1, sp, #7
    uint8_t op_mode = dev->settings.op_mode;
   1f67e:	f894 50b0 	ldrb.w	r5, [r4, #176]	; 0xb0
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1f682:	f88d 0006 	strb.w	r0, [sp, #6]
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
   1f686:	f7ff ff6a 	bl	1f55e <bmp3_get_regs>
    if (rslt == BMP3_OK)
   1f68a:	b988      	cbnz	r0, 1f6b0 <write_power_mode+0x40>
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
   1f68c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f690:	012d      	lsls	r5, r5, #4
   1f692:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1f696:	f005 0530 	and.w	r5, r5, #48	; 0x30
   1f69a:	432b      	orrs	r3, r5
   1f69c:	f88d 3007 	strb.w	r3, [sp, #7]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
   1f6a0:	2201      	movs	r2, #1
   1f6a2:	4623      	mov	r3, r4
   1f6a4:	f10d 0107 	add.w	r1, sp, #7
   1f6a8:	f10d 0006 	add.w	r0, sp, #6
   1f6ac:	f7ff ff98 	bl	1f5e0 <bmp3_set_regs>
}
   1f6b0:	b003      	add	sp, #12
   1f6b2:	bd30      	pop	{r4, r5, pc}

0001f6b4 <bmp3_soft_reset>:
{
   1f6b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t reg_addr = BMP3_REG_CMD;
   1f6b6:	237e      	movs	r3, #126	; 0x7e
   1f6b8:	f88d 3004 	strb.w	r3, [sp, #4]
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
   1f6bc:	23b6      	movs	r3, #182	; 0xb6
{
   1f6be:	4605      	mov	r5, r0
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
   1f6c0:	f88d 3005 	strb.w	r3, [sp, #5]
    rslt = null_ptr_check(dev);
   1f6c4:	f7ff fe52 	bl	1f36c <null_ptr_check>
    if (rslt == BMP3_OK)
   1f6c8:	4604      	mov	r4, r0
   1f6ca:	b960      	cbnz	r0, 1f6e6 <bmp3_soft_reset+0x32>
        rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
   1f6cc:	462b      	mov	r3, r5
   1f6ce:	2201      	movs	r2, #1
   1f6d0:	f10d 0106 	add.w	r1, sp, #6
   1f6d4:	2003      	movs	r0, #3
   1f6d6:	f7ff ff42 	bl	1f55e <bmp3_get_regs>
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
   1f6da:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1f6de:	06db      	lsls	r3, r3, #27
   1f6e0:	d404      	bmi.n	1f6ec <bmp3_soft_reset+0x38>
            rslt = BMP3_E_CMD_EXEC_FAILED;
   1f6e2:	f06f 0403 	mvn.w	r4, #3
}
   1f6e6:	4620      	mov	r0, r4
   1f6e8:	b003      	add	sp, #12
   1f6ea:	bd30      	pop	{r4, r5, pc}
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
   1f6ec:	2800      	cmp	r0, #0
   1f6ee:	d1f8      	bne.n	1f6e2 <bmp3_soft_reset+0x2e>
            rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   1f6f0:	462b      	mov	r3, r5
   1f6f2:	2201      	movs	r2, #1
   1f6f4:	f10d 0105 	add.w	r1, sp, #5
   1f6f8:	a801      	add	r0, sp, #4
   1f6fa:	f7ff ff71 	bl	1f5e0 <bmp3_set_regs>
            if (rslt == BMP3_OK)
   1f6fe:	4604      	mov	r4, r0
   1f700:	2800      	cmp	r0, #0
   1f702:	d1f0      	bne.n	1f6e6 <bmp3_soft_reset+0x32>
                dev->delay_us(2000, dev->intf_ptr);
   1f704:	696b      	ldr	r3, [r5, #20]
   1f706:	6869      	ldr	r1, [r5, #4]
   1f708:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   1f70c:	4798      	blx	r3
                rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
   1f70e:	462b      	mov	r3, r5
   1f710:	2201      	movs	r2, #1
   1f712:	f10d 0107 	add.w	r1, sp, #7
   1f716:	2002      	movs	r0, #2
   1f718:	f7ff ff21 	bl	1f55e <bmp3_get_regs>
                if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
   1f71c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f720:	f003 037e 	and.w	r3, r3, #126	; 0x7e
   1f724:	4303      	orrs	r3, r0
   1f726:	b2db      	uxtb	r3, r3
   1f728:	2b00      	cmp	r3, #0
   1f72a:	d0dc      	beq.n	1f6e6 <bmp3_soft_reset+0x32>
   1f72c:	e7d9      	b.n	1f6e2 <bmp3_soft_reset+0x2e>

0001f72e <bmp3_get_op_mode>:
{
   1f72e:	b510      	push	{r4, lr}
   1f730:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
   1f732:	4608      	mov	r0, r1
   1f734:	f7ff fe1a 	bl	1f36c <null_ptr_check>
    if ((rslt == BMP3_OK) && (op_mode != NULL))
   1f738:	b958      	cbnz	r0, 1f752 <bmp3_get_op_mode+0x24>
   1f73a:	b154      	cbz	r4, 1f752 <bmp3_get_op_mode+0x24>
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
   1f73c:	460b      	mov	r3, r1
   1f73e:	2201      	movs	r2, #1
   1f740:	4621      	mov	r1, r4
   1f742:	201b      	movs	r0, #27
   1f744:	f7ff ff0b 	bl	1f55e <bmp3_get_regs>
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
   1f748:	7823      	ldrb	r3, [r4, #0]
   1f74a:	f3c3 1301 	ubfx	r3, r3, #4, #2
   1f74e:	7023      	strb	r3, [r4, #0]
}
   1f750:	bd10      	pop	{r4, pc}
        rslt = BMP3_E_NULL_PTR;
   1f752:	f04f 30ff 	mov.w	r0, #4294967295
   1f756:	e7fb      	b.n	1f750 <bmp3_get_op_mode+0x22>

0001f758 <bmp3_set_op_mode>:
{
   1f758:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f75a:	4605      	mov	r5, r0
    rslt = null_ptr_check(dev);
   1f75c:	f7ff fe06 	bl	1f36c <null_ptr_check>
    if (rslt == BMP3_OK)
   1f760:	4604      	mov	r4, r0
   1f762:	2800      	cmp	r0, #0
   1f764:	d163      	bne.n	1f82e <bmp3_set_op_mode+0xd6>
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
   1f766:	4629      	mov	r1, r5
   1f768:	f10d 0002 	add.w	r0, sp, #2
        uint8_t curr_mode = dev->settings.op_mode;
   1f76c:	f895 60b0 	ldrb.w	r6, [r5, #176]	; 0xb0
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
   1f770:	f7ff ffdd 	bl	1f72e <bmp3_get_op_mode>
        if (last_set_mode != BMP3_MODE_SLEEP)
   1f774:	f89d 3002 	ldrb.w	r3, [sp, #2]
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
   1f778:	4604      	mov	r4, r0
        if (last_set_mode != BMP3_MODE_SLEEP)
   1f77a:	b1e3      	cbz	r3, 1f7b6 <bmp3_set_op_mode+0x5e>
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1f77c:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
   1f77e:	462b      	mov	r3, r5
   1f780:	2201      	movs	r2, #1
   1f782:	a901      	add	r1, sp, #4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1f784:	f88d 0003 	strb.w	r0, [sp, #3]
    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
   1f788:	f7ff fee9 	bl	1f55e <bmp3_get_regs>
    if (rslt == BMP3_OK)
   1f78c:	4604      	mov	r4, r0
   1f78e:	b968      	cbnz	r0, 1f7ac <bmp3_set_op_mode+0x54>
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
   1f790:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1f794:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1f798:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
   1f79c:	2201      	movs	r2, #1
   1f79e:	462b      	mov	r3, r5
   1f7a0:	a901      	add	r1, sp, #4
   1f7a2:	f10d 0003 	add.w	r0, sp, #3
   1f7a6:	f7ff ff1b 	bl	1f5e0 <bmp3_set_regs>
   1f7aa:	4604      	mov	r4, r0
            dev->delay_us(5000, dev->intf_ptr);
   1f7ac:	696b      	ldr	r3, [r5, #20]
   1f7ae:	6869      	ldr	r1, [r5, #4]
   1f7b0:	f241 3088 	movw	r0, #5000	; 0x1388
   1f7b4:	4798      	blx	r3
        if (rslt == BMP3_OK)
   1f7b6:	bbd4      	cbnz	r4, 1f82e <bmp3_set_op_mode+0xd6>
            if (curr_mode == BMP3_MODE_NORMAL)
   1f7b8:	2e03      	cmp	r6, #3
   1f7ba:	d13b      	bne.n	1f834 <bmp3_set_op_mode+0xdc>
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
   1f7bc:	2204      	movs	r2, #4
   1f7be:	462b      	mov	r3, r5
   1f7c0:	eb0d 0102 	add.w	r1, sp, r2
   1f7c4:	201c      	movs	r0, #28
   1f7c6:	f7ff feca 	bl	1f55e <bmp3_get_regs>
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
   1f7ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1f7ce:	f003 0207 	and.w	r2, r3, #7
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
   1f7d2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1f7d6:	f885 30b4 	strb.w	r3, [r5, #180]	; 0xb4
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
   1f7da:	f89d 3005 	ldrb.w	r3, [sp, #5]
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
   1f7de:	f885 20b3 	strb.w	r2, [r5, #179]	; 0xb3
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
   1f7e2:	f003 031f 	and.w	r3, r3, #31
   1f7e6:	f885 30b6 	strb.w	r3, [r5, #182]	; 0xb6
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
   1f7ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f7ee:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1f7f2:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
    if (rslt == BMP3_OK)
   1f7f6:	4604      	mov	r4, r0
   1f7f8:	b9c8      	cbnz	r0, 1f82e <bmp3_set_op_mode+0xd6>
        rslt = validate_osr_and_odr_settings(dev);
   1f7fa:	4628      	mov	r0, r5
   1f7fc:	f7f2 fa7a 	bl	11cf4 <validate_osr_and_odr_settings>
    if (rslt == BMP3_OK)
   1f800:	4604      	mov	r4, r0
   1f802:	b9a0      	cbnz	r0, 1f82e <bmp3_set_op_mode+0xd6>
        rslt = write_power_mode(dev);
   1f804:	4628      	mov	r0, r5
   1f806:	f7ff ff33 	bl	1f670 <write_power_mode>
        if (rslt == BMP3_OK)
   1f80a:	4604      	mov	r4, r0
   1f80c:	b978      	cbnz	r0, 1f82e <bmp3_set_op_mode+0xd6>
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
   1f80e:	462b      	mov	r3, r5
   1f810:	2201      	movs	r2, #1
   1f812:	a901      	add	r1, sp, #4
   1f814:	2002      	movs	r0, #2
   1f816:	f7ff fea2 	bl	1f55e <bmp3_get_regs>
            if (rslt == BMP3_OK)
   1f81a:	4604      	mov	r4, r0
   1f81c:	b938      	cbnz	r0, 1f82e <bmp3_set_op_mode+0xd6>
                if (conf_err_status & BMP3_ERR_CONF)
   1f81e:	f89d 3004 	ldrb.w	r3, [sp, #4]
                    rslt = BMP3_E_CONFIGURATION_ERR;
   1f822:	f013 0f04 	tst.w	r3, #4
   1f826:	bf0c      	ite	eq
   1f828:	4604      	moveq	r4, r0
   1f82a:	f06f 0404 	mvnne.w	r4, #4
}
   1f82e:	4620      	mov	r0, r4
   1f830:	b002      	add	sp, #8
   1f832:	bd70      	pop	{r4, r5, r6, pc}
            else if (curr_mode == BMP3_MODE_FORCED)
   1f834:	2e01      	cmp	r6, #1
   1f836:	d1fa      	bne.n	1f82e <bmp3_set_op_mode+0xd6>
                rslt = write_power_mode(dev);
   1f838:	4628      	mov	r0, r5
   1f83a:	f7ff ff19 	bl	1f670 <write_power_mode>
   1f83e:	4604      	mov	r4, r0
   1f840:	e7f5      	b.n	1f82e <bmp3_set_op_mode+0xd6>

0001f842 <bmp3_get_sensor_data>:
{
   1f842:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f844:	b085      	sub	sp, #20
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
   1f846:	2300      	movs	r3, #0
{
   1f848:	4606      	mov	r6, r0
    rslt = null_ptr_check(dev);
   1f84a:	4610      	mov	r0, r2
    struct bmp3_uncomp_data uncomp_data = { 0 };
   1f84c:	e9cd 3302 	strd	r3, r3, [sp, #8]
{
   1f850:	460d      	mov	r5, r1
   1f852:	4617      	mov	r7, r2
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
   1f854:	9300      	str	r3, [sp, #0]
   1f856:	f8ad 3004 	strh.w	r3, [sp, #4]
    rslt = null_ptr_check(dev);
   1f85a:	f7ff fd87 	bl	1f36c <null_ptr_check>
    if ((rslt == BMP3_OK) && (comp_data != NULL))
   1f85e:	bb58      	cbnz	r0, 1f8b8 <bmp3_get_sensor_data+0x76>
   1f860:	b351      	cbz	r1, 1f8b8 <bmp3_get_sensor_data+0x76>
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
   1f862:	4613      	mov	r3, r2
   1f864:	4669      	mov	r1, sp
   1f866:	2206      	movs	r2, #6
   1f868:	2004      	movs	r0, #4
   1f86a:	f7ff fe78 	bl	1f55e <bmp3_get_regs>
        if (rslt == BMP3_OK)
   1f86e:	4604      	mov	r4, r0
   1f870:	b9f8      	cbnz	r0, 1f8b2 <bmp3_get_sensor_data+0x70>
    data_msb = (uint32_t)reg_data[2] << 16;
   1f872:	f89d 3002 	ldrb.w	r3, [sp, #2]
    data_lsb = (uint32_t)reg_data[1] << 8;
   1f876:	f89d 2001 	ldrb.w	r2, [sp, #1]
    data_msb = (uint32_t)reg_data[5] << 16;
   1f87a:	f89d 4005 	ldrb.w	r4, [sp, #5]
    data_msb = (uint32_t)reg_data[2] << 16;
   1f87e:	041b      	lsls	r3, r3, #16
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
   1f880:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    data_xlsb = (uint32_t)reg_data[0];
   1f884:	f89d 2000 	ldrb.w	r2, [sp]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
   1f888:	4313      	orrs	r3, r2
   1f88a:	9302      	str	r3, [sp, #8]
    data_lsb = (uint32_t)reg_data[4] << 8;
   1f88c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    data_msb = (uint32_t)reg_data[5] << 16;
   1f890:	0424      	lsls	r4, r4, #16
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
   1f892:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    data_xlsb = (uint32_t)reg_data[3];
   1f896:	f89d 3003 	ldrb.w	r3, [sp, #3]
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
   1f89a:	462a      	mov	r2, r5
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
   1f89c:	431c      	orrs	r4, r3
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
   1f89e:	a902      	add	r1, sp, #8
   1f8a0:	f107 0318 	add.w	r3, r7, #24
   1f8a4:	4630      	mov	r0, r6
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
   1f8a6:	9403      	str	r4, [sp, #12]
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
   1f8a8:	f7ff fd70 	bl	1f38c <compensate_data>
   1f8ac:	4604      	mov	r4, r0
            printk();
   1f8ae:	f000 f8a0 	bl	1f9f2 <printk>
}
   1f8b2:	4620      	mov	r0, r4
   1f8b4:	b005      	add	sp, #20
   1f8b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = BMP3_E_NULL_PTR;
   1f8b8:	f04f 34ff 	mov.w	r4, #4294967295
   1f8bc:	e7f9      	b.n	1f8b2 <bmp3_get_sensor_data+0x70>

0001f8be <app_us_delay>:
	z_impl_k_busy_wait(usec_to_wait);
   1f8be:	f003 bf6b 	b.w	23798 <z_impl_k_busy_wait>

0001f8c2 <app_i2c_write>:
static BMP3_INTF_RET_TYPE app_i2c_write(uint8_t reg_addr, const uint8_t *write_data, uint32_t len, void *intf_ptr) {
   1f8c2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f8c4:	4614      	mov	r4, r2
	uint8_t dataBuffer[len+1];
   1f8c6:	3408      	adds	r4, #8
static BMP3_INTF_RET_TYPE app_i2c_write(uint8_t reg_addr, const uint8_t *write_data, uint32_t len, void *intf_ptr) {
   1f8c8:	b085      	sub	sp, #20
	uint8_t dataBuffer[len+1];
   1f8ca:	f024 0407 	bic.w	r4, r4, #7
static BMP3_INTF_RET_TYPE app_i2c_write(uint8_t reg_addr, const uint8_t *write_data, uint32_t len, void *intf_ptr) {
   1f8ce:	af00      	add	r7, sp, #0
	uint8_t dataBuffer[len+1];
   1f8d0:	ebad 0d04 	sub.w	sp, sp, r4
static BMP3_INTF_RET_TYPE app_i2c_write(uint8_t reg_addr, const uint8_t *write_data, uint32_t len, void *intf_ptr) {
   1f8d4:	461d      	mov	r5, r3
	dataBuffer[0]=reg_addr;
   1f8d6:	466b      	mov	r3, sp
	uint8_t dataBuffer[len+1];
   1f8d8:	1c56      	adds	r6, r2, #1
	dataBuffer[0]=reg_addr;
   1f8da:	f803 0b01 	strb.w	r0, [r3], #1
	memcpy(&dataBuffer[0]+1,write_data,len);
   1f8de:	4618      	mov	r0, r3
   1f8e0:	f000 fe36 	bl	20550 <memcpy>
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1f8e4:	2302      	movs	r3, #2
	msg.buf = (uint8_t *)buf;
   1f8e6:	f8c7 d004 	str.w	sp, [r7, #4]
	msg.len = num_bytes;
   1f8ea:	60be      	str	r6, [r7, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1f8ec:	733b      	strb	r3, [r7, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1f8ee:	68ab      	ldr	r3, [r5, #8]
   1f8f0:	1d39      	adds	r1, r7, #4
   1f8f2:	689c      	ldr	r4, [r3, #8]
   1f8f4:	2201      	movs	r2, #1
   1f8f6:	2376      	movs	r3, #118	; 0x76
   1f8f8:	4628      	mov	r0, r5
   1f8fa:	47a0      	blx	r4
}
   1f8fc:	3714      	adds	r7, #20
   1f8fe:	b240      	sxtb	r0, r0
   1f900:	46bd      	mov	sp, r7
   1f902:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f904 <app_i2c_read>:
static BMP3_INTF_RET_TYPE app_i2c_read(uint8_t reg_addr, uint8_t *read_data, uint32_t len, void *intf_ptr) {
   1f904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f908:	b086      	sub	sp, #24
   1f90a:	461c      	mov	r4, r3
	msg.buf = (uint8_t *)buf;
   1f90c:	f10d 0307 	add.w	r3, sp, #7
   1f910:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
   1f912:	2501      	movs	r5, #1
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1f914:	2302      	movs	r3, #2
   1f916:	460f      	mov	r7, r1
   1f918:	4616      	mov	r6, r2
   1f91a:	f88d 0007 	strb.w	r0, [sp, #7]
	msg.len = num_bytes;
   1f91e:	9504      	str	r5, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1f920:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1f924:	68a3      	ldr	r3, [r4, #8]
   1f926:	462a      	mov	r2, r5
   1f928:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1f92c:	a903      	add	r1, sp, #12
   1f92e:	2376      	movs	r3, #118	; 0x76
   1f930:	4620      	mov	r0, r4
   1f932:	47c0      	blx	r8
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1f934:	2303      	movs	r3, #3
	msg.len = num_bytes;
   1f936:	e9cd 7603 	strd	r7, r6, [sp, #12]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1f93a:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1f93e:	68a3      	ldr	r3, [r4, #8]
   1f940:	462a      	mov	r2, r5
   1f942:	689e      	ldr	r6, [r3, #8]
   1f944:	a903      	add	r1, sp, #12
   1f946:	2376      	movs	r3, #118	; 0x76
   1f948:	4620      	mov	r0, r4
   1f94a:	47b0      	blx	r6
}
   1f94c:	b240      	sxtb	r0, r0
   1f94e:	b006      	add	sp, #24
   1f950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f954 <crc8>:
	return val;
}

uint8_t crc8(const uint8_t *src, size_t len, uint8_t polynomial, uint8_t initial_value,
	  bool reversed)
{
   1f954:	b570      	push	{r4, r5, r6, lr}
   1f956:	f89d 6010 	ldrb.w	r6, [sp, #16]
   1f95a:	4604      	mov	r4, r0
   1f95c:	4401      	add	r1, r0
	uint8_t crc = initial_value;
   1f95e:	4618      	mov	r0, r3
	size_t i, j;

	for (i = 0; i < len; i++) {
   1f960:	428c      	cmp	r4, r1
   1f962:	d100      	bne.n	1f966 <crc8+0x12>
			}
		}
	}

	return crc;
}
   1f964:	bd70      	pop	{r4, r5, r6, pc}
		crc ^= src[i];
   1f966:	f814 3b01 	ldrb.w	r3, [r4], #1
   1f96a:	2508      	movs	r5, #8
   1f96c:	4058      	eors	r0, r3
			if (reversed) {
   1f96e:	b14e      	cbz	r6, 1f984 <crc8+0x30>
				if (crc & 0x01) {
   1f970:	f000 0301 	and.w	r3, r0, #1
					crc = (crc >> 1) ^ polynomial;
   1f974:	0840      	lsrs	r0, r0, #1
				if (crc & 0x01) {
   1f976:	b113      	cbz	r3, 1f97e <crc8+0x2a>
					crc = (crc >> 1) ^ polynomial;
   1f978:	ea80 0302 	eor.w	r3, r0, r2
   1f97c:	b2d8      	uxtb	r0, r3
		for (j = 0; j < 8; j++) {
   1f97e:	3d01      	subs	r5, #1
   1f980:	d1f5      	bne.n	1f96e <crc8+0x1a>
   1f982:	e7ed      	b.n	1f960 <crc8+0xc>
				if (crc & 0x80) {
   1f984:	f010 0f80 	tst.w	r0, #128	; 0x80
   1f988:	ea4f 0040 	mov.w	r0, r0, lsl #1
					crc = (crc << 1) ^ polynomial;
   1f98c:	bf18      	it	ne
   1f98e:	4050      	eorne	r0, r2
					crc <<= 1;
   1f990:	b2c0      	uxtb	r0, r0
   1f992:	e7f4      	b.n	1f97e <crc8+0x2a>

0001f994 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1f994:	4603      	mov	r3, r0
   1f996:	b140      	cbz	r0, 1f9aa <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1f998:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1f99a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1f99e:	2a02      	cmp	r2, #2
   1f9a0:	d006      	beq.n	1f9b0 <sys_notify_validate+0x1c>
   1f9a2:	2a03      	cmp	r2, #3
   1f9a4:	d004      	beq.n	1f9b0 <sys_notify_validate+0x1c>
   1f9a6:	2a01      	cmp	r2, #1
   1f9a8:	d005      	beq.n	1f9b6 <sys_notify_validate+0x22>
		return -EINVAL;
   1f9aa:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1f9ae:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1f9b0:	681a      	ldr	r2, [r3, #0]
   1f9b2:	2a00      	cmp	r2, #0
   1f9b4:	d0f9      	beq.n	1f9aa <sys_notify_validate+0x16>
		notify->result = 0;
   1f9b6:	2000      	movs	r0, #0
   1f9b8:	6098      	str	r0, [r3, #8]
   1f9ba:	4770      	bx	lr

0001f9bc <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1f9bc:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1f9be:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1f9c2:	2a02      	cmp	r2, #2
{
   1f9c4:	b510      	push	{r4, lr}
   1f9c6:	4603      	mov	r3, r0
	notify->result = res;
   1f9c8:	6081      	str	r1, [r0, #8]
	switch (method) {
   1f9ca:	d00a      	beq.n	1f9e2 <sys_notify_finalize+0x26>
   1f9cc:	2a03      	cmp	r2, #3
   1f9ce:	d10b      	bne.n	1f9e8 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1f9d0:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1f9d2:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1f9d4:	2200      	movs	r2, #0
   1f9d6:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1f9d8:	b108      	cbz	r0, 1f9de <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   1f9da:	f7fc fb1d 	bl	1c018 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1f9de:	4620      	mov	r0, r4
   1f9e0:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1f9e2:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1f9e4:	2400      	movs	r4, #0
		break;
   1f9e6:	e7f5      	b.n	1f9d4 <sys_notify_finalize+0x18>
	switch (method) {
   1f9e8:	2400      	movs	r4, #0
   1f9ea:	4620      	mov	r0, r4
   1f9ec:	e7f2      	b.n	1f9d4 <sys_notify_finalize+0x18>

0001f9ee <arch_printk_char_out>:
}
   1f9ee:	2000      	movs	r0, #0
   1f9f0:	4770      	bx	lr

0001f9f2 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   1f9f2:	b40f      	push	{r0, r1, r2, r3}
   1f9f4:	b507      	push	{r0, r1, r2, lr}
   1f9f6:	a904      	add	r1, sp, #16
   1f9f8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1f9fc:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1f9fe:	f7f2 fdc7 	bl	12590 <vprintk>

	va_end(ap);
}
   1fa02:	b003      	add	sp, #12
   1fa04:	f85d eb04 	ldr.w	lr, [sp], #4
   1fa08:	b004      	add	sp, #16
   1fa0a:	4770      	bx	lr

0001fa0c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1fa0c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1fa0e:	f013 0307 	ands.w	r3, r3, #7
   1fa12:	d105      	bne.n	1fa20 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1fa14:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1fa16:	2b00      	cmp	r3, #0
   1fa18:	bf0c      	ite	eq
   1fa1a:	2000      	moveq	r0, #0
   1fa1c:	2003      	movne	r0, #3
   1fa1e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1fa20:	2b02      	cmp	r3, #2
   1fa22:	d105      	bne.n	1fa30 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1fa24:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   1fa26:	2b00      	cmp	r3, #0
   1fa28:	bf14      	ite	ne
   1fa2a:	2000      	movne	r0, #0
   1fa2c:	2004      	moveq	r0, #4
   1fa2e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1fa30:	2b01      	cmp	r3, #1
   1fa32:	d105      	bne.n	1fa40 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1fa34:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1fa36:	2b00      	cmp	r3, #0
   1fa38:	bf0c      	ite	eq
   1fa3a:	2000      	moveq	r0, #0
   1fa3c:	2005      	movne	r0, #5
   1fa3e:	4770      	bx	lr
	int evt = EVT_NOP;
   1fa40:	2000      	movs	r0, #0
}
   1fa42:	4770      	bx	lr

0001fa44 <notify_one>:
{
   1fa44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fa48:	460d      	mov	r5, r1
   1fa4a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1fa4c:	4619      	mov	r1, r3
   1fa4e:	1d28      	adds	r0, r5, #4
{
   1fa50:	4690      	mov	r8, r2
   1fa52:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1fa54:	f7ff ffb2 	bl	1f9bc <sys_notify_finalize>
	if (cb) {
   1fa58:	4604      	mov	r4, r0
   1fa5a:	b138      	cbz	r0, 1fa6c <notify_one+0x28>
		cb(mgr, cli, state, res);
   1fa5c:	4633      	mov	r3, r6
   1fa5e:	4642      	mov	r2, r8
   1fa60:	4629      	mov	r1, r5
   1fa62:	4638      	mov	r0, r7
   1fa64:	46a4      	mov	ip, r4
}
   1fa66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1fa6a:	4760      	bx	ip
}
   1fa6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fa70 <transition_complete>:
{
   1fa70:	b410      	push	{r4}
	__asm__ volatile(
   1fa72:	f04f 0440 	mov.w	r4, #64	; 0x40
   1fa76:	f3ef 8211 	mrs	r2, BASEPRI
   1fa7a:	f384 8812 	msr	BASEPRI_MAX, r4
   1fa7e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1fa82:	6141      	str	r1, [r0, #20]
}
   1fa84:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1fa86:	2101      	movs	r1, #1
   1fa88:	f7f2 bd90 	b.w	125ac <process_event>

0001fa8c <validate_args>:
{
   1fa8c:	b510      	push	{r4, lr}
   1fa8e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1fa90:	b140      	cbz	r0, 1faa4 <validate_args+0x18>
   1fa92:	b139      	cbz	r1, 1faa4 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1fa94:	1d08      	adds	r0, r1, #4
   1fa96:	f7ff ff7d 	bl	1f994 <sys_notify_validate>
	if ((rv == 0)
   1fa9a:	b928      	cbnz	r0, 1faa8 <validate_args+0x1c>
	    && ((cli->notify.flags
   1fa9c:	68a3      	ldr	r3, [r4, #8]
   1fa9e:	f033 0303 	bics.w	r3, r3, #3
   1faa2:	d001      	beq.n	1faa8 <validate_args+0x1c>
		rv = -EINVAL;
   1faa4:	f06f 0015 	mvn.w	r0, #21
}
   1faa8:	bd10      	pop	{r4, pc}

0001faaa <onoff_manager_init>:
{
   1faaa:	b538      	push	{r3, r4, r5, lr}
   1faac:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1faae:	4605      	mov	r5, r0
   1fab0:	b158      	cbz	r0, 1faca <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1fab2:	b151      	cbz	r1, 1faca <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1fab4:	680b      	ldr	r3, [r1, #0]
   1fab6:	b143      	cbz	r3, 1faca <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1fab8:	684b      	ldr	r3, [r1, #4]
   1faba:	b133      	cbz	r3, 1faca <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1fabc:	221c      	movs	r2, #28
   1fabe:	2100      	movs	r1, #0
   1fac0:	f000 fd51 	bl	20566 <memset>
   1fac4:	612c      	str	r4, [r5, #16]
	return 0;
   1fac6:	2000      	movs	r0, #0
}
   1fac8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1faca:	f06f 0015 	mvn.w	r0, #21
   1face:	e7fb      	b.n	1fac8 <onoff_manager_init+0x1e>

0001fad0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1fad0:	b570      	push	{r4, r5, r6, lr}
   1fad2:	4604      	mov	r4, r0
   1fad4:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1fad6:	f7ff ffd9 	bl	1fa8c <validate_args>

	if (rv < 0) {
   1fada:	1e05      	subs	r5, r0, #0
   1fadc:	db31      	blt.n	1fb42 <onoff_request+0x72>
   1fade:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fae2:	f3ef 8111 	mrs	r1, BASEPRI
   1fae6:	f383 8812 	msr	BASEPRI_MAX, r3
   1faea:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1faee:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1faf0:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1faf2:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1faf6:	42ab      	cmp	r3, r5
   1faf8:	f000 0207 	and.w	r2, r0, #7
   1fafc:	d02e      	beq.n	1fb5c <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1fafe:	2a02      	cmp	r2, #2
   1fb00:	d10e      	bne.n	1fb20 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1fb02:	3301      	adds	r3, #1
   1fb04:	8363      	strh	r3, [r4, #26]
	rv = state;
   1fb06:	4615      	mov	r5, r2
		notify = true;
   1fb08:	2301      	movs	r3, #1
	__asm__ volatile(
   1fb0a:	f381 8811 	msr	BASEPRI, r1
   1fb0e:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1fb12:	b1b3      	cbz	r3, 1fb42 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1fb14:	2300      	movs	r3, #0
   1fb16:	4631      	mov	r1, r6
   1fb18:	4620      	mov	r0, r4
   1fb1a:	f7ff ff93 	bl	1fa44 <notify_one>
   1fb1e:	e010      	b.n	1fb42 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1fb20:	0783      	lsls	r3, r0, #30
   1fb22:	d001      	beq.n	1fb28 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1fb24:	2a06      	cmp	r2, #6
   1fb26:	d10e      	bne.n	1fb46 <onoff_request+0x76>
	parent->next = child;
   1fb28:	2300      	movs	r3, #0
   1fb2a:	6033      	str	r3, [r6, #0]
	return list->tail;
   1fb2c:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   1fb2e:	b993      	cbnz	r3, 1fb56 <onoff_request+0x86>
	list->head = node;
   1fb30:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1fb34:	4615      	mov	r5, r2
   1fb36:	b962      	cbnz	r2, 1fb52 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1fb38:	460a      	mov	r2, r1
   1fb3a:	4620      	mov	r0, r4
   1fb3c:	2102      	movs	r1, #2
   1fb3e:	f7f2 fd35 	bl	125ac <process_event>
		}
	}

	return rv;
}
   1fb42:	4628      	mov	r0, r5
   1fb44:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1fb46:	2a05      	cmp	r2, #5
   1fb48:	bf0c      	ite	eq
   1fb4a:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1fb4e:	f06f 0504 	mvnne.w	r5, #4
   1fb52:	2300      	movs	r3, #0
   1fb54:	e7d9      	b.n	1fb0a <onoff_request+0x3a>
	parent->next = child;
   1fb56:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1fb58:	6066      	str	r6, [r4, #4]
}
   1fb5a:	e7eb      	b.n	1fb34 <onoff_request+0x64>
		rv = -EAGAIN;
   1fb5c:	f06f 050a 	mvn.w	r5, #10
   1fb60:	e7f7      	b.n	1fb52 <onoff_request+0x82>

0001fb62 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1fb62:	4604      	mov	r4, r0
   1fb64:	b508      	push	{r3, lr}
   1fb66:	4608      	mov	r0, r1
   1fb68:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1fb6a:	461a      	mov	r2, r3
   1fb6c:	47a0      	blx	r4
	return z_impl_z_current_get();
   1fb6e:	f7fb ffa3 	bl	1bab8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1fb72:	f7f3 ff47 	bl	13a04 <z_impl_k_thread_abort>

0001fb76 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1fb76:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1fb7a:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   1fb7c:	0840      	lsrs	r0, r0, #1
   1fb7e:	4770      	bx	lr

0001fb80 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1fb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fb82:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   1fb84:	f7ff fff7 	bl	1fb76 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1fb88:	fab0 f080 	clz	r0, r0
   1fb8c:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1fb90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   1fb94:	00ca      	lsls	r2, r1, #3
   1fb96:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   1fb9a:	1d17      	adds	r7, r2, #4
{
   1fb9c:	460c      	mov	r4, r1
   1fb9e:	3206      	adds	r2, #6
   1fba0:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   1fba2:	b956      	cbnz	r6, 1fbba <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1fba4:	2101      	movs	r1, #1
   1fba6:	fa01 f000 	lsl.w	r0, r1, r0
   1fbaa:	68d9      	ldr	r1, [r3, #12]
   1fbac:	4301      	orrs	r1, r0
   1fbae:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1fbb0:	f8cc 4010 	str.w	r4, [ip, #16]
   1fbb4:	53dd      	strh	r5, [r3, r7]
   1fbb6:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   1fbb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   1fbba:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1fbbc:	3104      	adds	r1, #4
   1fbbe:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1fbc0:	53d8      	strh	r0, [r3, r7]
   1fbc2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1fbc6:	529e      	strh	r6, [r3, r2]
   1fbc8:	80c5      	strh	r5, [r0, #6]
   1fbca:	525d      	strh	r5, [r3, r1]
   1fbcc:	e7f4      	b.n	1fbb8 <free_list_add+0x38>

0001fbce <free_list_remove_bidx>:
{
   1fbce:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1fbd0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1fbd4:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   1fbd6:	4299      	cmp	r1, r3
   1fbd8:	f102 0104 	add.w	r1, r2, #4
   1fbdc:	d10a      	bne.n	1fbf4 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1fbde:	2301      	movs	r3, #1
   1fbe0:	fa03 f202 	lsl.w	r2, r3, r2
   1fbe4:	68c3      	ldr	r3, [r0, #12]
   1fbe6:	ea23 0302 	bic.w	r3, r3, r2
   1fbea:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1fbec:	2300      	movs	r3, #0
   1fbee:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1fbf2:	bd10      	pop	{r4, pc}
   1fbf4:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1fbf6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1fbfa:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1fbfe:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1fc02:	80cb      	strh	r3, [r1, #6]
   1fc04:	8082      	strh	r2, [r0, #4]
}
   1fc06:	e7f4      	b.n	1fbf2 <free_list_remove_bidx+0x24>

0001fc08 <free_list_remove>:
{
   1fc08:	b508      	push	{r3, lr}
   1fc0a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1fc0c:	f7ff ffb3 	bl	1fb76 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1fc10:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1fc14:	f1c2 021f 	rsb	r2, r2, #31
   1fc18:	4618      	mov	r0, r3
}
   1fc1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   1fc1e:	f7ff bfd6 	b.w	1fbce <free_list_remove_bidx>

0001fc22 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1fc22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fc26:	fab1 f581 	clz	r5, r1
   1fc2a:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1fc2e:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   1fc32:	4603      	mov	r3, r0
	if (b->next) {
   1fc34:	693a      	ldr	r2, [r7, #16]
{
   1fc36:	460e      	mov	r6, r1
	if (b->next) {
   1fc38:	b1c2      	cbz	r2, 1fc6c <alloc_chunk+0x4a>
   1fc3a:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1fc3e:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   1fc40:	4618      	mov	r0, r3
   1fc42:	4621      	mov	r1, r4
   1fc44:	f7ff ff97 	bl	1fb76 <chunk_size>
   1fc48:	42b0      	cmp	r0, r6
   1fc4a:	d306      	bcc.n	1fc5a <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   1fc4c:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1fc4e:	4618      	mov	r0, r3
   1fc50:	f7ff ffbd 	bl	1fbce <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1fc54:	4620      	mov	r0, r4
   1fc56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1fc5a:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   1fc5e:	f1b8 0801 	subs.w	r8, r8, #1
   1fc62:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   1fc64:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   1fc66:	d001      	beq.n	1fc6c <alloc_chunk+0x4a>
   1fc68:	4282      	cmp	r2, r0
   1fc6a:	d1e8      	bne.n	1fc3e <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1fc6c:	f1c5 0220 	rsb	r2, r5, #32
   1fc70:	f04f 34ff 	mov.w	r4, #4294967295
   1fc74:	4094      	lsls	r4, r2
   1fc76:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   1fc78:	4014      	ands	r4, r2
   1fc7a:	d0eb      	beq.n	1fc54 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   1fc7c:	fa94 f2a4 	rbit	r2, r4
   1fc80:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1fc84:	1d11      	adds	r1, r2, #4
   1fc86:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1fc8a:	4621      	mov	r1, r4
   1fc8c:	e7df      	b.n	1fc4e <alloc_chunk+0x2c>

0001fc8e <merge_chunks>:
{
   1fc8e:	b538      	push	{r3, r4, r5, lr}
   1fc90:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1fc92:	f7ff ff70 	bl	1fb76 <chunk_size>
{
   1fc96:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1fc98:	4604      	mov	r4, r0
   1fc9a:	4611      	mov	r1, r2
   1fc9c:	4618      	mov	r0, r3
   1fc9e:	f7ff ff6a 	bl	1fb76 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   1fca2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1fca6:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fca8:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   1fcaa:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   1fcac:	4618      	mov	r0, r3
   1fcae:	f7ff ff62 	bl	1fb76 <chunk_size>
	void *cmem = &buf[c];
   1fcb2:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1fcb4:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   1fcb8:	bd38      	pop	{r3, r4, r5, pc}

0001fcba <split_chunks>:
{
   1fcba:	b538      	push	{r3, r4, r5, lr}
   1fcbc:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   1fcbe:	f7ff ff5a 	bl	1fb76 <chunk_size>
{
   1fcc2:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   1fcc4:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   1fcc6:	1a51      	subs	r1, r2, r1
   1fcc8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   1fccc:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fcce:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1fcd0:	8060      	strh	r0, [r4, #2]
   1fcd2:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fcd6:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1fcd8:	8044      	strh	r4, [r0, #2]
   1fcda:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1fcde:	4618      	mov	r0, r3
   1fce0:	4611      	mov	r1, r2
   1fce2:	f7ff ff48 	bl	1fb76 <chunk_size>
	void *cmem = &buf[c];
   1fce6:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1fce8:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   1fcec:	bd38      	pop	{r3, r4, r5, pc}

0001fcee <free_chunk>:
{
   1fcee:	b538      	push	{r3, r4, r5, lr}
   1fcf0:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1fcf2:	f7ff ff40 	bl	1fb76 <chunk_size>
   1fcf6:	460c      	mov	r4, r1
   1fcf8:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1fcfa:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1fcfe:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1fd00:	07da      	lsls	r2, r3, #31
   1fd02:	d40a      	bmi.n	1fd1a <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1fd04:	4628      	mov	r0, r5
   1fd06:	f7ff ff7f 	bl	1fc08 <free_list_remove>
	return c + chunk_size(h, c);
   1fd0a:	4621      	mov	r1, r4
   1fd0c:	4628      	mov	r0, r5
   1fd0e:	f7ff ff32 	bl	1fb76 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1fd12:	1822      	adds	r2, r4, r0
   1fd14:	4628      	mov	r0, r5
   1fd16:	f7ff ffba 	bl	1fc8e <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1fd1a:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1fd1e:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1fd20:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1fd24:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1fd26:	07db      	lsls	r3, r3, #31
   1fd28:	d40c      	bmi.n	1fd44 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1fd2a:	4628      	mov	r0, r5
   1fd2c:	f7ff ff6c 	bl	1fc08 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1fd30:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1fd34:	4622      	mov	r2, r4
   1fd36:	1a61      	subs	r1, r4, r1
   1fd38:	4628      	mov	r0, r5
   1fd3a:	f7ff ffa8 	bl	1fc8e <merge_chunks>
   1fd3e:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1fd42:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1fd44:	4621      	mov	r1, r4
   1fd46:	4628      	mov	r0, r5
}
   1fd48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1fd4c:	f7ff bf18 	b.w	1fb80 <free_list_add>

0001fd50 <sys_heap_free>:
	if (mem == NULL) {
   1fd50:	b161      	cbz	r1, 1fd6c <sys_heap_free+0x1c>
   1fd52:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fd54:	3904      	subs	r1, #4
   1fd56:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   1fd58:	f021 0307 	bic.w	r3, r1, #7
   1fd5c:	4403      	add	r3, r0
	free_chunk(h, c);
   1fd5e:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1fd60:	885a      	ldrh	r2, [r3, #2]
   1fd62:	f022 0201 	bic.w	r2, r2, #1
   1fd66:	805a      	strh	r2, [r3, #2]
   1fd68:	f7ff bfc1 	b.w	1fcee <free_chunk>
}
   1fd6c:	4770      	bx	lr

0001fd6e <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1fd6e:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1fd70:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   1fd72:	b909      	cbnz	r1, 1fd78 <sys_heap_alloc+0xa>
		return NULL;
   1fd74:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   1fd76:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1fd78:	68ab      	ldr	r3, [r5, #8]
   1fd7a:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1fd7e:	d9f9      	bls.n	1fd74 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1fd80:	310b      	adds	r1, #11
   1fd82:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1fd84:	4621      	mov	r1, r4
   1fd86:	4628      	mov	r0, r5
   1fd88:	f7ff ff4b 	bl	1fc22 <alloc_chunk>
	if (c == 0U) {
   1fd8c:	4606      	mov	r6, r0
   1fd8e:	2800      	cmp	r0, #0
   1fd90:	d0f0      	beq.n	1fd74 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1fd92:	4601      	mov	r1, r0
   1fd94:	4628      	mov	r0, r5
   1fd96:	f7ff feee 	bl	1fb76 <chunk_size>
   1fd9a:	42a0      	cmp	r0, r4
   1fd9c:	d907      	bls.n	1fdae <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   1fd9e:	1932      	adds	r2, r6, r4
   1fda0:	4628      	mov	r0, r5
   1fda2:	f7ff ff8a 	bl	1fcba <split_chunks>
		free_list_add(h, c + chunk_sz);
   1fda6:	4611      	mov	r1, r2
   1fda8:	4628      	mov	r0, r5
   1fdaa:	f7ff fee9 	bl	1fb80 <free_list_add>
	void *cmem = &buf[c];
   1fdae:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1fdb2:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1fdb4:	8853      	ldrh	r3, [r2, #2]
   1fdb6:	f043 0301 	orr.w	r3, r3, #1
   1fdba:	8053      	strh	r3, [r2, #2]
   1fdbc:	3004      	adds	r0, #4
	return mem;
   1fdbe:	e7da      	b.n	1fd76 <sys_heap_alloc+0x8>

0001fdc0 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1fdc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fdc4:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1fdc6:	424a      	negs	r2, r1
   1fdc8:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   1fdcc:	ea31 0202 	bics.w	r2, r1, r2
{
   1fdd0:	4603      	mov	r3, r0
	if (align != rew) {
   1fdd2:	d00a      	beq.n	1fdea <sys_heap_aligned_alloc+0x2a>
		return false;
   1fdd4:	2f04      	cmp	r7, #4
   1fdd6:	463a      	mov	r2, r7
   1fdd8:	46b9      	mov	r9, r7
   1fdda:	bf28      	it	cs
   1fddc:	2204      	movcs	r2, #4
		align -= rew;
   1fdde:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1fde0:	b974      	cbnz	r4, 1fe00 <sys_heap_aligned_alloc+0x40>
		return NULL;
   1fde2:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   1fde4:	4628      	mov	r0, r5
   1fde6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1fdea:	2904      	cmp	r1, #4
   1fdec:	d804      	bhi.n	1fdf8 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   1fdee:	4621      	mov	r1, r4
}
   1fdf0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1fdf4:	f7ff bfbb 	b.w	1fd6e <sys_heap_alloc>
		rew = 0;
   1fdf8:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   1fdfc:	2204      	movs	r2, #4
   1fdfe:	e7ef      	b.n	1fde0 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   1fe00:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   1fe02:	68b3      	ldr	r3, [r6, #8]
   1fe04:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1fe08:	d9eb      	bls.n	1fde2 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1fe0a:	f104 010b 	add.w	r1, r4, #11
   1fe0e:	4439      	add	r1, r7
   1fe10:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1fe12:	08c9      	lsrs	r1, r1, #3
   1fe14:	4630      	mov	r0, r6
   1fe16:	f7ff ff04 	bl	1fc22 <alloc_chunk>
	if (c0 == 0) {
   1fe1a:	4680      	mov	r8, r0
   1fe1c:	2800      	cmp	r0, #0
   1fe1e:	d0e0      	beq.n	1fde2 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1fe20:	f109 0504 	add.w	r5, r9, #4
   1fe24:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1fe28:	1e7b      	subs	r3, r7, #1
   1fe2a:	4435      	add	r5, r6
   1fe2c:	441d      	add	r5, r3
   1fe2e:	427f      	negs	r7, r7
   1fe30:	403d      	ands	r5, r7
   1fe32:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1fe36:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fe38:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1fe3a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fe3c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1fe3e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1fe42:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1fe44:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fe48:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1fe4c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1fe50:	d208      	bcs.n	1fe64 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   1fe52:	4601      	mov	r1, r0
   1fe54:	463a      	mov	r2, r7
   1fe56:	4630      	mov	r0, r6
   1fe58:	f7ff ff2f 	bl	1fcba <split_chunks>
		free_list_add(h, c0);
   1fe5c:	4641      	mov	r1, r8
   1fe5e:	4630      	mov	r0, r6
   1fe60:	f7ff fe8e 	bl	1fb80 <free_list_add>
	return c + chunk_size(h, c);
   1fe64:	4639      	mov	r1, r7
   1fe66:	4630      	mov	r0, r6
   1fe68:	f7ff fe85 	bl	1fb76 <chunk_size>
   1fe6c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1fe6e:	4284      	cmp	r4, r0
   1fe70:	d207      	bcs.n	1fe82 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   1fe72:	4630      	mov	r0, r6
   1fe74:	4622      	mov	r2, r4
   1fe76:	f7ff ff20 	bl	1fcba <split_chunks>
		free_list_add(h, c_end);
   1fe7a:	4621      	mov	r1, r4
   1fe7c:	4630      	mov	r0, r6
   1fe7e:	f7ff fe7f 	bl	1fb80 <free_list_add>
	void *cmem = &buf[c];
   1fe82:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1fe86:	8873      	ldrh	r3, [r6, #2]
   1fe88:	f043 0301 	orr.w	r3, r3, #1
   1fe8c:	8073      	strh	r3, [r6, #2]
   1fe8e:	e7a9      	b.n	1fde4 <sys_heap_aligned_alloc+0x24>

0001fe90 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1fe90:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1fe92:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1fe94:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1fe96:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1fe9a:	f021 0107 	bic.w	r1, r1, #7
{
   1fe9e:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1fea0:	1acd      	subs	r5, r1, r3
   1fea2:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1fea4:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   1fea6:	fab2 f082 	clz	r0, r2
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1feaa:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   1feae:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1feb0:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   1feb2:	2600      	movs	r6, #0
   1feb4:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1feb6:	f1c0 0020 	rsb	r0, r0, #32
   1feba:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   1febe:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   1fec0:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1fec2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1fec6:	4284      	cmp	r4, r0
   1fec8:	d118      	bne.n	1fefc <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1feca:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1fecc:	f040 0001 	orr.w	r0, r0, #1
   1fed0:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   1fed2:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1fed6:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fed8:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   1feda:	801e      	strh	r6, [r3, #0]
   1fedc:	8067      	strh	r7, [r4, #2]
   1fede:	195c      	adds	r4, r3, r5
   1fee0:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   1fee4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   1fee8:	8066      	strh	r6, [r4, #2]
   1feea:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1feec:	8850      	ldrh	r0, [r2, #2]
   1feee:	f040 0001 	orr.w	r0, r0, #1
   1fef2:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   1fef4:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   1fef6:	4618      	mov	r0, r3
   1fef8:	f7ff be42 	b.w	1fb80 <free_list_add>
		h->buckets[i].next = 0;
   1fefc:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   1ff00:	e7e1      	b.n	1fec6 <sys_heap_init+0x36>

0001ff02 <encode_uint>:
{
   1ff02:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff06:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1ff08:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   1ff0a:	2b6f      	cmp	r3, #111	; 0x6f
{
   1ff0c:	4680      	mov	r8, r0
   1ff0e:	460f      	mov	r7, r1
   1ff10:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1ff12:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1ff16:	d029      	beq.n	1ff6c <encode_uint+0x6a>
   1ff18:	d824      	bhi.n	1ff64 <encode_uint+0x62>
		return 16;
   1ff1a:	2b58      	cmp	r3, #88	; 0x58
   1ff1c:	bf14      	ite	ne
   1ff1e:	260a      	movne	r6, #10
   1ff20:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   1ff22:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1ff26:	4632      	mov	r2, r6
   1ff28:	2300      	movs	r3, #0
   1ff2a:	4640      	mov	r0, r8
   1ff2c:	4639      	mov	r1, r7
   1ff2e:	f7e1 f881 	bl	1034 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ff32:	2a09      	cmp	r2, #9
   1ff34:	b2d4      	uxtb	r4, r2
   1ff36:	d81e      	bhi.n	1ff76 <encode_uint+0x74>
   1ff38:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1ff3a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ff3c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1ff3e:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ff42:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1ff46:	d301      	bcc.n	1ff4c <encode_uint+0x4a>
   1ff48:	45d1      	cmp	r9, sl
   1ff4a:	d811      	bhi.n	1ff70 <encode_uint+0x6e>
	if (conv->flag_hash) {
   1ff4c:	782b      	ldrb	r3, [r5, #0]
   1ff4e:	069b      	lsls	r3, r3, #26
   1ff50:	d505      	bpl.n	1ff5e <encode_uint+0x5c>
		if (radix == 8) {
   1ff52:	2e08      	cmp	r6, #8
   1ff54:	d115      	bne.n	1ff82 <encode_uint+0x80>
			conv->altform_0 = true;
   1ff56:	78ab      	ldrb	r3, [r5, #2]
   1ff58:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1ff5c:	70ab      	strb	r3, [r5, #2]
}
   1ff5e:	4648      	mov	r0, r9
   1ff60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1ff64:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1ff68:	2b70      	cmp	r3, #112	; 0x70
   1ff6a:	e7d7      	b.n	1ff1c <encode_uint+0x1a>
	switch (specifier) {
   1ff6c:	2608      	movs	r6, #8
   1ff6e:	e7d8      	b.n	1ff22 <encode_uint+0x20>
		value /= radix;
   1ff70:	4680      	mov	r8, r0
   1ff72:	460f      	mov	r7, r1
   1ff74:	e7d7      	b.n	1ff26 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ff76:	f1bb 0f19 	cmp.w	fp, #25
   1ff7a:	bf94      	ite	ls
   1ff7c:	3437      	addls	r4, #55	; 0x37
   1ff7e:	3457      	addhi	r4, #87	; 0x57
   1ff80:	e7db      	b.n	1ff3a <encode_uint+0x38>
		} else if (radix == 16) {
   1ff82:	2e10      	cmp	r6, #16
   1ff84:	d1eb      	bne.n	1ff5e <encode_uint+0x5c>
			conv->altform_0c = true;
   1ff86:	78ab      	ldrb	r3, [r5, #2]
   1ff88:	f043 0310 	orr.w	r3, r3, #16
   1ff8c:	e7e6      	b.n	1ff5c <encode_uint+0x5a>

0001ff8e <outs>:
{
   1ff8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ff92:	4607      	mov	r7, r0
   1ff94:	4688      	mov	r8, r1
   1ff96:	4615      	mov	r5, r2
   1ff98:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1ff9a:	4614      	mov	r4, r2
   1ff9c:	42b4      	cmp	r4, r6
   1ff9e:	eba4 0005 	sub.w	r0, r4, r5
   1ffa2:	d302      	bcc.n	1ffaa <outs+0x1c>
   1ffa4:	b93e      	cbnz	r6, 1ffb6 <outs+0x28>
   1ffa6:	7823      	ldrb	r3, [r4, #0]
   1ffa8:	b12b      	cbz	r3, 1ffb6 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1ffaa:	f814 0b01 	ldrb.w	r0, [r4], #1
   1ffae:	4641      	mov	r1, r8
   1ffb0:	47b8      	blx	r7
		if (rc < 0) {
   1ffb2:	2800      	cmp	r0, #0
   1ffb4:	daf2      	bge.n	1ff9c <outs+0xe>
}
   1ffb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ffba <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   1ffba:	b40f      	push	{r0, r1, r2, r3}
   1ffbc:	b507      	push	{r0, r1, r2, lr}
   1ffbe:	a904      	add	r1, sp, #16
   1ffc0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1ffc4:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1ffc6:	f7f2 fae3 	bl	12590 <vprintk>

	va_end(ap);
}
   1ffca:	b003      	add	sp, #12
   1ffcc:	f85d eb04 	ldr.w	lr, [sp], #4
   1ffd0:	b004      	add	sp, #16
   1ffd2:	4770      	bx	lr

0001ffd4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   1ffd4:	4770      	bx	lr

0001ffd6 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   1ffd6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1ffda:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1ffde:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1ffe0:	4640      	mov	r0, r8
{
   1ffe2:	461f      	mov	r7, r3
   1ffe4:	460c      	mov	r4, r1
   1ffe6:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1ffe8:	f000 fa6d 	bl	204c6 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1ffec:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1fff0:	9300      	str	r3, [sp, #0]
   1fff2:	b280      	uxth	r0, r0
   1fff4:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1fff8:	463b      	mov	r3, r7
   1fffa:	4632      	mov	r2, r6
   1fffc:	4621      	mov	r1, r4
   1fffe:	4628      	mov	r0, r5
   20000:	f002 f8f4 	bl	221ec <bt_gatt_attr_read>
}
   20004:	b004      	add	sp, #16
   20006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002000a <blvl_ccc_cfg_changed>:
}
   2000a:	4770      	bx	lr

0002000c <bas_init>:
static int bas_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return 0;
}
   2000c:	2000      	movs	r0, #0
   2000e:	4770      	bx	lr

00020010 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   20010:	b538      	push	{r3, r4, r5, lr}
   20012:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   20014:	42ab      	cmp	r3, r5
{
   20016:	4611      	mov	r1, r2
   20018:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2001a:	d804      	bhi.n	20026 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   2001c:	461a      	mov	r2, r3
   2001e:	f000 fa97 	bl	20550 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   20022:	4620      	mov	r0, r4
   20024:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   20026:	2400      	movs	r4, #0
   20028:	e7fb      	b.n	20022 <_copy+0x12>

0002002a <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   2002a:	f000 ba9c 	b.w	20566 <memset>

0002002e <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2002e:	09c3      	lsrs	r3, r0, #7
   20030:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   20034:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   20038:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2003c:	b2c0      	uxtb	r0, r0
   2003e:	4770      	bx	lr

00020040 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   20040:	78cb      	ldrb	r3, [r1, #3]
   20042:	7802      	ldrb	r2, [r0, #0]
   20044:	4053      	eors	r3, r2
   20046:	7003      	strb	r3, [r0, #0]
   20048:	884b      	ldrh	r3, [r1, #2]
   2004a:	7842      	ldrb	r2, [r0, #1]
   2004c:	4053      	eors	r3, r2
   2004e:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   20050:	680a      	ldr	r2, [r1, #0]
   20052:	7883      	ldrb	r3, [r0, #2]
   20054:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   20058:	7083      	strb	r3, [r0, #2]
   2005a:	680a      	ldr	r2, [r1, #0]
   2005c:	78c3      	ldrb	r3, [r0, #3]
   2005e:	4053      	eors	r3, r2
   20060:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   20062:	79cb      	ldrb	r3, [r1, #7]
   20064:	7902      	ldrb	r2, [r0, #4]
   20066:	4053      	eors	r3, r2
   20068:	7103      	strb	r3, [r0, #4]
   2006a:	88cb      	ldrh	r3, [r1, #6]
   2006c:	7942      	ldrb	r2, [r0, #5]
   2006e:	4053      	eors	r3, r2
   20070:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   20072:	684a      	ldr	r2, [r1, #4]
   20074:	7983      	ldrb	r3, [r0, #6]
   20076:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2007a:	7183      	strb	r3, [r0, #6]
   2007c:	684a      	ldr	r2, [r1, #4]
   2007e:	79c3      	ldrb	r3, [r0, #7]
   20080:	4053      	eors	r3, r2
   20082:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   20084:	7acb      	ldrb	r3, [r1, #11]
   20086:	7a02      	ldrb	r2, [r0, #8]
   20088:	4053      	eors	r3, r2
   2008a:	7203      	strb	r3, [r0, #8]
   2008c:	7a42      	ldrb	r2, [r0, #9]
   2008e:	894b      	ldrh	r3, [r1, #10]
   20090:	4053      	eors	r3, r2
   20092:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   20094:	688a      	ldr	r2, [r1, #8]
   20096:	7a83      	ldrb	r3, [r0, #10]
   20098:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2009c:	7283      	strb	r3, [r0, #10]
   2009e:	688a      	ldr	r2, [r1, #8]
   200a0:	7ac3      	ldrb	r3, [r0, #11]
   200a2:	4053      	eors	r3, r2
   200a4:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   200a6:	7bcb      	ldrb	r3, [r1, #15]
   200a8:	7b02      	ldrb	r2, [r0, #12]
   200aa:	4053      	eors	r3, r2
   200ac:	7303      	strb	r3, [r0, #12]
   200ae:	89cb      	ldrh	r3, [r1, #14]
   200b0:	7b42      	ldrb	r2, [r0, #13]
   200b2:	4053      	eors	r3, r2
   200b4:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   200b6:	68ca      	ldr	r2, [r1, #12]
   200b8:	7b83      	ldrb	r3, [r0, #14]
   200ba:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   200be:	7383      	strb	r3, [r0, #14]
   200c0:	68ca      	ldr	r2, [r1, #12]
   200c2:	7bc3      	ldrb	r3, [r0, #15]
   200c4:	4053      	eors	r3, r2
   200c6:	73c3      	strb	r3, [r0, #15]
}
   200c8:	4770      	bx	lr

000200ca <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   200ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   200cc:	7802      	ldrb	r2, [r0, #0]
   200ce:	f88d 2000 	strb.w	r2, [sp]
   200d2:	7942      	ldrb	r2, [r0, #5]
   200d4:	f88d 2001 	strb.w	r2, [sp, #1]
   200d8:	7a82      	ldrb	r2, [r0, #10]
   200da:	f88d 2002 	strb.w	r2, [sp, #2]
   200de:	7bc2      	ldrb	r2, [r0, #15]
   200e0:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   200e4:	7902      	ldrb	r2, [r0, #4]
   200e6:	f88d 2004 	strb.w	r2, [sp, #4]
   200ea:	7a42      	ldrb	r2, [r0, #9]
   200ec:	f88d 2005 	strb.w	r2, [sp, #5]
   200f0:	7b82      	ldrb	r2, [r0, #14]
   200f2:	f88d 2006 	strb.w	r2, [sp, #6]
   200f6:	78c2      	ldrb	r2, [r0, #3]
   200f8:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   200fc:	7a02      	ldrb	r2, [r0, #8]
   200fe:	f88d 2008 	strb.w	r2, [sp, #8]
   20102:	7b42      	ldrb	r2, [r0, #13]
   20104:	f88d 2009 	strb.w	r2, [sp, #9]
   20108:	7882      	ldrb	r2, [r0, #2]
   2010a:	f88d 200a 	strb.w	r2, [sp, #10]
   2010e:	79c2      	ldrb	r2, [r0, #7]
   20110:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   20114:	7b02      	ldrb	r2, [r0, #12]
   20116:	f88d 200c 	strb.w	r2, [sp, #12]
   2011a:	7842      	ldrb	r2, [r0, #1]
   2011c:	7ac3      	ldrb	r3, [r0, #11]
   2011e:	f88d 200d 	strb.w	r2, [sp, #13]
   20122:	7982      	ldrb	r2, [r0, #6]
   20124:	f88d 200e 	strb.w	r2, [sp, #14]
   20128:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2012c:	2310      	movs	r3, #16
   2012e:	466a      	mov	r2, sp
   20130:	4619      	mov	r1, r3
   20132:	f7ff ff6d 	bl	20010 <_copy>
}
   20136:	b005      	add	sp, #20
   20138:	f85d fb04 	ldr.w	pc, [sp], #4

0002013c <mult_row_column>:
{
   2013c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2013e:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   20140:	7808      	ldrb	r0, [r1, #0]
{
   20142:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   20144:	f7ff ff73 	bl	2002e <_double_byte>
   20148:	4605      	mov	r5, r0
   2014a:	7860      	ldrb	r0, [r4, #1]
   2014c:	f7ff ff6f 	bl	2002e <_double_byte>
   20150:	78a2      	ldrb	r2, [r4, #2]
   20152:	7863      	ldrb	r3, [r4, #1]
   20154:	4053      	eors	r3, r2
   20156:	78e2      	ldrb	r2, [r4, #3]
   20158:	4053      	eors	r3, r2
   2015a:	405d      	eors	r5, r3
   2015c:	4045      	eors	r5, r0
   2015e:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   20160:	7860      	ldrb	r0, [r4, #1]
   20162:	7827      	ldrb	r7, [r4, #0]
   20164:	f7ff ff63 	bl	2002e <_double_byte>
   20168:	4605      	mov	r5, r0
   2016a:	78a0      	ldrb	r0, [r4, #2]
   2016c:	f7ff ff5f 	bl	2002e <_double_byte>
   20170:	78a3      	ldrb	r3, [r4, #2]
   20172:	405f      	eors	r7, r3
   20174:	78e3      	ldrb	r3, [r4, #3]
   20176:	405f      	eors	r7, r3
   20178:	407d      	eors	r5, r7
   2017a:	4045      	eors	r5, r0
   2017c:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2017e:	78a0      	ldrb	r0, [r4, #2]
   20180:	7865      	ldrb	r5, [r4, #1]
   20182:	7827      	ldrb	r7, [r4, #0]
   20184:	f7ff ff53 	bl	2002e <_double_byte>
   20188:	406f      	eors	r7, r5
   2018a:	4605      	mov	r5, r0
   2018c:	78e0      	ldrb	r0, [r4, #3]
   2018e:	f7ff ff4e 	bl	2002e <_double_byte>
   20192:	78e3      	ldrb	r3, [r4, #3]
   20194:	405f      	eors	r7, r3
   20196:	407d      	eors	r5, r7
   20198:	4045      	eors	r5, r0
   2019a:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2019c:	7820      	ldrb	r0, [r4, #0]
   2019e:	f7ff ff46 	bl	2002e <_double_byte>
   201a2:	7863      	ldrb	r3, [r4, #1]
   201a4:	7825      	ldrb	r5, [r4, #0]
   201a6:	405d      	eors	r5, r3
   201a8:	78a3      	ldrb	r3, [r4, #2]
   201aa:	405d      	eors	r5, r3
   201ac:	4045      	eors	r5, r0
   201ae:	78e0      	ldrb	r0, [r4, #3]
   201b0:	f7ff ff3d 	bl	2002e <_double_byte>
   201b4:	b2ed      	uxtb	r5, r5
   201b6:	4045      	eors	r5, r0
   201b8:	70f5      	strb	r5, [r6, #3]
}
   201ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000201bc <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   201bc:	b570      	push	{r4, r5, r6, lr}
   201be:	4614      	mov	r4, r2
   201c0:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   201c2:	4605      	mov	r5, r0
   201c4:	2800      	cmp	r0, #0
   201c6:	d049      	beq.n	2025c <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   201c8:	2900      	cmp	r1, #0
   201ca:	d049      	beq.n	20260 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   201cc:	2a00      	cmp	r2, #0
   201ce:	d049      	beq.n	20264 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   201d0:	2310      	movs	r3, #16
   201d2:	460a      	mov	r2, r1
   201d4:	4668      	mov	r0, sp
   201d6:	4619      	mov	r1, r3
   201d8:	f7ff ff1a 	bl	20010 <_copy>
	add_round_key(state, s->words);
   201dc:	4621      	mov	r1, r4
   201de:	4668      	mov	r0, sp
   201e0:	f7ff ff2e 	bl	20040 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   201e4:	3410      	adds	r4, #16
   201e6:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   201ea:	4668      	mov	r0, sp
   201ec:	f7f3 f806 	bl	131fc <sub_bytes>
		shift_rows(state);
   201f0:	4668      	mov	r0, sp
   201f2:	f7ff ff6a 	bl	200ca <shift_rows>
	mult_row_column(t, s);
   201f6:	4669      	mov	r1, sp
   201f8:	a804      	add	r0, sp, #16
   201fa:	f7ff ff9f 	bl	2013c <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   201fe:	a901      	add	r1, sp, #4
   20200:	a805      	add	r0, sp, #20
   20202:	f7ff ff9b 	bl	2013c <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   20206:	a902      	add	r1, sp, #8
   20208:	a806      	add	r0, sp, #24
   2020a:	f7ff ff97 	bl	2013c <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2020e:	a903      	add	r1, sp, #12
   20210:	a807      	add	r0, sp, #28
   20212:	f7ff ff93 	bl	2013c <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   20216:	2310      	movs	r3, #16
   20218:	4619      	mov	r1, r3
   2021a:	eb0d 0203 	add.w	r2, sp, r3
   2021e:	4668      	mov	r0, sp
   20220:	f7ff fef6 	bl	20010 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   20224:	4621      	mov	r1, r4
   20226:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   20228:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   2022a:	f7ff ff09 	bl	20040 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   2022e:	42a6      	cmp	r6, r4
   20230:	d1db      	bne.n	201ea <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   20232:	f7f2 ffe3 	bl	131fc <sub_bytes>
	shift_rows(state);
   20236:	4668      	mov	r0, sp
   20238:	f7ff ff47 	bl	200ca <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   2023c:	4631      	mov	r1, r6
   2023e:	4668      	mov	r0, sp
   20240:	f7ff fefe 	bl	20040 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   20244:	2310      	movs	r3, #16
   20246:	4619      	mov	r1, r3
   20248:	466a      	mov	r2, sp
   2024a:	4628      	mov	r0, r5
   2024c:	f7ff fee0 	bl	20010 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   20250:	4668      	mov	r0, sp
   20252:	2210      	movs	r2, #16
   20254:	2100      	movs	r1, #0
   20256:	f7ff fee8 	bl	2002a <_set>

	return TC_CRYPTO_SUCCESS;
   2025a:	2001      	movs	r0, #1
}
   2025c:	b008      	add	sp, #32
   2025e:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   20260:	4608      	mov	r0, r1
   20262:	e7fb      	b.n	2025c <tc_aes_encrypt+0xa0>
   20264:	4610      	mov	r0, r2
   20266:	e7f9      	b.n	2025c <tc_aes_encrypt+0xa0>

00020268 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   20268:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2026a:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2026c:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2026e:	f912 3b10 	ldrsb.w	r3, [r2], #16
   20272:	2b00      	cmp	r3, #0
   20274:	bfb4      	ite	lt
   20276:	2387      	movlt	r3, #135	; 0x87
   20278:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2027a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2027e:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   20282:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   20284:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   20288:	d002      	beq.n	20290 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2028a:	7813      	ldrb	r3, [r2, #0]
   2028c:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2028e:	e7f4      	b.n	2027a <gf_double+0x12>
	}
}
   20290:	bd10      	pop	{r4, pc}

00020292 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   20292:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   20294:	b120      	cbz	r0, 202a0 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   20296:	2258      	movs	r2, #88	; 0x58
   20298:	2100      	movs	r1, #0
   2029a:	f7ff fec6 	bl	2002a <_set>
   2029e:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   202a0:	bd08      	pop	{r3, pc}

000202a2 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   202a2:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   202a4:	4604      	mov	r4, r0
   202a6:	b188      	cbz	r0, 202cc <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   202a8:	2210      	movs	r2, #16
   202aa:	2100      	movs	r1, #0
   202ac:	f7ff febd 	bl	2002a <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   202b0:	2210      	movs	r2, #16
   202b2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   202b6:	2100      	movs	r1, #0
   202b8:	f7ff feb7 	bl	2002a <_set>
	s->leftover_offset = 0;
   202bc:	2300      	movs	r3, #0
   202be:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   202c0:	2200      	movs	r2, #0
   202c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   202c6:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   202ca:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   202cc:	bd10      	pop	{r4, pc}

000202ce <tc_cmac_setup>:
{
   202ce:	b570      	push	{r4, r5, r6, lr}
   202d0:	460d      	mov	r5, r1
   202d2:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   202d4:	4604      	mov	r4, r0
   202d6:	b310      	cbz	r0, 2031e <tc_cmac_setup+0x50>
   202d8:	b311      	cbz	r1, 20320 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   202da:	2258      	movs	r2, #88	; 0x58
   202dc:	2100      	movs	r1, #0
   202de:	f7ff fea4 	bl	2002a <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   202e2:	4629      	mov	r1, r5
	s->sched = sched;
   202e4:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   202e6:	4630      	mov	r0, r6
   202e8:	f7f2 ff94 	bl	13214 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   202ec:	2210      	movs	r2, #16
   202ee:	2100      	movs	r1, #0
   202f0:	4620      	mov	r0, r4
   202f2:	f7ff fe9a 	bl	2002a <_set>
	gf_double (s->K1, s->iv);
   202f6:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   202fa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   202fc:	4621      	mov	r1, r4
   202fe:	4620      	mov	r0, r4
   20300:	f7ff ff5c 	bl	201bc <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   20304:	4621      	mov	r1, r4
   20306:	4628      	mov	r0, r5
   20308:	f7ff ffae 	bl	20268 <gf_double>
	gf_double (s->K2, s->K1);
   2030c:	4629      	mov	r1, r5
   2030e:	f104 0020 	add.w	r0, r4, #32
   20312:	f7ff ffa9 	bl	20268 <gf_double>
	tc_cmac_init(s);
   20316:	4620      	mov	r0, r4
   20318:	f7ff ffc3 	bl	202a2 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2031c:	2001      	movs	r0, #1
}
   2031e:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   20320:	4608      	mov	r0, r1
   20322:	e7fc      	b.n	2031e <tc_cmac_setup+0x50>

00020324 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   20324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20328:	460d      	mov	r5, r1
   2032a:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2032c:	4604      	mov	r4, r0
   2032e:	2800      	cmp	r0, #0
   20330:	d061      	beq.n	203f6 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   20332:	b912      	cbnz	r2, 2033a <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   20334:	2001      	movs	r0, #1
}
   20336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   2033a:	2900      	cmp	r1, #0
   2033c:	d05b      	beq.n	203f6 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   2033e:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   20342:	ea53 0102 	orrs.w	r1, r3, r2
   20346:	d056      	beq.n	203f6 <tc_cmac_update+0xd2>
	s->countdown--;
   20348:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   2034a:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   2034e:	f142 32ff 	adc.w	r2, r2, #4294967295
   20352:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   20356:	f1b8 0f00 	cmp.w	r8, #0
   2035a:	d02a      	beq.n	203b2 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2035c:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   20360:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   20364:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   20366:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   20368:	d208      	bcs.n	2037c <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2036a:	462a      	mov	r2, r5
   2036c:	4633      	mov	r3, r6
   2036e:	4631      	mov	r1, r6
   20370:	f7ff fe4e 	bl	20010 <_copy>
			s->leftover_offset += data_length;
   20374:	6c62      	ldr	r2, [r4, #68]	; 0x44
   20376:	4432      	add	r2, r6
   20378:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2037a:	e7db      	b.n	20334 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   2037c:	463b      	mov	r3, r7
   2037e:	462a      	mov	r2, r5
   20380:	4639      	mov	r1, r7
   20382:	f7ff fe45 	bl	20010 <_copy>
		data_length -= remaining_space;
   20386:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   20388:	2300      	movs	r3, #0
   2038a:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2038c:	4446      	add	r6, r8
		data += remaining_space;
   2038e:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20390:	1e63      	subs	r3, r4, #1
   20392:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   20396:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2039a:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2039e:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   203a0:	ea82 0200 	eor.w	r2, r2, r0
   203a4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   203a6:	d1f6      	bne.n	20396 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   203a8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   203aa:	4621      	mov	r1, r4
   203ac:	4620      	mov	r0, r4
   203ae:	f7ff ff05 	bl	201bc <tc_aes_encrypt>
   203b2:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   203b6:	2e10      	cmp	r6, #16
   203b8:	d80a      	bhi.n	203d0 <tc_cmac_update+0xac>
	if (data_length > 0) {
   203ba:	2e00      	cmp	r6, #0
   203bc:	d0ba      	beq.n	20334 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   203be:	4633      	mov	r3, r6
   203c0:	462a      	mov	r2, r5
   203c2:	4631      	mov	r1, r6
   203c4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   203c8:	f7ff fe22 	bl	20010 <_copy>
		s->leftover_offset = data_length;
   203cc:	6466      	str	r6, [r4, #68]	; 0x44
   203ce:	e7b1      	b.n	20334 <tc_cmac_update+0x10>
   203d0:	1e63      	subs	r3, r4, #1
   203d2:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   203d4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   203d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   203dc:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   203de:	ea82 0200 	eor.w	r2, r2, r0
   203e2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   203e4:	d1f6      	bne.n	203d4 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   203e6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   203e8:	4621      	mov	r1, r4
   203ea:	4620      	mov	r0, r4
   203ec:	f7ff fee6 	bl	201bc <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   203f0:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   203f2:	3e10      	subs	r6, #16
   203f4:	e7df      	b.n	203b6 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   203f6:	2000      	movs	r0, #0
   203f8:	e79d      	b.n	20336 <tc_cmac_update+0x12>

000203fa <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   203fa:	b570      	push	{r4, r5, r6, lr}
   203fc:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   203fe:	4605      	mov	r5, r0
   20400:	b1e8      	cbz	r0, 2043e <tc_cmac_final+0x44>
   20402:	b369      	cbz	r1, 20460 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   20404:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   20406:	2a10      	cmp	r2, #16
   20408:	d11a      	bne.n	20440 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2040a:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2040c:	1e63      	subs	r3, r4, #1
   2040e:	3901      	subs	r1, #1
   20410:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   20414:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   20418:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   2041c:	4072      	eors	r2, r6
   2041e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20422:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   20424:	ea82 0206 	eor.w	r2, r2, r6
   20428:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2042a:	d1f3      	bne.n	20414 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2042c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2042e:	4621      	mov	r1, r4
   20430:	4628      	mov	r0, r5
   20432:	f7ff fec3 	bl	201bc <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   20436:	4620      	mov	r0, r4
   20438:	f7ff ff2b 	bl	20292 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2043c:	2001      	movs	r0, #1
}
   2043e:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   20440:	f102 0030 	add.w	r0, r2, #48	; 0x30
   20444:	2100      	movs	r1, #0
   20446:	f1c2 0210 	rsb	r2, r2, #16
   2044a:	4420      	add	r0, r4
   2044c:	f7ff fded 	bl	2002a <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   20450:	6c63      	ldr	r3, [r4, #68]	; 0x44
   20452:	4423      	add	r3, r4
   20454:	2280      	movs	r2, #128	; 0x80
   20456:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2045a:	f104 0120 	add.w	r1, r4, #32
   2045e:	e7d5      	b.n	2040c <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   20460:	4608      	mov	r0, r1
   20462:	e7ec      	b.n	2043e <tc_cmac_final+0x44>

00020464 <abort_function>:
{
   20464:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   20466:	2000      	movs	r0, #0
   20468:	f7f2 fd42 	bl	12ef0 <sys_reboot>

0002046c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   2046c:	f002 bd7d 	b.w	22f6a <z_fatal_error>

00020470 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   20470:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   20472:	6800      	ldr	r0, [r0, #0]
   20474:	f002 bd79 	b.w	22f6a <z_fatal_error>

00020478 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   20478:	2100      	movs	r1, #0
   2047a:	2001      	movs	r0, #1
   2047c:	f7ff bff6 	b.w	2046c <z_arm_fatal_error>

00020480 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   20480:	b508      	push	{r3, lr}
	handler();
   20482:	f7f3 f85b 	bl	1353c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   20486:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2048a:	f7f3 b933 	b.w	136f4 <z_arm_exc_exit>

0002048e <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   2048e:	3901      	subs	r1, #1
   20490:	4603      	mov	r3, r0
   20492:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   20496:	b90a      	cbnz	r2, 2049c <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   20498:	701a      	strb	r2, [r3, #0]

	return dest;
}
   2049a:	4770      	bx	lr
		*d = *s;
   2049c:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   204a0:	e7f7      	b.n	20492 <strcpy+0x4>

000204a2 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
   204a2:	b570      	push	{r4, r5, r6, lr}
   204a4:	4605      	mov	r5, r0
   204a6:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   204a8:	b142      	cbz	r2, 204bc <strncpy+0x1a>
   204aa:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   204ae:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   204b0:	b92c      	cbnz	r4, 204be <strncpy+0x1c>
   204b2:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   204b4:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   204b8:	429a      	cmp	r2, r3
   204ba:	d1fb      	bne.n	204b4 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   204bc:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   204be:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   204c2:	4632      	mov	r2, r6
   204c4:	e7ef      	b.n	204a6 <strncpy+0x4>

000204c6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   204c6:	4603      	mov	r3, r0
	size_t n = 0;
   204c8:	2000      	movs	r0, #0

	while (*s != '\0') {
   204ca:	5c1a      	ldrb	r2, [r3, r0]
   204cc:	b902      	cbnz	r2, 204d0 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   204ce:	4770      	bx	lr
		n++;
   204d0:	3001      	adds	r0, #1
   204d2:	e7fa      	b.n	204ca <strlen+0x4>

000204d4 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   204d4:	4603      	mov	r3, r0
	size_t n = 0;
   204d6:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   204d8:	5c1a      	ldrb	r2, [r3, r0]
   204da:	b10a      	cbz	r2, 204e0 <strnlen+0xc>
   204dc:	4288      	cmp	r0, r1
   204de:	d100      	bne.n	204e2 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   204e0:	4770      	bx	lr
		n++;
   204e2:	3001      	adds	r0, #1
   204e4:	e7f8      	b.n	204d8 <strnlen+0x4>

000204e6 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   204e6:	1e43      	subs	r3, r0, #1
   204e8:	3901      	subs	r1, #1
   204ea:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   204ee:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   204f2:	4282      	cmp	r2, r0
   204f4:	d101      	bne.n	204fa <strcmp+0x14>
   204f6:	2a00      	cmp	r2, #0
   204f8:	d1f7      	bne.n	204ea <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   204fa:	1a10      	subs	r0, r2, r0
   204fc:	4770      	bx	lr

000204fe <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   204fe:	b510      	push	{r4, lr}
   20500:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   20502:	b15a      	cbz	r2, 2051c <memcmp+0x1e>
   20504:	3901      	subs	r1, #1
   20506:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   20508:	f813 0b01 	ldrb.w	r0, [r3], #1
   2050c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   20510:	42a3      	cmp	r3, r4
   20512:	d001      	beq.n	20518 <memcmp+0x1a>
   20514:	4290      	cmp	r0, r2
   20516:	d0f7      	beq.n	20508 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   20518:	1a80      	subs	r0, r0, r2
}
   2051a:	bd10      	pop	{r4, pc}
		return 0;
   2051c:	4610      	mov	r0, r2
   2051e:	e7fc      	b.n	2051a <memcmp+0x1c>

00020520 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   20520:	1a43      	subs	r3, r0, r1
   20522:	4293      	cmp	r3, r2
{
   20524:	b510      	push	{r4, lr}
   20526:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   2052a:	d308      	bcc.n	2053e <memmove+0x1e>
   2052c:	3901      	subs	r1, #1
	char *dest = d;
   2052e:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   20530:	429a      	cmp	r2, r3
   20532:	d007      	beq.n	20544 <memmove+0x24>
			*dest = *src;
   20534:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   20538:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   2053c:	e7f8      	b.n	20530 <memmove+0x10>
   2053e:	440a      	add	r2, r1
		while (n > 0) {
   20540:	428a      	cmp	r2, r1
   20542:	d100      	bne.n	20546 <memmove+0x26>
		}
	}

	return d;
}
   20544:	bd10      	pop	{r4, pc}
			dest[n] = src[n];
   20546:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2054a:	f803 4d01 	strb.w	r4, [r3, #-1]!
   2054e:	e7f7      	b.n	20540 <memmove+0x20>

00020550 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   20550:	b510      	push	{r4, lr}
   20552:	1e43      	subs	r3, r0, #1
   20554:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   20556:	4291      	cmp	r1, r2
   20558:	d100      	bne.n	2055c <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   2055a:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   2055c:	f811 4b01 	ldrb.w	r4, [r1], #1
   20560:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   20564:	e7f7      	b.n	20556 <memcpy+0x6>

00020566 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   20566:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   20568:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   2056a:	4603      	mov	r3, r0
	while (n > 0) {
   2056c:	4293      	cmp	r3, r2
   2056e:	d100      	bne.n	20572 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   20570:	4770      	bx	lr
		*(d_byte++) = c_byte;
   20572:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   20576:	e7f9      	b.n	2056c <memset+0x6>

00020578 <_stdout_hook_default>:
}
   20578:	f04f 30ff 	mov.w	r0, #4294967295
   2057c:	4770      	bx	lr

0002057e <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2057e:	2806      	cmp	r0, #6
   20580:	d108      	bne.n	20594 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   20582:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20586:	2201      	movs	r2, #1
   20588:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2058c:	f3bf 8f4f 	dsb	sy
        __WFE();
   20590:	bf20      	wfe
    while (true)
   20592:	e7fd      	b.n	20590 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   20594:	4770      	bx	lr

00020596 <pm_state_exit_post_ops>:
   20596:	2300      	movs	r3, #0
   20598:	f383 8811 	msr	BASEPRI, r3
   2059c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   205a0:	4770      	bx	lr

000205a2 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   205a2:	b510      	push	{r4, lr}
   205a4:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   205a6:	7801      	ldrb	r1, [r0, #0]
   205a8:	7822      	ldrb	r2, [r4, #0]
   205aa:	428a      	cmp	r2, r1
{
   205ac:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   205ae:	d00f      	beq.n	205d0 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   205b0:	4669      	mov	r1, sp
   205b2:	f7f3 fb3d 	bl	13c30 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   205b6:	a905      	add	r1, sp, #20
   205b8:	4620      	mov	r0, r4
   205ba:	f7f3 fb39 	bl	13c30 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   205be:	2210      	movs	r2, #16
   205c0:	f10d 0115 	add.w	r1, sp, #21
   205c4:	f10d 0001 	add.w	r0, sp, #1
   205c8:	f7ff ff99 	bl	204fe <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   205cc:	b00a      	add	sp, #40	; 0x28
   205ce:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   205d0:	2a01      	cmp	r2, #1
   205d2:	d006      	beq.n	205e2 <bt_uuid_cmp+0x40>
   205d4:	2a02      	cmp	r2, #2
   205d6:	d007      	beq.n	205e8 <bt_uuid_cmp+0x46>
   205d8:	b972      	cbnz	r2, 205f8 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   205da:	8840      	ldrh	r0, [r0, #2]
   205dc:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   205de:	1ac0      	subs	r0, r0, r3
   205e0:	e7f4      	b.n	205cc <bt_uuid_cmp+0x2a>
   205e2:	6840      	ldr	r0, [r0, #4]
   205e4:	6863      	ldr	r3, [r4, #4]
   205e6:	e7fa      	b.n	205de <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   205e8:	2210      	movs	r2, #16
   205ea:	1c61      	adds	r1, r4, #1
   205ec:	3001      	adds	r0, #1
}
   205ee:	b00a      	add	sp, #40	; 0x28
   205f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   205f4:	f7ff bf83 	b.w	204fe <memcmp>
	switch (u1->type) {
   205f8:	f06f 0015 	mvn.w	r0, #21
   205fc:	e7e6      	b.n	205cc <bt_uuid_cmp+0x2a>

000205fe <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   205fe:	2a04      	cmp	r2, #4
{
   20600:	b510      	push	{r4, lr}
	switch (data_len) {
   20602:	d00a      	beq.n	2061a <bt_uuid_create+0x1c>
   20604:	2a10      	cmp	r2, #16
   20606:	d00d      	beq.n	20624 <bt_uuid_create+0x26>
   20608:	2a02      	cmp	r2, #2
   2060a:	f04f 0300 	mov.w	r3, #0
   2060e:	d10f      	bne.n	20630 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   20610:	7003      	strb	r3, [r0, #0]
   20612:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   20614:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   20616:	2001      	movs	r0, #1
}
   20618:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   2061a:	2301      	movs	r3, #1
   2061c:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2061e:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   20620:	6042      	str	r2, [r0, #4]
		break;
   20622:	e7f8      	b.n	20616 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   20624:	2302      	movs	r3, #2
   20626:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   2062a:	f7ff ff91 	bl	20550 <memcpy>
		break;
   2062e:	e7f2      	b.n	20616 <bt_uuid_create+0x18>
	switch (data_len) {
   20630:	4618      	mov	r0, r3
   20632:	e7f1      	b.n	20618 <bt_uuid_create+0x1a>

00020634 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   20634:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   20636:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   20638:	2106      	movs	r1, #6
{
   2063a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2063c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   20640:	f7f8 ff90 	bl	19564 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   20644:	b918      	cbnz	r0, 2064e <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   20646:	79a3      	ldrb	r3, [r4, #6]
   20648:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2064c:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2064e:	bd10      	pop	{r4, pc}

00020650 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   20650:	280f      	cmp	r0, #15
   20652:	d806      	bhi.n	20662 <bt_hci_evt_get_flags+0x12>
   20654:	280d      	cmp	r0, #13
   20656:	d80b      	bhi.n	20670 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   20658:	2805      	cmp	r0, #5
   2065a:	bf14      	ite	ne
   2065c:	2002      	movne	r0, #2
   2065e:	2003      	moveq	r0, #3
   20660:	4770      	bx	lr
	switch (evt) {
   20662:	2813      	cmp	r0, #19
   20664:	d004      	beq.n	20670 <bt_hci_evt_get_flags+0x20>
   20666:	281a      	cmp	r0, #26
   20668:	bf14      	ite	ne
   2066a:	2002      	movne	r0, #2
   2066c:	2001      	moveq	r0, #1
   2066e:	4770      	bx	lr
   20670:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   20672:	4770      	bx	lr

00020674 <handle_event>:
{
   20674:	b410      	push	{r4}
   20676:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2067a:	4604      	mov	r4, r0
   2067c:	4608      	mov	r0, r1
		if (handler->event != event) {
   2067e:	7811      	ldrb	r1, [r2, #0]
   20680:	42a1      	cmp	r1, r4
   20682:	d004      	beq.n	2068e <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   20684:	3208      	adds	r2, #8
   20686:	429a      	cmp	r2, r3
   20688:	d1f9      	bne.n	2067e <handle_event+0xa>
}
   2068a:	bc10      	pop	{r4}
   2068c:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   2068e:	8981      	ldrh	r1, [r0, #12]
   20690:	7853      	ldrb	r3, [r2, #1]
   20692:	4299      	cmp	r1, r3
   20694:	d3f9      	bcc.n	2068a <handle_event+0x16>
		handler->handler(buf);
   20696:	6853      	ldr	r3, [r2, #4]
}
   20698:	bc10      	pop	{r4}
		handler->handler(buf);
   2069a:	4718      	bx	r3

0002069c <hci_data_buf_overflow>:
}
   2069c:	4770      	bx	lr

0002069e <hci_disconn_complete>:
{
   2069e:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   206a0:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   206a2:	782e      	ldrb	r6, [r5, #0]
   206a4:	b97e      	cbnz	r6, 206c6 <hci_disconn_complete+0x28>
	conn = bt_conn_lookup_handle(handle);
   206a6:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   206aa:	f7f4 ffe1 	bl	15670 <bt_conn_lookup_handle>
	if (!conn) {
   206ae:	4604      	mov	r4, r0
   206b0:	b148      	cbz	r0, 206c6 <hci_disconn_complete+0x28>
	conn->err = evt->reason;
   206b2:	78eb      	ldrb	r3, [r5, #3]
   206b4:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   206b6:	4631      	mov	r1, r6
   206b8:	f7f4 ffe2 	bl	15680 <bt_conn_set_state>
		bt_conn_unref(conn);
   206bc:	4620      	mov	r0, r4
}
   206be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   206c2:	f000 bc58 	b.w	20f76 <bt_conn_unref>
}
   206c6:	bd70      	pop	{r4, r5, r6, pc}

000206c8 <le_phy_update_complete>:
{
   206c8:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   206ca:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   206cc:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   206d0:	f7f4 ffce 	bl	15670 <bt_conn_lookup_handle>
	if (!conn) {
   206d4:	b118      	cbz	r0, 206de <le_phy_update_complete+0x16>
}
   206d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   206da:	f000 bc4c 	b.w	20f76 <bt_conn_unref>
}
   206de:	bd08      	pop	{r3, pc}

000206e0 <le_data_len_change>:
{
   206e0:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   206e2:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   206e4:	8818      	ldrh	r0, [r3, #0]
   206e6:	f7f4 ffc3 	bl	15670 <bt_conn_lookup_handle>
	if (!conn) {
   206ea:	b118      	cbz	r0, 206f4 <le_data_len_change+0x14>
}
   206ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   206f0:	f000 bc41 	b.w	20f76 <bt_conn_unref>
}
   206f4:	bd08      	pop	{r3, pc}

000206f6 <atomic_or>:
{
   206f6:	4603      	mov	r3, r0
}
   206f8:	f3bf 8f5b 	dmb	ish
   206fc:	e853 0f00 	ldrex	r0, [r3]
   20700:	ea40 0201 	orr.w	r2, r0, r1
   20704:	e843 2c00 	strex	ip, r2, [r3]
   20708:	f1bc 0f00 	cmp.w	ip, #0
   2070c:	d1f6      	bne.n	206fc <atomic_or+0x6>
   2070e:	f3bf 8f5b 	dmb	ish
   20712:	4770      	bx	lr

00020714 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   20714:	2101      	movs	r1, #1
   20716:	3008      	adds	r0, #8
   20718:	f001 bf6f 	b.w	225fa <net_buf_simple_pull_mem>

0002071c <le_conn_update_complete>:
{
   2071c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   2071e:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   20720:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   20724:	f7f4 ffa4 	bl	15670 <bt_conn_lookup_handle>
	if (!conn) {
   20728:	4604      	mov	r4, r0
   2072a:	2800      	cmp	r0, #0
   2072c:	d03c      	beq.n	207a8 <le_conn_update_complete+0x8c>
	if (!evt->status) {
   2072e:	782b      	ldrb	r3, [r5, #0]
   20730:	b9cb      	cbnz	r3, 20766 <le_conn_update_complete+0x4a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   20732:	792a      	ldrb	r2, [r5, #4]
   20734:	78eb      	ldrb	r3, [r5, #3]
   20736:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2073a:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   2073e:	79aa      	ldrb	r2, [r5, #6]
   20740:	796b      	ldrb	r3, [r5, #5]
   20742:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   20746:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   2074a:	79eb      	ldrb	r3, [r5, #7]
   2074c:	7a2a      	ldrb	r2, [r5, #8]
   2074e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   20752:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   20756:	f7f5 f861 	bl	1581c <notify_le_param_updated>
	bt_conn_unref(conn);
   2075a:	4620      	mov	r0, r4
}
   2075c:	b003      	add	sp, #12
   2075e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
   20762:	f000 bc08 	b.w	20f76 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   20766:	2b1a      	cmp	r3, #26
   20768:	d1f7      	bne.n	2075a <le_conn_update_complete+0x3e>
   2076a:	78c3      	ldrb	r3, [r0, #3]
   2076c:	2b01      	cmp	r3, #1
   2076e:	d1f4      	bne.n	2075a <le_conn_update_complete+0x3e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   20770:	f44f 7100 	mov.w	r1, #512	; 0x200
   20774:	3004      	adds	r0, #4
   20776:	f7ff ffbe 	bl	206f6 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   2077a:	0583      	lsls	r3, r0, #22
   2077c:	d4ed      	bmi.n	2075a <le_conn_update_complete+0x3e>
		param.interval_min = conn->le.interval_min;
   2077e:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   20782:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   20786:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   2078a:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   2078e:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   20792:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   20796:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
   20798:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   2079c:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   207a0:	4620      	mov	r0, r4
   207a2:	f7f5 fae3 	bl	15d6c <bt_l2cap_update_conn_param>
   207a6:	e7d8      	b.n	2075a <le_conn_update_complete+0x3e>
}
   207a8:	b003      	add	sp, #12
   207aa:	bd30      	pop	{r4, r5, pc}

000207ac <le_remote_feat_complete>:
{
   207ac:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   207ae:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   207b0:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   207b4:	f7f4 ff5c 	bl	15670 <bt_conn_lookup_handle>
	if (!conn) {
   207b8:	4604      	mov	r4, r0
   207ba:	b180      	cbz	r0, 207de <le_remote_feat_complete+0x32>
	if (!evt->status) {
   207bc:	782b      	ldrb	r3, [r5, #0]
   207be:	b923      	cbnz	r3, 207ca <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   207c0:	2208      	movs	r2, #8
   207c2:	1ce9      	adds	r1, r5, #3
   207c4:	30ac      	adds	r0, #172	; 0xac
   207c6:	f7ff fec3 	bl	20550 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   207ca:	1d20      	adds	r0, r4, #4
   207cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
   207d0:	f7ff ff91 	bl	206f6 <atomic_or>
	bt_conn_unref(conn);
   207d4:	4620      	mov	r0, r4
}
   207d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   207da:	f000 bbcc 	b.w	20f76 <bt_conn_unref>
}
   207de:	bd38      	pop	{r3, r4, r5, pc}

000207e0 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   207e0:	f3bf 8f5b 	dmb	ish
   207e4:	e850 3f00 	ldrex	r3, [r0]
   207e8:	400b      	ands	r3, r1
   207ea:	e840 3200 	strex	r2, r3, [r0]
   207ee:	2a00      	cmp	r2, #0
   207f0:	d1f8      	bne.n	207e4 <atomic_and.isra.0+0x4>
   207f2:	f3bf 8f5b 	dmb	ish
}
   207f6:	4770      	bx	lr

000207f8 <hci_vendor_event>:
   207f8:	4770      	bx	lr

000207fa <hci_num_completed_packets>:
{
   207fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   207fe:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   20800:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   20802:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   20804:	783b      	ldrb	r3, [r7, #0]
   20806:	429d      	cmp	r5, r3
   20808:	db01      	blt.n	2080e <hci_num_completed_packets+0x14>
}
   2080a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   2080e:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   20812:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   20816:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   2081a:	f7f4 ff29 	bl	15670 <bt_conn_lookup_handle>
		if (!conn) {
   2081e:	4604      	mov	r4, r0
   20820:	b350      	cbz	r0, 20878 <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   20822:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   20826:	b326      	cbz	r6, 20872 <hci_num_completed_packets+0x78>
	__asm__ volatile(
   20828:	f04f 0340 	mov.w	r3, #64	; 0x40
   2082c:	f3ef 8211 	mrs	r2, BASEPRI
   20830:	f383 8812 	msr	BASEPRI_MAX, r3
   20834:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   20838:	69e3      	ldr	r3, [r4, #28]
   2083a:	b16b      	cbz	r3, 20858 <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   2083c:	3b01      	subs	r3, #1
   2083e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   20840:	f382 8811 	msr	BASEPRI, r2
   20844:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   20848:	4620      	mov	r0, r4
   2084a:	f7f4 fe65 	bl	15518 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   2084e:	3e01      	subs	r6, #1
   20850:	f7fa fc32 	bl	1b0b8 <z_impl_k_sem_give>
   20854:	b2b6      	uxth	r6, r6
   20856:	e7e6      	b.n	20826 <hci_num_completed_packets+0x2c>
	return list->head;
   20858:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   2085a:	b12b      	cbz	r3, 20868 <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2085c:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   2085e:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   20860:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20862:	428b      	cmp	r3, r1
	list->tail = node;
   20864:	bf08      	it	eq
   20866:	61a0      	streq	r0, [r4, #24]
   20868:	f382 8811 	msr	BASEPRI, r2
   2086c:	f3bf 8f6f 	isb	sy
			if (!node) {
   20870:	b923      	cbnz	r3, 2087c <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   20872:	4620      	mov	r0, r4
   20874:	f000 fb7f 	bl	20f76 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   20878:	3501      	adds	r5, #1
   2087a:	e7c3      	b.n	20804 <hci_num_completed_packets+0xa>
	__asm__ volatile(
   2087c:	f04f 0240 	mov.w	r2, #64	; 0x40
   20880:	f3ef 8111 	mrs	r1, BASEPRI
   20884:	f382 8812 	msr	BASEPRI_MAX, r2
   20888:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   2088c:	68da      	ldr	r2, [r3, #12]
   2088e:	61e2      	str	r2, [r4, #28]
	return list->tail;
   20890:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   20892:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   20896:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   2089a:	b94a      	cbnz	r2, 208b0 <hci_num_completed_packets+0xb6>
	list->head = node;
   2089c:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   208a0:	f381 8811 	msr	BASEPRI, r1
   208a4:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   208a8:	4648      	mov	r0, r9
   208aa:	f7fa fd71 	bl	1b390 <k_work_submit>
   208ae:	e7cb      	b.n	20848 <hci_num_completed_packets+0x4e>
	parent->next = child;
   208b0:	6013      	str	r3, [r2, #0]
	list->tail = node;
   208b2:	6263      	str	r3, [r4, #36]	; 0x24
}
   208b4:	e7f4      	b.n	208a0 <hci_num_completed_packets+0xa6>

000208b6 <hci_le_read_max_data_len>:
{
   208b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   208b8:	4606      	mov	r6, r0
   208ba:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   208bc:	aa01      	add	r2, sp, #4
   208be:	2100      	movs	r1, #0
   208c0:	f242 002f 	movw	r0, #8239	; 0x202f
   208c4:	f7f3 fbee 	bl	140a4 <bt_hci_cmd_send_sync>
	if (err) {
   208c8:	4604      	mov	r4, r0
   208ca:	b948      	cbnz	r0, 208e0 <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   208cc:	9801      	ldr	r0, [sp, #4]
   208ce:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   208d0:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   208d4:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   208d6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   208da:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   208dc:	f7f6 fd44 	bl	17368 <net_buf_unref>
}
   208e0:	4620      	mov	r0, r4
   208e2:	b002      	add	sp, #8
   208e4:	bd70      	pop	{r4, r5, r6, pc}

000208e6 <bt_hci_disconnect>:
{
   208e6:	b570      	push	{r4, r5, r6, lr}
   208e8:	4606      	mov	r6, r0
   208ea:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   208ec:	f240 4006 	movw	r0, #1030	; 0x406
   208f0:	2103      	movs	r1, #3
   208f2:	f7f3 fb9d 	bl	14030 <bt_hci_cmd_create>
	if (!buf) {
   208f6:	4604      	mov	r4, r0
   208f8:	b168      	cbz	r0, 20916 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   208fa:	2103      	movs	r1, #3
   208fc:	3008      	adds	r0, #8
   208fe:	f001 fe55 	bl	225ac <net_buf_simple_add>
	disconn->reason = reason;
   20902:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   20904:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   20906:	4621      	mov	r1, r4
   20908:	2200      	movs	r2, #0
}
   2090a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2090e:	f240 4006 	movw	r0, #1030	; 0x406
   20912:	f7f3 bbc7 	b.w	140a4 <bt_hci_cmd_send_sync>
}
   20916:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2091a:	bd70      	pop	{r4, r5, r6, pc}

0002091c <bt_le_set_data_len>:
{
   2091c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2091e:	4607      	mov	r7, r0
   20920:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   20922:	f242 0022 	movw	r0, #8226	; 0x2022
   20926:	2106      	movs	r1, #6
{
   20928:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2092a:	f7f3 fb81 	bl	14030 <bt_hci_cmd_create>
	if (!buf) {
   2092e:	4604      	mov	r4, r0
   20930:	b178      	cbz	r0, 20952 <bt_le_set_data_len+0x36>
   20932:	2106      	movs	r1, #6
   20934:	3008      	adds	r0, #8
   20936:	f001 fe39 	bl	225ac <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2093a:	883b      	ldrh	r3, [r7, #0]
   2093c:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2093e:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   20940:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   20942:	4621      	mov	r1, r4
   20944:	2200      	movs	r2, #0
}
   20946:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2094a:	f242 0022 	movw	r0, #8226	; 0x2022
   2094e:	f7f3 bba9 	b.w	140a4 <bt_hci_cmd_send_sync>
}
   20952:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020958 <bt_le_set_phy>:
{
   20958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2095c:	4680      	mov	r8, r0
   2095e:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   20960:	f242 0032 	movw	r0, #8242	; 0x2032
   20964:	2107      	movs	r1, #7
{
   20966:	f89d 9020 	ldrb.w	r9, [sp, #32]
   2096a:	4616      	mov	r6, r2
   2096c:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2096e:	f7f3 fb5f 	bl	14030 <bt_hci_cmd_create>
	if (!buf) {
   20972:	4604      	mov	r4, r0
   20974:	b198      	cbz	r0, 2099e <bt_le_set_phy+0x46>
   20976:	2107      	movs	r1, #7
   20978:	3008      	adds	r0, #8
   2097a:	f001 fe17 	bl	225ac <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2097e:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   20982:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   20984:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   20986:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   20988:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   2098a:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2098e:	4621      	mov	r1, r4
   20990:	2200      	movs	r2, #0
}
   20992:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   20996:	f242 0032 	movw	r0, #8242	; 0x2032
   2099a:	f7f3 bb83 	b.w	140a4 <bt_hci_cmd_send_sync>
}
   2099e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   209a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000209a6 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   209a6:	6880      	ldr	r0, [r0, #8]
   209a8:	f7f3 bbde 	b.w	14168 <bt_hci_le_enh_conn_complete>

000209ac <le_legacy_conn_complete>:
{
   209ac:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   209ae:	6881      	ldr	r1, [r0, #8]
{
   209b0:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   209b2:	780b      	ldrb	r3, [r1, #0]
   209b4:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   209b8:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   209bc:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   209c0:	78cb      	ldrb	r3, [r1, #3]
   209c2:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   209c6:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   209ca:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   209ce:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   209d2:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   209d6:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   209da:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   209de:	7c4b      	ldrb	r3, [r1, #17]
   209e0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	memcpy(dst, src, sizeof(*dst));
   209e4:	2207      	movs	r2, #7
   209e6:	3104      	adds	r1, #4
   209e8:	a803      	add	r0, sp, #12
   209ea:	f7ff fdb1 	bl	20550 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   209ee:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   209f0:	4669      	mov	r1, sp
   209f2:	2206      	movs	r2, #6
   209f4:	f10d 0013 	add.w	r0, sp, #19
   209f8:	9400      	str	r4, [sp, #0]
   209fa:	f8ad 4004 	strh.w	r4, [sp, #4]
   209fe:	f7ff fda7 	bl	20550 <memcpy>
   20a02:	2206      	movs	r2, #6
   20a04:	4669      	mov	r1, sp
   20a06:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   20a0a:	9400      	str	r4, [sp, #0]
   20a0c:	f8ad 4004 	strh.w	r4, [sp, #4]
   20a10:	f7ff fd9e 	bl	20550 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   20a14:	a802      	add	r0, sp, #8
   20a16:	f7f3 fba7 	bl	14168 <bt_hci_le_enh_conn_complete>
}
   20a1a:	b00a      	add	sp, #40	; 0x28
   20a1c:	bd10      	pop	{r4, pc}

00020a1e <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   20a1e:	8803      	ldrh	r3, [r0, #0]
   20a20:	8842      	ldrh	r2, [r0, #2]
   20a22:	4293      	cmp	r3, r2
{
   20a24:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   20a26:	d819      	bhi.n	20a5c <bt_le_conn_params_valid+0x3e>
   20a28:	2b05      	cmp	r3, #5
   20a2a:	d917      	bls.n	20a5c <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   20a2c:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   20a30:	d814      	bhi.n	20a5c <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   20a32:	8883      	ldrh	r3, [r0, #4]
   20a34:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   20a38:	d210      	bcs.n	20a5c <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   20a3a:	88c0      	ldrh	r0, [r0, #6]
   20a3c:	f1a0 010a 	sub.w	r1, r0, #10
   20a40:	b289      	uxth	r1, r1
   20a42:	f640 4476 	movw	r4, #3190	; 0xc76
   20a46:	42a1      	cmp	r1, r4
   20a48:	d808      	bhi.n	20a5c <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   20a4a:	3301      	adds	r3, #1
   20a4c:	b29b      	uxth	r3, r3
   20a4e:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   20a50:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   20a54:	bf34      	ite	cc
   20a56:	2001      	movcc	r0, #1
   20a58:	2000      	movcs	r0, #0
}
   20a5a:	bd10      	pop	{r4, pc}
		return false;
   20a5c:	2000      	movs	r0, #0
   20a5e:	e7fc      	b.n	20a5a <bt_le_conn_params_valid+0x3c>

00020a60 <le_conn_param_neg_reply>:
{
   20a60:	b570      	push	{r4, r5, r6, lr}
   20a62:	4606      	mov	r6, r0
   20a64:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   20a66:	f242 0021 	movw	r0, #8225	; 0x2021
   20a6a:	2103      	movs	r1, #3
   20a6c:	f7f3 fae0 	bl	14030 <bt_hci_cmd_create>
	if (!buf) {
   20a70:	4604      	mov	r4, r0
   20a72:	b160      	cbz	r0, 20a8e <le_conn_param_neg_reply+0x2e>
   20a74:	2103      	movs	r1, #3
   20a76:	3008      	adds	r0, #8
   20a78:	f001 fd98 	bl	225ac <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   20a7c:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   20a7e:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   20a80:	4621      	mov	r1, r4
   20a82:	f242 0021 	movw	r0, #8225	; 0x2021
}
   20a86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   20a8a:	f7f3 bc83 	b.w	14394 <bt_hci_cmd_send>
}
   20a8e:	bd70      	pop	{r4, r5, r6, pc}

00020a90 <le_conn_param_req>:
{
   20a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   20a92:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   20a94:	78d9      	ldrb	r1, [r3, #3]
   20a96:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   20a98:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   20a9a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   20a9e:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   20aa2:	7959      	ldrb	r1, [r3, #5]
   20aa4:	791a      	ldrb	r2, [r3, #4]
   20aa6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   20aaa:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   20aae:	799a      	ldrb	r2, [r3, #6]
   20ab0:	79d9      	ldrb	r1, [r3, #7]
   20ab2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   20ab6:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   20aba:	7a1a      	ldrb	r2, [r3, #8]
   20abc:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   20abe:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   20ac0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   20ac4:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   20ac6:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   20aca:	f7f4 fdd1 	bl	15670 <bt_conn_lookup_handle>
	if (!conn) {
   20ace:	4606      	mov	r6, r0
   20ad0:	b928      	cbnz	r0, 20ade <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   20ad2:	2102      	movs	r1, #2
   20ad4:	4620      	mov	r0, r4
   20ad6:	f7ff ffc3 	bl	20a60 <le_conn_param_neg_reply>
}
   20ada:	b003      	add	sp, #12
   20adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   20ade:	4669      	mov	r1, sp
   20ae0:	f7f4 fee8 	bl	158b4 <le_param_req>
   20ae4:	b938      	cbnz	r0, 20af6 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   20ae6:	211e      	movs	r1, #30
   20ae8:	4620      	mov	r0, r4
   20aea:	f7ff ffb9 	bl	20a60 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   20aee:	4630      	mov	r0, r6
   20af0:	f000 fa41 	bl	20f76 <bt_conn_unref>
   20af4:	e7f1      	b.n	20ada <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   20af6:	210e      	movs	r1, #14
   20af8:	f242 0020 	movw	r0, #8224	; 0x2020
   20afc:	f7f3 fa98 	bl	14030 <bt_hci_cmd_create>
	if (!buf) {
   20b00:	4605      	mov	r5, r0
   20b02:	2800      	cmp	r0, #0
   20b04:	d0f3      	beq.n	20aee <le_conn_param_req+0x5e>
   20b06:	210e      	movs	r1, #14
   20b08:	3008      	adds	r0, #8
   20b0a:	f001 fd4f 	bl	225ac <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   20b0e:	220e      	movs	r2, #14
   20b10:	4604      	mov	r4, r0
   20b12:	2100      	movs	r1, #0
   20b14:	f7ff fd27 	bl	20566 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   20b18:	f8bd 3000 	ldrh.w	r3, [sp]
   20b1c:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   20b1e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   20b22:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   20b24:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   20b28:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   20b2a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   20b2e:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   20b30:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   20b32:	4629      	mov	r1, r5
   20b34:	f242 0020 	movw	r0, #8224	; 0x2020
   20b38:	f7f3 fc2c 	bl	14394 <bt_hci_cmd_send>
   20b3c:	e7d7      	b.n	20aee <le_conn_param_req+0x5e>

00020b3e <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   20b3e:	2000      	movs	r0, #0
   20b40:	4770      	bx	lr

00020b42 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   20b42:	2000      	movs	r0, #0
   20b44:	4770      	bx	lr

00020b46 <bt_lookup_id_addr>:
}
   20b46:	4608      	mov	r0, r1
   20b48:	4770      	bx	lr

00020b4a <bt_id_set_adv_private_addr>:
{
   20b4a:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   20b4c:	2106      	movs	r1, #6
   20b4e:	4668      	mov	r0, sp
   20b50:	f7f8 fd08 	bl	19564 <bt_rand>
	if (err) {
   20b54:	b940      	cbnz	r0, 20b68 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   20b56:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   20b5a:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   20b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   20b60:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   20b64:	f7f3 fff4 	bl	14b50 <set_random_address>
}
   20b68:	b003      	add	sp, #12
   20b6a:	f85d fb04 	ldr.w	pc, [sp], #4

00020b6e <bt_id_adv_random_addr_check>:
}
   20b6e:	2001      	movs	r0, #1
   20b70:	4770      	bx	lr

00020b72 <get_adv_channel_map>:
{
   20b72:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   20b74:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   20b78:	bf0c      	ite	eq
   20b7a:	2007      	moveq	r0, #7
   20b7c:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   20b7e:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   20b80:	bf48      	it	mi
   20b82:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   20b86:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   20b88:	bf48      	it	mi
   20b8a:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   20b8e:	4770      	bx	lr

00020b90 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20b90:	f3bf 8f5b 	dmb	ish
   20b94:	6800      	ldr	r0, [r0, #0]
   20b96:	f3bf 8f5b 	dmb	ish
}
   20b9a:	4770      	bx	lr

00020b9c <atomic_and>:
{
   20b9c:	4603      	mov	r3, r0
}
   20b9e:	f3bf 8f5b 	dmb	ish
   20ba2:	e853 0f00 	ldrex	r0, [r3]
   20ba6:	ea00 0201 	and.w	r2, r0, r1
   20baa:	e843 2c00 	strex	ip, r2, [r3]
   20bae:	f1bc 0f00 	cmp.w	ip, #0
   20bb2:	d1f6      	bne.n	20ba2 <atomic_and+0x6>
   20bb4:	f3bf 8f5b 	dmb	ish
   20bb8:	4770      	bx	lr

00020bba <hci_set_ad>:
{
   20bba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20bbe:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   20bc0:	2120      	movs	r1, #32
{
   20bc2:	4682      	mov	sl, r0
   20bc4:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   20bc6:	f7f3 fa33 	bl	14030 <bt_hci_cmd_create>
	if (!buf) {
   20bca:	4605      	mov	r5, r0
   20bcc:	2800      	cmp	r0, #0
   20bce:	d04a      	beq.n	20c66 <hci_set_ad+0xac>
   20bd0:	2120      	movs	r1, #32
   20bd2:	3008      	adds	r0, #8
   20bd4:	f001 fcea 	bl	225ac <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   20bd8:	2220      	movs	r2, #32
   20bda:	2100      	movs	r1, #0
   20bdc:	4681      	mov	r9, r0
   20bde:	f7ff fcc2 	bl	20566 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   20be2:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   20be6:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   20bea:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   20bec:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   20bee:	f8d4 8000 	ldr.w	r8, [r4]
   20bf2:	2300      	movs	r3, #0
   20bf4:	6862      	ldr	r2, [r4, #4]
   20bf6:	4293      	cmp	r3, r2
   20bf8:	d30d      	bcc.n	20c16 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   20bfa:	9b00      	ldr	r3, [sp, #0]
   20bfc:	3408      	adds	r4, #8
   20bfe:	42a3      	cmp	r3, r4
   20c00:	d1f5      	bne.n	20bee <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   20c02:	2200      	movs	r2, #0
   20c04:	4629      	mov	r1, r5
   20c06:	4650      	mov	r0, sl
	*data_len = set_data_len;
   20c08:	f889 6000 	strb.w	r6, [r9]
}
   20c0c:	b003      	add	sp, #12
   20c0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   20c12:	f7f3 ba47 	b.w	140a4 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   20c16:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   20c1a:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   20c1e:	1cb0      	adds	r0, r6, #2
   20c20:	1811      	adds	r1, r2, r0
   20c22:	291f      	cmp	r1, #31
   20c24:	d908      	bls.n	20c38 <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   20c26:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   20c2a:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   20c2e:	d11f      	bne.n	20c70 <hci_set_ad+0xb6>
   20c30:	2a00      	cmp	r2, #0
   20c32:	dd1d      	ble.n	20c70 <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   20c34:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   20c38:	b2d7      	uxtb	r7, r2
   20c3a:	1c79      	adds	r1, r7, #1
   20c3c:	f80b 1006 	strb.w	r1, [fp, r6]
   20c40:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   20c42:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   20c44:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   20c48:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   20c4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   20c50:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   20c52:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   20c54:	f7ff fc7c 	bl	20550 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   20c58:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   20c5a:	443e      	add	r6, r7
   20c5c:	b2f6      	uxtb	r6, r6
		for (size_t j = 0; j < ad[i].len; j++) {
   20c5e:	3301      	adds	r3, #1
   20c60:	f108 0808 	add.w	r8, r8, #8
   20c64:	e7c6      	b.n	20bf4 <hci_set_ad+0x3a>
		return -ENOBUFS;
   20c66:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   20c6a:	b003      	add	sp, #12
   20c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   20c70:	4628      	mov	r0, r5
   20c72:	f7f6 fb79 	bl	17368 <net_buf_unref>
		return err;
   20c76:	f06f 0015 	mvn.w	r0, #21
   20c7a:	e7f6      	b.n	20c6a <hci_set_ad+0xb0>

00020c7c <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   20c7c:	2301      	movs	r3, #1
{
   20c7e:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   20c80:	fa03 f101 	lsl.w	r1, r3, r1
{
   20c84:	4604      	mov	r4, r0
	if (val) {
   20c86:	b162      	cbz	r2, 20ca2 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20c88:	f3bf 8f5b 	dmb	ish
   20c8c:	e854 3f00 	ldrex	r3, [r4]
   20c90:	430b      	orrs	r3, r1
   20c92:	e844 3200 	strex	r2, r3, [r4]
   20c96:	2a00      	cmp	r2, #0
   20c98:	d1f8      	bne.n	20c8c <atomic_set_bit_to+0x10>
   20c9a:	f3bf 8f5b 	dmb	ish
	}
}
   20c9e:	bc10      	pop	{r4}
   20ca0:	4770      	bx	lr
   20ca2:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   20ca4:	43c9      	mvns	r1, r1
   20ca6:	f7ff bf79 	b.w	20b9c <atomic_and>

00020caa <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   20caa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20cae:	b087      	sub	sp, #28
   20cb0:	4605      	mov	r5, r0
   20cb2:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   20cb6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   20cba:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   20cbe:	460c      	mov	r4, r1
   20cc0:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   20cc2:	2100      	movs	r1, #0
   20cc4:	2210      	movs	r2, #16
   20cc6:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   20cc8:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   20cca:	f7ff fc4c 	bl	20566 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   20cce:	b186      	cbz	r6, 20cf2 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   20cd0:	f7f3 ff20 	bl	14b14 <bt_get_name>
   20cd4:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   20cd6:	2c00      	cmp	r4, #0
   20cd8:	d139      	bne.n	20d4e <le_adv_update.constprop.0+0xa4>
   20cda:	2f00      	cmp	r7, #0
   20cdc:	d142      	bne.n	20d64 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   20cde:	4658      	mov	r0, fp
   20ce0:	f7ff fbf1 	bl	204c6 <strlen>
   20ce4:	2309      	movs	r3, #9
   20ce6:	f88d 3000 	strb.w	r3, [sp]
   20cea:	f88d 0001 	strb.w	r0, [sp, #1]
   20cee:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   20cf2:	2e01      	cmp	r6, #1
			d_len = 2;
   20cf4:	bf0c      	ite	eq
   20cf6:	2202      	moveq	r2, #2
		d_len = 1;
   20cf8:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   20cfa:	a902      	add	r1, sp, #8
   20cfc:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   20d00:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   20d04:	bf04      	itt	eq
   20d06:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   20d0a:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   20d0c:	f7ff ff55 	bl	20bba <hci_set_ad>
		if (err) {
   20d10:	4604      	mov	r4, r0
   20d12:	b978      	cbnz	r0, 20d34 <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   20d14:	f1ba 0f00 	cmp.w	sl, #0
   20d18:	d126      	bne.n	20d68 <le_adv_update.constprop.0+0xbe>
   20d1a:	3510      	adds	r5, #16
   20d1c:	f3bf 8f5b 	dmb	ish
   20d20:	e855 3f00 	ldrex	r3, [r5]
   20d24:	f043 0304 	orr.w	r3, r3, #4
   20d28:	e845 3200 	strex	r2, r3, [r5]
   20d2c:	2a00      	cmp	r2, #0
   20d2e:	d1f7      	bne.n	20d20 <le_adv_update.constprop.0+0x76>
   20d30:	f3bf 8f5b 	dmb	ish
}
   20d34:	4620      	mov	r0, r4
   20d36:	b007      	add	sp, #28
   20d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   20d3c:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   20d40:	3a08      	subs	r2, #8
   20d42:	2a01      	cmp	r2, #1
   20d44:	d925      	bls.n	20d92 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   20d46:	3301      	adds	r3, #1
   20d48:	4598      	cmp	r8, r3
   20d4a:	d1f7      	bne.n	20d3c <le_adv_update.constprop.0+0x92>
   20d4c:	e7c5      	b.n	20cda <le_adv_update.constprop.0+0x30>
   20d4e:	2300      	movs	r3, #0
   20d50:	e7fa      	b.n	20d48 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   20d52:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   20d56:	3a08      	subs	r2, #8
   20d58:	2a01      	cmp	r2, #1
   20d5a:	d91a      	bls.n	20d92 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   20d5c:	3301      	adds	r3, #1
   20d5e:	4599      	cmp	r9, r3
   20d60:	d1f7      	bne.n	20d52 <le_adv_update.constprop.0+0xa8>
   20d62:	e7bc      	b.n	20cde <le_adv_update.constprop.0+0x34>
   20d64:	2300      	movs	r3, #0
   20d66:	e7fa      	b.n	20d5e <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   20d68:	2e02      	cmp	r6, #2
   20d6a:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   20d6e:	bf08      	it	eq
   20d70:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   20d72:	a902      	add	r1, sp, #8
			d_len = 2;
   20d74:	bf08      	it	eq
   20d76:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   20d78:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   20d7c:	bf08      	it	eq
   20d7e:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   20d82:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   20d86:	f7ff ff18 	bl	20bba <hci_set_ad>
		if (err) {
   20d8a:	2800      	cmp	r0, #0
   20d8c:	d0c5      	beq.n	20d1a <le_adv_update.constprop.0+0x70>
   20d8e:	4604      	mov	r4, r0
   20d90:	e7d0      	b.n	20d34 <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   20d92:	f06f 0415 	mvn.w	r4, #21
   20d96:	e7cd      	b.n	20d34 <le_adv_update.constprop.0+0x8a>

00020d98 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   20d98:	6843      	ldr	r3, [r0, #4]
   20d9a:	f013 0008 	ands.w	r0, r3, #8
   20d9e:	d00a      	beq.n	20db6 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   20da0:	035a      	lsls	r2, r3, #13
   20da2:	d407      	bmi.n	20db4 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   20da4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   20da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   20dac:	bf0c      	ite	eq
   20dae:	2001      	moveq	r0, #1
   20db0:	2002      	movne	r0, #2
   20db2:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   20db4:	2001      	movs	r0, #1
}
   20db6:	4770      	bx	lr

00020db8 <bt_le_adv_set_enable_legacy>:
{
   20db8:	b570      	push	{r4, r5, r6, lr}
   20dba:	4606      	mov	r6, r0
   20dbc:	b086      	sub	sp, #24
   20dbe:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   20dc0:	f242 000a 	movw	r0, #8202	; 0x200a
   20dc4:	2101      	movs	r1, #1
   20dc6:	f7f3 f933 	bl	14030 <bt_hci_cmd_create>
	if (!buf) {
   20dca:	4604      	mov	r4, r0
   20dcc:	b1b0      	cbz	r0, 20dfc <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   20dce:	3008      	adds	r0, #8
	if (enable) {
   20dd0:	b195      	cbz	r5, 20df8 <bt_le_adv_set_enable_legacy+0x40>
   20dd2:	2101      	movs	r1, #1
   20dd4:	f001 fbf9 	bl	225ca <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   20dd8:	f106 0210 	add.w	r2, r6, #16
   20ddc:	a903      	add	r1, sp, #12
   20dde:	4620      	mov	r0, r4
   20de0:	9500      	str	r5, [sp, #0]
   20de2:	2306      	movs	r3, #6
   20de4:	f7f3 f912 	bl	1400c <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   20de8:	2200      	movs	r2, #0
   20dea:	4621      	mov	r1, r4
   20dec:	f242 000a 	movw	r0, #8202	; 0x200a
   20df0:	f7f3 f958 	bl	140a4 <bt_hci_cmd_send_sync>
}
   20df4:	b006      	add	sp, #24
   20df6:	bd70      	pop	{r4, r5, r6, pc}
   20df8:	4629      	mov	r1, r5
   20dfa:	e7eb      	b.n	20dd4 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   20dfc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20e00:	e7f8      	b.n	20df4 <bt_le_adv_set_enable_legacy+0x3c>

00020e02 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   20e02:	3018      	adds	r0, #24
   20e04:	f002 bb31 	b.w	2346a <k_work_cancel_delayable>

00020e08 <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   20e08:	f7f4 ba46 	b.w	15298 <bt_le_adv_stop>

00020e0c <tx_notify>:
{
   20e0c:	b570      	push	{r4, r5, r6, lr}
   20e0e:	4604      	mov	r4, r0
	__asm__ volatile(
   20e10:	f04f 0240 	mov.w	r2, #64	; 0x40
   20e14:	f3ef 8311 	mrs	r3, BASEPRI
   20e18:	f382 8812 	msr	BASEPRI_MAX, r2
   20e1c:	f3bf 8f6f 	isb	sy
	return list->head;
   20e20:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   20e22:	b920      	cbnz	r0, 20e2e <tx_notify+0x22>
	__asm__ volatile(
   20e24:	f383 8811 	msr	BASEPRI, r3
   20e28:	f3bf 8f6f 	isb	sy
}
   20e2c:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20e2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   20e30:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   20e32:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20e34:	4288      	cmp	r0, r1
	list->tail = node;
   20e36:	bf08      	it	eq
   20e38:	6262      	streq	r2, [r4, #36]	; 0x24
   20e3a:	f383 8811 	msr	BASEPRI, r3
   20e3e:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   20e42:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   20e46:	f7f4 fad5 	bl	153f4 <tx_free>
		cb(conn, user_data);
   20e4a:	4631      	mov	r1, r6
   20e4c:	4620      	mov	r0, r4
   20e4e:	47a8      	blx	r5
	while (1) {
   20e50:	e7de      	b.n	20e10 <tx_notify+0x4>

00020e52 <tx_complete_work>:
	tx_notify(conn);
   20e52:	3828      	subs	r0, #40	; 0x28
   20e54:	f7ff bfda 	b.w	20e0c <tx_notify>

00020e58 <bt_conn_reset_rx_state>:
{
   20e58:	b510      	push	{r4, lr}
   20e5a:	4604      	mov	r4, r0
	if (!conn->rx) {
   20e5c:	6900      	ldr	r0, [r0, #16]
   20e5e:	b118      	cbz	r0, 20e68 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   20e60:	f7f6 fa82 	bl	17368 <net_buf_unref>
	conn->rx = NULL;
   20e64:	2300      	movs	r3, #0
   20e66:	6123      	str	r3, [r4, #16]
}
   20e68:	bd10      	pop	{r4, pc}

00020e6a <conn_cleanup>:
{
   20e6a:	b570      	push	{r4, r5, r6, lr}
   20e6c:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   20e6e:	f100 0638 	add.w	r6, r0, #56	; 0x38
   20e72:	2200      	movs	r2, #0
   20e74:	2300      	movs	r3, #0
   20e76:	4630      	mov	r0, r6
   20e78:	f001 fafe 	bl	22478 <net_buf_get>
   20e7c:	4605      	mov	r5, r0
   20e7e:	b950      	cbnz	r0, 20e96 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   20e80:	4620      	mov	r0, r4
   20e82:	f7ff ffe9 	bl	20e58 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   20e86:	f104 0058 	add.w	r0, r4, #88	; 0x58
   20e8a:	2200      	movs	r2, #0
}
   20e8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   20e90:	2300      	movs	r3, #0
   20e92:	f7fa bb19 	b.w	1b4c8 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   20e96:	6968      	ldr	r0, [r5, #20]
   20e98:	b108      	cbz	r0, 20e9e <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   20e9a:	f7f4 faab 	bl	153f4 <tx_free>
		net_buf_unref(buf);
   20e9e:	4628      	mov	r0, r5
   20ea0:	f7f6 fa62 	bl	17368 <net_buf_unref>
   20ea4:	e7e5      	b.n	20e72 <conn_cleanup+0x8>

00020ea6 <bt_conn_recv>:
{
   20ea6:	b570      	push	{r4, r5, r6, lr}
   20ea8:	4616      	mov	r6, r2
   20eaa:	4604      	mov	r4, r0
   20eac:	460d      	mov	r5, r1
	tx_notify(conn);
   20eae:	f7ff ffad 	bl	20e0c <tx_notify>
	switch (flags) {
   20eb2:	2e01      	cmp	r6, #1
   20eb4:	d017      	beq.n	20ee6 <bt_conn_recv+0x40>
   20eb6:	2e02      	cmp	r6, #2
   20eb8:	d117      	bne.n	20eea <bt_conn_recv+0x44>
		if (conn->rx) {
   20eba:	6923      	ldr	r3, [r4, #16]
   20ebc:	b113      	cbz	r3, 20ec4 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   20ebe:	4620      	mov	r0, r4
   20ec0:	f7ff ffca 	bl	20e58 <bt_conn_reset_rx_state>
		conn->rx = buf;
   20ec4:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   20ec6:	6921      	ldr	r1, [r4, #16]
   20ec8:	898a      	ldrh	r2, [r1, #12]
   20eca:	2a01      	cmp	r2, #1
   20ecc:	d937      	bls.n	20f3e <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   20ece:	688b      	ldr	r3, [r1, #8]
   20ed0:	881b      	ldrh	r3, [r3, #0]
   20ed2:	3304      	adds	r3, #4
   20ed4:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   20ed6:	429a      	cmp	r2, r3
   20ed8:	d331      	bcc.n	20f3e <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   20eda:	d928      	bls.n	20f2e <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   20edc:	4620      	mov	r0, r4
}
   20ede:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   20ee2:	f7ff bfb9 	b.w	20e58 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   20ee6:	6920      	ldr	r0, [r4, #16]
   20ee8:	b918      	cbnz	r0, 20ef2 <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   20eea:	4620      	mov	r0, r4
   20eec:	f7ff ffb4 	bl	20e58 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   20ef0:	e001      	b.n	20ef6 <bt_conn_recv+0x50>
		if (!buf->len) {
   20ef2:	89ae      	ldrh	r6, [r5, #12]
   20ef4:	b926      	cbnz	r6, 20f00 <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   20ef6:	4628      	mov	r0, r5
}
   20ef8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   20efc:	f7f6 ba34 	b.w	17368 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   20f00:	3008      	adds	r0, #8
   20f02:	f001 fb8e 	bl	22622 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   20f06:	4286      	cmp	r6, r0
   20f08:	d907      	bls.n	20f1a <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   20f0a:	6921      	ldr	r1, [r4, #16]
   20f0c:	2200      	movs	r2, #0
   20f0e:	4620      	mov	r0, r4
   20f10:	f000 f9a8 	bl	21264 <bt_l2cap_recv>
			conn->rx = NULL;
   20f14:	2300      	movs	r3, #0
   20f16:	6123      	str	r3, [r4, #16]
   20f18:	e7ed      	b.n	20ef6 <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   20f1a:	6920      	ldr	r0, [r4, #16]
   20f1c:	89aa      	ldrh	r2, [r5, #12]
   20f1e:	68a9      	ldr	r1, [r5, #8]
   20f20:	3008      	adds	r0, #8
   20f22:	f001 fb49 	bl	225b8 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   20f26:	4628      	mov	r0, r5
   20f28:	f7f6 fa1e 	bl	17368 <net_buf_unref>
		break;
   20f2c:	e7cb      	b.n	20ec6 <bt_conn_recv+0x20>
	conn->rx = NULL;
   20f2e:	2300      	movs	r3, #0
   20f30:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   20f32:	4620      	mov	r0, r4
   20f34:	2201      	movs	r2, #1
}
   20f36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   20f3a:	f000 b993 	b.w	21264 <bt_l2cap_recv>
}
   20f3e:	bd70      	pop	{r4, r5, r6, pc}

00020f40 <bt_conn_ref>:
{
   20f40:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   20f42:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20f46:	f3bf 8f5b 	dmb	ish
   20f4a:	6813      	ldr	r3, [r2, #0]
   20f4c:	f3bf 8f5b 	dmb	ish
		if (!old) {
   20f50:	b17b      	cbz	r3, 20f72 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20f52:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   20f56:	1c59      	adds	r1, r3, #1
   20f58:	e852 4f00 	ldrex	r4, [r2]
   20f5c:	429c      	cmp	r4, r3
   20f5e:	d104      	bne.n	20f6a <bt_conn_ref+0x2a>
   20f60:	e842 1c00 	strex	ip, r1, [r2]
   20f64:	f1bc 0f00 	cmp.w	ip, #0
   20f68:	d1f6      	bne.n	20f58 <bt_conn_ref+0x18>
   20f6a:	f3bf 8f5b 	dmb	ish
   20f6e:	d1ea      	bne.n	20f46 <bt_conn_ref+0x6>
}
   20f70:	bd10      	pop	{r4, pc}
			return NULL;
   20f72:	4618      	mov	r0, r3
   20f74:	e7fc      	b.n	20f70 <bt_conn_ref+0x30>

00020f76 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   20f76:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   20f7a:	f3bf 8f5b 	dmb	ish
   20f7e:	e853 2f00 	ldrex	r2, [r3]
   20f82:	3a01      	subs	r2, #1
   20f84:	e843 2100 	strex	r1, r2, [r3]
   20f88:	2900      	cmp	r1, #0
   20f8a:	d1f8      	bne.n	20f7e <bt_conn_unref+0x8>
   20f8c:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   20f90:	7883      	ldrb	r3, [r0, #2]
   20f92:	2b01      	cmp	r3, #1
   20f94:	d108      	bne.n	20fa8 <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20f96:	f3bf 8f5b 	dmb	ish
   20f9a:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   20f9e:	f3bf 8f5b 	dmb	ish
   20fa2:	b90b      	cbnz	r3, 20fa8 <bt_conn_unref+0x32>
		bt_le_adv_resume();
   20fa4:	f7f4 b9c8 	b.w	15338 <bt_le_adv_resume>
}
   20fa8:	4770      	bx	lr

00020faa <conn_lookup_handle>:
{
   20faa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20fae:	4607      	mov	r7, r0
   20fb0:	460e      	mov	r6, r1
   20fb2:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   20fb4:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   20fb6:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   20fba:	42b4      	cmp	r4, r6
   20fbc:	d103      	bne.n	20fc6 <conn_lookup_handle+0x1c>
	return NULL;
   20fbe:	2300      	movs	r3, #0
}
   20fc0:	4618      	mov	r0, r3
   20fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   20fc6:	fb09 7004 	mla	r0, r9, r4, r7
   20fca:	f7ff ffb9 	bl	20f40 <bt_conn_ref>
   20fce:	4603      	mov	r3, r0
		if (!conn) {
   20fd0:	b158      	cbz	r0, 20fea <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   20fd2:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   20fd4:	2d01      	cmp	r5, #1
   20fd6:	d002      	beq.n	20fde <conn_lookup_handle+0x34>
   20fd8:	3d07      	subs	r5, #7
   20fda:	2d01      	cmp	r5, #1
   20fdc:	d803      	bhi.n	20fe6 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   20fde:	881a      	ldrh	r2, [r3, #0]
   20fe0:	4542      	cmp	r2, r8
   20fe2:	d0ed      	beq.n	20fc0 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   20fe4:	4618      	mov	r0, r3
   20fe6:	f7ff ffc6 	bl	20f76 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   20fea:	3401      	adds	r4, #1
   20fec:	e7e5      	b.n	20fba <conn_lookup_handle+0x10>

00020fee <bt_conn_connected>:
{
   20fee:	b510      	push	{r4, lr}
   20ff0:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   20ff2:	f7f4 fe6d 	bl	15cd0 <bt_l2cap_connected>
	notify_connected(conn);
   20ff6:	4620      	mov	r0, r4
}
   20ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   20ffc:	f7f4 b9dc 	b.w	153b8 <notify_connected>

00021000 <bt_conn_get_security>:
}
   21000:	2001      	movs	r0, #1
   21002:	4770      	bx	lr

00021004 <bt_conn_is_peer_addr_le>:
{
   21004:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   21006:	7a03      	ldrb	r3, [r0, #8]
   21008:	428b      	cmp	r3, r1
{
   2100a:	4604      	mov	r4, r0
   2100c:	4615      	mov	r5, r2
	if (id != conn->id) {
   2100e:	d115      	bne.n	2103c <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   21010:	f100 0188 	add.w	r1, r0, #136	; 0x88
   21014:	2207      	movs	r2, #7
   21016:	4628      	mov	r0, r5
   21018:	f7ff fa71 	bl	204fe <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   2101c:	b180      	cbz	r0, 21040 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2101e:	78e3      	ldrb	r3, [r4, #3]
   21020:	2207      	movs	r2, #7
   21022:	b943      	cbnz	r3, 21036 <bt_conn_is_peer_addr_le+0x32>
   21024:	f104 0196 	add.w	r1, r4, #150	; 0x96
   21028:	4628      	mov	r0, r5
   2102a:	f7ff fa68 	bl	204fe <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2102e:	fab0 f080 	clz	r0, r0
   21032:	0940      	lsrs	r0, r0, #5
}
   21034:	bd38      	pop	{r3, r4, r5, pc}
   21036:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   2103a:	e7f5      	b.n	21028 <bt_conn_is_peer_addr_le+0x24>
		return false;
   2103c:	2000      	movs	r0, #0
   2103e:	e7f9      	b.n	21034 <bt_conn_is_peer_addr_le+0x30>
		return true;
   21040:	2001      	movs	r0, #1
   21042:	e7f7      	b.n	21034 <bt_conn_is_peer_addr_le+0x30>

00021044 <bt_conn_exists_le>:
{
   21044:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   21046:	f7f4 fc91 	bl	1596c <bt_conn_lookup_addr_le>
	if (conn) {
   2104a:	b110      	cbz	r0, 21052 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   2104c:	f7ff ff93 	bl	20f76 <bt_conn_unref>
		return true;
   21050:	2001      	movs	r0, #1
}
   21052:	bd08      	pop	{r3, pc}

00021054 <bt_conn_le_conn_update>:
{
   21054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21056:	4607      	mov	r7, r0
   21058:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2105a:	f242 0013 	movw	r0, #8211	; 0x2013
   2105e:	210e      	movs	r1, #14
   21060:	f7f2 ffe6 	bl	14030 <bt_hci_cmd_create>
	if (!buf) {
   21064:	4606      	mov	r6, r0
   21066:	b1d0      	cbz	r0, 2109e <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   21068:	210e      	movs	r1, #14
   2106a:	3008      	adds	r0, #8
   2106c:	f001 fa9e 	bl	225ac <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   21070:	220e      	movs	r2, #14
   21072:	4604      	mov	r4, r0
   21074:	2100      	movs	r1, #0
   21076:	f7ff fa76 	bl	20566 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2107a:	883b      	ldrh	r3, [r7, #0]
   2107c:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2107e:	882b      	ldrh	r3, [r5, #0]
   21080:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   21082:	886b      	ldrh	r3, [r5, #2]
   21084:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   21086:	88ab      	ldrh	r3, [r5, #4]
   21088:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2108a:	88eb      	ldrh	r3, [r5, #6]
   2108c:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2108e:	4631      	mov	r1, r6
   21090:	2200      	movs	r2, #0
}
   21092:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   21096:	f242 0013 	movw	r0, #8211	; 0x2013
   2109a:	f7f3 b803 	b.w	140a4 <bt_hci_cmd_send_sync>
}
   2109e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   210a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000210a4 <bt_conn_le_param_update>:
{
   210a4:	b410      	push	{r4}
	if (conn->le.interval >= param->interval_min &&
   210a6:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   210aa:	880c      	ldrh	r4, [r1, #0]
   210ac:	429c      	cmp	r4, r3
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
   210ae:	f100 0204 	add.w	r2, r0, #4
	if (conn->le.interval >= param->interval_min &&
   210b2:	d81c      	bhi.n	210ee <bt_conn_le_param_update+0x4a>
   210b4:	884c      	ldrh	r4, [r1, #2]
   210b6:	429c      	cmp	r4, r3
   210b8:	d319      	bcc.n	210ee <bt_conn_le_param_update+0x4a>
	    conn->le.interval <= param->interval_max &&
   210ba:	f8b0 40a4 	ldrh.w	r4, [r0, #164]	; 0xa4
   210be:	888b      	ldrh	r3, [r1, #4]
   210c0:	429c      	cmp	r4, r3
   210c2:	d114      	bne.n	210ee <bt_conn_le_param_update+0x4a>
	    conn->le.latency == param->latency &&
   210c4:	f8b0 40a6 	ldrh.w	r4, [r0, #166]	; 0xa6
   210c8:	88cb      	ldrh	r3, [r1, #6]
   210ca:	429c      	cmp	r4, r3
   210cc:	d10f      	bne.n	210ee <bt_conn_le_param_update+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   210ce:	f3bf 8f5b 	dmb	ish
   210d2:	e852 3f00 	ldrex	r3, [r2]
   210d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   210da:	e842 3100 	strex	r1, r3, [r2]
   210de:	2900      	cmp	r1, #0
   210e0:	d1f7      	bne.n	210d2 <bt_conn_le_param_update+0x2e>
   210e2:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
   210e6:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   210ea:	bc10      	pop	{r4}
   210ec:	4770      	bx	lr
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   210ee:	f3bf 8f5b 	dmb	ish
   210f2:	6844      	ldr	r4, [r0, #4]
   210f4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_UPDATE)) {
   210f8:	f3c4 13c0 	ubfx	r3, r4, #7, #1
   210fc:	0624      	lsls	r4, r4, #24
   210fe:	d502      	bpl.n	21106 <bt_conn_le_param_update+0x62>
}
   21100:	bc10      	pop	{r4}
			return send_conn_le_param_update(conn, param);
   21102:	f7f4 bc73 	b.w	159ec <send_conn_le_param_update>
		conn->le.interval_min = param->interval_min;
   21106:	880c      	ldrh	r4, [r1, #0]
   21108:	f8a0 40a0 	strh.w	r4, [r0, #160]	; 0xa0
		conn->le.interval_max = param->interval_max;
   2110c:	884c      	ldrh	r4, [r1, #2]
   2110e:	f8a0 40a2 	strh.w	r4, [r0, #162]	; 0xa2
		conn->le.pending_latency = param->latency;
   21112:	888c      	ldrh	r4, [r1, #4]
		conn->le.pending_timeout = param->timeout;
   21114:	88c9      	ldrh	r1, [r1, #6]
		conn->le.pending_latency = param->latency;
   21116:	f8a0 40a8 	strh.w	r4, [r0, #168]	; 0xa8
		conn->le.pending_timeout = param->timeout;
   2111a:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2111e:	f3bf 8f5b 	dmb	ish
   21122:	e852 1f00 	ldrex	r1, [r2]
   21126:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   2112a:	e842 1000 	strex	r0, r1, [r2]
   2112e:	2800      	cmp	r0, #0
   21130:	d1f7      	bne.n	21122 <bt_conn_le_param_update+0x7e>
   21132:	f3bf 8f5b 	dmb	ish
	return 0;
   21136:	4618      	mov	r0, r3
   21138:	e7d7      	b.n	210ea <bt_conn_le_param_update+0x46>

0002113a <l2cap_connected>:
}
   2113a:	4770      	bx	lr

0002113c <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   2113c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2113e:	4607      	mov	r7, r0
   21140:	460e      	mov	r6, r1
   21142:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   21144:	2300      	movs	r3, #0
   21146:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2114a:	2104      	movs	r1, #4
   2114c:	2000      	movs	r0, #0
   2114e:	f7f4 fb53 	bl	157f8 <bt_conn_create_pdu_timeout>
	if (!buf) {
   21152:	4604      	mov	r4, r0
   21154:	b130      	cbz	r0, 21164 <l2cap_create_le_sig_pdu.constprop.0+0x28>
   21156:	2104      	movs	r1, #4
   21158:	3008      	adds	r0, #8
   2115a:	f001 fa27 	bl	225ac <net_buf_simple_add>
	hdr->code = code;
   2115e:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   21160:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   21162:	8045      	strh	r5, [r0, #2]
}
   21164:	4620      	mov	r0, r4
   21166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021168 <l2cap_disconnected>:
   21168:	4770      	bx	lr

0002116a <bt_l2cap_chan_del>:
{
   2116a:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2116c:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   21170:	4604      	mov	r4, r0
	if (!chan->conn) {
   21172:	b123      	cbz	r3, 2117e <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   21174:	686b      	ldr	r3, [r5, #4]
   21176:	b103      	cbz	r3, 2117a <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   21178:	4798      	blx	r3
	chan->conn = NULL;
   2117a:	2300      	movs	r3, #0
   2117c:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2117e:	68e3      	ldr	r3, [r4, #12]
   21180:	b10b      	cbz	r3, 21186 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   21182:	4620      	mov	r0, r4
   21184:	4798      	blx	r3
	if (ops->released) {
   21186:	69eb      	ldr	r3, [r5, #28]
   21188:	b11b      	cbz	r3, 21192 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2118a:	4620      	mov	r0, r4
}
   2118c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   21190:	4718      	bx	r3
}
   21192:	bd70      	pop	{r4, r5, r6, pc}

00021194 <bt_l2cap_disconnected>:
	return list->head;
   21194:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   21196:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   21198:	b160      	cbz	r0, 211b4 <bt_l2cap_disconnected+0x20>
	return node->next;
   2119a:	f850 4908 	ldr.w	r4, [r0], #-8
   2119e:	b104      	cbz	r4, 211a2 <bt_l2cap_disconnected+0xe>
   211a0:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   211a2:	f7ff ffe2 	bl	2116a <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   211a6:	b12c      	cbz	r4, 211b4 <bt_l2cap_disconnected+0x20>
   211a8:	68a3      	ldr	r3, [r4, #8]
   211aa:	b103      	cbz	r3, 211ae <bt_l2cap_disconnected+0x1a>
   211ac:	3b08      	subs	r3, #8
{
   211ae:	4620      	mov	r0, r4
   211b0:	461c      	mov	r4, r3
   211b2:	e7f6      	b.n	211a2 <bt_l2cap_disconnected+0xe>
}
   211b4:	bd10      	pop	{r4, pc}

000211b6 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   211b6:	3104      	adds	r1, #4
   211b8:	f7f4 bb1e 	b.w	157f8 <bt_conn_create_pdu_timeout>

000211bc <bt_l2cap_send_cb>:
{
   211bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   211c0:	4614      	mov	r4, r2
   211c2:	4605      	mov	r5, r0
   211c4:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   211c6:	f102 0008 	add.w	r0, r2, #8
   211ca:	2104      	movs	r1, #4
   211cc:	461e      	mov	r6, r3
   211ce:	f8dd 8018 	ldr.w	r8, [sp, #24]
   211d2:	f001 fa02 	bl	225da <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   211d6:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   211d8:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   211da:	3a04      	subs	r2, #4
   211dc:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   211de:	4643      	mov	r3, r8
   211e0:	4632      	mov	r2, r6
   211e2:	4621      	mov	r1, r4
   211e4:	4628      	mov	r0, r5
}
   211e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   211ea:	f7f4 b9cd 	b.w	15588 <bt_conn_send_cb>

000211ee <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   211ee:	898b      	ldrh	r3, [r1, #12]
   211f0:	2b03      	cmp	r3, #3
{
   211f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   211f4:	4605      	mov	r5, r0
   211f6:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   211f8:	d927      	bls.n	2124a <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   211fa:	2104      	movs	r1, #4
   211fc:	f104 0008 	add.w	r0, r4, #8
   21200:	f001 f9fb 	bl	225fa <net_buf_simple_pull_mem>
	if (buf->len != len) {
   21204:	89a3      	ldrh	r3, [r4, #12]
   21206:	8842      	ldrh	r2, [r0, #2]
   21208:	429a      	cmp	r2, r3
   2120a:	d11e      	bne.n	2124a <l2cap_recv+0x5c>
	if (!hdr->ident) {
   2120c:	7841      	ldrb	r1, [r0, #1]
   2120e:	b1e1      	cbz	r1, 2124a <l2cap_recv+0x5c>
	switch (hdr->code) {
   21210:	7803      	ldrb	r3, [r0, #0]
   21212:	2b01      	cmp	r3, #1
   21214:	d019      	beq.n	2124a <l2cap_recv+0x5c>
   21216:	2b13      	cmp	r3, #19
   21218:	d017      	beq.n	2124a <l2cap_recv+0x5c>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2121a:	2202      	movs	r2, #2
   2121c:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   2121e:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   21220:	f7ff ff8c 	bl	2113c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   21224:	4604      	mov	r4, r0
   21226:	b180      	cbz	r0, 2124a <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   21228:	2102      	movs	r1, #2
   2122a:	3008      	adds	r0, #8
   2122c:	f001 f9be 	bl	225ac <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   21230:	2300      	movs	r3, #0
   21232:	7003      	strb	r3, [r0, #0]
   21234:	7043      	strb	r3, [r0, #1]
   21236:	4622      	mov	r2, r4
   21238:	9300      	str	r3, [sp, #0]
   2123a:	2105      	movs	r1, #5
   2123c:	4628      	mov	r0, r5
   2123e:	f7ff ffbd 	bl	211bc <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   21242:	b110      	cbz	r0, 2124a <l2cap_recv+0x5c>
		net_buf_unref(buf);
   21244:	4620      	mov	r0, r4
   21246:	f7f6 f88f 	bl	17368 <net_buf_unref>
}
   2124a:	2000      	movs	r0, #0
   2124c:	b003      	add	sp, #12
   2124e:	bd30      	pop	{r4, r5, pc}

00021250 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   21250:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21252:	b130      	cbz	r0, 21262 <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   21254:	8983      	ldrh	r3, [r0, #12]
   21256:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21258:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2125c:	d001      	beq.n	21262 <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   2125e:	6880      	ldr	r0, [r0, #8]
   21260:	e7f7      	b.n	21252 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   21262:	4770      	bx	lr

00021264 <bt_l2cap_recv>:
{
   21264:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   21266:	898b      	ldrh	r3, [r1, #12]
   21268:	2b03      	cmp	r3, #3
{
   2126a:	4605      	mov	r5, r0
   2126c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   2126e:	d804      	bhi.n	2127a <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   21270:	4620      	mov	r0, r4
}
   21272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   21276:	f7f6 b877 	b.w	17368 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   2127a:	2104      	movs	r1, #4
   2127c:	f104 0008 	add.w	r0, r4, #8
   21280:	f001 f9bb 	bl	225fa <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   21284:	8841      	ldrh	r1, [r0, #2]
   21286:	4628      	mov	r0, r5
   21288:	f7ff ffe2 	bl	21250 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   2128c:	2800      	cmp	r0, #0
   2128e:	d0ef      	beq.n	21270 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   21290:	6843      	ldr	r3, [r0, #4]
   21292:	4621      	mov	r1, r4
   21294:	691b      	ldr	r3, [r3, #16]
   21296:	4798      	blx	r3
   21298:	e7ea      	b.n	21270 <bt_l2cap_recv+0xc>

0002129a <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   2129a:	4770      	bx	lr

0002129c <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2129c:	4603      	mov	r3, r0
	return list->head;
   2129e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   212a0:	b128      	cbz	r0, 212ae <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   212a2:	6859      	ldr	r1, [r3, #4]
	return node->next;
   212a4:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   212a6:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   212a8:	4288      	cmp	r0, r1
	list->tail = node;
   212aa:	bf08      	it	eq
   212ac:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   212ae:	4770      	bx	lr

000212b0 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   212b0:	4603      	mov	r3, r0
	size_t bytes = 0;
   212b2:	2000      	movs	r0, #0

	while (buf) {
   212b4:	b903      	cbnz	r3, 212b8 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   212b6:	4770      	bx	lr
		bytes += buf->len;
   212b8:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   212ba:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   212bc:	4410      	add	r0, r2
		buf = buf->frags;
   212be:	e7f9      	b.n	212b4 <net_buf_frags_len+0x4>

000212c0 <att_sent>:
	if (chan->ops->sent) {
   212c0:	684b      	ldr	r3, [r1, #4]
   212c2:	695b      	ldr	r3, [r3, #20]
{
   212c4:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   212c6:	b103      	cbz	r3, 212ca <att_sent+0xa>
		chan->ops->sent(chan);
   212c8:	4718      	bx	r3
}
   212ca:	4770      	bx	lr

000212cc <attr_read_type_cb>:
{
   212cc:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   212ce:	68d4      	ldr	r4, [r2, #12]
   212d0:	7823      	ldrb	r3, [r4, #0]
   212d2:	3102      	adds	r1, #2
   212d4:	b913      	cbnz	r3, 212dc <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   212d6:	7021      	strb	r1, [r4, #0]
	return true;
   212d8:	2001      	movs	r0, #1
   212da:	e006      	b.n	212ea <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   212dc:	428b      	cmp	r3, r1
   212de:	d0fb      	beq.n	212d8 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   212e0:	8983      	ldrh	r3, [r0, #12]
   212e2:	3b02      	subs	r3, #2
   212e4:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   212e6:	2000      	movs	r0, #0
   212e8:	6110      	str	r0, [r2, #16]
}
   212ea:	bd10      	pop	{r4, pc}

000212ec <att_prepare_write_req>:
}
   212ec:	2006      	movs	r0, #6
   212ee:	4770      	bx	lr

000212f0 <att_op_get_type>:
	switch (op) {
   212f0:	2852      	cmp	r0, #82	; 0x52
   212f2:	d830      	bhi.n	21356 <att_op_get_type+0x66>
   212f4:	b388      	cbz	r0, 2135a <att_op_get_type+0x6a>
   212f6:	1e43      	subs	r3, r0, #1
   212f8:	2b51      	cmp	r3, #81	; 0x51
   212fa:	d82e      	bhi.n	2135a <att_op_get_type+0x6a>
   212fc:	e8df f003 	tbb	[pc, r3]
   21300:	39333933 	.word	0x39333933
   21304:	39333933 	.word	0x39333933
   21308:	39333933 	.word	0x39333933
   2130c:	39333933 	.word	0x39333933
   21310:	2d333933 	.word	0x2d333933
   21314:	3933392d 	.word	0x3933392d
   21318:	2d352d33 	.word	0x2d352d33
   2131c:	392d2937 	.word	0x392d2937
   21320:	2d352d33 	.word	0x2d352d33
   21324:	2d2d2d2d 	.word	0x2d2d2d2d
   21328:	2d2d2d2d 	.word	0x2d2d2d2d
   2132c:	2d2d2d2d 	.word	0x2d2d2d2d
   21330:	2d2d2d2d 	.word	0x2d2d2d2d
   21334:	2d2d2d2d 	.word	0x2d2d2d2d
   21338:	2d2d2d2d 	.word	0x2d2d2d2d
   2133c:	2d2d2d2d 	.word	0x2d2d2d2d
   21340:	2d2d2d2d 	.word	0x2d2d2d2d
   21344:	2d2d2d2d 	.word	0x2d2d2d2d
   21348:	2d2d2d2d 	.word	0x2d2d2d2d
   2134c:	2d2d2d2d 	.word	0x2d2d2d2d
   21350:	3b2d      	.short	0x3b2d
   21352:	2004      	movs	r0, #4
   21354:	4770      	bx	lr
   21356:	28d2      	cmp	r0, #210	; 0xd2
   21358:	d00d      	beq.n	21376 <att_op_get_type+0x86>
		return ATT_COMMAND;
   2135a:	f010 0f40 	tst.w	r0, #64	; 0x40
   2135e:	bf0c      	ite	eq
   21360:	2006      	moveq	r0, #6
   21362:	2000      	movne	r0, #0
   21364:	4770      	bx	lr
		return ATT_RESPONSE;
   21366:	2002      	movs	r0, #2
   21368:	4770      	bx	lr
		return ATT_NOTIFICATION;
   2136a:	2003      	movs	r0, #3
   2136c:	4770      	bx	lr
		return ATT_INDICATION;
   2136e:	2005      	movs	r0, #5
   21370:	4770      	bx	lr
		return ATT_REQUEST;
   21372:	2001      	movs	r0, #1
   21374:	4770      	bx	lr
		return ATT_COMMAND;
   21376:	2000      	movs	r0, #0
}
   21378:	4770      	bx	lr

0002137a <bt_gatt_foreach_attr>:
{
   2137a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2137c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   21380:	2300      	movs	r3, #0
   21382:	9300      	str	r3, [sp, #0]
   21384:	461a      	mov	r2, r3
   21386:	f7f5 fbcb 	bl	16b20 <bt_gatt_foreach_attr_type>
}
   2138a:	b005      	add	sp, #20
   2138c:	f85d fb04 	ldr.w	pc, [sp], #4

00021390 <find_type_cb>:
{
   21390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   21394:	f8d2 9000 	ldr.w	r9, [r2]
{
   21398:	b091      	sub	sp, #68	; 0x44
   2139a:	4607      	mov	r7, r0
   2139c:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2139e:	2500      	movs	r5, #0
   213a0:	f642 0301 	movw	r3, #10241	; 0x2801
   213a4:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   213a6:	f8d9 8004 	ldr.w	r8, [r9, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   213aa:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   213ae:	a90b      	add	r1, sp, #44	; 0x2c
{
   213b0:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   213b2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   213b6:	f7ff f8f4 	bl	205a2 <bt_uuid_cmp>
   213ba:	2800      	cmp	r0, #0
   213bc:	d079      	beq.n	214b2 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   213be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   213c2:	6838      	ldr	r0, [r7, #0]
   213c4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   213c8:	a90b      	add	r1, sp, #44	; 0x2c
   213ca:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   213ce:	f7ff f8e8 	bl	205a2 <bt_uuid_cmp>
   213d2:	b138      	cbz	r0, 213e4 <find_type_cb+0x54>
		if (data->group &&
   213d4:	68a3      	ldr	r3, [r4, #8]
   213d6:	b11b      	cbz	r3, 213e0 <find_type_cb+0x50>
   213d8:	885a      	ldrh	r2, [r3, #2]
   213da:	42b2      	cmp	r2, r6
   213dc:	d200      	bcs.n	213e0 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   213de:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   213e0:	2001      	movs	r0, #1
   213e2:	e009      	b.n	213f8 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   213e4:	6861      	ldr	r1, [r4, #4]
   213e6:	4608      	mov	r0, r1
   213e8:	f7ff ff62 	bl	212b0 <net_buf_frags_len>
   213ec:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   213f0:	1a1b      	subs	r3, r3, r0
   213f2:	2b03      	cmp	r3, #3
   213f4:	d803      	bhi.n	213fe <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   213f6:	2000      	movs	r0, #0
}
   213f8:	b011      	add	sp, #68	; 0x44
   213fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   213fe:	4608      	mov	r0, r1
   21400:	f001 f8b2 	bl	22568 <net_buf_frag_last>
   21404:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   21406:	6860      	ldr	r0, [r4, #4]
   21408:	f7ff ff52 	bl	212b0 <net_buf_frags_len>
   2140c:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   21410:	f105 0b08 	add.w	fp, r5, #8
   21414:	ebaa 0a00 	sub.w	sl, sl, r0
   21418:	4658      	mov	r0, fp
   2141a:	f001 f902 	bl	22622 <net_buf_simple_tailroom>
   2141e:	4582      	cmp	sl, r0
   21420:	d23f      	bcs.n	214a2 <find_type_cb+0x112>
   21422:	6860      	ldr	r0, [r4, #4]
   21424:	f7ff ff44 	bl	212b0 <net_buf_frags_len>
   21428:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   2142c:	1a18      	subs	r0, r3, r0
	if (!len) {
   2142e:	b970      	cbnz	r0, 2144e <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   21430:	6863      	ldr	r3, [r4, #4]
   21432:	7998      	ldrb	r0, [r3, #6]
   21434:	f7f5 fed4 	bl	171e0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   21438:	2200      	movs	r2, #0
   2143a:	2300      	movs	r3, #0
   2143c:	f001 f817 	bl	2246e <net_buf_alloc_fixed>
		if (!frag) {
   21440:	4605      	mov	r5, r0
   21442:	2800      	cmp	r0, #0
   21444:	d0d7      	beq.n	213f6 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   21446:	4601      	mov	r1, r0
   21448:	6860      	ldr	r0, [r4, #4]
   2144a:	f001 f89e 	bl	2258a <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   2144e:	2300      	movs	r3, #0
   21450:	9300      	str	r3, [sp, #0]
   21452:	f8d7 9004 	ldr.w	r9, [r7, #4]
   21456:	4639      	mov	r1, r7
   21458:	2310      	movs	r3, #16
   2145a:	aa02      	add	r2, sp, #8
   2145c:	4640      	mov	r0, r8
   2145e:	47c8      	blx	r9
	if (read < 0) {
   21460:	1e07      	subs	r7, r0, #0
   21462:	db26      	blt.n	214b2 <find_type_cb+0x122>
	if (read != data->value_len) {
   21464:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   21466:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   21468:	42ba      	cmp	r2, r7
   2146a:	d01e      	beq.n	214aa <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   2146c:	4601      	mov	r1, r0
   2146e:	a80b      	add	r0, sp, #44	; 0x2c
   21470:	f7ff f8c5 	bl	205fe <bt_uuid_create>
   21474:	b1e8      	cbz	r0, 214b2 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   21476:	b2fa      	uxtb	r2, r7
   21478:	a902      	add	r1, sp, #8
   2147a:	a806      	add	r0, sp, #24
   2147c:	f7ff f8bf 	bl	205fe <bt_uuid_create>
   21480:	b1b8      	cbz	r0, 214b2 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   21482:	a906      	add	r1, sp, #24
   21484:	a80b      	add	r0, sp, #44	; 0x2c
   21486:	f7ff f88c 	bl	205a2 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   2148a:	b990      	cbnz	r0, 214b2 <find_type_cb+0x122>
	data->err = 0x00;
   2148c:	2300      	movs	r3, #0
   2148e:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   21490:	2104      	movs	r1, #4
   21492:	f105 0008 	add.w	r0, r5, #8
   21496:	f001 f889 	bl	225ac <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   2149a:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   2149c:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   2149e:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   214a0:	e79e      	b.n	213e0 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   214a2:	4658      	mov	r0, fp
   214a4:	f001 f8bd 	bl	22622 <net_buf_simple_tailroom>
   214a8:	e7c1      	b.n	2142e <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   214aa:	a902      	add	r1, sp, #8
   214ac:	f7ff f827 	bl	204fe <memcmp>
   214b0:	e7eb      	b.n	2148a <find_type_cb+0xfa>
	data->group = NULL;
   214b2:	2300      	movs	r3, #0
   214b4:	60a3      	str	r3, [r4, #8]
   214b6:	e793      	b.n	213e0 <find_type_cb+0x50>

000214b8 <find_info_cb>:
{
   214b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   214ba:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   214bc:	6817      	ldr	r7, [r2, #0]
{
   214be:	4605      	mov	r5, r0
   214c0:	460e      	mov	r6, r1
   214c2:	4614      	mov	r4, r2
	if (!data->rsp) {
   214c4:	b963      	cbnz	r3, 214e0 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   214c6:	6850      	ldr	r0, [r2, #4]
   214c8:	2101      	movs	r1, #1
   214ca:	3008      	adds	r0, #8
   214cc:	f001 f86e 	bl	225ac <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   214d0:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   214d2:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   214d4:	781b      	ldrb	r3, [r3, #0]
   214d6:	2b00      	cmp	r3, #0
   214d8:	bf0c      	ite	eq
   214da:	2301      	moveq	r3, #1
   214dc:	2302      	movne	r3, #2
   214de:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   214e0:	68a3      	ldr	r3, [r4, #8]
   214e2:	781b      	ldrb	r3, [r3, #0]
   214e4:	2b01      	cmp	r3, #1
   214e6:	d003      	beq.n	214f0 <find_info_cb+0x38>
   214e8:	2b02      	cmp	r3, #2
   214ea:	d018      	beq.n	2151e <find_info_cb+0x66>
			return BT_GATT_ITER_STOP;
   214ec:	2000      	movs	r0, #0
   214ee:	e015      	b.n	2151c <find_info_cb+0x64>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   214f0:	682b      	ldr	r3, [r5, #0]
   214f2:	781b      	ldrb	r3, [r3, #0]
   214f4:	2b00      	cmp	r3, #0
   214f6:	d1f9      	bne.n	214ec <find_info_cb+0x34>
   214f8:	6860      	ldr	r0, [r4, #4]
   214fa:	2104      	movs	r1, #4
   214fc:	3008      	adds	r0, #8
   214fe:	f001 f855 	bl	225ac <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   21502:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   21504:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   21506:	885b      	ldrh	r3, [r3, #2]
   21508:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2150a:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   2150c:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   2150e:	899b      	ldrh	r3, [r3, #12]
   21510:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   21512:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   21514:	2804      	cmp	r0, #4
   21516:	bf94      	ite	ls
   21518:	2000      	movls	r0, #0
   2151a:	2001      	movhi	r0, #1
}
   2151c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2151e:	682b      	ldr	r3, [r5, #0]
   21520:	781b      	ldrb	r3, [r3, #0]
   21522:	2b02      	cmp	r3, #2
   21524:	d1e2      	bne.n	214ec <find_info_cb+0x34>
   21526:	6860      	ldr	r0, [r4, #4]
   21528:	2112      	movs	r1, #18
   2152a:	3008      	adds	r0, #8
   2152c:	f001 f83e 	bl	225ac <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   21530:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   21532:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   21534:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   21536:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2153a:	3101      	adds	r1, #1
   2153c:	f7ff f808 	bl	20550 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   21540:	6863      	ldr	r3, [r4, #4]
   21542:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   21544:	899b      	ldrh	r3, [r3, #12]
   21546:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   21548:	2812      	cmp	r0, #18
   2154a:	e7e4      	b.n	21516 <find_info_cb+0x5e>

0002154c <att_chan_mtu_updated>:
{
   2154c:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2154e:	6806      	ldr	r6, [r0, #0]
	return list->head;
   21550:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21552:	b1c3      	cbz	r3, 21586 <att_chan_mtu_updated+0x3a>
   21554:	461a      	mov	r2, r3
	return node->next;
   21556:	f852 49e4 	ldr.w	r4, [r2], #-228
   2155a:	b104      	cbz	r4, 2155e <att_chan_mtu_updated+0x12>
   2155c:	3ce4      	subs	r4, #228	; 0xe4
{
   2155e:	2300      	movs	r3, #0
   21560:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   21562:	4290      	cmp	r0, r2
   21564:	d007      	beq.n	21576 <att_chan_mtu_updated+0x2a>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   21566:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   21568:	8b52      	ldrh	r2, [r2, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2156a:	42a9      	cmp	r1, r5
   2156c:	bf38      	it	cc
   2156e:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   21570:	4293      	cmp	r3, r2
   21572:	bf38      	it	cc
   21574:	4613      	movcc	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21576:	b13c      	cbz	r4, 21588 <att_chan_mtu_updated+0x3c>
   21578:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
   2157c:	b105      	cbz	r5, 21580 <att_chan_mtu_updated+0x34>
   2157e:	3de4      	subs	r5, #228	; 0xe4
{
   21580:	4622      	mov	r2, r4
   21582:	462c      	mov	r4, r5
   21584:	e7ed      	b.n	21562 <att_chan_mtu_updated+0x16>
   21586:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   21588:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2158a:	8b42      	ldrh	r2, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2158c:	428c      	cmp	r4, r1
   2158e:	d801      	bhi.n	21594 <att_chan_mtu_updated+0x48>
   21590:	429a      	cmp	r2, r3
   21592:	d909      	bls.n	215a8 <att_chan_mtu_updated+0x5c>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   21594:	429a      	cmp	r2, r3
   21596:	bf38      	it	cc
   21598:	461a      	movcc	r2, r3
   2159a:	42a1      	cmp	r1, r4
   2159c:	6830      	ldr	r0, [r6, #0]
   2159e:	bf38      	it	cc
   215a0:	4621      	movcc	r1, r4
}
   215a2:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   215a4:	f7f5 bdd6 	b.w	17154 <bt_gatt_att_max_mtu_changed>
}
   215a8:	bc70      	pop	{r4, r5, r6}
   215aa:	4770      	bx	lr

000215ac <attr_read_group_cb>:
	if (!data->rsp->len) {
   215ac:	68d0      	ldr	r0, [r2, #12]
   215ae:	7803      	ldrb	r3, [r0, #0]
   215b0:	3104      	adds	r1, #4
   215b2:	b913      	cbnz	r3, 215ba <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   215b4:	7001      	strb	r1, [r0, #0]
	return true;
   215b6:	2001      	movs	r0, #1
}
   215b8:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   215ba:	428b      	cmp	r3, r1
   215bc:	d0fb      	beq.n	215b6 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   215be:	6891      	ldr	r1, [r2, #8]
   215c0:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   215c2:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   215c4:	3b04      	subs	r3, #4
   215c6:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   215c8:	6110      	str	r0, [r2, #16]
		return false;
   215ca:	4770      	bx	lr

000215cc <att_get>:
{
   215cc:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   215ce:	7a83      	ldrb	r3, [r0, #10]
   215d0:	2b07      	cmp	r3, #7
   215d2:	d001      	beq.n	215d8 <att_get+0xc>
		return NULL;
   215d4:	2000      	movs	r0, #0
}
   215d6:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   215d8:	2104      	movs	r1, #4
   215da:	f7ff fe39 	bl	21250 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   215de:	2800      	cmp	r0, #0
   215e0:	d0f8      	beq.n	215d4 <att_get+0x8>
	return att_chan->att;
   215e2:	f850 0c04 	ldr.w	r0, [r0, #-4]
   215e6:	e7f6      	b.n	215d6 <att_get+0xa>

000215e8 <chan_req_sent>:
	if (chan->req) {
   215e8:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   215ec:	b12b      	cbz	r3, 215fa <chan_req_sent+0x12>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   215ee:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   215f2:	2300      	movs	r3, #0
   215f4:	30b0      	adds	r0, #176	; 0xb0
   215f6:	f7f9 bf67 	b.w	1b4c8 <k_work_reschedule>
}
   215fa:	4770      	bx	lr

000215fc <write_cb>:
{
   215fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   215fe:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   21600:	4601      	mov	r1, r0
{
   21602:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   21604:	222a      	movs	r2, #42	; 0x2a
   21606:	6820      	ldr	r0, [r4, #0]
   21608:	f000 fe62 	bl	222d0 <bt_gatt_check_perm>
   2160c:	4605      	mov	r5, r0
   2160e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   21610:	bb20      	cbnz	r0, 2165c <write_cb+0x60>
	if (!data->req) {
   21612:	7a23      	ldrb	r3, [r4, #8]
   21614:	b1ab      	cbz	r3, 21642 <write_cb+0x46>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   21616:	2b18      	cmp	r3, #24
   21618:	bf14      	ite	ne
   2161a:	2300      	movne	r3, #0
   2161c:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   2161e:	9301      	str	r3, [sp, #4]
   21620:	8a63      	ldrh	r3, [r4, #18]
   21622:	9300      	str	r3, [sp, #0]
   21624:	68b7      	ldr	r7, [r6, #8]
   21626:	8a23      	ldrh	r3, [r4, #16]
   21628:	68e2      	ldr	r2, [r4, #12]
   2162a:	6820      	ldr	r0, [r4, #0]
   2162c:	4631      	mov	r1, r6
   2162e:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   21630:	1e03      	subs	r3, r0, #0
   21632:	db08      	blt.n	21646 <write_cb+0x4a>
   21634:	8a22      	ldrh	r2, [r4, #16]
   21636:	4293      	cmp	r3, r2
   21638:	d10e      	bne.n	21658 <write_cb+0x5c>
	data->err = 0U;
   2163a:	2300      	movs	r3, #0
   2163c:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2163e:	2501      	movs	r5, #1
   21640:	e007      	b.n	21652 <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   21642:	2302      	movs	r3, #2
   21644:	e7eb      	b.n	2161e <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   21646:	f113 0fff 	cmn.w	r3, #255	; 0xff
   2164a:	d305      	bcc.n	21658 <write_cb+0x5c>
		return -err;
   2164c:	425b      	negs	r3, r3
   2164e:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   21650:	7523      	strb	r3, [r4, #20]
}
   21652:	4628      	mov	r0, r5
   21654:	b003      	add	sp, #12
   21656:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   21658:	230e      	movs	r3, #14
   2165a:	e7f9      	b.n	21650 <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   2165c:	2500      	movs	r5, #0
   2165e:	e7f8      	b.n	21652 <write_cb+0x56>

00021660 <att_chan_read>:
{
   21660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21664:	4680      	mov	r8, r0
   21666:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   21668:	4610      	mov	r0, r2
{
   2166a:	4699      	mov	r9, r3
   2166c:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2166e:	f7ff fe1f 	bl	212b0 <net_buf_frags_len>
   21672:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   21676:	4283      	cmp	r3, r0
{
   21678:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2167a:	d97a      	bls.n	21772 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2167c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   21680:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   21682:	4630      	mov	r0, r6
   21684:	f000 ff70 	bl	22568 <net_buf_frag_last>
	size_t len, total = 0;
   21688:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2168c:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2168e:	4630      	mov	r0, r6
   21690:	f7ff fe0e 	bl	212b0 <net_buf_frags_len>
   21694:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   21698:	f105 0708 	add.w	r7, r5, #8
   2169c:	1a24      	subs	r4, r4, r0
   2169e:	4638      	mov	r0, r7
   216a0:	f000 ffbf 	bl	22622 <net_buf_simple_tailroom>
   216a4:	4284      	cmp	r4, r0
   216a6:	d211      	bcs.n	216cc <att_chan_read+0x6c>
   216a8:	4630      	mov	r0, r6
   216aa:	f7ff fe01 	bl	212b0 <net_buf_frags_len>
   216ae:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   216b2:	1a24      	subs	r4, r4, r0
		if (!len) {
   216b4:	bb34      	cbnz	r4, 21704 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   216b6:	79b0      	ldrb	r0, [r6, #6]
   216b8:	f7f5 fd92 	bl	171e0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   216bc:	2200      	movs	r2, #0
   216be:	2300      	movs	r3, #0
   216c0:	f000 fed5 	bl	2246e <net_buf_alloc_fixed>
			if (!frag) {
   216c4:	4605      	mov	r5, r0
   216c6:	b930      	cbnz	r0, 216d6 <att_chan_read+0x76>
	return total;
   216c8:	4657      	mov	r7, sl
   216ca:	e02c      	b.n	21726 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   216cc:	4638      	mov	r0, r7
   216ce:	f000 ffa8 	bl	22622 <net_buf_simple_tailroom>
   216d2:	4604      	mov	r4, r0
   216d4:	e7ee      	b.n	216b4 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   216d6:	4601      	mov	r1, r0
   216d8:	4630      	mov	r0, r6
   216da:	f000 ff56 	bl	2258a <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   216de:	4630      	mov	r0, r6
   216e0:	f7ff fde6 	bl	212b0 <net_buf_frags_len>
   216e4:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   216e8:	f105 0708 	add.w	r7, r5, #8
   216ec:	1a24      	subs	r4, r4, r0
   216ee:	4638      	mov	r0, r7
   216f0:	f000 ff97 	bl	22622 <net_buf_simple_tailroom>
   216f4:	4284      	cmp	r4, r0
   216f6:	d21a      	bcs.n	2172e <att_chan_read+0xce>
   216f8:	4630      	mov	r0, r6
   216fa:	f7ff fdd9 	bl	212b0 <net_buf_frags_len>
   216fe:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   21702:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   21704:	68a9      	ldr	r1, [r5, #8]
   21706:	89aa      	ldrh	r2, [r5, #12]
   21708:	f8db 7004 	ldr.w	r7, [fp, #4]
   2170c:	9803      	ldr	r0, [sp, #12]
   2170e:	f8cd 9000 	str.w	r9, [sp]
   21712:	440a      	add	r2, r1
   21714:	b2a3      	uxth	r3, r4
   21716:	4659      	mov	r1, fp
   21718:	47b8      	blx	r7
		if (read < 0) {
   2171a:	1e07      	subs	r7, r0, #0
   2171c:	da0c      	bge.n	21738 <att_chan_read+0xd8>
				return total;
   2171e:	f1ba 0f00 	cmp.w	sl, #0
   21722:	bf18      	it	ne
   21724:	4657      	movne	r7, sl
}
   21726:	4638      	mov	r0, r7
   21728:	b005      	add	sp, #20
   2172a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2172e:	4638      	mov	r0, r7
   21730:	f000 ff77 	bl	22622 <net_buf_simple_tailroom>
   21734:	4604      	mov	r4, r0
   21736:	e7e5      	b.n	21704 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   21738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2173a:	b993      	cbnz	r3, 21762 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2173c:	4639      	mov	r1, r7
   2173e:	f105 0008 	add.w	r0, r5, #8
   21742:	f000 ff33 	bl	225ac <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21746:	4630      	mov	r0, r6
   21748:	f7ff fdb2 	bl	212b0 <net_buf_frags_len>
   2174c:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   21750:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21752:	4283      	cmp	r3, r0
		total += read;
   21754:	44ba      	add	sl, r7
		offset += read;
   21756:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2175a:	d9b5      	bls.n	216c8 <att_chan_read+0x68>
   2175c:	42a7      	cmp	r7, r4
   2175e:	d096      	beq.n	2168e <att_chan_read+0x2e>
   21760:	e7b2      	b.n	216c8 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   21762:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   21764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21766:	4639      	mov	r1, r7
   21768:	4628      	mov	r0, r5
   2176a:	4798      	blx	r3
   2176c:	2800      	cmp	r0, #0
   2176e:	d1e5      	bne.n	2173c <att_chan_read+0xdc>
   21770:	e7aa      	b.n	216c8 <att_chan_read+0x68>
		return 0;
   21772:	2700      	movs	r7, #0
   21774:	e7d7      	b.n	21726 <att_chan_read+0xc6>

00021776 <chan_req_send>:
{
   21776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   21778:	688f      	ldr	r7, [r1, #8]
{
   2177a:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2177c:	4638      	mov	r0, r7
   2177e:	f7ff fd97 	bl	212b0 <net_buf_frags_len>
   21782:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   21784:	4283      	cmp	r3, r0
{
   21786:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   21788:	d30d      	bcc.n	217a6 <chan_req_send+0x30>
	req->buf = NULL;
   2178a:	2600      	movs	r6, #0
	chan->req = req;
   2178c:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
	err = chan_send(chan, buf, NULL);
   21790:	4632      	mov	r2, r6
	req->buf = NULL;
   21792:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   21794:	4620      	mov	r0, r4
   21796:	4639      	mov	r1, r7
   21798:	f7f4 fb92 	bl	15ec0 <chan_send>
	if (err) {
   2179c:	b110      	cbz	r0, 217a4 <chan_req_send+0x2e>
		req->buf = buf;
   2179e:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   217a0:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
}
   217a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   217a6:	f06f 0079 	mvn.w	r0, #121	; 0x79
   217aa:	e7fb      	b.n	217a4 <chan_req_send+0x2e>

000217ac <process_queue>:
{
   217ac:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   217ae:	2200      	movs	r2, #0
{
   217b0:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   217b2:	2300      	movs	r3, #0
   217b4:	4608      	mov	r0, r1
{
   217b6:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   217b8:	f000 fe5e 	bl	22478 <net_buf_get>
	if (buf) {
   217bc:	4605      	mov	r5, r0
   217be:	b160      	cbz	r0, 217da <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   217c0:	4601      	mov	r1, r0
   217c2:	2200      	movs	r2, #0
   217c4:	4620      	mov	r0, r4
   217c6:	f7f4 fb7b 	bl	15ec0 <chan_send>
		if (err) {
   217ca:	4604      	mov	r4, r0
   217cc:	b118      	cbz	r0, 217d6 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   217ce:	4629      	mov	r1, r5
   217d0:	4630      	mov	r0, r6
   217d2:	f001 fd3b 	bl	2324c <k_queue_prepend>
}
   217d6:	4620      	mov	r0, r4
   217d8:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   217da:	f06f 0401 	mvn.w	r4, #1
   217de:	e7fa      	b.n	217d6 <process_queue+0x2a>

000217e0 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   217e0:	b510      	push	{r4, lr}
	return list->head;
   217e2:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   217e4:	2200      	movs	r2, #0
   217e6:	b153      	cbz	r3, 217fe <sys_slist_find_and_remove.isra.0+0x1e>
   217e8:	428b      	cmp	r3, r1
   217ea:	d10e      	bne.n	2180a <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   217ec:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   217ee:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   217f0:	b932      	cbnz	r2, 21800 <sys_slist_find_and_remove.isra.0+0x20>
   217f2:	42a1      	cmp	r1, r4
	list->head = node;
   217f4:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   217f6:	d100      	bne.n	217fa <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   217f8:	6043      	str	r3, [r0, #4]
	parent->next = child;
   217fa:	2300      	movs	r3, #0
   217fc:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   217fe:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   21800:	42a1      	cmp	r1, r4
	parent->next = child;
   21802:	6013      	str	r3, [r2, #0]
	list->tail = node;
   21804:	bf08      	it	eq
   21806:	6042      	streq	r2, [r0, #4]
}
   21808:	e7f7      	b.n	217fa <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2180a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2180c:	681b      	ldr	r3, [r3, #0]
   2180e:	e7ea      	b.n	217e6 <sys_slist_find_and_remove.isra.0+0x6>

00021810 <chan_cfm_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21810:	3090      	adds	r0, #144	; 0x90
   21812:	f3bf 8f5b 	dmb	ish
   21816:	e850 3f00 	ldrex	r3, [r0]
   2181a:	f023 0302 	bic.w	r3, r3, #2
   2181e:	e840 3200 	strex	r2, r3, [r0]
   21822:	2a00      	cmp	r2, #0
   21824:	d1f7      	bne.n	21816 <chan_cfm_sent+0x6>
   21826:	f3bf 8f5b 	dmb	ish
}
   2182a:	4770      	bx	lr

0002182c <att_exec_write_req>:
   2182c:	2006      	movs	r0, #6
   2182e:	4770      	bx	lr

00021830 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   21830:	2301      	movs	r3, #1
   21832:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21836:	f3bf 8f5b 	dmb	ish
   2183a:	e850 3f00 	ldrex	r3, [r0]
   2183e:	ea43 0201 	orr.w	r2, r3, r1
   21842:	e840 2c00 	strex	ip, r2, [r0]
   21846:	f1bc 0f00 	cmp.w	ip, #0
   2184a:	d1f6      	bne.n	2183a <atomic_test_and_set_bit+0xa>
   2184c:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   21850:	4219      	tst	r1, r3
}
   21852:	bf14      	ite	ne
   21854:	2001      	movne	r0, #1
   21856:	2000      	moveq	r0, #0
   21858:	4770      	bx	lr

0002185a <read_cb>:
{
   2185a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2185e:	f8d2 8000 	ldr.w	r8, [r2]
{
   21862:	4606      	mov	r6, r0
	data->err = 0x00;
   21864:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   21866:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   2186a:	7317      	strb	r7, [r2, #12]
{
   2186c:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2186e:	4631      	mov	r1, r6
   21870:	2215      	movs	r2, #21
   21872:	f000 fd2d 	bl	222d0 <bt_gatt_check_perm>
   21876:	4604      	mov	r4, r0
   21878:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2187a:	b9a0      	cbnz	r0, 218a6 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2187c:	e9cd 0000 	strd	r0, r0, [sp]
   21880:	88ab      	ldrh	r3, [r5, #4]
   21882:	68aa      	ldr	r2, [r5, #8]
   21884:	4631      	mov	r1, r6
   21886:	4640      	mov	r0, r8
   21888:	f7ff feea 	bl	21660 <att_chan_read>
	if (ret < 0) {
   2188c:	1e03      	subs	r3, r0, #0
   2188e:	da0c      	bge.n	218aa <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   21890:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   21894:	bf26      	itte	cs
   21896:	425b      	negcs	r3, r3
   21898:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2189a:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   2189c:	732b      	strb	r3, [r5, #12]
}
   2189e:	4620      	mov	r0, r4
   218a0:	b002      	add	sp, #8
   218a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   218a6:	463c      	mov	r4, r7
   218a8:	e7f9      	b.n	2189e <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   218aa:	2401      	movs	r4, #1
   218ac:	e7f7      	b.n	2189e <read_cb+0x44>

000218ae <att_req_send_process>:
{
   218ae:	b570      	push	{r4, r5, r6, lr}
   218b0:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
   218b2:	3004      	adds	r0, #4
   218b4:	f7ff fcf2 	bl	2129c <sys_slist_get>
	if (!node) {
   218b8:	4605      	mov	r5, r0
   218ba:	b1a8      	cbz	r0, 218e8 <att_req_send_process+0x3a>
	return list->head;
   218bc:	6a60      	ldr	r0, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   218be:	b138      	cbz	r0, 218d0 <att_req_send_process+0x22>
	return node->next;
   218c0:	f850 69e4 	ldr.w	r6, [r0], #-228
   218c4:	b106      	cbz	r6, 218c8 <att_req_send_process+0x1a>
   218c6:	3ee4      	subs	r6, #228	; 0xe4
		if (!chan->req) {
   218c8:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   218cc:	b13b      	cbz	r3, 218de <att_req_send_process+0x30>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   218ce:	b966      	cbnz	r6, 218ea <att_req_send_process+0x3c>
	parent->next = child;
   218d0:	6863      	ldr	r3, [r4, #4]
   218d2:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   218d4:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   218d6:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   218d8:	b933      	cbnz	r3, 218e8 <att_req_send_process+0x3a>
	list->tail = node;
   218da:	60a5      	str	r5, [r4, #8]
}
   218dc:	e004      	b.n	218e8 <att_req_send_process+0x3a>
	return chan_req_send(chan, req);
   218de:	4629      	mov	r1, r5
   218e0:	f7ff ff49 	bl	21776 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   218e4:	2800      	cmp	r0, #0
   218e6:	dbf2      	blt.n	218ce <att_req_send_process+0x20>
}
   218e8:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   218ea:	f8d6 30e4 	ldr.w	r3, [r6, #228]	; 0xe4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   218ee:	b103      	cbz	r3, 218f2 <att_req_send_process+0x44>
   218f0:	3be4      	subs	r3, #228	; 0xe4
{
   218f2:	4630      	mov	r0, r6
   218f4:	461e      	mov	r6, r3
   218f6:	e7e7      	b.n	218c8 <att_req_send_process+0x1a>

000218f8 <bt_att_sent>:
{
   218f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   218fa:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
	struct bt_att *att = chan->att;
   218fe:	f850 4c04 	ldr.w	r4, [r0, #-4]
{
   21902:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   21904:	1f07      	subs	r7, r0, #4
	if (chan->sent) {
   21906:	b10b      	cbz	r3, 2190c <bt_att_sent+0x14>
		chan->sent(chan);
   21908:	4638      	mov	r0, r7
   2190a:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2190c:	f3bf 8f5b 	dmb	ish
   21910:	f105 038c 	add.w	r3, r5, #140	; 0x8c
   21914:	e853 2f00 	ldrex	r2, [r3]
   21918:	f022 0210 	bic.w	r2, r2, #16
   2191c:	e843 2100 	strex	r1, r2, [r3]
   21920:	2900      	cmp	r1, #0
   21922:	d1f7      	bne.n	21914 <bt_att_sent+0x1c>
   21924:	f3bf 8f5b 	dmb	ish
	if (!att) {
   21928:	b30c      	cbz	r4, 2196e <bt_att_sent+0x76>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2192a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   2192e:	b98b      	cbnz	r3, 21954 <bt_att_sent+0x5c>
   21930:	6863      	ldr	r3, [r4, #4]
   21932:	b17b      	cbz	r3, 21954 <bt_att_sent+0x5c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   21934:	1d20      	adds	r0, r4, #4
   21936:	f7ff fcb1 	bl	2129c <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2193a:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2193c:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2193e:	4638      	mov	r0, r7
   21940:	f7ff ff19 	bl	21776 <chan_req_send>
   21944:	2800      	cmp	r0, #0
   21946:	da12      	bge.n	2196e <bt_att_sent+0x76>
	parent->next = child;
   21948:	6863      	ldr	r3, [r4, #4]
   2194a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2194c:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2194e:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   21950:	b903      	cbnz	r3, 21954 <bt_att_sent+0x5c>
	list->tail = node;
   21952:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   21954:	f105 0194 	add.w	r1, r5, #148	; 0x94
   21958:	4638      	mov	r0, r7
   2195a:	f7ff ff27 	bl	217ac <process_queue>
	if (!err) {
   2195e:	b130      	cbz	r0, 2196e <bt_att_sent+0x76>
	(void)process_queue(chan, &att->tx_queue);
   21960:	f104 010c 	add.w	r1, r4, #12
   21964:	4638      	mov	r0, r7
}
   21966:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2196a:	f7ff bf1f 	b.w	217ac <process_queue>
}
   2196e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021970 <chan_rsp_sent>:
   21970:	3090      	adds	r0, #144	; 0x90
   21972:	f3bf 8f5b 	dmb	ish
   21976:	e850 3f00 	ldrex	r3, [r0]
   2197a:	f023 0301 	bic.w	r3, r3, #1
   2197e:	e840 3200 	strex	r2, r3, [r0]
   21982:	2a00      	cmp	r2, #0
   21984:	d1f7      	bne.n	21976 <chan_rsp_sent+0x6>
   21986:	f3bf 8f5b 	dmb	ish
}
   2198a:	4770      	bx	lr

0002198c <bt_att_status>:
{
   2198c:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2198e:	f3bf 8f5b 	dmb	ish
   21992:	680b      	ldr	r3, [r1, #0]
   21994:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   21998:	07db      	lsls	r3, r3, #31
{
   2199a:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2199c:	d518      	bpl.n	219d0 <bt_att_status+0x44>
	if (!chan->att) {
   2199e:	f850 0c04 	ldr.w	r0, [r0, #-4]
   219a2:	b1a8      	cbz	r0, 219d0 <bt_att_status+0x44>
	if (chan->req) {
   219a4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   219a8:	b993      	cbnz	r3, 219d0 <bt_att_status+0x44>
	node = sys_slist_get(&chan->att->reqs);
   219aa:	3004      	adds	r0, #4
   219ac:	f7ff fc76 	bl	2129c <sys_slist_get>
	if (!node) {
   219b0:	4604      	mov	r4, r0
   219b2:	b168      	cbz	r0, 219d0 <bt_att_status+0x44>
	return chan_req_send(chan, req);
   219b4:	4601      	mov	r1, r0
   219b6:	1f28      	subs	r0, r5, #4
   219b8:	f7ff fedd 	bl	21776 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   219bc:	2800      	cmp	r0, #0
   219be:	da07      	bge.n	219d0 <bt_att_status+0x44>
	sys_slist_prepend(&chan->att->reqs, node);
   219c0:	f855 3c04 	ldr.w	r3, [r5, #-4]
	parent->next = child;
   219c4:	685a      	ldr	r2, [r3, #4]
   219c6:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   219c8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   219ca:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   219cc:	b902      	cbnz	r2, 219d0 <bt_att_status+0x44>
	list->tail = node;
   219ce:	609c      	str	r4, [r3, #8]
}
   219d0:	bd38      	pop	{r3, r4, r5, pc}

000219d2 <bt_att_chan_create_pdu>:
{
   219d2:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   219d4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   219d6:	3201      	adds	r2, #1
   219d8:	429a      	cmp	r2, r3
{
   219da:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   219dc:	d81b      	bhi.n	21a16 <bt_att_chan_create_pdu+0x44>
	switch (att_op_get_type(op)) {
   219de:	4608      	mov	r0, r1
   219e0:	f7ff fc86 	bl	212f0 <att_op_get_type>
   219e4:	2802      	cmp	r0, #2
   219e6:	d001      	beq.n	219ec <bt_att_chan_create_pdu+0x1a>
   219e8:	2804      	cmp	r0, #4
   219ea:	d10f      	bne.n	21a0c <bt_att_chan_create_pdu+0x3a>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   219ec:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   219f0:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   219f2:	2100      	movs	r1, #0
   219f4:	4608      	mov	r0, r1
   219f6:	f7ff fbde 	bl	211b6 <bt_l2cap_create_pdu_timeout>
   219fa:	4604      	mov	r4, r0
	if (!buf) {
   219fc:	b120      	cbz	r0, 21a08 <bt_att_chan_create_pdu+0x36>
   219fe:	2101      	movs	r1, #1
   21a00:	3008      	adds	r0, #8
   21a02:	f000 fdd3 	bl	225ac <net_buf_simple_add>
	hdr->code = op;
   21a06:	7005      	strb	r5, [r0, #0]
}
   21a08:	4620      	mov	r0, r4
   21a0a:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   21a0c:	f04f 32ff 	mov.w	r2, #4294967295
   21a10:	f04f 33ff 	mov.w	r3, #4294967295
   21a14:	e7ed      	b.n	219f2 <bt_att_chan_create_pdu+0x20>
		return NULL;
   21a16:	2400      	movs	r4, #0
   21a18:	e7f6      	b.n	21a08 <bt_att_chan_create_pdu+0x36>

00021a1a <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   21a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21a1e:	4688      	mov	r8, r1
   21a20:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   21a22:	2101      	movs	r1, #1
   21a24:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   21a26:	4605      	mov	r5, r0
   21a28:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   21a2a:	f7ff ffd2 	bl	219d2 <bt_att_chan_create_pdu>
	if (!buf) {
   21a2e:	4604      	mov	r4, r0
   21a30:	b170      	cbz	r0, 21a50 <send_err_rsp.part.0+0x36>
   21a32:	2104      	movs	r1, #4
   21a34:	3008      	adds	r0, #8
   21a36:	f000 fdb9 	bl	225ac <net_buf_simple_add>
	rsp->request = req;
   21a3a:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   21a3e:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   21a40:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   21a44:	4621      	mov	r1, r4
   21a46:	4628      	mov	r0, r5
}
   21a48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   21a4c:	f7f4 baa0 	b.w	15f90 <bt_att_chan_send_rsp.constprop.0>
}
   21a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021a54 <att_write_req>:
{
   21a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21a56:	460c      	mov	r4, r1
   21a58:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   21a5a:	f101 0008 	add.w	r0, r1, #8
   21a5e:	f000 fdd4 	bl	2260a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   21a62:	89a2      	ldrh	r2, [r4, #12]
   21a64:	9201      	str	r2, [sp, #4]
   21a66:	68a2      	ldr	r2, [r4, #8]
   21a68:	9200      	str	r2, [sp, #0]
   21a6a:	4603      	mov	r3, r0
   21a6c:	2213      	movs	r2, #19
   21a6e:	2112      	movs	r1, #18
   21a70:	4628      	mov	r0, r5
   21a72:	f7f4 fbd7 	bl	16224 <att_write_rsp.constprop.0>
}
   21a76:	b003      	add	sp, #12
   21a78:	bd30      	pop	{r4, r5, pc}

00021a7a <att_write_cmd>:
{
   21a7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21a7c:	460c      	mov	r4, r1
   21a7e:	4605      	mov	r5, r0
   21a80:	f101 0008 	add.w	r0, r1, #8
   21a84:	f000 fdc1 	bl	2260a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   21a88:	89a2      	ldrh	r2, [r4, #12]
   21a8a:	9201      	str	r2, [sp, #4]
   21a8c:	68a2      	ldr	r2, [r4, #8]
   21a8e:	9200      	str	r2, [sp, #0]
   21a90:	2200      	movs	r2, #0
   21a92:	4603      	mov	r3, r0
   21a94:	4611      	mov	r1, r2
   21a96:	4628      	mov	r0, r5
   21a98:	f7f4 fbc4 	bl	16224 <att_write_rsp.constprop.0>
}
   21a9c:	b003      	add	sp, #12
   21a9e:	bd30      	pop	{r4, r5, pc}

00021aa0 <bt_att_create_pdu>:
{
   21aa0:	b570      	push	{r4, r5, r6, lr}
   21aa2:	460e      	mov	r6, r1
   21aa4:	4615      	mov	r5, r2
	att = att_get(conn);
   21aa6:	f7ff fd91 	bl	215cc <att_get>
	if (!att) {
   21aaa:	b158      	cbz	r0, 21ac4 <bt_att_create_pdu+0x24>
	return list->head;
   21aac:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21aae:	b14b      	cbz	r3, 21ac4 <bt_att_create_pdu+0x24>
   21ab0:	4618      	mov	r0, r3
	return node->next;
   21ab2:	f850 39e4 	ldr.w	r3, [r0], #-228
   21ab6:	b103      	cbz	r3, 21aba <bt_att_create_pdu+0x1a>
   21ab8:	3be4      	subs	r3, #228	; 0xe4
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   21aba:	1c6a      	adds	r2, r5, #1
   21abc:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   21abe:	428a      	cmp	r2, r1
   21ac0:	d902      	bls.n	21ac8 <bt_att_create_pdu+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21ac2:	b93b      	cbnz	r3, 21ad4 <bt_att_create_pdu+0x34>
}
   21ac4:	2000      	movs	r0, #0
   21ac6:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   21ac8:	462a      	mov	r2, r5
   21aca:	4631      	mov	r1, r6
}
   21acc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   21ad0:	f7ff bf7f 	b.w	219d2 <bt_att_chan_create_pdu>
   21ad4:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21ad8:	b104      	cbz	r4, 21adc <bt_att_create_pdu+0x3c>
   21ada:	3ce4      	subs	r4, #228	; 0xe4
{
   21adc:	4618      	mov	r0, r3
   21ade:	4623      	mov	r3, r4
   21ae0:	e7ec      	b.n	21abc <bt_att_create_pdu+0x1c>

00021ae2 <att_read_blob_req>:
{
   21ae2:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   21ae4:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   21ae6:	8813      	ldrh	r3, [r2, #0]
   21ae8:	8852      	ldrh	r2, [r2, #2]
   21aea:	9200      	str	r2, [sp, #0]
   21aec:	210c      	movs	r1, #12
   21aee:	220d      	movs	r2, #13
   21af0:	f7f4 fcd4 	bl	1649c <att_read_rsp>
}
   21af4:	b003      	add	sp, #12
   21af6:	f85d fb04 	ldr.w	pc, [sp], #4

00021afa <att_read_req>:
{
   21afa:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   21afc:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   21afe:	2200      	movs	r2, #0
   21b00:	881b      	ldrh	r3, [r3, #0]
   21b02:	9200      	str	r2, [sp, #0]
   21b04:	210a      	movs	r1, #10
   21b06:	220b      	movs	r2, #11
   21b08:	f7f4 fcc8 	bl	1649c <att_read_rsp>
}
   21b0c:	b003      	add	sp, #12
   21b0e:	f85d fb04 	ldr.w	pc, [sp], #4

00021b12 <att_mtu_req>:
{
   21b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   21b14:	6803      	ldr	r3, [r0, #0]
{
   21b16:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   21b18:	6818      	ldr	r0, [r3, #0]
   21b1a:	f3bf 8f5b 	dmb	ish
   21b1e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   21b22:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   21b26:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   21b2a:	071b      	lsls	r3, r3, #28
   21b2c:	d41b      	bmi.n	21b66 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   21b2e:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   21b30:	881b      	ldrh	r3, [r3, #0]
   21b32:	2b16      	cmp	r3, #22
   21b34:	d919      	bls.n	21b6a <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   21b36:	2202      	movs	r2, #2
   21b38:	2103      	movs	r1, #3
   21b3a:	f7ff ffb1 	bl	21aa0 <bt_att_create_pdu>
	if (!pdu) {
   21b3e:	4606      	mov	r6, r0
   21b40:	b1a8      	cbz	r0, 21b6e <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   21b42:	2102      	movs	r1, #2
   21b44:	3008      	adds	r0, #8
   21b46:	f000 fd31 	bl	225ac <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   21b4a:	2717      	movs	r7, #23
   21b4c:	7007      	strb	r7, [r0, #0]
   21b4e:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   21b50:	4631      	mov	r1, r6
   21b52:	4620      	mov	r0, r4
   21b54:	f7f4 fa1c 	bl	15f90 <bt_att_chan_send_rsp.constprop.0>
	att_chan_mtu_updated(chan);
   21b58:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   21b5a:	8367      	strh	r7, [r4, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   21b5c:	8567      	strh	r7, [r4, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   21b5e:	f7ff fcf5 	bl	2154c <att_chan_mtu_updated>
	return 0;
   21b62:	4628      	mov	r0, r5
}
   21b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   21b66:	2006      	movs	r0, #6
   21b68:	e7fc      	b.n	21b64 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   21b6a:	2004      	movs	r0, #4
   21b6c:	e7fa      	b.n	21b64 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   21b6e:	200e      	movs	r0, #14
   21b70:	e7f8      	b.n	21b64 <att_mtu_req+0x52>

00021b72 <bt_att_init>:
	bt_gatt_init();
   21b72:	f7f4 bf4f 	b.w	16a14 <bt_gatt_init>

00021b76 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   21b76:	898a      	ldrh	r2, [r1, #12]
   21b78:	6889      	ldr	r1, [r1, #8]
   21b7a:	2300      	movs	r3, #0
   21b7c:	f7f4 be14 	b.w	167a8 <att_handle_rsp>

00021b80 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   21b80:	38ac      	subs	r0, #172	; 0xac
   21b82:	f7f4 be41 	b.w	16808 <bt_att_disconnected>

00021b86 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   21b86:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21b8a:	4607      	mov	r7, r0
   21b8c:	460d      	mov	r5, r1
   21b8e:	4616      	mov	r6, r2
   21b90:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   21b92:	f7ff fd1b 	bl	215cc <att_get>
	if (!att) {
   21b96:	4604      	mov	r4, r0
   21b98:	b938      	cbnz	r0, 21baa <bt_att_send+0x24>
		net_buf_unref(buf);
   21b9a:	4628      	mov	r0, r5
   21b9c:	f7f5 fbe4 	bl	17368 <net_buf_unref>
		return -ENOTCONN;
   21ba0:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   21ba4:	b002      	add	sp, #8
   21ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   21baa:	b146      	cbz	r6, 21bbe <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   21bac:	f8cd 8000 	str.w	r8, [sp]
   21bb0:	4633      	mov	r3, r6
   21bb2:	462a      	mov	r2, r5
   21bb4:	2104      	movs	r1, #4
   21bb6:	4638      	mov	r0, r7
   21bb8:	f7ff fb00 	bl	211bc <bt_l2cap_send_cb>
   21bbc:	e7f2      	b.n	21ba4 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   21bbe:	f100 060c 	add.w	r6, r0, #12
   21bc2:	4629      	mov	r1, r5
   21bc4:	4630      	mov	r0, r6
   21bc6:	f000 fcbe 	bl	22546 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   21bca:	2200      	movs	r2, #0
   21bcc:	2300      	movs	r3, #0
   21bce:	4630      	mov	r0, r6
   21bd0:	f000 fc52 	bl	22478 <net_buf_get>
	if (!buf) {
   21bd4:	4605      	mov	r5, r0
   21bd6:	b908      	cbnz	r0, 21bdc <bt_att_send+0x56>
	return 0;
   21bd8:	2000      	movs	r0, #0
   21bda:	e7e3      	b.n	21ba4 <bt_att_send+0x1e>
	return list->head;
   21bdc:	6a60      	ldr	r0, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21bde:	b188      	cbz	r0, 21c04 <bt_att_send+0x7e>
	return node->next;
   21be0:	f850 49e4 	ldr.w	r4, [r0], #-228
   21be4:	b104      	cbz	r4, 21be8 <bt_att_send+0x62>
   21be6:	3ce4      	subs	r4, #228	; 0xe4
	return chan_send(chan, buf, cb);
   21be8:	2200      	movs	r2, #0
   21bea:	4629      	mov	r1, r5
   21bec:	f7f4 f968 	bl	15ec0 <chan_send>
		if (err >= 0) {
   21bf0:	2800      	cmp	r0, #0
   21bf2:	daf1      	bge.n	21bd8 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21bf4:	b134      	cbz	r4, 21c04 <bt_att_send+0x7e>
   21bf6:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   21bfa:	b103      	cbz	r3, 21bfe <bt_att_send+0x78>
   21bfc:	3be4      	subs	r3, #228	; 0xe4
{
   21bfe:	4620      	mov	r0, r4
   21c00:	461c      	mov	r4, r3
   21c02:	e7f1      	b.n	21be8 <bt_att_send+0x62>
		k_queue_prepend(&att->tx_queue._queue, buf);
   21c04:	4629      	mov	r1, r5
   21c06:	4630      	mov	r0, r6
   21c08:	f001 fb20 	bl	2324c <k_queue_prepend>
   21c0c:	e7e4      	b.n	21bd8 <bt_att_send+0x52>

00021c0e <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   21c0e:	b510      	push	{r4, lr}
   21c10:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   21c12:	f7ff fcdb 	bl	215cc <att_get>
	if (!att) {
   21c16:	b160      	cbz	r0, 21c32 <bt_att_req_send+0x24>
	parent->next = child;
   21c18:	2300      	movs	r3, #0
   21c1a:	6023      	str	r3, [r4, #0]
	return list->tail;
   21c1c:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   21c1e:	b92b      	cbnz	r3, 21c2c <bt_att_req_send+0x1e>
	list->head = node;
   21c20:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   21c24:	f7ff fe43 	bl	218ae <att_req_send_process>

	return 0;
   21c28:	2000      	movs	r0, #0
}
   21c2a:	bd10      	pop	{r4, pc}
	parent->next = child;
   21c2c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21c2e:	6084      	str	r4, [r0, #8]
}
   21c30:	e7f8      	b.n	21c24 <bt_att_req_send+0x16>
		return -ENOTCONN;
   21c32:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   21c36:	e7f8      	b.n	21c2a <bt_att_req_send+0x1c>

00021c38 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   21c38:	2001      	movs	r0, #1
   21c3a:	4770      	bx	lr

00021c3c <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   21c3c:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   21c3e:	f7ff fcc5 	bl	215cc <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   21c42:	b198      	cbz	r0, 21c6c <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   21c44:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   21c46:	b18b      	cbz	r3, 21c6c <bt_att_clear_out_of_sync_sent+0x30>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21c48:	f3bf 8f5b 	dmb	ish
   21c4c:	3be4      	subs	r3, #228	; 0xe4
   21c4e:	f103 0290 	add.w	r2, r3, #144	; 0x90
   21c52:	e852 1f00 	ldrex	r1, [r2]
   21c56:	f021 0120 	bic.w	r1, r1, #32
   21c5a:	e842 1000 	strex	r0, r1, [r2]
   21c5e:	2800      	cmp	r0, #0
   21c60:	d1f7      	bne.n	21c52 <bt_att_clear_out_of_sync_sent+0x16>
   21c62:	f3bf 8f5b 	dmb	ish
	return node->next;
   21c66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   21c6a:	e7ec      	b.n	21c46 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   21c6c:	bd08      	pop	{r3, pc}

00021c6e <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   21c6e:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   21c70:	2104      	movs	r1, #4
   21c72:	f7ff faed 	bl	21250 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   21c76:	b138      	cbz	r0, 21c88 <bt_att_out_of_sync_sent_on_fixed+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21c78:	f3bf 8f5b 	dmb	ish
   21c7c:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   21c80:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   21c84:	f3c0 1040 	ubfx	r0, r0, #5, #1
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   21c88:	bd08      	pop	{r3, pc}

00021c8a <gatt_ccc_changed>:
{
   21c8a:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   21c8c:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   21c8e:	895a      	ldrh	r2, [r3, #10]
   21c90:	428a      	cmp	r2, r1
   21c92:	d003      	beq.n	21c9c <gatt_ccc_changed+0x12>
		ccc->value = value;
   21c94:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   21c96:	68db      	ldr	r3, [r3, #12]
   21c98:	b103      	cbz	r3, 21c9c <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   21c9a:	4718      	bx	r3
}
   21c9c:	4770      	bx	lr

00021c9e <gatt_indicate_rsp>:
{
   21c9e:	b510      	push	{r4, lr}
   21ca0:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   21ca2:	68a3      	ldr	r3, [r4, #8]
{
   21ca4:	460a      	mov	r2, r1
	if (params->func) {
   21ca6:	b10b      	cbz	r3, 21cac <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   21ca8:	4621      	mov	r1, r4
   21caa:	4798      	blx	r3
	params->_ref--;
   21cac:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   21cae:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   21cb0:	3b01      	subs	r3, #1
   21cb2:	b2db      	uxtb	r3, r3
   21cb4:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   21cb6:	b122      	cbz	r2, 21cc2 <gatt_indicate_rsp+0x24>
   21cb8:	b91b      	cbnz	r3, 21cc2 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   21cba:	4620      	mov	r0, r4
}
   21cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   21cc0:	4710      	bx	r2
}
   21cc2:	bd10      	pop	{r4, pc}

00021cc4 <match_uuid>:
	data->attr = attr;
   21cc4:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   21cc6:	8091      	strh	r1, [r2, #4]
}
   21cc8:	2000      	movs	r0, #0
   21cca:	4770      	bx	lr

00021ccc <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   21ccc:	2207      	movs	r2, #7
   21cce:	f7fe bc3f 	b.w	20550 <memcpy>

00021cd2 <write_name>:
{
   21cd2:	b570      	push	{r4, r5, r6, lr}
   21cd4:	b092      	sub	sp, #72	; 0x48
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   21cd6:	2100      	movs	r1, #0
{
   21cd8:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   21cdc:	9101      	str	r1, [sp, #4]
{
   21cde:	4616      	mov	r6, r2
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   21ce0:	a802      	add	r0, sp, #8
   21ce2:	223d      	movs	r2, #61	; 0x3d
{
   21ce4:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   21ce6:	f7fe fc3e 	bl	20566 <memset>
	if (offset >= sizeof(value)) {
   21cea:	2d40      	cmp	r5, #64	; 0x40
   21cec:	d80d      	bhi.n	21d0a <write_name+0x38>
	if (offset + len >= sizeof(value)) {
   21cee:	4425      	add	r5, r4
   21cf0:	2d40      	cmp	r5, #64	; 0x40
   21cf2:	dc0d      	bgt.n	21d10 <write_name+0x3e>
	memcpy(value, buf, len);
   21cf4:	4622      	mov	r2, r4
   21cf6:	4631      	mov	r1, r6
   21cf8:	a801      	add	r0, sp, #4
   21cfa:	f7fe fc29 	bl	20550 <memcpy>
	bt_set_name(value);
   21cfe:	a801      	add	r0, sp, #4
   21d00:	f7f2 fe80 	bl	14a04 <bt_set_name>
}
   21d04:	4620      	mov	r0, r4
   21d06:	b012      	add	sp, #72	; 0x48
   21d08:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21d0a:	f06f 0406 	mvn.w	r4, #6
   21d0e:	e7f9      	b.n	21d04 <write_name+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   21d10:	f06f 040c 	mvn.w	r4, #12
   21d14:	e7f6      	b.n	21d04 <write_name+0x32>

00021d16 <gen_hash_m>:
{
   21d16:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   21d18:	6807      	ldr	r7, [r0, #0]
   21d1a:	783d      	ldrb	r5, [r7, #0]
{
   21d1c:	b089      	sub	sp, #36	; 0x24
   21d1e:	4606      	mov	r6, r0
   21d20:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   21d22:	b10d      	cbz	r5, 21d28 <gen_hash_m+0x12>
	switch (u16->val) {
   21d24:	2501      	movs	r5, #1
   21d26:	e014      	b.n	21d52 <gen_hash_m+0x3c>
   21d28:	887b      	ldrh	r3, [r7, #2]
   21d2a:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   21d2e:	d004      	beq.n	21d3a <gen_hash_m+0x24>
   21d30:	d812      	bhi.n	21d58 <gen_hash_m+0x42>
   21d32:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   21d36:	2b03      	cmp	r3, #3
   21d38:	d8f4      	bhi.n	21d24 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   21d3a:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21d3e:	2202      	movs	r2, #2
   21d40:	f10d 010a 	add.w	r1, sp, #10
   21d44:	4620      	mov	r0, r4
   21d46:	f7fe faed 	bl	20324 <tc_cmac_update>
   21d4a:	b9e0      	cbnz	r0, 21d86 <gen_hash_m+0x70>
			state->err = -EINVAL;
   21d4c:	f06f 0315 	mvn.w	r3, #21
   21d50:	65a3      	str	r3, [r4, #88]	; 0x58
}
   21d52:	4628      	mov	r0, r5
   21d54:	b009      	add	sp, #36	; 0x24
   21d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   21d58:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   21d5c:	33ff      	adds	r3, #255	; 0xff
   21d5e:	b29b      	uxth	r3, r3
   21d60:	2b04      	cmp	r3, #4
   21d62:	d8df      	bhi.n	21d24 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   21d64:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21d68:	2202      	movs	r2, #2
   21d6a:	f10d 010a 	add.w	r1, sp, #10
   21d6e:	4620      	mov	r0, r4
   21d70:	f7fe fad8 	bl	20324 <tc_cmac_update>
   21d74:	2800      	cmp	r0, #0
   21d76:	d0e9      	beq.n	21d4c <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   21d78:	887b      	ldrh	r3, [r7, #2]
   21d7a:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21d7e:	2202      	movs	r2, #2
   21d80:	f10d 010a 	add.w	r1, sp, #10
   21d84:	e016      	b.n	21db4 <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   21d86:	887b      	ldrh	r3, [r7, #2]
   21d88:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21d8c:	2202      	movs	r2, #2
   21d8e:	f10d 010a 	add.w	r1, sp, #10
   21d92:	4620      	mov	r0, r4
   21d94:	f7fe fac6 	bl	20324 <tc_cmac_update>
   21d98:	2800      	cmp	r0, #0
   21d9a:	d0d7      	beq.n	21d4c <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   21d9c:	2000      	movs	r0, #0
   21d9e:	aa03      	add	r2, sp, #12
   21da0:	6877      	ldr	r7, [r6, #4]
   21da2:	9000      	str	r0, [sp, #0]
   21da4:	2313      	movs	r3, #19
   21da6:	4631      	mov	r1, r6
   21da8:	47b8      	blx	r7
		if (len < 0) {
   21daa:	1e02      	subs	r2, r0, #0
   21dac:	da01      	bge.n	21db2 <gen_hash_m+0x9c>
			state->err = len;
   21dae:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   21db0:	e7cf      	b.n	21d52 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   21db2:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21db4:	4620      	mov	r0, r4
   21db6:	f7fe fab5 	bl	20324 <tc_cmac_update>
   21dba:	2800      	cmp	r0, #0
   21dbc:	d1b2      	bne.n	21d24 <gen_hash_m+0xe>
   21dbe:	e7c5      	b.n	21d4c <gen_hash_m+0x36>

00021dc0 <clear_cf_cfg>:
{
   21dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21dc2:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   21dc4:	2500      	movs	r5, #0
   21dc6:	4669      	mov	r1, sp
   21dc8:	3001      	adds	r0, #1
   21dca:	9500      	str	r5, [sp, #0]
   21dcc:	f8cd 5003 	str.w	r5, [sp, #3]
   21dd0:	f7ff ff7c 	bl	21ccc <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   21dd4:	f104 0008 	add.w	r0, r4, #8
   21dd8:	2201      	movs	r2, #1
   21dda:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21ddc:	340c      	adds	r4, #12
   21dde:	f7fe fbc2 	bl	20566 <memset>
   21de2:	f3bf 8f5b 	dmb	ish
   21de6:	e854 3f00 	ldrex	r3, [r4]
   21dea:	e844 5200 	strex	r2, r5, [r4]
   21dee:	2a00      	cmp	r2, #0
   21df0:	d1f9      	bne.n	21de6 <clear_cf_cfg+0x26>
   21df2:	f3bf 8f5b 	dmb	ish
}
   21df6:	b003      	add	sp, #12
   21df8:	bd30      	pop	{r4, r5, pc}

00021dfa <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   21dfa:	2301      	movs	r3, #1
   21dfc:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21dfe:	f3bf 8f5b 	dmb	ish
   21e02:	e850 2f00 	ldrex	r2, [r0]
   21e06:	431a      	orrs	r2, r3
   21e08:	e840 2100 	strex	r1, r2, [r0]
   21e0c:	2900      	cmp	r1, #0
   21e0e:	d1f8      	bne.n	21e02 <atomic_set_bit+0x8>
   21e10:	f3bf 8f5b 	dmb	ish
}
   21e14:	4770      	bx	lr

00021e16 <cf_write>:
{
   21e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21e1a:	4698      	mov	r8, r3
   21e1c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   21e20:	2b01      	cmp	r3, #1
{
   21e22:	4606      	mov	r6, r0
   21e24:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   21e26:	d830      	bhi.n	21e8a <cf_write+0x74>
	if (offset + len > sizeof(cfg->data)) {
   21e28:	4443      	add	r3, r8
   21e2a:	2b01      	cmp	r3, #1
   21e2c:	4645      	mov	r5, r8
   21e2e:	dc2f      	bgt.n	21e90 <cf_write+0x7a>
	cfg = find_cf_cfg(conn);
   21e30:	f7f4 fd42 	bl	168b8 <find_cf_cfg>
	if (!cfg) {
   21e34:	4604      	mov	r4, r0
   21e36:	b918      	cbnz	r0, 21e40 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   21e38:	f7f4 fd3e 	bl	168b8 <find_cf_cfg>
	if (!cfg) {
   21e3c:	4604      	mov	r4, r0
   21e3e:	b350      	cbz	r0, 21e96 <cf_write+0x80>
{
   21e40:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   21e42:	f1b8 0f00 	cmp.w	r8, #0
   21e46:	d10e      	bne.n	21e66 <cf_write+0x50>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   21e48:	f106 0188 	add.w	r1, r6, #136	; 0x88
   21e4c:	1c60      	adds	r0, r4, #1
   21e4e:	f7ff ff3d 	bl	21ccc <bt_addr_le_copy>
	cfg->id = conn->id;
   21e52:	4620      	mov	r0, r4
   21e54:	7a33      	ldrb	r3, [r6, #8]
   21e56:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   21e5a:	2100      	movs	r1, #0
   21e5c:	f7ff ffcd 	bl	21dfa <atomic_set_bit>
}
   21e60:	4628      	mov	r0, r5
   21e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   21e66:	7a20      	ldrb	r0, [r4, #8]
   21e68:	fa20 f301 	lsr.w	r3, r0, r1
   21e6c:	07da      	lsls	r2, r3, #31
   21e6e:	d503      	bpl.n	21e78 <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   21e70:	783b      	ldrb	r3, [r7, #0]
   21e72:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   21e74:	07db      	lsls	r3, r3, #31
   21e76:	d511      	bpl.n	21e9c <cf_write+0x86>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   21e78:	3101      	adds	r1, #1
   21e7a:	2903      	cmp	r1, #3
   21e7c:	d1e1      	bne.n	21e42 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   21e7e:	783b      	ldrb	r3, [r7, #0]
   21e80:	f003 0307 	and.w	r3, r3, #7
   21e84:	4318      	orrs	r0, r3
   21e86:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   21e88:	e7de      	b.n	21e48 <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21e8a:	f06f 0506 	mvn.w	r5, #6
   21e8e:	e7e7      	b.n	21e60 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   21e90:	f06f 050c 	mvn.w	r5, #12
   21e94:	e7e4      	b.n	21e60 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   21e96:	f06f 0510 	mvn.w	r5, #16
   21e9a:	e7e1      	b.n	21e60 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   21e9c:	f06f 0512 	mvn.w	r5, #18
   21ea0:	e7de      	b.n	21e60 <cf_write+0x4a>

00021ea2 <read_ppcp>:
{
   21ea2:	b513      	push	{r0, r1, r4, lr}
   21ea4:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   21ea6:	2218      	movs	r2, #24
{
   21ea8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   21eac:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   21eb0:	2228      	movs	r2, #40	; 0x28
   21eb2:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   21eb6:	2200      	movs	r2, #0
   21eb8:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   21ebc:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   21ebe:	f04f 022a 	mov.w	r2, #42	; 0x2a
   21ec2:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   21ec6:	d80b      	bhi.n	21ee0 <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   21ec8:	f1c1 0408 	rsb	r4, r1, #8
   21ecc:	429c      	cmp	r4, r3
   21ece:	bfa8      	it	ge
   21ed0:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   21ed2:	4622      	mov	r2, r4
   21ed4:	4469      	add	r1, sp
   21ed6:	f7fe fb3b 	bl	20550 <memcpy>
}
   21eda:	4620      	mov	r0, r4
   21edc:	b002      	add	sp, #8
   21ede:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21ee0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   21ee4:	e7f9      	b.n	21eda <read_ppcp+0x38>

00021ee6 <read_appearance>:
{
   21ee6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21ee8:	4615      	mov	r5, r2
   21eea:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   21eee:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   21ef0:	f7fe fe25 	bl	20b3e <bt_get_appearance>
	if (offset > value_len) {
   21ef4:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   21ef6:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   21efa:	d80e      	bhi.n	21f1a <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   21efc:	f1c6 0402 	rsb	r4, r6, #2
   21f00:	42bc      	cmp	r4, r7
   21f02:	bfa8      	it	ge
   21f04:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   21f06:	f10d 0306 	add.w	r3, sp, #6
   21f0a:	4622      	mov	r2, r4
   21f0c:	1999      	adds	r1, r3, r6
   21f0e:	4628      	mov	r0, r5
   21f10:	f7fe fb1e 	bl	20550 <memcpy>
}
   21f14:	4620      	mov	r0, r4
   21f16:	b003      	add	sp, #12
   21f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21f1a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   21f1e:	e7f9      	b.n	21f14 <read_appearance+0x2e>

00021f20 <read_name>:
{
   21f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21f24:	4698      	mov	r8, r3
   21f26:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   21f2a:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   21f2c:	f7f2 fdf2 	bl	14b14 <bt_get_name>
   21f30:	4607      	mov	r7, r0
				 strlen(name));
   21f32:	f7fe fac8 	bl	204c6 <strlen>
	if (offset > value_len) {
   21f36:	b283      	uxth	r3, r0
   21f38:	42b3      	cmp	r3, r6
   21f3a:	d30c      	bcc.n	21f56 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   21f3c:	1b9c      	subs	r4, r3, r6
   21f3e:	4544      	cmp	r4, r8
   21f40:	bfa8      	it	ge
   21f42:	4644      	movge	r4, r8
   21f44:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   21f46:	4622      	mov	r2, r4
   21f48:	19b9      	adds	r1, r7, r6
   21f4a:	4628      	mov	r0, r5
   21f4c:	f7fe fb00 	bl	20550 <memcpy>
}
   21f50:	4620      	mov	r0, r4
   21f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21f56:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   21f5a:	e7f9      	b.n	21f50 <read_name+0x30>

00021f5c <cf_read>:
{
   21f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21f5e:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   21f60:	2300      	movs	r3, #0
{
   21f62:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   21f66:	f88d 3004 	strb.w	r3, [sp, #4]
{
   21f6a:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   21f6c:	f7f4 fca4 	bl	168b8 <find_cf_cfg>
	if (cfg) {
   21f70:	b128      	cbz	r0, 21f7e <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   21f72:	f100 0108 	add.w	r1, r0, #8
   21f76:	2201      	movs	r2, #1
   21f78:	a801      	add	r0, sp, #4
   21f7a:	f7fe fae9 	bl	20550 <memcpy>
	if (offset > value_len) {
   21f7e:	2e01      	cmp	r6, #1
   21f80:	d80d      	bhi.n	21f9e <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   21f82:	f1c6 0401 	rsb	r4, r6, #1
   21f86:	42bc      	cmp	r4, r7
   21f88:	bfa8      	it	ge
   21f8a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   21f8c:	ab01      	add	r3, sp, #4
   21f8e:	4622      	mov	r2, r4
   21f90:	1999      	adds	r1, r3, r6
   21f92:	4628      	mov	r0, r5
   21f94:	f7fe fadc 	bl	20550 <memcpy>
}
   21f98:	4620      	mov	r0, r4
   21f9a:	b003      	add	sp, #12
   21f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21f9e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   21fa2:	e7f9      	b.n	21f98 <cf_read+0x3c>

00021fa4 <bt_gatt_attr_read_service>:
{
   21fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   21fa6:	68c9      	ldr	r1, [r1, #12]
{
   21fa8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   21fac:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   21fae:	780b      	ldrb	r3, [r1, #0]
{
   21fb0:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   21fb2:	b993      	cbnz	r3, 21fda <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   21fb4:	884b      	ldrh	r3, [r1, #2]
   21fb6:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   21fba:	2d02      	cmp	r5, #2
   21fbc:	d819      	bhi.n	21ff2 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   21fbe:	f1c5 0202 	rsb	r2, r5, #2
   21fc2:	4294      	cmp	r4, r2
   21fc4:	bfa8      	it	ge
   21fc6:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   21fc8:	f10d 0306 	add.w	r3, sp, #6
   21fcc:	4622      	mov	r2, r4
   21fce:	1959      	adds	r1, r3, r5
   21fd0:	f7fe fabe 	bl	20550 <memcpy>
}
   21fd4:	4620      	mov	r0, r4
   21fd6:	b003      	add	sp, #12
   21fd8:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   21fda:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   21fdc:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   21fe0:	d807      	bhi.n	21ff2 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   21fe2:	f1c5 0210 	rsb	r2, r5, #16
   21fe6:	4294      	cmp	r4, r2
   21fe8:	bfa8      	it	ge
   21fea:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   21fec:	4622      	mov	r2, r4
   21fee:	4429      	add	r1, r5
   21ff0:	e7ee      	b.n	21fd0 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21ff2:	f06f 0406 	mvn.w	r4, #6
   21ff6:	e7ed      	b.n	21fd4 <bt_gatt_attr_read_service+0x30>

00021ff8 <find_ccc_cfg>:
{
   21ff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21ffa:	460c      	mov	r4, r1
						    &cfg->peer)) {
   21ffc:	1c4d      	adds	r5, r1, #1
		if (conn) {
   21ffe:	b148      	cbz	r0, 22014 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   22000:	7809      	ldrb	r1, [r1, #0]
   22002:	462a      	mov	r2, r5
   22004:	f7fe fffe 	bl	21004 <bt_conn_is_peer_addr_le>
	return NULL;
   22008:	2800      	cmp	r0, #0
   2200a:	bf08      	it	eq
   2200c:	2400      	moveq	r4, #0
}
   2200e:	4620      	mov	r0, r4
   22010:	b003      	add	sp, #12
   22012:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   22014:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
   22016:	2207      	movs	r2, #7
   22018:	f8cd 0003 	str.w	r0, [sp, #3]
   2201c:	4669      	mov	r1, sp
   2201e:	4628      	mov	r0, r5
   22020:	f7fe fa6d 	bl	204fe <memcmp>
	return NULL;
   22024:	2800      	cmp	r0, #0
   22026:	bf18      	it	ne
   22028:	2400      	movne	r4, #0
   2202a:	e7f0      	b.n	2200e <find_ccc_cfg+0x16>

0002202c <bt_gatt_attr_write_ccc>:
{
   2202c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   22030:	461f      	mov	r7, r3
   22032:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   22036:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   2203a:	4606      	mov	r6, r0
   2203c:	4688      	mov	r8, r1
	if (offset) {
   2203e:	2b00      	cmp	r3, #0
   22040:	d141      	bne.n	220c6 <bt_gatt_attr_write_ccc+0x9a>
	if (!len || len > sizeof(uint16_t)) {
   22042:	1e7b      	subs	r3, r7, #1
   22044:	2b01      	cmp	r3, #1
   22046:	d841      	bhi.n	220cc <bt_gatt_attr_write_ccc+0xa0>
		value = *(uint8_t *)buf;
   22048:	7815      	ldrb	r5, [r2, #0]
	if (len < sizeof(uint16_t)) {
   2204a:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   2204c:	4649      	mov	r1, r9
   2204e:	bf14      	ite	ne
   22050:	8815      	ldrhne	r5, [r2, #0]
		value = *(uint8_t *)buf;
   22052:	b2ad      	uxtheq	r5, r5
	cfg = find_ccc_cfg(conn, ccc);
   22054:	f7ff ffd0 	bl	21ff8 <find_ccc_cfg>
	if (!cfg) {
   22058:	4604      	mov	r4, r0
   2205a:	b980      	cbnz	r0, 2207e <bt_gatt_attr_write_ccc+0x52>
		if (!value) {
   2205c:	b91d      	cbnz	r5, 22066 <bt_gatt_attr_write_ccc+0x3a>
			return len;
   2205e:	4638      	mov	r0, r7
}
   22060:	b003      	add	sp, #12
   22062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   22066:	4649      	mov	r1, r9
   22068:	f7ff ffc6 	bl	21ff8 <find_ccc_cfg>
		if (!cfg) {
   2206c:	4604      	mov	r4, r0
   2206e:	b380      	cbz	r0, 220d2 <bt_gatt_attr_write_ccc+0xa6>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   22070:	f106 0188 	add.w	r1, r6, #136	; 0x88
   22074:	3001      	adds	r0, #1
   22076:	f7ff fe29 	bl	21ccc <bt_addr_le_copy>
		cfg->id = conn->id;
   2207a:	7a33      	ldrb	r3, [r6, #8]
   2207c:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   2207e:	f8d9 3010 	ldr.w	r3, [r9, #16]
   22082:	b9a3      	cbnz	r3, 220ae <bt_gatt_attr_write_ccc+0x82>
	if (cfg->value != ccc->value) {
   22084:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   22088:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   2208a:	42ab      	cmp	r3, r5
   2208c:	d003      	beq.n	22096 <bt_gatt_attr_write_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
   2208e:	4649      	mov	r1, r9
   22090:	4640      	mov	r0, r8
   22092:	f7ff fdfa 	bl	21c8a <gatt_ccc_changed>
	if (!value) {
   22096:	2d00      	cmp	r5, #0
   22098:	d1e1      	bne.n	2205e <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2209a:	4669      	mov	r1, sp
   2209c:	1c60      	adds	r0, r4, #1
   2209e:	9500      	str	r5, [sp, #0]
   220a0:	f8cd 5003 	str.w	r5, [sp, #3]
   220a4:	f7ff fe12 	bl	21ccc <bt_addr_le_copy>
	cfg->id = 0U;
   220a8:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   220aa:	8125      	strh	r5, [r4, #8]
}
   220ac:	e7d7      	b.n	2205e <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   220ae:	462a      	mov	r2, r5
   220b0:	4641      	mov	r1, r8
   220b2:	4630      	mov	r0, r6
   220b4:	4798      	blx	r3
		if (write < 0) {
   220b6:	2800      	cmp	r0, #0
   220b8:	dbd2      	blt.n	22060 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   220ba:	3801      	subs	r0, #1
   220bc:	2801      	cmp	r0, #1
   220be:	d9e1      	bls.n	22084 <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   220c0:	f06f 000d 	mvn.w	r0, #13
   220c4:	e7cc      	b.n	22060 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   220c6:	f06f 0006 	mvn.w	r0, #6
   220ca:	e7c9      	b.n	22060 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   220cc:	f06f 000c 	mvn.w	r0, #12
   220d0:	e7c6      	b.n	22060 <bt_gatt_attr_write_ccc+0x34>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   220d2:	f06f 0010 	mvn.w	r0, #16
   220d6:	e7c3      	b.n	22060 <bt_gatt_attr_write_ccc+0x34>

000220d8 <bt_gatt_attr_read_ccc>:
{
   220d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   220da:	68c9      	ldr	r1, [r1, #12]
{
   220dc:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   220e0:	4615      	mov	r5, r2
   220e2:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   220e4:	f7ff ff88 	bl	21ff8 <find_ccc_cfg>
	if (cfg) {
   220e8:	b100      	cbz	r0, 220ec <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   220ea:	8900      	ldrh	r0, [r0, #8]
   220ec:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   220f0:	2e02      	cmp	r6, #2
   220f2:	d80e      	bhi.n	22112 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   220f4:	f1c6 0402 	rsb	r4, r6, #2
   220f8:	42bc      	cmp	r4, r7
   220fa:	bfa8      	it	ge
   220fc:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   220fe:	f10d 0306 	add.w	r3, sp, #6
   22102:	4622      	mov	r2, r4
   22104:	1999      	adds	r1, r3, r6
   22106:	4628      	mov	r0, r5
   22108:	f7fe fa22 	bl	20550 <memcpy>
}
   2210c:	4620      	mov	r0, r4
   2210e:	b003      	add	sp, #12
   22110:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22112:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   22116:	e7f9      	b.n	2210c <bt_gatt_attr_read_ccc+0x34>

00022118 <sc_save>:
{
   22118:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2211c:	4680      	mov	r8, r0
   2211e:	460f      	mov	r7, r1
   22120:	4616      	mov	r6, r2
   22122:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   22124:	f7f4 fbe6 	bl	168f4 <find_sc_cfg>
	if (!cfg) {
   22128:	4604      	mov	r4, r0
   2212a:	b960      	cbnz	r0, 22146 <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   2212c:	4669      	mov	r1, sp
   2212e:	9000      	str	r0, [sp, #0]
   22130:	f8cd 0003 	str.w	r0, [sp, #3]
   22134:	f7f4 fbde 	bl	168f4 <find_sc_cfg>
		if (!cfg) {
   22138:	4604      	mov	r4, r0
   2213a:	b178      	cbz	r0, 2215c <sc_save+0x44>
		cfg->id = id;
   2213c:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   22140:	4639      	mov	r1, r7
   22142:	f7ff fdc3 	bl	21ccc <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   22146:	8922      	ldrh	r2, [r4, #8]
   22148:	8963      	ldrh	r3, [r4, #10]
   2214a:	b91a      	cbnz	r2, 22154 <sc_save+0x3c>
   2214c:	b923      	cbnz	r3, 22158 <sc_save+0x40>
		cfg->data.start = start;
   2214e:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   22150:	8165      	strh	r5, [r4, #10]
   22152:	e003      	b.n	2215c <sc_save+0x44>
	if (new_start >= *start && new_end <= *end) {
   22154:	4296      	cmp	r6, r2
   22156:	d304      	bcc.n	22162 <sc_save+0x4a>
   22158:	429d      	cmp	r5, r3
   2215a:	d8f9      	bhi.n	22150 <sc_save+0x38>
}
   2215c:	b002      	add	sp, #8
   2215e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*start = new_start;
   22162:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   22164:	e7f8      	b.n	22158 <sc_save+0x40>

00022166 <sc_clear>:
{
   22166:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   22168:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   2216c:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2216e:	4631      	mov	r1, r6
   22170:	7a00      	ldrb	r0, [r0, #8]
   22172:	f7fe fce6 	bl	20b42 <bt_addr_le_is_bonded>
   22176:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   22178:	4631      	mov	r1, r6
   2217a:	f7f4 fbbb 	bl	168f4 <find_sc_cfg>
	if (!cfg) {
   2217e:	b128      	cbz	r0, 2218c <sc_clear+0x26>
}
   22180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   22184:	220c      	movs	r2, #12
   22186:	2100      	movs	r1, #0
   22188:	f7fe b9ed 	b.w	20566 <memset>
}
   2218c:	bd70      	pop	{r4, r5, r6, pc}

0002218e <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2218e:	2a02      	cmp	r2, #2
{
   22190:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   22192:	d108      	bne.n	221a6 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   22194:	2300      	movs	r3, #0
   22196:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2219a:	461a      	mov	r2, r3
   2219c:	7a00      	ldrb	r0, [r0, #8]
   2219e:	f7ff ffbb 	bl	22118 <sc_save>
}
   221a2:	2002      	movs	r0, #2
   221a4:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   221a6:	f7ff ffde 	bl	22166 <sc_clear>
   221aa:	e7fa      	b.n	221a2 <sc_ccc_cfg_write+0x14>

000221ac <sc_restore_rsp>:
{
   221ac:	b538      	push	{r3, r4, r5, lr}
   221ae:	4604      	mov	r4, r0
   221b0:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   221b2:	f7ff fd41 	bl	21c38 <bt_att_fixed_chan_only>
   221b6:	b150      	cbz	r0, 221ce <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   221b8:	4620      	mov	r0, r4
   221ba:	f7f4 fb7d 	bl	168b8 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   221be:	b130      	cbz	r0, 221ce <sc_restore_rsp+0x22>
   221c0:	7a03      	ldrb	r3, [r0, #8]
   221c2:	07db      	lsls	r3, r3, #31
   221c4:	d503      	bpl.n	221ce <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   221c6:	2100      	movs	r1, #0
   221c8:	300c      	adds	r0, #12
   221ca:	f7ff fe16 	bl	21dfa <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   221ce:	b965      	cbnz	r5, 221ea <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   221d0:	7a20      	ldrb	r0, [r4, #8]
   221d2:	f104 0188 	add.w	r1, r4, #136	; 0x88
   221d6:	f7f4 fb8d 	bl	168f4 <find_sc_cfg>
		if (sc_cfg) {
   221da:	b130      	cbz	r0, 221ea <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   221dc:	4629      	mov	r1, r5
   221de:	2204      	movs	r2, #4
}
   221e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   221e4:	3008      	adds	r0, #8
   221e6:	f7fe b9be 	b.w	20566 <memset>
}
   221ea:	bd38      	pop	{r3, r4, r5, pc}

000221ec <bt_gatt_attr_read>:
{
   221ec:	b538      	push	{r3, r4, r5, lr}
   221ee:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   221f2:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   221f6:	42a9      	cmp	r1, r5
{
   221f8:	4610      	mov	r0, r2
	if (offset > value_len) {
   221fa:	d80b      	bhi.n	22214 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   221fc:	1a6d      	subs	r5, r5, r1
   221fe:	429d      	cmp	r5, r3
   22200:	bfa8      	it	ge
   22202:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   22204:	9b05      	ldr	r3, [sp, #20]
   22206:	b2ad      	uxth	r5, r5
   22208:	462a      	mov	r2, r5
   2220a:	4419      	add	r1, r3
   2220c:	f7fe f9a0 	bl	20550 <memcpy>
}
   22210:	4628      	mov	r0, r5
   22212:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22214:	f06f 0506 	mvn.w	r5, #6
   22218:	e7fa      	b.n	22210 <bt_gatt_attr_read+0x24>

0002221a <bt_gatt_attr_value_handle>:
{
   2221a:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2221c:	4604      	mov	r4, r0
   2221e:	b910      	cbnz	r0, 22226 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   22220:	2000      	movs	r0, #0
}
   22222:	b002      	add	sp, #8
   22224:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   22226:	2300      	movs	r3, #0
   22228:	f88d 3004 	strb.w	r3, [sp, #4]
   2222c:	6800      	ldr	r0, [r0, #0]
   2222e:	f642 0303 	movw	r3, #10243	; 0x2803
   22232:	a901      	add	r1, sp, #4
   22234:	f8ad 3006 	strh.w	r3, [sp, #6]
   22238:	f7fe f9b3 	bl	205a2 <bt_uuid_cmp>
   2223c:	2800      	cmp	r0, #0
   2223e:	d1ef      	bne.n	22220 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   22240:	68e3      	ldr	r3, [r4, #12]
   22242:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   22244:	2800      	cmp	r0, #0
   22246:	d1ec      	bne.n	22222 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   22248:	4620      	mov	r0, r4
   2224a:	f7f4 fc39 	bl	16ac0 <bt_gatt_attr_get_handle>
   2224e:	3001      	adds	r0, #1
   22250:	b280      	uxth	r0, r0
	return handle;
   22252:	e7e6      	b.n	22222 <bt_gatt_attr_value_handle+0x8>

00022254 <bt_gatt_attr_read_chrc>:
{
   22254:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   22256:	68cf      	ldr	r7, [r1, #12]
{
   22258:	b087      	sub	sp, #28
   2225a:	4608      	mov	r0, r1
   2225c:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   2225e:	79bb      	ldrb	r3, [r7, #6]
   22260:	f88d 3004 	strb.w	r3, [sp, #4]
{
   22264:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   22268:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2226a:	f7ff ffd6 	bl	2221a <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2226e:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   22270:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   22274:	780b      	ldrb	r3, [r1, #0]
   22276:	b99b      	cbnz	r3, 222a0 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   22278:	884b      	ldrh	r3, [r1, #2]
   2227a:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   2227e:	2105      	movs	r1, #5
	if (offset > value_len) {
   22280:	42b1      	cmp	r1, r6
   22282:	d315      	bcc.n	222b0 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   22284:	1b89      	subs	r1, r1, r6
   22286:	42a1      	cmp	r1, r4
   22288:	bfa8      	it	ge
   2228a:	4621      	movge	r1, r4
   2228c:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   2228e:	ab01      	add	r3, sp, #4
   22290:	4622      	mov	r2, r4
   22292:	1999      	adds	r1, r3, r6
   22294:	4628      	mov	r0, r5
   22296:	f7fe f95b 	bl	20550 <memcpy>
}
   2229a:	4620      	mov	r0, r4
   2229c:	b007      	add	sp, #28
   2229e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   222a0:	3101      	adds	r1, #1
   222a2:	2210      	movs	r2, #16
   222a4:	f10d 0007 	add.w	r0, sp, #7
   222a8:	f7fe f952 	bl	20550 <memcpy>
		value_len += 16U;
   222ac:	2113      	movs	r1, #19
   222ae:	e7e7      	b.n	22280 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   222b0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   222b4:	e7f1      	b.n	2229a <bt_gatt_attr_read_chrc+0x46>

000222b6 <bt_gatt_foreach_attr>:
{
   222b6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   222b8:	e9cd 2301 	strd	r2, r3, [sp, #4]
   222bc:	2300      	movs	r3, #0
   222be:	9300      	str	r3, [sp, #0]
   222c0:	461a      	mov	r2, r3
   222c2:	f7f4 fc2d 	bl	16b20 <bt_gatt_foreach_attr_type>
}
   222c6:	b005      	add	sp, #20
   222c8:	f85d fb04 	ldr.w	pc, [sp], #4

000222cc <db_hash_process>:
	db_hash_gen(true);
   222cc:	f7f4 bc82 	b.w	16bd4 <db_hash_gen.constprop.0>

000222d0 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   222d0:	07d3      	lsls	r3, r2, #31
{
   222d2:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   222d4:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   222d6:	d504      	bpl.n	222e2 <bt_gatt_check_perm+0x12>
   222d8:	f014 0f15 	tst.w	r4, #21
   222dc:	d017      	beq.n	2230e <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   222de:	684b      	ldr	r3, [r1, #4]
   222e0:	b1ab      	cbz	r3, 2230e <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   222e2:	0793      	lsls	r3, r2, #30
   222e4:	d504      	bpl.n	222f0 <bt_gatt_check_perm+0x20>
   222e6:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   222ea:	d012      	beq.n	22312 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   222ec:	688b      	ldr	r3, [r1, #8]
   222ee:	b183      	cbz	r3, 22312 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   222f0:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   222f2:	f014 0f30 	tst.w	r4, #48	; 0x30
   222f6:	d104      	bne.n	22302 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   222f8:	f014 000c 	ands.w	r0, r4, #12
   222fc:	bf18      	it	ne
   222fe:	200f      	movne	r0, #15
}
   22300:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   22302:	f7fe fe7d 	bl	21000 <bt_conn_get_security>
   22306:	2802      	cmp	r0, #2
   22308:	d8f6      	bhi.n	222f8 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   2230a:	2005      	movs	r0, #5
   2230c:	e7f8      	b.n	22300 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2230e:	2002      	movs	r0, #2
   22310:	e7f6      	b.n	22300 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   22312:	2003      	movs	r0, #3
   22314:	e7f4      	b.n	22300 <bt_gatt_check_perm+0x30>

00022316 <gatt_notify>:
{
   22316:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2231a:	4614      	mov	r4, r2
   2231c:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   2231e:	2214      	movs	r2, #20
   22320:	6861      	ldr	r1, [r4, #4]
{
   22322:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   22324:	f7ff ffd4 	bl	222d0 <bt_gatt_check_perm>
   22328:	bb08      	cbnz	r0, 2236e <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   2232a:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   2232c:	211b      	movs	r1, #27
   2232e:	3202      	adds	r2, #2
   22330:	4638      	mov	r0, r7
   22332:	f7ff fbb5 	bl	21aa0 <bt_att_create_pdu>
	if (!buf) {
   22336:	4605      	mov	r5, r0
   22338:	b1e8      	cbz	r0, 22376 <gatt_notify+0x60>
   2233a:	f100 0908 	add.w	r9, r0, #8
   2233e:	2102      	movs	r1, #2
   22340:	4648      	mov	r0, r9
   22342:	f000 f933 	bl	225ac <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   22346:	4606      	mov	r6, r0
   22348:	89a1      	ldrh	r1, [r4, #12]
   2234a:	f826 8b02 	strh.w	r8, [r6], #2
   2234e:	4648      	mov	r0, r9
   22350:	f000 f92c 	bl	225ac <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   22354:	89a2      	ldrh	r2, [r4, #12]
   22356:	68a1      	ldr	r1, [r4, #8]
   22358:	4630      	mov	r0, r6
   2235a:	f7fe f8f9 	bl	20550 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   2235e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   22362:	4629      	mov	r1, r5
   22364:	4638      	mov	r0, r7
}
   22366:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   2236a:	f7ff bc0c 	b.w	21b86 <bt_att_send>
		return -EPERM;
   2236e:	f04f 30ff 	mov.w	r0, #4294967295
}
   22372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   22376:	f06f 000b 	mvn.w	r0, #11
   2237a:	e7fa      	b.n	22372 <gatt_notify+0x5c>

0002237c <bt_gatt_change_aware>:
{
   2237c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22380:	4606      	mov	r6, r0
   22382:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   22384:	f7f4 fa98 	bl	168b8 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   22388:	b918      	cbnz	r0, 22392 <bt_gatt_change_aware+0x16>
		return true;
   2238a:	2401      	movs	r4, #1
}
   2238c:	4620      	mov	r0, r4
   2238e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   22392:	7a03      	ldrb	r3, [r0, #8]
   22394:	07db      	lsls	r3, r3, #31
   22396:	d5f8      	bpl.n	2238a <bt_gatt_change_aware+0xe>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22398:	f3bf 8f5b 	dmb	ish
   2239c:	68c1      	ldr	r1, [r0, #12]
   2239e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   223a2:	f011 0801 	ands.w	r8, r1, #1
   223a6:	f100 050c 	add.w	r5, r0, #12
   223aa:	d1ee      	bne.n	2238a <bt_gatt_change_aware+0xe>
	if (!req) {
   223ac:	b90c      	cbnz	r4, 223b2 <bt_gatt_change_aware+0x36>
		return false;
   223ae:	2400      	movs	r4, #0
   223b0:	e7ec      	b.n	2238c <bt_gatt_change_aware+0x10>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   223b2:	f3bf 8f5b 	dmb	ish
   223b6:	e855 3f00 	ldrex	r3, [r5]
   223ba:	f023 0202 	bic.w	r2, r3, #2
   223be:	e845 2100 	strex	r1, r2, [r5]
   223c2:	2900      	cmp	r1, #0
   223c4:	d1f7      	bne.n	223b6 <bt_gatt_change_aware+0x3a>
   223c6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   223ca:	f013 0702 	ands.w	r7, r3, #2
		bt_att_clear_out_of_sync_sent(conn);
   223ce:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   223d0:	d006      	beq.n	223e0 <bt_gatt_change_aware+0x64>
		bt_att_clear_out_of_sync_sent(conn);
   223d2:	f7ff fc33 	bl	21c3c <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   223d6:	4641      	mov	r1, r8
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   223d8:	4628      	mov	r0, r5
   223da:	f7ff fd0e 	bl	21dfa <atomic_set_bit>
		return true;
   223de:	e7d5      	b.n	2238c <bt_gatt_change_aware+0x10>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   223e0:	f7ff fc2a 	bl	21c38 <bt_att_fixed_chan_only>
   223e4:	2800      	cmp	r0, #0
   223e6:	d0e2      	beq.n	223ae <bt_gatt_change_aware+0x32>
   223e8:	4630      	mov	r0, r6
   223ea:	f7ff fc40 	bl	21c6e <bt_att_out_of_sync_sent_on_fixed>
   223ee:	4604      	mov	r4, r0
   223f0:	2800      	cmp	r0, #0
   223f2:	d0dc      	beq.n	223ae <bt_gatt_change_aware+0x32>
   223f4:	f3bf 8f5b 	dmb	ish
   223f8:	e855 3f00 	ldrex	r3, [r5]
   223fc:	f023 0302 	bic.w	r3, r3, #2
   22400:	e845 3200 	strex	r2, r3, [r5]
   22404:	2a00      	cmp	r2, #0
   22406:	d1f7      	bne.n	223f8 <bt_gatt_change_aware+0x7c>
   22408:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   2240c:	4630      	mov	r0, r6
   2240e:	f7ff fc15 	bl	21c3c <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   22412:	4639      	mov	r1, r7
   22414:	e7e0      	b.n	223d8 <bt_gatt_change_aware+0x5c>

00022416 <bt_smp_recv>:
{
   22416:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   22418:	2100      	movs	r1, #0
   2241a:	f04f 32ff 	mov.w	r2, #4294967295
   2241e:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   22422:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   22424:	4608      	mov	r0, r1
   22426:	f7fe fec6 	bl	211b6 <bt_l2cap_create_pdu_timeout>
   2242a:	f100 0608 	add.w	r6, r0, #8
   2242e:	4604      	mov	r4, r0
   22430:	2101      	movs	r1, #1
   22432:	4630      	mov	r0, r6
   22434:	f000 f8ba 	bl	225ac <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   22438:	2505      	movs	r5, #5
   2243a:	7005      	strb	r5, [r0, #0]
   2243c:	2101      	movs	r1, #1
   2243e:	4630      	mov	r0, r6
   22440:	f000 f8b4 	bl	225ac <net_buf_simple_add>
   22444:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   22446:	7005      	strb	r5, [r0, #0]
   22448:	4622      	mov	r2, r4
   2244a:	9300      	str	r3, [sp, #0]
   2244c:	2106      	movs	r1, #6
   2244e:	4638      	mov	r0, r7
   22450:	f7fe feb4 	bl	211bc <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   22454:	b110      	cbz	r0, 2245c <bt_smp_recv+0x46>
		net_buf_unref(buf);
   22456:	4620      	mov	r0, r4
   22458:	f7f4 ff86 	bl	17368 <net_buf_unref>
}
   2245c:	2000      	movs	r0, #0
   2245e:	b003      	add	sp, #12
   22460:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022462 <bt_smp_sign>:
   22462:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22466:	4770      	bx	lr

00022468 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   22468:	2000      	movs	r0, #0
   2246a:	4770      	bx	lr

0002246c <fixed_data_unref>:
}
   2246c:	4770      	bx	lr

0002246e <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2246e:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   22470:	6849      	ldr	r1, [r1, #4]
   22472:	6809      	ldr	r1, [r1, #0]
   22474:	f7f4 bee4 	b.w	17240 <net_buf_alloc_len>

00022478 <net_buf_get>:
{
   22478:	b570      	push	{r4, r5, r6, lr}
   2247a:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   2247c:	f7f8 fde8 	bl	1b050 <z_impl_k_queue_get>
	if (!buf) {
   22480:	4605      	mov	r5, r0
   22482:	b128      	cbz	r0, 22490 <net_buf_get+0x18>
   22484:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   22486:	7963      	ldrb	r3, [r4, #5]
   22488:	f013 0301 	ands.w	r3, r3, #1
   2248c:	d102      	bne.n	22494 <net_buf_get+0x1c>
	frag->frags = NULL;
   2248e:	6023      	str	r3, [r4, #0]
}
   22490:	4628      	mov	r0, r5
   22492:	bd70      	pop	{r4, r5, r6, pc}
   22494:	2300      	movs	r3, #0
   22496:	2200      	movs	r2, #0
   22498:	4630      	mov	r0, r6
   2249a:	f7f8 fdd9 	bl	1b050 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   2249e:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   224a0:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   224a2:	f023 0301 	bic.w	r3, r3, #1
   224a6:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   224a8:	4604      	mov	r4, r0
   224aa:	e7ec      	b.n	22486 <net_buf_get+0xe>

000224ac <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   224ac:	6883      	ldr	r3, [r0, #8]
   224ae:	440b      	add	r3, r1
   224b0:	6003      	str	r3, [r0, #0]
}
   224b2:	4770      	bx	lr

000224b4 <net_buf_slist_put>:
{
   224b4:	b510      	push	{r4, lr}
	for (tail = buf; tail->frags; tail = tail->frags) {
   224b6:	460b      	mov	r3, r1
   224b8:	681c      	ldr	r4, [r3, #0]
   224ba:	b98c      	cbnz	r4, 224e0 <net_buf_slist_put+0x2c>
	__asm__ volatile(
   224bc:	f04f 0240 	mov.w	r2, #64	; 0x40
   224c0:	f3ef 8411 	mrs	r4, BASEPRI
   224c4:	f382 8812 	msr	BASEPRI_MAX, r2
   224c8:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(slist, snode)
   224cc:	b119      	cbz	r1, 224d6 <net_buf_slist_put+0x22>
	return list->tail;
   224ce:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   224d0:	b962      	cbnz	r2, 224ec <net_buf_slist_put+0x38>
	list->head = node;
   224d2:	6001      	str	r1, [r0, #0]
	list->tail = node;
   224d4:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   224d6:	f384 8811 	msr	BASEPRI, r4
   224da:	f3bf 8f6f 	isb	sy
}
   224de:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   224e0:	795a      	ldrb	r2, [r3, #5]
   224e2:	f042 0201 	orr.w	r2, r2, #1
   224e6:	715a      	strb	r2, [r3, #5]
   224e8:	4623      	mov	r3, r4
   224ea:	e7e5      	b.n	224b8 <net_buf_slist_put+0x4>
	parent->next = child;
   224ec:	6011      	str	r1, [r2, #0]
}
   224ee:	e7f1      	b.n	224d4 <net_buf_slist_put+0x20>

000224f0 <net_buf_slist_get>:
{
   224f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   224f2:	4603      	mov	r3, r0
	__asm__ volatile(
   224f4:	f04f 0240 	mov.w	r2, #64	; 0x40
   224f8:	f3ef 8611 	mrs	r6, BASEPRI
   224fc:	f382 8812 	msr	BASEPRI_MAX, r2
   22500:	f3bf 8f6f 	isb	sy
	return list->head;
   22504:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   22506:	b158      	cbz	r0, 22520 <net_buf_slist_get+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22508:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2250a:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2250c:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2250e:	4288      	cmp	r0, r1
	list->tail = node;
   22510:	bf08      	it	eq
   22512:	605a      	streq	r2, [r3, #4]
   22514:	4602      	mov	r2, r0
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   22516:	7951      	ldrb	r1, [r2, #5]
   22518:	f011 0401 	ands.w	r4, r1, #1
   2251c:	d105      	bne.n	2252a <net_buf_slist_get+0x3a>
		frag->frags = NULL;
   2251e:	6014      	str	r4, [r2, #0]
	__asm__ volatile(
   22520:	f386 8811 	msr	BASEPRI, r6
   22524:	f3bf 8f6f 	isb	sy
}
   22528:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return list->head;
   2252a:	681c      	ldr	r4, [r3, #0]
Z_GENLIST_GET(slist, snode)
   2252c:	b12c      	cbz	r4, 2253a <net_buf_slist_get+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2252e:	685f      	ldr	r7, [r3, #4]
	return node->next;
   22530:	6825      	ldr	r5, [r4, #0]
	list->head = node;
   22532:	601d      	str	r5, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22534:	42bc      	cmp	r4, r7
	list->tail = node;
   22536:	bf08      	it	eq
   22538:	605d      	streq	r5, [r3, #4]
			frag->flags &= ~NET_BUF_FRAGS;
   2253a:	f021 0101 	bic.w	r1, r1, #1
			frag->frags = (void *)sys_slist_get(list);
   2253e:	6014      	str	r4, [r2, #0]
			frag->flags &= ~NET_BUF_FRAGS;
   22540:	7151      	strb	r1, [r2, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   22542:	4622      	mov	r2, r4
   22544:	e7e7      	b.n	22516 <net_buf_slist_get+0x26>

00022546 <net_buf_put>:
{
   22546:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   22548:	460a      	mov	r2, r1
   2254a:	6814      	ldr	r4, [r2, #0]
   2254c:	b914      	cbnz	r4, 22554 <net_buf_put+0xe>
}
   2254e:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   22550:	f000 be86 	b.w	23260 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   22554:	7953      	ldrb	r3, [r2, #5]
   22556:	f043 0301 	orr.w	r3, r3, #1
   2255a:	7153      	strb	r3, [r2, #5]
   2255c:	4622      	mov	r2, r4
   2255e:	e7f4      	b.n	2254a <net_buf_put+0x4>

00022560 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   22560:	7902      	ldrb	r2, [r0, #4]
   22562:	3201      	adds	r2, #1
   22564:	7102      	strb	r2, [r0, #4]
	return buf;
}
   22566:	4770      	bx	lr

00022568 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   22568:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2256a:	4618      	mov	r0, r3
   2256c:	681b      	ldr	r3, [r3, #0]
   2256e:	2b00      	cmp	r3, #0
   22570:	d1fb      	bne.n	2256a <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   22572:	4770      	bx	lr

00022574 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   22574:	6802      	ldr	r2, [r0, #0]
{
   22576:	b510      	push	{r4, lr}
	if (parent->frags) {
   22578:	b12a      	cbz	r2, 22586 <net_buf_frag_insert+0x12>
   2257a:	460b      	mov	r3, r1
	while (buf->frags) {
   2257c:	461c      	mov	r4, r3
   2257e:	681b      	ldr	r3, [r3, #0]
   22580:	2b00      	cmp	r3, #0
   22582:	d1fb      	bne.n	2257c <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   22584:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   22586:	6001      	str	r1, [r0, #0]
}
   22588:	bd10      	pop	{r4, pc}

0002258a <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2258a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   2258c:	4604      	mov	r4, r0
   2258e:	b920      	cbnz	r0, 2259a <net_buf_frag_add+0x10>
	buf->ref++;
   22590:	790b      	ldrb	r3, [r1, #4]
   22592:	3301      	adds	r3, #1
   22594:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   22596:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   22598:	bd10      	pop	{r4, pc}
   2259a:	4603      	mov	r3, r0
	while (buf->frags) {
   2259c:	4618      	mov	r0, r3
   2259e:	681b      	ldr	r3, [r3, #0]
   225a0:	2b00      	cmp	r3, #0
   225a2:	d1fb      	bne.n	2259c <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   225a4:	f7ff ffe6 	bl	22574 <net_buf_frag_insert>
   225a8:	4620      	mov	r0, r4
   225aa:	e7f5      	b.n	22598 <net_buf_frag_add+0xe>

000225ac <net_buf_simple_add>:
	return buf->data + buf->len;
   225ac:	8883      	ldrh	r3, [r0, #4]
   225ae:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   225b0:	4419      	add	r1, r3
   225b2:	8081      	strh	r1, [r0, #4]
	return tail;
}
   225b4:	18d0      	adds	r0, r2, r3
   225b6:	4770      	bx	lr

000225b8 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   225b8:	b430      	push	{r4, r5}
   225ba:	8884      	ldrh	r4, [r0, #4]
   225bc:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   225be:	18a3      	adds	r3, r4, r2
   225c0:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   225c2:	1928      	adds	r0, r5, r4
}
   225c4:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   225c6:	f7fd bfc3 	b.w	20550 <memcpy>

000225ca <net_buf_simple_add_u8>:
   225ca:	8883      	ldrh	r3, [r0, #4]
   225cc:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   225ce:	b510      	push	{r4, lr}
	buf->len += len;
   225d0:	1c5c      	adds	r4, r3, #1
   225d2:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   225d4:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   225d6:	18d0      	adds	r0, r2, r3
   225d8:	bd10      	pop	{r4, pc}

000225da <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   225da:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   225dc:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   225de:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   225e0:	1a40      	subs	r0, r0, r1
	buf->len += len;
   225e2:	4411      	add	r1, r2
	buf->data -= len;
   225e4:	6018      	str	r0, [r3, #0]
	buf->len += len;
   225e6:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   225e8:	4770      	bx	lr

000225ea <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   225ea:	8882      	ldrh	r2, [r0, #4]
   225ec:	1a52      	subs	r2, r2, r1
{
   225ee:	4603      	mov	r3, r0
	buf->len -= len;
   225f0:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   225f2:	6800      	ldr	r0, [r0, #0]
   225f4:	4408      	add	r0, r1
   225f6:	6018      	str	r0, [r3, #0]
}
   225f8:	4770      	bx	lr

000225fa <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   225fa:	4603      	mov	r3, r0
	void *data = buf->data;
   225fc:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   225fe:	889a      	ldrh	r2, [r3, #4]
   22600:	1a52      	subs	r2, r2, r1
	buf->data += len;
   22602:	4401      	add	r1, r0
	buf->len -= len;
   22604:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   22606:	6019      	str	r1, [r3, #0]

	return data;
}
   22608:	4770      	bx	lr

0002260a <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2260a:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2260c:	6803      	ldr	r3, [r0, #0]
   2260e:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   22610:	2102      	movs	r1, #2
   22612:	f7ff ffea 	bl	225ea <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   22616:	4620      	mov	r0, r4
   22618:	bd10      	pop	{r4, pc}

0002261a <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2261a:	6802      	ldr	r2, [r0, #0]
   2261c:	6880      	ldr	r0, [r0, #8]
}
   2261e:	1a10      	subs	r0, r2, r0
   22620:	4770      	bx	lr

00022622 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   22622:	8883      	ldrh	r3, [r0, #4]
   22624:	88c2      	ldrh	r2, [r0, #6]
   22626:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   22628:	6803      	ldr	r3, [r0, #0]
   2262a:	6880      	ldr	r0, [r0, #8]
   2262c:	1a18      	subs	r0, r3, r0
}
   2262e:	1a10      	subs	r0, r2, r0
   22630:	4770      	bx	lr

00022632 <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   22632:	f1a0 0308 	sub.w	r3, r0, #8
   22636:	f3bf 8f5b 	dmb	ish
   2263a:	e853 2f00 	ldrex	r2, [r3]
   2263e:	1c51      	adds	r1, r2, #1
   22640:	e843 1c00 	strex	ip, r1, [r3]
   22644:	f1bc 0f00 	cmp.w	ip, #0
   22648:	d1f7      	bne.n	2263a <adc_context_on_timer_expired+0x8>
   2264a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   2264e:	b91a      	cbnz	r2, 22658 <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
   22650:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
   22654:	f7f4 bf24 	b.w	174a0 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
   22658:	f06f 030f 	mvn.w	r3, #15
   2265c:	6683      	str	r3, [r0, #104]	; 0x68
}
   2265e:	4770      	bx	lr

00022660 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   22660:	6903      	ldr	r3, [r0, #16]
   22662:	b2c9      	uxtb	r1, r1
   22664:	220c      	movs	r2, #12
   22666:	fb01 3302 	mla	r3, r1, r2, r3
   2266a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   2266c:	f000 0007 	and.w	r0, r0, #7
   22670:	4770      	bx	lr

00022672 <set_on_state>:
	__asm__ volatile(
   22672:	f04f 0340 	mov.w	r3, #64	; 0x40
   22676:	f3ef 8211 	mrs	r2, BASEPRI
   2267a:	f383 8812 	msr	BASEPRI_MAX, r3
   2267e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   22682:	6803      	ldr	r3, [r0, #0]
   22684:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   22688:	f043 0302 	orr.w	r3, r3, #2
   2268c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2268e:	f382 8811 	msr	BASEPRI, r2
   22692:	f3bf 8f6f 	isb	sy
}
   22696:	4770      	bx	lr

00022698 <stop>:
{
   22698:	4603      	mov	r3, r0
   2269a:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   2269c:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   2269e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   226a0:	f04f 0440 	mov.w	r4, #64	; 0x40
   226a4:	f3ef 8611 	mrs	r6, BASEPRI
   226a8:	f384 8812 	msr	BASEPRI_MAX, r4
   226ac:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   226b0:	250c      	movs	r5, #12
   226b2:	fb05 0401 	mla	r4, r5, r1, r0
   226b6:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   226b8:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   226bc:	d001      	beq.n	226c2 <stop+0x2a>
   226be:	42a2      	cmp	r2, r4
   226c0:	d110      	bne.n	226e4 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   226c2:	fb05 0001 	mla	r0, r5, r1, r0
   226c6:	2201      	movs	r2, #1
   226c8:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   226ca:	2000      	movs	r0, #0
	__asm__ volatile(
   226cc:	f386 8811 	msr	BASEPRI, r6
   226d0:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   226d4:	b928      	cbnz	r0, 226e2 <stop+0x4a>
	get_sub_config(dev, type)->stop();
   226d6:	685b      	ldr	r3, [r3, #4]
   226d8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   226dc:	684b      	ldr	r3, [r1, #4]
   226de:	4798      	blx	r3
	return 0;
   226e0:	2000      	movs	r0, #0
}
   226e2:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   226e4:	f04f 30ff 	mov.w	r0, #4294967295
   226e8:	e7f0      	b.n	226cc <stop+0x34>

000226ea <api_stop>:
	return stop(dev, subsys, CTX_API);
   226ea:	2280      	movs	r2, #128	; 0x80
   226ec:	f7ff bfd4 	b.w	22698 <stop>

000226f0 <async_start>:
{
   226f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   226f2:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   226f4:	6904      	ldr	r4, [r0, #16]
{
   226f6:	4605      	mov	r5, r0
   226f8:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   226fa:	f04f 0040 	mov.w	r0, #64	; 0x40
   226fe:	f3ef 8c11 	mrs	ip, BASEPRI
   22702:	f380 8812 	msr	BASEPRI_MAX, r0
   22706:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2270a:	260c      	movs	r6, #12
   2270c:	fb06 4601 	mla	r6, r6, r1, r4
   22710:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   22712:	f000 0e07 	and.w	lr, r0, #7
   22716:	f1be 0f01 	cmp.w	lr, #1
   2271a:	d111      	bne.n	22740 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2271c:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   2271e:	2600      	movs	r6, #0
	__asm__ volatile(
   22720:	f38c 8811 	msr	BASEPRI, ip
   22724:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   22728:	b946      	cbnz	r6, 2273c <async_start+0x4c>
	subdata->cb = cb;
   2272a:	200c      	movs	r0, #12
   2272c:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
   22730:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   22734:	686b      	ldr	r3, [r5, #4]
   22736:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   2273a:	4798      	blx	r3
}
   2273c:	4630      	mov	r0, r6
   2273e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   22740:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   22744:	4287      	cmp	r7, r0
   22746:	bf14      	ite	ne
   22748:	f04f 36ff 	movne.w	r6, #4294967295
   2274c:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   22750:	e7e6      	b.n	22720 <async_start+0x30>

00022752 <api_start>:
{
   22752:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   22754:	2480      	movs	r4, #128	; 0x80
   22756:	9400      	str	r4, [sp, #0]
   22758:	f7ff ffca 	bl	226f0 <async_start>
}
   2275c:	b002      	add	sp, #8
   2275e:	bd10      	pop	{r4, pc}

00022760 <onoff_started_callback>:
	return &data->mgr[type];
   22760:	6900      	ldr	r0, [r0, #16]
{
   22762:	b410      	push	{r4}
	return &data->mgr[type];
   22764:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   22766:	241c      	movs	r4, #28
   22768:	fb03 0004 	mla	r0, r3, r4, r0
   2276c:	2100      	movs	r1, #0
}
   2276e:	bc10      	pop	{r4}
	notify(mgr, 0);
   22770:	4710      	bx	r2

00022772 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   22772:	2000      	movs	r0, #0
   22774:	f7f7 b8b2 	b.w	198dc <nrfx_clock_start>

00022778 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   22778:	2000      	movs	r0, #0
   2277a:	f000 badf 	b.w	22d3c <nrfx_clock_stop>

0002277e <blocking_start_callback>:
{
   2277e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   22780:	f7f8 bc9a 	b.w	1b0b8 <z_impl_k_sem_give>

00022784 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22784:	6843      	ldr	r3, [r0, #4]
   22786:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   22788:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2278c:	600b      	str	r3, [r1, #0]
}
   2278e:	2000      	movs	r0, #0
   22790:	4770      	bx	lr

00022792 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22792:	6843      	ldr	r3, [r0, #4]
   22794:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   22796:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2279a:	4042      	eors	r2, r0
   2279c:	400a      	ands	r2, r1
   2279e:	4042      	eors	r2, r0
    p_reg->OUT = value;
   227a0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   227a4:	2000      	movs	r0, #0
   227a6:	4770      	bx	lr

000227a8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   227a8:	6843      	ldr	r3, [r0, #4]
   227aa:	685b      	ldr	r3, [r3, #4]
}
   227ac:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   227ae:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   227b2:	4770      	bx	lr

000227b4 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   227b4:	6843      	ldr	r3, [r0, #4]
   227b6:	685b      	ldr	r3, [r3, #4]
}
   227b8:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   227ba:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   227be:	4770      	bx	lr

000227c0 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   227c0:	6843      	ldr	r3, [r0, #4]
   227c2:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   227c4:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   227c8:	404b      	eors	r3, r1
    p_reg->OUT = value;
   227ca:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   227ce:	2000      	movs	r0, #0
   227d0:	4770      	bx	lr

000227d2 <gpio_nrfx_manage_callback>:
	return port->data;
   227d2:	6903      	ldr	r3, [r0, #16]
	return list->head;
   227d4:	6858      	ldr	r0, [r3, #4]
{
   227d6:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   227d8:	b158      	cbz	r0, 227f2 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   227da:	2400      	movs	r4, #0
   227dc:	4281      	cmp	r1, r0
   227de:	d112      	bne.n	22806 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   227e0:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   227e2:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   227e4:	b954      	cbnz	r4, 227fc <gpio_nrfx_manage_callback+0x2a>
   227e6:	428d      	cmp	r5, r1
	list->head = node;
   227e8:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   227ea:	d100      	bne.n	227ee <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   227ec:	6098      	str	r0, [r3, #8]
	parent->next = child;
   227ee:	2000      	movs	r0, #0
   227f0:	6008      	str	r0, [r1, #0]
	if (set) {
   227f2:	b96a      	cbnz	r2, 22810 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   227f4:	2000      	movs	r0, #0
}
   227f6:	bd30      	pop	{r4, r5, pc}
   227f8:	4628      	mov	r0, r5
   227fa:	e7ef      	b.n	227dc <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   227fc:	428d      	cmp	r5, r1
	parent->next = child;
   227fe:	6020      	str	r0, [r4, #0]
	list->tail = node;
   22800:	bf08      	it	eq
   22802:	609c      	streq	r4, [r3, #8]
}
   22804:	e7f3      	b.n	227ee <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   22806:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22808:	4604      	mov	r4, r0
   2280a:	2d00      	cmp	r5, #0
   2280c:	d1f4      	bne.n	227f8 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   2280e:	b13a      	cbz	r2, 22820 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   22810:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   22812:	685a      	ldr	r2, [r3, #4]
   22814:	600a      	str	r2, [r1, #0]
	list->head = node;
   22816:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   22818:	2800      	cmp	r0, #0
   2281a:	d1eb      	bne.n	227f4 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   2281c:	6099      	str	r1, [r3, #8]
}
   2281e:	e7ea      	b.n	227f6 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   22820:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   22824:	e7e7      	b.n	227f6 <gpio_nrfx_manage_callback+0x24>

00022826 <i2c_nrfx_twim_configure>:
{
   22826:	b538      	push	{r3, r4, r5, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
   22828:	07cb      	lsls	r3, r1, #31
{
   2282a:	4604      	mov	r4, r0
	if (I2C_ADDR_10_BITS & i2c_config) {
   2282c:	d41d      	bmi.n	2286a <i2c_nrfx_twim_configure+0x44>
	switch (I2C_SPEED_GET(i2c_config)) {
   2282e:	f3c1 0142 	ubfx	r1, r1, #1, #3
   22832:	2901      	cmp	r1, #1
   22834:	d016      	beq.n	22864 <i2c_nrfx_twim_configure+0x3e>
   22836:	2902      	cmp	r1, #2
   22838:	d117      	bne.n	2286a <i2c_nrfx_twim_configure+0x44>
   2283a:	f04f 63c8 	mov.w	r3, #104857600	; 0x6400000
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   2283e:	6925      	ldr	r5, [r4, #16]
	if (frequency != dev_data->twim_config.frequency) {
   22840:	6baa      	ldr	r2, [r5, #56]	; 0x38
   22842:	4293      	cmp	r3, r2
   22844:	d014      	beq.n	22870 <i2c_nrfx_twim_configure+0x4a>
		dev_data->twim_config.frequency = frequency;
   22846:	63ab      	str	r3, [r5, #56]	; 0x38
	if (dev_data->twim_initialized) {
   22848:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   2284c:	b12b      	cbz	r3, 2285a <i2c_nrfx_twim_configure+0x34>
		nrfx_twim_uninit(&dev_config->twim);
   2284e:	6860      	ldr	r0, [r4, #4]
   22850:	f7f7 fd9e 	bl	1a390 <nrfx_twim_uninit>
		dev_data->twim_initialized = false;
   22854:	2300      	movs	r3, #0
   22856:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
		return init_twim(dev);
   2285a:	4620      	mov	r0, r4
}
   2285c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return init_twim(dev);
   22860:	f7f5 bab2 	b.w	17dc8 <init_twim>
		frequency = NRF_TWIM_FREQ_100K;
   22864:	f04f 73cc 	mov.w	r3, #26738688	; 0x1980000
   22868:	e7e9      	b.n	2283e <i2c_nrfx_twim_configure+0x18>
	switch (I2C_SPEED_GET(i2c_config)) {
   2286a:	f06f 0015 	mvn.w	r0, #21
}
   2286e:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   22870:	2000      	movs	r0, #0
   22872:	e7fc      	b.n	2286e <i2c_nrfx_twim_configure+0x48>

00022874 <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
   22874:	b510      	push	{r4, lr}
   22876:	2200      	movs	r2, #0
   22878:	4604      	mov	r4, r0
   2287a:	2101      	movs	r1, #1
   2287c:	2003      	movs	r0, #3
   2287e:	f7f0 fe35 	bl	134ec <z_arm_irq_priority_set>
   22882:	4620      	mov	r0, r4
   22884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22888:	f7f5 ba9e 	b.w	17dc8 <init_twim>

0002288c <led_gpio_set_brightness>:
};

static int led_gpio_set_brightness(const struct device *dev, uint32_t led, uint8_t value)
{

	const struct led_gpio_config *config = dev->config;
   2288c:	6843      	ldr	r3, [r0, #4]
	const struct gpio_dt_spec *led_gpio;

	if ((led >= config->num_leds) || (value > 100)) {
   2288e:	6818      	ldr	r0, [r3, #0]
   22890:	4288      	cmp	r0, r1
{
   22892:	b410      	push	{r4}
	if ((led >= config->num_leds) || (value > 100)) {
   22894:	d917      	bls.n	228c6 <led_gpio_set_brightness+0x3a>
   22896:	2a64      	cmp	r2, #100	; 0x64
   22898:	d815      	bhi.n	228c6 <led_gpio_set_brightness+0x3a>
		return -EINVAL;
	}

	led_gpio = &config->led[led];
   2289a:	685b      	ldr	r3, [r3, #4]
   2289c:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	return gpio_pin_set(spec->port, spec->pin, value);
   228a0:	f853 0031 	ldr.w	r0, [r3, r1, lsl #3]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   228a4:	7923      	ldrb	r3, [r4, #4]
   228a6:	2101      	movs	r1, #1
   228a8:	4099      	lsls	r1, r3
   228aa:	6903      	ldr	r3, [r0, #16]
   228ac:	681b      	ldr	r3, [r3, #0]
   228ae:	4219      	tst	r1, r3
   228b0:	d004      	beq.n	228bc <led_gpio_set_brightness+0x30>
	if (value != 0)	{
   228b2:	b92a      	cbnz	r2, 228c0 <led_gpio_set_brightness+0x34>
	return api->port_set_bits_raw(port, pins);
   228b4:	6883      	ldr	r3, [r0, #8]
   228b6:	68db      	ldr	r3, [r3, #12]

	return gpio_pin_set_dt(led_gpio, value > 0);
}
   228b8:	bc10      	pop	{r4}
	return api->port_clear_bits_raw(port, pins);
   228ba:	4718      	bx	r3
	if (value != 0)	{
   228bc:	2a00      	cmp	r2, #0
   228be:	d1f9      	bne.n	228b4 <led_gpio_set_brightness+0x28>
	return api->port_clear_bits_raw(port, pins);
   228c0:	6883      	ldr	r3, [r0, #8]
   228c2:	691b      	ldr	r3, [r3, #16]
   228c4:	e7f8      	b.n	228b8 <led_gpio_set_brightness+0x2c>
   228c6:	f06f 0015 	mvn.w	r0, #21
   228ca:	bc10      	pop	{r4}
   228cc:	4770      	bx	lr

000228ce <led_gpio_on>:

static int led_gpio_on(const struct device *dev, uint32_t led)
{
	return led_gpio_set_brightness(dev, led, 100);
   228ce:	2264      	movs	r2, #100	; 0x64
   228d0:	f7ff bfdc 	b.w	2288c <led_gpio_set_brightness>

000228d4 <led_gpio_off>:
}

static int led_gpio_off(const struct device *dev, uint32_t led)
{
	return led_gpio_set_brightness(dev, led, 0);
   228d4:	2200      	movs	r2, #0
   228d6:	f7ff bfd9 	b.w	2288c <led_gpio_set_brightness>

000228da <led_gpio_init>:
}

static int led_gpio_init(const struct device *dev)
{
   228da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct led_gpio_config *config = dev->config;
   228de:	6847      	ldr	r7, [r0, #4]
	int err = 0;

	if (!config->num_leds) {
   228e0:	683b      	ldr	r3, [r7, #0]
   228e2:	b3b3      	cbz	r3, 22952 <led_gpio_init+0x78>
   228e4:	2400      	movs	r4, #0
	int err = 0;
   228e6:	4620      	mov	r0, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
   228e8:	2601      	movs	r6, #1
		LOG_ERR("%s: no LEDs found (DT child nodes missing)", dev->name);
		err = -ENODEV;
	}

	for (size_t i = 0; (i < config->num_leds) && !err; i++) {
   228ea:	683b      	ldr	r3, [r7, #0]
   228ec:	429c      	cmp	r4, r3
   228ee:	d200      	bcs.n	228f2 <led_gpio_init+0x18>
   228f0:	b108      	cbz	r0, 228f6 <led_gpio_init+0x1c>
			err = -ENODEV;
		}
	}

	return err;
}
   228f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		const struct gpio_dt_spec *led = &config->led[i];
   228f6:	687d      	ldr	r5, [r7, #4]
		if (device_is_ready(led->port)) {
   228f8:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
		const struct gpio_dt_spec *led = &config->led[i];
   228fc:	eb05 08c4 	add.w	r8, r5, r4, lsl #3
   22900:	f000 fb29 	bl	22f56 <z_device_is_ready>
		if (device_is_ready(led->port)) {
   22904:	b310      	cbz	r0, 2294c <led_gpio_init+0x72>
	return gpio_pin_configure(spec->port,
   22906:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   2290a:	f898 1004 	ldrb.w	r1, [r8, #4]
				  spec->dt_flags | extra_flags);
   2290e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
	struct gpio_driver_data *data =
   22912:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
   22916:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2291a:	f8dc 5000 	ldr.w	r5, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   2291e:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   22920:	bf54      	ite	pl
   22922:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   22926:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   2292a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2292e:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   22932:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   22934:	bf4c      	ite	mi
   22936:	ea4e 0505 	orrmi.w	r5, lr, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2293a:	ea25 050e 	bicpl.w	r5, r5, lr
	return api->pin_configure(port, pin, flags);
   2293e:	f8d8 3000 	ldr.w	r3, [r8]
   22942:	f8cc 5000 	str.w	r5, [ip]
   22946:	4798      	blx	r3
	for (size_t i = 0; (i < config->num_leds) && !err; i++) {
   22948:	3401      	adds	r4, #1
   2294a:	e7ce      	b.n	228ea <led_gpio_init+0x10>
			err = -ENODEV;
   2294c:	f06f 0012 	mvn.w	r0, #18
   22950:	e7fa      	b.n	22948 <led_gpio_init+0x6e>
		err = -ENODEV;
   22952:	f06f 0012 	mvn.w	r0, #18
	return err;
   22956:	e7cc      	b.n	228f2 <led_gpio_init+0x18>

00022958 <mpr_init>:
	data->i2c_master = device_get_binding(cfg->i2c_bus);
   22958:	6843      	ldr	r3, [r0, #4]
{
   2295a:	b510      	push	{r4, lr}
	struct mpr_data *data = dev->data;
   2295c:	6904      	ldr	r4, [r0, #16]
	data->i2c_master = device_get_binding(cfg->i2c_bus);
   2295e:	6818      	ldr	r0, [r3, #0]
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   22960:	f7f8 f890 	bl	1aa84 <z_impl_device_get_binding>
		return -EINVAL;
   22964:	2800      	cmp	r0, #0
	data->i2c_master = device_get_binding(cfg->i2c_bus);
   22966:	6020      	str	r0, [r4, #0]
}
   22968:	bf0c      	ite	eq
   2296a:	f06f 0015 	mvneq.w	r0, #21
   2296e:	2000      	movne	r0, #0
   22970:	bd10      	pop	{r4, pc}

00022972 <shtcx_channel_get>:
			      enum sensor_channel chan,
			      struct sensor_value *val)
{
	const struct shtcx_data *data = dev->data;

	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   22972:	290d      	cmp	r1, #13
	const struct shtcx_data *data = dev->data;
   22974:	6903      	ldr	r3, [r0, #16]
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   22976:	d118      	bne.n	229aa <shtcx_channel_get+0x38>
	tmp = (int32_t)raw * 175U - (45 << 16);
   22978:	881b      	ldrh	r3, [r3, #0]
   2297a:	21af      	movs	r1, #175	; 0xaf
   2297c:	434b      	muls	r3, r1
   2297e:	f5a3 1334 	sub.w	r3, r3, #2949120	; 0x2d0000
	val->val1 = tmp / 0x10000;
   22982:	2b00      	cmp	r3, #0
   22984:	4619      	mov	r1, r3
   22986:	bfbc      	itt	lt
   22988:	f503 417f 	addlt.w	r1, r3, #65280	; 0xff00
   2298c:	31ff      	addlt	r1, #255	; 0xff
   2298e:	1409      	asrs	r1, r1, #16
   22990:	6011      	str	r1, [r2, #0]
	val->val2 = ((tmp % 0x10000) * 15625U) / 1024;
   22992:	4259      	negs	r1, r3
   22994:	b289      	uxth	r1, r1
   22996:	b29b      	uxth	r3, r3
   22998:	bf58      	it	pl
   2299a:	424b      	negpl	r3, r1
	val->val2 = (tmp % 0x10000) * 15625U / 1024;
   2299c:	f643 5109 	movw	r1, #15625	; 0x3d09
   229a0:	434b      	muls	r3, r1
   229a2:	0a9b      	lsrs	r3, r3, #10
   229a4:	6053      	str	r3, [r2, #4]
		shtcx_humidity_from_raw(data->sample.humidity, val);
	} else {
		return -ENOTSUP;
	}

	return 0;
   229a6:	2000      	movs	r0, #0
}
   229a8:	4770      	bx	lr
	} else if (chan == SENSOR_CHAN_HUMIDITY) {
   229aa:	2910      	cmp	r1, #16
   229ac:	d106      	bne.n	229bc <shtcx_channel_get+0x4a>
	tmp = (uint32_t)raw * 100U;
   229ae:	885b      	ldrh	r3, [r3, #2]
   229b0:	2164      	movs	r1, #100	; 0x64
   229b2:	434b      	muls	r3, r1
	val->val1 = tmp / 0x10000;
   229b4:	0c19      	lsrs	r1, r3, #16
   229b6:	6011      	str	r1, [r2, #0]
	val->val2 = (tmp % 0x10000) * 15625U / 1024;
   229b8:	b29b      	uxth	r3, r3
   229ba:	e7ef      	b.n	2299c <shtcx_channel_get+0x2a>
		return -ENOTSUP;
   229bc:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   229c0:	4770      	bx	lr

000229c2 <shtcx_write_command.isra.0>:
static int shtcx_write_command(const struct device *dev, uint16_t cmd)
   229c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	dst[0] = val >> 8;
   229c4:	0a0a      	lsrs	r2, r1, #8
   229c6:	4603      	mov	r3, r0
   229c8:	f88d 2000 	strb.w	r2, [sp]
	msg.len = num_bytes;
   229cc:	2202      	movs	r2, #2
   229ce:	6800      	ldr	r0, [r0, #0]
	return i2c_write(shtcx_i2c_bus(dev), tx_buf, sizeof(tx_buf),
   229d0:	791b      	ldrb	r3, [r3, #4]
	dst[1] = val;
   229d2:	f88d 1001 	strb.w	r1, [sp, #1]
	msg.buf = (uint8_t *)buf;
   229d6:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
   229da:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   229dc:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   229e0:	6882      	ldr	r2, [r0, #8]
   229e2:	a901      	add	r1, sp, #4
   229e4:	6894      	ldr	r4, [r2, #8]
   229e6:	2201      	movs	r2, #1
   229e8:	47a0      	blx	r4
}
   229ea:	b004      	add	sp, #16
   229ec:	bd10      	pop	{r4, pc}

000229ee <shtcx_wakeup.isra.0>:
static int shtcx_wakeup(const struct device *dev)
   229ee:	b510      	push	{r4, lr}
   229f0:	f243 5117 	movw	r1, #13591	; 0x3517
   229f4:	f7ff ffe5 	bl	229c2 <shtcx_write_command.isra.0>
	if (shtcx_write_command(dev, SHTCX_CMD_WAKEUP)) {
   229f8:	4604      	mov	r4, r0
   229fa:	b928      	cbnz	r0, 22a08 <shtcx_wakeup.isra.0+0x1a>
	return z_impl_k_sleep(timeout);
   229fc:	2004      	movs	r0, #4
   229fe:	2100      	movs	r1, #0
   22a00:	f7f9 f840 	bl	1ba84 <z_impl_k_sleep>
}
   22a04:	4620      	mov	r0, r4
   22a06:	bd10      	pop	{r4, pc}
		return -EIO;
   22a08:	f06f 0404 	mvn.w	r4, #4
   22a0c:	e7fa      	b.n	22a04 <shtcx_wakeup.isra.0+0x16>

00022a0e <shtcx_init>:
	.sample_fetch = shtcx_sample_fetch,
	.channel_get = shtcx_channel_get,
};

static int shtcx_init(const struct device *dev)
{
   22a0e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct shtcx_config *cfg = dev->config;
   22a10:	6846      	ldr	r6, [r0, #4]
{
   22a12:	4605      	mov	r5, r0
	uint16_t product_id;

	if (device_is_ready(cfg->bus) ==  0) {
   22a14:	6830      	ldr	r0, [r6, #0]
   22a16:	f000 fa9e 	bl	22f56 <z_device_is_ready>
   22a1a:	2800      	cmp	r0, #0
   22a1c:	d048      	beq.n	22ab0 <shtcx_init+0xa2>
   22a1e:	2008      	movs	r0, #8
   22a20:	2100      	movs	r1, #0
   22a22:	f7f9 f82f 	bl	1ba84 <z_impl_k_sleep>
		LOG_DBG("i2c bus is not ready");
		return -ENODEV;
	}

	k_sleep(K_USEC(SHTCX_POWER_UP_TIME_US));
	if (cfg->chip == SHTC3) {
   22a26:	7973      	ldrb	r3, [r6, #5]
   22a28:	2b01      	cmp	r3, #1
   22a2a:	d00a      	beq.n	22a42 <shtcx_init+0x34>
			LOG_ERR("Wakeup failed");
			return -EIO;
		}
	}

	if (shtcx_write_command(dev, SHTCX_CMD_SOFT_RESET) < 0) {
   22a2c:	6868      	ldr	r0, [r5, #4]
   22a2e:	f248 015d 	movw	r1, #32861	; 0x805d
   22a32:	f7ff ffc6 	bl	229c2 <shtcx_write_command.isra.0>
   22a36:	2800      	cmp	r0, #0
   22a38:	da09      	bge.n	22a4e <shtcx_init+0x40>
			return -EIO;
   22a3a:	f06f 0004 	mvn.w	r0, #4

	LOG_DBG("Clock-stretching enabled: %d", cfg->clock_stretching);
	LOG_DBG("Measurement mode: %d", cfg->measure_mode);
	LOG_DBG("Init SHTCX");
	return 0;
}
   22a3e:	b004      	add	sp, #16
   22a40:	bd70      	pop	{r4, r5, r6, pc}
		if (shtcx_wakeup(dev)) {
   22a42:	6868      	ldr	r0, [r5, #4]
   22a44:	f7ff ffd3 	bl	229ee <shtcx_wakeup.isra.0>
   22a48:	2800      	cmp	r0, #0
   22a4a:	d0ef      	beq.n	22a2c <shtcx_init+0x1e>
   22a4c:	e7f5      	b.n	22a3a <shtcx_init+0x2c>
   22a4e:	2100      	movs	r1, #0
	if (shtcx_read_words(dev, SHTCX_CMD_READ_ID, &product_id, 1, 0) < 0) {
   22a50:	2400      	movs	r4, #0
   22a52:	2008      	movs	r0, #8
   22a54:	f7f9 f816 	bl	1ba84 <z_impl_k_sleep>
   22a58:	9400      	str	r4, [sp, #0]
   22a5a:	2301      	movs	r3, #1
   22a5c:	f10d 020e 	add.w	r2, sp, #14
   22a60:	f64e 71c8 	movw	r1, #61384	; 0xefc8
   22a64:	4628      	mov	r0, r5
   22a66:	f7f5 fb3b 	bl	180e0 <shtcx_read_words>
   22a6a:	42a0      	cmp	r0, r4
   22a6c:	dbe5      	blt.n	22a3a <shtcx_init+0x2c>
	if (cfg->chip == SHTC1) {
   22a6e:	7973      	ldrb	r3, [r6, #5]
   22a70:	b95b      	cbnz	r3, 22a8a <shtcx_init+0x7c>
		if ((product_id & SHTC1_ID_MASK) != SHTC1_ID_VALUE) {
   22a72:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   22a76:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
   22a7a:	051b      	lsls	r3, r3, #20
   22a7c:	0d1b      	lsrs	r3, r3, #20
			return -EINVAL;
   22a7e:	2b07      	cmp	r3, #7
   22a80:	bf0c      	ite	eq
   22a82:	4620      	moveq	r0, r4
   22a84:	f06f 0015 	mvnne.w	r0, #21
   22a88:	e7d9      	b.n	22a3e <shtcx_init+0x30>
	if (cfg->chip == SHTC3) {
   22a8a:	2b01      	cmp	r3, #1
   22a8c:	d10e      	bne.n	22aac <shtcx_init+0x9e>
		if ((product_id & SHTC3_ID_MASK) != SHTC3_ID_VALUE) {
   22a8e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   22a92:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
   22a96:	051b      	lsls	r3, r3, #20
   22a98:	0d1b      	lsrs	r3, r3, #20
   22a9a:	f640 0207 	movw	r2, #2055	; 0x807
   22a9e:	4293      	cmp	r3, r2
   22aa0:	d109      	bne.n	22ab6 <shtcx_init+0xa8>
	if (shtcx_write_command(dev, SHTCX_CMD_SLEEP) < 0) {
   22aa2:	6868      	ldr	r0, [r5, #4]
   22aa4:	f24b 0198 	movw	r1, #45208	; 0xb098
   22aa8:	f7ff ff8b 	bl	229c2 <shtcx_write_command.isra.0>
	return 0;
   22aac:	4620      	mov	r0, r4
   22aae:	e7c6      	b.n	22a3e <shtcx_init+0x30>
		return -ENODEV;
   22ab0:	f06f 0012 	mvn.w	r0, #18
   22ab4:	e7c3      	b.n	22a3e <shtcx_init+0x30>
			return -EINVAL;
   22ab6:	f06f 0015 	mvn.w	r0, #21
   22aba:	e7c0      	b.n	22a3e <shtcx_init+0x30>

00022abc <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   22abc:	6902      	ldr	r2, [r0, #16]
{
   22abe:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   22ac0:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   22ac4:	e883 0003 	stmia.w	r3, {r0, r1}
}
   22ac8:	2000      	movs	r0, #0
   22aca:	4770      	bx	lr

00022acc <uarte_nrfx_err_check>:
	return config->uarte_regs;
   22acc:	6843      	ldr	r3, [r0, #4]
   22ace:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   22ad0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   22ad4:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   22ad8:	4770      	bx	lr

00022ada <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   22ada:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   22adc:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   22ade:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22ae0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   22ae4:	b148      	cbz	r0, 22afa <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   22ae6:	7c52      	ldrb	r2, [r2, #17]
   22ae8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22aea:	2000      	movs	r0, #0
   22aec:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   22af0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22af4:	2201      	movs	r2, #1
   22af6:	601a      	str	r2, [r3, #0]
	return 0;
   22af8:	4770      	bx	lr
		return -1;
   22afa:	f04f 30ff 	mov.w	r0, #4294967295
}
   22afe:	4770      	bx	lr

00022b00 <nrf_gpio_cfg_input>:
{
   22b00:	b507      	push	{r0, r1, r2, lr}
   22b02:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22b04:	a801      	add	r0, sp, #4
   22b06:	f7f5 fb79 	bl	181fc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   22b0a:	9b01      	ldr	r3, [sp, #4]
   22b0c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   22b10:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   22b12:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
   22b16:	b003      	add	sp, #12
   22b18:	f85d fb04 	ldr.w	pc, [sp], #4

00022b1c <is_tx_ready.isra.0>:
	return config->uarte_regs;
   22b1c:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   22b1e:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22b20:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   22b24:	b940      	cbnz	r0, 22b38 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   22b26:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   22b28:	079b      	lsls	r3, r3, #30
   22b2a:	d406      	bmi.n	22b3a <is_tx_ready.isra.0+0x1e>
   22b2c:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   22b30:	3800      	subs	r0, #0
   22b32:	bf18      	it	ne
   22b34:	2001      	movne	r0, #1
   22b36:	4770      	bx	lr
   22b38:	2001      	movs	r0, #1
}
   22b3a:	4770      	bx	lr

00022b3c <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   22b3c:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   22b3e:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   22b40:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   22b44:	05c9      	lsls	r1, r1, #23
   22b46:	d518      	bpl.n	22b7a <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22b48:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   22b4c:	b1a9      	cbz	r1, 22b7a <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   22b4e:	f04f 0040 	mov.w	r0, #64	; 0x40
   22b52:	f3ef 8111 	mrs	r1, BASEPRI
   22b56:	f380 8812 	msr	BASEPRI_MAX, r0
   22b5a:	f3bf 8f6f 	isb	sy
   22b5e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   22b62:	b130      	cbz	r0, 22b72 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22b64:	2000      	movs	r0, #0
   22b66:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   22b6a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22b6e:	2001      	movs	r0, #1
   22b70:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   22b72:	f381 8811 	msr	BASEPRI, r1
   22b76:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   22b7a:	6852      	ldr	r2, [r2, #4]
   22b7c:	06d2      	lsls	r2, r2, #27
   22b7e:	d515      	bpl.n	22bac <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   22b80:	f04f 0140 	mov.w	r1, #64	; 0x40
   22b84:	f3ef 8211 	mrs	r2, BASEPRI
   22b88:	f381 8812 	msr	BASEPRI_MAX, r1
   22b8c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22b90:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   22b94:	b111      	cbz	r1, 22b9c <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   22b96:	2100      	movs	r1, #0
   22b98:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   22b9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   22ba0:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   22ba4:	f382 8811 	msr	BASEPRI, r2
   22ba8:	f3bf 8f6f 	isb	sy
}
   22bac:	4770      	bx	lr

00022bae <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   22bae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22bb0:	460f      	mov	r7, r1
   22bb2:	4616      	mov	r6, r2

	return err;
#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   22bb4:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   22bb8:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   22bba:	42a6      	cmp	r6, r4
   22bbc:	d803      	bhi.n	22bc6 <entropy_cc3xx_rng_get_entropy+0x18>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   22bbe:	d116      	bne.n	22bee <entropy_cc3xx_rng_get_entropy+0x40>
		err = 0;
   22bc0:	2000      	movs	r0, #0
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   22bc2:	b003      	add	sp, #12
   22bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   22bc6:	1b33      	subs	r3, r6, r4
   22bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   22bcc:	bf38      	it	cc
   22bce:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   22bd0:	462a      	mov	r2, r5
   22bd2:	ab01      	add	r3, sp, #4
   22bd4:	1939      	adds	r1, r7, r4
   22bd6:	2000      	movs	r0, #0
   22bd8:	f7f9 fe60 	bl	1c89c <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
   22bdc:	b920      	cbnz	r0, 22be8 <entropy_cc3xx_rng_get_entropy+0x3a>
		if (olen != chunk_size) {
   22bde:	9b01      	ldr	r3, [sp, #4]
   22be0:	42ab      	cmp	r3, r5
   22be2:	d101      	bne.n	22be8 <entropy_cc3xx_rng_get_entropy+0x3a>
		offset += chunk_size;
   22be4:	442c      	add	r4, r5
   22be6:	e7e8      	b.n	22bba <entropy_cc3xx_rng_get_entropy+0xc>
			return -EINVAL;
   22be8:	f06f 0015 	mvn.w	r0, #21
   22bec:	e7e9      	b.n	22bc2 <entropy_cc3xx_rng_get_entropy+0x14>
	int err = EINVAL;
   22bee:	2016      	movs	r0, #22
   22bf0:	e7e7      	b.n	22bc2 <entropy_cc3xx_rng_get_entropy+0x14>

00022bf2 <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   22bf2:	2200      	movs	r2, #0
{
   22bf4:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   22bf6:	4611      	mov	r1, r2
   22bf8:	4610      	mov	r0, r2
   22bfa:	f7f9 fe1d 	bl	1c838 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   22bfe:	2800      	cmp	r0, #0
	}
#endif

	return 0;
}
   22c00:	bf18      	it	ne
   22c02:	f06f 0015 	mvnne.w	r0, #21
   22c06:	bd08      	pop	{r3, pc}

00022c08 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   22c08:	4770      	bx	lr

00022c0a <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   22c0a:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   22c0c:	2000      	movs	r0, #0
   22c0e:	f7f0 ffef 	bl	13bf0 <sys_arch_reboot>

00022c12 <sdc_assertion_handler>:
	k_oops();
   22c12:	4040      	eors	r0, r0
   22c14:	f380 8811 	msr	BASEPRI, r0
   22c18:	f04f 0003 	mov.w	r0, #3
   22c1c:	df02      	svc	2
}
   22c1e:	4770      	bx	lr

00022c20 <rand_prio_high_vector_get>:
   22c20:	f7f6 b90c 	b.w	18e3c <rand_prio_low_vector_get>

00022c24 <hci_driver_send>:
{
   22c24:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   22c26:	8983      	ldrh	r3, [r0, #12]
{
   22c28:	4605      	mov	r5, r0
	if (!buf->len) {
   22c2a:	b373      	cbz	r3, 22c8a <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   22c2c:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   22c2e:	b1a3      	cbz	r3, 22c5a <hci_driver_send+0x36>
   22c30:	2b02      	cmp	r3, #2
   22c32:	d12a      	bne.n	22c8a <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   22c34:	f04f 30ff 	mov.w	r0, #4294967295
   22c38:	f04f 31ff 	mov.w	r1, #4294967295
   22c3c:	f7f6 f84a 	bl	18cd4 <multithreading_lock_acquire>
	if (!errcode) {
   22c40:	4604      	mov	r4, r0
   22c42:	b940      	cbnz	r0, 22c56 <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   22c44:	68a8      	ldr	r0, [r5, #8]
   22c46:	f7ea fd8c 	bl	d762 <sdc_hci_data_put>
   22c4a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   22c4c:	f7f6 f84a 	bl	18ce4 <multithreading_lock_release>
		if (errcode) {
   22c50:	b1b4      	cbz	r4, 22c80 <hci_driver_send+0x5c>
			receive_signal_raise();
   22c52:	f7f6 f907 	bl	18e64 <receive_signal_raise>
}
   22c56:	4620      	mov	r0, r4
   22c58:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   22c5a:	f04f 30ff 	mov.w	r0, #4294967295
   22c5e:	f04f 31ff 	mov.w	r1, #4294967295
   22c62:	f7f6 f837 	bl	18cd4 <multithreading_lock_acquire>
	if (!errcode) {
   22c66:	4604      	mov	r4, r0
   22c68:	2800      	cmp	r0, #0
   22c6a:	d1f4      	bne.n	22c56 <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   22c6c:	68a8      	ldr	r0, [r5, #8]
   22c6e:	f7f6 f96f 	bl	18f50 <hci_internal_cmd_put>
   22c72:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   22c74:	f7f6 f836 	bl	18ce4 <multithreading_lock_release>
	if (errcode) {
   22c78:	2c00      	cmp	r4, #0
   22c7a:	d1ec      	bne.n	22c56 <hci_driver_send+0x32>
	receive_signal_raise();
   22c7c:	f7f6 f8f2 	bl	18e64 <receive_signal_raise>
		net_buf_unref(buf);
   22c80:	4628      	mov	r0, r5
   22c82:	f7f4 fb71 	bl	17368 <net_buf_unref>
   22c86:	2400      	movs	r4, #0
   22c88:	e7e5      	b.n	22c56 <hci_driver_send+0x32>
	switch (type) {
   22c8a:	f06f 0415 	mvn.w	r4, #21
   22c8e:	e7e2      	b.n	22c56 <hci_driver_send+0x32>

00022c90 <receive_work_handler>:
	hci_driver_receive_process();
   22c90:	f7f6 b8fc 	b.w	18e8c <hci_driver_receive_process>

00022c94 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   22c94:	f101 0320 	add.w	r3, r1, #32
   22c98:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   22c9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   22c9e:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   22ca2:	428b      	cmp	r3, r1
   22ca4:	d1f9      	bne.n	22c9a <sys_memcpy_swap.constprop.0+0x6>
}
   22ca6:	4770      	bx	lr

00022ca8 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   22ca8:	2100      	movs	r1, #0
   22caa:	f7f6 bd8b 	b.w	197c4 <cmd_le_generate_dhkey>

00022cae <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   22cae:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   22cb2:	2901      	cmp	r1, #1
   22cb4:	d801      	bhi.n	22cba <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   22cb6:	f7f6 bd85 	b.w	197c4 <cmd_le_generate_dhkey>
}
   22cba:	2012      	movs	r0, #18
   22cbc:	4770      	bx	lr

00022cbe <m_assert_handler>:
	k_oops();
   22cbe:	4040      	eors	r0, r0
   22cc0:	f380 8811 	msr	BASEPRI, r0
   22cc4:	f04f 0003 	mov.w	r0, #3
   22cc8:	df02      	svc	2
}
   22cca:	4770      	bx	lr

00022ccc <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   22ccc:	4668      	mov	r0, sp
   22cce:	f020 0107 	bic.w	r1, r0, #7
   22cd2:	468d      	mov	sp, r1
   22cd4:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   22cd6:	f7e0 ff63 	bl	3ba0 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   22cda:	f7f0 fc21 	bl	13520 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   22cde:	f7f0 fd09 	bl	136f4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   22ce2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   22ce6:	4685      	mov	sp, r0
   22ce8:	4770      	bx	lr

00022cea <mpsl_low_prio_work_handler>:
{
   22cea:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   22cec:	f04f 31ff 	mov.w	r1, #4294967295
   22cf0:	f04f 30ff 	mov.w	r0, #4294967295
   22cf4:	f7f5 ffee 	bl	18cd4 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   22cf8:	f7ea f8c4 	bl	ce84 <mpsl_low_priority_process>
}
   22cfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   22d00:	f7f5 bff0 	b.w	18ce4 <multithreading_lock_release>

00022d04 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   22d04:	4668      	mov	r0, sp
   22d06:	f020 0107 	bic.w	r1, r0, #7
   22d0a:	468d      	mov	sp, r1
   22d0c:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   22d0e:	f7e0 fec5 	bl	3a9c <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   22d12:	f7f0 fc05 	bl	13520 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   22d16:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   22d1a:	4685      	mov	sp, r0
   22d1c:	4770      	bx	lr

00022d1e <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   22d1e:	4668      	mov	r0, sp
   22d20:	f020 0107 	bic.w	r1, r0, #7
   22d24:	468d      	mov	sp, r1
   22d26:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   22d28:	f7e9 ffd4 	bl	ccd4 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   22d2c:	f7f0 fbf8 	bl	13520 <_arch_isr_direct_pm>
   22d30:	f7f0 fce0 	bl	136f4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   22d34:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   22d38:	4685      	mov	sp, r0
   22d3a:	4770      	bx	lr

00022d3c <nrfx_clock_stop>:
	switch (domain) {
   22d3c:	2801      	cmp	r0, #1
   22d3e:	d101      	bne.n	22d44 <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   22d40:	f7e1 bd4e 	b.w	47e0 <mpsl_clock_hfclk_release>
}
   22d44:	4770      	bx	lr

00022d46 <nrfx_clock_enable>:
}
   22d46:	4770      	bx	lr

00022d48 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   22d48:	f7e1 bb64 	b.w	4414 <MPSL_IRQ_CLOCK_Handler>

00022d4c <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   22d4c:	f7f9 bd1e 	b.w	1c78c <nrf_cc3xx_platform_init>

00022d50 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   22d50:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   22d52:	f7f0 fab1 	bl	132b8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   22d56:	f7f0 fb63 	bl	13420 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   22d5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   22d5e:	f7f9 bd15 	b.w	1c78c <nrf_cc3xx_platform_init>

00022d62 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   22d62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   22d66:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   22d6a:	f1a0 0308 	sub.w	r3, r0, #8
   22d6e:	4258      	negs	r0, r3
   22d70:	4158      	adcs	r0, r3
   22d72:	4770      	bx	lr

00022d74 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   22d74:	4700      	bx	r0

00022d76 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   22d76:	f000 bd0f 	b.w	23798 <z_impl_k_busy_wait>

00022d7a <nrf_gpio_reconfigure>:
{
   22d7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22d7c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22d7e:	a801      	add	r0, sp, #4
{
   22d80:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   22d84:	4617      	mov	r7, r2
   22d86:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22d88:	f7f6 ff0c 	bl	19ba4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   22d8c:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   22d8e:	2f00      	cmp	r7, #0
   22d90:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   22d94:	bf14      	ite	ne
   22d96:	2302      	movne	r3, #2
   22d98:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   22d9a:	2900      	cmp	r1, #0
   22d9c:	bf18      	it	ne
   22d9e:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   22da2:	2d00      	cmp	r5, #0
   22da4:	bf14      	ite	ne
   22da6:	f04f 0c0c 	movne.w	ip, #12
   22daa:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   22dae:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   22db0:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   22db4:	bf14      	ite	ne
   22db6:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   22dba:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   22dbe:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   22dc0:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   22dc4:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   22dc8:	bf14      	ite	ne
   22dca:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   22dce:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   22dd2:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   22dd6:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   22dda:	b101      	cbz	r1, 22dde <nrf_gpio_reconfigure+0x64>
   22ddc:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   22dde:	b10f      	cbz	r7, 22de4 <nrf_gpio_reconfigure+0x6a>
   22de0:	783f      	ldrb	r7, [r7, #0]
   22de2:	007f      	lsls	r7, r7, #1
   22de4:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   22de6:	b10d      	cbz	r5, 22dec <nrf_gpio_reconfigure+0x72>
   22de8:	782d      	ldrb	r5, [r5, #0]
   22dea:	00ad      	lsls	r5, r5, #2
   22dec:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   22dee:	b10c      	cbz	r4, 22df4 <nrf_gpio_reconfigure+0x7a>
   22df0:	7822      	ldrb	r2, [r4, #0]
   22df2:	0214      	lsls	r4, r2, #8
   22df4:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   22df6:	b10e      	cbz	r6, 22dfc <nrf_gpio_reconfigure+0x82>
   22df8:	7836      	ldrb	r6, [r6, #0]
   22dfa:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   22dfc:	432c      	orrs	r4, r5
   22dfe:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   22e00:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   22e04:	b003      	add	sp, #12
   22e06:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022e08 <nrf_gpio_cfg_sense_set>:
{
   22e08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   22e0a:	f10d 030f 	add.w	r3, sp, #15
   22e0e:	9301      	str	r3, [sp, #4]
   22e10:	2300      	movs	r3, #0
{
   22e12:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   22e16:	9300      	str	r3, [sp, #0]
   22e18:	461a      	mov	r2, r3
   22e1a:	4619      	mov	r1, r3
   22e1c:	f7ff ffad 	bl	22d7a <nrf_gpio_reconfigure>
}
   22e20:	b005      	add	sp, #20
   22e22:	f85d fb04 	ldr.w	pc, [sp], #4

00022e26 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   22e26:	7b0a      	ldrb	r2, [r1, #12]
{
   22e28:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
   22e2a:	2a03      	cmp	r2, #3
   22e2c:	d829      	bhi.n	22e82 <xfer_completeness_check+0x5c>
   22e2e:	e8df f002 	tbb	[pc, r2]
   22e32:	2521      	.short	0x2521
   22e34:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   22e36:	688a      	ldr	r2, [r1, #8]
   22e38:	0350      	lsls	r0, r2, #13
   22e3a:	d504      	bpl.n	22e46 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   22e3c:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   22e40:	6908      	ldr	r0, [r1, #16]
   22e42:	4290      	cmp	r0, r2
   22e44:	d107      	bne.n	22e56 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   22e46:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   22e48:	0352      	lsls	r2, r2, #13
   22e4a:	d41a      	bmi.n	22e82 <xfer_completeness_check+0x5c>
   22e4c:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   22e50:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   22e52:	4291      	cmp	r1, r2
   22e54:	d015      	beq.n	22e82 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   22e56:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   22e58:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   22e5a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   22e5e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   22e62:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   22e64:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   22e68:	6908      	ldr	r0, [r1, #16]
   22e6a:	4290      	cmp	r0, r2
   22e6c:	d1f3      	bne.n	22e56 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   22e6e:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   22e72:	e7ed      	b.n	22e50 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   22e74:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   22e78:	6909      	ldr	r1, [r1, #16]
   22e7a:	e7ea      	b.n	22e52 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   22e7c:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   22e80:	e7fa      	b.n	22e78 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   22e82:	2001      	movs	r0, #1
}
   22e84:	4770      	bx	lr

00022e86 <nrf_gpio_pin_set>:
{
   22e86:	b507      	push	{r0, r1, r2, lr}
   22e88:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22e8a:	a801      	add	r0, sp, #4
   22e8c:	f7f7 fd02 	bl	1a894 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   22e90:	9a01      	ldr	r2, [sp, #4]
   22e92:	2301      	movs	r3, #1
   22e94:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   22e96:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   22e9a:	b003      	add	sp, #12
   22e9c:	f85d fb04 	ldr.w	pc, [sp], #4

00022ea0 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   22ea0:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   22ea2:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   22ea4:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   22ea6:	bf9c      	itt	ls
   22ea8:	6880      	ldrls	r0, [r0, #8]
   22eaa:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   22eac:	3b01      	subs	r3, #1
   22eae:	1a98      	subs	r0, r3, r2
}
   22eb0:	4770      	bx	lr

00022eb2 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   22eb2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   22eb6:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   22eba:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   22ebc:	eba9 0804 	sub.w	r8, r9, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   22ec0:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   22ec2:	4590      	cmp	r8, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   22ec4:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   22ec6:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   22ec8:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   22eca:	d906      	bls.n	22eda <_WriteNoCheck+0x28>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   22ecc:	f7fd fb40 	bl	20550 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   22ed0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
   22ed4:	60ec      	str	r4, [r5, #12]
}
   22ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   22eda:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   22edc:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   22ee0:	f7fd fb36 	bl	20550 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   22ee4:	6868      	ldr	r0, [r5, #4]
   22ee6:	4622      	mov	r2, r4
   22ee8:	eb07 0108 	add.w	r1, r7, r8
   22eec:	e7ee      	b.n	22ecc <_WriteNoCheck+0x1a>

00022eee <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   22eee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   22ef2:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   22ef4:	4606      	mov	r6, r0
   22ef6:	4689      	mov	r9, r1
   22ef8:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   22efa:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   22efe:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   22f00:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   22f02:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   22f04:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   22f06:	bf28      	it	cs
   22f08:	18e4      	addcs	r4, r4, r3
   22f0a:	3c01      	subs	r4, #1
   22f0c:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   22f0e:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   22f10:	42bc      	cmp	r4, r7
   22f12:	bf28      	it	cs
   22f14:	463c      	movcs	r4, r7
   22f16:	4294      	cmp	r4, r2
   22f18:	bf28      	it	cs
   22f1a:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   22f1c:	4649      	mov	r1, r9
   22f1e:	4622      	mov	r2, r4
   22f20:	4428      	add	r0, r5
   22f22:	f7fd fb15 	bl	20550 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   22f26:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   22f28:	4425      	add	r5, r4
    NumBytesWritten += NumBytesToWrite;
   22f2a:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   22f2c:	44a1      	add	r9, r4
    NumBytes        -= NumBytesToWrite;
   22f2e:	1b3f      	subs	r7, r7, r4
      WrOff = 0u;
   22f30:	42ab      	cmp	r3, r5
   22f32:	bf08      	it	eq
   22f34:	2500      	moveq	r5, #0
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   22f36:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
   22f3a:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   22f3c:	2f00      	cmp	r7, #0
   22f3e:	d1de      	bne.n	22efe <_WriteBlocking+0x10>
}
   22f40:	4640      	mov	r0, r8
   22f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00022f46 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   22f46:	f7f7 bd17 	b.w	1a978 <_DoInit>

00022f4a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   22f4a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   22f4c:	f7ff fffb 	bl	22f46 <SEGGER_RTT_Init>

	return 0;
}
   22f50:	2000      	movs	r0, #0
   22f52:	bd08      	pop	{r3, pc}

00022f54 <z_device_state_init>:
}
   22f54:	4770      	bx	lr

00022f56 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   22f56:	b138      	cbz	r0, 22f68 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   22f58:	68c3      	ldr	r3, [r0, #12]
   22f5a:	8818      	ldrh	r0, [r3, #0]
   22f5c:	f3c0 0008 	ubfx	r0, r0, #0, #9
   22f60:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   22f64:	4258      	negs	r0, r3
   22f66:	4158      	adcs	r0, r3
}
   22f68:	4770      	bx	lr

00022f6a <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   22f6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22f6c:	4605      	mov	r5, r0
   22f6e:	460e      	mov	r6, r1
	__asm__ volatile(
   22f70:	f04f 0340 	mov.w	r3, #64	; 0x40
   22f74:	f3ef 8711 	mrs	r7, BASEPRI
   22f78:	f383 8812 	msr	BASEPRI_MAX, r3
   22f7c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   22f80:	f7f8 fd9a 	bl	1bab8 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   22f84:	4631      	mov	r1, r6
   22f86:	4604      	mov	r4, r0
   22f88:	4628      	mov	r0, r5
   22f8a:	f7ff fe3e 	bl	22c0a <k_sys_fatal_error_handler>
	__asm__ volatile(
   22f8e:	f387 8811 	msr	BASEPRI, r7
   22f92:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   22f96:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   22f98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   22f9c:	f7f0 bd32 	b.w	13a04 <z_impl_k_thread_abort>

00022fa0 <z_early_memset>:
	(void) memset(dst, c, n);
   22fa0:	f7fd bae1 	b.w	20566 <memset>

00022fa4 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   22fa4:	f7fd bad4 	b.w	20550 <memcpy>

00022fa8 <k_heap_init>:
{
   22fa8:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   22faa:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   22fae:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   22fb2:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   22fb4:	f7fc bf6c 	b.w	1fe90 <sys_heap_init>

00022fb8 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   22fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22fbc:	b085      	sub	sp, #20
   22fbe:	4606      	mov	r6, r0
   22fc0:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   22fc2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   22fc6:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   22fc8:	f000 fbea 	bl	237a0 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   22fcc:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   22fd0:	4605      	mov	r5, r0
   22fd2:	460f      	mov	r7, r1
	__asm__ volatile(
   22fd4:	f04f 0340 	mov.w	r3, #64	; 0x40
   22fd8:	f3ef 8411 	mrs	r4, BASEPRI
   22fdc:	f383 8812 	msr	BASEPRI_MAX, r3
   22fe0:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   22fe4:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   22fe8:	464a      	mov	r2, r9
   22fea:	4641      	mov	r1, r8
   22fec:	4630      	mov	r0, r6
   22fee:	f7fc fee7 	bl	1fdc0 <sys_heap_aligned_alloc>
   22ff2:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   22ff4:	f7f8 ff04 	bl	1be00 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   22ff8:	9b03      	ldr	r3, [sp, #12]
   22ffa:	b13b      	cbz	r3, 2300c <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   22ffc:	f384 8811 	msr	BASEPRI, r4
   23000:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   23004:	4618      	mov	r0, r3
   23006:	b005      	add	sp, #20
   23008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2300c:	1a28      	subs	r0, r5, r0
   2300e:	eb67 0101 	sbc.w	r1, r7, r1
   23012:	2801      	cmp	r0, #1
   23014:	f171 0200 	sbcs.w	r2, r1, #0
   23018:	dbf0      	blt.n	22ffc <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2301a:	e9cd 0100 	strd	r0, r1, [sp]
   2301e:	465a      	mov	r2, fp
   23020:	4621      	mov	r1, r4
   23022:	4650      	mov	r0, sl
   23024:	f7f8 fbf0 	bl	1b808 <z_pend_curr>
	__asm__ volatile(
   23028:	f04f 0340 	mov.w	r3, #64	; 0x40
   2302c:	f3ef 8411 	mrs	r4, BASEPRI
   23030:	f383 8812 	msr	BASEPRI_MAX, r3
   23034:	f3bf 8f6f 	isb	sy
   23038:	e7d6      	b.n	22fe8 <k_heap_aligned_alloc+0x30>

0002303a <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2303a:	b538      	push	{r3, r4, r5, lr}
   2303c:	4604      	mov	r4, r0
   2303e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23042:	f3ef 8511 	mrs	r5, BASEPRI
   23046:	f383 8812 	msr	BASEPRI_MAX, r3
   2304a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2304e:	f7fc fe7f 	bl	1fd50 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   23052:	f104 000c 	add.w	r0, r4, #12
   23056:	f000 fb2c 	bl	236b2 <z_unpend_all>
   2305a:	b130      	cbz	r0, 2306a <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2305c:	4629      	mov	r1, r5
   2305e:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   23062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   23066:	f7f8 ba7b 	b.w	1b560 <z_reschedule>
	__asm__ volatile(
   2306a:	f385 8811 	msr	BASEPRI, r5
   2306e:	f3bf 8f6f 	isb	sy
}
   23072:	bd38      	pop	{r3, r4, r5, pc}

00023074 <k_mem_slab_init>:
{
   23074:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   23076:	2400      	movs	r4, #0
   23078:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2307a:	ea41 0402 	orr.w	r4, r1, r2
   2307e:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   23082:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   23086:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   23088:	d10c      	bne.n	230a4 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   2308a:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2308c:	42a3      	cmp	r3, r4
   2308e:	d103      	bne.n	23098 <k_mem_slab_init+0x24>
   23090:	e9c0 0000 	strd	r0, r0, [r0]
}
   23094:	2000      	movs	r0, #0
}
   23096:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   23098:	6945      	ldr	r5, [r0, #20]
   2309a:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2309c:	3401      	adds	r4, #1
		slab->free_list = p;
   2309e:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   230a0:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   230a2:	e7f3      	b.n	2308c <k_mem_slab_init+0x18>
		return -EINVAL;
   230a4:	f06f 0015 	mvn.w	r0, #21
	return rc;
   230a8:	e7f5      	b.n	23096 <k_mem_slab_init+0x22>

000230aa <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   230aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   230ac:	4604      	mov	r4, r0
   230ae:	460d      	mov	r5, r1
	__asm__ volatile(
   230b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   230b4:	f3ef 8611 	mrs	r6, BASEPRI
   230b8:	f383 8812 	msr	BASEPRI_MAX, r3
   230bc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   230c0:	6947      	ldr	r7, [r0, #20]
   230c2:	b977      	cbnz	r7, 230e2 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   230c4:	f000 fadd 	bl	23682 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   230c8:	b158      	cbz	r0, 230e2 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   230ca:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   230cc:	6142      	str	r2, [r0, #20]
   230ce:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   230d0:	f000 fa66 	bl	235a0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   230d4:	4631      	mov	r1, r6
   230d6:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   230da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   230de:	f7f8 ba3f 	b.w	1b560 <z_reschedule>
	**(char ***) mem = slab->free_list;
   230e2:	682b      	ldr	r3, [r5, #0]
   230e4:	6962      	ldr	r2, [r4, #20]
   230e6:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   230e8:	682b      	ldr	r3, [r5, #0]
   230ea:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   230ec:	69a3      	ldr	r3, [r4, #24]
   230ee:	3b01      	subs	r3, #1
   230f0:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   230f2:	f386 8811 	msr	BASEPRI, r6
   230f6:	f3bf 8f6f 	isb	sy
}
   230fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000230fc <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   230fc:	f3ef 8005 	mrs	r0, IPSR
}
   23100:	3800      	subs	r0, #0
   23102:	bf18      	it	ne
   23104:	2001      	movne	r0, #1
   23106:	4770      	bx	lr

00023108 <z_impl_k_thread_name_set>:
}
   23108:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2310c:	4770      	bx	lr

0002310e <z_impl_k_thread_start>:
	z_sched_start(thread);
   2310e:	f7f8 bb1f 	b.w	1b750 <z_sched_start>

00023112 <z_pm_save_idle_exit>:
{
   23112:	b508      	push	{r3, lr}
	pm_system_resume();
   23114:	f7ef ff5a 	bl	12fcc <pm_system_resume>
}
   23118:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2311c:	f7ff bd74 	b.w	22c08 <sys_clock_idle_exit>

00023120 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   23120:	f990 300e 	ldrsb.w	r3, [r0, #14]
   23124:	428b      	cmp	r3, r1
   23126:	d001      	beq.n	2312c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   23128:	f7f8 bb82 	b.w	1b830 <z_set_prio>
}
   2312c:	2000      	movs	r0, #0
   2312e:	4770      	bx	lr

00023130 <z_impl_k_mutex_init>:
{
   23130:	4603      	mov	r3, r0
	mutex->owner = NULL;
   23132:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   23134:	e9c3 0002 	strd	r0, r0, [r3, #8]
   23138:	e9c3 3300 	strd	r3, r3, [r3]
}
   2313c:	4770      	bx	lr

0002313e <queue_insert>:
{
   2313e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23142:	4699      	mov	r9, r3
   23144:	4604      	mov	r4, r0
   23146:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2314a:	460d      	mov	r5, r1
   2314c:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2314e:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   23152:	f04f 0240 	mov.w	r2, #64	; 0x40
   23156:	f3ef 8711 	mrs	r7, BASEPRI
   2315a:	f382 8812 	msr	BASEPRI_MAX, r2
   2315e:	f3bf 8f6f 	isb	sy
	if (is_append) {
   23162:	b103      	cbz	r3, 23166 <queue_insert+0x28>
	return list->tail;
   23164:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   23166:	4630      	mov	r0, r6
   23168:	f000 fa8b 	bl	23682 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2316c:	b158      	cbz	r0, 23186 <queue_insert+0x48>
   2316e:	2400      	movs	r4, #0
   23170:	67c4      	str	r4, [r0, #124]	; 0x7c
   23172:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   23176:	f000 fa13 	bl	235a0 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2317a:	4630      	mov	r0, r6
   2317c:	4639      	mov	r1, r7
   2317e:	f7f8 f9ef 	bl	1b560 <z_reschedule>
	return 0;
   23182:	2000      	movs	r0, #0
   23184:	e00c      	b.n	231a0 <queue_insert+0x62>
	if (alloc) {
   23186:	f1b9 0f00 	cmp.w	r9, #0
   2318a:	d01b      	beq.n	231c4 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   2318c:	2108      	movs	r1, #8
   2318e:	f7f8 ff6b 	bl	1c068 <z_thread_aligned_alloc>
		if (anode == NULL) {
   23192:	b938      	cbnz	r0, 231a4 <queue_insert+0x66>
	__asm__ volatile(
   23194:	f387 8811 	msr	BASEPRI, r7
   23198:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2319c:	f06f 000b 	mvn.w	r0, #11
}
   231a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   231a4:	2301      	movs	r3, #1
		anode->data = data;
   231a6:	f8c0 8004 	str.w	r8, [r0, #4]
   231aa:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   231ac:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   231ae:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   231b2:	b95d      	cbnz	r5, 231cc <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   231b4:	6823      	ldr	r3, [r4, #0]
   231b6:	4313      	orrs	r3, r2
   231b8:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   231ba:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   231bc:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   231be:	b973      	cbnz	r3, 231de <queue_insert+0xa0>
	list->tail = node;
   231c0:	6060      	str	r0, [r4, #4]
}
   231c2:	e00c      	b.n	231de <queue_insert+0xa0>
	node->next_and_flags = flags;
   231c4:	f8c8 9000 	str.w	r9, [r8]
}
   231c8:	4640      	mov	r0, r8
   231ca:	e7ef      	b.n	231ac <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   231cc:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   231ce:	f033 0303 	bics.w	r3, r3, #3
   231d2:	d110      	bne.n	231f6 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   231d4:	6002      	str	r2, [r0, #0]
	return list->tail;
   231d6:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   231d8:	b93a      	cbnz	r2, 231ea <queue_insert+0xac>
	list->head = node;
   231da:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   231de:	2104      	movs	r1, #4
   231e0:	f104 0010 	add.w	r0, r4, #16
   231e4:	f000 fc6e 	bl	23ac4 <z_handle_obj_poll_events>
   231e8:	e7c7      	b.n	2317a <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   231ea:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   231ec:	f003 0303 	and.w	r3, r3, #3
   231f0:	4303      	orrs	r3, r0
   231f2:	6013      	str	r3, [r2, #0]
   231f4:	e7e4      	b.n	231c0 <queue_insert+0x82>
   231f6:	4313      	orrs	r3, r2
   231f8:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   231fa:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   231fc:	f003 0303 	and.w	r3, r3, #3
   23200:	4303      	orrs	r3, r0
   23202:	602b      	str	r3, [r5, #0]
}
   23204:	e7eb      	b.n	231de <queue_insert+0xa0>

00023206 <z_queue_node_peek>:
{
   23206:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   23208:	4604      	mov	r4, r0
   2320a:	b130      	cbz	r0, 2321a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2320c:	6802      	ldr	r2, [r0, #0]
   2320e:	0793      	lsls	r3, r2, #30
   23210:	d003      	beq.n	2321a <z_queue_node_peek+0x14>
		ret = anode->data;
   23212:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   23214:	b109      	cbz	r1, 2321a <z_queue_node_peek+0x14>
			k_free(anode);
   23216:	f000 fc6b 	bl	23af0 <k_free>
}
   2321a:	4620      	mov	r0, r4
   2321c:	bd10      	pop	{r4, pc}

0002321e <z_impl_k_queue_init>:
	list->head = NULL;
   2321e:	2300      	movs	r3, #0
	list->tail = NULL;
   23220:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   23224:	f100 0308 	add.w	r3, r0, #8
   23228:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2322c:	f100 0310 	add.w	r3, r0, #16
   23230:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   23234:	4770      	bx	lr

00023236 <k_queue_append>:
{
   23236:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   23238:	2301      	movs	r3, #1
   2323a:	9300      	str	r3, [sp, #0]
   2323c:	2300      	movs	r3, #0
{
   2323e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   23240:	4619      	mov	r1, r3
   23242:	f7ff ff7c 	bl	2313e <queue_insert>
}
   23246:	b003      	add	sp, #12
   23248:	f85d fb04 	ldr.w	pc, [sp], #4

0002324c <k_queue_prepend>:
{
   2324c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2324e:	2300      	movs	r3, #0
{
   23250:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   23252:	9300      	str	r3, [sp, #0]
   23254:	4619      	mov	r1, r3
   23256:	f7ff ff72 	bl	2313e <queue_insert>
}
   2325a:	b003      	add	sp, #12
   2325c:	f85d fb04 	ldr.w	pc, [sp], #4

00023260 <k_queue_append_list>:
{
   23260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23264:	4605      	mov	r5, r0
   23266:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   23268:	460c      	mov	r4, r1
   2326a:	b391      	cbz	r1, 232d2 <k_queue_append_list+0x72>
   2326c:	b38a      	cbz	r2, 232d2 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2326e:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   23272:	f04f 0340 	mov.w	r3, #64	; 0x40
   23276:	f3ef 8811 	mrs	r8, BASEPRI
   2327a:	f383 8812 	msr	BASEPRI_MAX, r3
   2327e:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   23282:	4638      	mov	r0, r7
   23284:	f000 f9fd 	bl	23682 <z_unpend_first_thread>
   23288:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   2328c:	b920      	cbnz	r0, 23298 <k_queue_append_list+0x38>
	return list->tail;
   2328e:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   23290:	b9ca      	cbnz	r2, 232c6 <k_queue_append_list+0x66>
	list->head = node;
   23292:	602c      	str	r4, [r5, #0]
	list->tail = node;
   23294:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   23296:	e00a      	b.n	232ae <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   23298:	6144      	str	r4, [r0, #20]
   2329a:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   2329e:	f000 f97f 	bl	235a0 <z_ready_thread>
		head = *(void **)head;
   232a2:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   232a4:	4638      	mov	r0, r7
   232a6:	f000 f9ec 	bl	23682 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   232aa:	2c00      	cmp	r4, #0
   232ac:	d1ee      	bne.n	2328c <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   232ae:	2104      	movs	r1, #4
   232b0:	f105 0010 	add.w	r0, r5, #16
   232b4:	f000 fc06 	bl	23ac4 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   232b8:	4638      	mov	r0, r7
   232ba:	4641      	mov	r1, r8
   232bc:	f7f8 f950 	bl	1b560 <z_reschedule>
	return 0;
   232c0:	2000      	movs	r0, #0
}
   232c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   232c6:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   232c8:	f003 0303 	and.w	r3, r3, #3
   232cc:	431c      	orrs	r4, r3
   232ce:	6014      	str	r4, [r2, #0]
}
   232d0:	e7e0      	b.n	23294 <k_queue_append_list+0x34>
		return -EINVAL;
   232d2:	f06f 0015 	mvn.w	r0, #21
   232d6:	e7f4      	b.n	232c2 <k_queue_append_list+0x62>

000232d8 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   232d8:	b15a      	cbz	r2, 232f2 <z_impl_k_sem_init+0x1a>
   232da:	428a      	cmp	r2, r1
   232dc:	d309      	bcc.n	232f2 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   232de:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   232e2:	e9c0 1202 	strd	r1, r2, [r0, #8]
   232e6:	e9c0 0000 	strd	r0, r0, [r0]
   232ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   232ee:	2000      	movs	r0, #0
   232f0:	4770      	bx	lr
		return -EINVAL;
   232f2:	f06f 0015 	mvn.w	r0, #21
}
   232f6:	4770      	bx	lr

000232f8 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   232f8:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   232fa:	2301      	movs	r3, #1
   232fc:	408b      	lsls	r3, r1
   232fe:	ea22 0303 	bic.w	r3, r2, r3
   23302:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   23304:	fa22 f001 	lsr.w	r0, r2, r1
}
   23308:	f000 0001 	and.w	r0, r0, #1
   2330c:	4770      	bx	lr

0002330e <unschedule_locked>:
{
   2330e:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   23310:	2103      	movs	r1, #3
{
   23312:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   23314:	300c      	adds	r0, #12
   23316:	f7ff ffef 	bl	232f8 <flag_test_and_clear>
   2331a:	4604      	mov	r4, r0
   2331c:	b118      	cbz	r0, 23326 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2331e:	f105 0010 	add.w	r0, r5, #16
   23322:	f000 f9f3 	bl	2370c <z_abort_timeout>
}
   23326:	4620      	mov	r0, r4
   23328:	bd38      	pop	{r3, r4, r5, pc}

0002332a <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2332a:	b120      	cbz	r0, 23336 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2332c:	2200      	movs	r2, #0
   2332e:	4611      	mov	r1, r2
   23330:	3088      	adds	r0, #136	; 0x88
   23332:	f000 b9ce 	b.w	236d2 <z_sched_wake>
}
   23336:	4770      	bx	lr

00023338 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   23338:	68c3      	ldr	r3, [r0, #12]
{
   2333a:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2333c:	f3c3 0540 	ubfx	r5, r3, #1, #1
   23340:	079b      	lsls	r3, r3, #30
{
   23342:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   23344:	d416      	bmi.n	23374 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   23346:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   23348:	2102      	movs	r1, #2
   2334a:	300c      	adds	r0, #12
   2334c:	f7ff ffd4 	bl	232f8 <flag_test_and_clear>
   23350:	b180      	cbz	r0, 23374 <cancel_async_locked+0x3c>
	return list->head;
   23352:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   23356:	b16a      	cbz	r2, 23374 <cancel_async_locked+0x3c>
   23358:	4294      	cmp	r4, r2
   2335a:	d11b      	bne.n	23394 <cancel_async_locked+0x5c>
	return node->next;
   2335c:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   2335e:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   23362:	b98d      	cbnz	r5, 23388 <cancel_async_locked+0x50>
   23364:	428c      	cmp	r4, r1
	list->head = node;
   23366:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   2336a:	d101      	bne.n	23370 <cancel_async_locked+0x38>
	list->tail = node;
   2336c:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   23370:	2300      	movs	r3, #0
   23372:	6023      	str	r3, [r4, #0]
	return *flagp;
   23374:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   23376:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2337a:	bf1e      	ittt	ne
   2337c:	f043 0302 	orrne.w	r3, r3, #2
   23380:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   23382:	f003 000f 	andne.w	r0, r3, #15
}
   23386:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   23388:	428c      	cmp	r4, r1
	parent->next = child;
   2338a:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2338c:	bf08      	it	eq
   2338e:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   23392:	e7ed      	b.n	23370 <cancel_async_locked+0x38>
	return node->next;
   23394:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   23396:	6812      	ldr	r2, [r2, #0]
   23398:	e7dd      	b.n	23356 <cancel_async_locked+0x1e>

0002339a <work_timeout>:
{
   2339a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2339c:	4604      	mov	r4, r0
   2339e:	f04f 0340 	mov.w	r3, #64	; 0x40
   233a2:	f3ef 8511 	mrs	r5, BASEPRI
   233a6:	f383 8812 	msr	BASEPRI_MAX, r3
   233aa:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   233ae:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   233b0:	f1a0 0610 	sub.w	r6, r0, #16
   233b4:	2103      	movs	r1, #3
   233b6:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   233b8:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   233ba:	f7ff ff9d 	bl	232f8 <flag_test_and_clear>
   233be:	b128      	cbz	r0, 233cc <work_timeout+0x32>
		queue = dw->queue;
   233c0:	69a3      	ldr	r3, [r4, #24]
   233c2:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   233c4:	a901      	add	r1, sp, #4
   233c6:	4630      	mov	r0, r6
   233c8:	f7f7 ff92 	bl	1b2f0 <submit_to_queue_locked>
	__asm__ volatile(
   233cc:	f385 8811 	msr	BASEPRI, r5
   233d0:	f3bf 8f6f 	isb	sy
}
   233d4:	b002      	add	sp, #8
   233d6:	bd70      	pop	{r4, r5, r6, pc}

000233d8 <k_work_init>:
{
   233d8:	b538      	push	{r3, r4, r5, lr}
   233da:	4604      	mov	r4, r0
   233dc:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   233de:	2210      	movs	r2, #16
   233e0:	2100      	movs	r1, #0
   233e2:	f7fd f8c0 	bl	20566 <memset>
   233e6:	6065      	str	r5, [r4, #4]
}
   233e8:	bd38      	pop	{r3, r4, r5, pc}

000233ea <k_work_busy_get>:
	__asm__ volatile(
   233ea:	f04f 0240 	mov.w	r2, #64	; 0x40
   233ee:	f3ef 8311 	mrs	r3, BASEPRI
   233f2:	f382 8812 	msr	BASEPRI_MAX, r2
   233f6:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   233fa:	68c0      	ldr	r0, [r0, #12]
   233fc:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   23400:	f383 8811 	msr	BASEPRI, r3
   23404:	f3bf 8f6f 	isb	sy
}
   23408:	4770      	bx	lr

0002340a <k_work_submit_to_queue>:
{
   2340a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2340c:	9001      	str	r0, [sp, #4]
   2340e:	4608      	mov	r0, r1
	__asm__ volatile(
   23410:	f04f 0340 	mov.w	r3, #64	; 0x40
   23414:	f3ef 8511 	mrs	r5, BASEPRI
   23418:	f383 8812 	msr	BASEPRI_MAX, r3
   2341c:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   23420:	a901      	add	r1, sp, #4
   23422:	f7f7 ff65 	bl	1b2f0 <submit_to_queue_locked>
   23426:	4604      	mov	r4, r0
	__asm__ volatile(
   23428:	f385 8811 	msr	BASEPRI, r5
   2342c:	f3bf 8f6f 	isb	sy
	if (ret > 0) {
   23430:	2800      	cmp	r0, #0
   23432:	dd09      	ble.n	23448 <k_work_submit_to_queue+0x3e>
	__asm__ volatile(
   23434:	f04f 0340 	mov.w	r3, #64	; 0x40
   23438:	f3ef 8011 	mrs	r0, BASEPRI
   2343c:	f383 8812 	msr	BASEPRI_MAX, r3
   23440:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   23444:	f000 f890 	bl	23568 <z_reschedule_irqlock>
}
   23448:	4620      	mov	r0, r4
   2344a:	b003      	add	sp, #12
   2344c:	bd30      	pop	{r4, r5, pc}

0002344e <k_work_init_delayable>:
{
   2344e:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   23450:	2230      	movs	r2, #48	; 0x30
{
   23452:	4604      	mov	r4, r0
   23454:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   23456:	2100      	movs	r1, #0
   23458:	f7fd f885 	bl	20566 <memset>
   2345c:	f44f 7380 	mov.w	r3, #256	; 0x100
   23460:	6065      	str	r5, [r4, #4]
   23462:	60e3      	str	r3, [r4, #12]
}
   23464:	bd38      	pop	{r3, r4, r5, pc}

00023466 <k_work_delayable_busy_get>:
   23466:	f7ff bfc0 	b.w	233ea <k_work_busy_get>

0002346a <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2346a:	b538      	push	{r3, r4, r5, lr}
   2346c:	4604      	mov	r4, r0
   2346e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23472:	f3ef 8511 	mrs	r5, BASEPRI
   23476:	f383 8812 	msr	BASEPRI_MAX, r3
   2347a:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   2347e:	f7ff ff46 	bl	2330e <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   23482:	4620      	mov	r0, r4
   23484:	f7ff ff58 	bl	23338 <cancel_async_locked>
	__asm__ volatile(
   23488:	f385 8811 	msr	BASEPRI, r5
   2348c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   23490:	bd38      	pop	{r3, r4, r5, pc}

00023492 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   23492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23494:	4604      	mov	r4, r0
   23496:	460d      	mov	r5, r1
	__asm__ volatile(
   23498:	f04f 0340 	mov.w	r3, #64	; 0x40
   2349c:	f3ef 8711 	mrs	r7, BASEPRI
   234a0:	f383 8812 	msr	BASEPRI_MAX, r3
   234a4:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   234a8:	68c3      	ldr	r3, [r0, #12]
   234aa:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   234ae:	2b00      	cmp	r3, #0
   234b0:	bf14      	ite	ne
   234b2:	2601      	movne	r6, #1
   234b4:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   234b6:	d009      	beq.n	234cc <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   234b8:	f7ff ff29 	bl	2330e <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   234bc:	4620      	mov	r0, r4
   234be:	f7ff ff3b 	bl	23338 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   234c2:	4629      	mov	r1, r5
   234c4:	4620      	mov	r0, r4
   234c6:	f7f7 fef5 	bl	1b2b4 <cancel_sync_locked>
   234ca:	4603      	mov	r3, r0
	__asm__ volatile(
   234cc:	f387 8811 	msr	BASEPRI, r7
   234d0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   234d4:	b13b      	cbz	r3, 234e6 <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   234d6:	f04f 32ff 	mov.w	r2, #4294967295
   234da:	f04f 33ff 	mov.w	r3, #4294967295
   234de:	f105 0008 	add.w	r0, r5, #8
   234e2:	f7f7 fe0f 	bl	1b104 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   234e6:	4630      	mov	r0, r6
   234e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000234ea <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   234ea:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   234ee:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   234f0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   234f2:	2300      	movs	r3, #0
	node->prev = NULL;
   234f4:	e9c0 3300 	strd	r3, r3, [r0]
}
   234f8:	4770      	bx	lr

000234fa <unpend_thread_no_timeout>:
{
   234fa:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   234fc:	f7ff fff5 	bl	234ea <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   23500:	7b43      	ldrb	r3, [r0, #13]
   23502:	f023 0302 	bic.w	r3, r3, #2
   23506:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   23508:	2300      	movs	r3, #0
   2350a:	6083      	str	r3, [r0, #8]
}
   2350c:	bd08      	pop	{r3, pc}

0002350e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2350e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   23512:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   23516:	4283      	cmp	r3, r0
		return b2 - b1;
   23518:	bf14      	ite	ne
   2351a:	1ac0      	subne	r0, r0, r3
	return 0;
   2351c:	2000      	moveq	r0, #0
}
   2351e:	4770      	bx	lr

00023520 <z_unpend_thread_no_timeout>:
{
   23520:	b508      	push	{r3, lr}
	__asm__ volatile(
   23522:	f04f 0340 	mov.w	r3, #64	; 0x40
   23526:	f3ef 8111 	mrs	r1, BASEPRI
   2352a:	f383 8812 	msr	BASEPRI_MAX, r3
   2352e:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   23532:	f7ff ffe2 	bl	234fa <unpend_thread_no_timeout>
	__asm__ volatile(
   23536:	f381 8811 	msr	BASEPRI, r1
   2353a:	f3bf 8f6f 	isb	sy
}
   2353e:	bd08      	pop	{r3, pc}

00023540 <z_unpend_thread>:
{
   23540:	b510      	push	{r4, lr}
	__asm__ volatile(
   23542:	f04f 0340 	mov.w	r3, #64	; 0x40
   23546:	f3ef 8411 	mrs	r4, BASEPRI
   2354a:	f383 8812 	msr	BASEPRI_MAX, r3
   2354e:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   23552:	f7ff ffd2 	bl	234fa <unpend_thread_no_timeout>
	__asm__ volatile(
   23556:	f384 8811 	msr	BASEPRI, r4
   2355a:	f3bf 8f6f 	isb	sy
}
   2355e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23562:	3018      	adds	r0, #24
   23564:	f000 b8d2 	b.w	2370c <z_abort_timeout>

00023568 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   23568:	4603      	mov	r3, r0
   2356a:	b920      	cbnz	r0, 23576 <z_reschedule_irqlock+0xe>
   2356c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   23570:	b90a      	cbnz	r2, 23576 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   23572:	f7f0 b803 	b.w	1357c <arch_swap>
   23576:	f383 8811 	msr	BASEPRI, r3
   2357a:	f3bf 8f6f 	isb	sy
}
   2357e:	4770      	bx	lr

00023580 <z_reschedule_unlocked>:
	__asm__ volatile(
   23580:	f04f 0340 	mov.w	r3, #64	; 0x40
   23584:	f3ef 8011 	mrs	r0, BASEPRI
   23588:	f383 8812 	msr	BASEPRI_MAX, r3
   2358c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   23590:	f7ff bfea 	b.w	23568 <z_reschedule_irqlock>

00023594 <z_priq_dumb_best>:
{
   23594:	4603      	mov	r3, r0
	return list->head == list;
   23596:	6800      	ldr	r0, [r0, #0]
}
   23598:	4283      	cmp	r3, r0
   2359a:	bf08      	it	eq
   2359c:	2000      	moveq	r0, #0
   2359e:	4770      	bx	lr

000235a0 <z_ready_thread>:
{
   235a0:	b510      	push	{r4, lr}
   235a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   235a6:	f3ef 8411 	mrs	r4, BASEPRI
   235aa:	f383 8812 	msr	BASEPRI_MAX, r3
   235ae:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   235b2:	f7f8 f897 	bl	1b6e4 <ready_thread>
	__asm__ volatile(
   235b6:	f384 8811 	msr	BASEPRI, r4
   235ba:	f3bf 8f6f 	isb	sy
}
   235be:	bd10      	pop	{r4, pc}

000235c0 <z_thread_timeout>:
{
   235c0:	b510      	push	{r4, lr}
   235c2:	4601      	mov	r1, r0
	__asm__ volatile(
   235c4:	f04f 0340 	mov.w	r3, #64	; 0x40
   235c8:	f3ef 8411 	mrs	r4, BASEPRI
   235cc:	f383 8812 	msr	BASEPRI_MAX, r3
   235d0:	f3bf 8f6f 	isb	sy
		if (!killed) {
   235d4:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   235d8:	f013 0f28 	tst.w	r3, #40	; 0x28
   235dc:	d10d      	bne.n	235fa <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   235de:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   235e2:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   235e4:	b10b      	cbz	r3, 235ea <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   235e6:	f7ff ff88 	bl	234fa <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   235ea:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   235ee:	f023 0314 	bic.w	r3, r3, #20
   235f2:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   235f6:	f7f8 f875 	bl	1b6e4 <ready_thread>
	__asm__ volatile(
   235fa:	f384 8811 	msr	BASEPRI, r4
   235fe:	f3bf 8f6f 	isb	sy
}
   23602:	bd10      	pop	{r4, pc}

00023604 <add_to_waitq_locked>:
{
   23604:	b538      	push	{r3, r4, r5, lr}
   23606:	4604      	mov	r4, r0
   23608:	460d      	mov	r5, r1
	unready_thread(thread);
   2360a:	f7f8 f8bf 	bl	1b78c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2360e:	7b63      	ldrb	r3, [r4, #13]
   23610:	f043 0302 	orr.w	r3, r3, #2
   23614:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   23616:	b195      	cbz	r5, 2363e <add_to_waitq_locked+0x3a>
   23618:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2361a:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2361c:	429d      	cmp	r5, r3
   2361e:	d015      	beq.n	2364c <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23620:	b1a3      	cbz	r3, 2364c <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   23622:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   23626:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   2362a:	4291      	cmp	r1, r2
   2362c:	d008      	beq.n	23640 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   2362e:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   23630:	2a00      	cmp	r2, #0
   23632:	dd05      	ble.n	23640 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   23634:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23636:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2363a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2363c:	605c      	str	r4, [r3, #4]
}
   2363e:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   23640:	686a      	ldr	r2, [r5, #4]
   23642:	4293      	cmp	r3, r2
   23644:	d002      	beq.n	2364c <add_to_waitq_locked+0x48>
   23646:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23648:	2b00      	cmp	r3, #0
   2364a:	d1ec      	bne.n	23626 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   2364c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2364e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   23652:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23654:	606c      	str	r4, [r5, #4]
}
   23656:	e7f2      	b.n	2363e <add_to_waitq_locked+0x3a>

00023658 <z_unpend1_no_timeout>:
{
   23658:	b510      	push	{r4, lr}
	__asm__ volatile(
   2365a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2365e:	f3ef 8411 	mrs	r4, BASEPRI
   23662:	f383 8812 	msr	BASEPRI_MAX, r3
   23666:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2366a:	f7ff ff93 	bl	23594 <z_priq_dumb_best>
		if (thread != NULL) {
   2366e:	4601      	mov	r1, r0
   23670:	b108      	cbz	r0, 23676 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   23672:	f7ff ff42 	bl	234fa <unpend_thread_no_timeout>
	__asm__ volatile(
   23676:	f384 8811 	msr	BASEPRI, r4
   2367a:	f3bf 8f6f 	isb	sy
}
   2367e:	4608      	mov	r0, r1
   23680:	bd10      	pop	{r4, pc}

00023682 <z_unpend_first_thread>:
{
   23682:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   23684:	f04f 0340 	mov.w	r3, #64	; 0x40
   23688:	f3ef 8511 	mrs	r5, BASEPRI
   2368c:	f383 8812 	msr	BASEPRI_MAX, r3
   23690:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   23694:	f7ff ff7e 	bl	23594 <z_priq_dumb_best>
		if (thread != NULL) {
   23698:	4604      	mov	r4, r0
   2369a:	b120      	cbz	r0, 236a6 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   2369c:	f7ff ff2d 	bl	234fa <unpend_thread_no_timeout>
   236a0:	3018      	adds	r0, #24
   236a2:	f000 f833 	bl	2370c <z_abort_timeout>
	__asm__ volatile(
   236a6:	f385 8811 	msr	BASEPRI, r5
   236aa:	f3bf 8f6f 	isb	sy
}
   236ae:	4620      	mov	r0, r4
   236b0:	bd38      	pop	{r3, r4, r5, pc}

000236b2 <z_unpend_all>:
{
   236b2:	b538      	push	{r3, r4, r5, lr}
   236b4:	4605      	mov	r5, r0
	int need_sched = 0;
   236b6:	2000      	movs	r0, #0
	return list->head == list;
   236b8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   236ba:	42a5      	cmp	r5, r4
   236bc:	d000      	beq.n	236c0 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   236be:	b904      	cbnz	r4, 236c2 <z_unpend_all+0x10>
}
   236c0:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   236c2:	4620      	mov	r0, r4
   236c4:	f7ff ff3c 	bl	23540 <z_unpend_thread>
		z_ready_thread(thread);
   236c8:	4620      	mov	r0, r4
   236ca:	f7ff ff69 	bl	235a0 <z_ready_thread>
		need_sched = 1;
   236ce:	2001      	movs	r0, #1
   236d0:	e7f2      	b.n	236b8 <z_unpend_all+0x6>

000236d2 <z_sched_wake>:
{
   236d2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   236d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   236d8:	f3ef 8511 	mrs	r5, BASEPRI
   236dc:	f383 8812 	msr	BASEPRI_MAX, r3
   236e0:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   236e4:	f7ff ff56 	bl	23594 <z_priq_dumb_best>
		if (thread != NULL) {
   236e8:	4604      	mov	r4, r0
   236ea:	b150      	cbz	r0, 23702 <z_sched_wake+0x30>
   236ec:	67c1      	str	r1, [r0, #124]	; 0x7c
   236ee:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   236f0:	f7ff ff03 	bl	234fa <unpend_thread_no_timeout>
   236f4:	3018      	adds	r0, #24
   236f6:	f000 f809 	bl	2370c <z_abort_timeout>
			ready_thread(thread);
   236fa:	4620      	mov	r0, r4
   236fc:	f7f7 fff2 	bl	1b6e4 <ready_thread>
			ret = true;
   23700:	2001      	movs	r0, #1
	__asm__ volatile(
   23702:	f385 8811 	msr	BASEPRI, r5
   23706:	f3bf 8f6f 	isb	sy
}
   2370a:	bd38      	pop	{r3, r4, r5, pc}

0002370c <z_abort_timeout>:
{
   2370c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2370e:	f04f 0240 	mov.w	r2, #64	; 0x40
   23712:	f3ef 8411 	mrs	r4, BASEPRI
   23716:	f382 8812 	msr	BASEPRI_MAX, r2
   2371a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2371e:	6803      	ldr	r3, [r0, #0]
   23720:	b13b      	cbz	r3, 23732 <z_abort_timeout+0x26>
			remove_timeout(to);
   23722:	f7f8 fa7d 	bl	1bc20 <remove_timeout>
			ret = 0;
   23726:	2000      	movs	r0, #0
	__asm__ volatile(
   23728:	f384 8811 	msr	BASEPRI, r4
   2372c:	f3bf 8f6f 	isb	sy
}
   23730:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   23732:	f06f 0015 	mvn.w	r0, #21
   23736:	e7f7      	b.n	23728 <z_abort_timeout+0x1c>

00023738 <z_get_next_timeout_expiry>:
{
   23738:	b510      	push	{r4, lr}
	__asm__ volatile(
   2373a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2373e:	f3ef 8411 	mrs	r4, BASEPRI
   23742:	f383 8812 	msr	BASEPRI_MAX, r3
   23746:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2374a:	f7f8 fa43 	bl	1bbd4 <next_timeout>
	__asm__ volatile(
   2374e:	f384 8811 	msr	BASEPRI, r4
   23752:	f3bf 8f6f 	isb	sy
}
   23756:	bd10      	pop	{r4, pc}

00023758 <z_set_timeout_expiry>:
{
   23758:	b570      	push	{r4, r5, r6, lr}
   2375a:	4604      	mov	r4, r0
   2375c:	460d      	mov	r5, r1
	__asm__ volatile(
   2375e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23762:	f3ef 8611 	mrs	r6, BASEPRI
   23766:	f383 8812 	msr	BASEPRI_MAX, r3
   2376a:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   2376e:	f7f8 fa31 	bl	1bbd4 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   23772:	2801      	cmp	r0, #1
   23774:	dd05      	ble.n	23782 <z_set_timeout_expiry+0x2a>
   23776:	42a0      	cmp	r0, r4
   23778:	db03      	blt.n	23782 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2377a:	4629      	mov	r1, r5
   2377c:	4620      	mov	r0, r4
   2377e:	f7f5 fa6d 	bl	18c5c <sys_clock_set_timeout>
	__asm__ volatile(
   23782:	f386 8811 	msr	BASEPRI, r6
   23786:	f3bf 8f6f 	isb	sy
}
   2378a:	bd70      	pop	{r4, r5, r6, pc}

0002378c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2378c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2378e:	f7f8 fb37 	bl	1be00 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   23792:	bd08      	pop	{r3, pc}

00023794 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   23794:	f7f8 bb34 	b.w	1be00 <sys_clock_tick_get>

00023798 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   23798:	b108      	cbz	r0, 2379e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2379a:	f7f0 ba3f 	b.w	13c1c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2379e:	4770      	bx	lr

000237a0 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   237a0:	f1b1 3fff 	cmp.w	r1, #4294967295
   237a4:	bf08      	it	eq
   237a6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   237aa:	b538      	push	{r3, r4, r5, lr}
   237ac:	4605      	mov	r5, r0
   237ae:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   237b0:	d01d      	beq.n	237ee <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   237b2:	ea51 0300 	orrs.w	r3, r1, r0
   237b6:	d103      	bne.n	237c0 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   237b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   237bc:	f7f8 bb20 	b.w	1be00 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   237c0:	f06f 0301 	mvn.w	r3, #1
   237c4:	1a18      	subs	r0, r3, r0
   237c6:	f04f 33ff 	mov.w	r3, #4294967295
   237ca:	eb63 0101 	sbc.w	r1, r3, r1
   237ce:	2900      	cmp	r1, #0
   237d0:	da0c      	bge.n	237ec <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   237d2:	f7f8 fb15 	bl	1be00 <sys_clock_tick_get>
   237d6:	2d01      	cmp	r5, #1
   237d8:	4622      	mov	r2, r4
   237da:	f174 0400 	sbcs.w	r4, r4, #0
   237de:	462b      	mov	r3, r5
   237e0:	bfbc      	itt	lt
   237e2:	2301      	movlt	r3, #1
   237e4:	2200      	movlt	r2, #0
   237e6:	1818      	adds	r0, r3, r0
   237e8:	eb41 0102 	adc.w	r1, r1, r2
}
   237ec:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   237ee:	f04f 30ff 	mov.w	r0, #4294967295
   237f2:	4601      	mov	r1, r0
   237f4:	e7fa      	b.n	237ec <sys_clock_timeout_end_calc+0x4c>

000237f6 <k_timer_init>:
	timer->status = 0U;
   237f6:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   237f8:	e9c0 1208 	strd	r1, r2, [r0, #32]
   237fc:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   23800:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   23804:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   23808:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2380a:	6343      	str	r3, [r0, #52]	; 0x34
}
   2380c:	4770      	bx	lr

0002380e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2380e:	b510      	push	{r4, lr}
   23810:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   23812:	f7ff ff7b 	bl	2370c <z_abort_timeout>

	if (inactive) {
   23816:	b9b0      	cbnz	r0, 23846 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   23818:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2381a:	b10b      	cbz	r3, 23820 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2381c:	4620      	mov	r0, r4
   2381e:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   23820:	f104 0018 	add.w	r0, r4, #24
   23824:	f7ff ff18 	bl	23658 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   23828:	b168      	cbz	r0, 23846 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2382a:	f7ff feb9 	bl	235a0 <z_ready_thread>
	__asm__ volatile(
   2382e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23832:	f3ef 8011 	mrs	r0, BASEPRI
   23836:	f383 8812 	msr	BASEPRI_MAX, r3
   2383a:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2383e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   23842:	f7ff be91 	b.w	23568 <z_reschedule_irqlock>
   23846:	bd10      	pop	{r4, pc}

00023848 <add_event>:
{
   23848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2384a:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2384c:	e9d0 1300 	ldrd	r1, r3, [r0]
   23850:	4288      	cmp	r0, r1
   23852:	4604      	mov	r4, r0
   23854:	d00d      	beq.n	23872 <add_event+0x2a>
	if ((pending == NULL) ||
   23856:	b163      	cbz	r3, 23872 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   23858:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2385a:	b100      	cbz	r0, 2385e <add_event+0x16>
   2385c:	3860      	subs	r0, #96	; 0x60
   2385e:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   23862:	4639      	mov	r1, r7
   23864:	f7ff fe53 	bl	2350e <z_sched_prio_cmp>
	if ((pending == NULL) ||
   23868:	2800      	cmp	r0, #0
   2386a:	dc02      	bgt.n	23872 <add_event+0x2a>
	return list->head == list;
   2386c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2386e:	42b4      	cmp	r4, r6
   23870:	d109      	bne.n	23886 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   23872:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   23874:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   23878:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2387a:	6065      	str	r5, [r4, #4]
}
   2387c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2387e:	6863      	ldr	r3, [r4, #4]
   23880:	42b3      	cmp	r3, r6
   23882:	d0f6      	beq.n	23872 <add_event+0x2a>
   23884:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   23886:	2e00      	cmp	r6, #0
   23888:	d0f3      	beq.n	23872 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   2388a:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2388c:	b101      	cbz	r1, 23890 <add_event+0x48>
   2388e:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   23890:	4638      	mov	r0, r7
   23892:	f7ff fe3c 	bl	2350e <z_sched_prio_cmp>
   23896:	2800      	cmp	r0, #0
   23898:	ddf1      	ble.n	2387e <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   2389a:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2389c:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   238a0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   238a2:	6075      	str	r5, [r6, #4]
			return;
   238a4:	e7ea      	b.n	2387c <add_event+0x34>

000238a6 <register_events>:
{
   238a6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   238aa:	2500      	movs	r5, #0
{
   238ac:	468b      	mov	fp, r1
   238ae:	4614      	mov	r4, r2
   238b0:	461f      	mov	r7, r3
   238b2:	4682      	mov	sl, r0
	int events_registered = 0;
   238b4:	462e      	mov	r6, r5
	event->poller = NULL;
   238b6:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   238b8:	455d      	cmp	r5, fp
   238ba:	db02      	blt.n	238c2 <register_events+0x1c>
}
   238bc:	4630      	mov	r0, r6
   238be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   238c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   238c6:	f3ef 8911 	mrs	r9, BASEPRI
   238ca:	f383 8812 	msr	BASEPRI_MAX, r3
   238ce:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   238d2:	f89a 300d 	ldrb.w	r3, [sl, #13]
   238d6:	f003 031f 	and.w	r3, r3, #31
   238da:	3b01      	subs	r3, #1
   238dc:	2b07      	cmp	r3, #7
   238de:	d80f      	bhi.n	23900 <register_events+0x5a>
   238e0:	e8df f003 	tbb	[pc, r3]
   238e4:	0a0e041e 	.word	0x0a0e041e
   238e8:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   238ec:	f8da 3010 	ldr.w	r3, [sl, #16]
   238f0:	689b      	ldr	r3, [r3, #8]
   238f2:	b12b      	cbz	r3, 23900 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   238f4:	2302      	movs	r3, #2
   238f6:	e020      	b.n	2393a <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   238f8:	f8da 3010 	ldr.w	r3, [sl, #16]
   238fc:	681b      	ldr	r3, [r3, #0]
   238fe:	bb8b      	cbnz	r3, 23964 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   23900:	bb47      	cbnz	r7, 23954 <register_events+0xae>
   23902:	7823      	ldrb	r3, [r4, #0]
   23904:	b333      	cbz	r3, 23954 <register_events+0xae>
	switch (event->type) {
   23906:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2390a:	f003 031f 	and.w	r3, r3, #31
   2390e:	3b01      	subs	r3, #1
   23910:	2b07      	cmp	r3, #7
   23912:	d830      	bhi.n	23976 <register_events+0xd0>
   23914:	e8df f003 	tbb	[pc, r3]
   23918:	282f2833 	.word	0x282f2833
   2391c:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   23920:	f8da 3010 	ldr.w	r3, [sl, #16]
   23924:	689b      	ldr	r3, [r3, #8]
   23926:	2b00      	cmp	r3, #0
   23928:	d0ea      	beq.n	23900 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2392a:	2301      	movs	r3, #1
   2392c:	e005      	b.n	2393a <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   2392e:	f8da 3010 	ldr.w	r3, [sl, #16]
   23932:	6a1b      	ldr	r3, [r3, #32]
   23934:	2b00      	cmp	r3, #0
   23936:	d0e3      	beq.n	23900 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   23938:	2310      	movs	r3, #16
	event->state |= state;
   2393a:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   2393e:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   23942:	f3c2 3145 	ubfx	r1, r2, #13, #6
   23946:	430b      	orrs	r3, r1
   23948:	f363 3252 	bfi	r2, r3, #13, #6
   2394c:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   23950:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   23954:	f389 8811 	msr	BASEPRI, r9
   23958:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2395c:	3501      	adds	r5, #1
   2395e:	f10a 0a14 	add.w	sl, sl, #20
   23962:	e7a9      	b.n	238b8 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   23964:	2304      	movs	r3, #4
   23966:	e7e8      	b.n	2393a <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   23968:	f8da 0010 	ldr.w	r0, [sl, #16]
   2396c:	4622      	mov	r2, r4
   2396e:	4651      	mov	r1, sl
   23970:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   23972:	f7ff ff69 	bl	23848 <add_event>
	event->poller = poller;
   23976:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   2397a:	3601      	adds	r6, #1
   2397c:	e7ea      	b.n	23954 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   2397e:	f8da 0010 	ldr.w	r0, [sl, #16]
   23982:	4622      	mov	r2, r4
   23984:	4651      	mov	r1, sl
   23986:	e7f4      	b.n	23972 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   23988:	f8da 0010 	ldr.w	r0, [sl, #16]
   2398c:	4622      	mov	r2, r4
   2398e:	4651      	mov	r1, sl
   23990:	3024      	adds	r0, #36	; 0x24
   23992:	e7ee      	b.n	23972 <register_events+0xcc>

00023994 <signal_poll_event>:
{
   23994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   23998:	6884      	ldr	r4, [r0, #8]
{
   2399a:	4605      	mov	r5, r0
   2399c:	460e      	mov	r6, r1
	if (poller != NULL) {
   2399e:	b144      	cbz	r4, 239b2 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   239a0:	7863      	ldrb	r3, [r4, #1]
   239a2:	2b01      	cmp	r3, #1
   239a4:	d136      	bne.n	23a14 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   239a6:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   239aa:	f013 0302 	ands.w	r3, r3, #2
   239ae:	d10a      	bne.n	239c6 <signal_poll_event+0x32>
		poller->is_polling = false;
   239b0:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   239b2:	68eb      	ldr	r3, [r5, #12]
   239b4:	f3c3 3145 	ubfx	r1, r3, #13, #6
   239b8:	430e      	orrs	r6, r1
	event->poller = NULL;
   239ba:	2000      	movs	r0, #0
	event->state |= state;
   239bc:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   239c0:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   239c2:	60eb      	str	r3, [r5, #12]
	return retcode;
   239c4:	e00b      	b.n	239de <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   239c6:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   239ca:	f1b3 3fff 	cmp.w	r3, #4294967295
   239ce:	bf08      	it	eq
   239d0:	f112 0f02 	cmneq.w	r2, #2
   239d4:	d105      	bne.n	239e2 <signal_poll_event+0x4e>
		poller->is_polling = false;
   239d6:	2300      	movs	r3, #0
   239d8:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   239da:	f06f 000a 	mvn.w	r0, #10
}
   239de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   239e2:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   239e6:	4640      	mov	r0, r8
   239e8:	f7ff fdaa 	bl	23540 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   239ec:	2e08      	cmp	r6, #8
   239ee:	bf0c      	ite	eq
   239f0:	f06f 0303 	mvneq.w	r3, #3
   239f4:	2300      	movne	r3, #0
   239f6:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   239f8:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   239fc:	06db      	lsls	r3, r3, #27
   239fe:	d102      	bne.n	23a06 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   23a00:	f854 7c48 	ldr.w	r7, [r4, #-72]
   23a04:	b10f      	cbz	r7, 23a0a <signal_poll_event+0x76>
		poller->is_polling = false;
   23a06:	2300      	movs	r3, #0
   23a08:	e7d2      	b.n	239b0 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   23a0a:	4640      	mov	r0, r8
   23a0c:	f7ff fdc8 	bl	235a0 <z_ready_thread>
		poller->is_polling = false;
   23a10:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   23a12:	e7ce      	b.n	239b2 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   23a14:	2b02      	cmp	r3, #2
   23a16:	d1f6      	bne.n	23a06 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   23a18:	7823      	ldrb	r3, [r4, #0]
   23a1a:	2b00      	cmp	r3, #0
   23a1c:	d0c9      	beq.n	239b2 <signal_poll_event+0x1e>
   23a1e:	f854 7c04 	ldr.w	r7, [r4, #-4]
   23a22:	2f00      	cmp	r7, #0
   23a24:	d0f4      	beq.n	23a10 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   23a26:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   23a2a:	f1a4 0914 	sub.w	r9, r4, #20
   23a2e:	f104 0014 	add.w	r0, r4, #20
   23a32:	f7ff fe6b 	bl	2370c <z_abort_timeout>
		twork->poll_result = 0;
   23a36:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   23a3a:	4649      	mov	r1, r9
   23a3c:	4638      	mov	r0, r7
   23a3e:	f7ff fce4 	bl	2340a <k_work_submit_to_queue>
		poller->is_polling = false;
   23a42:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   23a46:	e7b4      	b.n	239b2 <signal_poll_event+0x1e>

00023a48 <clear_event_registrations>:
	while (num_events--) {
   23a48:	2314      	movs	r3, #20
{
   23a4a:	b5f0      	push	{r4, r5, r6, r7, lr}
   23a4c:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   23a50:	2400      	movs	r4, #0
   23a52:	2601      	movs	r6, #1
	while (num_events--) {
   23a54:	b901      	cbnz	r1, 23a58 <clear_event_registrations+0x10>
}
   23a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   23a58:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   23a5c:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   23a60:	f003 031f 	and.w	r3, r3, #31
   23a64:	2b08      	cmp	r3, #8
   23a66:	f1a0 0714 	sub.w	r7, r0, #20
   23a6a:	d80d      	bhi.n	23a88 <clear_event_registrations+0x40>
   23a6c:	fa06 f303 	lsl.w	r3, r6, r3
   23a70:	f413 7f8b 	tst.w	r3, #278	; 0x116
   23a74:	d008      	beq.n	23a88 <clear_event_registrations+0x40>
	return node->next != NULL;
   23a76:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   23a7a:	b12b      	cbz	r3, 23a88 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   23a7c:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   23a80:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   23a82:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   23a84:	e940 4405 	strd	r4, r4, [r0, #-20]
   23a88:	f382 8811 	msr	BASEPRI, r2
   23a8c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   23a90:	f04f 0340 	mov.w	r3, #64	; 0x40
   23a94:	f3ef 8211 	mrs	r2, BASEPRI
   23a98:	f383 8812 	msr	BASEPRI_MAX, r3
   23a9c:	f3bf 8f6f 	isb	sy
   23aa0:	3901      	subs	r1, #1
   23aa2:	4638      	mov	r0, r7
   23aa4:	e7d6      	b.n	23a54 <clear_event_registrations+0xc>

00023aa6 <k_poll_event_init>:
{
   23aa6:	b510      	push	{r4, lr}
	event->type = type;
   23aa8:	04d2      	lsls	r2, r2, #19
   23aaa:	0209      	lsls	r1, r1, #8
   23aac:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   23ab0:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   23ab4:	430a      	orrs	r2, r1
   23ab6:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   23ab8:	2400      	movs	r4, #0
	event->type = type;
   23aba:	430a      	orrs	r2, r1
	event->obj = obj;
   23abc:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   23ac0:	6084      	str	r4, [r0, #8]
}
   23ac2:	bd10      	pop	{r4, pc}

00023ac4 <z_handle_obj_poll_events>:
{
   23ac4:	4603      	mov	r3, r0
	return list->head == list;
   23ac6:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   23ac8:	4283      	cmp	r3, r0
   23aca:	d008      	beq.n	23ade <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   23acc:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   23ad0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23ad2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23ad4:	2300      	movs	r3, #0
	node->prev = NULL;
   23ad6:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   23ada:	f7ff bf5b 	b.w	23994 <signal_poll_event>
}
   23ade:	4770      	bx	lr

00023ae0 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   23ae0:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   23ae2:	e9c0 0000 	strd	r0, r0, [r0]
   23ae6:	6083      	str	r3, [r0, #8]
}
   23ae8:	4770      	bx	lr

00023aea <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   23aea:	2300      	movs	r3, #0
   23aec:	6083      	str	r3, [r0, #8]
}
   23aee:	4770      	bx	lr

00023af0 <k_free>:
	if (ptr != NULL) {
   23af0:	b120      	cbz	r0, 23afc <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   23af2:	1f01      	subs	r1, r0, #4
   23af4:	f850 0c04 	ldr.w	r0, [r0, #-4]
   23af8:	f7ff ba9f 	b.w	2303a <k_heap_free>
}
   23afc:	4770      	bx	lr

00023afe <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   23afe:	4770      	bx	lr

00023b00 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   23b00:	f7f5 bf1e 	b.w	19940 <SystemInit>
